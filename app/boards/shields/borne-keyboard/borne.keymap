/*
 * Copyright (c) 2022 Gabriel Hansson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Number is the order in which the layer nodes appear
#define DEFAULT 0
#define PAD 1
#define UTIL_LAYER 2
#define FUNCTION 3

&sk {
    quick-release;
};

&lt {
	flavor = "hold-preferred";
};

/ {

	//IMPROVEMENT: move these into a separate compose key folder
	macros {
		// ö = U+00D6
		diaeresis_o: diaeresis_o {
			label = "diaeresis_o";
			compatible = "zmk,behavior-macro";
			// Default is 100ms 
			// https://zmk.dev/docs/behaviors/macros#tap-time
			tap-ms = <0>;
			#binding-cells = <0>;
			bindings =
				<&macro_tap &kp RA(DOUBLE_QUOTES) &kp O>
			;
		};

		// ä = U+00C4
		diaeresis_a: diaeresis_a {
			label = "diaeresis_a";
			compatible = "zmk,behavior-macro";
			tap-ms = <0>;
			#binding-cells = <0>;
			bindings =
				<&macro_tap &kp RA(DOUBLE_QUOTES) &kp A>
			;
		};

		// å = U+00C5
		ring_a: ring_a {
			label = "ring_a";
			compatible = "zmk,behavior-macro";
			tap-ms = <0>;
			#binding-cells = <0>;
			bindings =
				<&macro_tap &kp RA(ASTERISK) &kp A>
			;
		};
	};

	behaviors {
		t1_ctrl_t2_func_layer: t1_ctrl_t2_func_layer {
			compatible = "zmk,behavior-tap-dance";
			label = "T1_CTRL_T2_FUNC_LAYER";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp LEFT_CONTROL>, <&mo FUNCTION>;
		};

		mod_sticky_tap: mod_sticky_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "MOD_STICKY_TAP";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			bindings = <&kp>, <&sk>;
		};
	};

	keymap {
		compatible = "zmk,keymap";

		// Colemak-DH layout
		default_layer {
			bindings = <
				&kp Q &kp W &kp F &kp P &kp B &kp J &kp L &kp U &kp Y &ring_a
				&kp A &kp R &kp S &kp T &kp G &kp M &kp N &kp E &kp I &kp O
				&kp Z &kp X &kp C &kp D &kp V &kp K &kp H &diaeresis_a &diaeresis_o &kp SINGLE_QUOTE
				&t1_ctrl_t2_func_layer &mt LEFT_GUI ESC &lt UTIL_LAYER SPACE &mo PAD &mod_sticky_tap LSHIFT LALT &kp RIGHT_CONTROL
			>;
		};

		pad_layer {
			bindings = <
				&kp QUESTION &kp LEFT_PARENTHESIS &kp RIGHT_BRACE &kp RIGHT_PARENTHESIS &kp AMPERSAND &kp PERCENT &kp N1 &kp N2 &kp N3 &kp N0
				&kp SLASH &kp COMMA &kp LEFT_BRACE &kp PERIOD &kp PIPE &kp BACKSLASH &kp N4 &kp N5 &kp N6 &kp ASTERISK
				&kp EQUAL &kp MINUS &kp LESS_THAN &kp GREATER_THAN &kp PLUS &none &kp N7 &kp N8 &kp N9 &kp CARET
			&trans &trans &trans &trans &trans &trans
		>;
		};

		util_layer {
			bindings = <
				&kp TILDE &kp AT_SIGN &kp HASH &kp DOLLAR &none &none &kp RIGHT_BRACKET &kp LEFT_BRACKET &kp EXCLAMATION &none 
				&kp SEMICOLON &kp COLON &kp BSPC &kp RET &none &kp LEFT_ARROW &kp DOWN_ARROW &kp UP_ARROW &kp RIGHT_ARROW &kp UNDERSCORE 
				&none &none &none &kp TAB &none &kp HOME &kp PAGE_DOWN &kp PAGE_UP &kp END &kp GRAVE
				&trans &trans &trans &trans &trans &trans
			>;
		};

		function_layer {
			bindings = <
				&kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &kp F7 &kp F8 &kp F9 &kp F10
				&kp F11 &kp F12 &kp DELETE &kp INSERT &none &kp K_PREVIOUS &kp K_VOLUME_DOWN &kp K_VOLUME_UP &kp K_NEXT &kp K_PLAY_PAUSE
				&out OUT_TOG &bt BT_CLR &sk RIGHT_ALT &kp CAPSLOCK &kp SCROLLLOCK &kp K_MUTE &kp C_BRIGHTNESS_DEC &kp C_BRIGHTNESS_INC &kp K_CONTEXT_MENU &kp PRINTSCREEN 
				&trans &trans &trans &trans &trans &trans
			>;
		};
	};
};
