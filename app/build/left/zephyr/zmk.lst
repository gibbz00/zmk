
zmk.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00026000 <_vector_table>:
   26000:	f0 a3 00 20 85 d0 02 00 e9 bb 04 00 59 d0 02 00     ... ........Y...
   26010:	59 d0 02 00 59 d0 02 00 59 d0 02 00 00 00 00 00     Y...Y...Y.......
	...
   2602c:	ed cd 02 00 59 d0 02 00 00 00 00 00 a5 cd 02 00     ....Y...........
   2603c:	59 d0 02 00                                         Y...

00026040 <_irq_vector_table>:
   26040:	69 ce 02 00 81 ff 03 00 69 ce 02 00 69 ce 02 00     i.......i...i...
   26050:	69 ce 02 00 69 ce 02 00 69 ce 02 00 69 ce 02 00     i...i...i...i...
   26060:	69 ce 02 00 69 ce 02 00 69 ce 02 00 69 ce 02 00     i...i...i...i...
   26070:	69 ce 02 00 69 ce 02 00 69 ce 02 00 69 ce 02 00     i...i...i...i...
   26080:	69 ce 02 00 69 ce 02 00 69 ce 02 00 69 ce 02 00     i...i...i...i...
   26090:	69 ce 02 00 69 ce 02 00 69 ce 02 00 69 ce 02 00     i...i...i...i...
   260a0:	69 ce 02 00 69 ce 02 00 69 ce 02 00 69 ce 02 00     i...i...i...i...
   260b0:	69 ce 02 00 69 ce 02 00 69 ce 02 00 69 ce 02 00     i...i...i...i...
   260c0:	69 ce 02 00 69 ce 02 00 69 ce 02 00 69 ce 02 00     i...i...i...i...
   260d0:	69 ce 02 00 69 ce 02 00 69 ce 02 00 69 ce 02 00     i...i...i...i...
   260e0:	69 ce 02 00 69 ce 02 00 69 ce 02 00 69 ce 02 00     i...i...i...i...
   260f0:	69 ce 02 00 69 ce 02 00 69 ce 02 00 69 ce 02 00     i...i...i...i...

Disassembly of section text:

00026100 <__aeabi_uldivmod>:
   26100:	b953      	cbnz	r3, 26118 <__aeabi_uldivmod+0x18>
   26102:	b94a      	cbnz	r2, 26118 <__aeabi_uldivmod+0x18>
   26104:	2900      	cmp	r1, #0
   26106:	bf08      	it	eq
   26108:	2800      	cmpeq	r0, #0
   2610a:	bf1c      	itt	ne
   2610c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   26110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   26114:	f000 b80c 	b.w	26130 <__aeabi_idiv0>
   26118:	f1ad 0c08 	sub.w	ip, sp, #8
   2611c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   26120:	f000 f808 	bl	26134 <__udivmoddi4>
   26124:	f8dd e004 	ldr.w	lr, [sp, #4]
   26128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2612c:	b004      	add	sp, #16
   2612e:	4770      	bx	lr

00026130 <__aeabi_idiv0>:
   26130:	4770      	bx	lr
   26132:	bf00      	nop

00026134 <__udivmoddi4>:
   26134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26138:	4686      	mov	lr, r0
   2613a:	468c      	mov	ip, r1
   2613c:	4608      	mov	r0, r1
   2613e:	9e08      	ldr	r6, [sp, #32]
   26140:	4615      	mov	r5, r2
   26142:	4674      	mov	r4, lr
   26144:	4619      	mov	r1, r3
   26146:	2b00      	cmp	r3, #0
   26148:	f040 80c2 	bne.w	262d0 <__udivmoddi4+0x19c>
   2614c:	4285      	cmp	r5, r0
   2614e:	fab2 f282 	clz	r2, r2
   26152:	d945      	bls.n	261e0 <__udivmoddi4+0xac>
   26154:	b14a      	cbz	r2, 2616a <__udivmoddi4+0x36>
   26156:	f1c2 0320 	rsb	r3, r2, #32
   2615a:	fa00 fc02 	lsl.w	ip, r0, r2
   2615e:	fa2e f303 	lsr.w	r3, lr, r3
   26162:	4095      	lsls	r5, r2
   26164:	ea43 0c0c 	orr.w	ip, r3, ip
   26168:	4094      	lsls	r4, r2
   2616a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   2616e:	b2a8      	uxth	r0, r5
   26170:	fbbc f8fe 	udiv	r8, ip, lr
   26174:	0c23      	lsrs	r3, r4, #16
   26176:	fb0e cc18 	mls	ip, lr, r8, ip
   2617a:	fb08 f900 	mul.w	r9, r8, r0
   2617e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   26182:	4599      	cmp	r9, r3
   26184:	d928      	bls.n	261d8 <__udivmoddi4+0xa4>
   26186:	18eb      	adds	r3, r5, r3
   26188:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   2618c:	d204      	bcs.n	26198 <__udivmoddi4+0x64>
   2618e:	4599      	cmp	r9, r3
   26190:	d902      	bls.n	26198 <__udivmoddi4+0x64>
   26192:	f1a8 0702 	sub.w	r7, r8, #2
   26196:	442b      	add	r3, r5
   26198:	eba3 0309 	sub.w	r3, r3, r9
   2619c:	b2a4      	uxth	r4, r4
   2619e:	fbb3 fcfe 	udiv	ip, r3, lr
   261a2:	fb0e 331c 	mls	r3, lr, ip, r3
   261a6:	fb0c f000 	mul.w	r0, ip, r0
   261aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   261ae:	42a0      	cmp	r0, r4
   261b0:	d914      	bls.n	261dc <__udivmoddi4+0xa8>
   261b2:	192c      	adds	r4, r5, r4
   261b4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   261b8:	d204      	bcs.n	261c4 <__udivmoddi4+0x90>
   261ba:	42a0      	cmp	r0, r4
   261bc:	d902      	bls.n	261c4 <__udivmoddi4+0x90>
   261be:	f1ac 0302 	sub.w	r3, ip, #2
   261c2:	442c      	add	r4, r5
   261c4:	1a24      	subs	r4, r4, r0
   261c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   261ca:	b11e      	cbz	r6, 261d4 <__udivmoddi4+0xa0>
   261cc:	40d4      	lsrs	r4, r2
   261ce:	2300      	movs	r3, #0
   261d0:	6034      	str	r4, [r6, #0]
   261d2:	6073      	str	r3, [r6, #4]
   261d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   261d8:	4647      	mov	r7, r8
   261da:	e7dd      	b.n	26198 <__udivmoddi4+0x64>
   261dc:	4663      	mov	r3, ip
   261de:	e7f1      	b.n	261c4 <__udivmoddi4+0x90>
   261e0:	bb92      	cbnz	r2, 26248 <__udivmoddi4+0x114>
   261e2:	1b43      	subs	r3, r0, r5
   261e4:	2101      	movs	r1, #1
   261e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   261ea:	b2af      	uxth	r7, r5
   261ec:	fbb3 fcfe 	udiv	ip, r3, lr
   261f0:	0c20      	lsrs	r0, r4, #16
   261f2:	fb0e 331c 	mls	r3, lr, ip, r3
   261f6:	fb0c f807 	mul.w	r8, ip, r7
   261fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   261fe:	4598      	cmp	r8, r3
   26200:	d962      	bls.n	262c8 <__udivmoddi4+0x194>
   26202:	18eb      	adds	r3, r5, r3
   26204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   26208:	d204      	bcs.n	26214 <__udivmoddi4+0xe0>
   2620a:	4598      	cmp	r8, r3
   2620c:	d902      	bls.n	26214 <__udivmoddi4+0xe0>
   2620e:	f1ac 0002 	sub.w	r0, ip, #2
   26212:	442b      	add	r3, r5
   26214:	eba3 0308 	sub.w	r3, r3, r8
   26218:	b2a4      	uxth	r4, r4
   2621a:	fbb3 fcfe 	udiv	ip, r3, lr
   2621e:	fb0e 331c 	mls	r3, lr, ip, r3
   26222:	fb0c f707 	mul.w	r7, ip, r7
   26226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   2622a:	42a7      	cmp	r7, r4
   2622c:	d94e      	bls.n	262cc <__udivmoddi4+0x198>
   2622e:	192c      	adds	r4, r5, r4
   26230:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   26234:	d204      	bcs.n	26240 <__udivmoddi4+0x10c>
   26236:	42a7      	cmp	r7, r4
   26238:	d902      	bls.n	26240 <__udivmoddi4+0x10c>
   2623a:	f1ac 0302 	sub.w	r3, ip, #2
   2623e:	442c      	add	r4, r5
   26240:	1be4      	subs	r4, r4, r7
   26242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   26246:	e7c0      	b.n	261ca <__udivmoddi4+0x96>
   26248:	f1c2 0320 	rsb	r3, r2, #32
   2624c:	fa20 f103 	lsr.w	r1, r0, r3
   26250:	4095      	lsls	r5, r2
   26252:	4090      	lsls	r0, r2
   26254:	fa2e f303 	lsr.w	r3, lr, r3
   26258:	4303      	orrs	r3, r0
   2625a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   2625e:	b2af      	uxth	r7, r5
   26260:	fbb1 fcfe 	udiv	ip, r1, lr
   26264:	fb0e 101c 	mls	r0, lr, ip, r1
   26268:	0c19      	lsrs	r1, r3, #16
   2626a:	fb0c f807 	mul.w	r8, ip, r7
   2626e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   26272:	4588      	cmp	r8, r1
   26274:	fa04 f402 	lsl.w	r4, r4, r2
   26278:	d922      	bls.n	262c0 <__udivmoddi4+0x18c>
   2627a:	1869      	adds	r1, r5, r1
   2627c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   26280:	d204      	bcs.n	2628c <__udivmoddi4+0x158>
   26282:	4588      	cmp	r8, r1
   26284:	d902      	bls.n	2628c <__udivmoddi4+0x158>
   26286:	f1ac 0002 	sub.w	r0, ip, #2
   2628a:	4429      	add	r1, r5
   2628c:	eba1 0108 	sub.w	r1, r1, r8
   26290:	b29b      	uxth	r3, r3
   26292:	fbb1 fcfe 	udiv	ip, r1, lr
   26296:	fb0e 111c 	mls	r1, lr, ip, r1
   2629a:	fb0c f707 	mul.w	r7, ip, r7
   2629e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   262a2:	429f      	cmp	r7, r3
   262a4:	d90e      	bls.n	262c4 <__udivmoddi4+0x190>
   262a6:	18eb      	adds	r3, r5, r3
   262a8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   262ac:	d204      	bcs.n	262b8 <__udivmoddi4+0x184>
   262ae:	429f      	cmp	r7, r3
   262b0:	d902      	bls.n	262b8 <__udivmoddi4+0x184>
   262b2:	f1ac 0102 	sub.w	r1, ip, #2
   262b6:	442b      	add	r3, r5
   262b8:	1bdb      	subs	r3, r3, r7
   262ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   262be:	e792      	b.n	261e6 <__udivmoddi4+0xb2>
   262c0:	4660      	mov	r0, ip
   262c2:	e7e3      	b.n	2628c <__udivmoddi4+0x158>
   262c4:	4661      	mov	r1, ip
   262c6:	e7f7      	b.n	262b8 <__udivmoddi4+0x184>
   262c8:	4660      	mov	r0, ip
   262ca:	e7a3      	b.n	26214 <__udivmoddi4+0xe0>
   262cc:	4663      	mov	r3, ip
   262ce:	e7b7      	b.n	26240 <__udivmoddi4+0x10c>
   262d0:	4283      	cmp	r3, r0
   262d2:	d906      	bls.n	262e2 <__udivmoddi4+0x1ae>
   262d4:	b916      	cbnz	r6, 262dc <__udivmoddi4+0x1a8>
   262d6:	2100      	movs	r1, #0
   262d8:	4608      	mov	r0, r1
   262da:	e77b      	b.n	261d4 <__udivmoddi4+0xa0>
   262dc:	e9c6 e000 	strd	lr, r0, [r6]
   262e0:	e7f9      	b.n	262d6 <__udivmoddi4+0x1a2>
   262e2:	fab3 f783 	clz	r7, r3
   262e6:	b98f      	cbnz	r7, 2630c <__udivmoddi4+0x1d8>
   262e8:	4283      	cmp	r3, r0
   262ea:	d301      	bcc.n	262f0 <__udivmoddi4+0x1bc>
   262ec:	4572      	cmp	r2, lr
   262ee:	d808      	bhi.n	26302 <__udivmoddi4+0x1ce>
   262f0:	ebbe 0402 	subs.w	r4, lr, r2
   262f4:	eb60 0303 	sbc.w	r3, r0, r3
   262f8:	2001      	movs	r0, #1
   262fa:	469c      	mov	ip, r3
   262fc:	b91e      	cbnz	r6, 26306 <__udivmoddi4+0x1d2>
   262fe:	2100      	movs	r1, #0
   26300:	e768      	b.n	261d4 <__udivmoddi4+0xa0>
   26302:	4638      	mov	r0, r7
   26304:	e7fa      	b.n	262fc <__udivmoddi4+0x1c8>
   26306:	e9c6 4c00 	strd	r4, ip, [r6]
   2630a:	e7f8      	b.n	262fe <__udivmoddi4+0x1ca>
   2630c:	f1c7 0c20 	rsb	ip, r7, #32
   26310:	40bb      	lsls	r3, r7
   26312:	fa22 f40c 	lsr.w	r4, r2, ip
   26316:	431c      	orrs	r4, r3
   26318:	fa2e f10c 	lsr.w	r1, lr, ip
   2631c:	fa20 f30c 	lsr.w	r3, r0, ip
   26320:	40b8      	lsls	r0, r7
   26322:	4301      	orrs	r1, r0
   26324:	ea4f 4914 	mov.w	r9, r4, lsr #16
   26328:	fa0e f507 	lsl.w	r5, lr, r7
   2632c:	fbb3 f8f9 	udiv	r8, r3, r9
   26330:	fa1f fe84 	uxth.w	lr, r4
   26334:	fb09 3018 	mls	r0, r9, r8, r3
   26338:	0c0b      	lsrs	r3, r1, #16
   2633a:	fb08 fa0e 	mul.w	sl, r8, lr
   2633e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   26342:	459a      	cmp	sl, r3
   26344:	fa02 f207 	lsl.w	r2, r2, r7
   26348:	d940      	bls.n	263cc <__udivmoddi4+0x298>
   2634a:	18e3      	adds	r3, r4, r3
   2634c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   26350:	d204      	bcs.n	2635c <__udivmoddi4+0x228>
   26352:	459a      	cmp	sl, r3
   26354:	d902      	bls.n	2635c <__udivmoddi4+0x228>
   26356:	f1a8 0002 	sub.w	r0, r8, #2
   2635a:	4423      	add	r3, r4
   2635c:	eba3 030a 	sub.w	r3, r3, sl
   26360:	b289      	uxth	r1, r1
   26362:	fbb3 f8f9 	udiv	r8, r3, r9
   26366:	fb09 3318 	mls	r3, r9, r8, r3
   2636a:	fb08 fe0e 	mul.w	lr, r8, lr
   2636e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   26372:	458e      	cmp	lr, r1
   26374:	d92c      	bls.n	263d0 <__udivmoddi4+0x29c>
   26376:	1861      	adds	r1, r4, r1
   26378:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2637c:	d204      	bcs.n	26388 <__udivmoddi4+0x254>
   2637e:	458e      	cmp	lr, r1
   26380:	d902      	bls.n	26388 <__udivmoddi4+0x254>
   26382:	f1a8 0302 	sub.w	r3, r8, #2
   26386:	4421      	add	r1, r4
   26388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   2638c:	fba0 9802 	umull	r9, r8, r0, r2
   26390:	eba1 010e 	sub.w	r1, r1, lr
   26394:	4541      	cmp	r1, r8
   26396:	46ce      	mov	lr, r9
   26398:	4643      	mov	r3, r8
   2639a:	d302      	bcc.n	263a2 <__udivmoddi4+0x26e>
   2639c:	d106      	bne.n	263ac <__udivmoddi4+0x278>
   2639e:	454d      	cmp	r5, r9
   263a0:	d204      	bcs.n	263ac <__udivmoddi4+0x278>
   263a2:	ebb9 0e02 	subs.w	lr, r9, r2
   263a6:	eb68 0304 	sbc.w	r3, r8, r4
   263aa:	3801      	subs	r0, #1
   263ac:	2e00      	cmp	r6, #0
   263ae:	d0a6      	beq.n	262fe <__udivmoddi4+0x1ca>
   263b0:	ebb5 020e 	subs.w	r2, r5, lr
   263b4:	eb61 0103 	sbc.w	r1, r1, r3
   263b8:	fa01 fc0c 	lsl.w	ip, r1, ip
   263bc:	fa22 f307 	lsr.w	r3, r2, r7
   263c0:	ea4c 0303 	orr.w	r3, ip, r3
   263c4:	40f9      	lsrs	r1, r7
   263c6:	e9c6 3100 	strd	r3, r1, [r6]
   263ca:	e798      	b.n	262fe <__udivmoddi4+0x1ca>
   263cc:	4640      	mov	r0, r8
   263ce:	e7c5      	b.n	2635c <__udivmoddi4+0x228>
   263d0:	4643      	mov	r3, r8
   263d2:	e7d9      	b.n	26388 <__udivmoddi4+0x254>
   263d4:	0000      	movs	r0, r0
	...

000263d8 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   263d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   263da:	4d41      	ldr	r5, [pc, #260]	; (264e0 <bt_init+0x108>)
   263dc:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   263e0:	6899      	ldr	r1, [r3, #8]
   263e2:	f011 0101 	ands.w	r1, r1, #1
   263e6:	d124      	bne.n	26432 <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   263e8:	aa01      	add	r2, sp, #4
   263ea:	f640 4003 	movw	r0, #3075	; 0xc03
   263ee:	f007 fcef 	bl	2ddd0 <bt_hci_cmd_send_sync>
		if (err) {
   263f2:	4604      	mov	r4, r0
   263f4:	2800      	cmp	r0, #0
   263f6:	d16f      	bne.n	264d8 <bt_init+0x100>
		hci_reset_complete(rsp);
   263f8:	9c01      	ldr	r4, [sp, #4]
	uint8_t status = buf->data[0];
   263fa:	68a3      	ldr	r3, [r4, #8]
	if (status) {
   263fc:	781b      	ldrb	r3, [r3, #0]
   263fe:	b9ab      	cbnz	r3, 2642c <bt_init+0x54>
		bt_scan_reset();
   26400:	f008 ff78 	bl	2f2f4 <bt_scan_reset>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26404:	f3bf 8f5b 	dmb	ish
   26408:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   2640c:	f3bf 8f5b 	dmb	ish
   26410:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26414:	f003 0305 	and.w	r3, r3, #5
   26418:	f3bf 8f5b 	dmb	ish
   2641c:	e852 1f00 	ldrex	r1, [r2]
   26420:	e842 3000 	strex	r0, r3, [r2]
   26424:	2800      	cmp	r0, #0
   26426:	d1f9      	bne.n	2641c <bt_init+0x44>
   26428:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   2642c:	4620      	mov	r0, r4
   2642e:	f01d faf1 	bl	43a14 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   26432:	aa01      	add	r2, sp, #4
   26434:	2100      	movs	r1, #0
   26436:	f241 0003 	movw	r0, #4099	; 0x1003
   2643a:	f007 fcc9 	bl	2ddd0 <bt_hci_cmd_send_sync>
	if (err) {
   2643e:	4604      	mov	r4, r0
   26440:	2800      	cmp	r0, #0
   26442:	d149      	bne.n	264d8 <bt_init+0x100>
	read_local_features_complete(rsp);
   26444:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   26446:	4827      	ldr	r0, [pc, #156]	; (264e4 <bt_init+0x10c>)
   26448:	68b1      	ldr	r1, [r6, #8]
   2644a:	2208      	movs	r2, #8
   2644c:	3101      	adds	r1, #1
   2644e:	f025 fc8a 	bl	4bd66 <memcpy>
	net_buf_unref(rsp);
   26452:	4630      	mov	r0, r6
   26454:	f01d fade 	bl	43a14 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   26458:	4621      	mov	r1, r4
   2645a:	aa01      	add	r2, sp, #4
   2645c:	f241 0001 	movw	r0, #4097	; 0x1001
   26460:	f007 fcb6 	bl	2ddd0 <bt_hci_cmd_send_sync>
	if (err) {
   26464:	4604      	mov	r4, r0
   26466:	2800      	cmp	r0, #0
   26468:	d136      	bne.n	264d8 <bt_init+0x100>
	read_local_ver_complete(rsp);
   2646a:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   2646c:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   2646e:	785a      	ldrb	r2, [r3, #1]
   26470:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   26474:	78d9      	ldrb	r1, [r3, #3]
   26476:	789a      	ldrb	r2, [r3, #2]
   26478:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2647c:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   26480:	791a      	ldrb	r2, [r3, #4]
   26482:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   26486:	7a19      	ldrb	r1, [r3, #8]
   26488:	79da      	ldrb	r2, [r3, #7]
   2648a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2648e:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   26492:	795a      	ldrb	r2, [r3, #5]
   26494:	799b      	ldrb	r3, [r3, #6]
   26496:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   2649a:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   2649e:	f01d fab9 	bl	43a14 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   264a2:	4621      	mov	r1, r4
   264a4:	aa01      	add	r2, sp, #4
   264a6:	f241 0002 	movw	r0, #4098	; 0x1002
   264aa:	f007 fc91 	bl	2ddd0 <bt_hci_cmd_send_sync>
	if (err) {
   264ae:	4604      	mov	r4, r0
   264b0:	b990      	cbnz	r0, 264d8 <bt_init+0x100>
	read_supported_commands_complete(rsp);
   264b2:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   264b4:	480c      	ldr	r0, [pc, #48]	; (264e8 <bt_init+0x110>)
   264b6:	68b1      	ldr	r1, [r6, #8]
   264b8:	2240      	movs	r2, #64	; 0x40
   264ba:	3101      	adds	r1, #1
   264bc:	f025 fc53 	bl	4bd66 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
   264c0:	4809      	ldr	r0, [pc, #36]	; (264e8 <bt_init+0x110>)
   264c2:	f025 fd04 	bl	4bece <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
   264c6:	4630      	mov	r0, r6
   264c8:	f01d faa4 	bl	43a14 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   264cc:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   264d0:	065a      	lsls	r2, r3, #25
   264d2:	d40b      	bmi.n	264ec <bt_init+0x114>
		return -ENODEV;
   264d4:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   264d8:	4620      	mov	r0, r4
   264da:	b002      	add	sp, #8
   264dc:	bd70      	pop	{r4, r5, r6, pc}
   264de:	bf00      	nop
   264e0:	20000030 	.word	0x20000030
   264e4:	200000a0 	.word	0x200000a0
   264e8:	200000a8 	.word	0x200000a8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   264ec:	4621      	mov	r1, r4
   264ee:	aa01      	add	r2, sp, #4
   264f0:	f242 0003 	movw	r0, #8195	; 0x2003
   264f4:	f007 fc6c 	bl	2ddd0 <bt_hci_cmd_send_sync>
	if (err) {
   264f8:	4604      	mov	r4, r0
   264fa:	2800      	cmp	r0, #0
   264fc:	d1ec      	bne.n	264d8 <bt_init+0x100>
	read_le_features_complete(rsp);
   264fe:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   26500:	48b7      	ldr	r0, [pc, #732]	; (267e0 <bt_init+0x408>)
   26502:	68b1      	ldr	r1, [r6, #8]
   26504:	2208      	movs	r2, #8
   26506:	3101      	adds	r1, #1
   26508:	f025 fc2d 	bl	4bd66 <memcpy>
	net_buf_unref(rsp);
   2650c:	4630      	mov	r0, r6
   2650e:	f01d fa81 	bl	43a14 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   26512:	4621      	mov	r1, r4
   26514:	aa01      	add	r2, sp, #4
   26516:	f242 0002 	movw	r0, #8194	; 0x2002
   2651a:	f007 fc59 	bl	2ddd0 <bt_hci_cmd_send_sync>
		if (err) {
   2651e:	4604      	mov	r4, r0
   26520:	2800      	cmp	r0, #0
   26522:	d1d9      	bne.n	264d8 <bt_init+0x100>
		le_read_buffer_size_complete(rsp);
   26524:	9c01      	ldr	r4, [sp, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   26526:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   26528:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   2652c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   26530:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   26532:	b121      	cbz	r1, 2653e <bt_init+0x166>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   26534:	78da      	ldrb	r2, [r3, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   26536:	48ab      	ldr	r0, [pc, #684]	; (267e4 <bt_init+0x40c>)
   26538:	4611      	mov	r1, r2
   2653a:	f02a fb41 	bl	50bc0 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   2653e:	4620      	mov	r0, r4
   26540:	f01d fa68 	bl	43a14 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   26544:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   26548:	f016 0620 	ands.w	r6, r6, #32
   2654c:	d118      	bne.n	26580 <bt_init+0x1a8>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   2654e:	2102      	movs	r1, #2
   26550:	f640 406d 	movw	r0, #3181	; 0xc6d
   26554:	f007 fbe0 	bl	2dd18 <bt_hci_cmd_create>
		if (!buf) {
   26558:	4604      	mov	r4, r0
   2655a:	2800      	cmp	r0, #0
   2655c:	f000 80ce 	beq.w	266fc <bt_init+0x324>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   26560:	2102      	movs	r1, #2
   26562:	3008      	adds	r0, #8
   26564:	f029 fbe0 	bl	4fd28 <net_buf_simple_add>
		cp_le->le = 0x01;
   26568:	2301      	movs	r3, #1
   2656a:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   2656c:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   2656e:	4621      	mov	r1, r4
   26570:	4632      	mov	r2, r6
   26572:	f640 406d 	movw	r0, #3181	; 0xc6d
   26576:	f007 fc2b 	bl	2ddd0 <bt_hci_cmd_send_sync>
		if (err) {
   2657a:	4604      	mov	r4, r0
   2657c:	2800      	cmp	r0, #0
   2657e:	d1ab      	bne.n	264d8 <bt_init+0x100>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   26580:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   26584:	071b      	lsls	r3, r3, #28
   26586:	d512      	bpl.n	265ae <bt_init+0x1d6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   26588:	aa01      	add	r2, sp, #4
   2658a:	2100      	movs	r1, #0
   2658c:	f242 001c 	movw	r0, #8220	; 0x201c
   26590:	f007 fc1e 	bl	2ddd0 <bt_hci_cmd_send_sync>
		if (err) {
   26594:	4604      	mov	r4, r0
   26596:	2800      	cmp	r0, #0
   26598:	d19e      	bne.n	264d8 <bt_init+0x100>
		le_read_supp_states_complete(rsp);
   2659a:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   2659c:	6883      	ldr	r3, [r0, #8]
   2659e:	f8d3 2001 	ldr.w	r2, [r3, #1]
   265a2:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   265a6:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   265aa:	f01d fa33 	bl	43a14 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   265ae:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   265b2:	069e      	lsls	r6, r3, #26
   265b4:	d524      	bpl.n	26600 <bt_init+0x228>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   265b6:	f10d 0102 	add.w	r1, sp, #2
   265ba:	4668      	mov	r0, sp
   265bc:	f025 ff14 	bl	4c3e8 <hci_le_read_max_data_len>
		if (err) {
   265c0:	4604      	mov	r4, r0
   265c2:	2800      	cmp	r0, #0
   265c4:	d188      	bne.n	264d8 <bt_init+0x100>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   265c6:	2104      	movs	r1, #4
   265c8:	f242 0024 	movw	r0, #8228	; 0x2024
   265cc:	f007 fba4 	bl	2dd18 <bt_hci_cmd_create>
		if (!buf) {
   265d0:	4606      	mov	r6, r0
   265d2:	2800      	cmp	r0, #0
   265d4:	f000 8092 	beq.w	266fc <bt_init+0x324>
   265d8:	2104      	movs	r1, #4
   265da:	3008      	adds	r0, #8
   265dc:	f029 fba4 	bl	4fd28 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   265e0:	f8bd 3000 	ldrh.w	r3, [sp]
   265e4:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   265e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   265ea:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   265ec:	4622      	mov	r2, r4
   265ee:	4631      	mov	r1, r6
   265f0:	f242 0024 	movw	r0, #8228	; 0x2024
   265f4:	f007 fbec 	bl	2ddd0 <bt_hci_cmd_send_sync>
		if (err) {
   265f8:	4604      	mov	r4, r0
   265fa:	2800      	cmp	r0, #0
   265fc:	f47f af6c 	bne.w	264d8 <bt_init+0x100>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   26600:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   26604:	065c      	lsls	r4, r3, #25
   26606:	d510      	bpl.n	2662a <bt_init+0x252>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   26608:	aa01      	add	r2, sp, #4
   2660a:	2100      	movs	r1, #0
   2660c:	f242 002a 	movw	r0, #8234	; 0x202a
   26610:	f007 fbde 	bl	2ddd0 <bt_hci_cmd_send_sync>
		if (err) {
   26614:	4604      	mov	r4, r0
   26616:	2800      	cmp	r0, #0
   26618:	f47f af5e 	bne.w	264d8 <bt_init+0x100>
		le_read_resolving_list_size_complete(rsp);
   2661c:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   2661e:	6883      	ldr	r3, [r0, #8]
   26620:	785b      	ldrb	r3, [r3, #1]
   26622:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   26626:	f01d f9f5 	bl	43a14 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   2662a:	2108      	movs	r1, #8
   2662c:	f242 0001 	movw	r0, #8193	; 0x2001
   26630:	f007 fb72 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   26634:	4604      	mov	r4, r0
   26636:	2800      	cmp	r0, #0
   26638:	d060      	beq.n	266fc <bt_init+0x324>
   2663a:	2108      	movs	r1, #8
   2663c:	4408      	add	r0, r1
   2663e:	f029 fb73 	bl	4fd28 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   26642:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   26646:	f011 0f40 	tst.w	r1, #64	; 0x40
   2664a:	4602      	mov	r2, r0
   2664c:	f240 2302 	movw	r3, #514	; 0x202
   26650:	bf08      	it	eq
   26652:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   26654:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   26656:	bf4c      	ite	mi
   26658:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   2665c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   26660:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   26662:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   26666:	bf48      	it	mi
   26668:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   2666c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   26670:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   26674:	bf18      	it	ne
   26676:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   2667a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   2667e:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   26680:	bf48      	it	mi
   26682:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   26686:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   26688:	bf08      	it	eq
   2668a:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   2668e:	2100      	movs	r1, #0
   26690:	f025 fd63 	bl	4c15a <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   26694:	4621      	mov	r1, r4
   26696:	2200      	movs	r2, #0
   26698:	f242 0001 	movw	r0, #8193	; 0x2001
   2669c:	f007 fb98 	bl	2ddd0 <bt_hci_cmd_send_sync>
	if (err) {
   266a0:	4604      	mov	r4, r0
   266a2:	2800      	cmp	r0, #0
   266a4:	f47f af18 	bne.w	264d8 <bt_init+0x100>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   266a8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   266ac:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   266b0:	0698      	lsls	r0, r3, #26
   266b2:	d426      	bmi.n	26702 <bt_init+0x32a>
	if (bt_dev.le.acl_mtu) {
   266b4:	b9d9      	cbnz	r1, 266ee <bt_init+0x316>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   266b6:	aa01      	add	r2, sp, #4
   266b8:	f241 0005 	movw	r0, #4101	; 0x1005
   266bc:	f007 fb88 	bl	2ddd0 <bt_hci_cmd_send_sync>
	if (err) {
   266c0:	4604      	mov	r4, r0
   266c2:	2800      	cmp	r0, #0
   266c4:	f47f af08 	bne.w	264d8 <bt_init+0x100>
	if (bt_dev.le.acl_mtu) {
   266c8:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
   266cc:	9c01      	ldr	r4, [sp, #4]
	if (bt_dev.le.acl_mtu) {
   266ce:	b95b      	cbnz	r3, 266e8 <bt_init+0x310>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   266d0:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   266d2:	785a      	ldrb	r2, [r3, #1]
   266d4:	7899      	ldrb	r1, [r3, #2]
   266d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   266da:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   266de:	889a      	ldrh	r2, [r3, #4]
   266e0:	4840      	ldr	r0, [pc, #256]	; (267e4 <bt_init+0x40c>)
   266e2:	4611      	mov	r1, r2
   266e4:	f02a fa6c 	bl	50bc0 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   266e8:	4620      	mov	r0, r4
   266ea:	f01d f993 	bl	43a14 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   266ee:	2108      	movs	r1, #8
   266f0:	f640 4001 	movw	r0, #3073	; 0xc01
   266f4:	f007 fb10 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   266f8:	4604      	mov	r4, r0
   266fa:	b938      	cbnz	r0, 2670c <bt_init+0x334>
		return -ENOBUFS;
   266fc:	f06f 0468 	mvn.w	r4, #104	; 0x68
   26700:	e6ea      	b.n	264d8 <bt_init+0x100>
	else if (!bt_dev.le.acl_mtu) {
   26702:	2900      	cmp	r1, #0
   26704:	d1f3      	bne.n	266ee <bt_init+0x316>
		return -EIO;
   26706:	f06f 0404 	mvn.w	r4, #4
   2670a:	e6e5      	b.n	264d8 <bt_init+0x100>
   2670c:	2108      	movs	r1, #8
   2670e:	4408      	add	r0, r1
   26710:	f029 fb0a 	bl	4fd28 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   26714:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   26718:	07d9      	lsls	r1, r3, #31
   2671a:	4602      	mov	r2, r0
   2671c:	d457      	bmi.n	267ce <bt_init+0x3f6>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   2671e:	4832      	ldr	r0, [pc, #200]	; (267e8 <bt_init+0x410>)
   26720:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
	sys_put_le64(mask, ev->events);
   26724:	f025 fd19 	bl	4c15a <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   26728:	4621      	mov	r1, r4
   2672a:	2200      	movs	r2, #0
   2672c:	f640 4001 	movw	r0, #3073	; 0xc01
   26730:	f007 fb4e 	bl	2ddd0 <bt_hci_cmd_send_sync>
	if (err) {
   26734:	4604      	mov	r4, r0
   26736:	2800      	cmp	r0, #0
   26738:	f47f aece 	bne.w	264d8 <bt_init+0x100>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   2673c:	4601      	mov	r1, r0
   2673e:	aa01      	add	r2, sp, #4
   26740:	f64f 4001 	movw	r0, #64513	; 0xfc01
   26744:	f007 fb44 	bl	2ddd0 <bt_hci_cmd_send_sync>
	if (err) {
   26748:	4604      	mov	r4, r0
   2674a:	bb48      	cbnz	r0, 267a0 <bt_init+0x3c8>
	net_buf_unref(rsp);
   2674c:	9801      	ldr	r0, [sp, #4]
   2674e:	f01d f961 	bl	43a14 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   26752:	4621      	mov	r1, r4
   26754:	aa01      	add	r2, sp, #4
   26756:	f64f 4002 	movw	r0, #64514	; 0xfc02
   2675a:	f007 fb39 	bl	2ddd0 <bt_hci_cmd_send_sync>
	if (err) {
   2675e:	4604      	mov	r4, r0
   26760:	b9f0      	cbnz	r0, 267a0 <bt_init+0x3c8>
	rp.cmds = (void *)rsp->data;
   26762:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   26764:	4821      	ldr	r0, [pc, #132]	; (267ec <bt_init+0x414>)
   26766:	68b1      	ldr	r1, [r6, #8]
   26768:	2202      	movs	r2, #2
   2676a:	3101      	adds	r1, #1
   2676c:	f025 fafb 	bl	4bd66 <memcpy>
	net_buf_unref(rsp);
   26770:	4630      	mov	r0, r6
   26772:	f01d f94f 	bl	43a14 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   26776:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   2677a:	075b      	lsls	r3, r3, #29
   2677c:	d510      	bpl.n	267a0 <bt_init+0x3c8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   2677e:	aa01      	add	r2, sp, #4
   26780:	4621      	mov	r1, r4
   26782:	f64f 4003 	movw	r0, #64515	; 0xfc03
   26786:	f007 fb23 	bl	2ddd0 <bt_hci_cmd_send_sync>
		if (err) {
   2678a:	b948      	cbnz	r0, 267a0 <bt_init+0x3c8>
		rp.feat = (void *)rsp->data;
   2678c:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   2678e:	4818      	ldr	r0, [pc, #96]	; (267f0 <bt_init+0x418>)
   26790:	68a1      	ldr	r1, [r4, #8]
   26792:	2201      	movs	r2, #1
   26794:	4411      	add	r1, r2
   26796:	f025 fae6 	bl	4bd66 <memcpy>
		net_buf_unref(rsp);
   2679a:	4620      	mov	r0, r4
   2679c:	f01d f93a 	bl	43a14 <net_buf_unref>
	err = bt_id_init();
   267a0:	f026 f8e2 	bl	4c968 <bt_id_init>
	if (err) {
   267a4:	4604      	mov	r4, r0
   267a6:	2800      	cmp	r0, #0
   267a8:	f47f ae96 	bne.w	264d8 <bt_init+0x100>
		err = bt_conn_init();
   267ac:	f009 fece 	bl	3054c <bt_conn_init>
		if (err) {
   267b0:	4604      	mov	r4, r0
   267b2:	2800      	cmp	r0, #0
   267b4:	f47f ae90 	bne.w	264d8 <bt_init+0x100>
		if (!bt_dev.id_count) {
   267b8:	79eb      	ldrb	r3, [r5, #7]
   267ba:	2b00      	cmp	r3, #0
   267bc:	f43f ae8c 	beq.w	264d8 <bt_init+0x100>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   267c0:	2104      	movs	r1, #4
   267c2:	480c      	ldr	r0, [pc, #48]	; (267f4 <bt_init+0x41c>)
   267c4:	f025 fc59 	bl	4c07a <atomic_or>
	bt_finalize_init();
   267c8:	f007 fe9c 	bl	2e504 <bt_finalize_init>
	return 0;
   267cc:	e684      	b.n	264d8 <bt_init+0x100>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   267ce:	a102      	add	r1, pc, #8	; (adr r1, 267d8 <bt_init+0x400>)
   267d0:	e9d1 0100 	ldrd	r0, r1, [r1]
   267d4:	e7a6      	b.n	26724 <bt_init+0x34c>
   267d6:	bf00      	nop
   267d8:	02008890 	.word	0x02008890
   267dc:	20008000 	.word	0x20008000
   267e0:	20000100 	.word	0x20000100
   267e4:	20000130 	.word	0x20000130
   267e8:	02008810 	.word	0x02008810
   267ec:	200000e9 	.word	0x200000e9
   267f0:	200000e8 	.word	0x200000e8
   267f4:	200000fc 	.word	0x200000fc

000267f8 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
   267f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
   267fc:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
   26800:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
   26804:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
   26806:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
   26808:	45a0      	cmp	r8, r4
{
   2680a:	460f      	mov	r7, r1
   2680c:	4616      	mov	r6, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
   2680e:	d819      	bhi.n	26844 <ull_drift_ticks_get+0x4c>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   26810:	4d1d      	ldr	r5, [pc, #116]	; (26888 <ull_drift_ticks_get+0x90>)
   26812:	fba3 0105 	umull	r0, r1, r3, r5
   26816:	a31a      	add	r3, pc, #104	; (adr r3, 26880 <ull_drift_ticks_get+0x88>)
   26818:	e9d3 2300 	ldrd	r2, r3, [r3]
   2681c:	f7ff fc70 	bl	26100 <__aeabi_uldivmod>
   26820:	4603      	mov	r3, r0
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   26822:	eba4 0008 	sub.w	r0, r4, r8
   26826:	fba0 0105 	umull	r0, r1, r0, r5
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   2682a:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   2682e:	a314      	add	r3, pc, #80	; (adr r3, 26880 <ull_drift_ticks_get+0x88>)
   26830:	e9d3 2300 	ldrd	r2, r3, [r3]
   26834:	f7ff fc64 	bl	26100 <__aeabi_uldivmod>
   26838:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   2683c:	603c      	str	r4, [r7, #0]
		*ticks_drift_minus =
   2683e:	6030      	str	r0, [r6, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
   26840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   26844:	f8df 9040 	ldr.w	r9, [pc, #64]	; 26888 <ull_drift_ticks_get+0x90>
   26848:	a30d      	add	r3, pc, #52	; (adr r3, 26880 <ull_drift_ticks_get+0x88>)
   2684a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2684e:	fba8 0109 	umull	r0, r1, r8, r9
   26852:	f7ff fc55 	bl	26100 <__aeabi_uldivmod>
   26856:	4604      	mov	r4, r0
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   26858:	f105 0030 	add.w	r0, r5, #48	; 0x30
   2685c:	a308      	add	r3, pc, #32	; (adr r3, 26880 <ull_drift_ticks_get+0x88>)
   2685e:	e9d3 2300 	ldrd	r2, r3, [r3]
   26862:	fba0 0109 	umull	r0, r1, r0, r9
   26866:	f7ff fc4b 	bl	26100 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   2686a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   2686e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   26872:	603c      	str	r4, [r7, #0]
		*ticks_drift_minus =
   26874:	6030      	str	r0, [r6, #0]
}
   26876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2687a:	bf00      	nop
   2687c:	f3af 8000 	nop.w
   26880:	1afd498d 	.word	0x1afd498d
   26884:	00000007 	.word	0x00000007
   26888:	3b9aca00 	.word	0x3b9aca00
   2688c:	00000000 	.word	0x00000000

00026890 <ll_adv_enable>:
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint8_t hci_err;
	uint32_t ret;

	if (!enable) {
   26890:	2800      	cmp	r0, #0
   26892:	d04e      	beq.n	26932 <ll_adv_enable+0xa2>
{
   26894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
   26898:	4c5f      	ldr	r4, [pc, #380]	; (26a18 <ll_adv_enable+0x188>)
   2689a:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
   2689e:	f012 0501 	ands.w	r5, r2, #1
{
   268a2:	b091      	sub	sp, #68	; 0x44
	if (!adv || adv->is_enabled) {
   268a4:	f040 81fe 	bne.w	26ca4 <ll_adv_enable+0x414>
	ull_filter_adv_update(lll->filter_policy);
   268a8:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	lll->rl_idx = FILTER_IDX_NONE;
   268ac:	23ff      	movs	r3, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
   268ae:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
   268b2:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
   268b6:	f018 fef9 	bl	3f6ac <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   268ba:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   268be:	0746      	lsls	r6, r0, #29
   268c0:	d428      	bmi.n	26914 <ll_adv_enable+0x84>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   268c2:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   268c6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   268ca:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   268ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   268d2:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   268d4:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
   268d8:	b186      	cbz	r6, 268fc <ll_adv_enable+0x6c>
		const uint8_t *adv_addr;

		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
   268da:	484f      	ldr	r0, [pc, #316]	; (26a18 <ll_adv_enable+0x188>)
   268dc:	4631      	mov	r1, r6
   268de:	f012 facf 	bl	38e80 <ull_adv_pdu_update_addrs>

		/* In case the local IRK was not set or no match was
		 * found the fallback address was used instead, check
		 * that a valid address has been set.
		 */
		if (pdu_adv_to_update->tx_addr &&
   268e2:	7833      	ldrb	r3, [r6, #0]
   268e4:	065d      	lsls	r5, r3, #25
   268e6:	d505      	bpl.n	268f4 <ll_adv_enable+0x64>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
   268e8:	2106      	movs	r1, #6
   268ea:	f00d fb4b 	bl	33f84 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
   268ee:	2800      	cmp	r0, #0
   268f0:	f000 81da 	beq.w	26ca8 <ll_adv_enable+0x418>
		if ((pdu->type != PDU_ADV_TYPE_EXT_IND) ||
		    (pdu->adv_ext_ind.adv_mode & BT_HCI_LE_ADV_PROP_SCAN)) {
#else
		if (1) {
#endif
			ull_adv_pdu_update_addrs(adv, pdu_scan);
   268f4:	4848      	ldr	r0, [pc, #288]	; (26a18 <ll_adv_enable+0x188>)
   268f6:	4641      	mov	r1, r8
   268f8:	f012 fac2 	bl	38e80 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   268fc:	7833      	ldrb	r3, [r6, #0]
   268fe:	f013 0f0e 	tst.w	r3, #14
   26902:	d118      	bne.n	26936 <ll_adv_enable+0xa6>
		if (lll->conn) {
   26904:	6a23      	ldr	r3, [r4, #32]
   26906:	2b00      	cmp	r3, #0
   26908:	f000 8090 	beq.w	26a2c <ll_adv_enable+0x19c>
	return BT_HCI_ERR_CMD_DISALLOWED;
   2690c:	200c      	movs	r0, #12
}
   2690e:	b011      	add	sp, #68	; 0x44
   26910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
   26914:	462a      	mov	r2, r5
   26916:	f104 016b 	add.w	r1, r4, #107	; 0x6b
   2691a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   2691e:	f019 f85b 	bl	3f9d8 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
   26922:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
   26924:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
   26928:	d0cb      	beq.n	268c2 <ll_adv_enable+0x32>
			ull_filter_rpa_update(false);
   2692a:	4628      	mov	r0, r5
   2692c:	f018 ff04 	bl	3f738 <ull_filter_rpa_update>
   26930:	e7c7      	b.n	268c2 <ll_adv_enable+0x32>
		return disable(handle);
   26932:	f011 bfc1 	b.w	388b8 <disable.constprop.0>
	uint8_t ch_map = lll->chan_map;
   26936:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   2693a:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
   2693c:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26940:	a80c      	add	r0, sp, #48	; 0x30
	uint8_t ch_map = lll->chan_map;
   26942:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26946:	f00d fcb3 	bl	342b0 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
   2694a:	4602      	mov	r2, r0
   2694c:	2800      	cmp	r0, #0
   2694e:	d059      	beq.n	26a04 <ll_adv_enable+0x174>
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
   26950:	f898 1001 	ldrb.w	r1, [r8, #1]
   26954:	4630      	mov	r0, r6
   26956:	f012 f863 	bl	38a20 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   2695a:	4930      	ldr	r1, [pc, #192]	; (26a1c <ll_adv_enable+0x18c>)
	uint16_t interval = adv->interval;
   2695c:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
   26960:	2500      	movs	r5, #0
	adv->ull.ticks_prepare_to_start =
   26962:	2331      	movs	r3, #49	; 0x31
   26964:	60a3      	str	r3, [r4, #8]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   26966:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   2696a:	a329      	add	r3, pc, #164	; (adr r3, 26a10 <ll_adv_enable+0x180>)
   2696c:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
   26970:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
   26972:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_preempt_to_start =
   26974:	60e5      	str	r5, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   26976:	fba0 0101 	umull	r0, r1, r0, r1
   2697a:	f7ff fbc1 	bl	26100 <__aeabi_uldivmod>
   2697e:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
   26980:	f00e ff02 	bl	35788 <ticker_ticks_now_get>
   26984:	4680      	mov	r8, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   26986:	b93f      	cbnz	r7, 26998 <ll_adv_enable+0x108>
   26988:	7835      	ldrb	r5, [r6, #0]
   2698a:	f005 050f 	and.w	r5, r5, #15
   2698e:	f1a5 0501 	sub.w	r5, r5, #1
   26992:	fab5 f585 	clz	r5, r5
   26996:	096d      	lsrs	r5, r5, #5
   26998:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
   2699c:	6923      	ldr	r3, [r4, #16]
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   2699e:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
   269a2:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   269a6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
   269aa:	f000 8146 	beq.w	26c3a <ll_adv_enable+0x3aa>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   269ae:	2000      	movs	r0, #0
   269b0:	4a1b      	ldr	r2, [pc, #108]	; (26a20 <ll_adv_enable+0x190>)
   269b2:	4f1c      	ldr	r7, [pc, #112]	; (26a24 <ll_adv_enable+0x194>)
   269b4:	9304      	str	r3, [sp, #16]
		ret_cb = TICKER_STATUS_BUSY;
   269b6:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   269b8:	ae0e      	add	r6, sp, #56	; 0x38
   269ba:	9301      	str	r3, [sp, #4]
   269bc:	9205      	str	r2, [sp, #20]
   269be:	2103      	movs	r1, #3
   269c0:	e9cd 0002 	strd	r0, r0, [sp, #8]
   269c4:	9608      	str	r6, [sp, #32]
   269c6:	9406      	str	r4, [sp, #24]
   269c8:	4643      	mov	r3, r8
   269ca:	9000      	str	r0, [sp, #0]
   269cc:	9707      	str	r7, [sp, #28]
   269ce:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
   269d0:	950e      	str	r5, [sp, #56]	; 0x38
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   269d2:	f00e fdad 	bl	35530 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
   269d6:	4631      	mov	r1, r6
   269d8:	f011 f9a2 	bl	37d20 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
   269dc:	b990      	cbnz	r0, 26a04 <ll_adv_enable+0x174>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   269de:	4912      	ldr	r1, [pc, #72]	; (26a28 <ll_adv_enable+0x198>)
   269e0:	9105      	str	r1, [sp, #20]
   269e2:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
   269e6:	9300      	str	r3, [sp, #0]
   269e8:	e9cd 0003 	strd	r0, r0, [sp, #12]
   269ec:	e9cd 0001 	strd	r0, r0, [sp, #4]
   269f0:	9707      	str	r7, [sp, #28]
   269f2:	9608      	str	r6, [sp, #32]
   269f4:	9406      	str	r4, [sp, #24]
   269f6:	4643      	mov	r3, r8
   269f8:	2201      	movs	r2, #1
   269fa:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
   269fc:	950e      	str	r5, [sp, #56]	; 0x38
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   269fe:	f00e fd97 	bl	35530 <ticker_start>
   26a02:	e140      	b.n	26c86 <ll_adv_enable+0x3f6>
	if (adv->lll.conn) {
   26a04:	6a23      	ldr	r3, [r4, #32]
   26a06:	2b00      	cmp	r3, #0
   26a08:	d080      	beq.n	2690c <ll_adv_enable+0x7c>
		conn_release(adv);
   26a0a:	f011 ff13 	bl	38834 <conn_release.constprop.0>
   26a0e:	e77d      	b.n	2690c <ll_adv_enable+0x7c>
   26a10:	1afd498d 	.word	0x1afd498d
   26a14:	00000007 	.word	0x00000007
   26a18:	200057bc 	.word	0x200057bc
   26a1c:	3b9aca00 	.word	0x3b9aca00
   26a20:	00038a91 	.word	0x00038a91
   26a24:	000371f9 	.word	0x000371f9
   26a28:	000385c5 	.word	0x000385c5
		link = ll_rx_link_alloc();
   26a2c:	f011 f8c2 	bl	37bb4 <ll_rx_link_alloc>
		if (!link) {
   26a30:	4681      	mov	r9, r0
   26a32:	2800      	cmp	r0, #0
   26a34:	f000 8140 	beq.w	26cb8 <ll_adv_enable+0x428>
		node_rx = ll_rx_alloc();
   26a38:	f011 f8c8 	bl	37bcc <ll_rx_alloc>
		if (!node_rx) {
   26a3c:	4682      	mov	sl, r0
   26a3e:	2800      	cmp	r0, #0
   26a40:	f000 8137 	beq.w	26cb2 <ll_adv_enable+0x422>
		conn = ll_conn_acquire();
   26a44:	f013 fb06 	bl	3a054 <ll_conn_acquire>
		if (!conn) {
   26a48:	4605      	mov	r5, r0
   26a4a:	2800      	cmp	r0, #0
   26a4c:	f000 812e 	beq.w	26cac <ll_adv_enable+0x41c>
		conn_lll->handle = 0xFFFF;
   26a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (!conn_lll->link_tx_free) {
   26a54:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
   26a56:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
   26a58:	f105 031c 	add.w	r3, r5, #28
   26a5c:	930b      	str	r3, [sp, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
   26a5e:	2800      	cmp	r0, #0
   26a60:	f000 8130 	beq.w	26cc4 <ll_adv_enable+0x434>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   26a64:	f105 0268 	add.w	r2, r5, #104	; 0x68
   26a68:	f105 0164 	add.w	r1, r5, #100	; 0x64
   26a6c:	f00d fa96 	bl	33f9c <memq_init>
			conn_lll->phy_tx = PHY_1M;
   26a70:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   26a74:	4998      	ldr	r1, [pc, #608]	; (26cd8 <ll_adv_enable+0x448>)
			conn_lll->phy_tx = PHY_1M;
   26a76:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
   26a7a:	f023 0307 	bic.w	r3, r3, #7
   26a7e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   26a82:	f043 0301 	orr.w	r3, r3, #1
   26a86:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
   26a8a:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   26a8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26a92:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26a96:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
		conn_lll->sn = 0;
   26a9a:	f895 307a 	ldrb.w	r3, [r5, #122]	; 0x7a
   26a9e:	f023 0307 	bic.w	r3, r3, #7
   26aa2:	f885 307a 	strb.w	r3, [r5, #122]	; 0x7a
		conn_lll->periph.initiated = 0;
   26aa6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   26aaa:	f023 0307 	bic.w	r3, r3, #7
   26aae:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		conn->own_id_addr_type = BT_ADDR_LE_NONE->type;
   26ab2:	f895 30d6 	ldrb.w	r3, [r5, #214]	; 0xd6
		conn_lll->link_tx_free = NULL;
   26ab6:	2700      	movs	r7, #0
		conn->own_id_addr_type = BT_ADDR_LE_NONE->type;
   26ab8:	f367 0300 	bfi	r3, r7, #0, #1
   26abc:	f885 30d6 	strb.w	r3, [r5, #214]	; 0xd6
		conn->connect_expire = 6;
   26ac0:	2206      	movs	r2, #6
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   26ac2:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
   26ac6:	e9c5 3116 	strd	r3, r1, [r5, #88]	; 0x58
		conn->connect_expire = 6;
   26aca:	f8a5 20c0 	strh.w	r2, [r5, #192]	; 0xc0
		conn_lll->periph.window_widening_event_us = 0;
   26ace:	e9c5 7712 	strd	r7, r7, [r5, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
   26ad2:	676f      	str	r7, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
   26ad4:	f8a5 7078 	strh.w	r7, [r5, #120]	; 0x78
		conn_lll->event_counter = 0;
   26ad8:	866f      	strh	r7, [r5, #50]	; 0x32
		conn_lll->latency_prepare = 0;
   26ada:	f8c5 702e 	str.w	r7, [r5, #46]	; 0x2e
		conn_lll->data_chan_use = 0;
   26ade:	f885 703b 	strb.w	r7, [r5, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
   26ae2:	652f      	str	r7, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
   26ae4:	f8a5 70c4 	strh.w	r7, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
   26ae8:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
		conn->apto_expire = 0U;
   26aec:	f8a5 70d0 	strh.w	r7, [r5, #208]	; 0xd0
		conn->appto_expire = 0U;
   26af0:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
		(void)memcpy(conn->own_id_addr, BT_ADDR_LE_NONE->a.val,
   26af4:	f64f 7bff 	movw	fp, #65535	; 0xffff
   26af8:	f06f 03ff 	mvn.w	r3, #255	; 0xff
   26afc:	f10d 0131 	add.w	r1, sp, #49	; 0x31
   26b00:	f105 00d7 	add.w	r0, r5, #215	; 0xd7
   26b04:	930c      	str	r3, [sp, #48]	; 0x30
   26b06:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
   26b0a:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
   26b0e:	f025 f92a 	bl	4bd66 <memcpy>
		conn->peer_id_addr_type = BT_ADDR_LE_NONE->type;
   26b12:	f895 10d6 	ldrb.w	r1, [r5, #214]	; 0xd6
   26b16:	f367 0141 	bfi	r1, r7, #1, #1
   26b1a:	f885 10d6 	strb.w	r1, [r5, #214]	; 0xd6
		(void)memcpy(conn->peer_id_addr, BT_ADDR_LE_NONE->a.val,
   26b1e:	2206      	movs	r2, #6
   26b20:	f06f 03ff 	mvn.w	r3, #255	; 0xff
   26b24:	f10d 0139 	add.w	r1, sp, #57	; 0x39
   26b28:	f105 00dd 	add.w	r0, r5, #221	; 0xdd
   26b2c:	930e      	str	r3, [sp, #56]	; 0x38
   26b2e:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
   26b32:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
   26b36:	f025 f916 	bl	4bd66 <memcpy>
		conn->common.fex_valid = 0;
   26b3a:	f895 30e4 	ldrb.w	r3, [r5, #228]	; 0xe4
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
   26b3e:	f885 70f2 	strb.w	r7, [r5, #242]	; 0xf2
		conn->common.fex_valid = 0;
   26b42:	f023 0307 	bic.w	r3, r3, #7
   26b46:	f885 30e4 	strb.w	r3, [r5, #228]	; 0xe4
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
   26b4a:	f8a5 70f0 	strh.w	r7, [r5, #240]	; 0xf0
		conn->llcp_rx = NULL;
   26b4e:	f8c5 7114 	str.w	r7, [r5, #276]	; 0x114
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
   26b52:	f8a5 7118 	strh.w	r7, [r5, #280]	; 0x118
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
   26b56:	f8a5 7130 	strh.w	r7, [r5, #304]	; 0x130
		conn->llcp_feature.features_conn = ll_feat_get();
   26b5a:	f010 fae7 	bl	3712c <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   26b5e:	f895 314a 	ldrb.w	r3, [r5, #330]	; 0x14a
		conn->llcp_version.req = conn->llcp_version.ack = 0;
   26b62:	f8a5 7148 	strh.w	r7, [r5, #328]	; 0x148
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   26b66:	f023 0303 	bic.w	r3, r3, #3
   26b6a:	f885 314a 	strb.w	r3, [r5, #330]	; 0x14a
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   26b6e:	f895 307a 	ldrb.w	r3, [r5, #122]	; 0x7a
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
   26b72:	f8a5 7150 	strh.w	r7, [r5, #336]	; 0x150
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   26b76:	f023 0318 	bic.w	r3, r3, #24
   26b7a:	f885 307a 	strb.w	r3, [r5, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   26b7e:	f895 3176 	ldrb.w	r3, [r5, #374]	; 0x176
		conn->llcp_terminate.reason_final = 0;
   26b82:	f885 7153 	strb.w	r7, [r5, #339]	; 0x153
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   26b86:	f023 0307 	bic.w	r3, r3, #7
   26b8a:	f885 3176 	strb.w	r3, [r5, #374]	; 0x176
		conn->llcp_conn_param.disabled = 0;
   26b8e:	f895 3196 	ldrb.w	r3, [r5, #406]	; 0x196
		conn->llcp_terminate.node_rx.hdr.link = link;
   26b92:	f8c5 9154 	str.w	r9, [r5, #340]	; 0x154
		conn->llcp_conn_param.disabled = 0;
   26b96:	f367 1345 	bfi	r3, r7, #5, #1
   26b9a:	f885 3196 	strb.w	r3, [r5, #406]	; 0x196
		conn->llcp_length.disabled = 0U;
   26b9e:	f895 31be 	ldrb.w	r3, [r5, #446]	; 0x1be
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   26ba2:	f8a5 7174 	strh.w	r7, [r5, #372]	; 0x174
		conn->llcp_length.disabled = 0U;
   26ba6:	f367 03c3 	bfi	r3, r7, #3, #1
		conn->llcp_feature.features_peer = 0;
   26baa:	2200      	movs	r2, #0
		conn->llcp_length.disabled = 0U;
   26bac:	f885 31be 	strb.w	r3, [r5, #446]	; 0x1be
		conn->llcp_feature.features_peer = 0;
   26bb0:	2300      	movs	r3, #0
		conn->llcp_feature.features_conn = ll_feat_get();
   26bb2:	e9c5 014e 	strd	r0, r1, [r5, #312]	; 0x138
		conn->llcp_feature.features_peer = 0;
   26bb6:	e9c5 2350 	strd	r2, r3, [r5, #320]	; 0x140
		conn->periph.llcp_type = 0U;
   26bba:	f885 70e5 	strb.w	r7, [r5, #229]	; 0xe5
		conn->llcp_conn_param.req = 0;
   26bbe:	f8a5 7194 	strh.w	r7, [r5, #404]	; 0x194
		conn->periph.ticks_to_offset = 0;
   26bc2:	f8c5 70ec 	str.w	r7, [r5, #236]	; 0xec
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
   26bc6:	f8a5 71bc 	strh.w	r7, [r5, #444]	; 0x1bc
		conn->llcp_length.cache.tx_octets = 0U;
   26bca:	f8a5 71c8 	strh.w	r7, [r5, #456]	; 0x1c8
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
   26bce:	f013 fd9f 	bl	3a710 <ull_conn_default_tx_octets_get>
   26bd2:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
   26bd6:	f013 fda1 	bl	3a71c <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
   26bda:	f8d5 21cc 	ldr.w	r2, [r5, #460]	; 0x1cc
   26bde:	4b3f      	ldr	r3, [pc, #252]	; (26cdc <ll_adv_enable+0x44c>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
   26be0:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
   26be4:	4013      	ands	r3, r2
   26be6:	f8c5 31cc 	str.w	r3, [r5, #460]	; 0x1cc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   26bea:	f013 fd9d 	bl	3a728 <ull_conn_default_phy_tx_get>
   26bee:	f895 31d0 	ldrb.w	r3, [r5, #464]	; 0x1d0
   26bf2:	f360 0302 	bfi	r3, r0, #0, #3
   26bf6:	f885 31d0 	strb.w	r3, [r5, #464]	; 0x1d0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26bfa:	f013 fd9b 	bl	3a734 <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
   26bfe:	f105 031c 	add.w	r3, r5, #28
   26c02:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26c04:	f895 31d0 	ldrb.w	r3, [r5, #464]	; 0x1d0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   26c08:	f8c5 71d4 	str.w	r7, [r5, #468]	; 0x1d4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26c0c:	f360 03c5 	bfi	r3, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
   26c10:	e9c4 9a18 	strd	r9, sl, [r4, #96]	; 0x60
		conn->tx_data = conn->tx_data_last = 0;
   26c14:	e9c5 7778 	strd	r7, r7, [r5, #480]	; 0x1e0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   26c18:	e9c5 7776 	strd	r7, r7, [r5, #472]	; 0x1d8
	hdr->disabled_cb = hdr->disabled_param = NULL;
   26c1c:	e9c5 7705 	strd	r7, r7, [r5, #20]
	hdr->ref = 0U;
   26c20:	702f      	strb	r7, [r5, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
   26c22:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26c24:	f885 31d0 	strb.w	r3, [r5, #464]	; 0x1d0
		err = lll_clock_wait();
   26c28:	f019 ff10 	bl	40a4c <lll_clock_wait>
		if (err) {
   26c2c:	2800      	cmp	r0, #0
   26c2e:	f43f ae82 	beq.w	26936 <ll_adv_enable+0xa6>
			conn_release(adv);
   26c32:	f011 fdff 	bl	38834 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
   26c36:	2003      	movs	r0, #3
   26c38:	e669      	b.n	2690e <ll_adv_enable+0x7e>
		ll_adv_ticker_ext[handle].ticks_slot_window =
   26c3a:	4a29      	ldr	r2, [pc, #164]	; (26ce0 <ll_adv_enable+0x450>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26c3c:	4829      	ldr	r0, [pc, #164]	; (26ce4 <ll_adv_enable+0x454>)
		ret = ticker_start_ext(
   26c3e:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
   26c40:	f203 1347 	addw	r3, r3, #327	; 0x147
		ret = ticker_start_ext(
   26c44:	9406      	str	r4, [sp, #24]
   26c46:	9502      	str	r5, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26c48:	2191      	movs	r1, #145	; 0x91
		ll_adv_ticker_ext[handle].ticks_slot_window =
   26c4a:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26c4c:	fba7 0300 	umull	r0, r3, r7, r0
   26c50:	fb01 3107 	mla	r1, r1, r7, r3
		ret = ticker_start_ext(
   26c54:	4b24      	ldr	r3, [pc, #144]	; (26ce8 <ll_adv_enable+0x458>)
   26c56:	9307      	str	r3, [sp, #28]
   26c58:	4b24      	ldr	r3, [pc, #144]	; (26cec <ll_adv_enable+0x45c>)
   26c5a:	9305      	str	r3, [sp, #20]
   26c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26c60:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
   26c62:	2702      	movs	r7, #2
		ret = ticker_start_ext(
   26c64:	9303      	str	r3, [sp, #12]
   26c66:	ae0e      	add	r6, sp, #56	; 0x38
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26c68:	a319      	add	r3, pc, #100	; (adr r3, 26cd0 <ll_adv_enable+0x440>)
   26c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
   26c6e:	970e      	str	r7, [sp, #56]	; 0x38
		ret = ticker_start_ext(
   26c70:	9608      	str	r6, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26c72:	f7ff fa45 	bl	26100 <__aeabi_uldivmod>
		ret = ticker_start_ext(
   26c76:	4643      	mov	r3, r8
   26c78:	e9cd 5000 	strd	r5, r0, [sp]
   26c7c:	463a      	mov	r2, r7
   26c7e:	4628      	mov	r0, r5
   26c80:	2103      	movs	r1, #3
   26c82:	f00e fbff 	bl	35484 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
   26c86:	4631      	mov	r1, r6
   26c88:	f011 f84a 	bl	37d20 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   26c8c:	2800      	cmp	r0, #0
   26c8e:	f47f aeb9 	bne.w	26a04 <ll_adv_enable+0x174>
	adv->is_enabled = 1;
   26c92:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   26c96:	f043 0301 	orr.w	r3, r3, #1
   26c9a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   26c9e:	f012 fadd 	bl	3925c <ull_scan_is_enabled_get>
   26ca2:	b158      	cbz	r0, 26cbc <ll_adv_enable+0x42c>
			return 0;
   26ca4:	2000      	movs	r0, #0
   26ca6:	e632      	b.n	2690e <ll_adv_enable+0x7e>
			return BT_HCI_ERR_INVALID_PARAM;
   26ca8:	2012      	movs	r0, #18
   26caa:	e630      	b.n	2690e <ll_adv_enable+0x7e>
			ll_rx_release(node_rx);
   26cac:	4650      	mov	r0, sl
   26cae:	f010 ff93 	bl	37bd8 <ll_rx_release>
			ll_rx_link_release(link);
   26cb2:	4648      	mov	r0, r9
   26cb4:	f010 ff84 	bl	37bc0 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   26cb8:	2007      	movs	r0, #7
   26cba:	e628      	b.n	2690e <ll_adv_enable+0x7e>
		ull_filter_adv_scan_state_cb(BIT(0));
   26cbc:	2001      	movs	r0, #1
   26cbe:	f018 fcd7 	bl	3f670 <ull_filter_adv_scan_state_cb>
   26cc2:	e7ef      	b.n	26ca4 <ll_adv_enable+0x414>
			conn_lll->link_tx_free = &conn_lll->link_tx;
   26cc4:	f105 006c 	add.w	r0, r5, #108	; 0x6c
   26cc8:	6768      	str	r0, [r5, #116]	; 0x74
   26cca:	e6cb      	b.n	26a64 <ll_adv_enable+0x1d4>
   26ccc:	f3af 8000 	nop.w
   26cd0:	1afd498d 	.word	0x1afd498d
   26cd4:	00000007 	.word	0x00000007
   26cd8:	01480148 	.word	0x01480148
   26cdc:	f6ff0000 	.word	0xf6ff0000
   26ce0:	200057b0 	.word	0x200057b0
   26ce4:	84e72a00 	.word	0x84e72a00
   26ce8:	000371f9 	.word	0x000371f9
   26cec:	00038a91 	.word	0x00038a91

00026cf0 <ull_adv_time_update>:
{
   26cf0:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
   26cf2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
   26cf6:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
   26cf8:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
   26cfc:	460d      	mov	r5, r1
   26cfe:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26d00:	2101      	movs	r1, #1
   26d02:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
   26d06:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
   26d08:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26d0c:	f00d fad0 	bl	342b0 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
   26d10:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26d12:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
   26d14:	4628      	mov	r0, r5
   26d16:	f011 fe83 	bl	38a20 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
   26d1a:	491d      	ldr	r1, [pc, #116]	; (26d90 <ull_adv_time_update+0xa0>)
   26d1c:	a31a      	add	r3, pc, #104	; (adr r3, 26d88 <ull_adv_time_update+0x98>)
   26d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   26d22:	fba0 0101 	umull	r0, r1, r0, r1
   26d26:	f7ff f9eb 	bl	26100 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
   26d2a:	6923      	ldr	r3, [r4, #16]
   26d2c:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
   26d2e:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
   26d30:	d221      	bcs.n	26d76 <ull_adv_time_update+0x86>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
   26d32:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
   26d34:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26d36:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26d38:	4a16      	ldr	r2, [pc, #88]	; (26d94 <ull_adv_time_update+0xa4>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26d3a:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26d3c:	4b16      	ldr	r3, [pc, #88]	; (26d98 <ull_adv_time_update+0xa8>)
   26d3e:	1aa2      	subs	r2, r4, r2
   26d40:	fba3 3202 	umull	r3, r2, r3, r2
	ret_cb = TICKER_STATUS_BUSY;
   26d44:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26d46:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26d48:	2300      	movs	r3, #0
   26d4a:	440a      	add	r2, r1
   26d4c:	ae09      	add	r6, sp, #36	; 0x24
	ret_cb = TICKER_STATUS_BUSY;
   26d4e:	9109      	str	r1, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26d50:	4912      	ldr	r1, [pc, #72]	; (26d9c <ull_adv_time_update+0xac>)
   26d52:	9105      	str	r1, [sp, #20]
   26d54:	e9cd 3303 	strd	r3, r3, [sp, #12]
   26d58:	2103      	movs	r1, #3
   26d5a:	b2d2      	uxtb	r2, r2
   26d5c:	9606      	str	r6, [sp, #24]
   26d5e:	9300      	str	r3, [sp, #0]
   26d60:	4618      	mov	r0, r3
   26d62:	f00e fc59 	bl	35618 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
   26d66:	4631      	mov	r1, r6
   26d68:	f010 ffda 	bl	37d20 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   26d6c:	b938      	cbnz	r0, 26d7e <ull_adv_time_update+0x8e>
	adv->ull.ticks_slot = time_ticks;
   26d6e:	6125      	str	r5, [r4, #16]
		return BT_HCI_ERR_SUCCESS;
   26d70:	2000      	movs	r0, #0
}
   26d72:	b00a      	add	sp, #40	; 0x28
   26d74:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
   26d76:	d9fb      	bls.n	26d70 <ull_adv_time_update+0x80>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
   26d78:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
   26d7a:	2300      	movs	r3, #0
   26d7c:	e7db      	b.n	26d36 <ull_adv_time_update+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
   26d7e:	200c      	movs	r0, #12
}
   26d80:	b00a      	add	sp, #40	; 0x28
   26d82:	bd70      	pop	{r4, r5, r6, pc}
   26d84:	f3af 8000 	nop.w
   26d88:	1afd498d 	.word	0x1afd498d
   26d8c:	00000007 	.word	0x00000007
   26d90:	3b9aca00 	.word	0x3b9aca00
   26d94:	200057bc 	.word	0x200057bc
   26d98:	88888889 	.word	0x88888889
   26d9c:	000371f9 	.word	0x000371f9

00026da0 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
   26da0:	b538      	push	{r3, r4, r5, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
   26da2:	4c19      	ldr	r4, [pc, #100]	; (26e08 <ll_scan_params_set+0x68>)
{
   26da4:	f89d e010 	ldrb.w	lr, [sp, #16]
	if (!scan || scan->is_enabled) {
   26da8:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
   26dac:	f01c 0501 	ands.w	r5, ip, #1
   26db0:	d122      	bne.n	26df8 <ll_scan_params_set+0x58>
	scan->own_addr_type = own_addr_type;
   26db2:	f363 0c42 	bfi	ip, r3, #1, #2
	lll->filter_policy = filter_policy;
   26db6:	0140      	lsls	r0, r0, #5
   26db8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	lll->interval = interval;
   26dbc:	87a1      	strh	r1, [r4, #60]	; 0x3c
	lll->filter_policy = filter_policy;
   26dbe:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   26dc2:	f00e 0e18 	and.w	lr, lr, #24
   26dc6:	f000 0020 	and.w	r0, r0, #32
   26dca:	ea40 000e 	orr.w	r0, r0, lr
   26dce:	f023 0338 	bic.w	r3, r3, #56	; 0x38
   26dd2:	4303      	orrs	r3, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26dd4:	480d      	ldr	r0, [pc, #52]	; (26e0c <ll_scan_params_set+0x6c>)
	lll->filter_policy = filter_policy;
   26dd6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26dda:	2191      	movs	r1, #145	; 0x91
   26ddc:	fba2 0300 	umull	r0, r3, r2, r0
	scan->own_addr_type = own_addr_type;
   26de0:	f884 c044 	strb.w	ip, [r4, #68]	; 0x44
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26de4:	fb01 3102 	mla	r1, r1, r2, r3
   26de8:	a305      	add	r3, pc, #20	; (adr r3, 26e00 <ll_scan_params_set+0x60>)
   26dea:	e9d3 2300 	ldrd	r2, r3, [r3]
   26dee:	f7ff f987 	bl	26100 <__aeabi_uldivmod>
   26df2:	6420      	str	r0, [r4, #64]	; 0x40
}
   26df4:	4628      	mov	r0, r5
   26df6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   26df8:	250c      	movs	r5, #12
}
   26dfa:	4628      	mov	r0, r5
   26dfc:	bd38      	pop	{r3, r4, r5, pc}
   26dfe:	bf00      	nop
   26e00:	1afd498d 	.word	0x1afd498d
   26e04:	00000007 	.word	0x00000007
   26e08:	2000584c 	.word	0x2000584c
   26e0c:	84e72a00 	.word	0x84e72a00

00026e10 <ull_scan_params_set>:
{
   26e10:	b510      	push	{r4, lr}
   26e12:	4604      	mov	r4, r0
   26e14:	f89d 0008 	ldrb.w	r0, [sp, #8]
	lll->interval = interval;
   26e18:	8422      	strh	r2, [r4, #32]
	lll->filter_policy = filter_policy;
   26e1a:	ea4f 1c41 	mov.w	ip, r1, lsl #5
   26e1e:	00c0      	lsls	r0, r0, #3
   26e20:	7da1      	ldrb	r1, [r4, #22]
   26e22:	f000 0018 	and.w	r0, r0, #24
   26e26:	f00c 0c20 	and.w	ip, ip, #32
   26e2a:	ea4c 0c00 	orr.w	ip, ip, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26e2e:	480c      	ldr	r0, [pc, #48]	; (26e60 <ull_scan_params_set+0x50>)
	lll->filter_policy = filter_policy;
   26e30:	f021 0138 	bic.w	r1, r1, #56	; 0x38
   26e34:	ea4c 0c01 	orr.w	ip, ip, r1
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26e38:	fba3 0200 	umull	r0, r2, r3, r0
   26e3c:	2191      	movs	r1, #145	; 0x91
   26e3e:	fb01 2103 	mla	r1, r1, r3, r2
	lll->filter_policy = filter_policy;
   26e42:	f884 c016 	strb.w	ip, [r4, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26e46:	a304      	add	r3, pc, #16	; (adr r3, 26e58 <ull_scan_params_set+0x48>)
   26e48:	e9d3 2300 	ldrd	r2, r3, [r3]
   26e4c:	f7ff f958 	bl	26100 <__aeabi_uldivmod>
   26e50:	6260      	str	r0, [r4, #36]	; 0x24
}
   26e52:	bd10      	pop	{r4, pc}
   26e54:	f3af 8000 	nop.w
   26e58:	1afd498d 	.word	0x1afd498d
   26e5c:	00000007 	.word	0x00000007
   26e60:	84e72a00 	.word	0x84e72a00
   26e64:	00000000 	.word	0x00000000

00026e68 <ull_scan_enable>:
{
   26e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26e6c:	4604      	mov	r4, r0
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
   26e6e:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
   26e72:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
   26e76:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   26e7a:	f3c0 0040 	ubfx	r0, r0, #1, #1
   26e7e:	f360 1386 	bfi	r3, r0, #6, #1
{
   26e82:	b08c      	sub	sp, #48	; 0x30
	lll->init_addr_type = scan->own_addr_type;
   26e84:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
   26e88:	f00e fcb4 	bl	357f4 <ll_addr_read>
	lll->chan = 0U;
   26e8c:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
   26e90:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   26e92:	484b      	ldr	r0, [pc, #300]	; (26fc0 <ull_scan_enable+0x158>)
   26e94:	61e4      	str	r4, [r4, #28]
	lll->chan = 0U;
   26e96:	f002 0279 	and.w	r2, r2, #121	; 0x79
   26e9a:	2500      	movs	r5, #0
   26e9c:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
   26ea0:	2191      	movs	r1, #145	; 0x91
   26ea2:	fba3 0200 	umull	r0, r2, r3, r0
   26ea6:	fb01 2103 	mla	r1, r1, r3, r2
	hdr->disabled_cb = hdr->disabled_param = NULL;
   26eaa:	e9c4 5505 	strd	r5, r5, [r4, #20]
   26eae:	a342      	add	r3, pc, #264	; (adr r3, 26fb8 <ull_scan_enable+0x150>)
   26eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
   26eb4:	7025      	strb	r5, [r4, #0]
   26eb6:	f7ff f923 	bl	26100 <__aeabi_uldivmod>
	scan->ull.ticks_active_to_start = 0U;
   26eba:	2331      	movs	r3, #49	; 0x31
   26ebc:	60a3      	str	r3, [r4, #8]
	if ((lll->ticks_window +
   26ebe:	6c23      	ldr	r3, [r4, #64]	; 0x40
	scan->ull.ticks_active_to_start = 0U;
   26ec0:	6065      	str	r5, [r4, #4]
	if ((lll->ticks_window +
   26ec2:	3309      	adds	r3, #9
	    (ticks_interval -
   26ec4:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
   26ec8:	4293      	cmp	r3, r2
			scan->ull.ticks_slot = ticks_interval -
   26eca:	bf28      	it	cs
   26ecc:	4613      	movcs	r3, r2
   26ece:	6123      	str	r3, [r4, #16]
	scan->ull.ticks_preempt_to_start =
   26ed0:	60e5      	str	r5, [r4, #12]
		lll->ticks_window = 0U;
   26ed2:	bf28      	it	cs
   26ed4:	6425      	strcs	r5, [r4, #64]	; 0x40
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
   26ed6:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
   26ed8:	f00e fc56 	bl	35788 <ticker_ticks_now_get>
	if (!lll->conn) {
   26edc:	6a23      	ldr	r3, [r4, #32]
	ticks_anchor = ticker_ticks_now_get();
   26ede:	4607      	mov	r7, r0
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
   26ee0:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	if (!lll->conn) {
   26ee4:	2b00      	cmp	r3, #0
   26ee6:	d04a      	beq.n	26f7e <ull_scan_enable+0x116>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   26ee8:	4d36      	ldr	r5, [pc, #216]	; (26fc4 <ull_scan_enable+0x15c>)
   26eea:	4b37      	ldr	r3, [pc, #220]	; (26fc8 <ull_scan_enable+0x160>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26eec:	f8cd 8020 	str.w	r8, [sp, #32]
   26ef0:	9406      	str	r4, [sp, #24]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   26ef2:	1b65      	subs	r5, r4, r5
   26ef4:	fba3 3505 	umull	r3, r5, r3, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   26ef8:	4831      	ldr	r0, [pc, #196]	; (26fc0 <ull_scan_enable+0x158>)
   26efa:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26efc:	f04f 0a00 	mov.w	sl, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   26f00:	fba3 0200 	umull	r0, r2, r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f04:	f8cd a00c 	str.w	sl, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   26f08:	2191      	movs	r1, #145	; 0x91
   26f0a:	fb01 2103 	mla	r1, r1, r3, r2
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f0e:	6923      	ldr	r3, [r4, #16]
   26f10:	9304      	str	r3, [sp, #16]
   26f12:	4b2e      	ldr	r3, [pc, #184]	; (26fcc <ull_scan_enable+0x164>)
   26f14:	9307      	str	r3, [sp, #28]
   26f16:	4b2e      	ldr	r3, [pc, #184]	; (26fd0 <ull_scan_enable+0x168>)
   26f18:	9305      	str	r3, [sp, #20]
	ret_cb = TICKER_STATUS_BUSY;
   26f1a:	f04f 0902 	mov.w	r9, #2
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   26f1e:	a326      	add	r3, pc, #152	; (adr r3, 26fb8 <ull_scan_enable+0x150>)
   26f20:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret_cb = TICKER_STATUS_BUSY;
   26f24:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   26f28:	f7ff f8ea 	bl	26100 <__aeabi_uldivmod>
   26f2c:	4610      	mov	r0, r2
   26f2e:	4619      	mov	r1, r3
   26f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26f34:	2300      	movs	r3, #0
   26f36:	f7ff f8e3 	bl	26100 <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   26f3a:	092d      	lsrs	r5, r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f3c:	3504      	adds	r5, #4
   26f3e:	b2ed      	uxtb	r5, r5
   26f40:	e9cd 6001 	strd	r6, r0, [sp, #4]
   26f44:	2103      	movs	r1, #3
   26f46:	463b      	mov	r3, r7
   26f48:	462a      	mov	r2, r5
   26f4a:	f8cd a000 	str.w	sl, [sp]
   26f4e:	4650      	mov	r0, sl
   26f50:	f00e faee 	bl	35530 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
   26f54:	4641      	mov	r1, r8
   26f56:	f010 fee3 	bl	37d20 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   26f5a:	b960      	cbnz	r0, 26f76 <ull_scan_enable+0x10e>
	scan->is_enabled = 1U;
   26f5c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   26f60:	f043 0301 	orr.w	r3, r3, #1
   26f64:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
   26f68:	f011 ff60 	bl	38e2c <ull_adv_is_enabled_get>
   26f6c:	b1f8      	cbz	r0, 26fae <ull_scan_enable+0x146>
	return 0;
   26f6e:	2000      	movs	r0, #0
}
   26f70:	b00c      	add	sp, #48	; 0x30
   26f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   26f76:	200c      	movs	r0, #12
}
   26f78:	b00c      	add	sp, #48	; 0x30
   26f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t offset_us = 0U;
   26f7e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
   26f82:	6921      	ldr	r1, [r4, #16]
   26f84:	4643      	mov	r3, r8
   26f86:	aa0a      	add	r2, sp, #40	; 0x28
   26f88:	2003      	movs	r0, #3
   26f8a:	f001 f9dd 	bl	28348 <ull_sched_after_mstr_slot_get>
		if (offset_us) {
   26f8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   26f90:	2900      	cmp	r1, #0
   26f92:	d0a9      	beq.n	26ee8 <ull_scan_enable+0x80>
				       HAL_TICKER_US_TO_TICKS(offset_us);
   26f94:	480f      	ldr	r0, [pc, #60]	; (26fd4 <ull_scan_enable+0x16c>)
   26f96:	a308      	add	r3, pc, #32	; (adr r3, 26fb8 <ull_scan_enable+0x150>)
   26f98:	e9d3 2300 	ldrd	r2, r3, [r3]
   26f9c:	fba1 0100 	umull	r0, r1, r1, r0
   26fa0:	f7ff f8ae 	bl	26100 <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
   26fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				       HAL_TICKER_US_TO_TICKS(offset_us);
   26fa6:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
   26faa:	441f      	add	r7, r3
   26fac:	e79c      	b.n	26ee8 <ull_scan_enable+0x80>
		ull_filter_adv_scan_state_cb(BIT(1));
   26fae:	4648      	mov	r0, r9
   26fb0:	f018 fb5e 	bl	3f670 <ull_filter_adv_scan_state_cb>
   26fb4:	e7db      	b.n	26f6e <ull_scan_enable+0x106>
   26fb6:	bf00      	nop
   26fb8:	1afd498d 	.word	0x1afd498d
   26fbc:	00000007 	.word	0x00000007
   26fc0:	84e72a00 	.word	0x84e72a00
   26fc4:	2000584c 	.word	0x2000584c
   26fc8:	38e38e39 	.word	0x38e38e39
   26fcc:	000371f9 	.word	0x000371f9
   26fd0:	00039051 	.word	0x00039051
   26fd4:	3b9aca00 	.word	0x3b9aca00

00026fd8 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
   26fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26fdc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   26fde:	8e45      	ldrh	r5, [r0, #50]	; 0x32

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   26fe0:	f8b0 60f4 	ldrh.w	r6, [r0, #244]	; 0xf4
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26fe4:	441d      	add	r5, r3
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26fe6:	f890 311a 	ldrb.w	r3, [r0, #282]	; 0x11a
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26fea:	b2ad      	uxth	r5, r5
   26fec:	4429      	add	r1, r5
{
   26fee:	4617      	mov	r7, r2
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26ff0:	f013 0207 	ands.w	r2, r3, #7
{
   26ff4:	b08b      	sub	sp, #44	; 0x2c
   26ff6:	4604      	mov	r4, r0
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26ff8:	b289      	uxth	r1, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26ffa:	d00a      	beq.n	27012 <event_conn_upd_prep+0x3a>
		static memq_link_t s_link;
		static struct mayfly s_mfy_sched_offset = {0, 0,
			&s_link, 0, 0 };
		void (*fp_mfy_select_or_use)(void *) = NULL;

		switch (conn->llcp_cu.state) {
   26ffc:	1e53      	subs	r3, r2, #1
   26ffe:	2b04      	cmp	r3, #4
   27000:	f200 837c 	bhi.w	276fc <event_conn_upd_prep+0x724>
   27004:	e8df f013 	tbh	[pc, r3, lsl #1]
   27008:	0201016a 	.word	0x0201016a
   2700c:	023901fc 	.word	0x023901fc
   27010:	0204      	.short	0x0204
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   27012:	1b89      	subs	r1, r1, r6
   27014:	fa1f f881 	uxth.w	r8, r1
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
   27018:	0409      	lsls	r1, r1, #16
   2701a:	f100 81cb 	bmi.w	273b4 <event_conn_upd_prep+0x3dc>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   2701e:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   27022:	2b00      	cmp	r3, #0
   27024:	f2c0 8263 	blt.w	274ee <event_conn_upd_prep+0x516>
			conn->periph.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
   27028:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   2702c:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   27030:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   27034:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
		conn->llcp_cu.ack = conn->llcp_cu.req;
   27038:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
   2703c:	f884 1119 	strb.w	r1, [r4, #281]	; 0x119
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   27040:	4293      	cmp	r3, r2
   27042:	d00a      	beq.n	2705a <event_conn_upd_prep+0x82>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   27044:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   27048:	f003 030f 	and.w	r3, r3, #15
   2704c:	2b06      	cmp	r3, #6
   2704e:	d104      	bne.n	2705a <event_conn_upd_prep+0x82>
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
   27050:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   27052:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
			conn->procedure_expire = 0U;
   27056:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn == conn_upd_curr) {
   2705a:	4b93      	ldr	r3, [pc, #588]	; (272a8 <event_conn_upd_prep+0x2d0>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
   2705c:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
	if (conn == conn_upd_curr) {
   27060:	681a      	ldr	r2, [r3, #0]
   27062:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   27064:	bf04      	itt	eq
   27066:	2200      	moveq	r2, #0
   27068:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
   2706a:	f1b9 0f00 	cmp.w	r9, #0
   2706e:	f000 81b7 	beq.w	273e0 <event_conn_upd_prep+0x408>
   27072:	f8d9 0000 	ldr.w	r0, [r9]
   27076:	2800      	cmp	r0, #0
   27078:	f000 81b2 	beq.w	273e0 <event_conn_upd_prep+0x408>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
   2707c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   27080:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
   27082:	6841      	ldr	r1, [r0, #4]
   27084:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
		if ((conn->llcp_cu.interval != lll->interval) ||
   27088:	fa1f fc83 	uxth.w	ip, r3
   2708c:	4562      	cmp	r2, ip
		    (conn->llcp_cu.latency != lll->latency) ||
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   2708e:	f8b4 1120 	ldrh.w	r1, [r4, #288]	; 0x120
		if ((conn->llcp_cu.interval != lll->interval) ||
   27092:	f000 8234 	beq.w	274fe <event_conn_upd_prep+0x526>
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
   27096:	8d22      	ldrh	r2, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
   27098:	f8c9 301e 	str.w	r3, [r9, #30]
			cu->status = 0x00;
   2709c:	2300      	movs	r3, #0
   2709e:	f889 301c 	strb.w	r3, [r9, #28]
			rx->hdr.handle = lll->handle;
   270a2:	f8a9 2006 	strh.w	r2, [r9, #6]
			cu->latency = conn->llcp_cu.latency;
			cu->timeout = conn->llcp_cu.timeout;
   270a6:	f8a9 1022 	strh.w	r1, [r9, #34]	; 0x22
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   270aa:	2318      	movs	r3, #24
   270ac:	f889 3004 	strb.w	r3, [r9, #4]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
   270b0:	4649      	mov	r1, r9
   270b2:	f010 fd97 	bl	37be4 <ll_rx_put>
		ll_rx_sched();
   270b6:	f010 fd9f 	bl	37bf8 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   270ba:	68a3      	ldr	r3, [r4, #8]
   270bc:	2b00      	cmp	r3, #0
   270be:	da09      	bge.n	270d4 <event_conn_upd_prep+0xfc>
			uint32_t ticks_prepare_to_start =
   270c0:	68e1      	ldr	r1, [r4, #12]
   270c2:	6862      	ldr	r2, [r4, #4]
				MAX(conn->ull.ticks_active_to_start,
				    conn->ull.ticks_preempt_to_start);

			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
   270c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   270c8:	4291      	cmp	r1, r2
   270ca:	bf2c      	ite	cs
   270cc:	187f      	addcs	r7, r7, r1
   270ce:	18bf      	addcc	r7, r7, r2
   270d0:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
   270d2:	1aff      	subs	r7, r7, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
   270d4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
   270d6:	f8b4 911c 	ldrh.w	r9, [r4, #284]	; 0x11c
		conn_interval_old = instant_latency * lll->interval;
   270da:	fb11 f108 	smulbb	r1, r1, r8
   270de:	b289      	uxth	r1, r1
		latency = conn_interval_old / conn->llcp_cu.interval;
   270e0:	fbb1 f3f9 	udiv	r3, r1, r9
		conn_interval_new = latency * conn->llcp_cu.interval;
   270e4:	fb19 f003 	smulbb	r0, r9, r3
   270e8:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   270ea:	4281      	cmp	r1, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
   270ec:	fa1f fa83 	uxth.w	sl, r3
		if (conn_interval_new > conn_interval_old) {
   270f0:	f080 8165 	bcs.w	273be <event_conn_upd_prep+0x3e6>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
   270f4:	1a40      	subs	r0, r0, r1
   270f6:	f240 42e2 	movw	r2, #1250	; 0x4e2
   270fa:	496c      	ldr	r1, [pc, #432]	; (272ac <event_conn_upd_prep+0x2d4>)
   270fc:	fb02 f000 	mul.w	r0, r2, r0
   27100:	fba0 0101 	umull	r0, r1, r0, r1
   27104:	a366      	add	r3, pc, #408	; (adr r3, 272a0 <event_conn_upd_prep+0x2c8>)
   27106:	e9d3 2300 	ldrd	r2, r3, [r3]
   2710a:	f7fe fff9 	bl	26100 <__aeabi_uldivmod>
   2710e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   27112:	4407      	add	r7, r0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
   27114:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   27116:	441e      	add	r6, r3
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
   27118:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
   2711c:	1b76      	subs	r6, r6, r5
   2711e:	4456      	add	r6, sl
		conn_interval_us = conn->llcp_cu.interval *
   27120:	f240 4be2 	movw	fp, #1250	; 0x4e2
		} else if (lll->role) {
   27124:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
   27126:	85e6      	strh	r6, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
   27128:	fb0b f609 	mul.w	r6, fp, r9
		} else if (lll->role) {
   2712c:	f2c0 8207 	blt.w	2753e <event_conn_upd_prep+0x566>
			periodic_us -= lll->periph.window_widening_periodic_us;
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
		} else if (!lll->role) {
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   27130:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   27134:	485d      	ldr	r0, [pc, #372]	; (272ac <event_conn_upd_prep+0x2d4>)
   27136:	a35a      	add	r3, pc, #360	; (adr r3, 272a0 <event_conn_upd_prep+0x2c8>)
   27138:	e9d3 2300 	ldrd	r2, r3, [r3]
   2713c:	fba1 0100 	umull	r0, r1, r1, r0
   27140:	f7fe ffde 	bl	26100 <__aeabi_uldivmod>
   27144:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
		periodic_us = conn_interval_us;
   27148:	4635      	mov	r5, r6

			/* Workaround: Due to the missing remainder param in
			 * ticker_start function for first interval; add a
			 * tick so as to use the ceiled value.
			 */
			ticks_win_offset += 1U;
   2714a:	f108 0801 	add.w	r8, r8, #1

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   2714e:	4a58      	ldr	r2, [pc, #352]	; (272b0 <event_conn_upd_prep+0x2d8>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   27150:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
		lll->latency = conn->llcp_cu.latency;
   27154:	f8b4 011e 	ldrh.w	r0, [r4, #286]	; 0x11e

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27158:	4956      	ldr	r1, [pc, #344]	; (272b4 <event_conn_upd_prep+0x2dc>)
		lll->interval = conn->llcp_cu.interval;
   2715a:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   2715e:	4432      	add	r2, r6
   27160:	fbb2 f2f6 	udiv	r2, r2, r6
   27164:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   27168:	f242 7210 	movw	r2, #10000	; 0x2710
   2716c:	fb02 6303 	mla	r3, r2, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27170:	4431      	add	r1, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   27172:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27174:	fbb1 f1f6 	udiv	r1, r1, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   27178:	fbb3 f3f6 	udiv	r3, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   2717c:	b28a      	uxth	r2, r1
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   2717e:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27182:	1d83      	adds	r3, r0, #6
   27184:	429a      	cmp	r2, r3
		lll->latency = conn->llcp_cu.latency;
   27186:	85a0      	strh	r0, [r4, #44]	; 0x2c
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27188:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   2718c:	dd04      	ble.n	27198 <event_conn_upd_prep+0x1c0>
   2718e:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   27192:	33fa      	adds	r3, #250	; 0xfa
   27194:	441a      	add	r2, r3
   27196:	b292      	uxth	r2, r2
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
   27198:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   2719c:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
		if (conn->llcp_cu.cmd) {
   271a0:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
   271a2:	bf44      	itt	mi
   271a4:	2300      	movmi	r3, #0
   271a6:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
   271aa:	2102      	movs	r1, #2
   271ac:	2001      	movs	r0, #1
   271ae:	f01c f9b7 	bl	43520 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
   271b2:	2200      	movs	r2, #0
   271b4:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
   271b6:	4682      	mov	sl, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
   271b8:	2001      	movs	r0, #1
   271ba:	f00c ff3f 	bl	3403c <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   271be:	493e      	ldr	r1, [pc, #248]	; (272b8 <event_conn_upd_prep+0x2e0>)
   271c0:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   271c4:	4620      	mov	r0, r4
   271c6:	f00c fec9 	bl	33f5c <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   271ca:	f100 0905 	add.w	r9, r0, #5
   271ce:	fa5f f989 	uxtb.w	r9, r9
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
   271d2:	4b3a      	ldr	r3, [pc, #232]	; (272bc <event_conn_upd_prep+0x2e4>)
   271d4:	9400      	str	r4, [sp, #0]
   271d6:	464a      	mov	r2, r9
   271d8:	2101      	movs	r1, #1
   271da:	2000      	movs	r0, #0
   271dc:	f00e fa34 	bl	35648 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   271e0:	f030 0302 	bics.w	r3, r0, #2
   271e4:	d00c      	beq.n	27200 <event_conn_upd_prep+0x228>
   271e6:	4a36      	ldr	r2, [pc, #216]	; (272c0 <event_conn_upd_prep+0x2e8>)
   271e8:	4936      	ldr	r1, [pc, #216]	; (272c4 <event_conn_upd_prep+0x2ec>)
   271ea:	4837      	ldr	r0, [pc, #220]	; (272c8 <event_conn_upd_prep+0x2f0>)
   271ec:	f640 43cb 	movw	r3, #3275	; 0xccb
   271f0:	f022 fc8a 	bl	49b08 <printk>
   271f4:	4040      	eors	r0, r0
   271f6:	f380 8811 	msr	BASEPRI, r0
   271fa:	f04f 0003 	mov.w	r0, #3
   271fe:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
   27200:	4e2a      	ldr	r6, [pc, #168]	; (272ac <event_conn_upd_prep+0x2d4>)
   27202:	fba5 6b06 	umull	r6, fp, r5, r6
   27206:	a326      	add	r3, pc, #152	; (adr r3, 272a0 <event_conn_upd_prep+0x2c8>)
   27208:	e9d3 2300 	ldrd	r2, r3, [r3]
   2720c:	4630      	mov	r0, r6
   2720e:	4659      	mov	r1, fp
   27210:	f7fe ff76 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
   27214:	4b2d      	ldr	r3, [pc, #180]	; (272cc <event_conn_upd_prep+0x2f4>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   27216:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
   2721a:	fba5 3103 	umull	r3, r1, r5, r3
   2721e:	2207      	movs	r2, #7
   27220:	1af0      	subs	r0, r6, r3
   27222:	fb02 1105 	mla	r1, r2, r5, r1
   27226:	eb6b 0101 	sbc.w	r1, fp, r1
   2722a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2722e:	2300      	movs	r3, #0
   27230:	f7fe ff66 	bl	26100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   27234:	e9cd 5001 	strd	r5, r0, [sp, #4]
   27238:	9408      	str	r4, [sp, #32]
   2723a:	9406      	str	r4, [sp, #24]
   2723c:	f8cd 8000 	str.w	r8, [sp]
				     TICKER_NULL_LAZY,
#else
				     TICKER_LAZY_MUST_EXPIRE_KEEP,
#endif /* CONFIG_BT_TICKER_LOW_LAT */
				     (ticks_slot_overhead +
				      conn->ull.ticks_slot),
   27240:	6921      	ldr	r1, [r4, #16]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   27242:	f994 5039 	ldrsb.w	r5, [r4, #57]	; 0x39
   27246:	4822      	ldr	r0, [pc, #136]	; (272d0 <event_conn_upd_prep+0x2f8>)
   27248:	9104      	str	r1, [sp, #16]
   2724a:	4922      	ldr	r1, [pc, #136]	; (272d4 <event_conn_upd_prep+0x2fc>)
   2724c:	4c22      	ldr	r4, [pc, #136]	; (272d8 <event_conn_upd_prep+0x300>)
   2724e:	9407      	str	r4, [sp, #28]
   27250:	ea31 0125 	bics.w	r1, r1, r5, asr #32
   27254:	bf28      	it	cs
   27256:	4601      	movcs	r1, r0
   27258:	9105      	str	r1, [sp, #20]
   2725a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   2725e:	463b      	mov	r3, r7
   27260:	9103      	str	r1, [sp, #12]
   27262:	464a      	mov	r2, r9
   27264:	2101      	movs	r1, #1
   27266:	2000      	movs	r0, #0
   27268:	f00e f962 	bl	35530 <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   2726c:	f030 0302 	bics.w	r3, r0, #2
   27270:	d00c      	beq.n	2728c <event_conn_upd_prep+0x2b4>
   27272:	4a13      	ldr	r2, [pc, #76]	; (272c0 <event_conn_upd_prep+0x2e8>)
   27274:	4913      	ldr	r1, [pc, #76]	; (272c4 <event_conn_upd_prep+0x2ec>)
   27276:	4814      	ldr	r0, [pc, #80]	; (272c8 <event_conn_upd_prep+0x2f0>)
   27278:	f640 43e5 	movw	r3, #3301	; 0xce5
   2727c:	f022 fc44 	bl	49b08 <printk>
   27280:	4040      	eors	r0, r0
   27282:	f380 8811 	msr	BASEPRI, r0
   27286:	f04f 0003 	mov.w	r0, #3
   2728a:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
   2728c:	f1ba 0f00 	cmp.w	sl, #0
   27290:	f040 814f 	bne.w	27532 <event_conn_upd_prep+0x55a>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
   27294:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
   27296:	b00b      	add	sp, #44	; 0x2c
   27298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2729c:	f3af 8000 	nop.w
   272a0:	1afd498d 	.word	0x1afd498d
   272a4:	00000007 	.word	0x00000007
   272a8:	200058c4 	.word	0x200058c4
   272ac:	3b9aca00 	.word	0x3b9aca00
   272b0:	026259ff 	.word	0x026259ff
   272b4:	01c9c37f 	.word	0x01c9c37f
   272b8:	20003368 	.word	0x20003368
   272bc:	0003975d 	.word	0x0003975d
   272c0:	000530cc 	.word	0x000530cc
   272c4:	000531ac 	.word	0x000531ac
   272c8:	00052bbc 	.word	0x00052bbc
   272cc:	1afd498d 	.word	0x1afd498d
   272d0:	0003e2ad 	.word	0x0003e2ad
   272d4:	0003e499 	.word	0x0003e499
   272d8:	00039705 	.word	0x00039705
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
   272dc:	f8df 8320 	ldr.w	r8, [pc, #800]	; 27600 <event_conn_upd_prep+0x628>
		rx = ll_pdu_rx_alloc_peek(1);
   272e0:	2001      	movs	r0, #1
   272e2:	f010 fc8f 	bl	37c04 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   272e6:	4606      	mov	r6, r0
   272e8:	2800      	cmp	r0, #0
   272ea:	f000 81b0 	beq.w	2764e <event_conn_upd_prep+0x676>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   272ee:	48c5      	ldr	r0, [pc, #788]	; (27604 <event_conn_upd_prep+0x62c>)
   272f0:	f00c fdfe 	bl	33ef0 <mem_acquire>
		if (!tx) {
   272f4:	4605      	mov	r5, r0
   272f6:	2800      	cmp	r0, #0
   272f8:	f000 81a9 	beq.w	2764e <event_conn_upd_prep+0x676>
	if (!conn_upd_curr) {
   272fc:	4bc2      	ldr	r3, [pc, #776]	; (27608 <event_conn_upd_prep+0x630>)
   272fe:	681a      	ldr	r2, [r3, #0]
   27300:	2a00      	cmp	r2, #0
   27302:	f000 8168 	beq.w	275d6 <event_conn_upd_prep+0x5fe>
		(void)ll_pdu_rx_alloc();
   27306:	f010 fc9d 	bl	37c44 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
   2730a:	6833      	ldr	r3, [r6, #0]
   2730c:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   27310:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   27312:	792b      	ldrb	r3, [r5, #4]
		conn->llcp_rx = rx;
   27314:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   27318:	f043 0303 	orr.w	r3, r3, #3
   2731c:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
   2731e:	230c      	movs	r3, #12
   27320:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   27322:	2300      	movs	r3, #0
   27324:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
   27326:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   2732a:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
   2732c:	4ab7      	ldr	r2, [pc, #732]	; (2760c <event_conn_upd_prep+0x634>)
   2732e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   27332:	fba2 2303 	umull	r2, r3, r2, r3
   27336:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
   27338:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
   2733c:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
   27340:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
   27344:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   27348:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
   2734c:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   27350:	f8a5 300f 	strh.w	r3, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
   27354:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   27358:	f8c4 70fc 	str.w	r7, [r4, #252]	; 0xfc
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
   2735c:	2203      	movs	r2, #3
   2735e:	f362 0302 	bfi	r3, r2, #0, #3
   27362:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   27366:	68a3      	ldr	r3, [r4, #8]
   27368:	2b00      	cmp	r3, #0
   2736a:	da0a      	bge.n	27382 <event_conn_upd_prep+0x3aa>
			uint32_t ticks_prepare_to_start =
   2736c:	68e1      	ldr	r1, [r4, #12]
   2736e:	6862      	ldr	r2, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
   27370:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
   27374:	4291      	cmp	r1, r2
   27376:	bf2c      	ite	cs
   27378:	187f      	addcs	r7, r7, r1
   2737a:	18bf      	addcc	r7, r7, r2
   2737c:	1aff      	subs	r7, r7, r3
   2737e:	f8c4 70fc 	str.w	r7, [r4, #252]	; 0xfc
		mfy_sched_offset->fp = fp_mfy_select_or_use;
   27382:	4ba3      	ldr	r3, [pc, #652]	; (27610 <event_conn_upd_prep+0x638>)
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   27384:	2201      	movs	r2, #1
		win_offs = &pdu_ctrl_tx->llctrl.conn_update_ind.win_offset;
   27386:	3509      	adds	r5, #9
		conn->llcp.conn_upd.pdu_win_offset = win_offs;
   27388:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   2738c:	2102      	movs	r1, #2
   2738e:	4610      	mov	r0, r2
		mfy_sched_offset->param = (void *)conn;
   27390:	e9c3 4802 	strd	r4, r8, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   27394:	f00c fe86 	bl	340a4 <mayfly_enqueue>
		LL_ASSERT(!retval);
   27398:	b160      	cbz	r0, 273b4 <event_conn_upd_prep+0x3dc>
   2739a:	4a9e      	ldr	r2, [pc, #632]	; (27614 <event_conn_upd_prep+0x63c>)
   2739c:	499e      	ldr	r1, [pc, #632]	; (27618 <event_conn_upd_prep+0x640>)
   2739e:	489f      	ldr	r0, [pc, #636]	; (2761c <event_conn_upd_prep+0x644>)
   273a0:	f640 3373 	movw	r3, #2931	; 0xb73
   273a4:	f022 fbb0 	bl	49b08 <printk>
   273a8:	4040      	eors	r0, r0
   273aa:	f380 8811 	msr	BASEPRI, r0
   273ae:	f04f 0003 	mov.w	r0, #3
   273b2:	df02      	svc	2
			return -EINPROGRESS;
   273b4:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
   273b8:	b00b      	add	sp, #44	; 0x2c
   273ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   273be:	fb09 1113 	mls	r1, r9, r3, r1
   273c2:	4897      	ldr	r0, [pc, #604]	; (27620 <event_conn_upd_prep+0x648>)
   273c4:	f240 43e2 	movw	r3, #1250	; 0x4e2
   273c8:	b289      	uxth	r1, r1
   273ca:	fb03 f101 	mul.w	r1, r3, r1
   273ce:	fba1 0100 	umull	r0, r1, r1, r0
   273d2:	a389      	add	r3, pc, #548	; (adr r3, 275f8 <event_conn_upd_prep+0x620>)
   273d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   273d8:	f7fe fe92 	bl	26100 <__aeabi_uldivmod>
   273dc:	1a3f      	subs	r7, r7, r0
   273de:	e699      	b.n	27114 <event_conn_upd_prep+0x13c>
		LL_ASSERT(rx && rx->hdr.link);
   273e0:	4a8c      	ldr	r2, [pc, #560]	; (27614 <event_conn_upd_prep+0x63c>)
   273e2:	4990      	ldr	r1, [pc, #576]	; (27624 <event_conn_upd_prep+0x64c>)
   273e4:	488d      	ldr	r0, [pc, #564]	; (2761c <event_conn_upd_prep+0x644>)
   273e6:	f44f 6342 	mov.w	r3, #3104	; 0xc20
   273ea:	f022 fb8d 	bl	49b08 <printk>
   273ee:	4040      	eors	r0, r0
   273f0:	f380 8811 	msr	BASEPRI, r0
   273f4:	f04f 0003 	mov.w	r0, #3
   273f8:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   273fa:	f8d9 0000 	ldr.w	r0, [r9]
   273fe:	e63d      	b.n	2707c <event_conn_upd_prep+0xa4>
		switch (conn->llcp_cu.state) {
   27400:	f06f 000f 	mvn.w	r0, #15
}
   27404:	b00b      	add	sp, #44	; 0x2c
   27406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (conn->llcp_cu.state) {
   2740a:	f8df 821c 	ldr.w	r8, [pc, #540]	; 27628 <event_conn_upd_prep+0x650>
   2740e:	e767      	b.n	272e0 <event_conn_upd_prep+0x308>
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
   27410:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
	    conn->tx_head &&
   27414:	f8d0 11d4 	ldr.w	r1, [r0, #468]	; 0x1d4
			conn->llcp_ack = conn->llcp_req;
   27418:	f890 00f0 	ldrb.w	r0, [r0, #240]	; 0xf0
   2741c:	f884 00f1 	strb.w	r0, [r4, #241]	; 0xf1
			conn->llcp_cu.ack = conn->llcp_cu.req;
   27420:	f894 0118 	ldrb.w	r0, [r4, #280]	; 0x118
	conn_upd_curr = NULL;
   27424:	4a78      	ldr	r2, [pc, #480]	; (27608 <event_conn_upd_prep+0x630>)
			conn->llcp_cu.ack = conn->llcp_cu.req;
   27426:	f884 0119 	strb.w	r0, [r4, #281]	; 0x119
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   2742a:	f894 0194 	ldrb.w	r0, [r4, #404]	; 0x194
   2742e:	f884 0195 	strb.w	r0, [r4, #405]	; 0x195
	conn_upd_curr = NULL;
   27432:	2000      	movs	r0, #0
   27434:	6010      	str	r0, [r2, #0]
		if (!conn->tx_ctrl) {
   27436:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
   2743a:	f1a3 0209 	sub.w	r2, r3, #9
	if (
   2743e:	2900      	cmp	r1, #0
   27440:	f000 8111 	beq.w	27666 <event_conn_upd_prep+0x68e>
	    !conn->llcp_enc.pause_tx &&
   27444:	f894 5176 	ldrb.w	r5, [r4, #374]	; 0x176
	    conn->tx_head &&
   27448:	07ad      	lsls	r5, r5, #30
   2744a:	f100 80f1 	bmi.w	27630 <event_conn_upd_prep+0x658>
	    !conn->llcp_phy.pause_tx &&
   2744e:	f894 51cf 	ldrb.w	r5, [r4, #463]	; 0x1cf
   27452:	07ef      	lsls	r7, r5, #31
   27454:	f100 80ec 	bmi.w	27630 <event_conn_upd_prep+0x658>
		if (conn->tx_head == conn->tx_data) {
   27458:	f8d4 51e0 	ldr.w	r5, [r4, #480]	; 0x1e0
   2745c:	42a9      	cmp	r1, r5
   2745e:	f000 811b 	beq.w	27698 <event_conn_upd_prep+0x6c0>
		} else if (!conn->tx_ctrl) {
   27462:	2800      	cmp	r0, #0
   27464:	f040 80e5 	bne.w	27632 <event_conn_upd_prep+0x65a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   27468:	7908      	ldrb	r0, [r1, #4]
   2746a:	f000 0003 	and.w	r0, r0, #3
   2746e:	2803      	cmp	r0, #3
   27470:	f000 8137 	beq.w	276e2 <event_conn_upd_prep+0x70a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   27474:	f8c4 11d8 	str.w	r1, [r4, #472]	; 0x1d8
   27478:	e0dd      	b.n	27636 <event_conn_upd_prep+0x65e>
						      conn->lll.latency + 6;
   2747a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   2747c:	f890 011a 	ldrb.w	r0, [r0, #282]	; 0x11a
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
   27480:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
	    conn->tx_head &&
   27484:	f8d4 51d4 	ldr.w	r5, [r4, #468]	; 0x1d4
						      conn->lll.latency + 6;
   27488:	3206      	adds	r2, #6
   2748a:	4411      	add	r1, r2
   2748c:	b289      	uxth	r1, r1
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   2748e:	f36f 0002 	bfc	r0, #0, #3
			conn->llcp.conn_upd.instant = event_counter +
   27492:	f8a4 10f4 	strh.w	r1, [r4, #244]	; 0xf4
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
   27496:	f1a3 0209 	sub.w	r2, r3, #9
			pdu_ctrl_tx->llctrl.conn_update_ind.instant =
   2749a:	8119      	strh	r1, [r3, #8]
		if (!conn->tx_ctrl) {
   2749c:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   274a0:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	if (
   274a4:	2d00      	cmp	r5, #0
   274a6:	f000 80d5 	beq.w	27654 <event_conn_upd_prep+0x67c>
	    !conn->llcp_enc.pause_tx &&
   274aa:	f894 0176 	ldrb.w	r0, [r4, #374]	; 0x176
	    conn->tx_head &&
   274ae:	0786      	lsls	r6, r0, #30
   274b0:	f100 8093 	bmi.w	275da <event_conn_upd_prep+0x602>
	    !conn->llcp_phy.pause_tx &&
   274b4:	f894 01cf 	ldrb.w	r0, [r4, #463]	; 0x1cf
   274b8:	07c0      	lsls	r0, r0, #31
   274ba:	f100 808e 	bmi.w	275da <event_conn_upd_prep+0x602>
		if (conn->tx_head == conn->tx_data) {
   274be:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
   274c2:	4285      	cmp	r5, r0
   274c4:	f000 80f6 	beq.w	276b4 <event_conn_upd_prep+0x6dc>
		} else if (!conn->tx_ctrl) {
   274c8:	2900      	cmp	r1, #0
   274ca:	f000 8102 	beq.w	276d2 <event_conn_upd_prep+0x6fa>
	tx->next = conn->tx_ctrl_last->next;
   274ce:	f8d4 51dc 	ldr.w	r5, [r4, #476]	; 0x1dc
   274d2:	6829      	ldr	r1, [r5, #0]
   274d4:	f843 1c09 	str.w	r1, [r3, #-9]
	conn->tx_ctrl_last->next = tx;
   274d8:	602a      	str	r2, [r5, #0]
	if (!tx->next) {
   274da:	f853 3c09 	ldr.w	r3, [r3, #-9]
	conn->tx_ctrl_last = tx;
   274de:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
	if (!tx->next) {
   274e2:	2b00      	cmp	r3, #0
   274e4:	f47f af66 	bne.w	273b4 <event_conn_upd_prep+0x3dc>
		conn->tx_data_last = tx;
   274e8:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
   274ec:	e762      	b.n	273b4 <event_conn_upd_prep+0x3dc>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   274ee:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   274f2:	2b00      	cmp	r3, #0
   274f4:	f43f ad98 	beq.w	27028 <event_conn_upd_prep+0x50>
			conn->periph.llcp_type = LLCP_NONE;
   274f8:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
   274fc:	e598      	b.n	27030 <event_conn_upd_prep+0x58>
		if ((conn->llcp_cu.interval != lll->interval) ||
   274fe:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
   27502:	ebbc 4f13 	cmp.w	ip, r3, lsr #16
   27506:	f47f adc6 	bne.w	27096 <event_conn_upd_prep+0xbe>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   2750a:	f240 4ce2 	movw	ip, #1250	; 0x4e2
   2750e:	fb0c f202 	mul.w	r2, ip, r2
   27512:	f242 7c10 	movw	ip, #10000	; 0x2710
   27516:	fb0c 2c01 	mla	ip, ip, r1, r2
   2751a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   2751e:	fbbc f2f2 	udiv	r2, ip, r2
		    (conn->llcp_cu.latency != lll->latency) ||
   27522:	f8b4 c0c2 	ldrh.w	ip, [r4, #194]	; 0xc2
   27526:	b292      	uxth	r2, r2
   27528:	4594      	cmp	ip, r2
   2752a:	f47f adb4 	bne.w	27096 <event_conn_upd_prep+0xbe>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   2752e:	2301      	movs	r3, #1
   27530:	e5bc      	b.n	270ac <event_conn_upd_prep+0xd4>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
   27532:	2201      	movs	r2, #1
   27534:	2102      	movs	r1, #2
   27536:	4610      	mov	r0, r2
   27538:	f00c fd80 	bl	3403c <mayfly_enable>
   2753c:	e6aa      	b.n	27294 <event_conn_upd_prep+0x2bc>
				lll->periph.window_widening_periodic_us *
   2753e:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->periph.window_widening_prepare_us -=
   27540:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   27542:	fb02 3318 	mls	r3, r2, r8, r3
   27546:	64a3      	str	r3, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
   27548:	f019 fad2 	bl	40af0 <lll_clock_ppm_local_get>
   2754c:	4605      	mov	r5, r0
   2754e:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   27552:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 27620 <event_conn_upd_prep+0x648>
				ceiling_fraction(((lll_clock_ppm_local_get() +
   27556:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   2755a:	f019 facb 	bl	40af4 <lll_clock_ppm_get>
   2755e:	4405      	add	r5, r0
   27560:	fb06 f505 	mul.w	r5, r6, r5
   27564:	4b31      	ldr	r3, [pc, #196]	; (2762c <event_conn_upd_prep+0x654>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
   27566:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
				ceiling_fraction(((lll_clock_ppm_local_get() +
   2756a:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
   2756e:	f205 253f 	addw	r5, r5, #575	; 0x23f
   27572:	fba3 3505 	umull	r3, r5, r3, r5
   27576:	0cad      	lsrs	r5, r5, #18
			lll->periph.window_widening_prepare_us +=
   27578:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			lll->periph.window_widening_periodic_us =
   2757a:	6425      	str	r5, [r4, #64]	; 0x40
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
   2757c:	fb0b f202 	mul.w	r2, fp, r2
				lll->periph.window_widening_periodic_us *
   27580:	fb05 f00a 	mul.w	r0, r5, sl
			lll->periph.window_size_prepare_us =
   27584:	6522      	str	r2, [r4, #80]	; 0x50
				(conn_interval_us >> 1) - EVENT_IFS_US;
   27586:	0872      	lsrs	r2, r6, #1
			lll->periph.window_widening_prepare_us +=
   27588:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
   2758a:	3a96      	subs	r2, #150	; 0x96
   2758c:	4293      	cmp	r3, r2
   2758e:	bf28      	it	cs
   27590:	4613      	movcs	r3, r2
   27592:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
			conn->periph.ticks_to_offset = 0U;
   27596:	2300      	movs	r3, #0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   27598:	fba0 0108 	umull	r0, r1, r0, r8
			conn->periph.ticks_to_offset = 0U;
   2759c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   275a0:	a315      	add	r3, pc, #84	; (adr r3, 275f8 <event_conn_upd_prep+0x620>)
   275a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   275a6:	f7fe fdab 	bl	26100 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   275aa:	4b18      	ldr	r3, [pc, #96]	; (2760c <event_conn_upd_prep+0x634>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   275ac:	1a3f      	subs	r7, r7, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   275ae:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   275b2:	fba3 3000 	umull	r3, r0, r3, r0
   275b6:	0a80      	lsrs	r0, r0, #10
   275b8:	fb0b f000 	mul.w	r0, fp, r0
   275bc:	fba0 0108 	umull	r0, r1, r0, r8
   275c0:	a30d      	add	r3, pc, #52	; (adr r3, 275f8 <event_conn_upd_prep+0x620>)
   275c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   275c6:	f7fe fd9b 	bl	26100 <__aeabi_uldivmod>
			periodic_us -= lll->periph.window_widening_periodic_us;
   275ca:	1b75      	subs	r5, r6, r5
		lll->interval = conn->llcp_cu.interval;
   275cc:	f8b4 911c 	ldrh.w	r9, [r4, #284]	; 0x11c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   275d0:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
			periodic_us -= lll->periph.window_widening_periodic_us;
   275d4:	e5bb      	b.n	2714e <event_conn_upd_prep+0x176>
		conn_upd_curr = conn;
   275d6:	601c      	str	r4, [r3, #0]
   275d8:	e695      	b.n	27306 <event_conn_upd_prep+0x32e>
		if (!conn->tx_ctrl) {
   275da:	2900      	cmp	r1, #0
   275dc:	d04e      	beq.n	2767c <event_conn_upd_prep+0x6a4>
	tx->next = conn->tx_ctrl_last->next;
   275de:	f8d4 11dc 	ldr.w	r1, [r4, #476]	; 0x1dc
   275e2:	6808      	ldr	r0, [r1, #0]
   275e4:	f843 0c09 	str.w	r0, [r3, #-9]
	conn->tx_ctrl_last->next = tx;
   275e8:	600a      	str	r2, [r1, #0]
	if (!tx->next) {
   275ea:	f853 3c09 	ldr.w	r3, [r3, #-9]
	conn->tx_ctrl_last = tx;
   275ee:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
}
   275f2:	e776      	b.n	274e2 <event_conn_upd_prep+0x50a>
   275f4:	f3af 8000 	nop.w
   275f8:	1afd498d 	.word	0x1afd498d
   275fc:	00000007 	.word	0x00000007
   27600:	0003eafd 	.word	0x0003eafd
   27604:	200059a8 	.word	0x200059a8
   27608:	200058c4 	.word	0x200058c4
   2760c:	d1b71759 	.word	0xd1b71759
   27610:	20000c24 	.word	0x20000c24
   27614:	000530cc 	.word	0x000530cc
   27618:	00052ec0 	.word	0x00052ec0
   2761c:	00052bbc 	.word	0x00052bbc
   27620:	3b9aca00 	.word	0x3b9aca00
   27624:	00053198 	.word	0x00053198
   27628:	00028501 	.word	0x00028501
   2762c:	431bde83 	.word	0x431bde83
		if (!conn->tx_ctrl) {
   27630:	b358      	cbz	r0, 2768a <event_conn_upd_prep+0x6b2>
	tx->next = conn->tx_ctrl_last->next;
   27632:	f8d4 11dc 	ldr.w	r1, [r4, #476]	; 0x1dc
   27636:	6808      	ldr	r0, [r1, #0]
   27638:	f843 0c09 	str.w	r0, [r3, #-9]
	conn->tx_ctrl_last->next = tx;
   2763c:	600a      	str	r2, [r1, #0]
	if (!tx->next) {
   2763e:	f853 3c09 	ldr.w	r3, [r3, #-9]
	conn->tx_ctrl_last = tx;
   27642:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
	if (!tx->next) {
   27646:	b1b3      	cbz	r3, 27676 <event_conn_upd_prep+0x69e>
			return -ECANCELED;
   27648:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2764c:	e623      	b.n	27296 <event_conn_upd_prep+0x2be>
			return -ENOBUFS;
   2764e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27652:	e620      	b.n	27296 <event_conn_upd_prep+0x2be>
		if (!conn->tx_ctrl) {
   27654:	2900      	cmp	r1, #0
   27656:	d1c2      	bne.n	275de <event_conn_upd_prep+0x606>
			tx->next = conn->tx_head;
   27658:	f843 1c09 	str.w	r1, [r3, #-9]
				conn->tx_ctrl = tx;
   2765c:	e9c4 2275 	strd	r2, r2, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   27660:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
	if (!tx->next) {
   27664:	e740      	b.n	274e8 <event_conn_upd_prep+0x510>
		if (!conn->tx_ctrl) {
   27666:	2800      	cmp	r0, #0
   27668:	d1e3      	bne.n	27632 <event_conn_upd_prep+0x65a>
			tx->next = conn->tx_head;
   2766a:	f843 0c09 	str.w	r0, [r3, #-9]
				conn->tx_ctrl = tx;
   2766e:	e9c4 2275 	strd	r2, r2, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   27672:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
		conn->tx_data_last = tx;
   27676:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
   2767a:	e7e5      	b.n	27648 <event_conn_upd_prep+0x670>
			tx->next = conn->tx_head;
   2767c:	f843 5c09 	str.w	r5, [r3, #-9]
				conn->tx_ctrl = tx;
   27680:	e9c4 2275 	strd	r2, r2, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   27684:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
	if (!tx->next) {
   27688:	e694      	b.n	273b4 <event_conn_upd_prep+0x3dc>
			tx->next = conn->tx_head;
   2768a:	f843 1c09 	str.w	r1, [r3, #-9]
				conn->tx_ctrl = tx;
   2768e:	e9c4 2275 	strd	r2, r2, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   27692:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
	if (!tx->next) {
   27696:	e7d7      	b.n	27648 <event_conn_upd_prep+0x670>
			conn->tx_data = conn->tx_data->next;
   27698:	680d      	ldr	r5, [r1, #0]
   2769a:	f8c4 51e0 	str.w	r5, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   2769e:	2800      	cmp	r0, #0
   276a0:	d1c7      	bne.n	27632 <event_conn_upd_prep+0x65a>
			tx->next = conn->tx_head->next;
   276a2:	6808      	ldr	r0, [r1, #0]
   276a4:	f843 0c09 	str.w	r0, [r3, #-9]
			conn->tx_head->next = tx;
   276a8:	600a      	str	r2, [r1, #0]
	if (!tx->next) {
   276aa:	f853 3c09 	ldr.w	r3, [r3, #-9]
				conn->tx_ctrl_last = tx;
   276ae:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   276b2:	e7c8      	b.n	27646 <event_conn_upd_prep+0x66e>
			conn->tx_data = conn->tx_data->next;
   276b4:	6828      	ldr	r0, [r5, #0]
   276b6:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   276ba:	2900      	cmp	r1, #0
   276bc:	f47f af07 	bne.w	274ce <event_conn_upd_prep+0x4f6>
			tx->next = conn->tx_head->next;
   276c0:	6829      	ldr	r1, [r5, #0]
   276c2:	f843 1c09 	str.w	r1, [r3, #-9]
			conn->tx_head->next = tx;
   276c6:	602a      	str	r2, [r5, #0]
	if (!tx->next) {
   276c8:	f853 3c09 	ldr.w	r3, [r3, #-9]
				conn->tx_ctrl_last = tx;
   276cc:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   276d0:	e707      	b.n	274e2 <event_conn_upd_prep+0x50a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   276d2:	7929      	ldrb	r1, [r5, #4]
   276d4:	f001 0103 	and.w	r1, r1, #3
   276d8:	2903      	cmp	r1, #3
   276da:	d009      	beq.n	276f0 <event_conn_upd_prep+0x718>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   276dc:	f8c4 51d8 	str.w	r5, [r4, #472]	; 0x1d8
   276e0:	e6f7      	b.n	274d2 <event_conn_upd_prep+0x4fa>
	    ((pdu_data_tx->llctrl.opcode !=
   276e2:	79c8      	ldrb	r0, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   276e4:	2803      	cmp	r0, #3
   276e6:	d0dc      	beq.n	276a2 <event_conn_upd_prep+0x6ca>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   276e8:	280a      	cmp	r0, #10
   276ea:	f47f aec3 	bne.w	27474 <event_conn_upd_prep+0x49c>
   276ee:	e7d8      	b.n	276a2 <event_conn_upd_prep+0x6ca>
	    ((pdu_data_tx->llctrl.opcode !=
   276f0:	79e9      	ldrb	r1, [r5, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   276f2:	2903      	cmp	r1, #3
   276f4:	d0e4      	beq.n	276c0 <event_conn_upd_prep+0x6e8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   276f6:	290a      	cmp	r1, #10
   276f8:	d1f0      	bne.n	276dc <event_conn_upd_prep+0x704>
   276fa:	e7e1      	b.n	276c0 <event_conn_upd_prep+0x6e8>
			LL_ASSERT(0);
   276fc:	4a07      	ldr	r2, [pc, #28]	; (2771c <event_conn_upd_prep+0x744>)
   276fe:	4908      	ldr	r1, [pc, #32]	; (27720 <event_conn_upd_prep+0x748>)
   27700:	4808      	ldr	r0, [pc, #32]	; (27724 <event_conn_upd_prep+0x74c>)
   27702:	f640 33c7 	movw	r3, #3015	; 0xbc7
   27706:	f022 f9ff 	bl	49b08 <printk>
   2770a:	4040      	eors	r0, r0
   2770c:	f380 8811 	msr	BASEPRI, r0
   27710:	f04f 0003 	mov.w	r0, #3
   27714:	df02      	svc	2
		void (*fp_mfy_select_or_use)(void *) = NULL;
   27716:	f04f 0800 	mov.w	r8, #0
			break;
   2771a:	e5e1      	b.n	272e0 <event_conn_upd_prep+0x308>
   2771c:	000530cc 	.word	0x000530cc
   27720:	00052c1c 	.word	0x00052c1c
   27724:	00052bbc 	.word	0x00052bbc

00027728 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
   27728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   2772c:	680b      	ldr	r3, [r1, #0]
	conn = lll->hdr.parent;
   2772e:	f8d2 b000 	ldr.w	fp, [r2]
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   27732:	681b      	ldr	r3, [r3, #0]
{
   27734:	b097      	sub	sp, #92	; 0x5c
   27736:	468a      	mov	sl, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   27738:	930b      	str	r3, [sp, #44]	; 0x2c

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
   2773a:	7f03      	ldrb	r3, [r0, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   2773c:	f100 011e 	add.w	r1, r0, #30
	peer_addr_type = pdu_adv->tx_addr;
   27740:	f3c3 1380 	ubfx	r3, r3, #6, #1
{
   27744:	4604      	mov	r4, r0
   27746:	4615      	mov	r5, r2
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   27748:	a814      	add	r0, sp, #80	; 0x50
   2774a:	2206      	movs	r2, #6
	peer_addr_type = pdu_adv->tx_addr;
   2774c:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   27750:	f024 fb09 	bl	4bd66 <memcpy>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
   27754:	f89a 0011 	ldrb.w	r0, [sl, #17]
   27758:	900d      	str	r0, [sp, #52]	; 0x34

	if (rl_idx != FILTER_IDX_NONE) {
   2775a:	28ff      	cmp	r0, #255	; 0xff
		/* Get identity address */
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
   2775c:	f10d 0848 	add.w	r8, sp, #72	; 0x48
	if (rl_idx != FILTER_IDX_NONE) {
   27760:	f000 8083 	beq.w	2786a <ull_periph_setup+0x142>
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
   27764:	4642      	mov	r2, r8
   27766:	f10d 0147 	add.w	r1, sp, #71	; 0x47
   2776a:	f017 fc7f 	bl	3f06c <ll_rl_id_addr_get>
		/* Mark it as identity address from RPA (0x02, 0x03) */
		peer_addr_type += 2;
   2776e:	f89d 6047 	ldrb.w	r6, [sp, #71]	; 0x47
   27772:	3602      	adds	r6, #2
   27774:	b2f6      	uxtb	r6, r6
   27776:	f88d 6047 	strb.w	r6, [sp, #71]	; 0x47
	link = rx->link;

#if defined(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)
	const uint8_t peer_id_addr_type = (peer_addr_type & 0x01);
	const uint8_t own_id_addr_type = pdu_adv->rx_addr;
	const uint8_t *own_id_addr = adv->own_id_addr;
   2777a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	const uint8_t own_id_addr_type = pdu_adv->rx_addr;
   2777c:	7f27      	ldrb	r7, [r4, #28]
	link = rx->link;
   2777e:	f8d4 c000 	ldr.w	ip, [r4]
   27782:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
	const uint8_t *own_id_addr = adv->own_id_addr;
   27786:	f103 0971 	add.w	r9, r3, #113	; 0x71
	const uint8_t own_id_addr_type = pdu_adv->rx_addr;
   2778a:	09ff      	lsrs	r7, r7, #7

	/* Do not connect twice to the same peer */
	if (ull_conn_peer_connected(own_id_addr_type, own_id_addr,
   2778c:	4643      	mov	r3, r8
   2778e:	f006 0201 	and.w	r2, r6, #1
   27792:	4649      	mov	r1, r9
   27794:	4638      	mov	r0, r7
   27796:	f012 ffd3 	bl	3a740 <ull_conn_peer_connected>
   2779a:	2800      	cmp	r0, #0
   2779c:	d14b      	bne.n	27836 <ull_periph_setup+0x10e>

		return;
	}

	/* Remember peer and own identity address */
	conn->peer_id_addr_type = peer_id_addr_type;
   2779e:	f89b 20d6 	ldrb.w	r2, [fp, #214]	; 0xd6
   277a2:	900e      	str	r0, [sp, #56]	; 0x38
   277a4:	f366 0241 	bfi	r2, r6, #1, #1
   277a8:	f88b 20d6 	strb.w	r2, [fp, #214]	; 0xd6
	(void)memcpy(conn->peer_id_addr, peer_id_addr,
   277ac:	4641      	mov	r1, r8
   277ae:	2206      	movs	r2, #6
   277b0:	f10b 00dd 	add.w	r0, fp, #221	; 0xdd
   277b4:	f024 fad7 	bl	4bd66 <memcpy>
		     sizeof(conn->peer_id_addr));
	conn->own_id_addr_type = own_id_addr_type;
   277b8:	f89b 20d6 	ldrb.w	r2, [fp, #214]	; 0xd6
   277bc:	f367 0200 	bfi	r2, r7, #0, #1
	(void)memcpy(conn->own_id_addr, own_id_addr,
   277c0:	4649      	mov	r1, r9
	conn->own_id_addr_type = own_id_addr_type;
   277c2:	f88b 20d6 	strb.w	r2, [fp, #214]	; 0xd6
	(void)memcpy(conn->own_id_addr, own_id_addr,
   277c6:	f10b 00d7 	add.w	r0, fp, #215	; 0xd7
   277ca:	2206      	movs	r2, #6
   277cc:	f024 facb 	bl	4bd66 <memcpy>
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   277d0:	1d2f      	adds	r7, r5, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   277d2:	2203      	movs	r2, #3
   277d4:	f104 012e 	add.w	r1, r4, #46	; 0x2e
   277d8:	f105 0008 	add.w	r0, r5, #8
   277dc:	f024 fac3 	bl	4bd66 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   277e0:	f105 0618 	add.w	r6, r5, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   277e4:	2204      	movs	r2, #4
   277e6:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   277ea:	4638      	mov	r0, r7
   277ec:	f024 fabb 	bl	4bd66 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   277f0:	2205      	movs	r2, #5
   277f2:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   277f6:	4630      	mov	r0, r6
   277f8:	f024 fab5 	bl	4bd66 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   277fc:	4630      	mov	r0, r6
   277fe:	2105      	movs	r1, #5
   27800:	f00c fd56 	bl	342b0 <util_ones_count_get>
   27804:	7f6a      	ldrb	r2, [r5, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   27806:	f894 603f 	ldrb.w	r6, [r4, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   2780a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2780e:	f360 0205 	bfi	r2, r0, #0, #6
   27812:	776a      	strb	r2, [r5, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   27814:	f3c6 0204 	ubfx	r2, r6, #0, #5
   27818:	77aa      	strb	r2, [r5, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   2781a:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
   2781c:	81e9      	strh	r1, [r5, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
   2781e:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   27820:	b289      	uxth	r1, r1
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   27822:	f006 021f 	and.w	r2, r6, #31
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
   27826:	d906      	bls.n	27836 <ull_periph_setup+0x10e>
   27828:	321b      	adds	r2, #27
   2782a:	f002 021f 	and.w	r2, r2, #31
   2782e:	2a0b      	cmp	r2, #11
   27830:	d801      	bhi.n	27836 <ull_periph_setup+0x10e>
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
   27832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27834:	bb09      	cbnz	r1, 2787a <ull_periph_setup+0x152>

static void invalid_release(struct ull_hdr *hdr, struct lll_conn *lll,
			    memq_link_t *link, struct node_rx_hdr *rx)
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;
   27836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		struct node_rx_pdu *rx_csa;

		/* pick the rx node instance stored within the
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;
   27838:	68e6      	ldr	r6, [r4, #12]

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
   2783a:	980c      	ldr	r0, [sp, #48]	; 0x30
	hdr->disabled_cb = NULL;
   2783c:	2200      	movs	r2, #0
   2783e:	615a      	str	r2, [r3, #20]
	lll->periph.initiated = 0U;
   27840:	f895 3020 	ldrb.w	r3, [r5, #32]
	rx->type = NODE_RX_TYPE_RELEASE;
   27844:	2701      	movs	r7, #1
	lll->periph.initiated = 0U;
   27846:	f362 0300 	bfi	r3, r2, #0, #1
   2784a:	f885 3020 	strb.w	r3, [r5, #32]
		ll_rx_put(link, rx);
   2784e:	4621      	mov	r1, r4
	rx->type = NODE_RX_TYPE_RELEASE;
   27850:	7127      	strb	r7, [r4, #4]
		ll_rx_put(link, rx);
   27852:	f010 f9c7 	bl	37be4 <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
   27856:	6830      	ldr	r0, [r6, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
   27858:	7137      	strb	r7, [r6, #4]
	ll_rx_put(link, rx);
   2785a:	4631      	mov	r1, r6
   2785c:	f010 f9c2 	bl	37be4 <ll_rx_put>
	ll_rx_sched();
   27860:	f010 f9ca 	bl	37bf8 <ll_rx_sched>
}
   27864:	b017      	add	sp, #92	; 0x5c
   27866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
   2786a:	2206      	movs	r2, #6
   2786c:	a914      	add	r1, sp, #80	; 0x50
   2786e:	4640      	mov	r0, r8
   27870:	f024 fa79 	bl	4bd66 <memcpy>
	const uint8_t peer_id_addr_type = (peer_addr_type & 0x01);
   27874:	f89d 6047 	ldrb.w	r6, [sp, #71]	; 0x47
   27878:	e77f      	b.n	2777a <ull_periph_setup+0x52>
	((struct lll_adv *)ftr->param)->conn = NULL;
   2787a:	f8da 2000 	ldr.w	r2, [sl]
   2787e:	6053      	str	r3, [r2, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
   27880:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
   27884:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   27888:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2788c:	822b      	strh	r3, [r5, #16]
	conn->periph.sca = pdu_adv->connect_ind.sca;
   2788e:	f89b 30e4 	ldrb.w	r3, [fp, #228]	; 0xe4
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
   27892:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   27894:	920f      	str	r2, [sp, #60]	; 0x3c
	conn->periph.sca = pdu_adv->connect_ind.sca;
   27896:	0976      	lsrs	r6, r6, #5
   27898:	f366 03c5 	bfi	r3, r6, #3, #3
   2789c:	f88b 30e4 	strb.w	r3, [fp, #228]	; 0xe4
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   278a0:	f240 46e2 	movw	r6, #1250	; 0x4e2
   278a4:	fb06 f901 	mul.w	r9, r6, r1
		ceiling_fraction(((lll_clock_ppm_local_get() +
   278a8:	f019 f922 	bl	40af0 <lll_clock_ppm_local_get>
   278ac:	900e      	str	r0, [sp, #56]	; 0x38
   278ae:	f89b 00e4 	ldrb.w	r0, [fp, #228]	; 0xe4
   278b2:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   278b6:	f019 f91d 	bl	40af4 <lll_clock_ppm_get>
   278ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   278bc:	4ac0      	ldr	r2, [pc, #768]	; (27bc0 <ull_periph_setup+0x498>)
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   278be:	8a29      	ldrh	r1, [r5, #16]
		ceiling_fraction(((lll_clock_ppm_local_get() +
   278c0:	4403      	add	r3, r0
   278c2:	fb09 f303 	mul.w	r3, r9, r3
   278c6:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   278ca:	f203 233f 	addw	r3, r3, #575	; 0x23f
   278ce:	fba2 2303 	umull	r2, r3, r2, r3
   278d2:	0c9b      	lsrs	r3, r3, #18
	lll->periph.window_widening_periodic_us =
   278d4:	626b      	str	r3, [r5, #36]	; 0x24
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
   278d6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   278da:	4aba      	ldr	r2, [pc, #744]	; (27bc4 <ull_periph_setup+0x49c>)
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
   278dc:	fb06 f303 	mul.w	r3, r6, r3
   278e0:	63ab      	str	r3, [r5, #56]	; 0x38
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   278e2:	ea4f 0359 	mov.w	r3, r9, lsr #1
   278e6:	3b96      	subs	r3, #150	; 0x96
   278e8:	62ab      	str	r3, [r5, #40]	; 0x28
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   278ea:	8f26      	ldrh	r6, [r4, #56]	; 0x38
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   278ec:	4bb6      	ldr	r3, [pc, #728]	; (27bc8 <ull_periph_setup+0x4a0>)
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   278ee:	f242 7010 	movw	r0, #10000	; 0x2710
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   278f2:	444a      	add	r2, r9
   278f4:	fbb2 f2f9 	udiv	r2, r2, r9
   278f8:	f8ab 20c6 	strh.w	r2, [fp, #198]	; 0xc6
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   278fc:	b2b2      	uxth	r2, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   278fe:	fb00 9202 	mla	r2, r0, r2, r9
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27902:	444b      	add	r3, r9
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   27904:	3a01      	subs	r2, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27906:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   27908:	fbb2 f2f9 	udiv	r2, r2, r9
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   2790c:	fbb3 f3f9 	udiv	r3, r3, r9
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   27910:	f8ab 20c2 	strh.w	r2, [fp, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27914:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27916:	4282      	cmp	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27918:	f8ab 20ce 	strh.w	r2, [fp, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   2791c:	dd04      	ble.n	27928 <ull_periph_setup+0x200>
   2791e:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
   27922:	31fa      	adds	r1, #250	; 0xfa
   27924:	440a      	add	r2, r1
   27926:	b292      	uxth	r2, r2
   27928:	f8ab 20ca 	strh.w	r2, [fp, #202]	; 0xca
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
   2792c:	4639      	mov	r1, r7
   2792e:	2204      	movs	r2, #4
   27930:	f10b 00e8 	add.w	r0, fp, #232	; 0xe8
   27934:	f024 fa17 	bl	4bd66 <memcpy>
		chan_sel = pdu_adv->chan_sel;
   27938:	4623      	mov	r3, r4
   2793a:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
   2793e:	f3c2 1240 	ubfx	r2, r2, #5, #1
   27942:	920e      	str	r2, [sp, #56]	; 0x38
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   27944:	07da      	lsls	r2, r3, #31
   27946:	f100 8101 	bmi.w	27b4c <ull_periph_setup+0x424>
	cc->status = 0U;
   2794a:	f44f 7380 	mov.w	r3, #256	; 0x100
   2794e:	83a3      	strh	r3, [r4, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
   27950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27952:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
   27956:	f018 f95d 	bl	3fc14 <ull_filter_lll_lrpa_used>
   2795a:	4601      	mov	r1, r0
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
   2795c:	2206      	movs	r2, #6
   2795e:	f104 002b 	add.w	r0, r4, #43	; 0x2b
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
   27962:	2900      	cmp	r1, #0
   27964:	f000 80ea 	beq.w	27b3c <ull_periph_setup+0x414>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
   27968:	f104 0124 	add.w	r1, r4, #36	; 0x24
   2796c:	f024 f9fb 	bl	4bd66 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
   27970:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   27972:	2bff      	cmp	r3, #255	; 0xff
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
   27974:	f104 0025 	add.w	r0, r4, #37	; 0x25
	if (rl_idx != FILTER_IDX_NONE) {
   27978:	f000 80e3 	beq.w	27b42 <ull_periph_setup+0x41a>
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
   2797c:	a914      	add	r1, sp, #80	; 0x50
   2797e:	2206      	movs	r2, #6
   27980:	f024 f9f1 	bl	4bd66 <memcpy>
	cc->peer_addr_type = peer_addr_type;
   27984:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   27988:	77a3      	strb	r3, [r4, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
   2798a:	4641      	mov	r1, r8
   2798c:	2206      	movs	r2, #6
   2798e:	f104 001f 	add.w	r0, r4, #31
   27992:	f024 f9e8 	bl	4bd66 <memcpy>
	cc->interval = lll->interval;
   27996:	f8d5 300e 	ldr.w	r3, [r5, #14]
   2799a:	f8c4 3032 	str.w	r3, [r4, #50]	; 0x32
	cc->sca = conn->periph.sca;
   2799e:	f89b 30e4 	ldrb.w	r3, [fp, #228]	; 0xe4
	cc->timeout = timeout;
   279a2:	86e6      	strh	r6, [r4, #54]	; 0x36
	cc->sca = conn->periph.sca;
   279a4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   279a8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	lll->handle = ll_conn_handle_get(conn);
   279ac:	4658      	mov	r0, fp
   279ae:	f012 fb5d 	bl	3a06c <ll_conn_handle_get>
		ll_rx_put(link, rx);
   279b2:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
   279b4:	81a8      	strh	r0, [r5, #12]
	rx->handle = lll->handle;
   279b6:	80e0      	strh	r0, [r4, #6]
		rx_csa = (void *)ftr->extra;
   279b8:	f8da 4004 	ldr.w	r4, [sl, #4]
		ll_rx_put(link, rx);
   279bc:	980c      	ldr	r0, [sp, #48]	; 0x30
   279be:	f010 f911 	bl	37be4 <ll_rx_put>
		rx->handle = lll->handle;
   279c2:	89ab      	ldrh	r3, [r5, #12]
   279c4:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   279c6:	231b      	movs	r3, #27
   279c8:	7123      	strb	r3, [r4, #4]
		if (chan_sel) {
   279ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		link = rx->link;
   279cc:	f8d4 8000 	ldr.w	r8, [r4]
		if (chan_sel) {
   279d0:	2b00      	cmp	r3, #0
   279d2:	f040 80d0 	bne.w	27b76 <ull_periph_setup+0x44e>
   279d6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
			cs->csa = 0x00;
   279d8:	7726      	strb	r6, [r4, #28]
	ll_rx_put(link, rx);
   279da:	4621      	mov	r1, r4
   279dc:	4640      	mov	r0, r8
   279de:	f010 f901 	bl	37be4 <ll_rx_put>
	ll_rx_sched();
   279e2:	f010 f909 	bl	37bf8 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   279e6:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
	max_tx_time = lll->max_tx_time;
   279ea:	f8b5 6040 	ldrh.w	r6, [r5, #64]	; 0x40
	max_rx_time = lll->max_rx_time;
   279ee:	f8b5 4042 	ldrh.w	r4, [r5, #66]	; 0x42
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   279f2:	2101      	movs	r1, #1
   279f4:	f000 0007 	and.w	r0, r0, #7
   279f8:	f018 fe82 	bl	40700 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   279fc:	4434      	add	r4, r6
   279fe:	f504 74e1 	add.w	r4, r4, #450	; 0x1c2
   27a02:	1821      	adds	r1, r4, r0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   27a04:	4680      	mov	r8, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27a06:	4871      	ldr	r0, [pc, #452]	; (27bcc <ull_periph_setup+0x4a4>)
	conn->ull.ticks_active_to_start = 0U;
   27a08:	2700      	movs	r7, #0
	conn->ull.ticks_prepare_to_start =
   27a0a:	2331      	movs	r3, #49	; 0x31
   27a0c:	f8cb 3008 	str.w	r3, [fp, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27a10:	fba1 0100 	umull	r0, r1, r1, r0
   27a14:	a368      	add	r3, pc, #416	; (adr r3, 27bb8 <ull_periph_setup+0x490>)
   27a16:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_active_to_start = 0U;
   27a1a:	f8cb 7004 	str.w	r7, [fp, #4]
	conn->ull.ticks_preempt_to_start =
   27a1e:	f8cb 700c 	str.w	r7, [fp, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27a22:	f7fe fb6d 	bl	26100 <__aeabi_uldivmod>
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   27a26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	conn_offset_us = ftr->radio_end_us;
   27a28:	f8da 400c 	ldr.w	r4, [sl, #12]
	conn_interval_us -= lll->periph.window_widening_periodic_us;
   27a2c:	6a6e      	ldr	r6, [r5, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   27a2e:	f240 43e2 	movw	r3, #1250	; 0x4e2
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27a32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   27a36:	fb03 4402 	mla	r4, r3, r2, r4
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   27a3a:	2102      	movs	r1, #2
   27a3c:	463a      	mov	r2, r7
	conn->ull.ticks_slot =
   27a3e:	f8cb 0010 	str.w	r0, [fp, #16]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   27a42:	2001      	movs	r0, #1
   27a44:	f00c fafa 	bl	3403c <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
   27a48:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   27a4a:	4628      	mov	r0, r5
   27a4c:	f011 f9d4 	bl	38df8 <ull_adv_handle_get>
   27a50:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   27a52:	4b5f      	ldr	r3, [pc, #380]	; (27bd0 <ull_periph_setup+0x4a8>)
   27a54:	9500      	str	r5, [sp, #0]
   27a56:	b2d2      	uxtb	r2, r2
   27a58:	4638      	mov	r0, r7
   27a5a:	2101      	movs	r1, #1
   27a5c:	f00d fdf4 	bl	35648 <ticker_stop>
	conn_offset_us -= EVENT_JITTER_US;
   27a60:	f204 44b2 	addw	r4, r4, #1202	; 0x4b2
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   27a64:	2801      	cmp	r0, #1
	conn_interval_us -= lll->periph.window_widening_periodic_us;
   27a66:	eba9 0606 	sub.w	r6, r9, r6
	conn_offset_us -= ready_delay_us;
   27a6a:	eba4 0408 	sub.w	r4, r4, r8
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   27a6e:	f000 808c 	beq.w	27b8a <ull_periph_setup+0x462>
	if (adv->lll.is_hdcd) {
   27a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27a74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   27a78:	07db      	lsls	r3, r3, #31
   27a7a:	d474      	bmi.n	27b66 <ull_periph_setup+0x43e>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27a7c:	4658      	mov	r0, fp
   27a7e:	f012 faf5 	bl	3a06c <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   27a82:	f8df 9148 	ldr.w	r9, [pc, #328]	; 27bcc <ull_periph_setup+0x4a4>
   27a86:	fba6 8609 	umull	r8, r6, r6, r9
   27a8a:	a34b      	add	r3, pc, #300	; (adr r3, 27bb8 <ull_periph_setup+0x490>)
   27a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27a90:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   27a92:	4631      	mov	r1, r6
   27a94:	4640      	mov	r0, r8
   27a96:	f7fe fb33 	bl	26100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27a9a:	f8da 3008 	ldr.w	r3, [sl, #8]
   27a9e:	4a4d      	ldr	r2, [pc, #308]	; (27bd4 <ull_periph_setup+0x4ac>)
   27aa0:	9207      	str	r2, [sp, #28]
   27aa2:	f1a3 0a3a 	sub.w	sl, r3, #58	; 0x3a
				     HAL_TICKER_REMAINDER(conn_interval_us),
   27aa6:	4b4c      	ldr	r3, [pc, #304]	; (27bd8 <ull_periph_setup+0x4b0>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27aa8:	f8cd b018 	str.w	fp, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   27aac:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
   27ab0:	fba7 3103 	umull	r3, r1, r7, r3
   27ab4:	ebb8 0003 	subs.w	r0, r8, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27ab8:	4b48      	ldr	r3, [pc, #288]	; (27bdc <ull_periph_setup+0x4b4>)
   27aba:	9305      	str	r3, [sp, #20]
   27abc:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   27ac0:	9308      	str	r3, [sp, #32]
   27ac2:	f8db 3010 	ldr.w	r3, [fp, #16]
   27ac6:	9304      	str	r3, [sp, #16]
   27ac8:	f04f 0300 	mov.w	r3, #0
   27acc:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   27ace:	f04f 0307 	mov.w	r3, #7
   27ad2:	fb03 1107 	mla	r1, r3, r7, r1
   27ad6:	eb66 0101 	sbc.w	r1, r6, r1
   27ada:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27ade:	2300      	movs	r3, #0
   27ae0:	f7fe fb0e 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   27ae4:	a334      	add	r3, pc, #208	; (adr r3, 27bb8 <ull_periph_setup+0x490>)
   27ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27aea:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   27aee:	fba4 0109 	umull	r0, r1, r4, r9
   27af2:	f7fe fb05 	bl	26100 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27af6:	3505      	adds	r5, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27af8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   27afc:	b2ed      	uxtb	r5, r5
   27afe:	9000      	str	r0, [sp, #0]
   27b00:	4653      	mov	r3, sl
   27b02:	462a      	mov	r2, r5
   27b04:	2101      	movs	r1, #1
   27b06:	2000      	movs	r0, #0
   27b08:	f00d fd12 	bl	35530 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   27b0c:	f030 0302 	bics.w	r3, r0, #2
   27b10:	d00c      	beq.n	27b2c <ull_periph_setup+0x404>
   27b12:	4a33      	ldr	r2, [pc, #204]	; (27be0 <ull_periph_setup+0x4b8>)
   27b14:	4933      	ldr	r1, [pc, #204]	; (27be4 <ull_periph_setup+0x4bc>)
   27b16:	4834      	ldr	r0, [pc, #208]	; (27be8 <ull_periph_setup+0x4c0>)
   27b18:	f240 13c9 	movw	r3, #457	; 0x1c9
   27b1c:	f021 fff4 	bl	49b08 <printk>
   27b20:	4040      	eors	r0, r0
   27b22:	f380 8811 	msr	BASEPRI, r0
   27b26:	f04f 0003 	mov.w	r0, #3
   27b2a:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
   27b2c:	2201      	movs	r2, #1
   27b2e:	2102      	movs	r1, #2
   27b30:	4610      	mov	r0, r2
   27b32:	f00c fa83 	bl	3403c <mayfly_enable>
}
   27b36:	b017      	add	sp, #92	; 0x5c
   27b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
   27b3c:	f024 f91e 	bl	4bd7c <memset>
   27b40:	e716      	b.n	27970 <ull_periph_setup+0x248>
		memset(cc->peer_rpa, 0x0, BDADDR_SIZE);
   27b42:	2206      	movs	r2, #6
   27b44:	2100      	movs	r1, #0
   27b46:	f024 f919 	bl	4bd7c <memset>
   27b4a:	e71b      	b.n	27984 <ull_periph_setup+0x25c>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   27b4c:	4a24      	ldr	r2, [pc, #144]	; (27be0 <ull_periph_setup+0x4b8>)
   27b4e:	4927      	ldr	r1, [pc, #156]	; (27bec <ull_periph_setup+0x4c4>)
   27b50:	4825      	ldr	r0, [pc, #148]	; (27be8 <ull_periph_setup+0x4c0>)
   27b52:	23f1      	movs	r3, #241	; 0xf1
   27b54:	f021 ffd8 	bl	49b08 <printk>
   27b58:	4040      	eors	r0, r0
   27b5a:	f380 8811 	msr	BASEPRI, r0
   27b5e:	f04f 0003 	mov.w	r0, #3
   27b62:	df02      	svc	2
   27b64:	e6f1      	b.n	2794a <ull_periph_setup+0x222>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   27b66:	2300      	movs	r3, #0
   27b68:	2201      	movs	r2, #1
   27b6a:	9300      	str	r3, [sp, #0]
   27b6c:	4618      	mov	r0, r3
   27b6e:	4611      	mov	r1, r2
   27b70:	f00d fd6a 	bl	35648 <ticker_stop>
   27b74:	e782      	b.n	27a7c <ull_periph_setup+0x354>
			lll->data_chan_sel = 1;
   27b76:	7f6b      	ldrb	r3, [r5, #29]
   27b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   27b7c:	4638      	mov	r0, r7
			lll->data_chan_sel = 1;
   27b7e:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   27b80:	f017 f872 	bl	3ec68 <lll_chan_id>
   27b84:	2601      	movs	r6, #1
   27b86:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
   27b88:	e726      	b.n	279d8 <ull_periph_setup+0x2b0>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   27b8a:	f010 f909 	bl	37da0 <ull_disable_mark_get>
   27b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27b90:	4283      	cmp	r3, r0
   27b92:	f43f af6e 	beq.w	27a72 <ull_periph_setup+0x34a>
   27b96:	4a12      	ldr	r2, [pc, #72]	; (27be0 <ull_periph_setup+0x4b8>)
   27b98:	4915      	ldr	r1, [pc, #84]	; (27bf0 <ull_periph_setup+0x4c8>)
   27b9a:	4813      	ldr	r0, [pc, #76]	; (27be8 <ull_periph_setup+0x4c0>)
   27b9c:	f240 239f 	movw	r3, #671	; 0x29f
   27ba0:	f021 ffb2 	bl	49b08 <printk>
   27ba4:	4040      	eors	r0, r0
   27ba6:	f380 8811 	msr	BASEPRI, r0
   27baa:	f04f 0003 	mov.w	r0, #3
   27bae:	df02      	svc	2
		  param == ull_disable_mark_get());
}
   27bb0:	e75f      	b.n	27a72 <ull_periph_setup+0x34a>
   27bb2:	bf00      	nop
   27bb4:	f3af 8000 	nop.w
   27bb8:	1afd498d 	.word	0x1afd498d
   27bbc:	00000007 	.word	0x00000007
   27bc0:	431bde83 	.word	0x431bde83
   27bc4:	026259ff 	.word	0x026259ff
   27bc8:	01c9c37f 	.word	0x01c9c37f
   27bcc:	3b9aca00 	.word	0x3b9aca00
   27bd0:	0003e271 	.word	0x0003e271
   27bd4:	0003e241 	.word	0x0003e241
   27bd8:	1afd498d 	.word	0x1afd498d
   27bdc:	0003e2ad 	.word	0x0003e2ad
   27be0:	000532e4 	.word	0x000532e4
   27be4:	000531ac 	.word	0x000531ac
   27be8:	00052bbc 	.word	0x00052bbc
   27bec:	00052ccc 	.word	0x00052ccc
   27bf0:	00053340 	.word	0x00053340
   27bf4:	00000000 	.word	0x00000000

00027bf8 <ll_create_connection>:
uint8_t ll_create_connection(uint16_t scan_interval, uint16_t scan_window,
			  uint8_t filter_policy, uint8_t peer_addr_type,
			  uint8_t const *const peer_addr, uint8_t own_addr_type,
			  uint16_t interval, uint16_t latency, uint16_t timeout)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
   27bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27bfc:	b08b      	sub	sp, #44	; 0x2c
   27bfe:	e9cd 0105 	strd	r0, r1, [sp, #20]
   27c02:	9302      	str	r3, [sp, #8]
	uint16_t max_rx_time;
	memq_link_t *link;
	uint8_t hop;
	int err;

	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   27c04:	2000      	movs	r0, #0
{
   27c06:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   27c0a:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
   27c0e:	f8bd a058 	ldrh.w	sl, [sp, #88]	; 0x58
   27c12:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
   27c16:	9304      	str	r3, [sp, #16]
   27c18:	4616      	mov	r6, r2
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   27c1a:	f011 fb2d 	bl	39278 <ull_scan_is_disabled_get>
	if (!scan) {
   27c1e:	2800      	cmp	r0, #0
   27c20:	f000 81b7 	beq.w	27f92 <ll_create_connection+0x39a>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* Check if random address has been set */
	own_id_addr_type = (own_addr_type & 0x01);
   27c24:	f008 0701 	and.w	r7, r8, #1
	own_id_addr = ll_addr_get(own_id_addr_type);
   27c28:	4605      	mov	r5, r0
   27c2a:	4638      	mov	r0, r7
   27c2c:	f00d fdd2 	bl	357d4 <ll_addr_get>
   27c30:	9003      	str	r0, [sp, #12]
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
   27c32:	2f00      	cmp	r7, #0
   27c34:	d16b      	bne.n	27d0e <ll_create_connection+0x116>
		return BT_HCI_ERR_INVALID_PARAM;
	}

#if defined(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)
	/* Do not connect twice to the same peer */
	if (ull_conn_peer_connected(own_id_addr_type, own_id_addr,
   27c36:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   27c3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   27c3c:	4638      	mov	r0, r7
   27c3e:	f012 fd7f 	bl	3a740 <ull_conn_peer_connected>
   27c42:	2800      	cmp	r0, #0
   27c44:	f040 81b6 	bne.w	27fb4 <ll_create_connection+0x3bc>

#else /* !CONFIG_BT_CTLR_ADV_EXT */
	lll = &scan->lll;
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	if (lll->conn) {
   27c48:	6a2b      	ldr	r3, [r5, #32]
	lll = &scan->lll;
   27c4a:	f105 021c 	add.w	r2, r5, #28
   27c4e:	9207      	str	r2, [sp, #28]
	if (lll->conn) {
   27c50:	2b00      	cmp	r3, #0
   27c52:	d063      	beq.n	27d1c <ll_create_connection+0x124>
		conn_lll = lll->conn;
   27c54:	f8d5 9020 	ldr.w	r9, [r5, #32]
	conn->ull.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);

#if defined(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)
	/* Remember peer and own identity address */
	conn->peer_id_addr_type = peer_addr_type;
   27c58:	9b02      	ldr	r3, [sp, #8]
		conn = HDR_LLL2ULL(conn_lll);
   27c5a:	f8d9 4000 	ldr.w	r4, [r9]
	conn->peer_id_addr_type = peer_addr_type;
   27c5e:	f003 0a01 	and.w	sl, r3, #1
	lll_hdr_init(&conn->lll, conn);

conn_is_valid:
#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
						      conn_lll->phy_flags);
   27c62:	f899 0044 	ldrb.w	r0, [r9, #68]	; 0x44
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
   27c66:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   27c6a:	f000 0007 	and.w	r0, r0, #7
   27c6e:	f018 fd45 	bl	406fc <lll_radio_tx_ready_delay_get>
	max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
#endif /* CONFIG_BT_LL_SW_LLCP_LEGACY */

	conn->ull.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27c72:	f8b9 1040 	ldrh.w	r1, [r9, #64]	; 0x40
   27c76:	f8b9 3042 	ldrh.w	r3, [r9, #66]	; 0x42
   27c7a:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
   27c7e:	4401      	add	r1, r0
   27c80:	48d7      	ldr	r0, [pc, #860]	; (27fe0 <ll_create_connection+0x3e8>)
   27c82:	4419      	add	r1, r3
   27c84:	fba1 0100 	umull	r0, r1, r1, r0
   27c88:	a3d3      	add	r3, pc, #844	; (adr r3, 27fd8 <ll_create_connection+0x3e0>)
   27c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   27c8e:	f7fe fa37 	bl	26100 <__aeabi_uldivmod>
   27c92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
   27c96:	6120      	str	r0, [r4, #16]
				       max_tx_time +
				       EVENT_IFS_US +
				       max_rx_time);

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ull_filter_scan_update(filter_policy);
   27c98:	4630      	mov	r0, r6
   27c9a:	f017 fd29 	bl	3f6f0 <ull_filter_scan_update>

	lll->rl_idx = FILTER_IDX_NONE;
	lll->rpa_gen = 0;
   27c9e:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   27ca2:	f36f 0341 	bfc	r3, #1, #1
   27ca6:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
   27caa:	23ff      	movs	r3, #255	; 0xff
   27cac:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   27cb0:	2e00      	cmp	r6, #0
   27cb2:	f000 8172 	beq.w	27f9a <ll_create_connection+0x3a2>
		/* Look up the resolving list */
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
						 NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   27cb6:	f1a8 0302 	sub.w	r3, r8, #2
   27cba:	2b01      	cmp	r3, #1
   27cbc:	f240 817e 	bls.w	27fbc <ll_create_connection+0x3c4>
		own_addr_type &= 0x1;
		lll->rpa_gen = 1;
	}
#endif

	scan->own_addr_type = own_addr_type;
   27cc0:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
   27cc4:	9914      	ldr	r1, [sp, #80]	; 0x50
	scan->own_addr_type = own_addr_type;
   27cc6:	f368 0342 	bfi	r3, r8, #1, #2
   27cca:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
   27cce:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   27cd2:	f36a 0300 	bfi	r3, sl, #0, #1
   27cd6:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
   27cda:	2206      	movs	r2, #6
   27cdc:	f105 0024 	add.w	r0, r5, #36	; 0x24
   27ce0:	f024 f841 	bl	4bd66 <memcpy>
	lll->conn_timeout = timeout;
   27ce4:	9b04      	ldr	r3, [sp, #16]
   27ce6:	862b      	strh	r3, [r5, #48]	; 0x30

	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
   27ce8:	f105 001c 	add.w	r0, r5, #28
   27cec:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   27cf0:	2100      	movs	r1, #0
   27cf2:	9600      	str	r6, [sp, #0]
   27cf4:	f7ff f88c 	bl	26e10 <ull_scan_params_set>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	return 0;
#else /* !CONFIG_BT_CTLR_ADV_EXT */
	/* wait for stable clocks */
	err = lll_clock_wait();
   27cf8:	f018 fea8 	bl	40a4c <lll_clock_wait>
	if (err) {
   27cfc:	2800      	cmp	r0, #0
   27cfe:	f040 817b 	bne.w	27ff8 <ll_create_connection+0x400>
		conn_release(scan);

		return BT_HCI_ERR_HW_FAILURE;
	}

	return ull_scan_enable(scan);
   27d02:	4628      	mov	r0, r5
   27d04:	f7ff f8b0 	bl	26e68 <ull_scan_enable>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
}
   27d08:	b00b      	add	sp, #44	; 0x2c
   27d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
   27d0e:	2106      	movs	r1, #6
   27d10:	f00c f938 	bl	33f84 <mem_nz>
   27d14:	2800      	cmp	r0, #0
   27d16:	d18e      	bne.n	27c36 <ll_create_connection+0x3e>
		return BT_HCI_ERR_INVALID_PARAM;
   27d18:	2012      	movs	r0, #18
   27d1a:	e7f5      	b.n	27d08 <ll_create_connection+0x110>
	link = ll_rx_link_alloc();
   27d1c:	f00f ff4a 	bl	37bb4 <ll_rx_link_alloc>
	if (!link) {
   27d20:	9007      	str	r0, [sp, #28]
   27d22:	2800      	cmp	r0, #0
   27d24:	f000 81c1 	beq.w	280aa <ll_create_connection+0x4b2>
	conn = ll_conn_acquire();
   27d28:	f012 f994 	bl	3a054 <ll_conn_acquire>
	if (!conn) {
   27d2c:	4604      	mov	r4, r0
   27d2e:	2800      	cmp	r0, #0
   27d30:	f000 81b8 	beq.w	280a4 <ll_create_connection+0x4ac>
	err = util_aa_le32(conn_lll->access_addr);
   27d34:	3020      	adds	r0, #32
   27d36:	f00c facf 	bl	342d8 <util_aa_le32>
	conn_lll = &conn->lll;
   27d3a:	f104 091c 	add.w	r9, r4, #28
	LL_ASSERT(!err);
   27d3e:	2800      	cmp	r0, #0
   27d40:	f040 8183 	bne.w	2804a <ll_create_connection+0x452>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
   27d44:	2103      	movs	r1, #3
   27d46:	f104 0024 	add.w	r0, r4, #36	; 0x24
   27d4a:	f018 fb85 	bl	40458 <lll_csrand_get>
	if (!conn_lll->link_tx_free) {
   27d4e:	6f60      	ldr	r0, [r4, #116]	; 0x74
	conn_lll->latency = latency;
   27d50:	f8a4 b02c 	strh.w	fp, [r4, #44]	; 0x2c
	conn_lll->handle = 0xFFFF;
   27d54:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->interval = interval;
   27d58:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
	conn_lll->handle = 0xFFFF;
   27d5c:	8523      	strh	r3, [r4, #40]	; 0x28
	if (!conn_lll->link_tx_free) {
   27d5e:	2800      	cmp	r0, #0
   27d60:	f000 8180 	beq.w	28064 <ll_create_connection+0x46c>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   27d64:	f104 0164 	add.w	r1, r4, #100	; 0x64
   27d68:	f104 0268 	add.w	r2, r4, #104	; 0x68
   27d6c:	f00c f916 	bl	33f9c <memq_init>
	conn_lll->phy_tx = PHY_1M;
   27d70:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   27d74:	4a9b      	ldr	r2, [pc, #620]	; (27fe4 <ll_create_connection+0x3ec>)
	conn_lll->phy_tx = PHY_1M;
   27d76:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
   27d7a:	f023 0307 	bic.w	r3, r3, #7
   27d7e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   27d82:	f043 0301 	orr.w	r3, r3, #1
   27d86:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn_lll->sn = 0;
   27d8a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   27d8e:	f023 0307 	bic.w	r3, r3, #7
	conn_lll->link_tx_free = NULL;
   27d92:	f04f 0b00 	mov.w	fp, #0
	conn_lll->sn = 0;
   27d96:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   27d9a:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
   27d9e:	e9c4 3216 	strd	r3, r2, [r4, #88]	; 0x58
	conn_lll->link_tx_free = NULL;
   27da2:	f8c4 b074 	str.w	fp, [r4, #116]	; 0x74
	conn_lll->packet_tx_head_len = 0;
   27da6:	f8a4 b078 	strh.w	fp, [r4, #120]	; 0x78
	conn_lll->latency_prepare = 0;
   27daa:	f8c4 b02e 	str.w	fp, [r4, #46]	; 0x2e
	conn_lll->event_counter = 0;
   27dae:	f8a4 b032 	strh.w	fp, [r4, #50]	; 0x32
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
   27db2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   27db6:	f016 ff03 	bl	3ebc0 <ull_chan_map_get>
   27dba:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   27dbe:	f360 0305 	bfi	r3, r0, #0, #6
	lll_csrand_get(&hop, sizeof(uint8_t));
   27dc2:	2101      	movs	r1, #1
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
   27dc4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	lll_csrand_get(&hop, sizeof(uint8_t));
   27dc8:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   27dcc:	f018 fb44 	bl	40458 <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
   27dd0:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   27dd4:	4b84      	ldr	r3, [pc, #528]	; (27fe8 <ll_create_connection+0x3f0>)
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   27dd6:	f8dd c010 	ldr.w	ip, [sp, #16]
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27dda:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	conn_lll->data_chan_use = 0;
   27ddc:	f884 b03b 	strb.w	fp, [r4, #59]	; 0x3b
	conn_lll->data_chan_hop = 5 + (hop % 12);
   27de0:	fba3 1302 	umull	r1, r3, r3, r2
   27de4:	08db      	lsrs	r3, r3, #3
   27de6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   27dea:	eba2 0283 	sub.w	r2, r2, r3, lsl #2
	conn_lll->data_chan_sel = 0;
   27dee:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   27df2:	497e      	ldr	r1, [pc, #504]	; (27fec <ll_create_connection+0x3f4>)
	conn->supervision_expire = 0U;
   27df4:	f8a4 b0c4 	strh.w	fp, [r4, #196]	; 0xc4
	conn_lll->data_chan_sel = 0;
   27df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	conn_lll->data_chan_hop = 5 + (hop % 12);
   27dfc:	3205      	adds	r2, #5
	conn_lll->data_chan_sel = 0;
   27dfe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	conn_lll->central.initiated = 0;
   27e02:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	conn_lll->data_chan_hop = 5 + (hop % 12);
   27e06:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
   27e0a:	f240 42e2 	movw	r2, #1250	; 0x4e2
   27e0e:	fb02 f20a 	mul.w	r2, r2, sl
	conn_lll->central.initiated = 0;
   27e12:	f023 0303 	bic.w	r3, r3, #3
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   27e16:	4411      	add	r1, r2
	conn_lll->central.initiated = 0;
   27e18:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   27e1c:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27e20:	4b73      	ldr	r3, [pc, #460]	; (27ff0 <ll_create_connection+0x3f8>)
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   27e22:	f8a4 10c6 	strh.w	r1, [r4, #198]	; 0xc6
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   27e26:	f242 7110 	movw	r1, #10000	; 0x2710
   27e2a:	fb01 210c 	mla	r1, r1, ip, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27e2e:	4413      	add	r3, r2
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   27e30:	3901      	subs	r1, #1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27e32:	fbb3 f3f2 	udiv	r3, r3, r2
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   27e36:	fbb1 f2f2 	udiv	r2, r1, r2
   27e3a:	f8a4 20c2 	strh.w	r2, [r4, #194]	; 0xc2
	conn->connect_expire = CONN_ESTAB_COUNTDOWN;
   27e3e:	2206      	movs	r2, #6
   27e40:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27e44:	1d81      	adds	r1, r0, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27e46:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27e48:	428a      	cmp	r2, r1
	conn->procedure_expire = 0U;
   27e4a:	f8a4 b0c8 	strh.w	fp, [r4, #200]	; 0xc8
	conn->apto_expire = 0U;
   27e4e:	f8a4 b0d0 	strh.w	fp, [r4, #208]	; 0xd0
	conn->appto_expire = 0U;
   27e52:	f8a4 b0cc 	strh.w	fp, [r4, #204]	; 0xcc
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27e56:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27e5a:	dd02      	ble.n	27e62 <ll_create_connection+0x26a>
   27e5c:	3a06      	subs	r2, #6
   27e5e:	1a12      	subs	r2, r2, r0
   27e60:	b292      	uxth	r2, r2
	conn->common.fex_valid = 0U;
   27e62:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27e66:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
	conn->common.fex_valid = 0U;
   27e6a:	f023 0307 	bic.w	r3, r3, #7
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
   27e6e:	f04f 0b00 	mov.w	fp, #0
	conn->common.fex_valid = 0U;
   27e72:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	conn->peer_id_addr_type = peer_addr_type;
   27e76:	9b02      	ldr	r3, [sp, #8]
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
   27e78:	f884 b0f2 	strb.w	fp, [r4, #242]	; 0xf2
   27e7c:	f8a4 b0f0 	strh.w	fp, [r4, #240]	; 0xf0
	conn->llcp_rx = NULL;
   27e80:	f8c4 b114 	str.w	fp, [r4, #276]	; 0x114
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
   27e84:	f8a4 b118 	strh.w	fp, [r4, #280]	; 0x118
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
   27e88:	f8a4 b130 	strh.w	fp, [r4, #304]	; 0x130
	conn->peer_id_addr_type = peer_addr_type;
   27e8c:	f003 0a01 	and.w	sl, r3, #1
	conn->llcp_feature.features_conn = ll_feat_get();
   27e90:	f00f f94c 	bl	3712c <ll_feat_get>
	conn->llcp_terminate.node_rx.hdr.link = link;
   27e94:	9b07      	ldr	r3, [sp, #28]
   27e96:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   27e9a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
	conn->llcp_version.req = conn->llcp_version.ack = 0;
   27e9e:	f8a4 b148 	strh.w	fp, [r4, #328]	; 0x148
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   27ea2:	f023 0303 	bic.w	r3, r3, #3
   27ea6:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   27eaa:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_terminate.req = conn->llcp_terminate.ack = 0U;
   27eae:	f8a4 b150 	strh.w	fp, [r4, #336]	; 0x150
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   27eb2:	f023 0318 	bic.w	r3, r3, #24
   27eb6:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   27eba:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
	conn->llcp_terminate.reason_final = 0U;
   27ebe:	f884 b153 	strb.w	fp, [r4, #339]	; 0x153
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   27ec2:	f023 0307 	bic.w	r3, r3, #7
   27ec6:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
	conn->llcp_conn_param.disabled = 0U;
   27eca:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   27ece:	f8a4 b174 	strh.w	fp, [r4, #372]	; 0x174
	conn->llcp_conn_param.disabled = 0U;
   27ed2:	f36b 1345 	bfi	r3, fp, #5, #1
   27ed6:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
	conn->llcp_length.disabled = 0U;
   27eda:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
	conn->llcp_conn_param.req = 0U;
   27ede:	f8a4 b194 	strh.w	fp, [r4, #404]	; 0x194
	conn->llcp_length.disabled = 0U;
   27ee2:	f36b 03c3 	bfi	r3, fp, #3, #1
	conn->llcp_feature.features_peer = 0;
   27ee6:	2200      	movs	r2, #0
	conn->llcp_length.disabled = 0U;
   27ee8:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
	conn->llcp_feature.features_peer = 0;
   27eec:	2300      	movs	r3, #0
	conn->llcp_feature.features_conn = ll_feat_get();
   27eee:	e9c4 014e 	strd	r0, r1, [r4, #312]	; 0x138
	conn->llcp_feature.features_peer = 0;
   27ef2:	e9c4 2350 	strd	r2, r3, [r4, #320]	; 0x140
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
   27ef6:	f8a4 b1bc 	strh.w	fp, [r4, #444]	; 0x1bc
	conn->llcp_length.cache.tx_octets = 0U;
   27efa:	f8a4 b1c8 	strh.w	fp, [r4, #456]	; 0x1c8
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
   27efe:	f012 fc07 	bl	3a710 <ull_conn_default_tx_octets_get>
   27f02:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
	conn->default_tx_time = ull_conn_default_tx_time_get();
   27f06:	f012 fc09 	bl	3a71c <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   27f0a:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   27f0e:	4b39      	ldr	r3, [pc, #228]	; (27ff4 <ll_create_connection+0x3fc>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
   27f10:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   27f14:	4013      	ands	r3, r2
   27f16:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   27f1a:	f012 fc05 	bl	3a728 <ull_conn_default_phy_tx_get>
   27f1e:	f894 31d0 	ldrb.w	r3, [r4, #464]	; 0x1d0
   27f22:	f360 0302 	bfi	r3, r0, #0, #3
   27f26:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   27f2a:	f012 fc03 	bl	3a734 <ull_conn_default_phy_rx_get>
   27f2e:	f894 31d0 	ldrb.w	r3, [r4, #464]	; 0x1d0
	(void)memcpy(conn->peer_id_addr, peer_addr, sizeof(conn->peer_id_addr));
   27f32:	9914      	ldr	r1, [sp, #80]	; 0x50
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   27f34:	f8c4 b1d4 	str.w	fp, [r4, #468]	; 0x1d4
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   27f38:	f360 03c5 	bfi	r3, r0, #3, #3
   27f3c:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
	conn->peer_id_addr_type = peer_addr_type;
   27f40:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
	conn->ull.ticks_active_to_start = 0U;
   27f44:	f8c4 b004 	str.w	fp, [r4, #4]
	conn->peer_id_addr_type = peer_addr_type;
   27f48:	f36a 0341 	bfi	r3, sl, #1, #1
   27f4c:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	conn->ull.ticks_prepare_to_start =
   27f50:	2331      	movs	r3, #49	; 0x31
   27f52:	60a3      	str	r3, [r4, #8]
	(void)memcpy(conn->peer_id_addr, peer_addr, sizeof(conn->peer_id_addr));
   27f54:	2206      	movs	r2, #6
	conn->tx_data = conn->tx_data_last = 0;
   27f56:	e9c4 bb78 	strd	fp, fp, [r4, #480]	; 0x1e0
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   27f5a:	e9c4 bb76 	strd	fp, fp, [r4, #472]	; 0x1d8
	conn->ull.ticks_preempt_to_start =
   27f5e:	f8c4 b00c 	str.w	fp, [r4, #12]
	(void)memcpy(conn->peer_id_addr, peer_addr, sizeof(conn->peer_id_addr));
   27f62:	f104 00dd 	add.w	r0, r4, #221	; 0xdd
   27f66:	f023 fefe 	bl	4bd66 <memcpy>
	conn->own_id_addr_type = own_id_addr_type;
   27f6a:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
	(void)memcpy(conn->own_id_addr, own_id_addr, sizeof(conn->own_id_addr));
   27f6e:	9903      	ldr	r1, [sp, #12]
	conn->own_id_addr_type = own_id_addr_type;
   27f70:	f368 0300 	bfi	r3, r8, #0, #1
   27f74:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	(void)memcpy(conn->own_id_addr, own_id_addr, sizeof(conn->own_id_addr));
   27f78:	2206      	movs	r2, #6
   27f7a:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   27f7e:	f023 fef2 	bl	4bd66 <memcpy>
	lll->conn = conn_lll;
   27f82:	f8c5 9020 	str.w	r9, [r5, #32]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   27f86:	e9c4 bb05 	strd	fp, fp, [r4, #20]
	hdr->ref = 0U;
   27f8a:	f884 b000 	strb.w	fp, [r4]
   27f8e:	61e4      	str	r4, [r4, #28]

#if defined(CONFIG_BT_CTLR_JIT_SCHEDULING)
	hdr->score = 0U;
	hdr->latency = 0U;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */
}
   27f90:	e667      	b.n	27c62 <ll_create_connection+0x6a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   27f92:	200c      	movs	r0, #12
}
   27f94:	b00b      	add	sp, #44	; 0x2c
   27f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   27f9a:	f017 ffe9 	bl	3ff70 <ull_filter_lll_rl_enabled>
   27f9e:	2800      	cmp	r0, #0
   27fa0:	f43f ae89 	beq.w	27cb6 <ll_create_connection+0xbe>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
   27fa4:	9802      	ldr	r0, [sp, #8]
   27fa6:	9914      	ldr	r1, [sp, #80]	; 0x50
   27fa8:	4632      	mov	r2, r6
   27faa:	f017 fd15 	bl	3f9d8 <ull_filter_rl_find>
   27fae:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
   27fb2:	e680      	b.n	27cb6 <ll_create_connection+0xbe>
		return BT_HCI_ERR_CONN_ALREADY_EXISTS;
   27fb4:	200b      	movs	r0, #11
}
   27fb6:	b00b      	add	sp, #44	; 0x2c
   27fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ull_filter_rpa_update(false);
   27fbc:	2000      	movs	r0, #0
   27fbe:	f017 fbbb 	bl	3f738 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   27fc2:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   27fc6:	f043 0302 	orr.w	r3, r3, #2
	own_id_addr_type = (own_addr_type & 0x01);
   27fca:	46b8      	mov	r8, r7
		lll->rpa_gen = 1;
   27fcc:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
   27fd0:	e676      	b.n	27cc0 <ll_create_connection+0xc8>
   27fd2:	bf00      	nop
   27fd4:	f3af 8000 	nop.w
   27fd8:	1afd498d 	.word	0x1afd498d
   27fdc:	00000007 	.word	0x00000007
   27fe0:	3b9aca00 	.word	0x3b9aca00
   27fe4:	01480148 	.word	0x01480148
   27fe8:	aaaaaaab 	.word	0xaaaaaaab
   27fec:	026259ff 	.word	0x026259ff
   27ff0:	01c9c37f 	.word	0x01c9c37f
   27ff4:	f6ff0000 	.word	0xf6ff0000
	struct node_rx_pdu *cc;
	struct lll_conn *lll;
	struct ll_conn *conn;
	memq_link_t *link;

	lll = scan->lll.conn;
   27ff8:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(!lll->link_tx_free);
   27ffa:	6da3      	ldr	r3, [r4, #88]	; 0x58
   27ffc:	b163      	cbz	r3, 28018 <ll_create_connection+0x420>
   27ffe:	4a2c      	ldr	r2, [pc, #176]	; (280b0 <ll_create_connection+0x4b8>)
   28000:	492c      	ldr	r1, [pc, #176]	; (280b4 <ll_create_connection+0x4bc>)
   28002:	482d      	ldr	r0, [pc, #180]	; (280b8 <ll_create_connection+0x4c0>)
   28004:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
   28008:	f021 fd7e 	bl	49b08 <printk>
   2800c:	4040      	eors	r0, r0
   2800e:	f380 8811 	msr	BASEPRI, r0
   28012:	f04f 0003 	mov.w	r0, #3
   28016:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   28018:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   2801c:	f104 0048 	add.w	r0, r4, #72	; 0x48
   28020:	f00b ffc0 	bl	33fa4 <memq_deinit>
	LL_ASSERT(link);
   28024:	4606      	mov	r6, r0
   28026:	b308      	cbz	r0, 2806c <ll_create_connection+0x474>
	lll->link_tx_free = link;

	conn = HDR_LLL2ULL(lll);
   28028:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
   2802a:	65a6      	str	r6, [r4, #88]	; 0x58

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
   2802c:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
	LL_ASSERT(link);
   28030:	b354      	cbz	r4, 28088 <ll_create_connection+0x490>

	ll_rx_link_release(link);
   28032:	4620      	mov	r0, r4
   28034:	f00f fdc4 	bl	37bc0 <ll_rx_link_release>

	ll_conn_release(conn);
   28038:	4638      	mov	r0, r7
   2803a:	f012 f811 	bl	3a060 <ll_conn_release>
	scan->lll.conn = NULL;
   2803e:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
   28040:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
   28042:	622b      	str	r3, [r5, #32]
}
   28044:	b00b      	add	sp, #44	; 0x2c
   28046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
   2804a:	4a19      	ldr	r2, [pc, #100]	; (280b0 <ll_create_connection+0x4b8>)
   2804c:	491b      	ldr	r1, [pc, #108]	; (280bc <ll_create_connection+0x4c4>)
   2804e:	481a      	ldr	r0, [pc, #104]	; (280b8 <ll_create_connection+0x4c0>)
   28050:	23bf      	movs	r3, #191	; 0xbf
   28052:	f021 fd59 	bl	49b08 <printk>
   28056:	4040      	eors	r0, r0
   28058:	f380 8811 	msr	BASEPRI, r0
   2805c:	f04f 0003 	mov.w	r0, #3
   28060:	df02      	svc	2
   28062:	e66f      	b.n	27d44 <ll_create_connection+0x14c>
		conn_lll->link_tx_free = &conn_lll->link_tx;
   28064:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   28068:	6760      	str	r0, [r4, #116]	; 0x74
   2806a:	e67b      	b.n	27d64 <ll_create_connection+0x16c>
	LL_ASSERT(link);
   2806c:	4a10      	ldr	r2, [pc, #64]	; (280b0 <ll_create_connection+0x4b8>)
   2806e:	4914      	ldr	r1, [pc, #80]	; (280c0 <ll_create_connection+0x4c8>)
   28070:	4811      	ldr	r0, [pc, #68]	; (280b8 <ll_create_connection+0x4c0>)
   28072:	f240 43ba 	movw	r3, #1210	; 0x4ba
   28076:	f021 fd47 	bl	49b08 <printk>
   2807a:	4040      	eors	r0, r0
   2807c:	f380 8811 	msr	BASEPRI, r0
   28080:	f04f 0003 	mov.w	r0, #3
   28084:	df02      	svc	2
   28086:	e7cf      	b.n	28028 <ll_create_connection+0x430>
	LL_ASSERT(link);
   28088:	4a09      	ldr	r2, [pc, #36]	; (280b0 <ll_create_connection+0x4b8>)
   2808a:	490d      	ldr	r1, [pc, #52]	; (280c0 <ll_create_connection+0x4c8>)
   2808c:	480a      	ldr	r0, [pc, #40]	; (280b8 <ll_create_connection+0x4c0>)
   2808e:	f240 43c1 	movw	r3, #1217	; 0x4c1
   28092:	f021 fd39 	bl	49b08 <printk>
   28096:	4040      	eors	r0, r0
   28098:	f380 8811 	msr	BASEPRI, r0
   2809c:	f04f 0003 	mov.w	r0, #3
   280a0:	df02      	svc	2
   280a2:	e7c6      	b.n	28032 <ll_create_connection+0x43a>
		ll_rx_link_release(link);
   280a4:	9807      	ldr	r0, [sp, #28]
   280a6:	f00f fd8b 	bl	37bc0 <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   280aa:	2007      	movs	r0, #7
   280ac:	e62c      	b.n	27d08 <ll_create_connection+0x110>
   280ae:	bf00      	nop
   280b0:	00053370 	.word	0x00053370
   280b4:	00052ff8 	.word	0x00052ff8
   280b8:	00052bbc 	.word	0x00052bbc
   280bc:	00052d98 	.word	0x00052d98
   280c0:	00053124 	.word	0x00053124
   280c4:	00000000 	.word	0x00000000

000280c8 <ull_central_setup>:
{
   280c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	peer_addr_type = pdu_tx->rx_addr;
   280cc:	4607      	mov	r7, r0
{
   280ce:	b08d      	sub	sp, #52	; 0x34
   280d0:	4604      	mov	r4, r0
	peer_addr_type = pdu_tx->rx_addr;
   280d2:	f817 9f1c 	ldrb.w	r9, [r7, #28]!
{
   280d6:	460e      	mov	r6, r1
   280d8:	4615      	mov	r5, r2
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
   280da:	f100 0124 	add.w	r1, r0, #36	; 0x24
   280de:	2206      	movs	r2, #6
   280e0:	a80a      	add	r0, sp, #40	; 0x28
   280e2:	f023 fe40 	bl	4bd66 <memcpy>
	chan_sel = pdu_tx->chan_sel;
   280e6:	f894 801c 	ldrb.w	r8, [r4, #28]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   280ea:	07fb      	lsls	r3, r7, #31
	peer_addr_type = pdu_tx->rx_addr;
   280ec:	f3c9 19c0 	ubfx	r9, r9, #7, #1
	chan_sel = pdu_tx->chan_sel;
   280f0:	f3c8 1840 	ubfx	r8, r8, #5, #1
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   280f4:	f100 80fb 	bmi.w	282ee <ull_central_setup+0x226>
	cc->status = 0U;
   280f8:	2300      	movs	r3, #0
   280fa:	83a3      	strh	r3, [r4, #28]
	if (ftr->lrpa_used) {
   280fc:	7cb1      	ldrb	r1, [r6, #18]
	uint8_t rl_idx = ftr->rl_idx;
   280fe:	7c77      	ldrb	r7, [r6, #17]
	if (ftr->lrpa_used) {
   28100:	f011 0101 	ands.w	r1, r1, #1
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
   28104:	f104 002b 	add.w	r0, r4, #43	; 0x2b
   28108:	f04f 0206 	mov.w	r2, #6
	if (ftr->lrpa_used) {
   2810c:	f000 80d9 	beq.w	282c2 <ull_central_setup+0x1fa>
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
   28110:	f104 011e 	add.w	r1, r4, #30
   28114:	f023 fe27 	bl	4bd66 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
   28118:	2fff      	cmp	r7, #255	; 0xff
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
   2811a:	f104 0b25 	add.w	fp, r4, #37	; 0x25
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
   2811e:	f104 0a1f 	add.w	sl, r4, #31
	if (rl_idx != FILTER_IDX_NONE) {
   28122:	f000 80d7 	beq.w	282d4 <ull_central_setup+0x20c>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
   28126:	4652      	mov	r2, sl
   28128:	4638      	mov	r0, r7
   2812a:	f104 011e 	add.w	r1, r4, #30
   2812e:	f016 ff9d 	bl	3f06c <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
   28132:	7fa3      	ldrb	r3, [r4, #30]
   28134:	3302      	adds	r3, #2
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
   28136:	a90a      	add	r1, sp, #40	; 0x28
   28138:	4658      	mov	r0, fp
		cc->peer_addr_type += 2;
   2813a:	77a3      	strb	r3, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
   2813c:	2206      	movs	r2, #6
   2813e:	f023 fe12 	bl	4bd66 <memcpy>
	scan = HDR_LLL2ULL(ftr->param);
   28142:	6833      	ldr	r3, [r6, #0]
   28144:	f8d3 9000 	ldr.w	r9, [r3]
	cc->interval = lll->interval;
   28148:	f8d5 300e 	ldr.w	r3, [r5, #14]
   2814c:	f8c4 3032 	str.w	r3, [r4, #50]	; 0x32
	cc->timeout = scan->lll.conn_timeout;
   28150:	f8b9 3030 	ldrh.w	r3, [r9, #48]	; 0x30
   28154:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->sca = lll_clock_sca_local_get();
   28156:	f018 fcc9 	bl	40aec <lll_clock_sca_local_get>
   2815a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	conn = lll->hdr.parent;
   2815e:	682f      	ldr	r7, [r5, #0]
	lll->handle = ll_conn_handle_get(conn);
   28160:	4638      	mov	r0, r7
   28162:	f011 ff83 	bl	3a06c <ll_conn_handle_get>
		rx_csa = (void *)ftr->extra;
   28166:	f8d6 a004 	ldr.w	sl, [r6, #4]
	lll->handle = ll_conn_handle_get(conn);
   2816a:	81a8      	strh	r0, [r5, #12]
		ll_rx_put(link, rx);
   2816c:	4621      	mov	r1, r4
	rx->handle = lll->handle;
   2816e:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
   28170:	6820      	ldr	r0, [r4, #0]
   28172:	f00f fd37 	bl	37be4 <ll_rx_put>
		rx->handle = lll->handle;
   28176:	89ab      	ldrh	r3, [r5, #12]
   28178:	f8aa 3006 	strh.w	r3, [sl, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   2817c:	231b      	movs	r3, #27
		link = rx->link;
   2817e:	f8da 4000 	ldr.w	r4, [sl]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   28182:	f88a 3004 	strb.w	r3, [sl, #4]
		if (chan_sel) {
   28186:	f1b8 0f00 	cmp.w	r8, #0
   2818a:	f040 80be 	bne.w	2830a <ull_central_setup+0x242>
	ll_rx_put(link, rx);
   2818e:	4651      	mov	r1, sl
   28190:	4620      	mov	r0, r4
			cs->csa = 0x00;
   28192:	f88a 801c 	strb.w	r8, [sl, #28]
	ll_rx_put(link, rx);
   28196:	f00f fd25 	bl	37be4 <ll_rx_put>
	ll_rx_sched();
   2819a:	f00f fd2d 	bl	37bf8 <ll_rx_sched>
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
   2819e:	68ba      	ldr	r2, [r7, #8]
   281a0:	687b      	ldr	r3, [r7, #4]
						      lll->phy_flags);
   281a2:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   281a6:	f8b5 800e 	ldrh.w	r8, [r5, #14]
	conn_offset_us = ftr->radio_end_us;
   281aa:	68f4      	ldr	r4, [r6, #12]
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
   281ac:	429a      	cmp	r2, r3
   281ae:	bf38      	it	cc
   281b0:	461a      	movcc	r2, r3
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
   281b2:	f3c0 01c0 	ubfx	r1, r0, #3, #1
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   281b6:	f240 43e2 	movw	r3, #1250	; 0x4e2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
   281ba:	f000 0007 	and.w	r0, r0, #7
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   281be:	fb03 f808 	mul.w	r8, r3, r8
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
   281c2:	4692      	mov	sl, r2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
   281c4:	f018 fa9a 	bl	406fc <lll_radio_tx_ready_delay_get>
	conn_offset_us += EVENT_TICKER_RES_MARGIN_US;
   281c8:	3420      	adds	r4, #32
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   281ca:	2200      	movs	r2, #0
   281cc:	2102      	movs	r1, #2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
   281ce:	1a24      	subs	r4, r4, r0
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   281d0:	2001      	movs	r0, #1
   281d2:	f00b ff33 	bl	3403c <mayfly_enable>
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
   281d6:	4648      	mov	r0, r9
   281d8:	f011 f826 	bl	39228 <ull_scan_handle_get>
   281dc:	1d02      	adds	r2, r0, #4
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   281de:	4b52      	ldr	r3, [pc, #328]	; (28328 <ull_central_setup+0x260>)
   281e0:	f8cd 9000 	str.w	r9, [sp]
   281e4:	b2d2      	uxtb	r2, r2
   281e6:	2101      	movs	r1, #1
   281e8:	2000      	movs	r0, #0
   281ea:	f00d fa2d 	bl	35648 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   281ee:	f030 0302 	bics.w	r3, r0, #2
   281f2:	d00c      	beq.n	2820e <ull_central_setup+0x146>
   281f4:	4a4d      	ldr	r2, [pc, #308]	; (2832c <ull_central_setup+0x264>)
   281f6:	494e      	ldr	r1, [pc, #312]	; (28330 <ull_central_setup+0x268>)
   281f8:	484e      	ldr	r0, [pc, #312]	; (28334 <ull_central_setup+0x26c>)
   281fa:	f240 33c9 	movw	r3, #969	; 0x3c9
   281fe:	f021 fc83 	bl	49b08 <printk>
   28202:	4040      	eors	r0, r0
   28204:	f380 8811 	msr	BASEPRI, r0
   28208:	f04f 0003 	mov.w	r0, #3
   2820c:	df02      	svc	2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   2820e:	f04f 0900 	mov.w	r9, #0
   28212:	464b      	mov	r3, r9
   28214:	2203      	movs	r2, #3
   28216:	2101      	movs	r1, #1
   28218:	f8cd 9000 	str.w	r9, [sp]
   2821c:	4648      	mov	r0, r9
   2821e:	f00d fa13 	bl	35648 <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   28222:	4638      	mov	r0, r7
   28224:	f011 ff22 	bl	3a06c <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   28228:	68b6      	ldr	r6, [r6, #8]
   2822a:	3e09      	subs	r6, #9
   2822c:	eba6 060a 	sub.w	r6, r6, sl
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   28230:	f8df a104 	ldr.w	sl, [pc, #260]	; 28338 <ull_central_setup+0x270>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   28234:	4605      	mov	r5, r0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   28236:	a33a      	add	r3, pc, #232	; (adr r3, 28320 <ull_central_setup+0x258>)
   28238:	e9d3 2300 	ldrd	r2, r3, [r3]
   2823c:	fba8 010a 	umull	r0, r1, r8, sl
   28240:	f7fd ff5e 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
   28244:	4619      	mov	r1, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   28246:	4b3d      	ldr	r3, [pc, #244]	; (2833c <ull_central_setup+0x274>)
   28248:	9307      	str	r3, [sp, #28]
   2824a:	4b3d      	ldr	r3, [pc, #244]	; (28340 <ull_central_setup+0x278>)
   2824c:	9305      	str	r3, [sp, #20]
   2824e:	f240 33f9 	movw	r3, #1017	; 0x3f9
   28252:	9706      	str	r7, [sp, #24]
   28254:	9308      	str	r3, [sp, #32]
   28256:	693b      	ldr	r3, [r7, #16]
   28258:	4680      	mov	r8, r0
   2825a:	e9cd 9303 	strd	r9, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   2825e:	4610      	mov	r0, r2
   28260:	2300      	movs	r3, #0
   28262:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28266:	f7fd ff4b 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   2826a:	a32d      	add	r3, pc, #180	; (adr r3, 28320 <ull_central_setup+0x258>)
   2826c:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   28270:	e9cd 8001 	strd	r8, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   28274:	fba4 010a 	umull	r0, r1, r4, sl
   28278:	f7fd ff42 	bl	26100 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   2827c:	3505      	adds	r5, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   2827e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   28282:	b2ed      	uxtb	r5, r5
   28284:	9000      	str	r0, [sp, #0]
   28286:	4633      	mov	r3, r6
   28288:	462a      	mov	r2, r5
   2828a:	2101      	movs	r1, #1
   2828c:	4648      	mov	r0, r9
   2828e:	f00d f94f 	bl	35530 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   28292:	f030 0302 	bics.w	r3, r0, #2
   28296:	d00c      	beq.n	282b2 <ull_central_setup+0x1ea>
   28298:	4a24      	ldr	r2, [pc, #144]	; (2832c <ull_central_setup+0x264>)
   2829a:	4925      	ldr	r1, [pc, #148]	; (28330 <ull_central_setup+0x268>)
   2829c:	4825      	ldr	r0, [pc, #148]	; (28334 <ull_central_setup+0x26c>)
   2829e:	f240 33fa 	movw	r3, #1018	; 0x3fa
   282a2:	f021 fc31 	bl	49b08 <printk>
   282a6:	4040      	eors	r0, r0
   282a8:	f380 8811 	msr	BASEPRI, r0
   282ac:	f04f 0003 	mov.w	r0, #3
   282b0:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
   282b2:	2201      	movs	r2, #1
   282b4:	2102      	movs	r1, #2
   282b6:	4610      	mov	r0, r2
   282b8:	f00b fec0 	bl	3403c <mayfly_enable>
}
   282bc:	b00d      	add	sp, #52	; 0x34
   282be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
   282c2:	f023 fd5b 	bl	4bd7c <memset>
	if (rl_idx != FILTER_IDX_NONE) {
   282c6:	2fff      	cmp	r7, #255	; 0xff
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
   282c8:	f104 0b25 	add.w	fp, r4, #37	; 0x25
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
   282cc:	f104 0a1f 	add.w	sl, r4, #31
	if (rl_idx != FILTER_IDX_NONE) {
   282d0:	f47f af29 	bne.w	28126 <ull_central_setup+0x5e>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
   282d4:	4658      	mov	r0, fp
   282d6:	2206      	movs	r2, #6
   282d8:	2100      	movs	r1, #0
   282da:	f023 fd4f 	bl	4bd7c <memset>
		cc->peer_addr_type = peer_addr_type;
   282de:	f884 901e 	strb.w	r9, [r4, #30]
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
   282e2:	a90a      	add	r1, sp, #40	; 0x28
   282e4:	4650      	mov	r0, sl
   282e6:	2206      	movs	r2, #6
   282e8:	f023 fd3d 	bl	4bd66 <memcpy>
   282ec:	e729      	b.n	28142 <ull_central_setup+0x7a>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   282ee:	4a0f      	ldr	r2, [pc, #60]	; (2832c <ull_central_setup+0x264>)
   282f0:	4914      	ldr	r1, [pc, #80]	; (28344 <ull_central_setup+0x27c>)
   282f2:	4810      	ldr	r0, [pc, #64]	; (28334 <ull_central_setup+0x26c>)
   282f4:	f44f 7352 	mov.w	r3, #840	; 0x348
   282f8:	f021 fc06 	bl	49b08 <printk>
   282fc:	4040      	eors	r0, r0
   282fe:	f380 8811 	msr	BASEPRI, r0
   28302:	f04f 0003 	mov.w	r0, #3
   28306:	df02      	svc	2
   28308:	e6f6      	b.n	280f8 <ull_central_setup+0x30>
			lll->data_chan_sel = 1;
   2830a:	7f6b      	ldrb	r3, [r5, #29]
   2830c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   28310:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   28312:	1d28      	adds	r0, r5, #4
   28314:	f016 fca8 	bl	3ec68 <lll_chan_id>
   28318:	f04f 0801 	mov.w	r8, #1
   2831c:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
   2831e:	e736      	b.n	2818e <ull_central_setup+0xc6>
   28320:	1afd498d 	.word	0x1afd498d
   28324:	00000007 	.word	0x00000007
   28328:	0003e465 	.word	0x0003e465
   2832c:	00053370 	.word	0x00053370
   28330:	000531ac 	.word	0x000531ac
   28334:	00052bbc 	.word	0x00052bbc
   28338:	3b9aca00 	.word	0x3b9aca00
   2833c:	0003e469 	.word	0x0003e469
   28340:	0003e499 	.word	0x0003e499
   28344:	00052ccc 	.word	0x00052ccc

00028348 <ull_sched_after_mstr_slot_get>:
}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

void ull_sched_after_mstr_slot_get(uint8_t user_id, uint32_t ticks_slot_abs,
				   uint32_t *ticks_anchor, uint32_t *us_offset)
{
   28348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2834c:	b08d      	sub	sp, #52	; 0x34
   2834e:	461d      	mov	r5, r3
   28350:	9307      	str	r3, [sp, #28]
	uint8_t ticker_id_prev;
	uint8_t ticker_id;

	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);

	ticker_id = ticker_id_prev = 0xff;
   28352:	f04f 0bff 	mov.w	fp, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
   28356:	2300      	movs	r3, #0
{
   28358:	4616      	mov	r6, r2
   2835a:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 28450 <ull_sched_after_mstr_slot_get+0x108>
	ticker_id = ticker_id_prev = 0xff;
   2835e:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
   28362:	1d0a      	adds	r2, r1, #4
{
   28364:	4604      	mov	r4, r0
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
   28366:	9206      	str	r2, [sp, #24]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
   28368:	602b      	str	r3, [r5, #0]
   2836a:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_slot_abs_prev = 0U;
   2836c:	469a      	mov	sl, r3
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
   2836e:	9304      	str	r3, [sp, #16]
   28370:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
   28374:	af0a      	add	r7, sp, #40	; 0x28
		uint32_t volatile ret_cb;
		struct ll_conn *conn;
		uint32_t ret;
		bool success;

		ret_cb = TICKER_STATUS_BUSY;
   28376:	2502      	movs	r5, #2
					       NULL, /* lazy */
					       ticker_match_op_cb,
					       NULL, /* match_op_context */
					       ticker_op_cb, (void *)&ret_cb);
#else
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
   28378:	e9cd 9801 	strd	r9, r8, [sp, #4]
   2837c:	9700      	str	r7, [sp, #0]
   2837e:	4633      	mov	r3, r6
   28380:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   28384:	4621      	mov	r1, r4
   28386:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   28388:	950b      	str	r5, [sp, #44]	; 0x2c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
   2838a:	f00d f99f 	bl	356cc <ticker_next_slot_get>
					   &ticker_id, ticks_anchor,
					   &ticks_to_expire,
					   ticker_op_cb, (void *)&ret_cb);
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */
		if (ret == TICKER_STATUS_BUSY) {
   2838e:	2802      	cmp	r0, #2
   28390:	d02c      	beq.n	283ec <ull_sched_after_mstr_slot_get+0xa4>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
						 user_id);
			}
		}

		success = (ret_cb == TICKER_STATUS_SUCCESS);
   28392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		LL_ASSERT(success);
   28394:	bb83      	cbnz	r3, 283f8 <ull_sched_after_mstr_slot_get+0xb0>

		if (ticker_id == 0xff) {
   28396:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   2839a:	28ff      	cmp	r0, #255	; 0xff
   2839c:	d03c      	beq.n	28418 <ull_sched_after_mstr_slot_get+0xd0>
			break;
		}

#if !defined(CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH)
		if ((ticker_id < TICKER_ID_CONN_BASE) ||
   2839e:	3805      	subs	r0, #5
   283a0:	b2c3      	uxtb	r3, r0
   283a2:	2b05      	cmp	r3, #5
   283a4:	d8e8      	bhi.n	28378 <ull_sched_after_mstr_slot_get+0x30>
		    (ticker_id > TICKER_ID_CONN_LAST)) {
			continue;
		}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
   283a6:	b280      	uxth	r0, r0
   283a8:	f011 fe68 	bl	3a07c <ll_conn_get>
		if (conn && !conn->lll.role) {
   283ac:	2800      	cmp	r0, #0
   283ae:	d0e2      	beq.n	28376 <ull_sched_after_mstr_slot_get+0x2e>
   283b0:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   283b4:	2b00      	cmp	r3, #0
   283b6:	dbde      	blt.n	28376 <ull_sched_after_mstr_slot_get+0x2e>
			}
#endif

			ticks_slot_abs_curr += conn->ull.ticks_slot;

			if ((ticker_id_prev != 0xff) &&
   283b8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_abs_curr += conn->ull.ticks_slot;
   283bc:	6903      	ldr	r3, [r0, #16]
			uint32_t ticks_to_expire_normal = ticks_to_expire;
   283be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			if ((ticker_id_prev != 0xff) &&
   283c0:	d00a      	beq.n	283d8 <ull_sched_after_mstr_slot_get+0x90>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
   283c2:	9904      	ldr	r1, [sp, #16]
   283c4:	9305      	str	r3, [sp, #20]
   283c6:	4628      	mov	r0, r5
   283c8:	f00d f9e0 	bl	3578c <ticker_ticks_diff_get>
						   ticks_to_expire_prev) >
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
   283cc:	9b06      	ldr	r3, [sp, #24]
   283ce:	eb0a 0203 	add.w	r2, sl, r3
			if ((ticker_id_prev != 0xff) &&
   283d2:	4290      	cmp	r0, r2
   283d4:	9b05      	ldr	r3, [sp, #20]
   283d6:	d822      	bhi.n	2841e <ull_sched_after_mstr_slot_get+0xd6>
				break;
			}

			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
   283d8:	9504      	str	r5, [sp, #16]
			ticker_id_prev = ticker_id;
   283da:	f89d b027 	ldrb.w	fp, [sp, #39]	; 0x27
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   283de:	469a      	mov	sl, r3
		ret_cb = TICKER_STATUS_BUSY;
   283e0:	2502      	movs	r5, #2
   283e2:	e7c9      	b.n	28378 <ull_sched_after_mstr_slot_get+0x30>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
   283e4:	4621      	mov	r1, r4
   283e6:	2000      	movs	r0, #0
   283e8:	f00d f9b6 	bl	35758 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   283ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   283ee:	2b02      	cmp	r3, #2
   283f0:	d0f8      	beq.n	283e4 <ull_sched_after_mstr_slot_get+0x9c>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   283f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		LL_ASSERT(success);
   283f4:	2b00      	cmp	r3, #0
   283f6:	d0ce      	beq.n	28396 <ull_sched_after_mstr_slot_get+0x4e>
   283f8:	4a16      	ldr	r2, [pc, #88]	; (28454 <ull_sched_after_mstr_slot_get+0x10c>)
   283fa:	4917      	ldr	r1, [pc, #92]	; (28458 <ull_sched_after_mstr_slot_get+0x110>)
   283fc:	4817      	ldr	r0, [pc, #92]	; (2845c <ull_sched_after_mstr_slot_get+0x114>)
   283fe:	2373      	movs	r3, #115	; 0x73
   28400:	f021 fb82 	bl	49b08 <printk>
   28404:	4040      	eors	r0, r0
   28406:	f380 8811 	msr	BASEPRI, r0
   2840a:	f04f 0003 	mov.w	r0, #3
   2840e:	df02      	svc	2
		if (ticker_id == 0xff) {
   28410:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   28414:	28ff      	cmp	r0, #255	; 0xff
   28416:	d1c2      	bne.n	2839e <ull_sched_after_mstr_slot_get+0x56>
		}
	}

	if (ticker_id_prev != 0xff) {
   28418:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   2841c:	d00f      	beq.n	2843e <ull_sched_after_mstr_slot_get+0xf6>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
   2841e:	9b04      	ldr	r3, [sp, #16]
   28420:	480f      	ldr	r0, [pc, #60]	; (28460 <ull_sched_after_mstr_slot_get+0x118>)
   28422:	4453      	add	r3, sl
   28424:	fba3 0200 	umull	r0, r2, r3, r0
   28428:	2107      	movs	r1, #7
   2842a:	fb01 2103 	mla	r1, r1, r3, r2
   2842e:	a306      	add	r3, pc, #24	; (adr r3, 28448 <ull_sched_after_mstr_slot_get+0x100>)
   28430:	e9d3 2300 	ldrd	r2, r3, [r3]
   28434:	f7fd fe64 	bl	26100 <__aeabi_uldivmod>
   28438:	9b07      	ldr	r3, [sp, #28]
						    ticks_slot_abs_prev) +
   2843a:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
   2843c:	6018      	str	r0, [r3, #0]
						    (EVENT_JITTER_US << 3);
	}
}
   2843e:	b00d      	add	sp, #52	; 0x34
   28440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28444:	f3af 8000 	nop.w
   28448:	3b9aca00 	.word	0x3b9aca00
   2844c:	00000000 	.word	0x00000000
   28450:	0003e83d 	.word	0x0003e83d
   28454:	000533bc 	.word	0x000533bc
   28458:	00053400 	.word	0x00053400
   2845c:	00052bbc 	.word	0x00052bbc
   28460:	1afd498d 	.word	0x1afd498d
   28464:	00000000 	.word	0x00000000

00028468 <after_mstr_offset_get>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

static void after_mstr_offset_get(uint16_t conn_interval, uint32_t ticks_slot,
				  uint32_t ticks_anchor,
				  uint32_t *win_offset_us)
{
   28468:	b570      	push	{r4, r5, r6, lr}
   2846a:	b082      	sub	sp, #8
   2846c:	461c      	mov	r4, r3
	uint32_t ticks_anchor_offset = ticks_anchor;
   2846e:	9201      	str	r2, [sp, #4]
{
   28470:	4615      	mov	r5, r2
   28472:	4606      	mov	r6, r0

	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
   28474:	aa01      	add	r2, sp, #4
   28476:	2002      	movs	r0, #2
   28478:	f7ff ff66 	bl	28348 <ull_sched_after_mstr_slot_get>
				      &ticks_anchor_offset, win_offset_us);

	if (!*win_offset_us) {
   2847c:	6823      	ldr	r3, [r4, #0]
   2847e:	b30b      	cbz	r3, 284c4 <after_mstr_offset_get+0x5c>
		return;
	}

	if ((ticks_anchor_offset - ticks_anchor) & BIT(HAL_TICKER_CNTR_MSBIT)) {
   28480:	9801      	ldr	r0, [sp, #4]
   28482:	1b43      	subs	r3, r0, r5
   28484:	021b      	lsls	r3, r3, #8
   28486:	d41f      	bmi.n	284c8 <after_mstr_offset_get+0x60>
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
			ticker_ticks_diff_get(ticks_anchor,
					      ticks_anchor_offset));
	} else {
		*win_offset_us += HAL_TICKER_TICKS_TO_US(
   28488:	4629      	mov	r1, r5
   2848a:	f00d f97f 	bl	3578c <ticker_ticks_diff_get>
   2848e:	4a1a      	ldr	r2, [pc, #104]	; (284f8 <after_mstr_offset_get+0x90>)
   28490:	4603      	mov	r3, r0
   28492:	2107      	movs	r1, #7
   28494:	fba0 0202 	umull	r0, r2, r0, r2
   28498:	fb01 2103 	mla	r1, r1, r3, r2
   2849c:	a314      	add	r3, pc, #80	; (adr r3, 284f0 <after_mstr_offset_get+0x88>)
   2849e:	e9d3 2300 	ldrd	r2, r3, [r3]
   284a2:	f7fd fe2d 	bl	26100 <__aeabi_uldivmod>
   284a6:	6822      	ldr	r2, [r4, #0]
   284a8:	4402      	add	r2, r0
			ticker_ticks_diff_get(ticks_anchor_offset,
					      ticks_anchor));
	}

	if ((*win_offset_us & BIT(31)) == 0) {
   284aa:	2a00      	cmp	r2, #0
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
   284ac:	6022      	str	r2, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
   284ae:	db09      	blt.n	284c4 <after_mstr_offset_get+0x5c>
		uint32_t conn_interval_us = conn_interval * CONN_INT_UNIT_US;
   284b0:	f240 43e2 	movw	r3, #1250	; 0x4e2
   284b4:	fb03 f006 	mul.w	r0, r3, r6

		while (*win_offset_us > conn_interval_us) {
   284b8:	4290      	cmp	r0, r2
   284ba:	d203      	bcs.n	284c4 <after_mstr_offset_get+0x5c>
			*win_offset_us -= conn_interval_us;
   284bc:	1a12      	subs	r2, r2, r0
		while (*win_offset_us > conn_interval_us) {
   284be:	4282      	cmp	r2, r0
   284c0:	d8fc      	bhi.n	284bc <after_mstr_offset_get+0x54>
   284c2:	6022      	str	r2, [r4, #0]
		}
	}
}
   284c4:	b002      	add	sp, #8
   284c6:	bd70      	pop	{r4, r5, r6, pc}
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
   284c8:	4601      	mov	r1, r0
   284ca:	4628      	mov	r0, r5
   284cc:	f00d f95e 	bl	3578c <ticker_ticks_diff_get>
   284d0:	4a09      	ldr	r2, [pc, #36]	; (284f8 <after_mstr_offset_get+0x90>)
   284d2:	4603      	mov	r3, r0
   284d4:	2107      	movs	r1, #7
   284d6:	fba0 0202 	umull	r0, r2, r0, r2
   284da:	fb01 2103 	mla	r1, r1, r3, r2
   284de:	a304      	add	r3, pc, #16	; (adr r3, 284f0 <after_mstr_offset_get+0x88>)
   284e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   284e4:	f7fd fe0c 	bl	26100 <__aeabi_uldivmod>
   284e8:	6822      	ldr	r2, [r4, #0]
   284ea:	1a12      	subs	r2, r2, r0
   284ec:	e7dd      	b.n	284aa <after_mstr_offset_get+0x42>
   284ee:	bf00      	nop
   284f0:	3b9aca00 	.word	0x3b9aca00
   284f4:	00000000 	.word	0x00000000
   284f8:	1afd498d 	.word	0x1afd498d
   284fc:	00000000 	.word	0x00000000

00028500 <ull_sched_mfy_win_offset_select>:
{
   28500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   28504:	f8b0 11a4 	ldrh.w	r1, [r0, #420]	; 0x1a4
{
   28508:	b089      	sub	sp, #36	; 0x24
   2850a:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   2850c:	f240 43e2 	movw	r3, #1250	; 0x4e2
   28510:	483d      	ldr	r0, [pc, #244]	; (28608 <ull_sched_mfy_win_offset_select+0x108>)
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
   28512:	2600      	movs	r6, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   28514:	fb03 f101 	mul.w	r1, r3, r1
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
   28518:	ad05      	add	r5, sp, #20
	uint8_t offset_m_max = OFFSET_M_MAX;
   2851a:	2306      	movs	r3, #6
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
   2851c:	e9c5 6601 	strd	r6, r6, [r5, #4]
	uint8_t offset_m_max = OFFSET_M_MAX;
   28520:	f88d 300f 	strb.w	r3, [sp, #15]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   28524:	fba1 0100 	umull	r0, r1, r1, r0
   28528:	a335      	add	r3, pc, #212	; (adr r3, 28600 <ull_sched_mfy_win_offset_select+0x100>)
   2852a:	e9d3 2300 	ldrd	r2, r3, [r3]
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
   2852e:	9605      	str	r6, [sp, #20]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   28530:	f7fd fde6 	bl	26100 <__aeabi_uldivmod>
	win_offset_calc(conn, 1, &ticks_to_offset,
   28534:	f10d 030f 	add.w	r3, sp, #15
   28538:	9501      	str	r5, [sp, #4]
   2853a:	9300      	str	r3, [sp, #0]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   2853c:	9004      	str	r0, [sp, #16]
	win_offset_calc(conn, 1, &ticks_to_offset,
   2853e:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
   28542:	4620      	mov	r0, r4
   28544:	aa04      	add	r2, sp, #16
   28546:	2101      	movs	r1, #1
   28548:	f016 f97a 	bl	3e840 <win_offset_calc.constprop.0>
		while (offset_index_m < offset_m_max) {
   2854c:	f89d 000f 	ldrb.w	r0, [sp, #15]
   28550:	46b0      	mov	r8, r6
	uint8_t has_offset_s = 0U;
   28552:	4637      	mov	r7, r6
   28554:	f504 79d2 	add.w	r9, r4, #420	; 0x1a4
			if (win_offset_s != 0xffff) {
   28558:	f64f 76ff 	movw	r6, #65535	; 0xffff
		win_offset_s =
   2855c:	f8b9 c000 	ldrh.w	ip, [r9]
		while (offset_index_m < offset_m_max) {
   28560:	b178      	cbz	r0, 28582 <ull_sched_mfy_win_offset_select+0x82>
   28562:	462a      	mov	r2, r5
		uint8_t offset_index_m = 0U;
   28564:	2300      	movs	r3, #0
			if (win_offset_s != 0xffff) {
   28566:	45b4      	cmp	ip, r6
			offset_index_m++;
   28568:	f103 0101 	add.w	r1, r3, #1
			if (win_offset_s != 0xffff) {
   2856c:	d004      	beq.n	28578 <ull_sched_mfy_win_offset_select+0x78>
				if (win_offset_s ==
   2856e:	f8b2 e000 	ldrh.w	lr, [r2]
   28572:	45e6      	cmp	lr, ip
   28574:	d01b      	beq.n	285ae <ull_sched_mfy_win_offset_select+0xae>
				has_offset_s = 1U;
   28576:	2701      	movs	r7, #1
			offset_index_m++;
   28578:	b2cb      	uxtb	r3, r1
		while (offset_index_m < offset_m_max) {
   2857a:	4283      	cmp	r3, r0
   2857c:	f102 0202 	add.w	r2, r2, #2
   28580:	d1f1      	bne.n	28566 <ull_sched_mfy_win_offset_select+0x66>
	while (offset_index_s < OFFSET_S_MAX) {
   28582:	f108 0801 	add.w	r8, r8, #1
   28586:	f1b8 0f06 	cmp.w	r8, #6
   2858a:	f109 0902 	add.w	r9, r9, #2
   2858e:	d1e5      	bne.n	2855c <ull_sched_mfy_win_offset_select+0x5c>
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
   28590:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
	} else if (!has_offset_s) {
   28594:	bb27      	cbnz	r7, 285e0 <ull_sched_mfy_win_offset_select+0xe0>
		conn->llcp_cu.win_offset_us = win_offset_m[0] *
   28596:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   2859a:	f240 41e2 	movw	r1, #1250	; 0x4e2
   2859e:	fb02 f101 	mul.w	r1, r2, r1
	dst[1] = val >> 8;
   285a2:	0a10      	lsrs	r0, r2, #8
   285a4:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
	dst[0] = val;
   285a8:	701a      	strb	r2, [r3, #0]
	dst[1] = val >> 8;
   285aa:	7058      	strb	r0, [r3, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   285ac:	e00e      	b.n	285cc <ull_sched_mfy_win_offset_select+0xcc>
		if (offset_index_m < offset_m_max) {
   285ae:	4283      	cmp	r3, r0
   285b0:	d2e7      	bcs.n	28582 <ull_sched_mfy_win_offset_select+0x82>
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
   285b2:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
		conn->llcp_cu.win_offset_us = win_offset_s * CONN_INT_UNIT_US;
   285b6:	f240 43e2 	movw	r3, #1250	; 0x4e2
   285ba:	fb03 f30c 	mul.w	r3, r3, ip
   285be:	ea4f 211c 	mov.w	r1, ip, lsr #8
   285c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
	dst[0] = val;
   285c6:	f882 c000 	strb.w	ip, [r2]
	dst[1] = val >> 8;
   285ca:	7051      	strb	r1, [r2, #1]
				has_offset_s = 1U;
   285cc:	2204      	movs	r2, #4
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   285ce:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   285d2:	f362 0302 	bfi	r3, r2, #0, #3
   285d6:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
}
   285da:	b009      	add	sp, #36	; 0x24
   285dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   285e0:	f813 2c05 	ldrb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
   285e4:	2003      	movs	r0, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   285e6:	4302      	orrs	r2, r0
		pdu_ctrl_tx->llctrl.opcode =
   285e8:	f640 7111 	movw	r1, #3857	; 0xf11
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   285ec:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
   285f0:	2220      	movs	r2, #32
   285f2:	701a      	strb	r2, [r3, #0]
		pdu_ctrl_tx->len =
   285f4:	f803 0c04 	strb.w	r0, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
   285f8:	f823 1c02 	strh.w	r1, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
   285fc:	2205      	movs	r2, #5
   285fe:	e7e6      	b.n	285ce <ull_sched_mfy_win_offset_select+0xce>
   28600:	1afd498d 	.word	0x1afd498d
   28604:	00000007 	.word	0x00000007
   28608:	3b9aca00 	.word	0x3b9aca00
   2860c:	00000000 	.word	0x00000000

00028610 <isr_window>:
	 */
	radio_tmr_end_capture();
}

static void isr_window(void *param)
{
   28610:	b538      	push	{r3, r4, r5, lr}
   28612:	4604      	mov	r4, r0
	uint32_t remainder_us;
	struct lll_scan *lll;

	isr_common_done(param);
   28614:	f019 f906 	bl	41824 <isr_common_done>

	lll = param;

	/* Next radio channel to scan, round-robin 37, 38, and 39. */
	if (++lll->chan == ADV_CHAN_MAX) {
   28618:	7da3      	ldrb	r3, [r4, #22]
   2861a:	7da2      	ldrb	r2, [r4, #22]
   2861c:	f3c3 0341 	ubfx	r3, r3, #1, #2
   28620:	3301      	adds	r3, #1
   28622:	f003 0303 	and.w	r3, r3, #3
   28626:	2b03      	cmp	r3, #3
		lll->chan = 0U;
   28628:	bf08      	it	eq
   2862a:	2300      	moveq	r3, #0
   2862c:	f363 0242 	bfi	r2, r3, #1, #2
	}
	lll_chan_set(37 + lll->chan);
   28630:	bf14      	ite	ne
   28632:	f103 0025 	addne.w	r0, r3, #37	; 0x25
   28636:	2025      	moveq	r0, #37	; 0x25
   28638:	75a2      	strb	r2, [r4, #22]
   2863a:	f018 f81d 	bl	40678 <lll_chan_set>

#if defined(CONFIG_BT_CENTRAL)
	bool is_sched_advanced = IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) &&
				 lll->conn && lll->conn_win_offset_us;
   2863e:	6863      	ldr	r3, [r4, #4]
   28640:	b10b      	cbz	r3, 28646 <isr_window+0x36>
   28642:	6923      	ldr	r3, [r4, #16]
   28644:	b94b      	cbnz	r3, 2865a <isr_window+0x4a>
		ticks_anchor_prev = radio_tmr_start_get();
	} else {
		ticks_anchor_prev = 0U;
	}

	ticks_at_start = ticker_ticks_now_get() +
   28646:	f00d f89f 	bl	35788 <ticker_ticks_now_get>
			 HAL_TICKER_CNTR_CMP_OFFSET_MIN;
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   2864a:	1cc1      	adds	r1, r0, #3
   2864c:	2000      	movs	r0, #0
   2864e:	f01a fdbf 	bl	431d0 <radio_tmr_start_tick>
		 * interval units until it is in the future.
		 */
		lll->conn_win_offset_us -= ticks_delta_us;
	}
#endif /* CONFIG_BT_CENTRAL */
}
   28652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
   28656:	f01a be39 	b.w	432cc <radio_tmr_end_capture>
		ticks_anchor_prev = radio_tmr_start_get();
   2865a:	f01a fdeb 	bl	43234 <radio_tmr_start_get>
   2865e:	4605      	mov	r5, r0
	ticks_at_start = ticker_ticks_now_get() +
   28660:	f00d f892 	bl	35788 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   28664:	1cc1      	adds	r1, r0, #3
   28666:	2000      	movs	r0, #0
   28668:	f01a fdb2 	bl	431d0 <radio_tmr_start_tick>
	radio_tmr_end_capture();
   2866c:	f01a fe2e 	bl	432cc <radio_tmr_end_capture>
		ticks_anchor_new = radio_tmr_start_get();
   28670:	f01a fde0 	bl	43234 <radio_tmr_start_get>
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
   28674:	4629      	mov	r1, r5
   28676:	f00d f889 	bl	3578c <ticker_ticks_diff_get>
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
   2867a:	4a0b      	ldr	r2, [pc, #44]	; (286a8 <isr_window+0x98>)
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
   2867c:	4603      	mov	r3, r0
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
   2867e:	2107      	movs	r1, #7
   28680:	fba0 0202 	umull	r0, r2, r0, r2
   28684:	fb01 2103 	mla	r1, r1, r3, r2
   28688:	a305      	add	r3, pc, #20	; (adr r3, 286a0 <isr_window+0x90>)
   2868a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2868e:	f7fd fd37 	bl	26100 <__aeabi_uldivmod>
		lll->conn_win_offset_us -= ticks_delta_us;
   28692:	6923      	ldr	r3, [r4, #16]
   28694:	1a1b      	subs	r3, r3, r0
   28696:	6123      	str	r3, [r4, #16]
}
   28698:	bd38      	pop	{r3, r4, r5, pc}
   2869a:	bf00      	nop
   2869c:	f3af 8000 	nop.w
   286a0:	3b9aca00 	.word	0x3b9aca00
   286a4:	00000000 	.word	0x00000000
   286a8:	1afd498d 	.word	0x1afd498d
   286ac:	00000000 	.word	0x00000000

000286b0 <isr_rx>:
{
   286b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   286b4:	b089      	sub	sp, #36	; 0x24
   286b6:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   286b8:	f01a fb9e 	bl	42df8 <radio_is_done>
	if (trx_done) {
   286bc:	b2c0      	uxtb	r0, r0
   286be:	b950      	cbnz	r0, 286d6 <isr_rx+0x26>
	lll_isr_status_reset();
   286c0:	f018 f832 	bl	40728 <lll_isr_status_reset>
	radio_isr_set(isr_done, lll);
   286c4:	487e      	ldr	r0, [pc, #504]	; (288c0 <isr_rx+0x210>)
   286c6:	4621      	mov	r1, r4
   286c8:	f01a fa72 	bl	42bb0 <radio_isr_set>
}
   286cc:	b009      	add	sp, #36	; 0x24
   286ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
   286d2:	f01a bb67 	b.w	42da4 <radio_disable>
		crc_ok = radio_crc_is_valid();
   286d6:	f01a fbaf 	bl	42e38 <radio_crc_is_valid>
   286da:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   286dc:	f01a fcca 	bl	43074 <radio_filter_has_match>
   286e0:	4607      	mov	r7, r0
		devmatch_id = radio_filter_match_get();
   286e2:	f01a fcd1 	bl	43088 <radio_filter_match_get>
   286e6:	4681      	mov	r9, r0
		irkmatch_ok = radio_ar_has_match();
   286e8:	f01a fee6 	bl	434b8 <radio_ar_has_match>
   286ec:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   286ee:	f01a fec7 	bl	43480 <radio_ar_match_get>
   286f2:	4682      	mov	sl, r0
		rssi_ready = radio_rssi_is_ready();
   286f4:	f01a fc82 	bl	42ffc <radio_rssi_is_ready>
	if (!trx_done || !crc_ok) {
   286f8:	b2ed      	uxtb	r5, r5
		rssi_ready = radio_rssi_is_ready();
   286fa:	4680      	mov	r8, r0
		phy_flags_rx = radio_phy_flags_rx_get();
   286fc:	f01a fc64 	bl	42fc8 <radio_phy_flags_rx_get>
	lll_isr_status_reset();
   28700:	f018 f812 	bl	40728 <lll_isr_status_reset>
	if (!trx_done || !crc_ok) {
   28704:	2d00      	cmp	r5, #0
   28706:	d0dd      	beq.n	286c4 <isr_rx+0x14>
	node_rx = ull_pdu_rx_alloc_peek(1);
   28708:	2001      	movs	r0, #1
   2870a:	f00f fbed 	bl	37ee8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   2870e:	4605      	mov	r5, r0
   28710:	2800      	cmp	r0, #0
   28712:	f000 81cb 	beq.w	28aac <isr_rx+0x3fc>
	rl_idx = devmatch_ok ?
   28716:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
		irkmatch_ok = radio_ar_has_match();
   2871a:	b2f6      	uxtb	r6, r6
	rl_idx = devmatch_ok ?
   2871c:	f040 81bd 	bne.w	28a9a <isr_rx+0x3ea>
   28720:	2e00      	cmp	r6, #0
   28722:	f040 80c2 	bne.w	288aa <isr_rx+0x1fa>
   28726:	f04f 09ff 	mov.w	r9, #255	; 0xff
	    !lll_scan_isr_rx_check(lll, irkmatch_ok, devmatch_ok, rl_idx)) {
   2872a:	463a      	mov	r2, r7
   2872c:	464b      	mov	r3, r9
   2872e:	4631      	mov	r1, r6
   28730:	4620      	mov	r0, r4
   28732:	f019 fa9d 	bl	41c70 <lll_scan_isr_rx_check>
	if (has_adva &&
   28736:	2800      	cmp	r0, #0
   28738:	d0c4      	beq.n	286c4 <isr_rx+0x14>
	/* Initiator */
	/* Note: connectable ADV_EXT_IND is handled as any other ADV_EXT_IND
	 *       because we need to receive AUX_ADV_IND anyway.
	 */
	} else if (lll->conn && !lll->conn->central.cancelled &&
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
   2873a:	7f2a      	ldrb	r2, [r5, #28]
	} else if (lll->conn && !lll->conn->central.cancelled &&
   2873c:	6861      	ldr	r1, [r4, #4]
	bool dir_report = false;
   2873e:	2300      	movs	r3, #0
   28740:	f88d 301b 	strb.w	r3, [sp, #27]
		rssi_ready = radio_rssi_is_ready();
   28744:	fa5f f788 	uxtb.w	r7, r8
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
   28748:	f002 030f 	and.w	r3, r2, #15
	} else if (lll->conn && !lll->conn->central.cancelled &&
   2874c:	2900      	cmp	r1, #0
   2874e:	f000 80d6 	beq.w	288fe <isr_rx+0x24e>
   28752:	6861      	ldr	r1, [r4, #4]
   28754:	f891 1020 	ldrb.w	r1, [r1, #32]
   28758:	0788      	lsls	r0, r1, #30
   2875a:	f100 80d0 	bmi.w	288fe <isr_rx+0x24e>
   2875e:	2b07      	cmp	r3, #7
   28760:	d0b0      	beq.n	286c4 <isr_rx+0x14>
#if defined(CONFIG_BT_CENTRAL)
static inline bool isr_scan_init_check(const struct lll_scan *lll,
				       const struct pdu_adv *pdu,
				       uint8_t rl_idx)
{
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
   28762:	7da1      	ldrb	r1, [r4, #22]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
				    rl_idx)) &&
   28764:	0709      	lsls	r1, r1, #28
   28766:	f140 81af 	bpl.w	28ac8 <isr_rx+0x418>
   2876a:	2b00      	cmp	r3, #0
   2876c:	f040 80ae 	bne.w	288cc <isr_rx+0x21c>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
   28770:	7f6b      	ldrb	r3, [r5, #29]
   28772:	2b25      	cmp	r3, #37	; 0x25
   28774:	d8a6      	bhi.n	286c4 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   28776:	2004      	movs	r0, #4
   28778:	f00f fbb6 	bl	37ee8 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   2877c:	2800      	cmp	r0, #0
   2877e:	d0a1      	beq.n	286c4 <isr_rx+0x14>
		pdu_end_us = radio_tmr_end_get();
   28780:	f01a fdac 	bl	432dc <radio_tmr_end_get>
		if (!lll->ticks_window) {
   28784:	6a63      	ldr	r3, [r4, #36]	; 0x24
		pdu_end_us = radio_tmr_end_get();
   28786:	4607      	mov	r7, r0
		if (!lll->ticks_window) {
   28788:	b943      	cbnz	r3, 2879c <isr_rx+0xec>
			scan_interval_us = lll->interval * SCAN_INT_UNIT_US;
   2878a:	8c23      	ldrh	r3, [r4, #32]
   2878c:	f240 2271 	movw	r2, #625	; 0x271
   28790:	fb02 f303 	mul.w	r3, r2, r3
			pdu_end_us %= scan_interval_us;
   28794:	fbb0 f2f3 	udiv	r2, r0, r3
   28798:	fb03 0712 	mls	r7, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
   2879c:	6823      	ldr	r3, [r4, #0]
   2879e:	691a      	ldr	r2, [r3, #16]
   287a0:	4b48      	ldr	r3, [pc, #288]	; (288c4 <isr_rx+0x214>)
   287a2:	2107      	movs	r1, #7
   287a4:	fba2 0303 	umull	r0, r3, r2, r3
   287a8:	fb01 3102 	mla	r1, r1, r2, r3
   287ac:	a342      	add	r3, pc, #264	; (adr r3, 288b8 <isr_rx+0x208>)
   287ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   287b2:	f7fd fca5 	bl	26100 <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
   287b6:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
   287ba:	42bb      	cmp	r3, r7
   287bc:	d382      	bcc.n	286c4 <isr_rx+0x14>
		radio_switch_complete_and_disable();
   287be:	f01a fbf5 	bl	42fac <radio_switch_complete_and_disable>
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   287c2:	4648      	mov	r0, r9
		lll_conn = lll->conn;
   287c4:	6863      	ldr	r3, [r4, #4]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   287c6:	f017 fa33 	bl	3fc30 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
   287ca:	7de3      	ldrb	r3, [r4, #23]
   287cc:	079f      	lsls	r7, r3, #30
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   287ce:	4680      	mov	r8, r0
		if (lll->rpa_gen && lrpa) {
   287d0:	f140 81db 	bpl.w	28b8a <isr_rx+0x4da>
   287d4:	2800      	cmp	r0, #0
   287d6:	f000 81d8 	beq.w	28b8a <isr_rx+0x4da>
			init_addr = lrpa->val;
   287da:	4683      	mov	fp, r0
			init_tx_addr = 1;
   287dc:	2701      	movs	r7, #1
		pdu_tx = (void *)radio_pkt_scratch_get();
   287de:	f01a fb39 	bl	42e54 <radio_pkt_scratch_get>
					     pdu_adv_rx->tx_addr,
   287e2:	7f2b      	ldrb	r3, [r5, #28]
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
   287e4:	aa07      	add	r2, sp, #28
   287e6:	9203      	str	r2, [sp, #12]
					     pdu_adv_rx->adv_ind.addr,
   287e8:	f105 021e 	add.w	r2, r5, #30
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
   287ec:	4601      	mov	r1, r0
		pdu_tx = (void *)radio_pkt_scratch_get();
   287ee:	4682      	mov	sl, r0
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
   287f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   287f4:	9200      	str	r2, [sp, #0]
   287f6:	4620      	mov	r0, r4
   287f8:	2200      	movs	r2, #0
   287fa:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   287fe:	f019 fa51 	bl	41ca4 <lll_scan_prepare_connect_req>
		radio_pkt_tx_set(pdu_tx);
   28802:	4650      	mov	r0, sl
   28804:	f01a faac 	bl	42d60 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   28808:	f01a faec 	bl	42de4 <radio_is_ready>
   2880c:	2800      	cmp	r0, #0
   2880e:	f040 81d1 	bne.w	28bb4 <isr_rx+0x504>
		radio_isr_set(isr_done_cleanup, lll);
   28812:	482d      	ldr	r0, [pc, #180]	; (288c8 <isr_rx+0x218>)
   28814:	4621      	mov	r1, r4
   28816:	f01a f9cb 	bl	42bb0 <radio_isr_set>
		lll->conn->central.initiated = 1U;
   2881a:	6861      	ldr	r1, [r4, #4]
		lll->is_stop = 1U;
   2881c:	7da3      	ldrb	r3, [r4, #22]
		lll->conn->central.initiated = 1U;
   2881e:	f891 2020 	ldrb.w	r2, [r1, #32]
		lll->is_stop = 1U;
   28822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		lll->conn->central.initiated = 1U;
   28826:	f042 0201 	orr.w	r2, r2, #1
   2882a:	f881 2020 	strb.w	r2, [r1, #32]
		lll->is_stop = 1U;
   2882e:	75a3      	strb	r3, [r4, #22]
		rx = ull_pdu_rx_alloc();
   28830:	f00f fb7a 	bl	37f28 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   28834:	2316      	movs	r3, #22
		rx = ull_pdu_rx_alloc();
   28836:	4607      	mov	r7, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   28838:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   2883a:	f64f 73ff 	movw	r3, #65535	; 0xffff
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
   2883e:	7f2d      	ldrb	r5, [r5, #28]
		rx->hdr.handle = 0xffff;
   28840:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
   28842:	4651      	mov	r1, sl
   28844:	2224      	movs	r2, #36	; 0x24
   28846:	301c      	adds	r0, #28
   28848:	f023 fa8d 	bl	4bd66 <memcpy>
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
   2884c:	7f3b      	ldrb	r3, [r7, #28]
		ftr->param = lll;
   2884e:	60bc      	str	r4, [r7, #8]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
   28850:	f3c5 1540 	ubfx	r5, r5, #5, #1
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
   28854:	f365 1345 	bfi	r3, r5, #5, #1
   28858:	773b      	strb	r3, [r7, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
   2885a:	f01a fceb 	bl	43234 <radio_tmr_start_get>
				    radio_rx_chain_delay_get(PHY_1M, 0);
   2885e:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
   28860:	6138      	str	r0, [r7, #16]
				    radio_rx_chain_delay_get(PHY_1M, 0);
   28862:	2001      	movs	r0, #1
		ftr->radio_end_us = conn_space_us -
   28864:	9d07      	ldr	r5, [sp, #28]
				    radio_rx_chain_delay_get(PHY_1M, 0);
   28866:	f01a fa8b 	bl	42d80 <radio_rx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   2886a:	2e00      	cmp	r6, #0
   2886c:	bf08      	it	eq
   2886e:	f04f 09ff 	moveq.w	r9, #255	; 0xff
   28872:	f887 9019 	strb.w	r9, [r7, #25]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
   28876:	7de3      	ldrb	r3, [r4, #23]
		ftr->radio_end_us = conn_space_us -
   28878:	1a2d      	subs	r5, r5, r0
		ftr->lrpa_used = lll->rpa_gen && lrpa;
   2887a:	f013 0302 	ands.w	r3, r3, #2
		ftr->radio_end_us = conn_space_us -
   2887e:	617d      	str	r5, [r7, #20]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
   28880:	d003      	beq.n	2888a <isr_rx+0x1da>
   28882:	f1b8 0300 	subs.w	r3, r8, #0
   28886:	bf18      	it	ne
   28888:	2301      	movne	r3, #1
   2888a:	7eba      	ldrb	r2, [r7, #26]
   2888c:	f363 0200 	bfi	r2, r3, #0, #1
   28890:	76ba      	strb	r2, [r7, #26]
			ftr->extra = ull_pdu_rx_alloc();
   28892:	f00f fb49 	bl	37f28 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   28896:	4639      	mov	r1, r7
			ftr->extra = ull_pdu_rx_alloc();
   28898:	60f8      	str	r0, [r7, #12]
		ull_rx_put(rx->hdr.link, rx);
   2889a:	6838      	ldr	r0, [r7, #0]
   2889c:	f00f fb5a 	bl	37f54 <ull_rx_put>
}
   288a0:	b009      	add	sp, #36	; 0x24
   288a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		ull_rx_sched();
   288a6:	f00f bb65 	b.w	37f74 <ull_rx_sched>
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   288aa:	fa5f f08a 	uxtb.w	r0, sl
   288ae:	f017 fa4d 	bl	3fd4c <ull_filter_lll_rl_irk_idx>
   288b2:	4681      	mov	r9, r0
   288b4:	e739      	b.n	2872a <isr_rx+0x7a>
   288b6:	bf00      	nop
   288b8:	3b9aca00 	.word	0x3b9aca00
   288bc:	00000000 	.word	0x00000000
   288c0:	000418dd 	.word	0x000418dd
   288c4:	1afd498d 	.word	0x1afd498d
   288c8:	00041acd 	.word	0x00041acd
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
   288cc:	2b01      	cmp	r3, #1
   288ce:	f040 810b 	bne.w	28ae8 <isr_rx+0x438>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
   288d2:	7f6a      	ldrb	r2, [r5, #29]
   288d4:	2a0c      	cmp	r2, #12
   288d6:	f47f aef5 	bne.w	286c4 <isr_rx+0x14>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
		  (/* allow directed adv packets addressed to this device */
			  isr_scan_tgta_check(lll, true, pdu->rx_addr,
   288da:	7f2a      	ldrb	r2, [r5, #28]
   288dc:	f8cd 9000 	str.w	r9, [sp]
   288e0:	4619      	mov	r1, r3
   288e2:	2300      	movs	r3, #0
   288e4:	9301      	str	r3, [sp, #4]
   288e6:	09d2      	lsrs	r2, r2, #7
   288e8:	f105 0324 	add.w	r3, r5, #36	; 0x24
   288ec:	4620      	mov	r0, r4
   288ee:	f019 f913 	bl	41b18 <isr_scan_tgta_check>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
   288f2:	2800      	cmp	r0, #0
   288f4:	f47f af3f 	bne.w	28776 <isr_rx+0xc6>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   288f8:	7f2b      	ldrb	r3, [r5, #28]
   288fa:	f003 030f 	and.w	r3, r3, #15
   288fe:	2b00      	cmp	r3, #0
   28900:	d17d      	bne.n	289fe <isr_rx+0x34e>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
   28902:	7f6b      	ldrb	r3, [r5, #29]
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   28904:	2b25      	cmp	r3, #37	; 0x25
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
   28906:	461a      	mov	r2, r3
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   28908:	f63f aedc 	bhi.w	286c4 <isr_rx+0x14>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
   2890c:	7da1      	ldrb	r1, [r4, #22]
   2890e:	0689      	lsls	r1, r1, #26
   28910:	f140 8093 	bpl.w	28a3a <isr_rx+0x38a>
		   !lll->conn) {
   28914:	6862      	ldr	r2, [r4, #4]
		   lll->type &&
   28916:	2a00      	cmp	r2, #0
   28918:	f040 810f 	bne.w	28b3a <isr_rx+0x48a>
		radio_tmr_tifs_set(EVENT_IFS_US);
   2891c:	2096      	movs	r0, #150	; 0x96
   2891e:	9205      	str	r2, [sp, #20]
   28920:	f01a fbc8 	bl	430b4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   28924:	9a05      	ldr	r2, [sp, #20]
   28926:	4610      	mov	r0, r2
   28928:	f01a fa98 	bl	42e5c <radio_switch_complete_and_rx>
			      uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;
	int err = 0;

	node_rx = ull_pdu_rx_alloc_peek(3);
   2892c:	2003      	movs	r0, #3
   2892e:	f00f fadb 	bl	37ee8 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   28932:	4680      	mov	r8, r0
   28934:	2800      	cmp	r0, #0
   28936:	f43f aec5 	beq.w	286c4 <isr_rx+0x14>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   2893a:	f00f faf5 	bl	37f28 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   2893e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28942:	f8a8 3006 	strh.w	r3, [r8, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   28946:	2305      	movs	r3, #5
   28948:	f888 3004 	strb.w	r3, [r8, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   2894c:	2f00      	cmp	r7, #0
   2894e:	f040 8118 	bne.w	28b82 <isr_rx+0x4d2>
   28952:	237f      	movs	r3, #127	; 0x7f
						  BT_HCI_LE_RSSI_NOT_AVAILABLE;
#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* save the resolving list index. */
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   28954:	2e00      	cmp	r6, #0
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   28956:	f888 3018 	strb.w	r3, [r8, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   2895a:	bf14      	ite	ne
   2895c:	464b      	movne	r3, r9
   2895e:	23ff      	moveq	r3, #255	; 0xff
   28960:	f888 3019 	strb.w	r3, [r8, #25]
#endif /* CONFIG_BT_CTLR_ADV_EXT */
#endif /* CONFIG_BT_CTLR_PRIVACY */

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	/* save the directed adv report flag */
	node_rx->hdr.rx_ftr.direct = dir_report;
   28964:	f898 301a 	ldrb.w	r3, [r8, #26]
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   28968:	f8d8 0000 	ldr.w	r0, [r8]
	node_rx->hdr.rx_ftr.direct = dir_report;
   2896c:	f36f 0341 	bfc	r3, #1, #1
   28970:	f888 301a 	strb.w	r3, [r8, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
   28974:	4641      	mov	r1, r8
   28976:	f00f faed 	bl	37f54 <ull_rx_put>
	ull_rx_sched();
   2897a:	f00f fafb 	bl	37f74 <ull_rx_sched>
		pdu_tx = (void *)radio_pkt_scratch_get();
   2897e:	f01a fa69 	bl	42e54 <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   28982:	7f2b      	ldrb	r3, [r5, #28]
		pdu_tx = (void *)radio_pkt_scratch_get();
   28984:	4606      	mov	r6, r0
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   28986:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   2898a:	7832      	ldrb	r2, [r6, #0]
   2898c:	01db      	lsls	r3, r3, #7
   2898e:	f002 0270 	and.w	r2, r2, #112	; 0x70
   28992:	f043 0303 	orr.w	r3, r3, #3
   28996:	4313      	orrs	r3, r2
   28998:	7033      	strb	r3, [r6, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   2899a:	230c      	movs	r3, #12
   2899c:	7073      	strb	r3, [r6, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   2899e:	4648      	mov	r0, r9
   289a0:	f017 f946 	bl	3fc30 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
   289a4:	7de3      	ldrb	r3, [r4, #23]
   289a6:	079a      	lsls	r2, r3, #30
   289a8:	f140 80f5 	bpl.w	28b96 <isr_rx+0x4e6>
   289ac:	2800      	cmp	r0, #0
   289ae:	f000 80f2 	beq.w	28b96 <isr_rx+0x4e6>
			pdu_tx->tx_addr = 1;
   289b2:	7833      	ldrb	r3, [r6, #0]
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
   289b4:	4601      	mov	r1, r0
			pdu_tx->tx_addr = 1;
   289b6:	4630      	mov	r0, r6
   289b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   289bc:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
   289c0:	2206      	movs	r2, #6
   289c2:	f023 f9d0 	bl	4bd66 <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
   289c6:	2206      	movs	r2, #6
   289c8:	f105 011e 	add.w	r1, r5, #30
   289cc:	f106 0008 	add.w	r0, r6, #8
   289d0:	f023 f9c9 	bl	4bd66 <memcpy>
		radio_pkt_tx_set(pdu_tx);
   289d4:	4630      	mov	r0, r6
   289d6:	f01a f9c3 	bl	42d60 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   289da:	f01a fa03 	bl	42de4 <radio_is_ready>
   289de:	2800      	cmp	r0, #0
   289e0:	f040 80f6 	bne.w	28bd0 <isr_rx+0x520>
		radio_tmr_end_capture();
   289e4:	f01a fc72 	bl	432cc <radio_tmr_end_capture>
		lll->state = 1U;
   289e8:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
   289ea:	4880      	ldr	r0, [pc, #512]	; (28bec <isr_rx+0x53c>)
		lll->state = 1U;
   289ec:	f043 0301 	orr.w	r3, r3, #1
		radio_isr_set(isr_tx, lll);
   289f0:	4621      	mov	r1, r4
		lll->state = 1U;
   289f2:	75a3      	strb	r3, [r4, #22]
}
   289f4:	b009      	add	sp, #36	; 0x24
   289f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		radio_isr_set(isr_tx, lll);
   289fa:	f01a b8d9 	b.w	42bb0 <radio_isr_set>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   289fe:	2b06      	cmp	r3, #6
   28a00:	f43f af7f 	beq.w	28902 <isr_rx+0x252>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   28a04:	2145      	movs	r1, #69	; 0x45
   28a06:	40d9      	lsrs	r1, r3
   28a08:	f011 0101 	ands.w	r1, r1, #1
   28a0c:	f040 8097 	bne.w	28b3e <isr_rx+0x48e>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   28a10:	2b01      	cmp	r3, #1
   28a12:	d170      	bne.n	28af6 <isr_rx+0x446>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   28a14:	7f6b      	ldrb	r3, [r5, #29]
   28a16:	2b0c      	cmp	r3, #12
   28a18:	f47f ae54 	bne.w	286c4 <isr_rx+0x14>
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
   28a1c:	7f2a      	ldrb	r2, [r5, #28]
   28a1e:	f8cd 9000 	str.w	r9, [sp]
   28a22:	f10d 031b 	add.w	r3, sp, #27
   28a26:	9301      	str	r3, [sp, #4]
   28a28:	09d2      	lsrs	r2, r2, #7
   28a2a:	f105 0324 	add.w	r3, r5, #36	; 0x24
   28a2e:	4620      	mov	r0, r4
   28a30:	f019 f872 	bl	41b18 <isr_scan_tgta_check>
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
   28a34:	2800      	cmp	r0, #0
   28a36:	d05e      	beq.n	28af6 <isr_rx+0x446>
		 (pdu_adv_rx->len != 0) &&
   28a38:	7f6a      	ldrb	r2, [r5, #29]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   28a3a:	2a00      	cmp	r2, #0
   28a3c:	f43f ae42 	beq.w	286c4 <isr_rx+0x14>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
   28a40:	6863      	ldr	r3, [r4, #4]
		 (pdu_adv_rx->len != 0) &&
   28a42:	b12b      	cbz	r3, 28a50 <isr_rx+0x3a0>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
   28a44:	7f2b      	ldrb	r3, [r5, #28]
   28a46:	f003 030f 	and.w	r3, r3, #15
   28a4a:	2b07      	cmp	r3, #7
   28a4c:	f47f ae3a 	bne.w	286c4 <isr_rx+0x14>
	node_rx = ull_pdu_rx_alloc_peek(3);
   28a50:	2003      	movs	r0, #3
		err = isr_rx_scan_report(lll, rssi_ready, phy_flags_rx,
   28a52:	f89d 801b 	ldrb.w	r8, [sp, #27]
	node_rx = ull_pdu_rx_alloc_peek(3);
   28a56:	f00f fa47 	bl	37ee8 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   28a5a:	4605      	mov	r5, r0
   28a5c:	2800      	cmp	r0, #0
   28a5e:	f43f ae31 	beq.w	286c4 <isr_rx+0x14>
	ull_pdu_rx_alloc();
   28a62:	f00f fa61 	bl	37f28 <ull_pdu_rx_alloc>
	node_rx->hdr.handle = 0xffff;
   28a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28a6a:	80eb      	strh	r3, [r5, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   28a6c:	2305      	movs	r3, #5
   28a6e:	712b      	strb	r3, [r5, #4]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   28a70:	2f00      	cmp	r7, #0
   28a72:	d135      	bne.n	28ae0 <isr_rx+0x430>
   28a74:	207f      	movs	r0, #127	; 0x7f
	node_rx->hdr.rx_ftr.direct = dir_report;
   28a76:	7eab      	ldrb	r3, [r5, #26]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   28a78:	7628      	strb	r0, [r5, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   28a7a:	2e00      	cmp	r6, #0
   28a7c:	bf08      	it	eq
   28a7e:	f04f 09ff 	moveq.w	r9, #255	; 0xff
	node_rx->hdr.rx_ftr.direct = dir_report;
   28a82:	f368 0341 	bfi	r3, r8, #1, #1
	ull_rx_put(node_rx->hdr.link, node_rx);
   28a86:	6828      	ldr	r0, [r5, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
   28a88:	76ab      	strb	r3, [r5, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
   28a8a:	4629      	mov	r1, r5
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   28a8c:	f885 9019 	strb.w	r9, [r5, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
   28a90:	f00f fa60 	bl	37f54 <ull_rx_put>
	ull_rx_sched();
   28a94:	f00f fa6e 	bl	37f74 <ull_rx_sched>
	if (!err) {
   28a98:	e614      	b.n	286c4 <isr_rx+0x14>
		 ull_filter_lll_rl_idx(((lll->filter_policy &
   28a9a:	7da0      	ldrb	r0, [r4, #22]
   28a9c:	fa5f f189 	uxtb.w	r1, r9
   28aa0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   28aa4:	f017 f8e8 	bl	3fc78 <ull_filter_lll_rl_idx>
   28aa8:	4681      	mov	r9, r0
   28aaa:	e63e      	b.n	2872a <isr_rx+0x7a>
	LL_ASSERT(node_rx);
   28aac:	4a50      	ldr	r2, [pc, #320]	; (28bf0 <isr_rx+0x540>)
   28aae:	4951      	ldr	r1, [pc, #324]	; (28bf4 <isr_rx+0x544>)
   28ab0:	4851      	ldr	r0, [pc, #324]	; (28bf8 <isr_rx+0x548>)
   28ab2:	f240 23c3 	movw	r3, #707	; 0x2c3
   28ab6:	f021 f827 	bl	49b08 <printk>
   28aba:	4040      	eors	r0, r0
   28abc:	f380 8811 	msr	BASEPRI, r0
   28ac0:	f04f 0003 	mov.w	r0, #3
   28ac4:	df02      	svc	2
   28ac6:	e626      	b.n	28716 <isr_rx+0x66>
	if (rl_idx != FILTER_IDX_NONE) {
   28ac8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   28acc:	f88d 901c 	strb.w	r9, [sp, #28]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
   28ad0:	f3c2 1880 	ubfx	r8, r2, #6, #1
	if (rl_idx != FILTER_IDX_NONE) {
   28ad4:	d038      	beq.n	28b48 <isr_rx+0x498>
		return (rl_idx == lll->rl_idx);
   28ad6:	7e22      	ldrb	r2, [r4, #24]
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
   28ad8:	4591      	cmp	r9, r2
   28ada:	f43f ae46 	beq.w	2876a <isr_rx+0xba>
   28ade:	e70e      	b.n	288fe <isr_rx+0x24e>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   28ae0:	f01a fa7e 	bl	42fe0 <radio_rssi_get>
   28ae4:	b2c0      	uxtb	r0, r0
   28ae6:	e7c6      	b.n	28a76 <isr_rx+0x3c6>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   28ae8:	2b06      	cmp	r3, #6
   28aea:	f43f af0a 	beq.w	28902 <isr_rx+0x252>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   28aee:	2245      	movs	r2, #69	; 0x45
   28af0:	40da      	lsrs	r2, r3
   28af2:	07d0      	lsls	r0, r2, #31
   28af4:	d423      	bmi.n	28b3e <isr_rx+0x48e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   28af6:	7f2b      	ldrb	r3, [r5, #28]
					rl_idx, &dir_report))) ||
   28af8:	f003 030f 	and.w	r3, r3, #15
   28afc:	2b04      	cmp	r3, #4
   28afe:	f47f ade1 	bne.w	286c4 <isr_rx+0x14>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   28b02:	7f6b      	ldrb	r3, [r5, #29]
   28b04:	2b25      	cmp	r3, #37	; 0x25
   28b06:	f63f addd 	bhi.w	286c4 <isr_rx+0x14>
		   (lll->state != 0U) &&
   28b0a:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
   28b0c:	07db      	lsls	r3, r3, #31
   28b0e:	f57f add9 	bpl.w	286c4 <isr_rx+0x14>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   28b12:	f01a f99f 	bl	42e54 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   28b16:	7f2b      	ldrb	r3, [r5, #28]
   28b18:	7802      	ldrb	r2, [r0, #0]
   28b1a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   28b1e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   28b22:	f47f adcf 	bne.w	286c4 <isr_rx+0x14>
		(memcmp(&sreq->scan_req.adv_addr[0],
   28b26:	3008      	adds	r0, #8
   28b28:	2206      	movs	r2, #6
   28b2a:	f105 011e 	add.w	r1, r5, #30
   28b2e:	f023 f90a 	bl	4bd46 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   28b32:	2800      	cmp	r0, #0
   28b34:	f47f adc6 	bne.w	286c4 <isr_rx+0x14>
   28b38:	e77e      	b.n	28a38 <isr_rx+0x388>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   28b3a:	461a      	mov	r2, r3
   28b3c:	e77d      	b.n	28a3a <isr_rx+0x38a>
   28b3e:	7f6a      	ldrb	r2, [r5, #29]
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   28b40:	2a25      	cmp	r2, #37	; 0x25
   28b42:	f67f af7a 	bls.w	28a3a <isr_rx+0x38a>
   28b46:	e5bd      	b.n	286c4 <isr_rx+0x14>
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
   28b48:	f105 0a1e 	add.w	sl, r5, #30
	} else if (!ull_filter_lll_rl_addr_allowed(addr_type, addr, &rl_idx)) {
   28b4c:	aa07      	add	r2, sp, #28
   28b4e:	4651      	mov	r1, sl
   28b50:	4640      	mov	r0, r8
   28b52:	f017 f9b1 	bl	3feb8 <ull_filter_lll_rl_addr_allowed>
   28b56:	2800      	cmp	r0, #0
   28b58:	f43f aece 	beq.w	288f8 <isr_rx+0x248>
	return ((lll->adv_addr_type == addr_type) &&
   28b5c:	7de3      	ldrb	r3, [r4, #23]
   28b5e:	f003 0301 	and.w	r3, r3, #1
   28b62:	4543      	cmp	r3, r8
   28b64:	f47f aec8 	bne.w	288f8 <isr_rx+0x248>
		!memcmp(lll->adv_addr, addr, BDADDR_SIZE));
   28b68:	4651      	mov	r1, sl
   28b6a:	2206      	movs	r2, #6
   28b6c:	f104 0008 	add.w	r0, r4, #8
   28b70:	f023 f8e9 	bl	4bd46 <memcmp>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
   28b74:	7f2b      	ldrb	r3, [r5, #28]
   28b76:	f003 030f 	and.w	r3, r3, #15
	return ((lll->adv_addr_type == addr_type) &&
   28b7a:	2800      	cmp	r0, #0
   28b7c:	f43f adf5 	beq.w	2876a <isr_rx+0xba>
   28b80:	e6bd      	b.n	288fe <isr_rx+0x24e>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   28b82:	f01a fa2d 	bl	42fe0 <radio_rssi_get>
   28b86:	b2c3      	uxtb	r3, r0
   28b88:	e6e4      	b.n	28954 <isr_rx+0x2a4>
			init_tx_addr = lll->init_addr_type;
   28b8a:	7da7      	ldrb	r7, [r4, #22]
			init_addr = lll->init_addr;
   28b8c:	f104 0b19 	add.w	fp, r4, #25
			init_tx_addr = lll->init_addr_type;
   28b90:	f3c7 1780 	ubfx	r7, r7, #6, #1
			init_addr = lll->init_addr;
   28b94:	e623      	b.n	287de <isr_rx+0x12e>
			pdu_tx->tx_addr = lll->init_addr_type;
   28b96:	7da3      	ldrb	r3, [r4, #22]
   28b98:	7832      	ldrb	r2, [r6, #0]
   28b9a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   28b9e:	4630      	mov	r0, r6
   28ba0:	f363 1286 	bfi	r2, r3, #6, #1
   28ba4:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
   28ba8:	f104 0119 	add.w	r1, r4, #25
   28bac:	2206      	movs	r2, #6
   28bae:	f023 f8da 	bl	4bd66 <memcpy>
   28bb2:	e708      	b.n	289c6 <isr_rx+0x316>
		LL_ASSERT(!radio_is_ready());
   28bb4:	4a0e      	ldr	r2, [pc, #56]	; (28bf0 <isr_rx+0x540>)
   28bb6:	4911      	ldr	r1, [pc, #68]	; (28bfc <isr_rx+0x54c>)
   28bb8:	480f      	ldr	r0, [pc, #60]	; (28bf8 <isr_rx+0x548>)
   28bba:	f240 4391 	movw	r3, #1169	; 0x491
   28bbe:	f020 ffa3 	bl	49b08 <printk>
   28bc2:	4040      	eors	r0, r0
   28bc4:	f380 8811 	msr	BASEPRI, r0
   28bc8:	f04f 0003 	mov.w	r0, #3
   28bcc:	df02      	svc	2
   28bce:	e620      	b.n	28812 <isr_rx+0x162>
		LL_ASSERT(!radio_is_ready());
   28bd0:	4a07      	ldr	r2, [pc, #28]	; (28bf0 <isr_rx+0x540>)
   28bd2:	490a      	ldr	r1, [pc, #40]	; (28bfc <isr_rx+0x54c>)
   28bd4:	4808      	ldr	r0, [pc, #32]	; (28bf8 <isr_rx+0x548>)
   28bd6:	f240 5316 	movw	r3, #1302	; 0x516
   28bda:	f020 ff95 	bl	49b08 <printk>
   28bde:	4040      	eors	r0, r0
   28be0:	f380 8811 	msr	BASEPRI, r0
   28be4:	f04f 0003 	mov.w	r0, #3
   28be8:	df02      	svc	2
   28bea:	e6fb      	b.n	289e4 <isr_rx+0x334>
   28bec:	000418f1 	.word	0x000418f1
   28bf0:	00053820 	.word	0x00053820
   28bf4:	000537d4 	.word	0x000537d4
   28bf8:	00052bbc 	.word	0x00052bbc
   28bfc:	000537dc 	.word	0x000537dc

00028c00 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   28c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28c04:	b08f      	sub	sp, #60	; 0x3c
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
   28c06:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 28ce0 <nrf_flash_sync_exe+0xe0>
{
   28c0a:	900b      	str	r0, [sp, #44]	; 0x2c
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   28c0c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   28c10:	f10d 0036 	add.w	r0, sp, #54	; 0x36
   28c14:	f00f f85e 	bl	37cd4 <ll_timeslice_ticker_id_get>
			   HAL_TICKER_US_TO_TICKS(
   28c18:	4f32      	ldr	r7, [pc, #200]	; (28ce4 <nrf_flash_sync_exe+0xe4>)
	err = ticker_start(instance_index,
   28c1a:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
   28c1e:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
   28c22:	f00c fdb1 	bl	35788 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
   28c26:	f8d8 4000 	ldr.w	r4, [r8]
	err = ticker_start(instance_index,
   28c2a:	900a      	str	r0, [sp, #40]	; 0x28
			   HAL_TICKER_US_TO_TICKS(
   28c2c:	fba4 5407 	umull	r5, r4, r4, r7
   28c30:	a329      	add	r3, pc, #164	; (adr r3, 28cd8 <nrf_flash_sync_exe+0xd8>)
   28c32:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
   28c36:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(
   28c38:	4621      	mov	r1, r4
   28c3a:	4628      	mov	r0, r5
   28c3c:	f7fd fa60 	bl	26100 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
   28c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   28c42:	9306      	str	r3, [sp, #24]
   28c44:	e9cd 6607 	strd	r6, r6, [sp, #28]
   28c48:	4b27      	ldr	r3, [pc, #156]	; (28ce8 <nrf_flash_sync_exe+0xe8>)
   28c4a:	9305      	str	r3, [sp, #20]
			   HAL_TICKER_US_TO_TICKS(
   28c4c:	4681      	mov	r9, r0
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
   28c4e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   28c52:	a321      	add	r3, pc, #132	; (adr r3, 28cd8 <nrf_flash_sync_exe+0xd8>)
   28c54:	e9d3 2300 	ldrd	r2, r3, [r3]
   28c58:	fba0 0107 	umull	r0, r1, r0, r7
   28c5c:	f7fd fa50 	bl	26100 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   28c60:	4b22      	ldr	r3, [pc, #136]	; (28cec <nrf_flash_sync_exe+0xec>)
   28c62:	f029 477f 	bic.w	r7, r9, #4278190080	; 0xff000000
   28c66:	fba7 3103 	umull	r3, r1, r7, r3
	err = ticker_start(instance_index,
   28c6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   28c6e:	2207      	movs	r2, #7
	err = ticker_start(instance_index,
   28c70:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   28c74:	fb02 1107 	mla	r1, r2, r7, r1
   28c78:	1ae8      	subs	r0, r5, r3
   28c7a:	eb64 0101 	sbc.w	r1, r4, r1
   28c7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28c82:	2300      	movs	r3, #0
   28c84:	f7fd fa3c 	bl	26100 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
   28c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28c8a:	9600      	str	r6, [sp, #0]
   28c8c:	e9cd 7001 	strd	r7, r0, [sp, #4]
   28c90:	465a      	mov	r2, fp
   28c92:	2103      	movs	r1, #3
   28c94:	4650      	mov	r0, sl
   28c96:	f00c fc4b 	bl	35530 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   28c9a:	f030 0402 	bics.w	r4, r0, #2
   28c9e:	d116      	bne.n	28cce <nrf_flash_sync_exe+0xce>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   28ca0:	4a13      	ldr	r2, [pc, #76]	; (28cf0 <nrf_flash_sync_exe+0xf0>)
   28ca2:	4814      	ldr	r0, [pc, #80]	; (28cf4 <nrf_flash_sync_exe+0xf4>)
   28ca4:	2300      	movs	r3, #0
   28ca6:	f01f fa6d 	bl	48184 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
   28caa:	b168      	cbz	r0, 28cc8 <nrf_flash_sync_exe+0xc8>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   28cac:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   28cb0:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
   28cb4:	9400      	str	r4, [sp, #0]
   28cb6:	4623      	mov	r3, r4
   28cb8:	2103      	movs	r1, #3
   28cba:	f00c fcc5 	bl	35648 <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
   28cbe:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
   28cc2:	b00f      	add	sp, #60	; 0x3c
   28cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
   28cc8:	f8d8 000c 	ldr.w	r0, [r8, #12]
   28ccc:	e7f9      	b.n	28cc2 <nrf_flash_sync_exe+0xc2>
		result = -ECANCELED;
   28cce:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return result;
   28cd2:	e7f6      	b.n	28cc2 <nrf_flash_sync_exe+0xc2>
   28cd4:	f3af 8000 	nop.w
   28cd8:	1afd498d 	.word	0x1afd498d
   28cdc:	00000007 	.word	0x00000007
   28ce0:	20006dc8 	.word	0x20006dc8
   28ce4:	3b9aca00 	.word	0x3b9aca00
   28ce8:	000454f9 	.word	0x000454f9
   28cec:	1afd498d 	.word	0x1afd498d
   28cf0:	000b7b44 	.word	0x000b7b44
   28cf4:	20006db0 	.word	0x20006db0

00028cf8 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
   28cf8:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
   28cfa:	4d0f      	ldr	r5, [pc, #60]	; (28d38 <nrf_flash_sync_check_time_limit+0x40>)
{
   28cfc:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
   28cfe:	f00c fd43 	bl	35788 <ticker_ticks_now_get>
   28d02:	68a9      	ldr	r1, [r5, #8]
   28d04:	f00c fd42 	bl	3578c <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
   28d08:	6869      	ldr	r1, [r5, #4]
	if (ticks_diff + ticks_diff/iteration >
   28d0a:	fbb0 f4f4 	udiv	r4, r0, r4
   28d0e:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
   28d10:	480a      	ldr	r0, [pc, #40]	; (28d3c <nrf_flash_sync_check_time_limit+0x44>)
   28d12:	a307      	add	r3, pc, #28	; (adr r3, 28d30 <nrf_flash_sync_check_time_limit+0x38>)
   28d14:	e9d3 2300 	ldrd	r2, r3, [r3]
   28d18:	fba1 0100 	umull	r0, r1, r1, r0
   28d1c:	f7fd f9f0 	bl	26100 <__aeabi_uldivmod>
   28d20:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
   28d24:	4284      	cmp	r4, r0
   28d26:	bf94      	ite	ls
   28d28:	2000      	movls	r0, #0
   28d2a:	2001      	movhi	r0, #1
   28d2c:	bd38      	pop	{r3, r4, r5, pc}
   28d2e:	bf00      	nop
   28d30:	1afd498d 	.word	0x1afd498d
   28d34:	00000007 	.word	0x00000007
   28d38:	20006dc8 	.word	0x20006dc8
   28d3c:	3b9aca00 	.word	0x3b9aca00

00028d40 <activity_expiry_function>:
    }
}

K_WORK_DEFINE(activity_work, activity_work_handler);

void activity_expiry_function() { k_work_submit(&activity_work); }
   28d40:	4801      	ldr	r0, [pc, #4]	; (28d48 <activity_expiry_function+0x8>)
   28d42:	f01f bb7d 	b.w	48440 <k_work_submit>
   28d46:	bf00      	nop
   28d48:	20000290 	.word	0x20000290

00028d4c <activity_init>:

K_TIMER_DEFINE(activity_timer, activity_expiry_function, NULL);

int activity_init() {
   28d4c:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_uptime_ticks();
   28d4e:	f028 f99b 	bl	51088 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   28d52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28d56:	fba0 0302 	umull	r0, r3, r0, r2
   28d5a:	fb02 3101 	mla	r1, r2, r1, r3
   28d5e:	0bc0      	lsrs	r0, r0, #15
    activity_last_uptime = k_uptime_get();
   28d60:	4a07      	ldr	r2, [pc, #28]	; (28d80 <activity_init+0x34>)
   28d62:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   28d66:	6010      	str	r0, [r2, #0]

    k_timer_start(&activity_timer, K_SECONDS(1), K_SECONDS(1));
   28d68:	2300      	movs	r3, #0
	compiler_barrier();
   28d6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	z_impl_k_timer_start(timer, duration, period);
   28d6e:	4805      	ldr	r0, [pc, #20]	; (28d84 <activity_init+0x38>)
   28d70:	e9cd 2300 	strd	r2, r3, [sp]
   28d74:	f020 f902 	bl	48f7c <z_impl_k_timer_start>
    return 0;
}
   28d78:	2000      	movs	r0, #0
   28d7a:	b003      	add	sp, #12
   28d7c:	f85d fb04 	ldr.w	pc, [sp], #4
   28d80:	200041a8 	.word	0x200041a8
   28d84:	20001058 	.word	0x20001058

00028d88 <raise_event>:
int raise_event() {
   28d88:	b508      	push	{r3, lr}
    return ZMK_EVENT_RAISE(new_zmk_activity_state_changed(
   28d8a:	4b04      	ldr	r3, [pc, #16]	; (28d9c <raise_event+0x14>)
   28d8c:	7818      	ldrb	r0, [r3, #0]
   28d8e:	f000 f8e5 	bl	28f5c <new_zmk_activity_state_changed>
}
   28d92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return ZMK_EVENT_RAISE(new_zmk_activity_state_changed(
   28d96:	f020 b9fe 	b.w	49196 <zmk_event_manager_raise>
   28d9a:	bf00      	nop
   28d9c:	200072e2 	.word	0x200072e2

00028da0 <set_state>:
    if (activity_state == state)
   28da0:	4b04      	ldr	r3, [pc, #16]	; (28db4 <set_state+0x14>)
   28da2:	781a      	ldrb	r2, [r3, #0]
   28da4:	4282      	cmp	r2, r0
   28da6:	d002      	beq.n	28dae <set_state+0xe>
    activity_state = state;
   28da8:	7018      	strb	r0, [r3, #0]
    return raise_event();
   28daa:	f7ff bfed 	b.w	28d88 <raise_event>
}
   28dae:	2000      	movs	r0, #0
   28db0:	4770      	bx	lr
   28db2:	bf00      	nop
   28db4:	200072e2 	.word	0x200072e2

00028db8 <activity_event_listener>:
int activity_event_listener(const zmk_event_t *eh) {
   28db8:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   28dba:	f028 f965 	bl	51088 <z_impl_k_uptime_ticks>
   28dbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28dc2:	fba0 0302 	umull	r0, r3, r0, r2
   28dc6:	fb02 3101 	mla	r1, r2, r1, r3
   28dca:	0bc0      	lsrs	r0, r0, #15
    activity_last_uptime = k_uptime_get();
   28dcc:	4a04      	ldr	r2, [pc, #16]	; (28de0 <activity_event_listener+0x28>)
   28dce:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   28dd2:	6010      	str	r0, [r2, #0]
}
   28dd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return set_state(ZMK_ACTIVITY_ACTIVE);
   28dd8:	2000      	movs	r0, #0
   28dda:	f7ff bfe1 	b.w	28da0 <set_state>
   28dde:	bf00      	nop
   28de0:	200041a8 	.word	0x200041a8

00028de4 <activity_work_handler>:
void activity_work_handler(struct k_work *work) {
   28de4:	b508      	push	{r3, lr}
   28de6:	f028 f94f 	bl	51088 <z_impl_k_uptime_ticks>
   28dea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28dee:	fba0 0302 	umull	r0, r3, r0, r2
   28df2:	fb02 3101 	mla	r1, r2, r1, r3
    int32_t inactive_time = current - activity_last_uptime;
   28df6:	4a08      	ldr	r2, [pc, #32]	; (28e18 <activity_work_handler+0x34>)
   28df8:	0bc3      	lsrs	r3, r0, #15
   28dfa:	6812      	ldr	r2, [r2, #0]
   28dfc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   28e00:	1a9b      	subs	r3, r3, r2
        if (inactive_time > MAX_IDLE_MS) {
   28e02:	f247 5230 	movw	r2, #30000	; 0x7530
   28e06:	4293      	cmp	r3, r2
   28e08:	dd04      	ble.n	28e14 <activity_work_handler+0x30>
}
   28e0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_state(ZMK_ACTIVITY_IDLE);
   28e0e:	2001      	movs	r0, #1
   28e10:	f7ff bfc6 	b.w	28da0 <set_state>
}
   28e14:	bd08      	pop	{r3, pc}
   28e16:	bf00      	nop
   28e18:	200041a8 	.word	0x200041a8

00028e1c <zmk_kscan_process_msgq>:

    k_msgq_put(&zmk_kscan_msgq, &ev, K_NO_WAIT);
    k_work_submit(&msg_processor.work);
}

void zmk_kscan_process_msgq(struct k_work *item) {
   28e1c:	b530      	push	{r4, r5, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   28e1e:	4c18      	ldr	r4, [pc, #96]	; (28e80 <zmk_kscan_process_msgq+0x64>)
   28e20:	b08d      	sub	sp, #52	; 0x34
   28e22:	2200      	movs	r2, #0
   28e24:	2300      	movs	r3, #0
   28e26:	a903      	add	r1, sp, #12
   28e28:	4620      	mov	r0, r4
   28e2a:	f01f f83d 	bl	47ea8 <z_impl_k_msgq_get>
    struct zmk_kscan_event ev;

    while (k_msgq_get(&zmk_kscan_msgq, &ev, K_NO_WAIT) == 0) {
   28e2e:	b108      	cbz	r0, 28e34 <zmk_kscan_process_msgq+0x18>
            (struct zmk_position_state_changed){.source = ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL,
                                                .state = pressed,
                                                .position = position,
                                                .timestamp = k_uptime_get()}));
    }
}
   28e30:	b00d      	add	sp, #52	; 0x34
   28e32:	bd30      	pop	{r4, r5, pc}
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
   28e34:	9d05      	ldr	r5, [sp, #20]
        uint32_t position = zmk_matrix_transform_row_column_to_position(ev.row, ev.column);
   28e36:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   28e3a:	f000 f857 	bl	28eec <zmk_matrix_transform_row_column_to_position>
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
   28e3e:	fab5 f585 	clz	r5, r5
   28e42:	096d      	lsrs	r5, r5, #5
        ZMK_EVENT_RAISE(new_zmk_position_state_changed(
   28e44:	23ff      	movs	r3, #255	; 0xff
   28e46:	f88d 3018 	strb.w	r3, [sp, #24]
   28e4a:	9007      	str	r0, [sp, #28]
   28e4c:	f88d 5020 	strb.w	r5, [sp, #32]
	return z_impl_k_uptime_ticks();
   28e50:	f028 f91a 	bl	51088 <z_impl_k_uptime_ticks>
   28e54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28e58:	fba0 0302 	umull	r0, r3, r0, r2
   28e5c:	fb02 3101 	mla	r1, r2, r1, r3
   28e60:	0bc0      	lsrs	r0, r0, #15
   28e62:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   28e66:	0bc9      	lsrs	r1, r1, #15
   28e68:	e88d 0003 	stmia.w	sp, {r0, r1}
   28e6c:	ab06      	add	r3, sp, #24
   28e6e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   28e72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   28e74:	f000 f87e 	bl	28f74 <new_zmk_position_state_changed>
   28e78:	f020 f98d 	bl	49196 <zmk_event_manager_raise>
                                                .timestamp = k_uptime_get()}));
   28e7c:	e7d1      	b.n	28e22 <zmk_kscan_process_msgq+0x6>
   28e7e:	bf00      	nop
   28e80:	20001234 	.word	0x20001234

00028e84 <zmk_kscan_callback>:
                               bool pressed) {
   28e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        .state = (pressed ? ZMK_KSCAN_EVENT_STATE_PRESSED : ZMK_KSCAN_EVENT_STATE_RELEASED)};
   28e86:	f083 0301 	eor.w	r3, r3, #1
    struct zmk_kscan_event ev = {
   28e8a:	e9cd 1201 	strd	r1, r2, [sp, #4]
        .state = (pressed ? ZMK_KSCAN_EVENT_STATE_PRESSED : ZMK_KSCAN_EVENT_STATE_RELEASED)};
   28e8e:	9303      	str	r3, [sp, #12]
	return z_impl_k_msgq_put(msgq, data, timeout);
   28e90:	2200      	movs	r2, #0
   28e92:	2300      	movs	r3, #0
   28e94:	a901      	add	r1, sp, #4
   28e96:	4804      	ldr	r0, [pc, #16]	; (28ea8 <zmk_kscan_callback+0x24>)
   28e98:	f01e ffb0 	bl	47dfc <z_impl_k_msgq_put>
    k_work_submit(&msg_processor.work);
   28e9c:	4803      	ldr	r0, [pc, #12]	; (28eac <zmk_kscan_callback+0x28>)
   28e9e:	f01f facf 	bl	48440 <k_work_submit>
}
   28ea2:	b005      	add	sp, #20
   28ea4:	f85d fb04 	ldr.w	pc, [sp], #4
   28ea8:	20001234 	.word	0x20001234
   28eac:	200041ac 	.word	0x200041ac

00028eb0 <zmk_kscan_init>:

int zmk_kscan_init(char *name) {
   28eb0:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   28eb2:	f01e fd79 	bl	479a8 <z_impl_device_get_binding>
    const struct device *dev = device_get_binding(name);
    if (dev == NULL) {
   28eb6:	4604      	mov	r4, r0
   28eb8:	b178      	cbz	r0, 28eda <zmk_kscan_init+0x2a>
        LOG_ERR("Failed to get the KSCAN device");
        return -EINVAL;
    }

    k_work_init(&msg_processor.work, zmk_kscan_process_msgq);
   28eba:	4909      	ldr	r1, [pc, #36]	; (28ee0 <zmk_kscan_init+0x30>)
   28ebc:	4809      	ldr	r0, [pc, #36]	; (28ee4 <zmk_kscan_init+0x34>)
   28ebe:	f027 feff 	bl	50cc0 <k_work_init>
					kscan_callback_t callback)
{
	const struct kscan_driver_api *api =
				(struct kscan_driver_api *)dev->api;

	return api->config(dev, callback);
   28ec2:	68a3      	ldr	r3, [r4, #8]
   28ec4:	4908      	ldr	r1, [pc, #32]	; (28ee8 <zmk_kscan_init+0x38>)
   28ec6:	681b      	ldr	r3, [r3, #0]
   28ec8:	4620      	mov	r0, r4
   28eca:	4798      	blx	r3
static inline int z_impl_kscan_enable_callback(const struct device *dev)
{
	const struct kscan_driver_api *api =
			(const struct kscan_driver_api *)dev->api;

	if (api->enable_callback == NULL) {
   28ecc:	68a3      	ldr	r3, [r4, #8]
   28ece:	689b      	ldr	r3, [r3, #8]
   28ed0:	b10b      	cbz	r3, 28ed6 <zmk_kscan_init+0x26>
		return -ENOSYS;
	}

	return api->enable_callback(dev);
   28ed2:	4620      	mov	r0, r4
   28ed4:	4798      	blx	r3

    kscan_config(dev, zmk_kscan_callback);
    kscan_enable_callback(dev);

    return 0;
   28ed6:	2000      	movs	r0, #0
}
   28ed8:	bd10      	pop	{r4, pc}
        return -EINVAL;
   28eda:	f06f 0015 	mvn.w	r0, #21
   28ede:	e7fb      	b.n	28ed8 <zmk_kscan_init+0x28>
   28ee0:	00028e1d 	.word	0x00028e1d
   28ee4:	200041ac 	.word	0x200041ac
   28ee8:	00028e85 	.word	0x00028e85

00028eec <zmk_matrix_transform_row_column_to_position>:
#endif

    matrix_index = (row * ZMK_MATRIX_COLS) + column;

#ifdef ZMK_KEYMAP_TRANSFORM_NODE
    return transform[matrix_index];
   28eec:	2324      	movs	r3, #36	; 0x24
   28eee:	fb03 1100 	mla	r1, r3, r0, r1
#else
    return matrix_index;
#endif /* ZMK_KEYMAP_TRANSFORM_NODE */
};
   28ef2:	4b02      	ldr	r3, [pc, #8]	; (28efc <zmk_matrix_transform_row_column_to_position+0x10>)
   28ef4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   28ef8:	4770      	bx	lr
   28efa:	bf00      	nop
   28efc:	00051b2c 	.word	0x00051b2c

00028f00 <zmk_event_manager_handle_from>:
extern struct zmk_event_type *__event_type_end[];

extern struct zmk_event_subscription __event_subscriptions_start[];
extern struct zmk_event_subscription __event_subscriptions_end[];

int zmk_event_manager_handle_from(zmk_event_t *event, uint8_t start_index) {
   28f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret = 0;
    uint8_t len = __event_subscriptions_end - __event_subscriptions_start;
   28f04:	4b13      	ldr	r3, [pc, #76]	; (28f54 <zmk_event_manager_handle_from+0x54>)
   28f06:	4e14      	ldr	r6, [pc, #80]	; (28f58 <zmk_event_manager_handle_from+0x58>)
   28f08:	eba3 0806 	sub.w	r8, r3, r6
int zmk_event_manager_handle_from(zmk_event_t *event, uint8_t start_index) {
   28f0c:	4607      	mov	r7, r0
    for (int i = start_index; i < len; i++) {
   28f0e:	460d      	mov	r5, r1
   28f10:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
   28f14:	f3c8 08c7 	ubfx	r8, r8, #3, #8
   28f18:	45a8      	cmp	r8, r5
   28f1a:	dc06      	bgt.n	28f2a <zmk_event_manager_handle_from+0x2a>
        switch (ret) {
        case ZMK_EV_EVENT_BUBBLE:
            continue;
        case ZMK_EV_EVENT_HANDLED:
            LOG_DBG("Listener handled the event");
            ret = 0;
   28f1c:	2400      	movs	r4, #0
            goto release;
        }
    }

release:
    k_free(event);
   28f1e:	4638      	mov	r0, r7
   28f20:	f028 fa58 	bl	513d4 <k_free>
    return ret;
}
   28f24:	4620      	mov	r0, r4
   28f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (ev_sub->event_type != event->event) {
   28f2a:	6832      	ldr	r2, [r6, #0]
   28f2c:	683b      	ldr	r3, [r7, #0]
   28f2e:	429a      	cmp	r2, r3
   28f30:	d10b      	bne.n	28f4a <zmk_event_manager_handle_from+0x4a>
        event->last_listener_index = i;
   28f32:	713d      	strb	r5, [r7, #4]
        ret = ev_sub->listener->callback(event);
   28f34:	6873      	ldr	r3, [r6, #4]
   28f36:	4638      	mov	r0, r7
   28f38:	681b      	ldr	r3, [r3, #0]
   28f3a:	4798      	blx	r3
        switch (ret) {
   28f3c:	2801      	cmp	r0, #1
        ret = ev_sub->listener->callback(event);
   28f3e:	4604      	mov	r4, r0
        switch (ret) {
   28f40:	d0ec      	beq.n	28f1c <zmk_event_manager_handle_from+0x1c>
   28f42:	2802      	cmp	r0, #2
   28f44:	d004      	beq.n	28f50 <zmk_event_manager_handle_from+0x50>
   28f46:	2800      	cmp	r0, #0
   28f48:	d1e9      	bne.n	28f1e <zmk_event_manager_handle_from+0x1e>
    for (int i = start_index; i < len; i++) {
   28f4a:	3501      	adds	r5, #1
   28f4c:	3608      	adds	r6, #8
   28f4e:	e7e3      	b.n	28f18 <zmk_event_manager_handle_from+0x18>
        switch (ret) {
   28f50:	2400      	movs	r4, #0
   28f52:	e7e7      	b.n	28f24 <zmk_event_manager_handle_from+0x24>
   28f54:	00054564 	.word	0x00054564
   28f58:	00054524 	.word	0x00054524

00028f5c <new_zmk_activity_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/activity_state_changed.h>

   28f5c:	b510      	push	{r4, lr}
   28f5e:	4604      	mov	r4, r0
   28f60:	200c      	movs	r0, #12
   28f62:	f028 fa3e 	bl	513e2 <k_malloc>
   28f66:	4a02      	ldr	r2, [pc, #8]	; (28f70 <new_zmk_activity_state_changed+0x14>)
   28f68:	6002      	str	r2, [r0, #0]
   28f6a:	7204      	strb	r4, [r0, #8]
   28f6c:	bd10      	pop	{r4, pc}
   28f6e:	bf00      	nop
   28f70:	00051bbc 	.word	0x00051bbc

00028f74 <new_zmk_position_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/position_state_changed.h>

   28f74:	b084      	sub	sp, #16
   28f76:	b570      	push	{r4, r5, r6, lr}
   28f78:	ac04      	add	r4, sp, #16
   28f7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   28f7e:	2020      	movs	r0, #32
   28f80:	f028 fa2f 	bl	513e2 <k_malloc>
   28f84:	4604      	mov	r4, r0
   28f86:	4b08      	ldr	r3, [pc, #32]	; (28fa8 <new_zmk_position_state_changed+0x34>)
   28f88:	f844 3b08 	str.w	r3, [r4], #8
   28f8c:	ad04      	add	r5, sp, #16
   28f8e:	4606      	mov	r6, r0
   28f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   28f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   28f94:	e895 0003 	ldmia.w	r5, {r0, r1}
   28f98:	e884 0003 	stmia.w	r4, {r0, r1}
   28f9c:	4630      	mov	r0, r6
   28f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   28fa2:	b004      	add	sp, #16
   28fa4:	4770      	bx	lr
   28fa6:	bf00      	nop
   28fa8:	00051bc0 	.word	0x00051bc0

00028fac <as_zmk_position_state_changed>:
   28fac:	6802      	ldr	r2, [r0, #0]
   28fae:	4b03      	ldr	r3, [pc, #12]	; (28fbc <as_zmk_position_state_changed+0x10>)
   28fb0:	429a      	cmp	r2, r3
   28fb2:	bf0c      	ite	eq
   28fb4:	3008      	addeq	r0, #8
   28fb6:	2000      	movne	r0, #0
   28fb8:	4770      	bx	lr
   28fba:	bf00      	nop
   28fbc:	00051bc0 	.word	0x00051bc0

00028fc0 <new_zmk_usb_conn_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/usb_conn_state_changed.h>

   28fc0:	b510      	push	{r4, lr}
   28fc2:	4604      	mov	r4, r0
   28fc4:	200c      	movs	r0, #12
   28fc6:	f028 fa0c 	bl	513e2 <k_malloc>
   28fca:	4a02      	ldr	r2, [pc, #8]	; (28fd4 <new_zmk_usb_conn_state_changed+0x14>)
   28fcc:	6002      	str	r2, [r0, #0]
   28fce:	7204      	strb	r4, [r0, #8]
   28fd0:	bd10      	pop	{r4, pc}
   28fd2:	bf00      	nop
   28fd4:	00051bc8 	.word	0x00051bc8

00028fd8 <on_keymap_binding_pressed>:

    return 0;
}

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   28fd8:	b082      	sub	sp, #8
   28fda:	b538      	push	{r3, r4, r5, lr}
   28fdc:	a904      	add	r1, sp, #16
   28fde:	e881 000c 	stmia.w	r1, {r2, r3}
   28fe2:	4605      	mov	r5, r0
   28fe4:	4811      	ldr	r0, [pc, #68]	; (2902c <on_keymap_binding_pressed+0x54>)
   28fe6:	f01e fcdf 	bl	479a8 <z_impl_device_get_binding>
   28fea:	4604      	mov	r4, r0
    const struct device *ext_power = device_get_binding("EXT_POWER");
    if (ext_power == NULL) {
   28fec:	b1a0      	cbz	r0, 29018 <on_keymap_binding_pressed+0x40>
        LOG_ERR("Unable to retrieve ext_power device: %d", binding->param1);
        return -EIO;
    }

    switch (binding->param1) {
   28fee:	686b      	ldr	r3, [r5, #4]
   28ff0:	2b01      	cmp	r3, #1
   28ff2:	d00c      	beq.n	2900e <on_keymap_binding_pressed+0x36>
   28ff4:	2b02      	cmp	r3, #2
   28ff6:	d005      	beq.n	29004 <on_keymap_binding_pressed+0x2c>
   28ff8:	b9a3      	cbnz	r3, 29024 <on_keymap_binding_pressed+0x4c>
    default:
        LOG_ERR("Unknown ext_power command: %d", binding->param1);
    }

    return -ENOTSUP;
}
   28ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   28ffe:	b002      	add	sp, #8
            return ext_power_disable(ext_power);
   29000:	f020 b8e1 	b.w	491c6 <ext_power_disable>
        if (ext_power_get(ext_power) > 0)
   29004:	f020 f8e6 	bl	491d4 <ext_power_get>
   29008:	2800      	cmp	r0, #0
            return ext_power_disable(ext_power);
   2900a:	4620      	mov	r0, r4
        if (ext_power_get(ext_power) > 0)
   2900c:	dcf5      	bgt.n	28ffa <on_keymap_binding_pressed+0x22>
}
   2900e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29012:	b002      	add	sp, #8
            return ext_power_enable(ext_power);
   29014:	f020 b8d0 	b.w	491b8 <ext_power_enable>
        return -EIO;
   29018:	f06f 0004 	mvn.w	r0, #4
}
   2901c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29020:	b002      	add	sp, #8
   29022:	4770      	bx	lr
    switch (binding->param1) {
   29024:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29028:	e7f8      	b.n	2901c <on_keymap_binding_pressed+0x44>
   2902a:	bf00      	nop
   2902c:	00053d35 	.word	0x00053d35

00029030 <on_keymap_binding_convert_central_state_dependent_params>:
                                                         struct zmk_behavior_binding_event event) {
   29030:	b082      	sub	sp, #8
   29032:	b510      	push	{r4, lr}
   29034:	a902      	add	r1, sp, #8
   29036:	e881 000c 	stmia.w	r1, {r2, r3}
   2903a:	4604      	mov	r4, r0
   2903c:	480b      	ldr	r0, [pc, #44]	; (2906c <on_keymap_binding_convert_central_state_dependent_params+0x3c>)
   2903e:	f01e fcb3 	bl	479a8 <z_impl_device_get_binding>
    if (ext_power == NULL) {
   29042:	b178      	cbz	r0, 29064 <on_keymap_binding_convert_central_state_dependent_params+0x34>
    if (binding->param1 == EXT_POWER_TOGGLE_CMD) {
   29044:	6863      	ldr	r3, [r4, #4]
   29046:	2b02      	cmp	r3, #2
   29048:	d004      	beq.n	29054 <on_keymap_binding_convert_central_state_dependent_params+0x24>
    return 0;
   2904a:	2000      	movs	r0, #0
}
   2904c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29050:	b002      	add	sp, #8
   29052:	4770      	bx	lr
        binding->param1 = ext_power_get(ext_power) > 0 ? EXT_POWER_OFF_CMD : EXT_POWER_ON_CMD;
   29054:	f020 f8be 	bl	491d4 <ext_power_get>
   29058:	2800      	cmp	r0, #0
   2905a:	bfcc      	ite	gt
   2905c:	2000      	movgt	r0, #0
   2905e:	2001      	movle	r0, #1
   29060:	6060      	str	r0, [r4, #4]
   29062:	e7f2      	b.n	2904a <on_keymap_binding_convert_central_state_dependent_params+0x1a>
        return -EIO;
   29064:	f06f 0004 	mvn.w	r0, #4
   29068:	e7f0      	b.n	2904c <on_keymap_binding_convert_central_state_dependent_params+0x1c>
   2906a:	bf00      	nop
   2906c:	00053d35 	.word	0x00053d35

00029070 <zmk_hid_register_mod>:
#define GET_MODIFIERS (keyboard_report.body.modifiers)

zmk_mod_flags_t zmk_hid_get_explicit_mods() { return explicit_modifiers; }

int zmk_hid_register_mod(zmk_mod_t modifier) {
    explicit_modifier_counts[modifier]++;
   29070:	4a0d      	ldr	r2, [pc, #52]	; (290a8 <zmk_hid_register_mod+0x38>)
   29072:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   29076:	3301      	adds	r3, #1
   29078:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    LOG_DBG("Modifier %d count %d", modifier, explicit_modifier_counts[modifier]);
    WRITE_BIT(explicit_modifiers, modifier, true);
   2907c:	4a0b      	ldr	r2, [pc, #44]	; (290ac <zmk_hid_register_mod+0x3c>)
   2907e:	2301      	movs	r3, #1
   29080:	7811      	ldrb	r1, [r2, #0]
   29082:	4083      	lsls	r3, r0
   29084:	430b      	orrs	r3, r1
    zmk_mod_flags_t current = GET_MODIFIERS;
    SET_MODIFIERS(explicit_modifiers);
   29086:	490a      	ldr	r1, [pc, #40]	; (290b0 <zmk_hid_register_mod+0x40>)
   29088:	7809      	ldrb	r1, [r1, #0]
    WRITE_BIT(explicit_modifiers, modifier, true);
   2908a:	b2db      	uxtb	r3, r3
   2908c:	7013      	strb	r3, [r2, #0]
    SET_MODIFIERS(explicit_modifiers);
   2908e:	ea23 0301 	bic.w	r3, r3, r1
   29092:	4908      	ldr	r1, [pc, #32]	; (290b4 <zmk_hid_register_mod+0x44>)
    zmk_mod_flags_t current = GET_MODIFIERS;
   29094:	4a08      	ldr	r2, [pc, #32]	; (290b8 <zmk_hid_register_mod+0x48>)
    SET_MODIFIERS(explicit_modifiers);
   29096:	7809      	ldrb	r1, [r1, #0]
    zmk_mod_flags_t current = GET_MODIFIERS;
   29098:	7850      	ldrb	r0, [r2, #1]
    SET_MODIFIERS(explicit_modifiers);
   2909a:	430b      	orrs	r3, r1
    return current == GET_MODIFIERS ? 0 : 1;
}
   2909c:	1a18      	subs	r0, r3, r0
    SET_MODIFIERS(explicit_modifiers);
   2909e:	7053      	strb	r3, [r2, #1]
}
   290a0:	bf18      	it	ne
   290a2:	2001      	movne	r0, #1
   290a4:	4770      	bx	lr
   290a6:	bf00      	nop
   290a8:	200041bc 	.word	0x200041bc
   290ac:	200072e5 	.word	0x200072e5
   290b0:	200072e3 	.word	0x200072e3
   290b4:	200072e4 	.word	0x200072e4
   290b8:	20000fd9 	.word	0x20000fd9

000290bc <zmk_hid_unregister_mod>:

int zmk_hid_unregister_mod(zmk_mod_t modifier) {
    if (explicit_modifier_counts[modifier] <= 0) {
   290bc:	4a11      	ldr	r2, [pc, #68]	; (29104 <zmk_hid_unregister_mod+0x48>)
   290be:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   290c2:	2b00      	cmp	r3, #0
int zmk_hid_unregister_mod(zmk_mod_t modifier) {
   290c4:	b510      	push	{r4, lr}
    if (explicit_modifier_counts[modifier] <= 0) {
   290c6:	dd19      	ble.n	290fc <zmk_hid_unregister_mod+0x40>
        LOG_ERR("Tried to unregister modifier %d too often", modifier);
        return -EINVAL;
    }
    explicit_modifier_counts[modifier]--;
   290c8:	3b01      	subs	r3, #1
   290ca:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    LOG_DBG("Modifier %d count: %d", modifier, explicit_modifier_counts[modifier]);
    if (explicit_modifier_counts[modifier] == 0) {
   290ce:	4a0e      	ldr	r2, [pc, #56]	; (29108 <zmk_hid_unregister_mod+0x4c>)
   290d0:	b92b      	cbnz	r3, 290de <zmk_hid_unregister_mod+0x22>
        LOG_DBG("Modifier %d released", modifier);
        WRITE_BIT(explicit_modifiers, modifier, false);
   290d2:	7813      	ldrb	r3, [r2, #0]
   290d4:	2101      	movs	r1, #1
   290d6:	4081      	lsls	r1, r0
   290d8:	ea23 0301 	bic.w	r3, r3, r1
   290dc:	7013      	strb	r3, [r2, #0]
    }
    zmk_mod_flags_t current = GET_MODIFIERS;
    SET_MODIFIERS(explicit_modifiers);
   290de:	480b      	ldr	r0, [pc, #44]	; (2910c <zmk_hid_unregister_mod+0x50>)
    zmk_mod_flags_t current = GET_MODIFIERS;
   290e0:	4b0b      	ldr	r3, [pc, #44]	; (29110 <zmk_hid_unregister_mod+0x54>)
    SET_MODIFIERS(explicit_modifiers);
   290e2:	7804      	ldrb	r4, [r0, #0]
   290e4:	7810      	ldrb	r0, [r2, #0]
   290e6:	4a0b      	ldr	r2, [pc, #44]	; (29114 <zmk_hid_unregister_mod+0x58>)
    zmk_mod_flags_t current = GET_MODIFIERS;
   290e8:	7859      	ldrb	r1, [r3, #1]
    SET_MODIFIERS(explicit_modifiers);
   290ea:	7812      	ldrb	r2, [r2, #0]
   290ec:	ea20 0004 	bic.w	r0, r0, r4
   290f0:	4310      	orrs	r0, r2
   290f2:	7058      	strb	r0, [r3, #1]
    return current == GET_MODIFIERS ? 0 : 1;
   290f4:	1a40      	subs	r0, r0, r1
   290f6:	bf18      	it	ne
   290f8:	2001      	movne	r0, #1
}
   290fa:	bd10      	pop	{r4, pc}
        return -EINVAL;
   290fc:	f06f 0015 	mvn.w	r0, #21
   29100:	e7fb      	b.n	290fa <zmk_hid_unregister_mod+0x3e>
   29102:	bf00      	nop
   29104:	200041bc 	.word	0x200041bc
   29108:	200072e5 	.word	0x200072e5
   2910c:	200072e3 	.word	0x200072e3
   29110:	20000fd9 	.word	0x20000fd9
   29114:	200072e4 	.word	0x200072e4

00029118 <zmk_hid_implicit_modifiers_press>:
        if (val) {                                                                                 \
            break;                                                                                 \
        }                                                                                          \
    }

int zmk_hid_implicit_modifiers_press(zmk_mod_flags_t new_implicit_modifiers) {
   29118:	b510      	push	{r4, lr}
    implicit_modifiers = new_implicit_modifiers;
   2911a:	4b08      	ldr	r3, [pc, #32]	; (2913c <zmk_hid_implicit_modifiers_press+0x24>)
    zmk_mod_flags_t current = GET_MODIFIERS;
   2911c:	4a08      	ldr	r2, [pc, #32]	; (29140 <zmk_hid_implicit_modifiers_press+0x28>)
    implicit_modifiers = new_implicit_modifiers;
   2911e:	7018      	strb	r0, [r3, #0]
    SET_MODIFIERS(explicit_modifiers);
   29120:	4b08      	ldr	r3, [pc, #32]	; (29144 <zmk_hid_implicit_modifiers_press+0x2c>)
    zmk_mod_flags_t current = GET_MODIFIERS;
   29122:	7851      	ldrb	r1, [r2, #1]
    SET_MODIFIERS(explicit_modifiers);
   29124:	781c      	ldrb	r4, [r3, #0]
   29126:	4b08      	ldr	r3, [pc, #32]	; (29148 <zmk_hid_implicit_modifiers_press+0x30>)
   29128:	781b      	ldrb	r3, [r3, #0]
   2912a:	ea23 0304 	bic.w	r3, r3, r4
   2912e:	4318      	orrs	r0, r3
   29130:	7050      	strb	r0, [r2, #1]
    return current == GET_MODIFIERS ? 0 : 1;
}
   29132:	1a40      	subs	r0, r0, r1
   29134:	bf18      	it	ne
   29136:	2001      	movne	r0, #1
   29138:	bd10      	pop	{r4, pc}
   2913a:	bf00      	nop
   2913c:	200072e4 	.word	0x200072e4
   29140:	20000fd9 	.word	0x20000fd9
   29144:	200072e3 	.word	0x200072e3
   29148:	200072e5 	.word	0x200072e5

0002914c <zmk_hid_implicit_modifiers_release>:

int zmk_hid_implicit_modifiers_release() {
    implicit_modifiers = 0;
   2914c:	4b07      	ldr	r3, [pc, #28]	; (2916c <zmk_hid_implicit_modifiers_release+0x20>)
   2914e:	2200      	movs	r2, #0
   29150:	701a      	strb	r2, [r3, #0]
    zmk_mod_flags_t current = GET_MODIFIERS;
    SET_MODIFIERS(explicit_modifiers);
   29152:	4b07      	ldr	r3, [pc, #28]	; (29170 <zmk_hid_implicit_modifiers_release+0x24>)
    zmk_mod_flags_t current = GET_MODIFIERS;
   29154:	4a07      	ldr	r2, [pc, #28]	; (29174 <zmk_hid_implicit_modifiers_release+0x28>)
    SET_MODIFIERS(explicit_modifiers);
   29156:	7819      	ldrb	r1, [r3, #0]
   29158:	4b07      	ldr	r3, [pc, #28]	; (29178 <zmk_hid_implicit_modifiers_release+0x2c>)
    zmk_mod_flags_t current = GET_MODIFIERS;
   2915a:	7850      	ldrb	r0, [r2, #1]
    SET_MODIFIERS(explicit_modifiers);
   2915c:	781b      	ldrb	r3, [r3, #0]
   2915e:	ea23 0301 	bic.w	r3, r3, r1
    return current == GET_MODIFIERS ? 0 : 1;
}
   29162:	1a18      	subs	r0, r3, r0
    SET_MODIFIERS(explicit_modifiers);
   29164:	7053      	strb	r3, [r2, #1]
}
   29166:	bf18      	it	ne
   29168:	2001      	movne	r0, #1
   2916a:	4770      	bx	lr
   2916c:	200072e4 	.word	0x200072e4
   29170:	200072e3 	.word	0x200072e3
   29174:	20000fd9 	.word	0x20000fd9
   29178:	200072e5 	.word	0x200072e5

0002917c <zmk_hid_keyboard_press>:
    SET_MODIFIERS(explicit_modifiers);
    return current == GET_MODIFIERS ? 0 : 1;
}

int zmk_hid_keyboard_press(zmk_key_t code) {
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   2917c:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
   29180:	2b07      	cmp	r3, #7
   29182:	d803      	bhi.n	2918c <zmk_hid_keyboard_press+0x10>
        return zmk_hid_register_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
   29184:	3020      	adds	r0, #32
   29186:	b2c0      	uxtb	r0, r0
   29188:	f7ff bf72 	b.w	29070 <zmk_hid_register_mod>
   2918c:	4b06      	ldr	r3, [pc, #24]	; (291a8 <zmk_hid_keyboard_press+0x2c>)
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   2918e:	2206      	movs	r2, #6
    TOGGLE_KEYBOARD(0U, usage);
   29190:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   29194:	b119      	cbz	r1, 2919e <zmk_hid_keyboard_press+0x22>
   29196:	3a01      	subs	r2, #1
   29198:	d1fa      	bne.n	29190 <zmk_hid_keyboard_press+0x14>
    }
    select_keyboard_usage(code);
    return 0;
};
   2919a:	2000      	movs	r0, #0
   2919c:	4770      	bx	lr
    TOGGLE_KEYBOARD(0U, usage);
   2919e:	7018      	strb	r0, [r3, #0]
   291a0:	2800      	cmp	r0, #0
   291a2:	d0f8      	beq.n	29196 <zmk_hid_keyboard_press+0x1a>
   291a4:	e7f9      	b.n	2919a <zmk_hid_keyboard_press+0x1e>
   291a6:	bf00      	nop
   291a8:	20000fdb 	.word	0x20000fdb

000291ac <zmk_hid_keyboard_release>:

int zmk_hid_keyboard_release(zmk_key_t code) {
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   291ac:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
   291b0:	2b07      	cmp	r3, #7
int zmk_hid_keyboard_release(zmk_key_t code) {
   291b2:	b410      	push	{r4}
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   291b4:	d804      	bhi.n	291c0 <zmk_hid_keyboard_release+0x14>
        return zmk_hid_unregister_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
   291b6:	3020      	adds	r0, #32
    }
    deselect_keyboard_usage(code);
    return 0;
};
   291b8:	bc10      	pop	{r4}
        return zmk_hid_unregister_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
   291ba:	b2c0      	uxtb	r0, r0
   291bc:	f7ff bf7e 	b.w	290bc <zmk_hid_unregister_mod>
    TOGGLE_KEYBOARD(usage, 0U);
   291c0:	2300      	movs	r3, #0
   291c2:	4a06      	ldr	r2, [pc, #24]	; (291dc <zmk_hid_keyboard_release+0x30>)
   291c4:	4619      	mov	r1, r3
   291c6:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   291ca:	3301      	adds	r3, #1
   291cc:	42a0      	cmp	r0, r4
   291ce:	bf08      	it	eq
   291d0:	7011      	strbeq	r1, [r2, #0]
   291d2:	2b06      	cmp	r3, #6
   291d4:	d1f7      	bne.n	291c6 <zmk_hid_keyboard_release+0x1a>
};
   291d6:	2000      	movs	r0, #0
   291d8:	bc10      	pop	{r4}
   291da:	4770      	bx	lr
   291dc:	20000fdb 	.word	0x20000fdb

000291e0 <zmk_hid_keyboard_clear>:
        return zmk_hid_mod_is_pressed(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
    }
    return check_keyboard_usage(code);
}

void zmk_hid_keyboard_clear() { memset(&keyboard_report.body, 0, sizeof(keyboard_report.body)); }
   291e0:	4802      	ldr	r0, [pc, #8]	; (291ec <zmk_hid_keyboard_clear+0xc>)
   291e2:	2208      	movs	r2, #8
   291e4:	2100      	movs	r1, #0
   291e6:	f022 bdc9 	b.w	4bd7c <memset>
   291ea:	bf00      	nop
   291ec:	20000fda 	.word	0x20000fda

000291f0 <zmk_hid_consumer_press>:

int zmk_hid_consumer_press(zmk_key_t code) {
   291f0:	b510      	push	{r4, lr}
    TOGGLE_CONSUMER(0U, code);
   291f2:	4908      	ldr	r1, [pc, #32]	; (29214 <zmk_hid_consumer_press+0x24>)
   291f4:	2300      	movs	r3, #0
   291f6:	eb01 0243 	add.w	r2, r1, r3, lsl #1
   291fa:	f8b2 4001 	ldrh.w	r4, [r2, #1]
   291fe:	b124      	cbz	r4, 2920a <zmk_hid_consumer_press+0x1a>
   29200:	3301      	adds	r3, #1
   29202:	2b06      	cmp	r3, #6
   29204:	d1f7      	bne.n	291f6 <zmk_hid_consumer_press+0x6>
    return 0;
};
   29206:	2000      	movs	r0, #0
   29208:	bd10      	pop	{r4, pc}
    TOGGLE_CONSUMER(0U, code);
   2920a:	f8a2 0001 	strh.w	r0, [r2, #1]
   2920e:	2800      	cmp	r0, #0
   29210:	d0f6      	beq.n	29200 <zmk_hid_consumer_press+0x10>
   29212:	e7f8      	b.n	29206 <zmk_hid_consumer_press+0x16>
   29214:	20000fcc 	.word	0x20000fcc

00029218 <zmk_hid_consumer_release>:

int zmk_hid_consumer_release(zmk_key_t code) {
   29218:	b530      	push	{r4, r5, lr}
    TOGGLE_CONSUMER(code, 0U);
   2921a:	2300      	movs	r3, #0
   2921c:	4c07      	ldr	r4, [pc, #28]	; (2923c <zmk_hid_consumer_release+0x24>)
   2921e:	4619      	mov	r1, r3
   29220:	eb04 0243 	add.w	r2, r4, r3, lsl #1
   29224:	3301      	adds	r3, #1
   29226:	f8b2 5001 	ldrh.w	r5, [r2, #1]
   2922a:	4285      	cmp	r5, r0
   2922c:	bf04      	itt	eq
   2922e:	7051      	strbeq	r1, [r2, #1]
   29230:	7091      	strbeq	r1, [r2, #2]
   29232:	2b06      	cmp	r3, #6
   29234:	d1f4      	bne.n	29220 <zmk_hid_consumer_release+0x8>
    return 0;
};
   29236:	2000      	movs	r0, #0
   29238:	bd30      	pop	{r4, r5, pc}
   2923a:	bf00      	nop
   2923c:	20000fcc 	.word	0x20000fcc

00029240 <zmk_hid_consumer_clear>:

void zmk_hid_consumer_clear() { memset(&consumer_report.body, 0, sizeof(consumer_report.body)); }
   29240:	4802      	ldr	r0, [pc, #8]	; (2924c <zmk_hid_consumer_clear+0xc>)
   29242:	220c      	movs	r2, #12
   29244:	2100      	movs	r1, #0
   29246:	f022 bd99 	b.w	4bd7c <memset>
   2924a:	bf00      	nop
   2924c:	20000fcd 	.word	0x20000fcd

00029250 <zmk_hid_get_keyboard_report>:
    return false;
}

struct zmk_hid_keyboard_report *zmk_hid_get_keyboard_report() {
    return &keyboard_report;
}
   29250:	4800      	ldr	r0, [pc, #0]	; (29254 <zmk_hid_get_keyboard_report+0x4>)
   29252:	4770      	bx	lr
   29254:	20000fd9 	.word	0x20000fd9

00029258 <zmk_hid_get_consumer_report>:

struct zmk_hid_consumer_report *zmk_hid_get_consumer_report() {
    return &consumer_report;
}
   29258:	4800      	ldr	r0, [pc, #0]	; (2925c <zmk_hid_get_consumer_report+0x4>)
   2925a:	4770      	bx	lr
   2925c:	20000fcc 	.word	0x20000fcc

00029260 <handle_control_binding>:
#define IS_TAP_TIME(dev) ZM_IS_NODE_MATCH(dev, TAP_TIME)
#define IS_WAIT_TIME(dev) ZM_IS_NODE_MATCH(dev, WAIT_TIME)
#define IS_PAUSE(dev) ZM_IS_NODE_MATCH(dev, WAIT_REL)

static bool handle_control_binding(struct behavior_macro_trigger_state *state,
                                   const struct zmk_behavior_binding *binding) {
   29260:	b538      	push	{r3, r4, r5, lr}
   29262:	460c      	mov	r4, r1
   29264:	4605      	mov	r5, r0
    if (IS_TAP_MODE(binding->behavior_dev)) {
   29266:	4914      	ldr	r1, [pc, #80]	; (292b8 <handle_control_binding+0x58>)
   29268:	6820      	ldr	r0, [r4, #0]
   2926a:	f022 fd4c 	bl	4bd06 <strcmp>
   2926e:	b910      	cbnz	r0, 29276 <handle_control_binding+0x16>
        state->mode = MACRO_MODE_TAP;
   29270:	7228      	strb	r0, [r5, #8]
        LOG_DBG("macro wait time set: %d", state->wait_ms);
    } else {
        return false;
    }

    return true;
   29272:	2001      	movs	r0, #1
}
   29274:	bd38      	pop	{r3, r4, r5, pc}
    } else if (IS_PRESS_MODE(binding->behavior_dev)) {
   29276:	4911      	ldr	r1, [pc, #68]	; (292bc <handle_control_binding+0x5c>)
   29278:	6820      	ldr	r0, [r4, #0]
   2927a:	f022 fd44 	bl	4bd06 <strcmp>
   2927e:	b910      	cbnz	r0, 29286 <handle_control_binding+0x26>
        state->mode = MACRO_MODE_PRESS;
   29280:	2301      	movs	r3, #1
        state->mode = MACRO_MODE_RELEASE;
   29282:	722b      	strb	r3, [r5, #8]
        LOG_DBG("macro mode set: release");
   29284:	e7f5      	b.n	29272 <handle_control_binding+0x12>
    } else if (IS_RELEASE_MODE(binding->behavior_dev)) {
   29286:	490e      	ldr	r1, [pc, #56]	; (292c0 <handle_control_binding+0x60>)
   29288:	6820      	ldr	r0, [r4, #0]
   2928a:	f022 fd3c 	bl	4bd06 <strcmp>
   2928e:	b908      	cbnz	r0, 29294 <handle_control_binding+0x34>
        state->mode = MACRO_MODE_RELEASE;
   29290:	2302      	movs	r3, #2
   29292:	e7f6      	b.n	29282 <handle_control_binding+0x22>
    } else if (IS_TAP_TIME(binding->behavior_dev)) {
   29294:	490b      	ldr	r1, [pc, #44]	; (292c4 <handle_control_binding+0x64>)
   29296:	6820      	ldr	r0, [r4, #0]
   29298:	f022 fd35 	bl	4bd06 <strcmp>
   2929c:	b910      	cbnz	r0, 292a4 <handle_control_binding+0x44>
        state->tap_ms = binding->param1;
   2929e:	6863      	ldr	r3, [r4, #4]
   292a0:	606b      	str	r3, [r5, #4]
        LOG_DBG("macro tap time set: %d", state->tap_ms);
   292a2:	e7e6      	b.n	29272 <handle_control_binding+0x12>
    } else if (IS_WAIT_TIME(binding->behavior_dev)) {
   292a4:	4908      	ldr	r1, [pc, #32]	; (292c8 <handle_control_binding+0x68>)
   292a6:	6820      	ldr	r0, [r4, #0]
   292a8:	f022 fd2d 	bl	4bd06 <strcmp>
   292ac:	b910      	cbnz	r0, 292b4 <handle_control_binding+0x54>
        state->wait_ms = binding->param1;
   292ae:	6863      	ldr	r3, [r4, #4]
   292b0:	602b      	str	r3, [r5, #0]
        LOG_DBG("macro wait time set: %d", state->wait_ms);
   292b2:	e7de      	b.n	29272 <handle_control_binding+0x12>
        return false;
   292b4:	2000      	movs	r0, #0
   292b6:	e7dd      	b.n	29274 <handle_control_binding+0x14>
   292b8:	00053d52 	.word	0x00053d52
   292bc:	00053d5a 	.word	0x00053d5a
   292c0:	00053d64 	.word	0x00053d64
   292c4:	00053d6c 	.word	0x00053d6c
   292c8:	00053d79 	.word	0x00053d79

000292cc <behavior_macro_init>:

static int behavior_macro_init(const struct device *dev) {
   292cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    const struct behavior_macro_config *cfg = dev->config;
   292d0:	f8d0 8004 	ldr.w	r8, [r0, #4]
    struct behavior_macro_state *state = dev->data;
   292d4:	6907      	ldr	r7, [r0, #16]
    state->press_bindings_count = cfg->count;
   292d6:	f8d8 3008 	ldr.w	r3, [r8, #8]

    LOG_DBG("Precalculate initial release state:");
    for (int i = 0; i < cfg->count; i++) {
        if (handle_control_binding(&state->release_state, &cfg->bindings[i])) {
            // Updated state used for initial state on release.
        } else if (IS_PAUSE(cfg->bindings[i].behavior_dev)) {
   292da:	f8df 9048 	ldr.w	r9, [pc, #72]	; 29324 <behavior_macro_init+0x58>
    state->press_bindings_count = cfg->count;
   292de:	613b      	str	r3, [r7, #16]
    state->release_state.count = 0;
   292e0:	2400      	movs	r4, #0
    state->release_state.start_index = cfg->count;
   292e2:	817b      	strh	r3, [r7, #10]
    state->release_state.count = 0;
   292e4:	81bc      	strh	r4, [r7, #12]
    for (int i = 0; i < cfg->count; i++) {
   292e6:	f108 060c 	add.w	r6, r8, #12
   292ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
   292ee:	42a3      	cmp	r3, r4
   292f0:	d911      	bls.n	29316 <behavior_macro_init+0x4a>
        if (handle_control_binding(&state->release_state, &cfg->bindings[i])) {
   292f2:	4631      	mov	r1, r6
   292f4:	4638      	mov	r0, r7
   292f6:	f7ff ffb3 	bl	29260 <handle_control_binding>
   292fa:	1c65      	adds	r5, r4, #1
   292fc:	b970      	cbnz	r0, 2931c <behavior_macro_init+0x50>
        } else if (IS_PAUSE(cfg->bindings[i].behavior_dev)) {
   292fe:	6830      	ldr	r0, [r6, #0]
   29300:	4649      	mov	r1, r9
   29302:	f022 fd00 	bl	4bd06 <strcmp>
   29306:	b948      	cbnz	r0, 2931c <behavior_macro_init+0x50>
            state->release_state.start_index = i + 1;
            state->release_state.count = cfg->count - state->release_state.start_index;
   29308:	f8d8 3008 	ldr.w	r3, [r8, #8]
            state->press_bindings_count = i;
   2930c:	613c      	str	r4, [r7, #16]
            state->release_state.start_index = i + 1;
   2930e:	b2ad      	uxth	r5, r5
            state->release_state.count = cfg->count - state->release_state.start_index;
   29310:	1b5b      	subs	r3, r3, r5
            state->release_state.start_index = i + 1;
   29312:	817d      	strh	r5, [r7, #10]
            state->release_state.count = cfg->count - state->release_state.start_index;
   29314:	81bb      	strh	r3, [r7, #12]
            // Ignore regular invokable bindings
        }
    }

    return 0;
};
   29316:	2000      	movs	r0, #0
   29318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    for (int i = 0; i < cfg->count; i++) {
   2931c:	462c      	mov	r4, r5
   2931e:	360c      	adds	r6, #12
   29320:	e7e3      	b.n	292ea <behavior_macro_init+0x1e>
   29322:	bf00      	nop
   29324:	00053d87 	.word	0x00053d87

00029328 <find_tap_dance>:
    struct k_work_delayable release_timer;
};

struct active_tap_dance active_tap_dances[ZMK_BHV_TAP_DANCE_MAX_HELD] = {};

static struct active_tap_dance *find_tap_dance(uint32_t position) {
   29328:	b510      	push	{r4, lr}
   2932a:	4b09      	ldr	r3, [pc, #36]	; (29350 <find_tap_dance+0x28>)
    for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
   2932c:	2100      	movs	r1, #0
   2932e:	461a      	mov	r2, r3
        if (active_tap_dances[i].position == position && !active_tap_dances[i].timer_cancelled) {
   29330:	685c      	ldr	r4, [r3, #4]
   29332:	4284      	cmp	r4, r0
   29334:	d105      	bne.n	29342 <find_tap_dance+0x1a>
   29336:	7e5c      	ldrb	r4, [r3, #25]
   29338:	b91c      	cbnz	r4, 29342 <find_tap_dance+0x1a>
            return &active_tap_dances[i];
   2933a:	2358      	movs	r3, #88	; 0x58
   2933c:	fb03 2001 	mla	r0, r3, r1, r2
        }
    }
    return NULL;
}
   29340:	bd10      	pop	{r4, pc}
    for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
   29342:	3101      	adds	r1, #1
   29344:	290a      	cmp	r1, #10
   29346:	f103 0358 	add.w	r3, r3, #88	; 0x58
   2934a:	d1f1      	bne.n	29330 <find_tap_dance+0x8>
    return NULL;
   2934c:	2000      	movs	r0, #0
   2934e:	e7f7      	b.n	29340 <find_tap_dance+0x18>
   29350:	20001518 	.word	0x20001518

00029354 <behavior_tap_dance_init>:
        }
    }
    return ZMK_EV_EVENT_BUBBLE;
}

static int behavior_tap_dance_init(const struct device *dev) {
   29354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    static bool init_first_run = true;
    if (init_first_run) {
   29358:	4e0b      	ldr	r6, [pc, #44]	; (29388 <behavior_tap_dance_init+0x34>)
   2935a:	7833      	ldrb	r3, [r6, #0]
   2935c:	b183      	cbz	r3, 29380 <behavior_tap_dance_init+0x2c>
   2935e:	4c0b      	ldr	r4, [pc, #44]	; (2938c <behavior_tap_dance_init+0x38>)
        for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
            k_work_init_delayable(&active_tap_dances[i].release_timer,
   29360:	f8df 802c 	ldr.w	r8, [pc, #44]	; 29390 <behavior_tap_dance_init+0x3c>
        for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
   29364:	2500      	movs	r5, #0
    tap_dance->position = ZMK_BHV_TAP_DANCE_POSITION_FREE;
   29366:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
            k_work_init_delayable(&active_tap_dances[i].release_timer,
   2936a:	4620      	mov	r0, r4
   2936c:	4641      	mov	r1, r8
        for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
   2936e:	3501      	adds	r5, #1
            k_work_init_delayable(&active_tap_dances[i].release_timer,
   29370:	f027 fcdc 	bl	50d2c <k_work_init_delayable>
        for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
   29374:	2d0a      	cmp	r5, #10
    tap_dance->position = ZMK_BHV_TAP_DANCE_POSITION_FREE;
   29376:	f844 7c24 	str.w	r7, [r4, #-36]
        for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
   2937a:	f104 0458 	add.w	r4, r4, #88	; 0x58
   2937e:	d1f4      	bne.n	2936a <behavior_tap_dance_init+0x16>
                                  behavior_tap_dance_timer_handler);
            clear_tap_dance(&active_tap_dances[i]);
        }
    }
    init_first_run = false;
   29380:	2000      	movs	r0, #0
   29382:	7030      	strb	r0, [r6, #0]
    return 0;
}
   29384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29388:	20000fe2 	.word	0x20000fe2
   2938c:	20001540 	.word	0x20001540
   29390:	00049549 	.word	0x00049549

00029394 <on_tap_dance_binding_pressed>:
                                        struct zmk_behavior_binding_event event) {
   29394:	b082      	sub	sp, #8
   29396:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2939a:	a908      	add	r1, sp, #32
   2939c:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   293a0:	6800      	ldr	r0, [r0, #0]
   293a2:	e9dd 570a 	ldrd	r5, r7, [sp, #40]	; 0x28
   293a6:	461e      	mov	r6, r3
   293a8:	f01e fafe 	bl	479a8 <z_impl_device_get_binding>
    const struct behavior_tap_dance_config *cfg = dev->config;
   293ac:	f8d0 8004 	ldr.w	r8, [r0, #4]
    tap_dance = find_tap_dance(event.position);
   293b0:	4630      	mov	r0, r6
   293b2:	f7ff ffb9 	bl	29328 <find_tap_dance>
    if (tap_dance == NULL) {
   293b6:	4604      	mov	r4, r0
   293b8:	b9a8      	cbnz	r0, 293e6 <on_tap_dance_binding_pressed+0x52>
   293ba:	4b32      	ldr	r3, [pc, #200]	; (29484 <on_tap_dance_binding_pressed+0xf0>)
    for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
   293bc:	4601      	mov	r1, r0
   293be:	461a      	mov	r2, r3
        if (ref_dance->position == ZMK_BHV_TAP_DANCE_POSITION_FREE) {
   293c0:	6858      	ldr	r0, [r3, #4]
   293c2:	3001      	adds	r0, #1
   293c4:	d12c      	bne.n	29420 <on_tap_dance_binding_pressed+0x8c>
        struct active_tap_dance *const ref_dance = &active_tap_dances[i];
   293c6:	2358      	movs	r3, #88	; 0x58
   293c8:	4359      	muls	r1, r3
            ref_dance->counter = 0;
   293ca:	2300      	movs	r3, #0
        struct active_tap_dance *const ref_dance = &active_tap_dances[i];
   293cc:	1854      	adds	r4, r2, r1
            ref_dance->counter = 0;
   293ce:	5053      	str	r3, [r2, r1]
            ref_dance->release_at = 0;
   293d0:	2000      	movs	r0, #0
   293d2:	2100      	movs	r1, #0
   293d4:	e9c4 0108 	strd	r0, r1, [r4, #32]
            ref_dance->is_pressed = true;
   293d8:	2201      	movs	r2, #1
            ref_dance->position = position;
   293da:	6066      	str	r6, [r4, #4]
            ref_dance->config = config;
   293dc:	f8c4 8014 	str.w	r8, [r4, #20]
            ref_dance->is_pressed = true;
   293e0:	7422      	strb	r2, [r4, #16]
            ref_dance->timer_started = true;
   293e2:	8322      	strh	r2, [r4, #24]
            ref_dance->tap_dance_decided = false;
   293e4:	76a3      	strb	r3, [r4, #26]
    tap_dance->is_pressed = true;
   293e6:	f04f 0901 	mov.w	r9, #1
    int timer_cancel_result = k_work_cancel_delayable(&tap_dance->release_timer);
   293ea:	f104 0628 	add.w	r6, r4, #40	; 0x28
    tap_dance->is_pressed = true;
   293ee:	f884 9010 	strb.w	r9, [r4, #16]
    int timer_cancel_result = k_work_cancel_delayable(&tap_dance->release_timer);
   293f2:	4630      	mov	r0, r6
   293f4:	f027 fca8 	bl	50d48 <k_work_cancel_delayable>
    if (tap_dance->counter < cfg->behavior_count) {
   293f8:	6823      	ldr	r3, [r4, #0]
   293fa:	f8d8 2004 	ldr.w	r2, [r8, #4]
    if (timer_cancel_result == -EINPROGRESS) {
   293fe:	3077      	adds	r0, #119	; 0x77
        tap_dance->timer_cancelled = true;
   29400:	bf08      	it	eq
   29402:	f884 9019 	strbeq.w	r9, [r4, #25]
    if (tap_dance->counter < cfg->behavior_count) {
   29406:	4293      	cmp	r3, r2
        tap_dance->counter++;
   29408:	bf3c      	itt	cc
   2940a:	3301      	addcc	r3, #1
   2940c:	6023      	strcc	r3, [r4, #0]
    if (tap_dance->counter == cfg->behavior_count) {
   2940e:	6823      	ldr	r3, [r4, #0]
   29410:	4293      	cmp	r3, r2
   29412:	d10f      	bne.n	29434 <on_tap_dance_binding_pressed+0xa0>
        press_tap_dance_behavior(tap_dance, event.timestamp);
   29414:	462a      	mov	r2, r5
   29416:	463b      	mov	r3, r7
   29418:	4620      	mov	r0, r4
   2941a:	f020 f80c 	bl	49436 <press_tap_dance_behavior.isra.0>
        return ZMK_EV_EVENT_BUBBLE;
   2941e:	e004      	b.n	2942a <on_tap_dance_binding_pressed+0x96>
    for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
   29420:	3101      	adds	r1, #1
   29422:	290a      	cmp	r1, #10
   29424:	f103 0358 	add.w	r3, r3, #88	; 0x58
   29428:	d1ca      	bne.n	293c0 <on_tap_dance_binding_pressed+0x2c>
}
   2942a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2942e:	2000      	movs	r0, #0
   29430:	b002      	add	sp, #8
   29432:	4770      	bx	lr
    tap_dance->release_at = event.timestamp + tap_dance->config->tapping_term_ms;
   29434:	6963      	ldr	r3, [r4, #20]
   29436:	681b      	ldr	r3, [r3, #0]
   29438:	195d      	adds	r5, r3, r5
   2943a:	f147 0700 	adc.w	r7, r7, #0
   2943e:	e9c4 5708 	strd	r5, r7, [r4, #32]
	return z_impl_k_uptime_ticks();
   29442:	f027 fe21 	bl	51088 <z_impl_k_uptime_ticks>
   29446:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2944a:	fba0 0302 	umull	r0, r3, r0, r2
   2944e:	fb02 3101 	mla	r1, r2, r1, r3
   29452:	0bc3      	lsrs	r3, r0, #15
   29454:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    int32_t ms_left = tap_dance->release_at - k_uptime_get();
   29458:	1aec      	subs	r4, r5, r3
    if (ms_left > 0) {
   2945a:	2c00      	cmp	r4, #0
   2945c:	dde5      	ble.n	2942a <on_tap_dance_binding_pressed+0x96>
   2945e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   29462:	f240 30e7 	movw	r0, #999	; 0x3e7
   29466:	2100      	movs	r1, #0
   29468:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2946c:	2300      	movs	r3, #0
   2946e:	fbe4 0105 	umlal	r0, r1, r4, r5
   29472:	f7fc fe45 	bl	26100 <__aeabi_uldivmod>
   29476:	4602      	mov	r2, r0
   29478:	460b      	mov	r3, r1
        k_work_schedule(&tap_dance->release_timer, K_MSEC(ms_left));
   2947a:	4630      	mov	r0, r6
   2947c:	f01f f848 	bl	48510 <k_work_schedule>
        LOG_DBG("Successfully reset timer at position %d", tap_dance->position);
   29480:	e7d3      	b.n	2942a <on_tap_dance_binding_pressed+0x96>
   29482:	bf00      	nop
   29484:	20001518 	.word	0x20001518

00029488 <tap_dance_position_state_changed_listener>:
static int tap_dance_position_state_changed_listener(const zmk_event_t *eh) {
   29488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct zmk_position_state_changed *ev = as_zmk_position_state_changed(eh);
   2948a:	f7ff fd8f 	bl	28fac <as_zmk_position_state_changed>
    if (ev == NULL) {
   2948e:	4604      	mov	r4, r0
   29490:	b328      	cbz	r0, 294de <tap_dance_position_state_changed_listener+0x56>
    if (!ev->state) {
   29492:	7a03      	ldrb	r3, [r0, #8]
   29494:	b31b      	cbz	r3, 294de <tap_dance_position_state_changed_listener+0x56>
   29496:	4d16      	ldr	r5, [pc, #88]	; (294f0 <tap_dance_position_state_changed_listener+0x68>)
    for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
   29498:	2600      	movs	r6, #0
        tap_dance->timer_cancelled = true;
   2949a:	2701      	movs	r7, #1
        if (tap_dance->position == ZMK_BHV_TAP_DANCE_POSITION_FREE) {
   2949c:	f855 3c24 	ldr.w	r3, [r5, #-36]
   294a0:	1c5a      	adds	r2, r3, #1
   294a2:	d01e      	beq.n	294e2 <tap_dance_position_state_changed_listener+0x5a>
        if (tap_dance->position == ev->position) {
   294a4:	6862      	ldr	r2, [r4, #4]
   294a6:	4293      	cmp	r3, r2
   294a8:	d01b      	beq.n	294e2 <tap_dance_position_state_changed_listener+0x5a>
    int timer_cancel_result = k_work_cancel_delayable(&tap_dance->release_timer);
   294aa:	4628      	mov	r0, r5
   294ac:	f027 fc4c 	bl	50d48 <k_work_cancel_delayable>
        if (!tap_dance->tap_dance_decided) {
   294b0:	f815 3c0e 	ldrb.w	r3, [r5, #-14]
    if (timer_cancel_result == -EINPROGRESS) {
   294b4:	3077      	adds	r0, #119	; 0x77
        tap_dance->timer_cancelled = true;
   294b6:	bf08      	it	eq
   294b8:	f805 7c0f 	strbeq.w	r7, [r5, #-15]
        if (!tap_dance->tap_dance_decided) {
   294bc:	b98b      	cbnz	r3, 294e2 <tap_dance_position_state_changed_listener+0x5a>
        struct active_tap_dance *tap_dance = &active_tap_dances[i];
   294be:	4d0d      	ldr	r5, [pc, #52]	; (294f4 <tap_dance_position_state_changed_listener+0x6c>)
   294c0:	2358      	movs	r3, #88	; 0x58
   294c2:	fb03 5506 	mla	r5, r3, r6, r5
            press_tap_dance_behavior(tap_dance, ev->timestamp);
   294c6:	4628      	mov	r0, r5
   294c8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   294cc:	f01f ffb3 	bl	49436 <press_tap_dance_behavior.isra.0>
            if (!tap_dance->is_pressed) {
   294d0:	7c2b      	ldrb	r3, [r5, #16]
   294d2:	b923      	cbnz	r3, 294de <tap_dance_position_state_changed_listener+0x56>
                release_tap_dance_behavior(tap_dance, ev->timestamp);
   294d4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   294d8:	4628      	mov	r0, r5
   294da:	f01f ffe5 	bl	494a8 <release_tap_dance_behavior.isra.0>
}
   294de:	2000      	movs	r0, #0
   294e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
   294e2:	3601      	adds	r6, #1
   294e4:	2e0a      	cmp	r6, #10
   294e6:	f105 0558 	add.w	r5, r5, #88	; 0x58
   294ea:	d1d7      	bne.n	2949c <tap_dance_position_state_changed_listener+0x14>
   294ec:	e7f7      	b.n	294de <tap_dance_position_state_changed_listener+0x56>
   294ee:	bf00      	nop
   294f0:	20001540 	.word	0x20001540
   294f4:	20001518 	.word	0x20001518

000294f8 <behavior_queue_process_next>:
K_MSGQ_DEFINE(zmk_behavior_queue_msgq, sizeof(struct q_item), CONFIG_ZMK_BEHAVIORS_QUEUE_SIZE, 4);

static void behavior_queue_process_next(struct k_work *work);
static K_WORK_DELAYABLE_DEFINE(queue_work, behavior_queue_process_next);

static void behavior_queue_process_next(struct k_work *work) {
   294f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   294fc:	b095      	sub	sp, #84	; 0x54
    struct q_item item = {.wait = 0};
   294fe:	2214      	movs	r2, #20
   29500:	2100      	movs	r1, #0
   29502:	a80f      	add	r0, sp, #60	; 0x3c
   29504:	f022 fc3a 	bl	4bd7c <memset>
	return z_impl_k_msgq_get(msgq, data, timeout);
   29508:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 295dc <behavior_queue_process_next+0xe4>
   2950c:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   29510:	2200      	movs	r2, #0
   29512:	2300      	movs	r3, #0
   29514:	a90f      	add	r1, sp, #60	; 0x3c
   29516:	4640      	mov	r0, r8
   29518:	f01e fcc6 	bl	47ea8 <z_impl_k_msgq_get>

    while (k_msgq_get(&zmk_behavior_queue_msgq, &item, K_NO_WAIT) == 0) {
   2951c:	2800      	cmp	r0, #0
   2951e:	d149      	bne.n	295b4 <behavior_queue_process_next+0xbc>
        LOG_DBG("Invoking %s: 0x%02x 0x%02x", log_strdup(item.binding.behavior_dev),
                item.binding.param1, item.binding.param2);

        struct zmk_behavior_binding_event event = {.position = item.position,
   29520:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   29522:	9002      	str	r0, [sp, #8]
	return z_impl_k_uptime_ticks();
   29524:	f027 fdb0 	bl	51088 <z_impl_k_uptime_ticks>
   29528:	fba0 0c07 	umull	r0, ip, r0, r7
   2952c:	fb07 cc01 	mla	ip, r7, r1, ip
   29530:	0bc5      	lsrs	r5, r0, #15
   29532:	ea45 454c 	orr.w	r5, r5, ip, lsl #17
                                                   .timestamp = k_uptime_get()};

        if (item.press) {
   29536:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   2953a:	e9cd 6503 	strd	r6, r5, [sp, #12]
   2953e:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
   29542:	f013 0f01 	tst.w	r3, #1
   29546:	f8cd c014 	str.w	ip, [sp, #20]
   2954a:	ab02      	add	r3, sp, #8
   2954c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2954e:	ac06      	add	r4, sp, #24
   29550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   29554:	f10d 0928 	add.w	r9, sp, #40	; 0x28
   29558:	d02f      	beq.n	295ba <behavior_queue_process_next+0xc2>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_PRESSED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_pressed(binding, event);
   2955a:	e9cd 6507 	strd	r6, r5, [sp, #28]
   2955e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   29562:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   29566:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
__syscall int behavior_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                              struct zmk_behavior_binding_event event);

static inline int z_impl_behavior_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                                         struct zmk_behavior_binding_event event) {
    const struct device *dev = device_get_binding(binding->behavior_dev);
   2956a:	9810      	ldr	r0, [sp, #64]	; 0x40
   2956c:	f01e fa1c 	bl	479a8 <z_impl_device_get_binding>

    if (dev == NULL) {
   29570:	b150      	cbz	r0, 29588 <behavior_queue_process_next+0x90>
        return -EINVAL;
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->binding_pressed == NULL) {
   29572:	6883      	ldr	r3, [r0, #8]
   29574:	689c      	ldr	r4, [r3, #8]
        return -EINVAL;
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->binding_released == NULL) {
   29576:	b13c      	cbz	r4, 29588 <behavior_queue_process_next+0x90>
        return -ENOTSUP;
    }

    return api->binding_released(binding, event);
   29578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   2957c:	e88d 0003 	stmia.w	sp, {r0, r1}
   29580:	a810      	add	r0, sp, #64	; 0x40
   29582:	e899 000c 	ldmia.w	r9, {r2, r3}
   29586:	47a0      	blx	r4
            behavior_keymap_binding_released(&item.binding, event);
        }

        LOG_DBG("Processing next queued behavior in %dms", item.wait);

        if (item.wait > 0) {
   29588:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   2958a:	2c01      	cmp	r4, #1
   2958c:	d9c0      	bls.n	29510 <behavior_queue_process_next+0x18>
            k_work_schedule(&queue_work, K_MSEC(item.wait));
   2958e:	f3c4 045e 	ubfx	r4, r4, #1, #31
   29592:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   29596:	f240 30e7 	movw	r0, #999	; 0x3e7
   2959a:	2100      	movs	r1, #0
   2959c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   295a0:	2300      	movs	r3, #0
   295a2:	fbe5 0104 	umlal	r0, r1, r5, r4
   295a6:	f7fc fdab 	bl	26100 <__aeabi_uldivmod>
   295aa:	4602      	mov	r2, r0
   295ac:	460b      	mov	r3, r1
   295ae:	480c      	ldr	r0, [pc, #48]	; (295e0 <behavior_queue_process_next+0xe8>)
   295b0:	f01e ffae 	bl	48510 <k_work_schedule>
            break;
        }
    }
}
   295b4:	b015      	add	sp, #84	; 0x54
   295b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_RELEASED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_released(binding, event);
   295ba:	e9cd 6507 	strd	r6, r5, [sp, #28]
   295be:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   295c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   295c6:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   295ca:	9810      	ldr	r0, [sp, #64]	; 0x40
   295cc:	f01e f9ec 	bl	479a8 <z_impl_device_get_binding>
    if (dev == NULL) {
   295d0:	2800      	cmp	r0, #0
   295d2:	d0d9      	beq.n	29588 <behavior_queue_process_next+0x90>
    if (api->binding_released == NULL) {
   295d4:	6883      	ldr	r3, [r0, #8]
   295d6:	68dc      	ldr	r4, [r3, #12]
   295d8:	e7cd      	b.n	29576 <behavior_queue_process_next+0x7e>
   295da:	bf00      	nop
   295dc:	200011a4 	.word	0x200011a4
   295e0:	20000000 	.word	0x20000000

000295e4 <zmk_behavior_queue_add>:

int zmk_behavior_queue_add(uint32_t position, const struct zmk_behavior_binding binding, bool press,
                           uint32_t wait) {
   295e4:	b510      	push	{r4, lr}
   295e6:	b08a      	sub	sp, #40	; 0x28
   295e8:	ac01      	add	r4, sp, #4
   295ea:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    struct q_item item = {.press = press, .binding = binding, .wait = wait};
   295ee:	a805      	add	r0, sp, #20
   295f0:	2211      	movs	r2, #17
   295f2:	2100      	movs	r1, #0
   295f4:	f022 fbc2 	bl	4bd7c <memset>
   295f8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   295fc:	ab06      	add	r3, sp, #24
   295fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   29602:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   29606:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   29608:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   2960c:	9309      	str	r3, [sp, #36]	; 0x24
	return z_impl_k_msgq_put(msgq, data, timeout);
   2960e:	4809      	ldr	r0, [pc, #36]	; (29634 <zmk_behavior_queue_add+0x50>)
   29610:	2200      	movs	r2, #0
   29612:	2300      	movs	r3, #0
   29614:	a905      	add	r1, sp, #20
   29616:	f01e fbf1 	bl	47dfc <z_impl_k_msgq_put>

    const int ret = k_msgq_put(&zmk_behavior_queue_msgq, &item, K_NO_WAIT);
    if (ret < 0) {
   2961a:	2800      	cmp	r0, #0
   2961c:	db04      	blt.n	29628 <zmk_behavior_queue_add+0x44>
}

static inline bool k_work_delayable_is_pending(
	const struct k_work_delayable *dwork)
{
	return k_work_delayable_busy_get(dwork) != 0;
   2961e:	4806      	ldr	r0, [pc, #24]	; (29638 <zmk_behavior_queue_add+0x54>)
   29620:	f027 fb90 	bl	50d44 <k_work_delayable_busy_get>
        return ret;
    }

    if (!k_work_delayable_is_pending(&queue_work)) {
   29624:	b110      	cbz	r0, 2962c <zmk_behavior_queue_add+0x48>
        behavior_queue_process_next(&queue_work.work);
    }

    return 0;
   29626:	2000      	movs	r0, #0
}
   29628:	b00a      	add	sp, #40	; 0x28
   2962a:	bd10      	pop	{r4, pc}
        behavior_queue_process_next(&queue_work.work);
   2962c:	4802      	ldr	r0, [pc, #8]	; (29638 <zmk_behavior_queue_add+0x54>)
   2962e:	f7ff ff63 	bl	294f8 <behavior_queue_process_next>
   29632:	e7f8      	b.n	29626 <zmk_behavior_queue_add+0x42>
   29634:	200011a4 	.word	0x200011a4
   29638:	20000000 	.word	0x20000000

0002963c <layer_state_changed_listener>:
        LOG_DBG("layer %d", layer);
        zmk_keymap_layer_deactivate(layer);
    }
}

static int layer_state_changed_listener(const zmk_event_t *ev) {
   2963c:	b538      	push	{r3, r4, r5, lr}
    static bool conditional_layer_updates_needed;

    conditional_layer_updates_needed = true;
   2963e:	4c15      	ldr	r4, [pc, #84]	; (29694 <layer_state_changed_listener+0x58>)
   29640:	2301      	movs	r3, #1
   29642:	7023      	strb	r3, [r4, #0]
	return z_impl_k_sem_take(sem, timeout);
   29644:	4814      	ldr	r0, [pc, #80]	; (29698 <layer_state_changed_listener+0x5c>)
   29646:	2200      	movs	r2, #0
   29648:	2300      	movs	r3, #0
   2964a:	f01e fd9b 	bl	48184 <z_impl_k_sem_take>

    // Semaphore ensures we don't re-enter the loop in the middle of doing update, and
    // ensures that "waterfalling layer updates" are all processed to trigger subsequent
    // nested conditional layers properly.
    if (k_sem_take(&conditional_layer_sem, K_NO_WAIT) < 0) {
   2964e:	2800      	cmp	r0, #0
   29650:	db05      	blt.n	2965e <layer_state_changed_listener+0x22>
    while (conditional_layer_updates_needed) {
        int8_t max_then_layer = -1;
        uint32_t then_layers = 0;
        uint32_t then_layer_state = 0;

        conditional_layer_updates_needed = false;
   29652:	2500      	movs	r5, #0
    while (conditional_layer_updates_needed) {
   29654:	7823      	ldrb	r3, [r4, #0]
   29656:	b923      	cbnz	r3, 29662 <layer_state_changed_listener+0x26>
	z_impl_k_sem_give(sem);
   29658:	480f      	ldr	r0, [pc, #60]	; (29698 <layer_state_changed_listener+0x5c>)
   2965a:	f01e fd6d 	bl	48138 <z_impl_k_sem_give>
        }
    }

    k_sem_give(&conditional_layer_sem);
    return 0;
}
   2965e:	2000      	movs	r0, #0
   29660:	bd38      	pop	{r3, r4, r5, pc}
        conditional_layer_updates_needed = false;
   29662:	7025      	strb	r5, [r4, #0]
            if ((zmk_keymap_layer_state() & mask) == mask) {
   29664:	f000 f8fc 	bl	29860 <zmk_keymap_layer_state>
   29668:	f000 0006 	and.w	r0, r0, #6
                if ((BIT(layer) & then_layer_state) != 0U) {
   2966c:	2806      	cmp	r0, #6
    if (!zmk_keymap_layer_active(layer)) {
   2966e:	f04f 0003 	mov.w	r0, #3
                if ((BIT(layer) & then_layer_state) != 0U) {
   29672:	d107      	bne.n	29684 <layer_state_changed_listener+0x48>
    if (!zmk_keymap_layer_active(layer)) {
   29674:	f000 f8fa 	bl	2986c <zmk_keymap_layer_active>
   29678:	2800      	cmp	r0, #0
   2967a:	d1eb      	bne.n	29654 <layer_state_changed_listener+0x18>
        zmk_keymap_layer_activate(layer);
   2967c:	2003      	movs	r0, #3
   2967e:	f01f ffe4 	bl	4964a <zmk_keymap_layer_activate>
   29682:	e7e7      	b.n	29654 <layer_state_changed_listener+0x18>
    if (zmk_keymap_layer_active(layer)) {
   29684:	f000 f8f2 	bl	2986c <zmk_keymap_layer_active>
   29688:	2800      	cmp	r0, #0
   2968a:	d0e3      	beq.n	29654 <layer_state_changed_listener+0x18>
        zmk_keymap_layer_deactivate(layer);
   2968c:	2003      	movs	r0, #3
   2968e:	f01f ffdf 	bl	49650 <zmk_keymap_layer_deactivate>
        for (uint8_t layer = 0; layer <= max_then_layer; layer++) {
   29692:	e7df      	b.n	29654 <layer_state_changed_listener+0x18>
   29694:	200072e6 	.word	0x200072e6
   29698:	200012ac 	.word	0x200012ac

0002969c <send_keyboard_report>:
    enum zmk_endpoint new_endpoint =
        (preferred_endpoint == ZMK_ENDPOINT_USB) ? ZMK_ENDPOINT_BLE : ZMK_ENDPOINT_USB;
    return zmk_endpoints_select(new_endpoint);
}

static int send_keyboard_report() {
   2969c:	b508      	push	{r3, lr}
    struct zmk_hid_keyboard_report *keyboard_report = zmk_hid_get_keyboard_report();
   2969e:	f7ff fdd7 	bl	29250 <zmk_hid_get_keyboard_report>

    switch (current_endpoint) {
   296a2:	4a09      	ldr	r2, [pc, #36]	; (296c8 <send_keyboard_report+0x2c>)
   296a4:	7812      	ldrb	r2, [r2, #0]
   296a6:	b122      	cbz	r2, 296b2 <send_keyboard_report+0x16>
   296a8:	2a01      	cmp	r2, #1
   296aa:	d007      	beq.n	296bc <send_keyboard_report+0x20>

    default:
        LOG_ERR("Unsupported endpoint %d", current_endpoint);
        return -ENOTSUP;
    }
}
   296ac:	f06f 0085 	mvn.w	r0, #133	; 0x85
   296b0:	bd08      	pop	{r3, pc}
   296b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        int err = zmk_usb_hid_send_report((uint8_t *)keyboard_report, sizeof(*keyboard_report));
   296b6:	2109      	movs	r1, #9
   296b8:	f001 b950 	b.w	2a95c <zmk_usb_hid_send_report>
}
   296bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        int err = zmk_hog_send_keyboard_report(&keyboard_report->body);
   296c0:	3001      	adds	r0, #1
   296c2:	f000 bd0f 	b.w	2a0e4 <zmk_hog_send_keyboard_report>
   296c6:	bf00      	nop
   296c8:	20000fe3 	.word	0x20000fe3

000296cc <send_consumer_report>:

static int send_consumer_report() {
   296cc:	b508      	push	{r3, lr}
    struct zmk_hid_consumer_report *consumer_report = zmk_hid_get_consumer_report();
   296ce:	f7ff fdc3 	bl	29258 <zmk_hid_get_consumer_report>

    switch (current_endpoint) {
   296d2:	4a09      	ldr	r2, [pc, #36]	; (296f8 <send_consumer_report+0x2c>)
   296d4:	7812      	ldrb	r2, [r2, #0]
   296d6:	b122      	cbz	r2, 296e2 <send_consumer_report+0x16>
   296d8:	2a01      	cmp	r2, #1
   296da:	d007      	beq.n	296ec <send_consumer_report+0x20>

    default:
        LOG_ERR("Unsupported endpoint %d", current_endpoint);
        return -ENOTSUP;
    }
}
   296dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   296e0:	bd08      	pop	{r3, pc}
   296e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        int err = zmk_usb_hid_send_report((uint8_t *)consumer_report, sizeof(*consumer_report));
   296e6:	210d      	movs	r1, #13
   296e8:	f001 b938 	b.w	2a95c <zmk_usb_hid_send_report>
}
   296ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        int err = zmk_hog_send_consumer_report(&consumer_report->body);
   296f0:	3001      	adds	r0, #1
   296f2:	f000 bd1d 	b.w	2a130 <zmk_hog_send_consumer_report>
   296f6:	bf00      	nop
   296f8:	20000fe3 	.word	0x20000fe3

000296fc <endpoints_save_preferred_work>:
    settings_save_one("endpoints/preferred", &preferred_endpoint, sizeof(preferred_endpoint));
   296fc:	4902      	ldr	r1, [pc, #8]	; (29708 <endpoints_save_preferred_work+0xc>)
   296fe:	4803      	ldr	r0, [pc, #12]	; (2970c <endpoints_save_preferred_work+0x10>)
   29700:	2201      	movs	r2, #1
   29702:	f002 be09 	b.w	2c318 <settings_save_one>
   29706:	bf00      	nop
   29708:	200072e7 	.word	0x200072e7
   2970c:	00053dc7 	.word	0x00053dc7

00029710 <zmk_endpoints_init>:
}

struct settings_handler endpoints_handler = {.name = "endpoints", .h_set = endpoints_handle_set};
#endif /* IS_ENABLED(CONFIG_SETTINGS) */

static int zmk_endpoints_init(const struct device *_arg) {
   29710:	b510      	push	{r4, lr}
#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
   29712:	f002 ff55 	bl	2c5c0 <settings_subsys_init>

    int err = settings_register(&endpoints_handler);
   29716:	4807      	ldr	r0, [pc, #28]	; (29734 <zmk_endpoints_init+0x24>)
   29718:	f002 fe8e 	bl	2c438 <settings_register>
    if (err) {
   2971c:	4604      	mov	r4, r0
   2971e:	b930      	cbnz	r0, 2972e <zmk_endpoints_init+0x1e>
        LOG_ERR("Failed to register the endpoints settings handler (err %d)", err);
        return err;
    }

    k_work_init_delayable(&endpoints_save_work, endpoints_save_preferred_work);
   29720:	4805      	ldr	r0, [pc, #20]	; (29738 <zmk_endpoints_init+0x28>)
   29722:	4906      	ldr	r1, [pc, #24]	; (2973c <zmk_endpoints_init+0x2c>)
   29724:	f027 fb02 	bl	50d2c <k_work_init_delayable>

    settings_load_subtree("endpoints");
   29728:	4805      	ldr	r0, [pc, #20]	; (29740 <zmk_endpoints_init+0x30>)
   2972a:	f002 fe2f 	bl	2c38c <settings_load_subtree>
#endif

    return 0;
}
   2972e:	4620      	mov	r0, r4
   29730:	bd10      	pop	{r4, pc}
   29732:	bf00      	nop
   29734:	20000504 	.word	0x20000504
   29738:	20001888 	.word	0x20001888
   2973c:	000296fd 	.word	0x000296fd
   29740:	00053ddb 	.word	0x00053ddb

00029744 <update_current_endpoint>:

    zmk_endpoints_send_report(HID_USAGE_KEY);
    zmk_endpoints_send_report(HID_USAGE_CONSUMER);
}

static void update_current_endpoint() {
   29744:	b538      	push	{r3, r4, r5, lr}
    return zmk_ble_active_profile_is_connected();
   29746:	f000 fac7 	bl	29cd8 <zmk_ble_active_profile_is_connected>
    if (is_ble_ready()) {
   2974a:	b1c8      	cbz	r0, 29780 <update_current_endpoint+0x3c>

enum usb_dc_status_code zmk_usb_get_status();
enum zmk_usb_conn_state zmk_usb_get_conn_state();

static inline bool zmk_usb_is_powered() { return zmk_usb_get_conn_state() != ZMK_USB_CONN_NONE; }
static inline bool zmk_usb_is_hid_ready() { return zmk_usb_get_conn_state() == ZMK_USB_CONN_HID; }
   2974c:	f001 f8d0 	bl	2a8f0 <zmk_usb_get_conn_state>
        if (is_usb_ready()) {
   29750:	2802      	cmp	r0, #2
   29752:	d11b      	bne.n	2978c <update_current_endpoint+0x48>
            return preferred_endpoint;
   29754:	4b0f      	ldr	r3, [pc, #60]	; (29794 <update_current_endpoint+0x50>)
   29756:	781c      	ldrb	r4, [r3, #0]
    enum zmk_endpoint new_endpoint = get_selected_endpoint();

    if (new_endpoint != current_endpoint) {
   29758:	4d0f      	ldr	r5, [pc, #60]	; (29798 <update_current_endpoint+0x54>)
   2975a:	782b      	ldrb	r3, [r5, #0]
   2975c:	42a3      	cmp	r3, r4
   2975e:	d017      	beq.n	29790 <update_current_endpoint+0x4c>
    zmk_hid_keyboard_clear();
   29760:	f7ff fd3e 	bl	291e0 <zmk_hid_keyboard_clear>
    zmk_hid_consumer_clear();
   29764:	f7ff fd6c 	bl	29240 <zmk_hid_consumer_clear>
        return send_keyboard_report();
   29768:	f7ff ff98 	bl	2969c <send_keyboard_report>
        return send_consumer_report();
   2976c:	f7ff ffae 	bl	296cc <send_consumer_report>
        disconnect_current_endpoint();

        current_endpoint = new_endpoint;
        LOG_INF("Endpoint changed: %d", current_endpoint);

        ZMK_EVENT_RAISE(new_zmk_endpoint_selection_changed(
   29770:	4620      	mov	r0, r4
        current_endpoint = new_endpoint;
   29772:	702c      	strb	r4, [r5, #0]
        ZMK_EVENT_RAISE(new_zmk_endpoint_selection_changed(
   29774:	f000 f830 	bl	297d8 <new_zmk_endpoint_selection_changed>
            (struct zmk_endpoint_selection_changed){.endpoint = current_endpoint}));
    }
}
   29778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ZMK_EVENT_RAISE(new_zmk_endpoint_selection_changed(
   2977c:	f01f bd0b 	b.w	49196 <zmk_event_manager_raise>
   29780:	f001 f8b6 	bl	2a8f0 <zmk_usb_get_conn_state>
    if (is_usb_ready()) {
   29784:	1e84      	subs	r4, r0, #2
   29786:	bf18      	it	ne
   29788:	2401      	movne	r4, #1
   2978a:	e7e5      	b.n	29758 <update_current_endpoint+0x14>
        return ZMK_ENDPOINT_BLE;
   2978c:	2401      	movs	r4, #1
   2978e:	e7e3      	b.n	29758 <update_current_endpoint+0x14>
}
   29790:	bd38      	pop	{r3, r4, r5, pc}
   29792:	bf00      	nop
   29794:	200072e7 	.word	0x200072e7
   29798:	20000fe3 	.word	0x20000fe3

0002979c <endpoints_handle_set>:
                                void *cb_arg) {
   2979c:	b570      	push	{r4, r5, r6, lr}
   2979e:	460c      	mov	r4, r1
   297a0:	4615      	mov	r5, r2
    if (settings_name_steq(name, "preferred", NULL)) {
   297a2:	490b      	ldr	r1, [pc, #44]	; (297d0 <endpoints_handle_set+0x34>)
   297a4:	2200      	movs	r2, #0
                                void *cb_arg) {
   297a6:	461e      	mov	r6, r3
    if (settings_name_steq(name, "preferred", NULL)) {
   297a8:	f020 ffe8 	bl	4a77c <settings_name_steq>
   297ac:	b908      	cbnz	r0, 297b2 <endpoints_handle_set+0x16>
    return 0;
   297ae:	2000      	movs	r0, #0
}
   297b0:	bd70      	pop	{r4, r5, r6, pc}
        if (len != sizeof(enum zmk_endpoint)) {
   297b2:	2c01      	cmp	r4, #1
   297b4:	d108      	bne.n	297c8 <endpoints_handle_set+0x2c>
        int err = read_cb(cb_arg, &preferred_endpoint, sizeof(enum zmk_endpoint));
   297b6:	4907      	ldr	r1, [pc, #28]	; (297d4 <endpoints_handle_set+0x38>)
   297b8:	4622      	mov	r2, r4
   297ba:	4630      	mov	r0, r6
   297bc:	47a8      	blx	r5
        if (err <= 0) {
   297be:	2800      	cmp	r0, #0
   297c0:	ddf6      	ble.n	297b0 <endpoints_handle_set+0x14>
        update_current_endpoint();
   297c2:	f7ff ffbf 	bl	29744 <update_current_endpoint>
   297c6:	e7f2      	b.n	297ae <endpoints_handle_set+0x12>
            return -EINVAL;
   297c8:	f06f 0015 	mvn.w	r0, #21
   297cc:	e7f0      	b.n	297b0 <endpoints_handle_set+0x14>
   297ce:	bf00      	nop
   297d0:	00053dd1 	.word	0x00053dd1
   297d4:	200072e7 	.word	0x200072e7

000297d8 <new_zmk_endpoint_selection_changed>:
 */

#include <kernel.h>
#include <zmk/events/endpoint_selection_changed.h>

ZMK_EVENT_IMPL(zmk_endpoint_selection_changed);
   297d8:	b510      	push	{r4, lr}
   297da:	4604      	mov	r4, r0
   297dc:	200c      	movs	r0, #12
   297de:	f027 fe00 	bl	513e2 <k_malloc>
   297e2:	4a02      	ldr	r2, [pc, #8]	; (297ec <new_zmk_endpoint_selection_changed+0x14>)
   297e4:	6002      	str	r2, [r0, #0]
   297e6:	7204      	strb	r4, [r0, #8]
   297e8:	bd10      	pop	{r4, pc}
   297ea:	bf00      	nop
   297ec:	00051c80 	.word	0x00051c80

000297f0 <set_layer_state>:
                                                        DT_INST_FOREACH_CHILD(0, SENSOR_LAYER)};

#endif /* ZMK_KEYMAP_HAS_SENSORS */

static inline int set_layer_state(uint8_t layer, bool state) {
    if (layer >= ZMK_KEYMAP_LAYERS_LEN) {
   297f0:	2803      	cmp	r0, #3
static inline int set_layer_state(uint8_t layer, bool state) {
   297f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (layer >= ZMK_KEYMAP_LAYERS_LEN) {
   297f4:	d82f      	bhi.n	29856 <set_layer_state+0x66>
        return -EINVAL;
    }

    // Default layer should *always* remain active
    if (layer == _zmk_keymap_layer_default && !state) {
   297f6:	bb28      	cbnz	r0, 29844 <set_layer_state+0x54>
   297f8:	b309      	cbz	r1, 2983e <set_layer_state+0x4e>
        return 0;
    }

    zmk_keymap_layers_state_t old_state = _zmk_keymap_layer_state;
   297fa:	4b18      	ldr	r3, [pc, #96]	; (2985c <set_layer_state+0x6c>)
   297fc:	681a      	ldr	r2, [r3, #0]
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
   297fe:	2301      	movs	r3, #1
   29800:	4083      	lsls	r3, r0
   29802:	4313      	orrs	r3, r2
   29804:	4c15      	ldr	r4, [pc, #84]	; (2985c <set_layer_state+0x6c>)
    // Don't send state changes unless there was an actual change
    if (old_state != _zmk_keymap_layer_state) {
   29806:	429a      	cmp	r2, r3
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
   29808:	6023      	str	r3, [r4, #0]
    if (old_state != _zmk_keymap_layer_state) {
   2980a:	d018      	beq.n	2983e <set_layer_state+0x4e>

ZMK_EVENT_DECLARE(zmk_layer_state_changed);

static inline struct zmk_layer_state_changed_event *create_layer_state_changed(uint8_t layer,
                                                                               bool state) {
    return new_zmk_layer_state_changed((struct zmk_layer_state_changed){
   2980c:	f88d 0000 	strb.w	r0, [sp]
   29810:	f88d 1001 	strb.w	r1, [sp, #1]
	return z_impl_k_uptime_ticks();
   29814:	f027 fc38 	bl	51088 <z_impl_k_uptime_ticks>
   29818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2981c:	fba0 0302 	umull	r0, r3, r0, r2
   29820:	fb02 3101 	mla	r1, r2, r1, r3
   29824:	0bc0      	lsrs	r0, r0, #15
   29826:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   2982a:	0bc9      	lsrs	r1, r1, #15
   2982c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   29830:	ab04      	add	r3, sp, #16
   29832:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   29836:	f000 f8c9 	bl	299cc <new_zmk_layer_state_changed>
        LOG_DBG("layer_changed: layer %d state %d", layer, state);
        ZMK_EVENT_RAISE(create_layer_state_changed(layer, state));
   2983a:	f01f fcac 	bl	49196 <zmk_event_manager_raise>
        return 0;
   2983e:	2000      	movs	r0, #0
    }

    return 0;
}
   29840:	b004      	add	sp, #16
   29842:	bd10      	pop	{r4, pc}
    zmk_keymap_layers_state_t old_state = _zmk_keymap_layer_state;
   29844:	4b05      	ldr	r3, [pc, #20]	; (2985c <set_layer_state+0x6c>)
   29846:	681a      	ldr	r2, [r3, #0]
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
   29848:	2900      	cmp	r1, #0
   2984a:	d1d8      	bne.n	297fe <set_layer_state+0xe>
   2984c:	2301      	movs	r3, #1
   2984e:	4083      	lsls	r3, r0
   29850:	ea22 0303 	bic.w	r3, r2, r3
   29854:	e7d6      	b.n	29804 <set_layer_state+0x14>
        return -EINVAL;
   29856:	f06f 0015 	mvn.w	r0, #21
   2985a:	e7f1      	b.n	29840 <set_layer_state+0x50>
   2985c:	200042a8 	.word	0x200042a8

00029860 <zmk_keymap_layer_state>:

uint8_t zmk_keymap_layer_default() { return _zmk_keymap_layer_default; }

zmk_keymap_layers_state_t zmk_keymap_layer_state() { return _zmk_keymap_layer_state; }
   29860:	4b01      	ldr	r3, [pc, #4]	; (29868 <zmk_keymap_layer_state+0x8>)
   29862:	6818      	ldr	r0, [r3, #0]
   29864:	4770      	bx	lr
   29866:	bf00      	nop
   29868:	200042a8 	.word	0x200042a8

0002986c <zmk_keymap_layer_active>:
    // breaks up that assumption by accident
    return (state_to_test & (BIT(layer))) == (BIT(layer)) || layer == _zmk_keymap_layer_default;
};

bool zmk_keymap_layer_active(uint8_t layer) {
    return zmk_keymap_layer_active_with_state(layer, _zmk_keymap_layer_state);
   2986c:	4b01      	ldr	r3, [pc, #4]	; (29874 <zmk_keymap_layer_active+0x8>)
   2986e:	6819      	ldr	r1, [r3, #0]
   29870:	f01f bee1 	b.w	49636 <zmk_keymap_layer_active_with_state>
   29874:	200042a8 	.word	0x200042a8

00029878 <zmk_keymap_apply_position_state>:
        return behavior_keymap_binding_released(binding, event);
    }
}

int zmk_keymap_apply_position_state(uint8_t source, int layer, uint32_t position, bool pressed,
                                    int64_t timestamp) {
   29878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2987c:	4615      	mov	r5, r2
    // We want to make a copy of this, since it may be converted from
    // relative to absolute before being invoked
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   2987e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
                                    int64_t timestamp) {
   29882:	461f      	mov	r7, r3
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   29884:	434a      	muls	r2, r1
   29886:	230c      	movs	r3, #12
   29888:	fb03 2205 	mla	r2, r3, r5, r2
   2988c:	4b39      	ldr	r3, [pc, #228]	; (29974 <zmk_keymap_apply_position_state+0xfc>)
   2988e:	4413      	add	r3, r2
                                    int64_t timestamp) {
   29890:	4682      	mov	sl, r0
   29892:	460e      	mov	r6, r1
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   29894:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
                                    int64_t timestamp) {
   29898:	b08d      	sub	sp, #52	; 0x34
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   2989a:	ac05      	add	r4, sp, #20
   2989c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                                    int64_t timestamp) {
   298a0:	e9dd 8916 	ldrd	r8, r9, [sp, #88]	; 0x58
   298a4:	f01e f880 	bl	479a8 <z_impl_device_get_binding>
    LOG_DBG("layer: %d position: %d, binding name: %s", layer, position,
            log_strdup(binding.behavior_dev));

    behavior = device_get_binding(binding.behavior_dev);

    if (!behavior) {
   298a8:	4683      	mov	fp, r0
   298aa:	2800      	cmp	r0, #0
   298ac:	d05d      	beq.n	2996a <zmk_keymap_apply_position_state+0xf2>
	return z_impl_behavior_keymap_binding_convert_central_state_dependent_params(binding, event);
   298ae:	e9cd 6508 	strd	r6, r5, [sp, #32]
   298b2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    const struct device *dev = device_get_binding(binding->behavior_dev);
   298b6:	9805      	ldr	r0, [sp, #20]
   298b8:	f01e f876 	bl	479a8 <z_impl_device_get_binding>
    if (api->binding_convert_central_state_dependent_params == NULL) {
   298bc:	6883      	ldr	r3, [r0, #8]
   298be:	685b      	ldr	r3, [r3, #4]
   298c0:	469c      	mov	ip, r3
   298c2:	b153      	cbz	r3, 298da <zmk_keymap_apply_position_state+0x62>
    return api->binding_convert_central_state_dependent_params(binding, event);
   298c4:	ab0c      	add	r3, sp, #48	; 0x30
   298c6:	e913 0003 	ldmdb	r3, {r0, r1}
   298ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   298ce:	e88d 0003 	stmia.w	sp, {r0, r1}
   298d2:	4620      	mov	r0, r4
   298d4:	4661      	mov	r1, ip
   298d6:	4788      	blx	r1
        LOG_WRN("No behavior assigned to %d on layer %d", position, layer);
        return 1;
    }

    int err = behavior_keymap_binding_convert_central_state_dependent_params(&binding, event);
    if (err) {
   298d8:	bb58      	cbnz	r0, 29932 <zmk_keymap_apply_position_state+0xba>
    *locality = api->locality;
   298da:	f8db 3008 	ldr.w	r3, [fp, #8]
   298de:	781b      	ldrb	r3, [r3, #0]
    if (err) {
        LOG_ERR("Failed to get behavior locality %d", err);
        return err;
    }

    switch (locality) {
   298e0:	2b01      	cmp	r3, #1
   298e2:	d013      	beq.n	2990c <zmk_keymap_apply_position_state+0x94>
   298e4:	2b02      	cmp	r3, #2
   298e6:	d027      	beq.n	29938 <zmk_keymap_apply_position_state+0xc0>
   298e8:	2b00      	cmp	r3, #0
   298ea:	d140      	bne.n	2996e <zmk_keymap_apply_position_state+0xf6>
    case BEHAVIOR_LOCALITY_CENTRAL:
        return invoke_locally(&binding, event, pressed);
   298ec:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   298f0:	ab0c      	add	r3, sp, #48	; 0x30
   298f2:	9702      	str	r7, [sp, #8]
   298f4:	e913 0003 	ldmdb	r3, {r0, r1}
   298f8:	e9cd 6508 	strd	r6, r5, [sp, #32]
   298fc:	e88d 0003 	stmia.w	sp, {r0, r1}
   29900:	462b      	mov	r3, r5
   29902:	4632      	mov	r2, r6
#if ZMK_BLE_IS_CENTRAL
        for (int i = 0; i < ZMK_BLE_SPLIT_PERIPHERAL_COUNT; i++) {
            zmk_split_bt_invoke_behavior(i, &binding, event, pressed);
        }
#endif
        return invoke_locally(&binding, event, pressed);
   29904:	4620      	mov	r0, r4
   29906:	f01f fea6 	bl	49656 <invoke_locally>
   2990a:	e012      	b.n	29932 <zmk_keymap_apply_position_state+0xba>
            return invoke_locally(&binding, event, pressed);
   2990c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   29910:	9702      	str	r7, [sp, #8]
   29912:	aa0a      	add	r2, sp, #40	; 0x28
   29914:	e892 0003 	ldmia.w	r2, {r0, r1}
   29918:	e9cd 6508 	strd	r6, r5, [sp, #32]
   2991c:	e88d 0003 	stmia.w	sp, {r0, r1}
   29920:	ab08      	add	r3, sp, #32
        if (source == ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL) {
   29922:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
            return invoke_locally(&binding, event, pressed);
   29926:	cb0c      	ldmia	r3, {r2, r3}
        if (source == ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL) {
   29928:	d0ec      	beq.n	29904 <zmk_keymap_apply_position_state+0x8c>
            return zmk_split_bt_invoke_behavior(source, &binding, event, pressed);
   2992a:	4621      	mov	r1, r4
   2992c:	4650      	mov	r0, sl
   2992e:	f01f ffe8 	bl	49902 <zmk_split_bt_invoke_behavior>
    }

    return -ENOTSUP;
}
   29932:	b00d      	add	sp, #52	; 0x34
   29934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            zmk_split_bt_invoke_behavior(i, &binding, event, pressed);
   29938:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   2993c:	e9cd 6508 	strd	r6, r5, [sp, #32]
   29940:	9702      	str	r7, [sp, #8]
   29942:	ae0a      	add	r6, sp, #40	; 0x28
   29944:	e896 0003 	ldmia.w	r6, {r0, r1}
   29948:	e88d 0003 	stmia.w	sp, {r0, r1}
   2994c:	ad08      	add	r5, sp, #32
   2994e:	e895 000c 	ldmia.w	r5, {r2, r3}
   29952:	4621      	mov	r1, r4
   29954:	2000      	movs	r0, #0
   29956:	f01f ffd4 	bl	49902 <zmk_split_bt_invoke_behavior>
        return invoke_locally(&binding, event, pressed);
   2995a:	9702      	str	r7, [sp, #8]
   2995c:	e896 0003 	ldmia.w	r6, {r0, r1}
   29960:	e88d 0003 	stmia.w	sp, {r0, r1}
   29964:	e895 000c 	ldmia.w	r5, {r2, r3}
   29968:	e7cc      	b.n	29904 <zmk_keymap_apply_position_state+0x8c>
        return 1;
   2996a:	2001      	movs	r0, #1
   2996c:	e7e1      	b.n	29932 <zmk_keymap_apply_position_state+0xba>
    switch (locality) {
   2996e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29972:	e7de      	b.n	29932 <zmk_keymap_apply_position_state+0xba>
   29974:	00051c8c 	.word	0x00051c8c

00029978 <zmk_keymap_position_state_changed>:

int zmk_keymap_position_state_changed(uint8_t source, uint32_t position, bool pressed,
                                      int64_t timestamp) {
   29978:	e92d 4ef3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}
   2997c:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
   29980:	4d10      	ldr	r5, [pc, #64]	; (299c4 <zmk_keymap_position_state_changed+0x4c>)
   29982:	4681      	mov	r9, r0
   29984:	460f      	mov	r7, r1
    if (pressed) {
   29986:	4614      	mov	r4, r2
   29988:	b11a      	cbz	r2, 29992 <zmk_keymap_position_state_changed+0x1a>
        zmk_keymap_active_behavior_layer[position] = _zmk_keymap_layer_state;
   2998a:	4b0f      	ldr	r3, [pc, #60]	; (299c8 <zmk_keymap_position_state_changed+0x50>)
   2998c:	681b      	ldr	r3, [r3, #0]
   2998e:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
                                      int64_t timestamp) {
   29992:	2603      	movs	r6, #3
    }
    for (int layer = ZMK_KEYMAP_LAYERS_LEN - 1; layer >= _zmk_keymap_layer_default; layer--) {
        if (zmk_keymap_layer_active_with_state(layer, zmk_keymap_active_behavior_layer[position])) {
   29994:	f855 1027 	ldr.w	r1, [r5, r7, lsl #2]
   29998:	b2f0      	uxtb	r0, r6
   2999a:	f01f fe4c 	bl	49636 <zmk_keymap_layer_active_with_state>
   2999e:	b930      	cbnz	r0, 299ae <zmk_keymap_position_state_changed+0x36>
    for (int layer = ZMK_KEYMAP_LAYERS_LEN - 1; layer >= _zmk_keymap_layer_default; layer--) {
   299a0:	3e01      	subs	r6, #1
   299a2:	d2f7      	bcs.n	29994 <zmk_keymap_position_state_changed+0x1c>
                return ret;
            }
        }
    }

    return -ENOTSUP;
   299a4:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   299a8:	b002      	add	sp, #8
   299aa:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
            int ret = zmk_keymap_apply_position_state(source, layer, position, pressed, timestamp);
   299ae:	e9cd ab00 	strd	sl, fp, [sp]
   299b2:	4623      	mov	r3, r4
   299b4:	463a      	mov	r2, r7
   299b6:	4631      	mov	r1, r6
   299b8:	4648      	mov	r0, r9
   299ba:	f7ff ff5d 	bl	29878 <zmk_keymap_apply_position_state>
            if (ret > 0) {
   299be:	2800      	cmp	r0, #0
   299c0:	ddf2      	ble.n	299a8 <zmk_keymap_position_state_changed+0x30>
   299c2:	e7ed      	b.n	299a0 <zmk_keymap_position_state_changed+0x28>
   299c4:	20004218 	.word	0x20004218
   299c8:	200042a8 	.word	0x200042a8

000299cc <new_zmk_layer_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/layer_state_changed.h>

   299cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   299ce:	466c      	mov	r4, sp
   299d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   299d4:	2018      	movs	r0, #24
   299d6:	f027 fd04 	bl	513e2 <k_malloc>
   299da:	4605      	mov	r5, r0
   299dc:	4b05      	ldr	r3, [pc, #20]	; (299f4 <new_zmk_layer_state_changed+0x28>)
   299de:	f845 3b08 	str.w	r3, [r5], #8
   299e2:	4606      	mov	r6, r0
   299e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   299e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   299ec:	4630      	mov	r0, r6
   299ee:	b004      	add	sp, #16
   299f0:	bd70      	pop	{r4, r5, r6, pc}
   299f2:	bf00      	nop
   299f4:	0005234c 	.word	0x0005234c

000299f8 <new_zmk_keycode_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/keycode_state_changed.h>

ZMK_EVENT_IMPL(zmk_keycode_state_changed);
   299f8:	b084      	sub	sp, #16
   299fa:	b570      	push	{r4, r5, r6, lr}
   299fc:	ac04      	add	r4, sp, #16
   299fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   29a02:	2020      	movs	r0, #32
   29a04:	f027 fced 	bl	513e2 <k_malloc>
   29a08:	4604      	mov	r4, r0
   29a0a:	4b08      	ldr	r3, [pc, #32]	; (29a2c <new_zmk_keycode_state_changed+0x34>)
   29a0c:	f844 3b08 	str.w	r3, [r4], #8
   29a10:	ad04      	add	r5, sp, #16
   29a12:	4606      	mov	r6, r0
   29a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   29a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   29a18:	e895 0003 	ldmia.w	r5, {r0, r1}
   29a1c:	e884 0003 	stmia.w	r4, {r0, r1}
   29a20:	4630      	mov	r0, r6
   29a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   29a26:	b004      	add	sp, #16
   29a28:	4770      	bx	lr
   29a2a:	bf00      	nop
   29a2c:	00052354 	.word	0x00052354

00029a30 <as_zmk_keycode_state_changed>:
   29a30:	6802      	ldr	r2, [r0, #0]
   29a32:	4b03      	ldr	r3, [pc, #12]	; (29a40 <as_zmk_keycode_state_changed+0x10>)
   29a34:	429a      	cmp	r2, r3
   29a36:	bf0c      	ite	eq
   29a38:	3008      	addeq	r0, #8
   29a3a:	2000      	movne	r0, #0
   29a3c:	4770      	bx	lr
   29a3e:	bf00      	nop
   29a40:	00052354 	.word	0x00052354

00029a44 <new_zmk_ble_active_profile_changed>:
 */

#include <kernel.h>
#include <zmk/events/ble_active_profile_changed.h>

   29a44:	b513      	push	{r0, r1, r4, lr}
   29a46:	466c      	mov	r4, sp
   29a48:	e884 0003 	stmia.w	r4, {r0, r1}
   29a4c:	2010      	movs	r0, #16
   29a4e:	f027 fcc8 	bl	513e2 <k_malloc>
   29a52:	4602      	mov	r2, r0
   29a54:	4905      	ldr	r1, [pc, #20]	; (29a6c <new_zmk_ble_active_profile_changed+0x28>)
   29a56:	f842 1b08 	str.w	r1, [r2], #8
   29a5a:	4603      	mov	r3, r0
   29a5c:	e894 0003 	ldmia.w	r4, {r0, r1}
   29a60:	e882 0003 	stmia.w	r2, {r0, r1}
   29a64:	4618      	mov	r0, r3
   29a66:	b002      	add	sp, #8
   29a68:	bd10      	pop	{r4, pc}
   29a6a:	bf00      	nop
   29a6c:	00052358 	.word	0x00052358

00029a70 <raise_profile_changed_event>:

static bt_addr_le_t peripheral_addr;

#endif /* IS_ENABLED(CONFIG_ZMK_SPLIT_ROLE_CENTRAL) */

static void raise_profile_changed_event() {
   29a70:	b507      	push	{r0, r1, r2, lr}
    ZMK_EVENT_RAISE(new_zmk_ble_active_profile_changed((struct zmk_ble_active_profile_changed){
   29a72:	4b09      	ldr	r3, [pc, #36]	; (29a98 <raise_profile_changed_event+0x28>)
   29a74:	781a      	ldrb	r2, [r3, #0]
   29a76:	4b09      	ldr	r3, [pc, #36]	; (29a9c <raise_profile_changed_event+0x2c>)
   29a78:	f88d 2000 	strb.w	r2, [sp]
   29a7c:	2116      	movs	r1, #22
   29a7e:	fb02 3301 	mla	r3, r2, r1, r3
   29a82:	9301      	str	r3, [sp, #4]
   29a84:	ab02      	add	r3, sp, #8
   29a86:	e913 0003 	ldmdb	r3, {r0, r1}
   29a8a:	f7ff ffdb 	bl	29a44 <new_zmk_ble_active_profile_changed>
        .index = active_profile, .profile = &profiles[active_profile]}));
}
   29a8e:	b003      	add	sp, #12
   29a90:	f85d eb04 	ldr.w	lr, [sp], #4
    ZMK_EVENT_RAISE(new_zmk_ble_active_profile_changed((struct zmk_ble_active_profile_changed){
   29a94:	f01f bb7f 	b.w	49196 <zmk_event_manager_raise>
   29a98:	200072ef 	.word	0x200072ef
   29a9c:	200072f0 	.word	0x200072f0

00029aa0 <ble_save_profile_work>:

int zmk_ble_active_profile_index() { return active_profile; }

#if IS_ENABLED(CONFIG_SETTINGS)
static void ble_save_profile_work(struct k_work *work) {
    settings_save_one("ble/active_profile", &active_profile, sizeof(active_profile));
   29aa0:	4902      	ldr	r1, [pc, #8]	; (29aac <ble_save_profile_work+0xc>)
   29aa2:	4803      	ldr	r0, [pc, #12]	; (29ab0 <ble_save_profile_work+0x10>)
   29aa4:	2201      	movs	r2, #1
   29aa6:	f002 bc37 	b.w	2c318 <settings_save_one>
   29aaa:	bf00      	nop
   29aac:	200072ef 	.word	0x200072ef
   29ab0:	00053e7b 	.word	0x00053e7b

00029ab4 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   29ab4:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   29ab6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   29ab8:	b08a      	sub	sp, #40	; 0x28
   29aba:	4604      	mov	r4, r0
   29abc:	460e      	mov	r6, r1
   29abe:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   29ac0:	2b03      	cmp	r3, #3
   29ac2:	d820      	bhi.n	29b06 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   29ac4:	e8df f003 	tbb	[pc, r3]
   29ac8:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   29acc:	4911      	ldr	r1, [pc, #68]	; (29b14 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   29ace:	4628      	mov	r0, r5
   29ad0:	f022 f908 	bl	4bce4 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   29ad4:	9505      	str	r5, [sp, #20]
   29ad6:	7863      	ldrb	r3, [r4, #1]
   29ad8:	9304      	str	r3, [sp, #16]
   29ada:	78a3      	ldrb	r3, [r4, #2]
   29adc:	9303      	str	r3, [sp, #12]
   29ade:	78e3      	ldrb	r3, [r4, #3]
   29ae0:	9302      	str	r3, [sp, #8]
   29ae2:	7923      	ldrb	r3, [r4, #4]
   29ae4:	9301      	str	r3, [sp, #4]
   29ae6:	7963      	ldrb	r3, [r4, #5]
   29ae8:	9300      	str	r3, [sp, #0]
   29aea:	79a3      	ldrb	r3, [r4, #6]
   29aec:	4a0a      	ldr	r2, [pc, #40]	; (29b18 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   29aee:	211e      	movs	r1, #30
   29af0:	4630      	mov	r0, r6
   29af2:	f020 f816 	bl	49b22 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   29af6:	b00a      	add	sp, #40	; 0x28
   29af8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   29afa:	4908      	ldr	r1, [pc, #32]	; (29b1c <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   29afc:	e7e7      	b.n	29ace <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   29afe:	4908      	ldr	r1, [pc, #32]	; (29b20 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   29b00:	e7e5      	b.n	29ace <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   29b02:	4908      	ldr	r1, [pc, #32]	; (29b24 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   29b04:	e7e3      	b.n	29ace <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   29b06:	4a08      	ldr	r2, [pc, #32]	; (29b28 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   29b08:	210a      	movs	r1, #10
   29b0a:	4628      	mov	r0, r5
   29b0c:	f020 f809 	bl	49b22 <snprintk>
		break;
   29b10:	e7e0      	b.n	29ad4 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   29b12:	bf00      	nop
   29b14:	00053e8e 	.word	0x00053e8e
   29b18:	00053eb7 	.word	0x00053eb7
   29b1c:	00053e95 	.word	0x00053e95
   29b20:	00053e9c 	.word	0x00053e9c
   29b24:	00053ea6 	.word	0x00053ea6
   29b28:	00053eb0 	.word	0x00053eb0

00029b2c <ble_profiles_handle_set>:
#endif /* IS_ENABLED(CONFIG_ZMK_SPLIT_ROLE_CENTRAL) */

#if IS_ENABLED(CONFIG_SETTINGS)

static int ble_profiles_handle_set(const char *name, size_t len, settings_read_cb read_cb,
                                   void *cb_arg) {
   29b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29b30:	b08a      	sub	sp, #40	; 0x28
   29b32:	460d      	mov	r5, r1
   29b34:	4616      	mov	r6, r2
    const char *next;

    LOG_DBG("Setting BLE value %s", log_strdup(name));

    if (settings_name_steq(name, "profiles", &next) && next) {
   29b36:	4926      	ldr	r1, [pc, #152]	; (29bd0 <ble_profiles_handle_set+0xa4>)
   29b38:	466a      	mov	r2, sp
                                   void *cb_arg) {
   29b3a:	4604      	mov	r4, r0
   29b3c:	461f      	mov	r7, r3
    if (settings_name_steq(name, "profiles", &next) && next) {
   29b3e:	f020 fe1d 	bl	4a77c <settings_name_steq>
   29b42:	b1f8      	cbz	r0, 29b84 <ble_profiles_handle_set+0x58>
   29b44:	9800      	ldr	r0, [sp, #0]
   29b46:	b1e8      	cbz	r0, 29b84 <ble_profiles_handle_set+0x58>
        char *endptr;
        uint8_t idx = strtoul(next, &endptr, 10);
   29b48:	220a      	movs	r2, #10
   29b4a:	a901      	add	r1, sp, #4
   29b4c:	f022 f853 	bl	4bbf6 <strtoul>
        if (*endptr != '\0') {
   29b50:	9b01      	ldr	r3, [sp, #4]
   29b52:	781b      	ldrb	r3, [r3, #0]
   29b54:	bb03      	cbnz	r3, 29b98 <ble_profiles_handle_set+0x6c>
            LOG_WRN("Invalid profile index: %s", log_strdup(next));
            return -EINVAL;
        }

        if (len != sizeof(struct zmk_ble_profile)) {
   29b56:	2d16      	cmp	r5, #22
   29b58:	d11e      	bne.n	29b98 <ble_profiles_handle_set+0x6c>
            LOG_ERR("Invalid profile size (got %d expected %d)", len,
                    sizeof(struct zmk_ble_profile));
            return -EINVAL;
        }

        if (idx >= ZMK_BLE_PROFILE_COUNT) {
   29b5a:	b2c4      	uxtb	r4, r0
   29b5c:	2c04      	cmp	r4, #4
   29b5e:	d81b      	bhi.n	29b98 <ble_profiles_handle_set+0x6c>
            LOG_WRN("Profile address for index %d is larger than max of %d", idx,
                    ZMK_BLE_PROFILE_COUNT);
            return -EINVAL;
        }

        int err = read_cb(cb_arg, &profiles[idx], sizeof(struct zmk_ble_profile));
   29b60:	f8df 8070 	ldr.w	r8, [pc, #112]	; 29bd4 <ble_profiles_handle_set+0xa8>
   29b64:	436c      	muls	r4, r5
   29b66:	462a      	mov	r2, r5
   29b68:	eb08 0104 	add.w	r1, r8, r4
   29b6c:	4638      	mov	r0, r7
   29b6e:	47b0      	blx	r6
        if (err <= 0) {
   29b70:	2800      	cmp	r0, #0
   29b72:	dd13      	ble.n	29b9c <ble_profiles_handle_set+0x70>
            LOG_ERR("Failed to handle profile address from settings (err %d)", err);
            return err;
        }

        char addr_str[BT_ADDR_LE_STR_LEN];
        bt_addr_le_to_str(&profiles[idx].peer, addr_str, sizeof(addr_str));
   29b74:	f104 000f 	add.w	r0, r4, #15
   29b78:	a902      	add	r1, sp, #8
   29b7a:	4440      	add	r0, r8
   29b7c:	f7ff ff9a 	bl	29ab4 <bt_addr_le_to_str.constprop.0.isra.0>
            return err;
        }
    }
#endif

    return 0;
   29b80:	2000      	movs	r0, #0
   29b82:	e00b      	b.n	29b9c <ble_profiles_handle_set+0x70>
    } else if (settings_name_steq(name, "active_profile", &next) && !next) {
   29b84:	4914      	ldr	r1, [pc, #80]	; (29bd8 <ble_profiles_handle_set+0xac>)
   29b86:	466a      	mov	r2, sp
   29b88:	4620      	mov	r0, r4
   29b8a:	f020 fdf7 	bl	4a77c <settings_name_steq>
   29b8e:	b178      	cbz	r0, 29bb0 <ble_profiles_handle_set+0x84>
   29b90:	9b00      	ldr	r3, [sp, #0]
   29b92:	b96b      	cbnz	r3, 29bb0 <ble_profiles_handle_set+0x84>
        if (len != sizeof(active_profile)) {
   29b94:	2d01      	cmp	r5, #1
   29b96:	d004      	beq.n	29ba2 <ble_profiles_handle_set+0x76>
            return -EINVAL;
   29b98:	f06f 0015 	mvn.w	r0, #21
};
   29b9c:	b00a      	add	sp, #40	; 0x28
   29b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        int err = read_cb(cb_arg, &active_profile, sizeof(active_profile));
   29ba2:	490e      	ldr	r1, [pc, #56]	; (29bdc <ble_profiles_handle_set+0xb0>)
   29ba4:	462a      	mov	r2, r5
        int err = read_cb(cb_arg, &peripheral_addr, sizeof(bt_addr_le_t));
   29ba6:	4638      	mov	r0, r7
   29ba8:	47b0      	blx	r6
        if (err <= 0) {
   29baa:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   29bae:	e7f5      	b.n	29b9c <ble_profiles_handle_set+0x70>
    else if (settings_name_steq(name, "peripheral_address", &next) && !next) {
   29bb0:	490b      	ldr	r1, [pc, #44]	; (29be0 <ble_profiles_handle_set+0xb4>)
   29bb2:	466a      	mov	r2, sp
   29bb4:	4620      	mov	r0, r4
   29bb6:	f020 fde1 	bl	4a77c <settings_name_steq>
   29bba:	2800      	cmp	r0, #0
   29bbc:	d0e0      	beq.n	29b80 <ble_profiles_handle_set+0x54>
   29bbe:	9b00      	ldr	r3, [sp, #0]
   29bc0:	2b00      	cmp	r3, #0
   29bc2:	d1dd      	bne.n	29b80 <ble_profiles_handle_set+0x54>
        if (len != sizeof(bt_addr_le_t)) {
   29bc4:	2d07      	cmp	r5, #7
   29bc6:	d1e7      	bne.n	29b98 <ble_profiles_handle_set+0x6c>
        int err = read_cb(cb_arg, &peripheral_addr, sizeof(bt_addr_le_t));
   29bc8:	4906      	ldr	r1, [pc, #24]	; (29be4 <ble_profiles_handle_set+0xb8>)
   29bca:	462a      	mov	r2, r5
   29bcc:	e7eb      	b.n	29ba6 <ble_profiles_handle_set+0x7a>
   29bce:	bf00      	nop
   29bd0:	00053eda 	.word	0x00053eda
   29bd4:	200072f0 	.word	0x200072f0
   29bd8:	00053e7f 	.word	0x00053e7f
   29bdc:	200072ef 	.word	0x200072ef
   29be0:	00053efe 	.word	0x00053efe
   29be4:	200072e8 	.word	0x200072e8

00029be8 <disconnected>:
        LOG_DBG("Active profile connected");
        k_work_submit(&raise_profile_changed_event_work);
    }
}

static void disconnected(struct bt_conn *conn, uint8_t reason) {
   29be8:	b510      	push	{r4, lr}
   29bea:	b090      	sub	sp, #64	; 0x40
   29bec:	4604      	mov	r4, r0
    char addr[BT_ADDR_LE_STR_LEN];
    struct bt_conn_info info;

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   29bee:	f023 f9c5 	bl	4cf7c <bt_conn_get_dst>
   29bf2:	4669      	mov	r1, sp
   29bf4:	f7ff ff5e 	bl	29ab4 <bt_addr_le_to_str.constprop.0.isra.0>

    LOG_DBG("Disconnected from %s (reason 0x%02x)", log_strdup(addr), reason);

    bt_conn_get_info(conn, &info);
   29bf8:	a908      	add	r1, sp, #32
   29bfa:	4620      	mov	r0, r4
   29bfc:	f006 fa24 	bl	30048 <bt_conn_get_info>

    if (info.role != BT_CONN_ROLE_PERIPHERAL) {
   29c00:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   29c04:	2b01      	cmp	r3, #1
   29c06:	d114      	bne.n	29c32 <disconnected+0x4a>
        return;
    }

    // We need to do this in a work callback, otherwise the advertising update will still see the
    // connection for a profile as active, and not start advertising yet.
    k_work_submit(&update_advertising_work);
   29c08:	480b      	ldr	r0, [pc, #44]	; (29c38 <disconnected+0x50>)
   29c0a:	f01e fc19 	bl	48440 <k_work_submit>
    return bt_addr_le_cmp(bt_conn_get_dst(conn), &profiles[active_profile].peer) == 0;
   29c0e:	4620      	mov	r0, r4
   29c10:	f023 f9b4 	bl	4cf7c <bt_conn_get_dst>
   29c14:	4b09      	ldr	r3, [pc, #36]	; (29c3c <disconnected+0x54>)
   29c16:	7819      	ldrb	r1, [r3, #0]
   29c18:	220f      	movs	r2, #15
   29c1a:	2316      	movs	r3, #22
   29c1c:	fb13 2301 	smlabb	r3, r3, r1, r2
	return memcmp(a, b, sizeof(*a));
   29c20:	4907      	ldr	r1, [pc, #28]	; (29c40 <disconnected+0x58>)
   29c22:	2207      	movs	r2, #7
   29c24:	4419      	add	r1, r3
   29c26:	f022 f88e 	bl	4bd46 <memcmp>

    if (is_conn_active_profile(conn)) {
   29c2a:	b910      	cbnz	r0, 29c32 <disconnected+0x4a>
        LOG_DBG("Active profile disconnected");
        k_work_submit(&raise_profile_changed_event_work);
   29c2c:	4805      	ldr	r0, [pc, #20]	; (29c44 <disconnected+0x5c>)
   29c2e:	f01e fc07 	bl	48440 <k_work_submit>
    }
}
   29c32:	b010      	add	sp, #64	; 0x40
   29c34:	bd10      	pop	{r4, pc}
   29c36:	bf00      	nop
   29c38:	2000057c 	.word	0x2000057c
   29c3c:	200072ef 	.word	0x200072ef
   29c40:	200072f0 	.word	0x200072f0
   29c44:	2000058c 	.word	0x2000058c

00029c48 <zmk_ble_active_profile_is_open>:
bool zmk_ble_active_profile_is_open() {
   29c48:	b507      	push	{r0, r1, r2, lr}
    return !bt_addr_le_cmp(&profiles[active_profile].peer, BT_ADDR_LE_ANY);
   29c4a:	4b0b      	ldr	r3, [pc, #44]	; (29c78 <zmk_ble_active_profile_is_open+0x30>)
   29c4c:	480b      	ldr	r0, [pc, #44]	; (29c7c <zmk_ble_active_profile_is_open+0x34>)
   29c4e:	7819      	ldrb	r1, [r3, #0]
   29c50:	220f      	movs	r2, #15
   29c52:	2316      	movs	r3, #22
   29c54:	fb13 2301 	smlabb	r3, r3, r1, r2
   29c58:	2200      	movs	r2, #0
   29c5a:	9200      	str	r2, [sp, #0]
   29c5c:	4669      	mov	r1, sp
   29c5e:	f8cd 2003 	str.w	r2, [sp, #3]
   29c62:	4418      	add	r0, r3
   29c64:	2207      	movs	r2, #7
   29c66:	f022 f86e 	bl	4bd46 <memcmp>
}
   29c6a:	fab0 f080 	clz	r0, r0
   29c6e:	0940      	lsrs	r0, r0, #5
   29c70:	b003      	add	sp, #12
   29c72:	f85d fb04 	ldr.w	pc, [sp], #4
   29c76:	bf00      	nop
   29c78:	200072ef 	.word	0x200072ef
   29c7c:	200072f0 	.word	0x200072f0

00029c80 <set_profile_address>:
void set_profile_address(uint8_t index, const bt_addr_le_t *addr) {
   29c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29c84:	4604      	mov	r4, r0
   29c86:	b08c      	sub	sp, #48	; 0x30
   29c88:	460d      	mov	r5, r1
   29c8a:	f04f 0816 	mov.w	r8, #22
    memcpy(&profiles[index].peer, addr, sizeof(bt_addr_le_t));
   29c8e:	4f0f      	ldr	r7, [pc, #60]	; (29ccc <set_profile_address+0x4c>)
    bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
   29c90:	a904      	add	r1, sp, #16
   29c92:	4628      	mov	r0, r5
   29c94:	fb14 f608 	smulbb	r6, r4, r8
   29c98:	f7ff ff0c 	bl	29ab4 <bt_addr_le_to_str.constprop.0.isra.0>
    memcpy(&profiles[index].peer, addr, sizeof(bt_addr_le_t));
   29c9c:	f106 000f 	add.w	r0, r6, #15
   29ca0:	4629      	mov	r1, r5
   29ca2:	2207      	movs	r2, #7
   29ca4:	4438      	add	r0, r7
   29ca6:	f022 f85e 	bl	4bd66 <memcpy>
    sprintf(setting_name, "ble/profiles/%d", index);
   29caa:	4622      	mov	r2, r4
   29cac:	4908      	ldr	r1, [pc, #32]	; (29cd0 <set_profile_address+0x50>)
   29cae:	4668      	mov	r0, sp
   29cb0:	f003 fab2 	bl	2d218 <sprintf>
    settings_save_one(setting_name, &profiles[index], sizeof(struct zmk_ble_profile));
   29cb4:	4642      	mov	r2, r8
   29cb6:	19b9      	adds	r1, r7, r6
   29cb8:	4668      	mov	r0, sp
   29cba:	f002 fb2d 	bl	2c318 <settings_save_one>
    k_work_submit(&raise_profile_changed_event_work);
   29cbe:	4805      	ldr	r0, [pc, #20]	; (29cd4 <set_profile_address+0x54>)
   29cc0:	f01e fbbe 	bl	48440 <k_work_submit>
}
   29cc4:	b00c      	add	sp, #48	; 0x30
   29cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29cca:	bf00      	nop
   29ccc:	200072f0 	.word	0x200072f0
   29cd0:	00053ee3 	.word	0x00053ee3
   29cd4:	2000058c 	.word	0x2000058c

00029cd8 <zmk_ble_active_profile_is_connected>:
bool zmk_ble_active_profile_is_connected() {
   29cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
bt_addr_le_t *zmk_ble_active_profile_addr() { return &profiles[active_profile].peer; }
   29cda:	4b0f      	ldr	r3, [pc, #60]	; (29d18 <zmk_ble_active_profile_is_connected+0x40>)
   29cdc:	781a      	ldrb	r2, [r3, #0]
   29cde:	2416      	movs	r4, #22
   29ce0:	230f      	movs	r3, #15
   29ce2:	fb14 3402 	smlabb	r4, r4, r2, r3
   29ce6:	4b0d      	ldr	r3, [pc, #52]	; (29d1c <zmk_ble_active_profile_is_connected+0x44>)
   29ce8:	441c      	add	r4, r3
    if (!bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   29cea:	2500      	movs	r5, #0
   29cec:	2207      	movs	r2, #7
   29cee:	4669      	mov	r1, sp
   29cf0:	4620      	mov	r0, r4
   29cf2:	9500      	str	r5, [sp, #0]
   29cf4:	f8cd 5003 	str.w	r5, [sp, #3]
   29cf8:	f022 f825 	bl	4bd46 <memcmp>
   29cfc:	b148      	cbz	r0, 29d12 <zmk_ble_active_profile_is_connected+0x3a>
    } else if ((conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr)) == NULL) {
   29cfe:	4621      	mov	r1, r4
   29d00:	4628      	mov	r0, r5
   29d02:	f006 f94f 	bl	2ffa4 <bt_conn_lookup_addr_le>
   29d06:	b120      	cbz	r0, 29d12 <zmk_ble_active_profile_is_connected+0x3a>
    bt_conn_unref(conn);
   29d08:	f023 f867 	bl	4cdda <bt_conn_unref>
    return true;
   29d0c:	2001      	movs	r0, #1
}
   29d0e:	b003      	add	sp, #12
   29d10:	bd30      	pop	{r4, r5, pc}
        return false;
   29d12:	2000      	movs	r0, #0
   29d14:	e7fb      	b.n	29d0e <zmk_ble_active_profile_is_connected+0x36>
   29d16:	bf00      	nop
   29d18:	200072ef 	.word	0x200072ef
   29d1c:	200072f0 	.word	0x200072f0

00029d20 <update_advertising>:
int update_advertising() {
   29d20:	b5f0      	push	{r4, r5, r6, r7, lr}
   29d22:	b08d      	sub	sp, #52	; 0x34
    if (zmk_ble_active_profile_is_open()) {
   29d24:	f7ff ff90 	bl	29c48 <zmk_ble_active_profile_is_open>
   29d28:	b998      	cbnz	r0, 29d52 <update_advertising+0x32>
    } else if (!zmk_ble_active_profile_is_connected()) {
   29d2a:	f7ff ffd5 	bl	29cd8 <zmk_ble_active_profile_is_connected>
   29d2e:	f080 0301 	eor.w	r3, r0, #1
   29d32:	005b      	lsls	r3, r3, #1
   29d34:	b2db      	uxtb	r3, r3
    switch (desired_adv + CURR_ADV(advertising_status)) {
   29d36:	4d21      	ldr	r5, [pc, #132]	; (29dbc <update_advertising+0x9c>)
   29d38:	782a      	ldrb	r2, [r5, #0]
   29d3a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   29d3e:	2b11      	cmp	r3, #17
   29d40:	dc09      	bgt.n	29d56 <update_advertising+0x36>
   29d42:	2b02      	cmp	r3, #2
   29d44:	d02d      	beq.n	29da2 <update_advertising+0x82>
   29d46:	2b10      	cmp	r3, #16
   29d48:	d023      	beq.n	29d92 <update_advertising+0x72>
        desired_adv = ZMK_ADV_CONN;
   29d4a:	2400      	movs	r4, #0
};
   29d4c:	4620      	mov	r0, r4
   29d4e:	b00d      	add	sp, #52	; 0x34
   29d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
        desired_adv = ZMK_ADV_CONN;
   29d52:	2302      	movs	r3, #2
   29d54:	e7ef      	b.n	29d36 <update_advertising+0x16>
    switch (desired_adv + CURR_ADV(advertising_status)) {
   29d56:	2b20      	cmp	r3, #32
   29d58:	d01b      	beq.n	29d92 <update_advertising+0x72>
   29d5a:	2b12      	cmp	r3, #18
   29d5c:	d1f5      	bne.n	29d4a <update_advertising+0x2a>
        CHECKED_ADV_STOP();
   29d5e:	f005 f99b 	bl	2f098 <bt_le_adv_stop>
   29d62:	2300      	movs	r3, #0
   29d64:	702b      	strb	r3, [r5, #0]
   29d66:	4604      	mov	r4, r0
   29d68:	2800      	cmp	r0, #0
   29d6a:	d1ef      	bne.n	29d4c <update_advertising+0x2c>
        CHECKED_OPEN_ADV();
   29d6c:	4f14      	ldr	r7, [pc, #80]	; (29dc0 <update_advertising+0xa0>)
   29d6e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   29d70:	ae02      	add	r6, sp, #8
   29d72:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   29d74:	683b      	ldr	r3, [r7, #0]
   29d76:	4913      	ldr	r1, [pc, #76]	; (29dc4 <update_advertising+0xa4>)
   29d78:	6033      	str	r3, [r6, #0]
   29d7a:	2204      	movs	r2, #4
   29d7c:	9400      	str	r4, [sp, #0]
   29d7e:	4623      	mov	r3, r4
   29d80:	a802      	add	r0, sp, #8
   29d82:	f005 f957 	bl	2f034 <bt_le_adv_start>
   29d86:	4604      	mov	r4, r0
   29d88:	2800      	cmp	r0, #0
   29d8a:	d1df      	bne.n	29d4c <update_advertising+0x2c>
   29d8c:	2302      	movs	r3, #2
   29d8e:	702b      	strb	r3, [r5, #0]
        break;
   29d90:	e7db      	b.n	29d4a <update_advertising+0x2a>
        CHECKED_ADV_STOP();
   29d92:	f005 f981 	bl	2f098 <bt_le_adv_stop>
   29d96:	2300      	movs	r3, #0
   29d98:	702b      	strb	r3, [r5, #0]
   29d9a:	4604      	mov	r4, r0
   29d9c:	2800      	cmp	r0, #0
   29d9e:	d0d4      	beq.n	29d4a <update_advertising+0x2a>
   29da0:	e7d4      	b.n	29d4c <update_advertising+0x2c>
        CHECKED_OPEN_ADV();
   29da2:	4e07      	ldr	r6, [pc, #28]	; (29dc0 <update_advertising+0xa0>)
   29da4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   29da6:	ac07      	add	r4, sp, #28
   29da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   29daa:	6833      	ldr	r3, [r6, #0]
   29dac:	6023      	str	r3, [r4, #0]
   29dae:	2300      	movs	r3, #0
   29db0:	4904      	ldr	r1, [pc, #16]	; (29dc4 <update_advertising+0xa4>)
   29db2:	9300      	str	r3, [sp, #0]
   29db4:	2204      	movs	r2, #4
   29db6:	a807      	add	r0, sp, #28
   29db8:	e7e3      	b.n	29d82 <update_advertising+0x62>
   29dba:	bf00      	nop
   29dbc:	2000735e 	.word	0x2000735e
   29dc0:	00051a10 	.word	0x00051a10
   29dc4:	00052370 	.word	0x00052370

00029dc8 <auth_pairing_complete>:
    }

    return BT_SECURITY_ERR_SUCCESS;
};

static void auth_pairing_complete(struct bt_conn *conn, bool bonded) {
   29dc8:	b530      	push	{r4, r5, lr}
   29dca:	b091      	sub	sp, #68	; 0x44
   29dcc:	4605      	mov	r5, r0
    struct bt_conn_info info;
    char addr[BT_ADDR_LE_STR_LEN];
    const bt_addr_le_t *dst = bt_conn_get_dst(conn);
   29dce:	f023 f8d5 	bl	4cf7c <bt_conn_get_dst>

    bt_addr_le_to_str(dst, addr, sizeof(addr));
   29dd2:	4669      	mov	r1, sp
    const bt_addr_le_t *dst = bt_conn_get_dst(conn);
   29dd4:	4604      	mov	r4, r0
    bt_addr_le_to_str(dst, addr, sizeof(addr));
   29dd6:	f7ff fe6d 	bl	29ab4 <bt_addr_le_to_str.constprop.0.isra.0>
    bt_conn_get_info(conn, &info);
   29dda:	a908      	add	r1, sp, #32
   29ddc:	4628      	mov	r0, r5
   29dde:	f006 f933 	bl	30048 <bt_conn_get_info>

    if (info.role != BT_CONN_ROLE_PERIPHERAL) {
   29de2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   29de6:	2b01      	cmp	r3, #1
   29de8:	d105      	bne.n	29df6 <auth_pairing_complete+0x2e>
        LOG_DBG("SKIPPING FOR ROLE %d", info.role);
        return;
    }

    if (!zmk_ble_active_profile_is_open()) {
   29dea:	f7ff ff2d 	bl	29c48 <zmk_ble_active_profile_is_open>
        LOG_ERR("Pairing completed but current profile is not open: %s", log_strdup(addr));
        bt_unpair(BT_ID_DEFAULT, dst);
   29dee:	4621      	mov	r1, r4
    if (!zmk_ble_active_profile_is_open()) {
   29df0:	b918      	cbnz	r0, 29dfa <auth_pairing_complete+0x32>
        bt_unpair(BT_ID_DEFAULT, dst);
   29df2:	f004 fa51 	bl	2e298 <bt_unpair>
        return;
    }

    set_profile_address(active_profile, dst);
    update_advertising();
};
   29df6:	b011      	add	sp, #68	; 0x44
   29df8:	bd30      	pop	{r4, r5, pc}
    set_profile_address(active_profile, dst);
   29dfa:	4b03      	ldr	r3, [pc, #12]	; (29e08 <auth_pairing_complete+0x40>)
   29dfc:	7818      	ldrb	r0, [r3, #0]
   29dfe:	f7ff ff3f 	bl	29c80 <set_profile_address>
    update_advertising();
   29e02:	f7ff ff8d 	bl	29d20 <update_advertising>
   29e06:	e7f6      	b.n	29df6 <auth_pairing_complete+0x2e>
   29e08:	200072ef 	.word	0x200072ef

00029e0c <connected>:
static void connected(struct bt_conn *conn, uint8_t err) {
   29e0c:	b530      	push	{r4, r5, lr}
   29e0e:	b091      	sub	sp, #68	; 0x44
   29e10:	460d      	mov	r5, r1
    bt_conn_get_info(conn, &info);
   29e12:	a908      	add	r1, sp, #32
static void connected(struct bt_conn *conn, uint8_t err) {
   29e14:	4604      	mov	r4, r0
    bt_conn_get_info(conn, &info);
   29e16:	f006 f917 	bl	30048 <bt_conn_get_info>
    if (info.role != BT_CONN_ROLE_PERIPHERAL) {
   29e1a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   29e1e:	2b01      	cmp	r3, #1
   29e20:	d10b      	bne.n	29e3a <connected+0x2e>
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   29e22:	4620      	mov	r0, r4
   29e24:	f023 f8aa 	bl	4cf7c <bt_conn_get_dst>
   29e28:	4669      	mov	r1, sp
   29e2a:	f7ff fe43 	bl	29ab4 <bt_addr_le_to_str.constprop.0.isra.0>
    advertising_status = ZMK_ADV_NONE;
   29e2e:	4b11      	ldr	r3, [pc, #68]	; (29e74 <connected+0x68>)
   29e30:	2200      	movs	r2, #0
   29e32:	701a      	strb	r2, [r3, #0]
    if (err) {
   29e34:	b11d      	cbz	r5, 29e3e <connected+0x32>
        update_advertising();
   29e36:	f7ff ff73 	bl	29d20 <update_advertising>
}
   29e3a:	b011      	add	sp, #68	; 0x44
   29e3c:	bd30      	pop	{r4, r5, pc}
    if (bt_conn_set_security(conn, BT_SECURITY_L2)) {
   29e3e:	2102      	movs	r1, #2
   29e40:	4620      	mov	r0, r4
   29e42:	f023 f849 	bl	4ced8 <bt_conn_set_security>
    update_advertising();
   29e46:	f7ff ff6b 	bl	29d20 <update_advertising>
    return bt_addr_le_cmp(bt_conn_get_dst(conn), &profiles[active_profile].peer) == 0;
   29e4a:	4620      	mov	r0, r4
   29e4c:	f023 f896 	bl	4cf7c <bt_conn_get_dst>
   29e50:	4b09      	ldr	r3, [pc, #36]	; (29e78 <connected+0x6c>)
   29e52:	7819      	ldrb	r1, [r3, #0]
   29e54:	220f      	movs	r2, #15
   29e56:	2316      	movs	r3, #22
   29e58:	fb13 2301 	smlabb	r3, r3, r1, r2
   29e5c:	4907      	ldr	r1, [pc, #28]	; (29e7c <connected+0x70>)
   29e5e:	2207      	movs	r2, #7
   29e60:	4419      	add	r1, r3
   29e62:	f021 ff70 	bl	4bd46 <memcmp>
    if (is_conn_active_profile(conn)) {
   29e66:	2800      	cmp	r0, #0
   29e68:	d1e7      	bne.n	29e3a <connected+0x2e>
        k_work_submit(&raise_profile_changed_event_work);
   29e6a:	4805      	ldr	r0, [pc, #20]	; (29e80 <connected+0x74>)
   29e6c:	f01e fae8 	bl	48440 <k_work_submit>
   29e70:	e7e3      	b.n	29e3a <connected+0x2e>
   29e72:	bf00      	nop
   29e74:	2000735e 	.word	0x2000735e
   29e78:	200072ef 	.word	0x200072ef
   29e7c:	200072f0 	.word	0x200072f0
   29e80:	2000058c 	.word	0x2000058c

00029e84 <zmk_ble_init>:
    }

    update_advertising();
}

static int zmk_ble_init(const struct device *_arg) {
   29e84:	b510      	push	{r4, lr}
    int err = bt_enable(NULL);
   29e86:	2000      	movs	r0, #0
   29e88:	f004 fb54 	bl	2e534 <bt_enable>

    if (err) {
   29e8c:	4604      	mov	r4, r0
   29e8e:	b9c0      	cbnz	r0, 29ec2 <zmk_ble_init+0x3e>
        LOG_ERR("BLUETOOTH FAILED (%d)", err);
        return err;
    }

#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
   29e90:	f002 fb96 	bl	2c5c0 <settings_subsys_init>

    err = settings_register(&profiles_handler);
   29e94:	480c      	ldr	r0, [pc, #48]	; (29ec8 <zmk_ble_init+0x44>)
   29e96:	f002 facf 	bl	2c438 <settings_register>
    if (err) {
   29e9a:	4604      	mov	r4, r0
   29e9c:	b988      	cbnz	r0, 29ec2 <zmk_ble_init+0x3e>
        LOG_ERR("Failed to setup the profile settings handler (err %d)", err);
        return err;
    }

    k_work_init_delayable(&ble_save_work, ble_save_profile_work);
   29e9e:	490b      	ldr	r1, [pc, #44]	; (29ecc <zmk_ble_init+0x48>)
   29ea0:	480b      	ldr	r0, [pc, #44]	; (29ed0 <zmk_ble_init+0x4c>)
   29ea2:	f026 ff43 	bl	50d2c <k_work_init_delayable>

    settings_load_subtree("ble");
   29ea6:	480b      	ldr	r0, [pc, #44]	; (29ed4 <zmk_ble_init+0x50>)
   29ea8:	f002 fa70 	bl	2c38c <settings_load_subtree>
    settings_load_subtree("bt");
   29eac:	480a      	ldr	r0, [pc, #40]	; (29ed8 <zmk_ble_init+0x54>)
   29eae:	f002 fa6d 	bl	2c38c <settings_load_subtree>
            LOG_ERR("Failed to delete setting: %d", err);
        }
    }
#endif

    bt_conn_cb_register(&conn_callbacks);
   29eb2:	480a      	ldr	r0, [pc, #40]	; (29edc <zmk_ble_init+0x58>)
   29eb4:	f006 f852 	bl	2ff5c <bt_conn_cb_register>
    bt_conn_auth_cb_register(&zmk_ble_auth_cb_display);
   29eb8:	4809      	ldr	r0, [pc, #36]	; (29ee0 <zmk_ble_init+0x5c>)
   29eba:	f006 fb2d 	bl	30518 <bt_conn_auth_cb_register>
    update_advertising();
   29ebe:	f7ff ff2f 	bl	29d20 <update_advertising>

    zmk_ble_ready(0);

    return 0;
}
   29ec2:	4620      	mov	r0, r4
   29ec4:	bd10      	pop	{r4, pc}
   29ec6:	bf00      	nop
   29ec8:	20000564 	.word	0x20000564
   29ecc:	00029aa1 	.word	0x00029aa1
   29ed0:	200018b8 	.word	0x200018b8
   29ed4:	00053ef3 	.word	0x00053ef3
   29ed8:	00053ef7 	.word	0x00053ef7
   29edc:	20000544 	.word	0x20000544
   29ee0:	2000051c 	.word	0x2000051c

00029ee4 <zmk_ble_clear_bonds>:
int zmk_ble_clear_bonds() {
   29ee4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    if (bt_addr_le_cmp(&profiles[active_profile].peer, BT_ADDR_LE_ANY)) {
   29ee8:	4e12      	ldr	r6, [pc, #72]	; (29f34 <zmk_ble_clear_bonds+0x50>)
   29eea:	4f13      	ldr	r7, [pc, #76]	; (29f38 <zmk_ble_clear_bonds+0x54>)
   29eec:	7830      	ldrb	r0, [r6, #0]
   29eee:	2516      	movs	r5, #22
   29ef0:	f04f 080f 	mov.w	r8, #15
   29ef4:	fb15 8000 	smlabb	r0, r5, r0, r8
   29ef8:	2400      	movs	r4, #0
   29efa:	2207      	movs	r2, #7
   29efc:	4669      	mov	r1, sp
   29efe:	4438      	add	r0, r7
   29f00:	9400      	str	r4, [sp, #0]
   29f02:	f8cd 4003 	str.w	r4, [sp, #3]
   29f06:	f021 ff1e 	bl	4bd46 <memcmp>
   29f0a:	b168      	cbz	r0, 29f28 <zmk_ble_clear_bonds+0x44>
        bt_unpair(BT_ID_DEFAULT, &profiles[active_profile].peer);
   29f0c:	7833      	ldrb	r3, [r6, #0]
   29f0e:	fb15 8103 	smlabb	r1, r5, r3, r8
   29f12:	4439      	add	r1, r7
   29f14:	4620      	mov	r0, r4
   29f16:	f004 f9bf 	bl	2e298 <bt_unpair>
        set_profile_address(active_profile, BT_ADDR_LE_ANY);
   29f1a:	7830      	ldrb	r0, [r6, #0]
   29f1c:	9402      	str	r4, [sp, #8]
   29f1e:	a902      	add	r1, sp, #8
   29f20:	f8cd 400b 	str.w	r4, [sp, #11]
   29f24:	f7ff feac 	bl	29c80 <set_profile_address>
    update_advertising();
   29f28:	f7ff fefa 	bl	29d20 <update_advertising>
};
   29f2c:	2000      	movs	r0, #0
   29f2e:	b004      	add	sp, #16
   29f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29f34:	200072ef 	.word	0x200072ef
   29f38:	200072f0 	.word	0x200072f0

00029f3c <zmk_ble_prof_select>:
    if (index >= ZMK_BLE_PROFILE_COUNT) {
   29f3c:	2804      	cmp	r0, #4
int zmk_ble_prof_select(uint8_t index) {
   29f3e:	b508      	push	{r3, lr}
    if (index >= ZMK_BLE_PROFILE_COUNT) {
   29f40:	d810      	bhi.n	29f64 <zmk_ble_prof_select+0x28>
    if (active_profile == index) {
   29f42:	4b0a      	ldr	r3, [pc, #40]	; (29f6c <zmk_ble_prof_select+0x30>)
   29f44:	781a      	ldrb	r2, [r3, #0]
   29f46:	4282      	cmp	r2, r0
   29f48:	d00a      	beq.n	29f60 <zmk_ble_prof_select+0x24>
    active_profile = index;
   29f4a:	7018      	strb	r0, [r3, #0]
    return k_work_reschedule(&ble_save_work, K_MSEC(CONFIG_ZMK_SETTINGS_SAVE_DEBOUNCE));
   29f4c:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   29f50:	2300      	movs	r3, #0
   29f52:	4807      	ldr	r0, [pc, #28]	; (29f70 <zmk_ble_prof_select+0x34>)
   29f54:	f01e fb10 	bl	48578 <k_work_reschedule>
    update_advertising();
   29f58:	f7ff fee2 	bl	29d20 <update_advertising>
    raise_profile_changed_event();
   29f5c:	f7ff fd88 	bl	29a70 <raise_profile_changed_event>
        return 0;
   29f60:	2000      	movs	r0, #0
};
   29f62:	bd08      	pop	{r3, pc}
        return -ERANGE;
   29f64:	f06f 0021 	mvn.w	r0, #33	; 0x21
   29f68:	e7fb      	b.n	29f62 <zmk_ble_prof_select+0x26>
   29f6a:	bf00      	nop
   29f6c:	200072ef 	.word	0x200072ef
   29f70:	200018b8 	.word	0x200018b8

00029f74 <zmk_ble_prof_next>:
    return zmk_ble_prof_select((active_profile + 1) % ZMK_BLE_PROFILE_COUNT);
   29f74:	4b05      	ldr	r3, [pc, #20]	; (29f8c <zmk_ble_prof_next+0x18>)
   29f76:	7818      	ldrb	r0, [r3, #0]
   29f78:	2305      	movs	r3, #5
   29f7a:	3001      	adds	r0, #1
   29f7c:	fbb0 f3f3 	udiv	r3, r0, r3
   29f80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   29f84:	1ac0      	subs	r0, r0, r3
   29f86:	b2c0      	uxtb	r0, r0
   29f88:	f7ff bfd8 	b.w	29f3c <zmk_ble_prof_select>
   29f8c:	200072ef 	.word	0x200072ef

00029f90 <zmk_ble_prof_prev>:
    return zmk_ble_prof_select((active_profile + ZMK_BLE_PROFILE_COUNT - 1) %
   29f90:	4b05      	ldr	r3, [pc, #20]	; (29fa8 <zmk_ble_prof_prev+0x18>)
   29f92:	7818      	ldrb	r0, [r3, #0]
   29f94:	2305      	movs	r3, #5
   29f96:	3004      	adds	r0, #4
   29f98:	fbb0 f3f3 	udiv	r3, r0, r3
   29f9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   29fa0:	1ac0      	subs	r0, r0, r3
   29fa2:	b2c0      	uxtb	r0, r0
   29fa4:	f7ff bfca 	b.w	29f3c <zmk_ble_prof_select>
   29fa8:	200072ef 	.word	0x200072ef

00029fac <zmk_ble_active_profile_addr>:
bt_addr_le_t *zmk_ble_active_profile_addr() { return &profiles[active_profile].peer; }
   29fac:	4b04      	ldr	r3, [pc, #16]	; (29fc0 <zmk_ble_active_profile_addr+0x14>)
   29fae:	4805      	ldr	r0, [pc, #20]	; (29fc4 <zmk_ble_active_profile_addr+0x18>)
   29fb0:	7819      	ldrb	r1, [r3, #0]
   29fb2:	220f      	movs	r2, #15
   29fb4:	2316      	movs	r3, #22
   29fb6:	fb13 2301 	smlabb	r3, r3, r1, r2
   29fba:	4418      	add	r0, r3
   29fbc:	4770      	bx	lr
   29fbe:	bf00      	nop
   29fc0:	200072ef 	.word	0x200072ef
   29fc4:	200072f0 	.word	0x200072f0

00029fc8 <zmk_ble_set_peripheral_addr>:
void zmk_ble_set_peripheral_addr(bt_addr_le_t *addr) {
   29fc8:	b510      	push	{r4, lr}
    memcpy(&peripheral_addr, addr, sizeof(bt_addr_le_t));
   29fca:	4601      	mov	r1, r0
void zmk_ble_set_peripheral_addr(bt_addr_le_t *addr) {
   29fcc:	4604      	mov	r4, r0
    memcpy(&peripheral_addr, addr, sizeof(bt_addr_le_t));
   29fce:	2207      	movs	r2, #7
   29fd0:	4804      	ldr	r0, [pc, #16]	; (29fe4 <zmk_ble_set_peripheral_addr+0x1c>)
   29fd2:	f021 fec8 	bl	4bd66 <memcpy>
    settings_save_one("ble/peripheral_address", addr, sizeof(bt_addr_le_t));
   29fd6:	4621      	mov	r1, r4
   29fd8:	4803      	ldr	r0, [pc, #12]	; (29fe8 <zmk_ble_set_peripheral_addr+0x20>)
}
   29fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    settings_save_one("ble/peripheral_address", addr, sizeof(bt_addr_le_t));
   29fde:	2207      	movs	r2, #7
   29fe0:	f002 b99a 	b.w	2c318 <settings_save_one>
   29fe4:	200072e8 	.word	0x200072e8
   29fe8:	00053efa 	.word	0x00053efa

00029fec <read_hids_report_map>:
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
                             sizeof(struct hids_report));
}

static ssize_t read_hids_report_map(struct bt_conn *conn, const struct bt_gatt_attr *attr,
                                    void *buf, uint16_t len, uint16_t offset) {
   29fec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buf, len, offset, zmk_hid_report_desc,
   29fee:	244c      	movs	r4, #76	; 0x4c
   29ff0:	9402      	str	r4, [sp, #8]
   29ff2:	4c04      	ldr	r4, [pc, #16]	; (2a004 <read_hids_report_map+0x18>)
   29ff4:	9401      	str	r4, [sp, #4]
   29ff6:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   29ffa:	9400      	str	r4, [sp, #0]
   29ffc:	f024 fad1 	bl	4e5a2 <bt_gatt_attr_read>
                             sizeof(zmk_hid_report_desc));
}
   2a000:	b004      	add	sp, #16
   2a002:	bd10      	pop	{r4, pc}
   2a004:	00053f38 	.word	0x00053f38

0002a008 <zmk_hog_init>:
    k_work_submit_to_queue(&hog_work_q, &hog_consumer_work);

    return 0;
};

int zmk_hog_init(const struct device *_arg) {
   2a008:	b507      	push	{r0, r1, r2, lr}
    static const struct k_work_queue_config queue_config = {.name = "HID Over GATT Send Work"};
    k_work_queue_start(&hog_work_q, hog_q_stack, K_THREAD_STACK_SIZEOF(hog_q_stack),
   2a00a:	4b06      	ldr	r3, [pc, #24]	; (2a024 <zmk_hog_init+0x1c>)
   2a00c:	9300      	str	r3, [sp, #0]
   2a00e:	4906      	ldr	r1, [pc, #24]	; (2a028 <zmk_hog_init+0x20>)
   2a010:	4806      	ldr	r0, [pc, #24]	; (2a02c <zmk_hog_init+0x24>)
   2a012:	2305      	movs	r3, #5
   2a014:	f44f 7200 	mov.w	r2, #512	; 0x200
   2a018:	f01e fa18 	bl	4844c <k_work_queue_start>
                       CONFIG_ZMK_BLE_THREAD_PRIORITY, &queue_config);

    return 0;
}
   2a01c:	2000      	movs	r0, #0
   2a01e:	b003      	add	sp, #12
   2a020:	f85d fb04 	ldr.w	pc, [sp], #4
   2a024:	00052390 	.word	0x00052390
   2a028:	20007430 	.word	0x20007430
   2a02c:	200018e8 	.word	0x200018e8

0002a030 <send_keyboard_report_callback>:
void send_keyboard_report_callback(struct k_work *work) {
   2a030:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a032:	4e13      	ldr	r6, [pc, #76]	; (2a080 <send_keyboard_report_callback+0x50>)
        struct bt_gatt_notify_params notify_params = {
   2a034:	4f13      	ldr	r7, [pc, #76]	; (2a084 <send_keyboard_report_callback+0x54>)
void send_keyboard_report_callback(struct k_work *work) {
   2a036:	b089      	sub	sp, #36	; 0x24
   2a038:	2200      	movs	r2, #0
   2a03a:	2300      	movs	r3, #0
   2a03c:	4669      	mov	r1, sp
   2a03e:	4630      	mov	r0, r6
   2a040:	f01d ff32 	bl	47ea8 <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_hog_keyboard_msgq, &report, K_NO_WAIT) == 0) {
   2a044:	4605      	mov	r5, r0
   2a046:	b108      	cbz	r0, 2a04c <send_keyboard_report_callback+0x1c>
}
   2a048:	b009      	add	sp, #36	; 0x24
   2a04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        struct bt_conn *conn = destination_connection();
   2a04c:	f01f fc09 	bl	49862 <destination_connection>
        if (conn == NULL) {
   2a050:	4604      	mov	r4, r0
   2a052:	2800      	cmp	r0, #0
   2a054:	d0f8      	beq.n	2a048 <send_keyboard_report_callback+0x18>
        struct bt_gatt_notify_params notify_params = {
   2a056:	2218      	movs	r2, #24
   2a058:	4629      	mov	r1, r5
   2a05a:	a802      	add	r0, sp, #8
   2a05c:	f021 fe8e 	bl	4bd7c <memset>
   2a060:	2308      	movs	r3, #8
        int err = bt_gatt_notify_cb(conn, &notify_params);
   2a062:	eb0d 0103 	add.w	r1, sp, r3
   2a066:	4620      	mov	r0, r4
        struct bt_gatt_notify_params notify_params = {
   2a068:	9703      	str	r7, [sp, #12]
   2a06a:	f8cd d010 	str.w	sp, [sp, #16]
   2a06e:	f8ad 3014 	strh.w	r3, [sp, #20]
        int err = bt_gatt_notify_cb(conn, &notify_params);
   2a072:	f007 ff4d 	bl	31f10 <bt_gatt_notify_cb>
        bt_conn_unref(conn);
   2a076:	4620      	mov	r0, r4
   2a078:	f022 feaf 	bl	4cdda <bt_conn_unref>
   2a07c:	e7dc      	b.n	2a038 <send_keyboard_report_callback+0x8>
   2a07e:	bf00      	nop
   2a080:	20001204 	.word	0x20001204
   2a084:	000523fc 	.word	0x000523fc

0002a088 <send_consumer_report_callback>:
void send_consumer_report_callback(struct k_work *work) {
   2a088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a08c:	4f13      	ldr	r7, [pc, #76]	; (2a0dc <send_consumer_report_callback+0x54>)
        struct bt_gatt_notify_params notify_params = {
   2a08e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2a0e0 <send_consumer_report_callback+0x58>
void send_consumer_report_callback(struct k_work *work) {
   2a092:	b08a      	sub	sp, #40	; 0x28
   2a094:	ae01      	add	r6, sp, #4
   2a096:	2200      	movs	r2, #0
   2a098:	2300      	movs	r3, #0
   2a09a:	4631      	mov	r1, r6
   2a09c:	4638      	mov	r0, r7
   2a09e:	f01d ff03 	bl	47ea8 <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_hog_consumer_msgq, &report, K_NO_WAIT) == 0) {
   2a0a2:	4605      	mov	r5, r0
   2a0a4:	b110      	cbz	r0, 2a0ac <send_consumer_report_callback+0x24>
};
   2a0a6:	b00a      	add	sp, #40	; 0x28
   2a0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        struct bt_conn *conn = destination_connection();
   2a0ac:	f01f fbd9 	bl	49862 <destination_connection>
        if (conn == NULL) {
   2a0b0:	4604      	mov	r4, r0
   2a0b2:	2800      	cmp	r0, #0
   2a0b4:	d0f7      	beq.n	2a0a6 <send_consumer_report_callback+0x1e>
        struct bt_gatt_notify_params notify_params = {
   2a0b6:	2218      	movs	r2, #24
   2a0b8:	4629      	mov	r1, r5
   2a0ba:	a804      	add	r0, sp, #16
   2a0bc:	f021 fe5e 	bl	4bd7c <memset>
   2a0c0:	230c      	movs	r3, #12
        int err = bt_gatt_notify_cb(conn, &notify_params);
   2a0c2:	a904      	add	r1, sp, #16
   2a0c4:	4620      	mov	r0, r4
        struct bt_gatt_notify_params notify_params = {
   2a0c6:	e9cd 8605 	strd	r8, r6, [sp, #20]
   2a0ca:	f8ad 301c 	strh.w	r3, [sp, #28]
        int err = bt_gatt_notify_cb(conn, &notify_params);
   2a0ce:	f007 ff1f 	bl	31f10 <bt_gatt_notify_cb>
        bt_conn_unref(conn);
   2a0d2:	4620      	mov	r0, r4
   2a0d4:	f022 fe81 	bl	4cdda <bt_conn_unref>
   2a0d8:	e7dd      	b.n	2a096 <send_consumer_report_callback+0xe>
   2a0da:	bf00      	nop
   2a0dc:	200011d4 	.word	0x200011d4
   2a0e0:	00052460 	.word	0x00052460

0002a0e4 <zmk_hog_send_keyboard_report>:
int zmk_hog_send_keyboard_report(struct zmk_hid_keyboard_report_body *report) {
   2a0e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a0e6:	4605      	mov	r5, r0
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a0e8:	f640 42cd 	movw	r2, #3277	; 0xccd
   2a0ec:	4601      	mov	r1, r0
   2a0ee:	2300      	movs	r3, #0
   2a0f0:	480c      	ldr	r0, [pc, #48]	; (2a124 <zmk_hog_send_keyboard_report+0x40>)
   2a0f2:	f01d fe83 	bl	47dfc <z_impl_k_msgq_put>
    if (err) {
   2a0f6:	4604      	mov	r4, r0
   2a0f8:	b178      	cbz	r0, 2a11a <zmk_hog_send_keyboard_report+0x36>
        switch (err) {
   2a0fa:	f110 0f0b 	cmn.w	r0, #11
   2a0fe:	d109      	bne.n	2a114 <zmk_hog_send_keyboard_report+0x30>
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a100:	2200      	movs	r2, #0
   2a102:	2300      	movs	r3, #0
   2a104:	4669      	mov	r1, sp
   2a106:	4807      	ldr	r0, [pc, #28]	; (2a124 <zmk_hog_send_keyboard_report+0x40>)
   2a108:	f01d fece 	bl	47ea8 <z_impl_k_msgq_get>
            return zmk_hog_send_keyboard_report(report);
   2a10c:	4628      	mov	r0, r5
   2a10e:	f7ff ffe9 	bl	2a0e4 <zmk_hog_send_keyboard_report>
   2a112:	4604      	mov	r4, r0
};
   2a114:	4620      	mov	r0, r4
   2a116:	b003      	add	sp, #12
   2a118:	bd30      	pop	{r4, r5, pc}
    k_work_submit_to_queue(&hog_work_q, &hog_keyboard_work);
   2a11a:	4903      	ldr	r1, [pc, #12]	; (2a128 <zmk_hog_send_keyboard_report+0x44>)
   2a11c:	4803      	ldr	r0, [pc, #12]	; (2a12c <zmk_hog_send_keyboard_report+0x48>)
   2a11e:	f026 fde8 	bl	50cf2 <k_work_submit_to_queue>
    return 0;
   2a122:	e7f7      	b.n	2a114 <zmk_hog_send_keyboard_report+0x30>
   2a124:	20001204 	.word	0x20001204
   2a128:	200005ac 	.word	0x200005ac
   2a12c:	200018e8 	.word	0x200018e8

0002a130 <zmk_hog_send_consumer_report>:
int zmk_hog_send_consumer_report(struct zmk_hid_consumer_report_body *report) {
   2a130:	b530      	push	{r4, r5, lr}
   2a132:	4605      	mov	r5, r0
   2a134:	b085      	sub	sp, #20
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a136:	f640 42cd 	movw	r2, #3277	; 0xccd
   2a13a:	4601      	mov	r1, r0
   2a13c:	2300      	movs	r3, #0
   2a13e:	480d      	ldr	r0, [pc, #52]	; (2a174 <zmk_hog_send_consumer_report+0x44>)
   2a140:	f01d fe5c 	bl	47dfc <z_impl_k_msgq_put>
    if (err) {
   2a144:	4604      	mov	r4, r0
   2a146:	b178      	cbz	r0, 2a168 <zmk_hog_send_consumer_report+0x38>
        switch (err) {
   2a148:	f110 0f0b 	cmn.w	r0, #11
   2a14c:	d109      	bne.n	2a162 <zmk_hog_send_consumer_report+0x32>
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a14e:	2200      	movs	r2, #0
   2a150:	2300      	movs	r3, #0
   2a152:	a901      	add	r1, sp, #4
   2a154:	4807      	ldr	r0, [pc, #28]	; (2a174 <zmk_hog_send_consumer_report+0x44>)
   2a156:	f01d fea7 	bl	47ea8 <z_impl_k_msgq_get>
            return zmk_hog_send_consumer_report(report);
   2a15a:	4628      	mov	r0, r5
   2a15c:	f7ff ffe8 	bl	2a130 <zmk_hog_send_consumer_report>
   2a160:	4604      	mov	r4, r0
};
   2a162:	4620      	mov	r0, r4
   2a164:	b005      	add	sp, #20
   2a166:	bd30      	pop	{r4, r5, pc}
    k_work_submit_to_queue(&hog_work_q, &hog_consumer_work);
   2a168:	4903      	ldr	r1, [pc, #12]	; (2a178 <zmk_hog_send_consumer_report+0x48>)
   2a16a:	4804      	ldr	r0, [pc, #16]	; (2a17c <zmk_hog_send_consumer_report+0x4c>)
   2a16c:	f026 fdc1 	bl	50cf2 <k_work_submit_to_queue>
    return 0;
   2a170:	e7f7      	b.n	2a162 <zmk_hog_send_consumer_report+0x32>
   2a172:	bf00      	nop
   2a174:	200011d4 	.word	0x200011d4
   2a178:	2000059c 	.word	0x2000059c
   2a17c:	200018e8 	.word	0x200018e8

0002a180 <new_zmk_battery_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/battery_state_changed.h>

   2a180:	b510      	push	{r4, lr}
   2a182:	4604      	mov	r4, r0
   2a184:	200c      	movs	r0, #12
   2a186:	f027 f92c 	bl	513e2 <k_malloc>
   2a18a:	4a02      	ldr	r2, [pc, #8]	; (2a194 <new_zmk_battery_state_changed+0x14>)
   2a18c:	6002      	str	r2, [r0, #0]
   2a18e:	7204      	strb	r4, [r0, #8]
   2a190:	bd10      	pop	{r4, pc}
   2a192:	bf00      	nop
   2a194:	000524c4 	.word	0x000524c4

0002a198 <zmk_battery_timer>:
    }
}

K_WORK_DEFINE(battery_work, zmk_battery_work);

static void zmk_battery_timer(struct k_timer *timer) { k_work_submit(&battery_work); }
   2a198:	4801      	ldr	r0, [pc, #4]	; (2a1a0 <zmk_battery_timer+0x8>)
   2a19a:	f01e b951 	b.w	48440 <k_work_submit>
   2a19e:	bf00      	nop
   2a1a0:	2000067c 	.word	0x2000067c

0002a1a4 <zmk_battery_update.constprop.0>:
static int zmk_battery_update(const struct device *battery) {
   2a1a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
						  enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, type);
   2a1a6:	4c0f      	ldr	r4, [pc, #60]	; (2a1e4 <zmk_battery_update.constprop.0+0x40>)
   2a1a8:	68a5      	ldr	r5, [r4, #8]
   2a1aa:	212c      	movs	r1, #44	; 0x2c
   2a1ac:	68eb      	ldr	r3, [r5, #12]
   2a1ae:	4620      	mov	r0, r4
   2a1b0:	4798      	blx	r3
    if (rc != 0) {
   2a1b2:	b9a0      	cbnz	r0, 2a1de <zmk_battery_update.constprop.0+0x3a>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
   2a1b4:	212c      	movs	r1, #44	; 0x2c
   2a1b6:	692b      	ldr	r3, [r5, #16]
   2a1b8:	466a      	mov	r2, sp
   2a1ba:	4620      	mov	r0, r4
   2a1bc:	4798      	blx	r3
    if (rc != 0) {
   2a1be:	b970      	cbnz	r0, 2a1de <zmk_battery_update.constprop.0+0x3a>
    if (last_state_of_charge != state_of_charge.val1) {
   2a1c0:	4c09      	ldr	r4, [pc, #36]	; (2a1e8 <zmk_battery_update.constprop.0+0x44>)
   2a1c2:	9b00      	ldr	r3, [sp, #0]
   2a1c4:	7822      	ldrb	r2, [r4, #0]
   2a1c6:	429a      	cmp	r2, r3
   2a1c8:	d009      	beq.n	2a1de <zmk_battery_update.constprop.0+0x3a>
        last_state_of_charge = state_of_charge.val1;
   2a1ca:	b2d8      	uxtb	r0, r3
   2a1cc:	7020      	strb	r0, [r4, #0]
        rc = bt_bas_set_battery_level(last_state_of_charge);
   2a1ce:	f000 ffa1 	bl	2b114 <bt_bas_set_battery_level>
        if (rc != 0) {
   2a1d2:	b920      	cbnz	r0, 2a1de <zmk_battery_update.constprop.0+0x3a>
        rc = ZMK_EVENT_RAISE(new_zmk_battery_state_changed(
   2a1d4:	7820      	ldrb	r0, [r4, #0]
   2a1d6:	f7ff ffd3 	bl	2a180 <new_zmk_battery_state_changed>
   2a1da:	f01e ffdc 	bl	49196 <zmk_event_manager_raise>
}
   2a1de:	b003      	add	sp, #12
   2a1e0:	bd30      	pop	{r4, r5, pc}
   2a1e2:	bf00      	nop
   2a1e4:	000515d8 	.word	0x000515d8
   2a1e8:	20007360 	.word	0x20007360

0002a1ec <zmk_battery_init>:

K_TIMER_DEFINE(battery_timer, zmk_battery_timer, NULL);

static int zmk_battery_init(const struct device *_arg) {
   2a1ec:	b513      	push	{r0, r1, r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   2a1ee:	480b      	ldr	r0, [pc, #44]	; (2a21c <zmk_battery_init+0x30>)
   2a1f0:	f026 fb33 	bl	5085a <z_device_is_ready>
    }

    LOG_WRN("Finding battery device labeled BATTERY is deprecated. Use zmk,battery chosen node.");
#endif

    if (!device_is_ready(battery)) {
   2a1f4:	b170      	cbz	r0, 2a214 <zmk_battery_init+0x28>
        LOG_ERR("Battery device \"%s\" is not ready", battery->name);
        return -ENODEV;
    }

    int rc = zmk_battery_update(battery);
   2a1f6:	f7ff ffd5 	bl	2a1a4 <zmk_battery_update.constprop.0>

    if (rc != 0) {
   2a1fa:	4604      	mov	r4, r0
   2a1fc:	b938      	cbnz	r0, 2a20e <zmk_battery_init+0x22>
        LOG_DBG("Failed to update battery value: %d.", rc);
        return rc;
    }

    k_timer_start(&battery_timer, K_MINUTES(1), K_SECONDS(CONFIG_ZMK_BATTERY_REPORT_INTERVAL));
   2a1fe:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   2a202:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
   2a204:	4806      	ldr	r0, [pc, #24]	; (2a220 <zmk_battery_init+0x34>)
   2a206:	e9cd 2300 	strd	r2, r3, [sp]
   2a20a:	f01e feb7 	bl	48f7c <z_impl_k_timer_start>

    return 0;
}
   2a20e:	4620      	mov	r0, r4
   2a210:	b002      	add	sp, #8
   2a212:	bd10      	pop	{r4, pc}
        return -ENODEV;
   2a214:	f06f 0412 	mvn.w	r4, #18
   2a218:	e7f9      	b.n	2a20e <zmk_battery_init+0x22>
   2a21a:	bf00      	nop
   2a21c:	000515d8 	.word	0x000515d8
   2a220:	20001090 	.word	0x20001090

0002a224 <start_scan>:
    if (type == BT_GAP_ADV_TYPE_ADV_IND || type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
        bt_data_parse(ad, split_central_eir_found, (void *)addr);
    }
}

static int start_scan(void) {
   2a224:	b530      	push	{r4, r5, lr}
    int err;

    err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, split_central_device_found);
   2a226:	4d06      	ldr	r5, [pc, #24]	; (2a240 <start_scan+0x1c>)
   2a228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
static int start_scan(void) {
   2a22a:	b087      	sub	sp, #28
    err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, split_central_device_found);
   2a22c:	ac01      	add	r4, sp, #4
   2a22e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2a230:	682b      	ldr	r3, [r5, #0]
   2a232:	4904      	ldr	r1, [pc, #16]	; (2a244 <start_scan+0x20>)
   2a234:	6023      	str	r3, [r4, #0]
   2a236:	a801      	add	r0, sp, #4
   2a238:	f005 f996 	bl	2f568 <bt_le_scan_start>
        return err;
    }

    LOG_DBG("Scanning successfully started");
    return 0;
}
   2a23c:	b007      	add	sp, #28
   2a23e:	bd30      	pop	{r4, r5, pc}
   2a240:	00051a24 	.word	0x00051a24
   2a244:	0002a351 	.word	0x0002a351

0002a248 <zmk_split_bt_central_init>:

    struct zmk_split_run_behavior_payload_wrapper wrapper = {.source = source, .payload = payload};
    return split_bt_invoke_behavior_payload(wrapper);
}

int zmk_split_bt_central_init(const struct device *_arg) {
   2a248:	b507      	push	{r0, r1, r2, lr}
    k_work_queue_start(&split_central_split_run_q, split_central_split_run_q_stack,
   2a24a:	2300      	movs	r3, #0
   2a24c:	4907      	ldr	r1, [pc, #28]	; (2a26c <zmk_split_bt_central_init+0x24>)
   2a24e:	9300      	str	r3, [sp, #0]
   2a250:	f44f 7200 	mov.w	r2, #512	; 0x200
   2a254:	2305      	movs	r3, #5
   2a256:	4806      	ldr	r0, [pc, #24]	; (2a270 <zmk_split_bt_central_init+0x28>)
   2a258:	f01e f8f8 	bl	4844c <k_work_queue_start>
                       K_THREAD_STACK_SIZEOF(split_central_split_run_q_stack),
                       CONFIG_ZMK_BLE_THREAD_PRIORITY, NULL);
    bt_conn_cb_register(&conn_callbacks);
   2a25c:	4805      	ldr	r0, [pc, #20]	; (2a274 <zmk_split_bt_central_init+0x2c>)
   2a25e:	f005 fe7d 	bl	2ff5c <bt_conn_cb_register>

    return start_scan();
}
   2a262:	b003      	add	sp, #12
   2a264:	f85d eb04 	ldr.w	lr, [sp], #4
    return start_scan();
   2a268:	f7ff bfdc 	b.w	2a224 <start_scan>
   2a26c:	20007630 	.word	0x20007630
   2a270:	20001988 	.word	0x20001988
   2a274:	2000069c 	.word	0x2000069c

0002a278 <split_bt_invoke_behavior_payload>:
split_bt_invoke_behavior_payload(struct zmk_split_run_behavior_payload_wrapper payload_wrapper) {
   2a278:	b084      	sub	sp, #16
   2a27a:	b510      	push	{r4, lr}
   2a27c:	b088      	sub	sp, #32
   2a27e:	ac0a      	add	r4, sp, #40	; 0x28
   2a280:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a284:	4811      	ldr	r0, [pc, #68]	; (2a2cc <split_bt_invoke_behavior_payload+0x54>)
   2a286:	4621      	mov	r1, r4
   2a288:	f640 42cd 	movw	r2, #3277	; 0xccd
   2a28c:	2300      	movs	r3, #0
   2a28e:	f01d fdb5 	bl	47dfc <z_impl_k_msgq_put>
    if (err) {
   2a292:	4604      	mov	r4, r0
   2a294:	b1a8      	cbz	r0, 2a2c2 <split_bt_invoke_behavior_payload+0x4a>
        switch (err) {
   2a296:	f110 0f0b 	cmn.w	r0, #11
   2a29a:	d10c      	bne.n	2a2b6 <split_bt_invoke_behavior_payload+0x3e>
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a29c:	2200      	movs	r2, #0
   2a29e:	2300      	movs	r3, #0
   2a2a0:	a903      	add	r1, sp, #12
   2a2a2:	480a      	ldr	r0, [pc, #40]	; (2a2cc <split_bt_invoke_behavior_payload+0x54>)
   2a2a4:	f01d fe00 	bl	47ea8 <z_impl_k_msgq_get>
            return split_bt_invoke_behavior_payload(payload_wrapper);
   2a2a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a2aa:	9300      	str	r3, [sp, #0]
   2a2ac:	ab0a      	add	r3, sp, #40	; 0x28
   2a2ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2a2b0:	f7ff ffe2 	bl	2a278 <split_bt_invoke_behavior_payload>
   2a2b4:	4604      	mov	r4, r0
};
   2a2b6:	4620      	mov	r0, r4
   2a2b8:	b008      	add	sp, #32
   2a2ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a2be:	b004      	add	sp, #16
   2a2c0:	4770      	bx	lr
    k_work_submit_to_queue(&split_central_split_run_q, &split_central_split_run_work);
   2a2c2:	4903      	ldr	r1, [pc, #12]	; (2a2d0 <split_bt_invoke_behavior_payload+0x58>)
   2a2c4:	4803      	ldr	r0, [pc, #12]	; (2a2d4 <split_bt_invoke_behavior_payload+0x5c>)
   2a2c6:	f026 fd14 	bl	50cf2 <k_work_submit_to_queue>
    return 0;
   2a2ca:	e7f4      	b.n	2a2b6 <split_bt_invoke_behavior_payload+0x3e>
   2a2cc:	20001264 	.word	0x20001264
   2a2d0:	2000068c 	.word	0x2000068c
   2a2d4:	20001988 	.word	0x20001988

0002a2d8 <bt_addr_le_to_str.constprop.0.isra.0>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   2a2d8:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
   2a2da:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   2a2dc:	b08a      	sub	sp, #40	; 0x28
   2a2de:	4604      	mov	r4, r0
   2a2e0:	460e      	mov	r6, r1
   2a2e2:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   2a2e4:	2b03      	cmp	r3, #3
   2a2e6:	d820      	bhi.n	2a32a <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   2a2e8:	e8df f003 	tbb	[pc, r3]
   2a2ec:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
   2a2f0:	4911      	ldr	r1, [pc, #68]	; (2a338 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		strcpy(type, "random");
   2a2f2:	4628      	mov	r0, r5
   2a2f4:	f021 fcf6 	bl	4bce4 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   2a2f8:	9505      	str	r5, [sp, #20]
   2a2fa:	7863      	ldrb	r3, [r4, #1]
   2a2fc:	9304      	str	r3, [sp, #16]
   2a2fe:	78a3      	ldrb	r3, [r4, #2]
   2a300:	9303      	str	r3, [sp, #12]
   2a302:	78e3      	ldrb	r3, [r4, #3]
   2a304:	9302      	str	r3, [sp, #8]
   2a306:	7923      	ldrb	r3, [r4, #4]
   2a308:	9301      	str	r3, [sp, #4]
   2a30a:	7963      	ldrb	r3, [r4, #5]
   2a30c:	9300      	str	r3, [sp, #0]
   2a30e:	79a3      	ldrb	r3, [r4, #6]
   2a310:	4a0a      	ldr	r2, [pc, #40]	; (2a33c <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   2a312:	211e      	movs	r1, #30
   2a314:	4630      	mov	r0, r6
   2a316:	f01f fc04 	bl	49b22 <snprintk>
}
   2a31a:	b00a      	add	sp, #40	; 0x28
   2a31c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   2a31e:	4908      	ldr	r1, [pc, #32]	; (2a340 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   2a320:	e7e7      	b.n	2a2f2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   2a322:	4908      	ldr	r1, [pc, #32]	; (2a344 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   2a324:	e7e5      	b.n	2a2f2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   2a326:	4908      	ldr	r1, [pc, #32]	; (2a348 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   2a328:	e7e3      	b.n	2a2f2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   2a32a:	4a08      	ldr	r2, [pc, #32]	; (2a34c <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   2a32c:	210a      	movs	r1, #10
   2a32e:	4628      	mov	r0, r5
   2a330:	f01f fbf7 	bl	49b22 <snprintk>
		break;
   2a334:	e7e0      	b.n	2a2f8 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   2a336:	bf00      	nop
   2a338:	00053e8e 	.word	0x00053e8e
   2a33c:	00053eb7 	.word	0x00053eb7
   2a340:	00053e95 	.word	0x00053e95
   2a344:	00053e9c 	.word	0x00053e9c
   2a348:	00053ea6 	.word	0x00053ea6
   2a34c:	00053eb0 	.word	0x00053eb0

0002a350 <split_central_device_found>:
                                       struct net_buf_simple *ad) {
   2a350:	b570      	push	{r4, r5, r6, lr}
   2a352:	b088      	sub	sp, #32
   2a354:	4616      	mov	r6, r2
    bt_addr_le_to_str(addr, dev, sizeof(dev));
   2a356:	4669      	mov	r1, sp
                                       struct net_buf_simple *ad) {
   2a358:	4605      	mov	r5, r0
   2a35a:	461c      	mov	r4, r3
    bt_addr_le_to_str(addr, dev, sizeof(dev));
   2a35c:	f7ff ffbc 	bl	2a2d8 <bt_addr_le_to_str.constprop.0.isra.0>
    if (type == BT_GAP_ADV_TYPE_ADV_IND || type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
   2a360:	2e01      	cmp	r6, #1
   2a362:	d804      	bhi.n	2a36e <split_central_device_found+0x1e>
        bt_data_parse(ad, split_central_eir_found, (void *)addr);
   2a364:	4903      	ldr	r1, [pc, #12]	; (2a374 <split_central_device_found+0x24>)
   2a366:	462a      	mov	r2, r5
   2a368:	4620      	mov	r0, r4
   2a36a:	f022 f9cc 	bl	4c706 <bt_data_parse>
}
   2a36e:	b008      	add	sp, #32
   2a370:	bd70      	pop	{r4, r5, r6, pc}
   2a372:	bf00      	nop
   2a374:	0002a785 	.word	0x0002a785

0002a378 <peripheral_event_work_callback>:
void peripheral_event_work_callback(struct k_work *work) {
   2a378:	b530      	push	{r4, r5, lr}
   2a37a:	4d0c      	ldr	r5, [pc, #48]	; (2a3ac <peripheral_event_work_callback+0x34>)
   2a37c:	b089      	sub	sp, #36	; 0x24
   2a37e:	ac02      	add	r4, sp, #8
   2a380:	2200      	movs	r2, #0
   2a382:	2300      	movs	r3, #0
   2a384:	4621      	mov	r1, r4
   2a386:	4628      	mov	r0, r5
   2a388:	f01d fd8e 	bl	47ea8 <z_impl_k_msgq_get>
    while (k_msgq_get(&peripheral_event_msgq, &ev, K_NO_WAIT) == 0) {
   2a38c:	b108      	cbz	r0, 2a392 <peripheral_event_work_callback+0x1a>
}
   2a38e:	b009      	add	sp, #36	; 0x24
   2a390:	bd30      	pop	{r4, r5, pc}
        ZMK_EVENT_RAISE(new_zmk_position_state_changed(ev));
   2a392:	ab08      	add	r3, sp, #32
   2a394:	e913 0003 	ldmdb	r3, {r0, r1}
   2a398:	e88d 0003 	stmia.w	sp, {r0, r1}
   2a39c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2a3a0:	f7fe fde8 	bl	28f74 <new_zmk_position_state_changed>
   2a3a4:	f01e fef7 	bl	49196 <zmk_event_manager_raise>
   2a3a8:	e7ea      	b.n	2a380 <peripheral_event_work_callback+0x8>
   2a3aa:	bf00      	nop
   2a3ac:	20001174 	.word	0x20001174

0002a3b0 <split_central_split_run_callback>:
void split_central_split_run_callback(struct k_work *work) {
   2a3b0:	b570      	push	{r4, r5, r6, lr}
   2a3b2:	4e10      	ldr	r6, [pc, #64]	; (2a3f4 <split_central_split_run_callback+0x44>)
        if (peripherals[payload_wrapper.source].state != PERIPHERAL_SLOT_STATE_CONNECTED) {
   2a3b4:	4c10      	ldr	r4, [pc, #64]	; (2a3f8 <split_central_split_run_callback+0x48>)
void split_central_split_run_callback(struct k_work *work) {
   2a3b6:	b08a      	sub	sp, #40	; 0x28
   2a3b8:	2200      	movs	r2, #0
   2a3ba:	2300      	movs	r3, #0
   2a3bc:	a905      	add	r1, sp, #20
   2a3be:	4630      	mov	r0, r6
   2a3c0:	f01d fd72 	bl	47ea8 <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_split_central_split_run_msgq, &payload_wrapper, K_NO_WAIT) == 0) {
   2a3c4:	b108      	cbz	r0, 2a3ca <split_central_split_run_callback+0x1a>
}
   2a3c6:	b00a      	add	sp, #40	; 0x28
   2a3c8:	bd70      	pop	{r4, r5, r6, pc}
        if (peripherals[payload_wrapper.source].state != PERIPHERAL_SLOT_STATE_CONNECTED) {
   2a3ca:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2a3ce:	227c      	movs	r2, #124	; 0x7c
   2a3d0:	4353      	muls	r3, r2
   2a3d2:	18e5      	adds	r5, r4, r3
   2a3d4:	5ce3      	ldrb	r3, [r4, r3]
   2a3d6:	2b02      	cmp	r3, #2
   2a3d8:	d1ee      	bne.n	2a3b8 <split_central_split_run_callback+0x8>
 */
static inline int bt_gatt_write_without_response(struct bt_conn *conn,
						 uint16_t handle, const void *data,
						 uint16_t length, bool sign)
{
	return bt_gatt_write_without_response_cb(conn, handle, data, length,
   2a3da:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2a3de:	2301      	movs	r3, #1
   2a3e0:	9300      	str	r3, [sp, #0]
   2a3e2:	f8b5 1058 	ldrh.w	r1, [r5, #88]	; 0x58
   2a3e6:	6868      	ldr	r0, [r5, #4]
   2a3e8:	2313      	movs	r3, #19
   2a3ea:	f10d 0215 	add.w	r2, sp, #21
   2a3ee:	f024 fb74 	bl	4eada <bt_gatt_write_without_response_cb>
   2a3f2:	e7e1      	b.n	2a3b8 <split_central_split_run_callback+0x8>
   2a3f4:	20001264 	.word	0x20001264
   2a3f8:	200042ac 	.word	0x200042ac

0002a3fc <peripheral_slot_index_for_conn>:
        if (peripherals[i].conn == conn) {
   2a3fc:	4b03      	ldr	r3, [pc, #12]	; (2a40c <peripheral_slot_index_for_conn+0x10>)
   2a3fe:	685b      	ldr	r3, [r3, #4]
   2a400:	4283      	cmp	r3, r0
}
   2a402:	bf14      	ite	ne
   2a404:	f06f 0015 	mvnne.w	r0, #21
   2a408:	2000      	moveq	r0, #0
   2a40a:	4770      	bx	lr
   2a40c:	200042ac 	.word	0x200042ac

0002a410 <peripheral_slot_for_conn>:
struct peripheral_slot *peripheral_slot_for_conn(struct bt_conn *conn) {
   2a410:	b508      	push	{r3, lr}
    int idx = peripheral_slot_index_for_conn(conn);
   2a412:	f7ff fff3 	bl	2a3fc <peripheral_slot_index_for_conn>
    if (idx < 0) {
   2a416:	1e03      	subs	r3, r0, #0
    return &peripherals[idx];
   2a418:	bfa3      	ittte	ge
   2a41a:	4803      	ldrge	r0, [pc, #12]	; (2a428 <peripheral_slot_for_conn+0x18>)
   2a41c:	227c      	movge	r2, #124	; 0x7c
   2a41e:	fb02 0003 	mlage	r0, r2, r3, r0
        return NULL;
   2a422:	2000      	movlt	r0, #0
}
   2a424:	bd08      	pop	{r3, pc}
   2a426:	bf00      	nop
   2a428:	200042ac 	.word	0x200042ac

0002a42c <split_central_process_connection>:
static void split_central_process_connection(struct bt_conn *conn) {
   2a42c:	b510      	push	{r4, lr}
    err = bt_conn_set_security(conn, BT_SECURITY_L2);
   2a42e:	2102      	movs	r1, #2
static void split_central_process_connection(struct bt_conn *conn) {
   2a430:	b088      	sub	sp, #32
   2a432:	4604      	mov	r4, r0
    err = bt_conn_set_security(conn, BT_SECURITY_L2);
   2a434:	f022 fd50 	bl	4ced8 <bt_conn_set_security>
    if (err) {
   2a438:	b948      	cbnz	r0, 2a44e <split_central_process_connection+0x22>
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   2a43a:	4620      	mov	r0, r4
   2a43c:	f7ff ffe8 	bl	2a410 <peripheral_slot_for_conn>
    if (slot == NULL) {
   2a440:	b128      	cbz	r0, 2a44e <split_central_process_connection+0x22>
    if (!slot->subscribe_params.value_handle) {
   2a442:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   2a444:	b12b      	cbz	r3, 2a452 <split_central_process_connection+0x26>
    bt_conn_get_info(conn, &info);
   2a446:	4669      	mov	r1, sp
   2a448:	4620      	mov	r0, r4
   2a44a:	f005 fdfd 	bl	30048 <bt_conn_get_info>
}
   2a44e:	b008      	add	sp, #32
   2a450:	bd10      	pop	{r4, pc}
        slot->discover_params.uuid = &split_service_uuid.uuid;
   2a452:	4a09      	ldr	r2, [pc, #36]	; (2a478 <split_central_process_connection+0x4c>)
   2a454:	6082      	str	r2, [r0, #8]
        slot->discover_params.func = split_central_service_discovery_func;
   2a456:	4a09      	ldr	r2, [pc, #36]	; (2a47c <split_central_process_connection+0x50>)
   2a458:	60c2      	str	r2, [r0, #12]
        slot->discover_params.start_handle = 0x0001;
   2a45a:	2201      	movs	r2, #1
   2a45c:	8202      	strh	r2, [r0, #16]
        slot->discover_params.end_handle = 0xffff;
   2a45e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2a462:	82c2      	strh	r2, [r0, #22]
        slot->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   2a464:	7603      	strb	r3, [r0, #24]
        err = bt_gatt_discover(slot->conn, &slot->discover_params);
   2a466:	f100 0108 	add.w	r1, r0, #8
   2a46a:	6840      	ldr	r0, [r0, #4]
   2a46c:	f007 feb8 	bl	321e0 <bt_gatt_discover>
        if (err) {
   2a470:	2800      	cmp	r0, #0
   2a472:	d0e8      	beq.n	2a446 <split_central_process_connection+0x1a>
   2a474:	e7eb      	b.n	2a44e <split_central_process_connection+0x22>
   2a476:	bf00      	nop
   2a478:	00053fc2 	.word	0x00053fc2
   2a47c:	0002a481 	.word	0x0002a481

0002a480 <split_central_service_discovery_func>:
                                                    struct bt_gatt_discover_params *params) {
   2a480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a484:	4613      	mov	r3, r2
   2a486:	b086      	sub	sp, #24
   2a488:	4607      	mov	r7, r0
    if (!attr) {
   2a48a:	460d      	mov	r5, r1
   2a48c:	b939      	cbnz	r1, 2a49e <split_central_service_discovery_func+0x1e>
        (void)memset(params, 0, sizeof(*params));
   2a48e:	2218      	movs	r2, #24
   2a490:	4618      	mov	r0, r3
   2a492:	f021 fc73 	bl	4bd7c <memset>
        return BT_GATT_ITER_STOP;
   2a496:	2000      	movs	r0, #0
}
   2a498:	b006      	add	sp, #24
   2a49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   2a49e:	f7ff ffb7 	bl	2a410 <peripheral_slot_for_conn>
    if (slot == NULL) {
   2a4a2:	4604      	mov	r4, r0
   2a4a4:	2800      	cmp	r0, #0
   2a4a6:	d0f6      	beq.n	2a496 <split_central_service_discovery_func+0x16>
    if (bt_uuid_cmp(slot->discover_params.uuid, BT_UUID_DECLARE_128(ZMK_SPLIT_BT_SERVICE_UUID))) {
   2a4a8:	4b12      	ldr	r3, [pc, #72]	; (2a4f4 <split_central_service_discovery_func+0x74>)
   2a4aa:	f8d0 c008 	ldr.w	ip, [r0, #8]
   2a4ae:	aa01      	add	r2, sp, #4
   2a4b0:	f103 0810 	add.w	r8, r3, #16
   2a4b4:	4696      	mov	lr, r2
   2a4b6:	6818      	ldr	r0, [r3, #0]
   2a4b8:	6859      	ldr	r1, [r3, #4]
   2a4ba:	4616      	mov	r6, r2
   2a4bc:	c603      	stmia	r6!, {r0, r1}
   2a4be:	3308      	adds	r3, #8
   2a4c0:	4543      	cmp	r3, r8
   2a4c2:	4632      	mov	r2, r6
   2a4c4:	d1f7      	bne.n	2a4b6 <split_central_service_discovery_func+0x36>
   2a4c6:	781b      	ldrb	r3, [r3, #0]
   2a4c8:	7033      	strb	r3, [r6, #0]
   2a4ca:	4671      	mov	r1, lr
   2a4cc:	4660      	mov	r0, ip
   2a4ce:	f021 fd38 	bl	4bf42 <bt_uuid_cmp>
   2a4d2:	b108      	cbz	r0, 2a4d8 <split_central_service_discovery_func+0x58>
        return BT_GATT_ITER_CONTINUE;
   2a4d4:	2001      	movs	r0, #1
   2a4d6:	e7df      	b.n	2a498 <split_central_service_discovery_func+0x18>
    slot->discover_params.func = split_central_chrc_discovery_func;
   2a4d8:	4b07      	ldr	r3, [pc, #28]	; (2a4f8 <split_central_service_discovery_func+0x78>)
   2a4da:	60e3      	str	r3, [r4, #12]
    slot->discover_params.start_handle = attr->handle + 1;
   2a4dc:	8a2b      	ldrh	r3, [r5, #16]
    slot->discover_params.uuid = NULL;
   2a4de:	60a0      	str	r0, [r4, #8]
    slot->discover_params.start_handle = attr->handle + 1;
   2a4e0:	3301      	adds	r3, #1
   2a4e2:	8223      	strh	r3, [r4, #16]
    slot->discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
   2a4e4:	2303      	movs	r3, #3
   2a4e6:	7623      	strb	r3, [r4, #24]
    int err = bt_gatt_discover(conn, &slot->discover_params);
   2a4e8:	f104 0108 	add.w	r1, r4, #8
   2a4ec:	4638      	mov	r0, r7
   2a4ee:	f007 fe77 	bl	321e0 <bt_gatt_discover>
    if (err) {
   2a4f2:	e7d0      	b.n	2a496 <split_central_service_discovery_func+0x16>
   2a4f4:	00051a38 	.word	0x00051a38
   2a4f8:	0002a5c1 	.word	0x0002a5c1

0002a4fc <split_central_notify_func>:
                                         uint16_t length) {
   2a4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a500:	b086      	sub	sp, #24
   2a502:	4607      	mov	r7, r0
   2a504:	4614      	mov	r4, r2
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   2a506:	f7ff ff83 	bl	2a410 <peripheral_slot_for_conn>
    if (slot == NULL) {
   2a50a:	2800      	cmp	r0, #0
   2a50c:	d051      	beq.n	2a5b2 <split_central_notify_func+0xb6>
    if (!data) {
   2a50e:	b924      	cbnz	r4, 2a51a <split_central_notify_func+0x1e>
        params->value_handle = 0U;
   2a510:	810c      	strh	r4, [r1, #8]
        return BT_GATT_ITER_STOP;
   2a512:	4620      	mov	r0, r4
}
   2a514:	b006      	add	sp, #24
   2a516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a51a:	1e63      	subs	r3, r4, #1
   2a51c:	f100 0259 	add.w	r2, r0, #89	; 0x59
   2a520:	340f      	adds	r4, #15
        slot->changed_positions[i] = ((uint8_t *)data)[i] ^ slot->position_state[i];
   2a522:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   2a526:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   2a52a:	4069      	eors	r1, r5
   2a52c:	7411      	strb	r1, [r2, #16]
        slot->position_state[i] = ((uint8_t *)data)[i];
   2a52e:	7819      	ldrb	r1, [r3, #0]
   2a530:	7011      	strb	r1, [r2, #0]
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a532:	42a3      	cmp	r3, r4
   2a534:	d1f5      	bne.n	2a522 <split_central_notify_func+0x26>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a536:	f8df 9080 	ldr.w	r9, [pc, #128]	; 2a5b8 <split_central_notify_func+0xbc>
                k_work_submit(&peripheral_event_work);
   2a53a:	f8df a080 	ldr.w	sl, [pc, #128]	; 2a5bc <split_central_notify_func+0xc0>
   2a53e:	f100 046a 	add.w	r4, r0, #106	; 0x6a
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a542:	2600      	movs	r6, #0
                bool pressed = slot->position_state[i] & BIT(j);
   2a544:	f04f 0801 	mov.w	r8, #1
        for (int j = 0; j < 8; j++) {
   2a548:	2500      	movs	r5, #0
            if (slot->changed_positions[i] & BIT(j)) {
   2a54a:	7823      	ldrb	r3, [r4, #0]
   2a54c:	40eb      	lsrs	r3, r5
   2a54e:	07db      	lsls	r3, r3, #31
   2a550:	d527      	bpl.n	2a5a2 <split_central_notify_func+0xa6>
                bool pressed = slot->position_state[i] & BIT(j);
   2a552:	f814 1c10 	ldrb.w	r1, [r4, #-16]
   2a556:	fa08 f305 	lsl.w	r3, r8, r5
   2a55a:	4219      	tst	r1, r3
                                                            peripheral_slot_index_for_conn(conn),
   2a55c:	4638      	mov	r0, r7
                bool pressed = slot->position_state[i] & BIT(j);
   2a55e:	bf14      	ite	ne
   2a560:	2101      	movne	r1, #1
   2a562:	2100      	moveq	r1, #0
                                                            peripheral_slot_index_for_conn(conn),
   2a564:	f7ff ff4a 	bl	2a3fc <peripheral_slot_index_for_conn>
   2a568:	19aa      	adds	r2, r5, r6
                struct zmk_position_state_changed ev = {.source =
   2a56a:	f88d 0000 	strb.w	r0, [sp]
   2a56e:	9201      	str	r2, [sp, #4]
   2a570:	f88d 1008 	strb.w	r1, [sp, #8]
	return z_impl_k_uptime_ticks();
   2a574:	f026 fd88 	bl	51088 <z_impl_k_uptime_ticks>
   2a578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a57c:	fba0 0302 	umull	r0, r3, r0, r2
   2a580:	fb02 3101 	mla	r1, r2, r1, r3
   2a584:	0bc0      	lsrs	r0, r0, #15
   2a586:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   2a58a:	0bc9      	lsrs	r1, r1, #15
   2a58c:	e9cd 0104 	strd	r0, r1, [sp, #16]
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a590:	2200      	movs	r2, #0
   2a592:	2300      	movs	r3, #0
   2a594:	4669      	mov	r1, sp
   2a596:	4648      	mov	r0, r9
   2a598:	f01d fc30 	bl	47dfc <z_impl_k_msgq_put>
                k_work_submit(&peripheral_event_work);
   2a59c:	4650      	mov	r0, sl
   2a59e:	f01d ff4f 	bl	48440 <k_work_submit>
        for (int j = 0; j < 8; j++) {
   2a5a2:	3501      	adds	r5, #1
   2a5a4:	2d08      	cmp	r5, #8
   2a5a6:	d1d0      	bne.n	2a54a <split_central_notify_func+0x4e>
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a5a8:	3608      	adds	r6, #8
   2a5aa:	2e80      	cmp	r6, #128	; 0x80
   2a5ac:	f104 0401 	add.w	r4, r4, #1
   2a5b0:	d1ca      	bne.n	2a548 <split_central_notify_func+0x4c>
        return BT_GATT_ITER_CONTINUE;
   2a5b2:	2001      	movs	r0, #1
   2a5b4:	e7ae      	b.n	2a514 <split_central_notify_func+0x18>
   2a5b6:	bf00      	nop
   2a5b8:	20001174 	.word	0x20001174
   2a5bc:	200006bc 	.word	0x200006bc

0002a5c0 <split_central_chrc_discovery_func>:
                                                 struct bt_gatt_discover_params *params) {
   2a5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a5c4:	4606      	mov	r6, r0
   2a5c6:	b08a      	sub	sp, #40	; 0x28
    if (!attr) {
   2a5c8:	460d      	mov	r5, r1
   2a5ca:	2900      	cmp	r1, #0
   2a5cc:	d062      	beq.n	2a694 <split_central_chrc_discovery_func+0xd4>
    if (!attr->user_data) {
   2a5ce:	68c9      	ldr	r1, [r1, #12]
   2a5d0:	2900      	cmp	r1, #0
   2a5d2:	d061      	beq.n	2a698 <split_central_chrc_discovery_func+0xd8>
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   2a5d4:	f7ff ff1c 	bl	2a410 <peripheral_slot_for_conn>
    if (slot == NULL) {
   2a5d8:	4604      	mov	r4, r0
   2a5da:	2800      	cmp	r0, #0
   2a5dc:	d03a      	beq.n	2a654 <split_central_chrc_discovery_func+0x94>
                     BT_UUID_DECLARE_128(ZMK_SPLIT_BT_CHAR_POSITION_STATE_UUID))) {
   2a5de:	4b2f      	ldr	r3, [pc, #188]	; (2a69c <split_central_chrc_discovery_func+0xdc>)
    if (!bt_uuid_cmp(((struct bt_gatt_chrc *)attr->user_data)->uuid,
   2a5e0:	f8d1 c000 	ldr.w	ip, [r1]
                     BT_UUID_DECLARE_128(ZMK_SPLIT_BT_CHAR_POSITION_STATE_UUID))) {
   2a5e4:	466a      	mov	r2, sp
   2a5e6:	f103 0810 	add.w	r8, r3, #16
   2a5ea:	4696      	mov	lr, r2
   2a5ec:	6818      	ldr	r0, [r3, #0]
   2a5ee:	6859      	ldr	r1, [r3, #4]
   2a5f0:	4617      	mov	r7, r2
   2a5f2:	c703      	stmia	r7!, {r0, r1}
   2a5f4:	3308      	adds	r3, #8
   2a5f6:	4543      	cmp	r3, r8
   2a5f8:	463a      	mov	r2, r7
   2a5fa:	d1f7      	bne.n	2a5ec <split_central_chrc_discovery_func+0x2c>
   2a5fc:	781b      	ldrb	r3, [r3, #0]
   2a5fe:	703b      	strb	r3, [r7, #0]
    if (!bt_uuid_cmp(((struct bt_gatt_chrc *)attr->user_data)->uuid,
   2a600:	4671      	mov	r1, lr
   2a602:	4660      	mov	r0, ip
   2a604:	f021 fc9d 	bl	4bf42 <bt_uuid_cmp>
   2a608:	bb38      	cbnz	r0, 2a65a <split_central_chrc_discovery_func+0x9a>
        slot->discover_params.start_handle = attr->handle + 2;
   2a60a:	8a2b      	ldrh	r3, [r5, #16]
        slot->discover_params.uuid = NULL;
   2a60c:	60a0      	str	r0, [r4, #8]
        slot->discover_params.start_handle = attr->handle + 2;
   2a60e:	3302      	adds	r3, #2
   2a610:	8223      	strh	r3, [r4, #16]
        slot->discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
   2a612:	2303      	movs	r3, #3
   2a614:	7623      	strb	r3, [r4, #24]
        slot->subscribe_params.disc_params = &slot->sub_discover_params;
   2a616:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2a61a:	6323      	str	r3, [r4, #48]	; 0x30
        slot->subscribe_params.end_handle = slot->discover_params.end_handle;
   2a61c:	8ae3      	ldrh	r3, [r4, #22]
   2a61e:	85a3      	strh	r3, [r4, #44]	; 0x2c
        slot->subscribe_params.value_handle = bt_gatt_attr_value_handle(attr);
   2a620:	4628      	mov	r0, r5
   2a622:	f023 ffd5 	bl	4e5d0 <bt_gatt_attr_value_handle>
        slot->subscribe_params.notify = split_central_notify_func;
   2a626:	4b1e      	ldr	r3, [pc, #120]	; (2a6a0 <split_central_chrc_discovery_func+0xe0>)
   2a628:	6223      	str	r3, [r4, #32]
        slot->subscribe_params.value = BT_GATT_CCC_NOTIFY;
   2a62a:	2301      	movs	r3, #1
        slot->subscribe_params.value_handle = bt_gatt_attr_value_handle(attr);
   2a62c:	8520      	strh	r0, [r4, #40]	; 0x28
        slot->subscribe_params.value = BT_GATT_CCC_NOTIFY;
   2a62e:	86a3      	strh	r3, [r4, #52]	; 0x34
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   2a630:	4630      	mov	r0, r6
   2a632:	f7ff feed 	bl	2a410 <peripheral_slot_for_conn>
    if (slot == NULL) {
   2a636:	b120      	cbz	r0, 2a642 <split_central_chrc_discovery_func+0x82>
    int err = bt_gatt_subscribe(conn, &slot->subscribe_params);
   2a638:	f100 0120 	add.w	r1, r0, #32
   2a63c:	4630      	mov	r0, r6
   2a63e:	f007 ffd5 	bl	325ec <bt_gatt_subscribe>
    bool subscribed = (slot->run_behavior_handle && slot->subscribe_params.value_handle);
   2a642:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   2a646:	b11b      	cbz	r3, 2a650 <split_central_chrc_discovery_func+0x90>
   2a648:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   2a64a:	3b00      	subs	r3, #0
   2a64c:	bf18      	it	ne
   2a64e:	2301      	movne	r3, #1
    return subscribed ? BT_GATT_ITER_STOP : BT_GATT_ITER_CONTINUE;
   2a650:	f083 0001 	eor.w	r0, r3, #1
}
   2a654:	b00a      	add	sp, #40	; 0x28
   2a656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (!bt_uuid_cmp(((struct bt_gatt_chrc *)attr->user_data)->uuid,
   2a65a:	68eb      	ldr	r3, [r5, #12]
   2a65c:	681f      	ldr	r7, [r3, #0]
                            BT_UUID_DECLARE_128(ZMK_SPLIT_BT_CHAR_RUN_BEHAVIOR_UUID))) {
   2a65e:	4b11      	ldr	r3, [pc, #68]	; (2a6a4 <split_central_chrc_discovery_func+0xe4>)
   2a660:	aa05      	add	r2, sp, #20
   2a662:	f103 0e10 	add.w	lr, r3, #16
   2a666:	4694      	mov	ip, r2
   2a668:	6818      	ldr	r0, [r3, #0]
   2a66a:	6859      	ldr	r1, [r3, #4]
   2a66c:	4616      	mov	r6, r2
   2a66e:	c603      	stmia	r6!, {r0, r1}
   2a670:	3308      	adds	r3, #8
   2a672:	4573      	cmp	r3, lr
   2a674:	4632      	mov	r2, r6
   2a676:	d1f7      	bne.n	2a668 <split_central_chrc_discovery_func+0xa8>
   2a678:	781b      	ldrb	r3, [r3, #0]
   2a67a:	7033      	strb	r3, [r6, #0]
    } else if (!bt_uuid_cmp(((struct bt_gatt_chrc *)attr->user_data)->uuid,
   2a67c:	4661      	mov	r1, ip
   2a67e:	4638      	mov	r0, r7
   2a680:	f021 fc5f 	bl	4bf42 <bt_uuid_cmp>
   2a684:	2800      	cmp	r0, #0
   2a686:	d1dc      	bne.n	2a642 <split_central_chrc_discovery_func+0x82>
        slot->run_behavior_handle = bt_gatt_attr_value_handle(attr);
   2a688:	4628      	mov	r0, r5
   2a68a:	f023 ffa1 	bl	4e5d0 <bt_gatt_attr_value_handle>
   2a68e:	f8a4 0058 	strh.w	r0, [r4, #88]	; 0x58
   2a692:	e7d6      	b.n	2a642 <split_central_chrc_discovery_func+0x82>
        return BT_GATT_ITER_STOP;
   2a694:	4608      	mov	r0, r1
   2a696:	e7dd      	b.n	2a654 <split_central_chrc_discovery_func+0x94>
   2a698:	4608      	mov	r0, r1
   2a69a:	e7db      	b.n	2a654 <split_central_chrc_discovery_func+0x94>
   2a69c:	00051a49 	.word	0x00051a49
   2a6a0:	0002a4fd 	.word	0x0002a4fd
   2a6a4:	00051a5a 	.word	0x00051a5a

0002a6a8 <release_peripheral_slot>:
int release_peripheral_slot(int index) {
   2a6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (index < 0 || index >= ZMK_BLE_SPLIT_PERIPHERAL_COUNT) {
   2a6ac:	4604      	mov	r4, r0
int release_peripheral_slot(int index) {
   2a6ae:	b086      	sub	sp, #24
    if (index < 0 || index >= ZMK_BLE_SPLIT_PERIPHERAL_COUNT) {
   2a6b0:	2800      	cmp	r0, #0
   2a6b2:	d14a      	bne.n	2a74a <release_peripheral_slot+0xa2>
    if (slot->state == PERIPHERAL_SLOT_STATE_OPEN) {
   2a6b4:	4d26      	ldr	r5, [pc, #152]	; (2a750 <release_peripheral_slot+0xa8>)
   2a6b6:	782b      	ldrb	r3, [r5, #0]
   2a6b8:	2b00      	cmp	r3, #0
   2a6ba:	d046      	beq.n	2a74a <release_peripheral_slot+0xa2>
    if (slot->conn != NULL) {
   2a6bc:	6868      	ldr	r0, [r5, #4]
   2a6be:	b110      	cbz	r0, 2a6c6 <release_peripheral_slot+0x1e>
        bt_conn_unref(slot->conn);
   2a6c0:	f022 fb8b 	bl	4cdda <bt_conn_unref>
        slot->conn = NULL;
   2a6c4:	606c      	str	r4, [r5, #4]
    slot->state = PERIPHERAL_SLOT_STATE_OPEN;
   2a6c6:	2400      	movs	r4, #0
   2a6c8:	4f22      	ldr	r7, [pc, #136]	; (2a754 <release_peripheral_slot+0xac>)
   2a6ca:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2a758 <release_peripheral_slot+0xb0>
                k_work_submit(&peripheral_event_work);
   2a6ce:	f8df a08c 	ldr.w	sl, [pc, #140]	; 2a75c <release_peripheral_slot+0xb4>
    slot->state = PERIPHERAL_SLOT_STATE_OPEN;
   2a6d2:	702c      	strb	r4, [r5, #0]
                struct zmk_position_state_changed ev = {.source = index,
   2a6d4:	46a0      	mov	r8, r4
        for (int j = 0; j < 8; j++) {
   2a6d6:	2600      	movs	r6, #0
            if (slot->position_state[i] & BIT(j)) {
   2a6d8:	783b      	ldrb	r3, [r7, #0]
   2a6da:	40f3      	lsrs	r3, r6
   2a6dc:	07db      	lsls	r3, r3, #31
   2a6de:	d51c      	bpl.n	2a71a <release_peripheral_slot+0x72>
                struct zmk_position_state_changed ev = {.source = index,
   2a6e0:	1933      	adds	r3, r6, r4
   2a6e2:	f88d 8000 	strb.w	r8, [sp]
   2a6e6:	9301      	str	r3, [sp, #4]
   2a6e8:	f88d 8008 	strb.w	r8, [sp, #8]
	return z_impl_k_uptime_ticks();
   2a6ec:	f026 fccc 	bl	51088 <z_impl_k_uptime_ticks>
   2a6f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a6f4:	fba0 0302 	umull	r0, r3, r0, r2
   2a6f8:	fb02 3101 	mla	r1, r2, r1, r3
   2a6fc:	0bc0      	lsrs	r0, r0, #15
   2a6fe:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   2a702:	0bc9      	lsrs	r1, r1, #15
   2a704:	e9cd 0104 	strd	r0, r1, [sp, #16]
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a708:	2200      	movs	r2, #0
   2a70a:	2300      	movs	r3, #0
   2a70c:	4669      	mov	r1, sp
   2a70e:	4648      	mov	r0, r9
   2a710:	f01d fb74 	bl	47dfc <z_impl_k_msgq_put>
                k_work_submit(&peripheral_event_work);
   2a714:	4650      	mov	r0, sl
   2a716:	f01d fe93 	bl	48440 <k_work_submit>
        for (int j = 0; j < 8; j++) {
   2a71a:	3601      	adds	r6, #1
   2a71c:	2e08      	cmp	r6, #8
   2a71e:	d1db      	bne.n	2a6d8 <release_peripheral_slot+0x30>
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a720:	3408      	adds	r4, #8
   2a722:	2c80      	cmp	r4, #128	; 0x80
   2a724:	f107 0701 	add.w	r7, r7, #1
   2a728:	d1d5      	bne.n	2a6d6 <release_peripheral_slot+0x2e>
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a72a:	2200      	movs	r2, #0
   2a72c:	490c      	ldr	r1, [pc, #48]	; (2a760 <release_peripheral_slot+0xb8>)
        slot->position_state[i] = 0U;
   2a72e:	4613      	mov	r3, r2
   2a730:	f801 3f01 	strb.w	r3, [r1, #1]!
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a734:	3201      	adds	r2, #1
   2a736:	2a10      	cmp	r2, #16
        slot->changed_positions[i] = 0U;
   2a738:	740b      	strb	r3, [r1, #16]
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a73a:	d1f9      	bne.n	2a730 <release_peripheral_slot+0x88>
    slot->subscribe_params.value_handle = 0;
   2a73c:	852b      	strh	r3, [r5, #40]	; 0x28
    slot->run_behavior_handle = 0;
   2a73e:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
   2a742:	2000      	movs	r0, #0
}
   2a744:	b006      	add	sp, #24
   2a746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return -EINVAL;
   2a74a:	f06f 0015 	mvn.w	r0, #21
   2a74e:	e7f9      	b.n	2a744 <release_peripheral_slot+0x9c>
   2a750:	200042ac 	.word	0x200042ac
   2a754:	20004306 	.word	0x20004306
   2a758:	20001174 	.word	0x20001174
   2a75c:	200006bc 	.word	0x200006bc
   2a760:	20004305 	.word	0x20004305

0002a764 <reserve_peripheral_slot>:
int reserve_peripheral_slot() {
   2a764:	b538      	push	{r3, r4, r5, lr}
        if (peripherals[i].state == PERIPHERAL_SLOT_STATE_OPEN) {
   2a766:	4d06      	ldr	r5, [pc, #24]	; (2a780 <reserve_peripheral_slot+0x1c>)
   2a768:	782c      	ldrb	r4, [r5, #0]
   2a76a:	b934      	cbnz	r4, 2a77a <reserve_peripheral_slot+0x16>
            release_peripheral_slot(i);
   2a76c:	4620      	mov	r0, r4
   2a76e:	f7ff ff9b 	bl	2a6a8 <release_peripheral_slot>
            peripherals[i].state = PERIPHERAL_SLOT_STATE_CONNECTING;
   2a772:	2301      	movs	r3, #1
   2a774:	702b      	strb	r3, [r5, #0]
   2a776:	4620      	mov	r0, r4
}
   2a778:	bd38      	pop	{r3, r4, r5, pc}
    return -ENOMEM;
   2a77a:	f06f 000b 	mvn.w	r0, #11
   2a77e:	e7fb      	b.n	2a778 <reserve_peripheral_slot+0x14>
   2a780:	200042ac 	.word	0x200042ac

0002a784 <split_central_eir_found>:
static bool split_central_eir_found(struct bt_data *data, void *user_data) {
   2a784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (data->type) {
   2a788:	7803      	ldrb	r3, [r0, #0]
   2a78a:	3b06      	subs	r3, #6
   2a78c:	2b01      	cmp	r3, #1
static bool split_central_eir_found(struct bt_data *data, void *user_data) {
   2a78e:	b0a4      	sub	sp, #144	; 0x90
   2a790:	4605      	mov	r5, r0
   2a792:	460e      	mov	r6, r1
    switch (data->type) {
   2a794:	d903      	bls.n	2a79e <split_central_eir_found+0x1a>
            return true;
   2a796:	2001      	movs	r0, #1
}
   2a798:	b024      	add	sp, #144	; 0x90
   2a79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (data->data_len % 16 != 0U) {
   2a79e:	7844      	ldrb	r4, [r0, #1]
   2a7a0:	f014 040f 	ands.w	r4, r4, #15
   2a7a4:	d1f7      	bne.n	2a796 <split_central_eir_found+0x12>
        for (i = 0; i < data->data_len; i += 16) {
   2a7a6:	786b      	ldrb	r3, [r5, #1]
   2a7a8:	429c      	cmp	r4, r3
   2a7aa:	daf4      	bge.n	2a796 <split_central_eir_found+0x12>
            if (!bt_uuid_create(&uuid.uuid, &data->data[i], 16)) {
   2a7ac:	6869      	ldr	r1, [r5, #4]
   2a7ae:	2210      	movs	r2, #16
   2a7b0:	4421      	add	r1, r4
   2a7b2:	a801      	add	r0, sp, #4
   2a7b4:	f021 fbf3 	bl	4bf9e <bt_uuid_create>
   2a7b8:	b370      	cbz	r0, 2a818 <split_central_eir_found+0x94>
            if (bt_uuid_cmp(&uuid.uuid, BT_UUID_DECLARE_128(ZMK_SPLIT_BT_SERVICE_UUID))) {
   2a7ba:	4b35      	ldr	r3, [pc, #212]	; (2a890 <split_central_eir_found+0x10c>)
   2a7bc:	aa06      	add	r2, sp, #24
   2a7be:	f103 0710 	add.w	r7, r3, #16
   2a7c2:	4696      	mov	lr, r2
   2a7c4:	6818      	ldr	r0, [r3, #0]
   2a7c6:	6859      	ldr	r1, [r3, #4]
   2a7c8:	4694      	mov	ip, r2
   2a7ca:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   2a7ce:	3308      	adds	r3, #8
   2a7d0:	42bb      	cmp	r3, r7
   2a7d2:	4662      	mov	r2, ip
   2a7d4:	d1f6      	bne.n	2a7c4 <split_central_eir_found+0x40>
   2a7d6:	781b      	ldrb	r3, [r3, #0]
   2a7d8:	f88c 3000 	strb.w	r3, [ip]
   2a7dc:	4671      	mov	r1, lr
   2a7de:	a801      	add	r0, sp, #4
   2a7e0:	f021 fbaf 	bl	4bf42 <bt_uuid_cmp>
   2a7e4:	b1d0      	cbz	r0, 2a81c <split_central_eir_found+0x98>
                bt_uuid_to_str(&uuid.uuid, uuid_str, sizeof(uuid_str));
   2a7e6:	2225      	movs	r2, #37	; 0x25
   2a7e8:	a910      	add	r1, sp, #64	; 0x40
   2a7ea:	a801      	add	r0, sp, #4
   2a7ec:	f003 f81e 	bl	2d82c <bt_uuid_to_str>
                bt_uuid_to_str(BT_UUID_DECLARE_128(ZMK_SPLIT_BT_SERVICE_UUID), service_uuid_str,
   2a7f0:	aa0b      	add	r2, sp, #44	; 0x2c
   2a7f2:	4b27      	ldr	r3, [pc, #156]	; (2a890 <split_central_eir_found+0x10c>)
   2a7f4:	4696      	mov	lr, r2
   2a7f6:	6818      	ldr	r0, [r3, #0]
   2a7f8:	6859      	ldr	r1, [r3, #4]
   2a7fa:	4694      	mov	ip, r2
   2a7fc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   2a800:	3308      	adds	r3, #8
   2a802:	42bb      	cmp	r3, r7
   2a804:	4662      	mov	r2, ip
   2a806:	d1f6      	bne.n	2a7f6 <split_central_eir_found+0x72>
   2a808:	781b      	ldrb	r3, [r3, #0]
   2a80a:	f88c 3000 	strb.w	r3, [ip]
   2a80e:	2225      	movs	r2, #37	; 0x25
   2a810:	a91a      	add	r1, sp, #104	; 0x68
   2a812:	4670      	mov	r0, lr
   2a814:	f003 f80a 	bl	2d82c <bt_uuid_to_str>
        for (i = 0; i < data->data_len; i += 16) {
   2a818:	3410      	adds	r4, #16
   2a81a:	e7c4      	b.n	2a7a6 <split_central_eir_found+0x22>
            zmk_ble_set_peripheral_addr(addr);
   2a81c:	4630      	mov	r0, r6
   2a81e:	f7ff fbd3 	bl	29fc8 <zmk_ble_set_peripheral_addr>
            err = bt_le_scan_stop();
   2a822:	f004 ff1d 	bl	2f660 <bt_le_scan_stop>
            if (err) {
   2a826:	4607      	mov	r7, r0
   2a828:	2800      	cmp	r0, #0
   2a82a:	d1f5      	bne.n	2a818 <split_central_eir_found+0x94>
            uint8_t slot_idx = reserve_peripheral_slot();
   2a82c:	f7ff ff9a 	bl	2a764 <reserve_peripheral_slot>
            slot->conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   2a830:	4631      	mov	r1, r6
   2a832:	b2c5      	uxtb	r5, r0
   2a834:	4638      	mov	r0, r7
   2a836:	f005 fbb5 	bl	2ffa4 <bt_conn_lookup_addr_le>
   2a83a:	f8df c058 	ldr.w	ip, [pc, #88]	; 2a894 <split_central_eir_found+0x110>
   2a83e:	4c16      	ldr	r4, [pc, #88]	; (2a898 <split_central_eir_found+0x114>)
   2a840:	227c      	movs	r2, #124	; 0x7c
   2a842:	4355      	muls	r5, r2
   2a844:	eb0c 0805 	add.w	r8, ip, r5
   2a848:	af1a      	add	r7, sp, #104	; 0x68
   2a84a:	f8c8 0004 	str.w	r0, [r8, #4]
            if (slot->conn) {
   2a84e:	b150      	cbz	r0, 2a866 <split_central_eir_found+0xe2>
                split_central_process_connection(slot->conn);
   2a850:	f7ff fdec 	bl	2a42c <split_central_process_connection>
                err = bt_conn_le_phy_update(slot->conn, BT_CONN_LE_PHY_PARAM_2M);
   2a854:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   2a856:	901a      	str	r0, [sp, #104]	; 0x68
   2a858:	4639      	mov	r1, r7
   2a85a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   2a85e:	f022 fb8f 	bl	4cf80 <bt_conn_le_phy_update>
            return false;
   2a862:	2000      	movs	r0, #0
   2a864:	e798      	b.n	2a798 <split_central_eir_found+0x14>
                param = BT_LE_CONN_PARAM(0x0006, 0x0006, 30, 400);
   2a866:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   2a868:	6d21      	ldr	r1, [r4, #80]	; 0x50
   2a86a:	ab10      	add	r3, sp, #64	; 0x40
                err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN, param, &slot->conn);
   2a86c:	3454      	adds	r4, #84	; 0x54
                param = BT_LE_CONN_PARAM(0x0006, 0x0006, 30, 400);
   2a86e:	c303      	stmia	r3!, {r0, r1}
                err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN, param, &slot->conn);
   2a870:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2a874:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   2a878:	1d2b      	adds	r3, r5, #4
   2a87a:	4463      	add	r3, ip
   2a87c:	aa10      	add	r2, sp, #64	; 0x40
   2a87e:	4639      	mov	r1, r7
   2a880:	4630      	mov	r0, r6
   2a882:	f005 fc0f 	bl	300a4 <bt_conn_le_create>
                if (err) {
   2a886:	2800      	cmp	r0, #0
   2a888:	d0eb      	beq.n	2a862 <split_central_eir_found+0xde>
                    start_scan();
   2a88a:	f7ff fccb 	bl	2a224 <start_scan>
   2a88e:	e7e8      	b.n	2a862 <split_central_eir_found+0xde>
   2a890:	00051a38 	.word	0x00051a38
   2a894:	200042ac 	.word	0x200042ac
   2a898:	00051a24 	.word	0x00051a24

0002a89c <confirm_peripheral_slot_conn>:
int confirm_peripheral_slot_conn(struct bt_conn *conn) {
   2a89c:	b508      	push	{r3, lr}
    int idx = peripheral_slot_index_for_conn(conn);
   2a89e:	f7ff fdad 	bl	2a3fc <peripheral_slot_index_for_conn>
    if (idx < 0) {
   2a8a2:	2800      	cmp	r0, #0
   2a8a4:	db05      	blt.n	2a8b2 <confirm_peripheral_slot_conn+0x16>
    peripherals[idx].state = PERIPHERAL_SLOT_STATE_CONNECTED;
   2a8a6:	237c      	movs	r3, #124	; 0x7c
   2a8a8:	4358      	muls	r0, r3
   2a8aa:	4b02      	ldr	r3, [pc, #8]	; (2a8b4 <confirm_peripheral_slot_conn+0x18>)
   2a8ac:	2202      	movs	r2, #2
   2a8ae:	541a      	strb	r2, [r3, r0]
    return 0;
   2a8b0:	2000      	movs	r0, #0
}
   2a8b2:	bd08      	pop	{r3, pc}
   2a8b4:	200042ac 	.word	0x200042ac

0002a8b8 <usb_status_cb>:
        return ZMK_USB_CONN_POWERED;
    }
}

void usb_status_cb(enum usb_dc_status_code status, const uint8_t *params) {
    usb_status = status;
   2a8b8:	4b02      	ldr	r3, [pc, #8]	; (2a8c4 <usb_status_cb+0xc>)
   2a8ba:	7018      	strb	r0, [r3, #0]
    k_work_submit(&usb_status_notifier_work);
   2a8bc:	4802      	ldr	r0, [pc, #8]	; (2a8c8 <usb_status_cb+0x10>)
   2a8be:	f01d bdbf 	b.w	48440 <k_work_submit>
   2a8c2:	bf00      	nop
   2a8c4:	20000ff3 	.word	0x20000ff3
   2a8c8:	200006cc 	.word	0x200006cc

0002a8cc <zmk_usb_init>:
};

static int zmk_usb_init(const struct device *_arg) {
   2a8cc:	b508      	push	{r3, lr}
    int usb_enable_ret;

    usb_enable_ret = usb_enable(usb_status_cb);
   2a8ce:	4804      	ldr	r0, [pc, #16]	; (2a8e0 <zmk_usb_init+0x14>)
   2a8d0:	f001 fa42 	bl	2bd58 <usb_enable>

    if (usb_enable_ret != 0) {
        LOG_ERR("Unable to enable USB");
        return -EINVAL;
   2a8d4:	2800      	cmp	r0, #0
    }

    return 0;
}
   2a8d6:	bf18      	it	ne
   2a8d8:	f06f 0015 	mvnne.w	r0, #21
   2a8dc:	bd08      	pop	{r3, pc}
   2a8de:	bf00      	nop
   2a8e0:	0002a8b9 	.word	0x0002a8b9

0002a8e4 <zmk_usb_get_status>:
enum usb_dc_status_code zmk_usb_get_status() { return usb_status; }
   2a8e4:	4b01      	ldr	r3, [pc, #4]	; (2a8ec <zmk_usb_get_status+0x8>)
   2a8e6:	7818      	ldrb	r0, [r3, #0]
   2a8e8:	4770      	bx	lr
   2a8ea:	bf00      	nop
   2a8ec:	20000ff3 	.word	0x20000ff3

0002a8f0 <zmk_usb_get_conn_state>:
    switch (usb_status) {
   2a8f0:	4b08      	ldr	r3, [pc, #32]	; (2a914 <zmk_usb_get_conn_state+0x24>)
   2a8f2:	781b      	ldrb	r3, [r3, #0]
   2a8f4:	3b03      	subs	r3, #3
   2a8f6:	2b08      	cmp	r3, #8
   2a8f8:	d808      	bhi.n	2a90c <zmk_usb_get_conn_state+0x1c>
   2a8fa:	e8df f003 	tbb	[pc, r3]
   2a8fe:	0905      	.short	0x0905
   2a900:	07070505 	.word	0x07070505
   2a904:	0707      	.short	0x0707
   2a906:	09          	.byte	0x09
   2a907:	00          	.byte	0x00
        return ZMK_USB_CONN_HID;
   2a908:	2002      	movs	r0, #2
   2a90a:	4770      	bx	lr
        return ZMK_USB_CONN_POWERED;
   2a90c:	2001      	movs	r0, #1
   2a90e:	4770      	bx	lr
    switch (usb_status) {
   2a910:	2000      	movs	r0, #0
}
   2a912:	4770      	bx	lr
   2a914:	20000ff3 	.word	0x20000ff3

0002a918 <zmk_usb_hid_init>:

        return err;
    }
}

static int zmk_usb_hid_init(const struct device *_arg) {
   2a918:	b510      	push	{r4, lr}
   2a91a:	4809      	ldr	r0, [pc, #36]	; (2a940 <zmk_usb_hid_init+0x28>)
    hid_dev = device_get_binding("HID_0");
   2a91c:	4c09      	ldr	r4, [pc, #36]	; (2a944 <zmk_usb_hid_init+0x2c>)
   2a91e:	f01d f843 	bl	479a8 <z_impl_device_get_binding>
   2a922:	6020      	str	r0, [r4, #0]
    if (hid_dev == NULL) {
   2a924:	b148      	cbz	r0, 2a93a <zmk_usb_hid_init+0x22>
        LOG_ERR("Unable to locate HID device");
        return -EINVAL;
    }

    usb_hid_register_device(hid_dev, zmk_hid_report_desc, sizeof(zmk_hid_report_desc), &ops);
   2a926:	4b08      	ldr	r3, [pc, #32]	; (2a948 <zmk_usb_hid_init+0x30>)
   2a928:	4908      	ldr	r1, [pc, #32]	; (2a94c <zmk_usb_hid_init+0x34>)
   2a92a:	224c      	movs	r2, #76	; 0x4c
   2a92c:	f019 f988 	bl	43c40 <usb_hid_register_device>
    usb_hid_init(hid_dev);
   2a930:	6820      	ldr	r0, [r4, #0]
   2a932:	f025 fa52 	bl	4fdda <usb_hid_init>

    return 0;
   2a936:	2000      	movs	r0, #0
}
   2a938:	bd10      	pop	{r4, pc}
        return -EINVAL;
   2a93a:	f06f 0015 	mvn.w	r0, #21
   2a93e:	e7fb      	b.n	2a938 <zmk_usb_hid_init+0x20>
   2a940:	00053fd3 	.word	0x00053fd3
   2a944:	20004328 	.word	0x20004328
   2a948:	000524cc 	.word	0x000524cc
   2a94c:	00053fd9 	.word	0x00053fd9

0002a950 <in_ready_cb>:
	z_impl_k_sem_give(sem);
   2a950:	4801      	ldr	r0, [pc, #4]	; (2a958 <in_ready_cb+0x8>)
   2a952:	f01d bbf1 	b.w	48138 <z_impl_k_sem_give>
   2a956:	bf00      	nop
   2a958:	200012c4 	.word	0x200012c4

0002a95c <zmk_usb_hid_send_report>:
int zmk_usb_hid_send_report(const uint8_t *report, size_t len) {
   2a95c:	b538      	push	{r3, r4, r5, lr}
   2a95e:	4604      	mov	r4, r0
   2a960:	460d      	mov	r5, r1
    switch (zmk_usb_get_status()) {
   2a962:	f7ff ffbf 	bl	2a8e4 <zmk_usb_get_status>
   2a966:	280b      	cmp	r0, #11
   2a968:	d80b      	bhi.n	2a982 <zmk_usb_hid_send_report+0x26>
   2a96a:	e8df f000 	tbb	[pc, r0]
   2a96e:	1e1e      	.short	0x1e1e
   2a970:	061e0a0a 	.word	0x061e0a0a
   2a974:	0a0a0a0a 	.word	0x0a0a0a0a
   2a978:	1e0a      	.short	0x1e0a
}
   2a97a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return usb_wakeup_request();
   2a97e:	f001 b9b5 	b.w	2bcec <usb_wakeup_request>
	return z_impl_k_sem_take(sem, timeout);
   2a982:	f44f 7276 	mov.w	r2, #984	; 0x3d8
   2a986:	2300      	movs	r3, #0
   2a988:	4809      	ldr	r0, [pc, #36]	; (2a9b0 <zmk_usb_hid_send_report+0x54>)
   2a98a:	f01d fbfb 	bl	48184 <z_impl_k_sem_take>
        int err = hid_int_ep_write(hid_dev, report, len, NULL);
   2a98e:	4809      	ldr	r0, [pc, #36]	; (2a9b4 <zmk_usb_hid_send_report+0x58>)
   2a990:	4621      	mov	r1, r4
   2a992:	6800      	ldr	r0, [r0, #0]
   2a994:	2300      	movs	r3, #0
   2a996:	462a      	mov	r2, r5
   2a998:	f025 fa29 	bl	4fdee <hid_int_ep_write>
        if (err) {
   2a99c:	4604      	mov	r4, r0
   2a99e:	b110      	cbz	r0, 2a9a6 <zmk_usb_hid_send_report+0x4a>
	z_impl_k_sem_give(sem);
   2a9a0:	4803      	ldr	r0, [pc, #12]	; (2a9b0 <zmk_usb_hid_send_report+0x54>)
   2a9a2:	f01d fbc9 	bl	48138 <z_impl_k_sem_give>
}
   2a9a6:	4620      	mov	r0, r4
   2a9a8:	bd38      	pop	{r3, r4, r5, pc}
    switch (zmk_usb_get_status()) {
   2a9aa:	f06f 0412 	mvn.w	r4, #18
   2a9ae:	e7fa      	b.n	2a9a6 <zmk_usb_hid_send_report+0x4a>
   2a9b0:	200012c4 	.word	0x200012c4
   2a9b4:	20004328 	.word	0x20004328

0002a9b8 <main>:
#define ZMK_KSCAN_DEV DT_LABEL(ZMK_MATRIX_NODE_ID)

void main(void) {
    LOG_INF("Welcome to ZMK!\n");

    if (zmk_kscan_init(ZMK_KSCAN_DEV) != 0) {
   2a9b8:	4801      	ldr	r0, [pc, #4]	; (2a9c0 <main+0x8>)
   2a9ba:	f7fe ba79 	b.w	28eb0 <zmk_kscan_init>
   2a9be:	bf00      	nop
   2a9c0:	00054025 	.word	0x00054025

0002a9c4 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   2a9c4:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2a9c6:	4c09      	ldr	r4, [pc, #36]	; (2a9ec <crc8_ccitt+0x28>)
   2a9c8:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   2a9ca:	4291      	cmp	r1, r2
   2a9cc:	d100      	bne.n	2a9d0 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   2a9ce:	bd10      	pop	{r4, pc}
		val ^= p[i];
   2a9d0:	f811 3b01 	ldrb.w	r3, [r1], #1
   2a9d4:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2a9d6:	0903      	lsrs	r3, r0, #4
   2a9d8:	0100      	lsls	r0, r0, #4
   2a9da:	5ce3      	ldrb	r3, [r4, r3]
   2a9dc:	b2c0      	uxtb	r0, r0
   2a9de:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2a9e0:	0918      	lsrs	r0, r3, #4
   2a9e2:	011b      	lsls	r3, r3, #4
   2a9e4:	5c20      	ldrb	r0, [r4, r0]
   2a9e6:	b2db      	uxtb	r3, r3
   2a9e8:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
   2a9ea:	e7ee      	b.n	2a9ca <crc8_ccitt+0x6>
   2a9ec:	0005402b 	.word	0x0005402b

0002a9f0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   2a9f0:	680b      	ldr	r3, [r1, #0]
   2a9f2:	3301      	adds	r3, #1
   2a9f4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   2a9f6:	4b01      	ldr	r3, [pc, #4]	; (2a9fc <char_out+0xc>)
   2a9f8:	681b      	ldr	r3, [r3, #0]
   2a9fa:	4718      	bx	r3
   2a9fc:	200006dc 	.word	0x200006dc

0002aa00 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   2aa00:	b507      	push	{r0, r1, r2, lr}
   2aa02:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
   2aa04:	2100      	movs	r1, #0
{
   2aa06:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
   2aa08:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
   2aa0a:	4803      	ldr	r0, [pc, #12]	; (2aa18 <vprintk+0x18>)
   2aa0c:	a901      	add	r1, sp, #4
   2aa0e:	f000 f927 	bl	2ac60 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   2aa12:	b003      	add	sp, #12
   2aa14:	f85d fb04 	ldr.w	pc, [sp], #4
   2aa18:	0002a9f1 	.word	0x0002a9f1

0002aa1c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   2aa1c:	b530      	push	{r4, r5, lr}
   2aa1e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   2aa20:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   2aa24:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   2aa26:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   2aa28:	a901      	add	r1, sp, #4
   2aa2a:	4805      	ldr	r0, [pc, #20]	; (2aa40 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   2aa2c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   2aa2e:	f000 f917 	bl	2ac60 <cbvprintf>

	if (ctx.count < ctx.max) {
   2aa32:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   2aa36:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   2aa38:	bfb8      	it	lt
   2aa3a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   2aa3c:	b005      	add	sp, #20
   2aa3e:	bd30      	pop	{r4, r5, pc}
   2aa40:	00049ae3 	.word	0x00049ae3

0002aa44 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   2aa44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2aa48:	8b05      	ldrh	r5, [r0, #24]
{
   2aa4a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   2aa4c:	0728      	lsls	r0, r5, #28
{
   2aa4e:	4690      	mov	r8, r2
	if (processing) {
   2aa50:	d411      	bmi.n	2aa76 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   2aa52:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2aa54:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   2aa58:	f040 80cd 	bne.w	2abf6 <process_event+0x1b2>
			evt = process_recheck(mgr);
   2aa5c:	4620      	mov	r0, r4
   2aa5e:	f01f f888 	bl	49b72 <process_recheck>
		}

		if (evt == EVT_NOP) {
   2aa62:	b178      	cbz	r0, 2aa84 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   2aa64:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2aa66:	8b21      	ldrh	r1, [r4, #24]
   2aa68:	2804      	cmp	r0, #4
   2aa6a:	d811      	bhi.n	2aa90 <process_event+0x4c>
   2aa6c:	e8df f000 	tbb	[pc, r0]
   2aa70:	856d10c3 	.word	0x856d10c3
   2aa74:	95          	.byte	0x95
   2aa75:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   2aa76:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   2aa78:	bf0c      	ite	eq
   2aa7a:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2aa7e:	f045 0520 	orrne.w	r5, r5, #32
   2aa82:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   2aa84:	f388 8811 	msr	BASEPRI, r8
   2aa88:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   2aa8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2aa90:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   2aa94:	45aa      	cmp	sl, r5
   2aa96:	f000 80a6 	beq.w	2abe6 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   2aa9a:	2700      	movs	r7, #0
   2aa9c:	46b9      	mov	r9, r7
   2aa9e:	463e      	mov	r6, r7
   2aaa0:	68a3      	ldr	r3, [r4, #8]
   2aaa2:	2b00      	cmp	r3, #0
   2aaa4:	f000 80bd 	beq.w	2ac22 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   2aaa8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   2aaac:	8321      	strh	r1, [r4, #24]
   2aaae:	f388 8811 	msr	BASEPRI, r8
   2aab2:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   2aab6:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2aab8:	2900      	cmp	r1, #0
   2aaba:	f000 80bb 	beq.w	2ac34 <process_event+0x1f0>
	return node->next;
   2aabe:	680d      	ldr	r5, [r1, #0]
   2aac0:	2900      	cmp	r1, #0
   2aac2:	f000 80b7 	beq.w	2ac34 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   2aac6:	f8d1 8004 	ldr.w	r8, [r1, #4]
   2aaca:	4633      	mov	r3, r6
   2aacc:	4652      	mov	r2, sl
   2aace:	4620      	mov	r0, r4
   2aad0:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2aad2:	2d00      	cmp	r5, #0
   2aad4:	d076      	beq.n	2abc4 <process_event+0x180>
   2aad6:	682b      	ldr	r3, [r5, #0]
   2aad8:	4629      	mov	r1, r5
   2aada:	461d      	mov	r5, r3
   2aadc:	e7f0      	b.n	2aac0 <process_event+0x7c>
   2aade:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   2aae2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   2aae4:	2a01      	cmp	r2, #1
   2aae6:	d81b      	bhi.n	2ab20 <process_event+0xdc>
	list->head = NULL;
   2aae8:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2aaea:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   2aaee:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   2aaf0:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2aaf2:	b289      	uxth	r1, r1
	list->tail = NULL;
   2aaf4:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   2aaf8:	d109      	bne.n	2ab0e <process_event+0xca>
   2aafa:	463b      	mov	r3, r7
   2aafc:	e003      	b.n	2ab06 <process_event+0xc2>
				mgr->refs += 1U;
   2aafe:	8b62      	ldrh	r2, [r4, #26]
	return node->next;
   2ab00:	681b      	ldr	r3, [r3, #0]
   2ab02:	3201      	adds	r2, #1
   2ab04:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   2ab06:	2b00      	cmp	r3, #0
   2ab08:	d1f9      	bne.n	2aafe <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2ab0a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   2ab0e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   2ab10:	4620      	mov	r0, r4
   2ab12:	f01f f82e 	bl	49b72 <process_recheck>
   2ab16:	2800      	cmp	r0, #0
   2ab18:	d07b      	beq.n	2ac12 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2ab1a:	f041 0120 	orr.w	r1, r1, #32
   2ab1e:	e077      	b.n	2ac10 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   2ab20:	2b04      	cmp	r3, #4
   2ab22:	d10a      	bne.n	2ab3a <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2ab24:	f021 0107 	bic.w	r1, r1, #7
   2ab28:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   2ab2a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   2ab2c:	4620      	mov	r0, r4
   2ab2e:	f01f f820 	bl	49b72 <process_recheck>
   2ab32:	b110      	cbz	r0, 2ab3a <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2ab34:	f041 0120 	orr.w	r1, r1, #32
   2ab38:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2ab3a:	8b21      	ldrh	r1, [r4, #24]
   2ab3c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   2ab40:	45aa      	cmp	sl, r5
   2ab42:	d050      	beq.n	2abe6 <process_event+0x1a2>
   2ab44:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   2ab46:	46b9      	mov	r9, r7
   2ab48:	e7aa      	b.n	2aaa0 <process_event+0x5c>
			transit = mgr->transitions->start;
   2ab4a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2ab4c:	f021 0107 	bic.w	r1, r1, #7
   2ab50:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   2ab54:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   2ab56:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   2ab5a:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   2ab5c:	d12d      	bne.n	2abba <process_event+0x176>
		    || (transit != NULL)) {
   2ab5e:	f1b9 0f00 	cmp.w	r9, #0
   2ab62:	d040      	beq.n	2abe6 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   2ab64:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   2ab68:	8321      	strh	r1, [r4, #24]
   2ab6a:	f388 8811 	msr	BASEPRI, r8
   2ab6e:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   2ab72:	493a      	ldr	r1, [pc, #232]	; (2ac5c <process_event+0x218>)
   2ab74:	4620      	mov	r0, r4
   2ab76:	47c8      	blx	r9
   2ab78:	e029      	b.n	2abce <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2ab7a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   2ab7e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2ab80:	f041 0104 	orr.w	r1, r1, #4
   2ab84:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   2ab86:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   2ab88:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   2ab8c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   2ab8e:	d0e6      	beq.n	2ab5e <process_event+0x11a>
   2ab90:	2700      	movs	r7, #0
		res = 0;
   2ab92:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2ab94:	f04f 0a04 	mov.w	sl, #4
   2ab98:	e782      	b.n	2aaa0 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2ab9a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   2ab9e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2aba0:	f041 0105 	orr.w	r1, r1, #5
   2aba4:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   2aba6:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   2aba8:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   2abac:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   2abae:	d0d6      	beq.n	2ab5e <process_event+0x11a>
   2abb0:	2700      	movs	r7, #0
		res = 0;
   2abb2:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2abb4:	f04f 0a05 	mov.w	sl, #5
   2abb8:	e772      	b.n	2aaa0 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   2abba:	2700      	movs	r7, #0
		res = 0;
   2abbc:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2abbe:	f04f 0a06 	mov.w	sl, #6
   2abc2:	e76d      	b.n	2aaa0 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2abc4:	462b      	mov	r3, r5
   2abc6:	e787      	b.n	2aad8 <process_event+0x94>
			if (transit != NULL) {
   2abc8:	f1b9 0f00 	cmp.w	r9, #0
   2abcc:	d1d1      	bne.n	2ab72 <process_event+0x12e>
	__asm__ volatile(
   2abce:	f04f 0320 	mov.w	r3, #32
   2abd2:	f3ef 8811 	mrs	r8, BASEPRI
   2abd6:	f383 8812 	msr	BASEPRI_MAX, r3
   2abda:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   2abde:	8b23      	ldrh	r3, [r4, #24]
   2abe0:	f023 0308 	bic.w	r3, r3, #8
   2abe4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   2abe6:	8b25      	ldrh	r5, [r4, #24]
   2abe8:	06ea      	lsls	r2, r5, #27
   2abea:	d52e      	bpl.n	2ac4a <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   2abec:	f025 0310 	bic.w	r3, r5, #16
   2abf0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   2abf2:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   2abf6:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2abf8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   2abfa:	2e00      	cmp	r6, #0
   2abfc:	f6bf af6f 	bge.w	2aade <process_event+0x9a>
	list->head = NULL;
   2ac00:	2300      	movs	r3, #0
		*clients = mgr->clients;
   2ac02:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   2ac04:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2ac08:	f021 0107 	bic.w	r1, r1, #7
   2ac0c:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2ac10:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2ac12:	8b21      	ldrh	r1, [r4, #24]
   2ac14:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   2ac18:	45aa      	cmp	sl, r5
   2ac1a:	f04f 0900 	mov.w	r9, #0
   2ac1e:	f47f af3f 	bne.w	2aaa0 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   2ac22:	2f00      	cmp	r7, #0
   2ac24:	d09b      	beq.n	2ab5e <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   2ac26:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   2ac2a:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   2ac2c:	f388 8811 	msr	BASEPRI, r8
   2ac30:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   2ac34:	2f00      	cmp	r7, #0
   2ac36:	d0c7      	beq.n	2abc8 <process_event+0x184>
	return node->next;
   2ac38:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   2ac3a:	4639      	mov	r1, r7
   2ac3c:	4633      	mov	r3, r6
   2ac3e:	4652      	mov	r2, sl
   2ac40:	4620      	mov	r0, r4
   2ac42:	f01e ffc2 	bl	49bca <notify_one>
	list->head = node;
   2ac46:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   2ac48:	e7f4      	b.n	2ac34 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   2ac4a:	06ab      	lsls	r3, r5, #26
   2ac4c:	f57f af1a 	bpl.w	2aa84 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   2ac50:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   2ac54:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   2ac56:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   2ac5a:	e6ff      	b.n	2aa5c <process_event+0x18>
   2ac5c:	00049bf7 	.word	0x00049bf7

0002ac60 <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
   2ac60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ac64:	b08d      	sub	sp, #52	; 0x34
   2ac66:	461d      	mov	r5, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
   2ac68:	1e53      	subs	r3, r2, #1
{
   2ac6a:	4682      	mov	sl, r0
   2ac6c:	9101      	str	r1, [sp, #4]
	fmt--;
   2ac6e:	9303      	str	r3, [sp, #12]
	size_t count = 0;
   2ac70:	f04f 0900 	mov.w	r9, #0

start:
	while (*++fmt != '%') {
   2ac74:	9b03      	ldr	r3, [sp, #12]
   2ac76:	7858      	ldrb	r0, [r3, #1]
   2ac78:	2825      	cmp	r0, #37	; 0x25
   2ac7a:	f103 0401 	add.w	r4, r3, #1
   2ac7e:	d119      	bne.n	2acb4 <cbvprintf+0x54>
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;

	for (fmt++ ; ; fmt++) {
   2ac80:	461e      	mov	r6, r3
	special = 0;
   2ac82:	2000      	movs	r0, #0
	precision = -1;
   2ac84:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	for (fmt++ ; ; fmt++) {
   2ac88:	3602      	adds	r6, #2
	length_mod = 0;
   2ac8a:	4603      	mov	r3, r0
	padding_mode = 0;
   2ac8c:	9002      	str	r0, [sp, #8]
	min_width = -1;
   2ac8e:	4644      	mov	r4, r8
		switch (*fmt) {
   2ac90:	7831      	ldrb	r1, [r6, #0]
   2ac92:	9603      	str	r6, [sp, #12]
   2ac94:	2939      	cmp	r1, #57	; 0x39
   2ac96:	d854      	bhi.n	2ad42 <cbvprintf+0xe2>
   2ac98:	291f      	cmp	r1, #31
   2ac9a:	d814      	bhi.n	2acc6 <cbvprintf+0x66>
   2ac9c:	2900      	cmp	r1, #0
   2ac9e:	f000 81f0 	beq.w	2b082 <cbvprintf+0x422>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
   2aca2:	9901      	ldr	r1, [sp, #4]
   2aca4:	2025      	movs	r0, #37	; 0x25
   2aca6:	47d0      	blx	sl
			OUTC(*fmt);
   2aca8:	9901      	ldr	r1, [sp, #4]
   2acaa:	7830      	ldrb	r0, [r6, #0]
   2acac:	47d0      	blx	sl
   2acae:	f109 0902 	add.w	r9, r9, #2
			goto start;
   2acb2:	e7df      	b.n	2ac74 <cbvprintf+0x14>
		if (*fmt == '\0') {
   2acb4:	2800      	cmp	r0, #0
   2acb6:	f000 81e4 	beq.w	2b082 <cbvprintf+0x422>
		OUTC(*fmt);
   2acba:	9901      	ldr	r1, [sp, #4]
   2acbc:	47d0      	blx	sl
   2acbe:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
   2acc2:	9403      	str	r4, [sp, #12]
   2acc4:	e7d6      	b.n	2ac74 <cbvprintf+0x14>
		switch (*fmt) {
   2acc6:	f1a1 0220 	sub.w	r2, r1, #32
   2acca:	2a19      	cmp	r2, #25
   2accc:	d8e9      	bhi.n	2aca2 <cbvprintf+0x42>
   2acce:	a701      	add	r7, pc, #4	; (adr r7, 2acd4 <cbvprintf+0x74>)
   2acd0:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
   2acd4:	0002ad3d 	.word	0x0002ad3d
   2acd8:	0002aca3 	.word	0x0002aca3
   2acdc:	0002aca3 	.word	0x0002aca3
   2ace0:	0002ad3d 	.word	0x0002ad3d
   2ace4:	0002aca3 	.word	0x0002aca3
   2ace8:	0002adbd 	.word	0x0002adbd
   2acec:	0002aca3 	.word	0x0002aca3
   2acf0:	0002aca3 	.word	0x0002aca3
   2acf4:	0002aca3 	.word	0x0002aca3
   2acf8:	0002aca3 	.word	0x0002aca3
   2acfc:	0002ae09 	.word	0x0002ae09
   2ad00:	0002ad3d 	.word	0x0002ad3d
   2ad04:	0002aca3 	.word	0x0002aca3
   2ad08:	0002ae1d 	.word	0x0002ae1d
   2ad0c:	0002adc9 	.word	0x0002adc9
   2ad10:	0002aca3 	.word	0x0002aca3
   2ad14:	0002add7 	.word	0x0002add7
   2ad18:	0002adf7 	.word	0x0002adf7
   2ad1c:	0002adf7 	.word	0x0002adf7
   2ad20:	0002adf7 	.word	0x0002adf7
   2ad24:	0002adf7 	.word	0x0002adf7
   2ad28:	0002adf7 	.word	0x0002adf7
   2ad2c:	0002adf7 	.word	0x0002adf7
   2ad30:	0002adf7 	.word	0x0002adf7
   2ad34:	0002adf7 	.word	0x0002adf7
   2ad38:	0002adf7 	.word	0x0002adf7
   2ad3c:	4608      	mov	r0, r1
   2ad3e:	3601      	adds	r6, #1
   2ad40:	e7a6      	b.n	2ac90 <cbvprintf+0x30>
   2ad42:	2958      	cmp	r1, #88	; 0x58
   2ad44:	f000 80ee 	beq.w	2af24 <cbvprintf+0x2c4>
   2ad48:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
   2ad4c:	b2d7      	uxtb	r7, r2
   2ad4e:	2f17      	cmp	r7, #23
   2ad50:	d8a7      	bhi.n	2aca2 <cbvprintf+0x42>
   2ad52:	2a17      	cmp	r2, #23
   2ad54:	d8a5      	bhi.n	2aca2 <cbvprintf+0x42>
   2ad56:	a701      	add	r7, pc, #4	; (adr r7, 2ad5c <cbvprintf+0xfc>)
   2ad58:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
   2ad5c:	0002afcb 	.word	0x0002afcb
   2ad60:	0002ae43 	.word	0x0002ae43
   2ad64:	0002aca3 	.word	0x0002aca3
   2ad68:	0002aca3 	.word	0x0002aca3
   2ad6c:	0002aca3 	.word	0x0002aca3
   2ad70:	0002ae23 	.word	0x0002ae23
   2ad74:	0002ae43 	.word	0x0002ae43
   2ad78:	0002aca3 	.word	0x0002aca3
   2ad7c:	0002aca3 	.word	0x0002aca3
   2ad80:	0002ae23 	.word	0x0002ae23
   2ad84:	0002aca3 	.word	0x0002aca3
   2ad88:	0002aca3 	.word	0x0002aca3
   2ad8c:	0002aca3 	.word	0x0002aca3
   2ad90:	0002aeff 	.word	0x0002aeff
   2ad94:	0002aca3 	.word	0x0002aca3
   2ad98:	0002aca3 	.word	0x0002aca3
   2ad9c:	0002af9f 	.word	0x0002af9f
   2ada0:	0002aca3 	.word	0x0002aca3
   2ada4:	0002ae43 	.word	0x0002ae43
   2ada8:	0002aca3 	.word	0x0002aca3
   2adac:	0002aca3 	.word	0x0002aca3
   2adb0:	0002aeff 	.word	0x0002aeff
   2adb4:	0002aca3 	.word	0x0002aca3
   2adb8:	0002ae23 	.word	0x0002ae23
			OUTC('%');
   2adbc:	9901      	ldr	r1, [sp, #4]
   2adbe:	2025      	movs	r0, #37	; 0x25
   2adc0:	47d0      	blx	sl
   2adc2:	f109 0901 	add.w	r9, r9, #1
			goto start;
   2adc6:	e755      	b.n	2ac74 <cbvprintf+0x14>
			padding_mode &= (char)~PAD_ZERO;
   2adc8:	9a02      	ldr	r2, [sp, #8]
   2adca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   2adce:	9202      	str	r2, [sp, #8]
			precision = 0;
   2add0:	f04f 0800 	mov.w	r8, #0
			continue;
   2add4:	e7b3      	b.n	2ad3e <cbvprintf+0xde>
			if (min_width < 0 && precision < 0 && !padding_mode) {
   2add6:	2c00      	cmp	r4, #0
   2add8:	da0d      	bge.n	2adf6 <cbvprintf+0x196>
   2adda:	f1b8 0f00 	cmp.w	r8, #0
   2adde:	da0d      	bge.n	2adfc <cbvprintf+0x19c>
   2ade0:	9a02      	ldr	r2, [sp, #8]
   2ade2:	2a00      	cmp	r2, #0
   2ade4:	f000 8145 	beq.w	2b072 <cbvprintf+0x412>
				if (min_width < 0) {
   2ade8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
				min_width = 10 * min_width + *fmt - '0';
   2adec:	220a      	movs	r2, #10
   2adee:	fb02 1404 	mla	r4, r2, r4, r1
   2adf2:	3c30      	subs	r4, #48	; 0x30
   2adf4:	e7a3      	b.n	2ad3e <cbvprintf+0xde>
			if (precision >= 0) {
   2adf6:	f1b8 0f00 	cmp.w	r8, #0
   2adfa:	dbf5      	blt.n	2ade8 <cbvprintf+0x188>
				precision = 10 * precision + *fmt - '0';
   2adfc:	220a      	movs	r2, #10
   2adfe:	fb02 1208 	mla	r2, r2, r8, r1
   2ae02:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
   2ae06:	e79a      	b.n	2ad3e <cbvprintf+0xde>
			if (precision >= 0) {
   2ae08:	f1b8 0f00 	cmp.w	r8, #0
				precision = va_arg(ap, int);
   2ae0c:	f855 2b04 	ldr.w	r2, [r5], #4
			if (precision >= 0) {
   2ae10:	f280 8131 	bge.w	2b076 <cbvprintf+0x416>
				if (min_width < 0) {
   2ae14:	2a00      	cmp	r2, #0
   2ae16:	f280 8130 	bge.w	2b07a <cbvprintf+0x41a>
					min_width = -min_width;
   2ae1a:	4254      	negs	r4, r2
		switch (*fmt) {
   2ae1c:	2202      	movs	r2, #2
				padding_mode = PAD_ZERO;
   2ae1e:	9202      	str	r2, [sp, #8]
   2ae20:	e78d      	b.n	2ad3e <cbvprintf+0xde>
			if (*fmt == 'h' && length_mod == 'h') {
   2ae22:	2968      	cmp	r1, #104	; 0x68
   2ae24:	d103      	bne.n	2ae2e <cbvprintf+0x1ce>
   2ae26:	2b68      	cmp	r3, #104	; 0x68
   2ae28:	d106      	bne.n	2ae38 <cbvprintf+0x1d8>
				length_mod = 'H';
   2ae2a:	2348      	movs	r3, #72	; 0x48
   2ae2c:	e787      	b.n	2ad3e <cbvprintf+0xde>
			} else if (*fmt == 'l' && length_mod == 'l') {
   2ae2e:	296c      	cmp	r1, #108	; 0x6c
   2ae30:	d102      	bne.n	2ae38 <cbvprintf+0x1d8>
   2ae32:	2b6c      	cmp	r3, #108	; 0x6c
   2ae34:	f000 8123 	beq.w	2b07e <cbvprintf+0x41e>
			} else if (length_mod == '\0') {
   2ae38:	2b00      	cmp	r3, #0
   2ae3a:	f47f af32 	bne.w	2aca2 <cbvprintf+0x42>
		switch (*fmt) {
   2ae3e:	460b      	mov	r3, r1
   2ae40:	e77d      	b.n	2ad3e <cbvprintf+0xde>
			if (length_mod == 'z') {
   2ae42:	2b7a      	cmp	r3, #122	; 0x7a
   2ae44:	d106      	bne.n	2ae54 <cbvprintf+0x1f4>
			} else if (*fmt == 'u') {
   2ae46:	2975      	cmp	r1, #117	; 0x75
				precision = va_arg(ap, int);
   2ae48:	f855 6b04 	ldr.w	r6, [r5], #4
			} else if (*fmt == 'u') {
   2ae4c:	d114      	bne.n	2ae78 <cbvprintf+0x218>
				d = va_arg(ap, unsigned int);
   2ae4e:	f04f 0b00 	mov.w	fp, #0
			if (*fmt != 'u' && (int_value_type)d < 0) {
   2ae52:	e00c      	b.n	2ae6e <cbvprintf+0x20e>
			} else if (length_mod == 'l') {
   2ae54:	2b6c      	cmp	r3, #108	; 0x6c
   2ae56:	d0f6      	beq.n	2ae46 <cbvprintf+0x1e6>
			} else if (length_mod == 'L') {
   2ae58:	2b4c      	cmp	r3, #76	; 0x4c
   2ae5a:	d1f4      	bne.n	2ae46 <cbvprintf+0x1e6>
					unsigned long long llu =
   2ae5c:	3507      	adds	r5, #7
   2ae5e:	f025 0307 	bic.w	r3, r5, #7
				if (*fmt == 'u') {
   2ae62:	2975      	cmp	r1, #117	; 0x75
					unsigned long long llu =
   2ae64:	e9d3 6b00 	ldrd	r6, fp, [r3]
   2ae68:	f103 0508 	add.w	r5, r3, #8
				if (*fmt == 'u') {
   2ae6c:	d106      	bne.n	2ae7c <cbvprintf+0x21c>
			} else if (special == ' ') {
   2ae6e:	2820      	cmp	r0, #32
   2ae70:	d13e      	bne.n	2aef0 <cbvprintf+0x290>
				prefix = " ";
   2ae72:	4f86      	ldr	r7, [pc, #536]	; (2b08c <cbvprintf+0x42c>)
				min_width--;
   2ae74:	3c01      	subs	r4, #1
   2ae76:	e009      	b.n	2ae8c <cbvprintf+0x22c>
				d = va_arg(ap, int);
   2ae78:	ea4f 7be6 	mov.w	fp, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
   2ae7c:	f1bb 0f00 	cmp.w	fp, #0
   2ae80:	daf5      	bge.n	2ae6e <cbvprintf+0x20e>
				d = -d;
   2ae82:	4276      	negs	r6, r6
				prefix = "-";
   2ae84:	4f82      	ldr	r7, [pc, #520]	; (2b090 <cbvprintf+0x430>)
				d = -d;
   2ae86:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
				min_width--;
   2ae8a:	3c01      	subs	r4, #1
	int i = 0;
   2ae8c:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   2ae90:	9305      	str	r3, [sp, #20]
   2ae92:	2300      	movs	r3, #0
   2ae94:	9304      	str	r3, [sp, #16]
		unsigned int c = num % base;
   2ae96:	4630      	mov	r0, r6
   2ae98:	4659      	mov	r1, fp
   2ae9a:	220a      	movs	r2, #10
   2ae9c:	2300      	movs	r3, #0
   2ae9e:	f7fb f92f 	bl	26100 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
   2aea2:	9b04      	ldr	r3, [sp, #16]
   2aea4:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
   2aea8:	f8cd c010 	str.w	ip, [sp, #16]
   2aeac:	f8dd c014 	ldr.w	ip, [sp, #20]
   2aeb0:	3230      	adds	r2, #48	; 0x30
   2aeb2:	f80c 2d01 	strb.w	r2, [ip, #-1]!
   2aeb6:	f8cd c014 	str.w	ip, [sp, #20]
		num /= base;
   2aeba:	46b4      	mov	ip, r6
   2aebc:	465a      	mov	r2, fp
	} while (num);
   2aebe:	f1bc 0f0a 	cmp.w	ip, #10
   2aec2:	f172 0200 	sbcs.w	r2, r2, #0
		num /= base;
   2aec6:	4606      	mov	r6, r0
   2aec8:	468b      	mov	fp, r1
	} while (num);
   2aeca:	d2e4      	bcs.n	2ae96 <cbvprintf+0x236>
	return -i;
   2aecc:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
   2aed0:	3330      	adds	r3, #48	; 0x30
			data = buf + sizeof(buf) - data_len;
   2aed2:	eb0d 0603 	add.w	r6, sp, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
   2aed6:	f1b8 0f00 	cmp.w	r8, #0
			data = buf + sizeof(buf) - data_len;
   2aeda:	f1a6 0604 	sub.w	r6, r6, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
   2aede:	da6d      	bge.n	2afbc <cbvprintf+0x35c>
   2aee0:	9b02      	ldr	r3, [sp, #8]
   2aee2:	07d9      	lsls	r1, r3, #31
   2aee4:	d47c      	bmi.n	2afe0 <cbvprintf+0x380>
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
   2aee6:	eba8 030b 	sub.w	r3, r8, fp
		min_width -= data_len;
   2aeea:	eba4 040b 	sub.w	r4, r4, fp
   2aeee:	e013      	b.n	2af18 <cbvprintf+0x2b8>
			} else if (special == '+') {
   2aef0:	282b      	cmp	r0, #43	; 0x2b
				prefix = "+";
   2aef2:	bf0a      	itet	eq
   2aef4:	4f67      	ldreq	r7, [pc, #412]	; (2b094 <cbvprintf+0x434>)
	prefix = "";
   2aef6:	4f68      	ldrne	r7, [pc, #416]	; (2b098 <cbvprintf+0x438>)
				min_width--;
   2aef8:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
   2aefc:	e7c6      	b.n	2ae8c <cbvprintf+0x22c>
			if (*fmt == 'p') {
   2aefe:	2970      	cmp	r1, #112	; 0x70
   2af00:	d10f      	bne.n	2af22 <cbvprintf+0x2c2>
				x = (uintptr_t)va_arg(ap, void *);
   2af02:	f855 2b04 	ldr.w	r2, [r5], #4
   2af06:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
   2af08:	b9fa      	cbnz	r2, 2af4a <cbvprintf+0x2ea>
					data = "(nil)";
   2af0a:	4e64      	ldr	r6, [pc, #400]	; (2b09c <cbvprintf+0x43c>)
		min_width -= data_len;
   2af0c:	3c05      	subs	r4, #5
		precision -= data_len;
   2af0e:	f06f 0304 	mvn.w	r3, #4
					data_len = 5;
   2af12:	f04f 0b05 	mov.w	fp, #5
	prefix = "";
   2af16:	4f60      	ldr	r7, [pc, #384]	; (2b098 <cbvprintf+0x438>)
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
   2af18:	9a02      	ldr	r2, [sp, #8]
   2af1a:	0792      	lsls	r2, r2, #30
   2af1c:	d46f      	bmi.n	2affe <cbvprintf+0x39e>
   2af1e:	46a0      	mov	r8, r4
   2af20:	e065      	b.n	2afee <cbvprintf+0x38e>
		switch (*fmt) {
   2af22:	2178      	movs	r1, #120	; 0x78
			} else if (length_mod == 'l') {
   2af24:	2b6c      	cmp	r3, #108	; 0x6c
   2af26:	d103      	bne.n	2af30 <cbvprintf+0x2d0>
				x = va_arg(ap, unsigned int);
   2af28:	f855 2b04 	ldr.w	r2, [r5], #4
   2af2c:	2300      	movs	r3, #0
   2af2e:	e008      	b.n	2af42 <cbvprintf+0x2e2>
			} else if (length_mod == 'L') {
   2af30:	2b4c      	cmp	r3, #76	; 0x4c
   2af32:	d1f9      	bne.n	2af28 <cbvprintf+0x2c8>
				unsigned long long llx =
   2af34:	3507      	adds	r5, #7
   2af36:	f025 0307 	bic.w	r3, r5, #7
   2af3a:	461d      	mov	r5, r3
   2af3c:	685b      	ldr	r3, [r3, #4]
   2af3e:	f855 2b08 	ldr.w	r2, [r5], #8
			if (special == '#') {
   2af42:	2823      	cmp	r0, #35	; 0x23
   2af44:	d125      	bne.n	2af92 <cbvprintf+0x332>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
   2af46:	0688      	lsls	r0, r1, #26
   2af48:	d521      	bpl.n	2af8e <cbvprintf+0x32e>
   2af4a:	4f55      	ldr	r7, [pc, #340]	; (2b0a0 <cbvprintf+0x440>)
				min_width -= 2;
   2af4c:	3c02      	subs	r4, #2
			data_len = convert_value(x, 16, ALPHA(*fmt),
   2af4e:	f001 0160 	and.w	r1, r1, #96	; 0x60
   2af52:	f1a1 0b39 	sub.w	fp, r1, #57	; 0x39
	int i = 0;
   2af56:	f10d 0e2d 	add.w	lr, sp, #45	; 0x2d
   2af5a:	2600      	movs	r6, #0
		unsigned int c = num % base;
   2af5c:	f002 010f 	and.w	r1, r2, #15
		if (c >= 10) {
   2af60:	2909      	cmp	r1, #9
			c += alpha;
   2af62:	bf88      	it	hi
   2af64:	4459      	addhi	r1, fp
		buftop[--i] = c + '0';
   2af66:	3130      	adds	r1, #48	; 0x30
   2af68:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	} while (num);
   2af6c:	2a10      	cmp	r2, #16
		num /= base;
   2af6e:	ea4f 1112 	mov.w	r1, r2, lsr #4
   2af72:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
   2af76:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
   2af7a:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
   2af7e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
	} while (num);
   2af82:	d208      	bcs.n	2af96 <cbvprintf+0x336>
	return -i;
   2af84:	f1c6 0b01 	rsb	fp, r6, #1
			data = buf + sizeof(buf) - data_len;
   2af88:	f106 0330 	add.w	r3, r6, #48	; 0x30
   2af8c:	e7a1      	b.n	2aed2 <cbvprintf+0x272>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
   2af8e:	4f45      	ldr	r7, [pc, #276]	; (2b0a4 <cbvprintf+0x444>)
   2af90:	e7dc      	b.n	2af4c <cbvprintf+0x2ec>
	prefix = "";
   2af92:	4f41      	ldr	r7, [pc, #260]	; (2b098 <cbvprintf+0x438>)
   2af94:	e7db      	b.n	2af4e <cbvprintf+0x2ee>
		buftop[--i] = c + '0';
   2af96:	4666      	mov	r6, ip
		num /= base;
   2af98:	460a      	mov	r2, r1
   2af9a:	4603      	mov	r3, r0
   2af9c:	e7de      	b.n	2af5c <cbvprintf+0x2fc>
			data = va_arg(ap, char *);
   2af9e:	f855 6b04 	ldr.w	r6, [r5], #4
			data_len = strlen(data);
   2afa2:	4630      	mov	r0, r6
   2afa4:	f020 fea8 	bl	4bcf8 <strlen>
			if (precision >= 0 && data_len > precision) {
   2afa8:	f1b8 0f00 	cmp.w	r8, #0
			data_len = strlen(data);
   2afac:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
   2afae:	db02      	blt.n	2afb6 <cbvprintf+0x356>
   2afb0:	4540      	cmp	r0, r8
   2afb2:	bfa8      	it	ge
   2afb4:	46c3      	movge	fp, r8
	prefix = "";
   2afb6:	4f38      	ldr	r7, [pc, #224]	; (2b098 <cbvprintf+0x438>)
			precision = 0;
   2afb8:	f04f 0800 	mov.w	r8, #0
		precision -= data_len;
   2afbc:	eba8 030b 	sub.w	r3, r8, fp
		if (precision > 0) {
   2afc0:	2b00      	cmp	r3, #0
   2afc2:	dd92      	ble.n	2aeea <cbvprintf+0x28a>
			min_width -= precision;
   2afc4:	eba4 0408 	sub.w	r4, r4, r8
   2afc8:	e7a6      	b.n	2af18 <cbvprintf+0x2b8>
			buf[0] = c;
   2afca:	f855 3b04 	ldr.w	r3, [r5], #4
   2afce:	f88d 3018 	strb.w	r3, [sp, #24]
		min_width -= data_len;
   2afd2:	3c01      	subs	r4, #1
		precision -= data_len;
   2afd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			data_len = 1;
   2afd8:	f04f 0b01 	mov.w	fp, #1
			data = buf;
   2afdc:	ae06      	add	r6, sp, #24
   2afde:	e79a      	b.n	2af16 <cbvprintf+0x2b6>
   2afe0:	46a0      	mov	r8, r4
   2afe2:	e7eb      	b.n	2afbc <cbvprintf+0x35c>
   2afe4:	9302      	str	r3, [sp, #8]
			while (--min_width >= 0) {
				OUTC(' ');
   2afe6:	9901      	ldr	r1, [sp, #4]
   2afe8:	2020      	movs	r0, #32
   2afea:	47d0      	blx	sl
   2afec:	9b02      	ldr	r3, [sp, #8]
			while (--min_width >= 0) {
   2afee:	f1b8 0801 	subs.w	r8, r8, #1
   2aff2:	d5f7      	bpl.n	2afe4 <cbvprintf+0x384>
   2aff4:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
   2aff8:	3c01      	subs	r4, #1
   2affa:	4491      	add	r9, r2
   2affc:	1aa4      	subs	r4, r4, r2
   2affe:	46b8      	mov	r8, r7
   2b000:	e006      	b.n	2b010 <cbvprintf+0x3b0>
   2b002:	9304      	str	r3, [sp, #16]
   2b004:	9202      	str	r2, [sp, #8]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
   2b006:	9901      	ldr	r1, [sp, #4]
   2b008:	47d0      	blx	sl
   2b00a:	9a02      	ldr	r2, [sp, #8]
   2b00c:	9b04      	ldr	r3, [sp, #16]
   2b00e:	4690      	mov	r8, r2
		while (*prefix) {
   2b010:	4642      	mov	r2, r8
   2b012:	f812 0b01 	ldrb.w	r0, [r2], #1
   2b016:	2800      	cmp	r0, #0
   2b018:	d1f3      	bne.n	2b002 <cbvprintf+0x3a2>
   2b01a:	461a      	mov	r2, r3
		}
		while (--precision >= 0) {
   2b01c:	3a01      	subs	r2, #1
   2b01e:	d515      	bpl.n	2b04c <cbvprintf+0x3ec>
   2b020:	2b00      	cmp	r3, #0
   2b022:	bfac      	ite	ge
   2b024:	ebc7 0703 	rsbge	r7, r7, r3
   2b028:	427f      	neglt	r7, r7
   2b02a:	465b      	mov	r3, fp
			OUTC('0');
		}
		while (--data_len >= 0) {
   2b02c:	3b01      	subs	r3, #1
   2b02e:	d515      	bpl.n	2b05c <cbvprintf+0x3fc>
   2b030:	f1bb 0f00 	cmp.w	fp, #0
   2b034:	bfa8      	it	ge
   2b036:	445f      	addge	r7, fp
   2b038:	444f      	add	r7, r9
   2b03a:	4626      	mov	r6, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
   2b03c:	3e01      	subs	r6, #1
   2b03e:	d514      	bpl.n	2b06a <cbvprintf+0x40a>
   2b040:	2c00      	cmp	r4, #0
   2b042:	bfa8      	it	ge
   2b044:	193f      	addge	r7, r7, r4
   2b046:	eb07 0908 	add.w	r9, r7, r8
   2b04a:	e613      	b.n	2ac74 <cbvprintf+0x14>
   2b04c:	9304      	str	r3, [sp, #16]
   2b04e:	9202      	str	r2, [sp, #8]
			OUTC('0');
   2b050:	9901      	ldr	r1, [sp, #4]
   2b052:	2030      	movs	r0, #48	; 0x30
   2b054:	47d0      	blx	sl
   2b056:	9b04      	ldr	r3, [sp, #16]
   2b058:	9a02      	ldr	r2, [sp, #8]
   2b05a:	e7df      	b.n	2b01c <cbvprintf+0x3bc>
   2b05c:	9302      	str	r3, [sp, #8]
			OUTC(*data++);
   2b05e:	9901      	ldr	r1, [sp, #4]
   2b060:	f816 0b01 	ldrb.w	r0, [r6], #1
   2b064:	47d0      	blx	sl
   2b066:	9b02      	ldr	r3, [sp, #8]
   2b068:	e7e0      	b.n	2b02c <cbvprintf+0x3cc>
			OUTC(' ');
   2b06a:	9901      	ldr	r1, [sp, #4]
   2b06c:	2020      	movs	r0, #32
   2b06e:	47d0      	blx	sl
   2b070:	e7e4      	b.n	2b03c <cbvprintf+0x3dc>
				padding_mode = PAD_ZERO;
   2b072:	2201      	movs	r2, #1
   2b074:	e6d3      	b.n	2ae1e <cbvprintf+0x1be>
				precision = va_arg(ap, int);
   2b076:	4690      	mov	r8, r2
   2b078:	e661      	b.n	2ad3e <cbvprintf+0xde>
   2b07a:	4614      	mov	r4, r2
   2b07c:	e65f      	b.n	2ad3e <cbvprintf+0xde>
				length_mod = 'L';
   2b07e:	234c      	movs	r3, #76	; 0x4c
   2b080:	e65d      	b.n	2ad3e <cbvprintf+0xde>
		}

		goto start;
	}
}
   2b082:	4648      	mov	r0, r9
   2b084:	b00d      	add	sp, #52	; 0x34
   2b086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b08a:	bf00      	nop
   2b08c:	0005403d 	.word	0x0005403d
   2b090:	0005403b 	.word	0x0005403b
   2b094:	0005403f 	.word	0x0005403f
   2b098:	00054075 	.word	0x00054075
   2b09c:	00054047 	.word	0x00054047
   2b0a0:	00054041 	.word	0x00054041
   2b0a4:	00054044 	.word	0x00054044

0002b0a8 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   2b0a8:	b508      	push	{r3, lr}
	__asm__ volatile(
   2b0aa:	f04f 0220 	mov.w	r2, #32
   2b0ae:	f3ef 8311 	mrs	r3, BASEPRI
   2b0b2:	f382 8812 	msr	BASEPRI_MAX, r2
   2b0b6:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   2b0ba:	f002 f8dd 	bl	2d278 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   2b0be:	4803      	ldr	r0, [pc, #12]	; (2b0cc <sys_reboot+0x24>)
   2b0c0:	f01e fd22 	bl	49b08 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   2b0c4:	f001 fdbe 	bl	2cc44 <arch_cpu_idle>
   2b0c8:	e7fc      	b.n	2b0c4 <sys_reboot+0x1c>
   2b0ca:	bf00      	nop
   2b0cc:	0005404d 	.word	0x0005404d

0002b0d0 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
   2b0d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
   2b0d2:	2407      	movs	r4, #7
   2b0d4:	9402      	str	r4, [sp, #8]
   2b0d6:	4c04      	ldr	r4, [pc, #16]	; (2b0e8 <read_pnp_id+0x18>)
   2b0d8:	9401      	str	r4, [sp, #4]
   2b0da:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   2b0de:	9400      	str	r4, [sp, #0]
   2b0e0:	f023 fa5f 	bl	4e5a2 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
   2b0e4:	b004      	add	sp, #16
   2b0e6:	bd10      	pop	{r4, pc}
   2b0e8:	20000ff4 	.word	0x20000ff4

0002b0ec <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   2b0ec:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   2b0ee:	4c08      	ldr	r4, [pc, #32]	; (2b110 <read_blvl+0x24>)
{
   2b0f0:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   2b0f2:	7824      	ldrb	r4, [r4, #0]
   2b0f4:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   2b0f8:	2401      	movs	r4, #1
   2b0fa:	9402      	str	r4, [sp, #8]
   2b0fc:	f10d 0417 	add.w	r4, sp, #23
   2b100:	9401      	str	r4, [sp, #4]
   2b102:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2b106:	9400      	str	r4, [sp, #0]
   2b108:	f023 fa4b 	bl	4e5a2 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   2b10c:	b006      	add	sp, #24
   2b10e:	bd10      	pop	{r4, pc}
   2b110:	20000ffb 	.word	0x20000ffb

0002b114 <bt_bas_set_battery_level>:
{
	return battery_level;
}

int bt_bas_set_battery_level(uint8_t level)
{
   2b114:	b500      	push	{lr}
   2b116:	b089      	sub	sp, #36	; 0x24
	int rc;

	if (level > 100U) {
   2b118:	2864      	cmp	r0, #100	; 0x64
{
   2b11a:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
   2b11e:	d819      	bhi.n	2b154 <bt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
   2b120:	4b0e      	ldr	r3, [pc, #56]	; (2b15c <bt_bas_set_battery_level+0x48>)
	memset(&params, 0, sizeof(params));
   2b122:	2218      	movs	r2, #24
   2b124:	7018      	strb	r0, [r3, #0]
   2b126:	2100      	movs	r1, #0
   2b128:	a802      	add	r0, sp, #8
   2b12a:	f020 fe27 	bl	4bd7c <memset>
	params.attr = attr;
   2b12e:	4b0c      	ldr	r3, [pc, #48]	; (2b160 <bt_bas_set_battery_level+0x4c>)
   2b130:	9303      	str	r3, [sp, #12]
	params.data = data;
   2b132:	f10d 0307 	add.w	r3, sp, #7
   2b136:	9304      	str	r3, [sp, #16]
	return bt_gatt_notify_cb(conn, &params);
   2b138:	a902      	add	r1, sp, #8
	params.len = len;
   2b13a:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
   2b13c:	2000      	movs	r0, #0
	params.len = len;
   2b13e:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   2b142:	f006 fee5 	bl	31f10 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
   2b146:	f110 0f80 	cmn.w	r0, #128	; 0x80
   2b14a:	bf08      	it	eq
   2b14c:	2000      	moveq	r0, #0
}
   2b14e:	b009      	add	sp, #36	; 0x24
   2b150:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   2b154:	f06f 0015 	mvn.w	r0, #21
   2b158:	e7f9      	b.n	2b14e <bt_bas_set_battery_level+0x3a>
   2b15a:	bf00      	nop
   2b15c:	20000ffb 	.word	0x20000ffb
   2b160:	00052580 	.word	0x00052580

0002b164 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   2b164:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2b168:	460f      	mov	r7, r1
   2b16a:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b16c:	2108      	movs	r1, #8
   2b16e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   2b170:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2b1c4 <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b174:	f01f f871 	bl	4a25a <nvs_al_size.isra.0>
	*addr -= ate_size;
   2b178:	683c      	ldr	r4, [r7, #0]
   2b17a:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b17c:	4680      	mov	r8, r0
	*addr -= ate_size;
   2b17e:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   2b180:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   2b184:	42ac      	cmp	r4, r5
   2b186:	d803      	bhi.n	2b190 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   2b188:	2000      	movs	r0, #0
}
   2b18a:	b003      	add	sp, #12
   2b18c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2b190:	2308      	movs	r3, #8
   2b192:	466a      	mov	r2, sp
   2b194:	4621      	mov	r1, r4
   2b196:	4630      	mov	r0, r6
   2b198:	f01e ffd4 	bl	4a144 <nvs_flash_rd>
		if (rc) {
   2b19c:	2800      	cmp	r0, #0
   2b19e:	d1f4      	bne.n	2b18a <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   2b1a0:	4669      	mov	r1, sp
   2b1a2:	4630      	mov	r0, r6
   2b1a4:	f01f f863 	bl	4a26e <nvs_ate_valid>
   2b1a8:	b140      	cbz	r0, 2b1bc <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   2b1aa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   2b1ae:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   2b1b2:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   2b1b4:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   2b1b8:	4413      	add	r3, r2
   2b1ba:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   2b1bc:	eba4 0408 	sub.w	r4, r4, r8
   2b1c0:	e7e0      	b.n	2b184 <nvs_recover_last_ate+0x20>
   2b1c2:	bf00      	nop
   2b1c4:	ffff0000 	.word	0xffff0000

0002b1c8 <nvs_init>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   2b1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b1cc:	4604      	mov	r4, r0
   2b1ce:	b088      	sub	sp, #32
   2b1d0:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   2b1d2:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   2b1d6:	4638      	mov	r0, r7
   2b1d8:	f025 fc19 	bl	50a0e <z_impl_k_mutex_init>
   2b1dc:	4628      	mov	r0, r5
   2b1de:	f01c fbe3 	bl	479a8 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   2b1e2:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   2b1e4:	2800      	cmp	r0, #0
   2b1e6:	f000 8152 	beq.w	2b48e <nvs_init+0x2c6>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   2b1ea:	6883      	ldr	r3, [r0, #8]
   2b1ec:	68db      	ldr	r3, [r3, #12]
   2b1ee:	4798      	blx	r3
		LOG_ERR("No valid flash device found");
		return -ENXIO;
	}

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   2b1f0:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   2b1f2:	b928      	cbnz	r0, 2b200 <nvs_init+0x38>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
   2b1f4:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   2b1f8:	4628      	mov	r0, r5
   2b1fa:	b008      	add	sp, #32
   2b1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   2b200:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   2b202:	6883      	ldr	r3, [r0, #8]
   2b204:	68db      	ldr	r3, [r3, #12]
   2b206:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   2b208:	6803      	ldr	r3, [r0, #0]
   2b20a:	3b01      	subs	r3, #1
   2b20c:	2b1f      	cmp	r3, #31
   2b20e:	d8f1      	bhi.n	2b1f4 <nvs_init+0x2c>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   2b210:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2b212:	6821      	ldr	r1, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   2b214:	aa05      	add	r2, sp, #20
   2b216:	f024 ffd3 	bl	501c0 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   2b21a:	2800      	cmp	r0, #0
   2b21c:	d1ea      	bne.n	2b1f4 <nvs_init+0x2c>
	if (!fs->sector_size || fs->sector_size % info.size) {
   2b21e:	89a5      	ldrh	r5, [r4, #12]
   2b220:	2d00      	cmp	r5, #0
   2b222:	d0e7      	beq.n	2b1f4 <nvs_init+0x2c>
   2b224:	9b06      	ldr	r3, [sp, #24]
   2b226:	fbb5 f2f3 	udiv	r2, r5, r3
   2b22a:	fb03 5512 	mls	r5, r3, r2, r5
   2b22e:	2d00      	cmp	r5, #0
   2b230:	d1e0      	bne.n	2b1f4 <nvs_init+0x2c>
	if (fs->sector_count < 2) {
   2b232:	89e3      	ldrh	r3, [r4, #14]
   2b234:	2b01      	cmp	r3, #1
   2b236:	d9dd      	bls.n	2b1f4 <nvs_init+0x2c>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   2b238:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   2b23a:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   2b23c:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   2b240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b248:	4638      	mov	r0, r7
   2b24a:	f01c fe87 	bl	47f5c <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b24e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2b250:	2108      	movs	r1, #8
   2b252:	f01f f802 	bl	4a25a <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   2b256:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b258:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   2b25a:	89e3      	ldrh	r3, [r4, #14]
   2b25c:	fa1f fa85 	uxth.w	sl, r5
   2b260:	4553      	cmp	r3, sl
   2b262:	d808      	bhi.n	2b276 <nvs_init+0xae>
	if (closed_sectors == fs->sector_count) {
   2b264:	89e3      	ldrh	r3, [r4, #14]
   2b266:	4543      	cmp	r3, r8
   2b268:	d123      	bne.n	2b2b2 <nvs_init+0xea>
	return z_impl_k_mutex_unlock(mutex);
   2b26a:	4638      	mov	r0, r7
   2b26c:	f01c feee 	bl	4804c <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
   2b270:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   2b274:	e7c0      	b.n	2b1f8 <nvs_init+0x30>
		       (uint16_t)(fs->sector_size - ate_size);
   2b276:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   2b278:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   2b27a:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   2b27c:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2b280:	464a      	mov	r2, r9
   2b282:	2308      	movs	r3, #8
   2b284:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   2b286:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2b288:	f01e ff94 	bl	4a1b4 <nvs_flash_cmp_const>
		if (rc) {
   2b28c:	b178      	cbz	r0, 2b2ae <nvs_init+0xe6>
			nvs_sector_advance(fs, &addr);
   2b28e:	89e0      	ldrh	r0, [r4, #14]
   2b290:	4669      	mov	r1, sp
   2b292:	f01e ffd7 	bl	4a244 <nvs_sector_advance.isra.0>
			closed_sectors++;
   2b296:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2b29a:	9900      	ldr	r1, [sp, #0]
   2b29c:	2308      	movs	r3, #8
   2b29e:	464a      	mov	r2, r9
   2b2a0:	4620      	mov	r0, r4
			closed_sectors++;
   2b2a2:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2b2a6:	f01e ff85 	bl	4a1b4 <nvs_flash_cmp_const>
			if (!rc) {
   2b2aa:	2800      	cmp	r0, #0
   2b2ac:	d0da      	beq.n	2b264 <nvs_init+0x9c>
	for (i = 0; i < fs->sector_count; i++) {
   2b2ae:	3501      	adds	r5, #1
   2b2b0:	e7d3      	b.n	2b25a <nvs_init+0x92>
	if (i == fs->sector_count) {
   2b2b2:	4553      	cmp	r3, sl
   2b2b4:	d10b      	bne.n	2b2ce <nvs_init+0x106>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   2b2b6:	9900      	ldr	r1, [sp, #0]
   2b2b8:	2308      	movs	r3, #8
   2b2ba:	464a      	mov	r2, r9
   2b2bc:	1b89      	subs	r1, r1, r6
   2b2be:	4620      	mov	r0, r4
   2b2c0:	f01e ff78 	bl	4a1b4 <nvs_flash_cmp_const>
		if (!rc) {
   2b2c4:	b918      	cbnz	r0, 2b2ce <nvs_init+0x106>
			nvs_sector_advance(fs, &addr);
   2b2c6:	89e0      	ldrh	r0, [r4, #14]
   2b2c8:	4669      	mov	r1, sp
   2b2ca:	f01e ffbb 	bl	4a244 <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   2b2ce:	4669      	mov	r1, sp
   2b2d0:	4620      	mov	r0, r4
   2b2d2:	f7ff ff47 	bl	2b164 <nvs_recover_last_ate>
	if (rc) {
   2b2d6:	4605      	mov	r5, r0
   2b2d8:	b118      	cbz	r0, 2b2e2 <nvs_init+0x11a>
   2b2da:	4638      	mov	r0, r7
   2b2dc:	f01c feb6 	bl	4804c <z_impl_k_mutex_unlock>
	if (rc) {
   2b2e0:	e78a      	b.n	2b1f8 <nvs_init+0x30>
	fs->ate_wra = addr;
   2b2e2:	9b00      	ldr	r3, [sp, #0]
   2b2e4:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   2b2e6:	ea4f 4813 	mov.w	r8, r3, lsr #16
   2b2ea:	ea4f 4808 	mov.w	r8, r8, lsl #16
   2b2ee:	f8c4 8008 	str.w	r8, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   2b2f2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   2b2f6:	4299      	cmp	r1, r3
   2b2f8:	d30f      	bcc.n	2b31a <nvs_init+0x152>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2b2fa:	2308      	movs	r3, #8
   2b2fc:	aa01      	add	r2, sp, #4
   2b2fe:	4620      	mov	r0, r4
   2b300:	f01e ff20 	bl	4a144 <nvs_flash_rd>
		if (rc) {
   2b304:	4605      	mov	r5, r0
   2b306:	2800      	cmp	r0, #0
   2b308:	d1e7      	bne.n	2b2da <nvs_init+0x112>
   2b30a:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   2b30c:	f813 2b01 	ldrb.w	r2, [r3], #1
   2b310:	4591      	cmp	r9, r2
   2b312:	d133      	bne.n	2b37c <nvs_init+0x1b4>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2b314:	3501      	adds	r5, #1
   2b316:	2d08      	cmp	r5, #8
   2b318:	d1f8      	bne.n	2b30c <nvs_init+0x144>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   2b31a:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   2b31c:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   2b31e:	0c1b      	lsrs	r3, r3, #16
   2b320:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   2b322:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   2b324:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   2b326:	f01e ff8d 	bl	4a244 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   2b32a:	89a3      	ldrh	r3, [r4, #12]
   2b32c:	9900      	ldr	r1, [sp, #0]
   2b32e:	464a      	mov	r2, r9
   2b330:	4620      	mov	r0, r4
   2b332:	f01e ff3f 	bl	4a1b4 <nvs_flash_cmp_const>
	if (rc < 0) {
   2b336:	1e05      	subs	r5, r0, #0
   2b338:	dbcf      	blt.n	2b2da <nvs_init+0x112>
		addr = fs->ate_wra + ate_size;
   2b33a:	6863      	ldr	r3, [r4, #4]
	if (rc) {
   2b33c:	d074      	beq.n	2b428 <nvs_init+0x260>
		addr = fs->ate_wra + ate_size;
   2b33e:	eb06 0803 	add.w	r8, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   2b342:	f64f 79ff 	movw	r9, #65535	; 0xffff
   2b346:	89a3      	ldrh	r3, [r4, #12]
		addr = fs->ate_wra + ate_size;
   2b348:	f8cd 8000 	str.w	r8, [sp]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   2b34c:	fa1f f288 	uxth.w	r2, r8
   2b350:	1b9b      	subs	r3, r3, r6
   2b352:	429a      	cmp	r2, r3
   2b354:	d32c      	bcc.n	2b3b0 <nvs_init+0x1e8>
		bool gc_done_marker = false;
   2b356:	2300      	movs	r3, #0
			addr = fs->ate_wra & ADDR_SECT_MASK;
   2b358:	6861      	ldr	r1, [r4, #4]
		if (gc_done_marker) {
   2b35a:	2b00      	cmp	r3, #0
   2b35c:	d041      	beq.n	2b3e2 <nvs_init+0x21a>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   2b35e:	0c09      	lsrs	r1, r1, #16
   2b360:	0409      	lsls	r1, r1, #16
			nvs_sector_advance(fs, &addr);
   2b362:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
   2b364:	9100      	str	r1, [sp, #0]
			nvs_sector_advance(fs, &addr);
   2b366:	4669      	mov	r1, sp
   2b368:	f01e ff6c 	bl	4a244 <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
   2b36c:	9900      	ldr	r1, [sp, #0]
   2b36e:	4620      	mov	r0, r4
   2b370:	f01e ff45 	bl	4a1fe <nvs_flash_erase_sector>
		rc = nvs_gc(fs);
   2b374:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   2b376:	2d00      	cmp	r5, #0
   2b378:	d072      	beq.n	2b460 <nvs_init+0x298>
   2b37a:	e7ae      	b.n	2b2da <nvs_init+0x112>
		if (nvs_ate_valid(fs, &last_ate)) {
   2b37c:	a901      	add	r1, sp, #4
   2b37e:	4620      	mov	r0, r4
   2b380:	f01e ff75 	bl	4a26e <nvs_ate_valid>
   2b384:	6862      	ldr	r2, [r4, #4]
   2b386:	b910      	cbnz	r0, 2b38e <nvs_init+0x1c6>
		fs->ate_wra -= ate_size;
   2b388:	1b92      	subs	r2, r2, r6
   2b38a:	6062      	str	r2, [r4, #4]
   2b38c:	e7b1      	b.n	2b2f2 <nvs_init+0x12a>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   2b38e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
   2b392:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   2b396:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2b398:	4429      	add	r1, r5
   2b39a:	f01e ff5e 	bl	4a25a <nvs_al_size.isra.0>
   2b39e:	4440      	add	r0, r8
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   2b3a0:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   2b3a2:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   2b3a4:	d1f0      	bne.n	2b388 <nvs_init+0x1c0>
   2b3a6:	2d00      	cmp	r5, #0
   2b3a8:	d0ee      	beq.n	2b388 <nvs_init+0x1c0>
				rc = -ESPIPE;
   2b3aa:	f06f 051c 	mvn.w	r5, #28
   2b3ae:	e068      	b.n	2b482 <nvs_init+0x2ba>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2b3b0:	2308      	movs	r3, #8
   2b3b2:	aa03      	add	r2, sp, #12
   2b3b4:	4641      	mov	r1, r8
   2b3b6:	4620      	mov	r0, r4
   2b3b8:	f01e fec4 	bl	4a144 <nvs_flash_rd>
			if (rc) {
   2b3bc:	4605      	mov	r5, r0
   2b3be:	2800      	cmp	r0, #0
   2b3c0:	d18b      	bne.n	2b2da <nvs_init+0x112>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   2b3c2:	a903      	add	r1, sp, #12
   2b3c4:	4620      	mov	r0, r4
   2b3c6:	f01e ff52 	bl	4a26e <nvs_ate_valid>
   2b3ca:	b130      	cbz	r0, 2b3da <nvs_init+0x212>
   2b3cc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2b3d0:	454b      	cmp	r3, r9
   2b3d2:	d102      	bne.n	2b3da <nvs_init+0x212>
			    (gc_done_ate.id == 0xffff) &&
   2b3d4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2b3d8:	b10b      	cbz	r3, 2b3de <nvs_init+0x216>
			addr += ate_size;
   2b3da:	44b0      	add	r8, r6
   2b3dc:	e7b3      	b.n	2b346 <nvs_init+0x17e>
				gc_done_marker = true;
   2b3de:	2301      	movs	r3, #1
   2b3e0:	e7ba      	b.n	2b358 <nvs_init+0x190>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   2b3e2:	4620      	mov	r0, r4
   2b3e4:	f01e ff0b 	bl	4a1fe <nvs_flash_erase_sector>
		if (rc) {
   2b3e8:	4605      	mov	r5, r0
   2b3ea:	2800      	cmp	r0, #0
   2b3ec:	f47f af75 	bne.w	2b2da <nvs_init+0x112>
		fs->ate_wra &= ADDR_SECT_MASK;
   2b3f0:	6863      	ldr	r3, [r4, #4]
   2b3f2:	4a28      	ldr	r2, [pc, #160]	; (2b494 <nvs_init+0x2cc>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   2b3f4:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   2b3f6:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   2b3f8:	440b      	add	r3, r1
   2b3fa:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   2b3fe:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   2b400:	4013      	ands	r3, r2
   2b402:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   2b404:	4620      	mov	r0, r4
   2b406:	f01f f814 	bl	4a432 <nvs_gc>
   2b40a:	e7b3      	b.n	2b374 <nvs_init+0x1ac>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   2b40c:	1a5b      	subs	r3, r3, r1
   2b40e:	464a      	mov	r2, r9
   2b410:	4620      	mov	r0, r4
   2b412:	f01e fecf 	bl	4a1b4 <nvs_flash_cmp_const>
		if (rc < 0) {
   2b416:	1e05      	subs	r5, r0, #0
   2b418:	f6ff af5f 	blt.w	2b2da <nvs_init+0x112>
		if (!rc) {
   2b41c:	d008      	beq.n	2b430 <nvs_init+0x268>
		fs->data_wra += fs->flash_parameters->write_block_size;
   2b41e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2b420:	68a3      	ldr	r3, [r4, #8]
   2b422:	6812      	ldr	r2, [r2, #0]
   2b424:	4413      	add	r3, r2
   2b426:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   2b428:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   2b42c:	428b      	cmp	r3, r1
   2b42e:	d8ed      	bhi.n	2b40c <nvs_init+0x244>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   2b430:	6861      	ldr	r1, [r4, #4]
   2b432:	89a3      	ldrh	r3, [r4, #12]
   2b434:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   2b438:	429a      	cmp	r2, r3
   2b43a:	d19c      	bne.n	2b376 <nvs_init+0x1ae>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   2b43c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 2b494 <nvs_init+0x2cc>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   2b440:	68a2      	ldr	r2, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   2b442:	ea01 0308 	and.w	r3, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   2b446:	429a      	cmp	r2, r3
   2b448:	d095      	beq.n	2b376 <nvs_init+0x1ae>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   2b44a:	4620      	mov	r0, r4
   2b44c:	f01e fed7 	bl	4a1fe <nvs_flash_erase_sector>
		if (rc) {
   2b450:	4605      	mov	r5, r0
   2b452:	2800      	cmp	r0, #0
   2b454:	f47f af41 	bne.w	2b2da <nvs_init+0x112>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   2b458:	6863      	ldr	r3, [r4, #4]
   2b45a:	ea03 0308 	and.w	r3, r3, r8
   2b45e:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   2b460:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   2b462:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   2b464:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   2b468:	429a      	cmp	r2, r3
   2b46a:	d006      	beq.n	2b47a <nvs_init+0x2b2>
   2b46c:	4638      	mov	r0, r7
   2b46e:	f01c fded 	bl	4804c <z_impl_k_mutex_unlock>
	fs->ready = true;
   2b472:	2301      	movs	r3, #1
   2b474:	7423      	strb	r3, [r4, #16]
	return 0;
   2b476:	2500      	movs	r5, #0
   2b478:	e6be      	b.n	2b1f8 <nvs_init+0x30>
		rc = nvs_add_gc_done_ate(fs);
   2b47a:	4620      	mov	r0, r4
   2b47c:	f01e ffc4 	bl	4a408 <nvs_add_gc_done_ate>
   2b480:	4605      	mov	r5, r0
   2b482:	4638      	mov	r0, r7
   2b484:	f01c fde2 	bl	4804c <z_impl_k_mutex_unlock>
	if (rc) {
   2b488:	2d00      	cmp	r5, #0
   2b48a:	d0f2      	beq.n	2b472 <nvs_init+0x2aa>
   2b48c:	e6b4      	b.n	2b1f8 <nvs_init+0x30>
		return -ENXIO;
   2b48e:	f06f 0505 	mvn.w	r5, #5
   2b492:	e6b1      	b.n	2b1f8 <nvs_init+0x30>
   2b494:	ffff0000 	.word	0xffff0000

0002b498 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   2b498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b49c:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   2b49e:	7c03      	ldrb	r3, [r0, #16]
{
   2b4a0:	b089      	sub	sp, #36	; 0x24
   2b4a2:	4604      	mov	r4, r0
   2b4a4:	4689      	mov	r9, r1
   2b4a6:	4690      	mov	r8, r2
	if (!fs->ready) {
   2b4a8:	2b00      	cmp	r3, #0
   2b4aa:	f000 80bd 	beq.w	2b628 <nvs_write+0x190>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b4ae:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   2b4b0:	2108      	movs	r1, #8
   2b4b2:	4610      	mov	r0, r2
   2b4b4:	f01e fed1 	bl	4a25a <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   2b4b8:	4629      	mov	r1, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b4ba:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   2b4bc:	4610      	mov	r0, r2
   2b4be:	f01e fecc 	bl	4a25a <nvs_al_size.isra.0>

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   2b4c2:	89a3      	ldrh	r3, [r4, #12]
   2b4c4:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   2b4c8:	429d      	cmp	r5, r3
	data_size = nvs_al_size(fs, len);
   2b4ca:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   2b4cc:	f200 80af 	bhi.w	2b62e <nvs_write+0x196>
   2b4d0:	b11d      	cbz	r5, 2b4da <nvs_write+0x42>
	    ((len > 0) && (data == NULL))) {
   2b4d2:	f1b8 0f00 	cmp.w	r8, #0
   2b4d6:	f000 80aa 	beq.w	2b62e <nvs_write+0x196>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
   2b4da:	6863      	ldr	r3, [r4, #4]
   2b4dc:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;

	while (1) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2b4de:	aa04      	add	r2, sp, #16
   2b4e0:	a903      	add	r1, sp, #12
   2b4e2:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   2b4e4:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2b4e8:	f01e fef9 	bl	4a2de <nvs_prev_ate>
		if (rc) {
   2b4ec:	4606      	mov	r6, r0
   2b4ee:	2800      	cmp	r0, #0
   2b4f0:	d165      	bne.n	2b5be <nvs_write+0x126>
			return rc;
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   2b4f2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2b4f6:	454b      	cmp	r3, r9
   2b4f8:	d005      	beq.n	2b506 <nvs_write+0x6e>
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   2b4fa:	6862      	ldr	r2, [r4, #4]
   2b4fc:	9b03      	ldr	r3, [sp, #12]
   2b4fe:	429a      	cmp	r2, r3
   2b500:	d1ed      	bne.n	2b4de <nvs_write+0x46>
				return rc;
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   2b502:	b9e5      	cbnz	r5, 2b53e <nvs_write+0xa6>
   2b504:	e05b      	b.n	2b5be <nvs_write+0x126>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   2b506:	a904      	add	r1, sp, #16
   2b508:	4620      	mov	r0, r4
   2b50a:	f01e feb0 	bl	4a26e <nvs_ate_valid>
   2b50e:	2800      	cmp	r0, #0
   2b510:	d0f3      	beq.n	2b4fa <nvs_write+0x62>
		rd_addr += wlk_ate.offset;
   2b512:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			if (wlk_ate.len == 0U) {
   2b516:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
   2b51a:	b175      	cbz	r5, 2b53a <nvs_write+0xa2>
		} else if (len == wlk_ate.len) {
   2b51c:	429d      	cmp	r5, r3
   2b51e:	d10e      	bne.n	2b53e <nvs_write+0xa6>
		rd_addr &= ADDR_SECT_MASK;
   2b520:	ea4f 411b 	mov.w	r1, fp, lsr #16
   2b524:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   2b526:	4401      	add	r1, r0
   2b528:	462b      	mov	r3, r5
   2b52a:	4642      	mov	r2, r8
   2b52c:	4620      	mov	r0, r4
   2b52e:	f01e fe17 	bl	4a160 <nvs_flash_block_cmp>
			if (rc <= 0) {
   2b532:	2800      	cmp	r0, #0
   2b534:	dc03      	bgt.n	2b53e <nvs_write+0xa6>
   2b536:	4606      	mov	r6, r0
   2b538:	e041      	b.n	2b5be <nvs_write+0x126>
			if (wlk_ate.len == 0U) {
   2b53a:	2b00      	cmp	r3, #0
   2b53c:	d03f      	beq.n	2b5be <nvs_write+0x126>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   2b53e:	2f00      	cmp	r7, #0
   2b540:	d141      	bne.n	2b5c6 <nvs_write+0x12e>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   2b542:	f104 0314 	add.w	r3, r4, #20
   2b546:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   2b548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b54c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b550:	f104 0014 	add.w	r0, r4, #20
   2b554:	f01c fd02 	bl	47f5c <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   2b558:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 2b634 <nvs_write+0x19c>

	gc_count = 0;
	while (1) {
		if (gc_count == fs->sector_count) {
   2b55c:	89e3      	ldrh	r3, [r4, #14]
   2b55e:	429e      	cmp	r6, r3
   2b560:	d05f      	beq.n	2b622 <nvs_write+0x18a>
			 */
			rc = -ENOSPC;
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   2b562:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   2b566:	18f9      	adds	r1, r7, r3
   2b568:	428a      	cmp	r2, r1
   2b56a:	d32f      	bcc.n	2b5cc <nvs_write+0x134>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2b56c:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
   2b570:	a806      	add	r0, sp, #24
	entry.part = 0xff;
   2b572:	23ff      	movs	r3, #255	; 0xff
   2b574:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
   2b578:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
   2b57c:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&entry);
   2b580:	f01e fe57 	bl	4a232 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2b584:	68a1      	ldr	r1, [r4, #8]
   2b586:	462b      	mov	r3, r5
   2b588:	4642      	mov	r2, r8
   2b58a:	4620      	mov	r0, r4
   2b58c:	f01e fef1 	bl	4a372 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   2b590:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2b592:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
   2b594:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2b596:	f01e fe60 	bl	4a25a <nvs_al_size.isra.0>
   2b59a:	68a2      	ldr	r2, [r4, #8]
   2b59c:	4402      	add	r2, r0
   2b59e:	60a2      	str	r2, [r4, #8]
	if (rc) {
   2b5a0:	f1ba 0f00 	cmp.w	sl, #0
   2b5a4:	d107      	bne.n	2b5b6 <nvs_write+0x11e>
	rc = nvs_flash_ate_wrt(fs, &entry);
   2b5a6:	a906      	add	r1, sp, #24
   2b5a8:	4620      	mov	r0, r4
   2b5aa:	f01e ff1c 	bl	4a3e6 <nvs_flash_ate_wrt>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
   2b5ae:	2800      	cmp	r0, #0
   2b5b0:	bf14      	ite	ne
   2b5b2:	4682      	movne	sl, r0
   2b5b4:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
   2b5b6:	9801      	ldr	r0, [sp, #4]
   2b5b8:	f01c fd48 	bl	4804c <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
   2b5bc:	4656      	mov	r6, sl
}
   2b5be:	4630      	mov	r0, r6
   2b5c0:	b009      	add	sp, #36	; 0x24
   2b5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		required_space = data_size + ate_size;
   2b5c6:	4457      	add	r7, sl
   2b5c8:	b2bf      	uxth	r7, r7
   2b5ca:	e7ba      	b.n	2b542 <nvs_write+0xaa>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b5cc:	2108      	movs	r1, #8
   2b5ce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2b5d0:	f01e fe43 	bl	4a25a <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   2b5d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b5d8:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
   2b5dc:	2300      	movs	r3, #0
   2b5de:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   2b5e2:	1813      	adds	r3, r2, r0
   2b5e4:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   2b5e8:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   2b5ea:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   2b5ee:	441a      	add	r2, r3
   2b5f0:	1a10      	subs	r0, r2, r0
   2b5f2:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   2b5f4:	a806      	add	r0, sp, #24
   2b5f6:	f01e fe1c 	bl	4a232 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   2b5fa:	a906      	add	r1, sp, #24
   2b5fc:	4620      	mov	r0, r4
   2b5fe:	f01e fef2 	bl	4a3e6 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   2b602:	89e0      	ldrh	r0, [r4, #14]
   2b604:	1d21      	adds	r1, r4, #4
   2b606:	f01e fe1d 	bl	4a244 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   2b60a:	6863      	ldr	r3, [r4, #4]
   2b60c:	ea03 030b 	and.w	r3, r3, fp
   2b610:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   2b612:	4620      	mov	r0, r4
   2b614:	f01e ff0d 	bl	4a432 <nvs_gc>
		if (rc) {
   2b618:	4682      	mov	sl, r0
   2b61a:	2800      	cmp	r0, #0
   2b61c:	d1cb      	bne.n	2b5b6 <nvs_write+0x11e>
		gc_count++;
   2b61e:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
   2b620:	e79c      	b.n	2b55c <nvs_write+0xc4>
			rc = -ENOSPC;
   2b622:	f06f 0a1b 	mvn.w	sl, #27
   2b626:	e7c6      	b.n	2b5b6 <nvs_write+0x11e>
		return -EACCES;
   2b628:	f06f 060c 	mvn.w	r6, #12
   2b62c:	e7c7      	b.n	2b5be <nvs_write+0x126>
		return -EINVAL;
   2b62e:	f06f 0615 	mvn.w	r6, #21
   2b632:	e7c4      	b.n	2b5be <nvs_write+0x126>
   2b634:	ffff0000 	.word	0xffff0000

0002b638 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2b638:	4b0c      	ldr	r3, [pc, #48]	; (2b66c <class_handler+0x34>)
{
   2b63a:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2b63c:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b63e:	4e0c      	ldr	r6, [pc, #48]	; (2b670 <class_handler+0x38>)
   2b640:	4b0c      	ldr	r3, [pc, #48]	; (2b674 <class_handler+0x3c>)
   2b642:	42b3      	cmp	r3, r6
   2b644:	d303      	bcc.n	2b64e <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
   2b646:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b64a:	bcf0      	pop	{r4, r5, r6, r7}
   2b64c:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
   2b64e:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2b650:	42bd      	cmp	r5, r7
   2b652:	d309      	bcc.n	2b668 <class_handler+0x30>
		if (iface->class_handler &&
   2b654:	691c      	ldr	r4, [r3, #16]
   2b656:	b13c      	cbz	r4, 2b668 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   2b658:	f895 c002 	ldrb.w	ip, [r5, #2]
   2b65c:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
   2b65e:	45ac      	cmp	ip, r5
   2b660:	d102      	bne.n	2b668 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
   2b662:	4623      	mov	r3, r4
}
   2b664:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
   2b666:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b668:	3324      	adds	r3, #36	; 0x24
   2b66a:	e7ea      	b.n	2b642 <class_handler+0xa>
   2b66c:	2000432c 	.word	0x2000432c
   2b670:	20001514 	.word	0x20001514
   2b674:	200014f0 	.word	0x200014f0

0002b678 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   2b678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b67c:	4c13      	ldr	r4, [pc, #76]	; (2b6cc <custom_handler+0x54>)
   2b67e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2b6d0 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2b682:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2b6d4 <custom_handler+0x5c>
{
   2b686:	4605      	mov	r5, r0
   2b688:	460e      	mov	r6, r1
   2b68a:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b68c:	4544      	cmp	r4, r8
   2b68e:	d303      	bcc.n	2b698 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
   2b690:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
   2b698:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2b69a:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   2b69e:	429a      	cmp	r2, r3
   2b6a0:	d312      	bcc.n	2b6c8 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
   2b6a2:	69a3      	ldr	r3, [r4, #24]
   2b6a4:	b183      	cbz	r3, 2b6c8 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   2b6a6:	7890      	ldrb	r0, [r2, #2]
   2b6a8:	7929      	ldrb	r1, [r5, #4]
   2b6aa:	4288      	cmp	r0, r1
   2b6ac:	d105      	bne.n	2b6ba <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
   2b6ae:	463a      	mov	r2, r7
   2b6b0:	4631      	mov	r1, r6
   2b6b2:	4628      	mov	r0, r5
}
   2b6b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
   2b6b8:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
   2b6ba:	7952      	ldrb	r2, [r2, #5]
   2b6bc:	2a01      	cmp	r2, #1
   2b6be:	d103      	bne.n	2b6c8 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
   2b6c0:	463a      	mov	r2, r7
   2b6c2:	4631      	mov	r1, r6
   2b6c4:	4628      	mov	r0, r5
   2b6c6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b6c8:	3424      	adds	r4, #36	; 0x24
   2b6ca:	e7df      	b.n	2b68c <custom_handler+0x14>
   2b6cc:	200014f0 	.word	0x200014f0
   2b6d0:	20001514 	.word	0x20001514
   2b6d4:	2000432c 	.word	0x2000432c

0002b6d8 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   2b6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b6dc:	4c0b      	ldr	r4, [pc, #44]	; (2b70c <vendor_handler+0x34>)
   2b6de:	f8df 8030 	ldr.w	r8, [pc, #48]	; 2b710 <vendor_handler+0x38>
{
   2b6e2:	4605      	mov	r5, r0
   2b6e4:	460e      	mov	r6, r1
   2b6e6:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b6e8:	4544      	cmp	r4, r8
   2b6ea:	d302      	bcc.n	2b6f2 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
   2b6ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b6f0:	e009      	b.n	2b706 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
   2b6f2:	6963      	ldr	r3, [r4, #20]
   2b6f4:	b90b      	cbnz	r3, 2b6fa <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b6f6:	3424      	adds	r4, #36	; 0x24
   2b6f8:	e7f6      	b.n	2b6e8 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
   2b6fa:	463a      	mov	r2, r7
   2b6fc:	4631      	mov	r1, r6
   2b6fe:	4628      	mov	r0, r5
   2b700:	4798      	blx	r3
   2b702:	2800      	cmp	r0, #0
   2b704:	d1f7      	bne.n	2b6f6 <vendor_handler+0x1e>
}
   2b706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b70a:	bf00      	nop
   2b70c:	200014f0 	.word	0x200014f0
   2b710:	20001514 	.word	0x20001514

0002b714 <set_endpoint>:
{
   2b714:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   2b716:	7883      	ldrb	r3, [r0, #2]
   2b718:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   2b71c:	7903      	ldrb	r3, [r0, #4]
   2b71e:	7942      	ldrb	r2, [r0, #5]
   2b720:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b724:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   2b728:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
   2b72a:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   2b72c:	f003 0303 	and.w	r3, r3, #3
   2b730:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
   2b734:	f018 fe46 	bl	443c4 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
   2b738:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2b73c:	d004      	beq.n	2b748 <set_endpoint+0x34>
	} else if (ret) {
   2b73e:	b118      	cbz	r0, 2b748 <set_endpoint+0x34>
		return false;
   2b740:	2000      	movs	r0, #0
}
   2b742:	b003      	add	sp, #12
   2b744:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
   2b748:	f89d 0000 	ldrb.w	r0, [sp]
   2b74c:	f018 fec0 	bl	444d0 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
   2b750:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2b754:	d001      	beq.n	2b75a <set_endpoint+0x46>
	} else if (ret) {
   2b756:	2800      	cmp	r0, #0
   2b758:	d1f2      	bne.n	2b740 <set_endpoint+0x2c>
	usb_dev.configured = true;
   2b75a:	4b02      	ldr	r3, [pc, #8]	; (2b764 <set_endpoint+0x50>)
   2b75c:	2001      	movs	r0, #1
   2b75e:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
   2b762:	e7ee      	b.n	2b742 <set_endpoint+0x2e>
   2b764:	2000432c 	.word	0x2000432c

0002b768 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
   2b768:	4802      	ldr	r0, [pc, #8]	; (2b774 <usb_reset_alt_setting+0xc>)
   2b76a:	2208      	movs	r2, #8
   2b76c:	2100      	movs	r1, #0
   2b76e:	f020 bb05 	b.w	4bd7c <memset>
   2b772:	bf00      	nop
   2b774:	200043e7 	.word	0x200043e7

0002b778 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
   2b778:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b77a:	4b0b      	ldr	r3, [pc, #44]	; (2b7a8 <is_ep_valid.part.0+0x30>)
   2b77c:	4c0b      	ldr	r4, [pc, #44]	; (2b7ac <is_ep_valid.part.0+0x34>)
   2b77e:	42a3      	cmp	r3, r4
   2b780:	d301      	bcc.n	2b786 <is_ep_valid.part.0+0xe>
	return false;
   2b782:	2000      	movs	r0, #0
}
   2b784:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
   2b786:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2b788:	7f1e      	ldrb	r6, [r3, #28]
   2b78a:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
   2b78c:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2b78e:	b2d5      	uxtb	r5, r2
   2b790:	42ae      	cmp	r6, r5
   2b792:	d801      	bhi.n	2b798 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b794:	3324      	adds	r3, #36	; 0x24
   2b796:	e7f2      	b.n	2b77e <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
   2b798:	3201      	adds	r2, #1
   2b79a:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
   2b79e:	4285      	cmp	r5, r0
   2b7a0:	d1f5      	bne.n	2b78e <is_ep_valid.part.0+0x16>
		return true;
   2b7a2:	2001      	movs	r0, #1
   2b7a4:	e7ee      	b.n	2b784 <is_ep_valid.part.0+0xc>
   2b7a6:	bf00      	nop
   2b7a8:	200014f0 	.word	0x200014f0
   2b7ac:	20001514 	.word	0x20001514

0002b7b0 <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
   2b7b0:	4809      	ldr	r0, [pc, #36]	; (2b7d8 <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
   2b7b2:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
   2b7b4:	7803      	ldrb	r3, [r0, #0]
   2b7b6:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
   2b7ba:	330a      	adds	r3, #10
   2b7bc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
   2b7c0:	b13b      	cbz	r3, 2b7d2 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
   2b7c2:	f100 0208 	add.w	r2, r0, #8
   2b7c6:	f100 0110 	add.w	r1, r0, #16
   2b7ca:	4798      	blx	r3
   2b7cc:	43c0      	mvns	r0, r0
   2b7ce:	0fc0      	lsrs	r0, r0, #31
}
   2b7d0:	bd08      	pop	{r3, pc}
		return false;
   2b7d2:	4618      	mov	r0, r3
   2b7d4:	e7fc      	b.n	2b7d0 <usb_handle_request.constprop.0+0x20>
   2b7d6:	bf00      	nop
   2b7d8:	2000432c 	.word	0x2000432c

0002b7dc <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
   2b7dc:	2804      	cmp	r0, #4
{
   2b7de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b7e2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 2b870 <forward_status_cb+0x94>
   2b7e6:	4604      	mov	r4, r0
   2b7e8:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
   2b7ea:	d113      	bne.n	2b814 <forward_status_cb+0x38>
		usb_reset_alt_setting();
   2b7ec:	f7ff ffbc 	bl	2b768 <usb_reset_alt_setting>
		if (usb_dev.configured) {
   2b7f0:	4b20      	ldr	r3, [pc, #128]	; (2b874 <forward_status_cb+0x98>)
   2b7f2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   2b7f6:	b1ab      	cbz	r3, 2b824 <forward_status_cb+0x48>
			usb_cancel_transfers();
   2b7f8:	f000 fcfe 	bl	2c1f8 <usb_cancel_transfers>
   2b7fc:	4d1e      	ldr	r5, [pc, #120]	; (2b878 <forward_status_cb+0x9c>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b7fe:	4545      	cmp	r5, r8
   2b800:	d226      	bcs.n	2b850 <forward_status_cb+0x74>
		ep_data = cfg_data->endpoint;
   2b802:	f8d5 9020 	ldr.w	r9, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2b806:	2700      	movs	r7, #0
   2b808:	7f2a      	ldrb	r2, [r5, #28]
   2b80a:	b2fb      	uxtb	r3, r7
   2b80c:	429a      	cmp	r2, r3
   2b80e:	d817      	bhi.n	2b840 <forward_status_cb+0x64>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b810:	3524      	adds	r5, #36	; 0x24
   2b812:	e7f4      	b.n	2b7fe <forward_status_cb+0x22>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
   2b814:	2805      	cmp	r0, #5
   2b816:	d110      	bne.n	2b83a <forward_status_cb+0x5e>
		if (usb_dev.configured) {
   2b818:	4b16      	ldr	r3, [pc, #88]	; (2b874 <forward_status_cb+0x98>)
   2b81a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   2b81e:	b10b      	cbz	r3, 2b824 <forward_status_cb+0x48>
			usb_cancel_transfers();
   2b820:	f000 fcea 	bl	2c1f8 <usb_cancel_transfers>
   2b824:	4d14      	ldr	r5, [pc, #80]	; (2b878 <forward_status_cb+0x9c>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b826:	4545      	cmp	r5, r8
   2b828:	d317      	bcc.n	2b85a <forward_status_cb+0x7e>
	if (usb_dev.user_status_callback) {
   2b82a:	4b12      	ldr	r3, [pc, #72]	; (2b874 <forward_status_cb+0x98>)
   2b82c:	6a1b      	ldr	r3, [r3, #32]
   2b82e:	b1e3      	cbz	r3, 2b86a <forward_status_cb+0x8e>
		usb_dev.user_status_callback(status, param);
   2b830:	4631      	mov	r1, r6
   2b832:	4620      	mov	r0, r4
}
   2b834:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
   2b838:	4718      	bx	r3
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
   2b83a:	2801      	cmp	r0, #1
   2b83c:	d1f2      	bne.n	2b824 <forward_status_cb+0x48>
   2b83e:	e7d7      	b.n	2b7f0 <forward_status_cb+0x14>
	return usb_dc_ep_disable(ep_data->ep_addr);
   2b840:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
			if (ret < 0) {
   2b844:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
   2b846:	7918      	ldrb	r0, [r3, #4]
   2b848:	f018 fe6c 	bl	44524 <usb_dc_ep_disable>
			if (ret < 0) {
   2b84c:	2800      	cmp	r0, #0
   2b84e:	dadb      	bge.n	2b808 <forward_status_cb+0x2c>
				usb_dev.configured = false;
   2b850:	4b08      	ldr	r3, [pc, #32]	; (2b874 <forward_status_cb+0x98>)
   2b852:	2200      	movs	r2, #0
   2b854:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   2b858:	e7e4      	b.n	2b824 <forward_status_cb+0x48>
		if (cfg_data->cb_usb_status) {
   2b85a:	68eb      	ldr	r3, [r5, #12]
   2b85c:	b11b      	cbz	r3, 2b866 <forward_status_cb+0x8a>
			cfg_data->cb_usb_status(cfg_data, status, param);
   2b85e:	4632      	mov	r2, r6
   2b860:	4621      	mov	r1, r4
   2b862:	4628      	mov	r0, r5
   2b864:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b866:	3524      	adds	r5, #36	; 0x24
   2b868:	e7dd      	b.n	2b826 <forward_status_cb+0x4a>
}
   2b86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b86e:	bf00      	nop
   2b870:	20001514 	.word	0x20001514
   2b874:	2000432c 	.word	0x2000432c
   2b878:	200014f0 	.word	0x200014f0

0002b87c <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   2b87c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
   2b87e:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
   2b880:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   2b882:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
   2b884:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
   2b888:	d007      	beq.n	2b89a <usb_halt_endpoint_req.isra.0+0x1e>
   2b88a:	4620      	mov	r0, r4
   2b88c:	f7ff ff74 	bl	2b778 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   2b890:	b178      	cbz	r0, 2b8b2 <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
   2b892:	4b0d      	ldr	r3, [pc, #52]	; (2b8c8 <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   2b894:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
   2b898:	b158      	cbz	r0, 2b8b2 <usb_halt_endpoint_req.isra.0+0x36>
		if (halt) {
   2b89a:	4e0b      	ldr	r6, [pc, #44]	; (2b8c8 <usb_halt_endpoint_req.isra.0+0x4c>)
			usb_dc_ep_set_stall(ep);
   2b89c:	4620      	mov	r0, r4
		if (halt) {
   2b89e:	b155      	cbz	r5, 2b8b6 <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
   2b8a0:	f018 fdb2 	bl	44408 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
   2b8a4:	69f3      	ldr	r3, [r6, #28]
   2b8a6:	b11b      	cbz	r3, 2b8b0 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
   2b8a8:	f10d 0107 	add.w	r1, sp, #7
   2b8ac:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   2b8ae:	4798      	blx	r3
		return true;
   2b8b0:	2001      	movs	r0, #1
}
   2b8b2:	b002      	add	sp, #8
   2b8b4:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
   2b8b6:	f018 fdcf 	bl	44458 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
   2b8ba:	69f3      	ldr	r3, [r6, #28]
   2b8bc:	2b00      	cmp	r3, #0
   2b8be:	d0f7      	beq.n	2b8b0 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   2b8c0:	f10d 0107 	add.w	r1, sp, #7
   2b8c4:	2009      	movs	r0, #9
   2b8c6:	e7f2      	b.n	2b8ae <usb_halt_endpoint_req.isra.0+0x32>
   2b8c8:	2000432c 	.word	0x2000432c

0002b8cc <usb_handle_standard_request>:
{
   2b8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
   2b8d0:	4ea4      	ldr	r6, [pc, #656]	; (2bb64 <usb_handle_standard_request+0x298>)
   2b8d2:	69b3      	ldr	r3, [r6, #24]
{
   2b8d4:	4604      	mov	r4, r0
   2b8d6:	460f      	mov	r7, r1
   2b8d8:	4615      	mov	r5, r2
	if (usb_dev.custom_req_handler &&
   2b8da:	b9fb      	cbnz	r3, 2b91c <usb_handle_standard_request+0x50>
	switch (setup->RequestType.recipient) {
   2b8dc:	7823      	ldrb	r3, [r4, #0]
   2b8de:	f003 031f 	and.w	r3, r3, #31
   2b8e2:	2b01      	cmp	r3, #1
   2b8e4:	f000 809d 	beq.w	2ba22 <usb_handle_standard_request+0x156>
   2b8e8:	2b02      	cmp	r3, #2
   2b8ea:	f000 8107 	beq.w	2bafc <usb_handle_standard_request+0x230>
   2b8ee:	bb33      	cbnz	r3, 2b93e <usb_handle_standard_request+0x72>
	if (usb_reqtype_is_to_host(setup)) {
   2b8f0:	f994 0000 	ldrsb.w	r0, [r4]
	uint8_t *data = *data_buf;
   2b8f4:	682a      	ldr	r2, [r5, #0]
		switch (setup->bRequest) {
   2b8f6:	7861      	ldrb	r1, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   2b8f8:	2800      	cmp	r0, #0
   2b8fa:	da34      	bge.n	2b966 <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
   2b8fc:	2906      	cmp	r1, #6
   2b8fe:	d012      	beq.n	2b926 <usb_handle_standard_request+0x5a>
   2b900:	2908      	cmp	r1, #8
   2b902:	d02b      	beq.n	2b95c <usb_handle_standard_request+0x90>
   2b904:	b9d9      	cbnz	r1, 2b93e <usb_handle_standard_request+0x72>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   2b906:	2301      	movs	r3, #1
   2b908:	7013      	strb	r3, [r2, #0]
	data[1] = 0U;
   2b90a:	7051      	strb	r1, [r2, #1]
		data[0] |= (usb_dev.remote_wakeup ?
   2b90c:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
   2b910:	005b      	lsls	r3, r3, #1
   2b912:	f043 0301 	orr.w	r3, r3, #1
   2b916:	7013      	strb	r3, [r2, #0]
		*len = 2;
   2b918:	2302      	movs	r3, #2
   2b91a:	e12c      	b.n	2bb76 <usb_handle_standard_request+0x2aa>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
   2b91c:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
   2b91e:	2800      	cmp	r0, #0
   2b920:	d1dc      	bne.n	2b8dc <usb_handle_standard_request+0x10>
		return 0;
   2b922:	2000      	movs	r0, #0
   2b924:	e00d      	b.n	2b942 <usb_handle_standard_request+0x76>
			return usb_get_descriptor(setup, len, data_buf);
   2b926:	8862      	ldrh	r2, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   2b928:	0a10      	lsrs	r0, r2, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   2b92a:	1f01      	subs	r1, r0, #4
   2b92c:	2901      	cmp	r1, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   2b92e:	4684      	mov	ip, r0
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   2b930:	d905      	bls.n	2b93e <usb_handle_standard_request+0x72>
   2b932:	2807      	cmp	r0, #7
   2b934:	d803      	bhi.n	2b93e <usb_handle_standard_request+0x72>
	p = (uint8_t *)usb_dev.descriptors;
   2b936:	6a71      	ldr	r1, [r6, #36]	; 0x24
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
   2b938:	b2d2      	uxtb	r2, r2
	while (p[DESC_bLength] != 0U) {
   2b93a:	780c      	ldrb	r4, [r1, #0]
   2b93c:	b91c      	cbnz	r4, 2b946 <usb_handle_standard_request+0x7a>
			rc = -EINVAL;
   2b93e:	f06f 0015 	mvn.w	r0, #21
}
   2b942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
   2b946:	784e      	ldrb	r6, [r1, #1]
   2b948:	4566      	cmp	r6, ip
   2b94a:	d103      	bne.n	2b954 <usb_handle_standard_request+0x88>
			if (cur_index == index) {
   2b94c:	429a      	cmp	r2, r3
   2b94e:	f000 810d 	beq.w	2bb6c <usb_handle_standard_request+0x2a0>
			cur_index++;
   2b952:	3301      	adds	r3, #1
		p += p[DESC_bLength];
   2b954:	4421      	add	r1, r4
   2b956:	e7f0      	b.n	2b93a <usb_handle_standard_request+0x6e>
			*len = p[DESC_bLength];
   2b958:	780b      	ldrb	r3, [r1, #0]
   2b95a:	e10c      	b.n	2bb76 <usb_handle_standard_request+0x2aa>
			data[0] = usb_dev.configuration;
   2b95c:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   2b960:	7013      	strb	r3, [r2, #0]
				*len = 1;
   2b962:	2301      	movs	r3, #1
   2b964:	e107      	b.n	2bb76 <usb_handle_standard_request+0x2aa>
		switch (setup->bRequest) {
   2b966:	3901      	subs	r1, #1
   2b968:	2908      	cmp	r1, #8
   2b96a:	d8e8      	bhi.n	2b93e <usb_handle_standard_request+0x72>
   2b96c:	a301      	add	r3, pc, #4	; (adr r3, 2b974 <usb_handle_standard_request+0xa8>)
   2b96e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   2b972:	bf00      	nop
   2b974:	0002ba0d 	.word	0x0002ba0d
   2b978:	0002b93f 	.word	0x0002b93f
   2b97c:	0002ba1b 	.word	0x0002ba1b
   2b980:	0002b93f 	.word	0x0002b93f
   2b984:	0002b999 	.word	0x0002b999
   2b988:	0002b93f 	.word	0x0002b93f
   2b98c:	0002b93f 	.word	0x0002b93f
   2b990:	0002b93f 	.word	0x0002b93f
   2b994:	0002b9a5 	.word	0x0002b9a5
			return !usb_dc_set_address(setup->wValue);
   2b998:	78a0      	ldrb	r0, [r4, #2]
   2b99a:	f018 fd01 	bl	443a0 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
   2b99e:	2800      	cmp	r0, #0
   2b9a0:	d0bf      	beq.n	2b922 <usb_handle_standard_request+0x56>
   2b9a2:	e7cc      	b.n	2b93e <usb_handle_standard_request+0x72>
	if (setup->wValue == 0U) {
   2b9a4:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2b9a6:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
   2b9a8:	bb63      	cbnz	r3, 2ba04 <usb_handle_standard_request+0x138>
		usb_reset_alt_setting();
   2b9aa:	f7ff fedd 	bl	2b768 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   2b9ae:	8863      	ldrh	r3, [r4, #2]
   2b9b0:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
   2b9b4:	69f3      	ldr	r3, [r6, #28]
   2b9b6:	2b00      	cmp	r3, #0
   2b9b8:	d0b3      	beq.n	2b922 <usb_handle_standard_request+0x56>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   2b9ba:	496b      	ldr	r1, [pc, #428]	; (2bb68 <usb_handle_standard_request+0x29c>)
   2b9bc:	2003      	movs	r0, #3
   2b9be:	4798      	blx	r3
   2b9c0:	e7af      	b.n	2b922 <usb_handle_standard_request+0x56>
		switch (p[DESC_bDescriptorType]) {
   2b9c2:	786b      	ldrb	r3, [r5, #1]
   2b9c4:	2b04      	cmp	r3, #4
   2b9c6:	d010      	beq.n	2b9ea <usb_handle_standard_request+0x11e>
   2b9c8:	2b05      	cmp	r3, #5
   2b9ca:	d011      	beq.n	2b9f0 <usb_handle_standard_request+0x124>
   2b9cc:	2b02      	cmp	r3, #2
   2b9ce:	d104      	bne.n	2b9da <usb_handle_standard_request+0x10e>
			cur_config = p[CONF_DESC_bConfigurationValue];
   2b9d0:	796f      	ldrb	r7, [r5, #5]
			if (cur_config == setup->wValue) {
   2b9d2:	8863      	ldrh	r3, [r4, #2]
				found = true;
   2b9d4:	42bb      	cmp	r3, r7
   2b9d6:	bf08      	it	eq
   2b9d8:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
   2b9da:	782b      	ldrb	r3, [r5, #0]
   2b9dc:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
   2b9de:	782b      	ldrb	r3, [r5, #0]
   2b9e0:	2b00      	cmp	r3, #0
   2b9e2:	d1ee      	bne.n	2b9c2 <usb_handle_standard_request+0xf6>
	if (found) {
   2b9e4:	2800      	cmp	r0, #0
   2b9e6:	d0aa      	beq.n	2b93e <usb_handle_standard_request+0x72>
   2b9e8:	e7df      	b.n	2b9aa <usb_handle_standard_request+0xde>
			cur_alt_setting =
   2b9ea:	f895 8003 	ldrb.w	r8, [r5, #3]
			break;
   2b9ee:	e7f4      	b.n	2b9da <usb_handle_standard_request+0x10e>
			if ((cur_config != setup->wValue) ||
   2b9f0:	8863      	ldrh	r3, [r4, #2]
   2b9f2:	42bb      	cmp	r3, r7
   2b9f4:	d1f1      	bne.n	2b9da <usb_handle_standard_request+0x10e>
   2b9f6:	f1b8 0f00 	cmp.w	r8, #0
   2b9fa:	d1ee      	bne.n	2b9da <usb_handle_standard_request+0x10e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
   2b9fc:	4628      	mov	r0, r5
   2b9fe:	f7ff fe89 	bl	2b714 <set_endpoint>
			break;
   2ba02:	e7ea      	b.n	2b9da <usb_handle_standard_request+0x10e>
	uint8_t cur_config = 0xFF;
   2ba04:	27ff      	movs	r7, #255	; 0xff
	bool found = false;
   2ba06:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
   2ba08:	46b8      	mov	r8, r7
   2ba0a:	e7e8      	b.n	2b9de <usb_handle_standard_request+0x112>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   2ba0c:	8863      	ldrh	r3, [r4, #2]
   2ba0e:	2b01      	cmp	r3, #1
   2ba10:	d195      	bne.n	2b93e <usb_handle_standard_request+0x72>
					usb_dev.remote_wakeup = false;
   2ba12:	2300      	movs	r3, #0
					usb_dev.remote_wakeup = true;
   2ba14:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
   2ba18:	e783      	b.n	2b922 <usb_handle_standard_request+0x56>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   2ba1a:	8863      	ldrh	r3, [r4, #2]
   2ba1c:	2b01      	cmp	r3, #1
   2ba1e:	d18e      	bne.n	2b93e <usb_handle_standard_request+0x72>
   2ba20:	e7f8      	b.n	2ba14 <usb_handle_standard_request+0x148>
	if (!is_device_configured() ||
   2ba22:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   2ba26:	f8d5 c000 	ldr.w	ip, [r5]
   2ba2a:	2b00      	cmp	r3, #0
   2ba2c:	d087      	beq.n	2b93e <usb_handle_standard_request+0x72>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2ba2e:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   2ba30:	88a3      	ldrh	r3, [r4, #4]
   2ba32:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2ba36:	462a      	mov	r2, r5
	while (p[DESC_bLength] != 0U) {
   2ba38:	7810      	ldrb	r0, [r2, #0]
   2ba3a:	2800      	cmp	r0, #0
   2ba3c:	f43f af7f 	beq.w	2b93e <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
   2ba40:	7851      	ldrb	r1, [r2, #1]
   2ba42:	2902      	cmp	r1, #2
   2ba44:	d104      	bne.n	2ba50 <usb_handle_standard_request+0x184>
			if (interface < cfg_descr->bNumInterfaces) {
   2ba46:	f892 8004 	ldrb.w	r8, [r2, #4]
   2ba4a:	45f0      	cmp	r8, lr
   2ba4c:	f200 8095 	bhi.w	2bb7a <usb_handle_standard_request+0x2ae>
		p += p[DESC_bLength];
   2ba50:	4402      	add	r2, r0
   2ba52:	e7f1      	b.n	2ba38 <usb_handle_standard_request+0x16c>
			data[0] = 0U;
   2ba54:	f88c 2000 	strb.w	r2, [ip]
			data[1] = 0U;
   2ba58:	f88c 2001 	strb.w	r2, [ip, #1]
			*len = 2;
   2ba5c:	6039      	str	r1, [r7, #0]
			return true;
   2ba5e:	e760      	b.n	2b922 <usb_handle_standard_request+0x56>
		p += p[DESC_bLength];
   2ba60:	4415      	add	r5, r2
   2ba62:	e096      	b.n	2bb92 <usb_handle_standard_request+0x2c6>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   2ba64:	2a0b      	cmp	r2, #11
   2ba66:	f47f af6a 	bne.w	2b93e <usb_handle_standard_request+0x72>
	bool ret = false;
   2ba6a:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
   2ba6c:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   2ba70:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
   2ba72:	46ba      	mov	sl, r7
   2ba74:	e006      	b.n	2ba84 <usb_handle_standard_request+0x1b8>
		switch (p[DESC_bDescriptorType]) {
   2ba76:	786b      	ldrb	r3, [r5, #1]
   2ba78:	2b04      	cmp	r3, #4
   2ba7a:	d00f      	beq.n	2ba9c <usb_handle_standard_request+0x1d0>
   2ba7c:	2b05      	cmp	r3, #5
   2ba7e:	d021      	beq.n	2bac4 <usb_handle_standard_request+0x1f8>
		p += p[DESC_bLength];
   2ba80:	782b      	ldrb	r3, [r5, #0]
   2ba82:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
   2ba84:	782b      	ldrb	r3, [r5, #0]
   2ba86:	2b00      	cmp	r3, #0
   2ba88:	d1f5      	bne.n	2ba76 <usb_handle_standard_request+0x1aa>
	if (usb_dev.status_callback) {
   2ba8a:	69f3      	ldr	r3, [r6, #28]
   2ba8c:	b113      	cbz	r3, 2ba94 <usb_handle_standard_request+0x1c8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
   2ba8e:	4651      	mov	r1, sl
   2ba90:	2007      	movs	r0, #7
   2ba92:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
   2ba94:	2f00      	cmp	r7, #0
   2ba96:	f47f af44 	bne.w	2b922 <usb_handle_standard_request+0x56>
   2ba9a:	e750      	b.n	2b93e <usb_handle_standard_request+0x72>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   2ba9c:	f895 8002 	ldrb.w	r8, [r5, #2]
			if (cur_iface == setup->wIndex &&
   2baa0:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
   2baa2:	f895 9003 	ldrb.w	r9, [r5, #3]
			if (cur_iface == setup->wIndex &&
   2baa6:	4598      	cmp	r8, r3
   2baa8:	d1ea      	bne.n	2ba80 <usb_handle_standard_request+0x1b4>
			    cur_alt_setting == setup->wValue) {
   2baaa:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
   2baac:	4599      	cmp	r9, r3
   2baae:	d1e7      	bne.n	2ba80 <usb_handle_standard_request+0x1b4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   2bab0:	f1b8 0f07 	cmp.w	r8, #7
   2bab4:	d81f      	bhi.n	2baf6 <usb_handle_standard_request+0x22a>
		usb_dev.alt_setting[iface] = alt_setting;
   2bab6:	eb06 0308 	add.w	r3, r6, r8
		return true;
   2baba:	46aa      	mov	sl, r5
				ret = usb_set_alt_setting(setup->wIndex,
   2babc:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
	return true;
   2bac0:	2701      	movs	r7, #1
   2bac2:	e7dd      	b.n	2ba80 <usb_handle_standard_request+0x1b4>
			if (cur_iface == setup->wIndex) {
   2bac4:	88a3      	ldrh	r3, [r4, #4]
   2bac6:	4543      	cmp	r3, r8
   2bac8:	d1da      	bne.n	2ba80 <usb_handle_standard_request+0x1b4>
	if (cur_alt_setting != alt_setting) {
   2baca:	78a3      	ldrb	r3, [r4, #2]
   2bacc:	454b      	cmp	r3, r9
   2bace:	d00d      	beq.n	2baec <usb_handle_standard_request+0x220>
		ret = reset_endpoint(ep_desc);
   2bad0:	78af      	ldrb	r7, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
   2bad2:	4638      	mov	r0, r7
   2bad4:	f000 fb72 	bl	2c1bc <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
   2bad8:	4638      	mov	r0, r7
   2bada:	f018 fd23 	bl	44524 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
   2bade:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2bae2:	d0ed      	beq.n	2bac0 <usb_handle_standard_request+0x1f4>
	} else if (ret) {
   2bae4:	fab0 f780 	clz	r7, r0
   2bae8:	097f      	lsrs	r7, r7, #5
   2baea:	e7c9      	b.n	2ba80 <usb_handle_standard_request+0x1b4>
		ret = set_endpoint(ep_desc);
   2baec:	4628      	mov	r0, r5
   2baee:	f7ff fe11 	bl	2b714 <set_endpoint>
   2baf2:	4607      	mov	r7, r0
   2baf4:	e7c4      	b.n	2ba80 <usb_handle_standard_request+0x1b4>
   2baf6:	46aa      	mov	sl, r5
	return false;
   2baf8:	2700      	movs	r7, #0
   2bafa:	e7c1      	b.n	2ba80 <usb_handle_standard_request+0x1b4>
	if (usb_reqtype_is_to_host(setup)) {
   2bafc:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
   2bb00:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   2bb02:	2a00      	cmp	r2, #0
   2bb04:	da18      	bge.n	2bb38 <usb_handle_standard_request+0x26c>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   2bb06:	2b00      	cmp	r3, #0
   2bb08:	f47f af19 	bne.w	2b93e <usb_handle_standard_request+0x72>
	uint8_t ep = setup->wIndex;
   2bb0c:	7924      	ldrb	r4, [r4, #4]
   2bb0e:	682d      	ldr	r5, [r5, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
   2bb10:	0663      	lsls	r3, r4, #25
   2bb12:	d00a      	beq.n	2bb2a <usb_handle_standard_request+0x25e>
   2bb14:	4620      	mov	r0, r4
   2bb16:	f7ff fe2f 	bl	2b778 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   2bb1a:	2800      	cmp	r0, #0
   2bb1c:	f43f af0f 	beq.w	2b93e <usb_handle_standard_request+0x72>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   2bb20:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   2bb24:	2b00      	cmp	r3, #0
   2bb26:	f43f af0a 	beq.w	2b93e <usb_handle_standard_request+0x72>
		usb_dc_ep_is_stalled(ep, &data[0]);
   2bb2a:	4629      	mov	r1, r5
   2bb2c:	4620      	mov	r0, r4
   2bb2e:	f018 fcb3 	bl	44498 <usb_dc_ep_is_stalled>
		data[1] = 0U;
   2bb32:	2300      	movs	r3, #0
   2bb34:	706b      	strb	r3, [r5, #1]
   2bb36:	e6ef      	b.n	2b918 <usb_handle_standard_request+0x4c>
		switch (setup->bRequest) {
   2bb38:	2b01      	cmp	r3, #1
   2bb3a:	d008      	beq.n	2bb4e <usb_handle_standard_request+0x282>
   2bb3c:	2b03      	cmp	r3, #3
   2bb3e:	f47f aefe 	bne.w	2b93e <usb_handle_standard_request+0x72>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   2bb42:	8863      	ldrh	r3, [r4, #2]
   2bb44:	2b00      	cmp	r3, #0
   2bb46:	f47f aefa 	bne.w	2b93e <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
   2bb4a:	2101      	movs	r1, #1
   2bb4c:	e003      	b.n	2bb56 <usb_handle_standard_request+0x28a>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   2bb4e:	8861      	ldrh	r1, [r4, #2]
   2bb50:	2900      	cmp	r1, #0
   2bb52:	f47f aef4 	bne.w	2b93e <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
   2bb56:	88a0      	ldrh	r0, [r4, #4]
   2bb58:	f7ff fe90 	bl	2b87c <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
   2bb5c:	2800      	cmp	r0, #0
   2bb5e:	f47f aee0 	bne.w	2b922 <usb_handle_standard_request+0x56>
   2bb62:	e6ec      	b.n	2b93e <usb_handle_standard_request+0x72>
   2bb64:	2000432c 	.word	0x2000432c
   2bb68:	200043e6 	.word	0x200043e6
		if (type == USB_DESC_CONFIGURATION) {
   2bb6c:	2802      	cmp	r0, #2
		*data = p;
   2bb6e:	6029      	str	r1, [r5, #0]
		if (type == USB_DESC_CONFIGURATION) {
   2bb70:	f47f aef2 	bne.w	2b958 <usb_handle_standard_request+0x8c>
			*len = (p[CONF_DESC_wTotalLength]) |
   2bb74:	884b      	ldrh	r3, [r1, #2]
		*len = 2;
   2bb76:	603b      	str	r3, [r7, #0]
		return true;
   2bb78:	e6d3      	b.n	2b922 <usb_handle_standard_request+0x56>
	if (usb_reqtype_is_to_host(setup)) {
   2bb7a:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
   2bb7e:	7862      	ldrb	r2, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   2bb80:	2800      	cmp	r0, #0
   2bb82:	f6bf af6f 	bge.w	2ba64 <usb_handle_standard_request+0x198>
		switch (setup->bRequest) {
   2bb86:	2a00      	cmp	r2, #0
   2bb88:	f43f af64 	beq.w	2ba54 <usb_handle_standard_request+0x188>
   2bb8c:	2a0a      	cmp	r2, #10
   2bb8e:	f47f aed6 	bne.w	2b93e <usb_handle_standard_request+0x72>
	while (p[DESC_bLength] != 0U) {
   2bb92:	782a      	ldrb	r2, [r5, #0]
   2bb94:	2a00      	cmp	r2, #0
   2bb96:	f43f aed2 	beq.w	2b93e <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
   2bb9a:	7869      	ldrb	r1, [r5, #1]
   2bb9c:	2904      	cmp	r1, #4
   2bb9e:	f47f af5f 	bne.w	2ba60 <usb_handle_standard_request+0x194>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   2bba2:	78a9      	ldrb	r1, [r5, #2]
			if (cur_iface == setup->wIndex) {
   2bba4:	428b      	cmp	r3, r1
   2bba6:	f47f af5b 	bne.w	2ba60 <usb_handle_standard_request+0x194>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   2bbaa:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
   2bbac:	bf96      	itet	ls
   2bbae:	199b      	addls	r3, r3, r6
	return 0;
   2bbb0:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
   2bbb2:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
   2bbb6:	f88c 3000 	strb.w	r3, [ip]
   2bbba:	e6d2      	b.n	2b962 <usb_handle_standard_request+0x96>

0002bbbc <usb_data_to_host>:
{
   2bbbc:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
   2bbbe:	4c13      	ldr	r4, [pc, #76]	; (2bc0c <usb_data_to_host+0x50>)
   2bbc0:	7d23      	ldrb	r3, [r4, #20]
   2bbc2:	b9cb      	cbnz	r3, 2bbf8 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
   2bbc4:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   2bbc6:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
   2bbc8:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   2bbca:	ab01      	add	r3, sp, #4
   2bbcc:	2080      	movs	r0, #128	; 0x80
   2bbce:	f01e fd68 	bl	4a6a2 <usb_write>
		usb_dev.data_buf += chunk;
   2bbd2:	9a01      	ldr	r2, [sp, #4]
   2bbd4:	68a3      	ldr	r3, [r4, #8]
   2bbd6:	4413      	add	r3, r2
   2bbd8:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   2bbda:	68e3      	ldr	r3, [r4, #12]
   2bbdc:	1a9b      	subs	r3, r3, r2
   2bbde:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
   2bbe0:	b943      	cbnz	r3, 2bbf4 <usb_data_to_host+0x38>
   2bbe2:	b13a      	cbz	r2, 2bbf4 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
   2bbe4:	6923      	ldr	r3, [r4, #16]
   2bbe6:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
   2bbe8:	429a      	cmp	r2, r3
   2bbea:	dd03      	ble.n	2bbf4 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
   2bbec:	069b      	lsls	r3, r3, #26
   2bbee:	d101      	bne.n	2bbf4 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
   2bbf0:	2301      	movs	r3, #1
   2bbf2:	7523      	strb	r3, [r4, #20]
}
   2bbf4:	b002      	add	sp, #8
   2bbf6:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
   2bbf8:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   2bbfa:	461a      	mov	r2, r3
   2bbfc:	4619      	mov	r1, r3
   2bbfe:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
   2bc00:	7523      	strb	r3, [r4, #20]
}
   2bc02:	b002      	add	sp, #8
   2bc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   2bc08:	f018 bcb2 	b.w	44570 <usb_dc_ep_write>
   2bc0c:	2000432c 	.word	0x2000432c

0002bc10 <usb_handle_control_transfer>:
{
   2bc10:	b530      	push	{r4, r5, lr}
   2bc12:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
   2bc14:	2300      	movs	r3, #0
{
   2bc16:	4602      	mov	r2, r0
   2bc18:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
   2bc1a:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
   2bc1c:	2800      	cmp	r0, #0
   2bc1e:	d158      	bne.n	2bcd2 <usb_handle_control_transfer+0xc2>
   2bc20:	2900      	cmp	r1, #0
   2bc22:	d135      	bne.n	2bc90 <usb_handle_control_transfer+0x80>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
   2bc24:	2208      	movs	r2, #8
   2bc26:	460b      	mov	r3, r1
   2bc28:	eb0d 0102 	add.w	r1, sp, r2
   2bc2c:	f024 f91e 	bl	4fe6c <usb_dc_ep_read>
   2bc30:	2800      	cmp	r0, #0
   2bc32:	da04      	bge.n	2bc3e <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   2bc34:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   2bc36:	f018 fbe7 	bl	44408 <usb_dc_ep_set_stall>
}
   2bc3a:	b005      	add	sp, #20
   2bc3c:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
   2bc3e:	4c2a      	ldr	r4, [pc, #168]	; (2bce8 <usb_handle_control_transfer+0xd8>)
   2bc40:	9a02      	ldr	r2, [sp, #8]
   2bc42:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   2bc44:	9a03      	ldr	r2, [sp, #12]
   2bc46:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
   2bc48:	f104 0238 	add.w	r2, r4, #56	; 0x38
   2bc4c:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
   2bc4e:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
   2bc52:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
   2bc56:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
   2bc58:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
   2bc5a:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
   2bc5e:	db0a      	blt.n	2bc76 <usb_handle_control_transfer+0x66>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
   2bc60:	2b80      	cmp	r3, #128	; 0x80
   2bc62:	d904      	bls.n	2bc6e <usb_handle_control_transfer+0x5e>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   2bc64:	2080      	movs	r0, #128	; 0x80
   2bc66:	f018 fbcf 	bl	44408 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   2bc6a:	2000      	movs	r0, #0
   2bc6c:	e7e3      	b.n	2bc36 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
   2bc6e:	b113      	cbz	r3, 2bc76 <usb_handle_control_transfer+0x66>
				usb_dev.data_buf_residue = setup->wLength;
   2bc70:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
   2bc74:	e7e1      	b.n	2bc3a <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
   2bc76:	f7ff fd9b 	bl	2b7b0 <usb_handle_request.constprop.0>
   2bc7a:	2800      	cmp	r0, #0
   2bc7c:	d0da      	beq.n	2bc34 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
   2bc7e:	88e2      	ldrh	r2, [r4, #6]
   2bc80:	6923      	ldr	r3, [r4, #16]
   2bc82:	429a      	cmp	r2, r3
   2bc84:	bfd4      	ite	le
   2bc86:	60e2      	strle	r2, [r4, #12]
   2bc88:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
   2bc8a:	f7ff ff97 	bl	2bbbc <usb_data_to_host>
   2bc8e:	e7d4      	b.n	2bc3a <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
   2bc90:	4c15      	ldr	r4, [pc, #84]	; (2bce8 <usb_handle_control_transfer+0xd8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2bc92:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
   2bc96:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2bc98:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
   2bc9a:	dc04      	bgt.n	2bca6 <usb_handle_control_transfer+0x96>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2bc9c:	f024 f8e6 	bl	4fe6c <usb_dc_ep_read>
   2bca0:	2800      	cmp	r0, #0
   2bca2:	daca      	bge.n	2bc3a <usb_handle_control_transfer+0x2a>
   2bca4:	e7c6      	b.n	2bc34 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2bca6:	462a      	mov	r2, r5
   2bca8:	f024 f8e0 	bl	4fe6c <usb_dc_ep_read>
   2bcac:	2800      	cmp	r0, #0
   2bcae:	dbd9      	blt.n	2bc64 <usb_handle_control_transfer+0x54>
		usb_dev.data_buf += chunk;
   2bcb0:	9a01      	ldr	r2, [sp, #4]
   2bcb2:	68a3      	ldr	r3, [r4, #8]
   2bcb4:	4413      	add	r3, r2
   2bcb6:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   2bcb8:	68e3      	ldr	r3, [r4, #12]
   2bcba:	1a9b      	subs	r3, r3, r2
   2bcbc:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
   2bcbe:	2b00      	cmp	r3, #0
   2bcc0:	d1bb      	bne.n	2bc3a <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
   2bcc2:	f104 0338 	add.w	r3, r4, #56	; 0x38
   2bcc6:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
   2bcc8:	f7ff fd72 	bl	2b7b0 <usb_handle_request.constprop.0>
   2bccc:	2800      	cmp	r0, #0
   2bcce:	d1dc      	bne.n	2bc8a <usb_handle_control_transfer+0x7a>
   2bcd0:	e7b0      	b.n	2bc34 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
   2bcd2:	2880      	cmp	r0, #128	; 0x80
   2bcd4:	d1b1      	bne.n	2bc3a <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
   2bcd6:	4b04      	ldr	r3, [pc, #16]	; (2bce8 <usb_handle_control_transfer+0xd8>)
   2bcd8:	68da      	ldr	r2, [r3, #12]
   2bcda:	2a00      	cmp	r2, #0
   2bcdc:	d1d5      	bne.n	2bc8a <usb_handle_control_transfer+0x7a>
   2bcde:	7d1b      	ldrb	r3, [r3, #20]
   2bce0:	2b00      	cmp	r3, #0
   2bce2:	d1d2      	bne.n	2bc8a <usb_handle_control_transfer+0x7a>
   2bce4:	e7a9      	b.n	2bc3a <usb_handle_control_transfer+0x2a>
   2bce6:	bf00      	nop
   2bce8:	2000432c 	.word	0x2000432c

0002bcec <usb_wakeup_request>:
	return usb_dev.remote_wakeup;
   2bcec:	4b04      	ldr	r3, [pc, #16]	; (2bd00 <usb_wakeup_request+0x14>)
		if (usb_get_remote_wakeup_status()) {
   2bcee:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
   2bcf2:	b10b      	cbz	r3, 2bcf8 <usb_wakeup_request+0xc>
			return usb_dc_wakeup_request();
   2bcf4:	f024 b8c9 	b.w	4fe8a <usb_dc_wakeup_request>
}
   2bcf8:	f06f 000c 	mvn.w	r0, #12
   2bcfc:	4770      	bx	lr
   2bcfe:	bf00      	nop
   2bd00:	2000432c 	.word	0x2000432c

0002bd04 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
   2bd04:	4b05      	ldr	r3, [pc, #20]	; (2bd1c <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
   2bd06:	4a06      	ldr	r2, [pc, #24]	; (2bd20 <usb_set_config+0x1c>)
   2bd08:	629a      	str	r2, [r3, #40]	; 0x28
   2bd0a:	4a06      	ldr	r2, [pc, #24]	; (2bd24 <usb_set_config+0x20>)
   2bd0c:	62da      	str	r2, [r3, #44]	; 0x2c
   2bd0e:	4a06      	ldr	r2, [pc, #24]	; (2bd28 <usb_set_config+0x24>)
   2bd10:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
   2bd12:	4a06      	ldr	r2, [pc, #24]	; (2bd2c <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
   2bd14:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
   2bd16:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
   2bd18:	2000      	movs	r0, #0
   2bd1a:	4770      	bx	lr
   2bd1c:	2000432c 	.word	0x2000432c
   2bd20:	0002b8cd 	.word	0x0002b8cd
   2bd24:	0002b639 	.word	0x0002b639
   2bd28:	0002b6d9 	.word	0x0002b6d9
   2bd2c:	0002b679 	.word	0x0002b679

0002bd30 <usb_device_init>:
 */
static int usb_device_init(const struct device *dev)
{
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
   2bd30:	4b08      	ldr	r3, [pc, #32]	; (2bd54 <usb_device_init+0x24>)
{
   2bd32:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
   2bd34:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
   2bd38:	b934      	cbnz	r4, 2bd48 <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
   2bd3a:	f000 f8cb 	bl	2bed4 <usb_get_device_descriptor>
	if (!device_descriptor) {
   2bd3e:	b130      	cbz	r0, 2bd4e <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
   2bd40:	f7ff ffe0 	bl	2bd04 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
   2bd44:	4620      	mov	r0, r4
}
   2bd46:	bd10      	pop	{r4, pc}
		return -EALREADY;
   2bd48:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2bd4c:	e7fb      	b.n	2bd46 <usb_device_init+0x16>
		return -1;
   2bd4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bd52:	e7f8      	b.n	2bd46 <usb_device_init+0x16>
   2bd54:	2000432c 	.word	0x2000432c

0002bd58 <usb_enable>:
{
   2bd58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2bd5c:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
   2bd5e:	4d35      	ldr	r5, [pc, #212]	; (2be34 <usb_enable+0xdc>)
	return z_impl_k_mutex_lock(mutex, timeout);
   2bd60:	4835      	ldr	r0, [pc, #212]	; (2be38 <usb_enable+0xe0>)
   2bd62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bd66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bd6a:	f01c f8f7 	bl	47f5c <z_impl_k_mutex_lock>
   2bd6e:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
   2bd72:	2e00      	cmp	r6, #0
   2bd74:	d15b      	bne.n	2be2e <usb_enable+0xd6>
	usb_dev.status_callback = cb;
   2bd76:	4831      	ldr	r0, [pc, #196]	; (2be3c <usb_enable+0xe4>)
	usb_dev.user_status_callback = status_cb;
   2bd78:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
   2bd7a:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
   2bd7c:	f018 fd12 	bl	447a4 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
   2bd80:	f018 fad0 	bl	44324 <usb_dc_attach>
	if (ret < 0) {
   2bd84:	1e04      	subs	r4, r0, #0
   2bd86:	db36      	blt.n	2bdf6 <usb_enable+0x9e>
	ret = usb_transfer_init();
   2bd88:	f000 fa5a 	bl	2c240 <usb_transfer_init>
	if (ret < 0) {
   2bd8c:	1e04      	subs	r4, r0, #0
   2bd8e:	db32      	blt.n	2bdf6 <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   2bd90:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
   2bd92:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   2bd94:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
   2bd98:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
   2bd9c:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   2bda0:	f018 fb10 	bl	443c4 <usb_dc_ep_configure>
	if (ret < 0) {
   2bda4:	1e04      	subs	r4, r0, #0
   2bda6:	db26      	blt.n	2bdf6 <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   2bda8:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
   2bdaa:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   2bdac:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   2bdb0:	f018 fb08 	bl	443c4 <usb_dc_ep_configure>
	if (ret < 0) {
   2bdb4:	1e04      	subs	r4, r0, #0
   2bdb6:	db1e      	blt.n	2bdf6 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
   2bdb8:	4921      	ldr	r1, [pc, #132]	; (2be40 <usb_enable+0xe8>)
   2bdba:	4630      	mov	r0, r6
   2bdbc:	f018 fcde 	bl	4477c <usb_dc_ep_set_callback>
	if (ret < 0) {
   2bdc0:	1e04      	subs	r4, r0, #0
   2bdc2:	db18      	blt.n	2bdf6 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
   2bdc4:	491e      	ldr	r1, [pc, #120]	; (2be40 <usb_enable+0xe8>)
   2bdc6:	4638      	mov	r0, r7
   2bdc8:	f018 fcd8 	bl	4477c <usb_dc_ep_set_callback>
	if (ret < 0) {
   2bdcc:	1e04      	subs	r4, r0, #0
   2bdce:	db12      	blt.n	2bdf6 <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2bdd0:	4c1c      	ldr	r4, [pc, #112]	; (2be44 <usb_enable+0xec>)
   2bdd2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2be48 <usb_enable+0xf0>
   2bdd6:	4544      	cmp	r4, r8
   2bdd8:	d314      	bcc.n	2be04 <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
   2bdda:	2000      	movs	r0, #0
   2bddc:	f018 fb78 	bl	444d0 <usb_dc_ep_enable>
	if (ret < 0) {
   2bde0:	1e04      	subs	r4, r0, #0
   2bde2:	db08      	blt.n	2bdf6 <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   2bde4:	2080      	movs	r0, #128	; 0x80
   2bde6:	f018 fb73 	bl	444d0 <usb_dc_ep_enable>
	if (ret < 0) {
   2bdea:	1e04      	subs	r4, r0, #0
   2bdec:	db03      	blt.n	2bdf6 <usb_enable+0x9e>
	usb_dev.enabled = true;
   2bdee:	2301      	movs	r3, #1
   2bdf0:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
   2bdf4:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   2bdf6:	4810      	ldr	r0, [pc, #64]	; (2be38 <usb_enable+0xe0>)
   2bdf8:	f01c f928 	bl	4804c <z_impl_k_mutex_unlock>
}
   2bdfc:	4620      	mov	r0, r4
   2bdfe:	b002      	add	sp, #8
   2be00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
   2be04:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2be06:	2600      	movs	r6, #0
   2be08:	7f22      	ldrb	r2, [r4, #28]
   2be0a:	b2f3      	uxtb	r3, r6
   2be0c:	429a      	cmp	r2, r3
   2be0e:	d801      	bhi.n	2be14 <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2be10:	3424      	adds	r4, #36	; 0x24
   2be12:	e7e0      	b.n	2bdd6 <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
   2be14:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   2be18:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   2be1c:	7910      	ldrb	r0, [r2, #4]
   2be1e:	f018 fcad 	bl	4477c <usb_dc_ep_set_callback>
   2be22:	3601      	adds	r6, #1
   2be24:	2800      	cmp	r0, #0
   2be26:	d0ef      	beq.n	2be08 <usb_enable+0xb0>
   2be28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2be2c:	e7e3      	b.n	2bdf6 <usb_enable+0x9e>
		ret = -EALREADY;
   2be2e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2be32:	e7e0      	b.n	2bdf6 <usb_enable+0x9e>
   2be34:	2000432c 	.word	0x2000432c
   2be38:	20001160 	.word	0x20001160
   2be3c:	0002b7dd 	.word	0x0002b7dd
   2be40:	0002bc11 	.word	0x0002bc11
   2be44:	200014f0 	.word	0x200014f0
   2be48:	20001514 	.word	0x20001514

0002be4c <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
   2be4c:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
   2be4e:	4b1f      	ldr	r3, [pc, #124]	; (2becc <usb_update_sn_string_descriptor+0x80>)
{
   2be50:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
   2be52:	aa05      	add	r2, sp, #20
   2be54:	f103 0510 	add.w	r5, r3, #16
   2be58:	6818      	ldr	r0, [r3, #0]
   2be5a:	6859      	ldr	r1, [r3, #4]
   2be5c:	4614      	mov	r4, r2
   2be5e:	c403      	stmia	r4!, {r0, r1}
   2be60:	3308      	adds	r3, #8
   2be62:	42ab      	cmp	r3, r5
   2be64:	4622      	mov	r2, r4
   2be66:	d1f7      	bne.n	2be58 <usb_update_sn_string_descriptor+0xc>
   2be68:	781b      	ldrb	r3, [r3, #0]
   2be6a:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
   2be6c:	2210      	movs	r2, #16
   2be6e:	2100      	movs	r1, #0
   2be70:	a801      	add	r0, sp, #4
   2be72:	f01f ff83 	bl	4bd7c <memset>
	memset(sn, 0, sizeof(sn));
   2be76:	2212      	movs	r2, #18
   2be78:	2100      	movs	r1, #0
   2be7a:	4815      	ldr	r0, [pc, #84]	; (2bed0 <usb_update_sn_string_descriptor+0x84>)
   2be7c:	f01f ff7e 	bl	4bd7c <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
   2be80:	2110      	movs	r1, #16
   2be82:	a801      	add	r0, sp, #4
   2be84:	f024 f905 	bl	50092 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
   2be88:	2800      	cmp	r0, #0
   2be8a:	dd1b      	ble.n	2bec4 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
   2be8c:	2808      	cmp	r0, #8
   2be8e:	bfb8      	it	lt
   2be90:	2008      	movlt	r0, #8
   2be92:	3809      	subs	r0, #9
   2be94:	ab01      	add	r3, sp, #4
   2be96:	490e      	ldr	r1, [pc, #56]	; (2bed0 <usb_update_sn_string_descriptor+0x84>)
   2be98:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
   2be9a:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   2be9c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   2bea0:	ac0a      	add	r4, sp, #40	; 0x28
   2bea2:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   2bea6:	f003 030f 	and.w	r3, r3, #15
   2beaa:	3328      	adds	r3, #40	; 0x28
   2beac:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
   2beae:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   2beb0:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   2beb4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   2beb8:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
   2beba:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   2bebc:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
   2bebe:	f101 0102 	add.w	r1, r1, #2
   2bec2:	d1eb      	bne.n	2be9c <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
   2bec4:	4802      	ldr	r0, [pc, #8]	; (2bed0 <usb_update_sn_string_descriptor+0x84>)
   2bec6:	b00b      	add	sp, #44	; 0x2c
   2bec8:	bd30      	pop	{r4, r5, pc}
   2beca:	bf00      	nop
   2becc:	00054082 	.word	0x00054082
   2bed0:	20007361 	.word	0x20007361

0002bed4 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
   2bed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bed8:	4c64      	ldr	r4, [pc, #400]	; (2c06c <usb_get_device_descriptor+0x198>)
   2beda:	b085      	sub	sp, #20
	uint8_t str_descr_idx = 0U;
   2bedc:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
   2bede:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
   2bee2:	46b1      	mov	r9, r6
	struct usb_cfg_data *cfg_data = NULL;
   2bee4:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
   2bee6:	46b2      	mov	sl, r6
	while (head->bLength != 0U) {
   2bee8:	7823      	ldrb	r3, [r4, #0]
   2beea:	b92b      	cbnz	r3, 2bef8 <usb_get_device_descriptor+0x24>
	if ((head + 1) != __usb_descriptor_end) {
   2beec:	4b60      	ldr	r3, [pc, #384]	; (2c070 <usb_get_device_descriptor+0x19c>)
   2beee:	3402      	adds	r4, #2
   2bef0:	429c      	cmp	r4, r3
   2bef2:	d1f3      	bne.n	2bedc <usb_get_device_descriptor+0x8>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
   2bef4:	485d      	ldr	r0, [pc, #372]	; (2c06c <usb_get_device_descriptor+0x198>)
   2bef6:	e01c      	b.n	2bf32 <usb_get_device_descriptor+0x5e>
		switch (head->bDescriptorType) {
   2bef8:	7863      	ldrb	r3, [r4, #1]
   2befa:	2b05      	cmp	r3, #5
   2befc:	d805      	bhi.n	2bf0a <usb_get_device_descriptor+0x36>
   2befe:	e8df f003 	tbb	[pc, r3]
   2bf02:	047b      	.short	0x047b
   2bf04:	25077b03 	.word	0x25077b03
   2bf08:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
   2bf0a:	7823      	ldrb	r3, [r4, #0]
   2bf0c:	441c      	add	r4, r3
   2bf0e:	e7eb      	b.n	2bee8 <usb_get_device_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
   2bf10:	78e3      	ldrb	r3, [r4, #3]
   2bf12:	2b00      	cmp	r3, #0
   2bf14:	d1f9      	bne.n	2bf0a <usb_get_device_descriptor+0x36>
			if (if_descr->bInterfaceNumber == 0U) {
   2bf16:	78a3      	ldrb	r3, [r4, #2]
   2bf18:	b173      	cbz	r3, 2bf38 <usb_get_device_descriptor+0x64>
			numof_ifaces++;
   2bf1a:	f109 0901 	add.w	r9, r9, #1
   2bf1e:	fa5f f989 	uxtb.w	r9, r9
			break;
   2bf22:	e7f2      	b.n	2bf0a <usb_get_device_descriptor+0x36>
		if (cfg_data->interface_descriptor == iface) {
   2bf24:	686a      	ldr	r2, [r5, #4]
   2bf26:	4294      	cmp	r4, r2
   2bf28:	d009      	beq.n	2bf3e <usb_get_device_descriptor+0x6a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2bf2a:	3524      	adds	r5, #36	; 0x24
   2bf2c:	429d      	cmp	r5, r3
   2bf2e:	d3f9      	bcc.n	2bf24 <usb_get_device_descriptor+0x50>
		return NULL;
   2bf30:	2000      	movs	r0, #0
}
   2bf32:	b005      	add	sp, #20
   2bf34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2bf38:	4d4e      	ldr	r5, [pc, #312]	; (2c074 <usb_get_device_descriptor+0x1a0>)
   2bf3a:	4b4f      	ldr	r3, [pc, #316]	; (2c078 <usb_get_device_descriptor+0x1a4>)
   2bf3c:	e7f6      	b.n	2bf2c <usb_get_device_descriptor+0x58>
				if (cfg_data->interface_config) {
   2bf3e:	68ab      	ldr	r3, [r5, #8]
   2bf40:	2b00      	cmp	r3, #0
   2bf42:	d0ea      	beq.n	2bf1a <usb_get_device_descriptor+0x46>
					cfg_data->interface_config(head,
   2bf44:	4649      	mov	r1, r9
   2bf46:	4620      	mov	r0, r4
   2bf48:	4798      	blx	r3
   2bf4a:	e7e6      	b.n	2bf1a <usb_get_device_descriptor+0x46>
			if (!cfg_data) {
   2bf4c:	2d00      	cmp	r5, #0
   2bf4e:	d0ef      	beq.n	2bf30 <usb_get_device_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   2bf50:	2300      	movs	r3, #0
   2bf52:	2101      	movs	r1, #1
   2bf54:	7f2a      	ldrb	r2, [r5, #28]
   2bf56:	4293      	cmp	r3, r2
   2bf58:	d2ea      	bcs.n	2bf30 <usb_get_device_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   2bf5a:	6a2a      	ldr	r2, [r5, #32]
   2bf5c:	78a7      	ldrb	r7, [r4, #2]
   2bf5e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2bf62:	7910      	ldrb	r0, [r2, #4]
   2bf64:	4287      	cmp	r7, r0
   2bf66:	d001      	beq.n	2bf6c <usb_get_device_descriptor+0x98>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   2bf68:	3301      	adds	r3, #1
   2bf6a:	e7f3      	b.n	2bf54 <usb_get_device_descriptor+0x80>
   2bf6c:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   2bf6e:	78e0      	ldrb	r0, [r4, #3]
   2bf70:	f000 0003 	and.w	r0, r0, #3
   2bf74:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   2bf78:	7920      	ldrb	r0, [r4, #4]
   2bf7a:	f894 c005 	ldrb.w	ip, [r4, #5]
   2bf7e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
   2bf82:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   2bf86:	f994 0002 	ldrsb.w	r0, [r4, #2]
   2bf8a:	2800      	cmp	r0, #0
   2bf8c:	fa5f f887 	uxtb.w	r8, r7
   2bf90:	da27      	bge.n	2bfe2 <usb_get_device_descriptor+0x10e>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   2bf92:	f107 0010 	add.w	r0, r7, #16
   2bf96:	fa01 f000 	lsl.w	r0, r1, r0
   2bf9a:	ea10 0f0b 	tst.w	r0, fp
   2bf9e:	d127      	bne.n	2bff0 <usb_get_device_descriptor+0x11c>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   2bfa0:	f048 0080 	orr.w	r0, r8, #128	; 0x80
   2bfa4:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   2bfa8:	a802      	add	r0, sp, #8
   2bfaa:	e9cd 3200 	strd	r3, r2, [sp]
   2bfae:	f023 ff45 	bl	4fe3c <usb_dc_ep_check_cap>
   2bfb2:	e9dd 3200 	ldrd	r3, r2, [sp]
   2bfb6:	2101      	movs	r1, #1
   2bfb8:	b9d0      	cbnz	r0, 2bff0 <usb_get_device_descriptor+0x11c>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   2bfba:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2bfbe:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   2bfc0:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
   2bfc4:	bf18      	it	ne
   2bfc6:	f108 0810 	addne.w	r8, r8, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   2bfca:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1U << (idx + 16U));
   2bfcc:	bf18      	it	ne
   2bfce:	fa5f f888 	uxtbne.w	r8, r8
   2bfd2:	460b      	mov	r3, r1
					*requested_ep |= (1U << idx);
   2bfd4:	bf0c      	ite	eq
   2bfd6:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
   2bfd8:	fa01 f308 	lslne.w	r3, r1, r8
					*requested_ep |= (1U << idx);
   2bfdc:	ea4b 0b03 	orr.w	fp, fp, r3
				return 0;
   2bfe0:	e793      	b.n	2bf0a <usb_get_device_descriptor+0x36>
				if ((*requested_ep & (1U << (idx)))) {
   2bfe2:	fa01 f007 	lsl.w	r0, r1, r7
   2bfe6:	ea10 0f0b 	tst.w	r0, fp
   2bfea:	d101      	bne.n	2bff0 <usb_get_device_descriptor+0x11c>
   2bfec:	4640      	mov	r0, r8
   2bfee:	e7d9      	b.n	2bfa4 <usb_get_device_descriptor+0xd0>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   2bff0:	3701      	adds	r7, #1
   2bff2:	2f10      	cmp	r7, #16
   2bff4:	d1bb      	bne.n	2bf6e <usb_get_device_descriptor+0x9a>
   2bff6:	e7b7      	b.n	2bf68 <usb_get_device_descriptor+0x94>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
   2bff8:	2e03      	cmp	r6, #3
   2bffa:	d11d      	bne.n	2c038 <usb_get_device_descriptor+0x164>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
   2bffc:	f7ff ff26 	bl	2be4c <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
   2c000:	4607      	mov	r7, r0
   2c002:	b168      	cbz	r0, 2c020 <usb_get_device_descriptor+0x14c>
	runtime_sn_len = strlen(runtime_sn);
   2c004:	f01f fe78 	bl	4bcf8 <strlen>
	if (!runtime_sn_len) {
   2c008:	4680      	mov	r8, r0
   2c00a:	b148      	cbz	r0, 2c020 <usb_get_device_descriptor+0x14c>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
   2c00c:	481b      	ldr	r0, [pc, #108]	; (2c07c <usb_get_device_descriptor+0x1a8>)
   2c00e:	f01f fe73 	bl	4bcf8 <strlen>
	if (runtime_sn_len != default_sn_len) {
   2c012:	4580      	cmp	r8, r0
   2c014:	d104      	bne.n	2c020 <usb_get_device_descriptor+0x14c>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
   2c016:	4642      	mov	r2, r8
   2c018:	4639      	mov	r1, r7
   2c01a:	1ca0      	adds	r0, r4, #2
   2c01c:	f01f fea3 	bl	4bd66 <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   2c020:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
   2c022:	f06f 0102 	mvn.w	r1, #2
   2c026:	18e2      	adds	r2, r4, r3
   2c028:	1b09      	subs	r1, r1, r4
   2c02a:	eb04 0353 	add.w	r3, r4, r3, lsr #1
   2c02e:	42d1      	cmn	r1, r2
   2c030:	d513      	bpl.n	2c05a <usb_get_device_descriptor+0x186>
			str_descr_idx += 1U;
   2c032:	3601      	adds	r6, #1
   2c034:	b2f6      	uxtb	r6, r6
			break;
   2c036:	e768      	b.n	2bf0a <usb_get_device_descriptor+0x36>
			if (str_descr_idx) {
   2c038:	2e00      	cmp	r6, #0
   2c03a:	d1f1      	bne.n	2c020 <usb_get_device_descriptor+0x14c>
				if (!cfg_descr) {
   2c03c:	f1ba 0f00 	cmp.w	sl, #0
   2c040:	f43f af76 	beq.w	2bf30 <usb_get_device_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
   2c044:	eba4 030a 	sub.w	r3, r4, sl
	dst[0] = val;
   2c048:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
   2c04c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2c050:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
   2c054:	f88a 9004 	strb.w	r9, [sl, #4]
   2c058:	e7eb      	b.n	2c032 <usb_get_device_descriptor+0x15e>
		buf[i] = 0U;
   2c05a:	f04f 0000 	mov.w	r0, #0
   2c05e:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
   2c062:	f813 0901 	ldrb.w	r0, [r3], #-1
   2c066:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
   2c06a:	e7e0      	b.n	2c02e <usb_get_device_descriptor+0x15a>
   2c06c:	2000145c 	.word	0x2000145c
   2c070:	200014ee 	.word	0x200014ee
   2c074:	200014f0 	.word	0x200014f0
   2c078:	20001514 	.word	0x20001514
   2c07c:	00054082 	.word	0x00054082

0002c080 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
   2c080:	b510      	push	{r4, lr}
   2c082:	4b09      	ldr	r3, [pc, #36]	; (2c0a8 <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2c084:	2100      	movs	r1, #0
   2c086:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
   2c088:	781c      	ldrb	r4, [r3, #0]
   2c08a:	4284      	cmp	r4, r0
   2c08c:	d105      	bne.n	2c09a <usb_ep_get_transfer+0x1a>
   2c08e:	685c      	ldr	r4, [r3, #4]
   2c090:	b11c      	cbz	r4, 2c09a <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
   2c092:	2348      	movs	r3, #72	; 0x48
   2c094:	fb03 2001 	mla	r0, r3, r1, r2
		}
	}

	return NULL;
}
   2c098:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2c09a:	3101      	adds	r1, #1
   2c09c:	2904      	cmp	r1, #4
   2c09e:	f103 0348 	add.w	r3, r3, #72	; 0x48
   2c0a2:	d1f1      	bne.n	2c088 <usb_ep_get_transfer+0x8>
	return NULL;
   2c0a4:	2000      	movs	r0, #0
   2c0a6:	e7f7      	b.n	2c098 <usb_ep_get_transfer+0x18>
   2c0a8:	200043f0 	.word	0x200043f0

0002c0ac <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
   2c0ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
   2c0b0:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
   2c0b4:	f810 6c34 	ldrb.w	r6, [r0, #-52]
	if (trans->status != -EBUSY) {
   2c0b8:	3310      	adds	r3, #16
{
   2c0ba:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
   2c0bc:	d110      	bne.n	2c0e0 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
   2c0be:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
   2c0c0:	f850 2c28 	ldr.w	r2, [r0, #-40]
	if (trans->flags & USB_TRANS_WRITE) {
   2c0c4:	0799      	lsls	r1, r3, #30
   2c0c6:	d53c      	bpl.n	2c142 <usb_transfer_work+0x96>
		if (!trans->bsize) {
   2c0c8:	bb02      	cbnz	r2, 2c10c <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
   2c0ca:	f013 0304 	ands.w	r3, r3, #4
   2c0ce:	d104      	bne.n	2c0da <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
   2c0d0:	461a      	mov	r2, r3
   2c0d2:	4619      	mov	r1, r3
   2c0d4:	4630      	mov	r0, r6
   2c0d6:	f01e fae4 	bl	4a6a2 <usb_write>
			}
			trans->status = 0;
   2c0da:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
   2c0dc:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
   2c0e0:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2c0e4:	3310      	adds	r3, #16
   2c0e6:	d00e      	beq.n	2c106 <usb_transfer_work+0x5a>
   2c0e8:	f854 5c20 	ldr.w	r5, [r4, #-32]
   2c0ec:	b15d      	cbz	r5, 2c106 <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
   2c0ee:	f854 7c24 	ldr.w	r7, [r4, #-36]
		void *priv = trans->priv;
   2c0f2:	f854 8c1c 	ldr.w	r8, [r4, #-28]

		if (k_is_in_isr()) {
   2c0f6:	f024 fc70 	bl	509da <k_is_in_isr>
   2c0fa:	2800      	cmp	r0, #0
   2c0fc:	d04c      	beq.n	2c198 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2c0fe:	482e      	ldr	r0, [pc, #184]	; (2c1b8 <usb_transfer_work+0x10c>)
   2c100:	4621      	mov	r1, r4
   2c102:	f024 fdf6 	bl	50cf2 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
   2c106:	b002      	add	sp, #8
   2c108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
   2c10c:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   2c110:	ab01      	add	r3, sp, #4
   2c112:	4630      	mov	r0, r6
   2c114:	f01e fac5 	bl	4a6a2 <usb_write>
		if (ret) {
   2c118:	b110      	cbz	r0, 2c120 <usb_transfer_work+0x74>
			trans->status = -EINVAL;
   2c11a:	f06f 0315 	mvn.w	r3, #21
   2c11e:	e7dd      	b.n	2c0dc <usb_transfer_work+0x30>
		trans->buffer += bytes;
   2c120:	9a01      	ldr	r2, [sp, #4]
   2c122:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2c126:	4413      	add	r3, r2
   2c128:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   2c12c:	f854 3c28 	ldr.w	r3, [r4, #-40]
   2c130:	1a9b      	subs	r3, r3, r2
   2c132:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   2c136:	f854 3c24 	ldr.w	r3, [r4, #-36]
   2c13a:	4413      	add	r3, r2
   2c13c:	f844 3c24 	str.w	r3, [r4, #-36]
   2c140:	e7ce      	b.n	2c0e0 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
   2c142:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   2c146:	ab01      	add	r3, sp, #4
   2c148:	4630      	mov	r0, r6
   2c14a:	f018 fa8d 	bl	44668 <usb_dc_ep_read_wait>
		if (ret) {
   2c14e:	2800      	cmp	r0, #0
   2c150:	d1e3      	bne.n	2c11a <usb_transfer_work+0x6e>
		trans->buffer += bytes;
   2c152:	9d01      	ldr	r5, [sp, #4]
   2c154:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2c158:	442b      	add	r3, r5
   2c15a:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   2c15e:	f854 3c28 	ldr.w	r3, [r4, #-40]
   2c162:	1b5b      	subs	r3, r3, r5
   2c164:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   2c168:	f854 3c24 	ldr.w	r3, [r4, #-36]
   2c16c:	442b      	add	r3, r5
   2c16e:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   2c172:	2d00      	cmp	r5, #0
   2c174:	d0b1      	beq.n	2c0da <usb_transfer_work+0x2e>
   2c176:	4630      	mov	r0, r6
   2c178:	f018 fb1a 	bl	447b0 <usb_dc_ep_mps>
   2c17c:	fbb5 f3f0 	udiv	r3, r5, r0
   2c180:	fb03 5510 	mls	r5, r3, r0, r5
   2c184:	2d00      	cmp	r5, #0
   2c186:	d1a8      	bne.n	2c0da <usb_transfer_work+0x2e>
   2c188:	f854 3c28 	ldr.w	r3, [r4, #-40]
   2c18c:	2b00      	cmp	r3, #0
   2c18e:	d0a4      	beq.n	2c0da <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
   2c190:	4630      	mov	r0, r6
   2c192:	f018 fab1 	bl	446f8 <usb_dc_ep_read_continue>
   2c196:	e7a3      	b.n	2c0e0 <usb_transfer_work+0x34>
		trans->cb = NULL;
   2c198:	f844 0c20 	str.w	r0, [r4, #-32]
	z_impl_k_sem_give(sem);
   2c19c:	f1a4 0018 	sub.w	r0, r4, #24
   2c1a0:	f01b ffca 	bl	48138 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
   2c1a4:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2c1a8:	338c      	adds	r3, #140	; 0x8c
   2c1aa:	d0ac      	beq.n	2c106 <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
   2c1ac:	4642      	mov	r2, r8
   2c1ae:	4639      	mov	r1, r7
   2c1b0:	4630      	mov	r0, r6
   2c1b2:	47a8      	blx	r5
   2c1b4:	e7a7      	b.n	2c106 <usb_transfer_work+0x5a>
   2c1b6:	bf00      	nop
   2c1b8:	20004100 	.word	0x20004100

0002c1bc <usb_cancel_transfer>:
	irq_unlock(key);
	return ret;
}

void usb_cancel_transfer(uint8_t ep)
{
   2c1bc:	b510      	push	{r4, lr}
   2c1be:	f04f 0320 	mov.w	r3, #32
   2c1c2:	f3ef 8411 	mrs	r4, BASEPRI
   2c1c6:	f383 8812 	msr	BASEPRI_MAX, r3
   2c1ca:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
   2c1ce:	f7ff ff57 	bl	2c080 <usb_ep_get_transfer>
	if (!trans) {
   2c1d2:	b150      	cbz	r0, 2c1ea <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
   2c1d4:	6843      	ldr	r3, [r0, #4]
   2c1d6:	3310      	adds	r3, #16
   2c1d8:	d107      	bne.n	2c1ea <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
   2c1da:	f06f 038b 	mvn.w	r3, #139	; 0x8b
   2c1de:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2c1e0:	f100 0134 	add.w	r1, r0, #52	; 0x34
   2c1e4:	4803      	ldr	r0, [pc, #12]	; (2c1f4 <usb_cancel_transfer+0x38>)
   2c1e6:	f024 fd84 	bl	50cf2 <k_work_submit_to_queue>
	__asm__ volatile(
   2c1ea:	f384 8811 	msr	BASEPRI, r4
   2c1ee:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
   2c1f2:	bd10      	pop	{r4, pc}
   2c1f4:	20004100 	.word	0x20004100

0002c1f8 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
   2c1f8:	b570      	push	{r4, r5, r6, lr}
   2c1fa:	4c0f      	ldr	r4, [pc, #60]	; (2c238 <usb_cancel_transfers+0x40>)
   2c1fc:	2504      	movs	r5, #4
	__asm__ volatile(
   2c1fe:	f04f 0320 	mov.w	r3, #32
   2c202:	f3ef 8611 	mrs	r6, BASEPRI
   2c206:	f383 8812 	msr	BASEPRI_MAX, r3
   2c20a:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
   2c20e:	6863      	ldr	r3, [r4, #4]
   2c210:	3310      	adds	r3, #16
   2c212:	d107      	bne.n	2c224 <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
   2c214:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2c218:	4808      	ldr	r0, [pc, #32]	; (2c23c <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
   2c21a:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2c21c:	f104 0134 	add.w	r1, r4, #52	; 0x34
   2c220:	f024 fd67 	bl	50cf2 <k_work_submit_to_queue>
	__asm__ volatile(
   2c224:	f386 8811 	msr	BASEPRI, r6
   2c228:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2c22c:	3d01      	subs	r5, #1
   2c22e:	f104 0448 	add.w	r4, r4, #72	; 0x48
   2c232:	d1e4      	bne.n	2c1fe <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
   2c234:	bd70      	pop	{r4, r5, r6, pc}
   2c236:	bf00      	nop
   2c238:	200043f0 	.word	0x200043f0
   2c23c:	20004100 	.word	0x20004100

0002c240 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
   2c240:	b570      	push	{r4, r5, r6, lr}
   2c242:	4c0a      	ldr	r4, [pc, #40]	; (2c26c <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
   2c244:	4e0a      	ldr	r6, [pc, #40]	; (2c270 <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2c246:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
   2c248:	4631      	mov	r1, r6
   2c24a:	4620      	mov	r0, r4
   2c24c:	f024 fd38 	bl	50cc0 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2c250:	2201      	movs	r2, #1
   2c252:	f1a4 0018 	sub.w	r0, r4, #24
   2c256:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2c258:	3501      	adds	r5, #1
   2c25a:	f024 fcb1 	bl	50bc0 <z_impl_k_sem_init>
   2c25e:	2d04      	cmp	r5, #4
   2c260:	f104 0448 	add.w	r4, r4, #72	; 0x48
   2c264:	d1f0      	bne.n	2c248 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
   2c266:	2000      	movs	r0, #0
   2c268:	bd70      	pop	{r4, r5, r6, pc}
   2c26a:	bf00      	nop
   2c26c:	20004424 	.word	0x20004424
   2c270:	0002c0ad 	.word	0x0002c0ad

0002c274 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   2c274:	4b0c      	ldr	r3, [pc, #48]	; (2c2a8 <flash_area_open+0x34>)
   2c276:	681b      	ldr	r3, [r3, #0]
{
   2c278:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
   2c27a:	b193      	cbz	r3, 2c2a2 <flash_area_open+0x2e>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   2c27c:	4a0b      	ldr	r2, [pc, #44]	; (2c2ac <flash_area_open+0x38>)
   2c27e:	6815      	ldr	r5, [r2, #0]
   2c280:	2200      	movs	r2, #0
   2c282:	42aa      	cmp	r2, r5
   2c284:	db02      	blt.n	2c28c <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   2c286:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
   2c28a:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   2c28c:	461c      	mov	r4, r3
   2c28e:	f814 6b10 	ldrb.w	r6, [r4], #16
   2c292:	4286      	cmp	r6, r0
   2c294:	d002      	beq.n	2c29c <flash_area_open+0x28>
	for (int i = 0; i < flash_map_entries; i++) {
   2c296:	3201      	adds	r2, #1
   2c298:	4623      	mov	r3, r4
   2c29a:	e7f2      	b.n	2c282 <flash_area_open+0xe>
	*fap = area;
   2c29c:	600b      	str	r3, [r1, #0]
	return 0;
   2c29e:	2000      	movs	r0, #0
   2c2a0:	e7f3      	b.n	2c28a <flash_area_open+0x16>
		return -EACCES;
   2c2a2:	f06f 000c 	mvn.w	r0, #12
   2c2a6:	e7f0      	b.n	2c28a <flash_area_open+0x16>
   2c2a8:	2000074c 	.word	0x2000074c
   2c2ac:	000525bc 	.word	0x000525bc

0002c2b0 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   2c2b0:	b570      	push	{r4, r5, r6, lr}
   2c2b2:	b088      	sub	sp, #32
   2c2b4:	4605      	mov	r5, r0
   2c2b6:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   2c2b8:	b2c0      	uxtb	r0, r0
   2c2ba:	4669      	mov	r1, sp
{
   2c2bc:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   2c2be:	f7ff ffd9 	bl	2c274 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   2c2c2:	2800      	cmp	r0, #0
   2c2c4:	db1f      	blt.n	2c306 <flash_area_get_sectors+0x56>
   2c2c6:	9b00      	ldr	r3, [sp, #0]
   2c2c8:	b1eb      	cbz	r3, 2c306 <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
   2c2ca:	685a      	ldr	r2, [r3, #4]
   2c2cc:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
   2c2ce:	689a      	ldr	r2, [r3, #8]
	cb_data->ret_len = *cnt;
   2c2d0:	6821      	ldr	r1, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
   2c2d2:	68d8      	ldr	r0, [r3, #12]
	cb_data->area_idx = idx;
   2c2d4:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   2c2d6:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   2c2da:	2200      	movs	r2, #0
	cb_data->status = 0;
   2c2dc:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
   2c2e0:	9205      	str	r2, [sp, #20]
   2c2e2:	f01b fb61 	bl	479a8 <z_impl_device_get_binding>
   2c2e6:	4605      	mov	r5, r0
	flash_area_close(fa);
   2c2e8:	9800      	ldr	r0, [sp, #0]
   2c2ea:	f01e fa22 	bl	4a732 <flash_area_close>
	if (flash_dev == NULL) {
   2c2ee:	b16d      	cbz	r5, 2c30c <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
   2c2f0:	4628      	mov	r0, r5
   2c2f2:	4908      	ldr	r1, [pc, #32]	; (2c314 <flash_area_get_sectors+0x64>)
   2c2f4:	aa01      	add	r2, sp, #4
   2c2f6:	f023 ff67 	bl	501c8 <flash_page_foreach>
	if (cb_data->status == 0) {
   2c2fa:	9807      	ldr	r0, [sp, #28]
   2c2fc:	b908      	cbnz	r0, 2c302 <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
   2c2fe:	9b05      	ldr	r3, [sp, #20]
   2c300:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   2c302:	b008      	add	sp, #32
   2c304:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2c306:	f06f 0015 	mvn.w	r0, #21
   2c30a:	e7fa      	b.n	2c302 <flash_area_get_sectors+0x52>
		return -ENODEV;
   2c30c:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   2c310:	e7f7      	b.n	2c302 <flash_area_get_sectors+0x52>
   2c312:	bf00      	nop
   2c314:	0004a735 	.word	0x0004a735

0002c318 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   2c318:	4b10      	ldr	r3, [pc, #64]	; (2c35c <settings_save_one+0x44>)
{
   2c31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   2c31e:	681c      	ldr	r4, [r3, #0]
{
   2c320:	4605      	mov	r5, r0
   2c322:	460e      	mov	r6, r1
   2c324:	4617      	mov	r7, r2
	if (!cs) {
   2c326:	b1ac      	cbz	r4, 2c354 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   2c328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c32c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c330:	480b      	ldr	r0, [pc, #44]	; (2c360 <settings_save_one+0x48>)
   2c332:	f01b fe13 	bl	47f5c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   2c336:	6863      	ldr	r3, [r4, #4]
   2c338:	4632      	mov	r2, r6
   2c33a:	f8d3 8008 	ldr.w	r8, [r3, #8]
   2c33e:	4629      	mov	r1, r5
   2c340:	463b      	mov	r3, r7
   2c342:	4620      	mov	r0, r4
   2c344:	47c0      	blx	r8
   2c346:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   2c348:	4805      	ldr	r0, [pc, #20]	; (2c360 <settings_save_one+0x48>)
   2c34a:	f01b fe7f 	bl	4804c <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   2c34e:	4620      	mov	r0, r4
   2c350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   2c354:	f06f 0401 	mvn.w	r4, #1
   2c358:	e7f9      	b.n	2c34e <settings_save_one+0x36>
   2c35a:	bf00      	nop
   2c35c:	20004510 	.word	0x20004510
   2c360:	2000114c 	.word	0x2000114c

0002c364 <settings_src_register>:
	parent->next = child;
   2c364:	2300      	movs	r3, #0
   2c366:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   2c368:	4b04      	ldr	r3, [pc, #16]	; (2c37c <settings_src_register+0x18>)
   2c36a:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   2c36c:	b912      	cbnz	r2, 2c374 <settings_src_register+0x10>
	list->head = node;
   2c36e:	e9c3 0000 	strd	r0, r0, [r3]
}
   2c372:	4770      	bx	lr
	parent->next = child;
   2c374:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2c376:	6058      	str	r0, [r3, #4]
}
   2c378:	4770      	bx	lr
   2c37a:	bf00      	nop
   2c37c:	20004514 	.word	0x20004514

0002c380 <settings_dst_register>:
	settings_save_dst = cs;
   2c380:	4b01      	ldr	r3, [pc, #4]	; (2c388 <settings_dst_register+0x8>)
   2c382:	6018      	str	r0, [r3, #0]
}
   2c384:	4770      	bx	lr
   2c386:	bf00      	nop
   2c388:	20004510 	.word	0x20004510

0002c38c <settings_load_subtree>:
{
   2c38c:	b530      	push	{r4, r5, lr}
   2c38e:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   2c390:	2300      	movs	r3, #0
{
   2c392:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   2c394:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2c398:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   2c39a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c39e:	480c      	ldr	r0, [pc, #48]	; (2c3d0 <settings_load_subtree+0x44>)
   2c3a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c3a4:	f01b fdda 	bl	47f5c <z_impl_k_mutex_lock>
	return list->head;
   2c3a8:	4b0a      	ldr	r3, [pc, #40]	; (2c3d4 <settings_load_subtree+0x48>)
   2c3aa:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   2c3ac:	b94c      	cbnz	r4, 2c3c2 <settings_load_subtree+0x36>
	rc = settings_commit_subtree(subtree);
   2c3ae:	4628      	mov	r0, r5
   2c3b0:	f000 f8ce 	bl	2c550 <settings_commit_subtree>
   2c3b4:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   2c3b6:	4806      	ldr	r0, [pc, #24]	; (2c3d0 <settings_load_subtree+0x44>)
   2c3b8:	f01b fe48 	bl	4804c <z_impl_k_mutex_unlock>
}
   2c3bc:	4620      	mov	r0, r4
   2c3be:	b005      	add	sp, #20
   2c3c0:	bd30      	pop	{r4, r5, pc}
		cs->cs_itf->csi_load(cs, &arg);
   2c3c2:	6863      	ldr	r3, [r4, #4]
   2c3c4:	4620      	mov	r0, r4
   2c3c6:	681b      	ldr	r3, [r3, #0]
   2c3c8:	a901      	add	r1, sp, #4
   2c3ca:	4798      	blx	r3
	return node->next;
   2c3cc:	6824      	ldr	r4, [r4, #0]
   2c3ce:	e7ed      	b.n	2c3ac <settings_load_subtree+0x20>
   2c3d0:	2000114c 	.word	0x2000114c
   2c3d4:	20004514 	.word	0x20004514

0002c3d8 <settings_load_subtree_direct>:
{
   2c3d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   2c3da:	e9cd 0101 	strd	r0, r1, [sp, #4]
   2c3de:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   2c3e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c3e4:	480a      	ldr	r0, [pc, #40]	; (2c410 <settings_load_subtree_direct+0x38>)
   2c3e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c3ea:	f01b fdb7 	bl	47f5c <z_impl_k_mutex_lock>
	return list->head;
   2c3ee:	4b09      	ldr	r3, [pc, #36]	; (2c414 <settings_load_subtree_direct+0x3c>)
   2c3f0:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   2c3f2:	b92c      	cbnz	r4, 2c400 <settings_load_subtree_direct+0x28>
	return z_impl_k_mutex_unlock(mutex);
   2c3f4:	4806      	ldr	r0, [pc, #24]	; (2c410 <settings_load_subtree_direct+0x38>)
   2c3f6:	f01b fe29 	bl	4804c <z_impl_k_mutex_unlock>
}
   2c3fa:	4620      	mov	r0, r4
   2c3fc:	b004      	add	sp, #16
   2c3fe:	bd10      	pop	{r4, pc}
		cs->cs_itf->csi_load(cs, &arg);
   2c400:	6863      	ldr	r3, [r4, #4]
   2c402:	4620      	mov	r0, r4
   2c404:	681b      	ldr	r3, [r3, #0]
   2c406:	a901      	add	r1, sp, #4
   2c408:	4798      	blx	r3
	return node->next;
   2c40a:	6824      	ldr	r4, [r4, #0]
   2c40c:	e7f1      	b.n	2c3f2 <settings_load_subtree_direct+0x1a>
   2c40e:	bf00      	nop
   2c410:	2000114c 	.word	0x2000114c
   2c414:	20004514 	.word	0x20004514

0002c418 <settings_store_init>:
	list->head = NULL;
   2c418:	4b02      	ldr	r3, [pc, #8]	; (2c424 <settings_store_init+0xc>)
   2c41a:	2200      	movs	r2, #0
	list->tail = NULL;
   2c41c:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   2c420:	4770      	bx	lr
   2c422:	bf00      	nop
   2c424:	20004514 	.word	0x20004514

0002c428 <settings_init>:
	list->head = NULL;
   2c428:	4b02      	ldr	r3, [pc, #8]	; (2c434 <settings_init+0xc>)
   2c42a:	2200      	movs	r2, #0
	list->tail = NULL;
   2c42c:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   2c430:	f7ff bff2 	b.w	2c418 <settings_store_init>
   2c434:	2000451c 	.word	0x2000451c

0002c438 <settings_register>:
}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
int settings_register(struct settings_handler *handler)
{
   2c438:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c43a:	4c1b      	ldr	r4, [pc, #108]	; (2c4a8 <settings_register+0x70>)
   2c43c:	4e1b      	ldr	r6, [pc, #108]	; (2c4ac <settings_register+0x74>)
{
   2c43e:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c440:	42b4      	cmp	r4, r6
   2c442:	d312      	bcc.n	2c46a <settings_register+0x32>
	return list->head;
   2c444:	4e1a      	ldr	r6, [pc, #104]	; (2c4b0 <settings_register+0x78>)
	return z_impl_k_mutex_lock(mutex, timeout);
   2c446:	481b      	ldr	r0, [pc, #108]	; (2c4b4 <settings_register+0x7c>)
   2c448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c44c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c450:	f01b fd84 	bl	47f5c <z_impl_k_mutex_lock>
   2c454:	6834      	ldr	r4, [r6, #0]
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2c456:	b17c      	cbz	r4, 2c478 <settings_register+0x40>
		if (strcmp(handler->name, ch->name) == 0) {
   2c458:	6828      	ldr	r0, [r5, #0]
   2c45a:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2c45e:	3c14      	subs	r4, #20
		if (strcmp(handler->name, ch->name) == 0) {
   2c460:	f01f fc51 	bl	4bd06 <strcmp>
   2c464:	b1c8      	cbz	r0, 2c49a <settings_register+0x62>
	return node->next;
   2c466:	6964      	ldr	r4, [r4, #20]
   2c468:	e7f5      	b.n	2c456 <settings_register+0x1e>
		if (strcmp(handler->name, ch->name) == 0) {
   2c46a:	6821      	ldr	r1, [r4, #0]
   2c46c:	6828      	ldr	r0, [r5, #0]
   2c46e:	f01f fc4a 	bl	4bd06 <strcmp>
   2c472:	b1a8      	cbz	r0, 2c4a0 <settings_register+0x68>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c474:	3414      	adds	r4, #20
   2c476:	e7e3      	b.n	2c440 <settings_register+0x8>
	parent->next = child;
   2c478:	2200      	movs	r2, #0
   2c47a:	616a      	str	r2, [r5, #20]
	return list->tail;
   2c47c:	6872      	ldr	r2, [r6, #4]
			rc = -EEXIST;
			goto end;
		}
	}
	sys_slist_append(&settings_handlers, &handler->node);
   2c47e:	f105 0314 	add.w	r3, r5, #20
Z_GENLIST_APPEND(slist, snode)
   2c482:	b93a      	cbnz	r2, 2c494 <settings_register+0x5c>
	list->head = node;
   2c484:	e9c6 3300 	strd	r3, r3, [r6]
	int rc = 0;
   2c488:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   2c48a:	480a      	ldr	r0, [pc, #40]	; (2c4b4 <settings_register+0x7c>)
   2c48c:	f01b fdde 	bl	4804c <z_impl_k_mutex_unlock>

end:
	k_mutex_unlock(&settings_lock);
	return rc;
}
   2c490:	4620      	mov	r0, r4
   2c492:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   2c494:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2c496:	6073      	str	r3, [r6, #4]
}
   2c498:	e7f6      	b.n	2c488 <settings_register+0x50>
			rc = -EEXIST;
   2c49a:	f06f 0410 	mvn.w	r4, #16
   2c49e:	e7f4      	b.n	2c48a <settings_register+0x52>
			return -EEXIST;
   2c4a0:	f06f 0410 	mvn.w	r4, #16
   2c4a4:	e7f4      	b.n	2c490 <settings_register+0x58>
   2c4a6:	bf00      	nop
   2c4a8:	000518f4 	.word	0x000518f4
   2c4ac:	0005196c 	.word	0x0005196c
   2c4b0:	2000451c 	.word	0x2000451c
   2c4b4:	2000114c 	.word	0x2000114c

0002c4b8 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   2c4b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2c4bc:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   2c4be:	460c      	mov	r4, r1
   2c4c0:	b109      	cbz	r1, 2c4c6 <settings_parse_and_lookup+0xe>
		*next = NULL;
   2c4c2:	2300      	movs	r3, #0
   2c4c4:	600b      	str	r3, [r1, #0]
{
   2c4c6:	4d1f      	ldr	r5, [pc, #124]	; (2c544 <settings_parse_and_lookup+0x8c>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c4c8:	f8df 907c 	ldr.w	r9, [pc, #124]	; 2c548 <settings_parse_and_lookup+0x90>
{
   2c4cc:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c4ce:	454d      	cmp	r5, r9
   2c4d0:	d30f      	bcc.n	2c4f2 <settings_parse_and_lookup+0x3a>
	return list->head;
   2c4d2:	4b1e      	ldr	r3, [pc, #120]	; (2c54c <settings_parse_and_lookup+0x94>)
   2c4d4:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2c4d6:	b385      	cbz	r5, 2c53a <settings_parse_and_lookup+0x82>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2c4d8:	f855 8c14 	ldr.w	r8, [r5, #-20]
   2c4dc:	aa01      	add	r2, sp, #4
   2c4de:	4641      	mov	r1, r8
   2c4e0:	4638      	mov	r0, r7
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2c4e2:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2c4e4:	f01e f94a 	bl	4a77c <settings_name_steq>
   2c4e8:	b310      	cbz	r0, 2c530 <settings_parse_and_lookup+0x78>
			continue;
		}
		if (!bestmatch) {
   2c4ea:	b9d6      	cbnz	r6, 2c522 <settings_parse_and_lookup+0x6a>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   2c4ec:	bb14      	cbnz	r4, 2c534 <settings_parse_and_lookup+0x7c>
{
   2c4ee:	462e      	mov	r6, r5
   2c4f0:	e01e      	b.n	2c530 <settings_parse_and_lookup+0x78>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2c4f2:	f8d5 8000 	ldr.w	r8, [r5]
   2c4f6:	aa01      	add	r2, sp, #4
   2c4f8:	4641      	mov	r1, r8
   2c4fa:	4638      	mov	r0, r7
   2c4fc:	f01e f93e 	bl	4a77c <settings_name_steq>
   2c500:	b150      	cbz	r0, 2c518 <settings_parse_and_lookup+0x60>
		if (!bestmatch) {
   2c502:	b916      	cbnz	r6, 2c50a <settings_parse_and_lookup+0x52>
			if (next) {
   2c504:	b954      	cbnz	r4, 2c51c <settings_parse_and_lookup+0x64>
{
   2c506:	462e      	mov	r6, r5
   2c508:	e006      	b.n	2c518 <settings_parse_and_lookup+0x60>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   2c50a:	6831      	ldr	r1, [r6, #0]
   2c50c:	2200      	movs	r2, #0
   2c50e:	4640      	mov	r0, r8
   2c510:	f01e f934 	bl	4a77c <settings_name_steq>
   2c514:	2800      	cmp	r0, #0
   2c516:	d1f5      	bne.n	2c504 <settings_parse_and_lookup+0x4c>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c518:	3514      	adds	r5, #20
   2c51a:	e7d8      	b.n	2c4ce <settings_parse_and_lookup+0x16>
				*next = tmpnext;
   2c51c:	9b01      	ldr	r3, [sp, #4]
   2c51e:	6023      	str	r3, [r4, #0]
   2c520:	e7f1      	b.n	2c506 <settings_parse_and_lookup+0x4e>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   2c522:	6831      	ldr	r1, [r6, #0]
   2c524:	2200      	movs	r2, #0
   2c526:	4640      	mov	r0, r8
   2c528:	f01e f928 	bl	4a77c <settings_name_steq>
   2c52c:	2800      	cmp	r0, #0
   2c52e:	d1dd      	bne.n	2c4ec <settings_parse_and_lookup+0x34>
	return node->next;
   2c530:	696d      	ldr	r5, [r5, #20]
   2c532:	e7d0      	b.n	2c4d6 <settings_parse_and_lookup+0x1e>
				*next = tmpnext;
   2c534:	9b01      	ldr	r3, [sp, #4]
   2c536:	6023      	str	r3, [r4, #0]
   2c538:	e7d9      	b.n	2c4ee <settings_parse_and_lookup+0x36>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   2c53a:	4630      	mov	r0, r6
   2c53c:	b003      	add	sp, #12
   2c53e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2c542:	bf00      	nop
   2c544:	000518f4 	.word	0x000518f4
   2c548:	0005196c 	.word	0x0005196c
   2c54c:	2000451c 	.word	0x2000451c

0002c550 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   2c550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c552:	4c18      	ldr	r4, [pc, #96]	; (2c5b4 <settings_commit_subtree+0x64>)
   2c554:	4f18      	ldr	r7, [pc, #96]	; (2c5b8 <settings_commit_subtree+0x68>)
{
   2c556:	4606      	mov	r6, r0
	rc = 0;
   2c558:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c55a:	42bc      	cmp	r4, r7
   2c55c:	d308      	bcc.n	2c570 <settings_commit_subtree+0x20>
	return list->head;
   2c55e:	4b17      	ldr	r3, [pc, #92]	; (2c5bc <settings_commit_subtree+0x6c>)
   2c560:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2c562:	b32c      	cbz	r4, 2c5b0 <settings_commit_subtree+0x60>
   2c564:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2c566:	b9b6      	cbnz	r6, 2c596 <settings_commit_subtree+0x46>
			continue;
		}
		if (ch->h_commit) {
   2c568:	68e3      	ldr	r3, [r4, #12]
   2c56a:	b9e3      	cbnz	r3, 2c5a6 <settings_commit_subtree+0x56>
	return node->next;
   2c56c:	6964      	ldr	r4, [r4, #20]
   2c56e:	e7f8      	b.n	2c562 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2c570:	b92e      	cbnz	r6, 2c57e <settings_commit_subtree+0x2e>
		if (ch->h_commit) {
   2c572:	68e3      	ldr	r3, [r4, #12]
   2c574:	b95b      	cbnz	r3, 2c58e <settings_commit_subtree+0x3e>
{
   2c576:	4628      	mov	r0, r5
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c578:	3414      	adds	r4, #20
   2c57a:	4605      	mov	r5, r0
   2c57c:	e7ed      	b.n	2c55a <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2c57e:	6820      	ldr	r0, [r4, #0]
   2c580:	2200      	movs	r2, #0
   2c582:	4631      	mov	r1, r6
   2c584:	f01e f8fa 	bl	4a77c <settings_name_steq>
   2c588:	2800      	cmp	r0, #0
   2c58a:	d1f2      	bne.n	2c572 <settings_commit_subtree+0x22>
   2c58c:	e7f3      	b.n	2c576 <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
   2c58e:	4798      	blx	r3
			if (!rc) {
   2c590:	2d00      	cmp	r5, #0
   2c592:	d1f0      	bne.n	2c576 <settings_commit_subtree+0x26>
   2c594:	e7f0      	b.n	2c578 <settings_commit_subtree+0x28>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2c596:	6820      	ldr	r0, [r4, #0]
   2c598:	2200      	movs	r2, #0
   2c59a:	4631      	mov	r1, r6
   2c59c:	f01e f8ee 	bl	4a77c <settings_name_steq>
   2c5a0:	2800      	cmp	r0, #0
   2c5a2:	d1e1      	bne.n	2c568 <settings_commit_subtree+0x18>
   2c5a4:	e7e2      	b.n	2c56c <settings_commit_subtree+0x1c>
			rc2 = ch->h_commit();
   2c5a6:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   2c5a8:	2d00      	cmp	r5, #0
   2c5aa:	bf08      	it	eq
   2c5ac:	4605      	moveq	r5, r0
   2c5ae:	e7dd      	b.n	2c56c <settings_commit_subtree+0x1c>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   2c5b0:	4628      	mov	r0, r5
   2c5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c5b4:	000518f4 	.word	0x000518f4
   2c5b8:	0005196c 	.word	0x0005196c
   2c5bc:	2000451c 	.word	0x2000451c

0002c5c0 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   2c5c0:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   2c5c2:	4c07      	ldr	r4, [pc, #28]	; (2c5e0 <settings_subsys_init+0x20>)
   2c5c4:	7823      	ldrb	r3, [r4, #0]
   2c5c6:	b10b      	cbz	r3, 2c5cc <settings_subsys_init+0xc>
		return 0;
   2c5c8:	2000      	movs	r0, #0
	if (!err) {
		settings_subsys_initialized = true;
	}

	return err;
}
   2c5ca:	bd10      	pop	{r4, pc}
	settings_init();
   2c5cc:	f7ff ff2c 	bl	2c428 <settings_init>
	err = settings_backend_init(); /* func rises kernel panic once error */
   2c5d0:	f000 f866 	bl	2c6a0 <settings_backend_init>
	if (!err) {
   2c5d4:	2800      	cmp	r0, #0
   2c5d6:	d1f8      	bne.n	2c5ca <settings_subsys_init+0xa>
		settings_subsys_initialized = true;
   2c5d8:	2301      	movs	r3, #1
   2c5da:	7023      	strb	r3, [r4, #0]
   2c5dc:	e7f4      	b.n	2c5c8 <settings_subsys_init+0x8>
   2c5de:	bf00      	nop
   2c5e0:	20007373 	.word	0x20007373

0002c5e4 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   2c5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   2c5e8:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   2c5ea:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 2c69c <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   2c5ee:	3401      	adds	r4, #1
{
   2c5f0:	b098      	sub	sp, #96	; 0x60
   2c5f2:	4680      	mov	r8, r0
   2c5f4:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   2c5f6:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   2c5f8:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   2c5fc:	1e65      	subs	r5, r4, #1
   2c5fe:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   2c600:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2c604:	d047      	beq.n	2c696 <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   2c606:	234a      	movs	r3, #74	; 0x4a
   2c608:	aa05      	add	r2, sp, #20
   2c60a:	4629      	mov	r1, r5
   2c60c:	4630      	mov	r0, r6
   2c60e:	f01e f841 	bl	4a694 <nvs_read>
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   2c612:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   2c616:	343f      	adds	r4, #63	; 0x3f
   2c618:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   2c61a:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   2c61c:	4621      	mov	r1, r4
   2c61e:	2301      	movs	r3, #1
   2c620:	f10d 020b 	add.w	r2, sp, #11
   2c624:	4630      	mov	r0, r6
   2c626:	f01e f835 	bl	4a694 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   2c62a:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   2c62c:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   2c62e:	dc03      	bgt.n	2c638 <settings_nvs_load+0x54>
   2c630:	2800      	cmp	r0, #0
   2c632:	dc03      	bgt.n	2c63c <settings_nvs_load+0x58>
{
   2c634:	462c      	mov	r4, r5
   2c636:	e7e1      	b.n	2c5fc <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   2c638:	2800      	cmp	r0, #0
   2c63a:	dc16      	bgt.n	2c66a <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   2c63c:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   2c640:	42ab      	cmp	r3, r5
   2c642:	d109      	bne.n	2c658 <settings_nvs_load+0x74>
				cf->last_name_id--;
   2c644:	4642      	mov	r2, r8
   2c646:	1e6b      	subs	r3, r5, #1
   2c648:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2c64c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2c650:	2302      	movs	r3, #2
   2c652:	4630      	mov	r0, r6
   2c654:	f7fe ff20 	bl	2b498 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   2c658:	4629      	mov	r1, r5
   2c65a:	4630      	mov	r0, r6
   2c65c:	f01d ffb6 	bl	4a5cc <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   2c660:	4621      	mov	r1, r4
   2c662:	4630      	mov	r0, r6
   2c664:	f01d ffb2 	bl	4a5cc <nvs_delete>
			continue;
   2c668:	e7e4      	b.n	2c634 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   2c66a:	f107 0360 	add.w	r3, r7, #96	; 0x60
   2c66e:	eb0d 0703 	add.w	r7, sp, r3
   2c672:	2300      	movs	r3, #0
   2c674:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   2c678:	4652      	mov	r2, sl
   2c67a:	f8cd 9000 	str.w	r9, [sp]
   2c67e:	ab03      	add	r3, sp, #12
   2c680:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   2c682:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   2c684:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   2c688:	f01e f8ae 	bl	4a7e8 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   2c68c:	2800      	cmp	r0, #0
   2c68e:	d0d1      	beq.n	2c634 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   2c690:	b018      	add	sp, #96	; 0x60
   2c692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c696:	2000      	movs	r0, #0
	return ret;
   2c698:	e7fa      	b.n	2c690 <settings_nvs_load+0xac>
   2c69a:	bf00      	nop
   2c69c:	0004a853 	.word	0x0004a853

0002c6a0 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   2c6a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   2c6a2:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   2c6a4:	4669      	mov	r1, sp
   2c6a6:	2002      	movs	r0, #2
	uint32_t sector_cnt = 1;
   2c6a8:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   2c6aa:	f7ff fde3 	bl	2c274 <flash_area_open>
	if (rc) {
   2c6ae:	4604      	mov	r4, r0
   2c6b0:	2800      	cmp	r0, #0
   2c6b2:	d134      	bne.n	2c71e <settings_backend_init+0x7e>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   2c6b4:	aa02      	add	r2, sp, #8
   2c6b6:	a901      	add	r1, sp, #4
   2c6b8:	2002      	movs	r0, #2
   2c6ba:	f7ff fdf9 	bl	2c2b0 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   2c6be:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   2c6c2:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   2c6c4:	d02b      	beq.n	2c71e <settings_backend_init+0x7e>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   2c6c6:	b138      	cbz	r0, 2c6d8 <settings_backend_init+0x38>
   2c6c8:	340c      	adds	r4, #12
   2c6ca:	d005      	beq.n	2c6d8 <settings_backend_init+0x38>
		k_panic();
   2c6cc:	4040      	eors	r0, r0
   2c6ce:	f380 8811 	msr	BASEPRI, r0
   2c6d2:	f04f 0004 	mov.w	r0, #4
   2c6d6:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   2c6d8:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   2c6da:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   2c6de:	d223      	bcs.n	2c728 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   2c6e0:	9a00      	ldr	r2, [sp, #0]
   2c6e2:	2300      	movs	r3, #0
   2c6e4:	6894      	ldr	r4, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   2c6e6:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   2c6e8:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   2c6ea:	4284      	cmp	r4, r0
   2c6ec:	d31a      	bcc.n	2c724 <settings_backend_init+0x84>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   2c6ee:	3301      	adds	r3, #1
   2c6f0:	2b08      	cmp	r3, #8
   2c6f2:	d1f9      	bne.n	2c6e8 <settings_backend_init+0x48>
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   2c6f4:	4d0e      	ldr	r5, [pc, #56]	; (2c730 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
   2c6f6:	82eb      	strh	r3, [r5, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   2c6f8:	6853      	ldr	r3, [r2, #4]
   2c6fa:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   2c6fc:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   2c6fe:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   2c700:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   2c702:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   2c704:	f01e f93f 	bl	4a986 <settings_nvs_backend_init>
	if (rc) {
   2c708:	4604      	mov	r4, r0
   2c70a:	b940      	cbnz	r0, 2c71e <settings_backend_init+0x7e>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   2c70c:	4e09      	ldr	r6, [pc, #36]	; (2c734 <settings_backend_init+0x94>)
   2c70e:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   2c710:	4628      	mov	r0, r5
   2c712:	f7ff fe27 	bl	2c364 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   2c716:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   2c718:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   2c71a:	f7ff fe31 	bl	2c380 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   2c71e:	4620      	mov	r0, r4
   2c720:	b004      	add	sp, #16
   2c722:	bd70      	pop	{r4, r5, r6, pc}
   2c724:	b29b      	uxth	r3, r3
   2c726:	e7e5      	b.n	2c6f4 <settings_backend_init+0x54>
		return -EDOM;
   2c728:	f06f 0420 	mvn.w	r4, #32
   2c72c:	e7f7      	b.n	2c71e <settings_backend_init+0x7e>
   2c72e:	bf00      	nop
   2c730:	20004524 	.word	0x20004524
   2c734:	20000750 	.word	0x20000750

0002c738 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   2c738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c73c:	4605      	mov	r5, r0
	__asm__ volatile(
   2c73e:	f04f 0320 	mov.w	r3, #32
   2c742:	f3ef 8611 	mrs	r6, BASEPRI
   2c746:	f383 8812 	msr	BASEPRI_MAX, r3
   2c74a:	f3bf 8f6f 	isb	sy
	return list->head;
   2c74e:	4b0e      	ldr	r3, [pc, #56]	; (2c788 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   2c750:	4f0e      	ldr	r7, [pc, #56]	; (2c78c <pm_state_notify+0x54>)
   2c752:	681c      	ldr	r4, [r3, #0]
   2c754:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2c790 <pm_state_notify+0x58>
   2c758:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   2c75c:	b92c      	cbnz	r4, 2c76a <pm_state_notify+0x32>
	__asm__ volatile(
   2c75e:	f386 8811 	msr	BASEPRI, r6
   2c762:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   2c766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   2c76a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   2c76e:	2d00      	cmp	r5, #0
   2c770:	bf18      	it	ne
   2c772:	4613      	movne	r3, r2
		if (callback) {
   2c774:	b12b      	cbz	r3, 2c782 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   2c776:	f898 2014 	ldrb.w	r2, [r8, #20]
   2c77a:	fb09 f202 	mul.w	r2, r9, r2
   2c77e:	5cb8      	ldrb	r0, [r7, r2]
   2c780:	4798      	blx	r3
	return node->next;
   2c782:	6824      	ldr	r4, [r4, #0]
   2c784:	e7ea      	b.n	2c75c <pm_state_notify+0x24>
   2c786:	bf00      	nop
   2c788:	20004574 	.word	0x20004574
   2c78c:	20004568 	.word	0x20004568
   2c790:	200071d4 	.word	0x200071d4

0002c794 <atomic_clear_bit.constprop.0>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c794:	4a0a      	ldr	r2, [pc, #40]	; (2c7c0 <atomic_clear_bit.constprop.0+0x2c>)
   2c796:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c79a:	0943      	lsrs	r3, r0, #5
   2c79c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c7a0:	f000 001f 	and.w	r0, r0, #31
   2c7a4:	2301      	movs	r3, #1
   2c7a6:	4083      	lsls	r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c7a8:	43db      	mvns	r3, r3
   2c7aa:	e852 0f00 	ldrex	r0, [r2]
   2c7ae:	4018      	ands	r0, r3
   2c7b0:	e842 0100 	strex	r1, r0, [r2]
   2c7b4:	2900      	cmp	r1, #0
   2c7b6:	d1f8      	bne.n	2c7aa <atomic_clear_bit.constprop.0+0x16>
   2c7b8:	f3bf 8f5b 	dmb	ish
}
   2c7bc:	4770      	bx	lr
   2c7be:	bf00      	nop
   2c7c0:	20004564 	.word	0x20004564

0002c7c4 <pm_system_resume>:

void pm_system_resume(void)
{
   2c7c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
   2c7c6:	4b1c      	ldr	r3, [pc, #112]	; (2c838 <pm_system_resume+0x74>)
   2c7c8:	7d1c      	ldrb	r4, [r3, #20]
   2c7ca:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c7ce:	f004 031f 	and.w	r3, r4, #31
   2c7d2:	2201      	movs	r2, #1
   2c7d4:	409a      	lsls	r2, r3
   2c7d6:	4b19      	ldr	r3, [pc, #100]	; (2c83c <pm_system_resume+0x78>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c7d8:	0961      	lsrs	r1, r4, #5
   2c7da:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   2c7de:	43d0      	mvns	r0, r2
   2c7e0:	e853 1f00 	ldrex	r1, [r3]
   2c7e4:	ea01 0500 	and.w	r5, r1, r0
   2c7e8:	e843 5600 	strex	r6, r5, [r3]
   2c7ec:	2e00      	cmp	r6, #0
   2c7ee:	d1f7      	bne.n	2c7e0 <pm_system_resume+0x1c>
   2c7f0:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   2c7f4:	420a      	tst	r2, r1
   2c7f6:	d017      	beq.n	2c828 <pm_system_resume+0x64>
		exit_pos_ops(z_cpus_pm_state[id]);
   2c7f8:	4d11      	ldr	r5, [pc, #68]	; (2c840 <pm_system_resume+0x7c>)
   2c7fa:	220c      	movs	r2, #12
   2c7fc:	fb02 5204 	mla	r2, r2, r4, r5
   2c800:	ca07      	ldmia	r2, {r0, r1, r2}
   2c802:	ab01      	add	r3, sp, #4
   2c804:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   2c808:	4a0e      	ldr	r2, [pc, #56]	; (2c844 <pm_system_resume+0x80>)
   2c80a:	b17a      	cbz	r2, 2c82c <pm_system_resume+0x68>
		pm_power_state_exit_post_ops(info);
   2c80c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2c810:	f01f fadd 	bl	4bdce <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   2c814:	2000      	movs	r0, #0
   2c816:	f7ff ff8f 	bl	2c738 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   2c81a:	230c      	movs	r3, #12
   2c81c:	435c      	muls	r4, r3
   2c81e:	192a      	adds	r2, r5, r4
   2c820:	2300      	movs	r3, #0
   2c822:	512b      	str	r3, [r5, r4]
   2c824:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   2c828:	b004      	add	sp, #16
   2c82a:	bd70      	pop	{r4, r5, r6, pc}
   2c82c:	f382 8811 	msr	BASEPRI, r2
   2c830:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   2c834:	e7ee      	b.n	2c814 <pm_system_resume+0x50>
   2c836:	bf00      	nop
   2c838:	200071d4 	.word	0x200071d4
   2c83c:	2000457c 	.word	0x2000457c
   2c840:	20004568 	.word	0x20004568
   2c844:	0004bdcf 	.word	0x0004bdcf

0002c848 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   2c848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   2c84c:	4b35      	ldr	r3, [pc, #212]	; (2c924 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c84e:	4a36      	ldr	r2, [pc, #216]	; (2c928 <pm_system_suspend+0xe0>)
   2c850:	7d1c      	ldrb	r4, [r3, #20]
   2c852:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2c856:	0963      	lsrs	r3, r4, #5
   2c858:	ea4f 0883 	mov.w	r8, r3, lsl #2
   2c85c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2c860:	4d32      	ldr	r5, [pc, #200]	; (2c92c <pm_system_suspend+0xe4>)
   2c862:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c866:	f004 091f 	and.w	r9, r4, #31
   2c86a:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   2c86e:	f013 0f01 	tst.w	r3, #1
{
   2c872:	b085      	sub	sp, #20
   2c874:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   2c876:	d10a      	bne.n	2c88e <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   2c878:	4601      	mov	r1, r0
   2c87a:	4620      	mov	r0, r4
   2c87c:	f000 f876 	bl	2c96c <pm_policy_next_state>
		if (info != NULL) {
   2c880:	b128      	cbz	r0, 2c88e <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
   2c882:	c807      	ldmia	r0, {r0, r1, r2}
   2c884:	230c      	movs	r3, #12
   2c886:	fb03 5304 	mla	r3, r3, r4, r5
   2c88a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   2c88e:	230c      	movs	r3, #12
   2c890:	4363      	muls	r3, r4
   2c892:	18ea      	adds	r2, r5, r3
   2c894:	5cee      	ldrb	r6, [r5, r3]
   2c896:	b936      	cbnz	r6, 2c8a6 <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   2c898:	4620      	mov	r0, r4
   2c89a:	f7ff ff7b 	bl	2c794 <atomic_clear_bit.constprop.0>
		ret = false;
   2c89e:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   2c8a0:	b005      	add	sp, #20
   2c8a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
   2c8a6:	1c7b      	adds	r3, r7, #1
   2c8a8:	d010      	beq.n	2c8cc <pm_system_suspend+0x84>
			return (uint32_t)((t * to_hz + off) / from_hz);
   2c8aa:	f8d2 c008 	ldr.w	ip, [r2, #8]
   2c8ae:	4e20      	ldr	r6, [pc, #128]	; (2c930 <pm_system_suspend+0xe8>)
   2c8b0:	4a20      	ldr	r2, [pc, #128]	; (2c934 <pm_system_suspend+0xec>)
   2c8b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2c8b6:	2100      	movs	r1, #0
   2c8b8:	fbec 6100 	umlal	r6, r1, ip, r0
   2c8bc:	2300      	movs	r3, #0
   2c8be:	4630      	mov	r0, r6
   2c8c0:	f7f9 fc1e 	bl	26100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   2c8c4:	2101      	movs	r1, #1
   2c8c6:	1a38      	subs	r0, r7, r0
   2c8c8:	f024 fbbe 	bl	51048 <z_set_timeout_expiry>
	k_sched_lock();
   2c8cc:	f01c f866 	bl	4899c <k_sched_lock>
	pm_state_notify(true);
   2c8d0:	2001      	movs	r0, #1
   2c8d2:	f7ff ff31 	bl	2c738 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c8d6:	f3bf 8f5b 	dmb	ish
   2c8da:	4b17      	ldr	r3, [pc, #92]	; (2c938 <pm_system_suspend+0xf0>)
   2c8dc:	4498      	add	r8, r3
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c8de:	2301      	movs	r3, #1
   2c8e0:	fa03 f309 	lsl.w	r3, r3, r9
   2c8e4:	e858 2f00 	ldrex	r2, [r8]
   2c8e8:	431a      	orrs	r2, r3
   2c8ea:	e848 2100 	strex	r1, r2, [r8]
   2c8ee:	2900      	cmp	r1, #0
   2c8f0:	d1f8      	bne.n	2c8e4 <pm_system_suspend+0x9c>
   2c8f2:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
   2c8f6:	230c      	movs	r3, #12
   2c8f8:	fb03 5504 	mla	r5, r3, r4, r5
   2c8fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   2c900:	ab01      	add	r3, sp, #4
   2c902:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   2c906:	4a0d      	ldr	r2, [pc, #52]	; (2c93c <pm_system_suspend+0xf4>)
   2c908:	b11a      	cbz	r2, 2c912 <pm_system_suspend+0xca>
		pm_power_state_set(info);
   2c90a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2c90e:	f01f fa4b 	bl	4bda8 <pm_power_state_set>
	pm_system_resume();
   2c912:	f7ff ff57 	bl	2c7c4 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   2c916:	4620      	mov	r0, r4
   2c918:	f7ff ff3c 	bl	2c794 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
   2c91c:	f01c f852 	bl	489c4 <k_sched_unlock>
	bool ret = true;
   2c920:	2001      	movs	r0, #1
   2c922:	e7bd      	b.n	2c8a0 <pm_system_suspend+0x58>
   2c924:	200071d4 	.word	0x200071d4
   2c928:	20004564 	.word	0x20004564
   2c92c:	20004568 	.word	0x20004568
   2c930:	000f423f 	.word	0x000f423f
   2c934:	000f4240 	.word	0x000f4240
   2c938:	2000457c 	.word	0x2000457c
   2c93c:	0004bda9 	.word	0x0004bda9

0002c940 <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c940:	4b05      	ldr	r3, [pc, #20]	; (2c958 <pm_constraint_get+0x18>)
   2c942:	f3bf 8f5b 	dmb	ish
   2c946:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2c94a:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
   2c94e:	fab0 f080 	clz	r0, r0
   2c952:	0940      	lsrs	r0, r0, #5
   2c954:	4770      	bx	lr
   2c956:	bf00      	nop
   2c958:	20004580 	.word	0x20004580

0002c95c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   2c95c:	b908      	cbnz	r0, 2c962 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   2c95e:	4b02      	ldr	r3, [pc, #8]	; (2c968 <pm_state_cpu_get_all+0xc>)
   2c960:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   2c962:	2000      	movs	r0, #0
   2c964:	4770      	bx	lr
   2c966:	bf00      	nop
   2c968:	00052600 	.word	0x00052600

0002c96c <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   2c96c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c970:	460f      	mov	r7, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   2c972:	a901      	add	r1, sp, #4
   2c974:	f7ff fff2 	bl	2c95c <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   2c978:	1e44      	subs	r4, r0, #1
   2c97a:	b224      	sxth	r4, r4
   2c97c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2c980:	f8df 9060 	ldr.w	r9, [pc, #96]	; 2c9e4 <pm_policy_next_state+0x78>
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   2c984:	4605      	mov	r5, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   2c986:	00a4      	lsls	r4, r4, #2
   2c988:	f44f 4800 	mov.w	r8, #32768	; 0x8000
   2c98c:	b925      	cbnz	r5, 2c998 <pm_policy_next_state+0x2c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   2c98e:	462e      	mov	r6, r5
}
   2c990:	4630      	mov	r0, r6
   2c992:	b003      	add	sp, #12
   2c994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   2c998:	9b01      	ldr	r3, [sp, #4]
		if (!pm_constraint_get(state->state)) {
   2c99a:	5d18      	ldrb	r0, [r3, r4]
		const struct pm_state_info *state = &cpu_states[i];
   2c99c:	191e      	adds	r6, r3, r4
		if (!pm_constraint_get(state->state)) {
   2c99e:	f7ff ffcf 	bl	2c940 <pm_constraint_get>
   2c9a2:	b1d8      	cbz	r0, 2c9dc <pm_policy_next_state+0x70>
   2c9a4:	6870      	ldr	r0, [r6, #4]
   2c9a6:	4a10      	ldr	r2, [pc, #64]	; (2c9e8 <pm_policy_next_state+0x7c>)
   2c9a8:	f04f 0a00 	mov.w	sl, #0
   2c9ac:	46cc      	mov	ip, r9
   2c9ae:	4651      	mov	r1, sl
   2c9b0:	fbe0 c108 	umlal	ip, r1, r0, r8
   2c9b4:	2300      	movs	r3, #0
   2c9b6:	4660      	mov	r0, ip
   2c9b8:	f7f9 fba2 	bl	26100 <__aeabi_uldivmod>
   2c9bc:	4683      	mov	fp, r0
   2c9be:	68b0      	ldr	r0, [r6, #8]
   2c9c0:	4a09      	ldr	r2, [pc, #36]	; (2c9e8 <pm_policy_next_state+0x7c>)
   2c9c2:	46cc      	mov	ip, r9
   2c9c4:	4651      	mov	r1, sl
   2c9c6:	fbe0 c108 	umlal	ip, r1, r0, r8
   2c9ca:	2300      	movs	r3, #0
   2c9cc:	4660      	mov	r0, ip
   2c9ce:	f7f9 fb97 	bl	26100 <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
   2c9d2:	1c7b      	adds	r3, r7, #1
   2c9d4:	d0dc      	beq.n	2c990 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
   2c9d6:	4458      	add	r0, fp
		if ((ticks == K_TICKS_FOREVER) ||
   2c9d8:	42b8      	cmp	r0, r7
   2c9da:	d9d9      	bls.n	2c990 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   2c9dc:	3d01      	subs	r5, #1
   2c9de:	b2ad      	uxth	r5, r5
   2c9e0:	3c0c      	subs	r4, #12
   2c9e2:	e7d3      	b.n	2c98c <pm_policy_next_state+0x20>
   2c9e4:	000f423f 	.word	0x000f423f
   2c9e8:	000f4240 	.word	0x000f4240

0002c9ec <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   2c9ec:	4b01      	ldr	r3, [pc, #4]	; (2c9f4 <uECC_get_rng+0x8>)
   2c9ee:	6818      	ldr	r0, [r3, #0]
   2c9f0:	4770      	bx	lr
   2c9f2:	bf00      	nop
   2c9f4:	20000760 	.word	0x20000760

0002c9f8 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   2c9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   2c9fa:	2208      	movs	r2, #8
{
   2c9fc:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   2c9fe:	f01e f994 	bl	4ad2a <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   2ca02:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   2ca04:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   2ca06:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   2ca08:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   2ca0a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   2ca0c:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   2ca0e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   2ca10:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   2ca12:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   2ca14:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2ca16:	4613      	mov	r3, r2
   2ca18:	466a      	mov	r2, sp
{
   2ca1a:	460c      	mov	r4, r1
   2ca1c:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
   2ca1e:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2ca20:	4611      	mov	r1, r2
   2ca22:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
   2ca24:	e9cd 7701 	strd	r7, r7, [sp, #4]
   2ca28:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2ca2a:	f01e f88c 	bl	4ab46 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2ca2e:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2ca30:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2ca32:	4630      	mov	r0, r6
   2ca34:	f01e f887 	bl	4ab46 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   2ca38:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2ca3a:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
   2ca3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2ca3e:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
   2ca40:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   2ca42:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
   2ca44:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2ca46:	4405      	add	r5, r0
	tmp[7] = 0;
   2ca48:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2ca4c:	4610      	mov	r0, r2
   2ca4e:	4611      	mov	r1, r2
   2ca50:	f01e f879 	bl	4ab46 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2ca54:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2ca56:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2ca58:	4630      	mov	r0, r6
   2ca5a:	f01e f874 	bl	4ab46 <uECC_vli_add>
   2ca5e:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
   2ca60:	6a20      	ldr	r0, [r4, #32]
   2ca62:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
   2ca64:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2ca66:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
   2ca68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2ca6a:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   2ca6c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2ca6e:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
   2ca70:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   2ca72:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2ca74:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   2ca76:	e9cd 7704 	strd	r7, r7, [sp, #16]
   2ca7a:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2ca7c:	f01e f863 	bl	4ab46 <uECC_vli_add>
   2ca80:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
   2ca82:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2ca84:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
   2ca86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   2ca88:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
   2ca8c:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
   2ca8e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2ca90:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
   2ca92:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
   2ca96:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
   2ca98:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   2ca9c:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
   2ca9e:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
   2caa2:	6a20      	ldr	r0, [r4, #32]
   2caa4:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2caa6:	4630      	mov	r0, r6
   2caa8:	f01e f84d 	bl	4ab46 <uECC_vli_add>
   2caac:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
   2caae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2cab0:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
   2cab2:	6b20      	ldr	r0, [r4, #48]	; 0x30
   2cab4:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
   2cab6:	6b60      	ldr	r0, [r4, #52]	; 0x34
   2cab8:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   2caba:	6a20      	ldr	r0, [r4, #32]
   2cabc:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
   2cabe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2cac0:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2cac2:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   2cac4:	e9cd 7704 	strd	r7, r7, [sp, #16]
   2cac8:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2caca:	f01e f961 	bl	4ad90 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   2cace:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2cad0:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   2cad2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2cad4:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   2cad6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2cad8:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   2cada:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2cadc:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   2cade:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2cae0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   2cae2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2cae4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2cae6:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2cae8:	2308      	movs	r3, #8
   2caea:	4630      	mov	r0, r6
   2caec:	f01e f950 	bl	4ad90 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   2caf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2caf2:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   2caf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2caf6:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   2caf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2cafa:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   2cafc:	6a23      	ldr	r3, [r4, #32]
   2cafe:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   2cb00:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2cb02:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   2cb04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   2cb06:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   2cb0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2cb0c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2cb0e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2cb10:	2308      	movs	r3, #8
   2cb12:	4630      	mov	r0, r6
   2cb14:	f01e f93c 	bl	4ad90 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   2cb18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2cb1a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   2cb1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   2cb1e:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   2cb22:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2cb24:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   2cb26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2cb28:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   2cb2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2cb2c:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
	tmp[7] = product[13];
   2cb2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2cb30:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2cb32:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2cb34:	2308      	movs	r3, #8
   2cb36:	4630      	mov	r0, r6
   2cb38:	f01e f92a 	bl	4ad90 <uECC_vli_sub>

	if (carry < 0) {
   2cb3c:	1a2d      	subs	r5, r5, r0
   2cb3e:	d410      	bmi.n	2cb62 <vli_mmod_fast_secp256r1+0x16a>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   2cb40:	4c0d      	ldr	r4, [pc, #52]	; (2cb78 <vli_mmod_fast_secp256r1+0x180>)
		while (carry || 
   2cb42:	b935      	cbnz	r5, 2cb52 <vli_mmod_fast_secp256r1+0x15a>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   2cb44:	2208      	movs	r2, #8
   2cb46:	4631      	mov	r1, r6
   2cb48:	4620      	mov	r0, r4
   2cb4a:	f01e f8fa 	bl	4ad42 <uECC_vli_cmp_unsafe>
		while (carry || 
   2cb4e:	2801      	cmp	r0, #1
   2cb50:	d00f      	beq.n	2cb72 <vli_mmod_fast_secp256r1+0x17a>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   2cb52:	2308      	movs	r3, #8
   2cb54:	4622      	mov	r2, r4
   2cb56:	4631      	mov	r1, r6
   2cb58:	4630      	mov	r0, r6
   2cb5a:	f01e f919 	bl	4ad90 <uECC_vli_sub>
   2cb5e:	1a2d      	subs	r5, r5, r0
   2cb60:	e7ef      	b.n	2cb42 <vli_mmod_fast_secp256r1+0x14a>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   2cb62:	4a05      	ldr	r2, [pc, #20]	; (2cb78 <vli_mmod_fast_secp256r1+0x180>)
   2cb64:	2308      	movs	r3, #8
   2cb66:	4631      	mov	r1, r6
   2cb68:	4630      	mov	r0, r6
   2cb6a:	f01d ffec 	bl	4ab46 <uECC_vli_add>
		while (carry < 0);
   2cb6e:	182d      	adds	r5, r5, r0
   2cb70:	d4f8      	bmi.n	2cb64 <vli_mmod_fast_secp256r1+0x16c>
		}
	}
}
   2cb72:	b009      	add	sp, #36	; 0x24
   2cb74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2cb76:	bf00      	nop
   2cb78:	00052604 	.word	0x00052604

0002cb7c <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   2cb7c:	4904      	ldr	r1, [pc, #16]	; (2cb90 <sub_bytes+0x14>)
   2cb7e:	1e43      	subs	r3, r0, #1
   2cb80:	300f      	adds	r0, #15
   2cb82:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2cb86:	5c8a      	ldrb	r2, [r1, r2]
   2cb88:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   2cb8a:	4283      	cmp	r3, r0
   2cb8c:	d1f9      	bne.n	2cb82 <sub_bytes+0x6>
	}
}
   2cb8e:	4770      	bx	lr
   2cb90:	000540a6 	.word	0x000540a6

0002cb94 <tc_aes128_set_encrypt_key>:
{
   2cb94:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   2cb96:	4e26      	ldr	r6, [pc, #152]	; (2cc30 <tc_aes128_set_encrypt_key+0x9c>)
{
   2cb98:	4607      	mov	r7, r0
   2cb9a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   2cb9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   2cb9e:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   2cba0:	ad01      	add	r5, sp, #4
   2cba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2cba4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2cba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2cba8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2cbac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   2cbb0:	4638      	mov	r0, r7
   2cbb2:	2f00      	cmp	r7, #0
   2cbb4:	d038      	beq.n	2cc28 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   2cbb6:	2c00      	cmp	r4, #0
   2cbb8:	d038      	beq.n	2cc2c <tc_aes128_set_encrypt_key+0x98>
   2cbba:	1f38      	subs	r0, r7, #4
   2cbbc:	4621      	mov	r1, r4
   2cbbe:	4602      	mov	r2, r0
   2cbc0:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2cbc2:	784b      	ldrb	r3, [r1, #1]
   2cbc4:	780d      	ldrb	r5, [r1, #0]
   2cbc6:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2cbc8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   2cbcc:	78cd      	ldrb	r5, [r1, #3]
   2cbce:	432b      	orrs	r3, r5
   2cbd0:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   2cbd2:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2cbd4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   2cbd8:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2cbda:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   2cbde:	d1f0      	bne.n	2cbc2 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2cbe0:	4c14      	ldr	r4, [pc, #80]	; (2cc34 <tc_aes128_set_encrypt_key+0xa0>)
   2cbe2:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   2cbe4:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   2cbe6:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   2cbe8:	d116      	bne.n	2cc18 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2cbea:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2cbee:	5ca5      	ldrb	r5, [r4, r2]
   2cbf0:	0e1a      	lsrs	r2, r3, #24
   2cbf2:	5ca2      	ldrb	r2, [r4, r2]
   2cbf4:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   2cbf8:	f3c3 2507 	ubfx	r5, r3, #8, #8
   2cbfc:	b2db      	uxtb	r3, r3
   2cbfe:	5d65      	ldrb	r5, [r4, r5]
   2cc00:	5ce3      	ldrb	r3, [r4, r3]
   2cc02:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   2cc06:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   2cc0a:	f021 0303 	bic.w	r3, r1, #3
   2cc0e:	3330      	adds	r3, #48	; 0x30
   2cc10:	446b      	add	r3, sp
   2cc12:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   2cc16:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   2cc18:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   2cc1c:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   2cc1e:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   2cc20:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   2cc22:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   2cc24:	d1de      	bne.n	2cbe4 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   2cc26:	2001      	movs	r0, #1
}
   2cc28:	b00d      	add	sp, #52	; 0x34
   2cc2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2cc2c:	4620      	mov	r0, r4
   2cc2e:	e7fb      	b.n	2cc28 <tc_aes128_set_encrypt_key+0x94>
   2cc30:	00051a88 	.word	0x00051a88
   2cc34:	000540a6 	.word	0x000540a6

0002cc38 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   2cc38:	4901      	ldr	r1, [pc, #4]	; (2cc40 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   2cc3a:	2210      	movs	r2, #16
	str	r2, [r1]
   2cc3c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   2cc3e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   2cc40:	e000ed10 	.word	0xe000ed10

0002cc44 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   2cc44:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   2cc46:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   2cc48:	f380 8811 	msr	BASEPRI, r0
	isb
   2cc4c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   2cc50:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   2cc54:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   2cc56:	b662      	cpsie	i
	isb
   2cc58:	f3bf 8f6f 	isb	sy

	bx	lr
   2cc5c:	4770      	bx	lr
   2cc5e:	bf00      	nop

0002cc60 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   2cc60:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   2cc62:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   2cc64:	f381 8811 	msr	BASEPRI, r1

	wfe
   2cc68:	bf20      	wfe

	msr	BASEPRI, r0
   2cc6a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   2cc6e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   2cc70:	4770      	bx	lr
   2cc72:	bf00      	nop

0002cc74 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   2cc74:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2cc76:	2800      	cmp	r0, #0
   2cc78:	db07      	blt.n	2cc8a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2cc7a:	4a04      	ldr	r2, [pc, #16]	; (2cc8c <arch_irq_enable+0x18>)
   2cc7c:	0941      	lsrs	r1, r0, #5
   2cc7e:	2301      	movs	r3, #1
   2cc80:	f000 001f 	and.w	r0, r0, #31
   2cc84:	4083      	lsls	r3, r0
   2cc86:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   2cc8a:	4770      	bx	lr
   2cc8c:	e000e100 	.word	0xe000e100

0002cc90 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   2cc90:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2cc92:	2800      	cmp	r0, #0
   2cc94:	db0c      	blt.n	2ccb0 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2cc96:	0943      	lsrs	r3, r0, #5
   2cc98:	4906      	ldr	r1, [pc, #24]	; (2ccb4 <arch_irq_disable+0x24>)
   2cc9a:	f000 001f 	and.w	r0, r0, #31
   2cc9e:	3320      	adds	r3, #32
   2cca0:	2201      	movs	r2, #1
   2cca2:	4082      	lsls	r2, r0
   2cca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   2cca8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2ccac:	f3bf 8f6f 	isb	sy
}
   2ccb0:	4770      	bx	lr
   2ccb2:	bf00      	nop
   2ccb4:	e000e100 	.word	0xe000e100

0002ccb8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   2ccb8:	4b05      	ldr	r3, [pc, #20]	; (2ccd0 <arch_irq_is_enabled+0x18>)
   2ccba:	0942      	lsrs	r2, r0, #5
   2ccbc:	f000 001f 	and.w	r0, r0, #31
   2ccc0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   2ccc4:	2301      	movs	r3, #1
   2ccc6:	fa03 f000 	lsl.w	r0, r3, r0
}
   2ccca:	4010      	ands	r0, r2
   2cccc:	4770      	bx	lr
   2ccce:	bf00      	nop
   2ccd0:	e000e100 	.word	0xe000e100

0002ccd4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   2ccd4:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   2ccd6:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2ccd8:	bfa8      	it	ge
   2ccda:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
   2ccde:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2cce2:	bfb8      	it	lt
   2cce4:	4b06      	ldrlt	r3, [pc, #24]	; (2cd00 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2cce6:	ea4f 1141 	mov.w	r1, r1, lsl #5
   2ccea:	bfac      	ite	ge
   2ccec:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2ccf0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2ccf4:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2ccf6:	bfb4      	ite	lt
   2ccf8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2ccfa:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
   2ccfe:	4770      	bx	lr
   2cd00:	e000ed14 	.word	0xe000ed14

0002cd04 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   2cd04:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   2cd06:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   2cd08:	4b04      	ldr	r3, [pc, #16]	; (2cd1c <_arch_isr_direct_pm+0x18>)
   2cd0a:	699a      	ldr	r2, [r3, #24]
   2cd0c:	b11a      	cbz	r2, 2cd16 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   2cd0e:	2200      	movs	r2, #0
   2cd10:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   2cd12:	f023 fe6d 	bl	509f0 <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   2cd16:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   2cd18:	bd08      	pop	{r3, pc}
   2cd1a:	bf00      	nop
   2cd1c:	200071d4 	.word	0x200071d4

0002cd20 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   2cd20:	bf30      	wfi
    b z_SysNmiOnReset
   2cd22:	f7ff bffd 	b.w	2cd20 <z_SysNmiOnReset>
   2cd26:	bf00      	nop

0002cd28 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2cd28:	4a0f      	ldr	r2, [pc, #60]	; (2cd68 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   2cd2a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2cd2c:	4b0f      	ldr	r3, [pc, #60]	; (2cd6c <z_arm_prep_c+0x44>)
   2cd2e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   2cd32:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   2cd34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2cd38:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   2cd3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   2cd40:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   2cd44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
   2cd48:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   2cd4c:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   2cd50:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   2cd54:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   2cd58:	f01a fe9a 	bl	47a90 <z_bss_zero>
	z_data_copy();
   2cd5c:	f01b ff70 	bl	48c40 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   2cd60:	f000 f984 	bl	2d06c <z_arm_interrupt_init>
	z_cstart();
   2cd64:	f01a fe9e 	bl	47aa4 <z_cstart>
   2cd68:	00026000 	.word	0x00026000
   2cd6c:	e000ed00 	.word	0xe000ed00

0002cd70 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   2cd70:	4a09      	ldr	r2, [pc, #36]	; (2cd98 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   2cd72:	490a      	ldr	r1, [pc, #40]	; (2cd9c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   2cd74:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   2cd76:	6809      	ldr	r1, [r1, #0]
   2cd78:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2cd7a:	4909      	ldr	r1, [pc, #36]	; (2cda0 <arch_swap+0x30>)
	_current->arch.basepri = key;
   2cd7c:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2cd7e:	684b      	ldr	r3, [r1, #4]
   2cd80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2cd84:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   2cd86:	2300      	movs	r3, #0
   2cd88:	f383 8811 	msr	BASEPRI, r3
   2cd8c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   2cd90:	6893      	ldr	r3, [r2, #8]
}
   2cd92:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   2cd94:	4770      	bx	lr
   2cd96:	bf00      	nop
   2cd98:	200071d4 	.word	0x200071d4
   2cd9c:	00053c9c 	.word	0x00053c9c
   2cda0:	e000ed00 	.word	0xe000ed00

0002cda4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   2cda4:	490f      	ldr	r1, [pc, #60]	; (2cde4 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   2cda6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   2cda8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   2cdac:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   2cdae:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   2cdb2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2cdb6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   2cdb8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   2cdbc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   2cdc0:	4f09      	ldr	r7, [pc, #36]	; (2cde8 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   2cdc2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   2cdc6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   2cdc8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   2cdca:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   2cdcc:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   2cdce:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   2cdd0:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   2cdd2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   2cdd6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   2cdda:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   2cdde:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   2cde2:	4770      	bx	lr
    ldr r1, =_kernel
   2cde4:	200071d4 	.word	0x200071d4
    ldr v4, =_SCS_ICSR
   2cde8:	e000ed04 	.word	0xe000ed04

0002cdec <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   2cdec:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   2cdf0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   2cdf2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   2cdf6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   2cdfa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   2cdfc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   2ce00:	2902      	cmp	r1, #2
    beq _oops
   2ce02:	d0ff      	beq.n	2ce04 <_oops>

0002ce04 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   2ce04:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   2ce06:	f01e fee7 	bl	4bbd8 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   2ce0a:	bd01      	pop	{r0, pc}

0002ce0c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   2ce0c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   2ce10:	9b00      	ldr	r3, [sp, #0]
   2ce12:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   2ce16:	490a      	ldr	r1, [pc, #40]	; (2ce40 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   2ce18:	9b01      	ldr	r3, [sp, #4]
   2ce1a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   2ce1e:	9b02      	ldr	r3, [sp, #8]
   2ce20:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   2ce24:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   2ce28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   2ce2c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   2ce30:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   2ce34:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   2ce36:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   2ce38:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   2ce3a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   2ce3c:	4770      	bx	lr
   2ce3e:	bf00      	nop
   2ce40:	00049d6b 	.word	0x00049d6b

0002ce44 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   2ce44:	4b07      	ldr	r3, [pc, #28]	; (2ce64 <arch_switch_to_main_thread+0x20>)
   2ce46:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   2ce48:	4610      	mov	r0, r2
   2ce4a:	f381 8809 	msr	PSP, r1
   2ce4e:	2100      	movs	r1, #0
   2ce50:	b663      	cpsie	if
   2ce52:	f381 8811 	msr	BASEPRI, r1
   2ce56:	f3bf 8f6f 	isb	sy
   2ce5a:	2200      	movs	r2, #0
   2ce5c:	2300      	movs	r3, #0
   2ce5e:	f01c ff84 	bl	49d6a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   2ce62:	bf00      	nop
   2ce64:	200071d4 	.word	0x200071d4

0002ce68 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   2ce68:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   2ce6a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   2ce6c:	4a0b      	ldr	r2, [pc, #44]	; (2ce9c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   2ce6e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   2ce70:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   2ce72:	bf1e      	ittt	ne
	movne	r1, #0
   2ce74:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   2ce76:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   2ce78:	f023 fdba 	blne	509f0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   2ce7c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   2ce7e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   2ce82:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   2ce86:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   2ce8a:	4905      	ldr	r1, [pc, #20]	; (2cea0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   2ce8c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   2ce8e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   2ce90:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   2ce92:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   2ce96:	4903      	ldr	r1, [pc, #12]	; (2cea4 <_isr_wrapper+0x3c>)
	bx r1
   2ce98:	4708      	bx	r1
   2ce9a:	0000      	.short	0x0000
	ldr r2, =_kernel
   2ce9c:	200071d4 	.word	0x200071d4
	ldr r1, =_sw_isr_table
   2cea0:	00051728 	.word	0x00051728
	ldr r1, =z_arm_int_exit
   2cea4:	0002cea9 	.word	0x0002cea9

0002cea8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   2cea8:	4b04      	ldr	r3, [pc, #16]	; (2cebc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   2ceaa:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   2ceac:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   2ceae:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   2ceb0:	d003      	beq.n	2ceba <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   2ceb2:	4903      	ldr	r1, [pc, #12]	; (2cec0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   2ceb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   2ceb8:	600a      	str	r2, [r1, #0]

0002ceba <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   2ceba:	4770      	bx	lr
	ldr r3, =_kernel
   2cebc:	200071d4 	.word	0x200071d4
	ldr r1, =_SCS_ICSR
   2cec0:	e000ed04 	.word	0xe000ed04

0002cec4 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   2cec4:	4b0d      	ldr	r3, [pc, #52]	; (2cefc <bus_fault.constprop.0+0x38>)
   2cec6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   2cec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   2ceca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2cecc:	0592      	lsls	r2, r2, #22
   2cece:	d508      	bpl.n	2cee2 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   2ced0:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   2ced2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2ced4:	0412      	lsls	r2, r2, #16
   2ced6:	d504      	bpl.n	2cee2 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   2ced8:	b118      	cbz	r0, 2cee2 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   2ceda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2cedc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   2cee0:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   2cee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   2cee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2cee6:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2cee8:	4a04      	ldr	r2, [pc, #16]	; (2cefc <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   2ceea:	bf58      	it	pl
   2ceec:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2ceee:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   2cef0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2cef2:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   2cef6:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2cef8:	7008      	strb	r0, [r1, #0]

	return reason;
}
   2cefa:	4770      	bx	lr
   2cefc:	e000ed00 	.word	0xe000ed00

0002cf00 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   2cf00:	4b0e      	ldr	r3, [pc, #56]	; (2cf3c <mem_manage_fault.constprop.0+0x3c>)
   2cf02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   2cf04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   2cf06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2cf08:	0792      	lsls	r2, r2, #30
   2cf0a:	d508      	bpl.n	2cf1e <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
   2cf0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   2cf0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2cf10:	0612      	lsls	r2, r2, #24
   2cf12:	d504      	bpl.n	2cf1e <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
   2cf14:	b118      	cbz	r0, 2cf1e <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   2cf16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2cf18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   2cf1c:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   2cf1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2cf20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   2cf22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2cf24:	06d2      	lsls	r2, r2, #27
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2cf26:	4a05      	ldr	r2, [pc, #20]	; (2cf3c <mem_manage_fault.constprop.0+0x3c>)
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   2cf28:	bf58      	it	pl
   2cf2a:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2cf2c:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2cf2e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2cf30:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   2cf34:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2cf36:	7008      	strb	r0, [r1, #0]
}
   2cf38:	4770      	bx	lr
   2cf3a:	bf00      	nop
   2cf3c:	e000ed00 	.word	0xe000ed00

0002cf40 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   2cf40:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2cf42:	4b40      	ldr	r3, [pc, #256]	; (2d044 <z_arm_fault+0x104>)
   2cf44:	685b      	ldr	r3, [r3, #4]
{
   2cf46:	b08a      	sub	sp, #40	; 0x28
   2cf48:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2cf4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2cf4e:	2500      	movs	r5, #0
   2cf50:	f385 8811 	msr	BASEPRI, r5
   2cf54:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   2cf58:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
   2cf5c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
   2cf60:	d111      	bne.n	2cf86 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   2cf62:	f002 000c 	and.w	r0, r2, #12
   2cf66:	2808      	cmp	r0, #8
   2cf68:	d00d      	beq.n	2cf86 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   2cf6a:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   2cf6c:	bf4c      	ite	mi
   2cf6e:	460e      	movmi	r6, r1
			*nested_exc = true;
   2cf70:	2501      	movpl	r5, #1
	*recoverable = false;
   2cf72:	2200      	movs	r2, #0
	switch (fault) {
   2cf74:	3b03      	subs	r3, #3
	*recoverable = false;
   2cf76:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   2cf7a:	2b03      	cmp	r3, #3
   2cf7c:	d83a      	bhi.n	2cff4 <z_arm_fault+0xb4>
   2cf7e:	e8df f003 	tbb	[pc, r3]
   2cf82:	5204      	.short	0x5204
   2cf84:	5a56      	.short	0x5a56
		return NULL;
   2cf86:	462e      	mov	r6, r5
   2cf88:	e7f3      	b.n	2cf72 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2cf8a:	4b2e      	ldr	r3, [pc, #184]	; (2d044 <z_arm_fault+0x104>)
   2cf8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2cf8e:	0791      	lsls	r1, r2, #30
   2cf90:	d430      	bmi.n	2cff4 <z_arm_fault+0xb4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   2cf92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2cf94:	2a00      	cmp	r2, #0
   2cf96:	db2d      	blt.n	2cff4 <z_arm_fault+0xb4>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   2cf98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2cf9a:	0052      	lsls	r2, r2, #1
   2cf9c:	d52a      	bpl.n	2cff4 <z_arm_fault+0xb4>
	uint16_t fault_insn = *(ret_addr - 1);
   2cf9e:	69b2      	ldr	r2, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   2cfa0:	f832 1c02 	ldrh.w	r1, [r2, #-2]
   2cfa4:	f64d 7202 	movw	r2, #57090	; 0xdf02
   2cfa8:	4291      	cmp	r1, r2
   2cfaa:	d009      	beq.n	2cfc0 <z_arm_fault+0x80>
		} else if (SCB_MMFSR != 0) {
   2cfac:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   2cfb0:	b142      	cbz	r2, 2cfc4 <z_arm_fault+0x84>
			reason = mem_manage_fault(esf, 1, recoverable);
   2cfb2:	f10d 0107 	add.w	r1, sp, #7
   2cfb6:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   2cfb8:	f7ff ffa2 	bl	2cf00 <mem_manage_fault.constprop.0>
   2cfbc:	4604      	mov	r4, r0
		break;
   2cfbe:	e01a      	b.n	2cff6 <z_arm_fault+0xb6>
			reason = esf->basic.r0;
   2cfc0:	6834      	ldr	r4, [r6, #0]
   2cfc2:	e018      	b.n	2cff6 <z_arm_fault+0xb6>
		} else if (SCB_BFSR != 0) {
   2cfc4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   2cfc8:	b12a      	cbz	r2, 2cfd6 <z_arm_fault+0x96>
			reason = bus_fault(esf, 1, recoverable);
   2cfca:	f10d 0107 	add.w	r1, sp, #7
   2cfce:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   2cfd0:	f7ff ff78 	bl	2cec4 <bus_fault.constprop.0>
   2cfd4:	e7f2      	b.n	2cfbc <z_arm_fault+0x7c>
		} else if (SCB_UFSR != 0) {
   2cfd6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
   2cfd8:	b292      	uxth	r2, r2
   2cfda:	b15a      	cbz	r2, 2cff4 <z_arm_fault+0xb4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2cfdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   2cfde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   2cfe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   2cfe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   2cfe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   2cfe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   2cfe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2cfea:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   2cfee:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   2cff2:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
   2cff4:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   2cff6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2cffa:	b993      	cbnz	r3, 2d022 <z_arm_fault+0xe2>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   2cffc:	2220      	movs	r2, #32
   2cffe:	4631      	mov	r1, r6
   2d000:	a802      	add	r0, sp, #8
   2d002:	f01e feb0 	bl	4bd66 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   2d006:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d008:	b1bd      	cbz	r5, 2d03a <z_arm_fault+0xfa>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   2d00a:	f3c3 0208 	ubfx	r2, r3, #0, #9
   2d00e:	b922      	cbnz	r2, 2d01a <z_arm_fault+0xda>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   2d010:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   2d014:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2d018:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   2d01a:	a902      	add	r1, sp, #8
   2d01c:	4620      	mov	r0, r4
   2d01e:	f01e fdd9 	bl	4bbd4 <z_arm_fatal_error>
}
   2d022:	b00a      	add	sp, #40	; 0x28
   2d024:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   2d026:	f10d 0107 	add.w	r1, sp, #7
   2d02a:	2000      	movs	r0, #0
   2d02c:	e7c4      	b.n	2cfb8 <z_arm_fault+0x78>
		reason = bus_fault(esf, 0, recoverable);
   2d02e:	f10d 0107 	add.w	r1, sp, #7
   2d032:	2000      	movs	r0, #0
   2d034:	e7cc      	b.n	2cfd0 <z_arm_fault+0x90>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2d036:	4b03      	ldr	r3, [pc, #12]	; (2d044 <z_arm_fault+0x104>)
   2d038:	e7d0      	b.n	2cfdc <z_arm_fault+0x9c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2d03a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   2d03e:	f023 0301 	bic.w	r3, r3, #1
   2d042:	e7e9      	b.n	2d018 <z_arm_fault+0xd8>
   2d044:	e000ed00 	.word	0xe000ed00

0002d048 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   2d048:	4a02      	ldr	r2, [pc, #8]	; (2d054 <z_arm_fault_init+0xc>)
   2d04a:	6953      	ldr	r3, [r2, #20]
   2d04c:	f043 0310 	orr.w	r3, r3, #16
   2d050:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   2d052:	4770      	bx	lr
   2d054:	e000ed00 	.word	0xe000ed00

0002d058 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   2d058:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   2d05c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   2d060:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   2d062:	4672      	mov	r2, lr
	bl z_arm_fault
   2d064:	f7ff ff6c 	bl	2cf40 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   2d068:	bd01      	pop	{r0, pc}
   2d06a:	bf00      	nop

0002d06c <z_arm_interrupt_init>:
   2d06c:	4804      	ldr	r0, [pc, #16]	; (2d080 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   2d06e:	2300      	movs	r3, #0
   2d070:	2120      	movs	r1, #32
   2d072:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   2d074:	3301      	adds	r3, #1
   2d076:	2b30      	cmp	r3, #48	; 0x30
   2d078:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   2d07c:	d1f9      	bne.n	2d072 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   2d07e:	4770      	bx	lr
   2d080:	e000e100 	.word	0xe000e100

0002d084 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   2d084:	f024 f9b2 	bl	513ec <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2d088:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2d08a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   2d08e:	4808      	ldr	r0, [pc, #32]	; (2d0b0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   2d090:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   2d094:	1840      	adds	r0, r0, r1
    msr PSP, r0
   2d096:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   2d09a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   2d09e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   2d0a0:	4308      	orrs	r0, r1
    msr CONTROL, r0
   2d0a2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   2d0a6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   2d0aa:	f7ff fe3d 	bl	2cd28 <z_arm_prep_c>
   2d0ae:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   2d0b0:	200096b0 	.word	0x200096b0

0002d0b4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   2d0b4:	4b06      	ldr	r3, [pc, #24]	; (2d0d0 <z_impl_k_thread_abort+0x1c>)
   2d0b6:	689b      	ldr	r3, [r3, #8]
   2d0b8:	4283      	cmp	r3, r0
   2d0ba:	d107      	bne.n	2d0cc <z_impl_k_thread_abort+0x18>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2d0bc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   2d0c0:	b123      	cbz	r3, 2d0cc <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2d0c2:	4a04      	ldr	r2, [pc, #16]	; (2d0d4 <z_impl_k_thread_abort+0x20>)
   2d0c4:	6853      	ldr	r3, [r2, #4]
   2d0c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2d0ca:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   2d0cc:	f01b bd54 	b.w	48b78 <z_thread_abort>
   2d0d0:	200071d4 	.word	0x200071d4
   2d0d4:	e000ed00 	.word	0xe000ed00

0002d0d8 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   2d0d8:	4b02      	ldr	r3, [pc, #8]	; (2d0e4 <z_arm_configure_static_mpu_regions+0xc>)
   2d0da:	4a03      	ldr	r2, [pc, #12]	; (2d0e8 <z_arm_configure_static_mpu_regions+0x10>)
   2d0dc:	4803      	ldr	r0, [pc, #12]	; (2d0ec <z_arm_configure_static_mpu_regions+0x14>)
   2d0de:	2101      	movs	r1, #1
   2d0e0:	f000 b860 	b.w	2d1a4 <arm_core_mpu_configure_static_mpu_regions>
   2d0e4:	20040000 	.word	0x20040000
   2d0e8:	20000000 	.word	0x20000000
   2d0ec:	000526b0 	.word	0x000526b0

0002d0f0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   2d0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   2d0f2:	4e20      	ldr	r6, [pc, #128]	; (2d174 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   2d0f4:	2500      	movs	r5, #0
   2d0f6:	428d      	cmp	r5, r1
   2d0f8:	db01      	blt.n	2d0fe <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   2d0fa:	4610      	mov	r0, r2
   2d0fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   2d0fe:	6844      	ldr	r4, [r0, #4]
   2d100:	b374      	cbz	r4, 2d160 <mpu_configure_regions+0x70>
		if (do_sanity_check &&
   2d102:	b153      	cbz	r3, 2d11a <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   2d104:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   2d108:	ea14 0f0c 	tst.w	r4, ip
   2d10c:	d12f      	bne.n	2d16e <mpu_configure_regions+0x7e>
		&&
   2d10e:	2c1f      	cmp	r4, #31
   2d110:	d92d      	bls.n	2d16e <mpu_configure_regions+0x7e>
		((part->start & (part->size - 1U)) == 0U);
   2d112:	6807      	ldr	r7, [r0, #0]
		&&
   2d114:	ea1c 0f07 	tst.w	ip, r7
   2d118:	d129      	bne.n	2d16e <mpu_configure_regions+0x7e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   2d11a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   2d11c:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2d11e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   2d122:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
   2d126:	d91e      	bls.n	2d166 <mpu_configure_regions+0x76>
	if (size > (1UL << 31)) {
   2d128:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   2d12c:	d81d      	bhi.n	2d16a <mpu_configure_regions+0x7a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   2d12e:	3c01      	subs	r4, #1
   2d130:	fab4 f484 	clz	r4, r4
   2d134:	f1c4 041f 	rsb	r4, r4, #31
   2d138:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   2d13a:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2d13e:	ea4c 0c04 	orr.w	ip, ip, r4
   2d142:	d814      	bhi.n	2d16e <mpu_configure_regions+0x7e>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2d144:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
   2d148:	4314      	orrs	r4, r2
   2d14a:	f044 0410 	orr.w	r4, r4, #16
   2d14e:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2d152:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2d156:	f04c 0401 	orr.w	r4, ip, #1
   2d15a:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
   2d15e:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
   2d160:	3501      	adds	r5, #1
   2d162:	300c      	adds	r0, #12
   2d164:	e7c7      	b.n	2d0f6 <mpu_configure_regions+0x6>
		return REGION_32B;
   2d166:	2408      	movs	r4, #8
   2d168:	e7e7      	b.n	2d13a <mpu_configure_regions+0x4a>
		return REGION_4G;
   2d16a:	243e      	movs	r4, #62	; 0x3e
   2d16c:	e7e5      	b.n	2d13a <mpu_configure_regions+0x4a>
			return -EINVAL;
   2d16e:	f06f 0215 	mvn.w	r2, #21
   2d172:	e7c2      	b.n	2d0fa <mpu_configure_regions+0xa>
   2d174:	e000ed00 	.word	0xe000ed00

0002d178 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   2d178:	4b04      	ldr	r3, [pc, #16]	; (2d18c <arm_core_mpu_enable+0x14>)
   2d17a:	2205      	movs	r2, #5
   2d17c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   2d180:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2d184:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   2d188:	4770      	bx	lr
   2d18a:	bf00      	nop
   2d18c:	e000ed00 	.word	0xe000ed00

0002d190 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   2d190:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   2d194:	4b02      	ldr	r3, [pc, #8]	; (2d1a0 <arm_core_mpu_disable+0x10>)
   2d196:	2200      	movs	r2, #0
   2d198:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   2d19c:	4770      	bx	lr
   2d19e:	bf00      	nop
   2d1a0:	e000ed00 	.word	0xe000ed00

0002d1a4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   2d1a4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   2d1a6:	4c03      	ldr	r4, [pc, #12]	; (2d1b4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   2d1a8:	2301      	movs	r3, #1
   2d1aa:	7822      	ldrb	r2, [r4, #0]
   2d1ac:	f7ff ffa0 	bl	2d0f0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   2d1b0:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   2d1b2:	bd10      	pop	{r4, pc}
   2d1b4:	20007374 	.word	0x20007374

0002d1b8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   2d1b8:	4914      	ldr	r1, [pc, #80]	; (2d20c <z_arm_mpu_init+0x54>)
   2d1ba:	6808      	ldr	r0, [r1, #0]
   2d1bc:	2808      	cmp	r0, #8
{
   2d1be:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   2d1c0:	d821      	bhi.n	2d206 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   2d1c2:	f7ff ffe5 	bl	2d190 <arm_core_mpu_disable>
   2d1c6:	4c12      	ldr	r4, [pc, #72]	; (2d210 <z_arm_mpu_init+0x58>)
   2d1c8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2d1ca:	2200      	movs	r2, #0
   2d1cc:	4290      	cmp	r0, r2
   2d1ce:	f101 010c 	add.w	r1, r1, #12
   2d1d2:	d105      	bne.n	2d1e0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   2d1d4:	4b0f      	ldr	r3, [pc, #60]	; (2d214 <z_arm_mpu_init+0x5c>)
   2d1d6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   2d1d8:	f7ff ffce 	bl	2d178 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   2d1dc:	2000      	movs	r0, #0
}
   2d1de:	bd10      	pop	{r4, pc}
   2d1e0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2d1e4:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   2d1e8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   2d1ec:	4313      	orrs	r3, r2
   2d1ee:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2d1f2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2d1f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2d1fa:	f043 0301 	orr.w	r3, r3, #1
   2d1fe:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2d202:	3201      	adds	r2, #1
   2d204:	e7e2      	b.n	2d1cc <z_arm_mpu_init+0x14>
		return -1;
   2d206:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d20a:	e7e8      	b.n	2d1de <z_arm_mpu_init+0x26>
   2d20c:	000526bc 	.word	0x000526bc
   2d210:	e000ed00 	.word	0xe000ed00
   2d214:	20007374 	.word	0x20007374

0002d218 <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *ZRESTRICT str, const char *ZRESTRICT format, ...)
{
   2d218:	b40e      	push	{r1, r2, r3}
   2d21a:	b50f      	push	{r0, r1, r2, r3, lr}
   2d21c:	ab05      	add	r3, sp, #20

	struct emitter p;
	int     r;

	p.ptr = str;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   2d21e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   2d222:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = str;
   2d226:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   2d228:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   2d22a:	4806      	ldr	r0, [pc, #24]	; (2d244 <sprintf+0x2c>)
	va_start(vargs, format);
   2d22c:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   2d22e:	a902      	add	r1, sp, #8
   2d230:	f7fd fd16 	bl	2ac60 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
   2d234:	9b02      	ldr	r3, [sp, #8]
   2d236:	2200      	movs	r2, #0
   2d238:	701a      	strb	r2, [r3, #0]
	return r;
}
   2d23a:	b004      	add	sp, #16
   2d23c:	f85d eb04 	ldr.w	lr, [sp], #4
   2d240:	b003      	add	sp, #12
   2d242:	4770      	bx	lr
   2d244:	0004bd8f 	.word	0x0004bd8f

0002d248 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   2d248:	f04f 0320 	mov.w	r3, #32
   2d24c:	f3ef 8211 	mrs	r2, BASEPRI
   2d250:	f383 8812 	msr	BASEPRI_MAX, r3
   2d254:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   2d258:	4906      	ldr	r1, [pc, #24]	; (2d274 <nordicsemi_nrf52_init+0x2c>)
   2d25a:	2301      	movs	r3, #1
   2d25c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   2d260:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   2d264:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   2d268:	f382 8811 	msr	BASEPRI, r2
   2d26c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   2d270:	2000      	movs	r0, #0
   2d272:	4770      	bx	lr
   2d274:	4001e000 	.word	0x4001e000

0002d278 <sys_arch_reboot>:
    *p_gpregret = val;
   2d278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2d27c:	b2c0      	uxtb	r0, r0
   2d27e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   2d282:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2d286:	4905      	ldr	r1, [pc, #20]	; (2d29c <sys_arch_reboot+0x24>)
   2d288:	4b05      	ldr	r3, [pc, #20]	; (2d2a0 <sys_arch_reboot+0x28>)
   2d28a:	68ca      	ldr	r2, [r1, #12]
   2d28c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2d290:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2d292:	60cb      	str	r3, [r1, #12]
   2d294:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   2d298:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   2d29a:	e7fd      	b.n	2d298 <sys_arch_reboot+0x20>
   2d29c:	e000ed00 	.word	0xe000ed00
   2d2a0:	05fa0004 	.word	0x05fa0004

0002d2a4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   2d2a4:	b120      	cbz	r0, 2d2b0 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   2d2a6:	4b03      	ldr	r3, [pc, #12]	; (2d2b4 <arch_busy_wait+0x10>)
   2d2a8:	0180      	lsls	r0, r0, #6
   2d2aa:	f043 0301 	orr.w	r3, r3, #1
   2d2ae:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   2d2b0:	4770      	bx	lr
   2d2b2:	bf00      	nop
   2d2b4:	00051b20 	.word	0x00051b20

0002d2b8 <pinmux_borne_init>:
#include <devicetree.h>

#define CHARGE_CTRL_1 26
#define CHARGE_CTRL_2 4

static int pinmux_borne_init(const struct device *port) {
   2d2b8:	b510      	push	{r4, lr}
   2d2ba:	4816      	ldr	r0, [pc, #88]	; (2d314 <pinmux_borne_init+0x5c>)
   2d2bc:	f01a fb74 	bl	479a8 <z_impl_device_get_binding>
   2d2c0:	4604      	mov	r4, r0
   2d2c2:	4815      	ldr	r0, [pc, #84]	; (2d318 <pinmux_borne_init+0x60>)
   2d2c4:	f01a fb70 	bl	479a8 <z_impl_device_get_binding>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   2d2c8:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
   2d2ca:	68a1      	ldr	r1, [r4, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2d2cc:	6813      	ldr	r3, [r2, #0]
   2d2ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   2d2d2:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
   2d2d4:	4620      	mov	r0, r4
   2d2d6:	680b      	ldr	r3, [r1, #0]
   2d2d8:	f44f 7200 	mov.w	r2, #512	; 0x200
   2d2dc:	211a      	movs	r1, #26
   2d2de:	4798      	blx	r3

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2d2e0:	6923      	ldr	r3, [r4, #16]
   2d2e2:	681b      	ldr	r3, [r3, #0]
   2d2e4:	015b      	lsls	r3, r3, #5
	return api->port_clear_bits_raw(port, pins);
   2d2e6:	68a3      	ldr	r3, [r4, #8]
	return api->port_set_bits_raw(port, pins);
   2d2e8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	return api->port_clear_bits_raw(port, pins);
   2d2ec:	bf54      	ite	pl
   2d2ee:	691b      	ldrpl	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
   2d2f0:	68db      	ldrmi	r3, [r3, #12]
   2d2f2:	4620      	mov	r0, r4
   2d2f4:	4798      	blx	r3
	struct gpio_driver_data *data =
   2d2f6:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
   2d2f8:	68a1      	ldr	r1, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2d2fa:	6813      	ldr	r3, [r2, #0]
   2d2fc:	f023 0310 	bic.w	r3, r3, #16
   2d300:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   2d302:	4620      	mov	r0, r4
   2d304:	680b      	ldr	r3, [r1, #0]
   2d306:	f44f 7280 	mov.w	r2, #256	; 0x100
   2d30a:	2104      	movs	r1, #4
   2d30c:	4798      	blx	r3
    gpio_pin_configure(p0, CHARGE_CTRL_1, GPIO_INPUT);
    gpio_pin_configure(p0, CHARGE_CTRL_2, GPIO_INPUT);
#endif
#endif
    return 0;
}
   2d30e:	2000      	movs	r0, #0
   2d310:	bd10      	pop	{r4, pc}
   2d312:	bf00      	nop
   2d314:	000541b5 	.word	0x000541b5
   2d318:	000541bc 	.word	0x000541bc

0002d31c <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   2d31c:	b570      	push	{r4, r5, r6, lr}
   2d31e:	4c21      	ldr	r4, [pc, #132]	; (2d3a4 <le_gen_dhkey+0x88>)
   2d320:	f3bf 8f5b 	dmb	ish
   2d324:	6823      	ldr	r3, [r4, #0]
   2d326:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2d32a:	07da      	lsls	r2, r3, #31
{
   2d32c:	4606      	mov	r6, r0
   2d32e:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2d330:	d501      	bpl.n	2d336 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   2d332:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
   2d334:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2d336:	2901      	cmp	r1, #1
   2d338:	d831      	bhi.n	2d39e <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d33a:	f3bf 8f5b 	dmb	ish
   2d33e:	e854 3f00 	ldrex	r3, [r4]
   2d342:	f043 0202 	orr.w	r2, r3, #2
   2d346:	e844 2100 	strex	r1, r2, [r4]
   2d34a:	2900      	cmp	r1, #0
   2d34c:	d1f7      	bne.n	2d33e <le_gen_dhkey+0x22>
   2d34e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   2d352:	079b      	lsls	r3, r3, #30
   2d354:	d4ed      	bmi.n	2d332 <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
   2d356:	4814      	ldr	r0, [pc, #80]	; (2d3a8 <le_gen_dhkey+0x8c>)
   2d358:	4631      	mov	r1, r6
   2d35a:	f01e fdae 	bl	4beba <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
   2d35e:	4813      	ldr	r0, [pc, #76]	; (2d3ac <le_gen_dhkey+0x90>)
   2d360:	f106 0120 	add.w	r1, r6, #32
   2d364:	f01e fda9 	bl	4beba <sys_memcpy_swap.constprop.0>
   2d368:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   2d36c:	b175      	cbz	r5, 2d38c <le_gen_dhkey+0x70>
   2d36e:	e854 3f00 	ldrex	r3, [r4]
   2d372:	f043 0304 	orr.w	r3, r3, #4
   2d376:	e844 3200 	strex	r2, r3, [r4]
   2d37a:	2a00      	cmp	r2, #0
   2d37c:	d1f7      	bne.n	2d36e <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d37e:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
   2d382:	480b      	ldr	r0, [pc, #44]	; (2d3b0 <le_gen_dhkey+0x94>)
   2d384:	f01a fed8 	bl	48138 <z_impl_k_sem_give>
   2d388:	2000      	movs	r0, #0
   2d38a:	e7d3      	b.n	2d334 <le_gen_dhkey+0x18>
   2d38c:	e854 3f00 	ldrex	r3, [r4]
   2d390:	f023 0304 	bic.w	r3, r3, #4
   2d394:	e844 3200 	strex	r2, r3, [r4]
   2d398:	2a00      	cmp	r2, #0
   2d39a:	d0f0      	beq.n	2d37e <le_gen_dhkey+0x62>
   2d39c:	e7f6      	b.n	2d38c <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   2d39e:	2012      	movs	r0, #18
   2d3a0:	e7c8      	b.n	2d334 <le_gen_dhkey+0x18>
   2d3a2:	bf00      	nop
   2d3a4:	2000459c 	.word	0x2000459c
   2d3a8:	20007395 	.word	0x20007395
   2d3ac:	200073b5 	.word	0x200073b5
   2d3b0:	20001294 	.word	0x20001294

0002d3b4 <ecc_thread>:
{
   2d3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   2d3b8:	4f5f      	ldr	r7, [pc, #380]	; (2d538 <ecc_thread+0x184>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d3ba:	4d60      	ldr	r5, [pc, #384]	; (2d53c <ecc_thread+0x188>)
   2d3bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d3c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d3c4:	4638      	mov	r0, r7
   2d3c6:	f01a fedd 	bl	48184 <z_impl_k_sem_take>
   2d3ca:	f3bf 8f5b 	dmb	ish
   2d3ce:	682c      	ldr	r4, [r5, #0]
   2d3d0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2d3d4:	f014 0401 	ands.w	r4, r4, #1
   2d3d8:	d055      	beq.n	2d486 <ecc_thread+0xd2>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   2d3da:	f8df 8164 	ldr.w	r8, [pc, #356]	; 2d540 <ecc_thread+0x18c>
   2d3de:	4c59      	ldr	r4, [pc, #356]	; (2d544 <ecc_thread+0x190>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   2d3e0:	4e59      	ldr	r6, [pc, #356]	; (2d548 <ecc_thread+0x194>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   2d3e2:	485a      	ldr	r0, [pc, #360]	; (2d54c <ecc_thread+0x198>)
   2d3e4:	4642      	mov	r2, r8
   2d3e6:	4621      	mov	r1, r4
   2d3e8:	f01d fb01 	bl	4a9ee <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   2d3ec:	2800      	cmp	r0, #0
   2d3ee:	d03e      	beq.n	2d46e <ecc_thread+0xba>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   2d3f0:	2220      	movs	r2, #32
   2d3f2:	4631      	mov	r1, r6
   2d3f4:	4620      	mov	r0, r4
   2d3f6:	f01e fca6 	bl	4bd46 <memcmp>
   2d3fa:	2800      	cmp	r0, #0
   2d3fc:	d0f1      	beq.n	2d3e2 <ecc_thread+0x2e>
	return 0;
   2d3fe:	f04f 0800 	mov.w	r8, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2d402:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d40a:	2001      	movs	r0, #1
   2d40c:	f000 fa6c 	bl	2d8e8 <bt_buf_get_rx>
   2d410:	f100 0608 	add.w	r6, r0, #8
   2d414:	2102      	movs	r1, #2
   2d416:	4604      	mov	r4, r0
   2d418:	4630      	mov	r0, r6
   2d41a:	f022 fc85 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2d41e:	233e      	movs	r3, #62	; 0x3e
   2d420:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2d422:	2342      	movs	r3, #66	; 0x42
   2d424:	7043      	strb	r3, [r0, #1]
   2d426:	2101      	movs	r1, #1
   2d428:	4630      	mov	r0, r6
   2d42a:	f022 fc7d 	bl	4fd28 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   2d42e:	2308      	movs	r3, #8
   2d430:	7003      	strb	r3, [r0, #0]
   2d432:	2141      	movs	r1, #65	; 0x41
   2d434:	4630      	mov	r0, r6
   2d436:	f022 fc77 	bl	4fd28 <net_buf_simple_add>
   2d43a:	4606      	mov	r6, r0
	evt->status = status;
   2d43c:	f800 8b01 	strb.w	r8, [r0], #1
	if (status) {
   2d440:	f1b8 0f00 	cmp.w	r8, #0
   2d444:	d016      	beq.n	2d474 <ecc_thread+0xc0>
		(void)memset(evt->key, 0, sizeof(evt->key));
   2d446:	2240      	movs	r2, #64	; 0x40
   2d448:	2100      	movs	r1, #0
   2d44a:	f01e fc97 	bl	4bd7c <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d44e:	f3bf 8f5b 	dmb	ish
   2d452:	e855 3f00 	ldrex	r3, [r5]
   2d456:	f023 0301 	bic.w	r3, r3, #1
   2d45a:	e845 3200 	strex	r2, r3, [r5]
   2d45e:	2a00      	cmp	r2, #0
   2d460:	d1f7      	bne.n	2d452 <ecc_thread+0x9e>
   2d462:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   2d466:	4620      	mov	r0, r4
	bt_recv(buf);
   2d468:	f000 ff96 	bl	2e398 <bt_recv>
	while (true) {
   2d46c:	e7a6      	b.n	2d3bc <ecc_thread+0x8>
			return BT_HCI_ERR_UNSPECIFIED;
   2d46e:	f04f 081f 	mov.w	r8, #31
   2d472:	e7c6      	b.n	2d402 <ecc_thread+0x4e>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
   2d474:	4935      	ldr	r1, [pc, #212]	; (2d54c <ecc_thread+0x198>)
   2d476:	f01e fd20 	bl	4beba <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
   2d47a:	3120      	adds	r1, #32
   2d47c:	f106 0021 	add.w	r0, r6, #33	; 0x21
   2d480:	f01e fd1b 	bl	4beba <sys_memcpy_swap.constprop.0>
   2d484:	e7e3      	b.n	2d44e <ecc_thread+0x9a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d486:	f3bf 8f5b 	dmb	ish
   2d48a:	682b      	ldr	r3, [r5, #0]
   2d48c:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   2d490:	079b      	lsls	r3, r3, #30
   2d492:	d593      	bpl.n	2d3bc <ecc_thread+0x8>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   2d494:	492a      	ldr	r1, [pc, #168]	; (2d540 <ecc_thread+0x18c>)
   2d496:	482d      	ldr	r0, [pc, #180]	; (2d54c <ecc_thread+0x198>)
   2d498:	f01e f967 	bl	4b76a <uECC_valid_public_key>
	if (ret < 0) {
   2d49c:	2800      	cmp	r0, #0
   2d49e:	db11      	blt.n	2d4c4 <ecc_thread+0x110>
   2d4a0:	f3bf 8f5b 	dmb	ish
		ret = uECC_shared_secret(ecc.public_key_be,
   2d4a4:	4927      	ldr	r1, [pc, #156]	; (2d544 <ecc_thread+0x190>)
   2d4a6:	682b      	ldr	r3, [r5, #0]
   2d4a8:	4827      	ldr	r0, [pc, #156]	; (2d548 <ecc_thread+0x194>)
   2d4aa:	f3bf 8f5b 	dmb	ish
   2d4ae:	f013 0f04 	tst.w	r3, #4
   2d4b2:	f101 0220 	add.w	r2, r1, #32
   2d4b6:	4b22      	ldr	r3, [pc, #136]	; (2d540 <ecc_thread+0x18c>)
   2d4b8:	bf18      	it	ne
   2d4ba:	4601      	movne	r1, r0
   2d4bc:	4610      	mov	r0, r2
   2d4be:	f01d fae5 	bl	4aa8c <uECC_shared_secret>
   2d4c2:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2d4c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d4c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d4cc:	2001      	movs	r0, #1
   2d4ce:	f000 fa0b 	bl	2d8e8 <bt_buf_get_rx>
   2d4d2:	f100 0808 	add.w	r8, r0, #8
   2d4d6:	2102      	movs	r1, #2
   2d4d8:	4606      	mov	r6, r0
   2d4da:	4640      	mov	r0, r8
   2d4dc:	f022 fc24 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2d4e0:	233e      	movs	r3, #62	; 0x3e
   2d4e2:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2d4e4:	2322      	movs	r3, #34	; 0x22
   2d4e6:	7043      	strb	r3, [r0, #1]
   2d4e8:	2101      	movs	r1, #1
   2d4ea:	4640      	mov	r0, r8
   2d4ec:	f022 fc1c 	bl	4fd28 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   2d4f0:	2309      	movs	r3, #9
   2d4f2:	7003      	strb	r3, [r0, #0]
   2d4f4:	2121      	movs	r1, #33	; 0x21
   2d4f6:	4640      	mov	r0, r8
   2d4f8:	f022 fc16 	bl	4fd28 <net_buf_simple_add>
   2d4fc:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   2d4fe:	3001      	adds	r0, #1
   2d500:	b99c      	cbnz	r4, 2d52a <ecc_thread+0x176>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   2d502:	221f      	movs	r2, #31
   2d504:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   2d506:	21ff      	movs	r1, #255	; 0xff
   2d508:	2220      	movs	r2, #32
   2d50a:	f01e fc37 	bl	4bd7c <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d50e:	f3bf 8f5b 	dmb	ish
   2d512:	e855 3f00 	ldrex	r3, [r5]
   2d516:	f023 0302 	bic.w	r3, r3, #2
   2d51a:	e845 3200 	strex	r2, r3, [r5]
   2d51e:	2a00      	cmp	r2, #0
   2d520:	d1f7      	bne.n	2d512 <ecc_thread+0x15e>
   2d522:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   2d526:	4630      	mov	r0, r6
   2d528:	e79e      	b.n	2d468 <ecc_thread+0xb4>
		evt->status = 0U;
   2d52a:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   2d52c:	4907      	ldr	r1, [pc, #28]	; (2d54c <ecc_thread+0x198>)
		evt->status = 0U;
   2d52e:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   2d530:	f01e fcc3 	bl	4beba <sys_memcpy_swap.constprop.0>
   2d534:	e7eb      	b.n	2d50e <ecc_thread+0x15a>
   2d536:	bf00      	nop
   2d538:	20001294 	.word	0x20001294
   2d53c:	2000459c 	.word	0x2000459c
   2d540:	000526dc 	.word	0x000526dc
   2d544:	20007375 	.word	0x20007375
   2d548:	000541ca 	.word	0x000541ca
   2d54c:	20007395 	.word	0x20007395

0002d550 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   2d550:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2d552:	7d06      	ldrb	r6, [r0, #20]
   2d554:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   2d556:	b976      	cbnz	r6, 2d576 <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   2d558:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   2d55a:	881d      	ldrh	r5, [r3, #0]
   2d55c:	f242 0226 	movw	r2, #8230	; 0x2026
   2d560:	4295      	cmp	r5, r2
   2d562:	d045      	beq.n	2d5f0 <bt_hci_ecc_send+0xa0>
   2d564:	d80f      	bhi.n	2d586 <bt_hci_ecc_send+0x36>
   2d566:	f242 0201 	movw	r2, #8193	; 0x2001
   2d56a:	4295      	cmp	r5, r2
   2d56c:	d04f      	beq.n	2d60e <bt_hci_ecc_send+0xbe>
   2d56e:	f242 0325 	movw	r3, #8229	; 0x2025
   2d572:	429d      	cmp	r5, r3
   2d574:	d013      	beq.n	2d59e <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   2d576:	4b2a      	ldr	r3, [pc, #168]	; (2d620 <bt_hci_ecc_send+0xd0>)
   2d578:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   2d57c:	4620      	mov	r0, r4
   2d57e:	691b      	ldr	r3, [r3, #16]
}
   2d580:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   2d584:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   2d586:	f242 035e 	movw	r3, #8286	; 0x205e
   2d58a:	429d      	cmp	r5, r3
   2d58c:	d1f3      	bne.n	2d576 <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   2d58e:	2103      	movs	r1, #3
   2d590:	3008      	adds	r0, #8
   2d592:	f022 fbf2 	bl	4fd7a <net_buf_simple_pull>
	cmd = (void *)buf->data;
   2d596:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   2d598:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2d59c:	e02e      	b.n	2d5fc <bt_hci_ecc_send+0xac>
   2d59e:	2103      	movs	r1, #3
   2d5a0:	3008      	adds	r0, #8
   2d5a2:	f022 fbea 	bl	4fd7a <net_buf_simple_pull>
	net_buf_unref(buf);
   2d5a6:	4620      	mov	r0, r4
   2d5a8:	f016 fa34 	bl	43a14 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d5ac:	f3bf 8f5b 	dmb	ish
   2d5b0:	4b1c      	ldr	r3, [pc, #112]	; (2d624 <bt_hci_ecc_send+0xd4>)
   2d5b2:	681a      	ldr	r2, [r3, #0]
   2d5b4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   2d5b8:	0792      	lsls	r2, r2, #30
   2d5ba:	d507      	bpl.n	2d5cc <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   2d5bc:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   2d5be:	4631      	mov	r1, r6
   2d5c0:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   2d5c4:	f01e fc55 	bl	4be72 <send_cmd_status>
}
   2d5c8:	2000      	movs	r0, #0
   2d5ca:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d5cc:	f3bf 8f5b 	dmb	ish
   2d5d0:	e853 2f00 	ldrex	r2, [r3]
   2d5d4:	f042 0101 	orr.w	r1, r2, #1
   2d5d8:	e843 1000 	strex	r0, r1, [r3]
   2d5dc:	2800      	cmp	r0, #0
   2d5de:	d1f7      	bne.n	2d5d0 <bt_hci_ecc_send+0x80>
   2d5e0:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   2d5e4:	07d3      	lsls	r3, r2, #31
   2d5e6:	d4e9      	bmi.n	2d5bc <bt_hci_ecc_send+0x6c>
	z_impl_k_sem_give(sem);
   2d5e8:	480f      	ldr	r0, [pc, #60]	; (2d628 <bt_hci_ecc_send+0xd8>)
   2d5ea:	f01a fda5 	bl	48138 <z_impl_k_sem_give>
}
   2d5ee:	e7e6      	b.n	2d5be <bt_hci_ecc_send+0x6e>
   2d5f0:	2103      	movs	r1, #3
   2d5f2:	3008      	adds	r0, #8
   2d5f4:	f022 fbc1 	bl	4fd7a <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   2d5f8:	68a0      	ldr	r0, [r4, #8]
   2d5fa:	4631      	mov	r1, r6
   2d5fc:	f7ff fe8e 	bl	2d31c <le_gen_dhkey>
   2d600:	4606      	mov	r6, r0
	net_buf_unref(buf);
   2d602:	4620      	mov	r0, r4
   2d604:	f016 fa06 	bl	43a14 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   2d608:	4631      	mov	r1, r6
   2d60a:	4628      	mov	r0, r5
   2d60c:	e7da      	b.n	2d5c4 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   2d60e:	78da      	ldrb	r2, [r3, #3]
   2d610:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2d614:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   2d616:	791a      	ldrb	r2, [r3, #4]
   2d618:	f022 0201 	bic.w	r2, r2, #1
   2d61c:	711a      	strb	r2, [r3, #4]
}
   2d61e:	e7aa      	b.n	2d576 <bt_hci_ecc_send+0x26>
   2d620:	20000030 	.word	0x20000030
   2d624:	2000459c 	.word	0x2000459c
   2d628:	20001294 	.word	0x20001294

0002d62c <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   2d62c:	b510      	push	{r4, lr}
   2d62e:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2d630:	4c0c      	ldr	r4, [pc, #48]	; (2d664 <bt_hci_ecc_init+0x38>)
   2d632:	490d      	ldr	r1, [pc, #52]	; (2d668 <bt_hci_ecc_init+0x3c>)
   2d634:	2200      	movs	r2, #0
   2d636:	2300      	movs	r3, #0
   2d638:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2d63c:	2300      	movs	r3, #0
   2d63e:	220a      	movs	r2, #10
   2d640:	e9cd 2303 	strd	r2, r3, [sp, #12]
   2d644:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2d648:	9300      	str	r3, [sp, #0]
   2d64a:	f44f 628f 	mov.w	r2, #1144	; 0x478
   2d64e:	4b07      	ldr	r3, [pc, #28]	; (2d66c <bt_hci_ecc_init+0x40>)
   2d650:	4620      	mov	r0, r4
   2d652:	f01a fb2f 	bl	47cb4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2d656:	4906      	ldr	r1, [pc, #24]	; (2d670 <bt_hci_ecc_init+0x44>)
   2d658:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   2d65a:	b008      	add	sp, #32
   2d65c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d660:	f023 b9c1 	b.w	509e6 <z_impl_k_thread_name_set>
   2d664:	20001a28 	.word	0x20001a28
   2d668:	20007830 	.word	0x20007830
   2d66c:	0002d3b5 	.word	0x0002d3b5
   2d670:	000541c3 	.word	0x000541c3

0002d674 <save_id>:
static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   2d674:	4903      	ldr	r1, [pc, #12]	; (2d684 <save_id+0x10>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   2d676:	4804      	ldr	r0, [pc, #16]	; (2d688 <save_id+0x14>)
   2d678:	79ca      	ldrb	r2, [r1, #7]
   2d67a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   2d67e:	f7fe be4b 	b.w	2c318 <settings_save_one>
   2d682:	bf00      	nop
   2d684:	20000030 	.word	0x20000030
   2d688:	000541ea 	.word	0x000541ea

0002d68c <set>:
{
   2d68c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d68e:	4616      	mov	r6, r2
   2d690:	461f      	mov	r7, r3
	if (!name) {
   2d692:	4604      	mov	r4, r0
   2d694:	b920      	cbnz	r0, 2d6a0 <set+0x14>
		return -ENOENT;
   2d696:	f06f 0401 	mvn.w	r4, #1
}
   2d69a:	4620      	mov	r0, r4
   2d69c:	b003      	add	sp, #12
   2d69e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = settings_name_next(name, &next);
   2d6a0:	a901      	add	r1, sp, #4
   2d6a2:	f01d f88f 	bl	4a7c4 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   2d6a6:	4911      	ldr	r1, [pc, #68]	; (2d6ec <set+0x60>)
	len = settings_name_next(name, &next);
   2d6a8:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   2d6aa:	4620      	mov	r0, r4
   2d6ac:	f01e fb37 	bl	4bd1e <strncmp>
   2d6b0:	4604      	mov	r4, r0
   2d6b2:	2800      	cmp	r0, #0
   2d6b4:	d1ef      	bne.n	2d696 <set+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d6b6:	f3bf 8f5b 	dmb	ish
   2d6ba:	4d0d      	ldr	r5, [pc, #52]	; (2d6f0 <set+0x64>)
   2d6bc:	682b      	ldr	r3, [r5, #0]
   2d6be:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   2d6c2:	075b      	lsls	r3, r3, #29
   2d6c4:	d4e9      	bmi.n	2d69a <set+0xe>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   2d6c6:	3dcc      	subs	r5, #204	; 0xcc
   2d6c8:	2207      	movs	r2, #7
   2d6ca:	4629      	mov	r1, r5
   2d6cc:	4638      	mov	r0, r7
   2d6ce:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   2d6d0:	2806      	cmp	r0, #6
   2d6d2:	d806      	bhi.n	2d6e2 <set+0x56>
			(void)memset(bt_dev.id_addr, 0,
   2d6d4:	2207      	movs	r2, #7
   2d6d6:	4621      	mov	r1, r4
   2d6d8:	4628      	mov	r0, r5
   2d6da:	f01e fb4f 	bl	4bd7c <memset>
			bt_dev.id_count = 0U;
   2d6de:	71ec      	strb	r4, [r5, #7]
   2d6e0:	e7db      	b.n	2d69a <set+0xe>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   2d6e2:	2307      	movs	r3, #7
   2d6e4:	fbb0 f0f3 	udiv	r0, r0, r3
   2d6e8:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   2d6ea:	e7d6      	b.n	2d69a <set+0xe>
   2d6ec:	00053ea3 	.word	0x00053ea3
   2d6f0:	200000fc 	.word	0x200000fc

0002d6f4 <bt_settings_encode_key>:
{
   2d6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d6f8:	b088      	sub	sp, #32
		snprintk(path, path_size,
   2d6fa:	799c      	ldrb	r4, [r3, #6]
{
   2d6fc:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   2d700:	795d      	ldrb	r5, [r3, #5]
   2d702:	791e      	ldrb	r6, [r3, #4]
   2d704:	78df      	ldrb	r7, [r3, #3]
   2d706:	f893 c002 	ldrb.w	ip, [r3, #2]
   2d70a:	f893 e001 	ldrb.w	lr, [r3, #1]
   2d70e:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   2d710:	f1b8 0f00 	cmp.w	r8, #0
   2d714:	d00e      	beq.n	2d734 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   2d716:	e9cd 3806 	strd	r3, r8, [sp, #24]
   2d71a:	e9cd ce04 	strd	ip, lr, [sp, #16]
   2d71e:	4613      	mov	r3, r2
   2d720:	e9cd 6702 	strd	r6, r7, [sp, #8]
   2d724:	e9cd 4500 	strd	r4, r5, [sp]
   2d728:	4a08      	ldr	r2, [pc, #32]	; (2d74c <bt_settings_encode_key+0x58>)
   2d72a:	f01c f9fa 	bl	49b22 <snprintk>
}
   2d72e:	b008      	add	sp, #32
   2d730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   2d734:	e9cd e305 	strd	lr, r3, [sp, #20]
   2d738:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   2d73c:	4613      	mov	r3, r2
   2d73e:	e9cd 5601 	strd	r5, r6, [sp, #4]
   2d742:	4a03      	ldr	r2, [pc, #12]	; (2d750 <bt_settings_encode_key+0x5c>)
   2d744:	9400      	str	r4, [sp, #0]
   2d746:	f01c f9ec 	bl	49b22 <snprintk>
}
   2d74a:	e7f0      	b.n	2d72e <bt_settings_encode_key+0x3a>
   2d74c:	000541f0 	.word	0x000541f0
   2d750:	00054214 	.word	0x00054214

0002d754 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   2d754:	4801      	ldr	r0, [pc, #4]	; (2d75c <bt_settings_save_id+0x8>)
   2d756:	f01a be73 	b.w	48440 <k_work_submit>
   2d75a:	bf00      	nop
   2d75c:	20000764 	.word	0x20000764

0002d760 <commit>:
}

static int commit(void)
{
   2d760:	b510      	push	{r4, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   2d762:	4c15      	ldr	r4, [pc, #84]	; (2d7b8 <commit+0x58>)
   2d764:	79e3      	ldrb	r3, [r4, #7]
   2d766:	b1cb      	cbz	r3, 2d79c <commit+0x3c>
   2d768:	f3bf 8f5b 	dmb	ish
   2d76c:	4c13      	ldr	r4, [pc, #76]	; (2d7bc <commit+0x5c>)
   2d76e:	6823      	ldr	r3, [r4, #0]
   2d770:	f3bf 8f5b 	dmb	ish
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2d774:	079a      	lsls	r2, r3, #30
   2d776:	d401      	bmi.n	2d77c <commit+0x1c>
		bt_finalize_init();
   2d778:	f000 fec4 	bl	2e504 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d77c:	f3bf 8f5b 	dmb	ish
   2d780:	e854 3f00 	ldrex	r3, [r4]
   2d784:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
   2d788:	e844 2100 	strex	r1, r2, [r4]
   2d78c:	2900      	cmp	r1, #0
   2d78e:	d1f7      	bne.n	2d780 <commit+0x20>
   2d790:	f3bf 8f5b 	dmb	ish
	}

	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   2d794:	045b      	lsls	r3, r3, #17
   2d796:	d40c      	bmi.n	2d7b2 <commit+0x52>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
   2d798:	2000      	movs	r0, #0
   2d79a:	e009      	b.n	2d7b0 <commit+0x50>
		err = bt_setup_public_id_addr();
   2d79c:	f001 f988 	bl	2eab0 <bt_setup_public_id_addr>
		if (err) {
   2d7a0:	b930      	cbnz	r0, 2d7b0 <commit+0x50>
	if (!bt_dev.id_count) {
   2d7a2:	79e3      	ldrb	r3, [r4, #7]
   2d7a4:	2b00      	cmp	r3, #0
   2d7a6:	d1df      	bne.n	2d768 <commit+0x8>
		err = bt_setup_random_id_addr();
   2d7a8:	f001 f9c2 	bl	2eb30 <bt_setup_random_id_addr>
		if (err) {
   2d7ac:	2800      	cmp	r0, #0
   2d7ae:	d0db      	beq.n	2d768 <commit+0x8>
}
   2d7b0:	bd10      	pop	{r4, pc}
		bt_settings_save_id();
   2d7b2:	f7ff ffcf 	bl	2d754 <bt_settings_save_id>
   2d7b6:	e7ef      	b.n	2d798 <commit+0x38>
   2d7b8:	20000030 	.word	0x20000030
   2d7bc:	200000fc 	.word	0x200000fc

0002d7c0 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   2d7c0:	b430      	push	{r4, r5}
   2d7c2:	4603      	mov	r3, r0
   2d7c4:	4608      	mov	r0, r1
	switch (src->type) {
   2d7c6:	781a      	ldrb	r2, [r3, #0]
   2d7c8:	2a01      	cmp	r2, #1
   2d7ca:	d013      	beq.n	2d7f4 <uuid_to_uuid128+0x34>
   2d7cc:	2a02      	cmp	r2, #2
   2d7ce:	d026      	beq.n	2d81e <uuid_to_uuid128+0x5e>
   2d7d0:	b972      	cbnz	r2, 2d7f0 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   2d7d2:	4a15      	ldr	r2, [pc, #84]	; (2d828 <uuid_to_uuid128+0x68>)
   2d7d4:	f102 0410 	add.w	r4, r2, #16
   2d7d8:	f852 5b04 	ldr.w	r5, [r2], #4
   2d7dc:	f841 5b04 	str.w	r5, [r1], #4
   2d7e0:	42a2      	cmp	r2, r4
   2d7e2:	d1f9      	bne.n	2d7d8 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
   2d7e4:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
   2d7e6:	7812      	ldrb	r2, [r2, #0]
   2d7e8:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
   2d7ea:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   2d7ec:	0a1b      	lsrs	r3, r3, #8
   2d7ee:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   2d7f0:	bc30      	pop	{r4, r5}
   2d7f2:	4770      	bx	lr
		*dst = uuid128_base;
   2d7f4:	4a0c      	ldr	r2, [pc, #48]	; (2d828 <uuid_to_uuid128+0x68>)
   2d7f6:	f102 0410 	add.w	r4, r2, #16
   2d7fa:	f852 5b04 	ldr.w	r5, [r2], #4
   2d7fe:	f841 5b04 	str.w	r5, [r1], #4
   2d802:	42a2      	cmp	r2, r4
   2d804:	d1f9      	bne.n	2d7fa <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
   2d806:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
   2d808:	7812      	ldrb	r2, [r2, #0]
   2d80a:	700a      	strb	r2, [r1, #0]
   2d80c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   2d810:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
   2d812:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   2d814:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   2d816:	0a1b      	lsrs	r3, r3, #8
   2d818:	7382      	strb	r2, [r0, #14]
   2d81a:	7403      	strb	r3, [r0, #16]
}
   2d81c:	e7e8      	b.n	2d7f0 <uuid_to_uuid128+0x30>
}
   2d81e:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   2d820:	2211      	movs	r2, #17
   2d822:	4619      	mov	r1, r3
   2d824:	f01e ba9f 	b.w	4bd66 <memcpy>
   2d828:	00054257 	.word	0x00054257

0002d82c <bt_uuid_to_str>:
	}
	return true;
}

void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
   2d82c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t tmp1, tmp5;
	uint16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
   2d82e:	7805      	ldrb	r5, [r0, #0]
   2d830:	2d01      	cmp	r5, #1
{
   2d832:	b08b      	sub	sp, #44	; 0x2c
   2d834:	4604      	mov	r4, r0
   2d836:	460e      	mov	r6, r1
   2d838:	4617      	mov	r7, r2
	switch (uuid->type) {
   2d83a:	d00c      	beq.n	2d856 <bt_uuid_to_str+0x2a>
   2d83c:	2d02      	cmp	r5, #2
   2d83e:	d00d      	beq.n	2d85c <bt_uuid_to_str+0x30>
   2d840:	2d00      	cmp	r5, #0
   2d842:	d144      	bne.n	2d8ce <bt_uuid_to_str+0xa2>
	case BT_UUID_TYPE_16:
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
   2d844:	8843      	ldrh	r3, [r0, #2]
   2d846:	4a25      	ldr	r2, [pc, #148]	; (2d8dc <bt_uuid_to_str+0xb0>)
		break;
	case BT_UUID_TYPE_32:
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   2d848:	4639      	mov	r1, r7
   2d84a:	4630      	mov	r0, r6
		break;
	default:
		(void)memset(str, 0, len);
		return;
	}
}
   2d84c:	b00b      	add	sp, #44	; 0x2c
   2d84e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   2d852:	f01c b966 	b.w	49b22 <snprintk>
   2d856:	6843      	ldr	r3, [r0, #4]
   2d858:	4a21      	ldr	r2, [pc, #132]	; (2d8e0 <bt_uuid_to_str+0xb4>)
   2d85a:	e7f5      	b.n	2d848 <bt_uuid_to_str+0x1c>
		memcpy(&tmp0, &BT_UUID_128(uuid)->val[0], sizeof(tmp0));
   2d85c:	462a      	mov	r2, r5
   2d85e:	1c41      	adds	r1, r0, #1
   2d860:	a806      	add	r0, sp, #24
   2d862:	f01e fa80 	bl	4bd66 <memcpy>
		memcpy(&tmp1, &BT_UUID_128(uuid)->val[2], sizeof(tmp1));
   2d866:	1ce1      	adds	r1, r4, #3
   2d868:	2204      	movs	r2, #4
   2d86a:	a808      	add	r0, sp, #32
   2d86c:	f01e fa7b 	bl	4bd66 <memcpy>
		memcpy(&tmp2, &BT_UUID_128(uuid)->val[6], sizeof(tmp2));
   2d870:	462a      	mov	r2, r5
   2d872:	1de1      	adds	r1, r4, #7
   2d874:	f10d 001a 	add.w	r0, sp, #26
   2d878:	f01e fa75 	bl	4bd66 <memcpy>
		memcpy(&tmp3, &BT_UUID_128(uuid)->val[8], sizeof(tmp3));
   2d87c:	462a      	mov	r2, r5
   2d87e:	f104 0109 	add.w	r1, r4, #9
   2d882:	a807      	add	r0, sp, #28
   2d884:	f01e fa6f 	bl	4bd66 <memcpy>
		memcpy(&tmp4, &BT_UUID_128(uuid)->val[10], sizeof(tmp4));
   2d888:	462a      	mov	r2, r5
   2d88a:	f104 010b 	add.w	r1, r4, #11
   2d88e:	f10d 001e 	add.w	r0, sp, #30
   2d892:	f01e fa68 	bl	4bd66 <memcpy>
		memcpy(&tmp5, &BT_UUID_128(uuid)->val[12], sizeof(tmp5));
   2d896:	f104 010d 	add.w	r1, r4, #13
   2d89a:	2204      	movs	r2, #4
   2d89c:	a809      	add	r0, sp, #36	; 0x24
   2d89e:	f01e fa62 	bl	4bd66 <memcpy>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
   2d8a2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   2d8a6:	9304      	str	r3, [sp, #16]
   2d8a8:	9b08      	ldr	r3, [sp, #32]
   2d8aa:	9303      	str	r3, [sp, #12]
   2d8ac:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   2d8b0:	9302      	str	r3, [sp, #8]
   2d8b2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2d8b6:	9301      	str	r3, [sp, #4]
   2d8b8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   2d8bc:	9300      	str	r3, [sp, #0]
   2d8be:	4a09      	ldr	r2, [pc, #36]	; (2d8e4 <bt_uuid_to_str+0xb8>)
   2d8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d8c2:	4639      	mov	r1, r7
   2d8c4:	4630      	mov	r0, r6
   2d8c6:	f01c f92c 	bl	49b22 <snprintk>
}
   2d8ca:	b00b      	add	sp, #44	; 0x2c
   2d8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)memset(str, 0, len);
   2d8ce:	2100      	movs	r1, #0
   2d8d0:	4630      	mov	r0, r6
}
   2d8d2:	b00b      	add	sp, #44	; 0x2c
   2d8d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		(void)memset(str, 0, len);
   2d8d8:	f01e ba50 	b.w	4bd7c <memset>
   2d8dc:	00054252 	.word	0x00054252
   2d8e0:	00054235 	.word	0x00054235
   2d8e4:	0005423a 	.word	0x0005423a

0002d8e8 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   2d8e8:	b538      	push	{r3, r4, r5, lr}
   2d8ea:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   2d8ec:	4805      	ldr	r0, [pc, #20]	; (2d904 <bt_buf_get_rx+0x1c>)
   2d8ee:	f022 f9b3 	bl	4fc58 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   2d8f2:	4604      	mov	r4, r0
   2d8f4:	b120      	cbz	r0, 2d900 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   2d8f6:	2100      	movs	r1, #0
   2d8f8:	3008      	adds	r0, #8
   2d8fa:	f022 f9d2 	bl	4fca2 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2d8fe:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   2d900:	4620      	mov	r0, r4
   2d902:	bd38      	pop	{r3, r4, r5, pc}
   2d904:	20001404 	.word	0x20001404

0002d908 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   2d908:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   2d90a:	490b      	ldr	r1, [pc, #44]	; (2d938 <bt_buf_get_cmd_complete+0x30>)
{
   2d90c:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   2d90e:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   2d912:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   2d914:	b920      	cbnz	r0, 2d920 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   2d916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2d91a:	2001      	movs	r0, #1
   2d91c:	f7ff bfe4 	b.w	2d8e8 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   2d920:	f022 f9d0 	bl	4fcc4 <net_buf_ref>
   2d924:	2301      	movs	r3, #1
		buf->len = 0U;
   2d926:	2100      	movs	r1, #0
   2d928:	7503      	strb	r3, [r0, #20]
   2d92a:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   2d92c:	4604      	mov	r4, r0
   2d92e:	3008      	adds	r0, #8
   2d930:	f022 f9b7 	bl	4fca2 <net_buf_simple_reserve>
}
   2d934:	4620      	mov	r0, r4
   2d936:	bd10      	pop	{r4, pc}
   2d938:	20000030 	.word	0x20000030

0002d93c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   2d93c:	b570      	push	{r4, r5, r6, lr}
   2d93e:	4604      	mov	r4, r0
	switch (evt) {
   2d940:	2c0f      	cmp	r4, #15
{
   2d942:	460d      	mov	r5, r1
   2d944:	4610      	mov	r0, r2
   2d946:	4619      	mov	r1, r3
	switch (evt) {
   2d948:	d805      	bhi.n	2d956 <bt_buf_get_evt+0x1a>
   2d94a:	2c0d      	cmp	r4, #13
   2d94c:	d90d      	bls.n	2d96a <bt_buf_get_evt+0x2e>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   2d94e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   2d952:	f7ff bfd9 	b.w	2d908 <bt_buf_get_cmd_complete>
	switch (evt) {
   2d956:	2c13      	cmp	r4, #19
   2d958:	d107      	bne.n	2d96a <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   2d95a:	480c      	ldr	r0, [pc, #48]	; (2d98c <bt_buf_get_evt+0x50>)
   2d95c:	f022 f97c 	bl	4fc58 <net_buf_alloc_fixed>
			if (buf) {
   2d960:	4604      	mov	r4, r0
   2d962:	b938      	cbnz	r0, 2d974 <bt_buf_get_evt+0x38>
{
   2d964:	2400      	movs	r4, #0
}
   2d966:	4620      	mov	r0, r4
   2d968:	bd70      	pop	{r4, r5, r6, pc}
   2d96a:	4602      	mov	r2, r0
   2d96c:	460b      	mov	r3, r1
		if (discardable) {
   2d96e:	b145      	cbz	r5, 2d982 <bt_buf_get_evt+0x46>
   2d970:	4807      	ldr	r0, [pc, #28]	; (2d990 <bt_buf_get_evt+0x54>)
   2d972:	e7f3      	b.n	2d95c <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   2d974:	2100      	movs	r1, #0
   2d976:	3008      	adds	r0, #8
   2d978:	f022 f993 	bl	4fca2 <net_buf_simple_reserve>
   2d97c:	2301      	movs	r3, #1
   2d97e:	7523      	strb	r3, [r4, #20]
}
   2d980:	e7f1      	b.n	2d966 <bt_buf_get_evt+0x2a>
}
   2d982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2d986:	2001      	movs	r0, #1
   2d988:	f7ff bfae 	b.w	2d8e8 <bt_buf_get_rx>
   2d98c:	20001430 	.word	0x20001430
   2d990:	20001380 	.word	0x20001380

0002d994 <unpair>:
{
   2d994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d998:	4606      	mov	r6, r0
   2d99a:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   2d99c:	f002 fb02 	bl	2ffa4 <bt_conn_lookup_addr_le>
	if (conn) {
   2d9a0:	4604      	mov	r4, r0
   2d9a2:	b140      	cbz	r0, 2d9b6 <unpair+0x22>
		if (conn->type == BT_CONN_TYPE_LE) {
   2d9a4:	7883      	ldrb	r3, [r0, #2]
   2d9a6:	2b01      	cmp	r3, #1
   2d9a8:	d019      	beq.n	2d9de <unpair+0x4a>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   2d9aa:	2113      	movs	r1, #19
   2d9ac:	f01f fb0e 	bl	4cfcc <bt_conn_disconnect>
		bt_conn_unref(conn);
   2d9b0:	4620      	mov	r0, r4
   2d9b2:	f01f fa12 	bl	4cdda <bt_conn_unref>
			keys = bt_keys_find_addr(id, addr);
   2d9b6:	4639      	mov	r1, r7
   2d9b8:	4630      	mov	r0, r6
   2d9ba:	f006 fa03 	bl	33dc4 <bt_keys_find_addr>
		if (keys) {
   2d9be:	4605      	mov	r5, r0
   2d9c0:	b9d0      	cbnz	r0, 2d9f8 <unpair+0x64>
	bt_gatt_clear(id, addr);
   2d9c2:	4639      	mov	r1, r7
   2d9c4:	4630      	mov	r0, r6
   2d9c6:	f004 ff7b 	bl	328c0 <bt_gatt_clear>
	if (bt_auth && bt_auth->bond_deleted) {
   2d9ca:	4b0e      	ldr	r3, [pc, #56]	; (2da04 <unpair+0x70>)
   2d9cc:	681b      	ldr	r3, [r3, #0]
   2d9ce:	b1bb      	cbz	r3, 2da00 <unpair+0x6c>
   2d9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2d9d2:	b1ab      	cbz	r3, 2da00 <unpair+0x6c>
		bt_auth->bond_deleted(id, addr);
   2d9d4:	4639      	mov	r1, r7
   2d9d6:	4630      	mov	r0, r6
}
   2d9d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_auth->bond_deleted(id, addr);
   2d9dc:	4718      	bx	r3
			conn->le.keys = NULL;
   2d9de:	2300      	movs	r3, #0
			keys = conn->le.keys;
   2d9e0:	f8d0 50b4 	ldr.w	r5, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
   2d9e4:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   2d9e8:	2113      	movs	r1, #19
   2d9ea:	f01f faef 	bl	4cfcc <bt_conn_disconnect>
		bt_conn_unref(conn);
   2d9ee:	4620      	mov	r0, r4
   2d9f0:	f01f f9f3 	bl	4cdda <bt_conn_unref>
		if (!keys) {
   2d9f4:	2d00      	cmp	r5, #0
   2d9f6:	d0de      	beq.n	2d9b6 <unpair+0x22>
			bt_keys_clear(keys);
   2d9f8:	4628      	mov	r0, r5
   2d9fa:	f006 fa01 	bl	33e00 <bt_keys_clear>
   2d9fe:	e7e0      	b.n	2d9c2 <unpair+0x2e>
}
   2da00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2da04:	2000460c 	.word	0x2000460c

0002da08 <hci_disconn_complete_prio>:
{
   2da08:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2da0a:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2da0c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   2da10:	781b      	ldrb	r3, [r3, #0]
   2da12:	b98b      	cbnz	r3, 2da38 <hci_disconn_complete_prio+0x30>
	conn = bt_conn_lookup_handle(handle);
   2da14:	4620      	mov	r0, r4
   2da16:	f002 f8b9 	bl	2fb8c <bt_conn_lookup_handle>
	if (!conn) {
   2da1a:	4605      	mov	r5, r0
   2da1c:	b968      	cbnz	r0, 2da3a <hci_disconn_complete_prio+0x32>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   2da1e:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   2da22:	4a0a      	ldr	r2, [pc, #40]	; (2da4c <hci_disconn_complete_prio+0x44>)
	if (!conn) {
   2da24:	2306      	movs	r3, #6
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   2da26:	ea6f 5010 	mvn.w	r0, r0, lsr #20
		if (!disconnected_handles[i]) {
   2da2a:	f832 1b02 	ldrh.w	r1, [r2], #2
   2da2e:	b909      	cbnz	r1, 2da34 <hci_disconn_complete_prio+0x2c>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   2da30:	f822 0c02 	strh.w	r0, [r2, #-2]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   2da34:	3b01      	subs	r3, #1
   2da36:	d1f8      	bne.n	2da2a <hci_disconn_complete_prio+0x22>
}
   2da38:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2da3a:	2101      	movs	r1, #1
   2da3c:	f002 f8ae 	bl	2fb9c <bt_conn_set_state>
	bt_conn_unref(conn);
   2da40:	4628      	mov	r0, r5
}
   2da42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   2da46:	f01f b9c8 	b.w	4cdda <bt_conn_unref>
   2da4a:	bf00      	nop
   2da4c:	20007214 	.word	0x20007214

0002da50 <hci_le_meta_event>:
{
   2da50:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   2da52:	2101      	movs	r1, #1
   2da54:	4604      	mov	r4, r0
   2da56:	3008      	adds	r0, #8
   2da58:	f022 f997 	bl	4fd8a <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   2da5c:	4621      	mov	r1, r4
   2da5e:	4a03      	ldr	r2, [pc, #12]	; (2da6c <hci_le_meta_event+0x1c>)
   2da60:	7800      	ldrb	r0, [r0, #0]
}
   2da62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   2da66:	230b      	movs	r3, #11
   2da68:	f01e bad4 	b.w	4c014 <handle_event>
   2da6c:	00052814 	.word	0x00052814

0002da70 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   2da70:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   2da72:	4c0c      	ldr	r4, [pc, #48]	; (2daa4 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   2da74:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   2da76:	2205      	movs	r2, #5
   2da78:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   2da7c:	f002 fab6 	bl	2ffec <bt_conn_lookup_state_le>
		if (!conn) {
   2da80:	b970      	cbnz	r0, 2daa0 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   2da82:	4b09      	ldr	r3, [pc, #36]	; (2daa8 <find_pending_connect.part.0+0x38>)
   2da84:	6818      	ldr	r0, [r3, #0]
   2da86:	889a      	ldrh	r2, [r3, #4]
   2da88:	9000      	str	r0, [sp, #0]
   2da8a:	799b      	ldrb	r3, [r3, #6]
   2da8c:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   2da90:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   2da94:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   2da98:	2204      	movs	r2, #4
   2da9a:	4669      	mov	r1, sp
   2da9c:	f002 faa6 	bl	2ffec <bt_conn_lookup_state_le>
}
   2daa0:	b002      	add	sp, #8
   2daa2:	bd10      	pop	{r4, pc}
   2daa4:	20000030 	.word	0x20000030
   2daa8:	00051aca 	.word	0x00051aca

0002daac <hci_cmd_done>:
{
   2daac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2daae:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   2dab0:	7990      	ldrb	r0, [r2, #6]
{
   2dab2:	460e      	mov	r6, r1
   2dab4:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   2dab6:	f015 feeb 	bl	43890 <net_buf_pool_get>
   2daba:	4b28      	ldr	r3, [pc, #160]	; (2db5c <hci_cmd_done+0xb0>)
   2dabc:	4283      	cmp	r3, r0
   2dabe:	d14b      	bne.n	2db58 <hci_cmd_done+0xac>
	if (cmd(buf)->opcode != opcode) {
   2dac0:	4620      	mov	r0, r4
   2dac2:	f015 feed 	bl	438a0 <net_buf_id>
   2dac6:	4d26      	ldr	r5, [pc, #152]	; (2db60 <hci_cmd_done+0xb4>)
   2dac8:	230c      	movs	r3, #12
   2daca:	fb03 5000 	mla	r0, r3, r0, r5
   2dace:	8843      	ldrh	r3, [r0, #2]
   2dad0:	42bb      	cmp	r3, r7
   2dad2:	d141      	bne.n	2db58 <hci_cmd_done+0xac>
	if (bt_dev.sent_cmd) {
   2dad4:	4f23      	ldr	r7, [pc, #140]	; (2db64 <hci_cmd_done+0xb8>)
   2dad6:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2dada:	b120      	cbz	r0, 2dae6 <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   2dadc:	f015 ff9a 	bl	43a14 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2dae0:	2300      	movs	r3, #0
   2dae2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   2dae6:	4620      	mov	r0, r4
   2dae8:	f015 feda 	bl	438a0 <net_buf_id>
   2daec:	270c      	movs	r7, #12
   2daee:	fb07 5000 	mla	r0, r7, r0, r5
   2daf2:	6843      	ldr	r3, [r0, #4]
   2daf4:	b19b      	cbz	r3, 2db1e <hci_cmd_done+0x72>
   2daf6:	b996      	cbnz	r6, 2db1e <hci_cmd_done+0x72>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   2daf8:	4620      	mov	r0, r4
   2dafa:	f015 fed1 	bl	438a0 <net_buf_id>
   2dafe:	fb07 5000 	mla	r0, r7, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
   2db02:	2101      	movs	r1, #1
   2db04:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   2db06:	e9d2 0300 	ldrd	r0, r3, [r2]
	if (val) {
   2db0a:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   2db0c:	f003 071f 	and.w	r7, r3, #31
   2db10:	40b9      	lsls	r1, r7
	if (val) {
   2db12:	095b      	lsrs	r3, r3, #5
   2db14:	b1d2      	cbz	r2, 2db4c <hci_cmd_done+0xa0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2db16:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2db1a:	f01e faae 	bl	4c07a <atomic_or>
	if (cmd(buf)->sync) {
   2db1e:	4620      	mov	r0, r4
   2db20:	f015 febe 	bl	438a0 <net_buf_id>
   2db24:	270c      	movs	r7, #12
   2db26:	fb07 5000 	mla	r0, r7, r0, r5
   2db2a:	6883      	ldr	r3, [r0, #8]
   2db2c:	b1a3      	cbz	r3, 2db58 <hci_cmd_done+0xac>
		cmd(buf)->status = status;
   2db2e:	4620      	mov	r0, r4
   2db30:	f015 feb6 	bl	438a0 <net_buf_id>
   2db34:	4378      	muls	r0, r7
   2db36:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   2db38:	4620      	mov	r0, r4
   2db3a:	f015 feb1 	bl	438a0 <net_buf_id>
   2db3e:	fb07 5500 	mla	r5, r7, r0, r5
   2db42:	68a8      	ldr	r0, [r5, #8]
}
   2db44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   2db48:	f01a baf6 	b.w	48138 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2db4c:	43c9      	mvns	r1, r1
   2db4e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2db52:	f01e faa1 	bl	4c098 <atomic_and>
   2db56:	e7e2      	b.n	2db1e <hci_cmd_done+0x72>
   2db58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2db5a:	bf00      	nop
   2db5c:	200013d8 	.word	0x200013d8
   2db60:	200045a4 	.word	0x200045a4
   2db64:	20000030 	.word	0x20000030

0002db68 <hci_cmd_status>:
{
   2db68:	b538      	push	{r3, r4, r5, lr}
   2db6a:	2104      	movs	r1, #4
   2db6c:	4604      	mov	r4, r0
   2db6e:	3008      	adds	r0, #8
   2db70:	f022 f90b 	bl	4fd8a <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   2db74:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   2db76:	7801      	ldrb	r1, [r0, #0]
   2db78:	8840      	ldrh	r0, [r0, #2]
   2db7a:	4622      	mov	r2, r4
   2db7c:	f7ff ff96 	bl	2daac <hci_cmd_done>
	if (ncmd) {
   2db80:	b125      	cbz	r5, 2db8c <hci_cmd_status+0x24>
   2db82:	4803      	ldr	r0, [pc, #12]	; (2db90 <hci_cmd_status+0x28>)
}
   2db84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2db88:	f01a bad6 	b.w	48138 <z_impl_k_sem_give>
   2db8c:	bd38      	pop	{r3, r4, r5, pc}
   2db8e:	bf00      	nop
   2db90:	20000150 	.word	0x20000150

0002db94 <hci_cmd_complete>:
{
   2db94:	b538      	push	{r3, r4, r5, lr}
   2db96:	2103      	movs	r1, #3
   2db98:	4604      	mov	r4, r0
   2db9a:	3008      	adds	r0, #8
   2db9c:	f022 f8f5 	bl	4fd8a <net_buf_simple_pull_mem>
	status = buf->data[0];
   2dba0:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   2dba2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   2dba4:	7819      	ldrb	r1, [r3, #0]
   2dba6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   2dbaa:	4622      	mov	r2, r4
   2dbac:	f7ff ff7e 	bl	2daac <hci_cmd_done>
	if (ncmd) {
   2dbb0:	b125      	cbz	r5, 2dbbc <hci_cmd_complete+0x28>
   2dbb2:	4803      	ldr	r0, [pc, #12]	; (2dbc0 <hci_cmd_complete+0x2c>)
}
   2dbb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2dbb8:	f01a babe 	b.w	48138 <z_impl_k_sem_give>
   2dbbc:	bd38      	pop	{r3, r4, r5, pc}
   2dbbe:	bf00      	nop
   2dbc0:	20000150 	.word	0x20000150

0002dbc4 <hci_tx_thread>:
{
   2dbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   2dbc8:	f8df 8104 	ldr.w	r8, [pc, #260]	; 2dcd0 <hci_tx_thread+0x10c>
		BT_ASSERT(err == 0);
   2dbcc:	f8df 9104 	ldr.w	r9, [pc, #260]	; 2dcd4 <hci_tx_thread+0x110>
			ev_count += bt_conn_prepare_events(&events[1]);
   2dbd0:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   2dbd4:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   2dbd8:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
   2dbda:	f36f 3352 	bfc	r3, #13, #6
   2dbde:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   2dbe2:	f001 ff97 	bl	2fb14 <bt_conn_prepare_events>
   2dbe6:	1c45      	adds	r5, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   2dbe8:	4839      	ldr	r0, [pc, #228]	; (2dcd0 <hci_tx_thread+0x10c>)
   2dbea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2dbee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2dbf2:	4629      	mov	r1, r5
   2dbf4:	f01b fa0e 	bl	49014 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   2dbf8:	b160      	cbz	r0, 2dc14 <hci_tx_thread+0x50>
   2dbfa:	4937      	ldr	r1, [pc, #220]	; (2dcd8 <hci_tx_thread+0x114>)
   2dbfc:	4837      	ldr	r0, [pc, #220]	; (2dcdc <hci_tx_thread+0x118>)
   2dbfe:	f640 1393 	movw	r3, #2451	; 0x993
   2dc02:	464a      	mov	r2, r9
   2dc04:	f01b ff80 	bl	49b08 <printk>
   2dc08:	4040      	eors	r0, r0
   2dc0a:	f380 8811 	msr	BASEPRI, r0
   2dc0e:	f04f 0003 	mov.w	r0, #3
   2dc12:	df02      	svc	2
{
   2dc14:	4e2e      	ldr	r6, [pc, #184]	; (2dcd0 <hci_tx_thread+0x10c>)
	for (; count; ev++, count--) {
   2dc16:	b915      	cbnz	r5, 2dc1e <hci_tx_thread+0x5a>
	z_impl_k_yield();
   2dc18:	f01a fefc 	bl	48a14 <z_impl_k_yield>
	while (1) {
   2dc1c:	e7da      	b.n	2dbd4 <hci_tx_thread+0x10>
		switch (ev->state) {
   2dc1e:	68f3      	ldr	r3, [r6, #12]
   2dc20:	f3c3 3345 	ubfx	r3, r3, #13, #6
   2dc24:	2b04      	cmp	r3, #4
   2dc26:	d148      	bne.n	2dcba <hci_tx_thread+0xf6>
			if (ev->tag == BT_EVENT_CMD_TX) {
   2dc28:	7b33      	ldrb	r3, [r6, #12]
   2dc2a:	2b00      	cmp	r3, #0
   2dc2c:	d148      	bne.n	2dcc0 <hci_tx_thread+0xfc>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   2dc2e:	482c      	ldr	r0, [pc, #176]	; (2dce0 <hci_tx_thread+0x11c>)
   2dc30:	2200      	movs	r2, #0
   2dc32:	2300      	movs	r3, #0
   2dc34:	f022 f815 	bl	4fc62 <net_buf_get>
	BT_ASSERT(buf);
   2dc38:	4604      	mov	r4, r0
   2dc3a:	b960      	cbnz	r0, 2dc56 <hci_tx_thread+0x92>
   2dc3c:	4929      	ldr	r1, [pc, #164]	; (2dce4 <hci_tx_thread+0x120>)
   2dc3e:	4827      	ldr	r0, [pc, #156]	; (2dcdc <hci_tx_thread+0x118>)
   2dc40:	f640 132a 	movw	r3, #2346	; 0x92a
   2dc44:	464a      	mov	r2, r9
   2dc46:	f01b ff5f 	bl	49b08 <printk>
   2dc4a:	4040      	eors	r0, r0
   2dc4c:	f380 8811 	msr	BASEPRI, r0
   2dc50:	f04f 0003 	mov.w	r0, #3
   2dc54:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   2dc56:	4f24      	ldr	r7, [pc, #144]	; (2dce8 <hci_tx_thread+0x124>)
	return z_impl_k_sem_take(sem, timeout);
   2dc58:	4824      	ldr	r0, [pc, #144]	; (2dcec <hci_tx_thread+0x128>)
   2dc5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2dc5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2dc62:	f01a fa8f 	bl	48184 <z_impl_k_sem_take>
   2dc66:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2dc6a:	b120      	cbz	r0, 2dc76 <hci_tx_thread+0xb2>
		net_buf_unref(bt_dev.sent_cmd);
   2dc6c:	f015 fed2 	bl	43a14 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2dc70:	2300      	movs	r3, #0
   2dc72:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   2dc76:	4620      	mov	r0, r4
   2dc78:	f022 f824 	bl	4fcc4 <net_buf_ref>
   2dc7c:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
		return bt_hci_ecc_send(buf);
   2dc80:	4620      	mov	r0, r4
   2dc82:	f7ff fc65 	bl	2d550 <bt_hci_ecc_send>
	if (err) {
   2dc86:	b1c0      	cbz	r0, 2dcba <hci_tx_thread+0xf6>
	z_impl_k_sem_give(sem);
   2dc88:	4818      	ldr	r0, [pc, #96]	; (2dcec <hci_tx_thread+0x128>)
   2dc8a:	f01a fa55 	bl	48138 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   2dc8e:	4620      	mov	r0, r4
   2dc90:	f015 fe06 	bl	438a0 <net_buf_id>
   2dc94:	4b16      	ldr	r3, [pc, #88]	; (2dcf0 <hci_tx_thread+0x12c>)
   2dc96:	220c      	movs	r2, #12
   2dc98:	fb02 3000 	mla	r0, r2, r0, r3
   2dc9c:	211f      	movs	r1, #31
   2dc9e:	8840      	ldrh	r0, [r0, #2]
   2dca0:	4622      	mov	r2, r4
   2dca2:	f7ff ff03 	bl	2daac <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   2dca6:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2dcaa:	f015 feb3 	bl	43a14 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2dcae:	2300      	movs	r3, #0
		net_buf_unref(buf);
   2dcb0:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   2dcb2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		net_buf_unref(buf);
   2dcb6:	f015 fead 	bl	43a14 <net_buf_unref>
	for (; count; ev++, count--) {
   2dcba:	3614      	adds	r6, #20
   2dcbc:	3d01      	subs	r5, #1
   2dcbe:	e7aa      	b.n	2dc16 <hci_tx_thread+0x52>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   2dcc0:	2b01      	cmp	r3, #1
   2dcc2:	d1fa      	bne.n	2dcba <hci_tx_thread+0xf6>
					conn = CONTAINER_OF(ev->fifo,
   2dcc4:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   2dcc6:	3838      	subs	r0, #56	; 0x38
   2dcc8:	f002 fbc6 	bl	30458 <bt_conn_process_tx>
   2dccc:	e7f5      	b.n	2dcba <hci_tx_thread+0xf6>
   2dcce:	bf00      	nop
   2dcd0:	20000774 	.word	0x20000774
   2dcd4:	00054268 	.word	0x00054268
   2dcd8:	0005429c 	.word	0x0005429c
   2dcdc:	000542a5 	.word	0x000542a5
   2dce0:	2000016c 	.word	0x2000016c
   2dce4:	000542c2 	.word	0x000542c2
   2dce8:	20000030 	.word	0x20000030
   2dcec:	20000150 	.word	0x20000150
   2dcf0:	200045a4 	.word	0x200045a4

0002dcf4 <bt_hci_cmd_state_set_init>:
{
   2dcf4:	b510      	push	{r4, lr}
	state->bit = bit;
   2dcf6:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   2dcfa:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2dcfe:	720b      	strb	r3, [r1, #8]
{
   2dd00:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   2dd02:	f015 fdcd 	bl	438a0 <net_buf_id>
   2dd06:	4b03      	ldr	r3, [pc, #12]	; (2dd14 <bt_hci_cmd_state_set_init+0x20>)
   2dd08:	220c      	movs	r2, #12
   2dd0a:	fb02 3300 	mla	r3, r2, r0, r3
   2dd0e:	605c      	str	r4, [r3, #4]
}
   2dd10:	bd10      	pop	{r4, pc}
   2dd12:	bf00      	nop
   2dd14:	200045a4 	.word	0x200045a4

0002dd18 <bt_hci_cmd_create>:
{
   2dd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   2dd1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2dd20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2dd24:	4606      	mov	r6, r0
   2dd26:	4817      	ldr	r0, [pc, #92]	; (2dd84 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   2dd28:	4d17      	ldr	r5, [pc, #92]	; (2dd88 <bt_hci_cmd_create+0x70>)
{
   2dd2a:	460f      	mov	r7, r1
   2dd2c:	f021 ff94 	bl	4fc58 <net_buf_alloc_fixed>
   2dd30:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   2dd32:	f100 0a08 	add.w	sl, r0, #8
   2dd36:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2dd38:	f04f 0800 	mov.w	r8, #0
   2dd3c:	4650      	mov	r0, sl
   2dd3e:	f021 ffb0 	bl	4fca2 <net_buf_simple_reserve>
   2dd42:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   2dd46:	4620      	mov	r0, r4
   2dd48:	f015 fdaa 	bl	438a0 <net_buf_id>
   2dd4c:	f04f 090c 	mov.w	r9, #12
   2dd50:	fb09 5000 	mla	r0, r9, r0, r5
   2dd54:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   2dd56:	4620      	mov	r0, r4
   2dd58:	f015 fda2 	bl	438a0 <net_buf_id>
   2dd5c:	fb09 5000 	mla	r0, r9, r0, r5
   2dd60:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   2dd64:	4620      	mov	r0, r4
   2dd66:	f015 fd9b 	bl	438a0 <net_buf_id>
   2dd6a:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   2dd6e:	2103      	movs	r1, #3
   2dd70:	f8c5 8004 	str.w	r8, [r5, #4]
   2dd74:	4650      	mov	r0, sl
   2dd76:	f021 ffd7 	bl	4fd28 <net_buf_simple_add>
	hdr->param_len = param_len;
   2dd7a:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   2dd7c:	8006      	strh	r6, [r0, #0]
}
   2dd7e:	4620      	mov	r0, r4
   2dd80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2dd84:	200013d8 	.word	0x200013d8
   2dd88:	200045a4 	.word	0x200045a4

0002dd8c <bt_hci_cmd_send>:
{
   2dd8c:	b538      	push	{r3, r4, r5, lr}
   2dd8e:	4605      	mov	r5, r0
	if (!buf) {
   2dd90:	460c      	mov	r4, r1
   2dd92:	b919      	cbnz	r1, 2dd9c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   2dd94:	f7ff ffc0 	bl	2dd18 <bt_hci_cmd_create>
		if (!buf) {
   2dd98:	4604      	mov	r4, r0
   2dd9a:	b198      	cbz	r0, 2ddc4 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   2dd9c:	f640 4335 	movw	r3, #3125	; 0xc35
   2dda0:	429d      	cmp	r5, r3
   2dda2:	d109      	bne.n	2ddb8 <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
   2dda4:	4620      	mov	r0, r4
   2dda6:	f7ff fbd3 	bl	2d550 <bt_hci_ecc_send>
		if (err) {
   2ddaa:	4605      	mov	r5, r0
   2ddac:	b140      	cbz	r0, 2ddc0 <bt_hci_cmd_send+0x34>
			net_buf_unref(buf);
   2ddae:	4620      	mov	r0, r4
   2ddb0:	f015 fe30 	bl	43a14 <net_buf_unref>
}
   2ddb4:	4628      	mov	r0, r5
   2ddb6:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   2ddb8:	4804      	ldr	r0, [pc, #16]	; (2ddcc <bt_hci_cmd_send+0x40>)
   2ddba:	4621      	mov	r1, r4
   2ddbc:	f021 ff75 	bl	4fcaa <net_buf_put>
	return 0;
   2ddc0:	2500      	movs	r5, #0
   2ddc2:	e7f7      	b.n	2ddb4 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   2ddc4:	f06f 0568 	mvn.w	r5, #104	; 0x68
   2ddc8:	e7f4      	b.n	2ddb4 <bt_hci_cmd_send+0x28>
   2ddca:	bf00      	nop
   2ddcc:	2000016c 	.word	0x2000016c

0002ddd0 <bt_hci_cmd_send_sync>:
{
   2ddd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ddd2:	4615      	mov	r5, r2
   2ddd4:	b087      	sub	sp, #28
	if (!buf) {
   2ddd6:	460c      	mov	r4, r1
   2ddd8:	b921      	cbnz	r1, 2dde4 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   2ddda:	f7ff ff9d 	bl	2dd18 <bt_hci_cmd_create>
		if (!buf) {
   2ddde:	4604      	mov	r4, r0
   2dde0:	2800      	cmp	r0, #0
   2dde2:	d047      	beq.n	2de74 <bt_hci_cmd_send_sync+0xa4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2dde4:	2201      	movs	r2, #1
   2dde6:	2100      	movs	r1, #0
   2dde8:	4668      	mov	r0, sp
   2ddea:	f022 fee9 	bl	50bc0 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   2ddee:	4620      	mov	r0, r4
   2ddf0:	f015 fd56 	bl	438a0 <net_buf_id>
   2ddf4:	4f21      	ldr	r7, [pc, #132]	; (2de7c <bt_hci_cmd_send_sync+0xac>)
   2ddf6:	230c      	movs	r3, #12
   2ddf8:	fb03 7000 	mla	r0, r3, r0, r7
   2ddfc:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   2de00:	4620      	mov	r0, r4
   2de02:	f021 ff5f 	bl	4fcc4 <net_buf_ref>
   2de06:	4601      	mov	r1, r0
   2de08:	481d      	ldr	r0, [pc, #116]	; (2de80 <bt_hci_cmd_send_sync+0xb0>)
   2de0a:	f021 ff4e 	bl	4fcaa <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   2de0e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2de12:	2300      	movs	r3, #0
   2de14:	4668      	mov	r0, sp
   2de16:	f01a f9b5 	bl	48184 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   2de1a:	4606      	mov	r6, r0
   2de1c:	b180      	cbz	r0, 2de40 <bt_hci_cmd_send_sync+0x70>
   2de1e:	4a19      	ldr	r2, [pc, #100]	; (2de84 <bt_hci_cmd_send_sync+0xb4>)
   2de20:	4919      	ldr	r1, [pc, #100]	; (2de88 <bt_hci_cmd_send_sync+0xb8>)
   2de22:	481a      	ldr	r0, [pc, #104]	; (2de8c <bt_hci_cmd_send_sync+0xbc>)
   2de24:	f240 1331 	movw	r3, #305	; 0x131
   2de28:	f01b fe6e 	bl	49b08 <printk>
   2de2c:	4818      	ldr	r0, [pc, #96]	; (2de90 <bt_hci_cmd_send_sync+0xc0>)
   2de2e:	4631      	mov	r1, r6
   2de30:	f01b fe6a 	bl	49b08 <printk>
   2de34:	4040      	eors	r0, r0
   2de36:	f380 8811 	msr	BASEPRI, r0
   2de3a:	f04f 0003 	mov.w	r0, #3
   2de3e:	df02      	svc	2
	status = cmd(buf)->status;
   2de40:	4620      	mov	r0, r4
   2de42:	f015 fd2d 	bl	438a0 <net_buf_id>
   2de46:	230c      	movs	r3, #12
   2de48:	4358      	muls	r0, r3
   2de4a:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
   2de4c:	b156      	cbz	r6, 2de64 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   2de4e:	4620      	mov	r0, r4
   2de50:	f015 fde0 	bl	43a14 <net_buf_unref>
			return -ECONNREFUSED;
   2de54:	2e09      	cmp	r6, #9
   2de56:	bf14      	ite	ne
   2de58:	f06f 0004 	mvnne.w	r0, #4
   2de5c:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   2de60:	b007      	add	sp, #28
   2de62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   2de64:	b115      	cbz	r5, 2de6c <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   2de66:	602c      	str	r4, [r5, #0]
	return 0;
   2de68:	2000      	movs	r0, #0
   2de6a:	e7f9      	b.n	2de60 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   2de6c:	4620      	mov	r0, r4
   2de6e:	f015 fdd1 	bl	43a14 <net_buf_unref>
   2de72:	e7f9      	b.n	2de68 <bt_hci_cmd_send_sync+0x98>
			return -ENOBUFS;
   2de74:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2de78:	e7f2      	b.n	2de60 <bt_hci_cmd_send_sync+0x90>
   2de7a:	bf00      	nop
   2de7c:	200045a4 	.word	0x200045a4
   2de80:	2000016c 	.word	0x2000016c
   2de84:	00054268 	.word	0x00054268
   2de88:	0005429c 	.word	0x0005429c
   2de8c:	000542a5 	.word	0x000542a5
   2de90:	000542c6 	.word	0x000542c6

0002de94 <bt_get_phy>:
	switch (hci_phy) {
   2de94:	3801      	subs	r0, #1
   2de96:	b2c0      	uxtb	r0, r0
   2de98:	2802      	cmp	r0, #2
   2de9a:	bf9a      	itte	ls
   2de9c:	4b01      	ldrls	r3, [pc, #4]	; (2dea4 <bt_get_phy+0x10>)
   2de9e:	5c18      	ldrbls	r0, [r3, r0]
{
   2dea0:	2000      	movhi	r0, #0
}
   2dea2:	4770      	bx	lr
   2dea4:	00054399 	.word	0x00054399

0002dea8 <bt_le_create_conn_legacy>:
{
   2dea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2deac:	b086      	sub	sp, #24
   2deae:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   2deb0:	f10d 010b 	add.w	r1, sp, #11
   2deb4:	2000      	movs	r0, #0
   2deb6:	f000 fe69 	bl	2eb8c <bt_id_set_create_conn_own_addr>
	if (err) {
   2deba:	4605      	mov	r5, r0
   2debc:	2800      	cmp	r0, #0
   2debe:	d147      	bne.n	2df50 <bt_le_create_conn_legacy+0xa8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   2dec0:	2119      	movs	r1, #25
   2dec2:	f242 000d 	movw	r0, #8205	; 0x200d
   2dec6:	f7ff ff27 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   2deca:	4607      	mov	r7, r0
   2decc:	2800      	cmp	r0, #0
   2dece:	d046      	beq.n	2df5e <bt_le_create_conn_legacy+0xb6>
   2ded0:	2119      	movs	r1, #25
   2ded2:	3008      	adds	r0, #8
   2ded4:	f021 ff28 	bl	4fd28 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
   2ded8:	4629      	mov	r1, r5
   2deda:	4604      	mov	r4, r0
   2dedc:	2219      	movs	r2, #25
   2dede:	f01d ff4d 	bl	4bd7c <memset>
		if (!bt_dev.le.rl_size ||
   2dee2:	4d20      	ldr	r5, [pc, #128]	; (2df64 <bt_le_create_conn_legacy+0xbc>)
	cp->own_addr_type = own_addr_type;
   2dee4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2dee8:	7323      	strb	r3, [r4, #12]
		if (!bt_dev.le.rl_size ||
   2deea:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   2deee:	b39b      	cbz	r3, 2df58 <bt_le_create_conn_legacy+0xb0>
   2def0:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   2def4:	429a      	cmp	r2, r3
   2def6:	d82f      	bhi.n	2df58 <bt_le_create_conn_legacy+0xb0>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   2def8:	f106 0188 	add.w	r1, r6, #136	; 0x88
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   2defc:	1d60      	adds	r0, r4, #5
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   2defe:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   2df02:	f01e f8b7 	bl	4c074 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   2df06:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   2df0a:	89ab      	ldrh	r3, [r5, #12]
   2df0c:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   2df0e:	89eb      	ldrh	r3, [r5, #14]
   2df10:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   2df12:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
   2df16:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   2df1a:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
   2df1e:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   2df22:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
   2df26:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   2df2a:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
   2df2e:	f8a4 3013 	strh.w	r3, [r4, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   2df32:	2301      	movs	r3, #1
   2df34:	4a0c      	ldr	r2, [pc, #48]	; (2df68 <bt_le_create_conn_legacy+0xc0>)
   2df36:	9300      	str	r3, [sp, #0]
   2df38:	a903      	add	r1, sp, #12
   2df3a:	230b      	movs	r3, #11
   2df3c:	4638      	mov	r0, r7
   2df3e:	f7ff fed9 	bl	2dcf4 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   2df42:	4642      	mov	r2, r8
   2df44:	4639      	mov	r1, r7
   2df46:	f242 000d 	movw	r0, #8205	; 0x200d
   2df4a:	f7ff ff41 	bl	2ddd0 <bt_hci_cmd_send_sync>
   2df4e:	4605      	mov	r5, r0
}
   2df50:	4628      	mov	r0, r5
   2df52:	b006      	add	sp, #24
   2df54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			peer_addr = &conn->le.resp_addr;
   2df58:	f106 0196 	add.w	r1, r6, #150	; 0x96
   2df5c:	e7ce      	b.n	2defc <bt_le_create_conn_legacy+0x54>
		return -ENOBUFS;
   2df5e:	f06f 0568 	mvn.w	r5, #104	; 0x68
   2df62:	e7f5      	b.n	2df50 <bt_le_create_conn_legacy+0xa8>
   2df64:	20000030 	.word	0x20000030
   2df68:	200000fc 	.word	0x200000fc

0002df6c <bt_le_create_conn_cancel>:
{
   2df6c:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   2df6e:	2100      	movs	r1, #0
{
   2df70:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   2df72:	f242 000e 	movw	r0, #8206	; 0x200e
   2df76:	f7ff fecf 	bl	2dd18 <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   2df7a:	2500      	movs	r5, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   2df7c:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   2df7e:	230b      	movs	r3, #11
   2df80:	a903      	add	r1, sp, #12
   2df82:	4a06      	ldr	r2, [pc, #24]	; (2df9c <bt_le_create_conn_cancel+0x30>)
   2df84:	9500      	str	r5, [sp, #0]
   2df86:	f7ff feb5 	bl	2dcf4 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   2df8a:	462a      	mov	r2, r5
   2df8c:	4621      	mov	r1, r4
   2df8e:	f242 000e 	movw	r0, #8206	; 0x200e
   2df92:	f7ff ff1d 	bl	2ddd0 <bt_hci_cmd_send_sync>
}
   2df96:	b007      	add	sp, #28
   2df98:	bd30      	pop	{r4, r5, pc}
   2df9a:	bf00      	nop
   2df9c:	200000fc 	.word	0x200000fc

0002dfa0 <conn_auto_initiate>:
{
   2dfa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2dfa2:	7b43      	ldrb	r3, [r0, #13]
   2dfa4:	2b07      	cmp	r3, #7
{
   2dfa6:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2dfa8:	d15a      	bne.n	2e060 <conn_auto_initiate+0xc0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2dfaa:	f3bf 8f5b 	dmb	ish
   2dfae:	6843      	ldr	r3, [r0, #4]
   2dfb0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   2dfb4:	049b      	lsls	r3, r3, #18
   2dfb6:	f100 0604 	add.w	r6, r0, #4
   2dfba:	d41b      	bmi.n	2dff4 <conn_auto_initiate+0x54>
   2dfbc:	78c3      	ldrb	r3, [r0, #3]
   2dfbe:	b123      	cbz	r3, 2dfca <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   2dfc0:	4b28      	ldr	r3, [pc, #160]	; (2e064 <conn_auto_initiate+0xc4>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   2dfc2:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   2dfc6:	071d      	lsls	r5, r3, #28
   2dfc8:	d514      	bpl.n	2dff4 <conn_auto_initiate+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   2dfca:	2102      	movs	r1, #2
   2dfcc:	f242 0016 	movw	r0, #8214	; 0x2016
   2dfd0:	f7ff fea2 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   2dfd4:	4605      	mov	r5, r0
   2dfd6:	b168      	cbz	r0, 2dff4 <conn_auto_initiate+0x54>
   2dfd8:	2102      	movs	r1, #2
   2dfda:	3008      	adds	r0, #8
   2dfdc:	f021 fea4 	bl	4fd28 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2dfe0:	8823      	ldrh	r3, [r4, #0]
   2dfe2:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   2dfe4:	4629      	mov	r1, r5
   2dfe6:	f242 0016 	movw	r0, #8214	; 0x2016
}
   2dfea:	b004      	add	sp, #16
   2dfec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   2dff0:	f7ff becc 	b.w	2dd8c <bt_hci_cmd_send>
   2dff4:	f3bf 8f5b 	dmb	ish
   2dff8:	6863      	ldr	r3, [r4, #4]
   2dffa:	4d1a      	ldr	r5, [pc, #104]	; (2e064 <conn_auto_initiate+0xc4>)
   2dffc:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   2e000:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   2e004:	f3c3 3100 	ubfx	r1, r3, #12, #1
   2e008:	d111      	bne.n	2e02e <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   2e00a:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   2e00e:	07d8      	lsls	r0, r3, #31
   2e010:	d50d      	bpl.n	2e02e <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   2e012:	2302      	movs	r3, #2
   2e014:	9100      	str	r1, [sp, #0]
   2e016:	461a      	mov	r2, r3
   2e018:	4620      	mov	r0, r4
   2e01a:	f01e fa37 	bl	4c48c <bt_le_set_phy>
		if (!err) {
   2e01e:	b930      	cbnz	r0, 2e02e <conn_auto_initiate+0x8e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e020:	2180      	movs	r1, #128	; 0x80
   2e022:	4630      	mov	r0, r6
}
   2e024:	b004      	add	sp, #16
   2e026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2e02a:	f01e b826 	b.w	4c07a <atomic_or>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   2e02e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   2e032:	069a      	lsls	r2, r3, #26
   2e034:	d514      	bpl.n	2e060 <conn_auto_initiate+0xc0>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   2e036:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   2e03a:	689b      	ldr	r3, [r3, #8]
   2e03c:	079b      	lsls	r3, r3, #30
   2e03e:	d50f      	bpl.n	2e060 <conn_auto_initiate+0xc0>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   2e040:	f10d 010e 	add.w	r1, sp, #14
   2e044:	a803      	add	r0, sp, #12
   2e046:	f01e f9cf 	bl	4c3e8 <hci_le_read_max_data_len>
			if (!err) {
   2e04a:	b948      	cbnz	r0, 2e060 <conn_auto_initiate+0xc0>
				err = bt_le_set_data_len(conn,
   2e04c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2e050:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2e054:	4620      	mov	r0, r4
}
   2e056:	b004      	add	sp, #16
   2e058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				err = bt_le_set_data_len(conn,
   2e05c:	f01e b9f9 	b.w	4c452 <bt_le_set_data_len>
}
   2e060:	b004      	add	sp, #16
   2e062:	bd70      	pop	{r4, r5, r6, pc}
   2e064:	20000030 	.word	0x20000030

0002e068 <bt_hci_le_enh_conn_complete>:
{
   2e068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2e06c:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   2e070:	4986      	ldr	r1, [pc, #536]	; (2e28c <bt_hci_le_enh_conn_complete+0x224>)
	handle |= ~BT_ACL_HANDLE_MASK;
   2e072:	ea6f 5307 	mvn.w	r3, r7, lsl #20
   2e076:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   2e07a:	4605      	mov	r5, r0
   2e07c:	b085      	sub	sp, #20
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2e07e:	fa1f f887 	uxth.w	r8, r7
	handle |= ~BT_ACL_HANDLE_MASK;
   2e082:	b29b      	uxth	r3, r3
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   2e084:	2200      	movs	r2, #0
   2e086:	4608      	mov	r0, r1
		if (disconnected_handles[i] == handle) {
   2e088:	f831 4b02 	ldrh.w	r4, [r1], #2
   2e08c:	42a3      	cmp	r3, r4
   2e08e:	d120      	bne.n	2e0d2 <bt_hci_le_enh_conn_complete+0x6a>
			disconnected_handles[i] = 0;
   2e090:	2300      	movs	r3, #0
   2e092:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
			return true;
   2e096:	2601      	movs	r6, #1
	bt_id_pending_keys_update();
   2e098:	f000 fb32 	bl	2e700 <bt_id_pending_keys_update>
	if (evt->status) {
   2e09c:	782c      	ldrb	r4, [r5, #0]
   2e09e:	2c00      	cmp	r4, #0
   2e0a0:	d03d      	beq.n	2e11e <bt_hci_le_enh_conn_complete+0xb6>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2e0a2:	2c3c      	cmp	r4, #60	; 0x3c
   2e0a4:	d11a      	bne.n	2e0dc <bt_hci_le_enh_conn_complete+0x74>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2e0a6:	f000 fe9b 	bl	2ede0 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e0aa:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2e0ae:	3010      	adds	r0, #16
   2e0b0:	f01d fff2 	bl	4c098 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   2e0b4:	2000      	movs	r0, #0
   2e0b6:	f7ff fcdb 	bl	2da70 <find_pending_connect.part.0>
		if (!conn) {
   2e0ba:	4605      	mov	r5, r0
   2e0bc:	b360      	cbz	r0, 2e118 <bt_hci_le_enh_conn_complete+0xb0>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   2e0be:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2e0c0:	2100      	movs	r1, #0
   2e0c2:	f001 fd6b 	bl	2fb9c <bt_conn_set_state>
		bt_conn_unref(conn);
   2e0c6:	4628      	mov	r0, r5
}
   2e0c8:	b005      	add	sp, #20
   2e0ca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   2e0ce:	f01e be84 	b.w	4cdda <bt_conn_unref>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   2e0d2:	3201      	adds	r2, #1
   2e0d4:	2a06      	cmp	r2, #6
   2e0d6:	d1d7      	bne.n	2e088 <bt_hci_le_enh_conn_complete+0x20>
	return false;
   2e0d8:	2600      	movs	r6, #0
   2e0da:	e7dd      	b.n	2e098 <bt_hci_le_enh_conn_complete+0x30>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2e0dc:	2c02      	cmp	r4, #2
   2e0de:	d11b      	bne.n	2e118 <bt_hci_le_enh_conn_complete+0xb0>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   2e0e0:	2100      	movs	r1, #0
   2e0e2:	2206      	movs	r2, #6
   2e0e4:	4608      	mov	r0, r1
   2e0e6:	f001 ff81 	bl	2ffec <bt_conn_lookup_state_le>
	if (!conn) {
   2e0ea:	4605      	mov	r5, r0
   2e0ec:	b188      	cbz	r0, 2e112 <bt_hci_le_enh_conn_complete+0xaa>
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   2e0ee:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2e0f0:	2100      	movs	r1, #0
   2e0f2:	f001 fd53 	bl	2fb9c <bt_conn_set_state>
   2e0f6:	f3bf 8f5b 	dmb	ish
   2e0fa:	686b      	ldr	r3, [r5, #4]
   2e0fc:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   2e100:	07da      	lsls	r2, r3, #31
   2e102:	d503      	bpl.n	2e10c <bt_hci_le_enh_conn_complete+0xa4>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   2e104:	4621      	mov	r1, r4
   2e106:	4628      	mov	r0, r5
   2e108:	f001 fd48 	bl	2fb9c <bt_conn_set_state>
	bt_conn_unref(conn);
   2e10c:	4628      	mov	r0, r5
   2e10e:	f01e fe64 	bl	4cdda <bt_conn_unref>
			bt_le_scan_update(false);
   2e112:	2000      	movs	r0, #0
   2e114:	f001 f8f4 	bl	2f300 <bt_le_scan_update>
}
   2e118:	b005      	add	sp, #20
   2e11a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   2e11e:	792b      	ldrb	r3, [r5, #4]
   2e120:	3b02      	subs	r3, #2
   2e122:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   2e124:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   2e128:	f200 8092 	bhi.w	2e250 <bt_hci_le_enh_conn_complete+0x1e8>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   2e12c:	4649      	mov	r1, r9
   2e12e:	a802      	add	r0, sp, #8
   2e130:	f01d ffa0 	bl	4c074 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   2e134:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   2e138:	2206      	movs	r2, #6
   2e13a:	3b02      	subs	r3, #2
   2e13c:	f105 0111 	add.w	r1, r5, #17
   2e140:	f10d 0001 	add.w	r0, sp, #1
   2e144:	f88d 3008 	strb.w	r3, [sp, #8]
   2e148:	f01d fe0d 	bl	4bd66 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   2e14c:	2301      	movs	r3, #1
   2e14e:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
   2e152:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   2e154:	2800      	cmp	r0, #0
   2e156:	f040 808e 	bne.w	2e276 <bt_hci_le_enh_conn_complete+0x20e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   2e15a:	2206      	movs	r2, #6
   2e15c:	a902      	add	r1, sp, #8
   2e15e:	f001 ff45 	bl	2ffec <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2e162:	78eb      	ldrb	r3, [r5, #3]
   2e164:	2b01      	cmp	r3, #1
   2e166:	4604      	mov	r4, r0
   2e168:	d10a      	bne.n	2e180 <bt_hci_le_enh_conn_complete+0x118>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2e16a:	f000 fe39 	bl	2ede0 <bt_le_adv_lookup_legacy>
   2e16e:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2e172:	4681      	mov	r9, r0
   2e174:	3010      	adds	r0, #16
   2e176:	f01d ff8f 	bl	4c098 <atomic_and>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   2e17a:	4648      	mov	r0, r9
   2e17c:	f01e fd3e 	bl	4cbfc <bt_le_lim_adv_cancel_timeout>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2e180:	78eb      	ldrb	r3, [r5, #3]
   2e182:	b923      	cbnz	r3, 2e18e <bt_hci_le_enh_conn_complete+0x126>
   2e184:	4842      	ldr	r0, [pc, #264]	; (2e290 <bt_hci_le_enh_conn_complete+0x228>)
   2e186:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   2e18a:	f01d ff85 	bl	4c098 <atomic_and>
	if (!conn) {
   2e18e:	2c00      	cmp	r4, #0
   2e190:	d073      	beq.n	2e27a <bt_hci_le_enh_conn_complete+0x212>
	conn->handle = handle;
   2e192:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   2e194:	a902      	add	r1, sp, #8
	conn->handle = handle;
   2e196:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   2e19a:	f01d ff6b 	bl	4c074 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   2e19e:	7e2a      	ldrb	r2, [r5, #24]
   2e1a0:	7deb      	ldrb	r3, [r5, #23]
   2e1a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2e1a6:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   2e1aa:	7eaa      	ldrb	r2, [r5, #26]
   2e1ac:	7e6b      	ldrb	r3, [r5, #25]
   2e1ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2e1b2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   2e1b6:	7f2a      	ldrb	r2, [r5, #28]
   2e1b8:	7eeb      	ldrb	r3, [r5, #27]
   2e1ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2e1be:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   2e1c2:	78eb      	ldrb	r3, [r5, #3]
   2e1c4:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   2e1c6:	2200      	movs	r2, #0
   2e1c8:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2e1ca:	2b01      	cmp	r3, #1
	conn->le.phy.tx_phy = BT_GAP_LE_PHY_1M;
   2e1cc:	f240 1201 	movw	r2, #257	; 0x101
   2e1d0:	f8a4 20b8 	strh.w	r2, [r4, #184]	; 0xb8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2e1d4:	d115      	bne.n	2e202 <bt_hci_le_enh_conn_complete+0x19a>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   2e1d6:	4669      	mov	r1, sp
   2e1d8:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   2e1dc:	f01d ff4a 	bl	4c074 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2e1e0:	f000 fdfe 	bl	2ede0 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   2e1e4:	7a21      	ldrb	r1, [r4, #8]
   2e1e6:	4d2b      	ldr	r5, [pc, #172]	; (2e294 <bt_hci_le_enh_conn_complete+0x22c>)
   2e1e8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   2e1ec:	4429      	add	r1, r5
   2e1ee:	f104 0096 	add.w	r0, r4, #150	; 0x96
   2e1f2:	f01d ff3f 	bl	4c074 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   2e1f6:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   2e1fa:	065b      	lsls	r3, r3, #25
   2e1fc:	d501      	bpl.n	2e202 <bt_hci_le_enh_conn_complete+0x19a>
			bt_le_adv_resume();
   2e1fe:	f000 ffa9 	bl	2f154 <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2e202:	78e3      	ldrb	r3, [r4, #3]
   2e204:	b96b      	cbnz	r3, 2e222 <bt_hci_le_enh_conn_complete+0x1ba>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   2e206:	4669      	mov	r1, sp
   2e208:	f104 0096 	add.w	r0, r4, #150	; 0x96
   2e20c:	f01d ff32 	bl	4c074 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   2e210:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   2e212:	4b20      	ldr	r3, [pc, #128]	; (2e294 <bt_hci_le_enh_conn_complete+0x22c>)
					&bt_dev.id_addr[conn->id]);
   2e214:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   2e218:	4419      	add	r1, r3
   2e21a:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   2e21e:	f01d ff29 	bl	4c074 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   2e222:	2107      	movs	r1, #7
   2e224:	4620      	mov	r0, r4
   2e226:	f001 fcb9 	bl	2fb9c <bt_conn_set_state>
	if (is_disconnected) {
   2e22a:	b11e      	cbz	r6, 2e234 <bt_hci_le_enh_conn_complete+0x1cc>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2e22c:	2101      	movs	r1, #1
   2e22e:	4620      	mov	r0, r4
   2e230:	f001 fcb4 	bl	2fb9c <bt_conn_set_state>
	bt_conn_connected(conn);
   2e234:	4620      	mov	r0, r4
   2e236:	f01e fe0b 	bl	4ce50 <bt_conn_connected>
	conn_auto_initiate(conn);
   2e23a:	4620      	mov	r0, r4
   2e23c:	f7ff feb0 	bl	2dfa0 <conn_auto_initiate>
	bt_conn_unref(conn);
   2e240:	4620      	mov	r0, r4
   2e242:	f01e fdca 	bl	4cdda <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2e246:	78e3      	ldrb	r3, [r4, #3]
   2e248:	2b00      	cmp	r3, #0
   2e24a:	f47f af65 	bne.w	2e118 <bt_hci_le_enh_conn_complete+0xb0>
   2e24e:	e760      	b.n	2e112 <bt_hci_le_enh_conn_complete+0xaa>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   2e250:	78eb      	ldrb	r3, [r5, #3]
   2e252:	2b01      	cmp	r3, #1
   2e254:	bf04      	itt	eq
   2e256:	4b0f      	ldreq	r3, [pc, #60]	; (2e294 <bt_hci_le_enh_conn_complete+0x22c>)
   2e258:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   2e25c:	4649      	mov	r1, r9
   2e25e:	4620      	mov	r0, r4
   2e260:	f01e fb3d 	bl	4c8de <bt_lookup_id_addr>
   2e264:	4601      	mov	r1, r0
   2e266:	a802      	add	r0, sp, #8
   2e268:	f01d ff04 	bl	4c074 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   2e26c:	4649      	mov	r1, r9
   2e26e:	4668      	mov	r0, sp
   2e270:	f01d ff00 	bl	4c074 <bt_addr_le_copy>
   2e274:	e76d      	b.n	2e152 <bt_hci_le_enh_conn_complete+0xea>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   2e276:	2801      	cmp	r0, #1
   2e278:	d004      	beq.n	2e284 <bt_hci_le_enh_conn_complete+0x21c>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   2e27a:	211f      	movs	r1, #31
   2e27c:	4640      	mov	r0, r8
   2e27e:	f01e f8cd 	bl	4c41c <bt_hci_disconnect>
		return;
   2e282:	e749      	b.n	2e118 <bt_hci_le_enh_conn_complete+0xb0>
   2e284:	a802      	add	r0, sp, #8
   2e286:	f7ff fbf3 	bl	2da70 <find_pending_connect.part.0>
   2e28a:	e76a      	b.n	2e162 <bt_hci_le_enh_conn_complete+0xfa>
   2e28c:	20007214 	.word	0x20007214
   2e290:	200000fc 	.word	0x200000fc
   2e294:	20000030 	.word	0x20000030

0002e298 <bt_unpair>:
{
   2e298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2e29a:	460c      	mov	r4, r1
   2e29c:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
   2e2a0:	b9d0      	cbnz	r0, 2e2d8 <bt_unpair+0x40>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   2e2a2:	b949      	cbnz	r1, 2e2b8 <bt_unpair+0x20>
		bt_foreach_bond(id, unpair_remote, &id);
   2e2a4:	490e      	ldr	r1, [pc, #56]	; (2e2e0 <bt_unpair+0x48>)
   2e2a6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2e2aa:	f10d 0207 	add.w	r2, sp, #7
   2e2ae:	f005 fcd1 	bl	33c54 <bt_foreach_bond>
		return 0;
   2e2b2:	2000      	movs	r0, #0
}
   2e2b4:	b004      	add	sp, #16
   2e2b6:	bd10      	pop	{r4, pc}
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   2e2b8:	9002      	str	r0, [sp, #8]
	return memcmp(a, b, sizeof(*a));
   2e2ba:	2207      	movs	r2, #7
   2e2bc:	f8cd 000b 	str.w	r0, [sp, #11]
   2e2c0:	a902      	add	r1, sp, #8
   2e2c2:	4620      	mov	r0, r4
   2e2c4:	f01d fd3f 	bl	4bd46 <memcmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   2e2c8:	2800      	cmp	r0, #0
   2e2ca:	d0eb      	beq.n	2e2a4 <bt_unpair+0xc>
	unpair(id, addr);
   2e2cc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2e2d0:	4621      	mov	r1, r4
   2e2d2:	f7ff fb5f 	bl	2d994 <unpair>
	return 0;
   2e2d6:	e7ec      	b.n	2e2b2 <bt_unpair+0x1a>
		return -EINVAL;
   2e2d8:	f06f 0015 	mvn.w	r0, #21
   2e2dc:	e7ea      	b.n	2e2b4 <bt_unpair+0x1c>
   2e2de:	bf00      	nop
   2e2e0:	0004c0b7 	.word	0x0004c0b7

0002e2e4 <bt_security_err_get>:
	switch (hci_err) {
   2e2e4:	2829      	cmp	r0, #41	; 0x29
   2e2e6:	bf9a      	itte	ls
   2e2e8:	4b01      	ldrls	r3, [pc, #4]	; (2e2f0 <bt_security_err_get+0xc>)
   2e2ea:	5c18      	ldrbls	r0, [r3, r0]
{
   2e2ec:	2009      	movhi	r0, #9
}
   2e2ee:	4770      	bx	lr
   2e2f0:	0005436f 	.word	0x0005436f

0002e2f4 <hci_event_prio>:
{
   2e2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e2f8:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   2e2fa:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   2e2fe:	4630      	mov	r0, r6
   2e300:	f021 fd5b 	bl	4fdba <net_buf_simple_headroom>
	state->len = buf->len;
   2e304:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2e308:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   2e30c:	4605      	mov	r5, r0
   2e30e:	d80c      	bhi.n	2e32a <hci_event_prio+0x36>
   2e310:	4a1c      	ldr	r2, [pc, #112]	; (2e384 <hci_event_prio+0x90>)
   2e312:	491d      	ldr	r1, [pc, #116]	; (2e388 <hci_event_prio+0x94>)
   2e314:	481d      	ldr	r0, [pc, #116]	; (2e38c <hci_event_prio+0x98>)
   2e316:	f640 532f 	movw	r3, #3375	; 0xd2f
   2e31a:	f01b fbf5 	bl	49b08 <printk>
   2e31e:	4040      	eors	r0, r0
   2e320:	f380 8811 	msr	BASEPRI, r0
   2e324:	f04f 0003 	mov.w	r0, #3
   2e328:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   2e32a:	4630      	mov	r0, r6
   2e32c:	2102      	movs	r1, #2
   2e32e:	f021 fd2c 	bl	4fd8a <net_buf_simple_pull_mem>
   2e332:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2e334:	7800      	ldrb	r0, [r0, #0]
   2e336:	f01d fe5b 	bl	4bff0 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2e33a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2e33c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2e33e:	d40c      	bmi.n	2e35a <hci_event_prio+0x66>
   2e340:	4a10      	ldr	r2, [pc, #64]	; (2e384 <hci_event_prio+0x90>)
   2e342:	4913      	ldr	r1, [pc, #76]	; (2e390 <hci_event_prio+0x9c>)
   2e344:	4811      	ldr	r0, [pc, #68]	; (2e38c <hci_event_prio+0x98>)
   2e346:	f640 5333 	movw	r3, #3379	; 0xd33
   2e34a:	f01b fbdd 	bl	49b08 <printk>
   2e34e:	4040      	eors	r0, r0
   2e350:	f380 8811 	msr	BASEPRI, r0
   2e354:	f04f 0003 	mov.w	r0, #3
   2e358:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   2e35a:	2305      	movs	r3, #5
   2e35c:	4a0d      	ldr	r2, [pc, #52]	; (2e394 <hci_event_prio+0xa0>)
   2e35e:	7838      	ldrb	r0, [r7, #0]
   2e360:	4621      	mov	r1, r4
   2e362:	f01d fe57 	bl	4c014 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   2e366:	07b3      	lsls	r3, r6, #30
   2e368:	d507      	bpl.n	2e37a <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   2e36a:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   2e36c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2e370:	fa13 f585 	uxtah	r5, r3, r5
   2e374:	60a5      	str	r5, [r4, #8]
}
   2e376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   2e37a:	4620      	mov	r0, r4
}
   2e37c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   2e380:	f015 bb48 	b.w	43a14 <net_buf_unref>
   2e384:	00054268 	.word	0x00054268
   2e388:	000542e6 	.word	0x000542e6
   2e38c:	000542a5 	.word	0x000542a5
   2e390:	000542ff 	.word	0x000542ff
   2e394:	000527bc 	.word	0x000527bc

0002e398 <bt_recv>:
{
   2e398:	b570      	push	{r4, r5, r6, lr}
	if (bt_recv_thread_id == NULL) {
   2e39a:	4d3b      	ldr	r5, [pc, #236]	; (2e488 <bt_recv+0xf0>)
   2e39c:	682b      	ldr	r3, [r5, #0]
{
   2e39e:	4604      	mov	r4, r0
	if (bt_recv_thread_id == NULL) {
   2e3a0:	b913      	cbnz	r3, 2e3a8 <bt_recv+0x10>
	return z_impl_z_current_get();
   2e3a2:	f01a fbd3 	bl	48b4c <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
   2e3a6:	6028      	str	r0, [r5, #0]
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2e3a8:	7d23      	ldrb	r3, [r4, #20]
	switch (bt_buf_get_type(buf)) {
   2e3aa:	2b01      	cmp	r3, #1
   2e3ac:	d036      	beq.n	2e41c <bt_recv+0x84>
   2e3ae:	2b03      	cmp	r3, #3
   2e3b0:	d163      	bne.n	2e47a <bt_recv+0xe2>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2e3b2:	89a3      	ldrh	r3, [r4, #12]
   2e3b4:	2b03      	cmp	r3, #3
   2e3b6:	d80c      	bhi.n	2e3d2 <bt_recv+0x3a>
   2e3b8:	4a34      	ldr	r2, [pc, #208]	; (2e48c <bt_recv+0xf4>)
   2e3ba:	4935      	ldr	r1, [pc, #212]	; (2e490 <bt_recv+0xf8>)
   2e3bc:	4835      	ldr	r0, [pc, #212]	; (2e494 <bt_recv+0xfc>)
   2e3be:	f240 13b5 	movw	r3, #437	; 0x1b5
   2e3c2:	f01b fba1 	bl	49b08 <printk>
   2e3c6:	4040      	eors	r0, r0
   2e3c8:	f380 8811 	msr	BASEPRI, r0
   2e3cc:	f04f 0003 	mov.w	r0, #3
   2e3d0:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   2e3d2:	2104      	movs	r1, #4
   2e3d4:	f104 0008 	add.w	r0, r4, #8
   2e3d8:	f021 fcd7 	bl	4fd8a <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   2e3dc:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   2e3de:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   2e3e0:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   2e3e2:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   2e3e4:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   2e3e6:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   2e3ea:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   2e3ec:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   2e3ee:	d003      	beq.n	2e3f8 <bt_recv+0x60>
	net_buf_unref(buf);
   2e3f0:	4620      	mov	r0, r4
   2e3f2:	f015 fb0f 	bl	43a14 <net_buf_unref>
}
   2e3f6:	e00f      	b.n	2e418 <bt_recv+0x80>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   2e3f8:	f001 fbc8 	bl	2fb8c <bt_conn_lookup_handle>
	if (!conn) {
   2e3fc:	4605      	mov	r5, r0
   2e3fe:	2800      	cmp	r0, #0
   2e400:	d0f6      	beq.n	2e3f0 <bt_recv+0x58>
	acl(buf)->index = bt_conn_index(conn);
   2e402:	f001 fc9b 	bl	2fd3c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   2e406:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   2e408:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   2e40a:	4621      	mov	r1, r4
   2e40c:	4628      	mov	r0, r5
   2e40e:	f01e fc7c 	bl	4cd0a <bt_conn_recv>
	bt_conn_unref(conn);
   2e412:	4628      	mov	r0, r5
   2e414:	f01e fce1 	bl	4cdda <bt_conn_unref>
		return 0;
   2e418:	2000      	movs	r0, #0
}
   2e41a:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2e41c:	89a3      	ldrh	r3, [r4, #12]
   2e41e:	2b01      	cmp	r3, #1
   2e420:	d80c      	bhi.n	2e43c <bt_recv+0xa4>
   2e422:	4a1a      	ldr	r2, [pc, #104]	; (2e48c <bt_recv+0xf4>)
   2e424:	491a      	ldr	r1, [pc, #104]	; (2e490 <bt_recv+0xf8>)
   2e426:	481b      	ldr	r0, [pc, #108]	; (2e494 <bt_recv+0xfc>)
   2e428:	f640 1317 	movw	r3, #2327	; 0x917
   2e42c:	f01b fb6c 	bl	49b08 <printk>
   2e430:	4040      	eors	r0, r0
   2e432:	f380 8811 	msr	BASEPRI, r0
   2e436:	f04f 0003 	mov.w	r0, #3
   2e43a:	df02      	svc	2
   2e43c:	2102      	movs	r1, #2
   2e43e:	f104 0008 	add.w	r0, r4, #8
   2e442:	f021 fca2 	bl	4fd8a <net_buf_simple_pull_mem>
   2e446:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   2e448:	7800      	ldrb	r0, [r0, #0]
   2e44a:	f01d fdd1 	bl	4bff0 <bt_hci_evt_get_flags>
   2e44e:	0783      	lsls	r3, r0, #30
   2e450:	d40c      	bmi.n	2e46c <bt_recv+0xd4>
   2e452:	4a0e      	ldr	r2, [pc, #56]	; (2e48c <bt_recv+0xf4>)
   2e454:	4910      	ldr	r1, [pc, #64]	; (2e498 <bt_recv+0x100>)
   2e456:	480f      	ldr	r0, [pc, #60]	; (2e494 <bt_recv+0xfc>)
   2e458:	f640 131b 	movw	r3, #2331	; 0x91b
   2e45c:	f01b fb54 	bl	49b08 <printk>
   2e460:	4040      	eors	r0, r0
   2e462:	f380 8811 	msr	BASEPRI, r0
   2e466:	f04f 0003 	mov.w	r0, #3
   2e46a:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   2e46c:	4a0b      	ldr	r2, [pc, #44]	; (2e49c <bt_recv+0x104>)
   2e46e:	7828      	ldrb	r0, [r5, #0]
   2e470:	2306      	movs	r3, #6
   2e472:	4621      	mov	r1, r4
   2e474:	f01d fdce 	bl	4c014 <handle_event>
   2e478:	e7ba      	b.n	2e3f0 <bt_recv+0x58>
		net_buf_unref(buf);
   2e47a:	4620      	mov	r0, r4
   2e47c:	f015 faca 	bl	43a14 <net_buf_unref>
		return -EINVAL;
   2e480:	f06f 0015 	mvn.w	r0, #21
   2e484:	e7c9      	b.n	2e41a <bt_recv+0x82>
   2e486:	bf00      	nop
   2e488:	200045a0 	.word	0x200045a0
   2e48c:	00054268 	.word	0x00054268
   2e490:	000542e6 	.word	0x000542e6
   2e494:	000542a5 	.word	0x000542a5
   2e498:	00054318 	.word	0x00054318
   2e49c:	000527e4 	.word	0x000527e4

0002e4a0 <bt_recv_prio>:
{
   2e4a0:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   2e4a2:	7d03      	ldrb	r3, [r0, #20]
   2e4a4:	2b01      	cmp	r3, #1
{
   2e4a6:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   2e4a8:	d00c      	beq.n	2e4c4 <bt_recv_prio+0x24>
   2e4aa:	4a09      	ldr	r2, [pc, #36]	; (2e4d0 <bt_recv_prio+0x30>)
   2e4ac:	4909      	ldr	r1, [pc, #36]	; (2e4d4 <bt_recv_prio+0x34>)
   2e4ae:	480a      	ldr	r0, [pc, #40]	; (2e4d8 <bt_recv_prio+0x38>)
   2e4b0:	f640 537c 	movw	r3, #3452	; 0xd7c
   2e4b4:	f01b fb28 	bl	49b08 <printk>
   2e4b8:	4040      	eors	r0, r0
   2e4ba:	f380 8811 	msr	BASEPRI, r0
   2e4be:	f04f 0003 	mov.w	r0, #3
   2e4c2:	df02      	svc	2
	hci_event_prio(buf);
   2e4c4:	4620      	mov	r0, r4
   2e4c6:	f7ff ff15 	bl	2e2f4 <hci_event_prio>
}
   2e4ca:	2000      	movs	r0, #0
   2e4cc:	bd10      	pop	{r4, pc}
   2e4ce:	bf00      	nop
   2e4d0:	00054268 	.word	0x00054268
   2e4d4:	00054346 	.word	0x00054346
   2e4d8:	000542a5 	.word	0x000542a5

0002e4dc <bt_hci_driver_register>:
	if (bt_dev.drv) {
   2e4dc:	4a08      	ldr	r2, [pc, #32]	; (2e500 <bt_hci_driver_register+0x24>)
{
   2e4de:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   2e4e0:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   2e4e4:	b930      	cbnz	r0, 2e4f4 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   2e4e6:	68d9      	ldr	r1, [r3, #12]
   2e4e8:	b139      	cbz	r1, 2e4fa <bt_hci_driver_register+0x1e>
   2e4ea:	6919      	ldr	r1, [r3, #16]
   2e4ec:	b129      	cbz	r1, 2e4fa <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   2e4ee:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
   2e4f2:	4770      	bx	lr
		return -EALREADY;
   2e4f4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2e4f8:	4770      	bx	lr
		return -EINVAL;
   2e4fa:	f06f 0015 	mvn.w	r0, #21
}
   2e4fe:	4770      	bx	lr
   2e500:	20000030 	.word	0x20000030

0002e504 <bt_finalize_init>:
{
   2e504:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e506:	4804      	ldr	r0, [pc, #16]	; (2e518 <bt_finalize_init+0x14>)
   2e508:	2102      	movs	r1, #2
   2e50a:	f01d fdb6 	bl	4c07a <atomic_or>
}
   2e50e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
   2e512:	2000      	movs	r0, #0
   2e514:	f000 bef4 	b.w	2f300 <bt_le_scan_update>
   2e518:	200000fc 	.word	0x200000fc

0002e51c <init_work>:

static void init_work(struct k_work *work)
{
   2e51c:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
   2e51e:	f7f7 ff5b 	bl	263d8 <bt_init>
	if (ready_cb) {
   2e522:	4b03      	ldr	r3, [pc, #12]	; (2e530 <init_work+0x14>)
   2e524:	681b      	ldr	r3, [r3, #0]
   2e526:	b113      	cbz	r3, 2e52e <init_work+0x12>
		ready_cb(err);
	}
}
   2e528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   2e52c:	4718      	bx	r3
}
   2e52e:	bd10      	pop	{r4, pc}
   2e530:	200045bc 	.word	0x200045bc

0002e534 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   2e534:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   2e536:	4d22      	ldr	r5, [pc, #136]	; (2e5c0 <bt_enable+0x8c>)
   2e538:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
   2e53c:	b088      	sub	sp, #32
   2e53e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   2e540:	2b00      	cmp	r3, #0
   2e542:	d037      	beq.n	2e5b4 <bt_enable+0x80>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e544:	2101      	movs	r1, #1
   2e546:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   2e54a:	f01d fd96 	bl	4c07a <atomic_or>
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2e54e:	07c3      	lsls	r3, r0, #31
   2e550:	d433      	bmi.n	2e5ba <bt_enable+0x86>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		err = bt_settings_init();
   2e552:	f01d fcf4 	bl	4bf3e <bt_settings_init>
		if (err) {
   2e556:	4604      	mov	r4, r0
   2e558:	bb48      	cbnz	r0, 2e5ae <bt_enable+0x7a>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   2e55a:	4b1a      	ldr	r3, [pc, #104]	; (2e5c4 <bt_enable+0x90>)
   2e55c:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2e55e:	2200      	movs	r2, #0
   2e560:	2300      	movs	r3, #0
   2e562:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2e566:	f06f 0308 	mvn.w	r3, #8
   2e56a:	e9cd 0302 	strd	r0, r3, [sp, #8]
   2e56e:	e9cd 0000 	strd	r0, r0, [sp]
   2e572:	9004      	str	r0, [sp, #16]
   2e574:	4b14      	ldr	r3, [pc, #80]	; (2e5c8 <bt_enable+0x94>)
   2e576:	4915      	ldr	r1, [pc, #84]	; (2e5cc <bt_enable+0x98>)
   2e578:	4815      	ldr	r0, [pc, #84]	; (2e5d0 <bt_enable+0x9c>)
   2e57a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2e57e:	f019 fb99 	bl	47cb4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2e582:	4914      	ldr	r1, [pc, #80]	; (2e5d4 <bt_enable+0xa0>)
   2e584:	4812      	ldr	r0, [pc, #72]	; (2e5d0 <bt_enable+0x9c>)
   2e586:	f022 fa2e 	bl	509e6 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&rx_thread_data, "BT RX");
#endif

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
   2e58a:	f7ff f84f 	bl	2d62c <bt_hci_ecc_init>
	}

	err = bt_dev.drv->open();
   2e58e:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   2e592:	68db      	ldr	r3, [r3, #12]
   2e594:	4798      	blx	r3
	if (err) {
   2e596:	4604      	mov	r4, r0
   2e598:	b948      	cbnz	r0, 2e5ae <bt_enable+0x7a>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   2e59a:	b926      	cbnz	r6, 2e5a6 <bt_enable+0x72>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   2e59c:	b008      	add	sp, #32
   2e59e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   2e5a2:	f7f7 bf19 	b.w	263d8 <bt_init>
	k_work_submit(&bt_dev.init);
   2e5a6:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   2e5aa:	f019 ff49 	bl	48440 <k_work_submit>
}
   2e5ae:	4620      	mov	r0, r4
   2e5b0:	b008      	add	sp, #32
   2e5b2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2e5b4:	f06f 0412 	mvn.w	r4, #18
   2e5b8:	e7f9      	b.n	2e5ae <bt_enable+0x7a>
		return -EALREADY;
   2e5ba:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2e5be:	e7f6      	b.n	2e5ae <bt_enable+0x7a>
   2e5c0:	20000030 	.word	0x20000030
   2e5c4:	200045bc 	.word	0x200045bc
   2e5c8:	0002dbc5 	.word	0x0002dbc5
   2e5cc:	20007ca8 	.word	0x20007ca8
   2e5d0:	20001aa8 	.word	0x20001aa8
   2e5d4:	00054369 	.word	0x00054369

0002e5d8 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   2e5d8:	4800      	ldr	r0, [pc, #0]	; (2e5dc <bt_get_name+0x4>)
   2e5da:	4770      	bx	lr
   2e5dc:	00053f11 	.word	0x00053f11

0002e5e0 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   2e5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   2e5e2:	4f0b      	ldr	r7, [pc, #44]	; (2e610 <id_find+0x30>)
{
   2e5e4:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   2e5e6:	2500      	movs	r5, #0
   2e5e8:	79fb      	ldrb	r3, [r7, #7]
   2e5ea:	b2ec      	uxtb	r4, r5
   2e5ec:	42a3      	cmp	r3, r4
   2e5ee:	d802      	bhi.n	2e5f6 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   2e5f0:	f06f 0001 	mvn.w	r0, #1
   2e5f4:	e00a      	b.n	2e60c <id_find+0x2c>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   2e5f6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   2e5fa:	2207      	movs	r2, #7
   2e5fc:	4439      	add	r1, r7
   2e5fe:	4630      	mov	r0, r6
   2e600:	f01d fba1 	bl	4bd46 <memcmp>
   2e604:	3501      	adds	r5, #1
   2e606:	2800      	cmp	r0, #0
   2e608:	d1ee      	bne.n	2e5e8 <id_find+0x8>
   2e60a:	4620      	mov	r0, r4
}
   2e60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e60e:	bf00      	nop
   2e610:	20000030 	.word	0x20000030

0002e614 <set_random_address>:
{
   2e614:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   2e616:	4913      	ldr	r1, [pc, #76]	; (2e664 <set_random_address+0x50>)
   2e618:	2206      	movs	r2, #6
   2e61a:	4605      	mov	r5, r0
   2e61c:	f01d fb93 	bl	4bd46 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   2e620:	b1d8      	cbz	r0, 2e65a <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   2e622:	2106      	movs	r1, #6
   2e624:	f242 0005 	movw	r0, #8197	; 0x2005
   2e628:	f7ff fb76 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   2e62c:	4604      	mov	r4, r0
   2e62e:	b1b0      	cbz	r0, 2e65e <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2e630:	2206      	movs	r2, #6
   2e632:	4629      	mov	r1, r5
   2e634:	3008      	adds	r0, #8
   2e636:	f021 fb7d 	bl	4fd34 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   2e63a:	2200      	movs	r2, #0
   2e63c:	4621      	mov	r1, r4
   2e63e:	f242 0005 	movw	r0, #8197	; 0x2005
   2e642:	f7ff fbc5 	bl	2ddd0 <bt_hci_cmd_send_sync>
	if (err) {
   2e646:	b948      	cbnz	r0, 2e65c <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   2e648:	2206      	movs	r2, #6
   2e64a:	4806      	ldr	r0, [pc, #24]	; (2e664 <set_random_address+0x50>)
   2e64c:	4629      	mov	r1, r5
   2e64e:	f01d fb8a 	bl	4bd66 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   2e652:	4b05      	ldr	r3, [pc, #20]	; (2e668 <set_random_address+0x54>)
   2e654:	2201      	movs	r2, #1
   2e656:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
   2e65a:	2000      	movs	r0, #0
}
   2e65c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2e65e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2e662:	e7fb      	b.n	2e65c <set_random_address+0x48>
   2e664:	20000091 	.word	0x20000091
   2e668:	20000030 	.word	0x20000030

0002e66c <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   2e66c:	b530      	push	{r4, r5, lr}
   2e66e:	4604      	mov	r4, r0
   2e670:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2e672:	460d      	mov	r5, r1
   2e674:	b1d1      	cbz	r1, 2e6ac <id_create.constprop.0+0x40>
   2e676:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2e678:	2207      	movs	r2, #7
   2e67a:	a902      	add	r1, sp, #8
   2e67c:	4628      	mov	r0, r5
   2e67e:	9302      	str	r3, [sp, #8]
   2e680:	f8cd 300b 	str.w	r3, [sp, #11]
   2e684:	f01d fb5f 	bl	4bd46 <memcmp>
   2e688:	b180      	cbz	r0, 2e6ac <id_create.constprop.0+0x40>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   2e68a:	4814      	ldr	r0, [pc, #80]	; (2e6dc <id_create.constprop.0+0x70>)
   2e68c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2e690:	4629      	mov	r1, r5
   2e692:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   2e694:	f01e f894 	bl	4c7c0 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e698:	4811      	ldr	r0, [pc, #68]	; (2e6e0 <id_create.constprop.0+0x74>)
   2e69a:	f01e f894 	bl	4c7c6 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   2e69e:	0783      	lsls	r3, r0, #30
   2e6a0:	d501      	bpl.n	2e6a6 <id_create.constprop.0+0x3a>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   2e6a2:	f7ff f857 	bl	2d754 <bt_settings_save_id>
	}

	return 0;
   2e6a6:	2000      	movs	r0, #0
}
   2e6a8:	b005      	add	sp, #20
   2e6aa:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   2e6ac:	4668      	mov	r0, sp
   2e6ae:	f01d fc91 	bl	4bfd4 <bt_addr_le_create_static>
			if (err) {
   2e6b2:	2800      	cmp	r0, #0
   2e6b4:	d1f8      	bne.n	2e6a8 <id_create.constprop.0+0x3c>
		} while (id_find(&new_addr) >= 0);
   2e6b6:	4668      	mov	r0, sp
   2e6b8:	f7ff ff92 	bl	2e5e0 <id_find>
   2e6bc:	2800      	cmp	r0, #0
   2e6be:	daf5      	bge.n	2e6ac <id_create.constprop.0+0x40>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   2e6c0:	4b06      	ldr	r3, [pc, #24]	; (2e6dc <id_create.constprop.0+0x70>)
   2e6c2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2e6c6:	441c      	add	r4, r3
   2e6c8:	4669      	mov	r1, sp
   2e6ca:	4620      	mov	r0, r4
   2e6cc:	f01e f878 	bl	4c7c0 <bt_addr_le_copy>
		if (addr) {
   2e6d0:	2d00      	cmp	r5, #0
   2e6d2:	d0e1      	beq.n	2e698 <id_create.constprop.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   2e6d4:	4621      	mov	r1, r4
   2e6d6:	4628      	mov	r0, r5
   2e6d8:	e7dc      	b.n	2e694 <id_create.constprop.0+0x28>
   2e6da:	bf00      	nop
   2e6dc:	20000030 	.word	0x20000030
   2e6e0:	200000fc 	.word	0x200000fc

0002e6e4 <bt_id_adv_random_addr_check>:
{
   2e6e4:	b508      	push	{r3, lr}
   2e6e6:	4805      	ldr	r0, [pc, #20]	; (2e6fc <bt_id_adv_random_addr_check+0x18>)
   2e6e8:	f01e f86d 	bl	4c7c6 <atomic_get>
	if (!(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
   2e6ec:	0503      	lsls	r3, r0, #20
   2e6ee:	d402      	bmi.n	2e6f6 <bt_id_adv_random_addr_check+0x12>
   2e6f0:	4802      	ldr	r0, [pc, #8]	; (2e6fc <bt_id_adv_random_addr_check+0x18>)
   2e6f2:	f01e f868 	bl	4c7c6 <atomic_get>
}
   2e6f6:	2001      	movs	r0, #1
   2e6f8:	bd08      	pop	{r3, pc}
   2e6fa:	bf00      	nop
   2e6fc:	200000fc 	.word	0x200000fc

0002e700 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e700:	4b0a      	ldr	r3, [pc, #40]	; (2e72c <bt_id_pending_keys_update+0x2c>)
   2e702:	f3bf 8f5b 	dmb	ish
   2e706:	e853 2f00 	ldrex	r2, [r3]
   2e70a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   2e70e:	e843 1000 	strex	r0, r1, [r3]
   2e712:	2800      	cmp	r0, #0
   2e714:	d1f7      	bne.n	2e706 <bt_id_pending_keys_update+0x6>
   2e716:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   2e71a:	0493      	lsls	r3, r2, #18
   2e71c:	d504      	bpl.n	2e728 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   2e71e:	4904      	ldr	r1, [pc, #16]	; (2e730 <bt_id_pending_keys_update+0x30>)
   2e720:	2200      	movs	r2, #0
   2e722:	2002      	movs	r0, #2
   2e724:	f005 bab6 	b.w	33c94 <bt_keys_foreach>
}
   2e728:	4770      	bx	lr
   2e72a:	bf00      	nop
   2e72c:	200000fc 	.word	0x200000fc
   2e730:	0004c949 	.word	0x0004c949

0002e734 <bt_id_add>:
{
   2e734:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2e738:	4c4e      	ldr	r4, [pc, #312]	; (2e874 <bt_id_add+0x140>)
   2e73a:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   2e73e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   2e742:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2e744:	b10a      	cbz	r2, 2e74a <bt_id_add+0x16>
   2e746:	429a      	cmp	r2, r3
   2e748:	d209      	bcs.n	2e75e <bt_id_add+0x2a>
		bt_dev.le.rl_entries++;
   2e74a:	3301      	adds	r3, #1
   2e74c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   2e750:	7a2b      	ldrb	r3, [r5, #8]
   2e752:	f043 0304 	orr.w	r3, r3, #4
   2e756:	722b      	strb	r3, [r5, #8]
}
   2e758:	b002      	add	sp, #8
   2e75a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   2e75e:	2100      	movs	r1, #0
   2e760:	2206      	movs	r2, #6
   2e762:	4608      	mov	r0, r1
   2e764:	f001 fc42 	bl	2ffec <bt_conn_lookup_state_le>
	if (conn) {
   2e768:	f104 03cc 	add.w	r3, r4, #204	; 0xcc
   2e76c:	4606      	mov	r6, r0
   2e76e:	b1a0      	cbz	r0, 2e79a <bt_id_add+0x66>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e770:	f3bf 8f5b 	dmb	ish
   2e774:	e853 1f00 	ldrex	r1, [r3]
   2e778:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   2e77c:	e843 1200 	strex	r2, r1, [r3]
   2e780:	2a00      	cmp	r2, #0
   2e782:	d1f7      	bne.n	2e774 <bt_id_add+0x40>
   2e784:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   2e788:	7a2b      	ldrb	r3, [r5, #8]
   2e78a:	f043 0301 	orr.w	r3, r3, #1
   2e78e:	722b      	strb	r3, [r5, #8]
}
   2e790:	b002      	add	sp, #8
   2e792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   2e796:	f01e bb20 	b.w	4cdda <bt_conn_unref>
   2e79a:	4618      	mov	r0, r3
   2e79c:	f01e f813 	bl	4c7c6 <atomic_get>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   2e7a0:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2e7a2:	f3c0 1740 	ubfx	r7, r0, #5, #1
   2e7a6:	4834      	ldr	r0, [pc, #208]	; (2e878 <bt_id_add+0x144>)
   2e7a8:	f000 fb14 	bl	2edd4 <bt_le_ext_adv_foreach>
	if (scan_enabled) {
   2e7ac:	b117      	cbz	r7, 2e7b4 <bt_id_add+0x80>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   2e7ae:	4630      	mov	r0, r6
   2e7b0:	f01e fa38 	bl	4cc24 <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries) {
   2e7b4:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2e7b8:	b9b3      	cbnz	r3, 2e7e8 <bt_id_add+0xb4>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   2e7ba:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   2e7be:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   2e7c2:	429a      	cmp	r2, r3
   2e7c4:	d123      	bne.n	2e80e <bt_id_add+0xda>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   2e7c6:	2200      	movs	r2, #0
   2e7c8:	4611      	mov	r1, r2
   2e7ca:	f242 0029 	movw	r0, #8233	; 0x2029
   2e7ce:	f7ff faff 	bl	2ddd0 <bt_hci_cmd_send_sync>
		if (err) {
   2e7d2:	b970      	cbnz	r0, 2e7f2 <bt_id_add+0xbe>
		bt_dev.le.rl_entries++;
   2e7d4:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2e7d8:	3301      	adds	r3, #1
   2e7da:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   2e7de:	7a2b      	ldrb	r3, [r5, #8]
   2e7e0:	f043 0304 	orr.w	r3, r3, #4
   2e7e4:	722b      	strb	r3, [r5, #8]
		goto done;
   2e7e6:	e004      	b.n	2e7f2 <bt_id_add+0xbe>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   2e7e8:	2000      	movs	r0, #0
   2e7ea:	f01e f83a 	bl	4c862 <addr_res_enable>
		if (err) {
   2e7ee:	2800      	cmp	r0, #0
   2e7f0:	d0e3      	beq.n	2e7ba <bt_id_add+0x86>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   2e7f2:	2001      	movs	r0, #1
   2e7f4:	f01e f835 	bl	4c862 <addr_res_enable>
	if (scan_enabled) {
   2e7f8:	b117      	cbz	r7, 2e800 <bt_id_add+0xcc>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2e7fa:	2001      	movs	r0, #1
   2e7fc:	f01e fa12 	bl	4cc24 <bt_le_scan_set_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2e800:	481e      	ldr	r0, [pc, #120]	; (2e87c <bt_id_add+0x148>)
   2e802:	2100      	movs	r1, #0
}
   2e804:	b002      	add	sp, #8
   2e806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2e80a:	f000 bae3 	b.w	2edd4 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2e80e:	f105 0801 	add.w	r8, r5, #1
   2e812:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   2e816:	4640      	mov	r0, r8
   2e818:	f01d fff2 	bl	4c800 <hci_id_add.constprop.0>
	if (err) {
   2e81c:	4606      	mov	r6, r0
   2e81e:	2800      	cmp	r0, #0
   2e820:	d1e7      	bne.n	2e7f2 <bt_id_add+0xbe>
	bt_dev.le.rl_entries++;
   2e822:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2e826:	3301      	adds	r3, #1
   2e828:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   2e82c:	7a2b      	ldrb	r3, [r5, #8]
   2e82e:	f043 0304 	orr.w	r3, r3, #4
   2e832:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   2e834:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   2e838:	075b      	lsls	r3, r3, #29
   2e83a:	d5da      	bpl.n	2e7f2 <bt_id_add+0xbe>
	bt_addr_le_copy(&cp.id_addr, addr);
   2e83c:	4641      	mov	r1, r8
   2e83e:	4668      	mov	r0, sp
   2e840:	f01d ffbe 	bl	4c7c0 <bt_addr_le_copy>
	cp.mode = mode;
   2e844:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   2e846:	2108      	movs	r1, #8
   2e848:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   2e84c:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   2e850:	f7ff fa62 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   2e854:	4604      	mov	r4, r0
   2e856:	2800      	cmp	r0, #0
   2e858:	d0cb      	beq.n	2e7f2 <bt_id_add+0xbe>
   2e85a:	2208      	movs	r2, #8
   2e85c:	4669      	mov	r1, sp
   2e85e:	4410      	add	r0, r2
   2e860:	f021 fa68 	bl	4fd34 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   2e864:	4632      	mov	r2, r6
   2e866:	4621      	mov	r1, r4
   2e868:	f242 004e 	movw	r0, #8270	; 0x204e
   2e86c:	f7ff fab0 	bl	2ddd0 <bt_hci_cmd_send_sync>
	if (err) {
   2e870:	e7bf      	b.n	2e7f2 <bt_id_add+0xbe>
   2e872:	bf00      	nop
   2e874:	20000030 	.word	0x20000030
   2e878:	0004c8a7 	.word	0x0004c8a7
   2e87c:	0004c7d3 	.word	0x0004c7d3

0002e880 <bt_id_del>:
{
   2e880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
   2e884:	4d45      	ldr	r5, [pc, #276]	; (2e99c <bt_id_del+0x11c>)
   2e886:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   2e88a:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
{
   2e88e:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
   2e890:	b112      	cbz	r2, 2e898 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   2e892:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   2e894:	4293      	cmp	r3, r2
   2e896:	dd08      	ble.n	2e8aa <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
   2e898:	3b01      	subs	r3, #1
   2e89a:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   2e89e:	7a23      	ldrb	r3, [r4, #8]
   2e8a0:	f023 0304 	bic.w	r3, r3, #4
   2e8a4:	7223      	strb	r3, [r4, #8]
}
   2e8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   2e8aa:	2100      	movs	r1, #0
   2e8ac:	2206      	movs	r2, #6
   2e8ae:	4608      	mov	r0, r1
   2e8b0:	f001 fb9c 	bl	2ffec <bt_conn_lookup_state_le>
	if (conn) {
   2e8b4:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   2e8b8:	4606      	mov	r6, r0
   2e8ba:	b198      	cbz	r0, 2e8e4 <bt_id_del+0x64>
   2e8bc:	f3bf 8f5b 	dmb	ish
   2e8c0:	e853 1f00 	ldrex	r1, [r3]
   2e8c4:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   2e8c8:	e843 1200 	strex	r2, r1, [r3]
   2e8cc:	2a00      	cmp	r2, #0
   2e8ce:	d1f7      	bne.n	2e8c0 <bt_id_del+0x40>
   2e8d0:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   2e8d4:	7a23      	ldrb	r3, [r4, #8]
   2e8d6:	f043 0302 	orr.w	r3, r3, #2
   2e8da:	7223      	strb	r3, [r4, #8]
}
   2e8dc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   2e8e0:	f01e ba7b 	b.w	4cdda <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e8e4:	4618      	mov	r0, r3
   2e8e6:	f01d ff6e 	bl	4c7c6 <atomic_get>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   2e8ea:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2e8ec:	f3c0 1840 	ubfx	r8, r0, #5, #1
   2e8f0:	482b      	ldr	r0, [pc, #172]	; (2e9a0 <bt_id_del+0x120>)
   2e8f2:	f000 fa6f 	bl	2edd4 <bt_le_ext_adv_foreach>
	if (scan_enabled) {
   2e8f6:	f1b8 0f00 	cmp.w	r8, #0
   2e8fa:	d002      	beq.n	2e902 <bt_id_del+0x82>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   2e8fc:	4630      	mov	r0, r6
   2e8fe:	f01e f991 	bl	4cc24 <bt_le_scan_set_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   2e902:	2000      	movs	r0, #0
   2e904:	f01d ffad 	bl	4c862 <addr_res_enable>
	if (err) {
   2e908:	4607      	mov	r7, r0
   2e90a:	b988      	cbnz	r0, 2e930 <bt_id_del+0xb0>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2e90c:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   2e910:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   2e914:	429a      	cmp	r2, r3
   2e916:	d21d      	bcs.n	2e954 <bt_id_del+0xd4>
		bt_dev.le.rl_entries--;
   2e918:	3b01      	subs	r3, #1
   2e91a:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   2e91e:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2e920:	4920      	ldr	r1, [pc, #128]	; (2e9a4 <bt_id_del+0x124>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   2e922:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2e926:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   2e928:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2e92a:	2002      	movs	r0, #2
   2e92c:	f005 f9b2 	bl	33c94 <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
   2e930:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   2e934:	b113      	cbz	r3, 2e93c <bt_id_del+0xbc>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   2e936:	2001      	movs	r0, #1
   2e938:	f01d ff93 	bl	4c862 <addr_res_enable>
	if (scan_enabled) {
   2e93c:	f1b8 0f00 	cmp.w	r8, #0
   2e940:	d002      	beq.n	2e948 <bt_id_del+0xc8>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2e942:	2001      	movs	r0, #1
   2e944:	f01e f96e 	bl	4cc24 <bt_le_scan_set_enable>
}
   2e948:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2e94c:	4816      	ldr	r0, [pc, #88]	; (2e9a8 <bt_id_del+0x128>)
   2e94e:	2100      	movs	r1, #0
   2e950:	f000 ba40 	b.w	2edd4 <bt_le_ext_adv_foreach>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   2e954:	2107      	movs	r1, #7
   2e956:	f242 0028 	movw	r0, #8232	; 0x2028
   2e95a:	f7ff f9dd 	bl	2dd18 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   2e95e:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
   2e962:	4606      	mov	r6, r0
   2e964:	2800      	cmp	r0, #0
   2e966:	d0e3      	beq.n	2e930 <bt_id_del+0xb0>
	return net_buf_simple_add(&buf->b, len);
   2e968:	2107      	movs	r1, #7
   2e96a:	3008      	adds	r0, #8
   2e96c:	f021 f9dc 	bl	4fd28 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2e970:	4649      	mov	r1, r9
   2e972:	f01d ff25 	bl	4c7c0 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   2e976:	463a      	mov	r2, r7
   2e978:	4631      	mov	r1, r6
   2e97a:	f242 0028 	movw	r0, #8232	; 0x2028
   2e97e:	f7ff fa27 	bl	2ddd0 <bt_hci_cmd_send_sync>
	if (err) {
   2e982:	2800      	cmp	r0, #0
   2e984:	d1d4      	bne.n	2e930 <bt_id_del+0xb0>
	bt_dev.le.rl_entries--;
   2e986:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   2e98a:	3b01      	subs	r3, #1
   2e98c:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   2e990:	7a23      	ldrb	r3, [r4, #8]
   2e992:	f023 0304 	bic.w	r3, r3, #4
   2e996:	7223      	strb	r3, [r4, #8]
   2e998:	e7ca      	b.n	2e930 <bt_id_del+0xb0>
   2e99a:	bf00      	nop
   2e99c:	20000030 	.word	0x20000030
   2e9a0:	0004c8a7 	.word	0x0004c8a7
   2e9a4:	0004c851 	.word	0x0004c851
   2e9a8:	0004c7d3 	.word	0x0004c7d3

0002e9ac <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   2e9ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2e9ae:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2e9b0:	4605      	mov	r5, r0
   2e9b2:	b918      	cbnz	r0, 2e9bc <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   2e9b4:	b1ec      	cbz	r4, 2e9f2 <bt_id_create+0x46>
		return -EINVAL;
   2e9b6:	f06f 0015 	mvn.w	r0, #21
   2e9ba:	e018      	b.n	2e9ee <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2e9bc:	2300      	movs	r3, #0
   2e9be:	2207      	movs	r2, #7
   2e9c0:	4669      	mov	r1, sp
   2e9c2:	9300      	str	r3, [sp, #0]
   2e9c4:	f8cd 3003 	str.w	r3, [sp, #3]
   2e9c8:	f01d f9bd 	bl	4bd46 <memcmp>
   2e9cc:	2800      	cmp	r0, #0
   2e9ce:	d0f1      	beq.n	2e9b4 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   2e9d0:	782b      	ldrb	r3, [r5, #0]
   2e9d2:	2b01      	cmp	r3, #1
   2e9d4:	d1ef      	bne.n	2e9b6 <bt_id_create+0xa>
   2e9d6:	79ab      	ldrb	r3, [r5, #6]
   2e9d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2e9dc:	2bc0      	cmp	r3, #192	; 0xc0
   2e9de:	d1ea      	bne.n	2e9b6 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   2e9e0:	4628      	mov	r0, r5
   2e9e2:	f7ff fdfd 	bl	2e5e0 <id_find>
   2e9e6:	2800      	cmp	r0, #0
   2e9e8:	dbe4      	blt.n	2e9b4 <bt_id_create+0x8>
			return -EALREADY;
   2e9ea:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   2e9ee:	b002      	add	sp, #8
   2e9f0:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   2e9f2:	4e12      	ldr	r6, [pc, #72]	; (2ea3c <bt_id_create+0x90>)
   2e9f4:	79f3      	ldrb	r3, [r6, #7]
   2e9f6:	2b01      	cmp	r3, #1
   2e9f8:	d01c      	beq.n	2ea34 <bt_id_create+0x88>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e9fa:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   2e9fe:	f01d fee2 	bl	4c7c6 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2ea02:	07c3      	lsls	r3, r0, #31
   2ea04:	d40b      	bmi.n	2ea1e <bt_id_create+0x72>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   2ea06:	2d00      	cmp	r5, #0
   2ea08:	d0d5      	beq.n	2e9b6 <bt_id_create+0xa>
   2ea0a:	2207      	movs	r2, #7
   2ea0c:	4669      	mov	r1, sp
   2ea0e:	4628      	mov	r0, r5
   2ea10:	9400      	str	r4, [sp, #0]
   2ea12:	f8cd 4003 	str.w	r4, [sp, #3]
   2ea16:	f01d f996 	bl	4bd46 <memcmp>
   2ea1a:	2800      	cmp	r0, #0
   2ea1c:	d0cb      	beq.n	2e9b6 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   2ea1e:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
   2ea20:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   2ea22:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   2ea24:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   2ea26:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
   2ea28:	f7ff fe20 	bl	2e66c <id_create.constprop.0>
	new_id = bt_dev.id_count++;
   2ea2c:	2800      	cmp	r0, #0
   2ea2e:	bf08      	it	eq
   2ea30:	4620      	moveq	r0, r4
   2ea32:	e7dc      	b.n	2e9ee <bt_id_create+0x42>
		return -ENOMEM;
   2ea34:	f06f 000b 	mvn.w	r0, #11
   2ea38:	e7d9      	b.n	2e9ee <bt_id_create+0x42>
   2ea3a:	bf00      	nop
   2ea3c:	20000030 	.word	0x20000030

0002ea40 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   2ea40:	b570      	push	{r4, r5, r6, lr}
   2ea42:	b086      	sub	sp, #24
   2ea44:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   2ea46:	aa01      	add	r2, sp, #4
   2ea48:	2100      	movs	r1, #0
   2ea4a:	f241 0009 	movw	r0, #4105	; 0x1009
   2ea4e:	f7ff f9bf 	bl	2ddd0 <bt_hci_cmd_send_sync>
	if (err) {
   2ea52:	4604      	mov	r4, r0
   2ea54:	b970      	cbnz	r0, 2ea74 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   2ea56:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   2ea58:	9002      	str	r0, [sp, #8]
   2ea5a:	689d      	ldr	r5, [r3, #8]
   2ea5c:	f8ad 000c 	strh.w	r0, [sp, #12]
   2ea60:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   2ea62:	2206      	movs	r2, #6
   2ea64:	a902      	add	r1, sp, #8
   2ea66:	4628      	mov	r0, r5
   2ea68:	f01d f96d 	bl	4bd46 <memcmp>
   2ea6c:	b928      	cbnz	r0, 2ea7a <bt_id_read_public_addr+0x3a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   2ea6e:	9801      	ldr	r0, [sp, #4]
   2ea70:	f014 ffd0 	bl	43a14 <net_buf_unref>
		return 0U;
   2ea74:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   2ea76:	b006      	add	sp, #24
   2ea78:	bd70      	pop	{r4, r5, r6, pc}
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   2ea7a:	4b0c      	ldr	r3, [pc, #48]	; (2eaac <bt_id_read_public_addr+0x6c>)
   2ea7c:	6818      	ldr	r0, [r3, #0]
   2ea7e:	9004      	str	r0, [sp, #16]
   2ea80:	889b      	ldrh	r3, [r3, #4]
   2ea82:	f8ad 3014 	strh.w	r3, [sp, #20]
   2ea86:	2206      	movs	r2, #6
   2ea88:	a904      	add	r1, sp, #16
   2ea8a:	4628      	mov	r0, r5
   2ea8c:	f01d f95b 	bl	4bd46 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   2ea90:	2800      	cmp	r0, #0
   2ea92:	d0ec      	beq.n	2ea6e <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
   2ea94:	2206      	movs	r2, #6
   2ea96:	4629      	mov	r1, r5
   2ea98:	1c70      	adds	r0, r6, #1
   2ea9a:	f01d f964 	bl	4bd66 <memcpy>
	net_buf_unref(rsp);
   2ea9e:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   2eaa0:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   2eaa2:	f014 ffb7 	bl	43a14 <net_buf_unref>
	return 1U;
   2eaa6:	2001      	movs	r0, #1
   2eaa8:	e7e5      	b.n	2ea76 <bt_id_read_public_addr+0x36>
   2eaaa:	bf00      	nop
   2eaac:	00051ad1 	.word	0x00051ad1

0002eab0 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   2eab0:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   2eab2:	4668      	mov	r0, sp
   2eab4:	f7ff ffc4 	bl	2ea40 <bt_id_read_public_addr>
   2eab8:	4b04      	ldr	r3, [pc, #16]	; (2eacc <bt_setup_public_id_addr+0x1c>)
   2eaba:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   2eabc:	b118      	cbz	r0, 2eac6 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   2eabe:	4669      	mov	r1, sp
   2eac0:	2000      	movs	r0, #0
   2eac2:	f7ff fdd3 	bl	2e66c <id_create.constprop.0>
}
   2eac6:	b003      	add	sp, #12
   2eac8:	f85d fb04 	ldr.w	pc, [sp], #4
   2eacc:	20000030 	.word	0x20000030

0002ead0 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   2ead0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   2ead4:	4b15      	ldr	r3, [pc, #84]	; (2eb2c <bt_read_static_addr+0x5c>)
   2ead6:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   2eada:	07db      	lsls	r3, r3, #31
{
   2eadc:	4607      	mov	r7, r0
   2eade:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   2eae0:	d404      	bmi.n	2eaec <bt_read_static_addr+0x1c>
		BT_WARN("Read Static Addresses command not available");
		return 0;
   2eae2:	2500      	movs	r5, #0
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   2eae4:	4628      	mov	r0, r5
   2eae6:	b002      	add	sp, #8
   2eae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   2eaec:	aa01      	add	r2, sp, #4
   2eaee:	2100      	movs	r1, #0
   2eaf0:	f64f 4009 	movw	r0, #64521	; 0xfc09
   2eaf4:	f7ff f96c 	bl	2ddd0 <bt_hci_cmd_send_sync>
	if (err) {
   2eaf8:	4604      	mov	r4, r0
   2eafa:	2800      	cmp	r0, #0
   2eafc:	d1f1      	bne.n	2eae2 <bt_read_static_addr+0x12>
	rp = (void *)rsp->data;
   2eafe:	9b01      	ldr	r3, [sp, #4]
   2eb00:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   2eb02:	785d      	ldrb	r5, [r3, #1]
   2eb04:	42b5      	cmp	r5, r6
   2eb06:	bf28      	it	cs
   2eb08:	4635      	movcs	r5, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   2eb0a:	f04f 0816 	mov.w	r8, #22
   2eb0e:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   2eb10:	42a5      	cmp	r5, r4
   2eb12:	dc03      	bgt.n	2eb1c <bt_read_static_addr+0x4c>
	net_buf_unref(rsp);
   2eb14:	9801      	ldr	r0, [sp, #4]
   2eb16:	f014 ff7d 	bl	43a14 <net_buf_unref>
	if (!cnt) {
   2eb1a:	e7e3      	b.n	2eae4 <bt_read_static_addr+0x14>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   2eb1c:	fb08 7004 	mla	r0, r8, r4, r7
   2eb20:	2216      	movs	r2, #22
   2eb22:	4631      	mov	r1, r6
   2eb24:	f01d f91f 	bl	4bd66 <memcpy>
	for (i = 0; i < cnt; i++) {
   2eb28:	3401      	adds	r4, #1
   2eb2a:	e7f1      	b.n	2eb10 <bt_read_static_addr+0x40>
   2eb2c:	20000030 	.word	0x20000030

0002eb30 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   2eb30:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   2eb32:	4e15      	ldr	r6, [pc, #84]	; (2eb88 <bt_setup_random_id_addr+0x58>)
   2eb34:	79f4      	ldrb	r4, [r6, #7]
{
   2eb36:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   2eb38:	b92c      	cbnz	r4, 2eb46 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   2eb3a:	2101      	movs	r1, #1
   2eb3c:	a802      	add	r0, sp, #8
   2eb3e:	f7ff ffc7 	bl	2ead0 <bt_read_static_addr>
   2eb42:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   2eb44:	b9c8      	cbnz	r0, 2eb7a <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   2eb46:	2100      	movs	r1, #0
   2eb48:	4608      	mov	r0, r1
}
   2eb4a:	b009      	add	sp, #36	; 0x24
   2eb4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   2eb50:	f7ff bf2c 	b.w	2e9ac <bt_id_create>
   2eb54:	ab02      	add	r3, sp, #8
   2eb56:	fb07 3105 	mla	r1, r7, r5, r3
   2eb5a:	2206      	movs	r2, #6
   2eb5c:	f10d 0001 	add.w	r0, sp, #1
   2eb60:	f01d f901 	bl	4bd66 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   2eb64:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   2eb66:	4669      	mov	r1, sp
   2eb68:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   2eb6a:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   2eb6e:	f7ff fd7d 	bl	2e66c <id_create.constprop.0>
				if (err) {
   2eb72:	3401      	adds	r4, #1
   2eb74:	b110      	cbz	r0, 2eb7c <bt_setup_random_id_addr+0x4c>
}
   2eb76:	b009      	add	sp, #36	; 0x24
   2eb78:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   2eb7a:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   2eb7c:	79f3      	ldrb	r3, [r6, #7]
   2eb7e:	b2e5      	uxtb	r5, r4
   2eb80:	42ab      	cmp	r3, r5
   2eb82:	d8e7      	bhi.n	2eb54 <bt_setup_random_id_addr+0x24>
			return 0;
   2eb84:	2000      	movs	r0, #0
   2eb86:	e7f6      	b.n	2eb76 <bt_setup_random_id_addr+0x46>
   2eb88:	20000030 	.word	0x20000030

0002eb8c <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   2eb8c:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   2eb8e:	4c07      	ldr	r4, [pc, #28]	; (2ebac <bt_id_set_create_conn_own_addr+0x20>)
   2eb90:	7823      	ldrb	r3, [r4, #0]
   2eb92:	2b01      	cmp	r3, #1
{
   2eb94:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
   2eb96:	d003      	beq.n	2eba0 <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   2eb98:	7823      	ldrb	r3, [r4, #0]
   2eb9a:	702b      	strb	r3, [r5, #0]
	}

	return 0;
   2eb9c:	2000      	movs	r0, #0
}
   2eb9e:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   2eba0:	1c60      	adds	r0, r4, #1
   2eba2:	f7ff fd37 	bl	2e614 <set_random_address>
			if (err) {
   2eba6:	2800      	cmp	r0, #0
   2eba8:	d0f6      	beq.n	2eb98 <bt_id_set_create_conn_own_addr+0xc>
   2ebaa:	e7f8      	b.n	2eb9e <bt_id_set_create_conn_own_addr+0x12>
   2ebac:	20000030 	.word	0x20000030

0002ebb0 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   2ebb0:	b570      	push	{r4, r5, r6, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   2ebb2:	4b0c      	ldr	r3, [pc, #48]	; (2ebe4 <bt_id_set_scan_own_addr+0x34>)
   2ebb4:	781b      	ldrb	r3, [r3, #0]
   2ebb6:	700b      	strb	r3, [r1, #0]
{
   2ebb8:	4606      	mov	r6, r0
   2ebba:	460d      	mov	r5, r1
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   2ebbc:	f01d fe69 	bl	4c892 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   2ebc0:	b110      	cbz	r0, 2ebc8 <bt_id_set_scan_own_addr+0x18>
				return err;
			}
		}
	}

	return 0;
   2ebc2:	2400      	movs	r4, #0
}
   2ebc4:	4620      	mov	r0, r4
   2ebc6:	bd70      	pop	{r4, r5, r6, pc}
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   2ebc8:	f01d fe91 	bl	4c8ee <bt_id_set_private_addr>
			if (err) {
   2ebcc:	4604      	mov	r4, r0
   2ebce:	b910      	cbnz	r0, 2ebd6 <bt_id_set_scan_own_addr+0x26>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   2ebd0:	2301      	movs	r3, #1
   2ebd2:	702b      	strb	r3, [r5, #0]
   2ebd4:	e7f5      	b.n	2ebc2 <bt_id_set_scan_own_addr+0x12>
				if (active_scan || !is_adv_using_rand_addr()) {
   2ebd6:	2e00      	cmp	r6, #0
   2ebd8:	d1f4      	bne.n	2ebc4 <bt_id_set_scan_own_addr+0x14>
   2ebda:	f01d fe5a 	bl	4c892 <is_adv_using_rand_addr>
   2ebde:	2800      	cmp	r0, #0
   2ebe0:	d1f6      	bne.n	2ebd0 <bt_id_set_scan_own_addr+0x20>
   2ebe2:	e7ef      	b.n	2ebc4 <bt_id_set_scan_own_addr+0x14>
   2ebe4:	20000030 	.word	0x20000030

0002ebe8 <bt_id_set_adv_own_addr>:
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   2ebe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ebec:	461e      	mov	r6, r3
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   2ebee:	07cb      	lsls	r3, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   2ebf0:	7805      	ldrb	r5, [r0, #0]
{
   2ebf2:	4604      	mov	r4, r0
   2ebf4:	460f      	mov	r7, r1
   2ebf6:	4691      	mov	r9, r2
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   2ebf8:	d533      	bpl.n	2ec62 <bt_id_set_adv_own_addr+0x7a>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   2ebfa:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 2ecbc <bt_id_set_adv_own_addr+0xd4>
   2ebfe:	b1a2      	cbz	r2, 2ec2a <bt_id_set_adv_own_addr+0x42>
   2ec00:	0688      	lsls	r0, r1, #26
   2ec02:	d40b      	bmi.n	2ec1c <bt_id_set_adv_own_addr+0x34>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2ec04:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   2ec08:	f818 3003 	ldrb.w	r3, [r8, r3]
   2ec0c:	2b01      	cmp	r3, #1
   2ec0e:	d014      	beq.n	2ec3a <bt_id_set_adv_own_addr+0x52>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   2ec10:	7033      	strb	r3, [r6, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   2ec12:	06ba      	lsls	r2, r7, #26
   2ec14:	d521      	bpl.n	2ec5a <bt_id_set_adv_own_addr+0x72>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   2ec16:	f043 0302 	orr.w	r3, r3, #2
   2ec1a:	e00c      	b.n	2ec36 <bt_id_set_adv_own_addr+0x4e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   2ec1c:	f898 30d0 	ldrb.w	r3, [r8, #208]	; 0xd0
   2ec20:	0659      	lsls	r1, r3, #25
   2ec22:	d4ef      	bmi.n	2ec04 <bt_id_set_adv_own_addr+0x1c>
			return -ENOTSUP;
   2ec24:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2ec28:	e018      	b.n	2ec5c <bt_id_set_adv_own_addr+0x74>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2ec2a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   2ec2e:	f818 3003 	ldrb.w	r3, [r8, r3]
   2ec32:	2b01      	cmp	r3, #1
   2ec34:	d001      	beq.n	2ec3a <bt_id_set_adv_own_addr+0x52>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
			}

			*own_addr_type = id_addr->type;
   2ec36:	7033      	strb	r3, [r6, #0]
		} else {
			err = bt_id_set_adv_private_addr(adv);
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}

		if (err) {
   2ec38:	e00f      	b.n	2ec5a <bt_id_set_adv_own_addr+0x72>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   2ec3a:	2007      	movs	r0, #7
   2ec3c:	fb00 8005 	mla	r0, r0, r5, r8
		return set_random_address(addr);
   2ec40:	3001      	adds	r0, #1
   2ec42:	f7ff fce7 	bl	2e614 <set_random_address>
				if (err) {
   2ec46:	4604      	mov	r4, r0
   2ec48:	b940      	cbnz	r0, 2ec5c <bt_id_set_adv_own_addr+0x74>
			*own_addr_type = id_addr->type;
   2ec4a:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   2ec4e:	f818 3005 	ldrb.w	r3, [r8, r5]
   2ec52:	7033      	strb	r3, [r6, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   2ec54:	f1b9 0f00 	cmp.w	r9, #0
   2ec58:	d1db      	bne.n	2ec12 <bt_id_set_adv_own_addr+0x2a>
			return err;
		}
	}

	return 0;
   2ec5a:	2400      	movs	r4, #0
}
   2ec5c:	4620      	mov	r0, r4
   2ec5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   2ec62:	f011 0704 	ands.w	r7, r1, #4
   2ec66:	d011      	beq.n	2ec8c <bt_id_set_adv_own_addr+0xa4>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2ec68:	4f14      	ldr	r7, [pc, #80]	; (2ecbc <bt_id_set_adv_own_addr+0xd4>)
   2ec6a:	ebc5 08c5 	rsb	r8, r5, r5, lsl #3
   2ec6e:	f817 3008 	ldrb.w	r3, [r7, r8]
   2ec72:	2b01      	cmp	r3, #1
   2ec74:	d1df      	bne.n	2ec36 <bt_id_set_adv_own_addr+0x4e>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   2ec76:	2007      	movs	r0, #7
   2ec78:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   2ec7c:	4438      	add	r0, r7
   2ec7e:	f7ff fcc9 	bl	2e614 <set_random_address>
			*own_addr_type = id_addr->type;
   2ec82:	f817 3008 	ldrb.w	r3, [r7, r8]
		return set_random_address(addr);
   2ec86:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
   2ec88:	7033      	strb	r3, [r6, #0]
		if (err) {
   2ec8a:	e7e7      	b.n	2ec5c <bt_id_set_adv_own_addr+0x74>
   2ec8c:	480c      	ldr	r0, [pc, #48]	; (2ecc0 <bt_id_set_adv_own_addr+0xd8>)
   2ec8e:	f01d fd9a 	bl	4c7c6 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   2ec92:	0683      	lsls	r3, r0, #26
   2ec94:	d50b      	bpl.n	2ecae <bt_id_set_adv_own_addr+0xc6>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   2ec96:	4638      	mov	r0, r7
   2ec98:	f01d ffc4 	bl	4cc24 <bt_le_scan_set_enable>
			err = bt_id_set_adv_private_addr(adv);
   2ec9c:	4620      	mov	r0, r4
   2ec9e:	f01d fe38 	bl	4c912 <bt_id_set_adv_private_addr>
   2eca2:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
   2eca4:	2001      	movs	r0, #1
   2eca6:	7030      	strb	r0, [r6, #0]
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2eca8:	f01d ffbc 	bl	4cc24 <bt_le_scan_set_enable>
   2ecac:	e7d6      	b.n	2ec5c <bt_id_set_adv_own_addr+0x74>
			err = bt_id_set_adv_private_addr(adv);
   2ecae:	4620      	mov	r0, r4
   2ecb0:	f01d fe2f 	bl	4c912 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   2ecb4:	2301      	movs	r3, #1
			err = bt_id_set_adv_private_addr(adv);
   2ecb6:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
   2ecb8:	e7e6      	b.n	2ec88 <bt_id_set_adv_own_addr+0xa0>
   2ecba:	bf00      	nop
   2ecbc:	20000030 	.word	0x20000030
   2ecc0:	200000fc 	.word	0x200000fc

0002ecc4 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2ecc4:	6843      	ldr	r3, [r0, #4]
{
   2ecc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ecc8:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2ecca:	0558      	lsls	r0, r3, #21
   2eccc:	d408      	bmi.n	2ece0 <valid_adv_param+0x1c>
		return false;
	}

	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2ecce:	6922      	ldr	r2, [r4, #16]
   2ecd0:	b10a      	cbz	r2, 2ecd6 <valid_adv_param+0x12>
   2ecd2:	07d9      	lsls	r1, r3, #31
   2ecd4:	d504      	bpl.n	2ece0 <valid_adv_param+0x1c>
	if (param->id >= bt_dev.id_count ||
   2ecd6:	4d1c      	ldr	r5, [pc, #112]	; (2ed48 <valid_adv_param+0x84>)
   2ecd8:	7820      	ldrb	r0, [r4, #0]
   2ecda:	79eb      	ldrb	r3, [r5, #7]
   2ecdc:	4283      	cmp	r3, r0
   2ecde:	d802      	bhi.n	2ece6 <valid_adv_param+0x22>
		return false;
   2ece0:	2000      	movs	r0, #0
		return false;
	}

	return valid_adv_ext_param(param);
}
   2ece2:	b003      	add	sp, #12
   2ece4:	bd30      	pop	{r4, r5, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   2ece6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   2ecea:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2ecec:	2207      	movs	r2, #7
   2ecee:	4669      	mov	r1, sp
   2ecf0:	4428      	add	r0, r5
   2ecf2:	9300      	str	r3, [sp, #0]
   2ecf4:	f8cd 3003 	str.w	r3, [sp, #3]
   2ecf8:	f01d f825 	bl	4bd46 <memcmp>
	if (param->id >= bt_dev.id_count ||
   2ecfc:	2800      	cmp	r0, #0
   2ecfe:	d0ef      	beq.n	2ece0 <valid_adv_param+0x1c>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2ed00:	6860      	ldr	r0, [r4, #4]
   2ed02:	07c2      	lsls	r2, r0, #31
   2ed04:	d406      	bmi.n	2ed14 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   2ed06:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   2ed0a:	2b08      	cmp	r3, #8
   2ed0c:	d802      	bhi.n	2ed14 <valid_adv_param+0x50>
   2ed0e:	68a3      	ldr	r3, [r4, #8]
   2ed10:	2b9f      	cmp	r3, #159	; 0x9f
   2ed12:	d9e5      	bls.n	2ece0 <valid_adv_param+0x1c>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   2ed14:	f010 0f30 	tst.w	r0, #48	; 0x30
   2ed18:	d002      	beq.n	2ed20 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   2ed1a:	6923      	ldr	r3, [r4, #16]
   2ed1c:	2b00      	cmp	r3, #0
   2ed1e:	d0df      	beq.n	2ece0 <valid_adv_param+0x1c>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   2ed20:	06c3      	lsls	r3, r0, #27
   2ed22:	d401      	bmi.n	2ed28 <valid_adv_param+0x64>
   2ed24:	6923      	ldr	r3, [r4, #16]
   2ed26:	b943      	cbnz	r3, 2ed3a <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   2ed28:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   2ed2c:	429a      	cmp	r2, r3
   2ed2e:	d8d7      	bhi.n	2ece0 <valid_adv_param+0x1c>
   2ed30:	2a1f      	cmp	r2, #31
   2ed32:	d9d5      	bls.n	2ece0 <valid_adv_param+0x1c>
		    param->interval_min < 0x0020 ||
   2ed34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   2ed38:	d8d2      	bhi.n	2ece0 <valid_adv_param+0x1c>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   2ed3a:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   2ed3e:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   2ed42:	bf18      	it	ne
   2ed44:	2001      	movne	r0, #1
   2ed46:	e7cc      	b.n	2ece2 <valid_adv_param+0x1e>
   2ed48:	20000030 	.word	0x20000030

0002ed4c <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   2ed4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   2ed4e:	4606      	mov	r6, r0
   2ed50:	4b1e      	ldr	r3, [pc, #120]	; (2edcc <le_adv_start_add_conn+0x80>)
   2ed52:	f816 2b09 	ldrb.w	r2, [r6], #9
   2ed56:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   2ed5a:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2ed5c:	2300      	movs	r3, #0
{
   2ed5e:	4605      	mov	r5, r0
   2ed60:	2207      	movs	r2, #7
   2ed62:	460f      	mov	r7, r1
   2ed64:	4630      	mov	r0, r6
   2ed66:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2ed68:	9300      	str	r3, [sp, #0]
   2ed6a:	f8cd 3003 	str.w	r3, [sp, #3]
   2ed6e:	f01c ffea 	bl	4bd46 <memcmp>
   2ed72:	782a      	ldrb	r2, [r5, #0]
   2ed74:	4604      	mov	r4, r0
   2ed76:	b9a8      	cbnz	r0, 2eda4 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   2ed78:	4b15      	ldr	r3, [pc, #84]	; (2edd0 <le_adv_start_add_conn+0x84>)
   2ed7a:	6818      	ldr	r0, [r3, #0]
   2ed7c:	8899      	ldrh	r1, [r3, #4]
   2ed7e:	9002      	str	r0, [sp, #8]
   2ed80:	799b      	ldrb	r3, [r3, #6]
   2ed82:	f8ad 100c 	strh.w	r1, [sp, #12]
   2ed86:	4610      	mov	r0, r2
   2ed88:	a902      	add	r1, sp, #8
   2ed8a:	f88d 300e 	strb.w	r3, [sp, #14]
   2ed8e:	f001 f8ed 	bl	2ff6c <bt_conn_add_le>
		if (!conn) {
   2ed92:	4605      	mov	r5, r0
   2ed94:	b1b8      	cbz	r0, 2edc6 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   2ed96:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   2ed98:	f000 ff00 	bl	2fb9c <bt_conn_set_state>
	*out_conn = conn;
   2ed9c:	603d      	str	r5, [r7, #0]
	return 0;
}
   2ed9e:	4620      	mov	r0, r4
   2eda0:	b005      	add	sp, #20
   2eda2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   2eda4:	4631      	mov	r1, r6
   2eda6:	4610      	mov	r0, r2
   2eda8:	f01e f8e0 	bl	4cf6c <bt_conn_exists_le>
   2edac:	4604      	mov	r4, r0
   2edae:	b938      	cbnz	r0, 2edc0 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   2edb0:	7828      	ldrb	r0, [r5, #0]
   2edb2:	4631      	mov	r1, r6
   2edb4:	f001 f8da 	bl	2ff6c <bt_conn_add_le>
	if (!conn) {
   2edb8:	4605      	mov	r5, r0
   2edba:	b120      	cbz	r0, 2edc6 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   2edbc:	2105      	movs	r1, #5
   2edbe:	e7eb      	b.n	2ed98 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   2edc0:	f06f 0415 	mvn.w	r4, #21
   2edc4:	e7eb      	b.n	2ed9e <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   2edc6:	f06f 040b 	mvn.w	r4, #11
   2edca:	e7e8      	b.n	2ed9e <le_adv_start_add_conn+0x52>
   2edcc:	20000030 	.word	0x20000030
   2edd0:	00051ad7 	.word	0x00051ad7

0002edd4 <bt_le_ext_adv_foreach>:
{
   2edd4:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   2edd6:	4801      	ldr	r0, [pc, #4]	; (2eddc <bt_le_ext_adv_foreach+0x8>)
   2edd8:	4718      	bx	r3
   2edda:	bf00      	nop
   2eddc:	20000048 	.word	0x20000048

0002ede0 <bt_le_adv_lookup_legacy>:
}
   2ede0:	4800      	ldr	r0, [pc, #0]	; (2ede4 <bt_le_adv_lookup_legacy+0x4>)
   2ede2:	4770      	bx	lr
   2ede4:	20000048 	.word	0x20000048

0002ede8 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   2ede8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   2edec:	690f      	ldr	r7, [r1, #16]
{
   2edee:	b08f      	sub	sp, #60	; 0x3c
   2edf0:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   2edf2:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   2edf4:	1afe      	subs	r6, r7, r3
{
   2edf6:	4605      	mov	r5, r0
   2edf8:	488c      	ldr	r0, [pc, #560]	; (2f02c <bt_le_adv_start_legacy+0x244>)
   2edfa:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   2edfc:	bf18      	it	ne
   2edfe:	2601      	movne	r6, #1
	struct bt_conn *conn = NULL;
   2ee00:	9307      	str	r3, [sp, #28]
   2ee02:	f01d fdc2 	bl	4c98a <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2ee06:	0782      	lsls	r2, r0, #30
{
   2ee08:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2ee0a:	f140 8104 	bpl.w	2f016 <bt_le_adv_start_legacy+0x22e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   2ee0e:	4608      	mov	r0, r1
   2ee10:	f7ff ff58 	bl	2ecc4 <valid_adv_param>
   2ee14:	b928      	cbnz	r0, 2ee22 <bt_le_adv_start_legacy+0x3a>
		return -EINVAL;
   2ee16:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   2ee1a:	4658      	mov	r0, fp
   2ee1c:	b00f      	add	sp, #60	; 0x3c
   2ee1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   2ee22:	4620      	mov	r0, r4
   2ee24:	f7ff fc5e 	bl	2e6e4 <bt_id_adv_random_addr_check>
   2ee28:	4681      	mov	r9, r0
   2ee2a:	2800      	cmp	r0, #0
   2ee2c:	d0f3      	beq.n	2ee16 <bt_le_adv_start_legacy+0x2e>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2ee2e:	f105 0810 	add.w	r8, r5, #16
   2ee32:	4640      	mov	r0, r8
   2ee34:	f01d fda9 	bl	4c98a <atomic_get>
   2ee38:	0643      	lsls	r3, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2ee3a:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   2ee3e:	f100 80ed 	bmi.w	2f01c <bt_le_adv_start_legacy+0x234>
	(void)memset(&set_param, 0, sizeof(set_param));
   2ee42:	220f      	movs	r2, #15
   2ee44:	4659      	mov	r1, fp
   2ee46:	a80a      	add	r0, sp, #40	; 0x28
   2ee48:	f01c ff98 	bl	4bd7c <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   2ee4c:	68a3      	ldr	r3, [r4, #8]
   2ee4e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   2ee52:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   2ee54:	68e3      	ldr	r3, [r4, #12]
   2ee56:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   2ee5a:	f01d fd87 	bl	4c96c <get_adv_channel_map>
	if (adv->id != param->id) {
   2ee5e:	782a      	ldrb	r2, [r5, #0]
   2ee60:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   2ee62:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   2ee66:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   2ee68:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   2ee6c:	d004      	beq.n	2ee78 <bt_le_adv_start_legacy+0x90>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ee6e:	486f      	ldr	r0, [pc, #444]	; (2f02c <bt_le_adv_start_legacy+0x244>)
   2ee70:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   2ee74:	f01d fd8f 	bl	4c996 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   2ee78:	4a6d      	ldr	r2, [pc, #436]	; (2f030 <bt_le_adv_start_legacy+0x248>)
	adv->id = param->id;
   2ee7a:	7823      	ldrb	r3, [r4, #0]
   2ee7c:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   2ee7e:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   2ee82:	6861      	ldr	r1, [r4, #4]
   2ee84:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   2ee88:	4632      	mov	r2, r6
   2ee8a:	4628      	mov	r0, r5
   2ee8c:	f7ff feac 	bl	2ebe8 <bt_id_set_adv_own_addr>
	if (err) {
   2ee90:	4683      	mov	fp, r0
   2ee92:	2800      	cmp	r0, #0
   2ee94:	d1c1      	bne.n	2ee1a <bt_le_adv_start_legacy+0x32>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   2ee96:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
   2ee9a:	b1a7      	cbz	r7, 2eec6 <bt_le_adv_start_legacy+0xde>
	memcpy(dst, src, sizeof(*dst));
   2ee9c:	2207      	movs	r2, #7
   2ee9e:	6921      	ldr	r1, [r4, #16]
   2eea0:	f01c ff61 	bl	4bd66 <memcpy>
	name_type = get_adv_name_type_param(param);
   2eea4:	4620      	mov	r0, r4
   2eea6:	f01d fe72 	bl	4cb8e <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2eeaa:	6862      	ldr	r2, [r4, #4]
	name_type = get_adv_name_type_param(param);
   2eeac:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2eeae:	07d0      	lsls	r0, r2, #31
   2eeb0:	d41a      	bmi.n	2eee8 <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   2eeb2:	0592      	lsls	r2, r2, #22
   2eeb4:	d403      	bmi.n	2eebe <bt_le_adv_start_legacy+0xd6>
   2eeb6:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2eeb8:	b90b      	cbnz	r3, 2eebe <bt_le_adv_start_legacy+0xd6>
   2eeba:	2e02      	cmp	r6, #2
   2eebc:	d14f      	bne.n	2ef5e <bt_le_adv_start_legacy+0x176>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   2eebe:	2302      	movs	r3, #2
   2eec0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2eec4:	e01e      	b.n	2ef04 <bt_le_adv_start_legacy+0x11c>
   2eec6:	2207      	movs	r2, #7
   2eec8:	a908      	add	r1, sp, #32
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   2eeca:	9708      	str	r7, [sp, #32]
   2eecc:	f8cd 7023 	str.w	r7, [sp, #35]	; 0x23
   2eed0:	f01c ff49 	bl	4bd66 <memcpy>
	name_type = get_adv_name_type_param(param);
   2eed4:	4620      	mov	r0, r4
   2eed6:	f01d fe5a 	bl	4cb8e <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2eeda:	6862      	ldr	r2, [r4, #4]
   2eedc:	07d1      	lsls	r1, r2, #31
	name_type = get_adv_name_type_param(param);
   2eede:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2eee0:	d5e7      	bpl.n	2eeb2 <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   2eee2:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
   2eee6:	e00d      	b.n	2ef04 <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   2eee8:	f012 0f10 	tst.w	r2, #16
   2eeec:	bf0c      	ite	eq
   2eeee:	2201      	moveq	r2, #1
   2eef0:	2204      	movne	r2, #4
   2eef2:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
   2eef6:	6921      	ldr	r1, [r4, #16]
   2eef8:	2207      	movs	r2, #7
   2eefa:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   2eefe:	f01c ff32 	bl	4bd66 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   2ef02:	46d9      	mov	r9, fp
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   2ef04:	210f      	movs	r1, #15
   2ef06:	f242 0006 	movw	r0, #8198	; 0x2006
   2ef0a:	f7fe ff05 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   2ef0e:	4683      	mov	fp, r0
   2ef10:	2800      	cmp	r0, #0
   2ef12:	f000 8086 	beq.w	2f022 <bt_le_adv_start_legacy+0x23a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2ef16:	220f      	movs	r2, #15
   2ef18:	a90a      	add	r1, sp, #40	; 0x28
   2ef1a:	3008      	adds	r0, #8
   2ef1c:	f020 ff0a 	bl	4fd34 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   2ef20:	2200      	movs	r2, #0
   2ef22:	4659      	mov	r1, fp
   2ef24:	f242 0006 	movw	r0, #8198	; 0x2006
   2ef28:	f7fe ff52 	bl	2ddd0 <bt_hci_cmd_send_sync>
	if (err) {
   2ef2c:	2800      	cmp	r0, #0
   2ef2e:	d17b      	bne.n	2f028 <bt_le_adv_start_legacy+0x240>
	if (!dir_adv) {
   2ef30:	b1df      	cbz	r7, 2ef6a <bt_le_adv_start_legacy+0x182>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2ef32:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2ef34:	07db      	lsls	r3, r3, #31
   2ef36:	d426      	bmi.n	2ef86 <bt_le_adv_start_legacy+0x19e>
	return bt_le_adv_set_enable_legacy(adv, enable);
   2ef38:	4628      	mov	r0, r5
   2ef3a:	2101      	movs	r1, #1
   2ef3c:	f01d fe37 	bl	4cbae <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2ef40:	9d07      	ldr	r5, [sp, #28]
	if (err) {
   2ef42:	4683      	mov	fp, r0
   2ef44:	2800      	cmp	r0, #0
   2ef46:	d05f      	beq.n	2f008 <bt_le_adv_start_legacy+0x220>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2ef48:	2d00      	cmp	r5, #0
   2ef4a:	f43f af66 	beq.w	2ee1a <bt_le_adv_start_legacy+0x32>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2ef4e:	4628      	mov	r0, r5
   2ef50:	2100      	movs	r1, #0
   2ef52:	f000 fe23 	bl	2fb9c <bt_conn_set_state>
			bt_conn_unref(conn);
   2ef56:	4628      	mov	r0, r5
   2ef58:	f01d ff3f 	bl	4cdda <bt_conn_unref>
   2ef5c:	e75d      	b.n	2ee1a <bt_le_adv_start_legacy+0x32>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   2ef5e:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   2ef60:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   2ef64:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2ef68:	e7cc      	b.n	2ef04 <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   2ef6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2ef6c:	9300      	str	r3, [sp, #0]
   2ef6e:	e9cd 9601 	strd	r9, r6, [sp, #4]
   2ef72:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2ef74:	9905      	ldr	r1, [sp, #20]
   2ef76:	4652      	mov	r2, sl
   2ef78:	4628      	mov	r0, r5
   2ef7a:	f01d fd91 	bl	4caa0 <le_adv_update.constprop.0>
		if (err) {
   2ef7e:	4683      	mov	fp, r0
   2ef80:	2800      	cmp	r0, #0
   2ef82:	d0d6      	beq.n	2ef32 <bt_le_adv_start_legacy+0x14a>
   2ef84:	e749      	b.n	2ee1a <bt_le_adv_start_legacy+0x32>
		err = le_adv_start_add_conn(adv, &conn);
   2ef86:	a907      	add	r1, sp, #28
   2ef88:	4628      	mov	r0, r5
   2ef8a:	f7ff fedf 	bl	2ed4c <le_adv_start_add_conn>
		if (err) {
   2ef8e:	4683      	mov	fp, r0
   2ef90:	2800      	cmp	r0, #0
   2ef92:	d0d1      	beq.n	2ef38 <bt_le_adv_start_legacy+0x150>
			if (err == -ENOMEM && !dir_adv &&
   2ef94:	f110 0f0c 	cmn.w	r0, #12
   2ef98:	f47f af3f 	bne.w	2ee1a <bt_le_adv_start_legacy+0x32>
   2ef9c:	2f00      	cmp	r7, #0
   2ef9e:	f47f af3c 	bne.w	2ee1a <bt_le_adv_start_legacy+0x32>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   2efa2:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   2efa4:	0790      	lsls	r0, r2, #30
   2efa6:	f53f af38 	bmi.w	2ee1a <bt_le_adv_start_legacy+0x32>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   2efaa:	6863      	ldr	r3, [r4, #4]
   2efac:	f083 0302 	eor.w	r3, r3, #2
   2efb0:	f3c3 0b40 	ubfx	fp, r3, #1, #1
   2efb4:	f00b 0201 	and.w	r2, fp, #1
   2efb8:	210d      	movs	r1, #13
   2efba:	4640      	mov	r0, r8
   2efbc:	f01d fd59 	bl	4ca72 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   2efc0:	1e73      	subs	r3, r6, #1
   2efc2:	425a      	negs	r2, r3
   2efc4:	415a      	adcs	r2, r3
   2efc6:	2107      	movs	r1, #7
   2efc8:	4640      	mov	r0, r8
   2efca:	f01d fd52 	bl	4ca72 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   2efce:	1eb1      	subs	r1, r6, #2
   2efd0:	424a      	negs	r2, r1
   2efd2:	414a      	adcs	r2, r1
   2efd4:	4640      	mov	r0, r8
   2efd6:	2108      	movs	r1, #8
   2efd8:	f01d fd4b 	bl	4ca72 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   2efdc:	6862      	ldr	r2, [r4, #4]
   2efde:	2109      	movs	r1, #9
   2efe0:	f002 0201 	and.w	r2, r2, #1
   2efe4:	4640      	mov	r0, r8
   2efe6:	f01d fd44 	bl	4ca72 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   2efea:	464a      	mov	r2, r9
   2efec:	210a      	movs	r1, #10
   2efee:	4640      	mov	r0, r8
   2eff0:	f01d fd3f 	bl	4ca72 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   2eff4:	6862      	ldr	r2, [r4, #4]
   2eff6:	210c      	movs	r1, #12
   2eff8:	f3c2 0280 	ubfx	r2, r2, #2, #1
   2effc:	4640      	mov	r0, r8
   2effe:	f01d fd38 	bl	4ca72 <atomic_set_bit_to>
	return 0;
   2f002:	f04f 0b00 	mov.w	fp, #0
   2f006:	e708      	b.n	2ee1a <bt_le_adv_start_legacy+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2f008:	b115      	cbz	r5, 2f010 <bt_le_adv_start_legacy+0x228>
		bt_conn_unref(conn);
   2f00a:	4628      	mov	r0, r5
   2f00c:	f01d fee5 	bl	4cdda <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   2f010:	2f00      	cmp	r7, #0
   2f012:	d1cf      	bne.n	2efb4 <bt_le_adv_start_legacy+0x1cc>
   2f014:	e7c9      	b.n	2efaa <bt_le_adv_start_legacy+0x1c2>
		return -EAGAIN;
   2f016:	f06f 0b0a 	mvn.w	fp, #10
   2f01a:	e6fe      	b.n	2ee1a <bt_le_adv_start_legacy+0x32>
		return -EALREADY;
   2f01c:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   2f020:	e6fb      	b.n	2ee1a <bt_le_adv_start_legacy+0x32>
		return -ENOBUFS;
   2f022:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   2f026:	e6f8      	b.n	2ee1a <bt_le_adv_start_legacy+0x32>
   2f028:	4683      	mov	fp, r0
   2f02a:	e6f6      	b.n	2ee1a <bt_le_adv_start_legacy+0x32>
   2f02c:	200000fc 	.word	0x200000fc
   2f030:	20000030 	.word	0x20000030

0002f034 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   2f034:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2f036:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   2f038:	9a06      	ldr	r2, [sp, #24]
{
   2f03a:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   2f03c:	e9cd 3200 	strd	r3, r2, [sp]
   2f040:	462b      	mov	r3, r5
   2f042:	460a      	mov	r2, r1
   2f044:	4601      	mov	r1, r0
   2f046:	4811      	ldr	r0, [pc, #68]	; (2f08c <bt_le_adv_start+0x58>)
   2f048:	f7ff fece 	bl	2ede8 <bt_le_adv_start_legacy>
   2f04c:	4621      	mov	r1, r4
   2f04e:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   2f050:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   2f052:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   2f056:	429d      	cmp	r5, r3
   2f058:	d102      	bne.n	2f060 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   2f05a:	4630      	mov	r0, r6
   2f05c:	b002      	add	sp, #8
   2f05e:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   2f060:	880a      	ldrh	r2, [r1, #0]
   2f062:	4282      	cmp	r2, r0
   2f064:	d104      	bne.n	2f070 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   2f066:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   2f068:	b112      	cbz	r2, 2f070 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   2f06a:	7812      	ldrb	r2, [r2, #0]
   2f06c:	07d2      	lsls	r2, r2, #31
   2f06e:	d402      	bmi.n	2f076 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   2f070:	3301      	adds	r3, #1
   2f072:	3108      	adds	r1, #8
   2f074:	e7ef      	b.n	2f056 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   2f076:	4906      	ldr	r1, [pc, #24]	; (2f090 <bt_le_adv_start+0x5c>)
   2f078:	4806      	ldr	r0, [pc, #24]	; (2f094 <bt_le_adv_start+0x60>)
   2f07a:	f021 fe57 	bl	50d2c <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   2f07e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2f082:	2300      	movs	r3, #0
   2f084:	4803      	ldr	r0, [pc, #12]	; (2f094 <bt_le_adv_start+0x60>)
   2f086:	f019 fa77 	bl	48578 <k_work_reschedule>
   2f08a:	e7e6      	b.n	2f05a <bt_le_adv_start+0x26>
   2f08c:	20000048 	.word	0x20000048
   2f090:	0004cc03 	.word	0x0004cc03
   2f094:	20000060 	.word	0x20000060

0002f098 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   2f098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   2f09a:	4828      	ldr	r0, [pc, #160]	; (2f13c <bt_le_adv_stop+0xa4>)
   2f09c:	f01d fdae 	bl	4cbfc <bt_le_lim_adv_cancel_timeout>
   2f0a0:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2f0a4:	4826      	ldr	r0, [pc, #152]	; (2f140 <bt_le_adv_stop+0xa8>)
   2f0a6:	f01d fc76 	bl	4c996 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2f0aa:	4825      	ldr	r0, [pc, #148]	; (2f140 <bt_le_adv_stop+0xa8>)
   2f0ac:	f01d fc6d 	bl	4c98a <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2f0b0:	0641      	lsls	r1, r0, #25
   2f0b2:	d53a      	bpl.n	2f12a <bt_le_adv_stop+0x92>
   2f0b4:	4822      	ldr	r0, [pc, #136]	; (2f140 <bt_le_adv_stop+0xa8>)
   2f0b6:	f01d fc68 	bl	4c98a <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2f0ba:	0582      	lsls	r2, r0, #22
   2f0bc:	d521      	bpl.n	2f102 <bt_le_adv_stop+0x6a>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2f0be:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2f0c0:	4820      	ldr	r0, [pc, #128]	; (2f144 <bt_le_adv_stop+0xac>)
   2f0c2:	9300      	str	r3, [sp, #0]
   2f0c4:	2207      	movs	r2, #7
   2f0c6:	4669      	mov	r1, sp
   2f0c8:	f8cd 3003 	str.w	r3, [sp, #3]
   2f0cc:	f01c fe3b 	bl	4bd46 <memcmp>
   2f0d0:	4b1d      	ldr	r3, [pc, #116]	; (2f148 <bt_le_adv_stop+0xb0>)
   2f0d2:	bb70      	cbnz	r0, 2f132 <bt_le_adv_stop+0x9a>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   2f0d4:	4a1d      	ldr	r2, [pc, #116]	; (2f14c <bt_le_adv_stop+0xb4>)
   2f0d6:	8891      	ldrh	r1, [r2, #4]
   2f0d8:	6810      	ldr	r0, [r2, #0]
   2f0da:	7992      	ldrb	r2, [r2, #6]
   2f0dc:	f8ad 100c 	strh.w	r1, [sp, #12]
   2f0e0:	f88d 200e 	strb.w	r2, [sp, #14]
   2f0e4:	9002      	str	r0, [sp, #8]
   2f0e6:	2204      	movs	r2, #4
   2f0e8:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   2f0ea:	7e18      	ldrb	r0, [r3, #24]
   2f0ec:	f000 ff7e 	bl	2ffec <bt_conn_lookup_state_le>
   2f0f0:	4604      	mov	r4, r0
	if (conn) {
   2f0f2:	b130      	cbz	r0, 2f102 <bt_le_adv_stop+0x6a>
		conn->err = status;
   2f0f4:	2100      	movs	r1, #0
   2f0f6:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2f0f8:	f000 fd50 	bl	2fb9c <bt_conn_set_state>
		bt_conn_unref(conn);
   2f0fc:	4620      	mov	r0, r4
   2f0fe:	f01d fe6c 	bl	4cdda <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   2f102:	480e      	ldr	r0, [pc, #56]	; (2f13c <bt_le_adv_stop+0xa4>)
   2f104:	2100      	movs	r1, #0
   2f106:	f01d fd52 	bl	4cbae <bt_le_adv_set_enable_legacy>
		if (err) {
   2f10a:	4604      	mov	r4, r0
   2f10c:	b970      	cbnz	r0, 2f12c <bt_le_adv_stop+0x94>
   2f10e:	4810      	ldr	r0, [pc, #64]	; (2f150 <bt_le_adv_stop+0xb8>)
   2f110:	f01d fc3b 	bl	4c98a <atomic_get>
	if (!(IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	      BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) &&
	    !IS_ENABLED(CONFIG_BT_PRIVACY) &&
	    !IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY)) {
		/* If scan is ongoing set back NRPA */
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   2f114:	0683      	lsls	r3, r0, #26
   2f116:	d508      	bpl.n	2f12a <bt_le_adv_stop+0x92>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   2f118:	4620      	mov	r0, r4
   2f11a:	f01d fd83 	bl	4cc24 <bt_le_scan_set_enable>
			bt_id_set_private_addr(BT_ID_DEFAULT);
   2f11e:	4620      	mov	r0, r4
   2f120:	f01d fbe5 	bl	4c8ee <bt_id_set_private_addr>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2f124:	2001      	movs	r0, #1
   2f126:	f01d fd7d 	bl	4cc24 <bt_le_scan_set_enable>
		return 0;
   2f12a:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   2f12c:	4620      	mov	r0, r4
   2f12e:	b004      	add	sp, #16
   2f130:	bd10      	pop	{r4, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   2f132:	2205      	movs	r2, #5
   2f134:	f103 0121 	add.w	r1, r3, #33	; 0x21
   2f138:	e7d7      	b.n	2f0ea <bt_le_adv_stop+0x52>
   2f13a:	bf00      	nop
   2f13c:	20000048 	.word	0x20000048
   2f140:	20000058 	.word	0x20000058
   2f144:	20000051 	.word	0x20000051
   2f148:	20000030 	.word	0x20000030
   2f14c:	00051ad7 	.word	0x00051ad7
   2f150:	200000fc 	.word	0x200000fc

0002f154 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   2f154:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2f156:	4c20      	ldr	r4, [pc, #128]	; (2f1d8 <bt_le_adv_resume+0x84>)
   2f158:	4620      	mov	r0, r4
   2f15a:	f01d fc16 	bl	4c98a <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2f15e:	0480      	lsls	r0, r0, #18
   2f160:	d538      	bpl.n	2f1d4 <bt_le_adv_resume+0x80>
   2f162:	4620      	mov	r0, r4
   2f164:	f01d fc11 	bl	4c98a <atomic_get>
   2f168:	0641      	lsls	r1, r0, #25
   2f16a:	d433      	bmi.n	2f1d4 <bt_le_adv_resume+0x80>
   2f16c:	4620      	mov	r0, r4
   2f16e:	f01d fc0c 	bl	4c98a <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2f172:	0582      	lsls	r2, r0, #22
   2f174:	d52e      	bpl.n	2f1d4 <bt_le_adv_resume+0x80>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   2f176:	a901      	add	r1, sp, #4
   2f178:	f1a4 0010 	sub.w	r0, r4, #16
   2f17c:	f7ff fde6 	bl	2ed4c <le_adv_start_add_conn>
	if (err) {
   2f180:	4605      	mov	r5, r0
   2f182:	bb38      	cbnz	r0, 2f1d4 <bt_le_adv_resume+0x80>
	return bt_le_adv_set_enable_legacy(adv, enable);
   2f184:	2101      	movs	r1, #1
   2f186:	f1a4 0010 	sub.w	r0, r4, #16
   2f18a:	f01d fd10 	bl	4cbae <bt_le_adv_set_enable_legacy>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   2f18e:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   2f190:	b928      	cbnz	r0, 2f19e <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   2f192:	4630      	mov	r0, r6
	if (persist_paused) {
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   2f194:	b002      	add	sp, #8
   2f196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   2f19a:	f01d be1e 	b.w	4cdda <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2f19e:	4629      	mov	r1, r5
   2f1a0:	4630      	mov	r0, r6
   2f1a2:	f000 fcfb 	bl	2fb9c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f1a6:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2f1aa:	4620      	mov	r0, r4
   2f1ac:	f01d fbf3 	bl	4c996 <atomic_and>
   2f1b0:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   2f1b2:	4630      	mov	r0, r6
   2f1b4:	f01d fe11 	bl	4cdda <bt_conn_unref>
	if (persist_paused) {
   2f1b8:	04ab      	lsls	r3, r5, #18
   2f1ba:	d50b      	bpl.n	2f1d4 <bt_le_adv_resume+0x80>
   2f1bc:	f3bf 8f5b 	dmb	ish
   2f1c0:	e854 3f00 	ldrex	r3, [r4]
   2f1c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2f1c8:	e844 3200 	strex	r2, r3, [r4]
   2f1cc:	2a00      	cmp	r2, #0
   2f1ce:	d1f7      	bne.n	2f1c0 <bt_le_adv_resume+0x6c>
   2f1d0:	f3bf 8f5b 	dmb	ish
}
   2f1d4:	b002      	add	sp, #8
   2f1d6:	bd70      	pop	{r4, r5, r6, pc}
   2f1d8:	20000058 	.word	0x20000058

0002f1dc <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2f1dc:	4b03      	ldr	r3, [pc, #12]	; (2f1ec <atomic_get.constprop.0+0x10>)
   2f1de:	f3bf 8f5b 	dmb	ish
   2f1e2:	6818      	ldr	r0, [r3, #0]
   2f1e4:	f3bf 8f5b 	dmb	ish
}
   2f1e8:	4770      	bx	lr
   2f1ea:	bf00      	nop
   2f1ec:	200000fc 	.word	0x200000fc

0002f1f0 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   2f1f0:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   2f1f2:	2102      	movs	r1, #2
{
   2f1f4:	b087      	sub	sp, #28
   2f1f6:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   2f1f8:	f242 000c 	movw	r0, #8204	; 0x200c
   2f1fc:	f7fe fd8c 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   2f200:	4605      	mov	r5, r0
   2f202:	b300      	cbz	r0, 2f246 <bt_le_scan_set_enable_legacy+0x56>
	return net_buf_simple_add(&buf->b, len);
   2f204:	2102      	movs	r1, #2
   2f206:	3008      	adds	r0, #8
   2f208:	f020 fd8e 	bl	4fd28 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   2f20c:	2c01      	cmp	r4, #1
   2f20e:	4602      	mov	r2, r0
   2f210:	d117      	bne.n	2f242 <bt_le_scan_set_enable_legacy+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2f212:	f7ff ffe3 	bl	2f1dc <atomic_get.constprop.0>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   2f216:	f3c0 2000 	ubfx	r0, r0, #8, #1
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   2f21a:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   2f21c:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   2f21e:	425c      	negs	r4, r3
   2f220:	415c      	adcs	r4, r3
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   2f222:	7050      	strb	r0, [r2, #1]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   2f224:	a903      	add	r1, sp, #12
   2f226:	4a09      	ldr	r2, [pc, #36]	; (2f24c <bt_le_scan_set_enable_legacy+0x5c>)
   2f228:	9400      	str	r4, [sp, #0]
   2f22a:	4628      	mov	r0, r5
   2f22c:	2305      	movs	r3, #5
   2f22e:	f7fe fd61 	bl	2dcf4 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   2f232:	2200      	movs	r2, #0
   2f234:	4629      	mov	r1, r5
   2f236:	f242 000c 	movw	r0, #8204	; 0x200c
   2f23a:	f7fe fdc9 	bl	2ddd0 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   2f23e:	b007      	add	sp, #28
   2f240:	bd30      	pop	{r4, r5, pc}
   2f242:	2000      	movs	r0, #0
   2f244:	e7e9      	b.n	2f21a <bt_le_scan_set_enable_legacy+0x2a>
		return -ENOBUFS;
   2f246:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2f24a:	e7f8      	b.n	2f23e <bt_le_scan_set_enable_legacy+0x4e>
   2f24c:	200000fc 	.word	0x200000fc

0002f250 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   2f250:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2f252:	4605      	mov	r5, r0
   2f254:	4614      	mov	r4, r2
   2f256:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   2f258:	2207      	movs	r2, #7
   2f25a:	2100      	movs	r1, #0
   2f25c:	4668      	mov	r0, sp
   2f25e:	f01c fd8d 	bl	4bd7c <memset>

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   2f262:	2300      	movs	r3, #0
   2f264:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   2f268:	1e6b      	subs	r3, r5, #1
   2f26a:	4258      	negs	r0, r3
   2f26c:	f10d 0105 	add.w	r1, sp, #5
   2f270:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
   2f272:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
   2f276:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
   2f27a:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   2f27e:	f7ff fc97 	bl	2ebb0 <bt_id_set_scan_own_addr>
	if (err) {
   2f282:	4604      	mov	r4, r0
   2f284:	bb38      	cbnz	r0, 2f2d6 <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   2f286:	2107      	movs	r1, #7
   2f288:	f242 000b 	movw	r0, #8203	; 0x200b
   2f28c:	f7fe fd44 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   2f290:	4606      	mov	r6, r0
   2f292:	b348      	cbz	r0, 2f2e8 <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2f294:	2207      	movs	r2, #7
   2f296:	4669      	mov	r1, sp
   2f298:	3008      	adds	r0, #8
   2f29a:	f020 fd4b 	bl	4fd34 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   2f29e:	4622      	mov	r2, r4
   2f2a0:	4631      	mov	r1, r6
   2f2a2:	f242 000b 	movw	r0, #8203	; 0x200b
   2f2a6:	f7fe fd93 	bl	2ddd0 <bt_hci_cmd_send_sync>
	if (err) {
   2f2aa:	4604      	mov	r4, r0
   2f2ac:	b998      	cbnz	r0, 2f2d6 <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
   2f2ae:	2001      	movs	r0, #1
   2f2b0:	f7ff ff9e 	bl	2f1f0 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   2f2b4:	4604      	mov	r4, r0
   2f2b6:	b970      	cbnz	r0, 2f2d6 <start_le_scan_legacy+0x86>
	if (val) {
   2f2b8:	2d01      	cmp	r5, #1
   2f2ba:	d10f      	bne.n	2f2dc <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2f2bc:	f3bf 8f5b 	dmb	ish
   2f2c0:	4b0b      	ldr	r3, [pc, #44]	; (2f2f0 <start_le_scan_legacy+0xa0>)
   2f2c2:	e853 1f00 	ldrex	r1, [r3]
   2f2c6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   2f2ca:	e843 1200 	strex	r2, r1, [r3]
   2f2ce:	2a00      	cmp	r2, #0
   2f2d0:	d1f7      	bne.n	2f2c2 <start_le_scan_legacy+0x72>
   2f2d2:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   2f2d6:	4620      	mov	r0, r4
   2f2d8:	b002      	add	sp, #8
   2f2da:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f2dc:	f06f 0180 	mvn.w	r1, #128	; 0x80
   2f2e0:	4803      	ldr	r0, [pc, #12]	; (2f2f0 <start_le_scan_legacy+0xa0>)
   2f2e2:	f01d fc90 	bl	4cc06 <atomic_and>
   2f2e6:	e7f6      	b.n	2f2d6 <start_le_scan_legacy+0x86>
		return -ENOBUFS;
   2f2e8:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2f2ec:	e7f3      	b.n	2f2d6 <start_le_scan_legacy+0x86>
   2f2ee:	bf00      	nop
   2f2f0:	200000fc 	.word	0x200000fc

0002f2f4 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   2f2f4:	4b01      	ldr	r3, [pc, #4]	; (2f2fc <bt_scan_reset+0x8>)
   2f2f6:	2200      	movs	r2, #0
   2f2f8:	601a      	str	r2, [r3, #0]
}
   2f2fa:	4770      	bx	lr
   2f2fc:	200045c8 	.word	0x200045c8

0002f300 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   2f300:	b538      	push	{r3, r4, r5, lr}
   2f302:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2f304:	f7ff ff6a 	bl	2f1dc <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2f308:	0641      	lsls	r1, r0, #25
   2f30a:	f3c0 1280 	ubfx	r2, r0, #6, #1
   2f30e:	d433      	bmi.n	2f378 <bt_le_scan_update+0x78>
   2f310:	f7ff ff64 	bl	2f1dc <atomic_get.constprop.0>
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   2f314:	0683      	lsls	r3, r0, #26
   2f316:	d427      	bmi.n	2f368 <bt_le_scan_update+0x68>

	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		struct bt_conn *conn;

		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   2f318:	2100      	movs	r1, #0
   2f31a:	2206      	movs	r2, #6
   2f31c:	4608      	mov	r0, r1
   2f31e:	f000 fe65 	bl	2ffec <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT);
		if (conn) {
   2f322:	4604      	mov	r4, r0
   2f324:	bb30      	cbnz	r0, 2f374 <bt_le_scan_update+0x74>
			bt_conn_unref(conn);
			return 0;
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   2f326:	2202      	movs	r2, #2
   2f328:	4601      	mov	r1, r0
   2f32a:	f000 fe5f 	bl	2ffec <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
   2f32e:	b318      	cbz	r0, 2f378 <bt_le_scan_update+0x78>
   2f330:	f3bf 8f5b 	dmb	ish
   2f334:	4b11      	ldr	r3, [pc, #68]	; (2f37c <bt_le_scan_update+0x7c>)
   2f336:	e853 1f00 	ldrex	r1, [r3]
   2f33a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   2f33e:	e843 1200 	strex	r2, r1, [r3]
   2f342:	2a00      	cmp	r2, #0
   2f344:	d1f7      	bne.n	2f336 <bt_le_scan_update+0x36>
   2f346:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   2f34a:	f01d fd46 	bl	4cdda <bt_conn_unref>
		window = BT_GAP_SCAN_FAST_WINDOW;
   2f34e:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   2f350:	4620      	mov	r0, r4
   2f352:	bf08      	it	eq
   2f354:	2212      	moveq	r2, #18
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   2f356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   2f35a:	bf16      	itet	ne
   2f35c:	2230      	movne	r2, #48	; 0x30
   2f35e:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   2f362:	2160      	movne	r1, #96	; 0x60
   2f364:	f7ff bf74 	b.w	2f250 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   2f368:	4610      	mov	r0, r2
   2f36a:	f7ff ff41 	bl	2f1f0 <bt_le_scan_set_enable_legacy>
		if (err) {
   2f36e:	2800      	cmp	r0, #0
   2f370:	d0d2      	beq.n	2f318 <bt_le_scan_update+0x18>
}
   2f372:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   2f374:	f01d fd31 	bl	4cdda <bt_conn_unref>
		return 0;
   2f378:	2000      	movs	r0, #0
   2f37a:	e7fa      	b.n	2f372 <bt_le_scan_update+0x72>
   2f37c:	200000fc 	.word	0x200000fc

0002f380 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   2f380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   2f384:	f100 0608 	add.w	r6, r0, #8
   2f388:	b08d      	sub	sp, #52	; 0x34
   2f38a:	4604      	mov	r4, r0
   2f38c:	4630      	mov	r0, r6
   2f38e:	f020 fd04 	bl	4fd9a <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   2f392:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 2f55c <bt_hci_le_adv_report+0x1dc>
   2f396:	4680      	mov	r8, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   2f398:	f1b8 0f00 	cmp.w	r8, #0
   2f39c:	d102      	bne.n	2f3a4 <bt_hci_le_adv_report+0x24>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   2f39e:	b00d      	add	sp, #52	; 0x34
   2f3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
   2f3a4:	89a3      	ldrh	r3, [r4, #12]
   2f3a6:	2b08      	cmp	r3, #8
   2f3a8:	d9f9      	bls.n	2f39e <bt_hci_le_adv_report+0x1e>
	return net_buf_simple_pull_mem(&buf->b, len);
   2f3aa:	2109      	movs	r1, #9
   2f3ac:	4630      	mov	r0, r6
   2f3ae:	f020 fcec 	bl	4fd8a <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
   2f3b2:	f890 9008 	ldrb.w	r9, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   2f3b6:	237f      	movs	r3, #127	; 0x7f
   2f3b8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
   2f3bc:	eb00 0309 	add.w	r3, r0, r9
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   2f3c0:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
   2f3c2:	7a5b      	ldrb	r3, [r3, #9]
   2f3c4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
   2f3c8:	23ff      	movs	r3, #255	; 0xff
   2f3ca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
   2f3ce:	2300      	movs	r3, #0
   2f3d0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   2f3d4:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
   2f3d8:	7802      	ldrb	r2, [r0, #0]
   2f3da:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   2f3de:	2a04      	cmp	r2, #4
   2f3e0:	bf9c      	itt	ls
   2f3e2:	4b5f      	ldrls	r3, [pc, #380]	; (2f560 <bt_hci_le_adv_report+0x1e0>)
   2f3e4:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   2f3e6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   2f3ea:	1c43      	adds	r3, r0, #1
   2f3ec:	4605      	mov	r5, r0
   2f3ee:	9301      	str	r3, [sp, #4]
   2f3f0:	f7ff fef4 	bl	2f1dc <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   2f3f4:	0647      	lsls	r7, r0, #25
   2f3f6:	d50d      	bpl.n	2f414 <bt_hci_le_adv_report+0x94>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   2f3f8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2f3fc:	0758      	lsls	r0, r3, #29
   2f3fe:	d509      	bpl.n	2f414 <bt_hci_le_adv_report+0x94>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   2f400:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
   2f402:	4630      	mov	r0, r6
   2f404:	3101      	adds	r1, #1
   2f406:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2f40a:	f020 fcb6 	bl	4fd7a <net_buf_simple_pull>
   2f40e:	fa5f f888 	uxtb.w	r8, r8
   2f412:	e7c1      	b.n	2f398 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   2f414:	786b      	ldrb	r3, [r5, #1]
   2f416:	1e9a      	subs	r2, r3, #2
   2f418:	2a01      	cmp	r2, #1
   2f41a:	d84e      	bhi.n	2f4ba <bt_hci_le_adv_report+0x13a>
	memcpy(dst, src, sizeof(*dst));
   2f41c:	2207      	movs	r2, #7
   2f41e:	1c69      	adds	r1, r5, #1
   2f420:	a804      	add	r0, sp, #16
   2f422:	f01c fca0 	bl	4bd66 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   2f426:	f89d 3010 	ldrb.w	r3, [sp, #16]
   2f42a:	3b02      	subs	r3, #2
   2f42c:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
   2f430:	ab04      	add	r3, sp, #16
   2f432:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
   2f434:	f8da 3000 	ldr.w	r3, [sl]
   2f438:	b1a3      	cbz	r3, 2f464 <bt_hci_le_adv_report+0xe4>
	state->offset = net_buf_simple_headroom(buf);
   2f43a:	4630      	mov	r0, r6
   2f43c:	f020 fcbd 	bl	4fdba <net_buf_simple_headroom>
	state->len = buf->len;
   2f440:	89a7      	ldrh	r7, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   2f442:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   2f446:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
   2f44a:	f8da c000 	ldr.w	ip, [sl]
		buf->len = len;
   2f44e:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   2f452:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   2f454:	4633      	mov	r3, r6
   2f456:	a804      	add	r0, sp, #16
   2f458:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
   2f45a:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   2f45c:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2f45e:	fa13 f38b 	uxtah	r3, r3, fp
   2f462:	60a3      	str	r3, [r4, #8]
	return list->head;
   2f464:	4b3f      	ldr	r3, [pc, #252]	; (2f564 <bt_hci_le_adv_report+0x1e4>)
   2f466:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   2f468:	2b00      	cmp	r3, #0
   2f46a:	d03b      	beq.n	2f4e4 <bt_hci_le_adv_report+0x164>
	return node->next;
   2f46c:	681a      	ldr	r2, [r3, #0]
   2f46e:	b102      	cbz	r2, 2f472 <bt_hci_le_adv_report+0xf2>
   2f470:	3a08      	subs	r2, #8
		if (listener->recv) {
   2f472:	f853 1c08 	ldr.w	r1, [r3, #-8]
   2f476:	b1b9      	cbz	r1, 2f4a8 <bt_hci_le_adv_report+0x128>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   2f478:	4617      	mov	r7, r2
   2f47a:	f1a3 0208 	sub.w	r2, r3, #8
	state->offset = net_buf_simple_headroom(buf);
   2f47e:	4630      	mov	r0, r6
   2f480:	9203      	str	r2, [sp, #12]
   2f482:	f020 fc9a 	bl	4fdba <net_buf_simple_headroom>
			listener->recv(info, buf);
   2f486:	9a03      	ldr	r2, [sp, #12]
	state->len = buf->len;
   2f488:	89a3      	ldrh	r3, [r4, #12]
   2f48a:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
   2f48c:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   2f490:	4683      	mov	fp, r0
			listener->recv(info, buf);
   2f492:	4631      	mov	r1, r6
   2f494:	a808      	add	r0, sp, #32
	state->len = buf->len;
   2f496:	9302      	str	r3, [sp, #8]
   2f498:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   2f49a:	6922      	ldr	r2, [r4, #16]
	buf->len = state->len;
   2f49c:	9b02      	ldr	r3, [sp, #8]
   2f49e:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2f4a0:	fa12 f28b 	uxtah	r2, r2, fp
   2f4a4:	60a2      	str	r2, [r4, #8]
}
   2f4a6:	463a      	mov	r2, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   2f4a8:	b1e2      	cbz	r2, 2f4e4 <bt_hci_le_adv_report+0x164>
   2f4aa:	6897      	ldr	r7, [r2, #8]
   2f4ac:	6813      	ldr	r3, [r2, #0]
   2f4ae:	b1bf      	cbz	r7, 2f4e0 <bt_hci_le_adv_report+0x160>
   2f4b0:	3f08      	subs	r7, #8
		if (listener->recv) {
   2f4b2:	2b00      	cmp	r3, #0
   2f4b4:	d1e3      	bne.n	2f47e <bt_hci_le_adv_report+0xfe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   2f4b6:	463a      	mov	r2, r7
   2f4b8:	e7f7      	b.n	2f4aa <bt_hci_le_adv_report+0x12a>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   2f4ba:	2bff      	cmp	r3, #255	; 0xff
   2f4bc:	d109      	bne.n	2f4d2 <bt_hci_le_adv_report+0x152>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   2f4be:	2300      	movs	r3, #0
   2f4c0:	9306      	str	r3, [sp, #24]
   2f4c2:	2207      	movs	r2, #7
   2f4c4:	f8cd 301b 	str.w	r3, [sp, #27]
   2f4c8:	a906      	add	r1, sp, #24
   2f4ca:	a804      	add	r0, sp, #16
   2f4cc:	f01c fc4b 	bl	4bd66 <memcpy>
}
   2f4d0:	e7ae      	b.n	2f430 <bt_hci_le_adv_report+0xb0>
		bt_addr_le_copy(&id_addr,
   2f4d2:	1c69      	adds	r1, r5, #1
   2f4d4:	2000      	movs	r0, #0
   2f4d6:	f01d fa02 	bl	4c8de <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   2f4da:	2207      	movs	r2, #7
   2f4dc:	4601      	mov	r1, r0
   2f4de:	e7f4      	b.n	2f4ca <bt_hci_le_adv_report+0x14a>
		if (listener->recv) {
   2f4e0:	2b00      	cmp	r3, #0
   2f4e2:	d1cc      	bne.n	2f47e <bt_hci_le_adv_report+0xfe>
	check_pending_conn(&id_addr, addr, info->adv_props);
   2f4e4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   2f4e8:	f7ff fe78 	bl	2f1dc <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2f4ec:	0641      	lsls	r1, r0, #25
   2f4ee:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   2f4f2:	d485      	bmi.n	2f400 <bt_hci_le_adv_report+0x80>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   2f4f4:	07d2      	lsls	r2, r2, #31
   2f4f6:	d583      	bpl.n	2f400 <bt_hci_le_adv_report+0x80>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   2f4f8:	2202      	movs	r2, #2
   2f4fa:	a904      	add	r1, sp, #16
   2f4fc:	4658      	mov	r0, fp
   2f4fe:	f000 fd75 	bl	2ffec <bt_conn_lookup_state_le>
	if (!conn) {
   2f502:	4607      	mov	r7, r0
   2f504:	2800      	cmp	r0, #0
   2f506:	f43f af7b 	beq.w	2f400 <bt_hci_le_adv_report+0x80>
   2f50a:	f7ff fe67 	bl	2f1dc <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   2f50e:	0683      	lsls	r3, r0, #26
   2f510:	d411      	bmi.n	2f536 <bt_hci_le_adv_report+0x1b6>
   2f512:	9901      	ldr	r1, [sp, #4]
   2f514:	2207      	movs	r2, #7
   2f516:	f107 0096 	add.w	r0, r7, #150	; 0x96
   2f51a:	f01c fc24 	bl	4bd66 <memcpy>
	if (bt_le_create_conn(conn)) {
   2f51e:	4638      	mov	r0, r7
   2f520:	f01c ff7a 	bl	4c418 <bt_le_create_conn>
   2f524:	b960      	cbnz	r0, 2f540 <bt_hci_le_adv_report+0x1c0>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   2f526:	4638      	mov	r0, r7
   2f528:	2106      	movs	r1, #6
   2f52a:	f000 fb37 	bl	2fb9c <bt_conn_set_state>
	bt_conn_unref(conn);
   2f52e:	4638      	mov	r0, r7
   2f530:	f01d fc53 	bl	4cdda <bt_conn_unref>
	return;
   2f534:	e764      	b.n	2f400 <bt_hci_le_adv_report+0x80>
	return bt_le_scan_set_enable_legacy(enable);
   2f536:	4658      	mov	r0, fp
   2f538:	f7ff fe5a 	bl	2f1f0 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   2f53c:	2800      	cmp	r0, #0
   2f53e:	d0e8      	beq.n	2f512 <bt_hci_le_adv_report+0x192>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   2f540:	231f      	movs	r3, #31
   2f542:	733b      	strb	r3, [r7, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2f544:	2100      	movs	r1, #0
   2f546:	4638      	mov	r0, r7
   2f548:	f000 fb28 	bl	2fb9c <bt_conn_set_state>
	bt_conn_unref(conn);
   2f54c:	4638      	mov	r0, r7
   2f54e:	f01d fc44 	bl	4cdda <bt_conn_unref>
	bt_le_scan_update(false);
   2f552:	2000      	movs	r0, #0
   2f554:	f7ff fed4 	bl	2f300 <bt_le_scan_update>
   2f558:	e752      	b.n	2f400 <bt_hci_le_adv_report+0x80>
   2f55a:	bf00      	nop
   2f55c:	200045c8 	.word	0x200045c8
   2f560:	0005439c 	.word	0x0005439c
   2f564:	200045c0 	.word	0x200045c0

0002f568 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   2f568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f56a:	4605      	mov	r5, r0
   2f56c:	f7ff fe36 	bl	2f1dc <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2f570:	0780      	lsls	r0, r0, #30
{
   2f572:	460f      	mov	r7, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2f574:	d56c      	bpl.n	2f650 <bt_le_scan_start+0xe8>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   2f576:	782a      	ldrb	r2, [r5, #0]
   2f578:	2a01      	cmp	r2, #1
   2f57a:	d903      	bls.n	2f584 <bt_le_scan_start+0x1c>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   2f57c:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   2f580:	4620      	mov	r0, r4
   2f582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   2f584:	686b      	ldr	r3, [r5, #4]
   2f586:	2b0f      	cmp	r3, #15
   2f588:	d8f8      	bhi.n	2f57c <bt_le_scan_start+0x14>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   2f58a:	8928      	ldrh	r0, [r5, #8]
   2f58c:	1f03      	subs	r3, r0, #4
   2f58e:	b29b      	uxth	r3, r3
   2f590:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   2f594:	42a3      	cmp	r3, r4
   2f596:	d8f1      	bhi.n	2f57c <bt_le_scan_start+0x14>
	if (param->window < 0x0004 || param->window > 0x4000) {
   2f598:	8969      	ldrh	r1, [r5, #10]
   2f59a:	1f0b      	subs	r3, r1, #4
   2f59c:	b29b      	uxth	r3, r3
   2f59e:	42a3      	cmp	r3, r4
   2f5a0:	d8ec      	bhi.n	2f57c <bt_le_scan_start+0x14>
	if (param->window > param->interval) {
   2f5a2:	4288      	cmp	r0, r1
   2f5a4:	d3ea      	bcc.n	2f57c <bt_le_scan_start+0x14>
	if (param->type && !bt_id_scan_random_addr_check()) {
   2f5a6:	b992      	cbnz	r2, 2f5ce <bt_le_scan_start+0x66>
   2f5a8:	f3bf 8f5b 	dmb	ish
   2f5ac:	4e2a      	ldr	r6, [pc, #168]	; (2f658 <bt_le_scan_start+0xf0>)
   2f5ae:	e856 0f00 	ldrex	r0, [r6]
   2f5b2:	f040 0340 	orr.w	r3, r0, #64	; 0x40
   2f5b6:	e846 3200 	strex	r2, r3, [r6]
   2f5ba:	2a00      	cmp	r2, #0
   2f5bc:	d1f7      	bne.n	2f5ae <bt_le_scan_start+0x46>
   2f5be:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2f5c2:	f010 0240 	ands.w	r2, r0, #64	; 0x40
   2f5c6:	d007      	beq.n	2f5d8 <bt_le_scan_start+0x70>
		return -EALREADY;
   2f5c8:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2f5cc:	e7d8      	b.n	2f580 <bt_le_scan_start+0x18>
	if (param->type && !bt_id_scan_random_addr_check()) {
   2f5ce:	f01d f9b2 	bl	4c936 <bt_id_scan_random_addr_check>
   2f5d2:	2800      	cmp	r0, #0
   2f5d4:	d1e8      	bne.n	2f5a8 <bt_le_scan_start+0x40>
   2f5d6:	e7d1      	b.n	2f57c <bt_le_scan_start+0x14>
   2f5d8:	f7ff fe00 	bl	2f1dc <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   2f5dc:	0681      	lsls	r1, r0, #26
   2f5de:	d50a      	bpl.n	2f5f6 <bt_le_scan_start+0x8e>
	return bt_le_scan_set_enable_legacy(enable);
   2f5e0:	4610      	mov	r0, r2
   2f5e2:	f7ff fe05 	bl	2f1f0 <bt_le_scan_set_enable_legacy>
		if (err) {
   2f5e6:	4604      	mov	r4, r0
   2f5e8:	b128      	cbz	r0, 2f5f6 <bt_le_scan_start+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f5ea:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2f5ee:	4630      	mov	r0, r6
   2f5f0:	f01d fb09 	bl	4cc06 <atomic_and>
		return err;
   2f5f4:	e7c4      	b.n	2f580 <bt_le_scan_start+0x18>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   2f5f6:	686b      	ldr	r3, [r5, #4]
	if (val) {
   2f5f8:	07db      	lsls	r3, r3, #31
   2f5fa:	d515      	bpl.n	2f628 <bt_le_scan_start+0xc0>
   2f5fc:	f3bf 8f5b 	dmb	ish
   2f600:	e856 3f00 	ldrex	r3, [r6]
   2f604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2f608:	e846 3200 	strex	r2, r3, [r6]
   2f60c:	2a00      	cmp	r2, #0
   2f60e:	d1f7      	bne.n	2f600 <bt_le_scan_start+0x98>
   2f610:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   2f614:	89ab      	ldrh	r3, [r5, #12]
   2f616:	b16b      	cbz	r3, 2f634 <bt_le_scan_start+0xcc>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f618:	480f      	ldr	r0, [pc, #60]	; (2f658 <bt_le_scan_start+0xf0>)
   2f61a:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2f61e:	f01d faf2 	bl	4cc06 <atomic_and>
			return -ENOTSUP;
   2f622:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2f626:	e7ab      	b.n	2f580 <bt_le_scan_start+0x18>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f628:	f46f 7180 	mvn.w	r1, #256	; 0x100
   2f62c:	480a      	ldr	r0, [pc, #40]	; (2f658 <bt_le_scan_start+0xf0>)
   2f62e:	f01d faea 	bl	4cc06 <atomic_and>
   2f632:	e7ef      	b.n	2f614 <bt_le_scan_start+0xac>
		err = start_le_scan_legacy(param->type, param->interval,
   2f634:	896a      	ldrh	r2, [r5, #10]
   2f636:	8929      	ldrh	r1, [r5, #8]
   2f638:	7828      	ldrb	r0, [r5, #0]
   2f63a:	f7ff fe09 	bl	2f250 <start_le_scan_legacy>
	if (err) {
   2f63e:	4604      	mov	r4, r0
   2f640:	b118      	cbz	r0, 2f64a <bt_le_scan_start+0xe2>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f642:	4805      	ldr	r0, [pc, #20]	; (2f658 <bt_le_scan_start+0xf0>)
   2f644:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2f648:	e7d2      	b.n	2f5f0 <bt_le_scan_start+0x88>
	scan_dev_found_cb = cb;
   2f64a:	4b04      	ldr	r3, [pc, #16]	; (2f65c <bt_le_scan_start+0xf4>)
   2f64c:	601f      	str	r7, [r3, #0]
	return 0;
   2f64e:	e797      	b.n	2f580 <bt_le_scan_start+0x18>
		return -EAGAIN;
   2f650:	f06f 040a 	mvn.w	r4, #10
   2f654:	e794      	b.n	2f580 <bt_le_scan_start+0x18>
   2f656:	bf00      	nop
   2f658:	200000fc 	.word	0x200000fc
   2f65c:	200045c8 	.word	0x200045c8

0002f660 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   2f660:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f662:	4808      	ldr	r0, [pc, #32]	; (2f684 <bt_le_scan_stop+0x24>)
   2f664:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2f668:	f01d facd 	bl	4cc06 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2f66c:	0643      	lsls	r3, r0, #25
   2f66e:	d506      	bpl.n	2f67e <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
   2f670:	4b05      	ldr	r3, [pc, #20]	; (2f688 <bt_le_scan_stop+0x28>)
   2f672:	2000      	movs	r0, #0
   2f674:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   2f676:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   2f67a:	f7ff be41 	b.w	2f300 <bt_le_scan_update>
}
   2f67e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2f682:	bd08      	pop	{r3, pc}
   2f684:	200000fc 	.word	0x200000fc
   2f688:	200045c8 	.word	0x200045c8

0002f68c <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   2f68c:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   2f68e:	4904      	ldr	r1, [pc, #16]	; (2f6a0 <bt_pub_key_is_debug+0x14>)
   2f690:	2240      	movs	r2, #64	; 0x40
   2f692:	f01c fb58 	bl	4bd46 <memcmp>
}
   2f696:	fab0 f080 	clz	r0, r0
   2f69a:	0940      	lsrs	r0, r0, #5
   2f69c:	bd08      	pop	{r3, pc}
   2f69e:	bf00      	nop
   2f6a0:	000543a1 	.word	0x000543a1

0002f6a4 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   2f6a4:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   2f6a6:	4b31      	ldr	r3, [pc, #196]	; (2f76c <bt_pub_key_gen+0xc8>)
   2f6a8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   2f6ac:	f003 0306 	and.w	r3, r3, #6
   2f6b0:	2b06      	cmp	r3, #6
   2f6b2:	d152      	bne.n	2f75a <bt_pub_key_gen+0xb6>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
   2f6b4:	2800      	cmp	r0, #0
   2f6b6:	d053      	beq.n	2f760 <bt_pub_key_gen+0xbc>
	return list->head;
   2f6b8:	4e2d      	ldr	r6, [pc, #180]	; (2f770 <bt_pub_key_gen+0xcc>)
   2f6ba:	6832      	ldr	r2, [r6, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f6bc:	b132      	cbz	r2, 2f6cc <bt_pub_key_gen+0x28>
   2f6be:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   2f6c0:	4283      	cmp	r3, r0
   2f6c2:	d050      	beq.n	2f766 <bt_pub_key_gen+0xc2>
	return node->next;
   2f6c4:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f6c6:	b10b      	cbz	r3, 2f6cc <bt_pub_key_gen+0x28>
   2f6c8:	3b04      	subs	r3, #4
   2f6ca:	e7f9      	b.n	2f6c0 <bt_pub_key_gen+0x1c>
	parent->next = child;
   2f6cc:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   2f6ce:	6872      	ldr	r2, [r6, #4]
			BT_WARN("Callback already registered");
			return -EALREADY;
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   2f6d0:	1d03      	adds	r3, r0, #4
	list->head = node;
   2f6d2:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2f6d4:	b902      	cbnz	r2, 2f6d8 <bt_pub_key_gen+0x34>
	list->tail = node;
   2f6d6:	6073      	str	r3, [r6, #4]
   2f6d8:	4c26      	ldr	r4, [pc, #152]	; (2f774 <bt_pub_key_gen+0xd0>)
   2f6da:	f3bf 8f5b 	dmb	ish
   2f6de:	e854 2f00 	ldrex	r2, [r4]
   2f6e2:	f042 0310 	orr.w	r3, r2, #16
   2f6e6:	e844 3100 	strex	r1, r3, [r4]
   2f6ea:	2900      	cmp	r1, #0
   2f6ec:	d1f7      	bne.n	2f6de <bt_pub_key_gen+0x3a>
   2f6ee:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2f6f2:	f012 0210 	ands.w	r2, r2, #16
   2f6f6:	d002      	beq.n	2f6fe <bt_pub_key_gen+0x5a>

		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
   2f6f8:	2500      	movs	r5, #0
}
   2f6fa:	4628      	mov	r0, r5
   2f6fc:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2f6fe:	f3bf 8f5b 	dmb	ish
   2f702:	e854 3f00 	ldrex	r3, [r4]
   2f706:	f023 0308 	bic.w	r3, r3, #8
   2f70a:	e844 3100 	strex	r1, r3, [r4]
   2f70e:	2900      	cmp	r1, #0
   2f710:	d1f7      	bne.n	2f702 <bt_pub_key_gen+0x5e>
   2f712:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   2f716:	4611      	mov	r1, r2
   2f718:	f242 0025 	movw	r0, #8229	; 0x2025
   2f71c:	f7fe fb58 	bl	2ddd0 <bt_hci_cmd_send_sync>
	if (err) {
   2f720:	4605      	mov	r5, r0
   2f722:	2800      	cmp	r0, #0
   2f724:	d0e8      	beq.n	2f6f8 <bt_pub_key_gen+0x54>
   2f726:	f3bf 8f5b 	dmb	ish
   2f72a:	e854 3f00 	ldrex	r3, [r4]
   2f72e:	f023 0310 	bic.w	r3, r3, #16
   2f732:	e844 3200 	strex	r2, r3, [r4]
   2f736:	2a00      	cmp	r2, #0
   2f738:	d1f7      	bne.n	2f72a <bt_pub_key_gen+0x86>
   2f73a:	f3bf 8f5b 	dmb	ish
	return list->head;
   2f73e:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f740:	b13c      	cbz	r4, 2f752 <bt_pub_key_gen+0xae>
			if (cb->func) {
   2f742:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f746:	3c04      	subs	r4, #4
			if (cb->func) {
   2f748:	b10b      	cbz	r3, 2f74e <bt_pub_key_gen+0xaa>
				cb->func(NULL);
   2f74a:	2000      	movs	r0, #0
   2f74c:	4798      	blx	r3
	return node->next;
   2f74e:	6864      	ldr	r4, [r4, #4]
   2f750:	e7f6      	b.n	2f740 <bt_pub_key_gen+0x9c>
	list->head = NULL;
   2f752:	2300      	movs	r3, #0
	list->tail = NULL;
   2f754:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   2f758:	e7cf      	b.n	2f6fa <bt_pub_key_gen+0x56>
		return -ENOTSUP;
   2f75a:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2f75e:	e7cc      	b.n	2f6fa <bt_pub_key_gen+0x56>
		return -EINVAL;
   2f760:	f06f 0515 	mvn.w	r5, #21
   2f764:	e7c9      	b.n	2f6fa <bt_pub_key_gen+0x56>
			return -EALREADY;
   2f766:	f06f 0577 	mvn.w	r5, #119	; 0x77
   2f76a:	e7c6      	b.n	2f6fa <bt_pub_key_gen+0x56>
   2f76c:	20000030 	.word	0x20000030
   2f770:	200045d0 	.word	0x200045d0
   2f774:	200000fc 	.word	0x200000fc

0002f778 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2f778:	4b05      	ldr	r3, [pc, #20]	; (2f790 <bt_pub_key_get+0x18>)
   2f77a:	f3bf 8f5b 	dmb	ish
   2f77e:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   2f780:	4804      	ldr	r0, [pc, #16]	; (2f794 <bt_pub_key_get+0x1c>)
   2f782:	f3bf 8f5b 	dmb	ish
	return NULL;
   2f786:	f013 0f08 	tst.w	r3, #8
}
   2f78a:	bf08      	it	eq
   2f78c:	2000      	moveq	r0, #0
   2f78e:	4770      	bx	lr
   2f790:	200000fc 	.word	0x200000fc
   2f794:	200073d5 	.word	0x200073d5

0002f798 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   2f798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   2f79a:	4d1f      	ldr	r5, [pc, #124]	; (2f818 <bt_dh_key_gen+0x80>)
   2f79c:	682b      	ldr	r3, [r5, #0]
   2f79e:	428b      	cmp	r3, r1
{
   2f7a0:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   2f7a2:	d032      	beq.n	2f80a <bt_dh_key_gen+0x72>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2f7a4:	b113      	cbz	r3, 2f7ac <bt_dh_key_gen+0x14>
		return -EBUSY;
   2f7a6:	f06f 000f 	mvn.w	r0, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   2f7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f7ac:	4b1b      	ldr	r3, [pc, #108]	; (2f81c <bt_dh_key_gen+0x84>)
   2f7ae:	f3bf 8f5b 	dmb	ish
   2f7b2:	681a      	ldr	r2, [r3, #0]
   2f7b4:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2f7b8:	f3c2 1700 	ubfx	r7, r2, #4, #1
   2f7bc:	06d2      	lsls	r2, r2, #27
   2f7be:	d4f2      	bmi.n	2f7a6 <bt_dh_key_gen+0xe>
   2f7c0:	f3bf 8f5b 	dmb	ish
   2f7c4:	681b      	ldr	r3, [r3, #0]
   2f7c6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   2f7ca:	071b      	lsls	r3, r3, #28
   2f7cc:	d520      	bpl.n	2f810 <bt_dh_key_gen+0x78>
	dh_key_cb = cb;
   2f7ce:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   2f7d0:	f242 0026 	movw	r0, #8230	; 0x2026
   2f7d4:	2140      	movs	r1, #64	; 0x40
   2f7d6:	f7fe fa9f 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   2f7da:	4604      	mov	r4, r0
   2f7dc:	b190      	cbz	r0, 2f804 <bt_dh_key_gen+0x6c>
	return net_buf_simple_add(&buf->b, len);
   2f7de:	2140      	movs	r1, #64	; 0x40
   2f7e0:	3008      	adds	r0, #8
   2f7e2:	f020 faa1 	bl	4fd28 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   2f7e6:	2240      	movs	r2, #64	; 0x40
   2f7e8:	4631      	mov	r1, r6
   2f7ea:	f01c fabc 	bl	4bd66 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   2f7ee:	463a      	mov	r2, r7
   2f7f0:	4621      	mov	r1, r4
   2f7f2:	f242 0026 	movw	r0, #8230	; 0x2026
   2f7f6:	f7fe faeb 	bl	2ddd0 <bt_hci_cmd_send_sync>
	if (err) {
   2f7fa:	2800      	cmp	r0, #0
   2f7fc:	d0d5      	beq.n	2f7aa <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   2f7fe:	2300      	movs	r3, #0
   2f800:	602b      	str	r3, [r5, #0]
		return err;
   2f802:	e7d2      	b.n	2f7aa <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   2f804:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2f808:	e7f9      	b.n	2f7fe <bt_dh_key_gen+0x66>
		return -EALREADY;
   2f80a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2f80e:	e7cc      	b.n	2f7aa <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   2f810:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   2f814:	e7c9      	b.n	2f7aa <bt_dh_key_gen+0x12>
   2f816:	bf00      	nop
   2f818:	200045cc 	.word	0x200045cc
   2f81c:	200000fc 	.word	0x200000fc

0002f820 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   2f820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2f822:	4c1b      	ldr	r4, [pc, #108]	; (2f890 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   2f824:	6886      	ldr	r6, [r0, #8]
   2f826:	f3bf 8f5b 	dmb	ish
   2f82a:	e854 3f00 	ldrex	r3, [r4]
   2f82e:	f023 0310 	bic.w	r3, r3, #16
   2f832:	e844 3200 	strex	r2, r3, [r4]
   2f836:	2a00      	cmp	r2, #0
   2f838:	d1f7      	bne.n	2f82a <bt_hci_evt_le_pkey_complete+0xa>
   2f83a:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   2f83e:	7833      	ldrb	r3, [r6, #0]
   2f840:	b983      	cbnz	r3, 2f864 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   2f842:	4814      	ldr	r0, [pc, #80]	; (2f894 <bt_hci_evt_le_pkey_complete+0x74>)
   2f844:	2240      	movs	r2, #64	; 0x40
   2f846:	1c71      	adds	r1, r6, #1
   2f848:	f01c fa8d 	bl	4bd66 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2f84c:	f3bf 8f5b 	dmb	ish
   2f850:	e854 3f00 	ldrex	r3, [r4]
   2f854:	f043 0308 	orr.w	r3, r3, #8
   2f858:	e844 3200 	strex	r2, r3, [r4]
   2f85c:	2a00      	cmp	r2, #0
   2f85e:	d1f7      	bne.n	2f850 <bt_hci_evt_le_pkey_complete+0x30>
   2f860:	f3bf 8f5b 	dmb	ish
	return list->head;
   2f864:	4d0c      	ldr	r5, [pc, #48]	; (2f898 <bt_hci_evt_le_pkey_complete+0x78>)
   2f866:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f868:	b16c      	cbz	r4, 2f886 <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   2f86a:	4f0a      	ldr	r7, [pc, #40]	; (2f894 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f86c:	3c04      	subs	r4, #4
		if (cb->func) {
   2f86e:	6823      	ldr	r3, [r4, #0]
   2f870:	b12b      	cbz	r3, 2f87e <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   2f872:	7832      	ldrb	r2, [r6, #0]
   2f874:	2a00      	cmp	r2, #0
   2f876:	bf0c      	ite	eq
   2f878:	4638      	moveq	r0, r7
   2f87a:	2000      	movne	r0, #0
   2f87c:	4798      	blx	r3
	return node->next;
   2f87e:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f880:	b10c      	cbz	r4, 2f886 <bt_hci_evt_le_pkey_complete+0x66>
   2f882:	3c04      	subs	r4, #4
   2f884:	e7f3      	b.n	2f86e <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   2f886:	2300      	movs	r3, #0
	list->tail = NULL;
   2f888:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   2f88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f88e:	bf00      	nop
   2f890:	200000fc 	.word	0x200000fc
   2f894:	200073d5 	.word	0x200073d5
   2f898:	200045d0 	.word	0x200045d0

0002f89c <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   2f89c:	4905      	ldr	r1, [pc, #20]	; (2f8b4 <bt_hci_evt_le_dhkey_complete+0x18>)
   2f89e:	680b      	ldr	r3, [r1, #0]
   2f8a0:	b133      	cbz	r3, 2f8b0 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   2f8a2:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   2f8a4:	2000      	movs	r0, #0
   2f8a6:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   2f8a8:	7811      	ldrb	r1, [r2, #0]
   2f8aa:	b901      	cbnz	r1, 2f8ae <bt_hci_evt_le_dhkey_complete+0x12>
   2f8ac:	1c50      	adds	r0, r2, #1
   2f8ae:	4718      	bx	r3
	}
}
   2f8b0:	4770      	bx	lr
   2f8b2:	bf00      	nop
   2f8b4:	200045cc 	.word	0x200045cc

0002f8b8 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   2f8b8:	2300      	movs	r3, #0
	tx->user_data = NULL;
   2f8ba:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   2f8be:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   2f8c0:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   2f8c2:	4801      	ldr	r0, [pc, #4]	; (2f8c8 <tx_free+0x10>)
   2f8c4:	f021 b928 	b.w	50b18 <k_queue_append>
   2f8c8:	2000130c 	.word	0x2000130c

0002f8cc <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   2f8cc:	4b0e      	ldr	r3, [pc, #56]	; (2f908 <notify_connected+0x3c>)
{
   2f8ce:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   2f8d0:	681d      	ldr	r5, [r3, #0]
{
   2f8d2:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   2f8d4:	b955      	cbnz	r5, 2f8ec <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f8d6:	4d0d      	ldr	r5, [pc, #52]	; (2f90c <notify_connected+0x40>)
   2f8d8:	4e0d      	ldr	r6, [pc, #52]	; (2f910 <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
   2f8da:	7b21      	ldrb	r1, [r4, #12]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f8dc:	42b5      	cmp	r5, r6
   2f8de:	d30c      	bcc.n	2f8fa <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
   2f8e0:	b989      	cbnz	r1, 2f906 <notify_connected+0x3a>
		bt_gatt_connected(conn);
   2f8e2:	4620      	mov	r0, r4
	}
}
   2f8e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
   2f8e8:	f002 bef6 	b.w	326d8 <bt_gatt_connected>
		if (cb->connected) {
   2f8ec:	682b      	ldr	r3, [r5, #0]
   2f8ee:	b113      	cbz	r3, 2f8f6 <notify_connected+0x2a>
			cb->connected(conn, conn->err);
   2f8f0:	7b21      	ldrb	r1, [r4, #12]
   2f8f2:	4620      	mov	r0, r4
   2f8f4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2f8f6:	69ed      	ldr	r5, [r5, #28]
   2f8f8:	e7ec      	b.n	2f8d4 <notify_connected+0x8>
		if (cb->connected) {
   2f8fa:	682b      	ldr	r3, [r5, #0]
   2f8fc:	b10b      	cbz	r3, 2f902 <notify_connected+0x36>
			cb->connected(conn, conn->err);
   2f8fe:	4620      	mov	r0, r4
   2f900:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f902:	3520      	adds	r5, #32
   2f904:	e7e9      	b.n	2f8da <notify_connected+0xe>
}
   2f906:	bd70      	pop	{r4, r5, r6, pc}
   2f908:	20004608 	.word	0x20004608
   2f90c:	000518cc 	.word	0x000518cc
   2f910:	000518cc 	.word	0x000518cc

0002f914 <send_frag>:
{
   2f914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   2f918:	694d      	ldr	r5, [r1, #20]
{
   2f91a:	4604      	mov	r4, r0
   2f91c:	460e      	mov	r6, r1
   2f91e:	4617      	mov	r7, r2
   2f920:	4699      	mov	r9, r3
	return z_impl_k_sem_take(sem, timeout);
   2f922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f926:	4844      	ldr	r0, [pc, #272]	; (2fa38 <send_frag+0x124>)
   2f928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2f92c:	f018 fc2a 	bl	48184 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   2f930:	7b63      	ldrb	r3, [r4, #13]
   2f932:	2b07      	cmp	r3, #7
   2f934:	d174      	bne.n	2fa20 <send_frag+0x10c>
	__asm__ volatile(
   2f936:	f04f 0320 	mov.w	r3, #32
   2f93a:	f3ef 8111 	mrs	r1, BASEPRI
   2f93e:	f383 8812 	msr	BASEPRI_MAX, r3
   2f942:	f3bf 8f6f 	isb	sy
	if (tx) {
   2f946:	69a2      	ldr	r2, [r4, #24]
   2f948:	2d00      	cmp	r5, #0
   2f94a:	d043      	beq.n	2f9d4 <send_frag+0xc0>
	parent->next = child;
   2f94c:	2300      	movs	r3, #0
   2f94e:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   2f950:	2a00      	cmp	r2, #0
   2f952:	d13c      	bne.n	2f9ce <send_frag+0xba>
	list->head = node;
   2f954:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   2f958:	f381 8811 	msr	BASEPRI, r1
   2f95c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   2f960:	2104      	movs	r1, #4
   2f962:	f106 0008 	add.w	r0, r6, #8
   2f966:	f020 fa00 	bl	4fd6a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2f96a:	8823      	ldrh	r3, [r4, #0]
   2f96c:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   2f970:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2f974:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2f976:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2f978:	3b04      	subs	r3, #4
   2f97a:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2f97c:	2302      	movs	r3, #2
   2f97e:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   2f980:	4630      	mov	r0, r6
   2f982:	f01c feb5 	bl	4c6f0 <bt_send>
	if (err) {
   2f986:	2800      	cmp	r0, #0
   2f988:	d054      	beq.n	2fa34 <send_frag+0x120>
	__asm__ volatile(
   2f98a:	f04f 0320 	mov.w	r3, #32
   2f98e:	f3ef 8111 	mrs	r1, BASEPRI
   2f992:	f383 8812 	msr	BASEPRI_MAX, r3
   2f996:	f3bf 8f6f 	isb	sy
		if (tx) {
   2f99a:	b37d      	cbz	r5, 2f9fc <send_frag+0xe8>
	return list->head;
   2f99c:	6962      	ldr	r2, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f99e:	2300      	movs	r3, #0
   2f9a0:	b152      	cbz	r2, 2f9b8 <send_frag+0xa4>
   2f9a2:	4295      	cmp	r5, r2
   2f9a4:	d127      	bne.n	2f9f6 <send_frag+0xe2>
	return node->next;
   2f9a6:	682a      	ldr	r2, [r5, #0]
	return list->tail;
   2f9a8:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   2f9aa:	b9fb      	cbnz	r3, 2f9ec <send_frag+0xd8>
   2f9ac:	42a8      	cmp	r0, r5
	list->head = node;
   2f9ae:	6162      	str	r2, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   2f9b0:	d100      	bne.n	2f9b4 <send_frag+0xa0>
	list->tail = node;
   2f9b2:	61a2      	str	r2, [r4, #24]
	parent->next = child;
   2f9b4:	2300      	movs	r3, #0
   2f9b6:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   2f9b8:	f381 8811 	msr	BASEPRI, r1
   2f9bc:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   2f9c0:	481d      	ldr	r0, [pc, #116]	; (2fa38 <send_frag+0x124>)
   2f9c2:	f018 fbb9 	bl	48138 <z_impl_k_sem_give>
		tx_free(tx);
   2f9c6:	4628      	mov	r0, r5
   2f9c8:	f7ff ff76 	bl	2f8b8 <tx_free>
   2f9cc:	e022      	b.n	2fa14 <send_frag+0x100>
   2f9ce:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2f9d0:	61a5      	str	r5, [r4, #24]
}
   2f9d2:	e7c1      	b.n	2f958 <send_frag+0x44>
		if (tail_tx) {
   2f9d4:	b132      	cbz	r2, 2f9e4 <send_frag+0xd0>
			pending_no_cb = &tail_tx->pending_no_cb;
   2f9d6:	68d3      	ldr	r3, [r2, #12]
   2f9d8:	f102 080c 	add.w	r8, r2, #12
		(*pending_no_cb)++;
   2f9dc:	3301      	adds	r3, #1
   2f9de:	f8c8 3000 	str.w	r3, [r8]
   2f9e2:	e7b9      	b.n	2f958 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   2f9e4:	69e3      	ldr	r3, [r4, #28]
   2f9e6:	f104 081c 	add.w	r8, r4, #28
   2f9ea:	e7f7      	b.n	2f9dc <send_frag+0xc8>
Z_GENLIST_REMOVE(slist, snode)
   2f9ec:	42a8      	cmp	r0, r5
	parent->next = child;
   2f9ee:	601a      	str	r2, [r3, #0]
	list->tail = node;
   2f9f0:	bf08      	it	eq
   2f9f2:	61a3      	streq	r3, [r4, #24]
}
   2f9f4:	e7de      	b.n	2f9b4 <send_frag+0xa0>
	return node->next;
   2f9f6:	4613      	mov	r3, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f9f8:	6812      	ldr	r2, [r2, #0]
   2f9fa:	e7d1      	b.n	2f9a0 <send_frag+0x8c>
			(*pending_no_cb)--;
   2f9fc:	f8d8 3000 	ldr.w	r3, [r8]
   2fa00:	3b01      	subs	r3, #1
   2fa02:	f8c8 3000 	str.w	r3, [r8]
   2fa06:	f381 8811 	msr	BASEPRI, r1
   2fa0a:	f3bf 8f6f 	isb	sy
   2fa0e:	480a      	ldr	r0, [pc, #40]	; (2fa38 <send_frag+0x124>)
   2fa10:	f018 fb92 	bl	48138 <z_impl_k_sem_give>
	if (always_consume) {
   2fa14:	f1b9 0f00 	cmp.w	r9, #0
   2fa18:	d108      	bne.n	2fa2c <send_frag+0x118>
	return false;
   2fa1a:	2000      	movs	r0, #0
}
   2fa1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2fa20:	4805      	ldr	r0, [pc, #20]	; (2fa38 <send_frag+0x124>)
   2fa22:	f018 fb89 	bl	48138 <z_impl_k_sem_give>
	if (tx) {
   2fa26:	2d00      	cmp	r5, #0
   2fa28:	d1cd      	bne.n	2f9c6 <send_frag+0xb2>
   2fa2a:	e7f3      	b.n	2fa14 <send_frag+0x100>
		net_buf_unref(buf);
   2fa2c:	4630      	mov	r0, r6
   2fa2e:	f013 fff1 	bl	43a14 <net_buf_unref>
   2fa32:	e7f2      	b.n	2fa1a <send_frag+0x106>
	return true;
   2fa34:	2001      	movs	r0, #1
   2fa36:	e7f1      	b.n	2fa1c <send_frag+0x108>
   2fa38:	20000130 	.word	0x20000130

0002fa3c <bt_conn_get_pkts>:
}
   2fa3c:	4800      	ldr	r0, [pc, #0]	; (2fa40 <bt_conn_get_pkts+0x4>)
   2fa3e:	4770      	bx	lr
   2fa40:	20000130 	.word	0x20000130

0002fa44 <bt_conn_new>:
{
   2fa44:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   2fa46:	2200      	movs	r2, #0
   2fa48:	4604      	mov	r4, r0
   2fa4a:	428a      	cmp	r2, r1
   2fa4c:	d102      	bne.n	2fa54 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   2fa4e:	2400      	movs	r4, #0
}
   2fa50:	4620      	mov	r0, r4
   2fa52:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2fa54:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   2fa58:	2001      	movs	r0, #1
   2fa5a:	f3bf 8f5b 	dmb	ish
   2fa5e:	e853 5f00 	ldrex	r5, [r3]
   2fa62:	2d00      	cmp	r5, #0
   2fa64:	d104      	bne.n	2fa70 <bt_conn_new+0x2c>
   2fa66:	e843 0c00 	strex	ip, r0, [r3]
   2fa6a:	f1bc 0f00 	cmp.w	ip, #0
   2fa6e:	d1f6      	bne.n	2fa5e <bt_conn_new+0x1a>
   2fa70:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   2fa74:	d002      	beq.n	2fa7c <_flash_used+0x4>
   2fa76:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2fa78:	4402      	add	r2, r0
   2fa7a:	e7e6      	b.n	2fa4a <bt_conn_new+0x6>
	if (!conn) {
   2fa7c:	2c00      	cmp	r4, #0
   2fa7e:	d0e6      	beq.n	2fa4e <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   2fa80:	22bc      	movs	r2, #188	; 0xbc
   2fa82:	2100      	movs	r1, #0
   2fa84:	4620      	mov	r0, r4
   2fa86:	f01c f979 	bl	4bd7c <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   2fa8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2fa8e:	4904      	ldr	r1, [pc, #16]	; (2faa0 <_flash_used+0x28>)
   2fa90:	f021 f94c 	bl	50d2c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   2fa94:	4903      	ldr	r1, [pc, #12]	; (2faa4 <_flash_used+0x2c>)
   2fa96:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2fa9a:	f021 f911 	bl	50cc0 <k_work_init>
	return conn;
   2fa9e:	e7d7      	b.n	2fa50 <bt_conn_new+0xc>
   2faa0:	00030329 	.word	0x00030329
   2faa4:	0004ccb7 	.word	0x0004ccb7

0002faa8 <bt_conn_send_cb>:
{
   2faa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2faaa:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   2faac:	7b43      	ldrb	r3, [r0, #13]
   2faae:	2b07      	cmp	r3, #7
{
   2fab0:	4604      	mov	r4, r0
   2fab2:	460e      	mov	r6, r1
   2fab4:	4615      	mov	r5, r2
	if (conn->state != BT_CONN_CONNECTED) {
   2fab6:	d114      	bne.n	2fae2 <bt_conn_send_cb+0x3a>
	if (cb) {
   2fab8:	b312      	cbz	r2, 2fb00 <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
   2faba:	f019 f847 	bl	48b4c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   2fabe:	4b13      	ldr	r3, [pc, #76]	; (2fb0c <bt_conn_send_cb+0x64>)
   2fac0:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   2fac2:	4813      	ldr	r0, [pc, #76]	; (2fb10 <bt_conn_send_cb+0x68>)
   2fac4:	bf07      	ittee	eq
   2fac6:	2200      	moveq	r2, #0
   2fac8:	2300      	moveq	r3, #0
   2faca:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   2face:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   2fad2:	f018 fafd 	bl	480d0 <z_impl_k_queue_get>
		if (!tx) {
   2fad6:	b1a8      	cbz	r0, 2fb04 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   2fad8:	7b63      	ldrb	r3, [r4, #13]
   2fada:	2b07      	cmp	r3, #7
   2fadc:	d004      	beq.n	2fae8 <bt_conn_send_cb+0x40>
			tx_free(tx);
   2fade:	f7ff feeb 	bl	2f8b8 <tx_free>
		return -ENOTCONN;
   2fae2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   2fae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx->user_data = user_data;
   2fae8:	e9c0 5701 	strd	r5, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   2faec:	2300      	movs	r3, #0
   2faee:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   2faf0:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   2faf2:	4631      	mov	r1, r6
   2faf4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2faf8:	f020 f8d7 	bl	4fcaa <net_buf_put>
	return 0;
   2fafc:	2000      	movs	r0, #0
   2fafe:	e7f2      	b.n	2fae6 <bt_conn_send_cb+0x3e>
   2fb00:	4610      	mov	r0, r2
   2fb02:	e7f5      	b.n	2faf0 <bt_conn_send_cb+0x48>
			return -ENOBUFS;
   2fb04:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2fb08:	e7ed      	b.n	2fae6 <bt_conn_send_cb+0x3e>
   2fb0a:	bf00      	nop
   2fb0c:	20004100 	.word	0x20004100
   2fb10:	2000130c 	.word	0x2000130c

0002fb14 <bt_conn_prepare_events>:
{
   2fb14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	conn_change.signaled = 0U;
   2fb18:	4b1a      	ldr	r3, [pc, #104]	; (2fb84 <bt_conn_prepare_events+0x70>)
   2fb1a:	4c1b      	ldr	r4, [pc, #108]	; (2fb88 <bt_conn_prepare_events+0x74>)
   2fb1c:	2500      	movs	r5, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   2fb1e:	462a      	mov	r2, r5
   2fb20:	2101      	movs	r1, #1
{
   2fb22:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
   2fb24:	609d      	str	r5, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   2fb26:	f021 fc25 	bl	51374 <k_poll_event_init>
   2fb2a:	2601      	movs	r6, #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
   2fb2c:	f04f 0914 	mov.w	r9, #20
	if (!atomic_get(&conn->ref)) {
   2fb30:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
		if (!conn_prepare_events(conn, &events[ev_count])) {
   2fb34:	fb09 7806 	mla	r8, r9, r6, r7
	if (!atomic_get(&conn->ref)) {
   2fb38:	f01d f885 	bl	4cc46 <atomic_get>
   2fb3c:	b158      	cbz	r0, 2fb56 <bt_conn_prepare_events+0x42>
	if (conn->state == BT_CONN_DISCONNECTED &&
   2fb3e:	7b63      	ldrb	r3, [r4, #13]
   2fb40:	b98b      	cbnz	r3, 2fb66 <bt_conn_prepare_events+0x52>
   2fb42:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2fb46:	1d20      	adds	r0, r4, #4
   2fb48:	f01d f86e 	bl	4cc28 <atomic_and>
   2fb4c:	0643      	lsls	r3, r0, #25
   2fb4e:	d50a      	bpl.n	2fb66 <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
   2fb50:	4620      	mov	r0, r4
   2fb52:	f01d f8bc 	bl	4ccce <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2fb56:	3501      	adds	r5, #1
   2fb58:	2d06      	cmp	r5, #6
   2fb5a:	f104 04c0 	add.w	r4, r4, #192	; 0xc0
   2fb5e:	d1e7      	bne.n	2fb30 <bt_conn_prepare_events+0x1c>
}
   2fb60:	4630      	mov	r0, r6
   2fb62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   2fb66:	7b63      	ldrb	r3, [r4, #13]
   2fb68:	2b07      	cmp	r3, #7
   2fb6a:	d1f4      	bne.n	2fb56 <bt_conn_prepare_events+0x42>
	k_poll_event_init(&events[0],
   2fb6c:	f104 0338 	add.w	r3, r4, #56	; 0x38
   2fb70:	2200      	movs	r2, #0
   2fb72:	2104      	movs	r1, #4
   2fb74:	4640      	mov	r0, r8
   2fb76:	f021 fbfd 	bl	51374 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   2fb7a:	2301      	movs	r3, #1
   2fb7c:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
   2fb80:	441e      	add	r6, r3
   2fb82:	e7e8      	b.n	2fb56 <bt_conn_prepare_events+0x42>
   2fb84:	20000814 	.word	0x20000814
   2fb88:	20001b28 	.word	0x20001b28

0002fb8c <bt_conn_lookup_handle>:
{
   2fb8c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   2fb8e:	2106      	movs	r1, #6
   2fb90:	4801      	ldr	r0, [pc, #4]	; (2fb98 <bt_conn_lookup_handle+0xc>)
   2fb92:	f01d b93b 	b.w	4ce0c <conn_lookup_handle>
   2fb96:	bf00      	nop
   2fb98:	20001b28 	.word	0x20001b28

0002fb9c <bt_conn_set_state>:
{
   2fb9c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   2fb9e:	7b45      	ldrb	r5, [r0, #13]
   2fba0:	428d      	cmp	r5, r1
{
   2fba2:	4604      	mov	r4, r0
	if (conn->state == state) {
   2fba4:	f000 80a6 	beq.w	2fcf4 <bt_conn_set_state+0x158>
	conn->state = state;
   2fba8:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   2fbaa:	b15d      	cbz	r5, 2fbc4 <bt_conn_set_state+0x28>
   2fbac:	2d06      	cmp	r5, #6
   2fbae:	d00f      	beq.n	2fbd0 <bt_conn_set_state+0x34>
	switch (conn->state) {
   2fbb0:	7b63      	ldrb	r3, [r4, #13]
   2fbb2:	2b07      	cmp	r3, #7
   2fbb4:	f200 809e 	bhi.w	2fcf4 <bt_conn_set_state+0x158>
   2fbb8:	e8df f003 	tbb	[pc, r3]
   2fbbc:	9c9c1142 	.word	0x9c9c1142
   2fbc0:	28779c9c 	.word	0x28779c9c
		if (conn->type != BT_CONN_TYPE_ISO) {
   2fbc4:	7883      	ldrb	r3, [r0, #2]
   2fbc6:	2b08      	cmp	r3, #8
   2fbc8:	d0f2      	beq.n	2fbb0 <bt_conn_set_state+0x14>
			bt_conn_ref(conn);
   2fbca:	f01d f8eb 	bl	4cda4 <bt_conn_ref>
   2fbce:	e7ef      	b.n	2fbb0 <bt_conn_set_state+0x14>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2fbd0:	7883      	ldrb	r3, [r0, #2]
   2fbd2:	2b01      	cmp	r3, #1
   2fbd4:	d1ec      	bne.n	2fbb0 <bt_conn_set_state+0x14>
			k_work_cancel_delayable(&conn->deferred_work);
   2fbd6:	3058      	adds	r0, #88	; 0x58
   2fbd8:	f021 f8b6 	bl	50d48 <k_work_cancel_delayable>
   2fbdc:	e7e8      	b.n	2fbb0 <bt_conn_set_state+0x14>
	z_impl_k_sem_give(sem);
   2fbde:	4d54      	ldr	r5, [pc, #336]	; (2fd30 <bt_conn_set_state+0x194>)
		tx->pending_no_cb = 0U;
   2fbe0:	2600      	movs	r6, #0
	__asm__ volatile(
   2fbe2:	f04f 0220 	mov.w	r2, #32
   2fbe6:	f3ef 8311 	mrs	r3, BASEPRI
   2fbea:	f382 8812 	msr	BASEPRI_MAX, r2
   2fbee:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   2fbf2:	69e2      	ldr	r2, [r4, #28]
   2fbf4:	2a00      	cmp	r2, #0
   2fbf6:	d077      	beq.n	2fce8 <bt_conn_set_state+0x14c>
			conn->pending_no_cb--;
   2fbf8:	3a01      	subs	r2, #1
   2fbfa:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   2fbfc:	f383 8811 	msr	BASEPRI, r3
   2fc00:	f3bf 8f6f 	isb	sy
   2fc04:	4628      	mov	r0, r5
   2fc06:	f018 fa97 	bl	48138 <z_impl_k_sem_give>
}
   2fc0a:	e7ea      	b.n	2fbe2 <bt_conn_set_state+0x46>
		if (conn->type == BT_CONN_TYPE_SCO) {
   2fc0c:	78a3      	ldrb	r3, [r4, #2]
   2fc0e:	2b04      	cmp	r3, #4
   2fc10:	d070      	beq.n	2fcf4 <bt_conn_set_state+0x158>
	z_impl_k_queue_init(queue);
   2fc12:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2fc16:	f020 ff73 	bl	50b00 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   2fc1a:	4846      	ldr	r0, [pc, #280]	; (2fd34 <bt_conn_set_state+0x198>)
   2fc1c:	2100      	movs	r1, #0
   2fc1e:	f019 fa55 	bl	490cc <z_impl_k_poll_signal_raise>
	list->head = NULL;
   2fc22:	2300      	movs	r3, #0
	list->tail = NULL;
   2fc24:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2fc28:	78e3      	ldrb	r3, [r4, #3]
   2fc2a:	2b01      	cmp	r3, #1
   2fc2c:	d162      	bne.n	2fcf4 <bt_conn_set_state+0x158>
			k_work_schedule(&conn->deferred_work,
   2fc2e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   2fc32:	2300      	movs	r3, #0
   2fc34:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
   2fc38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   2fc3c:	f018 bc68 	b.w	48510 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   2fc40:	78a3      	ldrb	r3, [r4, #2]
   2fc42:	2b04      	cmp	r3, #4
   2fc44:	d104      	bne.n	2fc50 <bt_conn_set_state+0xb4>
			bt_conn_unref(conn);
   2fc46:	4620      	mov	r0, r4
}
   2fc48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   2fc4c:	f01d b8c5 	b.w	4cdda <bt_conn_unref>
		switch (old_state) {
   2fc50:	3d01      	subs	r5, #1
   2fc52:	2d05      	cmp	r5, #5
   2fc54:	d84e      	bhi.n	2fcf4 <bt_conn_set_state+0x158>
   2fc56:	a301      	add	r3, pc, #4	; (adr r3, 2fc5c <bt_conn_set_state+0xc0>)
   2fc58:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   2fc5c:	0002fc75 	.word	0x0002fc75
   2fc60:	0002fc9d 	.word	0x0002fc9d
   2fc64:	0002fc47 	.word	0x0002fc47
   2fc68:	0002fc47 	.word	0x0002fc47
   2fc6c:	0002fc9d 	.word	0x0002fc9d
   2fc70:	0002fc9d 	.word	0x0002fc9d
			tx_notify(conn);
   2fc74:	4620      	mov	r0, r4
   2fc76:	f01c fffb 	bl	4cc70 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   2fc7a:	78a3      	ldrb	r3, [r4, #2]
   2fc7c:	2b01      	cmp	r3, #1
   2fc7e:	d103      	bne.n	2fc88 <bt_conn_set_state+0xec>
				k_work_cancel_delayable(&conn->deferred_work);
   2fc80:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2fc84:	f021 f860 	bl	50d48 <k_work_cancel_delayable>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2fc88:	2140      	movs	r1, #64	; 0x40
   2fc8a:	1d20      	adds	r0, r4, #4
   2fc8c:	f01c ffe1 	bl	4cc52 <atomic_or>
   2fc90:	4828      	ldr	r0, [pc, #160]	; (2fd34 <bt_conn_set_state+0x198>)
}
   2fc92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2fc96:	2100      	movs	r1, #0
   2fc98:	f019 ba18 	b.w	490cc <z_impl_k_poll_signal_raise>
			if (conn->err) {
   2fc9c:	7b23      	ldrb	r3, [r4, #12]
   2fc9e:	2b00      	cmp	r3, #0
   2fca0:	d0d1      	beq.n	2fc46 <bt_conn_set_state+0xaa>
				notify_connected(conn);
   2fca2:	4620      	mov	r0, r4
   2fca4:	f7ff fe12 	bl	2f8cc <notify_connected>
   2fca8:	e7cd      	b.n	2fc46 <bt_conn_set_state+0xaa>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2fcaa:	78a3      	ldrb	r3, [r4, #2]
   2fcac:	2b01      	cmp	r3, #1
   2fcae:	d121      	bne.n	2fcf4 <bt_conn_set_state+0x158>
					K_MSEC(10 * bt_dev.create_param.timeout));
   2fcb0:	4b21      	ldr	r3, [pc, #132]	; (2fd38 <bt_conn_set_state+0x19c>)
   2fcb2:	8a98      	ldrh	r0, [r3, #20]
			k_work_schedule(&conn->deferred_work,
   2fcb4:	3458      	adds	r4, #88	; 0x58
					K_MSEC(10 * bt_dev.create_param.timeout));
   2fcb6:	b1a8      	cbz	r0, 2fce4 <bt_conn_set_state+0x148>
   2fcb8:	230a      	movs	r3, #10
   2fcba:	4358      	muls	r0, r3
   2fcbc:	2100      	movs	r1, #0
			return ((t * to_hz + off) / from_hz);
   2fcbe:	03c9      	lsls	r1, r1, #15
   2fcc0:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2fcc4:	f240 33e7 	movw	r3, #999	; 0x3e7
   2fcc8:	03c0      	lsls	r0, r0, #15
   2fcca:	18c0      	adds	r0, r0, r3
   2fccc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2fcd0:	f04f 0300 	mov.w	r3, #0
   2fcd4:	f141 0100 	adc.w	r1, r1, #0
   2fcd8:	f7f6 fa12 	bl	26100 <__aeabi_uldivmod>
   2fcdc:	4602      	mov	r2, r0
   2fcde:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   2fce0:	4620      	mov	r0, r4
   2fce2:	e7a9      	b.n	2fc38 <bt_conn_set_state+0x9c>
					K_MSEC(10 * bt_dev.create_param.timeout));
   2fce4:	4601      	mov	r1, r0
   2fce6:	e7ea      	b.n	2fcbe <bt_conn_set_state+0x122>
	return list->head;
   2fce8:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2fcea:	b920      	cbnz	r0, 2fcf6 <bt_conn_set_state+0x15a>
   2fcec:	f383 8811 	msr	BASEPRI, r3
   2fcf0:	f3bf 8f6f 	isb	sy
}
   2fcf4:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2fcf6:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   2fcf8:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2fcfa:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2fcfc:	4288      	cmp	r0, r1
	list->tail = node;
   2fcfe:	bf08      	it	eq
   2fd00:	61a2      	streq	r2, [r4, #24]
   2fd02:	f383 8811 	msr	BASEPRI, r3
   2fd06:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2fd0a:	f04f 0220 	mov.w	r2, #32
   2fd0e:	f3ef 8311 	mrs	r3, BASEPRI
   2fd12:	f382 8812 	msr	BASEPRI_MAX, r2
   2fd16:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   2fd1a:	68c2      	ldr	r2, [r0, #12]
   2fd1c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   2fd1e:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   2fd20:	f383 8811 	msr	BASEPRI, r3
   2fd24:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   2fd28:	f7ff fdc6 	bl	2f8b8 <tx_free>
   2fd2c:	e76a      	b.n	2fc04 <bt_conn_set_state+0x68>
   2fd2e:	bf00      	nop
   2fd30:	20000130 	.word	0x20000130
   2fd34:	20000814 	.word	0x20000814
   2fd38:	20000030 	.word	0x20000030

0002fd3c <bt_conn_index>:
		index = conn - acl_conns;
   2fd3c:	4b03      	ldr	r3, [pc, #12]	; (2fd4c <bt_conn_index+0x10>)
   2fd3e:	1ac0      	subs	r0, r0, r3
   2fd40:	4b03      	ldr	r3, [pc, #12]	; (2fd50 <bt_conn_index+0x14>)
   2fd42:	1180      	asrs	r0, r0, #6
   2fd44:	4358      	muls	r0, r3
}
   2fd46:	b2c0      	uxtb	r0, r0
   2fd48:	4770      	bx	lr
   2fd4a:	bf00      	nop
   2fd4c:	20001b28 	.word	0x20001b28
   2fd50:	aaaaaaab 	.word	0xaaaaaaab

0002fd54 <bt_conn_create_pdu_timeout>:
{
   2fd54:	b538      	push	{r3, r4, r5, lr}
   2fd56:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   2fd58:	4906      	ldr	r1, [pc, #24]	; (2fd74 <bt_conn_create_pdu_timeout+0x20>)
   2fd5a:	2800      	cmp	r0, #0
   2fd5c:	bf08      	it	eq
   2fd5e:	4608      	moveq	r0, r1
   2fd60:	f01f ff7a 	bl	4fc58 <net_buf_alloc_fixed>
	if (!buf) {
   2fd64:	4604      	mov	r4, r0
   2fd66:	b118      	cbz	r0, 2fd70 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   2fd68:	1d29      	adds	r1, r5, #4
   2fd6a:	3008      	adds	r0, #8
   2fd6c:	f01f ff99 	bl	4fca2 <net_buf_simple_reserve>
}
   2fd70:	4620      	mov	r0, r4
   2fd72:	bd38      	pop	{r3, r4, r5, pc}
   2fd74:	20001354 	.word	0x20001354

0002fd78 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   2fd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2fd7a:	1d03      	adds	r3, r0, #4
{
   2fd7c:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2fd7e:	4618      	mov	r0, r3
   2fd80:	f01c ff61 	bl	4cc46 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2fd84:	0582      	lsls	r2, r0, #22
   2fd86:	d512      	bpl.n	2fdae <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   2fd88:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2fd8c:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   2fd90:	4291      	cmp	r1, r2
   2fd92:	d80c      	bhi.n	2fdae <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   2fd94:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   2fd98:	4291      	cmp	r1, r2
   2fd9a:	d308      	bcc.n	2fdae <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   2fd9c:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   2fda0:	4291      	cmp	r1, r2
   2fda2:	d104      	bne.n	2fdae <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2fda4:	f46f 7100 	mvn.w	r1, #512	; 0x200
   2fda8:	4618      	mov	r0, r3
   2fdaa:	f01c ff3d 	bl	4cc28 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   2fdae:	4b10      	ldr	r3, [pc, #64]	; (2fdf0 <notify_le_param_updated+0x78>)
   2fdb0:	681d      	ldr	r5, [r3, #0]
   2fdb2:	b925      	cbnz	r5, 2fdbe <notify_le_param_updated+0x46>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fdb4:	4d0f      	ldr	r5, [pc, #60]	; (2fdf4 <notify_le_param_updated+0x7c>)
   2fdb6:	4f10      	ldr	r7, [pc, #64]	; (2fdf8 <notify_le_param_updated+0x80>)
   2fdb8:	42bd      	cmp	r5, r7
   2fdba:	d30c      	bcc.n	2fdd6 <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   2fdbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   2fdbe:	68ee      	ldr	r6, [r5, #12]
   2fdc0:	b13e      	cbz	r6, 2fdd2 <notify_le_param_updated+0x5a>
			cb->le_param_updated(conn, conn->le.interval,
   2fdc2:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   2fdc6:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   2fdca:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   2fdce:	4620      	mov	r0, r4
   2fdd0:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   2fdd2:	69ed      	ldr	r5, [r5, #28]
   2fdd4:	e7ed      	b.n	2fdb2 <notify_le_param_updated+0x3a>
		if (cb->le_param_updated) {
   2fdd6:	68ee      	ldr	r6, [r5, #12]
   2fdd8:	b13e      	cbz	r6, 2fdea <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   2fdda:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   2fdde:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   2fde2:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   2fde6:	4620      	mov	r0, r4
   2fde8:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fdea:	3520      	adds	r5, #32
   2fdec:	e7e4      	b.n	2fdb8 <notify_le_param_updated+0x40>
   2fdee:	bf00      	nop
   2fdf0:	20004608 	.word	0x20004608
   2fdf4:	000518cc 	.word	0x000518cc
   2fdf8:	000518cc 	.word	0x000518cc

0002fdfc <notify_le_phy_updated>:
}
#endif

#if defined(CONFIG_BT_USER_PHY_UPDATE)
void notify_le_phy_updated(struct bt_conn *conn)
{
   2fdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   2fdfe:	4b0d      	ldr	r3, [pc, #52]	; (2fe34 <notify_le_phy_updated+0x38>)
   2fe00:	681d      	ldr	r5, [r3, #0]
{
   2fe02:	4604      	mov	r4, r0
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   2fe04:	f100 06b8 	add.w	r6, r0, #184	; 0xb8
	for (cb = callback_list; cb; cb = cb->_next) {
   2fe08:	b935      	cbnz	r5, 2fe18 <notify_le_phy_updated+0x1c>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fe0a:	4d0b      	ldr	r5, [pc, #44]	; (2fe38 <notify_le_phy_updated+0x3c>)
   2fe0c:	4e0b      	ldr	r6, [pc, #44]	; (2fe3c <notify_le_phy_updated+0x40>)
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   2fe0e:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fe12:	42b5      	cmp	r5, r6
   2fe14:	d307      	bcc.n	2fe26 <notify_le_phy_updated+0x2a>
		}
	}
}
   2fe16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_phy_updated) {
   2fe18:	69ab      	ldr	r3, [r5, #24]
   2fe1a:	b113      	cbz	r3, 2fe22 <notify_le_phy_updated+0x26>
			cb->le_phy_updated(conn, &conn->le.phy);
   2fe1c:	4631      	mov	r1, r6
   2fe1e:	4620      	mov	r0, r4
   2fe20:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2fe22:	69ed      	ldr	r5, [r5, #28]
   2fe24:	e7f0      	b.n	2fe08 <notify_le_phy_updated+0xc>
		if (cb->le_phy_updated) {
   2fe26:	69ab      	ldr	r3, [r5, #24]
   2fe28:	b113      	cbz	r3, 2fe30 <notify_le_phy_updated+0x34>
			cb->le_phy_updated(conn, &conn->le.phy);
   2fe2a:	4639      	mov	r1, r7
   2fe2c:	4620      	mov	r0, r4
   2fe2e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fe30:	3520      	adds	r5, #32
   2fe32:	e7ee      	b.n	2fe12 <notify_le_phy_updated+0x16>
   2fe34:	20004608 	.word	0x20004608
   2fe38:	000518cc 	.word	0x000518cc
   2fe3c:	000518cc 	.word	0x000518cc

0002fe40 <le_param_req>:
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   2fe40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fe44:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   2fe46:	4608      	mov	r0, r1
{
   2fe48:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   2fe4a:	f01c fbc9 	bl	4c5e0 <bt_le_conn_params_valid>
   2fe4e:	4605      	mov	r5, r0
   2fe50:	b918      	cbnz	r0, 2fe5a <le_param_req+0x1a>
		return false;
   2fe52:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   2fe54:	4628      	mov	r0, r5
   2fe56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   2fe5a:	4b13      	ldr	r3, [pc, #76]	; (2fea8 <le_param_req+0x68>)
   2fe5c:	681e      	ldr	r6, [r3, #0]
   2fe5e:	b946      	cbnz	r6, 2fe72 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fe60:	4e12      	ldr	r6, [pc, #72]	; (2feac <le_param_req+0x6c>)
   2fe62:	f8df 804c 	ldr.w	r8, [pc, #76]	; 2feb0 <le_param_req+0x70>
   2fe66:	4546      	cmp	r6, r8
   2fe68:	d2f4      	bcs.n	2fe54 <le_param_req+0x14>
		if (!cb->le_param_req) {
   2fe6a:	68b3      	ldr	r3, [r6, #8]
   2fe6c:	b983      	cbnz	r3, 2fe90 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fe6e:	3620      	adds	r6, #32
   2fe70:	e7f9      	b.n	2fe66 <le_param_req+0x26>
		if (!cb->le_param_req) {
   2fe72:	68b3      	ldr	r3, [r6, #8]
   2fe74:	b90b      	cbnz	r3, 2fe7a <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   2fe76:	69f6      	ldr	r6, [r6, #28]
   2fe78:	e7f1      	b.n	2fe5e <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   2fe7a:	4621      	mov	r1, r4
   2fe7c:	4638      	mov	r0, r7
   2fe7e:	4798      	blx	r3
   2fe80:	2800      	cmp	r0, #0
   2fe82:	d0e6      	beq.n	2fe52 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   2fe84:	4620      	mov	r0, r4
   2fe86:	f01c fbab 	bl	4c5e0 <bt_le_conn_params_valid>
   2fe8a:	2800      	cmp	r0, #0
   2fe8c:	d1f3      	bne.n	2fe76 <le_param_req+0x36>
   2fe8e:	e7e0      	b.n	2fe52 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   2fe90:	4621      	mov	r1, r4
   2fe92:	4638      	mov	r0, r7
   2fe94:	4798      	blx	r3
   2fe96:	2800      	cmp	r0, #0
   2fe98:	d0db      	beq.n	2fe52 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   2fe9a:	4620      	mov	r0, r4
   2fe9c:	f01c fba0 	bl	4c5e0 <bt_le_conn_params_valid>
   2fea0:	2800      	cmp	r0, #0
   2fea2:	d1e4      	bne.n	2fe6e <le_param_req+0x2e>
   2fea4:	e7d5      	b.n	2fe52 <le_param_req+0x12>
   2fea6:	bf00      	nop
   2fea8:	20004608 	.word	0x20004608
   2feac:	000518cc 	.word	0x000518cc
   2feb0:	000518cc 	.word	0x000518cc

0002feb4 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   2feb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2feb8:	78c3      	ldrb	r3, [r0, #3]
{
   2feba:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2febc:	b973      	cbnz	r3, 2fedc <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   2febe:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   2fec2:	4b10      	ldr	r3, [pc, #64]	; (2ff04 <bt_conn_identity_resolved+0x50>)
   2fec4:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2fec6:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   2feca:	b955      	cbnz	r5, 2fee2 <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fecc:	4d0e      	ldr	r5, [pc, #56]	; (2ff08 <bt_conn_identity_resolved+0x54>)
   2fece:	4f0f      	ldr	r7, [pc, #60]	; (2ff0c <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2fed0:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fed4:	42bd      	cmp	r5, r7
   2fed6:	d30c      	bcc.n	2fef2 <bt_conn_identity_resolved+0x3e>
		}
	}
}
   2fed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   2fedc:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   2fee0:	e7ef      	b.n	2fec2 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   2fee2:	692b      	ldr	r3, [r5, #16]
   2fee4:	b11b      	cbz	r3, 2feee <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2fee6:	463a      	mov	r2, r7
   2fee8:	4631      	mov	r1, r6
   2feea:	4620      	mov	r0, r4
   2feec:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2feee:	69ed      	ldr	r5, [r5, #28]
   2fef0:	e7eb      	b.n	2feca <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   2fef2:	692b      	ldr	r3, [r5, #16]
   2fef4:	b11b      	cbz	r3, 2fefe <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2fef6:	4642      	mov	r2, r8
   2fef8:	4631      	mov	r1, r6
   2fefa:	4620      	mov	r0, r4
   2fefc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fefe:	3520      	adds	r5, #32
   2ff00:	e7e8      	b.n	2fed4 <bt_conn_identity_resolved+0x20>
   2ff02:	bf00      	nop
   2ff04:	20004608 	.word	0x20004608
   2ff08:	000518cc 	.word	0x000518cc
   2ff0c:	000518cc 	.word	0x000518cc

0002ff10 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   2ff10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   2ff12:	7a43      	ldrb	r3, [r0, #9]
   2ff14:	7283      	strb	r3, [r0, #10]
{
   2ff16:	4604      	mov	r4, r0
   2ff18:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   2ff1a:	f01d f928 	bl	4d16e <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
   2ff1e:	4b0c      	ldr	r3, [pc, #48]	; (2ff50 <bt_conn_security_changed+0x40>)
   2ff20:	681d      	ldr	r5, [r3, #0]
   2ff22:	b925      	cbnz	r5, 2ff2e <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2ff24:	4d0b      	ldr	r5, [pc, #44]	; (2ff54 <bt_conn_security_changed+0x44>)
   2ff26:	4f0c      	ldr	r7, [pc, #48]	; (2ff58 <bt_conn_security_changed+0x48>)
   2ff28:	42bd      	cmp	r5, r7
   2ff2a:	d308      	bcc.n	2ff3e <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   2ff2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   2ff2e:	696b      	ldr	r3, [r5, #20]
   2ff30:	b11b      	cbz	r3, 2ff3a <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   2ff32:	7a61      	ldrb	r1, [r4, #9]
   2ff34:	4632      	mov	r2, r6
   2ff36:	4620      	mov	r0, r4
   2ff38:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2ff3a:	69ed      	ldr	r5, [r5, #28]
   2ff3c:	e7f1      	b.n	2ff22 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   2ff3e:	696b      	ldr	r3, [r5, #20]
   2ff40:	b11b      	cbz	r3, 2ff4a <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   2ff42:	7a61      	ldrb	r1, [r4, #9]
   2ff44:	4632      	mov	r2, r6
   2ff46:	4620      	mov	r0, r4
   2ff48:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2ff4a:	3520      	adds	r5, #32
   2ff4c:	e7ec      	b.n	2ff28 <bt_conn_security_changed+0x18>
   2ff4e:	bf00      	nop
   2ff50:	20004608 	.word	0x20004608
   2ff54:	000518cc 	.word	0x000518cc
   2ff58:	000518cc 	.word	0x000518cc

0002ff5c <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   2ff5c:	4b02      	ldr	r3, [pc, #8]	; (2ff68 <bt_conn_cb_register+0xc>)
   2ff5e:	681a      	ldr	r2, [r3, #0]
   2ff60:	61c2      	str	r2, [r0, #28]
	callback_list = cb;
   2ff62:	6018      	str	r0, [r3, #0]
}
   2ff64:	4770      	bx	lr
   2ff66:	bf00      	nop
   2ff68:	20004608 	.word	0x20004608

0002ff6c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   2ff6c:	b570      	push	{r4, r5, r6, lr}
   2ff6e:	4606      	mov	r6, r0
   2ff70:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   2ff72:	480a      	ldr	r0, [pc, #40]	; (2ff9c <bt_conn_add_le+0x30>)
   2ff74:	2106      	movs	r1, #6
   2ff76:	f7ff fd65 	bl	2fa44 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   2ff7a:	4604      	mov	r4, r0
   2ff7c:	b160      	cbz	r0, 2ff98 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   2ff7e:	7206      	strb	r6, [r0, #8]
   2ff80:	2207      	movs	r2, #7
   2ff82:	4629      	mov	r1, r5
   2ff84:	3088      	adds	r0, #136	; 0x88
   2ff86:	f01b feee 	bl	4bd66 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   2ff8a:	2301      	movs	r3, #1
   2ff8c:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   2ff8e:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   2ff90:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   2ff92:	4b03      	ldr	r3, [pc, #12]	; (2ffa0 <bt_conn_add_le+0x34>)
   2ff94:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   2ff98:	4620      	mov	r0, r4
   2ff9a:	bd70      	pop	{r4, r5, r6, pc}
   2ff9c:	20001b28 	.word	0x20001b28
   2ffa0:	00280018 	.word	0x00280018

0002ffa4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   2ffa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ffa8:	4e0f      	ldr	r6, [pc, #60]	; (2ffe8 <bt_conn_lookup_addr_le+0x44>)
   2ffaa:	4607      	mov	r7, r0
   2ffac:	4688      	mov	r8, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2ffae:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2ffb0:	4630      	mov	r0, r6
   2ffb2:	f01c fef7 	bl	4cda4 <bt_conn_ref>

		if (!conn) {
   2ffb6:	4604      	mov	r4, r0
   2ffb8:	b120      	cbz	r0, 2ffc4 <bt_conn_lookup_addr_le+0x20>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   2ffba:	7883      	ldrb	r3, [r0, #2]
   2ffbc:	2b01      	cmp	r3, #1
   2ffbe:	d00a      	beq.n	2ffd6 <bt_conn_lookup_addr_le+0x32>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   2ffc0:	f01c ff0b 	bl	4cdda <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2ffc4:	3501      	adds	r5, #1
   2ffc6:	2d06      	cmp	r5, #6
   2ffc8:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
   2ffcc:	d1f0      	bne.n	2ffb0 <bt_conn_lookup_addr_le+0xc>
		}

		return conn;
	}

	return NULL;
   2ffce:	2400      	movs	r4, #0
}
   2ffd0:	4620      	mov	r0, r4
   2ffd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   2ffd6:	4642      	mov	r2, r8
   2ffd8:	4639      	mov	r1, r7
   2ffda:	f01c ffa7 	bl	4cf2c <bt_conn_is_peer_addr_le>
   2ffde:	2800      	cmp	r0, #0
   2ffe0:	d1f6      	bne.n	2ffd0 <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
   2ffe2:	4620      	mov	r0, r4
   2ffe4:	e7ec      	b.n	2ffc0 <bt_conn_lookup_addr_le+0x1c>
   2ffe6:	bf00      	nop
   2ffe8:	20001b28 	.word	0x20001b28

0002ffec <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   2ffec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2fff0:	f8df a050 	ldr.w	sl, [pc, #80]	; 30044 <bt_conn_lookup_state_le+0x58>
{
   2fff4:	4606      	mov	r6, r0
   2fff6:	460f      	mov	r7, r1
   2fff8:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2fffa:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2fffc:	f04f 09c0 	mov.w	r9, #192	; 0xc0
   30000:	fb09 a005 	mla	r0, r9, r5, sl
   30004:	f01c fece 	bl	4cda4 <bt_conn_ref>

		if (!conn) {
   30008:	4604      	mov	r4, r0
   3000a:	b120      	cbz	r0, 30016 <bt_conn_lookup_state_le+0x2a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   3000c:	7883      	ldrb	r3, [r0, #2]
   3000e:	2b01      	cmp	r3, #1
   30010:	d006      	beq.n	30020 <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   30012:	f01c fee2 	bl	4cdda <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   30016:	3501      	adds	r5, #1
   30018:	2d06      	cmp	r5, #6
   3001a:	d1f1      	bne.n	30000 <bt_conn_lookup_state_le+0x14>
		}

		return conn;
	}

	return NULL;
   3001c:	2400      	movs	r4, #0
   3001e:	e00d      	b.n	3003c <bt_conn_lookup_state_le+0x50>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   30020:	b137      	cbz	r7, 30030 <bt_conn_lookup_state_le+0x44>
   30022:	463a      	mov	r2, r7
   30024:	4631      	mov	r1, r6
   30026:	f01c ff81 	bl	4cf2c <bt_conn_is_peer_addr_le>
   3002a:	b908      	cbnz	r0, 30030 <bt_conn_lookup_state_le+0x44>
			bt_conn_unref(conn);
   3002c:	4620      	mov	r0, r4
   3002e:	e7f0      	b.n	30012 <bt_conn_lookup_state_le+0x26>
		if (!(conn->state == state && conn->id == id)) {
   30030:	7b63      	ldrb	r3, [r4, #13]
   30032:	4543      	cmp	r3, r8
   30034:	d1fa      	bne.n	3002c <bt_conn_lookup_state_le+0x40>
   30036:	7a23      	ldrb	r3, [r4, #8]
   30038:	42b3      	cmp	r3, r6
   3003a:	d1f7      	bne.n	3002c <bt_conn_lookup_state_le+0x40>
}
   3003c:	4620      	mov	r0, r4
   3003e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30042:	bf00      	nop
   30044:	20001b28 	.word	0x20001b28

00030048 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   30048:	b570      	push	{r4, r5, r6, lr}
	info->type = conn->type;
   3004a:	7882      	ldrb	r2, [r0, #2]
   3004c:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   3004e:	78c5      	ldrb	r5, [r0, #3]
   30050:	704d      	strb	r5, [r1, #1]
	info->id = conn->id;
   30052:	7a03      	ldrb	r3, [r0, #8]
   30054:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
   30056:	2a01      	cmp	r2, #1
   30058:	d11e      	bne.n	30098 <bt_conn_get_info+0x50>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
		info->le.src = &bt_dev.id_addr[conn->id];
   3005a:	4a11      	ldr	r2, [pc, #68]	; (300a0 <bt_conn_get_info+0x58>)
   3005c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   30060:	4413      	add	r3, r2
		info->le.dst = &conn->le.dst;
   30062:	f100 0688 	add.w	r6, r0, #136	; 0x88
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   30066:	f100 0296 	add.w	r2, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
   3006a:	f100 048f 	add.w	r4, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   3006e:	b115      	cbz	r5, 30076 <bt_conn_get_info+0x2e>
   30070:	4615      	mov	r5, r2
   30072:	4622      	mov	r2, r4
   30074:	462c      	mov	r4, r5
		info->le.src = &bt_dev.id_addr[conn->id];
   30076:	e9c1 3601 	strd	r3, r6, [r1, #4]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   3007a:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   3007e:	828b      	strh	r3, [r1, #20]
			info->le.remote = &conn->le.resp_addr;
   30080:	e9c1 4203 	strd	r4, r2, [r1, #12]
		info->le.latency = conn->le.latency;
   30084:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   30088:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
#if defined(CONFIG_BT_USER_PHY_UPDATE)
		info->le.phy = &conn->le.phy;
   3008a:	30b8      	adds	r0, #184	; 0xb8
		info->le.timeout = conn->le.timeout;
   3008c:	f830 3c12 	ldrh.w	r3, [r0, #-18]
   30090:	830b      	strh	r3, [r1, #24]
		info->le.phy = &conn->le.phy;
   30092:	61c8      	str	r0, [r1, #28]
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   30094:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
   30096:	bd70      	pop	{r4, r5, r6, pc}
	return -EINVAL;
   30098:	f06f 0015 	mvn.w	r0, #21
   3009c:	e7fb      	b.n	30096 <bt_conn_get_info+0x4e>
   3009e:	bf00      	nop
   300a0:	20000030 	.word	0x20000030

000300a4 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   300a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   300a8:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   300aa:	4851      	ldr	r0, [pc, #324]	; (301f0 <bt_conn_le_create+0x14c>)
   300ac:	f01c fdcb 	bl	4cc46 <atomic_get>
   300b0:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   300b2:	0781      	lsls	r1, r0, #30
{
   300b4:	4615      	mov	r5, r2
   300b6:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   300b8:	d405      	bmi.n	300c6 <bt_conn_le_create+0x22>
		return -EAGAIN;
   300ba:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   300be:	4628      	mov	r0, r5
   300c0:	b002      	add	sp, #8
   300c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   300c6:	4610      	mov	r0, r2
   300c8:	f01c fa8a 	bl	4c5e0 <bt_le_conn_params_valid>
   300cc:	b910      	cbnz	r0, 300d4 <bt_conn_le_create+0x30>
		return -EINVAL;
   300ce:	f06f 0515 	mvn.w	r5, #21
   300d2:	e7f4      	b.n	300be <bt_conn_le_create+0x1a>
   300d4:	4846      	ldr	r0, [pc, #280]	; (301f0 <bt_conn_le_create+0x14c>)
   300d6:	f01c fdb6 	bl	4cc46 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   300da:	0642      	lsls	r2, r0, #25
   300dc:	d4ed      	bmi.n	300ba <bt_conn_le_create+0x16>
   300de:	4844      	ldr	r0, [pc, #272]	; (301f0 <bt_conn_le_create+0x14c>)
   300e0:	f01c fdb1 	bl	4cc46 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   300e4:	0503      	lsls	r3, r0, #20
   300e6:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   300ea:	d47a      	bmi.n	301e2 <bt_conn_le_create+0x13e>
	if (!bt_id_scan_random_addr_check()) {
   300ec:	f01c fc23 	bl	4c936 <bt_id_scan_random_addr_check>
   300f0:	2800      	cmp	r0, #0
   300f2:	d0ec      	beq.n	300ce <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   300f4:	4621      	mov	r1, r4
   300f6:	4640      	mov	r0, r8
   300f8:	f01c ff38 	bl	4cf6c <bt_conn_exists_le>
   300fc:	2800      	cmp	r0, #0
   300fe:	d1e6      	bne.n	300ce <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   30100:	7823      	ldrb	r3, [r4, #0]
   30102:	3b02      	subs	r3, #2
   30104:	2b01      	cmp	r3, #1
   30106:	d849      	bhi.n	3019c <bt_conn_le_create+0xf8>
   30108:	2207      	movs	r2, #7
   3010a:	4621      	mov	r1, r4
   3010c:	4668      	mov	r0, sp
   3010e:	f01b fe2a 	bl	4bd66 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   30112:	f89d 3000 	ldrb.w	r3, [sp]
   30116:	3b02      	subs	r3, #2
   30118:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   3011c:	4669      	mov	r1, sp
   3011e:	2000      	movs	r0, #0
   30120:	f7ff ff24 	bl	2ff6c <bt_conn_add_le>
	if (!conn) {
   30124:	4604      	mov	r4, r0
   30126:	2800      	cmp	r0, #0
   30128:	d05e      	beq.n	301e8 <bt_conn_le_create+0x144>
	conn->le.interval_min = param->interval_min;
   3012a:	882b      	ldrh	r3, [r5, #0]
   3012c:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   30130:	886b      	ldrh	r3, [r5, #2]
   30132:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   30136:	88ab      	ldrh	r3, [r5, #4]
   30138:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   3013c:	88eb      	ldrh	r3, [r5, #6]
   3013e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
   30142:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   30146:	4d2b      	ldr	r5, [pc, #172]	; (301f4 <bt_conn_le_create+0x150>)
   30148:	f105 0c08 	add.w	ip, r5, #8
   3014c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   30150:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   30152:	2b00      	cmp	r3, #0
   30154:	bf08      	it	eq
   30156:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   3015a:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   3015c:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   3015e:	b903      	cbnz	r3, 30162 <bt_conn_le_create+0xbe>
   30160:	89ab      	ldrh	r3, [r5, #12]
   30162:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   30164:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   30166:	b903      	cbnz	r3, 3016a <bt_conn_le_create+0xc6>
   30168:	89eb      	ldrh	r3, [r5, #14]
   3016a:	826b      	strh	r3, [r5, #18]
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   3016c:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   30170:	b11b      	cbz	r3, 3017a <bt_conn_le_create+0xd6>
   30172:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   30176:	429a      	cmp	r2, r3
   30178:	d91c      	bls.n	301b4 <bt_conn_le_create+0x110>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   3017a:	2102      	movs	r1, #2
   3017c:	4620      	mov	r0, r4
   3017e:	f7ff fd0d 	bl	2fb9c <bt_conn_set_state>
		err = bt_le_scan_update(true);
   30182:	2001      	movs	r0, #1
   30184:	f7ff f8bc 	bl	2f300 <bt_le_scan_update>
		if (err) {
   30188:	4605      	mov	r5, r0
   3018a:	b180      	cbz	r0, 301ae <bt_conn_le_create+0x10a>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   3018c:	4620      	mov	r0, r4
   3018e:	2100      	movs	r1, #0
   30190:	f7ff fd04 	bl	2fb9c <bt_conn_set_state>
			bt_conn_unref(conn);
   30194:	4620      	mov	r0, r4
   30196:	f01c fe20 	bl	4cdda <bt_conn_unref>
			return err;
   3019a:	e790      	b.n	300be <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   3019c:	4621      	mov	r1, r4
   3019e:	f01c fb9e 	bl	4c8de <bt_lookup_id_addr>
   301a2:	2207      	movs	r2, #7
   301a4:	4601      	mov	r1, r0
   301a6:	4668      	mov	r0, sp
   301a8:	f01b fddd 	bl	4bd66 <memcpy>
}
   301ac:	e7b6      	b.n	3011c <bt_conn_le_create+0x78>
		*ret_conn = conn;
   301ae:	603c      	str	r4, [r7, #0]
	return 0;
   301b0:	2500      	movs	r5, #0
   301b2:	e784      	b.n	300be <bt_conn_le_create+0x1a>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   301b4:	2106      	movs	r1, #6
   301b6:	4620      	mov	r0, r4
   301b8:	f7ff fcf0 	bl	2fb9c <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   301bc:	4620      	mov	r0, r4
   301be:	f01c f92b 	bl	4c418 <bt_le_create_conn>
	if (err) {
   301c2:	4605      	mov	r5, r0
   301c4:	2800      	cmp	r0, #0
   301c6:	d0f2      	beq.n	301ae <bt_conn_le_create+0x10a>
		conn->err = 0;
   301c8:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   301ca:	4631      	mov	r1, r6
   301cc:	4620      	mov	r0, r4
		conn->err = 0;
   301ce:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   301d0:	f7ff fce4 	bl	2fb9c <bt_conn_set_state>
		bt_conn_unref(conn);
   301d4:	4620      	mov	r0, r4
   301d6:	f01c fe00 	bl	4cdda <bt_conn_unref>
		bt_le_scan_update(false);
   301da:	4630      	mov	r0, r6
   301dc:	f7ff f890 	bl	2f300 <bt_le_scan_update>
		return err;
   301e0:	e76d      	b.n	300be <bt_conn_le_create+0x1a>
		return -EALREADY;
   301e2:	f06f 0577 	mvn.w	r5, #119	; 0x77
   301e6:	e76a      	b.n	300be <bt_conn_le_create+0x1a>
		return -ENOMEM;
   301e8:	f06f 050b 	mvn.w	r5, #11
   301ec:	e767      	b.n	300be <bt_conn_le_create+0x1a>
   301ee:	bf00      	nop
   301f0:	200000fc 	.word	0x200000fc
   301f4:	20000030 	.word	0x20000030

000301f8 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   301f8:	b570      	push	{r4, r5, r6, lr}
   301fa:	4606      	mov	r6, r0
   301fc:	482f      	ldr	r0, [pc, #188]	; (302bc <bt_le_set_auto_conn+0xc4>)
   301fe:	f01c fd22 	bl	4cc46 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   30202:	0780      	lsls	r0, r0, #30
{
   30204:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   30206:	d553      	bpl.n	302b0 <bt_le_set_auto_conn+0xb8>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   30208:	b929      	cbnz	r1, 30216 <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
   3020a:	f01c fb94 	bl	4c936 <bt_id_scan_random_addr_check>
   3020e:	b940      	cbnz	r0, 30222 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   30210:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   30214:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   30216:	4608      	mov	r0, r1
   30218:	f01c f9e2 	bl	4c5e0 <bt_le_conn_params_valid>
   3021c:	2800      	cmp	r0, #0
   3021e:	d1f4      	bne.n	3020a <bt_le_set_auto_conn+0x12>
   30220:	e7f6      	b.n	30210 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   30222:	4631      	mov	r1, r6
   30224:	2000      	movs	r0, #0
   30226:	f7ff febd 	bl	2ffa4 <bt_conn_lookup_addr_le>
	if (!conn) {
   3022a:	4604      	mov	r4, r0
   3022c:	b928      	cbnz	r0, 3023a <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   3022e:	4631      	mov	r1, r6
   30230:	f7ff fe9c 	bl	2ff6c <bt_conn_add_le>
		if (!conn) {
   30234:	4604      	mov	r4, r0
   30236:	2800      	cmp	r0, #0
   30238:	d03d      	beq.n	302b6 <bt_le_set_auto_conn+0xbe>
		if (!atomic_test_and_set_bit(conn->flags,
   3023a:	1d20      	adds	r0, r4, #4
	if (param) {
   3023c:	b33d      	cbz	r5, 3028e <bt_le_set_auto_conn+0x96>
	conn->le.interval_min = param->interval_min;
   3023e:	882b      	ldrh	r3, [r5, #0]
   30240:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   30244:	886b      	ldrh	r3, [r5, #2]
   30246:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
   3024a:	88ab      	ldrh	r3, [r5, #4]
   3024c:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   30250:	88eb      	ldrh	r3, [r5, #6]
   30252:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   30256:	2101      	movs	r1, #1
   30258:	f01c fcfb 	bl	4cc52 <atomic_or>
		if (!atomic_test_and_set_bit(conn->flags,
   3025c:	07c1      	lsls	r1, r0, #31
   3025e:	d402      	bmi.n	30266 <bt_le_set_auto_conn+0x6e>
			bt_conn_ref(conn);
   30260:	4620      	mov	r0, r4
   30262:	f01c fd9f 	bl	4cda4 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   30266:	7b63      	ldrb	r3, [r4, #13]
   30268:	b963      	cbnz	r3, 30284 <bt_le_set_auto_conn+0x8c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   3026a:	4814      	ldr	r0, [pc, #80]	; (302bc <bt_le_set_auto_conn+0xc4>)
   3026c:	f01c fceb 	bl	4cc46 <atomic_get>
   30270:	0783      	lsls	r3, r0, #30
   30272:	d507      	bpl.n	30284 <bt_le_set_auto_conn+0x8c>
		if (param) {
   30274:	b11d      	cbz	r5, 3027e <bt_le_set_auto_conn+0x86>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   30276:	2102      	movs	r1, #2
   30278:	4620      	mov	r0, r4
   3027a:	f7ff fc8f 	bl	2fb9c <bt_conn_set_state>
		bt_le_scan_update(false);
   3027e:	2000      	movs	r0, #0
   30280:	f7ff f83e 	bl	2f300 <bt_le_scan_update>
	bt_conn_unref(conn);
   30284:	4620      	mov	r0, r4
   30286:	f01c fda8 	bl	4cdda <bt_conn_unref>
	return 0;
   3028a:	2000      	movs	r0, #0
   3028c:	e7c2      	b.n	30214 <bt_le_set_auto_conn+0x1c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   3028e:	f06f 0101 	mvn.w	r1, #1
   30292:	f01c fcc9 	bl	4cc28 <atomic_and>
		if (atomic_test_and_clear_bit(conn->flags,
   30296:	07c2      	lsls	r2, r0, #31
   30298:	d5e5      	bpl.n	30266 <bt_le_set_auto_conn+0x6e>
			bt_conn_unref(conn);
   3029a:	4620      	mov	r0, r4
   3029c:	f01c fd9d 	bl	4cdda <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   302a0:	7b63      	ldrb	r3, [r4, #13]
   302a2:	2b02      	cmp	r3, #2
   302a4:	d1df      	bne.n	30266 <bt_le_set_auto_conn+0x6e>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   302a6:	4629      	mov	r1, r5
   302a8:	4620      	mov	r0, r4
   302aa:	f7ff fc77 	bl	2fb9c <bt_conn_set_state>
   302ae:	e7da      	b.n	30266 <bt_le_set_auto_conn+0x6e>
		return -EAGAIN;
   302b0:	f06f 000a 	mvn.w	r0, #10
   302b4:	e7ae      	b.n	30214 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   302b6:	f06f 000b 	mvn.w	r0, #11
   302ba:	e7ab      	b.n	30214 <bt_le_set_auto_conn+0x1c>
   302bc:	200000fc 	.word	0x200000fc

000302c0 <send_conn_le_param_update>:
{
   302c0:	b538      	push	{r3, r4, r5, lr}
   302c2:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   302c4:	4608      	mov	r0, r1
{
   302c6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   302c8:	f01c f98a 	bl	4c5e0 <bt_le_conn_params_valid>
   302cc:	b338      	cbz	r0, 3031e <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   302ce:	4b15      	ldr	r3, [pc, #84]	; (30324 <send_conn_le_param_update+0x64>)
   302d0:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   302d4:	0799      	lsls	r1, r3, #30
   302d6:	d407      	bmi.n	302e8 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   302d8:	78e3      	ldrb	r3, [r4, #3]
   302da:	b173      	cbz	r3, 302fa <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   302dc:	4629      	mov	r1, r5
   302de:	4620      	mov	r0, r4
}
   302e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   302e4:	f000 b9e0 	b.w	306a8 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   302e8:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   302ec:	079a      	lsls	r2, r3, #30
   302ee:	d5f3      	bpl.n	302d8 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   302f0:	1d20      	adds	r0, r4, #4
   302f2:	f01c fca8 	bl	4cc46 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   302f6:	0543      	lsls	r3, r0, #21
   302f8:	d4ee      	bmi.n	302d8 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   302fa:	4629      	mov	r1, r5
   302fc:	4620      	mov	r0, r4
   302fe:	f01c fe9c 	bl	4d03a <bt_conn_le_conn_update>
		if (rc == 0) {
   30302:	b958      	cbnz	r0, 3031c <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   30304:	882b      	ldrh	r3, [r5, #0]
   30306:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   3030a:	886b      	ldrh	r3, [r5, #2]
   3030c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   30310:	88ab      	ldrh	r3, [r5, #4]
   30312:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   30316:	88eb      	ldrh	r3, [r5, #6]
   30318:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   3031c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3031e:	f06f 0015 	mvn.w	r0, #21
   30322:	e7fb      	b.n	3031c <send_conn_le_param_update+0x5c>
   30324:	20000030 	.word	0x20000030

00030328 <deferred_work>:
{
   30328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   3032a:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   3032e:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   30330:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   30334:	b9fb      	cbnz	r3, 30376 <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   30336:	4628      	mov	r0, r5
   30338:	f01c ff01 	bl	4d13e <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   3033c:	4b24      	ldr	r3, [pc, #144]	; (303d0 <deferred_work+0xa8>)
   3033e:	681e      	ldr	r6, [r3, #0]
   30340:	b94e      	cbnz	r6, 30356 <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   30342:	4e24      	ldr	r6, [pc, #144]	; (303d4 <deferred_work+0xac>)
   30344:	4f24      	ldr	r7, [pc, #144]	; (303d8 <deferred_work+0xb0>)
   30346:	42be      	cmp	r6, r7
   30348:	d30d      	bcc.n	30366 <deferred_work+0x3e>
		bt_conn_unref(conn);
   3034a:	4628      	mov	r0, r5
}
   3034c:	b003      	add	sp, #12
   3034e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   30352:	f01c bd42 	b.w	4cdda <bt_conn_unref>
		if (cb->disconnected) {
   30356:	6873      	ldr	r3, [r6, #4]
   30358:	b11b      	cbz	r3, 30362 <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   3035a:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   3035e:	4628      	mov	r0, r5
   30360:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   30362:	69f6      	ldr	r6, [r6, #28]
   30364:	e7ec      	b.n	30340 <deferred_work+0x18>
		if (cb->disconnected) {
   30366:	6873      	ldr	r3, [r6, #4]
   30368:	b11b      	cbz	r3, 30372 <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   3036a:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   3036e:	4628      	mov	r0, r5
   30370:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   30372:	3620      	adds	r6, #32
   30374:	e7e7      	b.n	30346 <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   30376:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   3037a:	2b01      	cmp	r3, #1
   3037c:	d126      	bne.n	303cc <deferred_work+0xa4>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   3037e:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   30382:	b923      	cbnz	r3, 3038e <deferred_work+0x66>
}
   30384:	b003      	add	sp, #12
   30386:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_create_conn_cancel();
   3038a:	f7fd bdef 	b.w	2df6c <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   3038e:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   30392:	f46f 7100 	mvn.w	r1, #512	; 0x200
   30396:	4630      	mov	r0, r6
   30398:	f01c fc46 	bl	4cc28 <atomic_and>
   3039c:	0583      	lsls	r3, r0, #22
   3039e:	d50f      	bpl.n	303c0 <deferred_work+0x98>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   303a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   303a2:	9300      	str	r3, [sp, #0]
   303a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   303a6:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   303a8:	4669      	mov	r1, sp
   303aa:	4628      	mov	r0, r5
   303ac:	f7ff ff88 	bl	302c0 <send_conn_le_param_update>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   303b0:	f44f 7180 	mov.w	r1, #256	; 0x100
   303b4:	4630      	mov	r0, r6
}
   303b6:	b003      	add	sp, #12
   303b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   303bc:	f01c bc49 	b.w	4cc52 <atomic_or>
		param = BT_LE_CONN_PARAM(
   303c0:	4a06      	ldr	r2, [pc, #24]	; (303dc <deferred_work+0xb4>)
   303c2:	6810      	ldr	r0, [r2, #0]
   303c4:	6851      	ldr	r1, [r2, #4]
   303c6:	466b      	mov	r3, sp
   303c8:	c303      	stmia	r3!, {r0, r1}
   303ca:	e7ed      	b.n	303a8 <deferred_work+0x80>
}
   303cc:	b003      	add	sp, #12
   303ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   303d0:	20004608 	.word	0x20004608
   303d4:	000518cc 	.word	0x000518cc
   303d8:	000518cc 	.word	0x000518cc
   303dc:	00051ac2 	.word	0x00051ac2

000303e0 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   303e0:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   303e2:	4801      	ldr	r0, [pc, #4]	; (303e8 <bt_conn_create_frag_timeout+0x8>)
   303e4:	f7ff bcb6 	b.w	2fd54 <bt_conn_create_pdu_timeout>
   303e8:	200013ac 	.word	0x200013ac

000303ec <create_frag>:
{
   303ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   303f0:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   303f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   303f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   303fa:	2000      	movs	r0, #0
{
   303fc:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   303fe:	f7ff ffef 	bl	303e0 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   30402:	7b73      	ldrb	r3, [r6, #13]
   30404:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   30406:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   30408:	f04f 0600 	mov.w	r6, #0
   3040c:	d005      	beq.n	3041a <create_frag+0x2e>
		net_buf_unref(frag);
   3040e:	f013 fb01 	bl	43a14 <net_buf_unref>
		return NULL;
   30412:	4635      	mov	r5, r6
}
   30414:	4628      	mov	r0, r5
   30416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   3041a:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   3041c:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   30420:	4e0c      	ldr	r6, [pc, #48]	; (30454 <create_frag+0x68>)
   30422:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   30424:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   30428:	f01f fccb 	bl	4fdc2 <net_buf_simple_tailroom>
   3042c:	4580      	cmp	r8, r0
   3042e:	d20c      	bcs.n	3044a <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   30430:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   30434:	f854 1f08 	ldr.w	r1, [r4, #8]!
   30438:	4632      	mov	r2, r6
   3043a:	4638      	mov	r0, r7
   3043c:	f01f fc7a 	bl	4fd34 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   30440:	4631      	mov	r1, r6
   30442:	4620      	mov	r0, r4
   30444:	f01f fc99 	bl	4fd7a <net_buf_simple_pull>
   30448:	e7e4      	b.n	30414 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   3044a:	4638      	mov	r0, r7
   3044c:	f01f fcb9 	bl	4fdc2 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   30450:	b286      	uxth	r6, r0
   30452:	e7ef      	b.n	30434 <create_frag+0x48>
   30454:	20000030 	.word	0x20000030

00030458 <bt_conn_process_tx>:
{
   30458:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   3045a:	7b43      	ldrb	r3, [r0, #13]
{
   3045c:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   3045e:	b95b      	cbnz	r3, 30478 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   30460:	f06f 0140 	mvn.w	r1, #64	; 0x40
   30464:	3004      	adds	r0, #4
   30466:	f01c fbdf 	bl	4cc28 <atomic_and>
   3046a:	0643      	lsls	r3, r0, #25
   3046c:	d504      	bpl.n	30478 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   3046e:	4620      	mov	r0, r4
}
   30470:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   30474:	f01c bc2b 	b.w	4ccce <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   30478:	2200      	movs	r2, #0
   3047a:	2300      	movs	r3, #0
   3047c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   30480:	f01f fbef 	bl	4fc62 <net_buf_get>
	BT_ASSERT(buf);
   30484:	4605      	mov	r5, r0
   30486:	b960      	cbnz	r0, 304a2 <bt_conn_process_tx+0x4a>
   30488:	4a1f      	ldr	r2, [pc, #124]	; (30508 <bt_conn_process_tx+0xb0>)
   3048a:	4920      	ldr	r1, [pc, #128]	; (3050c <bt_conn_process_tx+0xb4>)
   3048c:	4820      	ldr	r0, [pc, #128]	; (30510 <bt_conn_process_tx+0xb8>)
   3048e:	f240 23e7 	movw	r3, #743	; 0x2e7
   30492:	f019 fb39 	bl	49b08 <printk>
   30496:	4040      	eors	r0, r0
   30498:	f380 8811 	msr	BASEPRI, r0
   3049c:	f04f 0003 	mov.w	r0, #3
   304a0:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   304a2:	4e1c      	ldr	r6, [pc, #112]	; (30514 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
   304a4:	89aa      	ldrh	r2, [r5, #12]
   304a6:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   304aa:	429a      	cmp	r2, r3
   304ac:	d807      	bhi.n	304be <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   304ae:	2300      	movs	r3, #0
   304b0:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   304b2:	4629      	mov	r1, r5
   304b4:	4620      	mov	r0, r4
   304b6:	f7ff fa2d 	bl	2f914 <send_frag>
	if (!send_buf(conn, buf)) {
   304ba:	b130      	cbz	r0, 304ca <bt_conn_process_tx+0x72>
}
   304bc:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   304be:	4629      	mov	r1, r5
   304c0:	4620      	mov	r0, r4
   304c2:	f7ff ff93 	bl	303ec <create_frag>
	if (!frag) {
   304c6:	4601      	mov	r1, r0
   304c8:	b920      	cbnz	r0, 304d4 <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
   304ca:	4628      	mov	r0, r5
}
   304cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   304d0:	f013 baa0 	b.w	43a14 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   304d4:	2301      	movs	r3, #1
   304d6:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   304d8:	4620      	mov	r0, r4
   304da:	f7ff fa1b 	bl	2f914 <send_frag>
   304de:	2800      	cmp	r0, #0
   304e0:	d0f3      	beq.n	304ca <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   304e2:	89aa      	ldrh	r2, [r5, #12]
   304e4:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   304e8:	429a      	cmp	r2, r3
   304ea:	d802      	bhi.n	304f2 <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
   304ec:	2300      	movs	r3, #0
   304ee:	2203      	movs	r2, #3
   304f0:	e7df      	b.n	304b2 <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   304f2:	4629      	mov	r1, r5
   304f4:	4620      	mov	r0, r4
   304f6:	f7ff ff79 	bl	303ec <create_frag>
		if (!frag) {
   304fa:	4601      	mov	r1, r0
   304fc:	2800      	cmp	r0, #0
   304fe:	d0e4      	beq.n	304ca <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   30500:	2301      	movs	r3, #1
   30502:	461a      	mov	r2, r3
   30504:	e7e8      	b.n	304d8 <bt_conn_process_tx+0x80>
   30506:	bf00      	nop
   30508:	000543e1 	.word	0x000543e1
   3050c:	000542c2 	.word	0x000542c2
   30510:	000542a5 	.word	0x000542a5
   30514:	20000030 	.word	0x20000030

00030518 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   30518:	4b0b      	ldr	r3, [pc, #44]	; (30548 <bt_conn_auth_cb_register+0x30>)
   3051a:	b158      	cbz	r0, 30534 <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   3051c:	681a      	ldr	r2, [r3, #0]
   3051e:	b962      	cbnz	r2, 3053a <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   30520:	6942      	ldr	r2, [r0, #20]
   30522:	b93a      	cbnz	r2, 30534 <bt_conn_auth_cb_register+0x1c>
   30524:	6842      	ldr	r2, [r0, #4]
   30526:	b95a      	cbnz	r2, 30540 <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   30528:	6882      	ldr	r2, [r0, #8]
   3052a:	b94a      	cbnz	r2, 30540 <bt_conn_auth_cb_register+0x28>
   3052c:	68c2      	ldr	r2, [r0, #12]
   3052e:	b93a      	cbnz	r2, 30540 <bt_conn_auth_cb_register+0x28>
   30530:	6982      	ldr	r2, [r0, #24]
   30532:	b92a      	cbnz	r2, 30540 <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   30534:	6018      	str	r0, [r3, #0]
		return 0;
   30536:	2000      	movs	r0, #0
   30538:	4770      	bx	lr
		return -EALREADY;
   3053a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   3053e:	4770      	bx	lr
		return -EINVAL;
   30540:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   30544:	4770      	bx	lr
   30546:	bf00      	nop
   30548:	2000460c 	.word	0x2000460c

0003054c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   3054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   3054e:	4917      	ldr	r1, [pc, #92]	; (305ac <bt_conn_init+0x60>)
   30550:	4817      	ldr	r0, [pc, #92]	; (305b0 <bt_conn_init+0x64>)
   30552:	f020 fae1 	bl	50b18 <k_queue_append>
   30556:	4917      	ldr	r1, [pc, #92]	; (305b4 <bt_conn_init+0x68>)
   30558:	4815      	ldr	r0, [pc, #84]	; (305b0 <bt_conn_init+0x64>)
   3055a:	f020 fadd 	bl	50b18 <k_queue_append>
   3055e:	4916      	ldr	r1, [pc, #88]	; (305b8 <bt_conn_init+0x6c>)
   30560:	4813      	ldr	r0, [pc, #76]	; (305b0 <bt_conn_init+0x64>)
   30562:	f020 fad9 	bl	50b18 <k_queue_append>
	}

	bt_att_init();
   30566:	f01d fafc 	bl	4db62 <bt_att_init>

	err = bt_smp_init();
   3056a:	f003 fb15 	bl	33b98 <bt_smp_init>
	if (err) {
   3056e:	4605      	mov	r5, r0
   30570:	b9d0      	cbnz	r0, 305a8 <bt_conn_init+0x5c>
		return err;
	}

	bt_l2cap_init();
   30572:	f01c feeb 	bl	4d34c <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   30576:	4f11      	ldr	r7, [pc, #68]	; (305bc <bt_conn_init+0x70>)
   30578:	462e      	mov	r6, r5
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   3057a:	4638      	mov	r0, r7
   3057c:	f01c fc12 	bl	4cda4 <bt_conn_ref>

			if (!conn) {
   30580:	4604      	mov	r4, r0
   30582:	b160      	cbz	r0, 3059e <bt_conn_init+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   30584:	3004      	adds	r0, #4
   30586:	f01c fb5e 	bl	4cc46 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   3058a:	07c3      	lsls	r3, r0, #31
   3058c:	d504      	bpl.n	30598 <bt_conn_init+0x4c>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
   3058e:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   30590:	2102      	movs	r1, #2
   30592:	4620      	mov	r0, r4
   30594:	f7ff fb02 	bl	2fb9c <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
   30598:	4620      	mov	r0, r4
   3059a:	f01c fc1e 	bl	4cdda <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   3059e:	3601      	adds	r6, #1
   305a0:	2e06      	cmp	r6, #6
   305a2:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
   305a6:	d1e8      	bne.n	3057a <bt_conn_init+0x2e>
		}
	}

	return 0;
}
   305a8:	4628      	mov	r0, r5
   305aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   305ac:	200045d8 	.word	0x200045d8
   305b0:	2000130c 	.word	0x2000130c
   305b4:	200045e8 	.word	0x200045e8
   305b8:	200045f8 	.word	0x200045f8
   305bc:	20001b28 	.word	0x20001b28

000305c0 <l2cap_accept>:
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   305c0:	b530      	push	{r4, r5, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   305c2:	4c09      	ldr	r4, [pc, #36]	; (305e8 <l2cap_accept+0x28>)
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   305c4:	2300      	movs	r3, #0
   305c6:	25e8      	movs	r5, #232	; 0xe8
		if (l2cap->chan.chan.conn) {
   305c8:	fb05 f003 	mul.w	r0, r5, r3
   305cc:	1902      	adds	r2, r0, r4
   305ce:	5820      	ldr	r0, [r4, r0]
   305d0:	b128      	cbz	r0, 305de <l2cap_accept+0x1e>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   305d2:	3301      	adds	r3, #1
   305d4:	2b06      	cmp	r3, #6
   305d6:	d1f7      	bne.n	305c8 <l2cap_accept+0x8>
		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   305d8:	f06f 000b 	mvn.w	r0, #11
}
   305dc:	bd30      	pop	{r4, r5, pc}
		l2cap->chan.chan.ops = &ops;
   305de:	4b03      	ldr	r3, [pc, #12]	; (305ec <l2cap_accept+0x2c>)
   305e0:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   305e2:	600a      	str	r2, [r1, #0]
		return 0;
   305e4:	e7fa      	b.n	305dc <l2cap_accept+0x1c>
   305e6:	bf00      	nop
   305e8:	20001fa8 	.word	0x20001fa8
   305ec:	0005289c 	.word	0x0005289c

000305f0 <bt_l2cap_connected>:
{
   305f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   305f4:	4e29      	ldr	r6, [pc, #164]	; (3069c <bt_l2cap_connected+0xac>)
   305f6:	4f2a      	ldr	r7, [pc, #168]	; (306a0 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   305f8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 306a4 <bt_l2cap_connected+0xb4>
{
   305fc:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   305fe:	42be      	cmp	r6, r7
   30600:	d302      	bcc.n	30608 <bt_l2cap_connected+0x18>
}
   30602:	b003      	add	sp, #12
   30604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   30608:	6873      	ldr	r3, [r6, #4]
   3060a:	a901      	add	r1, sp, #4
   3060c:	4620      	mov	r0, r4
   3060e:	4798      	blx	r3
   30610:	2800      	cmp	r0, #0
   30612:	db3d      	blt.n	30690 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   30614:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   30616:	8833      	ldrh	r3, [r6, #0]
   30618:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   3061c:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   30620:	4641      	mov	r1, r8
   30622:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   30626:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   3062a:	f020 fb7f 	bl	50d2c <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3062e:	f3bf 8f5b 	dmb	ish
   30632:	f105 0368 	add.w	r3, r5, #104	; 0x68
   30636:	2200      	movs	r2, #0
   30638:	e853 1f00 	ldrex	r1, [r3]
   3063c:	e843 2000 	strex	r0, r2, [r3]
   30640:	2800      	cmp	r0, #0
   30642:	d1f9      	bne.n	30638 <bt_l2cap_connected+0x48>
   30644:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   30648:	60aa      	str	r2, [r5, #8]
	return list->tail;
   3064a:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   3064c:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
   30650:	bb02      	cbnz	r2, 30694 <bt_l2cap_connected+0xa4>
	list->head = node;
   30652:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   30656:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   30658:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   3065a:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   3065c:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   30660:	681b      	ldr	r3, [r3, #0]
   30662:	b103      	cbz	r3, 30666 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   30664:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   30666:	9b01      	ldr	r3, [sp, #4]
   30668:	f3bf 8f5b 	dmb	ish
   3066c:	3368      	adds	r3, #104	; 0x68
   3066e:	e853 1f00 	ldrex	r1, [r3]
   30672:	f041 0101 	orr.w	r1, r1, #1
   30676:	e843 1200 	strex	r2, r1, [r3]
   3067a:	2a00      	cmp	r2, #0
   3067c:	d1f7      	bne.n	3066e <bt_l2cap_connected+0x7e>
   3067e:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   30682:	9801      	ldr	r0, [sp, #4]
   30684:	6843      	ldr	r3, [r0, #4]
   30686:	699b      	ldr	r3, [r3, #24]
   30688:	b113      	cbz	r3, 30690 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   3068a:	f100 0168 	add.w	r1, r0, #104	; 0x68
   3068e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   30690:	360c      	adds	r6, #12
   30692:	e7b4      	b.n	305fe <bt_l2cap_connected+0xe>
	parent->next = child;
   30694:	6013      	str	r3, [r2, #0]
	list->tail = node;
   30696:	6563      	str	r3, [r4, #84]	; 0x54
}
   30698:	e7dd      	b.n	30656 <bt_l2cap_connected+0x66>
   3069a:	bf00      	nop
   3069c:	000518a8 	.word	0x000518a8
   306a0:	000518cc 	.word	0x000518cc
   306a4:	0004d125 	.word	0x0004d125

000306a8 <bt_l2cap_update_conn_param>:
{
   306a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   306aa:	4b17      	ldr	r3, [pc, #92]	; (30708 <bt_l2cap_update_conn_param+0x60>)
{
   306ac:	460e      	mov	r6, r1
	ident++;
   306ae:	7819      	ldrb	r1, [r3, #0]
   306b0:	3101      	adds	r1, #1
   306b2:	b2c9      	uxtb	r1, r1
   306b4:	2901      	cmp	r1, #1
   306b6:	bf38      	it	cc
   306b8:	2101      	movcc	r1, #1
{
   306ba:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   306bc:	2208      	movs	r2, #8
   306be:	2012      	movs	r0, #18
	ident++;
   306c0:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   306c2:	f01c fce6 	bl	4d092 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   306c6:	4604      	mov	r4, r0
   306c8:	b1d0      	cbz	r0, 30700 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   306ca:	2108      	movs	r1, #8
   306cc:	4408      	add	r0, r1
   306ce:	f01f fb2b 	bl	4fd28 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   306d2:	8833      	ldrh	r3, [r6, #0]
   306d4:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   306d6:	8873      	ldrh	r3, [r6, #2]
   306d8:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   306da:	88b3      	ldrh	r3, [r6, #4]
   306dc:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   306de:	88f3      	ldrh	r3, [r6, #6]
   306e0:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   306e2:	2300      	movs	r3, #0
   306e4:	4628      	mov	r0, r5
   306e6:	9300      	str	r3, [sp, #0]
   306e8:	4622      	mov	r2, r4
   306ea:	2105      	movs	r1, #5
   306ec:	f01c fd5f 	bl	4d1ae <bt_l2cap_send_cb>
	if (err) {
   306f0:	4605      	mov	r5, r0
   306f2:	b110      	cbz	r0, 306fa <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   306f4:	4620      	mov	r0, r4
   306f6:	f013 f98d 	bl	43a14 <net_buf_unref>
}
   306fa:	4628      	mov	r0, r5
   306fc:	b002      	add	sp, #8
   306fe:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   30700:	f06f 050b 	mvn.w	r5, #11
   30704:	e7f9      	b.n	306fa <bt_l2cap_update_conn_param+0x52>
   30706:	bf00      	nop
   30708:	20007415 	.word	0x20007415

0003070c <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   3070c:	4b02      	ldr	r3, [pc, #8]	; (30718 <att_cfm_sent+0xc>)
   3070e:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   30712:	f01c be2e 	b.w	4d372 <att_sent>
   30716:	bf00      	nop
   30718:	0004d8cd 	.word	0x0004d8cd

0003071c <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   3071c:	4b02      	ldr	r3, [pc, #8]	; (30728 <att_rsp_sent+0xc>)
   3071e:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   30722:	f01c be26 	b.w	4d372 <att_sent>
   30726:	bf00      	nop
   30728:	0004d8b1 	.word	0x0004d8b1

0003072c <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   3072c:	4b02      	ldr	r3, [pc, #8]	; (30738 <att_req_sent+0xc>)
   3072e:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   30732:	f01c be1e 	b.w	4d372 <att_sent>
   30736:	bf00      	nop
   30738:	0004d6c9 	.word	0x0004d6c9

0003073c <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   3073c:	281d      	cmp	r0, #29
   3073e:	d020      	beq.n	30782 <att_op_get_type+0x46>
   30740:	d813      	bhi.n	3076a <att_op_get_type+0x2e>
   30742:	2819      	cmp	r0, #25
   30744:	d904      	bls.n	30750 <att_op_get_type+0x14>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   30746:	281b      	cmp	r0, #27
   30748:	bf0c      	ite	eq
   3074a:	2003      	moveq	r0, #3
   3074c:	2006      	movne	r0, #6
   3074e:	4770      	bx	lr
	switch (op) {
   30750:	b1c8      	cbz	r0, 30786 <att_op_get_type+0x4a>
   30752:	4a11      	ldr	r2, [pc, #68]	; (30798 <att_op_get_type+0x5c>)
   30754:	2301      	movs	r3, #1
   30756:	4083      	lsls	r3, r0
   30758:	401a      	ands	r2, r3
   3075a:	b9b2      	cbnz	r2, 3078a <att_op_get_type+0x4e>
   3075c:	4a0f      	ldr	r2, [pc, #60]	; (3079c <att_op_get_type+0x60>)
   3075e:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   30760:	2a00      	cmp	r2, #0
   30762:	bf14      	ite	ne
   30764:	2001      	movne	r0, #1
   30766:	2006      	moveq	r0, #6
   30768:	4770      	bx	lr
	switch (op) {
   3076a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   3076e:	2b52      	cmp	r3, #82	; 0x52
   30770:	d00d      	beq.n	3078e <att_op_get_type+0x52>
   30772:	281e      	cmp	r0, #30
   30774:	d00d      	beq.n	30792 <att_op_get_type+0x56>
		return ATT_COMMAND;
   30776:	f010 0f40 	tst.w	r0, #64	; 0x40
   3077a:	bf0c      	ite	eq
   3077c:	2006      	moveq	r0, #6
   3077e:	2000      	movne	r0, #0
   30780:	4770      	bx	lr
		return ATT_INDICATION;
   30782:	2005      	movs	r0, #5
   30784:	4770      	bx	lr
	return ATT_UNKNOWN;
   30786:	2006      	movs	r0, #6
   30788:	4770      	bx	lr
		return ATT_RESPONSE;
   3078a:	2002      	movs	r0, #2
   3078c:	4770      	bx	lr
		return ATT_COMMAND;
   3078e:	2000      	movs	r0, #0
   30790:	4770      	bx	lr
	switch (op) {
   30792:	2004      	movs	r0, #4
}
   30794:	4770      	bx	lr
   30796:	bf00      	nop
   30798:	028aaaaa 	.word	0x028aaaaa
   3079c:	01455554 	.word	0x01455554

000307a0 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   307a0:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   307a2:	3808      	subs	r0, #8
   307a4:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   307a6:	a901      	add	r1, sp, #4
   307a8:	4802      	ldr	r0, [pc, #8]	; (307b4 <bt_att_released+0x14>)
   307aa:	f020 f8ed 	bl	50988 <k_mem_slab_free>
}
   307ae:	b003      	add	sp, #12
   307b0:	f85d fb04 	ldr.w	pc, [sp], #4
   307b4:	200010e4 	.word	0x200010e4

000307b8 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   307b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   307ba:	2300      	movs	r3, #0
{
   307bc:	4607      	mov	r7, r0
   307be:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   307c0:	481e      	ldr	r0, [pc, #120]	; (3083c <bt_att_accept+0x84>)
   307c2:	2200      	movs	r2, #0
   307c4:	4669      	mov	r1, sp
   307c6:	f017 fa17 	bl	47bf8 <k_mem_slab_alloc>
   307ca:	4604      	mov	r4, r0
   307cc:	b998      	cbnz	r0, 307f6 <bt_att_accept+0x3e>
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
   307ce:	4601      	mov	r1, r0
   307d0:	222c      	movs	r2, #44	; 0x2c
   307d2:	9800      	ldr	r0, [sp, #0]
   307d4:	f01b fad2 	bl	4bd7c <memset>
	att->conn = conn;
   307d8:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   307da:	4819      	ldr	r0, [pc, #100]	; (30840 <bt_att_accept+0x88>)
	list->tail = NULL;
   307dc:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   307de:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   307e2:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   307e6:	2200      	movs	r2, #0
   307e8:	2300      	movs	r3, #0
   307ea:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   307ec:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   307ee:	f017 fa03 	bl	47bf8 <k_mem_slab_alloc>
   307f2:	4604      	mov	r4, r0
   307f4:	b120      	cbz	r0, 30800 <bt_att_accept+0x48>
		return -ENOMEM;
   307f6:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   307fa:	4620      	mov	r0, r4
   307fc:	b003      	add	sp, #12
   307fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(chan, 0, sizeof(*chan));
   30800:	4601      	mov	r1, r0
   30802:	f44f 72a4 	mov.w	r2, #328	; 0x148
   30806:	9801      	ldr	r0, [sp, #4]
   30808:	f01b fab8 	bl	4bd7c <memset>
	chan->chan.chan.ops = &ops;
   3080c:	9801      	ldr	r0, [sp, #4]
   3080e:	4b0d      	ldr	r3, [pc, #52]	; (30844 <bt_att_accept+0x8c>)
   30810:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   30812:	30f8      	adds	r0, #248	; 0xf8
   30814:	f020 f974 	bl	50b00 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   30818:	9b01      	ldr	r3, [sp, #4]
   3081a:	f3bf 8f5b 	dmb	ish
   3081e:	33f0      	adds	r3, #240	; 0xf0
   30820:	e853 2f00 	ldrex	r2, [r3]
   30824:	e843 4100 	strex	r1, r4, [r3]
   30828:	2900      	cmp	r1, #0
   3082a:	d1f9      	bne.n	30820 <bt_att_accept+0x68>
   3082c:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   30830:	9b01      	ldr	r3, [sp, #4]
   30832:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   30836:	6033      	str	r3, [r6, #0]
	return 0;
   30838:	e7df      	b.n	307fa <bt_att_accept+0x42>
   3083a:	bf00      	nop
   3083c:	200010c8 	.word	0x200010c8
   30840:	200010e4 	.word	0x200010e4
   30844:	20000824 	.word	0x20000824

00030848 <read_group_cb>:
{
   30848:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3084c:	4605      	mov	r5, r0
   3084e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   30850:	f04f 0800 	mov.w	r8, #0
   30854:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   30858:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   3085a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   3085c:	f88d 8008 	strb.w	r8, [sp, #8]
   30860:	a902      	add	r1, sp, #8
{
   30862:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   30864:	f8ad 300a 	strh.w	r3, [sp, #10]
   30868:	f01b fb6b 	bl	4bf42 <bt_uuid_cmp>
   3086c:	b1a0      	cbz	r0, 30898 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   3086e:	f642 0301 	movw	r3, #10241	; 0x2801
   30872:	6828      	ldr	r0, [r5, #0]
   30874:	f88d 800c 	strb.w	r8, [sp, #12]
   30878:	a903      	add	r1, sp, #12
   3087a:	f8ad 300e 	strh.w	r3, [sp, #14]
   3087e:	f01b fb60 	bl	4bf42 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   30882:	b148      	cbz	r0, 30898 <read_group_cb+0x50>
		if (data->group &&
   30884:	6923      	ldr	r3, [r4, #16]
   30886:	b11b      	cbz	r3, 30890 <read_group_cb+0x48>
   30888:	885a      	ldrh	r2, [r3, #2]
   3088a:	42b2      	cmp	r2, r6
   3088c:	d200      	bcs.n	30890 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   3088e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   30890:	2001      	movs	r0, #1
}
   30892:	b004      	add	sp, #16
   30894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   30898:	6861      	ldr	r1, [r4, #4]
   3089a:	6828      	ldr	r0, [r5, #0]
   3089c:	f01b fb51 	bl	4bf42 <bt_uuid_cmp>
   308a0:	b110      	cbz	r0, 308a8 <read_group_cb+0x60>
		data->group = NULL;
   308a2:	2300      	movs	r3, #0
   308a4:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   308a6:	e7f3      	b.n	30890 <read_group_cb+0x48>
	if (data->rsp->len &&
   308a8:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   308aa:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   308ac:	781a      	ldrb	r2, [r3, #0]
   308ae:	b13a      	cbz	r2, 308c0 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   308b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   308b4:	8981      	ldrh	r1, [r0, #12]
   308b6:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   308b8:	4293      	cmp	r3, r2
   308ba:	da01      	bge.n	308c0 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   308bc:	2000      	movs	r0, #0
   308be:	e7e8      	b.n	30892 <read_group_cb+0x4a>
   308c0:	2104      	movs	r1, #4
   308c2:	3008      	adds	r0, #8
   308c4:	f01f fa30 	bl	4fd28 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   308c8:	4b09      	ldr	r3, [pc, #36]	; (308f0 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   308ca:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   308cc:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   308ce:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   308d0:	9300      	str	r3, [sp, #0]
   308d2:	9401      	str	r4, [sp, #4]
   308d4:	68a2      	ldr	r2, [r4, #8]
   308d6:	2300      	movs	r3, #0
   308d8:	4629      	mov	r1, r5
   308da:	4638      	mov	r0, r7
   308dc:	f01c feff 	bl	4d6de <att_chan_read>
	if (read < 0) {
   308e0:	2800      	cmp	r0, #0
   308e2:	dbeb      	blt.n	308bc <read_group_cb+0x74>
	if (!data->group) {
   308e4:	6920      	ldr	r0, [r4, #16]
   308e6:	3800      	subs	r0, #0
   308e8:	bf18      	it	ne
   308ea:	2001      	movne	r0, #1
   308ec:	e7d1      	b.n	30892 <read_group_cb+0x4a>
   308ee:	bf00      	nop
   308f0:	0004d6a9 	.word	0x0004d6a9

000308f4 <chan_send>:
{
   308f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   308f8:	688b      	ldr	r3, [r1, #8]
   308fa:	781b      	ldrb	r3, [r3, #0]
   308fc:	2bd2      	cmp	r3, #210	; 0xd2
{
   308fe:	4605      	mov	r5, r0
   30900:	460c      	mov	r4, r1
   30902:	4616      	mov	r6, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   30904:	d10c      	bne.n	30920 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   30906:	6803      	ldr	r3, [r0, #0]
   30908:	6818      	ldr	r0, [r3, #0]
   3090a:	f01e feec 	bl	4f6e6 <bt_smp_sign>
		if (err) {
   3090e:	4607      	mov	r7, r0
   30910:	b130      	cbz	r0, 30920 <chan_send+0x2c>
			net_buf_unref(buf);
   30912:	4620      	mov	r0, r4
   30914:	f013 f87e 	bl	43a14 <net_buf_unref>
}
   30918:	4638      	mov	r0, r7
   3091a:	b003      	add	sp, #12
   3091c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   30920:	f104 0008 	add.w	r0, r4, #8
   30924:	f01f fa49 	bl	4fdba <net_buf_simple_headroom>
	state->len = buf->len;
   30928:	f8b4 900c 	ldrh.w	r9, [r4, #12]
   3092c:	6829      	ldr	r1, [r5, #0]
	state->offset = net_buf_simple_headroom(buf);
   3092e:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   30930:	b9f6      	cbnz	r6, 30970 <chan_send+0x7c>
	switch (att_op_get_type(buf->data[0])) {
   30932:	68a3      	ldr	r3, [r4, #8]
   30934:	7818      	ldrb	r0, [r3, #0]
   30936:	f7ff ff01 	bl	3073c <att_op_get_type>
   3093a:	3801      	subs	r0, #1
   3093c:	b2c0      	uxtb	r0, r0
   3093e:	2804      	cmp	r0, #4
   30940:	d913      	bls.n	3096a <chan_send+0x76>
		return att_sent;
   30942:	4b15      	ldr	r3, [pc, #84]	; (30998 <chan_send+0xa4>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   30944:	6808      	ldr	r0, [r1, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   30946:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
			       &chan->chan.chan);
   3094a:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   3094c:	9500      	str	r5, [sp, #0]
   3094e:	4622      	mov	r2, r4
   30950:	2104      	movs	r1, #4
   30952:	f01c fc2c 	bl	4d1ae <bt_l2cap_send_cb>
	if (err) {
   30956:	4607      	mov	r7, r0
   30958:	2800      	cmp	r0, #0
   3095a:	d0dd      	beq.n	30918 <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
   3095c:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   3095e:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   30962:	fa13 f388 	uxtah	r3, r3, r8
   30966:	60a3      	str	r3, [r4, #8]
}
   30968:	e7d6      	b.n	30918 <chan_send+0x24>
   3096a:	4b0c      	ldr	r3, [pc, #48]	; (3099c <chan_send+0xa8>)
   3096c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
	if (cb == chan_rsp_sent) {
   30970:	4b0b      	ldr	r3, [pc, #44]	; (309a0 <chan_send+0xac>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   30972:	6808      	ldr	r0, [r1, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   30974:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
	if (cb == chan_rsp_sent) {
   30978:	429e      	cmp	r6, r3
   3097a:	d009      	beq.n	30990 <chan_send+0x9c>
	} else if (cb == chan_cfm_sent) {
   3097c:	4b09      	ldr	r3, [pc, #36]	; (309a4 <chan_send+0xb0>)
   3097e:	429e      	cmp	r6, r3
   30980:	d008      	beq.n	30994 <chan_send+0xa0>
		return att_req_sent;
   30982:	4909      	ldr	r1, [pc, #36]	; (309a8 <chan_send+0xb4>)
   30984:	4b04      	ldr	r3, [pc, #16]	; (30998 <chan_send+0xa4>)
   30986:	4a09      	ldr	r2, [pc, #36]	; (309ac <chan_send+0xb8>)
   30988:	428e      	cmp	r6, r1
   3098a:	bf08      	it	eq
   3098c:	4613      	moveq	r3, r2
   3098e:	e7dc      	b.n	3094a <chan_send+0x56>
		return att_rsp_sent;
   30990:	4b07      	ldr	r3, [pc, #28]	; (309b0 <chan_send+0xbc>)
   30992:	e7da      	b.n	3094a <chan_send+0x56>
		return att_cfm_sent;
   30994:	4b07      	ldr	r3, [pc, #28]	; (309b4 <chan_send+0xc0>)
   30996:	e7d8      	b.n	3094a <chan_send+0x56>
   30998:	0004d373 	.word	0x0004d373
   3099c:	000528c0 	.word	0x000528c0
   309a0:	0004d8b1 	.word	0x0004d8b1
   309a4:	0004d8cd 	.word	0x0004d8cd
   309a8:	0004d6c9 	.word	0x0004d6c9
   309ac:	0003072d 	.word	0x0003072d
   309b0:	0003071d 	.word	0x0003071d
   309b4:	0003070d 	.word	0x0003070d

000309b8 <read_type_cb>:
{
   309b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   309bc:	6817      	ldr	r7, [r2, #0]
{
   309be:	4605      	mov	r5, r0
   309c0:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   309c2:	6800      	ldr	r0, [r0, #0]
   309c4:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   309c6:	68be      	ldr	r6, [r7, #8]
{
   309c8:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   309ca:	f01b faba 	bl	4bf42 <bt_uuid_cmp>
   309ce:	4681      	mov	r9, r0
   309d0:	2800      	cmp	r0, #0
   309d2:	d13d      	bne.n	30a50 <read_type_cb+0x98>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   309d4:	4630      	mov	r0, r6
   309d6:	2215      	movs	r2, #21
   309d8:	4629      	mov	r1, r5
   309da:	f01d fe52 	bl	4e682 <bt_gatt_check_perm>
   309de:	4606      	mov	r6, r0
   309e0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   309e2:	b140      	cbz	r0, 309f6 <read_type_cb+0x3e>
		if (data->rsp->len) {
   309e4:	68e3      	ldr	r3, [r4, #12]
   309e6:	781b      	ldrb	r3, [r3, #0]
   309e8:	b10b      	cbz	r3, 309ee <read_type_cb+0x36>
			data->err = 0x00;
   309ea:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   309ee:	2000      	movs	r0, #0
}
   309f0:	b003      	add	sp, #12
   309f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   309f6:	68a0      	ldr	r0, [r4, #8]
   309f8:	f01f f968 	bl	4fccc <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   309fc:	2102      	movs	r1, #2
   309fe:	3008      	adds	r0, #8
   30a00:	f01f f992 	bl	4fd28 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   30a04:	4b13      	ldr	r3, [pc, #76]	; (30a54 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   30a06:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   30a08:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   30a0c:	9300      	str	r3, [sp, #0]
   30a0e:	9401      	str	r4, [sp, #4]
   30a10:	68a2      	ldr	r2, [r4, #8]
   30a12:	4633      	mov	r3, r6
   30a14:	4629      	mov	r1, r5
   30a16:	4638      	mov	r0, r7
   30a18:	f01c fe61 	bl	4d6de <att_chan_read>
	if (read < 0) {
   30a1c:	2800      	cmp	r0, #0
   30a1e:	da07      	bge.n	30a30 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   30a20:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   30a24:	bf26      	itte	cs
   30a26:	4240      	negcs	r0, r0
   30a28:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   30a2a:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   30a2c:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   30a2e:	e7de      	b.n	309ee <read_type_cb+0x36>
	if (!data->item) {
   30a30:	6923      	ldr	r3, [r4, #16]
   30a32:	2b00      	cmp	r3, #0
   30a34:	d0db      	beq.n	309ee <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   30a36:	68a0      	ldr	r0, [r4, #8]
   30a38:	f01c fc93 	bl	4d362 <net_buf_frags_len>
   30a3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   30a40:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   30a42:	68e3      	ldr	r3, [r4, #12]
   30a44:	781b      	ldrb	r3, [r3, #0]
   30a46:	4298      	cmp	r0, r3
   30a48:	bf94      	ite	ls
   30a4a:	2000      	movls	r0, #0
   30a4c:	2001      	movhi	r0, #1
   30a4e:	e7cf      	b.n	309f0 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   30a50:	2001      	movs	r0, #1
   30a52:	e7cd      	b.n	309f0 <read_type_cb+0x38>
   30a54:	0004d37f 	.word	0x0004d37f

00030a58 <bt_att_connected>:
{
   30a58:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   30a5a:	4606      	mov	r6, r0
{
   30a5c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   30a5e:	2104      	movs	r1, #4
   30a60:	f856 0908 	ldr.w	r0, [r6], #-8
   30a64:	f01c fc41 	bl	4d2ea <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   30a68:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   30a6c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   30a6e:	b91b      	cbnz	r3, 30a78 <bt_att_connected+0x20>
   30a70:	f105 000c 	add.w	r0, r5, #12
   30a74:	f020 f844 	bl	50b00 <z_impl_k_queue_init>
	parent->next = child;
   30a78:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   30a7a:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   30a7e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   30a80:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   30a84:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   30a86:	b902      	cbnz	r2, 30a8a <bt_att_connected+0x32>
	list->tail = node;
   30a88:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   30a8a:	f3bf 8f5b 	dmb	ish
   30a8e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   30a92:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   30a96:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   30a98:	bf58      	it	pl
   30a9a:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   30a9c:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   30a9e:	bf5c      	itt	pl
   30aa0:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   30aa4:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   30aa8:	f01c fcaa 	bl	4d400 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   30aac:	f504 7084 	add.w	r0, r4, #264	; 0x108
   30ab0:	4902      	ldr	r1, [pc, #8]	; (30abc <bt_att_connected+0x64>)
}
   30ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   30ab6:	f020 b939 	b.w	50d2c <k_work_init_delayable>
   30aba:	bf00      	nop
   30abc:	0004dc51 	.word	0x0004dc51

00030ac0 <att_indicate>:
{
   30ac0:	b570      	push	{r4, r5, r6, lr}
   30ac2:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   30ac4:	f101 0008 	add.w	r0, r1, #8
   30ac8:	460d      	mov	r5, r1
   30aca:	f01f f96e 	bl	4fdaa <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   30ace:	6826      	ldr	r6, [r4, #0]
   30ad0:	89ab      	ldrh	r3, [r5, #12]
   30ad2:	68aa      	ldr	r2, [r5, #8]
   30ad4:	4601      	mov	r1, r0
   30ad6:	6830      	ldr	r0, [r6, #0]
   30ad8:	f01e f8f1 	bl	4ecbe <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   30adc:	211e      	movs	r1, #30
   30ade:	2200      	movs	r2, #0
   30ae0:	4620      	mov	r0, r4
   30ae2:	f01c ffb4 	bl	4da4e <bt_att_chan_create_pdu>
	if (!buf) {
   30ae6:	4601      	mov	r1, r0
   30ae8:	b118      	cbz	r0, 30af2 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   30aea:	4a03      	ldr	r2, [pc, #12]	; (30af8 <att_indicate+0x38>)
   30aec:	4620      	mov	r0, r4
   30aee:	f01c feb7 	bl	4d860 <bt_att_chan_send_rsp>
}
   30af2:	2000      	movs	r0, #0
   30af4:	bd70      	pop	{r4, r5, r6, pc}
   30af6:	bf00      	nop
   30af8:	0004d8cd 	.word	0x0004d8cd

00030afc <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   30afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30b00:	4688      	mov	r8, r1
   30b02:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   30b04:	2101      	movs	r1, #1
   30b06:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   30b08:	4605      	mov	r5, r0
   30b0a:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   30b0c:	f01c ff9f 	bl	4da4e <bt_att_chan_create_pdu>
	if (!buf) {
   30b10:	4604      	mov	r4, r0
   30b12:	b178      	cbz	r0, 30b34 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   30b14:	2104      	movs	r1, #4
   30b16:	3008      	adds	r0, #8
   30b18:	f01f f906 	bl	4fd28 <net_buf_simple_add>
	rsp->request = req;
   30b1c:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   30b20:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   30b22:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   30b26:	4621      	mov	r1, r4
   30b28:	4628      	mov	r0, r5
   30b2a:	4a03      	ldr	r2, [pc, #12]	; (30b38 <send_err_rsp.part.0+0x3c>)
}
   30b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   30b30:	f01c be96 	b.w	4d860 <bt_att_chan_send_rsp>
}
   30b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30b38:	0004d8b1 	.word	0x0004d8b1

00030b3c <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   30b3c:	898b      	ldrh	r3, [r1, #12]
{
   30b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30b42:	4604      	mov	r4, r0
   30b44:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
   30b46:	2b00      	cmp	r3, #0
   30b48:	d06d      	beq.n	30c26 <bt_att_recv+0xea>
	return net_buf_simple_pull_mem(&buf->b, len);
   30b4a:	2101      	movs	r1, #1
   30b4c:	f106 0008 	add.w	r0, r6, #8
   30b50:	f01f f91b 	bl	4fd8a <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   30b54:	f854 3c08 	ldr.w	r3, [r4, #-8]
   30b58:	4607      	mov	r7, r0
   30b5a:	2b00      	cmp	r3, #0
   30b5c:	d063      	beq.n	30c26 <bt_att_recv+0xea>
		if (hdr->code == handlers[i].op) {
   30b5e:	7801      	ldrb	r1, [r0, #0]
   30b60:	4a33      	ldr	r2, [pc, #204]	; (30c30 <bt_att_recv+0xf4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   30b62:	f1a4 0508 	sub.w	r5, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   30b66:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   30b68:	f812 e033 	ldrb.w	lr, [r2, r3, lsl #3]
   30b6c:	458e      	cmp	lr, r1
   30b6e:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   30b72:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
   30b76:	d126      	bne.n	30bc6 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   30b78:	f890 8002 	ldrb.w	r8, [r0, #2]
   30b7c:	f1b8 0f01 	cmp.w	r8, #1
   30b80:	d131      	bne.n	30be6 <bt_att_recv+0xaa>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   30b82:	f3bf 8f5b 	dmb	ish
   30b86:	34e8      	adds	r4, #232	; 0xe8
   30b88:	e854 3f00 	ldrex	r3, [r4]
   30b8c:	f043 0101 	orr.w	r1, r3, #1
   30b90:	e844 1e00 	strex	lr, r1, [r4]
   30b94:	f1be 0f00 	cmp.w	lr, #0
   30b98:	d1f6      	bne.n	30b88 <bt_att_recv+0x4c>
   30b9a:	f3bf 8f5b 	dmb	ish
   30b9e:	07d9      	lsls	r1, r3, #31
   30ba0:	d441      	bmi.n	30c26 <bt_att_recv+0xea>
	if (buf->len < handler->expect_len) {
   30ba2:	89b1      	ldrh	r1, [r6, #12]
   30ba4:	7843      	ldrb	r3, [r0, #1]
   30ba6:	4299      	cmp	r1, r3
   30ba8:	d340      	bcc.n	30c2c <bt_att_recv+0xf0>
		err = handler->func(att_chan, buf);
   30baa:	eb02 030c 	add.w	r3, r2, ip
   30bae:	4631      	mov	r1, r6
   30bb0:	685b      	ldr	r3, [r3, #4]
   30bb2:	4628      	mov	r0, r5
   30bb4:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   30bb6:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   30bba:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   30bbc:	d133      	bne.n	30c26 <bt_att_recv+0xea>
   30bbe:	b390      	cbz	r0, 30c26 <bt_att_recv+0xea>
		send_err_rsp(att_chan, hdr->code, 0, err);
   30bc0:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   30bc2:	b381      	cbz	r1, 30c26 <bt_att_recv+0xea>
   30bc4:	e00a      	b.n	30bdc <bt_att_recv+0xa0>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   30bc6:	3301      	adds	r3, #1
   30bc8:	2b1c      	cmp	r3, #28
   30bca:	d1cd      	bne.n	30b68 <bt_att_recv+0x2c>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   30bcc:	4608      	mov	r0, r1
   30bce:	f7ff fdb5 	bl	3073c <att_op_get_type>
   30bd2:	b340      	cbz	r0, 30c26 <bt_att_recv+0xea>
   30bd4:	2805      	cmp	r0, #5
   30bd6:	d026      	beq.n	30c26 <bt_att_recv+0xea>
	if (!req) {
   30bd8:	b329      	cbz	r1, 30c26 <bt_att_recv+0xea>
   30bda:	2306      	movs	r3, #6
   30bdc:	2200      	movs	r2, #0
   30bde:	4628      	mov	r0, r5
   30be0:	f7ff ff8c 	bl	30afc <send_err_rsp.part.0>
   30be4:	e01f      	b.n	30c26 <bt_att_recv+0xea>
		} else if (handler->type == ATT_INDICATION &&
   30be6:	f1b8 0f05 	cmp.w	r8, #5
   30bea:	d008      	beq.n	30bfe <bt_att_recv+0xc2>
	if (buf->len < handler->expect_len) {
   30bec:	89b2      	ldrh	r2, [r6, #12]
   30bee:	7843      	ldrb	r3, [r0, #1]
   30bf0:	429a      	cmp	r2, r3
   30bf2:	d318      	bcc.n	30c26 <bt_att_recv+0xea>
		err = handler->func(att_chan, buf);
   30bf4:	6843      	ldr	r3, [r0, #4]
   30bf6:	4631      	mov	r1, r6
   30bf8:	4628      	mov	r0, r5
   30bfa:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   30bfc:	e013      	b.n	30c26 <bt_att_recv+0xea>
   30bfe:	34e8      	adds	r4, #232	; 0xe8
   30c00:	f3bf 8f5b 	dmb	ish
   30c04:	e854 3f00 	ldrex	r3, [r4]
   30c08:	f043 0102 	orr.w	r1, r3, #2
   30c0c:	e844 1e00 	strex	lr, r1, [r4]
   30c10:	f1be 0f00 	cmp.w	lr, #0
   30c14:	d1f6      	bne.n	30c04 <bt_att_recv+0xc8>
   30c16:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
   30c1a:	079b      	lsls	r3, r3, #30
   30c1c:	d403      	bmi.n	30c26 <bt_att_recv+0xea>
	if (buf->len < handler->expect_len) {
   30c1e:	89b1      	ldrh	r1, [r6, #12]
   30c20:	7843      	ldrb	r3, [r0, #1]
   30c22:	4299      	cmp	r1, r3
   30c24:	d2c1      	bcs.n	30baa <bt_att_recv+0x6e>
}
   30c26:	2000      	movs	r0, #0
   30c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = BT_ATT_ERR_INVALID_PDU;
   30c2c:	2304      	movs	r3, #4
   30c2e:	e7c7      	b.n	30bc0 <bt_att_recv+0x84>
   30c30:	000528d4 	.word	0x000528d4

00030c34 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   30c34:	b5f0      	push	{r4, r5, r6, r7, lr}
   30c36:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   30c38:	6803      	ldr	r3, [r0, #0]
   30c3a:	460d      	mov	r5, r1
   30c3c:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   30c3e:	b087      	sub	sp, #28
   30c40:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   30c42:	bf18      	it	ne
   30c44:	2101      	movne	r1, #1
   30c46:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   30c48:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   30c4a:	f01e f8b4 	bl	4edb6 <bt_gatt_change_aware>
   30c4e:	2800      	cmp	r0, #0
   30c50:	d042      	beq.n	30cd8 <att_write_rsp.constprop.0+0xa4>
	if (!handle) {
   30c52:	2e00      	cmp	r6, #0
   30c54:	d042      	beq.n	30cdc <att_write_rsp.constprop.0+0xa8>
	(void)memset(&data, 0, sizeof(data));
   30c56:	2218      	movs	r2, #24
   30c58:	2100      	movs	r1, #0
   30c5a:	4668      	mov	r0, sp
   30c5c:	f01b f88e 	bl	4bd7c <memset>
	if (rsp) {
   30c60:	bb47      	cbnz	r7, 30cb4 <att_write_rsp.constprop.0+0x80>
	data.conn = chan->att->conn;
   30c62:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   30c64:	4a1e      	ldr	r2, [pc, #120]	; (30ce0 <att_write_rsp.constprop.0+0xac>)
	data.conn = chan->att->conn;
   30c66:	681b      	ldr	r3, [r3, #0]
   30c68:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   30c6a:	2300      	movs	r3, #0
   30c6c:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   30c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   30c72:	9303      	str	r3, [sp, #12]
	data.len = len;
   30c74:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   30c78:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   30c7c:	2301      	movs	r3, #1
   30c7e:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   30c82:	4631      	mov	r1, r6
   30c84:	466b      	mov	r3, sp
   30c86:	4630      	mov	r0, r6
	data.req = req;
   30c88:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   30c8c:	f01c fc21 	bl	4d4d2 <bt_gatt_foreach_attr>
	if (data.err) {
   30c90:	f89d 3014 	ldrb.w	r3, [sp, #20]
   30c94:	b1c3      	cbz	r3, 30cc8 <att_write_rsp.constprop.0+0x94>
		if (rsp) {
   30c96:	b157      	cbz	r7, 30cae <att_write_rsp.constprop.0+0x7a>
			net_buf_unref(data.buf);
   30c98:	9801      	ldr	r0, [sp, #4]
   30c9a:	f012 febb 	bl	43a14 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   30c9e:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   30ca2:	b125      	cbz	r5, 30cae <att_write_rsp.constprop.0+0x7a>
   30ca4:	4632      	mov	r2, r6
   30ca6:	4629      	mov	r1, r5
   30ca8:	4620      	mov	r0, r4
   30caa:	f7ff ff27 	bl	30afc <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   30cae:	2000      	movs	r0, #0
}
   30cb0:	b007      	add	sp, #28
   30cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   30cb4:	2200      	movs	r2, #0
   30cb6:	4639      	mov	r1, r7
   30cb8:	4620      	mov	r0, r4
   30cba:	f01c fec8 	bl	4da4e <bt_att_chan_create_pdu>
   30cbe:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   30cc0:	2800      	cmp	r0, #0
   30cc2:	d1ce      	bne.n	30c62 <att_write_rsp.constprop.0+0x2e>
			return BT_ATT_ERR_UNLIKELY;
   30cc4:	200e      	movs	r0, #14
   30cc6:	e7f3      	b.n	30cb0 <att_write_rsp.constprop.0+0x7c>
	if (data.buf) {
   30cc8:	9901      	ldr	r1, [sp, #4]
   30cca:	2900      	cmp	r1, #0
   30ccc:	d0ef      	beq.n	30cae <att_write_rsp.constprop.0+0x7a>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30cce:	4a05      	ldr	r2, [pc, #20]	; (30ce4 <att_write_rsp.constprop.0+0xb0>)
   30cd0:	4620      	mov	r0, r4
   30cd2:	f01c fdc5 	bl	4d860 <bt_att_chan_send_rsp>
   30cd6:	e7ea      	b.n	30cae <att_write_rsp.constprop.0+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   30cd8:	2012      	movs	r0, #18
   30cda:	e7e9      	b.n	30cb0 <att_write_rsp.constprop.0+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
   30cdc:	2001      	movs	r0, #1
   30cde:	e7e7      	b.n	30cb0 <att_write_rsp.constprop.0+0x7c>
   30ce0:	0004d473 	.word	0x0004d473
   30ce4:	0004d8b1 	.word	0x0004d8b1

00030ce8 <att_read_group_req>:
{
   30ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   30cec:	898e      	ldrh	r6, [r1, #12]
   30cee:	3e04      	subs	r6, #4
   30cf0:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   30cf2:	2e02      	cmp	r6, #2
{
   30cf4:	4604      	mov	r4, r0
   30cf6:	b08c      	sub	sp, #48	; 0x30
   30cf8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   30cfa:	d001      	beq.n	30d00 <att_read_group_req+0x18>
   30cfc:	2e10      	cmp	r6, #16
   30cfe:	d166      	bne.n	30dce <att_read_group_req+0xe6>
   30d00:	2104      	movs	r1, #4
   30d02:	3008      	adds	r0, #8
   30d04:	f01f f841 	bl	4fd8a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   30d08:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   30d0c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   30d0e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   30d10:	1d01      	adds	r1, r0, #4
   30d12:	4632      	mov	r2, r6
   30d14:	4640      	mov	r0, r8
   30d16:	f01b f942 	bl	4bf9e <bt_uuid_create>
   30d1a:	2800      	cmp	r0, #0
   30d1c:	d059      	beq.n	30dd2 <att_read_group_req+0xea>
	if (!start || !end) {
   30d1e:	2d00      	cmp	r5, #0
   30d20:	d035      	beq.n	30d8e <att_read_group_req+0xa6>
   30d22:	2600      	movs	r6, #0
   30d24:	b397      	cbz	r7, 30d8c <att_read_group_req+0xa4>
	if (start > end) {
   30d26:	42bd      	cmp	r5, r7
   30d28:	d831      	bhi.n	30d8e <att_read_group_req+0xa6>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   30d2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   30d2e:	a901      	add	r1, sp, #4
   30d30:	4640      	mov	r0, r8
   30d32:	f88d 6004 	strb.w	r6, [sp, #4]
   30d36:	f8ad 3006 	strh.w	r3, [sp, #6]
   30d3a:	f01b f902 	bl	4bf42 <bt_uuid_cmp>
   30d3e:	bb50      	cbnz	r0, 30d96 <att_read_group_req+0xae>
	struct bt_conn *conn = chan->chan.chan.conn;
   30d40:	68a6      	ldr	r6, [r4, #8]
	(void)memset(&data, 0, sizeof(data));
   30d42:	2214      	movs	r2, #20
   30d44:	2100      	movs	r1, #0
   30d46:	a807      	add	r0, sp, #28
   30d48:	f01b f818 	bl	4bd7c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   30d4c:	2201      	movs	r2, #1
   30d4e:	2111      	movs	r1, #17
   30d50:	4630      	mov	r0, r6
   30d52:	f01c fec7 	bl	4dae4 <bt_att_create_pdu>
   30d56:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   30d58:	2800      	cmp	r0, #0
   30d5a:	d03a      	beq.n	30dd2 <att_read_group_req+0xea>
	return net_buf_simple_add(&buf->b, len);
   30d5c:	2101      	movs	r1, #1
   30d5e:	3008      	adds	r0, #8
	data.uuid = uuid;
   30d60:	e9cd 4807 	strd	r4, r8, [sp, #28]
   30d64:	f01e ffe0 	bl	4fd28 <net_buf_simple_add>
	data.rsp->len = 0U;
   30d68:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   30d6a:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   30d6c:	4a1a      	ldr	r2, [pc, #104]	; (30dd8 <att_read_group_req+0xf0>)
	data.rsp->len = 0U;
   30d6e:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   30d70:	4639      	mov	r1, r7
	data.group = NULL;
   30d72:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   30d74:	4628      	mov	r0, r5
   30d76:	ab07      	add	r3, sp, #28
   30d78:	f01c fbab 	bl	4d4d2 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   30d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30d7e:	781b      	ldrb	r3, [r3, #0]
   30d80:	b9fb      	cbnz	r3, 30dc2 <att_read_group_req+0xda>
		net_buf_unref(data.buf);
   30d82:	9809      	ldr	r0, [sp, #36]	; 0x24
   30d84:	f012 fe46 	bl	43a14 <net_buf_unref>
	if (!req) {
   30d88:	230a      	movs	r3, #10
   30d8a:	e001      	b.n	30d90 <att_read_group_req+0xa8>
			*err = 0U;
   30d8c:	463d      	mov	r5, r7
	if (!req) {
   30d8e:	2301      	movs	r3, #1
   30d90:	462a      	mov	r2, r5
   30d92:	2110      	movs	r1, #16
   30d94:	e00e      	b.n	30db4 <att_read_group_req+0xcc>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   30d96:	f642 0301 	movw	r3, #10241	; 0x2801
   30d9a:	a907      	add	r1, sp, #28
   30d9c:	4640      	mov	r0, r8
   30d9e:	f88d 601c 	strb.w	r6, [sp, #28]
   30da2:	f8ad 301e 	strh.w	r3, [sp, #30]
   30da6:	f01b f8cc 	bl	4bf42 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   30daa:	2800      	cmp	r0, #0
   30dac:	d0c8      	beq.n	30d40 <att_read_group_req+0x58>
	if (!req) {
   30dae:	2310      	movs	r3, #16
   30db0:	462a      	mov	r2, r5
   30db2:	4619      	mov	r1, r3
   30db4:	4620      	mov	r0, r4
   30db6:	f7ff fea1 	bl	30afc <send_err_rsp.part.0>
		return 0;
   30dba:	2000      	movs	r0, #0
}
   30dbc:	b00c      	add	sp, #48	; 0x30
   30dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30dc2:	4a06      	ldr	r2, [pc, #24]	; (30ddc <att_read_group_req+0xf4>)
   30dc4:	9909      	ldr	r1, [sp, #36]	; 0x24
   30dc6:	4620      	mov	r0, r4
   30dc8:	f01c fd4a 	bl	4d860 <bt_att_chan_send_rsp>
	return 0;
   30dcc:	e7f5      	b.n	30dba <att_read_group_req+0xd2>
		return BT_ATT_ERR_INVALID_PDU;
   30dce:	2004      	movs	r0, #4
   30dd0:	e7f4      	b.n	30dbc <att_read_group_req+0xd4>
		return BT_ATT_ERR_UNLIKELY;
   30dd2:	200e      	movs	r0, #14
   30dd4:	e7f2      	b.n	30dbc <att_read_group_req+0xd4>
   30dd6:	bf00      	nop
   30dd8:	00030849 	.word	0x00030849
   30ddc:	0004d8b1 	.word	0x0004d8b1

00030de0 <att_read_mult_req>:
{
   30de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   30de4:	6886      	ldr	r6, [r0, #8]
{
   30de6:	b085      	sub	sp, #20
   30de8:	4604      	mov	r4, r0
   30dea:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   30dec:	4630      	mov	r0, r6
   30dee:	2101      	movs	r1, #1
   30df0:	f01d ffe1 	bl	4edb6 <bt_gatt_change_aware>
   30df4:	2800      	cmp	r0, #0
   30df6:	d038      	beq.n	30e6a <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   30df8:	2210      	movs	r2, #16
   30dfa:	2100      	movs	r1, #0
   30dfc:	4668      	mov	r0, sp
   30dfe:	f01a ffbd 	bl	4bd7c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   30e02:	2200      	movs	r2, #0
   30e04:	210f      	movs	r1, #15
   30e06:	4630      	mov	r0, r6
   30e08:	f01c fe6c 	bl	4dae4 <bt_att_create_pdu>
   30e0c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   30e0e:	b370      	cbz	r0, 30e6e <att_read_mult_req+0x8e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   30e10:	f8df 9060 	ldr.w	r9, [pc, #96]	; 30e74 <att_read_mult_req+0x94>
	data.chan = chan;
   30e14:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   30e16:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   30e1a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   30e1e:	89ab      	ldrh	r3, [r5, #12]
   30e20:	2b01      	cmp	r3, #1
   30e22:	d805      	bhi.n	30e30 <att_read_mult_req+0x50>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30e24:	4a14      	ldr	r2, [pc, #80]	; (30e78 <att_read_mult_req+0x98>)
   30e26:	9902      	ldr	r1, [sp, #8]
   30e28:	4620      	mov	r0, r4
   30e2a:	f01c fd19 	bl	4d860 <bt_att_chan_send_rsp>
	return 0;
   30e2e:	e018      	b.n	30e62 <att_read_mult_req+0x82>
   30e30:	4638      	mov	r0, r7
   30e32:	f01e ffba 	bl	4fdaa <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   30e36:	466b      	mov	r3, sp
   30e38:	464a      	mov	r2, r9
   30e3a:	4601      	mov	r1, r0
   30e3c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   30e3e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   30e42:	f01c fb46 	bl	4d4d2 <bt_gatt_foreach_attr>
		if (data.err) {
   30e46:	f89d 300c 	ldrb.w	r3, [sp, #12]
   30e4a:	2b00      	cmp	r3, #0
   30e4c:	d0e7      	beq.n	30e1e <att_read_mult_req+0x3e>
			net_buf_unref(data.buf);
   30e4e:	9802      	ldr	r0, [sp, #8]
   30e50:	f012 fde0 	bl	43a14 <net_buf_unref>
	if (!req) {
   30e54:	f89d 300c 	ldrb.w	r3, [sp, #12]
   30e58:	4632      	mov	r2, r6
   30e5a:	210e      	movs	r1, #14
   30e5c:	4620      	mov	r0, r4
   30e5e:	f7ff fe4d 	bl	30afc <send_err_rsp.part.0>
			return 0;
   30e62:	2000      	movs	r0, #0
}
   30e64:	b005      	add	sp, #20
   30e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   30e6a:	2012      	movs	r0, #18
   30e6c:	e7fa      	b.n	30e64 <att_read_mult_req+0x84>
		return BT_ATT_ERR_UNLIKELY;
   30e6e:	200e      	movs	r0, #14
   30e70:	e7f8      	b.n	30e64 <att_read_mult_req+0x84>
   30e72:	bf00      	nop
   30e74:	0004d8e9 	.word	0x0004d8e9
   30e78:	0004d8b1 	.word	0x0004d8b1

00030e7c <att_read_rsp>:
{
   30e7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   30e80:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   30e84:	4604      	mov	r4, r0
   30e86:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   30e88:	4640      	mov	r0, r8
   30e8a:	2101      	movs	r1, #1
{
   30e8c:	4617      	mov	r7, r2
   30e8e:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   30e90:	f01d ff91 	bl	4edb6 <bt_gatt_change_aware>
   30e94:	b388      	cbz	r0, 30efa <att_read_rsp+0x7e>
	if (!handle) {
   30e96:	b395      	cbz	r5, 30efe <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   30e98:	2210      	movs	r2, #16
   30e9a:	2100      	movs	r1, #0
   30e9c:	4668      	mov	r0, sp
   30e9e:	f01a ff6d 	bl	4bd7c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   30ea2:	2200      	movs	r2, #0
   30ea4:	4639      	mov	r1, r7
   30ea6:	4640      	mov	r0, r8
   30ea8:	f01c fe1c 	bl	4dae4 <bt_att_create_pdu>
   30eac:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   30eae:	b340      	cbz	r0, 30f02 <att_read_rsp+0x86>
	data.offset = offset;
   30eb0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   30eb4:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   30eb8:	2301      	movs	r3, #1
   30eba:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   30ebe:	4a12      	ldr	r2, [pc, #72]	; (30f08 <att_read_rsp+0x8c>)
	data.chan = chan;
   30ec0:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   30ec2:	466b      	mov	r3, sp
   30ec4:	4629      	mov	r1, r5
   30ec6:	4628      	mov	r0, r5
   30ec8:	f01c fb03 	bl	4d4d2 <bt_gatt_foreach_attr>
	if (data.err) {
   30ecc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   30ed0:	b16b      	cbz	r3, 30eee <att_read_rsp+0x72>
		net_buf_unref(data.buf);
   30ed2:	9802      	ldr	r0, [sp, #8]
   30ed4:	f012 fd9e 	bl	43a14 <net_buf_unref>
	if (!req) {
   30ed8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   30edc:	462a      	mov	r2, r5
   30ede:	4631      	mov	r1, r6
   30ee0:	4620      	mov	r0, r4
   30ee2:	f7ff fe0b 	bl	30afc <send_err_rsp.part.0>
		return 0;
   30ee6:	2000      	movs	r0, #0
}
   30ee8:	b004      	add	sp, #16
   30eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30eee:	4a07      	ldr	r2, [pc, #28]	; (30f0c <att_read_rsp+0x90>)
   30ef0:	9902      	ldr	r1, [sp, #8]
   30ef2:	4620      	mov	r0, r4
   30ef4:	f01c fcb4 	bl	4d860 <bt_att_chan_send_rsp>
	return 0;
   30ef8:	e7f5      	b.n	30ee6 <att_read_rsp+0x6a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   30efa:	2012      	movs	r0, #18
   30efc:	e7f4      	b.n	30ee8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   30efe:	2001      	movs	r0, #1
   30f00:	e7f2      	b.n	30ee8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   30f02:	200e      	movs	r0, #14
   30f04:	e7f0      	b.n	30ee8 <att_read_rsp+0x6c>
   30f06:	bf00      	nop
   30f08:	0004d8e9 	.word	0x0004d8e9
   30f0c:	0004d8b1 	.word	0x0004d8b1

00030f10 <att_read_type_req>:
{
   30f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   30f14:	898d      	ldrh	r5, [r1, #12]
   30f16:	3d04      	subs	r5, #4
   30f18:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   30f1a:	2d02      	cmp	r5, #2
{
   30f1c:	4604      	mov	r4, r0
   30f1e:	b08c      	sub	sp, #48	; 0x30
   30f20:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   30f22:	d001      	beq.n	30f28 <att_read_type_req+0x18>
   30f24:	2d10      	cmp	r5, #16
   30f26:	d14d      	bne.n	30fc4 <att_read_type_req+0xb4>
	return net_buf_simple_pull_mem(&buf->b, len);
   30f28:	2104      	movs	r1, #4
   30f2a:	3008      	adds	r0, #8
   30f2c:	f01e ff2d 	bl	4fd8a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   30f30:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   30f34:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   30f36:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   30f38:	1d01      	adds	r1, r0, #4
   30f3a:	462a      	mov	r2, r5
   30f3c:	4640      	mov	r0, r8
   30f3e:	f01b f82e 	bl	4bf9e <bt_uuid_create>
   30f42:	b188      	cbz	r0, 30f68 <att_read_type_req+0x58>
	if (!start || !end) {
   30f44:	b19e      	cbz	r6, 30f6e <att_read_type_req+0x5e>
   30f46:	b18f      	cbz	r7, 30f6c <att_read_type_req+0x5c>
	if (start > end) {
   30f48:	42b7      	cmp	r7, r6
   30f4a:	d310      	bcc.n	30f6e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   30f4c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   30f4e:	68a5      	ldr	r5, [r4, #8]
	(void)memset(&data, 0, sizeof(data));
   30f50:	2100      	movs	r1, #0
   30f52:	eb0d 0002 	add.w	r0, sp, r2
   30f56:	f01a ff11 	bl	4bd7c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   30f5a:	2201      	movs	r2, #1
   30f5c:	2109      	movs	r1, #9
   30f5e:	4628      	mov	r0, r5
   30f60:	f01c fdc0 	bl	4dae4 <bt_att_create_pdu>
   30f64:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   30f66:	b960      	cbnz	r0, 30f82 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   30f68:	200e      	movs	r0, #14
   30f6a:	e007      	b.n	30f7c <att_read_type_req+0x6c>
			*err = 0U;
   30f6c:	463e      	mov	r6, r7
	if (!req) {
   30f6e:	2301      	movs	r3, #1
   30f70:	4632      	mov	r2, r6
   30f72:	2108      	movs	r1, #8
   30f74:	4620      	mov	r0, r4
   30f76:	f7ff fdc1 	bl	30afc <send_err_rsp.part.0>
		return 0;
   30f7a:	2000      	movs	r0, #0
}
   30f7c:	b00c      	add	sp, #48	; 0x30
   30f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   30f82:	2101      	movs	r1, #1
   30f84:	3008      	adds	r0, #8
	data.uuid = uuid;
   30f86:	e9cd 4806 	strd	r4, r8, [sp, #24]
   30f8a:	f01e fecd 	bl	4fd28 <net_buf_simple_add>
	data.rsp->len = 0U;
   30f8e:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   30f90:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   30f92:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   30f94:	230a      	movs	r3, #10
   30f96:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   30f9a:	4a0b      	ldr	r2, [pc, #44]	; (30fc8 <att_read_type_req+0xb8>)
   30f9c:	ab06      	add	r3, sp, #24
   30f9e:	4639      	mov	r1, r7
   30fa0:	4630      	mov	r0, r6
   30fa2:	f01c fa96 	bl	4d4d2 <bt_gatt_foreach_attr>
	if (data.err) {
   30fa6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   30faa:	b12b      	cbz	r3, 30fb8 <att_read_type_req+0xa8>
		net_buf_unref(data.buf);
   30fac:	9808      	ldr	r0, [sp, #32]
   30fae:	f012 fd31 	bl	43a14 <net_buf_unref>
	if (!req) {
   30fb2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   30fb6:	e7db      	b.n	30f70 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30fb8:	4a04      	ldr	r2, [pc, #16]	; (30fcc <att_read_type_req+0xbc>)
   30fba:	9908      	ldr	r1, [sp, #32]
   30fbc:	4620      	mov	r0, r4
   30fbe:	f01c fc4f 	bl	4d860 <bt_att_chan_send_rsp>
	return 0;
   30fc2:	e7da      	b.n	30f7a <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   30fc4:	2004      	movs	r0, #4
   30fc6:	e7d9      	b.n	30f7c <att_read_type_req+0x6c>
   30fc8:	000309b9 	.word	0x000309b9
   30fcc:	0004d8b1 	.word	0x0004d8b1

00030fd0 <att_find_type_req>:
{
   30fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30fd4:	460f      	mov	r7, r1
   30fd6:	b086      	sub	sp, #24
   30fd8:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   30fda:	2106      	movs	r1, #6
   30fdc:	f107 0008 	add.w	r0, r7, #8
   30fe0:	f01e fed3 	bl	4fd8a <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   30fe4:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   30fe6:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   30fea:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   30fec:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (!start || !end) {
   30ff0:	b1c5      	cbz	r5, 31024 <att_find_type_req+0x54>
   30ff2:	2300      	movs	r3, #0
   30ff4:	f1b8 0f00 	cmp.w	r8, #0
   30ff8:	d013      	beq.n	31022 <att_find_type_req+0x52>
	if (start > end) {
   30ffa:	4545      	cmp	r5, r8
   30ffc:	d812      	bhi.n	31024 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   30ffe:	f88d 3000 	strb.w	r3, [sp]
   31002:	f88d 3004 	strb.w	r3, [sp, #4]
   31006:	a901      	add	r1, sp, #4
   31008:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   3100c:	4668      	mov	r0, sp
   3100e:	f8ad 2002 	strh.w	r2, [sp, #2]
   31012:	f8ad 3006 	strh.w	r3, [sp, #6]
   31016:	f01a ff94 	bl	4bf42 <bt_uuid_cmp>
   3101a:	4606      	mov	r6, r0
   3101c:	b160      	cbz	r0, 31038 <att_find_type_req+0x68>
	if (!req) {
   3101e:	230a      	movs	r3, #10
   31020:	e001      	b.n	31026 <att_find_type_req+0x56>
			*err = 0U;
   31022:	4645      	mov	r5, r8
	if (!req) {
   31024:	2301      	movs	r3, #1
   31026:	462a      	mov	r2, r5
   31028:	2106      	movs	r1, #6
   3102a:	4620      	mov	r0, r4
   3102c:	f7ff fd66 	bl	30afc <send_err_rsp.part.0>
		return 0;
   31030:	2000      	movs	r0, #0
}
   31032:	b006      	add	sp, #24
   31034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   31038:	f8d4 a008 	ldr.w	sl, [r4, #8]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   3103c:	7b3f      	ldrb	r7, [r7, #12]
	(void)memset(&data, 0, sizeof(data));
   3103e:	4601      	mov	r1, r0
   31040:	2214      	movs	r2, #20
   31042:	a801      	add	r0, sp, #4
   31044:	f01a fe9a 	bl	4bd7c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   31048:	4632      	mov	r2, r6
   3104a:	2107      	movs	r1, #7
   3104c:	4650      	mov	r0, sl
   3104e:	f01c fd49 	bl	4dae4 <bt_att_create_pdu>
   31052:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   31054:	b1e0      	cbz	r0, 31090 <att_find_type_req+0xc0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   31056:	230a      	movs	r3, #10
   31058:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   3105c:	4a0d      	ldr	r2, [pc, #52]	; (31094 <att_find_type_req+0xc4>)
	data.chan = chan;
   3105e:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   31060:	ab01      	add	r3, sp, #4
   31062:	4641      	mov	r1, r8
   31064:	4628      	mov	r0, r5
	data.value = value;
   31066:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   3106a:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   3106e:	f01c fa30 	bl	4d4d2 <bt_gatt_foreach_attr>
	if (data.err) {
   31072:	f89d 3015 	ldrb.w	r3, [sp, #21]
   31076:	b12b      	cbz	r3, 31084 <att_find_type_req+0xb4>
		net_buf_unref(data.buf);
   31078:	9802      	ldr	r0, [sp, #8]
   3107a:	f012 fccb 	bl	43a14 <net_buf_unref>
	if (!req) {
   3107e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   31082:	e7d0      	b.n	31026 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   31084:	4a04      	ldr	r2, [pc, #16]	; (31098 <att_find_type_req+0xc8>)
   31086:	9902      	ldr	r1, [sp, #8]
   31088:	4620      	mov	r0, r4
   3108a:	f01c fbe9 	bl	4d860 <bt_att_chan_send_rsp>
	return 0;
   3108e:	e7cf      	b.n	31030 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   31090:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   31092:	e7ce      	b.n	31032 <att_find_type_req+0x62>
   31094:	0004d4e9 	.word	0x0004d4e9
   31098:	0004d8b1 	.word	0x0004d8b1

0003109c <att_find_info_req>:
{
   3109c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   3109e:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   310a0:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   310a2:	885e      	ldrh	r6, [r3, #2]
{
   310a4:	b085      	sub	sp, #20
   310a6:	4604      	mov	r4, r0
	if (!start || !end) {
   310a8:	b195      	cbz	r5, 310d0 <att_find_info_req+0x34>
   310aa:	b186      	cbz	r6, 310ce <att_find_info_req+0x32>
	if (start > end) {
   310ac:	42ae      	cmp	r6, r5
   310ae:	d30f      	bcc.n	310d0 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   310b0:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   310b2:	2210      	movs	r2, #16
   310b4:	2100      	movs	r1, #0
   310b6:	4668      	mov	r0, sp
   310b8:	f01a fe60 	bl	4bd7c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   310bc:	2200      	movs	r2, #0
   310be:	2105      	movs	r1, #5
   310c0:	4638      	mov	r0, r7
   310c2:	f01c fd0f 	bl	4dae4 <bt_att_create_pdu>
   310c6:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   310c8:	b958      	cbnz	r0, 310e2 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   310ca:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   310cc:	e007      	b.n	310de <att_find_info_req+0x42>
			*err = 0U;
   310ce:	4635      	mov	r5, r6
	if (!req) {
   310d0:	2301      	movs	r3, #1
   310d2:	462a      	mov	r2, r5
   310d4:	2104      	movs	r1, #4
   310d6:	4620      	mov	r0, r4
   310d8:	f7ff fd10 	bl	30afc <send_err_rsp.part.0>
		return 0;
   310dc:	2000      	movs	r0, #0
}
   310de:	b005      	add	sp, #20
   310e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   310e2:	466b      	mov	r3, sp
   310e4:	4a09      	ldr	r2, [pc, #36]	; (3110c <att_find_info_req+0x70>)
	data.chan = chan;
   310e6:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   310e8:	4631      	mov	r1, r6
   310ea:	4628      	mov	r0, r5
   310ec:	f01c f9f1 	bl	4d4d2 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   310f0:	9b02      	ldr	r3, [sp, #8]
   310f2:	b923      	cbnz	r3, 310fe <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   310f4:	9801      	ldr	r0, [sp, #4]
   310f6:	f012 fc8d 	bl	43a14 <net_buf_unref>
	if (!req) {
   310fa:	230a      	movs	r3, #10
   310fc:	e7e9      	b.n	310d2 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   310fe:	4a04      	ldr	r2, [pc, #16]	; (31110 <att_find_info_req+0x74>)
   31100:	9901      	ldr	r1, [sp, #4]
   31102:	4620      	mov	r0, r4
   31104:	f01c fbac 	bl	4d860 <bt_att_chan_send_rsp>
	return 0;
   31108:	e7e8      	b.n	310dc <att_find_info_req+0x40>
   3110a:	bf00      	nop
   3110c:	0004d611 	.word	0x0004d611
   31110:	0004d8b1 	.word	0x0004d8b1

00031114 <att_mtu_req>:
{
   31114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   31116:	6803      	ldr	r3, [r0, #0]
{
   31118:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   3111a:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3111c:	f3bf 8f5b 	dmb	ish
   31120:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   31124:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   31128:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   3112c:	071b      	lsls	r3, r3, #28
   3112e:	d421      	bmi.n	31174 <att_mtu_req+0x60>
	mtu_client = sys_le16_to_cpu(req->mtu);
   31130:	688b      	ldr	r3, [r1, #8]
   31132:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   31134:	2e16      	cmp	r6, #22
   31136:	d91f      	bls.n	31178 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   31138:	2202      	movs	r2, #2
   3113a:	2103      	movs	r1, #3
   3113c:	f01c fcd2 	bl	4dae4 <bt_att_create_pdu>
	if (!pdu) {
   31140:	4607      	mov	r7, r0
   31142:	b1d8      	cbz	r0, 3117c <att_mtu_req+0x68>
	return net_buf_simple_add(&buf->b, len);
   31144:	2102      	movs	r1, #2
   31146:	3008      	adds	r0, #8
   31148:	f01e fdee 	bl	4fd28 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   3114c:	2341      	movs	r3, #65	; 0x41
   3114e:	7003      	strb	r3, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   31150:	4a0b      	ldr	r2, [pc, #44]	; (31180 <att_mtu_req+0x6c>)
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   31152:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   31154:	4639      	mov	r1, r7
   31156:	4620      	mov	r0, r4
   31158:	f01c fb82 	bl	4d860 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   3115c:	2e41      	cmp	r6, #65	; 0x41
   3115e:	bf28      	it	cs
   31160:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   31162:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   31164:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   31168:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   3116c:	f01c f948 	bl	4d400 <att_chan_mtu_updated>
	return 0;
   31170:	4628      	mov	r0, r5
}
   31172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   31174:	2006      	movs	r0, #6
   31176:	e7fc      	b.n	31172 <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   31178:	2004      	movs	r0, #4
   3117a:	e7fa      	b.n	31172 <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   3117c:	200e      	movs	r0, #14
   3117e:	e7f8      	b.n	31172 <att_mtu_req+0x5e>
   31180:	0004d8b1 	.word	0x0004d8b1

00031184 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   31184:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   31186:	2300      	movs	r3, #0
{
   31188:	4605      	mov	r5, r0
   3118a:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   3118c:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   3118e:	f017 fcdd 	bl	48b4c <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
   31192:	4b0b      	ldr	r3, [pc, #44]	; (311c0 <bt_att_req_alloc+0x3c>)
   31194:	681b      	ldr	r3, [r3, #0]
   31196:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   31198:	bf04      	itt	eq
   3119a:	2500      	moveq	r5, #0
   3119c:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   3119e:	a901      	add	r1, sp, #4
   311a0:	4808      	ldr	r0, [pc, #32]	; (311c4 <bt_att_req_alloc+0x40>)
   311a2:	462a      	mov	r2, r5
   311a4:	4623      	mov	r3, r4
   311a6:	f016 fd27 	bl	47bf8 <k_mem_slab_alloc>
   311aa:	4601      	mov	r1, r0
   311ac:	b930      	cbnz	r0, 311bc <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   311ae:	9801      	ldr	r0, [sp, #4]
   311b0:	221c      	movs	r2, #28
   311b2:	f01a fde3 	bl	4bd7c <memset>

	return req;
   311b6:	9801      	ldr	r0, [sp, #4]
}
   311b8:	b003      	add	sp, #12
   311ba:	bd30      	pop	{r4, r5, pc}
		return NULL;
   311bc:	2000      	movs	r0, #0
   311be:	e7fb      	b.n	311b8 <bt_att_req_alloc+0x34>
   311c0:	200045a0 	.word	0x200045a0
   311c4:	2000111c 	.word	0x2000111c

000311c8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   311c8:	b507      	push	{r0, r1, r2, lr}
   311ca:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   311cc:	6880      	ldr	r0, [r0, #8]
   311ce:	b120      	cbz	r0, 311da <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   311d0:	f012 fc20 	bl	43a14 <net_buf_unref>
		req->buf = NULL;
   311d4:	9b01      	ldr	r3, [sp, #4]
   311d6:	2200      	movs	r2, #0
   311d8:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   311da:	4803      	ldr	r0, [pc, #12]	; (311e8 <bt_att_req_free+0x20>)
   311dc:	a901      	add	r1, sp, #4
   311de:	f01f fbd3 	bl	50988 <k_mem_slab_free>
}
   311e2:	b003      	add	sp, #12
   311e4:	f85d fb04 	ldr.w	pc, [sp], #4
   311e8:	2000111c 	.word	0x2000111c

000311ec <att_handle_rsp>:
{
   311ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   311f0:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   311f2:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   311f6:	460e      	mov	r6, r1
   311f8:	4617      	mov	r7, r2
   311fa:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   311fc:	f01f fda4 	bl	50d48 <k_work_cancel_delayable>
	if (!chan->req) {
   31200:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   31204:	b930      	cbnz	r0, 31214 <att_handle_rsp+0x28>
	att_req_send_process(chan->att);
   31206:	6820      	ldr	r0, [r4, #0]
   31208:	f01c fbce 	bl	4d9a8 <att_req_send_process>
}
   3120c:	2000      	movs	r0, #0
   3120e:	b002      	add	sp, #8
   31210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   31214:	4b10      	ldr	r3, [pc, #64]	; (31258 <att_handle_rsp+0x6c>)
   31216:	4298      	cmp	r0, r3
   31218:	f04f 0800 	mov.w	r8, #0
   3121c:	d102      	bne.n	31224 <att_handle_rsp+0x38>
		chan->req = NULL;
   3121e:	f8c4 80f4 	str.w	r8, [r4, #244]	; 0xf4
   31222:	e7f0      	b.n	31206 <att_handle_rsp+0x1a>
	func = chan->req->func;
   31224:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   31228:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   3122c:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   31230:	f7ff ffca 	bl	311c8 <bt_att_req_free>
	att_req_send_process(chan->att);
   31234:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   31236:	f8c4 80f4 	str.w	r8, [r4, #244]	; 0xf4
	att_req_send_process(chan->att);
   3123a:	f01c fbb5 	bl	4d9a8 <att_req_send_process>
	if (func) {
   3123e:	f1b9 0f00 	cmp.w	r9, #0
   31242:	d0e3      	beq.n	3120c <att_handle_rsp+0x20>
		func(chan->att->conn, err, pdu, len, params);
   31244:	6820      	ldr	r0, [r4, #0]
   31246:	f8cd a000 	str.w	sl, [sp]
   3124a:	6800      	ldr	r0, [r0, #0]
   3124c:	463b      	mov	r3, r7
   3124e:	4632      	mov	r2, r6
   31250:	4629      	mov	r1, r5
   31252:	47c8      	blx	r9
   31254:	e7da      	b.n	3120c <att_handle_rsp+0x20>
   31256:	bf00      	nop
   31258:	20004610 	.word	0x20004610

0003125c <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   3125c:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
	rsp = (void *)buf->data;
   31260:	688a      	ldr	r2, [r1, #8]
{
   31262:	b570      	push	{r4, r5, r6, lr}
   31264:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
   31266:	b30b      	cbz	r3, 312ac <att_error_rsp+0x50>
   31268:	4915      	ldr	r1, [pc, #84]	; (312c0 <att_error_rsp+0x64>)
   3126a:	428b      	cmp	r3, r1
   3126c:	d01e      	beq.n	312ac <att_error_rsp+0x50>
	err = rsp->error;
   3126e:	78d5      	ldrb	r5, [r2, #3]
	if (!att_change_security(chan->chan.chan.conn, err)) {
   31270:	6880      	ldr	r0, [r0, #8]
	switch (err) {
   31272:	2d05      	cmp	r5, #5
   31274:	d006      	beq.n	31284 <att_error_rsp+0x28>
   31276:	2d0f      	cmp	r5, #15
   31278:	d119      	bne.n	312ae <att_error_rsp+0x52>
		if (conn->sec_level >= BT_SECURITY_L2)
   3127a:	7a43      	ldrb	r3, [r0, #9]
   3127c:	2b01      	cmp	r3, #1
   3127e:	d816      	bhi.n	312ae <att_error_rsp+0x52>
		sec = BT_SECURITY_L2;
   31280:	2102      	movs	r1, #2
   31282:	e007      	b.n	31294 <att_error_rsp+0x38>
		if (conn->sec_level < BT_SECURITY_L2) {
   31284:	7a43      	ldrb	r3, [r0, #9]
   31286:	2b01      	cmp	r3, #1
   31288:	d9fa      	bls.n	31280 <att_error_rsp+0x24>
		} else if (conn->sec_level < BT_SECURITY_L3) {
   3128a:	2b02      	cmp	r3, #2
   3128c:	d00c      	beq.n	312a8 <att_error_rsp+0x4c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
   3128e:	2b03      	cmp	r3, #3
   31290:	d10d      	bne.n	312ae <att_error_rsp+0x52>
			sec = BT_SECURITY_L4;
   31292:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
   31294:	f01b fe20 	bl	4ced8 <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
   31298:	b948      	cbnz	r0, 312ae <att_error_rsp+0x52>
		chan->req->retrying = true;
   3129a:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
   3129e:	7c13      	ldrb	r3, [r2, #16]
   312a0:	f043 0301 	orr.w	r3, r3, #1
   312a4:	7413      	strb	r3, [r2, #16]
}
   312a6:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
   312a8:	2103      	movs	r1, #3
   312aa:	e7f3      	b.n	31294 <att_error_rsp+0x38>
		err = BT_ATT_ERR_UNLIKELY;
   312ac:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
   312ae:	2200      	movs	r2, #0
   312b0:	462b      	mov	r3, r5
   312b2:	4620      	mov	r0, r4
   312b4:	4611      	mov	r1, r2
}
   312b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
   312ba:	f7ff bf97 	b.w	311ec <att_handle_rsp>
   312be:	bf00      	nop
   312c0:	20004610 	.word	0x20004610

000312c4 <bt_att_disconnected>:
{
   312c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   312c6:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   312ca:	b085      	sub	sp, #20
   312cc:	4604      	mov	r4, r0
	if (!att_chan->att) {
   312ce:	2d00      	cmp	r5, #0
   312d0:	d04d      	beq.n	3136e <bt_att_disconnected+0xaa>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   312d2:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   312d6:	f105 0024 	add.w	r0, r5, #36	; 0x24
   312da:	f01c facf 	bl	4d87c <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   312de:	f1a4 0608 	sub.w	r6, r4, #8
   312e2:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   312e6:	2200      	movs	r2, #0
   312e8:	2300      	movs	r3, #0
   312ea:	4638      	mov	r0, r7
   312ec:	f01e fcb9 	bl	4fc62 <net_buf_get>
   312f0:	4602      	mov	r2, r0
   312f2:	bb18      	cbnz	r0, 3133c <bt_att_disconnected+0x78>
	if (chan->req) {
   312f4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   312f8:	b123      	cbz	r3, 31304 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   312fa:	4601      	mov	r1, r0
   312fc:	230e      	movs	r3, #14
   312fe:	4630      	mov	r0, r6
   31300:	f7ff ff74 	bl	311ec <att_handle_rsp>
	chan->att = NULL;
   31304:	2300      	movs	r3, #0
   31306:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   3130a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3130c:	2b00      	cmp	r3, #0
   3130e:	d12e      	bne.n	3136e <bt_att_disconnected+0xaa>
	att_reset(att);
   31310:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   31312:	9803      	ldr	r0, [sp, #12]
   31314:	2200      	movs	r2, #0
   31316:	2300      	movs	r3, #0
   31318:	300c      	adds	r0, #12
   3131a:	f01e fca2 	bl	4fc62 <net_buf_get>
   3131e:	b980      	cbnz	r0, 31342 <bt_att_disconnected+0x7e>
	while (!sys_slist_is_empty(&att->reqs)) {
   31320:	9803      	ldr	r0, [sp, #12]
	return list->head;
   31322:	6845      	ldr	r5, [r0, #4]
   31324:	b985      	cbnz	r5, 31348 <bt_att_disconnected+0x84>
	att->conn = NULL;
   31326:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   31328:	a903      	add	r1, sp, #12
   3132a:	4812      	ldr	r0, [pc, #72]	; (31374 <bt_att_disconnected+0xb0>)
   3132c:	f01f fb2c 	bl	50988 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   31330:	6820      	ldr	r0, [r4, #0]
}
   31332:	b005      	add	sp, #20
   31334:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
   31338:	f001 bb4e 	b.w	329d8 <bt_gatt_disconnected>
		net_buf_unref(buf);
   3133c:	f012 fb6a 	bl	43a14 <net_buf_unref>
   31340:	e7d1      	b.n	312e6 <bt_att_disconnected+0x22>
		net_buf_unref(buf);
   31342:	f012 fb67 	bl	43a14 <net_buf_unref>
   31346:	e7e4      	b.n	31312 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   31348:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   3134a:	686e      	ldr	r6, [r5, #4]
	return node->next;
   3134c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   3134e:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   31350:	4295      	cmp	r5, r2
	list->tail = node;
   31352:	bf08      	it	eq
   31354:	6083      	streq	r3, [r0, #8]
   31356:	b136      	cbz	r6, 31366 <bt_att_disconnected+0xa2>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   31358:	69ab      	ldr	r3, [r5, #24]
   3135a:	9300      	str	r3, [sp, #0]
   3135c:	2300      	movs	r3, #0
   3135e:	6800      	ldr	r0, [r0, #0]
   31360:	461a      	mov	r2, r3
   31362:	210e      	movs	r1, #14
   31364:	47b0      	blx	r6
		bt_att_req_free(req);
   31366:	4628      	mov	r0, r5
   31368:	f7ff ff2e 	bl	311c8 <bt_att_req_free>
   3136c:	e7d8      	b.n	31320 <bt_att_disconnected+0x5c>
}
   3136e:	b005      	add	sp, #20
   31370:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31372:	bf00      	nop
   31374:	200010c8 	.word	0x200010c8

00031378 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   31378:	b510      	push	{r4, lr}
   3137a:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   3137c:	b348      	cbz	r0, 313d2 <bt_att_req_cancel+0x5a>
   3137e:	b341      	cbz	r1, 313d2 <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
   31380:	f01c f80f 	bl	4d3a2 <att_get>
	if (!att) {
   31384:	b328      	cbz	r0, 313d2 <bt_att_req_cancel+0x5a>
	return list->head;
   31386:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   31388:	b1eb      	cbz	r3, 313c6 <bt_att_req_cancel+0x4e>
   3138a:	f5a3 72a2 	sub.w	r2, r3, #324	; 0x144
	return node->next;
   3138e:	681b      	ldr	r3, [r3, #0]
   31390:	b10b      	cbz	r3, 31396 <bt_att_req_cancel+0x1e>
   31392:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
	if (chan->req != req) {
   31396:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
   3139a:	428c      	cmp	r4, r1
   3139c:	d00b      	beq.n	313b6 <bt_att_req_cancel+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   3139e:	b193      	cbz	r3, 313c6 <bt_att_req_cancel+0x4e>
   313a0:	461a      	mov	r2, r3
   313a2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   313a6:	2b00      	cmp	r3, #0
   313a8:	d0f5      	beq.n	31396 <bt_att_req_cancel+0x1e>
	if (chan->req != req) {
   313aa:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
   313ae:	428c      	cmp	r4, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   313b0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
	if (chan->req != req) {
   313b4:	d1f4      	bne.n	313a0 <bt_att_req_cancel+0x28>
	chan->req = &cancel;
   313b6:	4b07      	ldr	r3, [pc, #28]	; (313d4 <bt_att_req_cancel+0x5c>)
   313b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
	bt_att_req_free(req);
   313bc:	4620      	mov	r0, r4

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);

	bt_att_req_free(req);
}
   313be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   313c2:	f7ff bf01 	b.w	311c8 <bt_att_req_free>
	sys_slist_find_and_remove(&att->reqs, &req->node);
   313c6:	3004      	adds	r0, #4
   313c8:	4621      	mov	r1, r4
   313ca:	f01c fa57 	bl	4d87c <sys_slist_find_and_remove.isra.0>
	bt_att_req_free(req);
   313ce:	4620      	mov	r0, r4
   313d0:	e7f5      	b.n	313be <bt_att_req_cancel+0x46>
}
   313d2:	bd10      	pop	{r4, pc}
   313d4:	20004610 	.word	0x20004610

000313d8 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   313d8:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   313da:	4904      	ldr	r1, [pc, #16]	; (313ec <db_hash_set+0x14>)
{
   313dc:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   313de:	4618      	mov	r0, r3
   313e0:	2210      	movs	r2, #16
   313e2:	47a0      	blx	r4

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   313e4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   313e8:	bd10      	pop	{r4, pc}
   313ea:	bf00      	nop
   313ec:	20002570 	.word	0x20002570

000313f0 <find_cf_cfg>:
{
   313f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   313f2:	4d0f      	ldr	r5, [pc, #60]	; (31430 <find_cf_cfg+0x40>)
   313f4:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   313f6:	2600      	movs	r6, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   313f8:	462f      	mov	r7, r5
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   313fa:	1c6a      	adds	r2, r5, #1
		if (!conn) {
   313fc:	b954      	cbnz	r4, 31414 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   313fe:	4669      	mov	r1, sp
   31400:	4610      	mov	r0, r2
   31402:	9400      	str	r4, [sp, #0]
   31404:	f8cd 4003 	str.w	r4, [sp, #3]
   31408:	f01c fd34 	bl	4de74 <bt_addr_le_cmp>
   3140c:	b940      	cbnz	r0, 31420 <find_cf_cfg+0x30>
}
   3140e:	4638      	mov	r0, r7
   31410:	b003      	add	sp, #12
   31412:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   31414:	7829      	ldrb	r1, [r5, #0]
   31416:	4620      	mov	r0, r4
   31418:	f01b fd88 	bl	4cf2c <bt_conn_is_peer_addr_le>
   3141c:	2800      	cmp	r0, #0
   3141e:	d1f6      	bne.n	3140e <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   31420:	3601      	adds	r6, #1
   31422:	2e0c      	cmp	r6, #12
   31424:	f105 0510 	add.w	r5, r5, #16
   31428:	d1e6      	bne.n	313f8 <find_cf_cfg+0x8>
	return NULL;
   3142a:	2700      	movs	r7, #0
   3142c:	e7ef      	b.n	3140e <find_cf_cfg+0x1e>
   3142e:	bf00      	nop
   31430:	200046bc 	.word	0x200046bc

00031434 <find_sc_cfg>:
{
   31434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31436:	4d0b      	ldr	r5, [pc, #44]	; (31464 <find_sc_cfg+0x30>)
   31438:	4606      	mov	r6, r0
   3143a:	460f      	mov	r7, r1
   3143c:	2400      	movs	r4, #0
		if (id == sc_cfg[i].id &&
   3143e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   31442:	42b3      	cmp	r3, r6
   31444:	d107      	bne.n	31456 <find_sc_cfg+0x22>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   31446:	4639      	mov	r1, r7
   31448:	4628      	mov	r0, r5
   3144a:	f01c fd13 	bl	4de74 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   3144e:	b910      	cbnz	r0, 31456 <find_sc_cfg+0x22>
			return &sc_cfg[i];
   31450:	4805      	ldr	r0, [pc, #20]	; (31468 <find_sc_cfg+0x34>)
   31452:	4420      	add	r0, r4
}
   31454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   31456:	340c      	adds	r4, #12
   31458:	2c90      	cmp	r4, #144	; 0x90
   3145a:	f105 050c 	add.w	r5, r5, #12
   3145e:	d1ee      	bne.n	3143e <find_sc_cfg+0xa>
	return NULL;
   31460:	2000      	movs	r0, #0
   31462:	e7f7      	b.n	31454 <find_sc_cfg+0x20>
   31464:	20007225 	.word	0x20007225
   31468:	20007224 	.word	0x20007224

0003146c <gatt_sub_find>:
{
   3146c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3146e:	4d0f      	ldr	r5, [pc, #60]	; (314ac <gatt_sub_find+0x40>)
   31470:	4604      	mov	r4, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   31472:	2600      	movs	r6, #0
		struct gatt_sub *sub = &subscriptions[i];
   31474:	462f      	mov	r7, r5
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   31476:	1c6a      	adds	r2, r5, #1
		if (!conn) {
   31478:	b954      	cbnz	r4, 31490 <gatt_sub_find+0x24>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   3147a:	4669      	mov	r1, sp
   3147c:	4610      	mov	r0, r2
   3147e:	9400      	str	r4, [sp, #0]
   31480:	f8cd 4003 	str.w	r4, [sp, #3]
   31484:	f01c fcf6 	bl	4de74 <bt_addr_le_cmp>
   31488:	b940      	cbnz	r0, 3149c <gatt_sub_find+0x30>
}
   3148a:	4638      	mov	r0, r7
   3148c:	b003      	add	sp, #12
   3148e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   31490:	7829      	ldrb	r1, [r5, #0]
   31492:	4620      	mov	r0, r4
   31494:	f01b fd4a 	bl	4cf2c <bt_conn_is_peer_addr_le>
   31498:	2800      	cmp	r0, #0
   3149a:	d1f6      	bne.n	3148a <gatt_sub_find+0x1e>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   3149c:	3601      	adds	r6, #1
   3149e:	2e0c      	cmp	r6, #12
   314a0:	f105 0510 	add.w	r5, r5, #16
   314a4:	d1e6      	bne.n	31474 <gatt_sub_find+0x8>
	return NULL;
   314a6:	2700      	movs	r7, #0
   314a8:	e7ef      	b.n	3148a <gatt_sub_find+0x1e>
   314aa:	bf00      	nop
   314ac:	2000478c 	.word	0x2000478c

000314b0 <find_cf_cfg_by_addr>:
{
   314b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   314b2:	4d0b      	ldr	r5, [pc, #44]	; (314e0 <find_cf_cfg_by_addr+0x30>)
   314b4:	4606      	mov	r6, r0
   314b6:	460f      	mov	r7, r1
   314b8:	2400      	movs	r4, #0
			if (id == cf_cfg[i].id &&
   314ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   314be:	42b3      	cmp	r3, r6
   314c0:	d107      	bne.n	314d2 <find_cf_cfg_by_addr+0x22>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   314c2:	4629      	mov	r1, r5
   314c4:	4638      	mov	r0, r7
   314c6:	f01c fcd5 	bl	4de74 <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   314ca:	b910      	cbnz	r0, 314d2 <find_cf_cfg_by_addr+0x22>
				return &cf_cfg[i];
   314cc:	4805      	ldr	r0, [pc, #20]	; (314e4 <find_cf_cfg_by_addr+0x34>)
   314ce:	4420      	add	r0, r4
}
   314d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   314d2:	3410      	adds	r4, #16
   314d4:	2cc0      	cmp	r4, #192	; 0xc0
   314d6:	f105 0510 	add.w	r5, r5, #16
   314da:	d1ee      	bne.n	314ba <find_cf_cfg_by_addr+0xa>
	return NULL;
   314dc:	2000      	movs	r0, #0
   314de:	e7f7      	b.n	314d0 <find_cf_cfg_by_addr+0x20>
   314e0:	200046bd 	.word	0x200046bd
   314e4:	200046bc 	.word	0x200046bc

000314e8 <ccc_load>:
{
   314e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   314ea:	4b20      	ldr	r3, [pc, #128]	; (3156c <ccc_load+0x84>)
{
   314ec:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   314ee:	6882      	ldr	r2, [r0, #8]
   314f0:	429a      	cmp	r2, r3
   314f2:	d10a      	bne.n	3150a <ccc_load+0x22>
	if (!load->entry) {
   314f4:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
   314f6:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   314f8:	b953      	cbnz	r3, 31510 <ccc_load+0x28>
	cfg = ccc_find_cfg(ccc, addr, id);
   314fa:	7922      	ldrb	r2, [r4, #4]
   314fc:	6821      	ldr	r1, [r4, #0]
   314fe:	4630      	mov	r0, r6
   31500:	f01c fce3 	bl	4deca <ccc_find_cfg>
	if (!cfg) {
   31504:	b108      	cbz	r0, 3150a <ccc_load+0x22>
	clear_ccc_cfg(cfg);
   31506:	f01c fd41 	bl	4df8c <clear_ccc_cfg>
		return BT_GATT_ITER_CONTINUE;
   3150a:	2001      	movs	r0, #1
}
   3150c:	b002      	add	sp, #8
   3150e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!load->count) {
   31510:	68e0      	ldr	r0, [r4, #12]
   31512:	2800      	cmp	r0, #0
   31514:	d0fa      	beq.n	3150c <ccc_load+0x24>
	if (load->entry->handle != handle) {
   31516:	881b      	ldrh	r3, [r3, #0]
   31518:	428b      	cmp	r3, r1
   3151a:	d00a      	beq.n	31532 <ccc_load+0x4a>
		if (load->entry->handle < handle) {
   3151c:	d2f5      	bcs.n	3150a <ccc_load+0x22>
	load->count--;
   3151e:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   31520:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   31522:	3801      	subs	r0, #1
	load->entry++;
   31524:	3304      	adds	r3, #4
	load->count--;
   31526:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   31528:	3800      	subs	r0, #0
	load->entry++;
   3152a:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   3152c:	bf18      	it	ne
   3152e:	2001      	movne	r0, #1
   31530:	e7ec      	b.n	3150c <ccc_load+0x24>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   31532:	7922      	ldrb	r2, [r4, #4]
   31534:	6821      	ldr	r1, [r4, #0]
   31536:	4630      	mov	r0, r6
   31538:	f01c fcc7 	bl	4deca <ccc_find_cfg>
	if (!cfg) {
   3153c:	4605      	mov	r5, r0
   3153e:	b980      	cbnz	r0, 31562 <ccc_load+0x7a>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   31540:	9000      	str	r0, [sp, #0]
   31542:	4602      	mov	r2, r0
   31544:	f8cd 0003 	str.w	r0, [sp, #3]
   31548:	4669      	mov	r1, sp
   3154a:	4630      	mov	r0, r6
   3154c:	f01c fcbd 	bl	4deca <ccc_find_cfg>
		if (!cfg) {
   31550:	4605      	mov	r5, r0
   31552:	2800      	cmp	r0, #0
   31554:	d0e3      	beq.n	3151e <ccc_load+0x36>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   31556:	6821      	ldr	r1, [r4, #0]
   31558:	3001      	adds	r0, #1
   3155a:	f01c fcd0 	bl	4defe <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   3155e:	7923      	ldrb	r3, [r4, #4]
   31560:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   31562:	68a3      	ldr	r3, [r4, #8]
   31564:	885b      	ldrh	r3, [r3, #2]
   31566:	812b      	strh	r3, [r5, #8]
   31568:	e7d9      	b.n	3151e <ccc_load+0x36>
   3156a:	bf00      	nop
   3156c:	000315d1 	.word	0x000315d1

00031570 <sc_store>:
{
   31570:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   31572:	4605      	mov	r5, r0
{
   31574:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   31576:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   3157a:	4604      	mov	r4, r0
	if (cfg->id) {
   3157c:	b19a      	cbz	r2, 315a6 <sc_store+0x36>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   3157e:	ae02      	add	r6, sp, #8
   31580:	2104      	movs	r1, #4
   31582:	4630      	mov	r0, r6
   31584:	f018 fa05 	bl	49992 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   31588:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   3158a:	462b      	mov	r3, r5
   3158c:	a803      	add	r0, sp, #12
   3158e:	4a07      	ldr	r2, [pc, #28]	; (315ac <sc_store+0x3c>)
   31590:	2124      	movs	r1, #36	; 0x24
   31592:	f7fc f8af 	bl	2d6f4 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   31596:	2204      	movs	r2, #4
   31598:	f104 0108 	add.w	r1, r4, #8
   3159c:	a803      	add	r0, sp, #12
   3159e:	f7fa febb 	bl	2c318 <settings_save_one>
}
   315a2:	b00c      	add	sp, #48	; 0x30
   315a4:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   315a6:	9200      	str	r2, [sp, #0]
   315a8:	e7ef      	b.n	3158a <sc_store+0x1a>
   315aa:	bf00      	nop
   315ac:	00054429 	.word	0x00054429

000315b0 <db_hash_commit>:

static int db_hash_commit(void)
{
   315b0:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   315b2:	2108      	movs	r1, #8
   315b4:	4804      	ldr	r0, [pc, #16]	; (315c8 <db_hash_commit+0x18>)
   315b6:	f01c fc4e 	bl	4de56 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   315ba:	2200      	movs	r2, #0
   315bc:	2300      	movs	r3, #0
   315be:	4803      	ldr	r0, [pc, #12]	; (315cc <db_hash_commit+0x1c>)
   315c0:	f016 ffda 	bl	48578 <k_work_reschedule>

	return 0;
}
   315c4:	2000      	movs	r0, #0
   315c6:	bd08      	pop	{r3, pc}
   315c8:	20002628 	.word	0x20002628
   315cc:	20002580 	.word	0x20002580

000315d0 <bt_gatt_attr_write_ccc>:
{
   315d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   315d4:	461f      	mov	r7, r3
   315d6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   315da:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   315de:	4605      	mov	r5, r0
   315e0:	4688      	mov	r8, r1
	if (offset) {
   315e2:	2b00      	cmp	r3, #0
   315e4:	d15d      	bne.n	316a2 <bt_gatt_attr_write_ccc+0xd2>
	if (!len || len > sizeof(uint16_t)) {
   315e6:	1e7b      	subs	r3, r7, #1
   315e8:	2b01      	cmp	r3, #1
   315ea:	d85d      	bhi.n	316a8 <bt_gatt_attr_write_ccc+0xd8>
	if (len < sizeof(uint16_t)) {
   315ec:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   315ee:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   315f0:	7816      	ldrb	r6, [r2, #0]
   315f2:	bf18      	it	ne
   315f4:	8816      	ldrhne	r6, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   315f6:	f01c fc40 	bl	4de7a <find_ccc_cfg>
	if (!cfg) {
   315fa:	4604      	mov	r4, r0
   315fc:	b980      	cbnz	r0, 31620 <bt_gatt_attr_write_ccc+0x50>
		if (!value) {
   315fe:	b916      	cbnz	r6, 31606 <bt_gatt_attr_write_ccc+0x36>
			return len;
   31600:	4638      	mov	r0, r7
}
   31602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   31606:	4649      	mov	r1, r9
   31608:	f01c fc37 	bl	4de7a <find_ccc_cfg>
		if (!cfg) {
   3160c:	4604      	mov	r4, r0
   3160e:	2800      	cmp	r0, #0
   31610:	d04d      	beq.n	316ae <bt_gatt_attr_write_ccc+0xde>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   31612:	f105 0188 	add.w	r1, r5, #136	; 0x88
   31616:	3001      	adds	r0, #1
   31618:	f01c fc71 	bl	4defe <bt_addr_le_copy>
		cfg->id = conn->id;
   3161c:	7a2b      	ldrb	r3, [r5, #8]
   3161e:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   31620:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
   31624:	bb8b      	cbnz	r3, 3168a <bt_gatt_attr_write_ccc+0xba>
	if (cfg->value != ccc->value) {
   31626:	f8b9 303c 	ldrh.w	r3, [r9, #60]	; 0x3c
	value_changed = cfg->value != value;
   3162a:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   3162e:	8126      	strh	r6, [r4, #8]
	if (cfg->value != ccc->value) {
   31630:	42b3      	cmp	r3, r6
   31632:	d003      	beq.n	3163c <bt_gatt_attr_write_ccc+0x6c>
		gatt_ccc_changed(attr, ccc);
   31634:	4649      	mov	r1, r9
   31636:	4640      	mov	r0, r8
   31638:	f01c fb84 	bl	4dd44 <gatt_ccc_changed>
	if (value_changed) {
   3163c:	45b2      	cmp	sl, r6
   3163e:	d01e      	beq.n	3167e <bt_gatt_attr_write_ccc+0xae>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   31640:	4628      	mov	r0, r5
   31642:	f7fe fb7b 	bl	2fd3c <bt_conn_index>
   31646:	f8df 806c 	ldr.w	r8, [pc, #108]	; 316b4 <bt_gatt_attr_write_ccc+0xe4>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   3164a:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
   3164e:	429d      	cmp	r5, r3
   31650:	d015      	beq.n	3167e <bt_gatt_attr_write_ccc+0xae>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   31652:	7a28      	ldrb	r0, [r5, #8]
   31654:	f105 0188 	add.w	r1, r5, #136	; 0x88
   31658:	f01b f84c 	bl	4c6f4 <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   3165c:	b178      	cbz	r0, 3167e <bt_gatt_attr_write_ccc+0xae>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   3165e:	4628      	mov	r0, r5
   31660:	f7fe fb6c 	bl	2fd3c <bt_conn_index>
   31664:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   31666:	4628      	mov	r0, r5
   31668:	f01b fb9c 	bl	4cda4 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   3166c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   31670:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   31674:	2300      	movs	r3, #0
   31676:	f108 0018 	add.w	r0, r8, #24
   3167a:	f016 ff7d 	bl	48578 <k_work_reschedule>
	if (!value) {
   3167e:	2e00      	cmp	r6, #0
   31680:	d1be      	bne.n	31600 <bt_gatt_attr_write_ccc+0x30>
		clear_ccc_cfg(cfg);
   31682:	4620      	mov	r0, r4
   31684:	f01c fc82 	bl	4df8c <clear_ccc_cfg>
   31688:	e7ba      	b.n	31600 <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   3168a:	4632      	mov	r2, r6
   3168c:	4641      	mov	r1, r8
   3168e:	4628      	mov	r0, r5
   31690:	4798      	blx	r3
		if (write < 0) {
   31692:	2800      	cmp	r0, #0
   31694:	dbb5      	blt.n	31602 <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
   31696:	3801      	subs	r0, #1
   31698:	2801      	cmp	r0, #1
   3169a:	d9c4      	bls.n	31626 <bt_gatt_attr_write_ccc+0x56>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   3169c:	f06f 000d 	mvn.w	r0, #13
   316a0:	e7af      	b.n	31602 <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   316a2:	f06f 0006 	mvn.w	r0, #6
   316a6:	e7ac      	b.n	31602 <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   316a8:	f06f 000c 	mvn.w	r0, #12
   316ac:	e7a9      	b.n	31602 <bt_gatt_attr_write_ccc+0x32>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   316ae:	f06f 0010 	mvn.w	r0, #16
   316b2:	e7a6      	b.n	31602 <bt_gatt_attr_write_ccc+0x32>
   316b4:	20002518 	.word	0x20002518

000316b8 <gatt_write_ccc>:
{
   316b8:	b507      	push	{r0, r1, r2, lr}
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   316ba:	2312      	movs	r3, #18
{
   316bc:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   316be:	2104      	movs	r1, #4
   316c0:	e9cd 3100 	strd	r3, r1, [sp]
   316c4:	4b03      	ldr	r3, [pc, #12]	; (316d4 <gatt_write_ccc+0x1c>)
   316c6:	4904      	ldr	r1, [pc, #16]	; (316d8 <gatt_write_ccc+0x20>)
   316c8:	f01c fd14 	bl	4e0f4 <gatt_req_send>
}
   316cc:	b003      	add	sp, #12
   316ce:	f85d fb04 	ldr.w	pc, [sp], #4
   316d2:	bf00      	nop
   316d4:	0004e539 	.word	0x0004e539
   316d8:	0004e085 	.word	0x0004e085

000316dc <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   316dc:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   316de:	6881      	ldr	r1, [r0, #8]
{
   316e0:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   316e2:	4a07      	ldr	r2, [pc, #28]	; (31700 <remove_peer_from_attr+0x24>)
   316e4:	4291      	cmp	r1, r2
   316e6:	d109      	bne.n	316fc <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   316e8:	791a      	ldrb	r2, [r3, #4]
   316ea:	6819      	ldr	r1, [r3, #0]
   316ec:	68c0      	ldr	r0, [r0, #12]
   316ee:	f01c fbec 	bl	4deca <ccc_find_cfg>
	if (cfg) {
   316f2:	b118      	cbz	r0, 316fc <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   316f4:	220a      	movs	r2, #10
   316f6:	2100      	movs	r1, #0
   316f8:	f01a fb40 	bl	4bd7c <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   316fc:	2001      	movs	r0, #1
   316fe:	bd08      	pop	{r3, pc}
   31700:	000315d1 	.word	0x000315d1

00031704 <convert_to_id_on_match>:
{
   31704:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   31706:	4b0b      	ldr	r3, [pc, #44]	; (31734 <convert_to_id_on_match+0x30>)
{
   31708:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   3170a:	6882      	ldr	r2, [r0, #8]
   3170c:	429a      	cmp	r2, r3
   3170e:	d10e      	bne.n	3172e <convert_to_id_on_match+0x2a>
   31710:	68c5      	ldr	r5, [r0, #12]
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   31712:	1c6c      	adds	r4, r5, #1
   31714:	353d      	adds	r5, #61	; 0x3d
		if (bt_addr_le_cmp(&ccc->cfg[i].peer, match->private_addr) == 0) {
   31716:	6831      	ldr	r1, [r6, #0]
   31718:	4620      	mov	r0, r4
   3171a:	f01c fbab 	bl	4de74 <bt_addr_le_cmp>
   3171e:	b918      	cbnz	r0, 31728 <convert_to_id_on_match+0x24>
			bt_addr_le_copy(&ccc->cfg[i].peer, match->id_addr);
   31720:	6871      	ldr	r1, [r6, #4]
   31722:	4620      	mov	r0, r4
   31724:	f01c fbeb 	bl	4defe <bt_addr_le_copy>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   31728:	340a      	adds	r4, #10
   3172a:	42ac      	cmp	r4, r5
   3172c:	d1f3      	bne.n	31716 <convert_to_id_on_match+0x12>
}
   3172e:	2001      	movs	r0, #1
   31730:	bd70      	pop	{r4, r5, r6, pc}
   31732:	bf00      	nop
   31734:	000315d1 	.word	0x000315d1

00031738 <ccc_save>:
{
   31738:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   3173a:	4b0c      	ldr	r3, [pc, #48]	; (3176c <ccc_save+0x34>)
{
   3173c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   3173e:	6882      	ldr	r2, [r0, #8]
   31740:	429a      	cmp	r2, r3
{
   31742:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   31744:	d10f      	bne.n	31766 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   31746:	7922      	ldrb	r2, [r4, #4]
   31748:	6821      	ldr	r1, [r4, #0]
   3174a:	68c0      	ldr	r0, [r0, #12]
   3174c:	f01c fbbd 	bl	4deca <ccc_find_cfg>
	if (!cfg) {
   31750:	b148      	cbz	r0, 31766 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   31752:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   31756:	8901      	ldrh	r1, [r0, #8]
   31758:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   3175c:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   3175e:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   31760:	8151      	strh	r1, [r2, #10]
	save->count++;
   31762:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   31766:	2001      	movs	r0, #1
   31768:	bd38      	pop	{r3, r4, r5, pc}
   3176a:	bf00      	nop
   3176c:	000315d1 	.word	0x000315d1

00031770 <bt_gatt_store_cf.isra.0>:
static int bt_gatt_store_cf(struct bt_conn *conn)
   31770:	b5f0      	push	{r4, r5, r6, r7, lr}
   31772:	b08d      	sub	sp, #52	; 0x34
   31774:	4605      	mov	r5, r0
	cfg = find_cf_cfg(conn);
   31776:	f7ff fe3b 	bl	313f0 <find_cf_cfg>
					       &conn->le.dst, id_str);
   3177a:	f105 0688 	add.w	r6, r5, #136	; 0x88
	if (!cfg) {
   3177e:	4604      	mov	r4, r0
   31780:	b300      	cbz	r0, 317c4 <bt_gatt_store_cf.isra.0+0x54>
		if (conn->id) {
   31782:	7a2a      	ldrb	r2, [r5, #8]
		str = (char *)cfg->data;
   31784:	3408      	adds	r4, #8
		if (conn->id) {
   31786:	b16a      	cbz	r2, 317a4 <bt_gatt_store_cf.isra.0+0x34>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   31788:	af02      	add	r7, sp, #8
   3178a:	2104      	movs	r1, #4
   3178c:	4638      	mov	r0, r7
   3178e:	f018 f900 	bl	49992 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   31792:	4633      	mov	r3, r6
   31794:	4a0d      	ldr	r2, [pc, #52]	; (317cc <bt_gatt_store_cf.isra.0+0x5c>)
   31796:	9700      	str	r7, [sp, #0]
   31798:	2124      	movs	r1, #36	; 0x24
   3179a:	a803      	add	r0, sp, #12
   3179c:	f7fb ffaa 	bl	2d6f4 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   317a0:	7a2b      	ldrb	r3, [r5, #8]
   317a2:	b98b      	cbnz	r3, 317c8 <bt_gatt_store_cf.isra.0+0x58>
		len = 0;
   317a4:	2501      	movs	r5, #1
		bt_settings_encode_key(key, sizeof(key), "cf",
   317a6:	2300      	movs	r3, #0
   317a8:	9300      	str	r3, [sp, #0]
   317aa:	4a08      	ldr	r2, [pc, #32]	; (317cc <bt_gatt_store_cf.isra.0+0x5c>)
   317ac:	4633      	mov	r3, r6
   317ae:	2124      	movs	r1, #36	; 0x24
   317b0:	a803      	add	r0, sp, #12
   317b2:	f7fb ff9f 	bl	2d6f4 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   317b6:	462a      	mov	r2, r5
   317b8:	4621      	mov	r1, r4
   317ba:	a803      	add	r0, sp, #12
   317bc:	f7fa fdac 	bl	2c318 <settings_save_one>
}
   317c0:	b00d      	add	sp, #52	; 0x34
   317c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
   317c4:	4605      	mov	r5, r0
   317c6:	e7ee      	b.n	317a6 <bt_gatt_store_cf.isra.0+0x36>
   317c8:	2501      	movs	r5, #1
   317ca:	e7f4      	b.n	317b6 <bt_gatt_store_cf.isra.0+0x46>
   317cc:	00054423 	.word	0x00054423

000317d0 <bt_gatt_clear_sc>:
{
   317d0:	b570      	push	{r4, r5, r6, lr}
   317d2:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   317d4:	f7ff fe2e 	bl	31434 <find_sc_cfg>
	if (!cfg) {
   317d8:	4604      	mov	r4, r0
   317da:	b1b8      	cbz	r0, 3180c <bt_gatt_clear_sc+0x3c>
		if (cfg->id) {
   317dc:	4605      	mov	r5, r0
   317de:	f815 2b01 	ldrb.w	r2, [r5], #1
   317e2:	b1b2      	cbz	r2, 31812 <bt_gatt_clear_sc+0x42>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   317e4:	ae02      	add	r6, sp, #8
   317e6:	2104      	movs	r1, #4
   317e8:	4630      	mov	r0, r6
   317ea:	f018 f8d2 	bl	49992 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   317ee:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   317f0:	4a09      	ldr	r2, [pc, #36]	; (31818 <bt_gatt_clear_sc+0x48>)
   317f2:	2124      	movs	r1, #36	; 0x24
   317f4:	462b      	mov	r3, r5
   317f6:	a803      	add	r0, sp, #12
   317f8:	f7fb ff7c 	bl	2d6f4 <bt_settings_encode_key>
		err = settings_delete(key);
   317fc:	a803      	add	r0, sp, #12
   317fe:	f018 ffb9 	bl	4a774 <settings_delete>
	memset(cfg, 0, sizeof(*cfg));
   31802:	220c      	movs	r2, #12
   31804:	2100      	movs	r1, #0
   31806:	4620      	mov	r0, r4
   31808:	f01a fab8 	bl	4bd7c <memset>
}
   3180c:	2000      	movs	r0, #0
   3180e:	b00c      	add	sp, #48	; 0x30
   31810:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   31812:	9200      	str	r2, [sp, #0]
   31814:	e7ec      	b.n	317f0 <bt_gatt_clear_sc+0x20>
   31816:	bf00      	nop
   31818:	00054429 	.word	0x00054429

0003181c <disconnected_cb>:
{
   3181c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   31820:	4b25      	ldr	r3, [pc, #148]	; (318b8 <disconnected_cb+0x9c>)
{
   31822:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   31824:	6882      	ldr	r2, [r0, #8]
   31826:	429a      	cmp	r2, r3
{
   31828:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   3182a:	d12f      	bne.n	3188c <disconnected_cb+0x70>
	ccc = attr->user_data;
   3182c:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   3182e:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
   31830:	b363      	cbz	r3, 3188c <disconnected_cb+0x70>
				if (ccc == &sc_ccc) {
   31832:	f8df b088 	ldr.w	fp, [pc, #136]	; 318bc <disconnected_cb+0xa0>
   31836:	1c6c      	adds	r4, r5, #1
   31838:	f105 0a3d 	add.w	sl, r5, #61	; 0x3d
	value_used = false;
   3183c:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   31840:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   31844:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   31848:	b19b      	cbz	r3, 31872 <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   3184a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   3184e:	4622      	mov	r2, r4
   31850:	4630      	mov	r0, r6
   31852:	f01b fb6b 	bl	4cf2c <bt_conn_is_peer_addr_le>
   31856:	b9e0      	cbnz	r0, 31892 <disconnected_cb+0x76>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   31858:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   3185c:	4621      	mov	r1, r4
   3185e:	f7fe fba1 	bl	2ffa4 <bt_conn_lookup_addr_le>
			if (tmp) {
   31862:	b130      	cbz	r0, 31872 <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
   31864:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   31866:	2b07      	cmp	r3, #7
   31868:	bf08      	it	eq
   3186a:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   3186e:	f01b fab4 	bl	4cdda <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   31872:	340a      	adds	r4, #10
   31874:	4554      	cmp	r4, sl
   31876:	d1e5      	bne.n	31844 <disconnected_cb+0x28>
	if (!value_used) {
   31878:	f1b8 0f00 	cmp.w	r8, #0
   3187c:	d106      	bne.n	3188c <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
   3187e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
		ccc->value = 0U;
   31880:	f8a5 803c 	strh.w	r8, [r5, #60]	; 0x3c
		if (ccc->cfg_changed) {
   31884:	b113      	cbz	r3, 3188c <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
   31886:	4641      	mov	r1, r8
   31888:	4638      	mov	r0, r7
   3188a:	4798      	blx	r3
}
   3188c:	2001      	movs	r0, #1
   3188e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   31892:	7a30      	ldrb	r0, [r6, #8]
   31894:	4649      	mov	r1, r9
   31896:	f01a ff2d 	bl	4c6f4 <bt_addr_le_is_bonded>
   3189a:	b940      	cbnz	r0, 318ae <disconnected_cb+0x92>
				if (ccc == &sc_ccc) {
   3189c:	455d      	cmp	r5, fp
   3189e:	d102      	bne.n	318a6 <disconnected_cb+0x8a>
					sc_clear(conn);
   318a0:	4630      	mov	r0, r6
   318a2:	f01c fd7a 	bl	4e39a <sc_clear>
				clear_ccc_cfg(cfg);
   318a6:	1e60      	subs	r0, r4, #1
   318a8:	f01c fb70 	bl	4df8c <clear_ccc_cfg>
   318ac:	e7e1      	b.n	31872 <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   318ae:	4649      	mov	r1, r9
   318b0:	4620      	mov	r0, r4
   318b2:	f01c fb24 	bl	4defe <bt_addr_le_copy>
   318b6:	e7dc      	b.n	31872 <disconnected_cb+0x56>
   318b8:	000315d1 	.word	0x000315d1
   318bc:	20000880 	.word	0x20000880

000318c0 <read_ppcp>:
{
   318c0:	b513      	push	{r0, r1, r4, lr}
   318c2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   318c6:	4c0b      	ldr	r4, [pc, #44]	; (318f4 <read_ppcp+0x34>)
{
   318c8:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   318ca:	4a0b      	ldr	r2, [pc, #44]	; (318f8 <read_ppcp+0x38>)
	if (offset > value_len) {
   318cc:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   318ce:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   318d2:	d80b      	bhi.n	318ec <read_ppcp+0x2c>
	len = MIN(buf_len, value_len - offset);
   318d4:	f1c1 0408 	rsb	r4, r1, #8
   318d8:	429c      	cmp	r4, r3
   318da:	bfa8      	it	ge
   318dc:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   318de:	4622      	mov	r2, r4
   318e0:	4469      	add	r1, sp
   318e2:	f01a fa40 	bl	4bd66 <memcpy>
}
   318e6:	4620      	mov	r0, r4
   318e8:	b002      	add	sp, #8
   318ea:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   318ec:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   318f0:	e7f9      	b.n	318e6 <read_ppcp+0x26>
   318f2:	bf00      	nop
   318f4:	000c0006 	.word	0x000c0006
   318f8:	0190001e 	.word	0x0190001e

000318fc <sc_commit>:
{
   318fc:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   318fe:	4809      	ldr	r0, [pc, #36]	; (31924 <sc_commit+0x28>)
   31900:	f06f 0102 	mvn.w	r1, #2
   31904:	f01c fbaf 	bl	4e066 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   31908:	4806      	ldr	r0, [pc, #24]	; (31924 <sc_commit+0x28>)
   3190a:	f01c fa4b 	bl	4dda4 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   3190e:	07c3      	lsls	r3, r0, #31
   31910:	d505      	bpl.n	3191e <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   31912:	4805      	ldr	r0, [pc, #20]	; (31928 <sc_commit+0x2c>)
   31914:	f44f 72a4 	mov.w	r2, #328	; 0x148
   31918:	2300      	movs	r3, #0
   3191a:	f016 fe2d 	bl	48578 <k_work_reschedule>
}
   3191e:	2000      	movs	r0, #0
   31920:	bd08      	pop	{r3, pc}
   31922:	bf00      	nop
   31924:	20002628 	.word	0x20002628
   31928:	200025f8 	.word	0x200025f8

0003192c <sc_indicate_rsp>:
{
   3192c:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   3192e:	f06f 0102 	mvn.w	r1, #2
   31932:	4604      	mov	r4, r0
   31934:	480d      	ldr	r0, [pc, #52]	; (3196c <sc_indicate_rsp+0x40>)
   31936:	f01c fb96 	bl	4e066 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   3193a:	480c      	ldr	r0, [pc, #48]	; (3196c <sc_indicate_rsp+0x40>)
   3193c:	f01c fa32 	bl	4dda4 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   31940:	07c2      	lsls	r2, r0, #31
   31942:	d504      	bpl.n	3194e <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   31944:	480a      	ldr	r0, [pc, #40]	; (31970 <sc_indicate_rsp+0x44>)
   31946:	2200      	movs	r2, #0
   31948:	2300      	movs	r3, #0
   3194a:	f016 fe15 	bl	48578 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   3194e:	4620      	mov	r0, r4
   31950:	f7ff fd4e 	bl	313f0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   31954:	b140      	cbz	r0, 31968 <sc_indicate_rsp+0x3c>
   31956:	7a03      	ldrb	r3, [r0, #8]
   31958:	07db      	lsls	r3, r3, #31
   3195a:	d505      	bpl.n	31968 <sc_indicate_rsp+0x3c>
}
   3195c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   31960:	2101      	movs	r1, #1
   31962:	300c      	adds	r0, #12
   31964:	f01c ba77 	b.w	4de56 <atomic_or>
   31968:	bd10      	pop	{r4, pc}
   3196a:	bf00      	nop
   3196c:	20002628 	.word	0x20002628
   31970:	200025f8 	.word	0x200025f8

00031974 <bt_gatt_init>:
{
   31974:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   31976:	4b26      	ldr	r3, [pc, #152]	; (31a10 <bt_gatt_init+0x9c>)
   31978:	f3bf 8f5b 	dmb	ish
   3197c:	2201      	movs	r2, #1
   3197e:	e853 1f00 	ldrex	r1, [r3]
   31982:	2900      	cmp	r1, #0
   31984:	d103      	bne.n	3198e <bt_gatt_init+0x1a>
   31986:	e843 2000 	strex	r0, r2, [r3]
   3198a:	2800      	cmp	r0, #0
   3198c:	d1f7      	bne.n	3197e <bt_gatt_init+0xa>
   3198e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   31992:	d13b      	bne.n	31a0c <bt_gatt_init+0x98>
   31994:	f3bf 8f5b 	dmb	ish
   31998:	4b1e      	ldr	r3, [pc, #120]	; (31a14 <bt_gatt_init+0xa0>)
   3199a:	e853 1f00 	ldrex	r1, [r3]
   3199e:	2900      	cmp	r1, #0
   319a0:	d103      	bne.n	319aa <bt_gatt_init+0x36>
   319a2:	e843 2000 	strex	r0, r2, [r3]
   319a6:	2800      	cmp	r0, #0
   319a8:	d1f7      	bne.n	3199a <bt_gatt_init+0x26>
   319aa:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   319ae:	d108      	bne.n	319c2 <bt_gatt_init+0x4e>
   319b0:	4919      	ldr	r1, [pc, #100]	; (31a18 <bt_gatt_init+0xa4>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   319b2:	4a1a      	ldr	r2, [pc, #104]	; (31a1c <bt_gatt_init+0xa8>)
   319b4:	880b      	ldrh	r3, [r1, #0]
   319b6:	4c1a      	ldr	r4, [pc, #104]	; (31a20 <bt_gatt_init+0xac>)
	if (!atomic_cas(&service_init, 0, 1)) {
   319b8:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   319ba:	42a2      	cmp	r2, r4
   319bc:	d320      	bcc.n	31a00 <bt_gatt_init+0x8c>
   319be:	b100      	cbz	r0, 319c2 <bt_gatt_init+0x4e>
   319c0:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   319c2:	4b18      	ldr	r3, [pc, #96]	; (31a24 <bt_gatt_init+0xb0>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   319c4:	4918      	ldr	r1, [pc, #96]	; (31a28 <bt_gatt_init+0xb4>)
   319c6:	4819      	ldr	r0, [pc, #100]	; (31a2c <bt_gatt_init+0xb8>)
   319c8:	2200      	movs	r2, #0
	list->tail = NULL;
   319ca:	e9c3 2200 	strd	r2, r2, [r3]
   319ce:	f01f f9ad 	bl	50d2c <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   319d2:	f44f 72a4 	mov.w	r2, #328	; 0x148
   319d6:	2300      	movs	r3, #0
   319d8:	4814      	ldr	r0, [pc, #80]	; (31a2c <bt_gatt_init+0xb8>)
   319da:	f016 fd99 	bl	48510 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   319de:	4914      	ldr	r1, [pc, #80]	; (31a30 <bt_gatt_init+0xbc>)
   319e0:	4814      	ldr	r0, [pc, #80]	; (31a34 <bt_gatt_init+0xc0>)
   319e2:	f01f f9a3 	bl	50d2c <k_work_init_delayable>
   319e6:	2102      	movs	r1, #2
   319e8:	4813      	ldr	r0, [pc, #76]	; (31a38 <bt_gatt_init+0xc4>)
   319ea:	f01c fa34 	bl	4de56 <atomic_or>
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   319ee:	4813      	ldr	r0, [pc, #76]	; (31a3c <bt_gatt_init+0xc8>)
   319f0:	4913      	ldr	r1, [pc, #76]	; (31a40 <bt_gatt_init+0xcc>)
   319f2:	f01f f99b 	bl	50d2c <k_work_init_delayable>
}
   319f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_cb_register(&gatt_conn_cb);
   319fa:	4812      	ldr	r0, [pc, #72]	; (31a44 <bt_gatt_init+0xd0>)
   319fc:	f7fe baae 	b.w	2ff5c <bt_conn_cb_register>
		last_static_handle += svc->attr_count;
   31a00:	6850      	ldr	r0, [r2, #4]
   31a02:	4403      	add	r3, r0
   31a04:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   31a06:	3208      	adds	r2, #8
   31a08:	2001      	movs	r0, #1
   31a0a:	e7d6      	b.n	319ba <bt_gatt_init+0x46>
}
   31a0c:	bd10      	pop	{r4, pc}
   31a0e:	bf00      	nop
   31a10:	20004780 	.word	0x20004780
   31a14:	2000477c 	.word	0x2000477c
   31a18:	200072b4 	.word	0x200072b4
   31a1c:	000518cc 	.word	0x000518cc
   31a20:	000518f4 	.word	0x000518f4
   31a24:	20004784 	.word	0x20004784
   31a28:	00031bd1 	.word	0x00031bd1
   31a2c:	20002580 	.word	0x20002580
   31a30:	00031eb5 	.word	0x00031eb5
   31a34:	200025f8 	.word	0x200025f8
   31a38:	20002628 	.word	0x20002628
   31a3c:	20002530 	.word	0x20002530
   31a40:	0004ee05 	.word	0x0004ee05
   31a44:	20000848 	.word	0x20000848

00031a48 <bt_gatt_attr_get_handle>:
{
   31a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   31a4c:	4603      	mov	r3, r0
   31a4e:	b148      	cbz	r0, 31a64 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   31a50:	8a00      	ldrh	r0, [r0, #16]
   31a52:	b938      	cbnz	r0, 31a64 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   31a54:	4912      	ldr	r1, [pc, #72]	; (31aa0 <bt_gatt_attr_get_handle+0x58>)
   31a56:	f8df e04c 	ldr.w	lr, [pc, #76]	; 31aa4 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   31a5a:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   31a5c:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   31a60:	4571      	cmp	r1, lr
   31a62:	d301      	bcc.n	31a68 <bt_gatt_attr_get_handle+0x20>
}
   31a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   31a68:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   31a6c:	42bb      	cmp	r3, r7
   31a6e:	d304      	bcc.n	31a7a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   31a70:	fb0c 7206 	mla	r2, ip, r6, r7
   31a74:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   31a76:	4293      	cmp	r3, r2
   31a78:	d90e      	bls.n	31a98 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   31a7a:	4434      	add	r4, r6
   31a7c:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   31a7e:	3108      	adds	r1, #8
   31a80:	4614      	mov	r4, r2
   31a82:	e7ed      	b.n	31a60 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   31a84:	fb0c 7805 	mla	r8, ip, r5, r7
   31a88:	4543      	cmp	r3, r8
   31a8a:	d007      	beq.n	31a9c <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   31a8c:	3501      	adds	r5, #1
   31a8e:	1962      	adds	r2, r4, r5
   31a90:	42b5      	cmp	r5, r6
   31a92:	b292      	uxth	r2, r2
   31a94:	d1f6      	bne.n	31a84 <bt_gatt_attr_get_handle+0x3c>
   31a96:	e7f2      	b.n	31a7e <bt_gatt_attr_get_handle+0x36>
   31a98:	2500      	movs	r5, #0
   31a9a:	e7f8      	b.n	31a8e <bt_gatt_attr_get_handle+0x46>
   31a9c:	4610      	mov	r0, r2
   31a9e:	e7e1      	b.n	31a64 <bt_gatt_attr_get_handle+0x1c>
   31aa0:	000518cc 	.word	0x000518cc
   31aa4:	000518f4 	.word	0x000518f4

00031aa8 <bt_gatt_foreach_attr_type>:
{
   31aa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31aac:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   31ab0:	9100      	str	r1, [sp, #0]
   31ab2:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   31ab4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   31ab8:	2d00      	cmp	r5, #0
   31aba:	bf08      	it	eq
   31abc:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   31abe:	4b24      	ldr	r3, [pc, #144]	; (31b50 <bt_gatt_foreach_attr_type+0xa8>)
   31ac0:	881b      	ldrh	r3, [r3, #0]
   31ac2:	4283      	cmp	r3, r0
{
   31ac4:	4607      	mov	r7, r0
   31ac6:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   31ac8:	d23c      	bcs.n	31b44 <bt_gatt_foreach_attr_type+0x9c>
}
   31aca:	b003      	add	sp, #12
   31acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   31ad0:	6873      	ldr	r3, [r6, #4]
   31ad2:	4423      	add	r3, r4
   31ad4:	42bb      	cmp	r3, r7
   31ad6:	d232      	bcs.n	31b3e <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   31ad8:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   31ada:	3608      	adds	r6, #8
   31adc:	4b1d      	ldr	r3, [pc, #116]	; (31b54 <bt_gatt_foreach_attr_type+0xac>)
   31ade:	429e      	cmp	r6, r3
   31ae0:	d3f6      	bcc.n	31ad0 <bt_gatt_foreach_attr_type+0x28>
   31ae2:	e7f2      	b.n	31aca <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   31ae4:	5889      	ldr	r1, [r1, r2]
   31ae6:	9301      	str	r3, [sp, #4]
   31ae8:	4640      	mov	r0, r8
   31aea:	f01a fa2a 	bl	4bf42 <bt_uuid_cmp>
   31aee:	9b01      	ldr	r3, [sp, #4]
   31af0:	b190      	cbz	r0, 31b18 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   31af2:	3401      	adds	r4, #1
   31af4:	f10a 0a01 	add.w	sl, sl, #1
   31af8:	b2a4      	uxth	r4, r4
   31afa:	6873      	ldr	r3, [r6, #4]
   31afc:	4553      	cmp	r3, sl
   31afe:	d9ec      	bls.n	31ada <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   31b00:	9b00      	ldr	r3, [sp, #0]
   31b02:	429c      	cmp	r4, r3
   31b04:	d8e1      	bhi.n	31aca <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   31b06:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   31b08:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   31b0a:	d3f2      	bcc.n	31af2 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   31b0c:	fb0b f20a 	mul.w	r2, fp, sl
   31b10:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   31b12:	f1b8 0f00 	cmp.w	r8, #0
   31b16:	d1e5      	bne.n	31ae4 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   31b18:	f1b9 0f00 	cmp.w	r9, #0
   31b1c:	d10b      	bne.n	31b36 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   31b1e:	3d01      	subs	r5, #1
   31b20:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   31b22:	4618      	mov	r0, r3
   31b24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   31b26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   31b28:	4621      	mov	r1, r4
   31b2a:	4798      	blx	r3
	if (!*num_matches) {
   31b2c:	2d00      	cmp	r5, #0
   31b2e:	d0cc      	beq.n	31aca <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   31b30:	2800      	cmp	r0, #0
   31b32:	d1de      	bne.n	31af2 <bt_gatt_foreach_attr_type+0x4a>
   31b34:	e7c9      	b.n	31aca <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   31b36:	68da      	ldr	r2, [r3, #12]
   31b38:	4591      	cmp	r9, r2
   31b3a:	d1da      	bne.n	31af2 <bt_gatt_foreach_attr_type+0x4a>
   31b3c:	e7ef      	b.n	31b1e <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   31b3e:	f04f 0a00 	mov.w	sl, #0
   31b42:	e7da      	b.n	31afa <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   31b44:	4e04      	ldr	r6, [pc, #16]	; (31b58 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   31b46:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   31b48:	f04f 0b14 	mov.w	fp, #20
   31b4c:	e7c6      	b.n	31adc <bt_gatt_foreach_attr_type+0x34>
   31b4e:	bf00      	nop
   31b50:	200072b4 	.word	0x200072b4
   31b54:	000518f4 	.word	0x000518f4
   31b58:	000518cc 	.word	0x000518cc

00031b5c <db_hash_gen>:
{
   31b5c:	b530      	push	{r4, r5, lr}
   31b5e:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   31b60:	2400      	movs	r4, #0
{
   31b62:	4605      	mov	r5, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   31b64:	aa1c      	add	r2, sp, #112	; 0x70
   31b66:	4669      	mov	r1, sp
   31b68:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   31b6a:	e9cd 4400 	strd	r4, r4, [sp]
   31b6e:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   31b72:	f019 ff65 	bl	4ba40 <tc_cmac_setup>
   31b76:	b308      	cbz	r0, 31bbc <db_hash_gen+0x60>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   31b78:	f64f 71ff 	movw	r1, #65535	; 0xffff
   31b7c:	2001      	movs	r0, #1
   31b7e:	4a10      	ldr	r2, [pc, #64]	; (31bc0 <db_hash_gen+0x64>)
   31b80:	ab04      	add	r3, sp, #16
   31b82:	f01c fd73 	bl	4e66c <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   31b86:	480f      	ldr	r0, [pc, #60]	; (31bc4 <db_hash_gen+0x68>)
   31b88:	a904      	add	r1, sp, #16
   31b8a:	f019 ffee 	bl	4bb6a <tc_cmac_final>
   31b8e:	b1a8      	cbz	r0, 31bbc <db_hash_gen+0x60>
   31b90:	4b0c      	ldr	r3, [pc, #48]	; (31bc4 <db_hash_gen+0x68>)
   31b92:	f103 0210 	add.w	r2, r3, #16
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   31b96:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   31b98:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   31b9a:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   31b9e:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
   31ba2:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   31ba4:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   31ba6:	d1f6      	bne.n	31b96 <db_hash_gen+0x3a>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   31ba8:	b125      	cbz	r5, 31bb4 <db_hash_gen+0x58>
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   31baa:	4906      	ldr	r1, [pc, #24]	; (31bc4 <db_hash_gen+0x68>)
   31bac:	4806      	ldr	r0, [pc, #24]	; (31bc8 <db_hash_gen+0x6c>)
   31bae:	2210      	movs	r2, #16
   31bb0:	f7fa fbb2 	bl	2c318 <settings_save_one>
   31bb4:	4805      	ldr	r0, [pc, #20]	; (31bcc <db_hash_gen+0x70>)
   31bb6:	2104      	movs	r1, #4
   31bb8:	f01c f94d 	bl	4de56 <atomic_or>
}
   31bbc:	b049      	add	sp, #292	; 0x124
   31bbe:	bd30      	pop	{r4, r5, pc}
   31bc0:	0004ddb1 	.word	0x0004ddb1
   31bc4:	20002560 	.word	0x20002560
   31bc8:	00054411 	.word	0x00054411
   31bcc:	20002628 	.word	0x20002628

00031bd0 <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   31bd0:	f06f 0108 	mvn.w	r1, #8
{
   31bd4:	b508      	push	{r3, lr}
   31bd6:	4828      	ldr	r0, [pc, #160]	; (31c78 <db_hash_process+0xa8>)
   31bd8:	f01c fa45 	bl	4e066 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   31bdc:	0701      	lsls	r1, r0, #28
   31bde:	d545      	bpl.n	31c6c <db_hash_process+0x9c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   31be0:	4825      	ldr	r0, [pc, #148]	; (31c78 <db_hash_process+0xa8>)
   31be2:	f01c f8df 	bl	4dda4 <atomic_get>
   31be6:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   31be8:	075a      	lsls	r2, r3, #29
   31bea:	f3c0 0080 	ubfx	r0, r0, #2, #1
   31bee:	d401      	bmi.n	31bf4 <db_hash_process+0x24>
			db_hash_gen(false);
   31bf0:	f7ff ffb4 	bl	31b5c <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   31bf4:	4921      	ldr	r1, [pc, #132]	; (31c7c <db_hash_process+0xac>)
   31bf6:	2210      	movs	r2, #16
   31bf8:	1888      	adds	r0, r1, r2
   31bfa:	f01a f8a4 	bl	4bd46 <memcmp>
   31bfe:	b948      	cbnz	r0, 31c14 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   31c00:	481f      	ldr	r0, [pc, #124]	; (31c80 <db_hash_process+0xb0>)
   31c02:	f01f f8a1 	bl	50d48 <k_work_cancel_delayable>
}
   31c06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   31c0a:	481b      	ldr	r0, [pc, #108]	; (31c78 <db_hash_process+0xa8>)
   31c0c:	f06f 0101 	mvn.w	r1, #1
   31c10:	f01c ba29 	b.w	4e066 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   31c14:	4818      	ldr	r0, [pc, #96]	; (31c78 <db_hash_process+0xa8>)
   31c16:	2101      	movs	r1, #1
   31c18:	f01c f91d 	bl	4de56 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   31c1c:	f010 0f01 	tst.w	r0, #1
   31c20:	4b18      	ldr	r3, [pc, #96]	; (31c84 <db_hash_process+0xb4>)
   31c22:	d113      	bne.n	31c4c <db_hash_process+0x7c>
		gatt_sc.start = start;
   31c24:	4a18      	ldr	r2, [pc, #96]	; (31c88 <db_hash_process+0xb8>)
   31c26:	619a      	str	r2, [r3, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   31c28:	4813      	ldr	r0, [pc, #76]	; (31c78 <db_hash_process+0xa8>)
   31c2a:	f01c f8bb 	bl	4dda4 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   31c2e:	0783      	lsls	r3, r0, #30
   31c30:	d405      	bmi.n	31c3e <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   31c32:	4813      	ldr	r0, [pc, #76]	; (31c80 <db_hash_process+0xb0>)
   31c34:	f44f 72a4 	mov.w	r2, #328	; 0x148
   31c38:	2300      	movs	r3, #0
   31c3a:	f016 fc9d 	bl	48578 <k_work_reschedule>
}
   31c3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   31c42:	490e      	ldr	r1, [pc, #56]	; (31c7c <db_hash_process+0xac>)
   31c44:	4811      	ldr	r0, [pc, #68]	; (31c8c <db_hash_process+0xbc>)
   31c46:	2210      	movs	r2, #16
   31c48:	f7fa bb66 	b.w	2c318 <settings_save_one>
	if (new_start >= *start && new_end <= *end) {
   31c4c:	8b1a      	ldrh	r2, [r3, #24]
   31c4e:	8b58      	ldrh	r0, [r3, #26]
   31c50:	2a01      	cmp	r2, #1
   31c52:	f64f 72ff 	movw	r2, #65535	; 0xffff
   31c56:	d805      	bhi.n	31c64 <db_hash_process+0x94>
   31c58:	4290      	cmp	r0, r2
   31c5a:	d0f0      	beq.n	31c3e <db_hash_process+0x6e>
		*end = new_end;
   31c5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   31c60:	835a      	strh	r2, [r3, #26]
   31c62:	e7e1      	b.n	31c28 <db_hash_process+0x58>
	if (*end < new_end) {
   31c64:	4290      	cmp	r0, r2
		*start = new_start;
   31c66:	8319      	strh	r1, [r3, #24]
	if (*end < new_end) {
   31c68:	d0de      	beq.n	31c28 <db_hash_process+0x58>
   31c6a:	e7f7      	b.n	31c5c <db_hash_process+0x8c>
}
   31c6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	db_hash_gen(true);
   31c70:	2001      	movs	r0, #1
   31c72:	f7ff bf73 	b.w	31b5c <db_hash_gen>
   31c76:	bf00      	nop
   31c78:	20002628 	.word	0x20002628
   31c7c:	20002560 	.word	0x20002560
   31c80:	200025f8 	.word	0x200025f8
   31c84:	200025d8 	.word	0x200025d8
   31c88:	ffff0001 	.word	0xffff0001
   31c8c:	00054411 	.word	0x00054411

00031c90 <ccc_set_direct>:
{
   31c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31c94:	b0b8      	sub	sp, #224	; 0xe0
   31c96:	460c      	mov	r4, r1
   31c98:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   31c9a:	4921      	ldr	r1, [pc, #132]	; (31d20 <ccc_set_direct+0x90>)
   31c9c:	983e      	ldr	r0, [sp, #248]	; 0xf8
   31c9e:	466a      	mov	r2, sp
{
   31ca0:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   31ca2:	f018 fd6b 	bl	4a77c <settings_name_steq>
   31ca6:	2800      	cmp	r0, #0
   31ca8:	d037      	beq.n	31d1a <ccc_set_direct+0x8a>
		return ccc_set(name, len, read_cb, cb_arg);
   31caa:	9d00      	ldr	r5, [sp, #0]
		settings_name_next(name, &next);
   31cac:	a901      	add	r1, sp, #4
   31cae:	4628      	mov	r0, r5
   31cb0:	f018 fd88 	bl	4a7c4 <settings_name_next>
		if (!name) {
   31cb4:	b165      	cbz	r5, 31cd0 <ccc_set_direct+0x40>
		} else if (!next) {
   31cb6:	9801      	ldr	r0, [sp, #4]
   31cb8:	b970      	cbnz	r0, 31cd8 <ccc_set_direct+0x48>
		err = bt_settings_decode_key(name, &addr);
   31cba:	f10d 0808 	add.w	r8, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   31cbe:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   31cc0:	4628      	mov	r0, r5
   31cc2:	4641      	mov	r1, r8
			load.addr_with_id.id = BT_ID_DEFAULT;
   31cc4:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   31cc8:	f01a f915 	bl	4bef6 <bt_settings_decode_key>
		if (err) {
   31ccc:	4605      	mov	r5, r0
   31cce:	b150      	cbz	r0, 31ce6 <ccc_set_direct+0x56>
			return -EINVAL;
   31cd0:	f06f 0415 	mvn.w	r4, #21
   31cd4:	4625      	mov	r5, r4
   31cd6:	e01a      	b.n	31d0e <ccc_set_direct+0x7e>
			unsigned long next_id = strtoul(next, NULL, 10);
   31cd8:	220a      	movs	r2, #10
   31cda:	2100      	movs	r1, #0
   31cdc:	f019 ff8b 	bl	4bbf6 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   31ce0:	2800      	cmp	r0, #0
   31ce2:	d0ea      	beq.n	31cba <ccc_set_direct+0x2a>
   31ce4:	e7f4      	b.n	31cd0 <ccc_set_direct+0x40>
		load.addr_with_id.addr = &addr;
   31ce6:	f8cd 8010 	str.w	r8, [sp, #16]
		if (len_rd) {
   31cea:	b1a4      	cbz	r4, 31d16 <ccc_set_direct+0x86>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   31cec:	22c0      	movs	r2, #192	; 0xc0
   31cee:	a908      	add	r1, sp, #32
   31cf0:	4638      	mov	r0, r7
   31cf2:	47b0      	blx	r6
			if (len < 0) {
   31cf4:	1e04      	subs	r4, r0, #0
   31cf6:	dbed      	blt.n	31cd4 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   31cf8:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   31cfa:	ab08      	add	r3, sp, #32
			load.count = len / sizeof(*ccc_store);
   31cfc:	e9cd 3406 	strd	r3, r4, [sp, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   31d00:	4a08      	ldr	r2, [pc, #32]	; (31d24 <ccc_set_direct+0x94>)
   31d02:	ab04      	add	r3, sp, #16
   31d04:	f64f 71ff 	movw	r1, #65535	; 0xffff
   31d08:	2001      	movs	r0, #1
   31d0a:	f01c fcaf 	bl	4e66c <bt_gatt_foreach_attr>
}
   31d0e:	4628      	mov	r0, r5
   31d10:	b038      	add	sp, #224	; 0xe0
   31d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31d16:	4623      	mov	r3, r4
   31d18:	e7f0      	b.n	31cfc <ccc_set_direct+0x6c>
			return -EINVAL;
   31d1a:	f06f 0515 	mvn.w	r5, #21
   31d1e:	e7f6      	b.n	31d0e <ccc_set_direct+0x7e>
   31d20:	00054419 	.word	0x00054419
   31d24:	000314e9 	.word	0x000314e9

00031d28 <gatt_indicate>:
{
   31d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   31d2c:	4615      	mov	r5, r2
   31d2e:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   31d30:	2214      	movs	r2, #20
   31d32:	6869      	ldr	r1, [r5, #4]
{
   31d34:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   31d36:	f01c fca4 	bl	4e682 <bt_gatt_check_perm>
   31d3a:	4607      	mov	r7, r0
   31d3c:	2800      	cmp	r0, #0
   31d3e:	d13b      	bne.n	31db8 <gatt_indicate+0x90>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   31d40:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   31d44:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   31d46:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   31d48:	f7ff fa1c 	bl	31184 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   31d4c:	3602      	adds	r6, #2
	if (!req) {
   31d4e:	4604      	mov	r4, r0
   31d50:	b178      	cbz	r0, 31d72 <gatt_indicate+0x4a>
	req->func = func;
   31d52:	4b1b      	ldr	r3, [pc, #108]	; (31dc0 <gatt_indicate+0x98>)
	req->len = len;
   31d54:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   31d56:	211d      	movs	r1, #29
   31d58:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   31d5a:	60c7      	str	r7, [r0, #12]
	req->func = func;
   31d5c:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   31d5e:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   31d60:	4632      	mov	r2, r6
   31d62:	4640      	mov	r0, r8
   31d64:	f01b febe 	bl	4dae4 <bt_att_create_pdu>
	if (!buf) {
   31d68:	4606      	mov	r6, r0
   31d6a:	b938      	cbnz	r0, 31d7c <gatt_indicate+0x54>
		bt_att_req_free(req);
   31d6c:	4620      	mov	r0, r4
   31d6e:	f7ff fa2b 	bl	311c8 <bt_att_req_free>
		return -ENOMEM;
   31d72:	f06f 050b 	mvn.w	r5, #11
}
   31d76:	4628      	mov	r0, r5
   31d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   31d7c:	f100 0a08 	add.w	sl, r0, #8
   31d80:	2102      	movs	r1, #2
   31d82:	4650      	mov	r0, sl
   31d84:	f01d ffd0 	bl	4fd28 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   31d88:	4607      	mov	r7, r0
   31d8a:	8aa9      	ldrh	r1, [r5, #20]
   31d8c:	f827 9b02 	strh.w	r9, [r7], #2
   31d90:	4650      	mov	r0, sl
   31d92:	f01d ffc9 	bl	4fd28 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   31d96:	8aaa      	ldrh	r2, [r5, #20]
   31d98:	6929      	ldr	r1, [r5, #16]
   31d9a:	4638      	mov	r0, r7
   31d9c:	f019 ffe3 	bl	4bd66 <memcpy>
	req->buf = buf;
   31da0:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   31da2:	4621      	mov	r1, r4
   31da4:	4640      	mov	r0, r8
   31da6:	f01b ff9e 	bl	4dce6 <bt_att_req_send>
	if (err) {
   31daa:	4605      	mov	r5, r0
   31dac:	2800      	cmp	r0, #0
   31dae:	d0e2      	beq.n	31d76 <gatt_indicate+0x4e>
		bt_att_req_free(req);
   31db0:	4620      	mov	r0, r4
   31db2:	f7ff fa09 	bl	311c8 <bt_att_req_free>
   31db6:	e7de      	b.n	31d76 <gatt_indicate+0x4e>
		return -EPERM;
   31db8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   31dbc:	e7db      	b.n	31d76 <gatt_indicate+0x4e>
   31dbe:	bf00      	nop
   31dc0:	0004dd73 	.word	0x0004dd73

00031dc4 <bt_gatt_indicate>:
{
   31dc4:	b530      	push	{r4, r5, lr}
   31dc6:	4604      	mov	r4, r0
   31dc8:	b08b      	sub	sp, #44	; 0x2c
   31dca:	4837      	ldr	r0, [pc, #220]	; (31ea8 <bt_gatt_indicate+0xe4>)
   31dcc:	f01b ffea 	bl	4dda4 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   31dd0:	0782      	lsls	r2, r0, #30
{
   31dd2:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   31dd4:	d561      	bpl.n	31e9a <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   31dd6:	b114      	cbz	r4, 31dde <bt_gatt_indicate+0x1a>
   31dd8:	7b63      	ldrb	r3, [r4, #13]
   31dda:	2b07      	cmp	r3, #7
   31ddc:	d160      	bne.n	31ea0 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   31dde:	6868      	ldr	r0, [r5, #4]
   31de0:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   31de2:	f7ff fe31 	bl	31a48 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   31de6:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   31de8:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   31dec:	b33a      	cbz	r2, 31e3e <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   31dee:	a905      	add	r1, sp, #20
   31df0:	9102      	str	r1, [sp, #8]
   31df2:	492e      	ldr	r1, [pc, #184]	; (31eac <bt_gatt_indicate+0xe8>)
   31df4:	9101      	str	r1, [sp, #4]
   31df6:	2101      	movs	r1, #1
	found->attr = NULL;
   31df8:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   31dfa:	9100      	str	r1, [sp, #0]
   31dfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   31e00:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   31e02:	f7ff fe51 	bl	31aa8 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   31e06:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   31e08:	b91b      	cbnz	r3, 31e12 <bt_gatt_indicate+0x4e>
			return -ENOENT;
   31e0a:	f06f 0001 	mvn.w	r0, #1
}
   31e0e:	b00b      	add	sp, #44	; 0x2c
   31e10:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   31e12:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   31e14:	9b05      	ldr	r3, [sp, #20]
   31e16:	6818      	ldr	r0, [r3, #0]
   31e18:	2300      	movs	r3, #0
   31e1a:	f88d 3010 	strb.w	r3, [sp, #16]
   31e1e:	a904      	add	r1, sp, #16
   31e20:	f642 0303 	movw	r3, #10243	; 0x2803
   31e24:	f8ad 3012 	strh.w	r3, [sp, #18]
   31e28:	f01a f88b 	bl	4bf42 <bt_uuid_cmp>
   31e2c:	b970      	cbnz	r0, 31e4c <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   31e2e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   31e30:	68c3      	ldr	r3, [r0, #12]
   31e32:	799b      	ldrb	r3, [r3, #6]
   31e34:	069b      	lsls	r3, r3, #26
   31e36:	d405      	bmi.n	31e44 <bt_gatt_indicate+0x80>
			return -EINVAL;
   31e38:	f06f 0015 	mvn.w	r0, #21
   31e3c:	e7e7      	b.n	31e0e <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   31e3e:	2800      	cmp	r0, #0
   31e40:	d1e8      	bne.n	31e14 <bt_gatt_indicate+0x50>
   31e42:	e7e2      	b.n	31e0a <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   31e44:	f01c fbc4 	bl	4e5d0 <bt_gatt_attr_value_handle>
   31e48:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   31e4c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   31e50:	b13c      	cbz	r4, 31e62 <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   31e52:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   31e54:	4601      	mov	r1, r0
		params->_ref = 1;
   31e56:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   31e58:	462a      	mov	r2, r5
   31e5a:	4620      	mov	r0, r4
   31e5c:	f7ff ff64 	bl	31d28 <gatt_indicate>
   31e60:	e7d5      	b.n	31e0e <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   31e62:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   31e66:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   31e68:	2302      	movs	r3, #2
   31e6a:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31e6e:	f642 1302 	movw	r3, #10498	; 0x2902
   31e72:	f8ad 3012 	strh.w	r3, [sp, #18]
   31e76:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   31e78:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31e7a:	9302      	str	r3, [sp, #8]
   31e7c:	4b0c      	ldr	r3, [pc, #48]	; (31eb0 <bt_gatt_indicate+0xec>)
   31e7e:	9301      	str	r3, [sp, #4]
   31e80:	2301      	movs	r3, #1
   31e82:	9300      	str	r3, [sp, #0]
   31e84:	aa04      	add	r2, sp, #16
   31e86:	4623      	mov	r3, r4
   31e88:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   31e8c:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31e8e:	f88d 4010 	strb.w	r4, [sp, #16]
   31e92:	f7ff fe09 	bl	31aa8 <bt_gatt_foreach_attr_type>
	return data.err;
   31e96:	9807      	ldr	r0, [sp, #28]
   31e98:	e7b9      	b.n	31e0e <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   31e9a:	f06f 000a 	mvn.w	r0, #10
   31e9e:	e7b6      	b.n	31e0e <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   31ea0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   31ea4:	e7b3      	b.n	31e0e <bt_gatt_indicate+0x4a>
   31ea6:	bf00      	nop
   31ea8:	200000fc 	.word	0x200000fc
   31eac:	0004dd99 	.word	0x0004dd99
   31eb0:	00031ff9 	.word	0x00031ff9

00031eb4 <sc_process>:
{
   31eb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   31eb6:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   31eba:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   31ebc:	f850 3c08 	ldr.w	r3, [r0, #-8]
   31ec0:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   31ec2:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   31ec6:	f06f 0101 	mvn.w	r1, #1
   31eca:	4628      	mov	r0, r5
   31ecc:	f01c f8cb 	bl	4e066 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   31ed0:	4b0d      	ldr	r3, [pc, #52]	; (31f08 <sc_process+0x54>)
   31ed2:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   31ed6:	4b0d      	ldr	r3, [pc, #52]	; (31f0c <sc_process+0x58>)
   31ed8:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   31edc:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   31ede:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   31ee0:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   31ee4:	2304      	movs	r3, #4
	sc->start = 0U;
   31ee6:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   31eea:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   31eee:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   31ef2:	4631      	mov	r1, r6
   31ef4:	f7ff ff66 	bl	31dc4 <bt_gatt_indicate>
   31ef8:	b918      	cbnz	r0, 31f02 <sc_process+0x4e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   31efa:	2102      	movs	r1, #2
   31efc:	4628      	mov	r0, r5
   31efe:	f01b ffaa 	bl	4de56 <atomic_or>
}
   31f02:	b002      	add	sp, #8
   31f04:	bd70      	pop	{r4, r5, r6, pc}
   31f06:	bf00      	nop
   31f08:	000529dc 	.word	0x000529dc
   31f0c:	0003192d 	.word	0x0003192d

00031f10 <bt_gatt_notify_cb>:
{
   31f10:	b530      	push	{r4, r5, lr}
   31f12:	4604      	mov	r4, r0
   31f14:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   31f16:	4835      	ldr	r0, [pc, #212]	; (31fec <bt_gatt_notify_cb+0xdc>)
   31f18:	f01b ff44 	bl	4dda4 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   31f1c:	0782      	lsls	r2, r0, #30
{
   31f1e:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   31f20:	d55d      	bpl.n	31fde <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   31f22:	b114      	cbz	r4, 31f2a <bt_gatt_notify_cb+0x1a>
   31f24:	7b63      	ldrb	r3, [r4, #13]
   31f26:	2b07      	cmp	r3, #7
   31f28:	d15c      	bne.n	31fe4 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   31f2a:	6868      	ldr	r0, [r5, #4]
   31f2c:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   31f2e:	f7ff fd8b 	bl	31a48 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   31f32:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   31f34:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   31f38:	b33a      	cbz	r2, 31f8a <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   31f3a:	a905      	add	r1, sp, #20
   31f3c:	9102      	str	r1, [sp, #8]
   31f3e:	492c      	ldr	r1, [pc, #176]	; (31ff0 <bt_gatt_notify_cb+0xe0>)
   31f40:	9101      	str	r1, [sp, #4]
   31f42:	2101      	movs	r1, #1
	found->attr = NULL;
   31f44:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   31f46:	9100      	str	r1, [sp, #0]
   31f48:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   31f4c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   31f4e:	f7ff fdab 	bl	31aa8 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   31f52:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   31f54:	b91b      	cbnz	r3, 31f5e <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   31f56:	f06f 0001 	mvn.w	r0, #1
}
   31f5a:	b00b      	add	sp, #44	; 0x2c
   31f5c:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   31f5e:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   31f60:	9b05      	ldr	r3, [sp, #20]
   31f62:	6818      	ldr	r0, [r3, #0]
   31f64:	2300      	movs	r3, #0
   31f66:	f88d 3010 	strb.w	r3, [sp, #16]
   31f6a:	a904      	add	r1, sp, #16
   31f6c:	f642 0303 	movw	r3, #10243	; 0x2803
   31f70:	f8ad 3012 	strh.w	r3, [sp, #18]
   31f74:	f019 ffe5 	bl	4bf42 <bt_uuid_cmp>
   31f78:	b970      	cbnz	r0, 31f98 <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   31f7a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   31f7c:	68c3      	ldr	r3, [r0, #12]
   31f7e:	799b      	ldrb	r3, [r3, #6]
   31f80:	06db      	lsls	r3, r3, #27
   31f82:	d405      	bmi.n	31f90 <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   31f84:	f06f 0015 	mvn.w	r0, #21
   31f88:	e7e7      	b.n	31f5a <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   31f8a:	2800      	cmp	r0, #0
   31f8c:	d1e8      	bne.n	31f60 <bt_gatt_notify_cb+0x50>
   31f8e:	e7e2      	b.n	31f56 <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   31f90:	f01c fb1e 	bl	4e5d0 <bt_gatt_attr_value_handle>
   31f94:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   31f98:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   31f9c:	b12c      	cbz	r4, 31faa <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   31f9e:	4601      	mov	r1, r0
   31fa0:	462a      	mov	r2, r5
   31fa2:	4620      	mov	r0, r4
   31fa4:	f01c fb98 	bl	4e6d8 <gatt_notify>
   31fa8:	e7d7      	b.n	31f5a <bt_gatt_notify_cb+0x4a>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31faa:	f642 1202 	movw	r2, #10498	; 0x2902
   31fae:	f8ad 2012 	strh.w	r2, [sp, #18]
   31fb2:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   31fb4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31fb8:	9202      	str	r2, [sp, #8]
   31fba:	4a0e      	ldr	r2, [pc, #56]	; (31ff4 <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
   31fbc:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   31fbe:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31fc0:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   31fc4:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31fc8:	aa04      	add	r2, sp, #16
   31fca:	4623      	mov	r3, r4
   31fcc:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   31fd0:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31fd2:	f88d 4010 	strb.w	r4, [sp, #16]
   31fd6:	f7ff fd67 	bl	31aa8 <bt_gatt_foreach_attr_type>
	return data.err;
   31fda:	9807      	ldr	r0, [sp, #28]
   31fdc:	e7bd      	b.n	31f5a <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   31fde:	f06f 000a 	mvn.w	r0, #10
   31fe2:	e7ba      	b.n	31f5a <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   31fe4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   31fe8:	e7b7      	b.n	31f5a <bt_gatt_notify_cb+0x4a>
   31fea:	bf00      	nop
   31fec:	200000fc 	.word	0x200000fc
   31ff0:	0004dd99 	.word	0x0004dd99
   31ff4:	00031ff9 	.word	0x00031ff9

00031ff8 <notify_cb>:
{
   31ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   31ffc:	4b3d      	ldr	r3, [pc, #244]	; (320f4 <notify_cb+0xfc>)
{
   31ffe:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   32000:	6882      	ldr	r2, [r0, #8]
   32002:	429a      	cmp	r2, r3
{
   32004:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   32006:	d005      	beq.n	32014 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   32008:	f04f 0901 	mov.w	r9, #1
}
   3200c:	4648      	mov	r0, r9
   3200e:	b003      	add	sp, #12
   32010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   32014:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   32018:	4b37      	ldr	r3, [pc, #220]	; (320f8 <notify_cb+0x100>)
   3201a:	459a      	cmp	sl, r3
   3201c:	d018      	beq.n	32050 <notify_cb+0x58>
   3201e:	f10a 0701 	add.w	r7, sl, #1
   32022:	f10a 0b3d 	add.w	fp, sl, #61	; 0x3d
		if (cfg->value != data->type) {
   32026:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   3202a:	89ab      	ldrh	r3, [r5, #12]
   3202c:	429a      	cmp	r2, r3
   3202e:	d10b      	bne.n	32048 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   32030:	f817 0c01 	ldrb.w	r0, [r7, #-1]
   32034:	4639      	mov	r1, r7
   32036:	f7fd ffb5 	bl	2ffa4 <bt_conn_lookup_addr_le>
		if (!conn) {
   3203a:	4604      	mov	r4, r0
   3203c:	b120      	cbz	r0, 32048 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
   3203e:	7b43      	ldrb	r3, [r0, #13]
   32040:	2b07      	cmp	r3, #7
   32042:	d029      	beq.n	32098 <notify_cb+0xa0>
			bt_conn_unref(conn);
   32044:	f01a fec9 	bl	4cdda <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   32048:	370a      	adds	r7, #10
   3204a:	45bb      	cmp	fp, r7
   3204c:	d1eb      	bne.n	32026 <notify_cb+0x2e>
   3204e:	e7db      	b.n	32008 <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   32050:	2600      	movs	r6, #0
   32052:	4c2a      	ldr	r4, [pc, #168]	; (320fc <notify_cb+0x104>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   32054:	4637      	mov	r7, r6
   32056:	4669      	mov	r1, sp
   32058:	4620      	mov	r0, r4
   3205a:	9700      	str	r7, [sp, #0]
   3205c:	f8cd 7003 	str.w	r7, [sp, #3]
   32060:	f01b ff08 	bl	4de74 <bt_addr_le_cmp>
   32064:	b178      	cbz	r0, 32086 <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   32066:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   3206a:	2207      	movs	r2, #7
   3206c:	4621      	mov	r1, r4
   3206e:	f7fd ffbd 	bl	2ffec <bt_conn_lookup_state_le>
			if (!conn) {
   32072:	b970      	cbnz	r0, 32092 <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
   32074:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   32076:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   3207a:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   3207c:	4621      	mov	r1, r4
   3207e:	8853      	ldrh	r3, [r2, #2]
   32080:	8812      	ldrh	r2, [r2, #0]
   32082:	f01b ffbc 	bl	4dffe <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   32086:	3601      	adds	r6, #1
   32088:	2e0c      	cmp	r6, #12
   3208a:	f104 040c 	add.w	r4, r4, #12
   3208e:	d1e2      	bne.n	32056 <notify_cb+0x5e>
   32090:	e7c5      	b.n	3201e <notify_cb+0x26>
			bt_conn_unref(conn);
   32092:	f01a fea2 	bl	4cdda <bt_conn_unref>
   32096:	e7f6      	b.n	32086 <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   32098:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
   3209c:	b123      	cbz	r3, 320a8 <notify_cb+0xb0>
   3209e:	4641      	mov	r1, r8
   320a0:	4798      	blx	r3
   320a2:	b908      	cbnz	r0, 320a8 <notify_cb+0xb0>
			bt_conn_unref(conn);
   320a4:	4620      	mov	r0, r4
   320a6:	e7cd      	b.n	32044 <notify_cb+0x4c>
		if (bt_gatt_check_perm(conn, attr,
   320a8:	2214      	movs	r2, #20
   320aa:	4641      	mov	r1, r8
   320ac:	4620      	mov	r0, r4
   320ae:	f01c fae8 	bl	4e682 <bt_gatt_check_perm>
   320b2:	4681      	mov	r9, r0
   320b4:	2800      	cmp	r0, #0
   320b6:	d1c7      	bne.n	32048 <notify_cb+0x50>
		if (data->type == BT_GATT_CCC_INDICATE) {
   320b8:	89ab      	ldrh	r3, [r5, #12]
			err = gatt_indicate(conn, data->handle,
   320ba:	88a9      	ldrh	r1, [r5, #4]
   320bc:	692a      	ldr	r2, [r5, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   320be:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   320c0:	4620      	mov	r0, r4
		if (data->type == BT_GATT_CCC_INDICATE) {
   320c2:	d10d      	bne.n	320e0 <notify_cb+0xe8>
			err = gatt_indicate(conn, data->handle,
   320c4:	f7ff fe30 	bl	31d28 <gatt_indicate>
			if (err == 0) {
   320c8:	4606      	mov	r6, r0
   320ca:	b960      	cbnz	r0, 320e6 <notify_cb+0xee>
				data->ind_params->_ref++;
   320cc:	692a      	ldr	r2, [r5, #16]
   320ce:	7d93      	ldrb	r3, [r2, #22]
   320d0:	3301      	adds	r3, #1
   320d2:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   320d4:	4620      	mov	r0, r4
   320d6:	f01a fe80 	bl	4cdda <bt_conn_unref>
		data->err = 0;
   320da:	2300      	movs	r3, #0
   320dc:	60ab      	str	r3, [r5, #8]
   320de:	e7b3      	b.n	32048 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   320e0:	f01c fafa 	bl	4e6d8 <gatt_notify>
   320e4:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   320e6:	4620      	mov	r0, r4
   320e8:	f01a fe77 	bl	4cdda <bt_conn_unref>
		if (err < 0) {
   320ec:	2e00      	cmp	r6, #0
   320ee:	daf4      	bge.n	320da <notify_cb+0xe2>
   320f0:	e78c      	b.n	3200c <notify_cb+0x14>
   320f2:	bf00      	nop
   320f4:	000315d1 	.word	0x000315d1
   320f8:	20000880 	.word	0x20000880
   320fc:	20007225 	.word	0x20007225

00032100 <update_ccc>:
{
   32100:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   32104:	4b31      	ldr	r3, [pc, #196]	; (321cc <update_ccc+0xcc>)
	struct bt_conn *conn = data->conn;
   32106:	6814      	ldr	r4, [r2, #0]
{
   32108:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   3210a:	6882      	ldr	r2, [r0, #8]
   3210c:	429a      	cmp	r2, r3
{
   3210e:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   32110:	d158      	bne.n	321c4 <update_ccc+0xc4>
	ccc = attr->user_data;
   32112:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   32116:	f108 0501 	add.w	r5, r8, #1
   3211a:	f108 093d 	add.w	r9, r8, #61	; 0x3d
		if (!cfg->value ||
   3211e:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   32122:	b1f3      	cbz	r3, 32162 <update_ccc+0x62>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   32124:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   32128:	462a      	mov	r2, r5
   3212a:	4620      	mov	r0, r4
   3212c:	f01a fefe 	bl	4cf2c <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   32130:	b1b8      	cbz	r0, 32162 <update_ccc+0x62>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   32132:	222a      	movs	r2, #42	; 0x2a
   32134:	4631      	mov	r1, r6
   32136:	4620      	mov	r0, r4
   32138:	f01c faa3 	bl	4e682 <bt_gatt_check_perm>
		if (err) {
   3213c:	b1a8      	cbz	r0, 3216a <update_ccc+0x6a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   3213e:	2803      	cmp	r0, #3
   32140:	d00f      	beq.n	32162 <update_ccc+0x62>
			sec = BT_SECURITY_L2;
   32142:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   32144:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   32146:	bf0c      	ite	eq
   32148:	f04f 0a03 	moveq.w	sl, #3
   3214c:	f04f 0a02 	movne.w	sl, #2
			    bt_conn_get_security(conn) < sec) {
   32150:	f01a feea 	bl	4cf28 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   32154:	4582      	cmp	sl, r0
   32156:	d908      	bls.n	3216a <update_ccc+0x6a>
				if (data->sec < sec) {
   32158:	793b      	ldrb	r3, [r7, #4]
   3215a:	4553      	cmp	r3, sl
   3215c:	d201      	bcs.n	32162 <update_ccc+0x62>
					data->sec = sec;
   3215e:	f887 a004 	strb.w	sl, [r7, #4]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   32162:	350a      	adds	r5, #10
   32164:	454d      	cmp	r5, r9
   32166:	d1da      	bne.n	3211e <update_ccc+0x1e>
   32168:	e02c      	b.n	321c4 <update_ccc+0xc4>
		gatt_ccc_changed(attr, ccc);
   3216a:	4641      	mov	r1, r8
   3216c:	4630      	mov	r0, r6
   3216e:	f01b fde9 	bl	4dd44 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   32172:	4b17      	ldr	r3, [pc, #92]	; (321d0 <update_ccc+0xd0>)
   32174:	4598      	cmp	r8, r3
   32176:	d125      	bne.n	321c4 <update_ccc+0xc4>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   32178:	7a20      	ldrb	r0, [r4, #8]
   3217a:	f104 0188 	add.w	r1, r4, #136	; 0x88
   3217e:	f7ff f959 	bl	31434 <find_sc_cfg>
	if (!cfg) {
   32182:	b1f8      	cbz	r0, 321c4 <update_ccc+0xc4>
	if (!(cfg->data.start || cfg->data.end)) {
   32184:	8902      	ldrh	r2, [r0, #8]
   32186:	8943      	ldrh	r3, [r0, #10]
   32188:	ea53 0102 	orrs.w	r1, r3, r2
   3218c:	d01a      	beq.n	321c4 <update_ccc+0xc4>
	index = bt_conn_index(conn);
   3218e:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   32190:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   32194:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   32198:	f7fd fdd0 	bl	2fd3c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   3219c:	490d      	ldr	r1, [pc, #52]	; (321d4 <update_ccc+0xd4>)
   3219e:	4a0e      	ldr	r2, [pc, #56]	; (321d8 <update_ccc+0xd8>)
   321a0:	2318      	movs	r3, #24
   321a2:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   321a6:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   321a8:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   321aa:	4a0c      	ldr	r2, [pc, #48]	; (321dc <update_ccc+0xdc>)
   321ac:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   321ae:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   321b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   321b4:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   321b6:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   321b8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   321bc:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   321be:	4620      	mov	r0, r4
   321c0:	f7ff fe00 	bl	31dc4 <bt_gatt_indicate>
}
   321c4:	2001      	movs	r0, #1
   321c6:	b002      	add	sp, #8
   321c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   321cc:	000315d1 	.word	0x000315d1
   321d0:	20000880 	.word	0x20000880
   321d4:	2000462c 	.word	0x2000462c
   321d8:	000529dc 	.word	0x000529dc
   321dc:	0004e563 	.word	0x0004e563

000321e0 <bt_gatt_discover>:
{
   321e0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   321e2:	7b43      	ldrb	r3, [r0, #13]
   321e4:	2b07      	cmp	r3, #7
{
   321e6:	b086      	sub	sp, #24
   321e8:	4605      	mov	r5, r0
   321ea:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
   321ec:	f040 8099 	bne.w	32322 <bt_gatt_discover+0x142>
	switch (params->type) {
   321f0:	7c0b      	ldrb	r3, [r1, #16]
   321f2:	2b06      	cmp	r3, #6
   321f4:	d867      	bhi.n	322c6 <bt_gatt_discover+0xe6>
   321f6:	e8df f003 	tbb	[pc, r3]
   321fa:	0404      	.short	0x0404
   321fc:	8d595151 	.word	0x8d595151
   32200:	20          	.byte	0x20
   32201:	00          	.byte	0x00
		if (params->uuid) {
   32202:	680b      	ldr	r3, [r1, #0]
   32204:	b18b      	cbz	r3, 3222a <bt_gatt_discover+0x4a>
	switch (params->uuid->type) {
   32206:	781b      	ldrb	r3, [r3, #0]
   32208:	b16b      	cbz	r3, 32226 <bt_gatt_discover+0x46>
   3220a:	2b02      	cmp	r3, #2
   3220c:	d15b      	bne.n	322c6 <bt_gatt_discover+0xe6>
   3220e:	2316      	movs	r3, #22
	return gatt_req_send(conn, gatt_find_type_rsp, params,
   32210:	9301      	str	r3, [sp, #4]
   32212:	2306      	movs	r3, #6
   32214:	9300      	str	r3, [sp, #0]
   32216:	4944      	ldr	r1, [pc, #272]	; (32328 <bt_gatt_discover+0x148>)
   32218:	4b44      	ldr	r3, [pc, #272]	; (3232c <bt_gatt_discover+0x14c>)
   3221a:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   3221c:	4628      	mov	r0, r5
   3221e:	f01b ff69 	bl	4e0f4 <gatt_req_send>
}
   32222:	b006      	add	sp, #24
   32224:	bd70      	pop	{r4, r5, r6, pc}
		len += BT_UUID_SIZE_16;
   32226:	2308      	movs	r3, #8
   32228:	e7f2      	b.n	32210 <bt_gatt_discover+0x30>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   3222a:	2310      	movs	r3, #16
   3222c:	2104      	movs	r1, #4
   3222e:	e9cd 3100 	strd	r3, r1, [sp]
   32232:	4622      	mov	r2, r4
   32234:	4b3e      	ldr	r3, [pc, #248]	; (32330 <bt_gatt_discover+0x150>)
   32236:	493f      	ldr	r1, [pc, #252]	; (32334 <bt_gatt_discover+0x154>)
   32238:	e7f0      	b.n	3221c <bt_gatt_discover+0x3c>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   3223a:	6808      	ldr	r0, [r1, #0]
   3223c:	2800      	cmp	r0, #0
   3223e:	d042      	beq.n	322c6 <bt_gatt_discover+0xe6>
   32240:	7806      	ldrb	r6, [r0, #0]
   32242:	2e00      	cmp	r6, #0
   32244:	d13f      	bne.n	322c6 <bt_gatt_discover+0xe6>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   32246:	f44f 5324 	mov.w	r3, #10496	; 0x2900
   3224a:	a902      	add	r1, sp, #8
   3224c:	f88d 6008 	strb.w	r6, [sp, #8]
   32250:	f8ad 300a 	strh.w	r3, [sp, #10]
   32254:	f019 fe75 	bl	4bf42 <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   32258:	b300      	cbz	r0, 3229c <bt_gatt_discover+0xbc>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   3225a:	f642 1302 	movw	r3, #10498	; 0x2902
   3225e:	6820      	ldr	r0, [r4, #0]
   32260:	f88d 600c 	strb.w	r6, [sp, #12]
   32264:	a903      	add	r1, sp, #12
   32266:	f8ad 300e 	strh.w	r3, [sp, #14]
   3226a:	f019 fe6a 	bl	4bf42 <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   3226e:	b1a8      	cbz	r0, 3229c <bt_gatt_discover+0xbc>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   32270:	f642 1303 	movw	r3, #10499	; 0x2903
   32274:	6820      	ldr	r0, [r4, #0]
   32276:	f88d 6010 	strb.w	r6, [sp, #16]
   3227a:	a904      	add	r1, sp, #16
   3227c:	f8ad 3012 	strh.w	r3, [sp, #18]
   32280:	f019 fe5f 	bl	4bf42 <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   32284:	b150      	cbz	r0, 3229c <bt_gatt_discover+0xbc>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
   32286:	f642 1304 	movw	r3, #10500	; 0x2904
   3228a:	6820      	ldr	r0, [r4, #0]
   3228c:	f88d 6014 	strb.w	r6, [sp, #20]
   32290:	a905      	add	r1, sp, #20
   32292:	f8ad 3016 	strh.w	r3, [sp, #22]
   32296:	f019 fe54 	bl	4bf42 <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   3229a:	b9a0      	cbnz	r0, 322c6 <bt_gatt_discover+0xe6>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
   3229c:	2308      	movs	r3, #8
   3229e:	2204      	movs	r2, #4
   322a0:	e9cd 3200 	strd	r3, r2, [sp]
   322a4:	4924      	ldr	r1, [pc, #144]	; (32338 <bt_gatt_discover+0x158>)
   322a6:	4b25      	ldr	r3, [pc, #148]	; (3233c <bt_gatt_discover+0x15c>)
   322a8:	4622      	mov	r2, r4
   322aa:	e7b7      	b.n	3221c <bt_gatt_discover+0x3c>
		if (params->uuid &&
   322ac:	6808      	ldr	r0, [r1, #0]
   322ae:	b388      	cbz	r0, 32314 <bt_gatt_discover+0x134>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   322b0:	2600      	movs	r6, #0
   322b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   322b6:	a902      	add	r1, sp, #8
   322b8:	f88d 6008 	strb.w	r6, [sp, #8]
   322bc:	f8ad 300a 	strh.w	r3, [sp, #10]
   322c0:	f019 fe3f 	bl	4bf42 <bt_uuid_cmp>
		if (params->uuid &&
   322c4:	b910      	cbnz	r0, 322cc <bt_gatt_discover+0xec>
			return -EINVAL;
   322c6:	f06f 0015 	mvn.w	r0, #21
   322ca:	e7aa      	b.n	32222 <bt_gatt_discover+0x42>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   322cc:	f642 0301 	movw	r3, #10241	; 0x2801
   322d0:	6820      	ldr	r0, [r4, #0]
   322d2:	f88d 600c 	strb.w	r6, [sp, #12]
   322d6:	a903      	add	r1, sp, #12
   322d8:	f8ad 300e 	strh.w	r3, [sp, #14]
   322dc:	f019 fe31 	bl	4bf42 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   322e0:	2800      	cmp	r0, #0
   322e2:	d0f0      	beq.n	322c6 <bt_gatt_discover+0xe6>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   322e4:	f642 0302 	movw	r3, #10242	; 0x2802
   322e8:	6820      	ldr	r0, [r4, #0]
   322ea:	f88d 6010 	strb.w	r6, [sp, #16]
   322ee:	a904      	add	r1, sp, #16
   322f0:	f8ad 3012 	strh.w	r3, [sp, #18]
   322f4:	f019 fe25 	bl	4bf42 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   322f8:	2800      	cmp	r0, #0
   322fa:	d0e4      	beq.n	322c6 <bt_gatt_discover+0xe6>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   322fc:	f642 0303 	movw	r3, #10243	; 0x2803
   32300:	6820      	ldr	r0, [r4, #0]
   32302:	f88d 6014 	strb.w	r6, [sp, #20]
   32306:	a905      	add	r1, sp, #20
   32308:	f8ad 3016 	strh.w	r3, [sp, #22]
   3230c:	f019 fe19 	bl	4bf42 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   32310:	2800      	cmp	r0, #0
   32312:	d0d8      	beq.n	322c6 <bt_gatt_discover+0xe6>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   32314:	2304      	movs	r3, #4
   32316:	e9cd 3300 	strd	r3, r3, [sp]
   3231a:	4909      	ldr	r1, [pc, #36]	; (32340 <bt_gatt_discover+0x160>)
   3231c:	4b09      	ldr	r3, [pc, #36]	; (32344 <bt_gatt_discover+0x164>)
   3231e:	4622      	mov	r2, r4
   32320:	e77c      	b.n	3221c <bt_gatt_discover+0x3c>
		return -ENOTCONN;
   32322:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   32326:	e77c      	b.n	32222 <bt_gatt_discover+0x42>
   32328:	0004e77b 	.word	0x0004e77b
   3232c:	0004e34f 	.word	0x0004e34f
   32330:	0004e193 	.word	0x0004e193
   32334:	0004e819 	.word	0x0004e819
   32338:	00032349 	.word	0x00032349
   3233c:	0004e1c3 	.word	0x0004e1c3
   32340:	0004e997 	.word	0x0004e997
   32344:	0004e17b 	.word	0x0004e17b

00032348 <gatt_read_type_rsp>:
{
   32348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3234c:	b093      	sub	sp, #76	; 0x4c
   3234e:	4680      	mov	r8, r0
   32350:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   32352:	4617      	mov	r7, r2
	if (err) {
   32354:	b131      	cbz	r1, 32364 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   32356:	686b      	ldr	r3, [r5, #4]
   32358:	462a      	mov	r2, r5
   3235a:	2100      	movs	r1, #0
}
   3235c:	b013      	add	sp, #76	; 0x4c
   3235e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
   32362:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   32364:	7c2a      	ldrb	r2, [r5, #16]
   32366:	2a02      	cmp	r2, #2
   32368:	d171      	bne.n	3244e <gatt_read_type_rsp+0x106>
	switch (rsp->len) {
   3236a:	7838      	ldrb	r0, [r7, #0]
   3236c:	2806      	cmp	r0, #6
   3236e:	d018      	beq.n	323a2 <gatt_read_type_rsp+0x5a>
   32370:	2808      	cmp	r0, #8
   32372:	d110      	bne.n	32396 <gatt_read_type_rsp+0x4e>
	for (length--, pdu = rsp->data; length >= rsp->len;
   32374:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
   32376:	2600      	movs	r6, #0
		u.uuid.type = BT_UUID_TYPE_16;
   32378:	f88d 1020 	strb.w	r1, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   3237c:	b2a4      	uxth	r4, r4
   3237e:	f107 0901 	add.w	r9, r7, #1
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   32382:	46b3      	mov	fp, r6
   32384:	f642 0a02 	movw	sl, #10242	; 0x2802
	for (length--, pdu = rsp->data; length >= rsp->len;
   32388:	783b      	ldrb	r3, [r7, #0]
   3238a:	42a3      	cmp	r3, r4
   3238c:	d90b      	bls.n	323a6 <gatt_read_type_rsp+0x5e>
	if (length == 0U && handle) {
   3238e:	b914      	cbnz	r4, 32396 <gatt_read_type_rsp+0x4e>
   32390:	2e00      	cmp	r6, #0
   32392:	f040 811e 	bne.w	325d2 <gatt_read_type_rsp+0x28a>
	params->func(conn, NULL, params);
   32396:	686b      	ldr	r3, [r5, #4]
   32398:	462a      	mov	r2, r5
   3239a:	2100      	movs	r1, #0
   3239c:	4640      	mov	r0, r8
   3239e:	4798      	blx	r3
	if (!handle) {
   323a0:	e03b      	b.n	3241a <gatt_read_type_rsp+0xd2>
	switch (rsp->len) {
   323a2:	4611      	mov	r1, r2
   323a4:	e7e6      	b.n	32374 <gatt_read_type_rsp+0x2c>
		handle = sys_le16_to_cpu(data->handle);
   323a6:	f8b9 3000 	ldrh.w	r3, [r9]
   323aa:	b29e      	uxth	r6, r3
		if (!handle) {
   323ac:	2e00      	cmp	r6, #0
   323ae:	d0f2      	beq.n	32396 <gatt_read_type_rsp+0x4e>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   323b0:	f8b9 0002 	ldrh.w	r0, [r9, #2]
   323b4:	f8ad 001c 	strh.w	r0, [sp, #28]
		switch (u.uuid.type) {
   323b8:	f89d 2020 	ldrb.w	r2, [sp, #32]
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   323bc:	f8b9 1004 	ldrh.w	r1, [r9, #4]
   323c0:	f8ad 101e 	strh.w	r1, [sp, #30]
		switch (u.uuid.type) {
   323c4:	b172      	cbz	r2, 323e4 <gatt_read_type_rsp+0x9c>
   323c6:	2a02      	cmp	r2, #2
   323c8:	d017      	beq.n	323fa <gatt_read_type_rsp+0xb2>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   323ca:	6829      	ldr	r1, [r5, #0]
   323cc:	b341      	cbz	r1, 32420 <gatt_read_type_rsp+0xd8>
   323ce:	a808      	add	r0, sp, #32
   323d0:	9303      	str	r3, [sp, #12]
   323d2:	f019 fdb6 	bl	4bf42 <bt_uuid_cmp>
   323d6:	9b03      	ldr	r3, [sp, #12]
   323d8:	b310      	cbz	r0, 32420 <gatt_read_type_rsp+0xd8>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   323da:	783b      	ldrb	r3, [r7, #0]
   323dc:	1ae4      	subs	r4, r4, r3
   323de:	b2a4      	uxth	r4, r4
   323e0:	4499      	add	r9, r3
   323e2:	e7d1      	b.n	32388 <gatt_read_type_rsp+0x40>
			value.uuid = &u.uuid;
   323e4:	aa08      	add	r2, sp, #32
   323e6:	9206      	str	r2, [sp, #24]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   323e8:	f899 2006 	ldrb.w	r2, [r9, #6]
   323ec:	f899 1007 	ldrb.w	r1, [r9, #7]
   323f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   323f4:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
			break;
   323f8:	e7e7      	b.n	323ca <gatt_read_type_rsp+0x82>
			params->_included.attr_handle = handle;
   323fa:	812b      	strh	r3, [r5, #8]
	return gatt_req_send(conn, read_included_uuid_cb, params,
   323fc:	230a      	movs	r3, #10
			params->_included.start_handle = value.start_handle;
   323fe:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   32400:	81a9      	strh	r1, [r5, #12]
	return gatt_req_send(conn, read_included_uuid_cb, params,
   32402:	4640      	mov	r0, r8
   32404:	9201      	str	r2, [sp, #4]
   32406:	9300      	str	r3, [sp, #0]
   32408:	4976      	ldr	r1, [pc, #472]	; (325e4 <gatt_read_type_rsp+0x29c>)
   3240a:	4b77      	ldr	r3, [pc, #476]	; (325e8 <gatt_read_type_rsp+0x2a0>)
   3240c:	462a      	mov	r2, r5
   3240e:	f01b fe71 	bl	4e0f4 <gatt_req_send>
			return read_included_uuid(conn, params);
   32412:	b286      	uxth	r6, r0
	if (!handle) {
   32414:	2e00      	cmp	r6, #0
   32416:	f040 80dc 	bne.w	325d2 <gatt_read_type_rsp+0x28a>
}
   3241a:	b013      	add	sp, #76	; 0x4c
   3241c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   32420:	aa05      	add	r2, sp, #20
   32422:	e9cd 2b0d 	strd	r2, fp, [sp, #52]	; 0x34
   32426:	aa06      	add	r2, sp, #24
   32428:	9210      	str	r2, [sp, #64]	; 0x40
		attr.handle = handle;
   3242a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   3242e:	f88d b014 	strb.w	fp, [sp, #20]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   32432:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   32434:	f8ad a016 	strh.w	sl, [sp, #22]
   32438:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   3243c:	f88d b046 	strb.w	fp, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   32440:	462a      	mov	r2, r5
   32442:	a90d      	add	r1, sp, #52	; 0x34
   32444:	4640      	mov	r0, r8
   32446:	4798      	blx	r3
   32448:	2800      	cmp	r0, #0
   3244a:	d1c6      	bne.n	323da <gatt_read_type_rsp+0x92>
   3244c:	e7e5      	b.n	3241a <gatt_read_type_rsp+0xd2>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
   3244e:	2a03      	cmp	r2, #3
   32450:	d15b      	bne.n	3250a <gatt_read_type_rsp+0x1c2>
	switch (rsp->len) {
   32452:	783a      	ldrb	r2, [r7, #0]
   32454:	2a07      	cmp	r2, #7
   32456:	d002      	beq.n	3245e <gatt_read_type_rsp+0x116>
   32458:	2a15      	cmp	r2, #21
   3245a:	d19c      	bne.n	32396 <gatt_read_type_rsp+0x4e>
   3245c:	2102      	movs	r1, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
   3245e:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   32460:	f88d 1020 	strb.w	r1, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   32464:	b2a4      	uxth	r4, r4
   32466:	f107 0901 	add.w	r9, r7, #1
	uint16_t handle = 0U;
   3246a:	2600      	movs	r6, #0
   3246c:	f10d 0a20 	add.w	sl, sp, #32
	for (length--, pdu = rsp->data; length >= rsp->len;
   32470:	783b      	ldrb	r3, [r7, #0]
   32472:	42a3      	cmp	r3, r4
   32474:	d88b      	bhi.n	3238e <gatt_read_type_rsp+0x46>
		handle = sys_le16_to_cpu(data->handle);
   32476:	f8b9 b000 	ldrh.w	fp, [r9]
   3247a:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   3247e:	2e00      	cmp	r6, #0
   32480:	d089      	beq.n	32396 <gatt_read_type_rsp+0x4e>
		switch (u.uuid.type) {
   32482:	f89d 3020 	ldrb.w	r3, [sp, #32]
   32486:	b163      	cbz	r3, 324a2 <gatt_read_type_rsp+0x15a>
   32488:	2b02      	cmp	r3, #2
   3248a:	d013      	beq.n	324b4 <gatt_read_type_rsp+0x16c>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   3248c:	6829      	ldr	r1, [r5, #0]
   3248e:	b1c9      	cbz	r1, 324c4 <gatt_read_type_rsp+0x17c>
   32490:	4650      	mov	r0, sl
   32492:	f019 fd56 	bl	4bf42 <bt_uuid_cmp>
   32496:	b1a8      	cbz	r0, 324c4 <gatt_read_type_rsp+0x17c>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   32498:	783b      	ldrb	r3, [r7, #0]
   3249a:	1ae4      	subs	r4, r4, r3
   3249c:	b2a4      	uxth	r4, r4
   3249e:	4499      	add	r9, r3
   324a0:	e7e6      	b.n	32470 <gatt_read_type_rsp+0x128>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   324a2:	f899 3005 	ldrb.w	r3, [r9, #5]
   324a6:	f899 2006 	ldrb.w	r2, [r9, #6]
   324aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   324ae:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			break;
   324b2:	e7eb      	b.n	3248c <gatt_read_type_rsp+0x144>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   324b4:	2210      	movs	r2, #16
   324b6:	f109 0105 	add.w	r1, r9, #5
   324ba:	f10d 0021 	add.w	r0, sp, #33	; 0x21
   324be:	f019 fc52 	bl	4bd66 <memcpy>
			break;
   324c2:	e7e3      	b.n	3248c <gatt_read_type_rsp+0x144>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   324c4:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   324c8:	f899 3002 	ldrb.w	r3, [r9, #2]
   324cc:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   324d0:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   324d4:	f88d 301e 	strb.w	r3, [sp, #30]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   324d8:	f8ad 2016 	strh.w	r2, [sp, #22]
   324dc:	2300      	movs	r3, #0
   324de:	aa05      	add	r2, sp, #20
   324e0:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
   324e4:	aa06      	add	r2, sp, #24
   324e6:	f88d 3014 	strb.w	r3, [sp, #20]
   324ea:	930f      	str	r3, [sp, #60]	; 0x3c
   324ec:	9210      	str	r2, [sp, #64]	; 0x40
   324ee:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   324f2:	f8cd a018 	str.w	sl, [sp, #24]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   324f6:	686b      	ldr	r3, [r5, #4]
		attr.handle = handle;
   324f8:	f8ad b044 	strh.w	fp, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   324fc:	462a      	mov	r2, r5
   324fe:	a90d      	add	r1, sp, #52	; 0x34
   32500:	4640      	mov	r0, r8
   32502:	4798      	blx	r3
   32504:	2800      	cmp	r0, #0
   32506:	d1c7      	bne.n	32498 <gatt_read_type_rsp+0x150>
   32508:	e787      	b.n	3241a <gatt_read_type_rsp+0xd2>
	if (params->uuid->type != BT_UUID_TYPE_16) {
   3250a:	682a      	ldr	r2, [r5, #0]
   3250c:	7816      	ldrb	r6, [r2, #0]
   3250e:	b96e      	cbnz	r6, 3252c <gatt_read_type_rsp+0x1e4>
	uuid_val = BT_UUID_16(params->uuid)->val;
   32510:	8852      	ldrh	r2, [r2, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
   32512:	1e5c      	subs	r4, r3, #1
   32514:	b2a4      	uxth	r4, r4
   32516:	f107 0901 	add.w	r9, r7, #1
		switch (uuid_val) {
   3251a:	f5a2 5b24 	sub.w	fp, r2, #10496	; 0x2900
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   3251e:	46b2      	mov	sl, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   32520:	783b      	ldrb	r3, [r7, #0]
   32522:	42a3      	cmp	r3, r4
   32524:	d907      	bls.n	32536 <gatt_read_type_rsp+0x1ee>
	if (length == 0U && handle) {
   32526:	b90c      	cbnz	r4, 3252c <gatt_read_type_rsp+0x1e4>
   32528:	2e00      	cmp	r6, #0
   3252a:	d152      	bne.n	325d2 <gatt_read_type_rsp+0x28a>
	params->func(conn, NULL, params);
   3252c:	686b      	ldr	r3, [r5, #4]
   3252e:	462a      	mov	r2, r5
   32530:	2100      	movs	r1, #0
   32532:	4640      	mov	r0, r8
   32534:	e712      	b.n	3235c <gatt_read_type_rsp+0x14>
		handle = sys_le16_to_cpu(data->handle);
   32536:	f8b9 2000 	ldrh.w	r2, [r9]
   3253a:	b296      	uxth	r6, r2
		if (!handle) {
   3253c:	2e00      	cmp	r6, #0
   3253e:	d0f5      	beq.n	3252c <gatt_read_type_rsp+0x1e4>
		switch (uuid_val) {
   32540:	f1bb 0f04 	cmp.w	fp, #4
   32544:	d8f2      	bhi.n	3252c <gatt_read_type_rsp+0x1e4>
   32546:	a301      	add	r3, pc, #4	; (adr r3, 3254c <gatt_read_type_rsp+0x204>)
   32548:	f853 f02b 	ldr.w	pc, [r3, fp, lsl #2]
   3254c:	00032561 	.word	0x00032561
   32550:	0003252d 	.word	0x0003252d
   32554:	00032561 	.word	0x00032561
   32558:	00032561 	.word	0x00032561
   3255c:	00032599 	.word	0x00032599
			value.scc.flags = sys_get_le16(data->value);
   32560:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   32564:	f8ad 3020 	strh.w	r3, [sp, #32]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   32568:	682b      	ldr	r3, [r5, #0]
		attr.handle = handle;
   3256a:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   3256e:	e9cd 3a0d 	strd	r3, sl, [sp, #52]	; 0x34
   32572:	ab08      	add	r3, sp, #32
   32574:	9310      	str	r3, [sp, #64]	; 0x40
   32576:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   3257a:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   3257c:	f88d a046 	strb.w	sl, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   32580:	462a      	mov	r2, r5
   32582:	a90d      	add	r1, sp, #52	; 0x34
   32584:	4640      	mov	r0, r8
   32586:	4798      	blx	r3
   32588:	2800      	cmp	r0, #0
   3258a:	f43f af46 	beq.w	3241a <gatt_read_type_rsp+0xd2>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   3258e:	783b      	ldrb	r3, [r7, #0]
   32590:	1ae4      	subs	r4, r4, r3
   32592:	b2a4      	uxth	r4, r4
   32594:	4499      	add	r9, r3
   32596:	e7c3      	b.n	32520 <gatt_read_type_rsp+0x1d8>
			value.cpf.format = cpf->format;
   32598:	f899 3002 	ldrb.w	r3, [r9, #2]
   3259c:	f88d 3020 	strb.w	r3, [sp, #32]
			value.cpf.exponent = cpf->exponent;
   325a0:	f899 3003 	ldrb.w	r3, [r9, #3]
   325a4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
   325a8:	f899 1005 	ldrb.w	r1, [r9, #5]
   325ac:	f899 3004 	ldrb.w	r3, [r9, #4]
   325b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   325b4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			value.cpf.name_space = cpf->name_space;
   325b8:	f899 3006 	ldrb.w	r3, [r9, #6]
   325bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			value.cpf.description = sys_le16_to_cpu(cpf->description);
   325c0:	f899 3007 	ldrb.w	r3, [r9, #7]
   325c4:	f899 1008 	ldrb.w	r1, [r9, #8]
   325c8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   325cc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
			break;
   325d0:	e7ca      	b.n	32568 <gatt_read_type_rsp+0x220>
	gatt_discover_next(conn, handle, params);
   325d2:	462a      	mov	r2, r5
   325d4:	4631      	mov	r1, r6
   325d6:	4640      	mov	r0, r8
}
   325d8:	b013      	add	sp, #76	; 0x4c
   325da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   325de:	f01c b8ae 	b.w	4e73e <gatt_discover_next>
   325e2:	bf00      	nop
   325e4:	0004e90d 	.word	0x0004e90d
   325e8:	0004e167 	.word	0x0004e167

000325ec <bt_gatt_subscribe>:
{
   325ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   325ee:	7b43      	ldrb	r3, [r0, #13]
   325f0:	2b07      	cmp	r3, #7
{
   325f2:	4606      	mov	r6, r0
   325f4:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   325f6:	d161      	bne.n	326bc <bt_gatt_subscribe+0xd0>
	sub = gatt_sub_find(conn);
   325f8:	f7fe ff38 	bl	3146c <gatt_sub_find>
	if (!sub) {
   325fc:	4604      	mov	r4, r0
   325fe:	b958      	cbnz	r0, 32618 <bt_gatt_subscribe+0x2c>
		sub = gatt_sub_find(NULL);
   32600:	f7fe ff34 	bl	3146c <gatt_sub_find>
		if (sub) {
   32604:	4604      	mov	r4, r0
   32606:	2800      	cmp	r0, #0
   32608:	d05b      	beq.n	326c2 <bt_gatt_subscribe+0xd6>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   3260a:	f106 0188 	add.w	r1, r6, #136	; 0x88
   3260e:	3001      	adds	r0, #1
   32610:	f01b fc75 	bl	4defe <bt_addr_le_copy>
			sub->id = conn->id;
   32614:	7a33      	ldrb	r3, [r6, #8]
   32616:	7023      	strb	r3, [r4, #0]
	return list->head;
   32618:	68a3      	ldr	r3, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   3261a:	b1db      	cbz	r3, 32654 <bt_gatt_subscribe+0x68>
   3261c:	3b1c      	subs	r3, #28
   3261e:	2200      	movs	r2, #0
		if (tmp == params) {
   32620:	429d      	cmp	r5, r3
   32622:	d051      	beq.n	326c8 <bt_gatt_subscribe+0xdc>
		if (tmp->value_handle == params->value_handle &&
   32624:	8918      	ldrh	r0, [r3, #8]
   32626:	8929      	ldrh	r1, [r5, #8]
   32628:	4288      	cmp	r0, r1
   3262a:	d104      	bne.n	32636 <bt_gatt_subscribe+0x4a>
   3262c:	8a98      	ldrh	r0, [r3, #20]
   3262e:	8aa9      	ldrh	r1, [r5, #20]
			has_subscription = true;
   32630:	4288      	cmp	r0, r1
   32632:	bf28      	it	cs
   32634:	2201      	movcs	r2, #1
	return node->next;
   32636:	69db      	ldr	r3, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   32638:	b953      	cbnz	r3, 32650 <bt_gatt_subscribe+0x64>
	if (!has_subscription) {
   3263a:	b15a      	cbz	r2, 32654 <bt_gatt_subscribe+0x68>
	parent->next = child;
   3263c:	68a2      	ldr	r2, [r4, #8]
   3263e:	61ea      	str	r2, [r5, #28]
Z_GENLIST_PREPEND(slist, snode)
   32640:	68e2      	ldr	r2, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   32642:	f105 031c 	add.w	r3, r5, #28
	list->head = node;
   32646:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   32648:	b902      	cbnz	r2, 3264c <bt_gatt_subscribe+0x60>
	list->tail = node;
   3264a:	60e3      	str	r3, [r4, #12]
	return 0;
   3264c:	2600      	movs	r6, #0
   3264e:	e024      	b.n	3269a <bt_gatt_subscribe+0xae>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   32650:	3b1c      	subs	r3, #28
   32652:	e7e5      	b.n	32620 <bt_gatt_subscribe+0x34>
		if (!params->ccc_handle) {
   32654:	896f      	ldrh	r7, [r5, #10]
   32656:	bb1f      	cbnz	r7, 326a0 <bt_gatt_subscribe+0xb4>
	memcpy(&ccc_uuid, BT_UUID_GATT_CCC, sizeof(ccc_uuid));
   32658:	4c1d      	ldr	r4, [pc, #116]	; (326d0 <bt_gatt_subscribe+0xe4>)
   3265a:	f88d 7004 	strb.w	r7, [sp, #4]
   3265e:	2204      	movs	r2, #4
   32660:	f642 1302 	movw	r3, #10498	; 0x2902
   32664:	eb0d 0102 	add.w	r1, sp, r2
   32668:	4620      	mov	r0, r4
   3266a:	f8ad 3006 	strh.w	r3, [sp, #6]
   3266e:	f019 fb7a 	bl	4bd66 <memcpy>
	memset(params->disc_params, 0, sizeof(*params->disc_params));
   32672:	2218      	movs	r2, #24
   32674:	4639      	mov	r1, r7
   32676:	6928      	ldr	r0, [r5, #16]
   32678:	f019 fb80 	bl	4bd7c <memset>
	params->disc_params->sub_params = params;
   3267c:	6929      	ldr	r1, [r5, #16]
	params->disc_params->type = BT_GATT_DISCOVER_DESCRIPTOR;
   3267e:	2304      	movs	r3, #4
   32680:	740b      	strb	r3, [r1, #16]
	params->disc_params->start_handle = params->value_handle;
   32682:	892b      	ldrh	r3, [r5, #8]
   32684:	810b      	strh	r3, [r1, #8]
	params->disc_params->end_handle = params->end_handle;
   32686:	89ab      	ldrh	r3, [r5, #12]
   32688:	81cb      	strh	r3, [r1, #14]
	params->disc_params->func = gatt_ccc_discover_cb;
   3268a:	4b12      	ldr	r3, [pc, #72]	; (326d4 <bt_gatt_subscribe+0xe8>)
	params->disc_params->sub_params = params;
   3268c:	614d      	str	r5, [r1, #20]
	err = bt_gatt_discover(conn, params->disc_params);
   3268e:	4630      	mov	r0, r6
	params->disc_params->uuid = &ccc_uuid.uuid;
   32690:	600c      	str	r4, [r1, #0]
	params->disc_params->func = gatt_ccc_discover_cb;
   32692:	604b      	str	r3, [r1, #4]
	err = bt_gatt_discover(conn, params->disc_params);
   32694:	f7ff fda4 	bl	321e0 <bt_gatt_discover>
   32698:	4606      	mov	r6, r0
}
   3269a:	4630      	mov	r0, r6
   3269c:	b003      	add	sp, #12
   3269e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = gatt_write_ccc(conn, params);
   326a0:	4630      	mov	r0, r6
   326a2:	4629      	mov	r1, r5
   326a4:	f7ff f808 	bl	316b8 <gatt_write_ccc>
		if (err) {
   326a8:	4606      	mov	r6, r0
   326aa:	2800      	cmp	r0, #0
   326ac:	d0c6      	beq.n	3263c <bt_gatt_subscribe+0x50>
	if (gatt_sub_is_empty(sub)) {
   326ae:	68a3      	ldr	r3, [r4, #8]
   326b0:	2b00      	cmp	r3, #0
   326b2:	d1f2      	bne.n	3269a <bt_gatt_subscribe+0xae>
		gatt_sub_free(sub);
   326b4:	4620      	mov	r0, r4
   326b6:	f01b fc77 	bl	4dfa8 <gatt_sub_free>
   326ba:	e7ee      	b.n	3269a <bt_gatt_subscribe+0xae>
		return -ENOTCONN;
   326bc:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   326c0:	e7eb      	b.n	3269a <bt_gatt_subscribe+0xae>
		return -ENOMEM;
   326c2:	f06f 060b 	mvn.w	r6, #11
   326c6:	e7e8      	b.n	3269a <bt_gatt_subscribe+0xae>
			return -EALREADY;
   326c8:	f06f 0677 	mvn.w	r6, #119	; 0x77
   326cc:	e7e5      	b.n	3269a <bt_gatt_subscribe+0xae>
   326ce:	bf00      	nop
   326d0:	20007220 	.word	0x20007220
   326d4:	0004eb61 	.word	0x0004eb61

000326d8 <bt_gatt_connected>:
{
   326d8:	b570      	push	{r4, r5, r6, lr}
   326da:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   326dc:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   326e0:	4604      	mov	r4, r0
	data.conn = conn;
   326e2:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   326e4:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   326e6:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   326e8:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   326ec:	4631      	mov	r1, r6
   326ee:	f01a f801 	bl	4c6f4 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   326f2:	b198      	cbz	r0, 3271c <bt_gatt_connected+0x44>
		if (conn->id) {
   326f4:	7a22      	ldrb	r2, [r4, #8]
   326f6:	2a00      	cmp	r2, #0
   326f8:	d03b      	beq.n	32772 <bt_gatt_connected+0x9a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   326fa:	ad02      	add	r5, sp, #8
   326fc:	2104      	movs	r1, #4
   326fe:	4628      	mov	r0, r5
   32700:	f017 f947 	bl	49992 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   32704:	9500      	str	r5, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   32706:	4a1d      	ldr	r2, [pc, #116]	; (3277c <bt_gatt_connected+0xa4>)
   32708:	2124      	movs	r1, #36	; 0x24
   3270a:	a805      	add	r0, sp, #20
   3270c:	4633      	mov	r3, r6
   3270e:	f7fa fff1 	bl	2d6f4 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   32712:	aa05      	add	r2, sp, #20
   32714:	491a      	ldr	r1, [pc, #104]	; (32780 <bt_gatt_connected+0xa8>)
   32716:	4610      	mov	r0, r2
   32718:	f7f9 fe5e 	bl	2c3d8 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   3271c:	ab03      	add	r3, sp, #12
   3271e:	4a19      	ldr	r2, [pc, #100]	; (32784 <bt_gatt_connected+0xac>)
   32720:	f64f 71ff 	movw	r1, #65535	; 0xffff
   32724:	2001      	movs	r0, #1
   32726:	f01b ffa1 	bl	4e66c <bt_gatt_foreach_attr>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   3272a:	78e3      	ldrb	r3, [r4, #3]
   3272c:	b94b      	cbnz	r3, 32742 <bt_gatt_connected+0x6a>
	    bt_conn_get_security(conn) < data.sec) {
   3272e:	4620      	mov	r0, r4
   32730:	f01a fbfa 	bl	4cf28 <bt_conn_get_security>
   32734:	f89d 1010 	ldrb.w	r1, [sp, #16]
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
   32738:	4288      	cmp	r0, r1
   3273a:	d202      	bcs.n	32742 <bt_gatt_connected+0x6a>
		int err = bt_conn_set_security(conn, data.sec);
   3273c:	4620      	mov	r0, r4
   3273e:	f01a fbcb 	bl	4ced8 <bt_conn_set_security>
	sub = gatt_sub_find(conn);
   32742:	4620      	mov	r0, r4
   32744:	f7fe fe92 	bl	3146c <gatt_sub_find>
	if (!sub) {
   32748:	b1a8      	cbz	r0, 32776 <bt_gatt_connected+0x9e>
	return list->head;
   3274a:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   3274c:	b19d      	cbz	r5, 32776 <bt_gatt_connected+0x9e>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   3274e:	7a20      	ldrb	r0, [r4, #8]
   32750:	4631      	mov	r1, r6
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   32752:	3d1c      	subs	r5, #28
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   32754:	f019 ffce 	bl	4c6f4 <bt_addr_le_is_bonded>
   32758:	b148      	cbz	r0, 3276e <bt_gatt_connected+0x96>
   3275a:	f105 0018 	add.w	r0, r5, #24
   3275e:	f01b fb21 	bl	4dda4 <atomic_get>
   32762:	0783      	lsls	r3, r0, #30
   32764:	d403      	bmi.n	3276e <bt_gatt_connected+0x96>
			gatt_write_ccc(conn, params);
   32766:	4629      	mov	r1, r5
   32768:	4620      	mov	r0, r4
   3276a:	f7fe ffa5 	bl	316b8 <gatt_write_ccc>
	return node->next;
   3276e:	69ed      	ldr	r5, [r5, #28]
   32770:	e7ec      	b.n	3274c <bt_gatt_connected+0x74>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   32772:	9200      	str	r2, [sp, #0]
   32774:	e7c7      	b.n	32706 <bt_gatt_connected+0x2e>
}
   32776:	b00e      	add	sp, #56	; 0x38
   32778:	bd70      	pop	{r4, r5, r6, pc}
   3277a:	bf00      	nop
   3277c:	0005441c 	.word	0x0005441c
   32780:	00031c91 	.word	0x00031c91
   32784:	00032101 	.word	0x00032101

00032788 <bt_gatt_att_max_mtu_changed>:
{
   32788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   3278a:	4b08      	ldr	r3, [pc, #32]	; (327ac <bt_gatt_att_max_mtu_changed+0x24>)
   3278c:	681c      	ldr	r4, [r3, #0]
   3278e:	4605      	mov	r5, r0
   32790:	460e      	mov	r6, r1
   32792:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   32794:	b14c      	cbz	r4, 327aa <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   32796:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   3279a:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   3279c:	b11b      	cbz	r3, 327a6 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   3279e:	463a      	mov	r2, r7
   327a0:	4631      	mov	r1, r6
   327a2:	4628      	mov	r0, r5
   327a4:	4798      	blx	r3
	return node->next;
   327a6:	6864      	ldr	r4, [r4, #4]
   327a8:	e7f4      	b.n	32794 <bt_gatt_att_max_mtu_changed+0xc>
}
   327aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   327ac:	20004784 	.word	0x20004784

000327b0 <bt_gatt_encrypt_change>:
{
   327b0:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   327b2:	4a06      	ldr	r2, [pc, #24]	; (327cc <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   327b4:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   327b6:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   327b8:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   327ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   327be:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   327c2:	f01b ff53 	bl	4e66c <bt_gatt_foreach_attr>
}
   327c6:	b003      	add	sp, #12
   327c8:	f85d fb04 	ldr.w	pc, [sp], #4
   327cc:	00032101 	.word	0x00032101

000327d0 <db_hash_read>:
{
   327d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   327d2:	4914      	ldr	r1, [pc, #80]	; (32824 <db_hash_read+0x54>)
{
   327d4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   327d8:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   327da:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   327de:	461f      	mov	r7, r3
   327e0:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   327e2:	f01e fac5 	bl	50d70 <k_work_cancel_delayable_sync>
   327e6:	4810      	ldr	r0, [pc, #64]	; (32828 <db_hash_read+0x58>)
   327e8:	f01b fadc 	bl	4dda4 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   327ec:	0743      	lsls	r3, r0, #29
   327ee:	d402      	bmi.n	327f6 <db_hash_read+0x26>
		db_hash_gen(true);
   327f0:	2001      	movs	r0, #1
   327f2:	f7ff f9b3 	bl	31b5c <db_hash_gen>
	(void)bt_gatt_change_aware(conn, true);
   327f6:	2101      	movs	r1, #1
   327f8:	4620      	mov	r0, r4
   327fa:	f01c fadc 	bl	4edb6 <bt_gatt_change_aware>
	if (offset > value_len) {
   327fe:	2e10      	cmp	r6, #16
   32800:	d80c      	bhi.n	3281c <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
   32802:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   32806:	4909      	ldr	r1, [pc, #36]	; (3282c <db_hash_read+0x5c>)
	len = MIN(buf_len, value_len - offset);
   32808:	42bc      	cmp	r4, r7
   3280a:	bfa8      	it	ge
   3280c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   3280e:	4622      	mov	r2, r4
   32810:	4431      	add	r1, r6
   32812:	4628      	mov	r0, r5
   32814:	f019 faa7 	bl	4bd66 <memcpy>
}
   32818:	4620      	mov	r0, r4
   3281a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   3281c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   32820:	e7fa      	b.n	32818 <db_hash_read+0x48>
   32822:	bf00      	nop
   32824:	200025b0 	.word	0x200025b0
   32828:	20002628 	.word	0x20002628
   3282c:	20002560 	.word	0x20002560

00032830 <bt_gatt_store_ccc>:
{
   32830:	b570      	push	{r4, r5, r6, lr}
   32832:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   32834:	2300      	movs	r3, #0
{
   32836:	4604      	mov	r4, r0
   32838:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   3283a:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   3283c:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   32840:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   32842:	4a11      	ldr	r2, [pc, #68]	; (32888 <bt_gatt_store_ccc+0x58>)
   32844:	ab0d      	add	r3, sp, #52	; 0x34
   32846:	f64f 71ff 	movw	r1, #65535	; 0xffff
   3284a:	2001      	movs	r0, #1
   3284c:	f01b ff0e 	bl	4e66c <bt_gatt_foreach_attr>
	if (id) {
   32850:	b1ac      	cbz	r4, 3287e <bt_gatt_store_ccc+0x4e>
		u8_to_dec(id_str, sizeof(id_str), id);
   32852:	ae03      	add	r6, sp, #12
   32854:	4622      	mov	r2, r4
   32856:	2104      	movs	r1, #4
   32858:	4630      	mov	r0, r6
   3285a:	f017 f89a 	bl	49992 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   3285e:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   32860:	4a0a      	ldr	r2, [pc, #40]	; (3288c <bt_gatt_store_ccc+0x5c>)
   32862:	462b      	mov	r3, r5
   32864:	2124      	movs	r1, #36	; 0x24
   32866:	a804      	add	r0, sp, #16
   32868:	f7fa ff44 	bl	2d6f4 <bt_settings_encode_key>
	if (save.count) {
   3286c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   3286e:	b142      	cbz	r2, 32882 <bt_gatt_store_ccc+0x52>
		len = save.count * sizeof(*save.store);
   32870:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   32872:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   32874:	a804      	add	r0, sp, #16
   32876:	f7f9 fd4f 	bl	2c318 <settings_save_one>
}
   3287a:	b040      	add	sp, #256	; 0x100
   3287c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   3287e:	9400      	str	r4, [sp, #0]
   32880:	e7ee      	b.n	32860 <bt_gatt_store_ccc+0x30>
		str = NULL;
   32882:	4611      	mov	r1, r2
   32884:	e7f6      	b.n	32874 <bt_gatt_store_ccc+0x44>
   32886:	bf00      	nop
   32888:	00031739 	.word	0x00031739
   3288c:	0005441c 	.word	0x0005441c

00032890 <bt_gatt_identity_resolved>:
{
   32890:	b513      	push	{r0, r1, r4, lr}
   32892:	4604      	mov	r4, r0
	struct addr_match user_data = {
   32894:	e9cd 1200 	strd	r1, r2, [sp]
	bt_gatt_foreach_attr(0x0001, 0xffff, convert_to_id_on_match, &user_data);
   32898:	466b      	mov	r3, sp
   3289a:	4a08      	ldr	r2, [pc, #32]	; (328bc <bt_gatt_identity_resolved+0x2c>)
   3289c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   328a0:	2001      	movs	r0, #1
   328a2:	f01b fee3 	bl	4e66c <bt_gatt_foreach_attr>
	bt_gatt_store_ccc(conn->id, &(conn->le.dst));
   328a6:	f104 0188 	add.w	r1, r4, #136	; 0x88
   328aa:	7a20      	ldrb	r0, [r4, #8]
   328ac:	f7ff ffc0 	bl	32830 <bt_gatt_store_ccc>
	bt_gatt_store_cf(conn);
   328b0:	4620      	mov	r0, r4
   328b2:	f7fe ff5d 	bl	31770 <bt_gatt_store_cf.isra.0>
}
   328b6:	b002      	add	sp, #8
   328b8:	bd10      	pop	{r4, pc}
   328ba:	bf00      	nop
   328bc:	00031705 	.word	0x00031705

000328c0 <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
   328c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   328c2:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   328c4:	ae03      	add	r6, sp, #12
{
   328c6:	4604      	mov	r4, r0
   328c8:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
   328ca:	9103      	str	r1, [sp, #12]
   328cc:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   328d0:	4a3c      	ldr	r2, [pc, #240]	; (329c4 <bt_gatt_clear+0x104>)
   328d2:	4633      	mov	r3, r6
   328d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   328d8:	2001      	movs	r0, #1
   328da:	f01b fec7 	bl	4e66c <bt_gatt_foreach_attr>
		if (id) {
   328de:	2c00      	cmp	r4, #0
   328e0:	d03e      	beq.n	32960 <bt_gatt_clear+0xa0>
			u8_to_dec(id_str, sizeof(id_str), id);
   328e2:	af02      	add	r7, sp, #8
   328e4:	4622      	mov	r2, r4
   328e6:	2104      	movs	r1, #4
   328e8:	4638      	mov	r0, r7
   328ea:	f017 f852 	bl	49992 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   328ee:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   328f0:	4a35      	ldr	r2, [pc, #212]	; (329c8 <bt_gatt_clear+0x108>)
   328f2:	462b      	mov	r3, r5
   328f4:	2124      	movs	r1, #36	; 0x24
   328f6:	a805      	add	r0, sp, #20
   328f8:	f7fa fefc 	bl	2d6f4 <bt_settings_encode_key>
		return settings_delete(key);
   328fc:	a805      	add	r0, sp, #20
   328fe:	f017 ff39 	bl	4a774 <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
   32902:	2800      	cmp	r0, #0
   32904:	db2a      	blt.n	3295c <bt_gatt_clear+0x9c>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
   32906:	4629      	mov	r1, r5
   32908:	4620      	mov	r0, r4
   3290a:	f7fe ff61 	bl	317d0 <bt_gatt_clear_sc>
		if (err < 0) {
   3290e:	2800      	cmp	r0, #0
   32910:	db24      	blt.n	3295c <bt_gatt_clear+0x9c>
	cfg = find_cf_cfg_by_addr(id, addr);
   32912:	4629      	mov	r1, r5
   32914:	4620      	mov	r0, r4
   32916:	f7fe fdcb 	bl	314b0 <find_cf_cfg_by_addr>
	if (cfg) {
   3291a:	b108      	cbz	r0, 32920 <bt_gatt_clear+0x60>
		clear_cf_cfg(cfg);
   3291c:	f01b fcb8 	bl	4e290 <clear_cf_cfg>
		if (id) {
   32920:	b304      	cbz	r4, 32964 <bt_gatt_clear+0xa4>
			u8_to_dec(id_str, sizeof(id_str), id);
   32922:	4622      	mov	r2, r4
   32924:	2104      	movs	r1, #4
   32926:	4630      	mov	r0, r6
   32928:	f017 f833 	bl	49992 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   3292c:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
   3292e:	4a27      	ldr	r2, [pc, #156]	; (329cc <bt_gatt_clear+0x10c>)
   32930:	462b      	mov	r3, r5
   32932:	2124      	movs	r1, #36	; 0x24
   32934:	a805      	add	r0, sp, #20
   32936:	f7fa fedd 	bl	2d6f4 <bt_settings_encode_key>
		return settings_delete(key);
   3293a:	a805      	add	r0, sp, #20
   3293c:	f017 ff1a 	bl	4a774 <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
   32940:	2800      	cmp	r0, #0
   32942:	db0b      	blt.n	3295c <bt_gatt_clear+0x9c>
   32944:	4f22      	ldr	r7, [pc, #136]	; (329d0 <bt_gatt_clear+0x110>)
   32946:	2600      	movs	r6, #0
		if (id == sub->id &&
   32948:	f817 3c01 	ldrb.w	r3, [r7, #-1]
   3294c:	42a3      	cmp	r3, r4
   3294e:	d00b      	beq.n	32968 <bt_gatt_clear+0xa8>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   32950:	3610      	adds	r6, #16
   32952:	2ec0      	cmp	r6, #192	; 0xc0
   32954:	f107 0710 	add.w	r7, r7, #16
   32958:	d1f6      	bne.n	32948 <bt_gatt_clear+0x88>

	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
   3295a:	2000      	movs	r0, #0
}
   3295c:	b00f      	add	sp, #60	; 0x3c
   3295e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   32960:	9400      	str	r4, [sp, #0]
   32962:	e7c5      	b.n	328f0 <bt_gatt_clear+0x30>
			bt_settings_encode_key(key, sizeof(key), "cf",
   32964:	9400      	str	r4, [sp, #0]
   32966:	e7e2      	b.n	3292e <bt_gatt_clear+0x6e>
		    !bt_addr_le_cmp(addr, &sub->peer)) {
   32968:	4639      	mov	r1, r7
   3296a:	4628      	mov	r0, r5
   3296c:	f01b fa82 	bl	4de74 <bt_addr_le_cmp>
		if (id == sub->id &&
   32970:	2800      	cmp	r0, #0
   32972:	d1ed      	bne.n	32950 <bt_gatt_clear+0x90>
		struct gatt_sub *sub = &subscriptions[i];
   32974:	4d17      	ldr	r5, [pc, #92]	; (329d4 <bt_gatt_clear+0x114>)
   32976:	4435      	add	r5, r6
	return list->head;
   32978:	68ab      	ldr	r3, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   3297a:	2b00      	cmp	r3, #0
   3297c:	d0ed      	beq.n	3295a <bt_gatt_clear+0x9a>
	return node->next;
   3297e:	681c      	ldr	r4, [r3, #0]
   32980:	b104      	cbz	r4, 32984 <bt_gatt_clear+0xc4>
   32982:	3c1c      	subs	r4, #28
		params->value = 0U;
   32984:	2700      	movs	r7, #0
   32986:	f823 7c08 	strh.w	r7, [r3, #-8]
		gatt_sub_remove(NULL, sub, prev, params);
   3298a:	463a      	mov	r2, r7
   3298c:	3b1c      	subs	r3, #28
   3298e:	4629      	mov	r1, r5
   32990:	4638      	mov	r0, r7
   32992:	f01b fb15 	bl	4dfc0 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   32996:	b954      	cbnz	r4, 329ae <bt_gatt_clear+0xee>
   32998:	e7df      	b.n	3295a <bt_gatt_clear+0x9a>
   3299a:	f1a2 061c 	sub.w	r6, r2, #28
		gatt_sub_remove(NULL, sub, prev, params);
   3299e:	2200      	movs	r2, #0
		params->value = 0U;
   329a0:	82a7      	strh	r7, [r4, #20]
		gatt_sub_remove(NULL, sub, prev, params);
   329a2:	4623      	mov	r3, r4
   329a4:	4629      	mov	r1, r5
   329a6:	4610      	mov	r0, r2
   329a8:	f01b fb0a 	bl	4dfc0 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   329ac:	4634      	mov	r4, r6
   329ae:	69e2      	ldr	r2, [r4, #28]
   329b0:	2a00      	cmp	r2, #0
   329b2:	d1f2      	bne.n	3299a <bt_gatt_clear+0xda>
		params->value = 0U;
   329b4:	82a2      	strh	r2, [r4, #20]
		gatt_sub_remove(NULL, sub, prev, params);
   329b6:	4623      	mov	r3, r4
   329b8:	4629      	mov	r1, r5
   329ba:	4610      	mov	r0, r2
   329bc:	f01b fb00 	bl	4dfc0 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   329c0:	e7cb      	b.n	3295a <bt_gatt_clear+0x9a>
   329c2:	bf00      	nop
   329c4:	000316dd 	.word	0x000316dd
   329c8:	0005441c 	.word	0x0005441c
   329cc:	00054423 	.word	0x00054423
   329d0:	2000478d 	.word	0x2000478d
   329d4:	2000478c 	.word	0x2000478c

000329d8 <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
   329d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   329dc:	4603      	mov	r3, r0
   329de:	4a4c      	ldr	r2, [pc, #304]	; (32b10 <bt_gatt_disconnected+0x138>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   329e0:	4e4c      	ldr	r6, [pc, #304]	; (32b14 <bt_gatt_disconnected+0x13c>)
{
   329e2:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   329e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   329e8:	2001      	movs	r0, #1
   329ea:	f01b fe3f 	bl	4e66c <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   329ee:	4620      	mov	r0, r4
   329f0:	f7fd f9a4 	bl	2fd3c <bt_conn_index>
   329f4:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   329f6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   329fa:	b120      	cbz	r0, 32a06 <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   329fc:	f01a f9ed 	bl	4cdda <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   32a00:	2300      	movs	r3, #0
   32a02:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   32a06:	4a43      	ldr	r2, [pc, #268]	; (32b14 <bt_gatt_disconnected+0x13c>)
   32a08:	2300      	movs	r3, #0
		if (gatt_ccc_store.conn_list[i]) {
   32a0a:	f852 1b04 	ldr.w	r1, [r2], #4
   32a0e:	b929      	cbnz	r1, 32a1c <bt_gatt_disconnected+0x44>
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   32a10:	3301      	adds	r3, #1
   32a12:	2b06      	cmp	r3, #6
   32a14:	d1f9      	bne.n	32a0a <bt_gatt_disconnected+0x32>

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   32a16:	4840      	ldr	r0, [pc, #256]	; (32b18 <bt_gatt_disconnected+0x140>)
   32a18:	f01e f996 	bl	50d48 <k_work_cancel_delayable>
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   32a1c:	f104 0688 	add.w	r6, r4, #136	; 0x88
   32a20:	7a20      	ldrb	r0, [r4, #8]
   32a22:	4631      	mov	r1, r6
   32a24:	f019 fe66 	bl	4c6f4 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   32a28:	b130      	cbz	r0, 32a38 <bt_gatt_disconnected+0x60>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   32a2a:	7a20      	ldrb	r0, [r4, #8]
   32a2c:	4631      	mov	r1, r6
   32a2e:	f7ff feff 	bl	32830 <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn);
   32a32:	4620      	mov	r0, r4
   32a34:	f7fe fe9c 	bl	31770 <bt_gatt_store_cf.isra.0>
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   32a38:	7a20      	ldrb	r0, [r4, #8]
   32a3a:	4631      	mov	r1, r6
   32a3c:	f019 fe5a 	bl	4c6f4 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   32a40:	b150      	cbz	r0, 32a58 <bt_gatt_disconnected+0x80>
		struct addr_with_id addr_with_id = {
   32a42:	7a23      	ldrb	r3, [r4, #8]
   32a44:	f88d 3004 	strb.w	r3, [sp, #4]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   32a48:	4a34      	ldr	r2, [pc, #208]	; (32b1c <bt_gatt_disconnected+0x144>)
		struct addr_with_id addr_with_id = {
   32a4a:	9600      	str	r6, [sp, #0]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   32a4c:	466b      	mov	r3, sp
   32a4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   32a52:	2001      	movs	r0, #1
   32a54:	f01b fe0a 	bl	4e66c <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   32a58:	4620      	mov	r0, r4
   32a5a:	f7fe fd07 	bl	3146c <gatt_sub_find>
	if (!sub) {
   32a5e:	4607      	mov	r7, r0
   32a60:	b940      	cbnz	r0, 32a74 <bt_gatt_disconnected+0x9c>
	cfg = find_cf_cfg(conn);
   32a62:	4620      	mov	r0, r4
   32a64:	f7fe fcc4 	bl	313f0 <find_cf_cfg>
	if (!cfg) {
   32a68:	4605      	mov	r5, r0
   32a6a:	2800      	cmp	r0, #0
   32a6c:	d137      	bne.n	32ade <bt_gatt_disconnected+0x106>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   32a6e:	b002      	add	sp, #8
   32a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return list->head;
   32a74:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   32a76:	2d00      	cmp	r5, #0
   32a78:	d0f3      	beq.n	32a62 <bt_gatt_disconnected+0x8a>
	return node->next;
   32a7a:	f855 891c 	ldr.w	r8, [r5], #-28
   32a7e:	f1b8 0f00 	cmp.w	r8, #0
   32a82:	d001      	beq.n	32a88 <bt_gatt_disconnected+0xb0>
   32a84:	f1a8 081c 	sub.w	r8, r8, #28
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   32a88:	f04f 0900 	mov.w	r9, #0
			params->value = 0U;
   32a8c:	46ca      	mov	sl, r9
   32a8e:	e001      	b.n	32a94 <bt_gatt_disconnected+0xbc>
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   32a90:	4645      	mov	r5, r8
   32a92:	4698      	mov	r8, r3
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   32a94:	7a20      	ldrb	r0, [r4, #8]
   32a96:	4631      	mov	r1, r6
   32a98:	f019 fe2c 	bl	4c6f4 <bt_addr_le_is_bonded>
   32a9c:	b980      	cbnz	r0, 32ac0 <bt_gatt_disconnected+0xe8>
			params->value = 0U;
   32a9e:	f8a5 a014 	strh.w	sl, [r5, #20]
			gatt_sub_remove(conn, sub, prev, params);
   32aa2:	462b      	mov	r3, r5
   32aa4:	464a      	mov	r2, r9
   32aa6:	4639      	mov	r1, r7
   32aa8:	4620      	mov	r0, r4
   32aaa:	f01b fa89 	bl	4dfc0 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   32aae:	f1b8 0f00 	cmp.w	r8, #0
   32ab2:	d0d6      	beq.n	32a62 <bt_gatt_disconnected+0x8a>
   32ab4:	f8d8 301c 	ldr.w	r3, [r8, #28]
   32ab8:	2b00      	cmp	r3, #0
   32aba:	d0e9      	beq.n	32a90 <bt_gatt_disconnected+0xb8>
   32abc:	3b1c      	subs	r3, #28
   32abe:	e7e7      	b.n	32a90 <bt_gatt_disconnected+0xb8>
   32ac0:	f105 0018 	add.w	r0, r5, #24
   32ac4:	f01b f96e 	bl	4dda4 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   32ac8:	07c3      	lsls	r3, r0, #31
   32aca:	d4e8      	bmi.n	32a9e <bt_gatt_disconnected+0xc6>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   32acc:	787b      	ldrb	r3, [r7, #1]
   32ace:	b11b      	cbz	r3, 32ad8 <bt_gatt_disconnected+0x100>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   32ad0:	4631      	mov	r1, r6
   32ad2:	1c78      	adds	r0, r7, #1
   32ad4:	f01b fa13 	bl	4defe <bt_addr_le_copy>
			prev = &params->node;
   32ad8:	f105 091c 	add.w	r9, r5, #28
   32adc:	e7e7      	b.n	32aae <bt_gatt_disconnected+0xd6>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   32ade:	7a20      	ldrb	r0, [r4, #8]
   32ae0:	4631      	mov	r1, r6
   32ae2:	f019 fe07 	bl	4c6f4 <bt_addr_le_is_bonded>
   32ae6:	b928      	cbnz	r0, 32af4 <bt_gatt_disconnected+0x11c>
		clear_cf_cfg(cfg);
   32ae8:	4628      	mov	r0, r5
}
   32aea:	b002      	add	sp, #8
   32aec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		clear_cf_cfg(cfg);
   32af0:	f01b bbce 	b.w	4e290 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   32af4:	4631      	mov	r1, r6
   32af6:	1c68      	adds	r0, r5, #1
   32af8:	f01b fa01 	bl	4defe <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   32afc:	f06f 0102 	mvn.w	r1, #2
   32b00:	f105 000c 	add.w	r0, r5, #12
}
   32b04:	b002      	add	sp, #8
   32b06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32b0a:	f01b baac 	b.w	4e066 <atomic_and>
   32b0e:	bf00      	nop
   32b10:	0003181d 	.word	0x0003181d
   32b14:	20002518 	.word	0x20002518
   32b18:	20002530 	.word	0x20002530
   32b1c:	000316dd 	.word	0x000316dd

00032b20 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   32b20:	4b10      	ldr	r3, [pc, #64]	; (32b64 <get_io_capa+0x44>)
   32b22:	681a      	ldr	r2, [r3, #0]
   32b24:	b1ca      	cbz	r2, 32b5a <get_io_capa+0x3a>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   32b26:	e9d2 1301 	ldrd	r1, r3, [r2, #4]
   32b2a:	b921      	cbnz	r1, 32b36 <get_io_capa+0x16>
	if (bt_auth->passkey_entry) {
		if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
		    fixed_passkey != BT_PASSKEY_INVALID) {
			return BT_SMP_IO_KEYBOARD_DISPLAY;
		} else {
			return BT_SMP_IO_KEYBOARD_ONLY;
   32b2c:	2b00      	cmp	r3, #0
   32b2e:	bf0c      	ite	eq
   32b30:	2003      	moveq	r0, #3
   32b32:	2002      	movne	r0, #2
   32b34:	4770      	bx	lr
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   32b36:	b133      	cbz	r3, 32b46 <get_io_capa+0x26>
   32b38:	68d2      	ldr	r2, [r2, #12]
   32b3a:	b912      	cbnz	r2, 32b42 <get_io_capa+0x22>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   32b3c:	4a0a      	ldr	r2, [pc, #40]	; (32b68 <get_io_capa+0x48>)
   32b3e:	7812      	ldrb	r2, [r2, #0]
   32b40:	b932      	cbnz	r2, 32b50 <get_io_capa+0x30>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   32b42:	2004      	movs	r0, #4
   32b44:	4770      	bx	lr
	if (sc_supported && bt_auth->passkey_display &&
   32b46:	4908      	ldr	r1, [pc, #32]	; (32b68 <get_io_capa+0x48>)
   32b48:	7808      	ldrb	r0, [r1, #0]
   32b4a:	b148      	cbz	r0, 32b60 <get_io_capa+0x40>
   32b4c:	68d2      	ldr	r2, [r2, #12]
   32b4e:	b932      	cbnz	r2, 32b5e <get_io_capa+0x3e>
	if (bt_auth->passkey_entry) {
   32b50:	3b00      	subs	r3, #0
   32b52:	bf18      	it	ne
   32b54:	2301      	movne	r3, #1
   32b56:	0058      	lsls	r0, r3, #1
   32b58:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   32b5a:	2003      	movs	r0, #3
   32b5c:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   32b5e:	2001      	movs	r0, #1
	}
}
   32b60:	4770      	bx	lr
   32b62:	bf00      	nop
   32b64:	2000460c 	.word	0x2000460c
   32b68:	20007416 	.word	0x20007416

00032b6c <get_pair_method>:

	return true;
}

static uint8_t get_pair_method(struct bt_smp *smp, uint8_t remote_io)
{
   32b6c:	b510      	push	{r4, lr}
   32b6e:	460c      	mov	r4, r1
	struct bt_smp_pairing *req, *rsp;

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   32b70:	7b03      	ldrb	r3, [r0, #12]
   32b72:	7cc1      	ldrb	r1, [r0, #19]
   32b74:	ea03 0201 	and.w	r2, r3, r1
   32b78:	0712      	lsls	r2, r2, #28
   32b7a:	d504      	bpl.n	32b86 <get_pair_method+0x1a>
		/* if one side has OOB data use OOB */
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   32b7c:	7ac2      	ldrb	r2, [r0, #11]
   32b7e:	7c80      	ldrb	r0, [r0, #18]
   32b80:	4302      	orrs	r2, r0
   32b82:	07d2      	lsls	r2, r2, #31
   32b84:	d40e      	bmi.n	32ba4 <get_pair_method+0x38>
			return LE_SC_OOB;
		}
	}

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   32b86:	2c04      	cmp	r4, #4
   32b88:	d80e      	bhi.n	32ba8 <get_pair_method+0x3c>
		return JUST_WORKS;
	}

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   32b8a:	ea43 0001 	orr.w	r0, r3, r1
   32b8e:	f010 0004 	ands.w	r0, r0, #4
   32b92:	d006      	beq.n	32ba2 <get_pair_method+0x36>
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
   32b94:	f7ff ffc4 	bl	32b20 <get_io_capa>
   32b98:	4b04      	ldr	r3, [pc, #16]	; (32bac <get_pair_method+0x40>)
   32b9a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   32b9e:	4423      	add	r3, r4
   32ba0:	5c18      	ldrb	r0, [r3, r0]
#else
	return JUST_WORKS;
#endif
}
   32ba2:	bd10      	pop	{r4, pc}
			return LE_SC_OOB;
   32ba4:	2005      	movs	r0, #5
   32ba6:	e7fc      	b.n	32ba2 <get_pair_method+0x36>
		return JUST_WORKS;
   32ba8:	2000      	movs	r0, #0
   32baa:	e7fa      	b.n	32ba2 <get_pair_method+0x36>
   32bac:	0005445c 	.word	0x0005445c

00032bb0 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   32bb0:	b530      	push	{r4, r5, lr}
   32bb2:	4c0c      	ldr	r4, [pc, #48]	; (32be4 <bt_smp_accept+0x34>)
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   32bb4:	2300      	movs	r3, #0
   32bb6:	4622      	mov	r2, r4
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   32bb8:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   32bbc:	b138      	cbz	r0, 32bce <bt_smp_accept+0x1e>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   32bbe:	3301      	adds	r3, #1
   32bc0:	2b06      	cmp	r3, #6
   32bc2:	f504 7402 	add.w	r4, r4, #520	; 0x208
   32bc6:	d1f7      	bne.n	32bb8 <bt_smp_accept+0x8>
		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   32bc8:	f06f 000b 	mvn.w	r0, #11
}
   32bcc:	bd30      	pop	{r4, r5, pc}
		smp->chan.chan.ops = &ops;
   32bce:	f44f 7402 	mov.w	r4, #520	; 0x208
   32bd2:	4363      	muls	r3, r4
   32bd4:	18d4      	adds	r4, r2, r3
		*chan = &smp->chan.chan;
   32bd6:	33f0      	adds	r3, #240	; 0xf0
		smp->chan.chan.ops = &ops;
   32bd8:	4d03      	ldr	r5, [pc, #12]	; (32be8 <bt_smp_accept+0x38>)
   32bda:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		*chan = &smp->chan.chan;
   32bde:	441a      	add	r2, r3
   32be0:	600a      	str	r2, [r1, #0]
		return 0;
   32be2:	e7f3      	b.n	32bcc <bt_smp_accept+0x1c>
   32be4:	20002630 	.word	0x20002630
   32be8:	00052ae0 	.word	0x00052ae0

00032bec <smp_find>:
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   32bec:	4a08      	ldr	r2, [pc, #32]	; (32c10 <smp_find+0x24>)
{
   32bee:	b510      	push	{r4, lr}
   32bf0:	4601      	mov	r1, r0
   32bf2:	2300      	movs	r3, #0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   32bf4:	1d14      	adds	r4, r2, #4
   32bf6:	18e0      	adds	r0, r4, r3
   32bf8:	f01c f950 	bl	4ee9c <atomic_test_bit>
   32bfc:	b108      	cbz	r0, 32c02 <smp_find+0x16>
			return &bt_smp_pool[i];
   32bfe:	1898      	adds	r0, r3, r2
}
   32c00:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   32c02:	f503 7302 	add.w	r3, r3, #520	; 0x208
   32c06:	f5b3 6f43 	cmp.w	r3, #3120	; 0xc30
   32c0a:	d1f4      	bne.n	32bf6 <smp_find+0xa>
   32c0c:	e7f8      	b.n	32c00 <smp_find+0x14>
   32c0e:	bf00      	nop
   32c10:	20002630 	.word	0x20002630

00032c14 <smp_g2>:
{
   32c14:	b5f0      	push	{r4, r5, r6, r7, lr}
   32c16:	b099      	sub	sp, #100	; 0x64
   32c18:	4614      	mov	r4, r2
   32c1a:	460f      	mov	r7, r1
	sys_memcpy_swap(m, u, 32);
   32c1c:	2220      	movs	r2, #32
   32c1e:	4601      	mov	r1, r0
   32c20:	a804      	add	r0, sp, #16
{
   32c22:	461e      	mov	r6, r3
   32c24:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
   32c26:	f01c f90b 	bl	4ee40 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   32c2a:	2220      	movs	r2, #32
   32c2c:	4639      	mov	r1, r7
   32c2e:	a80c      	add	r0, sp, #48	; 0x30
   32c30:	f01c f906 	bl	4ee40 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   32c34:	2210      	movs	r2, #16
   32c36:	4631      	mov	r1, r6
   32c38:	a814      	add	r0, sp, #80	; 0x50
   32c3a:	f01c f901 	bl	4ee40 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   32c3e:	4621      	mov	r1, r4
   32c40:	2210      	movs	r2, #16
   32c42:	4668      	mov	r0, sp
   32c44:	f01c f8fc 	bl	4ee40 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   32c48:	466b      	mov	r3, sp
   32c4a:	2250      	movs	r2, #80	; 0x50
   32c4c:	a904      	add	r1, sp, #16
   32c4e:	4618      	mov	r0, r3
   32c50:	f01c f9af 	bl	4efb2 <bt_smp_aes_cmac>
	if (err) {
   32c54:	4604      	mov	r4, r0
   32c56:	b960      	cbnz	r0, 32c72 <smp_g2+0x5e>
	memcpy(passkey, xs + 12, 4);
   32c58:	2204      	movs	r2, #4
   32c5a:	a903      	add	r1, sp, #12
   32c5c:	4628      	mov	r0, r5
   32c5e:	f019 f882 	bl	4bd66 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   32c62:	682b      	ldr	r3, [r5, #0]
   32c64:	4a04      	ldr	r2, [pc, #16]	; (32c78 <smp_g2+0x64>)
   32c66:	ba1b      	rev	r3, r3
   32c68:	fbb3 f1f2 	udiv	r1, r3, r2
   32c6c:	fb02 3311 	mls	r3, r2, r1, r3
   32c70:	602b      	str	r3, [r5, #0]
}
   32c72:	4620      	mov	r0, r4
   32c74:	b019      	add	sp, #100	; 0x64
   32c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32c78:	000f4240 	.word	0x000f4240

00032c7c <get_auth.constprop.0>:
	if (sc_supported) {
   32c7c:	4b0c      	ldr	r3, [pc, #48]	; (32cb0 <get_auth.constprop.0+0x34>)
   32c7e:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   32c80:	b510      	push	{r4, lr}
	if (sc_supported) {
   32c82:	b17b      	cbz	r3, 32ca4 <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   32c84:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   32c88:	f7ff ff4a 	bl	32b20 <get_io_capa>
	if (bondable) {
   32c8c:	4b09      	ldr	r3, [pc, #36]	; (32cb4 <get_auth.constprop.0+0x38>)
   32c8e:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   32c90:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   32c92:	bf0c      	ite	eq
   32c94:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   32c98:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   32c9c:	b12b      	cbz	r3, 32caa <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   32c9e:	f044 0001 	orr.w	r0, r4, #1
}
   32ca2:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   32ca4:	f000 0407 	and.w	r4, r0, #7
   32ca8:	e7ee      	b.n	32c88 <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   32caa:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   32cae:	e7f8      	b.n	32ca2 <get_auth.constprop.0+0x26>
   32cb0:	20007416 	.word	0x20007416
   32cb4:	20000ffc 	.word	0x20000ffc

00032cb8 <smp_f5>:
{
   32cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32cbc:	b09a      	sub	sp, #104	; 0x68
   32cbe:	461d      	mov	r5, r3
   32cc0:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	uint8_t m[53] = { 0x00, /* counter */
   32cc4:	4b2e      	ldr	r3, [pc, #184]	; (32d80 <smp_f5+0xc8>)
{
   32cc6:	4616      	mov	r6, r2
	uint8_t m[53] = { 0x00, /* counter */
   32cc8:	aa0c      	add	r2, sp, #48	; 0x30
{
   32cca:	4684      	mov	ip, r0
   32ccc:	468a      	mov	sl, r1
	uint8_t m[53] = { 0x00, /* counter */
   32cce:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   32cd2:	4690      	mov	r8, r2
   32cd4:	6818      	ldr	r0, [r3, #0]
   32cd6:	6859      	ldr	r1, [r3, #4]
   32cd8:	4614      	mov	r4, r2
   32cda:	c403      	stmia	r4!, {r0, r1}
   32cdc:	3308      	adds	r3, #8
   32cde:	4573      	cmp	r3, lr
   32ce0:	4622      	mov	r2, r4
   32ce2:	d1f7      	bne.n	32cd4 <smp_f5+0x1c>
   32ce4:	6818      	ldr	r0, [r3, #0]
   32ce6:	791b      	ldrb	r3, [r3, #4]
   32ce8:	6020      	str	r0, [r4, #0]
   32cea:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   32cec:	4661      	mov	r1, ip
   32cee:	2220      	movs	r2, #32
   32cf0:	a804      	add	r0, sp, #16
   32cf2:	f01c f8a5 	bl	4ee40 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   32cf6:	4823      	ldr	r0, [pc, #140]	; (32d84 <smp_f5+0xcc>)
   32cf8:	466b      	mov	r3, sp
   32cfa:	2220      	movs	r2, #32
   32cfc:	a904      	add	r1, sp, #16
   32cfe:	f01c f958 	bl	4efb2 <bt_smp_aes_cmac>
	if (err) {
   32d02:	4604      	mov	r4, r0
   32d04:	bbc0      	cbnz	r0, 32d78 <smp_f5+0xc0>
	sys_memcpy_swap(m + 5, n1, 16);
   32d06:	2210      	movs	r2, #16
   32d08:	4651      	mov	r1, sl
   32d0a:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   32d0e:	f01c f897 	bl	4ee40 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   32d12:	2210      	movs	r2, #16
   32d14:	4631      	mov	r1, r6
   32d16:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   32d1a:	f01c f891 	bl	4ee40 <sys_memcpy_swap>
	m[37] = a1->type;
   32d1e:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   32d20:	2206      	movs	r2, #6
	m[37] = a1->type;
   32d22:	f811 3b01 	ldrb.w	r3, [r1], #1
   32d26:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   32d2a:	f10d 0056 	add.w	r0, sp, #86	; 0x56
   32d2e:	f01c f887 	bl	4ee40 <sys_memcpy_swap>
	m[44] = a2->type;
   32d32:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   32d34:	2206      	movs	r2, #6
	m[44] = a2->type;
   32d36:	f811 3b01 	ldrb.w	r3, [r1], #1
   32d3a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   32d3e:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
   32d42:	f01c f87d 	bl	4ee40 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   32d46:	464b      	mov	r3, r9
   32d48:	2235      	movs	r2, #53	; 0x35
   32d4a:	4641      	mov	r1, r8
   32d4c:	4668      	mov	r0, sp
   32d4e:	f01c f930 	bl	4efb2 <bt_smp_aes_cmac>
	if (err) {
   32d52:	4604      	mov	r4, r0
   32d54:	b980      	cbnz	r0, 32d78 <smp_f5+0xc0>
	sys_mem_swap(mackey, 16);
   32d56:	4648      	mov	r0, r9
   32d58:	f01c f967 	bl	4f02a <sys_mem_swap.constprop.0>
	m[0] = 0x01;
   32d5c:	2301      	movs	r3, #1
   32d5e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   32d62:	2235      	movs	r2, #53	; 0x35
   32d64:	463b      	mov	r3, r7
   32d66:	4641      	mov	r1, r8
   32d68:	4668      	mov	r0, sp
   32d6a:	f01c f922 	bl	4efb2 <bt_smp_aes_cmac>
	if (err) {
   32d6e:	4604      	mov	r4, r0
   32d70:	b910      	cbnz	r0, 32d78 <smp_f5+0xc0>
	sys_mem_swap(ltk, 16);
   32d72:	4638      	mov	r0, r7
   32d74:	f01c f959 	bl	4f02a <sys_mem_swap.constprop.0>
}
   32d78:	4620      	mov	r0, r4
   32d7a:	b01a      	add	sp, #104	; 0x68
   32d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32d80:	00051ade 	.word	0x00051ade
   32d84:	0005444c 	.word	0x0005444c

00032d88 <sc_smp_check_confirm>:
{
   32d88:	b530      	push	{r4, r5, lr}
	switch (smp->method) {
   32d8a:	7a03      	ldrb	r3, [r0, #8]
{
   32d8c:	b087      	sub	sp, #28
   32d8e:	4604      	mov	r4, r0
	switch (smp->method) {
   32d90:	2b05      	cmp	r3, #5
   32d92:	d818      	bhi.n	32dc6 <sc_smp_check_confirm+0x3e>
   32d94:	e8df f003 	tbb	[pc, r3]
   32d98:	1a03031a 	.word	0x1a03031a
   32d9c:	2717      	.short	0x2717
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   32d9e:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   32da2:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
   32da6:	40d3      	lsrs	r3, r2
   32da8:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   32dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   32db0:	490e      	ldr	r1, [pc, #56]	; (32dec <sc_smp_check_confirm+0x64>)
   32db2:	ad02      	add	r5, sp, #8
   32db4:	9500      	str	r5, [sp, #0]
   32db6:	6809      	ldr	r1, [r1, #0]
   32db8:	f104 0237 	add.w	r2, r4, #55	; 0x37
   32dbc:	f104 0057 	add.w	r0, r4, #87	; 0x57
   32dc0:	f01c f98d 	bl	4f0de <smp_f4>
   32dc4:	b120      	cbz	r0, 32dd0 <sc_smp_check_confirm+0x48>
		return BT_SMP_ERR_UNSPECIFIED;
   32dc6:	2008      	movs	r0, #8
}
   32dc8:	b007      	add	sp, #28
   32dca:	bd30      	pop	{r4, r5, pc}
	switch (smp->method) {
   32dcc:	2300      	movs	r3, #0
   32dce:	e7ef      	b.n	32db0 <sc_smp_check_confirm+0x28>
	if (memcmp(smp->pcnf, cfm, 16)) {
   32dd0:	2210      	movs	r2, #16
   32dd2:	4629      	mov	r1, r5
   32dd4:	f104 0017 	add.w	r0, r4, #23
   32dd8:	f018 ffb5 	bl	4bd46 <memcmp>
   32ddc:	3800      	subs	r0, #0
   32dde:	bf18      	it	ne
   32de0:	2001      	movne	r0, #1
   32de2:	0080      	lsls	r0, r0, #2
   32de4:	e7f0      	b.n	32dc8 <sc_smp_check_confirm+0x40>
	switch (smp->method) {
   32de6:	2000      	movs	r0, #0
   32de8:	e7ee      	b.n	32dc8 <sc_smp_check_confirm+0x40>
   32dea:	bf00      	nop
   32dec:	2000484c 	.word	0x2000484c

00032df0 <sec_level_reachable.isra.0>:
	switch (conn->required_sec_level) {
   32df0:	2803      	cmp	r0, #3
static bool sec_level_reachable(struct bt_conn *conn)
   32df2:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
   32df4:	d00a      	beq.n	32e0c <sec_level_reachable.isra.0+0x1c>
   32df6:	d805      	bhi.n	32e04 <sec_level_reachable.isra.0+0x14>
   32df8:	3801      	subs	r0, #1
   32dfa:	2801      	cmp	r0, #1
   32dfc:	bf8c      	ite	hi
   32dfe:	2000      	movhi	r0, #0
   32e00:	2001      	movls	r0, #1
}
   32e02:	bd08      	pop	{r3, pc}
	switch (conn->required_sec_level) {
   32e04:	2804      	cmp	r0, #4
   32e06:	d010      	beq.n	32e2a <sec_level_reachable.isra.0+0x3a>
   32e08:	2000      	movs	r0, #0
   32e0a:	e7fa      	b.n	32e02 <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   32e0c:	f7ff fe88 	bl	32b20 <get_io_capa>
   32e10:	2803      	cmp	r0, #3
   32e12:	d108      	bne.n	32e26 <sec_level_reachable.isra.0+0x36>
		       (bt_auth && bt_auth->oob_data_request);
   32e14:	4b0c      	ldr	r3, [pc, #48]	; (32e48 <sec_level_reachable.isra.0+0x58>)
   32e16:	6818      	ldr	r0, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   32e18:	2800      	cmp	r0, #0
   32e1a:	d0f2      	beq.n	32e02 <sec_level_reachable.isra.0+0x12>
		       (bt_auth && bt_auth->oob_data_request);
   32e1c:	6900      	ldr	r0, [r0, #16]
   32e1e:	3800      	subs	r0, #0
   32e20:	bf18      	it	ne
   32e22:	2001      	movne	r0, #1
   32e24:	e7ed      	b.n	32e02 <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   32e26:	2001      	movs	r0, #1
   32e28:	e7eb      	b.n	32e02 <sec_level_reachable.isra.0+0x12>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   32e2a:	f7ff fe79 	bl	32b20 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   32e2e:	2803      	cmp	r0, #3
   32e30:	d104      	bne.n	32e3c <sec_level_reachable.isra.0+0x4c>
   32e32:	4b05      	ldr	r3, [pc, #20]	; (32e48 <sec_level_reachable.isra.0+0x58>)
   32e34:	6818      	ldr	r0, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   32e36:	b118      	cbz	r0, 32e40 <sec_level_reachable.isra.0+0x50>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   32e38:	6900      	ldr	r0, [r0, #16]
   32e3a:	b108      	cbz	r0, 32e40 <sec_level_reachable.isra.0+0x50>
   32e3c:	4b03      	ldr	r3, [pc, #12]	; (32e4c <sec_level_reachable.isra.0+0x5c>)
   32e3e:	7818      	ldrb	r0, [r3, #0]
   32e40:	f000 0001 	and.w	r0, r0, #1
   32e44:	e7dd      	b.n	32e02 <sec_level_reachable.isra.0+0x12>
   32e46:	bf00      	nop
   32e48:	2000460c 	.word	0x2000460c
   32e4c:	20007416 	.word	0x20007416

00032e50 <display_passkey>:
{
   32e50:	b538      	push	{r3, r4, r5, lr}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   32e52:	2104      	movs	r1, #4
{
   32e54:	4604      	mov	r4, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   32e56:	30d8      	adds	r0, #216	; 0xd8
   32e58:	f004 f960 	bl	3711c <bt_rand>
   32e5c:	b9e0      	cbnz	r0, 32e98 <display_passkey+0x48>
		smp->passkey %= 1000000;
   32e5e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   32e62:	4a0e      	ldr	r2, [pc, #56]	; (32e9c <display_passkey+0x4c>)
	if (bt_auth && bt_auth->passkey_display) {
   32e64:	4d0e      	ldr	r5, [pc, #56]	; (32ea0 <display_passkey+0x50>)
		smp->passkey %= 1000000;
   32e66:	fbb3 f1f2 	udiv	r1, r3, r2
   32e6a:	fb02 3311 	mls	r3, r2, r1, r3
   32e6e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   32e72:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
   32e74:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   32e78:	b163      	cbz	r3, 32e94 <display_passkey+0x44>
   32e7a:	685b      	ldr	r3, [r3, #4]
   32e7c:	b153      	cbz	r3, 32e94 <display_passkey+0x44>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   32e7e:	210b      	movs	r1, #11
   32e80:	1d20      	adds	r0, r4, #4
   32e82:	f01c f951 	bl	4f128 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   32e86:	682b      	ldr	r3, [r5, #0]
   32e88:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   32e8c:	685b      	ldr	r3, [r3, #4]
   32e8e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   32e92:	4798      	blx	r3
	return 0;
   32e94:	2000      	movs	r0, #0
}
   32e96:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   32e98:	2008      	movs	r0, #8
   32e9a:	e7fc      	b.n	32e96 <display_passkey+0x46>
   32e9c:	000f4240 	.word	0x000f4240
   32ea0:	2000460c 	.word	0x2000460c

00032ea4 <smp_init>:
{
   32ea4:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   32ea6:	22f0      	movs	r2, #240	; 0xf0
{
   32ea8:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   32eaa:	2100      	movs	r1, #0
   32eac:	f018 ff66 	bl	4bd7c <memset>
	if (bt_rand(smp->prnd, 16)) {
   32eb0:	2110      	movs	r1, #16
   32eb2:	f105 0027 	add.w	r0, r5, #39	; 0x27
   32eb6:	f004 f931 	bl	3711c <bt_rand>
   32eba:	4604      	mov	r4, r0
   32ebc:	b948      	cbnz	r0, 32ed2 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   32ebe:	2105      	movs	r1, #5
   32ec0:	4628      	mov	r0, r5
   32ec2:	f01c f931 	bl	4f128 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   32ec6:	f7fc fc57 	bl	2f778 <bt_pub_key_get>
   32eca:	4b03      	ldr	r3, [pc, #12]	; (32ed8 <smp_init+0x34>)
   32ecc:	6018      	str	r0, [r3, #0]
}
   32ece:	4620      	mov	r0, r4
   32ed0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   32ed2:	2408      	movs	r4, #8
   32ed4:	e7fb      	b.n	32ece <smp_init+0x2a>
   32ed6:	bf00      	nop
   32ed8:	2000484c 	.word	0x2000484c

00032edc <smp_dhkey_generate>:
{
   32edc:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   32ede:	1d05      	adds	r5, r0, #4
{
   32ee0:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   32ee2:	2108      	movs	r1, #8
   32ee4:	4628      	mov	r0, r5
   32ee6:	f01c f91f 	bl	4f128 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   32eea:	4906      	ldr	r1, [pc, #24]	; (32f04 <smp_dhkey_generate+0x28>)
   32eec:	f104 0057 	add.w	r0, r4, #87	; 0x57
   32ef0:	f7fc fc52 	bl	2f798 <bt_dh_key_gen>
	if (err) {
   32ef4:	b120      	cbz	r0, 32f00 <smp_dhkey_generate+0x24>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   32ef6:	4628      	mov	r0, r5
   32ef8:	2108      	movs	r1, #8
   32efa:	f01c f84b 	bl	4ef94 <atomic_clear_bit>
		return BT_SMP_ERR_UNSPECIFIED;
   32efe:	2008      	movs	r0, #8
}
   32f00:	bd38      	pop	{r3, r4, r5, pc}
   32f02:	bf00      	nop
   32f04:	0004f8ab 	.word	0x0004f8ab

00032f08 <smp_send_pairing_req>:
{
   32f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32f0c:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   32f0e:	f01b ffbe 	bl	4ee8e <smp_chan_get>
	if (!smp) {
   32f12:	4604      	mov	r4, r0
   32f14:	2800      	cmp	r0, #0
   32f16:	d070      	beq.n	32ffa <smp_send_pairing_req+0xf2>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   32f18:	1d06      	adds	r6, r0, #4
   32f1a:	2104      	movs	r1, #4
   32f1c:	4630      	mov	r0, r6
   32f1e:	f01b ffbd 	bl	4ee9c <atomic_test_bit>
   32f22:	2800      	cmp	r0, #0
   32f24:	d16c      	bne.n	33000 <smp_send_pairing_req+0xf8>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   32f26:	2102      	movs	r1, #2
   32f28:	4630      	mov	r0, r6
   32f2a:	f01b ffb7 	bl	4ee9c <atomic_test_bit>
   32f2e:	2800      	cmp	r0, #0
   32f30:	d161      	bne.n	32ff6 <smp_send_pairing_req+0xee>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   32f32:	2103      	movs	r1, #3
   32f34:	4630      	mov	r0, r6
   32f36:	f01b ffb1 	bl	4ee9c <atomic_test_bit>
   32f3a:	b118      	cbz	r0, 32f44 <smp_send_pairing_req+0x3c>
		return -EBUSY;
   32f3c:	f06f 000f 	mvn.w	r0, #15
}
   32f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   32f44:	2101      	movs	r1, #1
   32f46:	4630      	mov	r0, r6
   32f48:	f01b ffa8 	bl	4ee9c <atomic_test_bit>
   32f4c:	2800      	cmp	r0, #0
   32f4e:	d1f5      	bne.n	32f3c <smp_send_pairing_req+0x34>
	if (!sec_level_reachable(conn)) {
   32f50:	7aa8      	ldrb	r0, [r5, #10]
   32f52:	f7ff ff4d 	bl	32df0 <sec_level_reachable.isra.0>
   32f56:	2800      	cmp	r0, #0
   32f58:	d055      	beq.n	33006 <smp_send_pairing_req+0xfe>
	if (!conn->le.keys) {
   32f5a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   32f5e:	b133      	cbz	r3, 32f6e <smp_send_pairing_req+0x66>
	if (smp_init(smp)) {
   32f60:	4620      	mov	r0, r4
   32f62:	f7ff ff9f 	bl	32ea4 <smp_init>
   32f66:	b170      	cbz	r0, 32f86 <smp_send_pairing_req+0x7e>
		return -ENOBUFS;
   32f68:	f06f 0068 	mvn.w	r0, #104	; 0x68
   32f6c:	e7e8      	b.n	32f40 <smp_send_pairing_req+0x38>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   32f6e:	7a28      	ldrb	r0, [r5, #8]
   32f70:	f105 0188 	add.w	r1, r5, #136	; 0x88
   32f74:	f000 fe2c 	bl	33bd0 <bt_keys_get_addr>
   32f78:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   32f7c:	2800      	cmp	r0, #0
   32f7e:	d1ef      	bne.n	32f60 <smp_send_pairing_req+0x58>
			return -ENOMEM;
   32f80:	f06f 000b 	mvn.w	r0, #11
   32f84:	e7dc      	b.n	32f40 <smp_send_pairing_req+0x38>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   32f86:	2101      	movs	r1, #1
   32f88:	4620      	mov	r0, r4
   32f8a:	f01c f911 	bl	4f1b0 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   32f8e:	4607      	mov	r7, r0
   32f90:	2800      	cmp	r0, #0
   32f92:	d0e9      	beq.n	32f68 <smp_send_pairing_req+0x60>
   32f94:	2106      	movs	r1, #6
   32f96:	3008      	adds	r0, #8
   32f98:	f01c fec6 	bl	4fd28 <net_buf_simple_add>
   32f9c:	4605      	mov	r5, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   32f9e:	2009      	movs	r0, #9
   32fa0:	f7ff fe6c 	bl	32c7c <get_auth.constprop.0>
   32fa4:	70a8      	strb	r0, [r5, #2]
	req->io_capability = get_io_capa();
   32fa6:	f7ff fdbb 	bl	32b20 <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   32faa:	4b18      	ldr	r3, [pc, #96]	; (3300c <smp_send_pairing_req+0x104>)
	req->io_capability = get_io_capa();
   32fac:	7028      	strb	r0, [r5, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   32fae:	781b      	ldrb	r3, [r3, #0]
   32fb0:	706b      	strb	r3, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   32fb2:	2310      	movs	r3, #16
   32fb4:	70eb      	strb	r3, [r5, #3]
	req->resp_key_dist = RECV_KEYS;
   32fb6:	f04f 0803 	mov.w	r8, #3
	req->init_key_dist = SEND_KEYS;
   32fba:	2301      	movs	r3, #1
	smp->local_dist = SEND_KEYS;
   32fbc:	f240 3201 	movw	r2, #769	; 0x301
	req->init_key_dist = SEND_KEYS;
   32fc0:	712b      	strb	r3, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
   32fc2:	f885 8005 	strb.w	r8, [r5, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
   32fc6:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   32fc8:	7263      	strb	r3, [r4, #9]
	smp->local_dist = SEND_KEYS;
   32fca:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
	memcpy(smp->preq + 1, req, sizeof(*req));
   32fce:	f104 000a 	add.w	r0, r4, #10
   32fd2:	2206      	movs	r2, #6
   32fd4:	f018 fec7 	bl	4bd66 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   32fd8:	4639      	mov	r1, r7
   32fda:	4620      	mov	r0, r4
   32fdc:	f01c f809 	bl	4eff2 <smp_send.constprop.0>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
   32fe0:	4620      	mov	r0, r4
   32fe2:	2102      	movs	r1, #2
   32fe4:	f01c f8a0 	bl	4f128 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   32fe8:	210b      	movs	r1, #11
   32fea:	f01c f89d 	bl	4f128 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   32fee:	4641      	mov	r1, r8
   32ff0:	4630      	mov	r0, r6
   32ff2:	f01c f899 	bl	4f128 <atomic_set_bit>
		return 0;
   32ff6:	2000      	movs	r0, #0
   32ff8:	e7a2      	b.n	32f40 <smp_send_pairing_req+0x38>
		return -ENOTCONN;
   32ffa:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   32ffe:	e79f      	b.n	32f40 <smp_send_pairing_req+0x38>
		return -EIO;
   33000:	f06f 0004 	mvn.w	r0, #4
   33004:	e79c      	b.n	32f40 <smp_send_pairing_req+0x38>
		return -EINVAL;
   33006:	f06f 0015 	mvn.w	r0, #21
   3300a:	e799      	b.n	32f40 <smp_send_pairing_req+0x38>
   3300c:	20007417 	.word	0x20007417

00033010 <smp_security_request>:
{
   33010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   33012:	1d04      	adds	r4, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   33014:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	struct bt_smp_security_request *req = (void *)buf->data;
   33018:	688b      	ldr	r3, [r1, #8]
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   3301a:	4620      	mov	r0, r4
   3301c:	2102      	movs	r1, #2
   3301e:	f01b ff3d 	bl	4ee9c <atomic_test_bit>
   33022:	2800      	cmp	r0, #0
   33024:	d150      	bne.n	330c8 <smp_security_request+0xb8>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   33026:	2103      	movs	r1, #3
   33028:	4620      	mov	r0, r4
   3302a:	f01b ff37 	bl	4ee9c <atomic_test_bit>
   3302e:	2800      	cmp	r0, #0
   33030:	d14a      	bne.n	330c8 <smp_security_request+0xb8>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   33032:	2101      	movs	r1, #1
   33034:	4620      	mov	r0, r4
   33036:	f01b ff31 	bl	4ee9c <atomic_test_bit>
   3303a:	2800      	cmp	r0, #0
   3303c:	d144      	bne.n	330c8 <smp_security_request+0xb8>
	if (sc_supported) {
   3303e:	4a24      	ldr	r2, [pc, #144]	; (330d0 <smp_security_request+0xc0>)
   33040:	7812      	ldrb	r2, [r2, #0]
   33042:	2a00      	cmp	r2, #0
   33044:	d042      	beq.n	330cc <smp_security_request+0xbc>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   33046:	781e      	ldrb	r6, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   33048:	0737      	lsls	r7, r6, #28
   3304a:	d53f      	bpl.n	330cc <smp_security_request+0xbc>
	if (conn->le.keys) {
   3304c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   33050:	b153      	cbz	r3, 33068 <smp_security_request+0x58>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   33052:	89db      	ldrh	r3, [r3, #14]
   33054:	f003 0324 	and.w	r3, r3, #36	; 0x24
   33058:	b9bb      	cbnz	r3, 3308a <smp_security_request+0x7a>
	if (smp_send_pairing_req(conn) < 0) {
   3305a:	4628      	mov	r0, r5
   3305c:	f7ff ff54 	bl	32f08 <smp_send_pairing_req>
   33060:	2800      	cmp	r0, #0
   33062:	db2a      	blt.n	330ba <smp_security_request+0xaa>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   33064:	210f      	movs	r1, #15
   33066:	e02c      	b.n	330c2 <smp_security_request+0xb2>
					     &conn->le.dst);
   33068:	f105 0788 	add.w	r7, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   3306c:	7a29      	ldrb	r1, [r5, #8]
   3306e:	463a      	mov	r2, r7
   33070:	2020      	movs	r0, #32
   33072:	f000 fe2f 	bl	33cd4 <bt_keys_find>
   33076:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   3307a:	b930      	cbnz	r0, 3308a <smp_security_request+0x7a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
   3307c:	7a29      	ldrb	r1, [r5, #8]
   3307e:	463a      	mov	r2, r7
   33080:	2004      	movs	r0, #4
   33082:	f000 fe27 	bl	33cd4 <bt_keys_find>
   33086:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys) {
   3308a:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
   3308e:	2900      	cmp	r1, #0
   33090:	d0e3      	beq.n	3305a <smp_security_request+0x4a>
	if ((auth & BT_SMP_AUTH_MITM) &&
   33092:	0770      	lsls	r0, r6, #29
   33094:	d502      	bpl.n	3309c <smp_security_request+0x8c>
   33096:	7b4b      	ldrb	r3, [r1, #13]
   33098:	07da      	lsls	r2, r3, #31
   3309a:	d5de      	bpl.n	3305a <smp_security_request+0x4a>
	if ((auth & BT_SMP_AUTH_SC) &&
   3309c:	89cb      	ldrh	r3, [r1, #14]
   3309e:	069b      	lsls	r3, r3, #26
   330a0:	d5db      	bpl.n	3305a <smp_security_request+0x4a>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
   330a2:	7b0b      	ldrb	r3, [r1, #12]
   330a4:	9300      	str	r3, [sp, #0]
   330a6:	f101 0218 	add.w	r2, r1, #24
   330aa:	f101 031a 	add.w	r3, r1, #26
   330ae:	4628      	mov	r0, r5
   330b0:	3110      	adds	r1, #16
   330b2:	f019 fed6 	bl	4ce62 <bt_conn_le_start_encryption>
   330b6:	2800      	cmp	r0, #0
   330b8:	da02      	bge.n	330c0 <smp_security_request+0xb0>
		return BT_SMP_ERR_UNSPECIFIED;
   330ba:	2008      	movs	r0, #8
}
   330bc:	b003      	add	sp, #12
   330be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   330c0:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   330c2:	4620      	mov	r0, r4
   330c4:	f01c f830 	bl	4f128 <atomic_set_bit>
		return 0;
   330c8:	2000      	movs	r0, #0
   330ca:	e7f7      	b.n	330bc <smp_security_request+0xac>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   330cc:	2003      	movs	r0, #3
   330ce:	e7f5      	b.n	330bc <smp_security_request+0xac>
   330d0:	20007416 	.word	0x20007416

000330d4 <sc_send_public_key>:
{
   330d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   330d6:	210c      	movs	r1, #12
{
   330d8:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   330da:	f01c f869 	bl	4f1b0 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   330de:	4604      	mov	r4, r0
   330e0:	b1a8      	cbz	r0, 3310e <sc_send_public_key+0x3a>
   330e2:	2140      	movs	r1, #64	; 0x40
   330e4:	3008      	adds	r0, #8
   330e6:	f01c fe1f 	bl	4fd28 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   330ea:	4f0a      	ldr	r7, [pc, #40]	; (33114 <sc_send_public_key+0x40>)
   330ec:	2220      	movs	r2, #32
   330ee:	6839      	ldr	r1, [r7, #0]
   330f0:	4606      	mov	r6, r0
   330f2:	f018 fe38 	bl	4bd66 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   330f6:	6839      	ldr	r1, [r7, #0]
   330f8:	2220      	movs	r2, #32
   330fa:	4411      	add	r1, r2
   330fc:	18b0      	adds	r0, r6, r2
   330fe:	f018 fe32 	bl	4bd66 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   33102:	4628      	mov	r0, r5
   33104:	4621      	mov	r1, r4
   33106:	f01b ff74 	bl	4eff2 <smp_send.constprop.0>
	return 0;
   3310a:	2000      	movs	r0, #0
}
   3310c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   3310e:	2008      	movs	r0, #8
   33110:	e7fc      	b.n	3310c <sc_send_public_key+0x38>
   33112:	bf00      	nop
   33114:	2000484c 	.word	0x2000484c

00033118 <smp_send_pairing_confirm>:
{
   33118:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   3311a:	7a04      	ldrb	r4, [r0, #8]
   3311c:	2c02      	cmp	r4, #2
{
   3311e:	4605      	mov	r5, r0
	switch (smp->method) {
   33120:	d823      	bhi.n	3316a <smp_send_pairing_confirm+0x52>
   33122:	b144      	cbz	r4, 33136 <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   33124:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   33128:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   3312c:	40dc      	lsrs	r4, r3
   3312e:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   33132:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   33136:	2103      	movs	r1, #3
   33138:	4628      	mov	r0, r5
   3313a:	f01c f839 	bl	4f1b0 <smp_create_pdu.constprop.0>
	if (!buf) {
   3313e:	4606      	mov	r6, r0
   33140:	b1a8      	cbz	r0, 3316e <smp_send_pairing_confirm+0x56>
   33142:	2110      	movs	r1, #16
   33144:	3008      	adds	r0, #8
   33146:	f01c fdef 	bl	4fd28 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   3314a:	9000      	str	r0, [sp, #0]
   3314c:	480f      	ldr	r0, [pc, #60]	; (3318c <smp_send_pairing_confirm+0x74>)
   3314e:	4623      	mov	r3, r4
   33150:	6800      	ldr	r0, [r0, #0]
   33152:	f105 0227 	add.w	r2, r5, #39	; 0x27
   33156:	f105 0157 	add.w	r1, r5, #87	; 0x57
   3315a:	f01b ffc0 	bl	4f0de <smp_f4>
   3315e:	4604      	mov	r4, r0
   33160:	b150      	cbz	r0, 33178 <smp_send_pairing_confirm+0x60>
		net_buf_unref(buf);
   33162:	4630      	mov	r0, r6
   33164:	f010 fc56 	bl	43a14 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   33168:	e001      	b.n	3316e <smp_send_pairing_confirm+0x56>
	switch (smp->method) {
   3316a:	2c03      	cmp	r4, #3
   3316c:	d002      	beq.n	33174 <smp_send_pairing_confirm+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
   3316e:	2008      	movs	r0, #8
}
   33170:	b002      	add	sp, #8
   33172:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   33174:	2400      	movs	r4, #0
   33176:	e7de      	b.n	33136 <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   33178:	4631      	mov	r1, r6
   3317a:	4628      	mov	r0, r5
   3317c:	f01b ff39 	bl	4eff2 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   33180:	1d28      	adds	r0, r5, #4
   33182:	4621      	mov	r1, r4
   33184:	f01b ff06 	bl	4ef94 <atomic_clear_bit>
	return 0;
   33188:	4620      	mov	r0, r4
   3318a:	e7f1      	b.n	33170 <smp_send_pairing_confirm+0x58>
   3318c:	2000484c 	.word	0x2000484c

00033190 <smp_pairing_random>:
{
   33190:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   33192:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   33194:	f100 0537 	add.w	r5, r0, #55	; 0x37
   33198:	6889      	ldr	r1, [r1, #8]
   3319a:	2210      	movs	r2, #16
   3319c:	4628      	mov	r0, r5
   3319e:	f018 fde2 	bl	4bd66 <memcpy>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   331a2:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   331a6:	78db      	ldrb	r3, [r3, #3]
   331a8:	2b00      	cmp	r3, #0
   331aa:	d154      	bne.n	33256 <smp_pairing_random+0xc6>
		err = sc_smp_check_confirm(smp);
   331ac:	4620      	mov	r0, r4
   331ae:	f7ff fdeb 	bl	32d88 <sc_smp_check_confirm>
		if (err) {
   331b2:	b940      	cbnz	r0, 331c6 <smp_pairing_random+0x36>
		switch (smp->method) {
   331b4:	7a23      	ldrb	r3, [r4, #8]
   331b6:	2b05      	cmp	r3, #5
   331b8:	d804      	bhi.n	331c4 <smp_pairing_random+0x34>
   331ba:	e8df f003 	tbb	[pc, r3]
   331be:	223a      	.short	0x223a
   331c0:	3a030622 	.word	0x3a030622
				return BT_SMP_ERR_UNSPECIFIED;
   331c4:	2008      	movs	r0, #8
}
   331c6:	b004      	add	sp, #16
   331c8:	bd70      	pop	{r4, r5, r6, pc}
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
   331ca:	ab03      	add	r3, sp, #12
   331cc:	4863      	ldr	r0, [pc, #396]	; (3335c <smp_pairing_random+0x1cc>)
   331ce:	9300      	str	r3, [sp, #0]
   331d0:	6800      	ldr	r0, [r0, #0]
   331d2:	462b      	mov	r3, r5
   331d4:	f104 0227 	add.w	r2, r4, #39	; 0x27
   331d8:	f104 0157 	add.w	r1, r4, #87	; 0x57
   331dc:	f7ff fd1a 	bl	32c14 <smp_g2>
   331e0:	2800      	cmp	r0, #0
   331e2:	d1ef      	bne.n	331c4 <smp_pairing_random+0x34>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   331e4:	210a      	movs	r1, #10
   331e6:	1d20      	adds	r0, r4, #4
   331e8:	f01b ff9e 	bl	4f128 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   331ec:	2109      	movs	r1, #9
   331ee:	f01b ff9b 	bl	4f128 <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   331f2:	4b5b      	ldr	r3, [pc, #364]	; (33360 <smp_pairing_random+0x1d0>)
   331f4:	9903      	ldr	r1, [sp, #12]
   331f6:	681b      	ldr	r3, [r3, #0]
   331f8:	68db      	ldr	r3, [r3, #12]
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   331fa:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   331fe:	4798      	blx	r3
			return 0;
   33200:	e021      	b.n	33246 <smp_pairing_random+0xb6>
			smp->passkey_round++;
   33202:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   33206:	3301      	adds	r3, #1
   33208:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   3320a:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   3320c:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
			if (smp->passkey_round == 20U) {
   33210:	d00f      	beq.n	33232 <smp_pairing_random+0xa2>
			if (bt_rand(smp->prnd, 16)) {
   33212:	2110      	movs	r1, #16
   33214:	f104 0027 	add.w	r0, r4, #39	; 0x27
   33218:	f003 ff80 	bl	3711c <bt_rand>
   3321c:	2800      	cmp	r0, #0
   3321e:	d1d1      	bne.n	331c4 <smp_pairing_random+0x34>
			atomic_set_bit(smp->allowed_cmds,
   33220:	2103      	movs	r1, #3
   33222:	4620      	mov	r0, r4
   33224:	f01b ff80 	bl	4f128 <atomic_set_bit>
}
   33228:	b004      	add	sp, #16
   3322a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return smp_send_pairing_confirm(smp);
   3322e:	f7ff bf73 	b.w	33118 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   33232:	1d23      	adds	r3, r4, #4
   33234:	2107      	movs	r1, #7
   33236:	4618      	mov	r0, r3
   33238:	f01b fe30 	bl	4ee9c <atomic_test_bit>
   3323c:	b128      	cbz	r0, 3324a <smp_pairing_random+0xba>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   3323e:	2109      	movs	r1, #9
   33240:	4618      	mov	r0, r3
   33242:	f01b ff71 	bl	4f128 <atomic_set_bit>
			return 0;
   33246:	2000      	movs	r0, #0
   33248:	e7bd      	b.n	331c6 <smp_pairing_random+0x36>
		return compute_and_send_central_dhcheck(smp);
   3324a:	4620      	mov	r0, r4
}
   3324c:	b004      	add	sp, #16
   3324e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_send_central_dhcheck(smp);
   33252:	f01b bffc 	b.w	4f24e <compute_and_send_central_dhcheck>
	switch (smp->method) {
   33256:	7a23      	ldrb	r3, [r4, #8]
   33258:	2b05      	cmp	r3, #5
   3325a:	d8b3      	bhi.n	331c4 <smp_pairing_random+0x34>
   3325c:	a201      	add	r2, pc, #4	; (adr r2, 33264 <smp_pairing_random+0xd4>)
   3325e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   33262:	bf00      	nop
   33264:	000332ad 	.word	0x000332ad
   33268:	000332c5 	.word	0x000332c5
   3326c:	000332c5 	.word	0x000332c5
   33270:	0003327d 	.word	0x0003327d
   33274:	000331c5 	.word	0x000331c5
   33278:	00033315 	.word	0x00033315
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   3327c:	ab03      	add	r3, sp, #12
   3327e:	4937      	ldr	r1, [pc, #220]	; (3335c <smp_pairing_random+0x1cc>)
   33280:	9300      	str	r3, [sp, #0]
   33282:	6809      	ldr	r1, [r1, #0]
   33284:	f104 0327 	add.w	r3, r4, #39	; 0x27
   33288:	462a      	mov	r2, r5
   3328a:	f104 0057 	add.w	r0, r4, #87	; 0x57
   3328e:	f7ff fcc1 	bl	32c14 <smp_g2>
   33292:	2800      	cmp	r0, #0
   33294:	d196      	bne.n	331c4 <smp_pairing_random+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   33296:	210a      	movs	r1, #10
   33298:	1d20      	adds	r0, r4, #4
   3329a:	f01b ff45 	bl	4f128 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   3329e:	4b30      	ldr	r3, [pc, #192]	; (33360 <smp_pairing_random+0x1d0>)
   332a0:	9903      	ldr	r1, [sp, #12]
   332a2:	681b      	ldr	r3, [r3, #0]
   332a4:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   332a8:	68db      	ldr	r3, [r3, #12]
   332aa:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   332ac:	4620      	mov	r0, r4
   332ae:	210d      	movs	r1, #13
   332b0:	f01b ff3a 	bl	4f128 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   332b4:	1d20      	adds	r0, r4, #4
   332b6:	2110      	movs	r1, #16
   332b8:	f01b ff36 	bl	4f128 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   332bc:	4620      	mov	r0, r4
   332be:	f01b ff96 	bl	4f1ee <smp_send_pairing_random>
   332c2:	e780      	b.n	331c6 <smp_pairing_random+0x36>
		err = sc_smp_check_confirm(smp);
   332c4:	4620      	mov	r0, r4
   332c6:	f7ff fd5f 	bl	32d88 <sc_smp_check_confirm>
		if (err) {
   332ca:	2800      	cmp	r0, #0
   332cc:	f47f af7b 	bne.w	331c6 <smp_pairing_random+0x36>
		atomic_set_bit(smp->allowed_cmds,
   332d0:	2103      	movs	r1, #3
   332d2:	4620      	mov	r0, r4
   332d4:	f01b ff28 	bl	4f128 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   332d8:	f01b ff89 	bl	4f1ee <smp_send_pairing_random>
		if (err) {
   332dc:	2800      	cmp	r0, #0
   332de:	f47f af72 	bne.w	331c6 <smp_pairing_random+0x36>
		smp->passkey_round++;
   332e2:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   332e6:	3301      	adds	r3, #1
   332e8:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   332ea:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   332ec:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   332f0:	d106      	bne.n	33300 <smp_pairing_random+0x170>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   332f2:	210d      	movs	r1, #13
   332f4:	4620      	mov	r0, r4
   332f6:	f01b ff17 	bl	4f128 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   332fa:	2110      	movs	r1, #16
   332fc:	1d20      	adds	r0, r4, #4
   332fe:	e7a0      	b.n	33242 <smp_pairing_random+0xb2>
		if (bt_rand(smp->prnd, 16)) {
   33300:	2110      	movs	r1, #16
   33302:	f104 0027 	add.w	r0, r4, #39	; 0x27
   33306:	f003 ff09 	bl	3711c <bt_rand>
   3330a:	3800      	subs	r0, #0
   3330c:	bf18      	it	ne
   3330e:	2001      	movne	r0, #1
   33310:	00c0      	lsls	r0, r0, #3
   33312:	e758      	b.n	331c6 <smp_pairing_random+0x36>
		if (bt_rand(smp->prnd, 16)) {
   33314:	2110      	movs	r1, #16
   33316:	f104 0027 	add.w	r0, r4, #39	; 0x27
   3331a:	f003 feff 	bl	3711c <bt_rand>
   3331e:	4605      	mov	r5, r0
   33320:	2800      	cmp	r0, #0
   33322:	f47f af4f 	bne.w	331c4 <smp_pairing_random+0x34>
		if (bt_auth && bt_auth->oob_data_request) {
   33326:	4e0e      	ldr	r6, [pc, #56]	; (33360 <smp_pairing_random+0x1d0>)
   33328:	6833      	ldr	r3, [r6, #0]
   3332a:	b1a3      	cbz	r3, 33356 <smp_pairing_random+0x1c6>
   3332c:	691b      	ldr	r3, [r3, #16]
   3332e:	b193      	cbz	r3, 33356 <smp_pairing_random+0x1c6>
			struct bt_conn_oob_info info = {
   33330:	4b0c      	ldr	r3, [pc, #48]	; (33364 <smp_pairing_random+0x1d4>)
			le_sc_oob_config_set(smp, &info);
   33332:	a903      	add	r1, sp, #12
			struct bt_conn_oob_info info = {
   33334:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   33338:	f8ad 300c 	strh.w	r3, [sp, #12]
			le_sc_oob_config_set(smp, &info);
   3333c:	4620      	mov	r0, r4
   3333e:	f01b fd8b 	bl	4ee58 <le_sc_oob_config_set>
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   33342:	210c      	movs	r1, #12
			smp->oobd_remote = NULL;
   33344:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   33348:	1d20      	adds	r0, r4, #4
   3334a:	f01b feed 	bl	4f128 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   3334e:	6833      	ldr	r3, [r6, #0]
   33350:	a903      	add	r1, sp, #12
   33352:	691b      	ldr	r3, [r3, #16]
   33354:	e751      	b.n	331fa <smp_pairing_random+0x6a>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   33356:	2002      	movs	r0, #2
   33358:	e735      	b.n	331c6 <smp_pairing_random+0x36>
   3335a:	bf00      	nop
   3335c:	2000484c 	.word	0x2000484c
   33360:	2000460c 	.word	0x2000460c
   33364:	00051ade 	.word	0x00051ade

00033368 <smp_public_key_periph>:
{
   33368:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   3336a:	1d05      	adds	r5, r0, #4
{
   3336c:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   3336e:	210e      	movs	r1, #14
   33370:	4628      	mov	r0, r5
   33372:	f01b fd93 	bl	4ee9c <atomic_test_bit>
   33376:	b120      	cbz	r0, 33382 <smp_public_key_periph+0x1a>
	err = sc_send_public_key(smp);
   33378:	4620      	mov	r0, r4
   3337a:	f7ff feab 	bl	330d4 <sc_send_public_key>
	if (err) {
   3337e:	b158      	cbz	r0, 33398 <smp_public_key_periph+0x30>
}
   33380:	bd38      	pop	{r3, r4, r5, pc}
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   33382:	4b26      	ldr	r3, [pc, #152]	; (3341c <smp_public_key_periph+0xb4>)
   33384:	2220      	movs	r2, #32
   33386:	6819      	ldr	r1, [r3, #0]
   33388:	f104 0057 	add.w	r0, r4, #87	; 0x57
   3338c:	f018 fcdb 	bl	4bd46 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   33390:	2800      	cmp	r0, #0
   33392:	d1f1      	bne.n	33378 <smp_public_key_periph+0x10>
{
   33394:	2008      	movs	r0, #8
   33396:	e7f3      	b.n	33380 <smp_public_key_periph+0x18>
	switch (smp->method) {
   33398:	7a23      	ldrb	r3, [r4, #8]
   3339a:	2b05      	cmp	r3, #5
   3339c:	d8fa      	bhi.n	33394 <smp_public_key_periph+0x2c>
   3339e:	a201      	add	r2, pc, #4	; (adr r2, 333a4 <smp_public_key_periph+0x3c>)
   333a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   333a4:	000333bd 	.word	0x000333bd
   333a8:	000333f1 	.word	0x000333f1
   333ac:	000333d7 	.word	0x000333d7
   333b0:	000333bd 	.word	0x000333bd
   333b4:	00033395 	.word	0x00033395
   333b8:	00033415 	.word	0x00033415
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   333bc:	2104      	movs	r1, #4
   333be:	4620      	mov	r0, r4
   333c0:	f01b feb2 	bl	4f128 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   333c4:	f7ff fea8 	bl	33118 <smp_send_pairing_confirm>
		if (err) {
   333c8:	2800      	cmp	r0, #0
   333ca:	d1d9      	bne.n	33380 <smp_public_key_periph+0x18>
	return generate_dhkey(smp);
   333cc:	4620      	mov	r0, r4
}
   333ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return generate_dhkey(smp);
   333d2:	f01b bebd 	b.w	4f150 <generate_dhkey>
		err = display_passkey(smp);
   333d6:	4620      	mov	r0, r4
   333d8:	f7ff fd3a 	bl	32e50 <display_passkey>
		if (err) {
   333dc:	2800      	cmp	r0, #0
   333de:	d1cf      	bne.n	33380 <smp_public_key_periph+0x18>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   333e0:	2103      	movs	r1, #3
   333e2:	4620      	mov	r0, r4
   333e4:	f01b fea0 	bl	4f128 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   333e8:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   333ea:	f01b fe9d 	bl	4f128 <atomic_set_bit>
		break;
   333ee:	e7ed      	b.n	333cc <smp_public_key_periph+0x64>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   333f0:	4620      	mov	r0, r4
   333f2:	2103      	movs	r1, #3
   333f4:	f01b fe98 	bl	4f128 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   333f8:	210e      	movs	r1, #14
   333fa:	f01b fe95 	bl	4f128 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   333fe:	4628      	mov	r0, r5
   33400:	210a      	movs	r1, #10
   33402:	f01b fe91 	bl	4f128 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   33406:	4b06      	ldr	r3, [pc, #24]	; (33420 <smp_public_key_periph+0xb8>)
   33408:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   3340c:	681b      	ldr	r3, [r3, #0]
   3340e:	689b      	ldr	r3, [r3, #8]
   33410:	4798      	blx	r3
		break;
   33412:	e7db      	b.n	333cc <smp_public_key_periph+0x64>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   33414:	2104      	movs	r1, #4
   33416:	4620      	mov	r0, r4
   33418:	e7e7      	b.n	333ea <smp_public_key_periph+0x82>
   3341a:	bf00      	nop
   3341c:	2000484c 	.word	0x2000484c
   33420:	2000460c 	.word	0x2000460c

00033424 <smp_public_key>:
{
   33424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   33426:	688d      	ldr	r5, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   33428:	f100 0757 	add.w	r7, r0, #87	; 0x57
{
   3342c:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   3342e:	2220      	movs	r2, #32
   33430:	4629      	mov	r1, r5
   33432:	4638      	mov	r0, r7
   33434:	f018 fc97 	bl	4bd66 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   33438:	2220      	movs	r2, #32
   3343a:	18a9      	adds	r1, r5, r2
   3343c:	f104 0077 	add.w	r0, r4, #119	; 0x77
   33440:	f018 fc91 	bl	4bd66 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   33444:	4638      	mov	r0, r7
   33446:	f7fc f921 	bl	2f68c <bt_pub_key_is_debug>
   3344a:	b998      	cbnz	r0, 33474 <smp_public_key+0x50>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   3344c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   33450:	78db      	ldrb	r3, [r3, #3]
   33452:	2b00      	cmp	r3, #0
   33454:	f040 8081 	bne.w	3355a <smp_public_key+0x136>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   33458:	1d26      	adds	r6, r4, #4
   3345a:	210e      	movs	r1, #14
   3345c:	4630      	mov	r0, r6
   3345e:	f01b fd1d 	bl	4ee9c <atomic_test_bit>
   33462:	b330      	cbz	r0, 334b2 <smp_public_key+0x8e>
		switch (smp->method) {
   33464:	7a23      	ldrb	r3, [r4, #8]
   33466:	2b05      	cmp	r3, #5
   33468:	d82b      	bhi.n	334c2 <smp_public_key+0x9e>
   3346a:	e8df f003 	tbb	[pc, r3]
   3346e:	472c      	.short	0x472c
   33470:	532a2c31 	.word	0x532a2c31
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   33474:	210e      	movs	r1, #14
   33476:	1d20      	adds	r0, r4, #4
   33478:	f01b fe56 	bl	4f128 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   3347c:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   33480:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   33484:	b933      	cbnz	r3, 33494 <smp_public_key+0x70>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   33486:	7a28      	ldrb	r0, [r5, #8]
   33488:	f105 0188 	add.w	r1, r5, #136	; 0x88
   3348c:	f000 fba0 	bl	33bd0 <bt_keys_get_addr>
   33490:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   33494:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   33498:	2b00      	cmp	r3, #0
   3349a:	d0d7      	beq.n	3344c <smp_public_key+0x28>
   3349c:	89da      	ldrh	r2, [r3, #14]
   3349e:	f002 0224 	and.w	r2, r2, #36	; 0x24
   334a2:	2a00      	cmp	r2, #0
   334a4:	d0d2      	beq.n	3344c <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   334a6:	7b5b      	ldrb	r3, [r3, #13]
   334a8:	079b      	lsls	r3, r3, #30
   334aa:	d4cf      	bmi.n	3344c <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   334ac:	2003      	movs	r0, #3
}
   334ae:	b003      	add	sp, #12
   334b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   334b2:	4b32      	ldr	r3, [pc, #200]	; (3357c <smp_public_key+0x158>)
   334b4:	2220      	movs	r2, #32
   334b6:	6819      	ldr	r1, [r3, #0]
   334b8:	4638      	mov	r0, r7
   334ba:	f018 fc44 	bl	4bd46 <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   334be:	2800      	cmp	r0, #0
   334c0:	d1d0      	bne.n	33464 <smp_public_key+0x40>
			return BT_SMP_ERR_UNSPECIFIED;
   334c2:	2008      	movs	r0, #8
   334c4:	e7f3      	b.n	334ae <smp_public_key+0x8a>
			atomic_set_bit(smp->allowed_cmds,
   334c6:	2103      	movs	r1, #3
			atomic_set_bit(smp->allowed_cmds,
   334c8:	4620      	mov	r0, r4
   334ca:	f01b fe2d 	bl	4f128 <atomic_set_bit>
			break;
   334ce:	e00f      	b.n	334f0 <smp_public_key+0xcc>
			err = display_passkey(smp);
   334d0:	4620      	mov	r0, r4
   334d2:	f7ff fcbd 	bl	32e50 <display_passkey>
			if (err) {
   334d6:	2800      	cmp	r0, #0
   334d8:	d1e9      	bne.n	334ae <smp_public_key+0x8a>
			atomic_set_bit(smp->allowed_cmds,
   334da:	2103      	movs	r1, #3
   334dc:	4620      	mov	r0, r4
   334de:	f01b fe23 	bl	4f128 <atomic_set_bit>
			atomic_set_bit(smp->allowed_cmds,
   334e2:	210e      	movs	r1, #14
   334e4:	f01b fe20 	bl	4f128 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
   334e8:	f7ff fe16 	bl	33118 <smp_send_pairing_confirm>
			if (err) {
   334ec:	2800      	cmp	r0, #0
   334ee:	d1de      	bne.n	334ae <smp_public_key+0x8a>
		return generate_dhkey(smp);
   334f0:	4620      	mov	r0, r4
}
   334f2:	b003      	add	sp, #12
   334f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return generate_dhkey(smp);
   334f8:	f01b be2a 	b.w	4f150 <generate_dhkey>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   334fc:	210a      	movs	r1, #10
   334fe:	4630      	mov	r0, r6
   33500:	f01b fe12 	bl	4f128 <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
   33504:	4b1e      	ldr	r3, [pc, #120]	; (33580 <smp_public_key+0x15c>)
   33506:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   3350a:	681b      	ldr	r3, [r3, #0]
   3350c:	689b      	ldr	r3, [r3, #8]
   3350e:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   33510:	210e      	movs	r1, #14
   33512:	e7d9      	b.n	334c8 <smp_public_key+0xa4>
			if (bt_rand(smp->prnd, 16)) {
   33514:	2110      	movs	r1, #16
   33516:	f104 0027 	add.w	r0, r4, #39	; 0x27
   3351a:	f003 fdff 	bl	3711c <bt_rand>
   3351e:	4605      	mov	r5, r0
   33520:	2800      	cmp	r0, #0
   33522:	d1ce      	bne.n	334c2 <smp_public_key+0x9e>
			if (bt_auth && bt_auth->oob_data_request) {
   33524:	4f16      	ldr	r7, [pc, #88]	; (33580 <smp_public_key+0x15c>)
   33526:	683b      	ldr	r3, [r7, #0]
   33528:	b333      	cbz	r3, 33578 <smp_public_key+0x154>
   3352a:	691b      	ldr	r3, [r3, #16]
   3352c:	b323      	cbz	r3, 33578 <smp_public_key+0x154>
				struct bt_conn_oob_info info = {
   3352e:	4b15      	ldr	r3, [pc, #84]	; (33584 <smp_public_key+0x160>)
				le_sc_oob_config_set(smp, &info);
   33530:	a901      	add	r1, sp, #4
				struct bt_conn_oob_info info = {
   33532:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   33536:	f8ad 3004 	strh.w	r3, [sp, #4]
				le_sc_oob_config_set(smp, &info);
   3353a:	4620      	mov	r0, r4
   3353c:	f01b fc8c 	bl	4ee58 <le_sc_oob_config_set>
				atomic_set_bit(smp->flags,
   33540:	4630      	mov	r0, r6
				smp->oobd_remote = NULL;
   33542:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
				atomic_set_bit(smp->flags,
   33546:	210c      	movs	r1, #12
   33548:	f01b fdee 	bl	4f128 <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
   3354c:	683b      	ldr	r3, [r7, #0]
   3354e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   33552:	691b      	ldr	r3, [r3, #16]
   33554:	a901      	add	r1, sp, #4
   33556:	4798      	blx	r3
			break;
   33558:	e7ca      	b.n	334f0 <smp_public_key+0xcc>
	if (!sc_public_key) {
   3355a:	4b08      	ldr	r3, [pc, #32]	; (3357c <smp_public_key+0x158>)
   3355c:	681d      	ldr	r5, [r3, #0]
   3355e:	b92d      	cbnz	r5, 3356c <smp_public_key+0x148>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   33560:	1d20      	adds	r0, r4, #4
   33562:	2106      	movs	r1, #6
   33564:	f01b fde0 	bl	4f128 <atomic_set_bit>
		return 0;
   33568:	4628      	mov	r0, r5
   3356a:	e7a0      	b.n	334ae <smp_public_key+0x8a>
	err = smp_public_key_periph(smp);
   3356c:	4620      	mov	r0, r4
}
   3356e:	b003      	add	sp, #12
   33570:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	err = smp_public_key_periph(smp);
   33574:	f7ff bef8 	b.w	33368 <smp_public_key_periph>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
   33578:	2002      	movs	r0, #2
   3357a:	e798      	b.n	334ae <smp_public_key+0x8a>
   3357c:	2000484c 	.word	0x2000484c
   33580:	2000460c 	.word	0x2000460c
   33584:	00051ade 	.word	0x00051ade

00033588 <bt_smp_connected>:
{
   33588:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   3358a:	4905      	ldr	r1, [pc, #20]	; (335a0 <bt_smp_connected+0x18>)
   3358c:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   33590:	30e8      	adds	r0, #232	; 0xe8
   33592:	f01d fbcb 	bl	50d2c <k_work_init_delayable>
	smp_reset(smp);
   33596:	4620      	mov	r0, r4
}
   33598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   3359c:	f01c b808 	b.w	4f5b0 <smp_reset>
   335a0:	0004faa7 	.word	0x0004faa7

000335a4 <smp_pairing_accept_query>:
	if (bt_auth && bt_auth->pairing_accept) {
   335a4:	4b13      	ldr	r3, [pc, #76]	; (335f4 <smp_pairing_accept_query+0x50>)
   335a6:	681b      	ldr	r3, [r3, #0]
{
   335a8:	b507      	push	{r0, r1, r2, lr}
	if (bt_auth && bt_auth->pairing_accept) {
   335aa:	b1f3      	cbz	r3, 335ea <smp_pairing_accept_query+0x46>
   335ac:	681b      	ldr	r3, [r3, #0]
   335ae:	b1f3      	cbz	r3, 335ee <smp_pairing_accept_query+0x4a>
		const struct bt_conn_pairing_feat feat = {
   335b0:	780a      	ldrb	r2, [r1, #0]
   335b2:	f88d 2000 	strb.w	r2, [sp]
   335b6:	784a      	ldrb	r2, [r1, #1]
   335b8:	f88d 2001 	strb.w	r2, [sp, #1]
   335bc:	788a      	ldrb	r2, [r1, #2]
   335be:	f88d 2002 	strb.w	r2, [sp, #2]
   335c2:	78ca      	ldrb	r2, [r1, #3]
   335c4:	f88d 2003 	strb.w	r2, [sp, #3]
   335c8:	790a      	ldrb	r2, [r1, #4]
   335ca:	f88d 2004 	strb.w	r2, [sp, #4]
   335ce:	794a      	ldrb	r2, [r1, #5]
   335d0:	f88d 2005 	strb.w	r2, [sp, #5]
		return smp_err_get(bt_auth->pairing_accept(conn, &feat));
   335d4:	4669      	mov	r1, sp
   335d6:	4798      	blx	r3
	switch (auth_err) {
   335d8:	3801      	subs	r0, #1
   335da:	b2c0      	uxtb	r0, r0
   335dc:	2808      	cmp	r0, #8
   335de:	d804      	bhi.n	335ea <smp_pairing_accept_query+0x46>
   335e0:	4b05      	ldr	r3, [pc, #20]	; (335f8 <smp_pairing_accept_query+0x54>)
   335e2:	5c18      	ldrb	r0, [r3, r0]
}
   335e4:	b003      	add	sp, #12
   335e6:	f85d fb04 	ldr.w	pc, [sp], #4
		return smp_err_get(bt_auth->pairing_accept(conn, &feat));
   335ea:	2000      	movs	r0, #0
   335ec:	e7fa      	b.n	335e4 <smp_pairing_accept_query+0x40>
	return 0;
   335ee:	4618      	mov	r0, r3
   335f0:	e7f8      	b.n	335e4 <smp_pairing_accept_query+0x40>
   335f2:	bf00      	nop
   335f4:	2000460c 	.word	0x2000460c
   335f8:	00054434 	.word	0x00054434

000335fc <smp_pairing_rsp>:
{
   335fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
   33600:	688e      	ldr	r6, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   33602:	78f3      	ldrb	r3, [r6, #3]
   33604:	3b07      	subs	r3, #7
   33606:	2b09      	cmp	r3, #9
{
   33608:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   3360a:	f200 8086 	bhi.w	3371a <smp_pairing_rsp+0x11e>
	smp->local_dist &= rsp->init_key_dist;
   3360e:	7932      	ldrb	r2, [r6, #4]
   33610:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
	struct bt_conn *conn = smp->chan.chan.conn;
   33614:	f8d0 80f0 	ldr.w	r8, [r0, #240]	; 0xf0
	smp->local_dist &= rsp->init_key_dist;
   33618:	4013      	ands	r3, r2
   3361a:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	smp->remote_dist &= rsp->resp_key_dist;
   3361e:	7972      	ldrb	r2, [r6, #5]
   33620:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   33624:	4013      	ands	r3, r2
   33626:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   3362a:	2302      	movs	r3, #2
   3362c:	7403      	strb	r3, [r0, #16]
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   3362e:	2206      	movs	r2, #6
   33630:	4631      	mov	r1, r6
   33632:	3011      	adds	r0, #17
   33634:	f018 fb97 	bl	4bd66 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   33638:	78b3      	ldrb	r3, [r6, #2]
   3363a:	071f      	lsls	r7, r3, #28
   3363c:	d506      	bpl.n	3364c <smp_pairing_rsp+0x50>
   3363e:	7b23      	ldrb	r3, [r4, #12]
   33640:	071d      	lsls	r5, r3, #28
   33642:	d503      	bpl.n	3364c <smp_pairing_rsp+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   33644:	2105      	movs	r1, #5
   33646:	1d20      	adds	r0, r4, #4
   33648:	f01b fd6e 	bl	4f128 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   3364c:	78b3      	ldrb	r3, [r6, #2]
   3364e:	0698      	lsls	r0, r3, #26
   33650:	d506      	bpl.n	33660 <smp_pairing_rsp+0x64>
   33652:	7b23      	ldrb	r3, [r4, #12]
   33654:	0699      	lsls	r1, r3, #26
   33656:	d503      	bpl.n	33660 <smp_pairing_rsp+0x64>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   33658:	2114      	movs	r1, #20
   3365a:	1d20      	adds	r0, r4, #4
   3365c:	f01b fd64 	bl	4f128 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   33660:	78b3      	ldrb	r3, [r6, #2]
   33662:	07da      	lsls	r2, r3, #31
   33664:	d506      	bpl.n	33674 <smp_pairing_rsp+0x78>
   33666:	7b23      	ldrb	r3, [r4, #12]
   33668:	07db      	lsls	r3, r3, #31
   3366a:	d503      	bpl.n	33674 <smp_pairing_rsp+0x78>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   3366c:	210d      	movs	r1, #13
   3366e:	1d20      	adds	r0, r4, #4
   33670:	f01b fd5a 	bl	4f128 <atomic_set_bit>
	smp->method = get_pair_method(smp, rsp->io_capability);
   33674:	7831      	ldrb	r1, [r6, #0]
   33676:	4620      	mov	r0, r4
   33678:	f7ff fa78 	bl	32b6c <get_pair_method>
   3367c:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   3367e:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
   33682:	4620      	mov	r0, r4
   33684:	f01b fc41 	bl	4ef0a <update_keys_check>
   33688:	b918      	cbnz	r0, 33692 <smp_pairing_rsp+0x96>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   3368a:	2503      	movs	r5, #3
}
   3368c:	4628      	mov	r0, r5
   3368e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = remote_sec_level_reachable(smp);
   33692:	4620      	mov	r0, r4
   33694:	f01b fc5a 	bl	4ef4c <remote_sec_level_reachable>
	if (err) {
   33698:	4605      	mov	r5, r0
   3369a:	2800      	cmp	r0, #0
   3369c:	d1f6      	bne.n	3368c <smp_pairing_rsp+0x90>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   3369e:	1d27      	adds	r7, r4, #4
   336a0:	2105      	movs	r1, #5
   336a2:	4638      	mov	r0, r7
   336a4:	f01b fbfa 	bl	4ee9c <atomic_test_bit>
   336a8:	2800      	cmp	r0, #0
   336aa:	d0ee      	beq.n	3368a <smp_pairing_rsp+0x8e>
	smp->remote_dist &= RECV_KEYS_SC;
   336ac:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	smp->local_dist &= SEND_KEYS_SC;
   336b0:	f884 50e8 	strb.w	r5, [r4, #232]	; 0xe8
	smp->remote_dist &= RECV_KEYS_SC;
   336b4:	f003 0302 	and.w	r3, r3, #2
   336b8:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		err = smp_pairing_accept_query(conn, rsp);
   336bc:	4631      	mov	r1, r6
   336be:	4640      	mov	r0, r8
   336c0:	f7ff ff70 	bl	335a4 <smp_pairing_accept_query>
		if (err) {
   336c4:	4605      	mov	r5, r0
   336c6:	2800      	cmp	r0, #0
   336c8:	d1e0      	bne.n	3368c <smp_pairing_rsp+0x90>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   336ca:	7a23      	ldrb	r3, [r4, #8]
   336cc:	b993      	cbnz	r3, 336f4 <smp_pairing_rsp+0xf8>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   336ce:	210f      	movs	r1, #15
   336d0:	4638      	mov	r0, r7
   336d2:	f01b fbe3 	bl	4ee9c <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   336d6:	b168      	cbz	r0, 336f4 <smp_pairing_rsp+0xf8>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   336d8:	4e11      	ldr	r6, [pc, #68]	; (33720 <smp_pairing_rsp+0x124>)
   336da:	6833      	ldr	r3, [r6, #0]
   336dc:	b153      	cbz	r3, 336f4 <smp_pairing_rsp+0xf8>
	    bt_auth && bt_auth->pairing_confirm) {
   336de:	699b      	ldr	r3, [r3, #24]
   336e0:	b143      	cbz	r3, 336f4 <smp_pairing_rsp+0xf8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   336e2:	4638      	mov	r0, r7
   336e4:	210a      	movs	r1, #10
   336e6:	f01b fd1f 	bl	4f128 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   336ea:	6833      	ldr	r3, [r6, #0]
   336ec:	4640      	mov	r0, r8
   336ee:	699b      	ldr	r3, [r3, #24]
   336f0:	4798      	blx	r3
		return 0;
   336f2:	e7cb      	b.n	3368c <smp_pairing_rsp+0x90>
	if (!sc_public_key) {
   336f4:	4b0b      	ldr	r3, [pc, #44]	; (33724 <smp_pairing_rsp+0x128>)
   336f6:	681b      	ldr	r3, [r3, #0]
   336f8:	b923      	cbnz	r3, 33704 <smp_pairing_rsp+0x108>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   336fa:	2106      	movs	r1, #6
   336fc:	4638      	mov	r0, r7
   336fe:	f01b fd13 	bl	4f128 <atomic_set_bit>
		return 0;
   33702:	e7c3      	b.n	3368c <smp_pairing_rsp+0x90>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   33704:	4620      	mov	r0, r4
   33706:	210c      	movs	r1, #12
   33708:	f01b fd0e 	bl	4f128 <atomic_set_bit>
	atomic_clear_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   3370c:	210b      	movs	r1, #11
   3370e:	f01b fc41 	bl	4ef94 <atomic_clear_bit>
}
   33712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return sc_send_public_key(smp);
   33716:	f7ff bcdd 	b.w	330d4 <sc_send_public_key>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   3371a:	2506      	movs	r5, #6
   3371c:	e7b6      	b.n	3368c <smp_pairing_rsp+0x90>
   3371e:	bf00      	nop
   33720:	2000460c 	.word	0x2000460c
   33724:	2000484c 	.word	0x2000484c

00033728 <smp_pairing_req>:
{
   33728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   3372c:	688e      	ldr	r6, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   3372e:	78f3      	ldrb	r3, [r6, #3]
   33730:	3b07      	subs	r3, #7
   33732:	2b09      	cmp	r3, #9
{
   33734:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   33736:	f200 80b9 	bhi.w	338ac <smp_pairing_req+0x184>
	struct bt_conn *conn = smp->chan.chan.conn;
   3373a:	f8d0 80f0 	ldr.w	r8, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
   3373e:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
   33742:	b15b      	cbz	r3, 3375c <smp_pairing_req+0x34>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   33744:	1d27      	adds	r7, r4, #4
   33746:	210f      	movs	r1, #15
   33748:	4638      	mov	r0, r7
   3374a:	f01b fba7 	bl	4ee9c <atomic_test_bit>
   3374e:	b998      	cbnz	r0, 33778 <smp_pairing_req+0x50>
		int ret = smp_init(smp);
   33750:	4620      	mov	r0, r4
   33752:	f7ff fba7 	bl	32ea4 <smp_init>
		if (ret) {
   33756:	b178      	cbz	r0, 33778 <smp_pairing_req+0x50>
			return ret;
   33758:	b2c5      	uxtb	r5, r0
   3375a:	e00a      	b.n	33772 <smp_pairing_req+0x4a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   3375c:	f898 0008 	ldrb.w	r0, [r8, #8]
   33760:	f108 0188 	add.w	r1, r8, #136	; 0x88
   33764:	f000 fa34 	bl	33bd0 <bt_keys_get_addr>
   33768:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
		if (!conn->le.keys) {
   3376c:	2800      	cmp	r0, #0
   3376e:	d1e9      	bne.n	33744 <smp_pairing_req+0x1c>
			return BT_SMP_ERR_UNSPECIFIED;
   33770:	2508      	movs	r5, #8
}
   33772:	4628      	mov	r0, r5
   33774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   33778:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   3377a:	2206      	movs	r2, #6
   3377c:	4631      	mov	r1, r6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   3377e:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   33780:	f104 000a 	add.w	r0, r4, #10
   33784:	f018 faef 	bl	4bd66 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   33788:	2302      	movs	r3, #2
   3378a:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   3378c:	78b0      	ldrb	r0, [r6, #2]
   3378e:	f7ff fa75 	bl	32c7c <get_auth.constprop.0>
   33792:	74e0      	strb	r0, [r4, #19]
   33794:	4605      	mov	r5, r0
	rsp->io_capability = get_io_capa();
   33796:	f7ff f9c3 	bl	32b20 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   3379a:	4b45      	ldr	r3, [pc, #276]	; (338b0 <smp_pairing_req+0x188>)
	rsp->io_capability = get_io_capa();
   3379c:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   3379e:	781b      	ldrb	r3, [r3, #0]
   337a0:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   337a2:	2310      	movs	r3, #16
   337a4:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   337a6:	7933      	ldrb	r3, [r6, #4]
   337a8:	f003 0303 	and.w	r3, r3, #3
   337ac:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   337ae:	7973      	ldrb	r3, [r6, #5]
   337b0:	f003 0301 	and.w	r3, r3, #1
   337b4:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   337b6:	072b      	lsls	r3, r5, #28
   337b8:	d50c      	bpl.n	337d4 <smp_pairing_req+0xac>
   337ba:	78b3      	ldrb	r3, [r6, #2]
   337bc:	071d      	lsls	r5, r3, #28
   337be:	d509      	bpl.n	337d4 <smp_pairing_req+0xac>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   337c0:	2105      	movs	r1, #5
   337c2:	4638      	mov	r0, r7
   337c4:	f01b fcb0 	bl	4f128 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   337c8:	7d63      	ldrb	r3, [r4, #21]
   337ca:	f003 0302 	and.w	r3, r3, #2
   337ce:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   337d0:	2300      	movs	r3, #0
   337d2:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   337d4:	7ce3      	ldrb	r3, [r4, #19]
   337d6:	0698      	lsls	r0, r3, #26
   337d8:	d506      	bpl.n	337e8 <smp_pairing_req+0xc0>
   337da:	78b3      	ldrb	r3, [r6, #2]
   337dc:	0699      	lsls	r1, r3, #26
   337de:	d503      	bpl.n	337e8 <smp_pairing_req+0xc0>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   337e0:	2114      	movs	r1, #20
   337e2:	4638      	mov	r0, r7
   337e4:	f01b fca0 	bl	4f128 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   337e8:	7da3      	ldrb	r3, [r4, #22]
   337ea:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   337ee:	7d63      	ldrb	r3, [r4, #21]
   337f0:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   337f4:	7ce3      	ldrb	r3, [r4, #19]
   337f6:	07da      	lsls	r2, r3, #31
   337f8:	d506      	bpl.n	33808 <smp_pairing_req+0xe0>
   337fa:	78b3      	ldrb	r3, [r6, #2]
   337fc:	07db      	lsls	r3, r3, #31
   337fe:	d503      	bpl.n	33808 <smp_pairing_req+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   33800:	210d      	movs	r1, #13
   33802:	4638      	mov	r0, r7
   33804:	f01b fc90 	bl	4f128 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   33808:	2103      	movs	r1, #3
   3380a:	4638      	mov	r0, r7
   3380c:	f01b fc8c 	bl	4f128 <atomic_set_bit>
	smp->method = get_pair_method(smp, req->io_capability);
   33810:	7831      	ldrb	r1, [r6, #0]
   33812:	4620      	mov	r0, r4
   33814:	f7ff f9aa 	bl	32b6c <get_pair_method>
   33818:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   3381a:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
   3381e:	4620      	mov	r0, r4
   33820:	f01b fb73 	bl	4ef0a <update_keys_check>
   33824:	b908      	cbnz	r0, 3382a <smp_pairing_req+0x102>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   33826:	2503      	movs	r5, #3
   33828:	e7a3      	b.n	33772 <smp_pairing_req+0x4a>
	err = remote_sec_level_reachable(smp);
   3382a:	4620      	mov	r0, r4
   3382c:	f01b fb8e 	bl	4ef4c <remote_sec_level_reachable>
	if (err) {
   33830:	4605      	mov	r5, r0
   33832:	2800      	cmp	r0, #0
   33834:	d19d      	bne.n	33772 <smp_pairing_req+0x4a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   33836:	2105      	movs	r1, #5
   33838:	4638      	mov	r0, r7
   3383a:	f01b fb2f 	bl	4ee9c <atomic_test_bit>
   3383e:	2800      	cmp	r0, #0
   33840:	d0f1      	beq.n	33826 <smp_pairing_req+0xfe>
		err = smp_pairing_accept_query(conn, req);
   33842:	4631      	mov	r1, r6
   33844:	4640      	mov	r0, r8
   33846:	f7ff fead 	bl	335a4 <smp_pairing_accept_query>
		if (err) {
   3384a:	4605      	mov	r5, r0
   3384c:	2800      	cmp	r0, #0
   3384e:	d190      	bne.n	33772 <smp_pairing_req+0x4a>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   33850:	7a23      	ldrb	r3, [r4, #8]
   33852:	b993      	cbnz	r3, 3387a <smp_pairing_req+0x152>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   33854:	210f      	movs	r1, #15
   33856:	4638      	mov	r0, r7
   33858:	f01b fb20 	bl	4ee9c <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   3385c:	b968      	cbnz	r0, 3387a <smp_pairing_req+0x152>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   3385e:	4e15      	ldr	r6, [pc, #84]	; (338b4 <smp_pairing_req+0x18c>)
   33860:	6833      	ldr	r3, [r6, #0]
   33862:	b153      	cbz	r3, 3387a <smp_pairing_req+0x152>
	    bt_auth && bt_auth->pairing_confirm) {
   33864:	699b      	ldr	r3, [r3, #24]
   33866:	b143      	cbz	r3, 3387a <smp_pairing_req+0x152>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   33868:	4638      	mov	r0, r7
   3386a:	210a      	movs	r1, #10
   3386c:	f01b fc5c 	bl	4f128 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   33870:	6833      	ldr	r3, [r6, #0]
   33872:	4640      	mov	r0, r8
   33874:	699b      	ldr	r3, [r3, #24]
   33876:	4798      	blx	r3
		return 0;
   33878:	e77b      	b.n	33772 <smp_pairing_req+0x4a>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   3387a:	210c      	movs	r1, #12
   3387c:	4620      	mov	r0, r4
   3387e:	f01b fc53 	bl	4f128 <atomic_set_bit>
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   33882:	2102      	movs	r1, #2
   33884:	f01b fc94 	bl	4f1b0 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   33888:	4606      	mov	r6, r0
   3388a:	2800      	cmp	r0, #0
   3388c:	f43f af70 	beq.w	33770 <smp_pairing_req+0x48>
   33890:	2106      	movs	r1, #6
   33892:	3008      	adds	r0, #8
   33894:	f01c fa48 	bl	4fd28 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   33898:	f104 0111 	add.w	r1, r4, #17
   3389c:	2206      	movs	r2, #6
   3389e:	f018 fa62 	bl	4bd66 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   338a2:	4631      	mov	r1, r6
   338a4:	4620      	mov	r0, r4
   338a6:	f01b fba4 	bl	4eff2 <smp_send.constprop.0>
	return 0;
   338aa:	e762      	b.n	33772 <smp_pairing_req+0x4a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   338ac:	2506      	movs	r5, #6
   338ae:	e760      	b.n	33772 <smp_pairing_req+0x4a>
   338b0:	20007417 	.word	0x20007417
   338b4:	2000460c 	.word	0x2000460c

000338b8 <smp_pairing_complete>:
{
   338b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   338ba:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   338be:	4605      	mov	r5, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   338c0:	1d07      	adds	r7, r0, #4
	if (!status) {
   338c2:	b9e9      	cbnz	r1, 33900 <smp_pairing_complete+0x48>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   338c4:	210d      	movs	r1, #13
   338c6:	4638      	mov	r0, r7
   338c8:	f01b fae8 	bl	4ee9c <atomic_test_bit>
		if (bond_flag) {
   338cc:	4606      	mov	r6, r0
   338ce:	b118      	cbz	r0, 338d8 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   338d0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   338d4:	f000 fabc 	bl	33e50 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
   338d8:	4b24      	ldr	r3, [pc, #144]	; (3396c <smp_pairing_complete+0xb4>)
   338da:	681b      	ldr	r3, [r3, #0]
   338dc:	b123      	cbz	r3, 338e8 <smp_pairing_complete+0x30>
   338de:	69db      	ldr	r3, [r3, #28]
		    bt_auth && bt_auth->pairing_failed) {
   338e0:	b113      	cbz	r3, 338e8 <smp_pairing_complete+0x30>
			bt_auth->pairing_failed(conn, security_err);
   338e2:	4631      	mov	r1, r6
   338e4:	4620      	mov	r0, r4
   338e6:	4798      	blx	r3
	smp_reset(smp);
   338e8:	4628      	mov	r0, r5
   338ea:	f01b fe61 	bl	4f5b0 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   338ee:	7a62      	ldrb	r2, [r4, #9]
   338f0:	7aa3      	ldrb	r3, [r4, #10]
   338f2:	429a      	cmp	r2, r3
   338f4:	d039      	beq.n	3396a <smp_pairing_complete+0xb2>
		bt_smp_start_security(conn);
   338f6:	4620      	mov	r0, r4
}
   338f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   338fc:	f01b bef6 	b.w	4f6ec <bt_smp_start_security>
	switch (smp_err) {
   33900:	3901      	subs	r1, #1
   33902:	b2c9      	uxtb	r1, r1
   33904:	290e      	cmp	r1, #14
   33906:	bf9c      	itt	ls
   33908:	4b19      	ldrls	r3, [pc, #100]	; (33970 <smp_pairing_complete+0xb8>)
   3390a:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   3390c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   33910:	bf88      	it	hi
   33912:	2609      	movhi	r6, #9
		if (conn->le.keys &&
   33914:	b143      	cbz	r3, 33928 <smp_pairing_complete+0x70>
   33916:	7b1b      	ldrb	r3, [r3, #12]
   33918:	bb03      	cbnz	r3, 3395c <smp_pairing_complete+0xa4>
			bt_keys_clear(conn->le.keys);
   3391a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   3391e:	f000 fa6f 	bl	33e00 <bt_keys_clear>
			conn->le.keys = NULL;
   33922:	2300      	movs	r3, #0
   33924:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   33928:	2102      	movs	r1, #2
   3392a:	4638      	mov	r0, r7
   3392c:	f01b fab6 	bl	4ee9c <atomic_test_bit>
   33930:	b940      	cbnz	r0, 33944 <smp_pairing_complete+0x8c>
	switch (err) {
   33932:	2e07      	cmp	r6, #7
   33934:	bf96      	itet	ls
   33936:	4b0f      	ldrls	r3, [pc, #60]	; (33974 <smp_pairing_complete+0xbc>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   33938:	211f      	movhi	r1, #31
   3393a:	5d99      	ldrbls	r1, [r3, r6]
			bt_conn_security_changed(conn,
   3393c:	4632      	mov	r2, r6
   3393e:	4620      	mov	r0, r4
   33940:	f7fc fae6 	bl	2ff10 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   33944:	2103      	movs	r1, #3
   33946:	4638      	mov	r0, r7
   33948:	f01b faa8 	bl	4ee9c <atomic_test_bit>
   3394c:	2800      	cmp	r0, #0
   3394e:	d0cb      	beq.n	338e8 <smp_pairing_complete+0x30>
   33950:	4b06      	ldr	r3, [pc, #24]	; (3396c <smp_pairing_complete+0xb4>)
   33952:	681b      	ldr	r3, [r3, #0]
   33954:	2b00      	cmp	r3, #0
   33956:	d0c7      	beq.n	338e8 <smp_pairing_complete+0x30>
		    bt_auth && bt_auth->pairing_failed) {
   33958:	6a1b      	ldr	r3, [r3, #32]
   3395a:	e7c1      	b.n	338e0 <smp_pairing_complete+0x28>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   3395c:	2102      	movs	r1, #2
   3395e:	4638      	mov	r0, r7
   33960:	f01b fa9c 	bl	4ee9c <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   33964:	2800      	cmp	r0, #0
   33966:	d1d8      	bne.n	3391a <smp_pairing_complete+0x62>
   33968:	e7de      	b.n	33928 <smp_pairing_complete+0x70>
}
   3396a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3396c:	2000460c 	.word	0x2000460c
   33970:	0005443d 	.word	0x0005443d
   33974:	0005442c 	.word	0x0005442c

00033978 <bt_smp_recv>:
{
   33978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   3397a:	898b      	ldrh	r3, [r1, #12]
{
   3397c:	4607      	mov	r7, r0
   3397e:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   33980:	b393      	cbz	r3, 339e8 <bt_smp_recv+0x70>
	return net_buf_simple_pull_mem(&buf->b, len);
   33982:	2101      	movs	r1, #1
   33984:	f105 0008 	add.w	r0, r5, #8
   33988:	f01c f9ff 	bl	4fd8a <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   3398c:	2104      	movs	r1, #4
   3398e:	4606      	mov	r6, r0
   33990:	f1a7 00ec 	sub.w	r0, r7, #236	; 0xec
   33994:	f1a7 04f0 	sub.w	r4, r7, #240	; 0xf0
   33998:	f01b fa80 	bl	4ee9c <atomic_test_bit>
   3399c:	bb20      	cbnz	r0, 339e8 <bt_smp_recv+0x70>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   3399e:	7831      	ldrb	r1, [r6, #0]
   339a0:	290e      	cmp	r1, #14
   339a2:	d821      	bhi.n	339e8 <bt_smp_recv+0x70>
	if (!handlers[hdr->code].func) {
   339a4:	4f11      	ldr	r7, [pc, #68]	; (339ec <bt_smp_recv+0x74>)
   339a6:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   339aa:	b923      	cbnz	r3, 339b6 <bt_smp_recv+0x3e>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   339ac:	2107      	movs	r1, #7
		smp_error(smp, err);
   339ae:	4620      	mov	r0, r4
   339b0:	f01b ff43 	bl	4f83a <smp_error>
   339b4:	e018      	b.n	339e8 <bt_smp_recv+0x70>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   339b6:	4620      	mov	r0, r4
   339b8:	f01b fde4 	bl	4f584 <atomic_test_and_clear_bit>
   339bc:	7833      	ldrb	r3, [r6, #0]
   339be:	b918      	cbnz	r0, 339c8 <bt_smp_recv+0x50>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   339c0:	2b05      	cmp	r3, #5
   339c2:	d011      	beq.n	339e8 <bt_smp_recv+0x70>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   339c4:	2108      	movs	r1, #8
   339c6:	e7f2      	b.n	339ae <bt_smp_recv+0x36>
	if (buf->len != handlers[hdr->code].expect_len) {
   339c8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   339cc:	89a9      	ldrh	r1, [r5, #12]
   339ce:	7912      	ldrb	r2, [r2, #4]
   339d0:	4291      	cmp	r1, r2
   339d2:	d001      	beq.n	339d8 <bt_smp_recv+0x60>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   339d4:	210a      	movs	r1, #10
   339d6:	e7ea      	b.n	339ae <bt_smp_recv+0x36>
	err = handlers[hdr->code].func(smp, buf);
   339d8:	4629      	mov	r1, r5
   339da:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   339de:	4620      	mov	r0, r4
   339e0:	4798      	blx	r3
	if (err) {
   339e2:	4601      	mov	r1, r0
   339e4:	2800      	cmp	r0, #0
   339e6:	d1e2      	bne.n	339ae <bt_smp_recv+0x36>
}
   339e8:	2000      	movs	r0, #0
   339ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   339ec:	00052b04 	.word	0x00052b04

000339f0 <bt_smp_pkey_ready>:
{
   339f0:	b538      	push	{r3, r4, r5, lr}
	sc_public_key = pkey;
   339f2:	4b16      	ldr	r3, [pc, #88]	; (33a4c <bt_smp_pkey_ready+0x5c>)
   339f4:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   339f6:	b1f0      	cbz	r0, 33a36 <bt_smp_pkey_ready+0x46>
	z_impl_k_sem_give(sem);
   339f8:	4815      	ldr	r0, [pc, #84]	; (33a50 <bt_smp_pkey_ready+0x60>)
   339fa:	4c16      	ldr	r4, [pc, #88]	; (33a54 <bt_smp_pkey_ready+0x64>)
   339fc:	f014 fb9c 	bl	48138 <z_impl_k_sem_give>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   33a00:	2500      	movs	r5, #0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   33a02:	2106      	movs	r1, #6
   33a04:	1d20      	adds	r0, r4, #4
   33a06:	f01b fa49 	bl	4ee9c <atomic_test_bit>
   33a0a:	b178      	cbz	r0, 33a2c <bt_smp_pkey_ready+0x3c>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   33a0c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   33a10:	78db      	ldrb	r3, [r3, #3]
			err = sc_send_public_key(smp);
   33a12:	4620      	mov	r0, r4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   33a14:	b983      	cbnz	r3, 33a38 <bt_smp_pkey_ready+0x48>
			err = sc_send_public_key(smp);
   33a16:	f7ff fb5d 	bl	330d4 <sc_send_public_key>
			if (err) {
   33a1a:	4601      	mov	r1, r0
   33a1c:	b110      	cbz	r0, 33a24 <bt_smp_pkey_ready+0x34>
				smp_error(smp, err);
   33a1e:	4620      	mov	r0, r4
   33a20:	f01b ff0b 	bl	4f83a <smp_error>
			atomic_set_bit(smp->allowed_cmds,
   33a24:	210c      	movs	r1, #12
   33a26:	4620      	mov	r0, r4
   33a28:	f01b fb7e 	bl	4f128 <atomic_set_bit>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   33a2c:	3501      	adds	r5, #1
   33a2e:	2d06      	cmp	r5, #6
   33a30:	f504 7402 	add.w	r4, r4, #520	; 0x208
   33a34:	d1e5      	bne.n	33a02 <bt_smp_pkey_ready+0x12>
}
   33a36:	bd38      	pop	{r3, r4, r5, pc}
		err = smp_public_key_periph(smp);
   33a38:	f7ff fc96 	bl	33368 <smp_public_key_periph>
		if (err) {
   33a3c:	4601      	mov	r1, r0
   33a3e:	2800      	cmp	r0, #0
   33a40:	d0f4      	beq.n	33a2c <bt_smp_pkey_ready+0x3c>
			smp_error(smp, err);
   33a42:	4620      	mov	r0, r4
   33a44:	f01b fef9 	bl	4f83a <smp_error>
   33a48:	e7f0      	b.n	33a2c <bt_smp_pkey_ready+0x3c>
   33a4a:	bf00      	nop
   33a4c:	2000484c 	.word	0x2000484c
   33a50:	200012dc 	.word	0x200012dc
   33a54:	20002630 	.word	0x20002630

00033a58 <smp_pairing_failed>:
{
   33a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   33a5a:	1d05      	adds	r5, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   33a5c:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   33a60:	688e      	ldr	r6, [r1, #8]
{
   33a62:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   33a64:	210a      	movs	r1, #10
   33a66:	4628      	mov	r0, r5
   33a68:	f01b fd8c 	bl	4f584 <atomic_test_and_clear_bit>
   33a6c:	b140      	cbz	r0, 33a80 <smp_pairing_failed+0x28>
		if (bt_auth && bt_auth->cancel) {
   33a6e:	4b0b      	ldr	r3, [pc, #44]	; (33a9c <smp_pairing_failed+0x44>)
   33a70:	681b      	ldr	r3, [r3, #0]
   33a72:	b963      	cbnz	r3, 33a8e <smp_pairing_failed+0x36>
	smp_pairing_complete(smp, req->reason);
   33a74:	4620      	mov	r0, r4
   33a76:	7831      	ldrb	r1, [r6, #0]
   33a78:	f7ff ff1e 	bl	338b8 <smp_pairing_complete>
}
   33a7c:	2000      	movs	r0, #0
   33a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   33a80:	210b      	movs	r1, #11
   33a82:	4628      	mov	r0, r5
   33a84:	f01b fd7e 	bl	4f584 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   33a88:	2800      	cmp	r0, #0
   33a8a:	d1f0      	bne.n	33a6e <smp_pairing_failed+0x16>
   33a8c:	e7f2      	b.n	33a74 <smp_pairing_failed+0x1c>
		if (bt_auth && bt_auth->cancel) {
   33a8e:	695b      	ldr	r3, [r3, #20]
   33a90:	2b00      	cmp	r3, #0
   33a92:	d0ef      	beq.n	33a74 <smp_pairing_failed+0x1c>
			bt_auth->cancel(conn);
   33a94:	4638      	mov	r0, r7
   33a96:	4798      	blx	r3
   33a98:	e7ec      	b.n	33a74 <smp_pairing_failed+0x1c>
   33a9a:	bf00      	nop
   33a9c:	2000460c 	.word	0x2000460c

00033aa0 <bt_smp_encrypt_change>:
{
   33aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   33aa4:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   33aa6:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   33aaa:	4604      	mov	r4, r0
   33aac:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   33aae:	4630      	mov	r0, r6
   33ab0:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   33ab2:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   33ab6:	f01b fd65 	bl	4f584 <atomic_test_and_clear_bit>
   33aba:	2800      	cmp	r0, #0
   33abc:	d05f      	beq.n	33b7e <bt_smp_encrypt_change+0xde>
	if (hci_status) {
   33abe:	b1cf      	cbz	r7, 33af4 <bt_smp_encrypt_change+0x54>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   33ac0:	2103      	movs	r1, #3
   33ac2:	4630      	mov	r0, r6
   33ac4:	f01b f9ea 	bl	4ee9c <atomic_test_bit>
   33ac8:	2800      	cmp	r0, #0
   33aca:	d058      	beq.n	33b7e <bt_smp_encrypt_change+0xde>
			uint8_t smp_err = smp_err_get(
   33acc:	4638      	mov	r0, r7
   33ace:	f7fa fc09 	bl	2e2e4 <bt_security_err_get>
	switch (auth_err) {
   33ad2:	3801      	subs	r0, #1
   33ad4:	b2c0      	uxtb	r0, r0
   33ad6:	2808      	cmp	r0, #8
   33ad8:	bf9a      	itte	ls
   33ada:	4b2e      	ldrls	r3, [pc, #184]	; (33b94 <bt_smp_encrypt_change+0xf4>)
   33adc:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   33ade:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   33ae0:	2102      	movs	r1, #2
   33ae2:	4630      	mov	r0, r6
   33ae4:	f01b fb20 	bl	4f128 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   33ae8:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   33aea:	4628      	mov	r0, r5
}
   33aec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   33af0:	f7ff bee2 	b.w	338b8 <smp_pairing_complete>
	if (!conn->encrypt) {
   33af4:	f898 300b 	ldrb.w	r3, [r8, #11]
   33af8:	2b00      	cmp	r3, #0
   33afa:	d040      	beq.n	33b7e <bt_smp_encrypt_change+0xde>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   33afc:	2103      	movs	r1, #3
   33afe:	4630      	mov	r0, r6
   33b00:	f01b f9cc 	bl	4ee9c <atomic_test_bit>
   33b04:	b920      	cbnz	r0, 33b10 <bt_smp_encrypt_change+0x70>
		smp_reset(smp);
   33b06:	4628      	mov	r0, r5
}
   33b08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   33b0c:	f01b bd50 	b.w	4f5b0 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   33b10:	2105      	movs	r1, #5
   33b12:	4630      	mov	r0, r6
   33b14:	f01b f9c2 	bl	4ee9c <atomic_test_bit>
   33b18:	b1b8      	cbz	r0, 33b4a <bt_smp_encrypt_change+0xaa>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   33b1a:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   33b1e:	071f      	lsls	r7, r3, #28
   33b20:	d507      	bpl.n	33b32 <bt_smp_encrypt_change+0x92>
   33b22:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   33b26:	0718      	lsls	r0, r3, #28
   33b28:	d503      	bpl.n	33b32 <bt_smp_encrypt_change+0x92>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   33b2a:	2111      	movs	r1, #17
   33b2c:	4630      	mov	r0, r6
   33b2e:	f01b fafb 	bl	4f128 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   33b32:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   33b36:	f023 0308 	bic.w	r3, r3, #8
   33b3a:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   33b3e:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   33b42:	f023 0308 	bic.w	r3, r3, #8
   33b46:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   33b4a:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   33b4e:	07d9      	lsls	r1, r3, #31
   33b50:	d517      	bpl.n	33b82 <bt_smp_encrypt_change+0xe2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   33b52:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   33b54:	4628      	mov	r0, r5
   33b56:	f01b fae7 	bl	4f128 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   33b5a:	2102      	movs	r1, #2
   33b5c:	4630      	mov	r0, r6
   33b5e:	f01b fae3 	bl	4f128 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   33b62:	f898 3003 	ldrb.w	r3, [r8, #3]
   33b66:	b913      	cbnz	r3, 33b6e <bt_smp_encrypt_change+0xce>
	    conn->role == BT_HCI_ROLE_CENTRAL && smp->remote_dist) {
   33b68:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   33b6c:	b93b      	cbnz	r3, 33b7e <bt_smp_encrypt_change+0xde>
	struct bt_keys *keys = conn->le.keys;
   33b6e:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   33b70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   33b74:	b11b      	cbz	r3, 33b7e <bt_smp_encrypt_change+0xde>
	if (!smp->local_dist && !smp->remote_dist) {
   33b76:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   33b7a:	2900      	cmp	r1, #0
   33b7c:	d0b5      	beq.n	33aea <bt_smp_encrypt_change+0x4a>
}
   33b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   33b82:	079a      	lsls	r2, r3, #30
   33b84:	d501      	bpl.n	33b8a <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   33b86:	2108      	movs	r1, #8
   33b88:	e7e4      	b.n	33b54 <bt_smp_encrypt_change+0xb4>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   33b8a:	075b      	lsls	r3, r3, #29
   33b8c:	d5e5      	bpl.n	33b5a <bt_smp_encrypt_change+0xba>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   33b8e:	210a      	movs	r1, #10
   33b90:	e7e0      	b.n	33b54 <bt_smp_encrypt_change+0xb4>
   33b92:	bf00      	nop
   33b94:	00054434 	.word	0x00054434

00033b98 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   33b98:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   33b9a:	4b0a      	ldr	r3, [pc, #40]	; (33bc4 <bt_smp_init+0x2c>)
   33b9c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   33ba0:	f003 0306 	and.w	r3, r3, #6
   33ba4:	2b06      	cmp	r3, #6
   33ba6:	4b08      	ldr	r3, [pc, #32]	; (33bc8 <bt_smp_init+0x30>)
   33ba8:	bf0c      	ite	eq
   33baa:	2201      	moveq	r2, #1
   33bac:	2200      	movne	r2, #0
   33bae:	701a      	strb	r2, [r3, #0]
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
	if (IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) && !sc_supported) {
   33bb0:	d104      	bne.n	33bbc <bt_smp_init+0x24>
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   33bb2:	4806      	ldr	r0, [pc, #24]	; (33bcc <bt_smp_init+0x34>)
   33bb4:	f7fb fd76 	bl	2f6a4 <bt_pub_key_gen>
	}

	return smp_self_test();
   33bb8:	2000      	movs	r0, #0
}
   33bba:	bd08      	pop	{r3, pc}
		return -ENOENT;
   33bbc:	f06f 0001 	mvn.w	r0, #1
   33bc0:	e7fb      	b.n	33bba <bt_smp_init+0x22>
   33bc2:	bf00      	nop
   33bc4:	20000030 	.word	0x20000030
   33bc8:	20007416 	.word	0x20007416
   33bcc:	200008e4 	.word	0x200008e4

00033bd0 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   33bd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	int i;
	size_t first_free_slot = ARRAY_SIZE(key_pool);

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33bd4:	2500      	movs	r5, #0
   33bd6:	4e1d      	ldr	r6, [pc, #116]	; (33c4c <bt_keys_get_addr+0x7c>)
{
   33bd8:	4680      	mov	r8, r0
   33bda:	460f      	mov	r7, r1
	size_t first_free_slot = ARRAY_SIZE(key_pool);
   33bdc:	2406      	movs	r4, #6

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   33bde:	46a9      	mov	r9, r5
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   33be0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   33be4:	4543      	cmp	r3, r8
   33be6:	d021      	beq.n	33c2c <bt_keys_get_addr+0x5c>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   33be8:	2c06      	cmp	r4, #6
   33bea:	d10b      	bne.n	33c04 <bt_keys_get_addr+0x34>
	return memcmp(a, b, sizeof(*a));
   33bec:	2207      	movs	r2, #7
   33bee:	4669      	mov	r1, sp
   33bf0:	4630      	mov	r0, r6
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   33bf2:	f8cd 9000 	str.w	r9, [sp]
   33bf6:	f8cd 9003 	str.w	r9, [sp, #3]
   33bfa:	f018 f8a4 	bl	4bd46 <memcmp>
			first_free_slot = i;
   33bfe:	2800      	cmp	r0, #0
   33c00:	bf08      	it	eq
   33c02:	462c      	moveq	r4, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33c04:	3501      	adds	r5, #1
   33c06:	2d06      	cmp	r5, #6
   33c08:	f106 0640 	add.w	r6, r6, #64	; 0x40
   33c0c:	d1e8      	bne.n	33be0 <bt_keys_get_addr+0x10>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   33c0e:	2c06      	cmp	r4, #6
   33c10:	d01a      	beq.n	33c48 <bt_keys_get_addr+0x78>
		keys = &key_pool[first_free_slot];
   33c12:	480f      	ldr	r0, [pc, #60]	; (33c50 <bt_keys_get_addr+0x80>)
   33c14:	01a3      	lsls	r3, r4, #6
	memcpy(dst, src, sizeof(*dst));
   33c16:	2207      	movs	r2, #7
		keys->id = id;
   33c18:	f800 8003 	strb.w	r8, [r0, r3]
		bt_addr_le_copy(&keys->addr, addr);
   33c1c:	3301      	adds	r3, #1
		keys = &key_pool[first_free_slot];
   33c1e:	eb00 1484 	add.w	r4, r0, r4, lsl #6
   33c22:	4639      	mov	r1, r7
   33c24:	4418      	add	r0, r3
   33c26:	f018 f89e 	bl	4bd66 <memcpy>
}
   33c2a:	e009      	b.n	33c40 <bt_keys_get_addr+0x70>
	return memcmp(a, b, sizeof(*a));
   33c2c:	2207      	movs	r2, #7
   33c2e:	4639      	mov	r1, r7
   33c30:	4630      	mov	r0, r6
   33c32:	f018 f888 	bl	4bd46 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   33c36:	2800      	cmp	r0, #0
   33c38:	d1d6      	bne.n	33be8 <bt_keys_get_addr+0x18>
		keys = &key_pool[i];
   33c3a:	4c05      	ldr	r4, [pc, #20]	; (33c50 <bt_keys_get_addr+0x80>)
   33c3c:	eb04 1485 	add.w	r4, r4, r5, lsl #6
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
   33c40:	4620      	mov	r0, r4
   33c42:	b003      	add	sp, #12
   33c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return NULL;
   33c48:	2400      	movs	r4, #0
   33c4a:	e7f9      	b.n	33c40 <bt_keys_get_addr+0x70>
   33c4c:	20004851 	.word	0x20004851
   33c50:	20004850 	.word	0x20004850

00033c54 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   33c54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   33c58:	4c0d      	ldr	r4, [pc, #52]	; (33c90 <bt_foreach_bond+0x3c>)
   33c5a:	4605      	mov	r5, r0
   33c5c:	460e      	mov	r6, r1
   33c5e:	4617      	mov	r7, r2
   33c60:	f504 78c0 	add.w	r8, r4, #384	; 0x180
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   33c64:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   33c68:	b15b      	cbz	r3, 33c82 <bt_foreach_bond+0x2e>
   33c6a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   33c6e:	42ab      	cmp	r3, r5
   33c70:	d107      	bne.n	33c82 <bt_foreach_bond+0x2e>
	memcpy(dst, src, sizeof(*dst));
   33c72:	4621      	mov	r1, r4
   33c74:	2207      	movs	r2, #7
   33c76:	4668      	mov	r0, sp
   33c78:	f018 f875 	bl	4bd66 <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
   33c7c:	4639      	mov	r1, r7
   33c7e:	4668      	mov	r0, sp
   33c80:	47b0      	blx	r6
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33c82:	3440      	adds	r4, #64	; 0x40
   33c84:	4544      	cmp	r4, r8
   33c86:	d1ed      	bne.n	33c64 <bt_foreach_bond+0x10>
		}
	}
}
   33c88:	b002      	add	sp, #8
   33c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33c8e:	bf00      	nop
   33c90:	20004851 	.word	0x20004851

00033c94 <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   33c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33c98:	4c08      	ldr	r4, [pc, #32]	; (33cbc <bt_keys_foreach+0x28>)
   33c9a:	4605      	mov	r5, r0
   33c9c:	460e      	mov	r6, r1
   33c9e:	4617      	mov	r7, r2
   33ca0:	f504 78c0 	add.w	r8, r4, #384	; 0x180
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   33ca4:	89e3      	ldrh	r3, [r4, #14]
   33ca6:	422b      	tst	r3, r5
   33ca8:	d002      	beq.n	33cb0 <bt_keys_foreach+0x1c>
			func(&key_pool[i], data);
   33caa:	4639      	mov	r1, r7
   33cac:	4620      	mov	r0, r4
   33cae:	47b0      	blx	r6
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33cb0:	3440      	adds	r4, #64	; 0x40
   33cb2:	4544      	cmp	r4, r8
   33cb4:	d1f6      	bne.n	33ca4 <bt_keys_foreach+0x10>
		}
	}
}
   33cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33cba:	bf00      	nop
   33cbc:	20004850 	.word	0x20004850

00033cc0 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   33cc0:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   33cc2:	4903      	ldr	r1, [pc, #12]	; (33cd0 <keys_commit+0x10>)
   33cc4:	2200      	movs	r2, #0
   33cc6:	2002      	movs	r0, #2
   33cc8:	f7ff ffe4 	bl	33c94 <bt_keys_foreach>
	}

	return 0;
}
   33ccc:	2000      	movs	r0, #0
   33cce:	bd08      	pop	{r3, pc}
   33cd0:	0004fba9 	.word	0x0004fba9

00033cd4 <bt_keys_find>:
{
   33cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33cd8:	4d0f      	ldr	r5, [pc, #60]	; (33d18 <bt_keys_find+0x44>)
   33cda:	4606      	mov	r6, r0
   33cdc:	460f      	mov	r7, r1
   33cde:	4690      	mov	r8, r2
   33ce0:	2400      	movs	r4, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   33ce2:	f8b5 300d 	ldrh.w	r3, [r5, #13]
   33ce6:	4233      	tst	r3, r6
   33ce8:	d00d      	beq.n	33d06 <bt_keys_find+0x32>
   33cea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   33cee:	42bb      	cmp	r3, r7
   33cf0:	d109      	bne.n	33d06 <bt_keys_find+0x32>
	return memcmp(a, b, sizeof(*a));
   33cf2:	2207      	movs	r2, #7
   33cf4:	4641      	mov	r1, r8
   33cf6:	4628      	mov	r0, r5
   33cf8:	f018 f825 	bl	4bd46 <memcmp>
   33cfc:	b918      	cbnz	r0, 33d06 <bt_keys_find+0x32>
			return &key_pool[i];
   33cfe:	4807      	ldr	r0, [pc, #28]	; (33d1c <bt_keys_find+0x48>)
   33d00:	4420      	add	r0, r4
}
   33d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33d06:	3440      	adds	r4, #64	; 0x40
   33d08:	f5b4 7fc0 	cmp.w	r4, #384	; 0x180
   33d0c:	f105 0540 	add.w	r5, r5, #64	; 0x40
   33d10:	d1e7      	bne.n	33ce2 <bt_keys_find+0xe>
	return NULL;
   33d12:	2000      	movs	r0, #0
   33d14:	e7f5      	b.n	33d02 <bt_keys_find+0x2e>
   33d16:	bf00      	nop
   33d18:	20004851 	.word	0x20004851
   33d1c:	20004850 	.word	0x20004850

00033d20 <bt_keys_find_irk>:
{
   33d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   33d24:	780b      	ldrb	r3, [r1, #0]
   33d26:	2b01      	cmp	r3, #1
   33d28:	4607      	mov	r7, r0
   33d2a:	460d      	mov	r5, r1
   33d2c:	d002      	beq.n	33d34 <bt_keys_find_irk+0x14>
		return NULL;
   33d2e:	2000      	movs	r0, #0
}
   33d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   33d34:	798b      	ldrb	r3, [r1, #6]
   33d36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   33d3a:	2b40      	cmp	r3, #64	; 0x40
   33d3c:	d1f7      	bne.n	33d2e <bt_keys_find_irk+0xe>
   33d3e:	4e1e      	ldr	r6, [pc, #120]	; (33db8 <bt_keys_find_irk+0x98>)
   33d40:	2400      	movs	r4, #0
		    !bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
   33d42:	f101 0801 	add.w	r8, r1, #1
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   33d46:	f836 3c2c 	ldrh.w	r3, [r6, #-44]
   33d4a:	079a      	lsls	r2, r3, #30
   33d4c:	d50c      	bpl.n	33d68 <bt_keys_find_irk+0x48>
		if (key_pool[i].id == id &&
   33d4e:	f816 3c3a 	ldrb.w	r3, [r6, #-58]
   33d52:	42bb      	cmp	r3, r7
   33d54:	d108      	bne.n	33d68 <bt_keys_find_irk+0x48>
	return memcmp(a, b, sizeof(*a));
   33d56:	2206      	movs	r2, #6
   33d58:	4631      	mov	r1, r6
   33d5a:	4640      	mov	r0, r8
   33d5c:	f017 fff3 	bl	4bd46 <memcmp>
   33d60:	b910      	cbnz	r0, 33d68 <bt_keys_find_irk+0x48>
			return &key_pool[i];
   33d62:	4816      	ldr	r0, [pc, #88]	; (33dbc <bt_keys_find_irk+0x9c>)
   33d64:	4420      	add	r0, r4
   33d66:	e7e3      	b.n	33d30 <bt_keys_find_irk+0x10>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33d68:	3440      	adds	r4, #64	; 0x40
   33d6a:	f5b4 7fc0 	cmp.w	r4, #384	; 0x180
   33d6e:	f106 0640 	add.w	r6, r6, #64	; 0x40
   33d72:	d1e8      	bne.n	33d46 <bt_keys_find_irk+0x26>
   33d74:	4e12      	ldr	r6, [pc, #72]	; (33dc0 <bt_keys_find_irk+0xa0>)
   33d76:	2400      	movs	r4, #0
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   33d78:	3501      	adds	r5, #1
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   33d7a:	f836 3c1c 	ldrh.w	r3, [r6, #-28]
   33d7e:	079b      	lsls	r3, r3, #30
   33d80:	d512      	bpl.n	33da8 <bt_keys_find_irk+0x88>
		if (key_pool[i].id != id) {
   33d82:	f816 3c2a 	ldrb.w	r3, [r6, #-42]
   33d86:	42bb      	cmp	r3, r7
   33d88:	d10e      	bne.n	33da8 <bt_keys_find_irk+0x88>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   33d8a:	4629      	mov	r1, r5
   33d8c:	4630      	mov	r0, r6
   33d8e:	f018 f846 	bl	4be1e <bt_rpa_irk_matches>
   33d92:	b148      	cbz	r0, 33da8 <bt_keys_find_irk+0x88>
			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
   33d94:	4e09      	ldr	r6, [pc, #36]	; (33dbc <bt_keys_find_irk+0x9c>)
   33d96:	f104 003a 	add.w	r0, r4, #58	; 0x3a
	memcpy(dst, src, sizeof(*dst));
   33d9a:	2206      	movs	r2, #6
   33d9c:	4629      	mov	r1, r5
   33d9e:	4430      	add	r0, r6
   33da0:	f017 ffe1 	bl	4bd66 <memcpy>
			return &key_pool[i];
   33da4:	19a0      	adds	r0, r4, r6
   33da6:	e7c3      	b.n	33d30 <bt_keys_find_irk+0x10>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33da8:	3440      	adds	r4, #64	; 0x40
   33daa:	f5b4 7fc0 	cmp.w	r4, #384	; 0x180
   33dae:	f106 0640 	add.w	r6, r6, #64	; 0x40
   33db2:	d1e2      	bne.n	33d7a <bt_keys_find_irk+0x5a>
   33db4:	e7bb      	b.n	33d2e <bt_keys_find_irk+0xe>
   33db6:	bf00      	nop
   33db8:	2000488a 	.word	0x2000488a
   33dbc:	20004850 	.word	0x20004850
   33dc0:	2000487a 	.word	0x2000487a

00033dc4 <bt_keys_find_addr>:
{
   33dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33dc6:	4d0c      	ldr	r5, [pc, #48]	; (33df8 <bt_keys_find_addr+0x34>)
   33dc8:	4606      	mov	r6, r0
   33dca:	460f      	mov	r7, r1
   33dcc:	2400      	movs	r4, #0
		if (key_pool[i].id == id &&
   33dce:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   33dd2:	42b3      	cmp	r3, r6
   33dd4:	d108      	bne.n	33de8 <bt_keys_find_addr+0x24>
	return memcmp(a, b, sizeof(*a));
   33dd6:	2207      	movs	r2, #7
   33dd8:	4639      	mov	r1, r7
   33dda:	4628      	mov	r0, r5
   33ddc:	f017 ffb3 	bl	4bd46 <memcmp>
   33de0:	b910      	cbnz	r0, 33de8 <bt_keys_find_addr+0x24>
			return &key_pool[i];
   33de2:	4806      	ldr	r0, [pc, #24]	; (33dfc <bt_keys_find_addr+0x38>)
   33de4:	4420      	add	r0, r4
}
   33de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33de8:	3440      	adds	r4, #64	; 0x40
   33dea:	f5b4 7fc0 	cmp.w	r4, #384	; 0x180
   33dee:	f105 0540 	add.w	r5, r5, #64	; 0x40
   33df2:	d1ec      	bne.n	33dce <bt_keys_find_addr+0xa>
	return NULL;
   33df4:	2000      	movs	r0, #0
   33df6:	e7f6      	b.n	33de6 <bt_keys_find_addr+0x22>
   33df8:	20004851 	.word	0x20004851
   33dfc:	20004850 	.word	0x20004850

00033e00 <bt_keys_clear>:
{
   33e00:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   33e02:	7a03      	ldrb	r3, [r0, #8]
   33e04:	075b      	lsls	r3, r3, #29
{
   33e06:	b08c      	sub	sp, #48	; 0x30
   33e08:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   33e0a:	d501      	bpl.n	33e10 <bt_keys_clear+0x10>
		bt_id_del(keys);
   33e0c:	f7fa fd38 	bl	2e880 <bt_id_del>
		if (keys->id) {
   33e10:	4625      	mov	r5, r4
   33e12:	f815 2b01 	ldrb.w	r2, [r5], #1
   33e16:	b1b2      	cbz	r2, 33e46 <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   33e18:	ae02      	add	r6, sp, #8
   33e1a:	2104      	movs	r1, #4
   33e1c:	4630      	mov	r0, r6
   33e1e:	f015 fdb8 	bl	49992 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   33e22:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   33e24:	4a09      	ldr	r2, [pc, #36]	; (33e4c <bt_keys_clear+0x4c>)
   33e26:	462b      	mov	r3, r5
   33e28:	2124      	movs	r1, #36	; 0x24
   33e2a:	a803      	add	r0, sp, #12
   33e2c:	f7f9 fc62 	bl	2d6f4 <bt_settings_encode_key>
		settings_delete(key);
   33e30:	a803      	add	r0, sp, #12
   33e32:	f016 fc9f 	bl	4a774 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   33e36:	2240      	movs	r2, #64	; 0x40
   33e38:	2100      	movs	r1, #0
   33e3a:	4620      	mov	r0, r4
}
   33e3c:	b00c      	add	sp, #48	; 0x30
   33e3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   33e42:	f017 bf9b 	b.w	4bd7c <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   33e46:	9200      	str	r2, [sp, #0]
   33e48:	e7ec      	b.n	33e24 <bt_keys_clear+0x24>
   33e4a:	bf00      	nop
   33e4c:	00054478 	.word	0x00054478

00033e50 <bt_keys_store>:
{
   33e50:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   33e52:	4605      	mov	r5, r0
{
   33e54:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   33e56:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   33e5a:	4604      	mov	r4, r0
	if (keys->id) {
   33e5c:	b19a      	cbz	r2, 33e86 <bt_keys_store+0x36>
		u8_to_dec(id, sizeof(id), keys->id);
   33e5e:	ae02      	add	r6, sp, #8
   33e60:	2104      	movs	r1, #4
   33e62:	4630      	mov	r0, r6
   33e64:	f015 fd95 	bl	49992 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   33e68:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   33e6a:	462b      	mov	r3, r5
   33e6c:	a803      	add	r0, sp, #12
   33e6e:	4a07      	ldr	r2, [pc, #28]	; (33e8c <bt_keys_store+0x3c>)
   33e70:	2124      	movs	r1, #36	; 0x24
   33e72:	f7f9 fc3f 	bl	2d6f4 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   33e76:	2234      	movs	r2, #52	; 0x34
   33e78:	f104 010c 	add.w	r1, r4, #12
   33e7c:	a803      	add	r0, sp, #12
   33e7e:	f7f8 fa4b 	bl	2c318 <settings_save_one>
}
   33e82:	b00c      	add	sp, #48	; 0x30
   33e84:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   33e86:	9200      	str	r2, [sp, #0]
   33e88:	e7ef      	b.n	33e6a <bt_keys_store+0x1a>
   33e8a:	bf00      	nop
   33e8c:	00054478 	.word	0x00054478

00033e90 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   33e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33e94:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   33e96:	1dc2      	adds	r2, r0, #7
   33e98:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   33e9c:	1e75      	subs	r5, r6, #1
{
   33e9e:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   33ea0:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
   33ea2:	6018      	str	r0, [r3, #0]
{
   33ea4:	b082      	sub	sp, #8
   33ea6:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   33ea8:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   33eaa:	2100      	movs	r1, #0
   33eac:	2204      	movs	r2, #4
   33eae:	fb07 0005 	mla	r0, r7, r5, r0
   33eb2:	f017 ff63 	bl	4bd7c <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   33eb6:	b1bd      	cbz	r5, 33ee8 <mem_init+0x58>
   33eb8:	3e02      	subs	r6, #2
   33eba:	b2b6      	uxth	r6, r6
   33ebc:	fb06 7307 	mla	r3, r6, r7, r7
   33ec0:	fb06 f807 	mul.w	r8, r6, r7
   33ec4:	441c      	add	r4, r3
   33ec6:	eba8 0803 	sub.w	r8, r8, r3
   33eca:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   33ecc:	2204      	movs	r2, #4
   33ece:	eb04 0008 	add.w	r0, r4, r8
   33ed2:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
   33ed6:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   33ed8:	f017 ff45 	bl	4bd66 <memcpy>
	while (mem_count--) {
   33edc:	42b5      	cmp	r5, r6
   33ede:	eba4 0407 	sub.w	r4, r4, r7
   33ee2:	f105 0501 	add.w	r5, r5, #1
   33ee6:	d1f1      	bne.n	33ecc <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   33ee8:	b002      	add	sp, #8
   33eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33eee:	bf00      	nop

00033ef0 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   33ef0:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   33ef2:	6805      	ldr	r5, [r0, #0]
{
   33ef4:	b082      	sub	sp, #8
	if (*mem_head) {
   33ef6:	b195      	cbz	r5, 33f1e <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   33ef8:	1deb      	adds	r3, r5, #7
   33efa:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   33efe:	2204      	movs	r2, #4
   33f00:	4604      	mov	r4, r0
   33f02:	4629      	mov	r1, r5
   33f04:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   33f08:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   33f0a:	f017 ff2c 	bl	4bd66 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   33f0e:	9b01      	ldr	r3, [sp, #4]
   33f10:	b123      	cbz	r3, 33f1c <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   33f12:	1dda      	adds	r2, r3, #7
   33f14:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   33f18:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   33f1a:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   33f1c:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   33f1e:	4628      	mov	r0, r5
   33f20:	b002      	add	sp, #8
   33f22:	bd70      	pop	{r4, r5, r6, pc}

00033f24 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   33f24:	680b      	ldr	r3, [r1, #0]
{
   33f26:	b570      	push	{r4, r5, r6, lr}
   33f28:	460c      	mov	r4, r1
   33f2a:	4605      	mov	r5, r0
	if (*mem_head) {
   33f2c:	b183      	cbz	r3, 33f50 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   33f2e:	3307      	adds	r3, #7
   33f30:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   33f34:	881e      	ldrh	r6, [r3, #0]
   33f36:	3601      	adds	r6, #1
   33f38:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
   33f3a:	2204      	movs	r2, #4
   33f3c:	4621      	mov	r1, r4
   33f3e:	4628      	mov	r0, r5
   33f40:	f017 ff11 	bl	4bd66 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   33f44:	1deb      	adds	r3, r5, #7
   33f46:	f023 0303 	bic.w	r3, r3, #3
   33f4a:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   33f4c:	6025      	str	r5, [r4, #0]
}
   33f4e:	bd70      	pop	{r4, r5, r6, pc}
   33f50:	2601      	movs	r6, #1
   33f52:	e7f2      	b.n	33f3a <mem_release+0x16>

00033f54 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   33f54:	fb02 0001 	mla	r0, r2, r1, r0
   33f58:	4770      	bx	lr
   33f5a:	bf00      	nop

00033f5c <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   33f5c:	1a40      	subs	r0, r0, r1
   33f5e:	b280      	uxth	r0, r0
}
   33f60:	fbb0 f0f2 	udiv	r0, r0, r2
   33f64:	4770      	bx	lr
   33f66:	bf00      	nop

00033f68 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   33f68:	1e53      	subs	r3, r2, #1
	src += len;
   33f6a:	4411      	add	r1, r2
	while (len--) {
   33f6c:	b29b      	uxth	r3, r3
   33f6e:	b142      	cbz	r2, 33f82 <mem_rcopy+0x1a>
   33f70:	43db      	mvns	r3, r3
   33f72:	3801      	subs	r0, #1
   33f74:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   33f76:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   33f7a:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   33f7e:	4291      	cmp	r1, r2
   33f80:	d1f9      	bne.n	33f76 <mem_rcopy+0xe>
	}
}
   33f82:	4770      	bx	lr

00033f84 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   33f84:	4401      	add	r1, r0
   33f86:	e002      	b.n	33f8e <mem_nz+0xa>
		if (*src++) {
   33f88:	f810 3b01 	ldrb.w	r3, [r0], #1
   33f8c:	b91b      	cbnz	r3, 33f96 <mem_nz+0x12>
	while (len--) {
   33f8e:	4288      	cmp	r0, r1
   33f90:	d1fa      	bne.n	33f88 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   33f92:	2000      	movs	r0, #0
   33f94:	4770      	bx	lr
			return 1;
   33f96:	2001      	movs	r0, #1
}
   33f98:	4770      	bx	lr
   33f9a:	bf00      	nop

00033f9c <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   33f9c:	6010      	str	r0, [r2, #0]
   33f9e:	6008      	str	r0, [r1, #0]

	return link;
}
   33fa0:	4770      	bx	lr
   33fa2:	bf00      	nop

00033fa4 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   33fa4:	680a      	ldr	r2, [r1, #0]
{
   33fa6:	4603      	mov	r3, r0
	if (*head != *tail) {
   33fa8:	6800      	ldr	r0, [r0, #0]
   33faa:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   33fac:	bf05      	ittet	eq
   33fae:	2200      	moveq	r2, #0
   33fb0:	600a      	streq	r2, [r1, #0]
		return NULL;
   33fb2:	2000      	movne	r0, #0
	*head = *tail = NULL;
   33fb4:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   33fb6:	4770      	bx	lr

00033fb8 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   33fb8:	f8d2 c000 	ldr.w	ip, [r2]
   33fbc:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   33fc0:	f8d2 c000 	ldr.w	ip, [r2]
   33fc4:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   33fc8:	6010      	str	r0, [r2, #0]

	return link;
}
   33fca:	4770      	bx	lr

00033fcc <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   33fcc:	4288      	cmp	r0, r1
   33fce:	d003      	beq.n	33fd8 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   33fd0:	b11a      	cbz	r2, 33fda <memq_peek+0xe>
		*mem = head->mem;
   33fd2:	6843      	ldr	r3, [r0, #4]
   33fd4:	6013      	str	r3, [r2, #0]
   33fd6:	4770      	bx	lr
		return NULL;
   33fd8:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   33fda:	4770      	bx	lr

00033fdc <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   33fdc:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   33fde:	4283      	cmp	r3, r0
   33fe0:	d009      	beq.n	33ff6 <memq_dequeue+0x1a>
	if (mem) {
   33fe2:	b12a      	cbz	r2, 33ff0 <memq_dequeue+0x14>
		*mem = head->mem;
   33fe4:	6858      	ldr	r0, [r3, #4]
   33fe6:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   33fe8:	681a      	ldr	r2, [r3, #0]
   33fea:	600a      	str	r2, [r1, #0]

	return old_head;
}
   33fec:	4618      	mov	r0, r3
   33fee:	4770      	bx	lr
	if (old_head == NULL) {
   33ff0:	2b00      	cmp	r3, #0
   33ff2:	d1f9      	bne.n	33fe8 <memq_dequeue+0xc>
   33ff4:	e7fa      	b.n	33fec <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   33ff6:	2300      	movs	r3, #0
   33ff8:	e7f8      	b.n	33fec <memq_dequeue+0x10>
   33ffa:	bf00      	nop

00033ffc <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   33ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34000:	f8df 8030 	ldr.w	r8, [pc, #48]	; 34034 <mayfly_init+0x38>
   34004:	4e0c      	ldr	r6, [pc, #48]	; (34038 <mayfly_init+0x3c>)
   34006:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   34008:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   3400c:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   3400e:	1d22      	adds	r2, r4, #4
   34010:	4621      	mov	r1, r4
   34012:	4628      	mov	r0, r5
		while (caller_id--) {
   34014:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   34016:	f7ff ffc1 	bl	33f9c <memq_init>
		while (caller_id--) {
   3401a:	42a6      	cmp	r6, r4
   3401c:	f1a5 0508 	sub.w	r5, r5, #8
   34020:	d1f5      	bne.n	3400e <mayfly_init+0x12>
	while (callee_id--) {
   34022:	3f04      	subs	r7, #4
   34024:	1d3b      	adds	r3, r7, #4
   34026:	f1a8 0820 	sub.w	r8, r8, #32
   3402a:	f1a6 0630 	sub.w	r6, r6, #48	; 0x30
   3402e:	d1eb      	bne.n	34008 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   34030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34034:	20004a4c 	.word	0x20004a4c
   34038:	20004ad8 	.word	0x20004ad8

0003403c <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   3403c:	b410      	push	{r4}
   3403e:	4603      	mov	r3, r0
   34040:	468c      	mov	ip, r1
	if (enable) {
   34042:	b19a      	cbz	r2, 3406c <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   34044:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   34048:	4814      	ldr	r0, [pc, #80]	; (3409c <mayfly_enable+0x60>)
   3404a:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   3404e:	0109      	lsls	r1, r1, #4
   34050:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   34054:	4401      	add	r1, r0
   34056:	7a48      	ldrb	r0, [r1, #9]
   34058:	7a0c      	ldrb	r4, [r1, #8]
   3405a:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   3405c:	bf04      	itt	eq
   3405e:	3001      	addeq	r0, #1
   34060:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   34062:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   34064:	4661      	mov	r1, ip
   34066:	4618      	mov	r0, r3
   34068:	f00f ba3a 	b.w	434e0 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   3406c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   34070:	4c0a      	ldr	r4, [pc, #40]	; (3409c <mayfly_enable+0x60>)
   34072:	0112      	lsls	r2, r2, #4
   34074:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   34078:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   3407c:	4423      	add	r3, r4
   3407e:	7a9c      	ldrb	r4, [r3, #10]
   34080:	7ada      	ldrb	r2, [r3, #11]
   34082:	42a2      	cmp	r2, r4
   34084:	d001      	beq.n	3408a <mayfly_enable+0x4e>
}
   34086:	bc10      	pop	{r4}
   34088:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   3408a:	3201      	adds	r2, #1
   3408c:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   3408e:	4b04      	ldr	r3, [pc, #16]	; (340a0 <mayfly_enable+0x64>)
   34090:	2201      	movs	r2, #1
   34092:	545a      	strb	r2, [r3, r1]
}
   34094:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   34096:	f00f ba79 	b.w	4358c <mayfly_pend>
   3409a:	bf00      	nop
   3409c:	20004a54 	.word	0x20004a54
   340a0:	200049d0 	.word	0x200049d0

000340a4 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   340a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   340a6:	4606      	mov	r6, r0
   340a8:	461c      	mov	r4, r3
   340aa:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   340ac:	b302      	cbz	r2, 340f0 <mayfly_enqueue+0x4c>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   340ae:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   340b0:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   340b2:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   340b4:	f012 0203 	ands.w	r2, r2, #3
   340b8:	d13a      	bne.n	34130 <mayfly_enqueue+0x8c>
   340ba:	4f27      	ldr	r7, [pc, #156]	; (34158 <mayfly_enqueue+0xb4>)
   340bc:	0071      	lsls	r1, r6, #1
   340be:	ea4f 0c45 	mov.w	ip, r5, lsl #1
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   340c2:	4431      	add	r1, r6
   340c4:	44ac      	add	ip, r5
   340c6:	0089      	lsls	r1, r1, #2
   340c8:	eb01 110c 	add.w	r1, r1, ip, lsl #4
	m->_req = ack + 1;
   340cc:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   340ce:	3104      	adds	r1, #4
	m->_req = ack + 1;
   340d0:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   340d2:	187a      	adds	r2, r7, r1
   340d4:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
   340d6:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   340d8:	4621      	mov	r1, r4
   340da:	f7ff ff6d 	bl	33fb8 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   340de:	4b1f      	ldr	r3, [pc, #124]	; (3415c <mayfly_enqueue+0xb8>)
   340e0:	2201      	movs	r2, #1
   340e2:	555a      	strb	r2, [r3, r5]

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   340e4:	4629      	mov	r1, r5
   340e6:	4630      	mov	r0, r6
   340e8:	f00f fa50 	bl	4358c <mayfly_pend>
		return 0;
   340ec:	2000      	movs	r0, #0

	return 0;
}
   340ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   340f0:	f00f fa36 	bl	43560 <mayfly_prio_is_equal>
   340f4:	2800      	cmp	r0, #0
   340f6:	d0da      	beq.n	340ae <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   340f8:	4629      	mov	r1, r5
   340fa:	4630      	mov	r0, r6
   340fc:	f00f fa10 	bl	43520 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   34100:	2800      	cmp	r0, #0
   34102:	d0d4      	beq.n	340ae <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   34104:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   34108:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   3410c:	4f12      	ldr	r7, [pc, #72]	; (34158 <mayfly_enqueue+0xb4>)
	ack = m->_ack;
   3410e:	7863      	ldrb	r3, [r4, #1]
		(mft[callee_id][caller_id].disable_req !=
   34110:	0112      	lsls	r2, r2, #4
   34112:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   34116:	443a      	add	r2, r7
   34118:	0071      	lsls	r1, r6, #1
		!mayfly_is_enabled(caller_id, callee_id) ||
   3411a:	7a90      	ldrb	r0, [r2, #10]
   3411c:	7ad2      	ldrb	r2, [r2, #11]
   3411e:	4290      	cmp	r0, r2
		(mft[callee_id][caller_id].disable_req !=
   34120:	ea4f 0c45 	mov.w	ip, r5, lsl #1
		!mayfly_is_enabled(caller_id, callee_id) ||
   34124:	d00c      	beq.n	34140 <mayfly_enqueue+0x9c>
	state = (m->_req - ack) & 0x03;
   34126:	7820      	ldrb	r0, [r4, #0]
   34128:	1ac0      	subs	r0, r0, r3
	if (state != 0U) {
   3412a:	f010 0203 	ands.w	r2, r0, #3
   3412e:	d0c8      	beq.n	340c2 <mayfly_enqueue+0x1e>
			if (state != 1U) {
   34130:	2a01      	cmp	r2, #1
   34132:	d003      	beq.n	3413c <mayfly_enqueue+0x98>
				m->_req = ack + 1;
   34134:	3301      	adds	r3, #1
   34136:	b2db      	uxtb	r3, r3
   34138:	7023      	strb	r3, [r4, #0]
				goto mayfly_enqueue_pend;
   3413a:	e7d0      	b.n	340de <mayfly_enqueue+0x3a>
			return 1;
   3413c:	4610      	mov	r0, r2
}
   3413e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	state = (m->_req - ack) & 0x03;
   34140:	7822      	ldrb	r2, [r4, #0]
   34142:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   34144:	0792      	lsls	r2, r2, #30
   34146:	d002      	beq.n	3414e <mayfly_enqueue+0xaa>
		m->_req = ack + 2;
   34148:	3302      	adds	r3, #2
   3414a:	b2db      	uxtb	r3, r3
   3414c:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   3414e:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   34152:	4798      	blx	r3
		return 0;
   34154:	e7ca      	b.n	340ec <mayfly_enqueue+0x48>
   34156:	bf00      	nop
   34158:	20004a54 	.word	0x20004a54
   3415c:	200049d0 	.word	0x200049d0

00034160 <mayfly_run>:
		}
	}
}

void mayfly_run(uint8_t callee_id)
{
   34160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   34164:	f8df 8140 	ldr.w	r8, [pc, #320]	; 342a8 <mayfly_run+0x148>
   34168:	f818 3000 	ldrb.w	r3, [r8, r0]
{
   3416c:	b089      	sub	sp, #36	; 0x24
	if (!mfp[callee_id]) {
   3416e:	2b00      	cmp	r3, #0
   34170:	d060      	beq.n	34234 <mayfly_run+0xd4>
		return;
	}
	mfp[callee_id] = 0U;
   34172:	f04f 0b00 	mov.w	fp, #0
   34176:	f8df 9134 	ldr.w	r9, [pc, #308]	; 342ac <mayfly_run+0x14c>
   3417a:	f808 b000 	strb.w	fp, [r8, r0]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   3417e:	223c      	movs	r2, #60	; 0x3c
   34180:	2304      	movs	r3, #4
   34182:	e9cd bb04 	strd	fp, fp, [sp, #16]
   34186:	eb00 0a40 	add.w	sl, r0, r0, lsl #1
   3418a:	fb12 3300 	smlabb	r3, r2, r0, r3

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
   3418e:	2403      	movs	r4, #3
   34190:	eb09 1a0a 	add.w	sl, r9, sl, lsl #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   34194:	9302      	str	r3, [sp, #8]
   34196:	4625      	mov	r5, r4
   34198:	9003      	str	r0, [sp, #12]
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   3419a:	4654      	mov	r4, sl
		struct mayfly *m = 0;
   3419c:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
   3419e:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
   341a2:	f854 0f24 	ldr.w	r0, [r4, #36]!
		struct mayfly *m = 0;
   341a6:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
   341a8:	aa07      	add	r2, sp, #28
   341aa:	f7ff ff0f 	bl	33fcc <memq_peek>
   341ae:	9501      	str	r5, [sp, #4]
   341b0:	4607      	mov	r7, r0
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   341b2:	2f00      	cmp	r7, #0
   341b4:	d04a      	beq.n	3424c <mayfly_run+0xec>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   341b6:	9d07      	ldr	r5, [sp, #28]
   341b8:	7868      	ldrb	r0, [r5, #1]
   341ba:	782e      	ldrb	r6, [r5, #0]
   341bc:	1a36      	subs	r6, r6, r0
   341be:	f006 0603 	and.w	r6, r6, #3
			if (state == 1U) {
   341c2:	2e01      	cmp	r6, #1
   341c4:	d106      	bne.n	341d4 <mayfly_run+0x74>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   341c6:	1e42      	subs	r2, r0, #1
   341c8:	706a      	strb	r2, [r5, #1]

				/* call the mayfly function */
				m->fp(m->param);
   341ca:	e9d5 0302 	ldrd	r0, r3, [r5, #8]
   341ce:	4798      	blx	r3
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   341d0:	9d07      	ldr	r5, [sp, #28]
	if (((req - m->_ack) & 0x03) != 1U) {
   341d2:	7868      	ldrb	r0, [r5, #1]
	req = m->_req;
   341d4:	782b      	ldrb	r3, [r5, #0]
		memq_dequeue(mft[callee_id][caller_id].tail,
   341d6:	f8da c028 	ldr.w	ip, [sl, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
   341da:	1a18      	subs	r0, r3, r0
   341dc:	f000 0003 	and.w	r0, r0, #3
   341e0:	2801      	cmp	r0, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   341e2:	f04f 0200 	mov.w	r2, #0
   341e6:	4621      	mov	r1, r4
	req = m->_req;
   341e8:	fa5f fb83 	uxtb.w	fp, r3
		memq_dequeue(mft[callee_id][caller_id].tail,
   341ec:	4660      	mov	r0, ip
	if (((req - m->_ack) & 0x03) != 1U) {
   341ee:	d00d      	beq.n	3420c <mayfly_run+0xac>
		memq_dequeue(mft[callee_id][caller_id].tail,
   341f0:	f7ff fef4 	bl	33fdc <memq_dequeue>
		ack = m->_ack;
   341f4:	7869      	ldrb	r1, [r5, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   341f6:	782a      	ldrb	r2, [r5, #0]
		m->_link = link;
   341f8:	606f      	str	r7, [r5, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   341fa:	1a52      	subs	r2, r2, r1
   341fc:	f002 0203 	and.w	r2, r2, #3
   34200:	2a01      	cmp	r2, #1
		m->_ack = req;
   34202:	f885 b001 	strb.w	fp, [r5, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   34206:	d018      	beq.n	3423a <mayfly_run+0xda>
   34208:	f8da c028 	ldr.w	ip, [sl, #40]	; 0x28

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   3420c:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
   34210:	aa07      	add	r2, sp, #28
   34212:	4661      	mov	r1, ip
   34214:	f7ff feda 	bl	33fcc <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   34218:	2e01      	cmp	r6, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   3421a:	4607      	mov	r7, r0
			if (state == 1U) {
   3421c:	d1c9      	bne.n	341b2 <mayfly_run+0x52>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
   3421e:	9d01      	ldr	r5, [sp, #4]
   34220:	2d00      	cmp	r5, #0
   34222:	d03e      	beq.n	342a2 <mayfly_run+0x142>
					/* set mayfly callee pending */
					mfp[callee_id] = 1U;
   34224:	9f03      	ldr	r7, [sp, #12]
   34226:	2301      	movs	r3, #1
   34228:	f808 3007 	strb.w	r3, [r8, r7]

					/* pend the callee for execution */
					mayfly_pend(callee_id, callee_id);
   3422c:	4639      	mov	r1, r7
   3422e:	4638      	mov	r0, r7
   34230:	f00f f9ac 	bl	4358c <mayfly_pend>
	}

	if (disable && !enable) {
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
   34234:	b009      	add	sp, #36	; 0x24
   34236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   3423a:	9b02      	ldr	r3, [sp, #8]
			m->_ack = ack;
   3423c:	7069      	strb	r1, [r5, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   3423e:	4638      	mov	r0, r7
   34240:	4629      	mov	r1, r5
   34242:	eb09 0203 	add.w	r2, r9, r3
   34246:	f7ff feb7 	bl	33fb8 <memq_enqueue>
   3424a:	e7dd      	b.n	34208 <mayfly_run+0xa8>
   3424c:	9d01      	ldr	r5, [sp, #4]
		if (mft[callee_id][caller_id].disable_req !=
   3424e:	f89a 302e 	ldrb.w	r3, [sl, #46]	; 0x2e
   34252:	f89a 202f 	ldrb.w	r2, [sl, #47]	; 0x2f
   34256:	429a      	cmp	r2, r3
   34258:	d003      	beq.n	34262 <mayfly_run+0x102>
			mft[callee_id][caller_id].disable_ack =
   3425a:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
			disable = 1U;
   3425e:	2301      	movs	r3, #1
   34260:	9304      	str	r3, [sp, #16]
		if (mft[callee_id][caller_id].enable_req !=
   34262:	f89a 302c 	ldrb.w	r3, [sl, #44]	; 0x2c
   34266:	f89a 202d 	ldrb.w	r2, [sl, #45]	; 0x2d
   3426a:	429a      	cmp	r2, r3
   3426c:	d003      	beq.n	34276 <mayfly_run+0x116>
			mft[callee_id][caller_id].enable_ack =
   3426e:	f88a 302d 	strb.w	r3, [sl, #45]	; 0x2d
			enable = 1U;
   34272:	2301      	movs	r3, #1
   34274:	9305      	str	r3, [sp, #20]
	while (caller_id--) {
   34276:	3d01      	subs	r5, #1
   34278:	b2ed      	uxtb	r5, r5
   3427a:	2dff      	cmp	r5, #255	; 0xff
   3427c:	f1aa 0a0c 	sub.w	sl, sl, #12
   34280:	d18b      	bne.n	3419a <mayfly_run+0x3a>
	if (disable && !enable) {
   34282:	e9dd 5b04 	ldrd	r5, fp, [sp, #16]
   34286:	9f03      	ldr	r7, [sp, #12]
   34288:	2d00      	cmp	r5, #0
   3428a:	d0d3      	beq.n	34234 <mayfly_run+0xd4>
   3428c:	f1bb 0f00 	cmp.w	fp, #0
   34290:	d1d0      	bne.n	34234 <mayfly_run+0xd4>
		mayfly_enable_cb(callee_id, callee_id, 0);
   34292:	465a      	mov	r2, fp
   34294:	4639      	mov	r1, r7
   34296:	4638      	mov	r0, r7
}
   34298:	b009      	add	sp, #36	; 0x24
   3429a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   3429e:	f00f b91f 	b.w	434e0 <mayfly_enable_cb>
				if (caller_id || link) {
   342a2:	2800      	cmp	r0, #0
   342a4:	d0d3      	beq.n	3424e <mayfly_run+0xee>
   342a6:	e7bd      	b.n	34224 <mayfly_run+0xc4>
   342a8:	200049d0 	.word	0x200049d0
   342ac:	20004a54 	.word	0x20004a54

000342b0 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   342b0:	1e4b      	subs	r3, r1, #1
   342b2:	b2db      	uxtb	r3, r3
   342b4:	b171      	cbz	r1, 342d4 <util_ones_count_get+0x24>
   342b6:	1e41      	subs	r1, r0, #1
   342b8:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   342bc:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   342be:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   342c2:	b123      	cbz	r3, 342ce <util_ones_count_get+0x1e>
			bite &= (bite - 1);
   342c4:	1e5a      	subs	r2, r3, #1
			one_count++;
   342c6:	3001      	adds	r0, #1
		while (bite) {
   342c8:	4013      	ands	r3, r2
			one_count++;
   342ca:	b2c0      	uxtb	r0, r0
		while (bite) {
   342cc:	d1fa      	bne.n	342c4 <util_ones_count_get+0x14>
	while (octets_len--) {
   342ce:	4561      	cmp	r1, ip
   342d0:	d1f5      	bne.n	342be <util_ones_count_get+0xe>
   342d2:	4770      	bx	lr
	uint8_t one_count = 0U;
   342d4:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   342d6:	4770      	bx	lr

000342d8 <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
   342d8:	b5f0      	push	{r4, r5, r6, r7, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   342da:	4d51      	ldr	r5, [pc, #324]	; (34420 <util_aa_le32+0x148>)
{
   342dc:	b083      	sub	sp, #12
   342de:	4607      	mov	r7, r0
   342e0:	2603      	movs	r6, #3
	consecutive_cnt = 1U;
   342e2:	2401      	movs	r4, #1
	lll_csrand_get(dst, sizeof(uint32_t));
   342e4:	2104      	movs	r1, #4
   342e6:	4638      	mov	r0, r7
   342e8:	f00c f8b6 	bl	40458 <lll_csrand_get>
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   342ec:	6838      	ldr	r0, [r7, #0]
	bit_idx = 31U;
   342ee:	231f      	movs	r3, #31
	consecutive_bit = (aa >> bit_idx) & 0x01;
   342f0:	fa20 f203 	lsr.w	r2, r0, r3
	while (bit_idx--) {
   342f4:	3b01      	subs	r3, #1
   342f6:	b2db      	uxtb	r3, r3
   342f8:	2bff      	cmp	r3, #255	; 0xff
	transitions = 0U;
   342fa:	f04f 0c00 	mov.w	ip, #0
	consecutive_cnt = 1U;
   342fe:	f04f 0e01 	mov.w	lr, #1
	while (bit_idx--) {
   34302:	d014      	beq.n	3432e <util_aa_le32+0x56>
		bit = (aa >> bit_idx) & 0x01;
   34304:	fa20 f103 	lsr.w	r1, r0, r3
   34308:	f001 0101 	and.w	r1, r1, #1
		if (bit == consecutive_bit) {
   3430c:	428a      	cmp	r2, r1
   3430e:	d032      	beq.n	34376 <util_aa_le32+0x9e>
			transitions++;
   34310:	f10c 0201 	add.w	r2, ip, #1
		    ((consecutive_cnt < 6) &&
   34314:	2b1c      	cmp	r3, #28
			transitions++;
   34316:	b2d2      	uxtb	r2, r2
		    ((consecutive_cnt < 6) &&
   34318:	d94e      	bls.n	343b8 <util_aa_le32+0xe0>
		if ((transitions > 24) ||
   3431a:	2a19      	cmp	r2, #25
   3431c:	d03b      	beq.n	34396 <util_aa_le32+0xbe>
   3431e:	4694      	mov	ip, r2
   34320:	f04f 0e01 	mov.w	lr, #1
	consecutive_cnt = 1U;
   34324:	460a      	mov	r2, r1
	while (bit_idx--) {
   34326:	3b01      	subs	r3, #1
   34328:	b2db      	uxtb	r3, r3
   3432a:	2bff      	cmp	r3, #255	; 0xff
   3432c:	d1ea      	bne.n	34304 <util_aa_le32+0x2c>
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   3432e:	ea80 0305 	eor.w	r3, r0, r5
   34332:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
   34334:	f10d 0c04 	add.w	ip, sp, #4
   34338:	f10d 0e08 	add.w	lr, sp, #8
	uint8_t one_count = 0U;
   3433c:	2200      	movs	r2, #0
		bite = *octets;
   3433e:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
   34342:	b123      	cbz	r3, 3434e <util_aa_le32+0x76>
			bite &= (bite - 1);
   34344:	1e59      	subs	r1, r3, #1
			one_count++;
   34346:	3201      	adds	r2, #1
		while (bite) {
   34348:	400b      	ands	r3, r1
			one_count++;
   3434a:	b2d2      	uxtb	r2, r2
		while (bite) {
   3434c:	d1fa      	bne.n	34344 <util_aa_le32+0x6c>
	while (octets_len--) {
   3434e:	45e6      	cmp	lr, ip
   34350:	d1f5      	bne.n	3433e <util_aa_le32+0x66>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
   34352:	2a01      	cmp	r2, #1
   34354:	d907      	bls.n	34366 <util_aa_le32+0x8e>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   34356:	b283      	uxth	r3, r0
   34358:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   3435c:	d128      	bne.n	343b0 <util_aa_le32+0xd8>
	    !((aa & 0xFF) ^ (aa >> 24))) {
   3435e:	b2c3      	uxtb	r3, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   34360:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   34364:	d124      	bne.n	343b0 <util_aa_le32+0xd8>
	if (!retry) {
   34366:	3e01      	subs	r6, #1
   34368:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   3436c:	d1ba      	bne.n	342e4 <util_aa_le32+0xc>
		return -EFAULT;
   3436e:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
   34372:	b003      	add	sp, #12
   34374:	bdf0      	pop	{r4, r5, r6, r7, pc}
			consecutive_cnt++;
   34376:	f10e 0201 	add.w	r2, lr, #1
   3437a:	b2d2      	uxtb	r2, r2
		if ((consecutive_cnt > 6) ||
   3437c:	2a06      	cmp	r2, #6
   3437e:	d92c      	bls.n	343da <util_aa_le32+0x102>
				aa &= ~BIT(bit_idx);
   34380:	fa04 f203 	lsl.w	r2, r4, r3
			if (consecutive_bit) {
   34384:	b171      	cbz	r1, 343a4 <util_aa_le32+0xcc>
				aa &= ~BIT(bit_idx);
   34386:	ea20 0002 	bic.w	r0, r0, r2
				consecutive_bit = 0U;
   3438a:	2100      	movs	r1, #0
				transitions++;
   3438c:	f10c 0201 	add.w	r2, ip, #1
   34390:	b2d2      	uxtb	r2, r2
		if ((transitions > 24) ||
   34392:	2a19      	cmp	r2, #25
   34394:	d1c3      	bne.n	3431e <util_aa_le32+0x46>
				aa &= ~(BIT(bit_idx + 1) - 1);
   34396:	3301      	adds	r3, #1
   34398:	fa04 f303 	lsl.w	r3, r4, r3
			if (consecutive_bit) {
   3439c:	b129      	cbz	r1, 343aa <util_aa_le32+0xd2>
				aa &= ~(BIT(bit_idx + 1) - 1);
   3439e:	425b      	negs	r3, r3
   343a0:	4018      	ands	r0, r3
   343a2:	e7c4      	b.n	3432e <util_aa_le32+0x56>
				aa |= BIT(bit_idx);
   343a4:	4310      	orrs	r0, r2
				consecutive_bit = 1U;
   343a6:	2101      	movs	r1, #1
   343a8:	e7f0      	b.n	3438c <util_aa_le32+0xb4>
				aa |= (BIT(bit_idx + 1) - 1);
   343aa:	3b01      	subs	r3, #1
   343ac:	4318      	orrs	r0, r3
   343ae:	e7be      	b.n	3432e <util_aa_le32+0x56>
	dst[0] = val;
   343b0:	6038      	str	r0, [r7, #0]
	return 0;
   343b2:	2000      	movs	r0, #0
}
   343b4:	b003      	add	sp, #12
   343b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		     (((bit_idx < 29) && (transitions < 1)) ||
   343b8:	d0af      	beq.n	3431a <util_aa_le32+0x42>
		      ((bit_idx < 28) && (transitions < 2))))) {
   343ba:	2a01      	cmp	r2, #1
   343bc:	d1ad      	bne.n	3431a <util_aa_le32+0x42>
				aa &= ~BIT(bit_idx);
   343be:	fa04 f203 	lsl.w	r2, r4, r3
			if (consecutive_bit) {
   343c2:	b139      	cbz	r1, 343d4 <util_aa_le32+0xfc>
				aa &= ~BIT(bit_idx);
   343c4:	ea20 0002 	bic.w	r0, r0, r2
				consecutive_bit = 0U;
   343c8:	2100      	movs	r1, #0
			if (transitions != transitions_prev) {
   343ca:	f1bc 0f01 	cmp.w	ip, #1
   343ce:	d0dd      	beq.n	3438c <util_aa_le32+0xb4>
	consecutive_cnt = 1U;
   343d0:	460a      	mov	r2, r1
   343d2:	e7a8      	b.n	34326 <util_aa_le32+0x4e>
				aa |= BIT(bit_idx);
   343d4:	4310      	orrs	r0, r2
				consecutive_bit = 1U;
   343d6:	2101      	movs	r1, #1
   343d8:	e7f7      	b.n	343ca <util_aa_le32+0xf2>
		if ((consecutive_cnt > 6) ||
   343da:	d001      	beq.n	343e0 <util_aa_le32+0x108>
		    ((consecutive_cnt < 6) &&
   343dc:	2b1c      	cmp	r3, #28
   343de:	d902      	bls.n	343e6 <util_aa_le32+0x10e>
		      ((bit_idx < 28) && (transitions < 2))))) {
   343e0:	4696      	mov	lr, r2
	consecutive_cnt = 1U;
   343e2:	460a      	mov	r2, r1
   343e4:	e79f      	b.n	34326 <util_aa_le32+0x4e>
		     (((bit_idx < 29) && (transitions < 1)) ||
   343e6:	f1bc 0f00 	cmp.w	ip, #0
   343ea:	d10a      	bne.n	34402 <util_aa_le32+0x12a>
				aa &= ~BIT(bit_idx);
   343ec:	2201      	movs	r2, #1
   343ee:	fa02 fe03 	lsl.w	lr, r2, r3
			if (consecutive_bit) {
   343f2:	b169      	cbz	r1, 34410 <util_aa_le32+0x138>
				aa &= ~BIT(bit_idx);
   343f4:	ea20 000e 	bic.w	r0, r0, lr
				consecutive_cnt = 1U;
   343f8:	468e      	mov	lr, r1
				consecutive_bit = 0U;
   343fa:	4661      	mov	r1, ip
	consecutive_cnt = 1U;
   343fc:	460a      	mov	r2, r1
				transitions++;
   343fe:	46f4      	mov	ip, lr
   34400:	e791      	b.n	34326 <util_aa_le32+0x4e>
		     (((bit_idx < 29) && (transitions < 1)) ||
   34402:	2b1c      	cmp	r3, #28
   34404:	d0ec      	beq.n	343e0 <util_aa_le32+0x108>
		      ((bit_idx < 28) && (transitions < 2))))) {
   34406:	f1bc 0f01 	cmp.w	ip, #1
   3440a:	d0d8      	beq.n	343be <util_aa_le32+0xe6>
   3440c:	4696      	mov	lr, r2
   3440e:	e7e8      	b.n	343e2 <util_aa_le32+0x10a>
				consecutive_bit = 1U;
   34410:	4611      	mov	r1, r2
				aa |= BIT(bit_idx);
   34412:	ea40 000e 	orr.w	r0, r0, lr
				transitions++;
   34416:	4694      	mov	ip, r2
				consecutive_cnt = 1U;
   34418:	4696      	mov	lr, r2
	consecutive_cnt = 1U;
   3441a:	460a      	mov	r2, r1
   3441c:	e783      	b.n	34326 <util_aa_le32+0x4e>
   3441e:	bf00      	nop
   34420:	8e89bed6 	.word	0x8e89bed6

00034424 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
   34424:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
   34426:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
   34428:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
   3442a:	2bff      	cmp	r3, #255	; 0xff
   3442c:	d016      	beq.n	3445c <ticker_dequeue+0x38>
		ticker_current = &node[current];
   3442e:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
   34432:	428b      	cmp	r3, r1
		ticker_current = &node[current];
   34434:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
   34438:	d029      	beq.n	3448e <ticker_dequeue+0x6a>
	total = 0U;
   3443a:	f04f 0c00 	mov.w	ip, #0
   3443e:	e001      	b.n	34444 <ticker_dequeue+0x20>
		if (current == id) {
   34440:	4299      	cmp	r1, r3
   34442:	d00d      	beq.n	34460 <ticker_dequeue+0x3c>
			break;
		}

		total += ticker_current->ticks_to_expire;
   34444:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
   34446:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
   34448:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
   3444a:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   3444c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   34450:	44a4      	add	ip, r4
		ticker_current = &node[current];
   34452:	ea4f 1402 	mov.w	r4, r2, lsl #4
   34456:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
   3445a:	d1f1      	bne.n	34440 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
   3445c:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
   3445e:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
   34460:	4571      	cmp	r1, lr
   34462:	d017      	beq.n	34494 <ticker_dequeue+0x70>
		instance->ticker_id_head = ticker_current->next;
   34464:	5d2b      	ldrb	r3, [r5, r4]
	timeout = ticker_current->ticks_to_expire;
   34466:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
   34468:	fa0f fe8e 	sxth.w	lr, lr
   3446c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   34470:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
	if (ticker_current->next != TICKER_NULL) {
   34474:	2bff      	cmp	r3, #255	; 0xff
	node[previous].next = ticker_current->next;
   34476:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
   3447a:	d006      	beq.n	3448a <ticker_dequeue+0x66>
		node[ticker_current->next].ticks_to_expire += timeout;
   3447c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   34480:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   34484:	689a      	ldr	r2, [r3, #8]
   34486:	4402      	add	r2, r0
   34488:	609a      	str	r2, [r3, #8]
	return (total + timeout);
   3448a:	4460      	add	r0, ip
}
   3448c:	bd30      	pop	{r4, r5, pc}
	previous = instance->ticker_id_head;
   3448e:	469e      	mov	lr, r3
	total = 0U;
   34490:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
   34494:	7813      	ldrb	r3, [r2, #0]
   34496:	7743      	strb	r3, [r0, #29]
   34498:	e7e5      	b.n	34466 <ticker_dequeue+0x42>
   3449a:	bf00      	nop

0003449c <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   3449c:	eba2 0c01 	sub.w	ip, r2, r1
   344a0:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   344a4:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   344a6:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   344a8:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   344aa:	d10a      	bne.n	344c2 <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   344ac:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   344b0:	4463      	add	r3, ip
	if (ticks_to_expire > ticks_to_expire_minus) {
   344b2:	42a3      	cmp	r3, r4
   344b4:	d80d      	bhi.n	344d2 <ticks_to_expire_prep+0x36>
		ticks_to_expire_minus -= ticks_to_expire;
   344b6:	1ae4      	subs	r4, r4, r3
		ticks_to_expire = 0U;
   344b8:	2300      	movs	r3, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   344ba:	6144      	str	r4, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
   344bc:	6083      	str	r3, [r0, #8]
}
   344be:	bc10      	pop	{r4}
   344c0:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   344c2:	1a89      	subs	r1, r1, r2
   344c4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   344c8:	428b      	cmp	r3, r1
   344ca:	d908      	bls.n	344de <ticks_to_expire_prep+0x42>
			ticks_to_expire -= delta_current_start;
   344cc:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   344ce:	42a3      	cmp	r3, r4
   344d0:	d9f1      	bls.n	344b6 <ticks_to_expire_prep+0x1a>
		ticks_to_expire -= ticks_to_expire_minus;
   344d2:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   344d4:	2400      	movs	r4, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   344d6:	6144      	str	r4, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
   344d8:	6083      	str	r3, [r0, #8]
}
   344da:	bc10      	pop	{r4}
   344dc:	4770      	bx	lr
			ticks_to_expire_minus +=
   344de:	440c      	add	r4, r1
   344e0:	1ae4      	subs	r4, r4, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   344e2:	e7e9      	b.n	344b8 <ticks_to_expire_prep+0x1c>

000344e4 <ticker_job_list_insert>:
{
   344e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   344e8:	b087      	sub	sp, #28
   344ea:	4603      	mov	r3, r0
	count_user = instance->count_user;
   344ec:	7a42      	ldrb	r2, [r0, #9]
{
   344ee:	9000      	str	r0, [sp, #0]
	node = &instance->nodes[0];
   344f0:	6800      	ldr	r0, [r0, #0]
	users = &instance->users[0];
   344f2:	685d      	ldr	r5, [r3, #4]
	node = &instance->nodes[0];
   344f4:	9001      	str	r0, [sp, #4]
	while (count_user--) {
   344f6:	2a00      	cmp	r2, #0
   344f8:	f000 80ea 	beq.w	346d0 <ticker_job_list_insert+0x1ec>
   344fc:	1e53      	subs	r3, r2, #1
   344fe:	b2db      	uxtb	r3, r3
   34500:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   34504:	4688      	mov	r8, r1
   34506:	9302      	str	r3, [sp, #8]
   34508:	9505      	str	r5, [sp, #20]
		user_ops = (void *)&user->user_op[0];
   3450a:	9b02      	ldr	r3, [sp, #8]
   3450c:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   3450e:	785b      	ldrb	r3, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   34510:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   34512:	9303      	str	r3, [sp, #12]
   34514:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   34518:	d063      	beq.n	345e2 <ticker_job_list_insert+0xfe>
				ticker = &node[id_insert];
   3451a:	9b01      	ldr	r3, [sp, #4]
   3451c:	eb08 0548 	add.w	r5, r8, r8, lsl #1
   34520:	012c      	lsls	r4, r5, #4
   34522:	eb03 1505 	add.w	r5, r3, r5, lsl #4
				user_op = NULL;
   34526:	46c1      	mov	r9, r8
	ticker->req = ticker->ack + 1;
   34528:	f895 b002 	ldrb.w	fp, [r5, #2]
				insert_head = ticker->next;
   3452c:	f813 8004 	ldrb.w	r8, [r3, r4]
				user_op = NULL;
   34530:	2600      	movs	r6, #0
	node = &instance->nodes[0];
   34532:	9b00      	ldr	r3, [sp, #0]
	ticker->next = TICKER_NULL;
   34534:	f04f 0eff 	mov.w	lr, #255	; 0xff
   34538:	f885 e000 	strb.w	lr, [r5]
	node = &instance->nodes[0];
   3453c:	f8d3 c000 	ldr.w	ip, [r3]
	current = instance->ticker_id_head;
   34540:	7f59      	ldrb	r1, [r3, #29]
	ticker_new = &node[id];
   34542:	eb0c 0a04 	add.w	sl, ip, r4
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   34546:	4571      	cmp	r1, lr
	ticks_to_expire = ticker_new->ticks_to_expire;
   34548:	f8da 0008 	ldr.w	r0, [sl, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   3454c:	d10d      	bne.n	3456a <ticker_job_list_insert+0x86>
   3454e:	e0b5      	b.n	346bc <ticker_job_list_insert+0x1d8>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   34550:	1b00      	subs	r0, r0, r4
   34552:	d104      	bne.n	3455e <ticker_job_list_insert+0x7a>
   34554:	f8ba 701e 	ldrh.w	r7, [sl, #30]
   34558:	8bd2      	ldrh	r2, [r2, #30]
   3455a:	4297      	cmp	r7, r2
   3455c:	d876      	bhi.n	3464c <ticker_job_list_insert+0x168>
		current = ticker_current->next;
   3455e:	f81c 3003 	ldrb.w	r3, [ip, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   34562:	2bff      	cmp	r3, #255	; 0xff
   34564:	468e      	mov	lr, r1
		current = ticker_current->next;
   34566:	4619      	mov	r1, r3
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   34568:	d007      	beq.n	3457a <ticker_job_list_insert+0x96>
		(ticker_current = &node[current])->ticks_to_expire))) {
   3456a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   3456e:	eb0c 1203 	add.w	r2, ip, r3, lsl #4
   34572:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   34574:	6894      	ldr	r4, [r2, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   34576:	4284      	cmp	r4, r0
   34578:	d9ea      	bls.n	34550 <ticker_job_list_insert+0x6c>
	if (previous == TICKER_NULL) {
   3457a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   3457e:	f8ca 0008 	str.w	r0, [sl, #8]
	ticker_new->next = current;
   34582:	f88a 1000 	strb.w	r1, [sl]
	if (previous == TICKER_NULL) {
   34586:	d05d      	beq.n	34644 <ticker_job_list_insert+0x160>
		node[previous].next = id;
   34588:	fa0f fe8e 	sxth.w	lr, lr
   3458c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   34590:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   34594:	f80c 900e 	strb.w	r9, [ip, lr]
	if (current != TICKER_NULL) {
   34598:	29ff      	cmp	r1, #255	; 0xff
   3459a:	d008      	beq.n	345ae <ticker_job_list_insert+0xca>
		node[current].ticks_to_expire -= ticks_to_expire;
   3459c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   345a0:	eb0c 1c01 	add.w	ip, ip, r1, lsl #4
   345a4:	f8dc 3008 	ldr.w	r3, [ip, #8]
   345a8:	1a1b      	subs	r3, r3, r0
   345aa:	f8cc 3008 	str.w	r3, [ip, #8]
	ticker->req = ticker->ack + 1;
   345ae:	f10b 0b01 	add.w	fp, fp, #1
   345b2:	f885 b001 	strb.w	fp, [r5, #1]
			if (user_op) {
   345b6:	2e00      	cmp	r6, #0
   345b8:	d0ac      	beq.n	34514 <ticker_job_list_insert+0x30>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   345ba:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   345be:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   345c0:	7032      	strb	r2, [r6, #0]
	user_op->status = status;
   345c2:	2200      	movs	r2, #0
   345c4:	62b2      	str	r2, [r6, #40]	; 0x28
	if (user_op->fp_op_func) {
   345c6:	b113      	cbz	r3, 345ce <ticker_job_list_insert+0xea>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   345c8:	6b31      	ldr	r1, [r6, #48]	; 0x30
   345ca:	4610      	mov	r0, r2
   345cc:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   345ce:	686b      	ldr	r3, [r5, #4]
   345d0:	2b00      	cmp	r3, #0
   345d2:	d19f      	bne.n	34514 <ticker_job_list_insert+0x30>
					ticker->op_context =
   345d4:	e9d6 230b 	ldrd	r2, r3, [r6, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
   345d8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
					ticker->op_context =
   345dc:	e9c5 2308 	strd	r2, r3, [r5, #32]
		while ((insert_head != TICKER_NULL) ||
   345e0:	d19b      	bne.n	3451a <ticker_job_list_insert+0x36>
   345e2:	9b02      	ldr	r3, [sp, #8]
   345e4:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
   345e8:	789a      	ldrb	r2, [r3, #2]
				user_op = &user_ops[user_ops_first];
   345ea:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   345ee:	eb07 0383 	add.w	r3, r7, r3, lsl #2
				first = user_ops_first + 1;
   345f2:	1c79      	adds	r1, r7, #1
		while ((insert_head != TICKER_NULL) ||
   345f4:	42ba      	cmp	r2, r7
				user_op = &user_ops[user_ops_first];
   345f6:	eb0a 0683 	add.w	r6, sl, r3, lsl #2
				first = user_ops_first + 1;
   345fa:	b2cf      	uxtb	r7, r1
		while ((insert_head != TICKER_NULL) ||
   345fc:	d056      	beq.n	346ac <ticker_job_list_insert+0x1c8>
				if (first == user->count_user_op) {
   345fe:	9902      	ldr	r1, [sp, #8]
   34600:	7808      	ldrb	r0, [r1, #0]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   34602:	f81a 1023 	ldrb.w	r1, [sl, r3, lsl #2]
					first = 0U;
   34606:	42b8      	cmp	r0, r7
   34608:	bf08      	it	eq
   3460a:	2700      	moveq	r7, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   3460c:	2904      	cmp	r1, #4
   3460e:	d1ec      	bne.n	345ea <ticker_job_list_insert+0x106>
				id_insert = user_op->id;
   34610:	f896 9001 	ldrb.w	r9, [r6, #1]
				ticker = &node[id_insert];
   34614:	9901      	ldr	r1, [sp, #4]
   34616:	eb09 0249 	add.w	r2, r9, r9, lsl #1
   3461a:	eb01 1502 	add.w	r5, r1, r2, lsl #4
   3461e:	0114      	lsls	r4, r2, #4
				      ticker->ack) & 0xff) != 0U) {
   34620:	f895 b002 	ldrb.w	fp, [r5, #2]
				if (((ticker->req -
   34624:	786a      	ldrb	r2, [r5, #1]
   34626:	455a      	cmp	r2, fp
   34628:	d012      	beq.n	34650 <ticker_job_list_insert+0x16c>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   3462a:	f04f 0200 	mov.w	r2, #0
   3462e:	f80a 2023 	strb.w	r2, [sl, r3, lsl #2]
	if (user_op->fp_op_func) {
   34632:	6af3      	ldr	r3, [r6, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
   34634:	2001      	movs	r0, #1
	user_op->status = status;
   34636:	62b0      	str	r0, [r6, #40]	; 0x28
	if (user_op->fp_op_func) {
   34638:	b10b      	cbz	r3, 3463e <ticker_job_list_insert+0x15a>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   3463a:	6b31      	ldr	r1, [r6, #48]	; 0x30
   3463c:	4798      	blx	r3
   3463e:	9b02      	ldr	r3, [sp, #8]
   34640:	789a      	ldrb	r2, [r3, #2]
		while ((insert_head != TICKER_NULL) ||
   34642:	e7d2      	b.n	345ea <ticker_job_list_insert+0x106>
		instance->ticker_id_head = id;
   34644:	9b00      	ldr	r3, [sp, #0]
   34646:	f883 901d 	strb.w	r9, [r3, #29]
   3464a:	e7a5      	b.n	34598 <ticker_job_list_insert+0xb4>
   3464c:	4620      	mov	r0, r4
   3464e:	e794      	b.n	3457a <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   34650:	8ab3      	ldrh	r3, [r6, #20]
				ticker_job_op_start(ticker, user_op,
   34652:	9a00      	ldr	r2, [sp, #0]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   34654:	9703      	str	r7, [sp, #12]
   34656:	f64f 77fe 	movw	r7, #65534	; 0xfffe
   3465a:	42bb      	cmp	r3, r7
				ticker_job_op_start(ticker, user_op,
   3465c:	6951      	ldr	r1, [r2, #20]
	ticker->ext_data = start->ext_data;
   3465e:	f8d6 c024 	ldr.w	ip, [r6, #36]	; 0x24
	ticker->ticks_periodic = start->ticks_periodic;
   34662:	e9d6 0203 	ldrd	r0, r2, [r6, #12]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   34666:	d031      	beq.n	346cc <ticker_job_list_insert+0x1e8>
		ticker->must_expire =
   34668:	f64f 7eff 	movw	lr, #65535	; 0xffff
   3466c:	4573      	cmp	r3, lr
   3466e:	d02a      	beq.n	346c6 <ticker_job_list_insert+0x1e2>
   34670:	f04f 0700 	mov.w	r7, #0
   34674:	f885 702c 	strb.w	r7, [r5, #44]	; 0x2c
	ticker->lazy_periodic =
   34678:	83ab      	strh	r3, [r5, #28]
	ticker->ticks_slot = start->ticks_slot;
   3467a:	69b3      	ldr	r3, [r6, #24]
   3467c:	61ab      	str	r3, [r5, #24]
	ticker->timeout_func = start->fp_timeout_func;
   3467e:	69f3      	ldr	r3, [r6, #28]
   34680:	60eb      	str	r3, [r5, #12]
	ticker->context = start->context;
   34682:	6a33      	ldr	r3, [r6, #32]
   34684:	612b      	str	r3, [r5, #16]
	ticker->ticks_to_expire = start->ticks_first;
   34686:	68b3      	ldr	r3, [r6, #8]
   34688:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus = 0U;
   3468a:	2300      	movs	r3, #0
	ticker->ticks_periodic = start->ticks_periodic;
   3468c:	6068      	str	r0, [r5, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   3468e:	622a      	str	r2, [r5, #32]
	ticker->ticks_to_expire_minus = 0U;
   34690:	616b      	str	r3, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   34692:	6872      	ldr	r2, [r6, #4]
	ticker->ext_data = start->ext_data;
   34694:	f8c5 c028 	str.w	ip, [r5, #40]	; 0x28
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   34698:	4628      	mov	r0, r5
	ticker->ticks_to_expire_minus = 0U;
   3469a:	461f      	mov	r7, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   3469c:	f7ff fefe 	bl	3449c <ticks_to_expire_prep>
	ticker->force = 1U;
   346a0:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   346a4:	626f      	str	r7, [r5, #36]	; 0x24
	ticker->lazy_current = 0U;
   346a6:	83ef      	strh	r7, [r5, #30]
	ticker->force = 1U;
   346a8:	70eb      	strb	r3, [r5, #3]
}
   346aa:	e742      	b.n	34532 <ticker_job_list_insert+0x4e>
	while (count_user--) {
   346ac:	9a02      	ldr	r2, [sp, #8]
   346ae:	9905      	ldr	r1, [sp, #20]
   346b0:	428a      	cmp	r2, r1
   346b2:	f1a2 0308 	sub.w	r3, r2, #8
   346b6:	d00b      	beq.n	346d0 <ticker_job_list_insert+0x1ec>
   346b8:	9302      	str	r3, [sp, #8]
   346ba:	e726      	b.n	3450a <ticker_job_list_insert+0x26>
	ticker_new->next = current;
   346bc:	f80c 1004 	strb.w	r1, [ip, r4]
		instance->ticker_id_head = id;
   346c0:	f883 901d 	strb.w	r9, [r3, #29]
	if (current != TICKER_NULL) {
   346c4:	e773      	b.n	345ae <ticker_job_list_insert+0xca>
		ticker->must_expire =
   346c6:	2301      	movs	r3, #1
   346c8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->lazy_periodic =
   346cc:	2300      	movs	r3, #0
   346ce:	e7d3      	b.n	34678 <ticker_job_list_insert+0x194>
}
   346d0:	b007      	add	sp, #28
   346d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   346d6:	bf00      	nop

000346d8 <ticker_worker>:
{
   346d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   346dc:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1U;
   346de:	2301      	movs	r3, #1
{
   346e0:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
   346e2:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   346e4:	2d00      	cmp	r5, #0
   346e6:	d15a      	bne.n	3479e <ticker_worker+0xc6>
	if (instance->ticker_id_head == TICKER_NULL) {
   346e8:	7f43      	ldrb	r3, [r0, #29]
   346ea:	2bff      	cmp	r3, #255	; 0xff
   346ec:	4683      	mov	fp, r0
   346ee:	d055      	beq.n	3479c <ticker_worker+0xc4>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   346f0:	f00e f9f6 	bl	42ae0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   346f4:	f8db 2014 	ldr.w	r2, [fp, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   346f8:	f89b 301c 	ldrb.w	r3, [fp, #28]
	ticker_id_head = instance->ticker_id_head;
   346fc:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34700:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   34702:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34704:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   34708:	f000 8131 	beq.w	3496e <ticker_worker+0x296>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   3470c:	f8db 3018 	ldr.w	r3, [fp, #24]
   34710:	42bb      	cmp	r3, r7
   34712:	bf94      	ite	ls
   34714:	2300      	movls	r3, #0
   34716:	2301      	movhi	r3, #1
   34718:	9302      	str	r3, [sp, #8]
	while (ticker_id_head != TICKER_NULL) {
   3471a:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
   3471c:	f8db 8000 	ldr.w	r8, [fp]
	ticks_expired = 0U;
   34720:	f04f 0a00 	mov.w	sl, #0
	while (ticker_id_head != TICKER_NULL) {
   34724:	d045      	beq.n	347b2 <ticker_worker+0xda>
				ticker->lazy_current = 0U;
   34726:	46d1      	mov	r9, sl
   34728:	9505      	str	r5, [sp, #20]
   3472a:	f8cd b00c 	str.w	fp, [sp, #12]
		ticker = &node[ticker_id_head];
   3472e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   34732:	eb08 1406 	add.w	r4, r8, r6, lsl #4
   34736:	0136      	lsls	r6, r6, #4
		ticks_to_expire = ticker->ticks_to_expire;
   34738:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   3473a:	42bb      	cmp	r3, r7
   3473c:	d836      	bhi.n	347ac <ticker_worker+0xd4>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   3473e:	78a2      	ldrb	r2, [r4, #2]
		ticker_id_head = ticker->next;
   34740:	f818 6006 	ldrb.w	r6, [r8, r6]
		ticks_elapsed -= ticks_to_expire;
   34744:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   34746:	449a      	add	sl, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   34748:	7863      	ldrb	r3, [r4, #1]
   3474a:	1a9b      	subs	r3, r3, r2
   3474c:	b2db      	uxtb	r3, r3
   3474e:	2b01      	cmp	r3, #1
   34750:	d12a      	bne.n	347a8 <ticker_worker+0xd0>
		if (ticker->ticks_slot != 0U &&
   34752:	f8d4 b018 	ldr.w	fp, [r4, #24]
   34756:	f1bb 0f00 	cmp.w	fp, #0
   3475a:	d050      	beq.n	347fe <ticker_worker+0x126>
   3475c:	9b02      	ldr	r3, [sp, #8]
   3475e:	2b00      	cmp	r3, #0
   34760:	d048      	beq.n	347f4 <ticker_worker+0x11c>
		int32_t lazy_current = ticker->lazy_current;
   34762:	8be0      	ldrh	r0, [r4, #30]
			struct ticker_ext *ext_data = ticker->ext_data;
   34764:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   34766:	b13b      	cbz	r3, 34778 <ticker_worker+0xa0>
   34768:	6819      	ldr	r1, [r3, #0]
   3476a:	b119      	cbz	r1, 34774 <ticker_worker+0x9c>
			    ext_data->ticks_slot_window != 0U &&
   3476c:	7a19      	ldrb	r1, [r3, #8]
   3476e:	2900      	cmp	r1, #0
   34770:	f000 80e6 	beq.w	34940 <ticker_worker+0x268>
				ext_data->reschedule_state =
   34774:	f883 9008 	strb.w	r9, [r3, #8]
			ticker->lazy_current++;
   34778:	3001      	adds	r0, #1
			if ((ticker->must_expire == 0U) ||
   3477a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   3477e:	b280      	uxth	r0, r0
   34780:	83e0      	strh	r0, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   34782:	b179      	cbz	r1, 347a4 <ticker_worker+0xcc>
   34784:	8ba1      	ldrh	r1, [r4, #28]
   34786:	4281      	cmp	r1, r0
   34788:	d20c      	bcs.n	347a4 <ticker_worker+0xcc>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   3478a:	2b00      	cmp	r3, #0
   3478c:	f000 80f1 	beq.w	34972 <ticker_worker+0x29a>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   34790:	7a19      	ldrb	r1, [r3, #8]
   34792:	2901      	cmp	r1, #1
   34794:	d006      	beq.n	347a4 <ticker_worker+0xcc>
			must_expire_skip = 1U;
   34796:	f04f 0e01 	mov.w	lr, #1
   3479a:	e034      	b.n	34806 <ticker_worker+0x12e>
		instance->worker_trigger = 0U;
   3479c:	77c5      	strb	r5, [r0, #31]
}
   3479e:	b00f      	add	sp, #60	; 0x3c
   347a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   347a4:	3a01      	subs	r2, #1
   347a6:	70a2      	strb	r2, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   347a8:	2eff      	cmp	r6, #255	; 0xff
   347aa:	d1c0      	bne.n	3472e <ticker_worker+0x56>
   347ac:	9d05      	ldr	r5, [sp, #20]
   347ae:	f8dd b00c 	ldr.w	fp, [sp, #12]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   347b2:	f89b 300b 	ldrb.w	r3, [fp, #11]
   347b6:	f89b 200a 	ldrb.w	r2, [fp, #10]
   347ba:	429a      	cmp	r2, r3
   347bc:	d108      	bne.n	347d0 <ticker_worker+0xf8>
	uint8_t idx = *ticks_elapsed_index + 1;
   347be:	3201      	adds	r2, #1
   347c0:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   347c2:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   347c4:	bf1a      	itte	ne
   347c6:	4615      	movne	r5, r2
   347c8:	462b      	movne	r3, r5
   347ca:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   347cc:	f88b 500b 	strb.w	r5, [fp, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   347d0:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   347d4:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   347d8:	f8c3 a00c 	str.w	sl, [r3, #12]
	instance->worker_trigger = 0U;
   347dc:	2200      	movs	r2, #0
   347de:	f88b 201f 	strb.w	r2, [fp, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   347e2:	465b      	mov	r3, fp
   347e4:	2201      	movs	r2, #1
   347e6:	2104      	movs	r1, #4
   347e8:	2003      	movs	r0, #3
   347ea:	46a4      	mov	ip, r4
}
   347ec:	b00f      	add	sp, #60	; 0x3c
   347ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   347f2:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   347f4:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   347f8:	9304      	str	r3, [sp, #16]
   347fa:	3380      	adds	r3, #128	; 0x80
   347fc:	d145      	bne.n	3488a <ticker_worker+0x1b2>
		if (ticker->ext_data) {
   347fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   34800:	b303      	cbz	r3, 34844 <ticker_worker+0x16c>
   34802:	f04f 0e00 	mov.w	lr, #0
			ticker->ext_data->reschedule_state =
   34806:	f883 9008 	strb.w	r9, [r3, #8]
		if (ticker->timeout_func) {
   3480a:	68e5      	ldr	r5, [r4, #12]
			ticks_drift = ticker->ext_data->ticks_drift;
   3480c:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
   3480e:	f8c3 9004 	str.w	r9, [r3, #4]
		ticker->ack--;
   34812:	3a01      	subs	r2, #1
   34814:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   34816:	2d00      	cmp	r5, #0
   34818:	d0c6      	beq.n	347a8 <ticker_worker+0xd0>
					   ticks_expired -
   3481a:	9b03      	ldr	r3, [sp, #12]
   3481c:	6960      	ldr	r0, [r4, #20]
   3481e:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
   34820:	6a62      	ldr	r2, [r4, #36]	; 0x24
			uint8_t next_force = (ticker_next->force > ticker->force);
   34822:	f894 c003 	ldrb.w	ip, [r4, #3]
					   ticks_expired -
   34826:	ebaa 0000 	sub.w	r0, sl, r0
   3482a:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   3482c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   34830:	6923      	ldr	r3, [r4, #16]
   34832:	f1be 0f00 	cmp.w	lr, #0
   34836:	d017      	beq.n	34868 <ticker_worker+0x190>
   34838:	e9cd c300 	strd	ip, r3, [sp]
   3483c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   34840:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   34842:	e7b1      	b.n	347a8 <ticker_worker+0xd0>
		if (ticker->timeout_func) {
   34844:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   34846:	3a01      	subs	r2, #1
   34848:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   3484a:	2d00      	cmp	r5, #0
   3484c:	d0ac      	beq.n	347a8 <ticker_worker+0xd0>
			ticks_drift = 0U;
   3484e:	4619      	mov	r1, r3
					   ticks_expired -
   34850:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   34852:	6a62      	ldr	r2, [r4, #36]	; 0x24
			uint8_t next_force = (ticker_next->force > ticker->force);
   34854:	f894 c003 	ldrb.w	ip, [r4, #3]
					   ticks_expired -
   34858:	ebaa 0003 	sub.w	r0, sl, r3
   3485c:	9b03      	ldr	r3, [sp, #12]
   3485e:	695b      	ldr	r3, [r3, #20]
   34860:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
   34862:	6923      	ldr	r3, [r4, #16]
			ticks_at_expire = (instance->ticks_current +
   34864:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   34868:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
   3486c:	e9cd c300 	strd	ip, r3, [sp]
   34870:	4673      	mov	r3, lr
   34872:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   34874:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
   34876:	f8a4 901e 	strh.w	r9, [r4, #30]
					slot_reserved = 1U;
   3487a:	2b00      	cmp	r3, #0
   3487c:	9b02      	ldr	r3, [sp, #8]
				ticker->force = 0U;
   3487e:	f884 9003 	strb.w	r9, [r4, #3]
					slot_reserved = 1U;
   34882:	bf18      	it	ne
   34884:	2301      	movne	r3, #1
   34886:	9302      	str	r3, [sp, #8]
   34888:	e78e      	b.n	347a8 <ticker_worker+0xd0>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   3488a:	2eff      	cmp	r6, #255	; 0xff
   3488c:	d0b7      	beq.n	347fe <ticker_worker+0x126>
		int32_t lazy_current = ticker->lazy_current;
   3488e:	8be0      	ldrh	r0, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   34890:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   34892:	f8d4 e004 	ldr.w	lr, [r4, #4]
		if (lazy_current >= ticker->lazy_periodic) {
   34896:	4298      	cmp	r0, r3
		int32_t lazy_current = ticker->lazy_current;
   34898:	4605      	mov	r5, r0
			lazy_current -= ticker->lazy_periodic;
   3489a:	bf28      	it	cs
   3489c:	1ac5      	subcs	r5, r0, r3
			struct ticker_node *ticker_next = &nodes[id_head];
   3489e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   348a2:	eb08 1303 	add.w	r3, r8, r3, lsl #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   348a6:	9307      	str	r3, [sp, #28]
   348a8:	6899      	ldr	r1, [r3, #8]
		uint32_t current_age = ticker->ticks_periodic +
   348aa:	fb05 e30e 	mla	r3, r5, lr, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   348ae:	458b      	cmp	fp, r1
		uint32_t current_age = ticker->ticks_periodic +
   348b0:	9306      	str	r3, [sp, #24]
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   348b2:	d3a4      	bcc.n	347fe <ticker_worker+0x126>
				(lazy_current - ticker->priority);
   348b4:	9b04      	ldr	r3, [sp, #16]
   348b6:	960c      	str	r6, [sp, #48]	; 0x30
   348b8:	1aed      	subs	r5, r5, r3
   348ba:	9508      	str	r5, [sp, #32]
   348bc:	e9cd 7a0a 	strd	r7, sl, [sp, #40]	; 0x28
   348c0:	e9dd a306 	ldrd	sl, r3, [sp, #24]
   348c4:	9e08      	ldr	r6, [sp, #32]
   348c6:	9209      	str	r2, [sp, #36]	; 0x24
   348c8:	46a4      	mov	ip, r4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   348ca:	460d      	mov	r5, r1
   348cc:	900d      	str	r0, [sp, #52]	; 0x34
   348ce:	4674      	mov	r4, lr
			if (ticker_next->ticks_slot == 0U) {
   348d0:	699a      	ldr	r2, [r3, #24]
   348d2:	b322      	cbz	r2, 3491e <ticker_worker+0x246>
			int32_t lazy_next = ticker_next->lazy_current;
   348d4:	8bda      	ldrh	r2, [r3, #30]
				ticker_next->lazy_periodic > lazy_next;
   348d6:	8b98      	ldrh	r0, [r3, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   348d8:	685f      	ldr	r7, [r3, #4]
			if (!lazy_next_periodic_skip) {
   348da:	4282      	cmp	r2, r0
			int32_t lazy_next = ticker_next->lazy_current;
   348dc:	4696      	mov	lr, r2
				lazy_next -= ticker_next->lazy_periodic;
   348de:	bf28      	it	cs
   348e0:	eba2 0e00 	subcs.w	lr, r2, r0
					  0U :
   348e4:	b39f      	cbz	r7, 3494e <ticker_worker+0x276>
   348e6:	1a79      	subs	r1, r7, r1
				(ticker->ticks_periodic == 0U) ||
   348e8:	b11c      	cbz	r4, 348f2 <ticker_worker+0x21a>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   348ea:	fb07 110e 	mla	r1, r7, lr, r1
				(ticker->ticks_periodic == 0U) ||
   348ee:	458a      	cmp	sl, r1
   348f0:	d92f      	bls.n	34952 <ticker_worker+0x27a>
   348f2:	2101      	movs	r1, #1
					(ticker->ticks_periodic != 0U) &&
   348f4:	2700      	movs	r7, #0
			if (!lazy_next_periodic_skip &&
   348f6:	4282      	cmp	r2, r0
   348f8:	d311      	bcc.n	3491e <ticker_worker+0x246>
   348fa:	78d8      	ldrb	r0, [r3, #3]
   348fc:	f89c 2003 	ldrb.w	r2, [ip, #3]
   34900:	4290      	cmp	r0, r2
   34902:	d82d      	bhi.n	34960 <ticker_worker+0x288>
				ticker_next->priority;
   34904:	f993 202d 	ldrsb.w	r2, [r3, #45]	; 0x2d
			    (next_force ||
   34908:	f112 0f80 	cmn.w	r2, #128	; 0x80
   3490c:	d028      	beq.n	34960 <ticker_worker+0x288>
				(lazy_next - ticker_next->priority) >
   3490e:	ebae 0e02 	sub.w	lr, lr, r2
			     next_is_critical ||
   34912:	45b6      	cmp	lr, r6
   34914:	dd00      	ble.n	34918 <ticker_worker+0x240>
			     (next_has_priority && !current_is_older) ||
   34916:	b319      	cbz	r1, 34960 <ticker_worker+0x288>
   34918:	9904      	ldr	r1, [sp, #16]
   3491a:	4291      	cmp	r1, r2
   3491c:	d01e      	beq.n	3495c <ticker_worker+0x284>
			id_head = ticker_next->next;
   3491e:	781b      	ldrb	r3, [r3, #0]
		while (id_head != TICKER_NULL) {
   34920:	2bff      	cmp	r3, #255	; 0xff
   34922:	d007      	beq.n	34934 <ticker_worker+0x25c>
			struct ticker_node *ticker_next = &nodes[id_head];
   34924:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   34928:	eb08 1303 	add.w	r3, r8, r3, lsl #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   3492c:	6899      	ldr	r1, [r3, #8]
   3492e:	440d      	add	r5, r1
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   34930:	45ab      	cmp	fp, r5
   34932:	d2cd      	bcs.n	348d0 <ticker_worker+0x1f8>
   34934:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
   34938:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3493a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   3493c:	4664      	mov	r4, ip
   3493e:	e75e      	b.n	347fe <ticker_worker+0x126>
			    TICKER_RESCHEDULE_STATE_NONE &&
   34940:	8ba1      	ldrh	r1, [r4, #28]
   34942:	4281      	cmp	r1, r0
   34944:	f63f af16 	bhi.w	34774 <ticker_worker+0x9c>
				ext_data->reschedule_state =
   34948:	2101      	movs	r1, #1
   3494a:	7219      	strb	r1, [r3, #8]
   3494c:	e714      	b.n	34778 <ticker_worker+0xa0>
					  0U :
   3494e:	4639      	mov	r1, r7
   34950:	e7ca      	b.n	348e8 <ticker_worker+0x210>
					(ticker->ticks_periodic != 0U) &&
   34952:	bf34      	ite	cc
   34954:	2701      	movcc	r7, #1
   34956:	2700      	movcs	r7, #0
				(ticker->ticks_periodic == 0U) ||
   34958:	2100      	movs	r1, #0
   3495a:	e7cc      	b.n	348f6 <ticker_worker+0x21e>
			     (equal_priority && next_is_older))) {
   3495c:	2f00      	cmp	r7, #0
   3495e:	d0de      	beq.n	3491e <ticker_worker+0x246>
   34960:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
   34964:	9a09      	ldr	r2, [sp, #36]	; 0x24
   34966:	980d      	ldr	r0, [sp, #52]	; 0x34
   34968:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   3496a:	4664      	mov	r4, ip
   3496c:	e6fa      	b.n	34764 <ticker_worker+0x8c>
	uint8_t slot_reserved = 0;
   3496e:	9502      	str	r5, [sp, #8]
   34970:	e6d3      	b.n	3471a <ticker_worker+0x42>
		if (ticker->timeout_func) {
   34972:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   34974:	3a01      	subs	r2, #1
   34976:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   34978:	2d00      	cmp	r5, #0
   3497a:	f43f af15 	beq.w	347a8 <ticker_worker+0xd0>
			ticks_drift = 0U;
   3497e:	4619      	mov	r1, r3
					   ticks_expired -
   34980:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   34982:	6a62      	ldr	r2, [r4, #36]	; 0x24
			uint8_t next_force = (ticker_next->force > ticker->force);
   34984:	f894 c003 	ldrb.w	ip, [r4, #3]
					   ticks_expired -
   34988:	ebaa 0003 	sub.w	r0, sl, r3
   3498c:	9b03      	ldr	r3, [sp, #12]
   3498e:	695b      	ldr	r3, [r3, #20]
   34990:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   34992:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   34996:	6923      	ldr	r3, [r4, #16]
   34998:	e74e      	b.n	34838 <ticker_worker+0x160>
   3499a:	bf00      	nop

0003499c <ticker_job>:
	if (instance->worker_trigger) {
   3499c:	7fc3      	ldrb	r3, [r0, #31]
   3499e:	2b00      	cmp	r3, #0
   349a0:	f040 847a 	bne.w	35298 <ticker_job+0x8fc>
{
   349a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   349a8:	7f84      	ldrb	r4, [r0, #30]
{
   349aa:	b08f      	sub	sp, #60	; 0x3c
   349ac:	4606      	mov	r6, r0
	if (instance->job_guard) {
   349ae:	2c00      	cmp	r4, #0
   349b0:	f040 8089 	bne.w	34ac6 <ticker_job+0x12a>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   349b4:	7a83      	ldrb	r3, [r0, #10]
   349b6:	7ac2      	ldrb	r2, [r0, #11]
	instance->job_guard = 1U;
   349b8:	2101      	movs	r1, #1
   349ba:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   349bc:	429a      	cmp	r2, r3
	ticks_previous = instance->ticks_current;
   349be:	6941      	ldr	r1, [r0, #20]
   349c0:	9108      	str	r1, [sp, #32]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   349c2:	f000 846a 	beq.w	3529a <ticker_job+0x8fe>
	uint8_t idx = *ticks_elapsed_index + 1;
   349c6:	3301      	adds	r3, #1
   349c8:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   349ca:	2b02      	cmp	r3, #2
		idx = 0U;
   349cc:	bf08      	it	eq
   349ce:	4623      	moveq	r3, r4
		ticks_elapsed =
   349d0:	eb00 0283 	add.w	r2, r0, r3, lsl #2
	*ticks_elapsed_index = idx;
   349d4:	7283      	strb	r3, [r0, #10]
	ticker_id_old_head = instance->ticker_id_head;
   349d6:	7f43      	ldrb	r3, [r0, #29]
		ticks_elapsed =
   349d8:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   349da:	930a      	str	r3, [sp, #40]	; 0x28
		instance->ticks_current += ticks_elapsed;
   349dc:	9b08      	ldr	r3, [sp, #32]
	count_user = instance->count_user;
   349de:	f890 9009 	ldrb.w	r9, [r0, #9]
	users = &instance->users[0];
   349e2:	6845      	ldr	r5, [r0, #4]
		ticks_elapsed =
   349e4:	9204      	str	r2, [sp, #16]
		instance->ticks_current += ticks_elapsed;
   349e6:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   349e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   349ec:	6143      	str	r3, [r0, #20]
	node = &instance->nodes[0];
   349ee:	6803      	ldr	r3, [r0, #0]
   349f0:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   349f2:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   349f6:	b2db      	uxtb	r3, r3
   349f8:	f1b9 0f00 	cmp.w	r9, #0
   349fc:	f000 81e0 	beq.w	34dc0 <ticker_job+0x424>
		flag_elapsed = 1U;
   34a00:	2401      	movs	r4, #1
   34a02:	eb05 09c3 	add.w	r9, r5, r3, lsl #3
	pending = 0U;
   34a06:	2300      	movs	r3, #0
   34a08:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
   34a0a:	23ff      	movs	r3, #255	; 0xff
   34a0c:	9303      	str	r3, [sp, #12]
   34a0e:	9507      	str	r5, [sp, #28]
   34a10:	46ca      	mov	sl, r9
   34a12:	940d      	str	r4, [sp, #52]	; 0x34
   34a14:	9602      	str	r6, [sp, #8]
		user_ops = &user->user_op[0];
   34a16:	f8da b004 	ldr.w	fp, [sl, #4]
		while (user->middle != user->last) {
   34a1a:	f89a c003 	ldrb.w	ip, [sl, #3]
   34a1e:	f89a 7002 	ldrb.w	r7, [sl, #2]
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   34a22:	f04f 0900 	mov.w	r9, #0
		while (user->middle != user->last) {
   34a26:	4567      	cmp	r7, ip
   34a28:	d045      	beq.n	34ab6 <ticker_job+0x11a>
			if (middle == user->count_user_op) {
   34a2a:	f89a 1000 	ldrb.w	r1, [sl]
			middle = user->middle + 1;
   34a2e:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
   34a30:	b23a      	sxth	r2, r7
			middle = user->middle + 1;
   34a32:	b2db      	uxtb	r3, r3
				middle = 0U;
   34a34:	4299      	cmp	r1, r3
   34a36:	bf08      	it	eq
   34a38:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   34a3a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   34a3e:	eb02 0881 	add.w	r8, r2, r1, lsl #2
			user->middle = middle;
   34a42:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   34a46:	f81b 6028 	ldrb.w	r6, [fp, r8, lsl #2]
			user_op = &user_ops[user->middle];
   34a4a:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   34a4e:	2e04      	cmp	r6, #4
			ticker = &node[user_op->id];
   34a50:	7851      	ldrb	r1, [r2, #1]
			user_op = &user_ops[user->middle];
   34a52:	9200      	str	r2, [sp, #0]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   34a54:	d941      	bls.n	34ada <ticker_job+0x13e>
			ticker = &node[user_op->id];
   34a56:	9a01      	ldr	r2, [sp, #4]
   34a58:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   34a5c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   34a60:	2e08      	cmp	r6, #8
			state = (ticker->req - ticker->ack) & 0xff;
   34a62:	7862      	ldrb	r2, [r4, #1]
   34a64:	78a0      	ldrb	r0, [r4, #2]
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   34a66:	d83a      	bhi.n	34ade <ticker_job+0x142>
			state = (ticker->req - ticker->ack) & 0xff;
   34a68:	1a12      	subs	r2, r2, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   34a6a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   34a6e:	d036      	beq.n	34ade <ticker_job+0x142>
			    (state == 0U) ||
   34a70:	2e05      	cmp	r6, #5
   34a72:	d05d      	beq.n	34b30 <ticker_job+0x194>
			if (state == 1U) {
   34a74:	2a01      	cmp	r2, #1
   34a76:	f040 8125 	bne.w	34cc4 <ticker_job+0x328>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   34a7a:	2e06      	cmp	r6, #6
   34a7c:	d03f      	beq.n	34afe <ticker_job+0x162>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   34a7e:	9d02      	ldr	r5, [sp, #8]
   34a80:	4628      	mov	r0, r5
   34a82:	f7ff fccf 	bl	34424 <ticker_dequeue>
			ticker->req = ticker->ack;
   34a86:	78a3      	ldrb	r3, [r4, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
   34a88:	60a0      	str	r0, [r4, #8]
			ticker->req = ticker->ack;
   34a8a:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   34a8c:	7f2b      	ldrb	r3, [r5, #28]
   34a8e:	428b      	cmp	r3, r1
   34a90:	f000 80ff 	beq.w	34c92 <ticker_job+0x2f6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   34a94:	f80b 9028 	strb.w	r9, [fp, r8, lsl #2]
	user_op->status = status;
   34a98:	9b00      	ldr	r3, [sp, #0]
   34a9a:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
	if (user_op->fp_op_func) {
   34a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   34aa0:	b11b      	cbz	r3, 34aaa <ticker_job+0x10e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   34aa2:	9a00      	ldr	r2, [sp, #0]
   34aa4:	2000      	movs	r0, #0
   34aa6:	6b11      	ldr	r1, [r2, #48]	; 0x30
   34aa8:	4798      	blx	r3
		while (user->middle != user->last) {
   34aaa:	f89a c003 	ldrb.w	ip, [sl, #3]
   34aae:	f89a 7002 	ldrb.w	r7, [sl, #2]
   34ab2:	4567      	cmp	r7, ip
   34ab4:	d1b9      	bne.n	34a2a <ticker_job+0x8e>
	while (count_user--) {
   34ab6:	9a07      	ldr	r2, [sp, #28]
   34ab8:	4552      	cmp	r2, sl
   34aba:	f1aa 0308 	sub.w	r3, sl, #8
   34abe:	f000 8111 	beq.w	34ce4 <ticker_job+0x348>
   34ac2:	469a      	mov	sl, r3
   34ac4:	e7a7      	b.n	34a16 <ticker_job+0x7a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
   34ac6:	6a44      	ldr	r4, [r0, #36]	; 0x24
   34ac8:	2104      	movs	r1, #4
   34aca:	4603      	mov	r3, r0
   34acc:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   34ace:	2004      	movs	r0, #4
   34ad0:	46a4      	mov	ip, r4
}
   34ad2:	b00f      	add	sp, #60	; 0x3c
   34ad4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   34ad8:	4760      	bx	ip
   34ada:	461f      	mov	r7, r3
   34adc:	e7a3      	b.n	34a26 <ticker_job+0x8a>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   34ade:	f80b 9028 	strb.w	r9, [fp, r8, lsl #2]
	user_op->status = status;
   34ae2:	9900      	ldr	r1, [sp, #0]
   34ae4:	2201      	movs	r2, #1
   34ae6:	628a      	str	r2, [r1, #40]	; 0x28
	if (user_op->fp_op_func) {
   34ae8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
   34aea:	2a00      	cmp	r2, #0
   34aec:	d0f5      	beq.n	34ada <ticker_job+0x13e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   34aee:	6b09      	ldr	r1, [r1, #48]	; 0x30
   34af0:	2001      	movs	r0, #1
   34af2:	4790      	blx	r2
		while (user->middle != user->last) {
   34af4:	f89a c003 	ldrb.w	ip, [sl, #3]
   34af8:	f89a 7002 	ldrb.w	r7, [sl, #2]
   34afc:	e793      	b.n	34a26 <ticker_job+0x8a>
		if (instance->ticker_id_slot_previous == user_op->id) {
   34afe:	9b02      	ldr	r3, [sp, #8]
   34b00:	7f1b      	ldrb	r3, [r3, #28]
   34b02:	428b      	cmp	r3, r1
   34b04:	d1c6      	bne.n	34a94 <ticker_job+0xf8>
			instance->ticker_id_slot_previous = TICKER_NULL;
   34b06:	9a02      	ldr	r2, [sp, #8]
   34b08:	23ff      	movs	r3, #255	; 0xff
   34b0a:	7713      	strb	r3, [r2, #28]
				ticks_at_yield =
   34b0c:	9b00      	ldr	r3, [sp, #0]
   34b0e:	6858      	ldr	r0, [r3, #4]
			ticks_current = instance->ticks_current;
   34b10:	9b02      	ldr	r3, [sp, #8]
   34b12:	695a      	ldr	r2, [r3, #20]
			if (!((ticks_at_yield - ticks_current) &
   34b14:	1a83      	subs	r3, r0, r2
   34b16:	021d      	lsls	r5, r3, #8
   34b18:	f100 80c4 	bmi.w	34ca4 <ticker_job+0x308>
				ticks_used = ticks_elapsed +
   34b1c:	9a04      	ldr	r2, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34b1e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   34b22:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   34b24:	9902      	ldr	r1, [sp, #8]
   34b26:	698a      	ldr	r2, [r1, #24]
   34b28:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   34b2a:	bf88      	it	hi
   34b2c:	618b      	strhi	r3, [r1, #24]
   34b2e:	e7b1      	b.n	34a94 <ticker_job+0xf8>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   34b30:	9d00      	ldr	r5, [sp, #0]
   34b32:	6868      	ldr	r0, [r5, #4]
   34b34:	b948      	cbnz	r0, 34b4a <ticker_job+0x1ae>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   34b36:	68a8      	ldr	r0, [r5, #8]
   34b38:	b938      	cbnz	r0, 34b4a <ticker_job+0x1ae>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   34b3a:	68e8      	ldr	r0, [r5, #12]
   34b3c:	b928      	cbnz	r0, 34b4a <ticker_job+0x1ae>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   34b3e:	6928      	ldr	r0, [r5, #16]
   34b40:	b918      	cbnz	r0, 34b4a <ticker_job+0x1ae>
			     (user_op->params.update.lazy == 0U) &&
   34b42:	6968      	ldr	r0, [r5, #20]
   34b44:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   34b48:	d0c9      	beq.n	34ade <ticker_job+0x142>
			if (state == 1U) {
   34b4a:	2a01      	cmp	r2, #1
   34b4c:	f040 80ba 	bne.w	34cc4 <ticker_job+0x328>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   34b50:	9d02      	ldr	r5, [sp, #8]
   34b52:	4628      	mov	r0, r5
   34b54:	f7ff fc66 	bl	34424 <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   34b58:	696d      	ldr	r5, [r5, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   34b5a:	60a0      	str	r0, [r4, #8]
   34b5c:	4606      	mov	r6, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   34b5e:	9505      	str	r5, [sp, #20]
	ticks_now = cntr_cnt_get();
   34b60:	f00d ffbe 	bl	42ae0 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   34b64:	9b04      	ldr	r3, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34b66:	1b42      	subs	r2, r0, r5
   34b68:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   34b6c:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   34b6e:	4296      	cmp	r6, r2
	ticks_now = cntr_cnt_get();
   34b70:	4601      	mov	r1, r0
	if (ticks_to_expire > ticks_elapsed) {
   34b72:	f240 80a0 	bls.w	34cb6 <ticker_job+0x31a>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   34b76:	6963      	ldr	r3, [r4, #20]
   34b78:	9306      	str	r3, [sp, #24]
		ticks_to_expire -= ticks_elapsed;
   34b7a:	1ab0      	subs	r0, r6, r2
	if ((ticker->ticks_periodic != 0U) &&
   34b7c:	6867      	ldr	r7, [r4, #4]
   34b7e:	2f00      	cmp	r7, #0
   34b80:	d057      	beq.n	34c32 <ticker_job+0x296>
	    (user_op->params.update.lazy != 0U)) {
   34b82:	9a00      	ldr	r2, [sp, #0]
   34b84:	8a96      	ldrh	r6, [r2, #20]
	if ((ticker->ticks_periodic != 0U) &&
   34b86:	2e00      	cmp	r6, #0
   34b88:	d053      	beq.n	34c32 <ticker_job+0x296>
		user_op->params.update.lazy--;
   34b8a:	1e73      	subs	r3, r6, #1
   34b8c:	fa1f fe83 	uxth.w	lr, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   34b90:	4287      	cmp	r7, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34b92:	8be3      	ldrh	r3, [r4, #30]
		user_op->params.update.lazy--;
   34b94:	f8a2 e014 	strh.w	lr, [r2, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   34b98:	d221      	bcs.n	34bde <ticker_job+0x242>
   34b9a:	e9cd b10b 	strd	fp, r1, [sp, #44]	; 0x2c
			ticks_to_expire += ticker->ticks_periodic +
   34b9e:	f107 0c01 	add.w	ip, r7, #1
   34ba2:	e018      	b.n	34bd6 <ticker_job+0x23a>
	if ((ticker->remainder_current >= BIT(31)) ||
   34ba4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   34ba6:	f8df b204 	ldr.w	fp, [pc, #516]	; 34dac <ticker_job+0x410>
   34baa:	4981      	ldr	r1, [pc, #516]	; (34db0 <ticker_job+0x414>)
   34bac:	4493      	add	fp, r2
   34bae:	458b      	cmp	fp, r1
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   34bb0:	bf84      	itt	hi
   34bb2:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
   34bb6:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
			ticks_to_expire += ticker->ticks_periodic +
   34bba:	4665      	mov	r5, ip
	ticker->remainder_current -= ticker->remainder_periodic;
   34bbc:	6a21      	ldr	r1, [r4, #32]
   34bbe:	bf94      	ite	ls
   34bc0:	463d      	movls	r5, r7
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   34bc2:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
			ticker->lazy_current--;
   34bc6:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   34bc8:	1b40      	subs	r0, r0, r5
	ticker->remainder_current -= ticker->remainder_periodic;
   34bca:	1a52      	subs	r2, r2, r1
			ticker->lazy_current--;
   34bcc:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   34bce:	4287      	cmp	r7, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   34bd0:	6262      	str	r2, [r4, #36]	; 0x24
			ticker->lazy_current--;
   34bd2:	83e3      	strh	r3, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   34bd4:	d201      	bcs.n	34bda <ticker_job+0x23e>
   34bd6:	459e      	cmp	lr, r3
   34bd8:	d3e4      	bcc.n	34ba4 <ticker_job+0x208>
   34bda:	e9dd b10b 	ldrd	fp, r1, [sp, #44]	; 0x2c
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34bde:	459e      	cmp	lr, r3
   34be0:	d925      	bls.n	34c2e <ticker_job+0x292>
   34be2:	3301      	adds	r3, #1
	ticker->remainder_current += ticker->remainder_periodic;
   34be4:	e9d4 c208 	ldrd	ip, r2, [r4, #32]
			ticks_to_expire += ticker->ticks_periodic +
   34be8:	e9cd b10b 	strd	fp, r1, [sp, #44]	; 0x2c
   34bec:	b29b      	uxth	r3, r3
   34bee:	1c7d      	adds	r5, r7, #1
   34bf0:	e005      	b.n	34bfe <ticker_job+0x262>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34bf2:	3301      	adds	r3, #1
   34bf4:	b29b      	uxth	r3, r3
	if ((ticker->remainder_current < BIT(31)) &&
   34bf6:	46bb      	mov	fp, r7
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34bf8:	429e      	cmp	r6, r3
			ticks_to_expire += ticker->ticks_periodic +
   34bfa:	4458      	add	r0, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34bfc:	d012      	beq.n	34c24 <ticker_job+0x288>
	if ((ticker->remainder_current < BIT(31)) &&
   34bfe:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 34dac <ticker_job+0x410>
   34c02:	496b      	ldr	r1, [pc, #428]	; (34db0 <ticker_job+0x414>)
	ticker->remainder_current += ticker->remainder_periodic;
   34c04:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
   34c06:	4493      	add	fp, r2
   34c08:	458b      	cmp	fp, r1
   34c0a:	d8f2      	bhi.n	34bf2 <ticker_job+0x256>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34c0c:	3301      	adds	r3, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34c0e:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34c12:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34c14:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
			ticks_to_expire += ticker->ticks_periodic +
   34c18:	46ab      	mov	fp, r5
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34c1a:	429e      	cmp	r6, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34c1c:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   34c20:	4458      	add	r0, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34c22:	d1ec      	bne.n	34bfe <ticker_job+0x262>
   34c24:	e9dd b10b 	ldrd	fp, r1, [sp, #44]	; 0x2c
   34c28:	6262      	str	r2, [r4, #36]	; 0x24
   34c2a:	f8a4 e01e 	strh.w	lr, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   34c2e:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
   34c32:	9a00      	ldr	r2, [sp, #0]
	struct ticker_ext *ext_data = ticker->ext_data;
   34c34:	6aa6      	ldr	r6, [r4, #40]	; 0x28
				  user_op->params.update.ticks_drift_plus;
   34c36:	6853      	ldr	r3, [r2, #4]
	ticker->ticks_to_expire = ticks_to_expire +
   34c38:	4418      	add	r0, r3
   34c3a:	60a0      	str	r0, [r4, #8]
				user_op->params.update.ticks_drift_minus;
   34c3c:	6890      	ldr	r0, [r2, #8]
	ticker->ticks_to_expire_minus +=
   34c3e:	9a06      	ldr	r2, [sp, #24]
   34c40:	4402      	add	r2, r0
   34c42:	6162      	str	r2, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   34c44:	b11e      	cbz	r6, 34c4e <ticker_job+0x2b2>
   34c46:	6832      	ldr	r2, [r6, #0]
   34c48:	b10a      	cbz	r2, 34c4e <ticker_job+0x2b2>
			user_op->params.update.ticks_drift_plus -
   34c4a:	1a1b      	subs	r3, r3, r0
		ext_data->ticks_drift =
   34c4c:	6073      	str	r3, [r6, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   34c4e:	460a      	mov	r2, r1
   34c50:	4620      	mov	r0, r4
   34c52:	9905      	ldr	r1, [sp, #20]
   34c54:	f7ff fc22 	bl	3449c <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   34c58:	9900      	ldr	r1, [sp, #0]
   34c5a:	69a3      	ldr	r3, [r4, #24]
   34c5c:	68ca      	ldr	r2, [r1, #12]
   34c5e:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   34c60:	690a      	ldr	r2, [r1, #16]
   34c62:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   34c64:	bf8c      	ite	hi
   34c66:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   34c68:	2300      	movls	r3, #0
   34c6a:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
   34c6c:	9b00      	ldr	r3, [sp, #0]
   34c6e:	7d9b      	ldrb	r3, [r3, #22]
   34c70:	b103      	cbz	r3, 34c74 <ticker_job+0x2d8>
		ticker->force = user_op->params.update.force;
   34c72:	70e3      	strb	r3, [r4, #3]
	if (user_op->params.update.must_expire) {
   34c74:	9b00      	ldr	r3, [sp, #0]
   34c76:	7ddb      	ldrb	r3, [r3, #23]
   34c78:	b113      	cbz	r3, 34c80 <ticker_job+0x2e4>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   34c7a:	3b01      	subs	r3, #1
   34c7c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->next = *insert_head;
   34c80:	9b03      	ldr	r3, [sp, #12]
   34c82:	7023      	strb	r3, [r4, #0]
	*insert_head = user_op->id;
   34c84:	9a00      	ldr	r2, [sp, #0]
		ticker->req++;
   34c86:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
   34c88:	7852      	ldrb	r2, [r2, #1]
   34c8a:	9203      	str	r2, [sp, #12]
		ticker->req++;
   34c8c:	3301      	adds	r3, #1
   34c8e:	7063      	strb	r3, [r4, #1]
   34c90:	e700      	b.n	34a94 <ticker_job+0xf8>
			instance->ticker_id_slot_previous = TICKER_NULL;
   34c92:	9a02      	ldr	r2, [sp, #8]
   34c94:	23ff      	movs	r3, #255	; 0xff
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   34c96:	2e08      	cmp	r6, #8
			instance->ticker_id_slot_previous = TICKER_NULL;
   34c98:	7713      	strb	r3, [r2, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   34c9a:	f43f af37 	beq.w	34b0c <ticker_job+0x170>
				ticks_at_yield = cntr_cnt_get();
   34c9e:	f00d ff1f 	bl	42ae0 <cntr_cnt_get>
   34ca2:	e735      	b.n	34b10 <ticker_job+0x174>
				if (ticks_elapsed > ticks_used) {
   34ca4:	9b04      	ldr	r3, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34ca6:	1a12      	subs	r2, r2, r0
   34ca8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   34cac:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
   34cae:	bf34      	ite	cc
   34cb0:	1a9b      	subcc	r3, r3, r2
					ticks_used = 0;
   34cb2:	2300      	movcs	r3, #0
   34cb4:	e736      	b.n	34b24 <ticker_job+0x188>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   34cb6:	6963      	ldr	r3, [r4, #20]
   34cb8:	1b9b      	subs	r3, r3, r6
   34cba:	4413      	add	r3, r2
   34cbc:	9306      	str	r3, [sp, #24]
   34cbe:	6163      	str	r3, [r4, #20]
		ticks_to_expire = 0U;
   34cc0:	2000      	movs	r0, #0
   34cc2:	e75b      	b.n	34b7c <ticker_job+0x1e0>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   34cc4:	9b02      	ldr	r3, [sp, #8]
   34cc6:	2104      	movs	r1, #4
   34cc8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   34cca:	2201      	movs	r2, #1
   34ccc:	4608      	mov	r0, r1
   34cce:	47a0      	blx	r4
	while (count_user--) {
   34cd0:	9a07      	ldr	r2, [sp, #28]
				user->middle = prev;
   34cd2:	f88a 7002 	strb.w	r7, [sl, #2]
				pending = 1U;
   34cd6:	2301      	movs	r3, #1
	while (count_user--) {
   34cd8:	4552      	cmp	r2, sl
				pending = 1U;
   34cda:	9309      	str	r3, [sp, #36]	; 0x24
	while (count_user--) {
   34cdc:	f1aa 0308 	sub.w	r3, sl, #8
   34ce0:	f47f aeef 	bne.w	34ac2 <ticker_job+0x126>
	if (instance->ticker_id_head != ticker_id_old_head) {
   34ce4:	9e02      	ldr	r6, [sp, #8]
   34ce6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   34ce8:	7f73      	ldrb	r3, [r6, #29]
   34cea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   34cec:	ebb3 0902 	subs.w	r9, r3, r2
   34cf0:	bf18      	it	ne
   34cf2:	f04f 0901 	movne.w	r9, #1
	if (flag_elapsed) {
   34cf6:	2c00      	cmp	r4, #0
   34cf8:	d166      	bne.n	34dc8 <ticker_job+0x42c>
		ticker_job_list_insert(instance, insert_head);
   34cfa:	9903      	ldr	r1, [sp, #12]
   34cfc:	4630      	mov	r0, r6
   34cfe:	f7ff fbf1 	bl	344e4 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   34d02:	7f73      	ldrb	r3, [r6, #29]
   34d04:	9300      	str	r3, [sp, #0]
   34d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   34d08:	9a00      	ldr	r2, [sp, #0]
   34d0a:	4293      	cmp	r3, r2
   34d0c:	f000 8305 	beq.w	3531a <ticker_job+0x97e>
	if (!pending) {
   34d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   34d12:	2b00      	cmp	r3, #0
   34d14:	f000 8232 	beq.w	3517c <ticker_job+0x7e0>
	if (instance->ticker_id_head == TICKER_NULL) {
   34d18:	7f73      	ldrb	r3, [r6, #29]
   34d1a:	9300      	str	r3, [sp, #0]
   34d1c:	9b00      	ldr	r3, [sp, #0]
   34d1e:	2bff      	cmp	r3, #255	; 0xff
   34d20:	f000 81d6 	beq.w	350d0 <ticker_job+0x734>
	if (ticker_id_old_head == TICKER_NULL) {
   34d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   34d26:	2bff      	cmp	r3, #255	; 0xff
   34d28:	f000 8330 	beq.w	3538c <ticker_job+0x9f0>
	ticker = &instance->nodes[instance->ticker_id_head];
   34d2c:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
   34d2e:	6833      	ldr	r3, [r6, #0]
		LL_ASSERT(i);
   34d30:	f8df 9080 	ldr.w	r9, [pc, #128]	; 34db4 <ticker_job+0x418>
   34d34:	f8df 8080 	ldr.w	r8, [pc, #128]	; 34db8 <ticker_job+0x41c>
   34d38:	4f20      	ldr	r7, [pc, #128]	; (34dbc <ticker_job+0x420>)
	ticker = &instance->nodes[instance->ticker_id_head];
   34d3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   34d3e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   34d42:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   34d44:	f8d3 b008 	ldr.w	fp, [r3, #8]
		ctr = cntr_cnt_get();
   34d48:	f00d feca 	bl	42ae0 <cntr_cnt_get>
		cc = instance->ticks_current;
   34d4c:	6974      	ldr	r4, [r6, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34d4e:	1b03      	subs	r3, r0, r4
   34d50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   34d54:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   34d56:	455b      	cmp	r3, fp
   34d58:	bf2c      	ite	cs
   34d5a:	18e4      	addcs	r4, r4, r3
   34d5c:	445c      	addcc	r4, fp
		cc &= HAL_TICKER_CNTR_MASK;
   34d5e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   34d62:	6ab3      	ldr	r3, [r6, #40]	; 0x28
		ctr = cntr_cnt_get();
   34d64:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   34d66:	4620      	mov	r0, r4
   34d68:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   34d6a:	f00d feb9 	bl	42ae0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34d6e:	eba0 030a 	sub.w	r3, r0, sl
   34d72:	eba4 040a 	sub.w	r4, r4, sl
   34d76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   34d7a:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34d7c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
   34d80:	42a3      	cmp	r3, r4
		i--;
   34d82:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
   34d86:	f240 81aa 	bls.w	350de <ticker_job+0x742>
		LL_ASSERT(i);
   34d8a:	2d00      	cmp	r5, #0
   34d8c:	d1dc      	bne.n	34d48 <ticker_job+0x3ac>
   34d8e:	f640 133e 	movw	r3, #2366	; 0x93e
   34d92:	464a      	mov	r2, r9
   34d94:	4641      	mov	r1, r8
   34d96:	4638      	mov	r0, r7
   34d98:	f014 feb6 	bl	49b08 <printk>
   34d9c:	4040      	eors	r0, r0
   34d9e:	f380 8811 	msr	BASEPRI, r0
   34da2:	f04f 0003 	mov.w	r0, #3
   34da6:	df02      	svc	2
   34da8:	e7ce      	b.n	34d48 <ticker_job+0x3ac>
   34daa:	bf00      	nop
   34dac:	ff172b5a 	.word	0xff172b5a
   34db0:	7f172b59 	.word	0x7f172b59
   34db4:	00052b7c 	.word	0x00052b7c
   34db8:	00052c28 	.word	0x00052c28
   34dbc:	00052bbc 	.word	0x00052bbc
	insert_head = TICKER_NULL;
   34dc0:	23ff      	movs	r3, #255	; 0xff
	pending = 0U;
   34dc2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
   34dc6:	9303      	str	r3, [sp, #12]
	ticks_now = cntr_cnt_get();
   34dc8:	f00d fe8a 	bl	42ae0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34dcc:	9b08      	ldr	r3, [sp, #32]
	while (instance->ticker_id_head != TICKER_NULL) {
   34dce:	f896 b01d 	ldrb.w	fp, [r6, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34dd2:	1ac3      	subs	r3, r0, r3
   34dd4:	f023 477f 	bic.w	r7, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   34dd8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	node = &instance->nodes[0];
   34ddc:	6833      	ldr	r3, [r6, #0]
   34dde:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
   34de0:	d04c      	beq.n	34e7c <ticker_job+0x4e0>
   34de2:	f8dd a010 	ldr.w	sl, [sp, #16]
			instance->ticks_slot_previous = 0U;
   34de6:	f8cd 9014 	str.w	r9, [sp, #20]
   34dea:	463b      	mov	r3, r7
	ticks_expired = 0U;
   34dec:	f04f 0800 	mov.w	r8, #0
			instance->ticks_slot_previous = 0U;
   34df0:	4657      	mov	r7, sl
   34df2:	469a      	mov	sl, r3
		ticker = &node[id_expired];
   34df4:	9b00      	ldr	r3, [sp, #0]
   34df6:	eb0b 054b 	add.w	r5, fp, fp, lsl #1
   34dfa:	eb03 1405 	add.w	r4, r3, r5, lsl #4
   34dfe:	012d      	lsls	r5, r5, #4
		ticks_to_expire = ticker->ticks_to_expire;
   34e00:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   34e02:	42bb      	cmp	r3, r7
   34e04:	f200 8298 	bhi.w	35338 <ticker_job+0x99c>
		if (instance->ticks_slot_previous > ticks_to_expire) {
   34e08:	69b2      	ldr	r2, [r6, #24]
		skip_collision = (ticker->lazy_current != 0U);
   34e0a:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		instance->ticker_id_head = ticker->next;
   34e0e:	f8dd 9000 	ldr.w	r9, [sp]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   34e12:	4293      	cmp	r3, r2
			instance->ticks_slot_previous -= ticks_to_expire;
   34e14:	bf38      	it	cc
   34e16:	1ad2      	subcc	r2, r2, r3
		ticks_elapsed -= ticks_to_expire;
   34e18:	eba7 0703 	sub.w	r7, r7, r3
		ticks_expired += ticks_to_expire;
   34e1c:	4498      	add	r8, r3
		ticks_latency -= ticks_to_expire;
   34e1e:	ebaa 0a03 	sub.w	sl, sl, r3
			instance->ticks_slot_previous = 0U;
   34e22:	bf22      	ittt	cs
   34e24:	2200      	movcs	r2, #0
			instance->ticker_id_slot_previous = TICKER_NULL;
   34e26:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   34e2a:	7733      	strbcs	r3, [r6, #28]
			instance->ticks_slot_previous = 0U;
   34e2c:	61b2      	str	r2, [r6, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   34e2e:	78a3      	ldrb	r3, [r4, #2]
   34e30:	7862      	ldrb	r2, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   34e32:	f8d4 c018 	ldr.w	ip, [r4, #24]
		if ((ticker->ticks_periodic != 0U) ||
   34e36:	6861      	ldr	r1, [r4, #4]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   34e38:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		instance->ticker_id_head = ticker->next;
   34e3a:	f819 9005 	ldrb.w	r9, [r9, r5]
		state = (ticker->req - ticker->ack) & 0xff;
   34e3e:	1ad2      	subs	r2, r2, r3
   34e40:	b2d2      	uxtb	r2, r2
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   34e42:	f1bc 0f00 	cmp.w	ip, #0
   34e46:	d002      	beq.n	34e4e <ticker_job+0x4b2>
   34e48:	2a02      	cmp	r2, #2
   34e4a:	f000 809d 	beq.w	34f88 <ticker_job+0x5ec>
		ticker->ticks_to_expire = 0U;
   34e4e:	f04f 0c00 	mov.w	ip, #0
   34e52:	f8c4 c008 	str.w	ip, [r4, #8]
		instance->ticker_id_head = ticker->next;
   34e56:	f886 901d 	strb.w	r9, [r6, #29]
		if ((ticker->ticks_periodic != 0U) ||
   34e5a:	2900      	cmp	r1, #0
   34e5c:	d14d      	bne.n	34efa <ticker_job+0x55e>
   34e5e:	b110      	cbz	r0, 34e66 <ticker_job+0x4ca>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   34e60:	7a01      	ldrb	r1, [r0, #8]
   34e62:	2901      	cmp	r1, #1
   34e64:	d04d      	beq.n	34f02 <ticker_job+0x566>
			if (state && ((state == 1U) || skip_collision) &&
   34e66:	2a00      	cmp	r2, #0
   34e68:	f040 80af 	bne.w	34fca <ticker_job+0x62e>
			ticker->req = ticker->ack;
   34e6c:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   34e6e:	f896 b01d 	ldrb.w	fp, [r6, #29]
   34e72:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   34e76:	d1bd      	bne.n	34df4 <ticker_job+0x458>
   34e78:	f8dd 9014 	ldr.w	r9, [sp, #20]
			flag_compare_update = 1U;
   34e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		ticker_job_list_insert(instance, insert_head);
   34e7e:	9903      	ldr	r1, [sp, #12]
   34e80:	4630      	mov	r0, r6
			flag_compare_update = 1U;
   34e82:	459b      	cmp	fp, r3
   34e84:	bf18      	it	ne
   34e86:	f04f 0901 	movne.w	r9, #1
		ticker_job_list_insert(instance, insert_head);
   34e8a:	f7ff fb2b 	bl	344e4 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   34e8e:	7f73      	ldrb	r3, [r6, #29]
   34e90:	9300      	str	r3, [sp, #0]
		while (ticker_id_head != TICKER_NULL) {
   34e92:	9a00      	ldr	r2, [sp, #0]
	nodes = &instance->nodes[0];
   34e94:	f8d6 b000 	ldr.w	fp, [r6]
	while (rescheduling) {
   34e98:	f8cd 9014 	str.w	r9, [sp, #20]
		while (ticker_id_head != TICKER_NULL) {
   34e9c:	2aff      	cmp	r2, #255	; 0xff
	uint8_t  rescheduled = 0U;
   34e9e:	f04f 0300 	mov.w	r3, #0
   34ea2:	46b0      	mov	r8, r6
		while (ticker_id_head != TICKER_NULL) {
   34ea4:	f000 8101 	beq.w	350aa <ticker_job+0x70e>
   34ea8:	4646      	mov	r6, r8
		rescheduled  = 1U;
   34eaa:	9800      	ldr	r0, [sp, #0]
			ticker = &nodes[ticker_id_head];
   34eac:	b202      	sxth	r2, r0
   34eae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   34eb2:	eb0b 1102 	add.w	r1, fp, r2, lsl #4
   34eb6:	0112      	lsls	r2, r2, #4
			ext_data = ticker->ext_data;
   34eb8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   34eba:	b11d      	cbz	r5, 34ec4 <ticker_job+0x528>
   34ebc:	7a2c      	ldrb	r4, [r5, #8]
   34ebe:	2c01      	cmp	r4, #1
   34ec0:	f000 8092 	beq.w	34fe8 <ticker_job+0x64c>
			ticker_id_head = ticker->next;
   34ec4:	f81b 0002 	ldrb.w	r0, [fp, r2]
		while (ticker_id_head != TICKER_NULL) {
   34ec8:	28ff      	cmp	r0, #255	; 0xff
   34eca:	d1ef      	bne.n	34eac <ticker_job+0x510>
	return rescheduled;
   34ecc:	f8dd 9014 	ldr.w	r9, [sp, #20]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   34ed0:	2b00      	cmp	r3, #0
   34ed2:	f43f af18 	beq.w	34d06 <ticker_job+0x36a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   34ed6:	9a00      	ldr	r2, [sp, #0]
   34ed8:	990a      	ldr	r1, [sp, #40]	; 0x28
   34eda:	428a      	cmp	r2, r1
   34edc:	f47f af18 	bne.w	34d10 <ticker_job+0x374>
	if (!pending) {
   34ee0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   34ee2:	2a00      	cmp	r2, #0
   34ee4:	f47f af22 	bne.w	34d2c <ticker_job+0x390>
	count_user = instance->count_user;
   34ee8:	7a72      	ldrb	r2, [r6, #9]
	users = &instance->users[0];
   34eea:	6874      	ldr	r4, [r6, #4]
	while (count_user--) {
   34eec:	1e57      	subs	r7, r2, #1
   34eee:	b2ff      	uxtb	r7, r7
   34ef0:	2a00      	cmp	r2, #0
   34ef2:	f43f af1b 	beq.w	34d2c <ticker_job+0x390>
			flag_compare_update = 1U;
   34ef6:	4699      	mov	r9, r3
   34ef8:	e149      	b.n	3518e <ticker_job+0x7f2>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   34efa:	b1a0      	cbz	r0, 34f26 <ticker_job+0x58a>
   34efc:	7a02      	ldrb	r2, [r0, #8]
   34efe:	2a01      	cmp	r2, #1
   34f00:	d111      	bne.n	34f26 <ticker_job+0x58a>
				ticker->req = ticker->ack;
   34f02:	7063      	strb	r3, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
   34f04:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   34f06:	9b08      	ldr	r3, [sp, #32]
   34f08:	6971      	ldr	r1, [r6, #20]
   34f0a:	eb03 0208 	add.w	r2, r3, r8
   34f0e:	4620      	mov	r0, r4
   34f10:	f7ff fac4 	bl	3449c <ticks_to_expire_prep>
			ticker->next = *insert_head;
   34f14:	9a00      	ldr	r2, [sp, #0]
   34f16:	9b03      	ldr	r3, [sp, #12]
   34f18:	5553      	strb	r3, [r2, r5]
			ticker->req++;
   34f1a:	7863      	ldrb	r3, [r4, #1]
   34f1c:	f8cd b00c 	str.w	fp, [sp, #12]
   34f20:	3301      	adds	r3, #1
   34f22:	b2db      	uxtb	r3, r3
   34f24:	e7a2      	b.n	34e6c <ticker_job+0x4d0>
				if (!ticker->lazy_current) {
   34f26:	f1be 0f00 	cmp.w	lr, #0
   34f2a:	d14b      	bne.n	34fc4 <ticker_job+0x628>
					lazy_periodic = ticker->lazy_periodic;
   34f2c:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
				while (count--) {
   34f30:	4670      	mov	r0, lr
	ticker->remainder_current += ticker->remainder_periodic;
   34f32:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
   34f36:	e9cd b401 	strd	fp, r4, [sp, #4]
				ticks_to_expire = 0U;
   34f3a:	2200      	movs	r2, #0
   34f3c:	f101 0901 	add.w	r9, r1, #1
   34f40:	e004      	b.n	34f4c <ticker_job+0x5b0>
				while (count--) {
   34f42:	3801      	subs	r0, #1
	if ((ticker->remainder_current < BIT(31)) &&
   34f44:	468b      	mov	fp, r1
				while (count--) {
   34f46:	1c44      	adds	r4, r0, #1
					ticks_to_expire +=
   34f48:	445a      	add	r2, fp
				while (count--) {
   34f4a:	d011      	beq.n	34f70 <ticker_job+0x5d4>
	if ((ticker->remainder_current < BIT(31)) &&
   34f4c:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 35208 <ticker_job+0x86c>
   34f50:	4cae      	ldr	r4, [pc, #696]	; (3520c <ticker_job+0x870>)
	ticker->remainder_current += ticker->remainder_periodic;
   34f52:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   34f54:	449b      	add	fp, r3
   34f56:	45a3      	cmp	fp, r4
   34f58:	d8f3      	bhi.n	34f42 <ticker_job+0x5a6>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34f5a:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   34f5e:	3801      	subs	r0, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34f60:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
   34f64:	46cb      	mov	fp, r9
				while (count--) {
   34f66:	1c44      	adds	r4, r0, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34f68:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
					ticks_to_expire +=
   34f6c:	445a      	add	r2, fp
				while (count--) {
   34f6e:	d1ed      	bne.n	34f4c <ticker_job+0x5b0>
   34f70:	e9dd b401 	ldrd	fp, r4, [sp, #4]
				} else if (!ticker->must_expire) {
   34f74:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
   34f78:	6263      	str	r3, [r4, #36]	; 0x24
   34f7a:	2800      	cmp	r0, #0
   34f7c:	f000 819b 	beq.w	352b6 <ticker_job+0x91a>
				ticker->ticks_to_expire = ticks_to_expire;
   34f80:	60a2      	str	r2, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   34f82:	f8a4 e01e 	strh.w	lr, [r4, #30]
   34f86:	e7be      	b.n	34f06 <ticker_job+0x56a>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   34f88:	f1be 0f00 	cmp.w	lr, #0
   34f8c:	d10f      	bne.n	34fae <ticker_job+0x612>
   34f8e:	b118      	cbz	r0, 34f98 <ticker_job+0x5fc>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   34f90:	7a02      	ldrb	r2, [r0, #8]
   34f92:	2a01      	cmp	r2, #1
   34f94:	f000 81f5 	beq.w	35382 <ticker_job+0x9e6>
			instance->ticks_slot_previous = ticker->ticks_slot;
   34f98:	f8c6 c018 	str.w	ip, [r6, #24]
			instance->ticker_id_slot_previous = id_expired;
   34f9c:	f886 b01c 	strb.w	fp, [r6, #28]
		ticker->ticks_to_expire = 0U;
   34fa0:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   34fa4:	f886 901d 	strb.w	r9, [r6, #29]
		if ((ticker->ticks_periodic != 0U) ||
   34fa8:	2900      	cmp	r1, #0
   34faa:	d1bf      	bne.n	34f2c <ticker_job+0x590>
   34fac:	e75e      	b.n	34e6c <ticker_job+0x4d0>
		ticker->ticks_to_expire = 0U;
   34fae:	2200      	movs	r2, #0
   34fb0:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
   34fb2:	f886 901d 	strb.w	r9, [r6, #29]
		if ((ticker->ticks_periodic != 0U) ||
   34fb6:	2900      	cmp	r1, #0
   34fb8:	f000 81c3 	beq.w	35342 <ticker_job+0x9a6>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   34fbc:	b110      	cbz	r0, 34fc4 <ticker_job+0x628>
   34fbe:	7a02      	ldrb	r2, [r0, #8]
   34fc0:	2a01      	cmp	r2, #1
   34fc2:	d09e      	beq.n	34f02 <ticker_job+0x566>
					ticker->req = ticker->ack;
   34fc4:	7063      	strb	r3, [r4, #1]
				while (count--) {
   34fc6:	2000      	movs	r0, #0
   34fc8:	e7b3      	b.n	34f32 <ticker_job+0x596>
			if (state && ((state == 1U) || skip_collision) &&
   34fca:	2a01      	cmp	r2, #1
   34fcc:	d003      	beq.n	34fd6 <ticker_job+0x63a>
   34fce:	f1be 0f00 	cmp.w	lr, #0
   34fd2:	f43f af4b 	beq.w	34e6c <ticker_job+0x4d0>
			    ticker->fp_op_func) {
   34fd6:	6a22      	ldr	r2, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   34fd8:	2a00      	cmp	r2, #0
   34fda:	f43f af47 	beq.w	34e6c <ticker_job+0x4d0>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   34fde:	6a61      	ldr	r1, [r4, #36]	; 0x24
   34fe0:	2001      	movs	r0, #1
   34fe2:	4790      	blx	r2
			ticker->req = ticker->ack;
   34fe4:	78a3      	ldrb	r3, [r4, #2]
   34fe6:	e741      	b.n	34e6c <ticker_job+0x4d0>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   34fe8:	7f33      	ldrb	r3, [r6, #28]
   34fea:	2bff      	cmp	r3, #255	; 0xff
   34fec:	4691      	mov	r9, r2
   34fee:	f000 8081 	beq.w	350f4 <ticker_job+0x758>
			instance->ticks_slot_previous > ticks_elapsed) {
   34ff2:	69b3      	ldr	r3, [r6, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   34ff4:	9a04      	ldr	r2, [sp, #16]
   34ff6:	4293      	cmp	r3, r2
   34ff8:	d97c      	bls.n	350f4 <ticker_job+0x758>
			window_start_ticks = instance->ticks_slot_previous -
   34ffa:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   34ffe:	686a      	ldr	r2, [r5, #4]
		ticker->ext_data->ticks_drift += ticks_to_expire -
   35000:	688b      	ldr	r3, [r1, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   35002:	f81b 4009 	ldrb.w	r4, [fp, r9]
		ticker->ext_data->ticks_drift += ticks_to_expire -
   35006:	1ad3      	subs	r3, r2, r3
   35008:	9301      	str	r3, [sp, #4]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   3500a:	682b      	ldr	r3, [r5, #0]
   3500c:	429a      	cmp	r2, r3
   3500e:	d374      	bcc.n	350fa <ticker_job+0x75e>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   35010:	9b01      	ldr	r3, [sp, #4]
   35012:	606b      	str	r3, [r5, #4]
		while (ticker_id_iter != TICKER_NULL) {
   35014:	2cff      	cmp	r4, #255	; 0xff
		ticker->ticks_to_expire = ticks_to_expire;
   35016:	f04f 0300 	mov.w	r3, #0
   3501a:	608b      	str	r3, [r1, #8]
		while (ticker_id_iter != TICKER_NULL) {
   3501c:	d10d      	bne.n	3503a <ticker_job+0x69e>
		ticker->lazy_current--;
   3501e:	8bcb      	ldrh	r3, [r1, #30]
   35020:	3b01      	subs	r3, #1
   35022:	83cb      	strh	r3, [r1, #30]
		ext_data->reschedule_state =
   35024:	f04f 0302 	mov.w	r3, #2
   35028:	722b      	strb	r3, [r5, #8]
		rescheduled  = 1U;
   3502a:	2301      	movs	r3, #1
   3502c:	e73d      	b.n	34eaa <ticker_job+0x50e>
   3502e:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
		ticker->ext_data->ticks_drift += ticks_to_expire -
   35032:	9a01      	ldr	r2, [sp, #4]
   35034:	441a      	add	r2, r3
   35036:	606a      	str	r2, [r5, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   35038:	608b      	str	r3, [r1, #8]
		ticker_id_prev = TICKER_NULL;
   3503a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   3503e:	46a0      	mov	r8, r4
   35040:	e008      	b.n	35054 <ticker_job+0x6b8>
				ticker->ticks_to_expire -=
   35042:	1bdb      	subs	r3, r3, r7
   35044:	608b      	str	r3, [r1, #8]
			ticker_id_iter = node->next;
   35046:	f81b 2002 	ldrb.w	r2, [fp, r2]
		while (ticker_id_iter != TICKER_NULL) {
   3504a:	2aff      	cmp	r2, #255	; 0xff
   3504c:	46c4      	mov	ip, r8
   3504e:	f000 8093 	beq.w	35178 <ticker_job+0x7dc>
			ticker_id_iter = node->next;
   35052:	4690      	mov	r8, r2
			node = &nodes[ticker_id_iter];
   35054:	fa0f f288 	sxth.w	r2, r8
   35058:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   3505c:	eb0b 1e02 	add.w	lr, fp, r2, lsl #4
   35060:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   35062:	f8de 7008 	ldr.w	r7, [lr, #8]
   35066:	429f      	cmp	r7, r3
   35068:	d3eb      	bcc.n	35042 <ticker_job+0x6a6>
				node->ticks_to_expire -=
   3506a:	1afb      	subs	r3, r7, r3
   3506c:	f8ce 3008 	str.w	r3, [lr, #8]
				break;
   35070:	4667      	mov	r7, ip
		if (ticker_id_prev != TICKER_NULL) {
   35072:	2fff      	cmp	r7, #255	; 0xff
   35074:	d0d3      	beq.n	3501e <ticker_job+0x682>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   35076:	46b0      	mov	r8, r6
   35078:	b23e      	sxth	r6, r7
   3507a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   3507e:	0133      	lsls	r3, r6, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   35080:	f888 401d 	strb.w	r4, [r8, #29]
		ticker_id_iter = nodes[ticker_id_head].next;
   35084:	9400      	str	r4, [sp, #0]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   35086:	f81b 4003 	ldrb.w	r4, [fp, r3]
   3508a:	f80b 4009 	strb.w	r4, [fp, r9]
			nodes[ticker_id_prev].next = ticker_id_head;
   3508e:	f80b 0003 	strb.w	r0, [fp, r3]
		ticker->lazy_current--;
   35092:	8bc8      	ldrh	r0, [r1, #30]
		ext_data->reschedule_state =
   35094:	f04f 0202 	mov.w	r2, #2
		ticker->lazy_current--;
   35098:	3801      	subs	r0, #1
   3509a:	83c8      	strh	r0, [r1, #30]
		ext_data->reschedule_state =
   3509c:	722a      	strb	r2, [r5, #8]
		while (ticker_id_head != TICKER_NULL) {
   3509e:	9a00      	ldr	r2, [sp, #0]
   350a0:	2aff      	cmp	r2, #255	; 0xff
		rescheduled  = 1U;
   350a2:	f04f 0301 	mov.w	r3, #1
		while (ticker_id_head != TICKER_NULL) {
   350a6:	f47f aeff 	bne.w	34ea8 <ticker_job+0x50c>
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   350aa:	f8dd 9014 	ldr.w	r9, [sp, #20]
   350ae:	4646      	mov	r6, r8
   350b0:	2b00      	cmp	r3, #0
   350b2:	f43f ae28 	beq.w	34d06 <ticker_job+0x36a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   350b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   350b8:	2aff      	cmp	r2, #255	; 0xff
   350ba:	f000 814e 	beq.w	3535a <ticker_job+0x9be>
	if (!pending) {
   350be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   350c0:	2b00      	cmp	r3, #0
   350c2:	d05b      	beq.n	3517c <ticker_job+0x7e0>
	if (instance->ticker_id_head == TICKER_NULL) {
   350c4:	f898 301d 	ldrb.w	r3, [r8, #29]
   350c8:	9300      	str	r3, [sp, #0]
   350ca:	2bff      	cmp	r3, #255	; 0xff
   350cc:	f47f ae2e 	bne.w	34d2c <ticker_job+0x390>
		if (cntr_stop() == 0) {
   350d0:	f00d fce0 	bl	42a94 <cntr_stop>
   350d4:	b918      	cbnz	r0, 350de <ticker_job+0x742>
			instance->ticks_slot_previous = 0U;
   350d6:	61b0      	str	r0, [r6, #24]
			instance->ticks_current = cntr_cnt_get();
   350d8:	f00d fd02 	bl	42ae0 <cntr_cnt_get>
   350dc:	6170      	str	r0, [r6, #20]
	if (instance->worker_trigger) {
   350de:	7ff3      	ldrb	r3, [r6, #31]
	instance->job_guard = 0U;
   350e0:	2200      	movs	r2, #0
   350e2:	77b2      	strb	r2, [r6, #30]
	if (instance->worker_trigger) {
   350e4:	2b00      	cmp	r3, #0
   350e6:	f000 80d4 	beq.w	35292 <ticker_job+0x8f6>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   350ea:	6a74      	ldr	r4, [r6, #36]	; 0x24
   350ec:	4633      	mov	r3, r6
   350ee:	2201      	movs	r2, #1
   350f0:	2103      	movs	r1, #3
   350f2:	e4ec      	b.n	34ace <ticker_job+0x132>
		window_start_ticks = 0U;
   350f4:	f04f 0c00 	mov.w	ip, #0
   350f8:	e781      	b.n	34ffe <ticker_job+0x662>
		while (ticker_id_iter != TICKER_NULL &&
   350fa:	2cff      	cmp	r4, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   350fc:	eba3 0802 	sub.w	r8, r3, r2
		while (ticker_id_iter != TICKER_NULL &&
   35100:	f000 813a 	beq.w	35378 <ticker_job+0x9dc>
		       ticks_start_offset + ticker->ticks_slot <=
   35104:	f8d1 e018 	ldr.w	lr, [r1, #24]
		while (ticker_id_iter != TICKER_NULL &&
   35108:	45f0      	cmp	r8, lr
   3510a:	f0c0 8135 	bcc.w	35378 <ticker_job+0x9dc>
   3510e:	2300      	movs	r3, #0
   35110:	e9cd 1502 	strd	r1, r5, [sp, #8]
		       ticks_start_offset + ticker->ticks_slot <=
   35114:	46f2      	mov	sl, lr
		ticker_id_iter = nodes[ticker_id_head].next;
   35116:	4622      	mov	r2, r4
		while (ticker_id_iter != TICKER_NULL &&
   35118:	461f      	mov	r7, r3
   3511a:	e01f      	b.n	3515c <ticker_job+0x7c0>
			if (node->ticks_to_expire >
   3511c:	68a9      	ldr	r1, [r5, #8]
					MIN(ticks_slot_window,
   3511e:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
   35120:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
   35122:	443b      	add	r3, r7
			if (node->ticks_to_expire >
   35124:	d90a      	bls.n	3513c <ticker_job+0x7a0>
				window_end_ticks =
   35126:	4543      	cmp	r3, r8
   35128:	bf28      	it	cs
   3512a:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
   3512c:	4553      	cmp	r3, sl
   3512e:	d905      	bls.n	3513c <ticker_job+0x7a0>
			if (ticks_to_expire != 0U &&
   35130:	ebb3 030e 	subs.w	r3, r3, lr
   35134:	d002      	beq.n	3513c <ticker_job+0x7a0>
   35136:	4563      	cmp	r3, ip
   35138:	f4bf af79 	bcs.w	3502e <ticker_job+0x692>
			window_start_ticks  = node->ticks_to_expire +
   3513c:	69ab      	ldr	r3, [r5, #24]
			ticker_id_iter = node->next;
   3513e:	f81b 2002 	ldrb.w	r2, [fp, r2]
			window_start_ticks  = node->ticks_to_expire +
   35142:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
   35146:	440f      	add	r7, r1
			ticks_to_expire     = ticks_slot_window -
   35148:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
   3514c:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   3514e:	eb07 0a0e 	add.w	sl, r7, lr
		while (ticker_id_iter != TICKER_NULL &&
   35152:	f43f af6c 	beq.w	3502e <ticker_job+0x692>
   35156:	45d0      	cmp	r8, sl
   35158:	f4ff af69 	bcc.w	3502e <ticker_job+0x692>
			node = &nodes[ticker_id_iter];
   3515c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   35160:	eb0b 1502 	add.w	r5, fp, r2, lsl #4
   35164:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   35166:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   35168:	2900      	cmp	r1, #0
   3516a:	d0d7      	beq.n	3511c <ticker_job+0x780>
   3516c:	7a09      	ldrb	r1, [r1, #8]
   3516e:	2901      	cmp	r1, #1
   35170:	d1d4      	bne.n	3511c <ticker_job+0x780>
				ticker_id_iter = node->next;
   35172:	f81b 2002 	ldrb.w	r2, [fp, r2]
				continue;
   35176:	e7e9      	b.n	3514c <ticker_job+0x7b0>
   35178:	4647      	mov	r7, r8
   3517a:	e77a      	b.n	35072 <ticker_job+0x6d6>
	count_user = instance->count_user;
   3517c:	7a73      	ldrb	r3, [r6, #9]
	users = &instance->users[0];
   3517e:	6874      	ldr	r4, [r6, #4]
	while (count_user--) {
   35180:	1e5f      	subs	r7, r3, #1
   35182:	b2ff      	uxtb	r7, r7
		flag_compare_update = 1U;
   35184:	f04f 0901 	mov.w	r9, #1
	while (count_user--) {
   35188:	2b00      	cmp	r3, #0
   3518a:	f43f adc5 	beq.w	34d18 <ticker_job+0x37c>
   3518e:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
   35192:	f04f 0a00 	mov.w	sl, #0
   35196:	9400      	str	r4, [sp, #0]
   35198:	46b0      	mov	r8, r6
		while (user->first != user->last) {
   3519a:	787b      	ldrb	r3, [r7, #1]
   3519c:	78fa      	ldrb	r2, [r7, #3]
		user_op = &user->user_op[0];
   3519e:	687e      	ldr	r6, [r7, #4]
		while (user->first != user->last) {
   351a0:	429a      	cmp	r2, r3
   351a2:	d10c      	bne.n	351be <ticker_job+0x822>
   351a4:	e069      	b.n	3527a <ticker_job+0x8de>
	switch (uop->op) {
   351a6:	2b01      	cmp	r3, #1
   351a8:	d061      	beq.n	3526e <ticker_job+0x8d2>
			first = user->first + 1;
   351aa:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
   351ac:	7839      	ldrb	r1, [r7, #0]
			first = user->first + 1;
   351ae:	3301      	adds	r3, #1
   351b0:	b2db      	uxtb	r3, r3
				first = 0U;
   351b2:	4299      	cmp	r1, r3
   351b4:	bf08      	it	eq
   351b6:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   351b8:	429a      	cmp	r2, r3
			user->first = first;
   351ba:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
   351bc:	d05d      	beq.n	3527a <ticker_job+0x8de>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   351be:	b21b      	sxth	r3, r3
   351c0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   351c4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   351c8:	eb06 0083 	add.w	r0, r6, r3, lsl #2
	switch (uop->op) {
   351cc:	f816 3023 	ldrb.w	r3, [r6, r3, lsl #2]
   351d0:	2b02      	cmp	r3, #2
   351d2:	d01d      	beq.n	35210 <ticker_job+0x874>
   351d4:	2b03      	cmp	r3, #3
   351d6:	d1e6      	bne.n	351a6 <ticker_job+0x80a>
		if (uop->id < instance->count_node) {
   351d8:	7843      	ldrb	r3, [r0, #1]
   351da:	f898 2008 	ldrb.w	r2, [r8, #8]
   351de:	429a      	cmp	r2, r3
   351e0:	d949      	bls.n	35276 <ticker_job+0x8da>
			node[uop->id].priority =
   351e2:	f8d8 2000 	ldr.w	r2, [r8]
   351e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   351ea:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   351ee:	7903      	ldrb	r3, [r0, #4]
   351f0:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   351f4:	2200      	movs	r2, #0
		fp_op_func = uop->fp_op_func;
   351f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
			uop->status = TICKER_STATUS_SUCCESS;
   351f8:	6282      	str	r2, [r0, #40]	; 0x28
	if (fp_op_func) {
   351fa:	b113      	cbz	r3, 35202 <ticker_job+0x866>
		fp_op_func(uop->status, uop->op_context);
   351fc:	6b01      	ldr	r1, [r0, #48]	; 0x30
   351fe:	6a80      	ldr	r0, [r0, #40]	; 0x28
   35200:	4798      	blx	r3
   35202:	78fa      	ldrb	r2, [r7, #3]
   35204:	e7d1      	b.n	351aa <ticker_job+0x80e>
   35206:	bf00      	nop
   35208:	ff172b5a 	.word	0xff172b5a
   3520c:	7f172b59 	.word	0x7f172b59
		ticker_by_next_slot_get(instance,
   35210:	e9d0 e401 	ldrd	lr, r4, [r0, #4]
	_ticker_id_head = *ticker_id_head;
   35214:	f89e 2000 	ldrb.w	r2, [lr]
		ticker_by_next_slot_get(instance,
   35218:	f8d0 c00c 	ldr.w	ip, [r0, #12]
	node = instance->nodes;
   3521c:	f8d8 5000 	ldr.w	r5, [r8]
	_ticks_to_expire = *ticks_to_expire;
   35220:	f8dc 1000 	ldr.w	r1, [ip]
	    (*ticks_current != instance->ticks_current)) {
   35224:	f8d8 3014 	ldr.w	r3, [r8, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   35228:	2aff      	cmp	r2, #255	; 0xff
   3522a:	d003      	beq.n	35234 <ticker_job+0x898>
   3522c:	f8d4 b000 	ldr.w	fp, [r4]
   35230:	459b      	cmp	fp, r3
   35232:	d029      	beq.n	35288 <ticker_job+0x8ec>
		_ticker_id_head = instance->ticker_id_head;
   35234:	f898 201d 	ldrb.w	r2, [r8, #29]
		*ticks_current = instance->ticks_current;
   35238:	6023      	str	r3, [r4, #0]
		_ticks_to_expire = 0U;
   3523a:	2100      	movs	r1, #0
	while (_ticker_id_head != TICKER_NULL) {
   3523c:	2aff      	cmp	r2, #255	; 0xff
   3523e:	d106      	bne.n	3524e <ticker_job+0x8b2>
   35240:	e011      	b.n	35266 <ticker_job+0x8ca>
		_ticker_id_head = ticker->next;
   35242:	5cea      	ldrb	r2, [r5, r3]
		_ticks_to_expire += ticker->ticks_to_expire;
   35244:	f8db 4008 	ldr.w	r4, [fp, #8]
	while (_ticker_id_head != TICKER_NULL) {
   35248:	2aff      	cmp	r2, #255	; 0xff
		_ticks_to_expire += ticker->ticks_to_expire;
   3524a:	4421      	add	r1, r4
	while (_ticker_id_head != TICKER_NULL) {
   3524c:	d00b      	beq.n	35266 <ticker_job+0x8ca>
		ticker = &node[_ticker_id_head];
   3524e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   35252:	eb05 1b03 	add.w	fp, r5, r3, lsl #4
   35256:	011b      	lsls	r3, r3, #4
			if (ticker->ticks_slot) {
   35258:	f8db 4018 	ldr.w	r4, [fp, #24]
   3525c:	2c00      	cmp	r4, #0
   3525e:	d0f0      	beq.n	35242 <ticker_job+0x8a6>
		_ticks_to_expire += ticker->ticks_to_expire;
   35260:	f8db 3008 	ldr.w	r3, [fp, #8]
   35264:	4419      	add	r1, r3
	*ticker_id_head = _ticker_id_head;
   35266:	f88e 2000 	strb.w	r2, [lr]
	*ticks_to_expire = _ticks_to_expire;
   3526a:	f8cc 1000 	str.w	r1, [ip]
		fp_op_func = uop->fp_op_func;
   3526e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   35270:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
		break;
   35274:	e7c1      	b.n	351fa <ticker_job+0x85e>
   35276:	2201      	movs	r2, #1
   35278:	e7bd      	b.n	351f6 <ticker_job+0x85a>
	while (count_user--) {
   3527a:	9a00      	ldr	r2, [sp, #0]
   3527c:	4297      	cmp	r7, r2
   3527e:	f1a7 0308 	sub.w	r3, r7, #8
   35282:	d044      	beq.n	3530e <ticker_job+0x972>
   35284:	461f      	mov	r7, r3
   35286:	e788      	b.n	3519a <ticker_job+0x7fe>
		ticker = &node[_ticker_id_head];
   35288:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   3528c:	0113      	lsls	r3, r2, #4
		_ticker_id_head = ticker->next;
   3528e:	5cea      	ldrb	r2, [r5, r3]
   35290:	e7d4      	b.n	3523c <ticker_job+0x8a0>
}
   35292:	b00f      	add	sp, #60	; 0x3c
   35294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35298:	4770      	bx	lr
	ticker_id_old_head = instance->ticker_id_head;
   3529a:	7f43      	ldrb	r3, [r0, #29]
	count_user = instance->count_user;
   3529c:	7a42      	ldrb	r2, [r0, #9]
	ticker_id_old_head = instance->ticker_id_head;
   3529e:	930a      	str	r3, [sp, #40]	; 0x28
	node = &instance->nodes[0];
   352a0:	6803      	ldr	r3, [r0, #0]
   352a2:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   352a4:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
   352a6:	6845      	ldr	r5, [r0, #4]
	count_user = instance->count_user;
   352a8:	9209      	str	r2, [sp, #36]	; 0x24
	while (count_user--) {
   352aa:	b2db      	uxtb	r3, r3
   352ac:	2a00      	cmp	r2, #0
   352ae:	d079      	beq.n	353a4 <ticker_job+0xa08>
		ticks_elapsed = 0U;
   352b0:	9404      	str	r4, [sp, #16]
   352b2:	f7ff bba6 	b.w	34a02 <ticker_job+0x66>
					while (ticks_to_expire <
   352b6:	4592      	cmp	sl, r2
   352b8:	f67f ae62 	bls.w	34f80 <ticker_job+0x5e4>
				lazy = 0U;
   352bc:	9001      	str	r0, [sp, #4]
   352be:	1c48      	adds	r0, r1, #1
   352c0:	9002      	str	r0, [sp, #8]
   352c2:	e9cd b406 	strd	fp, r4, [sp, #24]
	if ((ticker->remainder_current < BIT(31)) &&
   352c6:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 353ac <ticker_job+0xa10>
   352ca:	e9dd 0401 	ldrd	r0, r4, [sp, #4]
   352ce:	e005      	b.n	352dc <ticker_job+0x940>
   352d0:	468b      	mov	fp, r1
						ticks_to_expire +=
   352d2:	445a      	add	r2, fp
						lazy++;
   352d4:	3001      	adds	r0, #1
					while (ticks_to_expire <
   352d6:	4592      	cmp	sl, r2
						lazy++;
   352d8:	b280      	uxth	r0, r0
					while (ticks_to_expire <
   352da:	d911      	bls.n	35300 <ticker_job+0x964>
	if ((ticker->remainder_current < BIT(31)) &&
   352dc:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 353b0 <ticker_job+0xa14>
	ticker->remainder_current += ticker->remainder_periodic;
   352e0:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   352e2:	449b      	add	fp, r3
   352e4:	45cb      	cmp	fp, r9
   352e6:	d8f3      	bhi.n	352d0 <ticker_job+0x934>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   352e8:	46a3      	mov	fp, r4
   352ea:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   352ee:	445a      	add	r2, fp
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   352f0:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   352f4:	3001      	adds	r0, #1
					while (ticks_to_expire <
   352f6:	4592      	cmp	sl, r2
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   352f8:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   352fc:	b280      	uxth	r0, r0
					while (ticks_to_expire <
   352fe:	d8ed      	bhi.n	352dc <ticker_job+0x940>
				ticker->lazy_current += (lazy_periodic + lazy);
   35300:	e9dd b406 	ldrd	fp, r4, [sp, #24]
   35304:	4470      	add	r0, lr
   35306:	6263      	str	r3, [r4, #36]	; 0x24
   35308:	fa1f fe80 	uxth.w	lr, r0
   3530c:	e638      	b.n	34f80 <ticker_job+0x5e4>
   3530e:	4646      	mov	r6, r8
	if (flag_compare_update) {
   35310:	f1b9 0f00 	cmp.w	r9, #0
   35314:	f43f aee3 	beq.w	350de <ticker_job+0x742>
   35318:	e4fe      	b.n	34d18 <ticker_job+0x37c>
	if (!pending) {
   3531a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3531c:	2b00      	cmp	r3, #0
   3531e:	d1f7      	bne.n	35310 <ticker_job+0x974>
	count_user = instance->count_user;
   35320:	7a73      	ldrb	r3, [r6, #9]
	users = &instance->users[0];
   35322:	6874      	ldr	r4, [r6, #4]
	while (count_user--) {
   35324:	1e5f      	subs	r7, r3, #1
   35326:	b2ff      	uxtb	r7, r7
   35328:	2b00      	cmp	r3, #0
   3532a:	f47f af30 	bne.w	3518e <ticker_job+0x7f2>
	if (flag_compare_update) {
   3532e:	f1b9 0f00 	cmp.w	r9, #0
   35332:	f43f aed4 	beq.w	350de <ticker_job+0x742>
   35336:	e4ef      	b.n	34d18 <ticker_job+0x37c>
			ticker->ticks_to_expire -= ticks_elapsed;
   35338:	1bdb      	subs	r3, r3, r7
   3533a:	f8dd 9014 	ldr.w	r9, [sp, #20]
   3533e:	60a3      	str	r3, [r4, #8]
			break;
   35340:	e59c      	b.n	34e7c <ticker_job+0x4e0>
		if ((ticker->ticks_periodic != 0U) ||
   35342:	2800      	cmp	r0, #0
   35344:	f43f ae47 	beq.w	34fd6 <ticker_job+0x63a>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   35348:	7a02      	ldrb	r2, [r0, #8]
   3534a:	2a01      	cmp	r2, #1
   3534c:	f43f add9 	beq.w	34f02 <ticker_job+0x566>
			if (state && ((state == 1U) || skip_collision) &&
   35350:	f1be 0f00 	cmp.w	lr, #0
   35354:	f47f ae3f 	bne.w	34fd6 <ticker_job+0x63a>
   35358:	e588      	b.n	34e6c <ticker_job+0x4d0>
	if (!pending) {
   3535a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3535c:	2a00      	cmp	r2, #0
   3535e:	f47f aeb7 	bne.w	350d0 <ticker_job+0x734>
	count_user = instance->count_user;
   35362:	f898 2009 	ldrb.w	r2, [r8, #9]
	users = &instance->users[0];
   35366:	f8d8 4004 	ldr.w	r4, [r8, #4]
	while (count_user--) {
   3536a:	1e57      	subs	r7, r2, #1
   3536c:	b2ff      	uxtb	r7, r7
   3536e:	2a00      	cmp	r2, #0
   35370:	f43f aeae 	beq.w	350d0 <ticker_job+0x734>
			flag_compare_update = 1U;
   35374:	4699      	mov	r9, r3
   35376:	e70a      	b.n	3518e <ticker_job+0x7f2>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   35378:	9b01      	ldr	r3, [sp, #4]
   3537a:	606b      	str	r3, [r5, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   3537c:	2300      	movs	r3, #0
   3537e:	608b      	str	r3, [r1, #8]
		while (ticker_id_iter != TICKER_NULL) {
   35380:	e64d      	b.n	3501e <ticker_job+0x682>
		ticker->ticks_to_expire = 0U;
   35382:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   35386:	f886 901d 	strb.w	r9, [r6, #29]
		if ((ticker->ticks_periodic != 0U) ||
   3538a:	e5ba      	b.n	34f02 <ticker_job+0x566>
		ticks_current = cntr_cnt_get();
   3538c:	f00d fba8 	bl	42ae0 <cntr_cnt_get>
   35390:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   35392:	f00d fb6f 	bl	42a74 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   35396:	7f73      	ldrb	r3, [r6, #29]
   35398:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
   3539a:	2800      	cmp	r0, #0
   3539c:	f47f acc6 	bne.w	34d2c <ticker_job+0x390>
			instance->ticks_current = ticks_current;
   353a0:	6174      	str	r4, [r6, #20]
   353a2:	e4c3      	b.n	34d2c <ticker_job+0x390>
	insert_head = TICKER_NULL;
   353a4:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
   353a6:	4691      	mov	r9, r2
	insert_head = TICKER_NULL;
   353a8:	9303      	str	r3, [sp, #12]
   353aa:	e4a6      	b.n	34cfa <ticker_job+0x35e>
   353ac:	7f172b59 	.word	0x7f172b59
   353b0:	ff172b5a 	.word	0xff172b5a

000353b4 <ticker_init>:
{
   353b4:	b4f0      	push	{r4, r5, r6, r7}
   353b6:	9d04      	ldr	r5, [sp, #16]
   353b8:	f89d 7014 	ldrb.w	r7, [sp, #20]
   353bc:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   353be:	2800      	cmp	r0, #0
   353c0:	d137      	bne.n	35432 <ticker_init+0x7e>
	instance->count_node = count_node;
   353c2:	4e1d      	ldr	r6, [pc, #116]	; (35438 <ticker_init+0x84>)
	while (count_node--) {
   353c4:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
   353c8:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   353ca:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   353cc:	fa5f fc8c 	uxtb.w	ip, ip
   353d0:	b149      	cbz	r1, 353e6 <ticker_init+0x32>
   353d2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   353d6:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   353da:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   353dc:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   353e0:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   353e4:	d1f9      	bne.n	353da <ticker_init+0x26>
	while (count_user--) {
   353e6:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   353e8:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   353ea:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   353ec:	b2d2      	uxtb	r2, r2
   353ee:	b183      	cbz	r3, 35412 <ticker_init+0x5e>
   353f0:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   353f4:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   353f6:	4610      	mov	r0, r2
   353f8:	f812 3908 	ldrb.w	r3, [r2], #-8
   353fc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   35400:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   35404:	42a8      	cmp	r0, r5
		count_op -= users[count_user].count_user_op;
   35406:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   3540a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   3540e:	b2df      	uxtb	r7, r3
	while (count_user--) {
   35410:	d1f0      	bne.n	353f4 <ticker_init+0x40>
	if (count_op) {
   35412:	b977      	cbnz	r7, 35432 <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   35414:	9a07      	ldr	r2, [sp, #28]
   35416:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   35418:	9a08      	ldr	r2, [sp, #32]
   3541a:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   3541c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   35420:	9a09      	ldr	r2, [sp, #36]	; 0x24
   35422:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   35424:	4638      	mov	r0, r7
	instance->ticks_current = 0U;
   35426:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   3542a:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   3542c:	8177      	strh	r7, [r6, #10]
}
   3542e:	bcf0      	pop	{r4, r5, r6, r7}
   35430:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   35432:	2001      	movs	r0, #1
}
   35434:	bcf0      	pop	{r4, r5, r6, r7}
   35436:	4770      	bx	lr
   35438:	20004b14 	.word	0x20004b14

0003543c <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   3543c:	4b04      	ldr	r3, [pc, #16]	; (35450 <ticker_is_initialized+0x14>)
   3543e:	222c      	movs	r2, #44	; 0x2c
   35440:	fb02 3300 	mla	r3, r2, r0, r3
   35444:	7a18      	ldrb	r0, [r3, #8]
}
   35446:	3800      	subs	r0, #0
   35448:	bf18      	it	ne
   3544a:	2001      	movne	r0, #1
   3544c:	4770      	bx	lr
   3544e:	bf00      	nop
   35450:	20004b14 	.word	0x20004b14

00035454 <ticker_trigger>:
	if (instance->sched_cb) {
   35454:	4b0a      	ldr	r3, [pc, #40]	; (35480 <ticker_trigger+0x2c>)
   35456:	222c      	movs	r2, #44	; 0x2c
   35458:	fb02 3200 	mla	r2, r2, r0, r3
{
   3545c:	b410      	push	{r4}
	if (instance->sched_cb) {
   3545e:	6a54      	ldr	r4, [r2, #36]	; 0x24
   35460:	b15c      	cbz	r4, 3547a <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   35462:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   35466:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   3546a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   3546e:	46a4      	mov	ip, r4
   35470:	2201      	movs	r2, #1
}
   35472:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   35474:	2103      	movs	r1, #3
   35476:	2002      	movs	r0, #2
   35478:	4760      	bx	ip
}
   3547a:	bc10      	pop	{r4}
   3547c:	4770      	bx	lr
   3547e:	bf00      	nop
   35480:	20004b14 	.word	0x20004b14

00035484 <ticker_start_ext>:
{
   35484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   35488:	4e28      	ldr	r6, [pc, #160]	; (3552c <ticker_start_ext+0xa8>)
{
   3548a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   3548e:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   35490:	252c      	movs	r5, #44	; 0x2c
   35492:	fb05 6504 	mla	r5, r5, r4, r6
{
   35496:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   35498:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   3549c:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   354a0:	6869      	ldr	r1, [r5, #4]
   354a2:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   354a6:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   354aa:	78fc      	ldrb	r4, [r7, #3]
	if (last >= user->count_user_op) {
   354ac:	f811 e030 	ldrb.w	lr, [r1, r0, lsl #3]
	if (last == user->first) {
   354b0:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   354b2:	f104 0c01 	add.w	ip, r4, #1
   354b6:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   354ba:	45e6      	cmp	lr, ip
   354bc:	bf98      	it	ls
   354be:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   354c2:	4561      	cmp	r1, ip
   354c4:	d02e      	beq.n	35524 <ticker_start_ext+0xa0>
	user_op = &user->user_op[user->last];
   354c6:	6879      	ldr	r1, [r7, #4]
   354c8:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
   354cc:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
   354d0:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   354d4:	f04f 0904 	mov.w	r9, #4
   354d8:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   354dc:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   354de:	9b08      	ldr	r3, [sp, #32]
   354e0:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   354e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   354e4:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   354e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   354e8:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   354ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   354ec:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   354ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   354f0:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   354f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   354f4:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   354f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   354f8:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   354fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   354fc:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   354fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   35500:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   35502:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   35504:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   35506:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   35508:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   3550c:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   35510:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   35514:	4798      	blx	r3
   35516:	4633      	mov	r3, r6
   35518:	4649      	mov	r1, r9
   3551a:	2200      	movs	r2, #0
   3551c:	47a8      	blx	r5
	return user_op->status;
   3551e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   35520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   35524:	2001      	movs	r0, #1
}
   35526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3552a:	bf00      	nop
   3552c:	20004b14 	.word	0x20004b14

00035530 <ticker_start>:
{
   35530:	b510      	push	{r4, lr}
   35532:	b08a      	sub	sp, #40	; 0x28
   35534:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35536:	9400      	str	r4, [sp, #0]
{
   35538:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   3553a:	9401      	str	r4, [sp, #4]
{
   3553c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   3553e:	9402      	str	r4, [sp, #8]
{
   35540:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35544:	9403      	str	r4, [sp, #12]
{
   35546:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35548:	9404      	str	r4, [sp, #16]
{
   3554a:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   3554c:	9405      	str	r4, [sp, #20]
{
   3554e:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35550:	9406      	str	r4, [sp, #24]
{
   35552:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35554:	9407      	str	r4, [sp, #28]
{
   35556:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35558:	9408      	str	r4, [sp, #32]
   3555a:	2400      	movs	r4, #0
   3555c:	9409      	str	r4, [sp, #36]	; 0x24
   3555e:	f7ff ff91 	bl	35484 <ticker_start_ext>
}
   35562:	b00a      	add	sp, #40	; 0x28
   35564:	bd10      	pop	{r4, pc}
   35566:	bf00      	nop

00035568 <ticker_update_ext>:
{
   35568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   3556c:	4d29      	ldr	r5, [pc, #164]	; (35614 <ticker_update_ext+0xac>)
{
   3556e:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   35572:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   35576:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   35578:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
   3557c:	fb0e 5e04 	mla	lr, lr, r4, r5
{
   35580:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   35582:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   35586:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   3558a:	f8de 1004 	ldr.w	r1, [lr, #4]
   3558e:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   35592:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	last = user->last + 1;
   35596:	78f4      	ldrb	r4, [r6, #3]
	if (last >= user->count_user_op) {
   35598:	f811 9030 	ldrb.w	r9, [r1, r0, lsl #3]
	if (last == user->first) {
   3559c:	7871      	ldrb	r1, [r6, #1]
	last = user->last + 1;
   3559e:	f104 0c01 	add.w	ip, r4, #1
   355a2:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   355a6:	45e1      	cmp	r9, ip
   355a8:	bf98      	it	ls
   355aa:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   355ae:	4561      	cmp	r1, ip
{
   355b0:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   355b4:	d02a      	beq.n	3560c <ticker_update_ext+0xa4>
	user_op = &user->user_op[user->last];
   355b6:	f8d6 a004 	ldr.w	sl, [r6, #4]
   355ba:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   355be:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   355c2:	eb0a 0481 	add.w	r4, sl, r1, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   355c6:	f04f 0b05 	mov.w	fp, #5
   355ca:	f80a b021 	strb.w	fp, [sl, r1, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   355ce:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   355d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   355d2:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   355d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   355d6:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   355d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   355da:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   355dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   355de:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   355e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   355e2:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   355e4:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   355e6:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   355e8:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   355ea:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   355ec:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   355f0:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
   355f4:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   355f8:	e9de 3608 	ldrd	r3, r6, [lr, #32]
   355fc:	4798      	blx	r3
   355fe:	462b      	mov	r3, r5
   35600:	2200      	movs	r2, #0
   35602:	2104      	movs	r1, #4
   35604:	47b0      	blx	r6
	return user_op->status;
   35606:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   35608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   3560c:	2001      	movs	r0, #1
}
   3560e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35612:	bf00      	nop
   35614:	20004b14 	.word	0x20004b14

00035618 <ticker_update>:
{
   35618:	b510      	push	{r4, lr}
   3561a:	b088      	sub	sp, #32
   3561c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   3561e:	9400      	str	r4, [sp, #0]
{
   35620:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   35622:	9401      	str	r4, [sp, #4]
{
   35624:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   35626:	9402      	str	r4, [sp, #8]
{
   35628:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   3562c:	9403      	str	r4, [sp, #12]
{
   3562e:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   35632:	9404      	str	r4, [sp, #16]
{
   35634:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   35636:	9405      	str	r4, [sp, #20]
{
   35638:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   3563a:	9406      	str	r4, [sp, #24]
   3563c:	2400      	movs	r4, #0
   3563e:	9407      	str	r4, [sp, #28]
   35640:	f7ff ff92 	bl	35568 <ticker_update_ext>
}
   35644:	b008      	add	sp, #32
   35646:	bd10      	pop	{r4, pc}

00035648 <ticker_stop>:
{
   35648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3564c:	4607      	mov	r7, r0
	struct ticker_instance *instance = &_instance[instance_index];
   3564e:	4d1e      	ldr	r5, [pc, #120]	; (356c8 <ticker_stop+0x80>)
   35650:	eb07 0487 	add.w	r4, r7, r7, lsl #2
{
   35654:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   35656:	eb07 0444 	add.w	r4, r7, r4, lsl #1
	user = &instance->users[user_id];
   3565a:	212c      	movs	r1, #44	; 0x2c
	struct ticker_instance *instance = &_instance[instance_index];
   3565c:	eb05 0684 	add.w	r6, r5, r4, lsl #2
	user = &instance->users[user_id];
   35660:	fb01 5407 	mla	r4, r1, r7, r5
   35664:	6865      	ldr	r5, [r4, #4]
   35666:	eb05 01c0 	add.w	r1, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   3566a:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   3566e:	f891 e003 	ldrb.w	lr, [r1, #3]
	if (last == user->first) {
   35672:	784d      	ldrb	r5, [r1, #1]
	last = user->last + 1;
   35674:	f10e 0c01 	add.w	ip, lr, #1
   35678:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   3567c:	4567      	cmp	r7, ip
   3567e:	bf98      	it	ls
   35680:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   35684:	4565      	cmp	r5, ip
   35686:	d01c      	beq.n	356c2 <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   35688:	684f      	ldr	r7, [r1, #4]
   3568a:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   3568e:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   35692:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   35696:	f04f 0807 	mov.w	r8, #7
   3569a:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   3569e:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   356a0:	9b06      	ldr	r3, [sp, #24]
   356a2:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   356a4:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   356a6:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   356a8:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   356aa:	f881 c003 	strb.w	ip, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   356ae:	e9d4 3708 	ldrd	r3, r7, [r4, #32]
   356b2:	4798      	blx	r3
   356b4:	4633      	mov	r3, r6
   356b6:	2200      	movs	r2, #0
   356b8:	2104      	movs	r1, #4
   356ba:	47b8      	blx	r7
	return user_op->status;
   356bc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   356be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   356c2:	2001      	movs	r0, #1
}
   356c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   356c8:	20004b14 	.word	0x20004b14

000356cc <ticker_next_slot_get>:
{
   356cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   356d0:	4607      	mov	r7, r0
	struct ticker_instance *instance = &_instance[instance_index];
   356d2:	4d20      	ldr	r5, [pc, #128]	; (35754 <ticker_next_slot_get+0x88>)
   356d4:	eb07 0487 	add.w	r4, r7, r7, lsl #2
{
   356d8:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   356da:	eb07 0444 	add.w	r4, r7, r4, lsl #1
	user = &instance->users[user_id];
   356de:	212c      	movs	r1, #44	; 0x2c
	struct ticker_instance *instance = &_instance[instance_index];
   356e0:	eb05 0684 	add.w	r6, r5, r4, lsl #2
	user = &instance->users[user_id];
   356e4:	fb01 5407 	mla	r4, r1, r7, r5
   356e8:	6865      	ldr	r5, [r4, #4]
   356ea:	eb05 01c0 	add.w	r1, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   356ee:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   356f2:	f891 e003 	ldrb.w	lr, [r1, #3]
	if (last == user->first) {
   356f6:	784d      	ldrb	r5, [r1, #1]
	last = user->last + 1;
   356f8:	f10e 0c01 	add.w	ip, lr, #1
   356fc:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   35700:	4567      	cmp	r7, ip
   35702:	bf98      	it	ls
   35704:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   35708:	4565      	cmp	r5, ip
   3570a:	d020      	beq.n	3574e <ticker_next_slot_get+0x82>
	user_op = &user->user_op[user->last];
   3570c:	684f      	ldr	r7, [r1, #4]
   3570e:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   35712:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   35716:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   3571a:	f64f 7802 	movw	r8, #65282	; 0xff02
   3571e:	f827 802e 	strh.w	r8, [r7, lr, lsl #2]
	user_op->params.slot_get.ticks_current = ticks_current;
   35722:	e9c5 2301 	strd	r2, r3, [r5, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   35726:	9b06      	ldr	r3, [sp, #24]
   35728:	60eb      	str	r3, [r5, #12]
	user_op->fp_op_func = fp_op_func;
   3572a:	9b07      	ldr	r3, [sp, #28]
   3572c:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   3572e:	9b08      	ldr	r3, [sp, #32]
   35730:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   35732:	2302      	movs	r3, #2
   35734:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   35736:	f881 c003 	strb.w	ip, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   3573a:	e9d4 3708 	ldrd	r3, r7, [r4, #32]
   3573e:	4798      	blx	r3
   35740:	4633      	mov	r3, r6
   35742:	2200      	movs	r2, #0
   35744:	2104      	movs	r1, #4
   35746:	47b8      	blx	r7
	return user_op->status;
   35748:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   3574a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   3574e:	2001      	movs	r0, #1
}
   35750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35754:	20004b14 	.word	0x20004b14

00035758 <ticker_job_sched>:
{
   35758:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   3575a:	4d0a      	ldr	r5, [pc, #40]	; (35784 <ticker_job_sched+0x2c>)
   3575c:	222c      	movs	r2, #44	; 0x2c
   3575e:	fb02 5200 	mla	r2, r2, r0, r5
   35762:	e9d2 3608 	ldrd	r3, r6, [r2, #32]
{
   35766:	4604      	mov	r4, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   35768:	4608      	mov	r0, r1
   3576a:	4798      	blx	r3
	struct ticker_instance *instance = &_instance[instance_index];
   3576c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   35770:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   35774:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   35778:	46b4      	mov	ip, r6
   3577a:	2200      	movs	r2, #0
}
   3577c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   35780:	2104      	movs	r1, #4
   35782:	4760      	bx	ip
   35784:	20004b14 	.word	0x20004b14

00035788 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   35788:	f00d b9aa 	b.w	42ae0 <cntr_cnt_get>

0003578c <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   3578c:	1a40      	subs	r0, r0, r1
}
   3578e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   35792:	4770      	bx	lr

00035794 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   35794:	b538      	push	{r3, r4, r5, lr}
   35796:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   35798:	2000      	movs	r0, #0
{
   3579a:	460c      	mov	r4, r1
		if (ull_adv_is_enabled(0)) {
   3579c:	f003 fb54 	bl	38e48 <ull_adv_is_enabled>
   357a0:	b990      	cbnz	r0, 357c8 <ll_addr_set+0x34>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   357a2:	f003 fd75 	bl	39290 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   357a6:	f010 0f06 	tst.w	r0, #6
   357aa:	d10d      	bne.n	357c8 <ll_addr_set+0x34>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   357ac:	b935      	cbnz	r5, 357bc <ll_addr_set+0x28>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   357ae:	4807      	ldr	r0, [pc, #28]	; (357cc <ll_addr_set+0x38>)
   357b0:	2206      	movs	r2, #6
   357b2:	4621      	mov	r1, r4
   357b4:	f016 fad7 	bl	4bd66 <memcpy>
	}

	return 0;
   357b8:	2000      	movs	r0, #0
}
   357ba:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   357bc:	2206      	movs	r2, #6
   357be:	4621      	mov	r1, r4
   357c0:	4803      	ldr	r0, [pc, #12]	; (357d0 <ll_addr_set+0x3c>)
   357c2:	f016 fad0 	bl	4bd66 <memcpy>
   357c6:	e7f7      	b.n	357b8 <ll_addr_set+0x24>
			return BT_HCI_ERR_CMD_DISALLOWED;
   357c8:	200c      	movs	r0, #12
}
   357ca:	bd38      	pop	{r3, r4, r5, pc}
   357cc:	20004b48 	.word	0x20004b48
   357d0:	20004b40 	.word	0x20004b40

000357d4 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
   357d4:	2801      	cmp	r0, #1
{
   357d6:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   357d8:	d805      	bhi.n	357e6 <ll_addr_get+0x12>

	if (addr_type) {
		return rnd_addr;
	}

	return pub_addr;
   357da:	4a04      	ldr	r2, [pc, #16]	; (357ec <ll_addr_get+0x18>)
   357dc:	4804      	ldr	r0, [pc, #16]	; (357f0 <ll_addr_get+0x1c>)
   357de:	2b00      	cmp	r3, #0
   357e0:	bf08      	it	eq
   357e2:	4610      	moveq	r0, r2
   357e4:	4770      	bx	lr
		return NULL;
   357e6:	2000      	movs	r0, #0
}
   357e8:	4770      	bx	lr
   357ea:	bf00      	nop
   357ec:	20004b48 	.word	0x20004b48
   357f0:	20004b40 	.word	0x20004b40

000357f4 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
   357f4:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   357f6:	b510      	push	{r4, lr}
   357f8:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   357fa:	d80b      	bhi.n	35814 <ll_addr_read+0x20>
	if (addr_type) {
   357fc:	4608      	mov	r0, r1
		return rnd_addr;
   357fe:	4c07      	ldr	r4, [pc, #28]	; (3581c <ll_addr_read+0x28>)
   35800:	4907      	ldr	r1, [pc, #28]	; (35820 <ll_addr_read+0x2c>)
   35802:	2b00      	cmp	r3, #0
   35804:	bf18      	it	ne
   35806:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
   35808:	2206      	movs	r2, #6
   3580a:	4621      	mov	r1, r4
   3580c:	f016 faab 	bl	4bd66 <memcpy>
	}

	return addr;
}
   35810:	4620      	mov	r0, r4
   35812:	bd10      	pop	{r4, pc}
		return NULL;
   35814:	2400      	movs	r4, #0
}
   35816:	4620      	mov	r0, r4
   35818:	bd10      	pop	{r4, pc}
   3581a:	bf00      	nop
   3581c:	20004b48 	.word	0x20004b48
   35820:	20004b40 	.word	0x20004b40

00035824 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   35824:	2802      	cmp	r0, #2
   35826:	d001      	beq.n	3582c <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   35828:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   3582a:	4770      	bx	lr
{
   3582c:	b538      	push	{r3, r4, r5, lr}
   3582e:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   35830:	4608      	mov	r0, r1
   35832:	461d      	mov	r5, r3
   35834:	f004 fc2a 	bl	3a08c <ll_connected_get>
			if (!conn) {
   35838:	b110      	cbz	r0, 35840 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   3583a:	2000      	movs	r0, #0
   3583c:	7028      	strb	r0, [r5, #0]
}
   3583e:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35840:	4620      	mov	r0, r4
}
   35842:	bd38      	pop	{r3, r4, r5, pc}

00035844 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   35844:	2300      	movs	r3, #0
   35846:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   35848:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   3584a:	4770      	bx	lr

0003584c <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   3584c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   3584e:	4802      	ldr	r0, [pc, #8]	; (35858 <hci_driver_init+0xc>)
   35850:	f7f8 fe44 	bl	2e4dc <bt_hci_driver_register>

	return 0;
}
   35854:	2000      	movs	r0, #0
   35856:	bd08      	pop	{r3, pc}
   35858:	00052c40 	.word	0x00052c40

0003585c <hci_driver_send>:
{
   3585c:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   3585e:	8983      	ldrh	r3, [r0, #12]
{
   35860:	b083      	sub	sp, #12
	if (!buf->len) {
   35862:	b123      	cbz	r3, 3586e <hci_driver_send+0x12>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   35864:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   35866:	4604      	mov	r4, r0
   35868:	b1c3      	cbz	r3, 3589c <hci_driver_send+0x40>
   3586a:	2b02      	cmp	r3, #2
   3586c:	d004      	beq.n	35878 <hci_driver_send+0x1c>
   3586e:	f06f 0515 	mvn.w	r5, #21
}
   35872:	4628      	mov	r0, r5
   35874:	b003      	add	sp, #12
   35876:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   35878:	a901      	add	r1, sp, #4
   3587a:	f000 ff5d 	bl	36738 <hci_acl_handle>
	if (evt) {
   3587e:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   35880:	4605      	mov	r5, r0
	if (evt) {
   35882:	b113      	cbz	r3, 3588a <hci_driver_send+0x2e>
		bt_recv_prio(evt);
   35884:	4618      	mov	r0, r3
   35886:	f7f8 fe0b 	bl	2e4a0 <bt_recv_prio>
	if (!err) {
   3588a:	2d00      	cmp	r5, #0
   3588c:	d1f1      	bne.n	35872 <hci_driver_send+0x16>
		net_buf_unref(buf);
   3588e:	4620      	mov	r0, r4
   35890:	f00e f8c0 	bl	43a14 <net_buf_unref>
   35894:	2500      	movs	r5, #0
}
   35896:	4628      	mov	r0, r5
   35898:	b003      	add	sp, #12
   3589a:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   3589c:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   3589e:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   358a0:	f000 fa90 	bl	35dc4 <hci_cmd_handle>
	if (evt) {
   358a4:	2800      	cmp	r0, #0
   358a6:	d0f2      	beq.n	3588e <hci_driver_send+0x32>
		bt_recv_prio(evt);
   358a8:	f7f8 fdfa 	bl	2e4a0 <bt_recv_prio>
		if (node_rx) {
   358ac:	9d01      	ldr	r5, [sp, #4]
   358ae:	2d00      	cmp	r5, #0
   358b0:	d0ed      	beq.n	3588e <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   358b2:	4628      	mov	r0, r5
   358b4:	f001 fbf6 	bl	370a4 <hci_get_class>
   358b8:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   358ba:	9901      	ldr	r1, [sp, #4]
   358bc:	4801      	ldr	r0, [pc, #4]	; (358c4 <hci_driver_send+0x68>)
   358be:	f01b f92b 	bl	50b18 <k_queue_append>
	if (!err) {
   358c2:	e7e4      	b.n	3588e <hci_driver_send+0x32>
   358c4:	20001324 	.word	0x20001324

000358c8 <recv_thread>:
{
   358c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_queue_get(queue, timeout);
   358cc:	4e42      	ldr	r6, [pc, #264]	; (359d8 <recv_thread+0x110>)
		LL_ASSERT(0);
   358ce:	f8df 810c 	ldr.w	r8, [pc, #268]	; 359dc <recv_thread+0x114>
   358d2:	4f43      	ldr	r7, [pc, #268]	; (359e0 <recv_thread+0x118>)
{
   358d4:	b082      	sub	sp, #8
   358d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   358da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   358de:	4630      	mov	r0, r6
   358e0:	f012 fbf6 	bl	480d0 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   358e4:	2800      	cmp	r0, #0
   358e6:	d0f6      	beq.n	358d6 <recv_thread+0xe>
	uint8_t class = node_rx->hdr.user_meta;
   358e8:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   358ea:	9001      	str	r0, [sp, #4]
	switch (class) {
   358ec:	2b04      	cmp	r3, #4
   358ee:	d821      	bhi.n	35934 <recv_thread+0x6c>
   358f0:	2b00      	cmp	r3, #0
   358f2:	d14b      	bne.n	3598c <recv_thread+0xc4>
		LL_ASSERT(0);
   358f4:	483b      	ldr	r0, [pc, #236]	; (359e4 <recv_thread+0x11c>)
   358f6:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   358fa:	4642      	mov	r2, r8
   358fc:	4639      	mov	r1, r7
   358fe:	f014 f903 	bl	49b08 <printk>
   35902:	4040      	eors	r0, r0
   35904:	f380 8811 	msr	BASEPRI, r0
   35908:	f04f 0003 	mov.w	r0, #3
   3590c:	df02      	svc	2
	node_rx->hdr.next = NULL;
   3590e:	9b01      	ldr	r3, [sp, #4]
   35910:	2200      	movs	r2, #0
   35912:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   35914:	a801      	add	r0, sp, #4
   35916:	f002 f87b 	bl	37a10 <ll_rx_mem_release>
   3591a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3591e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35922:	4630      	mov	r0, r6
   35924:	f012 fbd4 	bl	480d0 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   35928:	2800      	cmp	r0, #0
   3592a:	d0d4      	beq.n	358d6 <recv_thread+0xe>
	uint8_t class = node_rx->hdr.user_meta;
   3592c:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   3592e:	9001      	str	r0, [sp, #4]
	switch (class) {
   35930:	2b04      	cmp	r3, #4
   35932:	d9dd      	bls.n	358f0 <recv_thread+0x28>
   35934:	2b05      	cmp	r3, #5
   35936:	d1dd      	bne.n	358f4 <recv_thread+0x2c>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   35938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3593c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35940:	2003      	movs	r0, #3
   35942:	f7f7 ffd1 	bl	2d8e8 <bt_buf_get_rx>
   35946:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   35948:	4621      	mov	r1, r4
   3594a:	9801      	ldr	r0, [sp, #4]
   3594c:	f000 ff7a 	bl	36844 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   35950:	9b01      	ldr	r3, [sp, #4]
   35952:	2200      	movs	r2, #0
   35954:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   35956:	a801      	add	r0, sp, #4
   35958:	f002 f85a 	bl	37a10 <ll_rx_mem_release>
		while (buf) {
   3595c:	2c00      	cmp	r4, #0
   3595e:	d0ba      	beq.n	358d6 <recv_thread+0xe>
			frag = net_buf_ref(buf);
   35960:	4620      	mov	r0, r4
   35962:	f01a f9af 	bl	4fcc4 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
   35966:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
   35968:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
   3596a:	2000      	movs	r0, #0
   3596c:	f01a f9d0 	bl	4fd10 <net_buf_frag_del>
			if (frag->len) {
   35970:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
   35972:	4604      	mov	r4, r0
				bt_recv(frag);
   35974:	4628      	mov	r0, r5
			if (frag->len) {
   35976:	b133      	cbz	r3, 35986 <recv_thread+0xbe>
				bt_recv(frag);
   35978:	f7f8 fd0e 	bl	2e398 <bt_recv>
	z_impl_k_yield();
   3597c:	f013 f84a 	bl	48a14 <z_impl_k_yield>
		while (buf) {
   35980:	2c00      	cmp	r4, #0
   35982:	d1ed      	bne.n	35960 <recv_thread+0x98>
   35984:	e7a7      	b.n	358d6 <recv_thread+0xe>
				net_buf_unref(frag);
   35986:	f00e f845 	bl	43a14 <net_buf_unref>
   3598a:	e7f7      	b.n	3597c <recv_thread+0xb4>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   3598c:	2b02      	cmp	r3, #2
   3598e:	d013      	beq.n	359b8 <recv_thread+0xf0>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   35990:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35998:	2001      	movs	r0, #1
   3599a:	f7f7 ffa5 	bl	2d8e8 <bt_buf_get_rx>
   3599e:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   359a0:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   359a2:	b19c      	cbz	r4, 359cc <recv_thread+0x104>
			hci_evt_encode(node_rx, buf);
   359a4:	4621      	mov	r1, r4
   359a6:	f000 ff87 	bl	368b8 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   359aa:	9b01      	ldr	r3, [sp, #4]
   359ac:	2200      	movs	r2, #0
   359ae:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   359b0:	a801      	add	r0, sp, #4
   359b2:	f002 f82d 	bl	37a10 <ll_rx_mem_release>
		while (buf) {
   359b6:	e7d3      	b.n	35960 <recv_thread+0x98>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   359b8:	2200      	movs	r2, #0
   359ba:	2300      	movs	r3, #0
   359bc:	2101      	movs	r1, #1
   359be:	2000      	movs	r0, #0
   359c0:	f7f7 ffbc 	bl	2d93c <bt_buf_get_evt>
   359c4:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   359c6:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   359c8:	2c00      	cmp	r4, #0
   359ca:	d1eb      	bne.n	359a4 <recv_thread+0xdc>
	node_rx->hdr.next = NULL;
   359cc:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   359ce:	a801      	add	r0, sp, #4
   359d0:	f002 f81e 	bl	37a10 <ll_rx_mem_release>
		while (buf) {
   359d4:	e77f      	b.n	358d6 <recv_thread+0xe>
   359d6:	bf00      	nop
   359d8:	20001324 	.word	0x20001324
   359dc:	00052bdc 	.word	0x00052bdc
   359e0:	00052c1c 	.word	0x00052c1c
   359e4:	00052bbc 	.word	0x00052bbc

000359e8 <prio_recv_thread>:
{
   359e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   359ec:	4f2e      	ldr	r7, [pc, #184]	; (35aa8 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
   359ee:	4e2f      	ldr	r6, [pc, #188]	; (35aac <prio_recv_thread+0xc4>)
{
   359f0:	b082      	sub	sp, #8
   359f2:	e00c      	b.n	35a0e <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   359f4:	f7f7 ffa2 	bl	2d93c <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   359f8:	4622      	mov	r2, r4
   359fa:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   359fe:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   35a00:	f001 fb38 	bl	37074 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   35a04:	4620      	mov	r0, r4
   35a06:	f7f8 fd4b 	bl	2e4a0 <bt_recv_prio>
	z_impl_k_yield();
   35a0a:	f013 f803 	bl	48a14 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   35a0e:	f10d 0102 	add.w	r1, sp, #2
   35a12:	a801      	add	r0, sp, #4
   35a14:	f001 fe4c 	bl	376b0 <ll_rx_get>
   35a18:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   35a1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35a22:	2100      	movs	r1, #0
   35a24:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   35a26:	2c00      	cmp	r4, #0
   35a28:	d1e4      	bne.n	359f4 <prio_recv_thread+0xc>
		if (node_rx) {
   35a2a:	9b01      	ldr	r3, [sp, #4]
   35a2c:	b1b3      	cbz	r3, 35a5c <prio_recv_thread+0x74>
			ll_rx_dequeue();
   35a2e:	f001 ff2b 	bl	37888 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   35a32:	f8dd 8004 	ldr.w	r8, [sp, #4]
   35a36:	4640      	mov	r0, r8
   35a38:	f001 fb34 	bl	370a4 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   35a3c:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   35a3e:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   35a42:	796b      	ldrb	r3, [r5, #5]
   35a44:	2b03      	cmp	r3, #3
   35a46:	d102      	bne.n	35a4e <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   35a48:	792b      	ldrb	r3, [r5, #4]
   35a4a:	2b17      	cmp	r3, #23
   35a4c:	d00e      	beq.n	35a6c <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
   35a4e:	4629      	mov	r1, r5
   35a50:	4630      	mov	r0, r6
   35a52:	f01b f861 	bl	50b18 <k_queue_append>
		if (iso_received || node_rx) {
   35a56:	9b01      	ldr	r3, [sp, #4]
   35a58:	2b00      	cmp	r3, #0
   35a5a:	d1d8      	bne.n	35a0e <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
   35a5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35a64:	4638      	mov	r0, r7
   35a66:	f012 fb8d 	bl	48184 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   35a6a:	e7d0      	b.n	35a0e <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   35a6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35a70:	4621      	mov	r1, r4
   35a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35a76:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   35a78:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   35a7c:	f7f7 ff5e 	bl	2d93c <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   35a80:	4641      	mov	r1, r8
   35a82:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   35a84:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   35a86:	f105 001c 	add.w	r0, r5, #28
   35a8a:	f000 feb3 	bl	367f4 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   35a8e:	4640      	mov	r0, r8
   35a90:	f000 fed0 	bl	36834 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   35a94:	4620      	mov	r0, r4
			if (buf) {
   35a96:	b124      	cbz	r4, 35aa2 <prio_recv_thread+0xba>
				bt_recv_prio(buf);
   35a98:	f7f8 fd02 	bl	2e4a0 <bt_recv_prio>
					net_buf_unref(buf);
   35a9c:	4620      	mov	r0, r4
   35a9e:	f00d ffb9 	bl	43a14 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   35aa2:	9d01      	ldr	r5, [sp, #4]
   35aa4:	e7d3      	b.n	35a4e <prio_recv_thread+0x66>
   35aa6:	bf00      	nop
   35aa8:	200012f4 	.word	0x200012f4
   35aac:	20001324 	.word	0x20001324

00035ab0 <hci_driver_open>:
{
   35ab0:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   35ab2:	481a      	ldr	r0, [pc, #104]	; (35b1c <hci_driver_open+0x6c>)
{
   35ab4:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   35ab6:	f002 fc33 	bl	38320 <ll_init>
	if (err) {
   35aba:	4604      	mov	r4, r0
   35abc:	bb58      	cbnz	r0, 35b16 <hci_driver_open+0x66>
	hci_init(NULL);
   35abe:	f001 fb07 	bl	370d0 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   35ac2:	2600      	movs	r6, #0
   35ac4:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   35ac6:	f06f 0209 	mvn.w	r2, #9
   35aca:	e9cd 2403 	strd	r2, r4, [sp, #12]
   35ace:	e9cd 6706 	strd	r6, r7, [sp, #24]
   35ad2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   35ad6:	4b12      	ldr	r3, [pc, #72]	; (35b20 <hci_driver_open+0x70>)
   35ad8:	4912      	ldr	r1, [pc, #72]	; (35b24 <hci_driver_open+0x74>)
   35ada:	9400      	str	r4, [sp, #0]
   35adc:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   35ae0:	4811      	ldr	r0, [pc, #68]	; (35b28 <hci_driver_open+0x78>)
   35ae2:	f012 f8e7 	bl	47cb4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   35ae6:	4911      	ldr	r1, [pc, #68]	; (35b2c <hci_driver_open+0x7c>)
   35ae8:	480f      	ldr	r0, [pc, #60]	; (35b28 <hci_driver_open+0x78>)
   35aea:	f01a ff7c 	bl	509e6 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   35aee:	f06f 0207 	mvn.w	r2, #7
   35af2:	e9cd 2403 	strd	r2, r4, [sp, #12]
   35af6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   35afa:	e9cd 4401 	strd	r4, r4, [sp, #4]
   35afe:	4b0c      	ldr	r3, [pc, #48]	; (35b30 <hci_driver_open+0x80>)
   35b00:	490c      	ldr	r1, [pc, #48]	; (35b34 <hci_driver_open+0x84>)
   35b02:	9400      	str	r4, [sp, #0]
   35b04:	f640 0298 	movw	r2, #2200	; 0x898
   35b08:	480b      	ldr	r0, [pc, #44]	; (35b38 <hci_driver_open+0x88>)
   35b0a:	f012 f8d3 	bl	47cb4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   35b0e:	490b      	ldr	r1, [pc, #44]	; (35b3c <hci_driver_open+0x8c>)
   35b10:	4809      	ldr	r0, [pc, #36]	; (35b38 <hci_driver_open+0x88>)
   35b12:	f01a ff68 	bl	509e6 <z_impl_k_thread_name_set>
}
   35b16:	4620      	mov	r0, r4
   35b18:	b008      	add	sp, #32
   35b1a:	bdd0      	pop	{r4, r6, r7, pc}
   35b1c:	200012f4 	.word	0x200012f4
   35b20:	000359e9 	.word	0x000359e9
   35b24:	200090f0 	.word	0x200090f0
   35b28:	200032e0 	.word	0x200032e0
   35b2c:	00052c20 	.word	0x00052c20
   35b30:	000358c9 	.word	0x000358c9
   35b34:	20008858 	.word	0x20008858
   35b38:	20003260 	.word	0x20003260
   35b3c:	00052c2c 	.word	0x00052c2c

00035b40 <dup_found.constprop.0>:
	}

	return true;
}

static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
   35b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		      uint8_t adv_mode, const struct pdu_adv_adi *adi,
		      uint8_t data_status)
{
	/* check for duplicate filtering */
	if (dup_count >= 0) {
   35b44:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 35be8 <dup_found.constprop.0+0xa8>
   35b48:	f8d9 3000 	ldr.w	r3, [r9]
   35b4c:	2b00      	cmp	r3, #0
   35b4e:	db34      	blt.n	35bba <dup_found.constprop.0+0x7a>
   35b50:	4680      	mov	r8, r0
   35b52:	460f      	mov	r7, r1
   35b54:	4616      	mov	r6, r2
		__ASSERT((adv_mode < ARRAY_SIZE(dup_filter[0].adv_mode)),
			 "adv_mode index out-of-bound");
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		/* find for existing entry and update if changed */
		for (int32_t i = 0; i < dup_count; i++) {
   35b56:	d012      	beq.n	35b7e <dup_found.constprop.0+0x3e>
   35b58:	4c24      	ldr	r4, [pc, #144]	; (35bec <dup_found.constprop.0+0xac>)
   35b5a:	2500      	movs	r5, #0
			dup = &dup_filter[i];
			if (memcmp(addr, &dup->addr.a.val[0],
   35b5c:	4621      	mov	r1, r4
   35b5e:	2206      	movs	r2, #6
   35b60:	4630      	mov	r0, r6
   35b62:	f016 f8f0 	bl	4bd46 <memcmp>
   35b66:	b918      	cbnz	r0, 35b70 <dup_found.constprop.0+0x30>
				   sizeof(bt_addr_t)) ||
   35b68:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   35b6c:	42bb      	cmp	r3, r7
   35b6e:	d027      	beq.n	35bc0 <dup_found.constprop.0+0x80>
		for (int32_t i = 0; i < dup_count; i++) {
   35b70:	f8d9 3000 	ldr.w	r3, [r9]
   35b74:	3501      	adds	r5, #1
   35b76:	429d      	cmp	r5, r3
   35b78:	f104 0408 	add.w	r4, r4, #8
   35b7c:	dbee      	blt.n	35b5c <dup_found.constprop.0+0x1c>
			return is_dup_or_update(dup, adv_type, adv_mode, adi,
						data_status);
		}

		/* insert into the duplicate filter */
		dup = &dup_filter[dup_curr];
   35b7e:	4c1c      	ldr	r4, [pc, #112]	; (35bf0 <dup_found.constprop.0+0xb0>)
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   35b80:	4d1c      	ldr	r5, [pc, #112]	; (35bf4 <dup_found.constprop.0+0xb4>)
		dup = &dup_filter[dup_curr];
   35b82:	f8d4 a000 	ldr.w	sl, [r4]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   35b86:	4631      	mov	r1, r6
   35b88:	ea4f 06ca 	mov.w	r6, sl, lsl #3
   35b8c:	1c70      	adds	r0, r6, #1
   35b8e:	4428      	add	r0, r5
   35b90:	2206      	movs	r2, #6
   35b92:	f016 f8e8 	bl	4bd66 <memcpy>
		dup_ext_adv_mode_reset(dup->adv_mode);
		dup_ext_adv_adi_store(&dup->adv_mode[adv_mode], adi,
				      data_status);
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   35b96:	f8d9 3000 	ldr.w	r3, [r9]
		dup->addr.type = addr_type;
   35b9a:	f805 703a 	strb.w	r7, [r5, sl, lsl #3]
		dup->mask = BIT(adv_type);
   35b9e:	2201      	movs	r2, #1
   35ba0:	4435      	add	r5, r6
   35ba2:	fa02 f208 	lsl.w	r2, r2, r8
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   35ba6:	2b0f      	cmp	r3, #15
		dup->mask = BIT(adv_type);
   35ba8:	71ea      	strb	r2, [r5, #7]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   35baa:	dc1a      	bgt.n	35be2 <dup_found.constprop.0+0xa2>
			dup_count++;
   35bac:	3301      	adds	r3, #1
   35bae:	f8c9 3000 	str.w	r3, [r9]
			dup_curr = dup_count;
		} else {
			dup_curr++;
		}

		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   35bb2:	2b10      	cmp	r3, #16
			dup_curr = 0U;
   35bb4:	bf08      	it	eq
   35bb6:	2300      	moveq	r3, #0
   35bb8:	6023      	str	r3, [r4, #0]
		return false;
   35bba:	2000      	movs	r0, #0
		}
	}

	return false;
}
   35bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(dup->mask & BIT(adv_type))) {
   35bc0:	4b0c      	ldr	r3, [pc, #48]	; (35bf4 <dup_found.constprop.0+0xb4>)
   35bc2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   35bc6:	79da      	ldrb	r2, [r3, #7]
   35bc8:	fa22 f108 	lsr.w	r1, r2, r8
   35bcc:	07c9      	lsls	r1, r1, #31
   35bce:	d502      	bpl.n	35bd6 <dup_found.constprop.0+0x96>
	return true;
   35bd0:	2001      	movs	r0, #1
}
   35bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dup->mask |= BIT(adv_type);
   35bd6:	2101      	movs	r1, #1
   35bd8:	fa01 f108 	lsl.w	r1, r1, r8
   35bdc:	430a      	orrs	r2, r1
   35bde:	71da      	strb	r2, [r3, #7]
		return false;
   35be0:	e7eb      	b.n	35bba <dup_found.constprop.0+0x7a>
			dup_curr++;
   35be2:	6823      	ldr	r3, [r4, #0]
   35be4:	3301      	adds	r3, #1
   35be6:	e7e4      	b.n	35bb2 <dup_found.constprop.0+0x72>
   35be8:	20004b58 	.word	0x20004b58
   35bec:	20004b5d 	.word	0x20004b5d
   35bf0:	20004b54 	.word	0x20004b54
   35bf4:	20004b5c 	.word	0x20004b5c

00035bf8 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   35bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   35bfa:	4c18      	ldr	r4, [pc, #96]	; (35c5c <le_remote_feat_complete+0x64>)
   35bfc:	6864      	ldr	r4, [r4, #4]
   35bfe:	00a4      	lsls	r4, r4, #2
   35c00:	d504      	bpl.n	35c0c <le_remote_feat_complete+0x14>
   35c02:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   35c04:	4a16      	ldr	r2, [pc, #88]	; (35c60 <le_remote_feat_complete+0x68>)
   35c06:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   35c08:	0712      	lsls	r2, r2, #28
   35c0a:	d400      	bmi.n	35c0e <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   35c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   35c0e:	f103 0408 	add.w	r4, r3, #8
   35c12:	4607      	mov	r7, r0
   35c14:	460e      	mov	r6, r1
   35c16:	4620      	mov	r0, r4
   35c18:	2102      	movs	r1, #2
   35c1a:	f01a f885 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = evt;
   35c1e:	f640 433e 	movw	r3, #3134	; 0xc3e
   35c22:	8003      	strh	r3, [r0, #0]
   35c24:	2101      	movs	r1, #1
   35c26:	4620      	mov	r0, r4
   35c28:	f01a f87e 	bl	4fd28 <net_buf_simple_add>
   35c2c:	4603      	mov	r3, r0
	me->subevent = subevt;
   35c2e:	2204      	movs	r2, #4
   35c30:	701a      	strb	r2, [r3, #0]
   35c32:	4620      	mov	r0, r4
   35c34:	210b      	movs	r1, #11
   35c36:	f01a f877 	bl	4fd28 <net_buf_simple_add>
		memcpy(&sep->features[0],
   35c3a:	2208      	movs	r2, #8
	sep->status = status;
   35c3c:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   35c3e:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   35c42:	b92f      	cbnz	r7, 35c50 <le_remote_feat_complete+0x58>
		memcpy(&sep->features[0],
   35c44:	1d31      	adds	r1, r6, #4
   35c46:	3003      	adds	r0, #3
}
   35c48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   35c4c:	f016 b88b 	b.w	4bd66 <memcpy>
}
   35c50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   35c54:	2100      	movs	r1, #0
   35c56:	3003      	adds	r0, #3
   35c58:	f016 b890 	b.w	4bd7c <memset>
   35c5c:	20000190 	.word	0x20000190
   35c60:	20000188 	.word	0x20000188

00035c64 <hci_vendor_cmd_handle_common>:
{
   35c64:	b570      	push	{r4, r5, r6, lr}
	switch (ocf) {
   35c66:	3801      	subs	r0, #1
{
   35c68:	b086      	sub	sp, #24
   35c6a:	4614      	mov	r4, r2
	switch (ocf) {
   35c6c:	2809      	cmp	r0, #9
   35c6e:	d806      	bhi.n	35c7e <hci_vendor_cmd_handle_common+0x1a>
   35c70:	e8df f000 	tbb	[pc, r0]
   35c74:	05402609 	.word	0x05402609
   35c78:	63055105 	.word	0x63055105
   35c7c:	917e      	.short	0x917e
   35c7e:	f06f 0015 	mvn.w	r0, #21
}
   35c82:	b006      	add	sp, #24
   35c84:	bd70      	pop	{r4, r5, r6, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35c86:	4b4d      	ldr	r3, [pc, #308]	; (35dbc <hci_vendor_cmd_handle_common+0x158>)
   35c88:	210d      	movs	r1, #13
   35c8a:	8818      	ldrh	r0, [r3, #0]
   35c8c:	f016 fd74 	bl	4c778 <bt_hci_cmd_complete_create>
   35c90:	210d      	movs	r1, #13
   35c92:	6020      	str	r0, [r4, #0]
   35c94:	3008      	adds	r0, #8
   35c96:	f01a f847 	bl	4fd28 <net_buf_simple_add>
	rp->status = 0x00;
   35c9a:	2300      	movs	r3, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   35c9c:	f04f 1102 	mov.w	r1, #131074	; 0x20002
	rp->fw_variant = 0U;
   35ca0:	f44f 7240 	mov.w	r2, #768	; 0x300
	rp->status = 0x00;
   35ca4:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   35ca6:	f8c0 1001 	str.w	r1, [r0, #1]
	rp->fw_variant = 0U;
   35caa:	f8a0 2005 	strh.w	r2, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   35cae:	71c3      	strb	r3, [r0, #7]
   35cb0:	7203      	strb	r3, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   35cb2:	7243      	strb	r3, [r0, #9]
   35cb4:	7283      	strb	r3, [r0, #10]
   35cb6:	72c3      	strb	r3, [r0, #11]
   35cb8:	7303      	strb	r3, [r0, #12]
	return 0;
   35cba:	2000      	movs	r0, #0
}
   35cbc:	b006      	add	sp, #24
   35cbe:	bd70      	pop	{r4, r5, r6, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35cc0:	4b3e      	ldr	r3, [pc, #248]	; (35dbc <hci_vendor_cmd_handle_common+0x158>)
   35cc2:	2141      	movs	r1, #65	; 0x41
   35cc4:	8818      	ldrh	r0, [r3, #0]
   35cc6:	f016 fd57 	bl	4c778 <bt_hci_cmd_complete_create>
   35cca:	2141      	movs	r1, #65	; 0x41
   35ccc:	6020      	str	r0, [r4, #0]
   35cce:	3008      	adds	r0, #8
   35cd0:	f01a f82a 	bl	4fd28 <net_buf_simple_add>
	rp->status = 0x00;
   35cd4:	2100      	movs	r1, #0
   35cd6:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   35cd8:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   35cda:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   35cde:	f016 f84d 	bl	4bd7c <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   35ce2:	7862      	ldrb	r2, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   35ce4:	78a3      	ldrb	r3, [r4, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   35ce6:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   35cea:	f043 0303 	orr.w	r3, r3, #3
	rp->commands[0] |= BIT(5) | BIT(7);
   35cee:	7062      	strb	r2, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   35cf0:	70a3      	strb	r3, [r4, #2]
}
   35cf2:	e7e2      	b.n	35cba <hci_vendor_cmd_handle_common+0x56>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35cf4:	4b31      	ldr	r3, [pc, #196]	; (35dbc <hci_vendor_cmd_handle_common+0x158>)
   35cf6:	2109      	movs	r1, #9
   35cf8:	8818      	ldrh	r0, [r3, #0]
   35cfa:	f016 fd3d 	bl	4c778 <bt_hci_cmd_complete_create>
   35cfe:	2109      	movs	r1, #9
   35d00:	6020      	str	r0, [r4, #0]
   35d02:	3008      	adds	r0, #8
   35d04:	f01a f810 	bl	4fd28 <net_buf_simple_add>
	rp->status = 0x00;
   35d08:	2100      	movs	r1, #0
   35d0a:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   35d0e:	2208      	movs	r2, #8
   35d10:	f016 f834 	bl	4bd7c <memset>
}
   35d14:	e7d1      	b.n	35cba <hci_vendor_cmd_handle_common+0x56>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   35d16:	6889      	ldr	r1, [r1, #8]
   35d18:	2000      	movs	r0, #0
   35d1a:	f7ff fd3b 	bl	35794 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   35d1e:	4b27      	ldr	r3, [pc, #156]	; (35dbc <hci_vendor_cmd_handle_common+0x158>)
   35d20:	2101      	movs	r1, #1
   35d22:	8818      	ldrh	r0, [r3, #0]
   35d24:	f016 fd28 	bl	4c778 <bt_hci_cmd_complete_create>
   35d28:	2101      	movs	r1, #1
   35d2a:	4605      	mov	r5, r0
   35d2c:	3008      	adds	r0, #8
   35d2e:	f019 fffb 	bl	4fd28 <net_buf_simple_add>
	ccst->status = status;
   35d32:	2300      	movs	r3, #0
   35d34:	7003      	strb	r3, [r0, #0]
	*evt = cmd_complete_status(0x00);
   35d36:	6025      	str	r5, [r4, #0]
}
   35d38:	e7bf      	b.n	35cba <hci_vendor_cmd_handle_common+0x56>
	const char build_info[] = HCI_VS_BUILD_INFO;
   35d3a:	4d21      	ldr	r5, [pc, #132]	; (35dc0 <hci_vendor_cmd_handle_common+0x15c>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35d3c:	4e1f      	ldr	r6, [pc, #124]	; (35dbc <hci_vendor_cmd_handle_common+0x158>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   35d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   35d40:	f10d 0c04 	add.w	ip, sp, #4
   35d44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   35d48:	682b      	ldr	r3, [r5, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35d4a:	8830      	ldrh	r0, [r6, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   35d4c:	f88c 3000 	strb.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35d50:	2112      	movs	r1, #18
   35d52:	f016 fd11 	bl	4c778 <bt_hci_cmd_complete_create>
   35d56:	2112      	movs	r1, #18
   35d58:	6020      	str	r0, [r4, #0]
   35d5a:	3008      	adds	r0, #8
   35d5c:	f019 ffe4 	bl	4fd28 <net_buf_simple_add>
	rp->status = 0x00;
   35d60:	2300      	movs	r3, #0
   35d62:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   35d66:	2211      	movs	r2, #17
   35d68:	a901      	add	r1, sp, #4
   35d6a:	f015 fffc 	bl	4bd66 <memcpy>
}
   35d6e:	e7a4      	b.n	35cba <hci_vendor_cmd_handle_common+0x56>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35d70:	4b12      	ldr	r3, [pc, #72]	; (35dbc <hci_vendor_cmd_handle_common+0x158>)
   35d72:	2118      	movs	r1, #24
   35d74:	8818      	ldrh	r0, [r3, #0]
   35d76:	f016 fcff 	bl	4c778 <bt_hci_cmd_complete_create>
   35d7a:	2118      	movs	r1, #24
   35d7c:	6020      	str	r0, [r4, #0]
   35d7e:	3008      	adds	r0, #8
   35d80:	f019 ffd2 	bl	4fd28 <net_buf_simple_add>
	rp->status = 0x00;
   35d84:	2300      	movs	r3, #0
   35d86:	4604      	mov	r4, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   35d88:	2101      	movs	r1, #1
	rp->status = 0x00;
   35d8a:	f800 3b02 	strb.w	r3, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   35d8e:	f00d fd03 	bl	43798 <hci_vendor_read_static_addr>
   35d92:	7060      	strb	r0, [r4, #1]
}
   35d94:	e791      	b.n	35cba <hci_vendor_cmd_handle_common+0x56>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35d96:	4b09      	ldr	r3, [pc, #36]	; (35dbc <hci_vendor_cmd_handle_common+0x158>)
   35d98:	2121      	movs	r1, #33	; 0x21
   35d9a:	8818      	ldrh	r0, [r3, #0]
   35d9c:	f016 fcec 	bl	4c778 <bt_hci_cmd_complete_create>
   35da0:	2121      	movs	r1, #33	; 0x21
   35da2:	6020      	str	r0, [r4, #0]
   35da4:	3008      	adds	r0, #8
   35da6:	f019 ffbf 	bl	4fd28 <net_buf_simple_add>
	rp->status = 0x00;
   35daa:	4601      	mov	r1, r0
   35dac:	2300      	movs	r3, #0
   35dae:	f801 3b11 	strb.w	r3, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   35db2:	3001      	adds	r0, #1
   35db4:	f00d fd40 	bl	43838 <hci_vendor_read_key_hierarchy_roots>
}
   35db8:	e77f      	b.n	35cba <hci_vendor_cmd_handle_common+0x56>
   35dba:	bf00      	nop
   35dbc:	200072b6 	.word	0x200072b6
   35dc0:	00052c54 	.word	0x00052c54

00035dc4 <hci_cmd_handle>:
{
   35dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (cmd->len < sizeof(*chdr)) {
   35dc8:	8983      	ldrh	r3, [r0, #12]
{
   35dca:	b08e      	sub	sp, #56	; 0x38
	struct net_buf *evt = NULL;
   35dcc:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
   35dce:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   35dd0:	9209      	str	r2, [sp, #36]	; 0x24
	if (cmd->len < sizeof(*chdr)) {
   35dd2:	d92e      	bls.n	35e32 <hci_cmd_handle+0x6e>
	return net_buf_simple_pull_mem(&buf->b, len);
   35dd4:	4604      	mov	r4, r0
   35dd6:	460e      	mov	r6, r1
   35dd8:	3008      	adds	r0, #8
   35dda:	2103      	movs	r1, #3
   35ddc:	f019 ffd5 	bl	4fd8a <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   35de0:	89a2      	ldrh	r2, [r4, #12]
   35de2:	7883      	ldrb	r3, [r0, #2]
   35de4:	429a      	cmp	r2, r3
   35de6:	d324      	bcc.n	35e32 <hci_cmd_handle+0x6e>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   35de8:	8802      	ldrh	r2, [r0, #0]
   35dea:	4fd3      	ldr	r7, [pc, #844]	; (36138 <hci_cmd_handle+0x374>)
	switch (BT_OGF(_opcode)) {
   35dec:	f3c2 2385 	ubfx	r3, r2, #10, #6
   35df0:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   35df2:	b290      	uxth	r0, r2
   35df4:	803a      	strh	r2, [r7, #0]
	ocf = BT_OCF(_opcode);
   35df6:	f3c2 0509 	ubfx	r5, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   35dfa:	d809      	bhi.n	35e10 <hci_cmd_handle+0x4c>
   35dfc:	b19b      	cbz	r3, 35e26 <hci_cmd_handle+0x62>
   35dfe:	3b01      	subs	r3, #1
   35e00:	2b07      	cmp	r3, #7
   35e02:	d810      	bhi.n	35e26 <hci_cmd_handle+0x62>
   35e04:	e8df f003 	tbb	[pc, r3]
   35e08:	49260f1a 	.word	0x49260f1a
   35e0c:	620f0f0f 	.word	0x620f0f0f
   35e10:	2b3f      	cmp	r3, #63	; 0x3f
   35e12:	d108      	bne.n	35e26 <hci_cmd_handle+0x62>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   35e14:	aa09      	add	r2, sp, #36	; 0x24
   35e16:	4621      	mov	r1, r4
   35e18:	4628      	mov	r0, r5
   35e1a:	f7ff ff23 	bl	35c64 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   35e1e:	3016      	adds	r0, #22
   35e20:	f040 8472 	bne.w	36708 <hci_cmd_handle+0x944>
	return bt_hci_cmd_status_create(_opcode, status);
   35e24:	8838      	ldrh	r0, [r7, #0]
   35e26:	2101      	movs	r1, #1
}
   35e28:	b00e      	add	sp, #56	; 0x38
   35e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_status_create(_opcode, status);
   35e2e:	f016 bcb5 	b.w	4c79c <bt_hci_cmd_status_create>
		return NULL;
   35e32:	2400      	movs	r4, #0
}
   35e34:	4620      	mov	r0, r4
   35e36:	b00e      	add	sp, #56	; 0x38
   35e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (ocf) {
   35e3c:	2d06      	cmp	r5, #6
   35e3e:	f000 8418 	beq.w	36672 <hci_cmd_handle+0x8ae>
   35e42:	2d1d      	cmp	r5, #29
   35e44:	d1ef      	bne.n	35e26 <hci_cmd_handle+0x62>
	handle = sys_le16_to_cpu(cmd->handle);
   35e46:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   35e48:	8818      	ldrh	r0, [r3, #0]
   35e4a:	f004 faad 	bl	3a3a8 <ll_version_ind_send>
   35e4e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   35e50:	8838      	ldrh	r0, [r7, #0]
   35e52:	e7e9      	b.n	35e28 <hci_cmd_handle+0x64>
	switch (ocf) {
   35e54:	2d63      	cmp	r5, #99	; 0x63
   35e56:	f000 8454 	beq.w	36702 <hci_cmd_handle+0x93e>
   35e5a:	f200 80ed 	bhi.w	36038 <hci_cmd_handle+0x274>
   35e5e:	2d03      	cmp	r5, #3
   35e60:	f000 8429 	beq.w	366b6 <hci_cmd_handle+0x8f2>
   35e64:	2d2d      	cmp	r5, #45	; 0x2d
   35e66:	f040 80d3 	bne.w	36010 <hci_cmd_handle+0x24c>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
   35e6a:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35e6c:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   35e6e:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   35e70:	f893 8002 	ldrb.w	r8, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35e74:	f016 fc80 	bl	4c778 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   35e78:	2104      	movs	r1, #4
   35e7a:	4604      	mov	r4, r0
   35e7c:	3008      	adds	r0, #8
   35e7e:	f019 ff53 	bl	4fd28 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   35e82:	b2b7      	uxth	r7, r6
   35e84:	4605      	mov	r5, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   35e86:	1cc3      	adds	r3, r0, #3
   35e88:	4642      	mov	r2, r8
   35e8a:	4639      	mov	r1, r7
   35e8c:	2002      	movs	r0, #2
   35e8e:	f7ff fcc9 	bl	35824 <ll_tx_pwr_lvl_get>
	rp->handle = sys_cpu_to_le16(handle);
   35e92:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->status = status;
   35e96:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   35e98:	e7cc      	b.n	35e34 <hci_cmd_handle+0x70>
	switch (ocf) {
   35e9a:	1e6a      	subs	r2, r5, #1
   35e9c:	2a08      	cmp	r2, #8
   35e9e:	d8c2      	bhi.n	35e26 <hci_cmd_handle+0x62>
   35ea0:	a301      	add	r3, pc, #4	; (adr r3, 35ea8 <hci_cmd_handle+0xe4>)
   35ea2:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   35ea6:	bf00      	nop
   35ea8:	00036145 	.word	0x00036145
   35eac:	000360af 	.word	0x000360af
   35eb0:	0003608b 	.word	0x0003608b
   35eb4:	00035e27 	.word	0x00035e27
   35eb8:	00035e27 	.word	0x00035e27
   35ebc:	00035e27 	.word	0x00035e27
   35ec0:	00035e27 	.word	0x00035e27
   35ec4:	00035e27 	.word	0x00035e27
   35ec8:	0003606d 	.word	0x0003606d
	switch (ocf) {
   35ecc:	1e6a      	subs	r2, r5, #1
   35ece:	2a4d      	cmp	r2, #77	; 0x4d
   35ed0:	d8a9      	bhi.n	35e26 <hci_cmd_handle+0x62>
   35ed2:	a301      	add	r3, pc, #4	; (adr r3, 35ed8 <hci_cmd_handle+0x114>)
   35ed4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   35ed8:	00036387 	.word	0x00036387
   35edc:	00036367 	.word	0x00036367
   35ee0:	000364b7 	.word	0x000364b7
   35ee4:	00035e27 	.word	0x00035e27
   35ee8:	000364ad 	.word	0x000364ad
   35eec:	00036491 	.word	0x00036491
   35ef0:	00036469 	.word	0x00036469
   35ef4:	0003645d 	.word	0x0003645d
   35ef8:	00036451 	.word	0x00036451
   35efc:	00036447 	.word	0x00036447
   35f00:	0003642f 	.word	0x0003642f
   35f04:	00036647 	.word	0x00036647
   35f08:	00036617 	.word	0x00036617
   35f0c:	0003660f 	.word	0x0003660f
   35f10:	000365f1 	.word	0x000365f1
   35f14:	000365eb 	.word	0x000365eb
   35f18:	000365e3 	.word	0x000365e3
   35f1c:	000365db 	.word	0x000365db
   35f20:	000365bb 	.word	0x000365bb
   35f24:	000365b3 	.word	0x000365b3
   35f28:	0003658d 	.word	0x0003658d
   35f2c:	0003657f 	.word	0x0003657f
   35f30:	0003654f 	.word	0x0003654f
   35f34:	00036531 	.word	0x00036531
   35f38:	00036519 	.word	0x00036519
   35f3c:	0003650f 	.word	0x0003650f
   35f40:	000364ff 	.word	0x000364ff
   35f44:	00036349 	.word	0x00036349
   35f48:	00035e27 	.word	0x00035e27
   35f4c:	00035e27 	.word	0x00035e27
   35f50:	00035e27 	.word	0x00035e27
   35f54:	0003632b 	.word	0x0003632b
   35f58:	00036313 	.word	0x00036313
   35f5c:	00036303 	.word	0x00036303
   35f60:	000362d1 	.word	0x000362d1
   35f64:	000362c5 	.word	0x000362c5
   35f68:	00035e27 	.word	0x00035e27
   35f6c:	00035e27 	.word	0x00035e27
   35f70:	000362b7 	.word	0x000362b7
   35f74:	000362af 	.word	0x000362af
   35f78:	000362a9 	.word	0x000362a9
   35f7c:	0003628b 	.word	0x0003628b
   35f80:	00036261 	.word	0x00036261
   35f84:	00036237 	.word	0x00036237
   35f88:	00036217 	.word	0x00036217
   35f8c:	00036209 	.word	0x00036209
   35f90:	000361c1 	.word	0x000361c1
   35f94:	0003616d 	.word	0x0003616d
   35f98:	00036411 	.word	0x00036411
   35f9c:	000363bd 	.word	0x000363bd
   35fa0:	00035e27 	.word	0x00035e27
   35fa4:	00035e27 	.word	0x00035e27
   35fa8:	00035e27 	.word	0x00035e27
   35fac:	00035e27 	.word	0x00035e27
   35fb0:	00035e27 	.word	0x00035e27
   35fb4:	00035e27 	.word	0x00035e27
   35fb8:	00035e27 	.word	0x00035e27
   35fbc:	00035e27 	.word	0x00035e27
   35fc0:	00035e27 	.word	0x00035e27
   35fc4:	00035e27 	.word	0x00035e27
   35fc8:	00035e27 	.word	0x00035e27
   35fcc:	00035e27 	.word	0x00035e27
   35fd0:	00035e27 	.word	0x00035e27
   35fd4:	00035e27 	.word	0x00035e27
   35fd8:	00035e27 	.word	0x00035e27
   35fdc:	00035e27 	.word	0x00035e27
   35fe0:	00035e27 	.word	0x00035e27
   35fe4:	00035e27 	.word	0x00035e27
   35fe8:	00035e27 	.word	0x00035e27
   35fec:	00035e27 	.word	0x00035e27
   35ff0:	00035e27 	.word	0x00035e27
   35ff4:	00035e27 	.word	0x00035e27
   35ff8:	00035e27 	.word	0x00035e27
   35ffc:	00035e27 	.word	0x00035e27
   36000:	0003639d 	.word	0x0003639d
   36004:	00035e27 	.word	0x00035e27
   36008:	00035e27 	.word	0x00035e27
   3600c:	00036393 	.word	0x00036393
	switch (ocf) {
   36010:	2d01      	cmp	r5, #1
   36012:	f47f af08 	bne.w	35e26 <hci_cmd_handle+0x62>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   36016:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   36018:	4b48      	ldr	r3, [pc, #288]	; (3613c <hci_cmd_handle+0x378>)
   3601a:	6811      	ldr	r1, [r2, #0]
   3601c:	6852      	ldr	r2, [r2, #4]
   3601e:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   36020:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   36022:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   36024:	f016 fba8 	bl	4c778 <bt_hci_cmd_complete_create>
   36028:	2101      	movs	r1, #1
   3602a:	4604      	mov	r4, r0
   3602c:	3008      	adds	r0, #8
   3602e:	f019 fe7b 	bl	4fd28 <net_buf_simple_add>
	ccst->status = status;
   36032:	2300      	movs	r3, #0
   36034:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
   36036:	e6fd      	b.n	35e34 <hci_cmd_handle+0x70>
	switch (ocf) {
   36038:	2d7b      	cmp	r5, #123	; 0x7b
   3603a:	f000 8323 	beq.w	36684 <hci_cmd_handle+0x8c0>
   3603e:	2d7c      	cmp	r5, #124	; 0x7c
   36040:	f47f aef1 	bne.w	35e26 <hci_cmd_handle+0x62>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
   36044:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   36046:	881e      	ldrh	r6, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   36048:	8859      	ldrh	r1, [r3, #2]
   3604a:	b2b0      	uxth	r0, r6
   3604c:	f004 faf0 	bl	3a630 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   36050:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36052:	2103      	movs	r1, #3
   36054:	8838      	ldrh	r0, [r7, #0]
   36056:	f016 fb8f 	bl	4c778 <bt_hci_cmd_complete_create>
   3605a:	2103      	movs	r1, #3
   3605c:	4604      	mov	r4, r0
   3605e:	3008      	adds	r0, #8
   36060:	f019 fe62 	bl	4fd28 <net_buf_simple_add>
	rp->status = status;
   36064:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   36066:	f8a0 6001 	strh.w	r6, [r0, #1]
	if (err == -EINVAL) {
   3606a:	e6e3      	b.n	35e34 <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3606c:	2107      	movs	r1, #7
   3606e:	f016 fb83 	bl	4c778 <bt_hci_cmd_complete_create>
   36072:	2107      	movs	r1, #7
   36074:	4604      	mov	r4, r0
   36076:	3008      	adds	r0, #8
   36078:	f019 fe56 	bl	4fd28 <net_buf_simple_add>
	rp->status = 0x00;
   3607c:	4601      	mov	r1, r0
   3607e:	2000      	movs	r0, #0
   36080:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   36084:	f7ff fbb6 	bl	357f4 <ll_addr_read>
	if (err == -EINVAL) {
   36088:	e6d4      	b.n	35e34 <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3608a:	2109      	movs	r1, #9
   3608c:	f016 fb74 	bl	4c778 <bt_hci_cmd_complete_create>
   36090:	2109      	movs	r1, #9
   36092:	4604      	mov	r4, r0
   36094:	3008      	adds	r0, #8
   36096:	f019 fe47 	bl	4fd28 <net_buf_simple_add>
	rp->status = 0x00;
   3609a:	2100      	movs	r1, #0
   3609c:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   3609e:	2208      	movs	r2, #8
	rp->status = 0x00;
   360a0:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   360a4:	f015 fe6a 	bl	4bd7c <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   360a8:	2360      	movs	r3, #96	; 0x60
   360aa:	716b      	strb	r3, [r5, #5]
	if (err == -EINVAL) {
   360ac:	e6c2      	b.n	35e34 <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   360ae:	2141      	movs	r1, #65	; 0x41
   360b0:	f016 fb62 	bl	4c778 <bt_hci_cmd_complete_create>
   360b4:	2141      	movs	r1, #65	; 0x41
   360b6:	4604      	mov	r4, r0
   360b8:	3008      	adds	r0, #8
   360ba:	f019 fe35 	bl	4fd28 <net_buf_simple_add>
	rp->status = 0x00;
   360be:	2100      	movs	r1, #0
   360c0:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   360c2:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   360c4:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   360c8:	f015 fe58 	bl	4bd7c <memset>
	rp->commands[10] |= BIT(2);
   360cc:	7aeb      	ldrb	r3, [r5, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   360ce:	7bea      	ldrb	r2, [r5, #15]
	rp->commands[5] |= BIT(6) | BIT(7);
   360d0:	79a9      	ldrb	r1, [r5, #6]
	rp->commands[32] |= BIT(4) | BIT(5);
   360d2:	f8d5 0021 	ldr.w	r0, [r5, #33]	; 0x21
	rp->commands[10] |= BIT(2);
   360d6:	f043 0304 	orr.w	r3, r3, #4
   360da:	72eb      	strb	r3, [r5, #11]
	rp->commands[15] |= BIT(1);
   360dc:	7c2b      	ldrb	r3, [r5, #16]
   360de:	f043 0302 	orr.w	r3, r3, #2
   360e2:	742b      	strb	r3, [r5, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   360e4:	7eab      	ldrb	r3, [r5, #26]
   360e6:	f063 0308 	orn	r3, r3, #8
   360ea:	76ab      	strb	r3, [r5, #26]
	rp->commands[0] |= BIT(5);
   360ec:	786b      	ldrb	r3, [r5, #1]
	rp->commands[14] |= BIT(3) | BIT(5);
   360ee:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[0] |= BIT(5);
   360f2:	f043 0320 	orr.w	r3, r3, #32
	rp->commands[14] |= BIT(3) | BIT(5);
   360f6:	73ea      	strb	r2, [r5, #15]
	rp->commands[0] |= BIT(5);
   360f8:	706b      	strb	r3, [r5, #1]
	rp->commands[28] |= BIT(3);
   360fa:	7f6a      	ldrb	r2, [r5, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   360fc:	4b10      	ldr	r3, [pc, #64]	; (36140 <hci_cmd_handle+0x37c>)
	rp->commands[5] |= BIT(6) | BIT(7);
   360fe:	f061 013f 	orn	r1, r1, #63	; 0x3f
	rp->commands[28] |= BIT(1) | BIT(2);
   36102:	f042 020f 	orr.w	r2, r2, #15
	rp->commands[32] |= BIT(4) | BIT(5);
   36106:	4303      	orrs	r3, r0
	rp->commands[5] |= BIT(6) | BIT(7);
   36108:	71a9      	strb	r1, [r5, #6]
	rp->commands[22] |= BIT(2);
   3610a:	7de9      	ldrb	r1, [r5, #23]
	rp->commands[28] |= BIT(1) | BIT(2);
   3610c:	776a      	strb	r2, [r5, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   3610e:	f8c5 3021 	str.w	r3, [r5, #33]	; 0x21
	rp->commands[39] |= BIT(2);
   36112:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   36116:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
	rp->commands[22] |= BIT(2);
   3611a:	f041 0104 	orr.w	r1, r1, #4
   3611e:	75e9      	strb	r1, [r5, #23]
	rp->commands[39] |= BIT(2);
   36120:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[26] |= BIT(4) | BIT(5);
   36124:	21ff      	movs	r1, #255	; 0xff
	rp->commands[38] |= BIT(7);
   36126:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
   3612a:	76e9      	strb	r1, [r5, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   3612c:	7729      	strb	r1, [r5, #28]
	rp->commands[39] |= BIT(2);
   3612e:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   36132:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	if (err == -EINVAL) {
   36136:	e67d      	b.n	35e34 <hci_cmd_handle+0x70>
   36138:	200072b6 	.word	0x200072b6
   3613c:	20000190 	.word	0x20000190
   36140:	7ff9f030 	.word	0x7ff9f030
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36144:	2109      	movs	r1, #9
   36146:	f016 fb17 	bl	4c778 <bt_hci_cmd_complete_create>
   3614a:	2109      	movs	r1, #9
   3614c:	4604      	mov	r4, r0
   3614e:	3008      	adds	r0, #8
   36150:	f019 fdea 	bl	4fd28 <net_buf_simple_add>
	rp->status = 0x00;
   36154:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	rp->hci_revision = sys_cpu_to_le16(0);
   36158:	2300      	movs	r3, #0
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   3615a:	4ac9      	ldr	r2, [pc, #804]	; (36480 <hci_cmd_handle+0x6bc>)
	rp->status = 0x00;
   3615c:	8001      	strh	r1, [r0, #0]
	rp->lmp_version = LL_VERSION_NUMBER;
   3615e:	210c      	movs	r1, #12
	rp->hci_revision = sys_cpu_to_le16(0);
   36160:	7083      	strb	r3, [r0, #2]
   36162:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = LL_VERSION_NUMBER;
   36164:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   36166:	f8c0 2005 	str.w	r2, [r0, #5]
	if (err == -EINVAL) {
   3616a:	e663      	b.n	35e34 <hci_cmd_handle+0x70>
	handle = sys_le16_to_cpu(cmd->handle);
   3616c:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3616e:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   36170:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36172:	f016 fb01 	bl	4c778 <bt_hci_cmd_complete_create>
   36176:	2105      	movs	r1, #5
   36178:	4604      	mov	r4, r0
   3617a:	3008      	adds	r0, #8
   3617c:	f019 fdd4 	bl	4fd28 <net_buf_simple_add>
   36180:	4605      	mov	r5, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   36182:	1d2a      	adds	r2, r5, #4
	handle = sys_le16_to_cpu(cmd->handle);
   36184:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   36186:	1ce9      	adds	r1, r5, #3
   36188:	f004 f9aa 	bl	3a4e0 <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   3618c:	78eb      	ldrb	r3, [r5, #3]
   3618e:	792a      	ldrb	r2, [r5, #4]
	rp->status = status;
   36190:	7028      	strb	r0, [r5, #0]
   36192:	2b00      	cmp	r3, #0
   36194:	fa93 f3a3 	rbit	r3, r3
   36198:	fab3 f383 	clz	r3, r3
   3619c:	bf08      	it	eq
   3619e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   361a2:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   361a4:	70eb      	strb	r3, [r5, #3]
   361a6:	2a00      	cmp	r2, #0
   361a8:	fa92 f3a2 	rbit	r3, r2
   361ac:	fab3 f383 	clz	r3, r3
   361b0:	bf08      	it	eq
   361b2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   361b6:	3301      	adds	r3, #1
	rp->handle = sys_cpu_to_le16(handle);
   361b8:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   361bc:	712b      	strb	r3, [r5, #4]
	if (err == -EINVAL) {
   361be:	e639      	b.n	35e34 <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   361c0:	2109      	movs	r1, #9
   361c2:	f016 fad9 	bl	4c778 <bt_hci_cmd_complete_create>
   361c6:	2109      	movs	r1, #9
   361c8:	4604      	mov	r4, r0
   361ca:	3008      	adds	r0, #8
   361cc:	f019 fdac 	bl	4fd28 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   361d0:	ab0a      	add	r3, sp, #40	; 0x28
   361d2:	4605      	mov	r5, r0
   361d4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   361d8:	a908      	add	r1, sp, #32
   361da:	f10d 001e 	add.w	r0, sp, #30
   361de:	f004 f973 	bl	3a4c8 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   361e2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   361e6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   361ea:	f8a5 2001 	strh.w	r2, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   361ee:	f8a5 3003 	strh.w	r3, [r5, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   361f2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   361f6:	f8a5 3005 	strh.w	r3, [r5, #5]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   361fa:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   361fe:	f8a5 2007 	strh.w	r2, [r5, #7]
	rp->status = 0x00;
   36202:	2300      	movs	r3, #0
   36204:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
   36206:	e615      	b.n	35e34 <hci_cmd_handle+0x70>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   36208:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   3620a:	8818      	ldrh	r0, [r3, #0]
   3620c:	f009 f95a 	bl	3f4c4 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   36210:	8838      	ldrh	r0, [r7, #0]
   36212:	2101      	movs	r1, #1
   36214:	e706      	b.n	36024 <hci_cmd_handle+0x260>
	status = ll_rl_enable(cmd->enable);
   36216:	68a3      	ldr	r3, [r4, #8]
   36218:	7818      	ldrb	r0, [r3, #0]
   3621a:	f009 f93b 	bl	3f494 <ll_rl_enable>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   3621e:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   36220:	8838      	ldrh	r0, [r7, #0]
   36222:	2101      	movs	r1, #1
   36224:	f016 faa8 	bl	4c778 <bt_hci_cmd_complete_create>
   36228:	2101      	movs	r1, #1
   3622a:	4604      	mov	r4, r0
   3622c:	3008      	adds	r0, #8
   3622e:	f019 fd7b 	bl	4fd28 <net_buf_simple_add>
	ccst->status = status;
   36232:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
   36234:	e5fe      	b.n	35e34 <hci_cmd_handle+0x70>
	memcpy(dst, src, sizeof(*dst));
   36236:	2207      	movs	r2, #7
   36238:	68a1      	ldr	r1, [r4, #8]
   3623a:	a80a      	add	r0, sp, #40	; 0x28
   3623c:	f015 fd93 	bl	4bd66 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36240:	2107      	movs	r1, #7
   36242:	8838      	ldrh	r0, [r7, #0]
   36244:	f016 fa98 	bl	4c778 <bt_hci_cmd_complete_create>
   36248:	2107      	movs	r1, #7
   3624a:	4604      	mov	r4, r0
   3624c:	3008      	adds	r0, #8
   3624e:	f019 fd6b 	bl	4fd28 <net_buf_simple_add>
   36252:	4605      	mov	r5, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   36254:	1c41      	adds	r1, r0, #1
   36256:	a80a      	add	r0, sp, #40	; 0x28
   36258:	f009 f8ea 	bl	3f430 <ll_rl_lrpa_get>
   3625c:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   3625e:	e5e9      	b.n	35e34 <hci_cmd_handle+0x70>
   36260:	2207      	movs	r2, #7
   36262:	68a1      	ldr	r1, [r4, #8]
   36264:	a80a      	add	r0, sp, #40	; 0x28
   36266:	f015 fd7e 	bl	4bd66 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3626a:	2107      	movs	r1, #7
   3626c:	8838      	ldrh	r0, [r7, #0]
   3626e:	f016 fa83 	bl	4c778 <bt_hci_cmd_complete_create>
   36272:	2107      	movs	r1, #7
   36274:	4604      	mov	r4, r0
   36276:	3008      	adds	r0, #8
   36278:	f019 fd56 	bl	4fd28 <net_buf_simple_add>
   3627c:	4605      	mov	r5, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   3627e:	1c41      	adds	r1, r0, #1
   36280:	a80a      	add	r0, sp, #40	; 0x28
   36282:	f009 f89b 	bl	3f3bc <ll_rl_crpa_get>
   36286:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   36288:	e5d4      	b.n	35e34 <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3628a:	2102      	movs	r1, #2
   3628c:	f016 fa74 	bl	4c778 <bt_hci_cmd_complete_create>
   36290:	2102      	movs	r1, #2
   36292:	4604      	mov	r4, r0
   36294:	3008      	adds	r0, #8
   36296:	f019 fd47 	bl	4fd28 <net_buf_simple_add>
   3629a:	4605      	mov	r5, r0
	rp->rl_size = ll_rl_size_get();
   3629c:	f008 ff2c 	bl	3f0f8 <ll_rl_size_get>
	rp->status = 0x00;
   362a0:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   362a2:	7068      	strb	r0, [r5, #1]
	rp->status = 0x00;
   362a4:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
   362a6:	e5c5      	b.n	35e34 <hci_cmd_handle+0x70>
	status = ll_rl_clear();
   362a8:	f008 ff28 	bl	3f0fc <ll_rl_clear>
   362ac:	e7b7      	b.n	3621e <hci_cmd_handle+0x45a>
	status = ll_rl_remove(&cmd->peer_id_addr);
   362ae:	68a0      	ldr	r0, [r4, #8]
   362b0:	f008 ff68 	bl	3f184 <ll_rl_remove>
   362b4:	e7b3      	b.n	3621e <hci_cmd_handle+0x45a>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
   362b6:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   362b8:	f100 0217 	add.w	r2, r0, #23
   362bc:	1dc1      	adds	r1, r0, #7
   362be:	f009 fbcb 	bl	3fa58 <ll_rl_add>
   362c2:	e7ac      	b.n	3621e <hci_cmd_handle+0x45a>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
   362c4:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   362c6:	8859      	ldrh	r1, [r3, #2]
   362c8:	8818      	ldrh	r0, [r3, #0]
   362ca:	f004 f8f3 	bl	3a4b4 <ll_length_default_set>
   362ce:	e7a6      	b.n	3621e <hci_cmd_handle+0x45a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   362d0:	2105      	movs	r1, #5
   362d2:	f016 fa51 	bl	4c778 <bt_hci_cmd_complete_create>
   362d6:	2105      	movs	r1, #5
   362d8:	4604      	mov	r4, r0
   362da:	3008      	adds	r0, #8
   362dc:	f019 fd24 	bl	4fd28 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   362e0:	a90a      	add	r1, sp, #40	; 0x28
   362e2:	4605      	mov	r5, r0
   362e4:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   362e8:	f004 f8d8 	bl	3a49c <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   362ec:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   362f0:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   362f4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   362f8:	f8a5 2003 	strh.w	r2, [r5, #3]
	rp->status = 0x00;
   362fc:	2300      	movs	r3, #0
   362fe:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
   36300:	e598      	b.n	35e34 <hci_cmd_handle+0x70>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
   36302:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   36304:	881e      	ldrh	r6, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   36306:	889a      	ldrh	r2, [r3, #4]
   36308:	8859      	ldrh	r1, [r3, #2]
   3630a:	b2b0      	uxth	r0, r6
   3630c:	f004 f874 	bl	3a3f8 <ll_length_req_send>
   36310:	e69e      	b.n	36050 <hci_cmd_handle+0x28c>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
   36312:	68a2      	ldr	r2, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   36314:	8816      	ldrh	r6, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   36316:	7892      	ldrb	r2, [r2, #2]
   36318:	2300      	movs	r3, #0
   3631a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   3631e:	9300      	str	r3, [sp, #0]
   36320:	2102      	movs	r1, #2
   36322:	b2b0      	uxth	r0, r6
   36324:	f003 ff20 	bl	3a168 <ll_conn_update>
   36328:	e692      	b.n	36050 <hci_cmd_handle+0x28c>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
   3632a:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   3632c:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   3632e:	8816      	ldrh	r6, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   36330:	8853      	ldrh	r3, [r2, #2]
   36332:	9102      	str	r1, [sp, #8]
   36334:	88d1      	ldrh	r1, [r2, #6]
   36336:	9101      	str	r1, [sp, #4]
   36338:	8891      	ldrh	r1, [r2, #4]
   3633a:	9100      	str	r1, [sp, #0]
   3633c:	2200      	movs	r2, #0
   3633e:	2102      	movs	r1, #2
   36340:	b2b0      	uxth	r0, r6
   36342:	f003 ff11 	bl	3a168 <ll_conn_update>
   36346:	e683      	b.n	36050 <hci_cmd_handle+0x28c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36348:	2109      	movs	r1, #9
   3634a:	f016 fa15 	bl	4c778 <bt_hci_cmd_complete_create>
   3634e:	2109      	movs	r1, #9
   36350:	4604      	mov	r4, r0
   36352:	3008      	adds	r0, #8
   36354:	f019 fce8 	bl	4fd28 <net_buf_simple_add>
	rp->status = 0x00;
   36358:	494a      	ldr	r1, [pc, #296]	; (36484 <hci_cmd_handle+0x6c0>)
   3635a:	4a4b      	ldr	r2, [pc, #300]	; (36488 <hci_cmd_handle+0x6c4>)
   3635c:	6001      	str	r1, [r0, #0]
	dst[1] = val >> 8;
   3635e:	2300      	movs	r3, #0
   36360:	6042      	str	r2, [r0, #4]
   36362:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   36364:	e566      	b.n	35e34 <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36366:	2104      	movs	r1, #4
   36368:	f016 fa06 	bl	4c778 <bt_hci_cmd_complete_create>
   3636c:	2104      	movs	r1, #4
   3636e:	4604      	mov	r4, r0
   36370:	3008      	adds	r0, #8
   36372:	f019 fcd9 	bl	4fd28 <net_buf_simple_add>
	rp->status = 0x00;
   36376:	2300      	movs	r3, #0
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   36378:	211b      	movs	r1, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   3637a:	2203      	movs	r2, #3
	rp->status = 0x00;
   3637c:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   3637e:	7041      	strb	r1, [r0, #1]
   36380:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   36382:	70c2      	strb	r2, [r0, #3]
	if (err == -EINVAL) {
   36384:	e556      	b.n	35e34 <hci_cmd_handle+0x70>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   36386:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   36388:	4b40      	ldr	r3, [pc, #256]	; (3648c <hci_cmd_handle+0x6c8>)
   3638a:	6811      	ldr	r1, [r2, #0]
   3638c:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   3638e:	6019      	str	r1, [r3, #0]
   36390:	e646      	b.n	36020 <hci_cmd_handle+0x25c>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
   36392:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   36394:	79c1      	ldrb	r1, [r0, #7]
   36396:	f009 f89f 	bl	3f4d8 <ll_priv_mode_set>
   3639a:	e740      	b.n	3621e <hci_cmd_handle+0x45a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3639c:	2103      	movs	r1, #3
   3639e:	f016 f9eb 	bl	4c778 <bt_hci_cmd_complete_create>
   363a2:	2103      	movs	r1, #3
   363a4:	4604      	mov	r4, r0
   363a6:	3008      	adds	r0, #8
   363a8:	f019 fcbe 	bl	4fd28 <net_buf_simple_add>
	rp->status = 0x00;
   363ac:	4601      	mov	r1, r0
   363ae:	2300      	movs	r3, #0
   363b0:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   363b4:	3001      	adds	r0, #1
   363b6:	f7ff fa45 	bl	35844 <ll_tx_pwr_get>
	if (err == -EINVAL) {
   363ba:	e53b      	b.n	35e34 <hci_cmd_handle+0x70>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
   363bc:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   363be:	7895      	ldrb	r5, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
   363c0:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   363c2:	8816      	ldrh	r6, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   363c4:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   363c8:	07eb      	lsls	r3, r5, #31
		cmd->tx_phys |= mask_phys;
   363ca:	bf48      	it	mi
   363cc:	f041 0103 	orrmi.w	r1, r1, #3
		cmd->rx_phys |= mask_phys;
   363d0:	7913      	ldrb	r3, [r2, #4]
		cmd->tx_phys |= mask_phys;
   363d2:	bf48      	it	mi
   363d4:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   363d6:	07ad      	lsls	r5, r5, #30
		cmd->rx_phys |= mask_phys;
   363d8:	bf44      	itt	mi
   363da:	f043 0303 	orrmi.w	r3, r3, #3
   363de:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   363e0:	ea41 0203 	orr.w	r2, r1, r3
   363e4:	2a03      	cmp	r2, #3
   363e6:	f200 8198 	bhi.w	3671a <hci_cmd_handle+0x956>
	if (!(cmd->tx_phys & 0x07) ||
   363ea:	074d      	lsls	r5, r1, #29
   363ec:	f000 8192 	beq.w	36714 <hci_cmd_handle+0x950>
   363f0:	075a      	lsls	r2, r3, #29
   363f2:	f000 818f 	beq.w	36714 <hci_cmd_handle+0x950>
	if (phy_opts & 0x03) {
   363f6:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   363fa:	bf1c      	itt	ne
   363fc:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   36400:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   36404:	4630      	mov	r0, r6
   36406:	f004 f897 	bl	3a538 <ll_phy_req_send>
   3640a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   3640c:	8838      	ldrh	r0, [r7, #0]
   3640e:	e50b      	b.n	35e28 <hci_cmd_handle+0x64>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
   36410:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   36412:	781a      	ldrb	r2, [r3, #0]
   36414:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   36416:	bf4a      	itet	mi
   36418:	2007      	movmi	r0, #7
   3641a:	7858      	ldrbpl	r0, [r3, #1]
   3641c:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   3641e:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   36420:	bf4a      	itet	mi
   36422:	2107      	movmi	r1, #7
	status = ll_terminate_ind_send(handle, cmd->reason);
   36424:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   36426:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   36428:	f004 f87c 	bl	3a524 <ll_phy_default_set>
   3642c:	e6f7      	b.n	3621e <hci_cmd_handle+0x45a>
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
   3642e:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   36430:	7963      	ldrb	r3, [r4, #5]
   36432:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   36436:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   3643a:	7820      	ldrb	r0, [r4, #0]
   3643c:	79a4      	ldrb	r4, [r4, #6]
   3643e:	9400      	str	r4, [sp, #0]
   36440:	f7f0 fcae 	bl	26da0 <ll_scan_params_set>
   36444:	e6eb      	b.n	3621e <hci_cmd_handle+0x45a>
	status = ll_adv_enable(cmd->enable);
   36446:	68a3      	ldr	r3, [r4, #8]
   36448:	7818      	ldrb	r0, [r3, #0]
   3644a:	f7f0 fa21 	bl	26890 <ll_adv_enable>
   3644e:	e6e6      	b.n	3621e <hci_cmd_handle+0x45a>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   36450:	68a1      	ldr	r1, [r4, #8]
   36452:	f811 0b01 	ldrb.w	r0, [r1], #1
   36456:	f002 fdef 	bl	39038 <ll_adv_scan_rsp_set>
   3645a:	e6e0      	b.n	3621e <hci_cmd_handle+0x45a>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   3645c:	68a1      	ldr	r1, [r4, #8]
   3645e:	f811 0b01 	ldrb.w	r0, [r1], #1
   36462:	f002 fd9d 	bl	38fa0 <ll_adv_data_set>
   36466:	e6da      	b.n	3621e <hci_cmd_handle+0x45a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36468:	2102      	movs	r1, #2
   3646a:	f016 f985 	bl	4c778 <bt_hci_cmd_complete_create>
   3646e:	2102      	movs	r1, #2
   36470:	4604      	mov	r4, r0
   36472:	3008      	adds	r0, #8
   36474:	f019 fc58 	bl	4fd28 <net_buf_simple_add>
	rp->status = 0x00;
   36478:	2300      	movs	r3, #0
   3647a:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   3647c:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   3647e:	e4d9      	b.n	35e34 <hci_cmd_handle+0x70>
   36480:	ffff05f1 	.word	0xffff05f1
   36484:	3fffff00 	.word	0x3fffff00
   36488:	0003ffff 	.word	0x0003ffff
   3648c:	20000188 	.word	0x20000188
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
   36490:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   36492:	7ba5      	ldrb	r5, [r4, #14]
   36494:	79a3      	ldrb	r3, [r4, #6]
   36496:	7962      	ldrb	r2, [r4, #5]
   36498:	7921      	ldrb	r1, [r4, #4]
   3649a:	8820      	ldrh	r0, [r4, #0]
   3649c:	9502      	str	r5, [sp, #8]
   3649e:	7b65      	ldrb	r5, [r4, #13]
   364a0:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   364a2:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   364a4:	9400      	str	r4, [sp, #0]
   364a6:	f002 fb8d 	bl	38bc4 <ll_adv_params_set>
   364aa:	e6b8      	b.n	3621e <hci_cmd_handle+0x45a>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   364ac:	68a1      	ldr	r1, [r4, #8]
   364ae:	2001      	movs	r0, #1
   364b0:	f7ff f970 	bl	35794 <ll_addr_set>
   364b4:	e6b3      	b.n	3621e <hci_cmd_handle+0x45a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   364b6:	2109      	movs	r1, #9
   364b8:	f016 f95e 	bl	4c778 <bt_hci_cmd_complete_create>
   364bc:	2109      	movs	r1, #9
   364be:	4604      	mov	r4, r0
   364c0:	3008      	adds	r0, #8
   364c2:	f019 fc31 	bl	4fd28 <net_buf_simple_add>
	rp->status = 0x00;
   364c6:	2500      	movs	r5, #0
   364c8:	4606      	mov	r6, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   364ca:	2208      	movs	r2, #8
   364cc:	4629      	mov	r1, r5
	rp->status = 0x00;
   364ce:	f800 5b01 	strb.w	r5, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   364d2:	f015 fc53 	bl	4bd7c <memset>
	sys_put_le64(ll_feat_get(), rp->features);
   364d6:	f000 fe29 	bl	3712c <ll_feat_get>
	dst[0] = val;
   364da:	462b      	mov	r3, r5
   364dc:	f361 0307 	bfi	r3, r1, #0, #8
	dst[1] = val >> 8;
   364e0:	f3c1 2207 	ubfx	r2, r1, #8, #8
	dst[0] = val;
   364e4:	f362 230f 	bfi	r3, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   364e8:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
   364ea:	f361 4317 	bfi	r3, r1, #16, #8
	dst[1] = val >> 8;
   364ee:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
   364f0:	f361 631f 	bfi	r3, r1, #24, #8
   364f4:	f8c6 0001 	str.w	r0, [r6, #1]
   364f8:	f8c6 3005 	str.w	r3, [r6, #5]
	if (err == -EINVAL) {
   364fc:	e49a      	b.n	35e34 <hci_cmd_handle+0x70>
	handle = sys_le16_to_cpu(cmd->handle);
   364fe:	68a3      	ldr	r3, [r4, #8]
   36500:	881e      	ldrh	r6, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   36502:	2200      	movs	r2, #0
   36504:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   36506:	b2b0      	uxth	r0, r6
   36508:	f007 ff64 	bl	3e3d4 <ll_start_enc_req_send>
   3650c:	e5a0      	b.n	36050 <hci_cmd_handle+0x28c>
	handle = sys_le16_to_cpu(cmd->handle);
   3650e:	68a2      	ldr	r2, [r4, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   36510:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   36512:	f832 6b02 	ldrh.w	r6, [r2], #2
   36516:	e7f6      	b.n	36506 <hci_cmd_handle+0x742>
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
   36518:	68a2      	ldr	r2, [r4, #8]
				 (uint8_t *)&cmd->rand,
   3651a:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
   3651c:	f102 030c 	add.w	r3, r2, #12
   36520:	f831 0b02 	ldrh.w	r0, [r1], #2
   36524:	320a      	adds	r2, #10
   36526:	f008 f869 	bl	3e5fc <ll_enc_req_send>
   3652a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   3652c:	8838      	ldrh	r0, [r7, #0]
   3652e:	e47b      	b.n	35e28 <hci_cmd_handle+0x64>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36530:	2109      	movs	r1, #9
   36532:	f016 f921 	bl	4c778 <bt_hci_cmd_complete_create>
   36536:	2109      	movs	r1, #9
   36538:	4604      	mov	r4, r0
   3653a:	3008      	adds	r0, #8
   3653c:	f019 fbf4 	bl	4fd28 <net_buf_simple_add>
	rp->status = 0x00;
   36540:	2300      	movs	r3, #0
   36542:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   36546:	2108      	movs	r1, #8
   36548:	f009 ff86 	bl	40458 <lll_csrand_get>
	if (err == -EINVAL) {
   3654c:	e472      	b.n	35e34 <hci_cmd_handle+0x70>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   3654e:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   36550:	aa0a      	add	r2, sp, #40	; 0x28
   36552:	2300      	movs	r3, #0
   36554:	f100 0110 	add.w	r1, r0, #16
   36558:	f00c faf8 	bl	42b4c <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3655c:	8838      	ldrh	r0, [r7, #0]
   3655e:	2111      	movs	r1, #17
   36560:	f016 f90a 	bl	4c778 <bt_hci_cmd_complete_create>
   36564:	2111      	movs	r1, #17
   36566:	4604      	mov	r4, r0
   36568:	3008      	adds	r0, #8
   3656a:	f019 fbdd 	bl	4fd28 <net_buf_simple_add>
	rp->status = 0x00;
   3656e:	2300      	movs	r3, #0
   36570:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   36574:	2210      	movs	r2, #16
   36576:	a90a      	add	r1, sp, #40	; 0x28
   36578:	f015 fbf5 	bl	4bd66 <memcpy>
	if (err == -EINVAL) {
   3657c:	e45a      	b.n	35e34 <hci_cmd_handle+0x70>
	handle = sys_le16_to_cpu(cmd->handle);
   3657e:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   36580:	8818      	ldrh	r0, [r3, #0]
   36582:	f003 fee9 	bl	3a358 <ll_feature_req_send>
   36586:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   36588:	8838      	ldrh	r0, [r7, #0]
   3658a:	e44d      	b.n	35e28 <hci_cmd_handle+0x64>
	handle = sys_le16_to_cpu(cmd->handle);
   3658c:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3658e:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   36590:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36592:	f016 f8f1 	bl	4c778 <bt_hci_cmd_complete_create>
   36596:	2108      	movs	r1, #8
   36598:	4604      	mov	r4, r0
   3659a:	4408      	add	r0, r1
   3659c:	f019 fbc4 	bl	4fd28 <net_buf_simple_add>
   365a0:	4605      	mov	r5, r0
	status = ll_chm_get(handle, rp->ch_map);
   365a2:	1ce9      	adds	r1, r5, #3
	handle = sys_le16_to_cpu(cmd->handle);
   365a4:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   365a6:	f003 fe73 	bl	3a290 <ll_chm_get>
	rp->handle = sys_le16_to_cpu(handle);
   365aa:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->status = status;
   365ae:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   365b0:	e440      	b.n	35e34 <hci_cmd_handle+0x70>
	status = ll_chm_update(&cmd->ch_map[0]);
   365b2:	68a0      	ldr	r0, [r4, #8]
   365b4:	f008 faee 	bl	3eb94 <ll_chm_update>
   365b8:	e631      	b.n	3621e <hci_cmd_handle+0x45a>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
   365ba:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   365bc:	8911      	ldrh	r1, [r2, #8]
   365be:	8853      	ldrh	r3, [r2, #2]
   365c0:	8810      	ldrh	r0, [r2, #0]
   365c2:	9102      	str	r1, [sp, #8]
   365c4:	88d1      	ldrh	r1, [r2, #6]
   365c6:	9101      	str	r1, [sp, #4]
   365c8:	8891      	ldrh	r1, [r2, #4]
   365ca:	9100      	str	r1, [sp, #0]
   365cc:	2200      	movs	r2, #0
   365ce:	4611      	mov	r1, r2
   365d0:	f003 fdca 	bl	3a168 <ll_conn_update>
   365d4:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   365d6:	8838      	ldrh	r0, [r7, #0]
   365d8:	e426      	b.n	35e28 <hci_cmd_handle+0x64>
	status = ll_fal_remove(&cmd->addr);
   365da:	68a0      	ldr	r0, [r4, #8]
   365dc:	f008 fcf8 	bl	3efd0 <ll_fal_remove>
   365e0:	e61d      	b.n	3621e <hci_cmd_handle+0x45a>
	status = ll_fal_add(&cmd->addr);
   365e2:	68a0      	ldr	r0, [r4, #8]
   365e4:	f008 fc66 	bl	3eeb4 <ll_fal_add>
   365e8:	e619      	b.n	3621e <hci_cmd_handle+0x45a>
	status = ll_fal_clear();
   365ea:	f008 fc39 	bl	3ee60 <ll_fal_clear>
   365ee:	e616      	b.n	3621e <hci_cmd_handle+0x45a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   365f0:	2102      	movs	r1, #2
   365f2:	f016 f8c1 	bl	4c778 <bt_hci_cmd_complete_create>
   365f6:	2102      	movs	r1, #2
   365f8:	4604      	mov	r4, r0
   365fa:	3008      	adds	r0, #8
   365fc:	f019 fb94 	bl	4fd28 <net_buf_simple_add>
	rp->status = 0x00;
   36600:	2300      	movs	r3, #0
   36602:	7003      	strb	r3, [r0, #0]
   36604:	4605      	mov	r5, r0
	rp->fal_size = ll_fal_size_get();
   36606:	f008 fc29 	bl	3ee5c <ll_fal_size_get>
   3660a:	7068      	strb	r0, [r5, #1]
	if (err == -EINVAL) {
   3660c:	e412      	b.n	35e34 <hci_cmd_handle+0x70>
	status = ll_connect_disable(node_rx);
   3660e:	4630      	mov	r0, r6
   36610:	f007 ffa6 	bl	3e560 <ll_connect_disable>
   36614:	e603      	b.n	3621e <hci_cmd_handle+0x45a>
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
   36616:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
   36618:	f8b4 5013 	ldrh.w	r5, [r4, #19]
   3661c:	8861      	ldrh	r1, [r4, #2]
   3661e:	7963      	ldrb	r3, [r4, #5]
   36620:	7922      	ldrb	r2, [r4, #4]
   36622:	8820      	ldrh	r0, [r4, #0]
   36624:	9504      	str	r5, [sp, #16]
   36626:	f8b4 5011 	ldrh.w	r5, [r4, #17]
   3662a:	9503      	str	r5, [sp, #12]
   3662c:	f8b4 500f 	ldrh.w	r5, [r4, #15]
   36630:	9502      	str	r5, [sp, #8]
   36632:	7b25      	ldrb	r5, [r4, #12]
   36634:	9501      	str	r5, [sp, #4]
				      &cmd->peer_addr.a.val[0],
   36636:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
   36638:	9400      	str	r4, [sp, #0]
   3663a:	f7f1 fadd 	bl	27bf8 <ll_create_connection>
   3663e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   36640:	8838      	ldrh	r0, [r7, #0]
   36642:	f7ff bbf1 	b.w	35e28 <hci_cmd_handle+0x64>
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
   36646:	68a3      	ldr	r3, [r4, #8]
	if (cmd->enable && cmd->filter_dup) {
   36648:	7818      	ldrb	r0, [r3, #0]
   3664a:	2800      	cmp	r0, #0
   3664c:	d05f      	beq.n	3670e <hci_cmd_handle+0x94a>
   3664e:	785b      	ldrb	r3, [r3, #1]
   36650:	2b00      	cmp	r3, #0
   36652:	d05c      	beq.n	3670e <hci_cmd_handle+0x94a>
			dup_curr = 0U;
   36654:	4a32      	ldr	r2, [pc, #200]	; (36720 <hci_cmd_handle+0x95c>)
   36656:	2300      	movs	r3, #0
   36658:	6013      	str	r3, [r2, #0]
   3665a:	4a32      	ldr	r2, [pc, #200]	; (36724 <hci_cmd_handle+0x960>)
   3665c:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
   3665e:	f002 fd65 	bl	3912c <ll_scan_enable>
		status = BT_HCI_ERR_SUCCESS;
   36662:	280c      	cmp	r0, #12
	status = ll_scan_enable(cmd->enable);
   36664:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   36666:	f04f 0101 	mov.w	r1, #1
   3666a:	8838      	ldrh	r0, [r7, #0]
		status = BT_HCI_ERR_SUCCESS;
   3666c:	bf08      	it	eq
   3666e:	2500      	moveq	r5, #0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   36670:	e5d8      	b.n	36224 <hci_cmd_handle+0x460>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
   36672:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   36674:	7899      	ldrb	r1, [r3, #2]
   36676:	8818      	ldrh	r0, [r3, #0]
   36678:	f003 fe2e 	bl	3a2d8 <ll_terminate_ind_send>
   3667c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   3667e:	8838      	ldrh	r0, [r7, #0]
   36680:	f7ff bbd2 	b.w	35e28 <hci_cmd_handle+0x64>
	handle = sys_le16_to_cpu(cmd->handle);
   36684:	68a3      	ldr	r3, [r4, #8]
   36686:	881e      	ldrh	r6, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   36688:	a90a      	add	r1, sp, #40	; 0x28
   3668a:	b2b0      	uxth	r0, r6
   3668c:	f003 ffaa 	bl	3a5e4 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36690:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   36692:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36694:	8838      	ldrh	r0, [r7, #0]
   36696:	f016 f86f 	bl	4c778 <bt_hci_cmd_complete_create>
   3669a:	2105      	movs	r1, #5
   3669c:	4604      	mov	r4, r0
   3669e:	3008      	adds	r0, #8
   366a0:	f019 fb42 	bl	4fd28 <net_buf_simple_add>
	rp->status = status;
   366a4:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   366a6:	f8a0 6001 	strh.w	r6, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   366aa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   366ae:	f8a0 3003 	strh.w	r3, [r0, #3]
	if (err == -EINVAL) {
   366b2:	f7ff bbbf 	b.w	35e34 <hci_cmd_handle+0x70>
	dup_count = DUP_FILTER_DISABLED;
   366b6:	481b      	ldr	r0, [pc, #108]	; (36724 <hci_cmd_handle+0x960>)
	event_mask = DEFAULT_EVENT_MASK;
   366b8:	491b      	ldr	r1, [pc, #108]	; (36728 <hci_cmd_handle+0x964>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   366ba:	4a1c      	ldr	r2, [pc, #112]	; (3672c <hci_cmd_handle+0x968>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   366bc:	4b1c      	ldr	r3, [pc, #112]	; (36730 <hci_cmd_handle+0x96c>)
	dup_count = DUP_FILTER_DISABLED;
   366be:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   366c2:	6004      	str	r4, [r0, #0]
	event_mask = DEFAULT_EVENT_MASK;
   366c4:	f641 75ff 	movw	r5, #8191	; 0x1fff
   366c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   366cc:	e9c1 4500 	strd	r4, r5, [r1]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   366d0:	2000      	movs	r0, #0
   366d2:	2100      	movs	r1, #0
   366d4:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   366d8:	201f      	movs	r0, #31
   366da:	2100      	movs	r1, #0
   366dc:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   366e0:	f001 fe98 	bl	38414 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   366e4:	2101      	movs	r1, #1
   366e6:	8838      	ldrh	r0, [r7, #0]
   366e8:	f016 f846 	bl	4c778 <bt_hci_cmd_complete_create>
   366ec:	2101      	movs	r1, #1
   366ee:	4604      	mov	r4, r0
   366f0:	3008      	adds	r0, #8
   366f2:	f019 fb19 	bl	4fd28 <net_buf_simple_add>
	conn_count = 0U;
   366f6:	4a0f      	ldr	r2, [pc, #60]	; (36734 <hci_cmd_handle+0x970>)
	ccst->status = status;
   366f8:	2300      	movs	r3, #0
   366fa:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   366fc:	6013      	str	r3, [r2, #0]
	if (err == -EINVAL) {
   366fe:	f7ff bb99 	b.w	35e34 <hci_cmd_handle+0x70>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   36702:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   36704:	4b09      	ldr	r3, [pc, #36]	; (3672c <hci_cmd_handle+0x968>)
   36706:	e640      	b.n	3638a <hci_cmd_handle+0x5c6>
	return evt;
   36708:	9c09      	ldr	r4, [sp, #36]	; 0x24
   3670a:	f7ff bb93 	b.w	35e34 <hci_cmd_handle+0x70>
		dup_count = DUP_FILTER_DISABLED;
   3670e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   36712:	e7a2      	b.n	3665a <hci_cmd_handle+0x896>
	return bt_hci_cmd_status_create(_opcode, status);
   36714:	2112      	movs	r1, #18
   36716:	f7ff bb87 	b.w	35e28 <hci_cmd_handle+0x64>
   3671a:	2111      	movs	r1, #17
   3671c:	f7ff bb84 	b.w	35e28 <hci_cmd_handle+0x64>
   36720:	20004b54 	.word	0x20004b54
   36724:	20004b58 	.word	0x20004b58
   36728:	20000190 	.word	0x20000190
   3672c:	20003360 	.word	0x20003360
   36730:	20000188 	.word	0x20000188
   36734:	20004b50 	.word	0x20004b50

00036738 <hci_acl_handle>:
{
   36738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   3673c:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   3673e:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   36740:	2b03      	cmp	r3, #3
	*evt = NULL;
   36742:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   36744:	d92e      	bls.n	367a4 <hci_acl_handle+0x6c>
	return net_buf_simple_pull_mem(&buf->b, len);
   36746:	4605      	mov	r5, r0
   36748:	4688      	mov	r8, r1
   3674a:	3008      	adds	r0, #8
   3674c:	2104      	movs	r1, #4
   3674e:	f019 fb1c 	bl	4fd8a <net_buf_simple_pull_mem>
	if (buf->len < len) {
   36752:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   36754:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   36756:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   3675a:	42bb      	cmp	r3, r7
   3675c:	d322      	bcc.n	367a4 <hci_acl_handle+0x6c>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
   3675e:	2f1b      	cmp	r7, #27
   36760:	d820      	bhi.n	367a4 <hci_acl_handle+0x6c>
	node_tx = ll_tx_mem_acquire();
   36762:	f003 fca7 	bl	3a0b4 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   36766:	ea4f 3619 	mov.w	r6, r9, lsr #12
   3676a:	4633      	mov	r3, r6
	if (!node_tx) {
   3676c:	4604      	mov	r4, r0
   3676e:	b1f8      	cbz	r0, 367b0 <hci_acl_handle+0x78>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   36770:	089b      	lsrs	r3, r3, #2
   36772:	d117      	bne.n	367a4 <hci_acl_handle+0x6c>
	switch (bt_acl_flags_pb(flags)) {
   36774:	b1d6      	cbz	r6, 367ac <hci_acl_handle+0x74>
   36776:	2e01      	cmp	r6, #1
   36778:	d114      	bne.n	367a4 <hci_acl_handle+0x6c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   3677a:	7923      	ldrb	r3, [r4, #4]
	pdu_data->len = len;
   3677c:	7167      	strb	r7, [r4, #5]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   3677e:	f366 0301 	bfi	r3, r6, #0, #2
	memcpy(&pdu_data->lldata[0], buf->data, len);
   36782:	68a9      	ldr	r1, [r5, #8]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   36784:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   36786:	463a      	mov	r2, r7
   36788:	1de0      	adds	r0, r4, #7
   3678a:	f015 faec 	bl	4bd66 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   3678e:	4621      	mov	r1, r4
   36790:	f3c9 000b 	ubfx	r0, r9, #0, #12
   36794:	f003 fc9a 	bl	3a0cc <ll_tx_mem_enqueue>
   36798:	b908      	cbnz	r0, 3679e <hci_acl_handle+0x66>
}
   3679a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ll_tx_mem_release(node_tx);
   3679e:	4620      	mov	r0, r4
   367a0:	f003 fc8e 	bl	3a0c0 <ll_tx_mem_release>
	switch (bt_acl_flags_pb(flags)) {
   367a4:	f06f 0015 	mvn.w	r0, #21
}
   367a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (bt_acl_flags_pb(flags)) {
   367ac:	2602      	movs	r6, #2
   367ae:	e7e4      	b.n	3677a <hci_acl_handle+0x42>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   367b0:	4b0f      	ldr	r3, [pc, #60]	; (367f0 <hci_acl_handle+0xb8>)
   367b2:	681b      	ldr	r3, [r3, #0]
   367b4:	019b      	lsls	r3, r3, #6
   367b6:	d517      	bpl.n	367e8 <hci_acl_handle+0xb0>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   367b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   367bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   367c0:	2001      	movs	r0, #1
   367c2:	f7f7 f891 	bl	2d8e8 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   367c6:	2102      	movs	r1, #2
   367c8:	f8c8 0000 	str.w	r0, [r8]
   367cc:	3008      	adds	r0, #8
   367ce:	f019 faab 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = evt;
   367d2:	f44f 738d 	mov.w	r3, #282	; 0x11a
   367d6:	8003      	strh	r3, [r0, #0]
   367d8:	f8d8 0000 	ldr.w	r0, [r8]
   367dc:	2101      	movs	r1, #1
   367de:	3008      	adds	r0, #8
   367e0:	f019 faa2 	bl	4fd28 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   367e4:	2301      	movs	r3, #1
   367e6:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
   367e8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   367ec:	e7d5      	b.n	3679a <hci_acl_handle+0x62>
   367ee:	bf00      	nop
   367f0:	20000190 	.word	0x20000190

000367f4 <hci_disconn_complete_encode>:
{
   367f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   367f6:	4b0e      	ldr	r3, [pc, #56]	; (36830 <hci_disconn_complete_encode+0x3c>)
   367f8:	681b      	ldr	r3, [r3, #0]
   367fa:	06db      	lsls	r3, r3, #27
   367fc:	d400      	bmi.n	36800 <hci_disconn_complete_encode+0xc>
}
   367fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36800:	f102 0408 	add.w	r4, r2, #8
   36804:	4606      	mov	r6, r0
   36806:	460d      	mov	r5, r1
   36808:	4620      	mov	r0, r4
   3680a:	2102      	movs	r1, #2
   3680c:	f019 fa8c 	bl	4fd28 <net_buf_simple_add>
   36810:	4603      	mov	r3, r0
	hdr->evt = evt;
   36812:	f240 4205 	movw	r2, #1029	; 0x405
   36816:	801a      	strh	r2, [r3, #0]
   36818:	4620      	mov	r0, r4
   3681a:	2104      	movs	r1, #4
   3681c:	f019 fa84 	bl	4fd28 <net_buf_simple_add>
	ep->status = 0x00;
   36820:	2700      	movs	r7, #0
   36822:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   36824:	f8a0 5001 	strh.w	r5, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   36828:	7832      	ldrb	r2, [r6, #0]
   3682a:	70c2      	strb	r2, [r0, #3]
}
   3682c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3682e:	bf00      	nop
   36830:	20000190 	.word	0x20000190

00036834 <hci_disconn_complete_process>:
	conn_count--;
   36834:	4a02      	ldr	r2, [pc, #8]	; (36840 <hci_disconn_complete_process+0xc>)
   36836:	6813      	ldr	r3, [r2, #0]
   36838:	3b01      	subs	r3, #1
   3683a:	6013      	str	r3, [r2, #0]
}
   3683c:	4770      	bx	lr
   3683e:	bf00      	nop
   36840:	20004b50 	.word	0x20004b50

00036844 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   36844:	7f03      	ldrb	r3, [r0, #28]
   36846:	f003 0303 	and.w	r3, r3, #3
   3684a:	3b01      	subs	r3, #1
   3684c:	2b01      	cmp	r3, #1
{
   3684e:	b570      	push	{r4, r5, r6, lr}
	handle = node_rx->hdr.handle;
   36850:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
   36852:	d90d      	bls.n	36870 <hci_acl_encode+0x2c>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   36854:	4a15      	ldr	r2, [pc, #84]	; (368ac <hci_acl_encode+0x68>)
   36856:	4916      	ldr	r1, [pc, #88]	; (368b0 <hci_acl_encode+0x6c>)
   36858:	4816      	ldr	r0, [pc, #88]	; (368b4 <hci_acl_encode+0x70>)
   3685a:	f641 53bb 	movw	r3, #7611	; 0x1dbb
   3685e:	f013 f953 	bl	49b08 <printk>
   36862:	4040      	eors	r0, r0
   36864:	f380 8811 	msr	BASEPRI, r0
   36868:	f04f 0003 	mov.w	r0, #3
   3686c:	df02      	svc	2
		break;
	}
}
   3686e:	bd70      	pop	{r4, r5, r6, pc}
   36870:	4604      	mov	r4, r0
   36872:	f101 0508 	add.w	r5, r1, #8
   36876:	4628      	mov	r0, r5
   36878:	2104      	movs	r1, #4
   3687a:	f019 fa55 	bl	4fd28 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   3687e:	7f23      	ldrb	r3, [r4, #28]
   36880:	f003 0303 	and.w	r3, r3, #3
   36884:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   36886:	bf0c      	ite	eq
   36888:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   3688c:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   36890:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   36892:	7f61      	ldrb	r1, [r4, #29]
   36894:	8041      	strh	r1, [r0, #2]
   36896:	4628      	mov	r0, r5
   36898:	f019 fa46 	bl	4fd28 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   3689c:	7f62      	ldrb	r2, [r4, #29]
   3689e:	f104 011f 	add.w	r1, r4, #31
}
   368a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   368a6:	f015 ba5e 	b.w	4bd66 <memcpy>
   368aa:	bf00      	nop
   368ac:	00052c68 	.word	0x00052c68
   368b0:	00052c1c 	.word	0x00052c1c
   368b4:	00052bbc 	.word	0x00052bbc

000368b8 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   368b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   368bc:	f890 c004 	ldrb.w	ip, [r0, #4]
	handle = node_rx->hdr.handle;
   368c0:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   368c2:	f1bc 0f03 	cmp.w	ip, #3
{
   368c6:	b089      	sub	sp, #36	; 0x24
   368c8:	4604      	mov	r4, r0
   368ca:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   368cc:	f100 071c 	add.w	r7, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   368d0:	d01e      	beq.n	36910 <hci_evt_encode+0x58>
	switch (node_rx->hdr.type) {
   368d2:	f1ac 0c05 	sub.w	ip, ip, #5
   368d6:	f1bc 0f17 	cmp.w	ip, #23
   368da:	d833      	bhi.n	36944 <hci_evt_encode+0x8c>
   368dc:	e8df f01c 	tbh	[pc, ip, lsl #1]
   368e0:	00320042 	.word	0x00320042
   368e4:	00320032 	.word	0x00320032
   368e8:	00320032 	.word	0x00320032
   368ec:	00320032 	.word	0x00320032
   368f0:	00320032 	.word	0x00320032
   368f4:	00320032 	.word	0x00320032
   368f8:	00320032 	.word	0x00320032
   368fc:	00320032 	.word	0x00320032
   36900:	00b90032 	.word	0x00b90032
   36904:	011b0113 	.word	0x011b0113
   36908:	0161014a 	.word	0x0161014a
   3690c:	01a40174 	.word	0x01a40174
	switch (pdu_data->llctrl.opcode) {
   36910:	7fc3      	ldrb	r3, [r0, #31]
   36912:	3b03      	subs	r3, #3
   36914:	2b12      	cmp	r3, #18
   36916:	f200 81be 	bhi.w	36c96 <hci_evt_encode+0x3de>
   3691a:	e8df f013 	tbh	[pc, r3, lsl #1]
   3691e:	023a      	.short	0x023a
   36920:	01bc01bc 	.word	0x01bc01bc
   36924:	02810268 	.word	0x02810268
   36928:	01f001bc 	.word	0x01f001bc
   3692c:	01bc01bc 	.word	0x01bc01bc
   36930:	01f901bc 	.word	0x01f901bc
   36934:	021401bc 	.word	0x021401bc
   36938:	002001bc 	.word	0x002001bc
   3693c:	01bc01bc 	.word	0x01bc01bc
   36940:	01ca01ca 	.word	0x01ca01ca
		LL_ASSERT(0);
   36944:	4ab0      	ldr	r2, [pc, #704]	; (36c08 <hci_evt_encode+0x350>)
   36946:	49b1      	ldr	r1, [pc, #708]	; (36c0c <hci_evt_encode+0x354>)
   36948:	48b1      	ldr	r0, [pc, #708]	; (36c10 <hci_evt_encode+0x358>)
   3694a:	f641 43af 	movw	r3, #7343	; 0x1caf
   3694e:	f013 f8db 	bl	49b08 <printk>
   36952:	4040      	eors	r0, r0
   36954:	f380 8811 	msr	BASEPRI, r0
   36958:	f04f 0003 	mov.w	r0, #3
   3695c:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   3695e:	b009      	add	sp, #36	; 0x24
   36960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   36964:	4aab      	ldr	r2, [pc, #684]	; (36c14 <hci_evt_encode+0x35c>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   36966:	7e03      	ldrb	r3, [r0, #24]
	direct_report = node_rx->hdr.rx_ftr.direct;
   36968:	7ea6      	ldrb	r6, [r4, #26]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
   3696a:	f894 8019 	ldrb.w	r8, [r4, #25]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   3696e:	e892 0003 	ldmia.w	r2, {r0, r1}
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   36972:	425b      	negs	r3, r3
   36974:	b25f      	sxtb	r7, r3
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   36976:	0c0b      	lsrs	r3, r1, #16
   36978:	f88d 301e 	strb.w	r3, [sp, #30]
	if (adv->tx_addr) {
   3697c:	7f23      	ldrb	r3, [r4, #28]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   3697e:	f8ad 101c 	strh.w	r1, [sp, #28]
	if (adv->tx_addr) {
   36982:	0659      	lsls	r1, r3, #25
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   36984:	9006      	str	r0, [sp, #24]
	direct_report = node_rx->hdr.rx_ftr.direct;
   36986:	f3c6 0640 	ubfx	r6, r6, #1, #1
	if (adv->tx_addr) {
   3698a:	f100 826a 	bmi.w	36e62 <hci_evt_encode+0x5aa>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3698e:	4ba2      	ldr	r3, [pc, #648]	; (36c18 <hci_evt_encode+0x360>)
   36990:	685b      	ldr	r3, [r3, #4]
   36992:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	if (direct_report) {
   36996:	2e00      	cmp	r6, #0
   36998:	f040 829e 	bne.w	36ed8 <hci_evt_encode+0x620>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3699c:	2b00      	cmp	r3, #0
   3699e:	d0de      	beq.n	3695e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   369a0:	4b9e      	ldr	r3, [pc, #632]	; (36c1c <hci_evt_encode+0x364>)
   369a2:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   369a4:	079b      	lsls	r3, r3, #30
   369a6:	d5da      	bpl.n	3695e <hci_evt_encode+0xa6>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   369a8:	7f20      	ldrb	r0, [r4, #28]
   369aa:	f104 091e 	add.w	r9, r4, #30
   369ae:	f3c0 1180 	ubfx	r1, r0, #6, #1
   369b2:	464a      	mov	r2, r9
   369b4:	f000 000f 	and.w	r0, r0, #15
   369b8:	f7ff f8c2 	bl	35b40 <dup_found.constprop.0>
	if (dup_scan &&
   369bc:	2800      	cmp	r0, #0
   369be:	d1ce      	bne.n	3695e <hci_evt_encode+0xa6>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   369c0:	7f23      	ldrb	r3, [r4, #28]
   369c2:	f003 030f 	and.w	r3, r3, #15
   369c6:	2b01      	cmp	r3, #1
   369c8:	f000 833a 	beq.w	37040 <hci_evt_encode+0x788>
		data_len = (adv->len - BDADDR_SIZE);
   369cc:	7f62      	ldrb	r2, [r4, #29]
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   369ce:	1d93      	adds	r3, r2, #6
		data_len = (adv->len - BDADDR_SIZE);
   369d0:	f1a2 0a06 	sub.w	sl, r2, #6
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   369d4:	3205      	adds	r2, #5
		data_len = (adv->len - BDADDR_SIZE);
   369d6:	fa5f fa8a 	uxtb.w	sl, sl
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   369da:	fa5f fb83 	uxtb.w	fp, r3
	return net_buf_add(buf, melen);
   369de:	b2d3      	uxtb	r3, r2
   369e0:	9305      	str	r3, [sp, #20]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   369e2:	4656      	mov	r6, sl
   369e4:	3508      	adds	r5, #8
   369e6:	2102      	movs	r1, #2
   369e8:	4628      	mov	r0, r5
   369ea:	f019 f99d 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = evt;
   369ee:	233e      	movs	r3, #62	; 0x3e
   369f0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   369f2:	f880 b001 	strb.w	fp, [r0, #1]
   369f6:	2101      	movs	r1, #1
   369f8:	4628      	mov	r0, r5
   369fa:	f019 f995 	bl	4fd28 <net_buf_simple_add>
   369fe:	4603      	mov	r3, r0
	me->subevent = subevt;
   36a00:	2202      	movs	r2, #2
   36a02:	701a      	strb	r2, [r3, #0]
   36a04:	9905      	ldr	r1, [sp, #20]
   36a06:	4628      	mov	r0, r5
   36a08:	f019 f98e 	bl	4fd28 <net_buf_simple_add>
	sep->num_reports = 1U;
   36a0c:	2301      	movs	r3, #1
   36a0e:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   36a10:	7f23      	ldrb	r3, [r4, #28]
   36a12:	f003 030f 	and.w	r3, r3, #15
   36a16:	3320      	adds	r3, #32
   36a18:	446b      	add	r3, sp
   36a1a:	4605      	mov	r5, r0
   36a1c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   36a20:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
   36a22:	f008 fb69 	bl	3f0f8 <ll_rl_size_get>
   36a26:	4580      	cmp	r8, r0
   36a28:	f080 8300 	bcs.w	3702c <hci_evt_encode+0x774>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
   36a2c:	4640      	mov	r0, r8
   36a2e:	1cea      	adds	r2, r5, #3
   36a30:	1ca9      	adds	r1, r5, #2
   36a32:	f008 fb1b 	bl	3f06c <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
   36a36:	78ab      	ldrb	r3, [r5, #2]
   36a38:	3302      	adds	r3, #2
   36a3a:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
   36a3c:	f885 a009 	strb.w	sl, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   36a40:	350a      	adds	r5, #10
   36a42:	f104 0124 	add.w	r1, r4, #36	; 0x24
   36a46:	4632      	mov	r2, r6
   36a48:	4628      	mov	r0, r5
   36a4a:	f015 f98c 	bl	4bd66 <memcpy>
	*prssi = rssi;
   36a4e:	55af      	strb	r7, [r5, r6]
   36a50:	e785      	b.n	3695e <hci_evt_encode+0xa6>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   36a52:	07f8      	lsls	r0, r7, #31
   36a54:	f100 81f7 	bmi.w	36e46 <hci_evt_encode+0x58e>
	status = cc->status;
   36a58:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
   36a5a:	2f00      	cmp	r7, #0
   36a5c:	f000 81ea 	beq.w	36e34 <hci_evt_encode+0x57c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36a60:	4b6d      	ldr	r3, [pc, #436]	; (36c18 <hci_evt_encode+0x360>)
   36a62:	685b      	ldr	r3, [r3, #4]
   36a64:	0099      	lsls	r1, r3, #2
   36a66:	f57f af7a 	bpl.w	3695e <hci_evt_encode+0xa6>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   36a6a:	4b6c      	ldr	r3, [pc, #432]	; (36c1c <hci_evt_encode+0x364>)
   36a6c:	681b      	ldr	r3, [r3, #0]
   36a6e:	f240 2201 	movw	r2, #513	; 0x201
   36a72:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   36a74:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   36a78:	f43f af71 	beq.w	3695e <hci_evt_encode+0xa6>
   36a7c:	3508      	adds	r5, #8
	if (!status) {
   36a7e:	2f00      	cmp	r7, #0
   36a80:	f040 8201 	bne.w	36e86 <hci_evt_encode+0x5ce>
		conn_count++;
   36a84:	4a66      	ldr	r2, [pc, #408]	; (36c20 <hci_evt_encode+0x368>)
   36a86:	6813      	ldr	r3, [r2, #0]
   36a88:	3301      	adds	r3, #1
   36a8a:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   36a8c:	f1b8 0f00 	cmp.w	r8, #0
   36a90:	f000 8279 	beq.w	36f86 <hci_evt_encode+0x6ce>
   36a94:	2102      	movs	r1, #2
   36a96:	4628      	mov	r0, r5
   36a98:	f019 f946 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = evt;
   36a9c:	f641 733e 	movw	r3, #7998	; 0x1f3e
   36aa0:	8003      	strh	r3, [r0, #0]
   36aa2:	2101      	movs	r1, #1
   36aa4:	4628      	mov	r0, r5
   36aa6:	f019 f93f 	bl	4fd28 <net_buf_simple_add>
   36aaa:	4603      	mov	r3, r0
	me->subevent = subevt;
   36aac:	220a      	movs	r2, #10
   36aae:	701a      	strb	r2, [r3, #0]
   36ab0:	4628      	mov	r0, r5
   36ab2:	211e      	movs	r1, #30
   36ab4:	f019 f938 	bl	4fd28 <net_buf_simple_add>
		leecc->status = 0x00;
   36ab8:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   36aba:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
   36abe:	f8b4 301d 	ldrh.w	r3, [r4, #29]
   36ac2:	f8a0 3003 	strh.w	r3, [r0, #3]
   36ac6:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   36ac8:	2206      	movs	r2, #6
   36aca:	f104 011f 	add.w	r1, r4, #31
   36ace:	3005      	adds	r0, #5
   36ad0:	f015 f949 	bl	4bd66 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   36ad4:	2206      	movs	r2, #6
   36ad6:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   36ada:	f105 000b 	add.w	r0, r5, #11
   36ade:	f015 f942 	bl	4bd66 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   36ae2:	2206      	movs	r2, #6
   36ae4:	f104 0125 	add.w	r1, r4, #37	; 0x25
   36ae8:	f105 0011 	add.w	r0, r5, #17
   36aec:	f015 f93b 	bl	4bd66 <memcpy>
		leecc->interval = sys_cpu_to_le16(cc->interval);
   36af0:	f8d4 3032 	ldr.w	r3, [r4, #50]	; 0x32
   36af4:	f8c5 3017 	str.w	r3, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   36af8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   36afa:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   36afe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   36b02:	776b      	strb	r3, [r5, #29]
		return;
   36b04:	e72b      	b.n	3695e <hci_evt_encode+0xa6>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   36b06:	460a      	mov	r2, r1
   36b08:	4638      	mov	r0, r7
   36b0a:	4631      	mov	r1, r6
}
   36b0c:	b009      	add	sp, #36	; 0x24
   36b0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   36b12:	f7ff be6f 	b.w	367f4 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36b16:	4b40      	ldr	r3, [pc, #256]	; (36c18 <hci_evt_encode+0x360>)
   36b18:	685b      	ldr	r3, [r3, #4]
   36b1a:	009a      	lsls	r2, r3, #2
   36b1c:	f57f af1f 	bpl.w	3695e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   36b20:	4b3e      	ldr	r3, [pc, #248]	; (36c1c <hci_evt_encode+0x364>)
   36b22:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36b24:	075b      	lsls	r3, r3, #29
   36b26:	f57f af1a 	bpl.w	3695e <hci_evt_encode+0xa6>
   36b2a:	3508      	adds	r5, #8
   36b2c:	2102      	movs	r1, #2
   36b2e:	4628      	mov	r0, r5
   36b30:	f019 f8fa 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = evt;
   36b34:	f640 233e 	movw	r3, #2622	; 0xa3e
   36b38:	8003      	strh	r3, [r0, #0]
   36b3a:	2101      	movs	r1, #1
   36b3c:	4628      	mov	r0, r5
   36b3e:	f019 f8f3 	bl	4fd28 <net_buf_simple_add>
   36b42:	4603      	mov	r3, r0
	me->subevent = subevt;
   36b44:	2203      	movs	r2, #3
   36b46:	4628      	mov	r0, r5
   36b48:	701a      	strb	r2, [r3, #0]
   36b4a:	2109      	movs	r1, #9
   36b4c:	f019 f8ec 	bl	4fd28 <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36b50:	07ff      	lsls	r7, r7, #31
   36b52:	4605      	mov	r5, r0
   36b54:	f100 825c 	bmi.w	37010 <hci_evt_encode+0x758>
	sep->status = cu->status;
   36b58:	7f23      	ldrb	r3, [r4, #28]
   36b5a:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   36b5c:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   36b5e:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   36b60:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   36b62:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
   36b66:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   36b6a:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   36b6e:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   36b72:	e6f4      	b.n	3695e <hci_evt_encode+0xa6>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   36b74:	4b28      	ldr	r3, [pc, #160]	; (36c18 <hci_evt_encode+0x360>)
   36b76:	685b      	ldr	r3, [r3, #4]
   36b78:	0418      	lsls	r0, r3, #16
   36b7a:	f04f 0400 	mov.w	r4, #0
   36b7e:	f57f aeee 	bpl.w	3695e <hci_evt_encode+0xa6>
   36b82:	3508      	adds	r5, #8
   36b84:	2102      	movs	r1, #2
   36b86:	4628      	mov	r0, r5
   36b88:	f019 f8ce 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = evt;
   36b8c:	f44f 734c 	mov.w	r3, #816	; 0x330
   36b90:	8003      	strh	r3, [r0, #0]
   36b92:	2103      	movs	r1, #3
   36b94:	4628      	mov	r0, r5
   36b96:	f019 f8c7 	bl	4fd28 <net_buf_simple_add>
	ep->status = 0x00;
   36b9a:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   36b9c:	f8a0 6001 	strh.w	r6, [r0, #1]
   36ba0:	e6dd      	b.n	3695e <hci_evt_encode+0xa6>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   36ba2:	4b20      	ldr	r3, [pc, #128]	; (36c24 <hci_evt_encode+0x36c>)
   36ba4:	681b      	ldr	r3, [r3, #0]
   36ba6:	0219      	lsls	r1, r3, #8
   36ba8:	f57f aed9 	bpl.w	3695e <hci_evt_encode+0xa6>
   36bac:	3508      	adds	r5, #8
   36bae:	2102      	movs	r1, #2
   36bb0:	4628      	mov	r0, r5
   36bb2:	f019 f8b9 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = evt;
   36bb6:	f240 2357 	movw	r3, #599	; 0x257
   36bba:	8003      	strh	r3, [r0, #0]
   36bbc:	2102      	movs	r1, #2
   36bbe:	4628      	mov	r0, r5
   36bc0:	f019 f8b2 	bl	4fd28 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   36bc4:	8006      	strh	r6, [r0, #0]
   36bc6:	e6ca      	b.n	3695e <hci_evt_encode+0xa6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36bc8:	4b13      	ldr	r3, [pc, #76]	; (36c18 <hci_evt_encode+0x360>)
   36bca:	685b      	ldr	r3, [r3, #4]
   36bcc:	009a      	lsls	r2, r3, #2
   36bce:	f57f aec6 	bpl.w	3695e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   36bd2:	4b12      	ldr	r3, [pc, #72]	; (36c1c <hci_evt_encode+0x364>)
   36bd4:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36bd6:	031b      	lsls	r3, r3, #12
   36bd8:	f57f aec1 	bpl.w	3695e <hci_evt_encode+0xa6>
   36bdc:	3508      	adds	r5, #8
   36bde:	2102      	movs	r1, #2
   36be0:	4628      	mov	r0, r5
   36be2:	f019 f8a1 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = evt;
   36be6:	f240 433e 	movw	r3, #1086	; 0x43e
   36bea:	8003      	strh	r3, [r0, #0]
   36bec:	2101      	movs	r1, #1
   36bee:	4628      	mov	r0, r5
   36bf0:	f019 f89a 	bl	4fd28 <net_buf_simple_add>
	me->subevent = subevt;
   36bf4:	2314      	movs	r3, #20
   36bf6:	7003      	strb	r3, [r0, #0]
   36bf8:	2103      	movs	r1, #3
   36bfa:	4628      	mov	r0, r5
   36bfc:	f019 f894 	bl	4fd28 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   36c00:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   36c02:	7f23      	ldrb	r3, [r4, #28]
   36c04:	7083      	strb	r3, [r0, #2]
   36c06:	e6aa      	b.n	3695e <hci_evt_encode+0xa6>
   36c08:	00052c68 	.word	0x00052c68
   36c0c:	00052c1c 	.word	0x00052c1c
   36c10:	00052bbc 	.word	0x00052bbc
   36c14:	00051ab4 	.word	0x00051ab4
   36c18:	20000190 	.word	0x20000190
   36c1c:	20000188 	.word	0x20000188
   36c20:	20004b50 	.word	0x20004b50
   36c24:	20003360 	.word	0x20003360
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36c28:	4ba5      	ldr	r3, [pc, #660]	; (36ec0 <hci_evt_encode+0x608>)
   36c2a:	685b      	ldr	r3, [r3, #4]
   36c2c:	009f      	lsls	r7, r3, #2
   36c2e:	f57f ae96 	bpl.w	3695e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   36c32:	4ba4      	ldr	r3, [pc, #656]	; (36ec4 <hci_evt_encode+0x60c>)
   36c34:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36c36:	0518      	lsls	r0, r3, #20
   36c38:	f57f ae91 	bpl.w	3695e <hci_evt_encode+0xa6>
   36c3c:	3508      	adds	r5, #8
   36c3e:	2102      	movs	r1, #2
   36c40:	4628      	mov	r0, r5
   36c42:	f019 f871 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = evt;
   36c46:	f240 633e 	movw	r3, #1598	; 0x63e
   36c4a:	8003      	strh	r3, [r0, #0]
   36c4c:	2101      	movs	r1, #1
   36c4e:	4628      	mov	r0, r5
   36c50:	f019 f86a 	bl	4fd28 <net_buf_simple_add>
	me->subevent = subevt;
   36c54:	230c      	movs	r3, #12
   36c56:	7003      	strb	r3, [r0, #0]
   36c58:	2105      	movs	r1, #5
   36c5a:	4628      	mov	r0, r5
   36c5c:	f019 f864 	bl	4fd28 <net_buf_simple_add>
	sep->status = pu->status;
   36c60:	7f23      	ldrb	r3, [r4, #28]
   36c62:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   36c64:	f8a0 6001 	strh.w	r6, [r0, #1]
   36c68:	7f62      	ldrb	r2, [r4, #29]
   36c6a:	2a00      	cmp	r2, #0
   36c6c:	fa92 f3a2 	rbit	r3, r2
   36c70:	fab3 f383 	clz	r3, r3
   36c74:	bf08      	it	eq
   36c76:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   36c7a:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   36c7c:	70c3      	strb	r3, [r0, #3]
   36c7e:	7fa2      	ldrb	r2, [r4, #30]
   36c80:	fa92 f3a2 	rbit	r3, r2
   36c84:	2a00      	cmp	r2, #0
   36c86:	fab3 f383 	clz	r3, r3
   36c8a:	bf08      	it	eq
   36c8c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   36c90:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   36c92:	7103      	strb	r3, [r0, #4]
   36c94:	e663      	b.n	3695e <hci_evt_encode+0xa6>
		LL_ASSERT(0);
   36c96:	4a8c      	ldr	r2, [pc, #560]	; (36ec8 <hci_evt_encode+0x610>)
   36c98:	498c      	ldr	r1, [pc, #560]	; (36ecc <hci_evt_encode+0x614>)
   36c9a:	488d      	ldr	r0, [pc, #564]	; (36ed0 <hci_evt_encode+0x618>)
   36c9c:	f641 538f 	movw	r3, #7567	; 0x1d8f
   36ca0:	f012 ff32 	bl	49b08 <printk>
   36ca4:	4040      	eors	r0, r0
   36ca6:	f380 8811 	msr	BASEPRI, r0
   36caa:	f04f 0003 	mov.w	r0, #3
   36cae:	df02      	svc	2
}
   36cb0:	e655      	b.n	3695e <hci_evt_encode+0xa6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36cb2:	4b83      	ldr	r3, [pc, #524]	; (36ec0 <hci_evt_encode+0x608>)
   36cb4:	685b      	ldr	r3, [r3, #4]
   36cb6:	009a      	lsls	r2, r3, #2
   36cb8:	f57f ae51 	bpl.w	3695e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   36cbc:	4b81      	ldr	r3, [pc, #516]	; (36ec4 <hci_evt_encode+0x60c>)
   36cbe:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36cc0:	065b      	lsls	r3, r3, #25
   36cc2:	f57f ae4c 	bpl.w	3695e <hci_evt_encode+0xa6>
   36cc6:	3508      	adds	r5, #8
   36cc8:	2102      	movs	r1, #2
   36cca:	4628      	mov	r0, r5
   36ccc:	f019 f82c 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = evt;
   36cd0:	f640 333e 	movw	r3, #2878	; 0xb3e
   36cd4:	8003      	strh	r3, [r0, #0]
   36cd6:	2101      	movs	r1, #1
   36cd8:	4628      	mov	r0, r5
   36cda:	f019 f825 	bl	4fd28 <net_buf_simple_add>
	me->subevent = subevt;
   36cde:	2307      	movs	r3, #7
   36ce0:	7003      	strb	r3, [r0, #0]
   36ce2:	210a      	movs	r1, #10
   36ce4:	4628      	mov	r0, r5
   36ce6:	f019 f81f 	bl	4fd28 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   36cea:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   36cec:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   36cee:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   36cf0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   36cf2:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   36cf4:	8c23      	ldrh	r3, [r4, #32]
   36cf6:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   36cf8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   36cfa:	8103      	strh	r3, [r0, #8]
   36cfc:	e62f      	b.n	3695e <hci_evt_encode+0xa6>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   36cfe:	460b      	mov	r3, r1
   36d00:	4632      	mov	r2, r6
   36d02:	4639      	mov	r1, r7
   36d04:	2000      	movs	r0, #0
}
   36d06:	b009      	add	sp, #36	; 0x24
   36d08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   36d0c:	f7fe bf74 	b.w	35bf8 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   36d10:	4b6b      	ldr	r3, [pc, #428]	; (36ec0 <hci_evt_encode+0x608>)
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   36d12:	f890 4020 	ldrb.w	r4, [r0, #32]
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   36d16:	681b      	ldr	r3, [r3, #0]
   36d18:	061f      	lsls	r7, r3, #24
   36d1a:	f57f ae20 	bpl.w	3695e <hci_evt_encode+0xa6>
   36d1e:	3508      	adds	r5, #8
   36d20:	2102      	movs	r1, #2
   36d22:	4628      	mov	r0, r5
   36d24:	f019 f800 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = evt;
   36d28:	f44f 6381 	mov.w	r3, #1032	; 0x408
   36d2c:	8003      	strh	r3, [r0, #0]
   36d2e:	2104      	movs	r1, #4
   36d30:	4628      	mov	r0, r5
   36d32:	f018 fff9 	bl	4fd28 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   36d36:	fab4 f384 	clz	r3, r4
   36d3a:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   36d3c:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   36d3e:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   36d42:	70c3      	strb	r3, [r0, #3]
   36d44:	e60b      	b.n	3695e <hci_evt_encode+0xa6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36d46:	4b5e      	ldr	r3, [pc, #376]	; (36ec0 <hci_evt_encode+0x608>)
   36d48:	685b      	ldr	r3, [r3, #4]
   36d4a:	0098      	lsls	r0, r3, #2
   36d4c:	f140 8091 	bpl.w	36e72 <hci_evt_encode+0x5ba>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   36d50:	4b5c      	ldr	r3, [pc, #368]	; (36ec4 <hci_evt_encode+0x60c>)
   36d52:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36d54:	0699      	lsls	r1, r3, #26
   36d56:	f140 808c 	bpl.w	36e72 <hci_evt_encode+0x5ba>
   36d5a:	3508      	adds	r5, #8
   36d5c:	2102      	movs	r1, #2
   36d5e:	4628      	mov	r0, r5
   36d60:	f018 ffe2 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = evt;
   36d64:	f640 333e 	movw	r3, #2878	; 0xb3e
   36d68:	8003      	strh	r3, [r0, #0]
   36d6a:	2101      	movs	r1, #1
   36d6c:	4628      	mov	r0, r5
   36d6e:	f018 ffdb 	bl	4fd28 <net_buf_simple_add>
	me->subevent = subevt;
   36d72:	2306      	movs	r3, #6
   36d74:	7003      	strb	r3, [r0, #0]
   36d76:	210a      	movs	r1, #10
   36d78:	4628      	mov	r0, r5
   36d7a:	f018 ffd5 	bl	4fd28 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   36d7e:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   36d80:	8c23      	ldrh	r3, [r4, #32]
   36d82:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   36d84:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   36d86:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   36d88:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   36d8a:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   36d8c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   36d8e:	8103      	strh	r3, [r0, #8]
   36d90:	e5e5      	b.n	3695e <hci_evt_encode+0xa6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36d92:	4b4b      	ldr	r3, [pc, #300]	; (36ec0 <hci_evt_encode+0x608>)
   36d94:	685b      	ldr	r3, [r3, #4]
   36d96:	0099      	lsls	r1, r3, #2
   36d98:	f57f ade1 	bpl.w	3695e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   36d9c:	4b49      	ldr	r3, [pc, #292]	; (36ec4 <hci_evt_encode+0x60c>)
   36d9e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36da0:	06da      	lsls	r2, r3, #27
   36da2:	f57f addc 	bpl.w	3695e <hci_evt_encode+0xa6>
   36da6:	3508      	adds	r5, #8
   36da8:	2102      	movs	r1, #2
   36daa:	4628      	mov	r0, r5
   36dac:	f018 ffbc 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = evt;
   36db0:	f640 533e 	movw	r3, #3390	; 0xd3e
   36db4:	8003      	strh	r3, [r0, #0]
   36db6:	2101      	movs	r1, #1
   36db8:	4628      	mov	r0, r5
   36dba:	f018 ffb5 	bl	4fd28 <net_buf_simple_add>
	me->subevent = subevt;
   36dbe:	2305      	movs	r3, #5
   36dc0:	7003      	strb	r3, [r0, #0]
   36dc2:	210c      	movs	r1, #12
   36dc4:	4628      	mov	r0, r5
   36dc6:	f018 ffaf 	bl	4fd28 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   36dca:	f104 0120 	add.w	r1, r4, #32
   36dce:	4605      	mov	r5, r0
   36dd0:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   36dd2:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   36dd6:	f014 ffc6 	bl	4bd66 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   36dda:	2202      	movs	r2, #2
   36ddc:	f104 0128 	add.w	r1, r4, #40	; 0x28
   36de0:	f105 000a 	add.w	r0, r5, #10
}
   36de4:	b009      	add	sp, #36	; 0x24
   36de6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   36dea:	f014 bfbc 	b.w	4bd66 <memcpy>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   36dee:	4b34      	ldr	r3, [pc, #208]	; (36ec0 <hci_evt_encode+0x608>)
   36df0:	681b      	ldr	r3, [r3, #0]
   36df2:	061b      	lsls	r3, r3, #24
   36df4:	f04f 0400 	mov.w	r4, #0
   36df8:	f57f adb1 	bpl.w	3695e <hci_evt_encode+0xa6>
   36dfc:	3508      	adds	r5, #8
   36dfe:	2102      	movs	r1, #2
   36e00:	4628      	mov	r0, r5
   36e02:	f018 ff91 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = evt;
   36e06:	f44f 6381 	mov.w	r3, #1032	; 0x408
   36e0a:	8003      	strh	r3, [r0, #0]
   36e0c:	2104      	movs	r1, #4
   36e0e:	4628      	mov	r0, r5
   36e10:	f018 ff8a 	bl	4fd28 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   36e14:	2301      	movs	r3, #1
	ep->status = err;
   36e16:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   36e18:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   36e1c:	70c3      	strb	r3, [r0, #3]
   36e1e:	e59e      	b.n	3695e <hci_evt_encode+0xa6>
	switch (pdu_data->llctrl.unknown_rsp.type) {
   36e20:	f890 3020 	ldrb.w	r3, [r0, #32]
   36e24:	2b0e      	cmp	r3, #14
   36e26:	f47f ad9a 	bne.w	3695e <hci_evt_encode+0xa6>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   36e2a:	460b      	mov	r3, r1
   36e2c:	4632      	mov	r2, r6
   36e2e:	2100      	movs	r1, #0
   36e30:	201a      	movs	r0, #26
   36e32:	e768      	b.n	36d06 <hci_evt_encode+0x44e>
		ll_rl_crpa_set(cc->peer_addr_type,
   36e34:	7fa0      	ldrb	r0, [r4, #30]
   36e36:	f104 0325 	add.w	r3, r4, #37	; 0x25
   36e3a:	22ff      	movs	r2, #255	; 0xff
   36e3c:	f104 011f 	add.w	r1, r4, #31
   36e40:	f008 fa5c 	bl	3f2fc <ll_rl_crpa_set>
   36e44:	e60c      	b.n	36a60 <hci_evt_encode+0x1a8>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   36e46:	4a20      	ldr	r2, [pc, #128]	; (36ec8 <hci_evt_encode+0x610>)
   36e48:	4922      	ldr	r1, [pc, #136]	; (36ed4 <hci_evt_encode+0x61c>)
   36e4a:	4821      	ldr	r0, [pc, #132]	; (36ed0 <hci_evt_encode+0x618>)
   36e4c:	f641 23f5 	movw	r3, #6901	; 0x1af5
   36e50:	f012 fe5a 	bl	49b08 <printk>
   36e54:	4040      	eors	r0, r0
   36e56:	f380 8811 	msr	BASEPRI, r0
   36e5a:	f04f 0003 	mov.w	r0, #3
   36e5e:	df02      	svc	2
   36e60:	e5fa      	b.n	36a58 <hci_evt_encode+0x1a0>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   36e62:	2100      	movs	r1, #0
   36e64:	f104 031e 	add.w	r3, r4, #30
   36e68:	4642      	mov	r2, r8
   36e6a:	4608      	mov	r0, r1
   36e6c:	f008 fa46 	bl	3f2fc <ll_rl_crpa_set>
   36e70:	e58d      	b.n	3698e <hci_evt_encode+0xd6>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   36e72:	2300      	movs	r3, #0
   36e74:	e9cd 3301 	strd	r3, r3, [sp, #4]
   36e78:	9300      	str	r3, [sp, #0]
   36e7a:	221a      	movs	r2, #26
   36e7c:	2102      	movs	r1, #2
   36e7e:	4630      	mov	r0, r6
   36e80:	f003 f972 	bl	3a168 <ll_conn_update>
		return;
   36e84:	e56b      	b.n	3695e <hci_evt_encode+0xa6>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   36e86:	f1b8 0f00 	cmp.w	r8, #0
   36e8a:	f040 80a9 	bne.w	36fe0 <hci_evt_encode+0x728>
   36e8e:	2102      	movs	r1, #2
   36e90:	4628      	mov	r0, r5
   36e92:	f018 ff49 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = evt;
   36e96:	f241 333e 	movw	r3, #4926	; 0x133e
   36e9a:	8003      	strh	r3, [r0, #0]
   36e9c:	2101      	movs	r1, #1
   36e9e:	4628      	mov	r0, r5
   36ea0:	f018 ff42 	bl	4fd28 <net_buf_simple_add>
	me->subevent = subevt;
   36ea4:	2301      	movs	r3, #1
   36ea6:	7003      	strb	r3, [r0, #0]
   36ea8:	2112      	movs	r1, #18
   36eaa:	4628      	mov	r0, r5
   36eac:	f018 ff3c 	bl	4fd28 <net_buf_simple_add>
   36eb0:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   36eb2:	2212      	movs	r2, #18
   36eb4:	4641      	mov	r1, r8
   36eb6:	f014 ff61 	bl	4bd7c <memset>
		lecc->status = status;
   36eba:	7027      	strb	r7, [r4, #0]
		return;
   36ebc:	e54f      	b.n	3695e <hci_evt_encode+0xa6>
   36ebe:	bf00      	nop
   36ec0:	20000190 	.word	0x20000190
   36ec4:	20000188 	.word	0x20000188
   36ec8:	00052c68 	.word	0x00052c68
   36ecc:	00052c1c 	.word	0x00052c1c
   36ed0:	00052bbc 	.word	0x00052bbc
   36ed4:	00052ccc 	.word	0x00052ccc
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36ed8:	2b00      	cmp	r3, #0
   36eda:	f43f ad40 	beq.w	3695e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   36ede:	4b60      	ldr	r3, [pc, #384]	; (37060 <hci_evt_encode+0x7a8>)
   36ee0:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36ee2:	055a      	lsls	r2, r3, #21
   36ee4:	f57f ad3b 	bpl.w	3695e <hci_evt_encode+0xa6>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   36ee8:	7f20      	ldrb	r0, [r4, #28]
   36eea:	f000 030f 	and.w	r3, r0, #15
   36eee:	2b01      	cmp	r3, #1
   36ef0:	d00d      	beq.n	36f0e <hci_evt_encode+0x656>
   36ef2:	4a5c      	ldr	r2, [pc, #368]	; (37064 <hci_evt_encode+0x7ac>)
   36ef4:	495c      	ldr	r1, [pc, #368]	; (37068 <hci_evt_encode+0x7b0>)
   36ef6:	485d      	ldr	r0, [pc, #372]	; (3706c <hci_evt_encode+0x7b4>)
   36ef8:	f241 435a 	movw	r3, #5210	; 0x145a
   36efc:	f012 fe04 	bl	49b08 <printk>
   36f00:	4040      	eors	r0, r0
   36f02:	f380 8811 	msr	BASEPRI, r0
   36f06:	f04f 0003 	mov.w	r0, #3
   36f0a:	df02      	svc	2
   36f0c:	7f20      	ldrb	r0, [r4, #28]
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   36f0e:	f104 061e 	add.w	r6, r4, #30
   36f12:	f3c0 1180 	ubfx	r1, r0, #6, #1
   36f16:	4632      	mov	r2, r6
   36f18:	f000 000f 	and.w	r0, r0, #15
   36f1c:	f7fe fe10 	bl	35b40 <dup_found.constprop.0>
	if (dup_scan &&
   36f20:	2800      	cmp	r0, #0
   36f22:	f47f ad1c 	bne.w	3695e <hci_evt_encode+0xa6>
   36f26:	3508      	adds	r5, #8
   36f28:	2102      	movs	r1, #2
   36f2a:	4628      	mov	r0, r5
   36f2c:	f018 fefc 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = evt;
   36f30:	f241 233e 	movw	r3, #4670	; 0x123e
   36f34:	8003      	strh	r3, [r0, #0]
   36f36:	2101      	movs	r1, #1
   36f38:	4628      	mov	r0, r5
   36f3a:	f018 fef5 	bl	4fd28 <net_buf_simple_add>
   36f3e:	4603      	mov	r3, r0
	me->subevent = subevt;
   36f40:	220b      	movs	r2, #11
   36f42:	701a      	strb	r2, [r3, #0]
   36f44:	4628      	mov	r0, r5
   36f46:	2111      	movs	r1, #17
   36f48:	f018 feee 	bl	4fd28 <net_buf_simple_add>
	drp->num_reports = 1U;
   36f4c:	f240 1301 	movw	r3, #257	; 0x101
   36f50:	8003      	strh	r3, [r0, #0]
   36f52:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
   36f54:	f008 f8d0 	bl	3f0f8 <ll_rl_size_get>
   36f58:	4580      	cmp	r8, r0
   36f5a:	d277      	bcs.n	3704c <hci_evt_encode+0x794>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
   36f5c:	1cea      	adds	r2, r5, #3
   36f5e:	4640      	mov	r0, r8
   36f60:	1ca9      	adds	r1, r5, #2
   36f62:	f008 f883 	bl	3f06c <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
   36f66:	78ab      	ldrb	r3, [r5, #2]
   36f68:	3302      	adds	r3, #2
   36f6a:	70ab      	strb	r3, [r5, #2]
	dir_info->dir_addr.type = adv->rx_addr;
   36f6c:	7f23      	ldrb	r3, [r4, #28]
   36f6e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	memcpy(&dir_info->dir_addr.a.val[0],
   36f72:	2206      	movs	r2, #6
	dir_info->dir_addr.type = adv->rx_addr;
   36f74:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   36f76:	f104 0124 	add.w	r1, r4, #36	; 0x24
   36f7a:	f105 000a 	add.w	r0, r5, #10
   36f7e:	f014 fef2 	bl	4bd66 <memcpy>
	dir_info->rssi = rssi;
   36f82:	742f      	strb	r7, [r5, #16]
   36f84:	e4eb      	b.n	3695e <hci_evt_encode+0xa6>
   36f86:	2102      	movs	r1, #2
   36f88:	4628      	mov	r0, r5
   36f8a:	f018 fecd 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = evt;
   36f8e:	f241 333e 	movw	r3, #4926	; 0x133e
   36f92:	8003      	strh	r3, [r0, #0]
   36f94:	2101      	movs	r1, #1
   36f96:	4628      	mov	r0, r5
   36f98:	f018 fec6 	bl	4fd28 <net_buf_simple_add>
   36f9c:	4603      	mov	r3, r0
	me->subevent = subevt;
   36f9e:	2201      	movs	r2, #1
   36fa0:	701a      	strb	r2, [r3, #0]
   36fa2:	4628      	mov	r0, r5
   36fa4:	2112      	movs	r1, #18
   36fa6:	f018 febf 	bl	4fd28 <net_buf_simple_add>
	lecc->status = 0x00;
   36faa:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   36fac:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   36fb0:	7f63      	ldrb	r3, [r4, #29]
   36fb2:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   36fb4:	7fa3      	ldrb	r3, [r4, #30]
   36fb6:	f003 0301 	and.w	r3, r3, #1
   36fba:	4605      	mov	r5, r0
   36fbc:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   36fbe:	2206      	movs	r2, #6
   36fc0:	f104 011f 	add.w	r1, r4, #31
   36fc4:	3005      	adds	r0, #5
   36fc6:	f014 fece 	bl	4bd66 <memcpy>
	lecc->interval = sys_cpu_to_le16(cc->interval);
   36fca:	f8d4 3032 	ldr.w	r3, [r4, #50]	; 0x32
   36fce:	f8c5 300b 	str.w	r3, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   36fd2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   36fd4:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   36fd8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   36fdc:	746b      	strb	r3, [r5, #17]
   36fde:	e4be      	b.n	3695e <hci_evt_encode+0xa6>
   36fe0:	2102      	movs	r1, #2
   36fe2:	4628      	mov	r0, r5
   36fe4:	f018 fea0 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = evt;
   36fe8:	f641 733e 	movw	r3, #7998	; 0x1f3e
   36fec:	8003      	strh	r3, [r0, #0]
   36fee:	2101      	movs	r1, #1
   36ff0:	4628      	mov	r0, r5
   36ff2:	f018 fe99 	bl	4fd28 <net_buf_simple_add>
	me->subevent = subevt;
   36ff6:	230a      	movs	r3, #10
   36ff8:	7003      	strb	r3, [r0, #0]
   36ffa:	211e      	movs	r1, #30
   36ffc:	4628      	mov	r0, r5
   36ffe:	f018 fe93 	bl	4fd28 <net_buf_simple_add>
   37002:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   37004:	221e      	movs	r2, #30
   37006:	2100      	movs	r1, #0
   37008:	f014 feb8 	bl	4bd7c <memset>
			leecc->status = status;
   3700c:	7027      	strb	r7, [r4, #0]
			return;
   3700e:	e4a6      	b.n	3695e <hci_evt_encode+0xa6>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   37010:	4a14      	ldr	r2, [pc, #80]	; (37064 <hci_evt_encode+0x7ac>)
   37012:	4917      	ldr	r1, [pc, #92]	; (37070 <hci_evt_encode+0x7b8>)
   37014:	4815      	ldr	r0, [pc, #84]	; (3706c <hci_evt_encode+0x7b4>)
   37016:	f641 337a 	movw	r3, #7034	; 0x1b7a
   3701a:	f012 fd75 	bl	49b08 <printk>
   3701e:	4040      	eors	r0, r0
   37020:	f380 8811 	msr	BASEPRI, r0
   37024:	f04f 0003 	mov.w	r0, #3
   37028:	df02      	svc	2
   3702a:	e595      	b.n	36b58 <hci_evt_encode+0x2a0>
		adv_info->addr.type = adv->tx_addr;
   3702c:	7f23      	ldrb	r3, [r4, #28]
   3702e:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   37032:	4649      	mov	r1, r9
		adv_info->addr.type = adv->tx_addr;
   37034:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   37036:	2206      	movs	r2, #6
   37038:	1ce8      	adds	r0, r5, #3
   3703a:	f014 fe94 	bl	4bd66 <memcpy>
   3703e:	e4fd      	b.n	36a3c <hci_evt_encode+0x184>
   37040:	230b      	movs	r3, #11
   37042:	9305      	str	r3, [sp, #20]
   37044:	f04f 0b0c 	mov.w	fp, #12
		data_len = 0U;
   37048:	46b2      	mov	sl, r6
   3704a:	e4cb      	b.n	369e4 <hci_evt_encode+0x12c>
		dir_info->addr.type = adv->tx_addr;
   3704c:	7f23      	ldrb	r3, [r4, #28]
   3704e:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   37052:	4631      	mov	r1, r6
		dir_info->addr.type = adv->tx_addr;
   37054:	70ab      	strb	r3, [r5, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   37056:	2206      	movs	r2, #6
   37058:	1ce8      	adds	r0, r5, #3
   3705a:	f014 fe84 	bl	4bd66 <memcpy>
   3705e:	e785      	b.n	36f6c <hci_evt_encode+0x6b4>
   37060:	20000188 	.word	0x20000188
   37064:	00052c68 	.word	0x00052c68
   37068:	00052ca4 	.word	0x00052ca4
   3706c:	00052bbc 	.word	0x00052bbc
   37070:	00052d08 	.word	0x00052d08

00037074 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   37074:	b570      	push	{r4, r5, r6, lr}
   37076:	f100 0408 	add.w	r4, r0, #8
   3707a:	460e      	mov	r6, r1
   3707c:	4620      	mov	r0, r4
   3707e:	2102      	movs	r1, #2
   37080:	4615      	mov	r5, r2
   37082:	f018 fe51 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = evt;
   37086:	f240 5313 	movw	r3, #1299	; 0x513
   3708a:	8003      	strh	r3, [r0, #0]
   3708c:	2105      	movs	r1, #5
   3708e:	4620      	mov	r0, r4
   37090:	f018 fe4a 	bl	4fd28 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   37094:	2301      	movs	r3, #1
   37096:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   37098:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   3709c:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   370a0:	bd70      	pop	{r4, r5, r6, pc}
   370a2:	bf00      	nop

000370a4 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   370a4:	7903      	ldrb	r3, [r0, #4]
   370a6:	2b03      	cmp	r3, #3
   370a8:	d008      	beq.n	370bc <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
   370aa:	3b05      	subs	r3, #5
   370ac:	b2db      	uxtb	r3, r3
   370ae:	2b17      	cmp	r3, #23
   370b0:	d901      	bls.n	370b6 <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   370b2:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   370b4:	4770      	bx	lr
   370b6:	4a05      	ldr	r2, [pc, #20]	; (370cc <hci_get_class+0x28>)
   370b8:	5cd0      	ldrb	r0, [r2, r3]
   370ba:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   370bc:	7f03      	ldrb	r3, [r0, #28]
   370be:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_EVT_LLCP;
   370c2:	2b03      	cmp	r3, #3
   370c4:	bf14      	ite	ne
   370c6:	2005      	movne	r0, #5
   370c8:	2004      	moveq	r0, #4
   370ca:	4770      	bx	lr
   370cc:	00052d44 	.word	0x00052d44

000370d0 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   370d0:	480d      	ldr	r0, [pc, #52]	; (37108 <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   370d2:	4a0e      	ldr	r2, [pc, #56]	; (3710c <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   370d4:	490e      	ldr	r1, [pc, #56]	; (37110 <hci_init+0x40>)
	dup_count = DUP_FILTER_DISABLED;
   370d6:	4b0f      	ldr	r3, [pc, #60]	; (37114 <hci_init+0x44>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
   370d8:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   370da:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   370de:	f641 75ff 	movw	r5, #8191	; 0x1fff
   370e2:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   370e6:	2400      	movs	r4, #0
   370e8:	2500      	movs	r5, #0
   370ea:	e9c2 4500 	strd	r4, r5, [r2]
	conn_count = 0U;
   370ee:	4a0a      	ldr	r2, [pc, #40]	; (37118 <hci_init+0x48>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   370f0:	241f      	movs	r4, #31
   370f2:	2500      	movs	r5, #0
   370f4:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   370f8:	2100      	movs	r1, #0
   370fa:	6011      	str	r1, [r2, #0]
	dup_count = DUP_FILTER_DISABLED;
   370fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   37100:	bc30      	pop	{r4, r5}
	dup_count = DUP_FILTER_DISABLED;
   37102:	601a      	str	r2, [r3, #0]
}
   37104:	4770      	bx	lr
   37106:	bf00      	nop
   37108:	20000190 	.word	0x20000190
   3710c:	20003360 	.word	0x20003360
   37110:	20000188 	.word	0x20000188
   37114:	20004b58 	.word	0x20004b58
   37118:	20004b50 	.word	0x20004b50

0003711c <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   3711c:	f009 b99c 	b.w	40458 <lll_csrand_get>

00037120 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   37120:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   37122:	2300      	movs	r3, #0
   37124:	f00b fd12 	bl	42b4c <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   37128:	2000      	movs	r0, #0
   3712a:	bd08      	pop	{r3, pc}

0003712c <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   3712c:	4801      	ldr	r0, [pc, #4]	; (37134 <ll_feat_get+0x8>)
   3712e:	2100      	movs	r1, #0
   37130:	4770      	bx	lr
   37132:	bf00      	nop
   37134:	000141ff 	.word	0x000141ff

00037138 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   37138:	b510      	push	{r4, lr}
   3713a:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   3713c:	f009 f9c2 	bl	404c4 <lll_reset>
	LL_ASSERT(!err);
   37140:	b970      	cbnz	r0, 37160 <perform_lll_reset+0x28>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   37142:	f009 fdd5 	bl	40cf0 <lll_adv_reset>
	LL_ASSERT(!err);
   37146:	b9e0      	cbnz	r0, 37182 <perform_lll_reset+0x4a>
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   37148:	f00a fd54 	bl	41bf4 <lll_scan_reset>
	LL_ASSERT(!err);
   3714c:	bb50      	cbnz	r0, 371a4 <perform_lll_reset+0x6c>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   3714e:	f00a fe8f 	bl	41e70 <lll_conn_reset>
	LL_ASSERT(!err);
   37152:	2800      	cmp	r0, #0
   37154:	d137      	bne.n	371c6 <perform_lll_reset+0x8e>
	z_impl_k_sem_give(sem);
   37156:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   37158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3715c:	f010 bfec 	b.w	48138 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   37160:	4a22      	ldr	r2, [pc, #136]	; (371ec <perform_lll_reset+0xb4>)
   37162:	4923      	ldr	r1, [pc, #140]	; (371f0 <perform_lll_reset+0xb8>)
   37164:	4823      	ldr	r0, [pc, #140]	; (371f4 <perform_lll_reset+0xbc>)
   37166:	f640 0324 	movw	r3, #2084	; 0x824
   3716a:	f012 fccd 	bl	49b08 <printk>
   3716e:	4040      	eors	r0, r0
   37170:	f380 8811 	msr	BASEPRI, r0
   37174:	f04f 0003 	mov.w	r0, #3
   37178:	df02      	svc	2
	err = lll_adv_reset();
   3717a:	f009 fdb9 	bl	40cf0 <lll_adv_reset>
	LL_ASSERT(!err);
   3717e:	2800      	cmp	r0, #0
   37180:	d0e2      	beq.n	37148 <perform_lll_reset+0x10>
   37182:	4a1a      	ldr	r2, [pc, #104]	; (371ec <perform_lll_reset+0xb4>)
   37184:	491a      	ldr	r1, [pc, #104]	; (371f0 <perform_lll_reset+0xb8>)
   37186:	481b      	ldr	r0, [pc, #108]	; (371f4 <perform_lll_reset+0xbc>)
   37188:	f640 0329 	movw	r3, #2089	; 0x829
   3718c:	f012 fcbc 	bl	49b08 <printk>
   37190:	4040      	eors	r0, r0
   37192:	f380 8811 	msr	BASEPRI, r0
   37196:	f04f 0003 	mov.w	r0, #3
   3719a:	df02      	svc	2
	err = lll_scan_reset();
   3719c:	f00a fd2a 	bl	41bf4 <lll_scan_reset>
	LL_ASSERT(!err);
   371a0:	2800      	cmp	r0, #0
   371a2:	d0d4      	beq.n	3714e <perform_lll_reset+0x16>
   371a4:	4a11      	ldr	r2, [pc, #68]	; (371ec <perform_lll_reset+0xb4>)
   371a6:	4912      	ldr	r1, [pc, #72]	; (371f0 <perform_lll_reset+0xb8>)
   371a8:	4812      	ldr	r0, [pc, #72]	; (371f4 <perform_lll_reset+0xbc>)
   371aa:	f640 032f 	movw	r3, #2095	; 0x82f
   371ae:	f012 fcab 	bl	49b08 <printk>
   371b2:	4040      	eors	r0, r0
   371b4:	f380 8811 	msr	BASEPRI, r0
   371b8:	f04f 0003 	mov.w	r0, #3
   371bc:	df02      	svc	2
	err = lll_conn_reset();
   371be:	f00a fe57 	bl	41e70 <lll_conn_reset>
	LL_ASSERT(!err);
   371c2:	2800      	cmp	r0, #0
   371c4:	d0c7      	beq.n	37156 <perform_lll_reset+0x1e>
   371c6:	4a09      	ldr	r2, [pc, #36]	; (371ec <perform_lll_reset+0xb4>)
   371c8:	4909      	ldr	r1, [pc, #36]	; (371f0 <perform_lll_reset+0xb8>)
   371ca:	480a      	ldr	r0, [pc, #40]	; (371f4 <perform_lll_reset+0xbc>)
   371cc:	f640 0335 	movw	r3, #2101	; 0x835
   371d0:	f012 fc9a 	bl	49b08 <printk>
   371d4:	4040      	eors	r0, r0
   371d6:	f380 8811 	msr	BASEPRI, r0
   371da:	f04f 0003 	mov.w	r0, #3
   371de:	df02      	svc	2
   371e0:	4620      	mov	r0, r4
}
   371e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   371e6:	f010 bfa7 	b.w	48138 <z_impl_k_sem_give>
   371ea:	bf00      	nop
   371ec:	00052d5c 	.word	0x00052d5c
   371f0:	00052d98 	.word	0x00052d98
   371f4:	00052bbc 	.word	0x00052bbc

000371f8 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   371f8:	6008      	str	r0, [r1, #0]
   371fa:	4801      	ldr	r0, [pc, #4]	; (37200 <ull_ticker_status_give+0x8>)
   371fc:	f010 bf9c 	b.w	48138 <z_impl_k_sem_give>
   37200:	2000523c 	.word	0x2000523c

00037204 <disabled_cb>:
   37204:	f010 bf98 	b.w	48138 <z_impl_k_sem_give>

00037208 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   37208:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   3720c:	4d2a      	ldr	r5, [pc, #168]	; (372b8 <tx_cmplt_get+0xb0>)
{
   3720e:	460c      	mov	r4, r1
   37210:	4692      	mov	sl, r2
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
   37212:	7869      	ldrb	r1, [r5, #1]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   37214:	7822      	ldrb	r2, [r4, #0]
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   37216:	782b      	ldrb	r3, [r5, #0]
   37218:	4291      	cmp	r1, r2
   3721a:	bf9c      	itt	ls
   3721c:	78aa      	ldrbls	r2, [r5, #2]
		*idx = first;
   3721e:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
   37220:	4592      	cmp	sl, r2
{
   37222:	4683      	mov	fp, r0
   37224:	d040      	beq.n	372a8 <tx_cmplt_get+0xa0>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   37226:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
   3722a:	3201      	adds	r2, #1
   3722c:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   3722e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 372bc <tx_cmplt_get+0xb4>
		i = 0U;
   37232:	4291      	cmp	r1, r2
   37234:	bf08      	it	eq
   37236:	2200      	moveq	r2, #0

	*idx = i;
   37238:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
   3723a:	f839 2003 	ldrh.w	r2, [r9, r3]
   3723e:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
   37240:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
   37242:	444b      	add	r3, r9
   37244:	f04f 0802 	mov.w	r8, #2
		if (!node_tx || (node_tx == (void *)1) ||
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
		      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE))) {
			/* data packet, hence count num cmplt */
			tx->node = (void *)1;
   37248:	2701      	movs	r7, #1
   3724a:	e01a      	b.n	37282 <tx_cmplt_get+0x7a>
			cmplt++;
   3724c:	3601      	adds	r6, #1
			tx->node = (void *)1;
   3724e:	605f      	str	r7, [r3, #4]
			cmplt++;
   37250:	b2f6      	uxtb	r6, r6
	if (*idx >= count) {
   37252:	7823      	ldrb	r3, [r4, #0]
		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
   37254:	7869      	ldrb	r1, [r5, #1]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   37256:	7828      	ldrb	r0, [r5, #0]
   37258:	4299      	cmp	r1, r3
   3725a:	bf9c      	itt	ls
   3725c:	78ab      	ldrbls	r3, [r5, #2]
		*idx = first;
   3725e:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   37260:	459a      	cmp	sl, r3
   37262:	d022      	beq.n	372aa <tx_cmplt_get+0xa2>
	i = *idx + 1;
   37264:	1c5a      	adds	r2, r3, #1
   37266:	b2d2      	uxtb	r2, r2
		i = 0U;
   37268:	4291      	cmp	r1, r2
   3726a:	bf08      	it	eq
   3726c:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   3726e:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
   37272:	7022      	strb	r2, [r4, #0]
					    last, first);
	} while (tx && tx->handle == *handle);
   37274:	f839 1003 	ldrh.w	r1, [r9, r3]
   37278:	f8bb 2000 	ldrh.w	r2, [fp]
   3727c:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
   3727e:	444b      	add	r3, r9
   37280:	d113      	bne.n	372aa <tx_cmplt_get+0xa2>
		node_tx = tx->node;
   37282:	6858      	ldr	r0, [r3, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   37284:	2801      	cmp	r0, #1
   37286:	d9e1      	bls.n	3724c <tx_cmplt_get+0x44>
   37288:	2803      	cmp	r0, #3
   3728a:	d802      	bhi.n	37292 <tx_cmplt_get+0x8a>
   3728c:	f8c3 8004 	str.w	r8, [r3, #4]
		if (((uint32_t)node_tx & ~3)) {
   37290:	e7df      	b.n	37252 <tx_cmplt_get+0x4a>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   37292:	7902      	ldrb	r2, [r0, #4]
   37294:	f002 0203 	and.w	r2, r2, #3
		    (((uint32_t)node_tx & ~3) &&
   37298:	3a01      	subs	r2, #1
   3729a:	2a01      	cmp	r2, #1
   3729c:	d908      	bls.n	372b0 <tx_cmplt_get+0xa8>
			tx->node = (void *)2;
   3729e:	2202      	movs	r2, #2
   372a0:	605a      	str	r2, [r3, #4]
			ll_tx_mem_release(node_tx);
   372a2:	f002 ff0d 	bl	3a0c0 <ll_tx_mem_release>
   372a6:	e7d4      	b.n	37252 <tx_cmplt_get+0x4a>
		return 0;
   372a8:	2600      	movs	r6, #0

	return cmplt;
}
   372aa:	4630      	mov	r0, r6
   372ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   372b0:	3601      	adds	r6, #1
   372b2:	b2f6      	uxtb	r6, r6
			tx->node = (void *)1;
   372b4:	2201      	movs	r2, #1
			cmplt++;
   372b6:	e7f3      	b.n	372a0 <tx_cmplt_get+0x98>
   372b8:	2000094c 	.word	0x2000094c
   372bc:	20000950 	.word	0x20000950

000372c0 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   372c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   372c4:	4e3c      	ldr	r6, [pc, #240]	; (373b8 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
   372c6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 373bc <ull_done+0xfc>
   372ca:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 373c0 <ull_done+0x100>
{
   372ce:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   372d0:	e9d6 0100 	ldrd	r0, r1, [r6]
   372d4:	aa01      	add	r2, sp, #4
   372d6:	f7fc fe79 	bl	33fcc <memq_peek>
		if (link) {
   372da:	4604      	mov	r4, r0
   372dc:	2800      	cmp	r0, #0
   372de:	d03e      	beq.n	3735e <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
   372e0:	6870      	ldr	r0, [r6, #4]
   372e2:	2200      	movs	r2, #0
   372e4:	4631      	mov	r1, r6
   372e6:	f7fc fe79 	bl	33fdc <memq_dequeue>
			rx_demux_event_done(link, done);
   372ea:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
   372ec:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
   372ee:	b135      	cbz	r5, 372fe <ull_done+0x3e>
	return hdr->ref;
   372f0:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   372f2:	2b00      	cmp	r3, #0
   372f4:	d052      	beq.n	3739c <ull_done+0xdc>
	return hdr->ref--;
   372f6:	782b      	ldrb	r3, [r5, #0]
   372f8:	3b01      	subs	r3, #1
   372fa:	b2db      	uxtb	r3, r3
   372fc:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   372fe:	f897 3020 	ldrb.w	r3, [r7, #32]
   37302:	b123      	cbz	r3, 3730e <ull_done+0x4e>
   37304:	2b01      	cmp	r3, #1
   37306:	d13b      	bne.n	37380 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   37308:	4638      	mov	r0, r7
   3730a:	f006 f9c3 	bl	3d694 <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
   3730e:	4a2d      	ldr	r2, [pc, #180]	; (373c4 <ull_done+0x104>)
	last = last + 1;
   37310:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
   37312:	f892 c001 	ldrb.w	ip, [r2, #1]
   37316:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   37318:	3301      	adds	r3, #1
	done->extra.type = 0U;
   3731a:	2100      	movs	r1, #0
   3731c:	b2db      	uxtb	r3, r3
		last = 0U;
   3731e:	459c      	cmp	ip, r3
   37320:	bf08      	it	eq
   37322:	460b      	moveq	r3, r1
	if (last == first) {
   37324:	4298      	cmp	r0, r3
   37326:	f887 1020 	strb.w	r1, [r7, #32]
	release = RXFIFO_RELEASE(done, link, done);
   3732a:	7811      	ldrb	r1, [r2, #0]
   3732c:	d01a      	beq.n	37364 <ull_done+0xa4>

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
   3732e:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   37330:	78d0      	ldrb	r0, [r2, #3]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   37332:	fb00 2101 	mla	r1, r0, r1, r2
   37336:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
   37338:	70d3      	strb	r3, [r2, #3]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   3733a:	2d00      	cmp	r5, #0
   3733c:	d0c8      	beq.n	372d0 <ull_done+0x10>
	return hdr->ref;
   3733e:	782b      	ldrb	r3, [r5, #0]
   37340:	2b00      	cmp	r3, #0
   37342:	d1c5      	bne.n	372d0 <ull_done+0x10>
   37344:	696b      	ldr	r3, [r5, #20]
   37346:	2b00      	cmp	r3, #0
   37348:	d0c2      	beq.n	372d0 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   3734a:	69a8      	ldr	r0, [r5, #24]
   3734c:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   3734e:	e9d6 0100 	ldrd	r0, r1, [r6]
   37352:	aa01      	add	r2, sp, #4
   37354:	f7fc fe3a 	bl	33fcc <memq_peek>
		if (link) {
   37358:	4604      	mov	r4, r0
   3735a:	2800      	cmp	r0, #0
   3735c:	d1c0      	bne.n	372e0 <ull_done+0x20>
}
   3735e:	b003      	add	sp, #12
   37360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
   37364:	4918      	ldr	r1, [pc, #96]	; (373c8 <ull_done+0x108>)
   37366:	4819      	ldr	r0, [pc, #100]	; (373cc <ull_done+0x10c>)
   37368:	f44f 6327 	mov.w	r3, #2672	; 0xa70
   3736c:	4642      	mov	r2, r8
   3736e:	f012 fbcb 	bl	49b08 <printk>
   37372:	4040      	eors	r0, r0
   37374:	f380 8811 	msr	BASEPRI, r0
   37378:	f04f 0003 	mov.w	r0, #3
   3737c:	df02      	svc	2
   3737e:	e7dc      	b.n	3733a <ull_done+0x7a>
		LL_ASSERT(0);
   37380:	4913      	ldr	r1, [pc, #76]	; (373d0 <ull_done+0x110>)
   37382:	4812      	ldr	r0, [pc, #72]	; (373cc <ull_done+0x10c>)
   37384:	f640 2369 	movw	r3, #2665	; 0xa69
   37388:	4642      	mov	r2, r8
   3738a:	f012 fbbd 	bl	49b08 <printk>
   3738e:	4040      	eors	r0, r0
   37390:	f380 8811 	msr	BASEPRI, r0
   37394:	f04f 0003 	mov.w	r0, #3
   37398:	df02      	svc	2
		break;
   3739a:	e7b8      	b.n	3730e <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
   3739c:	480b      	ldr	r0, [pc, #44]	; (373cc <ull_done+0x10c>)
   3739e:	f640 2312 	movw	r3, #2578	; 0xa12
   373a2:	4642      	mov	r2, r8
   373a4:	4649      	mov	r1, r9
   373a6:	f012 fbaf 	bl	49b08 <printk>
   373aa:	4040      	eors	r0, r0
   373ac:	f380 8811 	msr	BASEPRI, r0
   373b0:	f04f 0003 	mov.w	r0, #3
   373b4:	df02      	svc	2
   373b6:	e79e      	b.n	372f6 <ull_done+0x36>
   373b8:	20004c14 	.word	0x20004c14
   373bc:	00052d5c 	.word	0x00052d5c
   373c0:	00052da0 	.word	0x00052da0
   373c4:	20000a98 	.word	0x20000a98
   373c8:	00052db8 	.word	0x00052db8
   373cc:	00052bbc 	.word	0x00052bbc
   373d0:	00052c1c 	.word	0x00052c1c

000373d4 <rx_alloc>:
{
   373d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (max > mem_link_rx.quota_pdu) {
   373d8:	4f3b      	ldr	r7, [pc, #236]	; (374c8 <rx_alloc+0xf4>)
   373da:	783e      	ldrb	r6, [r7, #0]
   373dc:	4286      	cmp	r6, r0
   373de:	bf28      	it	cs
   373e0:	4606      	movcs	r6, r0
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   373e2:	b366      	cbz	r6, 3743e <rx_alloc+0x6a>
   373e4:	4d39      	ldr	r5, [pc, #228]	; (374cc <rx_alloc+0xf8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   373e6:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 374d0 <rx_alloc+0xfc>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   373ea:	78ec      	ldrb	r4, [r5, #3]
		link = mem_acquire(&mem_link_rx.free);
   373ec:	f107 0804 	add.w	r8, r7, #4
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   373f0:	f105 0a04 	add.w	sl, r5, #4
	if (last == count) {
   373f4:	786a      	ldrb	r2, [r5, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   373f6:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   373f8:	3401      	adds	r4, #1
   373fa:	b2e4      	uxtb	r4, r4
		last = 0U;
   373fc:	42a2      	cmp	r2, r4
   373fe:	bf08      	it	eq
   37400:	2400      	moveq	r4, #0
	if (last == first) {
   37402:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   37404:	4640      	mov	r0, r8
   37406:	d01c      	beq.n	37442 <rx_alloc+0x6e>
   37408:	f7fc fd72 	bl	33ef0 <mem_acquire>
   3740c:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   3740e:	4648      	mov	r0, r9
		if (!link) {
   37410:	f1bb 0f00 	cmp.w	fp, #0
   37414:	d013      	beq.n	3743e <rx_alloc+0x6a>
		rx = mem_acquire(&mem_pdu_rx.free);
   37416:	f7fc fd6b 	bl	33ef0 <mem_acquire>
		if (!rx) {
   3741a:	2800      	cmp	r0, #0
   3741c:	d048      	beq.n	374b0 <rx_alloc+0xdc>
		rx->link = link;
   3741e:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   37422:	78eb      	ldrb	r3, [r5, #3]
   37424:	782a      	ldrb	r2, [r5, #0]
   37426:	fb13 f302 	smulbb	r3, r3, r2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   3742a:	f84a 0003 	str.w	r0, [sl, r3]
	mem_link_rx.quota_pdu += delta;
   3742e:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   37430:	70ec      	strb	r4, [r5, #3]
		max--;
   37432:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
   37434:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   37436:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   3743a:	703b      	strb	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   3743c:	d1da      	bne.n	373f4 <rx_alloc+0x20>
}
   3743e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (mem_link_rx.quota_pdu &&
   37442:	783b      	ldrb	r3, [r7, #0]
   37444:	2b00      	cmp	r3, #0
   37446:	d0fa      	beq.n	3743e <rx_alloc+0x6a>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   37448:	f8df 9088 	ldr.w	r9, [pc, #136]	; 374d4 <rx_alloc+0x100>
		link = mem_acquire(&mem_link_rx.free);
   3744c:	4d22      	ldr	r5, [pc, #136]	; (374d8 <rx_alloc+0x104>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   3744e:	f899 4003 	ldrb.w	r4, [r9, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   37452:	4e1f      	ldr	r6, [pc, #124]	; (374d0 <rx_alloc+0xfc>)
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   37454:	f109 0804 	add.w	r8, r9, #4
	if (last == count) {
   37458:	f899 2001 	ldrb.w	r2, [r9, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   3745c:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
   37460:	3401      	adds	r4, #1
   37462:	b2e4      	uxtb	r4, r4
		last = 0U;
   37464:	42a2      	cmp	r2, r4
   37466:	bf08      	it	eq
   37468:	2400      	moveq	r4, #0
	if (last == first) {
   3746a:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   3746c:	4628      	mov	r0, r5
   3746e:	d0e6      	beq.n	3743e <rx_alloc+0x6a>
   37470:	f7fc fd3e 	bl	33ef0 <mem_acquire>
   37474:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   37476:	4630      	mov	r0, r6
		if (!link) {
   37478:	f1ba 0f00 	cmp.w	sl, #0
   3747c:	d0df      	beq.n	3743e <rx_alloc+0x6a>
		rx = mem_acquire(&mem_pdu_rx.free);
   3747e:	f7fc fd37 	bl	33ef0 <mem_acquire>
		link->mem = NULL;
   37482:	2300      	movs	r3, #0
		if (!rx) {
   37484:	b1d0      	cbz	r0, 374bc <rx_alloc+0xe8>
		link->mem = NULL;
   37486:	f8ca 3004 	str.w	r3, [sl, #4]
		rx->link = link;
   3748a:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   3748e:	f899 3003 	ldrb.w	r3, [r9, #3]
   37492:	f899 2000 	ldrb.w	r2, [r9]
   37496:	fb13 f302 	smulbb	r3, r3, r2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   3749a:	f848 0003 	str.w	r0, [r8, r3]
	mem_link_rx.quota_pdu += delta;
   3749e:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   374a0:	f889 4003 	strb.w	r4, [r9, #3]
   374a4:	3b01      	subs	r3, #1
   374a6:	b2db      	uxtb	r3, r3
   374a8:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   374aa:	2b00      	cmp	r3, #0
   374ac:	d1d4      	bne.n	37458 <rx_alloc+0x84>
   374ae:	e7c6      	b.n	3743e <rx_alloc+0x6a>
			mem_release(link, &mem_link_rx.free);
   374b0:	4658      	mov	r0, fp
   374b2:	4909      	ldr	r1, [pc, #36]	; (374d8 <rx_alloc+0x104>)
}
   374b4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
   374b8:	f7fc bd34 	b.w	33f24 <mem_release>
			mem_release(link, &mem_link_rx.free);
   374bc:	4650      	mov	r0, sl
   374be:	4906      	ldr	r1, [pc, #24]	; (374d8 <rx_alloc+0x104>)
}
   374c0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
   374c4:	f7fc bd2e 	b.w	33f24 <mem_release>
   374c8:	20004c2c 	.word	0x20004c2c
   374cc:	200009a8 	.word	0x200009a8
   374d0:	20004cfc 	.word	0x20004cfc
   374d4:	20000970 	.word	0x20000970
   374d8:	20004c30 	.word	0x20004c30

000374dc <rx_demux>:
{
   374dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   374e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 37690 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
   374e4:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 37694 <rx_demux+0x1b8>
			LL_ASSERT(rx);
   374e8:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 37698 <rx_demux+0x1bc>
   374ec:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 3769c <rx_demux+0x1c0>
{
   374f0:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   374f2:	e9d8 0100 	ldrd	r0, r1, [r8]
   374f6:	aa03      	add	r2, sp, #12
   374f8:	f7fc fd68 	bl	33fcc <memq_peek>
		if (link) {
   374fc:	4605      	mov	r5, r0
   374fe:	2800      	cmp	r0, #0
   37500:	d035      	beq.n	3756e <rx_demux+0x92>
			LL_ASSERT(rx);
   37502:	9b03      	ldr	r3, [sp, #12]
   37504:	2b00      	cmp	r3, #0
   37506:	f000 80a6 	beq.w	37656 <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   3750a:	7818      	ldrb	r0, [r3, #0]
   3750c:	aa04      	add	r2, sp, #16
   3750e:	a902      	add	r1, sp, #8
   37510:	f006 fb86 	bl	3dc20 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   37514:	4604      	mov	r4, r0
   37516:	2800      	cmp	r0, #0
   37518:	d055      	beq.n	375c6 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   3751a:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   3751e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   37522:	780f      	ldrb	r7, [r1, #0]
   37524:	f8ad 200a 	strh.w	r2, [sp, #10]
   37528:	ae05      	add	r6, sp, #20
   3752a:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   3752c:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   37530:	f006 fb90 	bl	3dc54 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   37534:	4621      	mov	r1, r4
   37536:	9a05      	ldr	r2, [sp, #20]
   37538:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   3753c:	f006 fbd2 	bl	3dce4 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   37540:	4620      	mov	r0, r4
   37542:	f006 fb45 	bl	3dbd0 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   37546:	4632      	mov	r2, r6
   37548:	4629      	mov	r1, r5
   3754a:	4638      	mov	r0, r7
   3754c:	f006 fb68 	bl	3dc20 <ull_conn_ack_by_last_peek>
	} while (link);
   37550:	4604      	mov	r4, r0
   37552:	2800      	cmp	r0, #0
   37554:	d1ec      	bne.n	37530 <rx_demux+0x54>
	k_sem_give(sem_recv);
   37556:	f8d9 0000 	ldr.w	r0, [r9]
   3755a:	f010 fded 	bl	48138 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   3755e:	e9d8 0100 	ldrd	r0, r1, [r8]
   37562:	aa03      	add	r2, sp, #12
   37564:	f7fc fd32 	bl	33fcc <memq_peek>
		if (link) {
   37568:	4605      	mov	r5, r0
   3756a:	2800      	cmp	r0, #0
   3756c:	d1c9      	bne.n	37502 <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   3756e:	aa04      	add	r2, sp, #16
   37570:	a902      	add	r1, sp, #8
   37572:	f10d 0007 	add.w	r0, sp, #7
   37576:	f006 fb37 	bl	3dbe8 <ull_conn_ack_peek>
			if (link) {
   3757a:	4604      	mov	r4, r0
   3757c:	2800      	cmp	r0, #0
   3757e:	d067      	beq.n	37650 <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
   37580:	9b04      	ldr	r3, [sp, #16]
   37582:	9305      	str	r3, [sp, #20]
   37584:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   37588:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   3758c:	f8ad 300a 	strh.w	r3, [sp, #10]
   37590:	ae05      	add	r6, sp, #20
   37592:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   37596:	f006 fb5d 	bl	3dc54 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   3759a:	4621      	mov	r1, r4
   3759c:	9a05      	ldr	r2, [sp, #20]
   3759e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   375a2:	f006 fb9f 	bl	3dce4 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   375a6:	4620      	mov	r0, r4
   375a8:	f006 fb12 	bl	3dbd0 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   375ac:	4632      	mov	r2, r6
   375ae:	4629      	mov	r1, r5
   375b0:	4638      	mov	r0, r7
   375b2:	f006 fb35 	bl	3dc20 <ull_conn_ack_by_last_peek>
	} while (link);
   375b6:	4604      	mov	r4, r0
   375b8:	2800      	cmp	r0, #0
   375ba:	d1ec      	bne.n	37596 <rx_demux+0xba>
	k_sem_give(sem_recv);
   375bc:	f8d9 0000 	ldr.w	r0, [r9]
   375c0:	f010 fdba 	bl	48138 <z_impl_k_sem_give>
	} while (link);
   375c4:	e7cb      	b.n	3755e <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   375c6:	9b03      	ldr	r3, [sp, #12]
   375c8:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   375ca:	791b      	ldrb	r3, [r3, #4]
   375cc:	3b01      	subs	r3, #1
   375ce:	2b16      	cmp	r3, #22
   375d0:	d80d      	bhi.n	375ee <rx_demux+0x112>
   375d2:	e8df f003 	tbb	[pc, r3]
   375d6:	0c1a      	.short	0x0c1a
   375d8:	0c1a0c38 	.word	0x0c1a0c38
   375dc:	0c0c0c0c 	.word	0x0c0c0c0c
   375e0:	0c0c0c0c 	.word	0x0c0c0c0c
   375e4:	0c0c0c0c 	.word	0x0c0c0c0c
   375e8:	2d0c0c0c 	.word	0x2d0c0c0c
   375ec:	1a          	.byte	0x1a
   375ed:	00          	.byte	0x00
		LL_ASSERT(0);
   375ee:	4a2a      	ldr	r2, [pc, #168]	; (37698 <rx_demux+0x1bc>)
   375f0:	492b      	ldr	r1, [pc, #172]	; (376a0 <rx_demux+0x1c4>)
   375f2:	482c      	ldr	r0, [pc, #176]	; (376a4 <rx_demux+0x1c8>)
   375f4:	f640 13ff 	movw	r3, #2559	; 0x9ff
   375f8:	f012 fa86 	bl	49b08 <printk>
   375fc:	4040      	eors	r0, r0
   375fe:	f380 8811 	msr	BASEPRI, r0
   37602:	f04f 0003 	mov.w	r0, #3
   37606:	df02      	svc	2
			if (nack) {
   37608:	e773      	b.n	374f2 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   3760a:	4921      	ldr	r1, [pc, #132]	; (37690 <rx_demux+0x1b4>)
   3760c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   37610:	2200      	movs	r2, #0
   37612:	f7fc fce3 	bl	33fdc <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   37616:	4b24      	ldr	r3, [pc, #144]	; (376a8 <rx_demux+0x1cc>)
		ll_rx_put(link, rx);
   37618:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   3761a:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   3761c:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   3761e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   37620:	4a22      	ldr	r2, [pc, #136]	; (376ac <rx_demux+0x1d0>)
   37622:	f7fc fcc9 	bl	33fb8 <memq_enqueue>
	k_sem_give(sem_recv);
   37626:	4b1b      	ldr	r3, [pc, #108]	; (37694 <rx_demux+0x1b8>)
   37628:	6818      	ldr	r0, [r3, #0]
   3762a:	f010 fd85 	bl	48138 <z_impl_k_sem_give>
			if (nack) {
   3762e:	e760      	b.n	374f2 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   37630:	4917      	ldr	r1, [pc, #92]	; (37690 <rx_demux+0x1b4>)
   37632:	f8d8 0004 	ldr.w	r0, [r8, #4]
   37636:	2200      	movs	r2, #0
   37638:	f7fc fcd0 	bl	33fdc <memq_dequeue>
		ull_conn_setup(link, rx);
   3763c:	9905      	ldr	r1, [sp, #20]
   3763e:	4628      	mov	r0, r5
   37640:	f003 f8b8 	bl	3a7b4 <ull_conn_setup>
			if (nack) {
   37644:	e755      	b.n	374f2 <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
   37646:	a905      	add	r1, sp, #20
   37648:	4628      	mov	r0, r5
   3764a:	f003 f8db 	bl	3a804 <ull_conn_rx>
		if (nack) {
   3764e:	b188      	cbz	r0, 37674 <rx_demux+0x198>
}
   37650:	b007      	add	sp, #28
   37652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   37656:	4813      	ldr	r0, [pc, #76]	; (376a4 <rx_demux+0x1c8>)
   37658:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
   3765c:	465a      	mov	r2, fp
   3765e:	4651      	mov	r1, sl
   37660:	f012 fa52 	bl	49b08 <printk>
   37664:	4040      	eors	r0, r0
   37666:	f380 8811 	msr	BASEPRI, r0
   3766a:	f04f 0003 	mov.w	r0, #3
   3766e:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   37670:	9b03      	ldr	r3, [sp, #12]
   37672:	e74a      	b.n	3750a <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   37674:	4906      	ldr	r1, [pc, #24]	; (37690 <rx_demux+0x1b4>)
   37676:	4602      	mov	r2, r0
   37678:	f8d8 0004 	ldr.w	r0, [r8, #4]
   3767c:	f7fc fcae 	bl	33fdc <memq_dequeue>
		if (rx) {
   37680:	9905      	ldr	r1, [sp, #20]
   37682:	2900      	cmp	r1, #0
   37684:	f43f af35 	beq.w	374f2 <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   37688:	4b07      	ldr	r3, [pc, #28]	; (376a8 <rx_demux+0x1cc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   3768a:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   3768c:	78db      	ldrb	r3, [r3, #3]
   3768e:	e7c6      	b.n	3761e <rx_demux+0x142>
   37690:	20004c24 	.word	0x20004c24
   37694:	20005238 	.word	0x20005238
   37698:	00052d5c 	.word	0x00052d5c
   3769c:	00052dc8 	.word	0x00052dc8
   376a0:	00052c1c 	.word	0x00052c1c
   376a4:	00052bbc 	.word	0x00052bbc
   376a8:	2000094c 	.word	0x2000094c
   376ac:	20004c20 	.word	0x20004c20

000376b0 <ll_rx_get>:
{
   376b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   376b4:	b085      	sub	sp, #20
   376b6:	e9cd 0100 	strd	r0, r1, [sp]
   376ba:	4e67      	ldr	r6, [pc, #412]	; (37858 <ll_rx_get+0x1a8>)
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   376bc:	4f67      	ldr	r7, [pc, #412]	; (3785c <ll_rx_get+0x1ac>)
	*node_rx = NULL;
   376be:	9a00      	ldr	r2, [sp, #0]
   376c0:	2300      	movs	r3, #0
   376c2:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   376c4:	e9d6 0100 	ldrd	r0, r1, [r6]
   376c8:	aa03      	add	r2, sp, #12
   376ca:	f7fc fc7f 	bl	33fcc <memq_peek>
	if (link) {
   376ce:	4605      	mov	r5, r0
   376d0:	2800      	cmp	r0, #0
   376d2:	f000 80a8 	beq.w	37826 <ll_rx_get+0x176>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   376d6:	9b03      	ldr	r3, [sp, #12]
   376d8:	4961      	ldr	r1, [pc, #388]	; (37860 <ll_rx_get+0x1b0>)
   376da:	781a      	ldrb	r2, [r3, #0]
   376dc:	9801      	ldr	r0, [sp, #4]
   376de:	f7ff fd93 	bl	37208 <tx_cmplt_get>
		if (!cmplt) {
   376e2:	2800      	cmp	r0, #0
   376e4:	f040 80a5 	bne.w	37832 <ll_rx_get+0x182>
			f = mfifo_tx_ack.f;
   376e8:	4c5e      	ldr	r4, [pc, #376]	; (37864 <ll_rx_get+0x1b4>)
   376ea:	78a3      	ldrb	r3, [r4, #2]
   376ec:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   376f0:	78e2      	ldrb	r2, [r4, #3]
   376f2:	4683      	mov	fp, r0
   376f4:	f10d 0109 	add.w	r1, sp, #9
   376f8:	f10d 000a 	add.w	r0, sp, #10
   376fc:	f7ff fd84 	bl	37208 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   37700:	ea4b 0200 	orr.w	r2, fp, r0
   37704:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   37708:	d1f2      	bne.n	376f0 <ll_rx_get+0x40>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   3770a:	9b03      	ldr	r3, [sp, #12]
   3770c:	7919      	ldrb	r1, [r3, #4]
   3770e:	2901      	cmp	r1, #1
   37710:	f040 809c 	bne.w	3784c <ll_rx_get+0x19c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   37714:	f8df b150 	ldr.w	fp, [pc, #336]	; 37868 <ll_rx_get+0x1b8>
				(void)memq_dequeue(memq_ll_rx.tail,
   37718:	494f      	ldr	r1, [pc, #316]	; (37858 <ll_rx_get+0x1a8>)
   3771a:	6870      	ldr	r0, [r6, #4]
   3771c:	f7fc fc5e 	bl	33fdc <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   37720:	f10b 0104 	add.w	r1, fp, #4
   37724:	4628      	mov	r0, r5
   37726:	f7fc fbfd 	bl	33f24 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   3772a:	f89b 3000 	ldrb.w	r3, [fp]
   3772e:	2b0f      	cmp	r3, #15
   37730:	d869      	bhi.n	37806 <ll_rx_get+0x156>
	mem_link_rx.quota_pdu += delta;
   37732:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   37734:	494d      	ldr	r1, [pc, #308]	; (3786c <ll_rx_get+0x1bc>)
   37736:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   37738:	f88b 3000 	strb.w	r3, [fp]
				mem_release(rx, &mem_pdu_rx.free);
   3773c:	f7fc fbf2 	bl	33f24 <mem_release>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   37740:	f89b 3000 	ldrb.w	r3, [fp]
   37744:	2b00      	cmp	r3, #0
   37746:	d0ba      	beq.n	376be <ll_rx_get+0xe>
   37748:	4d49      	ldr	r5, [pc, #292]	; (37870 <ll_rx_get+0x1c0>)
	last = last + 1;
   3774a:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   3774c:	786a      	ldrb	r2, [r5, #1]
   3774e:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   37750:	3401      	adds	r4, #1
   37752:	b2e4      	uxtb	r4, r4
		last = 0U;
   37754:	42a2      	cmp	r2, r4
   37756:	bf08      	it	eq
   37758:	2400      	moveq	r4, #0
	if (last == first) {
   3775a:	429c      	cmp	r4, r3
   3775c:	d01a      	beq.n	37794 <ll_rx_get+0xe4>
		link = mem_acquire(&mem_link_rx.free);
   3775e:	4845      	ldr	r0, [pc, #276]	; (37874 <ll_rx_get+0x1c4>)
   37760:	f7fc fbc6 	bl	33ef0 <mem_acquire>
		if (!link) {
   37764:	4680      	mov	r8, r0
   37766:	2800      	cmp	r0, #0
   37768:	d0a9      	beq.n	376be <ll_rx_get+0xe>
		rx = mem_acquire(&mem_pdu_rx.free);
   3776a:	4840      	ldr	r0, [pc, #256]	; (3786c <ll_rx_get+0x1bc>)
   3776c:	f7fc fbc0 	bl	33ef0 <mem_acquire>
		if (!rx) {
   37770:	2800      	cmp	r0, #0
   37772:	d061      	beq.n	37838 <ll_rx_get+0x188>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   37774:	462a      	mov	r2, r5
		rx->link = link;
   37776:	f8c0 8000 	str.w	r8, [r0]
   3777a:	78eb      	ldrb	r3, [r5, #3]
   3777c:	f812 1b04 	ldrb.w	r1, [r2], #4
   37780:	fb13 f301 	smulbb	r3, r3, r1
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   37784:	50d0      	str	r0, [r2, r3]
	mem_link_rx.quota_pdu += delta;
   37786:	f89b 3000 	ldrb.w	r3, [fp]
	*last = idx; /* Commit: Update write index */
   3778a:	70ec      	strb	r4, [r5, #3]
   3778c:	3b01      	subs	r3, #1
   3778e:	f88b 3000 	strb.w	r3, [fp]
	if (!max) {
   37792:	e794      	b.n	376be <ll_rx_get+0xe>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   37794:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 37878 <ll_rx_get+0x1c8>
		link = mem_acquire(&mem_link_rx.free);
   37798:	4c36      	ldr	r4, [pc, #216]	; (37874 <ll_rx_get+0x1c4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   3779a:	f898 9003 	ldrb.w	r9, [r8, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   3779e:	4d33      	ldr	r5, [pc, #204]	; (3786c <ll_rx_get+0x1bc>)
	if (last == count) {
   377a0:	f898 0001 	ldrb.w	r0, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   377a4:	f898 2002 	ldrb.w	r2, [r8, #2]
	last = last + 1;
   377a8:	f109 0301 	add.w	r3, r9, #1
   377ac:	fa5f f983 	uxtb.w	r9, r3
		last = 0U;
   377b0:	4548      	cmp	r0, r9
   377b2:	bf08      	it	eq
   377b4:	f04f 0900 	moveq.w	r9, #0
	if (last == first) {
   377b8:	4591      	cmp	r9, r2
		link = mem_acquire(&mem_link_rx.free);
   377ba:	4620      	mov	r0, r4
   377bc:	f43f af7f 	beq.w	376be <ll_rx_get+0xe>
   377c0:	f7fc fb96 	bl	33ef0 <mem_acquire>
   377c4:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   377c6:	4628      	mov	r0, r5
		if (!link) {
   377c8:	f1ba 0f00 	cmp.w	sl, #0
   377cc:	f43f af77 	beq.w	376be <ll_rx_get+0xe>
		rx = mem_acquire(&mem_pdu_rx.free);
   377d0:	f7fc fb8e 	bl	33ef0 <mem_acquire>
		link->mem = NULL;
   377d4:	2300      	movs	r3, #0
		if (!rx) {
   377d6:	2800      	cmp	r0, #0
   377d8:	d033      	beq.n	37842 <ll_rx_get+0x192>
		link->mem = NULL;
   377da:	f8ca 3004 	str.w	r3, [sl, #4]
		rx->link = link;
   377de:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   377e2:	f898 2003 	ldrb.w	r2, [r8, #3]
   377e6:	f898 c000 	ldrb.w	ip, [r8]
   377ea:	fb12 f20c 	smulbb	r2, r2, ip
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   377ee:	50b8      	str	r0, [r7, r2]
	mem_link_rx.quota_pdu += delta;
   377f0:	f89b 2000 	ldrb.w	r2, [fp]
	*last = idx; /* Commit: Update write index */
   377f4:	f888 9003 	strb.w	r9, [r8, #3]
   377f8:	3a01      	subs	r2, #1
   377fa:	b2d2      	uxtb	r2, r2
   377fc:	f88b 2000 	strb.w	r2, [fp]
	while (mem_link_rx.quota_pdu &&
   37800:	2a00      	cmp	r2, #0
   37802:	d1cd      	bne.n	377a0 <ll_rx_get+0xf0>
   37804:	e75b      	b.n	376be <ll_rx_get+0xe>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   37806:	4a1d      	ldr	r2, [pc, #116]	; (3787c <ll_rx_get+0x1cc>)
   37808:	491d      	ldr	r1, [pc, #116]	; (37880 <ll_rx_get+0x1d0>)
   3780a:	481e      	ldr	r0, [pc, #120]	; (37884 <ll_rx_get+0x1d4>)
   3780c:	f240 6306 	movw	r3, #1542	; 0x606
   37810:	f012 f97a 	bl	49b08 <printk>
   37814:	4040      	eors	r0, r0
   37816:	f380 8811 	msr	BASEPRI, r0
   3781a:	f04f 0003 	mov.w	r0, #3
   3781e:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   37820:	f89b 3000 	ldrb.w	r3, [fp]
   37824:	e785      	b.n	37732 <ll_rx_get+0x82>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   37826:	490f      	ldr	r1, [pc, #60]	; (37864 <ll_rx_get+0x1b4>)
   37828:	9801      	ldr	r0, [sp, #4]
   3782a:	78ca      	ldrb	r2, [r1, #3]
   3782c:	3102      	adds	r1, #2
   3782e:	f7ff fceb 	bl	37208 <tx_cmplt_get>
}
   37832:	b005      	add	sp, #20
   37834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   37838:	490e      	ldr	r1, [pc, #56]	; (37874 <ll_rx_get+0x1c4>)
   3783a:	4640      	mov	r0, r8
   3783c:	f7fc fb72 	bl	33f24 <mem_release>
			return;
   37840:	e73d      	b.n	376be <ll_rx_get+0xe>
			mem_release(link, &mem_link_rx.free);
   37842:	490c      	ldr	r1, [pc, #48]	; (37874 <ll_rx_get+0x1c4>)
   37844:	4650      	mov	r0, sl
   37846:	f7fc fb6d 	bl	33f24 <mem_release>
			return;
   3784a:	e738      	b.n	376be <ll_rx_get+0xe>
			*node_rx = rx;
   3784c:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   3784e:	4610      	mov	r0, r2
			*node_rx = rx;
   37850:	600b      	str	r3, [r1, #0]
}
   37852:	b005      	add	sp, #20
   37854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37858:	20004c1c 	.word	0x20004c1c
   3785c:	20000974 	.word	0x20000974
   37860:	2000094e 	.word	0x2000094e
   37864:	2000094c 	.word	0x2000094c
   37868:	20004c2c 	.word	0x20004c2c
   3786c:	20004cfc 	.word	0x20004cfc
   37870:	200009a8 	.word	0x200009a8
   37874:	20004c30 	.word	0x20004c30
   37878:	20000970 	.word	0x20000970
   3787c:	00052d5c 	.word	0x00052d5c
   37880:	00052dcc 	.word	0x00052dcc
   37884:	00052bbc 	.word	0x00052bbc

00037888 <ll_rx_dequeue>:
{
   37888:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   3788a:	4956      	ldr	r1, [pc, #344]	; (379e4 <ll_rx_dequeue+0x15c>)
{
   3788c:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   3788e:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   37890:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   37892:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   37894:	aa01      	add	r2, sp, #4
   37896:	f7fc fba1 	bl	33fdc <memq_dequeue>
	LL_ASSERT(link);
   3789a:	4604      	mov	r4, r0
   3789c:	2800      	cmp	r0, #0
   3789e:	d057      	beq.n	37950 <ll_rx_dequeue+0xc8>
	mem_release(link, &mem_link_rx.free);
   378a0:	4951      	ldr	r1, [pc, #324]	; (379e8 <ll_rx_dequeue+0x160>)
   378a2:	4620      	mov	r0, r4
   378a4:	f7fc fb3e 	bl	33f24 <mem_release>
	switch (rx->type) {
   378a8:	9901      	ldr	r1, [sp, #4]
   378aa:	790a      	ldrb	r2, [r1, #4]
   378ac:	2a1c      	cmp	r2, #28
   378ae:	d806      	bhi.n	378be <ll_rx_dequeue+0x36>
   378b0:	484e      	ldr	r0, [pc, #312]	; (379ec <ll_rx_dequeue+0x164>)
   378b2:	2301      	movs	r3, #1
   378b4:	4093      	lsls	r3, r2
   378b6:	4003      	ands	r3, r0
   378b8:	d131      	bne.n	3791e <ll_rx_dequeue+0x96>
   378ba:	2a16      	cmp	r2, #22
   378bc:	d00e      	beq.n	378dc <ll_rx_dequeue+0x54>
		LL_ASSERT(0);
   378be:	4a4c      	ldr	r2, [pc, #304]	; (379f0 <ll_rx_dequeue+0x168>)
   378c0:	494c      	ldr	r1, [pc, #304]	; (379f4 <ll_rx_dequeue+0x16c>)
   378c2:	484d      	ldr	r0, [pc, #308]	; (379f8 <ll_rx_dequeue+0x170>)
   378c4:	f240 43c7 	movw	r3, #1223	; 0x4c7
   378c8:	f012 f91e 	bl	49b08 <printk>
   378cc:	4040      	eors	r0, r0
   378ce:	f380 8811 	msr	BASEPRI, r0
   378d2:	f04f 0003 	mov.w	r0, #3
   378d6:	df02      	svc	2
}
   378d8:	b002      	add	sp, #8
   378da:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   378dc:	7f0a      	ldrb	r2, [r1, #28]
			lll = ftr->param;
   378de:	688d      	ldr	r5, [r1, #8]
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   378e0:	2a3c      	cmp	r2, #60	; 0x3c
			adv = HDR_LLL2ULL(lll);
   378e2:	682c      	ldr	r4, [r5, #0]
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   378e4:	d042      	beq.n	3796c <ll_rx_dequeue+0xe4>
   378e6:	7f4a      	ldrb	r2, [r1, #29]
   378e8:	b352      	cbz	r2, 37940 <ll_rx_dequeue+0xb8>
				if (adv->node_rx_cc_free) {
   378ea:	6e60      	ldr	r0, [r4, #100]	; 0x64
   378ec:	b118      	cbz	r0, 378f6 <ll_rx_dequeue+0x6e>
					mem_release(rx_free, &mem_pdu_rx.free);
   378ee:	4943      	ldr	r1, [pc, #268]	; (379fc <ll_rx_dequeue+0x174>)
					adv->node_rx_cc_free = NULL;
   378f0:	6663      	str	r3, [r4, #100]	; 0x64
					mem_release(rx_free, &mem_pdu_rx.free);
   378f2:	f7fc fb17 	bl	33f24 <mem_release>
			adv->is_enabled = 0U;
   378f6:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   378fa:	f36f 0300 	bfc	r3, #0, #1
   378fe:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			      (ull_scan_is_enabled(0) << 1)) |
   37902:	2000      	movs	r0, #0
   37904:	f001 fcc4 	bl	39290 <ull_scan_is_enabled>
   37908:	4604      	mov	r4, r0
			      ull_adv_is_enabled(0));
   3790a:	2000      	movs	r0, #0
   3790c:	f001 fa9c 	bl	38e48 <ull_adv_is_enabled>
			if (!bm) {
   37910:	ea50 0044 	orrs.w	r0, r0, r4, lsl #1
   37914:	d1e0      	bne.n	378d8 <ll_rx_dequeue+0x50>
				ull_filter_adv_scan_state_cb(0);
   37916:	f007 feab 	bl	3f670 <ull_filter_adv_scan_state_cb>
}
   3791a:	b002      	add	sp, #8
   3791c:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   3791e:	2a00      	cmp	r2, #0
   37920:	d1da      	bne.n	378d8 <ll_rx_dequeue+0x50>
   37922:	4a33      	ldr	r2, [pc, #204]	; (379f0 <ll_rx_dequeue+0x168>)
   37924:	4936      	ldr	r1, [pc, #216]	; (37a00 <ll_rx_dequeue+0x178>)
   37926:	4834      	ldr	r0, [pc, #208]	; (379f8 <ll_rx_dequeue+0x170>)
   37928:	f240 43c3 	movw	r3, #1219	; 0x4c3
   3792c:	f012 f8ec 	bl	49b08 <printk>
   37930:	4040      	eors	r0, r0
   37932:	f380 8811 	msr	BASEPRI, r0
   37936:	f04f 0003 	mov.w	r0, #3
   3793a:	df02      	svc	2
}
   3793c:	b002      	add	sp, #8
   3793e:	bd70      	pop	{r4, r5, r6, pc}
			scan->is_enabled = 0U;
   37940:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
			scan->lll.conn = NULL;
   37944:	6222      	str	r2, [r4, #32]
			scan->is_enabled = 0U;
   37946:	f362 0300 	bfi	r3, r2, #0, #1
   3794a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   3794e:	e7d8      	b.n	37902 <ll_rx_dequeue+0x7a>
	LL_ASSERT(link);
   37950:	4a27      	ldr	r2, [pc, #156]	; (379f0 <ll_rx_dequeue+0x168>)
   37952:	492c      	ldr	r1, [pc, #176]	; (37a04 <ll_rx_dequeue+0x17c>)
   37954:	4828      	ldr	r0, [pc, #160]	; (379f8 <ll_rx_dequeue+0x170>)
   37956:	f240 33a1 	movw	r3, #929	; 0x3a1
   3795a:	f012 f8d5 	bl	49b08 <printk>
   3795e:	4040      	eors	r0, r0
   37960:	f380 8811 	msr	BASEPRI, r0
   37964:	f04f 0003 	mov.w	r0, #3
   37968:	df02      	svc	2
   3796a:	e799      	b.n	378a0 <ll_rx_dequeue+0x18>
				conn_lll = lll->conn;
   3796c:	686e      	ldr	r6, [r5, #4]
				LL_ASSERT(conn_lll);
   3796e:	b1ee      	cbz	r6, 379ac <ll_rx_dequeue+0x124>
				LL_ASSERT(!conn_lll->link_tx_free);
   37970:	6db3      	ldr	r3, [r6, #88]	; 0x58
				lll->conn = NULL;
   37972:	2200      	movs	r2, #0
   37974:	606a      	str	r2, [r5, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   37976:	b163      	cbz	r3, 37992 <ll_rx_dequeue+0x10a>
   37978:	4a1d      	ldr	r2, [pc, #116]	; (379f0 <ll_rx_dequeue+0x168>)
   3797a:	4923      	ldr	r1, [pc, #140]	; (37a08 <ll_rx_dequeue+0x180>)
   3797c:	481e      	ldr	r0, [pc, #120]	; (379f8 <ll_rx_dequeue+0x170>)
   3797e:	f240 431a 	movw	r3, #1050	; 0x41a
   37982:	f012 f8c1 	bl	49b08 <printk>
   37986:	4040      	eors	r0, r0
   37988:	f380 8811 	msr	BASEPRI, r0
   3798c:	f04f 0003 	mov.w	r0, #3
   37990:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   37992:	f106 014c 	add.w	r1, r6, #76	; 0x4c
   37996:	f106 0048 	add.w	r0, r6, #72	; 0x48
   3799a:	f7fc fb03 	bl	33fa4 <memq_deinit>
				LL_ASSERT(link);
   3799e:	4605      	mov	r5, r0
   379a0:	b190      	cbz	r0, 379c8 <ll_rx_dequeue+0x140>
				ll_conn_release(conn);
   379a2:	6830      	ldr	r0, [r6, #0]
				conn_lll->link_tx_free = link;
   379a4:	65b5      	str	r5, [r6, #88]	; 0x58
				ll_conn_release(conn);
   379a6:	f002 fb5b 	bl	3a060 <ll_conn_release>
   379aa:	e7a4      	b.n	378f6 <ll_rx_dequeue+0x6e>
				LL_ASSERT(conn_lll);
   379ac:	4a10      	ldr	r2, [pc, #64]	; (379f0 <ll_rx_dequeue+0x168>)
   379ae:	4917      	ldr	r1, [pc, #92]	; (37a0c <ll_rx_dequeue+0x184>)
   379b0:	4811      	ldr	r0, [pc, #68]	; (379f8 <ll_rx_dequeue+0x170>)
   379b2:	f240 4317 	movw	r3, #1047	; 0x417
   379b6:	f012 f8a7 	bl	49b08 <printk>
   379ba:	4040      	eors	r0, r0
   379bc:	f380 8811 	msr	BASEPRI, r0
   379c0:	f04f 0003 	mov.w	r0, #3
   379c4:	df02      	svc	2
   379c6:	e7d3      	b.n	37970 <ll_rx_dequeue+0xe8>
				LL_ASSERT(link);
   379c8:	4a09      	ldr	r2, [pc, #36]	; (379f0 <ll_rx_dequeue+0x168>)
   379ca:	490e      	ldr	r1, [pc, #56]	; (37a04 <ll_rx_dequeue+0x17c>)
   379cc:	480a      	ldr	r0, [pc, #40]	; (379f8 <ll_rx_dequeue+0x170>)
   379ce:	f240 431d 	movw	r3, #1053	; 0x41d
   379d2:	f012 f899 	bl	49b08 <printk>
   379d6:	4040      	eors	r0, r0
   379d8:	f380 8811 	msr	BASEPRI, r0
   379dc:	f04f 0003 	mov.w	r0, #3
   379e0:	df02      	svc	2
   379e2:	e7de      	b.n	379a2 <ll_rx_dequeue+0x11a>
   379e4:	20004c1c 	.word	0x20004c1c
   379e8:	20004c30 	.word	0x20004c30
   379ec:	1f800029 	.word	0x1f800029
   379f0:	00052d5c 	.word	0x00052d5c
   379f4:	00052c1c 	.word	0x00052c1c
   379f8:	00052bbc 	.word	0x00052bbc
   379fc:	20004cfc 	.word	0x20004cfc
   37a00:	00052e30 	.word	0x00052e30
   37a04:	00053124 	.word	0x00053124
   37a08:	00052e18 	.word	0x00052e18
   37a0c:	00052e0c 	.word	0x00052e0c

00037a10 <ll_rx_mem_release>:
{
   37a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   37a14:	6804      	ldr	r4, [r0, #0]
{
   37a16:	4680      	mov	r8, r0
	while (rx) {
   37a18:	b30c      	cbz	r4, 37a5e <ll_rx_mem_release+0x4e>
			LL_ASSERT(0);
   37a1a:	4f5b      	ldr	r7, [pc, #364]	; (37b88 <ll_rx_mem_release+0x178>)
   37a1c:	f8df 916c 	ldr.w	r9, [pc, #364]	; 37b8c <ll_rx_mem_release+0x17c>
   37a20:	4e5b      	ldr	r6, [pc, #364]	; (37b90 <ll_rx_mem_release+0x180>)
		rx = rx->next;
   37a22:	4625      	mov	r5, r4
   37a24:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   37a26:	792a      	ldrb	r2, [r5, #4]
   37a28:	2a1c      	cmp	r2, #28
   37a2a:	d809      	bhi.n	37a40 <ll_rx_mem_release+0x30>
   37a2c:	4959      	ldr	r1, [pc, #356]	; (37b94 <ll_rx_mem_release+0x184>)
   37a2e:	2301      	movs	r3, #1
   37a30:	4093      	lsls	r3, r2
   37a32:	ea13 0a01 	ands.w	sl, r3, r1
   37a36:	d12e      	bne.n	37a96 <ll_rx_mem_release+0x86>
   37a38:	2a17      	cmp	r2, #23
   37a3a:	d04a      	beq.n	37ad2 <ll_rx_mem_release+0xc2>
   37a3c:	2a16      	cmp	r2, #22
   37a3e:	d016      	beq.n	37a6e <ll_rx_mem_release+0x5e>
			LL_ASSERT(0);
   37a40:	f240 53fa 	movw	r3, #1530	; 0x5fa
   37a44:	463a      	mov	r2, r7
   37a46:	4649      	mov	r1, r9
   37a48:	4630      	mov	r0, r6
   37a4a:	f012 f85d 	bl	49b08 <printk>
   37a4e:	4040      	eors	r0, r0
   37a50:	f380 8811 	msr	BASEPRI, r0
   37a54:	f04f 0003 	mov.w	r0, #3
   37a58:	df02      	svc	2
	while (rx) {
   37a5a:	2c00      	cmp	r4, #0
   37a5c:	d1e1      	bne.n	37a22 <ll_rx_mem_release+0x12>
	*node_rx = rx;
   37a5e:	2300      	movs	r3, #0
   37a60:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
   37a64:	20ff      	movs	r0, #255	; 0xff
}
   37a66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   37a6a:	f7ff bcb3 	b.w	373d4 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   37a6e:	7f2b      	ldrb	r3, [r5, #28]
   37a70:	2b3c      	cmp	r3, #60	; 0x3c
   37a72:	d063      	beq.n	37b3c <ll_rx_mem_release+0x12c>
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
   37a74:	2b02      	cmp	r3, #2
   37a76:	d069      	beq.n	37b4c <ll_rx_mem_release+0x13c>
				LL_ASSERT(!cc->status);
   37a78:	b1db      	cbz	r3, 37ab2 <ll_rx_mem_release+0xa2>
   37a7a:	4a43      	ldr	r2, [pc, #268]	; (37b88 <ll_rx_mem_release+0x178>)
   37a7c:	4946      	ldr	r1, [pc, #280]	; (37b98 <ll_rx_mem_release+0x188>)
   37a7e:	4844      	ldr	r0, [pc, #272]	; (37b90 <ll_rx_mem_release+0x180>)
   37a80:	f240 532b 	movw	r3, #1323	; 0x52b
   37a84:	f012 f840 	bl	49b08 <printk>
   37a88:	4040      	eors	r0, r0
   37a8a:	f380 8811 	msr	BASEPRI, r0
   37a8e:	f04f 0003 	mov.w	r0, #3
   37a92:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   37a94:	792a      	ldrb	r2, [r5, #4]
   37a96:	b962      	cbnz	r2, 37ab2 <ll_rx_mem_release+0xa2>
   37a98:	4940      	ldr	r1, [pc, #256]	; (37b9c <ll_rx_mem_release+0x18c>)
   37a9a:	f240 537d 	movw	r3, #1405	; 0x57d
   37a9e:	463a      	mov	r2, r7
   37aa0:	4630      	mov	r0, r6
   37aa2:	f012 f831 	bl	49b08 <printk>
   37aa6:	4040      	eors	r0, r0
   37aa8:	f380 8811 	msr	BASEPRI, r0
   37aac:	f04f 0003 	mov.w	r0, #3
   37ab0:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   37ab2:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 37ba0 <ll_rx_mem_release+0x190>
   37ab6:	f89a 3000 	ldrb.w	r3, [sl]
   37aba:	2b0f      	cmp	r3, #15
   37abc:	d82e      	bhi.n	37b1c <ll_rx_mem_release+0x10c>
	mem_link_rx.quota_pdu += delta;
   37abe:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   37ac0:	4938      	ldr	r1, [pc, #224]	; (37ba4 <ll_rx_mem_release+0x194>)
	mem_link_rx.quota_pdu += delta;
   37ac2:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
   37ac6:	4628      	mov	r0, r5
   37ac8:	f7fc fa2c 	bl	33f24 <mem_release>
	while (rx) {
   37acc:	2c00      	cmp	r4, #0
   37ace:	d1a8      	bne.n	37a22 <ll_rx_mem_release+0x12>
   37ad0:	e7c5      	b.n	37a5e <ll_rx_mem_release+0x4e>
			if (IS_ACL_HANDLE(rx_free->handle)) {
   37ad2:	88e8      	ldrh	r0, [r5, #6]
   37ad4:	2805      	cmp	r0, #5
   37ad6:	d8c0      	bhi.n	37a5a <ll_rx_mem_release+0x4a>
				conn = ll_conn_get(rx_free->handle);
   37ad8:	f002 fad0 	bl	3a07c <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
   37adc:	6f43      	ldr	r3, [r0, #116]	; 0x74
				conn = ll_conn_get(rx_free->handle);
   37ade:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
   37ae0:	b163      	cbz	r3, 37afc <ll_rx_mem_release+0xec>
   37ae2:	4a29      	ldr	r2, [pc, #164]	; (37b88 <ll_rx_mem_release+0x178>)
   37ae4:	4930      	ldr	r1, [pc, #192]	; (37ba8 <ll_rx_mem_release+0x198>)
   37ae6:	482a      	ldr	r0, [pc, #168]	; (37b90 <ll_rx_mem_release+0x180>)
   37ae8:	f240 53ec 	movw	r3, #1516	; 0x5ec
   37aec:	f012 f80c 	bl	49b08 <printk>
   37af0:	4040      	eors	r0, r0
   37af2:	f380 8811 	msr	BASEPRI, r0
   37af6:	f04f 0003 	mov.w	r0, #3
   37afa:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
   37afc:	f105 0168 	add.w	r1, r5, #104	; 0x68
   37b00:	f105 0064 	add.w	r0, r5, #100	; 0x64
   37b04:	f7fc fa4e 	bl	33fa4 <memq_deinit>
				LL_ASSERT(link);
   37b08:	4682      	mov	sl, r0
   37b0a:	b370      	cbz	r0, 37b6a <ll_rx_mem_release+0x15a>
				conn->lll.link_tx_free = link;
   37b0c:	f8c5 a074 	str.w	sl, [r5, #116]	; 0x74
				ll_conn_release(conn);
   37b10:	4628      	mov	r0, r5
   37b12:	f002 faa5 	bl	3a060 <ll_conn_release>
	while (rx) {
   37b16:	2c00      	cmp	r4, #0
   37b18:	d183      	bne.n	37a22 <ll_rx_mem_release+0x12>
   37b1a:	e7a0      	b.n	37a5e <ll_rx_mem_release+0x4e>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   37b1c:	4923      	ldr	r1, [pc, #140]	; (37bac <ll_rx_mem_release+0x19c>)
   37b1e:	f240 6306 	movw	r3, #1542	; 0x606
   37b22:	463a      	mov	r2, r7
   37b24:	4630      	mov	r0, r6
   37b26:	f011 ffef 	bl	49b08 <printk>
   37b2a:	4040      	eors	r0, r0
   37b2c:	f380 8811 	msr	BASEPRI, r0
   37b30:	f04f 0003 	mov.w	r0, #3
   37b34:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   37b36:	f89a 3000 	ldrb.w	r3, [sl]
   37b3a:	e7c0      	b.n	37abe <ll_rx_mem_release+0xae>
				mem_release(rx_free, &mem_pdu_rx.free);
   37b3c:	4919      	ldr	r1, [pc, #100]	; (37ba4 <ll_rx_mem_release+0x194>)
   37b3e:	4628      	mov	r0, r5
   37b40:	f7fc f9f0 	bl	33f24 <mem_release>
	while (rx) {
   37b44:	2c00      	cmp	r4, #0
   37b46:	f47f af6c 	bne.w	37a22 <ll_rx_mem_release+0x12>
   37b4a:	e788      	b.n	37a5e <ll_rx_mem_release+0x4e>
				ull_central_cleanup(rx_free);
   37b4c:	4628      	mov	r0, r5
   37b4e:	f006 fdfb 	bl	3e748 <ull_central_cleanup>
				if (!ull_adv_is_enabled_get(0))
   37b52:	4650      	mov	r0, sl
   37b54:	f001 f96a 	bl	38e2c <ull_adv_is_enabled_get>
   37b58:	2800      	cmp	r0, #0
   37b5a:	f47f af7e 	bne.w	37a5a <ll_rx_mem_release+0x4a>
					ull_filter_adv_scan_state_cb(0);
   37b5e:	f007 fd87 	bl	3f670 <ull_filter_adv_scan_state_cb>
	while (rx) {
   37b62:	2c00      	cmp	r4, #0
   37b64:	f47f af5d 	bne.w	37a22 <ll_rx_mem_release+0x12>
   37b68:	e779      	b.n	37a5e <ll_rx_mem_release+0x4e>
				LL_ASSERT(link);
   37b6a:	4a07      	ldr	r2, [pc, #28]	; (37b88 <ll_rx_mem_release+0x178>)
   37b6c:	4910      	ldr	r1, [pc, #64]	; (37bb0 <ll_rx_mem_release+0x1a0>)
   37b6e:	4808      	ldr	r0, [pc, #32]	; (37b90 <ll_rx_mem_release+0x180>)
   37b70:	f240 53ef 	movw	r3, #1519	; 0x5ef
   37b74:	f011 ffc8 	bl	49b08 <printk>
   37b78:	4040      	eors	r0, r0
   37b7a:	f380 8811 	msr	BASEPRI, r0
   37b7e:	f04f 0003 	mov.w	r0, #3
   37b82:	df02      	svc	2
   37b84:	e7c2      	b.n	37b0c <ll_rx_mem_release+0xfc>
   37b86:	bf00      	nop
   37b88:	00052d5c 	.word	0x00052d5c
   37b8c:	00052c1c 	.word	0x00052c1c
   37b90:	00052bbc 	.word	0x00052bbc
   37b94:	1f000029 	.word	0x1f000029
   37b98:	00052e50 	.word	0x00052e50
   37b9c:	00052e5c 	.word	0x00052e5c
   37ba0:	20004c2c 	.word	0x20004c2c
   37ba4:	20004cfc 	.word	0x20004cfc
   37ba8:	00052e80 	.word	0x00052e80
   37bac:	00052dcc 	.word	0x00052dcc
   37bb0:	00053124 	.word	0x00053124

00037bb4 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   37bb4:	4801      	ldr	r0, [pc, #4]	; (37bbc <ll_rx_link_alloc+0x8>)
   37bb6:	f7fc b99b 	b.w	33ef0 <mem_acquire>
   37bba:	bf00      	nop
   37bbc:	20004c30 	.word	0x20004c30

00037bc0 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   37bc0:	4901      	ldr	r1, [pc, #4]	; (37bc8 <ll_rx_link_release+0x8>)
   37bc2:	f7fc b9af 	b.w	33f24 <mem_release>
   37bc6:	bf00      	nop
   37bc8:	20004c30 	.word	0x20004c30

00037bcc <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   37bcc:	4801      	ldr	r0, [pc, #4]	; (37bd4 <ll_rx_alloc+0x8>)
   37bce:	f7fc b98f 	b.w	33ef0 <mem_acquire>
   37bd2:	bf00      	nop
   37bd4:	20004cfc 	.word	0x20004cfc

00037bd8 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   37bd8:	4901      	ldr	r1, [pc, #4]	; (37be0 <ll_rx_release+0x8>)
   37bda:	f7fc b9a3 	b.w	33f24 <mem_release>
   37bde:	bf00      	nop
   37be0:	20004cfc 	.word	0x20004cfc

00037be4 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   37be4:	4b02      	ldr	r3, [pc, #8]	; (37bf0 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   37be6:	4a03      	ldr	r2, [pc, #12]	; (37bf4 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   37be8:	78db      	ldrb	r3, [r3, #3]
   37bea:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   37bec:	f7fc b9e4 	b.w	33fb8 <memq_enqueue>
   37bf0:	2000094c 	.word	0x2000094c
   37bf4:	20004c20 	.word	0x20004c20

00037bf8 <ll_rx_sched>:
	k_sem_give(sem_recv);
   37bf8:	4b01      	ldr	r3, [pc, #4]	; (37c00 <ll_rx_sched+0x8>)
   37bfa:	6818      	ldr	r0, [r3, #0]
   37bfc:	f010 ba9c 	b.w	48138 <z_impl_k_sem_give>
   37c00:	20005238 	.word	0x20005238

00037c04 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   37c04:	490d      	ldr	r1, [pc, #52]	; (37c3c <ll_pdu_rx_alloc_peek+0x38>)
   37c06:	788a      	ldrb	r2, [r1, #2]
   37c08:	78cb      	ldrb	r3, [r1, #3]
	if (last >= first) {
   37c0a:	429a      	cmp	r2, r3
   37c0c:	d80d      	bhi.n	37c2a <ll_pdu_rx_alloc_peek+0x26>
		return last - first;
   37c0e:	eba3 0c02 	sub.w	ip, r3, r2
   37c12:	fa5f fc8c 	uxtb.w	ip, ip
   37c16:	4560      	cmp	r0, ip
   37c18:	d80e      	bhi.n	37c38 <ll_pdu_rx_alloc_peek+0x34>
	if (first == last) {
   37c1a:	429a      	cmp	r2, r3
   37c1c:	d00c      	beq.n	37c38 <ll_pdu_rx_alloc_peek+0x34>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   37c1e:	7809      	ldrb	r1, [r1, #0]
	return *((void **)(fifo + first * size));
   37c20:	4b07      	ldr	r3, [pc, #28]	; (37c40 <ll_pdu_rx_alloc_peek+0x3c>)
   37c22:	fb12 f201 	smulbb	r2, r2, r1
   37c26:	5898      	ldr	r0, [r3, r2]
   37c28:	4770      	bx	lr
		return count - first + last;
   37c2a:	f891 c001 	ldrb.w	ip, [r1, #1]
   37c2e:	4463      	add	r3, ip
   37c30:	1a9b      	subs	r3, r3, r2
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   37c32:	b2db      	uxtb	r3, r3
   37c34:	4298      	cmp	r0, r3
   37c36:	d9f2      	bls.n	37c1e <ll_pdu_rx_alloc_peek+0x1a>
		return NULL;
   37c38:	2000      	movs	r0, #0
}
   37c3a:	4770      	bx	lr
   37c3c:	20000970 	.word	0x20000970
   37c40:	20000974 	.word	0x20000974

00037c44 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   37c44:	4b09      	ldr	r3, [pc, #36]	; (37c6c <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   37c46:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   37c48:	78da      	ldrb	r2, [r3, #3]
   37c4a:	7818      	ldrb	r0, [r3, #0]
   37c4c:	f893 c001 	ldrb.w	ip, [r3, #1]
   37c50:	428a      	cmp	r2, r1
   37c52:	d009      	beq.n	37c68 <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   37c54:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   37c56:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   37c5a:	b2d2      	uxtb	r2, r2
	if (_first == count) {
		_first = 0U;
   37c5c:	4594      	cmp	ip, r2
   37c5e:	bf08      	it	eq
   37c60:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   37c62:	6840      	ldr	r0, [r0, #4]
	}

	*first = _first; /* Write back read-index */
   37c64:	709a      	strb	r2, [r3, #2]

	return mem;
   37c66:	4770      	bx	lr
		return NULL;
   37c68:	2000      	movs	r0, #0
}
   37c6a:	4770      	bx	lr
   37c6c:	20000970 	.word	0x20000970

00037c70 <ll_tx_ack_put>:
{
   37c70:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   37c72:	4c14      	ldr	r4, [pc, #80]	; (37cc4 <ll_tx_ack_put+0x54>)
   37c74:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   37c76:	f894 e001 	ldrb.w	lr, [r4, #1]
   37c7a:	f894 c002 	ldrb.w	ip, [r4, #2]
   37c7e:	7825      	ldrb	r5, [r4, #0]
	last = last + 1;
   37c80:	1c53      	adds	r3, r2, #1
   37c82:	b2db      	uxtb	r3, r3
		last = 0U;
   37c84:	459e      	cmp	lr, r3
   37c86:	bf08      	it	eq
   37c88:	2300      	moveq	r3, #0
	if (last == first) {
   37c8a:	459c      	cmp	ip, r3
   37c8c:	d009      	beq.n	37ca2 <ll_tx_ack_put+0x32>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   37c8e:	fb12 f205 	smulbb	r2, r2, r5
   37c92:	f104 0c04 	add.w	ip, r4, #4
	tx->handle = handle;
   37c96:	f82c 0002 	strh.w	r0, [ip, r2]
   37c9a:	4462      	add	r2, ip
	tx->node = node_tx;
   37c9c:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
   37c9e:	70e3      	strb	r3, [r4, #3]
}
   37ca0:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
   37ca2:	4a09      	ldr	r2, [pc, #36]	; (37cc8 <ll_tx_ack_put+0x58>)
   37ca4:	4909      	ldr	r1, [pc, #36]	; (37ccc <ll_tx_ack_put+0x5c>)
   37ca6:	480a      	ldr	r0, [pc, #40]	; (37cd0 <ll_tx_ack_put+0x60>)
   37ca8:	f240 634e 	movw	r3, #1614	; 0x64e
   37cac:	f011 ff2c 	bl	49b08 <printk>
   37cb0:	4040      	eors	r0, r0
   37cb2:	f380 8811 	msr	BASEPRI, r0
   37cb6:	f04f 0003 	mov.w	r0, #3
   37cba:	df02      	svc	2
	tx->handle = handle;
   37cbc:	2300      	movs	r3, #0
   37cbe:	801b      	strh	r3, [r3, #0]
   37cc0:	deff      	udf	#255	; 0xff
   37cc2:	bf00      	nop
   37cc4:	2000094c 	.word	0x2000094c
   37cc8:	00052d5c 	.word	0x00052d5c
   37ccc:	00053118 	.word	0x00053118
   37cd0:	00052bbc 	.word	0x00052bbc

00037cd4 <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   37cd4:	2200      	movs	r2, #0
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   37cd6:	230b      	movs	r3, #11
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   37cd8:	7002      	strb	r2, [r0, #0]
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   37cda:	700b      	strb	r3, [r1, #0]
}
   37cdc:	4770      	bx	lr
   37cde:	bf00      	nop

00037ce0 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   37ce0:	2200      	movs	r2, #0
{
   37ce2:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   37ce4:	4611      	mov	r1, r2
   37ce6:	4b0a      	ldr	r3, [pc, #40]	; (37d10 <ll_radio_state_abort+0x30>)
   37ce8:	2001      	movs	r0, #1
   37cea:	f7fc f9db 	bl	340a4 <mayfly_enqueue>
	LL_ASSERT(!ret);
   37cee:	b900      	cbnz	r0, 37cf2 <ll_radio_state_abort+0x12>
}
   37cf0:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   37cf2:	4a08      	ldr	r2, [pc, #32]	; (37d14 <ll_radio_state_abort+0x34>)
   37cf4:	4908      	ldr	r1, [pc, #32]	; (37d18 <ll_radio_state_abort+0x38>)
   37cf6:	4809      	ldr	r0, [pc, #36]	; (37d1c <ll_radio_state_abort+0x3c>)
   37cf8:	f240 6366 	movw	r3, #1638	; 0x666
   37cfc:	f011 ff04 	bl	49b08 <printk>
   37d00:	4040      	eors	r0, r0
   37d02:	f380 8811 	msr	BASEPRI, r0
   37d06:	f04f 0003 	mov.w	r0, #3
   37d0a:	df02      	svc	2
}
   37d0c:	bd08      	pop	{r3, pc}
   37d0e:	bf00      	nop
   37d10:	2000092c 	.word	0x2000092c
   37d14:	00052d5c 	.word	0x00052d5c
   37d18:	00052e98 	.word	0x00052e98
   37d1c:	00052bbc 	.word	0x00052bbc

00037d20 <ull_ticker_status_take>:
	if (ret == TICKER_STATUS_BUSY) {
   37d20:	f030 0302 	bics.w	r3, r0, #2
{
   37d24:	b510      	push	{r4, lr}
   37d26:	460c      	mov	r4, r1
	if (ret == TICKER_STATUS_BUSY) {
   37d28:	d002      	beq.n	37d30 <ull_ticker_status_take+0x10>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   37d2a:	680b      	ldr	r3, [r1, #0]
   37d2c:	2b02      	cmp	r3, #2
   37d2e:	d008      	beq.n	37d42 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   37d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   37d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   37d38:	4809      	ldr	r0, [pc, #36]	; (37d60 <ull_ticker_status_take+0x40>)
   37d3a:	f010 fa23 	bl	48184 <z_impl_k_sem_take>
	return *ret_cb;
   37d3e:	6820      	ldr	r0, [r4, #0]
}
   37d40:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   37d42:	4a08      	ldr	r2, [pc, #32]	; (37d64 <ull_ticker_status_take+0x44>)
   37d44:	4908      	ldr	r1, [pc, #32]	; (37d68 <ull_ticker_status_take+0x48>)
   37d46:	4809      	ldr	r0, [pc, #36]	; (37d6c <ull_ticker_status_take+0x4c>)
   37d48:	f240 6382 	movw	r3, #1666	; 0x682
   37d4c:	f011 fedc 	bl	49b08 <printk>
   37d50:	4040      	eors	r0, r0
   37d52:	f380 8811 	msr	BASEPRI, r0
   37d56:	f04f 0003 	mov.w	r0, #3
   37d5a:	df02      	svc	2
   37d5c:	e7e8      	b.n	37d30 <ull_ticker_status_take+0x10>
   37d5e:	bf00      	nop
   37d60:	2000523c 	.word	0x2000523c
   37d64:	00052d5c 	.word	0x00052d5c
   37d68:	00052ea0 	.word	0x00052ea0
   37d6c:	00052bbc 	.word	0x00052bbc

00037d70 <ull_disable_mark>:
	if (!*m) {
   37d70:	4904      	ldr	r1, [pc, #16]	; (37d84 <ull_disable_mark+0x14>)
   37d72:	680a      	ldr	r2, [r1, #0]
   37d74:	b10a      	cbz	r2, 37d7a <ull_disable_mark+0xa>
}
   37d76:	4610      	mov	r0, r2
   37d78:	4770      	bx	lr
		*m = param;
   37d7a:	4602      	mov	r2, r0
   37d7c:	6008      	str	r0, [r1, #0]
}
   37d7e:	4610      	mov	r0, r2
   37d80:	4770      	bx	lr
   37d82:	bf00      	nop
   37d84:	20004c0c 	.word	0x20004c0c

00037d88 <ull_disable_unmark>:
	if (*m && *m == param) {
   37d88:	4a04      	ldr	r2, [pc, #16]	; (37d9c <ull_disable_unmark+0x14>)
   37d8a:	6813      	ldr	r3, [r2, #0]
   37d8c:	b123      	cbz	r3, 37d98 <ull_disable_unmark+0x10>
   37d8e:	4298      	cmp	r0, r3
		*m = NULL;
   37d90:	bf06      	itte	eq
   37d92:	2100      	moveq	r1, #0
   37d94:	6011      	streq	r1, [r2, #0]
	return NULL;
   37d96:	2300      	movne	r3, #0
}
   37d98:	4618      	mov	r0, r3
   37d9a:	4770      	bx	lr
   37d9c:	20004c0c 	.word	0x20004c0c

00037da0 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   37da0:	4b01      	ldr	r3, [pc, #4]	; (37da8 <ull_disable_mark_get+0x8>)
}
   37da2:	6818      	ldr	r0, [r3, #0]
   37da4:	4770      	bx	lr
   37da6:	bf00      	nop
   37da8:	20004c0c 	.word	0x20004c0c

00037dac <ull_update_mark>:
	if (!*m) {
   37dac:	4904      	ldr	r1, [pc, #16]	; (37dc0 <ull_update_mark+0x14>)
   37dae:	680a      	ldr	r2, [r1, #0]
   37db0:	b10a      	cbz	r2, 37db6 <ull_update_mark+0xa>
}
   37db2:	4610      	mov	r0, r2
   37db4:	4770      	bx	lr
		*m = param;
   37db6:	4602      	mov	r2, r0
   37db8:	6008      	str	r0, [r1, #0]
}
   37dba:	4610      	mov	r0, r2
   37dbc:	4770      	bx	lr
   37dbe:	bf00      	nop
   37dc0:	20004c10 	.word	0x20004c10

00037dc4 <ull_update_unmark>:
	if (*m && *m == param) {
   37dc4:	4a04      	ldr	r2, [pc, #16]	; (37dd8 <ull_update_unmark+0x14>)
   37dc6:	6813      	ldr	r3, [r2, #0]
   37dc8:	b123      	cbz	r3, 37dd4 <ull_update_unmark+0x10>
   37dca:	4298      	cmp	r0, r3
		*m = NULL;
   37dcc:	bf06      	itte	eq
   37dce:	2100      	moveq	r1, #0
   37dd0:	6011      	streq	r1, [r2, #0]
	return NULL;
   37dd2:	2300      	movne	r3, #0
}
   37dd4:	4618      	mov	r0, r3
   37dd6:	4770      	bx	lr
   37dd8:	20004c10 	.word	0x20004c10

00037ddc <ull_update_mark_get>:
	return mark_get(mark_update);
   37ddc:	4b01      	ldr	r3, [pc, #4]	; (37de4 <ull_update_mark_get+0x8>)
}
   37dde:	6818      	ldr	r0, [r3, #0]
   37de0:	4770      	bx	lr
   37de2:	bf00      	nop
   37de4:	20004c10 	.word	0x20004c10

00037de8 <ull_disable>:
{
   37de8:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   37dea:	6805      	ldr	r5, [r0, #0]
   37dec:	782b      	ldrb	r3, [r5, #0]
{
   37dee:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
   37df0:	b353      	cbz	r3, 37e48 <ull_disable+0x60>
	compiler_barrier();
   37df2:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   37df4:	2201      	movs	r2, #1
   37df6:	2100      	movs	r1, #0
   37df8:	4668      	mov	r0, sp
   37dfa:	f018 fee1 	bl	50bc0 <z_impl_k_sem_init>
   37dfe:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
   37e00:	4a13      	ldr	r2, [pc, #76]	; (37e50 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   37e02:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   37e06:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   37e08:	b1f3      	cbz	r3, 37e48 <ull_disable+0x60>
	mfy.param = lll;
   37e0a:	4b12      	ldr	r3, [pc, #72]	; (37e54 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   37e0c:	2200      	movs	r2, #0
   37e0e:	4611      	mov	r1, r2
   37e10:	2003      	movs	r0, #3
	mfy.param = lll;
   37e12:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   37e14:	f7fc f946 	bl	340a4 <mayfly_enqueue>
	LL_ASSERT(!ret);
   37e18:	b940      	cbnz	r0, 37e2c <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
   37e1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   37e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   37e22:	4668      	mov	r0, sp
   37e24:	f010 f9ae 	bl	48184 <z_impl_k_sem_take>
}
   37e28:	b007      	add	sp, #28
   37e2a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   37e2c:	4a0a      	ldr	r2, [pc, #40]	; (37e58 <ull_disable+0x70>)
   37e2e:	490b      	ldr	r1, [pc, #44]	; (37e5c <ull_disable+0x74>)
   37e30:	480b      	ldr	r0, [pc, #44]	; (37e60 <ull_disable+0x78>)
   37e32:	f240 63ff 	movw	r3, #1791	; 0x6ff
   37e36:	f011 fe67 	bl	49b08 <printk>
   37e3a:	4040      	eors	r0, r0
   37e3c:	f380 8811 	msr	BASEPRI, r0
   37e40:	f04f 0003 	mov.w	r0, #3
   37e44:	df02      	svc	2
   37e46:	e7e8      	b.n	37e1a <ull_disable+0x32>
		return -EALREADY;
   37e48:	f06f 0077 	mvn.w	r0, #119	; 0x77
   37e4c:	e7ec      	b.n	37e28 <ull_disable+0x40>
   37e4e:	bf00      	nop
   37e50:	00037205 	.word	0x00037205
   37e54:	2000091c 	.word	0x2000091c
   37e58:	00052d5c 	.word	0x00052d5c
   37e5c:	00052e98 	.word	0x00052e98
   37e60:	00052bbc 	.word	0x00052bbc

00037e64 <ull_ticker_stop_with_mark>:
{
   37e64:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   37e66:	4e1e      	ldr	r6, [pc, #120]	; (37ee0 <ull_ticker_stop_with_mark+0x7c>)
   37e68:	6833      	ldr	r3, [r6, #0]
{
   37e6a:	b085      	sub	sp, #20
   37e6c:	460c      	mov	r4, r1
   37e6e:	4617      	mov	r7, r2
	if (!*m) {
   37e70:	b353      	cbz	r3, 37ec8 <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
   37e72:	4299      	cmp	r1, r3
   37e74:	d113      	bne.n	37e9e <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   37e76:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   37e78:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   37e7a:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   37e7c:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   37e7e:	9500      	str	r5, [sp, #0]
   37e80:	4b18      	ldr	r3, [pc, #96]	; (37ee4 <ull_ticker_stop_with_mark+0x80>)
   37e82:	2103      	movs	r1, #3
   37e84:	2000      	movs	r0, #0
   37e86:	f7fd fbdf 	bl	35648 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   37e8a:	4629      	mov	r1, r5
   37e8c:	f7ff ff48 	bl	37d20 <ull_ticker_status_take>
	if (ret) {
   37e90:	4605      	mov	r5, r0
   37e92:	b140      	cbz	r0, 37ea6 <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
   37e94:	6833      	ldr	r3, [r6, #0]
   37e96:	b10b      	cbz	r3, 37e9c <ull_ticker_stop_with_mark+0x38>
   37e98:	429c      	cmp	r4, r3
   37e9a:	d017      	beq.n	37ecc <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
   37e9c:	b1c4      	cbz	r4, 37ed0 <ull_ticker_stop_with_mark+0x6c>
		return -ENOLCK;
   37e9e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   37ea2:	b005      	add	sp, #20
   37ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
   37ea6:	4638      	mov	r0, r7
   37ea8:	f7ff ff9e 	bl	37de8 <ull_disable>
	if (*m && *m == param) {
   37eac:	6833      	ldr	r3, [r6, #0]
   37eae:	b10b      	cbz	r3, 37eb4 <ull_ticker_stop_with_mark+0x50>
   37eb0:	429c      	cmp	r4, r3
   37eb2:	d011      	beq.n	37ed8 <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
   37eb4:	2c00      	cmp	r4, #0
   37eb6:	d1f2      	bne.n	37e9e <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
   37eb8:	2800      	cmp	r0, #0
   37eba:	d0f2      	beq.n	37ea2 <ull_ticker_stop_with_mark+0x3e>
	return 0;
   37ebc:	f110 0f78 	cmn.w	r0, #120	; 0x78
   37ec0:	bf08      	it	eq
   37ec2:	2000      	moveq	r0, #0
}
   37ec4:	b005      	add	sp, #20
   37ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   37ec8:	6031      	str	r1, [r6, #0]
	if (mark != param) {
   37eca:	e7d4      	b.n	37e76 <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   37ecc:	2300      	movs	r3, #0
   37ece:	6033      	str	r3, [r6, #0]
		return -EALREADY;
   37ed0:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   37ed4:	b005      	add	sp, #20
   37ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   37ed8:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
   37eda:	2800      	cmp	r0, #0
   37edc:	d0e1      	beq.n	37ea2 <ull_ticker_stop_with_mark+0x3e>
   37ede:	e7ed      	b.n	37ebc <ull_ticker_stop_with_mark+0x58>
   37ee0:	20004c0c 	.word	0x20004c0c
   37ee4:	000371f9 	.word	0x000371f9

00037ee8 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   37ee8:	490d      	ldr	r1, [pc, #52]	; (37f20 <ull_pdu_rx_alloc_peek+0x38>)
   37eea:	788a      	ldrb	r2, [r1, #2]
   37eec:	78cb      	ldrb	r3, [r1, #3]
	if (last >= first) {
   37eee:	429a      	cmp	r2, r3
   37ef0:	d80d      	bhi.n	37f0e <ull_pdu_rx_alloc_peek+0x26>
		return last - first;
   37ef2:	eba3 0c02 	sub.w	ip, r3, r2
   37ef6:	fa5f fc8c 	uxtb.w	ip, ip
   37efa:	4560      	cmp	r0, ip
   37efc:	d80e      	bhi.n	37f1c <ull_pdu_rx_alloc_peek+0x34>
	if (first == last) {
   37efe:	429a      	cmp	r2, r3
   37f00:	d00c      	beq.n	37f1c <ull_pdu_rx_alloc_peek+0x34>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   37f02:	7809      	ldrb	r1, [r1, #0]
	return *((void **)(fifo + first * size));
   37f04:	4b07      	ldr	r3, [pc, #28]	; (37f24 <ull_pdu_rx_alloc_peek+0x3c>)
   37f06:	fb12 f201 	smulbb	r2, r2, r1
   37f0a:	5898      	ldr	r0, [r3, r2]
   37f0c:	4770      	bx	lr
		return count - first + last;
   37f0e:	f891 c001 	ldrb.w	ip, [r1, #1]
   37f12:	4463      	add	r3, ip
   37f14:	1a9b      	subs	r3, r3, r2
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   37f16:	b2db      	uxtb	r3, r3
   37f18:	4298      	cmp	r0, r3
   37f1a:	d9f2      	bls.n	37f02 <ull_pdu_rx_alloc_peek+0x1a>
		return NULL;
   37f1c:	2000      	movs	r0, #0
}
   37f1e:	4770      	bx	lr
   37f20:	200009a8 	.word	0x200009a8
   37f24:	200009ac 	.word	0x200009ac

00037f28 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   37f28:	4b09      	ldr	r3, [pc, #36]	; (37f50 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   37f2a:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   37f2c:	78da      	ldrb	r2, [r3, #3]
   37f2e:	7818      	ldrb	r0, [r3, #0]
   37f30:	f893 c001 	ldrb.w	ip, [r3, #1]
   37f34:	428a      	cmp	r2, r1
   37f36:	d009      	beq.n	37f4c <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   37f38:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   37f3a:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   37f3e:	b2d2      	uxtb	r2, r2
		_first = 0U;
   37f40:	4594      	cmp	ip, r2
   37f42:	bf08      	it	eq
   37f44:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   37f46:	6840      	ldr	r0, [r0, #4]
	*first = _first; /* Write back read-index */
   37f48:	709a      	strb	r2, [r3, #2]
	return mem;
   37f4a:	4770      	bx	lr
		return NULL;
   37f4c:	2000      	movs	r0, #0
}
   37f4e:	4770      	bx	lr
   37f50:	200009a8 	.word	0x200009a8

00037f54 <ull_rx_put>:
{
   37f54:	b538      	push	{r3, r4, r5, lr}
   37f56:	460c      	mov	r4, r1
   37f58:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   37f5a:	f005 fe3f 	bl	3dbdc <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   37f5e:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   37f60:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   37f62:	4a03      	ldr	r2, [pc, #12]	; (37f70 <ull_rx_put+0x1c>)
   37f64:	4628      	mov	r0, r5
}
   37f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   37f6a:	f7fc b825 	b.w	33fb8 <memq_enqueue>
   37f6e:	bf00      	nop
   37f70:	20004c28 	.word	0x20004c28

00037f74 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   37f74:	2201      	movs	r2, #1
   37f76:	4b02      	ldr	r3, [pc, #8]	; (37f80 <ull_rx_sched+0xc>)
   37f78:	4611      	mov	r1, r2
   37f7a:	2000      	movs	r0, #0
   37f7c:	f7fc b892 	b.w	340a4 <mayfly_enqueue>
   37f80:	2000090c 	.word	0x2000090c

00037f84 <ull_prepare_enqueue>:
{
   37f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   37f88:	4e16      	ldr	r6, [pc, #88]	; (37fe4 <ull_prepare_enqueue+0x60>)
{
   37f8a:	f89d a020 	ldrb.w	sl, [sp, #32]
   37f8e:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   37f90:	78f3      	ldrb	r3, [r6, #3]
{
   37f92:	460f      	mov	r7, r1
	last = last + 1;
   37f94:	1c5d      	adds	r5, r3, #1
   37f96:	4611      	mov	r1, r2
	if (last == count) {
   37f98:	7872      	ldrb	r2, [r6, #1]
	last = last + 1;
   37f9a:	b2ed      	uxtb	r5, r5
		last = 0U;
   37f9c:	42aa      	cmp	r2, r5
   37f9e:	bf08      	it	eq
   37fa0:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   37fa2:	78b2      	ldrb	r2, [r6, #2]
	if (last == first) {
   37fa4:	42aa      	cmp	r2, r5
   37fa6:	d018      	beq.n	37fda <ull_prepare_enqueue+0x56>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   37fa8:	4634      	mov	r4, r6
   37faa:	4680      	mov	r8, r0
   37fac:	f814 0b04 	ldrb.w	r0, [r4], #4
   37fb0:	fb00 4403 	mla	r4, r0, r3, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   37fb4:	2210      	movs	r2, #16
   37fb6:	4620      	mov	r0, r4
   37fb8:	f013 fed5 	bl	4bd66 <memcpy>
	e->is_resume = is_resume;
   37fbc:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
   37fbe:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   37fc0:	f00a 0a01 	and.w	sl, sl, #1
   37fc4:	f023 0303 	bic.w	r3, r3, #3
   37fc8:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   37fcc:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   37fd0:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   37fd2:	70f5      	strb	r5, [r6, #3]
}
   37fd4:	4620      	mov	r0, r4
   37fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
   37fda:	2400      	movs	r4, #0
}
   37fdc:	4620      	mov	r0, r4
   37fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   37fe2:	bf00      	nop
   37fe4:	20000ab0 	.word	0x20000ab0

00037fe8 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   37fe8:	4805      	ldr	r0, [pc, #20]	; (38000 <ull_prepare_dequeue_get+0x18>)
   37fea:	7882      	ldrb	r2, [r0, #2]
	if (first == last) {
   37fec:	78c1      	ldrb	r1, [r0, #3]
   37fee:	f890 c000 	ldrb.w	ip, [r0]
   37ff2:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   37ff4:	bf1a      	itte	ne
   37ff6:	3004      	addne	r0, #4
   37ff8:	fb02 000c 	mlane	r0, r2, ip, r0
		return NULL;
   37ffc:	2000      	moveq	r0, #0
}
   37ffe:	4770      	bx	lr
   38000:	20000ab0 	.word	0x20000ab0

00038004 <ull_prepare_dequeue_iter>:
{
   38004:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   38006:	4b0d      	ldr	r3, [pc, #52]	; (3803c <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   38008:	7802      	ldrb	r2, [r0, #0]
   3800a:	7859      	ldrb	r1, [r3, #1]
   3800c:	f893 c003 	ldrb.w	ip, [r3, #3]
   38010:	f893 e000 	ldrb.w	lr, [r3]
   38014:	4291      	cmp	r1, r2
   38016:	bf9c      	itt	ls
   38018:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   3801a:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   3801c:	4594      	cmp	ip, r2
   3801e:	d00a      	beq.n	38036 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   38020:	1c53      	adds	r3, r2, #1
   38022:	b2db      	uxtb	r3, r3
		i = 0U;
   38024:	4299      	cmp	r1, r3
   38026:	bf08      	it	eq
   38028:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   3802a:	4905      	ldr	r1, [pc, #20]	; (38040 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   3802c:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   3802e:	fb02 100e 	mla	r0, r2, lr, r1
}
   38032:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   38036:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   38038:	e7fb      	b.n	38032 <ull_prepare_dequeue_iter+0x2e>
   3803a:	bf00      	nop
   3803c:	20000ab0 	.word	0x20000ab0
   38040:	20000ab4 	.word	0x20000ab4

00038044 <ull_prepare_dequeue>:
{
   38044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return MFIFO_DEQUEUE_GET(prep);
   38048:	4c23      	ldr	r4, [pc, #140]	; (380d8 <ull_prepare_dequeue+0x94>)
   3804a:	78a3      	ldrb	r3, [r4, #2]
	if (first == last) {
   3804c:	78e2      	ldrb	r2, [r4, #3]
   3804e:	f894 c000 	ldrb.w	ip, [r4]
   38052:	429a      	cmp	r2, r3
   38054:	d025      	beq.n	380a2 <ull_prepare_dequeue+0x5e>
	return (void *)(fifo + first * size);
   38056:	1d27      	adds	r7, r4, #4
			mfy.param = next;
   38058:	f8df 9080 	ldr.w	r9, [pc, #128]	; 380dc <ull_prepare_dequeue+0x98>
   3805c:	4680      	mov	r8, r0
   3805e:	fb03 7c0c 	mla	ip, r3, ip, r7
		uint8_t is_aborted = next->is_aborted;
   38062:	f89c 301c 	ldrb.w	r3, [ip, #28]
		if (!is_aborted) {
   38066:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   38068:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   3806c:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
   38070:	d519      	bpl.n	380a6 <ull_prepare_dequeue+0x62>
	uint8_t _first = *first; /* Copy read-index */
   38072:	78a2      	ldrb	r2, [r4, #2]
		MFIFO_DEQUEUE(prep);
   38074:	78e1      	ldrb	r1, [r4, #3]
   38076:	f894 c000 	ldrb.w	ip, [r4]
   3807a:	7860      	ldrb	r0, [r4, #1]
	_first += 1U;
   3807c:	1c53      	adds	r3, r2, #1
	if (_first == last) {
   3807e:	4291      	cmp	r1, r2
	_first += 1U;
   38080:	b2db      	uxtb	r3, r3
	if (_first == last) {
   38082:	d00e      	beq.n	380a2 <ull_prepare_dequeue+0x5e>
		_first = 0U;
   38084:	4298      	cmp	r0, r3
   38086:	bf08      	it	eq
   38088:	2300      	moveq	r3, #0
	if (first == last) {
   3808a:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   3808c:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   3808e:	d008      	beq.n	380a2 <ull_prepare_dequeue+0x5e>
	return (void *)(fifo + first * size);
   38090:	fb03 7c0c 	mla	ip, r3, ip, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   38094:	2d00      	cmp	r5, #0
   38096:	d1e4      	bne.n	38062 <ull_prepare_dequeue+0x1e>
   38098:	b11e      	cbz	r6, 380a2 <ull_prepare_dequeue+0x5e>
   3809a:	f89c 301c 	ldrb.w	r3, [ip, #28]
   3809e:	07db      	lsls	r3, r3, #31
   380a0:	d5df      	bpl.n	38062 <ull_prepare_dequeue+0x1e>
}
   380a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   380a6:	4b0d      	ldr	r3, [pc, #52]	; (380dc <ull_prepare_dequeue+0x98>)
			mfy.param = next;
   380a8:	f8c9 c008 	str.w	ip, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   380ac:	462a      	mov	r2, r5
   380ae:	4629      	mov	r1, r5
   380b0:	4640      	mov	r0, r8
   380b2:	f7fb fff7 	bl	340a4 <mayfly_enqueue>
			LL_ASSERT(!ret);
   380b6:	2800      	cmp	r0, #0
   380b8:	d0db      	beq.n	38072 <ull_prepare_dequeue+0x2e>
   380ba:	4a09      	ldr	r2, [pc, #36]	; (380e0 <ull_prepare_dequeue+0x9c>)
   380bc:	4909      	ldr	r1, [pc, #36]	; (380e4 <ull_prepare_dequeue+0xa0>)
   380be:	480a      	ldr	r0, [pc, #40]	; (380e8 <ull_prepare_dequeue+0xa4>)
   380c0:	f240 7376 	movw	r3, #1910	; 0x776
   380c4:	f011 fd20 	bl	49b08 <printk>
   380c8:	4040      	eors	r0, r0
   380ca:	f380 8811 	msr	BASEPRI, r0
   380ce:	f04f 0003 	mov.w	r0, #3
   380d2:	df02      	svc	2
   380d4:	e7cd      	b.n	38072 <ull_prepare_dequeue+0x2e>
   380d6:	bf00      	nop
   380d8:	20000ab0 	.word	0x20000ab0
   380dc:	200008ec 	.word	0x200008ec
   380e0:	00052d5c 	.word	0x00052d5c
   380e4:	00052e98 	.word	0x00052e98
   380e8:	00052bbc 	.word	0x00052bbc

000380ec <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   380ec:	4b06      	ldr	r3, [pc, #24]	; (38108 <ull_event_done_extra_get+0x1c>)
   380ee:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   380f0:	78d9      	ldrb	r1, [r3, #3]
   380f2:	7818      	ldrb	r0, [r3, #0]
   380f4:	4291      	cmp	r1, r2
   380f6:	d005      	beq.n	38104 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   380f8:	fb02 3300 	mla	r3, r2, r0, r3
   380fc:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   380fe:	b110      	cbz	r0, 38106 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   38100:	3020      	adds	r0, #32
   38102:	4770      	bx	lr
		return NULL;
   38104:	2000      	movs	r0, #0
}
   38106:	4770      	bx	lr
   38108:	20000a98 	.word	0x20000a98

0003810c <ull_event_done>:
{
   3810c:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
   3810e:	4a13      	ldr	r2, [pc, #76]	; (3815c <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   38110:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   38112:	78d5      	ldrb	r5, [r2, #3]
   38114:	7814      	ldrb	r4, [r2, #0]
   38116:	429d      	cmp	r5, r3
{
   38118:	4601      	mov	r1, r0
	evdone = MFIFO_DEQUEUE(done);
   3811a:	7850      	ldrb	r0, [r2, #1]
   3811c:	d01b      	beq.n	38156 <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   3811e:	fb03 2404 	mla	r4, r3, r4, r2
	_first += 1U;
   38122:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   38124:	6864      	ldr	r4, [r4, #4]
	_first += 1U;
   38126:	b2db      	uxtb	r3, r3
		_first = 0U;
   38128:	4298      	cmp	r0, r3
   3812a:	bf08      	it	eq
   3812c:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   3812e:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   38130:	b18c      	cbz	r4, 38156 <ull_event_done+0x4a>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   38132:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   38134:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   38136:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   38138:	4a09      	ldr	r2, [pc, #36]	; (38160 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   3813a:	7123      	strb	r3, [r4, #4]
	evdone->param = param;
   3813c:	61e1      	str	r1, [r4, #28]
	evdone->hdr.link = NULL;
   3813e:	6025      	str	r5, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   38140:	4621      	mov	r1, r4
   38142:	f7fb ff39 	bl	33fb8 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   38146:	2201      	movs	r2, #1
   38148:	4b06      	ldr	r3, [pc, #24]	; (38164 <ull_event_done+0x58>)
   3814a:	4611      	mov	r1, r2
   3814c:	4628      	mov	r0, r5
   3814e:	f7fb ffa9 	bl	340a4 <mayfly_enqueue>
}
   38152:	4620      	mov	r0, r4
   38154:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   38156:	2400      	movs	r4, #0
   38158:	e7fb      	b.n	38152 <ull_event_done+0x46>
   3815a:	bf00      	nop
   3815c:	20000a98 	.word	0x20000a98
   38160:	20004c18 	.word	0x20004c18
   38164:	200008fc 	.word	0x200008fc

00038168 <ull_rxfifo_alloc>:
{
   38168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3816c:	b083      	sub	sp, #12
   3816e:	461d      	mov	r5, r3
   38170:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   38174:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   38176:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   3817a:	9401      	str	r4, [sp, #4]
   3817c:	4617      	mov	r7, r2
   3817e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   38180:	9200      	str	r2, [sp, #0]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   38182:	b353      	cbz	r3, 381da <ull_rxfifo_alloc+0x72>
   38184:	1e5c      	subs	r4, r3, #1
   38186:	f895 a000 	ldrb.w	sl, [r5]
   3818a:	4680      	mov	r8, r0
   3818c:	460e      	mov	r6, r1
   3818e:	b2e4      	uxtb	r4, r4
	last = last + 1;
   38190:	f10a 0301 	add.w	r3, sl, #1
   38194:	fa5f fa83 	uxtb.w	sl, r3
		last = 0U;
   38198:	4556      	cmp	r6, sl
   3819a:	bf08      	it	eq
   3819c:	f04f 0a00 	moveq.w	sl, #0
	if (last == first) {
   381a0:	4557      	cmp	r7, sl
		link = mem_acquire(link_free);
   381a2:	4648      	mov	r0, r9
   381a4:	d019      	beq.n	381da <ull_rxfifo_alloc+0x72>
   381a6:	f7fb fea3 	bl	33ef0 <mem_acquire>
   381aa:	4683      	mov	fp, r0
		rx = mem_acquire(mem_free);
   381ac:	9800      	ldr	r0, [sp, #0]
		if (!link) {
   381ae:	f1bb 0f00 	cmp.w	fp, #0
   381b2:	d012      	beq.n	381da <ull_rxfifo_alloc+0x72>
		rx = mem_acquire(mem_free);
   381b4:	f7fb fe9c 	bl	33ef0 <mem_acquire>
		if (!rx) {
   381b8:	b190      	cbz	r0, 381e0 <ull_rxfifo_alloc+0x78>
		link->mem = NULL;
   381ba:	2300      	movs	r3, #0
   381bc:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   381c0:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   381c4:	782a      	ldrb	r2, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   381c6:	9b01      	ldr	r3, [sp, #4]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   381c8:	fb12 f208 	smulbb	r2, r2, r8
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   381cc:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   381ce:	3c01      	subs	r4, #1
   381d0:	b2e4      	uxtb	r4, r4
   381d2:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
   381d4:	f885 a000 	strb.w	sl, [r5]
   381d8:	d1da      	bne.n	38190 <ull_rxfifo_alloc+0x28>
}
   381da:	b003      	add	sp, #12
   381dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
   381e0:	4649      	mov	r1, r9
   381e2:	4658      	mov	r0, fp
}
   381e4:	b003      	add	sp, #12
   381e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   381ea:	f7fb be9b 	b.w	33f24 <mem_release>
   381ee:	bf00      	nop

000381f0 <init_reset>:
{
   381f0:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
   381f2:	4c3f      	ldr	r4, [pc, #252]	; (382f0 <init_reset+0x100>)
   381f4:	4d3f      	ldr	r5, [pc, #252]	; (382f4 <init_reset+0x104>)
   381f6:	79a2      	ldrb	r2, [r4, #6]
   381f8:	88a1      	ldrh	r1, [r4, #4]
   381fa:	4e3f      	ldr	r6, [pc, #252]	; (382f8 <init_reset+0x108>)
   381fc:	2000      	movs	r0, #0
{
   381fe:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
   38200:	4623      	mov	r3, r4
   38202:	8068      	strh	r0, [r5, #2]
   38204:	f104 0008 	add.w	r0, r4, #8
   38208:	f7fb fe42 	bl	33e90 <mem_init>
   3820c:	79e3      	ldrb	r3, [r4, #7]
   3820e:	79a2      	ldrb	r2, [r4, #6]
   38210:	1d30      	adds	r0, r6, #4
   38212:	441a      	add	r2, r3
   38214:	2108      	movs	r1, #8
   38216:	4633      	mov	r3, r6
   38218:	f7fb fe3a 	bl	33e90 <mem_init>
   3821c:	9602      	str	r6, [sp, #8]
   3821e:	462e      	mov	r6, r5
   38220:	79a3      	ldrb	r3, [r4, #6]
   38222:	f816 0b04 	ldrb.w	r0, [r6], #4
   38226:	9303      	str	r3, [sp, #12]
   38228:	78aa      	ldrb	r2, [r5, #2]
   3822a:	7869      	ldrb	r1, [r5, #1]
   3822c:	1ceb      	adds	r3, r5, #3
   3822e:	e9cd 6400 	strd	r6, r4, [sp]
   38232:	f7ff ff99 	bl	38168 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   38236:	4b31      	ldr	r3, [pc, #196]	; (382fc <init_reset+0x10c>)
   38238:	2213      	movs	r2, #19
   3823a:	1d18      	adds	r0, r3, #4
   3823c:	2144      	movs	r1, #68	; 0x44
   3823e:	f7fb fe27 	bl	33e90 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   38242:	4b2f      	ldr	r3, [pc, #188]	; (38300 <init_reset+0x110>)
   38244:	2219      	movs	r2, #25
   38246:	1d18      	adds	r0, r3, #4
   38248:	2108      	movs	r1, #8
   3824a:	f7fb fe21 	bl	33e90 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   3824e:	482c      	ldr	r0, [pc, #176]	; (38300 <init_reset+0x110>)
   38250:	f7fb fe4e 	bl	33ef0 <mem_acquire>
	LL_ASSERT(link);
   38254:	4604      	mov	r4, r0
   38256:	b308      	cbz	r0, 3829c <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
   38258:	4a2a      	ldr	r2, [pc, #168]	; (38304 <init_reset+0x114>)
   3825a:	4620      	mov	r0, r4
   3825c:	1f11      	subs	r1, r2, #4
   3825e:	f7fb fe9d 	bl	33f9c <memq_init>
	link = mem_acquire(&mem_link_done.free);
   38262:	4825      	ldr	r0, [pc, #148]	; (382f8 <init_reset+0x108>)
   38264:	f7fb fe44 	bl	33ef0 <mem_acquire>
	LL_ASSERT(link);
   38268:	4604      	mov	r4, r0
   3826a:	b328      	cbz	r0, 382b8 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
   3826c:	4a26      	ldr	r2, [pc, #152]	; (38308 <init_reset+0x118>)
   3826e:	4620      	mov	r0, r4
   38270:	1f11      	subs	r1, r2, #4
   38272:	f7fb fe93 	bl	33f9c <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   38276:	4822      	ldr	r0, [pc, #136]	; (38300 <init_reset+0x110>)
   38278:	f7fb fe3a 	bl	33ef0 <mem_acquire>
	LL_ASSERT(link);
   3827c:	4604      	mov	r4, r0
   3827e:	b348      	cbz	r0, 382d4 <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
   38280:	4a22      	ldr	r2, [pc, #136]	; (3830c <init_reset+0x11c>)
   38282:	4620      	mov	r0, r4
   38284:	1f11      	subs	r1, r2, #4
   38286:	f7fb fe89 	bl	33f9c <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   3828a:	4b21      	ldr	r3, [pc, #132]	; (38310 <init_reset+0x120>)
   3828c:	2210      	movs	r2, #16
	rx_alloc(UINT8_MAX);
   3828e:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   38290:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   38292:	f7ff f89f 	bl	373d4 <rx_alloc>
}
   38296:	2000      	movs	r0, #0
   38298:	b004      	add	sp, #16
   3829a:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   3829c:	4a1d      	ldr	r2, [pc, #116]	; (38314 <init_reset+0x124>)
   3829e:	491e      	ldr	r1, [pc, #120]	; (38318 <init_reset+0x128>)
   382a0:	481e      	ldr	r0, [pc, #120]	; (3831c <init_reset+0x12c>)
   382a2:	f640 0302 	movw	r3, #2050	; 0x802
   382a6:	f011 fc2f 	bl	49b08 <printk>
   382aa:	4040      	eors	r0, r0
   382ac:	f380 8811 	msr	BASEPRI, r0
   382b0:	f04f 0003 	mov.w	r0, #3
   382b4:	df02      	svc	2
   382b6:	e7cf      	b.n	38258 <init_reset+0x68>
	LL_ASSERT(link);
   382b8:	4a16      	ldr	r2, [pc, #88]	; (38314 <init_reset+0x124>)
   382ba:	4917      	ldr	r1, [pc, #92]	; (38318 <init_reset+0x128>)
   382bc:	4817      	ldr	r0, [pc, #92]	; (3831c <init_reset+0x12c>)
   382be:	f640 030a 	movw	r3, #2058	; 0x80a
   382c2:	f011 fc21 	bl	49b08 <printk>
   382c6:	4040      	eors	r0, r0
   382c8:	f380 8811 	msr	BASEPRI, r0
   382cc:	f04f 0003 	mov.w	r0, #3
   382d0:	df02      	svc	2
   382d2:	e7cb      	b.n	3826c <init_reset+0x7c>
	LL_ASSERT(link);
   382d4:	4a0f      	ldr	r2, [pc, #60]	; (38314 <init_reset+0x124>)
   382d6:	4910      	ldr	r1, [pc, #64]	; (38318 <init_reset+0x128>)
   382d8:	4810      	ldr	r0, [pc, #64]	; (3831c <init_reset+0x12c>)
   382da:	f640 0312 	movw	r3, #2066	; 0x812
   382de:	f011 fc13 	bl	49b08 <printk>
   382e2:	4040      	eors	r0, r0
   382e4:	f380 8811 	msr	BASEPRI, r0
   382e8:	f04f 0003 	mov.w	r0, #3
   382ec:	df02      	svc	2
   382ee:	e7c7      	b.n	38280 <init_reset+0x90>
   382f0:	200009c0 	.word	0x200009c0
   382f4:	20000a98 	.word	0x20000a98
   382f8:	2000520c 	.word	0x2000520c
   382fc:	20004cfc 	.word	0x20004cfc
   38300:	20004c30 	.word	0x20004c30
   38304:	20004c28 	.word	0x20004c28
   38308:	20004c18 	.word	0x20004c18
   3830c:	20004c20 	.word	0x20004c20
   38310:	20004c2c 	.word	0x20004c2c
   38314:	00052d5c 	.word	0x00052d5c
   38318:	00053124 	.word	0x00053124
   3831c:	00052bbc 	.word	0x00052bbc

00038320 <ll_init>:
{
   38320:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   38322:	4b31      	ldr	r3, [pc, #196]	; (383e8 <ll_init+0xc8>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   38324:	4c31      	ldr	r4, [pc, #196]	; (383ec <ll_init+0xcc>)
	sem_recv = sem_rx;
   38326:	6018      	str	r0, [r3, #0]
{
   38328:	b087      	sub	sp, #28
	cntr_init();
   3832a:	f00a fb95 	bl	42a58 <cntr_init>
	mayfly_init();
   3832e:	f7fb fe65 	bl	33ffc <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   38332:	4a2f      	ldr	r2, [pc, #188]	; (383f0 <ll_init+0xd0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   38334:	4d2f      	ldr	r5, [pc, #188]	; (383f4 <ll_init+0xd4>)
   38336:	9505      	str	r5, [sp, #20]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   38338:	f04f 0c05 	mov.w	ip, #5
   3833c:	f882 c008 	strb.w	ip, [r2, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   38340:	9404      	str	r4, [sp, #16]
   38342:	4c2d      	ldr	r4, [pc, #180]	; (383f8 <ll_init+0xd8>)
   38344:	9403      	str	r4, [sp, #12]
   38346:	4c2d      	ldr	r4, [pc, #180]	; (383fc <ll_init+0xdc>)
   38348:	9200      	str	r2, [sp, #0]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   3834a:	2002      	movs	r0, #2
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   3834c:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   3834e:	210d      	movs	r1, #13
   38350:	e9cd 1401 	strd	r1, r4, [sp, #4]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   38354:	7410      	strb	r0, [r2, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   38356:	7610      	strb	r0, [r2, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   38358:	7013      	strb	r3, [r2, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   3835a:	2000      	movs	r0, #0
   3835c:	4a28      	ldr	r2, [pc, #160]	; (38400 <ll_init+0xe0>)
   3835e:	f7fd f829 	bl	353b4 <ticker_init>
	LL_ASSERT(!err);
   38362:	2800      	cmp	r0, #0
   38364:	d132      	bne.n	383cc <ll_init+0xac>
	return z_impl_k_sem_init(sem, initial_count, limit);
   38366:	2201      	movs	r2, #1
   38368:	2100      	movs	r1, #0
   3836a:	4826      	ldr	r0, [pc, #152]	; (38404 <ll_init+0xe4>)
   3836c:	f018 fc28 	bl	50bc0 <z_impl_k_sem_init>
	err = lll_init();
   38370:	f008 f83e 	bl	403f0 <lll_init>
	if (err) {
   38374:	4604      	mov	r4, r0
   38376:	b110      	cbz	r0, 3837e <ll_init+0x5e>
}
   38378:	4620      	mov	r0, r4
   3837a:	b007      	add	sp, #28
   3837c:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   3837e:	f7ff ff37 	bl	381f0 <init_reset>
	if (err) {
   38382:	4604      	mov	r4, r0
   38384:	2800      	cmp	r0, #0
   38386:	d1f7      	bne.n	38378 <ll_init+0x58>
	err = lll_adv_init();
   38388:	f008 fc9a 	bl	40cc0 <lll_adv_init>
	if (err) {
   3838c:	4604      	mov	r4, r0
   3838e:	2800      	cmp	r0, #0
   38390:	d1f2      	bne.n	38378 <ll_init+0x58>
	err = ull_adv_init();
   38392:	f000 fd05 	bl	38da0 <ull_adv_init>
	if (err) {
   38396:	4604      	mov	r4, r0
   38398:	2800      	cmp	r0, #0
   3839a:	d1ed      	bne.n	38378 <ll_init+0x58>
	err = lll_scan_init();
   3839c:	f009 fc28 	bl	41bf0 <lll_scan_init>
	if (err) {
   383a0:	4604      	mov	r4, r0
   383a2:	2800      	cmp	r0, #0
   383a4:	d1e8      	bne.n	38378 <ll_init+0x58>
	err = ull_scan_init();
   383a6:	f000 fe9d 	bl	390e4 <ull_scan_init>
	if (err) {
   383aa:	4604      	mov	r4, r0
   383ac:	2800      	cmp	r0, #0
   383ae:	d1e3      	bne.n	38378 <ll_init+0x58>
	err = lll_conn_init();
   383b0:	f009 fd52 	bl	41e58 <lll_conn_init>
	if (err) {
   383b4:	4604      	mov	r4, r0
   383b6:	2800      	cmp	r0, #0
   383b8:	d1de      	bne.n	38378 <ll_init+0x58>
	err = ull_conn_init();
   383ba:	f002 f95f 	bl	3a67c <ull_conn_init>
	if (err) {
   383be:	4604      	mov	r4, r0
   383c0:	2800      	cmp	r0, #0
   383c2:	d1d9      	bne.n	38378 <ll_init+0x58>
		ull_filter_reset(true);
   383c4:	2001      	movs	r0, #1
   383c6:	f007 f8d1 	bl	3f56c <ull_filter_reset>
	return  0;
   383ca:	e7d5      	b.n	38378 <ll_init+0x58>
	LL_ASSERT(!err);
   383cc:	4a0e      	ldr	r2, [pc, #56]	; (38408 <ll_init+0xe8>)
   383ce:	490f      	ldr	r1, [pc, #60]	; (3840c <ll_init+0xec>)
   383d0:	480f      	ldr	r0, [pc, #60]	; (38410 <ll_init+0xf0>)
   383d2:	f240 230d 	movw	r3, #525	; 0x20d
   383d6:	f011 fb97 	bl	49b08 <printk>
   383da:	4040      	eors	r0, r0
   383dc:	f380 8811 	msr	BASEPRI, r0
   383e0:	f04f 0003 	mov.w	r0, #3
   383e4:	df02      	svc	2
   383e6:	e7be      	b.n	38366 <ll_init+0x46>
   383e8:	20005238 	.word	0x20005238
   383ec:	00043641 	.word	0x00043641
   383f0:	200054f8 	.word	0x200054f8
   383f4:	00043791 	.word	0x00043791
   383f8:	000435dd 	.word	0x000435dd
   383fc:	20005254 	.word	0x20005254
   38400:	20005518 	.word	0x20005518
   38404:	2000523c 	.word	0x2000523c
   38408:	00052d5c 	.word	0x00052d5c
   3840c:	00052d98 	.word	0x00052d98
   38410:	00052bbc 	.word	0x00052bbc

00038414 <ll_reset>:
{
   38414:	b510      	push	{r4, lr}
   38416:	b086      	sub	sp, #24
	err = ull_adv_reset();
   38418:	f000 fcd2 	bl	38dc0 <ull_adv_reset>
	LL_ASSERT(!err);
   3841c:	2800      	cmp	r0, #0
   3841e:	d133      	bne.n	38488 <ll_reset+0x74>
	err = ull_scan_reset();
   38420:	f000 fee0 	bl	391e4 <ull_scan_reset>
	LL_ASSERT(!err);
   38424:	2800      	cmp	r0, #0
   38426:	d140      	bne.n	384aa <ll_reset+0x96>
	err = ull_conn_reset();
   38428:	f002 f92a 	bl	3a680 <ull_conn_reset>
	LL_ASSERT(!err);
   3842c:	2800      	cmp	r0, #0
   3842e:	d14d      	bne.n	384cc <ll_reset+0xb8>
	MFIFO_INIT(tx_ack);
   38430:	4b43      	ldr	r3, [pc, #268]	; (38540 <ll_reset+0x12c>)
   38432:	2400      	movs	r4, #0
   38434:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   38436:	4620      	mov	r0, r4
   38438:	f007 f898 	bl	3f56c <ull_filter_reset>
	MFIFO_INIT(prep);
   3843c:	4941      	ldr	r1, [pc, #260]	; (38544 <ll_reset+0x130>)
	MFIFO_INIT(pdu_rx_free);
   3843e:	4a42      	ldr	r2, [pc, #264]	; (38548 <ll_reset+0x134>)
	MFIFO_INIT(ll_pdu_rx_free);
   38440:	4b42      	ldr	r3, [pc, #264]	; (3854c <ll_reset+0x138>)
	MFIFO_INIT(prep);
   38442:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
   38444:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   38446:	805c      	strh	r4, [r3, #2]
   38448:	2201      	movs	r2, #1
   3844a:	4621      	mov	r1, r4
   3844c:	4668      	mov	r0, sp
   3844e:	f018 fbb7 	bl	50bc0 <z_impl_k_sem_init>
		mfy.param = &sem;
   38452:	4b3f      	ldr	r3, [pc, #252]	; (38550 <ll_reset+0x13c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   38454:	4622      	mov	r2, r4
   38456:	4621      	mov	r1, r4
   38458:	2003      	movs	r0, #3
		mfy.param = &sem;
   3845a:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   3845e:	f7fb fe21 	bl	340a4 <mayfly_enqueue>
		LL_ASSERT(!retval);
   38462:	2800      	cmp	r0, #0
   38464:	d15d      	bne.n	38522 <ll_reset+0x10e>
	return z_impl_k_sem_take(sem, timeout);
   38466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3846a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3846e:	4668      	mov	r0, sp
   38470:	f00f fe88 	bl	48184 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   38474:	f000 fcaa 	bl	38dcc <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   38478:	2800      	cmp	r0, #0
   3847a:	d144      	bne.n	38506 <ll_reset+0xf2>
	err = init_reset();
   3847c:	f7ff feb8 	bl	381f0 <init_reset>
	LL_ASSERT(!err);
   38480:	2800      	cmp	r0, #0
   38482:	d131      	bne.n	384e8 <ll_reset+0xd4>
}
   38484:	b006      	add	sp, #24
   38486:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   38488:	4a32      	ldr	r2, [pc, #200]	; (38554 <ll_reset+0x140>)
   3848a:	4933      	ldr	r1, [pc, #204]	; (38558 <ll_reset+0x144>)
   3848c:	4833      	ldr	r0, [pc, #204]	; (3855c <ll_reset+0x148>)
   3848e:	f240 23ad 	movw	r3, #685	; 0x2ad
   38492:	f011 fb39 	bl	49b08 <printk>
   38496:	4040      	eors	r0, r0
   38498:	f380 8811 	msr	BASEPRI, r0
   3849c:	f04f 0003 	mov.w	r0, #3
   384a0:	df02      	svc	2
	err = ull_scan_reset();
   384a2:	f000 fe9f 	bl	391e4 <ull_scan_reset>
	LL_ASSERT(!err);
   384a6:	2800      	cmp	r0, #0
   384a8:	d0be      	beq.n	38428 <ll_reset+0x14>
   384aa:	4a2a      	ldr	r2, [pc, #168]	; (38554 <ll_reset+0x140>)
   384ac:	492a      	ldr	r1, [pc, #168]	; (38558 <ll_reset+0x144>)
   384ae:	482b      	ldr	r0, [pc, #172]	; (3855c <ll_reset+0x148>)
   384b0:	f240 23b3 	movw	r3, #691	; 0x2b3
   384b4:	f011 fb28 	bl	49b08 <printk>
   384b8:	4040      	eors	r0, r0
   384ba:	f380 8811 	msr	BASEPRI, r0
   384be:	f04f 0003 	mov.w	r0, #3
   384c2:	df02      	svc	2
	err = ull_conn_reset();
   384c4:	f002 f8dc 	bl	3a680 <ull_conn_reset>
	LL_ASSERT(!err);
   384c8:	2800      	cmp	r0, #0
   384ca:	d0b1      	beq.n	38430 <ll_reset+0x1c>
   384cc:	4a21      	ldr	r2, [pc, #132]	; (38554 <ll_reset+0x140>)
   384ce:	4922      	ldr	r1, [pc, #136]	; (38558 <ll_reset+0x144>)
   384d0:	4822      	ldr	r0, [pc, #136]	; (3855c <ll_reset+0x148>)
   384d2:	f240 23de 	movw	r3, #734	; 0x2de
   384d6:	f011 fb17 	bl	49b08 <printk>
   384da:	4040      	eors	r0, r0
   384dc:	f380 8811 	msr	BASEPRI, r0
   384e0:	f04f 0003 	mov.w	r0, #3
   384e4:	df02      	svc	2
   384e6:	e7a3      	b.n	38430 <ll_reset+0x1c>
	LL_ASSERT(!err);
   384e8:	4a1a      	ldr	r2, [pc, #104]	; (38554 <ll_reset+0x140>)
   384ea:	491b      	ldr	r1, [pc, #108]	; (38558 <ll_reset+0x144>)
   384ec:	481b      	ldr	r0, [pc, #108]	; (3855c <ll_reset+0x148>)
   384ee:	f240 3327 	movw	r3, #807	; 0x327
   384f2:	f011 fb09 	bl	49b08 <printk>
   384f6:	4040      	eors	r0, r0
   384f8:	f380 8811 	msr	BASEPRI, r0
   384fc:	f04f 0003 	mov.w	r0, #3
   38500:	df02      	svc	2
}
   38502:	b006      	add	sp, #24
   38504:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   38506:	4a13      	ldr	r2, [pc, #76]	; (38554 <ll_reset+0x140>)
   38508:	4913      	ldr	r1, [pc, #76]	; (38558 <ll_reset+0x144>)
   3850a:	4814      	ldr	r0, [pc, #80]	; (3855c <ll_reset+0x148>)
   3850c:	f240 331a 	movw	r3, #794	; 0x31a
   38510:	f011 fafa 	bl	49b08 <printk>
   38514:	4040      	eors	r0, r0
   38516:	f380 8811 	msr	BASEPRI, r0
   3851a:	f04f 0003 	mov.w	r0, #3
   3851e:	df02      	svc	2
   38520:	e7ac      	b.n	3847c <ll_reset+0x68>
		LL_ASSERT(!retval);
   38522:	4a0c      	ldr	r2, [pc, #48]	; (38554 <ll_reset+0x140>)
   38524:	490e      	ldr	r1, [pc, #56]	; (38560 <ll_reset+0x14c>)
   38526:	480d      	ldr	r0, [pc, #52]	; (3855c <ll_reset+0x148>)
   38528:	f240 330d 	movw	r3, #781	; 0x30d
   3852c:	f011 faec 	bl	49b08 <printk>
   38530:	4040      	eors	r0, r0
   38532:	f380 8811 	msr	BASEPRI, r0
   38536:	f04f 0003 	mov.w	r0, #3
   3853a:	df02      	svc	2
   3853c:	e793      	b.n	38466 <ll_reset+0x52>
   3853e:	bf00      	nop
   38540:	2000094c 	.word	0x2000094c
   38544:	20000ab0 	.word	0x20000ab0
   38548:	200009a8 	.word	0x200009a8
   3854c:	20000970 	.word	0x20000970
   38550:	2000093c 	.word	0x2000093c
   38554:	00052d5c 	.word	0x00052d5c
   38558:	00052d98 	.word	0x00052d98
   3855c:	00052bbc 	.word	0x00052bbc
   38560:	00052ec0 	.word	0x00052ec0

00038564 <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   38564:	b510      	push	{r4, lr}
   38566:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   38568:	2400      	movs	r4, #0
   3856a:	e9cd 4400 	strd	r4, r4, [sp]
   3856e:	9b04      	ldr	r3, [sp, #16]
   38570:	f008 f962 	bl	40838 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   38574:	b002      	add	sp, #8
   38576:	bd10      	pop	{r4, pc}

00038578 <lll_resume>:

void lll_resume(void *param)
{
   38578:	b510      	push	{r4, lr}
   3857a:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   3857c:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   3857e:	691a      	ldr	r2, [r3, #16]
   38580:	6999      	ldr	r1, [r3, #24]
   38582:	2401      	movs	r4, #1
{
   38584:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   38586:	4020      	ands	r0, r4
   38588:	e9cd 0400 	strd	r0, r4, [sp]
   3858c:	6958      	ldr	r0, [r3, #20]
   3858e:	f008 f953 	bl	40838 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   38592:	b108      	cbz	r0, 38598 <lll_resume+0x20>
   38594:	3077      	adds	r0, #119	; 0x77
   38596:	d101      	bne.n	3859c <lll_resume+0x24>
}
   38598:	b002      	add	sp, #8
   3859a:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   3859c:	4a06      	ldr	r2, [pc, #24]	; (385b8 <lll_resume+0x40>)
   3859e:	4907      	ldr	r1, [pc, #28]	; (385bc <lll_resume+0x44>)
   385a0:	4807      	ldr	r0, [pc, #28]	; (385c0 <lll_resume+0x48>)
   385a2:	234f      	movs	r3, #79	; 0x4f
   385a4:	f011 fab0 	bl	49b08 <printk>
   385a8:	4040      	eors	r0, r0
   385aa:	f380 8811 	msr	BASEPRI, r0
   385ae:	f04f 0003 	mov.w	r0, #3
   385b2:	df02      	svc	2
}
   385b4:	b002      	add	sp, #8
   385b6:	bd10      	pop	{r4, pc}
   385b8:	00052ec8 	.word	0x00052ec8
   385bc:	00052f0c 	.word	0x00052f0c
   385c0:	00052bbc 	.word	0x00052bbc

000385c4 <ticker_stop_cb>:
{
   385c4:	b530      	push	{r4, r5, lr}
   385c6:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   385c8:	4b19      	ldr	r3, [pc, #100]	; (38630 <ticker_stop_cb+0x6c>)
{
   385ca:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   385cc:	4a19      	ldr	r2, [pc, #100]	; (38634 <ticker_stop_cb+0x70>)
   385ce:	1aeb      	subs	r3, r5, r3
   385d0:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   385d4:	f413 5f7f 	tst.w	r3, #16320	; 0x3fc0
	handle = ull_adv_handle_get(adv);
   385d8:	f3c3 1487 	ubfx	r4, r3, #6, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   385dc:	d119      	bne.n	38612 <ticker_stop_cb+0x4e>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   385de:	1ca2      	adds	r2, r4, #2
   385e0:	4b15      	ldr	r3, [pc, #84]	; (38638 <ticker_stop_cb+0x74>)
   385e2:	9500      	str	r5, [sp, #0]
   385e4:	b2d2      	uxtb	r2, r2
   385e6:	2101      	movs	r1, #1
   385e8:	2000      	movs	r0, #0
   385ea:	f7fd f82d 	bl	35648 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   385ee:	f030 0302 	bics.w	r3, r0, #2
   385f2:	d00c      	beq.n	3860e <ticker_stop_cb+0x4a>
   385f4:	4a11      	ldr	r2, [pc, #68]	; (3863c <ticker_stop_cb+0x78>)
   385f6:	4912      	ldr	r1, [pc, #72]	; (38640 <ticker_stop_cb+0x7c>)
   385f8:	4812      	ldr	r0, [pc, #72]	; (38644 <ticker_stop_cb+0x80>)
   385fa:	f640 03d2 	movw	r3, #2258	; 0x8d2
   385fe:	f011 fa83 	bl	49b08 <printk>
   38602:	4040      	eors	r0, r0
   38604:	f380 8811 	msr	BASEPRI, r0
   38608:	f04f 0003 	mov.w	r0, #3
   3860c:	df02      	svc	2
}
   3860e:	b003      	add	sp, #12
   38610:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   38612:	4a0a      	ldr	r2, [pc, #40]	; (3863c <ticker_stop_cb+0x78>)
   38614:	490c      	ldr	r1, [pc, #48]	; (38648 <ticker_stop_cb+0x84>)
   38616:	480b      	ldr	r0, [pc, #44]	; (38644 <ticker_stop_cb+0x80>)
   38618:	f640 03cd 	movw	r3, #2253	; 0x8cd
   3861c:	f011 fa74 	bl	49b08 <printk>
   38620:	4040      	eors	r0, r0
   38622:	f380 8811 	msr	BASEPRI, r0
   38626:	f04f 0003 	mov.w	r0, #3
   3862a:	df02      	svc	2
   3862c:	e7d7      	b.n	385de <ticker_stop_cb+0x1a>
   3862e:	bf00      	nop
   38630:	200057bc 	.word	0x200057bc
   38634:	88888889 	.word	0x88888889
   38638:	000386e1 	.word	0x000386e1
   3863c:	00052f20 	.word	0x00052f20
   38640:	00052f6c 	.word	0x00052f6c
   38644:	00052bbc 	.word	0x00052bbc
   38648:	00052f60 	.word	0x00052f60

0003864c <disabled_cb>:
{
   3864c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   3864e:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   38650:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
   38652:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   38654:	b1d7      	cbz	r7, 3868c <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
   38656:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
   38658:	2300      	movs	r3, #0
   3865a:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   3865c:	b34c      	cbz	r4, 386b2 <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
   3865e:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   38660:	2316      	movs	r3, #22
	adv->node_rx_cc_free = NULL;
   38662:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   38664:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   38666:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3866a:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   3866c:	221e      	movs	r2, #30
   3866e:	f104 001c 	add.w	r0, r4, #28
   38672:	f013 fb83 	bl	4bd7c <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   38676:	233c      	movs	r3, #60	; 0x3c
   38678:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
   3867a:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   3867c:	4621      	mov	r1, r4
   3867e:	4638      	mov	r0, r7
   38680:	f7ff fab0 	bl	37be4 <ll_rx_put>
}
   38684:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   38688:	f7ff bab6 	b.w	37bf8 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   3868c:	4a10      	ldr	r2, [pc, #64]	; (386d0 <disabled_cb+0x84>)
   3868e:	4911      	ldr	r1, [pc, #68]	; (386d4 <disabled_cb+0x88>)
   38690:	4811      	ldr	r0, [pc, #68]	; (386d8 <disabled_cb+0x8c>)
   38692:	f640 131a 	movw	r3, #2330	; 0x91a
   38696:	f011 fa37 	bl	49b08 <printk>
   3869a:	4040      	eors	r0, r0
   3869c:	f380 8811 	msr	BASEPRI, r0
   386a0:	f04f 0003 	mov.w	r0, #3
   386a4:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   386a6:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
   386a8:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
   386aa:	2300      	movs	r3, #0
   386ac:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   386ae:	2c00      	cmp	r4, #0
   386b0:	d1d5      	bne.n	3865e <disabled_cb+0x12>
   386b2:	4a07      	ldr	r2, [pc, #28]	; (386d0 <disabled_cb+0x84>)
   386b4:	4909      	ldr	r1, [pc, #36]	; (386dc <disabled_cb+0x90>)
   386b6:	4808      	ldr	r0, [pc, #32]	; (386d8 <disabled_cb+0x8c>)
   386b8:	f640 131e 	movw	r3, #2334	; 0x91e
   386bc:	f011 fa24 	bl	49b08 <printk>
   386c0:	4040      	eors	r0, r0
   386c2:	f380 8811 	msr	BASEPRI, r0
   386c6:	f04f 0003 	mov.w	r0, #3
   386ca:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   386cc:	6e6c      	ldr	r4, [r5, #100]	; 0x64
   386ce:	e7c6      	b.n	3865e <disabled_cb+0x12>
   386d0:	00052f20 	.word	0x00052f20
   386d4:	00052f88 	.word	0x00052f88
   386d8:	00052bbc 	.word	0x00052bbc
   386dc:	00052f9c 	.word	0x00052f9c

000386e0 <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   386e0:	b100      	cbz	r0, 386e4 <ticker_stop_op_cb+0x4>
   386e2:	4770      	bx	lr
	mfy.param = param;
   386e4:	4b0c      	ldr	r3, [pc, #48]	; (38718 <ticker_stop_op_cb+0x38>)
{
   386e6:	b510      	push	{r4, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   386e8:	4602      	mov	r2, r0
   386ea:	460c      	mov	r4, r1
   386ec:	2002      	movs	r0, #2
   386ee:	2101      	movs	r1, #1
	mfy.param = param;
   386f0:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   386f2:	f7fb fcd7 	bl	340a4 <mayfly_enqueue>
	LL_ASSERT(!ret);
   386f6:	b900      	cbnz	r0, 386fa <ticker_stop_op_cb+0x1a>
}
   386f8:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   386fa:	4a08      	ldr	r2, [pc, #32]	; (3871c <ticker_stop_op_cb+0x3c>)
   386fc:	4908      	ldr	r1, [pc, #32]	; (38720 <ticker_stop_op_cb+0x40>)
   386fe:	4809      	ldr	r0, [pc, #36]	; (38724 <ticker_stop_op_cb+0x44>)
   38700:	f640 03ee 	movw	r3, #2286	; 0x8ee
   38704:	f011 fa00 	bl	49b08 <printk>
   38708:	4040      	eors	r0, r0
   3870a:	f380 8811 	msr	BASEPRI, r0
   3870e:	f04f 0003 	mov.w	r0, #3
   38712:	df02      	svc	2
}
   38714:	bd10      	pop	{r4, pc}
   38716:	bf00      	nop
   38718:	20000bd4 	.word	0x20000bd4
   3871c:	00052f20 	.word	0x00052f20
   38720:	00052e98 	.word	0x00052e98
   38724:	00052bbc 	.word	0x00052bbc

00038728 <adv_disable>:
{
   38728:	b538      	push	{r3, r4, r5, lr}
   3872a:	4604      	mov	r4, r0
   3872c:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   38730:	b353      	cbz	r3, 38788 <adv_disable+0x60>
		mfy.param = &adv->lll;
   38732:	4d17      	ldr	r5, [pc, #92]	; (38790 <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   38734:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
   38736:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   38738:	b16b      	cbz	r3, 38756 <adv_disable+0x2e>
   3873a:	4a16      	ldr	r2, [pc, #88]	; (38794 <adv_disable+0x6c>)
   3873c:	4916      	ldr	r1, [pc, #88]	; (38798 <adv_disable+0x70>)
   3873e:	4817      	ldr	r0, [pc, #92]	; (3879c <adv_disable+0x74>)
   38740:	f640 1303 	movw	r3, #2307	; 0x903
   38744:	f011 f9e0 	bl	49b08 <printk>
   38748:	4040      	eors	r0, r0
   3874a:	f380 8811 	msr	BASEPRI, r0
   3874e:	f04f 0003 	mov.w	r0, #3
   38752:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   38754:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   38756:	4912      	ldr	r1, [pc, #72]	; (387a0 <adv_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   38758:	4b0d      	ldr	r3, [pc, #52]	; (38790 <adv_disable+0x68>)
   3875a:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   3875c:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   38760:	4611      	mov	r1, r2
   38762:	2001      	movs	r0, #1
   38764:	f7fb fc9e 	bl	340a4 <mayfly_enqueue>
		LL_ASSERT(!ret);
   38768:	b900      	cbnz	r0, 3876c <adv_disable+0x44>
}
   3876a:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   3876c:	4a09      	ldr	r2, [pc, #36]	; (38794 <adv_disable+0x6c>)
   3876e:	490d      	ldr	r1, [pc, #52]	; (387a4 <adv_disable+0x7c>)
   38770:	480a      	ldr	r0, [pc, #40]	; (3879c <adv_disable+0x74>)
   38772:	f640 130a 	movw	r3, #2314	; 0x90a
   38776:	f011 f9c7 	bl	49b08 <printk>
   3877a:	4040      	eors	r0, r0
   3877c:	f380 8811 	msr	BASEPRI, r0
   38780:	f04f 0003 	mov.w	r0, #3
   38784:	df02      	svc	2
}
   38786:	bd38      	pop	{r3, r4, r5, pc}
   38788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
   3878c:	f7ff bf5e 	b.w	3864c <disabled_cb>
   38790:	20000bc4 	.word	0x20000bc4
   38794:	00052f20 	.word	0x00052f20
   38798:	00052fb4 	.word	0x00052fb4
   3879c:	00052bbc 	.word	0x00052bbc
   387a0:	0003864d 	.word	0x0003864d
   387a4:	00052e98 	.word	0x00052e98

000387a8 <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   387a8:	b900      	cbnz	r0, 387ac <ticker_update_op_cb+0x4>
   387aa:	4770      	bx	lr
{
   387ac:	b510      	push	{r4, lr}
   387ae:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   387b0:	f7ff faf6 	bl	37da0 <ull_disable_mark_get>
   387b4:	4284      	cmp	r4, r0
   387b6:	d00c      	beq.n	387d2 <ticker_update_op_cb+0x2a>
   387b8:	4a06      	ldr	r2, [pc, #24]	; (387d4 <ticker_update_op_cb+0x2c>)
   387ba:	4907      	ldr	r1, [pc, #28]	; (387d8 <ticker_update_op_cb+0x30>)
   387bc:	4807      	ldr	r0, [pc, #28]	; (387dc <ticker_update_op_cb+0x34>)
   387be:	f640 03bf 	movw	r3, #2239	; 0x8bf
   387c2:	f011 f9a1 	bl	49b08 <printk>
   387c6:	4040      	eors	r0, r0
   387c8:	f380 8811 	msr	BASEPRI, r0
   387cc:	f04f 0003 	mov.w	r0, #3
   387d0:	df02      	svc	2
}
   387d2:	bd10      	pop	{r4, pc}
   387d4:	00052f20 	.word	0x00052f20
   387d8:	00052fc8 	.word	0x00052fc8
   387dc:	00052bbc 	.word	0x00052bbc

000387e0 <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
   387e0:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   387e2:	4b13      	ldr	r3, [pc, #76]	; (38830 <init_set.constprop.0+0x50>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   387e4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   387e6:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   387ea:	f893 c06a 	ldrb.w	ip, [r3, #106]	; 0x6a
   387ee:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   387f2:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   387f6:	f022 0202 	bic.w	r2, r2, #2
   387fa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   387fc:	f042 020e 	orr.w	r2, r2, #14
   38800:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
   38802:	2006      	movs	r0, #6
	pdu->type = pdu_type;
   38804:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   38806:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   3880a:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   3880e:	f8a3 e068 	strh.w	lr, [r3, #104]	; 0x68
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   38812:	f883 c06a 	strb.w	ip, [r3, #106]	; 0x6a
	pdu->len = BDADDR_SIZE;
   38816:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
   38818:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   3881a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   3881e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   38822:	2204      	movs	r2, #4
   38824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   38826:	7058      	strb	r0, [r3, #1]
	pdu->type = pdu_type;
   38828:	701a      	strb	r2, [r3, #0]
	adv->delay_remain = ULL_ADV_RANDOM_DELAY;
#endif /* ONFIG_BT_CTLR_JIT_SCHEDULING */

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
   3882a:	f85d fb04 	ldr.w	pc, [sp], #4
   3882e:	bf00      	nop
   38830:	200057bc 	.word	0x200057bc

00038834 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   38834:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   38836:	4c1b      	ldr	r4, [pc, #108]	; (388a4 <conn_release.constprop.0+0x70>)
   38838:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
   3883a:	6dab      	ldr	r3, [r5, #88]	; 0x58
   3883c:	b163      	cbz	r3, 38858 <conn_release.constprop.0+0x24>
   3883e:	4a1a      	ldr	r2, [pc, #104]	; (388a8 <conn_release.constprop.0+0x74>)
   38840:	491a      	ldr	r1, [pc, #104]	; (388ac <conn_release.constprop.0+0x78>)
   38842:	481b      	ldr	r0, [pc, #108]	; (388b0 <conn_release.constprop.0+0x7c>)
   38844:	f640 1348 	movw	r3, #2376	; 0x948
   38848:	f011 f95e 	bl	49b08 <printk>
   3884c:	4040      	eors	r0, r0
   3884e:	f380 8811 	msr	BASEPRI, r0
   38852:	f04f 0003 	mov.w	r0, #3
   38856:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   38858:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   3885c:	f105 0048 	add.w	r0, r5, #72	; 0x48
   38860:	f7fb fba0 	bl	33fa4 <memq_deinit>
	LL_ASSERT(link);
   38864:	4606      	mov	r6, r0
   38866:	b170      	cbz	r0, 38886 <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   38868:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   3886a:	65ae      	str	r6, [r5, #88]	; 0x58
	adv->lll.conn = NULL;
   3886c:	2500      	movs	r5, #0
	ll_conn_release(lll->hdr.parent);
   3886e:	f001 fbf7 	bl	3a060 <ll_conn_release>
	ll_rx_release(adv->node_rx_cc_free);
   38872:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
   38874:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   38876:	f7ff f9af 	bl	37bd8 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   3887a:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
   3887c:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
   3887e:	f7ff f99f 	bl	37bc0 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   38882:	6625      	str	r5, [r4, #96]	; 0x60
}
   38884:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   38886:	4a08      	ldr	r2, [pc, #32]	; (388a8 <conn_release.constprop.0+0x74>)
   38888:	490a      	ldr	r1, [pc, #40]	; (388b4 <conn_release.constprop.0+0x80>)
   3888a:	4809      	ldr	r0, [pc, #36]	; (388b0 <conn_release.constprop.0+0x7c>)
   3888c:	f640 134a 	movw	r3, #2378	; 0x94a
   38890:	f011 f93a 	bl	49b08 <printk>
   38894:	4040      	eors	r0, r0
   38896:	f380 8811 	msr	BASEPRI, r0
   3889a:	f04f 0003 	mov.w	r0, #3
   3889e:	df02      	svc	2
   388a0:	e7e2      	b.n	38868 <conn_release.constprop.0+0x34>
   388a2:	bf00      	nop
   388a4:	200057bc 	.word	0x200057bc
   388a8:	00052f20 	.word	0x00052f20
   388ac:	00052ff8 	.word	0x00052ff8
   388b0:	00052bbc 	.word	0x00052bbc
   388b4:	00053124 	.word	0x00053124

000388b8 <disable.constprop.0>:
static inline uint8_t disable(uint8_t handle)
   388b8:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
   388ba:	4c52      	ldr	r4, [pc, #328]	; (38a04 <disable.constprop.0+0x14c>)
   388bc:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   388c0:	07d9      	lsls	r1, r3, #31
static inline uint8_t disable(uint8_t handle)
   388c2:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
   388c4:	d563      	bpl.n	3898e <disable.constprop.0+0xd6>
	if (adv->lll.conn) {
   388c6:	6a23      	ldr	r3, [r4, #32]
   388c8:	b153      	cbz	r3, 388e0 <disable.constprop.0+0x28>
		adv->lll.conn->periph.cancelled = 1U;
   388ca:	f893 2020 	ldrb.w	r2, [r3, #32]
   388ce:	f042 0202 	orr.w	r2, r2, #2
   388d2:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   388d6:	6a23      	ldr	r3, [r4, #32]
   388d8:	f893 3020 	ldrb.w	r3, [r3, #32]
   388dc:	07da      	lsls	r2, r3, #31
   388de:	d46b      	bmi.n	389b8 <disable.constprop.0+0x100>
	mark = ull_disable_mark(adv);
   388e0:	4848      	ldr	r0, [pc, #288]	; (38a04 <disable.constprop.0+0x14c>)
   388e2:	f7ff fa45 	bl	37d70 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   388e6:	4284      	cmp	r4, r0
   388e8:	d00c      	beq.n	38904 <disable.constprop.0+0x4c>
   388ea:	4a47      	ldr	r2, [pc, #284]	; (38a08 <disable.constprop.0+0x150>)
   388ec:	4947      	ldr	r1, [pc, #284]	; (38a0c <disable.constprop.0+0x154>)
   388ee:	4848      	ldr	r0, [pc, #288]	; (38a10 <disable.constprop.0+0x158>)
   388f0:	f640 13ff 	movw	r3, #2559	; 0x9ff
   388f4:	f011 f908 	bl	49b08 <printk>
   388f8:	4040      	eors	r0, r0
   388fa:	f380 8811 	msr	BASEPRI, r0
   388fe:	f04f 0003 	mov.w	r0, #3
   38902:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   38904:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   38908:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3890a:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   3890c:	d50d      	bpl.n	3892a <disable.constprop.0+0x72>
		ret_cb = TICKER_STATUS_BUSY;
   3890e:	2102      	movs	r1, #2
   38910:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   38912:	4b40      	ldr	r3, [pc, #256]	; (38a14 <disable.constprop.0+0x15c>)
   38914:	9500      	str	r5, [sp, #0]
   38916:	2103      	movs	r1, #3
   38918:	2201      	movs	r2, #1
   3891a:	2000      	movs	r0, #0
   3891c:	f7fc fe94 	bl	35648 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   38920:	4629      	mov	r1, r5
   38922:	f7ff f9fd 	bl	37d20 <ull_ticker_status_take>
		if (ret) {
   38926:	2800      	cmp	r0, #0
   38928:	d159      	bne.n	389de <disable.constprop.0+0x126>
	ret_cb = TICKER_STATUS_BUSY;
   3892a:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   3892c:	2103      	movs	r1, #3
   3892e:	4b39      	ldr	r3, [pc, #228]	; (38a14 <disable.constprop.0+0x15c>)
   38930:	9500      	str	r5, [sp, #0]
   38932:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   38934:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   38936:	f7fc fe87 	bl	35648 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   3893a:	4629      	mov	r1, r5
   3893c:	f7ff f9f0 	bl	37d20 <ull_ticker_status_take>
	if (ret) {
   38940:	bb40      	cbnz	r0, 38994 <disable.constprop.0+0xdc>
	err = ull_disable(&adv->lll);
   38942:	4835      	ldr	r0, [pc, #212]	; (38a18 <disable.constprop.0+0x160>)
   38944:	f7ff fa50 	bl	37de8 <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
   38948:	b108      	cbz	r0, 3894e <disable.constprop.0+0x96>
   3894a:	3078      	adds	r0, #120	; 0x78
   3894c:	d136      	bne.n	389bc <disable.constprop.0+0x104>
	mark = ull_disable_unmark(adv);
   3894e:	482d      	ldr	r0, [pc, #180]	; (38a04 <disable.constprop.0+0x14c>)
   38950:	f7ff fa1a 	bl	37d88 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   38954:	4284      	cmp	r4, r0
   38956:	d00c      	beq.n	38972 <disable.constprop.0+0xba>
   38958:	4a2b      	ldr	r2, [pc, #172]	; (38a08 <disable.constprop.0+0x150>)
   3895a:	492c      	ldr	r1, [pc, #176]	; (38a0c <disable.constprop.0+0x154>)
   3895c:	482c      	ldr	r0, [pc, #176]	; (38a10 <disable.constprop.0+0x158>)
   3895e:	f640 2321 	movw	r3, #2593	; 0xa21
   38962:	f011 f8d1 	bl	49b08 <printk>
   38966:	4040      	eors	r0, r0
   38968:	f380 8811 	msr	BASEPRI, r0
   3896c:	f04f 0003 	mov.w	r0, #3
   38970:	df02      	svc	2
	if (adv->lll.conn) {
   38972:	6a23      	ldr	r3, [r4, #32]
   38974:	b10b      	cbz	r3, 3897a <disable.constprop.0+0xc2>
		conn_release(adv);
   38976:	f7ff ff5d 	bl	38834 <conn_release.constprop.0>
	adv->is_enabled = 0U;
   3897a:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   3897e:	f36f 0300 	bfc	r3, #0, #1
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   38982:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
   38984:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   38988:	f000 fc68 	bl	3925c <ull_scan_is_enabled_get>
   3898c:	b320      	cbz	r0, 389d8 <disable.constprop.0+0x120>
			return 0;
   3898e:	2000      	movs	r0, #0
}
   38990:	b005      	add	sp, #20
   38992:	bd30      	pop	{r4, r5, pc}
		mark = ull_disable_unmark(adv);
   38994:	481b      	ldr	r0, [pc, #108]	; (38a04 <disable.constprop.0+0x14c>)
   38996:	f7ff f9f7 	bl	37d88 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   3899a:	4284      	cmp	r4, r0
   3899c:	d00c      	beq.n	389b8 <disable.constprop.0+0x100>
   3899e:	4a1a      	ldr	r2, [pc, #104]	; (38a08 <disable.constprop.0+0x150>)
   389a0:	491a      	ldr	r1, [pc, #104]	; (38a0c <disable.constprop.0+0x154>)
   389a2:	481b      	ldr	r0, [pc, #108]	; (38a10 <disable.constprop.0+0x158>)
   389a4:	f640 2318 	movw	r3, #2584	; 0xa18
   389a8:	f011 f8ae 	bl	49b08 <printk>
   389ac:	4040      	eors	r0, r0
   389ae:	f380 8811 	msr	BASEPRI, r0
   389b2:	f04f 0003 	mov.w	r0, #3
   389b6:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   389b8:	200c      	movs	r0, #12
   389ba:	e7e9      	b.n	38990 <disable.constprop.0+0xd8>
	LL_ASSERT(!err || (err == -EALREADY));
   389bc:	4a12      	ldr	r2, [pc, #72]	; (38a08 <disable.constprop.0+0x150>)
   389be:	4917      	ldr	r1, [pc, #92]	; (38a1c <disable.constprop.0+0x164>)
   389c0:	4813      	ldr	r0, [pc, #76]	; (38a10 <disable.constprop.0+0x158>)
   389c2:	f640 231e 	movw	r3, #2590	; 0xa1e
   389c6:	f011 f89f 	bl	49b08 <printk>
   389ca:	4040      	eors	r0, r0
   389cc:	f380 8811 	msr	BASEPRI, r0
   389d0:	f04f 0003 	mov.w	r0, #3
   389d4:	df02      	svc	2
   389d6:	e7ba      	b.n	3894e <disable.constprop.0+0x96>
		ull_filter_adv_scan_state_cb(0);
   389d8:	f006 fe4a 	bl	3f670 <ull_filter_adv_scan_state_cb>
   389dc:	e7d7      	b.n	3898e <disable.constprop.0+0xd6>
			mark = ull_disable_unmark(adv);
   389de:	4809      	ldr	r0, [pc, #36]	; (38a04 <disable.constprop.0+0x14c>)
   389e0:	f7ff f9d2 	bl	37d88 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   389e4:	4284      	cmp	r4, r0
   389e6:	d0e7      	beq.n	389b8 <disable.constprop.0+0x100>
   389e8:	4a07      	ldr	r2, [pc, #28]	; (38a08 <disable.constprop.0+0x150>)
   389ea:	4908      	ldr	r1, [pc, #32]	; (38a0c <disable.constprop.0+0x154>)
   389ec:	4808      	ldr	r0, [pc, #32]	; (38a10 <disable.constprop.0+0x158>)
   389ee:	f640 230a 	movw	r3, #2570	; 0xa0a
   389f2:	f011 f889 	bl	49b08 <printk>
   389f6:	4040      	eors	r0, r0
   389f8:	f380 8811 	msr	BASEPRI, r0
   389fc:	f04f 0003 	mov.w	r0, #3
   38a00:	df02      	svc	2
   38a02:	e7d9      	b.n	389b8 <disable.constprop.0+0x100>
   38a04:	200057bc 	.word	0x200057bc
   38a08:	00052f20 	.word	0x00052f20
   38a0c:	0005300c 	.word	0x0005300c
   38a10:	00052bbc 	.word	0x00052bbc
   38a14:	000371f9 	.word	0x000371f9
   38a18:	200057d8 	.word	0x200057d8
   38a1c:	00053018 	.word	0x00053018

00038a20 <adv_time_get.constprop.0.isra.0>:
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
   38a20:	b410      	push	{r4}
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   38a22:	7804      	ldrb	r4, [r0, #0]
   38a24:	f004 040f 	and.w	r4, r4, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
   38a28:	1e53      	subs	r3, r2, #1
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   38a2a:	2c02      	cmp	r4, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   38a2c:	b29b      	uxth	r3, r3
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   38a2e:	d01f      	beq.n	38a70 <adv_time_get.constprop.0.isra.0+0x50>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   38a30:	2c01      	cmp	r4, #1
   38a32:	d009      	beq.n	38a48 <adv_time_get.constprop.0.isra.0+0x28>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   38a34:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
   38a36:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
   38a38:	b18c      	cbz	r4, 38a5e <adv_time_get.constprop.0.isra.0+0x3e>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
   38a3a:	2c06      	cmp	r4, #6
   38a3c:	d00f      	beq.n	38a5e <adv_time_get.constprop.0.isra.0+0x3e>
   38a3e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   38a42:	f44f 70f3 	mov.w	r0, #486	; 0x1e6
   38a46:	e003      	b.n	38a50 <adv_time_get.constprop.0.isra.0+0x30>
   38a48:	f44f 6287 	mov.w	r2, #1080	; 0x438
   38a4c:	f240 2016 	movw	r0, #534	; 0x216
			time_us += (BYTES2US(adv_size, PHY_1M) +
   38a50:	fb03 2300 	mla	r3, r3, r0, r2
   38a54:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   38a58:	4018      	ands	r0, r3
}
   38a5a:	bc10      	pop	{r4}
   38a5c:	4770      	bx	lr
				adv_size += pdu->len;
   38a5e:	7842      	ldrb	r2, [r0, #1]
   38a60:	3210      	adds	r2, #16
			time_us += (BYTES2US(adv_size, PHY_1M) +
   38a62:	00d2      	lsls	r2, r2, #3
   38a64:	f501 715c 	add.w	r1, r1, #880	; 0x370
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   38a68:	f502 70b3 	add.w	r0, r2, #358	; 0x166
   38a6c:	440a      	add	r2, r1
   38a6e:	e7ef      	b.n	38a50 <adv_time_get.constprop.0.isra.0+0x30>
			adv_size += pdu->len;
   38a70:	7841      	ldrb	r1, [r0, #1]
}
   38a72:	bc10      	pop	{r4}
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   38a74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   38a78:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   38a7c:	0058      	lsls	r0, r3, #1
   38a7e:	3110      	adds	r1, #16
   38a80:	f500 70c8 	add.w	r0, r0, #400	; 0x190
   38a84:	00cb      	lsls	r3, r1, #3
   38a86:	fb03 0202 	mla	r2, r3, r2, r0
   38a8a:	b290      	uxth	r0, r2
}
   38a8c:	4770      	bx	lr
   38a8e:	bf00      	nop

00038a90 <ticker_cb>:
{
   38a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38a94:	461d      	mov	r5, r3
   38a96:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   38a98:	f64f 73ff 	movw	r3, #65535	; 0xffff
   38a9c:	429d      	cmp	r5, r3
{
   38a9e:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   38aa2:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   38aa4:	d018      	beq.n	38ad8 <ticker_cb+0x48>
	return ++hdr->ref;
   38aa6:	7823      	ldrb	r3, [r4, #0]
   38aa8:	3301      	adds	r3, #1
   38aaa:	b2db      	uxtb	r3, r3
   38aac:	4607      	mov	r7, r0
   38aae:	4616      	mov	r6, r2
   38ab0:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
   38ab2:	2b00      	cmp	r3, #0
   38ab4:	d061      	beq.n	38b7a <ticker_cb+0xea>
		p.ticks_at_expire = ticks_at_expire;
   38ab6:	4938      	ldr	r1, [pc, #224]	; (38b98 <ticker_cb+0x108>)
		mfy.param = &p;
   38ab8:	4b38      	ldr	r3, [pc, #224]	; (38b9c <ticker_cb+0x10c>)
		p.lazy = lazy;
   38aba:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
   38abc:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   38ac0:	2200      	movs	r2, #0
		p.param = lll;
   38ac2:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
   38ac4:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
   38ac8:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
   38acc:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   38ace:	2001      	movs	r0, #1
   38ad0:	4611      	mov	r1, r2
   38ad2:	f7fb fae7 	bl	340a4 <mayfly_enqueue>
		LL_ASSERT(!ret);
   38ad6:	b938      	cbnz	r0, 38ae8 <ticker_cb+0x58>
	if (!lll->is_hdcd)
   38ad8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   38adc:	f010 0501 	ands.w	r5, r0, #1
   38ae0:	d014      	beq.n	38b0c <ticker_cb+0x7c>
}
   38ae2:	b00a      	add	sp, #40	; 0x28
   38ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   38ae8:	4a2d      	ldr	r2, [pc, #180]	; (38ba0 <ticker_cb+0x110>)
   38aea:	492e      	ldr	r1, [pc, #184]	; (38ba4 <ticker_cb+0x114>)
   38aec:	482e      	ldr	r0, [pc, #184]	; (38ba8 <ticker_cb+0x118>)
   38aee:	f640 0392 	movw	r3, #2194	; 0x892
   38af2:	f011 f809 	bl	49b08 <printk>
   38af6:	4040      	eors	r0, r0
   38af8:	f380 8811 	msr	BASEPRI, r0
   38afc:	f04f 0003 	mov.w	r0, #3
   38b00:	df02      	svc	2
	if (!lll->is_hdcd)
   38b02:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   38b06:	f010 0501 	ands.w	r5, r0, #1
   38b0a:	d1ea      	bne.n	38ae2 <ticker_cb+0x52>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
   38b0c:	2104      	movs	r1, #4
   38b0e:	a809      	add	r0, sp, #36	; 0x24
   38b10:	f007 fcc4 	bl	4049c <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
   38b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
   38b16:	4a25      	ldr	r2, [pc, #148]	; (38bac <ticker_cb+0x11c>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   38b18:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
   38b1a:	fba2 1203 	umull	r1, r2, r2, r3
   38b1e:	1a99      	subs	r1, r3, r2
   38b20:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   38b24:	0a12      	lsrs	r2, r2, #8
   38b26:	f240 1147 	movw	r1, #327	; 0x147
   38b2a:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   38b2e:	4a20      	ldr	r2, [pc, #128]	; (38bb0 <ticker_cb+0x120>)
   38b30:	4920      	ldr	r1, [pc, #128]	; (38bb4 <ticker_cb+0x124>)
   38b32:	1aa2      	subs	r2, r4, r2
   38b34:	fba1 1202 	umull	r1, r2, r1, r2
   38b38:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   38b3a:	491f      	ldr	r1, [pc, #124]	; (38bb8 <ticker_cb+0x128>)
   38b3c:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
   38b3e:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   38b40:	e9cd 5104 	strd	r5, r1, [sp, #16]
   38b44:	e9cd 5502 	strd	r5, r5, [sp, #8]
   38b48:	e9cd 5500 	strd	r5, r5, [sp]
   38b4c:	b2d2      	uxtb	r2, r2
   38b4e:	2101      	movs	r1, #1
   38b50:	4628      	mov	r0, r5
	random_delay += (ticks_delay_window_offset + 1);
   38b52:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   38b54:	f7fc fd60 	bl	35618 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   38b58:	f030 0302 	bics.w	r3, r0, #2
   38b5c:	d0c1      	beq.n	38ae2 <ticker_cb+0x52>
   38b5e:	4a10      	ldr	r2, [pc, #64]	; (38ba0 <ticker_cb+0x110>)
   38b60:	4916      	ldr	r1, [pc, #88]	; (38bbc <ticker_cb+0x12c>)
   38b62:	4811      	ldr	r0, [pc, #68]	; (38ba8 <ticker_cb+0x118>)
   38b64:	f240 732c 	movw	r3, #1836	; 0x72c
   38b68:	f010 ffce 	bl	49b08 <printk>
   38b6c:	4040      	eors	r0, r0
   38b6e:	f380 8811 	msr	BASEPRI, r0
   38b72:	f04f 0003 	mov.w	r0, #3
   38b76:	df02      	svc	2
}
   38b78:	e7b3      	b.n	38ae2 <ticker_cb+0x52>
		LL_ASSERT(ref);
   38b7a:	4a09      	ldr	r2, [pc, #36]	; (38ba0 <ticker_cb+0x110>)
   38b7c:	4910      	ldr	r1, [pc, #64]	; (38bc0 <ticker_cb+0x130>)
   38b7e:	480a      	ldr	r0, [pc, #40]	; (38ba8 <ticker_cb+0x118>)
   38b80:	f640 0385 	movw	r3, #2181	; 0x885
   38b84:	f010 ffc0 	bl	49b08 <printk>
   38b88:	4040      	eors	r0, r0
   38b8a:	f380 8811 	msr	BASEPRI, r0
   38b8e:	f04f 0003 	mov.w	r0, #3
   38b92:	df02      	svc	2
   38b94:	e78f      	b.n	38ab6 <ticker_cb+0x26>
   38b96:	bf00      	nop
   38b98:	20005790 	.word	0x20005790
   38b9c:	20000bb4 	.word	0x20000bb4
   38ba0:	00052f20 	.word	0x00052f20
   38ba4:	00052e98 	.word	0x00052e98
   38ba8:	00052bbc 	.word	0x00052bbc
   38bac:	90d4f121 	.word	0x90d4f121
   38bb0:	200057bc 	.word	0x200057bc
   38bb4:	88888889 	.word	0x88888889
   38bb8:	000387a9 	.word	0x000387a9
   38bbc:	00052f6c 	.word	0x00052f6c
   38bc0:	00053030 	.word	0x00053030

00038bc4 <ll_adv_params_set>:
{
   38bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!adv || adv->is_enabled) {
   38bc8:	4c6e      	ldr	r4, [pc, #440]	; (38d84 <ll_adv_params_set+0x1c0>)
{
   38bca:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   38bcc:	4b6e      	ldr	r3, [pc, #440]	; (38d88 <ll_adv_params_set+0x1c4>)
	if (!adv || adv->is_enabled) {
   38bce:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
   38bd2:	4680      	mov	r8, r0
   38bd4:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   38bd6:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   38bda:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
   38bdc:	f016 0601 	ands.w	r6, r6, #1
{
   38be0:	4615      	mov	r5, r2
   38be2:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
   38be6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   38bea:	9000      	str	r0, [sp, #0]
   38bec:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   38bf0:	f040 808a 	bne.w	38d08 <ll_adv_params_set+0x144>
	adv->lll.chan_map = chan_map;
   38bf4:	f00c 0c07 	and.w	ip, ip, #7
   38bf8:	f002 0203 	and.w	r2, r2, #3
   38bfc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   38c00:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   38c04:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		adv->interval = 0;
   38c08:	f1be 0f01 	cmp.w	lr, #1
   38c0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   38c10:	bf08      	it	eq
   38c12:	f04f 0800 	moveq.w	r8, #0
	pdu->type = pdu_adv_type[adv_type];
   38c16:	f10e 0308 	add.w	r3, lr, #8
   38c1a:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
   38c1e:	eb0d 0e03 	add.w	lr, sp, r3
   38c22:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
   38c26:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   38c28:	f898 9000 	ldrb.w	r9, [r8]
	pdu->type = pdu_adv_type[adv_type];
   38c2c:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
   38c30:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   38c34:	f013 0f0e 	tst.w	r3, #14
	adv->lll.chan_map = chan_map;
   38c38:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
   38c3c:	f029 011f 	bic.w	r1, r9, #31
   38c40:	f003 030f 	and.w	r3, r3, #15
	adv->lll.chan_map = chan_map;
   38c44:	ea4c 0c02 	orr.w	ip, ip, r2
   38c48:	ea43 0301 	orr.w	r3, r3, r1
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   38c4c:	bf0c      	ite	eq
   38c4e:	2201      	moveq	r2, #1
   38c50:	2200      	movne	r2, #0
   38c52:	f362 1345 	bfi	r3, r2, #5, #1
	adv->lll.chan_map = chan_map;
   38c56:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   38c5a:	f888 3000 	strb.w	r3, [r8]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   38c5e:	f003 030f 	and.w	r3, r3, #15
   38c62:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
   38c64:	f009 090f 	and.w	r9, r9, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   38c68:	d045      	beq.n	38cf6 <ll_adv_params_set+0x132>
	adv->own_addr_type = own_addr_type;
   38c6a:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   38c6e:	f365 0342 	bfi	r3, r5, #1, #2
   38c72:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   38c76:	b2da      	uxtb	r2, r3
   38c78:	075b      	lsls	r3, r3, #29
   38c7a:	d508      	bpl.n	38c8e <ll_adv_params_set+0xca>
		adv->peer_addr_type = direct_addr_type;
   38c7c:	f367 02c3 	bfi	r2, r7, #3, #1
   38c80:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   38c84:	4841      	ldr	r0, [pc, #260]	; (38d8c <ll_adv_params_set+0x1c8>)
   38c86:	990a      	ldr	r1, [sp, #40]	; 0x28
   38c88:	2206      	movs	r2, #6
   38c8a:	f013 f86c 	bl	4bd66 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   38c8e:	f898 3000 	ldrb.w	r3, [r8]
   38c92:	f003 020f 	and.w	r2, r3, #15
   38c96:	2a01      	cmp	r2, #1
		pdu->tx_addr = own_addr_type & 0x1;
   38c98:	f005 0a01 	and.w	sl, r5, #1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   38c9c:	d039      	beq.n	38d12 <ll_adv_params_set+0x14e>
	} else if (pdu->len == 0) {
   38c9e:	f898 2001 	ldrb.w	r2, [r8, #1]
   38ca2:	b1f2      	cbz	r2, 38ce2 <ll_adv_params_set+0x11e>
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
   38ca4:	f1b9 0f01 	cmp.w	r9, #1
   38ca8:	d04e      	beq.n	38d48 <ll_adv_params_set+0x184>
		pdu->tx_addr = own_addr_type & 0x1;
   38caa:	f898 3000 	ldrb.w	r3, [r8]
   38cae:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = 0;
   38cb2:	f36f 13c7 	bfc	r3, #7, #1
   38cb6:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   38cba:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	hdr->parent = parent;
   38cbe:	61e4      	str	r4, [r4, #28]
   38cc0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   38cc4:	01ad      	lsls	r5, r5, #6
   38cc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   38cc8:	f005 0540 	and.w	r5, r5, #64	; 0x40
		if (pdu->len == 0) {
   38ccc:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   38cce:	f045 0504 	orr.w	r5, r5, #4
   38cd2:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   38cd4:	b90a      	cbnz	r2, 38cda <ll_adv_params_set+0x116>
			pdu->len = BDADDR_SIZE;
   38cd6:	2206      	movs	r2, #6
   38cd8:	705a      	strb	r2, [r3, #1]
}
   38cda:	4630      	mov	r0, r6
   38cdc:	b002      	add	sp, #8
   38cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   38ce2:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = 0;
   38ce6:	f362 13c7 	bfi	r3, r2, #7, #1
   38cea:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
   38cee:	2306      	movs	r3, #6
   38cf0:	f888 3001 	strb.w	r3, [r8, #1]
   38cf4:	e7e1      	b.n	38cba <ll_adv_params_set+0xf6>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
   38cf6:	f1b9 0f01 	cmp.w	r9, #1
   38cfa:	d0b6      	beq.n	38c6a <ll_adv_params_set+0xa6>
		if (pdu->len == 0U) {
   38cfc:	f898 2001 	ldrb.w	r2, [r8, #1]
   38d00:	b9b2      	cbnz	r2, 38d30 <ll_adv_params_set+0x16c>
			adv->ad_data_backup.len = 0U;
   38d02:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
   38d06:	e7b0      	b.n	38c6a <ll_adv_params_set+0xa6>
		return BT_HCI_ERR_CMD_DISALLOWED;
   38d08:	260c      	movs	r6, #12
}
   38d0a:	4630      	mov	r0, r6
   38d0c:	b002      	add	sp, #8
   38d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->rx_addr = direct_addr_type;
   38d12:	4640      	mov	r0, r8
		pdu->tx_addr = own_addr_type & 0x1;
   38d14:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = direct_addr_type;
   38d18:	f367 13c7 	bfi	r3, r7, #7, #1
   38d1c:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   38d20:	990a      	ldr	r1, [sp, #40]	; 0x28
   38d22:	2206      	movs	r2, #6
   38d24:	f013 f81f 	bl	4bd66 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   38d28:	230c      	movs	r3, #12
   38d2a:	f888 3001 	strb.w	r3, [r8, #1]
   38d2e:	e7c4      	b.n	38cba <ll_adv_params_set+0xf6>
			LL_ASSERT(pdu->len >=
   38d30:	2a05      	cmp	r2, #5
   38d32:	d916      	bls.n	38d62 <ll_adv_params_set+0x19e>
			adv->ad_data_backup.len = pdu->len -
   38d34:	3a06      	subs	r2, #6
   38d36:	b2d2      	uxtb	r2, r2
   38d38:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   38d3c:	f108 0108 	add.w	r1, r8, #8
   38d40:	4813      	ldr	r0, [pc, #76]	; (38d90 <ll_adv_params_set+0x1cc>)
   38d42:	f013 f810 	bl	4bd66 <memcpy>
   38d46:	e790      	b.n	38c6a <ll_adv_params_set+0xa6>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
   38d48:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   38d4c:	4910      	ldr	r1, [pc, #64]	; (38d90 <ll_adv_params_set+0x1cc>)
   38d4e:	f108 0008 	add.w	r0, r8, #8
   38d52:	f013 f808 	bl	4bd66 <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
   38d56:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   38d5a:	3306      	adds	r3, #6
   38d5c:	f888 3001 	strb.w	r3, [r8, #1]
   38d60:	e7a3      	b.n	38caa <ll_adv_params_set+0xe6>
			LL_ASSERT(pdu->len >=
   38d62:	4a0c      	ldr	r2, [pc, #48]	; (38d94 <ll_adv_params_set+0x1d0>)
   38d64:	490c      	ldr	r1, [pc, #48]	; (38d98 <ll_adv_params_set+0x1d4>)
   38d66:	480d      	ldr	r0, [pc, #52]	; (38d9c <ll_adv_params_set+0x1d8>)
   38d68:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   38d6c:	f010 fecc 	bl	49b08 <printk>
   38d70:	4040      	eors	r0, r0
   38d72:	f380 8811 	msr	BASEPRI, r0
   38d76:	f04f 0003 	mov.w	r0, #3
   38d7a:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
   38d7c:	f898 2001 	ldrb.w	r2, [r8, #1]
   38d80:	e7d8      	b.n	38d34 <ll_adv_params_set+0x170>
   38d82:	bf00      	nop
   38d84:	200057bc 	.word	0x200057bc
   38d88:	00051abc 	.word	0x00051abc
   38d8c:	20005827 	.word	0x20005827
   38d90:	200057fd 	.word	0x200057fd
   38d94:	00052f20 	.word	0x00052f20
   38d98:	00053034 	.word	0x00053034
   38d9c:	00052bbc 	.word	0x00052bbc

00038da0 <ull_adv_init>:
{
   38da0:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   38da2:	4c06      	ldr	r4, [pc, #24]	; (38dbc <ull_adv_init+0x1c>)
   38da4:	4620      	mov	r0, r4
   38da6:	f007 ffbb 	bl	40d20 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   38daa:	f104 000c 	add.w	r0, r4, #12
   38dae:	f007 ffb7 	bl	40d20 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   38db2:	f7ff fd15 	bl	387e0 <init_set.constprop.0>
}
   38db6:	2000      	movs	r0, #0
   38db8:	bd10      	pop	{r4, pc}
   38dba:	bf00      	nop
   38dbc:	200057e4 	.word	0x200057e4

00038dc0 <ull_adv_reset>:
{
   38dc0:	b508      	push	{r3, lr}
		(void)disable(handle);
   38dc2:	f7ff fd79 	bl	388b8 <disable.constprop.0>
}
   38dc6:	2000      	movs	r0, #0
   38dc8:	bd08      	pop	{r3, pc}
   38dca:	bf00      	nop

00038dcc <ull_adv_reset_finalize>:
{
   38dcc:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
   38dce:	4c09      	ldr	r4, [pc, #36]	; (38df4 <ull_adv_reset_finalize+0x28>)
		lll_adv_data_reset(&lll->scan_rsp);
   38dd0:	f104 050c 	add.w	r5, r4, #12
		lll_adv_data_reset(&lll->adv_data);
   38dd4:	4620      	mov	r0, r4
   38dd6:	f007 ffb3 	bl	40d40 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   38dda:	4628      	mov	r0, r5
   38ddc:	f007 ffb0 	bl	40d40 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   38de0:	4620      	mov	r0, r4
   38de2:	f007 ff9d 	bl	40d20 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   38de6:	4628      	mov	r0, r5
   38de8:	f007 ff9a 	bl	40d20 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   38dec:	f7ff fcf8 	bl	387e0 <init_set.constprop.0>
}
   38df0:	2000      	movs	r0, #0
   38df2:	bd38      	pop	{r3, r4, r5, pc}
   38df4:	200057e4 	.word	0x200057e4

00038df8 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   38df8:	4a03      	ldr	r2, [pc, #12]	; (38e08 <ull_adv_handle_get+0x10>)
   38dfa:	4b04      	ldr	r3, [pc, #16]	; (38e0c <ull_adv_handle_get+0x14>)
   38dfc:	1a80      	subs	r0, r0, r2
   38dfe:	fba3 3000 	umull	r3, r0, r3, r0
}
   38e02:	f3c0 108f 	ubfx	r0, r0, #6, #16
   38e06:	4770      	bx	lr
   38e08:	200057bc 	.word	0x200057bc
   38e0c:	88888889 	.word	0x88888889

00038e10 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   38e10:	4a04      	ldr	r2, [pc, #16]	; (38e24 <ull_adv_lll_handle_get+0x14>)
   38e12:	6800      	ldr	r0, [r0, #0]
   38e14:	4b04      	ldr	r3, [pc, #16]	; (38e28 <ull_adv_lll_handle_get+0x18>)
   38e16:	1a80      	subs	r0, r0, r2
   38e18:	fba3 3000 	umull	r3, r0, r3, r0
}
   38e1c:	f3c0 108f 	ubfx	r0, r0, #6, #16
   38e20:	4770      	bx	lr
   38e22:	bf00      	nop
   38e24:	200057bc 	.word	0x200057bc
   38e28:	88888889 	.word	0x88888889

00038e2c <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   38e2c:	b938      	cbnz	r0, 38e3e <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   38e2e:	4805      	ldr	r0, [pc, #20]	; (38e44 <ull_adv_is_enabled_get+0x18>)
   38e30:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
		return NULL;
   38e34:	f013 0f01 	tst.w	r3, #1
   38e38:	bf08      	it	eq
   38e3a:	2000      	moveq	r0, #0
   38e3c:	4770      	bx	lr
   38e3e:	2000      	movs	r0, #0
}
   38e40:	4770      	bx	lr
   38e42:	bf00      	nop
   38e44:	200057bc 	.word	0x200057bc

00038e48 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   38e48:	b928      	cbnz	r0, 38e56 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   38e4a:	4b04      	ldr	r3, [pc, #16]	; (38e5c <ull_adv_is_enabled+0x14>)
   38e4c:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   38e50:	f000 0001 	and.w	r0, r0, #1
   38e54:	4770      	bx	lr
   38e56:	2000      	movs	r0, #0
}
   38e58:	4770      	bx	lr
   38e5a:	bf00      	nop
   38e5c:	200057bc 	.word	0x200057bc

00038e60 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   38e60:	b950      	cbnz	r0, 38e78 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   38e62:	4b06      	ldr	r3, [pc, #24]	; (38e7c <ull_adv_filter_pol_get+0x1c>)
   38e64:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   38e68:	f010 0001 	ands.w	r0, r0, #1
   38e6c:	d005      	beq.n	38e7a <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   38e6e:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   38e72:	f000 0003 	and.w	r0, r0, #3
   38e76:	4770      	bx	lr
		return 0;
   38e78:	2000      	movs	r0, #0
}
   38e7a:	4770      	bx	lr
   38e7c:	200057bc 	.word	0x200057bc

00038e80 <ull_adv_pdu_update_addrs>:
{
   38e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38e82:	460c      	mov	r4, r1
   38e84:	4606      	mov	r6, r0
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   38e86:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
   38e8a:	f006 fd63 	bl	3f954 <ull_filter_adva_get>
			own_id_addr = ll_addr_get(pdu->tx_addr);
   38e8e:	7823      	ldrb	r3, [r4, #0]
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   38e90:	4605      	mov	r5, r0
			own_id_addr = ll_addr_get(pdu->tx_addr);
   38e92:	f3c3 1080 	ubfx	r0, r3, #6, #1
   38e96:	f7fc fc9d 	bl	357d4 <ll_addr_get>
	(void)memcpy(adv->own_id_addr, own_id_addr, BDADDR_SIZE);
   38e9a:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
   38e9c:	4607      	mov	r7, r0
	(void)memcpy(adv->own_id_addr, own_id_addr, BDADDR_SIZE);
   38e9e:	4601      	mov	r1, r0
   38ea0:	f106 0071 	add.w	r0, r6, #113	; 0x71
   38ea4:	f012 ff5f 	bl	4bd66 <memcpy>
	if (rpa) {
   38ea8:	b185      	cbz	r5, 38ecc <ull_adv_pdu_update_addrs+0x4c>
		pdu->tx_addr = 1;
   38eaa:	7823      	ldrb	r3, [r4, #0]
   38eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   38eb0:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   38eb2:	1ca7      	adds	r7, r4, #2
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   38eb4:	2206      	movs	r2, #6
   38eb6:	4629      	mov	r1, r5
   38eb8:	4638      	mov	r0, r7
   38eba:	f012 ff54 	bl	4bd66 <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   38ebe:	7823      	ldrb	r3, [r4, #0]
   38ec0:	f003 030f 	and.w	r3, r3, #15
   38ec4:	2b01      	cmp	r3, #1
   38ec6:	d003      	beq.n	38ed0 <ull_adv_pdu_update_addrs+0x50>
}
   38ec8:	4638      	mov	r0, r7
   38eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_addr = own_id_addr;
   38ecc:	463d      	mov	r5, r7
   38ece:	e7f0      	b.n	38eb2 <ull_adv_pdu_update_addrs+0x32>
	rx_addr = ull_filter_tgta_get(adv->lll.rl_idx);
   38ed0:	f896 0026 	ldrb.w	r0, [r6, #38]	; 0x26
   38ed4:	f006 fd6c 	bl	3f9b0 <ull_filter_tgta_get>
	if (rx_addr) {
   38ed8:	4601      	mov	r1, r0
   38eda:	2800      	cmp	r0, #0
   38edc:	d0f4      	beq.n	38ec8 <ull_adv_pdu_update_addrs+0x48>
		pdu->rx_addr = 1;
   38ede:	7823      	ldrb	r3, [r4, #0]
   38ee0:	4620      	mov	r0, r4
   38ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   38ee6:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   38eea:	2206      	movs	r2, #6
   38eec:	f012 ff3b 	bl	4bd66 <memcpy>
}
   38ef0:	4638      	mov	r0, r7
   38ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00038ef4 <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   38ef4:	291f      	cmp	r1, #31
   38ef6:	d849      	bhi.n	38f8c <ull_adv_data_set+0x98>
{
   38ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   38efa:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   38efe:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   38f02:	b083      	sub	sp, #12
   38f04:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   38f06:	7833      	ldrb	r3, [r6, #0]
   38f08:	f003 030f 	and.w	r3, r3, #15
   38f0c:	2b01      	cmp	r3, #1
   38f0e:	460d      	mov	r5, r1
   38f10:	4604      	mov	r4, r0
   38f12:	4617      	mov	r7, r2
   38f14:	d03c      	beq.n	38f90 <ull_adv_data_set+0x9c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   38f16:	f10d 0107 	add.w	r1, sp, #7
   38f1a:	3028      	adds	r0, #40	; 0x28
   38f1c:	f007 ff92 	bl	40e44 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   38f20:	4631      	mov	r1, r6
   38f22:	4606      	mov	r6, r0
   38f24:	f811 2b02 	ldrb.w	r2, [r1], #2
   38f28:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
   38f2c:	f3c2 0303 	ubfx	r3, r2, #0, #4
   38f30:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
   38f34:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   38f38:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   38f3c:	f002 0280 	and.w	r2, r2, #128	; 0x80
   38f40:	4630      	mov	r0, r6
   38f42:	4313      	orrs	r3, r2
   38f44:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   38f48:	2206      	movs	r2, #6
   38f4a:	f012 ff0c 	bl	4bd66 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   38f4e:	462a      	mov	r2, r5
   38f50:	4639      	mov	r1, r7
   38f52:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
   38f56:	3506      	adds	r5, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   38f58:	f012 ff05 	bl	4bd66 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   38f5c:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
   38f5e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   38f62:	07db      	lsls	r3, r3, #31
   38f64:	d406      	bmi.n	38f74 <ull_adv_data_set+0x80>
	pdu->last = idx;
   38f66:	f89d 3007 	ldrb.w	r3, [sp, #7]
   38f6a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		return 0;
   38f6e:	2000      	movs	r0, #0
}
   38f70:	b003      	add	sp, #12
   38f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   38f74:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   38f78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   38f7c:	4631      	mov	r1, r6
   38f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   38f80:	4620      	mov	r0, r4
   38f82:	f7ed feb5 	bl	26cf0 <ull_adv_time_update>
		if (err) {
   38f86:	2800      	cmp	r0, #0
   38f88:	d0ed      	beq.n	38f66 <ull_adv_data_set+0x72>
   38f8a:	e7f1      	b.n	38f70 <ull_adv_data_set+0x7c>
		return BT_HCI_ERR_INVALID_PARAM;
   38f8c:	2012      	movs	r0, #18
}
   38f8e:	4770      	bx	lr
		adv->ad_data_backup.len = len;
   38f90:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
   38f94:	460a      	mov	r2, r1
   38f96:	3041      	adds	r0, #65	; 0x41
   38f98:	4639      	mov	r1, r7
   38f9a:	f012 fee4 	bl	4bd66 <memcpy>
		return 0;
   38f9e:	e7e6      	b.n	38f6e <ull_adv_data_set+0x7a>

00038fa0 <ll_adv_data_set>:
{
   38fa0:	4603      	mov	r3, r0
   38fa2:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   38fa4:	4801      	ldr	r0, [pc, #4]	; (38fac <ll_adv_data_set+0xc>)
   38fa6:	4619      	mov	r1, r3
   38fa8:	f7ff bfa4 	b.w	38ef4 <ull_adv_data_set>
   38fac:	200057bc 	.word	0x200057bc

00038fb0 <ull_scan_rsp_set.part.0>:
uint8_t ull_scan_rsp_set(struct ll_adv_set *adv, uint8_t len,
   38fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   38fb2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   38fb6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   38fba:	b083      	sub	sp, #12
   38fbc:	6b9d      	ldr	r5, [r3, #56]	; 0x38
   38fbe:	460e      	mov	r6, r1
   38fc0:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   38fc2:	f10d 0107 	add.w	r1, sp, #7
   38fc6:	3034      	adds	r0, #52	; 0x34
   38fc8:	4617      	mov	r7, r2
   38fca:	f007 ff3b 	bl	40e44 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   38fce:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   38fd0:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
   38fd2:	f811 3b02 	ldrb.w	r3, [r1], #2
   38fd6:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   38fda:	019b      	lsls	r3, r3, #6
   38fdc:	f043 0304 	orr.w	r3, r3, #4
   38fe0:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   38fe2:	1db3      	adds	r3, r6, #6
   38fe4:	7043      	strb	r3, [r0, #1]
   38fe6:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   38fe8:	3002      	adds	r0, #2
   38fea:	f012 febc 	bl	4bd66 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   38fee:	4632      	mov	r2, r6
   38ff0:	4639      	mov	r1, r7
   38ff2:	f105 0008 	add.w	r0, r5, #8
   38ff6:	f012 feb6 	bl	4bd66 <memcpy>
	if (adv->is_enabled) {
   38ffa:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   38ffe:	07da      	lsls	r2, r3, #31
   39000:	d50b      	bpl.n	3901a <ull_scan_rsp_set.part.0+0x6a>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   39002:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
   39006:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   3900a:	2341      	movs	r3, #65	; 0x41
   3900c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   3900e:	780a      	ldrb	r2, [r1, #0]
   39010:	f002 020f 	and.w	r2, r2, #15
   39014:	40d3      	lsrs	r3, r2
   39016:	07db      	lsls	r3, r3, #31
   39018:	d406      	bmi.n	39028 <ull_scan_rsp_set.part.0+0x78>
	pdu->last = idx;
   3901a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3901e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
   39022:	2000      	movs	r0, #0
}
   39024:	b003      	add	sp, #12
   39026:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   39028:	462a      	mov	r2, r5
   3902a:	4620      	mov	r0, r4
   3902c:	f7ed fe60 	bl	26cf0 <ull_adv_time_update>
			if (err) {
   39030:	2800      	cmp	r0, #0
   39032:	d0f2      	beq.n	3901a <ull_scan_rsp_set.part.0+0x6a>
   39034:	e7f6      	b.n	39024 <ull_scan_rsp_set.part.0+0x74>
   39036:	bf00      	nop

00039038 <ll_adv_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   39038:	281f      	cmp	r0, #31
{
   3903a:	4603      	mov	r3, r0
   3903c:	460a      	mov	r2, r1
	if (len > PDU_AC_DATA_SIZE_MAX) {
   3903e:	d803      	bhi.n	39048 <ll_adv_scan_rsp_set+0x10>
   39040:	4802      	ldr	r0, [pc, #8]	; (3904c <ll_adv_scan_rsp_set+0x14>)
   39042:	4619      	mov	r1, r3
   39044:	f7ff bfb4 	b.w	38fb0 <ull_scan_rsp_set.part.0>
}
   39048:	2012      	movs	r0, #18
   3904a:	4770      	bx	lr
   3904c:	200057bc 	.word	0x200057bc

00039050 <ticker_cb>:
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
		      uint32_t remainder, uint16_t lazy, uint8_t force,
		      void *param)
{
   39050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   39054:	9c09      	ldr	r4, [sp, #36]	; 0x24
   39056:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   3905a:	4625      	mov	r5, r4
{
   3905c:	4680      	mov	r8, r0
   3905e:	f815 1b1c 	ldrb.w	r1, [r5], #28
   39062:	3101      	adds	r1, #1
   39064:	b2c9      	uxtb	r1, r1
   39066:	4617      	mov	r7, r2
   39068:	461e      	mov	r6, r3
   3906a:	7021      	strb	r1, [r4, #0]

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   3906c:	b181      	cbz	r1, 39090 <ticker_cb+0x40>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   3906e:	4c17      	ldr	r4, [pc, #92]	; (390cc <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
	mfy.param = &p;
   39070:	4b17      	ldr	r3, [pc, #92]	; (390d0 <ticker_cb+0x80>)
	p.lazy = lazy;
   39072:	8126      	strh	r6, [r4, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   39074:	2200      	movs	r2, #0
   39076:	4611      	mov	r1, r2
   39078:	2001      	movs	r0, #1
	p.remainder = remainder;
   3907a:	e9c4 8700 	strd	r8, r7, [r4]
	p.param = lll;
   3907e:	60e5      	str	r5, [r4, #12]
	p.force = force;
   39080:	f884 900a 	strb.w	r9, [r4, #10]
	mfy.param = &p;
   39084:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   39086:	f7fb f80d 	bl	340a4 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   3908a:	b978      	cbnz	r0, 390ac <ticker_cb+0x5c>
			  (ret == TICKER_STATUS_BUSY));
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	DEBUG_RADIO_PREPARE_O(1);
}
   3908c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(ref);
   39090:	4a10      	ldr	r2, [pc, #64]	; (390d4 <ticker_cb+0x84>)
   39092:	4911      	ldr	r1, [pc, #68]	; (390d8 <ticker_cb+0x88>)
   39094:	4811      	ldr	r0, [pc, #68]	; (390dc <ticker_cb+0x8c>)
   39096:	f240 23db 	movw	r3, #731	; 0x2db
   3909a:	f010 fd35 	bl	49b08 <printk>
   3909e:	4040      	eors	r0, r0
   390a0:	f380 8811 	msr	BASEPRI, r0
   390a4:	f04f 0003 	mov.w	r0, #3
   390a8:	df02      	svc	2
   390aa:	e7e0      	b.n	3906e <ticker_cb+0x1e>
	LL_ASSERT(!ret);
   390ac:	4a09      	ldr	r2, [pc, #36]	; (390d4 <ticker_cb+0x84>)
   390ae:	490c      	ldr	r1, [pc, #48]	; (390e0 <ticker_cb+0x90>)
   390b0:	480a      	ldr	r0, [pc, #40]	; (390dc <ticker_cb+0x8c>)
   390b2:	f44f 733a 	mov.w	r3, #744	; 0x2e8
   390b6:	f010 fd27 	bl	49b08 <printk>
   390ba:	4040      	eors	r0, r0
   390bc:	f380 8811 	msr	BASEPRI, r0
   390c0:	f04f 0003 	mov.w	r0, #3
   390c4:	df02      	svc	2
}
   390c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   390ca:	bf00      	nop
   390cc:	2000583c 	.word	0x2000583c
   390d0:	20000be4 	.word	0x20000be4
   390d4:	00053074 	.word	0x00053074
   390d8:	00053030 	.word	0x00053030
   390dc:	00052bbc 	.word	0x00052bbc
   390e0:	00052e98 	.word	0x00052e98

000390e4 <ull_scan_init>:
}
   390e4:	2000      	movs	r0, #0
   390e6:	4770      	bx	lr

000390e8 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   390e8:	3004      	adds	r0, #4
{
   390ea:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   390ec:	f101 021c 	add.w	r2, r1, #28
   390f0:	b2c0      	uxtb	r0, r0
   390f2:	f7fe feb7 	bl	37e64 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   390f6:	b900      	cbnz	r0, 390fa <ull_scan_disable+0x12>
}
   390f8:	bd08      	pop	{r3, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
   390fa:	3078      	adds	r0, #120	; 0x78
   390fc:	d101      	bne.n	39102 <ull_scan_disable+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   390fe:	200c      	movs	r0, #12
}
   39100:	bd08      	pop	{r3, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
   39102:	4a07      	ldr	r2, [pc, #28]	; (39120 <ull_scan_disable+0x38>)
   39104:	4907      	ldr	r1, [pc, #28]	; (39124 <ull_scan_disable+0x3c>)
   39106:	4808      	ldr	r0, [pc, #32]	; (39128 <ull_scan_disable+0x40>)
   39108:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   3910c:	f010 fcfc 	bl	49b08 <printk>
   39110:	4040      	eors	r0, r0
   39112:	f380 8811 	msr	BASEPRI, r0
   39116:	f04f 0003 	mov.w	r0, #3
   3911a:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   3911c:	200c      	movs	r0, #12
   3911e:	e7ef      	b.n	39100 <ull_scan_disable+0x18>
   39120:	00053074 	.word	0x00053074
   39124:	000530b4 	.word	0x000530b4
   39128:	00052bbc 	.word	0x00052bbc

0003912c <ll_scan_enable>:
{
   3912c:	b538      	push	{r3, r4, r5, lr}
	if (!scan || !scan->is_enabled) {
   3912e:	4c2c      	ldr	r4, [pc, #176]	; (391e0 <ll_scan_enable+0xb4>)
   39130:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   39134:	f003 0201 	and.w	r2, r3, #1
	if (!enable) {
   39138:	b358      	cbz	r0, 39192 <ll_scan_enable+0x66>
	if (!scan || scan->is_enabled) {
   3913a:	bb5a      	cbnz	r2, 39194 <ll_scan_enable+0x68>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   3913c:	079a      	lsls	r2, r3, #30
   3913e:	f3c3 0541 	ubfx	r5, r3, #1, #2
   39142:	d50b      	bpl.n	3915c <ll_scan_enable+0x30>
		if (!mem_nz(ll_addr_get(BT_ADDR_LE_RANDOM), BDADDR_SIZE)) {
   39144:	2001      	movs	r0, #1
   39146:	f7fc fb45 	bl	357d4 <ll_addr_get>
   3914a:	2106      	movs	r1, #6
   3914c:	f7fa ff1a 	bl	33f84 <mem_nz>
   39150:	2800      	cmp	r0, #0
   39152:	d042      	beq.n	391da <ll_scan_enable+0xae>
		own_addr_type = scan->own_addr_type;
   39154:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
   39158:	f3c5 0541 	ubfx	r5, r5, #1, #2
	ull_filter_scan_update(lll->filter_policy);
   3915c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   39160:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   39164:	f006 fac4 	bl	3f6f0 <ull_filter_scan_update>
	lll->rpa_gen = 0;
   39168:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   3916c:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	lll->rpa_gen = 0;
   39170:	f36f 0341 	bfc	r3, #1, #1
	lll->rl_idx = FILTER_IDX_NONE;
   39174:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
   39176:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   3917a:	0693      	lsls	r3, r2, #26
	lll->rl_idx = FILTER_IDX_NONE;
   3917c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	if ((lll->type & 0x1) &&
   39180:	d502      	bpl.n	39188 <ll_scan_enable+0x5c>
   39182:	3d02      	subs	r5, #2
   39184:	2d01      	cmp	r5, #1
   39186:	d91e      	bls.n	391c6 <ll_scan_enable+0x9a>
}
   39188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
   3918c:	4814      	ldr	r0, [pc, #80]	; (391e0 <ll_scan_enable+0xb4>)
   3918e:	f7ed be6b 	b.w	26e68 <ull_scan_enable>
	if (!scan || !scan->is_enabled) {
   39192:	b912      	cbnz	r2, 3919a <ll_scan_enable+0x6e>
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
   39194:	250c      	movs	r5, #12
}
   39196:	4628      	mov	r0, r5
   39198:	bd38      	pop	{r3, r4, r5, pc}
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
   3919a:	6a23      	ldr	r3, [r4, #32]
   3919c:	2b00      	cmp	r3, #0
   3919e:	d1f9      	bne.n	39194 <ll_scan_enable+0x68>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   391a0:	4621      	mov	r1, r4
   391a2:	f7ff ffa1 	bl	390e8 <ull_scan_disable>
	if (ret) {
   391a6:	4605      	mov	r5, r0
   391a8:	2800      	cmp	r0, #0
   391aa:	d1f4      	bne.n	39196 <ll_scan_enable+0x6a>
		return ret;
	}

	scan->is_enabled = 0U;
   391ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   391b0:	f360 0300 	bfi	r3, r0, #0, #1
   391b4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

#if defined(CONFIG_BT_CTLR_PRIVACY)
#if defined(CONFIG_BT_BROADCASTER)
	if (!ull_adv_is_enabled_get(0))
   391b8:	f7ff fe38 	bl	38e2c <ull_adv_is_enabled_get>
   391bc:	2800      	cmp	r0, #0
   391be:	d1ea      	bne.n	39196 <ll_scan_enable+0x6a>
#endif
	{
		ull_filter_adv_scan_state_cb(0);
   391c0:	f006 fa56 	bl	3f670 <ull_filter_adv_scan_state_cb>
   391c4:	e7e7      	b.n	39196 <ll_scan_enable+0x6a>
		ull_filter_rpa_update(false);
   391c6:	2000      	movs	r0, #0
   391c8:	f006 fab6 	bl	3f738 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   391cc:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   391d0:	f043 0302 	orr.w	r3, r3, #2
   391d4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   391d8:	e7d6      	b.n	39188 <ll_scan_enable+0x5c>
			return BT_HCI_ERR_INVALID_PARAM;
   391da:	2512      	movs	r5, #18
   391dc:	e7db      	b.n	39196 <ll_scan_enable+0x6a>
   391de:	bf00      	nop
   391e0:	2000584c 	.word	0x2000584c

000391e4 <ull_scan_reset>:
{
   391e4:	b538      	push	{r3, r4, r5, lr}
	if (!scan || !scan->is_enabled) {
   391e6:	4d0f      	ldr	r5, [pc, #60]	; (39224 <ull_scan_reset+0x40>)
	for (handle = 0U; handle < BT_CTLR_SCAN_SET; handle++) {
   391e8:	2400      	movs	r4, #0
   391ea:	b93c      	cbnz	r4, 391fc <ull_scan_reset+0x18>
	if (!scan || !scan->is_enabled) {
   391ec:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
   391f0:	f014 0401 	ands.w	r4, r4, #1
   391f4:	d002      	beq.n	391fc <ull_scan_reset+0x18>
	if (scan->lll.conn) {
   391f6:	6a28      	ldr	r0, [r5, #32]
	ret = ull_scan_disable(handle, scan);
   391f8:	490a      	ldr	r1, [pc, #40]	; (39224 <ull_scan_reset+0x40>)
	if (scan->lll.conn) {
   391fa:	b108      	cbz	r0, 39200 <ull_scan_reset+0x1c>
}
   391fc:	2000      	movs	r0, #0
   391fe:	bd38      	pop	{r3, r4, r5, pc}
	ret = ull_scan_disable(handle, scan);
   39200:	f7ff ff72 	bl	390e8 <ull_scan_disable>
	if (ret) {
   39204:	2800      	cmp	r0, #0
   39206:	d1f0      	bne.n	391ea <ull_scan_reset+0x6>
	scan->is_enabled = 0U;
   39208:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
   3920c:	f360 0200 	bfi	r2, r0, #0, #1
   39210:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
   39214:	f7ff fe0a 	bl	38e2c <ull_adv_is_enabled_get>
   39218:	2800      	cmp	r0, #0
   3921a:	d1e6      	bne.n	391ea <ull_scan_reset+0x6>
		ull_filter_adv_scan_state_cb(0);
   3921c:	f006 fa28 	bl	3f670 <ull_filter_adv_scan_state_cb>
   39220:	e7e3      	b.n	391ea <ull_scan_reset+0x6>
   39222:	bf00      	nop
   39224:	2000584c 	.word	0x2000584c

00039228 <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   39228:	4a03      	ldr	r2, [pc, #12]	; (39238 <ull_scan_handle_get+0x10>)
   3922a:	4b04      	ldr	r3, [pc, #16]	; (3923c <ull_scan_handle_get+0x14>)
   3922c:	1a80      	subs	r0, r0, r2
   3922e:	fba3 3000 	umull	r3, r0, r3, r0
}
   39232:	f3c0 1007 	ubfx	r0, r0, #4, #8
   39236:	4770      	bx	lr
   39238:	2000584c 	.word	0x2000584c
   3923c:	38e38e39 	.word	0x38e38e39

00039240 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   39240:	4a04      	ldr	r2, [pc, #16]	; (39254 <ull_scan_lll_handle_get+0x14>)
   39242:	6800      	ldr	r0, [r0, #0]
   39244:	4b04      	ldr	r3, [pc, #16]	; (39258 <ull_scan_lll_handle_get+0x18>)
   39246:	1a80      	subs	r0, r0, r2
   39248:	fba3 3000 	umull	r3, r0, r3, r0
}
   3924c:	f3c0 1007 	ubfx	r0, r0, #4, #8
   39250:	4770      	bx	lr
   39252:	bf00      	nop
   39254:	2000584c 	.word	0x2000584c
   39258:	38e38e39 	.word	0x38e38e39

0003925c <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   3925c:	b938      	cbnz	r0, 3926e <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   3925e:	4805      	ldr	r0, [pc, #20]	; (39274 <ull_scan_is_enabled_get+0x18>)
   39260:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
		return NULL;
   39264:	f013 0f01 	tst.w	r3, #1
   39268:	bf08      	it	eq
   3926a:	2000      	moveq	r0, #0
   3926c:	4770      	bx	lr
   3926e:	2000      	movs	r0, #0
}
   39270:	4770      	bx	lr
   39272:	bf00      	nop
   39274:	2000584c 	.word	0x2000584c

00039278 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   39278:	4a04      	ldr	r2, [pc, #16]	; (3928c <ull_scan_is_disabled_get+0x14>)
   3927a:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   3927e:	f003 0301 	and.w	r3, r3, #1
	return &ll_scan[handle];
   39282:	4318      	orrs	r0, r3
}
   39284:	bf0c      	ite	eq
   39286:	4610      	moveq	r0, r2
   39288:	2000      	movne	r0, #0
   3928a:	4770      	bx	lr
   3928c:	2000584c 	.word	0x2000584c

00039290 <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
   39290:	b9a0      	cbnz	r0, 392bc <ull_scan_is_enabled+0x2c>
	if (!scan || !scan->is_enabled) {
   39292:	4a0b      	ldr	r2, [pc, #44]	; (392c0 <ull_scan_is_enabled+0x30>)
   39294:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   39298:	f013 0001 	ands.w	r0, r3, #1
   3929c:	d00f      	beq.n	392be <ull_scan_is_enabled+0x2e>
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   3929e:	6a10      	ldr	r0, [r2, #32]
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   392a0:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   392a4:	3800      	subs	r0, #0
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   392a6:	f3c1 1240 	ubfx	r2, r1, #5, #1
   392aa:	f003 0301 	and.w	r3, r3, #1
   392ae:	fa03 f302 	lsl.w	r3, r3, r2
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   392b2:	bf18      	it	ne
   392b4:	2001      	movne	r0, #1
   392b6:	ea43 0080 	orr.w	r0, r3, r0, lsl #2
   392ba:	4770      	bx	lr
		return 0U;
   392bc:	2000      	movs	r0, #0
}
   392be:	4770      	bx	lr
   392c0:	2000584c 	.word	0x2000584c

000392c4 <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   392c4:	b950      	cbnz	r0, 392dc <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
   392c6:	4b06      	ldr	r3, [pc, #24]	; (392e0 <ull_scan_filter_pol_get+0x1c>)
   392c8:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
   392cc:	f010 0001 	ands.w	r0, r0, #1
   392d0:	d005      	beq.n	392de <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
   392d2:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
   392d6:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   392da:	4770      	bx	lr
		return 0;
   392dc:	2000      	movs	r0, #0
}
   392de:	4770      	bx	lr
   392e0:	2000584c 	.word	0x2000584c

000392e4 <init_reset>:
{
   392e4:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   392e6:	4b15      	ldr	r3, [pc, #84]	; (3933c <init_reset+0x58>)
   392e8:	4815      	ldr	r0, [pc, #84]	; (39340 <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   392ea:	4c16      	ldr	r4, [pc, #88]	; (39344 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   392ec:	2206      	movs	r2, #6
   392ee:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   392f2:	f7fa fdcd 	bl	33e90 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   392f6:	4b14      	ldr	r3, [pc, #80]	; (39348 <init_reset+0x64>)
   392f8:	2203      	movs	r2, #3
   392fa:	1d18      	adds	r0, r3, #4
   392fc:	2124      	movs	r1, #36	; 0x24
   392fe:	f7fa fdc7 	bl	33e90 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   39302:	4b12      	ldr	r3, [pc, #72]	; (3934c <init_reset+0x68>)
   39304:	2218      	movs	r2, #24
   39306:	1d18      	adds	r0, r3, #4
   39308:	212c      	movs	r1, #44	; 0x2c
   3930a:	f7fa fdc1 	bl	33e90 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   3930e:	4b10      	ldr	r3, [pc, #64]	; (39350 <init_reset+0x6c>)
   39310:	221b      	movs	r2, #27
   39312:	1d18      	adds	r0, r3, #4
   39314:	2108      	movs	r1, #8
   39316:	f7fa fdbb 	bl	33e90 <mem_init>
	default_phy_tx |= PHY_2M;
   3931a:	490e      	ldr	r1, [pc, #56]	; (39354 <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   3931c:	4a0e      	ldr	r2, [pc, #56]	; (39358 <init_reset+0x74>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   3931e:	480f      	ldr	r0, [pc, #60]	; (3935c <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   39320:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   39322:	f04f 0c1b 	mov.w	ip, #27
   39326:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   3932a:	700b      	strb	r3, [r1, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   3932c:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   39330:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   39332:	f8a0 c000 	strh.w	ip, [r0]
}
   39336:	2000      	movs	r0, #0
   39338:	bd10      	pop	{r4, pc}
   3933a:	bf00      	nop
   3933c:	200058c8 	.word	0x200058c8
   39340:	20003368 	.word	0x20003368
   39344:	200072ba 	.word	0x200072ba
   39348:	20005dcc 	.word	0x20005dcc
   3934c:	200059a8 	.word	0x200059a8
   39350:	200058cc 	.word	0x200058cc
   39354:	20007419 	.word	0x20007419
   39358:	20007418 	.word	0x20007418
   3935c:	200072b8 	.word	0x200072b8

00039360 <ctrl_tx_pause_enqueue>:
{
   39360:	b538      	push	{r3, r4, r5, lr}
   39362:	4604      	mov	r4, r0
		if (!conn->tx_ctrl) {
   39364:	e9d0 3075 	ldrd	r3, r0, [r0, #468]	; 0x1d4
{
   39368:	460d      	mov	r5, r1
	if (
   3936a:	b353      	cbz	r3, 393c2 <ctrl_tx_pause_enqueue+0x62>
	    !conn->llcp_enc.pause_tx &&
   3936c:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   39370:	0789      	lsls	r1, r1, #30
   39372:	d415      	bmi.n	393a0 <ctrl_tx_pause_enqueue+0x40>
	    !conn->llcp_phy.pause_tx &&
   39374:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   39378:	07c9      	lsls	r1, r1, #31
   3937a:	d411      	bmi.n	393a0 <ctrl_tx_pause_enqueue+0x40>
		if (conn->tx_head == conn->tx_data) {
   3937c:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   39380:	428b      	cmp	r3, r1
   39382:	d02f      	beq.n	393e4 <ctrl_tx_pause_enqueue+0x84>
		} else if (!conn->tx_ctrl) {
   39384:	2800      	cmp	r0, #0
   39386:	d04d      	beq.n	39424 <ctrl_tx_pause_enqueue+0xc4>
			LL_ASSERT(!pause);
   39388:	2a00      	cmp	r2, #0
   3938a:	d13d      	bne.n	39408 <ctrl_tx_pause_enqueue+0xa8>
	tx->next = conn->tx_ctrl_last->next;
   3938c:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   39390:	681a      	ldr	r2, [r3, #0]
   39392:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   39394:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   39396:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   39398:	f8c4 51dc 	str.w	r5, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3939c:	b1bb      	cbz	r3, 393ce <ctrl_tx_pause_enqueue+0x6e>
}
   3939e:	bd38      	pop	{r3, r4, r5, pc}
		if (!conn->tx_ctrl) {
   393a0:	b1c0      	cbz	r0, 393d4 <ctrl_tx_pause_enqueue+0x74>
			LL_ASSERT(!pause);
   393a2:	2a00      	cmp	r2, #0
   393a4:	d0f2      	beq.n	3938c <ctrl_tx_pause_enqueue+0x2c>
   393a6:	4a27      	ldr	r2, [pc, #156]	; (39444 <ctrl_tx_pause_enqueue+0xe4>)
   393a8:	4927      	ldr	r1, [pc, #156]	; (39448 <ctrl_tx_pause_enqueue+0xe8>)
   393aa:	4828      	ldr	r0, [pc, #160]	; (3944c <ctrl_tx_pause_enqueue+0xec>)
   393ac:	f44f 6328 	mov.w	r3, #2688	; 0xa80
   393b0:	f010 fbaa 	bl	49b08 <printk>
   393b4:	4040      	eors	r0, r0
   393b6:	f380 8811 	msr	BASEPRI, r0
   393ba:	f04f 0003 	mov.w	r0, #3
   393be:	df02      	svc	2
   393c0:	e7e4      	b.n	3938c <ctrl_tx_pause_enqueue+0x2c>
		if (!conn->tx_ctrl) {
   393c2:	2800      	cmp	r0, #0
   393c4:	d1ed      	bne.n	393a2 <ctrl_tx_pause_enqueue+0x42>
			tx->next = conn->tx_head;
   393c6:	6008      	str	r0, [r1, #0]
			conn->tx_head = tx;
   393c8:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
			if (!pause) {
   393cc:	b1ca      	cbz	r2, 39402 <ctrl_tx_pause_enqueue+0xa2>
		conn->tx_data_last = tx;
   393ce:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
}
   393d2:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   393d4:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   393d6:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
			if (!pause) {
   393da:	2a00      	cmp	r2, #0
   393dc:	d1df      	bne.n	3939e <ctrl_tx_pause_enqueue+0x3e>
				conn->tx_ctrl = tx;
   393de:	e9c4 5576 	strd	r5, r5, [r4, #472]	; 0x1d8
}
   393e2:	bd38      	pop	{r3, r4, r5, pc}
			conn->tx_data = conn->tx_data->next;
   393e4:	6819      	ldr	r1, [r3, #0]
   393e6:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   393ea:	2800      	cmp	r0, #0
   393ec:	d1cc      	bne.n	39388 <ctrl_tx_pause_enqueue+0x28>
			tx->next = conn->tx_head->next;
   393ee:	6819      	ldr	r1, [r3, #0]
   393f0:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   393f2:	601d      	str	r5, [r3, #0]
			if (!pause) {
   393f4:	b90a      	cbnz	r2, 393fa <ctrl_tx_pause_enqueue+0x9a>
				conn->tx_ctrl = tx;
   393f6:	e9c4 5576 	strd	r5, r5, [r4, #472]	; 0x1d8
	if (!tx->next) {
   393fa:	682b      	ldr	r3, [r5, #0]
   393fc:	2b00      	cmp	r3, #0
   393fe:	d1ce      	bne.n	3939e <ctrl_tx_pause_enqueue+0x3e>
   39400:	e7e5      	b.n	393ce <ctrl_tx_pause_enqueue+0x6e>
				conn->tx_ctrl = tx;
   39402:	e9c4 1176 	strd	r1, r1, [r4, #472]	; 0x1d8
	if (!tx->next) {
   39406:	e7e2      	b.n	393ce <ctrl_tx_pause_enqueue+0x6e>
			LL_ASSERT(!pause);
   39408:	4a0e      	ldr	r2, [pc, #56]	; (39444 <ctrl_tx_pause_enqueue+0xe4>)
   3940a:	490f      	ldr	r1, [pc, #60]	; (39448 <ctrl_tx_pause_enqueue+0xe8>)
   3940c:	480f      	ldr	r0, [pc, #60]	; (3944c <ctrl_tx_pause_enqueue+0xec>)
   3940e:	f640 236e 	movw	r3, #2670	; 0xa6e
   39412:	f010 fb79 	bl	49b08 <printk>
   39416:	4040      	eors	r0, r0
   39418:	f380 8811 	msr	BASEPRI, r0
   3941c:	f04f 0003 	mov.w	r0, #3
   39420:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   39422:	e7b3      	b.n	3938c <ctrl_tx_pause_enqueue+0x2c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39424:	7919      	ldrb	r1, [r3, #4]
   39426:	f001 0103 	and.w	r1, r1, #3
   3942a:	2903      	cmp	r1, #3
   3942c:	d004      	beq.n	39438 <ctrl_tx_pause_enqueue+0xd8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3942e:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
			LL_ASSERT(!pause);
   39432:	2a00      	cmp	r2, #0
   39434:	d0aa      	beq.n	3938c <ctrl_tx_pause_enqueue+0x2c>
   39436:	e7e7      	b.n	39408 <ctrl_tx_pause_enqueue+0xa8>
	    ((pdu_data_tx->llctrl.opcode !=
   39438:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3943a:	2903      	cmp	r1, #3
   3943c:	d0d7      	beq.n	393ee <ctrl_tx_pause_enqueue+0x8e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3943e:	290a      	cmp	r1, #10
   39440:	d1f5      	bne.n	3942e <ctrl_tx_pause_enqueue+0xce>
   39442:	e7d4      	b.n	393ee <ctrl_tx_pause_enqueue+0x8e>
   39444:	000530cc 	.word	0x000530cc
   39448:	0005310c 	.word	0x0005310c
   3944c:	00052bbc 	.word	0x00052bbc

00039450 <tx_lll_flush>:
{
   39450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   39454:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   39458:	4934      	ldr	r1, [pc, #208]	; (3952c <tx_lll_flush+0xdc>)
{
   3945a:	b083      	sub	sp, #12
   3945c:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   3945e:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   39462:	4640      	mov	r0, r8
   39464:	f7fa fd7a 	bl	33f5c <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   39468:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
   3946c:	4629      	mov	r1, r5
   3946e:	f008 fd01 	bl	41e74 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   39472:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   39474:	aa01      	add	r2, sp, #4
   39476:	4631      	mov	r1, r6
   39478:	f7fa fdb0 	bl	33fdc <memq_dequeue>
	while (link) {
   3947c:	b328      	cbz	r0, 394ca <tx_lll_flush+0x7a>
   3947e:	4c2c      	ldr	r4, [pc, #176]	; (39530 <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
   39480:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   39484:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   39488:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   3948a:	f894 c001 	ldrb.w	ip, [r4, #1]
   3948e:	78a1      	ldrb	r1, [r4, #2]
	last = last + 1;
   39490:	1c53      	adds	r3, r2, #1
   39492:	b2db      	uxtb	r3, r3
		last = 0U;
   39494:	459c      	cmp	ip, r3
   39496:	bf08      	it	eq
   39498:	2300      	moveq	r3, #0
	if (last == first) {
   3949a:	4299      	cmp	r1, r3
   3949c:	f894 c000 	ldrb.w	ip, [r4]
   394a0:	d033      	beq.n	3950a <tx_lll_flush+0xba>
		lll_tx->node = tx;
   394a2:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   394a4:	fb12 f20c 	smulbb	r2, r2, ip
   394a8:	eb02 0c09 	add.w	ip, r2, r9
		lll_tx->handle = LLL_HANDLE_INVALID;
   394ac:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   394b0:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   394b2:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   394b6:	6002      	str	r2, [r0, #0]
		tx->next = link;
   394b8:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   394ba:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
   394bc:	70e3      	strb	r3, [r4, #3]
   394be:	aa01      	add	r2, sp, #4
   394c0:	4631      	mov	r1, r6
   394c2:	f7fa fd8b 	bl	33fdc <memq_dequeue>
	while (link) {
   394c6:	2800      	cmp	r0, #0
   394c8:	d1de      	bne.n	39488 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   394ca:	f8d8 0154 	ldr.w	r0, [r8, #340]	; 0x154
	rx = (void *)&conn->llcp_terminate.node_rx;
   394ce:	f508 74aa 	add.w	r4, r8, #340	; 0x154
	LL_ASSERT(rx->hdr.link);
   394d2:	b150      	cbz	r0, 394ea <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   394d4:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   394d6:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   394d8:	f8c8 3154 	str.w	r3, [r8, #340]	; 0x154
	ull_rx_put(link, rx);
   394dc:	f7fe fd3a 	bl	37f54 <ull_rx_put>
	ull_rx_sched();
   394e0:	f7fe fd48 	bl	37f74 <ull_rx_sched>
}
   394e4:	b003      	add	sp, #12
   394e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   394ea:	4a12      	ldr	r2, [pc, #72]	; (39534 <tx_lll_flush+0xe4>)
   394ec:	4912      	ldr	r1, [pc, #72]	; (39538 <tx_lll_flush+0xe8>)
   394ee:	4813      	ldr	r0, [pc, #76]	; (3953c <tx_lll_flush+0xec>)
   394f0:	f640 13da 	movw	r3, #2522	; 0x9da
   394f4:	f010 fb08 	bl	49b08 <printk>
   394f8:	4040      	eors	r0, r0
   394fa:	f380 8811 	msr	BASEPRI, r0
   394fe:	f04f 0003 	mov.w	r0, #3
   39502:	df02      	svc	2
	link = rx->hdr.link;
   39504:	f8d8 0154 	ldr.w	r0, [r8, #340]	; 0x154
   39508:	e7e4      	b.n	394d4 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   3950a:	4a0a      	ldr	r2, [pc, #40]	; (39534 <tx_lll_flush+0xe4>)
   3950c:	490c      	ldr	r1, [pc, #48]	; (39540 <tx_lll_flush+0xf0>)
   3950e:	480b      	ldr	r0, [pc, #44]	; (3953c <tx_lll_flush+0xec>)
   39510:	f640 13c6 	movw	r3, #2502	; 0x9c6
   39514:	f010 faf8 	bl	49b08 <printk>
   39518:	4040      	eors	r0, r0
   3951a:	f380 8811 	msr	BASEPRI, r0
   3951e:	f04f 0003 	mov.w	r0, #3
   39522:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   39524:	2300      	movs	r3, #0
   39526:	801b      	strh	r3, [r3, #0]
   39528:	deff      	udf	#255	; 0xff
   3952a:	bf00      	nop
   3952c:	20003368 	.word	0x20003368
   39530:	20000c54 	.word	0x20000c54
   39534:	000530cc 	.word	0x000530cc
   39538:	0005311c 	.word	0x0005311c
   3953c:	00052bbc 	.word	0x00052bbc
   39540:	00053114 	.word	0x00053114

00039544 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   39544:	f890 2176 	ldrb.w	r2, [r0, #374]	; 0x176
   39548:	f012 0202 	ands.w	r2, r2, #2
   3954c:	d00a      	beq.n	39564 <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
   3954e:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
   39552:	b1d3      	cbz	r3, 3958a <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
   39554:	f8d0 31dc 	ldr.w	r3, [r0, #476]	; 0x1dc
   39558:	681a      	ldr	r2, [r3, #0]
   3955a:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   3955c:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   3955e:	680b      	ldr	r3, [r1, #0]
   39560:	b1d3      	cbz	r3, 39598 <ctrl_tx_sec_enqueue+0x54>
   39562:	4770      	bx	lr
		if (conn->tx_head) {
   39564:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
   39568:	b1cb      	cbz	r3, 3959e <ctrl_tx_sec_enqueue+0x5a>
{
   3956a:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
   3956c:	f890 c0f1 	ldrb.w	ip, [r0, #241]	; 0xf1
   39570:	f890 e0f0 	ldrb.w	lr, [r0, #240]	; 0xf0
   39574:	45e6      	cmp	lr, ip
   39576:	d004      	beq.n	39582 <ctrl_tx_sec_enqueue+0x3e>
   39578:	f890 c0f2 	ldrb.w	ip, [r0, #242]	; 0xf2
   3957c:	f1bc 0f03 	cmp.w	ip, #3
   39580:	d010      	beq.n	395a4 <ctrl_tx_sec_enqueue+0x60>
}
   39582:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
   39586:	f7ff beeb 	b.w	39360 <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
   3958a:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
   3958e:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   39590:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
		if (!tx->next) {
   39594:	2b00      	cmp	r3, #0
   39596:	d1e4      	bne.n	39562 <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
   39598:	f8c0 11e4 	str.w	r1, [r0, #484]	; 0x1e4
   3959c:	4770      	bx	lr
	bool pause = false;
   3959e:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
   395a0:	f7ff bede 	b.w	39360 <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   395a4:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   395a8:	f00c 0c03 	and.w	ip, ip, #3
   395ac:	f1bc 0f03 	cmp.w	ip, #3
   395b0:	d1e7      	bne.n	39582 <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
   395b2:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   395b4:	2a03      	cmp	r2, #3
   395b6:	d005      	beq.n	395c4 <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   395b8:	f1a2 020a 	sub.w	r2, r2, #10
   395bc:	fab2 f282 	clz	r2, r2
   395c0:	0952      	lsrs	r2, r2, #5
   395c2:	e7de      	b.n	39582 <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
   395c4:	2201      	movs	r2, #1
   395c6:	e7dc      	b.n	39582 <ctrl_tx_sec_enqueue+0x3e>

000395c8 <ticker_stop_op_cb>:
{
   395c8:	b510      	push	{r4, lr}
   395ca:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   395cc:	b9b0      	cbnz	r0, 395fc <ticker_stop_op_cb+0x34>
	mfy.param = param;
   395ce:	4b12      	ldr	r3, [pc, #72]	; (39618 <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   395d0:	2200      	movs	r2, #0
   395d2:	2101      	movs	r1, #1
   395d4:	2002      	movs	r0, #2
	mfy.param = param;
   395d6:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   395d8:	f7fa fd64 	bl	340a4 <mayfly_enqueue>
	LL_ASSERT(!ret);
   395dc:	b900      	cbnz	r0, 395e0 <ticker_stop_op_cb+0x18>
}
   395de:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   395e0:	4a0e      	ldr	r2, [pc, #56]	; (3961c <ticker_stop_op_cb+0x54>)
   395e2:	490f      	ldr	r1, [pc, #60]	; (39620 <ticker_stop_op_cb+0x58>)
   395e4:	480f      	ldr	r0, [pc, #60]	; (39624 <ticker_stop_op_cb+0x5c>)
   395e6:	f44f 6318 	mov.w	r3, #2432	; 0x980
   395ea:	f010 fa8d 	bl	49b08 <printk>
   395ee:	4040      	eors	r0, r0
   395f0:	f380 8811 	msr	BASEPRI, r0
   395f4:	f04f 0003 	mov.w	r0, #3
   395f8:	df02      	svc	2
}
   395fa:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   395fc:	4a07      	ldr	r2, [pc, #28]	; (3961c <ticker_stop_op_cb+0x54>)
   395fe:	490a      	ldr	r1, [pc, #40]	; (39628 <ticker_stop_op_cb+0x60>)
   39600:	4808      	ldr	r0, [pc, #32]	; (39624 <ticker_stop_op_cb+0x5c>)
   39602:	f640 137a 	movw	r3, #2426	; 0x97a
   39606:	f010 fa7f 	bl	49b08 <printk>
   3960a:	4040      	eors	r0, r0
   3960c:	f380 8811 	msr	BASEPRI, r0
   39610:	f04f 0003 	mov.w	r0, #3
   39614:	df02      	svc	2
   39616:	e7da      	b.n	395ce <ticker_stop_op_cb+0x6>
   39618:	20000c14 	.word	0x20000c14
   3961c:	000530cc 	.word	0x000530cc
   39620:	00052e98 	.word	0x00052e98
   39624:	00052bbc 	.word	0x00052bbc
   39628:	0005312c 	.word	0x0005312c

0003962c <disabled_cb>:
{
   3962c:	b508      	push	{r3, lr}
	mfy.param = param;
   3962e:	4b0b      	ldr	r3, [pc, #44]	; (3965c <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   39630:	2200      	movs	r2, #0
	mfy.param = param;
   39632:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   39634:	4611      	mov	r1, r2
   39636:	2001      	movs	r0, #1
   39638:	f7fa fd34 	bl	340a4 <mayfly_enqueue>
	LL_ASSERT(!ret);
   3963c:	b900      	cbnz	r0, 39640 <disabled_cb+0x14>
}
   3963e:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   39640:	4a07      	ldr	r2, [pc, #28]	; (39660 <disabled_cb+0x34>)
   39642:	4908      	ldr	r1, [pc, #32]	; (39664 <disabled_cb+0x38>)
   39644:	4808      	ldr	r0, [pc, #32]	; (39668 <disabled_cb+0x3c>)
   39646:	f640 13ac 	movw	r3, #2476	; 0x9ac
   3964a:	f010 fa5d 	bl	49b08 <printk>
   3964e:	4040      	eors	r0, r0
   39650:	f380 8811 	msr	BASEPRI, r0
   39654:	f04f 0003 	mov.w	r0, #3
   39658:	df02      	svc	2
}
   3965a:	bd08      	pop	{r3, pc}
   3965c:	20000bf4 	.word	0x20000bf4
   39660:	000530cc 	.word	0x000530cc
   39664:	00052e98 	.word	0x00052e98
   39668:	00052bbc 	.word	0x00052bbc

0003966c <conn_disable>:
{
   3966c:	b538      	push	{r3, r4, r5, lr}
   3966e:	4604      	mov	r4, r0
	return hdr->ref;
   39670:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   39674:	b353      	cbz	r3, 396cc <conn_disable+0x60>
		mfy.param = &conn->lll;
   39676:	4d17      	ldr	r5, [pc, #92]	; (396d4 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   39678:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
   3967a:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   3967c:	b16b      	cbz	r3, 3969a <conn_disable+0x2e>
   3967e:	4a16      	ldr	r2, [pc, #88]	; (396d8 <conn_disable+0x6c>)
   39680:	4916      	ldr	r1, [pc, #88]	; (396dc <conn_disable+0x70>)
   39682:	4817      	ldr	r0, [pc, #92]	; (396e0 <conn_disable+0x74>)
   39684:	f640 1395 	movw	r3, #2453	; 0x995
   39688:	f010 fa3e 	bl	49b08 <printk>
   3968c:	4040      	eors	r0, r0
   3968e:	f380 8811 	msr	BASEPRI, r0
   39692:	f04f 0003 	mov.w	r0, #3
   39696:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   39698:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   3969a:	4912      	ldr	r1, [pc, #72]	; (396e4 <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   3969c:	4b0d      	ldr	r3, [pc, #52]	; (396d4 <conn_disable+0x68>)
   3969e:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   396a0:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   396a4:	4611      	mov	r1, r2
   396a6:	2001      	movs	r0, #1
   396a8:	f7fa fcfc 	bl	340a4 <mayfly_enqueue>
		LL_ASSERT(!ret);
   396ac:	b900      	cbnz	r0, 396b0 <conn_disable+0x44>
}
   396ae:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   396b0:	4a09      	ldr	r2, [pc, #36]	; (396d8 <conn_disable+0x6c>)
   396b2:	490d      	ldr	r1, [pc, #52]	; (396e8 <conn_disable+0x7c>)
   396b4:	480a      	ldr	r0, [pc, #40]	; (396e0 <conn_disable+0x74>)
   396b6:	f640 139c 	movw	r3, #2460	; 0x99c
   396ba:	f010 fa25 	bl	49b08 <printk>
   396be:	4040      	eors	r0, r0
   396c0:	f380 8811 	msr	BASEPRI, r0
   396c4:	f04f 0003 	mov.w	r0, #3
   396c8:	df02      	svc	2
}
   396ca:	bd38      	pop	{r3, r4, r5, pc}
   396cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   396d0:	f7ff bfac 	b.w	3962c <disabled_cb>
   396d4:	20000c04 	.word	0x20000c04
   396d8:	000530cc 	.word	0x000530cc
   396dc:	00052fb4 	.word	0x00052fb4
   396e0:	00052bbc 	.word	0x00052bbc
   396e4:	0003962d 	.word	0x0003962d
   396e8:	00052e98 	.word	0x00052e98

000396ec <conn_setup_adv_scan_disabled_cb>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   396ec:	6883      	ldr	r3, [r0, #8]
   396ee:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   396f0:	7f53      	ldrb	r3, [r2, #29]
   396f2:	09db      	lsrs	r3, r3, #7
	ftr = &(rx->rx_ftr);
   396f4:	f100 0108 	add.w	r1, r0, #8
	switch (lll->role) {
   396f8:	d001      	beq.n	396fe <conn_setup_adv_scan_disabled_cb+0x12>
		ull_periph_setup(rx, ftr, lll);
   396fa:	f7ee b815 	b.w	27728 <ull_periph_setup>
		ull_central_setup(rx, ftr, lll);
   396fe:	f7ee bce3 	b.w	280c8 <ull_central_setup>
   39702:	bf00      	nop

00039704 <ticker_start_conn_op_cb>:
{
   39704:	b510      	push	{r4, lr}
   39706:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39708:	b990      	cbnz	r0, 39730 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   3970a:	4620      	mov	r0, r4
   3970c:	f7fe fb5a 	bl	37dc4 <ull_update_unmark>
	LL_ASSERT(p == param);
   39710:	4284      	cmp	r4, r0
   39712:	d00c      	beq.n	3972e <ticker_start_conn_op_cb+0x2a>
   39714:	4a0d      	ldr	r2, [pc, #52]	; (3974c <ticker_start_conn_op_cb+0x48>)
   39716:	490e      	ldr	r1, [pc, #56]	; (39750 <ticker_start_conn_op_cb+0x4c>)
   39718:	480e      	ldr	r0, [pc, #56]	; (39754 <ticker_start_conn_op_cb+0x50>)
   3971a:	f640 03b7 	movw	r3, #2231	; 0x8b7
   3971e:	f010 f9f3 	bl	49b08 <printk>
   39722:	4040      	eors	r0, r0
   39724:	f380 8811 	msr	BASEPRI, r0
   39728:	f04f 0003 	mov.w	r0, #3
   3972c:	df02      	svc	2
}
   3972e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39730:	4a06      	ldr	r2, [pc, #24]	; (3974c <ticker_start_conn_op_cb+0x48>)
   39732:	4909      	ldr	r1, [pc, #36]	; (39758 <ticker_start_conn_op_cb+0x54>)
   39734:	4807      	ldr	r0, [pc, #28]	; (39754 <ticker_start_conn_op_cb+0x50>)
   39736:	f640 03b4 	movw	r3, #2228	; 0x8b4
   3973a:	f010 f9e5 	bl	49b08 <printk>
   3973e:	4040      	eors	r0, r0
   39740:	f380 8811 	msr	BASEPRI, r0
   39744:	f04f 0003 	mov.w	r0, #3
   39748:	df02      	svc	2
   3974a:	e7de      	b.n	3970a <ticker_start_conn_op_cb+0x6>
   3974c:	000530cc 	.word	0x000530cc
   39750:	00053138 	.word	0x00053138
   39754:	00052bbc 	.word	0x00052bbc
   39758:	0005312c 	.word	0x0005312c

0003975c <ticker_stop_conn_op_cb>:
{
   3975c:	b510      	push	{r4, lr}
   3975e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39760:	b990      	cbnz	r0, 39788 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   39762:	4620      	mov	r0, r4
   39764:	f7fe fb22 	bl	37dac <ull_update_mark>
	LL_ASSERT(p == param);
   39768:	4284      	cmp	r4, r0
   3976a:	d00c      	beq.n	39786 <ticker_stop_conn_op_cb+0x2a>
   3976c:	4a0d      	ldr	r2, [pc, #52]	; (397a4 <ticker_stop_conn_op_cb+0x48>)
   3976e:	490e      	ldr	r1, [pc, #56]	; (397a8 <ticker_stop_conn_op_cb+0x4c>)
   39770:	480e      	ldr	r0, [pc, #56]	; (397ac <ticker_stop_conn_op_cb+0x50>)
   39772:	f640 03ad 	movw	r3, #2221	; 0x8ad
   39776:	f010 f9c7 	bl	49b08 <printk>
   3977a:	4040      	eors	r0, r0
   3977c:	f380 8811 	msr	BASEPRI, r0
   39780:	f04f 0003 	mov.w	r0, #3
   39784:	df02      	svc	2
}
   39786:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39788:	4a06      	ldr	r2, [pc, #24]	; (397a4 <ticker_stop_conn_op_cb+0x48>)
   3978a:	4909      	ldr	r1, [pc, #36]	; (397b0 <ticker_stop_conn_op_cb+0x54>)
   3978c:	4807      	ldr	r0, [pc, #28]	; (397ac <ticker_stop_conn_op_cb+0x50>)
   3978e:	f640 03aa 	movw	r3, #2218	; 0x8aa
   39792:	f010 f9b9 	bl	49b08 <printk>
   39796:	4040      	eors	r0, r0
   39798:	f380 8811 	msr	BASEPRI, r0
   3979c:	f04f 0003 	mov.w	r0, #3
   397a0:	df02      	svc	2
   397a2:	e7de      	b.n	39762 <ticker_stop_conn_op_cb+0x6>
   397a4:	000530cc 	.word	0x000530cc
   397a8:	00053138 	.word	0x00053138
   397ac:	00052bbc 	.word	0x00052bbc
   397b0:	0005312c 	.word	0x0005312c

000397b4 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   397b4:	b900      	cbnz	r0, 397b8 <ticker_update_conn_op_cb+0x4>
   397b6:	4770      	bx	lr
{
   397b8:	b510      	push	{r4, lr}
   397ba:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   397bc:	f7fe fb0e 	bl	37ddc <ull_update_mark_get>
   397c0:	4284      	cmp	r4, r0
   397c2:	d010      	beq.n	397e6 <ticker_update_conn_op_cb+0x32>
   397c4:	f7fe faec 	bl	37da0 <ull_disable_mark_get>
   397c8:	4284      	cmp	r4, r0
   397ca:	d00c      	beq.n	397e6 <ticker_update_conn_op_cb+0x32>
   397cc:	4a06      	ldr	r2, [pc, #24]	; (397e8 <ticker_update_conn_op_cb+0x34>)
   397ce:	4907      	ldr	r1, [pc, #28]	; (397ec <ticker_update_conn_op_cb+0x38>)
   397d0:	4807      	ldr	r0, [pc, #28]	; (397f0 <ticker_update_conn_op_cb+0x3c>)
   397d2:	f640 03a1 	movw	r3, #2209	; 0x8a1
   397d6:	f010 f997 	bl	49b08 <printk>
   397da:	4040      	eors	r0, r0
   397dc:	f380 8811 	msr	BASEPRI, r0
   397e0:	f04f 0003 	mov.w	r0, #3
   397e4:	df02      	svc	2
}
   397e6:	bd10      	pop	{r4, pc}
   397e8:	000530cc 	.word	0x000530cc
   397ec:	00053144 	.word	0x00053144
   397f0:	00052bbc 	.word	0x00052bbc

000397f4 <tx_ull_dequeue>:
{
   397f4:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   397f6:	e9d0 2475 	ldrd	r2, r4, [r0, #468]	; 0x1d4
{
   397fa:	4603      	mov	r3, r0
   397fc:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   397fe:	b164      	cbz	r4, 3981a <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   39800:	4294      	cmp	r4, r2
   39802:	d024      	beq.n	3984e <tx_ull_dequeue+0x5a>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   39804:	f8d3 11e0 	ldr.w	r1, [r3, #480]	; 0x1e0
		if (conn->tx_head == conn->tx_data) {
   39808:	428a      	cmp	r2, r1
   3980a:	d00b      	beq.n	39824 <tx_ull_dequeue+0x30>
		conn->tx_head = conn->tx_head->next;
   3980c:	6812      	ldr	r2, [r2, #0]
   3980e:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
   39812:	2300      	movs	r3, #0
}
   39814:	bc10      	pop	{r4}
		tx->next = tx;
   39816:	6003      	str	r3, [r0, #0]
}
   39818:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   3981a:	f8d3 11e0 	ldr.w	r1, [r3, #480]	; 0x1e0
   3981e:	4291      	cmp	r1, r2
   39820:	d104      	bne.n	3982c <tx_ull_dequeue+0x38>
	if (conn->tx_head == conn->tx_ctrl) {
   39822:	b1a2      	cbz	r2, 3984e <tx_ull_dequeue+0x5a>
			conn->tx_data = conn->tx_data->next;
   39824:	6809      	ldr	r1, [r1, #0]
   39826:	f8c3 11e0 	str.w	r1, [r3, #480]	; 0x1e0
   3982a:	e7ef      	b.n	3980c <tx_ull_dequeue+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3982c:	7911      	ldrb	r1, [r2, #4]
   3982e:	f001 0103 	and.w	r1, r1, #3
   39832:	2903      	cmp	r1, #3
   39834:	d013      	beq.n	3985e <tx_ull_dequeue+0x6a>
		conn->tx_head = conn->tx_head->next;
   39836:	6812      	ldr	r2, [r2, #0]
   39838:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
			conn->tx_ctrl_last = NULL;
   3983c:	2200      	movs	r2, #0
   3983e:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
   39842:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
		tx->next = tx;
   39846:	4603      	mov	r3, r0
}
   39848:	bc10      	pop	{r4}
		tx->next = tx;
   3984a:	6003      	str	r3, [r0, #0]
}
   3984c:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   3984e:	f8d3 11dc 	ldr.w	r1, [r3, #476]	; 0x1dc
		conn->tx_head = conn->tx_head->next;
   39852:	6812      	ldr	r2, [r2, #0]
   39854:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   39858:	42a1      	cmp	r1, r4
   3985a:	d1f2      	bne.n	39842 <tx_ull_dequeue+0x4e>
   3985c:	e7ee      	b.n	3983c <tx_ull_dequeue+0x48>
	    ((pdu_data_tx->llctrl.opcode !=
   3985e:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39860:	2903      	cmp	r1, #3
   39862:	d0d3      	beq.n	3980c <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   39864:	290a      	cmp	r1, #10
   39866:	d1e6      	bne.n	39836 <tx_ull_dequeue+0x42>
   39868:	e7d0      	b.n	3980c <tx_ull_dequeue+0x18>
   3986a:	bf00      	nop

0003986c <feature_rsp_send>:

#if defined(CONFIG_BT_PERIPHERAL) || \
	(defined(CONFIG_BT_CENTRAL) && defined(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG))
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			    struct pdu_data *pdu_rx)
{
   3986c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->common.txn_lock) {
   39870:	f890 70e4 	ldrb.w	r7, [r0, #228]	; 0xe4
   39874:	f017 0702 	ands.w	r7, r7, #2
{
   39878:	4688      	mov	r8, r1
	if (conn->common.txn_lock) {
   3987a:	d15d      	bne.n	39938 <feature_rsp_send+0xcc>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3987c:	4604      	mov	r4, r0
   3987e:	4833      	ldr	r0, [pc, #204]	; (3994c <feature_rsp_send+0xe0>)
   39880:	4691      	mov	r9, r2
   39882:	f7fa fb35 	bl	33ef0 <mem_acquire>
	if (!tx) {
   39886:	4605      	mov	r5, r0
   39888:	2800      	cmp	r0, #0
   3988a:	d05b      	beq.n	39944 <feature_rsp_send+0xd8>
	conn->common.txn_lock = 1U;
   3988c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
	feat &= LL_FEAT_BIT_MASK;
   39890:	492f      	ldr	r1, [pc, #188]	; (39950 <feature_rsp_send+0xe4>)
	conn->common.txn_lock = 1U;
   39892:	f043 0302 	orr.w	r3, r3, #2
   39896:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
   3989a:	f8d9 2004 	ldr.w	r2, [r9, #4]
   3989e:	f8d9 3008 	ldr.w	r3, [r9, #8]
	feat &= LL_FEAT_BIT_MASK;
   398a2:	4311      	orrs	r1, r2
		return err;
	}

	/* AND the feature set to get Feature USED */
	req = &pdu_rx->llctrl.feature_req;
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   398a4:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   398a8:	400a      	ands	r2, r1
   398aa:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
	feat &= LL_FEAT_BIT_MASK;
   398ae:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   398b2:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	feat &= LL_FEAT_BIT_MASK;
   398b6:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   398ba:	401a      	ands	r2, r3
   398bc:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
   398c0:	f8d9 6004 	ldr.w	r6, [r9, #4]
   398c4:	f8d9 9008 	ldr.w	r9, [r9, #8]
	return feat;
   398c8:	f009 09ff 	and.w	r9, r9, #255	; 0xff
	 * Get all the features of peer, except octet 0.
	 * Octet 0 is the actual features used on the link
	 * See BTCore V5.2, Vol. 6, Part B, chapter 5.1.4
	 */
	conn->llcp_feature.features_peer =
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   398cc:	f7fd fc2e 	bl	3712c <ll_feat_get>
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   398d0:	f049 0310 	orr.w	r3, r9, #16
	conn->llcp_feature.features_peer =
   398d4:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	feat &= LL_FEAT_BIT_MASK;
   398d8:	4b1d      	ldr	r3, [pc, #116]	; (39950 <feature_rsp_send+0xe4>)
   398da:	4333      	orrs	r3, r6
	feat_result = feat_to_keep & feat_octet0;
   398dc:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   398de:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   398e2:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
   398e6:	4303      	orrs	r3, r0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   398e8:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
   398ec:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   398f0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140

	/* features exchanged */
	conn->common.fex_valid = 1U;
   398f4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   398f8:	f043 0301 	orr.w	r3, r3, #1
   398fc:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	/* Enqueue feature response */
	pdu_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_tx);

	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   39900:	792b      	ldrb	r3, [r5, #4]
   39902:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   39906:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   39908:	712b      	strb	r3, [r5, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   3990a:	2309      	movs	r3, #9
   3990c:	716b      	strb	r3, [r5, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   3990e:	71eb      	strb	r3, [r5, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   39910:	4639      	mov	r1, r7
   39912:	18a8      	adds	r0, r5, r2
   39914:	f012 fa32 	bl	4bd7c <memset>
		     sizeof(pdu_tx->llctrl.feature_rsp.features));
	/*
	 * On feature response we send the local supported features.
	 * See BTCore V5.2 VOl 6 Part B, chapter 5.1.4
	 */
	feat = feat_land_octet0(ll_feat_get(),
   39918:	f7fd fc08 	bl	3712c <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   3991c:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
	dst[0] = val;
   39920:	7329      	strb	r1, [r5, #12]
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   39922:	f063 03ff 	orn	r3, r3, #255	; 0xff
   39926:	4003      	ands	r3, r0
   39928:	60ab      	str	r3, [r5, #8]
	dst[1] = val >> 8;
   3992a:	f8a5 700d 	strh.w	r7, [r5, #13]
   3992e:	73ef      	strb	r7, [r5, #15]
				conn->llcp_feature.features_conn);
	sys_put_le64(feat, pdu_tx->llctrl.feature_rsp.features);

	ctrl_tx_sec_enqueue(conn, tx);
   39930:	4629      	mov	r1, r5
   39932:	4620      	mov	r0, r4
   39934:	f7ff fe06 	bl	39544 <ctrl_tx_sec_enqueue>

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   39938:	2301      	movs	r3, #1
   3993a:	f888 3004 	strb.w	r3, [r8, #4]

	return 0;
   3993e:	2000      	movs	r0, #0
}
   39940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		*err = -ENOBUFS;
   39944:	f06f 0068 	mvn.w	r0, #104	; 0x68
   39948:	e7fa      	b.n	39940 <feature_rsp_send+0xd4>
   3994a:	bf00      	nop
   3994c:	200059a8 	.word	0x200059a8
   39950:	087830d0 	.word	0x087830d0

00039954 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   39954:	e92d 41e8 	stmdb	sp!, {r3, r5, r6, r7, r8, lr}
   39958:	4605      	mov	r5, r0
	if (conn->common.txn_lock) {
   3995a:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
{
   3995e:	460e      	mov	r6, r1
	if (conn->common.txn_lock) {
   39960:	0781      	lsls	r1, r0, #30
   39962:	d433      	bmi.n	399cc <reject_ext_ind_send+0x78>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   39964:	483b      	ldr	r0, [pc, #236]	; (39a54 <reject_ext_ind_send+0x100>)
   39966:	4690      	mov	r8, r2
   39968:	461f      	mov	r7, r3
   3996a:	f7fa fac1 	bl	33ef0 <mem_acquire>
	if (!tx) {
   3996e:	2800      	cmp	r0, #0
   39970:	d051      	beq.n	39a16 <reject_ext_ind_send+0xc2>
	conn->common.txn_lock = 1U;
   39972:	f895 30e4 	ldrb.w	r3, [r5, #228]	; 0xe4
   39976:	f043 0302 	orr.w	r3, r3, #2
   3997a:	f885 30e4 	strb.w	r3, [r5, #228]	; 0xe4
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   3997e:	2303      	movs	r3, #3
   39980:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   39982:	2311      	movs	r3, #17
	    conn->tx_head &&
   39984:	f8d5 21d4 	ldr.w	r2, [r5, #468]	; 0x1d4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   39988:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3998a:	7903      	ldrb	r3, [r0, #4]
		if (!conn->tx_ctrl) {
   3998c:	f8d5 11d8 	ldr.w	r1, [r5, #472]	; 0x1d8
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   39990:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   39994:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   39998:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3999a:	7103      	strb	r3, [r0, #4]
	if (
   3999c:	b1da      	cbz	r2, 399d6 <reject_ext_ind_send+0x82>
	    !conn->llcp_enc.pause_tx &&
   3999e:	f895 3176 	ldrb.w	r3, [r5, #374]	; 0x176
	    conn->tx_head &&
   399a2:	079f      	lsls	r7, r3, #30
   399a4:	d42d      	bmi.n	39a02 <reject_ext_ind_send+0xae>
	    !conn->llcp_phy.pause_tx &&
   399a6:	f895 31cf 	ldrb.w	r3, [r5, #463]	; 0x1cf
   399aa:	07db      	lsls	r3, r3, #31
   399ac:	d429      	bmi.n	39a02 <reject_ext_ind_send+0xae>
		if (conn->tx_head == conn->tx_data) {
   399ae:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
   399b2:	429a      	cmp	r2, r3
   399b4:	d032      	beq.n	39a1c <reject_ext_ind_send+0xc8>
		} else if (!conn->tx_ctrl) {
   399b6:	2900      	cmp	r1, #0
   399b8:	d03e      	beq.n	39a38 <reject_ext_ind_send+0xe4>
	tx->next = conn->tx_ctrl_last->next;
   399ba:	f8d5 21dc 	ldr.w	r2, [r5, #476]	; 0x1dc
   399be:	6813      	ldr	r3, [r2, #0]
   399c0:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   399c2:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   399c4:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   399c6:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
	if (!tx->next) {
   399ca:	b1bb      	cbz	r3, 399fc <reject_ext_ind_send+0xa8>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   399cc:	2301      	movs	r3, #1
   399ce:	7133      	strb	r3, [r6, #4]
		*err = 0U;
   399d0:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
   399d2:	e8bd 81e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, pc}
		if (!conn->tx_ctrl) {
   399d6:	b151      	cbz	r1, 399ee <reject_ext_ind_send+0x9a>
	tx->next = conn->tx_ctrl_last->next;
   399d8:	f8d5 31dc 	ldr.w	r3, [r5, #476]	; 0x1dc
   399dc:	681a      	ldr	r2, [r3, #0]
   399de:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   399e0:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   399e2:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   399e4:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
	if (!tx->next) {
   399e8:	2b00      	cmp	r3, #0
   399ea:	d1ef      	bne.n	399cc <reject_ext_ind_send+0x78>
   399ec:	e006      	b.n	399fc <reject_ext_ind_send+0xa8>
			tx->next = conn->tx_head;
   399ee:	6001      	str	r1, [r0, #0]
			conn->tx_head = tx;
   399f0:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
   399f4:	f8c5 01d8 	str.w	r0, [r5, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   399f8:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
		conn->tx_data_last = tx;
   399fc:	f8c5 01e4 	str.w	r0, [r5, #484]	; 0x1e4
   39a00:	e7e4      	b.n	399cc <reject_ext_ind_send+0x78>
		if (!conn->tx_ctrl) {
   39a02:	2900      	cmp	r1, #0
   39a04:	d1e8      	bne.n	399d8 <reject_ext_ind_send+0x84>
			tx->next = conn->tx_head;
   39a06:	6002      	str	r2, [r0, #0]
			conn->tx_head = tx;
   39a08:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
   39a0c:	f8c5 01d8 	str.w	r0, [r5, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   39a10:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
	if (!tx->next) {
   39a14:	e7da      	b.n	399cc <reject_ext_ind_send+0x78>
		*err = -ENOBUFS;
   39a16:	f06f 0068 	mvn.w	r0, #104	; 0x68
   39a1a:	e7da      	b.n	399d2 <reject_ext_ind_send+0x7e>
			conn->tx_data = conn->tx_data->next;
   39a1c:	6813      	ldr	r3, [r2, #0]
   39a1e:	f8c5 31e0 	str.w	r3, [r5, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   39a22:	2900      	cmp	r1, #0
   39a24:	d1c9      	bne.n	399ba <reject_ext_ind_send+0x66>
			tx->next = conn->tx_head->next;
   39a26:	6813      	ldr	r3, [r2, #0]
   39a28:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   39a2a:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   39a2c:	e9c5 0076 	strd	r0, r0, [r5, #472]	; 0x1d8
	if (!tx->next) {
   39a30:	6803      	ldr	r3, [r0, #0]
   39a32:	2b00      	cmp	r3, #0
   39a34:	d1ca      	bne.n	399cc <reject_ext_ind_send+0x78>
   39a36:	e7e1      	b.n	399fc <reject_ext_ind_send+0xa8>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39a38:	7913      	ldrb	r3, [r2, #4]
   39a3a:	f003 0303 	and.w	r3, r3, #3
   39a3e:	2b03      	cmp	r3, #3
   39a40:	d002      	beq.n	39a48 <reject_ext_ind_send+0xf4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   39a42:	f8c5 21d8 	str.w	r2, [r5, #472]	; 0x1d8
   39a46:	e7ba      	b.n	399be <reject_ext_ind_send+0x6a>
	    ((pdu_data_tx->llctrl.opcode !=
   39a48:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39a4a:	2b03      	cmp	r3, #3
   39a4c:	d0eb      	beq.n	39a26 <reject_ext_ind_send+0xd2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   39a4e:	2b0a      	cmp	r3, #10
   39a50:	d1f7      	bne.n	39a42 <reject_ext_ind_send+0xee>
   39a52:	e7e8      	b.n	39a26 <reject_ext_ind_send+0xd2>
   39a54:	200059a8 	.word	0x200059a8

00039a58 <event_len_prep>:
{
   39a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   39a5a:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
   39a5e:	f003 0207 	and.w	r2, r3, #7
{
   39a62:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
   39a64:	2a06      	cmp	r2, #6
   39a66:	f200 80e0 	bhi.w	39c2a <event_len_prep+0x1d2>
   39a6a:	e8df f002 	tbb	[pc, r2]
   39a6e:	4504      	.short	0x4504
   39a70:	46464545 	.word	0x46464545
   39a74:	45          	.byte	0x45
   39a75:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   39a76:	4874      	ldr	r0, [pc, #464]	; (39c48 <event_len_prep+0x1f0>)
   39a78:	f7fa fa3a 	bl	33ef0 <mem_acquire>
		if (!tx) {
   39a7c:	2800      	cmp	r0, #0
   39a7e:	d03b      	beq.n	39af8 <event_len_prep+0xa0>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   39a80:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   39a84:	f8b4 21c2 	ldrh.w	r2, [r4, #450]	; 0x1c2
		conn->default_tx_time = conn->llcp_length.tx_time;
   39a88:	f8b4 51c6 	ldrh.w	r5, [r4, #454]	; 0x1c6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   39a8c:	f8a4 20d2 	strh.w	r2, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   39a90:	2301      	movs	r3, #1
   39a92:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   39a96:	f8a4 50d4 	strh.w	r5, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   39a9a:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   39a9e:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   39aa0:	2309      	movs	r3, #9
   39aa2:	7143      	strb	r3, [r0, #5]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   39aa4:	4969      	ldr	r1, [pc, #420]	; (39c4c <event_len_prep+0x1f4>)
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   39aa6:	8182      	strh	r2, [r0, #12]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   39aa8:	2314      	movs	r3, #20
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   39aaa:	2248      	movs	r2, #72	; 0x48
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   39aac:	6081      	str	r1, [r0, #8]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   39aae:	7382      	strb	r2, [r0, #14]
		if (!conn->tx_ctrl) {
   39ab0:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
	    conn->tx_head &&
   39ab4:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   39ab8:	71c3      	strb	r3, [r0, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   39aba:	7903      	ldrb	r3, [r0, #4]
   39abc:	f043 0303 	orr.w	r3, r3, #3
   39ac0:	7103      	strb	r3, [r0, #4]
	if (
   39ac2:	2a00      	cmp	r2, #0
   39ac4:	d06b      	beq.n	39b9e <event_len_prep+0x146>
	    !conn->llcp_enc.pause_tx &&
   39ac6:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
	    conn->tx_head &&
   39aca:	079d      	lsls	r5, r3, #30
   39acc:	d403      	bmi.n	39ad6 <event_len_prep+0x7e>
	    !conn->llcp_phy.pause_tx &&
   39ace:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   39ad2:	07db      	lsls	r3, r3, #31
   39ad4:	d57b      	bpl.n	39bce <event_len_prep+0x176>
		if (!conn->tx_ctrl) {
   39ad6:	2900      	cmp	r1, #0
   39ad8:	f000 8087 	beq.w	39bea <event_len_prep+0x192>
	tx->next = conn->tx_ctrl_last->next;
   39adc:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   39ae0:	681a      	ldr	r2, [r3, #0]
   39ae2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   39ae4:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   39ae6:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   39ae8:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   39aec:	2b00      	cmp	r3, #0
   39aee:	d05d      	beq.n	39bac <event_len_prep+0x154>
		conn->procedure_expire = conn->procedure_reload;
   39af0:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   39af4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
   39af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   39afa:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   39afe:	f8b0 c1c0 	ldrh.w	ip, [r0, #448]	; 0x1c0
		lll->max_rx_time = conn->llcp_length.rx_time;
   39b02:	f8b0 11c4 	ldrh.w	r1, [r0, #452]	; 0x1c4
		tx_octets = conn->llcp_length.tx_octets;
   39b06:	f8b0 71c2 	ldrh.w	r7, [r0, #450]	; 0x1c2
		uint16_t tx_time = conn->llcp_length.tx_time;
   39b0a:	f8b0 61c6 	ldrh.w	r6, [r0, #454]	; 0x1c6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   39b0e:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   39b12:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   39b14:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   39b18:	d024      	beq.n	39b64 <event_len_prep+0x10c>
			conn->llcp_length.state =
   39b1a:	2206      	movs	r2, #6
   39b1c:	f362 0302 	bfi	r3, r2, #0, #3
   39b20:	f880 31be 	strb.w	r3, [r0, #446]	; 0x1be
		rx = conn->llcp_rx;
   39b24:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
		LL_ASSERT(rx && rx->hdr.link);
   39b28:	b335      	cbz	r5, 39b78 <event_len_prep+0x120>
   39b2a:	6828      	ldr	r0, [r5, #0]
   39b2c:	b320      	cbz	r0, 39b78 <event_len_prep+0x120>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   39b2e:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   39b30:	6842      	ldr	r2, [r0, #4]
   39b32:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   39b36:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   39b3a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   39b3c:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   39b3e:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   39b40:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   39b42:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   39b44:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   39b46:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   39b48:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   39b4a:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   39b4e:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   39b50:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   39b52:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   39b54:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   39b56:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   39b58:	f7fe f844 	bl	37be4 <ll_rx_put>
}
   39b5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   39b60:	f7fe b84a 	b.w	37bf8 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   39b64:	f8b0 21c8 	ldrh.w	r2, [r0, #456]	; 0x1c8
   39b68:	bb1a      	cbnz	r2, 39bb2 <event_len_prep+0x15a>
				conn->llcp_length.ack = conn->llcp_length.req;
   39b6a:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
				conn->procedure_expire = 0U;
   39b6e:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
				conn->llcp_length.ack = conn->llcp_length.req;
   39b72:	f880 31bd 	strb.w	r3, [r0, #445]	; 0x1bd
				conn->procedure_expire = 0U;
   39b76:	e7d5      	b.n	39b24 <event_len_prep+0xcc>
		LL_ASSERT(rx && rx->hdr.link);
   39b78:	4a35      	ldr	r2, [pc, #212]	; (39c50 <event_len_prep+0x1f8>)
   39b7a:	4936      	ldr	r1, [pc, #216]	; (39c54 <event_len_prep+0x1fc>)
   39b7c:	4836      	ldr	r0, [pc, #216]	; (39c58 <event_len_prep+0x200>)
   39b7e:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
   39b82:	f00f ffc1 	bl	49b08 <printk>
   39b86:	4040      	eors	r0, r0
   39b88:	f380 8811 	msr	BASEPRI, r0
   39b8c:	f04f 0003 	mov.w	r0, #3
   39b90:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   39b92:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   39b94:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   39b98:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   39b9c:	e7c7      	b.n	39b2e <event_len_prep+0xd6>
		if (!conn->tx_ctrl) {
   39b9e:	2900      	cmp	r1, #0
   39ba0:	d19c      	bne.n	39adc <event_len_prep+0x84>
			tx->next = conn->tx_head;
   39ba2:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
   39ba4:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   39ba8:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
		conn->tx_data_last = tx;
   39bac:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   39bb0:	e79e      	b.n	39af0 <event_len_prep+0x98>
				conn->llcp_length.tx_octets =
   39bb2:	f8a0 21c2 	strh.w	r2, [r0, #450]	; 0x1c2
				conn->llcp_length.cache.tx_octets = 0;
   39bb6:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   39bb8:	f362 0302 	bfi	r3, r2, #0, #3
   39bbc:	f880 31be 	strb.w	r3, [r0, #446]	; 0x1be
				conn->llcp_length.tx_time =
   39bc0:	f8b0 31ca 	ldrh.w	r3, [r0, #458]	; 0x1ca
				conn->llcp_length.cache.tx_octets = 0;
   39bc4:	f8a0 21c8 	strh.w	r2, [r0, #456]	; 0x1c8
				conn->llcp_length.tx_time =
   39bc8:	f8a0 31c6 	strh.w	r3, [r0, #454]	; 0x1c6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   39bcc:	e7aa      	b.n	39b24 <event_len_prep+0xcc>
		if (conn->tx_head == conn->tx_data) {
   39bce:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
   39bd2:	429a      	cmp	r2, r3
   39bd4:	d00f      	beq.n	39bf6 <event_len_prep+0x19e>
		} else if (!conn->tx_ctrl) {
   39bd6:	b1d1      	cbz	r1, 39c0e <event_len_prep+0x1b6>
	tx->next = conn->tx_ctrl_last->next;
   39bd8:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   39bdc:	6813      	ldr	r3, [r2, #0]
   39bde:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   39be0:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   39be2:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   39be4:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
}
   39be8:	e780      	b.n	39aec <event_len_prep+0x94>
			tx->next = conn->tx_head;
   39bea:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   39bec:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   39bf0:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   39bf4:	e77c      	b.n	39af0 <event_len_prep+0x98>
			conn->tx_data = conn->tx_data->next;
   39bf6:	6813      	ldr	r3, [r2, #0]
   39bf8:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   39bfc:	2900      	cmp	r1, #0
   39bfe:	d1eb      	bne.n	39bd8 <event_len_prep+0x180>
			tx->next = conn->tx_head->next;
   39c00:	6813      	ldr	r3, [r2, #0]
   39c02:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   39c04:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   39c06:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   39c08:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
   39c0c:	e76e      	b.n	39aec <event_len_prep+0x94>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39c0e:	7913      	ldrb	r3, [r2, #4]
   39c10:	f003 0303 	and.w	r3, r3, #3
   39c14:	2b03      	cmp	r3, #3
   39c16:	d002      	beq.n	39c1e <event_len_prep+0x1c6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   39c18:	f8c4 21d8 	str.w	r2, [r4, #472]	; 0x1d8
   39c1c:	e7de      	b.n	39bdc <event_len_prep+0x184>
	    ((pdu_data_tx->llctrl.opcode !=
   39c1e:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39c20:	2b03      	cmp	r3, #3
   39c22:	d0ed      	beq.n	39c00 <event_len_prep+0x1a8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   39c24:	2b0a      	cmp	r3, #10
   39c26:	d1f7      	bne.n	39c18 <event_len_prep+0x1c0>
   39c28:	e7ea      	b.n	39c00 <event_len_prep+0x1a8>
		LL_ASSERT(0);
   39c2a:	4a09      	ldr	r2, [pc, #36]	; (39c50 <event_len_prep+0x1f8>)
   39c2c:	490b      	ldr	r1, [pc, #44]	; (39c5c <event_len_prep+0x204>)
   39c2e:	480a      	ldr	r0, [pc, #40]	; (39c58 <event_len_prep+0x200>)
   39c30:	f241 03ea 	movw	r3, #4330	; 0x10ea
   39c34:	f00f ff68 	bl	49b08 <printk>
   39c38:	4040      	eors	r0, r0
   39c3a:	f380 8811 	msr	BASEPRI, r0
   39c3e:	f04f 0003 	mov.w	r0, #3
   39c42:	df02      	svc	2
}
   39c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   39c46:	bf00      	nop
   39c48:	200059a8 	.word	0x200059a8
   39c4c:	0148001b 	.word	0x0148001b
   39c50:	000530cc 	.word	0x000530cc
   39c54:	00053198 	.word	0x00053198
   39c58:	00052bbc 	.word	0x00052bbc
   39c5c:	00052c1c 	.word	0x00052c1c

00039c60 <event_phy_upd_ind_prep>:
{
   39c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   39c64:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
   39c68:	f013 0601 	ands.w	r6, r3, #1
{
   39c6c:	4604      	mov	r4, r0
   39c6e:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   39c70:	f040 8098 	bne.w	39da4 <event_phy_upd_ind_prep+0x144>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   39c74:	f8b0 10f6 	ldrh.w	r1, [r0, #246]	; 0xf6
   39c78:	1a69      	subs	r1, r5, r1
   39c7a:	0409      	lsls	r1, r1, #16
   39c7c:	f100 8099 	bmi.w	39db2 <event_phy_upd_ind_prep+0x152>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   39c80:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   39c84:	2900      	cmp	r1, #0
   39c86:	f2c0 8134 	blt.w	39ef2 <event_phy_upd_ind_prep+0x292>
		rx = conn->llcp_rx;
   39c8a:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
   39c8e:	461a      	mov	r2, r3
			conn->llcp_ack = conn->llcp_req;
   39c90:	f894 10f0 	ldrb.w	r1, [r4, #240]	; 0xf0
   39c94:	f884 10f1 	strb.w	r1, [r4, #241]	; 0xf1
		old_tx = lll->phy_tx;
   39c98:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   39c9c:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_tx_time = lll->max_tx_time;
   39ca0:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		uint16_t eff_rx_time = lll->max_rx_time;
   39ca4:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   39ca8:	f013 0f1c 	tst.w	r3, #28
		old_rx = lll->phy_rx;
   39cac:	f008 0807 	and.w	r8, r8, #7
		old_tx = lll->phy_tx;
   39cb0:	f001 0907 	and.w	r9, r1, #7
		if (conn->llcp.phy_upd_ind.tx) {
   39cb4:	d007      	beq.n	39cc6 <event_phy_upd_ind_prep+0x66>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   39cb6:	f3c3 0082 	ubfx	r0, r3, #2, #3
   39cba:	f360 0102 	bfi	r1, r0, #0, #3
   39cbe:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   39cc2:	f44f 76a4 	mov.w	r6, #328	; 0x148
		if (conn->llcp.phy_upd_ind.rx) {
   39cc6:	2b1f      	cmp	r3, #31
   39cc8:	d875      	bhi.n	39db6 <event_phy_upd_ind_prep+0x156>
		LL_ASSERT(rx && rx->hdr.link);
   39cca:	2d00      	cmp	r5, #0
   39ccc:	f000 80f1 	beq.w	39eb2 <event_phy_upd_ind_prep+0x252>
   39cd0:	6828      	ldr	r0, [r5, #0]
   39cd2:	2800      	cmp	r0, #0
   39cd4:	f000 80ed 	beq.w	39eb2 <event_phy_upd_ind_prep+0x252>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   39cd8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		    (lll->phy_rx == old_rx)) {
   39cdc:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
		conn->llcp_rx = rx->hdr.link->mem;
   39ce0:	f8d0 c004 	ldr.w	ip, [r0, #4]
   39ce4:	f8c4 c114 	str.w	ip, [r4, #276]	; 0x114
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   39ce8:	0792      	lsls	r2, r2, #30
   39cea:	f3c3 0c02 	ubfx	ip, r3, #0, #3
		    (lll->phy_rx == old_rx)) {
   39cee:	f3c1 0e02 	ubfx	lr, r1, #0, #3
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   39cf2:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
   39cf6:	f001 0107 	and.w	r1, r1, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   39cfa:	d402      	bmi.n	39d02 <event_phy_upd_ind_prep+0xa2>
   39cfc:	4599      	cmp	r9, r3
   39cfe:	f000 80bb 	beq.w	39e78 <event_phy_upd_ind_prep+0x218>
		rx->hdr.handle = lll->handle;
   39d02:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   39d04:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   39d06:	231c      	movs	r3, #28
   39d08:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   39d0a:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
   39d0c:	f885 c01d 	strb.w	ip, [r5, #29]
		upd->rx = lll->phy_rx;
   39d10:	f885 e01e 	strb.w	lr, [r5, #30]
		upd->status = 0U;
   39d14:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   39d16:	4629      	mov	r1, r5
   39d18:	f7fd ff64 	bl	37be4 <ll_rx_put>
		rx = conn->llcp_rx;
   39d1c:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
		LL_ASSERT(rx && rx->hdr.link);
   39d20:	2d00      	cmp	r5, #0
   39d22:	f000 80d7 	beq.w	39ed4 <event_phy_upd_ind_prep+0x274>
   39d26:	6828      	ldr	r0, [r5, #0]
   39d28:	2800      	cmp	r0, #0
   39d2a:	f000 80d3 	beq.w	39ed4 <event_phy_upd_ind_prep+0x274>
		if ((eff_tx_time <= lll->max_tx_time) &&
   39d2e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   39d32:	6842      	ldr	r2, [r0, #4]
   39d34:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
		if ((eff_tx_time <= lll->max_tx_time) &&
   39d38:	42b3      	cmp	r3, r6
   39d3a:	d30a      	bcc.n	39d52 <event_phy_upd_ind_prep+0xf2>
   39d3c:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   39d40:	d807      	bhi.n	39d52 <event_phy_upd_ind_prep+0xf2>
		    (eff_rx_time <= lll->max_rx_time) &&
   39d42:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   39d46:	42bb      	cmp	r3, r7
   39d48:	d303      	bcc.n	39d52 <event_phy_upd_ind_prep+0xf2>
		    (eff_rx_time <= lll->max_rx_time) &&
   39d4a:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   39d4e:	f240 810a 	bls.w	39f66 <event_phy_upd_ind_prep+0x306>
		lll->max_tx_time = eff_tx_time;
   39d52:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   39d56:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   39d5a:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   39d5c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   39d5e:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   39d60:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   39d64:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   39d68:	2109      	movs	r1, #9
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   39d6a:	772b      	strb	r3, [r5, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   39d6c:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   39d70:	7769      	strb	r1, [r5, #29]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   39d72:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
   39d76:	f8b4 4058 	ldrh.w	r4, [r4, #88]	; 0x58
   39d7a:	2300      	movs	r3, #0
   39d7c:	461a      	mov	r2, r3
   39d7e:	f361 030f 	bfi	r3, r1, #0, #16
   39d82:	f367 431f 	bfi	r3, r7, #16, #16
   39d86:	f364 020f 	bfi	r2, r4, #0, #16
   39d8a:	f366 421f 	bfi	r2, r6, #16, #16
   39d8e:	622b      	str	r3, [r5, #32]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   39d90:	2315      	movs	r3, #21
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   39d92:	626a      	str	r2, [r5, #36]	; 0x24
		ll_rx_put(rx->hdr.link, rx);
   39d94:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   39d96:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   39d98:	f7fd ff24 	bl	37be4 <ll_rx_put>
}
   39d9c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   39da0:	f7fd bf2a 	b.w	37bf8 <ll_rx_sched>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
   39da4:	e9d0 0119 	ldrd	r0, r1, [r0, #100]	; 0x64
   39da8:	2200      	movs	r2, #0
   39daa:	f7fa f90f 	bl	33fcc <memq_peek>
   39dae:	4606      	mov	r6, r0
   39db0:	b158      	cbz	r0, 39dca <event_phy_upd_ind_prep+0x16a>
}
   39db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   39db6:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
   39dba:	095b      	lsrs	r3, r3, #5
   39dbc:	f363 0102 	bfi	r1, r3, #0, #3
   39dc0:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   39dc4:	f44f 77a4 	mov.w	r7, #328	; 0x148
   39dc8:	e77f      	b.n	39cca <event_phy_upd_ind_prep+0x6a>
		rx = ll_pdu_rx_alloc_peek(2);
   39dca:	2002      	movs	r0, #2
   39dcc:	f7fd ff1a 	bl	37c04 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   39dd0:	4680      	mov	r8, r0
   39dd2:	2800      	cmp	r0, #0
   39dd4:	d0ed      	beq.n	39db2 <event_phy_upd_ind_prep+0x152>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   39dd6:	489b      	ldr	r0, [pc, #620]	; (3a044 <event_phy_upd_ind_prep+0x3e4>)
   39dd8:	f7fa f88a 	bl	33ef0 <mem_acquire>
		if (!tx) {
   39ddc:	4607      	mov	r7, r0
   39dde:	2800      	cmp	r0, #0
   39de0:	d0e7      	beq.n	39db2 <event_phy_upd_ind_prep+0x152>
		conn->llcp.phy_upd_ind.initiate = 0U;
   39de2:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   39de6:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   39dea:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   39dee:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
   39df2:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   39df6:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
		if (!((conn->llcp.phy_upd_ind.tx |
   39dfa:	b2db      	uxtb	r3, r3
   39dfc:	f040 8095 	bne.w	39f2a <event_phy_upd_ind_prep+0x2ca>
			conn->llcp_ack = conn->llcp_req;
   39e00:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
			conn->llcp.phy_upd_ind.instant = 0U;
   39e04:	f8a4 60f6 	strh.w	r6, [r4, #246]	; 0xf6
			if (conn->llcp.phy_upd_ind.cmd) {
   39e08:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   39e0a:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			if (conn->llcp.phy_upd_ind.cmd) {
   39e0e:	f100 80c9 	bmi.w	39fa4 <event_phy_upd_ind_prep+0x344>
   39e12:	4633      	mov	r3, r6
   39e14:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   39e16:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
   39e18:	2305      	movs	r3, #5
   39e1a:	717b      	strb	r3, [r7, #5]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   39e1c:	723e      	strb	r6, [r7, #8]
		pdu_ctrl_tx->llctrl.opcode =
   39e1e:	2318      	movs	r3, #24
		if (!conn->tx_ctrl) {
   39e20:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   39e24:	817a      	strh	r2, [r7, #10]
	    conn->tx_head &&
   39e26:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
		pdu_ctrl_tx->llctrl.opcode =
   39e2a:	71fb      	strb	r3, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   39e2c:	793b      	ldrb	r3, [r7, #4]
   39e2e:	f043 0303 	orr.w	r3, r3, #3
   39e32:	713b      	strb	r3, [r7, #4]
	if (
   39e34:	2a00      	cmp	r2, #0
   39e36:	f000 80aa 	beq.w	39f8e <event_phy_upd_ind_prep+0x32e>
	    !conn->llcp_enc.pause_tx &&
   39e3a:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
	    conn->tx_head &&
   39e3e:	079d      	lsls	r5, r3, #30
   39e40:	f100 809a 	bmi.w	39f78 <event_phy_upd_ind_prep+0x318>
	    !conn->llcp_phy.pause_tx &&
   39e44:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   39e48:	07d8      	lsls	r0, r3, #31
   39e4a:	f100 8095 	bmi.w	39f78 <event_phy_upd_ind_prep+0x318>
		if (conn->tx_head == conn->tx_data) {
   39e4e:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
   39e52:	429a      	cmp	r2, r3
   39e54:	f000 80da 	beq.w	3a00c <event_phy_upd_ind_prep+0x3ac>
		} else if (!conn->tx_ctrl) {
   39e58:	2900      	cmp	r1, #0
   39e5a:	f000 80e4 	beq.w	3a026 <event_phy_upd_ind_prep+0x3c6>
	tx->next = conn->tx_ctrl_last->next;
   39e5e:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   39e62:	681a      	ldr	r2, [r3, #0]
   39e64:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   39e66:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   39e68:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   39e6a:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
	if (!tx->next) {
   39e6e:	2b00      	cmp	r3, #0
   39e70:	d19f      	bne.n	39db2 <event_phy_upd_ind_prep+0x152>
		conn->tx_data_last = tx;
   39e72:	f8c4 71e4 	str.w	r7, [r4, #484]	; 0x1e4
   39e76:	e79c      	b.n	39db2 <event_phy_upd_ind_prep+0x152>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   39e78:	4588      	cmp	r8, r1
   39e7a:	f47f af42 	bne.w	39d02 <event_phy_upd_ind_prep+0xa2>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   39e7e:	2301      	movs	r3, #1
   39e80:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   39e82:	4629      	mov	r1, r5
   39e84:	f7fd feae 	bl	37be4 <ll_rx_put>
				rx = conn->llcp_rx;
   39e88:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
				LL_ASSERT(rx && rx->hdr.link);
   39e8c:	2d00      	cmp	r5, #0
   39e8e:	f000 80ae 	beq.w	39fee <event_phy_upd_ind_prep+0x38e>
   39e92:	6828      	ldr	r0, [r5, #0]
   39e94:	2800      	cmp	r0, #0
   39e96:	f000 80aa 	beq.w	39fee <event_phy_upd_ind_prep+0x38e>
				conn->llcp_rx = rx->hdr.link->mem;
   39e9a:	6842      	ldr	r2, [r0, #4]
   39e9c:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   39ea0:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
   39ea2:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   39ea4:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
   39ea6:	f7fd fe9d 	bl	37be4 <ll_rx_put>
}
   39eaa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   39eae:	f7fd bea3 	b.w	37bf8 <ll_rx_sched>
		LL_ASSERT(rx && rx->hdr.link);
   39eb2:	4a65      	ldr	r2, [pc, #404]	; (3a048 <event_phy_upd_ind_prep+0x3e8>)
   39eb4:	4965      	ldr	r1, [pc, #404]	; (3a04c <event_phy_upd_ind_prep+0x3ec>)
   39eb6:	4866      	ldr	r0, [pc, #408]	; (3a050 <event_phy_upd_ind_prep+0x3f0>)
   39eb8:	f241 231a 	movw	r3, #4634	; 0x121a
   39ebc:	f00f fe24 	bl	49b08 <printk>
   39ec0:	4040      	eors	r0, r0
   39ec2:	f380 8811 	msr	BASEPRI, r0
   39ec6:	f04f 0003 	mov.w	r0, #3
   39eca:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   39ecc:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   39ece:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   39ed2:	e701      	b.n	39cd8 <event_phy_upd_ind_prep+0x78>
		LL_ASSERT(rx && rx->hdr.link);
   39ed4:	4a5c      	ldr	r2, [pc, #368]	; (3a048 <event_phy_upd_ind_prep+0x3e8>)
   39ed6:	495d      	ldr	r1, [pc, #372]	; (3a04c <event_phy_upd_ind_prep+0x3ec>)
   39ed8:	485d      	ldr	r0, [pc, #372]	; (3a050 <event_phy_upd_ind_prep+0x3f0>)
   39eda:	f241 2349 	movw	r3, #4681	; 0x1249
   39ede:	f00f fe13 	bl	49b08 <printk>
   39ee2:	4040      	eors	r0, r0
   39ee4:	f380 8811 	msr	BASEPRI, r0
   39ee8:	f04f 0003 	mov.w	r0, #3
   39eec:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   39eee:	6828      	ldr	r0, [r5, #0]
   39ef0:	e71d      	b.n	39d2e <event_phy_upd_ind_prep+0xce>
			rx = ll_pdu_rx_alloc();
   39ef2:	f7fd fea7 	bl	37c44 <ll_pdu_rx_alloc>
			if (!rx) {
   39ef6:	4605      	mov	r5, r0
   39ef8:	2800      	cmp	r0, #0
   39efa:	f43f af5a 	beq.w	39db2 <event_phy_upd_ind_prep+0x152>
			rx->hdr.link->mem = conn->llcp_rx;
   39efe:	6803      	ldr	r3, [r0, #0]
   39f00:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   39f04:	605a      	str	r2, [r3, #4]
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   39f06:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
			conn->llcp_rx = rx;
   39f0a:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   39f0e:	2b00      	cmp	r3, #0
		if (conn->llcp.phy_upd_ind.tx) {
   39f10:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   39f14:	461a      	mov	r2, r3
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   39f16:	f6bf aebb 	bge.w	39c90 <event_phy_upd_ind_prep+0x30>
   39f1a:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   39f1e:	2900      	cmp	r1, #0
   39f20:	f43f aeb6 	beq.w	39c90 <event_phy_upd_ind_prep+0x30>
			conn->periph.llcp_type = LLCP_NONE;
   39f24:	f884 60e5 	strb.w	r6, [r4, #229]	; 0xe5
   39f28:	e6b6      	b.n	39c98 <event_phy_upd_ind_prep+0x38>
							 lll->latency +
   39f2a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   39f2c:	1da9      	adds	r1, r5, #6
   39f2e:	4419      	add	r1, r3
			conn->llcp.phy_upd_ind.instant = event_counter +
   39f30:	f8a4 10f6 	strh.w	r1, [r4, #246]	; 0xf6
			(void)ll_pdu_rx_alloc();
   39f34:	f7fd fe86 	bl	37c44 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   39f38:	f8d8 3000 	ldr.w	r3, [r8]
   39f3c:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   39f40:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   39f42:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
				rx = ll_pdu_rx_alloc();
   39f46:	f7fd fe7d 	bl	37c44 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
   39f4a:	6803      	ldr	r3, [r0, #0]
   39f4c:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   39f50:	605a      	str	r2, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   39f52:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   39f56:	f8b4 20f6 	ldrh.w	r2, [r4, #246]	; 0xf6
				conn->llcp_rx = rx;
   39f5a:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   39f5e:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   39f62:	095b      	lsrs	r3, r3, #5
   39f64:	e757      	b.n	39e16 <event_phy_upd_ind_prep+0x1b6>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   39f66:	2301      	movs	r3, #1
   39f68:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   39f6a:	4629      	mov	r1, r5
   39f6c:	f7fd fe3a 	bl	37be4 <ll_rx_put>
}
   39f70:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   39f74:	f7fd be40 	b.w	37bf8 <ll_rx_sched>
		if (!conn->tx_ctrl) {
   39f78:	2900      	cmp	r1, #0
   39f7a:	f47f af70 	bne.w	39e5e <event_phy_upd_ind_prep+0x1fe>
			tx->next = conn->tx_head;
   39f7e:	603a      	str	r2, [r7, #0]
			conn->tx_head = tx;
   39f80:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   39f84:	f8c4 71d8 	str.w	r7, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   39f88:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
	if (!tx->next) {
   39f8c:	e711      	b.n	39db2 <event_phy_upd_ind_prep+0x152>
		if (!conn->tx_ctrl) {
   39f8e:	2900      	cmp	r1, #0
   39f90:	f47f af65 	bne.w	39e5e <event_phy_upd_ind_prep+0x1fe>
			tx->next = conn->tx_head;
   39f94:	6039      	str	r1, [r7, #0]
			conn->tx_head = tx;
   39f96:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   39f9a:	f8c4 71d8 	str.w	r7, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   39f9e:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
	if (!tx->next) {
   39fa2:	e766      	b.n	39e72 <event_phy_upd_ind_prep+0x212>
				(void)ll_pdu_rx_alloc();
   39fa4:	f7fd fe4e 	bl	37c44 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   39fa8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   39faa:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   39fae:	231c      	movs	r3, #28
				upd->status = 0U;
   39fb0:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   39fb4:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
   39fb8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
   39fbc:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   39fc0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   39fc4:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   39fc8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   39fcc:	f3c3 0302 	ubfx	r3, r3, #0, #3
   39fd0:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   39fd4:	4641      	mov	r1, r8
   39fd6:	f7fd fe05 	bl	37be4 <ll_rx_put>
				ll_rx_sched();
   39fda:	f7fd fe0d 	bl	37bf8 <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   39fde:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   39fe2:	f8b4 20f6 	ldrh.w	r2, [r4, #246]	; 0xf6
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   39fe6:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   39fea:	095b      	lsrs	r3, r3, #5
   39fec:	e713      	b.n	39e16 <event_phy_upd_ind_prep+0x1b6>
				LL_ASSERT(rx && rx->hdr.link);
   39fee:	4a16      	ldr	r2, [pc, #88]	; (3a048 <event_phy_upd_ind_prep+0x3e8>)
   39ff0:	4916      	ldr	r1, [pc, #88]	; (3a04c <event_phy_upd_ind_prep+0x3ec>)
   39ff2:	4817      	ldr	r0, [pc, #92]	; (3a050 <event_phy_upd_ind_prep+0x3f0>)
   39ff4:	f241 232c 	movw	r3, #4652	; 0x122c
   39ff8:	f00f fd86 	bl	49b08 <printk>
   39ffc:	4040      	eors	r0, r0
   39ffe:	f380 8811 	msr	BASEPRI, r0
   3a002:	f04f 0003 	mov.w	r0, #3
   3a006:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   3a008:	6828      	ldr	r0, [r5, #0]
   3a00a:	e746      	b.n	39e9a <event_phy_upd_ind_prep+0x23a>
			conn->tx_data = conn->tx_data->next;
   3a00c:	6813      	ldr	r3, [r2, #0]
   3a00e:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3a012:	2900      	cmp	r1, #0
   3a014:	f47f af23 	bne.w	39e5e <event_phy_upd_ind_prep+0x1fe>
			tx->next = conn->tx_head->next;
   3a018:	6813      	ldr	r3, [r2, #0]
   3a01a:	603b      	str	r3, [r7, #0]
			conn->tx_head->next = tx;
   3a01c:	6017      	str	r7, [r2, #0]
				conn->tx_ctrl = tx;
   3a01e:	e9c4 7776 	strd	r7, r7, [r4, #472]	; 0x1d8
	if (!tx->next) {
   3a022:	683b      	ldr	r3, [r7, #0]
   3a024:	e723      	b.n	39e6e <event_phy_upd_ind_prep+0x20e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3a026:	7913      	ldrb	r3, [r2, #4]
   3a028:	f003 0303 	and.w	r3, r3, #3
   3a02c:	2b03      	cmp	r3, #3
   3a02e:	d002      	beq.n	3a036 <event_phy_upd_ind_prep+0x3d6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3a030:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   3a034:	e713      	b.n	39e5e <event_phy_upd_ind_prep+0x1fe>
	    ((pdu_data_tx->llctrl.opcode !=
   3a036:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3a038:	2b03      	cmp	r3, #3
   3a03a:	d0ed      	beq.n	3a018 <event_phy_upd_ind_prep+0x3b8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3a03c:	2b0a      	cmp	r3, #10
   3a03e:	d1f7      	bne.n	3a030 <event_phy_upd_ind_prep+0x3d0>
   3a040:	e7ea      	b.n	3a018 <event_phy_upd_ind_prep+0x3b8>
   3a042:	bf00      	nop
   3a044:	200059a8 	.word	0x200059a8
   3a048:	000530cc 	.word	0x000530cc
   3a04c:	00053198 	.word	0x00053198
   3a050:	00052bbc 	.word	0x00052bbc

0003a054 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   3a054:	4801      	ldr	r0, [pc, #4]	; (3a05c <ll_conn_acquire+0x8>)
   3a056:	f7f9 bf4b 	b.w	33ef0 <mem_acquire>
   3a05a:	bf00      	nop
   3a05c:	200058c8 	.word	0x200058c8

0003a060 <ll_conn_release>:
	mem_release(conn, &conn_free);
   3a060:	4901      	ldr	r1, [pc, #4]	; (3a068 <ll_conn_release+0x8>)
   3a062:	f7f9 bf5f 	b.w	33f24 <mem_release>
   3a066:	bf00      	nop
   3a068:	200058c8 	.word	0x200058c8

0003a06c <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   3a06c:	4902      	ldr	r1, [pc, #8]	; (3a078 <ll_conn_handle_get+0xc>)
   3a06e:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   3a072:	f7f9 bf73 	b.w	33f5c <mem_index_get>
   3a076:	bf00      	nop
   3a078:	20003368 	.word	0x20003368

0003a07c <ll_conn_get>:
{
   3a07c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a07e:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a082:	4801      	ldr	r0, [pc, #4]	; (3a088 <ll_conn_get+0xc>)
   3a084:	f7f9 bf66 	b.w	33f54 <mem_get>
   3a088:	20003368 	.word	0x20003368

0003a08c <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a08c:	2805      	cmp	r0, #5
   3a08e:	d80d      	bhi.n	3a0ac <ll_connected_get+0x20>
{
   3a090:	b510      	push	{r4, lr}
   3a092:	4604      	mov	r4, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a094:	4622      	mov	r2, r4
   3a096:	4806      	ldr	r0, [pc, #24]	; (3a0b0 <ll_connected_get+0x24>)
   3a098:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a09c:	f7f9 ff5a 	bl	33f54 <mem_get>
	if (conn->lll.handle != handle) {
   3a0a0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a0a2:	42a3      	cmp	r3, r4
   3a0a4:	d100      	bne.n	3a0a8 <ll_connected_get+0x1c>
}
   3a0a6:	bd10      	pop	{r4, pc}
		return NULL;
   3a0a8:	2000      	movs	r0, #0
}
   3a0aa:	bd10      	pop	{r4, pc}
		return NULL;
   3a0ac:	2000      	movs	r0, #0
}
   3a0ae:	4770      	bx	lr
   3a0b0:	20003368 	.word	0x20003368

0003a0b4 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   3a0b4:	4801      	ldr	r0, [pc, #4]	; (3a0bc <ll_tx_mem_acquire+0x8>)
   3a0b6:	f7f9 bf1b 	b.w	33ef0 <mem_acquire>
   3a0ba:	bf00      	nop
   3a0bc:	20005dcc 	.word	0x20005dcc

0003a0c0 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   3a0c0:	4901      	ldr	r1, [pc, #4]	; (3a0c8 <ll_tx_mem_release+0x8>)
   3a0c2:	f7f9 bf2f 	b.w	33f24 <mem_release>
   3a0c6:	bf00      	nop
   3a0c8:	20005dcc 	.word	0x20005dcc

0003a0cc <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a0cc:	2805      	cmp	r0, #5
   3a0ce:	d841      	bhi.n	3a154 <ll_tx_mem_enqueue+0x88>
{
   3a0d0:	b570      	push	{r4, r5, r6, lr}
   3a0d2:	4604      	mov	r4, r0
   3a0d4:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a0d6:	4821      	ldr	r0, [pc, #132]	; (3a15c <ll_tx_mem_enqueue+0x90>)
   3a0d8:	4622      	mov	r2, r4
   3a0da:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a0de:	f7f9 ff39 	bl	33f54 <mem_get>
	if (conn->lll.handle != handle) {
   3a0e2:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a0e4:	42a3      	cmp	r3, r4
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a0e6:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   3a0e8:	d11e      	bne.n	3a128 <ll_tx_mem_enqueue+0x5c>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   3a0ea:	4a1d      	ldr	r2, [pc, #116]	; (3a160 <ll_tx_mem_enqueue+0x94>)
   3a0ec:	78d0      	ldrb	r0, [r2, #3]
	if (last == count) {
   3a0ee:	f892 c001 	ldrb.w	ip, [r2, #1]
   3a0f2:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
   3a0f4:	1c43      	adds	r3, r0, #1
   3a0f6:	b2db      	uxtb	r3, r3
		last = 0U;
   3a0f8:	459c      	cmp	ip, r3
   3a0fa:	bf08      	it	eq
   3a0fc:	2300      	moveq	r3, #0
	if (last == first) {
   3a0fe:	4299      	cmp	r1, r3
   3a100:	d025      	beq.n	3a14e <ll_tx_mem_enqueue+0x82>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   3a102:	4611      	mov	r1, r2
   3a104:	f811 cb04 	ldrb.w	ip, [r1], #4
   3a108:	fb1c fc00 	smulbb	ip, ip, r0
	lll_tx->handle = handle;
   3a10c:	f821 400c 	strh.w	r4, [r1, ip]
   3a110:	448c      	add	ip, r1
	lll_tx->node = tx;
   3a112:	f8cc 6004 	str.w	r6, [ip, #4]
	*last = idx; /* Commit: Update write index */
   3a116:	70d3      	strb	r3, [r2, #3]
   3a118:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
   3a11a:	b943      	cbnz	r3, 3a12e <ll_tx_mem_enqueue+0x62>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a11c:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3a120:	2b00      	cmp	r3, #0
   3a122:	db0f      	blt.n	3a144 <ll_tx_mem_enqueue+0x78>
	return 0;
   3a124:	2000      	movs	r0, #0
}
   3a126:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3a128:	f06f 0015 	mvn.w	r0, #21
}
   3a12c:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   3a12e:	4b0d      	ldr	r3, [pc, #52]	; (3a164 <ll_tx_mem_enqueue+0x98>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   3a130:	2200      	movs	r2, #0
   3a132:	2101      	movs	r1, #1
   3a134:	2003      	movs	r0, #3
		mfy.param = conn;
   3a136:	609d      	str	r5, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   3a138:	f7f9 ffb4 	bl	340a4 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a13c:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3a140:	2b00      	cmp	r3, #0
   3a142:	daef      	bge.n	3a124 <ll_tx_mem_enqueue+0x58>
		ull_periph_latency_cancel(conn, handle);
   3a144:	4621      	mov	r1, r4
   3a146:	4628      	mov	r0, r5
   3a148:	f004 f90c 	bl	3e364 <ull_periph_latency_cancel>
   3a14c:	e7ea      	b.n	3a124 <ll_tx_mem_enqueue+0x58>
		return -ENOBUFS;
   3a14e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   3a152:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3a154:	f06f 0015 	mvn.w	r0, #21
}
   3a158:	4770      	bx	lr
   3a15a:	bf00      	nop
   3a15c:	20003368 	.word	0x20003368
   3a160:	20000d38 	.word	0x20000d38
   3a164:	20000c44 	.word	0x20000c44

0003a168 <ll_conn_update>:
{
   3a168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a16c:	2805      	cmp	r0, #5
{
   3a16e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   3a172:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
   3a176:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a17a:	d82b      	bhi.n	3a1d4 <ll_conn_update+0x6c>
   3a17c:	4682      	mov	sl, r0
   3a17e:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a180:	4842      	ldr	r0, [pc, #264]	; (3a28c <ll_conn_update+0x124>)
   3a182:	4616      	mov	r6, r2
   3a184:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a188:	4652      	mov	r2, sl
   3a18a:	461d      	mov	r5, r3
   3a18c:	f7f9 fee2 	bl	33f54 <mem_get>
	if (conn->lll.handle != handle) {
   3a190:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a192:	4553      	cmp	r3, sl
   3a194:	d11e      	bne.n	3a1d4 <ll_conn_update+0x6c>
	if (!cmd) {
   3a196:	b304      	cbz	r4, 3a1da <ll_conn_update+0x72>
		cmd--;
   3a198:	3c01      	subs	r4, #1
		if (cmd) {
   3a19a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   3a19e:	d024      	beq.n	3a1ea <ll_conn_update+0x82>
			if ((conn->llcp_conn_param.req ==
   3a1a0:	f890 2195 	ldrb.w	r2, [r0, #405]	; 0x195
   3a1a4:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
   3a1a8:	429a      	cmp	r2, r3
   3a1aa:	d051      	beq.n	3a250 <ll_conn_update+0xe8>
			    (conn->llcp_conn_param.state !=
   3a1ac:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
			     conn->llcp_conn_param.ack) ||
   3a1b0:	f003 020f 	and.w	r2, r3, #15
   3a1b4:	2a03      	cmp	r2, #3
   3a1b6:	d14b      	bne.n	3a250 <ll_conn_update+0xe8>
			conn->llcp_conn_param.state = cmd;
   3a1b8:	f004 040f 	and.w	r4, r4, #15
   3a1bc:	f044 0410 	orr.w	r4, r4, #16
   3a1c0:	f023 031f 	bic.w	r3, r3, #31
   3a1c4:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   3a1c6:	f880 6197 	strb.w	r6, [r0, #407]	; 0x197
			conn->llcp_conn_param.state = cmd;
   3a1ca:	f880 4196 	strb.w	r4, [r0, #406]	; 0x196
	return 0;
   3a1ce:	2000      	movs	r0, #0
}
   3a1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a1d4:	2002      	movs	r0, #2
}
   3a1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->llcp_conn_param.disabled &&
   3a1da:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
   3a1de:	0699      	lsls	r1, r3, #26
   3a1e0:	d42c      	bmi.n	3a23c <ll_conn_update+0xd4>
		    (!conn->common.fex_valid ||
   3a1e2:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
		if (!conn->llcp_conn_param.disabled &&
   3a1e6:	07da      	lsls	r2, r3, #31
   3a1e8:	d424      	bmi.n	3a234 <ll_conn_update+0xcc>
			if (conn->llcp_conn_param.req !=
   3a1ea:	f890 2194 	ldrb.w	r2, [r0, #404]	; 0x194
   3a1ee:	f890 3195 	ldrb.w	r3, [r0, #405]	; 0x195
   3a1f2:	4293      	cmp	r3, r2
   3a1f4:	d12c      	bne.n	3a250 <ll_conn_update+0xe8>
			conn->llcp_conn_param.req++;
   3a1f6:	3301      	adds	r3, #1
   3a1f8:	f880 3194 	strb.w	r3, [r0, #404]	; 0x194
			conn->llcp_conn_param.state = cmd;
   3a1fc:	f8b0 3196 	ldrh.w	r3, [r0, #406]	; 0x196
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a200:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
			conn->llcp_conn_param.state = cmd;
   3a204:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   3a208:	f043 0310 	orr.w	r3, r3, #16
   3a20c:	f8a0 3196 	strh.w	r3, [r0, #406]	; 0x196
			conn->llcp_conn_param.interval_min = interval_min;
   3a210:	2300      	movs	r3, #0
   3a212:	461a      	mov	r2, r3
   3a214:	f369 020f 	bfi	r2, r9, #0, #16
   3a218:	f365 030f 	bfi	r3, r5, #0, #16
   3a21c:	f368 431f 	bfi	r3, r8, #16, #16
   3a220:	f367 421f 	bfi	r2, r7, #16, #16
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a224:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_min = interval_min;
   3a226:	e9c0 3266 	strd	r3, r2, [r0, #408]	; 0x198
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a22a:	dad0      	bge.n	3a1ce <ll_conn_update+0x66>
				ull_periph_latency_cancel(conn, handle);
   3a22c:	4651      	mov	r1, sl
   3a22e:	f004 f899 	bl	3e364 <ull_periph_latency_cancel>
   3a232:	e7cc      	b.n	3a1ce <ll_conn_update+0x66>
		     (conn->llcp_feature.features_conn &
   3a234:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
		    (!conn->common.fex_valid ||
   3a238:	079b      	lsls	r3, r3, #30
   3a23a:	d4d6      	bmi.n	3a1ea <ll_conn_update+0x82>
		} else if (conn->lll.role) {
   3a23c:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3a240:	2b00      	cmp	r3, #0
   3a242:	db20      	blt.n	3a286 <ll_conn_update+0x11e>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   3a244:	f890 2118 	ldrb.w	r2, [r0, #280]	; 0x118
   3a248:	f890 3119 	ldrb.w	r3, [r0, #281]	; 0x119
   3a24c:	4293      	cmp	r3, r2
   3a24e:	d002      	beq.n	3a256 <ll_conn_update+0xee>
			return BT_HCI_ERR_CMD_DISALLOWED;
   3a250:	200c      	movs	r0, #12
}
   3a252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3a256:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
		conn->llcp_cu.interval = interval_max;
   3a25a:	f8a0 811c 	strh.w	r8, [r0, #284]	; 0x11c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3a25e:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.req++;
   3a262:	3301      	adds	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3a264:	f042 0209 	orr.w	r2, r2, #9
   3a268:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
		conn->llcp_cu.req++;
   3a26c:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
		conn->llcp_cu.win_size = 1U;
   3a270:	2201      	movs	r2, #1
		conn->llcp_cu.win_offset_us = 0U;
   3a272:	2300      	movs	r3, #0
		conn->llcp_cu.latency = latency;
   3a274:	f8a0 911e 	strh.w	r9, [r0, #286]	; 0x11e
		conn->llcp_cu.timeout = timeout;
   3a278:	f8a0 7120 	strh.w	r7, [r0, #288]	; 0x120
		conn->llcp_cu.win_size = 1U;
   3a27c:	f880 2128 	strb.w	r2, [r0, #296]	; 0x128
		conn->llcp_cu.win_offset_us = 0U;
   3a280:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
		conn->llcp_cu.req++;
   3a284:	e7a3      	b.n	3a1ce <ll_conn_update+0x66>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   3a286:	201a      	movs	r0, #26
   3a288:	e7a5      	b.n	3a1d6 <ll_conn_update+0x6e>
   3a28a:	bf00      	nop
   3a28c:	20003368 	.word	0x20003368

0003a290 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a290:	2805      	cmp	r0, #5
   3a292:	d81d      	bhi.n	3a2d0 <ll_chm_get+0x40>
{
   3a294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a296:	4606      	mov	r6, r0
   3a298:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a29a:	480e      	ldr	r0, [pc, #56]	; (3a2d4 <ll_chm_get+0x44>)
   3a29c:	4632      	mov	r2, r6
   3a29e:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a2a2:	f7f9 fe57 	bl	33f54 <mem_get>
	if (conn->lll.handle != handle) {
   3a2a6:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a2a8:	42b3      	cmp	r3, r6
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a2aa:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   3a2ac:	d10e      	bne.n	3a2cc <ll_chm_get+0x3c>
		memcpy(chm, conn->lll.data_chan_map,
   3a2ae:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
   3a2b2:	2600      	movs	r6, #0
   3a2b4:	f884 61e8 	strb.w	r6, [r4, #488]	; 0x1e8
		memcpy(chm, conn->lll.data_chan_map,
   3a2b8:	2205      	movs	r2, #5
   3a2ba:	4639      	mov	r1, r7
   3a2bc:	4628      	mov	r0, r5
   3a2be:	f011 fd52 	bl	4bd66 <memcpy>
	} while (conn->chm_updated);
   3a2c2:	f894 01e8 	ldrb.w	r0, [r4, #488]	; 0x1e8
   3a2c6:	2800      	cmp	r0, #0
   3a2c8:	d1f4      	bne.n	3a2b4 <ll_chm_get+0x24>
}
   3a2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a2cc:	2002      	movs	r0, #2
}
   3a2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a2d0:	2002      	movs	r0, #2
}
   3a2d2:	4770      	bx	lr
   3a2d4:	20003368 	.word	0x20003368

0003a2d8 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a2d8:	2805      	cmp	r0, #5
   3a2da:	d832      	bhi.n	3a342 <ll_terminate_ind_send+0x6a>
{
   3a2dc:	b538      	push	{r3, r4, r5, lr}
   3a2de:	4605      	mov	r5, r0
   3a2e0:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a2e2:	481b      	ldr	r0, [pc, #108]	; (3a350 <ll_terminate_ind_send+0x78>)
   3a2e4:	462a      	mov	r2, r5
   3a2e6:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a2ea:	f7f9 fe33 	bl	33f54 <mem_get>
	if (conn->lll.handle != handle) {
   3a2ee:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a2f0:	42ab      	cmp	r3, r5
   3a2f2:	d122      	bne.n	3a33a <ll_terminate_ind_send+0x62>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   3a2f4:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
   3a2f8:	f890 2151 	ldrb.w	r2, [r0, #337]	; 0x151
   3a2fc:	429a      	cmp	r2, r3
   3a2fe:	d11e      	bne.n	3a33e <ll_terminate_ind_send+0x66>
	switch (reason) {
   3a300:	2c1a      	cmp	r4, #26
   3a302:	d803      	bhi.n	3a30c <ll_terminate_ind_send+0x34>
   3a304:	2c04      	cmp	r4, #4
   3a306:	d810      	bhi.n	3a32a <ll_terminate_ind_send+0x52>
   3a308:	2012      	movs	r0, #18
}
   3a30a:	bd38      	pop	{r3, r4, r5, pc}
	switch (reason) {
   3a30c:	2c29      	cmp	r4, #41	; 0x29
   3a30e:	d001      	beq.n	3a314 <ll_terminate_ind_send+0x3c>
   3a310:	2c3b      	cmp	r4, #59	; 0x3b
   3a312:	d1f9      	bne.n	3a308 <ll_terminate_ind_send+0x30>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a314:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   3a318:	f880 4152 	strb.w	r4, [r0, #338]	; 0x152
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   3a31c:	3301      	adds	r3, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a31e:	2a00      	cmp	r2, #0
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   3a320:	f880 3150 	strb.w	r3, [r0, #336]	; 0x150
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a324:	db0f      	blt.n	3a346 <ll_terminate_ind_send+0x6e>
	return 0;
   3a326:	2000      	movs	r0, #0
}
   3a328:	bd38      	pop	{r3, r4, r5, pc}
	switch (reason) {
   3a32a:	490a      	ldr	r1, [pc, #40]	; (3a354 <ll_terminate_ind_send+0x7c>)
   3a32c:	fa21 fc04 	lsr.w	ip, r1, r4
   3a330:	f01c 0f01 	tst.w	ip, #1
   3a334:	d1ee      	bne.n	3a314 <ll_terminate_ind_send+0x3c>
   3a336:	2012      	movs	r0, #18
   3a338:	e7e7      	b.n	3a30a <ll_terminate_ind_send+0x32>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a33a:	2002      	movs	r0, #2
}
   3a33c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3a33e:	200c      	movs	r0, #12
}
   3a340:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a342:	2002      	movs	r0, #2
}
   3a344:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
   3a346:	4629      	mov	r1, r5
   3a348:	f004 f80c 	bl	3e364 <ull_periph_latency_cancel>
   3a34c:	e7eb      	b.n	3a326 <ll_terminate_ind_send+0x4e>
   3a34e:	bf00      	nop
   3a350:	20003368 	.word	0x20003368
   3a354:	04380020 	.word	0x04380020

0003a358 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a358:	2805      	cmp	r0, #5
   3a35a:	d821      	bhi.n	3a3a0 <ll_feature_req_send+0x48>
{
   3a35c:	b510      	push	{r4, lr}
   3a35e:	4604      	mov	r4, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a360:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a364:	480f      	ldr	r0, [pc, #60]	; (3a3a4 <ll_feature_req_send+0x4c>)
   3a366:	4622      	mov	r2, r4
   3a368:	f7f9 fdf4 	bl	33f54 <mem_get>
	if (conn->lll.handle != handle) {
   3a36c:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   3a36e:	42a1      	cmp	r1, r4
   3a370:	d10e      	bne.n	3a390 <ll_feature_req_send+0x38>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   3a372:	f890 4130 	ldrb.w	r4, [r0, #304]	; 0x130
   3a376:	f890 2131 	ldrb.w	r2, [r0, #305]	; 0x131
   3a37a:	42a2      	cmp	r2, r4
   3a37c:	d10a      	bne.n	3a394 <ll_feature_req_send+0x3c>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a37e:	f990 4039 	ldrsb.w	r4, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   3a382:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a384:	2c00      	cmp	r4, #0
	conn->llcp_feature.req++;
   3a386:	f880 2130 	strb.w	r2, [r0, #304]	; 0x130
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a38a:	db05      	blt.n	3a398 <ll_feature_req_send+0x40>
	return 0;
   3a38c:	2000      	movs	r0, #0
}
   3a38e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a390:	2002      	movs	r0, #2
}
   3a392:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3a394:	200c      	movs	r0, #12
}
   3a396:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   3a398:	f003 ffe4 	bl	3e364 <ull_periph_latency_cancel>
	return 0;
   3a39c:	2000      	movs	r0, #0
   3a39e:	e7f6      	b.n	3a38e <ll_feature_req_send+0x36>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a3a0:	2002      	movs	r0, #2
}
   3a3a2:	4770      	bx	lr
   3a3a4:	20003368 	.word	0x20003368

0003a3a8 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a3a8:	2805      	cmp	r0, #5
   3a3aa:	d821      	bhi.n	3a3f0 <ll_version_ind_send+0x48>
{
   3a3ac:	b510      	push	{r4, lr}
   3a3ae:	4604      	mov	r4, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a3b0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a3b4:	480f      	ldr	r0, [pc, #60]	; (3a3f4 <ll_version_ind_send+0x4c>)
   3a3b6:	4622      	mov	r2, r4
   3a3b8:	f7f9 fdcc 	bl	33f54 <mem_get>
	if (conn->lll.handle != handle) {
   3a3bc:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   3a3be:	42a1      	cmp	r1, r4
   3a3c0:	d10e      	bne.n	3a3e0 <ll_version_ind_send+0x38>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   3a3c2:	f890 4148 	ldrb.w	r4, [r0, #328]	; 0x148
   3a3c6:	f890 2149 	ldrb.w	r2, [r0, #329]	; 0x149
   3a3ca:	42a2      	cmp	r2, r4
   3a3cc:	d10a      	bne.n	3a3e4 <ll_version_ind_send+0x3c>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a3ce:	f990 4039 	ldrsb.w	r4, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   3a3d2:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a3d4:	2c00      	cmp	r4, #0
	conn->llcp_version.req++;
   3a3d6:	f880 2148 	strb.w	r2, [r0, #328]	; 0x148
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a3da:	db05      	blt.n	3a3e8 <ll_version_ind_send+0x40>
	return 0;
   3a3dc:	2000      	movs	r0, #0
}
   3a3de:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a3e0:	2002      	movs	r0, #2
}
   3a3e2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3a3e4:	200c      	movs	r0, #12
}
   3a3e6:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   3a3e8:	f003 ffbc 	bl	3e364 <ull_periph_latency_cancel>
	return 0;
   3a3ec:	2000      	movs	r0, #0
   3a3ee:	e7f6      	b.n	3a3de <ll_version_ind_send+0x36>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a3f0:	2002      	movs	r0, #2
}
   3a3f2:	4770      	bx	lr
   3a3f4:	20003368 	.word	0x20003368

0003a3f8 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a3f8:	2805      	cmp	r0, #5
   3a3fa:	d84b      	bhi.n	3a494 <ll_length_req_send+0x9c>
{
   3a3fc:	b570      	push	{r4, r5, r6, lr}
   3a3fe:	4604      	mov	r4, r0
   3a400:	460e      	mov	r6, r1
   3a402:	4615      	mov	r5, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a404:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a408:	4602      	mov	r2, r0
   3a40a:	4823      	ldr	r0, [pc, #140]	; (3a498 <ll_length_req_send+0xa0>)
   3a40c:	f7f9 fda2 	bl	33f54 <mem_get>
	if (conn->lll.handle != handle) {
   3a410:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a412:	42a3      	cmp	r3, r4
   3a414:	d138      	bne.n	3a488 <ll_length_req_send+0x90>
	if (conn->llcp_length.disabled ||
   3a416:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
   3a41a:	071a      	lsls	r2, r3, #28
   3a41c:	d436      	bmi.n	3a48c <ll_length_req_send+0x94>
	    (conn->common.fex_valid &&
   3a41e:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
	if (conn->llcp_length.disabled ||
   3a422:	07d1      	lsls	r1, r2, #31
   3a424:	d503      	bpl.n	3a42e <ll_length_req_send+0x36>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   3a426:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
	    (conn->common.fex_valid &&
   3a42a:	0692      	lsls	r2, r2, #26
   3a42c:	d52e      	bpl.n	3a48c <ll_length_req_send+0x94>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   3a42e:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
   3a432:	f890 21bd 	ldrb.w	r2, [r0, #445]	; 0x1bd
   3a436:	428a      	cmp	r2, r1
   3a438:	d011      	beq.n	3a45e <ll_length_req_send+0x66>
		switch (conn->llcp_length.state) {
   3a43a:	f003 0307 	and.w	r3, r3, #7
   3a43e:	2b03      	cmp	r3, #3
   3a440:	d004      	beq.n	3a44c <ll_length_req_send+0x54>
   3a442:	3303      	adds	r3, #3
   3a444:	f003 0307 	and.w	r3, r3, #7
   3a448:	2b01      	cmp	r3, #1
   3a44a:	d821      	bhi.n	3a490 <ll_length_req_send+0x98>
			if (!conn->llcp_length.cache.tx_octets) {
   3a44c:	f8b0 31c8 	ldrh.w	r3, [r0, #456]	; 0x1c8
   3a450:	b9f3      	cbnz	r3, 3a490 <ll_length_req_send+0x98>
				conn->llcp_length.cache.tx_octets = tx_octets;
   3a452:	f8a0 61c8 	strh.w	r6, [r0, #456]	; 0x1c8
				conn->llcp_length.cache.tx_time = tx_time;
   3a456:	f8a0 51ca 	strh.w	r5, [r0, #458]	; 0x1ca
				return 0;
   3a45a:	2000      	movs	r0, #0
}
   3a45c:	bd70      	pop	{r4, r5, r6, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3a45e:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a462:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_length.tx_octets = tx_octets;
   3a466:	f8a0 61c2 	strh.w	r6, [r0, #450]	; 0x1c2
	conn->llcp_length.req++;
   3a46a:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3a46c:	f36f 0302 	bfc	r3, #0, #3
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a470:	2900      	cmp	r1, #0
	conn->llcp_length.tx_time = tx_time;
   3a472:	f8a0 51c6 	strh.w	r5, [r0, #454]	; 0x1c6
	conn->llcp_length.req++;
   3a476:	f880 21bc 	strb.w	r2, [r0, #444]	; 0x1bc
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3a47a:	f880 31be 	strb.w	r3, [r0, #446]	; 0x1be
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a47e:	daec      	bge.n	3a45a <ll_length_req_send+0x62>
		ull_periph_latency_cancel(conn, handle);
   3a480:	4621      	mov	r1, r4
   3a482:	f003 ff6f 	bl	3e364 <ull_periph_latency_cancel>
   3a486:	e7e8      	b.n	3a45a <ll_length_req_send+0x62>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a488:	2002      	movs	r0, #2
}
   3a48a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   3a48c:	201a      	movs	r0, #26
}
   3a48e:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   3a490:	200c      	movs	r0, #12
}
   3a492:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a494:	2002      	movs	r0, #2
}
   3a496:	4770      	bx	lr
   3a498:	20003368 	.word	0x20003368

0003a49c <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   3a49c:	4a03      	ldr	r2, [pc, #12]	; (3a4ac <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   3a49e:	4b04      	ldr	r3, [pc, #16]	; (3a4b0 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   3a4a0:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   3a4a2:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   3a4a4:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   3a4a6:	800b      	strh	r3, [r1, #0]
}
   3a4a8:	4770      	bx	lr
   3a4aa:	bf00      	nop
   3a4ac:	200072ba 	.word	0x200072ba
   3a4b0:	200072b8 	.word	0x200072b8

0003a4b4 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   3a4b4:	4a02      	ldr	r2, [pc, #8]	; (3a4c0 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   3a4b6:	4b03      	ldr	r3, [pc, #12]	; (3a4c4 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   3a4b8:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   3a4ba:	8019      	strh	r1, [r3, #0]
}
   3a4bc:	2000      	movs	r0, #0
   3a4be:	4770      	bx	lr
   3a4c0:	200072ba 	.word	0x200072ba
   3a4c4:	200072b8 	.word	0x200072b8

0003a4c8 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   3a4c8:	f04f 0c1b 	mov.w	ip, #27
   3a4cc:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   3a4d0:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   3a4d4:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   3a4d8:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   3a4da:	8018      	strh	r0, [r3, #0]
}
   3a4dc:	4770      	bx	lr
   3a4de:	bf00      	nop

0003a4e0 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a4e0:	2805      	cmp	r0, #5
   3a4e2:	d81b      	bhi.n	3a51c <ll_phy_get+0x3c>
{
   3a4e4:	b570      	push	{r4, r5, r6, lr}
   3a4e6:	4604      	mov	r4, r0
   3a4e8:	460e      	mov	r6, r1
   3a4ea:	4615      	mov	r5, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a4ec:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a4f0:	4602      	mov	r2, r0
   3a4f2:	480b      	ldr	r0, [pc, #44]	; (3a520 <ll_phy_get+0x40>)
   3a4f4:	f7f9 fd2e 	bl	33f54 <mem_get>
	if (conn->lll.handle != handle) {
   3a4f8:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   3a4fa:	42a2      	cmp	r2, r4
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a4fc:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   3a4fe:	d10b      	bne.n	3a518 <ll_phy_get+0x38>
	*tx = conn->lll.phy_tx;
   3a500:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
   3a504:	f3c4 0402 	ubfx	r4, r4, #0, #3
   3a508:	7034      	strb	r4, [r6, #0]
	*rx = conn->lll.phy_rx;
   3a50a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   3a50e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3a512:	702b      	strb	r3, [r5, #0]
	return 0;
   3a514:	2000      	movs	r0, #0
}
   3a516:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a518:	2002      	movs	r0, #2
}
   3a51a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a51c:	2002      	movs	r0, #2
}
   3a51e:	4770      	bx	lr
   3a520:	20003368 	.word	0x20003368

0003a524 <ll_phy_default_set>:
	default_phy_tx = tx;
   3a524:	4a02      	ldr	r2, [pc, #8]	; (3a530 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   3a526:	4b03      	ldr	r3, [pc, #12]	; (3a534 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   3a528:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   3a52a:	7019      	strb	r1, [r3, #0]
}
   3a52c:	2000      	movs	r0, #0
   3a52e:	4770      	bx	lr
   3a530:	20007419 	.word	0x20007419
   3a534:	20007418 	.word	0x20007418

0003a538 <ll_phy_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a538:	2805      	cmp	r0, #5
{
   3a53a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a53e:	d843      	bhi.n	3a5c8 <ll_phy_req_send+0x90>
   3a540:	4606      	mov	r6, r0
   3a542:	460c      	mov	r4, r1
   3a544:	4617      	mov	r7, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a546:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a54a:	4602      	mov	r2, r0
   3a54c:	4824      	ldr	r0, [pc, #144]	; (3a5e0 <ll_phy_req_send+0xa8>)
   3a54e:	4698      	mov	r8, r3
   3a550:	f7f9 fd00 	bl	33f54 <mem_get>
	if (conn->lll.handle != handle) {
   3a554:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a556:	42b3      	cmp	r3, r6
   3a558:	d136      	bne.n	3a5c8 <ll_phy_req_send+0x90>
	if (conn->llcp_phy.disabled ||
   3a55a:	f890 51cf 	ldrb.w	r5, [r0, #463]	; 0x1cf
   3a55e:	f015 0508 	ands.w	r5, r5, #8
   3a562:	d139      	bne.n	3a5d8 <ll_phy_req_send+0xa0>
	    (conn->common.fex_valid &&
   3a564:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
	if (conn->llcp_phy.disabled ||
   3a568:	07db      	lsls	r3, r3, #31
   3a56a:	d504      	bpl.n	3a576 <ll_phy_req_send+0x3e>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   3a56c:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   3a570:	f413 6f10 	tst.w	r3, #2304	; 0x900
   3a574:	d030      	beq.n	3a5d8 <ll_phy_req_send+0xa0>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   3a576:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
   3a57a:	f890 21cd 	ldrb.w	r2, [r0, #461]	; 0x1cd
   3a57e:	429a      	cmp	r2, r3
   3a580:	d126      	bne.n	3a5d0 <ll_phy_req_send+0x98>
	conn->llcp_phy.req++;
   3a582:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   3a584:	f004 0407 	and.w	r4, r4, #7
   3a588:	00a4      	lsls	r4, r4, #2
	conn->llcp_phy.req++;
   3a58a:	f880 21cc 	strb.w	r2, [r0, #460]	; 0x1cc
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   3a58e:	f8b0 21ce 	ldrh.w	r2, [r0, #462]	; 0x1ce
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a592:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   3a596:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   3a59a:	f008 0807 	and.w	r8, r8, #7
   3a59e:	ea44 1348 	orr.w	r3, r4, r8, lsl #5
   3a5a2:	f007 0701 	and.w	r7, r7, #1
   3a5a6:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
   3a5aa:	ea43 2347 	orr.w	r3, r3, r7, lsl #9
   3a5ae:	f022 0207 	bic.w	r2, r2, #7
   3a5b2:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a5b4:	2900      	cmp	r1, #0
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   3a5b6:	f8a0 31ce 	strh.w	r3, [r0, #462]	; 0x1ce
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a5ba:	da06      	bge.n	3a5ca <ll_phy_req_send+0x92>
		ull_periph_latency_cancel(conn, handle);
   3a5bc:	4631      	mov	r1, r6
   3a5be:	f003 fed1 	bl	3e364 <ull_periph_latency_cancel>
}
   3a5c2:	4628      	mov	r0, r5
   3a5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a5c8:	2502      	movs	r5, #2
}
   3a5ca:	4628      	mov	r0, r5
   3a5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3a5d0:	250c      	movs	r5, #12
}
   3a5d2:	4628      	mov	r0, r5
   3a5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   3a5d8:	251a      	movs	r5, #26
}
   3a5da:	4628      	mov	r0, r5
   3a5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3a5e0:	20003368 	.word	0x20003368

0003a5e4 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a5e4:	2805      	cmp	r0, #5
   3a5e6:	d81d      	bhi.n	3a624 <ll_apto_get+0x40>
{
   3a5e8:	b538      	push	{r3, r4, r5, lr}
   3a5ea:	4604      	mov	r4, r0
   3a5ec:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a5ee:	480e      	ldr	r0, [pc, #56]	; (3a628 <ll_apto_get+0x44>)
   3a5f0:	4622      	mov	r2, r4
   3a5f2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a5f6:	f7f9 fcad 	bl	33f54 <mem_get>
	if (conn->lll.handle != handle) {
   3a5fa:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a5fc:	42a3      	cmp	r3, r4
   3a5fe:	d10f      	bne.n	3a620 <ll_apto_get+0x3c>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   3a600:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   3a602:	f8b0 30ce 	ldrh.w	r3, [r0, #206]	; 0xce
   3a606:	4a09      	ldr	r2, [pc, #36]	; (3a62c <ll_apto_get+0x48>)
   3a608:	fb01 f303 	mul.w	r3, r1, r3
   3a60c:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   3a610:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   3a614:	fba2 2303 	umull	r2, r3, r2, r3
   3a618:	099b      	lsrs	r3, r3, #6
   3a61a:	802b      	strh	r3, [r5, #0]
	return 0;
   3a61c:	2000      	movs	r0, #0
}
   3a61e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a620:	2002      	movs	r0, #2
}
   3a622:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a624:	2002      	movs	r0, #2
}
   3a626:	4770      	bx	lr
   3a628:	20003368 	.word	0x20003368
   3a62c:	10624dd3 	.word	0x10624dd3

0003a630 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a630:	2805      	cmp	r0, #5
   3a632:	d81e      	bhi.n	3a672 <ll_apto_set+0x42>
{
   3a634:	b538      	push	{r3, r4, r5, lr}
   3a636:	4605      	mov	r5, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a638:	462a      	mov	r2, r5
   3a63a:	480f      	ldr	r0, [pc, #60]	; (3a678 <ll_apto_set+0x48>)
   3a63c:	460c      	mov	r4, r1
   3a63e:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a642:	f7f9 fc87 	bl	33f54 <mem_get>
	if (conn->lll.handle != handle) {
   3a646:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   3a648:	42aa      	cmp	r2, r5
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a64a:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   3a64c:	d10f      	bne.n	3a66e <ll_apto_set+0x3e>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   3a64e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   3a650:	f240 41e2 	movw	r1, #1250	; 0x4e2
   3a654:	fb01 f202 	mul.w	r2, r1, r2
   3a658:	f242 7110 	movw	r1, #10000	; 0x2710
   3a65c:	fb01 2104 	mla	r1, r1, r4, r2
   3a660:	3901      	subs	r1, #1
	return 0;
   3a662:	2000      	movs	r0, #0
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   3a664:	fbb1 f1f2 	udiv	r1, r1, r2
   3a668:	f8a3 10ce 	strh.w	r1, [r3, #206]	; 0xce
}
   3a66c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a66e:	2002      	movs	r0, #2
}
   3a670:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a672:	2002      	movs	r0, #2
}
   3a674:	4770      	bx	lr
   3a676:	bf00      	nop
   3a678:	20003368 	.word	0x20003368

0003a67c <ull_conn_init>:
	err = init_reset();
   3a67c:	f7fe be32 	b.w	392e4 <init_reset>

0003a680 <ull_conn_reset>:
{
   3a680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)ull_central_reset();
   3a684:	f004 f832 	bl	3e6ec <ull_central_reset>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a688:	4e1a      	ldr	r6, [pc, #104]	; (3a6f4 <ull_conn_reset+0x74>)
	LL_ASSERT(err == 0 || err == -EALREADY);
   3a68a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 3a6f8 <ull_conn_reset+0x78>
   3a68e:	4f1b      	ldr	r7, [pc, #108]	; (3a6fc <ull_conn_reset+0x7c>)
	(void)ull_central_reset();
   3a690:	2500      	movs	r5, #0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a692:	b2aa      	uxth	r2, r5
   3a694:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a698:	4630      	mov	r0, r6
   3a69a:	f7f9 fc5b 	bl	33f54 <mem_get>
   3a69e:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   3a6a0:	1d68      	adds	r0, r5, #5
   3a6a2:	f104 021c 	add.w	r2, r4, #28
   3a6a6:	4621      	mov	r1, r4
   3a6a8:	b2c0      	uxtb	r0, r0
   3a6aa:	f7fd fbdb 	bl	37e64 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   3a6ae:	b170      	cbz	r0, 3a6ce <ull_conn_reset+0x4e>
   3a6b0:	3078      	adds	r0, #120	; 0x78
   3a6b2:	d00c      	beq.n	3a6ce <ull_conn_reset+0x4e>
   3a6b4:	4812      	ldr	r0, [pc, #72]	; (3a700 <ull_conn_reset+0x80>)
   3a6b6:	f640 03e3 	movw	r3, #2275	; 0x8e3
   3a6ba:	4642      	mov	r2, r8
   3a6bc:	4639      	mov	r1, r7
   3a6be:	f00f fa23 	bl	49b08 <printk>
   3a6c2:	4040      	eors	r0, r0
   3a6c4:	f380 8811 	msr	BASEPRI, r0
   3a6c8:	f04f 0003 	mov.w	r0, #3
   3a6cc:	df02      	svc	2
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3a6ce:	3501      	adds	r5, #1
	conn->lll.handle = LLL_HANDLE_INVALID;
   3a6d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
	conn->lll.link_tx_free = NULL;
   3a6d4:	2300      	movs	r3, #0
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3a6d6:	2d06      	cmp	r5, #6
	conn->lll.handle = LLL_HANDLE_INVALID;
   3a6d8:	8522      	strh	r2, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   3a6da:	6763      	str	r3, [r4, #116]	; 0x74
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3a6dc:	d1d9      	bne.n	3a692 <ull_conn_reset+0x12>
	MFIFO_INIT(conn_tx);
   3a6de:	4809      	ldr	r0, [pc, #36]	; (3a704 <ull_conn_reset+0x84>)
	MFIFO_INIT(conn_ack);
   3a6e0:	4909      	ldr	r1, [pc, #36]	; (3a708 <ull_conn_reset+0x88>)
	conn_upd_curr = NULL;
   3a6e2:	4a0a      	ldr	r2, [pc, #40]	; (3a70c <ull_conn_reset+0x8c>)
	MFIFO_INIT(conn_tx);
   3a6e4:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   3a6e6:	804b      	strh	r3, [r1, #2]
}
   3a6e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	conn_upd_curr = NULL;
   3a6ec:	6013      	str	r3, [r2, #0]
	err = init_reset();
   3a6ee:	f7fe bdf9 	b.w	392e4 <init_reset>
   3a6f2:	bf00      	nop
   3a6f4:	20003368 	.word	0x20003368
   3a6f8:	000530cc 	.word	0x000530cc
   3a6fc:	000530b4 	.word	0x000530b4
   3a700:	00052bbc 	.word	0x00052bbc
   3a704:	20000d38 	.word	0x20000d38
   3a708:	20000c54 	.word	0x20000c54
   3a70c:	200058c4 	.word	0x200058c4

0003a710 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   3a710:	4b01      	ldr	r3, [pc, #4]	; (3a718 <ull_conn_default_tx_octets_get+0x8>)
}
   3a712:	8818      	ldrh	r0, [r3, #0]
   3a714:	4770      	bx	lr
   3a716:	bf00      	nop
   3a718:	200072ba 	.word	0x200072ba

0003a71c <ull_conn_default_tx_time_get>:
	return default_tx_time;
   3a71c:	4b01      	ldr	r3, [pc, #4]	; (3a724 <ull_conn_default_tx_time_get+0x8>)
}
   3a71e:	8818      	ldrh	r0, [r3, #0]
   3a720:	4770      	bx	lr
   3a722:	bf00      	nop
   3a724:	200072b8 	.word	0x200072b8

0003a728 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   3a728:	4b01      	ldr	r3, [pc, #4]	; (3a730 <ull_conn_default_phy_tx_get+0x8>)
}
   3a72a:	7818      	ldrb	r0, [r3, #0]
   3a72c:	4770      	bx	lr
   3a72e:	bf00      	nop
   3a730:	20007419 	.word	0x20007419

0003a734 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   3a734:	4b01      	ldr	r3, [pc, #4]	; (3a73c <ull_conn_default_phy_rx_get+0x8>)
}
   3a736:	7818      	ldrb	r0, [r3, #0]
   3a738:	4770      	bx	lr
   3a73a:	bf00      	nop
   3a73c:	20007418 	.word	0x20007418

0003a740 <ull_conn_peer_connected>:
{
   3a740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a744:	4f1a      	ldr	r7, [pc, #104]	; (3a7b0 <ull_conn_peer_connected+0x70>)
{
   3a746:	4681      	mov	r9, r0
   3a748:	468a      	mov	sl, r1
   3a74a:	4616      	mov	r6, r2
   3a74c:	4698      	mov	r8, r3
   3a74e:	2500      	movs	r5, #0
   3a750:	fa1f fb85 	uxth.w	fp, r5
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a754:	465a      	mov	r2, fp
   3a756:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a75a:	4638      	mov	r0, r7
   3a75c:	f7f9 fbfa 	bl	33f54 <mem_get>
	if (conn->lll.handle != handle) {
   3a760:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a762:	455b      	cmp	r3, fp
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a764:	4604      	mov	r4, r0
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3a766:	f105 0501 	add.w	r5, r5, #1
	if (conn->lll.handle != handle) {
   3a76a:	d105      	bne.n	3a778 <ull_conn_peer_connected+0x38>
		    conn->peer_id_addr_type == peer_id_addr_type &&
   3a76c:	f890 c0d6 	ldrb.w	ip, [r0, #214]	; 0xd6
   3a770:	f3cc 0c40 	ubfx	ip, ip, #1, #1
		if (conn &&
   3a774:	45b4      	cmp	ip, r6
   3a776:	d004      	beq.n	3a782 <ull_conn_peer_connected+0x42>
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3a778:	2d06      	cmp	r5, #6
   3a77a:	d1e9      	bne.n	3a750 <ull_conn_peer_connected+0x10>
	return false;
   3a77c:	2000      	movs	r0, #0
}
   3a77e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !memcmp(conn->peer_id_addr, peer_id_addr, BDADDR_SIZE) &&
   3a782:	2206      	movs	r2, #6
   3a784:	4641      	mov	r1, r8
   3a786:	30dd      	adds	r0, #221	; 0xdd
   3a788:	f011 fadd 	bl	4bd46 <memcmp>
		    conn->peer_id_addr_type == peer_id_addr_type &&
   3a78c:	2800      	cmp	r0, #0
   3a78e:	d1f3      	bne.n	3a778 <ull_conn_peer_connected+0x38>
		    conn->own_id_addr_type == own_id_addr_type &&
   3a790:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
   3a794:	f003 0301 	and.w	r3, r3, #1
		    !memcmp(conn->peer_id_addr, peer_id_addr, BDADDR_SIZE) &&
   3a798:	454b      	cmp	r3, r9
   3a79a:	d1ed      	bne.n	3a778 <ull_conn_peer_connected+0x38>
		    !memcmp(conn->own_id_addr, own_id_addr, BDADDR_SIZE)) {
   3a79c:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   3a7a0:	2206      	movs	r2, #6
   3a7a2:	4651      	mov	r1, sl
   3a7a4:	f011 facf 	bl	4bd46 <memcmp>
		    conn->own_id_addr_type == own_id_addr_type &&
   3a7a8:	2800      	cmp	r0, #0
   3a7aa:	d1e5      	bne.n	3a778 <ull_conn_peer_connected+0x38>
			return true;
   3a7ac:	2001      	movs	r0, #1
   3a7ae:	e7e6      	b.n	3a77e <ull_conn_peer_connected+0x3e>
   3a7b0:	20003368 	.word	0x20003368

0003a7b4 <ull_conn_setup>:
{
   3a7b4:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   3a7b6:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   3a7b8:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   3a7ba:	681d      	ldr	r5, [r3, #0]
   3a7bc:	782b      	ldrb	r3, [r5, #0]
{
   3a7be:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   3a7c0:	b193      	cbz	r3, 3a7e8 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   3a7c2:	696b      	ldr	r3, [r5, #20]
   3a7c4:	b163      	cbz	r3, 3a7e0 <ull_conn_setup+0x2c>
   3a7c6:	4a0b      	ldr	r2, [pc, #44]	; (3a7f4 <ull_conn_setup+0x40>)
   3a7c8:	490b      	ldr	r1, [pc, #44]	; (3a7f8 <ull_conn_setup+0x44>)
   3a7ca:	480c      	ldr	r0, [pc, #48]	; (3a7fc <ull_conn_setup+0x48>)
   3a7cc:	f240 33ed 	movw	r3, #1005	; 0x3ed
   3a7d0:	f00f f99a 	bl	49b08 <printk>
   3a7d4:	4040      	eors	r0, r0
   3a7d6:	f380 8811 	msr	BASEPRI, r0
   3a7da:	f04f 0003 	mov.w	r0, #3
   3a7de:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   3a7e0:	4b07      	ldr	r3, [pc, #28]	; (3a800 <ull_conn_setup+0x4c>)
   3a7e2:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   3a7e6:	bd38      	pop	{r3, r4, r5, pc}
   3a7e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   3a7ec:	4608      	mov	r0, r1
   3a7ee:	f7fe bf7d 	b.w	396ec <conn_setup_adv_scan_disabled_cb>
   3a7f2:	bf00      	nop
   3a7f4:	000530cc 	.word	0x000530cc
   3a7f8:	00052fb4 	.word	0x00052fb4
   3a7fc:	00052bbc 	.word	0x00052bbc
   3a800:	000396ed 	.word	0x000396ed

0003a804 <ull_conn_rx>:
{
   3a804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	conn = ll_connected_get((*rx)->hdr.handle);
   3a808:	680b      	ldr	r3, [r1, #0]
   3a80a:	88de      	ldrh	r6, [r3, #6]
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a80c:	2e05      	cmp	r6, #5
{
   3a80e:	b085      	sub	sp, #20
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a810:	d864      	bhi.n	3a8dc <ull_conn_rx+0xd8>
   3a812:	460d      	mov	r5, r1
   3a814:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a816:	4632      	mov	r2, r6
   3a818:	48b0      	ldr	r0, [pc, #704]	; (3aadc <ull_conn_rx+0x2d8>)
   3a81a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a81e:	f7f9 fb99 	bl	33f54 <mem_get>
	if (conn->lll.handle != handle) {
   3a822:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a824:	42b3      	cmp	r3, r6
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a826:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   3a828:	d157      	bne.n	3a8da <ull_conn_rx+0xd6>
	pdu_rx = (void *)(*rx)->pdu;
   3a82a:	682e      	ldr	r6, [r5, #0]

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   3a82c:	f890 0176 	ldrb.w	r0, [r0, #374]	; 0x176
	switch (pdu_rx->ll_id) {
   3a830:	7f33      	ldrb	r3, [r6, #28]
   3a832:	f003 0303 	and.w	r3, r3, #3
   3a836:	2b03      	cmp	r3, #3
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   3a838:	f000 0201 	and.w	r2, r0, #1
	switch (pdu_rx->ll_id) {
   3a83c:	d13a      	bne.n	3a8b4 <ull_conn_rx+0xb0>
	opcode = pdu_rx->llctrl.opcode;
   3a83e:	f896 801f 	ldrb.w	r8, [r6, #31]
	pdu_rx = (void *)(*rx)->pdu;
   3a842:	f106 0c1c 	add.w	ip, r6, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   3a846:	2a00      	cmp	r2, #0
   3a848:	d04b      	beq.n	3a8e2 <ull_conn_rx+0xde>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   3a84a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3a84e:	2b00      	cmp	r3, #0
		((!conn->llcp_enc.refresh &&
   3a850:	f000 0204 	and.w	r2, r0, #4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   3a854:	f2c0 81e6 	blt.w	3ac24 <ull_conn_rx+0x420>
	return (!conn->lll.role &&
   3a858:	2a00      	cmp	r2, #0
   3a85a:	f040 80ae 	bne.w	3a9ba <ull_conn_rx+0x1b6>
		((!conn->llcp_enc.refresh &&
   3a85e:	f1b8 0f02 	cmp.w	r8, #2
   3a862:	f000 81ee 	beq.w	3ac42 <ull_conn_rx+0x43e>
   3a866:	f1b8 0f11 	cmp.w	r8, #17
   3a86a:	d830      	bhi.n	3a8ce <ull_conn_rx+0xca>
   3a86c:	4a9c      	ldr	r2, [pc, #624]	; (3aae0 <ull_conn_rx+0x2dc>)
   3a86e:	fa22 f208 	lsr.w	r2, r2, r8
   3a872:	07d1      	lsls	r1, r2, #31
   3a874:	d52b      	bpl.n	3a8ce <ull_conn_rx+0xca>

		return 0;
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   3a876:	f1b8 0f19 	cmp.w	r8, #25
   3a87a:	d856      	bhi.n	3a92a <ull_conn_rx+0x126>
   3a87c:	e8df f018 	tbh	[pc, r8, lsl #1]
   3a880:	051904b8 	.word	0x051904b8
   3a884:	047001e1 	.word	0x047001e1
   3a888:	04300451 	.word	0x04300451
   3a88c:	016a0193 	.word	0x016a0193
   3a890:	027b0052 	.word	0x027b0052
   3a894:	054c02b9 	.word	0x054c02b9
   3a898:	02390217 	.word	0x02390217
   3a89c:	01bd036c 	.word	0x01bd036c
   3a8a0:	01340302 	.word	0x01340302
   3a8a4:	0103010c 	.word	0x0103010c
   3a8a8:	00ca00ca 	.word	0x00ca00ca
   3a8ac:	03f301ec 	.word	0x03f301ec
   3a8b0:	037d03b2 	.word	0x037d03b2
	switch (pdu_rx->ll_id) {
   3a8b4:	b94b      	cbnz	r3, 3a8ca <ull_conn_rx+0xc6>
		if (conn->llcp_enc.pause_rx) {
   3a8b6:	b112      	cbz	r2, 3a8be <ull_conn_rx+0xba>
			conn->llcp_terminate.reason_final =
   3a8b8:	233d      	movs	r3, #61	; 0x3d
   3a8ba:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a8be:	2301      	movs	r3, #1
   3a8c0:	7133      	strb	r3, [r6, #4]
		return 0;
   3a8c2:	2000      	movs	r0, #0
}
   3a8c4:	b005      	add	sp, #20
   3a8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   3a8ca:	2a00      	cmp	r2, #0
   3a8cc:	d0f9      	beq.n	3a8c2 <ull_conn_rx+0xbe>
			conn->llcp_terminate.reason_final =
   3a8ce:	223d      	movs	r2, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a8d0:	2301      	movs	r3, #1
			conn->llcp_terminate.reason_final =
   3a8d2:	f884 2153 	strb.w	r2, [r4, #339]	; 0x153
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a8d6:	7133      	strb	r3, [r6, #4]
   3a8d8:	e7f3      	b.n	3a8c2 <ull_conn_rx+0xbe>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a8da:	682b      	ldr	r3, [r5, #0]
   3a8dc:	2201      	movs	r2, #1
   3a8de:	711a      	strb	r2, [r3, #4]
		    PDU_DATA_LLCTRL_LEN(phy_upd_ind) != pdu_rx->len) {
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
   3a8e0:	e7ef      	b.n	3a8c2 <ull_conn_rx+0xbe>
	switch (opcode) {
   3a8e2:	f1b8 0f19 	cmp.w	r8, #25
   3a8e6:	d820      	bhi.n	3a92a <ull_conn_rx+0x126>
   3a8e8:	e8df f018 	tbh	[pc, r8, lsl #1]
   3a8ec:	04e10480 	.word	0x04e10480
   3a8f0:	043801ab 	.word	0x043801ab
   3a8f4:	03f80416 	.word	0x03f80416
   3a8f8:	0134015d 	.word	0x0134015d
   3a8fc:	0245001a 	.word	0x0245001a
   3a900:	05160281 	.word	0x05160281
   3a904:	020301e1 	.word	0x020301e1
   3a908:	01870334 	.word	0x01870334
   3a90c:	00fe02ca 	.word	0x00fe02ca
   3a910:	00cd00d6 	.word	0x00cd00d6
   3a914:	00940094 	.word	0x00940094
   3a918:	03bb01b6 	.word	0x03bb01b6
   3a91c:	0345037a 	.word	0x0345037a
   3a920:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   3a924:	2b00      	cmp	r3, #0
   3a926:	f2c0 831a 	blt.w	3af5e <ull_conn_rx+0x75a>
	if (conn->common.txn_lock) {
   3a92a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3a92e:	0798      	lsls	r0, r3, #30
   3a930:	d4c5      	bmi.n	3a8be <ull_conn_rx+0xba>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3a932:	486c      	ldr	r0, [pc, #432]	; (3aae4 <ull_conn_rx+0x2e0>)
   3a934:	f7f9 fadc 	bl	33ef0 <mem_acquire>
	if (!tx) {
   3a938:	2800      	cmp	r0, #0
   3a93a:	f000 85f6 	beq.w	3b52a <ull_conn_rx+0xd26>
	conn->common.txn_lock = 1U;
   3a93e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3a942:	f043 0302 	orr.w	r3, r3, #2
   3a946:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3a94a:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   3a94c:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3a950:	f043 0303 	orr.w	r3, r3, #3
   3a954:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   3a956:	2302      	movs	r3, #2
   3a958:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   3a95a:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   3a95e:	2207      	movs	r2, #7
   3a960:	71c2      	strb	r2, [r0, #7]
	if (
   3a962:	2b00      	cmp	r3, #0
   3a964:	f000 8593 	beq.w	3b48e <ull_conn_rx+0xc8a>
	    !conn->llcp_enc.pause_tx &&
   3a968:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3a96c:	0791      	lsls	r1, r2, #30
   3a96e:	d414      	bmi.n	3a99a <ull_conn_rx+0x196>
	    !conn->llcp_phy.pause_tx &&
   3a970:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3a974:	07d2      	lsls	r2, r2, #31
   3a976:	d410      	bmi.n	3a99a <ull_conn_rx+0x196>
		if (conn->tx_head == conn->tx_data) {
   3a978:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3a97c:	4293      	cmp	r3, r2
   3a97e:	f000 85d8 	beq.w	3b532 <ull_conn_rx+0xd2e>
		} else if (!conn->tx_ctrl) {
   3a982:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3a986:	b95a      	cbnz	r2, 3a9a0 <ull_conn_rx+0x19c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3a988:	791a      	ldrb	r2, [r3, #4]
   3a98a:	f002 0203 	and.w	r2, r2, #3
   3a98e:	2a03      	cmp	r2, #3
   3a990:	f001 800f 	beq.w	3b9b2 <ull_conn_rx+0x11ae>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3a994:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   3a998:	e004      	b.n	3a9a4 <ull_conn_rx+0x1a0>
		if (!conn->tx_ctrl) {
   3a99a:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3a99e:	b39a      	cbz	r2, 3aa08 <ull_conn_rx+0x204>
	tx->next = conn->tx_ctrl_last->next;
   3a9a0:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3a9a4:	681a      	ldr	r2, [r3, #0]
   3a9a6:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3a9a8:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3a9aa:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   3a9ac:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3a9b0:	2b00      	cmp	r3, #0
   3a9b2:	d184      	bne.n	3a8be <ull_conn_rx+0xba>
		conn->tx_data_last = tx;
   3a9b4:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3a9b8:	e781      	b.n	3a8be <ull_conn_rx+0xba>
   3a9ba:	f1a8 0202 	sub.w	r2, r8, #2
   3a9be:	b2d2      	uxtb	r2, r2
   3a9c0:	2a09      	cmp	r2, #9
   3a9c2:	f63f af50 	bhi.w	3a866 <ull_conn_rx+0x62>
   3a9c6:	f240 2e05 	movw	lr, #517	; 0x205
   3a9ca:	fa2e f202 	lsr.w	r2, lr, r2
   3a9ce:	07d2      	lsls	r2, r2, #31
   3a9d0:	f57f af4c 	bpl.w	3a86c <ull_conn_rx+0x68>
	switch (opcode) {
   3a9d4:	f1a8 0203 	sub.w	r2, r8, #3
   3a9d8:	2a08      	cmp	r2, #8
   3a9da:	f200 8132 	bhi.w	3ac42 <ull_conn_rx+0x43e>
   3a9de:	a701      	add	r7, pc, #4	; (adr r7, 3a9e4 <ull_conn_rx+0x1e0>)
   3a9e0:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
   3a9e4:	0003b161 	.word	0x0003b161
   3a9e8:	0003b11d 	.word	0x0003b11d
   3a9ec:	0003b0e1 	.word	0x0003b0e1
   3a9f0:	0003aba7 	.word	0x0003aba7
   3a9f4:	0003ab55 	.word	0x0003ab55
   3a9f8:	0003a925 	.word	0x0003a925
   3a9fc:	0003ad77 	.word	0x0003ad77
   3aa00:	0003adf3 	.word	0x0003adf3
   3aa04:	0003b319 	.word	0x0003b319
			tx->next = conn->tx_head;
   3aa08:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3aa0a:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3aa0e:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3aa12:	e754      	b.n	3a8be <ull_conn_rx+0xba>
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   3aa14:	7f73      	ldrb	r3, [r6, #29]
   3aa16:	2b09      	cmp	r3, #9
   3aa18:	d187      	bne.n	3a92a <ull_conn_rx+0x126>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   3aa1a:	f1b8 0f14 	cmp.w	r8, #20
   3aa1e:	f000 85d4 	beq.w	3b5ca <ull_conn_rx+0xdc6>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   3aa22:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
	if (/* Local idle, and Peer request then complete the Peer procedure
   3aa26:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
	eff_tx_octets = conn->lll.max_tx_octets;
   3aa2a:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
	eff_rx_octets = conn->lll.max_rx_octets;
   3aa2e:	f8b4 b05a 	ldrh.w	fp, [r4, #90]	; 0x5a
	eff_rx_time = conn->lll.max_rx_time;
   3aa32:	f8b4 905e 	ldrh.w	r9, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   3aa36:	f8b4 a05c 	ldrh.w	sl, [r4, #92]	; 0x5c
	eff_tx_octets = conn->lll.max_tx_octets;
   3aa3a:	9101      	str	r1, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   3aa3c:	4293      	cmp	r3, r2
   3aa3e:	f001 8142 	beq.w	3bcc6 <ull_conn_rx+0x14c2>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   3aa42:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	struct node_tx *tx = NULL;
   3aa46:	2300      	movs	r3, #0
	       tx) ||
   3aa48:	f001 0107 	and.w	r1, r1, #7
   3aa4c:	2902      	cmp	r1, #2
   3aa4e:	f000 85dd 	beq.w	3b60c <ull_conn_rx+0xe08>
   3aa52:	f896 801f 	ldrb.w	r8, [r6, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   3aa56:	f1b8 0f15 	cmp.w	r8, #21
   3aa5a:	f43f af32 	beq.w	3a8c2 <ull_conn_rx+0xbe>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   3aa5e:	4618      	mov	r0, r3
   3aa60:	4920      	ldr	r1, [pc, #128]	; (3aae4 <ull_conn_rx+0x2e0>)
   3aa62:	f7f9 fa5f 	bl	33f24 <mem_release>
			if (conn->llcp_length.state ==
   3aa66:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
			conn->common.txn_lock = 0U;
   3aa6a:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			if (conn->llcp_length.state ==
   3aa6e:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   3aa72:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   3aa76:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   3aa78:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
			if (conn->llcp_length.state ==
   3aa7c:	f47f af21 	bne.w	3a8c2 <ull_conn_rx+0xbe>
				return -EBUSY;
   3aa80:	f06f 000f 	mvn.w	r0, #15
   3aa84:	e71e      	b.n	3a8c4 <ull_conn_rx+0xc0>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   3aa86:	7f73      	ldrb	r3, [r6, #29]
   3aa88:	2b01      	cmp	r3, #1
   3aa8a:	f47f af4e 	bne.w	3a92a <ull_conn_rx+0x126>
		conn->procedure_expire = 0U;
   3aa8e:	2200      	movs	r2, #0
   3aa90:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3aa94:	7133      	strb	r3, [r6, #4]
		break;
   3aa96:	e714      	b.n	3a8c2 <ull_conn_rx+0xbe>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   3aa98:	7f75      	ldrb	r5, [r6, #29]
   3aa9a:	2d01      	cmp	r5, #1
   3aa9c:	f47f af45 	bne.w	3a92a <ull_conn_rx+0x126>
	if (conn->common.txn_lock) {
   3aaa0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3aaa4:	0799      	lsls	r1, r3, #30
   3aaa6:	d416      	bmi.n	3aad6 <ull_conn_rx+0x2d2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3aaa8:	480e      	ldr	r0, [pc, #56]	; (3aae4 <ull_conn_rx+0x2e0>)
   3aaaa:	f7f9 fa21 	bl	33ef0 <mem_acquire>
	if (!tx) {
   3aaae:	4601      	mov	r1, r0
   3aab0:	2800      	cmp	r0, #0
   3aab2:	f000 853a 	beq.w	3b52a <ull_conn_rx+0xd26>
	conn->common.txn_lock = 1U;
   3aab6:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3aaba:	f043 0302 	orr.w	r3, r3, #2
   3aabe:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3aac2:	7903      	ldrb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   3aac4:	7145      	strb	r5, [r0, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3aac6:	f043 0303 	orr.w	r3, r3, #3
   3aaca:	7103      	strb	r3, [r0, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   3aacc:	2313      	movs	r3, #19
   3aace:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   3aad0:	4620      	mov	r0, r4
   3aad2:	f7fe fd37 	bl	39544 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3aad6:	7135      	strb	r5, [r6, #4]
	return 0;
   3aad8:	e6f3      	b.n	3a8c2 <ull_conn_rx+0xbe>
   3aada:	bf00      	nop
   3aadc:	20003368 	.word	0x20003368
   3aae0:	00022060 	.word	0x00022060
   3aae4:	200059a8 	.word	0x200059a8
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   3aae8:	7f73      	ldrb	r3, [r6, #29]
   3aaea:	2b03      	cmp	r3, #3
   3aaec:	f47f af1d 	bne.w	3a92a <ull_conn_rx+0x126>
	switch (rej_ext_ind->reject_opcode) {
   3aaf0:	f896 3020 	ldrb.w	r3, [r6, #32]
   3aaf4:	3b03      	subs	r3, #3
   3aaf6:	2b13      	cmp	r3, #19
   3aaf8:	f63f aee1 	bhi.w	3a8be <ull_conn_rx+0xba>
   3aafc:	a201      	add	r2, pc, #4	; (adr r2, 3ab04 <ull_conn_rx+0x300>)
   3aafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   3ab02:	bf00      	nop
   3ab04:	0003b403 	.word	0x0003b403
   3ab08:	0003a8bf 	.word	0x0003a8bf
   3ab0c:	0003a8bf 	.word	0x0003a8bf
   3ab10:	0003a8bf 	.word	0x0003a8bf
   3ab14:	0003a8bf 	.word	0x0003a8bf
   3ab18:	0003a8bf 	.word	0x0003a8bf
   3ab1c:	0003a8bf 	.word	0x0003a8bf
   3ab20:	0003a8bf 	.word	0x0003a8bf
   3ab24:	0003a8bf 	.word	0x0003a8bf
   3ab28:	0003a8bf 	.word	0x0003a8bf
   3ab2c:	0003a8bf 	.word	0x0003a8bf
   3ab30:	0003a8bf 	.word	0x0003a8bf
   3ab34:	0003b389 	.word	0x0003b389
   3ab38:	0003a8bf 	.word	0x0003a8bf
   3ab3c:	0003a8bf 	.word	0x0003a8bf
   3ab40:	0003a8bf 	.word	0x0003a8bf
   3ab44:	0003a8bf 	.word	0x0003a8bf
   3ab48:	0003b34d 	.word	0x0003b34d
   3ab4c:	0003a8bf 	.word	0x0003a8bf
   3ab50:	0003b441 	.word	0x0003b441
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   3ab54:	7f73      	ldrb	r3, [r6, #29]
   3ab56:	2b02      	cmp	r3, #2
   3ab58:	f47f aee7 	bne.w	3a92a <ull_conn_rx+0x126>
			    conn->llcp_conn_param.req) &&
   3ab5c:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
		} else if ((conn->llcp_conn_param.ack !=
   3ab60:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   3ab64:	f896 3020 	ldrb.w	r3, [r6, #32]
		} else if ((conn->llcp_conn_param.ack !=
   3ab68:	4291      	cmp	r1, r2
   3ab6a:	d002      	beq.n	3ab72 <ull_conn_rx+0x36e>
			    conn->llcp_conn_param.req) &&
   3ab6c:	2b0f      	cmp	r3, #15
   3ab6e:	f000 863c 	beq.w	3b7ea <ull_conn_rx+0xfe6>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   3ab72:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   3ab76:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
   3ab7a:	4291      	cmp	r1, r2
   3ab7c:	d002      	beq.n	3ab84 <ull_conn_rx+0x380>
   3ab7e:	2b14      	cmp	r3, #20
   3ab80:	f000 870d 	beq.w	3b99e <ull_conn_rx+0x119a>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   3ab84:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
   3ab88:	f894 21cd 	ldrb.w	r2, [r4, #461]	; 0x1cd
   3ab8c:	428a      	cmp	r2, r1
   3ab8e:	d002      	beq.n	3ab96 <ull_conn_rx+0x392>
   3ab90:	2b16      	cmp	r3, #22
   3ab92:	f000 8780 	beq.w	3ba96 <ull_conn_rx+0x1292>
			switch (llctrl->unknown_rsp.type) {
   3ab96:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3ab98:	bf04      	itt	eq
   3ab9a:	2301      	moveq	r3, #1
   3ab9c:	7133      	strbeq	r3, [r6, #4]
		conn->procedure_expire = 0U;
   3ab9e:	2300      	movs	r3, #0
   3aba0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		break;
   3aba4:	e68d      	b.n	3a8c2 <ull_conn_rx+0xbe>
		if ((conn->llcp_req == conn->llcp_ack) ||
   3aba6:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3abaa:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3abae:	429a      	cmp	r2, r3
   3abb0:	f43f aebb 	beq.w	3a92a <ull_conn_rx+0x126>
   3abb4:	f894 20f2 	ldrb.w	r2, [r4, #242]	; 0xf2
   3abb8:	2a03      	cmp	r2, #3
   3abba:	f47f aeb6 	bne.w	3a92a <ull_conn_rx+0x126>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   3abbe:	7f72      	ldrb	r2, [r6, #29]
   3abc0:	2a01      	cmp	r2, #1
   3abc2:	f47f aeb2 	bne.w	3a92a <ull_conn_rx+0x126>
		if (conn->lll.role) {
   3abc6:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3abca:	2a00      	cmp	r2, #0
   3abcc:	f2c0 8748 	blt.w	3ba60 <ull_conn_rx+0x125c>
			conn->llcp_enc.pause_rx = 0U;
   3abd0:	f894 0176 	ldrb.w	r0, [r4, #374]	; 0x176
			conn->llcp_ack = conn->llcp_req;
   3abd4:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
			conn->procedure_expire = 0U;
   3abd8:	2200      	movs	r2, #0
			conn->llcp_enc.pause_rx = 0U;
   3abda:	f020 0003 	bic.w	r0, r0, #3
   3abde:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
			conn->procedure_expire = 0U;
   3abe2:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		if (conn->llcp_enc.refresh) {
   3abe6:	0745      	lsls	r5, r0, #29
   3abe8:	f57f ae6b 	bpl.w	3a8c2 <ull_conn_rx+0xbe>
			conn->llcp_enc.refresh = 0U;
   3abec:	f36f 0082 	bfc	r0, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   3abf0:	2319      	movs	r3, #25
			conn->llcp_enc.refresh = 0U;
   3abf2:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   3abf6:	7133      	strb	r3, [r6, #4]
   3abf8:	e663      	b.n	3a8c2 <ull_conn_rx+0xbe>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   3abfa:	7f73      	ldrb	r3, [r6, #29]
   3abfc:	2b18      	cmp	r3, #24
   3abfe:	f47f ae94 	bne.w	3a92a <ull_conn_rx+0x126>
	return conn_upd_curr && (conn_upd_curr != conn);
   3ac02:	49d1      	ldr	r1, [pc, #836]	; (3af48 <ull_conn_rx+0x744>)
   3ac04:	680b      	ldr	r3, [r1, #0]
   3ac06:	2b00      	cmp	r3, #0
   3ac08:	f000 84b6 	beq.w	3b578 <ull_conn_rx+0xd74>
   3ac0c:	429c      	cmp	r4, r3
   3ac0e:	f000 84b3 	beq.w	3b578 <ull_conn_rx+0xd74>
			nack = reject_ext_ind_send(conn, *rx,
   3ac12:	2320      	movs	r3, #32
   3ac14:	220f      	movs	r2, #15
				nack = reject_ext_ind_send(conn, *rx,
   3ac16:	4631      	mov	r1, r6
   3ac18:	4620      	mov	r0, r4
}
   3ac1a:	b005      	add	sp, #20
   3ac1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   3ac20:	f7fe be98 	b.w	39954 <reject_ext_ind_send>
	       (conn->lll.role &&
   3ac24:	2a00      	cmp	r2, #0
   3ac26:	f000 843e 	beq.w	3b4a6 <ull_conn_rx+0xca2>
   3ac2a:	f1b8 0f03 	cmp.w	r8, #3
   3ac2e:	f200 846d 	bhi.w	3b50c <ull_conn_rx+0xd08>
   3ac32:	f1b8 0f01 	cmp.w	r8, #1
   3ac36:	f67f ae4a 	bls.w	3a8ce <ull_conn_rx+0xca>
	switch (opcode) {
   3ac3a:	f1b8 0f03 	cmp.w	r8, #3
   3ac3e:	f000 828f 	beq.w	3b160 <ull_conn_rx+0x95c>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   3ac42:	7f73      	ldrb	r3, [r6, #29]
   3ac44:	2b02      	cmp	r3, #2
   3ac46:	f47f ae70 	bne.w	3a92a <ull_conn_rx+0x126>
	conn->llcp_terminate.reason_final =
   3ac4a:	f896 2020 	ldrb.w	r2, [r6, #32]
   3ac4e:	f884 2153 	strb.w	r2, [r4, #339]	; 0x153
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3ac52:	2301      	movs	r3, #1
   3ac54:	7133      	strb	r3, [r6, #4]
}
   3ac56:	e634      	b.n	3a8c2 <ull_conn_rx+0xbe>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   3ac58:	7f73      	ldrb	r3, [r6, #29]
   3ac5a:	2b03      	cmp	r3, #3
   3ac5c:	f47f ae65 	bne.w	3a92a <ull_conn_rx+0x126>
		if (!conn->lll.role) {
   3ac60:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3ac64:	2b00      	cmp	r3, #0
   3ac66:	f2c0 8526 	blt.w	3b6b6 <ull_conn_rx+0xeb2>
			if ((conn->llcp_phy.ack !=
   3ac6a:	f894 21cd 	ldrb.w	r2, [r4, #461]	; 0x1cd
			     conn->llcp_phy.req) &&
   3ac6e:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
			if ((conn->llcp_phy.ack !=
   3ac72:	428a      	cmp	r2, r1
   3ac74:	d007      	beq.n	3ac86 <ull_conn_rx+0x482>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   3ac76:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
   3ac7a:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
   3ac7e:	3b01      	subs	r3, #1
   3ac80:	2b02      	cmp	r3, #2
   3ac82:	f240 86ea 	bls.w	3ba5a <ull_conn_rx+0x1256>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   3ac86:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3ac8a:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
   3ac8e:	1a1b      	subs	r3, r3, r0
   3ac90:	f003 0303 	and.w	r3, r3, #3
   3ac94:	2b02      	cmp	r3, #2
   3ac96:	f000 85ef 	beq.w	3b878 <ull_conn_rx+0x1074>
				     LLCP_ENCRYPTION)) ||
   3ac9a:	f894 0194 	ldrb.w	r0, [r4, #404]	; 0x194
   3ac9e:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   3aca2:	4298      	cmp	r0, r3
   3aca4:	f000 8694 	beq.w	3b9d0 <ull_conn_rx+0x11cc>
				nack = reject_ext_ind_send(conn, *rx,
   3aca8:	232a      	movs	r3, #42	; 0x2a
   3acaa:	2216      	movs	r2, #22
   3acac:	e7b3      	b.n	3ac16 <ull_conn_rx+0x412>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   3acae:	7f75      	ldrb	r5, [r6, #29]
   3acb0:	2d06      	cmp	r5, #6
   3acb2:	f47f ae3a 	bne.w	3a92a <ull_conn_rx+0x126>
	if (!conn->llcp_version.tx) {
   3acb6:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   3acba:	07df      	lsls	r7, r3, #31
   3acbc:	f140 85e3 	bpl.w	3b886 <ull_conn_rx+0x1082>
	} else if (!conn->llcp_version.rx) {
   3acc0:	f013 0302 	ands.w	r3, r3, #2
   3acc4:	f47f adfb 	bne.w	3a8be <ull_conn_rx+0xba>
		conn->llcp_version.ack = conn->llcp_version.req;
   3acc8:	f894 2148 	ldrb.w	r2, [r4, #328]	; 0x148
   3accc:	f884 2149 	strb.w	r2, [r4, #329]	; 0x149
		conn->procedure_expire = 0U;
   3acd0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_version.version_number = v->version_number;
   3acd4:	f896 2020 	ldrb.w	r2, [r6, #32]
	conn->llcp_version.rx = 1U;
   3acd8:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
	conn->llcp_version.version_number = v->version_number;
   3acdc:	f884 214b 	strb.w	r2, [r4, #331]	; 0x14b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   3ace0:	f8d6 2021 	ldr.w	r2, [r6, #33]	; 0x21
   3ace4:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
	conn->llcp_version.rx = 1U;
   3ace8:	f043 0302 	orr.w	r3, r3, #2
   3acec:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
	return 0;
   3acf0:	e5e7      	b.n	3a8c2 <ull_conn_rx+0xbe>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   3acf2:	7f73      	ldrb	r3, [r6, #29]
   3acf4:	2b02      	cmp	r3, #2
   3acf6:	f47f ae18 	bne.w	3a92a <ull_conn_rx+0x126>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   3acfa:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3acfe:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3ad02:	429a      	cmp	r2, r3
   3ad04:	d004      	beq.n	3ad10 <ull_conn_rx+0x50c>
   3ad06:	f894 20f2 	ldrb.w	r2, [r4, #242]	; 0xf2
   3ad0a:	2a03      	cmp	r2, #3
   3ad0c:	f000 86b2 	beq.w	3ba74 <ull_conn_rx+0x1270>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   3ad10:	f894 21cc 	ldrb.w	r2, [r4, #460]	; 0x1cc
   3ad14:	f894 31cd 	ldrb.w	r3, [r4, #461]	; 0x1cd
   3ad18:	4293      	cmp	r3, r2
   3ad1a:	f000 854f 	beq.w	3b7bc <ull_conn_rx+0xfb8>
		rej_ext_ind->error_code = rej_ind->error_code;
   3ad1e:	f896 1020 	ldrb.w	r1, [r6, #32]
   3ad22:	f886 1021 	strb.w	r1, [r6, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   3ad26:	2923      	cmp	r1, #35	; 0x23
   3ad28:	d012      	beq.n	3ad50 <ull_conn_rx+0x54c>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3ad2a:	f884 21cd 	strb.w	r2, [r4, #461]	; 0x1cd
		conn->llcp_phy.pause_tx = 0U;
   3ad2e:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3ad32:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   3ad36:	f36f 0200 	bfc	r2, #0, #1
   3ad3a:	f884 21cf 	strb.w	r2, [r4, #463]	; 0x1cf
		conn->procedure_expire = 0U;
   3ad3e:	2200      	movs	r2, #0
   3ad40:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3ad44:	f3c3 0202 	ubfx	r2, r3, #0, #3
   3ad48:	f362 1306 	bfi	r3, r2, #4, #3
   3ad4c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   3ad50:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   3ad54:	0758      	lsls	r0, r3, #29
   3ad56:	f57f adb2 	bpl.w	3a8be <ull_conn_rx+0xba>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3ad5a:	231c      	movs	r3, #28
   3ad5c:	7133      	strb	r3, [r6, #4]
	p->status = rej_ext_ind->error_code;
   3ad5e:	7731      	strb	r1, [r6, #28]
	p->tx = conn->lll.phy_tx;
   3ad60:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   3ad64:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3ad68:	7773      	strb	r3, [r6, #29]
	p->rx = conn->lll.phy_rx;
   3ad6a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   3ad6e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3ad72:	77b3      	strb	r3, [r6, #30]
	if (err) {
   3ad74:	e5a5      	b.n	3a8c2 <ull_conn_rx+0xbe>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   3ad76:	7f73      	ldrb	r3, [r6, #29]
   3ad78:	2b09      	cmp	r3, #9
   3ad7a:	f47f add6 	bne.w	3a92a <ull_conn_rx+0x126>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   3ad7e:	6a32      	ldr	r2, [r6, #32]
	feat &= LL_FEAT_BIT_MASK;
   3ad80:	4972      	ldr	r1, [pc, #456]	; (3af4c <ull_conn_rx+0x748>)
   3ad82:	6a73      	ldr	r3, [r6, #36]	; 0x24
   3ad84:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   3ad86:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   3ad8a:	400a      	ands	r2, r1
   3ad8c:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
	feat &= LL_FEAT_BIT_MASK;
   3ad90:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   3ad94:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	feat &= LL_FEAT_BIT_MASK;
   3ad98:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   3ad9c:	401a      	ands	r2, r3
   3ad9e:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
   3ada2:	6a75      	ldr	r5, [r6, #36]	; 0x24
   3ada4:	6a37      	ldr	r7, [r6, #32]
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   3ada6:	f7fc f9c1 	bl	3712c <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   3adaa:	f005 03ff 	and.w	r3, r5, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   3adae:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_peer =
   3adb2:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	conn->common.fex_valid = 1U;
   3adb6:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3adba:	f043 0301 	orr.w	r3, r3, #1
   3adbe:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	conn->llcp_feature.ack = conn->llcp_feature.req;
   3adc2:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
   3adc6:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
	feat &= LL_FEAT_BIT_MASK;
   3adca:	4b60      	ldr	r3, [pc, #384]	; (3af4c <ull_conn_rx+0x748>)
   3adcc:	433b      	orrs	r3, r7
	feat_result = feat_to_keep & feat_octet0;
   3adce:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   3add0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   3add4:	f027 07ff 	bic.w	r7, r7, #255	; 0xff
   3add8:	433b      	orrs	r3, r7
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   3adda:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
	feat_result &= 0xFF;
   3adde:	2200      	movs	r2, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   3ade0:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->procedure_expire = 0U;
   3ade4:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	conn->llcp_feature.features_peer =
   3ade8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
}
   3adec:	e569      	b.n	3a8c2 <ull_conn_rx+0xbe>
   3adee:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   3adf2:	2b00      	cmp	r3, #0
   3adf4:	f6bf ad99 	bge.w	3a92a <ull_conn_rx+0x126>
   3adf8:	7f75      	ldrb	r5, [r6, #29]
   3adfa:	2d01      	cmp	r5, #1
   3adfc:	f47f ad95 	bne.w	3a92a <ull_conn_rx+0x126>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3ae00:	4853      	ldr	r0, [pc, #332]	; (3af50 <ull_conn_rx+0x74c>)
   3ae02:	f7f9 f875 	bl	33ef0 <mem_acquire>
		if (!tx) {
   3ae06:	2800      	cmp	r0, #0
   3ae08:	f000 838f 	beq.w	3b52a <ull_conn_rx+0xd26>
	conn->llcp_enc.pause_rx = 1U;
   3ae0c:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   3ae10:	f022 0205 	bic.w	r2, r2, #5
   3ae14:	f042 0205 	orr.w	r2, r2, #5
   3ae18:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
	conn->lll.enc_rx = 0;
   3ae1c:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
   3ae20:	f36f 02c3 	bfc	r2, #3, #1
   3ae24:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3ae28:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3ae2a:	7145      	strb	r5, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3ae2c:	f042 0203 	orr.w	r2, r2, #3
   3ae30:	7102      	strb	r2, [r0, #4]
	    conn->tx_head &&
   3ae32:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   3ae36:	210b      	movs	r1, #11
   3ae38:	71c1      	strb	r1, [r0, #7]
	if (
   3ae3a:	2a00      	cmp	r2, #0
   3ae3c:	f000 838c 	beq.w	3b558 <ull_conn_rx+0xd54>
	    !conn->llcp_enc.pause_tx &&
   3ae40:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   3ae44:	0789      	lsls	r1, r1, #30
   3ae46:	f100 8387 	bmi.w	3b558 <ull_conn_rx+0xd54>
	    !conn->llcp_phy.pause_tx &&
   3ae4a:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3ae4e:	07cb      	lsls	r3, r1, #31
   3ae50:	f100 8382 	bmi.w	3b558 <ull_conn_rx+0xd54>
		if (conn->tx_head == conn->tx_data) {
   3ae54:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3ae58:	428a      	cmp	r2, r1
   3ae5a:	f000 87bf 	beq.w	3bddc <ull_conn_rx+0x15d8>
		} else if (!conn->tx_ctrl) {
   3ae5e:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3ae62:	2900      	cmp	r1, #0
   3ae64:	f000 87e3 	beq.w	3be2e <ull_conn_rx+0x162a>
	tx->next = conn->tx_ctrl_last->next;
   3ae68:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   3ae6c:	6811      	ldr	r1, [r2, #0]
   3ae6e:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3ae70:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   3ae72:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   3ae74:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3ae78:	2a00      	cmp	r2, #0
   3ae7a:	f47f ad20 	bne.w	3a8be <ull_conn_rx+0xba>
   3ae7e:	e599      	b.n	3a9b4 <ull_conn_rx+0x1b0>
   3ae80:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (conn->lll.role ||
   3ae84:	2b00      	cmp	r3, #0
   3ae86:	f6ff ad50 	blt.w	3a92a <ull_conn_rx+0x126>
   3ae8a:	7f73      	ldrb	r3, [r6, #29]
   3ae8c:	2b18      	cmp	r3, #24
   3ae8e:	f47f ad4c 	bne.w	3a92a <ull_conn_rx+0x126>
		if (!conn->lll.role &&
   3ae92:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   3ae96:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   3ae9a:	429a      	cmp	r2, r3
   3ae9c:	f43f ad0f 	beq.w	3a8be <ull_conn_rx+0xba>
		    (conn->llcp_conn_param.state ==
   3aea0:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		     conn->llcp_conn_param.ack) &&
   3aea4:	f003 030f 	and.w	r3, r3, #15
   3aea8:	2b04      	cmp	r3, #4
   3aeaa:	f47f ad08 	bne.w	3a8be <ull_conn_rx+0xba>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   3aeae:	6a37      	ldr	r7, [r6, #32]
   3aeb0:	6a75      	ldr	r5, [r6, #36]	; 0x24
				cpr->preferred_periodicity;
   3aeb2:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3aeb6:	b2bb      	uxth	r3, r7
   3aeb8:	2b05      	cmp	r3, #5
   3aeba:	f240 85ca 	bls.w	3ba52 <ull_conn_rx+0x124e>
   3aebe:	0c38      	lsrs	r0, r7, #16
   3aec0:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   3aec4:	f200 85c5 	bhi.w	3ba52 <ull_conn_rx+0x124e>
			    (interval_max > 3200) ||
   3aec8:	4283      	cmp	r3, r0
   3aeca:	f200 85c2 	bhi.w	3ba52 <ull_conn_rx+0x124e>
   3aece:	b2ab      	uxth	r3, r5
			    (interval_min > interval_max) ||
   3aed0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   3aed4:	f080 85bd 	bcs.w	3ba52 <ull_conn_rx+0x124e>
   3aed8:	0c29      	lsrs	r1, r5, #16
			    (latency > 499) ||
   3aeda:	f1a1 020a 	sub.w	r2, r1, #10
   3aede:	b292      	uxth	r2, r2
   3aee0:	f640 4e76 	movw	lr, #3190	; 0xc76
   3aee4:	4572      	cmp	r2, lr
   3aee6:	f200 85b4 	bhi.w	3ba52 <ull_conn_rx+0x124e>
			     ((latency + 1) * interval_max)) ||
   3aeea:	3301      	adds	r3, #1
   3aeec:	b29b      	uxth	r3, r3
   3aeee:	fb00 f303 	mul.w	r3, r0, r3
			    (timeout < 10) || (timeout > 3200) ||
   3aef2:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   3aef6:	f080 85ac 	bcs.w	3ba52 <ull_conn_rx+0x124e>
			     ((latency + 1) * interval_max)) ||
   3aefa:	4584      	cmp	ip, r0
   3aefc:	f200 85a9 	bhi.w	3ba52 <ull_conn_rx+0x124e>
			conn->llcp_conn_param.interval_min = interval_min;
   3af00:	e9c4 7566 	strd	r7, r5, [r4, #408]	; 0x198
			conn->procedure_expire = 0U;
   3af04:	2300      	movs	r3, #0
			conn->llcp_conn_param.preferred_periodicity =
   3af06:	f884 c1a0 	strb.w	ip, [r4, #416]	; 0x1a0
			conn->procedure_expire = 0U;
   3af0a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   3af0e:	f8d6 2029 	ldr.w	r2, [r6, #41]	; 0x29
   3af12:	f8d6 302d 	ldr.w	r3, [r6, #45]	; 0x2d
   3af16:	f8d6 1031 	ldr.w	r1, [r6, #49]	; 0x31
			conn->llcp_conn_param.reference_conn_event_count =
   3af1a:	f8c4 11aa 	str.w	r1, [r4, #426]	; 0x1aa
   3af1e:	f8c4 21a2 	str.w	r2, [r4, #418]	; 0x1a2
   3af22:	f8c4 31a6 	str.w	r3, [r4, #422]	; 0x1a6
				sys_le16_to_cpu(cpr->offset5);
   3af26:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
   3af2a:	f896 1036 	ldrb.w	r1, [r6, #54]	; 0x36
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   3af2e:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset5);
   3af32:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset5 =
   3af36:	f8a4 31ae 	strh.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   3af3a:	2301      	movs	r3, #1
   3af3c:	f363 0203 	bfi	r2, r3, #0, #4
   3af40:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3af44:	e4bb      	b.n	3a8be <ull_conn_rx+0xba>
   3af46:	bf00      	nop
   3af48:	200058c4 	.word	0x200058c4
   3af4c:	087830d0 	.word	0x087830d0
   3af50:	200059a8 	.word	0x200059a8
   3af54:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (conn->lll.role ||
   3af58:	2b00      	cmp	r3, #0
   3af5a:	f6ff ace6 	blt.w	3a92a <ull_conn_rx+0x126>
   3af5e:	7f73      	ldrb	r3, [r6, #29]
   3af60:	2b09      	cmp	r3, #9
   3af62:	f47f ace2 	bne.w	3a92a <ull_conn_rx+0x126>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   3af66:	4662      	mov	r2, ip
   3af68:	4631      	mov	r1, r6
   3af6a:	4620      	mov	r0, r4
}
   3af6c:	b005      	add	sp, #20
   3af6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   3af72:	f7fe bc7b 	b.w	3986c <feature_rsp_send>
   3af76:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
#if defined(CONFIG_BT_CENTRAL)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   3af7a:	2b00      	cmp	r3, #0
   3af7c:	f6ff acd5 	blt.w	3a92a <ull_conn_rx+0x126>
   3af80:	7f73      	ldrb	r3, [r6, #29]
   3af82:	2b03      	cmp	r3, #3
   3af84:	f47f acd1 	bne.w	3a92a <ull_conn_rx+0x126>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   3af88:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
					 conn->lll.phy_rx))) {
   3af8c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
			if (!(p->phys & (conn->lll.phy_tx |
   3af90:	f896 2020 	ldrb.w	r2, [r6, #32]
   3af94:	430b      	orrs	r3, r1
   3af96:	f003 0307 	and.w	r3, r3, #7
   3af9a:	4213      	tst	r3, r2
   3af9c:	f43f ac91 	beq.w	3a8c2 <ull_conn_rx+0xbe>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   3afa0:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3afa4:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3afa8:	1a9b      	subs	r3, r3, r2
   3afaa:	f003 0303 	and.w	r3, r3, #3
   3afae:	2b02      	cmp	r3, #2
   3afb0:	f43f ac87 	beq.w	3a8c2 <ull_conn_rx+0xbe>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   3afb4:	f104 00f5 	add.w	r0, r4, #245	; 0xf5
   3afb8:	f003 fe02 	bl	3ebc0 <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   3afbc:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
			conn->llcp.chan_map.initiate = 1U;
   3afc0:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_CHAN_MAP;
   3afc4:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
   3afc6:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   3afc8:	f884 10f2 	strb.w	r1, [r4, #242]	; 0xf2
			conn->llcp_ack -= 2U;
   3afcc:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3afd0:	682a      	ldr	r2, [r5, #0]
			conn->llcp.chan_map.initiate = 1U;
   3afd2:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3afd6:	2101      	movs	r1, #1
			conn->llcp.chan_map.initiate = 1U;
   3afd8:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3afdc:	7111      	strb	r1, [r2, #4]

		break;
   3afde:	e470      	b.n	3a8c2 <ull_conn_rx+0xbe>
   3afe0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   3afe4:	2b00      	cmp	r3, #0
   3afe6:	f6bf aca0 	bge.w	3a92a <ull_conn_rx+0x126>
   3afea:	7f73      	ldrb	r3, [r6, #29]
   3afec:	2b05      	cmp	r3, #5
   3afee:	f47f ac9c 	bne.w	3a92a <ull_conn_rx+0x126>
	if (!((ind->c_to_p_phy | ind->p_to_c_phy) & 0x07)) {
   3aff2:	f896 2020 	ldrb.w	r2, [r6, #32]
   3aff6:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3affa:	4313      	orrs	r3, r2
   3affc:	f013 0307 	ands.w	r3, r3, #7
   3b000:	f040 859d 	bne.w	3bb3e <ull_conn_rx+0x133a>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   3b004:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
   3b008:	f894 21cd 	ldrb.w	r2, [r4, #461]	; 0x1cd
   3b00c:	428a      	cmp	r2, r1
   3b00e:	f43f ac56 	beq.w	3a8be <ull_conn_rx+0xba>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   3b012:	f894 21ce 	ldrb.w	r2, [r4, #462]	; 0x1ce
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   3b016:	f002 0203 	and.w	r2, r2, #3
   3b01a:	2a02      	cmp	r2, #2
   3b01c:	f47f ac4f 	bne.w	3a8be <ull_conn_rx+0xba>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3b020:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3b024:	f884 11cd 	strb.w	r1, [r4, #461]	; 0x1cd
		conn->llcp_phy.pause_tx = 0U;
   3b028:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
		conn->procedure_expire = 0U;
   3b02c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_phy.pause_tx = 0U;
   3b030:	f363 0100 	bfi	r1, r3, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3b034:	4610      	mov	r0, r2
   3b036:	f362 1006 	bfi	r0, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   3b03a:	f884 11cf 	strb.w	r1, [r4, #463]	; 0x1cf
		if (!conn->llcp_phy.cmd) {
   3b03e:	0749      	lsls	r1, r1, #29
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3b040:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
   3b044:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
   3b048:	f57f ac47 	bpl.w	3a8da <ull_conn_rx+0xd6>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3b04c:	6829      	ldr	r1, [r5, #0]
   3b04e:	201c      	movs	r0, #28
   3b050:	7108      	strb	r0, [r1, #4]
		p->status = 0U;
   3b052:	7733      	strb	r3, [r6, #28]
		p->tx = conn->lll.phy_tx;
   3b054:	7772      	strb	r2, [r6, #29]
		p->rx = conn->lll.phy_rx;
   3b056:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   3b05a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3b05e:	77b3      	strb	r3, [r6, #30]
		if (err) {
   3b060:	e42f      	b.n	3a8c2 <ull_conn_rx+0xbe>
   3b062:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (conn->lll.role ||
   3b066:	2b00      	cmp	r3, #0
   3b068:	f6ff ac5f 	blt.w	3a92a <ull_conn_rx+0x126>
   3b06c:	7f73      	ldrb	r3, [r6, #29]
   3b06e:	2b03      	cmp	r3, #3
   3b070:	f47f ac5b 	bne.w	3a92a <ull_conn_rx+0x126>
		if (!conn->lll.role &&
   3b074:	f894 21cd 	ldrb.w	r2, [r4, #461]	; 0x1cd
   3b078:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
   3b07c:	429a      	cmp	r2, r3
   3b07e:	f43f ac1e 	beq.w	3a8be <ull_conn_rx+0xba>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   3b082:	f894 21ce 	ldrb.w	r2, [r4, #462]	; 0x1ce
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   3b086:	f002 0303 	and.w	r3, r2, #3
   3b08a:	2b02      	cmp	r3, #2
   3b08c:	f47f ac17 	bne.w	3a8be <ull_conn_rx+0xba>
			conn->llcp_phy.tx &= p->rx_phys;
   3b090:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3b094:	f3c2 0182 	ubfx	r1, r2, #2, #3
   3b098:	400b      	ands	r3, r1
			conn->llcp_phy.rx &= p->tx_phys;
   3b09a:	f896 1020 	ldrb.w	r1, [r6, #32]
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   3b09e:	009b      	lsls	r3, r3, #2
   3b0a0:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   3b0a4:	ea01 1252 	and.w	r2, r1, r2, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   3b0a8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3b0ac:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   3b0b0:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3b0b4:	d001      	beq.n	3b0ba <ull_conn_rx+0x8b6>
   3b0b6:	2b1f      	cmp	r3, #31
   3b0b8:	d805      	bhi.n	3b0c6 <ull_conn_rx+0x8c2>
				conn->llcp_phy.tx = 0;
   3b0ba:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
   3b0be:	f003 0303 	and.w	r3, r3, #3
   3b0c2:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
			conn->llcp_phy.pause_tx = 1U;
   3b0c6:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
			conn->procedure_expire = 0U;
   3b0ca:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   3b0cc:	f043 0301 	orr.w	r3, r3, #1
   3b0d0:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
			conn->procedure_expire = 0U;
   3b0d4:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b0d8:	f7ff bbf1 	b.w	3a8be <ull_conn_rx+0xba>
   3b0dc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   3b0e0:	2b00      	cmp	r3, #0
   3b0e2:	f6ff ac22 	blt.w	3a92a <ull_conn_rx+0x126>
   3b0e6:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   3b0ea:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   3b0ee:	429a      	cmp	r2, r3
   3b0f0:	f43f ac1b 	beq.w	3a92a <ull_conn_rx+0x126>
   3b0f4:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3b0f8:	2b03      	cmp	r3, #3
   3b0fa:	f47f ac16 	bne.w	3a92a <ull_conn_rx+0x126>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   3b0fe:	7f73      	ldrb	r3, [r6, #29]
   3b100:	2b01      	cmp	r3, #1
   3b102:	f47f ac12 	bne.w	3a92a <ull_conn_rx+0x126>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3b106:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
   3b10a:	f36f 0201 	bfc	r2, #0, #2
   3b10e:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b112:	7133      	strb	r3, [r6, #4]
		break;
   3b114:	f7ff bbd5 	b.w	3a8c2 <ull_conn_rx+0xbe>
   3b118:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (conn->lll.role ||
   3b11c:	2b00      	cmp	r3, #0
   3b11e:	f6ff ac04 	blt.w	3a92a <ull_conn_rx+0x126>
   3b122:	7f73      	ldrb	r3, [r6, #29]
   3b124:	2b0d      	cmp	r3, #13
   3b126:	f47f ac00 	bne.w	3a92a <ull_conn_rx+0x126>
		memcpy(&conn->llcp.encryption.skd[8],
   3b12a:	2208      	movs	r2, #8
   3b12c:	f106 0120 	add.w	r1, r6, #32
   3b130:	f504 7085 	add.w	r0, r4, #266	; 0x10a
   3b134:	f010 fe17 	bl	4bd66 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
   3b138:	2204      	movs	r2, #4
   3b13a:	f106 0128 	add.w	r1, r6, #40	; 0x28
   3b13e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   3b142:	f010 fe10 	bl	4bd66 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   3b146:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b14a:	682a      	ldr	r2, [r5, #0]
		conn->llcp_enc.pause_rx = 1U;
   3b14c:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b150:	2101      	movs	r1, #1
		conn->llcp_enc.pause_rx = 1U;
   3b152:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b156:	7111      	strb	r1, [r2, #4]
		break;
   3b158:	f7ff bbb3 	b.w	3a8c2 <ull_conn_rx+0xbe>
   3b15c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   3b160:	2b00      	cmp	r3, #0
   3b162:	f6bf abe2 	bge.w	3a92a <ull_conn_rx+0x126>
   3b166:	7f73      	ldrb	r3, [r6, #29]
   3b168:	2b17      	cmp	r3, #23
   3b16a:	f47f abde 	bne.w	3a92a <ull_conn_rx+0x126>
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   3b16e:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3b172:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3b176:	1a9b      	subs	r3, r3, r2
   3b178:	f003 0303 	and.w	r3, r3, #3
   3b17c:	2b02      	cmp	r3, #2
   3b17e:	f000 8585 	beq.w	3bc8c <ull_conn_rx+0x1488>
		memcpy(&conn->llcp_enc.rand[0],
   3b182:	2208      	movs	r2, #8
   3b184:	f106 0120 	add.w	r1, r6, #32
   3b188:	f204 1079 	addw	r0, r4, #377	; 0x179
   3b18c:	f010 fdeb 	bl	4bd66 <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   3b190:	8d33      	ldrh	r3, [r6, #40]	; 0x28
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   3b192:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   3b196:	f8a4 3177 	strh.w	r3, [r4, #375]	; 0x177
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b19a:	6829      	ldr	r1, [r5, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   3b19c:	2301      	movs	r3, #1
   3b19e:	f363 0201 	bfi	r2, r3, #0, #2
   3b1a2:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b1a6:	710b      	strb	r3, [r1, #4]
		conn->llcp_ack -= 2U;
   3b1a8:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
		conn->llcp_type = LLCP_ENCRYPTION;
   3b1ac:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
   3b1ae:	3b02      	subs	r3, #2
   3b1b0:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
		memcpy(&conn->llcp.encryption.skd[0],
   3b1b4:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
   3b1b6:	f884 10f2 	strb.w	r1, [r4, #242]	; 0xf2
		memcpy(&conn->llcp.encryption.skd[0],
   3b1ba:	f504 7081 	add.w	r0, r4, #258	; 0x102
   3b1be:	f106 012a 	add.w	r1, r6, #42	; 0x2a
   3b1c2:	f010 fdd0 	bl	4bd66 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   3b1c6:	2204      	movs	r2, #4
   3b1c8:	f106 0132 	add.w	r1, r6, #50	; 0x32
   3b1cc:	f104 0094 	add.w	r0, r4, #148	; 0x94
   3b1d0:	f010 fdc9 	bl	4bd66 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   3b1d4:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
		conn->procedure_expire = conn->procedure_reload;
   3b1d8:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   3b1dc:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->llcp_enc.pause_rx = 1U;
   3b1e0:	f043 0301 	orr.w	r3, r3, #1
   3b1e4:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
		break;
   3b1e8:	f7ff bb6b 	b.w	3a8c2 <ull_conn_rx+0xbe>
   3b1ec:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   3b1f0:	2b00      	cmp	r3, #0
   3b1f2:	f6bf ab9a 	bge.w	3a92a <ull_conn_rx+0x126>
   3b1f6:	7f73      	ldrb	r3, [r6, #29]
   3b1f8:	2b0c      	cmp	r3, #12
   3b1fa:	f47f ab96 	bne.w	3a92a <ull_conn_rx+0x126>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   3b1fe:	f8b6 1029 	ldrh.w	r1, [r6, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   3b202:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3b204:	1acb      	subs	r3, r1, r3
   3b206:	041b      	lsls	r3, r3, #16
   3b208:	f100 8497 	bmi.w	3bb3a <ull_conn_rx+0x1336>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3b20c:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3b210:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3b214:	1a9b      	subs	r3, r3, r2
   3b216:	f003 0303 	and.w	r3, r3, #3
   3b21a:	2b02      	cmp	r3, #2
   3b21c:	f000 8486 	beq.w	3bb2c <ull_conn_rx+0x1328>
	if (!conn_upd_curr) {
   3b220:	4bd2      	ldr	r3, [pc, #840]	; (3b56c <ull_conn_rx+0xd68>)
   3b222:	681a      	ldr	r2, [r3, #0]
   3b224:	2a00      	cmp	r2, #0
   3b226:	f000 8526 	beq.w	3bc76 <ull_conn_rx+0x1472>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   3b22a:	f896 3020 	ldrb.w	r3, [r6, #32]
   3b22e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   3b232:	f8b6 3021 	ldrh.w	r3, [r6, #33]	; 0x21
   3b236:	f240 42e2 	movw	r2, #1250	; 0x4e2
   3b23a:	fb02 f303 	mul.w	r3, r2, r3
	conn->llcp_cu.win_offset_us =
   3b23e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   3b242:	f8d6 3023 	ldr.w	r3, [r6, #35]	; 0x23
	conn->llcp_cu.interval =
   3b246:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   3b24a:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   3b24e:	f896 2027 	ldrb.w	r2, [r6, #39]	; 0x27
   3b252:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   3b256:	f8a4 10f4 	strh.w	r1, [r4, #244]	; 0xf4
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   3b25a:	f023 030f 	bic.w	r3, r3, #15
   3b25e:	f043 0308 	orr.w	r3, r3, #8
   3b262:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
	conn->llcp_cu.ack--;
   3b266:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   3b26a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp_cu.timeout =
   3b26e:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
	conn->llcp_cu.ack--;
   3b272:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   3b274:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
	conn->llcp_cu.ack--;
   3b278:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	link->mem = conn->llcp_rx;
   3b27c:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   3b27e:	682a      	ldr	r2, [r5, #0]
   3b280:	6017      	str	r7, [r2, #0]
	conn->llcp_rx = *rx;
   3b282:	682a      	ldr	r2, [r5, #0]
   3b284:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
	*rx = NULL;
   3b288:	2300      	movs	r3, #0
   3b28a:	602b      	str	r3, [r5, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   3b28c:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   3b290:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   3b294:	4293      	cmp	r3, r2
   3b296:	f43f ac82 	beq.w	3ab9e <ull_conn_rx+0x39a>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
   3b29a:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   3b29e:	f003 030e 	and.w	r3, r3, #14
   3b2a2:	2b04      	cmp	r3, #4
   3b2a4:	f47f ac7b 	bne.w	3ab9e <ull_conn_rx+0x39a>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3b2a8:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
		if (err) {
   3b2ac:	e477      	b.n	3ab9e <ull_conn_rx+0x39a>
   3b2ae:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   3b2b2:	2b00      	cmp	r3, #0
   3b2b4:	f6bf ab39 	bge.w	3a92a <ull_conn_rx+0x126>
   3b2b8:	7f73      	ldrb	r3, [r6, #29]
   3b2ba:	2b08      	cmp	r3, #8
   3b2bc:	f47f ab35 	bne.w	3a92a <ull_conn_rx+0x126>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   3b2c0:	f8b6 5025 	ldrh.w	r5, [r6, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   3b2c4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3b2c6:	1aeb      	subs	r3, r5, r3
   3b2c8:	041f      	lsls	r7, r3, #16
   3b2ca:	f100 8436 	bmi.w	3bb3a <ull_conn_rx+0x1336>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3b2ce:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3b2d2:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3b2d6:	1a9b      	subs	r3, r3, r2
   3b2d8:	f003 0303 	and.w	r3, r3, #3
   3b2dc:	2b02      	cmp	r3, #2
   3b2de:	f000 8425 	beq.w	3bb2c <ull_conn_rx+0x1328>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   3b2e2:	2205      	movs	r2, #5
   3b2e4:	f106 0120 	add.w	r1, r6, #32
   3b2e8:	f104 00f5 	add.w	r0, r4, #245	; 0xf5
   3b2ec:	f010 fd3b 	bl	4bd66 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   3b2f0:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
	conn->llcp_ack -= 2U;
   3b2f4:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
	conn->llcp.chan_map.instant = instant;
   3b2f8:	f8a4 50fa 	strh.w	r5, [r4, #250]	; 0xfa
	conn->llcp.chan_map.initiate = 0U;
   3b2fc:	f36f 0200 	bfc	r2, #0, #1
   3b300:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
	conn->llcp_type = LLCP_CHAN_MAP;
   3b304:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
   3b306:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b308:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   3b30a:	f884 10f2 	strb.w	r1, [r4, #242]	; 0xf2
	conn->llcp_ack -= 2U;
   3b30e:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b312:	7132      	strb	r2, [r6, #4]
		if (err) {
   3b314:	f7ff bad5 	b.w	3a8c2 <ull_conn_rx+0xbe>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   3b318:	7f75      	ldrb	r5, [r6, #29]
   3b31a:	2d01      	cmp	r5, #1
   3b31c:	f47f ab05 	bne.w	3a92a <ull_conn_rx+0x126>
	} else if (!conn->lll.role) {
   3b320:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3b324:	2b00      	cmp	r3, #0
   3b326:	f2c0 80f8 	blt.w	3b51a <ull_conn_rx+0xd16>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3b32a:	4891      	ldr	r0, [pc, #580]	; (3b570 <ull_conn_rx+0xd6c>)
   3b32c:	f7f8 fde0 	bl	33ef0 <mem_acquire>
		if (!tx) {
   3b330:	2800      	cmp	r0, #0
   3b332:	f000 80fa 	beq.w	3b52a <ull_conn_rx+0xd26>
	conn->llcp_enc.pause_rx = 1U;
   3b336:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   3b33a:	f042 0201 	orr.w	r2, r2, #1
   3b33e:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
	conn->lll.enc_rx = 0;
   3b342:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
   3b346:	f022 0218 	bic.w	r2, r2, #24
   3b34a:	e56b      	b.n	3ae24 <ull_conn_rx+0x620>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   3b34c:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
   3b350:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   3b354:	429a      	cmp	r2, r3
   3b356:	f43f aab2 	beq.w	3a8be <ull_conn_rx+0xba>
	conn->procedure_expire = 0U;
   3b35a:	2100      	movs	r1, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3b35c:	2209      	movs	r2, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   3b35e:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
	conn->procedure_expire = 0U;
   3b362:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3b366:	7772      	strb	r2, [r6, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   3b368:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   3b36c:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   3b370:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   3b374:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
   3b378:	84f3      	strh	r3, [r6, #38]	; 0x26
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3b37a:	2415      	movs	r4, #21
   3b37c:	77f4      	strb	r4, [r6, #31]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   3b37e:	8430      	strh	r0, [r6, #32]
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   3b380:	84b1      	strh	r1, [r6, #36]	; 0x24
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   3b382:	8472      	strh	r2, [r6, #34]	; 0x22
	if (err) {
   3b384:	f7ff ba9d 	b.w	3a8c2 <ull_conn_rx+0xbe>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   3b388:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   3b38c:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   3b390:	4293      	cmp	r3, r2
   3b392:	f43f aa94 	beq.w	3a8be <ull_conn_rx+0xba>
	if (!lll->role && (rej_ext_ind->error_code ==
   3b396:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
	return ((uint16_t)src[1] << 8) | src[0];
   3b39a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3b39e:	2900      	cmp	r1, #0
   3b3a0:	f2c0 821c 	blt.w	3b7dc <ull_conn_rx+0xfd8>
   3b3a4:	2b1a      	cmp	r3, #26
   3b3a6:	f000 85b1 	beq.w	3bf0c <ull_conn_rx+0x1708>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   3b3aa:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3b3ae:	f003 010f 	and.w	r1, r3, #15
   3b3b2:	2904      	cmp	r1, #4
   3b3b4:	d106      	bne.n	3b3c4 <ull_conn_rx+0xbc0>
	conn_upd_curr = NULL;
   3b3b6:	496d      	ldr	r1, [pc, #436]	; (3b56c <ull_conn_rx+0xd68>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3b3b8:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
	conn_upd_curr = NULL;
   3b3bc:	2200      	movs	r2, #0
   3b3be:	600a      	str	r2, [r1, #0]
		conn->procedure_expire = 0U;
   3b3c0:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   3b3c4:	06d8      	lsls	r0, r3, #27
   3b3c6:	f57f aa7a 	bpl.w	3a8be <ull_conn_rx+0xba>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3b3ca:	2318      	movs	r3, #24
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3b3cc:	f01c 0f01 	tst.w	ip, #1
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3b3d0:	7133      	strb	r3, [r6, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3b3d2:	f040 8469 	bne.w	3bca8 <ull_conn_rx+0x14a4>
	cu->status = rej_ext_ind->error_code;
   3b3d6:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3b3da:	7733      	strb	r3, [r6, #28]
	cu->interval = lll->interval;
   3b3dc:	f8d4 202a 	ldr.w	r2, [r4, #42]	; 0x2a
   3b3e0:	f8c6 201e 	str.w	r2, [r6, #30]
	cu->timeout = conn->supervision_reload *
   3b3e4:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
		      lll->interval * 125U / 1000;
   3b3e8:	b292      	uxth	r2, r2
	cu->timeout = conn->supervision_reload *
   3b3ea:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   3b3ee:	227d      	movs	r2, #125	; 0x7d
   3b3f0:	fb02 f303 	mul.w	r3, r2, r3
   3b3f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3b3f8:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   3b3fc:	8473      	strh	r3, [r6, #34]	; 0x22
	if (err) {
   3b3fe:	f7ff ba60 	b.w	3a8c2 <ull_conn_rx+0xbe>
		if ((conn->llcp_ack != conn->llcp_req) &&
   3b402:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   3b406:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   3b40a:	4293      	cmp	r3, r2
   3b40c:	f43f aa57 	beq.w	3a8be <ull_conn_rx+0xba>
   3b410:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3b414:	2b03      	cmp	r3, #3
   3b416:	f47f aa52 	bne.w	3a8be <ull_conn_rx+0xba>
	conn->llcp_enc.pause_rx = 0U;
   3b41a:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
	conn->llcp_ack = conn->llcp_req;
   3b41e:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
	conn->llcp_enc.pause_rx = 0U;
   3b422:	f023 0303 	bic.w	r3, r3, #3
	conn->procedure_expire = 0U;
   3b426:	2100      	movs	r1, #0
	conn->llcp_enc.pause_rx = 0U;
   3b428:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
	conn->procedure_expire = 0U;
   3b42c:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   3b430:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3b434:	f886 3020 	strb.w	r3, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   3b438:	220d      	movs	r2, #13
   3b43a:	77f2      	strb	r2, [r6, #31]
	if (err) {
   3b43c:	f7ff ba41 	b.w	3a8c2 <ull_conn_rx+0xbe>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   3b440:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
   3b444:	f894 31cd 	ldrb.w	r3, [r4, #461]	; 0x1cd
   3b448:	428b      	cmp	r3, r1
   3b44a:	f43f aa38 	beq.w	3a8be <ull_conn_rx+0xba>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   3b44e:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   3b452:	2a23      	cmp	r2, #35	; 0x23
   3b454:	d012      	beq.n	3b47c <ull_conn_rx+0xc78>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3b456:	f884 11cd 	strb.w	r1, [r4, #461]	; 0x1cd
		conn->llcp_phy.pause_tx = 0U;
   3b45a:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3b45e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   3b462:	f36f 0100 	bfc	r1, #0, #1
   3b466:	f884 11cf 	strb.w	r1, [r4, #463]	; 0x1cf
		conn->procedure_expire = 0U;
   3b46a:	2100      	movs	r1, #0
   3b46c:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3b470:	f3c3 0102 	ubfx	r1, r3, #0, #3
   3b474:	f361 1306 	bfi	r3, r1, #4, #3
   3b478:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   3b47c:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   3b480:	075d      	lsls	r5, r3, #29
   3b482:	f57f aa1c 	bpl.w	3a8be <ull_conn_rx+0xba>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3b486:	231c      	movs	r3, #28
   3b488:	7133      	strb	r3, [r6, #4]
	p->status = rej_ext_ind->error_code;
   3b48a:	7732      	strb	r2, [r6, #28]
   3b48c:	e468      	b.n	3ad60 <ull_conn_rx+0x55c>
		if (!conn->tx_ctrl) {
   3b48e:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
   3b492:	2b00      	cmp	r3, #0
   3b494:	f47f aa84 	bne.w	3a9a0 <ull_conn_rx+0x19c>
			tx->next = conn->tx_head;
   3b498:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3b49a:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3b49e:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3b4a2:	f7ff ba87 	b.w	3a9b4 <ull_conn_rx+0x1b0>
		((!conn->llcp_enc.refresh &&
   3b4a6:	f1b8 0f07 	cmp.w	r8, #7
   3b4aa:	f43f ab53 	beq.w	3ab54 <ull_conn_rx+0x350>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   3b4ae:	f1b8 0f02 	cmp.w	r8, #2
   3b4b2:	f43f abc6 	beq.w	3ac42 <ull_conn_rx+0x43e>
   3b4b6:	f1a8 0206 	sub.w	r2, r8, #6
   3b4ba:	b2d2      	uxtb	r2, r2
   3b4bc:	2a0b      	cmp	r2, #11
   3b4be:	f63f aa06 	bhi.w	3a8ce <ull_conn_rx+0xca>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   3b4c2:	4f2c      	ldr	r7, [pc, #176]	; (3b574 <ull_conn_rx+0xd70>)
   3b4c4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   3b4c8:	07d2      	lsls	r2, r2, #31
   3b4ca:	f53f aa00 	bmi.w	3a8ce <ull_conn_rx+0xca>
	switch (opcode) {
   3b4ce:	f1a8 0207 	sub.w	r2, r8, #7
   3b4d2:	2a0a      	cmp	r2, #10
   3b4d4:	f63f ab67 	bhi.w	3aba6 <ull_conn_rx+0x3a2>
   3b4d8:	a701      	add	r7, pc, #4	; (adr r7, 3b4e0 <ull_conn_rx+0xcdc>)
   3b4da:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
   3b4de:	bf00      	nop
   3b4e0:	0003ab55 	.word	0x0003ab55
   3b4e4:	0003a925 	.word	0x0003a925
   3b4e8:	0003ad77 	.word	0x0003ad77
   3b4ec:	0003adf3 	.word	0x0003adf3
   3b4f0:	0003b319 	.word	0x0003b319
   3b4f4:	0003acaf 	.word	0x0003acaf
   3b4f8:	0003acf3 	.word	0x0003acf3
   3b4fc:	0003af59 	.word	0x0003af59
   3b500:	0003abfb 	.word	0x0003abfb
   3b504:	0003ae85 	.word	0x0003ae85
   3b508:	0003aae9 	.word	0x0003aae9
   3b50c:	f1b8 0f0b 	cmp.w	r8, #11
   3b510:	d1d1      	bne.n	3b4b6 <ull_conn_rx+0xcb2>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   3b512:	7f73      	ldrb	r3, [r6, #29]
   3b514:	2b01      	cmp	r3, #1
   3b516:	f47f aa08 	bne.w	3a92a <ull_conn_rx+0x126>
		conn->lll.enc_tx = 0;
   3b51a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3b51e:	f36f 1304 	bfc	r3, #4, #1
   3b522:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   3b526:	f7ff b9ca 	b.w	3a8be <ull_conn_rx+0xba>
			return -ENOBUFS;
   3b52a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3b52e:	f7ff b9c9 	b.w	3a8c4 <ull_conn_rx+0xc0>
			conn->tx_data = conn->tx_data->next;
   3b532:	681a      	ldr	r2, [r3, #0]
   3b534:	f8c4 21e0 	str.w	r2, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3b538:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3b53c:	2a00      	cmp	r2, #0
   3b53e:	f47f aa2f 	bne.w	3a9a0 <ull_conn_rx+0x19c>
			tx->next = conn->tx_head->next;
   3b542:	681a      	ldr	r2, [r3, #0]
   3b544:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   3b546:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3b548:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   3b54a:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
	if (!tx->next) {
   3b54e:	2b00      	cmp	r3, #0
   3b550:	f47f a9b5 	bne.w	3a8be <ull_conn_rx+0xba>
   3b554:	f7ff ba2e 	b.w	3a9b4 <ull_conn_rx+0x1b0>
		if (!conn->tx_ctrl) {
   3b558:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3b55c:	2900      	cmp	r1, #0
   3b55e:	f47f ac83 	bne.w	3ae68 <ull_conn_rx+0x664>
			tx->next = conn->tx_head;
   3b562:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3b564:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3b568:	e483      	b.n	3ae72 <ull_conn_rx+0x66e>
   3b56a:	bf00      	nop
   3b56c:	200058c4 	.word	0x200058c4
   3b570:	200059a8 	.word	0x200059a8
   3b574:	000532b4 	.word	0x000532b4
		if (!conn->lll.role) {
   3b578:	f994 7039 	ldrsb.w	r7, [r4, #57]	; 0x39
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   3b57c:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   3b580:	f894 5195 	ldrb.w	r5, [r4, #405]	; 0x195
		if (!conn->lll.role) {
   3b584:	2f00      	cmp	r7, #0
   3b586:	f2c0 81a9 	blt.w	3b8dc <ull_conn_rx+0x10d8>
			if ((conn->llcp_conn_param.req !=
   3b58a:	42aa      	cmp	r2, r5
   3b58c:	d008      	beq.n	3b5a0 <ull_conn_rx+0xd9c>
			    ((conn->llcp_conn_param.state ==
   3b58e:	f894 7196 	ldrb.w	r7, [r4, #406]	; 0x196
					conn->llcp_conn_param.ack) &&
   3b592:	2251      	movs	r2, #81	; 0x51
   3b594:	f007 070f 	and.w	r7, r7, #15
   3b598:	40fa      	lsrs	r2, r7
   3b59a:	07d2      	lsls	r2, r2, #31
   3b59c:	f100 8277 	bmi.w	3ba8e <ull_conn_rx+0x128a>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   3b5a0:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   3b5a4:	f894 70f1 	ldrb.w	r7, [r4, #241]	; 0xf1
   3b5a8:	1bd2      	subs	r2, r2, r7
   3b5aa:	f002 0203 	and.w	r2, r2, #3
   3b5ae:	2a02      	cmp	r2, #2
   3b5b0:	f000 8400 	beq.w	3bdb4 <ull_conn_rx+0x15b0>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   3b5b4:	f894 71cc 	ldrb.w	r7, [r4, #460]	; 0x1cc
   3b5b8:	f894 21cd 	ldrb.w	r2, [r4, #461]	; 0x1cd
   3b5bc:	4297      	cmp	r7, r2
   3b5be:	f000 839d 	beq.w	3bcfc <ull_conn_rx+0x14f8>
				nack = reject_ext_ind_send(conn, *rx,
   3b5c2:	232a      	movs	r3, #42	; 0x2a
   3b5c4:	220f      	movs	r2, #15
   3b5c6:	f7ff bb26 	b.w	3ac16 <ull_conn_rx+0x412>
	if (conn->common.txn_lock) {
   3b5ca:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3b5ce:	079b      	lsls	r3, r3, #30
   3b5d0:	f53f a975 	bmi.w	3a8be <ull_conn_rx+0xba>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3b5d4:	48bc      	ldr	r0, [pc, #752]	; (3b8c8 <ull_conn_rx+0x10c4>)
   3b5d6:	f7f8 fc8b 	bl	33ef0 <mem_acquire>
	if (!tx) {
   3b5da:	4603      	mov	r3, r0
   3b5dc:	2800      	cmp	r0, #0
   3b5de:	d0a4      	beq.n	3b52a <ull_conn_rx+0xd26>
	conn->common.txn_lock = 1U;
   3b5e0:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   3b5e4:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
	eff_tx_octets = conn->lll.max_tx_octets;
   3b5e8:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
	eff_rx_octets = conn->lll.max_rx_octets;
   3b5ec:	f8b4 b05a 	ldrh.w	fp, [r4, #90]	; 0x5a
	eff_rx_time = conn->lll.max_rx_time;
   3b5f0:	f8b4 905e 	ldrh.w	r9, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   3b5f4:	f8b4 a05c 	ldrh.w	sl, [r4, #92]	; 0x5c
	eff_tx_octets = conn->lll.max_tx_octets;
   3b5f8:	9001      	str	r0, [sp, #4]
	conn->common.txn_lock = 1U;
   3b5fa:	f042 0202 	orr.w	r2, r2, #2
   3b5fe:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   3b602:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
	if (/* Local idle, and Peer request then complete the Peer procedure
   3b606:	428a      	cmp	r2, r1
   3b608:	f040 8429 	bne.w	3be5e <ull_conn_rx+0x165a>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   3b60c:	8c30      	ldrh	r0, [r6, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   3b60e:	281a      	cmp	r0, #26
   3b610:	f240 822e 	bls.w	3ba70 <ull_conn_rx+0x126c>
			eff_tx_octets = MIN(max_rx_octets,
   3b614:	f8b4 10d2 	ldrh.w	r1, [r4, #210]	; 0xd2
   3b618:	4281      	cmp	r1, r0
   3b61a:	bf28      	it	cs
   3b61c:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   3b61e:	8cb0      	ldrh	r0, [r6, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   3b620:	f8b6 c026 	ldrh.w	ip, [r6, #38]	; 0x26
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   3b624:	281a      	cmp	r0, #26
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   3b626:	8c70      	ldrh	r0, [r6, #34]	; 0x22
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   3b628:	bf94      	ite	ls
   3b62a:	46de      	movls	lr, fp
   3b62c:	f04f 0e1b 	movhi.w	lr, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   3b630:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   3b634:	bf34      	ite	cc
   3b636:	4650      	movcc	r0, sl
   3b638:	f44f 70a4 	movcs.w	r0, #328	; 0x148
		if (lr_tx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   3b63c:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   3b640:	bf34      	ite	cc
   3b642:	46cc      	movcc	ip, r9
   3b644:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   3b648:	45de      	cmp	lr, fp
   3b64a:	f000 8248 	beq.w	3bade <ull_conn_rx+0x12da>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   3b64e:	3a01      	subs	r2, #1
   3b650:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			conn->llcp_length.rx_octets = eff_rx_octets;
   3b654:	f8a4 e1c0 	strh.w	lr, [r4, #448]	; 0x1c0
			link->mem = conn->llcp_rx;
   3b658:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
			conn->llcp_length.tx_octets = eff_tx_octets;
   3b65c:	f8a4 11c2 	strh.w	r1, [r4, #450]	; 0x1c2
			conn->llcp_length.rx_time = eff_rx_time;
   3b660:	f8a4 c1c4 	strh.w	ip, [r4, #452]	; 0x1c4
			conn->llcp_length.tx_time = eff_tx_time;
   3b664:	f8a4 01c6 	strh.w	r0, [r4, #454]	; 0x1c6
			if (tx) {
   3b668:	2b00      	cmp	r3, #0
   3b66a:	f000 8333 	beq.w	3bcd4 <ull_conn_rx+0x14d0>
				conn->llcp_length.state =
   3b66e:	f894 61be 	ldrb.w	r6, [r4, #446]	; 0x1be
   3b672:	f04f 0805 	mov.w	r8, #5
   3b676:	f368 0602 	bfi	r6, r8, #0, #3
   3b67a:	f884 61be 	strb.w	r6, [r4, #446]	; 0x1be
			link->mem = conn->llcp_rx;
   3b67e:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   3b680:	682a      	ldr	r2, [r5, #0]
   3b682:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   3b684:	682a      	ldr	r2, [r5, #0]
   3b686:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
			*rx = NULL;
   3b68a:	2200      	movs	r2, #0
   3b68c:	602a      	str	r2, [r5, #0]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b68e:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   3b690:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b692:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   3b696:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b698:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3b69a:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3b69c:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   3b69e:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   3b6a0:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   3b6a4:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   3b6a8:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3b6aa:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3b6ac:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   3b6ae:	f7fd ff49 	bl	39544 <ctrl_tx_sec_enqueue>
}
   3b6b2:	f7ff b906 	b.w	3a8c2 <ull_conn_rx+0xbe>
	if (conn->common.txn_lock) {
   3b6b6:	f894 70e4 	ldrb.w	r7, [r4, #228]	; 0xe4
   3b6ba:	f017 0702 	ands.w	r7, r7, #2
   3b6be:	f47f a8fe 	bne.w	3a8be <ull_conn_rx+0xba>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3b6c2:	4881      	ldr	r0, [pc, #516]	; (3b8c8 <ull_conn_rx+0x10c4>)
   3b6c4:	f7f8 fc14 	bl	33ef0 <mem_acquire>
	if (!tx) {
   3b6c8:	4603      	mov	r3, r0
   3b6ca:	2800      	cmp	r0, #0
   3b6cc:	f43f af2d 	beq.w	3b52a <ull_conn_rx+0xd26>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3b6d0:	f894 11ce 	ldrb.w	r1, [r4, #462]	; 0x1ce
	conn->common.txn_lock = 1U;
   3b6d4:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
	if (conn->llcp_phy.ack ==
   3b6d8:	f894 e1cd 	ldrb.w	lr, [r4, #461]	; 0x1cd
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3b6dc:	2002      	movs	r0, #2
   3b6de:	f360 0101 	bfi	r1, r0, #0, #2
	conn->common.txn_lock = 1U;
   3b6e2:	f042 0202 	orr.w	r2, r2, #2
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3b6e6:	f884 11ce 	strb.w	r1, [r4, #462]	; 0x1ce
	if (conn->llcp_phy.ack ==
   3b6ea:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
	conn->common.txn_lock = 1U;
   3b6ee:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   3b6f2:	f894 21d0 	ldrb.w	r2, [r4, #464]	; 0x1d0
	if (conn->llcp_phy.ack ==
   3b6f6:	4571      	cmp	r1, lr
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   3b6f8:	f3c2 0502 	ubfx	r5, r2, #0, #3
   3b6fc:	f002 0c07 	and.w	ip, r2, #7
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   3b700:	f3c2 00c2 	ubfx	r0, r2, #3, #3
	if (conn->llcp_phy.ack ==
   3b704:	d114      	bne.n	3b730 <ull_conn_rx+0xf2c>
		conn->llcp_phy.ack--;
   3b706:	3901      	subs	r1, #1
		conn->llcp_phy.cmd = 0U;
   3b708:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
		conn->llcp_phy.ack--;
   3b70c:	f884 11cd 	strb.w	r1, [r4, #461]	; 0x1cd
		conn->llcp_phy.tx =
   3b710:	f894 11ce 	ldrb.w	r1, [r4, #462]	; 0x1ce
		conn->llcp_phy.cmd = 0U;
   3b714:	f367 0282 	bfi	r2, r7, #2, #1
		conn->llcp_phy.tx =
   3b718:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.rx =
   3b71c:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   3b720:	f884 21cf 	strb.w	r2, [r4, #463]	; 0x1cf
		conn->procedure_expire =
   3b724:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
		conn->llcp_phy.rx =
   3b728:	f884 11ce 	strb.w	r1, [r4, #462]	; 0x1ce
		conn->procedure_expire =
   3b72c:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	conn->llcp_phy.rx &= p->tx_phys;
   3b730:	f894 11ce 	ldrb.w	r1, [r4, #462]	; 0x1ce
	conn->llcp_phy.tx &= p->rx_phys;
   3b734:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   3b738:	f896 7020 	ldrb.w	r7, [r6, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   3b73c:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   3b740:	ea02 020c 	and.w	r2, r2, ip
	conn->llcp_phy.rx &= p->tx_phys;
   3b744:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   3b748:	0092      	lsls	r2, r2, #2
   3b74a:	f001 0103 	and.w	r1, r1, #3
   3b74e:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
   3b752:	430a      	orrs	r2, r1
   3b754:	f884 21ce 	strb.w	r2, [r4, #462]	; 0x1ce
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   3b758:	2203      	movs	r2, #3
   3b75a:	715a      	strb	r2, [r3, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   3b75c:	7258      	strb	r0, [r3, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b75e:	7918      	ldrb	r0, [r3, #4]
	    conn->tx_head &&
   3b760:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   3b764:	721d      	strb	r5, [r3, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   3b766:	2117      	movs	r1, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b768:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   3b76c:	71d9      	strb	r1, [r3, #7]
		if (!conn->tx_ctrl) {
   3b76e:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b772:	7118      	strb	r0, [r3, #4]
	if (
   3b774:	2a00      	cmp	r2, #0
   3b776:	f000 8124 	beq.w	3b9c2 <ull_conn_rx+0x11be>
	    !conn->llcp_enc.pause_tx &&
   3b77a:	f894 0176 	ldrb.w	r0, [r4, #374]	; 0x176
	    conn->tx_head &&
   3b77e:	0785      	lsls	r5, r0, #30
   3b780:	f100 811f 	bmi.w	3b9c2 <ull_conn_rx+0x11be>
	    !conn->llcp_phy.pause_tx &&
   3b784:	f894 01cf 	ldrb.w	r0, [r4, #463]	; 0x1cf
   3b788:	07c0      	lsls	r0, r0, #31
   3b78a:	f100 811a 	bmi.w	3b9c2 <ull_conn_rx+0x11be>
		if (conn->tx_head == conn->tx_data) {
   3b78e:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
   3b792:	4282      	cmp	r2, r0
   3b794:	f000 8370 	beq.w	3be78 <ull_conn_rx+0x1674>
		} else if (!conn->tx_ctrl) {
   3b798:	2900      	cmp	r1, #0
   3b79a:	f000 8379 	beq.w	3be90 <ull_conn_rx+0x168c>
	tx->next = conn->tx_ctrl_last->next;
   3b79e:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   3b7a2:	6811      	ldr	r1, [r2, #0]
   3b7a4:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   3b7a6:	6013      	str	r3, [r2, #0]
	if (!tx->next) {
   3b7a8:	681a      	ldr	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   3b7aa:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3b7ae:	2a00      	cmp	r2, #0
   3b7b0:	f47f a885 	bne.w	3a8be <ull_conn_rx+0xba>
		conn->tx_data_last = tx;
   3b7b4:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b7b8:	f7ff b881 	b.w	3a8be <ull_conn_rx+0xba>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   3b7bc:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   3b7c0:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   3b7c4:	4293      	cmp	r3, r2
   3b7c6:	f43f adc1 	beq.w	3b34c <ull_conn_rx+0xb48>
		rej_ext_ind->error_code = rej_ind->error_code;
   3b7ca:	f896 3020 	ldrb.w	r3, [r6, #32]
   3b7ce:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   3b7d2:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   3b7d6:	2900      	cmp	r1, #0
   3b7d8:	f6bf ade4 	bge.w	3b3a4 <ull_conn_rx+0xba0>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   3b7dc:	2b23      	cmp	r3, #35	; 0x23
			conn->periph.ticks_to_offset =
   3b7de:	bf1c      	itt	ne
   3b7e0:	f8d4 31b8 	ldrne.w	r3, [r4, #440]	; 0x1b8
   3b7e4:	f8c4 30ec 	strne.w	r3, [r4, #236]	; 0xec
   3b7e8:	e5df      	b.n	3b3aa <ull_conn_rx+0xba6>
			conn->llcp_conn_param.disabled = 1U;
   3b7ea:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3b7ee:	f043 0320 	orr.w	r3, r3, #32
   3b7f2:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
			if (!conn->lll.role) {
   3b7f6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3b7fa:	2b00      	cmp	r3, #0
   3b7fc:	f2c0 8216 	blt.w	3bc2c <ull_conn_rx+0x1428>
				LL_ASSERT(conn->llcp_cu.req ==
   3b800:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   3b804:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   3b808:	429a      	cmp	r2, r3
   3b80a:	d00e      	beq.n	3b82a <ull_conn_rx+0x1026>
   3b80c:	4a2f      	ldr	r2, [pc, #188]	; (3b8cc <ull_conn_rx+0x10c8>)
   3b80e:	4930      	ldr	r1, [pc, #192]	; (3b8d0 <ull_conn_rx+0x10cc>)
   3b810:	4830      	ldr	r0, [pc, #192]	; (3b8d4 <ull_conn_rx+0x10d0>)
   3b812:	f641 33f5 	movw	r3, #7157	; 0x1bf5
   3b816:	f00e f977 	bl	49b08 <printk>
   3b81a:	4040      	eors	r0, r0
   3b81c:	f380 8811 	msr	BASEPRI, r0
   3b820:	f04f 0003 	mov.w	r0, #3
   3b824:	df02      	svc	2
   3b826:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
				conn->llcp_conn_param.state =
   3b82a:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   3b82e:	2106      	movs	r1, #6
   3b830:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
   3b834:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   3b836:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   3b838:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
				conn->llcp_cu.win_size = 1U;
   3b83c:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b840:	6828      	ldr	r0, [r5, #0]
				conn->llcp_conn_param.state =
   3b842:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3b846:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3b84a:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
   3b84e:	00db      	lsls	r3, r3, #3
   3b850:	f022 020f 	bic.w	r2, r2, #15
   3b854:	430b      	orrs	r3, r1
   3b856:	4313      	orrs	r3, r2
   3b858:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
				conn->llcp_cu.timeout =
   3b85c:	f8b4 319e 	ldrh.w	r3, [r4, #414]	; 0x19e
					conn->llcp_conn_param.interval_max;
   3b860:	f8d4 219a 	ldr.w	r2, [r4, #410]	; 0x19a
				conn->llcp_cu.timeout =
   3b864:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
				conn->llcp_cu.win_offset_us = 0U;
   3b868:	2300      	movs	r3, #0
				conn->llcp_cu.interval =
   3b86a:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
				conn->llcp_cu.win_offset_us = 0U;
   3b86e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b872:	7101      	strb	r1, [r0, #4]
				break;
   3b874:	f7ff b825 	b.w	3a8c2 <ull_conn_rx+0xbe>
				      0x03) == 0x02) &&
   3b878:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3b87c:	2b03      	cmp	r3, #3
   3b87e:	f47f aa13 	bne.w	3aca8 <ull_conn_rx+0x4a4>
   3b882:	f7ff ba0a 	b.w	3ac9a <ull_conn_rx+0x496>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3b886:	4810      	ldr	r0, [pc, #64]	; (3b8c8 <ull_conn_rx+0x10c4>)
   3b888:	f7f8 fb32 	bl	33ef0 <mem_acquire>
		if (!tx) {
   3b88c:	4601      	mov	r1, r0
   3b88e:	2800      	cmp	r0, #0
   3b890:	f43f ae4b 	beq.w	3b52a <ull_conn_rx+0xd26>
		conn->llcp_version.tx = 1U;
   3b894:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   3b898:	f043 0301 	orr.w	r3, r3, #1
   3b89c:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b8a0:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   3b8a2:	7145      	strb	r5, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b8a4:	f043 0303 	orr.w	r3, r3, #3
   3b8a8:	7103      	strb	r3, [r0, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   3b8aa:	f640 420c 	movw	r2, #3084	; 0xc0c
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   3b8ae:	4b0a      	ldr	r3, [pc, #40]	; (3b8d8 <ull_conn_rx+0x10d4>)
   3b8b0:	f8c0 3009 	str.w	r3, [r0, #9]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   3b8b4:	f8a0 2007 	strh.w	r2, [r0, #7]
		ctrl_tx_sec_enqueue(conn, tx);
   3b8b8:	4620      	mov	r0, r4
   3b8ba:	f7fd fe43 	bl	39544 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b8be:	2301      	movs	r3, #1
   3b8c0:	7133      	strb	r3, [r6, #4]
   3b8c2:	f7ff ba07 	b.w	3acd4 <ull_conn_rx+0x4d0>
   3b8c6:	bf00      	nop
   3b8c8:	200059a8 	.word	0x200059a8
   3b8cc:	000530cc 	.word	0x000530cc
   3b8d0:	00053200 	.word	0x00053200
   3b8d4:	00052bbc 	.word	0x00052bbc
   3b8d8:	ffff05f1 	.word	0xffff05f1
		} else if ((conn->llcp_conn_param.req ==
   3b8dc:	42aa      	cmp	r2, r5
   3b8de:	d005      	beq.n	3b8ec <ull_conn_rx+0x10e8>
			    conn->llcp_conn_param.ack) ||
   3b8e0:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   3b8e4:	f012 0f0b 	tst.w	r2, #11
   3b8e8:	f47e afe9 	bne.w	3a8be <ull_conn_rx+0xba>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   3b8ec:	f8d6 8020 	ldr.w	r8, [r6, #32]
   3b8f0:	f8d6 e024 	ldr.w	lr, [r6, #36]	; 0x24
				cpr->preferred_periodicity;
   3b8f4:	f896 9028 	ldrb.w	r9, [r6, #40]	; 0x28
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3b8f8:	fa1f f288 	uxth.w	r2, r8
   3b8fc:	2a05      	cmp	r2, #5
   3b8fe:	d94a      	bls.n	3b996 <ull_conn_rx+0x1192>
   3b900:	ea4f 4718 	mov.w	r7, r8, lsr #16
   3b904:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   3b908:	d845      	bhi.n	3b996 <ull_conn_rx+0x1192>
			    (interval_max > 3200) ||
   3b90a:	4297      	cmp	r7, r2
   3b90c:	d343      	bcc.n	3b996 <ull_conn_rx+0x1192>
   3b90e:	fa1f fc8e 	uxth.w	ip, lr
			    (interval_min > interval_max) ||
   3b912:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   3b916:	d23e      	bcs.n	3b996 <ull_conn_rx+0x1192>
   3b918:	ea4f 421e 	mov.w	r2, lr, lsr #16
			    (latency > 499) ||
   3b91c:	f1a2 000a 	sub.w	r0, r2, #10
   3b920:	b280      	uxth	r0, r0
   3b922:	f640 4a76 	movw	sl, #3190	; 0xc76
   3b926:	4550      	cmp	r0, sl
   3b928:	d835      	bhi.n	3b996 <ull_conn_rx+0x1192>
			     ((latency + 1) * interval_max)) ||
   3b92a:	f10c 0001 	add.w	r0, ip, #1
   3b92e:	b280      	uxth	r0, r0
   3b930:	fb07 f000 	mul.w	r0, r7, r0
			    (timeout < 10) || (timeout > 3200) ||
   3b934:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
   3b938:	d22d      	bcs.n	3b996 <ull_conn_rx+0x1192>
			     ((latency + 1) * interval_max)) ||
   3b93a:	45b9      	cmp	r9, r7
   3b93c:	d82b      	bhi.n	3b996 <ull_conn_rx+0x1192>
			conn->llcp_conn_param.interval_min = interval_min;
   3b93e:	e9c4 8e66 	strd	r8, lr, [r4, #408]	; 0x198
			conn->llcp_conn_param.preferred_periodicity =
   3b942:	f884 91a0 	strb.w	r9, [r4, #416]	; 0x1a0
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   3b946:	f8d6 e029 	ldr.w	lr, [r6, #41]	; 0x29
   3b94a:	f8d6 002d 	ldr.w	r0, [r6, #45]	; 0x2d
   3b94e:	f8d6 8031 	ldr.w	r8, [r6, #49]	; 0x31
			conn->llcp_conn_param.reference_conn_event_count =
   3b952:	f8c4 81aa 	str.w	r8, [r4, #426]	; 0x1aa
   3b956:	f8c4 e1a2 	str.w	lr, [r4, #418]	; 0x1a2
   3b95a:	f8c4 01a6 	str.w	r0, [r4, #422]	; 0x1a6
				sys_le16_to_cpu(cpr->offset5);
   3b95e:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   3b962:	f896 e036 	ldrb.w	lr, [r6, #54]	; 0x36
   3b966:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   3b96a:	f8a4 01ae 	strh.w	r0, [r4, #430]	; 0x1ae
			if ((conn->llcp_conn_param.interval_max !=
   3b96e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
   3b970:	42b8      	cmp	r0, r7
   3b972:	f000 8295 	beq.w	3bea0 <ull_conn_rx+0x169c>
				conn->llcp_conn_param.state =
   3b976:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   3b97a:	2003      	movs	r0, #3
   3b97c:	f360 0203 	bfi	r2, r0, #0, #4
   3b980:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
			conn->llcp_conn_param.ack--;
   3b984:	3d01      	subs	r5, #1
   3b986:	f884 5195 	strb.w	r5, [r4, #405]	; 0x195
	if (!conn_upd_curr) {
   3b98a:	2b00      	cmp	r3, #0
   3b98c:	f47e af99 	bne.w	3a8c2 <ull_conn_rx+0xbe>
		conn_upd_curr = conn;
   3b990:	600c      	str	r4, [r1, #0]
   3b992:	f7fe bf96 	b.w	3a8c2 <ull_conn_rx+0xbe>
				nack = reject_ext_ind_send(conn, *rx,
   3b996:	231e      	movs	r3, #30
   3b998:	220f      	movs	r2, #15
   3b99a:	f7ff b93c 	b.w	3ac16 <ull_conn_rx+0x412>
			conn->llcp_length.disabled = 1U;
   3b99e:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
			conn->llcp_length.ack = conn->llcp_length.req;
   3b9a2:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			conn->llcp_length.disabled = 1U;
   3b9a6:	f043 0308 	orr.w	r3, r3, #8
   3b9aa:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
			conn->llcp_length.ack = conn->llcp_length.req;
   3b9ae:	f7ff b8f6 	b.w	3ab9e <ull_conn_rx+0x39a>
	    ((pdu_data_tx->llctrl.opcode !=
   3b9b2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3b9b4:	2a03      	cmp	r2, #3
   3b9b6:	f43f adc4 	beq.w	3b542 <ull_conn_rx+0xd3e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3b9ba:	2a0a      	cmp	r2, #10
   3b9bc:	f47e afea 	bne.w	3a994 <ull_conn_rx+0x190>
   3b9c0:	e5bf      	b.n	3b542 <ull_conn_rx+0xd3e>
		if (!conn->tx_ctrl) {
   3b9c2:	2900      	cmp	r1, #0
   3b9c4:	f47f aeeb 	bne.w	3b79e <ull_conn_rx+0xf9a>
			tx->next = conn->tx_head;
   3b9c8:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   3b9ca:	e9c4 3375 	strd	r3, r3, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3b9ce:	e6eb      	b.n	3b7a8 <ull_conn_rx+0xfa4>
				conn->llcp_phy.state =
   3b9d0:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
				if (conn->llcp_phy.ack ==
   3b9d4:	428a      	cmp	r2, r1
				conn->llcp_phy.state =
   3b9d6:	f043 0303 	orr.w	r3, r3, #3
   3b9da:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
				if (conn->llcp_phy.ack ==
   3b9de:	d111      	bne.n	3ba04 <ull_conn_rx+0x1200>
					conn->llcp_phy.tx =
   3b9e0:	f8b4 11ce 	ldrh.w	r1, [r4, #462]	; 0x1ce
						conn->phy_pref_rx;
   3b9e4:	f894 01d0 	ldrb.w	r0, [r4, #464]	; 0x1d0
					conn->llcp_phy.tx =
   3b9e8:	f421 619f 	bic.w	r1, r1, #1272	; 0x4f8
   3b9ec:	f240 43fc 	movw	r3, #1276	; 0x4fc
   3b9f0:	f021 0104 	bic.w	r1, r1, #4
   3b9f4:	ea03 0380 	and.w	r3, r3, r0, lsl #2
					conn->llcp_phy.ack--;
   3b9f8:	3a01      	subs	r2, #1
					conn->llcp_phy.tx =
   3b9fa:	430b      	orrs	r3, r1
					conn->llcp_phy.ack--;
   3b9fc:	f884 21cd 	strb.w	r2, [r4, #461]	; 0x1cd
					conn->llcp_phy.tx =
   3ba00:	f8a4 31ce 	strh.w	r3, [r4, #462]	; 0x1ce
				conn->llcp_phy.rx &= p->tx_phys;
   3ba04:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
   3ba08:	f896 1020 	ldrb.w	r1, [r6, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   3ba0c:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   3ba10:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   3ba14:	f003 0203 	and.w	r2, r3, #3
   3ba18:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3ba1c:	4003      	ands	r3, r0
   3ba1e:	009b      	lsls	r3, r3, #2
   3ba20:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   3ba24:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3ba26:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   3ba2a:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3ba2e:	d001      	beq.n	3ba34 <ull_conn_rx+0x1230>
   3ba30:	2b1f      	cmp	r3, #31
   3ba32:	d805      	bhi.n	3ba40 <ull_conn_rx+0x123c>
					conn->llcp_phy.tx = 0;
   3ba34:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
   3ba38:	f003 0303 	and.w	r3, r3, #3
   3ba3c:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
				conn->llcp_phy.pause_tx = 1U;
   3ba40:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3ba44:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   3ba46:	4313      	orrs	r3, r2
   3ba48:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3ba4c:	7132      	strb	r2, [r6, #4]
   3ba4e:	f7fe bf38 	b.w	3a8c2 <ull_conn_rx+0xbe>
				nack = reject_ext_ind_send(conn, *rx,
   3ba52:	231e      	movs	r3, #30
   3ba54:	2210      	movs	r2, #16
   3ba56:	f7ff b8de 	b.w	3ac16 <ull_conn_rx+0x412>
				nack = reject_ext_ind_send(conn, *rx,
   3ba5a:	2323      	movs	r3, #35	; 0x23
   3ba5c:	f7ff b925 	b.w	3acaa <ull_conn_rx+0x4a6>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3ba60:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3ba64:	f36f 0301 	bfc	r3, #0, #2
   3ba68:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
   3ba6c:	f7ff b8bb 	b.w	3abe6 <ull_conn_rx+0x3e2>
   3ba70:	9901      	ldr	r1, [sp, #4]
   3ba72:	e5d4      	b.n	3b61e <ull_conn_rx+0xe1a>
	conn->llcp_enc.pause_rx = 0U;
   3ba74:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	conn->llcp_ack = conn->llcp_req;
   3ba78:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
	conn->procedure_expire = 0U;
   3ba7c:	2100      	movs	r1, #0
	conn->llcp_enc.pause_rx = 0U;
   3ba7e:	f022 0203 	bic.w	r2, r2, #3
   3ba82:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
	conn->procedure_expire = 0U;
   3ba86:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	if (err) {
   3ba8a:	f7fe bf1a 	b.w	3a8c2 <ull_conn_rx+0xbe>
				nack = reject_ext_ind_send(conn, *rx,
   3ba8e:	2323      	movs	r3, #35	; 0x23
   3ba90:	220f      	movs	r2, #15
   3ba92:	f7ff b8c0 	b.w	3ac16 <ull_conn_rx+0x412>
			lll->phy_tx_time = lll->phy_tx;
   3ba96:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
   3ba9a:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
			conn->llcp_phy.ack = conn->llcp_phy.req;
   3ba9e:	f884 11cd 	strb.w	r1, [r4, #461]	; 0x1cd
			conn->llcp_phy.pause_tx = 0U;
   3baa2:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   3baa6:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   3baa8:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   3baac:	f362 1106 	bfi	r1, r2, #4, #3
   3bab0:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   3bab4:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   3bab8:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
			lll->phy_tx_time = lll->phy_tx;
   3babc:	f3c2 0202 	ubfx	r2, r2, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3bac0:	682b      	ldr	r3, [r5, #0]
			if (conn->llcp_phy.cmd) {
   3bac2:	f000 8103 	beq.w	3bccc <ull_conn_rx+0x14c8>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3bac6:	211c      	movs	r1, #28
   3bac8:	7119      	strb	r1, [r3, #4]
				p->status = 0U;
   3baca:	2300      	movs	r3, #0
   3bacc:	7733      	strb	r3, [r6, #28]
				p->tx = lll->phy_tx;
   3bace:	7772      	strb	r2, [r6, #29]
				p->rx = lll->phy_rx;
   3bad0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   3bad4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3bad8:	77b3      	strb	r3, [r6, #30]
   3bada:	f7ff b860 	b.w	3ab9e <ull_conn_rx+0x39a>
			conn->procedure_expire = 0U;
   3bade:	2700      	movs	r7, #0
   3bae0:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   3bae4:	9f01      	ldr	r7, [sp, #4]
			conn->llcp_length.ack = conn->llcp_length.req;
   3bae6:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   3baea:	42b9      	cmp	r1, r7
   3baec:	f000 8169 	beq.w	3bdc2 <ull_conn_rx+0x15be>
			conn->lll.max_rx_time = eff_rx_time;
   3baf0:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
   3baf4:	2b00      	cmp	r3, #0
   3baf6:	f000 8180 	beq.w	3bdfa <ull_conn_rx+0x15f6>
					(conn->llcp_length.req - 1);
   3bafa:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   3bafc:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
				conn->llcp_length.state =
   3bb00:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
				conn->llcp_length.rx_octets = eff_rx_octets;
   3bb04:	f8a4 e1c0 	strh.w	lr, [r4, #448]	; 0x1c0
				conn->llcp_length.state =
   3bb08:	2503      	movs	r5, #3
   3bb0a:	f365 0202 	bfi	r2, r5, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   3bb0e:	f8a4 11c2 	strh.w	r1, [r4, #450]	; 0x1c2
				conn->llcp_length.rx_time = eff_rx_time;
   3bb12:	f8a4 c1c4 	strh.w	ip, [r4, #452]	; 0x1c4
				conn->llcp_length.tx_time = eff_tx_time;
   3bb16:	f8a4 01c6 	strh.w	r0, [r4, #454]	; 0x1c6
				conn->llcp_length.state =
   3bb1a:	f884 21be 	strb.w	r2, [r4, #446]	; 0x1be
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   3bb1e:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   3bb22:	84b1      	strh	r1, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   3bb24:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   3bb28:	84f0      	strh	r0, [r6, #38]	; 0x26
	if (tx) {
   3bb2a:	e5b0      	b.n	3b68e <ull_conn_rx+0xe8a>
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   3bb2c:	232a      	movs	r3, #42	; 0x2a
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3bb2e:	2201      	movs	r2, #1
   3bb30:	7132      	strb	r2, [r6, #4]
			conn->llcp_terminate.reason_final = err;
   3bb32:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
   3bb36:	f7fe bec4 	b.w	3a8c2 <ull_conn_rx+0xbe>
		err = BT_HCI_ERR_INSTANT_PASSED;
   3bb3a:	2328      	movs	r3, #40	; 0x28
   3bb3c:	e7f7      	b.n	3bb2e <ull_conn_rx+0x132a>
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   3bb3e:	2101      	movs	r1, #1
   3bb40:	f10d 000f 	add.w	r0, sp, #15
	phy = ind->c_to_p_phy;
   3bb44:	f88d 200f 	strb.w	r2, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   3bb48:	f7f8 fbb2 	bl	342b0 <util_ones_count_get>
   3bb4c:	2801      	cmp	r0, #1
   3bb4e:	f200 8095 	bhi.w	3bc7c <ull_conn_rx+0x1478>
	phy = ind->p_to_c_phy;
   3bb52:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3bb56:	f88d 300f 	strb.w	r3, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   3bb5a:	f10d 000f 	add.w	r0, sp, #15
   3bb5e:	2101      	movs	r1, #1
   3bb60:	f7f8 fba6 	bl	342b0 <util_ones_count_get>
   3bb64:	2801      	cmp	r0, #1
   3bb66:	f200 8089 	bhi.w	3bc7c <ull_conn_rx+0x1478>
	instant = sys_le16_to_cpu(ind->instant);
   3bb6a:	8c71      	ldrh	r1, [r6, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   3bb6c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3bb6e:	1acb      	subs	r3, r1, r3
   3bb70:	041b      	lsls	r3, r3, #16
   3bb72:	f100 817c 	bmi.w	3be6e <ull_conn_rx+0x166a>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3bb76:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3bb7a:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3bb7e:	1a9b      	subs	r3, r3, r2
   3bb80:	f003 0303 	and.w	r3, r3, #3
   3bb84:	2b02      	cmp	r3, #2
   3bb86:	f000 81b1 	beq.w	3beec <ull_conn_rx+0x16e8>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   3bb8a:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
   3bb8e:	f894 31cd 	ldrb.w	r3, [r4, #461]	; 0x1cd
   3bb92:	4283      	cmp	r3, r0
   3bb94:	d018      	beq.n	3bbc8 <ull_conn_rx+0x13c4>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   3bb96:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   3bb9a:	f003 0303 	and.w	r3, r3, #3
   3bb9e:	2b02      	cmp	r3, #2
   3bba0:	d112      	bne.n	3bbc8 <ull_conn_rx+0x13c4>
		conn->llcp_phy.pause_tx = 0U;
   3bba2:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3bba6:	f884 01cd 	strb.w	r0, [r4, #461]	; 0x1cd
		conn->llcp_phy.pause_tx = 0U;
   3bbaa:	f36f 0300 	bfc	r3, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3bbae:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
		conn->llcp_phy.pause_tx = 0U;
   3bbb2:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3bbb6:	f3c3 0380 	ubfx	r3, r3, #2, #1
   3bbba:	f363 0041 	bfi	r0, r3, #1, #1
		conn->procedure_expire = 0U;
   3bbbe:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3bbc0:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
		conn->procedure_expire = 0U;
   3bbc4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.tx = ind->p_to_c_phy;
   3bbc8:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
	conn->llcp.phy_upd_ind.rx = ind->c_to_p_phy;
   3bbcc:	f896 0020 	ldrb.w	r0, [r6, #32]
	conn->llcp.phy_upd_ind.instant = instant;
   3bbd0:	f8a4 10f6 	strh.w	r1, [r4, #246]	; 0xf6
	conn->llcp.phy_upd_ind.initiate = 0U;
   3bbd4:	009b      	lsls	r3, r3, #2
   3bbd6:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
   3bbda:	f003 031c 	and.w	r3, r3, #28
   3bbde:	f001 0102 	and.w	r1, r1, #2
   3bbe2:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   3bbe6:	430b      	orrs	r3, r1
   3bbe8:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
	link->mem = conn->llcp_rx;
   3bbec:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   3bbf0:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   3bbf2:	682b      	ldr	r3, [r5, #0]
   3bbf4:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   3bbf6:	6829      	ldr	r1, [r5, #0]
   3bbf8:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
	*rx = NULL;
   3bbfc:	2300      	movs	r3, #0
   3bbfe:	602b      	str	r3, [r5, #0]
	if (conn->llcp.phy_upd_ind.tx) {
   3bc00:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
	conn->llcp_ack -= 2U;
   3bc04:	3a02      	subs	r2, #2
	conn->llcp_type = LLCP_PHY_UPD;
   3bc06:	2106      	movs	r1, #6
	if (conn->llcp.phy_upd_ind.tx) {
   3bc08:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
   3bc0c:	f884 10f2 	strb.w	r1, [r4, #242]	; 0xf2
	conn->llcp_ack -= 2U;
   3bc10:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
	if (conn->llcp.phy_upd_ind.tx) {
   3bc14:	f43e ae55 	beq.w	3a8c2 <ull_conn_rx+0xbe>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   3bc18:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
   3bc1c:	f3c3 0382 	ubfx	r3, r3, #2, #3
   3bc20:	f363 1206 	bfi	r2, r3, #4, #3
   3bc24:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
		if (err) {
   3bc28:	f7fe be4b 	b.w	3a8c2 <ull_conn_rx+0xbe>
	conn_upd_curr = NULL;
   3bc2c:	4bb2      	ldr	r3, [pc, #712]	; (3bef8 <ull_conn_rx+0x16f4>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3bc2e:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
	conn_upd_curr = NULL;
   3bc32:	2200      	movs	r2, #0
   3bc34:	601a      	str	r2, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   3bc36:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3bc3a:	06da      	lsls	r2, r3, #27
   3bc3c:	f57e ae3f 	bpl.w	3a8be <ull_conn_rx+0xba>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3bc40:	2318      	movs	r3, #24
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3bc42:	f01c 0f01 	tst.w	ip, #1
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3bc46:	7133      	strb	r3, [r6, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3bc48:	f040 80e3 	bne.w	3be12 <ull_conn_rx+0x160e>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   3bc4c:	231a      	movs	r3, #26
   3bc4e:	7733      	strb	r3, [r6, #28]
			cu->interval = lll->interval;
   3bc50:	f8d4 202a 	ldr.w	r2, [r4, #42]	; 0x2a
   3bc54:	f8c6 201e 	str.w	r2, [r6, #30]
			cu->timeout = conn->supervision_reload *
   3bc58:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
				      lll->interval * 125U / 1000;
   3bc5c:	b292      	uxth	r2, r2
			cu->timeout = conn->supervision_reload *
   3bc5e:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   3bc62:	227d      	movs	r2, #125	; 0x7d
   3bc64:	fb02 f303 	mul.w	r3, r2, r3
   3bc68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3bc6c:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   3bc70:	8473      	strh	r3, [r6, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   3bc72:	f7fe bf94 	b.w	3ab9e <ull_conn_rx+0x39a>
		conn_upd_curr = conn;
   3bc76:	601c      	str	r4, [r3, #0]
   3bc78:	f7ff bad7 	b.w	3b22a <ull_conn_rx+0xa26>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3bc7c:	682b      	ldr	r3, [r5, #0]
   3bc7e:	2201      	movs	r2, #1
   3bc80:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INVALID_LL_PARAM;
   3bc82:	231e      	movs	r3, #30
			conn->llcp_terminate.reason_final = err;
   3bc84:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
   3bc88:	f7fe be1b 	b.w	3a8c2 <ull_conn_rx+0xbe>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   3bc8c:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
			conn->llcp_ack += 2U;
   3bc90:	3202      	adds	r2, #2
   3bc92:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   3bc96:	2b00      	cmp	r3, #0
   3bc98:	f040 80d3 	bne.w	3be42 <ull_conn_rx+0x163e>
			conn->periph.llcp_type = conn->llcp_type;
   3bc9c:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3bca0:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
   3bca4:	f7ff ba6d 	b.w	3b182 <ull_conn_rx+0x97e>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3bca8:	4a94      	ldr	r2, [pc, #592]	; (3befc <ull_conn_rx+0x16f8>)
   3bcaa:	4995      	ldr	r1, [pc, #596]	; (3bf00 <ull_conn_rx+0x16fc>)
   3bcac:	4895      	ldr	r0, [pc, #596]	; (3bf04 <ull_conn_rx+0x1700>)
   3bcae:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
   3bcb2:	f00d ff29 	bl	49b08 <printk>
   3bcb6:	4040      	eors	r0, r0
   3bcb8:	f380 8811 	msr	BASEPRI, r0
   3bcbc:	f04f 0003 	mov.w	r0, #3
   3bcc0:	df02      	svc	2
   3bcc2:	f7ff bb88 	b.w	3b3d6 <ull_conn_rx+0xbd2>
	struct node_tx *tx = NULL;
   3bcc6:	2300      	movs	r3, #0
   3bcc8:	f7fe bec5 	b.w	3aa56 <ull_conn_rx+0x252>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3bccc:	2201      	movs	r2, #1
   3bcce:	711a      	strb	r2, [r3, #4]
   3bcd0:	f7fe bf65 	b.w	3ab9e <ull_conn_rx+0x39a>
				conn->lll.max_tx_octets = eff_tx_octets;
   3bcd4:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->llcp_length.state =
   3bcd8:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
				conn->lll.max_tx_time = eff_tx_time;
   3bcdc:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   3bce0:	2004      	movs	r0, #4
   3bce2:	f360 0102 	bfi	r1, r0, #0, #3
   3bce6:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
			link->mem = conn->llcp_rx;
   3bcea:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   3bcec:	682a      	ldr	r2, [r5, #0]
   3bcee:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   3bcf0:	682a      	ldr	r2, [r5, #0]
   3bcf2:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
			*rx = NULL;
   3bcf6:	602b      	str	r3, [r5, #0]
	if (tx) {
   3bcf8:	f7fe bde3 	b.w	3a8c2 <ull_conn_rx+0xbe>
				uint16_t interval_min =
   3bcfc:	f8d6 9020 	ldr.w	r9, [r6, #32]
   3bd00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
					cpr->preferred_periodicity;
   3bd04:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3bd08:	fa1f f289 	uxth.w	r2, r9
   3bd0c:	2a05      	cmp	r2, #5
   3bd0e:	f67f ae42 	bls.w	3b996 <ull_conn_rx+0x1192>
   3bd12:	ea4f 4719 	mov.w	r7, r9, lsr #16
   3bd16:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   3bd1a:	f63f ae3c 	bhi.w	3b996 <ull_conn_rx+0x1192>
				    (interval_max > 3200) ||
   3bd1e:	4297      	cmp	r7, r2
   3bd20:	f4ff ae39 	bcc.w	3b996 <ull_conn_rx+0x1192>
   3bd24:	fa1f fe88 	uxth.w	lr, r8
				    (interval_min > interval_max) ||
   3bd28:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
   3bd2c:	f4bf ae33 	bcs.w	3b996 <ull_conn_rx+0x1192>
   3bd30:	ea4f 4218 	mov.w	r2, r8, lsr #16
				    (latency > 499) ||
   3bd34:	f1a2 0c0a 	sub.w	ip, r2, #10
   3bd38:	fa1f fc8c 	uxth.w	ip, ip
   3bd3c:	f640 4b76 	movw	fp, #3190	; 0xc76
   3bd40:	45dc      	cmp	ip, fp
   3bd42:	f63f ae28 	bhi.w	3b996 <ull_conn_rx+0x1192>
				     ((latency + 1) * interval_max)) ||
   3bd46:	f10e 0c01 	add.w	ip, lr, #1
   3bd4a:	fa1f fc8c 	uxth.w	ip, ip
   3bd4e:	fb07 fc0c 	mul.w	ip, r7, ip
				    (timeout > 3200) ||
   3bd52:	ebbc 0f82 	cmp.w	ip, r2, lsl #2
   3bd56:	f4bf ae1e 	bcs.w	3b996 <ull_conn_rx+0x1192>
				     ((latency + 1) * interval_max)) ||
   3bd5a:	45ba      	cmp	sl, r7
   3bd5c:	f63f ae1b 	bhi.w	3b996 <ull_conn_rx+0x1192>
				conn->llcp_conn_param.interval_min =
   3bd60:	e9c4 9866 	strd	r9, r8, [r4, #408]	; 0x198
				conn->llcp_conn_param.preferred_periodicity =
   3bd64:	f884 a1a0 	strb.w	sl, [r4, #416]	; 0x1a0
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   3bd68:	f8d6 8029 	ldr.w	r8, [r6, #41]	; 0x29
   3bd6c:	f8d6 c02d 	ldr.w	ip, [r6, #45]	; 0x2d
   3bd70:	f8d6 9031 	ldr.w	r9, [r6, #49]	; 0x31
				conn->llcp_conn_param.reference_conn_event_count =
   3bd74:	f8c4 91aa 	str.w	r9, [r4, #426]	; 0x1aa
   3bd78:	f8c4 81a2 	str.w	r8, [r4, #418]	; 0x1a2
   3bd7c:	f8c4 c1a6 	str.w	ip, [r4, #422]	; 0x1a6
					sys_le16_to_cpu(cpr->offset5);
   3bd80:	f896 c035 	ldrb.w	ip, [r6, #53]	; 0x35
   3bd84:	f896 8036 	ldrb.w	r8, [r6, #54]	; 0x36
   3bd88:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   3bd8c:	f8a4 c1ae 	strh.w	ip, [r4, #430]	; 0x1ae
				if ((conn->llcp_conn_param.interval_max !=
   3bd90:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
   3bd94:	45bc      	cmp	ip, r7
   3bd96:	f000 80f3 	beq.w	3bf80 <ull_conn_rx+0x177c>
					if (conn->llcp_enc.pause_tx) {
   3bd9a:	0787      	lsls	r7, r0, #30
						conn->llcp_conn_param.state =
   3bd9c:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
					if (conn->llcp_enc.pause_tx) {
   3bda0:	f57f adeb 	bpl.w	3b97a <ull_conn_rx+0x1176>
						conn->llcp_conn_param.state =
   3bda4:	2002      	movs	r0, #2
   3bda6:	f360 0203 	bfi	r2, r0, #0, #4
   3bdaa:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
						(*rx)->hdr.type =
   3bdae:	2201      	movs	r2, #1
   3bdb0:	7132      	strb	r2, [r6, #4]
   3bdb2:	e5e7      	b.n	3b984 <ull_conn_rx+0x1180>
				      0x03) == 0x02) &&
   3bdb4:	f894 20f2 	ldrb.w	r2, [r4, #242]	; 0xf2
   3bdb8:	2a03      	cmp	r2, #3
   3bdba:	f47f ac02 	bne.w	3b5c2 <ull_conn_rx+0xdbe>
   3bdbe:	f7ff bbf9 	b.w	3b5b4 <ull_conn_rx+0xdb0>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   3bdc2:	4550      	cmp	r0, sl
   3bdc4:	f47f ae94 	bne.w	3baf0 <ull_conn_rx+0x12ec>
			    eff_rx_time == conn->lll.max_rx_time &&
   3bdc8:	45cc      	cmp	ip, r9
   3bdca:	f47f ae91 	bne.w	3baf0 <ull_conn_rx+0x12ec>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3bdce:	682a      	ldr	r2, [r5, #0]
   3bdd0:	2501      	movs	r5, #1
   3bdd2:	7115      	strb	r5, [r2, #4]
	if (tx) {
   3bdd4:	2b00      	cmp	r3, #0
   3bdd6:	f43e ad74 	beq.w	3a8c2 <ull_conn_rx+0xbe>
   3bdda:	e458      	b.n	3b68e <ull_conn_rx+0xe8a>
			conn->tx_data = conn->tx_data->next;
   3bddc:	6811      	ldr	r1, [r2, #0]
   3bdde:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3bde2:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3bde6:	2900      	cmp	r1, #0
   3bde8:	f47f a83e 	bne.w	3ae68 <ull_conn_rx+0x664>
			tx->next = conn->tx_head->next;
   3bdec:	6811      	ldr	r1, [r2, #0]
   3bdee:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   3bdf0:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   3bdf2:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3bdf6:	f7ff b83c 	b.w	3ae72 <ull_conn_rx+0x66e>
				conn->lll.max_tx_octets = eff_tx_octets;
   3bdfa:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   3bdfe:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   3be02:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   3be06:	84b1      	strh	r1, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   3be08:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   3be0c:	84f0      	strh	r0, [r6, #38]	; 0x26
	if (tx) {
   3be0e:	f7fe bd58 	b.w	3a8c2 <ull_conn_rx+0xbe>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3be12:	4a3a      	ldr	r2, [pc, #232]	; (3befc <ull_conn_rx+0x16f8>)
   3be14:	493a      	ldr	r1, [pc, #232]	; (3bf00 <ull_conn_rx+0x16fc>)
   3be16:	483b      	ldr	r0, [pc, #236]	; (3bf04 <ull_conn_rx+0x1700>)
   3be18:	f641 4322 	movw	r3, #7202	; 0x1c22
   3be1c:	f00d fe74 	bl	49b08 <printk>
   3be20:	4040      	eors	r0, r0
   3be22:	f380 8811 	msr	BASEPRI, r0
   3be26:	f04f 0003 	mov.w	r0, #3
   3be2a:	df02      	svc	2
   3be2c:	e70e      	b.n	3bc4c <ull_conn_rx+0x1448>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3be2e:	7911      	ldrb	r1, [r2, #4]
   3be30:	f001 0103 	and.w	r1, r1, #3
   3be34:	2903      	cmp	r1, #3
   3be36:	f000 80ba 	beq.w	3bfae <ull_conn_rx+0x17aa>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3be3a:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   3be3e:	f7ff b813 	b.w	3ae68 <ull_conn_rx+0x664>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   3be42:	4a2e      	ldr	r2, [pc, #184]	; (3befc <ull_conn_rx+0x16f8>)
   3be44:	4930      	ldr	r1, [pc, #192]	; (3bf08 <ull_conn_rx+0x1704>)
   3be46:	482f      	ldr	r0, [pc, #188]	; (3bf04 <ull_conn_rx+0x1700>)
   3be48:	f641 13ad 	movw	r3, #6573	; 0x19ad
   3be4c:	f00d fe5c 	bl	49b08 <printk>
   3be50:	4040      	eors	r0, r0
   3be52:	f380 8811 	msr	BASEPRI, r0
   3be56:	f04f 0003 	mov.w	r0, #3
   3be5a:	df02      	svc	2
   3be5c:	e71e      	b.n	3bc9c <ull_conn_rx+0x1498>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   3be5e:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   3be62:	f011 0f06 	tst.w	r1, #6
   3be66:	f43f abd1 	beq.w	3b60c <ull_conn_rx+0xe08>
   3be6a:	f7fe bded 	b.w	3aa48 <ull_conn_rx+0x244>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3be6e:	682b      	ldr	r3, [r5, #0]
   3be70:	2201      	movs	r2, #1
   3be72:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   3be74:	2328      	movs	r3, #40	; 0x28
   3be76:	e705      	b.n	3bc84 <ull_conn_rx+0x1480>
			conn->tx_data = conn->tx_data->next;
   3be78:	6810      	ldr	r0, [r2, #0]
   3be7a:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3be7e:	2900      	cmp	r1, #0
   3be80:	f47f ac8d 	bne.w	3b79e <ull_conn_rx+0xf9a>
			tx->next = conn->tx_head->next;
   3be84:	6811      	ldr	r1, [r2, #0]
   3be86:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   3be88:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   3be8a:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3be8e:	e48b      	b.n	3b7a8 <ull_conn_rx+0xfa4>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3be90:	7911      	ldrb	r1, [r2, #4]
   3be92:	f001 0103 	and.w	r1, r1, #3
   3be96:	2903      	cmp	r1, #3
   3be98:	d022      	beq.n	3bee0 <ull_conn_rx+0x16dc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3be9a:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   3be9e:	e47e      	b.n	3b79e <ull_conn_rx+0xf9a>
			     lll->interval) ||
   3bea0:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   3bea2:	4567      	cmp	r7, ip
   3bea4:	f47f ad67 	bne.w	3b976 <ull_conn_rx+0x1172>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   3bea8:	f240 47e2 	movw	r7, #1250	; 0x4e2
   3beac:	fb07 f000 	mul.w	r0, r7, r0
   3beb0:	f242 7710 	movw	r7, #10000	; 0x2710
   3beb4:	fb07 0202 	mla	r2, r7, r2, r0
   3beb8:	3a01      	subs	r2, #1
   3beba:	fbb2 f2f0 	udiv	r2, r2, r0
			    (conn->llcp_conn_param.latency != lll->latency) ||
   3bebe:	f8b4 00c2 	ldrh.w	r0, [r4, #194]	; 0xc2
   3bec2:	b292      	uxth	r2, r2
   3bec4:	4290      	cmp	r0, r2
   3bec6:	f47f ad56 	bne.w	3b976 <ull_conn_rx+0x1172>
				conn->llcp_conn_param.state =
   3beca:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
   3bece:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   3bed2:	f042 0201 	orr.w	r2, r2, #1
   3bed6:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3beda:	2201      	movs	r2, #1
   3bedc:	7132      	strb	r2, [r6, #4]
   3bede:	e551      	b.n	3b984 <ull_conn_rx+0x1180>
	    ((pdu_data_tx->llctrl.opcode !=
   3bee0:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3bee2:	2903      	cmp	r1, #3
   3bee4:	d0ce      	beq.n	3be84 <ull_conn_rx+0x1680>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3bee6:	290a      	cmp	r1, #10
   3bee8:	d1d7      	bne.n	3be9a <ull_conn_rx+0x1696>
   3beea:	e7cb      	b.n	3be84 <ull_conn_rx+0x1680>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3beec:	682b      	ldr	r3, [r5, #0]
   3beee:	2201      	movs	r2, #1
   3bef0:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   3bef2:	232a      	movs	r3, #42	; 0x2a
   3bef4:	e6c6      	b.n	3bc84 <ull_conn_rx+0x1480>
   3bef6:	bf00      	nop
   3bef8:	200058c4 	.word	0x200058c4
   3befc:	000530cc 	.word	0x000530cc
   3bf00:	00052d08 	.word	0x00052d08
   3bf04:	00052bbc 	.word	0x00052bbc
   3bf08:	000531dc 	.word	0x000531dc
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   3bf0c:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   3bf10:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   3bf14:	429a      	cmp	r2, r3
   3bf16:	d00e      	beq.n	3bf36 <ull_conn_rx+0x1732>
   3bf18:	4a29      	ldr	r2, [pc, #164]	; (3bfc0 <ull_conn_rx+0x17bc>)
   3bf1a:	492a      	ldr	r1, [pc, #168]	; (3bfc4 <ull_conn_rx+0x17c0>)
   3bf1c:	482a      	ldr	r0, [pc, #168]	; (3bfc8 <ull_conn_rx+0x17c4>)
   3bf1e:	f241 43af 	movw	r3, #5295	; 0x14af
   3bf22:	f00d fdf1 	bl	49b08 <printk>
   3bf26:	4040      	eors	r0, r0
   3bf28:	f380 8811 	msr	BASEPRI, r0
   3bf2c:	f04f 0003 	mov.w	r0, #3
   3bf30:	df02      	svc	2
   3bf32:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3bf36:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   3bf3a:	2106      	movs	r1, #6
   3bf3c:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
   3bf40:	3b01      	subs	r3, #1
   3bf42:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3bf46:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3bf4a:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3bf4e:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
		conn->llcp_cu.win_size = 1U;
   3bf52:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3bf54:	00db      	lsls	r3, r3, #3
   3bf56:	430b      	orrs	r3, r1
   3bf58:	f022 020f 	bic.w	r2, r2, #15
   3bf5c:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   3bf5e:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   3bf62:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   3bf66:	f8d4 119a 	ldr.w	r1, [r4, #410]	; 0x19a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3bf6a:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
		conn->llcp_cu.win_offset_us = 0U;
   3bf6e:	2000      	movs	r0, #0
   3bf70:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   3bf74:	f8c4 111c 	str.w	r1, [r4, #284]	; 0x11c
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   3bf78:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
	if (err) {
   3bf7c:	f7fe bc9f 	b.w	3a8be <ull_conn_rx+0xba>
				     lll->interval) ||
   3bf80:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
   3bf84:	45f4      	cmp	ip, lr
   3bf86:	f47f af08 	bne.w	3bd9a <ull_conn_rx+0x1596>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   3bf8a:	f240 4ce2 	movw	ip, #1250	; 0x4e2
   3bf8e:	fb0c f707 	mul.w	r7, ip, r7
   3bf92:	f242 7c10 	movw	ip, #10000	; 0x2710
   3bf96:	fb0c 7202 	mla	r2, ip, r2, r7
   3bf9a:	3a01      	subs	r2, #1
   3bf9c:	fbb2 f2f7 	udiv	r2, r2, r7
				     lll->latency) ||
   3bfa0:	f8b4 70c2 	ldrh.w	r7, [r4, #194]	; 0xc2
   3bfa4:	b292      	uxth	r2, r2
   3bfa6:	4297      	cmp	r7, r2
   3bfa8:	f47f aef7 	bne.w	3bd9a <ull_conn_rx+0x1596>
   3bfac:	e78d      	b.n	3beca <ull_conn_rx+0x16c6>
	    ((pdu_data_tx->llctrl.opcode !=
   3bfae:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3bfb0:	2903      	cmp	r1, #3
   3bfb2:	f43f af1b 	beq.w	3bdec <ull_conn_rx+0x15e8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3bfb6:	290a      	cmp	r1, #10
   3bfb8:	f47f af3f 	bne.w	3be3a <ull_conn_rx+0x1636>
   3bfbc:	e716      	b.n	3bdec <ull_conn_rx+0x15e8>
   3bfbe:	bf00      	nop
   3bfc0:	000530cc 	.word	0x000530cc
   3bfc4:	00053200 	.word	0x00053200
   3bfc8:	00052bbc 	.word	0x00052bbc

0003bfcc <ull_conn_llcp>:
{
   3bfcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bfd0:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   3bfd2:	f890 00f1 	ldrb.w	r0, [r0, #241]	; 0xf1
   3bfd6:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3bfda:	4298      	cmp	r0, r3
{
   3bfdc:	460e      	mov	r6, r1
   3bfde:	4615      	mov	r5, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   3bfe0:	d031      	beq.n	3c046 <ull_conn_llcp+0x7a>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3bfe2:	1a1b      	subs	r3, r3, r0
   3bfe4:	f003 0303 	and.w	r3, r3, #3
   3bfe8:	2b02      	cmp	r3, #2
   3bfea:	d011      	beq.n	3c010 <ull_conn_llcp+0x44>
   3bfec:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   3bff0:	460a      	mov	r2, r1
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3bff2:	2a00      	cmp	r2, #0
   3bff4:	f2c0 8089 	blt.w	3c10a <ull_conn_llcp+0x13e>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
   3bff8:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
   3bffc:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
   3c000:	1a9b      	subs	r3, r3, r2
   3c002:	b2db      	uxtb	r3, r3
   3c004:	2b01      	cmp	r3, #1
   3c006:	f000 809a 	beq.w	3c13e <ull_conn_llcp+0x172>
	return 0;
   3c00a:	2000      	movs	r0, #0
}
   3c00c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3c010:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   3c014:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
   3c018:	429a      	cmp	r2, r3
   3c01a:	d006      	beq.n	3c02a <ull_conn_llcp+0x5e>
			     LLCP_LENGTH_STATE_RESIZE) ||
   3c01c:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
			if ((conn->llcp_length.state ==
   3c020:	f003 0306 	and.w	r3, r3, #6
   3c024:	2b04      	cmp	r3, #4
   3c026:	f000 8227 	beq.w	3c478 <ull_conn_llcp+0x4ac>
		switch (conn->llcp_type) {
   3c02a:	f894 70f2 	ldrb.w	r7, [r4, #242]	; 0xf2
   3c02e:	1e7b      	subs	r3, r7, #1
   3c030:	2b05      	cmp	r3, #5
   3c032:	f200 820b 	bhi.w	3c44c <ull_conn_llcp+0x480>
   3c036:	e8df f013 	tbh	[pc, r3, lsl #1]
   3c03a:	0024      	.short	0x0024
   3c03c:	012701a8 	.word	0x012701a8
   3c040:	00ec0209 	.word	0x00ec0209
   3c044:	00e1      	.short	0x00e1
   3c046:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   3c04a:	2900      	cmp	r1, #0
   3c04c:	460a      	mov	r2, r1
   3c04e:	f2c0 820d 	blt.w	3c46c <ull_conn_llcp+0x4a0>
	    !conn->llcp_enc.pause_rx) {
   3c052:	f894 7176 	ldrb.w	r7, [r4, #374]	; 0x176
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   3c056:	f017 0f01 	tst.w	r7, #1
   3c05a:	d1cd      	bne.n	3bff8 <ull_conn_llcp+0x2c>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   3c05c:	f894 c119 	ldrb.w	ip, [r4, #281]	; 0x119
   3c060:	f894 e118 	ldrb.w	lr, [r4, #280]	; 0x118
   3c064:	45e6      	cmp	lr, ip
   3c066:	f000 8344 	beq.w	3c6f2 <ull_conn_llcp+0x726>
			conn->llcp_type = LLCP_CONN_UPD;
   3c06a:	2301      	movs	r3, #1
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3c06c:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
			conn->llcp_type = LLCP_CONN_UPD;
   3c070:	f884 30f2 	strb.w	r3, [r4, #242]	; 0xf2
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3c074:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
			conn->llcp_ack -= 2U;
   3c078:	3802      	subs	r0, #2
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3c07a:	429a      	cmp	r2, r3
			conn->llcp_ack -= 2U;
   3c07c:	f884 00f1 	strb.w	r0, [r4, #241]	; 0xf1
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3c080:	d1cc      	bne.n	3c01c <ull_conn_llcp+0x50>
			if (event_conn_upd_prep(conn, lazy,
   3c082:	4632      	mov	r2, r6
   3c084:	4629      	mov	r1, r5
   3c086:	4620      	mov	r0, r4
   3c088:	f7ea ffa6 	bl	26fd8 <event_conn_upd_prep>
   3c08c:	2800      	cmp	r0, #0
   3c08e:	f040 81ea 	bne.w	3c466 <ull_conn_llcp+0x49a>
				return -ECANCELED;
   3c092:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3c096:	e7b9      	b.n	3c00c <ull_conn_llcp+0x40>
	conn->lll.enc_tx = 1;
   3c098:	f043 0310 	orr.w	r3, r3, #16
   3c09c:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c0a0:	7903      	ldrb	r3, [r0, #4]
   3c0a2:	f043 0303 	orr.w	r3, r3, #3
   3c0a6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3c0a8:	2301      	movs	r3, #1
   3c0aa:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   3c0ac:	2306      	movs	r3, #6
   3c0ae:	71c3      	strb	r3, [r0, #7]
	    conn->tx_head &&
   3c0b0:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3c0b4:	2b00      	cmp	r3, #0
   3c0b6:	f000 86bc 	beq.w	3ce32 <ull_conn_llcp+0xe66>
	    !conn->llcp_enc.pause_tx &&
   3c0ba:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c0be:	0797      	lsls	r7, r2, #30
   3c0c0:	f100 86b7 	bmi.w	3ce32 <ull_conn_llcp+0xe66>
	    !conn->llcp_phy.pause_tx &&
   3c0c4:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c0c8:	07d0      	lsls	r0, r2, #31
   3c0ca:	f100 86b2 	bmi.w	3ce32 <ull_conn_llcp+0xe66>
		if (conn->tx_head == conn->tx_data) {
   3c0ce:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3c0d2:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3c0d4:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3c0d8:	f001 8022 	beq.w	3d120 <ull_conn_llcp+0x1154>
		} else if (!conn->tx_ctrl) {
   3c0dc:	2a00      	cmp	r2, #0
   3c0de:	f001 8143 	beq.w	3d368 <ull_conn_llcp+0x139c>
	tx->next = conn->tx_ctrl_last->next;
   3c0e2:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c0e6:	681a      	ldr	r2, [r3, #0]
   3c0e8:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   3c0ec:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   3c0f0:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   3c0f4:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c0f8:	2b00      	cmp	r3, #0
   3c0fa:	f000 8744 	beq.w	3cf86 <ull_conn_llcp+0xfba>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3c0fe:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3c102:	f043 0303 	orr.w	r3, r3, #3
   3c106:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3c10a:	f894 70e5 	ldrb.w	r7, [r4, #229]	; 0xe5
   3c10e:	2f00      	cmp	r7, #0
   3c110:	f43f af72 	beq.w	3bff8 <ull_conn_llcp+0x2c>
		switch (conn->periph.llcp_type) {
   3c114:	2f02      	cmp	r7, #2
   3c116:	f000 8168 	beq.w	3c3ea <ull_conn_llcp+0x41e>
   3c11a:	2f06      	cmp	r7, #6
   3c11c:	d05c      	beq.n	3c1d8 <ull_conn_llcp+0x20c>
   3c11e:	2f01      	cmp	r7, #1
   3c120:	d063      	beq.n	3c1ea <ull_conn_llcp+0x21e>
			LL_ASSERT(0);
   3c122:	4ac6      	ldr	r2, [pc, #792]	; (3c43c <ull_conn_llcp+0x470>)
   3c124:	49c6      	ldr	r1, [pc, #792]	; (3c440 <ull_conn_llcp+0x474>)
   3c126:	48c7      	ldr	r0, [pc, #796]	; (3c444 <ull_conn_llcp+0x478>)
   3c128:	f240 5312 	movw	r3, #1298	; 0x512
   3c12c:	f00d fcec 	bl	49b08 <printk>
   3c130:	4040      	eors	r0, r0
   3c132:	f380 8811 	msr	BASEPRI, r0
   3c136:	f04f 0003 	mov.w	r0, #3
   3c13a:	df02      	svc	2
			break;
   3c13c:	e75c      	b.n	3bff8 <ull_conn_llcp+0x2c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c13e:	48c2      	ldr	r0, [pc, #776]	; (3c448 <ull_conn_llcp+0x47c>)
   3c140:	f7f7 fed6 	bl	33ef0 <mem_acquire>
		if (tx) {
   3c144:	2800      	cmp	r0, #0
   3c146:	d03a      	beq.n	3c1be <ull_conn_llcp+0x1f2>
			conn->llcp_terminate.ack--;
   3c148:	f894 3151 	ldrb.w	r3, [r4, #337]	; 0x151
   3c14c:	3b01      	subs	r3, #1
   3c14e:	f884 3151 	strb.w	r3, [r4, #337]	; 0x151
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c152:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   3c154:	2202      	movs	r2, #2
   3c156:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c158:	f043 0303 	orr.w	r3, r3, #3
   3c15c:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   3c15e:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   3c160:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
			pdu_tx->llctrl.terminate_ind.error_code =
   3c164:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
		if (!conn->tx_ctrl) {
   3c168:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
			pdu_tx->llctrl.terminate_ind.error_code =
   3c16c:	7201      	strb	r1, [r0, #8]
	if (
   3c16e:	2b00      	cmp	r3, #0
   3c170:	f000 8186 	beq.w	3c480 <ull_conn_llcp+0x4b4>
	    !conn->llcp_enc.pause_tx &&
   3c174:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c178:	078d      	lsls	r5, r1, #30
   3c17a:	d412      	bmi.n	3c1a2 <ull_conn_llcp+0x1d6>
	    !conn->llcp_phy.pause_tx &&
   3c17c:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3c180:	07c9      	lsls	r1, r1, #31
   3c182:	d40e      	bmi.n	3c1a2 <ull_conn_llcp+0x1d6>
		if (conn->tx_head == conn->tx_data) {
   3c184:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3c188:	428b      	cmp	r3, r1
   3c18a:	f000 8562 	beq.w	3cc52 <ull_conn_llcp+0xc86>
		} else if (!conn->tx_ctrl) {
   3c18e:	b95a      	cbnz	r2, 3c1a8 <ull_conn_llcp+0x1dc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3c190:	791a      	ldrb	r2, [r3, #4]
   3c192:	f002 0203 	and.w	r2, r2, #3
   3c196:	2a03      	cmp	r2, #3
   3c198:	f000 86ff 	beq.w	3cf9a <ull_conn_llcp+0xfce>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3c19c:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   3c1a0:	e004      	b.n	3c1ac <ull_conn_llcp+0x1e0>
		if (!conn->tx_ctrl) {
   3c1a2:	2a00      	cmp	r2, #0
   3c1a4:	f000 8254 	beq.w	3c650 <ull_conn_llcp+0x684>
	tx->next = conn->tx_ctrl_last->next;
   3c1a8:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c1ac:	681a      	ldr	r2, [r3, #0]
   3c1ae:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3c1b0:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3c1b2:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   3c1b4:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c1b8:	2b00      	cmp	r3, #0
   3c1ba:	f000 8169 	beq.w	3c490 <ull_conn_llcp+0x4c4>
		if (!conn->procedure_expire) {
   3c1be:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   3c1c2:	2b00      	cmp	r3, #0
   3c1c4:	f47f af21 	bne.w	3c00a <ull_conn_llcp+0x3e>
			conn->procedure_expire = conn->supervision_reload;
   3c1c8:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   3c1cc:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
   3c1ce:	bf98      	it	ls
   3c1d0:	3301      	addls	r3, #1
   3c1d2:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   3c1d6:	e718      	b.n	3c00a <ull_conn_llcp+0x3e>
			event_counter = lll->event_counter +
   3c1d8:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   3c1da:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   3c1dc:	4419      	add	r1, r3
   3c1de:	4429      	add	r1, r5
			event_phy_upd_ind_prep(conn, event_counter);
   3c1e0:	4620      	mov	r0, r4
   3c1e2:	b289      	uxth	r1, r1
   3c1e4:	f7fd fd3c 	bl	39c60 <event_phy_upd_ind_prep>
		break;
   3c1e8:	e706      	b.n	3bff8 <ull_conn_llcp+0x2c>
			if (event_conn_upd_prep(conn, lazy,
   3c1ea:	4632      	mov	r2, r6
   3c1ec:	4629      	mov	r1, r5
   3c1ee:	4620      	mov	r0, r4
   3c1f0:	f7ea fef2 	bl	26fd8 <event_conn_upd_prep>
   3c1f4:	2800      	cmp	r0, #0
   3c1f6:	f47f aeff 	bne.w	3bff8 <ull_conn_llcp+0x2c>
   3c1fa:	e74a      	b.n	3c092 <ull_conn_llcp+0xc6>
			event_counter = lll->event_counter +
   3c1fc:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   3c1fe:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   3c200:	4419      	add	r1, r3
   3c202:	4429      	add	r1, r5
			event_phy_upd_ind_prep(conn, event_counter);
   3c204:	b289      	uxth	r1, r1
   3c206:	4620      	mov	r0, r4
   3c208:	f7fd fd2a 	bl	39c60 <event_phy_upd_ind_prep>
		break;
   3c20c:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3c210:	e6ef      	b.n	3bff2 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c212:	488d      	ldr	r0, [pc, #564]	; (3c448 <ull_conn_llcp+0x47c>)
   3c214:	f7f7 fe6c 	bl	33ef0 <mem_acquire>
	if (tx) {
   3c218:	2800      	cmp	r0, #0
   3c21a:	f000 8124 	beq.w	3c466 <ull_conn_llcp+0x49a>
		conn->llcp_ack = conn->llcp_req;
   3c21e:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c222:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c226:	7903      	ldrb	r3, [r0, #4]
   3c228:	f043 0303 	orr.w	r3, r3, #3
   3c22c:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   3c22e:	2301      	movs	r3, #1
   3c230:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   3c232:	2312      	movs	r3, #18
   3c234:	71c3      	strb	r3, [r0, #7]
		if (!conn->tx_ctrl) {
   3c236:	e9d4 3275 	ldrd	r3, r2, [r4, #468]	; 0x1d4
	if (
   3c23a:	2b00      	cmp	r3, #0
   3c23c:	f000 8405 	beq.w	3ca4a <ull_conn_llcp+0xa7e>
	    !conn->llcp_enc.pause_tx &&
   3c240:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c244:	0789      	lsls	r1, r1, #30
   3c246:	f100 82da 	bmi.w	3c7fe <ull_conn_llcp+0x832>
	    !conn->llcp_phy.pause_tx &&
   3c24a:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3c24e:	07cf      	lsls	r7, r1, #31
   3c250:	f100 82d5 	bmi.w	3c7fe <ull_conn_llcp+0x832>
		if (conn->tx_head == conn->tx_data) {
   3c254:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3c258:	428b      	cmp	r3, r1
   3c25a:	f000 866a 	beq.w	3cf32 <ull_conn_llcp+0xf66>
		} else if (!conn->tx_ctrl) {
   3c25e:	2a00      	cmp	r2, #0
   3c260:	f000 86a6 	beq.w	3cfb0 <ull_conn_llcp+0xfe4>
	tx->next = conn->tx_ctrl_last->next;
   3c264:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c268:	681a      	ldr	r2, [r3, #0]
   3c26a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3c26c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3c26e:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   3c270:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c274:	2b00      	cmp	r3, #0
   3c276:	f000 83f0 	beq.w	3ca5a <ull_conn_llcp+0xa8e>
		conn->procedure_expire = conn->procedure_reload;
   3c27a:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   3c27e:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3c282:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   3c286:	e6b4      	b.n	3bff2 <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
   3c288:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3c28c:	f013 0803 	ands.w	r8, r3, #3
   3c290:	f000 8150 	beq.w	3c534 <ull_conn_llcp+0x568>
		if (lll->role &&
   3c294:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3c298:	2b00      	cmp	r3, #0
   3c29a:	f6bf aead 	bge.w	3bff8 <ull_conn_llcp+0x2c>
   3c29e:	f1b8 0f01 	cmp.w	r8, #1
   3c2a2:	f47f af32 	bne.w	3c10a <ull_conn_llcp+0x13e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c2a6:	4868      	ldr	r0, [pc, #416]	; (3c448 <ull_conn_llcp+0x47c>)
   3c2a8:	f7f7 fe22 	bl	33ef0 <mem_acquire>
	if (!tx) {
   3c2ac:	4607      	mov	r7, r0
   3c2ae:	2800      	cmp	r0, #0
   3c2b0:	f000 80d9 	beq.w	3c466 <ull_conn_llcp+0x49a>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c2b4:	7903      	ldrb	r3, [r0, #4]
   3c2b6:	f043 0303 	orr.w	r3, r3, #3
   3c2ba:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   3c2bc:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   3c2c0:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   3c2c2:	f100 0808 	add.w	r8, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   3c2c6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   3c2c8:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   3c2cc:	210c      	movs	r1, #12
   3c2ce:	4640      	mov	r0, r8
   3c2d0:	f004 f8d0 	bl	40474 <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   3c2d4:	4641      	mov	r1, r8
   3c2d6:	2208      	movs	r2, #8
   3c2d8:	f504 7085 	add.w	r0, r4, #266	; 0x10a
   3c2dc:	f00f fd43 	bl	4bd66 <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
   3c2e0:	464a      	mov	r2, r9
   3c2e2:	f107 0110 	add.w	r1, r7, #16
   3c2e6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   3c2ea:	f00f fd3c 	bl	4bd66 <memcpy>
	    conn->tx_head &&
   3c2ee:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3c2f2:	2b00      	cmp	r3, #0
   3c2f4:	f000 85a8 	beq.w	3ce48 <ull_conn_llcp+0xe7c>
	    !conn->llcp_enc.pause_tx &&
   3c2f8:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c2fc:	0791      	lsls	r1, r2, #30
   3c2fe:	f100 84cf 	bmi.w	3cca0 <ull_conn_llcp+0xcd4>
	    !conn->llcp_phy.pause_tx &&
   3c302:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c306:	07d2      	lsls	r2, r2, #31
   3c308:	f100 84ca 	bmi.w	3cca0 <ull_conn_llcp+0xcd4>
		if (conn->tx_head == conn->tx_data) {
   3c30c:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3c310:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3c314:	428b      	cmp	r3, r1
   3c316:	f000 8674 	beq.w	3d002 <ull_conn_llcp+0x1036>
		} else if (!conn->tx_ctrl) {
   3c31a:	2a00      	cmp	r2, #0
   3c31c:	f000 870f 	beq.w	3d13e <ull_conn_llcp+0x1172>
	tx->next = conn->tx_ctrl_last->next;
   3c320:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c324:	681a      	ldr	r2, [r3, #0]
   3c326:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   3c328:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   3c32a:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   3c32c:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c330:	2b00      	cmp	r3, #0
   3c332:	f000 8593 	beq.w	3ce5c <ull_conn_llcp+0xe90>
			rx = ll_pdu_rx_alloc();
   3c336:	f7fb fc85 	bl	37c44 <ll_pdu_rx_alloc>
			if (!rx) {
   3c33a:	4607      	mov	r7, r0
   3c33c:	2800      	cmp	r0, #0
   3c33e:	f000 8092 	beq.w	3c466 <ull_conn_llcp+0x49a>
			rx->hdr.handle = conn->lll.handle;
   3c342:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3c344:	80c3      	strh	r3, [r0, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3c346:	2303      	movs	r3, #3
   3c348:	7103      	strb	r3, [r0, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3c34a:	77c3      	strb	r3, [r0, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c34c:	7f03      	ldrb	r3, [r0, #28]
   3c34e:	f043 0303 	orr.w	r3, r3, #3
   3c352:	7703      	strb	r3, [r0, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3c354:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
   3c356:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3c358:	7743      	strb	r3, [r0, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
   3c35a:	f204 1179 	addw	r1, r4, #377	; 0x179
   3c35e:	3020      	adds	r0, #32
   3c360:	f00f fd01 	bl	4bd66 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   3c364:	f8b4 3177 	ldrh.w	r3, [r4, #375]	; 0x177
   3c368:	853b      	strh	r3, [r7, #40]	; 0x28
			ll_rx_put(rx->hdr.link, rx);
   3c36a:	6838      	ldr	r0, [r7, #0]
   3c36c:	4639      	mov	r1, r7
   3c36e:	f7fb fc39 	bl	37be4 <ll_rx_put>
			ll_rx_sched();
   3c372:	f7fb fc41 	bl	37bf8 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   3c376:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3c37a:	2202      	movs	r2, #2
   3c37c:	f362 0301 	bfi	r3, r2, #0, #2
   3c380:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
   3c384:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3c388:	e633      	b.n	3bff2 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   3c38a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   3c38c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3c38e:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   3c390:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
			event_counter = lll->event_counter +
   3c394:	442b      	add	r3, r5
	if (conn->llcp.chan_map.initiate) {
   3c396:	f012 0101 	ands.w	r1, r2, #1
			event_counter = lll->event_counter +
   3c39a:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   3c39c:	d17b      	bne.n	3c496 <ull_conn_llcp+0x4ca>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   3c39e:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
   3c3a2:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3c3a6:	1afb      	subs	r3, r7, r3
   3c3a8:	0418      	lsls	r0, r3, #16
   3c3aa:	f53f ae22 	bmi.w	3bff2 <ull_conn_llcp+0x26>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3c3ae:	2a00      	cmp	r2, #0
   3c3b0:	f2c0 8343 	blt.w	3ca3a <ull_conn_llcp+0xa6e>
			conn->llcp_ack = conn->llcp_req;
   3c3b4:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c3b8:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
		memcpy(&lll->data_chan_map[0],
   3c3bc:	f104 0734 	add.w	r7, r4, #52	; 0x34
   3c3c0:	2205      	movs	r2, #5
   3c3c2:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
   3c3c6:	4638      	mov	r0, r7
   3c3c8:	f00f fccd 	bl	4bd66 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   3c3cc:	2105      	movs	r1, #5
   3c3ce:	4638      	mov	r0, r7
   3c3d0:	f7f7 ff6e 	bl	342b0 <util_ones_count_get>
		lll->data_chan_count =
   3c3d4:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3c3d8:	2301      	movs	r3, #1
		lll->data_chan_count =
   3c3da:	f360 0205 	bfi	r2, r0, #0, #6
   3c3de:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3c3e2:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
   3c3e6:	b252      	sxtb	r2, r2
   3c3e8:	e603      	b.n	3bff2 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   3c3ea:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3c3ec:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   3c3ee:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
			event_counter = lll->event_counter +
   3c3f2:	440b      	add	r3, r1
   3c3f4:	442b      	add	r3, r5
	if (conn->llcp.chan_map.initiate) {
   3c3f6:	f012 0601 	ands.w	r6, r2, #1
			event_counter = lll->event_counter +
   3c3fa:	b29d      	uxth	r5, r3
	if (conn->llcp.chan_map.initiate) {
   3c3fc:	f040 812e 	bne.w	3c65c <ull_conn_llcp+0x690>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   3c400:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
   3c404:	1aeb      	subs	r3, r5, r3
   3c406:	041f      	lsls	r7, r3, #16
   3c408:	f53f adf6 	bmi.w	3bff8 <ull_conn_llcp+0x2c>
		memcpy(&lll->data_chan_map[0],
   3c40c:	f104 0534 	add.w	r5, r4, #52	; 0x34
   3c410:	2205      	movs	r2, #5
   3c412:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
			conn->periph.llcp_type = LLCP_NONE;
   3c416:	f884 60e5 	strb.w	r6, [r4, #229]	; 0xe5
		memcpy(&lll->data_chan_map[0],
   3c41a:	4628      	mov	r0, r5
   3c41c:	f00f fca3 	bl	4bd66 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   3c420:	2105      	movs	r1, #5
   3c422:	4628      	mov	r0, r5
   3c424:	f7f7 ff44 	bl	342b0 <util_ones_count_get>
		lll->data_chan_count =
   3c428:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3c42c:	2201      	movs	r2, #1
		lll->data_chan_count =
   3c42e:	f360 0305 	bfi	r3, r0, #0, #6
   3c432:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3c436:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
   3c43a:	e5dd      	b.n	3bff8 <ull_conn_llcp+0x2c>
   3c43c:	000530cc 	.word	0x000530cc
   3c440:	00052c1c 	.word	0x00052c1c
   3c444:	00052bbc 	.word	0x00052bbc
   3c448:	200059a8 	.word	0x200059a8
			LL_ASSERT(0);
   3c44c:	4ace      	ldr	r2, [pc, #824]	; (3c788 <ull_conn_llcp+0x7bc>)
   3c44e:	49cf      	ldr	r1, [pc, #828]	; (3c78c <ull_conn_llcp+0x7c0>)
   3c450:	48cf      	ldr	r0, [pc, #828]	; (3c790 <ull_conn_llcp+0x7c4>)
   3c452:	f240 43e1 	movw	r3, #1249	; 0x4e1
   3c456:	f00d fb57 	bl	49b08 <printk>
   3c45a:	4040      	eors	r0, r0
   3c45c:	f380 8811 	msr	BASEPRI, r0
   3c460:	f04f 0003 	mov.w	r0, #3
   3c464:	df02      	svc	2
			break;
   3c466:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3c46a:	e5c2      	b.n	3bff2 <ull_conn_llcp+0x26>
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   3c46c:	f894 70e5 	ldrb.w	r7, [r4, #229]	; 0xe5
   3c470:	2f00      	cmp	r7, #0
   3c472:	f47f ae4f 	bne.w	3c114 <ull_conn_llcp+0x148>
   3c476:	e5ec      	b.n	3c052 <ull_conn_llcp+0x86>
				event_len_prep(conn);
   3c478:	4620      	mov	r0, r4
   3c47a:	f7fd faed 	bl	39a58 <event_len_prep>
   3c47e:	e5d4      	b.n	3c02a <ull_conn_llcp+0x5e>
		if (!conn->tx_ctrl) {
   3c480:	2a00      	cmp	r2, #0
   3c482:	f47f ae91 	bne.w	3c1a8 <ull_conn_llcp+0x1dc>
			tx->next = conn->tx_head;
   3c486:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3c488:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3c48c:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
		conn->tx_data_last = tx;
   3c490:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   3c494:	e693      	b.n	3c1be <ull_conn_llcp+0x1f2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c496:	48bf      	ldr	r0, [pc, #764]	; (3c794 <ull_conn_llcp+0x7c8>)
   3c498:	f7f7 fd2a 	bl	33ef0 <mem_acquire>
		if (tx) {
   3c49c:	4680      	mov	r8, r0
   3c49e:	2800      	cmp	r0, #0
   3c4a0:	d0e1      	beq.n	3c466 <ull_conn_llcp+0x49a>
						      conn->lll.latency + 6;
   3c4a2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   3c4a4:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
						      conn->lll.latency + 6;
   3c4a8:	3306      	adds	r3, #6
   3c4aa:	443b      	add	r3, r7
			conn->llcp.chan_map.instant = event_counter +
   3c4ac:	f8a4 30fa 	strh.w	r3, [r4, #250]	; 0xfa
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c4b0:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   3c4b2:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c4b6:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   3c4ba:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c4be:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3c4c0:	2308      	movs	r3, #8
   3c4c2:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   3c4c4:	2301      	movs	r3, #1
   3c4c6:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   3c4c8:	2205      	movs	r2, #5
   3c4ca:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
   3c4ce:	3008      	adds	r0, #8
   3c4d0:	f00f fc49 	bl	4bd66 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   3c4d4:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
   3c4d8:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
   3c4dc:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3c4e0:	2b00      	cmp	r3, #0
   3c4e2:	f000 82bd 	beq.w	3ca60 <ull_conn_llcp+0xa94>
	    !conn->llcp_enc.pause_tx &&
   3c4e6:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c4ea:	0792      	lsls	r2, r2, #30
   3c4ec:	f100 82b8 	bmi.w	3ca60 <ull_conn_llcp+0xa94>
	    !conn->llcp_phy.pause_tx &&
   3c4f0:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c4f4:	07d7      	lsls	r7, r2, #31
   3c4f6:	f100 82b3 	bmi.w	3ca60 <ull_conn_llcp+0xa94>
		if (conn->tx_head == conn->tx_data) {
   3c4fa:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3c4fe:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3c502:	428b      	cmp	r3, r1
   3c504:	f000 855e 	beq.w	3cfc4 <ull_conn_llcp+0xff8>
		} else if (!conn->tx_ctrl) {
   3c508:	2a00      	cmp	r2, #0
   3c50a:	f000 866f 	beq.w	3d1ec <ull_conn_llcp+0x1220>
	tx->next = conn->tx_ctrl_last->next;
   3c50e:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c512:	681a      	ldr	r2, [r3, #0]
   3c514:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   3c518:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   3c51c:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   3c520:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3c524:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	if (!tx->next) {
   3c528:	2b00      	cmp	r3, #0
   3c52a:	f47f af5c 	bne.w	3c3e6 <ull_conn_llcp+0x41a>
		conn->tx_data_last = tx;
   3c52e:	f8c4 81e4 	str.w	r8, [r4, #484]	; 0x1e4
   3c532:	e758      	b.n	3c3e6 <ull_conn_llcp+0x41a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c534:	4897      	ldr	r0, [pc, #604]	; (3c794 <ull_conn_llcp+0x7c8>)
   3c536:	f7f7 fcdb 	bl	33ef0 <mem_acquire>
	if (!tx) {
   3c53a:	4681      	mov	r9, r0
   3c53c:	2800      	cmp	r0, #0
   3c53e:	d092      	beq.n	3c466 <ull_conn_llcp+0x49a>
	if (!lll->role) {
   3c540:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3c544:	2b00      	cmp	r3, #0
   3c546:	f280 8303 	bge.w	3cb50 <ull_conn_llcp+0xb84>
	else if (!lll->enc_rx) {
   3c54a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3c54e:	0719      	lsls	r1, r3, #28
   3c550:	f53f ada2 	bmi.w	3c098 <ull_conn_llcp+0xcc>
		if (conn->llcp.encryption.error_code) {
   3c554:	f894 8101 	ldrb.w	r8, [r4, #257]	; 0x101
   3c558:	f1b8 0f00 	cmp.w	r8, #0
   3c55c:	f040 8482 	bne.w	3ce64 <ull_conn_llcp+0xe98>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   3c560:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   3c564:	463b      	mov	r3, r7
   3c566:	4642      	mov	r2, r8
   3c568:	f504 7181 	add.w	r1, r4, #258	; 0x102
   3c56c:	f204 1081 	addw	r0, r4, #385	; 0x181
   3c570:	f006 faec 	bl	42b4c <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
   3c574:	4639      	mov	r1, r7
   3c576:	2210      	movs	r2, #16
   3c578:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   3c57c:	f00f fbf3 	bl	4bd66 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   3c580:	2208      	movs	r2, #8
   3c582:	f104 0194 	add.w	r1, r4, #148	; 0x94
   3c586:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   3c58a:	f00f fbec 	bl	4bd66 <memcpy>
			lll->ccm_rx.direction = 1U;
   3c58e:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
			lll->ccm_rx.counter = 0U;
   3c592:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->ccm_rx.direction = 1U;
   3c596:	f043 0301 	orr.w	r3, r3, #1
   3c59a:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   3c59e:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			lll->ccm_rx.counter = 0U;
   3c5a2:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
			lll->ccm_tx.direction = 0U;
   3c5a6:	f368 0300 	bfi	r3, r8, #0, #1
   3c5aa:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
   3c5ae:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
   3c5b2:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
			lll->enc_rx = 1U;
   3c5b6:	f043 0308 	orr.w	r3, r3, #8
   3c5ba:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c5be:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   3c5c2:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c5c6:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
   3c5ca:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
			lll->ccm_rx.counter = 0U;
   3c5ce:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   3c5d2:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   3c5d6:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   3c5da:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c5de:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3c5e2:	2301      	movs	r3, #1
   3c5e4:	f889 3005 	strb.w	r3, [r9, #5]
	    conn->tx_head &&
   3c5e8:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
			pdu_ctrl_tx->llctrl.opcode =
   3c5ec:	2305      	movs	r3, #5
   3c5ee:	f889 3007 	strb.w	r3, [r9, #7]
	if (
   3c5f2:	2a00      	cmp	r2, #0
   3c5f4:	f000 8360 	beq.w	3ccb8 <ull_conn_llcp+0xcec>
	    !conn->llcp_enc.pause_tx &&
   3c5f8:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c5fc:	0799      	lsls	r1, r3, #30
   3c5fe:	f100 835b 	bmi.w	3ccb8 <ull_conn_llcp+0xcec>
	    !conn->llcp_phy.pause_tx &&
   3c602:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   3c606:	07db      	lsls	r3, r3, #31
   3c608:	f100 8356 	bmi.w	3ccb8 <ull_conn_llcp+0xcec>
		if (conn->tx_head == conn->tx_data) {
   3c60c:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3c610:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3c614:	428a      	cmp	r2, r1
   3c616:	f000 8574 	beq.w	3d102 <ull_conn_llcp+0x1136>
		} else if (!conn->tx_ctrl) {
   3c61a:	2b00      	cmp	r3, #0
   3c61c:	f000 86b4 	beq.w	3d388 <ull_conn_llcp+0x13bc>
	tx->next = conn->tx_ctrl_last->next;
   3c620:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c624:	681a      	ldr	r2, [r3, #0]
   3c626:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   3c62a:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   3c62e:	f8d9 3000 	ldr.w	r3, [r9]
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3c632:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	conn->tx_ctrl_last = tx;
   3c636:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c63a:	2b00      	cmp	r3, #0
   3c63c:	f000 82f7 	beq.w	3cc2e <ull_conn_llcp+0xc62>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3c640:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3c644:	f043 0303 	orr.w	r3, r3, #3
   3c648:	b252      	sxtb	r2, r2
   3c64a:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
   3c64e:	e4d0      	b.n	3bff2 <ull_conn_llcp+0x26>
			tx->next = conn->tx_head;
   3c650:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3c652:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3c656:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c65a:	e5b0      	b.n	3c1be <ull_conn_llcp+0x1f2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c65c:	484d      	ldr	r0, [pc, #308]	; (3c794 <ull_conn_llcp+0x7c8>)
   3c65e:	f7f7 fc47 	bl	33ef0 <mem_acquire>
		if (tx) {
   3c662:	4606      	mov	r6, r0
   3c664:	2800      	cmp	r0, #0
   3c666:	f43f acc7 	beq.w	3bff8 <ull_conn_llcp+0x2c>
						      conn->lll.latency + 6;
   3c66a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   3c66c:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c670:	7902      	ldrb	r2, [r0, #4]
						      conn->lll.latency + 6;
   3c672:	3306      	adds	r3, #6
			conn->llcp.chan_map.initiate = 0U;
   3c674:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
   3c678:	442b      	add	r3, r5
			conn->llcp.chan_map.initiate = 0U;
   3c67a:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
			conn->llcp.chan_map.instant = event_counter +
   3c67e:	f8a4 30fa 	strh.w	r3, [r4, #250]	; 0xfa
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c682:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
   3c686:	2301      	movs	r3, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3c688:	2108      	movs	r1, #8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c68a:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3c68c:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   3c68e:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   3c690:	2205      	movs	r2, #5
   3c692:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
   3c696:	3008      	adds	r0, #8
   3c698:	f00f fb65 	bl	4bd66 <memcpy>
	    conn->tx_head &&
   3c69c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   3c6a0:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
   3c6a4:	f8a6 200d 	strh.w	r2, [r6, #13]
	if (
   3c6a8:	2b00      	cmp	r3, #0
   3c6aa:	f000 8358 	beq.w	3cd5e <ull_conn_llcp+0xd92>
	    !conn->llcp_enc.pause_tx &&
   3c6ae:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c6b2:	0791      	lsls	r1, r2, #30
   3c6b4:	f100 82e8 	bmi.w	3cc88 <ull_conn_llcp+0xcbc>
	    !conn->llcp_phy.pause_tx &&
   3c6b8:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c6bc:	07d2      	lsls	r2, r2, #31
   3c6be:	f100 82e3 	bmi.w	3cc88 <ull_conn_llcp+0xcbc>
		if (conn->tx_head == conn->tx_data) {
   3c6c2:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3c6c6:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3c6ca:	428b      	cmp	r3, r1
   3c6cc:	f000 848b 	beq.w	3cfe6 <ull_conn_llcp+0x101a>
		} else if (!conn->tx_ctrl) {
   3c6d0:	2a00      	cmp	r2, #0
   3c6d2:	f000 859c 	beq.w	3d20e <ull_conn_llcp+0x1242>
	tx->next = conn->tx_ctrl_last->next;
   3c6d6:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c6da:	681a      	ldr	r2, [r3, #0]
   3c6dc:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
   3c6de:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
   3c6e0:	6833      	ldr	r3, [r6, #0]
	conn->tx_ctrl_last = tx;
   3c6e2:	f8c4 61dc 	str.w	r6, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c6e6:	2b00      	cmp	r3, #0
   3c6e8:	f47f ac86 	bne.w	3bff8 <ull_conn_llcp+0x2c>
		conn->tx_data_last = tx;
   3c6ec:	f8c4 61e4 	str.w	r6, [r4, #484]	; 0x1e4
   3c6f0:	e482      	b.n	3bff8 <ull_conn_llcp+0x2c>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   3c6f2:	f894 e131 	ldrb.w	lr, [r4, #305]	; 0x131
   3c6f6:	f894 8130 	ldrb.w	r8, [r4, #304]	; 0x130
   3c6fa:	45c6      	cmp	lr, r8
   3c6fc:	d04c      	beq.n	3c798 <ull_conn_llcp+0x7cc>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   3c6fe:	ebae 0e08 	sub.w	lr, lr, r8
   3c702:	f01e 0f01 	tst.w	lr, #1
   3c706:	f43f ac74 	beq.w	3bff2 <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
   3c70a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3c70e:	f013 0701 	ands.w	r7, r3, #1
   3c712:	f000 81b1 	beq.w	3ca78 <ull_conn_llcp+0xaac>
		rx = ll_pdu_rx_alloc();
   3c716:	f7fb fa95 	bl	37c44 <ll_pdu_rx_alloc>
		if (!rx) {
   3c71a:	4607      	mov	r7, r0
   3c71c:	2800      	cmp	r0, #0
   3c71e:	f000 8147 	beq.w	3c9b0 <ull_conn_llcp+0x9e4>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   3c722:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
   3c726:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
		rx->hdr.handle = conn->lll.handle;
   3c72a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3c72c:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3c72e:	2303      	movs	r3, #3
   3c730:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c732:	7f03      	ldrb	r3, [r0, #28]
   3c734:	f043 0303 	orr.w	r3, r3, #3
   3c738:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   3c73a:	2309      	movs	r3, #9
   3c73c:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   3c73e:	77c3      	strb	r3, [r0, #31]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   3c740:	2208      	movs	r2, #8
   3c742:	2100      	movs	r1, #0
   3c744:	3020      	adds	r0, #32
   3c746:	f00f fb19 	bl	4bd7c <memset>
	sys_put_le32(val >> 32, &dst[4]);
   3c74a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	dst[0] = val;
   3c74e:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   3c750:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
   3c754:	f363 0207 	bfi	r2, r3, #0, #8
   3c758:	f361 220f 	bfi	r2, r1, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   3c75c:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   3c75e:	f363 4217 	bfi	r2, r3, #16, #8
	dst[1] = val >> 8;
   3c762:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
   3c764:	f363 621f 	bfi	r2, r3, #24, #8
   3c768:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   3c76c:	623b      	str	r3, [r7, #32]
   3c76e:	627a      	str	r2, [r7, #36]	; 0x24
		ll_rx_put(rx->hdr.link, rx);
   3c770:	4639      	mov	r1, r7
		ll_rx_put(rx->hdr.link, rx);
   3c772:	6808      	ldr	r0, [r1, #0]
   3c774:	f7fb fa36 	bl	37be4 <ll_rx_put>
		ll_rx_sched();
   3c778:	f7fb fa3e 	bl	37bf8 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3c77c:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c780:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
   3c784:	e42d      	b.n	3bfe2 <ull_conn_llcp+0x16>
   3c786:	bf00      	nop
   3c788:	000530cc 	.word	0x000530cc
   3c78c:	00052c1c 	.word	0x00052c1c
   3c790:	00052bbc 	.word	0x00052bbc
   3c794:	200059a8 	.word	0x200059a8
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   3c798:	f894 e149 	ldrb.w	lr, [r4, #329]	; 0x149
   3c79c:	f894 8148 	ldrb.w	r8, [r4, #328]	; 0x148
   3c7a0:	45c6      	cmp	lr, r8
   3c7a2:	d035      	beq.n	3c810 <ull_conn_llcp+0x844>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   3c7a4:	ebae 0e08 	sub.w	lr, lr, r8
   3c7a8:	f01e 0f01 	tst.w	lr, #1
   3c7ac:	f43f ac21 	beq.w	3bff2 <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
   3c7b0:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   3c7b4:	07d9      	lsls	r1, r3, #31
   3c7b6:	f140 82f7 	bpl.w	3cda8 <ull_conn_llcp+0xddc>
	} else if (conn->llcp_version.rx) {
   3c7ba:	0798      	lsls	r0, r3, #30
   3c7bc:	f140 82e6 	bpl.w	3cd8c <ull_conn_llcp+0xdc0>
		rx = ll_pdu_rx_alloc();
   3c7c0:	f7fb fa40 	bl	37c44 <ll_pdu_rx_alloc>
		if (!rx) {
   3c7c4:	4601      	mov	r1, r0
   3c7c6:	2800      	cmp	r0, #0
   3c7c8:	f000 80f2 	beq.w	3c9b0 <ull_conn_llcp+0x9e4>
		conn->llcp_version.ack = conn->llcp_version.req;
   3c7cc:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
   3c7d0:	f884 3149 	strb.w	r3, [r4, #329]	; 0x149
		rx->hdr.handle = conn->lll.handle;
   3c7d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3c7d6:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3c7d8:	2303      	movs	r3, #3
   3c7da:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c7dc:	7f03      	ldrb	r3, [r0, #28]
   3c7de:	f043 0303 	orr.w	r3, r3, #3
   3c7e2:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   3c7e4:	2306      	movs	r3, #6
   3c7e6:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   3c7e8:	230c      	movs	r3, #12
   3c7ea:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
   3c7ec:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
   3c7f0:	f880 3020 	strb.w	r3, [r0, #32]
			sys_cpu_to_le16(conn->llcp_version.company_id);
   3c7f4:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		pdu->llctrl.version_ind.company_id =
   3c7f8:	f8c0 3021 	str.w	r3, [r0, #33]	; 0x21
   3c7fc:	e7b9      	b.n	3c772 <ull_conn_llcp+0x7a6>
		if (!conn->tx_ctrl) {
   3c7fe:	2a00      	cmp	r2, #0
   3c800:	f47f ad30 	bne.w	3c264 <ull_conn_llcp+0x298>
			tx->next = conn->tx_head;
   3c804:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3c806:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3c80a:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c80e:	e534      	b.n	3c27a <ull_conn_llcp+0x2ae>
		} else if (conn->llcp_conn_param.ack !=
   3c810:	f894 8195 	ldrb.w	r8, [r4, #405]	; 0x195
   3c814:	f894 e194 	ldrb.w	lr, [r4, #404]	; 0x194
   3c818:	45f0      	cmp	r8, lr
   3c81a:	f000 820b 	beq.w	3cc34 <ull_conn_llcp+0xc68>
	return conn_upd_curr && (conn_upd_curr != conn);
   3c81e:	f8df 8320 	ldr.w	r8, [pc, #800]	; 3cb40 <ull_conn_llcp+0xb74>
			event_counter = lll->event_counter +
   3c822:	f8b4 9032 	ldrh.w	r9, [r4, #50]	; 0x32
	return conn_upd_curr && (conn_upd_curr != conn);
   3c826:	f8d8 e000 	ldr.w	lr, [r8]
					lll->latency_prepare + lazy;
   3c82a:	f8b4 a02e 	ldrh.w	sl, [r4, #46]	; 0x2e
	return conn_upd_curr && (conn_upd_curr != conn);
   3c82e:	f1be 0f00 	cmp.w	lr, #0
   3c832:	f000 8358 	beq.w	3cee6 <ull_conn_llcp+0xf1a>
   3c836:	4574      	cmp	r4, lr
   3c838:	f47f abdb 	bne.w	3bff2 <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
   3c83c:	f894 e196 	ldrb.w	lr, [r4, #406]	; 0x196
   3c840:	f00e 0e0f 	and.w	lr, lr, #15
   3c844:	f1be 0f08 	cmp.w	lr, #8
   3c848:	f200 8644 	bhi.w	3d4d4 <ull_conn_llcp+0x1508>
   3c84c:	f20f 0b04 	addw	fp, pc, #4
   3c850:	f85b f02e 	ldr.w	pc, [fp, lr, lsl #2]
   3c854:	0003c923 	.word	0x0003c923
   3c858:	0003c9bd 	.word	0x0003c9bd
   3c85c:	0003c8e5 	.word	0x0003c8e5
   3c860:	0003bfe3 	.word	0x0003bfe3
   3c864:	0003bfe3 	.word	0x0003bfe3
   3c868:	0003bfe3 	.word	0x0003bfe3
   3c86c:	0003bfe3 	.word	0x0003bfe3
   3c870:	0003bfe3 	.word	0x0003bfe3
   3c874:	0003c879 	.word	0x0003c879
			CONTAINER_OF(conn->llcp_conn_param.pdu_win_offset0,
   3c878:	f8d4 c1b0 	ldr.w	ip, [r4, #432]	; 0x1b0
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   3c87c:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
			event_counter = lll->event_counter +
   3c880:	eb09 030a 	add.w	r3, r9, sl
   3c884:	442b      	add	r3, r5
		pdu_ctrl_tx->llctrl.conn_param_req.reference_conn_event_count =
   3c886:	f82c 3c02 	strh.w	r3, [ip, #-2]
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   3c88a:	2304      	movs	r3, #4
   3c88c:	f363 0103 	bfi	r1, r3, #0, #4
   3c890:	f884 1196 	strb.w	r1, [r4, #406]	; 0x196
		if (!conn->tx_ctrl) {
   3c894:	e9d4 3175 	ldrd	r3, r1, [r4, #468]	; 0x1d4
		tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
   3c898:	f1ac 0013 	sub.w	r0, ip, #19
	if (
   3c89c:	2b00      	cmp	r3, #0
   3c89e:	f000 83c9 	beq.w	3d034 <ull_conn_llcp+0x1068>
	    conn->tx_head &&
   3c8a2:	07bf      	lsls	r7, r7, #30
   3c8a4:	f100 83c6 	bmi.w	3d034 <ull_conn_llcp+0x1068>
	    !conn->llcp_phy.pause_tx &&
   3c8a8:	f894 71cf 	ldrb.w	r7, [r4, #463]	; 0x1cf
   3c8ac:	07ff      	lsls	r7, r7, #31
   3c8ae:	f100 83c1 	bmi.w	3d034 <ull_conn_llcp+0x1068>
		if (conn->tx_head == conn->tx_data) {
   3c8b2:	f8d4 71e0 	ldr.w	r7, [r4, #480]	; 0x1e0
   3c8b6:	42bb      	cmp	r3, r7
   3c8b8:	f000 85a6 	beq.w	3d408 <ull_conn_llcp+0x143c>
		} else if (!conn->tx_ctrl) {
   3c8bc:	2900      	cmp	r1, #0
   3c8be:	f000 859a 	beq.w	3d3f6 <ull_conn_llcp+0x142a>
	tx->next = conn->tx_ctrl_last->next;
   3c8c2:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c8c6:	6819      	ldr	r1, [r3, #0]
   3c8c8:	f84c 1c13 	str.w	r1, [ip, #-19]
	conn->tx_ctrl_last->next = tx;
   3c8cc:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3c8ce:	f85c 3c13 	ldr.w	r3, [ip, #-19]
	conn->tx_ctrl_last = tx;
   3c8d2:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c8d6:	2b00      	cmp	r3, #0
   3c8d8:	f47f ab8b 	bne.w	3bff2 <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
   3c8dc:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   3c8e0:	f7ff bb87 	b.w	3bff2 <ull_conn_llcp+0x26>
	if (conn->llcp_enc.pause_tx) {
   3c8e4:	07bb      	lsls	r3, r7, #30
   3c8e6:	f53f ab84 	bmi.w	3bff2 <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
   3c8ea:	f7fb f9ab 	bl	37c44 <ll_pdu_rx_alloc>
	if (!rx) {
   3c8ee:	4601      	mov	r1, r0
   3c8f0:	2800      	cmp	r0, #0
   3c8f2:	d05d      	beq.n	3c9b0 <ull_conn_llcp+0x9e4>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   3c8f4:	f894 0196 	ldrb.w	r0, [r4, #406]	; 0x196
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c8f8:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   3c8fa:	2203      	movs	r2, #3
   3c8fc:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c900:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   3c904:	f884 0196 	strb.w	r0, [r4, #406]	; 0x196
	rx->hdr.handle = conn->lll.handle;
   3c908:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c90a:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   3c90c:	2318      	movs	r3, #24
   3c90e:	774b      	strb	r3, [r1, #29]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3c910:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
   3c912:	80c8      	strh	r0, [r1, #6]
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3c914:	710a      	strb	r2, [r1, #4]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3c916:	77cb      	strb	r3, [r1, #31]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   3c918:	e9d4 3266 	ldrd	r3, r2, [r4, #408]	; 0x198
   3c91c:	624a      	str	r2, [r1, #36]	; 0x24
   3c91e:	620b      	str	r3, [r1, #32]
   3c920:	e727      	b.n	3c772 <ull_conn_llcp+0x7a6>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c922:	4888      	ldr	r0, [pc, #544]	; (3cb44 <ull_conn_llcp+0xb78>)
   3c924:	f7f7 fae4 	bl	33ef0 <mem_acquire>
	if (!tx) {
   3c928:	2800      	cmp	r0, #0
   3c92a:	d041      	beq.n	3c9b0 <ull_conn_llcp+0x9e4>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c92c:	7902      	ldrb	r2, [r0, #4]
	conn_upd_curr = conn;
   3c92e:	f8c8 4000 	str.w	r4, [r8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c932:	f042 0203 	orr.w	r2, r2, #3
   3c936:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   3c938:	2218      	movs	r2, #24
   3c93a:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3c93c:	220f      	movs	r2, #15
   3c93e:	71c2      	strb	r2, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   3c940:	e9d4 2166 	ldrd	r2, r1, [r4, #408]	; 0x198
   3c944:	6082      	str	r2, [r0, #8]
	p->preferred_periodicity = 0U;
   3c946:	2200      	movs	r2, #0
   3c948:	7402      	strb	r2, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
   3c94a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3c94e:	f8c0 2017 	str.w	r2, [r0, #23]
   3c952:	f8c0 201b 	str.w	r2, [r0, #27]
   3c956:	4a7c      	ldr	r2, [pc, #496]	; (3cb48 <ull_conn_llcp+0xb7c>)
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   3c958:	60c1      	str	r1, [r0, #12]
	p->offset0 = sys_cpu_to_le16(0x0000);
   3c95a:	f8c0 2013 	str.w	r2, [r0, #19]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
   3c95e:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   3c962:	f8c4 61b4 	str.w	r6, [r4, #436]	; 0x1b4
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
   3c966:	2207      	movs	r2, #7
   3c968:	f362 0303 	bfi	r3, r2, #0, #4
   3c96c:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   3c970:	68a3      	ldr	r3, [r4, #8]
	conn->procedure_expire = conn->procedure_reload;
   3c972:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   3c976:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   3c97a:	2b00      	cmp	r3, #0
   3c97c:	f100 0113 	add.w	r1, r0, #19
   3c980:	da0a      	bge.n	3c998 <ull_conn_llcp+0x9cc>
			uint32_t ticks_prepare_to_start =
   3c982:	68e7      	ldr	r7, [r4, #12]
   3c984:	6860      	ldr	r0, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
   3c986:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
   3c98a:	4287      	cmp	r7, r0
   3c98c:	bf2c      	ite	cs
   3c98e:	19f2      	addcs	r2, r6, r7
   3c990:	1832      	addcc	r2, r6, r0
   3c992:	1ad3      	subs	r3, r2, r3
   3c994:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
		s_mfy_sched_offset.param = (void *)conn;
   3c998:	4b6c      	ldr	r3, [pc, #432]	; (3cb4c <ull_conn_llcp+0xb80>)
		conn->llcp_conn_param.pdu_win_offset0 = win_offs;
   3c99a:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   3c99e:	2201      	movs	r2, #1
   3c9a0:	2102      	movs	r1, #2
   3c9a2:	4610      	mov	r0, r2
		s_mfy_sched_offset.param = (void *)conn;
   3c9a4:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   3c9a6:	f7f7 fb7d 	bl	340a4 <mayfly_enqueue>
		LL_ASSERT(!retval);
   3c9aa:	2800      	cmp	r0, #0
   3c9ac:	f040 84c0 	bne.w	3d330 <ull_conn_llcp+0x1364>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3c9b0:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c9b4:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
		return;
   3c9b8:	f7ff bb13 	b.w	3bfe2 <ull_conn_llcp+0x16>
	if (conn->llcp_conn_param.status) {
   3c9bc:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   3c9c0:	2b00      	cmp	r3, #0
   3c9c2:	f040 835f 	bne.w	3d084 <ull_conn_llcp+0x10b8>
	if (!conn->lll.role) {
   3c9c6:	2900      	cmp	r1, #0
   3c9c8:	f2c0 8463 	blt.w	3d292 <ull_conn_llcp+0x12c6>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3c9cc:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
		conn->llcp_cu.win_offset_us = 0U;
   3c9d0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3c9d4:	2106      	movs	r1, #6
   3c9d6:	f361 0203 	bfi	r2, r1, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   3c9da:	f894 11a0 	ldrb.w	r1, [r4, #416]	; 0x1a0
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3c9de:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
		conn->llcp_cu.win_size = 1U;
   3c9e2:	2001      	movs	r0, #1
		interval_max = conn->llcp_conn_param.interval_max;
   3c9e4:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
		conn->llcp_cu.win_size = 1U;
   3c9e8:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
		if (preferred_periodicity) {
   3c9ec:	2900      	cmp	r1, #0
   3c9ee:	f000 84dc 	beq.w	3d3aa <ull_conn_llcp+0x13de>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   3c9f2:	fbb2 f3f1 	udiv	r3, r2, r1
   3c9f6:	fb13 f301 	smulbb	r3, r3, r1
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
   3c9fa:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   3c9fe:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
   3ca00:	4299      	cmp	r1, r3
   3ca02:	bf98      	it	ls
   3ca04:	461a      	movls	r2, r3
   3ca06:	f8a4 211c 	strh.w	r2, [r4, #284]	; 0x11c
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3ca0a:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   3ca0e:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   3ca12:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
   3ca16:	f8c4 111e 	str.w	r1, [r4, #286]	; 0x11e
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3ca1a:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   3ca1e:	00db      	lsls	r3, r3, #3
   3ca20:	f043 0302 	orr.w	r3, r3, #2
   3ca24:	f022 020f 	bic.w	r2, r2, #15
   3ca28:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
   3ca2a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   3ca2e:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
		conn->llcp_cu.ack--;
   3ca32:	f884 c119 	strb.w	ip, [r4, #281]	; 0x119
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3ca36:	f7ff badf 	b.w	3bff8 <ull_conn_llcp+0x2c>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3ca3a:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   3ca3e:	2b00      	cmp	r3, #0
   3ca40:	f43f acb8 	beq.w	3c3b4 <ull_conn_llcp+0x3e8>
			conn->periph.llcp_type = LLCP_NONE;
   3ca44:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
   3ca48:	e4b8      	b.n	3c3bc <ull_conn_llcp+0x3f0>
		if (!conn->tx_ctrl) {
   3ca4a:	2a00      	cmp	r2, #0
   3ca4c:	f47f ac0a 	bne.w	3c264 <ull_conn_llcp+0x298>
			tx->next = conn->tx_head;
   3ca50:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3ca52:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3ca56:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
		conn->tx_data_last = tx;
   3ca5a:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   3ca5e:	e40c      	b.n	3c27a <ull_conn_llcp+0x2ae>
		if (!conn->tx_ctrl) {
   3ca60:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3ca64:	2a00      	cmp	r2, #0
   3ca66:	f47f ad52 	bne.w	3c50e <ull_conn_llcp+0x542>
			tx->next = conn->tx_head;
   3ca6a:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   3ca6e:	e9c4 8875 	strd	r8, r8, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3ca72:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
   3ca76:	e555      	b.n	3c524 <ull_conn_llcp+0x558>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3ca78:	4832      	ldr	r0, [pc, #200]	; (3cb44 <ull_conn_llcp+0xb78>)
   3ca7a:	f7f7 fa39 	bl	33ef0 <mem_acquire>
	if (tx) {
   3ca7e:	4680      	mov	r8, r0
   3ca80:	2800      	cmp	r0, #0
   3ca82:	d095      	beq.n	3c9b0 <ull_conn_llcp+0x9e4>
		conn->llcp_feature.ack--;
   3ca84:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
   3ca88:	3b01      	subs	r3, #1
   3ca8a:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   3ca8e:	2309      	movs	r3, #9
   3ca90:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   3ca92:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3ca96:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3ca98:	7903      	ldrb	r3, [r0, #4]
   3ca9a:	f043 0303 	orr.w	r3, r3, #3
   3ca9e:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   3caa0:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
   3caa4:	bfb4      	ite	lt
   3caa6:	230e      	movlt	r3, #14
   3caa8:	2308      	movge	r3, #8
   3caaa:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   3caac:	4639      	mov	r1, r7
   3caae:	4410      	add	r0, r2
   3cab0:	f00f f964 	bl	4bd7c <memset>
	sys_put_le32(val >> 32, &dst[4]);
   3cab4:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	dst[0] = val;
   3cab8:	463b      	mov	r3, r7
   3caba:	f362 0307 	bfi	r3, r2, #0, #8
	dst[1] = val >> 8;
   3cabe:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
   3cac2:	f361 230f 	bfi	r3, r1, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   3cac6:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   3cac8:	f362 4317 	bfi	r3, r2, #16, #8
	dst[1] = val >> 8;
   3cacc:	0a12      	lsrs	r2, r2, #8
	dst[0] = val;
   3cace:	f362 631f 	bfi	r3, r2, #24, #8
   3cad2:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   3cad6:	f8c8 2008 	str.w	r2, [r8, #8]
   3cada:	f8c8 300c 	str.w	r3, [r8, #12]
	    conn->tx_head &&
   3cade:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3cae2:	2b00      	cmp	r3, #0
   3cae4:	f000 8233 	beq.w	3cf4e <ull_conn_llcp+0xf82>
	    !conn->llcp_enc.pause_tx &&
   3cae8:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3caec:	0797      	lsls	r7, r2, #30
   3caee:	f100 8141 	bmi.w	3cd74 <ull_conn_llcp+0xda8>
	    !conn->llcp_phy.pause_tx &&
   3caf2:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3caf6:	07d0      	lsls	r0, r2, #31
   3caf8:	f100 813c 	bmi.w	3cd74 <ull_conn_llcp+0xda8>
		if (conn->tx_head == conn->tx_data) {
   3cafc:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cb00:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3cb04:	428b      	cmp	r3, r1
   3cb06:	f000 829d 	beq.w	3d044 <ull_conn_llcp+0x1078>
		} else if (!conn->tx_ctrl) {
   3cb0a:	2a00      	cmp	r2, #0
   3cb0c:	f000 83af 	beq.w	3d26e <ull_conn_llcp+0x12a2>
	tx->next = conn->tx_ctrl_last->next;
   3cb10:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3cb14:	681a      	ldr	r2, [r3, #0]
   3cb16:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   3cb1a:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   3cb1e:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   3cb22:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3cb26:	2b00      	cmp	r3, #0
   3cb28:	f000 821c 	beq.w	3cf64 <ull_conn_llcp+0xf98>
		conn->procedure_expire = conn->procedure_reload;
   3cb2c:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3cb30:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3cb34:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
		conn->procedure_expire = conn->procedure_reload;
   3cb38:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	break;
   3cb3c:	f7ff ba51 	b.w	3bfe2 <ull_conn_llcp+0x16>
   3cb40:	200058c4 	.word	0x200058c4
   3cb44:	200059a8 	.word	0x200059a8
   3cb48:	ffff0000 	.word	0xffff0000
   3cb4c:	20000c34 	.word	0x20000c34
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   3cb50:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   3cb54:	463b      	mov	r3, r7
   3cb56:	4642      	mov	r2, r8
   3cb58:	f504 7181 	add.w	r1, r4, #258	; 0x102
   3cb5c:	f204 1081 	addw	r0, r4, #385	; 0x181
   3cb60:	f005 fff4 	bl	42b4c <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
   3cb64:	4639      	mov	r1, r7
   3cb66:	2210      	movs	r2, #16
   3cb68:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   3cb6c:	f00f f8fb 	bl	4bd66 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   3cb70:	2208      	movs	r2, #8
   3cb72:	f104 0194 	add.w	r1, r4, #148	; 0x94
   3cb76:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   3cb7a:	f00f f8f4 	bl	4bd66 <memcpy>
		lll->enc_rx = 1;
   3cb7e:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
   3cb82:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
		lll->enc_rx = 1;
   3cb86:	f023 0318 	bic.w	r3, r3, #24
   3cb8a:	f043 0318 	orr.w	r3, r3, #24
   3cb8e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.direction = 0;
   3cb92:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
		lll->ccm_rx.counter = 0;
   3cb96:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
		lll->ccm_rx.direction = 0;
   3cb9a:	f368 0300 	bfi	r3, r8, #0, #1
   3cb9e:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1;
   3cba2:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		lll->ccm_rx.counter = 0;
   3cba6:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
		lll->ccm_tx.direction = 1;
   3cbaa:	f043 0301 	orr.w	r3, r3, #1
   3cbae:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3cbb2:	2301      	movs	r3, #1
		lll->ccm_tx.counter = 0;
   3cbb4:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
		lll->ccm_rx.counter = 0;
   3cbb8:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   3cbbc:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   3cbc0:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   3cbc4:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   3cbc8:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cbcc:	f899 2004 	ldrb.w	r2, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3cbd0:	f889 3005 	strb.w	r3, [r9, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   3cbd4:	2306      	movs	r3, #6
   3cbd6:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   3cbda:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cbde:	f042 0203 	orr.w	r2, r2, #3
   3cbe2:	f889 2004 	strb.w	r2, [r9, #4]
	if (
   3cbe6:	2b00      	cmp	r3, #0
   3cbe8:	d043      	beq.n	3cc72 <ull_conn_llcp+0xca6>
	    !conn->llcp_enc.pause_tx &&
   3cbea:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3cbee:	0797      	lsls	r7, r2, #30
   3cbf0:	d43f      	bmi.n	3cc72 <ull_conn_llcp+0xca6>
	    !conn->llcp_phy.pause_tx &&
   3cbf2:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3cbf6:	07d0      	lsls	r0, r2, #31
   3cbf8:	d43b      	bmi.n	3cc72 <ull_conn_llcp+0xca6>
		if (conn->tx_head == conn->tx_data) {
   3cbfa:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3cbfe:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3cc00:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3cc04:	f000 822e 	beq.w	3d064 <ull_conn_llcp+0x1098>
		} else if (!conn->tx_ctrl) {
   3cc08:	2a00      	cmp	r2, #0
   3cc0a:	f000 8339 	beq.w	3d280 <ull_conn_llcp+0x12b4>
	tx->next = conn->tx_ctrl_last->next;
   3cc0e:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3cc12:	681a      	ldr	r2, [r3, #0]
   3cc14:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   3cc18:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   3cc1c:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   3cc20:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3cc24:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	if (!tx->next) {
   3cc28:	2b00      	cmp	r3, #0
   3cc2a:	f47f ad09 	bne.w	3c640 <ull_conn_llcp+0x674>
		conn->tx_data_last = tx;
   3cc2e:	f8c4 91e4 	str.w	r9, [r4, #484]	; 0x1e4
   3cc32:	e505      	b.n	3c640 <ull_conn_llcp+0x674>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3cc34:	f894 71bd 	ldrb.w	r7, [r4, #445]	; 0x1bd
   3cc38:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
   3cc3c:	429f      	cmp	r7, r3
   3cc3e:	d045      	beq.n	3cccc <ull_conn_llcp+0xd00>
			event_len_prep(conn);
   3cc40:	4620      	mov	r0, r4
   3cc42:	f7fc ff09 	bl	39a58 <event_len_prep>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3cc46:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3cc4a:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
   3cc4e:	f7ff b9c8 	b.w	3bfe2 <ull_conn_llcp+0x16>
			conn->tx_data = conn->tx_data->next;
   3cc52:	6819      	ldr	r1, [r3, #0]
   3cc54:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cc58:	2a00      	cmp	r2, #0
   3cc5a:	f47f aaa5 	bne.w	3c1a8 <ull_conn_llcp+0x1dc>
			tx->next = conn->tx_head->next;
   3cc5e:	681a      	ldr	r2, [r3, #0]
   3cc60:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   3cc62:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3cc64:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   3cc66:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
	if (!tx->next) {
   3cc6a:	2b00      	cmp	r3, #0
   3cc6c:	f47f aaa7 	bne.w	3c1be <ull_conn_llcp+0x1f2>
   3cc70:	e40e      	b.n	3c490 <ull_conn_llcp+0x4c4>
		if (!conn->tx_ctrl) {
   3cc72:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3cc76:	2a00      	cmp	r2, #0
   3cc78:	d1c9      	bne.n	3cc0e <ull_conn_llcp+0xc42>
			tx->next = conn->tx_head;
   3cc7a:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   3cc7e:	e9c4 9975 	strd	r9, r9, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cc82:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
   3cc86:	e7cd      	b.n	3cc24 <ull_conn_llcp+0xc58>
		if (!conn->tx_ctrl) {
   3cc88:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3cc8c:	2a00      	cmp	r2, #0
   3cc8e:	f47f ad22 	bne.w	3c6d6 <ull_conn_llcp+0x70a>
			tx->next = conn->tx_head;
   3cc92:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
   3cc94:	e9c4 6675 	strd	r6, r6, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cc98:	f8c4 61dc 	str.w	r6, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3cc9c:	f7ff b9ac 	b.w	3bff8 <ull_conn_llcp+0x2c>
		if (!conn->tx_ctrl) {
   3cca0:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3cca4:	2a00      	cmp	r2, #0
   3cca6:	f47f ab3b 	bne.w	3c320 <ull_conn_llcp+0x354>
			tx->next = conn->tx_head;
   3ccaa:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   3ccac:	e9c4 7775 	strd	r7, r7, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3ccb0:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3ccb4:	f7ff bb3f 	b.w	3c336 <ull_conn_llcp+0x36a>
		if (!conn->tx_ctrl) {
   3ccb8:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
   3ccbc:	2b00      	cmp	r3, #0
   3ccbe:	f47f acaf 	bne.w	3c620 <ull_conn_llcp+0x654>
			tx->next = conn->tx_head;
   3ccc2:	f8c9 2000 	str.w	r2, [r9]
				conn->tx_ctrl = tx;
   3ccc6:	e9c4 9975 	strd	r9, r9, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3ccca:	e4b0      	b.n	3c62e <ull_conn_llcp+0x662>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   3cccc:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
   3ccd0:	f894 71cd 	ldrb.w	r7, [r4, #461]	; 0x1cd
   3ccd4:	429f      	cmp	r7, r3
   3ccd6:	f43f a98c 	beq.w	3bff2 <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
   3ccda:	f894 71ce 	ldrb.w	r7, [r4, #462]	; 0x1ce
   3ccde:	f007 0803 	and.w	r8, r7, #3
   3cce2:	f1b8 0f03 	cmp.w	r8, #3
   3cce6:	f000 8233 	beq.w	3d150 <ull_conn_llcp+0x1184>
   3ccea:	f1b8 0f00 	cmp.w	r8, #0
   3ccee:	f47f a97f 	bne.w	3bff0 <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3ccf2:	48cb      	ldr	r0, [pc, #812]	; (3d020 <ull_conn_llcp+0x1054>)
   3ccf4:	f7f7 f8fc 	bl	33ef0 <mem_acquire>
		if (!tx) {
   3ccf8:	4601      	mov	r1, r0
   3ccfa:	2800      	cmp	r0, #0
   3ccfc:	f43f ae58 	beq.w	3c9b0 <ull_conn_llcp+0x9e4>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   3cd00:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
		conn->lll.phy_flags = conn->llcp_phy.flags;
   3cd04:	f894 71cf 	ldrb.w	r7, [r4, #463]	; 0x1cf
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   3cd08:	2001      	movs	r0, #1
   3cd0a:	f360 0301 	bfi	r3, r0, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   3cd0e:	f894 01d0 	ldrb.w	r0, [r4, #464]	; 0x1d0
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   3cd12:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
		conn->phy_pref_tx = conn->llcp_phy.tx;
   3cd16:	f3c3 0c82 	ubfx	ip, r3, #2, #3
   3cd1a:	f36c 0002 	bfi	r0, ip, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   3cd1e:	f894 c060 	ldrb.w	ip, [r4, #96]	; 0x60
   3cd22:	f3c7 0740 	ubfx	r7, r7, #1, #1
   3cd26:	f367 0cc3 	bfi	ip, r7, #3, #1
   3cd2a:	f884 c060 	strb.w	ip, [r4, #96]	; 0x60
		conn->phy_pref_rx = conn->llcp_phy.rx;
   3cd2e:	f3c3 1c42 	ubfx	ip, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cd32:	790f      	ldrb	r7, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   3cd34:	f36c 00c5 	bfi	r0, ip, #3, #3
   3cd38:	f884 01d0 	strb.w	r0, [r4, #464]	; 0x1d0
		conn->phy_pref_tx = conn->llcp_phy.tx;
   3cd3c:	f3c3 0082 	ubfx	r0, r3, #2, #3
		pdu_ctrl_tx->len =
   3cd40:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cd42:	f047 0703 	orr.w	r7, r7, #3
		pdu_ctrl_tx->len =
   3cd46:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   3cd48:	2316      	movs	r3, #22
		pr->tx_phys = conn->llcp_phy.tx;
   3cd4a:	7208      	strb	r0, [r1, #8]
	ctrl_tx_pause_enqueue(conn, tx, false);
   3cd4c:	4642      	mov	r2, r8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cd4e:	710f      	strb	r7, [r1, #4]
		pr->rx_phys = conn->llcp_phy.rx;
   3cd50:	f881 c009 	strb.w	ip, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   3cd54:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
   3cd56:	4620      	mov	r0, r4
   3cd58:	f7fc fb02 	bl	39360 <ctrl_tx_pause_enqueue>
   3cd5c:	e6e6      	b.n	3cb2c <ull_conn_llcp+0xb60>
		if (!conn->tx_ctrl) {
   3cd5e:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
   3cd62:	2b00      	cmp	r3, #0
   3cd64:	f47f acb7 	bne.w	3c6d6 <ull_conn_llcp+0x70a>
			tx->next = conn->tx_head;
   3cd68:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
   3cd6a:	e9c4 6675 	strd	r6, r6, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cd6e:	f8c4 61dc 	str.w	r6, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3cd72:	e4bb      	b.n	3c6ec <ull_conn_llcp+0x720>
		if (!conn->tx_ctrl) {
   3cd74:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3cd78:	2a00      	cmp	r2, #0
   3cd7a:	f47f aec9 	bne.w	3cb10 <ull_conn_llcp+0xb44>
			tx->next = conn->tx_head;
   3cd7e:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   3cd82:	e9c4 8875 	strd	r8, r8, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cd86:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3cd8a:	e6cf      	b.n	3cb2c <ull_conn_llcp+0xb60>
		LL_ASSERT(0);
   3cd8c:	4aa5      	ldr	r2, [pc, #660]	; (3d024 <ull_conn_llcp+0x1058>)
   3cd8e:	49a6      	ldr	r1, [pc, #664]	; (3d028 <ull_conn_llcp+0x105c>)
   3cd90:	f640 63a1 	movw	r3, #3745	; 0xea1
		LL_ASSERT(0);
   3cd94:	48a5      	ldr	r0, [pc, #660]	; (3d02c <ull_conn_llcp+0x1060>)
   3cd96:	f00c feb7 	bl	49b08 <printk>
   3cd9a:	4040      	eors	r0, r0
   3cd9c:	f380 8811 	msr	BASEPRI, r0
   3cda0:	f04f 0003 	mov.w	r0, #3
   3cda4:	df02      	svc	2
		break;
   3cda6:	e603      	b.n	3c9b0 <ull_conn_llcp+0x9e4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3cda8:	489d      	ldr	r0, [pc, #628]	; (3d020 <ull_conn_llcp+0x1054>)
   3cdaa:	f7f7 f8a1 	bl	33ef0 <mem_acquire>
		if (tx) {
   3cdae:	2800      	cmp	r0, #0
   3cdb0:	f43f adfe 	beq.w	3c9b0 <ull_conn_llcp+0x9e4>
			conn->llcp_version.ack--;
   3cdb4:	f894 3149 	ldrb.w	r3, [r4, #329]	; 0x149
   3cdb8:	3b01      	subs	r3, #1
   3cdba:	f884 3149 	strb.w	r3, [r4, #329]	; 0x149
			conn->llcp_version.tx = 1U;
   3cdbe:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   3cdc2:	f043 0301 	orr.w	r3, r3, #1
   3cdc6:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   3cdca:	7903      	ldrb	r3, [r0, #4]
   3cdcc:	f043 0303 	orr.w	r3, r3, #3
   3cdd0:	7103      	strb	r3, [r0, #4]
			pdu->len =
   3cdd2:	2306      	movs	r3, #6
   3cdd4:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   3cdd6:	f640 430c 	movw	r3, #3084	; 0xc0c
   3cdda:	f8a0 3007 	strh.w	r3, [r0, #7]
			pdu->llctrl.version_ind.company_id = cid;
   3cdde:	4b94      	ldr	r3, [pc, #592]	; (3d030 <ull_conn_llcp+0x1064>)
   3cde0:	f8c0 3009 	str.w	r3, [r0, #9]
	    conn->tx_head &&
   3cde4:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3cde8:	2b00      	cmp	r3, #0
   3cdea:	f000 80c3 	beq.w	3cf74 <ull_conn_llcp+0xfa8>
	    !conn->llcp_enc.pause_tx &&
   3cdee:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3cdf2:	0792      	lsls	r2, r2, #30
   3cdf4:	f100 80be 	bmi.w	3cf74 <ull_conn_llcp+0xfa8>
	    !conn->llcp_phy.pause_tx &&
   3cdf8:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3cdfc:	07d7      	lsls	r7, r2, #31
   3cdfe:	f100 80b9 	bmi.w	3cf74 <ull_conn_llcp+0xfa8>
		if (conn->tx_head == conn->tx_data) {
   3ce02:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3ce06:	4293      	cmp	r3, r2
   3ce08:	f000 82a0 	beq.w	3d34c <ull_conn_llcp+0x1380>
		} else if (!conn->tx_ctrl) {
   3ce0c:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3ce10:	2a00      	cmp	r2, #0
   3ce12:	f000 82c2 	beq.w	3d39a <ull_conn_llcp+0x13ce>
	tx->next = conn->tx_ctrl_last->next;
   3ce16:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3ce1a:	681a      	ldr	r2, [r3, #0]
   3ce1c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3ce1e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3ce20:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   3ce22:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3ce26:	2b00      	cmp	r3, #0
   3ce28:	f47f ae80 	bne.w	3cb2c <ull_conn_llcp+0xb60>
		conn->tx_data_last = tx;
   3ce2c:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
			conn->procedure_expire = conn->procedure_reload;
   3ce30:	e67c      	b.n	3cb2c <ull_conn_llcp+0xb60>
		if (!conn->tx_ctrl) {
   3ce32:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3ce36:	2a00      	cmp	r2, #0
   3ce38:	f47f a953 	bne.w	3c0e2 <ull_conn_llcp+0x116>
			tx->next = conn->tx_head;
   3ce3c:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   3ce40:	e9c4 9975 	strd	r9, r9, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3ce44:	f7ff b954 	b.w	3c0f0 <ull_conn_llcp+0x124>
		if (!conn->tx_ctrl) {
   3ce48:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
   3ce4c:	2b00      	cmp	r3, #0
   3ce4e:	f47f aa67 	bne.w	3c320 <ull_conn_llcp+0x354>
			tx->next = conn->tx_head;
   3ce52:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   3ce54:	e9c4 7775 	strd	r7, r7, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3ce58:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
		conn->tx_data_last = tx;
   3ce5c:	f8c4 71e4 	str.w	r7, [r4, #484]	; 0x1e4
			if (err) {
   3ce60:	f7ff ba69 	b.w	3c336 <ull_conn_llcp+0x36a>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3ce64:	7903      	ldrb	r3, [r0, #4]
   3ce66:	f043 0303 	orr.w	r3, r3, #3
   3ce6a:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   3ce6c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3ce70:	07da      	lsls	r2, r3, #31
   3ce72:	d57a      	bpl.n	3cf6a <ull_conn_llcp+0xf9e>
	    (conn->llcp_feature.features_conn &
   3ce74:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
	if (conn->common.fex_valid &&
   3ce78:	075b      	lsls	r3, r3, #29
   3ce7a:	d576      	bpl.n	3cf6a <ull_conn_llcp+0xf9e>
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3ce7c:	2303      	movs	r3, #3
   3ce7e:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
   3ce80:	f880 8009 	strb.w	r8, [r0, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   3ce84:	2311      	movs	r3, #17
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   3ce86:	f889 7005 	strb.w	r7, [r9, #5]
   3ce8a:	f889 3007 	strb.w	r3, [r9, #7]
	conn->llcp.encryption.error_code = 0U;
   3ce8e:	2300      	movs	r3, #0
   3ce90:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
	    conn->tx_head &&
   3ce94:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3ce98:	2b00      	cmp	r3, #0
   3ce9a:	d041      	beq.n	3cf20 <ull_conn_llcp+0xf54>
	    !conn->llcp_enc.pause_tx &&
   3ce9c:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3cea0:	0797      	lsls	r7, r2, #30
   3cea2:	d43d      	bmi.n	3cf20 <ull_conn_llcp+0xf54>
	    !conn->llcp_phy.pause_tx &&
   3cea4:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3cea8:	07d0      	lsls	r0, r2, #31
   3ceaa:	d439      	bmi.n	3cf20 <ull_conn_llcp+0xf54>
		if (conn->tx_head == conn->tx_data) {
   3ceac:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3ceb0:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3ceb2:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3ceb6:	f000 81cc 	beq.w	3d252 <ull_conn_llcp+0x1286>
		} else if (!conn->tx_ctrl) {
   3ceba:	2a00      	cmp	r2, #0
   3cebc:	f000 82bf 	beq.w	3d43e <ull_conn_llcp+0x1472>
	tx->next = conn->tx_ctrl_last->next;
   3cec0:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3cec4:	681a      	ldr	r2, [r3, #0]
   3cec6:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   3ceca:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   3cece:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   3ced2:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3ced6:	2b00      	cmp	r3, #0
   3ced8:	d067      	beq.n	3cfaa <ull_conn_llcp+0xfde>
			conn->llcp_ack = conn->llcp_req;
   3ceda:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3cede:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3cee2:	f7ff b912 	b.w	3c10a <ull_conn_llcp+0x13e>
	switch (conn->llcp_conn_param.state) {
   3cee6:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3ceea:	f003 030f 	and.w	r3, r3, #15
   3ceee:	2b08      	cmp	r3, #8
   3cef0:	f200 82f0 	bhi.w	3d4d4 <ull_conn_llcp+0x1508>
   3cef4:	a001      	add	r0, pc, #4	; (adr r0, 3cefc <ull_conn_llcp+0xf30>)
   3cef6:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   3cefa:	bf00      	nop
   3cefc:	0003c923 	.word	0x0003c923
   3cf00:	0003c9bd 	.word	0x0003c9bd
   3cf04:	0003c8e5 	.word	0x0003c8e5
   3cf08:	0003bff3 	.word	0x0003bff3
   3cf0c:	0003bff3 	.word	0x0003bff3
   3cf10:	0003bff3 	.word	0x0003bff3
   3cf14:	0003bff3 	.word	0x0003bff3
   3cf18:	0003bff3 	.word	0x0003bff3
   3cf1c:	0003c879 	.word	0x0003c879
		if (!conn->tx_ctrl) {
   3cf20:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3cf24:	2a00      	cmp	r2, #0
   3cf26:	d1cb      	bne.n	3cec0 <ull_conn_llcp+0xef4>
			tx->next = conn->tx_head;
   3cf28:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   3cf2c:	e9c4 9975 	strd	r9, r9, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cf30:	e7cd      	b.n	3cece <ull_conn_llcp+0xf02>
			conn->tx_data = conn->tx_data->next;
   3cf32:	6819      	ldr	r1, [r3, #0]
   3cf34:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cf38:	2a00      	cmp	r2, #0
   3cf3a:	f47f a993 	bne.w	3c264 <ull_conn_llcp+0x298>
			tx->next = conn->tx_head->next;
   3cf3e:	681a      	ldr	r2, [r3, #0]
   3cf40:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   3cf42:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3cf44:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   3cf46:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
   3cf4a:	f7ff b993 	b.w	3c274 <ull_conn_llcp+0x2a8>
		if (!conn->tx_ctrl) {
   3cf4e:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
   3cf52:	2b00      	cmp	r3, #0
   3cf54:	f47f addc 	bne.w	3cb10 <ull_conn_llcp+0xb44>
			tx->next = conn->tx_head;
   3cf58:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   3cf5c:	e9c4 8875 	strd	r8, r8, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cf60:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
		conn->tx_data_last = tx;
   3cf64:	f8c4 81e4 	str.w	r8, [r4, #484]	; 0x1e4
		conn->procedure_expire = conn->procedure_reload;
   3cf68:	e5e0      	b.n	3cb2c <ull_conn_llcp+0xb60>
		p->error_code =	conn->llcp.encryption.error_code;
   3cf6a:	f889 8008 	strb.w	r8, [r9, #8]
   3cf6e:	2702      	movs	r7, #2
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   3cf70:	230d      	movs	r3, #13
   3cf72:	e788      	b.n	3ce86 <ull_conn_llcp+0xeba>
		if (!conn->tx_ctrl) {
   3cf74:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3cf78:	2a00      	cmp	r2, #0
   3cf7a:	f47f af4c 	bne.w	3ce16 <ull_conn_llcp+0xe4a>
			tx->next = conn->tx_head;
   3cf7e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3cf80:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cf84:	e74c      	b.n	3ce20 <ull_conn_llcp+0xe54>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3cf86:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
		conn->tx_data_last = tx;
   3cf8a:	f8c4 91e4 	str.w	r9, [r4, #484]	; 0x1e4
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3cf8e:	f043 0303 	orr.w	r3, r3, #3
   3cf92:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3cf96:	f7ff b8b8 	b.w	3c10a <ull_conn_llcp+0x13e>
	    ((pdu_data_tx->llctrl.opcode !=
   3cf9a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cf9c:	2a03      	cmp	r2, #3
   3cf9e:	f43f ae5e 	beq.w	3cc5e <ull_conn_llcp+0xc92>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3cfa2:	2a0a      	cmp	r2, #10
   3cfa4:	f47f a8fa 	bne.w	3c19c <ull_conn_llcp+0x1d0>
   3cfa8:	e659      	b.n	3cc5e <ull_conn_llcp+0xc92>
		conn->tx_data_last = tx;
   3cfaa:	f8c4 91e4 	str.w	r9, [r4, #484]	; 0x1e4
   3cfae:	e794      	b.n	3ceda <ull_conn_llcp+0xf0e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cfb0:	791a      	ldrb	r2, [r3, #4]
   3cfb2:	f002 0203 	and.w	r2, r2, #3
   3cfb6:	2a03      	cmp	r2, #3
   3cfb8:	f000 8121 	beq.w	3d1fe <ull_conn_llcp+0x1232>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3cfbc:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3cfc0:	f7ff b950 	b.w	3c264 <ull_conn_llcp+0x298>
			conn->tx_data = conn->tx_data->next;
   3cfc4:	6819      	ldr	r1, [r3, #0]
   3cfc6:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cfca:	2a00      	cmp	r2, #0
   3cfcc:	f47f aa9f 	bne.w	3c50e <ull_conn_llcp+0x542>
			tx->next = conn->tx_head->next;
   3cfd0:	681a      	ldr	r2, [r3, #0]
   3cfd2:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   3cfd6:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   3cfda:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   3cfde:	e9c4 8876 	strd	r8, r8, [r4, #472]	; 0x1d8
   3cfe2:	f7ff ba9f 	b.w	3c524 <ull_conn_llcp+0x558>
			conn->tx_data = conn->tx_data->next;
   3cfe6:	6819      	ldr	r1, [r3, #0]
   3cfe8:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cfec:	2a00      	cmp	r2, #0
   3cfee:	f47f ab72 	bne.w	3c6d6 <ull_conn_llcp+0x70a>
			tx->next = conn->tx_head->next;
   3cff2:	681a      	ldr	r2, [r3, #0]
   3cff4:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
   3cff6:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
   3cff8:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
   3cffa:	e9c4 6676 	strd	r6, r6, [r4, #472]	; 0x1d8
   3cffe:	f7ff bb72 	b.w	3c6e6 <ull_conn_llcp+0x71a>
			conn->tx_data = conn->tx_data->next;
   3d002:	6819      	ldr	r1, [r3, #0]
   3d004:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d008:	2a00      	cmp	r2, #0
   3d00a:	f47f a989 	bne.w	3c320 <ull_conn_llcp+0x354>
			tx->next = conn->tx_head->next;
   3d00e:	681a      	ldr	r2, [r3, #0]
   3d010:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   3d012:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   3d014:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   3d016:	e9c4 7776 	strd	r7, r7, [r4, #472]	; 0x1d8
   3d01a:	f7ff b989 	b.w	3c330 <ull_conn_llcp+0x364>
   3d01e:	bf00      	nop
   3d020:	200059a8 	.word	0x200059a8
   3d024:	000530cc 	.word	0x000530cc
   3d028:	00052c1c 	.word	0x00052c1c
   3d02c:	00052bbc 	.word	0x00052bbc
   3d030:	ffff05f1 	.word	0xffff05f1
		if (!conn->tx_ctrl) {
   3d034:	2900      	cmp	r1, #0
   3d036:	f47f ac44 	bne.w	3c8c2 <ull_conn_llcp+0x8f6>
			tx->next = conn->tx_head;
   3d03a:	f84c 3c13 	str.w	r3, [ip, #-19]
				conn->tx_ctrl = tx;
   3d03e:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d042:	e444      	b.n	3c8ce <ull_conn_llcp+0x902>
			conn->tx_data = conn->tx_data->next;
   3d044:	6819      	ldr	r1, [r3, #0]
   3d046:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d04a:	2a00      	cmp	r2, #0
   3d04c:	f47f ad60 	bne.w	3cb10 <ull_conn_llcp+0xb44>
			tx->next = conn->tx_head->next;
   3d050:	681a      	ldr	r2, [r3, #0]
   3d052:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   3d056:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   3d05a:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   3d05e:	e9c4 8876 	strd	r8, r8, [r4, #472]	; 0x1d8
   3d062:	e560      	b.n	3cb26 <ull_conn_llcp+0xb5a>
			conn->tx_data = conn->tx_data->next;
   3d064:	6819      	ldr	r1, [r3, #0]
   3d066:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d06a:	2a00      	cmp	r2, #0
   3d06c:	f47f adcf 	bne.w	3cc0e <ull_conn_llcp+0xc42>
			tx->next = conn->tx_head->next;
   3d070:	681a      	ldr	r2, [r3, #0]
   3d072:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   3d076:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   3d07a:	f8d9 3000 	ldr.w	r3, [r9]
				conn->tx_ctrl_last = tx;
   3d07e:	e9c4 9976 	strd	r9, r9, [r4, #472]	; 0x1d8
   3d082:	e5cf      	b.n	3cc24 <ull_conn_llcp+0xc58>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3d084:	48bd      	ldr	r0, [pc, #756]	; (3d37c <ull_conn_llcp+0x13b0>)
   3d086:	f7f6 ff33 	bl	33ef0 <mem_acquire>
		if (!tx) {
   3d08a:	2800      	cmp	r0, #0
   3d08c:	f43f ac90 	beq.w	3c9b0 <ull_conn_llcp+0x9e4>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3d090:	7902      	ldrb	r2, [r0, #4]
   3d092:	f042 0203 	orr.w	r2, r2, #3
   3d096:	7102      	strb	r2, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   3d098:	2203      	movs	r2, #3
   3d09a:	7142      	strb	r2, [r0, #5]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   3d09c:	f640 7211 	movw	r2, #3857	; 0xf11
   3d0a0:	f8a0 2007 	strh.w	r2, [r0, #7]
		rej->error_code = conn->llcp_conn_param.status;
   3d0a4:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
   3d0a8:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
   3d0aa:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
	if (
   3d0ae:	2a00      	cmp	r2, #0
   3d0b0:	f000 8143 	beq.w	3d33a <ull_conn_llcp+0x136e>
	    !conn->llcp_enc.pause_tx &&
   3d0b4:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   3d0b8:	0789      	lsls	r1, r1, #30
   3d0ba:	f100 813e 	bmi.w	3d33a <ull_conn_llcp+0x136e>
	    !conn->llcp_phy.pause_tx &&
   3d0be:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3d0c2:	07cb      	lsls	r3, r1, #31
   3d0c4:	f100 8139 	bmi.w	3d33a <ull_conn_llcp+0x136e>
		if (conn->tx_head == conn->tx_data) {
   3d0c8:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3d0cc:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   3d0ce:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3d0d2:	f000 81cf 	beq.w	3d474 <ull_conn_llcp+0x14a8>
		} else if (!conn->tx_ctrl) {
   3d0d6:	2900      	cmp	r1, #0
   3d0d8:	f000 81c4 	beq.w	3d464 <ull_conn_llcp+0x1498>
	tx->next = conn->tx_ctrl_last->next;
   3d0dc:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   3d0e0:	6811      	ldr	r1, [r2, #0]
   3d0e2:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3d0e4:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   3d0e6:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   3d0e8:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3d0ec:	2a00      	cmp	r2, #0
   3d0ee:	f000 81b6 	beq.w	3d45e <ull_conn_llcp+0x1492>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3d0f2:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
   3d0f6:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
	conn_upd_curr = NULL;
   3d0fa:	2300      	movs	r3, #0
   3d0fc:	f8c8 3000 	str.w	r3, [r8]
   3d100:	e456      	b.n	3c9b0 <ull_conn_llcp+0x9e4>
			conn->tx_data = conn->tx_data->next;
   3d102:	6811      	ldr	r1, [r2, #0]
   3d104:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d108:	2b00      	cmp	r3, #0
   3d10a:	f47f aa89 	bne.w	3c620 <ull_conn_llcp+0x654>
			tx->next = conn->tx_head->next;
   3d10e:	6813      	ldr	r3, [r2, #0]
   3d110:	f8c9 3000 	str.w	r3, [r9]
			conn->tx_head->next = tx;
   3d114:	f8c2 9000 	str.w	r9, [r2]
				conn->tx_ctrl = tx;
   3d118:	f8c4 91d8 	str.w	r9, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3d11c:	f7ff ba87 	b.w	3c62e <ull_conn_llcp+0x662>
			conn->tx_data = conn->tx_data->next;
   3d120:	6819      	ldr	r1, [r3, #0]
   3d122:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d126:	2a00      	cmp	r2, #0
   3d128:	f47e afdb 	bne.w	3c0e2 <ull_conn_llcp+0x116>
			tx->next = conn->tx_head->next;
   3d12c:	681a      	ldr	r2, [r3, #0]
   3d12e:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   3d132:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl = tx;
   3d136:	f8c4 91d8 	str.w	r9, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3d13a:	f7fe bfd9 	b.w	3c0f0 <ull_conn_llcp+0x124>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d13e:	791a      	ldrb	r2, [r3, #4]
   3d140:	f002 0203 	and.w	r2, r2, #3
   3d144:	2a03      	cmp	r2, #3
   3d146:	d072      	beq.n	3d22e <ull_conn_llcp+0x1262>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d148:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d14c:	f7ff b8e8 	b.w	3c320 <ull_conn_llcp+0x354>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3d150:	f884 31cd 	strb.w	r3, [r4, #461]	; 0x1cd
		if (conn->llcp_phy.tx & PHY_2M) {
   3d154:	f3c7 0382 	ubfx	r3, r7, #2, #3
   3d158:	073f      	lsls	r7, r7, #28
   3d15a:	d478      	bmi.n	3d24e <ull_conn_llcp+0x1282>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   3d15c:	f013 0201 	ands.w	r2, r3, #1
   3d160:	d104      	bne.n	3d16c <ull_conn_llcp+0x11a0>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   3d162:	2b03      	cmp	r3, #3
   3d164:	bf94      	ite	ls
   3d166:	2300      	movls	r3, #0
   3d168:	2301      	movhi	r3, #1
   3d16a:	009a      	lsls	r2, r3, #2
			conn->llcp_phy.tx = PHY_2M;
   3d16c:	f894 11ce 	ldrb.w	r1, [r4, #462]	; 0x1ce
   3d170:	f362 0184 	bfi	r1, r2, #2, #3
   3d174:	f884 11ce 	strb.w	r1, [r4, #462]	; 0x1ce
		if (conn->llcp_phy.rx & PHY_2M) {
   3d178:	f3c1 1342 	ubfx	r3, r1, #5, #3
   3d17c:	0649      	lsls	r1, r1, #25
   3d17e:	d464      	bmi.n	3d24a <ull_conn_llcp+0x127e>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   3d180:	f013 0101 	ands.w	r1, r3, #1
   3d184:	d104      	bne.n	3d190 <ull_conn_llcp+0x11c4>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   3d186:	2b03      	cmp	r3, #3
   3d188:	bf94      	ite	ls
   3d18a:	2300      	movls	r3, #0
   3d18c:	2301      	movhi	r3, #1
   3d18e:	0099      	lsls	r1, r3, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   3d190:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			conn->llcp_phy.rx = PHY_2M;
   3d194:	f894 71ce 	ldrb.w	r7, [r4, #462]	; 0x1ce
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   3d198:	f003 0307 	and.w	r3, r3, #7
			conn->llcp.phy_upd_ind.tx = 0U;
   3d19c:	4293      	cmp	r3, r2
   3d19e:	bf08      	it	eq
   3d1a0:	2200      	moveq	r2, #0
		conn->llcp_ack -= 2U;
   3d1a2:	3802      	subs	r0, #2
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3d1a4:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
		conn->llcp_ack -= 2U;
   3d1a8:	f884 00f1 	strb.w	r0, [r4, #241]	; 0xf1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   3d1ac:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3d1b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
		conn->llcp.phy_upd_ind.initiate = 1U;
   3d1b4:	005b      	lsls	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   3d1b6:	f000 0007 	and.w	r0, r0, #7
			conn->llcp_phy.rx = PHY_2M;
   3d1ba:	f361 1747 	bfi	r7, r1, #5, #3
		conn->llcp.phy_upd_ind.initiate = 1U;
   3d1be:	f043 0301 	orr.w	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   3d1c2:	4288      	cmp	r0, r1
   3d1c4:	bf08      	it	eq
   3d1c6:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   3d1c8:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   3d1cc:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
			conn->llcp_phy.rx = PHY_2M;
   3d1d0:	f884 71ce 	strb.w	r7, [r4, #462]	; 0x1ce
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3d1d4:	f362 0184 	bfi	r1, r2, #2, #3
		conn->llcp.phy_upd_ind.initiate = 1U;
   3d1d8:	f001 011c 	and.w	r1, r1, #28
   3d1dc:	430b      	orrs	r3, r1
		conn->llcp_type = LLCP_PHY_UPD;
   3d1de:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   3d1e0:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
		conn->llcp_type = LLCP_PHY_UPD;
   3d1e4:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3d1e8:	f7fe bf1f 	b.w	3c02a <ull_conn_llcp+0x5e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d1ec:	791a      	ldrb	r2, [r3, #4]
   3d1ee:	f002 0203 	and.w	r2, r2, #3
   3d1f2:	2a03      	cmp	r2, #3
   3d1f4:	d014      	beq.n	3d220 <ull_conn_llcp+0x1254>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d1f6:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d1fa:	f7ff b988 	b.w	3c50e <ull_conn_llcp+0x542>
	    ((pdu_data_tx->llctrl.opcode !=
   3d1fe:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d200:	2a03      	cmp	r2, #3
   3d202:	f43f ae9c 	beq.w	3cf3e <ull_conn_llcp+0xf72>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d206:	2a0a      	cmp	r2, #10
   3d208:	f47f aed8 	bne.w	3cfbc <ull_conn_llcp+0xff0>
   3d20c:	e697      	b.n	3cf3e <ull_conn_llcp+0xf72>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d20e:	791a      	ldrb	r2, [r3, #4]
   3d210:	f002 0203 	and.w	r2, r2, #3
   3d214:	2a03      	cmp	r2, #3
   3d216:	d011      	beq.n	3d23c <ull_conn_llcp+0x1270>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d218:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d21c:	f7ff ba5b 	b.w	3c6d6 <ull_conn_llcp+0x70a>
	    ((pdu_data_tx->llctrl.opcode !=
   3d220:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d222:	2a03      	cmp	r2, #3
   3d224:	f43f aed4 	beq.w	3cfd0 <ull_conn_llcp+0x1004>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d228:	2a0a      	cmp	r2, #10
   3d22a:	d1e4      	bne.n	3d1f6 <ull_conn_llcp+0x122a>
   3d22c:	e6d0      	b.n	3cfd0 <ull_conn_llcp+0x1004>
	    ((pdu_data_tx->llctrl.opcode !=
   3d22e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d230:	2a03      	cmp	r2, #3
   3d232:	f43f aeec 	beq.w	3d00e <ull_conn_llcp+0x1042>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d236:	2a0a      	cmp	r2, #10
   3d238:	d186      	bne.n	3d148 <ull_conn_llcp+0x117c>
   3d23a:	e6e8      	b.n	3d00e <ull_conn_llcp+0x1042>
	    ((pdu_data_tx->llctrl.opcode !=
   3d23c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d23e:	2a03      	cmp	r2, #3
   3d240:	f43f aed7 	beq.w	3cff2 <ull_conn_llcp+0x1026>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d244:	2a0a      	cmp	r2, #10
   3d246:	d1e7      	bne.n	3d218 <ull_conn_llcp+0x124c>
   3d248:	e6d3      	b.n	3cff2 <ull_conn_llcp+0x1026>
   3d24a:	2102      	movs	r1, #2
   3d24c:	e7a0      	b.n	3d190 <ull_conn_llcp+0x11c4>
   3d24e:	2202      	movs	r2, #2
   3d250:	e78c      	b.n	3d16c <ull_conn_llcp+0x11a0>
			conn->tx_data = conn->tx_data->next;
   3d252:	6819      	ldr	r1, [r3, #0]
   3d254:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d258:	2a00      	cmp	r2, #0
   3d25a:	f47f ae31 	bne.w	3cec0 <ull_conn_llcp+0xef4>
			tx->next = conn->tx_head->next;
   3d25e:	681a      	ldr	r2, [r3, #0]
   3d260:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   3d264:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl = tx;
   3d268:	f8c4 91d8 	str.w	r9, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3d26c:	e62f      	b.n	3cece <ull_conn_llcp+0xf02>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d26e:	791a      	ldrb	r2, [r3, #4]
   3d270:	f002 0203 	and.w	r2, r2, #3
   3d274:	2a03      	cmp	r2, #3
   3d276:	f000 80ea 	beq.w	3d44e <ull_conn_llcp+0x1482>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d27a:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d27e:	e447      	b.n	3cb10 <ull_conn_llcp+0xb44>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d280:	791a      	ldrb	r2, [r3, #4]
   3d282:	f002 0203 	and.w	r2, r2, #3
   3d286:	2a03      	cmp	r2, #3
   3d288:	f000 810d 	beq.w	3d4a6 <ull_conn_llcp+0x14da>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d28c:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d290:	e4bd      	b.n	3cc0e <ull_conn_llcp+0xc42>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3d292:	483a      	ldr	r0, [pc, #232]	; (3d37c <ull_conn_llcp+0x13b0>)
   3d294:	f7f6 fe2c 	bl	33ef0 <mem_acquire>
	if (!tx) {
   3d298:	4603      	mov	r3, r0
   3d29a:	2800      	cmp	r0, #0
   3d29c:	f43f ab88 	beq.w	3c9b0 <ull_conn_llcp+0x9e4>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3d2a0:	7902      	ldrb	r2, [r0, #4]
   3d2a2:	f042 0203 	orr.w	r2, r2, #3
   3d2a6:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   3d2a8:	2218      	movs	r2, #24
   3d2aa:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   3d2ac:	2210      	movs	r2, #16
   3d2ae:	71c2      	strb	r2, [r0, #7]
		sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   3d2b0:	e9d4 2166 	ldrd	r2, r1, [r4, #408]	; 0x198
	rsp->interval_min =
   3d2b4:	60c1      	str	r1, [r0, #12]
   3d2b6:	6082      	str	r2, [r0, #8]
	rsp->preferred_periodicity =
   3d2b8:	f894 21a0 	ldrb.w	r2, [r4, #416]	; 0x1a0
   3d2bc:	7402      	strb	r2, [r0, #16]
		sys_cpu_to_le16(conn->llcp_conn_param.reference_conn_event_count);
   3d2be:	f8d4 11a2 	ldr.w	r1, [r4, #418]	; 0x1a2
   3d2c2:	f8d4 21a6 	ldr.w	r2, [r4, #422]	; 0x1a6
   3d2c6:	f8d4 01aa 	ldr.w	r0, [r4, #426]	; 0x1aa
	rsp->reference_conn_event_count =
   3d2ca:	f8c3 0019 	str.w	r0, [r3, #25]
   3d2ce:	f8c3 1011 	str.w	r1, [r3, #17]
   3d2d2:	f8c3 2015 	str.w	r2, [r3, #21]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   3d2d6:	f8b4 21ae 	ldrh.w	r2, [r4, #430]	; 0x1ae
   3d2da:	f8a3 201d 	strh.w	r2, [r3, #29]
		if (!conn->tx_ctrl) {
   3d2de:	e9d4 2175 	ldrd	r2, r1, [r4, #468]	; 0x1d4
	if (
   3d2e2:	2a00      	cmp	r2, #0
   3d2e4:	d07b      	beq.n	3d3de <ull_conn_llcp+0x1412>
	    !conn->llcp_enc.pause_tx &&
   3d2e6:	f894 0176 	ldrb.w	r0, [r4, #374]	; 0x176
	    conn->tx_head &&
   3d2ea:	0787      	lsls	r7, r0, #30
   3d2ec:	d477      	bmi.n	3d3de <ull_conn_llcp+0x1412>
	    !conn->llcp_phy.pause_tx &&
   3d2ee:	f894 01cf 	ldrb.w	r0, [r4, #463]	; 0x1cf
   3d2f2:	07c0      	lsls	r0, r0, #31
   3d2f4:	d473      	bmi.n	3d3de <ull_conn_llcp+0x1412>
		if (conn->tx_head == conn->tx_data) {
   3d2f6:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
   3d2fa:	4282      	cmp	r2, r0
   3d2fc:	d064      	beq.n	3d3c8 <ull_conn_llcp+0x13fc>
		} else if (!conn->tx_ctrl) {
   3d2fe:	2900      	cmp	r1, #0
   3d300:	d05a      	beq.n	3d3b8 <ull_conn_llcp+0x13ec>
	tx->next = conn->tx_ctrl_last->next;
   3d302:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   3d306:	6811      	ldr	r1, [r2, #0]
   3d308:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   3d30a:	6013      	str	r3, [r2, #0]
	if (!tx->next) {
   3d30c:	681a      	ldr	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   3d30e:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3d312:	2a00      	cmp	r2, #0
   3d314:	d04d      	beq.n	3d3b2 <ull_conn_llcp+0x13e6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   3d316:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3d31a:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   3d31e:	2305      	movs	r3, #5
   3d320:	f363 0203 	bfi	r2, r3, #0, #4
   3d324:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3d328:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3d32c:	f7fe be59 	b.w	3bfe2 <ull_conn_llcp+0x16>
		LL_ASSERT(!retval);
   3d330:	4a13      	ldr	r2, [pc, #76]	; (3d380 <ull_conn_llcp+0x13b4>)
   3d332:	4914      	ldr	r1, [pc, #80]	; (3d384 <ull_conn_llcp+0x13b8>)
   3d334:	f640 63f6 	movw	r3, #3830	; 0xef6
   3d338:	e52c      	b.n	3cd94 <ull_conn_llcp+0xdc8>
		if (!conn->tx_ctrl) {
   3d33a:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3d33e:	2900      	cmp	r1, #0
   3d340:	f47f aecc 	bne.w	3d0dc <ull_conn_llcp+0x1110>
			tx->next = conn->tx_head;
   3d344:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3d346:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d34a:	e6cc      	b.n	3d0e6 <ull_conn_llcp+0x111a>
			conn->tx_data = conn->tx_data->next;
   3d34c:	6812      	ldr	r2, [r2, #0]
   3d34e:	f8c4 21e0 	str.w	r2, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d352:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3d356:	2a00      	cmp	r2, #0
   3d358:	f47f ad5d 	bne.w	3ce16 <ull_conn_llcp+0xe4a>
			tx->next = conn->tx_head->next;
   3d35c:	681a      	ldr	r2, [r3, #0]
   3d35e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   3d360:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   3d362:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3d366:	e55b      	b.n	3ce20 <ull_conn_llcp+0xe54>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d368:	791a      	ldrb	r2, [r3, #4]
   3d36a:	f002 0203 	and.w	r2, r2, #3
   3d36e:	2a03      	cmp	r2, #3
   3d370:	f000 80a1 	beq.w	3d4b6 <ull_conn_llcp+0x14ea>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d374:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d378:	f7fe beb3 	b.w	3c0e2 <ull_conn_llcp+0x116>
   3d37c:	200059a8 	.word	0x200059a8
   3d380:	000530cc 	.word	0x000530cc
   3d384:	00052ec0 	.word	0x00052ec0
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d388:	7913      	ldrb	r3, [r2, #4]
   3d38a:	f003 0303 	and.w	r3, r3, #3
   3d38e:	2b03      	cmp	r3, #3
   3d390:	d048      	beq.n	3d424 <ull_conn_llcp+0x1458>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d392:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   3d396:	f7ff b943 	b.w	3c620 <ull_conn_llcp+0x654>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d39a:	791a      	ldrb	r2, [r3, #4]
   3d39c:	f002 0203 	and.w	r2, r2, #3
   3d3a0:	2a03      	cmp	r2, #3
   3d3a2:	d073      	beq.n	3d48c <ull_conn_llcp+0x14c0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d3a4:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d3a8:	e535      	b.n	3ce16 <ull_conn_llcp+0xe4a>
			conn->llcp_cu.interval = interval_max;
   3d3aa:	f8a4 211c 	strh.w	r2, [r4, #284]	; 0x11c
   3d3ae:	f7ff bb2c 	b.w	3ca0a <ull_conn_llcp+0xa3e>
		conn->tx_data_last = tx;
   3d3b2:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
   3d3b6:	e7ae      	b.n	3d316 <ull_conn_llcp+0x134a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d3b8:	7911      	ldrb	r1, [r2, #4]
   3d3ba:	f001 0103 	and.w	r1, r1, #3
   3d3be:	2903      	cmp	r1, #3
   3d3c0:	d013      	beq.n	3d3ea <ull_conn_llcp+0x141e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d3c2:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   3d3c6:	e79c      	b.n	3d302 <ull_conn_llcp+0x1336>
			conn->tx_data = conn->tx_data->next;
   3d3c8:	6810      	ldr	r0, [r2, #0]
   3d3ca:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d3ce:	2900      	cmp	r1, #0
   3d3d0:	d197      	bne.n	3d302 <ull_conn_llcp+0x1336>
			tx->next = conn->tx_head->next;
   3d3d2:	6811      	ldr	r1, [r2, #0]
   3d3d4:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   3d3d6:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   3d3d8:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3d3dc:	e796      	b.n	3d30c <ull_conn_llcp+0x1340>
		if (!conn->tx_ctrl) {
   3d3de:	2900      	cmp	r1, #0
   3d3e0:	d18f      	bne.n	3d302 <ull_conn_llcp+0x1336>
			tx->next = conn->tx_head;
   3d3e2:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   3d3e4:	e9c4 3375 	strd	r3, r3, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d3e8:	e790      	b.n	3d30c <ull_conn_llcp+0x1340>
	    ((pdu_data_tx->llctrl.opcode !=
   3d3ea:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d3ec:	2903      	cmp	r1, #3
   3d3ee:	d0f0      	beq.n	3d3d2 <ull_conn_llcp+0x1406>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d3f0:	290a      	cmp	r1, #10
   3d3f2:	d1e6      	bne.n	3d3c2 <ull_conn_llcp+0x13f6>
   3d3f4:	e7ed      	b.n	3d3d2 <ull_conn_llcp+0x1406>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d3f6:	7919      	ldrb	r1, [r3, #4]
   3d3f8:	f001 0103 	and.w	r1, r1, #3
   3d3fc:	2903      	cmp	r1, #3
   3d3fe:	d018      	beq.n	3d432 <ull_conn_llcp+0x1466>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d400:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d404:	f7ff ba5d 	b.w	3c8c2 <ull_conn_llcp+0x8f6>
			conn->tx_data = conn->tx_data->next;
   3d408:	681f      	ldr	r7, [r3, #0]
   3d40a:	f8c4 71e0 	str.w	r7, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d40e:	2900      	cmp	r1, #0
   3d410:	f47f aa57 	bne.w	3c8c2 <ull_conn_llcp+0x8f6>
			tx->next = conn->tx_head->next;
   3d414:	6819      	ldr	r1, [r3, #0]
   3d416:	f84c 1c13 	str.w	r1, [ip, #-19]
			conn->tx_head->next = tx;
   3d41a:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   3d41c:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3d420:	f7ff ba55 	b.w	3c8ce <ull_conn_llcp+0x902>
	    ((pdu_data_tx->llctrl.opcode !=
   3d424:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d426:	2b03      	cmp	r3, #3
   3d428:	f43f ae71 	beq.w	3d10e <ull_conn_llcp+0x1142>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d42c:	2b0a      	cmp	r3, #10
   3d42e:	d1b0      	bne.n	3d392 <ull_conn_llcp+0x13c6>
   3d430:	e66d      	b.n	3d10e <ull_conn_llcp+0x1142>
	    ((pdu_data_tx->llctrl.opcode !=
   3d432:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d434:	2903      	cmp	r1, #3
   3d436:	d0ed      	beq.n	3d414 <ull_conn_llcp+0x1448>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d438:	290a      	cmp	r1, #10
   3d43a:	d1e1      	bne.n	3d400 <ull_conn_llcp+0x1434>
   3d43c:	e7ea      	b.n	3d414 <ull_conn_llcp+0x1448>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d43e:	791a      	ldrb	r2, [r3, #4]
   3d440:	f002 0203 	and.w	r2, r2, #3
   3d444:	2a03      	cmp	r2, #3
   3d446:	d03e      	beq.n	3d4c6 <ull_conn_llcp+0x14fa>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d448:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d44c:	e538      	b.n	3cec0 <ull_conn_llcp+0xef4>
	    ((pdu_data_tx->llctrl.opcode !=
   3d44e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d450:	2a03      	cmp	r2, #3
   3d452:	f43f adfd 	beq.w	3d050 <ull_conn_llcp+0x1084>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d456:	2a0a      	cmp	r2, #10
   3d458:	f47f af0f 	bne.w	3d27a <ull_conn_llcp+0x12ae>
   3d45c:	e5f8      	b.n	3d050 <ull_conn_llcp+0x1084>
		conn->tx_data_last = tx;
   3d45e:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   3d462:	e646      	b.n	3d0f2 <ull_conn_llcp+0x1126>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d464:	7911      	ldrb	r1, [r2, #4]
   3d466:	f001 0103 	and.w	r1, r1, #3
   3d46a:	2903      	cmp	r1, #3
   3d46c:	d015      	beq.n	3d49a <ull_conn_llcp+0x14ce>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d46e:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   3d472:	e633      	b.n	3d0dc <ull_conn_llcp+0x1110>
			conn->tx_data = conn->tx_data->next;
   3d474:	6813      	ldr	r3, [r2, #0]
   3d476:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d47a:	2900      	cmp	r1, #0
   3d47c:	f47f ae2e 	bne.w	3d0dc <ull_conn_llcp+0x1110>
			tx->next = conn->tx_head->next;
   3d480:	6811      	ldr	r1, [r2, #0]
   3d482:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   3d484:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   3d486:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3d48a:	e62c      	b.n	3d0e6 <ull_conn_llcp+0x111a>
	    ((pdu_data_tx->llctrl.opcode !=
   3d48c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d48e:	2a03      	cmp	r2, #3
   3d490:	f43f af64 	beq.w	3d35c <ull_conn_llcp+0x1390>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d494:	2a0a      	cmp	r2, #10
   3d496:	d185      	bne.n	3d3a4 <ull_conn_llcp+0x13d8>
   3d498:	e760      	b.n	3d35c <ull_conn_llcp+0x1390>
	    ((pdu_data_tx->llctrl.opcode !=
   3d49a:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d49c:	2903      	cmp	r1, #3
   3d49e:	d0ef      	beq.n	3d480 <ull_conn_llcp+0x14b4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d4a0:	290a      	cmp	r1, #10
   3d4a2:	d1e4      	bne.n	3d46e <ull_conn_llcp+0x14a2>
   3d4a4:	e7ec      	b.n	3d480 <ull_conn_llcp+0x14b4>
	    ((pdu_data_tx->llctrl.opcode !=
   3d4a6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d4a8:	2a03      	cmp	r2, #3
   3d4aa:	f43f ade1 	beq.w	3d070 <ull_conn_llcp+0x10a4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d4ae:	2a0a      	cmp	r2, #10
   3d4b0:	f47f aeec 	bne.w	3d28c <ull_conn_llcp+0x12c0>
   3d4b4:	e5dc      	b.n	3d070 <ull_conn_llcp+0x10a4>
	    ((pdu_data_tx->llctrl.opcode !=
   3d4b6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d4b8:	2a03      	cmp	r2, #3
   3d4ba:	f43f ae37 	beq.w	3d12c <ull_conn_llcp+0x1160>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d4be:	2a0a      	cmp	r2, #10
   3d4c0:	f47f af58 	bne.w	3d374 <ull_conn_llcp+0x13a8>
   3d4c4:	e632      	b.n	3d12c <ull_conn_llcp+0x1160>
	    ((pdu_data_tx->llctrl.opcode !=
   3d4c6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d4c8:	2a03      	cmp	r2, #3
   3d4ca:	f43f aec8 	beq.w	3d25e <ull_conn_llcp+0x1292>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d4ce:	2a0a      	cmp	r2, #10
   3d4d0:	d1ba      	bne.n	3d448 <ull_conn_llcp+0x147c>
   3d4d2:	e6c4      	b.n	3d25e <ull_conn_llcp+0x1292>
		LL_ASSERT(0);
   3d4d4:	4a02      	ldr	r2, [pc, #8]	; (3d4e0 <ull_conn_llcp+0x1514>)
   3d4d6:	4903      	ldr	r1, [pc, #12]	; (3d4e4 <ull_conn_llcp+0x1518>)
   3d4d8:	f640 73e1 	movw	r3, #4065	; 0xfe1
   3d4dc:	e45a      	b.n	3cd94 <ull_conn_llcp+0xdc8>
   3d4de:	bf00      	nop
   3d4e0:	000530cc 	.word	0x000530cc
   3d4e4:	00052c1c 	.word	0x00052c1c

0003d4e8 <ull_conn_tx_demux>:
{
   3d4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   3d4ec:	4c26      	ldr	r4, [pc, #152]	; (3d588 <ull_conn_tx_demux+0xa0>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3d4ee:	4f27      	ldr	r7, [pc, #156]	; (3d58c <ull_conn_tx_demux+0xa4>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   3d4f0:	78e2      	ldrb	r2, [r4, #3]
{
   3d4f2:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   3d4f4:	1d26      	adds	r6, r4, #4
   3d4f6:	e024      	b.n	3d542 <ull_conn_tx_demux+0x5a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3d4f8:	4642      	mov	r2, r8
   3d4fa:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3d4fe:	4638      	mov	r0, r7
   3d500:	f7f6 fd28 	bl	33f54 <mem_get>
	if (conn->lll.handle != handle) {
   3d504:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3d506:	4543      	cmp	r3, r8
   3d508:	d128      	bne.n	3d55c <ull_conn_tx_demux+0x74>
			struct node_tx *tx = lll_tx->node;
   3d50a:	f8d9 3004 	ldr.w	r3, [r9, #4]
			if (!conn->tx_data) {
   3d50e:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
			tx->next = NULL;
   3d512:	2100      	movs	r1, #0
   3d514:	6019      	str	r1, [r3, #0]
			if (!conn->tx_data) {
   3d516:	b362      	cbz	r2, 3d572 <ull_conn_tx_demux+0x8a>
			if (conn->tx_data_last) {
   3d518:	f8d0 21e4 	ldr.w	r2, [r0, #484]	; 0x1e4
   3d51c:	b102      	cbz	r2, 3d520 <ull_conn_tx_demux+0x38>
				conn->tx_data_last->next = tx;
   3d51e:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   3d520:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
		MFIFO_DEQUEUE(conn_tx);
   3d524:	78e2      	ldrb	r2, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   3d526:	78a3      	ldrb	r3, [r4, #2]
   3d528:	7861      	ldrb	r1, [r4, #1]
	if (_first == last) {
   3d52a:	429a      	cmp	r2, r3
   3d52c:	d005      	beq.n	3d53a <ull_conn_tx_demux+0x52>
	_first += 1U;
   3d52e:	3301      	adds	r3, #1
   3d530:	b2db      	uxtb	r3, r3
		_first = 0U;
   3d532:	4299      	cmp	r1, r3
   3d534:	bf08      	it	eq
   3d536:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   3d538:	70a3      	strb	r3, [r4, #2]
	} while (--count);
   3d53a:	3d01      	subs	r5, #1
   3d53c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   3d540:	d020      	beq.n	3d584 <ull_conn_tx_demux+0x9c>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   3d542:	78a3      	ldrb	r3, [r4, #2]
   3d544:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
   3d546:	4293      	cmp	r3, r2
   3d548:	d01c      	beq.n	3d584 <ull_conn_tx_demux+0x9c>
	return (void *)(fifo + first * size);
   3d54a:	fb13 f301 	smulbb	r3, r3, r1
   3d54e:	eb03 0906 	add.w	r9, r3, r6
		conn = ll_connected_get(lll_tx->handle);
   3d552:	f836 8003 	ldrh.w	r8, [r6, r3]
	if (handle >= CONFIG_BT_MAX_CONN) {
   3d556:	f1b8 0f05 	cmp.w	r8, #5
   3d55a:	d9cd      	bls.n	3d4f8 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   3d55c:	f8d9 1004 	ldr.w	r1, [r9, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   3d560:	790b      	ldrb	r3, [r1, #4]
   3d562:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   3d566:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   3d56a:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   3d56c:	f7fa fb80 	bl	37c70 <ll_tx_ack_put>
   3d570:	e7d8      	b.n	3d524 <ull_conn_tx_demux+0x3c>
				if (!conn->tx_head) {
   3d572:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
				conn->tx_data = tx;
   3d576:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
				if (!conn->tx_head) {
   3d57a:	2a00      	cmp	r2, #0
   3d57c:	d1cc      	bne.n	3d518 <ull_conn_tx_demux+0x30>
					conn->tx_head = tx;
   3d57e:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
			if (conn->tx_data_last) {
   3d582:	e7cd      	b.n	3d520 <ull_conn_tx_demux+0x38>
}
   3d584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3d588:	20000d38 	.word	0x20000d38
   3d58c:	20003368 	.word	0x20003368

0003d590 <conn_cleanup>:
	if (conn == conn_upd_curr) {
   3d590:	4b39      	ldr	r3, [pc, #228]	; (3d678 <conn_cleanup+0xe8>)
{
   3d592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn == conn_upd_curr) {
   3d596:	681a      	ldr	r2, [r3, #0]
	rx = conn->llcp_rx;
   3d598:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	*((uint8_t *)rx->pdu) = reason;
   3d59c:	f880 1170 	strb.w	r1, [r0, #368]	; 0x170
	if (conn == conn_upd_curr) {
   3d5a0:	4290      	cmp	r0, r2
		conn_upd_curr = NULL;
   3d5a2:	bf04      	itt	eq
   3d5a4:	2200      	moveq	r2, #0
   3d5a6:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   3d5a8:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   3d5aa:	f8a0 215a 	strh.w	r2, [r0, #346]	; 0x15a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3d5ae:	2317      	movs	r3, #23
{
   3d5b0:	b082      	sub	sp, #8
   3d5b2:	4606      	mov	r6, r0
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3d5b4:	f880 3158 	strb.w	r3, [r0, #344]	; 0x158
	while (rx) {
   3d5b8:	b144      	cbz	r4, 3d5cc <conn_cleanup+0x3c>
		hdr->type = NODE_RX_TYPE_RELEASE;
   3d5ba:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   3d5bc:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   3d5be:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   3d5c0:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   3d5c2:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   3d5c4:	f7fa fb0e 	bl	37be4 <ll_rx_put>
	while (rx) {
   3d5c8:	2c00      	cmp	r4, #0
   3d5ca:	d1f7      	bne.n	3d5bc <conn_cleanup+0x2c>
	while (conn->tx_head) {
   3d5cc:	f8d6 11d4 	ldr.w	r1, [r6, #468]	; 0x1d4
   3d5d0:	b381      	cbz	r1, 3d634 <conn_cleanup+0xa4>
		link = mem_acquire(&mem_link_tx.free);
   3d5d2:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 3d67c <conn_cleanup+0xec>
		LL_ASSERT(link);
   3d5d6:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 3d680 <conn_cleanup+0xf0>
   3d5da:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 3d684 <conn_cleanup+0xf4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   3d5de:	f106 0768 	add.w	r7, r6, #104	; 0x68
   3d5e2:	e007      	b.n	3d5f4 <conn_cleanup+0x64>
   3d5e4:	4629      	mov	r1, r5
   3d5e6:	463a      	mov	r2, r7
   3d5e8:	4620      	mov	r0, r4
   3d5ea:	f7f6 fce5 	bl	33fb8 <memq_enqueue>
	while (conn->tx_head) {
   3d5ee:	f8d6 11d4 	ldr.w	r1, [r6, #468]	; 0x1d4
   3d5f2:	b1f9      	cbz	r1, 3d634 <conn_cleanup+0xa4>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   3d5f4:	4630      	mov	r0, r6
   3d5f6:	f7fc f8fd 	bl	397f4 <tx_ull_dequeue>
   3d5fa:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   3d5fc:	4640      	mov	r0, r8
   3d5fe:	f7f6 fc77 	bl	33ef0 <mem_acquire>
		LL_ASSERT(link);
   3d602:	4604      	mov	r4, r0
   3d604:	2800      	cmp	r0, #0
   3d606:	d1ed      	bne.n	3d5e4 <conn_cleanup+0x54>
   3d608:	481f      	ldr	r0, [pc, #124]	; (3d688 <conn_cleanup+0xf8>)
   3d60a:	f640 135e 	movw	r3, #2398	; 0x95e
   3d60e:	4652      	mov	r2, sl
   3d610:	4649      	mov	r1, r9
   3d612:	f00c fa79 	bl	49b08 <printk>
   3d616:	4040      	eors	r0, r0
   3d618:	f380 8811 	msr	BASEPRI, r0
   3d61c:	f04f 0003 	mov.w	r0, #3
   3d620:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   3d622:	4629      	mov	r1, r5
   3d624:	463a      	mov	r2, r7
   3d626:	4620      	mov	r0, r4
   3d628:	f7f6 fcc6 	bl	33fb8 <memq_enqueue>
	while (conn->tx_head) {
   3d62c:	f8d6 11d4 	ldr.w	r1, [r6, #468]	; 0x1d4
   3d630:	2900      	cmp	r1, #0
   3d632:	d1df      	bne.n	3d5f4 <conn_cleanup+0x64>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3d634:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   3d636:	4b15      	ldr	r3, [pc, #84]	; (3d68c <conn_cleanup+0xfc>)
   3d638:	9600      	str	r6, [sp, #0]
   3d63a:	3205      	adds	r2, #5
   3d63c:	b2d2      	uxtb	r2, r2
   3d63e:	2101      	movs	r1, #1
   3d640:	2000      	movs	r0, #0
   3d642:	f7f8 f801 	bl	35648 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   3d646:	f030 0302 	bics.w	r3, r0, #2
   3d64a:	d00c      	beq.n	3d666 <conn_cleanup+0xd6>
   3d64c:	4a0c      	ldr	r2, [pc, #48]	; (3d680 <conn_cleanup+0xf0>)
   3d64e:	4910      	ldr	r1, [pc, #64]	; (3d690 <conn_cleanup+0x100>)
   3d650:	480d      	ldr	r0, [pc, #52]	; (3d688 <conn_cleanup+0xf8>)
   3d652:	f640 1323 	movw	r3, #2339	; 0x923
   3d656:	f00c fa57 	bl	49b08 <printk>
   3d65a:	4040      	eors	r0, r0
   3d65c:	f380 8811 	msr	BASEPRI, r0
   3d660:	f04f 0003 	mov.w	r0, #3
   3d664:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   3d666:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   3d66a:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   3d66c:	8533      	strh	r3, [r6, #40]	; 0x28
}
   3d66e:	b002      	add	sp, #8
   3d670:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   3d674:	f7ff bf38 	b.w	3d4e8 <ull_conn_tx_demux>
   3d678:	200058c4 	.word	0x200058c4
   3d67c:	200058cc 	.word	0x200058cc
   3d680:	000530cc 	.word	0x000530cc
   3d684:	00053124 	.word	0x00053124
   3d688:	00052bbc 	.word	0x00052bbc
   3d68c:	000395c9 	.word	0x000395c9
   3d690:	000531ac 	.word	0x000531ac

0003d694 <ull_conn_done>:
{
   3d694:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   3d696:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   3d698:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   3d69a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3d69e:	429a      	cmp	r2, r3
{
   3d6a0:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   3d6a2:	d069      	beq.n	3d778 <ull_conn_done+0xe4>
	switch (done->extra.mic_state) {
   3d6a4:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   3d6a8:	2b01      	cmp	r3, #1
   3d6aa:	4605      	mov	r5, r0
   3d6ac:	f000 8101 	beq.w	3d8b2 <ull_conn_done+0x21e>
   3d6b0:	2b02      	cmp	r3, #2
   3d6b2:	d063      	beq.n	3d77c <ull_conn_done+0xe8>
   3d6b4:	2b00      	cmp	r3, #0
   3d6b6:	f000 80e2 	beq.w	3d87e <ull_conn_done+0x1ea>
	reason_final = conn->llcp_terminate.reason_final;
   3d6ba:	f894 1153 	ldrb.w	r1, [r4, #339]	; 0x153
	if (reason_final && (
   3d6be:	2900      	cmp	r1, #0
   3d6c0:	d15f      	bne.n	3d782 <ull_conn_done+0xee>
	latency_event = lll->latency_event;
   3d6c2:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   3d6c4:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	ticks_drift_plus = 0U;
   3d6c6:	9109      	str	r1, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   3d6c8:	1c7e      	adds	r6, r7, #1
   3d6ca:	b2b6      	uxth	r6, r6
	ticks_drift_minus = 0U;
   3d6cc:	9108      	str	r1, [sp, #32]
	if (done->extra.trx_cnt) {
   3d6ce:	2b00      	cmp	r3, #0
   3d6d0:	d07c      	beq.n	3d7cc <ull_conn_done+0x138>
		} else if (lll->role) {
   3d6d2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3d6d6:	2b00      	cmp	r3, #0
   3d6d8:	f2c0 8116 	blt.w	3d908 <ull_conn_done+0x274>
	if (done->extra.crc_valid) {
   3d6dc:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   3d6e0:	2200      	movs	r2, #0
   3d6e2:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   3d6e6:	07da      	lsls	r2, r3, #31
   3d6e8:	f140 80e9 	bpl.w	3d8be <ull_conn_done+0x22a>
		conn->supervision_expire = 0U;
   3d6ec:	2500      	movs	r5, #0
   3d6ee:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   3d6f2:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   3d6f6:	b12b      	cbz	r3, 3d704 <ull_conn_done+0x70>
		if (conn->procedure_expire > elapsed_event) {
   3d6f8:	42b3      	cmp	r3, r6
   3d6fa:	f240 8130 	bls.w	3d95e <ull_conn_done+0x2ca>
			conn->procedure_expire -= elapsed_event;
   3d6fe:	1b9b      	subs	r3, r3, r6
   3d700:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   3d704:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   3d708:	b12b      	cbz	r3, 3d716 <ull_conn_done+0x82>
		if (conn->apto_expire > elapsed_event) {
   3d70a:	42b3      	cmp	r3, r6
   3d70c:	f240 8107 	bls.w	3d91e <ull_conn_done+0x28a>
			conn->apto_expire -= elapsed_event;
   3d710:	1b9b      	subs	r3, r3, r6
   3d712:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   3d716:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3d71a:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3d71e:	f894 10f1 	ldrb.w	r1, [r4, #241]	; 0xf1
	if (conn->appto_expire != 0U) {
   3d722:	b15a      	cbz	r2, 3d73c <ull_conn_done+0xa8>
		if (conn->appto_expire > elapsed_event) {
   3d724:	42b2      	cmp	r2, r6
   3d726:	f200 80d3 	bhi.w	3d8d0 <ull_conn_done+0x23c>
			if ((conn->procedure_expire == 0U) &&
   3d72a:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   3d72e:	2000      	movs	r0, #0
   3d730:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   3d734:	b912      	cbnz	r2, 3d73c <ull_conn_done+0xa8>
   3d736:	428b      	cmp	r3, r1
   3d738:	f000 811a 	beq.w	3d970 <ull_conn_done+0x2dc>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3d73c:	1a5b      	subs	r3, r3, r1
   3d73e:	f003 0303 	and.w	r3, r3, #3
   3d742:	2b02      	cmp	r3, #2
   3d744:	f000 80cd 	beq.w	3d8e2 <ull_conn_done+0x24e>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   3d748:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   3d74c:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   3d750:	429a      	cmp	r2, r3
   3d752:	f000 80f7 	beq.w	3d944 <ull_conn_done+0x2b0>
		lll->latency_event = 0U;
   3d756:	2200      	movs	r2, #0
   3d758:	8622      	strh	r2, [r4, #48]	; 0x30
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3d75a:	e9dd 6308 	ldrd	r6, r3, [sp, #32]
	if ((force) || (latency_event != lll->latency_event)) {
   3d75e:	2d00      	cmp	r5, #0
   3d760:	d166      	bne.n	3d830 <ull_conn_done+0x19c>
   3d762:	42ba      	cmp	r2, r7
   3d764:	f000 80ca 	beq.w	3d8fc <ull_conn_done+0x268>
		lazy = lll->latency_event + 1U;
   3d768:	3201      	adds	r2, #1
   3d76a:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3d76c:	2b00      	cmp	r3, #0
   3d76e:	d161      	bne.n	3d834 <ull_conn_done+0x1a0>
   3d770:	2e00      	cmp	r6, #0
   3d772:	d15f      	bne.n	3d834 <ull_conn_done+0x1a0>
   3d774:	2900      	cmp	r1, #0
   3d776:	d15d      	bne.n	3d834 <ull_conn_done+0x1a0>
}
   3d778:	b00b      	add	sp, #44	; 0x2c
   3d77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_terminate.reason_final =
   3d77c:	213d      	movs	r1, #61	; 0x3d
   3d77e:	f884 1153 	strb.w	r1, [r4, #339]	; 0x153
	if (reason_final && (
   3d782:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3d786:	2b00      	cmp	r3, #0
   3d788:	db1a      	blt.n	3d7c0 <ull_conn_done+0x12c>
			       conn->llcp_terminate.ack) & 0xFF) ==
   3d78a:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
   3d78e:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
   3d792:	1a9b      	subs	r3, r3, r2
			    lll->role ||
   3d794:	b2db      	uxtb	r3, r3
   3d796:	2b03      	cmp	r3, #3
   3d798:	d012      	beq.n	3d7c0 <ull_conn_done+0x12c>
			     TERM_ACKED) ||
   3d79a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3d79e:	f013 0204 	ands.w	r2, r3, #4
   3d7a2:	d10d      	bne.n	3d7c0 <ull_conn_done+0x12c>
			    conn->central.terminate_ack ||
   3d7a4:	293d      	cmp	r1, #61	; 0x3d
   3d7a6:	d00b      	beq.n	3d7c0 <ull_conn_done+0x12c>
	latency_event = lll->latency_event;
   3d7a8:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	ticks_drift_minus = 0U;
   3d7aa:	e9cd 2208 	strd	r2, r2, [sp, #32]
	if (done->extra.trx_cnt) {
   3d7ae:	8caa      	ldrh	r2, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
   3d7b0:	1c7e      	adds	r6, r7, #1
   3d7b2:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   3d7b4:	b152      	cbz	r2, 3d7cc <ull_conn_done+0x138>
			conn->central.terminate_ack = 1;
   3d7b6:	f043 0304 	orr.w	r3, r3, #4
   3d7ba:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
   3d7be:	e78d      	b.n	3d6dc <ull_conn_done+0x48>
		conn_cleanup(conn, reason_final);
   3d7c0:	4620      	mov	r0, r4
}
   3d7c2:	b00b      	add	sp, #44	; 0x2c
   3d7c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		conn_cleanup(conn, reason_final);
   3d7c8:	f7ff bee2 	b.w	3d590 <conn_cleanup>
	if (done->extra.crc_valid) {
   3d7cc:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   3d7d0:	07db      	lsls	r3, r3, #31
   3d7d2:	d48b      	bmi.n	3d6ec <ull_conn_done+0x58>
	else if (conn->connect_expire) {
   3d7d4:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
   3d7d8:	2a00      	cmp	r2, #0
   3d7da:	d070      	beq.n	3d8be <ull_conn_done+0x22a>
		if (conn->connect_expire > elapsed_event) {
   3d7dc:	42b2      	cmp	r2, r6
   3d7de:	f240 80ce 	bls.w	3d97e <ull_conn_done+0x2ea>
			conn->connect_expire -= elapsed_event;
   3d7e2:	1b92      	subs	r2, r2, r6
	if (conn->supervision_expire) {
   3d7e4:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
			conn->connect_expire -= elapsed_event;
   3d7e8:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
   3d7ec:	2b00      	cmp	r3, #0
   3d7ee:	f000 80e0 	beq.w	3d9b2 <ull_conn_done+0x31e>
		if (conn->supervision_expire > elapsed_event) {
   3d7f2:	429e      	cmp	r6, r3
   3d7f4:	f080 80ae 	bcs.w	3d954 <ull_conn_done+0x2c0>
			conn->supervision_expire -= elapsed_event;
   3d7f8:	1b9b      	subs	r3, r3, r6
   3d7fa:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   3d7fc:	2500      	movs	r5, #0
			if (conn->supervision_expire <= 6U) {
   3d7fe:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   3d800:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   3d804:	8625      	strh	r5, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   3d806:	f240 809b 	bls.w	3d940 <ull_conn_done+0x2ac>
			else if (lll->role) {
   3d80a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3d80e:	42ab      	cmp	r3, r5
   3d810:	f6bf af6f 	bge.w	3d6f2 <ull_conn_done+0x5e>
				if (latency_event) {
   3d814:	2f00      	cmp	r7, #0
   3d816:	f040 8093 	bne.w	3d940 <ull_conn_done+0x2ac>
					force = conn->periph.force & 0x01;
   3d81a:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
					conn->periph.force >>= 1U;
   3d81e:	086b      	lsrs	r3, r5, #1
					if (force) {
   3d820:	f015 0501 	ands.w	r5, r5, #1
						conn->periph.force |= BIT(31);
   3d824:	bf18      	it	ne
   3d826:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
   3d82a:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
   3d82e:	e760      	b.n	3d6f2 <ull_conn_done+0x5e>
		lazy = lll->latency_event + 1U;
   3d830:	3201      	adds	r2, #1
   3d832:	b291      	uxth	r1, r2
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   3d834:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
   3d836:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   3d838:	9504      	str	r5, [sp, #16]
   3d83a:	2000      	movs	r0, #0
   3d83c:	4d5e      	ldr	r5, [pc, #376]	; (3d9b8 <ull_conn_done+0x324>)
   3d83e:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   3d840:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   3d842:	e9cd 0001 	strd	r0, r0, [sp, #4]
   3d846:	9406      	str	r4, [sp, #24]
   3d848:	9600      	str	r6, [sp, #0]
   3d84a:	b2d2      	uxtb	r2, r2
   3d84c:	2101      	movs	r1, #1
   3d84e:	9505      	str	r5, [sp, #20]
   3d850:	f7f7 fee2 	bl	35618 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   3d854:	f030 0302 	bics.w	r3, r0, #2
   3d858:	d08e      	beq.n	3d778 <ull_conn_done+0xe4>
   3d85a:	f7fa faa1 	bl	37da0 <ull_disable_mark_get>
   3d85e:	4284      	cmp	r4, r0
   3d860:	d08a      	beq.n	3d778 <ull_conn_done+0xe4>
   3d862:	4a56      	ldr	r2, [pc, #344]	; (3d9bc <ull_conn_done+0x328>)
   3d864:	4956      	ldr	r1, [pc, #344]	; (3d9c0 <ull_conn_done+0x32c>)
   3d866:	4857      	ldr	r0, [pc, #348]	; (3d9c4 <ull_conn_done+0x330>)
   3d868:	f240 63cd 	movw	r3, #1741	; 0x6cd
   3d86c:	f00c f94c 	bl	49b08 <printk>
   3d870:	4040      	eors	r0, r0
   3d872:	f380 8811 	msr	BASEPRI, r0
   3d876:	f04f 0003 	mov.w	r0, #3
   3d87a:	df02      	svc	2
   3d87c:	e77c      	b.n	3d778 <ull_conn_done+0xe4>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   3d87e:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3d882:	071e      	lsls	r6, r3, #28
   3d884:	d534      	bpl.n	3d8f0 <ull_conn_done+0x25c>
					    (lll->latency + 6)) ?
   3d886:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   3d888:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   3d88c:	1d8b      	adds	r3, r1, #6
			appto_reload_new = (conn->apto_reload >
   3d88e:	429a      	cmp	r2, r3
   3d890:	bfc4      	itt	gt
   3d892:	1f93      	subgt	r3, r2, #6
   3d894:	1a5b      	subgt	r3, r3, r1
			if (conn->appto_reload != appto_reload_new) {
   3d896:	f8b4 10ca 	ldrh.w	r1, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   3d89a:	bfcc      	ite	gt
   3d89c:	b29b      	uxthgt	r3, r3
   3d89e:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   3d8a0:	4299      	cmp	r1, r3
   3d8a2:	d051      	beq.n	3d948 <ull_conn_done+0x2b4>
				conn->appto_reload = appto_reload_new;
   3d8a4:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   3d8a8:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   3d8ac:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
   3d8b0:	e703      	b.n	3d6ba <ull_conn_done+0x26>
		conn->appto_expire = conn->apto_expire = 0U;
   3d8b2:	2300      	movs	r3, #0
   3d8b4:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   3d8b8:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   3d8bc:	e6fd      	b.n	3d6ba <ull_conn_done+0x26>
		if (!conn->supervision_expire) {
   3d8be:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   3d8c2:	2b00      	cmp	r3, #0
   3d8c4:	d195      	bne.n	3d7f2 <ull_conn_done+0x15e>
			conn->supervision_expire = conn->supervision_reload;
   3d8c6:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
   3d8ca:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   3d8ce:	e78d      	b.n	3d7ec <ull_conn_done+0x158>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3d8d0:	1a5b      	subs	r3, r3, r1
   3d8d2:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   3d8d6:	1b92      	subs	r2, r2, r6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3d8d8:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   3d8da:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3d8de:	f47f af33 	bne.w	3d748 <ull_conn_done+0xb4>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   3d8e2:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3d8e6:	3b01      	subs	r3, #1
   3d8e8:	2b01      	cmp	r3, #1
   3d8ea:	f63f af2d 	bhi.w	3d748 <ull_conn_done+0xb4>
   3d8ee:	e732      	b.n	3d756 <ull_conn_done+0xc2>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   3d8f0:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
   3d8f4:	07d8      	lsls	r0, r3, #31
   3d8f6:	f57f aee0 	bpl.w	3d6ba <ull_conn_done+0x26>
   3d8fa:	e7c4      	b.n	3d886 <ull_conn_done+0x1f2>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3d8fc:	b913      	cbnz	r3, 3d904 <ull_conn_done+0x270>
   3d8fe:	2e00      	cmp	r6, #0
   3d900:	f43f af3a 	beq.w	3d778 <ull_conn_done+0xe4>
	lazy = 0U;
   3d904:	4629      	mov	r1, r5
   3d906:	e795      	b.n	3d834 <ull_conn_done+0x1a0>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   3d908:	aa08      	add	r2, sp, #32
   3d90a:	a909      	add	r1, sp, #36	; 0x24
   3d90c:	4628      	mov	r0, r5
   3d90e:	f7e8 ff73 	bl	267f8 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   3d912:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   3d916:	b3bb      	cbz	r3, 3d988 <ull_conn_done+0x2f4>
				lll->latency_event = 0;
   3d918:	2300      	movs	r3, #0
   3d91a:	8623      	strh	r3, [r4, #48]	; 0x30
   3d91c:	e6de      	b.n	3d6dc <ull_conn_done+0x48>
			rx = ll_pdu_rx_alloc();
   3d91e:	f7fa f991 	bl	37c44 <ll_pdu_rx_alloc>
			if (rx) {
   3d922:	4601      	mov	r1, r0
   3d924:	b300      	cbz	r0, 3d968 <ull_conn_done+0x2d4>
				rx->handle = lll->handle;
   3d926:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   3d928:	2200      	movs	r2, #0
   3d92a:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
				rx->handle = lll->handle;
   3d92e:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   3d930:	231a      	movs	r3, #26
   3d932:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   3d934:	6800      	ldr	r0, [r0, #0]
   3d936:	f7fa f955 	bl	37be4 <ll_rx_put>
				ll_rx_sched();
   3d93a:	f7fa f95d 	bl	37bf8 <ll_rx_sched>
   3d93e:	e6ea      	b.n	3d716 <ull_conn_done+0x82>
				force = 1U;
   3d940:	2501      	movs	r5, #1
   3d942:	e6d6      	b.n	3d6f2 <ull_conn_done+0x5e>
	if ((force) || (latency_event != lll->latency_event)) {
   3d944:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   3d946:	e708      	b.n	3d75a <ull_conn_done+0xc6>
			if (conn->apto_expire == 0U) {
   3d948:	f8b4 10d0 	ldrh.w	r1, [r4, #208]	; 0xd0
   3d94c:	2900      	cmp	r1, #0
   3d94e:	f47f aeb4 	bne.w	3d6ba <ull_conn_done+0x26>
   3d952:	e7a9      	b.n	3d8a8 <ull_conn_done+0x214>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   3d954:	2108      	movs	r1, #8
   3d956:	4620      	mov	r0, r4
   3d958:	f7ff fe1a 	bl	3d590 <conn_cleanup>
			return;
   3d95c:	e70c      	b.n	3d778 <ull_conn_done+0xe4>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   3d95e:	2122      	movs	r1, #34	; 0x22
   3d960:	4620      	mov	r0, r4
   3d962:	f7ff fe15 	bl	3d590 <conn_cleanup>
			return;
   3d966:	e707      	b.n	3d778 <ull_conn_done+0xe4>
				conn->apto_expire = 1U;
   3d968:	2301      	movs	r3, #1
   3d96a:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   3d96e:	e6d2      	b.n	3d716 <ull_conn_done+0x82>
				conn->llcp_type = LLCP_PING;
   3d970:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   3d972:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
   3d974:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
				conn->llcp_ack -= 2U;
   3d978:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3d97c:	e6e4      	b.n	3d748 <ull_conn_done+0xb4>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   3d97e:	213e      	movs	r1, #62	; 0x3e
   3d980:	4620      	mov	r0, r4
   3d982:	f7ff fe05 	bl	3d590 <conn_cleanup>
			return;
   3d986:	e6f7      	b.n	3d778 <ull_conn_done+0xe4>
				ull_conn_tx_demux(UINT8_MAX);
   3d988:	20ff      	movs	r0, #255	; 0xff
   3d98a:	f7ff fdad 	bl	3d4e8 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   3d98e:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
   3d992:	2a00      	cmp	r2, #0
   3d994:	d1c0      	bne.n	3d918 <ull_conn_done+0x284>
   3d996:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   3d99a:	f7f6 fb17 	bl	33fcc <memq_peek>
   3d99e:	2800      	cmp	r0, #0
   3d9a0:	d1ba      	bne.n	3d918 <ull_conn_done+0x284>
			} else if (lll->periph.latency_enabled) {
   3d9a2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   3d9a6:	0759      	lsls	r1, r3, #29
   3d9a8:	f57f ae98 	bpl.w	3d6dc <ull_conn_done+0x48>
				lll->latency_event = lll->latency;
   3d9ac:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   3d9ae:	8623      	strh	r3, [r4, #48]	; 0x30
   3d9b0:	e694      	b.n	3d6dc <ull_conn_done+0x48>
	force = 0U;
   3d9b2:	461d      	mov	r5, r3
   3d9b4:	e69d      	b.n	3d6f2 <ull_conn_done+0x5e>
   3d9b6:	bf00      	nop
   3d9b8:	000397b5 	.word	0x000397b5
   3d9bc:	000530cc 	.word	0x000530cc
   3d9c0:	00053228 	.word	0x00053228
   3d9c4:	00052bbc 	.word	0x00052bbc

0003d9c8 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   3d9c8:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   3d9cc:	2b00      	cmp	r3, #0
   3d9ce:	f000 80e9 	beq.w	3dba4 <ull_conn_tx_lll_enqueue+0x1dc>
   3d9d2:	3901      	subs	r1, #1
{
   3d9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   3d9d8:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 3dba8 <ull_conn_tx_lll_enqueue+0x1e0>
		LL_ASSERT(link);
   3d9dc:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 3dbac <ull_conn_tx_lll_enqueue+0x1e4>
   3d9e0:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 3dbb0 <ull_conn_tx_lll_enqueue+0x1e8>
   3d9e4:	4604      	mov	r4, r0
   3d9e6:	b2cd      	uxtb	r5, r1
   3d9e8:	e012      	b.n	3da10 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   3d9ea:	4640      	mov	r0, r8
   3d9ec:	f7f6 fa80 	bl	33ef0 <mem_acquire>
		LL_ASSERT(link);
   3d9f0:	4607      	mov	r7, r0
   3d9f2:	2800      	cmp	r0, #0
   3d9f4:	d068      	beq.n	3dac8 <ull_conn_tx_lll_enqueue+0x100>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   3d9f6:	f104 0268 	add.w	r2, r4, #104	; 0x68
   3d9fa:	4631      	mov	r1, r6
   3d9fc:	4638      	mov	r0, r7
   3d9fe:	f7f6 fadb 	bl	33fb8 <memq_enqueue>
	while (conn->tx_head &&
   3da02:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   3da06:	3d01      	subs	r5, #1
   3da08:	b2ed      	uxtb	r5, r5
   3da0a:	2b00      	cmp	r3, #0
   3da0c:	f000 809c 	beq.w	3db48 <ull_conn_tx_lll_enqueue+0x180>
		 !conn->llcp_phy.pause_tx &&
   3da10:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
	while (conn->tx_head &&
   3da14:	07d1      	lsls	r1, r2, #31
   3da16:	d403      	bmi.n	3da20 <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   3da18:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
		 !conn->llcp_phy.pause_tx &&
   3da1c:	0792      	lsls	r2, r2, #30
   3da1e:	d568      	bpl.n	3daf2 <ull_conn_tx_lll_enqueue+0x12a>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   3da20:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3da24:	429a      	cmp	r2, r3
   3da26:	f040 808f 	bne.w	3db48 <ull_conn_tx_lll_enqueue+0x180>
   3da2a:	2dff      	cmp	r5, #255	; 0xff
   3da2c:	f000 808c 	beq.w	3db48 <ull_conn_tx_lll_enqueue+0x180>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   3da30:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
   3da34:	4620      	mov	r0, r4
   3da36:	f7fb fedd 	bl	397f4 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   3da3a:	7903      	ldrb	r3, [r0, #4]
   3da3c:	f003 0303 	and.w	r3, r3, #3
   3da40:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   3da42:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   3da44:	d1d1      	bne.n	3d9ea <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   3da46:	79c3      	ldrb	r3, [r0, #7]
   3da48:	3b03      	subs	r3, #3
   3da4a:	2b14      	cmp	r3, #20
   3da4c:	d8cd      	bhi.n	3d9ea <ull_conn_tx_lll_enqueue+0x22>
   3da4e:	a201      	add	r2, pc, #4	; (adr r2, 3da54 <ull_conn_tx_lll_enqueue+0x8c>)
   3da50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   3da54:	0003dab1 	.word	0x0003dab1
   3da58:	0003dab1 	.word	0x0003dab1
   3da5c:	0003d9eb 	.word	0x0003d9eb
   3da60:	0003d9eb 	.word	0x0003d9eb
   3da64:	0003d9eb 	.word	0x0003d9eb
   3da68:	0003d9eb 	.word	0x0003d9eb
   3da6c:	0003d9eb 	.word	0x0003d9eb
   3da70:	0003dab1 	.word	0x0003dab1
   3da74:	0003daa9 	.word	0x0003daa9
   3da78:	0003d9eb 	.word	0x0003d9eb
   3da7c:	0003d9eb 	.word	0x0003d9eb
   3da80:	0003d9eb 	.word	0x0003d9eb
   3da84:	0003d9eb 	.word	0x0003d9eb
   3da88:	0003d9eb 	.word	0x0003d9eb
   3da8c:	0003d9eb 	.word	0x0003d9eb
   3da90:	0003d9eb 	.word	0x0003d9eb
   3da94:	0003d9eb 	.word	0x0003d9eb
   3da98:	0003d9eb 	.word	0x0003d9eb
   3da9c:	0003d9eb 	.word	0x0003d9eb
   3daa0:	0003dae5 	.word	0x0003dae5
   3daa4:	0003dae5 	.word	0x0003dae5
		if (!conn->lll.role) {
   3daa8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3daac:	2b00      	cmp	r3, #0
   3daae:	da9c      	bge.n	3d9ea <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   3dab0:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
   3dab4:	f043 0302 	orr.w	r3, r3, #2
   3dab8:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
		link = mem_acquire(&mem_link_tx.free);
   3dabc:	4640      	mov	r0, r8
   3dabe:	f7f6 fa17 	bl	33ef0 <mem_acquire>
		LL_ASSERT(link);
   3dac2:	4607      	mov	r7, r0
   3dac4:	2800      	cmp	r0, #0
   3dac6:	d196      	bne.n	3d9f6 <ull_conn_tx_lll_enqueue+0x2e>
   3dac8:	483a      	ldr	r0, [pc, #232]	; (3dbb4 <ull_conn_tx_lll_enqueue+0x1ec>)
   3daca:	f240 7326 	movw	r3, #1830	; 0x726
   3dace:	4652      	mov	r2, sl
   3dad0:	4649      	mov	r1, r9
   3dad2:	f00c f819 	bl	49b08 <printk>
   3dad6:	4040      	eors	r0, r0
   3dad8:	f380 8811 	msr	BASEPRI, r0
   3dadc:	f04f 0003 	mov.w	r0, #3
   3dae0:	df02      	svc	2
   3dae2:	e788      	b.n	3d9f6 <ull_conn_tx_lll_enqueue+0x2e>
		conn->llcp_phy.pause_tx = 1U;
   3dae4:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   3dae8:	f043 0301 	orr.w	r3, r3, #1
   3daec:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
		break;
   3daf0:	e77b      	b.n	3d9ea <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   3daf2:	791a      	ldrb	r2, [r3, #4]
   3daf4:	f002 0203 	and.w	r2, r2, #3
   3daf8:	2a03      	cmp	r2, #3
   3dafa:	d196      	bne.n	3da2a <ull_conn_tx_lll_enqueue+0x62>
	    ((pdu_data_tx->llctrl.opcode ==
   3dafc:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   3dafe:	2a03      	cmp	r2, #3
   3db00:	d001      	beq.n	3db06 <ull_conn_tx_lll_enqueue+0x13e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   3db02:	2a0a      	cmp	r2, #10
   3db04:	d191      	bne.n	3da2a <ull_conn_tx_lll_enqueue+0x62>
		if (((conn->llcp_req != conn->llcp_ack) &&
   3db06:	f894 10f1 	ldrb.w	r1, [r4, #241]	; 0xf1
   3db0a:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   3db0e:	428a      	cmp	r2, r1
   3db10:	d01c      	beq.n	3db4c <ull_conn_tx_lll_enqueue+0x184>
   3db12:	f894 20f2 	ldrb.w	r2, [r4, #242]	; 0xf2
   3db16:	2a03      	cmp	r2, #3
   3db18:	d087      	beq.n	3da2a <ull_conn_tx_lll_enqueue+0x62>
			if ((tx->next != NULL) &&
   3db1a:	681a      	ldr	r2, [r3, #0]
   3db1c:	b1a2      	cbz	r2, 3db48 <ull_conn_tx_lll_enqueue+0x180>
   3db1e:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3db22:	428a      	cmp	r2, r1
   3db24:	d110      	bne.n	3db48 <ull_conn_tx_lll_enqueue+0x180>
				conn->tx_head = tx->next;
   3db26:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
				tx->next = conn->tx_ctrl_last->next;
   3db2a:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
				if (!conn->tx_data_last) {
   3db2e:	f8d4 11e4 	ldr.w	r1, [r4, #484]	; 0x1e4
				tx->next = conn->tx_ctrl_last->next;
   3db32:	6810      	ldr	r0, [r2, #0]
   3db34:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   3db36:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   3db38:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
				if (!conn->tx_data_last) {
   3db3c:	2900      	cmp	r1, #0
   3db3e:	f47f af74 	bne.w	3da2a <ull_conn_tx_lll_enqueue+0x62>
					conn->tx_data_last = tx;
   3db42:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
   3db46:	e770      	b.n	3da2a <ull_conn_tx_lll_enqueue+0x62>
}
   3db48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		    ((conn->llcp_req == conn->llcp_ack) &&
   3db4c:	f894 0131 	ldrb.w	r0, [r4, #305]	; 0x131
   3db50:	f894 1130 	ldrb.w	r1, [r4, #304]	; 0x130
   3db54:	4288      	cmp	r0, r1
   3db56:	d1e0      	bne.n	3db1a <ull_conn_tx_lll_enqueue+0x152>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   3db58:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
   3db5c:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
   3db60:	4288      	cmp	r0, r1
   3db62:	d1da      	bne.n	3db1a <ull_conn_tx_lll_enqueue+0x152>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   3db64:	f894 0195 	ldrb.w	r0, [r4, #405]	; 0x195
   3db68:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   3db6c:	4288      	cmp	r0, r1
   3db6e:	d1d4      	bne.n	3db1a <ull_conn_tx_lll_enqueue+0x152>
		       conn->llcp_conn_param.req) ||
   3db70:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   3db74:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   3db78:	4288      	cmp	r0, r1
   3db7a:	d1ce      	bne.n	3db1a <ull_conn_tx_lll_enqueue+0x152>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   3db7c:	f894 01cd 	ldrb.w	r0, [r4, #461]	; 0x1cd
   3db80:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
   3db84:	4288      	cmp	r0, r1
   3db86:	d1c8      	bne.n	3db1a <ull_conn_tx_lll_enqueue+0x152>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   3db88:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
			conn->llcp_ack -= 2U;
   3db8c:	3a02      	subs	r2, #2
   3db8e:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   3db92:	2201      	movs	r2, #1
   3db94:	f362 0301 	bfi	r3, r2, #0, #2
   3db98:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
			conn->llcp_type = LLCP_ENCRYPTION;
   3db9c:	2303      	movs	r3, #3
   3db9e:	f884 30f2 	strb.w	r3, [r4, #242]	; 0xf2
			conn->llcp_ack -= 2U;
   3dba2:	e742      	b.n	3da2a <ull_conn_tx_lll_enqueue+0x62>
   3dba4:	4770      	bx	lr
   3dba6:	bf00      	nop
   3dba8:	200058cc 	.word	0x200058cc
   3dbac:	000530cc 	.word	0x000530cc
   3dbb0:	00053124 	.word	0x00053124
   3dbb4:	00052bbc 	.word	0x00052bbc

0003dbb8 <tx_demux>:
{
   3dbb8:	b510      	push	{r4, lr}
   3dbba:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   3dbbc:	2001      	movs	r0, #1
   3dbbe:	f7ff fc93 	bl	3d4e8 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   3dbc2:	4620      	mov	r0, r4
   3dbc4:	2101      	movs	r1, #1
}
   3dbc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   3dbca:	f7ff befd 	b.w	3d9c8 <ull_conn_tx_lll_enqueue>
   3dbce:	bf00      	nop

0003dbd0 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   3dbd0:	4901      	ldr	r1, [pc, #4]	; (3dbd8 <ull_conn_link_tx_release+0x8>)
   3dbd2:	f7f6 b9a7 	b.w	33f24 <mem_release>
   3dbd6:	bf00      	nop
   3dbd8:	200058cc 	.word	0x200058cc

0003dbdc <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   3dbdc:	4b01      	ldr	r3, [pc, #4]	; (3dbe4 <ull_conn_ack_last_idx_get+0x8>)
}
   3dbde:	78d8      	ldrb	r0, [r3, #3]
   3dbe0:	4770      	bx	lr
   3dbe2:	bf00      	nop
   3dbe4:	20000c54 	.word	0x20000c54

0003dbe8 <ull_conn_ack_peek>:
{
   3dbe8:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   3dbea:	4b0c      	ldr	r3, [pc, #48]	; (3dc1c <ull_conn_ack_peek+0x34>)
   3dbec:	f893 c002 	ldrb.w	ip, [r3, #2]
   3dbf0:	f893 e003 	ldrb.w	lr, [r3, #3]
   3dbf4:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   3dbf6:	45f4      	cmp	ip, lr
   3dbf8:	d00d      	beq.n	3dc16 <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   3dbfa:	fb1c fc04 	smulbb	ip, ip, r4
   3dbfe:	3304      	adds	r3, #4
   3dc00:	eb0c 0403 	add.w	r4, ip, r3
	*ack_last = mfifo_conn_ack.l;
   3dc04:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
   3dc08:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   3dc0c:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
   3dc0e:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   3dc10:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   3dc12:	6818      	ldr	r0, [r3, #0]
}
   3dc14:	bd10      	pop	{r4, pc}
		return NULL;
   3dc16:	2000      	movs	r0, #0
}
   3dc18:	bd10      	pop	{r4, pc}
   3dc1a:	bf00      	nop
   3dc1c:	20000c54 	.word	0x20000c54

0003dc20 <ull_conn_ack_by_last_peek>:
{
   3dc20:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   3dc22:	4b0b      	ldr	r3, [pc, #44]	; (3dc50 <ull_conn_ack_by_last_peek+0x30>)
   3dc24:	f893 c002 	ldrb.w	ip, [r3, #2]
   3dc28:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   3dc2c:	4584      	cmp	ip, r0
   3dc2e:	d00d      	beq.n	3dc4c <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
   3dc30:	3304      	adds	r3, #4
   3dc32:	fb1c fc0e 	smulbb	ip, ip, lr
   3dc36:	eb0c 0e03 	add.w	lr, ip, r3
	*handle = lll_tx->handle;
   3dc3a:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   3dc3e:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
   3dc42:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   3dc44:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   3dc46:	6818      	ldr	r0, [r3, #0]
}
   3dc48:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   3dc4c:	2000      	movs	r0, #0
   3dc4e:	e7fb      	b.n	3dc48 <ull_conn_ack_by_last_peek+0x28>
   3dc50:	20000c54 	.word	0x20000c54

0003dc54 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   3dc54:	4b09      	ldr	r3, [pc, #36]	; (3dc7c <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   3dc56:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   3dc58:	78da      	ldrb	r2, [r3, #3]
   3dc5a:	7818      	ldrb	r0, [r3, #0]
   3dc5c:	f893 c001 	ldrb.w	ip, [r3, #1]
   3dc60:	428a      	cmp	r2, r1
   3dc62:	d009      	beq.n	3dc78 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   3dc64:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   3dc66:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   3dc6a:	b2d2      	uxtb	r2, r2
		_first = 0U;
   3dc6c:	4594      	cmp	ip, r2
   3dc6e:	bf08      	it	eq
   3dc70:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   3dc72:	6840      	ldr	r0, [r0, #4]
	*first = _first; /* Write back read-index */
   3dc74:	709a      	strb	r2, [r3, #2]
	return mem;
   3dc76:	4770      	bx	lr
		return NULL;
   3dc78:	2000      	movs	r0, #0
}
   3dc7a:	4770      	bx	lr
   3dc7c:	20000c54 	.word	0x20000c54

0003dc80 <ull_conn_lll_ack_enqueue>:
{
   3dc80:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   3dc82:	4c14      	ldr	r4, [pc, #80]	; (3dcd4 <ull_conn_lll_ack_enqueue+0x54>)
   3dc84:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   3dc86:	f894 e001 	ldrb.w	lr, [r4, #1]
   3dc8a:	f894 c002 	ldrb.w	ip, [r4, #2]
   3dc8e:	7825      	ldrb	r5, [r4, #0]
	last = last + 1;
   3dc90:	1c53      	adds	r3, r2, #1
   3dc92:	b2db      	uxtb	r3, r3
		last = 0U;
   3dc94:	459e      	cmp	lr, r3
   3dc96:	bf08      	it	eq
   3dc98:	2300      	moveq	r3, #0
	if (last == first) {
   3dc9a:	459c      	cmp	ip, r3
   3dc9c:	d009      	beq.n	3dcb2 <ull_conn_lll_ack_enqueue+0x32>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   3dc9e:	fb12 f205 	smulbb	r2, r2, r5
   3dca2:	f104 0c04 	add.w	ip, r4, #4
	lll_tx->handle = handle;
   3dca6:	f82c 0002 	strh.w	r0, [ip, r2]
   3dcaa:	4462      	add	r2, ip
	lll_tx->node = tx;
   3dcac:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
   3dcae:	70e3      	strb	r3, [r4, #3]
}
   3dcb0:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   3dcb2:	4a09      	ldr	r2, [pc, #36]	; (3dcd8 <ull_conn_lll_ack_enqueue+0x58>)
   3dcb4:	4909      	ldr	r1, [pc, #36]	; (3dcdc <ull_conn_lll_ack_enqueue+0x5c>)
   3dcb6:	480a      	ldr	r0, [pc, #40]	; (3dce0 <ull_conn_lll_ack_enqueue+0x60>)
   3dcb8:	f240 7376 	movw	r3, #1910	; 0x776
   3dcbc:	f00b ff24 	bl	49b08 <printk>
   3dcc0:	4040      	eors	r0, r0
   3dcc2:	f380 8811 	msr	BASEPRI, r0
   3dcc6:	f04f 0003 	mov.w	r0, #3
   3dcca:	df02      	svc	2
	lll_tx->handle = handle;
   3dccc:	2300      	movs	r3, #0
   3dcce:	801b      	strh	r3, [r3, #0]
   3dcd0:	deff      	udf	#255	; 0xff
   3dcd2:	bf00      	nop
   3dcd4:	20000c54 	.word	0x20000c54
   3dcd8:	000530cc 	.word	0x000530cc
   3dcdc:	00053114 	.word	0x00053114
   3dce0:	00052bbc 	.word	0x00052bbc

0003dce4 <ull_conn_tx_ack>:
{
   3dce4:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   3dce6:	7953      	ldrb	r3, [r2, #5]
{
   3dce8:	b083      	sub	sp, #12
   3dcea:	4614      	mov	r4, r2
   3dcec:	4605      	mov	r5, r0
   3dcee:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   3dcf0:	b37b      	cbz	r3, 3dd52 <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   3dcf2:	7923      	ldrb	r3, [r4, #4]
   3dcf4:	f003 0203 	and.w	r2, r3, #3
   3dcf8:	2a03      	cmp	r2, #3
   3dcfa:	d00d      	beq.n	3dd18 <ull_conn_tx_ack+0x34>
	} else if (handle == LLL_HANDLE_INVALID) {
   3dcfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3dd00:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   3dd02:	bf04      	itt	eq
   3dd04:	f36f 0301 	bfceq	r3, #0, #2
   3dd08:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   3dd0a:	4621      	mov	r1, r4
   3dd0c:	4628      	mov	r0, r5
}
   3dd0e:	b003      	add	sp, #12
   3dd10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   3dd14:	f7f9 bfac 	b.w	37c70 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   3dd18:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3dd1c:	429d      	cmp	r5, r3
   3dd1e:	d126      	bne.n	3dd6e <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   3dd20:	6830      	ldr	r0, [r6, #0]
   3dd22:	4284      	cmp	r4, r0
   3dd24:	d073      	beq.n	3de0e <ull_conn_tx_ack+0x12a>
		LL_ASSERT(!link->next);
   3dd26:	2800      	cmp	r0, #0
   3dd28:	d0ef      	beq.n	3dd0a <ull_conn_tx_ack+0x26>
   3dd2a:	4acc      	ldr	r2, [pc, #816]	; (3e05c <ull_conn_tx_ack+0x378>)
   3dd2c:	49cc      	ldr	r1, [pc, #816]	; (3e060 <ull_conn_tx_ack+0x37c>)
   3dd2e:	48cd      	ldr	r0, [pc, #820]	; (3e064 <ull_conn_tx_ack+0x380>)
   3dd30:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
   3dd34:	f00b fee8 	bl	49b08 <printk>
   3dd38:	4040      	eors	r0, r0
   3dd3a:	f380 8811 	msr	BASEPRI, r0
   3dd3e:	f04f 0003 	mov.w	r0, #3
   3dd42:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   3dd44:	4621      	mov	r1, r4
   3dd46:	4628      	mov	r0, r5
}
   3dd48:	b003      	add	sp, #12
   3dd4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   3dd4e:	f7f9 bf8f 	b.w	37c70 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   3dd52:	4ac2      	ldr	r2, [pc, #776]	; (3e05c <ull_conn_tx_ack+0x378>)
   3dd54:	49c4      	ldr	r1, [pc, #784]	; (3e068 <ull_conn_tx_ack+0x384>)
   3dd56:	48c3      	ldr	r0, [pc, #780]	; (3e064 <ull_conn_tx_ack+0x380>)
   3dd58:	f240 7383 	movw	r3, #1923	; 0x783
   3dd5c:	f00b fed4 	bl	49b08 <printk>
   3dd60:	4040      	eors	r0, r0
   3dd62:	f380 8811 	msr	BASEPRI, r0
   3dd66:	f04f 0003 	mov.w	r0, #3
   3dd6a:	df02      	svc	2
   3dd6c:	e7c1      	b.n	3dcf2 <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3dd6e:	48bf      	ldr	r0, [pc, #764]	; (3e06c <ull_conn_tx_ack+0x388>)
   3dd70:	462a      	mov	r2, r5
   3dd72:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3dd76:	f7f6 f8ed 	bl	33f54 <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   3dd7a:	79e3      	ldrb	r3, [r4, #7]
   3dd7c:	3b02      	subs	r3, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3dd7e:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
   3dd80:	2b16      	cmp	r3, #22
   3dd82:	d8cd      	bhi.n	3dd20 <ull_conn_tx_ack+0x3c>
   3dd84:	a201      	add	r2, pc, #4	; (adr r2, 3dd8c <ull_conn_tx_ack+0xa8>)
   3dd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   3dd8a:	bf00      	nop
   3dd8c:	0003df8b 	.word	0x0003df8b
   3dd90:	0003dead 	.word	0x0003dead
   3dd94:	0003de4d 	.word	0x0003de4d
   3dd98:	0003de37 	.word	0x0003de37
   3dd9c:	0003e0df 	.word	0x0003e0df
   3dda0:	0003de21 	.word	0x0003de21
   3dda4:	0003dd21 	.word	0x0003dd21
   3dda8:	0003de21 	.word	0x0003de21
   3ddac:	0003de81 	.word	0x0003de81
   3ddb0:	0003dfd7 	.word	0x0003dfd7
   3ddb4:	0003dd21 	.word	0x0003dd21
   3ddb8:	0003de63 	.word	0x0003de63
   3ddbc:	0003dd21 	.word	0x0003dd21
   3ddc0:	0003dd21 	.word	0x0003dd21
   3ddc4:	0003dd21 	.word	0x0003dd21
   3ddc8:	0003de1b 	.word	0x0003de1b
   3ddcc:	0003dd21 	.word	0x0003dd21
   3ddd0:	0003de21 	.word	0x0003de21
   3ddd4:	0003e0bb 	.word	0x0003e0bb
   3ddd8:	0003df21 	.word	0x0003df21
   3dddc:	0003def1 	.word	0x0003def1
   3dde0:	0003e079 	.word	0x0003e079
   3dde4:	0003dfad 	.word	0x0003dfad
		conn->tx_data_last = tx;
   3dde8:	f8c7 41e4 	str.w	r4, [r7, #484]	; 0x1e4
		if (link->next == (void *)tx) {
   3ddec:	2a00      	cmp	r2, #0
   3ddee:	f040 8133 	bne.w	3e058 <ull_conn_tx_ack+0x374>
			LL_ASSERT(link->next);
   3ddf2:	4a9a      	ldr	r2, [pc, #616]	; (3e05c <ull_conn_tx_ack+0x378>)
   3ddf4:	499e      	ldr	r1, [pc, #632]	; (3e070 <ull_conn_tx_ack+0x38c>)
   3ddf6:	489b      	ldr	r0, [pc, #620]	; (3e064 <ull_conn_tx_ack+0x380>)
   3ddf8:	f240 7392 	movw	r3, #1938	; 0x792
   3ddfc:	f00b fe84 	bl	49b08 <printk>
   3de00:	4040      	eors	r0, r0
   3de02:	f380 8811 	msr	BASEPRI, r0
   3de06:	f04f 0003 	mov.w	r0, #3
   3de0a:	df02      	svc	2
   3de0c:	2000      	movs	r0, #0
			mem_release(tx, &mem_conn_tx_ctrl.free);
   3de0e:	4999      	ldr	r1, [pc, #612]	; (3e074 <ull_conn_tx_ack+0x390>)
}
   3de10:	b003      	add	sp, #12
   3de12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   3de16:	f7f6 b885 	b.w	33f24 <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   3de1a:	7a23      	ldrb	r3, [r4, #8]
   3de1c:	2b03      	cmp	r3, #3
   3de1e:	d020      	beq.n	3de62 <ull_conn_tx_ack+0x17e>
			conn->common.txn_lock = 0U;
   3de20:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
		if (link->next == (void *)tx) {
   3de24:	6830      	ldr	r0, [r6, #0]
			conn->common.txn_lock = 0U;
   3de26:	f36f 0341 	bfc	r3, #1, #1
		if (link->next == (void *)tx) {
   3de2a:	4284      	cmp	r4, r0
			conn->common.txn_lock = 0U;
   3de2c:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
		if (link->next == (void *)tx) {
   3de30:	f47f af79 	bne.w	3dd26 <ull_conn_tx_ack+0x42>
   3de34:	e7eb      	b.n	3de0e <ull_conn_tx_ack+0x12a>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3de36:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
		if (link->next == (void *)tx) {
   3de3a:	6830      	ldr	r0, [r6, #0]
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3de3c:	f043 0303 	orr.w	r3, r3, #3
		if (link->next == (void *)tx) {
   3de40:	4284      	cmp	r4, r0
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3de42:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		if (link->next == (void *)tx) {
   3de46:	f47f af6e 	bne.w	3dd26 <ull_conn_tx_ack+0x42>
   3de4a:	e7e0      	b.n	3de0e <ull_conn_tx_ack+0x12a>
			conn->llcp_enc.pause_tx = 1U;
   3de4c:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
		if (link->next == (void *)tx) {
   3de50:	6830      	ldr	r0, [r6, #0]
			conn->llcp_enc.pause_tx = 1U;
   3de52:	f043 0302 	orr.w	r3, r3, #2
		if (link->next == (void *)tx) {
   3de56:	4284      	cmp	r4, r0
			conn->llcp_enc.pause_tx = 1U;
   3de58:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
		if (link->next == (void *)tx) {
   3de5c:	f47f af63 	bne.w	3dd26 <ull_conn_tx_ack+0x42>
   3de60:	e7d5      	b.n	3de0e <ull_conn_tx_ack+0x12a>
		conn->llcp_enc.pause_rx = 0U;
   3de62:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
		if (link->next == (void *)tx) {
   3de66:	6830      	ldr	r0, [r6, #0]
		conn->llcp_enc.pause_rx = 0U;
   3de68:	f023 0303 	bic.w	r3, r3, #3
   3de6c:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
		if (link->next == (void *)tx) {
   3de70:	4284      	cmp	r4, r0
		conn->procedure_expire = 0U;
   3de72:	f04f 0300 	mov.w	r3, #0
   3de76:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		if (link->next == (void *)tx) {
   3de7a:	f47f af54 	bne.w	3dd26 <ull_conn_tx_ack+0x42>
   3de7e:	e7c6      	b.n	3de0e <ull_conn_tx_ack+0x12a>
		conn->llcp_enc.pause_tx = 1U;
   3de80:	f890 3176 	ldrb.w	r3, [r0, #374]	; 0x176
   3de84:	f023 0306 	bic.w	r3, r3, #6
   3de88:	f043 0306 	orr.w	r3, r3, #6
   3de8c:	f880 3176 	strb.w	r3, [r0, #374]	; 0x176
		conn->procedure_expire = conn->procedure_reload;
   3de90:	f8b0 30c6 	ldrh.w	r3, [r0, #198]	; 0xc6
   3de94:	f8a0 30c8 	strh.w	r3, [r0, #200]	; 0xc8
		conn->llcp_enc.ack = conn->llcp_enc.req;
   3de98:	f890 3174 	ldrb.w	r3, [r0, #372]	; 0x174
   3de9c:	f880 3175 	strb.w	r3, [r0, #373]	; 0x175
		if (link->next == (void *)tx) {
   3dea0:	6830      	ldr	r0, [r6, #0]
   3dea2:	4284      	cmp	r4, r0
   3dea4:	f47f af3f 	bne.w	3dd26 <ull_conn_tx_ack+0x42>
			LL_ASSERT(link->next);
   3dea8:	4620      	mov	r0, r4
   3deaa:	e7b0      	b.n	3de0e <ull_conn_tx_ack+0x12a>
		memcpy(&conn->llcp.encryption.skd[0],
   3deac:	2208      	movs	r2, #8
   3deae:	f104 0112 	add.w	r1, r4, #18
   3deb2:	f500 7081 	add.w	r0, r0, #258	; 0x102
   3deb6:	f00d ff56 	bl	4bd66 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   3deba:	2204      	movs	r2, #4
   3debc:	f104 011a 	add.w	r1, r4, #26
   3dec0:	f107 0094 	add.w	r0, r7, #148	; 0x94
   3dec4:	f00d ff4f 	bl	4bd66 <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   3dec8:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
   3decc:	f043 0302 	orr.w	r3, r3, #2
   3ded0:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
		conn->procedure_expire = conn->procedure_reload;
   3ded4:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
   3ded8:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		conn->llcp_enc.ack = conn->llcp_enc.req;
   3dedc:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
   3dee0:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
		if (link->next == (void *)tx) {
   3dee4:	6830      	ldr	r0, [r6, #0]
   3dee6:	42a0      	cmp	r0, r4
   3dee8:	f47f af1d 	bne.w	3dd26 <ull_conn_tx_ack+0x42>
			LL_ASSERT(link->next);
   3deec:	4620      	mov	r0, r4
   3deee:	e78e      	b.n	3de0e <ull_conn_tx_ack+0x12a>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3def0:	f890 31ce 	ldrb.w	r3, [r0, #462]	; 0x1ce
   3def4:	2202      	movs	r2, #2
   3def6:	f362 0301 	bfi	r3, r2, #0, #2
   3defa:	f880 31ce 	strb.w	r3, [r0, #462]	; 0x1ce
		if (conn->lll.role) {
   3defe:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3df02:	2b00      	cmp	r3, #0
   3df04:	f2c0 8103 	blt.w	3e10e <ull_conn_tx_ack+0x42a>
		conn->llcp_phy.pause_tx = 0U;
   3df08:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
   3df0c:	f36f 0300 	bfc	r3, #0, #1
   3df10:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (link->next == (void *)tx) {
   3df14:	6830      	ldr	r0, [r6, #0]
   3df16:	4284      	cmp	r4, r0
   3df18:	f47f af05 	bne.w	3dd26 <ull_conn_tx_ack+0x42>
			LL_ASSERT(link->next);
   3df1c:	4620      	mov	r0, r4
   3df1e:	e776      	b.n	3de0e <ull_conn_tx_ack+0x12a>
		conn->common.txn_lock = 0U;
   3df20:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   3df24:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
		conn->common.txn_lock = 0U;
   3df28:	f36f 0341 	bfc	r3, #1, #1
   3df2c:	f880 30e4 	strb.w	r3, [r0, #228]	; 0xe4
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   3df30:	f890 31bd 	ldrb.w	r3, [r0, #445]	; 0x1bd
   3df34:	428b      	cmp	r3, r1
   3df36:	f43f aef3 	beq.w	3dd20 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   3df3a:	f890 21be 	ldrb.w	r2, [r0, #446]	; 0x1be
   3df3e:	f002 0307 	and.w	r3, r2, #7
   3df42:	2b03      	cmp	r3, #3
   3df44:	d005      	beq.n	3df52 <ull_conn_tx_ack+0x26e>
   3df46:	3303      	adds	r3, #3
   3df48:	f003 0307 	and.w	r3, r3, #7
   3df4c:	2b01      	cmp	r3, #1
   3df4e:	f63f aee7 	bhi.w	3dd20 <ull_conn_tx_ack+0x3c>
				conn->lll.max_tx_octets =
   3df52:	f8b7 31c2 	ldrh.w	r3, [r7, #450]	; 0x1c2
   3df56:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				conn->lll.max_tx_time =
   3df5a:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	; 0x1c6
   3df5e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				if (conn->llcp_length.state ==
   3df62:	f002 0307 	and.w	r3, r2, #7
   3df66:	2b05      	cmp	r3, #5
   3df68:	f000 80e2 	beq.w	3e130 <ull_conn_tx_ack+0x44c>
				if (!conn->llcp_length.cache.tx_octets) {
   3df6c:	f8b7 31c8 	ldrh.w	r3, [r7, #456]	; 0x1c8
   3df70:	2b00      	cmp	r3, #0
   3df72:	f040 80e8 	bne.w	3e146 <ull_conn_tx_ack+0x462>
					conn->llcp_length.ack =
   3df76:	f887 11bd 	strb.w	r1, [r7, #445]	; 0x1bd
		if (link->next == (void *)tx) {
   3df7a:	6830      	ldr	r0, [r6, #0]
					conn->procedure_expire = 0U;
   3df7c:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		if (link->next == (void *)tx) {
   3df80:	4284      	cmp	r4, r0
   3df82:	f47f aed0 	bne.w	3dd26 <ull_conn_tx_ack+0x42>
			LL_ASSERT(link->next);
   3df86:	4620      	mov	r0, r4
   3df88:	e741      	b.n	3de0e <ull_conn_tx_ack+0x12a>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   3df8a:	7a23      	ldrb	r3, [r4, #8]
			conn->llcp_terminate.reason_final =
   3df8c:	2b13      	cmp	r3, #19
   3df8e:	bf08      	it	eq
   3df90:	2316      	moveq	r3, #22
   3df92:	f880 3153 	strb.w	r3, [r0, #339]	; 0x153
		conn->llcp_terminate.ack--;
   3df96:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
   3df9a:	3b01      	subs	r3, #1
   3df9c:	f880 3151 	strb.w	r3, [r0, #337]	; 0x151
		if (link->next == (void *)tx) {
   3dfa0:	6830      	ldr	r0, [r6, #0]
   3dfa2:	4284      	cmp	r4, r0
   3dfa4:	f47f aebf 	bne.w	3dd26 <ull_conn_tx_ack+0x42>
			LL_ASSERT(link->next);
   3dfa8:	4620      	mov	r0, r4
   3dfaa:	e730      	b.n	3de0e <ull_conn_tx_ack+0x12a>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   3dfac:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
   3dfb0:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
   3dfb4:	f3c3 0382 	ubfx	r3, r3, #2, #3
   3dfb8:	f363 1206 	bfi	r2, r3, #4, #3
   3dfbc:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   3dfc0:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
   3dfc4:	f36f 0300 	bfc	r3, #0, #1
   3dfc8:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (link->next == (void *)tx) {
   3dfcc:	6830      	ldr	r0, [r6, #0]
   3dfce:	4284      	cmp	r4, r0
   3dfd0:	f47f aea9 	bne.w	3dd26 <ull_conn_tx_ack+0x42>
   3dfd4:	e71b      	b.n	3de0e <ull_conn_tx_ack+0x12a>
		if (!conn->lll.role) {
   3dfd6:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3dfda:	2b00      	cmp	r3, #0
   3dfdc:	f6ff af36 	blt.w	3de4c <ull_conn_tx_ack+0x168>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3dfe0:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3dfe2:	2217      	movs	r2, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3dfe4:	f043 0303 	orr.w	r3, r3, #3
   3dfe8:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3dfea:	7162      	strb	r2, [r4, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3dfec:	2303      	movs	r3, #3
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   3dfee:	2208      	movs	r2, #8
   3dff0:	f200 1179 	addw	r1, r0, #377	; 0x179
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3dff4:	71e3      	strb	r3, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   3dff6:	18a0      	adds	r0, r4, r2
   3dff8:	f00d feb5 	bl	4bd66 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   3dffc:	f8b7 3177 	ldrh.w	r3, [r7, #375]	; 0x177
   3e000:	8223      	strh	r3, [r4, #16]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   3e002:	210c      	movs	r1, #12
   3e004:	f104 0012 	add.w	r0, r4, #18
   3e008:	f002 fa34 	bl	40474 <lll_csrand_isr_get>
	    conn->tx_head &&
   3e00c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
	if (
   3e010:	2b00      	cmp	r3, #0
   3e012:	f000 8083 	beq.w	3e11c <ull_conn_tx_ack+0x438>
	    !conn->llcp_enc.pause_tx &&
   3e016:	f897 2176 	ldrb.w	r2, [r7, #374]	; 0x176
	    conn->tx_head &&
   3e01a:	0791      	lsls	r1, r2, #30
   3e01c:	d47e      	bmi.n	3e11c <ull_conn_tx_ack+0x438>
	    !conn->llcp_phy.pause_tx &&
   3e01e:	f897 21cf 	ldrb.w	r2, [r7, #463]	; 0x1cf
   3e022:	07d2      	lsls	r2, r2, #31
   3e024:	d47a      	bmi.n	3e11c <ull_conn_tx_ack+0x438>
		if (conn->tx_head == conn->tx_data) {
   3e026:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3e02a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3e02e:	428b      	cmp	r3, r1
   3e030:	f000 809c 	beq.w	3e16c <ull_conn_tx_ack+0x488>
		} else if (!conn->tx_ctrl) {
   3e034:	2a00      	cmp	r2, #0
   3e036:	f000 80a6 	beq.w	3e186 <ull_conn_tx_ack+0x4a2>
	tx->next = conn->tx_ctrl_last->next;
   3e03a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
   3e03e:	681a      	ldr	r2, [r3, #0]
   3e040:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   3e042:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   3e044:	6823      	ldr	r3, [r4, #0]
	conn->tx_ctrl_last = tx;
   3e046:	f8c7 41dc 	str.w	r4, [r7, #476]	; 0x1dc
		if (link->next == (void *)tx) {
   3e04a:	6832      	ldr	r2, [r6, #0]
	if (!tx->next) {
   3e04c:	2b00      	cmp	r3, #0
   3e04e:	f43f aecb 	beq.w	3dde8 <ull_conn_tx_ack+0x104>
		if (link->next == (void *)tx) {
   3e052:	2a00      	cmp	r2, #0
   3e054:	f43f aecd 	beq.w	3ddf2 <ull_conn_tx_ack+0x10e>
}
   3e058:	b003      	add	sp, #12
   3e05a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3e05c:	000530cc 	.word	0x000530cc
   3e060:	0005329c 	.word	0x0005329c
   3e064:	00052bbc 	.word	0x00052bbc
   3e068:	00053284 	.word	0x00053284
   3e06c:	20003368 	.word	0x20003368
   3e070:	00053290 	.word	0x00053290
   3e074:	200059a8 	.word	0x200059a8
		if (conn->lll.role) {
   3e078:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3e07c:	2b00      	cmp	r3, #0
   3e07e:	da9f      	bge.n	3dfc0 <ull_conn_tx_ack+0x2dc>
				conn->common.txn_lock = 0U;
   3e080:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   3e084:	4b47      	ldr	r3, [pc, #284]	; (3e1a4 <ull_conn_tx_ack+0x4c0>)
				conn->common.txn_lock = 0U;
   3e086:	f36f 0241 	bfc	r2, #1, #1
   3e08a:	f880 20e4 	strb.w	r2, [r0, #228]	; 0xe4
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   3e08e:	e893 0003 	ldmia.w	r3, {r0, r1}
   3e092:	ab02      	add	r3, sp, #8
   3e094:	e903 0003 	stmdb	r3, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   3e098:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
   3e09c:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
   3e0a0:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   3e0a4:	f003 0307 	and.w	r3, r3, #7
   3e0a8:	3308      	adds	r3, #8
   3e0aa:	446b      	add	r3, sp
   3e0ac:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   3e0b0:	f363 1206 	bfi	r2, r3, #4, #3
   3e0b4:	f887 2060 	strb.w	r2, [r7, #96]	; 0x60
   3e0b8:	e726      	b.n	3df08 <ull_conn_tx_ack+0x224>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   3e0ba:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
		if (link->next == (void *)tx) {
   3e0be:	6830      	ldr	r0, [r6, #0]
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   3e0c0:	f003 0207 	and.w	r2, r3, #7
   3e0c4:	2a01      	cmp	r2, #1
   3e0c6:	f47f ae2c 	bne.w	3dd22 <ull_conn_tx_ack+0x3e>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   3e0ca:	2202      	movs	r2, #2
   3e0cc:	f362 0302 	bfi	r3, r2, #0, #3
		if (link->next == (void *)tx) {
   3e0d0:	4284      	cmp	r4, r0
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   3e0d2:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
		if (link->next == (void *)tx) {
   3e0d6:	f47f ae26 	bne.w	3dd26 <ull_conn_tx_ack+0x42>
			LL_ASSERT(link->next);
   3e0da:	4620      	mov	r0, r4
   3e0dc:	e697      	b.n	3de0e <ull_conn_tx_ack+0x12a>
		if (conn->lll.role) {
   3e0de:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3e0e2:	2b00      	cmp	r3, #0
   3e0e4:	f6bf aea7 	bge.w	3de36 <ull_conn_tx_ack+0x152>
			conn->llcp_enc.pause_rx = 0U;
   3e0e8:	f890 3176 	ldrb.w	r3, [r0, #374]	; 0x176
   3e0ec:	f023 0303 	bic.w	r3, r3, #3
   3e0f0:	f880 3176 	strb.w	r3, [r0, #374]	; 0x176
			conn->procedure_expire = 0U;
   3e0f4:	2300      	movs	r3, #0
   3e0f6:	f8a0 30c8 	strh.w	r3, [r0, #200]	; 0xc8
			conn->llcp_ack = conn->llcp_req;
   3e0fa:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
   3e0fe:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
		if (link->next == (void *)tx) {
   3e102:	6830      	ldr	r0, [r6, #0]
   3e104:	4284      	cmp	r4, r0
   3e106:	f47f ae0e 	bne.w	3dd26 <ull_conn_tx_ack+0x42>
			LL_ASSERT(link->next);
   3e10a:	4620      	mov	r0, r4
   3e10c:	e67f      	b.n	3de0e <ull_conn_tx_ack+0x12a>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   3e10e:	4b25      	ldr	r3, [pc, #148]	; (3e1a4 <ull_conn_tx_ack+0x4c0>)
   3e110:	e893 0003 	ldmia.w	r3, {r0, r1}
   3e114:	ab02      	add	r3, sp, #8
   3e116:	e903 0003 	stmdb	r3, {r0, r1}
			if (pdu_tx->llctrl.opcode ==
   3e11a:	e7bd      	b.n	3e098 <ull_conn_tx_ack+0x3b4>
		if (!conn->tx_ctrl) {
   3e11c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
   3e120:	2a00      	cmp	r2, #0
   3e122:	d18a      	bne.n	3e03a <ull_conn_tx_ack+0x356>
			tx->next = conn->tx_head;
   3e124:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   3e126:	e9c7 4475 	strd	r4, r4, [r7, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3e12a:	f8c7 41dc 	str.w	r4, [r7, #476]	; 0x1dc
   3e12e:	e78c      	b.n	3e04a <ull_conn_tx_ack+0x366>
		if (link->next == (void *)tx) {
   3e130:	6830      	ldr	r0, [r6, #0]
					conn->llcp_length.state =
   3e132:	2304      	movs	r3, #4
   3e134:	f363 0202 	bfi	r2, r3, #0, #3
		if (link->next == (void *)tx) {
   3e138:	4284      	cmp	r4, r0
					conn->llcp_length.state =
   3e13a:	f887 21be 	strb.w	r2, [r7, #446]	; 0x1be
		if (link->next == (void *)tx) {
   3e13e:	f47f adf2 	bne.w	3dd26 <ull_conn_tx_ack+0x42>
			LL_ASSERT(link->next);
   3e142:	4620      	mov	r0, r4
   3e144:	e663      	b.n	3de0e <ull_conn_tx_ack+0x12a>
		if (link->next == (void *)tx) {
   3e146:	6830      	ldr	r0, [r6, #0]
				conn->llcp_length.tx_octets =
   3e148:	f8a7 31c2 	strh.w	r3, [r7, #450]	; 0x1c2
				conn->llcp_length.cache.tx_octets = 0;
   3e14c:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3e14e:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   3e152:	f8a7 31c8 	strh.w	r3, [r7, #456]	; 0x1c8
		if (link->next == (void *)tx) {
   3e156:	4284      	cmp	r4, r0
				conn->llcp_length.tx_time =
   3e158:	f8b7 31ca 	ldrh.w	r3, [r7, #458]	; 0x1ca
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3e15c:	f887 21be 	strb.w	r2, [r7, #446]	; 0x1be
				conn->llcp_length.tx_time =
   3e160:	f8a7 31c6 	strh.w	r3, [r7, #454]	; 0x1c6
		if (link->next == (void *)tx) {
   3e164:	f47f addf 	bne.w	3dd26 <ull_conn_tx_ack+0x42>
			LL_ASSERT(link->next);
   3e168:	4620      	mov	r0, r4
   3e16a:	e650      	b.n	3de0e <ull_conn_tx_ack+0x12a>
			conn->tx_data = conn->tx_data->next;
   3e16c:	6819      	ldr	r1, [r3, #0]
   3e16e:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3e172:	2a00      	cmp	r2, #0
   3e174:	f47f af61 	bne.w	3e03a <ull_conn_tx_ack+0x356>
			tx->next = conn->tx_head->next;
   3e178:	681a      	ldr	r2, [r3, #0]
   3e17a:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   3e17c:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   3e17e:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   3e180:	e9c7 4476 	strd	r4, r4, [r7, #472]	; 0x1d8
   3e184:	e761      	b.n	3e04a <ull_conn_tx_ack+0x366>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3e186:	791a      	ldrb	r2, [r3, #4]
   3e188:	f002 0203 	and.w	r2, r2, #3
   3e18c:	2a03      	cmp	r2, #3
   3e18e:	d002      	beq.n	3e196 <ull_conn_tx_ack+0x4b2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3e190:	e9c7 3376 	strd	r3, r3, [r7, #472]	; 0x1d8
   3e194:	e751      	b.n	3e03a <ull_conn_tx_ack+0x356>
	    ((pdu_data_tx->llctrl.opcode !=
   3e196:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3e198:	2a03      	cmp	r2, #3
   3e19a:	d0ed      	beq.n	3e178 <ull_conn_tx_ack+0x494>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3e19c:	2a0a      	cmp	r2, #10
   3e19e:	d1f7      	bne.n	3e190 <ull_conn_tx_ack+0x4ac>
   3e1a0:	e7ea      	b.n	3e178 <ull_conn_tx_ack+0x494>
   3e1a2:	bf00      	nop
   3e1a4:	000532a8 	.word	0x000532a8

0003e1a8 <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
   3e1a8:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   3e1ac:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
   3e1b0:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
   3e1b2:	bf03      	ittte	eq
   3e1b4:	3301      	addeq	r3, #1
   3e1b6:	f880 30f0 	strbeq.w	r3, [r0, #240]	; 0xf0
	return 0;
   3e1ba:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
   3e1bc:	200c      	movne	r0, #12
}
   3e1be:	4770      	bx	lr

0003e1c0 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   3e1c0:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   3e1c4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
	switch (lll->phy_tx_time) {
   3e1c8:	f3c2 1202 	ubfx	r2, r2, #4, #3
   3e1cc:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   3e1ce:	bf14      	ite	ne
   3e1d0:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   3e1d2:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   3e1d4:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	return max_tx_octets;
   3e1d8:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   3e1da:	bf14      	ite	ne
   3e1dc:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   3e1de:	3b0b      	subeq	r3, #11
   3e1e0:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   3e1e2:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   3e1e4:	bf44      	itt	mi
   3e1e6:	3b04      	submi	r3, #4
   3e1e8:	b29b      	uxthmi	r3, r3
}
   3e1ea:	4298      	cmp	r0, r3
   3e1ec:	bf28      	it	cs
   3e1ee:	4618      	movcs	r0, r3
   3e1f0:	4770      	bx	lr
   3e1f2:	bf00      	nop

0003e1f4 <ull_pdu_data_init>:
}
   3e1f4:	4770      	bx	lr
   3e1f6:	bf00      	nop

0003e1f8 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   3e1f8:	b510      	push	{r4, lr}
   3e1fa:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   3e1fc:	b930      	cbnz	r0, 3e20c <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
   3e1fe:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3e202:	f36f 0382 	bfc	r3, #2, #1
   3e206:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
}
   3e20a:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   3e20c:	4a09      	ldr	r2, [pc, #36]	; (3e234 <ticker_update_latency_cancel_op_cb+0x3c>)
   3e20e:	490a      	ldr	r1, [pc, #40]	; (3e238 <ticker_update_latency_cancel_op_cb+0x40>)
   3e210:	480a      	ldr	r0, [pc, #40]	; (3e23c <ticker_update_latency_cancel_op_cb+0x44>)
   3e212:	f240 23af 	movw	r3, #687	; 0x2af
   3e216:	f00b fc77 	bl	49b08 <printk>
   3e21a:	4040      	eors	r0, r0
   3e21c:	f380 8811 	msr	BASEPRI, r0
   3e220:	f04f 0003 	mov.w	r0, #3
   3e224:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
   3e226:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3e22a:	f36f 0382 	bfc	r3, #2, #1
   3e22e:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
}
   3e232:	bd10      	pop	{r4, pc}
   3e234:	000532e4 	.word	0x000532e4
   3e238:	0005332c 	.word	0x0005332c
   3e23c:	00052bbc 	.word	0x00052bbc

0003e240 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3e240:	b900      	cbnz	r0, 3e244 <ticker_op_cb+0x4>
   3e242:	4770      	bx	lr
{
   3e244:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3e246:	4a07      	ldr	r2, [pc, #28]	; (3e264 <ticker_op_cb+0x24>)
   3e248:	4907      	ldr	r1, [pc, #28]	; (3e268 <ticker_op_cb+0x28>)
   3e24a:	4808      	ldr	r0, [pc, #32]	; (3e26c <ticker_op_cb+0x2c>)
   3e24c:	f240 23a7 	movw	r3, #679	; 0x2a7
   3e250:	f00b fc5a 	bl	49b08 <printk>
   3e254:	4040      	eors	r0, r0
   3e256:	f380 8811 	msr	BASEPRI, r0
   3e25a:	f04f 0003 	mov.w	r0, #3
   3e25e:	df02      	svc	2
}
   3e260:	bd08      	pop	{r3, pc}
   3e262:	bf00      	nop
   3e264:	000532e4 	.word	0x000532e4
   3e268:	0005312c 	.word	0x0005312c
   3e26c:	00052bbc 	.word	0x00052bbc

0003e270 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   3e270:	2801      	cmp	r0, #1
   3e272:	d000      	beq.n	3e276 <ticker_op_stop_adv_cb+0x6>
   3e274:	4770      	bx	lr
{
   3e276:	b510      	push	{r4, lr}
   3e278:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   3e27a:	f7f9 fd91 	bl	37da0 <ull_disable_mark_get>
   3e27e:	4284      	cmp	r4, r0
   3e280:	d00c      	beq.n	3e29c <ticker_op_stop_adv_cb+0x2c>
   3e282:	4a07      	ldr	r2, [pc, #28]	; (3e2a0 <ticker_op_stop_adv_cb+0x30>)
   3e284:	4907      	ldr	r1, [pc, #28]	; (3e2a4 <ticker_op_stop_adv_cb+0x34>)
   3e286:	4808      	ldr	r0, [pc, #32]	; (3e2a8 <ticker_op_stop_adv_cb+0x38>)
   3e288:	f240 239f 	movw	r3, #671	; 0x29f
   3e28c:	f00b fc3c 	bl	49b08 <printk>
   3e290:	4040      	eors	r0, r0
   3e292:	f380 8811 	msr	BASEPRI, r0
   3e296:	f04f 0003 	mov.w	r0, #3
   3e29a:	df02      	svc	2
}
   3e29c:	bd10      	pop	{r4, pc}
   3e29e:	bf00      	nop
   3e2a0:	000532e4 	.word	0x000532e4
   3e2a4:	00053340 	.word	0x00053340
   3e2a8:	00052bbc 	.word	0x00052bbc

0003e2ac <ull_periph_ticker_cb>:
{
   3e2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e2b0:	9c07      	ldr	r4, [sp, #28]
   3e2b2:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3e2b6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   3e2b8:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3e2ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3e2be:	4299      	cmp	r1, r3
   3e2c0:	d026      	beq.n	3e310 <ull_periph_ticker_cb+0x64>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   3e2c2:	4606      	mov	r6, r0
   3e2c4:	4617      	mov	r7, r2
   3e2c6:	4601      	mov	r1, r0
   3e2c8:	462a      	mov	r2, r5
   3e2ca:	4620      	mov	r0, r4
   3e2cc:	f7fd fe7e 	bl	3bfcc <ull_conn_llcp>
		if (ret) {
   3e2d0:	b9f0      	cbnz	r0, 3e310 <ull_periph_ticker_cb+0x64>
	return ++hdr->ref;
   3e2d2:	7823      	ldrb	r3, [r4, #0]
   3e2d4:	3301      	adds	r3, #1
   3e2d6:	b2db      	uxtb	r3, r3
   3e2d8:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   3e2da:	b34b      	cbz	r3, 3e330 <ull_periph_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   3e2dc:	491b      	ldr	r1, [pc, #108]	; (3e34c <ull_periph_ticker_cb+0xa0>)
	mfy.param = &p;
   3e2de:	4b1c      	ldr	r3, [pc, #112]	; (3e350 <ull_periph_ticker_cb+0xa4>)
	p.lazy = lazy;
   3e2e0:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   3e2e2:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3e2e6:	2200      	movs	r2, #0
	p.param = &conn->lll;
   3e2e8:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   3e2ea:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   3e2ee:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   3e2f2:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3e2f4:	2001      	movs	r0, #1
   3e2f6:	4611      	mov	r1, r2
   3e2f8:	f7f5 fed4 	bl	340a4 <mayfly_enqueue>
	LL_ASSERT(!err);
   3e2fc:	b950      	cbnz	r0, 3e314 <ull_periph_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   3e2fe:	20ff      	movs	r0, #255	; 0xff
   3e300:	f7ff f8f2 	bl	3d4e8 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   3e304:	4620      	mov	r0, r4
   3e306:	21ff      	movs	r1, #255	; 0xff
}
   3e308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   3e30c:	f7ff bb5c 	b.w	3d9c8 <ull_conn_tx_lll_enqueue>
}
   3e310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   3e314:	4a0f      	ldr	r2, [pc, #60]	; (3e354 <ull_periph_ticker_cb+0xa8>)
   3e316:	4910      	ldr	r1, [pc, #64]	; (3e358 <ull_periph_ticker_cb+0xac>)
   3e318:	4810      	ldr	r0, [pc, #64]	; (3e35c <ull_periph_ticker_cb+0xb0>)
   3e31a:	f240 232a 	movw	r3, #554	; 0x22a
   3e31e:	f00b fbf3 	bl	49b08 <printk>
   3e322:	4040      	eors	r0, r0
   3e324:	f380 8811 	msr	BASEPRI, r0
   3e328:	f04f 0003 	mov.w	r0, #3
   3e32c:	df02      	svc	2
   3e32e:	e7e6      	b.n	3e2fe <ull_periph_ticker_cb+0x52>
	LL_ASSERT(ref);
   3e330:	4a08      	ldr	r2, [pc, #32]	; (3e354 <ull_periph_ticker_cb+0xa8>)
   3e332:	490b      	ldr	r1, [pc, #44]	; (3e360 <ull_periph_ticker_cb+0xb4>)
   3e334:	4809      	ldr	r0, [pc, #36]	; (3e35c <ull_periph_ticker_cb+0xb0>)
   3e336:	f240 231d 	movw	r3, #541	; 0x21d
   3e33a:	f00b fbe5 	bl	49b08 <printk>
   3e33e:	4040      	eors	r0, r0
   3e340:	f380 8811 	msr	BASEPRI, r0
   3e344:	f04f 0003 	mov.w	r0, #3
   3e348:	df02      	svc	2
   3e34a:	e7c7      	b.n	3e2dc <ull_periph_ticker_cb+0x30>
   3e34c:	20005e44 	.word	0x20005e44
   3e350:	20000d5c 	.word	0x20000d5c
   3e354:	000532e4 	.word	0x000532e4
   3e358:	00052d98 	.word	0x00052d98
   3e35c:	00052bbc 	.word	0x00052bbc
   3e360:	00053030 	.word	0x00053030

0003e364 <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   3e364:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   3e366:	b123      	cbz	r3, 3e372 <ull_periph_latency_cancel+0xe>
   3e368:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   3e36c:	f012 0304 	ands.w	r3, r2, #4
   3e370:	d000      	beq.n	3e374 <ull_periph_latency_cancel+0x10>
   3e372:	4770      	bx	lr
{
   3e374:	b510      	push	{r4, lr}
		conn->periph.latency_cancel = 1U;
   3e376:	f042 0204 	orr.w	r2, r2, #4
{
   3e37a:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   3e37c:	4c11      	ldr	r4, [pc, #68]	; (3e3c4 <ull_periph_latency_cancel+0x60>)
		conn->periph.latency_cancel = 1U;
   3e37e:	f880 20e4 	strb.w	r2, [r0, #228]	; 0xe4
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   3e382:	3105      	adds	r1, #5
   3e384:	2201      	movs	r2, #1
   3e386:	e9cd 3202 	strd	r3, r2, [sp, #8]
   3e38a:	e9cd 3404 	strd	r3, r4, [sp, #16]
   3e38e:	e9cd 3300 	strd	r3, r3, [sp]
   3e392:	9006      	str	r0, [sp, #24]
   3e394:	b2ca      	uxtb	r2, r1
   3e396:	4618      	mov	r0, r3
   3e398:	2103      	movs	r1, #3
   3e39a:	f7f7 f93d 	bl	35618 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   3e39e:	f030 0302 	bics.w	r3, r0, #2
   3e3a2:	d00c      	beq.n	3e3be <ull_periph_latency_cancel+0x5a>
   3e3a4:	4a08      	ldr	r2, [pc, #32]	; (3e3c8 <ull_periph_latency_cancel+0x64>)
   3e3a6:	4909      	ldr	r1, [pc, #36]	; (3e3cc <ull_periph_latency_cancel+0x68>)
   3e3a8:	4809      	ldr	r0, [pc, #36]	; (3e3d0 <ull_periph_latency_cancel+0x6c>)
   3e3aa:	f240 13e3 	movw	r3, #483	; 0x1e3
   3e3ae:	f00b fbab 	bl	49b08 <printk>
   3e3b2:	4040      	eors	r0, r0
   3e3b4:	f380 8811 	msr	BASEPRI, r0
   3e3b8:	f04f 0003 	mov.w	r0, #3
   3e3bc:	df02      	svc	2
}
   3e3be:	b008      	add	sp, #32
   3e3c0:	bd10      	pop	{r4, pc}
   3e3c2:	bf00      	nop
   3e3c4:	0003e1f9 	.word	0x0003e1f9
   3e3c8:	000532e4 	.word	0x000532e4
   3e3cc:	000531ac 	.word	0x000531ac
   3e3d0:	00052bbc 	.word	0x00052bbc

0003e3d4 <ll_start_enc_req_send>:
{
   3e3d4:	b570      	push	{r4, r5, r6, lr}
   3e3d6:	460d      	mov	r5, r1
   3e3d8:	4616      	mov	r6, r2
	conn = ll_connected_get(handle);
   3e3da:	f7fb fe57 	bl	3a08c <ll_connected_get>
	if (!conn) {
   3e3de:	b3f8      	cbz	r0, 3e460 <ll_start_enc_req_send+0x8c>
	if (error_code) {
   3e3e0:	4604      	mov	r4, r0
   3e3e2:	b95d      	cbnz	r5, 3e3fc <ll_start_enc_req_send+0x28>
		if ((conn->llcp_req == conn->llcp_ack) ||
   3e3e4:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
   3e3e8:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   3e3ec:	429a      	cmp	r2, r3
   3e3ee:	d003      	beq.n	3e3f8 <ll_start_enc_req_send+0x24>
   3e3f0:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
   3e3f4:	2b03      	cmp	r3, #3
   3e3f6:	d026      	beq.n	3e446 <ll_start_enc_req_send+0x72>
				return BT_HCI_ERR_CMD_DISALLOWED;
   3e3f8:	200c      	movs	r0, #12
}
   3e3fa:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   3e3fc:	f890 3176 	ldrb.w	r3, [r0, #374]	; 0x176
   3e400:	f013 0304 	ands.w	r3, r3, #4
   3e404:	d113      	bne.n	3e42e <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   3e406:	f890 10f0 	ldrb.w	r1, [r0, #240]	; 0xf0
   3e40a:	f890 20f1 	ldrb.w	r2, [r0, #241]	; 0xf1
   3e40e:	4291      	cmp	r1, r2
   3e410:	d0f2      	beq.n	3e3f8 <ll_start_enc_req_send+0x24>
   3e412:	f890 20f2 	ldrb.w	r2, [r0, #242]	; 0xf2
   3e416:	2a03      	cmp	r2, #3
   3e418:	d1ee      	bne.n	3e3f8 <ll_start_enc_req_send+0x24>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3e41a:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
			conn->llcp.encryption.error_code = error_code;
   3e41e:	f880 5101 	strb.w	r5, [r0, #257]	; 0x101
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3e422:	f363 0201 	bfi	r2, r3, #0, #2
   3e426:	f880 2100 	strb.w	r2, [r0, #256]	; 0x100
	return 0;
   3e42a:	2000      	movs	r0, #0
}
   3e42c:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   3e42e:	f890 2150 	ldrb.w	r2, [r0, #336]	; 0x150
			if (conn->llcp_terminate.ack !=
   3e432:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
   3e436:	4293      	cmp	r3, r2
   3e438:	d1de      	bne.n	3e3f8 <ll_start_enc_req_send+0x24>
			conn->llcp_terminate.req++;
   3e43a:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   3e43c:	f880 5152 	strb.w	r5, [r0, #338]	; 0x152
			conn->llcp_terminate.req++;
   3e440:	f880 3150 	strb.w	r3, [r0, #336]	; 0x150
   3e444:	e7f1      	b.n	3e42a <ll_start_enc_req_send+0x56>
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   3e446:	2210      	movs	r2, #16
   3e448:	4631      	mov	r1, r6
   3e44a:	f200 1081 	addw	r0, r0, #385	; 0x181
   3e44e:	f00d fc8a 	bl	4bd66 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3e452:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
   3e456:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   3e45a:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
   3e45e:	e7e4      	b.n	3e42a <ll_start_enc_req_send+0x56>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3e460:	2002      	movs	r0, #2
}
   3e462:	bd70      	pop	{r4, r5, r6, pc}

0003e464 <ticker_op_stop_scan_cb>:
}
   3e464:	4770      	bx	lr
   3e466:	bf00      	nop

0003e468 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3e468:	b900      	cbnz	r0, 3e46c <ticker_op_cb+0x4>
   3e46a:	4770      	bx	lr
{
   3e46c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3e46e:	4a07      	ldr	r2, [pc, #28]	; (3e48c <ticker_op_cb+0x24>)
   3e470:	4907      	ldr	r1, [pc, #28]	; (3e490 <ticker_op_cb+0x28>)
   3e472:	4808      	ldr	r0, [pc, #32]	; (3e494 <ticker_op_cb+0x2c>)
   3e474:	f240 43ad 	movw	r3, #1197	; 0x4ad
   3e478:	f00b fb46 	bl	49b08 <printk>
   3e47c:	4040      	eors	r0, r0
   3e47e:	f380 8811 	msr	BASEPRI, r0
   3e482:	f04f 0003 	mov.w	r0, #3
   3e486:	df02      	svc	2
}
   3e488:	bd08      	pop	{r3, pc}
   3e48a:	bf00      	nop
   3e48c:	00053370 	.word	0x00053370
   3e490:	0005312c 	.word	0x0005312c
   3e494:	00052bbc 	.word	0x00052bbc

0003e498 <ull_central_ticker_cb>:
{
   3e498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e49c:	9c07      	ldr	r4, [sp, #28]
   3e49e:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3e4a2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   3e4a4:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3e4a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3e4aa:	4299      	cmp	r1, r3
   3e4ac:	d02d      	beq.n	3e50a <ull_central_ticker_cb+0x72>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   3e4ae:	4606      	mov	r6, r0
   3e4b0:	4617      	mov	r7, r2
   3e4b2:	4601      	mov	r1, r0
   3e4b4:	462a      	mov	r2, r5
   3e4b6:	4620      	mov	r0, r4
   3e4b8:	f7fd fd88 	bl	3bfcc <ull_conn_llcp>
		if (ret) {
   3e4bc:	bb28      	cbnz	r0, 3e50a <ull_central_ticker_cb+0x72>
   3e4be:	7823      	ldrb	r3, [r4, #0]
   3e4c0:	3301      	adds	r3, #1
   3e4c2:	b2db      	uxtb	r3, r3
   3e4c4:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   3e4c6:	b383      	cbz	r3, 3e52a <ull_central_ticker_cb+0x92>
	ull_conn_tx_demux(2);
   3e4c8:	2002      	movs	r0, #2
   3e4ca:	f7ff f80d 	bl	3d4e8 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 2);
   3e4ce:	2102      	movs	r1, #2
   3e4d0:	4620      	mov	r0, r4
   3e4d2:	f7ff fa79 	bl	3d9c8 <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
   3e4d6:	491c      	ldr	r1, [pc, #112]	; (3e548 <ull_central_ticker_cb+0xb0>)
	mfy.param = &p;
   3e4d8:	4b1c      	ldr	r3, [pc, #112]	; (3e54c <ull_central_ticker_cb+0xb4>)
	p.lazy = lazy;
   3e4da:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   3e4dc:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3e4e0:	2200      	movs	r2, #0
	p.param = &conn->lll;
   3e4e2:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   3e4e4:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   3e4e8:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   3e4ec:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3e4ee:	2001      	movs	r0, #1
   3e4f0:	4611      	mov	r1, r2
   3e4f2:	f7f5 fdd7 	bl	340a4 <mayfly_enqueue>
	LL_ASSERT(!err);
   3e4f6:	b950      	cbnz	r0, 3e50e <ull_central_ticker_cb+0x76>
	ull_conn_tx_demux(UINT8_MAX);
   3e4f8:	20ff      	movs	r0, #255	; 0xff
   3e4fa:	f7fe fff5 	bl	3d4e8 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   3e4fe:	4620      	mov	r0, r4
   3e500:	21ff      	movs	r1, #255	; 0xff
}
   3e502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   3e506:	f7ff ba5f 	b.w	3d9c8 <ull_conn_tx_lll_enqueue>
}
   3e50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   3e50e:	4a10      	ldr	r2, [pc, #64]	; (3e550 <ull_central_ticker_cb+0xb8>)
   3e510:	4910      	ldr	r1, [pc, #64]	; (3e554 <ull_central_ticker_cb+0xbc>)
   3e512:	4811      	ldr	r0, [pc, #68]	; (3e558 <ull_central_ticker_cb+0xc0>)
   3e514:	f240 434d 	movw	r3, #1101	; 0x44d
   3e518:	f00b faf6 	bl	49b08 <printk>
   3e51c:	4040      	eors	r0, r0
   3e51e:	f380 8811 	msr	BASEPRI, r0
   3e522:	f04f 0003 	mov.w	r0, #3
   3e526:	df02      	svc	2
   3e528:	e7e6      	b.n	3e4f8 <ull_central_ticker_cb+0x60>
	LL_ASSERT(ref);
   3e52a:	4a09      	ldr	r2, [pc, #36]	; (3e550 <ull_central_ticker_cb+0xb8>)
   3e52c:	490b      	ldr	r1, [pc, #44]	; (3e55c <ull_central_ticker_cb+0xc4>)
   3e52e:	480a      	ldr	r0, [pc, #40]	; (3e558 <ull_central_ticker_cb+0xc0>)
   3e530:	f240 433a 	movw	r3, #1082	; 0x43a
   3e534:	f00b fae8 	bl	49b08 <printk>
   3e538:	4040      	eors	r0, r0
   3e53a:	f380 8811 	msr	BASEPRI, r0
   3e53e:	f04f 0003 	mov.w	r0, #3
   3e542:	df02      	svc	2
   3e544:	e7c0      	b.n	3e4c8 <ull_central_ticker_cb+0x30>
   3e546:	bf00      	nop
   3e548:	20005e5c 	.word	0x20005e5c
   3e54c:	20000d6c 	.word	0x20000d6c
   3e550:	00053370 	.word	0x00053370
   3e554:	00052d98 	.word	0x00052d98
   3e558:	00052bbc 	.word	0x00052bbc
   3e55c:	00053030 	.word	0x00053030

0003e560 <ll_connect_disable>:
{
   3e560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e564:	4606      	mov	r6, r0
	scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   3e566:	2000      	movs	r0, #0
   3e568:	f7fa fe78 	bl	3925c <ull_scan_is_enabled_get>
	if (!scan) {
   3e56c:	b368      	cbz	r0, 3e5ca <ll_connect_disable+0x6a>
	conn_lll = scan_lll->conn;
   3e56e:	6a03      	ldr	r3, [r0, #32]
	if (!conn_lll) {
   3e570:	4604      	mov	r4, r0
   3e572:	b353      	cbz	r3, 3e5ca <ll_connect_disable+0x6a>
	conn_lll->central.cancelled = 1U;
   3e574:	f893 2020 	ldrb.w	r2, [r3, #32]
   3e578:	f042 0202 	orr.w	r2, r2, #2
   3e57c:	f883 2020 	strb.w	r2, [r3, #32]
	conn_lll = scan_lll->conn;
   3e580:	6a07      	ldr	r7, [r0, #32]
	if (!conn_lll) {
   3e582:	b317      	cbz	r7, 3e5ca <ll_connect_disable+0x6a>
		err = ull_scan_disable(SCAN_HANDLE_1M, scan);
   3e584:	4601      	mov	r1, r0
   3e586:	2000      	movs	r0, #0
   3e588:	f7fa fdae 	bl	390e8 <ull_scan_disable>
	if (!err) {
   3e58c:	4605      	mov	r5, r0
   3e58e:	b9c8      	cbnz	r0, 3e5c4 <ll_connect_disable+0x64>
		conn = HDR_LLL2ULL(conn_lll);
   3e590:	683f      	ldr	r7, [r7, #0]
		link = node_rx->hdr.link;
   3e592:	f8d7 8154 	ldr.w	r8, [r7, #340]	; 0x154
		node_rx = (void *)&conn->llcp_terminate.node_rx;
   3e596:	f507 79aa 	add.w	r9, r7, #340	; 0x154
		LL_ASSERT(link);
   3e59a:	f1b8 0f00 	cmp.w	r8, #0
   3e59e:	d018      	beq.n	3e5d2 <ll_connect_disable+0x72>
		ll_rx_link_release(link);
   3e5a0:	4640      	mov	r0, r8
   3e5a2:	f7f9 fb0d 	bl	37bc0 <ll_rx_link_release>
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   3e5a6:	2316      	movs	r3, #22
   3e5a8:	f887 3158 	strb.w	r3, [r7, #344]	; 0x158
		node_rx->hdr.handle = 0xffff;
   3e5ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3e5b0:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
		scan_lll = &scan->lll;
   3e5b4:	341c      	adds	r4, #28
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   3e5b6:	2302      	movs	r3, #2
		node_rx->hdr.rx_ftr.param = scan_lll;
   3e5b8:	f8c7 415c 	str.w	r4, [r7, #348]	; 0x15c
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   3e5bc:	f887 3170 	strb.w	r3, [r7, #368]	; 0x170
		*rx = node_rx;
   3e5c0:	f8c6 9000 	str.w	r9, [r6]
}
   3e5c4:	4628      	mov	r0, r5
   3e5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   3e5ca:	250c      	movs	r5, #12
}
   3e5cc:	4628      	mov	r0, r5
   3e5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
   3e5d2:	4a07      	ldr	r2, [pc, #28]	; (3e5f0 <ll_connect_disable+0x90>)
   3e5d4:	4907      	ldr	r1, [pc, #28]	; (3e5f4 <ll_connect_disable+0x94>)
   3e5d6:	4808      	ldr	r0, [pc, #32]	; (3e5f8 <ll_connect_disable+0x98>)
   3e5d8:	f240 235b 	movw	r3, #603	; 0x25b
   3e5dc:	f00b fa94 	bl	49b08 <printk>
   3e5e0:	4040      	eors	r0, r0
   3e5e2:	f380 8811 	msr	BASEPRI, r0
   3e5e6:	f04f 0003 	mov.w	r0, #3
   3e5ea:	df02      	svc	2
   3e5ec:	e7d8      	b.n	3e5a0 <ll_connect_disable+0x40>
   3e5ee:	bf00      	nop
   3e5f0:	00053370 	.word	0x00053370
   3e5f4:	00053124 	.word	0x00053124
   3e5f8:	00052bbc 	.word	0x00052bbc

0003e5fc <ll_enc_req_send>:
{
   3e5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e600:	4607      	mov	r7, r0
   3e602:	4688      	mov	r8, r1
   3e604:	4691      	mov	r9, r2
   3e606:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
   3e608:	f7fb fd40 	bl	3a08c <ll_connected_get>
	if (!conn) {
   3e60c:	2800      	cmp	r0, #0
   3e60e:	d06a      	beq.n	3e6e6 <ll_enc_req_send+0xea>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
   3e610:	f890 2174 	ldrb.w	r2, [r0, #372]	; 0x174
   3e614:	f890 3175 	ldrb.w	r3, [r0, #373]	; 0x175
   3e618:	429a      	cmp	r2, r3
   3e61a:	4604      	mov	r4, r0
   3e61c:	d142      	bne.n	3e6a4 <ll_enc_req_send+0xa8>
   3e61e:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
   3e622:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   3e626:	429a      	cmp	r2, r3
   3e628:	d003      	beq.n	3e632 <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
   3e62a:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
   3e62e:	2b03      	cmp	r3, #3
   3e630:	d038      	beq.n	3e6a4 <ll_enc_req_send+0xa8>
	tx = ll_tx_mem_acquire();
   3e632:	f7fb fd3f 	bl	3a0b4 <ll_tx_mem_acquire>
	if (tx) {
   3e636:	4605      	mov	r5, r0
   3e638:	b3a0      	cbz	r0, 3e6a4 <ll_enc_req_send+0xa8>
		ull_pdu_data_init(pdu_data_tx);
   3e63a:	3004      	adds	r0, #4
   3e63c:	f7ff fdda 	bl	3e1f4 <ull_pdu_data_init>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
   3e640:	4631      	mov	r1, r6
   3e642:	2210      	movs	r2, #16
   3e644:	f204 1081 	addw	r0, r4, #385	; 0x181
   3e648:	f00d fb8d 	bl	4bd66 <memcpy>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
   3e64c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3e650:	f013 0318 	ands.w	r3, r3, #24
   3e654:	d029      	beq.n	3e6aa <ll_enc_req_send+0xae>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
   3e656:	2b18      	cmp	r3, #24
   3e658:	d121      	bne.n	3e69e <ll_enc_req_send+0xa2>
			memcpy(&conn->llcp_enc.rand[0], rand_num,
   3e65a:	2208      	movs	r2, #8
   3e65c:	4641      	mov	r1, r8
   3e65e:	f204 1079 	addw	r0, r4, #377	; 0x179
   3e662:	f00d fb80 	bl	4bd66 <memcpy>
			conn->llcp_enc.ediv[0] = ediv[0];
   3e666:	f899 3000 	ldrb.w	r3, [r9]
   3e66a:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
			conn->llcp_enc.ediv[1] = ediv[1];
   3e66e:	f899 3001 	ldrb.w	r3, [r9, #1]
   3e672:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   3e676:	792b      	ldrb	r3, [r5, #4]
   3e678:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   3e67c:	2201      	movs	r2, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   3e67e:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
   3e680:	230a      	movs	r3, #10
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   3e682:	716a      	strb	r2, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   3e684:	71eb      	strb	r3, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
   3e686:	4629      	mov	r1, r5
   3e688:	4638      	mov	r0, r7
   3e68a:	f7fb fd1f 	bl	3a0cc <ll_tx_mem_enqueue>
   3e68e:	b930      	cbnz	r0, 3e69e <ll_enc_req_send+0xa2>
		conn->llcp_enc.req++;
   3e690:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
   3e694:	3301      	adds	r3, #1
   3e696:	f884 3174 	strb.w	r3, [r4, #372]	; 0x174
}
   3e69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
   3e69e:	4628      	mov	r0, r5
   3e6a0:	f7fb fd0e 	bl	3a0c0 <ll_tx_mem_release>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3e6a4:	200c      	movs	r0, #12
}
   3e6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   3e6aa:	792b      	ldrb	r3, [r5, #4]
   3e6ac:	f043 0303 	orr.w	r3, r3, #3
   3e6b0:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
   3e6b2:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   3e6b4:	2208      	movs	r2, #8
			pdu_data_tx->len =
   3e6b6:	716b      	strb	r3, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   3e6b8:	2303      	movs	r3, #3
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   3e6ba:	4641      	mov	r1, r8
			pdu_data_tx->llctrl.opcode =
   3e6bc:	71eb      	strb	r3, [r5, #7]
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   3e6be:	18a8      	adds	r0, r5, r2
   3e6c0:	f00d fb51 	bl	4bd66 <memcpy>
			enc_req->ediv[0] = ediv[0];
   3e6c4:	f899 3000 	ldrb.w	r3, [r9]
   3e6c8:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
   3e6ca:	f899 3001 	ldrb.w	r3, [r9, #1]
   3e6ce:	746b      	strb	r3, [r5, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
   3e6d0:	2108      	movs	r1, #8
   3e6d2:	f105 0012 	add.w	r0, r5, #18
   3e6d6:	f001 febf 	bl	40458 <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
   3e6da:	2104      	movs	r1, #4
   3e6dc:	f105 001a 	add.w	r0, r5, #26
   3e6e0:	f001 feba 	bl	40458 <lll_csrand_get>
   3e6e4:	e7cf      	b.n	3e686 <ll_enc_req_send+0x8a>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3e6e6:	2002      	movs	r0, #2
}
   3e6e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003e6ec <ull_central_reset>:
{
   3e6ec:	b530      	push	{r4, r5, lr}
   3e6ee:	b083      	sub	sp, #12
	err = ll_connect_disable(&rx);
   3e6f0:	a801      	add	r0, sp, #4
   3e6f2:	f7ff ff35 	bl	3e560 <ll_connect_disable>
	if (!err) {
   3e6f6:	4604      	mov	r4, r0
   3e6f8:	b110      	cbz	r0, 3e700 <ull_central_reset+0x14>
}
   3e6fa:	4620      	mov	r0, r4
   3e6fc:	b003      	add	sp, #12
   3e6fe:	bd30      	pop	{r4, r5, pc}
		scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   3e700:	f7fa fdac 	bl	3925c <ull_scan_is_enabled_get>
		LL_ASSERT(scan);
   3e704:	4605      	mov	r5, r0
   3e706:	b150      	cbz	r0, 3e71e <ull_central_reset+0x32>
		scan->is_enabled = 0U;
   3e708:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   3e70c:	2200      	movs	r2, #0
		scan->is_enabled = 0U;
   3e70e:	f36f 0300 	bfc	r3, #0, #1
}
   3e712:	4620      	mov	r0, r4
		scan->is_enabled = 0U;
   3e714:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   3e718:	622a      	str	r2, [r5, #32]
}
   3e71a:	b003      	add	sp, #12
   3e71c:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(scan);
   3e71e:	4a07      	ldr	r2, [pc, #28]	; (3e73c <ull_central_reset+0x50>)
   3e720:	4907      	ldr	r1, [pc, #28]	; (3e740 <ull_central_reset+0x54>)
   3e722:	4808      	ldr	r0, [pc, #32]	; (3e744 <ull_central_reset+0x58>)
   3e724:	f240 23e9 	movw	r3, #745	; 0x2e9
   3e728:	f00b f9ee 	bl	49b08 <printk>
   3e72c:	4040      	eors	r0, r0
   3e72e:	f380 8811 	msr	BASEPRI, r0
   3e732:	f04f 0003 	mov.w	r0, #3
   3e736:	df02      	svc	2
   3e738:	e7e6      	b.n	3e708 <ull_central_reset+0x1c>
   3e73a:	bf00      	nop
   3e73c:	00053370 	.word	0x00053370
   3e740:	000533b4 	.word	0x000533b4
   3e744:	00052bbc 	.word	0x00052bbc

0003e748 <ull_central_cleanup>:
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   3e748:	6883      	ldr	r3, [r0, #8]
{
   3e74a:	b570      	push	{r4, r5, r6, lr}
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   3e74c:	681d      	ldr	r5, [r3, #0]
	conn_lll = scan->lll.conn;
   3e74e:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(conn_lll);
   3e750:	b31c      	cbz	r4, 3e79a <ull_central_cleanup+0x52>
	LL_ASSERT(!conn_lll->link_tx_free);
   3e752:	6da3      	ldr	r3, [r4, #88]	; 0x58
	scan->lll.conn = NULL;
   3e754:	2200      	movs	r2, #0
   3e756:	622a      	str	r2, [r5, #32]
	LL_ASSERT(!conn_lll->link_tx_free);
   3e758:	b163      	cbz	r3, 3e774 <ull_central_cleanup+0x2c>
   3e75a:	4a1e      	ldr	r2, [pc, #120]	; (3e7d4 <ull_central_cleanup+0x8c>)
   3e75c:	491e      	ldr	r1, [pc, #120]	; (3e7d8 <ull_central_cleanup+0x90>)
   3e75e:	481f      	ldr	r0, [pc, #124]	; (3e7dc <ull_central_cleanup+0x94>)
   3e760:	f240 3305 	movw	r3, #773	; 0x305
   3e764:	f00b f9d0 	bl	49b08 <printk>
   3e768:	4040      	eors	r0, r0
   3e76a:	f380 8811 	msr	BASEPRI, r0
   3e76e:	f04f 0003 	mov.w	r0, #3
   3e772:	df02      	svc	2
	link = memq_deinit(&conn_lll->memq_tx.head,
   3e774:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   3e778:	f104 0048 	add.w	r0, r4, #72	; 0x48
   3e77c:	f7f5 fc12 	bl	33fa4 <memq_deinit>
	LL_ASSERT(link);
   3e780:	4606      	mov	r6, r0
   3e782:	b1c0      	cbz	r0, 3e7b6 <ull_central_cleanup+0x6e>
	ll_conn_release(conn);
   3e784:	6820      	ldr	r0, [r4, #0]
	conn_lll->link_tx_free = link;
   3e786:	65a6      	str	r6, [r4, #88]	; 0x58
	ll_conn_release(conn);
   3e788:	f7fb fc6a 	bl	3a060 <ll_conn_release>
	scan->is_enabled = 0U;
   3e78c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   3e790:	f36f 0300 	bfc	r3, #0, #1
   3e794:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
}
   3e798:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(conn_lll);
   3e79a:	4a0e      	ldr	r2, [pc, #56]	; (3e7d4 <ull_central_cleanup+0x8c>)
   3e79c:	4910      	ldr	r1, [pc, #64]	; (3e7e0 <ull_central_cleanup+0x98>)
   3e79e:	480f      	ldr	r0, [pc, #60]	; (3e7dc <ull_central_cleanup+0x94>)
   3e7a0:	f240 3302 	movw	r3, #770	; 0x302
   3e7a4:	f00b f9b0 	bl	49b08 <printk>
   3e7a8:	4040      	eors	r0, r0
   3e7aa:	f380 8811 	msr	BASEPRI, r0
   3e7ae:	f04f 0003 	mov.w	r0, #3
   3e7b2:	df02      	svc	2
   3e7b4:	e7cd      	b.n	3e752 <ull_central_cleanup+0xa>
	LL_ASSERT(link);
   3e7b6:	4a07      	ldr	r2, [pc, #28]	; (3e7d4 <ull_central_cleanup+0x8c>)
   3e7b8:	490a      	ldr	r1, [pc, #40]	; (3e7e4 <ull_central_cleanup+0x9c>)
   3e7ba:	4808      	ldr	r0, [pc, #32]	; (3e7dc <ull_central_cleanup+0x94>)
   3e7bc:	f44f 7342 	mov.w	r3, #776	; 0x308
   3e7c0:	f00b f9a2 	bl	49b08 <printk>
   3e7c4:	4040      	eors	r0, r0
   3e7c6:	f380 8811 	msr	BASEPRI, r0
   3e7ca:	f04f 0003 	mov.w	r0, #3
   3e7ce:	df02      	svc	2
   3e7d0:	e7d8      	b.n	3e784 <ull_central_cleanup+0x3c>
   3e7d2:	bf00      	nop
   3e7d4:	00053370 	.word	0x00053370
   3e7d8:	00052e18 	.word	0x00052e18
   3e7dc:	00052bbc 	.word	0x00052bbc
   3e7e0:	00052e0c 	.word	0x00052e0c
   3e7e4:	00053124 	.word	0x00053124

0003e7e8 <ull_central_chm_update>:
{
   3e7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while (handle--) {
   3e7ea:	2505      	movs	r5, #5
		conn->llcp_type = LLCP_CHAN_MAP;
   3e7ec:	2702      	movs	r7, #2
	while (handle--) {
   3e7ee:	f64f 76ff 	movw	r6, #65535	; 0xffff
		conn = ll_connected_get(handle);
   3e7f2:	4628      	mov	r0, r5
   3e7f4:	f7fb fc4a 	bl	3a08c <ll_connected_get>
		if (!conn || conn->lll.role) {
   3e7f8:	4604      	mov	r4, r0
   3e7fa:	b1c0      	cbz	r0, 3e82e <ull_central_chm_update+0x46>
   3e7fc:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3e800:	2b00      	cmp	r3, #0
   3e802:	db14      	blt.n	3e82e <ull_central_chm_update+0x46>
		ret = ull_conn_llcp_req(conn);
   3e804:	f7ff fcd0 	bl	3e1a8 <ull_conn_llcp_req>
   3e808:	4603      	mov	r3, r0
		ull_chan_map_get(conn->llcp.chan_map.chm);
   3e80a:	f104 00f5 	add.w	r0, r4, #245	; 0xf5
		if (ret) {
   3e80e:	b99b      	cbnz	r3, 3e838 <ull_central_chm_update+0x50>
		ull_chan_map_get(conn->llcp.chan_map.chm);
   3e810:	f000 f9d6 	bl	3ebc0 <ull_chan_map_get>
		conn->llcp.chan_map.initiate = 1U;
   3e814:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_req++;
   3e818:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
		conn->llcp_type = LLCP_CHAN_MAP;
   3e81c:	f884 70f2 	strb.w	r7, [r4, #242]	; 0xf2
		conn->llcp.chan_map.initiate = 1U;
   3e820:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_req++;
   3e824:	3301      	adds	r3, #1
		conn->llcp.chan_map.initiate = 1U;
   3e826:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_req++;
   3e82a:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
	while (handle--) {
   3e82e:	3d01      	subs	r5, #1
   3e830:	b2ad      	uxth	r5, r5
   3e832:	42b5      	cmp	r5, r6
   3e834:	d1dd      	bne.n	3e7f2 <ull_central_chm_update+0xa>
	return 0;
   3e836:	2300      	movs	r3, #0
}
   3e838:	4618      	mov	r0, r3
   3e83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003e83c <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	*((uint32_t volatile *)param) = status;
   3e83c:	6008      	str	r0, [r1, #0]
}
   3e83e:	4770      	bx	lr

0003e840 <win_offset_calc.constprop.0>:
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   3e840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e844:	b091      	sub	sp, #68	; 0x44
   3e846:	e9cd 1208 	strd	r1, r2, [sp, #32]
   3e84a:	9305      	str	r3, [sp, #20]
	if (conn_curr->lll.role) {
   3e84c:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   3e850:	6902      	ldr	r2, [r0, #16]
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   3e852:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   3e854:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   3e858:	920a      	str	r2, [sp, #40]	; 0x28
	if (conn_curr->lll.role) {
   3e85a:	2b00      	cmp	r3, #0
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   3e85c:	4686      	mov	lr, r0
	if (conn_curr->lll.role) {
   3e85e:	da02      	bge.n	3e866 <win_offset_calc.constprop.0+0x26>
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
   3e860:	4613      	mov	r3, r2
   3e862:	3314      	adds	r3, #20
   3e864:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   3e866:	2600      	movs	r6, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   3e868:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   3e86c:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   3e870:	f88d 9033 	strb.w	r9, [sp, #51]	; 0x33
		ticks_anchor_prev = offset_index = offset = 0U;
   3e874:	4634      	mov	r4, r6
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   3e876:	f8cd 9010 	str.w	r9, [sp, #16]
		ticks_anchor_prev = offset_index = offset = 0U;
   3e87a:	46b0      	mov	r8, r6
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   3e87c:	4635      	mov	r5, r6
   3e87e:	46b3      	mov	fp, r6
   3e880:	f8cd e01c 	str.w	lr, [sp, #28]
   3e884:	e044      	b.n	3e910 <win_offset_calc.constprop.0+0xd0>
		if (ticker_id == 0xff) {
   3e886:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   3e88a:	28ff      	cmp	r0, #255	; 0xff
   3e88c:	d064      	beq.n	3e958 <win_offset_calc.constprop.0+0x118>
		if ((ticker_id_prev != 0xff) &&
   3e88e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   3e892:	d011      	beq.n	3e8b8 <win_offset_calc.constprop.0+0x78>
   3e894:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3e896:	4543      	cmp	r3, r8
   3e898:	d00e      	beq.n	3e8b8 <win_offset_calc.constprop.0+0x78>
			LL_ASSERT(0);
   3e89a:	498d      	ldr	r1, [pc, #564]	; (3ead0 <win_offset_calc.constprop.0+0x290>)
   3e89c:	4a8d      	ldr	r2, [pc, #564]	; (3ead4 <win_offset_calc.constprop.0+0x294>)
   3e89e:	488e      	ldr	r0, [pc, #568]	; (3ead8 <win_offset_calc.constprop.0+0x298>)
   3e8a0:	f240 13c3 	movw	r3, #451	; 0x1c3
   3e8a4:	f00b f930 	bl	49b08 <printk>
   3e8a8:	4040      	eors	r0, r0
   3e8aa:	f380 8811 	msr	BASEPRI, r0
   3e8ae:	f04f 0003 	mov.w	r0, #3
   3e8b2:	df02      	svc	2
		if ((ticker_id < TICKER_ID_ADV_BASE) ||
   3e8b4:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   3e8b8:	1e83      	subs	r3, r0, #2
   3e8ba:	2b08      	cmp	r3, #8
   3e8bc:	f200 8082 	bhi.w	3e9c4 <win_offset_calc.constprop.0+0x184>
		if (ticker_id < TICKER_ID_CONN_BASE) {
   3e8c0:	2804      	cmp	r0, #4
   3e8c2:	d97e      	bls.n	3e9c2 <win_offset_calc.constprop.0+0x182>
		if (ticker_id_other != 0xff) {
   3e8c4:	9b04      	ldr	r3, [sp, #16]
   3e8c6:	2bff      	cmp	r3, #255	; 0xff
   3e8c8:	d177      	bne.n	3e9ba <win_offset_calc.constprop.0+0x17a>
		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
   3e8ca:	3805      	subs	r0, #5
   3e8cc:	b280      	uxth	r0, r0
   3e8ce:	f7fb fbd5 	bl	3a07c <ll_conn_get>
		if ((conn != conn_curr) && (is_select || !conn->lll.role)) {
   3e8d2:	9b07      	ldr	r3, [sp, #28]
   3e8d4:	4283      	cmp	r3, r0
   3e8d6:	d075      	beq.n	3e9c4 <win_offset_calc.constprop.0+0x184>
   3e8d8:	9a08      	ldr	r2, [sp, #32]
   3e8da:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3e8de:	2a00      	cmp	r2, #0
   3e8e0:	f040 8088 	bne.w	3e9f4 <win_offset_calc.constprop.0+0x1b4>
   3e8e4:	2b00      	cmp	r3, #0
   3e8e6:	db6d      	blt.n	3e9c4 <win_offset_calc.constprop.0+0x184>
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3e8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   3e8ea:	6901      	ldr	r1, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   3e8ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3e8ee:	6818      	ldr	r0, [r3, #0]
			uint32_t ticks_slot_margin = 0U;
   3e8f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
				while ((offset_index < *offset_max) &&
   3e8f4:	783b      	ldrb	r3, [r7, #0]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3e8f6:	4290      	cmp	r0, r2
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   3e8f8:	f101 0128 	add.w	r1, r1, #40	; 0x28
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3e8fc:	f0c0 808a 	bcc.w	3ea14 <win_offset_calc.constprop.0+0x1d4>
	} while (offset_index < *offset_max);
   3e900:	42a3      	cmp	r3, r4
			ticks_anchor_prev = ticks_anchor;
   3e902:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			ticker_id_prev = ticker_id;
   3e906:	f89d 9033 	ldrb.w	r9, [sp, #51]	; 0x33
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   3e90a:	468b      	mov	fp, r1
			ticker_id_prev = ticker_id;
   3e90c:	4615      	mov	r5, r2
	} while (offset_index < *offset_max);
   3e90e:	d95c      	bls.n	3e9ca <win_offset_calc.constprop.0+0x18a>
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   3e910:	ab0f      	add	r3, sp, #60	; 0x3c
   3e912:	9302      	str	r3, [sp, #8]
   3e914:	4b71      	ldr	r3, [pc, #452]	; (3eadc <win_offset_calc.constprop.0+0x29c>)
   3e916:	9301      	str	r3, [sp, #4]
   3e918:	ab0d      	add	r3, sp, #52	; 0x34
   3e91a:	9300      	str	r3, [sp, #0]
		ret_cb = TICKER_STATUS_BUSY;
   3e91c:	2102      	movs	r1, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   3e91e:	ab0e      	add	r3, sp, #56	; 0x38
   3e920:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   3e924:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   3e926:	910f      	str	r1, [sp, #60]	; 0x3c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   3e928:	f7f6 fed0 	bl	356cc <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   3e92c:	2802      	cmp	r0, #2
   3e92e:	d056      	beq.n	3e9de <win_offset_calc.constprop.0+0x19e>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   3e930:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		LL_ASSERT(success);
   3e932:	2b00      	cmp	r3, #0
   3e934:	d0a7      	beq.n	3e886 <win_offset_calc.constprop.0+0x46>
   3e936:	4a67      	ldr	r2, [pc, #412]	; (3ead4 <win_offset_calc.constprop.0+0x294>)
   3e938:	4969      	ldr	r1, [pc, #420]	; (3eae0 <win_offset_calc.constprop.0+0x2a0>)
   3e93a:	4867      	ldr	r0, [pc, #412]	; (3ead8 <win_offset_calc.constprop.0+0x298>)
   3e93c:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
   3e940:	f00b f8e2 	bl	49b08 <printk>
   3e944:	4040      	eors	r0, r0
   3e946:	f380 8811 	msr	BASEPRI, r0
   3e94a:	f04f 0003 	mov.w	r0, #3
   3e94e:	df02      	svc	2
		if (ticker_id == 0xff) {
   3e950:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   3e954:	28ff      	cmp	r0, #255	; 0xff
   3e956:	d19a      	bne.n	3e88e <win_offset_calc.constprop.0+0x4e>
   3e958:	46dc      	mov	ip, fp
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   3e95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3e95c:	6819      	ldr	r1, [r3, #0]
		while (offset_index < *offset_max) {
   3e95e:	783b      	ldrb	r3, [r7, #0]
   3e960:	42a9      	cmp	r1, r5
   3e962:	bf38      	it	cc
   3e964:	4629      	movcc	r1, r5
   3e966:	42a3      	cmp	r3, r4
   3e968:	d925      	bls.n	3e9b6 <win_offset_calc.constprop.0+0x176>
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3e96a:	485e      	ldr	r0, [pc, #376]	; (3eae4 <win_offset_calc.constprop.0+0x2a4>)
			if (offset >= conn_interval) {
   3e96c:	9d05      	ldr	r5, [sp, #20]
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3e96e:	eb0c 0301 	add.w	r3, ip, r1
   3e972:	fba0 2303 	umull	r2, r3, r0, r3
   3e976:	f3c3 124f 	ubfx	r2, r3, #5, #16
			if (offset >= conn_interval) {
   3e97a:	4295      	cmp	r5, r2
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3e97c:	ea4f 1353 	mov.w	r3, r3, lsr #5
			if (offset >= conn_interval) {
   3e980:	f240 8092 	bls.w	3eaa8 <win_offset_calc.constprop.0+0x268>
   3e984:	9e05      	ldr	r6, [sp, #20]
   3e986:	e002      	b.n	3e98e <win_offset_calc.constprop.0+0x14e>
   3e988:	4296      	cmp	r6, r2
   3e98a:	f240 808d 	bls.w	3eaa8 <win_offset_calc.constprop.0+0x268>
			sys_put_le16(offset, (win_offset + (sizeof(uint16_t) *
   3e98e:	eb0a 0544 	add.w	r5, sl, r4, lsl #1
   3e992:	f80a 3014 	strb.w	r3, [sl, r4, lsl #1]
	dst[1] = val >> 8;
   3e996:	0a12      	lsrs	r2, r2, #8
   3e998:	706a      	strb	r2, [r5, #1]
		while (offset_index < *offset_max) {
   3e99a:	783d      	ldrb	r5, [r7, #0]
			offset_index++;
   3e99c:	3401      	adds	r4, #1
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(
   3e99e:	3128      	adds	r1, #40	; 0x28
			offset_index++;
   3e9a0:	b2e4      	uxtb	r4, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3e9a2:	eb0c 0301 	add.w	r3, ip, r1
   3e9a6:	fba0 2303 	umull	r2, r3, r0, r3
		while (offset_index < *offset_max) {
   3e9aa:	42a5      	cmp	r5, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3e9ac:	f3c3 124f 	ubfx	r2, r3, #5, #16
   3e9b0:	ea4f 1353 	mov.w	r3, r3, lsr #5
		while (offset_index < *offset_max) {
   3e9b4:	d8e8      	bhi.n	3e988 <win_offset_calc.constprop.0+0x148>
		*ticks_to_offset_next = ticks_to_expire_prev;
   3e9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3e9b8:	6019      	str	r1, [r3, #0]
	*offset_max = offset_index;
   3e9ba:	703c      	strb	r4, [r7, #0]
}
   3e9bc:	b011      	add	sp, #68	; 0x44
   3e9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e9c2:	9004      	str	r0, [sp, #16]
   3e9c4:	783b      	ldrb	r3, [r7, #0]
	} while (offset_index < *offset_max);
   3e9c6:	42a3      	cmp	r3, r4
   3e9c8:	d8a2      	bhi.n	3e910 <win_offset_calc.constprop.0+0xd0>
	if (ticker_id == 0xff) {
   3e9ca:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   3e9ce:	2bff      	cmp	r3, #255	; 0xff
   3e9d0:	d1f3      	bne.n	3e9ba <win_offset_calc.constprop.0+0x17a>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   3e9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3e9d4:	6819      	ldr	r1, [r3, #0]
   3e9d6:	42a9      	cmp	r1, r5
   3e9d8:	bf38      	it	cc
   3e9da:	4629      	movcc	r1, r5
		while (offset_index < *offset_max) {
   3e9dc:	e7eb      	b.n	3e9b6 <win_offset_calc.constprop.0+0x176>
			while (ret_cb == TICKER_STATUS_BUSY) {
   3e9de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3e9e0:	2b02      	cmp	r3, #2
   3e9e2:	d1a5      	bne.n	3e930 <win_offset_calc.constprop.0+0xf0>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
   3e9e4:	2102      	movs	r1, #2
   3e9e6:	2000      	movs	r0, #0
   3e9e8:	f7f6 feb6 	bl	35758 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   3e9ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3e9ee:	2b02      	cmp	r3, #2
   3e9f0:	d0f8      	beq.n	3e9e4 <win_offset_calc.constprop.0+0x1a4>
   3e9f2:	e79d      	b.n	3e930 <win_offset_calc.constprop.0+0xf0>
			if (conn->lll.role) {
   3e9f4:	2b00      	cmp	r3, #0
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3e9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   3e9f8:	6901      	ldr	r1, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   3e9fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3e9fc:	6818      	ldr	r0, [r3, #0]
				while ((offset_index < *offset_max) &&
   3e9fe:	783b      	ldrb	r3, [r7, #0]
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   3ea00:	bfa7      	ittee	ge
   3ea02:	3128      	addge	r1, #40	; 0x28
			uint32_t ticks_slot_margin = 0U;
   3ea04:	f04f 0800 	movge.w	r8, #0
				ticks_slot_abs_curr += ticks_slot_margin;
   3ea08:	313c      	addlt	r1, #60	; 0x3c
				ticks_slot_margin =
   3ea0a:	f04f 0814 	movlt.w	r8, #20
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3ea0e:	4290      	cmp	r0, r2
   3ea10:	f4bf af76 	bcs.w	3e900 <win_offset_calc.constprop.0+0xc0>
				if (ticks_to_expire_prev <
   3ea14:	4285      	cmp	r5, r0
   3ea16:	bf38      	it	cc
   3ea18:	4605      	movcc	r5, r0
				while ((offset_index < *offset_max) &&
   3ea1a:	429c      	cmp	r4, r3
   3ea1c:	d235      	bcs.n	3ea8a <win_offset_calc.constprop.0+0x24a>
					(ticks_slot_abs_prev + ticks_slot_abs +
   3ea1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3ea20:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
   3ea24:	445b      	add	r3, fp
   3ea26:	4498      	add	r8, r3
   3ea28:	46b2      	mov	sl, r6
						  ticks_slot_abs_prev) /
   3ea2a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 3eae4 <win_offset_calc.constprop.0+0x2a4>
   3ea2e:	9206      	str	r2, [sp, #24]
   3ea30:	462e      	mov	r6, r5
   3ea32:	910b      	str	r1, [sp, #44]	; 0x2c
   3ea34:	4645      	mov	r5, r8
   3ea36:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
   3ea3a:	e013      	b.n	3ea64 <win_offset_calc.constprop.0+0x224>
					if (offset >= conn_interval) {
   3ea3c:	9a05      	ldr	r2, [sp, #20]
					offset = (ticks_to_expire_prev +
   3ea3e:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
					if (offset >= conn_interval) {
   3ea42:	4592      	cmp	sl, r2
					ticks_to_expire_prev +=
   3ea44:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3ea48:	ea4f 201a 	mov.w	r0, sl, lsr #8
						  ticks_slot_abs_prev) /
   3ea4c:	ea4f 1353 	mov.w	r3, r3, lsr #5
					if (offset >= conn_interval) {
   3ea50:	d22e      	bcs.n	3eab0 <win_offset_calc.constprop.0+0x270>
	dst[0] = val;
   3ea52:	f808 3014 	strb.w	r3, [r8, r4, lsl #1]
	dst[1] = val >> 8;
   3ea56:	f88e 0001 	strb.w	r0, [lr, #1]
				while ((offset_index < *offset_max) &&
   3ea5a:	783b      	ldrb	r3, [r7, #0]
					offset_index++;
   3ea5c:	fa5f f48c 	uxtb.w	r4, ip
				while ((offset_index < *offset_max) &&
   3ea60:	42a3      	cmp	r3, r4
   3ea62:	d919      	bls.n	3ea98 <win_offset_calc.constprop.0+0x258>
				       (ticker_ticks_diff_get(
   3ea64:	9806      	ldr	r0, [sp, #24]
   3ea66:	4631      	mov	r1, r6
   3ea68:	f7f6 fe90 	bl	3578c <ticker_ticks_diff_get>
					offset = (ticks_to_expire_prev +
   3ea6c:	eb0b 0c06 	add.w	ip, fp, r6
				while ((offset_index < *offset_max) &&
   3ea70:	42a8      	cmp	r0, r5
						  ticks_slot_abs_prev) /
   3ea72:	fba9 c30c 	umull	ip, r3, r9, ip
					sys_put_le16(offset,
   3ea76:	eb08 0e44 	add.w	lr, r8, r4, lsl #1
					offset_index++;
   3ea7a:	f104 0c01 	add.w	ip, r4, #1
				while ((offset_index < *offset_max) &&
   3ea7e:	d2dd      	bcs.n	3ea3c <win_offset_calc.constprop.0+0x1fc>
   3ea80:	9a06      	ldr	r2, [sp, #24]
   3ea82:	990b      	ldr	r1, [sp, #44]	; 0x2c
   3ea84:	4635      	mov	r5, r6
   3ea86:	4656      	mov	r6, sl
   3ea88:	46c2      	mov	sl, r8
				*ticks_to_offset_next = ticks_to_expire_prev;
   3ea8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3ea8c:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   3ea8e:	9b05      	ldr	r3, [sp, #20]
   3ea90:	42b3      	cmp	r3, r6
   3ea92:	d918      	bls.n	3eac6 <win_offset_calc.constprop.0+0x286>
   3ea94:	783b      	ldrb	r3, [r7, #0]
   3ea96:	e733      	b.n	3e900 <win_offset_calc.constprop.0+0xc0>
				*ticks_to_offset_next = ticks_to_expire_prev;
   3ea98:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3ea9a:	9a06      	ldr	r2, [sp, #24]
   3ea9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   3ea9e:	4635      	mov	r5, r6
   3eaa0:	601d      	str	r5, [r3, #0]
   3eaa2:	4656      	mov	r6, sl
   3eaa4:	46c2      	mov	sl, r8
   3eaa6:	e7f5      	b.n	3ea94 <win_offset_calc.constprop.0+0x254>
		*ticks_to_offset_next = ticks_to_expire_prev;
   3eaa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
				ticks_to_expire_prev = 0U;
   3eaaa:	2100      	movs	r1, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   3eaac:	6019      	str	r1, [r3, #0]
   3eaae:	e784      	b.n	3e9ba <win_offset_calc.constprop.0+0x17a>
				*ticks_to_offset_next = ticks_to_expire_prev;
   3eab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3eab2:	2500      	movs	r5, #0
   3eab4:	601d      	str	r5, [r3, #0]
	if (ticker_id == 0xff) {
   3eab6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
				*ticks_to_offset_next = ticks_to_expire_prev;
   3eaba:	46dc      	mov	ip, fp
   3eabc:	46c2      	mov	sl, r8
	if (ticker_id == 0xff) {
   3eabe:	2bff      	cmp	r3, #255	; 0xff
   3eac0:	f47f af7b 	bne.w	3e9ba <win_offset_calc.constprop.0+0x17a>
   3eac4:	e749      	b.n	3e95a <win_offset_calc.constprop.0+0x11a>
   3eac6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   3eaca:	46dc      	mov	ip, fp
   3eacc:	e7f7      	b.n	3eabe <win_offset_calc.constprop.0+0x27e>
   3eace:	bf00      	nop
   3ead0:	00052c1c 	.word	0x00052c1c
   3ead4:	000533bc 	.word	0x000533bc
   3ead8:	00052bbc 	.word	0x00052bbc
   3eadc:	0003e83d 	.word	0x0003e83d
   3eae0:	00053400 	.word	0x00053400
   3eae4:	cccccccd 	.word	0xcccccccd

0003eae8 <ull_sched_mfy_after_mstr_offset_get>:
	struct lll_scan *lll = p->param;
   3eae8:	68c3      	ldr	r3, [r0, #12]
	after_mstr_offset_get(lll->conn->interval,
   3eaea:	6802      	ldr	r2, [r0, #0]
	conn = HDR_LLL2ULL(lll->conn);
   3eaec:	6859      	ldr	r1, [r3, #4]
	after_mstr_offset_get(lll->conn->interval,
   3eaee:	6858      	ldr	r0, [r3, #4]
			      (ticks_slot_overhead + conn->ull.ticks_slot),
   3eaf0:	6809      	ldr	r1, [r1, #0]
	after_mstr_offset_get(lll->conn->interval,
   3eaf2:	89c0      	ldrh	r0, [r0, #14]
   3eaf4:	6909      	ldr	r1, [r1, #16]
   3eaf6:	3310      	adds	r3, #16
   3eaf8:	f7e9 bcb6 	b.w	28468 <after_mstr_offset_get>

0003eafc <ull_sched_mfy_win_offset_use>:
{
   3eafc:	b510      	push	{r4, lr}
   3eafe:	4604      	mov	r4, r0
	after_mstr_offset_get(conn->lll.interval,
   3eb00:	f8d0 20fc 	ldr.w	r2, [r0, #252]	; 0xfc
   3eb04:	6901      	ldr	r1, [r0, #16]
   3eb06:	f500 7392 	add.w	r3, r0, #292	; 0x124
   3eb0a:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   3eb0c:	f7e9 fcac 	bl	28468 <after_mstr_offset_get>
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   3eb10:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   3eb14:	4908      	ldr	r1, [pc, #32]	; (3eb38 <ull_sched_mfy_win_offset_use+0x3c>)
	sys_put_le16(win_offset, (void *)conn->llcp.conn_upd.pdu_win_offset);
   3eb16:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   3eb1a:	fba1 1303 	umull	r1, r3, r1, r3
   3eb1e:	0a9b      	lsrs	r3, r3, #10
   3eb20:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
   3eb24:	7013      	strb	r3, [r2, #0]
	dst[1] = val >> 8;
   3eb26:	7051      	strb	r1, [r2, #1]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   3eb28:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   3eb2c:	2204      	movs	r2, #4
   3eb2e:	f362 0302 	bfi	r3, r2, #0, #3
   3eb32:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
}
   3eb36:	bd10      	pop	{r4, pc}
   3eb38:	d1b71759 	.word	0xd1b71759

0003eb3c <ull_sched_mfy_free_win_offset_calc>:
{
   3eb3c:	b510      	push	{r4, lr}
	if (conn->lll.role) {
   3eb3e:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	uint32_t ticks_to_offset_default = 0U;
   3eb42:	2100      	movs	r1, #0
{
   3eb44:	b084      	sub	sp, #16
	if (conn->lll.role) {
   3eb46:	428b      	cmp	r3, r1
		conn->llcp_conn_param.ticks_to_offset_next =
   3eb48:	bfbc      	itt	lt
   3eb4a:	f8d0 30ec 	ldrlt.w	r3, [r0, #236]	; 0xec
   3eb4e:	f8c0 31b8 	strlt.w	r3, [r0, #440]	; 0x1b8
	uint8_t offset_max = 6U;
   3eb52:	f04f 0206 	mov.w	r2, #6
{
   3eb56:	4604      	mov	r4, r0
	uint8_t offset_max = 6U;
   3eb58:	f88d 200b 	strb.w	r2, [sp, #11]
		ticks_to_offset_next =
   3eb5c:	bfb8      	it	lt
   3eb5e:	f500 72dc 	addlt.w	r2, r0, #440	; 0x1b8
	win_offset_calc(conn, 0, ticks_to_offset_next,
   3eb62:	f8d0 01b0 	ldr.w	r0, [r0, #432]	; 0x1b0
	uint32_t ticks_to_offset_default = 0U;
   3eb66:	9103      	str	r1, [sp, #12]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   3eb68:	f10d 010b 	add.w	r1, sp, #11
   3eb6c:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
	ticks_to_offset_next = &ticks_to_offset_default;
   3eb70:	bfa8      	it	ge
   3eb72:	aa03      	addge	r2, sp, #12
	win_offset_calc(conn, 0, ticks_to_offset_next,
   3eb74:	e9cd 1000 	strd	r1, r0, [sp]
   3eb78:	2100      	movs	r1, #0
   3eb7a:	4620      	mov	r0, r4
   3eb7c:	f7ff fe60 	bl	3e840 <win_offset_calc.constprop.0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_RDY;
   3eb80:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3eb84:	2208      	movs	r2, #8
   3eb86:	f362 0303 	bfi	r3, r2, #0, #4
   3eb8a:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
}
   3eb8e:	b004      	add	sp, #16
   3eb90:	bd10      	pop	{r4, pc}
   3eb92:	bf00      	nop

0003eb94 <ll_chm_update>:
static uint8_t count = 37U;

static void chan_map_set(uint8_t const *const chan_map);

uint8_t ll_chm_update(uint8_t const *const chm)
{
   3eb94:	b510      	push	{r4, lr}
	return count;
}

static void chan_map_set(uint8_t const *const chan_map)
{
	(void)memcpy(map, chan_map, sizeof(map));
   3eb96:	4c08      	ldr	r4, [pc, #32]	; (3ebb8 <ll_chm_update+0x24>)
   3eb98:	2205      	movs	r2, #5
{
   3eb9a:	4601      	mov	r1, r0
	(void)memcpy(map, chan_map, sizeof(map));
   3eb9c:	4620      	mov	r0, r4
   3eb9e:	f00d f8e2 	bl	4bd66 <memcpy>
	count = util_ones_count_get(map, sizeof(map));
   3eba2:	2105      	movs	r1, #5
   3eba4:	4620      	mov	r0, r4
   3eba6:	f7f5 fb83 	bl	342b0 <util_ones_count_get>
   3ebaa:	4b04      	ldr	r3, [pc, #16]	; (3ebbc <ll_chm_update+0x28>)
   3ebac:	7018      	strb	r0, [r3, #0]
	(void)ull_central_chm_update();
   3ebae:	f7ff fe1b 	bl	3e7e8 <ull_central_chm_update>
}
   3ebb2:	2000      	movs	r0, #0
   3ebb4:	bd10      	pop	{r4, pc}
   3ebb6:	bf00      	nop
   3ebb8:	20000d7c 	.word	0x20000d7c
   3ebbc:	20000ffd 	.word	0x20000ffd

0003ebc0 <ull_chan_map_get>:
{
   3ebc0:	b508      	push	{r3, lr}
	(void)memcpy(chan_map, map, sizeof(map));
   3ebc2:	4903      	ldr	r1, [pc, #12]	; (3ebd0 <ull_chan_map_get+0x10>)
   3ebc4:	2205      	movs	r2, #5
   3ebc6:	f00d f8ce 	bl	4bd66 <memcpy>
	return count;
   3ebca:	4b02      	ldr	r3, [pc, #8]	; (3ebd4 <ull_chan_map_get+0x14>)
}
   3ebcc:	7818      	ldrb	r0, [r3, #0]
   3ebce:	bd08      	pop	{r3, pc}
   3ebd0:	20000d7c 	.word	0x20000d7c
   3ebd4:	20000ffd 	.word	0x20000ffd

0003ebd8 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   3ebd8:	b530      	push	{r4, r5, lr}
   3ebda:	4604      	mov	r4, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   3ebdc:	7800      	ldrb	r0, [r0, #0]
{
   3ebde:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   3ebe2:	fb02 1101 	mla	r1, r2, r1, r1
   3ebe6:	4a1f      	ldr	r2, [pc, #124]	; (3ec64 <lll_chan_sel_1+0x8c>)
   3ebe8:	4401      	add	r1, r0
   3ebea:	fb82 0201 	smull	r0, r2, r2, r1
   3ebee:	440a      	add	r2, r1
   3ebf0:	1152      	asrs	r2, r2, #5
   3ebf2:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   3ebf6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   3ebfa:	1a8a      	subs	r2, r1, r2
   3ebfc:	b2d0      	uxtb	r0, r2
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3ebfe:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   3ec00:	7020      	strb	r0, [r4, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3ec02:	5c59      	ldrb	r1, [r3, r1]
   3ec04:	f002 0207 	and.w	r2, r2, #7
   3ec08:	fa41 f202 	asr.w	r2, r1, r2
   3ec0c:	f012 0201 	ands.w	r2, r2, #1
   3ec10:	d11f      	bne.n	3ec52 <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   3ec12:	fbb0 f4f5 	udiv	r4, r0, r5
   3ec16:	fb05 0414 	mls	r4, r5, r4, r0
   3ec1a:	b2e4      	uxtb	r4, r4
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   3ec1c:	1e5d      	subs	r5, r3, #1
	chan_next = 0U;
   3ec1e:	4610      	mov	r0, r2
   3ec20:	3304      	adds	r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   3ec22:	f100 0e08 	add.w	lr, r0, #8
   3ec26:	f815 1f01 	ldrb.w	r1, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   3ec2a:	fa5f fe8e 	uxtb.w	lr, lr
		bite = *chan_map;
   3ec2e:	4602      	mov	r2, r0
			if (bite & 0x01) {
   3ec30:	f011 0f01 	tst.w	r1, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   3ec34:	f102 0c01 	add.w	ip, r2, #1
			bite >>= 1;
   3ec38:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   3ec3c:	d002      	beq.n	3ec44 <lll_chan_sel_1+0x6c>
				if (chan_index == 0U) {
   3ec3e:	b14c      	cbz	r4, 3ec54 <lll_chan_sel_1+0x7c>
				chan_index--;
   3ec40:	3c01      	subs	r4, #1
   3ec42:	b2e4      	uxtb	r4, r4
			chan_next++;
   3ec44:	fa5f f28c 	uxtb.w	r2, ip
		while (bit_count--) {
   3ec48:	4572      	cmp	r2, lr
   3ec4a:	d1f1      	bne.n	3ec30 <lll_chan_sel_1+0x58>
			chan_next++;
   3ec4c:	4610      	mov	r0, r2
	while (byte_count--) {
   3ec4e:	429d      	cmp	r5, r3
   3ec50:	d1e7      	bne.n	3ec22 <lll_chan_sel_1+0x4a>
}
   3ec52:	bd30      	pop	{r4, r5, pc}
		}

		if (bit_count < 8) {
   3ec54:	1dc1      	adds	r1, r0, #7
   3ec56:	1a89      	subs	r1, r1, r2
   3ec58:	b2c9      	uxtb	r1, r1
   3ec5a:	2907      	cmp	r1, #7
   3ec5c:	4610      	mov	r0, r2
   3ec5e:	d8f6      	bhi.n	3ec4e <lll_chan_sel_1+0x76>
}
   3ec60:	bd30      	pop	{r4, r5, pc}
   3ec62:	bf00      	nop
   3ec64:	dd67c8a7 	.word	0xdd67c8a7

0003ec68 <lll_chan_id>:
	return aa_ms ^ aa_ls;
   3ec68:	8842      	ldrh	r2, [r0, #2]
   3ec6a:	8800      	ldrh	r0, [r0, #0]
}
   3ec6c:	4050      	eors	r0, r2
   3ec6e:	4770      	bx	lr

0003ec70 <lll_chan_sel_2>:
{
   3ec70:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3ec72:	4d34      	ldr	r5, [pc, #208]	; (3ed44 <lll_chan_sel_2+0xd4>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   3ec74:	4c34      	ldr	r4, [pc, #208]	; (3ed48 <lll_chan_sel_2+0xd8>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   3ec76:	4048      	eors	r0, r1
   3ec78:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3ec7c:	0a06      	lsrs	r6, r0, #8
   3ec7e:	fa5f fe80 	uxtb.w	lr, r0
   3ec82:	eb0e 2e8e 	add.w	lr, lr, lr, lsl #10
   3ec86:	eb06 2086 	add.w	r0, r6, r6, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   3ec8a:	ea04 1740 	and.w	r7, r4, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3ec8e:	ea05 0640 	and.w	r6, r5, r0, lsl #1
   3ec92:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   3ec96:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3ec9a:	433e      	orrs	r6, r7
   3ec9c:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   3eca0:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   3eca4:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   3eca8:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   3ecac:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   3ecb0:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   3ecb2:	f3c0 4007 	ubfx	r0, r0, #16, #8
   3ecb6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   3ecba:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   3ecbe:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   3ecc2:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   3ecc4:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   3ecc8:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   3ecca:	d1d7      	bne.n	3ec7c <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   3eccc:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   3ecce:	481f      	ldr	r0, [pc, #124]	; (3ed4c <lll_chan_sel_2+0xdc>)
   3ecd0:	fba0 4001 	umull	r4, r0, r0, r1
   3ecd4:	1a0c      	subs	r4, r1, r0
   3ecd6:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   3ecda:	0940      	lsrs	r0, r0, #5
   3ecdc:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   3ece0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   3ece4:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3ece6:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   3ecea:	f000 0507 	and.w	r5, r0, #7
   3ecee:	5d14      	ldrb	r4, [r2, r4]
   3ecf0:	412c      	asrs	r4, r5
   3ecf2:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   3ecf4:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3ecf6:	d41c      	bmi.n	3ed32 <lll_chan_sel_2+0xc2>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   3ecf8:	fb01 f303 	mul.w	r3, r1, r3
   3ecfc:	1e56      	subs	r6, r2, #1
   3ecfe:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   3ed02:	3204      	adds	r2, #4
	chan_next = 0U;
   3ed04:	4660      	mov	r0, ip
		bite = *chan_map;
   3ed06:	f100 0508 	add.w	r5, r0, #8
   3ed0a:	f816 cf01 	ldrb.w	ip, [r6, #1]!
		while (bit_count--) {
   3ed0e:	b2ed      	uxtb	r5, r5
		bite = *chan_map;
   3ed10:	4601      	mov	r1, r0
			if (bite & 0x01) {
   3ed12:	f01c 0f01 	tst.w	ip, #1
			chan_next++;
   3ed16:	f101 0401 	add.w	r4, r1, #1
			bite >>= 1;
   3ed1a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
			if (bite & 0x01) {
   3ed1e:	d002      	beq.n	3ed26 <lll_chan_sel_2+0xb6>
				if (chan_index == 0U) {
   3ed20:	b143      	cbz	r3, 3ed34 <lll_chan_sel_2+0xc4>
				chan_index--;
   3ed22:	3b01      	subs	r3, #1
   3ed24:	b2db      	uxtb	r3, r3
			chan_next++;
   3ed26:	b2e1      	uxtb	r1, r4
		while (bit_count--) {
   3ed28:	42a9      	cmp	r1, r5
   3ed2a:	d1f2      	bne.n	3ed12 <lll_chan_sel_2+0xa2>
			chan_next++;
   3ed2c:	4608      	mov	r0, r1
	while (byte_count--) {
   3ed2e:	4296      	cmp	r6, r2
   3ed30:	d1e9      	bne.n	3ed06 <lll_chan_sel_2+0x96>
}
   3ed32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (bit_count < 8) {
   3ed34:	3007      	adds	r0, #7
   3ed36:	1a40      	subs	r0, r0, r1
   3ed38:	b2c0      	uxtb	r0, r0
   3ed3a:	2807      	cmp	r0, #7
   3ed3c:	4608      	mov	r0, r1
   3ed3e:	d8f6      	bhi.n	3ed2e <lll_chan_sel_2+0xbe>
}
   3ed40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3ed42:	bf00      	nop
   3ed44:	00022110 	.word	0x00022110
   3ed48:	00088440 	.word	0x00088440
   3ed4c:	bacf914d 	.word	0xbacf914d

0003ed50 <rl_update>:
		}
	}
}

static void rl_update(void)
{
   3ed50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3ed54:	4d18      	ldr	r5, [pc, #96]	; (3edb8 <rl_update+0x68>)
   3ed56:	4e19      	ldr	r6, [pc, #100]	; (3edbc <rl_update+0x6c>)
   3ed58:	2400      	movs	r4, #0
   3ed5a:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   3ed5e:	1eaf      	subs	r7, r5, #2
   3ed60:	f04f 0801 	mov.w	r8, #1
   3ed64:	e006      	b.n	3ed74 <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3ed66:	3401      	adds	r4, #1
   3ed68:	2c08      	cmp	r4, #8
   3ed6a:	f105 0506 	add.w	r5, r5, #6
   3ed6e:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3ed72:	d01f      	beq.n	3edb4 <rl_update+0x64>
		if (rl[i].taken) {
   3ed74:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   3ed78:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   3ed7c:	07da      	lsls	r2, r3, #31
   3ed7e:	d5f2      	bpl.n	3ed66 <rl_update+0x16>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3ed80:	787a      	ldrb	r2, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   3ed82:	f897 c000 	ldrb.w	ip, [r7]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   3ed86:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   3ed8a:	fa08 f104 	lsl.w	r1, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3ed8e:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   3ed90:	ea4c 0c01 	orr.w	ip, ip, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3ed94:	4313      	orrs	r3, r2
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3ed96:	4631      	mov	r1, r6
   3ed98:	4628      	mov	r0, r5
   3ed9a:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3ed9c:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   3ed9e:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3eda2:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3eda4:	f00c ffdf 	bl	4bd66 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3eda8:	2c08      	cmp	r4, #8
   3edaa:	f105 0506 	add.w	r5, r5, #6
   3edae:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3edb2:	d1df      	bne.n	3ed74 <rl_update+0x24>
}
   3edb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3edb8:	20005e72 	.word	0x20005e72
   3edbc:	20005f5d 	.word	0x20005f5d

0003edc0 <fal_update>:
{
   3edc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3edc4:	4e21      	ldr	r6, [pc, #132]	; (3ee4c <fal_update+0x8c>)
   3edc6:	4d22      	ldr	r5, [pc, #136]	; (3ee50 <fal_update+0x90>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   3edc8:	f8df 8088 	ldr.w	r8, [pc, #136]	; 3ee54 <fal_update+0x94>
   3edcc:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3ee58 <fal_update+0x98>
{
   3edd0:	2400      	movs	r4, #0
   3edd2:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   3edd6:	1eb7      	subs	r7, r6, #2
		if (!fal[i].taken) {
   3edd8:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   3eddc:	f04f 0c01 	mov.w	ip, #1
		if (!fal[i].taken) {
   3ede0:	f013 0f01 	tst.w	r3, #1
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3ede4:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   3ede6:	fa0c fc04 	lsl.w	ip, ip, r4
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3edea:	4629      	mov	r1, r5
	for (i = 0U; i < FAL_SIZE; i++) {
   3edec:	f106 0606 	add.w	r6, r6, #6
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3edf0:	f04f 0206 	mov.w	r2, #6
		if (!fal[i].taken) {
   3edf4:	d023      	beq.n	3ee3e <fal_update+0x7e>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   3edf6:	f898 e000 	ldrb.w	lr, [r8]
		j = fal[i].rl_idx;
   3edfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   3edfe:	f1be 0f00 	cmp.w	lr, #0
   3ee02:	d00a      	beq.n	3ee1a <fal_update+0x5a>
   3ee04:	2b07      	cmp	r3, #7
   3ee06:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   3ee0a:	d806      	bhi.n	3ee1a <fal_update+0x5a>
   3ee0c:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   3ee10:	f013 0f04 	tst.w	r3, #4
   3ee14:	d001      	beq.n	3ee1a <fal_update+0x5a>
   3ee16:	06db      	lsls	r3, r3, #27
   3ee18:	d511      	bpl.n	3ee3e <fal_update+0x7e>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   3ee1a:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   3ee1e:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   3ee22:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   3ee26:	ea4e 0e0c 	orr.w	lr, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3ee2a:	f897 c001 	ldrb.w	ip, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   3ee2e:	f887 e000 	strb.w	lr, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3ee32:	40a3      	lsls	r3, r4
   3ee34:	ea4c 0303 	orr.w	r3, ip, r3
   3ee38:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3ee3a:	f00c ff94 	bl	4bd66 <memcpy>
	for (i = 0U; i < FAL_SIZE; i++) {
   3ee3e:	3401      	adds	r4, #1
   3ee40:	2c08      	cmp	r4, #8
   3ee42:	f105 0508 	add.w	r5, r5, #8
   3ee46:	d1c7      	bne.n	3edd8 <fal_update+0x18>
}
   3ee48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3ee4c:	200060de 	.word	0x200060de
   3ee50:	2000609e 	.word	0x2000609e
   3ee54:	2000741b 	.word	0x2000741b
   3ee58:	20005f5c 	.word	0x20005f5c

0003ee5c <ll_fal_size_get>:
}
   3ee5c:	2008      	movs	r0, #8
   3ee5e:	4770      	bx	lr

0003ee60 <ll_fal_clear>:
{
   3ee60:	b538      	push	{r3, r4, r5, lr}
	if (ull_adv_filter_pol_get(0)) {
   3ee62:	2000      	movs	r0, #0
   3ee64:	f7f9 fffc 	bl	38e60 <ull_adv_filter_pol_get>
   3ee68:	b9f0      	cbnz	r0, 3eea8 <ll_fal_clear+0x48>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   3ee6a:	f7fa fa2b 	bl	392c4 <ull_scan_filter_pol_get>
   3ee6e:	f010 0001 	ands.w	r0, r0, #1
   3ee72:	d119      	bne.n	3eea8 <ll_fal_clear+0x48>
   3ee74:	4c0d      	ldr	r4, [pc, #52]	; (3eeac <ll_fal_clear+0x4c>)
			rl[j].fal = 0U;
   3ee76:	4d0e      	ldr	r5, [pc, #56]	; (3eeb0 <ll_fal_clear+0x50>)
   3ee78:	1e62      	subs	r2, r4, #1
		uint8_t j = fal[i].rl_idx;
   3ee7a:	f814 3030 	ldrb.w	r3, [r4, r0, lsl #3]
		if (j < ARRAY_SIZE(rl)) {
   3ee7e:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
   3ee80:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   3ee84:	d805      	bhi.n	3ee92 <ll_fal_clear+0x32>
			rl[j].fal = 0U;
   3ee86:	f815 3031 	ldrb.w	r3, [r5, r1, lsl #3]
   3ee8a:	f36f 1345 	bfc	r3, #5, #1
   3ee8e:	f805 3031 	strb.w	r3, [r5, r1, lsl #3]
		fal[i].taken = 0U;
   3ee92:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   3ee96:	f36f 0300 	bfc	r3, #0, #1
   3ee9a:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   3ee9e:	3001      	adds	r0, #1
   3eea0:	2808      	cmp	r0, #8
   3eea2:	d1ea      	bne.n	3ee7a <ll_fal_clear+0x1a>
	return 0;
   3eea4:	2000      	movs	r0, #0
}
   3eea6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3eea8:	200c      	movs	r0, #12
}
   3eeaa:	bd38      	pop	{r3, r4, r5, pc}
   3eeac:	2000609d 	.word	0x2000609d
   3eeb0:	20005f5c 	.word	0x20005f5c

0003eeb4 <ll_fal_add>:
{
   3eeb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3eeb8:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   3eeba:	2000      	movs	r0, #0
   3eebc:	f7f9 ffd0 	bl	38e60 <ull_adv_filter_pol_get>
   3eec0:	2800      	cmp	r0, #0
   3eec2:	d16b      	bne.n	3ef9c <ll_fal_add+0xe8>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   3eec4:	f7fa f9fe 	bl	392c4 <ull_scan_filter_pol_get>
   3eec8:	f010 0501 	ands.w	r5, r0, #1
   3eecc:	d166      	bne.n	3ef9c <ll_fal_add+0xe8>
	if (addr->type == ADDR_TYPE_ANON) {
   3eece:	f897 b000 	ldrb.w	fp, [r7]
   3eed2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   3eed6:	d064      	beq.n	3efa2 <ll_fal_add+0xee>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   3eed8:	4e3b      	ldr	r6, [pc, #236]	; (3efc8 <ll_fal_add+0x114>)
   3eeda:	f107 0901 	add.w	r9, r7, #1
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3eede:	f00b 0b01 	and.w	fp, fp, #1
		*free_idx = FILTER_IDX_NONE;
   3eee2:	f04f 0aff 	mov.w	sl, #255	; 0xff
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   3eee6:	462c      	mov	r4, r5
   3eee8:	f1a6 0802 	sub.w	r8, r6, #2
   3eeec:	e009      	b.n	3ef02 <ll_fal_add+0x4e>
		} else if (free_idx && !fal[i].taken &&
   3eeee:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   3eef2:	d101      	bne.n	3eef8 <ll_fal_add+0x44>
			*free_idx = i;
   3eef4:	fa5f fa84 	uxtb.w	sl, r4
	for (i = 0; i < FAL_SIZE; i++) {
   3eef8:	3401      	adds	r4, #1
   3eefa:	2c08      	cmp	r4, #8
   3eefc:	f106 0608 	add.w	r6, r6, #8
   3ef00:	d016      	beq.n	3ef30 <ll_fal_add+0x7c>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3ef02:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   3ef06:	07d9      	lsls	r1, r3, #31
   3ef08:	f3c3 0240 	ubfx	r2, r3, #1, #1
   3ef0c:	d5ef      	bpl.n	3eeee <ll_fal_add+0x3a>
   3ef0e:	455a      	cmp	r2, fp
   3ef10:	d1f2      	bne.n	3eef8 <ll_fal_add+0x44>
   3ef12:	2206      	movs	r2, #6
   3ef14:	4630      	mov	r0, r6
   3ef16:	4649      	mov	r1, r9
   3ef18:	f00c ff15 	bl	4bd46 <memcmp>
   3ef1c:	b3d8      	cbz	r0, 3ef96 <ll_fal_add+0xe2>
		} else if (free_idx && !fal[i].taken &&
   3ef1e:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   3ef22:	07da      	lsls	r2, r3, #31
   3ef24:	d5e3      	bpl.n	3eeee <ll_fal_add+0x3a>
	for (i = 0; i < FAL_SIZE; i++) {
   3ef26:	3401      	adds	r4, #1
   3ef28:	2c08      	cmp	r4, #8
   3ef2a:	f106 0608 	add.w	r6, r6, #8
   3ef2e:	d1e8      	bne.n	3ef02 <ll_fal_add+0x4e>
	} else if (j >= ARRAY_SIZE(fal)) {
   3ef30:	f1ba 0f07 	cmp.w	sl, #7
   3ef34:	d838      	bhi.n	3efa8 <ll_fal_add+0xf4>
	fal[i].id_addr_type = id_addr->type & 0x1;
   3ef36:	783a      	ldrb	r2, [r7, #0]
   3ef38:	f818 303a 	ldrb.w	r3, [r8, sl, lsl #3]
   3ef3c:	f362 0341 	bfi	r3, r2, #1, #1
   3ef40:	f808 303a 	strb.w	r3, [r8, sl, lsl #3]
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   3ef44:	2302      	movs	r3, #2
   3ef46:	fb14 340a 	smlabb	r4, r4, sl, r3
	memcpy(dst, src, sizeof(*dst));
   3ef4a:	eb08 0004 	add.w	r0, r8, r4
   3ef4e:	2206      	movs	r2, #6
   3ef50:	4649      	mov	r1, r9
   3ef52:	f00c ff08 	bl	4bd66 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3ef56:	4c1d      	ldr	r4, [pc, #116]	; (3efcc <ll_fal_add+0x118>)
   3ef58:	f897 b000 	ldrb.w	fp, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3ef5c:	1e66      	subs	r6, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3ef5e:	f00b 0b01 	and.w	fp, fp, #1
   3ef62:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   3ef66:	00df      	lsls	r7, r3, #3
   3ef68:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   3ef6c:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3ef70:	07db      	lsls	r3, r3, #31
   3ef72:	d501      	bpl.n	3ef78 <ll_fal_add+0xc4>
   3ef74:	455a      	cmp	r2, fp
   3ef76:	d01a      	beq.n	3efae <ll_fal_add+0xfa>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3ef78:	3501      	adds	r5, #1
   3ef7a:	2d08      	cmp	r5, #8
   3ef7c:	f104 0428 	add.w	r4, r4, #40	; 0x28
   3ef80:	d1ef      	bne.n	3ef62 <ll_fal_add+0xae>
		fal[i].rl_idx = FILTER_IDX_NONE;
   3ef82:	25ff      	movs	r5, #255	; 0xff
	fal[i].taken = 1U;
   3ef84:	f818 303a 	ldrb.w	r3, [r8, sl, lsl #3]
   3ef88:	eb08 02ca 	add.w	r2, r8, sl, lsl #3
   3ef8c:	f043 0301 	orr.w	r3, r3, #1
   3ef90:	f808 303a 	strb.w	r3, [r8, sl, lsl #3]
   3ef94:	7055      	strb	r5, [r2, #1]
		fal[i].rl_idx = FILTER_IDX_NONE;
   3ef96:	2000      	movs	r0, #0
}
   3ef98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3ef9c:	200c      	movs	r0, #12
}
   3ef9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
   3efa2:	4628      	mov	r0, r5
}
   3efa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3efa8:	2007      	movs	r0, #7
   3efaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3efae:	4620      	mov	r0, r4
   3efb0:	2206      	movs	r2, #6
   3efb2:	4649      	mov	r1, r9
   3efb4:	f00c fec7 	bl	4bd46 <memcmp>
   3efb8:	2800      	cmp	r0, #0
   3efba:	d1dd      	bne.n	3ef78 <ll_fal_add+0xc4>
		rl[j].fal = 1U;
   3efbc:	5df3      	ldrb	r3, [r6, r7]
   3efbe:	f043 0320 	orr.w	r3, r3, #32
   3efc2:	55f3      	strb	r3, [r6, r7]
   3efc4:	b2ed      	uxtb	r5, r5
   3efc6:	e7dd      	b.n	3ef84 <ll_fal_add+0xd0>
   3efc8:	2000609e 	.word	0x2000609e
   3efcc:	20005f5d 	.word	0x20005f5d

0003efd0 <ll_fal_remove>:
{
   3efd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3efd4:	4606      	mov	r6, r0
	if (ull_adv_filter_pol_get(0)) {
   3efd6:	2000      	movs	r0, #0
   3efd8:	f7f9 ff42 	bl	38e60 <ull_adv_filter_pol_get>
   3efdc:	b9f0      	cbnz	r0, 3f01c <ll_fal_remove+0x4c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   3efde:	f7fa f971 	bl	392c4 <ull_scan_filter_pol_get>
   3efe2:	f010 0401 	ands.w	r4, r0, #1
   3efe6:	d119      	bne.n	3f01c <ll_fal_remove+0x4c>
	if (addr->type == ADDR_TYPE_ANON) {
   3efe8:	f896 8000 	ldrb.w	r8, [r6]
   3efec:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   3eff0:	d035      	beq.n	3f05e <ll_fal_remove+0x8e>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
   3eff2:	4d1c      	ldr	r5, [pc, #112]	; (3f064 <ll_fal_remove+0x94>)
   3eff4:	3601      	adds	r6, #1
	for (i = 0; i < FAL_SIZE; i++) {
   3eff6:	1eaf      	subs	r7, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3eff8:	f008 0801 	and.w	r8, r8, #1
   3effc:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   3f000:	f3c3 0240 	ubfx	r2, r3, #1, #1
   3f004:	07db      	lsls	r3, r3, #31
   3f006:	d501      	bpl.n	3f00c <ll_fal_remove+0x3c>
   3f008:	4542      	cmp	r2, r8
   3f00a:	d00a      	beq.n	3f022 <ll_fal_remove+0x52>
	for (i = 0; i < FAL_SIZE; i++) {
   3f00c:	3401      	adds	r4, #1
   3f00e:	2c08      	cmp	r4, #8
   3f010:	f105 0508 	add.w	r5, r5, #8
   3f014:	d1f2      	bne.n	3effc <ll_fal_remove+0x2c>
   3f016:	2002      	movs	r0, #2
}
   3f018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f01c:	200c      	movs	r0, #12
}
   3f01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3f022:	2206      	movs	r2, #6
   3f024:	4628      	mov	r0, r5
   3f026:	4631      	mov	r1, r6
   3f028:	f00c fe8d 	bl	4bd46 <memcmp>
   3f02c:	2800      	cmp	r0, #0
   3f02e:	d1ed      	bne.n	3f00c <ll_fal_remove+0x3c>
		uint8_t j = fal[i].rl_idx;
   3f030:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   3f034:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   3f036:	2b07      	cmp	r3, #7
   3f038:	d808      	bhi.n	3f04c <ll_fal_remove+0x7c>
			rl[j].fal = 0U;
   3f03a:	4a0b      	ldr	r2, [pc, #44]	; (3f068 <ll_fal_remove+0x98>)
   3f03c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   3f040:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   3f044:	f360 1145 	bfi	r1, r0, #5, #1
   3f048:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		fal[i].taken = 0U;
   3f04c:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   3f050:	f36f 0300 	bfc	r3, #0, #1
   3f054:	f807 3034 	strb.w	r3, [r7, r4, lsl #3]
		return 0;
   3f058:	2000      	movs	r0, #0
}
   3f05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   3f05e:	4620      	mov	r0, r4
}
   3f060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3f064:	2000609e 	.word	0x2000609e
   3f068:	20005f5c 	.word	0x20005f5c

0003f06c <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   3f06c:	2807      	cmp	r0, #7
{
   3f06e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f072:	4604      	mov	r4, r0
   3f074:	460e      	mov	r6, r1
   3f076:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   3f078:	d817      	bhi.n	3f0aa <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   3f07a:	4d1a      	ldr	r5, [pc, #104]	; (3f0e4 <ll_rl_id_addr_get+0x78>)
   3f07c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   3f080:	00a7      	lsls	r7, r4, #2
   3f082:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   3f086:	07db      	lsls	r3, r3, #31
   3f088:	d51d      	bpl.n	3f0c6 <ll_rl_id_addr_get+0x5a>
	*id_addr_type = rl[rl_idx].id_addr_type;
   3f08a:	4427      	add	r7, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   3f08c:	4640      	mov	r0, r8
	*id_addr_type = rl[rl_idx].id_addr_type;
   3f08e:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   3f092:	f3c3 1380 	ubfx	r3, r3, #6, #1
   3f096:	7033      	strb	r3, [r6, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   3f098:	2328      	movs	r3, #40	; 0x28
   3f09a:	fb03 5104 	mla	r1, r3, r4, r5
   3f09e:	2206      	movs	r2, #6
}
   3f0a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   3f0a4:	3101      	adds	r1, #1
   3f0a6:	f00c be5e 	b.w	4bd66 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   3f0aa:	4a0f      	ldr	r2, [pc, #60]	; (3f0e8 <ll_rl_id_addr_get+0x7c>)
   3f0ac:	490f      	ldr	r1, [pc, #60]	; (3f0ec <ll_rl_id_addr_get+0x80>)
   3f0ae:	4810      	ldr	r0, [pc, #64]	; (3f0f0 <ll_rl_id_addr_get+0x84>)
   3f0b0:	f44f 7389 	mov.w	r3, #274	; 0x112
   3f0b4:	f00a fd28 	bl	49b08 <printk>
   3f0b8:	4040      	eors	r0, r0
   3f0ba:	f380 8811 	msr	BASEPRI, r0
   3f0be:	f04f 0003 	mov.w	r0, #3
   3f0c2:	df02      	svc	2
   3f0c4:	e7d9      	b.n	3f07a <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   3f0c6:	4a08      	ldr	r2, [pc, #32]	; (3f0e8 <ll_rl_id_addr_get+0x7c>)
   3f0c8:	490a      	ldr	r1, [pc, #40]	; (3f0f4 <ll_rl_id_addr_get+0x88>)
   3f0ca:	4809      	ldr	r0, [pc, #36]	; (3f0f0 <ll_rl_id_addr_get+0x84>)
   3f0cc:	f240 1313 	movw	r3, #275	; 0x113
   3f0d0:	f00a fd1a 	bl	49b08 <printk>
   3f0d4:	4040      	eors	r0, r0
   3f0d6:	f380 8811 	msr	BASEPRI, r0
   3f0da:	f04f 0003 	mov.w	r0, #3
   3f0de:	df02      	svc	2
   3f0e0:	e7d3      	b.n	3f08a <ll_rl_id_addr_get+0x1e>
   3f0e2:	bf00      	nop
   3f0e4:	20005f5c 	.word	0x20005f5c
   3f0e8:	00053408 	.word	0x00053408
   3f0ec:	0005344c 	.word	0x0005344c
   3f0f0:	00052bbc 	.word	0x00052bbc
   3f0f4:	00053458 	.word	0x00053458

0003f0f8 <ll_rl_size_get>:
uint8_t ll_rl_size_get(void)
   3f0f8:	2008      	movs	r0, #8
   3f0fa:	4770      	bx	lr

0003f0fc <ll_rl_clear>:
{
   3f0fc:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f0fe:	2000      	movs	r0, #0
   3f100:	f7f9 fea2 	bl	38e48 <ull_adv_is_enabled>
		? 0 : 1;
   3f104:	b108      	cbz	r0, 3f10a <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f106:	200c      	movs	r0, #12
}
   3f108:	bd10      	pop	{r4, pc}
   3f10a:	4604      	mov	r4, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   3f10c:	f7fa f8c0 	bl	39290 <ull_scan_is_enabled>
		? 0 : 1;
   3f110:	2801      	cmp	r0, #1
   3f112:	d8f8      	bhi.n	3f106 <ll_rl_clear+0xa>
		rl[i].taken = 0U;
   3f114:	4b19      	ldr	r3, [pc, #100]	; (3f17c <ll_rl_clear+0x80>)
	peer_irk_count = 0U;
   3f116:	481a      	ldr	r0, [pc, #104]	; (3f180 <ll_rl_clear+0x84>)
		rl[i].taken = 0U;
   3f118:	7819      	ldrb	r1, [r3, #0]
   3f11a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   3f11e:	7004      	strb	r4, [r0, #0]
		rl[i].taken = 0U;
   3f120:	f364 0100 	bfi	r1, r4, #0, #1
   3f124:	f364 0200 	bfi	r2, r4, #0, #1
   3f128:	7019      	strb	r1, [r3, #0]
   3f12a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   3f12e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   3f132:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   3f136:	f364 0100 	bfi	r1, r4, #0, #1
   3f13a:	f364 0200 	bfi	r2, r4, #0, #1
   3f13e:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   3f142:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   3f146:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   3f14a:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   3f14e:	f364 0100 	bfi	r1, r4, #0, #1
   3f152:	f364 0200 	bfi	r2, r4, #0, #1
   3f156:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   3f15a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   3f15e:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   3f162:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   3f166:	f364 0100 	bfi	r1, r4, #0, #1
   3f16a:	f364 0200 	bfi	r2, r4, #0, #1
   3f16e:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   3f172:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	return 0;
   3f176:	4620      	mov	r0, r4
}
   3f178:	bd10      	pop	{r4, pc}
   3f17a:	bf00      	nop
   3f17c:	20005f5c 	.word	0x20005f5c
   3f180:	2000741a 	.word	0x2000741a

0003f184 <ll_rl_remove>:
{
   3f184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f188:	b083      	sub	sp, #12
   3f18a:	4603      	mov	r3, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f18c:	2000      	movs	r0, #0
{
   3f18e:	9300      	str	r3, [sp, #0]
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f190:	f7f9 fe5a 	bl	38e48 <ull_adv_is_enabled>
		? 0 : 1;
   3f194:	b118      	cbz	r0, 3f19e <ll_rl_remove+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f196:	200c      	movs	r0, #12
}
   3f198:	b003      	add	sp, #12
   3f19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f19e:	4604      	mov	r4, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   3f1a0:	f7fa f876 	bl	39290 <ull_scan_is_enabled>
		? 0 : 1;
   3f1a4:	2801      	cmp	r0, #1
   3f1a6:	d8f6      	bhi.n	3f196 <ll_rl_remove+0x12>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3f1a8:	9b00      	ldr	r3, [sp, #0]
   3f1aa:	f8df 8138 	ldr.w	r8, [pc, #312]	; 3f2e4 <ll_rl_remove+0x160>
   3f1ae:	f813 bb01 	ldrb.w	fp, [r3], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f1b2:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f1b6:	f00b 0b01 	and.w	fp, fp, #1
   3f1ba:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   3f1be:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   3f1c2:	f816 2035 	ldrb.w	r2, [r6, r5, lsl #3]
   3f1c6:	07d0      	lsls	r0, r2, #31
   3f1c8:	ea4f 0984 	mov.w	r9, r4, lsl #2
   3f1cc:	f3c2 1180 	ubfx	r1, r2, #6, #1
   3f1d0:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   3f1d4:	d501      	bpl.n	3f1da <ll_rl_remove+0x56>
   3f1d6:	4559      	cmp	r1, fp
   3f1d8:	d008      	beq.n	3f1ec <ll_rl_remove+0x68>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f1da:	3401      	adds	r4, #1
   3f1dc:	2c08      	cmp	r4, #8
   3f1de:	f108 0828 	add.w	r8, r8, #40	; 0x28
   3f1e2:	d1ea      	bne.n	3f1ba <ll_rl_remove+0x36>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3f1e4:	2002      	movs	r0, #2
}
   3f1e6:	b003      	add	sp, #12
   3f1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f1ec:	4619      	mov	r1, r3
   3f1ee:	4640      	mov	r0, r8
   3f1f0:	2206      	movs	r2, #6
   3f1f2:	9301      	str	r3, [sp, #4]
   3f1f4:	f00c fda7 	bl	4bd46 <memcmp>
   3f1f8:	9b01      	ldr	r3, [sp, #4]
   3f1fa:	4607      	mov	r7, r0
   3f1fc:	2800      	cmp	r0, #0
   3f1fe:	d1ec      	bne.n	3f1da <ll_rl_remove+0x56>
		if (rl[i].pirk) {
   3f200:	f816 200a 	ldrb.w	r2, [r6, sl]
   3f204:	0752      	lsls	r2, r2, #29
   3f206:	d42e      	bmi.n	3f266 <ll_rl_remove+0xe2>
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
   3f208:	9a00      	ldr	r2, [sp, #0]
   3f20a:	4d37      	ldr	r5, [pc, #220]	; (3f2e8 <ll_rl_remove+0x164>)
   3f20c:	f892 a000 	ldrb.w	sl, [r2]
	for (i = 0; i < FAL_SIZE; i++) {
   3f210:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3f214:	f00a 0a01 	and.w	sl, sl, #1
   3f218:	f818 2037 	ldrb.w	r2, [r8, r7, lsl #3]
   3f21c:	f3c2 0140 	ubfx	r1, r2, #1, #1
   3f220:	07d2      	lsls	r2, r2, #31
   3f222:	d501      	bpl.n	3f228 <ll_rl_remove+0xa4>
   3f224:	4551      	cmp	r1, sl
   3f226:	d00f      	beq.n	3f248 <ll_rl_remove+0xc4>
	for (i = 0; i < FAL_SIZE; i++) {
   3f228:	3701      	adds	r7, #1
   3f22a:	2f08      	cmp	r7, #8
   3f22c:	f105 0508 	add.w	r5, r5, #8
   3f230:	d1f2      	bne.n	3f218 <ll_rl_remove+0x94>
		rl[i].taken = 0U;
   3f232:	44a1      	add	r9, r4
		return 0;
   3f234:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   3f236:	f816 3039 	ldrb.w	r3, [r6, r9, lsl #3]
   3f23a:	f36f 0300 	bfc	r3, #0, #1
   3f23e:	f806 3039 	strb.w	r3, [r6, r9, lsl #3]
}
   3f242:	b003      	add	sp, #12
   3f244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3f248:	4619      	mov	r1, r3
   3f24a:	2206      	movs	r2, #6
   3f24c:	4628      	mov	r0, r5
   3f24e:	9300      	str	r3, [sp, #0]
   3f250:	f00c fd79 	bl	4bd46 <memcmp>
   3f254:	9b00      	ldr	r3, [sp, #0]
   3f256:	2800      	cmp	r0, #0
   3f258:	d1e6      	bne.n	3f228 <ll_rl_remove+0xa4>
			fal[j].rl_idx = FILTER_IDX_NONE;
   3f25a:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
   3f25e:	23ff      	movs	r3, #255	; 0xff
   3f260:	f888 3001 	strb.w	r3, [r8, #1]
   3f264:	e7e5      	b.n	3f232 <ll_rl_remove+0xae>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   3f266:	f8df a084 	ldr.w	sl, [pc, #132]	; 3f2ec <ll_rl_remove+0x168>
   3f26a:	f89a 8000 	ldrb.w	r8, [sl]
   3f26e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   3f272:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
   3f276:	d002      	beq.n	3f27e <ll_rl_remove+0xfa>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   3f278:	7ded      	ldrb	r5, [r5, #23]
			if (pj && pi != pj) {
   3f27a:	4545      	cmp	r5, r8
   3f27c:	d102      	bne.n	3f284 <ll_rl_remove+0x100>
			peer_irk_count--;
   3f27e:	f88a 8000 	strb.w	r8, [sl]
   3f282:	e7c1      	b.n	3f208 <ll_rl_remove+0x84>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   3f284:	481a      	ldr	r0, [pc, #104]	; (3f2f0 <ll_rl_remove+0x16c>)
   3f286:	2210      	movs	r2, #16
   3f288:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   3f28c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
   3f290:	f00c fd69 	bl	4bd66 <memcpy>
				     k < CONFIG_BT_CTLR_RL_SIZE;
   3f294:	4817      	ldr	r0, [pc, #92]	; (3f2f4 <ll_rl_remove+0x170>)
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   3f296:	9b01      	ldr	r3, [sp, #4]
   3f298:	463a      	mov	r2, r7
					if (rl[k].taken && rl[k].pirk &&
   3f29a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   3f29e:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
   3f2a2:	f816 1031 	ldrb.w	r1, [r6, r1, lsl #3]
   3f2a6:	f011 0f01 	tst.w	r1, #1
   3f2aa:	d004      	beq.n	3f2b6 <ll_rl_remove+0x132>
   3f2ac:	0749      	lsls	r1, r1, #29
   3f2ae:	d502      	bpl.n	3f2b6 <ll_rl_remove+0x132>
   3f2b0:	7dc1      	ldrb	r1, [r0, #23]
   3f2b2:	4541      	cmp	r1, r8
   3f2b4:	d00b      	beq.n	3f2ce <ll_rl_remove+0x14a>
				     k < CONFIG_BT_CTLR_RL_SIZE;
   3f2b6:	3201      	adds	r2, #1
   3f2b8:	2a08      	cmp	r2, #8
   3f2ba:	f100 0028 	add.w	r0, r0, #40	; 0x28
   3f2be:	d1ec      	bne.n	3f29a <ll_rl_remove+0x116>
			peer_irk_count--;
   3f2c0:	f89a 8000 	ldrb.w	r8, [sl]
   3f2c4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   3f2c8:	fa5f f888 	uxtb.w	r8, r8
   3f2cc:	e7d7      	b.n	3f27e <ll_rl_remove+0xfa>
   3f2ce:	f89a 8000 	ldrb.w	r8, [sl]
						peer_irk_rl_ids[pi] = k;
   3f2d2:	4909      	ldr	r1, [pc, #36]	; (3f2f8 <ll_rl_remove+0x174>)
						rl[k].pirk_idx = pi;
   3f2d4:	f88c 5017 	strb.w	r5, [ip, #23]
			peer_irk_count--;
   3f2d8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
						peer_irk_rl_ids[pi] = k;
   3f2dc:	554a      	strb	r2, [r1, r5]
			peer_irk_count--;
   3f2de:	fa5f f888 	uxtb.w	r8, r8
						break;
   3f2e2:	e7cc      	b.n	3f27e <ll_rl_remove+0xfa>
   3f2e4:	20005f5d 	.word	0x20005f5d
   3f2e8:	2000609e 	.word	0x2000609e
   3f2ec:	2000741a 	.word	0x2000741a
   3f2f0:	20005edc 	.word	0x20005edc
   3f2f4:	20005f5c 	.word	0x20005f5c
   3f2f8:	20005ed4 	.word	0x20005ed4

0003f2fc <ll_rl_crpa_set>:
{
   3f2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3f300:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   3f302:	795b      	ldrb	r3, [r3, #5]
   3f304:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3f308:	2b40      	cmp	r3, #64	; 0x40
   3f30a:	d001      	beq.n	3f310 <ll_rl_crpa_set+0x14>
}
   3f30c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (id_addr) {
   3f310:	460f      	mov	r7, r1
   3f312:	b1f1      	cbz	r1, 3f352 <ll_rl_crpa_set+0x56>
   3f314:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3f3b4 <ll_rl_crpa_set+0xb8>
   3f318:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f31a:	f000 0601 	and.w	r6, r0, #1
   3f31e:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   3f322:	e004      	b.n	3f32e <ll_rl_crpa_set+0x32>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f324:	3401      	adds	r4, #1
   3f326:	2c08      	cmp	r4, #8
   3f328:	f109 0928 	add.w	r9, r9, #40	; 0x28
   3f32c:	d0ee      	beq.n	3f30c <ll_rl_crpa_set+0x10>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f32e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   3f332:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   3f336:	f3c2 1380 	ubfx	r3, r2, #6, #1
   3f33a:	07d2      	lsls	r2, r2, #31
   3f33c:	d5f2      	bpl.n	3f324 <ll_rl_crpa_set+0x28>
   3f33e:	42b3      	cmp	r3, r6
   3f340:	d1f0      	bne.n	3f324 <ll_rl_crpa_set+0x28>
   3f342:	2206      	movs	r2, #6
   3f344:	4648      	mov	r0, r9
   3f346:	4639      	mov	r1, r7
   3f348:	f00c fcfd 	bl	4bd46 <memcmp>
   3f34c:	2800      	cmp	r0, #0
   3f34e:	d1e9      	bne.n	3f324 <ll_rl_crpa_set+0x28>
   3f350:	b2e2      	uxtb	r2, r4
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   3f352:	2a07      	cmp	r2, #7
   3f354:	d8da      	bhi.n	3f30c <ll_rl_crpa_set+0x10>
   3f356:	f8df 8060 	ldr.w	r8, [pc, #96]	; 3f3b8 <ll_rl_crpa_set+0xbc>
   3f35a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   3f35e:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   3f362:	07db      	lsls	r3, r3, #31
   3f364:	d5d2      	bpl.n	3f30c <ll_rl_crpa_set+0x10>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   3f366:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   3f36a:	00d4      	lsls	r4, r2, #3
   3f36c:	f104 0718 	add.w	r7, r4, #24
   3f370:	4447      	add	r7, r8
   3f372:	4629      	mov	r1, r5
   3f374:	2206      	movs	r2, #6
   3f376:	4638      	mov	r0, r7
   3f378:	f00c fcf5 	bl	4bd66 <memcpy>
   3f37c:	2500      	movs	r5, #0
   3f37e:	e001      	b.n	3f384 <ll_rl_crpa_set+0x88>
	defined(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)
static void conn_rpa_update(uint8_t rl_idx)
{
	uint16_t handle;

	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3f380:	2d06      	cmp	r5, #6
   3f382:	d0c3      	beq.n	3f30c <ll_rl_crpa_set+0x10>
		struct ll_conn *conn = ll_connected_get(handle);
   3f384:	b2a8      	uxth	r0, r5
   3f386:	f7fa fe81 	bl	3a08c <ll_connected_get>

		/* The RPA of the connection matches the RPA that was just
		 * resolved
		 */
		if (conn && !memcmp(conn->peer_id_addr, rl[rl_idx].curr_rpa.val,
   3f38a:	4603      	mov	r3, r0
   3f38c:	f100 06dd 	add.w	r6, r0, #221	; 0xdd
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3f390:	3501      	adds	r5, #1
		if (conn && !memcmp(conn->peer_id_addr, rl[rl_idx].curr_rpa.val,
   3f392:	2206      	movs	r2, #6
   3f394:	4639      	mov	r1, r7
   3f396:	4630      	mov	r0, r6
   3f398:	2b00      	cmp	r3, #0
   3f39a:	d0f1      	beq.n	3f380 <ll_rl_crpa_set+0x84>
   3f39c:	f00c fcd3 	bl	4bd46 <memcmp>
   3f3a0:	2800      	cmp	r0, #0
   3f3a2:	d1ed      	bne.n	3f380 <ll_rl_crpa_set+0x84>
				    BDADDR_SIZE)) {
			(void)memcpy(conn->peer_id_addr, rl[rl_idx].id_addr.val,
   3f3a4:	1c61      	adds	r1, r4, #1
   3f3a6:	4441      	add	r1, r8
   3f3a8:	4630      	mov	r0, r6
   3f3aa:	2206      	movs	r2, #6
}
   3f3ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			(void)memcpy(conn->peer_id_addr, rl[rl_idx].id_addr.val,
   3f3b0:	f00c bcd9 	b.w	4bd66 <memcpy>
   3f3b4:	20005f5d 	.word	0x20005f5d
   3f3b8:	20005f5c 	.word	0x20005f5c

0003f3bc <ll_rl_crpa_get>:
{
   3f3bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3f3c0:	4682      	mov	sl, r0
   3f3c2:	4e1a      	ldr	r6, [pc, #104]	; (3f42c <ll_rl_crpa_get+0x70>)
   3f3c4:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   3f3c8:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3f3ca:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f3cc:	f008 0801 	and.w	r8, r8, #1
   3f3d0:	1e77      	subs	r7, r6, #1
   3f3d2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3f3d6:	00d5      	lsls	r5, r2, #3
   3f3d8:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   3f3dc:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3f3e0:	07db      	lsls	r3, r3, #31
   3f3e2:	f104 0401 	add.w	r4, r4, #1
   3f3e6:	d501      	bpl.n	3f3ec <ll_rl_crpa_get+0x30>
   3f3e8:	4542      	cmp	r2, r8
   3f3ea:	d006      	beq.n	3f3fa <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f3ec:	2c08      	cmp	r4, #8
   3f3ee:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3f3f2:	d1ee      	bne.n	3f3d2 <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3f3f4:	2002      	movs	r0, #2
}
   3f3f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f3fa:	4630      	mov	r0, r6
   3f3fc:	2206      	movs	r2, #6
   3f3fe:	4651      	mov	r1, sl
   3f400:	f00c fca1 	bl	4bd46 <memcmp>
   3f404:	4683      	mov	fp, r0
   3f406:	2800      	cmp	r0, #0
   3f408:	d1f0      	bne.n	3f3ec <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   3f40a:	f105 0218 	add.w	r2, r5, #24
   3f40e:	4417      	add	r7, r2
   3f410:	2106      	movs	r1, #6
   3f412:	4638      	mov	r0, r7
   3f414:	f7f4 fdb6 	bl	33f84 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   3f418:	2800      	cmp	r0, #0
   3f41a:	d0eb      	beq.n	3f3f4 <ll_rl_crpa_get+0x38>
   3f41c:	2206      	movs	r2, #6
   3f41e:	4639      	mov	r1, r7
   3f420:	4648      	mov	r0, r9
   3f422:	f00c fca0 	bl	4bd66 <memcpy>
		return 0;
   3f426:	4658      	mov	r0, fp
}
   3f428:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f42c:	20005f5d 	.word	0x20005f5d

0003f430 <ll_rl_lrpa_get>:
{
   3f430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3f434:	4682      	mov	sl, r0
   3f436:	4e16      	ldr	r6, [pc, #88]	; (3f490 <ll_rl_lrpa_get+0x60>)
   3f438:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   3f43c:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3f43e:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f440:	f008 0801 	and.w	r8, r8, #1
   3f444:	1e77      	subs	r7, r6, #1
   3f446:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3f44a:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   3f44e:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   3f452:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3f456:	07db      	lsls	r3, r3, #31
   3f458:	f104 0401 	add.w	r4, r4, #1
   3f45c:	d501      	bpl.n	3f462 <ll_rl_lrpa_get+0x32>
   3f45e:	4542      	cmp	r2, r8
   3f460:	d006      	beq.n	3f470 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f462:	2c08      	cmp	r4, #8
   3f464:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3f468:	d1ed      	bne.n	3f446 <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3f46a:	2002      	movs	r0, #2
}
   3f46c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f470:	4630      	mov	r0, r6
   3f472:	2206      	movs	r2, #6
   3f474:	4651      	mov	r1, sl
   3f476:	f00c fc66 	bl	4bd46 <memcmp>
   3f47a:	4683      	mov	fp, r0
   3f47c:	2800      	cmp	r0, #0
   3f47e:	d1f0      	bne.n	3f462 <ll_rl_lrpa_get+0x32>
   3f480:	6a69      	ldr	r1, [r5, #36]	; 0x24
   3f482:	2206      	movs	r2, #6
   3f484:	4648      	mov	r0, r9
   3f486:	f00c fc6e 	bl	4bd66 <memcpy>
		return 0;
   3f48a:	4658      	mov	r0, fp
}
   3f48c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f490:	20005f5d 	.word	0x20005f5d

0003f494 <ll_rl_enable>:
{
   3f494:	b510      	push	{r4, lr}
   3f496:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f498:	2000      	movs	r0, #0
   3f49a:	f7f9 fcd5 	bl	38e48 <ull_adv_is_enabled>
		? 0 : 1;
   3f49e:	b108      	cbz	r0, 3f4a4 <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f4a0:	200c      	movs	r0, #12
}
   3f4a2:	bd10      	pop	{r4, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   3f4a4:	f7f9 fef4 	bl	39290 <ull_scan_is_enabled>
		? 0 : 1;
   3f4a8:	2801      	cmp	r0, #1
   3f4aa:	d8f9      	bhi.n	3f4a0 <ll_rl_enable+0xc>
	switch (enable) {
   3f4ac:	b10c      	cbz	r4, 3f4b2 <ll_rl_enable+0x1e>
   3f4ae:	2c01      	cmp	r4, #1
   3f4b0:	d103      	bne.n	3f4ba <ll_rl_enable+0x26>
		rl_enable = 0U;
   3f4b2:	4b03      	ldr	r3, [pc, #12]	; (3f4c0 <ll_rl_enable+0x2c>)
   3f4b4:	701c      	strb	r4, [r3, #0]
	return 0;
   3f4b6:	2000      	movs	r0, #0
}
   3f4b8:	bd10      	pop	{r4, pc}
	switch (enable) {
   3f4ba:	2012      	movs	r0, #18
}
   3f4bc:	bd10      	pop	{r4, pc}
   3f4be:	bf00      	nop
   3f4c0:	2000741b 	.word	0x2000741b

0003f4c4 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   3f4c4:	4b03      	ldr	r3, [pc, #12]	; (3f4d4 <ll_rl_timeout_set+0x10>)
   3f4c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3f4ca:	fb02 f000 	mul.w	r0, r2, r0
   3f4ce:	6018      	str	r0, [r3, #0]
}
   3f4d0:	4770      	bx	lr
   3f4d2:	bf00      	nop
   3f4d4:	20005e6c 	.word	0x20005e6c

0003f4d8 <ll_priv_mode_set>:
{
   3f4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3f4dc:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f4de:	2000      	movs	r0, #0
{
   3f4e0:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f4e2:	f7f9 fcb1 	bl	38e48 <ull_adv_is_enabled>
		? 0 : 1;
   3f4e6:	b110      	cbz	r0, 3f4ee <ll_priv_mode_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f4e8:	200c      	movs	r0, #12
}
   3f4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3f4ee:	4604      	mov	r4, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   3f4f0:	f7f9 fece 	bl	39290 <ull_scan_is_enabled>
		? 0 : 1;
   3f4f4:	2801      	cmp	r0, #1
   3f4f6:	d8f7      	bhi.n	3f4e8 <ll_priv_mode_set+0x10>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3f4f8:	4e1b      	ldr	r6, [pc, #108]	; (3f568 <ll_priv_mode_set+0x90>)
   3f4fa:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f4fe:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f500:	f009 0901 	and.w	r9, r9, #1
   3f504:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3f508:	00d5      	lsls	r5, r2, #3
   3f50a:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   3f50e:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3f512:	07db      	lsls	r3, r3, #31
   3f514:	f104 0401 	add.w	r4, r4, #1
   3f518:	d501      	bpl.n	3f51e <ll_priv_mode_set+0x46>
   3f51a:	454a      	cmp	r2, r9
   3f51c:	d006      	beq.n	3f52c <ll_priv_mode_set+0x54>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f51e:	2c08      	cmp	r4, #8
   3f520:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3f524:	d1ee      	bne.n	3f504 <ll_priv_mode_set+0x2c>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3f526:	2002      	movs	r0, #2
}
   3f528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f52c:	4630      	mov	r0, r6
   3f52e:	2206      	movs	r2, #6
   3f530:	4651      	mov	r1, sl
   3f532:	f00c fc08 	bl	4bd46 <memcmp>
   3f536:	2800      	cmp	r0, #0
   3f538:	d1f1      	bne.n	3f51e <ll_priv_mode_set+0x46>
		switch (mode) {
   3f53a:	f1b8 0f00 	cmp.w	r8, #0
   3f53e:	d00c      	beq.n	3f55a <ll_priv_mode_set+0x82>
   3f540:	f1b8 0f01 	cmp.w	r8, #1
   3f544:	d106      	bne.n	3f554 <ll_priv_mode_set+0x7c>
			rl[i].dev = 1U;
   3f546:	5d7b      	ldrb	r3, [r7, r5]
   3f548:	f043 0310 	orr.w	r3, r3, #16
   3f54c:	557b      	strb	r3, [r7, r5]
	return 0;
   3f54e:	2000      	movs	r0, #0
}
   3f550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   3f554:	2012      	movs	r0, #18
}
   3f556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   3f55a:	5d7b      	ldrb	r3, [r7, r5]
   3f55c:	f368 1304 	bfi	r3, r8, #4, #1
   3f560:	557b      	strb	r3, [r7, r5]
	return 0;
   3f562:	2000      	movs	r0, #0
   3f564:	e7f4      	b.n	3f550 <ll_priv_mode_set+0x78>
   3f566:	bf00      	nop
   3f568:	20005f5d 	.word	0x20005f5d

0003f56c <ull_filter_reset>:
{
   3f56c:	b5d0      	push	{r4, r6, r7, lr}
   3f56e:	4c31      	ldr	r4, [pc, #196]	; (3f634 <ull_filter_reset+0xc8>)
   3f570:	4931      	ldr	r1, [pc, #196]	; (3f638 <ull_filter_reset+0xcc>)
	for (int i = 0; i < FAL_SIZE; i++) {
   3f572:	2300      	movs	r3, #0
   3f574:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		uint8_t j = fal[i].rl_idx;
   3f578:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
		if (j < ARRAY_SIZE(rl)) {
   3f57c:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
   3f57e:	eb02 0e82 	add.w	lr, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   3f582:	d805      	bhi.n	3f590 <ull_filter_reset+0x24>
			rl[j].fal = 0U;
   3f584:	f811 203e 	ldrb.w	r2, [r1, lr, lsl #3]
   3f588:	f36f 1245 	bfc	r2, #5, #1
   3f58c:	f801 203e 	strb.w	r2, [r1, lr, lsl #3]
		fal[i].taken = 0U;
   3f590:	f81c 2033 	ldrb.w	r2, [ip, r3, lsl #3]
   3f594:	f36f 0200 	bfc	r2, #0, #1
   3f598:	f80c 2033 	strb.w	r2, [ip, r3, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   3f59c:	3301      	adds	r3, #1
   3f59e:	2b08      	cmp	r3, #8
   3f5a0:	d1ea      	bne.n	3f578 <ull_filter_reset+0xc>
	rl_enable = 0U;
   3f5a2:	4a26      	ldr	r2, [pc, #152]	; (3f63c <ull_filter_reset+0xd0>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   3f5a4:	4c26      	ldr	r4, [pc, #152]	; (3f640 <ull_filter_reset+0xd4>)
	rl_enable = 0U;
   3f5a6:	2300      	movs	r3, #0
   3f5a8:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   3f5aa:	780a      	ldrb	r2, [r1, #0]
   3f5ac:	f363 0200 	bfi	r2, r3, #0, #1
   3f5b0:	700a      	strb	r2, [r1, #0]
   3f5b2:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   3f5b6:	f363 0200 	bfi	r2, r3, #0, #1
   3f5ba:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   3f5be:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   3f5c2:	f363 0200 	bfi	r2, r3, #0, #1
   3f5c6:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   3f5ca:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   3f5ce:	f363 0200 	bfi	r2, r3, #0, #1
   3f5d2:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   3f5d6:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   3f5da:	f363 0200 	bfi	r2, r3, #0, #1
   3f5de:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   3f5e2:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   3f5e6:	f363 0200 	bfi	r2, r3, #0, #1
   3f5ea:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   3f5ee:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   3f5f2:	f363 0200 	bfi	r2, r3, #0, #1
   3f5f6:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   3f5fa:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   3f5fe:	f363 0200 	bfi	r2, r3, #0, #1
   3f602:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   3f606:	4a0f      	ldr	r2, [pc, #60]	; (3f644 <ull_filter_reset+0xd8>)
   3f608:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   3f60a:	4b0f      	ldr	r3, [pc, #60]	; (3f648 <ull_filter_reset+0xdc>)
   3f60c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   3f610:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   3f614:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   3f618:	4b0c      	ldr	r3, [pc, #48]	; (3f64c <ull_filter_reset+0xe0>)
   3f61a:	6023      	str	r3, [r4, #0]
	if (init) {
   3f61c:	b128      	cbz	r0, 3f62a <ull_filter_reset+0xbe>
}
   3f61e:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   3f622:	490b      	ldr	r1, [pc, #44]	; (3f650 <ull_filter_reset+0xe4>)
   3f624:	480b      	ldr	r0, [pc, #44]	; (3f654 <ull_filter_reset+0xe8>)
   3f626:	f011 bb81 	b.w	50d2c <k_work_init_delayable>
}
   3f62a:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
		k_work_cancel_delayable(&rpa_work);
   3f62e:	4809      	ldr	r0, [pc, #36]	; (3f654 <ull_filter_reset+0xe8>)
   3f630:	f011 bb8a 	b.w	50d48 <k_work_cancel_delayable>
   3f634:	2000609d 	.word	0x2000609d
   3f638:	20005f5c 	.word	0x20005f5c
   3f63c:	2000741b 	.word	0x2000741b
   3f640:	20005e6c 	.word	0x20005e6c
   3f644:	2000741a 	.word	0x2000741a
   3f648:	20003f38 	.word	0x20003f38
   3f64c:	000dbba0 	.word	0x000dbba0
   3f650:	0003f919 	.word	0x0003f919
   3f654:	20003f08 	.word	0x20003f08

0003f658 <ull_filter_lll_get>:
	return &rl_filter;
   3f658:	4a03      	ldr	r2, [pc, #12]	; (3f668 <ull_filter_lll_get+0x10>)
   3f65a:	4b04      	ldr	r3, [pc, #16]	; (3f66c <ull_filter_lll_get+0x14>)
}
   3f65c:	2800      	cmp	r0, #0
   3f65e:	bf14      	ite	ne
   3f660:	4610      	movne	r0, r2
   3f662:	4618      	moveq	r0, r3
   3f664:	4770      	bx	lr
   3f666:	bf00      	nop
   3f668:	200060dc 	.word	0x200060dc
   3f66c:	20005e70 	.word	0x20005e70

0003f670 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   3f670:	b1a8      	cbz	r0, 3f69e <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   3f672:	4a0c      	ldr	r2, [pc, #48]	; (3f6a4 <ull_filter_adv_scan_state_cb+0x34>)
   3f674:	6812      	ldr	r2, [r2, #0]
{
   3f676:	b510      	push	{r4, lr}
   3f678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   3f67c:	f240 30e7 	movw	r0, #999	; 0x3e7
   3f680:	2100      	movs	r1, #0
   3f682:	fbe2 0103 	umlal	r0, r1, r2, r3
   3f686:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3f68a:	2300      	movs	r3, #0
   3f68c:	f7e6 fd38 	bl	26100 <__aeabi_uldivmod>
}
   3f690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3f694:	4602      	mov	r2, r0
   3f696:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   3f698:	4803      	ldr	r0, [pc, #12]	; (3f6a8 <ull_filter_adv_scan_state_cb+0x38>)
   3f69a:	f008 bf39 	b.w	48510 <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   3f69e:	4802      	ldr	r0, [pc, #8]	; (3f6a8 <ull_filter_adv_scan_state_cb+0x38>)
   3f6a0:	f011 bb52 	b.w	50d48 <k_work_cancel_delayable>
   3f6a4:	20005e6c 	.word	0x20005e6c
   3f6a8:	20003f08 	.word	0x20003f08

0003f6ac <ull_filter_adv_update>:
	filter->enable_bitmask = 0;
   3f6ac:	4a0d      	ldr	r2, [pc, #52]	; (3f6e4 <ull_filter_adv_update+0x38>)
{
   3f6ae:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   3f6b0:	2300      	movs	r3, #0
   3f6b2:	8013      	strh	r3, [r2, #0]
	if (adv_fp &&
   3f6b4:	b970      	cbnz	r0, 3f6d4 <ull_filter_adv_update+0x28>
	if (rl_enable &&
   3f6b6:	4b0c      	ldr	r3, [pc, #48]	; (3f6e8 <ull_filter_adv_update+0x3c>)
	filter->enable_bitmask = 0;
   3f6b8:	4a0c      	ldr	r2, [pc, #48]	; (3f6ec <ull_filter_adv_update+0x40>)
	if (rl_enable &&
   3f6ba:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   3f6bc:	2000      	movs	r0, #0
   3f6be:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   3f6c0:	b903      	cbnz	r3, 3f6c4 <ull_filter_adv_update+0x18>
}
   3f6c2:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_OBSERVER) || !ull_scan_is_enabled(0))) {
   3f6c4:	f7f9 fde4 	bl	39290 <ull_scan_is_enabled>
	if (rl_enable &&
   3f6c8:	2800      	cmp	r0, #0
   3f6ca:	d1fa      	bne.n	3f6c2 <ull_filter_adv_update+0x16>
}
   3f6cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   3f6d0:	f7ff bb3e 	b.w	3ed50 <rl_update>
	     !(ull_scan_filter_pol_get(0) & 0x1))) {
   3f6d4:	4618      	mov	r0, r3
   3f6d6:	f7f9 fdf5 	bl	392c4 <ull_scan_filter_pol_get>
	if (adv_fp &&
   3f6da:	07c3      	lsls	r3, r0, #31
   3f6dc:	d4eb      	bmi.n	3f6b6 <ull_filter_adv_update+0xa>
		fal_update();
   3f6de:	f7ff fb6f 	bl	3edc0 <fal_update>
   3f6e2:	e7e8      	b.n	3f6b6 <ull_filter_adv_update+0xa>
   3f6e4:	200060dc 	.word	0x200060dc
   3f6e8:	2000741b 	.word	0x2000741b
   3f6ec:	20005e70 	.word	0x20005e70

0003f6f0 <ull_filter_scan_update>:
	filter->enable_bitmask = 0;
   3f6f0:	4a0e      	ldr	r2, [pc, #56]	; (3f72c <ull_filter_scan_update+0x3c>)
{
   3f6f2:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   3f6f4:	2300      	movs	r3, #0
   3f6f6:	8013      	strh	r3, [r2, #0]
	if ((scan_fp & 0x1) &&
   3f6f8:	07c2      	lsls	r2, r0, #31
   3f6fa:	d40e      	bmi.n	3f71a <ull_filter_scan_update+0x2a>
	if (rl_enable &&
   3f6fc:	4b0c      	ldr	r3, [pc, #48]	; (3f730 <ull_filter_scan_update+0x40>)
	filter->enable_bitmask = 0;
   3f6fe:	4a0d      	ldr	r2, [pc, #52]	; (3f734 <ull_filter_scan_update+0x44>)
	if (rl_enable &&
   3f700:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   3f702:	2000      	movs	r0, #0
   3f704:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   3f706:	b903      	cbnz	r3, 3f70a <ull_filter_scan_update+0x1a>
}
   3f708:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_BROADCASTER) || !ull_adv_is_enabled(0))) {
   3f70a:	f7f9 fb9d 	bl	38e48 <ull_adv_is_enabled>
	if (rl_enable &&
   3f70e:	2800      	cmp	r0, #0
   3f710:	d1fa      	bne.n	3f708 <ull_filter_scan_update+0x18>
}
   3f712:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   3f716:	f7ff bb1b 	b.w	3ed50 <rl_update>
	     !ull_adv_filter_pol_get(0))) {
   3f71a:	4618      	mov	r0, r3
   3f71c:	f7f9 fba0 	bl	38e60 <ull_adv_filter_pol_get>
	if ((scan_fp & 0x1) &&
   3f720:	2800      	cmp	r0, #0
   3f722:	d1eb      	bne.n	3f6fc <ull_filter_scan_update+0xc>
		fal_update();
   3f724:	f7ff fb4c 	bl	3edc0 <fal_update>
   3f728:	e7e8      	b.n	3f6fc <ull_filter_scan_update+0xc>
   3f72a:	bf00      	nop
   3f72c:	200060dc 	.word	0x200060dc
   3f730:	2000741b 	.word	0x2000741b
   3f734:	20005e70 	.word	0x20005e70

0003f738 <ull_filter_rpa_update>:
{
   3f738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f73c:	4682      	mov	sl, r0
   3f73e:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   3f740:	f011 fca2 	bl	51088 <z_impl_k_uptime_ticks>
   3f744:	014a      	lsls	r2, r1, #5
   3f746:	0143      	lsls	r3, r0, #5
   3f748:	1a1b      	subs	r3, r3, r0
   3f74a:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   3f74e:	eb62 0201 	sbc.w	r2, r2, r1
   3f752:	0092      	lsls	r2, r2, #2
   3f754:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   3f758:	009b      	lsls	r3, r3, #2
   3f75a:	181b      	adds	r3, r3, r0
   3f75c:	eb41 0902 	adc.w	r9, r1, r2
   3f760:	ea4f 09c9 	mov.w	r9, r9, lsl #3
   3f764:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
   3f768:	f3c3 3310 	ubfx	r3, r3, #12, #17
   3f76c:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
   3f770:	ea4f 39d9 	mov.w	r9, r9, lsr #15
	bool all = timeout || (rpa_last_ms == -1) ||
   3f774:	f1ba 0f00 	cmp.w	sl, #0
   3f778:	d116      	bne.n	3f7a8 <ull_filter_rpa_update+0x70>
   3f77a:	4a5f      	ldr	r2, [pc, #380]	; (3f8f8 <ull_filter_rpa_update+0x1c0>)
   3f77c:	e9d2 1200 	ldrd	r1, r2, [r2]
   3f780:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   3f784:	bf08      	it	eq
   3f786:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
   3f78a:	d00d      	beq.n	3f7a8 <ull_filter_rpa_update+0x70>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   3f78c:	485b      	ldr	r0, [pc, #364]	; (3f8fc <ull_filter_rpa_update+0x1c4>)
   3f78e:	6800      	ldr	r0, [r0, #0]
   3f790:	1a59      	subs	r1, r3, r1
   3f792:	eb69 0202 	sbc.w	r2, r9, r2
	bool all = timeout || (rpa_last_ms == -1) ||
   3f796:	4281      	cmp	r1, r0
   3f798:	f172 0200 	sbcs.w	r2, r2, #0
   3f79c:	bfac      	ite	ge
   3f79e:	f04f 0b01 	movge.w	fp, #1
   3f7a2:	f04f 0b00 	movlt.w	fp, #0
   3f7a6:	e001      	b.n	3f7ac <ull_filter_rpa_update+0x74>
   3f7a8:	f04f 0b01 	mov.w	fp, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f7ac:	4e54      	ldr	r6, [pc, #336]	; (3f900 <ull_filter_rpa_update+0x1c8>)
   3f7ae:	f8cd a004 	str.w	sl, [sp, #4]
   3f7b2:	f8df 8150 	ldr.w	r8, [pc, #336]	; 3f904 <ull_filter_rpa_update+0x1cc>
	bool all = timeout || (rpa_last_ms == -1) ||
   3f7b6:	2400      	movs	r4, #0
   3f7b8:	1ff7      	subs	r7, r6, #7
   3f7ba:	469a      	mov	sl, r3
   3f7bc:	e00d      	b.n	3f7da <ull_filter_rpa_update+0xa2>
			rl[i].rpas_ready = 1U;
   3f7be:	4425      	add	r5, r4
   3f7c0:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   3f7c4:	f043 0302 	orr.w	r3, r3, #2
   3f7c8:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f7cc:	3401      	adds	r4, #1
   3f7ce:	2c08      	cmp	r4, #8
   3f7d0:	f108 0806 	add.w	r8, r8, #6
   3f7d4:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3f7d8:	d026      	beq.n	3f828 <ull_filter_rpa_update+0xf0>
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   3f7da:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   3f7de:	00a5      	lsls	r5, r4, #2
   3f7e0:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   3f7e4:	07da      	lsls	r2, r3, #31
   3f7e6:	d5f1      	bpl.n	3f7cc <ull_filter_rpa_update+0x94>
   3f7e8:	f1bb 0f00 	cmp.w	fp, #0
   3f7ec:	d101      	bne.n	3f7f2 <ull_filter_rpa_update+0xba>
   3f7ee:	0798      	lsls	r0, r3, #30
   3f7f0:	d4ec      	bmi.n	3f7cc <ull_filter_rpa_update+0x94>
			if (rl[i].pirk) {
   3f7f2:	192b      	adds	r3, r5, r4
   3f7f4:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   3f7f8:	0759      	lsls	r1, r3, #29
   3f7fa:	d424      	bmi.n	3f846 <ull_filter_rpa_update+0x10e>
			if (rl[i].lirk) {
   3f7fc:	192b      	adds	r3, r5, r4
   3f7fe:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   3f802:	071a      	lsls	r2, r3, #28
   3f804:	d5db      	bpl.n	3f7be <ull_filter_rpa_update+0x86>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   3f806:	a902      	add	r1, sp, #8
   3f808:	4630      	mov	r0, r6
   3f80a:	f00c fb1b 	bl	4be44 <bt_rpa_create>
				LL_ASSERT(!err);
   3f80e:	2800      	cmp	r0, #0
   3f810:	d164      	bne.n	3f8dc <ull_filter_rpa_update+0x1a4>
				rl[i].local_rpa = &rpa;
   3f812:	ab02      	add	r3, sp, #8
   3f814:	f8c6 301d 	str.w	r3, [r6, #29]
   3f818:	4619      	mov	r1, r3
   3f81a:	2206      	movs	r2, #6
   3f81c:	4640      	mov	r0, r8
   3f81e:	f00c faa2 	bl	4bd66 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   3f822:	f8c6 801d 	str.w	r8, [r6, #29]
   3f826:	e7ca      	b.n	3f7be <ull_filter_rpa_update+0x86>
	if (all) {
   3f828:	4653      	mov	r3, sl
   3f82a:	f8dd a004 	ldr.w	sl, [sp, #4]
   3f82e:	f1bb 0f00 	cmp.w	fp, #0
   3f832:	d002      	beq.n	3f83a <ull_filter_rpa_update+0x102>
		rpa_last_ms = now;
   3f834:	4a30      	ldr	r2, [pc, #192]	; (3f8f8 <ull_filter_rpa_update+0x1c0>)
   3f836:	e9c2 3900 	strd	r3, r9, [r2]
	if (timeout) {
   3f83a:	f1ba 0f00 	cmp.w	sl, #0
   3f83e:	d127      	bne.n	3f890 <ull_filter_rpa_update+0x158>
}
   3f840:	b007      	add	sp, #28
   3f842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	psrc += length - 1;
   3f846:	7c31      	ldrb	r1, [r6, #16]
   3f848:	4b2f      	ldr	r3, [pc, #188]	; (3f908 <ull_filter_rpa_update+0x1d0>)
   3f84a:	220f      	movs	r2, #15
   3f84c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
   3f850:	441a      	add	r2, r3
	for (; length > 0; length--) {
   3f852:	f10d 0017 	add.w	r0, sp, #23
   3f856:	f10d 0307 	add.w	r3, sp, #7
		*pdst++ = *psrc--;
   3f85a:	f812 1901 	ldrb.w	r1, [r2], #-1
   3f85e:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   3f862:	4283      	cmp	r3, r0
   3f864:	d1f9      	bne.n	3f85a <ull_filter_rpa_update+0x122>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   3f866:	f106 0117 	add.w	r1, r6, #23
   3f86a:	a802      	add	r0, sp, #8
   3f86c:	f00c faea 	bl	4be44 <bt_rpa_create>
				LL_ASSERT(!err);
   3f870:	2800      	cmp	r0, #0
   3f872:	d0c3      	beq.n	3f7fc <ull_filter_rpa_update+0xc4>
   3f874:	4a25      	ldr	r2, [pc, #148]	; (3f90c <ull_filter_rpa_update+0x1d4>)
   3f876:	4926      	ldr	r1, [pc, #152]	; (3f910 <ull_filter_rpa_update+0x1d8>)
   3f878:	4826      	ldr	r0, [pc, #152]	; (3f914 <ull_filter_rpa_update+0x1dc>)
   3f87a:	f240 23eb 	movw	r3, #747	; 0x2eb
   3f87e:	f00a f943 	bl	49b08 <printk>
   3f882:	4040      	eors	r0, r0
   3f884:	f380 8811 	msr	BASEPRI, r0
   3f888:	f04f 0003 	mov.w	r0, #3
   3f88c:	df02      	svc	2
   3f88e:	e7b5      	b.n	3f7fc <ull_filter_rpa_update+0xc4>
		adv = ull_adv_is_enabled_get(0);
   3f890:	2000      	movs	r0, #0
   3f892:	f7f9 facb 	bl	38e2c <ull_adv_is_enabled_get>
		if (adv) {
   3f896:	4604      	mov	r4, r0
   3f898:	2800      	cmp	r0, #0
   3f89a:	d0d1      	beq.n	3f840 <ull_filter_rpa_update+0x108>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   3f89c:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
   3f8a0:	075b      	lsls	r3, r3, #29
   3f8a2:	d5cd      	bpl.n	3f840 <ull_filter_rpa_update+0x108>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   3f8a4:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   3f8a8:	2b07      	cmp	r3, #7
   3f8aa:	d8c9      	bhi.n	3f840 <ull_filter_rpa_update+0x108>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   3f8ac:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   3f8b0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   3f8b4:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   3f8b6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   3f8b8:	3028      	adds	r0, #40	; 0x28
   3f8ba:	f001 fac3 	bl	40e44 <lll_adv_pdu_alloc>
	(void)memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   3f8be:	7872      	ldrb	r2, [r6, #1]
   3f8c0:	4605      	mov	r5, r0
   3f8c2:	3202      	adds	r2, #2
   3f8c4:	4631      	mov	r1, r6
   3f8c6:	f00c fa4e 	bl	4bd66 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   3f8ca:	4629      	mov	r1, r5
   3f8cc:	4620      	mov	r0, r4
   3f8ce:	f7f9 fad7 	bl	38e80 <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   3f8d2:	f89d 3008 	ldrb.w	r3, [sp, #8]
   3f8d6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   3f8da:	e7b1      	b.n	3f840 <ull_filter_rpa_update+0x108>
				LL_ASSERT(!err);
   3f8dc:	4a0b      	ldr	r2, [pc, #44]	; (3f90c <ull_filter_rpa_update+0x1d4>)
   3f8de:	490c      	ldr	r1, [pc, #48]	; (3f910 <ull_filter_rpa_update+0x1d8>)
   3f8e0:	480c      	ldr	r0, [pc, #48]	; (3f914 <ull_filter_rpa_update+0x1dc>)
   3f8e2:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   3f8e6:	f00a f90f 	bl	49b08 <printk>
   3f8ea:	4040      	eors	r0, r0
   3f8ec:	f380 8811 	msr	BASEPRI, r0
   3f8f0:	f04f 0003 	mov.w	r0, #3
   3f8f4:	df02      	svc	2
   3f8f6:	e78c      	b.n	3f812 <ull_filter_rpa_update+0xda>
   3f8f8:	20003f38 	.word	0x20003f38
   3f8fc:	20005e6c 	.word	0x20005e6c
   3f900:	20005f63 	.word	0x20005f63
   3f904:	20005ea4 	.word	0x20005ea4
   3f908:	20005edc 	.word	0x20005edc
   3f90c:	00053408 	.word	0x00053408
   3f910:	00052d98 	.word	0x00052d98
   3f914:	00052bbc 	.word	0x00052bbc

0003f918 <rpa_timeout>:
{
   3f918:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   3f91a:	2001      	movs	r0, #1
   3f91c:	f7ff ff0c 	bl	3f738 <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   3f920:	4a0a      	ldr	r2, [pc, #40]	; (3f94c <rpa_timeout+0x34>)
   3f922:	6812      	ldr	r2, [r2, #0]
   3f924:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   3f928:	f240 30e7 	movw	r0, #999	; 0x3e7
   3f92c:	2100      	movs	r1, #0
   3f92e:	fbe2 0103 	umlal	r0, r1, r2, r3
   3f932:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3f936:	2300      	movs	r3, #0
   3f938:	f7e6 fbe2 	bl	26100 <__aeabi_uldivmod>
}
   3f93c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3f940:	4602      	mov	r2, r0
   3f942:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   3f944:	4802      	ldr	r0, [pc, #8]	; (3f950 <rpa_timeout+0x38>)
   3f946:	f008 bde3 	b.w	48510 <k_work_schedule>
   3f94a:	bf00      	nop
   3f94c:	20005e6c 	.word	0x20005e6c
   3f950:	20003f08 	.word	0x20003f08

0003f954 <ull_filter_adva_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   3f954:	2807      	cmp	r0, #7
   3f956:	d813      	bhi.n	3f980 <ull_filter_adva_get+0x2c>
{
   3f958:	b570      	push	{r4, r5, r6, lr}
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   3f95a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   3f95e:	4d10      	ldr	r5, [pc, #64]	; (3f9a0 <ull_filter_adva_get+0x4c>)
   3f960:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   3f964:	071a      	lsls	r2, r3, #28
   3f966:	4604      	mov	r4, r0
   3f968:	ea4f 0680 	mov.w	r6, r0, lsl #2
   3f96c:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   3f970:	d505      	bpl.n	3f97e <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[rl_idx].rpas_ready);
   3f972:	079b      	lsls	r3, r3, #30
   3f974:	d506      	bpl.n	3f984 <ull_filter_adva_get+0x30>
		return rl[rl_idx].local_rpa->val;
   3f976:	4426      	add	r6, r4
   3f978:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   3f97c:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   3f97e:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   3f980:	2000      	movs	r0, #0
}
   3f982:	4770      	bx	lr
		LL_ASSERT(rl[rl_idx].rpas_ready);
   3f984:	4a07      	ldr	r2, [pc, #28]	; (3f9a4 <ull_filter_adva_get+0x50>)
   3f986:	4908      	ldr	r1, [pc, #32]	; (3f9a8 <ull_filter_adva_get+0x54>)
   3f988:	4808      	ldr	r0, [pc, #32]	; (3f9ac <ull_filter_adva_get+0x58>)
   3f98a:	f44f 7347 	mov.w	r3, #796	; 0x31c
   3f98e:	f00a f8bb 	bl	49b08 <printk>
   3f992:	4040      	eors	r0, r0
   3f994:	f380 8811 	msr	BASEPRI, r0
   3f998:	f04f 0003 	mov.w	r0, #3
   3f99c:	df02      	svc	2
   3f99e:	e7ea      	b.n	3f976 <ull_filter_adva_get+0x22>
   3f9a0:	20005f5c 	.word	0x20005f5c
   3f9a4:	00053408 	.word	0x00053408
   3f9a8:	0005346c 	.word	0x0005346c
   3f9ac:	00052bbc 	.word	0x00052bbc

0003f9b0 <ull_filter_tgta_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].pirk) {
   3f9b0:	2807      	cmp	r0, #7
   3f9b2:	d80c      	bhi.n	3f9ce <ull_filter_tgta_get+0x1e>
   3f9b4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   3f9b8:	4a06      	ldr	r2, [pc, #24]	; (3f9d4 <ull_filter_tgta_get+0x24>)
   3f9ba:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   3f9be:	074b      	lsls	r3, r1, #29
   3f9c0:	d505      	bpl.n	3f9ce <ull_filter_tgta_get+0x1e>
		return rl[rl_idx].peer_rpa.val;
   3f9c2:	2328      	movs	r3, #40	; 0x28
   3f9c4:	fb03 2200 	mla	r2, r3, r0, r2
   3f9c8:	f102 001e 	add.w	r0, r2, #30
   3f9cc:	4770      	bx	lr
	return NULL;
   3f9ce:	2000      	movs	r0, #0
   3f9d0:	4770      	bx	lr
   3f9d2:	bf00      	nop
   3f9d4:	20005f5c 	.word	0x20005f5c

0003f9d8 <ull_filter_rl_find>:
{
   3f9d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f9dc:	468b      	mov	fp, r1
	if (free_idx) {
   3f9de:	4617      	mov	r7, r2
   3f9e0:	b10a      	cbz	r2, 3f9e6 <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   3f9e2:	23ff      	movs	r3, #255	; 0xff
   3f9e4:	7013      	strb	r3, [r2, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f9e6:	4d1b      	ldr	r5, [pc, #108]	; (3fa54 <ull_filter_rl_find+0x7c>)
{
   3f9e8:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f9ea:	f000 0a01 	and.w	sl, r0, #1
   3f9ee:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   3f9f2:	e006      	b.n	3fa02 <ull_filter_rl_find+0x2a>
   3f9f4:	4552      	cmp	r2, sl
   3f9f6:	d01f      	beq.n	3fa38 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f9f8:	3401      	adds	r4, #1
   3f9fa:	2c08      	cmp	r4, #8
   3f9fc:	f105 0528 	add.w	r5, r5, #40	; 0x28
   3fa00:	d015      	beq.n	3fa2e <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3fa02:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   3fa06:	fa5f f884 	uxtb.w	r8, r4
   3fa0a:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   3fa0e:	07d9      	lsls	r1, r3, #31
   3fa10:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3fa14:	d4ee      	bmi.n	3f9f4 <ull_filter_rl_find+0x1c>
		} else if (free_idx && !rl[i].taken &&
   3fa16:	2f00      	cmp	r7, #0
   3fa18:	d0ee      	beq.n	3f9f8 <ull_filter_rl_find+0x20>
   3fa1a:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3fa1c:	3401      	adds	r4, #1
		} else if (free_idx && !rl[i].taken &&
   3fa1e:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   3fa20:	bf08      	it	eq
   3fa22:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3fa26:	2c08      	cmp	r4, #8
   3fa28:	f105 0528 	add.w	r5, r5, #40	; 0x28
   3fa2c:	d1e9      	bne.n	3fa02 <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   3fa2e:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   3fa32:	4640      	mov	r0, r8
   3fa34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3fa38:	4628      	mov	r0, r5
   3fa3a:	2206      	movs	r2, #6
   3fa3c:	4659      	mov	r1, fp
   3fa3e:	f00c f982 	bl	4bd46 <memcmp>
   3fa42:	2800      	cmp	r0, #0
   3fa44:	d0f5      	beq.n	3fa32 <ull_filter_rl_find+0x5a>
		} else if (free_idx && !rl[i].taken &&
   3fa46:	2f00      	cmp	r7, #0
   3fa48:	d0d6      	beq.n	3f9f8 <ull_filter_rl_find+0x20>
   3fa4a:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   3fa4e:	07db      	lsls	r3, r3, #31
   3fa50:	d4d2      	bmi.n	3f9f8 <ull_filter_rl_find+0x20>
   3fa52:	e7e2      	b.n	3fa1a <ull_filter_rl_find+0x42>
   3fa54:	20005f5d 	.word	0x20005f5d

0003fa58 <ll_rl_add>:
{
   3fa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fa5c:	4607      	mov	r7, r0
   3fa5e:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3fa60:	2000      	movs	r0, #0
{
   3fa62:	460d      	mov	r5, r1
   3fa64:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3fa66:	f7f9 f9ef 	bl	38e48 <ull_adv_is_enabled>
		? 0 : 1;
   3fa6a:	b118      	cbz	r0, 3fa74 <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3fa6c:	200c      	movs	r0, #12
}
   3fa6e:	b005      	add	sp, #20
   3fa70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fa74:	4604      	mov	r4, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   3fa76:	f7f9 fc0b 	bl	39290 <ull_scan_is_enabled>
		? 0 : 1;
   3fa7a:	2801      	cmp	r0, #1
   3fa7c:	d8f6      	bhi.n	3fa6c <ll_rl_add+0x14>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   3fa7e:	46ba      	mov	sl, r7
   3fa80:	f10d 020f 	add.w	r2, sp, #15
   3fa84:	f81a 0b01 	ldrb.w	r0, [sl], #1
   3fa88:	4651      	mov	r1, sl
   3fa8a:	f7ff ffa5 	bl	3f9d8 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   3fa8e:	2807      	cmp	r0, #7
   3fa90:	f240 80b1 	bls.w	3fbf6 <ll_rl_add+0x19e>
	} else if (j >= ARRAY_SIZE(rl)) {
   3fa94:	f89d 800f 	ldrb.w	r8, [sp, #15]
   3fa98:	f1b8 0f07 	cmp.w	r8, #7
   3fa9c:	f200 80a7 	bhi.w	3fbee <ll_rl_add+0x196>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   3faa0:	eb08 0388 	add.w	r3, r8, r8, lsl #2
   3faa4:	4e56      	ldr	r6, [pc, #344]	; (3fc00 <ll_rl_add+0x1a8>)
   3faa6:	00db      	lsls	r3, r3, #3
   3faa8:	1c58      	adds	r0, r3, #1
   3faaa:	2206      	movs	r2, #6
   3faac:	4651      	mov	r1, sl
   3faae:	4430      	add	r0, r6
   3fab0:	9300      	str	r3, [sp, #0]
   3fab2:	f00c f958 	bl	4bd66 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   3fab6:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   3faba:	7838      	ldrb	r0, [r7, #0]
   3fabc:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   3fac0:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
   3fac4:	f360 1186 	bfi	r1, r0, #6, #1
   3fac8:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
   3facc:	f806 100b 	strb.w	r1, [r6, fp]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   3fad0:	4628      	mov	r0, r5
   3fad2:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   3fad4:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   3fad6:	f7f4 fa55 	bl	33f84 <mem_nz>
   3fada:	f816 200b 	ldrb.w	r2, [r6, fp]
   3fade:	f360 0282 	bfi	r2, r0, #2, #1
   3fae2:	f806 200b 	strb.w	r2, [r6, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   3fae6:	2110      	movs	r1, #16
   3fae8:	4648      	mov	r0, r9
   3faea:	f7f4 fa4b 	bl	33f84 <mem_nz>
   3faee:	f816 200b 	ldrb.w	r2, [r6, fp]
	if (rl[i].pirk) {
   3faf2:	9b00      	ldr	r3, [sp, #0]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   3faf4:	f000 0001 	and.w	r0, r0, #1
   3faf8:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   3fafc:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   3fb00:	f806 200b 	strb.w	r2, [r6, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   3fb04:	ea4f 0b88 	mov.w	fp, r8, lsl #2
	if (rl[i].pirk) {
   3fb08:	d142      	bne.n	3fb90 <ll_rl_add+0x138>
	if (rl[i].lirk) {
   3fb0a:	2800      	cmp	r0, #0
   3fb0c:	d160      	bne.n	3fbd0 <ll_rl_add+0x178>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   3fb0e:	f103 0018 	add.w	r0, r3, #24
   3fb12:	2206      	movs	r2, #6
   3fb14:	4430      	add	r0, r6
   3fb16:	2100      	movs	r1, #0
   3fb18:	f00c f930 	bl	4bd7c <memset>
	rl[i].dev = 0U;
   3fb1c:	eb0b 0308 	add.w	r3, fp, r8
   3fb20:	4d38      	ldr	r5, [pc, #224]	; (3fc04 <ll_rl_add+0x1ac>)
	rl[i].rpas_ready = 0U;
   3fb22:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   3fb26:	f022 0212 	bic.w	r2, r2, #18
   3fb2a:	f806 2033 	strb.w	r2, [r6, r3, lsl #3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   3fb2e:	f897 9000 	ldrb.w	r9, [r7]
	for (i = 0; i < FAL_SIZE; i++) {
   3fb32:	1eaf      	subs	r7, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3fb34:	f009 0901 	and.w	r9, r9, #1
   3fb38:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   3fb3c:	f3c3 0240 	ubfx	r2, r3, #1, #1
   3fb40:	f013 0301 	ands.w	r3, r3, #1
   3fb44:	d001      	beq.n	3fb4a <ll_rl_add+0xf2>
   3fb46:	454a      	cmp	r2, r9
   3fb48:	d014      	beq.n	3fb74 <ll_rl_add+0x11c>
	for (i = 0; i < FAL_SIZE; i++) {
   3fb4a:	3401      	adds	r4, #1
   3fb4c:	2c08      	cmp	r4, #8
   3fb4e:	f105 0508 	add.w	r5, r5, #8
   3fb52:	d1f1      	bne.n	3fb38 <ll_rl_add+0xe0>
   3fb54:	2300      	movs	r3, #0
	rl[i].taken = 1U;
   3fb56:	44c3      	add	fp, r8
   3fb58:	015b      	lsls	r3, r3, #5
   3fb5a:	f816 203b 	ldrb.w	r2, [r6, fp, lsl #3]
   3fb5e:	f043 0301 	orr.w	r3, r3, #1
   3fb62:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   3fb66:	4313      	orrs	r3, r2
	return 0;
   3fb68:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   3fb6a:	f806 303b 	strb.w	r3, [r6, fp, lsl #3]
}
   3fb6e:	b005      	add	sp, #20
   3fb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3fb74:	4628      	mov	r0, r5
   3fb76:	2206      	movs	r2, #6
   3fb78:	4651      	mov	r1, sl
   3fb7a:	9300      	str	r3, [sp, #0]
   3fb7c:	f00c f8e3 	bl	4bd46 <memcmp>
   3fb80:	9b00      	ldr	r3, [sp, #0]
   3fb82:	2800      	cmp	r0, #0
   3fb84:	d1e1      	bne.n	3fb4a <ll_rl_add+0xf2>
		fal[j].rl_idx = i;
   3fb86:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
   3fb8a:	f887 8001 	strb.w	r8, [r7, #1]
		rl[i].fal = 1U;
   3fb8e:	e7e2      	b.n	3fb56 <ll_rl_add+0xfe>
		rl[i].pirk_idx = peer_irk_count;
   3fb90:	f8df c074 	ldr.w	ip, [pc, #116]	; 3fc08 <ll_rl_add+0x1b0>
		peer_irk_rl_ids[peer_irk_count] = i;
   3fb94:	491d      	ldr	r1, [pc, #116]	; (3fc0c <ll_rl_add+0x1b4>)
		rl[i].pirk_idx = peer_irk_count;
   3fb96:	f89c 2000 	ldrb.w	r2, [ip]
   3fb9a:	f8dd e004 	ldr.w	lr, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   3fb9e:	f801 8002 	strb.w	r8, [r1, r2]
		rl[i].pirk_idx = peer_irk_count;
   3fba2:	f88e 2017 	strb.w	r2, [lr, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   3fba6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3fbaa:	f8df e064 	ldr.w	lr, [pc, #100]	; 3fc10 <ll_rl_add+0x1b8>
   3fbae:	eb01 1102 	add.w	r1, r1, r2, lsl #4
   3fbb2:	3201      	adds	r2, #1
   3fbb4:	f88c 2000 	strb.w	r2, [ip]
   3fbb8:	4471      	add	r1, lr
	psrc += length - 1;
   3fbba:	f105 020f 	add.w	r2, r5, #15
	for (; length > 0; length--) {
   3fbbe:	3d01      	subs	r5, #1
		*pdst++ = *psrc--;
   3fbc0:	f812 c901 	ldrb.w	ip, [r2], #-1
   3fbc4:	f801 cf01 	strb.w	ip, [r1, #1]!
	for (; length > 0; length--) {
   3fbc8:	42aa      	cmp	r2, r5
   3fbca:	d1f9      	bne.n	3fbc0 <ll_rl_add+0x168>
	if (rl[i].lirk) {
   3fbcc:	2800      	cmp	r0, #0
   3fbce:	d09e      	beq.n	3fb0e <ll_rl_add+0xb6>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   3fbd0:	1dd8      	adds	r0, r3, #7
   3fbd2:	4649      	mov	r1, r9
   3fbd4:	2210      	movs	r2, #16
   3fbd6:	4430      	add	r0, r6
   3fbd8:	9300      	str	r3, [sp, #0]
   3fbda:	f00c f8c4 	bl	4bd66 <memcpy>
		rl[i].local_rpa = NULL;
   3fbde:	eb0b 0208 	add.w	r2, fp, r8
   3fbe2:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   3fbe6:	2100      	movs	r1, #0
   3fbe8:	9b00      	ldr	r3, [sp, #0]
   3fbea:	6251      	str	r1, [r2, #36]	; 0x24
   3fbec:	e78f      	b.n	3fb0e <ll_rl_add+0xb6>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   3fbee:	2007      	movs	r0, #7
}
   3fbf0:	b005      	add	sp, #20
   3fbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   3fbf6:	2012      	movs	r0, #18
}
   3fbf8:	b005      	add	sp, #20
   3fbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fbfe:	bf00      	nop
   3fc00:	20005f5c 	.word	0x20005f5c
   3fc04:	2000609e 	.word	0x2000609e
   3fc08:	2000741a 	.word	0x2000741a
   3fc0c:	20005ed4 	.word	0x20005ed4
   3fc10:	20005edc 	.word	0x20005edc

0003fc14 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   3fc14:	2807      	cmp	r0, #7
   3fc16:	d807      	bhi.n	3fc28 <ull_filter_lll_lrpa_used+0x14>
   3fc18:	4b04      	ldr	r3, [pc, #16]	; (3fc2c <ull_filter_lll_lrpa_used+0x18>)
   3fc1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3fc1e:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   3fc22:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   3fc26:	4770      	bx	lr
   3fc28:	2000      	movs	r0, #0
}
   3fc2a:	4770      	bx	lr
   3fc2c:	20005f5c 	.word	0x20005f5c

0003fc30 <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   3fc30:	2807      	cmp	r0, #7
   3fc32:	d812      	bhi.n	3fc5a <ull_filter_lll_lrpa_get+0x2a>
   3fc34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3fc38:	4a09      	ldr	r2, [pc, #36]	; (3fc60 <ull_filter_lll_lrpa_get+0x30>)
   3fc3a:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   3fc3e:	f013 0f08 	tst.w	r3, #8
   3fc42:	ea4f 01c0 	mov.w	r1, r0, lsl #3
   3fc46:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   3fc4a:	d007      	beq.n	3fc5c <ull_filter_lll_lrpa_get+0x2c>
   3fc4c:	f3c3 0040 	ubfx	r0, r3, #1, #1
   3fc50:	079b      	lsls	r3, r3, #30
   3fc52:	d503      	bpl.n	3fc5c <ull_filter_lll_lrpa_get+0x2c>
	return rl[rl_idx].local_rpa;
   3fc54:	440a      	add	r2, r1
   3fc56:	6a50      	ldr	r0, [r2, #36]	; 0x24
   3fc58:	4770      	bx	lr
		return NULL;
   3fc5a:	2000      	movs	r0, #0
}
   3fc5c:	4770      	bx	lr
   3fc5e:	bf00      	nop
   3fc60:	20005f5c 	.word	0x20005f5c

0003fc64 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   3fc64:	4b02      	ldr	r3, [pc, #8]	; (3fc70 <ull_filter_lll_irks_get+0xc>)
   3fc66:	781b      	ldrb	r3, [r3, #0]
   3fc68:	7003      	strb	r3, [r0, #0]
}
   3fc6a:	4802      	ldr	r0, [pc, #8]	; (3fc74 <ull_filter_lll_irks_get+0x10>)
   3fc6c:	4770      	bx	lr
   3fc6e:	bf00      	nop
   3fc70:	2000741a 	.word	0x2000741a
   3fc74:	20005edc 	.word	0x20005edc

0003fc78 <ull_filter_lll_rl_idx>:
{
   3fc78:	b538      	push	{r3, r4, r5, lr}
   3fc7a:	460c      	mov	r4, r1
	if (filter) {
   3fc7c:	b150      	cbz	r0, 3fc94 <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   3fc7e:	2907      	cmp	r1, #7
   3fc80:	d813      	bhi.n	3fcaa <ull_filter_lll_rl_idx+0x32>
		LL_ASSERT(fal[devmatch_id].taken);
   3fc82:	4d2a      	ldr	r5, [pc, #168]	; (3fd2c <ull_filter_lll_rl_idx+0xb4>)
   3fc84:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   3fc88:	07da      	lsls	r2, r3, #31
   3fc8a:	d520      	bpl.n	3fcce <ull_filter_lll_rl_idx+0x56>
		i = fal[devmatch_id].rl_idx;
   3fc8c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   3fc90:	7868      	ldrb	r0, [r5, #1]
}
   3fc92:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   3fc94:	2907      	cmp	r1, #7
   3fc96:	d82b      	bhi.n	3fcf0 <ull_filter_lll_rl_idx+0x78>
		LL_ASSERT(rl[i].taken);
   3fc98:	4b25      	ldr	r3, [pc, #148]	; (3fd30 <ull_filter_lll_rl_idx+0xb8>)
   3fc9a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3fc9e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   3fca2:	07db      	lsls	r3, r3, #31
   3fca4:	d532      	bpl.n	3fd0c <ull_filter_lll_rl_idx+0x94>
{
   3fca6:	4620      	mov	r0, r4
}
   3fca8:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   3fcaa:	4a22      	ldr	r2, [pc, #136]	; (3fd34 <ull_filter_lll_rl_idx+0xbc>)
   3fcac:	4922      	ldr	r1, [pc, #136]	; (3fd38 <ull_filter_lll_rl_idx+0xc0>)
   3fcae:	4823      	ldr	r0, [pc, #140]	; (3fd3c <ull_filter_lll_rl_idx+0xc4>)
   3fcb0:	f240 335d 	movw	r3, #861	; 0x35d
   3fcb4:	f009 ff28 	bl	49b08 <printk>
   3fcb8:	4040      	eors	r0, r0
   3fcba:	f380 8811 	msr	BASEPRI, r0
   3fcbe:	f04f 0003 	mov.w	r0, #3
   3fcc2:	df02      	svc	2
		LL_ASSERT(fal[devmatch_id].taken);
   3fcc4:	4d19      	ldr	r5, [pc, #100]	; (3fd2c <ull_filter_lll_rl_idx+0xb4>)
   3fcc6:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   3fcca:	07da      	lsls	r2, r3, #31
   3fccc:	d4de      	bmi.n	3fc8c <ull_filter_lll_rl_idx+0x14>
   3fcce:	4a19      	ldr	r2, [pc, #100]	; (3fd34 <ull_filter_lll_rl_idx+0xbc>)
   3fcd0:	491b      	ldr	r1, [pc, #108]	; (3fd40 <ull_filter_lll_rl_idx+0xc8>)
   3fcd2:	481a      	ldr	r0, [pc, #104]	; (3fd3c <ull_filter_lll_rl_idx+0xc4>)
   3fcd4:	f240 335e 	movw	r3, #862	; 0x35e
   3fcd8:	f009 ff16 	bl	49b08 <printk>
   3fcdc:	4040      	eors	r0, r0
   3fcde:	f380 8811 	msr	BASEPRI, r0
   3fce2:	f04f 0003 	mov.w	r0, #3
   3fce6:	df02      	svc	2
		i = fal[devmatch_id].rl_idx;
   3fce8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   3fcec:	7868      	ldrb	r0, [r5, #1]
   3fcee:	e7d0      	b.n	3fc92 <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   3fcf0:	4a10      	ldr	r2, [pc, #64]	; (3fd34 <ull_filter_lll_rl_idx+0xbc>)
   3fcf2:	4914      	ldr	r1, [pc, #80]	; (3fd44 <ull_filter_lll_rl_idx+0xcc>)
   3fcf4:	4811      	ldr	r0, [pc, #68]	; (3fd3c <ull_filter_lll_rl_idx+0xc4>)
   3fcf6:	f240 3361 	movw	r3, #865	; 0x361
   3fcfa:	f009 ff05 	bl	49b08 <printk>
   3fcfe:	4040      	eors	r0, r0
   3fd00:	f380 8811 	msr	BASEPRI, r0
   3fd04:	f04f 0003 	mov.w	r0, #3
   3fd08:	df02      	svc	2
   3fd0a:	e7c5      	b.n	3fc98 <ull_filter_lll_rl_idx+0x20>
		LL_ASSERT(rl[i].taken);
   3fd0c:	4a09      	ldr	r2, [pc, #36]	; (3fd34 <ull_filter_lll_rl_idx+0xbc>)
   3fd0e:	490e      	ldr	r1, [pc, #56]	; (3fd48 <ull_filter_lll_rl_idx+0xd0>)
   3fd10:	480a      	ldr	r0, [pc, #40]	; (3fd3c <ull_filter_lll_rl_idx+0xc4>)
   3fd12:	f240 3363 	movw	r3, #867	; 0x363
   3fd16:	f009 fef7 	bl	49b08 <printk>
   3fd1a:	4040      	eors	r0, r0
   3fd1c:	f380 8811 	msr	BASEPRI, r0
   3fd20:	f04f 0003 	mov.w	r0, #3
   3fd24:	df02      	svc	2
{
   3fd26:	4620      	mov	r0, r4
   3fd28:	e7be      	b.n	3fca8 <ull_filter_lll_rl_idx+0x30>
   3fd2a:	bf00      	nop
   3fd2c:	2000609c 	.word	0x2000609c
   3fd30:	20005f5c 	.word	0x20005f5c
   3fd34:	00053408 	.word	0x00053408
   3fd38:	00053484 	.word	0x00053484
   3fd3c:	00052bbc 	.word	0x00052bbc
   3fd40:	0005352c 	.word	0x0005352c
   3fd44:	00053544 	.word	0x00053544
   3fd48:	000535e8 	.word	0x000535e8

0003fd4c <ull_filter_lll_rl_irk_idx>:
{
   3fd4c:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   3fd4e:	4b20      	ldr	r3, [pc, #128]	; (3fdd0 <ull_filter_lll_rl_irk_idx+0x84>)
   3fd50:	781b      	ldrb	r3, [r3, #0]
   3fd52:	4283      	cmp	r3, r0
{
   3fd54:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   3fd56:	d90c      	bls.n	3fd72 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   3fd58:	4b1e      	ldr	r3, [pc, #120]	; (3fdd4 <ull_filter_lll_rl_irk_idx+0x88>)
   3fd5a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   3fd5c:	2c07      	cmp	r4, #7
   3fd5e:	d819      	bhi.n	3fd94 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   3fd60:	4b1d      	ldr	r3, [pc, #116]	; (3fdd8 <ull_filter_lll_rl_irk_idx+0x8c>)
   3fd62:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3fd66:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   3fd6a:	07db      	lsls	r3, r3, #31
   3fd6c:	d520      	bpl.n	3fdb0 <ull_filter_lll_rl_irk_idx+0x64>
}
   3fd6e:	4620      	mov	r0, r4
   3fd70:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   3fd72:	4a1a      	ldr	r2, [pc, #104]	; (3fddc <ull_filter_lll_rl_irk_idx+0x90>)
   3fd74:	491a      	ldr	r1, [pc, #104]	; (3fde0 <ull_filter_lll_rl_irk_idx+0x94>)
   3fd76:	481b      	ldr	r0, [pc, #108]	; (3fde4 <ull_filter_lll_rl_irk_idx+0x98>)
   3fd78:	f240 336d 	movw	r3, #877	; 0x36d
   3fd7c:	f009 fec4 	bl	49b08 <printk>
   3fd80:	4040      	eors	r0, r0
   3fd82:	f380 8811 	msr	BASEPRI, r0
   3fd86:	f04f 0003 	mov.w	r0, #3
   3fd8a:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   3fd8c:	4b11      	ldr	r3, [pc, #68]	; (3fdd4 <ull_filter_lll_rl_irk_idx+0x88>)
   3fd8e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   3fd90:	2c07      	cmp	r4, #7
   3fd92:	d9e5      	bls.n	3fd60 <ull_filter_lll_rl_irk_idx+0x14>
   3fd94:	4a11      	ldr	r2, [pc, #68]	; (3fddc <ull_filter_lll_rl_irk_idx+0x90>)
   3fd96:	4914      	ldr	r1, [pc, #80]	; (3fde8 <ull_filter_lll_rl_irk_idx+0x9c>)
   3fd98:	4812      	ldr	r0, [pc, #72]	; (3fde4 <ull_filter_lll_rl_irk_idx+0x98>)
   3fd9a:	f240 336f 	movw	r3, #879	; 0x36f
   3fd9e:	f009 feb3 	bl	49b08 <printk>
   3fda2:	4040      	eors	r0, r0
   3fda4:	f380 8811 	msr	BASEPRI, r0
   3fda8:	f04f 0003 	mov.w	r0, #3
   3fdac:	df02      	svc	2
   3fdae:	e7d7      	b.n	3fd60 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   3fdb0:	4a0a      	ldr	r2, [pc, #40]	; (3fddc <ull_filter_lll_rl_irk_idx+0x90>)
   3fdb2:	490e      	ldr	r1, [pc, #56]	; (3fdec <ull_filter_lll_rl_irk_idx+0xa0>)
   3fdb4:	480b      	ldr	r0, [pc, #44]	; (3fde4 <ull_filter_lll_rl_irk_idx+0x98>)
   3fdb6:	f44f 735c 	mov.w	r3, #880	; 0x370
   3fdba:	f009 fea5 	bl	49b08 <printk>
   3fdbe:	4040      	eors	r0, r0
   3fdc0:	f380 8811 	msr	BASEPRI, r0
   3fdc4:	f04f 0003 	mov.w	r0, #3
   3fdc8:	df02      	svc	2
}
   3fdca:	4620      	mov	r0, r4
   3fdcc:	bd10      	pop	{r4, pc}
   3fdce:	bf00      	nop
   3fdd0:	2000741a 	.word	0x2000741a
   3fdd4:	20005ed4 	.word	0x20005ed4
   3fdd8:	20005f5c 	.word	0x20005f5c
   3fddc:	00053408 	.word	0x00053408
   3fde0:	000535f4 	.word	0x000535f4
   3fde4:	00052bbc 	.word	0x00052bbc
   3fde8:	00053614 	.word	0x00053614
   3fdec:	000535e8 	.word	0x000535e8

0003fdf0 <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   3fdf0:	2807      	cmp	r0, #7
   3fdf2:	d823      	bhi.n	3fe3c <ull_filter_lll_irk_in_fal+0x4c>
{
   3fdf4:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   3fdf6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   3fdfa:	4e11      	ldr	r6, [pc, #68]	; (3fe40 <ull_filter_lll_irk_in_fal+0x50>)
   3fdfc:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   3fe00:	07db      	lsls	r3, r3, #31
   3fe02:	4604      	mov	r4, r0
   3fe04:	ea4f 0580 	mov.w	r5, r0, lsl #2
   3fe08:	d505      	bpl.n	3fe16 <ull_filter_lll_irk_in_fal+0x26>
	return rl[rl_idx].fal;
   3fe0a:	4425      	add	r5, r4
   3fe0c:	f816 0035 	ldrb.w	r0, [r6, r5, lsl #3]
   3fe10:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   3fe14:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   3fe16:	4a0b      	ldr	r2, [pc, #44]	; (3fe44 <ull_filter_lll_irk_in_fal+0x54>)
   3fe18:	490b      	ldr	r1, [pc, #44]	; (3fe48 <ull_filter_lll_irk_in_fal+0x58>)
   3fe1a:	480c      	ldr	r0, [pc, #48]	; (3fe4c <ull_filter_lll_irk_in_fal+0x5c>)
   3fe1c:	f240 337b 	movw	r3, #891	; 0x37b
   3fe20:	f009 fe72 	bl	49b08 <printk>
   3fe24:	4040      	eors	r0, r0
   3fe26:	f380 8811 	msr	BASEPRI, r0
   3fe2a:	f04f 0003 	mov.w	r0, #3
   3fe2e:	df02      	svc	2
	return rl[rl_idx].fal;
   3fe30:	4425      	add	r5, r4
   3fe32:	f816 0035 	ldrb.w	r0, [r6, r5, lsl #3]
   3fe36:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   3fe3a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   3fe3c:	2000      	movs	r0, #0
}
   3fe3e:	4770      	bx	lr
   3fe40:	20005f5c 	.word	0x20005f5c
   3fe44:	00053408 	.word	0x00053408
   3fe48:	00053458 	.word	0x00053458
   3fe4c:	00052bbc 	.word	0x00052bbc

0003fe50 <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   3fe50:	4b14      	ldr	r3, [pc, #80]	; (3fea4 <ull_filter_lll_rl_idx_allowed+0x54>)
   3fe52:	781b      	ldrb	r3, [r3, #0]
   3fe54:	b19b      	cbz	r3, 3fe7e <ull_filter_lll_rl_idx_allowed+0x2e>
   3fe56:	2907      	cmp	r1, #7
{
   3fe58:	b570      	push	{r4, r5, r6, lr}
   3fe5a:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   3fe5c:	d80d      	bhi.n	3fe7a <ull_filter_lll_rl_idx_allowed+0x2a>
   3fe5e:	b960      	cbnz	r0, 3fe7a <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
   3fe60:	4e11      	ldr	r6, [pc, #68]	; (3fea8 <ull_filter_lll_rl_idx_allowed+0x58>)
   3fe62:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   3fe66:	008d      	lsls	r5, r1, #2
   3fe68:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   3fe6c:	07da      	lsls	r2, r3, #31
   3fe6e:	d50b      	bpl.n	3fe88 <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   3fe70:	4425      	add	r5, r4
   3fe72:	f816 0035 	ldrb.w	r0, [r6, r5, lsl #3]
   3fe76:	0743      	lsls	r3, r0, #29
   3fe78:	d403      	bmi.n	3fe82 <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
   3fe7a:	2001      	movs	r0, #1
}
   3fe7c:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   3fe7e:	2001      	movs	r0, #1
}
   3fe80:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   3fe82:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   3fe86:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   3fe88:	4a08      	ldr	r2, [pc, #32]	; (3feac <ull_filter_lll_rl_idx_allowed+0x5c>)
   3fe8a:	4909      	ldr	r1, [pc, #36]	; (3feb0 <ull_filter_lll_rl_idx_allowed+0x60>)
   3fe8c:	4809      	ldr	r0, [pc, #36]	; (3feb4 <ull_filter_lll_rl_idx_allowed+0x64>)
   3fe8e:	f44f 7365 	mov.w	r3, #916	; 0x394
   3fe92:	f009 fe39 	bl	49b08 <printk>
   3fe96:	4040      	eors	r0, r0
   3fe98:	f380 8811 	msr	BASEPRI, r0
   3fe9c:	f04f 0003 	mov.w	r0, #3
   3fea0:	df02      	svc	2
   3fea2:	e7e5      	b.n	3fe70 <ull_filter_lll_rl_idx_allowed+0x20>
   3fea4:	2000741b 	.word	0x2000741b
   3fea8:	20005f5c 	.word	0x20005f5c
   3feac:	00053408 	.word	0x00053408
   3feb0:	00053458 	.word	0x00053458
   3feb4:	00052bbc 	.word	0x00052bbc

0003feb8 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   3feb8:	7813      	ldrb	r3, [r2, #0]
   3feba:	2bff      	cmp	r3, #255	; 0xff
   3febc:	d119      	bne.n	3fef2 <ull_filter_lll_rl_addr_allowed+0x3a>
{
   3febe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3fec2:	4d19      	ldr	r5, [pc, #100]	; (3ff28 <ull_filter_lll_rl_addr_allowed+0x70>)
   3fec4:	4604      	mov	r4, r0
   3fec6:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   3fec8:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   3feca:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   3fece:	009e      	lsls	r6, r3, #2
   3fed0:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   3fed4:	f01c 0001 	ands.w	r0, ip, #1
   3fed8:	d003      	beq.n	3fee2 <ull_filter_lll_rl_addr_allowed+0x2a>
   3feda:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   3fede:	45a4      	cmp	ip, r4
   3fee0:	d009      	beq.n	3fef6 <ull_filter_lll_rl_addr_allowed+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3fee2:	3301      	adds	r3, #1
   3fee4:	2b08      	cmp	r3, #8
   3fee6:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   3feea:	d1ee      	bne.n	3feca <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   3feec:	2001      	movs	r0, #1
}
   3feee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return true;
   3fef2:	2001      	movs	r0, #1
}
   3fef4:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   3fef6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   3fefa:	4677      	mov	r7, lr
   3fefc:	f04f 0c00 	mov.w	ip, #0
				if (addr[j] != id_addr[j]) {
   3ff00:	f817 af01 	ldrb.w	sl, [r7, #1]!
   3ff04:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   3ff08:	45ca      	cmp	sl, r9
			for (j = 0U; j < BDADDR_SIZE; j++) {
   3ff0a:	f10c 0c01 	add.w	ip, ip, #1
				if (addr[j] != id_addr[j]) {
   3ff0e:	d1e8      	bne.n	3fee2 <ull_filter_lll_rl_addr_allowed+0x2a>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   3ff10:	f1bc 0f06 	cmp.w	ip, #6
   3ff14:	d1f4      	bne.n	3ff00 <ull_filter_lll_rl_addr_allowed+0x48>
				return !rl[i].pirk || rl[i].dev;
   3ff16:	441e      	add	r6, r3
				*rl_idx = i;
   3ff18:	7013      	strb	r3, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   3ff1a:	f815 3036 	ldrb.w	r3, [r5, r6, lsl #3]
   3ff1e:	075a      	lsls	r2, r3, #29
   3ff20:	d5e5      	bpl.n	3feee <ull_filter_lll_rl_addr_allowed+0x36>
   3ff22:	f3c3 1000 	ubfx	r0, r3, #4, #1
   3ff26:	e7e2      	b.n	3feee <ull_filter_lll_rl_addr_allowed+0x36>
   3ff28:	20005f5c 	.word	0x20005f5c

0003ff2c <ull_filter_lll_rl_addr_resolve>:
{
   3ff2c:	b410      	push	{r4}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   3ff2e:	4b0e      	ldr	r3, [pc, #56]	; (3ff68 <ull_filter_lll_rl_addr_resolve+0x3c>)
   3ff30:	781c      	ldrb	r4, [r3, #0]
   3ff32:	b17c      	cbz	r4, 3ff54 <ull_filter_lll_rl_addr_resolve+0x28>
   3ff34:	2a07      	cmp	r2, #7
   3ff36:	d80d      	bhi.n	3ff54 <ull_filter_lll_rl_addr_resolve+0x28>
   3ff38:	4c0c      	ldr	r4, [pc, #48]	; (3ff6c <ull_filter_lll_rl_addr_resolve+0x40>)
   3ff3a:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   3ff3e:	f814 c03c 	ldrb.w	ip, [r4, ip, lsl #3]
   3ff42:	f01c 0f08 	tst.w	ip, #8
   3ff46:	d005      	beq.n	3ff54 <ull_filter_lll_rl_addr_resolve+0x28>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   3ff48:	b120      	cbz	r0, 3ff54 <ull_filter_lll_rl_addr_resolve+0x28>
   3ff4a:	794b      	ldrb	r3, [r1, #5]
   3ff4c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3ff50:	2b40      	cmp	r3, #64	; 0x40
   3ff52:	d002      	beq.n	3ff5a <ull_filter_lll_rl_addr_resolve+0x2e>
}
   3ff54:	2000      	movs	r0, #0
   3ff56:	bc10      	pop	{r4}
   3ff58:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   3ff5a:	2328      	movs	r3, #40	; 0x28
   3ff5c:	fb03 4002 	mla	r0, r3, r2, r4
   3ff60:	3007      	adds	r0, #7
}
   3ff62:	bc10      	pop	{r4}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   3ff64:	f00b bf5b 	b.w	4be1e <bt_rpa_irk_matches>
   3ff68:	2000741b 	.word	0x2000741b
   3ff6c:	20005f5c 	.word	0x20005f5c

0003ff70 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   3ff70:	4b02      	ldr	r3, [pc, #8]	; (3ff7c <ull_filter_lll_rl_enabled+0xc>)
   3ff72:	7818      	ldrb	r0, [r3, #0]
}
   3ff74:	3800      	subs	r0, #0
   3ff76:	bf18      	it	ne
   3ff78:	2001      	movne	r0, #1
   3ff7a:	4770      	bx	lr
   3ff7c:	2000741b 	.word	0x2000741b

0003ff80 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   3ff80:	4668      	mov	r0, sp
   3ff82:	f020 0107 	bic.w	r1, r0, #7
   3ff86:	468d      	mov	sp, r1
   3ff88:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   3ff8a:	f002 fe01 	bl	42b90 <isr_radio>

	ISR_DIRECT_PM();
   3ff8e:	f7ec feb9 	bl	2cd04 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   3ff92:	f7ec ff89 	bl	2cea8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   3ff96:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3ff9a:	4685      	mov	sp, r0
   3ff9c:	4770      	bx	lr
   3ff9e:	bf00      	nop

0003ffa0 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   3ffa0:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   3ffa2:	4b09      	ldr	r3, [pc, #36]	; (3ffc8 <rtc0_nrf5_isr+0x28>)
   3ffa4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   3ffa8:	b93a      	cbnz	r2, 3ffba <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   3ffaa:	2001      	movs	r0, #1
   3ffac:	f7f4 f8d8 	bl	34160 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   3ffb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   3ffb4:	2002      	movs	r0, #2
   3ffb6:	f7f4 b8d3 	b.w	34160 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   3ffba:	2000      	movs	r0, #0
   3ffbc:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   3ffc0:	f7f5 fa48 	bl	35454 <ticker_trigger>
   3ffc4:	e7f1      	b.n	3ffaa <rtc0_nrf5_isr+0xa>
   3ffc6:	bf00      	nop
   3ffc8:	4000b000 	.word	0x4000b000

0003ffcc <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   3ffcc:	2000      	movs	r0, #0
   3ffce:	f7f4 b8c7 	b.w	34160 <mayfly_run>
   3ffd2:	bf00      	nop

0003ffd4 <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   3ffd4:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   3ffd6:	4b0e      	ldr	r3, [pc, #56]	; (40010 <ticker_stop_op_cb+0x3c>)
   3ffd8:	4c0e      	ldr	r4, [pc, #56]	; (40014 <ticker_stop_op_cb+0x40>)
   3ffda:	781a      	ldrb	r2, [r3, #0]
   3ffdc:	7823      	ldrb	r3, [r4, #0]
   3ffde:	429a      	cmp	r2, r3
   3ffe0:	d006      	beq.n	3fff0 <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   3ffe2:	490d      	ldr	r1, [pc, #52]	; (40018 <ticker_stop_op_cb+0x44>)
   3ffe4:	4a0d      	ldr	r2, [pc, #52]	; (4001c <ticker_stop_op_cb+0x48>)
   3ffe6:	7809      	ldrb	r1, [r1, #0]
   3ffe8:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   3ffea:	3301      	adds	r3, #1
   3ffec:	7023      	strb	r3, [r4, #0]
}
   3ffee:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   3fff0:	4a0b      	ldr	r2, [pc, #44]	; (40020 <ticker_stop_op_cb+0x4c>)
   3fff2:	490c      	ldr	r1, [pc, #48]	; (40024 <ticker_stop_op_cb+0x50>)
   3fff4:	480c      	ldr	r0, [pc, #48]	; (40028 <ticker_stop_op_cb+0x54>)
   3fff6:	f240 3301 	movw	r3, #769	; 0x301
   3fffa:	f009 fd85 	bl	49b08 <printk>
   3fffe:	4040      	eors	r0, r0
   40000:	f380 8811 	msr	BASEPRI, r0
   40004:	f04f 0003 	mov.w	r0, #3
   40008:	df02      	svc	2
	preempt_stop_ack++;
   4000a:	7823      	ldrb	r3, [r4, #0]
   4000c:	e7e9      	b.n	3ffe2 <ticker_stop_op_cb+0xe>
   4000e:	bf00      	nop
   40010:	2000741f 	.word	0x2000741f
   40014:	2000741e 	.word	0x2000741e
   40018:	2000741c 	.word	0x2000741c
   4001c:	2000741d 	.word	0x2000741d
   40020:	0005361c 	.word	0x0005361c
   40024:	00053664 	.word	0x00053664
   40028:	00052bbc 	.word	0x00052bbc

0004002c <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   4002c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   4002e:	b9f8      	cbnz	r0, 40070 <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   40030:	4b1e      	ldr	r3, [pc, #120]	; (400ac <ticker_start_op_cb+0x80>)
   40032:	4d1f      	ldr	r5, [pc, #124]	; (400b0 <ticker_start_op_cb+0x84>)
   40034:	781a      	ldrb	r2, [r3, #0]
   40036:	782b      	ldrb	r3, [r5, #0]
   40038:	429a      	cmp	r2, r3
   4003a:	d027      	beq.n	4008c <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   4003c:	4a1d      	ldr	r2, [pc, #116]	; (400b4 <ticker_start_op_cb+0x88>)
   4003e:	4c1e      	ldr	r4, [pc, #120]	; (400b8 <ticker_start_op_cb+0x8c>)
   40040:	7812      	ldrb	r2, [r2, #0]
   40042:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   40044:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   40046:	4291      	cmp	r1, r2
	preempt_start_ack++;
   40048:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   4004a:	b2d3      	uxtb	r3, r2
   4004c:	d00d      	beq.n	4006a <ticker_start_op_cb+0x3e>
   4004e:	4a1b      	ldr	r2, [pc, #108]	; (400bc <ticker_start_op_cb+0x90>)
   40050:	491b      	ldr	r1, [pc, #108]	; (400c0 <ticker_start_op_cb+0x94>)
   40052:	481c      	ldr	r0, [pc, #112]	; (400c4 <ticker_start_op_cb+0x98>)
   40054:	f240 330f 	movw	r3, #783	; 0x30f
   40058:	f009 fd56 	bl	49b08 <printk>
   4005c:	4040      	eors	r0, r0
   4005e:	f380 8811 	msr	BASEPRI, r0
   40062:	f04f 0003 	mov.w	r0, #3
   40066:	df02      	svc	2
	preempt_req++;
   40068:	7823      	ldrb	r3, [r4, #0]
   4006a:	3301      	adds	r3, #1
   4006c:	7023      	strb	r3, [r4, #0]
}
   4006e:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   40070:	4a12      	ldr	r2, [pc, #72]	; (400bc <ticker_start_op_cb+0x90>)
   40072:	4915      	ldr	r1, [pc, #84]	; (400c8 <ticker_start_op_cb+0x9c>)
   40074:	4813      	ldr	r0, [pc, #76]	; (400c4 <ticker_start_op_cb+0x98>)
   40076:	f240 330a 	movw	r3, #778	; 0x30a
   4007a:	f009 fd45 	bl	49b08 <printk>
   4007e:	4040      	eors	r0, r0
   40080:	f380 8811 	msr	BASEPRI, r0
   40084:	f04f 0003 	mov.w	r0, #3
   40088:	df02      	svc	2
   4008a:	e7d1      	b.n	40030 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   4008c:	4a0b      	ldr	r2, [pc, #44]	; (400bc <ticker_start_op_cb+0x90>)
   4008e:	490f      	ldr	r1, [pc, #60]	; (400cc <ticker_start_op_cb+0xa0>)
   40090:	480c      	ldr	r0, [pc, #48]	; (400c4 <ticker_start_op_cb+0x98>)
   40092:	f44f 7343 	mov.w	r3, #780	; 0x30c
   40096:	f009 fd37 	bl	49b08 <printk>
   4009a:	4040      	eors	r0, r0
   4009c:	f380 8811 	msr	BASEPRI, r0
   400a0:	f04f 0003 	mov.w	r0, #3
   400a4:	df02      	svc	2
	preempt_start_ack++;
   400a6:	782b      	ldrb	r3, [r5, #0]
   400a8:	e7c8      	b.n	4003c <ticker_start_op_cb+0x10>
   400aa:	bf00      	nop
   400ac:	20007421 	.word	0x20007421
   400b0:	20007420 	.word	0x20007420
   400b4:	2000741c 	.word	0x2000741c
   400b8:	2000741d 	.word	0x2000741d
   400bc:	0005361c 	.word	0x0005361c
   400c0:	000536b4 	.word	0x000536b4
   400c4:	00052bbc 	.word	0x00052bbc
   400c8:	0005312c 	.word	0x0005312c
   400cc:	0005368c 	.word	0x0005368c

000400d0 <isr_race>:
	radio_status_reset();
   400d0:	f002 be7c 	b.w	42dcc <radio_status_reset>

000400d4 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   400d4:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   400d6:	4a18      	ldr	r2, [pc, #96]	; (40138 <preempt_ticker_cb+0x64>)
   400d8:	4c18      	ldr	r4, [pc, #96]	; (4013c <preempt_ticker_cb+0x68>)
   400da:	7812      	ldrb	r2, [r2, #0]
   400dc:	7823      	ldrb	r3, [r4, #0]
   400de:	429a      	cmp	r2, r3
   400e0:	d01b      	beq.n	4011a <preempt_ticker_cb+0x46>
	preempt_ack++;
   400e2:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   400e4:	4b16      	ldr	r3, [pc, #88]	; (40140 <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   400e6:	3101      	adds	r1, #1
   400e8:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   400ea:	2200      	movs	r2, #0
	preempt_ack++;
   400ec:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   400ee:	9903      	ldr	r1, [sp, #12]
   400f0:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   400f2:	2001      	movs	r0, #1
   400f4:	4611      	mov	r1, r2
   400f6:	f7f3 ffd5 	bl	340a4 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   400fa:	b900      	cbnz	r0, 400fe <preempt_ticker_cb+0x2a>
}
   400fc:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   400fe:	4a11      	ldr	r2, [pc, #68]	; (40144 <preempt_ticker_cb+0x70>)
   40100:	4911      	ldr	r1, [pc, #68]	; (40148 <preempt_ticker_cb+0x74>)
   40102:	4812      	ldr	r0, [pc, #72]	; (4014c <preempt_ticker_cb+0x78>)
   40104:	f240 3376 	movw	r3, #886	; 0x376
   40108:	f009 fcfe 	bl	49b08 <printk>
   4010c:	4040      	eors	r0, r0
   4010e:	f380 8811 	msr	BASEPRI, r0
   40112:	f04f 0003 	mov.w	r0, #3
   40116:	df02      	svc	2
}
   40118:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   4011a:	4a0a      	ldr	r2, [pc, #40]	; (40144 <preempt_ticker_cb+0x70>)
   4011c:	490c      	ldr	r1, [pc, #48]	; (40150 <preempt_ticker_cb+0x7c>)
   4011e:	480b      	ldr	r0, [pc, #44]	; (4014c <preempt_ticker_cb+0x78>)
   40120:	f44f 735c 	mov.w	r3, #880	; 0x370
   40124:	f009 fcf0 	bl	49b08 <printk>
   40128:	4040      	eors	r0, r0
   4012a:	f380 8811 	msr	BASEPRI, r0
   4012e:	f04f 0003 	mov.w	r0, #3
   40132:	df02      	svc	2
   40134:	e7d5      	b.n	400e2 <preempt_ticker_cb+0xe>
   40136:	bf00      	nop
   40138:	2000741d 	.word	0x2000741d
   4013c:	2000741c 	.word	0x2000741c
   40140:	20000d84 	.word	0x20000d84
   40144:	0005361c 	.word	0x0005361c
   40148:	00052e98 	.word	0x00052e98
   4014c:	00052bbc 	.word	0x00052bbc
   40150:	000536d0 	.word	0x000536d0

00040154 <preempt_ticker_stop>:
{
   40154:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   40156:	4917      	ldr	r1, [pc, #92]	; (401b4 <preempt_ticker_stop+0x60>)
   40158:	4a17      	ldr	r2, [pc, #92]	; (401b8 <preempt_ticker_stop+0x64>)
   4015a:	780b      	ldrb	r3, [r1, #0]
   4015c:	7812      	ldrb	r2, [r2, #0]
   4015e:	429a      	cmp	r2, r3
{
   40160:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
   40162:	d122      	bne.n	401aa <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   40164:	4b15      	ldr	r3, [pc, #84]	; (401bc <preempt_ticker_stop+0x68>)
   40166:	4a16      	ldr	r2, [pc, #88]	; (401c0 <preempt_ticker_stop+0x6c>)
   40168:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   4016a:	7812      	ldrb	r2, [r2, #0]
   4016c:	429a      	cmp	r2, r3
   4016e:	d01c      	beq.n	401aa <preempt_ticker_stop+0x56>
	preempt_stop_req++;
   40170:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   40172:	4b14      	ldr	r3, [pc, #80]	; (401c4 <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   40174:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   40176:	2200      	movs	r2, #0
	preempt_stop_req++;
   40178:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   4017a:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   4017c:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   4017e:	4611      	mov	r1, r2
   40180:	4610      	mov	r0, r2
   40182:	f7f5 fa61 	bl	35648 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   40186:	4604      	mov	r4, r0
   40188:	b178      	cbz	r0, 401aa <preempt_ticker_stop+0x56>
   4018a:	2802      	cmp	r0, #2
   4018c:	d00e      	beq.n	401ac <preempt_ticker_stop+0x58>
   4018e:	4a0e      	ldr	r2, [pc, #56]	; (401c8 <preempt_ticker_stop+0x74>)
   40190:	490e      	ldr	r1, [pc, #56]	; (401cc <preempt_ticker_stop+0x78>)
   40192:	480f      	ldr	r0, [pc, #60]	; (401d0 <preempt_ticker_stop+0x7c>)
   40194:	f240 3362 	movw	r3, #866	; 0x362
   40198:	f009 fcb6 	bl	49b08 <printk>
   4019c:	4040      	eors	r0, r0
   4019e:	f380 8811 	msr	BASEPRI, r0
   401a2:	f04f 0003 	mov.w	r0, #3
   401a6:	df02      	svc	2
   401a8:	e000      	b.n	401ac <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   401aa:	2400      	movs	r4, #0
}
   401ac:	4620      	mov	r0, r4
   401ae:	b002      	add	sp, #8
   401b0:	bd10      	pop	{r4, pc}
   401b2:	bf00      	nop
   401b4:	2000741f 	.word	0x2000741f
   401b8:	2000741e 	.word	0x2000741e
   401bc:	2000741c 	.word	0x2000741c
   401c0:	2000741d 	.word	0x2000741d
   401c4:	0003ffd5 	.word	0x0003ffd5
   401c8:	0005361c 	.word	0x0005361c
   401cc:	00052f6c 	.word	0x00052f6c
   401d0:	00052bbc 	.word	0x00052bbc

000401d4 <preempt_ticker_start>:
{
   401d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull = HDR_LLL2ULL(p->param);
   401d8:	68cb      	ldr	r3, [r1, #12]
	preempt_anchor = p->ticks_at_expire;
   401da:	f8d1 8000 	ldr.w	r8, [r1]
	ull = HDR_LLL2ULL(p->param);
   401de:	681a      	ldr	r2, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   401e0:	4b2a      	ldr	r3, [pc, #168]	; (4028c <preempt_ticker_start+0xb8>)
   401e2:	4f2b      	ldr	r7, [pc, #172]	; (40290 <preempt_ticker_start+0xbc>)
	preempt_to = MAX(ull->ticks_active_to_start,
   401e4:	68d6      	ldr	r6, [r2, #12]
{
   401e6:	460d      	mov	r5, r1
   401e8:	4604      	mov	r4, r0
	if ((preempt_start_req != preempt_start_ack) ||
   401ea:	7819      	ldrb	r1, [r3, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   401ec:	6890      	ldr	r0, [r2, #8]
   401ee:	6853      	ldr	r3, [r2, #4]
   401f0:	4298      	cmp	r0, r3
   401f2:	bf2c      	ite	cs
   401f4:	ebc6 0600 	rsbcs	r6, r6, r0
   401f8:	ebc6 0603 	rsbcc	r6, r6, r3
	if ((preempt_start_req != preempt_start_ack) ||
   401fc:	783b      	ldrb	r3, [r7, #0]
   401fe:	4299      	cmp	r1, r3
{
   40200:	b08a      	sub	sp, #40	; 0x28
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   40202:	eb08 0906 	add.w	r9, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   40206:	d033      	beq.n	40270 <preempt_ticker_start+0x9c>
		if (!prev || prev->is_aborted ||
   40208:	2c00      	cmp	r4, #0
   4020a:	d03a      	beq.n	40282 <preempt_ticker_start+0xae>
   4020c:	7f23      	ldrb	r3, [r4, #28]
   4020e:	079b      	lsls	r3, r3, #30
   40210:	d437      	bmi.n	40282 <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   40212:	f8df a080 	ldr.w	sl, [pc, #128]	; 40294 <preempt_ticker_start+0xc0>
   40216:	f8da 0000 	ldr.w	r0, [sl]
   4021a:	eba9 0000 	sub.w	r0, r9, r0
		if (!prev || prev->is_aborted ||
   4021e:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   40222:	d022      	beq.n	4026a <preempt_ticker_start+0x96>
		preempt_ticker_stop();
   40224:	f7ff ff96 	bl	40154 <preempt_ticker_stop>
		prev->is_aborted = 1U;
   40228:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   4022a:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   4022c:	f8ca 9000 	str.w	r9, [sl]
		prev->is_aborted = 1U;
   40230:	f043 0302 	orr.w	r3, r3, #2
   40234:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   40236:	4620      	mov	r0, r4
   40238:	69a3      	ldr	r3, [r4, #24]
   4023a:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   4023c:	4b16      	ldr	r3, [pc, #88]	; (40298 <preempt_ticker_start+0xc4>)
	ticks_at_preempt = ticks_at_preempt_new;
   4023e:	f8ca 9000 	str.w	r9, [sl]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   40242:	e9cd 3507 	strd	r3, r5, [sp, #28]
   40246:	4b15      	ldr	r3, [pc, #84]	; (4029c <preempt_ticker_start+0xc8>)
   40248:	9600      	str	r6, [sp, #0]
   4024a:	2200      	movs	r2, #0
   4024c:	e9cd 3505 	strd	r3, r5, [sp, #20]
   40250:	e9cd 2203 	strd	r2, r2, [sp, #12]
   40254:	e9cd 2201 	strd	r2, r2, [sp, #4]
	preempt_start_req++;
   40258:	783c      	ldrb	r4, [r7, #0]
   4025a:	3401      	adds	r4, #1
   4025c:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   4025e:	4643      	mov	r3, r8
   40260:	4611      	mov	r1, r2
   40262:	4610      	mov	r0, r2
	preempt_start_req++;
   40264:	703c      	strb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   40266:	f7f5 f963 	bl	35530 <ticker_start>
}
   4026a:	b00a      	add	sp, #40	; 0x28
   4026c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   40270:	4b0b      	ldr	r3, [pc, #44]	; (402a0 <preempt_ticker_start+0xcc>)
   40272:	4a0c      	ldr	r2, [pc, #48]	; (402a4 <preempt_ticker_start+0xd0>)
   40274:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   40276:	7812      	ldrb	r2, [r2, #0]
   40278:	429a      	cmp	r2, r3
   4027a:	d1c5      	bne.n	40208 <preempt_ticker_start+0x34>
   4027c:	f8df a014 	ldr.w	sl, [pc, #20]	; 40294 <preempt_ticker_start+0xc0>
   40280:	e7dc      	b.n	4023c <preempt_ticker_start+0x68>
			return TICKER_STATUS_SUCCESS;
   40282:	2000      	movs	r0, #0
}
   40284:	b00a      	add	sp, #40	; 0x28
   40286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   4028a:	bf00      	nop
   4028c:	20007420 	.word	0x20007420
   40290:	20007421 	.word	0x20007421
   40294:	20006118 	.word	0x20006118
   40298:	0004002d 	.word	0x0004002d
   4029c:	000400d5 	.word	0x000400d5
   402a0:	2000741c 	.word	0x2000741c
   402a4:	2000741d 	.word	0x2000741d

000402a8 <preempt>:

static void preempt(void *param)
{
   402a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   402aa:	4e4b      	ldr	r6, [pc, #300]	; (403d8 <preempt+0x130>)
   402ac:	68b3      	ldr	r3, [r6, #8]
{
   402ae:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   402b0:	b15b      	cbz	r3, 402ca <preempt+0x22>
   402b2:	6833      	ldr	r3, [r6, #0]
   402b4:	b14b      	cbz	r3, 402ca <preempt+0x22>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   402b6:	23ff      	movs	r3, #255	; 0xff
   402b8:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   402ba:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   402be:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   402c2:	f7f7 fe9f 	bl	38004 <ull_prepare_dequeue_iter>
	if (!next) {
   402c6:	4601      	mov	r1, r0
   402c8:	b930      	cbnz	r0, 402d8 <preempt+0x30>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   402ca:	b009      	add	sp, #36	; 0x24
   402cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = ull_prepare_dequeue_iter(&idx);
   402ce:	f7f7 fe99 	bl	38004 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   402d2:	4601      	mov	r1, r0
   402d4:	2800      	cmp	r0, #0
   402d6:	d0f8      	beq.n	402ca <preempt+0x22>
   402d8:	7f0b      	ldrb	r3, [r1, #28]
   402da:	f013 0403 	ands.w	r4, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   402de:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   402e2:	d1f4      	bne.n	402ce <preempt+0x26>
	if (next != param) {
   402e4:	428d      	cmp	r5, r1
   402e6:	d126      	bne.n	40336 <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   402e8:	6873      	ldr	r3, [r6, #4]
   402ea:	6831      	ldr	r1, [r6, #0]
   402ec:	68e8      	ldr	r0, [r5, #12]
   402ee:	aa03      	add	r2, sp, #12
   402f0:	4798      	blx	r3
	if (!err) {
   402f2:	4607      	mov	r7, r0
   402f4:	b1b0      	cbz	r0, 40324 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   402f6:	68b3      	ldr	r3, [r6, #8]
   402f8:	6831      	ldr	r1, [r6, #0]
   402fa:	4620      	mov	r0, r4
   402fc:	4798      	blx	r3
	if (err == -EAGAIN) {
   402fe:	f117 0f0b 	cmn.w	r7, #11
   40302:	d02c      	beq.n	4035e <preempt+0xb6>
		LL_ASSERT(err == -ECANCELED);
   40304:	378c      	adds	r7, #140	; 0x8c
   40306:	d0e0      	beq.n	402ca <preempt+0x22>
   40308:	4a34      	ldr	r2, [pc, #208]	; (403dc <preempt+0x134>)
   4030a:	4935      	ldr	r1, [pc, #212]	; (403e0 <preempt+0x138>)
   4030c:	4835      	ldr	r0, [pc, #212]	; (403e4 <preempt+0x13c>)
   4030e:	f44f 7374 	mov.w	r3, #976	; 0x3d0
   40312:	f009 fbf9 	bl	49b08 <printk>
   40316:	4040      	eors	r0, r0
   40318:	f380 8811 	msr	BASEPRI, r0
   4031c:	f04f 0003 	mov.w	r0, #3
   40320:	df02      	svc	2
   40322:	e7d2      	b.n	402ca <preempt+0x22>
		next->is_aborted = 1;
   40324:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   40326:	69aa      	ldr	r2, [r5, #24]
   40328:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   4032a:	f043 0302 	orr.w	r3, r3, #2
   4032e:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   40330:	4628      	mov	r0, r5
   40332:	4790      	blx	r2
		return;
   40334:	e7c9      	b.n	402ca <preempt+0x22>
		ret = preempt_ticker_start(NULL, next);
   40336:	4620      	mov	r0, r4
   40338:	f7ff ff4c 	bl	401d4 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   4033c:	f030 0302 	bics.w	r3, r0, #2
   40340:	d0c3      	beq.n	402ca <preempt+0x22>
   40342:	4a26      	ldr	r2, [pc, #152]	; (403dc <preempt+0x134>)
   40344:	4928      	ldr	r1, [pc, #160]	; (403e8 <preempt+0x140>)
   40346:	4827      	ldr	r0, [pc, #156]	; (403e4 <preempt+0x13c>)
   40348:	f44f 7367 	mov.w	r3, #924	; 0x39c
   4034c:	f009 fbdc 	bl	49b08 <printk>
   40350:	4040      	eors	r0, r0
   40352:	f380 8811 	msr	BASEPRI, r0
   40356:	f04f 0003 	mov.w	r0, #3
   4035a:	df02      	svc	2
   4035c:	e7b5      	b.n	402ca <preempt+0x22>
		iter_idx = UINT8_MAX;
   4035e:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   40360:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   40364:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   40368:	f7f7 fe4c 	bl	38004 <ull_prepare_dequeue_iter>
		while (iter) {
   4036c:	b928      	cbnz	r0, 4037a <preempt+0xd2>
   4036e:	e013      	b.n	40398 <preempt+0xf0>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   40370:	f10d 000b 	add.w	r0, sp, #11
   40374:	f7f7 fe46 	bl	38004 <ull_prepare_dequeue_iter>
		while (iter) {
   40378:	b170      	cbz	r0, 40398 <preempt+0xf0>
			if (!iter->is_aborted &&
   4037a:	7f03      	ldrb	r3, [r0, #28]
   4037c:	079a      	lsls	r2, r3, #30
   4037e:	d4f7      	bmi.n	40370 <preempt+0xc8>
			    event.curr.param == iter->prepare_param.param) {
   40380:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   40382:	6831      	ldr	r1, [r6, #0]
   40384:	4291      	cmp	r1, r2
   40386:	d1f3      	bne.n	40370 <preempt+0xc8>
				iter->is_aborted = 1;
   40388:	f043 0302 	orr.w	r3, r3, #2
   4038c:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   4038e:	6983      	ldr	r3, [r0, #24]
   40390:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   40392:	f88d 400b 	strb.w	r4, [sp, #11]
   40396:	e7eb      	b.n	40370 <preempt+0xc8>
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   40398:	2301      	movs	r3, #1
	prepare_param.param = event.curr.param;
   4039a:	6830      	ldr	r0, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   4039c:	9300      	str	r3, [sp, #0]
	struct lll_prepare_param prepare_param = {0};
   4039e:	2100      	movs	r1, #0
   403a0:	e9cd 1104 	strd	r1, r1, [sp, #16]
   403a4:	9106      	str	r1, [sp, #24]
	prepare_param.param = event.curr.param;
   403a6:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   403a8:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   403aa:	9b03      	ldr	r3, [sp, #12]
   403ac:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   403b0:	aa04      	add	r2, sp, #16
   403b2:	f7f7 fde7 	bl	37f84 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   403b6:	2800      	cmp	r0, #0
   403b8:	d187      	bne.n	402ca <preempt+0x22>
   403ba:	4a08      	ldr	r2, [pc, #32]	; (403dc <preempt+0x134>)
   403bc:	490b      	ldr	r1, [pc, #44]	; (403ec <preempt+0x144>)
   403be:	4809      	ldr	r0, [pc, #36]	; (403e4 <preempt+0x13c>)
   403c0:	f240 33ce 	movw	r3, #974	; 0x3ce
   403c4:	f009 fba0 	bl	49b08 <printk>
   403c8:	4040      	eors	r0, r0
   403ca:	f380 8811 	msr	BASEPRI, r0
   403ce:	f04f 0003 	mov.w	r0, #3
   403d2:	df02      	svc	2
   403d4:	e779      	b.n	402ca <preempt+0x22>
   403d6:	bf00      	nop
   403d8:	20006120 	.word	0x20006120
   403dc:	0005361c 	.word	0x0005361c
   403e0:	000536f4 	.word	0x000536f4
   403e4:	00052bbc 	.word	0x00052bbc
   403e8:	00052f6c 	.word	0x00052f6c
   403ec:	000536ec 	.word	0x000536ec

000403f0 <lll_init>:
{
   403f0:	b510      	push	{r4, lr}
   403f2:	4816      	ldr	r0, [pc, #88]	; (4044c <lll_init+0x5c>)
   403f4:	f007 fad8 	bl	479a8 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   403f8:	4b15      	ldr	r3, [pc, #84]	; (40450 <lll_init+0x60>)
   403fa:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   403fc:	b310      	cbz	r0, 40444 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   403fe:	4b15      	ldr	r3, [pc, #84]	; (40454 <lll_init+0x64>)
   40400:	2400      	movs	r4, #0
   40402:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   40404:	f000 fb12 	bl	40a2c <lll_clock_init>
	if (err < 0) {
   40408:	2800      	cmp	r0, #0
   4040a:	db1a      	blt.n	40442 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   4040c:	4621      	mov	r1, r4
   4040e:	2001      	movs	r0, #1
   40410:	4622      	mov	r2, r4
   40412:	f7ec fc5f 	bl	2ccd4 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   40416:	4622      	mov	r2, r4
   40418:	200b      	movs	r0, #11
   4041a:	2101      	movs	r1, #1
   4041c:	f7ec fc5a 	bl	2ccd4 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   40420:	4622      	mov	r2, r4
   40422:	4621      	mov	r1, r4
   40424:	2018      	movs	r0, #24
   40426:	f7ec fc55 	bl	2ccd4 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   4042a:	2001      	movs	r0, #1
   4042c:	f7ec fc22 	bl	2cc74 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   40430:	200b      	movs	r0, #11
   40432:	f7ec fc1f 	bl	2cc74 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   40436:	2018      	movs	r0, #24
   40438:	f7ec fc1c 	bl	2cc74 <arch_irq_enable>
	radio_setup();
   4043c:	f002 fbd8 	bl	42bf0 <radio_setup>
	return 0;
   40440:	4620      	mov	r0, r4
}
   40442:	bd10      	pop	{r4, pc}
		return -ENODEV;
   40444:	f06f 0012 	mvn.w	r0, #18
}
   40448:	bd10      	pop	{r4, pc}
   4044a:	bf00      	nop
   4044c:	00053700 	.word	0x00053700
   40450:	2000611c 	.word	0x2000611c
   40454:	20006120 	.word	0x20006120

00040458 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   40458:	4a05      	ldr	r2, [pc, #20]	; (40470 <lll_csrand_get+0x18>)
{
   4045a:	b410      	push	{r4}
   4045c:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   4045e:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   40460:	6884      	ldr	r4, [r0, #8]
   40462:	6824      	ldr	r4, [r4, #0]
   40464:	b28a      	uxth	r2, r1
   40466:	4619      	mov	r1, r3
   40468:	4623      	mov	r3, r4
}
   4046a:	bc10      	pop	{r4}
   4046c:	4718      	bx	r3
   4046e:	bf00      	nop
   40470:	2000611c 	.word	0x2000611c

00040474 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   40474:	4b08      	ldr	r3, [pc, #32]	; (40498 <lll_csrand_isr_get+0x24>)
{
   40476:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   40478:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   4047a:	68ab      	ldr	r3, [r5, #8]
   4047c:	685c      	ldr	r4, [r3, #4]
   4047e:	b134      	cbz	r4, 4048e <lll_csrand_isr_get+0x1a>
   40480:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   40482:	46a4      	mov	ip, r4
   40484:	4601      	mov	r1, r0
   40486:	2300      	movs	r3, #0
   40488:	4628      	mov	r0, r5
}
   4048a:	bc30      	pop	{r4, r5}
   4048c:	4760      	bx	ip
   4048e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   40492:	bc30      	pop	{r4, r5}
   40494:	4770      	bx	lr
   40496:	bf00      	nop
   40498:	2000611c 	.word	0x2000611c

0004049c <lll_rand_isr_get>:
int lll_rand_isr_get(void *buf, size_t len)
   4049c:	4b08      	ldr	r3, [pc, #32]	; (404c0 <lll_rand_isr_get+0x24>)
   4049e:	b430      	push	{r4, r5}
   404a0:	681d      	ldr	r5, [r3, #0]
   404a2:	68ab      	ldr	r3, [r5, #8]
   404a4:	685c      	ldr	r4, [r3, #4]
   404a6:	b134      	cbz	r4, 404b6 <lll_rand_isr_get+0x1a>
   404a8:	b28a      	uxth	r2, r1
   404aa:	46a4      	mov	ip, r4
   404ac:	4601      	mov	r1, r0
   404ae:	2300      	movs	r3, #0
   404b0:	4628      	mov	r0, r5
   404b2:	bc30      	pop	{r4, r5}
   404b4:	4760      	bx	ip
   404b6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   404ba:	bc30      	pop	{r4, r5}
   404bc:	4770      	bx	lr
   404be:	bf00      	nop
   404c0:	2000611c 	.word	0x2000611c

000404c4 <lll_reset>:
}
   404c4:	2000      	movs	r0, #0
   404c6:	4770      	bx	lr

000404c8 <lll_disable>:
{
   404c8:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   404ca:	4604      	mov	r4, r0
{
   404cc:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   404ce:	b378      	cbz	r0, 40530 <lll_disable+0x68>
   404d0:	4b23      	ldr	r3, [pc, #140]	; (40560 <lll_disable+0x98>)
   404d2:	681a      	ldr	r2, [r3, #0]
   404d4:	4282      	cmp	r2, r0
   404d6:	d025      	beq.n	40524 <lll_disable+0x5c>
		idx = UINT8_MAX;
   404d8:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   404da:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   404de:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   404e2:	f7f7 fd8f 	bl	38004 <ull_prepare_dequeue_iter>
		while (next) {
   404e6:	b938      	cbnz	r0, 404f8 <lll_disable+0x30>
   404e8:	e01a      	b.n	40520 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   404ea:	42a1      	cmp	r1, r4
   404ec:	d00a      	beq.n	40504 <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   404ee:	f10d 0007 	add.w	r0, sp, #7
   404f2:	f7f7 fd87 	bl	38004 <ull_prepare_dequeue_iter>
		while (next) {
   404f6:	b198      	cbz	r0, 40520 <lll_disable+0x58>
			if (!next->is_aborted &&
   404f8:	7f03      	ldrb	r3, [r0, #28]
   404fa:	079b      	lsls	r3, r3, #30
   404fc:	d4f7      	bmi.n	404ee <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   404fe:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   40500:	2c00      	cmp	r4, #0
   40502:	d1f2      	bne.n	404ea <lll_disable+0x22>
				next->is_aborted = 1;
   40504:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   40506:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   40508:	f043 0302 	orr.w	r3, r3, #2
   4050c:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   4050e:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   40510:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   40514:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   40518:	f7f7 fd74 	bl	38004 <ull_prepare_dequeue_iter>
		while (next) {
   4051c:	2800      	cmp	r0, #0
   4051e:	d1eb      	bne.n	404f8 <lll_disable+0x30>
}
   40520:	b003      	add	sp, #12
   40522:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   40524:	689b      	ldr	r3, [r3, #8]
   40526:	b16b      	cbz	r3, 40544 <lll_disable+0x7c>
   40528:	4601      	mov	r1, r0
			event.curr.abort_cb(NULL, event.curr.param);
   4052a:	2000      	movs	r0, #0
   4052c:	4798      	blx	r3
   4052e:	e7d3      	b.n	404d8 <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   40530:	4a0b      	ldr	r2, [pc, #44]	; (40560 <lll_disable+0x98>)
   40532:	6893      	ldr	r3, [r2, #8]
   40534:	2b00      	cmp	r3, #0
   40536:	d0cf      	beq.n	404d8 <lll_disable+0x10>
   40538:	6811      	ldr	r1, [r2, #0]
   4053a:	2900      	cmp	r1, #0
   4053c:	d0cc      	beq.n	404d8 <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   4053e:	2000      	movs	r0, #0
   40540:	4798      	blx	r3
   40542:	e7c9      	b.n	404d8 <lll_disable+0x10>
			LL_ASSERT(!param);
   40544:	4a07      	ldr	r2, [pc, #28]	; (40564 <lll_disable+0x9c>)
   40546:	4908      	ldr	r1, [pc, #32]	; (40568 <lll_disable+0xa0>)
   40548:	4808      	ldr	r0, [pc, #32]	; (4056c <lll_disable+0xa4>)
   4054a:	23fd      	movs	r3, #253	; 0xfd
   4054c:	f009 fadc 	bl	49b08 <printk>
   40550:	4040      	eors	r0, r0
   40552:	f380 8811 	msr	BASEPRI, r0
   40556:	f04f 0003 	mov.w	r0, #3
   4055a:	df02      	svc	2
   4055c:	e7bc      	b.n	404d8 <lll_disable+0x10>
   4055e:	bf00      	nop
   40560:	20006120 	.word	0x20006120
   40564:	0005361c 	.word	0x0005361c
   40568:	00053704 	.word	0x00053704
   4056c:	00052bbc 	.word	0x00052bbc

00040570 <lll_prepare_done>:
}
   40570:	2000      	movs	r0, #0
   40572:	4770      	bx	lr

00040574 <lll_done>:
{
   40574:	b538      	push	{r3, r4, r5, lr}
   40576:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   40578:	f7f7 fd36 	bl	37fe8 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   4057c:	b154      	cbz	r4, 40594 <lll_done+0x20>
   4057e:	b310      	cbz	r0, 405c6 <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   40580:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   40582:	2000      	movs	r0, #0
   40584:	f7f7 fd5e 	bl	38044 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   40588:	4620      	mov	r0, r4
   4058a:	f7f7 fdbf 	bl	3810c <ull_event_done>
	LL_ASSERT(evdone);
   4058e:	b158      	cbz	r0, 405a8 <lll_done+0x34>
}
   40590:	2000      	movs	r0, #0
   40592:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   40594:	4d1a      	ldr	r5, [pc, #104]	; (40600 <lll_done+0x8c>)
   40596:	68ab      	ldr	r3, [r5, #8]
   40598:	b31b      	cbz	r3, 405e2 <lll_done+0x6e>
		param = event.curr.param;
   4059a:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   4059c:	2300      	movs	r3, #0
   4059e:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   405a0:	602b      	str	r3, [r5, #0]
		if (param) {
   405a2:	2c00      	cmp	r4, #0
   405a4:	d1ec      	bne.n	40580 <lll_done+0xc>
   405a6:	e7ec      	b.n	40582 <lll_done+0xe>
	LL_ASSERT(evdone);
   405a8:	4a16      	ldr	r2, [pc, #88]	; (40604 <lll_done+0x90>)
   405aa:	4917      	ldr	r1, [pc, #92]	; (40608 <lll_done+0x94>)
   405ac:	4817      	ldr	r0, [pc, #92]	; (4060c <lll_done+0x98>)
   405ae:	f240 136d 	movw	r3, #365	; 0x16d
   405b2:	f009 faa9 	bl	49b08 <printk>
   405b6:	4040      	eors	r0, r0
   405b8:	f380 8811 	msr	BASEPRI, r0
   405bc:	f04f 0003 	mov.w	r0, #3
   405c0:	df02      	svc	2
}
   405c2:	2000      	movs	r0, #0
   405c4:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   405c6:	4a0f      	ldr	r2, [pc, #60]	; (40604 <lll_done+0x90>)
   405c8:	4911      	ldr	r1, [pc, #68]	; (40610 <lll_done+0x9c>)
   405ca:	4810      	ldr	r0, [pc, #64]	; (4060c <lll_done+0x98>)
   405cc:	f240 1337 	movw	r3, #311	; 0x137
   405d0:	f009 fa9a 	bl	49b08 <printk>
   405d4:	4040      	eors	r0, r0
   405d6:	f380 8811 	msr	BASEPRI, r0
   405da:	f04f 0003 	mov.w	r0, #3
   405de:	df02      	svc	2
		ull = HDR_LLL2ULL(param);
   405e0:	e7ce      	b.n	40580 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   405e2:	4a08      	ldr	r2, [pc, #32]	; (40604 <lll_done+0x90>)
   405e4:	490b      	ldr	r1, [pc, #44]	; (40614 <lll_done+0xa0>)
   405e6:	4809      	ldr	r0, [pc, #36]	; (4060c <lll_done+0x98>)
   405e8:	f240 133d 	movw	r3, #317	; 0x13d
   405ec:	f009 fa8c 	bl	49b08 <printk>
   405f0:	4040      	eors	r0, r0
   405f2:	f380 8811 	msr	BASEPRI, r0
   405f6:	f04f 0003 	mov.w	r0, #3
   405fa:	df02      	svc	2
   405fc:	e7cd      	b.n	4059a <lll_done+0x26>
   405fe:	bf00      	nop
   40600:	20006120 	.word	0x20006120
   40604:	0005361c 	.word	0x0005361c
   40608:	00053730 	.word	0x00053730
   4060c:	00052bbc 	.word	0x00052bbc
   40610:	0005370c 	.word	0x0005370c
   40614:	0005371c 	.word	0x0005371c

00040618 <lll_is_done>:
	*is_resume = (param != event.curr.param);
   40618:	4a05      	ldr	r2, [pc, #20]	; (40630 <lll_is_done+0x18>)
   4061a:	6813      	ldr	r3, [r2, #0]
	return !event.curr.abort_cb;
   4061c:	6892      	ldr	r2, [r2, #8]
	*is_resume = (param != event.curr.param);
   4061e:	1a1b      	subs	r3, r3, r0
   40620:	bf18      	it	ne
   40622:	2301      	movne	r3, #1
}
   40624:	fab2 f082 	clz	r0, r2
	*is_resume = (param != event.curr.param);
   40628:	700b      	strb	r3, [r1, #0]
}
   4062a:	0940      	lsrs	r0, r0, #5
   4062c:	4770      	bx	lr
   4062e:	bf00      	nop
   40630:	20006120 	.word	0x20006120

00040634 <lll_is_abort_cb>:
}
   40634:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   40638:	4770      	bx	lr
   4063a:	bf00      	nop

0004063c <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   4063c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   40640:	2a00      	cmp	r2, #0
   40642:	db04      	blt.n	4064e <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   40644:	429a      	cmp	r2, r3
   40646:	bf38      	it	cc
   40648:	461a      	movcc	r2, r3
   4064a:	4610      	mov	r0, r2
}
   4064c:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   4064e:	68c0      	ldr	r0, [r0, #12]
   40650:	4298      	cmp	r0, r3
   40652:	bf38      	it	cc
   40654:	4618      	movcc	r0, r3
   40656:	4770      	bx	lr

00040658 <lll_preempt_calc>:
{
   40658:	b510      	push	{r4, lr}
   4065a:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   4065c:	f7f5 f894 	bl	35788 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   40660:	1b02      	subs	r2, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   40662:	0213      	lsls	r3, r2, #8
   40664:	d405      	bmi.n	40672 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   40666:	1cd0      	adds	r0, r2, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   40668:	2809      	cmp	r0, #9
   4066a:	bf94      	ite	ls
   4066c:	2000      	movls	r0, #0
   4066e:	2001      	movhi	r0, #1
}
   40670:	bd10      	pop	{r4, pc}
		return 0;
   40672:	2000      	movs	r0, #0
}
   40674:	bd10      	pop	{r4, pc}
   40676:	bf00      	nop

00040678 <lll_chan_set>:
	switch (chan) {
   40678:	2826      	cmp	r0, #38	; 0x26
{
   4067a:	b510      	push	{r4, lr}
   4067c:	4604      	mov	r4, r0
	switch (chan) {
   4067e:	d01c      	beq.n	406ba <lll_chan_set+0x42>
   40680:	2827      	cmp	r0, #39	; 0x27
   40682:	d012      	beq.n	406aa <lll_chan_set+0x32>
   40684:	2825      	cmp	r0, #37	; 0x25
   40686:	d008      	beq.n	4069a <lll_chan_set+0x22>
		if (chan < 11) {
   40688:	280a      	cmp	r0, #10
   4068a:	d91e      	bls.n	406ca <lll_chan_set+0x52>
		} else if (chan < 40) {
   4068c:	2827      	cmp	r0, #39	; 0x27
   4068e:	d821      	bhi.n	406d4 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   40690:	3003      	adds	r0, #3
   40692:	0040      	lsls	r0, r0, #1
   40694:	f002 fb08 	bl	42ca8 <radio_freq_chan_set>
   40698:	e002      	b.n	406a0 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   4069a:	2002      	movs	r0, #2
   4069c:	f002 fb04 	bl	42ca8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   406a0:	4620      	mov	r0, r4
}
   406a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   406a6:	f002 bb05 	b.w	42cb4 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   406aa:	2050      	movs	r0, #80	; 0x50
   406ac:	f002 fafc 	bl	42ca8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   406b0:	4620      	mov	r0, r4
}
   406b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   406b6:	f002 bafd 	b.w	42cb4 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   406ba:	201a      	movs	r0, #26
   406bc:	f002 faf4 	bl	42ca8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   406c0:	4620      	mov	r0, r4
}
   406c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   406c6:	f002 baf5 	b.w	42cb4 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   406ca:	3002      	adds	r0, #2
   406cc:	0040      	lsls	r0, r0, #1
   406ce:	f002 faeb 	bl	42ca8 <radio_freq_chan_set>
   406d2:	e7e5      	b.n	406a0 <lll_chan_set+0x28>
			LL_ASSERT(0);
   406d4:	4a06      	ldr	r2, [pc, #24]	; (406f0 <lll_chan_set+0x78>)
   406d6:	4907      	ldr	r1, [pc, #28]	; (406f4 <lll_chan_set+0x7c>)
   406d8:	4807      	ldr	r0, [pc, #28]	; (406f8 <lll_chan_set+0x80>)
   406da:	f240 13df 	movw	r3, #479	; 0x1df
   406de:	f009 fa13 	bl	49b08 <printk>
   406e2:	4040      	eors	r0, r0
   406e4:	f380 8811 	msr	BASEPRI, r0
   406e8:	f04f 0003 	mov.w	r0, #3
   406ec:	df02      	svc	2
   406ee:	e7d7      	b.n	406a0 <lll_chan_set+0x28>
   406f0:	0005361c 	.word	0x0005361c
   406f4:	00052c1c 	.word	0x00052c1c
   406f8:	00052bbc 	.word	0x00052bbc

000406fc <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   406fc:	f002 bb36 	b.w	42d6c <radio_tx_ready_delay_get>

00040700 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   40700:	f002 bb3c 	b.w	42d7c <radio_rx_ready_delay_get>

00040704 <lll_isr_tx_status_reset>:
{
   40704:	b508      	push	{r3, lr}
	radio_status_reset();
   40706:	f002 fb61 	bl	42dcc <radio_status_reset>
}
   4070a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   4070e:	f002 bcc1 	b.w	43094 <radio_tmr_status_reset>
   40712:	bf00      	nop

00040714 <lll_isr_rx_status_reset>:
{
   40714:	b508      	push	{r3, lr}
	radio_status_reset();
   40716:	f002 fb59 	bl	42dcc <radio_status_reset>
	radio_tmr_status_reset();
   4071a:	f002 fcbb 	bl	43094 <radio_tmr_status_reset>
}
   4071e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   40722:	f002 bc63 	b.w	42fec <radio_rssi_status_reset>
   40726:	bf00      	nop

00040728 <lll_isr_status_reset>:
{
   40728:	b508      	push	{r3, lr}
	radio_status_reset();
   4072a:	f002 fb4f 	bl	42dcc <radio_status_reset>
	radio_tmr_status_reset();
   4072e:	f002 fcb1 	bl	43094 <radio_tmr_status_reset>
	radio_filter_status_reset();
   40732:	f002 fc97 	bl	43064 <radio_filter_status_reset>
	radio_ar_status_reset();
   40736:	f002 fea9 	bl	4348c <radio_ar_status_reset>
}
   4073a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   4073e:	f002 bc55 	b.w	42fec <radio_rssi_status_reset>
   40742:	bf00      	nop

00040744 <lll_isr_cleanup>:
{
   40744:	b508      	push	{r3, lr}
   40746:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   40748:	4815      	ldr	r0, [pc, #84]	; (407a0 <lll_isr_cleanup+0x5c>)
   4074a:	f002 fa31 	bl	42bb0 <radio_isr_set>
	if (!radio_is_idle()) {
   4074e:	f002 fb5d 	bl	42e0c <radio_is_idle>
   40752:	b150      	cbz	r0, 4076a <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   40754:	f002 fd74 	bl	43240 <radio_tmr_stop>
	err = lll_hfclock_off();
   40758:	f000 f9ac 	bl	40ab4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   4075c:	2800      	cmp	r0, #0
   4075e:	db0c      	blt.n	4077a <lll_isr_cleanup+0x36>
}
   40760:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   40764:	2000      	movs	r0, #0
   40766:	f7ff bf05 	b.w	40574 <lll_done>
		radio_disable();
   4076a:	f002 fb1b 	bl	42da4 <radio_disable>
	radio_tmr_stop();
   4076e:	f002 fd67 	bl	43240 <radio_tmr_stop>
	err = lll_hfclock_off();
   40772:	f000 f99f 	bl	40ab4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   40776:	2800      	cmp	r0, #0
   40778:	daf2      	bge.n	40760 <lll_isr_cleanup+0x1c>
   4077a:	4a0a      	ldr	r2, [pc, #40]	; (407a4 <lll_isr_cleanup+0x60>)
   4077c:	490a      	ldr	r1, [pc, #40]	; (407a8 <lll_isr_cleanup+0x64>)
   4077e:	480b      	ldr	r0, [pc, #44]	; (407ac <lll_isr_cleanup+0x68>)
   40780:	f240 2342 	movw	r3, #578	; 0x242
   40784:	f009 f9c0 	bl	49b08 <printk>
   40788:	4040      	eors	r0, r0
   4078a:	f380 8811 	msr	BASEPRI, r0
   4078e:	f04f 0003 	mov.w	r0, #3
   40792:	df02      	svc	2
	lll_done(NULL);
   40794:	2000      	movs	r0, #0
}
   40796:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   4079a:	f7ff beeb 	b.w	40574 <lll_done>
   4079e:	bf00      	nop
   407a0:	000400d1 	.word	0x000400d1
   407a4:	0005361c 	.word	0x0005361c
   407a8:	00053738 	.word	0x00053738
   407ac:	00052bbc 	.word	0x00052bbc

000407b0 <lll_isr_abort>:
{
   407b0:	b510      	push	{r4, lr}
   407b2:	4604      	mov	r4, r0
	radio_status_reset();
   407b4:	f002 fb0a 	bl	42dcc <radio_status_reset>
	radio_tmr_status_reset();
   407b8:	f002 fc6c 	bl	43094 <radio_tmr_status_reset>
	radio_filter_status_reset();
   407bc:	f002 fc52 	bl	43064 <radio_filter_status_reset>
	radio_ar_status_reset();
   407c0:	f002 fe64 	bl	4348c <radio_ar_status_reset>
	radio_rssi_status_reset();
   407c4:	f002 fc12 	bl	42fec <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   407c8:	4620      	mov	r0, r4
}
   407ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   407ce:	f7ff bfb9 	b.w	40744 <lll_isr_cleanup>
   407d2:	bf00      	nop

000407d4 <lll_isr_early_abort>:
{
   407d4:	b508      	push	{r3, lr}
   407d6:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   407d8:	4813      	ldr	r0, [pc, #76]	; (40828 <lll_isr_early_abort+0x54>)
   407da:	f002 f9e9 	bl	42bb0 <radio_isr_set>
	if (!radio_is_idle()) {
   407de:	f002 fb15 	bl	42e0c <radio_is_idle>
   407e2:	b140      	cbz	r0, 407f6 <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   407e4:	f000 f966 	bl	40ab4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   407e8:	2800      	cmp	r0, #0
   407ea:	db0a      	blt.n	40802 <lll_isr_early_abort+0x2e>
}
   407ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   407f0:	2000      	movs	r0, #0
   407f2:	f7ff bebf 	b.w	40574 <lll_done>
		radio_disable();
   407f6:	f002 fad5 	bl	42da4 <radio_disable>
	err = lll_hfclock_off();
   407fa:	f000 f95b 	bl	40ab4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   407fe:	2800      	cmp	r0, #0
   40800:	daf4      	bge.n	407ec <lll_isr_early_abort+0x18>
   40802:	4a0a      	ldr	r2, [pc, #40]	; (4082c <lll_isr_early_abort+0x58>)
   40804:	490a      	ldr	r1, [pc, #40]	; (40830 <lll_isr_early_abort+0x5c>)
   40806:	480b      	ldr	r0, [pc, #44]	; (40834 <lll_isr_early_abort+0x60>)
   40808:	f240 2351 	movw	r3, #593	; 0x251
   4080c:	f009 f97c 	bl	49b08 <printk>
   40810:	4040      	eors	r0, r0
   40812:	f380 8811 	msr	BASEPRI, r0
   40816:	f04f 0003 	mov.w	r0, #3
   4081a:	df02      	svc	2
	lll_done(NULL);
   4081c:	2000      	movs	r0, #0
}
   4081e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   40822:	f7ff bea7 	b.w	40574 <lll_done>
   40826:	bf00      	nop
   40828:	000400d1 	.word	0x000400d1
   4082c:	0005361c 	.word	0x0005361c
   40830:	00053738 	.word	0x00053738
   40834:	00052bbc 	.word	0x00052bbc

00040838 <lll_prepare_resolve>:
{
   40838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4083c:	b084      	sub	sp, #16
   4083e:	4606      	mov	r6, r0
   40840:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   40842:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   40846:	23ff      	movs	r3, #255	; 0xff
{
   40848:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   4084c:	f88d 300f 	strb.w	r3, [sp, #15]
{
   40850:	460f      	mov	r7, r1
   40852:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   40854:	f7f7 fbd6 	bl	38004 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   40858:	4604      	mov	r4, r0
   4085a:	b928      	cbnz	r0, 40868 <lll_prepare_resolve+0x30>
   4085c:	e050      	b.n	40900 <lll_prepare_resolve+0xc8>
		p = ull_prepare_dequeue_iter(&idx);
   4085e:	f7f7 fbd1 	bl	38004 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   40862:	4604      	mov	r4, r0
   40864:	2800      	cmp	r0, #0
   40866:	d04b      	beq.n	40900 <lll_prepare_resolve+0xc8>
   40868:	f894 c01c 	ldrb.w	ip, [r4, #28]
   4086c:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   40870:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   40874:	d1f3      	bne.n	4085e <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   40876:	f8df a140 	ldr.w	sl, [pc, #320]	; 409b8 <lll_prepare_resolve+0x180>
	if ((!is_dequeue && !is_done_sync()) ||
   4087a:	f8da 3008 	ldr.w	r3, [sl, #8]
   4087e:	2b00      	cmp	r3, #0
   40880:	d145      	bne.n	4090e <lll_prepare_resolve+0xd6>
	    (p && is_resume)) {
   40882:	f1b9 0f00 	cmp.w	r9, #0
   40886:	d16a      	bne.n	4095e <lll_prepare_resolve+0x126>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   40888:	42ac      	cmp	r4, r5
   4088a:	d00c      	beq.n	408a6 <lll_prepare_resolve+0x6e>
   4088c:	4a4b      	ldr	r2, [pc, #300]	; (409bc <lll_prepare_resolve+0x184>)
   4088e:	494c      	ldr	r1, [pc, #304]	; (409c0 <lll_prepare_resolve+0x188>)
   40890:	484c      	ldr	r0, [pc, #304]	; (409c4 <lll_prepare_resolve+0x18c>)
   40892:	f240 23be 	movw	r3, #702	; 0x2be
   40896:	f009 f937 	bl	49b08 <printk>
   4089a:	4040      	eors	r0, r0
   4089c:	f380 8811 	msr	BASEPRI, r0
   408a0:	f04f 0003 	mov.w	r0, #3
   408a4:	df02      	svc	2
	event.curr.param = prepare_param->param;
   408a6:	68eb      	ldr	r3, [r5, #12]
   408a8:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   408ac:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   408b0:	4628      	mov	r0, r5
   408b2:	47c0      	blx	r8
   408b4:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   408b6:	f7ff fc4d 	bl	40154 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   408ba:	f030 0302 	bics.w	r3, r0, #2
   408be:	d015      	beq.n	408ec <lll_prepare_resolve+0xb4>
   408c0:	4a3e      	ldr	r2, [pc, #248]	; (409bc <lll_prepare_resolve+0x184>)
   408c2:	4941      	ldr	r1, [pc, #260]	; (409c8 <lll_prepare_resolve+0x190>)
   408c4:	483f      	ldr	r0, [pc, #252]	; (409c4 <lll_prepare_resolve+0x18c>)
   408c6:	f240 23cb 	movw	r3, #715	; 0x2cb
   408ca:	f009 f91d 	bl	49b08 <printk>
   408ce:	4040      	eors	r0, r0
   408d0:	f380 8811 	msr	BASEPRI, r0
   408d4:	f04f 0003 	mov.w	r0, #3
   408d8:	df02      	svc	2
		p = ull_prepare_dequeue_iter(&idx);
   408da:	f10d 000f 	add.w	r0, sp, #15
   408de:	f7f7 fb91 	bl	38004 <ull_prepare_dequeue_iter>
		if (!p) {
   408e2:	b148      	cbz	r0, 408f8 <lll_prepare_resolve+0xc0>
	} while (p->is_aborted || p->is_resume);
   408e4:	7f03      	ldrb	r3, [r0, #28]
   408e6:	f013 0303 	ands.w	r3, r3, #3
   408ea:	d020      	beq.n	4092e <lll_prepare_resolve+0xf6>
		p = ull_prepare_dequeue_iter(&idx);
   408ec:	f10d 000f 	add.w	r0, sp, #15
   408f0:	f7f7 fb88 	bl	38004 <ull_prepare_dequeue_iter>
		if (!p) {
   408f4:	2800      	cmp	r0, #0
   408f6:	d1f5      	bne.n	408e4 <lll_prepare_resolve+0xac>
}
   408f8:	4620      	mov	r0, r4
   408fa:	b004      	add	sp, #16
   408fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   40900:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 409b8 <lll_prepare_resolve+0x180>
	if ((!is_dequeue && !is_done_sync()) ||
   40904:	f8da 3008 	ldr.w	r3, [sl, #8]
   40908:	2b00      	cmp	r3, #0
   4090a:	d0cc      	beq.n	408a6 <lll_prepare_resolve+0x6e>
{
   4090c:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   4090e:	4639      	mov	r1, r7
   40910:	f8cd 9000 	str.w	r9, [sp]
   40914:	4643      	mov	r3, r8
   40916:	462a      	mov	r2, r5
   40918:	4630      	mov	r0, r6
   4091a:	f7f7 fb33 	bl	37f84 <ull_prepare_enqueue>
		LL_ASSERT(next);
   4091e:	4601      	mov	r1, r0
   40920:	b338      	cbz	r0, 40972 <lll_prepare_resolve+0x13a>
		if (is_resume) {
   40922:	f1b9 0f00 	cmp.w	r9, #0
   40926:	d033      	beq.n	40990 <lll_prepare_resolve+0x158>
			return -EINPROGRESS;
   40928:	f06f 0476 	mvn.w	r4, #118	; 0x76
   4092c:	e7e4      	b.n	408f8 <lll_prepare_resolve+0xc0>
	ret = preempt_ticker_start(NULL, p);
   4092e:	4601      	mov	r1, r0
   40930:	4618      	mov	r0, r3
   40932:	f7ff fc4f 	bl	401d4 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   40936:	f030 0302 	bics.w	r3, r0, #2
   4093a:	d0dd      	beq.n	408f8 <lll_prepare_resolve+0xc0>
   4093c:	4a1f      	ldr	r2, [pc, #124]	; (409bc <lll_prepare_resolve+0x184>)
   4093e:	4922      	ldr	r1, [pc, #136]	; (409c8 <lll_prepare_resolve+0x190>)
   40940:	4820      	ldr	r0, [pc, #128]	; (409c4 <lll_prepare_resolve+0x18c>)
   40942:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   40946:	f009 f8df 	bl	49b08 <printk>
   4094a:	4040      	eors	r0, r0
   4094c:	f380 8811 	msr	BASEPRI, r0
   40950:	f04f 0003 	mov.w	r0, #3
   40954:	df02      	svc	2
}
   40956:	4620      	mov	r0, r4
   40958:	b004      	add	sp, #16
   4095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   4095e:	f8cd 9000 	str.w	r9, [sp]
   40962:	4643      	mov	r3, r8
   40964:	462a      	mov	r2, r5
   40966:	4639      	mov	r1, r7
   40968:	4630      	mov	r0, r6
   4096a:	f7f7 fb0b 	bl	37f84 <ull_prepare_enqueue>
		LL_ASSERT(next);
   4096e:	2800      	cmp	r0, #0
   40970:	d1da      	bne.n	40928 <lll_prepare_resolve+0xf0>
   40972:	4a12      	ldr	r2, [pc, #72]	; (409bc <lll_prepare_resolve+0x184>)
   40974:	4915      	ldr	r1, [pc, #84]	; (409cc <lll_prepare_resolve+0x194>)
   40976:	4813      	ldr	r0, [pc, #76]	; (409c4 <lll_prepare_resolve+0x18c>)
   40978:	f240 238d 	movw	r3, #653	; 0x28d
   4097c:	f009 f8c4 	bl	49b08 <printk>
   40980:	4040      	eors	r0, r0
   40982:	f380 8811 	msr	BASEPRI, r0
   40986:	f04f 0003 	mov.w	r0, #3
   4098a:	df02      	svc	2
   4098c:	2100      	movs	r1, #0
   4098e:	e7c8      	b.n	40922 <lll_prepare_resolve+0xea>
		ret  = preempt_ticker_start(p, next);
   40990:	4620      	mov	r0, r4
   40992:	f7ff fc1f 	bl	401d4 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   40996:	f030 0302 	bics.w	r3, r0, #2
   4099a:	d0c5      	beq.n	40928 <lll_prepare_resolve+0xf0>
   4099c:	4a07      	ldr	r2, [pc, #28]	; (409bc <lll_prepare_resolve+0x184>)
   4099e:	490a      	ldr	r1, [pc, #40]	; (409c8 <lll_prepare_resolve+0x190>)
   409a0:	4808      	ldr	r0, [pc, #32]	; (409c4 <lll_prepare_resolve+0x18c>)
   409a2:	f44f 7326 	mov.w	r3, #664	; 0x298
   409a6:	f009 f8af 	bl	49b08 <printk>
   409aa:	4040      	eors	r0, r0
   409ac:	f380 8811 	msr	BASEPRI, r0
   409b0:	f04f 0003 	mov.w	r0, #3
   409b4:	df02      	svc	2
   409b6:	e7b7      	b.n	40928 <lll_prepare_resolve+0xf0>
   409b8:	20006120 	.word	0x20006120
   409bc:	0005361c 	.word	0x0005361c
   409c0:	0005374c 	.word	0x0005374c
   409c4:	00052bbc 	.word	0x00052bbc
   409c8:	00052f6c 	.word	0x00052f6c
   409cc:	00053744 	.word	0x00053744

000409d0 <clock_ready>:
	z_impl_k_sem_give(sem);
   409d0:	f101 0010 	add.w	r0, r1, #16
   409d4:	f007 bbb0 	b.w	48138 <z_impl_k_sem_give>

000409d8 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   409d8:	b570      	push	{r4, r5, r6, lr}
   409da:	4605      	mov	r5, r0
   409dc:	b08a      	sub	sp, #40	; 0x28
   409de:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   409e0:	2201      	movs	r2, #1
   409e2:	2100      	movs	r1, #0
   409e4:	a804      	add	r0, sp, #16
   409e6:	f010 f8eb 	bl	50bc0 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   409ea:	4b0f      	ldr	r3, [pc, #60]	; (40a28 <blocking_on+0x50>)
   409ec:	9301      	str	r3, [sp, #4]
   409ee:	2600      	movs	r6, #0
   409f0:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   409f2:	4669      	mov	r1, sp
   409f4:	4628      	mov	r0, r5
   409f6:	9603      	str	r6, [sp, #12]
   409f8:	9302      	str	r3, [sp, #8]
   409fa:	f009 f91d 	bl	49c38 <onoff_request>
	if (err < 0) {
   409fe:	2800      	cmp	r0, #0
   40a00:	db10      	blt.n	40a24 <blocking_on+0x4c>
   40a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   40a06:	4631      	mov	r1, r6
   40a08:	f240 30e7 	movw	r0, #999	; 0x3e7
   40a0c:	fbe4 0103 	umlal	r0, r1, r4, r3
   40a10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   40a14:	2300      	movs	r3, #0
   40a16:	f7e5 fb73 	bl	26100 <__aeabi_uldivmod>
   40a1a:	4602      	mov	r2, r0
   40a1c:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   40a1e:	a804      	add	r0, sp, #16
   40a20:	f007 fbb0 	bl	48184 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   40a24:	b00a      	add	sp, #40	; 0x28
   40a26:	bd70      	pop	{r4, r5, r6, pc}
   40a28:	000409d1 	.word	0x000409d1

00040a2c <lll_clock_init>:

int lll_clock_init(void)
{
   40a2c:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   40a2e:	2001      	movs	r0, #1
   40a30:	f004 f9a0 	bl	44d74 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   40a34:	4904      	ldr	r1, [pc, #16]	; (40a48 <lll_clock_init+0x1c>)
   40a36:	2300      	movs	r3, #0
   40a38:	2401      	movs	r4, #1
   40a3a:	608c      	str	r4, [r1, #8]
   40a3c:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   40a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   40a42:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   40a44:	f009 b8f8 	b.w	49c38 <onoff_request>
   40a48:	20006130 	.word	0x20006130

00040a4c <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   40a4c:	4b0c      	ldr	r3, [pc, #48]	; (40a80 <lll_clock_wait+0x34>)
   40a4e:	781a      	ldrb	r2, [r3, #0]
   40a50:	b10a      	cbz	r2, 40a56 <lll_clock_wait+0xa>
		return 0;
   40a52:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   40a54:	4770      	bx	lr
{
   40a56:	b510      	push	{r4, lr}
	done = true;
   40a58:	2001      	movs	r0, #1
   40a5a:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   40a5c:	f004 f98a 	bl	44d74 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   40a60:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   40a64:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   40a66:	f7ff ffb7 	bl	409d8 <blocking_on>
	if (err) {
   40a6a:	b938      	cbnz	r0, 40a7c <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   40a6c:	4620      	mov	r0, r4
   40a6e:	f009 f93b 	bl	49ce8 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   40a72:	2802      	cmp	r0, #2
		return 0;
   40a74:	bf0c      	ite	eq
   40a76:	2000      	moveq	r0, #0
		return -EIO;
   40a78:	f06f 0004 	mvnne.w	r0, #4
}
   40a7c:	bd10      	pop	{r4, pc}
   40a7e:	bf00      	nop
   40a80:	20007422 	.word	0x20007422

00040a84 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   40a84:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   40a86:	4b0a      	ldr	r3, [pc, #40]	; (40ab0 <lll_hfclock_on+0x2c>)
   40a88:	f3bf 8f5b 	dmb	ish
   40a8c:	e853 2f00 	ldrex	r2, [r3]
   40a90:	1c51      	adds	r1, r2, #1
   40a92:	e843 1000 	strex	r0, r1, [r3]
   40a96:	2800      	cmp	r0, #0
   40a98:	d1f8      	bne.n	40a8c <lll_hfclock_on+0x8>
   40a9a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   40a9e:	2a00      	cmp	r2, #0
   40aa0:	dd01      	ble.n	40aa6 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   40aa2:	2000      	movs	r0, #0
   40aa4:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   40aa6:	f004 f96d 	bl	44d84 <z_nrf_clock_bt_ctlr_hf_request>
}
   40aaa:	2000      	movs	r0, #0
   40aac:	bd08      	pop	{r3, pc}
   40aae:	bf00      	nop
   40ab0:	2000612c 	.word	0x2000612c

00040ab4 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   40ab4:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   40ab6:	4b0c      	ldr	r3, [pc, #48]	; (40ae8 <lll_hfclock_off+0x34>)
   40ab8:	681a      	ldr	r2, [r3, #0]
   40aba:	2a00      	cmp	r2, #0
   40abc:	dd11      	ble.n	40ae2 <lll_hfclock_off+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   40abe:	f3bf 8f5b 	dmb	ish
   40ac2:	e853 2f00 	ldrex	r2, [r3]
   40ac6:	1e51      	subs	r1, r2, #1
   40ac8:	e843 1000 	strex	r0, r1, [r3]
   40acc:	2800      	cmp	r0, #0
   40ace:	d1f8      	bne.n	40ac2 <lll_hfclock_off+0xe>
   40ad0:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   40ad4:	2a01      	cmp	r2, #1
   40ad6:	dd01      	ble.n	40adc <lll_hfclock_off+0x28>
		return 0;
   40ad8:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   40ada:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   40adc:	f004 f968 	bl	44db0 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   40ae0:	e7fa      	b.n	40ad8 <lll_hfclock_off+0x24>
		return -EALREADY;
   40ae2:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   40ae6:	bd08      	pop	{r3, pc}
   40ae8:	2000612c 	.word	0x2000612c

00040aec <lll_clock_sca_local_get>:

uint8_t lll_clock_sca_local_get(void)
{
	return CLOCK_CONTROL_NRF_K32SRC_ACCURACY;
}
   40aec:	2005      	movs	r0, #5
   40aee:	4770      	bx	lr

00040af0 <lll_clock_ppm_local_get>:

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   40af0:	2032      	movs	r0, #50	; 0x32
   40af2:	4770      	bx	lr

00040af4 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   40af4:	4b01      	ldr	r3, [pc, #4]	; (40afc <lll_clock_ppm_get+0x8>)
}
   40af6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   40afa:	4770      	bx	lr
   40afc:	00053778 	.word	0x00053778

00040b00 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   40b00:	b510      	push	{r4, lr}
   40b02:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   40b04:	f7ff fe10 	bl	40728 <lll_isr_status_reset>

	radio_filter_disable();
   40b08:	f002 faa2 	bl	43050 <radio_filter_disable>

	lll_isr_cleanup(param);
   40b0c:	4620      	mov	r0, r4
}
   40b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   40b12:	f7ff be17 	b.w	40744 <lll_isr_cleanup>
   40b16:	bf00      	nop

00040b18 <isr_tx>:
{
   40b18:	b530      	push	{r4, r5, lr}
   40b1a:	b083      	sub	sp, #12
   40b1c:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   40b1e:	f7ff fdf1 	bl	40704 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   40b22:	2096      	movs	r0, #150	; 0x96
   40b24:	f002 fac6 	bl	430b4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   40b28:	2300      	movs	r3, #0
   40b2a:	4618      	mov	r0, r3
   40b2c:	461a      	mov	r2, r3
   40b2e:	4619      	mov	r1, r3
   40b30:	f002 f9dc 	bl	42eec <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   40b34:	2001      	movs	r0, #1
   40b36:	f7f7 f9d7 	bl	37ee8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   40b3a:	4604      	mov	r4, r0
   40b3c:	2800      	cmp	r0, #0
   40b3e:	d043      	beq.n	40bc8 <isr_tx+0xb0>
	radio_pkt_rx_set(node_rx->pdu);
   40b40:	f104 001c 	add.w	r0, r4, #28
   40b44:	f002 f906 	bl	42d54 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   40b48:	f002 f94c 	bl	42de4 <radio_is_ready>
   40b4c:	b9e0      	cbnz	r0, 40b88 <isr_tx+0x70>
	radio_isr_set(isr_rx, param);
   40b4e:	4825      	ldr	r0, [pc, #148]	; (40be4 <isr_tx+0xcc>)
   40b50:	4629      	mov	r1, r5
   40b52:	f002 f82d 	bl	42bb0 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   40b56:	f7ff fa0b 	bl	3ff70 <ull_filter_lll_rl_enabled>
   40b5a:	bb50      	cbnz	r0, 40bb2 <isr_tx+0x9a>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   40b5c:	f002 fbc4 	bl	432e8 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   40b60:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   40b62:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   40b64:	4608      	mov	r0, r1
   40b66:	f002 f90b 	bl	42d80 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   40b6a:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   40b6c:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   40b6e:	4608      	mov	r0, r1
   40b70:	f002 f902 	bl	42d78 <radio_tx_chain_delay_get>
   40b74:	442c      	add	r4, r5
   40b76:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   40b78:	1a20      	subs	r0, r4, r0
   40b7a:	f002 fb6d 	bl	43258 <radio_tmr_hcto_configure>
}
   40b7e:	b003      	add	sp, #12
   40b80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   40b84:	f002 bba2 	b.w	432cc <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   40b88:	4a17      	ldr	r2, [pc, #92]	; (40be8 <isr_tx+0xd0>)
   40b8a:	4918      	ldr	r1, [pc, #96]	; (40bec <isr_tx+0xd4>)
   40b8c:	4818      	ldr	r0, [pc, #96]	; (40bf0 <isr_tx+0xd8>)
   40b8e:	f240 4345 	movw	r3, #1093	; 0x445
   40b92:	f008 ffb9 	bl	49b08 <printk>
   40b96:	4040      	eors	r0, r0
   40b98:	f380 8811 	msr	BASEPRI, r0
   40b9c:	f04f 0003 	mov.w	r0, #3
   40ba0:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   40ba2:	4810      	ldr	r0, [pc, #64]	; (40be4 <isr_tx+0xcc>)
   40ba4:	4629      	mov	r1, r5
   40ba6:	f002 f803 	bl	42bb0 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   40baa:	f7ff f9e1 	bl	3ff70 <ull_filter_lll_rl_enabled>
   40bae:	2800      	cmp	r0, #0
   40bb0:	d0d4      	beq.n	40b5c <isr_tx+0x44>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   40bb2:	f10d 0007 	add.w	r0, sp, #7
   40bb6:	f7ff f855 	bl	3fc64 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   40bba:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   40bbc:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   40bbe:	f89d 0007 	ldrb.w	r0, [sp, #7]
   40bc2:	f002 fc29 	bl	43418 <radio_ar_configure>
   40bc6:	e7c9      	b.n	40b5c <isr_tx+0x44>
	LL_ASSERT(node_rx);
   40bc8:	4a07      	ldr	r2, [pc, #28]	; (40be8 <isr_tx+0xd0>)
   40bca:	490a      	ldr	r1, [pc, #40]	; (40bf4 <isr_tx+0xdc>)
   40bcc:	4808      	ldr	r0, [pc, #32]	; (40bf0 <isr_tx+0xd8>)
   40bce:	f240 4341 	movw	r3, #1089	; 0x441
   40bd2:	f008 ff99 	bl	49b08 <printk>
   40bd6:	4040      	eors	r0, r0
   40bd8:	f380 8811 	msr	BASEPRI, r0
   40bdc:	f04f 0003 	mov.w	r0, #3
   40be0:	df02      	svc	2
   40be2:	e7ad      	b.n	40b40 <isr_tx+0x28>
   40be4:	00041381 	.word	0x00041381
   40be8:	00053788 	.word	0x00053788
   40bec:	000537dc 	.word	0x000537dc
   40bf0:	00052bbc 	.word	0x00052bbc
   40bf4:	000537d4 	.word	0x000537d4

00040bf8 <is_abort_cb>:
	if (next != curr) {
   40bf8:	4281      	cmp	r1, r0
{
   40bfa:	b508      	push	{r3, lr}
	if (next != curr) {
   40bfc:	d00e      	beq.n	40c1c <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   40bfe:	7a0b      	ldrb	r3, [r1, #8]
   40c00:	07db      	lsls	r3, r3, #31
   40c02:	d402      	bmi.n	40c0a <is_abort_cb+0x12>
			return -ECANCELED;
   40c04:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   40c08:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   40c0a:	4b12      	ldr	r3, [pc, #72]	; (40c54 <is_abort_cb+0x5c>)
   40c0c:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   40c0e:	f7ff ff39 	bl	40a84 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   40c12:	2800      	cmp	r0, #0
   40c14:	db0f      	blt.n	40c36 <is_abort_cb+0x3e>
{
   40c16:	f06f 000a 	mvn.w	r0, #10
}
   40c1a:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   40c1c:	7b0b      	ldrb	r3, [r1, #12]
   40c1e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   40c22:	690b      	ldr	r3, [r1, #16]
   40c24:	781b      	ldrb	r3, [r3, #0]
   40c26:	f003 030f 	and.w	r3, r3, #15
		return 0;
   40c2a:	2b01      	cmp	r3, #1
   40c2c:	bf14      	ite	ne
   40c2e:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   40c32:	2000      	moveq	r0, #0
}
   40c34:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   40c36:	4a08      	ldr	r2, [pc, #32]	; (40c58 <is_abort_cb+0x60>)
   40c38:	4908      	ldr	r1, [pc, #32]	; (40c5c <is_abort_cb+0x64>)
   40c3a:	4809      	ldr	r0, [pc, #36]	; (40c60 <is_abort_cb+0x68>)
   40c3c:	f240 33fa 	movw	r3, #1018	; 0x3fa
   40c40:	f008 ff62 	bl	49b08 <printk>
   40c44:	4040      	eors	r0, r0
   40c46:	f380 8811 	msr	BASEPRI, r0
   40c4a:	f04f 0003 	mov.w	r0, #3
   40c4e:	df02      	svc	2
   40c50:	e7e1      	b.n	40c16 <is_abort_cb+0x1e>
   40c52:	bf00      	nop
   40c54:	00041191 	.word	0x00041191
   40c58:	00053788 	.word	0x00053788
   40c5c:	00053738 	.word	0x00053738
   40c60:	00052bbc 	.word	0x00052bbc

00040c64 <abort_cb>:
{
   40c64:	b510      	push	{r4, lr}
	if (!prepare_param) {
   40c66:	b1d8      	cbz	r0, 40ca0 <abort_cb+0x3c>
	err = lll_hfclock_off();
   40c68:	460c      	mov	r4, r1
   40c6a:	f7ff ff23 	bl	40ab4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   40c6e:	2800      	cmp	r0, #0
   40c70:	db04      	blt.n	40c7c <abort_cb+0x18>
	lll_done(param);
   40c72:	4620      	mov	r0, r4
}
   40c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   40c78:	f7ff bc7c 	b.w	40574 <lll_done>
	LL_ASSERT(err >= 0);
   40c7c:	4a0c      	ldr	r2, [pc, #48]	; (40cb0 <abort_cb+0x4c>)
   40c7e:	490d      	ldr	r1, [pc, #52]	; (40cb4 <abort_cb+0x50>)
   40c80:	480d      	ldr	r0, [pc, #52]	; (40cb8 <abort_cb+0x54>)
   40c82:	f44f 6384 	mov.w	r3, #1056	; 0x420
   40c86:	f008 ff3f 	bl	49b08 <printk>
   40c8a:	4040      	eors	r0, r0
   40c8c:	f380 8811 	msr	BASEPRI, r0
   40c90:	f04f 0003 	mov.w	r0, #3
   40c94:	df02      	svc	2
	lll_done(param);
   40c96:	4620      	mov	r0, r4
}
   40c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   40c9c:	f7ff bc6a 	b.w	40574 <lll_done>
		radio_isr_set(isr_abort, param);
   40ca0:	4806      	ldr	r0, [pc, #24]	; (40cbc <abort_cb+0x58>)
   40ca2:	f001 ff85 	bl	42bb0 <radio_isr_set>
}
   40ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   40caa:	f002 b87b 	b.w	42da4 <radio_disable>
   40cae:	bf00      	nop
   40cb0:	00053788 	.word	0x00053788
   40cb4:	00053738 	.word	0x00053738
   40cb8:	00052bbc 	.word	0x00052bbc
   40cbc:	00040b01 	.word	0x00040b01

00040cc0 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   40cc0:	4b08      	ldr	r3, [pc, #32]	; (40ce4 <lll_adv_init+0x24>)
   40cc2:	2204      	movs	r2, #4
{
   40cc4:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   40cc6:	1898      	adds	r0, r3, r2
   40cc8:	2128      	movs	r1, #40	; 0x28
   40cca:	f7f3 f8e1 	bl	33e90 <mem_init>
	MFIFO_INIT(pdu_free);
   40cce:	4b06      	ldr	r3, [pc, #24]	; (40ce8 <lll_adv_init+0x28>)
   40cd0:	2400      	movs	r4, #0
   40cd2:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   40cd4:	2202      	movs	r2, #2
   40cd6:	4621      	mov	r1, r4
   40cd8:	4804      	ldr	r0, [pc, #16]	; (40cec <lll_adv_init+0x2c>)
   40cda:	f00f ff71 	bl	50bc0 <z_impl_k_sem_init>
}
   40cde:	4620      	mov	r0, r4
   40ce0:	bd10      	pop	{r4, pc}
   40ce2:	bf00      	nop
   40ce4:	20006158 	.word	0x20006158
   40ce8:	20000d94 	.word	0x20000d94
   40cec:	20006140 	.word	0x20006140

00040cf0 <lll_adv_reset>:
int lll_adv_reset(void)
   40cf0:	4b08      	ldr	r3, [pc, #32]	; (40d14 <lll_adv_reset+0x24>)
   40cf2:	2204      	movs	r2, #4
   40cf4:	b510      	push	{r4, lr}
   40cf6:	1898      	adds	r0, r3, r2
   40cf8:	2128      	movs	r1, #40	; 0x28
   40cfa:	f7f3 f8c9 	bl	33e90 <mem_init>
   40cfe:	4b06      	ldr	r3, [pc, #24]	; (40d18 <lll_adv_reset+0x28>)
   40d00:	2400      	movs	r4, #0
   40d02:	805c      	strh	r4, [r3, #2]
   40d04:	2202      	movs	r2, #2
   40d06:	4621      	mov	r1, r4
   40d08:	4804      	ldr	r0, [pc, #16]	; (40d1c <lll_adv_reset+0x2c>)
   40d0a:	f00f ff59 	bl	50bc0 <z_impl_k_sem_init>
   40d0e:	4620      	mov	r0, r4
   40d10:	bd10      	pop	{r4, pc}
   40d12:	bf00      	nop
   40d14:	20006158 	.word	0x20006158
   40d18:	20000d94 	.word	0x20000d94
   40d1c:	20006140 	.word	0x20006140

00040d20 <lll_adv_data_init>:
{
   40d20:	b510      	push	{r4, lr}
   40d22:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   40d24:	4805      	ldr	r0, [pc, #20]	; (40d3c <lll_adv_data_init+0x1c>)
   40d26:	f7f3 f8e3 	bl	33ef0 <mem_acquire>
	if (!p) {
   40d2a:	b120      	cbz	r0, 40d36 <lll_adv_data_init+0x16>
   40d2c:	4603      	mov	r3, r0
	p->len = 0U;
   40d2e:	2000      	movs	r0, #0
   40d30:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   40d32:	6063      	str	r3, [r4, #4]
}
   40d34:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   40d36:	f06f 000b 	mvn.w	r0, #11
}
   40d3a:	bd10      	pop	{r4, pc}
   40d3c:	20006158 	.word	0x20006158

00040d40 <lll_adv_data_reset>:
{
   40d40:	4603      	mov	r3, r0
	pdu->first = 0U;
   40d42:	2000      	movs	r0, #0
   40d44:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   40d46:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   40d48:	6098      	str	r0, [r3, #8]
}
   40d4a:	4770      	bx	lr

00040d4c <lll_adv_pdu_alloc_pdu_adv>:
{
   40d4c:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   40d4e:	4c35      	ldr	r4, [pc, #212]	; (40e24 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   40d50:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   40d52:	78e1      	ldrb	r1, [r4, #3]
   40d54:	7823      	ldrb	r3, [r4, #0]
   40d56:	4291      	cmp	r1, r2
   40d58:	d003      	beq.n	40d62 <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   40d5a:	fb02 4303 	mla	r3, r2, r3, r4
   40d5e:	685d      	ldr	r5, [r3, #4]
	if (p) {
   40d60:	b935      	cbnz	r5, 40d70 <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   40d62:	4831      	ldr	r0, [pc, #196]	; (40e28 <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   40d64:	f7f3 f8c4 	bl	33ef0 <mem_acquire>
	if (p) {
   40d68:	4605      	mov	r5, r0
   40d6a:	b1a0      	cbz	r0, 40d96 <lll_adv_pdu_alloc_pdu_adv+0x4a>
}
   40d6c:	4628      	mov	r0, r5
   40d6e:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   40d70:	482e      	ldr	r0, [pc, #184]	; (40e2c <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   40d72:	2200      	movs	r2, #0
   40d74:	2300      	movs	r3, #0
   40d76:	f007 fa05 	bl	48184 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   40d7a:	bb40      	cbnz	r0, 40dce <lll_adv_pdu_alloc_pdu_adv+0x82>
	uint8_t _first = *first; /* Copy read-index */
   40d7c:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   40d7e:	78e2      	ldrb	r2, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   40d80:	7861      	ldrb	r1, [r4, #1]
   40d82:	429a      	cmp	r2, r3
   40d84:	d0f2      	beq.n	40d6c <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   40d86:	3301      	adds	r3, #1
   40d88:	b2db      	uxtb	r3, r3
		_first = 0U;
   40d8a:	4299      	cmp	r1, r3
   40d8c:	bf08      	it	eq
   40d8e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   40d90:	70a3      	strb	r3, [r4, #2]
}
   40d92:	4628      	mov	r0, r5
   40d94:	bd38      	pop	{r3, r4, r5, pc}
   40d96:	4825      	ldr	r0, [pc, #148]	; (40e2c <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   40d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   40d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   40da0:	f007 f9f0 	bl	48184 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   40da4:	bb08      	cbnz	r0, 40dea <lll_adv_pdu_alloc_pdu_adv+0x9e>
	uint8_t _first = *first; /* Copy read-index */
   40da6:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   40da8:	78e1      	ldrb	r1, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   40daa:	7822      	ldrb	r2, [r4, #0]
   40dac:	7860      	ldrb	r0, [r4, #1]
   40dae:	4299      	cmp	r1, r3
   40db0:	d029      	beq.n	40e06 <lll_adv_pdu_alloc_pdu_adv+0xba>
	mem = *((void **)(fifo + _first * size));
   40db2:	fb13 f202 	smulbb	r2, r3, r2
   40db6:	491e      	ldr	r1, [pc, #120]	; (40e30 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
	_first += 1U;
   40db8:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   40dba:	588a      	ldr	r2, [r1, r2]
	_first += 1U;
   40dbc:	b2db      	uxtb	r3, r3
		_first = 0U;
   40dbe:	4298      	cmp	r0, r3
   40dc0:	bf08      	it	eq
   40dc2:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   40dc4:	70a3      	strb	r3, [r4, #2]
	LL_ASSERT(p);
   40dc6:	b1f2      	cbz	r2, 40e06 <lll_adv_pdu_alloc_pdu_adv+0xba>
   40dc8:	4615      	mov	r5, r2
}
   40dca:	4628      	mov	r0, r5
   40dcc:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!err);
   40dce:	4a19      	ldr	r2, [pc, #100]	; (40e34 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   40dd0:	4919      	ldr	r1, [pc, #100]	; (40e38 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   40dd2:	481a      	ldr	r0, [pc, #104]	; (40e3c <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   40dd4:	f240 1397 	movw	r3, #407	; 0x197
   40dd8:	f008 fe96 	bl	49b08 <printk>
   40ddc:	4040      	eors	r0, r0
   40dde:	f380 8811 	msr	BASEPRI, r0
   40de2:	f04f 0003 	mov.w	r0, #3
   40de6:	df02      	svc	2
   40de8:	e7c8      	b.n	40d7c <lll_adv_pdu_alloc_pdu_adv+0x30>
	LL_ASSERT(!err);
   40dea:	4a12      	ldr	r2, [pc, #72]	; (40e34 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   40dec:	4912      	ldr	r1, [pc, #72]	; (40e38 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   40dee:	4813      	ldr	r0, [pc, #76]	; (40e3c <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   40df0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   40df4:	f008 fe88 	bl	49b08 <printk>
   40df8:	4040      	eors	r0, r0
   40dfa:	f380 8811 	msr	BASEPRI, r0
   40dfe:	f04f 0003 	mov.w	r0, #3
   40e02:	df02      	svc	2
   40e04:	e7cf      	b.n	40da6 <lll_adv_pdu_alloc_pdu_adv+0x5a>
	LL_ASSERT(p);
   40e06:	4a0b      	ldr	r2, [pc, #44]	; (40e34 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   40e08:	490d      	ldr	r1, [pc, #52]	; (40e40 <lll_adv_pdu_alloc_pdu_adv+0xf4>)
   40e0a:	480c      	ldr	r0, [pc, #48]	; (40e3c <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   40e0c:	f240 13ad 	movw	r3, #429	; 0x1ad
   40e10:	f008 fe7a 	bl	49b08 <printk>
   40e14:	4040      	eors	r0, r0
   40e16:	f380 8811 	msr	BASEPRI, r0
   40e1a:	f04f 0003 	mov.w	r0, #3
   40e1e:	df02      	svc	2
   40e20:	e7a4      	b.n	40d6c <lll_adv_pdu_alloc_pdu_adv+0x20>
   40e22:	bf00      	nop
   40e24:	20000d94 	.word	0x20000d94
   40e28:	20006158 	.word	0x20006158
   40e2c:	20006140 	.word	0x20006140
   40e30:	20000d98 	.word	0x20000d98
   40e34:	00053788 	.word	0x00053788
   40e38:	00052d98 	.word	0x00052d98
   40e3c:	00052bbc 	.word	0x00052bbc
   40e40:	000537f0 	.word	0x000537f0

00040e44 <lll_adv_pdu_alloc>:
{
   40e44:	b510      	push	{r4, lr}
	first = pdu->first;
   40e46:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   40e48:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   40e4a:	429a      	cmp	r2, r3
   40e4c:	d014      	beq.n	40e78 <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   40e4e:	b2d4      	uxtb	r4, r2
   40e50:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   40e52:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   40e54:	4294      	cmp	r4, r2
   40e56:	d004      	beq.n	40e62 <lll_adv_pdu_alloc+0x1e>
			last++;
   40e58:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   40e5a:	7043      	strb	r3, [r0, #1]
			last++;
   40e5c:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   40e5e:	2b02      	cmp	r3, #2
   40e60:	d00e      	beq.n	40e80 <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   40e62:	461a      	mov	r2, r3
	*idx = last;
   40e64:	eb00 0482 	add.w	r4, r0, r2, lsl #2
   40e68:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   40e6a:	6860      	ldr	r0, [r4, #4]
	if (p) {
   40e6c:	b100      	cbz	r0, 40e70 <lll_adv_pdu_alloc+0x2c>
}
   40e6e:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   40e70:	f7ff ff6c 	bl	40d4c <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   40e74:	6060      	str	r0, [r4, #4]
}
   40e76:	bd10      	pop	{r4, pc}
		last++;
   40e78:	3301      	adds	r3, #1
   40e7a:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   40e7c:	2b02      	cmp	r3, #2
   40e7e:	d1f0      	bne.n	40e62 <lll_adv_pdu_alloc+0x1e>
{
   40e80:	2200      	movs	r2, #0
			last = 0U;
   40e82:	4613      	mov	r3, r2
   40e84:	e7ee      	b.n	40e64 <lll_adv_pdu_alloc+0x20>
   40e86:	bf00      	nop

00040e88 <lll_adv_pdu_latest_get>:
{
   40e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	first = pdu->first;
   40e8a:	7802      	ldrb	r2, [r0, #0]
	if (first != pdu->last) {
   40e8c:	7843      	ldrb	r3, [r0, #1]
   40e8e:	4293      	cmp	r3, r2
{
   40e90:	4604      	mov	r4, r0
	if (first != pdu->last) {
   40e92:	d02c      	beq.n	40eee <lll_adv_pdu_latest_get+0x66>
		pdu_idx = first;
   40e94:	b2d5      	uxtb	r5, r2
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   40e96:	4a18      	ldr	r2, [pc, #96]	; (40ef8 <lll_adv_pdu_latest_get+0x70>)
   40e98:	f892 e003 	ldrb.w	lr, [r2, #3]
   40e9c:	eb00 0785 	add.w	r7, r0, r5, lsl #2
	last = last + 1;
   40ea0:	f10e 0301 	add.w	r3, lr, #1
	if (last == count) {
   40ea4:	7850      	ldrb	r0, [r2, #1]
	last = last + 1;
   40ea6:	b2db      	uxtb	r3, r3
		last = 0U;
   40ea8:	4298      	cmp	r0, r3
   40eaa:	bf08      	it	eq
   40eac:	2300      	moveq	r3, #0
   40eae:	7890      	ldrb	r0, [r2, #2]
	if (last == first) {
   40eb0:	4298      	cmp	r0, r3
   40eb2:	460e      	mov	r6, r1
		p = pdu->pdu[pdu_idx];
   40eb4:	6879      	ldr	r1, [r7, #4]
   40eb6:	d00b      	beq.n	40ed0 <lll_adv_pdu_latest_get+0x48>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   40eb8:	4694      	mov	ip, r2
   40eba:	f81c 0b04 	ldrb.w	r0, [ip], #4
   40ebe:	fb10 f00e 	smulbb	r0, r0, lr
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   40ec2:	f84c 1000 	str.w	r1, [ip, r0]
	*last = idx; /* Commit: Update write index */
   40ec6:	70d3      	strb	r3, [r2, #3]
	z_impl_k_sem_give(sem);
   40ec8:	480c      	ldr	r0, [pc, #48]	; (40efc <lll_adv_pdu_latest_get+0x74>)
   40eca:	f007 f935 	bl	48138 <z_impl_k_sem_give>
			p = next;
   40ece:	2100      	movs	r1, #0
		first += 1U;
   40ed0:	1c6b      	adds	r3, r5, #1
   40ed2:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   40ed4:	2b02      	cmp	r3, #2
   40ed6:	bf0a      	itet	eq
   40ed8:	2200      	moveq	r2, #0
	return (void *)pdu->pdu[first];
   40eda:	461a      	movne	r2, r3
			first = 0U;
   40edc:	4613      	moveq	r3, r2
		pdu->pdu[pdu_idx] = p;
   40ede:	6079      	str	r1, [r7, #4]
		pdu->first = first;
   40ee0:	7023      	strb	r3, [r4, #0]
		*is_modified = 1U;
   40ee2:	2101      	movs	r1, #1
	return (void *)pdu->pdu[first];
   40ee4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
		*is_modified = 1U;
   40ee8:	7031      	strb	r1, [r6, #0]
}
   40eea:	6860      	ldr	r0, [r4, #4]
   40eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = pdu->pdu[pdu_idx];
   40eee:	461a      	mov	r2, r3
	return (void *)pdu->pdu[first];
   40ef0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
}
   40ef4:	6860      	ldr	r0, [r4, #4]
   40ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   40ef8:	20000d94 	.word	0x20000d94
   40efc:	20006140 	.word	0x20006140

00040f00 <chan_prepare.isra.0>:

static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   40f00:	b570      	push	{r4, r5, r6, lr}
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   40f02:	7a03      	ldrb	r3, [r0, #8]
   40f04:	f3c3 1302 	ubfx	r3, r3, #4, #3
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   40f08:	4604      	mov	r4, r0
   40f0a:	2b00      	cmp	r3, #0
   40f0c:	fa93 f0a3 	rbit	r0, r3
   40f10:	fab0 f080 	clz	r0, r0
   40f14:	bf08      	it	eq
   40f16:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   40f1a:	b082      	sub	sp, #8
   40f1c:	f100 0501 	add.w	r5, r0, #1
	LL_ASSERT(chan);
   40f20:	d045      	beq.n	40fae <chan_prepare.isra.0+0xae>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   40f22:	7a21      	ldrb	r1, [r4, #8]
   40f24:	1e5a      	subs	r2, r3, #1
   40f26:	4013      	ands	r3, r2
   40f28:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   40f2c:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   40f30:	7221      	strb	r1, [r4, #8]
	lll_chan_set(36 + chan);
   40f32:	f7ff fba1 	bl	40678 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   40f36:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   40f38:	f10d 0107 	add.w	r1, sp, #7
   40f3c:	f104 000c 	add.w	r0, r4, #12
   40f40:	f88d 3007 	strb.w	r3, [sp, #7]
   40f44:	f7ff ffa0 	bl	40e88 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   40f48:	4605      	mov	r5, r0
   40f4a:	2800      	cmp	r0, #0
   40f4c:	d040      	beq.n	40fd0 <chan_prepare.isra.0+0xd0>

	radio_pkt_tx_set(pdu);
   40f4e:	4628      	mov	r0, r5
   40f50:	f001 ff06 	bl	42d60 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   40f54:	782b      	ldrb	r3, [r5, #0]
   40f56:	f003 030f 	and.w	r3, r3, #15
   40f5a:	2b02      	cmp	r3, #2
   40f5c:	d01e      	beq.n	40f9c <chan_prepare.isra.0+0x9c>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   40f5e:	f10d 0107 	add.w	r1, sp, #7
   40f62:	f104 0018 	add.w	r0, r4, #24
   40f66:	f7ff ff8f 	bl	40e88 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   40f6a:	4606      	mov	r6, r0
   40f6c:	2800      	cmp	r0, #0
   40f6e:	d03d      	beq.n	40fec <chan_prepare.isra.0+0xec>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   40f70:	f89d 3007 	ldrb.w	r3, [sp, #7]
   40f74:	b963      	cbnz	r3, 40f90 <chan_prepare.isra.0+0x90>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   40f76:	4621      	mov	r1, r4
   40f78:	4823      	ldr	r0, [pc, #140]	; (41008 <chan_prepare.isra.0+0x108>)
   40f7a:	f001 fe19 	bl	42bb0 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   40f7e:	2096      	movs	r0, #150	; 0x96
   40f80:	f002 f898 	bl	430b4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   40f84:	2000      	movs	r0, #0
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   40f86:	b002      	add	sp, #8
   40f88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_switch_complete_and_rx(0);
   40f8c:	f001 bf66 	b.w	42e5c <radio_switch_complete_and_rx>
			memcpy(&scan_pdu->scan_rsp.addr[0],
   40f90:	2206      	movs	r2, #6
   40f92:	1ca9      	adds	r1, r5, #2
   40f94:	1cb0      	adds	r0, r6, #2
   40f96:	f00a fee6 	bl	4bd66 <memcpy>
   40f9a:	e7ec      	b.n	40f76 <chan_prepare.isra.0+0x76>
		radio_isr_set(isr_done, lll);
   40f9c:	481b      	ldr	r0, [pc, #108]	; (4100c <chan_prepare.isra.0+0x10c>)
   40f9e:	4621      	mov	r1, r4
   40fa0:	f001 fe06 	bl	42bb0 <radio_isr_set>
}
   40fa4:	b002      	add	sp, #8
   40fa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_switch_complete_and_disable();
   40faa:	f001 bfff 	b.w	42fac <radio_switch_complete_and_disable>
	LL_ASSERT(chan);
   40fae:	4a18      	ldr	r2, [pc, #96]	; (41010 <chan_prepare.isra.0+0x110>)
   40fb0:	4918      	ldr	r1, [pc, #96]	; (41014 <chan_prepare.isra.0+0x114>)
   40fb2:	4819      	ldr	r0, [pc, #100]	; (41018 <chan_prepare.isra.0+0x118>)
   40fb4:	f240 5337 	movw	r3, #1335	; 0x537
   40fb8:	f008 fda6 	bl	49b08 <printk>
   40fbc:	4040      	eors	r0, r0
   40fbe:	f380 8811 	msr	BASEPRI, r0
   40fc2:	f04f 0003 	mov.w	r0, #3
   40fc6:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   40fc8:	7a23      	ldrb	r3, [r4, #8]
   40fca:	f3c3 1302 	ubfx	r3, r3, #4, #3
   40fce:	e7a8      	b.n	40f22 <chan_prepare.isra.0+0x22>
	LL_ASSERT(pdu);
   40fd0:	4a0f      	ldr	r2, [pc, #60]	; (41010 <chan_prepare.isra.0+0x110>)
   40fd2:	4912      	ldr	r1, [pc, #72]	; (4101c <chan_prepare.isra.0+0x11c>)
   40fd4:	4810      	ldr	r0, [pc, #64]	; (41018 <chan_prepare.isra.0+0x118>)
   40fd6:	f44f 63a8 	mov.w	r3, #1344	; 0x540
   40fda:	f008 fd95 	bl	49b08 <printk>
   40fde:	4040      	eors	r0, r0
   40fe0:	f380 8811 	msr	BASEPRI, r0
   40fe4:	f04f 0003 	mov.w	r0, #3
   40fe8:	df02      	svc	2
   40fea:	e7b0      	b.n	40f4e <chan_prepare.isra.0+0x4e>
		LL_ASSERT(scan_pdu);
   40fec:	4a08      	ldr	r2, [pc, #32]	; (41010 <chan_prepare.isra.0+0x110>)
   40fee:	490c      	ldr	r1, [pc, #48]	; (41020 <chan_prepare.isra.0+0x120>)
   40ff0:	4809      	ldr	r0, [pc, #36]	; (41018 <chan_prepare.isra.0+0x118>)
   40ff2:	f240 534a 	movw	r3, #1354	; 0x54a
   40ff6:	f008 fd87 	bl	49b08 <printk>
   40ffa:	4040      	eors	r0, r0
   40ffc:	f380 8811 	msr	BASEPRI, r0
   41000:	f04f 0003 	mov.w	r0, #3
   41004:	df02      	svc	2
   41006:	e7b3      	b.n	40f70 <chan_prepare.isra.0+0x70>
   41008:	00040b19 	.word	0x00040b19
   4100c:	00041025 	.word	0x00041025
   41010:	00053788 	.word	0x00053788
   41014:	000537f4 	.word	0x000537f4
   41018:	00052bbc 	.word	0x00052bbc
   4101c:	000537fc 	.word	0x000537fc
   41020:	00053800 	.word	0x00053800

00041024 <isr_done>:
{
   41024:	b510      	push	{r4, lr}
   41026:	4604      	mov	r4, r0
	lll_isr_status_reset();
   41028:	f7ff fb7e 	bl	40728 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   4102c:	7a23      	ldrb	r3, [r4, #8]
   4102e:	f003 0271 	and.w	r2, r3, #113	; 0x71
   41032:	2a01      	cmp	r2, #1
   41034:	d105      	bne.n	41042 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   41036:	f3c3 0242 	ubfx	r2, r3, #1, #3
   4103a:	f362 1306 	bfi	r3, r2, #4, #3
   4103e:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   41040:	b2db      	uxtb	r3, r3
   41042:	f013 0f70 	tst.w	r3, #112	; 0x70
   41046:	d005      	beq.n	41054 <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   41048:	6863      	ldr	r3, [r4, #4]
   4104a:	b153      	cbz	r3, 41062 <isr_done+0x3e>
   4104c:	f893 3020 	ldrb.w	r3, [r3, #32]
   41050:	079b      	lsls	r3, r3, #30
   41052:	d506      	bpl.n	41062 <isr_done+0x3e>
	radio_filter_disable();
   41054:	f001 fffc 	bl	43050 <radio_filter_disable>
	lll_isr_cleanup(param);
   41058:	4620      	mov	r0, r4
}
   4105a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   4105e:	f7ff bb71 	b.w	40744 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   41062:	4620      	mov	r0, r4
   41064:	f7ff ff4c 	bl	40f00 <chan_prepare.isra.0>
		radio_tx_enable();
   41068:	f001 fe96 	bl	42d98 <radio_tx_enable>
}
   4106c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   41070:	f002 b92c 	b.w	432cc <radio_tmr_end_capture>

00041074 <prepare_cb>:
{
   41074:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   41076:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   41078:	6863      	ldr	r3, [r4, #4]
{
   4107a:	b083      	sub	sp, #12
   4107c:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   4107e:	2b00      	cmp	r3, #0
   41080:	d16d      	bne.n	4115e <prepare_cb+0xea>
	radio_reset();
   41082:	f001 fdd7 	bl	42c34 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   41086:	2000      	movs	r0, #0
   41088:	f001 fe08 	bl	42c9c <radio_tx_power_set>
	radio_phy_set(0, 0);
   4108c:	2100      	movs	r1, #0
   4108e:	4608      	mov	r0, r1
   41090:	f001 fdf4 	bl	42c7c <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   41094:	2200      	movs	r2, #0
   41096:	2125      	movs	r1, #37	; 0x25
   41098:	2008      	movs	r0, #8
   4109a:	f001 fe35 	bl	42d08 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   4109e:	4b35      	ldr	r3, [pc, #212]	; (41174 <prepare_cb+0x100>)
   410a0:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   410a2:	a801      	add	r0, sp, #4
   410a4:	f001 fe18 	bl	42cd8 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   410a8:	4933      	ldr	r1, [pc, #204]	; (41178 <prepare_cb+0x104>)
   410aa:	f240 605b 	movw	r0, #1627	; 0x65b
   410ae:	f001 feb7 	bl	42e20 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   410b2:	7a23      	ldrb	r3, [r4, #8]
   410b4:	f3c3 0242 	ubfx	r2, r3, #1, #3
   410b8:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   410bc:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   410be:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   410c0:	f7ff ff1e 	bl	40f00 <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   410c4:	f7fe ff54 	bl	3ff70 <ull_filter_lll_rl_enabled>
   410c8:	bb98      	cbnz	r0, 41132 <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   410ca:	7a63      	ldrb	r3, [r4, #9]
   410cc:	079b      	lsls	r3, r3, #30
   410ce:	d127      	bne.n	41120 <prepare_cb+0xac>
	ull = HDR_LLL2ULL(lll);
   410d0:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   410d2:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   410d4:	4638      	mov	r0, r7
   410d6:	f7ff fab1 	bl	4063c <lll_event_offset_get>
   410da:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   410dc:	686a      	ldr	r2, [r5, #4]
   410de:	f106 0109 	add.w	r1, r6, #9
   410e2:	2001      	movs	r0, #1
   410e4:	f001 fff2 	bl	430cc <radio_tmr_start>
	radio_tmr_end_capture();
   410e8:	f002 f8f0 	bl	432cc <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   410ec:	4620      	mov	r0, r4
   410ee:	f7f7 fe8f 	bl	38e10 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   410f2:	1c81      	adds	r1, r0, #2
   410f4:	4632      	mov	r2, r6
   410f6:	b2c9      	uxtb	r1, r1
   410f8:	4638      	mov	r0, r7
   410fa:	f7ff faad 	bl	40658 <lll_preempt_calc>
   410fe:	b930      	cbnz	r0, 4110e <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   41100:	4620      	mov	r0, r4
   41102:	f7ff fa35 	bl	40570 <lll_prepare_done>
		LL_ASSERT(!ret);
   41106:	b9d0      	cbnz	r0, 4113e <prepare_cb+0xca>
}
   41108:	2000      	movs	r0, #0
   4110a:	b003      	add	sp, #12
   4110c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   4110e:	481b      	ldr	r0, [pc, #108]	; (4117c <prepare_cb+0x108>)
   41110:	4621      	mov	r1, r4
   41112:	f001 fd4d 	bl	42bb0 <radio_isr_set>
		radio_disable();
   41116:	f001 fe45 	bl	42da4 <radio_disable>
}
   4111a:	2000      	movs	r0, #0
   4111c:	b003      	add	sp, #12
   4111e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   41120:	2001      	movs	r0, #1
   41122:	f7fe fa99 	bl	3f658 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   41126:	7841      	ldrb	r1, [r0, #1]
   41128:	1c82      	adds	r2, r0, #2
   4112a:	7800      	ldrb	r0, [r0, #0]
   4112c:	f001 ff70 	bl	43010 <radio_filter_configure>
   41130:	e7ce      	b.n	410d0 <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   41132:	7a60      	ldrb	r0, [r4, #9]
   41134:	f010 0003 	ands.w	r0, r0, #3
   41138:	bf18      	it	ne
   4113a:	2001      	movne	r0, #1
   4113c:	e7f1      	b.n	41122 <prepare_cb+0xae>
		LL_ASSERT(!ret);
   4113e:	4a10      	ldr	r2, [pc, #64]	; (41180 <prepare_cb+0x10c>)
   41140:	4910      	ldr	r1, [pc, #64]	; (41184 <prepare_cb+0x110>)
   41142:	4811      	ldr	r0, [pc, #68]	; (41188 <prepare_cb+0x114>)
   41144:	f240 33d1 	movw	r3, #977	; 0x3d1
   41148:	f008 fcde 	bl	49b08 <printk>
   4114c:	4040      	eors	r0, r0
   4114e:	f380 8811 	msr	BASEPRI, r0
   41152:	f04f 0003 	mov.w	r0, #3
   41156:	df02      	svc	2
}
   41158:	2000      	movs	r0, #0
   4115a:	b003      	add	sp, #12
   4115c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   4115e:	f893 3020 	ldrb.w	r3, [r3, #32]
   41162:	079a      	lsls	r2, r3, #30
   41164:	d08d      	beq.n	41082 <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   41166:	4809      	ldr	r0, [pc, #36]	; (4118c <prepare_cb+0x118>)
   41168:	4621      	mov	r1, r4
   4116a:	f001 fd21 	bl	42bb0 <radio_isr_set>
		radio_disable();
   4116e:	f001 fe19 	bl	42da4 <radio_disable>
		return 0;
   41172:	e7c9      	b.n	41108 <prepare_cb+0x94>
   41174:	8e89bed6 	.word	0x8e89bed6
   41178:	00555555 	.word	0x00555555
   4117c:	00040b01 	.word	0x00040b01
   41180:	00053788 	.word	0x00053788
   41184:	00052e98 	.word	0x00052e98
   41188:	00052bbc 	.word	0x00052bbc
   4118c:	000407d5 	.word	0x000407d5

00041190 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   41190:	68c3      	ldr	r3, [r0, #12]
{
   41192:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   41194:	681e      	ldr	r6, [r3, #0]
{
   41196:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   41198:	f7f4 faf6 	bl	35788 <ticker_ticks_now_get>
   4119c:	4605      	mov	r5, r0
   4119e:	4630      	mov	r0, r6
   411a0:	f7ff fa4c 	bl	4063c <lll_event_offset_get>
	p->remainder = 0;
   411a4:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   411a6:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   411a8:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   411ac:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   411ae:	4620      	mov	r0, r4
}
   411b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   411b4:	f7ff bf5e 	b.w	41074 <prepare_cb>

000411b8 <lll_adv_prepare>:
{
   411b8:	b510      	push	{r4, lr}
   411ba:	b082      	sub	sp, #8
   411bc:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   411be:	f7ff fc61 	bl	40a84 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   411c2:	2800      	cmp	r0, #0
   411c4:	db1a      	blt.n	411fc <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   411c6:	4a14      	ldr	r2, [pc, #80]	; (41218 <lll_adv_prepare+0x60>)
   411c8:	4914      	ldr	r1, [pc, #80]	; (4121c <lll_adv_prepare+0x64>)
   411ca:	4815      	ldr	r0, [pc, #84]	; (41220 <lll_adv_prepare+0x68>)
   411cc:	9400      	str	r4, [sp, #0]
   411ce:	2300      	movs	r3, #0
   411d0:	f7f7 f9c8 	bl	38564 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   411d4:	b108      	cbz	r0, 411da <lll_adv_prepare+0x22>
   411d6:	3077      	adds	r0, #119	; 0x77
   411d8:	d101      	bne.n	411de <lll_adv_prepare+0x26>
}
   411da:	b002      	add	sp, #8
   411dc:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   411de:	4a11      	ldr	r2, [pc, #68]	; (41224 <lll_adv_prepare+0x6c>)
   411e0:	4911      	ldr	r1, [pc, #68]	; (41228 <lll_adv_prepare+0x70>)
   411e2:	4812      	ldr	r0, [pc, #72]	; (4122c <lll_adv_prepare+0x74>)
   411e4:	f240 239d 	movw	r3, #669	; 0x29d
   411e8:	f008 fc8e 	bl	49b08 <printk>
   411ec:	4040      	eors	r0, r0
   411ee:	f380 8811 	msr	BASEPRI, r0
   411f2:	f04f 0003 	mov.w	r0, #3
   411f6:	df02      	svc	2
}
   411f8:	b002      	add	sp, #8
   411fa:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   411fc:	4a09      	ldr	r2, [pc, #36]	; (41224 <lll_adv_prepare+0x6c>)
   411fe:	490c      	ldr	r1, [pc, #48]	; (41230 <lll_adv_prepare+0x78>)
   41200:	480a      	ldr	r0, [pc, #40]	; (4122c <lll_adv_prepare+0x74>)
   41202:	f240 239a 	movw	r3, #666	; 0x29a
   41206:	f008 fc7f 	bl	49b08 <printk>
   4120a:	4040      	eors	r0, r0
   4120c:	f380 8811 	msr	BASEPRI, r0
   41210:	f04f 0003 	mov.w	r0, #3
   41214:	df02      	svc	2
   41216:	e7d6      	b.n	411c6 <lll_adv_prepare+0xe>
   41218:	00041075 	.word	0x00041075
   4121c:	00040c65 	.word	0x00040c65
   41220:	00040bf9 	.word	0x00040bf9
   41224:	00053788 	.word	0x00053788
   41228:	0005380c 	.word	0x0005380c
   4122c:	00052bbc 	.word	0x00052bbc
   41230:	00053738 	.word	0x00053738

00041234 <lll_adv_scan_req_check>:
{
   41234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   41238:	f890 c009 	ldrb.w	ip, [r0, #9]
{
   4123c:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   41240:	f01c 0f01 	tst.w	ip, #1
{
   41244:	460f      	mov	r7, r1
   41246:	4616      	mov	r6, r2
   41248:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   4124a:	d009      	beq.n	41260 <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   4124c:	f1b8 0f00 	cmp.w	r8, #0
   41250:	d016      	beq.n	41280 <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   41252:	783b      	ldrb	r3, [r7, #0]
   41254:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   41258:	d019      	beq.n	4128e <lll_adv_scan_req_check+0x5a>
{
   4125a:	2000      	movs	r0, #0
}
   4125c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   41260:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   41262:	f811 0b02 	ldrb.w	r0, [r1], #2
   41266:	9a07      	ldr	r2, [sp, #28]
   41268:	f3c0 1080 	ubfx	r0, r0, #6, #1
   4126c:	f7fe fe24 	bl	3feb8 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   41270:	2800      	cmp	r0, #0
   41272:	d1ee      	bne.n	41252 <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   41274:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   41276:	07db      	lsls	r3, r3, #31
   41278:	d5ef      	bpl.n	4125a <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   4127a:	f1b8 0f00 	cmp.w	r8, #0
   4127e:	d1e8      	bne.n	41252 <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   41280:	9b07      	ldr	r3, [sp, #28]
   41282:	7818      	ldrb	r0, [r3, #0]
   41284:	f7fe fdb4 	bl	3fdf0 <ull_filter_lll_irk_in_fal>
   41288:	2800      	cmp	r0, #0
   4128a:	d1e2      	bne.n	41252 <lll_adv_scan_req_check+0x1e>
   4128c:	e7e5      	b.n	4125a <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   4128e:	2206      	movs	r2, #6
   41290:	f107 0108 	add.w	r1, r7, #8
   41294:	4628      	mov	r0, r5
   41296:	f00a fd56 	bl	4bd46 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   4129a:	fab0 f080 	clz	r0, r0
   4129e:	0940      	lsrs	r0, r0, #5
}
   412a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000412a4 <lll_adv_connect_ind_check>:
{
   412a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   412a8:	461f      	mov	r7, r3
	if (tgt_addr) {
   412aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   412ac:	f89d 9020 	ldrb.w	r9, [sp, #32]
   412b0:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   412b4:	4605      	mov	r5, r0
   412b6:	460c      	mov	r4, r1
   412b8:	4690      	mov	r8, r2
	if (tgt_addr) {
   412ba:	b96b      	cbnz	r3, 412d8 <lll_adv_connect_ind_check+0x34>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   412bc:	7a41      	ldrb	r1, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   412be:	f001 0103 	and.w	r1, r1, #3
   412c2:	2901      	cmp	r1, #1
   412c4:	d92b      	bls.n	4131e <lll_adv_connect_ind_check+0x7a>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   412c6:	2e00      	cmp	r6, #0
   412c8:	d03a      	beq.n	41340 <lll_adv_connect_ind_check+0x9c>
	return (tx_addr == sr->rx_addr) &&
   412ca:	7823      	ldrb	r3, [r4, #0]
   412cc:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   412d0:	d03d      	beq.n	4134e <lll_adv_connect_ind_check+0xaa>
{
   412d2:	2000      	movs	r0, #0
}
   412d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						      ci->connect_ind.init_addr,
   412d8:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   412da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   412dc:	f81a 0b02 	ldrb.w	r0, [sl], #2
   412e0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   412e4:	4651      	mov	r1, sl
   412e6:	f7fe fde7 	bl	3feb8 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   412ea:	2800      	cmp	r0, #0
   412ec:	d0f1      	beq.n	412d2 <lll_adv_connect_ind_check+0x2e>
	return (tx_addr == sr->rx_addr) &&
   412ee:	7823      	ldrb	r3, [r4, #0]
   412f0:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   412f4:	d1ed      	bne.n	412d2 <lll_adv_connect_ind_check+0x2e>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   412f6:	4638      	mov	r0, r7
   412f8:	2206      	movs	r2, #6
   412fa:	f104 0108 	add.w	r1, r4, #8
   412fe:	f00a fd22 	bl	4bd46 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   41302:	2800      	cmp	r0, #0
   41304:	d1e5      	bne.n	412d2 <lll_adv_connect_ind_check+0x2e>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   41306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   41308:	7818      	ldrb	r0, [r3, #0]
static inline bool isr_rx_ci_tgta_check(struct lll_adv *lll,
					uint8_t rx_addr, uint8_t *tgt_addr,
					struct pdu_adv *ci, uint8_t rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   4130a:	28ff      	cmp	r0, #255	; 0xff
   4130c:	d029      	beq.n	41362 <lll_adv_connect_ind_check+0xbe>
   4130e:	7aab      	ldrb	r3, [r5, #10]
   41310:	2bff      	cmp	r3, #255	; 0xff
   41312:	d026      	beq.n	41362 <lll_adv_connect_ind_check+0xbe>
		return rl_idx == lll->rl_idx;
   41314:	1ac0      	subs	r0, r0, r3
   41316:	fab0 f080 	clz	r0, r0
   4131a:	0940      	lsrs	r0, r0, #5
   4131c:	e7da      	b.n	412d4 <lll_adv_connect_ind_check+0x30>
						ci->connect_ind.init_addr,
   4131e:	4621      	mov	r1, r4
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   41320:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   41322:	f811 0b02 	ldrb.w	r0, [r1], #2
   41326:	f3c0 1080 	ubfx	r0, r0, #6, #1
   4132a:	f7fe fdc5 	bl	3feb8 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   4132e:	2800      	cmp	r0, #0
   41330:	d1cb      	bne.n	412ca <lll_adv_connect_ind_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   41332:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   41334:	f003 0303 	and.w	r3, r3, #3
   41338:	2b01      	cmp	r3, #1
   4133a:	d9ca      	bls.n	412d2 <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   4133c:	2e00      	cmp	r6, #0
   4133e:	d1c4      	bne.n	412ca <lll_adv_connect_ind_check+0x26>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   41340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   41342:	7818      	ldrb	r0, [r3, #0]
   41344:	f7fe fd54 	bl	3fdf0 <ull_filter_lll_irk_in_fal>
   41348:	2800      	cmp	r0, #0
   4134a:	d1be      	bne.n	412ca <lll_adv_connect_ind_check+0x26>
   4134c:	e7c1      	b.n	412d2 <lll_adv_connect_ind_check+0x2e>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   4134e:	2206      	movs	r2, #6
   41350:	f104 0108 	add.w	r1, r4, #8
   41354:	4638      	mov	r0, r7
   41356:	f00a fcf6 	bl	4bd46 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   4135a:	fab0 f080 	clz	r0, r0
   4135e:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   41360:	e7b8      	b.n	412d4 <lll_adv_connect_ind_check+0x30>
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	return (rx_addr == ci->tx_addr) &&
   41362:	7823      	ldrb	r3, [r4, #0]
   41364:	f3c3 1380 	ubfx	r3, r3, #6, #1
   41368:	454b      	cmp	r3, r9
   4136a:	d1b2      	bne.n	412d2 <lll_adv_connect_ind_check+0x2e>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   4136c:	9809      	ldr	r0, [sp, #36]	; 0x24
   4136e:	2206      	movs	r2, #6
   41370:	4651      	mov	r1, sl
   41372:	f00a fce8 	bl	4bd46 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   41376:	fab0 f080 	clz	r0, r0
   4137a:	0940      	lsrs	r0, r0, #5
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   4137c:	e7aa      	b.n	412d4 <lll_adv_connect_ind_check+0x30>
   4137e:	bf00      	nop

00041380 <isr_rx>:
{
   41380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   41384:	b08b      	sub	sp, #44	; 0x2c
   41386:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   41388:	f001 fd36 	bl	42df8 <radio_is_done>
	if (trx_done) {
   4138c:	b2c0      	uxtb	r0, r0
   4138e:	b950      	cbnz	r0, 413a6 <isr_rx+0x26>
	lll_isr_status_reset();
   41390:	f7ff f9ca 	bl	40728 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   41394:	487c      	ldr	r0, [pc, #496]	; (41588 <isr_rx+0x208>)
   41396:	4621      	mov	r1, r4
   41398:	f001 fc0a 	bl	42bb0 <radio_isr_set>
}
   4139c:	b00b      	add	sp, #44	; 0x2c
   4139e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   413a2:	f001 bcff 	b.w	42da4 <radio_disable>
		crc_ok = radio_crc_is_valid();
   413a6:	f001 fd47 	bl	42e38 <radio_crc_is_valid>
   413aa:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   413ac:	f001 fe62 	bl	43074 <radio_filter_has_match>
   413b0:	4681      	mov	r9, r0
		devmatch_id = radio_filter_match_get();
   413b2:	f001 fe69 	bl	43088 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   413b6:	f002 f87f 	bl	434b8 <radio_ar_has_match>
   413ba:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   413bc:	f002 f860 	bl	43480 <radio_ar_match_get>
	if (crc_ok) {
   413c0:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   413c2:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   413c4:	f001 fe1a 	bl	42ffc <radio_rssi_is_ready>
	lll_isr_status_reset();
   413c8:	f7ff f9ae 	bl	40728 <lll_isr_status_reset>
	if (crc_ok) {
   413cc:	2d00      	cmp	r5, #0
   413ce:	d0e1      	beq.n	41394 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   413d0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   413d4:	d17a      	bne.n	414cc <isr_rx+0x14c>
   413d6:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   413d8:	2001      	movs	r0, #1
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   413da:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	node_rx = ull_pdu_rx_alloc_peek(1);
   413de:	f7f6 fd83 	bl	37ee8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   413e2:	4605      	mov	r5, r0
   413e4:	2800      	cmp	r0, #0
   413e6:	f000 80a2 	beq.w	4152e <isr_rx+0x1ae>
   413ea:	7b23      	ldrb	r3, [r4, #12]
   413ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   413f0:	f105 011c 	add.w	r1, r5, #28
   413f4:	691f      	ldr	r7, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   413f6:	463b      	mov	r3, r7
		devmatch_ok = radio_filter_has_match();
   413f8:	fa5f f989 	uxtb.w	r9, r9
	tx_addr = pdu_adv->tx_addr;
   413fc:	f813 0b02 	ldrb.w	r0, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   41400:	f000 0c0f 	and.w	ip, r0, #15
   41404:	f1bc 0f01 	cmp.w	ip, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   41408:	bf08      	it	eq
   4140a:	f107 0808 	addeq.w	r8, r7, #8
	tx_addr = pdu_adv->tx_addr;
   4140e:	f3c0 1280 	ubfx	r2, r0, #6, #1
	rx_addr = pdu_adv->rx_addr;
   41412:	ea4f 17d0 	mov.w	r7, r0, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   41416:	7f28      	ldrb	r0, [r5, #28]
   41418:	f000 000f 	and.w	r0, r0, #15
		tgt_addr = NULL;
   4141c:	bf18      	it	ne
   4141e:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   41422:	2803      	cmp	r0, #3
   41424:	d05a      	beq.n	414dc <isr_rx+0x15c>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   41426:	2805      	cmp	r0, #5
   41428:	d1b4      	bne.n	41394 <isr_rx+0x14>
   4142a:	7f68      	ldrb	r0, [r5, #29]
   4142c:	2822      	cmp	r0, #34	; 0x22
   4142e:	d1b1      	bne.n	41394 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   41430:	6860      	ldr	r0, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   41432:	2800      	cmp	r0, #0
   41434:	d0ae      	beq.n	41394 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   41436:	f890 0020 	ldrb.w	r0, [r0, #32]
   4143a:	0780      	lsls	r0, r0, #30
   4143c:	d4aa      	bmi.n	41394 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   4143e:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   41442:	9003      	str	r0, [sp, #12]
   41444:	e9cd 8901 	strd	r8, r9, [sp, #4]
   41448:	9700      	str	r7, [sp, #0]
   4144a:	4620      	mov	r0, r4
   4144c:	f7ff ff2a 	bl	412a4 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   41450:	2800      	cmp	r0, #0
   41452:	d09f      	beq.n	41394 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   41454:	2004      	movs	r0, #4
   41456:	f7f6 fd47 	bl	37ee8 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   4145a:	2800      	cmp	r0, #0
   4145c:	d09a      	beq.n	41394 <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   4145e:	484b      	ldr	r0, [pc, #300]	; (4158c <isr_rx+0x20c>)
   41460:	4621      	mov	r1, r4
   41462:	f001 fba5 	bl	42bb0 <radio_isr_set>
		radio_disable();
   41466:	f001 fc9d 	bl	42da4 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   4146a:	f001 fcbb 	bl	42de4 <radio_is_ready>
   4146e:	2800      	cmp	r0, #0
   41470:	d14f      	bne.n	41512 <isr_rx+0x192>
		lll->conn->periph.initiated = 1;
   41472:	6862      	ldr	r2, [r4, #4]
   41474:	f892 3020 	ldrb.w	r3, [r2, #32]
   41478:	f043 0301 	orr.w	r3, r3, #1
   4147c:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   41480:	f7f6 fd52 	bl	37f28 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   41484:	2216      	movs	r2, #22
		rx->hdr.handle = 0xffff;
   41486:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   4148a:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   4148c:	80c3      	strh	r3, [r0, #6]
		ftr->param = lll;
   4148e:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   41490:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   41492:	f001 fecf 	bl	43234 <radio_tmr_start_get>
   41496:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   41498:	f001 ff20 	bl	432dc <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   4149c:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   4149e:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   414a0:	4608      	mov	r0, r1
   414a2:	f001 fc6d 	bl	42d80 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   414a6:	1a24      	subs	r4, r4, r0
   414a8:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   414aa:	b1ae      	cbz	r6, 414d8 <isr_rx+0x158>
   414ac:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   414b0:	766b      	strb	r3, [r5, #25]
			ftr->extra = ull_pdu_rx_alloc();
   414b2:	f7f6 fd39 	bl	37f28 <ull_pdu_rx_alloc>
   414b6:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   414b8:	4629      	mov	r1, r5
   414ba:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   414bc:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   414be:	f7f6 fd49 	bl	37f54 <ull_rx_put>
		ull_rx_sched();
   414c2:	f7f6 fd57 	bl	37f74 <ull_rx_sched>
}
   414c6:	b00b      	add	sp, #44	; 0x2c
   414c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   414cc:	fa5f f088 	uxtb.w	r0, r8
   414d0:	f7fe fc3c 	bl	3fd4c <ull_filter_lll_rl_irk_idx>
   414d4:	4603      	mov	r3, r0
   414d6:	e77f      	b.n	413d8 <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   414d8:	23ff      	movs	r3, #255	; 0xff
   414da:	e7e9      	b.n	414b0 <isr_rx+0x130>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   414dc:	7f68      	ldrb	r0, [r5, #29]
   414de:	280c      	cmp	r0, #12
   414e0:	f47f af58 	bne.w	41394 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   414e4:	f1b8 0f00 	cmp.w	r8, #0
   414e8:	f47f af54 	bne.w	41394 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   414ec:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   414f0:	9001      	str	r0, [sp, #4]
   414f2:	f8cd 9000 	str.w	r9, [sp]
   414f6:	4620      	mov	r0, r4
   414f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   414fc:	9105      	str	r1, [sp, #20]
   414fe:	f7ff fe99 	bl	41234 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   41502:	bb10      	cbnz	r0, 4154a <isr_rx+0x1ca>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   41504:	7f28      	ldrb	r0, [r5, #28]
   41506:	9b07      	ldr	r3, [sp, #28]
   41508:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   4150c:	f000 000f 	and.w	r0, r0, #15
   41510:	e789      	b.n	41426 <isr_rx+0xa6>
		LL_ASSERT(!radio_is_ready());
   41512:	4a1f      	ldr	r2, [pc, #124]	; (41590 <isr_rx+0x210>)
   41514:	491f      	ldr	r1, [pc, #124]	; (41594 <isr_rx+0x214>)
   41516:	4820      	ldr	r0, [pc, #128]	; (41598 <isr_rx+0x218>)
   41518:	f240 53da 	movw	r3, #1498	; 0x5da
   4151c:	f008 faf4 	bl	49b08 <printk>
   41520:	4040      	eors	r0, r0
   41522:	f380 8811 	msr	BASEPRI, r0
   41526:	f04f 0003 	mov.w	r0, #3
   4152a:	df02      	svc	2
   4152c:	e7a1      	b.n	41472 <isr_rx+0xf2>
	LL_ASSERT(node_rx);
   4152e:	4a18      	ldr	r2, [pc, #96]	; (41590 <isr_rx+0x210>)
   41530:	491a      	ldr	r1, [pc, #104]	; (4159c <isr_rx+0x21c>)
   41532:	4819      	ldr	r0, [pc, #100]	; (41598 <isr_rx+0x218>)
   41534:	f240 537a 	movw	r3, #1402	; 0x57a
   41538:	f008 fae6 	bl	49b08 <printk>
   4153c:	4040      	eors	r0, r0
   4153e:	f380 8811 	msr	BASEPRI, r0
   41542:	f04f 0003 	mov.w	r0, #3
   41546:	df02      	svc	2
   41548:	e74f      	b.n	413ea <isr_rx+0x6a>
		radio_isr_set(isr_done, lll);
   4154a:	480f      	ldr	r0, [pc, #60]	; (41588 <isr_rx+0x208>)
   4154c:	4621      	mov	r1, r4
   4154e:	f001 fb2f 	bl	42bb0 <radio_isr_set>
		radio_switch_complete_and_disable();
   41552:	f001 fd2b 	bl	42fac <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   41556:	7e23      	ldrb	r3, [r4, #24]
   41558:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   4155c:	69d8      	ldr	r0, [r3, #28]
   4155e:	f001 fbff 	bl	42d60 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   41562:	f001 fc3f 	bl	42de4 <radio_is_ready>
   41566:	2800      	cmp	r0, #0
   41568:	d0ad      	beq.n	414c6 <isr_rx+0x146>
   4156a:	4a09      	ldr	r2, [pc, #36]	; (41590 <isr_rx+0x210>)
   4156c:	4909      	ldr	r1, [pc, #36]	; (41594 <isr_rx+0x214>)
   4156e:	480a      	ldr	r0, [pc, #40]	; (41598 <isr_rx+0x218>)
   41570:	f240 5393 	movw	r3, #1427	; 0x593
   41574:	f008 fac8 	bl	49b08 <printk>
   41578:	4040      	eors	r0, r0
   4157a:	f380 8811 	msr	BASEPRI, r0
   4157e:	f04f 0003 	mov.w	r0, #3
   41582:	df02      	svc	2
		if (!err) {
   41584:	e79f      	b.n	414c6 <isr_rx+0x146>
   41586:	bf00      	nop
   41588:	00041025 	.word	0x00041025
   4158c:	00040b01 	.word	0x00040b01
   41590:	00053788 	.word	0x00053788
   41594:	000537dc 	.word	0x000537dc
   41598:	00052bbc 	.word	0x00052bbc
   4159c:	000537d4 	.word	0x000537d4

000415a0 <common_prepare_cb>:
{
   415a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	lll = p->param;
   415a4:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->is_stop ||
   415a6:	f994 3016 	ldrsb.w	r3, [r4, #22]
   415aa:	2b00      	cmp	r3, #0
{
   415ac:	b08c      	sub	sp, #48	; 0x30
	if (unlikely(lll->is_stop ||
   415ae:	f2c0 810e 	blt.w	417ce <common_prepare_cb+0x22e>
   415b2:	6863      	ldr	r3, [r4, #4]
   415b4:	4605      	mov	r5, r0
   415b6:	460f      	mov	r7, r1
   415b8:	2b00      	cmp	r3, #0
   415ba:	f040 80fd 	bne.w	417b8 <common_prepare_cb+0x218>
	lll->state = 0U;
   415be:	7da3      	ldrb	r3, [r4, #22]
   415c0:	f36f 0300 	bfc	r3, #0, #1
   415c4:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   415c6:	f001 fb35 	bl	42c34 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   415ca:	2000      	movs	r0, #0
   415cc:	f001 fb66 	bl	42c9c <radio_tx_power_set>
	radio_phy_set(0, 0);
   415d0:	2100      	movs	r1, #0
   415d2:	4608      	mov	r0, r1
   415d4:	f001 fb52 	bl	42c7c <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   415d8:	2200      	movs	r2, #0
   415da:	2125      	movs	r1, #37	; 0x25
   415dc:	2008      	movs	r0, #8
   415de:	f001 fb93 	bl	42d08 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   415e2:	2001      	movs	r0, #1
   415e4:	f7f6 fc80 	bl	37ee8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   415e8:	4606      	mov	r6, r0
   415ea:	2800      	cmp	r0, #0
   415ec:	f000 80d6 	beq.w	4179c <common_prepare_cb+0x1fc>
	radio_pkt_rx_set(node_rx->pdu);
   415f0:	f106 001c 	add.w	r0, r6, #28
   415f4:	f001 fbae 	bl	42d54 <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   415f8:	4b7a      	ldr	r3, [pc, #488]	; (417e4 <common_prepare_cb+0x244>)
   415fa:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   415fc:	a80b      	add	r0, sp, #44	; 0x2c
   415fe:	f001 fb6b 	bl	42cd8 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   41602:	4979      	ldr	r1, [pc, #484]	; (417e8 <common_prepare_cb+0x248>)
   41604:	f240 605b 	movw	r0, #1627	; 0x65b
   41608:	f001 fc0a 	bl	42e20 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   4160c:	7da0      	ldrb	r0, [r4, #22]
   4160e:	f3c0 0041 	ubfx	r0, r0, #1, #2
   41612:	3025      	adds	r0, #37	; 0x25
   41614:	f7ff f830 	bl	40678 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   41618:	4874      	ldr	r0, [pc, #464]	; (417ec <common_prepare_cb+0x24c>)
   4161a:	4621      	mov	r1, r4
   4161c:	f001 fac8 	bl	42bb0 <radio_isr_set>
	} else if (lll->type ||
   41620:	7da3      	ldrb	r3, [r4, #22]
   41622:	069b      	lsls	r3, r3, #26
   41624:	d403      	bmi.n	4162e <common_prepare_cb+0x8e>
		   lll->conn) {
   41626:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   41628:	2b00      	cmp	r3, #0
   4162a:	f000 8091 	beq.w	41750 <common_prepare_cb+0x1b0>
		radio_tmr_tifs_set(EVENT_IFS_US);
   4162e:	2096      	movs	r0, #150	; 0x96
   41630:	f001 fd40 	bl	430b4 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   41634:	2300      	movs	r3, #0
   41636:	461a      	mov	r2, r3
   41638:	4619      	mov	r1, r3
   4163a:	4618      	mov	r0, r3
   4163c:	f001 fc56 	bl	42eec <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   41640:	f7fe fc96 	bl	3ff70 <ull_filter_lll_rl_enabled>
   41644:	2800      	cmp	r0, #0
   41646:	d135      	bne.n	416b4 <common_prepare_cb+0x114>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   41648:	7da3      	ldrb	r3, [r4, #22]
   4164a:	f013 0f18 	tst.w	r3, #24
   4164e:	d152      	bne.n	416f6 <common_prepare_cb+0x156>
	ull = HDR_LLL2ULL(lll);
   41650:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   41654:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   41656:	4640      	mov	r0, r8
   41658:	f7fe fff0 	bl	4063c <lll_event_offset_get>
   4165c:	4406      	add	r6, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   4165e:	686a      	ldr	r2, [r5, #4]
   41660:	f106 0109 	add.w	r1, r6, #9
   41664:	2000      	movs	r0, #0
   41666:	f001 fd31 	bl	430cc <radio_tmr_start>
	radio_tmr_end_capture();
   4166a:	f001 fe2f 	bl	432cc <radio_tmr_end_capture>
	radio_rssi_measure();
   4166e:	f001 fcad 	bl	42fcc <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   41672:	4620      	mov	r0, r4
   41674:	f7f7 fde4 	bl	39240 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   41678:	1d01      	adds	r1, r0, #4
   4167a:	b2c9      	uxtb	r1, r1
   4167c:	4640      	mov	r0, r8
   4167e:	4632      	mov	r2, r6
   41680:	f7fe ffea 	bl	40658 <lll_preempt_calc>
   41684:	bb68      	cbnz	r0, 416e2 <common_prepare_cb+0x142>
		if (!is_resume && lll->ticks_window) {
   41686:	b917      	cbnz	r7, 4168e <common_prepare_cb+0xee>
   41688:	6a63      	ldr	r3, [r4, #36]	; 0x24
   4168a:	2b00      	cmp	r3, #0
   4168c:	d163      	bne.n	41756 <common_prepare_cb+0x1b6>
		if (lll->conn) {
   4168e:	6863      	ldr	r3, [r4, #4]
   41690:	b143      	cbz	r3, 416a4 <common_prepare_cb+0x104>
			mfy_after_mstr_offset_get.param = p;
   41692:	4b57      	ldr	r3, [pc, #348]	; (417f0 <common_prepare_cb+0x250>)
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   41694:	2201      	movs	r2, #1
   41696:	2102      	movs	r1, #2
   41698:	2000      	movs	r0, #0
			mfy_after_mstr_offset_get.param = p;
   4169a:	609d      	str	r5, [r3, #8]
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   4169c:	f7f2 fd02 	bl	340a4 <mayfly_enqueue>
			LL_ASSERT(!retval);
   416a0:	2800      	cmp	r0, #0
   416a2:	d142      	bne.n	4172a <common_prepare_cb+0x18a>
		ret = lll_prepare_done(lll);
   416a4:	4620      	mov	r0, r4
   416a6:	f7fe ff63 	bl	40570 <lll_prepare_done>
		LL_ASSERT(!ret);
   416aa:	bb68      	cbnz	r0, 41708 <common_prepare_cb+0x168>
}
   416ac:	2000      	movs	r0, #0
   416ae:	b00c      	add	sp, #48	; 0x30
   416b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ull_filter_lll_get((lll->filter_policy &
   416b4:	7da0      	ldrb	r0, [r4, #22]
   416b6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   416ba:	f7fd ffcd 	bl	3f658 <ull_filter_lll_get>
   416be:	4606      	mov	r6, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   416c0:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   416c4:	f7fe face 	bl	3fc64 <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   416c8:	7871      	ldrb	r1, [r6, #1]
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   416ca:	4680      	mov	r8, r0
		radio_filter_configure(filter->enable_bitmask,
   416cc:	1cb2      	adds	r2, r6, #2
   416ce:	7830      	ldrb	r0, [r6, #0]
   416d0:	f001 fc9e 	bl	43010 <radio_filter_configure>
		radio_ar_configure(count, irks, 0);
   416d4:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   416d8:	2200      	movs	r2, #0
   416da:	4641      	mov	r1, r8
   416dc:	f001 fe9c 	bl	43418 <radio_ar_configure>
   416e0:	e7b6      	b.n	41650 <common_prepare_cb+0xb0>
		radio_isr_set(isr_abort, lll);
   416e2:	4844      	ldr	r0, [pc, #272]	; (417f4 <common_prepare_cb+0x254>)
   416e4:	4621      	mov	r1, r4
   416e6:	f001 fa63 	bl	42bb0 <radio_isr_set>
		radio_disable();
   416ea:	f001 fb5b 	bl	42da4 <radio_disable>
}
   416ee:	2000      	movs	r0, #0
   416f0:	b00c      	add	sp, #48	; 0x30
   416f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   416f6:	2001      	movs	r0, #1
   416f8:	f7fd ffae 	bl	3f658 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   416fc:	7841      	ldrb	r1, [r0, #1]
   416fe:	1c82      	adds	r2, r0, #2
   41700:	7800      	ldrb	r0, [r0, #0]
   41702:	f001 fc85 	bl	43010 <radio_filter_configure>
   41706:	e7a3      	b.n	41650 <common_prepare_cb+0xb0>
		LL_ASSERT(!ret);
   41708:	4a3b      	ldr	r2, [pc, #236]	; (417f8 <common_prepare_cb+0x258>)
   4170a:	493c      	ldr	r1, [pc, #240]	; (417fc <common_prepare_cb+0x25c>)
   4170c:	483c      	ldr	r0, [pc, #240]	; (41800 <common_prepare_cb+0x260>)
   4170e:	f44f 7305 	mov.w	r3, #532	; 0x214
   41712:	f008 f9f9 	bl	49b08 <printk>
   41716:	4040      	eors	r0, r0
   41718:	f380 8811 	msr	BASEPRI, r0
   4171c:	f04f 0003 	mov.w	r0, #3
   41720:	df02      	svc	2
}
   41722:	2000      	movs	r0, #0
   41724:	b00c      	add	sp, #48	; 0x30
   41726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LL_ASSERT(!retval);
   4172a:	4a33      	ldr	r2, [pc, #204]	; (417f8 <common_prepare_cb+0x258>)
   4172c:	4935      	ldr	r1, [pc, #212]	; (41804 <common_prepare_cb+0x264>)
   4172e:	4834      	ldr	r0, [pc, #208]	; (41800 <common_prepare_cb+0x260>)
   41730:	f240 230f 	movw	r3, #527	; 0x20f
   41734:	f008 f9e8 	bl	49b08 <printk>
   41738:	4040      	eors	r0, r0
   4173a:	f380 8811 	msr	BASEPRI, r0
   4173e:	f04f 0003 	mov.w	r0, #3
   41742:	df02      	svc	2
		ret = lll_prepare_done(lll);
   41744:	4620      	mov	r0, r4
   41746:	f7fe ff13 	bl	40570 <lll_prepare_done>
		LL_ASSERT(!ret);
   4174a:	2800      	cmp	r0, #0
   4174c:	d0ae      	beq.n	416ac <common_prepare_cb+0x10c>
   4174e:	e7db      	b.n	41708 <common_prepare_cb+0x168>
		radio_switch_complete_and_disable();
   41750:	f001 fc2c 	bl	42fac <radio_switch_complete_and_disable>
   41754:	e774      	b.n	41640 <common_prepare_cb+0xa0>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   41756:	4a2c      	ldr	r2, [pc, #176]	; (41808 <common_prepare_cb+0x268>)
   41758:	9207      	str	r2, [sp, #28]
   4175a:	4a2c      	ldr	r2, [pc, #176]	; (4180c <common_prepare_cb+0x26c>)
   4175c:	9205      	str	r2, [sp, #20]
   4175e:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
   41762:	9300      	str	r3, [sp, #0]
   41764:	9208      	str	r2, [sp, #32]
   41766:	4633      	mov	r3, r6
   41768:	e9cd 7703 	strd	r7, r7, [sp, #12]
   4176c:	e9cd 7701 	strd	r7, r7, [sp, #4]
   41770:	9406      	str	r4, [sp, #24]
   41772:	4639      	mov	r1, r7
   41774:	2203      	movs	r2, #3
   41776:	f7f3 fedb 	bl	35530 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   4177a:	f030 0302 	bics.w	r3, r0, #2
   4177e:	d086      	beq.n	4168e <common_prepare_cb+0xee>
   41780:	4a1d      	ldr	r2, [pc, #116]	; (417f8 <common_prepare_cb+0x258>)
   41782:	4923      	ldr	r1, [pc, #140]	; (41810 <common_prepare_cb+0x270>)
   41784:	481e      	ldr	r0, [pc, #120]	; (41800 <common_prepare_cb+0x260>)
   41786:	f240 13fb 	movw	r3, #507	; 0x1fb
   4178a:	f008 f9bd 	bl	49b08 <printk>
   4178e:	4040      	eors	r0, r0
   41790:	f380 8811 	msr	BASEPRI, r0
   41794:	f04f 0003 	mov.w	r0, #3
   41798:	df02      	svc	2
   4179a:	e778      	b.n	4168e <common_prepare_cb+0xee>
	LL_ASSERT(node_rx);
   4179c:	4a16      	ldr	r2, [pc, #88]	; (417f8 <common_prepare_cb+0x258>)
   4179e:	491d      	ldr	r1, [pc, #116]	; (41814 <common_prepare_cb+0x274>)
   417a0:	4817      	ldr	r0, [pc, #92]	; (41800 <common_prepare_cb+0x260>)
   417a2:	f240 138d 	movw	r3, #397	; 0x18d
   417a6:	f008 f9af 	bl	49b08 <printk>
   417aa:	4040      	eors	r0, r0
   417ac:	f380 8811 	msr	BASEPRI, r0
   417b0:	f04f 0003 	mov.w	r0, #3
   417b4:	df02      	svc	2
   417b6:	e71b      	b.n	415f0 <common_prepare_cb+0x50>
	if (unlikely(lll->is_stop ||
   417b8:	6863      	ldr	r3, [r4, #4]
   417ba:	f893 3020 	ldrb.w	r3, [r3, #32]
   417be:	07d9      	lsls	r1, r3, #31
   417c0:	d405      	bmi.n	417ce <common_prepare_cb+0x22e>
   417c2:	6863      	ldr	r3, [r4, #4]
   417c4:	f893 3020 	ldrb.w	r3, [r3, #32]
   417c8:	079a      	lsls	r2, r3, #30
   417ca:	f57f aef8 	bpl.w	415be <common_prepare_cb+0x1e>
		radio_isr_set(lll_isr_early_abort, lll);
   417ce:	4812      	ldr	r0, [pc, #72]	; (41818 <common_prepare_cb+0x278>)
   417d0:	4621      	mov	r1, r4
   417d2:	f001 f9ed 	bl	42bb0 <radio_isr_set>
		radio_disable();
   417d6:	f001 fae5 	bl	42da4 <radio_disable>
}
   417da:	2000      	movs	r0, #0
   417dc:	b00c      	add	sp, #48	; 0x30
   417de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   417e2:	bf00      	nop
   417e4:	8e89bed6 	.word	0x8e89bed6
   417e8:	00555555 	.word	0x00555555
   417ec:	000286b1 	.word	0x000286b1
   417f0:	20000db4 	.word	0x20000db4
   417f4:	000418c5 	.word	0x000418c5
   417f8:	00053820 	.word	0x00053820
   417fc:	00052e98 	.word	0x00052e98
   41800:	00052bbc 	.word	0x00052bbc
   41804:	00052ec0 	.word	0x00052ec0
   41808:	000419e9 	.word	0x000419e9
   4180c:	00041a89 	.word	0x00041a89
   41810:	00052f6c 	.word	0x00052f6c
   41814:	000537d4 	.word	0x000537d4
   41818:	000407d5 	.word	0x000407d5

0004181c <prepare_cb>:
	return common_prepare_cb(p, false);
   4181c:	2100      	movs	r1, #0
   4181e:	f7ff bebf 	b.w	415a0 <common_prepare_cb>
   41822:	bf00      	nop

00041824 <isr_common_done>:
{
   41824:	b530      	push	{r4, r5, lr}
   41826:	4604      	mov	r4, r0
   41828:	b083      	sub	sp, #12
	lll_isr_status_reset();
   4182a:	f7fe ff7d 	bl	40728 <lll_isr_status_reset>
	lll->state = 0U;
   4182e:	7da3      	ldrb	r3, [r4, #22]
   41830:	f36f 0300 	bfc	r3, #0, #1
   41834:	75a3      	strb	r3, [r4, #22]
	} else if (lll->type ||
   41836:	069b      	lsls	r3, r3, #26
   41838:	d401      	bmi.n	4183e <isr_common_done+0x1a>
		   lll->conn) {
   4183a:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   4183c:	b3b3      	cbz	r3, 418ac <isr_common_done+0x88>
		radio_tmr_tifs_set(EVENT_IFS_US);
   4183e:	2096      	movs	r0, #150	; 0x96
   41840:	f001 fc38 	bl	430b4 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   41844:	2300      	movs	r3, #0
   41846:	461a      	mov	r2, r3
   41848:	4619      	mov	r1, r3
   4184a:	4618      	mov	r0, r3
   4184c:	f001 fb4e 	bl	42eec <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   41850:	2001      	movs	r0, #1
   41852:	f7f6 fb49 	bl	37ee8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   41856:	4605      	mov	r5, r0
   41858:	b1d0      	cbz	r0, 41890 <isr_common_done+0x6c>
	radio_pkt_rx_set(node_rx->pdu);
   4185a:	f105 001c 	add.w	r0, r5, #28
   4185e:	f001 fa79 	bl	42d54 <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   41862:	f7fe fb85 	bl	3ff70 <ull_filter_lll_rl_enabled>
   41866:	b940      	cbnz	r0, 4187a <isr_common_done+0x56>
	radio_rssi_measure();
   41868:	f001 fbb0 	bl	42fcc <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   4186c:	4811      	ldr	r0, [pc, #68]	; (418b4 <isr_common_done+0x90>)
   4186e:	4621      	mov	r1, r4
}
   41870:	b003      	add	sp, #12
   41872:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_isr_set(isr_rx, param);
   41876:	f001 b99b 	b.w	42bb0 <radio_isr_set>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   4187a:	f10d 0007 	add.w	r0, sp, #7
   4187e:	f7fe f9f1 	bl	3fc64 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   41882:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   41884:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   41886:	f89d 0007 	ldrb.w	r0, [sp, #7]
   4188a:	f001 fdc5 	bl	43418 <radio_ar_configure>
   4188e:	e7eb      	b.n	41868 <isr_common_done+0x44>
	LL_ASSERT(node_rx);
   41890:	4a09      	ldr	r2, [pc, #36]	; (418b8 <isr_common_done+0x94>)
   41892:	490a      	ldr	r1, [pc, #40]	; (418bc <isr_common_done+0x98>)
   41894:	480a      	ldr	r0, [pc, #40]	; (418c0 <isr_common_done+0x9c>)
   41896:	f44f 7352 	mov.w	r3, #840	; 0x348
   4189a:	f008 f935 	bl	49b08 <printk>
   4189e:	4040      	eors	r0, r0
   418a0:	f380 8811 	msr	BASEPRI, r0
   418a4:	f04f 0003 	mov.w	r0, #3
   418a8:	df02      	svc	2
   418aa:	e7d6      	b.n	4185a <isr_common_done+0x36>
		radio_switch_complete_and_disable();
   418ac:	f001 fb7e 	bl	42fac <radio_switch_complete_and_disable>
   418b0:	e7ce      	b.n	41850 <isr_common_done+0x2c>
   418b2:	bf00      	nop
   418b4:	000286b1 	.word	0x000286b1
   418b8:	00053820 	.word	0x00053820
   418bc:	000537d4 	.word	0x000537d4
   418c0:	00052bbc 	.word	0x00052bbc

000418c4 <isr_abort>:
{
   418c4:	b510      	push	{r4, lr}
   418c6:	4604      	mov	r4, r0
	lll_isr_status_reset();
   418c8:	f7fe ff2e 	bl	40728 <lll_isr_status_reset>
	radio_filter_disable();
   418cc:	f001 fbc0 	bl	43050 <radio_filter_disable>
	lll_isr_cleanup(param);
   418d0:	4620      	mov	r0, r4
}
   418d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   418d6:	f7fe bf35 	b.w	40744 <lll_isr_cleanup>
   418da:	bf00      	nop

000418dc <isr_done>:
{
   418dc:	b508      	push	{r3, lr}
	isr_common_done(param);
   418de:	f7ff ffa1 	bl	41824 <isr_common_done>
	radio_rx_enable();
   418e2:	f001 fa53 	bl	42d8c <radio_rx_enable>
}
   418e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   418ea:	f001 bcef 	b.w	432cc <radio_tmr_end_capture>
   418ee:	bf00      	nop

000418f0 <isr_tx>:
{
   418f0:	b570      	push	{r4, r5, r6, lr}
   418f2:	b082      	sub	sp, #8
   418f4:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   418f6:	f7fe ff05 	bl	40704 <lll_isr_tx_status_reset>
	radio_switch_complete_and_disable();
   418fa:	f001 fb57 	bl	42fac <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
   418fe:	2001      	movs	r0, #1
   41900:	f7f6 faf2 	bl	37ee8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   41904:	4604      	mov	r4, r0
   41906:	2800      	cmp	r0, #0
   41908:	d03f      	beq.n	4198a <isr_tx+0x9a>
	radio_pkt_rx_set(node_rx->pdu);
   4190a:	f104 001c 	add.w	r0, r4, #28
   4190e:	f001 fa21 	bl	42d54 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   41912:	f001 fa67 	bl	42de4 <radio_is_ready>
   41916:	b9e0      	cbnz	r0, 41952 <isr_tx+0x62>
	if (ull_filter_lll_rl_enabled()) {
   41918:	f7fe fb2a 	bl	3ff70 <ull_filter_lll_rl_enabled>
   4191c:	bb50      	cbnz	r0, 41974 <isr_tx+0x84>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   4191e:	f001 fce3 	bl	432e8 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   41922:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   41924:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   41926:	4608      	mov	r0, r1
   41928:	f001 fa2a 	bl	42d80 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   4192c:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   4192e:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   41930:	4608      	mov	r0, r1
   41932:	f001 fa21 	bl	42d78 <radio_tx_chain_delay_get>
   41936:	4434      	add	r4, r6
   41938:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   4193a:	1a20      	subs	r0, r4, r0
   4193c:	f001 fc8c 	bl	43258 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   41940:	f001 fb44 	bl	42fcc <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   41944:	4818      	ldr	r0, [pc, #96]	; (419a8 <isr_tx+0xb8>)
   41946:	4629      	mov	r1, r5
}
   41948:	b002      	add	sp, #8
   4194a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   4194e:	f001 b92f 	b.w	42bb0 <radio_isr_set>
	LL_ASSERT(!radio_is_ready());
   41952:	4a16      	ldr	r2, [pc, #88]	; (419ac <isr_tx+0xbc>)
   41954:	4916      	ldr	r1, [pc, #88]	; (419b0 <isr_tx+0xc0>)
   41956:	4817      	ldr	r0, [pc, #92]	; (419b4 <isr_tx+0xc4>)
   41958:	f240 3306 	movw	r3, #774	; 0x306
   4195c:	f008 f8d4 	bl	49b08 <printk>
   41960:	4040      	eors	r0, r0
   41962:	f380 8811 	msr	BASEPRI, r0
   41966:	f04f 0003 	mov.w	r0, #3
   4196a:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   4196c:	f7fe fb00 	bl	3ff70 <ull_filter_lll_rl_enabled>
   41970:	2800      	cmp	r0, #0
   41972:	d0d4      	beq.n	4191e <isr_tx+0x2e>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   41974:	f10d 0007 	add.w	r0, sp, #7
   41978:	f7fe f974 	bl	3fc64 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   4197c:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   4197e:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   41980:	f89d 0007 	ldrb.w	r0, [sp, #7]
   41984:	f001 fd48 	bl	43418 <radio_ar_configure>
   41988:	e7c9      	b.n	4191e <isr_tx+0x2e>
	LL_ASSERT(node_rx);
   4198a:	4a08      	ldr	r2, [pc, #32]	; (419ac <isr_tx+0xbc>)
   4198c:	490a      	ldr	r1, [pc, #40]	; (419b8 <isr_tx+0xc8>)
   4198e:	4809      	ldr	r0, [pc, #36]	; (419b4 <isr_tx+0xc4>)
   41990:	f240 3302 	movw	r3, #770	; 0x302
   41994:	f008 f8b8 	bl	49b08 <printk>
   41998:	4040      	eors	r0, r0
   4199a:	f380 8811 	msr	BASEPRI, r0
   4199e:	f04f 0003 	mov.w	r0, #3
   419a2:	df02      	svc	2
   419a4:	e7b1      	b.n	4190a <isr_tx+0x1a>
   419a6:	bf00      	nop
   419a8:	000286b1 	.word	0x000286b1
   419ac:	00053820 	.word	0x00053820
   419b0:	000537dc 	.word	0x000537dc
   419b4:	00052bbc 	.word	0x00052bbc
   419b8:	000537d4 	.word	0x000537d4

000419bc <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   419bc:	68c3      	ldr	r3, [r0, #12]
{
   419be:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   419c0:	681e      	ldr	r6, [r3, #0]
{
   419c2:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   419c4:	f7f3 fee0 	bl	35788 <ticker_ticks_now_get>
   419c8:	4605      	mov	r5, r0
   419ca:	4630      	mov	r0, r6
   419cc:	f7fe fe36 	bl	4063c <lll_event_offset_get>
	p->remainder = 0;
   419d0:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   419d2:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   419d4:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   419d8:	8123      	strh	r3, [r4, #8]
	return common_prepare_cb(p, true);
   419da:	4620      	mov	r0, r4
   419dc:	2101      	movs	r1, #1
}
   419de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return common_prepare_cb(p, true);
   419e2:	f7ff bddd 	b.w	415a0 <common_prepare_cb>
   419e6:	bf00      	nop

000419e8 <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   419e8:	b900      	cbnz	r0, 419ec <ticker_op_start_cb+0x4>
   419ea:	4770      	bx	lr
{
   419ec:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   419ee:	4a07      	ldr	r2, [pc, #28]	; (41a0c <ticker_op_start_cb+0x24>)
   419f0:	4907      	ldr	r1, [pc, #28]	; (41a10 <ticker_op_start_cb+0x28>)
   419f2:	4808      	ldr	r0, [pc, #32]	; (41a14 <ticker_op_start_cb+0x2c>)
   419f4:	f44f 7324 	mov.w	r3, #656	; 0x290
   419f8:	f008 f886 	bl	49b08 <printk>
   419fc:	4040      	eors	r0, r0
   419fe:	f380 8811 	msr	BASEPRI, r0
   41a02:	f04f 0003 	mov.w	r0, #3
   41a06:	df02      	svc	2
}
   41a08:	bd08      	pop	{r3, pc}
   41a0a:	bf00      	nop
   41a0c:	00053820 	.word	0x00053820
   41a10:	0005312c 	.word	0x0005312c
   41a14:	00052bbc 	.word	0x00052bbc

00041a18 <is_abort_cb>:
	if (next != curr) {
   41a18:	4281      	cmp	r1, r0
{
   41a1a:	b508      	push	{r3, lr}
	if (next != curr) {
   41a1c:	d00d      	beq.n	41a3a <is_abort_cb+0x22>
			if (!lll->ticks_window) {
   41a1e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   41a20:	b113      	cbz	r3, 41a28 <is_abort_cb+0x10>
			return -ECANCELED;
   41a22:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   41a26:	bd08      	pop	{r3, pc}
				*resume_cb = resume_prepare_cb;
   41a28:	4b12      	ldr	r3, [pc, #72]	; (41a74 <is_abort_cb+0x5c>)
   41a2a:	6013      	str	r3, [r2, #0]
				err = lll_hfclock_on();
   41a2c:	f7ff f82a 	bl	40a84 <lll_hfclock_on>
				LL_ASSERT(err >= 0);
   41a30:	2800      	cmp	r0, #0
   41a32:	db10      	blt.n	41a56 <is_abort_cb+0x3e>
{
   41a34:	f06f 000a 	mvn.w	r0, #10
}
   41a38:	bd08      	pop	{r3, pc}
	} else if (lll->conn && lll->conn->central.initiated) {
   41a3a:	684b      	ldr	r3, [r1, #4]
   41a3c:	b123      	cbz	r3, 41a48 <is_abort_cb+0x30>
   41a3e:	684b      	ldr	r3, [r1, #4]
   41a40:	f893 3020 	ldrb.w	r3, [r3, #32]
   41a44:	07db      	lsls	r3, r3, #31
   41a46:	d404      	bmi.n	41a52 <is_abort_cb+0x3a>
		radio_isr_set(isr_window, lll);
   41a48:	480b      	ldr	r0, [pc, #44]	; (41a78 <is_abort_cb+0x60>)
   41a4a:	f001 f8b1 	bl	42bb0 <radio_isr_set>
	radio_disable();
   41a4e:	f001 f9a9 	bl	42da4 <radio_disable>
		return 0;
   41a52:	2000      	movs	r0, #0
}
   41a54:	bd08      	pop	{r3, pc}
				LL_ASSERT(err >= 0);
   41a56:	4a09      	ldr	r2, [pc, #36]	; (41a7c <is_abort_cb+0x64>)
   41a58:	4909      	ldr	r1, [pc, #36]	; (41a80 <is_abort_cb+0x68>)
   41a5a:	480a      	ldr	r0, [pc, #40]	; (41a84 <is_abort_cb+0x6c>)
   41a5c:	f240 2332 	movw	r3, #562	; 0x232
   41a60:	f008 f852 	bl	49b08 <printk>
   41a64:	4040      	eors	r0, r0
   41a66:	f380 8811 	msr	BASEPRI, r0
   41a6a:	f04f 0003 	mov.w	r0, #3
   41a6e:	df02      	svc	2
   41a70:	e7e0      	b.n	41a34 <is_abort_cb+0x1c>
   41a72:	bf00      	nop
   41a74:	000419bd 	.word	0x000419bd
   41a78:	00028611 	.word	0x00028611
   41a7c:	00053820 	.word	0x00053820
   41a80:	00053738 	.word	0x00053738
   41a84:	00052bbc 	.word	0x00052bbc

00041a88 <ticker_stop_cb>:
{
   41a88:	b508      	push	{r3, lr}
	mfy.param = param;
   41a8a:	4b0c      	ldr	r3, [pc, #48]	; (41abc <ticker_stop_cb+0x34>)
{
   41a8c:	9803      	ldr	r0, [sp, #12]
	mfy.param = param;
   41a8e:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   41a90:	2200      	movs	r2, #0
   41a92:	4611      	mov	r1, r2
   41a94:	2001      	movs	r0, #1
   41a96:	f7f2 fb05 	bl	340a4 <mayfly_enqueue>
	LL_ASSERT(!ret);
   41a9a:	b900      	cbnz	r0, 41a9e <ticker_stop_cb+0x16>
}
   41a9c:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   41a9e:	4a08      	ldr	r2, [pc, #32]	; (41ac0 <ticker_stop_cb+0x38>)
   41aa0:	4908      	ldr	r1, [pc, #32]	; (41ac4 <ticker_stop_cb+0x3c>)
   41aa2:	4809      	ldr	r0, [pc, #36]	; (41ac8 <ticker_stop_cb+0x40>)
   41aa4:	f240 2389 	movw	r3, #649	; 0x289
   41aa8:	f008 f82e 	bl	49b08 <printk>
   41aac:	4040      	eors	r0, r0
   41aae:	f380 8811 	msr	BASEPRI, r0
   41ab2:	f04f 0003 	mov.w	r0, #3
   41ab6:	df02      	svc	2
}
   41ab8:	bd08      	pop	{r3, pc}
   41aba:	bf00      	nop
   41abc:	20000da4 	.word	0x20000da4
   41ac0:	00053820 	.word	0x00053820
   41ac4:	00052e98 	.word	0x00052e98
   41ac8:	00052bbc 	.word	0x00052bbc

00041acc <isr_done_cleanup>:
{
   41acc:	b530      	push	{r4, r5, lr}
   41ace:	4604      	mov	r4, r0
   41ad0:	b085      	sub	sp, #20
	lll_isr_status_reset();
   41ad2:	f7fe fe29 	bl	40728 <lll_isr_status_reset>
	if (lll_is_done(param, &is_resume)) {
   41ad6:	f10d 010f 	add.w	r1, sp, #15
   41ada:	4620      	mov	r0, r4
   41adc:	f7fe fd9c 	bl	40618 <lll_is_done>
   41ae0:	b9c0      	cbnz	r0, 41b14 <isr_done_cleanup+0x48>
	radio_filter_disable();
   41ae2:	4605      	mov	r5, r0
   41ae4:	f001 fab4 	bl	43050 <radio_filter_disable>
	if (++lll->chan == ADV_CHAN_MAX) {
   41ae8:	7da2      	ldrb	r2, [r4, #22]
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   41aea:	9500      	str	r5, [sp, #0]
	if (++lll->chan == ADV_CHAN_MAX) {
   41aec:	f3c2 0341 	ubfx	r3, r2, #1, #2
   41af0:	3301      	adds	r3, #1
   41af2:	f003 0303 	and.w	r3, r3, #3
		lll->chan = 0U;
   41af6:	2b03      	cmp	r3, #3
   41af8:	bf08      	it	eq
   41afa:	2300      	moveq	r3, #0
   41afc:	f363 0242 	bfi	r2, r3, #1, #2
   41b00:	75a2      	strb	r2, [r4, #22]
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   41b02:	462b      	mov	r3, r5
   41b04:	2203      	movs	r2, #3
   41b06:	4629      	mov	r1, r5
   41b08:	4628      	mov	r0, r5
   41b0a:	f7f3 fd9d 	bl	35648 <ticker_stop>
	lll_isr_cleanup(param);
   41b0e:	4620      	mov	r0, r4
   41b10:	f7fe fe18 	bl	40744 <lll_isr_cleanup>
}
   41b14:	b005      	add	sp, #20
   41b16:	bd30      	pop	{r4, r5, pc}

00041b18 <isr_scan_tgta_check>:
{
   41b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   41b1c:	f89d 9020 	ldrb.w	r9, [sp, #32]
   41b20:	4616      	mov	r6, r2
   41b22:	4680      	mov	r8, r0
   41b24:	460d      	mov	r5, r1
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   41b26:	464a      	mov	r2, r9
   41b28:	4619      	mov	r1, r3
   41b2a:	4630      	mov	r0, r6
{
   41b2c:	461f      	mov	r7, r3
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   41b2e:	f7fe f9fd 	bl	3ff2c <ull_filter_lll_rl_addr_resolve>
   41b32:	4604      	mov	r4, r0
   41b34:	b9a0      	cbnz	r0, 41b60 <isr_scan_tgta_check+0x48>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   41b36:	b11d      	cbz	r5, 41b40 <isr_scan_tgta_check+0x28>
   41b38:	f898 3017 	ldrb.w	r3, [r8, #23]
   41b3c:	079b      	lsls	r3, r3, #30
   41b3e:	d41c      	bmi.n	41b7a <isr_scan_tgta_check+0x62>
	return (((lll->init_addr_type == addr_type) &&
   41b40:	f898 5016 	ldrb.w	r5, [r8, #22]
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   41b44:	f3c5 1380 	ubfx	r3, r5, #6, #1
   41b48:	42b3      	cmp	r3, r6
   41b4a:	d00c      	beq.n	41b66 <isr_scan_tgta_check+0x4e>
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
   41b4c:	f3c5 05c1 	ubfx	r5, r5, #3, #2
   41b50:	2d01      	cmp	r5, #1
   41b52:	d905      	bls.n	41b60 <isr_scan_tgta_check+0x48>
   41b54:	b126      	cbz	r6, 41b60 <isr_scan_tgta_check+0x48>
   41b56:	797b      	ldrb	r3, [r7, #5]
   41b58:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   41b5c:	2b40      	cmp	r3, #64	; 0x40
   41b5e:	d012      	beq.n	41b86 <isr_scan_tgta_check+0x6e>
}
   41b60:	4620      	mov	r0, r4
   41b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   41b66:	2206      	movs	r2, #6
   41b68:	4639      	mov	r1, r7
   41b6a:	f108 0019 	add.w	r0, r8, #25
   41b6e:	f00a f8ea 	bl	4bd46 <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   41b72:	b168      	cbz	r0, 41b90 <isr_scan_tgta_check+0x78>
   41b74:	f898 5016 	ldrb.w	r5, [r8, #22]
   41b78:	e7e8      	b.n	41b4c <isr_scan_tgta_check+0x34>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   41b7a:	4648      	mov	r0, r9
   41b7c:	f7fe f858 	bl	3fc30 <ull_filter_lll_lrpa_get>
   41b80:	2800      	cmp	r0, #0
   41b82:	d1ed      	bne.n	41b60 <isr_scan_tgta_check+0x48>
   41b84:	e7dc      	b.n	41b40 <isr_scan_tgta_check+0x28>
		if (dir_report) {
   41b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
   41b88:	b113      	cbz	r3, 41b90 <isr_scan_tgta_check+0x78>
			*dir_report = true;
   41b8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   41b8c:	2301      	movs	r3, #1
   41b8e:	7013      	strb	r3, [r2, #0]
{
   41b90:	2401      	movs	r4, #1
   41b92:	e7e5      	b.n	41b60 <isr_scan_tgta_check+0x48>

00041b94 <abort_cb>:
{
   41b94:	b510      	push	{r4, lr}
	if (!prepare_param) {
   41b96:	b1d8      	cbz	r0, 41bd0 <abort_cb+0x3c>
	err = lll_hfclock_off();
   41b98:	460c      	mov	r4, r1
   41b9a:	f7fe ff8b 	bl	40ab4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   41b9e:	2800      	cmp	r0, #0
   41ba0:	db04      	blt.n	41bac <abort_cb+0x18>
	lll_done(param);
   41ba2:	4620      	mov	r0, r4
}
   41ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   41ba8:	f7fe bce4 	b.w	40574 <lll_done>
	LL_ASSERT(err >= 0);
   41bac:	4a0c      	ldr	r2, [pc, #48]	; (41be0 <abort_cb+0x4c>)
   41bae:	490d      	ldr	r1, [pc, #52]	; (41be4 <abort_cb+0x50>)
   41bb0:	480d      	ldr	r0, [pc, #52]	; (41be8 <abort_cb+0x54>)
   41bb2:	f240 2379 	movw	r3, #633	; 0x279
   41bb6:	f007 ffa7 	bl	49b08 <printk>
   41bba:	4040      	eors	r0, r0
   41bbc:	f380 8811 	msr	BASEPRI, r0
   41bc0:	f04f 0003 	mov.w	r0, #3
   41bc4:	df02      	svc	2
	lll_done(param);
   41bc6:	4620      	mov	r0, r4
}
   41bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   41bcc:	f7fe bcd2 	b.w	40574 <lll_done>
			radio_isr_set(isr_done_cleanup, param);
   41bd0:	4806      	ldr	r0, [pc, #24]	; (41bec <abort_cb+0x58>)
   41bd2:	f000 ffed 	bl	42bb0 <radio_isr_set>
}
   41bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   41bda:	f001 b8e3 	b.w	42da4 <radio_disable>
   41bde:	bf00      	nop
   41be0:	00053820 	.word	0x00053820
   41be4:	00053738 	.word	0x00053738
   41be8:	00052bbc 	.word	0x00052bbc
   41bec:	00041acd 	.word	0x00041acd

00041bf0 <lll_scan_init>:
}
   41bf0:	2000      	movs	r0, #0
   41bf2:	4770      	bx	lr

00041bf4 <lll_scan_reset>:
int lll_scan_reset(void)
   41bf4:	2000      	movs	r0, #0
   41bf6:	4770      	bx	lr

00041bf8 <lll_scan_prepare>:
{
   41bf8:	b510      	push	{r4, lr}
   41bfa:	b082      	sub	sp, #8
   41bfc:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   41bfe:	f7fe ff41 	bl	40a84 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   41c02:	2800      	cmp	r0, #0
   41c04:	db19      	blt.n	41c3a <lll_scan_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   41c06:	4a13      	ldr	r2, [pc, #76]	; (41c54 <lll_scan_prepare+0x5c>)
   41c08:	4913      	ldr	r1, [pc, #76]	; (41c58 <lll_scan_prepare+0x60>)
   41c0a:	4814      	ldr	r0, [pc, #80]	; (41c5c <lll_scan_prepare+0x64>)
   41c0c:	9400      	str	r4, [sp, #0]
   41c0e:	2300      	movs	r3, #0
   41c10:	f7f6 fca8 	bl	38564 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   41c14:	b108      	cbz	r0, 41c1a <lll_scan_prepare+0x22>
   41c16:	3077      	adds	r0, #119	; 0x77
   41c18:	d101      	bne.n	41c1e <lll_scan_prepare+0x26>
}
   41c1a:	b002      	add	sp, #8
   41c1c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   41c1e:	4a10      	ldr	r2, [pc, #64]	; (41c60 <lll_scan_prepare+0x68>)
   41c20:	4910      	ldr	r1, [pc, #64]	; (41c64 <lll_scan_prepare+0x6c>)
   41c22:	4811      	ldr	r0, [pc, #68]	; (41c68 <lll_scan_prepare+0x70>)
   41c24:	238b      	movs	r3, #139	; 0x8b
   41c26:	f007 ff6f 	bl	49b08 <printk>
   41c2a:	4040      	eors	r0, r0
   41c2c:	f380 8811 	msr	BASEPRI, r0
   41c30:	f04f 0003 	mov.w	r0, #3
   41c34:	df02      	svc	2
}
   41c36:	b002      	add	sp, #8
   41c38:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   41c3a:	4a09      	ldr	r2, [pc, #36]	; (41c60 <lll_scan_prepare+0x68>)
   41c3c:	490b      	ldr	r1, [pc, #44]	; (41c6c <lll_scan_prepare+0x74>)
   41c3e:	480a      	ldr	r0, [pc, #40]	; (41c68 <lll_scan_prepare+0x70>)
   41c40:	2388      	movs	r3, #136	; 0x88
   41c42:	f007 ff61 	bl	49b08 <printk>
   41c46:	4040      	eors	r0, r0
   41c48:	f380 8811 	msr	BASEPRI, r0
   41c4c:	f04f 0003 	mov.w	r0, #3
   41c50:	df02      	svc	2
   41c52:	e7d8      	b.n	41c06 <lll_scan_prepare+0xe>
   41c54:	0004181d 	.word	0x0004181d
   41c58:	00041b95 	.word	0x00041b95
   41c5c:	00041a19 	.word	0x00041a19
   41c60:	00053820 	.word	0x00053820
   41c64:	0005380c 	.word	0x0005380c
   41c68:	00052bbc 	.word	0x00052bbc
   41c6c:	00053738 	.word	0x00053738

00041c70 <lll_scan_isr_rx_check>:
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   41c70:	f890 c016 	ldrb.w	ip, [r0, #22]
							       rl_idx))) ||
   41c74:	f01c 0f08 	tst.w	ip, #8
   41c78:	d102      	bne.n	41c80 <lll_scan_isr_rx_check+0x10>
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   41c7a:	b932      	cbnz	r2, 41c8a <lll_scan_isr_rx_check+0x1a>
{
   41c7c:	2001      	movs	r0, #1
}
   41c7e:	4770      	bx	lr
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   41c80:	2a00      	cmp	r2, #0
   41c82:	d1fb      	bne.n	41c7c <lll_scan_isr_rx_check+0xc>
		(devmatch_ok || ull_filter_lll_irk_in_fal(rl_idx)));
   41c84:	4618      	mov	r0, r3
   41c86:	f7fe b8b3 	b.w	3fdf0 <ull_filter_lll_irk_in_fal>
{
   41c8a:	b510      	push	{r4, lr}
   41c8c:	4604      	mov	r4, r0
   41c8e:	4608      	mov	r0, r1
		(!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
   41c90:	4619      	mov	r1, r3
   41c92:	f7fe f8dd 	bl	3fe50 <ull_filter_lll_rl_idx_allowed>
   41c96:	b918      	cbnz	r0, 41ca0 <lll_scan_isr_rx_check+0x30>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   41c98:	7da0      	ldrb	r0, [r4, #22]
							       rl_idx))) ||
   41c9a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
}
   41c9e:	bd10      	pop	{r4, pc}
{
   41ca0:	2001      	movs	r0, #1
}
   41ca2:	bd10      	pop	{r4, pc}

00041ca4 <lll_scan_prepare_connect_req>:
{
   41ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41ca8:	f89d 501c 	ldrb.w	r5, [sp, #28]
	lll_conn = lll->conn;
   41cac:	6846      	ldr	r6, [r0, #4]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   41cae:	01ad      	lsls	r5, r5, #6
   41cb0:	f005 0540 	and.w	r5, r5, #64	; 0x40
   41cb4:	f045 0525 	orr.w	r5, r5, #37	; 0x25
   41cb8:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
   41cbc:	780b      	ldrb	r3, [r1, #0]
   41cbe:	f003 0310 	and.w	r3, r3, #16
{
   41cc2:	460c      	mov	r4, r1
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   41cc4:	431d      	orrs	r5, r3
	pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
   41cc6:	2322      	movs	r3, #34	; 0x22
   41cc8:	704b      	strb	r3, [r1, #1]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   41cca:	700d      	strb	r5, [r1, #0]
{
   41ccc:	4690      	mov	r8, r2
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   41cce:	9908      	ldr	r1, [sp, #32]
   41cd0:	2206      	movs	r2, #6
{
   41cd2:	4607      	mov	r7, r0
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   41cd4:	1ca0      	adds	r0, r4, #2
   41cd6:	f00a f846 	bl	4bd66 <memcpy>
	memcpy(&pdu_tx->connect_ind.adv_addr[0], adv_addr, BDADDR_SIZE);
   41cda:	9906      	ldr	r1, [sp, #24]
   41cdc:	2206      	movs	r2, #6
   41cde:	f104 0008 	add.w	r0, r4, #8
   41ce2:	f00a f840 	bl	4bd66 <memcpy>
	memcpy(&pdu_tx->connect_ind.access_addr[0],
   41ce6:	2204      	movs	r2, #4
   41ce8:	18b1      	adds	r1, r6, r2
   41cea:	f104 000e 	add.w	r0, r4, #14
   41cee:	f00a f83a 	bl	4bd66 <memcpy>
	memcpy(&pdu_tx->connect_ind.crc_init[0], &lll_conn->crc_init[0], 3);
   41cf2:	2203      	movs	r2, #3
   41cf4:	f106 0108 	add.w	r1, r6, #8
   41cf8:	f104 0012 	add.w	r0, r4, #18
   41cfc:	f00a f833 	bl	4bd66 <memcpy>
	pdu_tx->connect_ind.win_size = 1;
   41d00:	2301      	movs	r3, #1
   41d02:	7563      	strb	r3, [r4, #21]
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   41d04:	89f5      	ldrh	r5, [r6, #14]
	conn_offset_us = radio_tmr_end_get() + EVENT_IFS_US +
   41d06:	f001 fae9 	bl	432dc <radio_tmr_end_get>
			 PDU_AC_MAX_US(sizeof(struct pdu_adv_connect_ind),
   41d0a:	f1b8 0f00 	cmp.w	r8, #0
   41d0e:	d043      	beq.n	41d98 <lll_scan_prepare_connect_req+0xf4>
   41d10:	f008 0303 	and.w	r3, r8, #3
   41d14:	332b      	adds	r3, #43	; 0x2b
   41d16:	00db      	lsls	r3, r3, #3
   41d18:	f3c8 0840 	ubfx	r8, r8, #1, #1
   41d1c:	fa23 f308 	lsr.w	r3, r3, r8
		conn_offset_us += WIN_DELAY_LEGACY;
   41d20:	f500 62af 	add.w	r2, r0, #1400	; 0x578
   41d24:	441a      	add	r2, r3
	    lll->conn_win_offset_us == 0U) {
   41d26:	693b      	ldr	r3, [r7, #16]
	if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
   41d28:	b38b      	cbz	r3, 41d8e <lll_scan_prepare_connect_req+0xea>
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   41d2a:	f240 41e2 	movw	r1, #1250	; 0x4e2
   41d2e:	fb01 f505 	mul.w	r5, r1, r5
		while ((win_offset_us & ((uint32_t)1 << 31)) ||
   41d32:	2b00      	cmp	r3, #0
   41d34:	db01      	blt.n	41d3a <lll_scan_prepare_connect_req+0x96>
   41d36:	4293      	cmp	r3, r2
   41d38:	d201      	bcs.n	41d3e <lll_scan_prepare_connect_req+0x9a>
			win_offset_us += conn_interval_us;
   41d3a:	442b      	add	r3, r5
   41d3c:	e7f9      	b.n	41d32 <lll_scan_prepare_connect_req+0x8e>
		*conn_space_us = win_offset_us;
   41d3e:	9909      	ldr	r1, [sp, #36]	; 0x24
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   41d40:	1a9a      	subs	r2, r3, r2
		*conn_space_us = win_offset_us;
   41d42:	600b      	str	r3, [r1, #0]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   41d44:	4b16      	ldr	r3, [pc, #88]	; (41da0 <lll_scan_prepare_connect_req+0xfc>)
   41d46:	fba3 3202 	umull	r3, r2, r3, r2
		pdu_tx->connect_ind.win_size++;
   41d4a:	7d63      	ldrb	r3, [r4, #21]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   41d4c:	0a92      	lsrs	r2, r2, #10
		pdu_tx->connect_ind.win_size++;
   41d4e:	3301      	adds	r3, #1
		pdu_tx->connect_ind.win_offset =
   41d50:	82e2      	strh	r2, [r4, #22]
		pdu_tx->connect_ind.win_size++;
   41d52:	7563      	strb	r3, [r4, #21]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   41d54:	f8d6 100e 	ldr.w	r1, [r6, #14]
	pdu_tx->connect_ind.timeout = sys_cpu_to_le16(lll->conn_timeout);
   41d58:	8abb      	ldrh	r3, [r7, #20]
   41d5a:	83a3      	strh	r3, [r4, #28]
	memcpy(&pdu_tx->connect_ind.chan_map[0], &lll_conn->data_chan_map[0],
   41d5c:	2205      	movs	r2, #5
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   41d5e:	61a1      	str	r1, [r4, #24]
	memcpy(&pdu_tx->connect_ind.chan_map[0], &lll_conn->data_chan_map[0],
   41d60:	f104 001e 	add.w	r0, r4, #30
   41d64:	f106 0118 	add.w	r1, r6, #24
   41d68:	f009 fffd 	bl	4bd66 <memcpy>
	pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
   41d6c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   41d70:	7fb2      	ldrb	r2, [r6, #30]
   41d72:	f362 0304 	bfi	r3, r2, #0, #5
   41d76:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdu_tx->connect_ind.sca = lll_clock_sca_local_get();
   41d7a:	f7fe feb7 	bl	40aec <lll_clock_sca_local_get>
   41d7e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   41d82:	f360 1347 	bfi	r3, r0, #5, #3
   41d86:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
   41d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*conn_space_us = conn_offset_us;
   41d8e:	9909      	ldr	r1, [sp, #36]	; 0x24
   41d90:	600a      	str	r2, [r1, #0]
		pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
   41d92:	75a3      	strb	r3, [r4, #22]
   41d94:	75e3      	strb	r3, [r4, #23]
   41d96:	e7dd      	b.n	41d54 <lll_scan_prepare_connect_req+0xb0>
   41d98:	f44f 73b0 	mov.w	r3, #352	; 0x160
   41d9c:	e7c0      	b.n	41d20 <lll_scan_prepare_connect_req+0x7c>
   41d9e:	bf00      	nop
   41da0:	d1b71759 	.word	0xd1b71759

00041da4 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   41da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41da6:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   41da8:	f7fe fcbe 	bl	40728 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   41dac:	f7f6 f99e 	bl	380ec <ull_event_done_extra_get>
	LL_ASSERT(e);
   41db0:	4604      	mov	r4, r0
   41db2:	2800      	cmp	r0, #0
   41db4:	d036      	beq.n	41e24 <isr_done+0x80>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   41db6:	4922      	ldr	r1, [pc, #136]	; (41e40 <isr_done+0x9c>)
   41db8:	79a2      	ldrb	r2, [r4, #6]
   41dba:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   41dbc:	4b21      	ldr	r3, [pc, #132]	; (41e44 <isr_done+0xa0>)
	e->crc_valid = crc_valid;
   41dbe:	f360 0200 	bfi	r2, r0, #0, #1
   41dc2:	71a2      	strb	r2, [r4, #6]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   41dc4:	4a20      	ldr	r2, [pc, #128]	; (41e48 <isr_done+0xa4>)
	e->trx_cnt = trx_cnt;
   41dc6:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   41dc8:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   41dca:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   41dcc:	2101      	movs	r1, #1
   41dce:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   41dd0:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   41dd2:	b11b      	cbz	r3, 41ddc <isr_done+0x38>
		struct lll_conn *lll = param;

		if (lll->role) {
   41dd4:	f995 301d 	ldrsb.w	r3, [r5, #29]
   41dd8:	2b00      	cmp	r3, #0
   41dda:	db04      	blt.n	41de6 <isr_done+0x42>
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   41ddc:	4628      	mov	r0, r5
}
   41dde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   41de2:	f7fe bcaf 	b.w	40744 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   41de6:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   41dea:	f003 0307 	and.w	r3, r3, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   41dee:	2b02      	cmp	r3, #2
   41df0:	d016      	beq.n	41e20 <isr_done+0x7c>
	default:
	case BIT(0):
		return 40;
   41df2:	2b04      	cmp	r3, #4
   41df4:	bf0c      	ite	eq
   41df6:	f44f 77bc 	moveq.w	r7, #376	; 0x178
   41dfa:	2728      	movne	r7, #40	; 0x28
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   41dfc:	f001 fa5a 	bl	432b4 <radio_tmr_aa_restore>
   41e00:	4606      	mov	r6, r0
   41e02:	f001 fa5d 	bl	432c0 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   41e06:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   41e08:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   41e0a:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   41e0c:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->periph.window_widening_event_us = 0;
   41e10:	2300      	movs	r3, #0
   41e12:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   41e14:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   41e16:	4628      	mov	r0, r5
}
   41e18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   41e1c:	f7fe bc92 	b.w	40744 <lll_isr_cleanup>
	switch (phy) {
   41e20:	2718      	movs	r7, #24
   41e22:	e7eb      	b.n	41dfc <isr_done+0x58>
	LL_ASSERT(e);
   41e24:	4a09      	ldr	r2, [pc, #36]	; (41e4c <isr_done+0xa8>)
   41e26:	490a      	ldr	r1, [pc, #40]	; (41e50 <isr_done+0xac>)
   41e28:	480a      	ldr	r0, [pc, #40]	; (41e54 <isr_done+0xb0>)
   41e2a:	f240 3317 	movw	r3, #791	; 0x317
   41e2e:	f007 fe6b 	bl	49b08 <printk>
   41e32:	4040      	eors	r0, r0
   41e34:	f380 8811 	msr	BASEPRI, r0
   41e38:	f04f 0003 	mov.w	r0, #3
   41e3c:	df02      	svc	2
   41e3e:	e7ba      	b.n	41db6 <isr_done+0x12>
   41e40:	20007424 	.word	0x20007424
   41e44:	200072bc 	.word	0x200072bc
   41e48:	20007423 	.word	0x20007423
   41e4c:	0005386c 	.word	0x0005386c
   41e50:	00052f98 	.word	0x00052f98
   41e54:	00052bbc 	.word	0x00052bbc

00041e58 <lll_conn_init>:
{
   41e58:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   41e5a:	f000 fff7 	bl	42e4c <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   41e5e:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   41e60:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   41e62:	2101      	movs	r1, #1
   41e64:	f361 0201 	bfi	r2, r1, #0, #2
}
   41e68:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   41e6a:	701a      	strb	r2, [r3, #0]
}
   41e6c:	bd08      	pop	{r3, pc}
   41e6e:	bf00      	nop

00041e70 <lll_conn_reset>:
}
   41e70:	2000      	movs	r0, #0
   41e72:	4770      	bx	lr

00041e74 <lll_conn_flush>:
}
   41e74:	4770      	bx	lr
   41e76:	bf00      	nop

00041e78 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   41e78:	4805      	ldr	r0, [pc, #20]	; (41e90 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   41e7a:	4906      	ldr	r1, [pc, #24]	; (41e94 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   41e7c:	4a06      	ldr	r2, [pc, #24]	; (41e98 <lll_conn_prepare_reset+0x20>)
{
   41e7e:	b410      	push	{r4}
	trx_cnt = 0U;
   41e80:	2300      	movs	r3, #0
   41e82:	4c06      	ldr	r4, [pc, #24]	; (41e9c <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   41e84:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   41e86:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   41e88:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   41e8a:	8023      	strh	r3, [r4, #0]
}
   41e8c:	bc10      	pop	{r4}
   41e8e:	4770      	bx	lr
   41e90:	20007424 	.word	0x20007424
   41e94:	20007425 	.word	0x20007425
   41e98:	20007423 	.word	0x20007423
   41e9c:	200072bc 	.word	0x200072bc

00041ea0 <lll_conn_abort_cb>:
{
   41ea0:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   41ea2:	b1e8      	cbz	r0, 41ee0 <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   41ea4:	460d      	mov	r5, r1
   41ea6:	4604      	mov	r4, r0
   41ea8:	f7fe fe04 	bl	40ab4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   41eac:	2800      	cmp	r0, #0
   41eae:	db0a      	blt.n	41ec6 <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   41eb0:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   41eb2:	8923      	ldrh	r3, [r4, #8]
   41eb4:	8a51      	ldrh	r1, [r2, #18]
   41eb6:	3301      	adds	r3, #1
   41eb8:	440b      	add	r3, r1
   41eba:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   41ebc:	4628      	mov	r0, r5
}
   41ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   41ec2:	f7fe bb57 	b.w	40574 <lll_done>
	LL_ASSERT(err >= 0);
   41ec6:	4a0a      	ldr	r2, [pc, #40]	; (41ef0 <lll_conn_abort_cb+0x50>)
   41ec8:	490a      	ldr	r1, [pc, #40]	; (41ef4 <lll_conn_abort_cb+0x54>)
   41eca:	480b      	ldr	r0, [pc, #44]	; (41ef8 <lll_conn_abort_cb+0x58>)
   41ecc:	23aa      	movs	r3, #170	; 0xaa
   41ece:	f007 fe1b 	bl	49b08 <printk>
   41ed2:	4040      	eors	r0, r0
   41ed4:	f380 8811 	msr	BASEPRI, r0
   41ed8:	f04f 0003 	mov.w	r0, #3
   41edc:	df02      	svc	2
   41ede:	e7e7      	b.n	41eb0 <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   41ee0:	4806      	ldr	r0, [pc, #24]	; (41efc <lll_conn_abort_cb+0x5c>)
   41ee2:	f000 fe65 	bl	42bb0 <radio_isr_set>
}
   41ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   41eea:	f000 bf5b 	b.w	42da4 <radio_disable>
   41eee:	bf00      	nop
   41ef0:	0005386c 	.word	0x0005386c
   41ef4:	00053738 	.word	0x00053738
   41ef8:	00052bbc 	.word	0x00052bbc
   41efc:	00041da5 	.word	0x00041da5

00041f00 <lll_conn_rx_pkt_set>:
{
   41f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41f02:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   41f04:	2001      	movs	r0, #1
   41f06:	f7f5 ffef 	bl	37ee8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   41f0a:	4604      	mov	r4, r0
   41f0c:	b348      	cbz	r0, 41f62 <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   41f0e:	f895 6045 	ldrb.w	r6, [r5, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   41f12:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
	phy = lll->phy_rx;
   41f14:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   41f18:	2100      	movs	r1, #0
   41f1a:	4630      	mov	r0, r6
   41f1c:	f000 feae 	bl	42c7c <radio_phy_set>
	} else if (lll->enc_rx) {
   41f20:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   41f24:	0072      	lsls	r2, r6, #1
	} else if (lll->enc_rx) {
   41f26:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   41f28:	b2f9      	uxtb	r1, r7
   41f2a:	f042 0201 	orr.w	r2, r2, #1
						      node_rx->pdu));
   41f2e:	f104 041c 	add.w	r4, r4, #28
	} else if (lll->enc_rx) {
   41f32:	d50e      	bpl.n	41f52 <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   41f34:	3104      	adds	r1, #4
   41f36:	b2c9      	uxtb	r1, r1
   41f38:	2008      	movs	r0, #8
   41f3a:	f000 fee5 	bl	42d08 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   41f3e:	4622      	mov	r2, r4
   41f40:	4631      	mov	r1, r6
   41f42:	f105 005f 	add.w	r0, r5, #95	; 0x5f
   41f46:	f001 f9d5 	bl	432f4 <radio_ccm_rx_pkt_set>
}
   41f4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   41f4e:	f000 bf01 	b.w	42d54 <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   41f52:	2008      	movs	r0, #8
   41f54:	f000 fed8 	bl	42d08 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   41f58:	4620      	mov	r0, r4
}
   41f5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   41f5e:	f000 bef9 	b.w	42d54 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   41f62:	4a07      	ldr	r2, [pc, #28]	; (41f80 <lll_conn_rx_pkt_set+0x80>)
   41f64:	4907      	ldr	r1, [pc, #28]	; (41f84 <lll_conn_rx_pkt_set+0x84>)
   41f66:	4808      	ldr	r0, [pc, #32]	; (41f88 <lll_conn_rx_pkt_set+0x88>)
   41f68:	f240 235a 	movw	r3, #602	; 0x25a
   41f6c:	f007 fdcc 	bl	49b08 <printk>
   41f70:	4040      	eors	r0, r0
   41f72:	f380 8811 	msr	BASEPRI, r0
   41f76:	f04f 0003 	mov.w	r0, #3
   41f7a:	df02      	svc	2
   41f7c:	e7c7      	b.n	41f0e <lll_conn_rx_pkt_set+0xe>
   41f7e:	bf00      	nop
   41f80:	0005386c 	.word	0x0005386c
   41f84:	000537d4 	.word	0x000537d4
   41f88:	00052bbc 	.word	0x00052bbc

00041f8c <lll_conn_isr_tx>:
{
   41f8c:	b538      	push	{r3, r4, r5, lr}
   41f8e:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   41f90:	f7fe fbb8 	bl	40704 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   41f94:	2096      	movs	r0, #150	; 0x96
   41f96:	f001 f88d 	bl	430b4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   41f9a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   41f9e:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   41fa2:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   41fa6:	f000 0007 	and.w	r0, r0, #7
   41faa:	f002 0207 	and.w	r2, r2, #7
   41fae:	2100      	movs	r1, #0
   41fb0:	f000 ff9c 	bl	42eec <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   41fb4:	4620      	mov	r0, r4
   41fb6:	f7ff ffa3 	bl	41f00 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   41fba:	f000 ff13 	bl	42de4 <radio_is_ready>
   41fbe:	bb58      	cbnz	r0, 42018 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   41fc0:	f001 f992 	bl	432e8 <radio_tmr_tifs_base_get>
   41fc4:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   41fc6:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   41fca:	2101      	movs	r1, #1
   41fcc:	f000 0007 	and.w	r0, r0, #7
   41fd0:	f000 fed6 	bl	42d80 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   41fd4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   41fd8:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   41fdc:	4405      	add	r5, r0
   41fde:	2b02      	cmp	r3, #2
   41fe0:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   41fe4:	d016      	beq.n	42014 <lll_conn_isr_tx+0x88>
		return 40;
   41fe6:	2b04      	cmp	r3, #4
   41fe8:	bf0c      	ite	eq
   41fea:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   41fee:	2328      	movne	r3, #40	; 0x28
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   41ff0:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   41ff4:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   41ff8:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   41ffc:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   41ffe:	f000 febb 	bl	42d78 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   42002:	1a28      	subs	r0, r5, r0
   42004:	f001 f928 	bl	43258 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   42008:	4621      	mov	r1, r4
   4200a:	480a      	ldr	r0, [pc, #40]	; (42034 <lll_conn_isr_tx+0xa8>)
}
   4200c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   42010:	f000 bdce 	b.w	42bb0 <radio_isr_set>
	switch (phy) {
   42014:	2318      	movs	r3, #24
   42016:	e7eb      	b.n	41ff0 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   42018:	4a07      	ldr	r2, [pc, #28]	; (42038 <lll_conn_isr_tx+0xac>)
   4201a:	4908      	ldr	r1, [pc, #32]	; (4203c <lll_conn_isr_tx+0xb0>)
   4201c:	4808      	ldr	r0, [pc, #32]	; (42040 <lll_conn_isr_tx+0xb4>)
   4201e:	f240 2313 	movw	r3, #531	; 0x213
   42022:	f007 fd71 	bl	49b08 <printk>
   42026:	4040      	eors	r0, r0
   42028:	f380 8811 	msr	BASEPRI, r0
   4202c:	f04f 0003 	mov.w	r0, #3
   42030:	df02      	svc	2
   42032:	e7c5      	b.n	41fc0 <lll_conn_isr_tx+0x34>
   42034:	00042169 	.word	0x00042169
   42038:	0005386c 	.word	0x0005386c
   4203c:	000537dc 	.word	0x000537dc
   42040:	00052bbc 	.word	0x00052bbc

00042044 <lll_conn_tx_pkt_set>:
{
   42044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   42046:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   42048:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   4204c:	8f86      	ldrh	r6, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   4204e:	f001 0407 	and.w	r4, r1, #7
{
   42052:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   42054:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   42058:	4620      	mov	r0, r4
   4205a:	f000 fe0f 	bl	42c7c <radio_phy_set>
	} else if (lll->enc_tx) {
   4205e:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   42062:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   42064:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   42066:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   4206a:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   4206c:	d50d      	bpl.n	4208a <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   4206e:	3104      	adds	r1, #4
   42070:	b2c9      	uxtb	r1, r1
   42072:	2008      	movs	r0, #8
   42074:	f000 fe48 	bl	42d08 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   42078:	4639      	mov	r1, r7
   4207a:	f105 0080 	add.w	r0, r5, #128	; 0x80
   4207e:	f001 f977 	bl	43370 <radio_ccm_tx_pkt_set>
}
   42082:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   42086:	f000 be6b 	b.w	42d60 <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   4208a:	2008      	movs	r0, #8
   4208c:	f000 fe3c 	bl	42d08 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   42090:	4638      	mov	r0, r7
}
   42092:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   42096:	f000 be63 	b.w	42d60 <radio_pkt_tx_set>
   4209a:	bf00      	nop

0004209c <lll_conn_pdu_tx_prep>:
{
   4209c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   420a0:	4604      	mov	r4, r0
   420a2:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   420a4:	aa01      	add	r2, sp, #4
   420a6:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   420a8:	460f      	mov	r7, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   420aa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   420ac:	f7f1 ff8e 	bl	33fcc <memq_peek>
	if (lll->empty || !link) {
   420b0:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   420b4:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   420b6:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   420b8:	d43f      	bmi.n	4213a <lll_conn_pdu_tx_prep+0x9e>
   420ba:	b378      	cbz	r0, 4211c <lll_conn_pdu_tx_prep+0x80>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   420bc:	9b01      	ldr	r3, [sp, #4]
   420be:	f894 805d 	ldrb.w	r8, [r4, #93]	; 0x5d
   420c2:	f103 0904 	add.w	r9, r3, #4
		if (!lll->packet_tx_head_len) {
   420c6:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   420ca:	eb09 0508 	add.w	r5, r9, r8
		if (!lll->packet_tx_head_len) {
   420ce:	b913      	cbnz	r3, 420d6 <lll_conn_pdu_tx_prep+0x3a>
			lll->packet_tx_head_len = p->len;
   420d0:	786b      	ldrb	r3, [r5, #1]
   420d2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   420d6:	f1b8 0f00 	cmp.w	r8, #0
   420da:	d006      	beq.n	420ea <lll_conn_pdu_tx_prep+0x4e>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   420dc:	f819 2008 	ldrb.w	r2, [r9, r8]
   420e0:	2101      	movs	r1, #1
   420e2:	f361 0201 	bfi	r2, r1, #0, #2
   420e6:	f809 2008 	strb.w	r2, [r9, r8]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   420ea:	eba3 0308 	sub.w	r3, r3, r8
   420ee:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   420f0:	4620      	mov	r0, r4
   420f2:	f7fc f865 	bl	3e1c0 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   420f6:	786b      	ldrb	r3, [r5, #1]
   420f8:	4283      	cmp	r3, r0
   420fa:	d92f      	bls.n	4215c <lll_conn_pdu_tx_prep+0xc0>
			p->len = max_tx_octets;
   420fc:	7068      	strb	r0, [r5, #1]
{
   420fe:	2201      	movs	r2, #1
			p->md = 1U;
   42100:	f819 3008 	ldrb.w	r3, [r9, r8]
   42104:	f003 030f 	and.w	r3, r3, #15
   42108:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   4210c:	f809 3008 	strb.w	r3, [r9, r8]
		p->resv = 0U;
   42110:	2300      	movs	r3, #0
   42112:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   42114:	603d      	str	r5, [r7, #0]
}
   42116:	b003      	add	sp, #12
   42118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   4211c:	f043 0304 	orr.w	r3, r3, #4
   42120:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   42124:	f000 fe92 	bl	42e4c <radio_pkt_empty_get>
   42128:	4605      	mov	r5, r0
			p->md = 0U;
   4212a:	782b      	ldrb	r3, [r5, #0]
   4212c:	f36f 1304 	bfc	r3, #4, #1
   42130:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   42132:	603d      	str	r5, [r7, #0]
}
   42134:	b003      	add	sp, #12
   42136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   4213a:	f043 0304 	orr.w	r3, r3, #4
   4213e:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   42142:	f000 fe83 	bl	42e4c <radio_pkt_empty_get>
   42146:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   42148:	2e00      	cmp	r6, #0
   4214a:	d0ee      	beq.n	4212a <lll_conn_pdu_tx_prep+0x8e>
			p->md = 1U;
   4214c:	7803      	ldrb	r3, [r0, #0]
   4214e:	f043 0310 	orr.w	r3, r3, #16
   42152:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   42154:	603d      	str	r5, [r7, #0]
}
   42156:	b003      	add	sp, #12
   42158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   4215c:	6832      	ldr	r2, [r6, #0]
   4215e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   42160:	429a      	cmp	r2, r3
   42162:	d1cc      	bne.n	420fe <lll_conn_pdu_tx_prep+0x62>
   42164:	2200      	movs	r2, #0
   42166:	e7cb      	b.n	42100 <lll_conn_pdu_tx_prep+0x64>

00042168 <lll_conn_isr_rx>:
{
   42168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4216c:	b083      	sub	sp, #12
   4216e:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   42170:	f000 fe42 	bl	42df8 <radio_is_done>
	if (trx_done) {
   42174:	b2c0      	uxtb	r0, r0
   42176:	b950      	cbnz	r0, 4218e <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   42178:	f7fe facc 	bl	40714 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   4217c:	48c1      	ldr	r0, [pc, #772]	; (42484 <lll_conn_isr_rx+0x31c>)
   4217e:	4621      	mov	r1, r4
   42180:	f000 fd16 	bl	42bb0 <radio_isr_set>
}
   42184:	b003      	add	sp, #12
   42186:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		radio_disable();
   4218a:	f000 be0b 	b.w	42da4 <radio_disable>
		crc_ok = radio_crc_is_valid();
   4218e:	f000 fe53 	bl	42e38 <radio_crc_is_valid>
   42192:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   42194:	f000 ff32 	bl	42ffc <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   42198:	f7fe fabc 	bl	40714 <lll_isr_rx_status_reset>
	trx_cnt++;
   4219c:	4aba      	ldr	r2, [pc, #744]	; (42488 <lll_conn_isr_rx+0x320>)
   4219e:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   421a0:	2001      	movs	r0, #1
	trx_cnt++;
   421a2:	4403      	add	r3, r0
   421a4:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   421a6:	f7f5 fe9f 	bl	37ee8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   421aa:	4606      	mov	r6, r0
   421ac:	2800      	cmp	r0, #0
   421ae:	f000 80fa 	beq.w	423a6 <lll_conn_isr_rx+0x23e>
	if (crc_ok) {
   421b2:	2d00      	cmp	r5, #0
   421b4:	d14d      	bne.n	42252 <lll_conn_isr_rx+0xea>
		if (crc_expire == 0U) {
   421b6:	4bb5      	ldr	r3, [pc, #724]	; (4248c <lll_conn_isr_rx+0x324>)
   421b8:	781f      	ldrb	r7, [r3, #0]
   421ba:	2f00      	cmp	r7, #0
   421bc:	f040 80bb 	bne.w	42336 <lll_conn_isr_rx+0x1ce>
		crc_expire--;
   421c0:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   421c2:	a901      	add	r1, sp, #4
   421c4:	4620      	mov	r0, r4
		crc_expire--;
   421c6:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   421c8:	f7ff ff68 	bl	4209c <lll_conn_pdu_tx_prep>
	is_rx_enqueue = 0U;
   421cc:	2700      	movs	r7, #0
	pdu_data_tx->sn = lll->sn;
   421ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
	tx_release = NULL;
   421d2:	463d      	mov	r5, r7
		radio_tmr_tifs_set(EVENT_IFS_US);
   421d4:	2096      	movs	r0, #150	; 0x96
   421d6:	f000 ff6d 	bl	430b4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   421da:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   421de:	f000 0007 	and.w	r0, r0, #7
   421e2:	f000 fe3b 	bl	42e5c <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   421e6:	48aa      	ldr	r0, [pc, #680]	; (42490 <lll_conn_isr_rx+0x328>)
   421e8:	4621      	mov	r1, r4
   421ea:	f000 fce1 	bl	42bb0 <radio_isr_set>
		radio_tmr_end_capture();
   421ee:	f001 f86d 	bl	432cc <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   421f2:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	pdu_data_tx->nesn = lll->nesn;
   421f6:	f898 1000 	ldrb.w	r1, [r8]
   421fa:	f3c2 0340 	ubfx	r3, r2, #1, #1
   421fe:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   42200:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   42204:	f021 010c 	bic.w	r1, r1, #12
   42208:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   4220c:	430b      	orrs	r3, r1
   4220e:	f888 3000 	strb.w	r3, [r8]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   42212:	4641      	mov	r1, r8
   42214:	4620      	mov	r0, r4
   42216:	f7ff ff15 	bl	42044 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   4221a:	f000 fde3 	bl	42de4 <radio_is_ready>
   4221e:	2800      	cmp	r0, #0
   42220:	f040 80fb 	bne.w	4241a <lll_conn_isr_rx+0x2b2>
	if (!radio_tmr_aa_restore()) {
   42224:	f001 f846 	bl	432b4 <radio_tmr_aa_restore>
   42228:	2800      	cmp	r0, #0
   4222a:	d07a      	beq.n	42322 <lll_conn_isr_rx+0x1ba>
	if (tx_release) {
   4222c:	2d00      	cmp	r5, #0
   4222e:	d07e      	beq.n	4232e <lll_conn_isr_rx+0x1c6>
		LL_ASSERT(lll->handle != 0xFFFF);
   42230:	89a0      	ldrh	r0, [r4, #12]
   42232:	f64f 73ff 	movw	r3, #65535	; 0xffff
   42236:	4298      	cmp	r0, r3
   42238:	f000 80fe 	beq.w	42438 <lll_conn_isr_rx+0x2d0>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   4223c:	4629      	mov	r1, r5
   4223e:	f7fb fd1f 	bl	3dc80 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   42242:	2f00      	cmp	r7, #0
   42244:	f040 8092 	bne.w	4236c <lll_conn_isr_rx+0x204>
}
   42248:	b003      	add	sp, #12
   4224a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		ull_rx_sched();
   4224e:	f7f5 be91 	b.w	37f74 <ull_rx_sched>
	if (pdu_data_rx->nesn != lll->sn) {
   42252:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42256:	7f32      	ldrb	r2, [r6, #28]
   42258:	f003 0101 	and.w	r1, r3, #1
   4225c:	f3c2 0080 	ubfx	r0, r2, #2, #1
   42260:	4288      	cmp	r0, r1
   42262:	f000 80b0 	beq.w	423c6 <lll_conn_isr_rx+0x25e>
		if (lll->role) {
   42266:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   4226a:	f081 0101 	eor.w	r1, r1, #1
   4226e:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   42272:	2a00      	cmp	r2, #0
		lll->sn++;
   42274:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   42278:	da05      	bge.n	42286 <lll_conn_isr_rx+0x11e>
			lll->periph.latency_enabled = 1;
   4227a:	f894 3020 	ldrb.w	r3, [r4, #32]
   4227e:	f043 0304 	orr.w	r3, r3, #4
   42282:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   42286:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   4228a:	f013 0804 	ands.w	r8, r3, #4
   4228e:	f040 80e2 	bne.w	42456 <lll_conn_isr_rx+0x2ee>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   42292:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   42296:	aa01      	add	r2, sp, #4
   42298:	f7f1 fe98 	bl	33fcc <memq_peek>
		if (link) {
   4229c:	4605      	mov	r5, r0
   4229e:	2800      	cmp	r0, #0
   422a0:	f000 8106 	beq.w	424b0 <lll_conn_isr_rx+0x348>
			pdu_data_tx = (void *)(tx->pdu +
   422a4:	9f01      	ldr	r7, [sp, #4]
					       lll->packet_tx_head_offset);
   422a6:	f894 905d 	ldrb.w	r9, [r4, #93]	; 0x5d
			pdu_data_tx = (void *)(tx->pdu +
   422aa:	3704      	adds	r7, #4
   422ac:	eb07 0309 	add.w	r3, r7, r9
			pdu_data_tx_len = pdu_data_tx->len;
   422b0:	785a      	ldrb	r2, [r3, #1]
			if (pdu_data_tx_len != 0U) {
   422b2:	b172      	cbz	r2, 422d2 <lll_conn_isr_rx+0x16a>
				if (lll->enc_tx) {
   422b4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   422b8:	06db      	lsls	r3, r3, #27
   422ba:	d50a      	bpl.n	422d2 <lll_conn_isr_rx+0x16a>
					lll->ccm_tx.counter++;
   422bc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   422c0:	3301      	adds	r3, #1
   422c2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   422c6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   422ca:	f143 0300 	adc.w	r3, r3, #0
   422ce:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   422d2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   422d6:	444a      	add	r2, r9
   422d8:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   422da:	429a      	cmp	r2, r3
   422dc:	f0c0 80ef 	bcc.w	424be <lll_conn_isr_rx+0x356>
			} else if (offset == lll->packet_tx_head_len) {
   422e0:	f000 8117 	beq.w	42512 <lll_conn_isr_rx+0x3aa>
				LL_ASSERT(0);
   422e4:	4a6b      	ldr	r2, [pc, #428]	; (42494 <lll_conn_isr_rx+0x32c>)
   422e6:	496c      	ldr	r1, [pc, #432]	; (42498 <lll_conn_isr_rx+0x330>)
   422e8:	486c      	ldr	r0, [pc, #432]	; (4249c <lll_conn_isr_rx+0x334>)
   422ea:	f240 33a3 	movw	r3, #931	; 0x3a3
   422ee:	f007 fc0b 	bl	49b08 <printk>
   422f2:	4040      	eors	r0, r0
   422f4:	f380 8811 	msr	BASEPRI, r0
   422f8:	f04f 0003 	mov.w	r0, #3
   422fc:	df02      	svc	2
	tx_release = NULL;
   422fe:	2500      	movs	r5, #0
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   42300:	f994 301d 	ldrsb.w	r3, [r4, #29]
   42304:	2b00      	cmp	r3, #0
   42306:	f2c0 8100 	blt.w	4250a <lll_conn_isr_rx+0x3a2>
			    !pdu_data_rx->md) {
   4230a:	7f32      	ldrb	r2, [r6, #28]
   4230c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   42310:	06d0      	lsls	r0, r2, #27
				*is_done = !pdu_data_tx->md;
   42312:	bf5e      	ittt	pl
   42314:	f817 8009 	ldrbpl.w	r8, [r7, r9]
   42318:	f088 0810 	eorpl.w	r8, r8, #16
   4231c:	f3c8 1800 	ubfxpl	r8, r8, #4, #1
   42320:	e054      	b.n	423cc <lll_conn_isr_rx+0x264>
		radio_tmr_aa_save(radio_tmr_aa_get());
   42322:	f000 ffbb 	bl	4329c <radio_tmr_aa_get>
   42326:	f000 ffbf 	bl	432a8 <radio_tmr_aa_save>
	if (tx_release) {
   4232a:	2d00      	cmp	r5, #0
   4232c:	d180      	bne.n	42230 <lll_conn_isr_rx+0xc8>
	if (is_rx_enqueue) {
   4232e:	b9ef      	cbnz	r7, 4236c <lll_conn_isr_rx+0x204>
}
   42330:	b003      	add	sp, #12
   42332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		crc_expire--;
   42336:	3f01      	subs	r7, #1
   42338:	b2ff      	uxtb	r7, r7
   4233a:	701f      	strb	r7, [r3, #0]
	is_empty_pdu_tx_retry = lll->empty;
   4233c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   42340:	a901      	add	r1, sp, #4
   42342:	4620      	mov	r0, r4
	is_empty_pdu_tx_retry = lll->empty;
   42344:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   42348:	f7ff fea8 	bl	4209c <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   4234c:	2f00      	cmp	r7, #0
   4234e:	f47f af3d 	bne.w	421cc <lll_conn_isr_rx+0x64>
		radio_isr_set(isr_done, param);
   42352:	484c      	ldr	r0, [pc, #304]	; (42484 <lll_conn_isr_rx+0x31c>)
   42354:	4621      	mov	r1, r4
   42356:	f000 fc2b 	bl	42bb0 <radio_isr_set>
		} else if (!lll->role) {
   4235a:	f994 301d 	ldrsb.w	r3, [r4, #29]
   4235e:	2b00      	cmp	r3, #0
   42360:	da13      	bge.n	4238a <lll_conn_isr_rx+0x222>
			radio_switch_complete_and_disable();
   42362:	f000 fe23 	bl	42fac <radio_switch_complete_and_disable>
	pdu_data_tx->sn = lll->sn;
   42366:	f8dd 8004 	ldr.w	r8, [sp, #4]
   4236a:	e742      	b.n	421f2 <lll_conn_isr_rx+0x8a>
		ull_pdu_rx_alloc();
   4236c:	f7f5 fddc 	bl	37f28 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   42370:	2303      	movs	r3, #3
   42372:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   42374:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   42376:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   42378:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   4237a:	4631      	mov	r1, r6
   4237c:	f7f5 fdea 	bl	37f54 <ull_rx_put>
}
   42380:	b003      	add	sp, #12
   42382:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		ull_rx_sched();
   42386:	f7f5 bdf5 	b.w	37f74 <ull_rx_sched>
			radio_disable();
   4238a:	f000 fd0b 	bl	42da4 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   4238e:	f000 fd29 	bl	42de4 <radio_is_ready>
   42392:	2800      	cmp	r0, #0
   42394:	f040 80a8 	bne.w	424e8 <lll_conn_isr_rx+0x380>
			lll->empty = is_empty_pdu_tx_retry;
   42398:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   4239c:	f369 0382 	bfi	r3, r9, #2, #1
   423a0:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			goto lll_conn_isr_rx_exit;
   423a4:	e73e      	b.n	42224 <lll_conn_isr_rx+0xbc>
	LL_ASSERT(node_rx);
   423a6:	4a3b      	ldr	r2, [pc, #236]	; (42494 <lll_conn_isr_rx+0x32c>)
   423a8:	493d      	ldr	r1, [pc, #244]	; (424a0 <lll_conn_isr_rx+0x338>)
   423aa:	483c      	ldr	r0, [pc, #240]	; (4249c <lll_conn_isr_rx+0x334>)
   423ac:	23f2      	movs	r3, #242	; 0xf2
   423ae:	f007 fbab 	bl	49b08 <printk>
   423b2:	4040      	eors	r0, r0
   423b4:	f380 8811 	msr	BASEPRI, r0
   423b8:	f04f 0003 	mov.w	r0, #3
   423bc:	df02      	svc	2
	if (crc_ok) {
   423be:	2d00      	cmp	r5, #0
   423c0:	f43f aef9 	beq.w	421b6 <lll_conn_isr_rx+0x4e>
   423c4:	e745      	b.n	42252 <lll_conn_isr_rx+0xea>
	is_done = 0U;
   423c6:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   423ca:	4645      	mov	r5, r8
	if ((pdu_data_rx->sn == lll->nesn) &&
   423cc:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   423d0:	f3c3 0140 	ubfx	r1, r3, #1, #1
   423d4:	428a      	cmp	r2, r1
   423d6:	d075      	beq.n	424c4 <lll_conn_isr_rx+0x35c>
	is_rx_enqueue = 0U;
   423d8:	2700      	movs	r7, #0
		crc_expire = 0U;
   423da:	4a2c      	ldr	r2, [pc, #176]	; (4248c <lll_conn_isr_rx+0x324>)
   423dc:	2100      	movs	r1, #0
	is_empty_pdu_tx_retry = lll->empty;
   423de:	f3c3 0980 	ubfx	r9, r3, #2, #1
		crc_valid = 1U;
   423e2:	4b30      	ldr	r3, [pc, #192]	; (424a4 <lll_conn_isr_rx+0x33c>)
		crc_expire = 0U;
   423e4:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   423e6:	4620      	mov	r0, r4
		crc_valid = 1U;
   423e8:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   423ea:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   423ec:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   423ee:	f7ff fe55 	bl	4209c <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   423f2:	f1b8 0f00 	cmp.w	r8, #0
   423f6:	d1ac      	bne.n	42352 <lll_conn_isr_rx+0x1ea>
   423f8:	7f33      	ldrb	r3, [r6, #28]
			      (pdu_data_tx->md == 0) &&
   423fa:	f8dd 8004 	ldr.w	r8, [sp, #4]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   423fe:	06da      	lsls	r2, r3, #27
   42400:	f53f aee8 	bmi.w	421d4 <lll_conn_isr_rx+0x6c>
			      (pdu_data_tx->md == 0) &&
   42404:	f898 3000 	ldrb.w	r3, [r8]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   42408:	06db      	lsls	r3, r3, #27
   4240a:	f53f aee3 	bmi.w	421d4 <lll_conn_isr_rx+0x6c>
			      (pdu_data_tx->md == 0) &&
   4240e:	f898 3001 	ldrb.w	r3, [r8, #1]
   42412:	2b00      	cmp	r3, #0
   42414:	f47f aede 	bne.w	421d4 <lll_conn_isr_rx+0x6c>
   42418:	e79b      	b.n	42352 <lll_conn_isr_rx+0x1ea>
	LL_ASSERT(!radio_is_ready());
   4241a:	4a1e      	ldr	r2, [pc, #120]	; (42494 <lll_conn_isr_rx+0x32c>)
   4241c:	4922      	ldr	r1, [pc, #136]	; (424a8 <lll_conn_isr_rx+0x340>)
   4241e:	481f      	ldr	r0, [pc, #124]	; (4249c <lll_conn_isr_rx+0x334>)
   42420:	f240 1369 	movw	r3, #361	; 0x169
   42424:	f007 fb70 	bl	49b08 <printk>
   42428:	4040      	eors	r0, r0
   4242a:	f380 8811 	msr	BASEPRI, r0
   4242e:	f04f 0003 	mov.w	r0, #3
   42432:	df02      	svc	2
   42434:	e6f6      	b.n	42224 <lll_conn_isr_rx+0xbc>
	is_rx_enqueue = 0U;
   42436:	2700      	movs	r7, #0
		LL_ASSERT(lll->handle != 0xFFFF);
   42438:	4a16      	ldr	r2, [pc, #88]	; (42494 <lll_conn_isr_rx+0x32c>)
   4243a:	491c      	ldr	r1, [pc, #112]	; (424ac <lll_conn_isr_rx+0x344>)
   4243c:	4817      	ldr	r0, [pc, #92]	; (4249c <lll_conn_isr_rx+0x334>)
   4243e:	f44f 73bc 	mov.w	r3, #376	; 0x178
   42442:	f007 fb61 	bl	49b08 <printk>
   42446:	4040      	eors	r0, r0
   42448:	f380 8811 	msr	BASEPRI, r0
   4244c:	f04f 0003 	mov.w	r0, #3
   42450:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   42452:	89a0      	ldrh	r0, [r4, #12]
   42454:	e6f2      	b.n	4223c <lll_conn_isr_rx+0xd4>
			lll->empty = 0;
   42456:	f36f 0382 	bfc	r3, #2, #1
   4245a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   4245e:	f000 fcf5 	bl	42e4c <radio_pkt_empty_get>
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   42462:	f994 301d 	ldrsb.w	r3, [r4, #29]
   42466:	2b00      	cmp	r3, #0
   42468:	db22      	blt.n	424b0 <lll_conn_isr_rx+0x348>
			    !pdu_data_rx->md) {
   4246a:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   4246c:	f012 0510 	ands.w	r5, r2, #16
   42470:	d11f      	bne.n	424b2 <lll_conn_isr_rx+0x34a>
				*is_done = !pdu_data_tx->md;
   42472:	f890 8000 	ldrb.w	r8, [r0]
   42476:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   4247a:	f088 0810 	eor.w	r8, r8, #16
   4247e:	f3c8 1800 	ubfx	r8, r8, #4, #1
   42482:	e7a3      	b.n	423cc <lll_conn_isr_rx+0x264>
   42484:	00041da5 	.word	0x00041da5
   42488:	200072bc 	.word	0x200072bc
   4248c:	20007425 	.word	0x20007425
   42490:	00041f8d 	.word	0x00041f8d
   42494:	0005386c 	.word	0x0005386c
   42498:	00052c1c 	.word	0x00052c1c
   4249c:	00052bbc 	.word	0x00052bbc
   424a0:	000537d4 	.word	0x000537d4
   424a4:	20007424 	.word	0x20007424
   424a8:	000537dc 	.word	0x000537dc
   424ac:	000538c0 	.word	0x000538c0
   424b0:	7f32      	ldrb	r2, [r6, #28]
   424b2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	is_done = 0U;
   424b6:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   424ba:	4645      	mov	r5, r8
   424bc:	e786      	b.n	423cc <lll_conn_isr_rx+0x264>
				lll->packet_tx_head_offset = offset;
   424be:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
   424c2:	e71c      	b.n	422fe <lll_conn_isr_rx+0x196>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   424c4:	2003      	movs	r0, #3
   424c6:	f7f5 fd0f 	bl	37ee8 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   424ca:	b1d8      	cbz	r0, 42504 <lll_conn_isr_rx+0x39c>
		lll->nesn++;
   424cc:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   424d0:	f083 0302 	eor.w	r3, r3, #2
   424d4:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   424d8:	7f73      	ldrb	r3, [r6, #29]
   424da:	b19b      	cbz	r3, 42504 <lll_conn_isr_rx+0x39c>
			if (lll->enc_rx) {
   424dc:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   424e0:	0719      	lsls	r1, r3, #28
   424e2:	d424      	bmi.n	4252e <lll_conn_isr_rx+0x3c6>
			*is_rx_enqueue = 1U;
   424e4:	2701      	movs	r7, #1
   424e6:	e778      	b.n	423da <lll_conn_isr_rx+0x272>
			LL_ASSERT(!radio_is_ready());
   424e8:	4a43      	ldr	r2, [pc, #268]	; (425f8 <lll_conn_isr_rx+0x490>)
   424ea:	4944      	ldr	r1, [pc, #272]	; (425fc <lll_conn_isr_rx+0x494>)
   424ec:	4844      	ldr	r0, [pc, #272]	; (42600 <lll_conn_isr_rx+0x498>)
   424ee:	f44f 7398 	mov.w	r3, #304	; 0x130
   424f2:	f007 fb09 	bl	49b08 <printk>
   424f6:	4040      	eors	r0, r0
   424f8:	f380 8811 	msr	BASEPRI, r0
   424fc:	f04f 0003 	mov.w	r0, #3
   42500:	df02      	svc	2
   42502:	e749      	b.n	42398 <lll_conn_isr_rx+0x230>
   42504:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42508:	e766      	b.n	423d8 <lll_conn_isr_rx+0x270>
   4250a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   4250e:	7f32      	ldrb	r2, [r6, #28]
   42510:	e75c      	b.n	423cc <lll_conn_isr_rx+0x264>
				lll->packet_tx_head_len = 0;
   42512:	2200      	movs	r2, #0
   42514:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   42518:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   4251a:	f104 0148 	add.w	r1, r4, #72	; 0x48
   4251e:	f7f1 fd5d 	bl	33fdc <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   42522:	9b01      	ldr	r3, [sp, #4]
   42524:	681a      	ldr	r2, [r3, #0]
   42526:	602a      	str	r2, [r5, #0]
				tx->next = link;
   42528:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   4252a:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   4252c:	e6e8      	b.n	42300 <lll_conn_isr_rx+0x198>
				done = radio_ccm_is_done();
   4252e:	f000 ff47 	bl	433c0 <radio_ccm_is_done>
				LL_ASSERT(done);
   42532:	2800      	cmp	r0, #0
   42534:	d04a      	beq.n	425cc <lll_conn_isr_rx+0x464>
				bool mic_failure = !radio_ccm_mic_is_valid();
   42536:	f000 ff65 	bl	43404 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   4253a:	bba8      	cbnz	r0, 425a8 <lll_conn_isr_rx+0x440>
				    lll->ccm_rx.counter == 0 &&
   4253c:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   42540:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
				if (mic_failure &&
   42544:	4313      	orrs	r3, r2
   42546:	d104      	bne.n	42552 <lll_conn_isr_rx+0x3ea>
				    (pdu_data_rx->ll_id ==
   42548:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   4254a:	f003 0303 	and.w	r3, r3, #3
   4254e:	2b03      	cmp	r3, #3
   42550:	d013      	beq.n	4257a <lll_conn_isr_rx+0x412>
					mic_state = LLL_CONN_MIC_FAIL;
   42552:	4b2c      	ldr	r3, [pc, #176]	; (42604 <lll_conn_isr_rx+0x49c>)
   42554:	2202      	movs	r2, #2
   42556:	701a      	strb	r2, [r3, #0]
	if (!radio_tmr_aa_restore()) {
   42558:	f000 feac 	bl	432b4 <radio_tmr_aa_restore>
   4255c:	2800      	cmp	r0, #0
   4255e:	d043      	beq.n	425e8 <lll_conn_isr_rx+0x480>
	if (tx_release) {
   42560:	2d00      	cmp	r5, #0
   42562:	f43f aee5 	beq.w	42330 <lll_conn_isr_rx+0x1c8>
		LL_ASSERT(lll->handle != 0xFFFF);
   42566:	89a0      	ldrh	r0, [r4, #12]
   42568:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4256c:	4298      	cmp	r0, r3
   4256e:	f43f af62 	beq.w	42436 <lll_conn_isr_rx+0x2ce>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   42572:	4629      	mov	r1, r5
   42574:	f7fb fb84 	bl	3dc80 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   42578:	e666      	b.n	42248 <lll_conn_isr_rx+0xe0>
						radio_pkt_scratch_get();
   4257a:	f000 fc6b 	bl	42e54 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   4257e:	7843      	ldrb	r3, [r0, #1]
   42580:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   42582:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   42584:	d8e5      	bhi.n	42552 <lll_conn_isr_rx+0x3ea>
						memcpy(pdu_data_rx,
   42586:	3303      	adds	r3, #3
   42588:	b2da      	uxtb	r2, r3
   4258a:	f106 001c 	add.w	r0, r6, #28
   4258e:	f009 fbea 	bl	4bd66 <memcpy>
						lll->ccm_rx.counter--;
   42592:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   42596:	3b01      	subs	r3, #1
   42598:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   4259c:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   425a0:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   425a4:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   425a8:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   425ac:	3301      	adds	r3, #1
   425ae:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   425b2:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
						lll->ccm_rx.counter--;
   425b6:	f104 026f 	add.w	r2, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   425ba:	f143 0300 	adc.w	r3, r3, #0
   425be:	6053      	str	r3, [r2, #4]
				mic_state = LLL_CONN_MIC_PASS;
   425c0:	4b10      	ldr	r3, [pc, #64]	; (42604 <lll_conn_isr_rx+0x49c>)
   425c2:	2201      	movs	r2, #1
   425c4:	701a      	strb	r2, [r3, #0]
		if (err) {
   425c6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   425ca:	e78b      	b.n	424e4 <lll_conn_isr_rx+0x37c>
				LL_ASSERT(done);
   425cc:	4a0a      	ldr	r2, [pc, #40]	; (425f8 <lll_conn_isr_rx+0x490>)
   425ce:	490e      	ldr	r1, [pc, #56]	; (42608 <lll_conn_isr_rx+0x4a0>)
   425d0:	480b      	ldr	r0, [pc, #44]	; (42600 <lll_conn_isr_rx+0x498>)
   425d2:	f240 33be 	movw	r3, #958	; 0x3be
   425d6:	f007 fa97 	bl	49b08 <printk>
   425da:	4040      	eors	r0, r0
   425dc:	f380 8811 	msr	BASEPRI, r0
   425e0:	f04f 0003 	mov.w	r0, #3
   425e4:	df02      	svc	2
   425e6:	e7a6      	b.n	42536 <lll_conn_isr_rx+0x3ce>
		radio_tmr_aa_save(radio_tmr_aa_get());
   425e8:	f000 fe58 	bl	4329c <radio_tmr_aa_get>
   425ec:	f000 fe5c 	bl	432a8 <radio_tmr_aa_save>
	if (tx_release) {
   425f0:	2d00      	cmp	r5, #0
   425f2:	d1b8      	bne.n	42566 <lll_conn_isr_rx+0x3fe>
   425f4:	e69c      	b.n	42330 <lll_conn_isr_rx+0x1c8>
   425f6:	bf00      	nop
   425f8:	0005386c 	.word	0x0005386c
   425fc:	000537dc 	.word	0x000537dc
   42600:	00052bbc 	.word	0x00052bbc
   42604:	20007423 	.word	0x20007423
   42608:	000538b8 	.word	0x000538b8

0004260c <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   4260c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   42610:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   42612:	89a2      	ldrh	r2, [r4, #12]
   42614:	f64f 73ff 	movw	r3, #65535	; 0xffff
   42618:	429a      	cmp	r2, r3
{
   4261a:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   4261c:	f000 80d2 	beq.w	427c4 <prepare_cb+0x1b8>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   42620:	4605      	mov	r5, r0
   42622:	f7ff fc29 	bl	41e78 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   42626:	892b      	ldrh	r3, [r5, #8]
   42628:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   4262a:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   4262c:	441a      	add	r2, r3
   4262e:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   42630:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   42632:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   42634:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   42636:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   42638:	1c41      	adds	r1, r0, #1
   4263a:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   4263c:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   4263e:	f04f 0100 	mov.w	r1, #0
   42642:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   42644:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   42648:	f100 808e 	bmi.w	42768 <prepare_cb+0x15c>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   4264c:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   42650:	460b      	mov	r3, r1
   42652:	7fa1      	ldrb	r1, [r4, #30]
   42654:	9000      	str	r0, [sp, #0]
   42656:	f104 001f 	add.w	r0, r4, #31
   4265a:	f7fc fabd 	bl	3ebd8 <lll_chan_sel_1>
   4265e:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
   42660:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   42664:	4413      	add	r3, r2
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
   42666:	e9d4 020d 	ldrd	r0, r2, [r4, #52]	; 0x34
	lll->periph.window_widening_prepare_us = 0;
   4266a:	2100      	movs	r1, #0
	lll->periph.window_size_event_us +=
   4266c:	4402      	add	r2, r0
	lll->periph.window_widening_prepare_us = 0;
   4266e:	62e1      	str	r1, [r4, #44]	; 0x2c
		lll->periph.window_size_prepare_us;
	lll->periph.window_size_prepare_us = 0;
   42670:	6361      	str	r1, [r4, #52]	; 0x34
   42672:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	lll->periph.window_size_event_us +=
   42674:	63a2      	str	r2, [r4, #56]	; 0x38
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   42676:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   4267a:	428b      	cmp	r3, r1
   4267c:	bf28      	it	cs
   4267e:	460b      	movcs	r3, r1
   42680:	f012 0204 	ands.w	r2, r2, #4
   42684:	6323      	str	r3, [r4, #48]	; 0x30
   42686:	f000 808f 	beq.w	427a8 <prepare_cb+0x19c>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   4268a:	f000 fad3 	bl	42c34 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   4268e:	2000      	movs	r0, #0
   42690:	f000 fb04 	bl	42c9c <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   42694:	4620      	mov	r0, r4
   42696:	f7ff fc33 	bl	41f00 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   4269a:	1d20      	adds	r0, r4, #4
   4269c:	f000 fb1c 	bl	42cd8 <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   426a0:	8923      	ldrh	r3, [r4, #8]
   426a2:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   426a4:	f240 605b 	movw	r0, #1627	; 0x65b
   426a8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   426ac:	f000 fbb8 	bl	42e20 <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
   426b0:	4630      	mov	r0, r6
   426b2:	f7fd ffe1 	bl	40678 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   426b6:	4621      	mov	r1, r4
   426b8:	4847      	ldr	r0, [pc, #284]	; (427d8 <prepare_cb+0x1cc>)
   426ba:	f000 fa79 	bl	42bb0 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   426be:	2096      	movs	r0, #150	; 0x96
   426c0:	f000 fcf8 	bl	430b4 <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   426c4:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   426c8:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   426cc:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   426d0:	2100      	movs	r1, #0
   426d2:	f002 0207 	and.w	r2, r2, #7
   426d6:	f000 0007 	and.w	r0, r0, #7
   426da:	f000 fc07 	bl	42eec <radio_switch_complete_and_tx>
		radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */
	}

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   426de:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   426e0:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   426e2:	4638      	mov	r0, r7
   426e4:	f7fd ffaa 	bl	4063c <lll_event_offset_get>
   426e8:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   426ea:	686a      	ldr	r2, [r5, #4]
   426ec:	f106 0109 	add.w	r1, r6, #9
   426f0:	2000      	movs	r0, #0
   426f2:	f000 fceb 	bl	430cc <radio_tmr_start>
   426f6:	4680      	mov	r8, r0

	radio_tmr_aa_capture();
   426f8:	f000 fdbc 	bl	43274 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   426fc:	2000      	movs	r0, #0
   426fe:	f000 fdd3 	bl	432a8 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   42702:	6b23      	ldr	r3, [r4, #48]	; 0x30
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   42704:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   42708:	f103 0230 	add.w	r2, r3, #48	; 0x30
	hcto = remainder_us +
   4270c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   4270e:	f000 0007 	and.w	r0, r0, #7
   42712:	2101      	movs	r1, #1
	hcto = remainder_us +
   42714:	eb03 0542 	add.w	r5, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   42718:	f000 fb30 	bl	42d7c <radio_rx_ready_delay_get>
	hcto = remainder_us +
   4271c:	4445      	add	r5, r8
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   4271e:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   42720:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   42724:	f000 0007 	and.w	r0, r0, #7
   42728:	2802      	cmp	r0, #2
   4272a:	d03b      	beq.n	427a4 <prepare_cb+0x198>
		return 40;
   4272c:	2804      	cmp	r0, #4
   4272e:	bf0c      	ite	eq
   42730:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   42734:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   42736:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   42738:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   4273a:	f000 fb21 	bl	42d80 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   4273e:	4428      	add	r0, r5
   42740:	f000 fd8a 	bl	43258 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   42744:	89a1      	ldrh	r1, [r4, #12]
   42746:	3105      	adds	r1, #5
   42748:	4632      	mov	r2, r6
   4274a:	b2c9      	uxtb	r1, r1
   4274c:	4638      	mov	r0, r7
   4274e:	f7fd ff83 	bl	40658 <lll_preempt_calc>
   42752:	b188      	cbz	r0, 42778 <prepare_cb+0x16c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   42754:	4821      	ldr	r0, [pc, #132]	; (427dc <prepare_cb+0x1d0>)
   42756:	4621      	mov	r1, r4
   42758:	f000 fa2a 	bl	42bb0 <radio_isr_set>
		radio_disable();
   4275c:	f000 fb22 	bl	42da4 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   42760:	2000      	movs	r0, #0
   42762:	b002      	add	sp, #8
   42764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   42768:	460a      	mov	r2, r1
   4276a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4276e:	8be1      	ldrh	r1, [r4, #30]
   42770:	f7fc fa7e 	bl	3ec70 <lll_chan_sel_2>
   42774:	4606      	mov	r6, r0
   42776:	e773      	b.n	42660 <prepare_cb+0x54>
		ret = lll_prepare_done(lll);
   42778:	4620      	mov	r0, r4
   4277a:	f7fd fef9 	bl	40570 <lll_prepare_done>
		LL_ASSERT(!ret);
   4277e:	2800      	cmp	r0, #0
   42780:	d0ee      	beq.n	42760 <prepare_cb+0x154>
   42782:	4a17      	ldr	r2, [pc, #92]	; (427e0 <prepare_cb+0x1d4>)
   42784:	4917      	ldr	r1, [pc, #92]	; (427e4 <prepare_cb+0x1d8>)
   42786:	4818      	ldr	r0, [pc, #96]	; (427e8 <prepare_cb+0x1dc>)
   42788:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   4278c:	f007 f9bc 	bl	49b08 <printk>
   42790:	4040      	eors	r0, r0
   42792:	f380 8811 	msr	BASEPRI, r0
   42796:	f04f 0003 	mov.w	r0, #3
   4279a:	df02      	svc	2
}
   4279c:	2000      	movs	r0, #0
   4279e:	b002      	add	sp, #8
   427a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   427a4:	2318      	movs	r3, #24
   427a6:	e7c6      	b.n	42736 <prepare_cb+0x12a>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   427a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   427ac:	f7f1 fc0e 	bl	33fcc <memq_peek>
		if (!link) {
   427b0:	2800      	cmp	r0, #0
   427b2:	f47f af6a 	bne.w	4268a <prepare_cb+0x7e>
			lll->empty = 1U;
   427b6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   427ba:	f043 0304 	orr.w	r3, r3, #4
   427be:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
   427c2:	e762      	b.n	4268a <prepare_cb+0x7e>
		radio_isr_set(lll_isr_early_abort, lll);
   427c4:	4809      	ldr	r0, [pc, #36]	; (427ec <prepare_cb+0x1e0>)
   427c6:	4621      	mov	r1, r4
   427c8:	f000 f9f2 	bl	42bb0 <radio_isr_set>
		radio_disable();
   427cc:	f000 faea 	bl	42da4 <radio_disable>
}
   427d0:	2000      	movs	r0, #0
   427d2:	b002      	add	sp, #8
   427d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   427d8:	00042169 	.word	0x00042169
   427dc:	000407b1 	.word	0x000407b1
   427e0:	000538d8 	.word	0x000538d8
   427e4:	00052e98 	.word	0x00052e98
   427e8:	00052bbc 	.word	0x00052bbc
   427ec:	000407d5 	.word	0x000407d5

000427f0 <lll_periph_prepare>:
{
   427f0:	b510      	push	{r4, lr}
   427f2:	b082      	sub	sp, #8
   427f4:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   427f6:	f7fe f945 	bl	40a84 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   427fa:	2800      	cmp	r0, #0
   427fc:	db25      	blt.n	4284a <lll_periph_prepare+0x5a>
	lll = p->param;
   427fe:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   42800:	8920      	ldrh	r0, [r4, #8]
   42802:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->periph.window_widening_prepare_us +=
   42804:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   42806:	fb00 3303 	mla	r3, r0, r3, r3
   4280a:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->periph.window_widening_prepare_us +=
   4280c:	4413      	add	r3, r2
   4280e:	4283      	cmp	r3, r0
   42810:	bf28      	it	cs
   42812:	4603      	movcs	r3, r0
   42814:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   42816:	4a13      	ldr	r2, [pc, #76]	; (42864 <lll_periph_prepare+0x74>)
   42818:	4913      	ldr	r1, [pc, #76]	; (42868 <lll_periph_prepare+0x78>)
   4281a:	4814      	ldr	r0, [pc, #80]	; (4286c <lll_periph_prepare+0x7c>)
   4281c:	9400      	str	r4, [sp, #0]
   4281e:	2300      	movs	r3, #0
   42820:	f7f5 fea0 	bl	38564 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   42824:	b108      	cbz	r0, 4282a <lll_periph_prepare+0x3a>
   42826:	3077      	adds	r0, #119	; 0x77
   42828:	d101      	bne.n	4282e <lll_periph_prepare+0x3e>
}
   4282a:	b002      	add	sp, #8
   4282c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   4282e:	4a10      	ldr	r2, [pc, #64]	; (42870 <lll_periph_prepare+0x80>)
   42830:	4910      	ldr	r1, [pc, #64]	; (42874 <lll_periph_prepare+0x84>)
   42832:	4811      	ldr	r0, [pc, #68]	; (42878 <lll_periph_prepare+0x88>)
   42834:	235e      	movs	r3, #94	; 0x5e
   42836:	f007 f967 	bl	49b08 <printk>
   4283a:	4040      	eors	r0, r0
   4283c:	f380 8811 	msr	BASEPRI, r0
   42840:	f04f 0003 	mov.w	r0, #3
   42844:	df02      	svc	2
}
   42846:	b002      	add	sp, #8
   42848:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   4284a:	4a09      	ldr	r2, [pc, #36]	; (42870 <lll_periph_prepare+0x80>)
   4284c:	490b      	ldr	r1, [pc, #44]	; (4287c <lll_periph_prepare+0x8c>)
   4284e:	480a      	ldr	r0, [pc, #40]	; (42878 <lll_periph_prepare+0x88>)
   42850:	234d      	movs	r3, #77	; 0x4d
   42852:	f007 f959 	bl	49b08 <printk>
   42856:	4040      	eors	r0, r0
   42858:	f380 8811 	msr	BASEPRI, r0
   4285c:	f04f 0003 	mov.w	r0, #3
   42860:	df02      	svc	2
   42862:	e7cc      	b.n	427fe <lll_periph_prepare+0xe>
   42864:	0004260d 	.word	0x0004260d
   42868:	00041ea1 	.word	0x00041ea1
   4286c:	00040635 	.word	0x00040635
   42870:	000538d8 	.word	0x000538d8
   42874:	0005380c 	.word	0x0005380c
   42878:	00052bbc 	.word	0x00052bbc
   4287c:	00053738 	.word	0x00053738

00042880 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   42880:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint8_t cte_len;

	DEBUG_RADIO_START_M(1);

	lll = p->param;
   42882:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   42884:	89a2      	ldrh	r2, [r4, #12]
   42886:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4288a:	429a      	cmp	r2, r3
{
   4288c:	b085      	sub	sp, #20
	if (unlikely(lll->handle == 0xFFFF)) {
   4288e:	f000 8091 	beq.w	429b4 <prepare_cb+0x134>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   42892:	4605      	mov	r5, r0
   42894:	f7ff faf0 	bl	41e78 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   42898:	892b      	ldrh	r3, [r5, #8]
   4289a:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   4289c:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   4289e:	441a      	add	r2, r3
   428a0:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   428a2:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   428a4:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   428a6:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   428a8:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   428aa:	1c41      	adds	r1, r0, #1
   428ac:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   428ae:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   428b0:	f04f 0100 	mov.w	r1, #0
   428b4:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   428b6:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   428ba:	d45f      	bmi.n	4297c <prepare_cb+0xfc>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   428bc:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   428c0:	460b      	mov	r3, r1
   428c2:	7fa1      	ldrb	r1, [r4, #30]
   428c4:	9000      	str	r0, [sp, #0]
   428c6:	f104 001f 	add.w	r0, r4, #31
   428ca:	f7fc f985 	bl	3ebd8 <lll_chan_sel_1>
   428ce:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   428d0:	4620      	mov	r0, r4
   428d2:	a903      	add	r1, sp, #12
   428d4:	f7ff fbe2 	bl	4209c <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   428d8:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   428dc:	9903      	ldr	r1, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   428de:	f3c2 0340 	ubfx	r3, r2, #1, #1
   428e2:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   428e4:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   428e8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   428ec:	780a      	ldrb	r2, [r1, #0]
   428ee:	f022 020c 	bic.w	r2, r2, #12
   428f2:	4313      	orrs	r3, r2
   428f4:	700b      	strb	r3, [r1, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   428f6:	f000 f99d 	bl	42c34 <radio_reset>
	}

#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   428fa:	2000      	movs	r0, #0
   428fc:	f000 f9ce 	bl	42c9c <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   42900:	1d20      	adds	r0, r4, #4
   42902:	f000 f9e9 	bl	42cd8 <radio_aa_set>
   42906:	8923      	ldrh	r3, [r4, #8]
   42908:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   4290a:	f240 605b 	movw	r0, #1627	; 0x65b
   4290e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   42912:	f000 fa85 	bl	42e20 <radio_crc_configure>
					sys_get_le24(lll->crc_init));
	lll_chan_set(data_chan_use);
   42916:	4630      	mov	r0, r6
   42918:	f7fd feae 	bl	40678 <lll_chan_set>

	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   4291c:	9903      	ldr	r1, [sp, #12]
   4291e:	4620      	mov	r0, r4
   42920:	f7ff fb90 	bl	42044 <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   42924:	4621      	mov	r1, r4
   42926:	4828      	ldr	r0, [pc, #160]	; (429c8 <prepare_cb+0x148>)
   42928:	f000 f942 	bl	42bb0 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   4292c:	2096      	movs	r0, #150	; 0x96
   4292e:	f000 fbc1 	bl	430b4 <radio_tmr_tifs_set>
		}
	}
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   42932:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   42936:	f000 0007 	and.w	r0, r0, #7
   4293a:	f000 fa8f 	bl	42e5c <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   4293e:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   42940:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   42942:	4638      	mov	r0, r7
   42944:	f7fd fe7a 	bl	4063c <lll_event_offset_get>
   42948:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   4294a:	686a      	ldr	r2, [r5, #4]
   4294c:	f106 0109 	add.w	r1, r6, #9
   42950:	2001      	movs	r0, #1
   42952:	f000 fbbb 	bl	430cc <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   42956:	f000 fcb9 	bl	432cc <radio_tmr_end_capture>
#endif /* !HAL_RADIO_GPIO_HAVE_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   4295a:	89a1      	ldrh	r1, [r4, #12]
   4295c:	3105      	adds	r1, #5
   4295e:	4632      	mov	r2, r6
   42960:	b2c9      	uxtb	r1, r1
   42962:	4638      	mov	r0, r7
   42964:	f7fd fe78 	bl	40658 <lll_preempt_calc>
   42968:	b180      	cbz	r0, 4298c <prepare_cb+0x10c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   4296a:	4818      	ldr	r0, [pc, #96]	; (429cc <prepare_cb+0x14c>)
   4296c:	4621      	mov	r1, r4
   4296e:	f000 f91f 	bl	42bb0 <radio_isr_set>
		radio_disable();
   42972:	f000 fa17 	bl	42da4 <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   42976:	2000      	movs	r0, #0
   42978:	b005      	add	sp, #20
   4297a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   4297c:	460a      	mov	r2, r1
   4297e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   42982:	8be1      	ldrh	r1, [r4, #30]
   42984:	f7fc f974 	bl	3ec70 <lll_chan_sel_2>
   42988:	4606      	mov	r6, r0
   4298a:	e7a1      	b.n	428d0 <prepare_cb+0x50>
		ret = lll_prepare_done(lll);
   4298c:	4620      	mov	r0, r4
   4298e:	f7fd fdef 	bl	40570 <lll_prepare_done>
		LL_ASSERT(!ret);
   42992:	2800      	cmp	r0, #0
   42994:	d0ef      	beq.n	42976 <prepare_cb+0xf6>
   42996:	4a0e      	ldr	r2, [pc, #56]	; (429d0 <prepare_cb+0x150>)
   42998:	490e      	ldr	r1, [pc, #56]	; (429d4 <prepare_cb+0x154>)
   4299a:	480f      	ldr	r0, [pc, #60]	; (429d8 <prepare_cb+0x158>)
   4299c:	23fd      	movs	r3, #253	; 0xfd
   4299e:	f007 f8b3 	bl	49b08 <printk>
   429a2:	4040      	eors	r0, r0
   429a4:	f380 8811 	msr	BASEPRI, r0
   429a8:	f04f 0003 	mov.w	r0, #3
   429ac:	df02      	svc	2
}
   429ae:	2000      	movs	r0, #0
   429b0:	b005      	add	sp, #20
   429b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(lll_isr_early_abort, lll);
   429b4:	4809      	ldr	r0, [pc, #36]	; (429dc <prepare_cb+0x15c>)
   429b6:	4621      	mov	r1, r4
   429b8:	f000 f8fa 	bl	42bb0 <radio_isr_set>
		radio_disable();
   429bc:	f000 f9f2 	bl	42da4 <radio_disable>
}
   429c0:	2000      	movs	r0, #0
   429c2:	b005      	add	sp, #20
   429c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   429c6:	bf00      	nop
   429c8:	00041f8d 	.word	0x00041f8d
   429cc:	000407b1 	.word	0x000407b1
   429d0:	0005392c 	.word	0x0005392c
   429d4:	00052e98 	.word	0x00052e98
   429d8:	00052bbc 	.word	0x00052bbc
   429dc:	000407d5 	.word	0x000407d5

000429e0 <lll_central_prepare>:
{
   429e0:	b510      	push	{r4, lr}
   429e2:	b082      	sub	sp, #8
   429e4:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   429e6:	f7fe f84d 	bl	40a84 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   429ea:	2800      	cmp	r0, #0
   429ec:	db19      	blt.n	42a22 <lll_central_prepare+0x42>
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0,
   429ee:	4a13      	ldr	r2, [pc, #76]	; (42a3c <lll_central_prepare+0x5c>)
   429f0:	4913      	ldr	r1, [pc, #76]	; (42a40 <lll_central_prepare+0x60>)
   429f2:	4814      	ldr	r0, [pc, #80]	; (42a44 <lll_central_prepare+0x64>)
   429f4:	9400      	str	r4, [sp, #0]
   429f6:	2300      	movs	r3, #0
   429f8:	f7f5 fdb4 	bl	38564 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   429fc:	b108      	cbz	r0, 42a02 <lll_central_prepare+0x22>
   429fe:	3077      	adds	r0, #119	; 0x77
   42a00:	d101      	bne.n	42a06 <lll_central_prepare+0x26>
}
   42a02:	b002      	add	sp, #8
   42a04:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   42a06:	4a10      	ldr	r2, [pc, #64]	; (42a48 <lll_central_prepare+0x68>)
   42a08:	4910      	ldr	r1, [pc, #64]	; (42a4c <lll_central_prepare+0x6c>)
   42a0a:	4811      	ldr	r0, [pc, #68]	; (42a50 <lll_central_prepare+0x70>)
   42a0c:	2351      	movs	r3, #81	; 0x51
   42a0e:	f007 f87b 	bl	49b08 <printk>
   42a12:	4040      	eors	r0, r0
   42a14:	f380 8811 	msr	BASEPRI, r0
   42a18:	f04f 0003 	mov.w	r0, #3
   42a1c:	df02      	svc	2
}
   42a1e:	b002      	add	sp, #8
   42a20:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   42a22:	4a09      	ldr	r2, [pc, #36]	; (42a48 <lll_central_prepare+0x68>)
   42a24:	490b      	ldr	r1, [pc, #44]	; (42a54 <lll_central_prepare+0x74>)
   42a26:	480a      	ldr	r0, [pc, #40]	; (42a50 <lll_central_prepare+0x70>)
   42a28:	234c      	movs	r3, #76	; 0x4c
   42a2a:	f007 f86d 	bl	49b08 <printk>
   42a2e:	4040      	eors	r0, r0
   42a30:	f380 8811 	msr	BASEPRI, r0
   42a34:	f04f 0003 	mov.w	r0, #3
   42a38:	df02      	svc	2
   42a3a:	e7d8      	b.n	429ee <lll_central_prepare+0xe>
   42a3c:	00042881 	.word	0x00042881
   42a40:	00041ea1 	.word	0x00041ea1
   42a44:	00040635 	.word	0x00040635
   42a48:	0005392c 	.word	0x0005392c
   42a4c:	0005380c 	.word	0x0005380c
   42a50:	00052bbc 	.word	0x00052bbc
   42a54:	00053738 	.word	0x00053738

00042a58 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   42a58:	4b05      	ldr	r3, [pc, #20]	; (42a70 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   42a5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   42a5e:	2100      	movs	r1, #0
   42a60:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   42a64:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   42a68:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   42a6c:	4770      	bx	lr
   42a6e:	bf00      	nop
   42a70:	4000b000 	.word	0x4000b000

00042a74 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   42a74:	4b05      	ldr	r3, [pc, #20]	; (42a8c <cntr_start+0x18>)
   42a76:	7818      	ldrb	r0, [r3, #0]
   42a78:	1c42      	adds	r2, r0, #1
   42a7a:	701a      	strb	r2, [r3, #0]
   42a7c:	b918      	cbnz	r0, 42a86 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   42a7e:	4b04      	ldr	r3, [pc, #16]	; (42a90 <cntr_start+0x1c>)
   42a80:	2201      	movs	r2, #1
   42a82:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   42a84:	4770      	bx	lr
		return 1;
   42a86:	2001      	movs	r0, #1
}
   42a88:	4770      	bx	lr
   42a8a:	bf00      	nop
   42a8c:	20007426 	.word	0x20007426
   42a90:	4000b000 	.word	0x4000b000

00042a94 <cntr_stop>:

uint32_t cntr_stop(void)
{
   42a94:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   42a96:	4c0d      	ldr	r4, [pc, #52]	; (42acc <cntr_stop+0x38>)
   42a98:	7820      	ldrb	r0, [r4, #0]
   42a9a:	b148      	cbz	r0, 42ab0 <cntr_stop+0x1c>

	if (--_refcount) {
   42a9c:	3801      	subs	r0, #1
   42a9e:	b2c0      	uxtb	r0, r0
   42aa0:	7020      	strb	r0, [r4, #0]
   42aa2:	b918      	cbnz	r0, 42aac <cntr_stop+0x18>
   42aa4:	4b0a      	ldr	r3, [pc, #40]	; (42ad0 <cntr_stop+0x3c>)
   42aa6:	2201      	movs	r2, #1
   42aa8:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   42aaa:	bd10      	pop	{r4, pc}
		return 1;
   42aac:	2001      	movs	r0, #1
}
   42aae:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   42ab0:	4a08      	ldr	r2, [pc, #32]	; (42ad4 <cntr_stop+0x40>)
   42ab2:	4909      	ldr	r1, [pc, #36]	; (42ad8 <cntr_stop+0x44>)
   42ab4:	4809      	ldr	r0, [pc, #36]	; (42adc <cntr_stop+0x48>)
   42ab6:	232d      	movs	r3, #45	; 0x2d
   42ab8:	f007 f826 	bl	49b08 <printk>
   42abc:	4040      	eors	r0, r0
   42abe:	f380 8811 	msr	BASEPRI, r0
   42ac2:	f04f 0003 	mov.w	r0, #3
   42ac6:	df02      	svc	2
	if (--_refcount) {
   42ac8:	7820      	ldrb	r0, [r4, #0]
   42aca:	e7e7      	b.n	42a9c <cntr_stop+0x8>
   42acc:	20007426 	.word	0x20007426
   42ad0:	4000b000 	.word	0x4000b000
   42ad4:	0005397c 	.word	0x0005397c
   42ad8:	000539c8 	.word	0x000539c8
   42adc:	00052bbc 	.word	0x00052bbc

00042ae0 <cntr_cnt_get>:
     return p_reg->COUNTER;
   42ae0:	4b01      	ldr	r3, [pc, #4]	; (42ae8 <cntr_cnt_get+0x8>)
   42ae2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   42ae6:	4770      	bx	lr
   42ae8:	4000b000 	.word	0x4000b000

00042aec <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   42aec:	4b02      	ldr	r3, [pc, #8]	; (42af8 <cntr_cmp_set+0xc>)
   42aee:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   42af2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   42af6:	4770      	bx	lr
   42af8:	4000b000 	.word	0x4000b000

00042afc <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   42afc:	4b12      	ldr	r3, [pc, #72]	; (42b48 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   42afe:	b430      	push	{r4, r5}
   42b00:	2101      	movs	r1, #1
   42b02:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   42b04:	2000      	movs	r0, #0
   42b06:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   42b08:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   42b0c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   42b10:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   42b14:	6019      	str	r1, [r3, #0]
}
   42b16:	e005      	b.n	42b24 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   42b18:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   42b1c:	b932      	cbnz	r2, 42b2c <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   42b1e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   42b22:	b11a      	cbz	r2, 42b2c <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   42b24:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   42b28:	2a00      	cmp	r2, #0
   42b2a:	d0f5      	beq.n	42b18 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   42b2c:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   42b2e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   42b32:	2a00      	cmp	r2, #0
   42b34:	d1e7      	bne.n	42b06 <do_ecb+0xa>
   42b36:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   42b3a:	2d00      	cmp	r5, #0
   42b3c:	d0e3      	beq.n	42b06 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   42b3e:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   42b40:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   42b44:	4770      	bx	lr
   42b46:	bf00      	nop
   42b48:	4000e000 	.word	0x4000e000

00042b4c <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   42b4c:	b570      	push	{r4, r5, r6, lr}
   42b4e:	b08c      	sub	sp, #48	; 0x30
   42b50:	460e      	mov	r6, r1
   42b52:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   42b54:	4601      	mov	r1, r0
   42b56:	2210      	movs	r2, #16
   42b58:	4668      	mov	r0, sp
{
   42b5a:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   42b5c:	f7f1 fa04 	bl	33f68 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   42b60:	2210      	movs	r2, #16
   42b62:	eb0d 0002 	add.w	r0, sp, r2
   42b66:	4631      	mov	r1, r6
   42b68:	f7f1 f9fe 	bl	33f68 <mem_rcopy>

	do_ecb(&ecb);
   42b6c:	4668      	mov	r0, sp
   42b6e:	f7ff ffc5 	bl	42afc <do_ecb>

	if (cipher_text_le) {
   42b72:	b125      	cbz	r5, 42b7e <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   42b74:	2210      	movs	r2, #16
   42b76:	a908      	add	r1, sp, #32
   42b78:	4628      	mov	r0, r5
   42b7a:	f7f1 f9f5 	bl	33f68 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   42b7e:	b124      	cbz	r4, 42b8a <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   42b80:	2210      	movs	r2, #16
   42b82:	a908      	add	r1, sp, #32
   42b84:	4620      	mov	r0, r4
   42b86:	f009 f8ee 	bl	4bd66 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   42b8a:	b00c      	add	sp, #48	; 0x30
   42b8c:	bd70      	pop	{r4, r5, r6, pc}
   42b8e:	bf00      	nop

00042b90 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   42b90:	4b04      	ldr	r3, [pc, #16]	; (42ba4 <isr_radio+0x14>)
   42b92:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   42b96:	b123      	cbz	r3, 42ba2 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   42b98:	4a03      	ldr	r2, [pc, #12]	; (42ba8 <isr_radio+0x18>)
   42b9a:	4b04      	ldr	r3, [pc, #16]	; (42bac <isr_radio+0x1c>)
   42b9c:	6810      	ldr	r0, [r2, #0]
   42b9e:	681b      	ldr	r3, [r3, #0]
   42ba0:	4718      	bx	r3
}
   42ba2:	4770      	bx	lr
   42ba4:	40001000 	.word	0x40001000
   42ba8:	20006428 	.word	0x20006428
   42bac:	2000642c 	.word	0x2000642c

00042bb0 <radio_isr_set>:
{
   42bb0:	b538      	push	{r3, r4, r5, lr}
   42bb2:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   42bb4:	2001      	movs	r0, #1
{
   42bb6:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   42bb8:	f7ea f86a 	bl	2cc90 <arch_irq_disable>
	isr_cb = cb;
   42bbc:	4b08      	ldr	r3, [pc, #32]	; (42be0 <radio_isr_set+0x30>)
	isr_cb_param = param;
   42bbe:	4a09      	ldr	r2, [pc, #36]	; (42be4 <radio_isr_set+0x34>)
	isr_cb = cb;
   42bc0:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   42bc2:	4909      	ldr	r1, [pc, #36]	; (42be8 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   42bc4:	4b09      	ldr	r3, [pc, #36]	; (42bec <radio_isr_set+0x3c>)
	isr_cb_param = param;
   42bc6:	6015      	str	r5, [r2, #0]
   42bc8:	2010      	movs	r0, #16
   42bca:	2202      	movs	r2, #2
   42bcc:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   42bd0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   42bd4:	2001      	movs	r0, #1
}
   42bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   42bda:	f7ea b84b 	b.w	2cc74 <arch_irq_enable>
   42bde:	bf00      	nop
   42be0:	2000642c 	.word	0x2000642c
   42be4:	20006428 	.word	0x20006428
   42be8:	40001000 	.word	0x40001000
   42bec:	e000e100 	.word	0xe000e100

00042bf0 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   42bf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   42bf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   42bf8:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   42bfa:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   42bfe:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   42c02:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   42c06:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   42c0a:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   42c0e:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   42c12:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   42c16:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   42c1a:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   42c1e:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   42c22:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   42c26:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   42c2a:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   42c2e:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   42c32:	4770      	bx	lr

00042c34 <radio_reset>:
{
   42c34:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   42c36:	2001      	movs	r0, #1
   42c38:	f7ea f82a 	bl	2cc90 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   42c3c:	4a0d      	ldr	r2, [pc, #52]	; (42c74 <radio_reset+0x40>)
   42c3e:	2100      	movs	r1, #0
   42c40:	2301      	movs	r3, #1
   42c42:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   42c46:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   42c4a:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   42c4e:	490a      	ldr	r1, [pc, #40]	; (42c78 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   42c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   42c54:	f023 0301 	bic.w	r3, r3, #1
   42c58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   42c5c:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   42c60:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   42c64:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   42c68:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   42c6c:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   42c70:	bd10      	pop	{r4, pc}
   42c72:	bf00      	nop
   42c74:	40001000 	.word	0x40001000
   42c78:	4001f000 	.word	0x4001f000

00042c7c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   42c7c:	4b06      	ldr	r3, [pc, #24]	; (42c98 <radio_phy_set+0x1c>)
	uint32_t mode;

	switch (phy) {
	case BIT(0):
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   42c7e:	2802      	cmp	r0, #2
   42c80:	bf0c      	ite	eq
   42c82:	2204      	moveq	r2, #4
   42c84:	2203      	movne	r2, #3
   42c86:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   42c8a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   42c8e:	f042 0201 	orr.w	r2, r2, #1
   42c92:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   42c96:	4770      	bx	lr
   42c98:	40001000 	.word	0x40001000

00042c9c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   42c9c:	4b01      	ldr	r3, [pc, #4]	; (42ca4 <radio_tx_power_set+0x8>)
   42c9e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   42ca2:	4770      	bx	lr
   42ca4:	40001000 	.word	0x40001000

00042ca8 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   42ca8:	4b01      	ldr	r3, [pc, #4]	; (42cb0 <radio_freq_chan_set+0x8>)
   42caa:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   42cae:	4770      	bx	lr
   42cb0:	40001000 	.word	0x40001000

00042cb4 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   42cb4:	4b07      	ldr	r3, [pc, #28]	; (42cd4 <radio_whiten_iv_set+0x20>)
   42cb6:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   42cba:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   42cbe:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   42cc2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   42cc6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   42cca:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   42cce:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   42cd2:	4770      	bx	lr
   42cd4:	40001000 	.word	0x40001000

00042cd8 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   42cd8:	4a0a      	ldr	r2, [pc, #40]	; (42d04 <radio_aa_set+0x2c>)
   42cda:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   42cdc:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   42cde:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   42ce2:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   42ce6:	78c3      	ldrb	r3, [r0, #3]
   42ce8:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   42cec:	7843      	ldrb	r3, [r0, #1]
   42cee:	f890 c002 	ldrb.w	ip, [r0, #2]
   42cf2:	7801      	ldrb	r1, [r0, #0]
   42cf4:	041b      	lsls	r3, r3, #16
   42cf6:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   42cfa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   42cfe:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   42d02:	4770      	bx	lr
   42d04:	40001000 	.word	0x40001000

00042d08 <radio_pkt_configure>:
	switch (phy) {
   42d08:	f3c2 0342 	ubfx	r3, r2, #1, #3
   42d0c:	f1a3 0302 	sub.w	r3, r3, #2
   42d10:	fab3 f383 	clz	r3, r3
   42d14:	095b      	lsrs	r3, r3, #5
   42d16:	061b      	lsls	r3, r3, #24
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   42d18:	07d2      	lsls	r2, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   42d1a:	bf48      	it	mi
   42d1c:	f443 1380 	orrmi.w	r3, r3, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   42d20:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   42d24:	4a09      	ldr	r2, [pc, #36]	; (42d4c <radio_pkt_configure+0x44>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   42d26:	4318      	orrs	r0, r3
   42d28:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   42d2c:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   42d30:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   42d34:	4b06      	ldr	r3, [pc, #24]	; (42d50 <radio_pkt_configure+0x48>)
   42d36:	4003      	ands	r3, r0
   42d38:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   42d3c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   42d40:	4319      	orrs	r1, r3
   42d42:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   42d46:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   42d4a:	4770      	bx	lr
   42d4c:	40001000 	.word	0x40001000
   42d50:	fef80000 	.word	0xfef80000

00042d54 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   42d54:	4b01      	ldr	r3, [pc, #4]	; (42d5c <radio_pkt_rx_set+0x8>)
   42d56:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   42d5a:	4770      	bx	lr
   42d5c:	40001000 	.word	0x40001000

00042d60 <radio_pkt_tx_set>:
void radio_pkt_tx_set(void *tx_packet)
   42d60:	4b01      	ldr	r3, [pc, #4]	; (42d68 <radio_pkt_tx_set+0x8>)
   42d62:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   42d66:	4770      	bx	lr
   42d68:	40001000 	.word	0x40001000

00042d6c <radio_tx_ready_delay_get>:
static inline uint32_t hal_radio_tx_ready_delay_us_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_US;
   42d6c:	2802      	cmp	r0, #2
}
   42d6e:	bf0c      	ite	eq
   42d70:	2028      	moveq	r0, #40	; 0x28
   42d72:	2029      	movne	r0, #41	; 0x29
   42d74:	4770      	bx	lr
   42d76:	bf00      	nop

00042d78 <radio_tx_chain_delay_get>:
}
   42d78:	2001      	movs	r0, #1
   42d7a:	4770      	bx	lr

00042d7c <radio_rx_ready_delay_get>:
}
   42d7c:	2029      	movs	r0, #41	; 0x29
   42d7e:	4770      	bx	lr

00042d80 <radio_rx_chain_delay_get>:
static inline uint32_t hal_radio_rx_chain_delay_us_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
   42d80:	2802      	cmp	r0, #2
}
   42d82:	bf0c      	ite	eq
   42d84:	2005      	moveq	r0, #5
   42d86:	200a      	movne	r0, #10
   42d88:	4770      	bx	lr
   42d8a:	bf00      	nop

00042d8c <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   42d8c:	4b01      	ldr	r3, [pc, #4]	; (42d94 <radio_rx_enable+0x8>)
   42d8e:	2201      	movs	r2, #1
   42d90:	605a      	str	r2, [r3, #4]
}
   42d92:	4770      	bx	lr
   42d94:	40001000 	.word	0x40001000

00042d98 <radio_tx_enable>:
   42d98:	4b01      	ldr	r3, [pc, #4]	; (42da0 <radio_tx_enable+0x8>)
   42d9a:	2201      	movs	r2, #1
   42d9c:	601a      	str	r2, [r3, #0]
}
   42d9e:	4770      	bx	lr
   42da0:	40001000 	.word	0x40001000

00042da4 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   42da4:	4a07      	ldr	r2, [pc, #28]	; (42dc4 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   42da6:	4908      	ldr	r1, [pc, #32]	; (42dc8 <radio_disable+0x24>)
{
   42da8:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   42daa:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   42dac:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   42db0:	2000      	movs	r0, #0
   42db2:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   42db6:	6053      	str	r3, [r2, #4]
}
   42db8:	bc10      	pop	{r4}
   42dba:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   42dbc:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   42dc0:	610b      	str	r3, [r1, #16]
}
   42dc2:	4770      	bx	lr
   42dc4:	4001f000 	.word	0x4001f000
   42dc8:	40001000 	.word	0x40001000

00042dcc <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   42dcc:	4b04      	ldr	r3, [pc, #16]	; (42de0 <radio_status_reset+0x14>)
   42dce:	2200      	movs	r2, #0
   42dd0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   42dd4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   42dd8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   42ddc:	4770      	bx	lr
   42dde:	bf00      	nop
   42de0:	40001000 	.word	0x40001000

00042de4 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   42de4:	4b03      	ldr	r3, [pc, #12]	; (42df4 <radio_is_ready+0x10>)
   42de6:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   42dea:	3800      	subs	r0, #0
   42dec:	bf18      	it	ne
   42dee:	2001      	movne	r0, #1
   42df0:	4770      	bx	lr
   42df2:	bf00      	nop
   42df4:	40001000 	.word	0x40001000

00042df8 <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   42df8:	4b03      	ldr	r3, [pc, #12]	; (42e08 <radio_is_done+0x10>)
   42dfa:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   42dfe:	3800      	subs	r0, #0
   42e00:	bf18      	it	ne
   42e02:	2001      	movne	r0, #1
   42e04:	4770      	bx	lr
   42e06:	bf00      	nop
   42e08:	40001000 	.word	0x40001000

00042e0c <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   42e0c:	4b03      	ldr	r3, [pc, #12]	; (42e1c <radio_is_idle+0x10>)
   42e0e:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   42e12:	fab0 f080 	clz	r0, r0
   42e16:	0940      	lsrs	r0, r0, #5
   42e18:	4770      	bx	lr
   42e1a:	bf00      	nop
   42e1c:	40001000 	.word	0x40001000

00042e20 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   42e20:	4b04      	ldr	r3, [pc, #16]	; (42e34 <radio_crc_configure+0x14>)
   42e22:	f240 1203 	movw	r2, #259	; 0x103
   42e26:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   42e2a:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   42e2e:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   42e32:	4770      	bx	lr
   42e34:	40001000 	.word	0x40001000

00042e38 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   42e38:	4b03      	ldr	r3, [pc, #12]	; (42e48 <radio_crc_is_valid+0x10>)
   42e3a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   42e3e:	3800      	subs	r0, #0
   42e40:	bf18      	it	ne
   42e42:	2001      	movne	r0, #1
   42e44:	4770      	bx	lr
   42e46:	bf00      	nop
   42e48:	40001000 	.word	0x40001000

00042e4c <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   42e4c:	4800      	ldr	r0, [pc, #0]	; (42e50 <radio_pkt_empty_get+0x4>)
   42e4e:	4770      	bx	lr
   42e50:	20006424 	.word	0x20006424

00042e54 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   42e54:	4800      	ldr	r0, [pc, #0]	; (42e58 <radio_pkt_scratch_get+0x4>)
   42e56:	4770      	bx	lr
   42e58:	20006320 	.word	0x20006320

00042e5c <radio_switch_complete_and_rx>:
	sw_tifs_toggle &= 1U;
}
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(uint8_t phy_rx)
{
   42e5c:	b4f0      	push	{r4, r5, r6, r7}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   42e5e:	4b1d      	ldr	r3, [pc, #116]	; (42ed4 <radio_switch_complete_and_rx+0x78>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   42e60:	4d1d      	ldr	r5, [pc, #116]	; (42ed8 <radio_switch_complete_and_rx+0x7c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42e62:	4e1e      	ldr	r6, [pc, #120]	; (42edc <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   42e64:	4c1e      	ldr	r4, [pc, #120]	; (42ee0 <radio_switch_complete_and_rx+0x84>)
   42e66:	4f1f      	ldr	r7, [pc, #124]	; (42ee4 <radio_switch_complete_and_rx+0x88>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   42e68:	2203      	movs	r2, #3
   42e6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   42e6e:	782a      	ldrb	r2, [r5, #0]
   42e70:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   42e74:	f102 030c 	add.w	r3, r2, #12
   42e78:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   42e7a:	00d0      	lsls	r0, r2, #3
   42e7c:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   42e7e:	0091      	lsls	r1, r2, #2
   42e80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   42e84:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   42e88:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   42e8c:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42e90:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   42e94:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   42e98:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   42e9c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42ea0:	4811      	ldr	r0, [pc, #68]	; (42ee8 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42ea2:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42ea6:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   42eaa:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   42eae:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   42eb0:	bf8a      	itet	hi
   42eb2:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   42eb6:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   42eb8:	3b2d      	subhi	r3, #45	; 0x2d
   42eba:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   42ebe:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   42ec0:	4b06      	ldr	r3, [pc, #24]	; (42edc <radio_switch_complete_and_rx+0x80>)
   42ec2:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   42ec6:	f002 0201 	and.w	r2, r2, #1
   42eca:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   42ece:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   42ed0:	bcf0      	pop	{r4, r5, r6, r7}
   42ed2:	4770      	bx	lr
   42ed4:	40001000 	.word	0x40001000
   42ed8:	20007427 	.word	0x20007427
   42edc:	4001f000 	.word	0x4001f000
   42ee0:	40009140 	.word	0x40009140
   42ee4:	4000110c 	.word	0x4000110c
   42ee8:	40001004 	.word	0x40001004

00042eec <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   42eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   42ef0:	4e28      	ldr	r6, [pc, #160]	; (42f94 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   42ef2:	4c29      	ldr	r4, [pc, #164]	; (42f98 <radio_switch_complete_and_tx+0xac>)
   42ef4:	4f29      	ldr	r7, [pc, #164]	; (42f9c <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42ef6:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 42fa0 <radio_switch_complete_and_tx+0xb4>
   42efa:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 42fa4 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   42efe:	2303      	movs	r3, #3
   42f00:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   42f04:	7821      	ldrb	r1, [r4, #0]
   42f06:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   42f0a:	f101 030c 	add.w	r3, r1, #12
   42f0e:	b2db      	uxtb	r3, r3
   42f10:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   42f12:	00cd      	lsls	r5, r1, #3
   42f14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   42f18:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   42f1c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   42f20:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   42f24:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42f28:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42f2c:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   42f30:	f24a 15b8 	movw	r5, #41400	; 0xa1b8
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42f34:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   42f38:	f649 6334 	movw	r3, #40500	; 0x9e34
   42f3c:	2a02      	cmp	r2, #2
   42f3e:	bf18      	it	ne
   42f40:	462b      	movne	r3, r5
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   42f42:	ea4f 0c81 	mov.w	ip, r1, lsl #2
static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
   42f46:	f241 3288 	movw	r2, #5000	; 0x1388
   42f4a:	f242 45b8 	movw	r5, #9400	; 0x24b8
   42f4e:	2802      	cmp	r0, #2
   42f50:	bf18      	it	ne
   42f52:	462a      	movne	r2, r5
   42f54:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   42f58:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   42f5c:	4413      	add	r3, r2
   42f5e:	4a12      	ldr	r2, [pc, #72]	; (42fa8 <radio_switch_complete_and_tx+0xbc>)
   42f60:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   42f64:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   42f68:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   42f6c:	bf85      	ittet	hi
   42f6e:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   42f70:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   42f74:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   42f76:	1a1b      	subhi	r3, r3, r0
   42f78:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   42f7c:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   42f7e:	4b08      	ldr	r3, [pc, #32]	; (42fa0 <radio_switch_complete_and_tx+0xb4>)
   42f80:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   42f84:	f001 0101 	and.w	r1, r1, #1
   42f88:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   42f8c:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   42f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   42f92:	bf00      	nop
   42f94:	40001000 	.word	0x40001000
   42f98:	20007427 	.word	0x20007427
   42f9c:	40009140 	.word	0x40009140
   42fa0:	4001f000 	.word	0x4001f000
   42fa4:	4000110c 	.word	0x4000110c
   42fa8:	10624dd3 	.word	0x10624dd3

00042fac <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   42fac:	4904      	ldr	r1, [pc, #16]	; (42fc0 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   42fae:	4b05      	ldr	r3, [pc, #20]	; (42fc4 <radio_switch_complete_and_disable+0x18>)
   42fb0:	2003      	movs	r0, #3
   42fb2:	f44f 6210 	mov.w	r2, #2304	; 0x900
   42fb6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   42fba:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   42fbe:	4770      	bx	lr
   42fc0:	40001000 	.word	0x40001000
   42fc4:	4001f000 	.word	0x4001f000

00042fc8 <radio_phy_flags_rx_get>:
	return 0;
#endif /* !CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#else /* !CONFIG_BT_CTLR_PHY_CODED */
	return 0;
#endif /* !CONFIG_BT_CTLR_PHY_CODED */
}
   42fc8:	2000      	movs	r0, #0
   42fca:	4770      	bx	lr

00042fcc <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   42fcc:	4a03      	ldr	r2, [pc, #12]	; (42fdc <radio_rssi_measure+0x10>)
   42fce:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   42fd2:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   42fd6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   42fda:	4770      	bx	lr
   42fdc:	40001000 	.word	0x40001000

00042fe0 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   42fe0:	4b01      	ldr	r3, [pc, #4]	; (42fe8 <radio_rssi_get+0x8>)
   42fe2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   42fe6:	4770      	bx	lr
   42fe8:	40001000 	.word	0x40001000

00042fec <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   42fec:	4b02      	ldr	r3, [pc, #8]	; (42ff8 <radio_rssi_status_reset+0xc>)
   42fee:	2200      	movs	r2, #0
   42ff0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   42ff4:	4770      	bx	lr
   42ff6:	bf00      	nop
   42ff8:	40001000 	.word	0x40001000

00042ffc <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   42ffc:	4b03      	ldr	r3, [pc, #12]	; (4300c <radio_rssi_is_ready+0x10>)
   42ffe:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   43002:	3800      	subs	r0, #0
   43004:	bf18      	it	ne
   43006:	2001      	movne	r0, #1
   43008:	4770      	bx	lr
   4300a:	bf00      	nop
   4300c:	40001000 	.word	0x40001000

00043010 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   43010:	b410      	push	{r4}
   43012:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   43016:	ea4f 038c 	mov.w	r3, ip, lsl #2
   4301a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4301e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   43022:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   43024:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   43028:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   4302c:	8894      	ldrh	r4, [r2, #4]
   4302e:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   43032:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   43036:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   4303a:	d1ec      	bne.n	43016 <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   4303c:	4b03      	ldr	r3, [pc, #12]	; (4304c <radio_filter_configure+0x3c>)
}
   4303e:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   43040:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   43044:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   43048:	4770      	bx	lr
   4304a:	bf00      	nop
   4304c:	40001000 	.word	0x40001000

00043050 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   43050:	4a03      	ldr	r2, [pc, #12]	; (43060 <radio_filter_disable+0x10>)
   43052:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   43056:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   4305a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   4305e:	4770      	bx	lr
   43060:	40001000 	.word	0x40001000

00043064 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   43064:	4b02      	ldr	r3, [pc, #8]	; (43070 <radio_filter_status_reset+0xc>)
   43066:	2200      	movs	r2, #0
   43068:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   4306c:	4770      	bx	lr
   4306e:	bf00      	nop
   43070:	40001000 	.word	0x40001000

00043074 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   43074:	4b03      	ldr	r3, [pc, #12]	; (43084 <radio_filter_has_match+0x10>)
   43076:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   4307a:	3800      	subs	r0, #0
   4307c:	bf18      	it	ne
   4307e:	2001      	movne	r0, #1
   43080:	4770      	bx	lr
   43082:	bf00      	nop
   43084:	40001000 	.word	0x40001000

00043088 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   43088:	4b01      	ldr	r3, [pc, #4]	; (43090 <radio_filter_match_get+0x8>)
   4308a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   4308e:	4770      	bx	lr
   43090:	40001000 	.word	0x40001000

00043094 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   43094:	4904      	ldr	r1, [pc, #16]	; (430a8 <radio_tmr_status_reset+0x14>)
   43096:	4b05      	ldr	r3, [pc, #20]	; (430ac <radio_tmr_status_reset+0x18>)
   43098:	4a05      	ldr	r2, [pc, #20]	; (430b0 <radio_tmr_status_reset+0x1c>)
   4309a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   4309e:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   430a2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   430a6:	4770      	bx	lr
   430a8:	4000b000 	.word	0x4000b000
   430ac:	4001f000 	.word	0x4001f000
   430b0:	0e7000c0 	.word	0x0e7000c0

000430b4 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   430b4:	4b03      	ldr	r3, [pc, #12]	; (430c4 <radio_tmr_tifs_set+0x10>)
   430b6:	4a04      	ldr	r2, [pc, #16]	; (430c8 <radio_tmr_tifs_set+0x14>)
   430b8:	781b      	ldrb	r3, [r3, #0]
   430ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   430be:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   430c2:	4770      	bx	lr
   430c4:	20007427 	.word	0x20007427
   430c8:	40009000 	.word	0x40009000

000430cc <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   430cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   430d0:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   430d4:	4d31      	ldr	r5, [pc, #196]	; (4319c <radio_tmr_start+0xd0>)
   430d6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   430da:	42ab      	cmp	r3, r5
{
   430dc:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   430de:	d906      	bls.n	430ee <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   430e0:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   430e4:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   430e8:	3901      	subs	r1, #1
		remainder += 30517578UL;
   430ea:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   430ee:	4b2c      	ldr	r3, [pc, #176]	; (431a0 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   430f0:	482c      	ldr	r0, [pc, #176]	; (431a4 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   430f2:	4d2d      	ldr	r5, [pc, #180]	; (431a8 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   430f4:	4e2d      	ldr	r6, [pc, #180]	; (431ac <radio_tmr_start+0xe0>)
   430f6:	2701      	movs	r7, #1
   430f8:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   430fa:	2700      	movs	r7, #0
   430fc:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   43100:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   43104:	2704      	movs	r7, #4
   43106:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   4310a:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   4310c:	2702      	movs	r7, #2
   4310e:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   43112:	4a27      	ldr	r2, [pc, #156]	; (431b0 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   43114:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   43118:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   4311c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   43120:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   43124:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43126:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   4312a:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   4312e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   43132:	b364      	cbz	r4, 4318e <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   43134:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   43138:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   4313c:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   43140:	4b1b      	ldr	r3, [pc, #108]	; (431b0 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43142:	4a1c      	ldr	r2, [pc, #112]	; (431b4 <radio_tmr_start+0xe8>)
   43144:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   43148:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   4314a:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   4314c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 431b8 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43150:	f8df e068 	ldr.w	lr, [pc, #104]	; 431bc <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43154:	f8df c068 	ldr.w	ip, [pc, #104]	; 431c0 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43158:	4f1a      	ldr	r7, [pc, #104]	; (431c4 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   4315a:	4e1b      	ldr	r6, [pc, #108]	; (431c8 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   4315c:	4d1b      	ldr	r5, [pc, #108]	; (431cc <radio_tmr_start+0x100>)
   4315e:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   43160:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   43164:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   43168:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   4316c:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   43170:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43172:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43176:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   4317a:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   4317e:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43182:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43186:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   4318a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   4318e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   43192:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   43196:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   4319a:	e7d1      	b.n	43140 <radio_tmr_start+0x74>
   4319c:	7ff0bdbf 	.word	0x7ff0bdbf
   431a0:	40008000 	.word	0x40008000
   431a4:	431bde83 	.word	0x431bde83
   431a8:	4000b000 	.word	0x4000b000
   431ac:	4000b148 	.word	0x4000b148
   431b0:	4001f000 	.word	0x4001f000
   431b4:	40009000 	.word	0x40009000
   431b8:	4000110c 	.word	0x4000110c
   431bc:	4000900c 	.word	0x4000900c
   431c0:	40009140 	.word	0x40009140
   431c4:	4001f004 	.word	0x4001f004
   431c8:	40009144 	.word	0x40009144
   431cc:	4001f00c 	.word	0x4001f00c

000431d0 <radio_tmr_start_tick>:
   431d0:	4a15      	ldr	r2, [pc, #84]	; (43228 <radio_tmr_start_tick+0x58>)

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   431d2:	b430      	push	{r4, r5}
   431d4:	2301      	movs	r3, #1
    p_reg->CC[ch] = cc_val;
   431d6:	4c15      	ldr	r4, [pc, #84]	; (4322c <radio_tmr_start_tick+0x5c>)
   431d8:	6053      	str	r3, [r2, #4]
    p_reg->EVTENSET = mask;
   431da:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   431de:	60d3      	str	r3, [r2, #12]
    p_reg->CC[cc_channel] = cc_value;
   431e0:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].EEP = eep;
   431e4:	4b12      	ldr	r3, [pc, #72]	; (43230 <radio_tmr_start_tick+0x60>)
    p_reg->CC[ch] = cc_val;
   431e6:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   431ea:	f8c4 5344 	str.w	r5, [r4, #836]	; 0x344
    p_reg->CHENSET = mask;
   431ee:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   431f0:	f504 74a4 	add.w	r4, r4, #328	; 0x148
   431f4:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   431f8:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   431fc:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   43200:	b158      	cbz	r0, 4321a <radio_tmr_start_tick+0x4a>
    p_reg->CHENCLR = mask;
   43202:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   43206:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   4320a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   4320e:	4b08      	ldr	r3, [pc, #32]	; (43230 <radio_tmr_start_tick+0x60>)
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   43210:	2001      	movs	r0, #1
   43212:	bc30      	pop	{r4, r5}
   43214:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   43218:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   4321a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   4321e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   43222:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   43226:	e7f2      	b.n	4320e <radio_tmr_start_tick+0x3e>
   43228:	40008000 	.word	0x40008000
   4322c:	4000b000 	.word	0x4000b000
   43230:	4001f000 	.word	0x4001f000

00043234 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   43234:	4b01      	ldr	r3, [pc, #4]	; (4323c <radio_tmr_start_get+0x8>)
   43236:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   4323a:	4770      	bx	lr
   4323c:	4000b000 	.word	0x4000b000

00043240 <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43240:	4903      	ldr	r1, [pc, #12]	; (43250 <radio_tmr_stop+0x10>)
   43242:	4a04      	ldr	r2, [pc, #16]	; (43254 <radio_tmr_stop+0x14>)
   43244:	2301      	movs	r3, #1
   43246:	604b      	str	r3, [r1, #4]
   43248:	610b      	str	r3, [r1, #16]
   4324a:	6053      	str	r3, [r2, #4]
   4324c:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   4324e:	4770      	bx	lr
   43250:	40008000 	.word	0x40008000
   43254:	40009000 	.word	0x40009000

00043258 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   43258:	4904      	ldr	r1, [pc, #16]	; (4326c <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   4325a:	4b05      	ldr	r3, [pc, #20]	; (43270 <radio_tmr_hcto_configure+0x18>)
   4325c:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   43260:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   43264:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   43268:	4770      	bx	lr
   4326a:	bf00      	nop
   4326c:	40008000 	.word	0x40008000
   43270:	4001f000 	.word	0x4001f000

00043274 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43274:	4b05      	ldr	r3, [pc, #20]	; (4328c <radio_tmr_aa_capture+0x18>)
   43276:	4806      	ldr	r0, [pc, #24]	; (43290 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43278:	4906      	ldr	r1, [pc, #24]	; (43294 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   4327a:	4a07      	ldr	r2, [pc, #28]	; (43298 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   4327c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43280:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   43284:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   43288:	4770      	bx	lr
   4328a:	bf00      	nop
   4328c:	4001f000 	.word	0x4001f000
   43290:	40001100 	.word	0x40001100
   43294:	40008040 	.word	0x40008040
   43298:	04000080 	.word	0x04000080

0004329c <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   4329c:	4b01      	ldr	r3, [pc, #4]	; (432a4 <radio_tmr_aa_get+0x8>)
   4329e:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   432a2:	4770      	bx	lr
   432a4:	40008000 	.word	0x40008000

000432a8 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   432a8:	4b01      	ldr	r3, [pc, #4]	; (432b0 <radio_tmr_aa_save+0x8>)
   432aa:	6018      	str	r0, [r3, #0]
}
   432ac:	4770      	bx	lr
   432ae:	bf00      	nop
   432b0:	2000631c 	.word	0x2000631c

000432b4 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   432b4:	4b01      	ldr	r3, [pc, #4]	; (432bc <radio_tmr_aa_restore+0x8>)
}
   432b6:	6818      	ldr	r0, [r3, #0]
   432b8:	4770      	bx	lr
   432ba:	bf00      	nop
   432bc:	2000631c 	.word	0x2000631c

000432c0 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   432c0:	4b01      	ldr	r3, [pc, #4]	; (432c8 <radio_tmr_ready_get+0x8>)
   432c2:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   432c6:	4770      	bx	lr
   432c8:	40008000 	.word	0x40008000

000432cc <radio_tmr_end_capture>:
   432cc:	4b02      	ldr	r3, [pc, #8]	; (432d8 <radio_tmr_end_capture+0xc>)
   432ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   432d2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   432d6:	4770      	bx	lr
   432d8:	4001f000 	.word	0x4001f000

000432dc <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   432dc:	4b01      	ldr	r3, [pc, #4]	; (432e4 <radio_tmr_end_get+0x8>)
   432de:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   432e2:	4770      	bx	lr
   432e4:	40008000 	.word	0x40008000

000432e8 <radio_tmr_tifs_base_get>:

uint32_t radio_tmr_tifs_base_get(void)
   432e8:	4b01      	ldr	r3, [pc, #4]	; (432f0 <radio_tmr_tifs_base_get+0x8>)
   432ea:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   432ee:	4770      	bx	lr
   432f0:	40008000 	.word	0x40008000

000432f4 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   432f4:	4b17      	ldr	r3, [pc, #92]	; (43354 <radio_ccm_rx_pkt_set+0x60>)
{
   432f6:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   432f8:	2400      	movs	r4, #0
{
   432fa:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   432fc:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   432fe:	4816      	ldr	r0, [pc, #88]	; (43358 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   43300:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   43304:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   43308:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   4330c:	4e13      	ldr	r6, [pc, #76]	; (4335c <radio_ccm_rx_pkt_set+0x68>)
   4330e:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   43310:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   43314:	4812      	ldr	r0, [pc, #72]	; (43360 <radio_ccm_rx_pkt_set+0x6c>)
   43316:	2902      	cmp	r1, #2
   43318:	bf18      	it	ne
   4331a:	4630      	movne	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   4331c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   43320:	4810      	ldr	r0, [pc, #64]	; (43364 <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   43322:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   43326:	4910      	ldr	r1, [pc, #64]	; (43368 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   43328:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   4332c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   43330:	4a0e      	ldr	r2, [pc, #56]	; (4336c <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   43332:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   43336:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   4333a:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   4333e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   43342:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   43346:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4334a:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   4334c:	bc70      	pop	{r4, r5, r6}
   4334e:	601a      	str	r2, [r3, #0]
   43350:	4770      	bx	lr
   43352:	bf00      	nop
   43354:	4000f000 	.word	0x4000f000
   43358:	40001000 	.word	0x40001000
   4335c:	01000001 	.word	0x01000001
   43360:	01010001 	.word	0x01010001
   43364:	20006320 	.word	0x20006320
   43368:	20006210 	.word	0x20006210
   4336c:	4001f000 	.word	0x4001f000

00043370 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   43370:	4b0f      	ldr	r3, [pc, #60]	; (433b0 <radio_ccm_tx_pkt_set+0x40>)
{
   43372:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   43374:	2200      	movs	r2, #0
{
   43376:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   43378:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   4337a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   4337e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   43382:	480c      	ldr	r0, [pc, #48]	; (433b4 <radio_ccm_tx_pkt_set+0x44>)
   43384:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   43388:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   4338c:	480a      	ldr	r0, [pc, #40]	; (433b8 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   4338e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   43392:	4c0a      	ldr	r4, [pc, #40]	; (433bc <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   43394:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   43398:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   4339a:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   4339e:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   433a2:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   433a4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   433a8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   433ac:	6019      	str	r1, [r3, #0]
}
   433ae:	4770      	bx	lr
   433b0:	4000f000 	.word	0x4000f000
   433b4:	01010000 	.word	0x01010000
   433b8:	20006320 	.word	0x20006320
   433bc:	20006210 	.word	0x20006210

000433c0 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   433c0:	4a0e      	ldr	r2, [pc, #56]	; (433fc <radio_ccm_is_done+0x3c>)
   433c2:	2302      	movs	r3, #2
   433c4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   433c8:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   433cc:	b933      	cbnz	r3, 433dc <radio_ccm_is_done+0x1c>
		__WFE();
   433ce:	bf20      	wfe
		__SEV();
   433d0:	bf40      	sev
		__WFE();
   433d2:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   433d4:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   433d8:	2b00      	cmp	r3, #0
   433da:	d0f8      	beq.n	433ce <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   433dc:	4b07      	ldr	r3, [pc, #28]	; (433fc <radio_ccm_is_done+0x3c>)
   433de:	4a08      	ldr	r2, [pc, #32]	; (43400 <radio_ccm_is_done+0x40>)
   433e0:	2002      	movs	r0, #2
   433e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   433e6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   433ea:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   433ee:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   433f2:	fab0 f080 	clz	r0, r0
   433f6:	0940      	lsrs	r0, r0, #5
   433f8:	4770      	bx	lr
   433fa:	bf00      	nop
   433fc:	4000f000 	.word	0x4000f000
   43400:	e000e100 	.word	0xe000e100

00043404 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   43404:	4b03      	ldr	r3, [pc, #12]	; (43414 <radio_ccm_mic_is_valid+0x10>)
   43406:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   4340a:	3800      	subs	r0, #0
   4340c:	bf18      	it	ne
   4340e:	2001      	movne	r0, #1
   43410:	4770      	bx	lr
   43412:	bf00      	nop
   43414:	4000f000 	.word	0x4000f000

00043418 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   43418:	4a15      	ldr	r2, [pc, #84]	; (43470 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   4341a:	4b16      	ldr	r3, [pc, #88]	; (43474 <radio_ar_configure+0x5c>)
{
   4341c:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   4341e:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   43422:	4e15      	ldr	r6, [pc, #84]	; (43478 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   43424:	2703      	movs	r7, #3
   43426:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   4342a:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   4342c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   43430:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   43432:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   43436:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   43438:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   4343c:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   43440:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   43444:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   43448:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   4344c:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   43450:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   43454:	4909      	ldr	r1, [pc, #36]	; (4347c <radio_ar_configure+0x64>)
   43456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   4345a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   4345e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   43462:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   43466:	bcf0      	pop	{r4, r5, r6, r7}
   43468:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   4346c:	4770      	bx	lr
   4346e:	bf00      	nop
   43470:	40001000 	.word	0x40001000
   43474:	4000f000 	.word	0x4000f000
   43478:	2000620c 	.word	0x2000620c
   4347c:	4001f000 	.word	0x4001f000

00043480 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   43480:	4b01      	ldr	r3, [pc, #4]	; (43488 <radio_ar_match_get+0x8>)
   43482:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   43486:	4770      	bx	lr
   43488:	4000f000 	.word	0x4000f000

0004348c <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   4348c:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   4348e:	4807      	ldr	r0, [pc, #28]	; (434ac <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   43490:	4c07      	ldr	r4, [pc, #28]	; (434b0 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   43492:	4a08      	ldr	r2, [pc, #32]	; (434b4 <radio_ar_status_reset+0x28>)
   43494:	2300      	movs	r3, #0
   43496:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   4349a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   4349e:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   434a2:	bc10      	pop	{r4}
   434a4:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   434a8:	4770      	bx	lr
   434aa:	bf00      	nop
   434ac:	4000f000 	.word	0x4000f000
   434b0:	40001000 	.word	0x40001000
   434b4:	4001f000 	.word	0x4001f000

000434b8 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   434b8:	4b08      	ldr	r3, [pc, #32]	; (434dc <radio_ar_has_match+0x24>)
   434ba:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   434be:	b160      	cbz	r0, 434da <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   434c0:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   434c4:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   434c8:	b138      	cbz	r0, 434da <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   434ca:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   434ce:	b120      	cbz	r0, 434da <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   434d0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   434d4:	fab0 f080 	clz	r0, r0
   434d8:	0940      	lsrs	r0, r0, #5
}
   434da:	4770      	bx	lr
   434dc:	40001000 	.word	0x40001000

000434e0 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   434e0:	2902      	cmp	r1, #2
{
   434e2:	b510      	push	{r4, lr}
   434e4:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   434e6:	d00b      	beq.n	43500 <mayfly_enable_cb+0x20>
   434e8:	4a0a      	ldr	r2, [pc, #40]	; (43514 <mayfly_enable_cb+0x34>)
   434ea:	490b      	ldr	r1, [pc, #44]	; (43518 <mayfly_enable_cb+0x38>)
   434ec:	480b      	ldr	r0, [pc, #44]	; (4351c <mayfly_enable_cb+0x3c>)
   434ee:	231e      	movs	r3, #30
   434f0:	f006 fb0a 	bl	49b08 <printk>
   434f4:	4040      	eors	r0, r0
   434f6:	f380 8811 	msr	BASEPRI, r0
   434fa:	f04f 0003 	mov.w	r0, #3
   434fe:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   43500:	200b      	movs	r0, #11
	if (enable) {
   43502:	b11c      	cbz	r4, 4350c <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   43504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   43508:	f7e9 bbb4 	b.w	2cc74 <arch_irq_enable>
}
   4350c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   43510:	f7e9 bbbe 	b.w	2cc90 <arch_irq_disable>
   43514:	000539d4 	.word	0x000539d4
   43518:	00053a24 	.word	0x00053a24
   4351c:	00052bbc 	.word	0x00052bbc

00043520 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   43520:	b129      	cbz	r1, 4352e <mayfly_is_enabled+0xe>
   43522:	3901      	subs	r1, #1
   43524:	2901      	cmp	r1, #1
   43526:	d805      	bhi.n	43534 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   43528:	200b      	movs	r0, #11
   4352a:	f7e9 bbc5 	b.w	2ccb8 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   4352e:	2018      	movs	r0, #24
   43530:	f7e9 bbc2 	b.w	2ccb8 <arch_irq_is_enabled>
{
   43534:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   43536:	4a07      	ldr	r2, [pc, #28]	; (43554 <mayfly_is_enabled+0x34>)
   43538:	4907      	ldr	r1, [pc, #28]	; (43558 <mayfly_is_enabled+0x38>)
   4353a:	4808      	ldr	r0, [pc, #32]	; (4355c <mayfly_is_enabled+0x3c>)
   4353c:	2336      	movs	r3, #54	; 0x36
   4353e:	f006 fae3 	bl	49b08 <printk>
   43542:	4040      	eors	r0, r0
   43544:	f380 8811 	msr	BASEPRI, r0
   43548:	f04f 0003 	mov.w	r0, #3
   4354c:	df02      	svc	2
		break;
	}

	return 0;
}
   4354e:	2000      	movs	r0, #0
   43550:	bd08      	pop	{r3, pc}
   43552:	bf00      	nop
   43554:	000539d4 	.word	0x000539d4
   43558:	00052c1c 	.word	0x00052c1c
   4355c:	00052bbc 	.word	0x00052bbc

00043560 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   43560:	4288      	cmp	r0, r1
   43562:	d00f      	beq.n	43584 <mayfly_prio_is_equal+0x24>
	return (caller_id == callee_id) ||
   43564:	2801      	cmp	r0, #1
   43566:	d007      	beq.n	43578 <mayfly_prio_is_equal+0x18>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   43568:	2802      	cmp	r0, #2
   4356a:	d10d      	bne.n	43588 <mayfly_prio_is_equal+0x28>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   4356c:	f1a1 0001 	sub.w	r0, r1, #1
   43570:	fab0 f080 	clz	r0, r0
   43574:	0940      	lsrs	r0, r0, #5
   43576:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   43578:	f1a1 0002 	sub.w	r0, r1, #2
   4357c:	fab0 f080 	clz	r0, r0
   43580:	0940      	lsrs	r0, r0, #5
   43582:	4770      	bx	lr
   43584:	2001      	movs	r0, #1
   43586:	4770      	bx	lr
   43588:	2000      	movs	r0, #0
#endif
	       0;
}
   4358a:	4770      	bx	lr

0004358c <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   4358c:	2901      	cmp	r1, #1
{
   4358e:	b508      	push	{r3, lr}
	switch (callee_id) {
   43590:	d00f      	beq.n	435b2 <mayfly_pend+0x26>
   43592:	2902      	cmp	r1, #2
   43594:	d00d      	beq.n	435b2 <mayfly_pend+0x26>
   43596:	b191      	cbz	r1, 435be <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   43598:	4a0c      	ldr	r2, [pc, #48]	; (435cc <mayfly_pend+0x40>)
   4359a:	490d      	ldr	r1, [pc, #52]	; (435d0 <mayfly_pend+0x44>)
   4359c:	480d      	ldr	r0, [pc, #52]	; (435d4 <mayfly_pend+0x48>)
   4359e:	2367      	movs	r3, #103	; 0x67
   435a0:	f006 fab2 	bl	49b08 <printk>
   435a4:	4040      	eors	r0, r0
   435a6:	f380 8811 	msr	BASEPRI, r0
   435aa:	f04f 0003 	mov.w	r0, #3
   435ae:	df02      	svc	2
		break;
	}
}
   435b0:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   435b2:	4b09      	ldr	r3, [pc, #36]	; (435d8 <mayfly_pend+0x4c>)
   435b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   435b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   435bc:	bd08      	pop	{r3, pc}
   435be:	4b06      	ldr	r3, [pc, #24]	; (435d8 <mayfly_pend+0x4c>)
   435c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   435c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   435c8:	bd08      	pop	{r3, pc}
   435ca:	bf00      	nop
   435cc:	000539d4 	.word	0x000539d4
   435d0:	00052c1c 	.word	0x00052c1c
   435d4:	00052bbc 	.word	0x00052bbc
   435d8:	e000e100 	.word	0xe000e100

000435dc <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   435dc:	2803      	cmp	r0, #3
{
   435de:	b510      	push	{r4, lr}
   435e0:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   435e2:	d804      	bhi.n	435ee <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   435e4:	4b11      	ldr	r3, [pc, #68]	; (4362c <hal_ticker_instance0_caller_id_get+0x50>)
   435e6:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   435e8:	b18c      	cbz	r4, 4360e <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   435ea:	4620      	mov	r0, r4
   435ec:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   435ee:	4a10      	ldr	r2, [pc, #64]	; (43630 <hal_ticker_instance0_caller_id_get+0x54>)
   435f0:	4910      	ldr	r1, [pc, #64]	; (43634 <hal_ticker_instance0_caller_id_get+0x58>)
   435f2:	4811      	ldr	r0, [pc, #68]	; (43638 <hal_ticker_instance0_caller_id_get+0x5c>)
   435f4:	232b      	movs	r3, #43	; 0x2b
   435f6:	f006 fa87 	bl	49b08 <printk>
   435fa:	4040      	eors	r0, r0
   435fc:	f380 8811 	msr	BASEPRI, r0
   43600:	f04f 0003 	mov.w	r0, #3
   43604:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   43606:	4b09      	ldr	r3, [pc, #36]	; (4362c <hal_ticker_instance0_caller_id_get+0x50>)
   43608:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   4360a:	2c00      	cmp	r4, #0
   4360c:	d1ed      	bne.n	435ea <hal_ticker_instance0_caller_id_get+0xe>
   4360e:	4a08      	ldr	r2, [pc, #32]	; (43630 <hal_ticker_instance0_caller_id_get+0x54>)
   43610:	490a      	ldr	r1, [pc, #40]	; (4363c <hal_ticker_instance0_caller_id_get+0x60>)
   43612:	4809      	ldr	r0, [pc, #36]	; (43638 <hal_ticker_instance0_caller_id_get+0x5c>)
   43614:	232e      	movs	r3, #46	; 0x2e
   43616:	f006 fa77 	bl	49b08 <printk>
   4361a:	4040      	eors	r0, r0
   4361c:	f380 8811 	msr	BASEPRI, r0
   43620:	f04f 0003 	mov.w	r0, #3
   43624:	df02      	svc	2
}
   43626:	4620      	mov	r0, r4
   43628:	bd10      	pop	{r4, pc}
   4362a:	bf00      	nop
   4362c:	00053ab4 	.word	0x00053ab4
   43630:	00053a34 	.word	0x00053a34
   43634:	00053a84 	.word	0x00053a84
   43638:	00052bbc 	.word	0x00052bbc
   4363c:	00053aa4 	.word	0x00053aa4

00043640 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   43640:	3801      	subs	r0, #1
{
   43642:	b510      	push	{r4, lr}
   43644:	461c      	mov	r4, r3
	switch (caller_id) {
   43646:	2804      	cmp	r0, #4
   43648:	f200 8082 	bhi.w	43750 <hal_ticker_instance0_sched+0x110>
   4364c:	e8df f000 	tbb	[pc, r0]
   43650:	3f302112 	.word	0x3f302112
   43654:	03          	.byte	0x03
   43655:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   43656:	2904      	cmp	r1, #4
   43658:	d04a      	beq.n	436f0 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   4365a:	4a44      	ldr	r2, [pc, #272]	; (4376c <hal_ticker_instance0_sched+0x12c>)
   4365c:	4944      	ldr	r1, [pc, #272]	; (43770 <hal_ticker_instance0_sched+0x130>)
   4365e:	4845      	ldr	r0, [pc, #276]	; (43774 <hal_ticker_instance0_sched+0x134>)
   43660:	23ba      	movs	r3, #186	; 0xba
   43662:	f006 fa51 	bl	49b08 <printk>
   43666:	4040      	eors	r0, r0
   43668:	f380 8811 	msr	BASEPRI, r0
   4366c:	f04f 0003 	mov.w	r0, #3
   43670:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   43672:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   43674:	2904      	cmp	r1, #4
   43676:	d043      	beq.n	43700 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   43678:	4a3c      	ldr	r2, [pc, #240]	; (4376c <hal_ticker_instance0_sched+0x12c>)
   4367a:	493d      	ldr	r1, [pc, #244]	; (43770 <hal_ticker_instance0_sched+0x130>)
   4367c:	483d      	ldr	r0, [pc, #244]	; (43774 <hal_ticker_instance0_sched+0x134>)
   4367e:	234e      	movs	r3, #78	; 0x4e
   43680:	f006 fa42 	bl	49b08 <printk>
   43684:	4040      	eors	r0, r0
   43686:	f380 8811 	msr	BASEPRI, r0
   4368a:	f04f 0003 	mov.w	r0, #3
   4368e:	df02      	svc	2
}
   43690:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   43692:	2903      	cmp	r1, #3
   43694:	d03c      	beq.n	43710 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   43696:	4a35      	ldr	r2, [pc, #212]	; (4376c <hal_ticker_instance0_sched+0x12c>)
   43698:	4935      	ldr	r1, [pc, #212]	; (43770 <hal_ticker_instance0_sched+0x130>)
   4369a:	4836      	ldr	r0, [pc, #216]	; (43774 <hal_ticker_instance0_sched+0x134>)
   4369c:	2365      	movs	r3, #101	; 0x65
   4369e:	f006 fa33 	bl	49b08 <printk>
   436a2:	4040      	eors	r0, r0
   436a4:	f380 8811 	msr	BASEPRI, r0
   436a8:	f04f 0003 	mov.w	r0, #3
   436ac:	df02      	svc	2
}
   436ae:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   436b0:	2904      	cmp	r1, #4
   436b2:	d035      	beq.n	43720 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   436b4:	4a2d      	ldr	r2, [pc, #180]	; (4376c <hal_ticker_instance0_sched+0x12c>)
   436b6:	492e      	ldr	r1, [pc, #184]	; (43770 <hal_ticker_instance0_sched+0x130>)
   436b8:	482e      	ldr	r0, [pc, #184]	; (43774 <hal_ticker_instance0_sched+0x134>)
   436ba:	237c      	movs	r3, #124	; 0x7c
   436bc:	f006 fa24 	bl	49b08 <printk>
   436c0:	4040      	eors	r0, r0
   436c2:	f380 8811 	msr	BASEPRI, r0
   436c6:	f04f 0003 	mov.w	r0, #3
   436ca:	df02      	svc	2
}
   436cc:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   436ce:	2903      	cmp	r1, #3
   436d0:	d036      	beq.n	43740 <hal_ticker_instance0_sched+0x100>
   436d2:	2904      	cmp	r1, #4
   436d4:	d02c      	beq.n	43730 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   436d6:	4a25      	ldr	r2, [pc, #148]	; (4376c <hal_ticker_instance0_sched+0x12c>)
   436d8:	4925      	ldr	r1, [pc, #148]	; (43770 <hal_ticker_instance0_sched+0x130>)
   436da:	4826      	ldr	r0, [pc, #152]	; (43774 <hal_ticker_instance0_sched+0x134>)
   436dc:	23a2      	movs	r3, #162	; 0xa2
   436de:	f006 fa13 	bl	49b08 <printk>
   436e2:	4040      	eors	r0, r0
   436e4:	f380 8811 	msr	BASEPRI, r0
   436e8:	f04f 0003 	mov.w	r0, #3
   436ec:	df02      	svc	2
}
   436ee:	bd10      	pop	{r4, pc}
			m.param = instance;
   436f0:	4b21      	ldr	r3, [pc, #132]	; (43778 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   436f2:	2102      	movs	r1, #2
			m.param = instance;
   436f4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   436f6:	2003      	movs	r0, #3
}
   436f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   436fc:	f7f0 bcd2 	b.w	340a4 <mayfly_enqueue>
			m.param = instance;
   43700:	4b1e      	ldr	r3, [pc, #120]	; (4377c <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   43702:	2102      	movs	r1, #2
			m.param = instance;
   43704:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   43706:	2000      	movs	r0, #0
}
   43708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   4370c:	f7f0 bcca 	b.w	340a4 <mayfly_enqueue>
			m.param = instance;
   43710:	4b1b      	ldr	r3, [pc, #108]	; (43780 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   43712:	2101      	movs	r1, #1
			m.param = instance;
   43714:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   43716:	4608      	mov	r0, r1
}
   43718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   4371c:	f7f0 bcc2 	b.w	340a4 <mayfly_enqueue>
			m.param = instance;
   43720:	4b18      	ldr	r3, [pc, #96]	; (43784 <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   43722:	2102      	movs	r1, #2
			m.param = instance;
   43724:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   43726:	2001      	movs	r0, #1
}
   43728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   4372c:	f7f0 bcba 	b.w	340a4 <mayfly_enqueue>
			m.param = instance;
   43730:	4b15      	ldr	r3, [pc, #84]	; (43788 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43732:	2102      	movs	r1, #2
			m.param = instance;
   43734:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43736:	4608      	mov	r0, r1
}
   43738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   4373c:	f7f0 bcb2 	b.w	340a4 <mayfly_enqueue>
			m.param = instance;
   43740:	4b12      	ldr	r3, [pc, #72]	; (4378c <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43742:	2101      	movs	r1, #1
			m.param = instance;
   43744:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43746:	2002      	movs	r0, #2
}
   43748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   4374c:	f7f0 bcaa 	b.w	340a4 <mayfly_enqueue>
		LL_ASSERT(0);
   43750:	4a06      	ldr	r2, [pc, #24]	; (4376c <hal_ticker_instance0_sched+0x12c>)
   43752:	4907      	ldr	r1, [pc, #28]	; (43770 <hal_ticker_instance0_sched+0x130>)
   43754:	4807      	ldr	r0, [pc, #28]	; (43774 <hal_ticker_instance0_sched+0x134>)
   43756:	23c0      	movs	r3, #192	; 0xc0
   43758:	f006 f9d6 	bl	49b08 <printk>
   4375c:	4040      	eors	r0, r0
   4375e:	f380 8811 	msr	BASEPRI, r0
   43762:	f04f 0003 	mov.w	r0, #3
   43766:	df02      	svc	2
}
   43768:	bd10      	pop	{r4, pc}
   4376a:	bf00      	nop
   4376c:	00053a34 	.word	0x00053a34
   43770:	00052c1c 	.word	0x00052c1c
   43774:	00052bbc 	.word	0x00052bbc
   43778:	20000dc4 	.word	0x20000dc4
   4377c:	20000e14 	.word	0x20000e14
   43780:	20000e04 	.word	0x20000e04
   43784:	20000df4 	.word	0x20000df4
   43788:	20000dd4 	.word	0x20000dd4
   4378c:	20000de4 	.word	0x20000de4

00043790 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   43790:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   43792:	2000      	movs	r0, #0
   43794:	f7ff b9aa 	b.w	42aec <cntr_cmp_set>

00043798 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   43798:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   4379a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   4379e:	4684      	mov	ip, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   437a0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   437a4:	3201      	adds	r2, #1
   437a6:	d03e      	beq.n	43826 <hci_vendor_read_static_addr+0x8e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   437a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   437ac:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   437b0:	f010 0001 	ands.w	r0, r0, #1
   437b4:	d100      	bne.n	437b8 <hci_vendor_read_static_addr+0x20>

		return 1;
	}

	return 0;
}
   437b6:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   437b8:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   437bc:	f8cc 3000 	str.w	r3, [ip]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   437c0:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
   437c4:	f88c 3004 	strb.w	r3, [ip, #4]
	dst[1] = val >> 8;
   437c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   437cc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   437d0:	f88c 3005 	strb.w	r3, [ip, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   437d4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   437d8:	3301      	adds	r3, #1
   437da:	d01c      	beq.n	43816 <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   437dc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   437e0:	3301      	adds	r3, #1
   437e2:	d018      	beq.n	43816 <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   437e4:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   437e8:	3301      	adds	r3, #1
   437ea:	d014      	beq.n	43816 <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   437ec:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   437f0:	3301      	adds	r3, #1
   437f2:	d010      	beq.n	43816 <hci_vendor_read_static_addr+0x7e>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   437f4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   437f8:	f8cc 3006 	str.w	r3, [ip, #6]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   437fc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   43800:	f8cc 300a 	str.w	r3, [ip, #10]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   43804:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   43808:	f8cc 300e 	str.w	r3, [ip, #14]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   4380c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   43810:	f8cc 3012 	str.w	r3, [ip, #18]
}
   43814:	e005      	b.n	43822 <hci_vendor_read_static_addr+0x8a>
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   43816:	2210      	movs	r2, #16
   43818:	2100      	movs	r1, #0
   4381a:	f10c 0006 	add.w	r0, ip, #6
   4381e:	f008 faad 	bl	4bd7c <memset>
		return 1;
   43822:	2001      	movs	r0, #1
}
   43824:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   43826:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   4382a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   4382e:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   43830:	4293      	cmp	r3, r2
   43832:	d1b9      	bne.n	437a8 <hci_vendor_read_static_addr+0x10>
	return 0;
   43834:	2000      	movs	r0, #0
}
   43836:	bd08      	pop	{r3, pc}

00043838 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   43838:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   4383a:	2210      	movs	r2, #16
{
   4383c:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   4383e:	2100      	movs	r1, #0
   43840:	f008 fa9c 	bl	4bd7c <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   43844:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   43848:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   4384c:	3201      	adds	r2, #1
   4384e:	d018      	beq.n	43882 <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   43850:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   43854:	3201      	adds	r2, #1
   43856:	d014      	beq.n	43882 <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   43858:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   4385c:	3201      	adds	r2, #1
   4385e:	d010      	beq.n	43882 <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   43860:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   43864:	3201      	adds	r2, #1
   43866:	d00c      	beq.n	43882 <hci_vendor_read_key_hierarchy_roots+0x4a>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   43868:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   4386c:	6022      	str	r2, [r4, #0]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   4386e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   43872:	6062      	str	r2, [r4, #4]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   43874:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   43878:	60a2      	str	r2, [r4, #8]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   4387a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   4387e:	60e3      	str	r3, [r4, #12]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   43880:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   43882:	4620      	mov	r0, r4
   43884:	2210      	movs	r2, #16
}
   43886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   4388a:	2100      	movs	r1, #0
   4388c:	f008 ba76 	b.w	4bd7c <memset>

00043890 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   43890:	4b02      	ldr	r3, [pc, #8]	; (4389c <net_buf_pool_get+0xc>)
   43892:	222c      	movs	r2, #44	; 0x2c
   43894:	fb02 3000 	mla	r0, r2, r0, r3
   43898:	4770      	bx	lr
   4389a:	bf00      	nop
   4389c:	20001354 	.word	0x20001354

000438a0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   438a0:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   438a2:	4b06      	ldr	r3, [pc, #24]	; (438bc <net_buf_id+0x1c>)
   438a4:	212c      	movs	r1, #44	; 0x2c
   438a6:	fb01 3302 	mla	r3, r1, r2, r3
   438aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   438ac:	7f1b      	ldrb	r3, [r3, #28]
   438ae:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   438b0:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   438b2:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   438b6:	fbb0 f0f3 	udiv	r0, r0, r3
   438ba:	4770      	bx	lr
   438bc:	20001354 	.word	0x20001354

000438c0 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   438c0:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   438c2:	4b0a      	ldr	r3, [pc, #40]	; (438ec <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   438c4:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   438c6:	242c      	movs	r4, #44	; 0x2c
   438c8:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   438cc:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   438ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   438d0:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   438d2:	681a      	ldr	r2, [r3, #0]
   438d4:	4294      	cmp	r4, r2
   438d6:	bf94      	ite	ls
   438d8:	600c      	strls	r4, [r1, #0]
   438da:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   438dc:	e9d3 5400 	ldrd	r5, r4, [r3]
   438e0:	f7ff ffde 	bl	438a0 <net_buf_id>
}
   438e4:	fb05 4000 	mla	r0, r5, r0, r4
   438e8:	bd38      	pop	{r3, r4, r5, pc}
   438ea:	bf00      	nop
   438ec:	20001354 	.word	0x20001354

000438f0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   438f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   438f4:	4605      	mov	r5, r0
   438f6:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   438f8:	4610      	mov	r0, r2
   438fa:	4619      	mov	r1, r3
{
   438fc:	4691      	mov	r9, r2
   438fe:	4698      	mov	r8, r3
   43900:	4617      	mov	r7, r2
   43902:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   43904:	f00d fbc6 	bl	51094 <sys_clock_timeout_end_calc>
   43908:	4682      	mov	sl, r0
   4390a:	468b      	mov	fp, r1
	__asm__ volatile(
   4390c:	f04f 0320 	mov.w	r3, #32
   43910:	f3ef 8111 	mrs	r1, BASEPRI
   43914:	f383 8812 	msr	BASEPRI_MAX, r3
   43918:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   4391c:	8b6b      	ldrh	r3, [r5, #26]
   4391e:	2b00      	cmp	r3, #0
   43920:	d058      	beq.n	439d4 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   43922:	8b2a      	ldrh	r2, [r5, #24]
   43924:	429a      	cmp	r2, r3
   43926:	d93c      	bls.n	439a2 <net_buf_alloc_len+0xb2>
   43928:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   4392a:	2200      	movs	r2, #0
   4392c:	2300      	movs	r3, #0
   4392e:	4628      	mov	r0, r5
   43930:	f004 fbce 	bl	480d0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   43934:	9900      	ldr	r1, [sp, #0]
   43936:	4604      	mov	r4, r0
   43938:	2800      	cmp	r0, #0
   4393a:	d032      	beq.n	439a2 <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   4393c:	f381 8811 	msr	BASEPRI, r1
   43940:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   43944:	9b01      	ldr	r3, [sp, #4]
   43946:	2b00      	cmp	r3, #0
   43948:	d055      	beq.n	439f6 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   4394a:	ea58 0309 	orrs.w	r3, r8, r9
   4394e:	d00f      	beq.n	43970 <net_buf_alloc_len+0x80>
   43950:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   43954:	bf08      	it	eq
   43956:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   4395a:	d009      	beq.n	43970 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   4395c:	f005 fab0 	bl	48ec0 <sys_clock_tick_get>
   43960:	ebba 0700 	subs.w	r7, sl, r0
   43964:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   43968:	2e00      	cmp	r6, #0
   4396a:	bfbc      	itt	lt
   4396c:	2700      	movlt	r7, #0
   4396e:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   43970:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   43972:	4d26      	ldr	r5, [pc, #152]	; (43a0c <net_buf_alloc_len+0x11c>)
   43974:	f04f 082c 	mov.w	r8, #44	; 0x2c
   43978:	fb08 5303 	mla	r3, r8, r3, r5
   4397c:	463a      	mov	r2, r7
   4397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   43980:	681b      	ldr	r3, [r3, #0]
   43982:	a901      	add	r1, sp, #4
   43984:	f8d3 9000 	ldr.w	r9, [r3]
   43988:	4620      	mov	r0, r4
   4398a:	4633      	mov	r3, r6
   4398c:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   4398e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   43990:	2800      	cmp	r0, #0
   43992:	d131      	bne.n	439f8 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   43994:	79a0      	ldrb	r0, [r4, #6]
   43996:	4621      	mov	r1, r4
   43998:	fb00 5008 	mla	r0, r0, r8, r5
   4399c:	f00d f8c7 	bl	50b2e <k_queue_prepend>
}
   439a0:	e024      	b.n	439ec <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   439a2:	8b68      	ldrh	r0, [r5, #26]
   439a4:	1e43      	subs	r3, r0, #1
   439a6:	836b      	strh	r3, [r5, #26]
   439a8:	f381 8811 	msr	BASEPRI, r1
   439ac:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   439b0:	7f2a      	ldrb	r2, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   439b2:	8b29      	ldrh	r1, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   439b4:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   439b6:	f102 0317 	add.w	r3, r2, #23
   439ba:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   439be:	1a09      	subs	r1, r1, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   439c0:	fb01 4403 	mla	r4, r1, r3, r4
	return pool - _net_buf_pool_list;
   439c4:	4b11      	ldr	r3, [pc, #68]	; (43a0c <net_buf_alloc_len+0x11c>)
   439c6:	4912      	ldr	r1, [pc, #72]	; (43a10 <net_buf_alloc_len+0x120>)
	buf->user_data_size = pool->user_data_size;
   439c8:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   439ca:	1aeb      	subs	r3, r5, r3
   439cc:	109b      	asrs	r3, r3, #2
   439ce:	434b      	muls	r3, r1
	buf->pool_id = pool_id(pool);
   439d0:	71a3      	strb	r3, [r4, #6]
		goto success;
   439d2:	e7b7      	b.n	43944 <net_buf_alloc_len+0x54>
   439d4:	f381 8811 	msr	BASEPRI, r1
   439d8:	f3bf 8f6f 	isb	sy
   439dc:	464a      	mov	r2, r9
   439de:	4643      	mov	r3, r8
   439e0:	4628      	mov	r0, r5
   439e2:	f004 fb75 	bl	480d0 <z_impl_k_queue_get>
	if (!buf) {
   439e6:	4604      	mov	r4, r0
   439e8:	2800      	cmp	r0, #0
   439ea:	d1ab      	bne.n	43944 <net_buf_alloc_len+0x54>
		return NULL;
   439ec:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   439ee:	4620      	mov	r0, r4
   439f0:	b003      	add	sp, #12
   439f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   439f6:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   439f8:	2300      	movs	r3, #0
	buf->ref   = 1U;
   439fa:	2201      	movs	r2, #1
	buf->frags = NULL;
   439fc:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   439fe:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   43a00:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   43a02:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   43a04:	6923      	ldr	r3, [r4, #16]
   43a06:	81e2      	strh	r2, [r4, #14]
   43a08:	60a3      	str	r3, [r4, #8]
	return buf;
   43a0a:	e7f0      	b.n	439ee <net_buf_alloc_len+0xfe>
   43a0c:	20001354 	.word	0x20001354
   43a10:	ba2e8ba3 	.word	0xba2e8ba3

00043a14 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   43a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   43a18:	4d16      	ldr	r5, [pc, #88]	; (43a74 <net_buf_unref+0x60>)
   43a1a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   43a1c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   43a1e:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   43a20:	b90c      	cbnz	r4, 43a26 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   43a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   43a26:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   43a28:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   43a2c:	3b01      	subs	r3, #1
   43a2e:	b2db      	uxtb	r3, r3
   43a30:	7123      	strb	r3, [r4, #4]
   43a32:	2b00      	cmp	r3, #0
   43a34:	d1f5      	bne.n	43a22 <net_buf_unref+0xe>
		if (buf->__buf) {
   43a36:	6921      	ldr	r1, [r4, #16]
   43a38:	b159      	cbz	r1, 43a52 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   43a3a:	7963      	ldrb	r3, [r4, #5]
   43a3c:	079b      	lsls	r3, r3, #30
   43a3e:	d407      	bmi.n	43a50 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   43a40:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   43a42:	fb07 5303 	mla	r3, r7, r3, r5
   43a46:	4620      	mov	r0, r4
   43a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   43a4a:	681b      	ldr	r3, [r3, #0]
   43a4c:	689b      	ldr	r3, [r3, #8]
   43a4e:	4798      	blx	r3
			buf->__buf = NULL;
   43a50:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   43a52:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   43a54:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   43a56:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   43a5a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   43a5c:	6a1b      	ldr	r3, [r3, #32]
   43a5e:	b11b      	cbz	r3, 43a68 <net_buf_unref+0x54>
			pool->destroy(buf);
   43a60:	4620      	mov	r0, r4
   43a62:	4798      	blx	r3
{
   43a64:	4644      	mov	r4, r8
   43a66:	e7db      	b.n	43a20 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   43a68:	4621      	mov	r1, r4
   43a6a:	fb00 5007 	mla	r0, r0, r7, r5
   43a6e:	f00d f85e 	bl	50b2e <k_queue_prepend>
}
   43a72:	e7f7      	b.n	43a64 <net_buf_unref+0x50>
   43a74:	20001354 	.word	0x20001354

00043a78 <net_buf_append_bytes>:
 * the buffer. It assumes that the buffer has at least one fragment.
 */
size_t net_buf_append_bytes(struct net_buf *buf, size_t len,
			    const void *value, k_timeout_t timeout,
			    net_buf_allocator_cb allocate_cb, void *user_data)
{
   43a78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43a7c:	4606      	mov	r6, r0
   43a7e:	460d      	mov	r5, r1
   43a80:	4617      	mov	r7, r2
	while (buf->frags) {
   43a82:	4604      	mov	r4, r0
   43a84:	4621      	mov	r1, r4
   43a86:	6824      	ldr	r4, [r4, #0]
   43a88:	2c00      	cmp	r4, #0
   43a8a:	d1fb      	bne.n	43a84 <net_buf_append_bytes+0xc>
	return &_net_buf_pool_list[id];
   43a8c:	f8df a060 	ldr.w	sl, [pc, #96]	; 43af0 <net_buf_append_bytes+0x78>
   43a90:	f04f 092c 	mov.w	r9, #44	; 0x2c
	return net_buf_simple_tailroom(&buf->b);
   43a94:	f101 0b08 	add.w	fp, r1, #8
   43a98:	4658      	mov	r0, fp
   43a9a:	f00c f992 	bl	4fdc2 <net_buf_simple_tailroom>
	struct net_buf *frag = net_buf_frag_last(buf);
	size_t added_len = 0;
	const uint8_t *value8 = value;

	do {
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   43a9e:	4285      	cmp	r5, r0
   43aa0:	bf2c      	ite	cs
   43aa2:	fa1f f880 	uxthcs.w	r8, r0
   43aa6:	fa1f f885 	uxthcc.w	r8, r5
	return net_buf_simple_add_mem(&buf->b, mem, len);
   43aaa:	4639      	mov	r1, r7
   43aac:	4642      	mov	r2, r8
   43aae:	4658      	mov	r0, fp
   43ab0:	f00c f940 	bl	4fd34 <net_buf_simple_add_mem>
		net_buf_add_mem(frag, value8, count);
		len -= count;
		added_len += count;
		value8 += count;

		if (len == 0) {
   43ab4:	ebb5 0508 	subs.w	r5, r5, r8
		added_len += count;
   43ab8:	4444      	add	r4, r8
		value8 += count;
   43aba:	4447      	add	r7, r8
		if (len == 0) {
   43abc:	d014      	beq.n	43ae8 <net_buf_append_bytes+0x70>
			return added_len;
		}

		if (allocate_cb) {
   43abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   43ac0:	b14b      	cbz	r3, 43ad6 <net_buf_append_bytes+0x5e>
			frag = allocate_cb(timeout, user_data);
   43ac2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   43ac6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   43ac8:	4798      	blx	r3

			/* Allocate from the original pool if no callback has
			 * been provided.
			 */
			pool = net_buf_pool_get(buf->pool_id);
			frag = net_buf_alloc_len(pool, len, timeout);
   43aca:	4601      	mov	r1, r0
		}

		if (!frag) {
   43acc:	b160      	cbz	r0, 43ae8 <net_buf_append_bytes+0x70>
			return added_len;
		}

		net_buf_frag_add(buf, frag);
   43ace:	4630      	mov	r0, r6
   43ad0:	f00c f90d 	bl	4fcee <net_buf_frag_add>
	do {
   43ad4:	e7de      	b.n	43a94 <net_buf_append_bytes+0x1c>
	return &_net_buf_pool_list[id];
   43ad6:	79b0      	ldrb	r0, [r6, #6]
			frag = net_buf_alloc_len(pool, len, timeout);
   43ad8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   43adc:	4629      	mov	r1, r5
   43ade:	fb00 a009 	mla	r0, r0, r9, sl
   43ae2:	f7ff ff05 	bl	438f0 <net_buf_alloc_len>
   43ae6:	e7f0      	b.n	43aca <net_buf_append_bytes+0x52>
	} while (1);

	/* Unreachable */
	return 0;
}
   43ae8:	4620      	mov	r0, r4
   43aea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43aee:	bf00      	nop
   43af0:	20001354 	.word	0x20001354

00043af4 <hid_int_in>:

	return -EINVAL;
}

static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
   43af4:	b510      	push	{r4, lr}
   43af6:	460c      	mov	r4, r1
	struct hid_device_info *dev_data;
	struct usb_dev_data *common;

	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
   43af8:	4601      	mov	r1, r0
   43afa:	4808      	ldr	r0, [pc, #32]	; (43b1c <hid_int_in+0x28>)
   43afc:	f006 fe03 	bl	4a706 <usb_get_dev_data_by_ep>
	if (common == NULL) {
   43b00:	b150      	cbz	r0, 43b18 <hid_int_in+0x24>
		return;
	}

	dev_data = CONTAINER_OF(common, struct hid_device_info, common);

	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
   43b02:	2c02      	cmp	r4, #2
   43b04:	d108      	bne.n	43b18 <hid_int_in+0x24>
   43b06:	f850 3c08 	ldr.w	r3, [r0, #-8]
   43b0a:	b12b      	cbz	r3, 43b18 <hid_int_in+0x24>
	    dev_data->ops->int_in_ready == NULL) {
   43b0c:	691b      	ldr	r3, [r3, #16]
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
   43b0e:	b11b      	cbz	r3, 43b18 <hid_int_in+0x24>
		return;
	}

	dev_data->ops->int_in_ready(common->dev);
}
   43b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dev_data->ops->int_in_ready(common->dev);
   43b14:	6800      	ldr	r0, [r0, #0]
   43b16:	4718      	bx	r3
}
   43b18:	bd10      	pop	{r4, pc}
   43b1a:	bf00      	nop
   43b1c:	20006478 	.word	0x20006478

00043b20 <hid_custom_handle_req>:
{
   43b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (usb_reqtype_is_to_host(setup) &&
   43b22:	f990 3000 	ldrsb.w	r3, [r0]
   43b26:	2b00      	cmp	r3, #0
{
   43b28:	4604      	mov	r4, r0
   43b2a:	460d      	mov	r5, r1
   43b2c:	4617      	mov	r7, r2
	if (usb_reqtype_is_to_host(setup) &&
   43b2e:	db02      	blt.n	43b36 <hid_custom_handle_req+0x16>
			return -EINVAL;
   43b30:	f06f 0015 	mvn.w	r0, #21
}
   43b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    setup->RequestType.recipient == USB_REQTYPE_RECIPIENT_INTERFACE &&
   43b36:	8803      	ldrh	r3, [r0, #0]
   43b38:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
   43b3c:	b29b      	uxth	r3, r3
   43b3e:	f240 6201 	movw	r2, #1537	; 0x601
   43b42:	4293      	cmp	r3, r2
   43b44:	d1f4      	bne.n	43b30 <hid_custom_handle_req+0x10>
		uint8_t value = (uint8_t)(setup->wValue >> 8);
   43b46:	8846      	ldrh	r6, [r0, #2]
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
   43b48:	7901      	ldrb	r1, [r0, #4]
   43b4a:	4812      	ldr	r0, [pc, #72]	; (43b94 <hid_custom_handle_req+0x74>)
		uint8_t value = (uint8_t)(setup->wValue >> 8);
   43b4c:	0a36      	lsrs	r6, r6, #8
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
   43b4e:	f006 fdcc 	bl	4a6ea <usb_get_dev_data_by_iface>
		if (common == NULL) {
   43b52:	2800      	cmp	r0, #0
   43b54:	d0ec      	beq.n	43b30 <hid_custom_handle_req+0x10>
		switch (value) {
   43b56:	2e21      	cmp	r6, #33	; 0x21
   43b58:	d004      	beq.n	43b64 <hid_custom_handle_req+0x44>
   43b5a:	2e22      	cmp	r6, #34	; 0x22
   43b5c:	d00f      	beq.n	43b7e <hid_custom_handle_req+0x5e>
   43b5e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   43b62:	e7e7      	b.n	43b34 <hid_custom_handle_req+0x14>
			cfg = common->dev->config;
   43b64:	6803      	ldr	r3, [r0, #0]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
   43b66:	88e1      	ldrh	r1, [r4, #6]
			hid_desc = cfg->interface_descriptor;
   43b68:	685b      	ldr	r3, [r3, #4]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
   43b6a:	685b      	ldr	r3, [r3, #4]
   43b6c:	f813 2f09 	ldrb.w	r2, [r3, #9]!
   43b70:	4291      	cmp	r1, r2
   43b72:	bf94      	ite	ls
   43b74:	6029      	strls	r1, [r5, #0]
   43b76:	602a      	strhi	r2, [r5, #0]
			*data = (uint8_t *)dev_data->report_desc;
   43b78:	603b      	str	r3, [r7, #0]
		return 0;
   43b7a:	2000      	movs	r0, #0
   43b7c:	e7da      	b.n	43b34 <hid_custom_handle_req+0x14>
			*len = MIN(setup->wLength, dev_data->report_size);
   43b7e:	88e3      	ldrh	r3, [r4, #6]
   43b80:	f850 2c0c 	ldr.w	r2, [r0, #-12]
   43b84:	429a      	cmp	r2, r3
   43b86:	bf94      	ite	ls
   43b88:	602a      	strls	r2, [r5, #0]
   43b8a:	602b      	strhi	r3, [r5, #0]
			*data = (uint8_t *)dev_data->report_desc;
   43b8c:	f850 3c10 	ldr.w	r3, [r0, #-16]
			break;
   43b90:	e7f2      	b.n	43b78 <hid_custom_handle_req+0x58>
   43b92:	bf00      	nop
   43b94:	20006478 	.word	0x20006478

00043b98 <hid_class_handle_req>:
{
   43b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   43b9c:	4604      	mov	r4, r0
   43b9e:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
   43ba0:	7901      	ldrb	r1, [r0, #4]
   43ba2:	4814      	ldr	r0, [pc, #80]	; (43bf4 <hid_class_handle_req+0x5c>)
{
   43ba4:	4617      	mov	r7, r2
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
   43ba6:	f006 fda0 	bl	4a6ea <usb_get_dev_data_by_iface>
	if (common == NULL) {
   43baa:	4605      	mov	r5, r0
   43bac:	b1d0      	cbz	r0, 43be4 <hid_class_handle_req+0x4c>
	if (usb_reqtype_is_to_host(setup)) {
   43bae:	f994 2000 	ldrsb.w	r2, [r4]
	dev = common->dev;
   43bb2:	6800      	ldr	r0, [r0, #0]
		switch (setup->bRequest) {
   43bb4:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   43bb6:	2a00      	cmp	r2, #0
   43bb8:	da0d      	bge.n	43bd6 <hid_class_handle_req+0x3e>
		switch (setup->bRequest) {
   43bba:	2b01      	cmp	r3, #1
   43bbc:	d116      	bne.n	43bec <hid_class_handle_req+0x54>
			if (dev_data->ops && dev_data->ops->get_report) {
   43bbe:	f855 3c08 	ldr.w	r3, [r5, #-8]
   43bc2:	b19b      	cbz	r3, 43bec <hid_class_handle_req+0x54>
   43bc4:	681d      	ldr	r5, [r3, #0]
			if (dev_data->ops && dev_data->ops->set_report) {
   43bc6:	b18d      	cbz	r5, 43bec <hid_class_handle_req+0x54>
				return dev_data->ops->set_report(dev, setup,
   43bc8:	463b      	mov	r3, r7
   43bca:	4632      	mov	r2, r6
   43bcc:	4621      	mov	r1, r4
   43bce:	46ac      	mov	ip, r5
}
   43bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				return dev_data->ops->set_report(dev, setup,
   43bd4:	4760      	bx	ip
		switch (setup->bRequest) {
   43bd6:	2b09      	cmp	r3, #9
   43bd8:	d108      	bne.n	43bec <hid_class_handle_req+0x54>
			if (dev_data->ops && dev_data->ops->set_report) {
   43bda:	f855 3c08 	ldr.w	r3, [r5, #-8]
   43bde:	b12b      	cbz	r3, 43bec <hid_class_handle_req+0x54>
   43be0:	685d      	ldr	r5, [r3, #4]
   43be2:	e7f0      	b.n	43bc6 <hid_class_handle_req+0x2e>
		return -ENODEV;
   43be4:	f06f 0012 	mvn.w	r0, #18
}
   43be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return hid_on_get_idle(dev_data, setup, len, data);
   43bec:	f06f 0085 	mvn.w	r0, #133	; 0x85
   43bf0:	e7fa      	b.n	43be8 <hid_class_handle_req+0x50>
   43bf2:	bf00      	nop
   43bf4:	20006478 	.word	0x20006478

00043bf8 <hid_status_cb>:
{
   43bf8:	b510      	push	{r4, lr}
   43bfa:	460c      	mov	r4, r1
	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
   43bfc:	4601      	mov	r1, r0
   43bfe:	480f      	ldr	r0, [pc, #60]	; (43c3c <hid_status_cb+0x44>)
   43c00:	f006 fd67 	bl	4a6d2 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
   43c04:	b150      	cbz	r0, 43c1c <hid_status_cb+0x24>
	switch (status) {
   43c06:	1e61      	subs	r1, r4, #1
   43c08:	2905      	cmp	r1, #5
   43c0a:	d807      	bhi.n	43c1c <hid_status_cb+0x24>
   43c0c:	e8df f001 	tbb	[pc, r1]
   43c10:	07030607 	.word	0x07030607
   43c14:	0f0d      	.short	0x0f0d
		dev_data->configured = true;
   43c16:	2301      	movs	r3, #1
   43c18:	f800 3c04 	strb.w	r3, [r0, #-4]
}
   43c1c:	bd10      	pop	{r4, pc}
		dev_data->configured = false;
   43c1e:	2300      	movs	r3, #0
   43c20:	f800 3c04 	strb.w	r3, [r0, #-4]
			dev_data->suspended = false;
   43c24:	f800 3c03 	strb.w	r3, [r0, #-3]
   43c28:	e7f8      	b.n	43c1c <hid_status_cb+0x24>
		dev_data->suspended = true;
   43c2a:	2301      	movs	r3, #1
   43c2c:	e7fa      	b.n	43c24 <hid_status_cb+0x2c>
		if (dev_data->suspended) {
   43c2e:	f810 3c03 	ldrb.w	r3, [r0, #-3]
   43c32:	2b00      	cmp	r3, #0
   43c34:	d0f2      	beq.n	43c1c <hid_status_cb+0x24>
			dev_data->suspended = false;
   43c36:	2300      	movs	r3, #0
   43c38:	e7f4      	b.n	43c24 <hid_status_cb+0x2c>
   43c3a:	bf00      	nop
   43c3c:	20006478 	.word	0x20006478

00043c40 <usb_hid_register_device>:
	return 0;
}

void usb_hid_register_device(const struct device *dev, const uint8_t *desc,
			     size_t size, const struct hid_ops *ops)
{
   43c40:	b510      	push	{r4, lr}
	struct hid_device_info *dev_data = dev->data;
   43c42:	6904      	ldr	r4, [r0, #16]

	dev_data->report_desc = desc;
	dev_data->report_size = size;

	dev_data->ops = ops;
   43c44:	60a3      	str	r3, [r4, #8]
	parent->next = child;
   43c46:	2300      	movs	r3, #0
   43c48:	6163      	str	r3, [r4, #20]
	return list->tail;
   43c4a:	4b07      	ldr	r3, [pc, #28]	; (43c68 <usb_hid_register_device+0x28>)
	dev_data->common.dev = dev;
   43c4c:	6120      	str	r0, [r4, #16]
	dev_data->report_size = size;
   43c4e:	e9c4 1200 	strd	r1, r2, [r4]
   43c52:	6859      	ldr	r1, [r3, #4]

	sys_slist_append(&usb_hid_devlist, &dev_data->common.node);
   43c54:	f104 0214 	add.w	r2, r4, #20
Z_GENLIST_APPEND(slist, snode)
   43c58:	b911      	cbnz	r1, 43c60 <usb_hid_register_device+0x20>
	list->head = node;
   43c5a:	e9c3 2200 	strd	r2, r2, [r3]

	LOG_DBG("Added dev_data %p dev %p to devlist %p", dev_data, dev,
		&usb_hid_devlist);
}
   43c5e:	bd10      	pop	{r4, pc}
	parent->next = child;
   43c60:	600a      	str	r2, [r1, #0]
	list->tail = node;
   43c62:	605a      	str	r2, [r3, #4]
   43c64:	e7fb      	b.n	43c5e <usb_hid_register_device+0x1e>
   43c66:	bf00      	nop
   43c68:	20006478 	.word	0x20006478

00043c6c <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
   43c6c:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   43c6e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
   43c72:	d512      	bpl.n	43c9a <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   43c74:	2b08      	cmp	r3, #8
   43c76:	d105      	bne.n	43c84 <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   43c78:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
   43c7a:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   43c7e:	d506      	bpl.n	43c8e <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   43c80:	480e      	ldr	r0, [pc, #56]	; (43cbc <endpoint_ctx+0x50>)
   43c82:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
   43c84:	f010 0f78 	tst.w	r0, #120	; 0x78
   43c88:	d112      	bne.n	43cb0 <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
   43c8a:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
   43c8e:	204c      	movs	r0, #76	; 0x4c
   43c90:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   43c94:	4b0a      	ldr	r3, [pc, #40]	; (43cc0 <endpoint_ctx+0x54>)
   43c96:	4418      	add	r0, r3
   43c98:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   43c9a:	2b08      	cmp	r3, #8
   43c9c:	d105      	bne.n	43caa <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   43c9e:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
   43ca0:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   43ca4:	d506      	bpl.n	43cb4 <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   43ca6:	4807      	ldr	r0, [pc, #28]	; (43cc4 <endpoint_ctx+0x58>)
   43ca8:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
   43caa:	f010 0f78 	tst.w	r0, #120	; 0x78
   43cae:	d0f6      	beq.n	43c9e <endpoint_ctx+0x32>
		return NULL;
   43cb0:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
   43cb2:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   43cb4:	4804      	ldr	r0, [pc, #16]	; (43cc8 <endpoint_ctx+0x5c>)
   43cb6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   43cba:	4770      	bx	lr
   43cbc:	200065cc 	.word	0x200065cc
   43cc0:	20006480 	.word	0x20006480
   43cc4:	200066ec 	.word	0x200066ec
   43cc8:	200065ec 	.word	0x200065ec

00043ccc <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
   43ccc:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
   43cce:	4801      	ldr	r0, [pc, #4]	; (43cd4 <usbd_evt_put+0x8>)
   43cd0:	f00c bf22 	b.w	50b18 <k_queue_append>
   43cd4:	2000133c 	.word	0x2000133c

00043cd8 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   43cd8:	4901      	ldr	r1, [pc, #4]	; (43ce0 <usbd_work_schedule+0x8>)
   43cda:	4802      	ldr	r0, [pc, #8]	; (43ce4 <usbd_work_schedule+0xc>)
   43cdc:	f00d b809 	b.w	50cf2 <k_work_submit_to_queue>
   43ce0:	200064a8 	.word	0x200064a8
   43ce4:	20003f40 	.word	0x20003f40

00043ce8 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
   43ce8:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   43cea:	480b      	ldr	r0, [pc, #44]	; (43d18 <usb_init+0x30>)
   43cec:	f002 fd3c 	bl	46768 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
   43cf0:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
   43cf2:	480a      	ldr	r0, [pc, #40]	; (43d1c <usb_init+0x34>)
   43cf4:	f002 fd7c 	bl	467f0 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
   43cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   43cfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   43d00:	4907      	ldr	r1, [pc, #28]	; (43d20 <usb_init+0x38>)
   43d02:	4808      	ldr	r0, [pc, #32]	; (43d24 <usb_init+0x3c>)
   43d04:	9400      	str	r4, [sp, #0]
   43d06:	f004 fba1 	bl	4844c <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
   43d0a:	4907      	ldr	r1, [pc, #28]	; (43d28 <usb_init+0x40>)
   43d0c:	4807      	ldr	r0, [pc, #28]	; (43d2c <usb_init+0x44>)
   43d0e:	f00c ffd7 	bl	50cc0 <k_work_init>

	return 0;
}
   43d12:	4620      	mov	r0, r4
   43d14:	b002      	add	sp, #8
   43d16:	bd10      	pop	{r4, pc}
   43d18:	00054480 	.word	0x00054480
   43d1c:	00053ac8 	.word	0x00053ac8
   43d20:	200092b0 	.word	0x200092b0
   43d24:	20003f40 	.word	0x20003f40
   43d28:	00044041 	.word	0x00044041
   43d2c:	200064a8 	.word	0x200064a8

00043d30 <usbd_evt_get>:
   43d30:	4802      	ldr	r0, [pc, #8]	; (43d3c <usbd_evt_get+0xc>)
   43d32:	2200      	movs	r2, #0
   43d34:	2300      	movs	r3, #0
   43d36:	f004 b9cb 	b.w	480d0 <z_impl_k_queue_get>
   43d3a:	bf00      	nop
   43d3c:	2000133c 	.word	0x2000133c

00043d40 <usbd_evt_flush>:
{
   43d40:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   43d42:	4c05      	ldr	r4, [pc, #20]	; (43d58 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
   43d44:	f7ff fff4 	bl	43d30 <usbd_evt_get>
		if (ev) {
   43d48:	b120      	cbz	r0, 43d54 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   43d4a:	1d01      	adds	r1, r0, #4
   43d4c:	4620      	mov	r0, r4
   43d4e:	f00c fe1b 	bl	50988 <k_mem_slab_free>
	} while (ev != NULL);
   43d52:	e7f7      	b.n	43d44 <usbd_evt_flush+0x4>
}
   43d54:	bd10      	pop	{r4, pc}
   43d56:	bf00      	nop
   43d58:	20001100 	.word	0x20001100

00043d5c <usbd_evt_alloc>:
{
   43d5c:	b507      	push	{r0, r1, r2, lr}
	if (k_mem_slab_alloc(&fifo_elem_slab,
   43d5e:	2300      	movs	r3, #0
   43d60:	480e      	ldr	r0, [pc, #56]	; (43d9c <usbd_evt_alloc+0x40>)
   43d62:	2200      	movs	r2, #0
   43d64:	a901      	add	r1, sp, #4
   43d66:	f003 ff47 	bl	47bf8 <k_mem_slab_alloc>
   43d6a:	b190      	cbz	r0, 43d92 <usbd_evt_alloc+0x36>
		usbd_evt_flush();
   43d6c:	f7ff ffe8 	bl	43d40 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   43d70:	480a      	ldr	r0, [pc, #40]	; (43d9c <usbd_evt_alloc+0x40>)
   43d72:	2200      	movs	r2, #0
   43d74:	2300      	movs	r3, #0
   43d76:	a901      	add	r1, sp, #4
   43d78:	f003 ff3e 	bl	47bf8 <k_mem_slab_alloc>
   43d7c:	b938      	cbnz	r0, 43d8e <usbd_evt_alloc+0x32>
		ev = (struct usbd_event *)block.data;
   43d7e:	9801      	ldr	r0, [sp, #4]
		ev->evt_type = USBD_EVT_REINIT;
   43d80:	2304      	movs	r3, #4
		ev->block = block;
   43d82:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
   43d84:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
   43d86:	f7ff ffa1 	bl	43ccc <usbd_evt_put>
		usbd_work_schedule();
   43d8a:	f7ff ffa5 	bl	43cd8 <usbd_work_schedule>
		return NULL;
   43d8e:	2000      	movs	r0, #0
   43d90:	e001      	b.n	43d96 <usbd_evt_alloc+0x3a>
	ev = (struct usbd_event *)block.data;
   43d92:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
   43d94:	6040      	str	r0, [r0, #4]
}
   43d96:	b003      	add	sp, #12
   43d98:	f85d fb04 	ldr.w	pc, [sp], #4
   43d9c:	20001100 	.word	0x20001100

00043da0 <usbd_event_transfer_data>:
{
   43da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		endpoint_ctx(p_event->data.eptransfer.ep);
   43da2:	7887      	ldrb	r7, [r0, #2]
{
   43da4:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   43da6:	4638      	mov	r0, r7
   43da8:	f7ff ff60 	bl	43c6c <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   43dac:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
   43dae:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
   43db0:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   43db2:	d512      	bpl.n	43dda <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
   43db4:	2d00      	cmp	r5, #0
   43db6:	d143      	bne.n	43e40 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   43db8:	f7ff ffd0 	bl	43d5c <usbd_evt_alloc>
			if (!ev) {
   43dbc:	4603      	mov	r3, r0
   43dbe:	2800      	cmp	r0, #0
   43dc0:	d03e      	beq.n	43e40 <usbd_event_transfer_data+0xa0>
			ev->evt_type = USBD_EVT_EP;
   43dc2:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   43dc4:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   43dc6:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   43dc8:	2203      	movs	r2, #3
   43dca:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   43dcc:	609c      	str	r4, [r3, #8]
			usbd_evt_put(ev);
   43dce:	f7ff ff7d 	bl	43ccc <usbd_evt_put>
}
   43dd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			usbd_work_schedule();
   43dd6:	f7ff bf7f 	b.w	43cd8 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   43dda:	b14d      	cbz	r5, 43df0 <usbd_event_transfer_data+0x50>
   43ddc:	2d01      	cmp	r5, #1
   43dde:	d12f      	bne.n	43e40 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   43de0:	f7ff ffbc 	bl	43d5c <usbd_evt_alloc>
			if (!ev) {
   43de4:	4603      	mov	r3, r0
   43de6:	b358      	cbz	r0, 43e40 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
   43de8:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   43dea:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   43dec:	7305      	strb	r5, [r0, #12]
   43dee:	e7ed      	b.n	43dcc <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
   43df0:	f7ff ffb4 	bl	43d5c <usbd_evt_alloc>
			if (!ev) {
   43df4:	b320      	cbz	r0, 43e40 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
   43df6:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   43df8:	4b12      	ldr	r3, [pc, #72]	; (43e44 <usbd_event_transfer_data+0xa4>)
   43dfa:	f012 0f80 	tst.w	r2, #128	; 0x80
   43dfe:	f002 0108 	and.w	r1, r2, #8
   43e02:	d011      	beq.n	43e28 <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   43e04:	b141      	cbz	r1, 43e18 <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
   43e06:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   43e0a:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
   43e0c:	2301      	movs	r3, #1
   43e0e:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   43e10:	2302      	movs	r3, #2
   43e12:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   43e14:	6084      	str	r4, [r0, #8]
   43e16:	e7da      	b.n	43dce <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
   43e18:	f002 020f 	and.w	r2, r2, #15
   43e1c:	2114      	movs	r1, #20
   43e1e:	fb01 3302 	mla	r3, r1, r2, r3
   43e22:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   43e26:	e7f0      	b.n	43e0a <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   43e28:	b111      	cbz	r1, 43e30 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   43e2a:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
   43e2e:	e7ec      	b.n	43e0a <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
   43e30:	f002 020f 	and.w	r2, r2, #15
   43e34:	2114      	movs	r1, #20
   43e36:	fb01 3302 	mla	r3, r1, r2, r3
   43e3a:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   43e3e:	e7e4      	b.n	43e0a <usbd_event_transfer_data+0x6a>
}
   43e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   43e42:	bf00      	nop
   43e44:	40027000 	.word	0x40027000

00043e48 <usb_dc_power_event_handler>:
	switch (event) {
   43e48:	2802      	cmp	r0, #2
{
   43e4a:	b510      	push	{r4, lr}
   43e4c:	d811      	bhi.n	43e72 <usb_dc_power_event_handler+0x2a>
   43e4e:	4b09      	ldr	r3, [pc, #36]	; (43e74 <usb_dc_power_event_handler+0x2c>)
   43e50:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
   43e52:	f7ff ff83 	bl	43d5c <usbd_evt_alloc>
	if (!ev) {
   43e56:	b160      	cbz	r0, 43e72 <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
   43e58:	2200      	movs	r2, #0
   43e5a:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
   43e5c:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
   43e5e:	f7ff ff35 	bl	43ccc <usbd_evt_put>
	if (usbd_ctx.attached) {
   43e62:	4b05      	ldr	r3, [pc, #20]	; (43e78 <usb_dc_power_event_handler+0x30>)
   43e64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   43e68:	b11b      	cbz	r3, 43e72 <usb_dc_power_event_handler+0x2a>
}
   43e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
   43e6e:	f7ff bf33 	b.w	43cd8 <usbd_work_schedule>
}
   43e72:	bd10      	pop	{r4, pc}
   43e74:	0005447d 	.word	0x0005447d
   43e78:	20006480 	.word	0x20006480

00043e7c <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
   43e7c:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   43e7e:	490e      	ldr	r1, [pc, #56]	; (43eb8 <hfxo_stop.constprop.0.isra.0+0x3c>)
   43e80:	f3bf 8f5b 	dmb	ish
   43e84:	2300      	movs	r3, #0
   43e86:	e851 2f00 	ldrex	r2, [r1]
   43e8a:	2a01      	cmp	r2, #1
   43e8c:	d103      	bne.n	43e96 <hfxo_stop.constprop.0.isra.0+0x1a>
   43e8e:	e841 3000 	strex	r0, r3, [r1]
   43e92:	2800      	cmp	r0, #0
   43e94:	d1f7      	bne.n	43e86 <hfxo_stop.constprop.0.isra.0+0xa>
   43e96:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   43e9a:	d10c      	bne.n	43eb6 <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   43e9c:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   43ea0:	3914      	subs	r1, #20
   43ea2:	4620      	mov	r0, r4
   43ea4:	f005 ff45 	bl	49d32 <onoff_cancel>

	if (rv == -EALREADY) {
   43ea8:	3078      	adds	r0, #120	; 0x78
   43eaa:	d104      	bne.n	43eb6 <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
   43eac:	4620      	mov	r0, r4
}
   43eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   43eb2:	f005 bf19 	b.w	49ce8 <onoff_release>
   43eb6:	bd10      	pop	{r4, pc}
   43eb8:	200064a0 	.word	0x200064a0

00043ebc <usbd_event_handler>:
{
   43ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
   43ebe:	4606      	mov	r6, r0
   43ec0:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
   43ec2:	2214      	movs	r2, #20
   43ec4:	2100      	movs	r1, #0
   43ec6:	a803      	add	r0, sp, #12
   43ec8:	f007 ff58 	bl	4bd7c <memset>
	switch (p_event->type) {
   43ecc:	7833      	ldrb	r3, [r6, #0]
   43ece:	3b01      	subs	r3, #1
   43ed0:	2b05      	cmp	r3, #5
   43ed2:	d821      	bhi.n	43f18 <usbd_event_handler+0x5c>
   43ed4:	e8df f003 	tbb	[pc, r3]
   43ed8:	1414037a 	.word	0x1414037a
   43edc:	166a      	.short	0x166a
   43ede:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   43ee0:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
   43ee4:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
   43ee6:	f7ff ff39 	bl	43d5c <usbd_evt_alloc>
		if (!ev) {
   43eea:	4603      	mov	r3, r0
   43eec:	b1a0      	cbz	r0, 43f18 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
   43eee:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
   43ef0:	f100 0208 	add.w	r2, r0, #8
   43ef4:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
   43ef8:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
   43efc:	4618      	mov	r0, r3
   43efe:	e01d      	b.n	43f3c <usbd_event_handler+0x80>
	switch (p_event->type) {
   43f00:	2304      	movs	r3, #4
   43f02:	e7ed      	b.n	43ee0 <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   43f04:	78b7      	ldrb	r7, [r6, #2]
   43f06:	4638      	mov	r0, r7
   43f08:	f7ff feb0 	bl	43c6c <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   43f0c:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   43f0e:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
   43f10:	b123      	cbz	r3, 43f1c <usbd_event_handler+0x60>
   43f12:	3b01      	subs	r3, #1
   43f14:	2b02      	cmp	r3, #2
   43f16:	d943      	bls.n	43fa0 <usbd_event_handler+0xe4>
}
   43f18:	b009      	add	sp, #36	; 0x24
   43f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   43f1c:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
   43f1e:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   43f20:	d513      	bpl.n	43f4a <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
   43f22:	2d00      	cmp	r5, #0
   43f24:	d1f8      	bne.n	43f18 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   43f26:	f7ff ff19 	bl	43d5c <usbd_evt_alloc>
			if (!ev) {
   43f2a:	4603      	mov	r3, r0
   43f2c:	2800      	cmp	r0, #0
   43f2e:	d0f3      	beq.n	43f18 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   43f30:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   43f32:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   43f34:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   43f36:	2203      	movs	r2, #3
   43f38:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   43f3a:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
   43f3c:	f7ff fec6 	bl	43ccc <usbd_evt_put>
}
   43f40:	b009      	add	sp, #36	; 0x24
   43f42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
   43f46:	f7ff bec7 	b.w	43cd8 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   43f4a:	b155      	cbz	r5, 43f62 <usbd_event_handler+0xa6>
   43f4c:	2d01      	cmp	r5, #1
   43f4e:	d1e3      	bne.n	43f18 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   43f50:	f7ff ff04 	bl	43d5c <usbd_evt_alloc>
			if (!ev) {
   43f54:	4603      	mov	r3, r0
   43f56:	2800      	cmp	r0, #0
   43f58:	d0de      	beq.n	43f18 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
   43f5a:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   43f5c:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   43f5e:	7305      	strb	r5, [r0, #12]
   43f60:	e7eb      	b.n	43f3a <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
   43f62:	f7ff fefb 	bl	43d5c <usbd_evt_alloc>
			if (!ev) {
   43f66:	4607      	mov	r7, r0
   43f68:	2800      	cmp	r0, #0
   43f6a:	d0d5      	beq.n	43f18 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   43f6c:	2301      	movs	r3, #1
   43f6e:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   43f70:	2302      	movs	r3, #2
   43f72:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   43f74:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   43f76:	f104 010c 	add.w	r1, r4, #12
   43f7a:	78b0      	ldrb	r0, [r6, #2]
   43f7c:	f00c fa81 	bl	50482 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   43f80:	4a13      	ldr	r2, [pc, #76]	; (43fd0 <usbd_event_handler+0x114>)
   43f82:	68e1      	ldr	r1, [r4, #12]
   43f84:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
   43f88:	428b      	cmp	r3, r1
   43f8a:	d906      	bls.n	43f9a <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   43f8c:	1a5b      	subs	r3, r3, r1
   43f8e:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   43f92:	f003 f9b7 	bl	47304 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
   43f96:	4638      	mov	r0, r7
   43f98:	e7d0      	b.n	43f3c <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
   43f9a:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
   43f9e:	e7fa      	b.n	43f96 <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
   43fa0:	4630      	mov	r0, r6
}
   43fa2:	b009      	add	sp, #36	; 0x24
   43fa4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
   43fa8:	f7ff befa 	b.w	43da0 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
   43fac:	a801      	add	r0, sp, #4
   43fae:	f003 f983 	bl	472b8 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   43fb2:	f89d 3005 	ldrb.w	r3, [sp, #5]
   43fb6:	2b05      	cmp	r3, #5
   43fb8:	d104      	bne.n	43fc4 <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   43fba:	f89d 3004 	ldrb.w	r3, [sp, #4]
   43fbe:	f013 0f60 	tst.w	r3, #96	; 0x60
   43fc2:	d0a9      	beq.n	43f18 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
   43fc4:	4b03      	ldr	r3, [pc, #12]	; (43fd4 <usbd_event_handler+0x118>)
   43fc6:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
   43fc8:	2401      	movs	r4, #1
   43fca:	e78c      	b.n	43ee6 <usbd_event_handler+0x2a>
	switch (p_event->type) {
   43fcc:	2402      	movs	r4, #2
   43fce:	e78a      	b.n	43ee6 <usbd_event_handler+0x2a>
   43fd0:	20006480 	.word	0x20006480
   43fd4:	200065ec 	.word	0x200065ec

00043fd8 <eps_ctx_init>:
{
   43fd8:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   43fda:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   43fdc:	f064 007f 	orn	r0, r4, #127	; 0x7f
   43fe0:	b2c0      	uxtb	r0, r0
   43fe2:	f7ff fe43 	bl	43c6c <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   43fe6:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   43fe8:	f00b ff11 	bl	4fe0e <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   43fec:	2c08      	cmp	r4, #8
   43fee:	d1f5      	bne.n	43fdc <eps_ctx_init+0x4>
   43ff0:	4d0e      	ldr	r5, [pc, #56]	; (4402c <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   43ff2:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   43ff4:	b2e0      	uxtb	r0, r4
   43ff6:	f7ff fe39 	bl	43c6c <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   43ffa:	6903      	ldr	r3, [r0, #16]
   43ffc:	b903      	cbnz	r3, 44000 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   43ffe:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   44000:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   44002:	f00b ff04 	bl	4fe0e <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   44006:	2c08      	cmp	r4, #8
   44008:	f105 0540 	add.w	r5, r5, #64	; 0x40
   4400c:	d1f2      	bne.n	43ff4 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
   4400e:	4808      	ldr	r0, [pc, #32]	; (44030 <eps_ctx_init+0x58>)
   44010:	f00b fefd 	bl	4fe0e <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
   44014:	4b07      	ldr	r3, [pc, #28]	; (44034 <eps_ctx_init+0x5c>)
   44016:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
   4401a:	b912      	cbnz	r2, 44022 <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   4401c:	4a06      	ldr	r2, [pc, #24]	; (44038 <eps_ctx_init+0x60>)
   4401e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
   44022:	4806      	ldr	r0, [pc, #24]	; (4403c <eps_ctx_init+0x64>)
   44024:	f00b fef3 	bl	4fe0e <ep_ctx_reset>
}
   44028:	2000      	movs	r0, #0
   4402a:	bd38      	pop	{r3, r4, r5, pc}
   4402c:	20006b10 	.word	0x20006b10
   44030:	200065cc 	.word	0x200065cc
   44034:	20006480 	.word	0x20006480
   44038:	20006710 	.word	0x20006710
   4403c:	200066ec 	.word	0x200066ec

00044040 <usbd_work_handler>:
{
   44040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
   44044:	4ca7      	ldr	r4, [pc, #668]	; (442e4 <usbd_work_handler+0x2a4>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   44046:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 442e8 <usbd_work_handler+0x2a8>
{
   4404a:	b085      	sub	sp, #20
   4404c:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
   4404e:	f7ff fe6f 	bl	43d30 <usbd_evt_get>
   44052:	b910      	cbnz	r0, 4405a <usbd_work_handler+0x1a>
}
   44054:	b005      	add	sp, #20
   44056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
   4405a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   4405e:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   44060:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   44064:	b93b      	cbnz	r3, 44076 <usbd_work_handler+0x36>
   44066:	2a00      	cmp	r2, #0
   44068:	f000 8088 	beq.w	4417c <usbd_work_handler+0x13c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   4406c:	489e      	ldr	r0, [pc, #632]	; (442e8 <usbd_work_handler+0x2a8>)
   4406e:	4649      	mov	r1, r9
   44070:	f00c fc8a 	bl	50988 <k_mem_slab_free>
}
   44074:	e7eb      	b.n	4404e <usbd_work_handler+0xe>
		switch (ev->evt_type) {
   44076:	2a04      	cmp	r2, #4
   44078:	d844      	bhi.n	44104 <usbd_work_handler+0xc4>
   4407a:	e8df f012 	tbh	[pc, r2, lsl #1]
   4407e:	007f      	.short	0x007f
   44080:	01020005 	.word	0x01020005
   44084:	01410118 	.word	0x01410118
	switch (ep_evt->evt_type) {
   44088:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   4408a:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
   4408c:	2b03      	cmp	r3, #3
   4408e:	d839      	bhi.n	44104 <usbd_work_handler+0xc4>
   44090:	e8df f003 	tbb	[pc, r3]
   44094:	615c3f02 	.word	0x615c3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   44098:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   4409a:	2208      	movs	r2, #8
   4409c:	2100      	movs	r1, #0
   4409e:	4630      	mov	r0, r6
   440a0:	f007 fe6c 	bl	4bd7c <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   440a4:	4b91      	ldr	r3, [pc, #580]	; (442ec <usbd_work_handler+0x2ac>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   440a6:	4892      	ldr	r0, [pc, #584]	; (442f0 <usbd_work_handler+0x2b0>)
   440a8:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   440ac:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
   440ae:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   440b2:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
   440b4:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   440b8:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   440bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   440c0:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
   440c2:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   440c6:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   440ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   440ce:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
   440d0:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   440d4:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   440d8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   440dc:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   440de:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   440e0:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   440e2:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   440e4:	f007 fe3f 	bl	4bd66 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   440e8:	682b      	ldr	r3, [r5, #0]
   440ea:	7a68      	ldrb	r0, [r5, #9]
   440ec:	2100      	movs	r1, #0
   440ee:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   440f0:	f996 3000 	ldrsb.w	r3, [r6]
   440f4:	2b00      	cmp	r3, #0
   440f6:	db08      	blt.n	4410a <usbd_work_handler+0xca>
   440f8:	88f3      	ldrh	r3, [r6, #6]
   440fa:	b133      	cbz	r3, 4410a <usbd_work_handler+0xca>
		ctx->ctrl_read_len = usbd_setup->wLength;
   440fc:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   44100:	f003 f900 	bl	47304 <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   44104:	4649      	mov	r1, r9
   44106:	4640      	mov	r0, r8
   44108:	e7b2      	b.n	44070 <usbd_work_handler+0x30>
		ctx->ctrl_read_len = 0U;
   4410a:	2300      	movs	r3, #0
   4410c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
   44110:	e7f8      	b.n	44104 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_pending) {
   44112:	7f6b      	ldrb	r3, [r5, #29]
   44114:	2b00      	cmp	r3, #0
   44116:	d0f5      	beq.n	44104 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_complete) {
   44118:	7f2b      	ldrb	r3, [r5, #28]
   4411a:	2b00      	cmp	r3, #0
   4411c:	d0f2      	beq.n	44104 <usbd_work_handler+0xc4>
	ep_ctx->read_pending = false;
   4411e:	2600      	movs	r6, #0
   44120:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   44122:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44126:	4873      	ldr	r0, [pc, #460]	; (442f4 <usbd_work_handler+0x2b4>)
	ep_ctx->read_complete = false;
   44128:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   4412a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4412e:	f00b fe81 	bl	4fe34 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   44132:	696b      	ldr	r3, [r5, #20]
   44134:	9301      	str	r3, [sp, #4]
   44136:	686b      	ldr	r3, [r5, #4]
   44138:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   4413c:	a901      	add	r1, sp, #4
   4413e:	7a68      	ldrb	r0, [r5, #9]
   44140:	f002 fee6 	bl	46f10 <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
   44144:	486b      	ldr	r0, [pc, #428]	; (442f4 <usbd_work_handler+0x2b4>)
   44146:	f00b fe77 	bl	4fe38 <k_mutex_unlock.isra.0>
   4414a:	e7db      	b.n	44104 <usbd_work_handler+0xc4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   4414c:	682b      	ldr	r3, [r5, #0]
   4414e:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   44150:	7a68      	ldrb	r0, [r5, #9]
   44152:	4798      	blx	r3
		break;
   44154:	e7d6      	b.n	44104 <usbd_work_handler+0xc4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   44156:	7aab      	ldrb	r3, [r5, #10]
   44158:	b96b      	cbnz	r3, 44176 <usbd_work_handler+0x136>
   4415a:	7feb      	ldrb	r3, [r5, #31]
   4415c:	b95b      	cbnz	r3, 44176 <usbd_work_handler+0x136>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   4415e:	4865      	ldr	r0, [pc, #404]	; (442f4 <usbd_work_handler+0x2b4>)
   44160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44168:	f00b fe64 	bl	4fe34 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
   4416c:	f003 f8fa 	bl	47364 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   44170:	4860      	ldr	r0, [pc, #384]	; (442f4 <usbd_work_handler+0x2b4>)
   44172:	f00b fe61 	bl	4fe38 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   44176:	682b      	ldr	r3, [r5, #0]
   44178:	2102      	movs	r1, #2
   4417a:	e7e9      	b.n	44150 <usbd_work_handler+0x110>
	switch (pwr_evt->state) {
   4417c:	7a02      	ldrb	r2, [r0, #8]
   4417e:	2a04      	cmp	r2, #4
   44180:	d8c0      	bhi.n	44104 <usbd_work_handler+0xc4>
   44182:	e8df f002 	tbb	[pc, r2]
   44186:	0359      	.short	0x0359
   44188:	6723      	.short	0x6723
   4418a:	73          	.byte	0x73
   4418b:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   4418c:	f002 fe3a 	bl	46e04 <nrfx_usbd_is_enabled>
   44190:	4605      	mov	r5, r0
   44192:	2800      	cmp	r0, #0
   44194:	d1b6      	bne.n	44104 <usbd_work_handler+0xc4>
			nrfx_usbd_enable();
   44196:	f002 fd71 	bl	46c7c <nrfx_usbd_enable>
   4419a:	f3bf 8f5b 	dmb	ish
   4419e:	4956      	ldr	r1, [pc, #344]	; (442f8 <usbd_work_handler+0x2b8>)
   441a0:	2301      	movs	r3, #1
   441a2:	e851 2f00 	ldrex	r2, [r1]
   441a6:	2a00      	cmp	r2, #0
   441a8:	d103      	bne.n	441b2 <usbd_work_handler+0x172>
   441aa:	e841 3000 	strex	r0, r3, [r1]
   441ae:	2800      	cmp	r0, #0
   441b0:	d1f7      	bne.n	441a2 <usbd_work_handler+0x162>
   441b2:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   441b6:	d1a5      	bne.n	44104 <usbd_work_handler+0xc4>
   441b8:	f841 5c10 	str.w	r5, [r1, #-16]
   441bc:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   441c0:	69e0      	ldr	r0, [r4, #28]
   441c2:	6163      	str	r3, [r4, #20]
   441c4:	3914      	subs	r1, #20
   441c6:	f005 fd37 	bl	49c38 <onoff_request>
   441ca:	e79b      	b.n	44104 <usbd_work_handler+0xc4>
	switch (pwr_evt->state) {
   441cc:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   441ce:	f065 007f 	orn	r0, r5, #127	; 0x7f
   441d2:	b2c0      	uxtb	r0, r0
   441d4:	f7ff fd4a 	bl	43c6c <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   441d8:	7a03      	ldrb	r3, [r0, #8]
   441da:	b113      	cbz	r3, 441e2 <usbd_work_handler+0x1a2>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   441dc:	7a40      	ldrb	r0, [r0, #9]
   441de:	f003 faa5 	bl	4772c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   441e2:	3501      	adds	r5, #1
   441e4:	2d08      	cmp	r5, #8
   441e6:	d1f2      	bne.n	441ce <usbd_work_handler+0x18e>
		if (ep_ctx->cfg.en) {
   441e8:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   441ec:	b11b      	cbz	r3, 441f6 <usbd_work_handler+0x1b6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   441ee:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
   441f2:	f003 fa9b 	bl	4772c <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
   441f6:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   441f8:	b2e8      	uxtb	r0, r5
   441fa:	f7ff fd37 	bl	43c6c <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   441fe:	7a03      	ldrb	r3, [r0, #8]
   44200:	b113      	cbz	r3, 44208 <usbd_work_handler+0x1c8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   44202:	7a40      	ldrb	r0, [r0, #9]
   44204:	f003 fa92 	bl	4772c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   44208:	3501      	adds	r5, #1
   4420a:	2d08      	cmp	r5, #8
   4420c:	d1f4      	bne.n	441f8 <usbd_work_handler+0x1b8>
		if (ep_ctx->cfg.en) {
   4420e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   44212:	b11b      	cbz	r3, 4421c <usbd_work_handler+0x1dc>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   44214:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
   44218:	f003 fa88 	bl	4772c <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
   4421c:	2001      	movs	r0, #1
   4421e:	f002 fdd3 	bl	46dc8 <nrfx_usbd_start>
		ctx->ready = true;
   44222:	2301      	movs	r3, #1
   44224:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   44228:	6823      	ldr	r3, [r4, #0]
   4422a:	2b00      	cmp	r3, #0
   4422c:	f43f af6a 	beq.w	44104 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   44230:	2100      	movs	r1, #0
   44232:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
   44234:	4798      	blx	r3
   44236:	e765      	b.n	44104 <usbd_work_handler+0xc4>
		ctx->ready = false;
   44238:	2500      	movs	r5, #0
   4423a:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   4423e:	f003 fa03 	bl	47648 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   44242:	f7ff fe1b 	bl	43e7c <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
   44246:	6823      	ldr	r3, [r4, #0]
   44248:	2b00      	cmp	r3, #0
   4424a:	f43f af5b 	beq.w	44104 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   4424e:	4629      	mov	r1, r5
   44250:	2004      	movs	r0, #4
   44252:	e7ef      	b.n	44234 <usbd_work_handler+0x1f4>
		if (dev_ready()) {
   44254:	2b00      	cmp	r3, #0
   44256:	f43f af55 	beq.w	44104 <usbd_work_handler+0xc4>
			nrfx_usbd_suspend();
   4425a:	f003 fa0d 	bl	47678 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   4425e:	6823      	ldr	r3, [r4, #0]
   44260:	2b00      	cmp	r3, #0
   44262:	f43f af4f 	beq.w	44104 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   44266:	2100      	movs	r1, #0
   44268:	2005      	movs	r0, #5
   4426a:	e7e3      	b.n	44234 <usbd_work_handler+0x1f4>
		if (ctx->status_cb && dev_ready()) {
   4426c:	6822      	ldr	r2, [r4, #0]
   4426e:	2a00      	cmp	r2, #0
   44270:	f43f af48 	beq.w	44104 <usbd_work_handler+0xc4>
   44274:	2b00      	cmp	r3, #0
   44276:	f43f af45 	beq.w	44104 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_RESUME, NULL);
   4427a:	2100      	movs	r1, #0
   4427c:	2006      	movs	r0, #6
   4427e:	4790      	blx	r2
   44280:	e740      	b.n	44104 <usbd_work_handler+0xc4>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   44282:	f107 0510 	add.w	r5, r7, #16
   44286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4428a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4428e:	4628      	mov	r0, r5
   44290:	f00b fdd0 	bl	4fe34 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
   44294:	f7ff fea0 	bl	43fd8 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   44298:	4628      	mov	r0, r5
   4429a:	f00b fdcd 	bl	4fe38 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
   4429e:	f857 3c28 	ldr.w	r3, [r7, #-40]
   442a2:	2b00      	cmp	r3, #0
   442a4:	f43f af2e 	beq.w	44104 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_RESET, NULL);
   442a8:	2100      	movs	r1, #0
   442aa:	2001      	movs	r0, #1
   442ac:	e7c2      	b.n	44234 <usbd_work_handler+0x1f4>
	if (ep_ctx->cfg.en) {
   442ae:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   442b2:	b17b      	cbz	r3, 442d4 <usbd_work_handler+0x294>
		ep_ctx->read_pending = true;
   442b4:	2501      	movs	r5, #1
   442b6:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
   442ba:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
   442be:	f7ff fd4d 	bl	43d5c <usbd_evt_alloc>
		if (!ev) {
   442c2:	b138      	cbz	r0, 442d4 <usbd_work_handler+0x294>
		ev->evt.ep_evt.ep = ep_ctx;
   442c4:	4a0d      	ldr	r2, [pc, #52]	; (442fc <usbd_work_handler+0x2bc>)
		ev->evt_type = USBD_EVT_EP;
   442c6:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   442c8:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   442ca:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
   442cc:	f7ff fcfe 	bl	43ccc <usbd_evt_put>
		usbd_work_schedule();
   442d0:	f7ff fd02 	bl	43cd8 <usbd_work_schedule>
			if (ctx->status_cb) {
   442d4:	f857 3c28 	ldr.w	r3, [r7, #-40]
   442d8:	2b00      	cmp	r3, #0
   442da:	f43f af13 	beq.w	44104 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SOF, NULL);
   442de:	2100      	movs	r1, #0
   442e0:	200a      	movs	r0, #10
   442e2:	e7a7      	b.n	44234 <usbd_work_handler+0x1f4>
   442e4:	20006480 	.word	0x20006480
   442e8:	20001100 	.word	0x20001100
   442ec:	40027000 	.word	0x40027000
   442f0:	20006484 	.word	0x20006484
   442f4:	200064b8 	.word	0x200064b8
   442f8:	200064a0 	.word	0x200064a0
   442fc:	200066ec 	.word	0x200066ec
	nrfx_power_usbevt_disable();
   44300:	f00c f837 	bl	50372 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   44304:	f003 f9a0 	bl	47648 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   44308:	f002 fcae 	bl	46c68 <nrfx_usbd_uninit>
	usbd_evt_flush();
   4430c:	f7ff fd18 	bl	43d40 <usbd_evt_flush>
	ret = eps_ctx_init();
   44310:	f7ff fe62 	bl	43fd8 <eps_ctx_init>
	nrfx_power_usbevt_enable();
   44314:	f00c f826 	bl	50364 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   44318:	4801      	ldr	r0, [pc, #4]	; (44320 <usbd_work_handler+0x2e0>)
   4431a:	f002 fdb7 	bl	46e8c <nrfx_usbd_init>
}
   4431e:	e6f1      	b.n	44104 <usbd_work_handler+0xc4>
   44320:	00043ebd 	.word	0x00043ebd

00044324 <usb_dc_attach>:
{
   44324:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
   44326:	4d1a      	ldr	r5, [pc, #104]	; (44390 <usb_dc_attach+0x6c>)
   44328:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   4432c:	bb5c      	cbnz	r4, 44386 <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
   4432e:	f105 0038 	add.w	r0, r5, #56	; 0x38
   44332:	f00c fb6c 	bl	50a0e <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   44336:	4620      	mov	r0, r4
   44338:	f000 fd1c 	bl	44d74 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   4433c:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
   4433e:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   44340:	2101      	movs	r1, #1
   44342:	2027      	movs	r0, #39	; 0x27
   44344:	f7e8 fcc6 	bl	2ccd4 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
   44348:	4812      	ldr	r0, [pc, #72]	; (44394 <usb_dc_attach+0x70>)
   4434a:	f002 fd9f 	bl	46e8c <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   4434e:	4b12      	ldr	r3, [pc, #72]	; (44398 <usb_dc_attach+0x74>)
   44350:	4298      	cmp	r0, r3
   44352:	d11a      	bne.n	4438a <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
   44354:	f00c f806 	bl	50364 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   44358:	f7ff fe3e 	bl	43fd8 <eps_ctx_init>
	if (ret == 0) {
   4435c:	4604      	mov	r4, r0
   4435e:	b910      	cbnz	r0, 44366 <usb_dc_attach+0x42>
		ctx->attached = true;
   44360:	2301      	movs	r3, #1
   44362:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   44366:	4b0d      	ldr	r3, [pc, #52]	; (4439c <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   44368:	681b      	ldr	r3, [r3, #0]
   4436a:	b10b      	cbz	r3, 44370 <usb_dc_attach+0x4c>
		usbd_work_schedule();
   4436c:	f7ff fcb4 	bl	43cd8 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   44370:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   44374:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   44378:	07db      	lsls	r3, r3, #31
   4437a:	d502      	bpl.n	44382 <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   4437c:	2000      	movs	r0, #0
   4437e:	f7ff fd63 	bl	43e48 <usb_dc_power_event_handler>
}
   44382:	4620      	mov	r0, r4
   44384:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   44386:	2400      	movs	r4, #0
   44388:	e7fb      	b.n	44382 <usb_dc_attach+0x5e>
		return -EIO;
   4438a:	f06f 0404 	mvn.w	r4, #4
   4438e:	e7f8      	b.n	44382 <usb_dc_attach+0x5e>
   44390:	20006480 	.word	0x20006480
   44394:	00043ebd 	.word	0x00043ebd
   44398:	0bad0000 	.word	0x0bad0000
   4439c:	2000133c 	.word	0x2000133c

000443a0 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   443a0:	4b07      	ldr	r3, [pc, #28]	; (443c0 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
   443a2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   443a6:	b13a      	cbz	r2, 443b8 <usb_dc_set_address+0x18>
   443a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
   443ac:	2b00      	cmp	r3, #0
   443ae:	bf14      	ite	ne
   443b0:	2000      	movne	r0, #0
   443b2:	f06f 0012 	mvneq.w	r0, #18
   443b6:	4770      	bx	lr
   443b8:	f06f 0012 	mvn.w	r0, #18
}
   443bc:	4770      	bx	lr
   443be:	bf00      	nop
   443c0:	20006480 	.word	0x20006480

000443c4 <usb_dc_ep_configure>:
{
   443c4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   443c6:	4b0f      	ldr	r3, [pc, #60]	; (44404 <usb_dc_ep_configure+0x40>)
	if (!dev_attached()) {
   443c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   443cc:	4604      	mov	r4, r0
	if (!dev_attached()) {
   443ce:	b1b3      	cbz	r3, 443fe <usb_dc_ep_configure+0x3a>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   443d0:	7805      	ldrb	r5, [r0, #0]
   443d2:	4628      	mov	r0, r5
   443d4:	f7ff fc4a 	bl	43c6c <endpoint_ctx>
	if (!ep_ctx) {
   443d8:	b910      	cbnz	r0, 443e0 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
   443da:	f06f 0015 	mvn.w	r0, #21
}
   443de:	bd38      	pop	{r3, r4, r5, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   443e0:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   443e2:	7923      	ldrb	r3, [r4, #4]
   443e4:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   443e6:	8861      	ldrh	r1, [r4, #2]
   443e8:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   443ea:	072b      	lsls	r3, r5, #28
   443ec:	d402      	bmi.n	443f4 <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   443ee:	1e4b      	subs	r3, r1, #1
   443f0:	420b      	tst	r3, r1
   443f2:	d1f2      	bne.n	443da <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   443f4:	4628      	mov	r0, r5
   443f6:	f00c f83f 	bl	50478 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   443fa:	2000      	movs	r0, #0
   443fc:	e7ef      	b.n	443de <usb_dc_ep_configure+0x1a>
		return -ENODEV;
   443fe:	f06f 0012 	mvn.w	r0, #18
   44402:	e7ec      	b.n	443de <usb_dc_ep_configure+0x1a>
   44404:	20006480 	.word	0x20006480

00044408 <usb_dc_ep_set_stall>:
{
   44408:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   4440a:	4b12      	ldr	r3, [pc, #72]	; (44454 <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
   4440c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   44410:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   44412:	b1ca      	cbz	r2, 44448 <usb_dc_ep_set_stall+0x40>
   44414:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   44418:	b1b3      	cbz	r3, 44448 <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
   4441a:	f7ff fc27 	bl	43c6c <endpoint_ctx>
	if (!ep_ctx) {
   4441e:	4604      	mov	r4, r0
   44420:	b1a8      	cbz	r0, 4444e <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
   44422:	7a83      	ldrb	r3, [r0, #10]
   44424:	2b01      	cmp	r3, #1
   44426:	d012      	beq.n	4444e <usb_dc_ep_set_stall+0x46>
   44428:	d907      	bls.n	4443a <usb_dc_ep_set_stall+0x32>
   4442a:	3b02      	subs	r3, #2
   4442c:	2b01      	cmp	r3, #1
   4442e:	d907      	bls.n	44440 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
   44430:	6963      	ldr	r3, [r4, #20]
   44432:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
   44434:	2000      	movs	r0, #0
   44436:	60e0      	str	r0, [r4, #12]
}
   44438:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_setup_stall();
   4443a:	f002 ff9b 	bl	47374 <nrfx_usbd_setup_stall>
		break;
   4443e:	e7f7      	b.n	44430 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   44440:	4628      	mov	r0, r5
   44442:	f002 ff0b 	bl	4725c <nrfx_usbd_ep_stall>
		break;
   44446:	e7f3      	b.n	44430 <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
   44448:	f06f 0012 	mvn.w	r0, #18
   4444c:	e7f4      	b.n	44438 <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
   4444e:	f06f 0015 	mvn.w	r0, #21
   44452:	e7f1      	b.n	44438 <usb_dc_ep_set_stall+0x30>
   44454:	20006480 	.word	0x20006480

00044458 <usb_dc_ep_clear_stall>:
{
   44458:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   4445a:	4b0e      	ldr	r3, [pc, #56]	; (44494 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
   4445c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   44460:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   44462:	b182      	cbz	r2, 44486 <usb_dc_ep_clear_stall+0x2e>
   44464:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   44468:	b16b      	cbz	r3, 44486 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
   4446a:	f7ff fbff 	bl	43c6c <endpoint_ctx>
	if (!ep_ctx) {
   4446e:	b168      	cbz	r0, 4448c <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   44470:	f015 0408 	ands.w	r4, r5, #8
   44474:	d10a      	bne.n	4448c <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   44476:	4628      	mov	r0, r5
   44478:	f002 ff12 	bl	472a0 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   4447c:	4628      	mov	r0, r5
   4447e:	f003 f9a9 	bl	477d4 <nrfx_usbd_ep_stall_clear>
	return 0;
   44482:	4620      	mov	r0, r4
}
   44484:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   44486:	f06f 0012 	mvn.w	r0, #18
   4448a:	e7fb      	b.n	44484 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
   4448c:	f06f 0015 	mvn.w	r0, #21
   44490:	e7f8      	b.n	44484 <usb_dc_ep_clear_stall+0x2c>
   44492:	bf00      	nop
   44494:	20006480 	.word	0x20006480

00044498 <usb_dc_ep_is_stalled>:
{
   44498:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   4449a:	4b0c      	ldr	r3, [pc, #48]	; (444cc <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
   4449c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   444a0:	4605      	mov	r5, r0
   444a2:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
   444a4:	b162      	cbz	r2, 444c0 <usb_dc_ep_is_stalled+0x28>
   444a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   444aa:	b14b      	cbz	r3, 444c0 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
   444ac:	f7ff fbde 	bl	43c6c <endpoint_ctx>
	if (!ep_ctx) {
   444b0:	b148      	cbz	r0, 444c6 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
   444b2:	b144      	cbz	r4, 444c6 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   444b4:	4628      	mov	r0, r5
   444b6:	f002 fed9 	bl	4726c <nrfx_usbd_ep_stall_check>
   444ba:	7020      	strb	r0, [r4, #0]
	return 0;
   444bc:	2000      	movs	r0, #0
}
   444be:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   444c0:	f06f 0012 	mvn.w	r0, #18
   444c4:	e7fb      	b.n	444be <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
   444c6:	f06f 0015 	mvn.w	r0, #21
   444ca:	e7f8      	b.n	444be <usb_dc_ep_is_stalled+0x26>
   444cc:	20006480 	.word	0x20006480

000444d0 <usb_dc_ep_enable>:
{
   444d0:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   444d2:	4e13      	ldr	r6, [pc, #76]	; (44520 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
   444d4:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
   444d8:	4604      	mov	r4, r0
	if (!dev_attached()) {
   444da:	b1c3      	cbz	r3, 4450e <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
   444dc:	f7ff fbc6 	bl	43c6c <endpoint_ctx>
	if (!ep_ctx) {
   444e0:	4605      	mov	r5, r0
   444e2:	b1b8      	cbz	r0, 44514 <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   444e4:	0723      	lsls	r3, r4, #28
   444e6:	d405      	bmi.n	444f4 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   444e8:	4620      	mov	r0, r4
   444ea:	f002 fed9 	bl	472a0 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   444ee:	4620      	mov	r0, r4
   444f0:	f003 f970 	bl	477d4 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
   444f4:	7a2b      	ldrb	r3, [r5, #8]
   444f6:	b983      	cbnz	r3, 4451a <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
   444f8:	2301      	movs	r3, #1
   444fa:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
   444fc:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
   44500:	b90b      	cbnz	r3, 44506 <usb_dc_ep_enable+0x36>
	return 0;
   44502:	2000      	movs	r0, #0
}
   44504:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   44506:	4620      	mov	r0, r4
   44508:	f003 f910 	bl	4772c <nrfx_usbd_ep_enable>
   4450c:	e7f9      	b.n	44502 <usb_dc_ep_enable+0x32>
		return -ENODEV;
   4450e:	f06f 0012 	mvn.w	r0, #18
   44512:	e7f7      	b.n	44504 <usb_dc_ep_enable+0x34>
		return -EINVAL;
   44514:	f06f 0015 	mvn.w	r0, #21
   44518:	e7f4      	b.n	44504 <usb_dc_ep_enable+0x34>
		return -EALREADY;
   4451a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   4451e:	e7f1      	b.n	44504 <usb_dc_ep_enable+0x34>
   44520:	20006480 	.word	0x20006480

00044524 <usb_dc_ep_disable>:
{
   44524:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   44526:	4b11      	ldr	r3, [pc, #68]	; (4456c <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
   44528:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   4452c:	4604      	mov	r4, r0
	if (!dev_attached() || !dev_ready()) {
   4452e:	b19a      	cbz	r2, 44558 <usb_dc_ep_disable+0x34>
   44530:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   44534:	b183      	cbz	r3, 44558 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
   44536:	f7ff fb99 	bl	43c6c <endpoint_ctx>
	if (!ep_ctx) {
   4453a:	4605      	mov	r5, r0
   4453c:	b178      	cbz	r0, 4455e <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
   4453e:	7a03      	ldrb	r3, [r0, #8]
   44540:	b183      	cbz	r3, 44564 <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   44542:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
   44544:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   44546:	f003 f8c5 	bl	476d4 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
   4454a:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
   4454c:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   4454e:	f00b fc5e 	bl	4fe0e <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   44552:	722c      	strb	r4, [r5, #8]
	return 0;
   44554:	4620      	mov	r0, r4
}
   44556:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   44558:	f06f 0012 	mvn.w	r0, #18
   4455c:	e7fb      	b.n	44556 <usb_dc_ep_disable+0x32>
		return -EINVAL;
   4455e:	f06f 0015 	mvn.w	r0, #21
   44562:	e7f8      	b.n	44556 <usb_dc_ep_disable+0x32>
		return -EALREADY;
   44564:	f06f 0077 	mvn.w	r0, #119	; 0x77
   44568:	e7f5      	b.n	44556 <usb_dc_ep_disable+0x32>
   4456a:	bf00      	nop
   4456c:	20006480 	.word	0x20006480

00044570 <usb_dc_ep_write>:
{
   44570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
   44574:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 4465c <usb_dc_ep_write+0xec>
{
   44578:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
   4457a:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
   4457e:	b085      	sub	sp, #20
   44580:	4607      	mov	r7, r0
   44582:	4689      	mov	r9, r1
   44584:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
   44586:	2b00      	cmp	r3, #0
   44588:	d061      	beq.n	4464e <usb_dc_ep_write+0xde>
   4458a:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
   4458e:	2b00      	cmp	r3, #0
   44590:	d05d      	beq.n	4464e <usb_dc_ep_write+0xde>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   44592:	0603      	lsls	r3, r0, #24
   44594:	d55e      	bpl.n	44654 <usb_dc_ep_write+0xe4>
	ep_ctx = endpoint_ctx(ep);
   44596:	f7ff fb69 	bl	43c6c <endpoint_ctx>
	if (!ep_ctx) {
   4459a:	4604      	mov	r4, r0
   4459c:	2800      	cmp	r0, #0
   4459e:	d059      	beq.n	44654 <usb_dc_ep_write+0xe4>
	if (!ep_ctx->cfg.en) {
   445a0:	7a03      	ldrb	r3, [r0, #8]
   445a2:	2b00      	cmp	r3, #0
   445a4:	d056      	beq.n	44654 <usb_dc_ep_write+0xe4>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   445a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   445aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   445ae:	f108 0038 	add.w	r0, r8, #56	; 0x38
   445b2:	f00b fc3f 	bl	4fe34 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
   445b6:	7fa3      	ldrb	r3, [r4, #30]
   445b8:	b14b      	cbz	r3, 445ce <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
   445ba:	f108 0038 	add.w	r0, r8, #56	; 0x38
   445be:	f00b fc3b 	bl	4fe38 <k_mutex_unlock.isra.0>
		return -EAGAIN;
   445c2:	f06f 040a 	mvn.w	r4, #10
}
   445c6:	4620      	mov	r0, r4
   445c8:	b005      	add	sp, #20
   445ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   445ce:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
   445d0:	b1c5      	cbz	r5, 44604 <usb_dc_ep_write+0x94>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   445d2:	b33b      	cbz	r3, 44624 <usb_dc_ep_write+0xb4>
	ep_ctx->write_in_progress = true;
   445d4:	2301      	movs	r3, #1
   445d6:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   445d8:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   445dc:	a901      	add	r1, sp, #4
   445de:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   445e0:	e9cd 9501 	strd	r9, r5, [sp, #4]
   445e4:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   445e8:	f002 fc92 	bl	46f10 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   445ec:	4b1c      	ldr	r3, [pc, #112]	; (44660 <usb_dc_ep_write+0xf0>)
   445ee:	4298      	cmp	r0, r3
   445f0:	d029      	beq.n	44646 <usb_dc_ep_write+0xd6>
		ep_ctx->write_in_progress = false;
   445f2:	f884 801e 	strb.w	r8, [r4, #30]
		if (ret_bytes) {
   445f6:	bb1e      	cbnz	r6, 44640 <usb_dc_ep_write+0xd0>
		result = -EIO;
   445f8:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
   445fc:	4819      	ldr	r0, [pc, #100]	; (44664 <usb_dc_ep_write+0xf4>)
   445fe:	f00b fc1b 	bl	4fe38 <k_mutex_unlock.isra.0>
	return result;
   44602:	e7e0      	b.n	445c6 <usb_dc_ep_write+0x56>
	if (!data_len && ep_ctx->trans_zlp) {
   44604:	7fe2      	ldrb	r2, [r4, #31]
   44606:	b102      	cbz	r2, 4460a <usb_dc_ep_write+0x9a>
		ep_ctx->trans_zlp = false;
   44608:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   4460a:	2b00      	cmp	r3, #0
   4460c:	d1e2      	bne.n	445d4 <usb_dc_ep_write+0x64>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   4460e:	f002 feb9 	bl	47384 <nrfx_usbd_last_setup_dir_get>
   44612:	42b8      	cmp	r0, r7
   44614:	d0de      	beq.n	445d4 <usb_dc_ep_write+0x64>
		nrfx_usbd_setup_clear();
   44616:	f002 fea5 	bl	47364 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   4461a:	4812      	ldr	r0, [pc, #72]	; (44664 <usb_dc_ep_write+0xf4>)
   4461c:	f00b fc0c 	bl	4fe38 <k_mutex_unlock.isra.0>
		return 0;
   44620:	2400      	movs	r4, #0
   44622:	e7d0      	b.n	445c6 <usb_dc_ep_write+0x56>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   44624:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   44628:	42ab      	cmp	r3, r5
   4462a:	d9f0      	bls.n	4460e <usb_dc_ep_write+0x9e>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   4462c:	6862      	ldr	r2, [r4, #4]
   4462e:	fbb5 f3f2 	udiv	r3, r5, r2
   44632:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   44636:	2b00      	cmp	r3, #0
   44638:	d1e9      	bne.n	4460e <usb_dc_ep_write+0x9e>
			ep_ctx->trans_zlp = true;
   4463a:	2301      	movs	r3, #1
   4463c:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
   4463e:	e7e6      	b.n	4460e <usb_dc_ep_write+0x9e>
			*ret_bytes = 0;
   44640:	f8c6 8000 	str.w	r8, [r6]
   44644:	e7d8      	b.n	445f8 <usb_dc_ep_write+0x88>
		if (ret_bytes) {
   44646:	b106      	cbz	r6, 4464a <usb_dc_ep_write+0xda>
			*ret_bytes = data_len;
   44648:	6035      	str	r5, [r6, #0]
	int result = 0;
   4464a:	2400      	movs	r4, #0
   4464c:	e7d6      	b.n	445fc <usb_dc_ep_write+0x8c>
		return -ENODEV;
   4464e:	f06f 0412 	mvn.w	r4, #18
   44652:	e7b8      	b.n	445c6 <usb_dc_ep_write+0x56>
		return -EINVAL;
   44654:	f06f 0415 	mvn.w	r4, #21
   44658:	e7b5      	b.n	445c6 <usb_dc_ep_write+0x56>
   4465a:	bf00      	nop
   4465c:	20006480 	.word	0x20006480
   44660:	0bad0000 	.word	0x0bad0000
   44664:	200064b8 	.word	0x200064b8

00044668 <usb_dc_ep_read_wait>:
{
   44668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4466c:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
   4466e:	4b20      	ldr	r3, [pc, #128]	; (446f0 <usb_dc_ep_read_wait+0x88>)
{
   44670:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
   44672:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   44676:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
   44678:	2a00      	cmp	r2, #0
   4467a:	d033      	beq.n	446e4 <usb_dc_ep_read_wait+0x7c>
   4467c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   44680:	b383      	cbz	r3, 446e4 <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   44682:	0603      	lsls	r3, r0, #24
   44684:	d431      	bmi.n	446ea <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
   44686:	b901      	cbnz	r1, 4468a <usb_dc_ep_read_wait+0x22>
   44688:	bb7f      	cbnz	r7, 446ea <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
   4468a:	f7ff faef 	bl	43c6c <endpoint_ctx>
	if (!ep_ctx) {
   4468e:	4604      	mov	r4, r0
   44690:	b358      	cbz	r0, 446ea <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
   44692:	7a03      	ldrb	r3, [r0, #8]
   44694:	b34b      	cbz	r3, 446ea <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   44696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4469a:	4816      	ldr	r0, [pc, #88]	; (446f4 <usb_dc_ep_read_wait+0x8c>)
   4469c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   446a0:	f00b fbc8 	bl	4fe34 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   446a4:	68e3      	ldr	r3, [r4, #12]
   446a6:	429f      	cmp	r7, r3
   446a8:	46b8      	mov	r8, r7
   446aa:	bf28      	it	cs
   446ac:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
   446ae:	b946      	cbnz	r6, 446c2 <usb_dc_ep_read_wait+0x5a>
   446b0:	b93f      	cbnz	r7, 446c2 <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
   446b2:	b105      	cbz	r5, 446b6 <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
   446b4:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
   446b6:	480f      	ldr	r0, [pc, #60]	; (446f4 <usb_dc_ep_read_wait+0x8c>)
   446b8:	f00b fbbe 	bl	4fe38 <k_mutex_unlock.isra.0>
		return 0;
   446bc:	2000      	movs	r0, #0
}
   446be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   446c2:	69a1      	ldr	r1, [r4, #24]
   446c4:	4642      	mov	r2, r8
   446c6:	4630      	mov	r0, r6
   446c8:	f007 fb4d 	bl	4bd66 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   446cc:	69a3      	ldr	r3, [r4, #24]
   446ce:	4443      	add	r3, r8
   446d0:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   446d2:	68e3      	ldr	r3, [r4, #12]
   446d4:	eba3 0308 	sub.w	r3, r3, r8
   446d8:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   446da:	2d00      	cmp	r5, #0
   446dc:	d0eb      	beq.n	446b6 <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
   446de:	f8c5 8000 	str.w	r8, [r5]
   446e2:	e7e8      	b.n	446b6 <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
   446e4:	f06f 0012 	mvn.w	r0, #18
   446e8:	e7e9      	b.n	446be <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
   446ea:	f06f 0015 	mvn.w	r0, #21
   446ee:	e7e6      	b.n	446be <usb_dc_ep_read_wait+0x56>
   446f0:	20006480 	.word	0x20006480
   446f4:	200064b8 	.word	0x200064b8

000446f8 <usb_dc_ep_read_continue>:
{
   446f8:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   446fa:	4d1e      	ldr	r5, [pc, #120]	; (44774 <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
   446fc:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
   44700:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
   44702:	b382      	cbz	r2, 44766 <usb_dc_ep_read_continue+0x6e>
   44704:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   44708:	b36a      	cbz	r2, 44766 <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   4470a:	061b      	lsls	r3, r3, #24
   4470c:	d42e      	bmi.n	4476c <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
   4470e:	f7ff faad 	bl	43c6c <endpoint_ctx>
	if (!ep_ctx) {
   44712:	4604      	mov	r4, r0
   44714:	b350      	cbz	r0, 4476c <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
   44716:	7a03      	ldrb	r3, [r0, #8]
   44718:	b343      	cbz	r3, 4476c <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   4471a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4471e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44722:	f105 0038 	add.w	r0, r5, #56	; 0x38
   44726:	f00b fb85 	bl	4fe34 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
   4472a:	68e3      	ldr	r3, [r4, #12]
   4472c:	b9b3      	cbnz	r3, 4475c <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
   4472e:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
   44730:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
   44732:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
   44734:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
   44736:	7f63      	ldrb	r3, [r4, #29]
   44738:	b183      	cbz	r3, 4475c <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
   4473a:	f7ff fb0f 	bl	43d5c <usbd_evt_alloc>
			if (!ev) {
   4473e:	b930      	cbnz	r0, 4474e <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
   44740:	f105 0038 	add.w	r0, r5, #56	; 0x38
   44744:	f00b fb78 	bl	4fe38 <k_mutex_unlock.isra.0>
				return -ENOMEM;
   44748:	f06f 000b 	mvn.w	r0, #11
}
   4474c:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
   4474e:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   44750:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   44752:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
   44754:	f7ff faba 	bl	43ccc <usbd_evt_put>
			usbd_work_schedule();
   44758:	f7ff fabe 	bl	43cd8 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
   4475c:	4806      	ldr	r0, [pc, #24]	; (44778 <usb_dc_ep_read_continue+0x80>)
   4475e:	f00b fb6b 	bl	4fe38 <k_mutex_unlock.isra.0>
	return 0;
   44762:	2000      	movs	r0, #0
   44764:	e7f2      	b.n	4474c <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
   44766:	f06f 0012 	mvn.w	r0, #18
   4476a:	e7ef      	b.n	4474c <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
   4476c:	f06f 0015 	mvn.w	r0, #21
   44770:	e7ec      	b.n	4474c <usb_dc_ep_read_continue+0x54>
   44772:	bf00      	nop
   44774:	20006480 	.word	0x20006480
   44778:	200064b8 	.word	0x200064b8

0004477c <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
   4477c:	4b08      	ldr	r3, [pc, #32]	; (447a0 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
   4477e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   44782:	b510      	push	{r4, lr}
   44784:	460c      	mov	r4, r1
	if (!dev_attached()) {
   44786:	b12b      	cbz	r3, 44794 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
   44788:	f7ff fa70 	bl	43c6c <endpoint_ctx>
	if (!ep_ctx) {
   4478c:	b128      	cbz	r0, 4479a <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
   4478e:	6004      	str	r4, [r0, #0]
	return 0;
   44790:	2000      	movs	r0, #0
}
   44792:	bd10      	pop	{r4, pc}
		return -ENODEV;
   44794:	f06f 0012 	mvn.w	r0, #18
   44798:	e7fb      	b.n	44792 <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
   4479a:	f06f 0015 	mvn.w	r0, #21
   4479e:	e7f8      	b.n	44792 <usb_dc_ep_set_callback+0x16>
   447a0:	20006480 	.word	0x20006480

000447a4 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   447a4:	4b01      	ldr	r3, [pc, #4]	; (447ac <usb_dc_set_status_callback+0x8>)
   447a6:	6018      	str	r0, [r3, #0]
}
   447a8:	4770      	bx	lr
   447aa:	bf00      	nop
   447ac:	20006480 	.word	0x20006480

000447b0 <usb_dc_ep_mps>:
{
   447b0:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   447b2:	4b07      	ldr	r3, [pc, #28]	; (447d0 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
   447b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   447b8:	b123      	cbz	r3, 447c4 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   447ba:	f7ff fa57 	bl	43c6c <endpoint_ctx>
	if (!ep_ctx) {
   447be:	b120      	cbz	r0, 447ca <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   447c0:	6840      	ldr	r0, [r0, #4]
}
   447c2:	bd08      	pop	{r3, pc}
		return -ENODEV;
   447c4:	f06f 0012 	mvn.w	r0, #18
   447c8:	e7fb      	b.n	447c2 <usb_dc_ep_mps+0x12>
		return -EINVAL;
   447ca:	f06f 0015 	mvn.w	r0, #21
   447ce:	e7f8      	b.n	447c2 <usb_dc_ep_mps+0x12>
   447d0:	20006480 	.word	0x20006480

000447d4 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   447d4:	2811      	cmp	r0, #17
   447d6:	d80e      	bhi.n	447f6 <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   447d8:	4a08      	ldr	r2, [pc, #32]	; (447fc <adc_gain_invert+0x28>)
   447da:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   447de:	b153      	cbz	r3, 447f6 <adc_gain_invert+0x22>
   447e0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   447e4:	7852      	ldrb	r2, [r2, #1]
   447e6:	b132      	cbz	r2, 447f6 <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   447e8:	6808      	ldr	r0, [r1, #0]
   447ea:	4343      	muls	r3, r0
			rv = 0;
   447ec:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   447ee:	fb93 f3f2 	sdiv	r3, r3, r2
   447f2:	600b      	str	r3, [r1, #0]
			rv = 0;
   447f4:	4770      	bx	lr
	int rv = -EINVAL;
   447f6:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   447fa:	4770      	bx	lr
   447fc:	00054481 	.word	0x00054481

00044800 <adc_nrfx_channel_setup>:
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
   44800:	7908      	ldrb	r0, [r1, #4]
{
   44802:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   44804:	f000 041f 	and.w	r4, r0, #31

	if (channel_id >= SAADC_CH_NUM) {
   44808:	2c07      	cmp	r4, #7
   4480a:	d81f      	bhi.n	4484c <adc_nrfx_channel_setup+0x4c>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
   4480c:	780b      	ldrb	r3, [r1, #0]
   4480e:	2b09      	cmp	r3, #9
   44810:	d81c      	bhi.n	4484c <adc_nrfx_channel_setup+0x4c>
   44812:	e8df f003 	tbb	[pc, r3]
   44816:	0606      	.short	0x0606
   44818:	1b060606 	.word	0x1b060606
   4481c:	201b1e05 	.word	0x201b1e05
		break;
	case ADC_GAIN_1_2:
		config.gain = NRF_SAADC_GAIN1_2;
		break;
	case ADC_GAIN_1:
		config.gain = NRF_SAADC_GAIN1;
   44820:	2305      	movs	r3, #5
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
   44822:	784a      	ldrb	r2, [r1, #1]
   44824:	2a03      	cmp	r2, #3
   44826:	d018      	beq.n	4485a <adc_nrfx_channel_setup+0x5a>
   44828:	2a04      	cmp	r2, #4
   4482a:	d10f      	bne.n	4484c <adc_nrfx_channel_setup+0x4c>
	nrf_saadc_channel_config_t config = {
   4482c:	2500      	movs	r5, #0
	default:
		LOG_ERR("Selected ADC reference is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->acquisition_time) {
   4482e:	884a      	ldrh	r2, [r1, #2]
   44830:	f244 060a 	movw	r6, #16394	; 0x400a
   44834:	42b2      	cmp	r2, r6
   44836:	d044      	beq.n	448c2 <adc_nrfx_channel_setup+0xc2>
   44838:	d811      	bhi.n	4485e <adc_nrfx_channel_setup+0x5e>
   4483a:	f244 0603 	movw	r6, #16387	; 0x4003
   4483e:	42b2      	cmp	r2, r6
   44840:	d03b      	beq.n	448ba <adc_nrfx_channel_setup+0xba>
   44842:	f244 0605 	movw	r6, #16389	; 0x4005
   44846:	42b2      	cmp	r2, r6
   44848:	d039      	beq.n	448be <adc_nrfx_channel_setup+0xbe>
   4484a:	b3d2      	cbz	r2, 448c2 <adc_nrfx_channel_setup+0xc2>
   4484c:	f06f 0015 	mvn.w	r0, #21
   44850:	e032      	b.n	448b8 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
   44852:	2306      	movs	r3, #6
		break;
   44854:	e7e5      	b.n	44822 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   44856:	2307      	movs	r3, #7
		break;
   44858:	e7e3      	b.n	44822 <adc_nrfx_channel_setup+0x22>
	switch (channel_cfg->reference) {
   4485a:	2501      	movs	r5, #1
   4485c:	e7e7      	b.n	4482e <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
   4485e:	f244 0614 	movw	r6, #16404	; 0x4014
   44862:	42b2      	cmp	r2, r6
   44864:	d02f      	beq.n	448c6 <adc_nrfx_channel_setup+0xc6>
   44866:	f244 0628 	movw	r6, #16424	; 0x4028
   4486a:	42b2      	cmp	r2, r6
   4486c:	d02d      	beq.n	448ca <adc_nrfx_channel_setup+0xca>
   4486e:	f244 060f 	movw	r6, #16399	; 0x400f
   44872:	42b2      	cmp	r2, r6
   44874:	d1ea      	bne.n	4484c <adc_nrfx_channel_setup+0x4c>
	case ADC_ACQ_TIME_DEFAULT:
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10):
		config.acq_time = NRF_SAADC_ACQTIME_10US;
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 15):
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   44876:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   44878:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   4487c:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   4487e:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   44882:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   44886:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   4488a:	0122      	lsls	r2, r4, #4
   4488c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   44890:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   44894:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   44896:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   4489a:	0123      	lsls	r3, r4, #4
   4489c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   448a0:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   448a4:	798a      	ldrb	r2, [r1, #6]
   448a6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   448aa:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   448ae:	4b08      	ldr	r3, [pc, #32]	; (448d0 <adc_nrfx_channel_setup+0xd0>)
   448b0:	794a      	ldrb	r2, [r1, #5]
   448b2:	4423      	add	r3, r4
   448b4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

	return 0;
}
   448b8:	bd70      	pop	{r4, r5, r6, pc}
	nrf_saadc_channel_config_t config = {
   448ba:	2200      	movs	r2, #0
   448bc:	e7dc      	b.n	44878 <adc_nrfx_channel_setup+0x78>
	switch (channel_cfg->acquisition_time) {
   448be:	2201      	movs	r2, #1
   448c0:	e7da      	b.n	44878 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   448c2:	2202      	movs	r2, #2
   448c4:	e7d8      	b.n	44878 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   448c6:	2204      	movs	r2, #4
   448c8:	e7d6      	b.n	44878 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   448ca:	2205      	movs	r2, #5
   448cc:	e7d4      	b.n	44878 <adc_nrfx_channel_setup+0x78>
   448ce:	bf00      	nop
   448d0:	20000198 	.word	0x20000198

000448d4 <adc_context_start_sampling.isra.0>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   448d4:	4b04      	ldr	r3, [pc, #16]	; (448e8 <adc_context_start_sampling.isra.0+0x14>)
   448d6:	2201      	movs	r2, #1
   448d8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   448dc:	b108      	cbz	r0, 448e2 <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   448de:	60da      	str	r2, [r3, #12]
}
   448e0:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   448e2:	601a      	str	r2, [r3, #0]
   448e4:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   448e6:	4770      	bx	lr
   448e8:	40007000 	.word	0x40007000

000448ec <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   448ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   448ee:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
   448f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   448f4:	4856      	ldr	r0, [pc, #344]	; (44a50 <adc_nrfx_read+0x164>)
   448f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   448fa:	f003 fc43 	bl	48184 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   448fe:	686e      	ldr	r6, [r5, #4]
	if (!selected_channels ||
   44900:	1e73      	subs	r3, r6, #1
   44902:	2bfe      	cmp	r3, #254	; 0xfe
   44904:	d83c      	bhi.n	44980 <adc_nrfx_read+0x94>
   44906:	2300      	movs	r3, #0
    p_reg->CH[channel].PSELP = pselp;
   44908:	4852      	ldr	r0, [pc, #328]	; (44a54 <adc_nrfx_read+0x168>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   4490a:	4f53      	ldr	r7, [pc, #332]	; (44a58 <adc_nrfx_read+0x16c>)
	active_channels = 0U;
   4490c:	461a      	mov	r2, r3
		if (selected_channels & BIT(channel_id)) {
   4490e:	fa26 f103 	lsr.w	r1, r6, r3
   44912:	f011 0101 	ands.w	r1, r1, #1
   44916:	d026      	beq.n	44966 <adc_nrfx_read+0x7a>
			if (m_data.positive_inputs[channel_id] == 0U) {
   44918:	f817 c003 	ldrb.w	ip, [r7, r3]
   4491c:	f1bc 0f00 	cmp.w	ip, #0
   44920:	d02e      	beq.n	44980 <adc_nrfx_read+0x94>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   44922:	eb00 1e03 	add.w	lr, r0, r3, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   44926:	7c6c      	ldrb	r4, [r5, #17]
   44928:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
   4492c:	3c00      	subs	r4, #0
   4492e:	bf18      	it	ne
   44930:	2401      	movne	r4, #1
   44932:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   44936:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
   4493a:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   4493e:	f103 0151 	add.w	r1, r3, #81	; 0x51
   44942:	0109      	lsls	r1, r1, #4
			++active_channels;
   44944:	3201      	adds	r2, #1
   44946:	f840 c001 	str.w	ip, [r0, r1]
   4494a:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   4494c:	3301      	adds	r3, #1
   4494e:	2b08      	cmp	r3, #8
   44950:	d1dd      	bne.n	4490e <adc_nrfx_read+0x22>
	switch (sequence->resolution) {
   44952:	7c2b      	ldrb	r3, [r5, #16]
   44954:	3b08      	subs	r3, #8
   44956:	2b06      	cmp	r3, #6
   44958:	d812      	bhi.n	44980 <adc_nrfx_read+0x94>
   4495a:	e8df f003 	tbb	[pc, r3]
   4495e:	1109      	.short	0x1109
   44960:	1119111d 	.word	0x1119111d
   44964:	1b          	.byte	0x1b
   44965:	00          	.byte	0x00
   44966:	f103 0451 	add.w	r4, r3, #81	; 0x51
   4496a:	0124      	lsls	r4, r4, #4
   4496c:	5101      	str	r1, [r0, r4]
}
   4496e:	e7ed      	b.n	4494c <adc_nrfx_read+0x60>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   44970:	2300      	movs	r3, #0
    p_reg->RESOLUTION = resolution;
   44972:	4938      	ldr	r1, [pc, #224]	; (44a54 <adc_nrfx_read+0x168>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   44974:	2a01      	cmp	r2, #1
   44976:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   4497a:	7c6b      	ldrb	r3, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   4497c:	d90e      	bls.n	4499c <adc_nrfx_read+0xb0>
   4497e:	b17b      	cbz	r3, 449a0 <adc_nrfx_read+0xb4>
		return -EINVAL;
   44980:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   44984:	4832      	ldr	r0, [pc, #200]	; (44a50 <adc_nrfx_read+0x164>)
   44986:	f003 fbd7 	bl	48138 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   4498a:	4620      	mov	r0, r4
   4498c:	b003      	add	sp, #12
   4498e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   44990:	2302      	movs	r3, #2
		break;
   44992:	e7ee      	b.n	44972 <adc_nrfx_read+0x86>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   44994:	2303      	movs	r3, #3
		break;
   44996:	e7ec      	b.n	44972 <adc_nrfx_read+0x86>
	switch (sequence->resolution) {
   44998:	2301      	movs	r3, #1
   4499a:	e7ea      	b.n	44972 <adc_nrfx_read+0x86>
	switch (sequence->oversampling) {
   4499c:	2b08      	cmp	r3, #8
   4499e:	d8ef      	bhi.n	44980 <adc_nrfx_read+0x94>
    p_reg->OVERSAMPLE = oversample;
   449a0:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   449a4:	6829      	ldr	r1, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   449a6:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   449a8:	b111      	cbz	r1, 449b0 <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   449aa:	8989      	ldrh	r1, [r1, #12]
   449ac:	fb01 3303 	mla	r3, r1, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   449b0:	68e9      	ldr	r1, [r5, #12]
   449b2:	4299      	cmp	r1, r3
   449b4:	d349      	bcc.n	44a4a <adc_nrfx_read+0x15e>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   449b6:	4b27      	ldr	r3, [pc, #156]	; (44a54 <adc_nrfx_read+0x168>)
   449b8:	68a9      	ldr	r1, [r5, #8]
   449ba:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   449be:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
   449c0:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   449c4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   449c6:	4c25      	ldr	r4, [pc, #148]	; (44a5c <adc_nrfx_read+0x170>)
   449c8:	f104 0674 	add.w	r6, r4, #116	; 0x74
   449cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   449ce:	683b      	ldr	r3, [r7, #0]
   449d0:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
   449d2:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
   449d4:	2600      	movs	r6, #0
   449d6:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
   449d8:	4627      	mov	r7, r4
   449da:	b38b      	cbz	r3, 44a40 <adc_nrfx_read+0x154>
		ctx->options = *sequence->options;
   449dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   449de:	f104 0588 	add.w	r5, r4, #136	; 0x88
   449e2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   449e6:	6765      	str	r5, [r4, #116]	; 0x74
		ctx->sampling_index = 0U;
   449e8:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   449ec:	b340      	cbz	r0, 44a40 <adc_nrfx_read+0x154>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   449ee:	f3bf 8f5b 	dmb	ish
   449f2:	e857 3f00 	ldrex	r3, [r7]
   449f6:	e847 6200 	strex	r2, r6, [r7]
   449fa:	2a00      	cmp	r2, #0
   449fc:	d1f9      	bne.n	449f2 <adc_nrfx_read+0x106>
   449fe:	f3bf 8f5b 	dmb	ish
   44a02:	4917      	ldr	r1, [pc, #92]	; (44a60 <adc_nrfx_read+0x174>)
   44a04:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   44a08:	4a16      	ldr	r2, [pc, #88]	; (44a64 <adc_nrfx_read+0x178>)
   44a0a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   44a0e:	460f      	mov	r7, r1
   44a10:	4631      	mov	r1, r6
   44a12:	fbe5 7100 	umlal	r7, r1, r5, r0
   44a16:	2300      	movs	r3, #0
   44a18:	4638      	mov	r0, r7
   44a1a:	f7e1 fb71 	bl	26100 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   44a1e:	2200      	movs	r2, #0
   44a20:	e9cd 0100 	strd	r0, r1, [sp]
   44a24:	2300      	movs	r3, #0
   44a26:	f104 0008 	add.w	r0, r4, #8
   44a2a:	f004 faa7 	bl	48f7c <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   44a2e:	480e      	ldr	r0, [pc, #56]	; (44a68 <adc_nrfx_read+0x17c>)
   44a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44a38:	f003 fba4 	bl	48184 <z_impl_k_sem_take>
	return ctx->status;
   44a3c:	6f24      	ldr	r4, [r4, #112]	; 0x70
	return error;
   44a3e:	e7a1      	b.n	44984 <adc_nrfx_read+0x98>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   44a40:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   44a44:	f7ff ff46 	bl	448d4 <adc_context_start_sampling.isra.0>
   44a48:	e7f1      	b.n	44a2e <adc_nrfx_read+0x142>
		return -ENOMEM;
   44a4a:	f06f 040b 	mvn.w	r4, #11
   44a4e:	e799      	b.n	44984 <adc_nrfx_read+0x98>
   44a50:	200001d8 	.word	0x200001d8
   44a54:	40007000 	.word	0x40007000
   44a58:	20000238 	.word	0x20000238
   44a5c:	20000198 	.word	0x20000198
   44a60:	000f423f 	.word	0x000f423f
   44a64:	000f4240 	.word	0x000f4240
   44a68:	200001f0 	.word	0x200001f0

00044a6c <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   44a6c:	4b0e      	ldr	r3, [pc, #56]	; (44aa8 <init_saadc+0x3c>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   44a6e:	b510      	push	{r4, lr}
   44a70:	2400      	movs	r4, #0
   44a72:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   44a76:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   44a7a:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   44a7e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   44a82:	2212      	movs	r2, #18
   44a84:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   44a88:	2007      	movs	r0, #7
   44a8a:	f7e8 f8f3 	bl	2cc74 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   44a8e:	4622      	mov	r2, r4
   44a90:	2101      	movs	r1, #1
   44a92:	2007      	movs	r0, #7
   44a94:	f7e8 f91e 	bl	2ccd4 <z_arm_irq_priority_set>
	return sem->count;
   44a98:	4804      	ldr	r0, [pc, #16]	; (44aac <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   44a9a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   44a9c:	b913      	cbnz	r3, 44aa4 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   44a9e:	3040      	adds	r0, #64	; 0x40
   44aa0:	f003 fb4a 	bl	48138 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   44aa4:	2000      	movs	r0, #0
   44aa6:	bd10      	pop	{r4, pc}
   44aa8:	40007000 	.word	0x40007000
   44aac:	20000198 	.word	0x20000198

00044ab0 <saadc_irq_handler>:
{
   44ab0:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   44ab2:	4b30      	ldr	r3, [pc, #192]	; (44b74 <saadc_irq_handler+0xc4>)
   44ab4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   44ab8:	2a00      	cmp	r2, #0
   44aba:	d04d      	beq.n	44b58 <saadc_irq_handler+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   44abc:	2200      	movs	r2, #0
   44abe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   44ac2:	4c2d      	ldr	r4, [pc, #180]	; (44b78 <saadc_irq_handler+0xc8>)
   44ac4:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   44ac8:	2101      	movs	r1, #1
   44aca:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   44acc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   44ad0:	6f63      	ldr	r3, [r4, #116]	; 0x74
   44ad2:	4625      	mov	r5, r4
   44ad4:	b3db      	cbz	r3, 44b4e <saadc_irq_handler+0x9e>
		adc_sequence_callback callback = ctx->options.callback;
   44ad6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   44ada:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   44ade:	b133      	cbz	r3, 44aee <saadc_irq_handler+0x3e>
			action = callback(dev,
   44ae0:	f104 0174 	add.w	r1, r4, #116	; 0x74
   44ae4:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   44ae6:	2801      	cmp	r0, #1
   44ae8:	d014      	beq.n	44b14 <saadc_irq_handler+0x64>
   44aea:	2802      	cmp	r0, #2
   44aec:	d029      	beq.n	44b42 <saadc_irq_handler+0x92>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   44aee:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   44af2:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   44af6:	429a      	cmp	r2, r3
   44af8:	d923      	bls.n	44b42 <saadc_irq_handler+0x92>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   44afa:	3301      	adds	r3, #1
   44afc:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   44b00:	4b1c      	ldr	r3, [pc, #112]	; (44b74 <saadc_irq_handler+0xc4>)
   44b02:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   44b06:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   44b0a:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   44b0c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   44b10:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   44b14:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   44b18:	b92b      	cbnz	r3, 44b26 <saadc_irq_handler+0x76>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
   44b1a:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
}
   44b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   44b22:	f7ff bed7 	b.w	448d4 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   44b26:	f3bf 8f5b 	dmb	ish
   44b2a:	e855 3f00 	ldrex	r3, [r5]
   44b2e:	1e5a      	subs	r2, r3, #1
   44b30:	e845 2100 	strex	r1, r2, [r5]
   44b34:	2900      	cmp	r1, #0
   44b36:	d1f8      	bne.n	44b2a <saadc_irq_handler+0x7a>
   44b38:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   44b3c:	2b01      	cmp	r3, #1
   44b3e:	dcec      	bgt.n	44b1a <saadc_irq_handler+0x6a>
   44b40:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   44b42:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   44b46:	b113      	cbz	r3, 44b4e <saadc_irq_handler+0x9e>
	z_impl_k_timer_stop(timer);
   44b48:	480c      	ldr	r0, [pc, #48]	; (44b7c <saadc_irq_handler+0xcc>)
   44b4a:	f00c fac5 	bl	510d8 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   44b4e:	480c      	ldr	r0, [pc, #48]	; (44b80 <saadc_irq_handler+0xd0>)
   44b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   44b54:	f003 baf0 	b.w	48138 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   44b58:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   44b5c:	2900      	cmp	r1, #0
   44b5e:	d0ef      	beq.n	44b40 <saadc_irq_handler+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   44b60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   44b64:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   44b68:	2201      	movs	r2, #1
   44b6a:	609a      	str	r2, [r3, #8]
   44b6c:	601a      	str	r2, [r3, #0]
   44b6e:	605a      	str	r2, [r3, #4]
}
   44b70:	e7e6      	b.n	44b40 <saadc_irq_handler+0x90>
   44b72:	bf00      	nop
   44b74:	40007000 	.word	0x40007000
   44b78:	20000198 	.word	0x20000198
   44b7c:	200001a0 	.word	0x200001a0
   44b80:	200001f0 	.word	0x200001f0

00044b84 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   44b84:	4b08      	ldr	r3, [pc, #32]	; (44ba8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   44b86:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   44b88:	1ac3      	subs	r3, r0, r3
{
   44b8a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   44b8c:	4907      	ldr	r1, [pc, #28]	; (44bac <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   44b8e:	109b      	asrs	r3, r3, #2
{
   44b90:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   44b92:	4359      	muls	r1, r3
   44b94:	4806      	ldr	r0, [pc, #24]	; (44bb0 <onoff_stop+0x2c>)
   44b96:	2240      	movs	r2, #64	; 0x40
   44b98:	f00b f9b5 	bl	4ff06 <stop>
	notify(mgr, res);
   44b9c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   44b9e:	4601      	mov	r1, r0
	notify(mgr, res);
   44ba0:	4620      	mov	r0, r4
}
   44ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   44ba6:	4718      	bx	r3
   44ba8:	20006d24 	.word	0x20006d24
   44bac:	b6db6db7 	.word	0xb6db6db7
   44bb0:	00051530 	.word	0x00051530

00044bb4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   44bb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   44bb6:	4c0c      	ldr	r4, [pc, #48]	; (44be8 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   44bb8:	4a0c      	ldr	r2, [pc, #48]	; (44bec <onoff_start+0x38>)
   44bba:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   44bbc:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   44bbe:	9300      	str	r3, [sp, #0]
{
   44bc0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   44bc2:	460b      	mov	r3, r1
   44bc4:	490a      	ldr	r1, [pc, #40]	; (44bf0 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   44bc6:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   44bc8:	4361      	muls	r1, r4
{
   44bca:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   44bcc:	4809      	ldr	r0, [pc, #36]	; (44bf4 <onoff_start+0x40>)
   44bce:	f00b f9c7 	bl	4ff60 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   44bd2:	1e01      	subs	r1, r0, #0
   44bd4:	da05      	bge.n	44be2 <onoff_start+0x2e>
		notify(mgr, err);
   44bd6:	4630      	mov	r0, r6
   44bd8:	462b      	mov	r3, r5
	}
}
   44bda:	b002      	add	sp, #8
   44bdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   44be0:	4718      	bx	r3
}
   44be2:	b002      	add	sp, #8
   44be4:	bd70      	pop	{r4, r5, r6, pc}
   44be6:	bf00      	nop
   44be8:	20006d24 	.word	0x20006d24
   44bec:	0004ffcd 	.word	0x0004ffcd
   44bf0:	b6db6db7 	.word	0xb6db6db7
   44bf4:	00051530 	.word	0x00051530

00044bf8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   44bf8:	2200      	movs	r2, #0
{
   44bfa:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   44bfc:	2101      	movs	r1, #1
{
   44bfe:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   44c00:	4610      	mov	r0, r2
   44c02:	f7e8 f867 	bl	2ccd4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   44c06:	2000      	movs	r0, #0
   44c08:	f7e8 f834 	bl	2cc74 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   44c0c:	480f      	ldr	r0, [pc, #60]	; (44c4c <clk_init+0x54>)
   44c0e:	f001 f97d 	bl	45f0c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   44c12:	4b0f      	ldr	r3, [pc, #60]	; (44c50 <clk_init+0x58>)
   44c14:	4298      	cmp	r0, r3
   44c16:	d115      	bne.n	44c44 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   44c18:	f001 f988 	bl	45f2c <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   44c1c:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   44c1e:	490d      	ldr	r1, [pc, #52]	; (44c54 <clk_init+0x5c>)
   44c20:	4630      	mov	r0, r6
   44c22:	f004 fff6 	bl	49c12 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   44c26:	2800      	cmp	r0, #0
   44c28:	db0b      	blt.n	44c42 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   44c2a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   44c2c:	4909      	ldr	r1, [pc, #36]	; (44c54 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   44c2e:	2501      	movs	r5, #1
   44c30:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   44c32:	f104 001c 	add.w	r0, r4, #28
   44c36:	f004 ffec 	bl	49c12 <onoff_manager_init>
		if (err < 0) {
   44c3a:	2800      	cmp	r0, #0
   44c3c:	db01      	blt.n	44c42 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   44c3e:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   44c40:	2000      	movs	r0, #0
}
   44c42:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   44c44:	f06f 0004 	mvn.w	r0, #4
   44c48:	e7fb      	b.n	44c42 <clk_init+0x4a>
   44c4a:	bf00      	nop
   44c4c:	00044c8d 	.word	0x00044c8d
   44c50:	0bad0000 	.word	0x0bad0000
   44c54:	00053ad8 	.word	0x00053ad8

00044c58 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   44c58:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   44c5a:	230c      	movs	r3, #12
   44c5c:	4809      	ldr	r0, [pc, #36]	; (44c84 <clkstarted_handle.constprop.0+0x2c>)
   44c5e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   44c60:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   44c62:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   44c64:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   44c68:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   44c6a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   44c6c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   44c6e:	4418      	add	r0, r3
   44c70:	f00b f936 	bl	4fee0 <set_on_state>
	if (callback) {
   44c74:	b12d      	cbz	r5, 44c82 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   44c76:	4632      	mov	r2, r6
   44c78:	462b      	mov	r3, r5
   44c7a:	4803      	ldr	r0, [pc, #12]	; (44c88 <clkstarted_handle.constprop.0+0x30>)
}
   44c7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   44c80:	4718      	bx	r3
}
   44c82:	bd70      	pop	{r4, r5, r6, pc}
   44c84:	20006d24 	.word	0x20006d24
   44c88:	00051530 	.word	0x00051530

00044c8c <clock_event_handler>:
	switch (event) {
   44c8c:	b110      	cbz	r0, 44c94 <clock_event_handler+0x8>
   44c8e:	2801      	cmp	r0, #1
   44c90:	d004      	beq.n	44c9c <clock_event_handler+0x10>
   44c92:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   44c94:	4b03      	ldr	r3, [pc, #12]	; (44ca4 <clock_event_handler+0x18>)
   44c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   44c98:	075b      	lsls	r3, r3, #29
   44c9a:	d101      	bne.n	44ca0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   44c9c:	f7ff bfdc 	b.w	44c58 <clkstarted_handle.constprop.0>
}
   44ca0:	4770      	bx	lr
   44ca2:	bf00      	nop
   44ca4:	20006d24 	.word	0x20006d24

00044ca8 <generic_hfclk_start>:
{
   44ca8:	b508      	push	{r3, lr}
	__asm__ volatile(
   44caa:	f04f 0320 	mov.w	r3, #32
   44cae:	f3ef 8111 	mrs	r1, BASEPRI
   44cb2:	f383 8812 	msr	BASEPRI_MAX, r3
   44cb6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   44cba:	4a12      	ldr	r2, [pc, #72]	; (44d04 <generic_hfclk_start+0x5c>)
   44cbc:	6813      	ldr	r3, [r2, #0]
   44cbe:	f043 0002 	orr.w	r0, r3, #2
   44cc2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   44cc4:	07da      	lsls	r2, r3, #31
   44cc6:	d408      	bmi.n	44cda <generic_hfclk_start+0x32>
	__asm__ volatile(
   44cc8:	f381 8811 	msr	BASEPRI, r1
   44ccc:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   44cd0:	2001      	movs	r0, #1
}
   44cd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   44cd6:	f00b baa7 	b.w	50228 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   44cda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   44cde:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   44ce2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   44ce6:	07d3      	lsls	r3, r2, #31
   44ce8:	d5ee      	bpl.n	44cc8 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   44cea:	4807      	ldr	r0, [pc, #28]	; (44d08 <generic_hfclk_start+0x60>)
   44cec:	f00b f8f8 	bl	4fee0 <set_on_state>
   44cf0:	f381 8811 	msr	BASEPRI, r1
   44cf4:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   44cf8:	2000      	movs	r0, #0
}
   44cfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   44cfe:	f7ff bfab 	b.w	44c58 <clkstarted_handle.constprop.0>
   44d02:	bf00      	nop
   44d04:	20006d74 	.word	0x20006d74
   44d08:	20006d64 	.word	0x20006d64

00044d0c <api_blocking_start>:
{
   44d0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   44d0e:	2200      	movs	r2, #0
   44d10:	2301      	movs	r3, #1
   44d12:	e9cd 2302 	strd	r2, r3, [sp, #8]
   44d16:	ab04      	add	r3, sp, #16
   44d18:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   44d1c:	4a09      	ldr	r2, [pc, #36]	; (44d44 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   44d1e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   44d22:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   44d24:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   44d28:	f00b f949 	bl	4ffbe <api_start>
	if (err < 0) {
   44d2c:	2800      	cmp	r0, #0
   44d2e:	db05      	blt.n	44d3c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   44d30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   44d34:	2300      	movs	r3, #0
   44d36:	4668      	mov	r0, sp
   44d38:	f003 fa24 	bl	48184 <z_impl_k_sem_take>
}
   44d3c:	b007      	add	sp, #28
   44d3e:	f85d fb04 	ldr.w	pc, [sp], #4
   44d42:	bf00      	nop
   44d44:	0004ffeb 	.word	0x0004ffeb

00044d48 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   44d48:	4b09      	ldr	r3, [pc, #36]	; (44d70 <generic_hfclk_stop+0x28>)
   44d4a:	f3bf 8f5b 	dmb	ish
   44d4e:	e853 2f00 	ldrex	r2, [r3]
   44d52:	f022 0102 	bic.w	r1, r2, #2
   44d56:	e843 1000 	strex	r0, r1, [r3]
   44d5a:	2800      	cmp	r0, #0
   44d5c:	d1f7      	bne.n	44d4e <generic_hfclk_stop+0x6>
   44d5e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   44d62:	07d3      	lsls	r3, r2, #31
   44d64:	d402      	bmi.n	44d6c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   44d66:	2001      	movs	r0, #1
   44d68:	f001 b8ee 	b.w	45f48 <nrfx_clock_stop>
}
   44d6c:	4770      	bx	lr
   44d6e:	bf00      	nop
   44d70:	20006d74 	.word	0x20006d74

00044d74 <z_nrf_clock_control_get_onoff>:
}
   44d74:	4a02      	ldr	r2, [pc, #8]	; (44d80 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   44d76:	b2c3      	uxtb	r3, r0
}
   44d78:	201c      	movs	r0, #28
   44d7a:	fb03 2000 	mla	r0, r3, r0, r2
   44d7e:	4770      	bx	lr
   44d80:	20006d24 	.word	0x20006d24

00044d84 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   44d84:	4b09      	ldr	r3, [pc, #36]	; (44dac <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   44d86:	f3bf 8f5b 	dmb	ish
   44d8a:	e853 2f00 	ldrex	r2, [r3]
   44d8e:	f042 0101 	orr.w	r1, r2, #1
   44d92:	e843 1000 	strex	r0, r1, [r3]
   44d96:	2800      	cmp	r0, #0
   44d98:	d1f7      	bne.n	44d8a <z_nrf_clock_bt_ctlr_hf_request+0x6>
   44d9a:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   44d9e:	0793      	lsls	r3, r2, #30
   44da0:	d402      	bmi.n	44da8 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   44da2:	2001      	movs	r0, #1
   44da4:	f00b ba40 	b.w	50228 <nrfx_clock_start>
}
   44da8:	4770      	bx	lr
   44daa:	bf00      	nop
   44dac:	20006d74 	.word	0x20006d74

00044db0 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   44db0:	4b09      	ldr	r3, [pc, #36]	; (44dd8 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   44db2:	f3bf 8f5b 	dmb	ish
   44db6:	e853 2f00 	ldrex	r2, [r3]
   44dba:	f022 0101 	bic.w	r1, r2, #1
   44dbe:	e843 1000 	strex	r0, r1, [r3]
   44dc2:	2800      	cmp	r0, #0
   44dc4:	d1f7      	bne.n	44db6 <z_nrf_clock_bt_ctlr_hf_release+0x6>
   44dc6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   44dca:	0793      	lsls	r3, r2, #30
   44dcc:	d402      	bmi.n	44dd4 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   44dce:	2001      	movs	r0, #1
   44dd0:	f001 b8ba 	b.w	45f48 <nrfx_clock_stop>
}
   44dd4:	4770      	bx	lr
   44dd6:	bf00      	nop
   44dd8:	20006d74 	.word	0x20006d74

00044ddc <z_nrf_clock_control_lf_on>:
{
   44ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   44de0:	4938      	ldr	r1, [pc, #224]	; (44ec4 <z_nrf_clock_control_lf_on+0xe8>)
   44de2:	f3bf 8f5b 	dmb	ish
   44de6:	4607      	mov	r7, r0
   44de8:	2201      	movs	r2, #1
   44dea:	e851 3f00 	ldrex	r3, [r1]
   44dee:	e841 2000 	strex	r0, r2, [r1]
   44df2:	2800      	cmp	r0, #0
   44df4:	d1f9      	bne.n	44dea <z_nrf_clock_control_lf_on+0xe>
   44df6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   44dfa:	b933      	cbnz	r3, 44e0a <z_nrf_clock_control_lf_on+0x2e>
   44dfc:	4932      	ldr	r1, [pc, #200]	; (44ec8 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   44dfe:	4833      	ldr	r0, [pc, #204]	; (44ecc <z_nrf_clock_control_lf_on+0xf0>)
   44e00:	604b      	str	r3, [r1, #4]
   44e02:	60cb      	str	r3, [r1, #12]
   44e04:	608a      	str	r2, [r1, #8]
   44e06:	f004 ff17 	bl	49c38 <onoff_request>
	switch (start_mode) {
   44e0a:	1e7b      	subs	r3, r7, #1
   44e0c:	2b01      	cmp	r3, #1
   44e0e:	d82b      	bhi.n	44e68 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   44e10:	2f01      	cmp	r7, #1
   44e12:	d107      	bne.n	44e24 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   44e14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   44e18:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   44e1c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   44e20:	2b01      	cmp	r3, #1
   44e22:	d021      	beq.n	44e68 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   44e24:	f00b fdd9 	bl	509da <k_is_in_isr>
   44e28:	4605      	mov	r5, r0
   44e2a:	b9f8      	cbnz	r0, 44e6c <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   44e2c:	4b28      	ldr	r3, [pc, #160]	; (44ed0 <z_nrf_clock_control_lf_on+0xf4>)
   44e2e:	781b      	ldrb	r3, [r3, #0]
   44e30:	b1e3      	cbz	r3, 44e6c <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   44e32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   44e36:	2202      	movs	r2, #2
   44e38:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   44e3c:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   44e3e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 44ed4 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   44e42:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   44e46:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   44e4a:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   44e4e:	03d2      	lsls	r2, r2, #15
   44e50:	d516      	bpl.n	44e80 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   44e52:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   44e56:	2b01      	cmp	r3, #1
   44e58:	d001      	beq.n	44e5e <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   44e5a:	2f01      	cmp	r7, #1
   44e5c:	d110      	bne.n	44e80 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   44e5e:	b35d      	cbz	r5, 44eb8 <z_nrf_clock_control_lf_on+0xdc>
   44e60:	f386 8811 	msr	BASEPRI, r6
   44e64:	f3bf 8f6f 	isb	sy
}
   44e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   44e6c:	f04f 0320 	mov.w	r3, #32
   44e70:	f3ef 8611 	mrs	r6, BASEPRI
   44e74:	f383 8812 	msr	BASEPRI_MAX, r3
   44e78:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   44e7c:	2501      	movs	r5, #1
   44e7e:	e7de      	b.n	44e3e <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   44e80:	b1ad      	cbz	r5, 44eae <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   44e82:	4630      	mov	r0, r6
   44e84:	f7e7 feec 	bl	2cc60 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   44e88:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   44e8c:	2b00      	cmp	r3, #0
   44e8e:	d1da      	bne.n	44e46 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   44e90:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   44e94:	2a00      	cmp	r2, #0
   44e96:	d0d6      	beq.n	44e46 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   44e98:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   44e9c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   44ea0:	2301      	movs	r3, #1
   44ea2:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   44ea6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   44eaa:	60a3      	str	r3, [r4, #8]
}
   44eac:	e7cb      	b.n	44e46 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   44eae:	2100      	movs	r1, #0
   44eb0:	2021      	movs	r0, #33	; 0x21
   44eb2:	f003 fe31 	bl	48b18 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   44eb6:	e7e7      	b.n	44e88 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   44eb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   44ebc:	2202      	movs	r2, #2
   44ebe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   44ec2:	e7d1      	b.n	44e68 <z_nrf_clock_control_lf_on+0x8c>
   44ec4:	20006d20 	.word	0x20006d20
   44ec8:	20006d10 	.word	0x20006d10
   44ecc:	20006d40 	.word	0x20006d40
   44ed0:	2000742f 	.word	0x2000742f
   44ed4:	e000e100 	.word	0xe000e100

00044ed8 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   44ed8:	b530      	push	{r4, r5, lr}
	return port->config;
   44eda:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   44edc:	7b05      	ldrb	r5, [r0, #12]
   44ede:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   44ee2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
{
   44ee6:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   44ee8:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   44eec:	d104      	bne.n	44ef8 <gpio_nrfx_pin_interrupt_configure+0x20>
		nrfx_gpiote_trigger_disable(abs_pin);
   44eee:	4620      	mov	r0, r4
   44ef0:	f001 fad6 	bl	464a0 <nrfx_gpiote_trigger_disable>

		return 0;
   44ef4:	2000      	movs	r0, #0
   44ef6:	e04a      	b.n	44f8e <gpio_nrfx_pin_interrupt_configure+0xb6>
	}

	nrfx_gpiote_trigger_config_t trigger_config = {
   44ef8:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   44efa:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   44efe:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   44f02:	d114      	bne.n	44f2e <gpio_nrfx_pin_interrupt_configure+0x56>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   44f04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
	nrfx_gpiote_trigger_config_t trigger_config = {
   44f08:	bf0c      	ite	eq
   44f0a:	2304      	moveq	r3, #4
   44f0c:	2305      	movne	r3, #5
   44f0e:	f88d 3008 	strb.w	r3, [sp, #8]
		}

		trigger_config.p_in_channel = &ch;
	}

	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   44f12:	2300      	movs	r3, #0
   44f14:	4619      	mov	r1, r3
   44f16:	aa02      	add	r2, sp, #8
   44f18:	4620      	mov	r0, r4
   44f1a:	f001 f901 	bl	46120 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   44f1e:	4b20      	ldr	r3, [pc, #128]	; (44fa0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   44f20:	4298      	cmp	r0, r3
   44f22:	d13a      	bne.n	44f9a <gpio_nrfx_pin_interrupt_configure+0xc2>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);
   44f24:	2101      	movs	r1, #1
   44f26:	4620      	mov	r0, r4
   44f28:	f001 fa72 	bl	46410 <nrfx_gpiote_trigger_enable>

	return 0;
   44f2c:	e7e2      	b.n	44ef4 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   44f2e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   44f32:	d02e      	beq.n	44f92 <gpio_nrfx_pin_interrupt_configure+0xba>
   44f34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   44f38:	bf14      	ite	ne
   44f3a:	2301      	movne	r3, #1
   44f3c:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   44f3e:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   44f42:	6883      	ldr	r3, [r0, #8]
   44f44:	40cb      	lsrs	r3, r1
   44f46:	07d9      	lsls	r1, r3, #31
   44f48:	d4e3      	bmi.n	44f12 <gpio_nrfx_pin_interrupt_configure+0x3a>
   44f4a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   44f4e:	d1e0      	bne.n	44f12 <gpio_nrfx_pin_interrupt_configure+0x3a>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   44f50:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
   44f52:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   44f54:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
   44f58:	4a12      	ldr	r2, [pc, #72]	; (44fa4 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   44f5a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   44f5e:	bf18      	it	ne
   44f60:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   44f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   44f68:	07db      	lsls	r3, r3, #31
   44f6a:	d4d2      	bmi.n	44f12 <gpio_nrfx_pin_interrupt_configure+0x3a>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   44f6c:	f10d 0507 	add.w	r5, sp, #7
   44f70:	4629      	mov	r1, r5
   44f72:	4620      	mov	r0, r4
   44f74:	f001 f9f8 	bl	46368 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   44f78:	4b0b      	ldr	r3, [pc, #44]	; (44fa8 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   44f7a:	4298      	cmp	r0, r3
   44f7c:	d10b      	bne.n	44f96 <gpio_nrfx_pin_interrupt_configure+0xbe>
			err = nrfx_gpiote_channel_alloc(&ch);
   44f7e:	4628      	mov	r0, r5
   44f80:	f001 fa40 	bl	46404 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   44f84:	4b06      	ldr	r3, [pc, #24]	; (44fa0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   44f86:	4298      	cmp	r0, r3
   44f88:	d005      	beq.n	44f96 <gpio_nrfx_pin_interrupt_configure+0xbe>
				return -ENOMEM;
   44f8a:	f06f 000b 	mvn.w	r0, #11
}
   44f8e:	b005      	add	sp, #20
   44f90:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   44f92:	2303      	movs	r3, #3
   44f94:	e7d3      	b.n	44f3e <gpio_nrfx_pin_interrupt_configure+0x66>
		trigger_config.p_in_channel = &ch;
   44f96:	9503      	str	r5, [sp, #12]
   44f98:	e7bb      	b.n	44f12 <gpio_nrfx_pin_interrupt_configure+0x3a>
		return -EIO;
   44f9a:	f06f 0004 	mvn.w	r0, #4
   44f9e:	e7f6      	b.n	44f8e <gpio_nrfx_pin_interrupt_configure+0xb6>
   44fa0:	0bad0000 	.word	0x0bad0000
   44fa4:	50000300 	.word	0x50000300
   44fa8:	0bad0004 	.word	0x0bad0004

00044fac <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   44fac:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   44fae:	f001 fa19 	bl	463e4 <nrfx_gpiote_is_init>
   44fb2:	4604      	mov	r4, r0
   44fb4:	b968      	cbnz	r0, 44fd2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   44fb6:	f001 f9ed 	bl	46394 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   44fba:	4b08      	ldr	r3, [pc, #32]	; (44fdc <gpio_nrfx_init+0x30>)
   44fbc:	4298      	cmp	r0, r3
   44fbe:	d10a      	bne.n	44fd6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   44fc0:	4807      	ldr	r0, [pc, #28]	; (44fe0 <gpio_nrfx_init+0x34>)
   44fc2:	4621      	mov	r1, r4
   44fc4:	f001 f9ca 	bl	4635c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   44fc8:	4622      	mov	r2, r4
   44fca:	2105      	movs	r1, #5
   44fcc:	2006      	movs	r0, #6
   44fce:	f7e7 fe81 	bl	2ccd4 <z_arm_irq_priority_set>
		return 0;
   44fd2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   44fd4:	bd10      	pop	{r4, pc}
		return -EIO;
   44fd6:	f06f 0004 	mvn.w	r0, #4
   44fda:	e7fb      	b.n	44fd4 <gpio_nrfx_init+0x28>
   44fdc:	0bad0000 	.word	0x0bad0000
   44fe0:	00044fe5 	.word	0x00044fe5

00044fe4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   44fe4:	0942      	lsrs	r2, r0, #5
{
   44fe6:	b570      	push	{r4, r5, r6, lr}
   44fe8:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   44fea:	d002      	beq.n	44ff2 <nrfx_gpio_handler+0xe>
   44fec:	2a01      	cmp	r2, #1
   44fee:	d017      	beq.n	45020 <nrfx_gpio_handler+0x3c>
}
   44ff0:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   44ff2:	4e0d      	ldr	r6, [pc, #52]	; (45028 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   44ff4:	6932      	ldr	r2, [r6, #16]
   44ff6:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   44ff8:	2900      	cmp	r1, #0
   44ffa:	d0f9      	beq.n	44ff0 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   44ffc:	f003 031f 	and.w	r3, r3, #31
   45000:	2501      	movs	r5, #1
	return node->next;
   45002:	680c      	ldr	r4, [r1, #0]
   45004:	409d      	lsls	r5, r3
   45006:	2900      	cmp	r1, #0
   45008:	d0f2      	beq.n	44ff0 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   4500a:	688a      	ldr	r2, [r1, #8]
   4500c:	402a      	ands	r2, r5
   4500e:	d002      	beq.n	45016 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   45010:	684b      	ldr	r3, [r1, #4]
   45012:	4630      	mov	r0, r6
   45014:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   45016:	b12c      	cbz	r4, 45024 <nrfx_gpio_handler+0x40>
   45018:	6823      	ldr	r3, [r4, #0]
   4501a:	4621      	mov	r1, r4
   4501c:	461c      	mov	r4, r3
   4501e:	e7f2      	b.n	45006 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   45020:	4e02      	ldr	r6, [pc, #8]	; (4502c <nrfx_gpio_handler+0x48>)
   45022:	e7e7      	b.n	44ff4 <nrfx_gpio_handler+0x10>
   45024:	4623      	mov	r3, r4
   45026:	e7f8      	b.n	4501a <nrfx_gpio_handler+0x36>
   45028:	00051560 	.word	0x00051560
   4502c:	00051548 	.word	0x00051548

00045030 <gpio_nrfx_pin_configure>:
{
   45030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   45034:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   45036:	7b3b      	ldrb	r3, [r7, #12]
   45038:	f001 051f 	and.w	r5, r1, #31
{
   4503c:	b085      	sub	sp, #20
   4503e:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   45040:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   45044:	4614      	mov	r4, r2
   45046:	b9d2      	cbnz	r2, 4507e <gpio_nrfx_pin_configure+0x4e>
	err = nrfx_gpiote_channel_get(pin, &ch);
   45048:	a902      	add	r1, sp, #8
   4504a:	4628      	mov	r0, r5
   4504c:	f001 f98c 	bl	46368 <nrfx_gpiote_channel_get>
   45050:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   45052:	4628      	mov	r0, r5
   45054:	f001 fa4c 	bl	464f0 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   45058:	4b44      	ldr	r3, [pc, #272]	; (4516c <gpio_nrfx_pin_configure+0x13c>)
   4505a:	4298      	cmp	r0, r3
   4505c:	d004      	beq.n	45068 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   4505e:	f06f 0004 	mvn.w	r0, #4
}
   45062:	b005      	add	sp, #20
   45064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   45068:	4284      	cmp	r4, r0
   4506a:	d001      	beq.n	45070 <gpio_nrfx_pin_configure+0x40>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   4506c:	2000      	movs	r0, #0
   4506e:	e7f8      	b.n	45062 <gpio_nrfx_pin_configure+0x32>
		err = nrfx_gpiote_channel_free(ch);
   45070:	f89d 0008 	ldrb.w	r0, [sp, #8]
   45074:	f001 f9c0 	bl	463f8 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   45078:	42a0      	cmp	r0, r4
   4507a:	d0f7      	beq.n	4506c <gpio_nrfx_pin_configure+0x3c>
   4507c:	e7ef      	b.n	4505e <gpio_nrfx_pin_configure+0x2e>
	nrfx_gpiote_trigger_config_t trigger_config = {
   4507e:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   45082:	f10d 0103 	add.w	r1, sp, #3
   45086:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   45088:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   4508c:	f001 f96c 	bl	46368 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   45090:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   45092:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   45094:	aa02      	add	r2, sp, #8
   45096:	4649      	mov	r1, r9
   45098:	4628      	mov	r0, r5
   4509a:	f001 f841 	bl	46120 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   4509e:	4b33      	ldr	r3, [pc, #204]	; (4516c <gpio_nrfx_pin_configure+0x13c>)
   450a0:	4298      	cmp	r0, r3
   450a2:	d002      	beq.n	450aa <gpio_nrfx_pin_configure+0x7a>
		return NRF_GPIO_PIN_PULLUP;
   450a4:	f06f 0015 	mvn.w	r0, #21
   450a8:	e7db      	b.n	45062 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   450aa:	4580      	cmp	r8, r0
   450ac:	d103      	bne.n	450b6 <gpio_nrfx_pin_configure+0x86>
		err = nrfx_gpiote_channel_free(ch);
   450ae:	f89d 0003 	ldrb.w	r0, [sp, #3]
   450b2:	f001 f9a1 	bl	463f8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   450b6:	05a3      	lsls	r3, r4, #22
   450b8:	d549      	bpl.n	4514e <gpio_nrfx_pin_configure+0x11e>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   450ba:	4b2d      	ldr	r3, [pc, #180]	; (45170 <gpio_nrfx_pin_configure+0x140>)
   450bc:	4a2d      	ldr	r2, [pc, #180]	; (45174 <gpio_nrfx_pin_configure+0x144>)
   450be:	4023      	ands	r3, r4
   450c0:	4293      	cmp	r3, r2
   450c2:	d018      	beq.n	450f6 <gpio_nrfx_pin_configure+0xc6>
   450c4:	d80c      	bhi.n	450e0 <gpio_nrfx_pin_configure+0xb0>
   450c6:	2b06      	cmp	r3, #6
   450c8:	d016      	beq.n	450f8 <gpio_nrfx_pin_configure+0xc8>
   450ca:	d804      	bhi.n	450d6 <gpio_nrfx_pin_configure+0xa6>
   450cc:	b1a3      	cbz	r3, 450f8 <gpio_nrfx_pin_configure+0xc8>
   450ce:	2b02      	cmp	r3, #2
   450d0:	d1e8      	bne.n	450a4 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0S1;
   450d2:	2304      	movs	r3, #4
   450d4:	e010      	b.n	450f8 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   450d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   450da:	d1e3      	bne.n	450a4 <gpio_nrfx_pin_configure+0x74>
   450dc:	2301      	movs	r3, #1
   450de:	e00b      	b.n	450f8 <gpio_nrfx_pin_configure+0xc8>
   450e0:	4a25      	ldr	r2, [pc, #148]	; (45178 <gpio_nrfx_pin_configure+0x148>)
   450e2:	4293      	cmp	r3, r2
   450e4:	d027      	beq.n	45136 <gpio_nrfx_pin_configure+0x106>
   450e6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   450ea:	d026      	beq.n	4513a <gpio_nrfx_pin_configure+0x10a>
   450ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   450f0:	d1d8      	bne.n	450a4 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_S0H1;
   450f2:	2302      	movs	r3, #2
   450f4:	e000      	b.n	450f8 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0D1;
   450f6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   450f8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   450fc:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   45100:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   45104:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   45106:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   4510a:	bf54      	ite	pl
   4510c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   45110:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   45112:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   45114:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   45118:	d511      	bpl.n	4513e <gpio_nrfx_pin_configure+0x10e>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   4511a:	687a      	ldr	r2, [r7, #4]
   4511c:	2301      	movs	r3, #1
   4511e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   45120:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   45124:	2200      	movs	r2, #0
   45126:	a901      	add	r1, sp, #4
   45128:	4628      	mov	r0, r5
   4512a:	f001 f8a7 	bl	4627c <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   4512e:	4b0f      	ldr	r3, [pc, #60]	; (4516c <gpio_nrfx_pin_configure+0x13c>)
   45130:	4298      	cmp	r0, r3
   45132:	d09b      	beq.n	4506c <gpio_nrfx_pin_configure+0x3c>
   45134:	e7b6      	b.n	450a4 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0H1;
   45136:	2305      	movs	r3, #5
   45138:	e7de      	b.n	450f8 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
   4513a:	2303      	movs	r3, #3
   4513c:	e7dc      	b.n	450f8 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   4513e:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   45140:	bf41      	itttt	mi
   45142:	2301      	movmi	r3, #1
   45144:	687a      	ldrmi	r2, [r7, #4]
   45146:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   45148:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   4514c:	e7ea      	b.n	45124 <gpio_nrfx_pin_configure+0xf4>
	if (flags & GPIO_PULL_UP) {
   4514e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   45150:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   45154:	bf54      	ite	pl
   45156:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   4515a:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   4515c:	461a      	mov	r2, r3
   4515e:	a901      	add	r1, sp, #4
   45160:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   45162:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   45166:	f000 ffdb 	bl	46120 <nrfx_gpiote_input_configure>
   4516a:	e7e0      	b.n	4512e <gpio_nrfx_pin_configure+0xfe>
   4516c:	0bad0000 	.word	0x0bad0000
   45170:	00f00006 	.word	0x00f00006
   45174:	00100006 	.word	0x00100006
   45178:	00400002 	.word	0x00400002

0004517c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   4517c:	4b02      	ldr	r3, [pc, #8]	; (45188 <flash_nrf_pages_layout+0xc>)
   4517e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   45180:	2301      	movs	r3, #1
   45182:	6013      	str	r3, [r2, #0]
}
   45184:	4770      	bx	lr
   45186:	bf00      	nop
   45188:	20006d90 	.word	0x20006d90

0004518c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   4518c:	4800      	ldr	r0, [pc, #0]	; (45190 <flash_nrf_get_parameters+0x4>)
   4518e:	4770      	bx	lr
   45190:	00053b64 	.word	0x00053b64

00045194 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   45194:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   45196:	2201      	movs	r2, #1
   45198:	4611      	mov	r1, r2
   4519a:	4807      	ldr	r0, [pc, #28]	; (451b8 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   4519c:	4c07      	ldr	r4, [pc, #28]	; (451bc <nrf_flash_init+0x28>)
   4519e:	f00b fd0f 	bl	50bc0 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   451a2:	f000 f9c1 	bl	45528 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   451a6:	f00b f8cd 	bl	50344 <nrfx_nvmc_flash_page_count_get>
   451aa:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   451ac:	f00b f8c6 	bl	5033c <nrfx_nvmc_flash_page_size_get>
   451b0:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   451b2:	2000      	movs	r0, #0
   451b4:	bd10      	pop	{r4, pc}
   451b6:	bf00      	nop
   451b8:	20006d98 	.word	0x20006d98
   451bc:	20006d90 	.word	0x20006d90

000451c0 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   451c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   451c4:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   451c8:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   451cc:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   451d0:	f023 031f 	bic.w	r3, r3, #31
   451d4:	430b      	orrs	r3, r1
    pofcon |=
   451d6:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   451da:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   451de:	4b02      	ldr	r3, [pc, #8]	; (451e8 <restore_pofwarn.part.0+0x28>)
   451e0:	2200      	movs	r2, #0
   451e2:	701a      	strb	r2, [r3, #0]
	}
}
   451e4:	4770      	bx	lr
   451e6:	bf00      	nop
   451e8:	20007428 	.word	0x20007428

000451ec <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   451ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   451f0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   451f4:	2b08      	cmp	r3, #8
   451f6:	d120      	bne.n	4523a <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   451f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   451fc:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   45200:	07cb      	lsls	r3, r1, #31
   45202:	d51a      	bpl.n	4523a <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   45204:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   45208:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   4520c:	f023 031f 	bic.w	r3, r3, #31
    pofcon |=
   45210:	430b      	orrs	r3, r1
    p_reg->POFCON = pofcon;
   45212:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   45216:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   4521a:	b15b      	cbz	r3, 45234 <suspend_pofwarn+0x48>
    uint32_t pofcon = p_reg->POFCON;
   4521c:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   45220:	f023 031f 	bic.w	r3, r3, #31
   45224:	430b      	orrs	r3, r1
    pofcon |=
   45226:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   4522a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   4522e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   45232:	4770      	bx	lr
		pofcon_enabled = enabled;
   45234:	4b02      	ldr	r3, [pc, #8]	; (45240 <suspend_pofwarn+0x54>)
   45236:	2201      	movs	r2, #1
   45238:	701a      	strb	r2, [r3, #0]
		return 0;
   4523a:	2000      	movs	r0, #0
}
   4523c:	4770      	bx	lr
   4523e:	bf00      	nop
   45240:	20007428 	.word	0x20007428

00045244 <erase_op>:
{
   45244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45246:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   45248:	f00b f878 	bl	5033c <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   4524c:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   4524e:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   45250:	b10b      	cbz	r3, 45256 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   45252:	f000 f97b 	bl	4554c <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   45256:	4f13      	ldr	r7, [pc, #76]	; (452a4 <erase_op+0x60>)
{
   45258:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   4525a:	f7ff ffc7 	bl	451ec <suspend_pofwarn>
   4525e:	b9e8      	cbnz	r0, 4529c <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   45260:	6860      	ldr	r0, [r4, #4]
   45262:	f001 fa53 	bl	4670c <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   45266:	68a3      	ldr	r3, [r4, #8]
   45268:	1b5b      	subs	r3, r3, r5
   4526a:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   4526c:	6863      	ldr	r3, [r4, #4]
   4526e:	442b      	add	r3, r5
   45270:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   45272:	783b      	ldrb	r3, [r7, #0]
   45274:	b10b      	cbz	r3, 4527a <erase_op+0x36>
   45276:	f7ff ffa3 	bl	451c0 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   4527a:	7b23      	ldrb	r3, [r4, #12]
		i++;
   4527c:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   4527e:	b93b      	cbnz	r3, 45290 <erase_op+0x4c>
	} while (e_ctx->len > 0);
   45280:	68a3      	ldr	r3, [r4, #8]
   45282:	2b00      	cmp	r3, #0
   45284:	d1e9      	bne.n	4525a <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   45286:	68a0      	ldr	r0, [r4, #8]
   45288:	3800      	subs	r0, #0
   4528a:	bf18      	it	ne
   4528c:	2001      	movne	r0, #1
}
   4528e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   45290:	4630      	mov	r0, r6
   45292:	f7e3 fd31 	bl	28cf8 <nrf_flash_sync_check_time_limit>
   45296:	2800      	cmp	r0, #0
   45298:	d0f2      	beq.n	45280 <erase_op+0x3c>
   4529a:	e7f4      	b.n	45286 <erase_op+0x42>
			return -ECANCELED;
   4529c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   452a0:	e7f5      	b.n	4528e <erase_op+0x4a>
   452a2:	bf00      	nop
   452a4:	20007428 	.word	0x20007428

000452a8 <flash_nrf_erase>:
{
   452a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   452aa:	b087      	sub	sp, #28
   452ac:	460e      	mov	r6, r1
   452ae:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   452b0:	f00b f844 	bl	5033c <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   452b4:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   452b6:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   452b8:	4630      	mov	r0, r6
   452ba:	f00a ff21 	bl	50100 <is_regular_addr_valid>
   452be:	b3c8      	cbz	r0, 45334 <flash_nrf_erase+0x8c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   452c0:	fbb6 f3f7 	udiv	r3, r6, r7
   452c4:	fb07 6313 	mls	r3, r7, r3, r6
   452c8:	bba3      	cbnz	r3, 45334 <flash_nrf_erase+0x8c>
   452ca:	fbb5 f4f7 	udiv	r4, r5, r7
   452ce:	fb07 5414 	mls	r4, r7, r4, r5
   452d2:	bb7c      	cbnz	r4, 45334 <flash_nrf_erase+0x8c>
		if (!n_pages) {
   452d4:	42bd      	cmp	r5, r7
   452d6:	d322      	bcc.n	4531e <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   452d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   452dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   452e0:	4816      	ldr	r0, [pc, #88]	; (4533c <flash_nrf_erase+0x94>)
   452e2:	f002 ff4f 	bl	48184 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   452e6:	f00a ff30 	bl	5014a <nrf_flash_sync_is_required>
   452ea:	ab02      	add	r3, sp, #8
   452ec:	4601      	mov	r1, r0
	struct flash_context context = {
   452ee:	2210      	movs	r2, #16
	if (nrf_flash_sync_is_required()) {
   452f0:	b1c0      	cbz	r0, 45324 <flash_nrf_erase+0x7c>
	struct flash_context context = {
   452f2:	4621      	mov	r1, r4
   452f4:	4618      	mov	r0, r3
   452f6:	f006 fd41 	bl	4bd7c <memset>
   452fa:	2201      	movs	r2, #1
   452fc:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   45300:	4a0f      	ldr	r2, [pc, #60]	; (45340 <flash_nrf_erase+0x98>)
   45302:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   45306:	480f      	ldr	r0, [pc, #60]	; (45344 <flash_nrf_erase+0x9c>)
	struct flash_context context = {
   45308:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   4530c:	f000 f916 	bl	4553c <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   45310:	4668      	mov	r0, sp
   45312:	f7e3 fc75 	bl	28c00 <nrf_flash_sync_exe>
	return	erase_op(&context);
   45316:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   45318:	4808      	ldr	r0, [pc, #32]	; (4533c <flash_nrf_erase+0x94>)
   4531a:	f002 ff0d 	bl	48138 <z_impl_k_sem_give>
}
   4531e:	4620      	mov	r0, r4
   45320:	b007      	add	sp, #28
   45322:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   45324:	4618      	mov	r0, r3
   45326:	f006 fd29 	bl	4bd7c <memset>
   4532a:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   4532e:	f7ff ff89 	bl	45244 <erase_op>
   45332:	e7f0      	b.n	45316 <flash_nrf_erase+0x6e>
			return -EINVAL;
   45334:	f06f 0415 	mvn.w	r4, #21
   45338:	e7f1      	b.n	4531e <flash_nrf_erase+0x76>
   4533a:	bf00      	nop
   4533c:	20006d98 	.word	0x20006d98
   45340:	00045245 	.word	0x00045245
   45344:	00015e64 	.word	0x00015e64

00045348 <write_op>:
{
   45348:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   4534a:	7b03      	ldrb	r3, [r0, #12]
{
   4534c:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   4534e:	b10b      	cbz	r3, 45354 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   45350:	f000 f8fc 	bl	4554c <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   45354:	4e19      	ldr	r6, [pc, #100]	; (453bc <write_op+0x74>)
{
   45356:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   45358:	68a3      	ldr	r3, [r4, #8]
   4535a:	2b03      	cmp	r3, #3
   4535c:	d806      	bhi.n	4536c <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   4535e:	4a18      	ldr	r2, [pc, #96]	; (453c0 <write_op+0x78>)
   45360:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   45364:	07db      	lsls	r3, r3, #31
   45366:	d5fb      	bpl.n	45360 <write_op+0x18>
	return FLASH_OP_DONE;
   45368:	2000      	movs	r0, #0
}
   4536a:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   4536c:	f7ff ff3e 	bl	451ec <suspend_pofwarn>
   45370:	bb08      	cbnz	r0, 453b6 <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   45372:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   45374:	6860      	ldr	r0, [r4, #4]
   45376:	6819      	ldr	r1, [r3, #0]
   45378:	f001 f9e8 	bl	4674c <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   4537c:	7833      	ldrb	r3, [r6, #0]
   4537e:	b10b      	cbz	r3, 45384 <write_op+0x3c>
   45380:	f7ff ff1e 	bl	451c0 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   45384:	6863      	ldr	r3, [r4, #4]
   45386:	3304      	adds	r3, #4
   45388:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   4538a:	6823      	ldr	r3, [r4, #0]
   4538c:	3304      	adds	r3, #4
   4538e:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   45390:	68a3      	ldr	r3, [r4, #8]
   45392:	3b04      	subs	r3, #4
   45394:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   45396:	7b23      	ldrb	r3, [r4, #12]
		i++;
   45398:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   4539a:	2b00      	cmp	r3, #0
   4539c:	d0dc      	beq.n	45358 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   4539e:	4628      	mov	r0, r5
   453a0:	f7e3 fcaa 	bl	28cf8 <nrf_flash_sync_check_time_limit>
   453a4:	2800      	cmp	r0, #0
   453a6:	d0d7      	beq.n	45358 <write_op+0x10>
   453a8:	4a05      	ldr	r2, [pc, #20]	; (453c0 <write_op+0x78>)
   453aa:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   453ae:	07d9      	lsls	r1, r3, #31
   453b0:	d5fb      	bpl.n	453aa <write_op+0x62>
				return FLASH_OP_ONGOING;
   453b2:	2001      	movs	r0, #1
   453b4:	e7d9      	b.n	4536a <write_op+0x22>
			return -ECANCELED;
   453b6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   453ba:	e7d6      	b.n	4536a <write_op+0x22>
   453bc:	20007428 	.word	0x20007428
   453c0:	4001e000 	.word	0x4001e000

000453c4 <flash_nrf_write>:
{
   453c4:	b570      	push	{r4, r5, r6, lr}
   453c6:	460d      	mov	r5, r1
   453c8:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   453ca:	4619      	mov	r1, r3
   453cc:	4628      	mov	r0, r5
{
   453ce:	4616      	mov	r6, r2
   453d0:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   453d2:	f00a fe95 	bl	50100 <is_regular_addr_valid>
   453d6:	b360      	cbz	r0, 45432 <flash_nrf_write+0x6e>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   453d8:	ea45 0304 	orr.w	r3, r5, r4
   453dc:	079b      	lsls	r3, r3, #30
   453de:	d128      	bne.n	45432 <flash_nrf_write+0x6e>
	if (!len) {
   453e0:	b1fc      	cbz	r4, 45422 <flash_nrf_write+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   453e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   453e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   453ea:	4813      	ldr	r0, [pc, #76]	; (45438 <flash_nrf_write+0x74>)
   453ec:	f002 feca 	bl	48184 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   453f0:	f00a feab 	bl	5014a <nrf_flash_sync_is_required>
   453f4:	4603      	mov	r3, r0
	struct flash_context context = {
   453f6:	e9cd 6502 	strd	r6, r5, [sp, #8]
   453fa:	a802      	add	r0, sp, #8
   453fc:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   453fe:	b19b      	cbz	r3, 45428 <flash_nrf_write+0x64>
	struct flash_context context = {
   45400:	2301      	movs	r3, #1
   45402:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   45406:	4b0d      	ldr	r3, [pc, #52]	; (4543c <flash_nrf_write+0x78>)
   45408:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   4540c:	f641 504c 	movw	r0, #7500	; 0x1d4c
   45410:	f000 f894 	bl	4553c <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   45414:	4668      	mov	r0, sp
   45416:	f7e3 fbf3 	bl	28c00 <nrf_flash_sync_exe>
	return write_op(&context);
   4541a:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   4541c:	4806      	ldr	r0, [pc, #24]	; (45438 <flash_nrf_write+0x74>)
   4541e:	f002 fe8b 	bl	48138 <z_impl_k_sem_give>
}
   45422:	4620      	mov	r0, r4
   45424:	b006      	add	sp, #24
   45426:	bd70      	pop	{r4, r5, r6, pc}
	struct flash_context context = {
   45428:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   4542c:	f7ff ff8c 	bl	45348 <write_op>
   45430:	e7f3      	b.n	4541a <flash_nrf_write+0x56>
		return -EINVAL;
   45432:	f06f 0415 	mvn.w	r4, #21
   45436:	e7f4      	b.n	45422 <flash_nrf_write+0x5e>
   45438:	20006d98 	.word	0x20006d98
   4543c:	00045349 	.word	0x00045349

00045440 <time_slot_callback_work>:
{
   45440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   45442:	9b07      	ldr	r3, [sp, #28]
	rc = op_desc->handler(op_desc->context);
   45444:	e9d3 2000 	ldrd	r2, r0, [r3]
   45448:	4790      	blx	r2
	if (rc != FLASH_OP_ONGOING) {
   4544a:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   4544c:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   4544e:	d013      	beq.n	45478 <time_slot_callback_work+0x38>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   45450:	f10d 010f 	add.w	r1, sp, #15
   45454:	f10d 000e 	add.w	r0, sp, #14
   45458:	f7f2 fc3c 	bl	37cd4 <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   4545c:	2300      	movs	r3, #0
   4545e:	9300      	str	r3, [sp, #0]
   45460:	4619      	mov	r1, r3
   45462:	f89d 200f 	ldrb.w	r2, [sp, #15]
   45466:	f89d 000e 	ldrb.w	r0, [sp, #14]
   4546a:	f7f0 f8ed 	bl	35648 <ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   4546e:	4b03      	ldr	r3, [pc, #12]	; (4547c <time_slot_callback_work+0x3c>)
   45470:	60dc      	str	r4, [r3, #12]
   45472:	4803      	ldr	r0, [pc, #12]	; (45480 <time_slot_callback_work+0x40>)
   45474:	f002 fe60 	bl	48138 <z_impl_k_sem_give>
}
   45478:	b004      	add	sp, #16
   4547a:	bd10      	pop	{r4, pc}
   4547c:	20006dc8 	.word	0x20006dc8
   45480:	20006db0 	.word	0x20006db0

00045484 <time_slot_delay>:
{
   45484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   45488:	b08d      	sub	sp, #52	; 0x34
   4548a:	4606      	mov	r6, r0
   4548c:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   4548e:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   45492:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   45496:	4690      	mov	r8, r2
   45498:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   4549a:	f7f2 fc1b 	bl	37cd4 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index, /* Radio instance ticker */
   4549e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   454a2:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   454a6:	9700      	str	r7, [sp, #0]
   454a8:	2400      	movs	r4, #0
   454aa:	3501      	adds	r5, #1
   454ac:	4633      	mov	r3, r6
   454ae:	e9cd 4407 	strd	r4, r4, [sp, #28]
   454b2:	e9cd 8905 	strd	r8, r9, [sp, #20]
   454b6:	e9cd 4403 	strd	r4, r4, [sp, #12]
   454ba:	e9cd 4401 	strd	r4, r4, [sp, #4]
   454be:	b2ea      	uxtb	r2, r5
   454c0:	2101      	movs	r1, #1
   454c2:	f7f0 f835 	bl	35530 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   454c6:	f030 0302 	bics.w	r3, r0, #2
   454ca:	d00d      	beq.n	454e8 <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   454cc:	4b08      	ldr	r3, [pc, #32]	; (454f0 <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   454ce:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   454d2:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   454d4:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   454d8:	9400      	str	r4, [sp, #0]
   454da:	4623      	mov	r3, r4
   454dc:	4621      	mov	r1, r4
   454de:	f7f0 f8b3 	bl	35648 <ticker_stop>
   454e2:	4804      	ldr	r0, [pc, #16]	; (454f4 <time_slot_delay+0x70>)
   454e4:	f002 fe28 	bl	48138 <z_impl_k_sem_give>
}
   454e8:	b00d      	add	sp, #52	; 0x34
   454ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   454ee:	bf00      	nop
   454f0:	20006dc8 	.word	0x20006dc8
   454f4:	20006db0 	.word	0x20006db0

000454f8 <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   454f8:	9b01      	ldr	r3, [sp, #4]
   454fa:	4a02      	ldr	r2, [pc, #8]	; (45504 <time_slot_callback_prepare+0xc>)
   454fc:	2131      	movs	r1, #49	; 0x31
   454fe:	f7ff bfc1 	b.w	45484 <time_slot_delay>
   45502:	bf00      	nop
   45504:	00045509 	.word	0x00045509

00045508 <time_slot_callback_abort>:
{
   45508:	b570      	push	{r4, r5, r6, lr}
   4550a:	9d05      	ldr	r5, [sp, #20]
   4550c:	4604      	mov	r4, r0
	ll_radio_state_abort();
   4550e:	f7f2 fbe7 	bl	37ce0 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   45512:	462b      	mov	r3, r5
   45514:	4620      	mov	r0, r4
   45516:	4a03      	ldr	r2, [pc, #12]	; (45524 <time_slot_callback_abort+0x1c>)
}
   45518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   4551c:	2106      	movs	r1, #6
   4551e:	f7ff bfb1 	b.w	45484 <time_slot_delay>
   45522:	bf00      	nop
   45524:	00045441 	.word	0x00045441

00045528 <nrf_flash_sync_init>:
{
   45528:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   4552a:	2201      	movs	r2, #1
   4552c:	2100      	movs	r1, #0
   4552e:	4802      	ldr	r0, [pc, #8]	; (45538 <nrf_flash_sync_init+0x10>)
   45530:	f00b fb46 	bl	50bc0 <z_impl_k_sem_init>
}
   45534:	2000      	movs	r0, #0
   45536:	bd08      	pop	{r3, pc}
   45538:	20006db0 	.word	0x20006db0

0004553c <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   4553c:	4b02      	ldr	r3, [pc, #8]	; (45548 <nrf_flash_sync_set_context+0xc>)
   4553e:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   45542:	e9c3 2000 	strd	r2, r0, [r3]
}
   45546:	4770      	bx	lr
   45548:	20006dc8 	.word	0x20006dc8

0004554c <nrf_flash_sync_get_timestamp_begin>:
{
   4554c:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   4554e:	f7f0 f91b 	bl	35788 <ticker_ticks_now_get>
   45552:	4b01      	ldr	r3, [pc, #4]	; (45558 <nrf_flash_sync_get_timestamp_begin+0xc>)
   45554:	6098      	str	r0, [r3, #8]
}
   45556:	bd08      	pop	{r3, pc}
   45558:	20006dc8 	.word	0x20006dc8

0004555c <random_byte_get>:
   4555c:	f04f 0320 	mov.w	r3, #32
   45560:	f3ef 8211 	mrs	r2, BASEPRI
   45564:	f383 8812 	msr	BASEPRI_MAX, r3
   45568:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   4556c:	4b09      	ldr	r3, [pc, #36]	; (45594 <random_byte_get+0x38>)
   4556e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   45572:	b161      	cbz	r1, 4558e <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   45574:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   45576:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   4557a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   4557e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   45582:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   45584:	f382 8811 	msr	BASEPRI, r2
   45588:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   4558c:	4770      	bx	lr
	int retval = -EAGAIN;
   4558e:	f06f 000a 	mvn.w	r0, #10
   45592:	e7f7      	b.n	45584 <random_byte_get+0x28>
   45594:	4000d000 	.word	0x4000d000

00045598 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   45598:	b5f0      	push	{r4, r5, r6, r7, lr}
   4559a:	4603      	mov	r3, r0
   4559c:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   4559e:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   455a0:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   455a4:	f04f 0520 	mov.w	r5, #32
   455a8:	f3ef 8211 	mrs	r2, BASEPRI
   455ac:	f385 8812 	msr	BASEPRI_MAX, r5
   455b0:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   455b4:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   455b6:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   455ba:	1be4      	subs	r4, r4, r7
   455bc:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   455c0:	42a0      	cmp	r0, r4
		len = available;
   455c2:	bf88      	it	hi
   455c4:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   455c6:	183e      	adds	r6, r7, r0
   455c8:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   455cc:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   455ce:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   455d0:	f382 8811 	msr	BASEPRI, r2
   455d4:	f3bf 8f6f 	isb	sy
   455d8:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   455da:	428a      	cmp	r2, r1
   455dc:	d117      	bne.n	4560e <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   455de:	4577      	cmp	r7, lr
   455e0:	d10d      	bne.n	455fe <rng_pool_get+0x66>
	__asm__ volatile(
   455e2:	f04f 0120 	mov.w	r1, #32
   455e6:	f3ef 8211 	mrs	r2, BASEPRI
   455ea:	f381 8812 	msr	BASEPRI_MAX, r1
   455ee:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   455f2:	7819      	ldrb	r1, [r3, #0]
   455f4:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   455f6:	f382 8811 	msr	BASEPRI, r2
   455fa:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   455fe:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   45600:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   45602:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   45604:	bf22      	ittt	cs
   45606:	4b06      	ldrcs	r3, [pc, #24]	; (45620 <rng_pool_get+0x88>)
   45608:	2201      	movcs	r2, #1
   4560a:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   4560c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   4560e:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   45610:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   45612:	7976      	ldrb	r6, [r6, #5]
   45614:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   45618:	ea05 050c 	and.w	r5, r5, ip
   4561c:	e7dd      	b.n	455da <rng_pool_get+0x42>
   4561e:	bf00      	nop
   45620:	4000d000 	.word	0x4000d000

00045624 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   45624:	43db      	mvns	r3, r3
{
   45626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   4562a:	f013 0501 	ands.w	r5, r3, #1
{
   4562e:	460e      	mov	r6, r1
   45630:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   45632:	d004      	beq.n	4563e <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   45634:	4821      	ldr	r0, [pc, #132]	; (456bc <entropy_nrf5_get_entropy_isr+0x98>)
   45636:	f7ff ffaf 	bl	45598 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   4563a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   4563e:	b3a2      	cbz	r2, 456aa <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   45640:	f04f 0320 	mov.w	r3, #32
   45644:	f3ef 8811 	mrs	r8, BASEPRI
   45648:	f383 8812 	msr	BASEPRI_MAX, r3
   4564c:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   45650:	200d      	movs	r0, #13
   45652:	f7e7 fb31 	bl	2ccb8 <arch_irq_is_enabled>
   45656:	4607      	mov	r7, r0
		irq_disable(IRQN);
   45658:	200d      	movs	r0, #13
   4565a:	f7e7 fb19 	bl	2cc90 <arch_irq_disable>
	__asm__ volatile(
   4565e:	f388 8811 	msr	BASEPRI, r8
   45662:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   45666:	f8df 8058 	ldr.w	r8, [pc, #88]	; 456c0 <entropy_nrf5_get_entropy_isr+0x9c>
   4566a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 456c4 <entropy_nrf5_get_entropy_isr+0xa0>
   4566e:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   45672:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   45676:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   4567a:	2301      	movs	r3, #1
   4567c:	f8c8 3000 	str.w	r3, [r8]
   45680:	4625      	mov	r5, r4
   45682:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   45686:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   4568a:	b183      	cbz	r3, 456ae <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   4568c:	f7ff ff66 	bl	4555c <random_byte_get>
			if (byte < 0) {
   45690:	1e03      	subs	r3, r0, #0
   45692:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   45696:	dbf6      	blt.n	45686 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   45698:	3d01      	subs	r5, #1
   4569a:	b2ad      	uxth	r5, r5
   4569c:	5573      	strb	r3, [r6, r5]
		} while (len);
   4569e:	2d00      	cmp	r5, #0
   456a0:	d1f1      	bne.n	45686 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   456a2:	b117      	cbz	r7, 456aa <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   456a4:	200d      	movs	r0, #13
   456a6:	f7e7 fae5 	bl	2cc74 <arch_irq_enable>
	return cnt;
   456aa:	4620      	mov	r0, r4
   456ac:	e7c5      	b.n	4563a <entropy_nrf5_get_entropy_isr+0x16>
   456ae:	f3bf 8f4f 	dsb	sy
				__WFE();
   456b2:	bf20      	wfe
				__SEV();
   456b4:	bf40      	sev
				__WFE();
   456b6:	bf20      	wfe
   456b8:	e7e5      	b.n	45686 <entropy_nrf5_get_entropy_isr+0x62>
   456ba:	bf00      	nop
   456bc:	20006e08 	.word	0x20006e08
   456c0:	4000d000 	.word	0x4000d000
   456c4:	e000e100 	.word	0xe000e100

000456c8 <entropy_nrf5_get_entropy>:
{
   456c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   456cc:	4f12      	ldr	r7, [pc, #72]	; (45718 <entropy_nrf5_get_entropy+0x50>)
   456ce:	460d      	mov	r5, r1
   456d0:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   456d2:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   456d6:	b914      	cbnz	r4, 456de <entropy_nrf5_get_entropy+0x16>
}
   456d8:	4620      	mov	r0, r4
   456da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   456de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   456e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   456e6:	4638      	mov	r0, r7
   456e8:	f002 fd4c 	bl	48184 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   456ec:	4622      	mov	r2, r4
   456ee:	4629      	mov	r1, r5
   456f0:	4640      	mov	r0, r8
   456f2:	f7ff ff51 	bl	45598 <rng_pool_get>
   456f6:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   456f8:	4638      	mov	r0, r7
   456fa:	f002 fd1d 	bl	48138 <z_impl_k_sem_give>
		if (bytes == 0U) {
   456fe:	b93e      	cbnz	r6, 45710 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   45700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   45704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   45708:	4804      	ldr	r0, [pc, #16]	; (4571c <entropy_nrf5_get_entropy+0x54>)
   4570a:	f002 fd3b 	bl	48184 <z_impl_k_sem_take>
	while (len) {
   4570e:	e7e6      	b.n	456de <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   45710:	1ba4      	subs	r4, r4, r6
   45712:	b2a4      	uxth	r4, r4
		buf += bytes;
   45714:	4435      	add	r5, r6
   45716:	e7de      	b.n	456d6 <entropy_nrf5_get_entropy+0xe>
   45718:	20006dd8 	.word	0x20006dd8
   4571c:	20006df0 	.word	0x20006df0

00045720 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   45720:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   45722:	4c19      	ldr	r4, [pc, #100]	; (45788 <entropy_nrf5_init+0x68>)
   45724:	2201      	movs	r2, #1
   45726:	4611      	mov	r1, r2
   45728:	4620      	mov	r0, r4
   4572a:	f00b fa49 	bl	50bc0 <z_impl_k_sem_init>
   4572e:	2201      	movs	r2, #1
   45730:	2100      	movs	r1, #0
   45732:	f104 0018 	add.w	r0, r4, #24
   45736:	f00b fa43 	bl	50bc0 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   4573a:	f240 4307 	movw	r3, #1031	; 0x407
   4573e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   45742:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   45746:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   45748:	230c      	movs	r3, #12
   4574a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   4574e:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   45750:	4b0e      	ldr	r3, [pc, #56]	; (4578c <entropy_nrf5_init+0x6c>)
   45752:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   45756:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   4575a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   4575e:	f042 0201 	orr.w	r2, r2, #1
   45762:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   45766:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   45768:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   4576c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   45770:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   45774:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   45776:	6019      	str	r1, [r3, #0]
   45778:	200d      	movs	r0, #13
   4577a:	f7e7 faab 	bl	2ccd4 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   4577e:	200d      	movs	r0, #13
   45780:	f7e7 fa78 	bl	2cc74 <arch_irq_enable>

	return 0;
}
   45784:	4628      	mov	r0, r5
   45786:	bd38      	pop	{r3, r4, r5, pc}
   45788:	20006dd8 	.word	0x20006dd8
   4578c:	4000d000 	.word	0x4000d000

00045790 <isr>:
{
   45790:	b510      	push	{r4, lr}
	byte = random_byte_get();
   45792:	f7ff fee3 	bl	4555c <random_byte_get>
	if (byte < 0) {
   45796:	2800      	cmp	r0, #0
   45798:	db20      	blt.n	457dc <isr+0x4c>
	uint8_t last  = rngp->last;
   4579a:	4b17      	ldr	r3, [pc, #92]	; (457f8 <isr+0x68>)
   4579c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   457a0:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   457a4:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   457a8:	1b14      	subs	r4, r2, r4
   457aa:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   457ae:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   457b0:	d10d      	bne.n	457ce <isr+0x3e>
	uint8_t last  = rngp->last;
   457b2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   457b6:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   457ba:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   457be:	1b14      	subs	r4, r2, r4
   457c0:	ea31 0404 	bics.w	r4, r1, r4
   457c4:	d10b      	bne.n	457de <isr+0x4e>
   457c6:	4b0d      	ldr	r3, [pc, #52]	; (457fc <isr+0x6c>)
   457c8:	2201      	movs	r2, #1
   457ca:	605a      	str	r2, [r3, #4]
}
   457cc:	e00e      	b.n	457ec <isr+0x5c>
	rngp->buffer[last] = byte;
   457ce:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   457d0:	3201      	adds	r2, #1
   457d2:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   457d4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   457d8:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   457dc:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   457de:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   457e0:	3201      	adds	r2, #1
   457e2:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   457e4:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   457e8:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   457ec:	4804      	ldr	r0, [pc, #16]	; (45800 <isr+0x70>)
}
   457ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   457f2:	f002 bca1 	b.w	48138 <z_impl_k_sem_give>
   457f6:	bf00      	nop
   457f8:	20006dd8 	.word	0x20006dd8
   457fc:	4000d000 	.word	0x4000d000
   45800:	20006df0 	.word	0x20006df0

00045804 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   45804:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   45806:	2301      	movs	r3, #1
   45808:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4580a:	4a0e      	ldr	r2, [pc, #56]	; (45844 <compare_int_lock+0x40>)
   4580c:	f3bf 8f5b 	dmb	ish
   45810:	43dc      	mvns	r4, r3
   45812:	e852 1f00 	ldrex	r1, [r2]
   45816:	ea01 0504 	and.w	r5, r1, r4
   4581a:	e842 5600 	strex	r6, r5, [r2]
   4581e:	2e00      	cmp	r6, #0
   45820:	d1f7      	bne.n	45812 <compare_int_lock+0xe>
   45822:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   45826:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   4582a:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   4582c:	4806      	ldr	r0, [pc, #24]	; (45848 <compare_int_lock+0x44>)
   4582e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   45832:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   45836:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   4583a:	420b      	tst	r3, r1
}
   4583c:	bf14      	ite	ne
   4583e:	2001      	movne	r0, #1
   45840:	2000      	moveq	r0, #0
   45842:	bd70      	pop	{r4, r5, r6, pc}
   45844:	20006e30 	.word	0x20006e30
   45848:	40011000 	.word	0x40011000

0004584c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   4584c:	491b      	ldr	r1, [pc, #108]	; (458bc <sys_clock_timeout_handler+0x70>)
{
   4584e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45850:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   45852:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   45856:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   45858:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   4585c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   45860:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   45862:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   45866:	d30f      	bcc.n	45888 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   45868:	f003 face 	bl	48e08 <sys_clock_announce>
    return p_reg->CC[ch];
   4586c:	00a3      	lsls	r3, r4, #2
   4586e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   45872:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   45876:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   4587a:	4295      	cmp	r5, r2
   4587c:	d11d      	bne.n	458ba <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   4587e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   45882:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   45886:	e012      	b.n	458ae <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   45888:	4b0d      	ldr	r3, [pc, #52]	; (458c0 <sys_clock_timeout_handler+0x74>)
   4588a:	681b      	ldr	r3, [r3, #0]
   4588c:	0a1a      	lsrs	r2, r3, #8
   4588e:	061b      	lsls	r3, r3, #24
   45890:	195e      	adds	r6, r3, r5
   45892:	4b0c      	ldr	r3, [pc, #48]	; (458c4 <sys_clock_timeout_handler+0x78>)
   45894:	f142 0700 	adc.w	r7, r2, #0
   45898:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   4589c:	f003 fab4 	bl	48e08 <sys_clock_announce>
    return p_reg->CC[ch];
   458a0:	4a09      	ldr	r2, [pc, #36]	; (458c8 <sys_clock_timeout_handler+0x7c>)
   458a2:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   458a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   458aa:	429d      	cmp	r5, r3
   458ac:	d105      	bne.n	458ba <sys_clock_timeout_handler+0x6e>
    p_reg->EVTENSET = mask;
   458ae:	4a06      	ldr	r2, [pc, #24]	; (458c8 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   458b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   458b4:	40a3      	lsls	r3, r4
   458b6:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   458ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   458bc:	20003ff0 	.word	0x20003ff0
   458c0:	20006e34 	.word	0x20006e34
   458c4:	20003ff8 	.word	0x20003ff8
   458c8:	40011000 	.word	0x40011000

000458cc <compare_int_unlock>:
	if (key) {
   458cc:	b311      	cbz	r1, 45914 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   458ce:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   458d2:	2301      	movs	r3, #1
   458d4:	4a10      	ldr	r2, [pc, #64]	; (45918 <compare_int_unlock+0x4c>)
   458d6:	4083      	lsls	r3, r0
   458d8:	e852 cf00 	ldrex	ip, [r2]
   458dc:	ea4c 0c03 	orr.w	ip, ip, r3
   458e0:	e842 c100 	strex	r1, ip, [r2]
   458e4:	2900      	cmp	r1, #0
   458e6:	d1f7      	bne.n	458d8 <compare_int_unlock+0xc>
   458e8:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   458ec:	4a0b      	ldr	r2, [pc, #44]	; (4591c <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   458ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   458f2:	4083      	lsls	r3, r0
   458f4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   458f8:	4b09      	ldr	r3, [pc, #36]	; (45920 <compare_int_unlock+0x54>)
   458fa:	f3bf 8f5b 	dmb	ish
   458fe:	681b      	ldr	r3, [r3, #0]
   45900:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   45904:	40c3      	lsrs	r3, r0
   45906:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   45908:	bf42      	ittt	mi
   4590a:	4b06      	ldrmi	r3, [pc, #24]	; (45924 <compare_int_unlock+0x58>)
   4590c:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   45910:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   45914:	4770      	bx	lr
   45916:	bf00      	nop
   45918:	20006e30 	.word	0x20006e30
   4591c:	40011000 	.word	0x40011000
   45920:	20006e2c 	.word	0x20006e2c
   45924:	e000e100 	.word	0xe000e100

00045928 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   45928:	4b0d      	ldr	r3, [pc, #52]	; (45960 <z_nrf_rtc_timer_read+0x38>)
   4592a:	6818      	ldr	r0, [r3, #0]
   4592c:	0a01      	lsrs	r1, r0, #8
   4592e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   45930:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   45934:	4b0b      	ldr	r3, [pc, #44]	; (45964 <z_nrf_rtc_timer_read+0x3c>)
   45936:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   4593a:	1818      	adds	r0, r3, r0
   4593c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   45940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   45944:	d20a      	bcs.n	4595c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   45946:	4b08      	ldr	r3, [pc, #32]	; (45968 <z_nrf_rtc_timer_read+0x40>)
   45948:	e9d3 2300 	ldrd	r2, r3, [r3]
   4594c:	4290      	cmp	r0, r2
   4594e:	eb71 0303 	sbcs.w	r3, r1, r3
   45952:	d203      	bcs.n	4595c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   45954:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   45958:	f141 0100 	adc.w	r1, r1, #0
}
   4595c:	4770      	bx	lr
   4595e:	bf00      	nop
   45960:	20006e34 	.word	0x20006e34
   45964:	40011000 	.word	0x40011000
   45968:	20003ff8 	.word	0x20003ff8

0004596c <compare_set>:
{
   4596c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45970:	4614      	mov	r4, r2
   45972:	461d      	mov	r5, r3
   45974:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   45976:	f7ff ff45 	bl	45804 <compare_int_lock>
   4597a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   4597c:	f7ff ffd4 	bl	45928 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   45980:	42a0      	cmp	r0, r4
   45982:	eb71 0305 	sbcs.w	r3, r1, r5
   45986:	d27a      	bcs.n	45a7e <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
   45988:	4b46      	ldr	r3, [pc, #280]	; (45aa4 <compare_set+0x138>)
   4598a:	1a20      	subs	r0, r4, r0
   4598c:	eb65 0101 	sbc.w	r1, r5, r1
   45990:	4298      	cmp	r0, r3
   45992:	f171 0100 	sbcs.w	r1, r1, #0
   45996:	f080 8081 	bcs.w	45a9c <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
   4599a:	4b43      	ldr	r3, [pc, #268]	; (45aa8 <compare_set+0x13c>)
   4599c:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   459a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   459a4:	429d      	cmp	r5, r3
   459a6:	bf08      	it	eq
   459a8:	4294      	cmpeq	r4, r2
   459aa:	d053      	beq.n	45a54 <compare_set+0xe8>
   459ac:	ea4f 0a87 	mov.w	sl, r7, lsl #2
   459b0:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   459b4:	f107 0950 	add.w	r9, r7, #80	; 0x50
   459b8:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
   459bc:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   459c0:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
   459c4:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
   459c8:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   459cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
   459d0:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
   459d4:	4a35      	ldr	r2, [pc, #212]	; (45aac <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   459d6:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   459da:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
   459dc:	4646      	mov	r6, r8
     return p_reg->COUNTER;
   459de:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   459e2:	eba0 000b 	sub.w	r0, r0, fp
   459e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   459ea:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   459ee:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   459f0:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
   459f4:	d105      	bne.n	45a02 <compare_set+0x96>
   459f6:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
   459f8:	2013      	movs	r0, #19
   459fa:	f00b fb47 	bl	5108c <z_impl_k_busy_wait>
   459fe:	4a2b      	ldr	r2, [pc, #172]	; (45aac <compare_set+0x140>)
   45a00:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   45a02:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
   45a06:	eba6 000c 	sub.w	r0, r6, ip
   45a0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   45a0e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   45a12:	bf88      	it	hi
   45a14:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   45a16:	2000      	movs	r0, #0
   45a18:	f8c9 0000 	str.w	r0, [r9]
   45a1c:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
   45a20:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   45a24:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   45a28:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
   45a2c:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
   45a30:	4583      	cmp	fp, r0
   45a32:	d006      	beq.n	45a42 <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
   45a34:	1a30      	subs	r0, r6, r0
   45a36:	3802      	subs	r0, #2
   45a38:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   45a3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   45a40:	d81b      	bhi.n	45a7a <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
   45a42:	eba6 0608 	sub.w	r6, r6, r8
   45a46:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   45a4a:	1936      	adds	r6, r6, r4
   45a4c:	f145 0300 	adc.w	r3, r5, #0
   45a50:	4634      	mov	r4, r6
   45a52:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   45a54:	4914      	ldr	r1, [pc, #80]	; (45aa8 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   45a56:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   45a58:	013b      	lsls	r3, r7, #4
   45a5a:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
   45a5e:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   45a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   45a62:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
   45a64:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   45a68:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   45a6a:	4638      	mov	r0, r7
   45a6c:	9900      	ldr	r1, [sp, #0]
   45a6e:	f7ff ff2d 	bl	458cc <compare_int_unlock>
}
   45a72:	4620      	mov	r0, r4
   45a74:	b003      	add	sp, #12
   45a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45a7a:	4630      	mov	r0, r6
   45a7c:	e7af      	b.n	459de <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
   45a7e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   45a80:	4a0b      	ldr	r2, [pc, #44]	; (45ab0 <compare_set+0x144>)
   45a82:	f3bf 8f5b 	dmb	ish
   45a86:	40bb      	lsls	r3, r7
   45a88:	e852 0f00 	ldrex	r0, [r2]
   45a8c:	4318      	orrs	r0, r3
   45a8e:	e842 0100 	strex	r1, r0, [r2]
   45a92:	2900      	cmp	r1, #0
   45a94:	d1f8      	bne.n	45a88 <compare_set+0x11c>
   45a96:	f3bf 8f5b 	dmb	ish
   45a9a:	e7db      	b.n	45a54 <compare_set+0xe8>
			return -EINVAL;
   45a9c:	f06f 0415 	mvn.w	r4, #21
   45aa0:	e7e3      	b.n	45a6a <compare_set+0xfe>
   45aa2:	bf00      	nop
   45aa4:	01000001 	.word	0x01000001
   45aa8:	20003fe0 	.word	0x20003fe0
   45aac:	40011000 	.word	0x40011000
   45ab0:	20006e2c 	.word	0x20006e2c

00045ab4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   45ab4:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   45ab6:	4b19      	ldr	r3, [pc, #100]	; (45b1c <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   45ab8:	4d19      	ldr	r5, [pc, #100]	; (45b20 <sys_clock_driver_init+0x6c>)
   45aba:	2400      	movs	r4, #0
   45abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   45ac0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   45ac4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   45ac8:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   45acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   45ad0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   45ad4:	4b13      	ldr	r3, [pc, #76]	; (45b24 <sys_clock_driver_init+0x70>)
   45ad6:	2602      	movs	r6, #2
   45ad8:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   45adc:	2101      	movs	r1, #1
   45ade:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   45ae2:	2011      	movs	r0, #17
   45ae4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   45ae8:	4622      	mov	r2, r4
   45aea:	f7e7 f8f3 	bl	2ccd4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   45aee:	2011      	movs	r0, #17
   45af0:	f7e7 f8c0 	bl	2cc74 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   45af4:	4a0c      	ldr	r2, [pc, #48]	; (45b28 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   45af6:	2301      	movs	r3, #1
   45af8:	60ab      	str	r3, [r5, #8]
   45afa:	602b      	str	r3, [r5, #0]
   45afc:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   45afe:	4b0b      	ldr	r3, [pc, #44]	; (45b2c <sys_clock_driver_init+0x78>)
   45b00:	4a0b      	ldr	r2, [pc, #44]	; (45b30 <sys_clock_driver_init+0x7c>)
   45b02:	9300      	str	r3, [sp, #0]
   45b04:	9401      	str	r4, [sp, #4]
   45b06:	2300      	movs	r3, #0
   45b08:	4620      	mov	r0, r4
   45b0a:	f7ff ff2f 	bl	4596c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   45b0e:	4630      	mov	r0, r6
   45b10:	f7ff f964 	bl	44ddc <z_nrf_clock_control_lf_on>

	return 0;
}
   45b14:	4620      	mov	r0, r4
   45b16:	b002      	add	sp, #8
   45b18:	bd70      	pop	{r4, r5, r6, pc}
   45b1a:	bf00      	nop
   45b1c:	20003fe0 	.word	0x20003fe0
   45b20:	40011000 	.word	0x40011000
   45b24:	e000e100 	.word	0xe000e100
   45b28:	20006e30 	.word	0x20006e30
   45b2c:	0004584d 	.word	0x0004584d
   45b30:	007fffff 	.word	0x007fffff

00045b34 <rtc_nrf_isr>:
{
   45b34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   45b38:	4c33      	ldr	r4, [pc, #204]	; (45c08 <rtc_nrf_isr+0xd4>)
   45b3a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   45b3e:	079a      	lsls	r2, r3, #30
   45b40:	d50b      	bpl.n	45b5a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   45b42:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   45b46:	b143      	cbz	r3, 45b5a <rtc_nrf_isr+0x26>
		overflow_cnt++;
   45b48:	4a30      	ldr	r2, [pc, #192]	; (45c0c <rtc_nrf_isr+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   45b4a:	2300      	movs	r3, #0
   45b4c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   45b50:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   45b54:	6813      	ldr	r3, [r2, #0]
   45b56:	3301      	adds	r3, #1
   45b58:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   45b5a:	f04f 0320 	mov.w	r3, #32
   45b5e:	f3ef 8211 	mrs	r2, BASEPRI
   45b62:	f383 8812 	msr	BASEPRI_MAX, r3
   45b66:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   45b6a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   45b6e:	03db      	lsls	r3, r3, #15
   45b70:	d529      	bpl.n	45bc6 <rtc_nrf_isr+0x92>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   45b72:	f3bf 8f5b 	dmb	ish
   45b76:	4b26      	ldr	r3, [pc, #152]	; (45c10 <rtc_nrf_isr+0xdc>)
   45b78:	e853 1f00 	ldrex	r1, [r3]
   45b7c:	f021 0001 	bic.w	r0, r1, #1
   45b80:	e843 0500 	strex	r5, r0, [r3]
   45b84:	2d00      	cmp	r5, #0
   45b86:	d1f7      	bne.n	45b78 <rtc_nrf_isr+0x44>
   45b88:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   45b8c:	b911      	cbnz	r1, 45b94 <rtc_nrf_isr+0x60>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   45b8e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   45b92:	b1c3      	cbz	r3, 45bc6 <rtc_nrf_isr+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   45b94:	2500      	movs	r5, #0
   45b96:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   45b9a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
   45b9e:	f382 8811 	msr	BASEPRI, r2
   45ba2:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   45ba6:	f7ff febf 	bl	45928 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   45baa:	f04f 0320 	mov.w	r3, #32
   45bae:	f3ef 8211 	mrs	r2, BASEPRI
   45bb2:	f383 8812 	msr	BASEPRI_MAX, r3
   45bb6:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   45bba:	4b16      	ldr	r3, [pc, #88]	; (45c14 <rtc_nrf_isr+0xe0>)
   45bbc:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   45bc0:	42b0      	cmp	r0, r6
   45bc2:	41b9      	sbcs	r1, r7
   45bc4:	d206      	bcs.n	45bd4 <rtc_nrf_isr+0xa0>
	__asm__ volatile(
   45bc6:	f382 8811 	msr	BASEPRI, r2
   45bca:	f3bf 8f6f 	isb	sy
}
   45bce:	b003      	add	sp, #12
   45bd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   45bd4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   45bd8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   45bdc:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   45be0:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   45be4:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   45be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   45bea:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   45bee:	f382 8811 	msr	BASEPRI, r2
   45bf2:	f3bf 8f6f 	isb	sy
		if (handler) {
   45bf6:	2900      	cmp	r1, #0
   45bf8:	d0e9      	beq.n	45bce <rtc_nrf_isr+0x9a>
			handler(chan, expire_time, user_context);
   45bfa:	9000      	str	r0, [sp, #0]
   45bfc:	4632      	mov	r2, r6
   45bfe:	463b      	mov	r3, r7
   45c00:	4628      	mov	r0, r5
   45c02:	4788      	blx	r1
}
   45c04:	e7e3      	b.n	45bce <rtc_nrf_isr+0x9a>
   45c06:	bf00      	nop
   45c08:	40011000 	.word	0x40011000
   45c0c:	20006e34 	.word	0x20006e34
   45c10:	20006e2c 	.word	0x20006e2c
   45c14:	20003fe0 	.word	0x20003fe0

00045c18 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   45c18:	1c43      	adds	r3, r0, #1
{
   45c1a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   45c1c:	d021      	beq.n	45c62 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   45c1e:	2801      	cmp	r0, #1
   45c20:	dd21      	ble.n	45c66 <sys_clock_set_timeout+0x4e>
   45c22:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   45c26:	da20      	bge.n	45c6a <sys_clock_set_timeout+0x52>
   45c28:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   45c2a:	f7ff fe7d 	bl	45928 <z_nrf_rtc_timer_read>
   45c2e:	4b10      	ldr	r3, [pc, #64]	; (45c70 <sys_clock_set_timeout+0x58>)
   45c30:	e9d3 1300 	ldrd	r1, r3, [r3]
   45c34:	1a42      	subs	r2, r0, r1
		ticks = 0;
   45c36:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
   45c3a:	480e      	ldr	r0, [pc, #56]	; (45c74 <sys_clock_set_timeout+0x5c>)
		ticks = 0;
   45c3c:	bf28      	it	cs
   45c3e:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   45c40:	3201      	adds	r2, #1
   45c42:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   45c44:	4282      	cmp	r2, r0
   45c46:	bf28      	it	cs
   45c48:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   45c4a:	1852      	adds	r2, r2, r1
   45c4c:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   45c50:	4909      	ldr	r1, [pc, #36]	; (45c78 <sys_clock_set_timeout+0x60>)
   45c52:	9001      	str	r0, [sp, #4]
   45c54:	9100      	str	r1, [sp, #0]
   45c56:	f143 0300 	adc.w	r3, r3, #0
   45c5a:	f7ff fe87 	bl	4596c <compare_set>
}
   45c5e:	b002      	add	sp, #8
   45c60:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   45c62:	4804      	ldr	r0, [pc, #16]	; (45c74 <sys_clock_set_timeout+0x5c>)
   45c64:	e7e0      	b.n	45c28 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   45c66:	2400      	movs	r4, #0
   45c68:	e7df      	b.n	45c2a <sys_clock_set_timeout+0x12>
   45c6a:	4c02      	ldr	r4, [pc, #8]	; (45c74 <sys_clock_set_timeout+0x5c>)
   45c6c:	e7dd      	b.n	45c2a <sys_clock_set_timeout+0x12>
   45c6e:	bf00      	nop
   45c70:	20003ff0 	.word	0x20003ff0
   45c74:	007fffff 	.word	0x007fffff
   45c78:	0004584d 	.word	0x0004584d

00045c7c <sys_clock_elapsed>:
{
   45c7c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   45c7e:	f7ff fe53 	bl	45928 <z_nrf_rtc_timer_read>
   45c82:	4b02      	ldr	r3, [pc, #8]	; (45c8c <sys_clock_elapsed+0x10>)
   45c84:	681b      	ldr	r3, [r3, #0]
}
   45c86:	1ac0      	subs	r0, r0, r3
   45c88:	bd08      	pop	{r3, pc}
   45c8a:	bf00      	nop
   45c8c:	20003ff0 	.word	0x20003ff0

00045c90 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   45c90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   45c94:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   45c98:	2a08      	cmp	r2, #8
   45c9a:	d106      	bne.n	45caa <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   45c9c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   45ca0:	2b05      	cmp	r3, #5
   45ca2:	d802      	bhi.n	45caa <nrf52_errata_103+0x1a>
   45ca4:	4a02      	ldr	r2, [pc, #8]	; (45cb0 <nrf52_errata_103+0x20>)
   45ca6:	5cd0      	ldrb	r0, [r2, r3]
   45ca8:	4770      	bx	lr
                        return false;
   45caa:	2000      	movs	r0, #0
}
   45cac:	4770      	bx	lr
   45cae:	bf00      	nop
   45cb0:	000544bb 	.word	0x000544bb

00045cb4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   45cb4:	4a02      	ldr	r2, [pc, #8]	; (45cc0 <nvmc_wait+0xc>)
   45cb6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   45cba:	2b00      	cmp	r3, #0
   45cbc:	d0fb      	beq.n	45cb6 <nvmc_wait+0x2>
}
   45cbe:	4770      	bx	lr
   45cc0:	4001e000 	.word	0x4001e000

00045cc4 <SystemInit>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   45cc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   45cc8:	b510      	push	{r4, lr}
            if (var1 == 0x08)
   45cca:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   45cce:	2a08      	cmp	r2, #8
   45cd0:	d14e      	bne.n	45d70 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   45cd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   45cd6:	2100      	movs	r1, #0
   45cd8:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   45cdc:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   45ce0:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   45ce4:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   45ce8:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   45cec:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   45cf0:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   45cf4:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   45cf8:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   45cfc:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   45d00:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   45d04:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   45d08:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   45d0c:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   45d10:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   45d14:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   45d18:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   45d1c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   45d20:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   45d24:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   45d28:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   45d2c:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   45d30:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   45d34:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   45d38:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   45d3c:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   45d40:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   45d44:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   45d48:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   45d4c:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   45d50:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   45d54:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   45d58:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   45d5c:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   45d60:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   45d64:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   45d68:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   45d6c:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   45d70:	f7ff ff8e 	bl	45c90 <nrf52_errata_103>
   45d74:	b118      	cbz	r0, 45d7e <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   45d76:	4b3b      	ldr	r3, [pc, #236]	; (45e64 <SystemInit+0x1a0>)
   45d78:	4a3b      	ldr	r2, [pc, #236]	; (45e68 <SystemInit+0x1a4>)
   45d7a:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   45d7e:	f7ff ff87 	bl	45c90 <nrf52_errata_103>
   45d82:	b118      	cbz	r0, 45d8c <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   45d84:	4b39      	ldr	r3, [pc, #228]	; (45e6c <SystemInit+0x1a8>)
   45d86:	22fb      	movs	r2, #251	; 0xfb
   45d88:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   45d8c:	f7ff ff80 	bl	45c90 <nrf52_errata_103>
   45d90:	b170      	cbz	r0, 45db0 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   45d92:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   45d96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   45d9a:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   45d9e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   45da2:	f022 020f 	bic.w	r2, r2, #15
   45da6:	f003 030f 	and.w	r3, r3, #15
   45daa:	4313      	orrs	r3, r2
   45dac:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   45db0:	f7ff ff6e 	bl	45c90 <nrf52_errata_103>
   45db4:	b120      	cbz	r0, 45dc0 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   45db6:	4b2e      	ldr	r3, [pc, #184]	; (45e70 <SystemInit+0x1ac>)
   45db8:	f44f 7200 	mov.w	r2, #512	; 0x200
   45dbc:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   45dc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   45dc4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   45dc8:	2b08      	cmp	r3, #8
   45dca:	d11a      	bne.n	45e02 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   45dcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   45dd0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   45dd4:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   45dd6:	bf44      	itt	mi
   45dd8:	f06f 0201 	mvnmi.w	r2, #1
   45ddc:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   45de0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   45de4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   45de8:	2b05      	cmp	r3, #5
   45dea:	d802      	bhi.n	45df2 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   45dec:	4a21      	ldr	r2, [pc, #132]	; (45e74 <SystemInit+0x1b0>)
   45dee:	5cd3      	ldrb	r3, [r2, r3]
   45df0:	b13b      	cbz	r3, 45e02 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   45df2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   45df6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   45dfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   45dfe:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   45e02:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   45e06:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   45e0a:	2a00      	cmp	r2, #0
   45e0c:	db03      	blt.n	45e16 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   45e0e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   45e12:	2b00      	cmp	r3, #0
   45e14:	da22      	bge.n	45e5c <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   45e16:	4918      	ldr	r1, [pc, #96]	; (45e78 <SystemInit+0x1b4>)
   45e18:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   45e1a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   45e1e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   45e22:	2412      	movs	r4, #18
    nvmc_wait();
   45e24:	f7ff ff46 	bl	45cb4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   45e28:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   45e2c:	f7ff ff42 	bl	45cb4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   45e30:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   45e34:	f7ff ff3e 	bl	45cb4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   45e38:	2300      	movs	r3, #0
   45e3a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   45e3e:	f7ff ff39 	bl	45cb4 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   45e42:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   45e46:	490d      	ldr	r1, [pc, #52]	; (45e7c <SystemInit+0x1b8>)
   45e48:	4b0d      	ldr	r3, [pc, #52]	; (45e80 <SystemInit+0x1bc>)
   45e4a:	68ca      	ldr	r2, [r1, #12]
   45e4c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   45e50:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   45e52:	60cb      	str	r3, [r1, #12]
   45e54:	f3bf 8f4f 	dsb	sy
    __NOP();
   45e58:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   45e5a:	e7fd      	b.n	45e58 <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   45e5c:	4b09      	ldr	r3, [pc, #36]	; (45e84 <SystemInit+0x1c0>)
   45e5e:	4a0a      	ldr	r2, [pc, #40]	; (45e88 <SystemInit+0x1c4>)
   45e60:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   45e62:	bd10      	pop	{r4, pc}
   45e64:	40005000 	.word	0x40005000
   45e68:	00038148 	.word	0x00038148
   45e6c:	4000f000 	.word	0x4000f000
   45e70:	40029000 	.word	0x40029000
   45e74:	000544b5 	.word	0x000544b5
   45e78:	4001e000 	.word	0x4001e000
   45e7c:	e000ed00 	.word	0xe000ed00
   45e80:	05fa0004 	.word	0x05fa0004
   45e84:	20000e2c 	.word	0x20000e2c
   45e88:	03d09000 	.word	0x03d09000

00045e8c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   45e8c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   45e8e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   45e90:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   45e92:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   45e96:	fab2 f382 	clz	r3, r2
   45e9a:	f1c3 031f 	rsb	r3, r3, #31
   45e9e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   45ea0:	fa05 f403 	lsl.w	r4, r5, r3
   45ea4:	ea22 0404 	bic.w	r4, r2, r4
   45ea8:	e850 6f00 	ldrex	r6, [r0]
   45eac:	4296      	cmp	r6, r2
   45eae:	d104      	bne.n	45eba <nrfx_flag32_alloc+0x2e>
   45eb0:	e840 4c00 	strex	ip, r4, [r0]
   45eb4:	f1bc 0f00 	cmp.w	ip, #0
   45eb8:	d1f6      	bne.n	45ea8 <nrfx_flag32_alloc+0x1c>
   45eba:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   45ebe:	d1e7      	bne.n	45e90 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   45ec0:	4801      	ldr	r0, [pc, #4]	; (45ec8 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   45ec2:	700b      	strb	r3, [r1, #0]
}
   45ec4:	bd70      	pop	{r4, r5, r6, pc}
   45ec6:	bf00      	nop
   45ec8:	0bad0000 	.word	0x0bad0000

00045ecc <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   45ecc:	6803      	ldr	r3, [r0, #0]
   45ece:	40cb      	lsrs	r3, r1
   45ed0:	07db      	lsls	r3, r3, #31
{
   45ed2:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   45ed4:	d414      	bmi.n	45f00 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   45ed6:	2301      	movs	r3, #1
   45ed8:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   45eda:	6802      	ldr	r2, [r0, #0]
   45edc:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   45ee0:	ea43 0102 	orr.w	r1, r3, r2
   45ee4:	e850 4f00 	ldrex	r4, [r0]
   45ee8:	4294      	cmp	r4, r2
   45eea:	d104      	bne.n	45ef6 <nrfx_flag32_free+0x2a>
   45eec:	e840 1c00 	strex	ip, r1, [r0]
   45ef0:	f1bc 0f00 	cmp.w	ip, #0
   45ef4:	d1f6      	bne.n	45ee4 <nrfx_flag32_free+0x18>
   45ef6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   45efa:	d1ee      	bne.n	45eda <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   45efc:	4801      	ldr	r0, [pc, #4]	; (45f04 <nrfx_flag32_free+0x38>)
}
   45efe:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   45f00:	4801      	ldr	r0, [pc, #4]	; (45f08 <nrfx_flag32_free+0x3c>)
   45f02:	e7fc      	b.n	45efe <nrfx_flag32_free+0x32>
   45f04:	0bad0000 	.word	0x0bad0000
   45f08:	0bad0004 	.word	0x0bad0004

00045f0c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   45f0c:	4b04      	ldr	r3, [pc, #16]	; (45f20 <nrfx_clock_init+0x14>)
   45f0e:	791a      	ldrb	r2, [r3, #4]
   45f10:	b922      	cbnz	r2, 45f1c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   45f12:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   45f14:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   45f16:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   45f18:	4802      	ldr	r0, [pc, #8]	; (45f24 <nrfx_clock_init+0x18>)
   45f1a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   45f1c:	4802      	ldr	r0, [pc, #8]	; (45f28 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   45f1e:	4770      	bx	lr
   45f20:	20006e38 	.word	0x20006e38
   45f24:	0bad0000 	.word	0x0bad0000
   45f28:	0bad000c 	.word	0x0bad000c

00045f2c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   45f2c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   45f2e:	2000      	movs	r0, #0
   45f30:	f7e6 fec2 	bl	2ccb8 <arch_irq_is_enabled>
   45f34:	b908      	cbnz	r0, 45f3a <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   45f36:	f7e6 fe9d 	bl	2cc74 <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
   45f3a:	4b02      	ldr	r3, [pc, #8]	; (45f44 <nrfx_clock_enable+0x18>)
   45f3c:	2201      	movs	r2, #1
   45f3e:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   45f40:	bd08      	pop	{r3, pc}
   45f42:	bf00      	nop
   45f44:	20007429 	.word	0x20007429

00045f48 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   45f48:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   45f4a:	b110      	cbz	r0, 45f52 <nrfx_clock_stop+0xa>
   45f4c:	2801      	cmp	r0, #1
   45f4e:	d017      	beq.n	45f80 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   45f50:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   45f52:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   45f56:	2302      	movs	r3, #2
   45f58:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   45f5c:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   45f60:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   45f64:	2301      	movs	r3, #1
   45f66:	60e3      	str	r3, [r4, #12]
   45f68:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   45f6c:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   45f70:	03db      	lsls	r3, r3, #15
   45f72:	d5ed      	bpl.n	45f50 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   45f74:	2001      	movs	r0, #1
   45f76:	f00a f955 	bl	50224 <nrfx_busy_wait>
   45f7a:	3d01      	subs	r5, #1
   45f7c:	d1f6      	bne.n	45f6c <nrfx_clock_stop+0x24>
   45f7e:	e7e7      	b.n	45f50 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   45f80:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   45f84:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   45f86:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   45f8a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   45f8e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   45f92:	6060      	str	r0, [r4, #4]
   45f94:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   45f98:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   45f9c:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   45fa0:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   45fa2:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   45fa6:	d505      	bpl.n	45fb4 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   45fa8:	b123      	cbz	r3, 45fb4 <nrfx_clock_stop+0x6c>
   45faa:	2001      	movs	r0, #1
   45fac:	f00a f93a 	bl	50224 <nrfx_busy_wait>
   45fb0:	3d01      	subs	r5, #1
   45fb2:	d1f1      	bne.n	45f98 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   45fb4:	4b01      	ldr	r3, [pc, #4]	; (45fbc <nrfx_clock_stop+0x74>)
   45fb6:	2200      	movs	r2, #0
   45fb8:	715a      	strb	r2, [r3, #5]
   45fba:	e7c9      	b.n	45f50 <nrfx_clock_stop+0x8>
   45fbc:	20006e38 	.word	0x20006e38

00045fc0 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   45fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   45fc4:	b510      	push	{r4, lr}
   45fc6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   45fca:	b16a      	cbz	r2, 45fe8 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   45fcc:	2200      	movs	r2, #0
   45fce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   45fd2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   45fd6:	2201      	movs	r2, #1
   45fd8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   45fdc:	4b11      	ldr	r3, [pc, #68]	; (46024 <nrfx_clock_irq_handler+0x64>)
   45fde:	7958      	ldrb	r0, [r3, #5]
   45fe0:	b910      	cbnz	r0, 45fe8 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   45fe2:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   45fe4:	681b      	ldr	r3, [r3, #0]
   45fe6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   45fe8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   45fec:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   45ff0:	b172      	cbz	r2, 46010 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   45ff2:	2200      	movs	r2, #0
   45ff4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   45ff8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   45ffc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   46000:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   46004:	0792      	lsls	r2, r2, #30
   46006:	d104      	bne.n	46012 <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   46008:	2201      	movs	r2, #1
   4600a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4600e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   46010:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   46012:	2202      	movs	r2, #2
   46014:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   46018:	4b02      	ldr	r3, [pc, #8]	; (46024 <nrfx_clock_irq_handler+0x64>)
}
   4601a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   4601e:	681b      	ldr	r3, [r3, #0]
   46020:	2001      	movs	r0, #1
   46022:	4718      	bx	r3
   46024:	20006e38 	.word	0x20006e38

00046028 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   46028:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   4602a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   4602e:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   46030:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   46032:	6002      	str	r2, [r0, #0]
}
   46034:	4802      	ldr	r0, [pc, #8]	; (46040 <nrf_gpio_pin_port_decode+0x18>)
   46036:	bf18      	it	ne
   46038:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   4603c:	4770      	bx	lr
   4603e:	bf00      	nop
   46040:	50000300 	.word	0x50000300

00046044 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   46044:	4b03      	ldr	r3, [pc, #12]	; (46054 <pin_in_use_by_te+0x10>)
   46046:	3008      	adds	r0, #8
   46048:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   4604c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   46050:	4770      	bx	lr
   46052:	bf00      	nop
   46054:	20000e30 	.word	0x20000e30

00046058 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   46058:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   4605a:	f100 0308 	add.w	r3, r0, #8
   4605e:	4c0c      	ldr	r4, [pc, #48]	; (46090 <call_handler+0x38>)
   46060:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   46064:	05da      	lsls	r2, r3, #23
{
   46066:	4605      	mov	r5, r0
   46068:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   4606a:	d507      	bpl.n	4607c <call_handler+0x24>
   4606c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   46070:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   46074:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   46078:	6852      	ldr	r2, [r2, #4]
   4607a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   4607c:	68a3      	ldr	r3, [r4, #8]
   4607e:	b12b      	cbz	r3, 4608c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   46080:	68e2      	ldr	r2, [r4, #12]
   46082:	4631      	mov	r1, r6
   46084:	4628      	mov	r0, r5
    }
}
   46086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   4608a:	4718      	bx	r3
}
   4608c:	bd70      	pop	{r4, r5, r6, pc}
   4608e:	bf00      	nop
   46090:	20000e30 	.word	0x20000e30

00046094 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   46094:	4a12      	ldr	r2, [pc, #72]	; (460e0 <release_handler+0x4c>)
   46096:	3008      	adds	r0, #8
{
   46098:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   4609a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   4609e:	05d9      	lsls	r1, r3, #23
   460a0:	d51b      	bpl.n	460da <release_handler+0x46>
   460a2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   460a6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   460aa:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   460ae:	f102 040e 	add.w	r4, r2, #14
   460b2:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   460b4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   460b8:	f413 7f80 	tst.w	r3, #256	; 0x100
   460bc:	d003      	beq.n	460c6 <release_handler+0x32>
   460be:	f3c3 2343 	ubfx	r3, r3, #9, #4
   460c2:	4299      	cmp	r1, r3
   460c4:	d009      	beq.n	460da <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   460c6:	3001      	adds	r0, #1
   460c8:	2830      	cmp	r0, #48	; 0x30
   460ca:	d1f3      	bne.n	460b4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   460cc:	2300      	movs	r3, #0
   460ce:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   460d2:	4804      	ldr	r0, [pc, #16]	; (460e4 <release_handler+0x50>)
}
   460d4:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   460d6:	f7ff bef9 	b.w	45ecc <nrfx_flag32_free>
}
   460da:	bc10      	pop	{r4}
   460dc:	4770      	bx	lr
   460de:	bf00      	nop
   460e0:	20000e30 	.word	0x20000e30
   460e4:	20000ea4 	.word	0x20000ea4

000460e8 <pin_handler_trigger_uninit>:
{
   460e8:	b538      	push	{r3, r4, r5, lr}
   460ea:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   460ec:	f7ff ffaa 	bl	46044 <pin_in_use_by_te>
   460f0:	4c09      	ldr	r4, [pc, #36]	; (46118 <pin_handler_trigger_uninit+0x30>)
   460f2:	f102 0508 	add.w	r5, r2, #8
   460f6:	b140      	cbz	r0, 4610a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   460f8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   460fc:	4907      	ldr	r1, [pc, #28]	; (4611c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   460fe:	0b5b      	lsrs	r3, r3, #13
   46100:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   46104:	2000      	movs	r0, #0
   46106:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   4610a:	4610      	mov	r0, r2
   4610c:	f7ff ffc2 	bl	46094 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   46110:	2300      	movs	r3, #0
   46112:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   46116:	bd38      	pop	{r3, r4, r5, pc}
   46118:	20000e30 	.word	0x20000e30
   4611c:	40006000 	.word	0x40006000

00046120 <nrfx_gpiote_input_configure>:
{
   46120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   46124:	4604      	mov	r4, r0
   46126:	b085      	sub	sp, #20
   46128:	4690      	mov	r8, r2
   4612a:	461d      	mov	r5, r3
    if (p_input_config)
   4612c:	b1f1      	cbz	r1, 4616c <nrfx_gpiote_input_configure+0x4c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   4612e:	4f4e      	ldr	r7, [pc, #312]	; (46268 <nrfx_gpiote_input_configure+0x148>)
   46130:	f100 0908 	add.w	r9, r0, #8
   46134:	f837 6019 	ldrh.w	r6, [r7, r9, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   46138:	07b3      	lsls	r3, r6, #30
   4613a:	d502      	bpl.n	46142 <nrfx_gpiote_input_configure+0x22>
   4613c:	f7ff ff82 	bl	46044 <pin_in_use_by_te>
   46140:	bb18      	cbnz	r0, 4618a <nrfx_gpiote_input_configure+0x6a>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   46142:	2300      	movs	r3, #0
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   46144:	f026 0602 	bic.w	r6, r6, #2
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   46148:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   4614c:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   46150:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   46154:	f10d 020f 	add.w	r2, sp, #15
   46158:	460b      	mov	r3, r1
   4615a:	4620      	mov	r0, r4
   4615c:	f10d 010e 	add.w	r1, sp, #14
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   46160:	f046 0601 	orr.w	r6, r6, #1
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   46164:	f00a f88c 	bl	50280 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   46168:	f827 6019 	strh.w	r6, [r7, r9, lsl #1]
    if (p_trigger_config)
   4616c:	f1b8 0f00 	cmp.w	r8, #0
   46170:	d026      	beq.n	461c0 <nrfx_gpiote_input_configure+0xa0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   46172:	4b3d      	ldr	r3, [pc, #244]	; (46268 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   46174:	f898 7000 	ldrb.w	r7, [r8]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   46178:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   4617c:	f104 0608 	add.w	r6, r4, #8
   46180:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
   46184:	0788      	lsls	r0, r1, #30
   46186:	d502      	bpl.n	4618e <nrfx_gpiote_input_configure+0x6e>
            if (use_evt)
   46188:	b192      	cbz	r2, 461b0 <nrfx_gpiote_input_configure+0x90>
            return NRFX_ERROR_INVALID_PARAM;
   4618a:	4838      	ldr	r0, [pc, #224]	; (4626c <nrfx_gpiote_input_configure+0x14c>)
   4618c:	e01a      	b.n	461c4 <nrfx_gpiote_input_configure+0xa4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   4618e:	f021 0120 	bic.w	r1, r1, #32
   46192:	04c9      	lsls	r1, r1, #19
   46194:	0cc9      	lsrs	r1, r1, #19
   46196:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
   4619a:	b14a      	cbz	r2, 461b0 <nrfx_gpiote_input_configure+0x90>
                if (!edge)
   4619c:	2f03      	cmp	r7, #3
   4619e:	d8f4      	bhi.n	4618a <nrfx_gpiote_input_configure+0x6a>
                uint8_t ch = *p_trigger_config->p_in_channel;
   461a0:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   461a4:	b98f      	cbnz	r7, 461ca <nrfx_gpiote_input_configure+0xaa>
   461a6:	4a32      	ldr	r2, [pc, #200]	; (46270 <nrfx_gpiote_input_configure+0x150>)
   461a8:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
   461ac:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   461b0:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
   461b4:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   461b8:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
   461bc:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
   461c0:	bb4d      	cbnz	r5, 46216 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
   461c2:	482c      	ldr	r0, [pc, #176]	; (46274 <nrfx_gpiote_input_configure+0x154>)
}
   461c4:	b005      	add	sp, #20
   461c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   461ca:	ea4f 028c 	mov.w	r2, ip, lsl #2
   461ce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   461d2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   461d6:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   461da:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   461de:	f020 0003 	bic.w	r0, r0, #3
   461e2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   461e6:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   461ea:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   461ee:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   461f2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   461f6:	0220      	lsls	r0, r4, #8
   461f8:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   461fc:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   46200:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   46204:	ea40 000e 	orr.w	r0, r0, lr
   46208:	f041 0120 	orr.w	r1, r1, #32
   4620c:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
   46210:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   46214:	e7cc      	b.n	461b0 <nrfx_gpiote_input_configure+0x90>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   46216:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   4621a:	4620      	mov	r0, r4
   4621c:	f7ff ff3a 	bl	46094 <release_handler>
    if (!handler)
   46220:	2e00      	cmp	r6, #0
   46222:	d0ce      	beq.n	461c2 <nrfx_gpiote_input_configure+0xa2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   46224:	4d10      	ldr	r5, [pc, #64]	; (46268 <nrfx_gpiote_input_configure+0x148>)
   46226:	e9d5 2300 	ldrd	r2, r3, [r5]
   4622a:	4296      	cmp	r6, r2
   4622c:	d101      	bne.n	46232 <nrfx_gpiote_input_configure+0x112>
   4622e:	429f      	cmp	r7, r3
   46230:	d018      	beq.n	46264 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   46232:	4811      	ldr	r0, [pc, #68]	; (46278 <nrfx_gpiote_input_configure+0x158>)
   46234:	f10d 010f 	add.w	r1, sp, #15
   46238:	f7ff fe28 	bl	45e8c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   4623c:	4b0d      	ldr	r3, [pc, #52]	; (46274 <nrfx_gpiote_input_configure+0x154>)
   4623e:	4298      	cmp	r0, r3
   46240:	d1c0      	bne.n	461c4 <nrfx_gpiote_input_configure+0xa4>
        handler_id = (int32_t)id;
   46242:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   46246:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   4624a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   4624e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   46250:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   46252:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   46256:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   4625a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   4625e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   46262:	e7ae      	b.n	461c2 <nrfx_gpiote_input_configure+0xa2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   46264:	2200      	movs	r2, #0
   46266:	e7ee      	b.n	46246 <nrfx_gpiote_input_configure+0x126>
   46268:	20000e30 	.word	0x20000e30
   4626c:	0bad0004 	.word	0x0bad0004
   46270:	40006000 	.word	0x40006000
   46274:	0bad0000 	.word	0x0bad0000
   46278:	20000ea4 	.word	0x20000ea4

0004627c <nrfx_gpiote_output_configure>:
{
   4627c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   46280:	4604      	mov	r4, r0
   46282:	4615      	mov	r5, r2
    if (p_config)
   46284:	b309      	cbz	r1, 462ca <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   46286:	4f32      	ldr	r7, [pc, #200]	; (46350 <nrfx_gpiote_output_configure+0xd4>)
   46288:	f100 0808 	add.w	r8, r0, #8
   4628c:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   46290:	07b2      	lsls	r2, r6, #30
   46292:	d403      	bmi.n	4629c <nrfx_gpiote_output_configure+0x20>
   46294:	f7ff fed6 	bl	46044 <pin_in_use_by_te>
   46298:	2800      	cmp	r0, #0
   4629a:	d157      	bne.n	4634c <nrfx_gpiote_output_configure+0xd0>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   4629c:	f016 0f1c 	tst.w	r6, #28
   462a0:	d002      	beq.n	462a8 <nrfx_gpiote_output_configure+0x2c>
   462a2:	784b      	ldrb	r3, [r1, #1]
   462a4:	2b01      	cmp	r3, #1
   462a6:	d051      	beq.n	4634c <nrfx_gpiote_output_configure+0xd0>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   462a8:	2301      	movs	r3, #1
   462aa:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   462ae:	2300      	movs	r3, #0
   462b0:	e9cd 1300 	strd	r1, r3, [sp]
   462b4:	1c4a      	adds	r2, r1, #1
   462b6:	1c8b      	adds	r3, r1, #2
   462b8:	4620      	mov	r0, r4
   462ba:	f10d 010f 	add.w	r1, sp, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   462be:	f046 0603 	orr.w	r6, r6, #3
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   462c2:	f009 ffdd 	bl	50280 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   462c6:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_task_config)
   462ca:	b91d      	cbnz	r5, 462d4 <nrfx_gpiote_output_configure+0x58>
    return NRFX_SUCCESS;
   462cc:	4821      	ldr	r0, [pc, #132]	; (46354 <nrfx_gpiote_output_configure+0xd8>)
}
   462ce:	b004      	add	sp, #16
   462d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   462d4:	4e1e      	ldr	r6, [pc, #120]	; (46350 <nrfx_gpiote_output_configure+0xd4>)
   462d6:	f104 0708 	add.w	r7, r4, #8
   462da:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   462de:	0783      	lsls	r3, r0, #30
   462e0:	d534      	bpl.n	4634c <nrfx_gpiote_output_configure+0xd0>
        uint32_t ch = p_task_config->task_ch;
   462e2:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   462e6:	4661      	mov	r1, ip
   462e8:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   462ea:	f020 0020 	bic.w	r0, r0, #32
   462ee:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   462f2:	04c0      	lsls	r0, r0, #19
   462f4:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   462f8:	0cc0      	lsrs	r0, r0, #19
   462fa:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   462fe:	2300      	movs	r3, #0
   46300:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   46304:	786a      	ldrb	r2, [r5, #1]
   46306:	2a00      	cmp	r2, #0
   46308:	d0e0      	beq.n	462cc <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   4630a:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   4630e:	78ad      	ldrb	r5, [r5, #2]
   46310:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   46314:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   46318:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   4631c:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   46320:	0223      	lsls	r3, r4, #8
   46322:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   46326:	0412      	lsls	r2, r2, #16
   46328:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   4632c:	ea43 030e 	orr.w	r3, r3, lr
   46330:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   46332:	052a      	lsls	r2, r5, #20
   46334:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   46338:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   4633c:	4313      	orrs	r3, r2
   4633e:	f040 0020 	orr.w	r0, r0, #32
   46342:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   46346:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   4634a:	e7bf      	b.n	462cc <nrfx_gpiote_output_configure+0x50>
{
   4634c:	4802      	ldr	r0, [pc, #8]	; (46358 <nrfx_gpiote_output_configure+0xdc>)
   4634e:	e7be      	b.n	462ce <nrfx_gpiote_output_configure+0x52>
   46350:	20000e30 	.word	0x20000e30
   46354:	0bad0000 	.word	0x0bad0000
   46358:	0bad0004 	.word	0x0bad0004

0004635c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   4635c:	4b01      	ldr	r3, [pc, #4]	; (46364 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   4635e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   46362:	4770      	bx	lr
   46364:	20000e30 	.word	0x20000e30

00046368 <nrfx_gpiote_channel_get>:
{
   46368:	b508      	push	{r3, lr}
   4636a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   4636c:	f7ff fe6a 	bl	46044 <pin_in_use_by_te>
   46370:	b138      	cbz	r0, 46382 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   46372:	4b05      	ldr	r3, [pc, #20]	; (46388 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   46374:	4805      	ldr	r0, [pc, #20]	; (4638c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   46376:	3208      	adds	r2, #8
   46378:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   4637c:	0b5b      	lsrs	r3, r3, #13
   4637e:	700b      	strb	r3, [r1, #0]
}
   46380:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   46382:	4803      	ldr	r0, [pc, #12]	; (46390 <nrfx_gpiote_channel_get+0x28>)
   46384:	e7fc      	b.n	46380 <nrfx_gpiote_channel_get+0x18>
   46386:	bf00      	nop
   46388:	20000e30 	.word	0x20000e30
   4638c:	0bad0000 	.word	0x0bad0000
   46390:	0bad0004 	.word	0x0bad0004

00046394 <nrfx_gpiote_init>:
{
   46394:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   46396:	4c0f      	ldr	r4, [pc, #60]	; (463d4 <nrfx_gpiote_init+0x40>)
   46398:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   4639c:	b9bd      	cbnz	r5, 463ce <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   4639e:	2260      	movs	r2, #96	; 0x60
   463a0:	4629      	mov	r1, r5
   463a2:	f104 0010 	add.w	r0, r4, #16
   463a6:	f005 fce9 	bl	4bd7c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   463aa:	2006      	movs	r0, #6
   463ac:	f7e6 fc62 	bl	2cc74 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   463b0:	4b09      	ldr	r3, [pc, #36]	; (463d8 <nrfx_gpiote_init+0x44>)
    return err_code;
   463b2:	480a      	ldr	r0, [pc, #40]	; (463dc <nrfx_gpiote_init+0x48>)
   463b4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   463b8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   463bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   463c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   463c4:	2301      	movs	r3, #1
   463c6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   463ca:	6763      	str	r3, [r4, #116]	; 0x74
}
   463cc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   463ce:	4804      	ldr	r0, [pc, #16]	; (463e0 <nrfx_gpiote_init+0x4c>)
   463d0:	e7fc      	b.n	463cc <nrfx_gpiote_init+0x38>
   463d2:	bf00      	nop
   463d4:	20000e30 	.word	0x20000e30
   463d8:	40006000 	.word	0x40006000
   463dc:	0bad0000 	.word	0x0bad0000
   463e0:	0bad0005 	.word	0x0bad0005

000463e4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   463e4:	4b03      	ldr	r3, [pc, #12]	; (463f4 <nrfx_gpiote_is_init+0x10>)
   463e6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   463ea:	3800      	subs	r0, #0
   463ec:	bf18      	it	ne
   463ee:	2001      	movne	r0, #1
   463f0:	4770      	bx	lr
   463f2:	bf00      	nop
   463f4:	20000e30 	.word	0x20000e30

000463f8 <nrfx_gpiote_channel_free>:
{
   463f8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   463fa:	4801      	ldr	r0, [pc, #4]	; (46400 <nrfx_gpiote_channel_free+0x8>)
   463fc:	f7ff bd66 	b.w	45ecc <nrfx_flag32_free>
   46400:	20000ea0 	.word	0x20000ea0

00046404 <nrfx_gpiote_channel_alloc>:
{
   46404:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   46406:	4801      	ldr	r0, [pc, #4]	; (4640c <nrfx_gpiote_channel_alloc+0x8>)
   46408:	f7ff bd40 	b.w	45e8c <nrfx_flag32_alloc>
   4640c:	20000ea0 	.word	0x20000ea0

00046410 <nrfx_gpiote_trigger_enable>:
{
   46410:	b537      	push	{r0, r1, r2, r4, r5, lr}
   46412:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   46414:	f7ff fe16 	bl	46044 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   46418:	f104 0208 	add.w	r2, r4, #8
   4641c:	4b1e      	ldr	r3, [pc, #120]	; (46498 <nrfx_gpiote_trigger_enable+0x88>)
   4641e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   46422:	b1e8      	cbz	r0, 46460 <nrfx_gpiote_trigger_enable+0x50>
   46424:	f013 0502 	ands.w	r5, r3, #2
   46428:	d11a      	bne.n	46460 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   4642a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   4642c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   4642e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   46432:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   46436:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   4643a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   4643e:	6005      	str	r5, [r0, #0]
   46440:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   46442:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   46446:	f040 0001 	orr.w	r0, r0, #1
   4644a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   4644e:	b129      	cbz	r1, 4645c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   46450:	2201      	movs	r2, #1
   46452:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   46456:	4a11      	ldr	r2, [pc, #68]	; (4649c <nrfx_gpiote_trigger_enable+0x8c>)
   46458:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   4645c:	b003      	add	sp, #12
   4645e:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   46460:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   46464:	2b04      	cmp	r3, #4
   46466:	d012      	beq.n	4648e <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   46468:	2b05      	cmp	r3, #5
   4646a:	d012      	beq.n	46492 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   4646c:	a801      	add	r0, sp, #4
   4646e:	9401      	str	r4, [sp, #4]
   46470:	f7ff fdda 	bl	46028 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   46474:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   46476:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   4647a:	40d9      	lsrs	r1, r3
   4647c:	f001 0101 	and.w	r1, r1, #1
   46480:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   46482:	4620      	mov	r0, r4
}
   46484:	b003      	add	sp, #12
   46486:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   4648a:	f009 bf42 	b.w	50312 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   4648e:	2103      	movs	r1, #3
   46490:	e7f7      	b.n	46482 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   46492:	2102      	movs	r1, #2
   46494:	e7f5      	b.n	46482 <nrfx_gpiote_trigger_enable+0x72>
   46496:	bf00      	nop
   46498:	20000e30 	.word	0x20000e30
   4649c:	40006000 	.word	0x40006000

000464a0 <nrfx_gpiote_trigger_disable>:
{
   464a0:	b508      	push	{r3, lr}
   464a2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   464a4:	f7ff fdce 	bl	46044 <pin_in_use_by_te>
   464a8:	b1c0      	cbz	r0, 464dc <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   464aa:	f102 0108 	add.w	r1, r2, #8
   464ae:	4b0e      	ldr	r3, [pc, #56]	; (464e8 <nrfx_gpiote_trigger_disable+0x48>)
   464b0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   464b4:	0799      	lsls	r1, r3, #30
   464b6:	d411      	bmi.n	464dc <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   464b8:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   464ba:	2201      	movs	r2, #1
   464bc:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   464be:	009b      	lsls	r3, r3, #2
   464c0:	490a      	ldr	r1, [pc, #40]	; (464ec <nrfx_gpiote_trigger_disable+0x4c>)
   464c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   464c6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   464ca:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   464ce:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   464d2:	f022 0203 	bic.w	r2, r2, #3
   464d6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   464da:	bd08      	pop	{r3, pc}
   464dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   464e0:	2100      	movs	r1, #0
   464e2:	4610      	mov	r0, r2
   464e4:	f009 bf15 	b.w	50312 <nrf_gpio_cfg_sense_set>
   464e8:	20000e30 	.word	0x20000e30
   464ec:	40006000 	.word	0x40006000

000464f0 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   464f0:	4b0e      	ldr	r3, [pc, #56]	; (4652c <nrfx_gpiote_pin_uninit+0x3c>)
   464f2:	f100 0208 	add.w	r2, r0, #8
{
   464f6:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   464f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   464fc:	07db      	lsls	r3, r3, #31
{
   464fe:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   46500:	d511      	bpl.n	46526 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   46502:	f7ff ffcd 	bl	464a0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   46506:	4620      	mov	r0, r4
   46508:	f7ff fdee 	bl	460e8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   4650c:	a801      	add	r0, sp, #4
   4650e:	9401      	str	r4, [sp, #4]
   46510:	f7ff fd8a 	bl	46028 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   46514:	9b01      	ldr	r3, [sp, #4]
   46516:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   4651a:	2202      	movs	r2, #2
   4651c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   46520:	4803      	ldr	r0, [pc, #12]	; (46530 <nrfx_gpiote_pin_uninit+0x40>)
}
   46522:	b002      	add	sp, #8
   46524:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   46526:	4803      	ldr	r0, [pc, #12]	; (46534 <nrfx_gpiote_pin_uninit+0x44>)
   46528:	e7fb      	b.n	46522 <nrfx_gpiote_pin_uninit+0x32>
   4652a:	bf00      	nop
   4652c:	20000e30 	.word	0x20000e30
   46530:	0bad0000 	.word	0x0bad0000
   46534:	0bad0004 	.word	0x0bad0004

00046538 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   46538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4653c:	4b68      	ldr	r3, [pc, #416]	; (466e0 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
   4653e:	4869      	ldr	r0, [pc, #420]	; (466e4 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   46540:	4969      	ldr	r1, [pc, #420]	; (466e8 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
   46542:	2600      	movs	r6, #0
{
   46544:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   46546:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   46548:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4654a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   4654c:	b135      	cbz	r5, 4655c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   4654e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   46552:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   46554:	bf1e      	ittt	ne
   46556:	601c      	strne	r4, [r3, #0]
   46558:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   4655a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   4655c:	3304      	adds	r3, #4
   4655e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   46560:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   46564:	d1f1      	bne.n	4654a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   46566:	f8df 917c 	ldr.w	r9, [pc, #380]	; 466e4 <nrfx_gpiote_irq_handler+0x1ac>
   4656a:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   4656e:	2b00      	cmp	r3, #0
   46570:	f000 8099 	beq.w	466a6 <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
   46574:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   46578:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   4657c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   4657e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   46582:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   46586:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   46588:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   4658c:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   46590:	f10d 0a10 	add.w	sl, sp, #16
   46594:	ea4f 1348 	mov.w	r3, r8, lsl #5
   46598:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   4659a:	f04f 0b01 	mov.w	fp, #1
   4659e:	e049      	b.n	46634 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   465a0:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   465a2:	4a52      	ldr	r2, [pc, #328]	; (466ec <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   465a4:	fa94 f4a4 	rbit	r4, r4
   465a8:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   465ac:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   465ae:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   465b0:	f104 0308 	add.w	r3, r4, #8
   465b4:	9403      	str	r4, [sp, #12]
   465b6:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   465ba:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   465be:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   465c2:	fa0b f202 	lsl.w	r2, fp, r2
   465c6:	ea23 0302 	bic.w	r3, r3, r2
   465ca:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   465ce:	a803      	add	r0, sp, #12
   465d0:	f7ff fd2a 	bl	46028 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   465d4:	9b03      	ldr	r3, [sp, #12]
   465d6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   465da:	08b9      	lsrs	r1, r7, #2
   465dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   465e0:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   465e4:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   465e6:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   465e8:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   465ec:	d52c      	bpl.n	46648 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   465ee:	4620      	mov	r0, r4
   465f0:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   465f2:	b2dd      	uxtb	r5, r3
   465f4:	f7ff fd30 	bl	46058 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   465f8:	a803      	add	r0, sp, #12
   465fa:	9403      	str	r4, [sp, #12]
   465fc:	f7ff fd14 	bl	46028 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   46600:	9b03      	ldr	r3, [sp, #12]
   46602:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   46606:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   4660a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   4660e:	429d      	cmp	r5, r3
   46610:	d107      	bne.n	46622 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   46612:	2100      	movs	r1, #0
   46614:	4620      	mov	r0, r4
   46616:	f009 fe7c 	bl	50312 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   4661a:	4629      	mov	r1, r5
   4661c:	4620      	mov	r0, r4
   4661e:	f009 fe78 	bl	50312 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46622:	a803      	add	r0, sp, #12
   46624:	9403      	str	r4, [sp, #12]
   46626:	f7ff fcff 	bl	46028 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   4662a:	9b03      	ldr	r3, [sp, #12]
   4662c:	fa0b f303 	lsl.w	r3, fp, r3
   46630:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   46634:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   46638:	2c00      	cmp	r4, #0
   4663a:	d1b1      	bne.n	465a0 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   4663c:	f1b8 0f00 	cmp.w	r8, #0
   46640:	d11d      	bne.n	4667e <nrfx_gpiote_irq_handler+0x146>
   46642:	f04f 0801 	mov.w	r8, #1
   46646:	e7a5      	b.n	46594 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   46648:	2b02      	cmp	r3, #2
   4664a:	d10c      	bne.n	46666 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   4664c:	2103      	movs	r1, #3
   4664e:	4620      	mov	r0, r4
   46650:	f009 fe5f 	bl	50312 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   46654:	f005 0305 	and.w	r3, r5, #5
   46658:	2b01      	cmp	r3, #1
   4665a:	d1e2      	bne.n	46622 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   4665c:	4639      	mov	r1, r7
   4665e:	4620      	mov	r0, r4
   46660:	f7ff fcfa 	bl	46058 <call_handler>
   46664:	e7dd      	b.n	46622 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   46666:	2102      	movs	r1, #2
   46668:	4620      	mov	r0, r4
   4666a:	9301      	str	r3, [sp, #4]
   4666c:	f009 fe51 	bl	50312 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   46670:	2d03      	cmp	r5, #3
   46672:	d0f3      	beq.n	4665c <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   46674:	9b01      	ldr	r3, [sp, #4]
   46676:	2b03      	cmp	r3, #3
   46678:	d1d3      	bne.n	46622 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   4667a:	2d02      	cmp	r5, #2
   4667c:	e7ed      	b.n	4665a <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   4667e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   46682:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   46686:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   4668a:	4919      	ldr	r1, [pc, #100]	; (466f0 <nrfx_gpiote_irq_handler+0x1b8>)
   4668c:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   46690:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   46692:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   46696:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   4669a:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   4669c:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   4669e:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   466a2:	f47f af73 	bne.w	4658c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   466a6:	2401      	movs	r4, #1
    while (mask)
   466a8:	b916      	cbnz	r6, 466b0 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   466aa:	b007      	add	sp, #28
   466ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   466b0:	fa96 f3a6 	rbit	r3, r6
   466b4:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   466b8:	fa04 f203 	lsl.w	r2, r4, r3
   466bc:	009b      	lsls	r3, r3, #2
   466be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   466c2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   466c6:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   466ca:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   466ce:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   466d2:	f3c0 2005 	ubfx	r0, r0, #8, #6
   466d6:	f3c1 4101 	ubfx	r1, r1, #16, #2
   466da:	f7ff fcbd 	bl	46058 <call_handler>
   466de:	e7e3      	b.n	466a8 <nrfx_gpiote_irq_handler+0x170>
   466e0:	40006100 	.word	0x40006100
   466e4:	40006000 	.word	0x40006000
   466e8:	40006120 	.word	0x40006120
   466ec:	20000e30 	.word	0x20000e30
   466f0:	50000300 	.word	0x50000300

000466f4 <nvmc_word_write>:
   466f4:	4a04      	ldr	r2, [pc, #16]	; (46708 <nvmc_word_write+0x14>)
   466f6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   466fa:	07db      	lsls	r3, r3, #31
   466fc:	d5fb      	bpl.n	466f6 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   466fe:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   46700:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   46704:	4770      	bx	lr
   46706:	bf00      	nop
   46708:	4001e000 	.word	0x4001e000

0004670c <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   4670c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   46710:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   46712:	fbb0 f3f2 	udiv	r3, r0, r2
   46716:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   4671a:	b973      	cbnz	r3, 4673a <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   4671c:	4b08      	ldr	r3, [pc, #32]	; (46740 <nrfx_nvmc_page_erase+0x34>)
   4671e:	2202      	movs	r2, #2
   46720:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   46724:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   46728:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   4672c:	07d2      	lsls	r2, r2, #31
   4672e:	d5fb      	bpl.n	46728 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   46730:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   46732:	4804      	ldr	r0, [pc, #16]	; (46744 <nrfx_nvmc_page_erase+0x38>)
   46734:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   46738:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   4673a:	4803      	ldr	r0, [pc, #12]	; (46748 <nrfx_nvmc_page_erase+0x3c>)
}
   4673c:	4770      	bx	lr
   4673e:	bf00      	nop
   46740:	4001e000 	.word	0x4001e000
   46744:	0bad0000 	.word	0x0bad0000
   46748:	0bad000a 	.word	0x0bad000a

0004674c <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   4674c:	b510      	push	{r4, lr}
   4674e:	4c05      	ldr	r4, [pc, #20]	; (46764 <nrfx_nvmc_word_write+0x18>)
   46750:	2301      	movs	r3, #1
   46752:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   46756:	f7ff ffcd 	bl	466f4 <nvmc_word_write>
   4675a:	2300      	movs	r3, #0
   4675c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   46760:	bd10      	pop	{r4, pc}
   46762:	bf00      	nop
   46764:	4001e000 	.word	0x4001e000

00046768 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   46768:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   4676a:	4c17      	ldr	r4, [pc, #92]	; (467c8 <nrfx_power_init+0x60>)
   4676c:	7823      	ldrb	r3, [r4, #0]
   4676e:	bb4b      	cbnz	r3, 467c4 <nrfx_power_init+0x5c>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   46770:	7803      	ldrb	r3, [r0, #0]
    if (enable && nrf52_errata_197())
   46772:	0799      	lsls	r1, r3, #30
   46774:	f3c3 0240 	ubfx	r2, r3, #1, #1
   46778:	d512      	bpl.n	467a0 <nrfx_power_init+0x38>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   4677a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
            if (var1 == 0x08)
   4677e:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   46782:	2908      	cmp	r1, #8
   46784:	d10b      	bne.n	4679e <nrfx_power_init+0x36>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   46786:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
                switch(var2)
   4678a:	2a05      	cmp	r2, #5
   4678c:	d807      	bhi.n	4679e <nrfx_power_init+0x36>
   4678e:	490f      	ldr	r1, [pc, #60]	; (467cc <nrfx_power_init+0x64>)
   46790:	5c8a      	ldrb	r2, [r1, r2]
   46792:	b122      	cbz	r2, 4679e <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   46794:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   46798:	2101      	movs	r1, #1
   4679a:	f8c2 1638 	str.w	r1, [r2, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   4679e:	2201      	movs	r2, #1
   467a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   467a4:	f003 0301 	and.w	r3, r3, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   467a8:	f8c1 2580 	str.w	r2, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   467ac:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   467ae:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
   467b2:	f7e6 fa81 	bl	2ccb8 <arch_irq_is_enabled>
   467b6:	b908      	cbnz	r0, 467bc <nrfx_power_init+0x54>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   467b8:	f7e6 fa5c 	bl	2cc74 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   467bc:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   467be:	4804      	ldr	r0, [pc, #16]	; (467d0 <nrfx_power_init+0x68>)
    m_initialized = true;
   467c0:	7023      	strb	r3, [r4, #0]
}
   467c2:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   467c4:	4803      	ldr	r0, [pc, #12]	; (467d4 <nrfx_power_init+0x6c>)
   467c6:	e7fc      	b.n	467c2 <nrfx_power_init+0x5a>
   467c8:	2000742a 	.word	0x2000742a
   467cc:	000544c1 	.word	0x000544c1
   467d0:	0bad0000 	.word	0x0bad0000
   467d4:	0bad000c 	.word	0x0bad000c

000467d8 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   467d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   467dc:	f44f 7260 	mov.w	r2, #896	; 0x380
   467e0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   467e4:	4b01      	ldr	r3, [pc, #4]	; (467ec <nrfx_power_usbevt_uninit+0x14>)
   467e6:	2200      	movs	r2, #0
   467e8:	601a      	str	r2, [r3, #0]
}
   467ea:	4770      	bx	lr
   467ec:	20006e40 	.word	0x20006e40

000467f0 <nrfx_power_usbevt_init>:
{
   467f0:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   467f2:	f7ff fff1 	bl	467d8 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   467f6:	6803      	ldr	r3, [r0, #0]
   467f8:	b10b      	cbz	r3, 467fe <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   467fa:	4a01      	ldr	r2, [pc, #4]	; (46800 <nrfx_power_usbevt_init+0x10>)
   467fc:	6013      	str	r3, [r2, #0]
}
   467fe:	bd08      	pop	{r3, pc}
   46800:	20006e40 	.word	0x20006e40

00046804 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
   46804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   46808:	b510      	push	{r4, lr}
   4680a:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   4680e:	0762      	lsls	r2, r4, #29
   46810:	d507      	bpl.n	46822 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   46812:	f44f 7084 	mov.w	r0, #264	; 0x108
   46816:	f009 fd99 	bl	5034c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   4681a:	b110      	cbz	r0, 46822 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   4681c:	4b1e      	ldr	r3, [pc, #120]	; (46898 <nrfx_power_irq_handler+0x94>)
   4681e:	681b      	ldr	r3, [r3, #0]
   46820:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   46822:	06a3      	lsls	r3, r4, #26
   46824:	d508      	bpl.n	46838 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   46826:	f44f 708a 	mov.w	r0, #276	; 0x114
   4682a:	f009 fd8f 	bl	5034c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   4682e:	b118      	cbz	r0, 46838 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   46830:	4b1a      	ldr	r3, [pc, #104]	; (4689c <nrfx_power_irq_handler+0x98>)
   46832:	2000      	movs	r0, #0
   46834:	681b      	ldr	r3, [r3, #0]
   46836:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   46838:	0660      	lsls	r0, r4, #25
   4683a:	d508      	bpl.n	4684e <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   4683c:	f44f 708c 	mov.w	r0, #280	; 0x118
   46840:	f009 fd84 	bl	5034c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   46844:	b118      	cbz	r0, 4684e <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   46846:	4b15      	ldr	r3, [pc, #84]	; (4689c <nrfx_power_irq_handler+0x98>)
   46848:	2001      	movs	r0, #1
   4684a:	681b      	ldr	r3, [r3, #0]
   4684c:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   4684e:	0621      	lsls	r1, r4, #24
   46850:	d508      	bpl.n	46864 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   46852:	f44f 708e 	mov.w	r0, #284	; 0x11c
   46856:	f009 fd79 	bl	5034c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   4685a:	b118      	cbz	r0, 46864 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   4685c:	4b10      	ldr	r3, [pc, #64]	; (468a0 <nrfx_power_irq_handler+0x9c>)
   4685e:	2000      	movs	r0, #0
   46860:	681b      	ldr	r3, [r3, #0]
   46862:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   46864:	05e2      	lsls	r2, r4, #23
   46866:	d508      	bpl.n	4687a <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   46868:	f44f 7090 	mov.w	r0, #288	; 0x120
   4686c:	f009 fd6e 	bl	5034c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   46870:	b118      	cbz	r0, 4687a <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   46872:	4b0b      	ldr	r3, [pc, #44]	; (468a0 <nrfx_power_irq_handler+0x9c>)
   46874:	2001      	movs	r0, #1
   46876:	681b      	ldr	r3, [r3, #0]
   46878:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   4687a:	05a3      	lsls	r3, r4, #22
   4687c:	d50a      	bpl.n	46894 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   4687e:	f44f 7092 	mov.w	r0, #292	; 0x124
   46882:	f009 fd63 	bl	5034c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   46886:	b128      	cbz	r0, 46894 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   46888:	4b05      	ldr	r3, [pc, #20]	; (468a0 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
   4688a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   4688e:	681b      	ldr	r3, [r3, #0]
   46890:	2002      	movs	r0, #2
   46892:	4718      	bx	r3
}
   46894:	bd10      	pop	{r4, pc}
   46896:	bf00      	nop
   46898:	20006e48 	.word	0x20006e48
   4689c:	20006e44 	.word	0x20006e44
   468a0:	20006e40 	.word	0x20006e40

000468a4 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   468a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   468a8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   468ac:	2a08      	cmp	r2, #8
   468ae:	d106      	bne.n	468be <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   468b0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   468b4:	2b05      	cmp	r3, #5
   468b6:	d804      	bhi.n	468c2 <nrf52_errata_187+0x1e>
   468b8:	4a03      	ldr	r2, [pc, #12]	; (468c8 <nrf52_errata_187+0x24>)
   468ba:	5cd0      	ldrb	r0, [r2, r3]
   468bc:	4770      	bx	lr
                        return false;
   468be:	2000      	movs	r0, #0
   468c0:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   468c2:	2001      	movs	r0, #1
}
   468c4:	4770      	bx	lr
   468c6:	bf00      	nop
   468c8:	000544c7 	.word	0x000544c7

000468cc <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   468cc:	4b05      	ldr	r3, [pc, #20]	; (468e4 <ep_state_access+0x18>)
   468ce:	f010 0f80 	tst.w	r0, #128	; 0x80
   468d2:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   468d6:	bf08      	it	eq
   468d8:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   468da:	f000 000f 	and.w	r0, r0, #15
}
   468de:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   468e2:	4770      	bx	lr
   468e4:	20006ff4 	.word	0x20006ff4

000468e8 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   468e8:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   468ea:	4a07      	ldr	r2, [pc, #28]	; (46908 <ev_usbreset_handler+0x20>)
   468ec:	2300      	movs	r3, #0
   468ee:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   468f0:	4a06      	ldr	r2, [pc, #24]	; (4690c <ev_usbreset_handler+0x24>)
   468f2:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
   468f4:	2301      	movs	r3, #1
   468f6:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   468f8:	4b05      	ldr	r3, [pc, #20]	; (46910 <ev_usbreset_handler+0x28>)
   468fa:	a801      	add	r0, sp, #4
   468fc:	681b      	ldr	r3, [r3, #0]
   468fe:	4798      	blx	r3
}
   46900:	b003      	add	sp, #12
   46902:	f85d fb04 	ldr.w	pc, [sp], #4
   46906:	bf00      	nop
   46908:	2000742d 	.word	0x2000742d
   4690c:	2000742c 	.word	0x2000742c
   46910:	2000708c 	.word	0x2000708c

00046914 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
   46914:	4b19      	ldr	r3, [pc, #100]	; (4697c <ev_usbevent_handler+0x68>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   46916:	b513      	push	{r0, r1, r4, lr}
   46918:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   4691c:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   46920:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   46922:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   46926:	d508      	bpl.n	4693a <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   46928:	4b15      	ldr	r3, [pc, #84]	; (46980 <ev_usbevent_handler+0x6c>)
   4692a:	2201      	movs	r2, #1
   4692c:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   4692e:	2302      	movs	r3, #2
   46930:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   46932:	4b14      	ldr	r3, [pc, #80]	; (46984 <ev_usbevent_handler+0x70>)
   46934:	a801      	add	r0, sp, #4
   46936:	681b      	ldr	r3, [r3, #0]
   46938:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   4693a:	05a2      	lsls	r2, r4, #22
   4693c:	d508      	bpl.n	46950 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   4693e:	4b10      	ldr	r3, [pc, #64]	; (46980 <ev_usbevent_handler+0x6c>)
   46940:	2200      	movs	r2, #0
   46942:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   46944:	2303      	movs	r3, #3
   46946:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   46948:	4b0e      	ldr	r3, [pc, #56]	; (46984 <ev_usbevent_handler+0x70>)
   4694a:	a801      	add	r0, sp, #4
   4694c:	681b      	ldr	r3, [r3, #0]
   4694e:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   46950:	0563      	lsls	r3, r4, #21
   46952:	d510      	bpl.n	46976 <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   46954:	4b0a      	ldr	r3, [pc, #40]	; (46980 <ev_usbevent_handler+0x6c>)
   46956:	781a      	ldrb	r2, [r3, #0]
   46958:	b16a      	cbz	r2, 46976 <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   4695a:	2200      	movs	r2, #0
   4695c:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   4695e:	4b07      	ldr	r3, [pc, #28]	; (4697c <ev_usbevent_handler+0x68>)
   46960:	2201      	movs	r2, #1
   46962:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   46966:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   46968:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   4696a:	2304      	movs	r3, #4
   4696c:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   4696e:	4b05      	ldr	r3, [pc, #20]	; (46984 <ev_usbevent_handler+0x70>)
   46970:	a801      	add	r0, sp, #4
   46972:	681b      	ldr	r3, [r3, #0]
   46974:	4798      	blx	r3
        }
    }
}
   46976:	b002      	add	sp, #8
   46978:	bd10      	pop	{r4, pc}
   4697a:	bf00      	nop
   4697c:	40027000 	.word	0x40027000
   46980:	2000742d 	.word	0x2000742d
   46984:	2000708c 	.word	0x2000708c

00046988 <usbd_errata_187_211_begin>:
	__asm__ volatile(
   46988:	f04f 0320 	mov.w	r3, #32
   4698c:	f3ef 8011 	mrs	r0, BASEPRI
   46990:	f383 8812 	msr	BASEPRI_MAX, r3
   46994:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   46998:	4b0a      	ldr	r3, [pc, #40]	; (469c4 <usbd_errata_187_211_begin+0x3c>)
   4699a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   4699e:	2203      	movs	r2, #3
   469a0:	b961      	cbnz	r1, 469bc <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   469a2:	f249 3175 	movw	r1, #37749	; 0x9375
   469a6:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   469aa:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   469ae:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   469b2:	f380 8811 	msr	BASEPRI, r0
   469b6:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   469ba:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   469bc:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   469c0:	e7f7      	b.n	469b2 <usbd_errata_187_211_begin+0x2a>
   469c2:	bf00      	nop
   469c4:	4006e000 	.word	0x4006e000

000469c8 <usbd_errata_187_211_end>:
	__asm__ volatile(
   469c8:	f04f 0320 	mov.w	r3, #32
   469cc:	f3ef 8011 	mrs	r0, BASEPRI
   469d0:	f383 8812 	msr	BASEPRI_MAX, r3
   469d4:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   469d8:	4b0a      	ldr	r3, [pc, #40]	; (46a04 <usbd_errata_187_211_end+0x3c>)
   469da:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   469de:	b961      	cbnz	r1, 469fa <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   469e0:	f249 3275 	movw	r2, #37749	; 0x9375
   469e4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   469e8:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   469ec:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   469f0:	f380 8811 	msr	BASEPRI, r0
   469f4:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   469f8:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   469fa:	2200      	movs	r2, #0
   469fc:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   46a00:	e7f6      	b.n	469f0 <usbd_errata_187_211_end+0x28>
   46a02:	bf00      	nop
   46a04:	4006e000 	.word	0x4006e000

00046a08 <nrfx_usbd_feeder_flash>:
{
   46a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   46a0a:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   46a0c:	4f0b      	ldr	r7, [pc, #44]	; (46a3c <nrfx_usbd_feeder_flash+0x34>)
{
   46a0e:	460c      	mov	r4, r1
   46a10:	429a      	cmp	r2, r3
   46a12:	bf28      	it	cs
   46a14:	461a      	movcs	r2, r3
   46a16:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   46a18:	6809      	ldr	r1, [r1, #0]
   46a1a:	4638      	mov	r0, r7
   46a1c:	4615      	mov	r5, r2
   46a1e:	f005 f9a2 	bl	4bd66 <memcpy>
    p_transfer->size -= tx_size;
   46a22:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   46a24:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
   46a26:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
   46a28:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
   46a2c:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
   46a2e:	6060      	str	r0, [r4, #4]
}
   46a30:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   46a32:	6023      	str	r3, [r4, #0]
}
   46a34:	bf18      	it	ne
   46a36:	2001      	movne	r0, #1
   46a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   46a3a:	bf00      	nop
   46a3c:	20006e4c 	.word	0x20006e4c

00046a40 <nrfx_usbd_feeder_flash_zlp>:
    if (tx_size > ep_size)
   46a40:	684b      	ldr	r3, [r1, #4]
   46a42:	429a      	cmp	r2, r3
   46a44:	bf28      	it	cs
   46a46:	461a      	movcs	r2, r3
{
   46a48:	b570      	push	{r4, r5, r6, lr}
   46a4a:	4606      	mov	r6, r0
   46a4c:	460d      	mov	r5, r1
   46a4e:	4614      	mov	r4, r2
    if (tx_size != 0)
   46a50:	b182      	cbz	r2, 46a74 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   46a52:	6809      	ldr	r1, [r1, #0]
   46a54:	4808      	ldr	r0, [pc, #32]	; (46a78 <nrfx_usbd_feeder_flash_zlp+0x38>)
   46a56:	f005 f986 	bl	4bd66 <memcpy>
        p_next->p_data.tx = p_buffer;
   46a5a:	4b07      	ldr	r3, [pc, #28]	; (46a78 <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
   46a5c:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
   46a60:	686b      	ldr	r3, [r5, #4]
   46a62:	1b1b      	subs	r3, r3, r4
   46a64:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   46a66:	682b      	ldr	r3, [r5, #0]
}
   46a68:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   46a6a:	4423      	add	r3, r4
   46a6c:	602b      	str	r3, [r5, #0]
}
   46a6e:	bf18      	it	ne
   46a70:	2001      	movne	r0, #1
   46a72:	bd70      	pop	{r4, r5, r6, pc}
   46a74:	4613      	mov	r3, r2
   46a76:	e7f1      	b.n	46a5c <nrfx_usbd_feeder_flash_zlp+0x1c>
   46a78:	20006e4c 	.word	0x20006e4c

00046a7c <ev_sof_handler>:
{
   46a7c:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   46a7e:	2300      	movs	r3, #0
   46a80:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   46a84:	4b0b      	ldr	r3, [pc, #44]	; (46ab4 <ev_sof_handler+0x38>)
   46a86:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   46a8a:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   46a8e:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   46a92:	4a09      	ldr	r2, [pc, #36]	; (46ab8 <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
   46a94:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
   46a96:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
   46a98:	bf14      	ite	ne
   46a9a:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
   46a9e:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
   46aa2:	430b      	orrs	r3, r1
   46aa4:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   46aa6:	4b05      	ldr	r3, [pc, #20]	; (46abc <ev_sof_handler+0x40>)
   46aa8:	a801      	add	r0, sp, #4
   46aaa:	681b      	ldr	r3, [r3, #0]
   46aac:	4798      	blx	r3
}
   46aae:	b003      	add	sp, #12
   46ab0:	f85d fb04 	ldr.w	pc, [sp], #4
   46ab4:	40027000 	.word	0x40027000
   46ab8:	20007088 	.word	0x20007088
   46abc:	2000708c 	.word	0x2000708c

00046ac0 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   46ac0:	4b06      	ldr	r3, [pc, #24]	; (46adc <atomic_and.constprop.0.isra.0+0x1c>)
   46ac2:	f3bf 8f5b 	dmb	ish
   46ac6:	e853 1f00 	ldrex	r1, [r3]
   46aca:	4001      	ands	r1, r0
   46acc:	e843 1200 	strex	r2, r1, [r3]
   46ad0:	2a00      	cmp	r2, #0
   46ad2:	d1f8      	bne.n	46ac6 <atomic_and.constprop.0.isra.0+0x6>
   46ad4:	f3bf 8f5b 	dmb	ish
}
   46ad8:	4770      	bx	lr
   46ada:	bf00      	nop
   46adc:	20007084 	.word	0x20007084

00046ae0 <usbd_dma_pending_clear>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   46ae0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   46ae4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   46ae8:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   46aea:	bf02      	ittt	eq
   46aec:	4b03      	ldreq	r3, [pc, #12]	; (46afc <usbd_dma_pending_clear+0x1c>)
   46aee:	2200      	moveq	r2, #0
   46af0:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
   46af4:	4b02      	ldr	r3, [pc, #8]	; (46b00 <usbd_dma_pending_clear+0x20>)
   46af6:	2200      	movs	r2, #0
   46af8:	701a      	strb	r2, [r3, #0]
}
   46afa:	4770      	bx	lr
   46afc:	40027000 	.word	0x40027000
   46b00:	2000742b 	.word	0x2000742b

00046b04 <nrf_usbd_ep0in_dma_handler>:
{
   46b04:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   46b06:	f7ff ffeb 	bl	46ae0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   46b0a:	4b08      	ldr	r3, [pc, #32]	; (46b2c <nrf_usbd_ep0in_dma_handler+0x28>)
   46b0c:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   46b10:	2a03      	cmp	r2, #3
   46b12:	d105      	bne.n	46b20 <nrf_usbd_ep0in_dma_handler+0x1c>
}
   46b14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   46b18:	f06f 0001 	mvn.w	r0, #1
   46b1c:	f7ff bfd0 	b.w	46ac0 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   46b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   46b24:	2b00      	cmp	r3, #0
   46b26:	d0f5      	beq.n	46b14 <nrf_usbd_ep0in_dma_handler+0x10>
}
   46b28:	bd08      	pop	{r3, pc}
   46b2a:	bf00      	nop
   46b2c:	20006f64 	.word	0x20006f64

00046b30 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
   46b30:	2201      	movs	r2, #1
{
   46b32:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
   46b34:	fa02 f501 	lsl.w	r5, r2, r1
   46b38:	491c      	ldr	r1, [pc, #112]	; (46bac <usbd_ep_data_handler+0x7c>)
   46b3a:	4e1d      	ldr	r6, [pc, #116]	; (46bb0 <usbd_ep_data_handler+0x80>)
   46b3c:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   46b3e:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
   46b42:	ea43 0305 	orr.w	r3, r3, r5
{
   46b46:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   46b48:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   46b4a:	d024      	beq.n	46b96 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   46b4c:	f000 020f 	and.w	r2, r0, #15
   46b50:	4b18      	ldr	r3, [pc, #96]	; (46bb4 <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   46b52:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   46b56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   46b5a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   46b5e:	681a      	ldr	r2, [r3, #0]
    if (ret)
   46b60:	b132      	cbz	r2, 46b70 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   46b62:	2200      	movs	r2, #0
   46b64:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   46b66:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   46b68:	681b      	ldr	r3, [r3, #0]
   46b6a:	d011      	beq.n	46b90 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
   46b6c:	f009 fc55 	bl	5041a <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   46b70:	6833      	ldr	r3, [r6, #0]
   46b72:	402b      	ands	r3, r5
   46b74:	d10a      	bne.n	46b8c <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   46b76:	2206      	movs	r2, #6
   46b78:	f88d 2004 	strb.w	r2, [sp, #4]
   46b7c:	f88d 4006 	strb.w	r4, [sp, #6]
   46b80:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   46b84:	4b0c      	ldr	r3, [pc, #48]	; (46bb8 <usbd_ep_data_handler+0x88>)
   46b86:	a801      	add	r0, sp, #4
   46b88:	681b      	ldr	r3, [r3, #0]
   46b8a:	4798      	blx	r3
}
   46b8c:	b002      	add	sp, #8
   46b8e:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   46b90:	f7ff ffb8 	bl	46b04 <nrf_usbd_ep0in_dma_handler>
   46b94:	e7ec      	b.n	46b70 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   46b96:	6833      	ldr	r3, [r6, #0]
   46b98:	421d      	tst	r5, r3
   46b9a:	d1f7      	bne.n	46b8c <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   46b9c:	2306      	movs	r3, #6
   46b9e:	f88d 3004 	strb.w	r3, [sp, #4]
   46ba2:	f88d 0006 	strb.w	r0, [sp, #6]
   46ba6:	f88d 2007 	strb.w	r2, [sp, #7]
   46baa:	e7eb      	b.n	46b84 <usbd_ep_data_handler+0x54>
   46bac:	20007088 	.word	0x20007088
   46bb0:	20007084 	.word	0x20007084
   46bb4:	00053cb2 	.word	0x00053cb2
   46bb8:	2000708c 	.word	0x2000708c

00046bbc <ev_setup_data_handler>:
{
   46bbc:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   46bbe:	4b05      	ldr	r3, [pc, #20]	; (46bd4 <ev_setup_data_handler+0x18>)
   46bc0:	781a      	ldrb	r2, [r3, #0]
   46bc2:	4610      	mov	r0, r2
   46bc4:	f009 fc20 	bl	50408 <ep2bit>
}
   46bc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   46bcc:	4601      	mov	r1, r0
   46bce:	4610      	mov	r0, r2
   46bd0:	f7ff bfae 	b.w	46b30 <usbd_ep_data_handler>
   46bd4:	2000742c 	.word	0x2000742c

00046bd8 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   46bd8:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   46bda:	f7ff ff81 	bl	46ae0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   46bde:	4b0c      	ldr	r3, [pc, #48]	; (46c10 <ev_dma_epout8_handler+0x38>)
   46be0:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   46be4:	2a03      	cmp	r2, #3
   46be6:	d010      	beq.n	46c0a <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   46be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   46bec:	b96b      	cbnz	r3, 46c0a <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   46bee:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   46bf2:	f7ff ff65 	bl	46ac0 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   46bf6:	2306      	movs	r3, #6
   46bf8:	f88d 3004 	strb.w	r3, [sp, #4]
   46bfc:	2308      	movs	r3, #8
   46bfe:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   46c02:	4b04      	ldr	r3, [pc, #16]	; (46c14 <ev_dma_epout8_handler+0x3c>)
   46c04:	a801      	add	r0, sp, #4
   46c06:	681b      	ldr	r3, [r3, #0]
   46c08:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   46c0a:	b003      	add	sp, #12
   46c0c:	f85d fb04 	ldr.w	pc, [sp], #4
   46c10:	20006f64 	.word	0x20006f64
   46c14:	2000708c 	.word	0x2000708c

00046c18 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   46c18:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   46c1a:	f7ff ff61 	bl	46ae0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   46c1e:	4b10      	ldr	r3, [pc, #64]	; (46c60 <ev_dma_epin8_handler+0x48>)
   46c20:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   46c24:	2a03      	cmp	r2, #3
   46c26:	d106      	bne.n	46c36 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   46c28:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   46c2c:	b003      	add	sp, #12
   46c2e:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   46c32:	f7ff bf45 	b.w	46ac0 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   46c36:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   46c3a:	b96b      	cbnz	r3, 46c58 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   46c3c:	f46f 7080 	mvn.w	r0, #256	; 0x100
   46c40:	f7ff ff3e 	bl	46ac0 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   46c44:	2306      	movs	r3, #6
   46c46:	f88d 3004 	strb.w	r3, [sp, #4]
   46c4a:	2388      	movs	r3, #136	; 0x88
   46c4c:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   46c50:	4b04      	ldr	r3, [pc, #16]	; (46c64 <ev_dma_epin8_handler+0x4c>)
   46c52:	a801      	add	r0, sp, #4
   46c54:	681b      	ldr	r3, [r3, #0]
   46c56:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   46c58:	b003      	add	sp, #12
   46c5a:	f85d fb04 	ldr.w	pc, [sp], #4
   46c5e:	bf00      	nop
   46c60:	20006f64 	.word	0x20006f64
   46c64:	2000708c 	.word	0x2000708c

00046c68 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   46c68:	4a02      	ldr	r2, [pc, #8]	; (46c74 <nrfx_usbd_uninit+0xc>)
   46c6a:	2300      	movs	r3, #0
   46c6c:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   46c6e:	4a02      	ldr	r2, [pc, #8]	; (46c78 <nrfx_usbd_uninit+0x10>)
   46c70:	7013      	strb	r3, [r2, #0]
    return;
}
   46c72:	4770      	bx	lr
   46c74:	2000708c 	.word	0x2000708c
   46c78:	2000742e 	.word	0x2000742e

00046c7c <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   46c7c:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
   46c7e:	4b4c      	ldr	r3, [pc, #304]	; (46db0 <nrfx_usbd_enable+0x134>)
   46c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
   46c84:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   46c88:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   46c8c:	f7ff fe0a 	bl	468a4 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   46c90:	b108      	cbz	r0, 46c96 <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   46c92:	f7ff fe79 	bl	46988 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   46c96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   46c9a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   46c9e:	2b08      	cmp	r3, #8
   46ca0:	d119      	bne.n	46cd6 <nrfx_usbd_enable+0x5a>
	__asm__ volatile(
   46ca2:	f04f 0320 	mov.w	r3, #32
   46ca6:	f3ef 8011 	mrs	r0, BASEPRI
   46caa:	f383 8812 	msr	BASEPRI_MAX, r3
   46cae:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   46cb2:	4b40      	ldr	r3, [pc, #256]	; (46db4 <nrfx_usbd_enable+0x138>)
   46cb4:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   46cb8:	22c0      	movs	r2, #192	; 0xc0
   46cba:	2900      	cmp	r1, #0
   46cbc:	d170      	bne.n	46da0 <nrfx_usbd_enable+0x124>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   46cbe:	f249 3175 	movw	r1, #37749	; 0x9375
   46cc2:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   46cc6:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   46cca:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   46cce:	f380 8811 	msr	BASEPRI, r0
   46cd2:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   46cd6:	4b36      	ldr	r3, [pc, #216]	; (46db0 <nrfx_usbd_enable+0x134>)
   46cd8:	2201      	movs	r2, #1
   46cda:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   46cde:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   46ce2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   46ce6:	0512      	lsls	r2, r2, #20
   46ce8:	d5fb      	bpl.n	46ce2 <nrfx_usbd_enable+0x66>
    p_reg->EVENTCAUSE = flags;
   46cea:	f44f 6200 	mov.w	r2, #2048	; 0x800
   46cee:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   46cf2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   46cf6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   46cfa:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   46cfe:	2b08      	cmp	r3, #8
   46d00:	d118      	bne.n	46d34 <nrfx_usbd_enable+0xb8>
	__asm__ volatile(
   46d02:	f04f 0320 	mov.w	r3, #32
   46d06:	f3ef 8011 	mrs	r0, BASEPRI
   46d0a:	f383 8812 	msr	BASEPRI_MAX, r3
   46d0e:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   46d12:	4b28      	ldr	r3, [pc, #160]	; (46db4 <nrfx_usbd_enable+0x138>)
   46d14:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   46d18:	2900      	cmp	r1, #0
   46d1a:	d144      	bne.n	46da6 <nrfx_usbd_enable+0x12a>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   46d1c:	f249 3275 	movw	r2, #37749	; 0x9375
   46d20:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   46d24:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   46d28:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   46d2c:	f380 8811 	msr	BASEPRI, r0
   46d30:	f3bf 8f6f 	isb	sy
   46d34:	f7ff fdb6 	bl	468a4 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   46d38:	b130      	cbz	r0, 46d48 <nrfx_usbd_enable+0xcc>
        usbd_errata_187_211_end();
   46d3a:	f7ff fe45 	bl	469c8 <usbd_errata_187_211_end>
   46d3e:	f7ff fdb1 	bl	468a4 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   46d42:	b108      	cbz	r0, 46d48 <nrfx_usbd_enable+0xcc>
#endif
    {
        usbd_errata_187_211_begin();
   46d44:	f7ff fe20 	bl	46988 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   46d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   46d4c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   46d50:	2b08      	cmp	r3, #8
   46d52:	4b17      	ldr	r3, [pc, #92]	; (46db0 <nrfx_usbd_enable+0x134>)
   46d54:	d10a      	bne.n	46d6c <nrfx_usbd_enable+0xf0>
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   46d56:	f240 72e3 	movw	r2, #2019	; 0x7e3
   46d5a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   46d5e:	2240      	movs	r2, #64	; 0x40
   46d60:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   46d64:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   46d68:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   46d6c:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   46d6e:	2280      	movs	r2, #128	; 0x80
   46d70:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   46d74:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   46d78:	4b0f      	ldr	r3, [pc, #60]	; (46db8 <nrfx_usbd_enable+0x13c>)
   46d7a:	f240 12ff 	movw	r2, #511	; 0x1ff
   46d7e:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   46d80:	4b0e      	ldr	r3, [pc, #56]	; (46dbc <nrfx_usbd_enable+0x140>)
   46d82:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   46d84:	f7ff feac 	bl	46ae0 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   46d88:	4b0d      	ldr	r3, [pc, #52]	; (46dc0 <nrfx_usbd_enable+0x144>)
   46d8a:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   46d8c:	4b0d      	ldr	r3, [pc, #52]	; (46dc4 <nrfx_usbd_enable+0x148>)
   46d8e:	2202      	movs	r2, #2
   46d90:	701a      	strb	r2, [r3, #0]
   46d92:	f7ff fd87 	bl	468a4 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   46d96:	b150      	cbz	r0, 46dae <nrfx_usbd_enable+0x132>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   46d98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
   46d9c:	f7ff be14 	b.w	469c8 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   46da0:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   46da4:	e793      	b.n	46cce <nrfx_usbd_enable+0x52>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   46da6:	2200      	movs	r2, #0
   46da8:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   46dac:	e7be      	b.n	46d2c <nrfx_usbd_enable+0xb0>
}
   46dae:	bd08      	pop	{r3, pc}
   46db0:	40027000 	.word	0x40027000
   46db4:	4006e000 	.word	0x4006e000
   46db8:	20007088 	.word	0x20007088
   46dbc:	20007084 	.word	0x20007084
   46dc0:	2000742c 	.word	0x2000742c
   46dc4:	2000742e 	.word	0x2000742e

00046dc8 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   46dc8:	4b0a      	ldr	r3, [pc, #40]	; (46df4 <nrfx_usbd_start+0x2c>)
   46dca:	2200      	movs	r2, #0
{
   46dcc:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   46dce:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
   46dd0:	4a09      	ldr	r2, [pc, #36]	; (46df8 <nrfx_usbd_start+0x30>)
   46dd2:	4b0a      	ldr	r3, [pc, #40]	; (46dfc <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   46dd4:	4c0a      	ldr	r4, [pc, #40]	; (46e00 <nrfx_usbd_start+0x38>)
   46dd6:	2800      	cmp	r0, #0
   46dd8:	bf08      	it	eq
   46dda:	4613      	moveq	r3, r2
   46ddc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   46de0:	2027      	movs	r0, #39	; 0x27
   46de2:	f7e5 ff47 	bl	2cc74 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   46de6:	2301      	movs	r3, #1
   46de8:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   46dec:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   46df0:	bd10      	pop	{r4, pc}
   46df2:	bf00      	nop
   46df4:	2000742d 	.word	0x2000742d
   46df8:	01c01407 	.word	0x01c01407
   46dfc:	01e01407 	.word	0x01e01407
   46e00:	40027000 	.word	0x40027000

00046e04 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   46e04:	4b03      	ldr	r3, [pc, #12]	; (46e14 <nrfx_usbd_is_enabled+0x10>)
   46e06:	7818      	ldrb	r0, [r3, #0]
}
   46e08:	2801      	cmp	r0, #1
   46e0a:	bf94      	ite	ls
   46e0c:	2000      	movls	r0, #0
   46e0e:	2001      	movhi	r0, #1
   46e10:	4770      	bx	lr
   46e12:	bf00      	nop
   46e14:	2000742e 	.word	0x2000742e

00046e18 <nrfx_usbd_wakeup_req>:

    return suspended;
}

bool nrfx_usbd_wakeup_req(void)
{
   46e18:	b510      	push	{r4, lr}
	__asm__ volatile(
   46e1a:	f04f 0320 	mov.w	r3, #32
   46e1e:	f3ef 8411 	mrs	r4, BASEPRI
   46e22:	f383 8812 	msr	BASEPRI_MAX, r3
   46e26:	f3bf 8f6f 	isb	sy
    bool started = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend && nrf_usbd_lowpower_check(NRF_USBD))
   46e2a:	4b15      	ldr	r3, [pc, #84]	; (46e80 <nrfx_usbd_wakeup_req+0x68>)
   46e2c:	781b      	ldrb	r3, [r3, #0]
   46e2e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   46e32:	b1db      	cbz	r3, 46e6c <nrfx_usbd_wakeup_req+0x54>
    return (p_reg->LOWPOWER != (USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos));
   46e34:	4b13      	ldr	r3, [pc, #76]	; (46e84 <nrfx_usbd_wakeup_req+0x6c>)
   46e36:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
   46e3a:	b1fa      	cbz	r2, 46e7c <nrfx_usbd_wakeup_req+0x64>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   46e3c:	2200      	movs	r2, #0
   46e3e:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   46e42:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   46e46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   46e4a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   46e4e:	2b08      	cmp	r3, #8
   46e50:	d10c      	bne.n	46e6c <nrfx_usbd_wakeup_req+0x54>
        nrf_usbd_lowpower_disable(NRF_USBD);
        started = true;

        if (nrfx_usbd_errata_171())
        {
            if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   46e52:	4b0d      	ldr	r3, [pc, #52]	; (46e88 <nrfx_usbd_wakeup_req+0x70>)
   46e54:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   46e58:	22c0      	movs	r2, #192	; 0xc0
   46e5a:	b961      	cbnz	r1, 46e76 <nrfx_usbd_wakeup_req+0x5e>
            {
                *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   46e5c:	f249 3175 	movw	r1, #37749	; 0x9375
   46e60:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
                *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   46e64:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
                *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   46e68:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   46e6c:	f384 8811 	msr	BASEPRI, r4
   46e70:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return started;
}
   46e74:	bd10      	pop	{r4, pc}
                *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   46e76:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   46e7a:	e7f7      	b.n	46e6c <nrfx_usbd_wakeup_req+0x54>
    bool started = false;
   46e7c:	4610      	mov	r0, r2
   46e7e:	e7f5      	b.n	46e6c <nrfx_usbd_wakeup_req+0x54>
   46e80:	2000742d 	.word	0x2000742d
   46e84:	40027000 	.word	0x40027000
   46e88:	4006e000 	.word	0x4006e000

00046e8c <nrfx_usbd_init>:
{
   46e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   46e8e:	4b1c      	ldr	r3, [pc, #112]	; (46f00 <nrfx_usbd_init+0x74>)
   46e90:	781c      	ldrb	r4, [r3, #0]
   46e92:	bb94      	cbnz	r4, 46efa <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
   46e94:	4a1b      	ldr	r2, [pc, #108]	; (46f04 <nrfx_usbd_init+0x78>)
   46e96:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   46e98:	2201      	movs	r2, #1
   46e9a:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   46e9c:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   46ea0:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   46ea2:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   46ea6:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   46eaa:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   46eac:	bf14      	ite	ne
   46eae:	4639      	movne	r1, r7
   46eb0:	2140      	moveq	r1, #64	; 0x40
   46eb2:	4628      	mov	r0, r5
   46eb4:	f009 fae0 	bl	50478 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   46eb8:	4628      	mov	r0, r5
   46eba:	f7ff fd07 	bl	468cc <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   46ebe:	3401      	adds	r4, #1
   46ec0:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   46ec2:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
   46ec4:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
   46ec6:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   46ec8:	d1eb      	bne.n	46ea2 <nrfx_usbd_init+0x16>
   46eca:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   46ecc:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   46ed0:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   46ed2:	f014 0f08 	tst.w	r4, #8
   46ed6:	b2e6      	uxtb	r6, r4
   46ed8:	bf14      	ite	ne
   46eda:	4639      	movne	r1, r7
   46edc:	2140      	moveq	r1, #64	; 0x40
   46ede:	4630      	mov	r0, r6
   46ee0:	f009 faca 	bl	50478 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   46ee4:	4630      	mov	r0, r6
   46ee6:	f7ff fcf1 	bl	468cc <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   46eea:	3401      	adds	r4, #1
   46eec:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   46eee:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   46ef0:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   46ef2:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   46ef4:	d1ed      	bne.n	46ed2 <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
   46ef6:	4804      	ldr	r0, [pc, #16]	; (46f08 <nrfx_usbd_init+0x7c>)
}
   46ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
   46efa:	4804      	ldr	r0, [pc, #16]	; (46f0c <nrfx_usbd_init+0x80>)
   46efc:	e7fc      	b.n	46ef8 <nrfx_usbd_init+0x6c>
   46efe:	bf00      	nop
   46f00:	2000742e 	.word	0x2000742e
   46f04:	2000708c 	.word	0x2000708c
   46f08:	0bad0000 	.word	0x0bad0000
   46f0c:	0bad0005 	.word	0x0bad0005

00046f10 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   46f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   46f14:	4604      	mov	r4, r0
	__asm__ volatile(
   46f16:	f04f 0320 	mov.w	r3, #32
   46f1a:	f3ef 8811 	mrs	r8, BASEPRI
   46f1e:	f383 8812 	msr	BASEPRI_MAX, r3
   46f22:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   46f26:	f010 0a0f 	ands.w	sl, r0, #15
   46f2a:	d103      	bne.n	46f34 <nrfx_usbd_ep_transfer+0x24>
   46f2c:	4b27      	ldr	r3, [pc, #156]	; (46fcc <nrfx_usbd_ep_transfer+0xbc>)
   46f2e:	781b      	ldrb	r3, [r3, #0]
   46f30:	4283      	cmp	r3, r0
   46f32:	d146      	bne.n	46fc2 <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   46f34:	4b26      	ldr	r3, [pc, #152]	; (46fd0 <nrfx_usbd_ep_transfer+0xc0>)
   46f36:	4e27      	ldr	r6, [pc, #156]	; (46fd4 <nrfx_usbd_ep_transfer+0xc4>)
   46f38:	681a      	ldr	r2, [r3, #0]
   46f3a:	6837      	ldr	r7, [r6, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
   46f3c:	4620      	mov	r0, r4
   46f3e:	f009 fa63 	bl	50408 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   46f42:	43d2      	mvns	r2, r2
   46f44:	b292      	uxth	r2, r2
   46f46:	f04f 0901 	mov.w	r9, #1
   46f4a:	433a      	orrs	r2, r7
   46f4c:	fa09 f900 	lsl.w	r9, r9, r0
   46f50:	ea12 0f09 	tst.w	r2, r9
   46f54:	d137      	bne.n	46fc6 <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   46f56:	4620      	mov	r0, r4
   46f58:	f7ff fcb8 	bl	468cc <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   46f5c:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
   46f5e:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   46f60:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   46f62:	fb03 f30a 	mul.w	r3, r3, sl
        if (NRF_USBD_EPIN_CHECK(ep))
   46f66:	d528      	bpl.n	46fba <nrfx_usbd_ep_transfer+0xaa>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   46f68:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   46f6a:	6888      	ldr	r0, [r1, #8]
   46f6c:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   46f70:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   46f74:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   46f78:	d11c      	bne.n	46fb4 <nrfx_usbd_ep_transfer+0xa4>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   46f7a:	4a17      	ldr	r2, [pc, #92]	; (46fd8 <nrfx_usbd_ep_transfer+0xc8>)
   46f7c:	4c17      	ldr	r4, [pc, #92]	; (46fdc <nrfx_usbd_ep_transfer+0xcc>)
   46f7e:	2800      	cmp	r0, #0
   46f80:	bf08      	it	eq
   46f82:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   46f84:	4816      	ldr	r0, [pc, #88]	; (46fe0 <nrfx_usbd_ep_transfer+0xd0>)
   46f86:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   46f88:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
   46f8a:	c907      	ldmia	r1, {r0, r1, r2}
   46f8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
   46f90:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
   46f92:	2300      	movs	r3, #0
   46f94:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   46f96:	73ab      	strb	r3, [r5, #14]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   46f98:	4b12      	ldr	r3, [pc, #72]	; (46fe4 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
   46f9a:	4813      	ldr	r0, [pc, #76]	; (46fe8 <nrfx_usbd_ep_transfer+0xd8>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   46f9c:	ea49 0707 	orr.w	r7, r9, r7
   46fa0:	2280      	movs	r2, #128	; 0x80
   46fa2:	6037      	str	r7, [r6, #0]
   46fa4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   46fa8:	f388 8811 	msr	BASEPRI, r8
   46fac:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   46fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   46fb4:	4a0d      	ldr	r2, [pc, #52]	; (46fec <nrfx_usbd_ep_transfer+0xdc>)
   46fb6:	4c0e      	ldr	r4, [pc, #56]	; (46ff0 <nrfx_usbd_ep_transfer+0xe0>)
   46fb8:	e7e1      	b.n	46f7e <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   46fba:	4a0e      	ldr	r2, [pc, #56]	; (46ff4 <nrfx_usbd_ep_transfer+0xe4>)
   46fbc:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   46fbe:	4a0e      	ldr	r2, [pc, #56]	; (46ff8 <nrfx_usbd_ep_transfer+0xe8>)
   46fc0:	e7e2      	b.n	46f88 <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
   46fc2:	480e      	ldr	r0, [pc, #56]	; (46ffc <nrfx_usbd_ep_transfer+0xec>)
   46fc4:	e7f0      	b.n	46fa8 <nrfx_usbd_ep_transfer+0x98>
        ret = NRFX_ERROR_BUSY;
   46fc6:	480e      	ldr	r0, [pc, #56]	; (47000 <nrfx_usbd_ep_transfer+0xf0>)
   46fc8:	e7ee      	b.n	46fa8 <nrfx_usbd_ep_transfer+0x98>
   46fca:	bf00      	nop
   46fcc:	2000742c 	.word	0x2000742c
   46fd0:	20007088 	.word	0x20007088
   46fd4:	20007084 	.word	0x20007084
   46fd8:	000503df 	.word	0x000503df
   46fdc:	000503bd 	.word	0x000503bd
   46fe0:	20006ef8 	.word	0x20006ef8
   46fe4:	e000e100 	.word	0xe000e100
   46fe8:	0bad0000 	.word	0x0bad0000
   46fec:	00046a41 	.word	0x00046a41
   46ff0:	00046a09 	.word	0x00046a09
   46ff4:	20006e8c 	.word	0x20006e8c
   46ff8:	0005038f 	.word	0x0005038f
   46ffc:	0bad000a 	.word	0x0bad000a
   47000:	0bad000b 	.word	0x0bad000b

00047004 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   47004:	f010 0f08 	tst.w	r0, #8
   47008:	4b07      	ldr	r3, [pc, #28]	; (47028 <nrfx_usbd_epout_size_get+0x24>)
   4700a:	d006      	beq.n	4701a <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   4700c:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
   47010:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   47014:	bf18      	it	ne
   47016:	2000      	movne	r0, #0
   47018:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   4701a:	f000 000f 	and.w	r0, r0, #15
   4701e:	f500 7094 	add.w	r0, r0, #296	; 0x128
   47022:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   47026:	4770      	bx	lr
   47028:	40027000 	.word	0x40027000

0004702c <usbd_dmareq_process>:
{
   4702c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   47030:	4e59      	ldr	r6, [pc, #356]	; (47198 <usbd_dmareq_process+0x16c>)
   47032:	7833      	ldrb	r3, [r6, #0]
{
   47034:	b085      	sub	sp, #20
    if (!m_dma_pending)
   47036:	2b00      	cmp	r3, #0
   47038:	d173      	bne.n	47122 <usbd_dmareq_process+0xf6>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   4703a:	f8df 8160 	ldr.w	r8, [pc, #352]	; 4719c <usbd_dmareq_process+0x170>
   4703e:	4d58      	ldr	r5, [pc, #352]	; (471a0 <usbd_dmareq_process+0x174>)
   47040:	f8d8 4000 	ldr.w	r4, [r8]
   47044:	682b      	ldr	r3, [r5, #0]
   47046:	401c      	ands	r4, r3
   47048:	d06b      	beq.n	47122 <usbd_dmareq_process+0xf6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   4704a:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
   4704e:	bf14      	ite	ne
   47050:	fa93 f4a3 	rbitne	r4, r3
   47054:	fa94 f4a4 	rbiteq	r4, r4
   47058:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   4705c:	f04f 0901 	mov.w	r9, #1
   47060:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   47064:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   47066:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   4706a:	d95d      	bls.n	47128 <usbd_dmareq_process+0xfc>
   4706c:	3c10      	subs	r4, #16
   4706e:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
   47070:	4620      	mov	r0, r4
   47072:	f7ff fc2b 	bl	468cc <ep_state_access>
   47076:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   47078:	4620      	mov	r0, r4
   4707a:	f7ff ffc3 	bl	47004 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   4707e:	f8da 7000 	ldr.w	r7, [sl]
   47082:	f8ba 200c 	ldrh.w	r2, [sl, #12]
   47086:	f8da 1004 	ldr.w	r1, [sl, #4]
   4708a:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   4708c:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
   4708e:	a802      	add	r0, sp, #8
   47090:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
   47092:	9b02      	ldr	r3, [sp, #8]
   47094:	2b00      	cmp	r3, #0
   47096:	d153      	bne.n	47140 <usbd_dmareq_process+0x114>
                if (!continue_transfer)
   47098:	b908      	cbnz	r0, 4709e <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
   4709a:	f8ca 0000 	str.w	r0, [sl]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   4709e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (NRF_USBD_EPIN_CHECK(ep))
   470a2:	b261      	sxtb	r1, r4
            if (var1 == 0x08)
   470a4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   470a8:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   470aa:	bf02      	ittt	eq
   470ac:	4b3d      	ldreq	r3, [pc, #244]	; (471a4 <usbd_dmareq_process+0x178>)
   470ae:	2282      	moveq	r2, #130	; 0x82
   470b0:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
   470b4:	2301      	movs	r3, #1
   470b6:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
   470b8:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
   470ba:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   470bc:	9802      	ldr	r0, [sp, #8]
            m_ep_ready &= ~(1U << pos);
   470be:	ea03 0309 	and.w	r3, r3, r9
   470c2:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
   470c4:	f8da 3008 	ldr.w	r3, [sl, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
   470c8:	2900      	cmp	r1, #0
   470ca:	4413      	add	r3, r2
   470cc:	f8ca 3008 	str.w	r3, [sl, #8]
   470d0:	f004 0508 	and.w	r5, r4, #8
   470d4:	4b33      	ldr	r3, [pc, #204]	; (471a4 <usbd_dmareq_process+0x178>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   470d6:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   470da:	da4e      	bge.n	4717a <usbd_dmareq_process+0x14e>
        if (NRF_USBD_EPISO_CHECK(ep))
   470dc:	2d00      	cmp	r5, #0
   470de:	d044      	beq.n	4716a <usbd_dmareq_process+0x13e>
            p_reg->ISOIN.PTR    = ptr;
   470e0:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   470e4:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   470e8:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   470ea:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   470ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   470f2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   470f6:	2201      	movs	r2, #1
   470f8:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   470fa:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   470fc:	4a2a      	ldr	r2, [pc, #168]	; (471a8 <usbd_dmareq_process+0x17c>)
   470fe:	4b2b      	ldr	r3, [pc, #172]	; (471ac <usbd_dmareq_process+0x180>)
   47100:	ea13 0321 	ands.w	r3, r3, r1, asr #32
   47104:	bf38      	it	cc
   47106:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   47108:	4926      	ldr	r1, [pc, #152]	; (471a4 <usbd_dmareq_process+0x178>)
   4710a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   4710e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   47112:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   47116:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   47118:	b91a      	cbnz	r2, 47122 <usbd_dmareq_process+0xf6>
   4711a:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   4711e:	2a00      	cmp	r2, #0
   47120:	d0f9      	beq.n	47116 <usbd_dmareq_process+0xea>
}
   47122:	b005      	add	sp, #20
   47124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   47128:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
   4712c:	4620      	mov	r0, r4
   4712e:	f7ff fbcd 	bl	468cc <ep_state_access>
                continue_transfer = p_state->handler.feeder(
   47132:	6803      	ldr	r3, [r0, #0]
   47134:	8982      	ldrh	r2, [r0, #12]
   47136:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
   47138:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
   4713a:	a802      	add	r0, sp, #8
   4713c:	4798      	blx	r3
   4713e:	e7ab      	b.n	47098 <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
   47140:	9b03      	ldr	r3, [sp, #12]
   47142:	459b      	cmp	fp, r3
   47144:	d9a8      	bls.n	47098 <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   47146:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   47148:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   4714a:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   4714e:	f7ff fcb7 	bl	46ac0 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   47152:	2306      	movs	r3, #6
   47154:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
   47158:	4b15      	ldr	r3, [pc, #84]	; (471b0 <usbd_dmareq_process+0x184>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   4715a:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
   4715e:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   47160:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
   47164:	a801      	add	r0, sp, #4
   47166:	4798      	blx	r3
                    continue;
   47168:	e76a      	b.n	47040 <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
   4716a:	2514      	movs	r5, #20
   4716c:	fb05 3304 	mla	r3, r5, r4, r3
   47170:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   47174:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
   47178:	e7b6      	b.n	470e8 <usbd_dmareq_process+0xbc>
        if (NRF_USBD_EPISO_CHECK(ep))
   4717a:	b12d      	cbz	r5, 47188 <usbd_dmareq_process+0x15c>
            p_reg->ISOOUT.PTR    = ptr;
   4717c:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   47180:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
   47184:	2328      	movs	r3, #40	; 0x28
   47186:	e7b0      	b.n	470ea <usbd_dmareq_process+0xbe>
            p_reg->EPOUT[epnr].PTR    = ptr;
   47188:	2514      	movs	r5, #20
   4718a:	fb05 3304 	mla	r3, r5, r4, r3
   4718e:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   47192:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   47196:	e7f5      	b.n	47184 <usbd_dmareq_process+0x158>
   47198:	2000742b 	.word	0x2000742b
   4719c:	20007084 	.word	0x20007084
   471a0:	20007088 	.word	0x20007088
   471a4:	40027000 	.word	0x40027000
   471a8:	00053ca0 	.word	0x00053ca0
   471ac:	00053cb2 	.word	0x00053cb2
   471b0:	2000708c 	.word	0x2000708c

000471b4 <ev_epdata_handler>:
{
   471b4:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   471b6:	4b0f      	ldr	r3, [pc, #60]	; (471f4 <ev_epdata_handler+0x40>)
   471b8:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   471bc:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   471c0:	2501      	movs	r5, #1
    while (dataepstatus)
   471c2:	b91c      	cbnz	r4, 471cc <ev_epdata_handler+0x18>
}
   471c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   471c8:	f7ff bf30 	b.w	4702c <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   471cc:	fa94 f3a4 	rbit	r3, r4
   471d0:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   471d4:	2b0f      	cmp	r3, #15
   471d6:	bfc8      	it	gt
   471d8:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   471dc:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   471de:	bfd4      	ite	le
   471e0:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
   471e4:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   471e6:	fa05 f303 	lsl.w	r3, r5, r3
   471ea:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   471ee:	f7ff fc9f 	bl	46b30 <usbd_ep_data_handler>
   471f2:	e7e6      	b.n	471c2 <ev_epdata_handler+0xe>
   471f4:	40027000 	.word	0x40027000

000471f8 <nrf_usbd_epout_dma_handler>:
{
   471f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    usbd_dma_pending_clear();
   471fa:	f7ff fc71 	bl	46ae0 <usbd_dma_pending_clear>
{
   471fe:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
   47200:	f7ff fb64 	bl	468cc <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   47204:	7b83      	ldrb	r3, [r0, #14]
   47206:	2b03      	cmp	r3, #3
   47208:	d10d      	bne.n	47226 <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   4720a:	4620      	mov	r0, r4
   4720c:	f009 f8fc 	bl	50408 <ep2bit>
   47210:	2301      	movs	r3, #1
   47212:	fa03 f000 	lsl.w	r0, r3, r0
   47216:	43c0      	mvns	r0, r0
   47218:	f7ff fc52 	bl	46ac0 <atomic_and.constprop.0.isra.0>
}
   4721c:	b003      	add	sp, #12
   4721e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
   47222:	f7ff bf03 	b.w	4702c <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
   47226:	6805      	ldr	r5, [r0, #0]
   47228:	2d00      	cmp	r5, #0
   4722a:	d1f7      	bne.n	4721c <nrf_usbd_epout_dma_handler+0x24>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   4722c:	4620      	mov	r0, r4
   4722e:	f009 f8eb 	bl	50408 <ep2bit>
   47232:	2301      	movs	r3, #1
   47234:	fa03 f000 	lsl.w	r0, r3, r0
   47238:	43c0      	mvns	r0, r0
   4723a:	f7ff fc41 	bl	46ac0 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   4723e:	2306      	movs	r3, #6
   47240:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   47244:	4b04      	ldr	r3, [pc, #16]	; (47258 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   47246:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
   4724a:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   4724c:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   47250:	a801      	add	r0, sp, #4
   47252:	4798      	blx	r3
   47254:	e7e2      	b.n	4721c <nrf_usbd_epout_dma_handler+0x24>
   47256:	bf00      	nop
   47258:	2000708c 	.word	0x2000708c

0004725c <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   4725c:	4b02      	ldr	r3, [pc, #8]	; (47268 <nrfx_usbd_ep_stall+0xc>)
   4725e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   47262:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   47266:	4770      	bx	lr
   47268:	40027000 	.word	0x40027000

0004726c <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   4726c:	0702      	lsls	r2, r0, #28
   4726e:	d413      	bmi.n	47298 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
   47270:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   47274:	f010 0f80 	tst.w	r0, #128	; 0x80
   47278:	4a08      	ldr	r2, [pc, #32]	; (4729c <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   4727a:	bf0b      	itete	eq
   4727c:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   47280:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   47284:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   47288:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   4728c:	bf08      	it	eq
   4728e:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   47290:	1e43      	subs	r3, r0, #1
   47292:	4258      	negs	r0, r3
   47294:	4158      	adcs	r0, r3
   47296:	4770      	bx	lr
        return false;
   47298:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   4729a:	4770      	bx	lr
   4729c:	40027000 	.word	0x40027000

000472a0 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   472a0:	4b04      	ldr	r3, [pc, #16]	; (472b4 <nrfx_usbd_ep_dtoggle_clear+0x14>)
   472a2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   472a6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   472aa:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   472ae:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   472b2:	4770      	bx	lr
   472b4:	40027000 	.word	0x40027000

000472b8 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   472b8:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   472ba:	2208      	movs	r2, #8
   472bc:	2100      	movs	r1, #0
{
   472be:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   472c0:	f004 fd5c 	bl	4bd7c <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   472c4:	4b0e      	ldr	r3, [pc, #56]	; (47300 <nrfx_usbd_setup_get+0x48>)
   472c6:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   472ca:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   472cc:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   472d0:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   472d2:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   472d6:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   472da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   472de:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   472e0:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   472e4:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   472e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   472ec:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   472ee:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   472f2:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   472f6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   472fa:	80e3      	strh	r3, [r4, #6]
}
   472fc:	bd10      	pop	{r4, pc}
   472fe:	bf00      	nop
   47300:	40027000 	.word	0x40027000

00047304 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   47304:	4b02      	ldr	r3, [pc, #8]	; (47310 <nrfx_usbd_setup_data_clear+0xc>)
   47306:	2201      	movs	r2, #1
   47308:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   4730a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   4730c:	4770      	bx	lr
   4730e:	bf00      	nop
   47310:	40027000 	.word	0x40027000

00047314 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   47314:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   47316:	f7ff fbe3 	bl	46ae0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   4731a:	4b10      	ldr	r3, [pc, #64]	; (4735c <ev_dma_epout0_handler+0x48>)
   4731c:	7b9a      	ldrb	r2, [r3, #14]
   4731e:	2a03      	cmp	r2, #3
   47320:	d106      	bne.n	47330 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47322:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   47326:	b002      	add	sp, #8
   47328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   4732c:	f7ff bbc8 	b.w	46ac0 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
   47330:	681c      	ldr	r4, [r3, #0]
   47332:	b974      	cbnz	r4, 47352 <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47334:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   47338:	f7ff fbc2 	bl	46ac0 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   4733c:	2306      	movs	r3, #6
   4733e:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   47342:	4b07      	ldr	r3, [pc, #28]	; (47360 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   47344:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   47348:	681b      	ldr	r3, [r3, #0]
   4734a:	a801      	add	r0, sp, #4
   4734c:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   4734e:	b002      	add	sp, #8
   47350:	bd10      	pop	{r4, pc}
   47352:	b002      	add	sp, #8
   47354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
   47358:	f7ff bfd4 	b.w	47304 <nrfx_usbd_setup_data_clear>
   4735c:	20006f64 	.word	0x20006f64
   47360:	2000708c 	.word	0x2000708c

00047364 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   47364:	4b02      	ldr	r3, [pc, #8]	; (47370 <nrfx_usbd_setup_clear+0xc>)
   47366:	2201      	movs	r2, #1
   47368:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   4736a:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   4736c:	4770      	bx	lr
   4736e:	bf00      	nop
   47370:	40027000 	.word	0x40027000

00047374 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   47374:	4b02      	ldr	r3, [pc, #8]	; (47380 <nrfx_usbd_setup_stall+0xc>)
   47376:	2201      	movs	r2, #1
   47378:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   4737a:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   4737c:	4770      	bx	lr
   4737e:	bf00      	nop
   47380:	40027000 	.word	0x40027000

00047384 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   47384:	4b01      	ldr	r3, [pc, #4]	; (4738c <nrfx_usbd_last_setup_dir_get+0x8>)
   47386:	7818      	ldrb	r0, [r3, #0]
   47388:	4770      	bx	lr
   4738a:	bf00      	nop
   4738c:	2000742c 	.word	0x2000742c

00047390 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   47390:	b510      	push	{r4, lr}
   47392:	4602      	mov	r2, r0
	__asm__ volatile(
   47394:	f04f 0320 	mov.w	r3, #32
   47398:	f3ef 8411 	mrs	r4, BASEPRI
   4739c:	f383 8812 	msr	BASEPRI_MAX, r3
   473a0:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   473a4:	f009 f830 	bl	50408 <ep2bit>
   473a8:	490d      	ldr	r1, [pc, #52]	; (473e0 <nrfx_usbd_transfer_out_drop+0x50>)
   473aa:	2301      	movs	r3, #1
   473ac:	fa03 f000 	lsl.w	r0, r3, r0
   473b0:	680b      	ldr	r3, [r1, #0]
   473b2:	ea23 0300 	bic.w	r3, r3, r0
   473b6:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   473b8:	f012 0108 	ands.w	r1, r2, #8
   473bc:	d10a      	bne.n	473d4 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   473be:	f002 030f 	and.w	r3, r2, #15
   473c2:	009b      	lsls	r3, r3, #2
   473c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   473c8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   473cc:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   473d0:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   473d4:	f384 8811 	msr	BASEPRI, r4
   473d8:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   473dc:	bd10      	pop	{r4, pc}
   473de:	bf00      	nop
   473e0:	20007088 	.word	0x20007088

000473e4 <usbd_ep_abort>:
{
   473e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   473e6:	4601      	mov	r1, r0
	__asm__ volatile(
   473e8:	f04f 0320 	mov.w	r3, #32
   473ec:	f3ef 8511 	mrs	r5, BASEPRI
   473f0:	f383 8812 	msr	BASEPRI_MAX, r3
   473f4:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   473f8:	f7ff fa68 	bl	468cc <ep_state_access>
   473fc:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   473fe:	4608      	mov	r0, r1
   47400:	f009 f802 	bl	50408 <ep2bit>
   47404:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
   47406:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   4740a:	fa02 f200 	lsl.w	r2, r2, r0
   4740e:	482e      	ldr	r0, [pc, #184]	; (474c8 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
   47410:	d118      	bne.n	47444 <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   47412:	6803      	ldr	r3, [r0, #0]
   47414:	ea32 0403 	bics.w	r4, r2, r3
   47418:	d00a      	beq.n	47430 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
   4741a:	4608      	mov	r0, r1
   4741c:	f7ff ffb8 	bl	47390 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   47420:	2303      	movs	r3, #3
   47422:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   47424:	f385 8811 	msr	BASEPRI, r5
   47428:	f3bf 8f6f 	isb	sy
}
   4742c:	b003      	add	sp, #12
   4742e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_ready &= ~(1U << ep2bit(ep));
   47430:	4926      	ldr	r1, [pc, #152]	; (474cc <usbd_ep_abort+0xe8>)
            p_state->handler.consumer = NULL;
   47432:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   47434:	ea23 0302 	bic.w	r3, r3, r2
   47438:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   4743a:	680b      	ldr	r3, [r1, #0]
   4743c:	ea23 0302 	bic.w	r3, r3, r2
   47440:	600b      	str	r3, [r1, #0]
   47442:	e7ed      	b.n	47420 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   47444:	070b      	lsls	r3, r1, #28
   47446:	d415      	bmi.n	47474 <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
   47448:	2980      	cmp	r1, #128	; 0x80
   4744a:	4b21      	ldr	r3, [pc, #132]	; (474d0 <usbd_ep_abort+0xec>)
   4744c:	d02f      	beq.n	474ae <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   4744e:	f001 040f 	and.w	r4, r1, #15
   47452:	f204 34da 	addw	r4, r4, #986	; 0x3da
   47456:	0064      	lsls	r4, r4, #1
   47458:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   4745c:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   47460:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   47464:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   47466:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   4746a:	433c      	orrs	r4, r7
   4746c:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   47470:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   47474:	4f15      	ldr	r7, [pc, #84]	; (474cc <usbd_ep_abort+0xe8>)
   47476:	6804      	ldr	r4, [r0, #0]
   47478:	683b      	ldr	r3, [r7, #0]
   4747a:	ea64 0c03 	orn	ip, r4, r3
   4747e:	ea1c 0f02 	tst.w	ip, r2
   47482:	d0cf      	beq.n	47424 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
   47484:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   47486:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
   4748a:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
   4748c:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   4748e:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
   47490:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   47492:	2303      	movs	r3, #3
   47494:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   47496:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   4749a:	4b0e      	ldr	r3, [pc, #56]	; (474d4 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   4749c:	f88d 1006 	strb.w	r1, [sp, #6]
   474a0:	2206      	movs	r2, #6
            m_event_handler(&evt);
   474a2:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   474a4:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
   474a8:	a801      	add	r0, sp, #4
   474aa:	4798      	blx	r3
   474ac:	e7ba      	b.n	47424 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   474ae:	f240 74b4 	movw	r4, #1972	; 0x7b4
   474b2:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   474b6:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   474ba:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   474be:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   474c0:	f044 0404 	orr.w	r4, r4, #4
   474c4:	e7d1      	b.n	4746a <usbd_ep_abort+0x86>
   474c6:	bf00      	nop
   474c8:	20007084 	.word	0x20007084
   474cc:	20007088 	.word	0x20007088
   474d0:	40027000 	.word	0x40027000
   474d4:	2000708c 	.word	0x2000708c

000474d8 <ev_setup_handler>:
{
   474d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   474da:	4b14      	ldr	r3, [pc, #80]	; (4752c <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   474dc:	4c14      	ldr	r4, [pc, #80]	; (47530 <ev_setup_handler+0x58>)
   474de:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
   474e2:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   474e4:	4e13      	ldr	r6, [pc, #76]	; (47534 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   474e6:	43da      	mvns	r2, r3
   474e8:	4b13      	ldr	r3, [pc, #76]	; (47538 <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
   474ea:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   474ec:	681b      	ldr	r3, [r3, #0]
   474ee:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   474f0:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   474f2:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   474f4:	f008 ff88 	bl	50408 <ep2bit>
   474f8:	2301      	movs	r3, #1
   474fa:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   474fc:	4213      	tst	r3, r2
   474fe:	d002      	beq.n	47506 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
   47500:	4608      	mov	r0, r1
   47502:	f7ff ff6f 	bl	473e4 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   47506:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
   4750a:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   4750e:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   47510:	f7ff fad6 	bl	46ac0 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   47514:	6823      	ldr	r3, [r4, #0]
   47516:	f043 0301 	orr.w	r3, r3, #1
   4751a:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   4751c:	2305      	movs	r3, #5
   4751e:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
   47520:	4b06      	ldr	r3, [pc, #24]	; (4753c <ev_setup_handler+0x64>)
   47522:	a801      	add	r0, sp, #4
   47524:	681b      	ldr	r3, [r3, #0]
   47526:	4798      	blx	r3
}
   47528:	b002      	add	sp, #8
   4752a:	bd70      	pop	{r4, r5, r6, pc}
   4752c:	40027000 	.word	0x40027000
   47530:	20007088 	.word	0x20007088
   47534:	2000742c 	.word	0x2000742c
   47538:	20007084 	.word	0x20007084
   4753c:	2000708c 	.word	0x2000708c

00047540 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
   47540:	4b1b      	ldr	r3, [pc, #108]	; (475b0 <nrfx_usbd_irq_handler+0x70>)
   47542:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   47546:	2300      	movs	r3, #0
{
   47548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
   4754c:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   4754e:	461d      	mov	r5, r3
    while (to_process)
   47550:	b970      	cbnz	r0, 47570 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   47552:	4f18      	ldr	r7, [pc, #96]	; (475b4 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   47554:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   47558:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   4755c:	f04f 0801 	mov.w	r8, #1
    while (active)
   47560:	b9bc      	cbnz	r4, 47592 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   47562:	f7ff fd63 	bl	4702c <usbd_dmareq_process>
    if (setup_active)
   47566:	b306      	cbz	r6, 475aa <nrfx_usbd_irq_handler+0x6a>
}
   47568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   4756c:	f7ff bfb4 	b.w	474d8 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
   47570:	fa90 f2a0 	rbit	r2, r0
   47574:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   47578:	490f      	ldr	r1, [pc, #60]	; (475b8 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   4757a:	0096      	lsls	r6, r2, #2
   4757c:	4431      	add	r1, r6
            active |= 1UL << event_nr;
   4757e:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   47582:	680e      	ldr	r6, [r1, #0]
    if (ret)
   47584:	b116      	cbz	r6, 4758c <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   47586:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   47588:	6809      	ldr	r1, [r1, #0]
   4758a:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   4758c:	ea20 0002 	bic.w	r0, r0, r2
   47590:	e7de      	b.n	47550 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
   47592:	fa94 f5a4 	rbit	r5, r4
   47596:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   4759a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   4759e:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   475a2:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   475a4:	ea24 0405 	bic.w	r4, r4, r5
   475a8:	e7da      	b.n	47560 <nrfx_usbd_irq_handler+0x20>
}
   475aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   475ae:	bf00      	nop
   475b0:	40027000 	.word	0x40027000
   475b4:	00053b74 	.word	0x00053b74
   475b8:	40027100 	.word	0x40027100

000475bc <usbd_ep_abort_all>:
{
   475bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   475be:	4e11      	ldr	r6, [pc, #68]	; (47604 <usbd_ep_abort_all+0x48>)
   475c0:	4b11      	ldr	r3, [pc, #68]	; (47608 <usbd_ep_abort_all+0x4c>)
   475c2:	6834      	ldr	r4, [r6, #0]
   475c4:	681b      	ldr	r3, [r3, #0]
   475c6:	0c24      	lsrs	r4, r4, #16
   475c8:	0424      	lsls	r4, r4, #16
   475ca:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
   475cc:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   475ce:	b91c      	cbnz	r4, 475d8 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   475d0:	f240 13ff 	movw	r3, #511	; 0x1ff
   475d4:	6033      	str	r3, [r6, #0]
}
   475d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   475d8:	fa94 f5a4 	rbit	r5, r4
   475dc:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   475e0:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   475e2:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   475e4:	bfc6      	itte	gt
   475e6:	f1a5 0010 	subgt.w	r0, r5, #16
   475ea:	b2c0      	uxtbgt	r0, r0
   475ec:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   475f0:	0703      	lsls	r3, r0, #28
   475f2:	d401      	bmi.n	475f8 <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
   475f4:	f7ff fef6 	bl	473e4 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   475f8:	fa07 f505 	lsl.w	r5, r7, r5
   475fc:	ea24 0405 	bic.w	r4, r4, r5
   47600:	e7e5      	b.n	475ce <usbd_ep_abort_all+0x12>
   47602:	bf00      	nop
   47604:	20007088 	.word	0x20007088
   47608:	20007084 	.word	0x20007084

0004760c <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   4760c:	4b0c      	ldr	r3, [pc, #48]	; (47640 <nrfx_usbd_stop+0x34>)
   4760e:	2280      	movs	r2, #128	; 0x80
{
   47610:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   47612:	2027      	movs	r0, #39	; 0x27
   47614:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   47618:	f7e5 fb4e 	bl	2ccb8 <arch_irq_is_enabled>
   4761c:	b170      	cbz	r0, 4763c <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   4761e:	4c09      	ldr	r4, [pc, #36]	; (47644 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
   47620:	f7ff ffcc 	bl	475bc <usbd_ep_abort_all>
   47624:	2300      	movs	r3, #0
   47626:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   4762a:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
   4762c:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   47630:	f7e5 fb2e 	bl	2cc90 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   47634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   47638:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   4763c:	bd10      	pop	{r4, pc}
   4763e:	bf00      	nop
   47640:	e000e100 	.word	0xe000e100
   47644:	40027000 	.word	0x40027000

00047648 <nrfx_usbd_disable>:
{
   47648:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   4764a:	f7ff ffdf 	bl	4760c <nrfx_usbd_stop>
    return p_reg->INTENSET;
   4764e:	4b08      	ldr	r3, [pc, #32]	; (47670 <nrfx_usbd_disable+0x28>)
   47650:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   47654:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   47658:	2200      	movs	r2, #0
   4765a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   4765e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   47662:	f7ff fa3d 	bl	46ae0 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   47666:	4b03      	ldr	r3, [pc, #12]	; (47674 <nrfx_usbd_disable+0x2c>)
   47668:	2201      	movs	r2, #1
   4766a:	701a      	strb	r2, [r3, #0]
}
   4766c:	bd08      	pop	{r3, pc}
   4766e:	bf00      	nop
   47670:	40027000 	.word	0x40027000
   47674:	2000742e 	.word	0x2000742e

00047678 <nrfx_usbd_suspend>:
{
   47678:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   4767a:	f04f 0320 	mov.w	r3, #32
   4767e:	f3ef 8511 	mrs	r5, BASEPRI
   47682:	f383 8812 	msr	BASEPRI_MAX, r3
   47686:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
   4768a:	4b10      	ldr	r3, [pc, #64]	; (476cc <nrfx_usbd_suspend+0x54>)
   4768c:	781b      	ldrb	r3, [r3, #0]
   4768e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   47692:	b1a3      	cbz	r3, 476be <nrfx_usbd_suspend+0x46>
        usbd_ep_abort_all();
   47694:	f7ff ff92 	bl	475bc <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
   47698:	4b0d      	ldr	r3, [pc, #52]	; (476d0 <nrfx_usbd_suspend+0x58>)
   4769a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   4769e:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   476a2:	d10c      	bne.n	476be <nrfx_usbd_suspend+0x46>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   476a4:	2101      	movs	r1, #1
   476a6:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   476aa:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   476ae:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   476b2:	0589      	lsls	r1, r1, #22
   476b4:	d504      	bpl.n	476c0 <nrfx_usbd_suspend+0x48>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   476b6:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   476ba:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   476be:	2400      	movs	r4, #0
	__asm__ volatile(
   476c0:	f385 8811 	msr	BASEPRI, r5
   476c4:	f3bf 8f6f 	isb	sy
}
   476c8:	4620      	mov	r0, r4
   476ca:	bd38      	pop	{r3, r4, r5, pc}
   476cc:	2000742d 	.word	0x2000742d
   476d0:	40027000 	.word	0x40027000

000476d4 <nrfx_usbd_ep_disable>:
{
   476d4:	b510      	push	{r4, lr}
   476d6:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   476d8:	f7ff fe84 	bl	473e4 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   476dc:	4a10      	ldr	r2, [pc, #64]	; (47720 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   476de:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   476e2:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   476e6:	f04f 0301 	mov.w	r3, #1
   476ea:	bf14      	ite	ne
   476ec:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   476f0:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
   476f4:	fa03 f300 	lsl.w	r3, r3, r0
   476f8:	ea6f 0303 	mvn.w	r3, r3
   476fc:	bf15      	itete	ne
   476fe:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   47700:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   47702:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   47706:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   4770a:	bf14      	ite	ne
   4770c:	4b05      	ldrne	r3, [pc, #20]	; (47724 <nrfx_usbd_ep_disable+0x50>)
   4770e:	4b06      	ldreq	r3, [pc, #24]	; (47728 <nrfx_usbd_ep_disable+0x54>)
   47710:	5c1a      	ldrb	r2, [r3, r0]
   47712:	2301      	movs	r3, #1
   47714:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   47716:	4a02      	ldr	r2, [pc, #8]	; (47720 <nrfx_usbd_ep_disable+0x4c>)
   47718:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   4771c:	bd10      	pop	{r4, pc}
   4771e:	bf00      	nop
   47720:	40027000 	.word	0x40027000
   47724:	000544d6 	.word	0x000544d6
   47728:	000544cd 	.word	0x000544cd

0004772c <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   4772c:	f010 0f80 	tst.w	r0, #128	; 0x80
{
   47730:	b570      	push	{r4, r5, r6, lr}
   47732:	4924      	ldr	r1, [pc, #144]	; (477c4 <nrfx_usbd_ep_enable+0x98>)
   47734:	4604      	mov	r4, r0
   47736:	f000 030f 	and.w	r3, r0, #15
   4773a:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   4773e:	d012      	beq.n	47766 <nrfx_usbd_ep_enable+0x3a>
   47740:	4a21      	ldr	r2, [pc, #132]	; (477c8 <nrfx_usbd_ep_enable+0x9c>)
   47742:	5cd2      	ldrb	r2, [r2, r3]
   47744:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
   47748:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   4774c:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   47750:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   47752:	07d0      	lsls	r0, r2, #31
   47754:	d406      	bmi.n	47764 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
   47756:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   4775a:	fa05 f303 	lsl.w	r3, r5, r3
   4775e:	4313      	orrs	r3, r2
   47760:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
   47764:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   47766:	4a19      	ldr	r2, [pc, #100]	; (477cc <nrfx_usbd_ep_enable+0xa0>)
   47768:	5cd2      	ldrb	r2, [r2, r3]
   4776a:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
   4776e:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   47772:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
   47776:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   47778:	07d2      	lsls	r2, r2, #31
   4777a:	d4f3      	bmi.n	47764 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
   4777c:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
   47780:	fa05 f203 	lsl.w	r2, r5, r3
   47784:	4332      	orrs	r2, r6
   47786:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   4778a:	2b00      	cmp	r3, #0
   4778c:	d0ea      	beq.n	47764 <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
   4778e:	0703      	lsls	r3, r0, #28
   47790:	d4e8      	bmi.n	47764 <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
   47792:	f04f 0320 	mov.w	r3, #32
   47796:	f3ef 8611 	mrs	r6, BASEPRI
   4779a:	f383 8812 	msr	BASEPRI_MAX, r3
   4779e:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   477a2:	f7ff fdf5 	bl	47390 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   477a6:	4620      	mov	r0, r4
   477a8:	f008 fe2e 	bl	50408 <ep2bit>
   477ac:	4a08      	ldr	r2, [pc, #32]	; (477d0 <nrfx_usbd_ep_enable+0xa4>)
   477ae:	6813      	ldr	r3, [r2, #0]
   477b0:	fa05 f000 	lsl.w	r0, r5, r0
   477b4:	ea23 0300 	bic.w	r3, r3, r0
   477b8:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   477ba:	f386 8811 	msr	BASEPRI, r6
   477be:	f3bf 8f6f 	isb	sy
}
   477c2:	e7cf      	b.n	47764 <nrfx_usbd_ep_enable+0x38>
   477c4:	40027000 	.word	0x40027000
   477c8:	000544d6 	.word	0x000544d6
   477cc:	000544cd 	.word	0x000544cd
   477d0:	20007084 	.word	0x20007084

000477d4 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   477d4:	0603      	lsls	r3, r0, #24
{
   477d6:	b510      	push	{r4, lr}
   477d8:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   477da:	d405      	bmi.n	477e8 <nrfx_usbd_ep_stall_clear+0x14>
   477dc:	f7ff fd46 	bl	4726c <nrfx_usbd_ep_stall_check>
   477e0:	b110      	cbz	r0, 477e8 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   477e2:	4620      	mov	r0, r4
   477e4:	f7ff fdd4 	bl	47390 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   477e8:	4b01      	ldr	r3, [pc, #4]	; (477f0 <nrfx_usbd_ep_stall_clear+0x1c>)
   477ea:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   477ee:	bd10      	pop	{r4, pc}
   477f0:	40027000 	.word	0x40027000

000477f4 <kscan_direct_init>:
    }

    return 0;
}

static int kscan_direct_init(const struct device *dev) {
   477f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct kscan_direct_data *data = dev->data;
   477f8:	f8d0 8010 	ldr.w	r8, [r0, #16]
    const struct kscan_direct_config *config = dev->config;
   477fc:	6847      	ldr	r7, [r0, #4]

    data->dev = dev;
   477fe:	f8c8 0000 	str.w	r0, [r8]
static int kscan_direct_init(const struct device *dev) {
   47802:	4605      	mov	r5, r0
    for (int i = 0; i < config->inputs.len; i++) {
   47804:	2400      	movs	r4, #0
    gpio_init_callback(&irq->callback, kscan_direct_irq_callback_handler, BIT(gpio->pin));
   47806:	f04f 0a01 	mov.w	sl, #1
    for (int i = 0; i < config->inputs.len; i++) {
   4780a:	687b      	ldr	r3, [r7, #4]
   4780c:	42a3      	cmp	r3, r4
   4780e:	d808      	bhi.n	47822 <kscan_direct_init+0x2e>

    kscan_direct_init_inputs(dev);

    k_work_init_delayable(&data->work, kscan_direct_work_handler);
   47810:	f108 0008 	add.w	r0, r8, #8
   47814:	4922      	ldr	r1, [pc, #136]	; (478a0 <kscan_direct_init+0xac>)
   47816:	f009 fa89 	bl	50d2c <k_work_init_delayable>

    return 0;
}
   4781a:	2000      	movs	r0, #0
   4781c:	b003      	add	sp, #12
   4781e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   47822:	683e      	ldr	r6, [r7, #0]
        int err = kscan_direct_init_input_inst(dev, gpio, i, config->toggle_mode);
   47824:	7e3a      	ldrb	r2, [r7, #24]
    if (!device_is_ready(gpio->port)) {
   47826:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
        int err = kscan_direct_init_input_inst(dev, gpio, i, config->toggle_mode);
   4782a:	9201      	str	r2, [sp, #4]
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   4782c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
   47830:	eb06 0bc4 	add.w	fp, r6, r4, lsl #3
   47834:	f009 f811 	bl	5085a <z_device_is_ready>
    if (!device_is_ready(gpio->port)) {
   47838:	9a01      	ldr	r2, [sp, #4]
   4783a:	2800      	cmp	r0, #0
   4783c:	d0e8      	beq.n	47810 <kscan_direct_init+0x1c>
    int err = gpio_pin_configure_dt(
   4783e:	f89b c005 	ldrb.w	ip, [fp, #5]
   47842:	b352      	cbz	r2, 4789a <kscan_direct_init+0xa6>
        return ((BIT(0) & gpio->dt_flags) ? GPIO_PULL_UP : GPIO_PULL_DOWN);
   47844:	f01c 0f01 	tst.w	ip, #1
   47848:	bf0c      	ite	eq
   4784a:	2220      	moveq	r2, #32
   4784c:	2210      	movne	r2, #16
    int err = gpio_pin_configure_dt(
   4784e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
	return gpio_pin_configure(spec->port,
   47852:	f856 0009 	ldr.w	r0, [r6, r9]
				  spec->pin,
   47856:	f89b 1004 	ldrb.w	r1, [fp, #4]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   4785a:	ea4c 0202 	orr.w	r2, ip, r2
   4785e:	f008 fe7a 	bl	50556 <z_impl_gpio_pin_configure>
    if (err) {
   47862:	2800      	cmp	r0, #0
   47864:	d1d4      	bne.n	47810 <kscan_direct_init+0x1c>
    struct kscan_direct_irq_callback *irq = &data->irqs[index];
   47866:	692a      	ldr	r2, [r5, #16]
   47868:	0121      	lsls	r1, r4, #4
   4786a:	6b90      	ldr	r0, [r2, #56]	; 0x38
    irq->dev = dev;
   4786c:	5045      	str	r5, [r0, r1]
    gpio_init_callback(&irq->callback, kscan_direct_irq_callback_handler, BIT(gpio->pin));
   4786e:	f89b 3004 	ldrb.w	r3, [fp, #4]
    struct kscan_direct_irq_callback *irq = &data->irqs[index];
   47872:	eb00 1204 	add.w	r2, r0, r4, lsl #4
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   47876:	480b      	ldr	r0, [pc, #44]	; (478a4 <kscan_direct_init+0xb0>)
    gpio_init_callback(&irq->callback, kscan_direct_irq_callback_handler, BIT(gpio->pin));
   47878:	fa0a f303 	lsl.w	r3, sl, r3
	callback->pin_mask = pin_mask;
   4787c:	e9c2 0302 	strd	r0, r3, [r2, #8]
    err = gpio_add_callback(gpio->port, &irq->callback);
   47880:	f856 0009 	ldr.w	r0, [r6, r9]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   47884:	6883      	ldr	r3, [r0, #8]
   47886:	69db      	ldr	r3, [r3, #28]
    gpio_init_callback(&irq->callback, kscan_direct_irq_callback_handler, BIT(gpio->pin));
   47888:	1d11      	adds	r1, r2, #4
   4788a:	2b00      	cmp	r3, #0
   4788c:	d0c0      	beq.n	47810 <kscan_direct_init+0x1c>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   4788e:	2201      	movs	r2, #1
   47890:	4798      	blx	r3
        if (err) {
   47892:	2800      	cmp	r0, #0
   47894:	d1bc      	bne.n	47810 <kscan_direct_init+0x1c>
    for (int i = 0; i < config->inputs.len; i++) {
   47896:	3401      	adds	r4, #1
   47898:	e7b7      	b.n	4780a <kscan_direct_init+0x16>
    int err = gpio_pin_configure_dt(
   4789a:	f44f 7280 	mov.w	r2, #256	; 0x100
   4789e:	e7d8      	b.n	47852 <kscan_direct_init+0x5e>
   478a0:	000507d7 	.word	0x000507d7
   478a4:	000505f5 	.word	0x000505f5

000478a8 <vddh_sample_fetch>:
    struct adc_channel_cfg acc;
    struct adc_sequence as;
    struct battery_value value;
};

static int vddh_sample_fetch(const struct device *dev, enum sensor_channel chan) {
   478a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   478aa:	3927      	subs	r1, #39	; 0x27
   478ac:	b289      	uxth	r1, r1
   478ae:	2912      	cmp	r1, #18
   478b0:	d827      	bhi.n	47902 <vddh_sample_fetch+0x5a>
   478b2:	4b15      	ldr	r3, [pc, #84]	; (47908 <vddh_sample_fetch+0x60>)
   478b4:	40cb      	lsrs	r3, r1
   478b6:	07db      	lsls	r3, r3, #31
   478b8:	d523      	bpl.n	47902 <vddh_sample_fetch+0x5a>
        chan != SENSOR_CHAN_ALL) {
        LOG_DBG("Selected channel is not supported: %d.", chan);
        return -ENOTSUP;
    }

    struct vddh_data *drv_data = dev->data;
   478ba:	6905      	ldr	r5, [r0, #16]
		       const struct adc_sequence *sequence);

static inline int z_impl_adc_read(const struct device *dev,
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
   478bc:	4813      	ldr	r0, [pc, #76]	; (4790c <vddh_sample_fetch+0x64>)
   478be:	6886      	ldr	r6, [r0, #8]
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   478c0:	f105 0108 	add.w	r1, r5, #8
   478c4:	6873      	ldr	r3, [r6, #4]
   478c6:	4798      	blx	r3
    struct adc_sequence *as = &drv_data->as;

    int rc = adc_read(adc, as);
    as->calibrate = false;
   478c8:	2300      	movs	r3, #0
   478ca:	76ab      	strb	r3, [r5, #26]

    if (rc != 0) {
   478cc:	4604      	mov	r4, r0
   478ce:	b9a8      	cbnz	r0, 478fc <vddh_sample_fetch+0x54>
        LOG_ERR("Failed to read ADC: %d", rc);
        return rc;
    }

    int32_t val = drv_data->value.adc_raw;
   478d0:	8bab      	ldrh	r3, [r5, #28]
    rc = adc_raw_to_millivolts(adc_ref_internal(adc), drv_data->acc.gain, as->resolution, &val);
   478d2:	8932      	ldrh	r2, [r6, #8]
   478d4:	7828      	ldrb	r0, [r5, #0]
   478d6:	7e2f      	ldrb	r7, [r5, #24]
	int32_t adc_mv = *valp * ref_mv;
   478d8:	4353      	muls	r3, r2
	int ret = adc_gain_invert(gain, &adc_mv);
   478da:	a901      	add	r1, sp, #4
	int32_t adc_mv = *valp * ref_mv;
   478dc:	9301      	str	r3, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
   478de:	f7fc ff79 	bl	447d4 <adc_gain_invert>
	if (ret == 0) {
   478e2:	4604      	mov	r4, r0
   478e4:	b950      	cbnz	r0, 478fc <vddh_sample_fetch+0x54>
		*valp = (adc_mv >> resolution);
   478e6:	9801      	ldr	r0, [sp, #4]
   478e8:	4138      	asrs	r0, r7
    if (rc != 0) {
        LOG_ERR("Failed to convert raw ADC to mV: %d", rc);
        return rc;
    }

    drv_data->value.millivolts = val * VDDHDIV;
   478ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   478ee:	b280      	uxth	r0, r0
   478f0:	83e8      	strh	r0, [r5, #30]
    drv_data->value.state_of_charge = lithium_ion_mv_to_pct(drv_data->value.millivolts);
   478f2:	b200      	sxth	r0, r0
   478f4:	f008 ff99 	bl	5082a <lithium_ion_mv_to_pct>
   478f8:	f885 0020 	strb.w	r0, [r5, #32]

    LOG_DBG("ADC raw %d ~ %d mV => %d%%", drv_data->value.adc_raw, drv_data->value.millivolts,
            drv_data->value.state_of_charge);

    return rc;
}
   478fc:	4620      	mov	r0, r4
   478fe:	b003      	add	sp, #12
   47900:	bdf0      	pop	{r4, r5, r6, r7, pc}
static int vddh_sample_fetch(const struct device *dev, enum sensor_channel chan) {
   47902:	f06f 0485 	mvn.w	r4, #133	; 0x85
   47906:	e7f9      	b.n	478fc <vddh_sample_fetch+0x54>
   47908:	00040021 	.word	0x00040021
   4790c:	000515a8 	.word	0x000515a8

00047910 <vddh_init>:
static const struct sensor_driver_api vddh_api = {
    .sample_fetch = vddh_sample_fetch,
    .channel_get = vddh_channel_get,
};

static int vddh_init(const struct device *dev) {
   47910:	b570      	push	{r4, r5, r6, lr}
    struct vddh_data *drv_data = dev->data;
   47912:	6904      	ldr	r4, [r0, #16]
   47914:	4d12      	ldr	r5, [pc, #72]	; (47960 <vddh_init+0x50>)
   47916:	4628      	mov	r0, r5
   47918:	f008 ff9f 	bl	5085a <z_device_is_ready>

    if (!device_is_ready(adc)) {
   4791c:	b1e0      	cbz	r0, 47958 <vddh_init+0x48>
        LOG_ERR("ADC device is not ready %s", adc->name);
        return -ENODEV;
    }

    drv_data->as = (struct adc_sequence){
   4791e:	2214      	movs	r2, #20
   47920:	2100      	movs	r1, #0
   47922:	f104 0008 	add.w	r0, r4, #8
   47926:	f004 fa29 	bl	4bd7c <memset>
        .channels = BIT(0),
        .buffer = &drv_data->value.adc_raw,
   4792a:	f104 021c 	add.w	r2, r4, #28
        .oversampling = 4,
        .calibrate = true,
    };

#ifdef CONFIG_ADC_NRFX_SAADC
    drv_data->acc = (struct adc_channel_cfg){
   4792e:	490d      	ldr	r1, [pc, #52]	; (47964 <vddh_init+0x54>)
    drv_data->as = (struct adc_sequence){
   47930:	6122      	str	r2, [r4, #16]
    drv_data->acc = (struct adc_channel_cfg){
   47932:	f44f 6250 	mov.w	r2, #3328	; 0xd00
   47936:	e9c4 1200 	strd	r1, r2, [r4]
    drv_data->as = (struct adc_sequence){
   4793a:	2202      	movs	r2, #2
   4793c:	2301      	movs	r3, #1
   4793e:	6162      	str	r2, [r4, #20]
        .reference = ADC_REF_INTERNAL,
        .acquisition_time = ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40),
        .input_positive = SAADC_CH_PSELN_PSELN_VDDHDIV5,
    };

    drv_data->as.resolution = 12;
   47940:	f240 420c 	movw	r2, #1036	; 0x40c
    drv_data->as = (struct adc_sequence){
   47944:	60e3      	str	r3, [r4, #12]
    drv_data->as.resolution = 12;
   47946:	8322      	strh	r2, [r4, #24]
    drv_data->as = (struct adc_sequence){
   47948:	76a3      	strb	r3, [r4, #26]
	return api->channel_setup(dev, channel_cfg);
   4794a:	68ab      	ldr	r3, [r5, #8]
   4794c:	4621      	mov	r1, r4
   4794e:	4628      	mov	r0, r5
   47950:	681b      	ldr	r3, [r3, #0]

    const int rc = adc_channel_setup(adc, &drv_data->acc);
    LOG_DBG("VDDHDIV5 setup returned %d", rc);

    return rc;
}
   47952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   47956:	4718      	bx	r3
   47958:	f06f 0012 	mvn.w	r0, #18
   4795c:	bd70      	pop	{r4, r5, r6, pc}
   4795e:	bf00      	nop
   47960:	000515a8 	.word	0x000515a8
   47964:	40280401 	.word	0x40280401

00047968 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   47968:	4b0e      	ldr	r3, [pc, #56]	; (479a4 <z_sys_init_run_level+0x3c>)
{
   4796a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   4796c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   47970:	3001      	adds	r0, #1
   47972:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   47976:	42a6      	cmp	r6, r4
   47978:	d800      	bhi.n	4797c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   4797a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   4797c:	e9d4 3500 	ldrd	r3, r5, [r4]
   47980:	4628      	mov	r0, r5
   47982:	4798      	blx	r3
		if (dev != NULL) {
   47984:	b165      	cbz	r5, 479a0 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   47986:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   47988:	b130      	cbz	r0, 47998 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   4798a:	2800      	cmp	r0, #0
   4798c:	bfb8      	it	lt
   4798e:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   47990:	28ff      	cmp	r0, #255	; 0xff
   47992:	bfa8      	it	ge
   47994:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   47996:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   47998:	785a      	ldrb	r2, [r3, #1]
   4799a:	f042 0201 	orr.w	r2, r2, #1
   4799e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   479a0:	3408      	adds	r4, #8
   479a2:	e7e8      	b.n	47976 <z_sys_init_run_level+0xe>
   479a4:	00053c88 	.word	0x00053c88

000479a8 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   479a8:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   479aa:	4605      	mov	r5, r0
   479ac:	b910      	cbnz	r0, 479b4 <z_impl_device_get_binding+0xc>
		return NULL;
   479ae:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   479b0:	4620      	mov	r0, r4
   479b2:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   479b4:	7803      	ldrb	r3, [r0, #0]
   479b6:	2b00      	cmp	r3, #0
   479b8:	d0f9      	beq.n	479ae <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   479ba:	4c0e      	ldr	r4, [pc, #56]	; (479f4 <z_impl_device_get_binding+0x4c>)
   479bc:	4e0e      	ldr	r6, [pc, #56]	; (479f8 <z_impl_device_get_binding+0x50>)
   479be:	42b4      	cmp	r4, r6
   479c0:	d108      	bne.n	479d4 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   479c2:	4c0c      	ldr	r4, [pc, #48]	; (479f4 <z_impl_device_get_binding+0x4c>)
   479c4:	42b4      	cmp	r4, r6
   479c6:	d0f2      	beq.n	479ae <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   479c8:	4620      	mov	r0, r4
   479ca:	f008 ff46 	bl	5085a <z_device_is_ready>
   479ce:	b950      	cbnz	r0, 479e6 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   479d0:	3418      	adds	r4, #24
   479d2:	e7f7      	b.n	479c4 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   479d4:	4620      	mov	r0, r4
   479d6:	f008 ff40 	bl	5085a <z_device_is_ready>
   479da:	b110      	cbz	r0, 479e2 <z_impl_device_get_binding+0x3a>
   479dc:	6823      	ldr	r3, [r4, #0]
   479de:	42ab      	cmp	r3, r5
   479e0:	d0e6      	beq.n	479b0 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   479e2:	3418      	adds	r4, #24
   479e4:	e7eb      	b.n	479be <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   479e6:	6821      	ldr	r1, [r4, #0]
   479e8:	4628      	mov	r0, r5
   479ea:	f004 f98c 	bl	4bd06 <strcmp>
   479ee:	2800      	cmp	r0, #0
   479f0:	d1ee      	bne.n	479d0 <z_impl_device_get_binding+0x28>
   479f2:	e7dd      	b.n	479b0 <z_impl_device_get_binding+0x8>
   479f4:	00051530 	.word	0x00051530
   479f8:	00051728 	.word	0x00051728

000479fc <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   479fc:	4b01      	ldr	r3, [pc, #4]	; (47a04 <z_impl_z_errno+0x8>)
   479fe:	6898      	ldr	r0, [r3, #8]
}
   47a00:	3064      	adds	r0, #100	; 0x64
   47a02:	4770      	bx	lr
   47a04:	200071d4 	.word	0x200071d4

00047a08 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   47a08:	b510      	push	{r4, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   47a0a:	2300      	movs	r3, #0
{
   47a0c:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   47a0e:	2201      	movs	r2, #1
   47a10:	e9cd 2304 	strd	r2, r3, [sp, #16]
   47a14:	220f      	movs	r2, #15
   47a16:	e9cd 3202 	strd	r3, r2, [sp, #8]
   47a1a:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
   47a1c:	4c0b      	ldr	r4, [pc, #44]	; (47a4c <init_idle_thread+0x44>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   47a1e:	4b0c      	ldr	r3, [pc, #48]	; (47a50 <init_idle_thread+0x48>)
	z_setup_new_thread(thread, stack,
   47a20:	490c      	ldr	r1, [pc, #48]	; (47a54 <init_idle_thread+0x4c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   47a22:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
   47a24:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   47a28:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
   47a2c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   47a30:	9300      	str	r3, [sp, #0]
   47a32:	fb02 1100 	mla	r1, r2, r0, r1
   47a36:	4b08      	ldr	r3, [pc, #32]	; (47a58 <init_idle_thread+0x50>)
   47a38:	4620      	mov	r0, r4
   47a3a:	f000 f90b 	bl	47c54 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   47a3e:	7b63      	ldrb	r3, [r4, #13]
   47a40:	f023 0304 	bic.w	r3, r3, #4
   47a44:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   47a46:	b006      	add	sp, #24
   47a48:	bd10      	pop	{r4, pc}
   47a4a:	bf00      	nop
   47a4c:	20004000 	.word	0x20004000
   47a50:	200071d4 	.word	0x200071d4
   47a54:	20009eb0 	.word	0x20009eb0
   47a58:	00047dc5 	.word	0x00047dc5

00047a5c <bg_thread_main>:
{
   47a5c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   47a5e:	4b0a      	ldr	r3, [pc, #40]	; (47a88 <bg_thread_main+0x2c>)
   47a60:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   47a62:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   47a64:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   47a66:	f7ff ff7f 	bl	47968 <z_sys_init_run_level>
	boot_banner();
   47a6a:	f009 fcbe 	bl	513ea <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   47a6e:	2003      	movs	r0, #3
   47a70:	f7ff ff7a 	bl	47968 <z_sys_init_run_level>
	z_init_static_threads();
   47a74:	f000 f94a 	bl	47d0c <z_init_static_threads>
	main();
   47a78:	f7e2 ff9e 	bl	2a9b8 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   47a7c:	4a03      	ldr	r2, [pc, #12]	; (47a8c <bg_thread_main+0x30>)
   47a7e:	7b13      	ldrb	r3, [r2, #12]
   47a80:	f023 0301 	bic.w	r3, r3, #1
   47a84:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   47a86:	bd08      	pop	{r3, pc}
   47a88:	2000742f 	.word	0x2000742f
   47a8c:	20004080 	.word	0x20004080

00047a90 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   47a90:	4802      	ldr	r0, [pc, #8]	; (47a9c <z_bss_zero+0xc>)
   47a92:	4a03      	ldr	r2, [pc, #12]	; (47aa0 <z_bss_zero+0x10>)
   47a94:	2100      	movs	r1, #0
   47a96:	1a12      	subs	r2, r2, r0
   47a98:	f004 b970 	b.w	4bd7c <memset>
   47a9c:	20001518 	.word	0x20001518
   47aa0:	20007430 	.word	0x20007430

00047aa4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   47aa4:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   47aa6:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 47b70 <z_cstart+0xcc>
   47aaa:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   47aac:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   47ab0:	4d30      	ldr	r5, [pc, #192]	; (47b74 <z_cstart+0xd0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   47ab2:	4e31      	ldr	r6, [pc, #196]	; (47b78 <z_cstart+0xd4>)
   47ab4:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   47ab6:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 47b7c <z_cstart+0xd8>
   47aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   47abe:	2400      	movs	r4, #0
   47ac0:	616b      	str	r3, [r5, #20]
   47ac2:	23e0      	movs	r3, #224	; 0xe0
   47ac4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   47ac8:	77ec      	strb	r4, [r5, #31]
   47aca:	762c      	strb	r4, [r5, #24]
   47acc:	766c      	strb	r4, [r5, #25]
   47ace:	76ac      	strb	r4, [r5, #26]
   47ad0:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   47ad4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   47ad6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   47ada:	626b      	str	r3, [r5, #36]	; 0x24
   47adc:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   47ae0:	f7e5 fab2 	bl	2d048 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   47ae4:	f7e5 f8a8 	bl	2cc38 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   47ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   47aec:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   47aee:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
   47af0:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   47af2:	f7e5 fb61 	bl	2d1b8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   47af6:	f7e5 faef 	bl	2d0d8 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   47afa:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   47afe:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   47b00:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   47b04:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   47b08:	f001 fb10 	bl	4912c <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   47b0c:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   47b0e:	f008 fea3 	bl	50858 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   47b12:	4620      	mov	r0, r4
   47b14:	f7ff ff28 	bl	47968 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   47b18:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   47b1a:	4d19      	ldr	r5, [pc, #100]	; (47b80 <z_cstart+0xdc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   47b1c:	f7ff ff24 	bl	47968 <z_sys_init_run_level>
	z_sched_init();
   47b20:	f000 ff6c 	bl	489fc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   47b24:	4b17      	ldr	r3, [pc, #92]	; (47b84 <z_cstart+0xe0>)
   47b26:	9305      	str	r3, [sp, #20]
   47b28:	2301      	movs	r3, #1
   47b2a:	4917      	ldr	r1, [pc, #92]	; (47b88 <z_cstart+0xe4>)
   47b2c:	9400      	str	r4, [sp, #0]
   47b2e:	e9cd 4303 	strd	r4, r3, [sp, #12]
   47b32:	f44f 6280 	mov.w	r2, #1024	; 0x400
   47b36:	464b      	mov	r3, r9
   47b38:	e9cd 4401 	strd	r4, r4, [sp, #4]
   47b3c:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   47b3e:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   47b40:	f000 f888 	bl	47c54 <z_setup_new_thread>
   47b44:	7b6a      	ldrb	r2, [r5, #13]
   47b46:	4607      	mov	r7, r0
   47b48:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   47b4c:	4628      	mov	r0, r5
   47b4e:	736a      	strb	r2, [r5, #13]
   47b50:	f009 f9a4 	bl	50e9c <z_ready_thread>
		init_idle_thread(i);
   47b54:	4620      	mov	r0, r4
   47b56:	f7ff ff57 	bl	47a08 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   47b5a:	4b0c      	ldr	r3, [pc, #48]	; (47b8c <z_cstart+0xe8>)
   47b5c:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   47b5e:	464a      	mov	r2, r9
   47b60:	4639      	mov	r1, r7
   47b62:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   47b64:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   47b66:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   47b6a:	f7e5 f96b 	bl	2ce44 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   47b6e:	bf00      	nop
   47b70:	20009eb0 	.word	0x20009eb0
   47b74:	e000ed00 	.word	0xe000ed00
   47b78:	200071d4 	.word	0x200071d4
   47b7c:	00047a5d 	.word	0x00047a5d
   47b80:	20004080 	.word	0x20004080
   47b84:	000544e7 	.word	0x000544e7
   47b88:	20009ff0 	.word	0x20009ff0
   47b8c:	20004000 	.word	0x20004000

00047b90 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   47b90:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   47b92:	4c06      	ldr	r4, [pc, #24]	; (47bac <statics_init+0x1c>)
   47b94:	4d06      	ldr	r5, [pc, #24]	; (47bb0 <statics_init+0x20>)
   47b96:	42ac      	cmp	r4, r5
   47b98:	d301      	bcc.n	47b9e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   47b9a:	2000      	movs	r0, #0
   47b9c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   47b9e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   47ba2:	4620      	mov	r0, r4
   47ba4:	f008 fe8a 	bl	508bc <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   47ba8:	3414      	adds	r4, #20
   47baa:	e7f4      	b.n	47b96 <statics_init+0x6>
   47bac:	20001138 	.word	0x20001138
   47bb0:	2000114c 	.word	0x2000114c

00047bb4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   47bb4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   47bb6:	4b0e      	ldr	r3, [pc, #56]	; (47bf0 <init_mem_slab_module+0x3c>)
   47bb8:	4c0e      	ldr	r4, [pc, #56]	; (47bf4 <init_mem_slab_module+0x40>)
   47bba:	42a3      	cmp	r3, r4
   47bbc:	d301      	bcc.n	47bc2 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   47bbe:	2000      	movs	r0, #0
	return rc;
}
   47bc0:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   47bc2:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   47bc6:	ea41 0200 	orr.w	r2, r1, r0
   47bca:	f012 0203 	ands.w	r2, r2, #3
   47bce:	d10b      	bne.n	47be8 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   47bd0:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   47bd2:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   47bd4:	42aa      	cmp	r2, r5
   47bd6:	d101      	bne.n	47bdc <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   47bd8:	331c      	adds	r3, #28
   47bda:	e7ee      	b.n	47bba <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   47bdc:	695e      	ldr	r6, [r3, #20]
   47bde:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   47be0:	3201      	adds	r2, #1
		slab->free_list = p;
   47be2:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   47be4:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   47be6:	e7f5      	b.n	47bd4 <init_mem_slab_module+0x20>
	return rc;
   47be8:	f06f 0015 	mvn.w	r0, #21
   47bec:	e7e8      	b.n	47bc0 <init_mem_slab_module+0xc>
   47bee:	bf00      	nop
   47bf0:	200010c8 	.word	0x200010c8
   47bf4:	20001138 	.word	0x20001138

00047bf8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   47bf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   47bfa:	460c      	mov	r4, r1
	__asm__ volatile(
   47bfc:	f04f 0520 	mov.w	r5, #32
   47c00:	f3ef 8111 	mrs	r1, BASEPRI
   47c04:	f385 8812 	msr	BASEPRI_MAX, r5
   47c08:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   47c0c:	6945      	ldr	r5, [r0, #20]
   47c0e:	b15d      	cbz	r5, 47c28 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   47c10:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   47c12:	682b      	ldr	r3, [r5, #0]
   47c14:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   47c16:	6983      	ldr	r3, [r0, #24]
   47c18:	3301      	adds	r3, #1
   47c1a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   47c1c:	2000      	movs	r0, #0
	__asm__ volatile(
   47c1e:	f381 8811 	msr	BASEPRI, r1
   47c22:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   47c26:	e011      	b.n	47c4c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   47c28:	ea52 0603 	orrs.w	r6, r2, r3
   47c2c:	d103      	bne.n	47c36 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   47c2e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   47c30:	f06f 000b 	mvn.w	r0, #11
   47c34:	e7f3      	b.n	47c1e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   47c36:	e9cd 2300 	strd	r2, r3, [sp]
   47c3a:	4602      	mov	r2, r0
   47c3c:	3008      	adds	r0, #8
   47c3e:	f000 fdf1 	bl	48824 <z_pend_curr>
		if (result == 0) {
   47c42:	b918      	cbnz	r0, 47c4c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   47c44:	4b02      	ldr	r3, [pc, #8]	; (47c50 <k_mem_slab_alloc+0x58>)
   47c46:	689b      	ldr	r3, [r3, #8]
   47c48:	695b      	ldr	r3, [r3, #20]
   47c4a:	6023      	str	r3, [r4, #0]
}
   47c4c:	b002      	add	sp, #8
   47c4e:	bd70      	pop	{r4, r5, r6, pc}
   47c50:	200071d4 	.word	0x200071d4

00047c54 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   47c54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   47c58:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   47c5a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   47c5c:	2604      	movs	r6, #4
   47c5e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   47c60:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   47c62:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   47c64:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   47c68:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   47c6a:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   47c6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   47c70:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   47c72:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   47c76:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   47c7a:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   47c7e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   47c80:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   47c82:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   47c84:	9202      	str	r2, [sp, #8]
   47c86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   47c88:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   47c8a:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   47c8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   47c90:	9200      	str	r2, [sp, #0]
   47c92:	4642      	mov	r2, r8
{
   47c94:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   47c96:	f7e5 f8b9 	bl	2ce0c <arch_new_thread>
	if (!_current) {
   47c9a:	4b05      	ldr	r3, [pc, #20]	; (47cb0 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   47c9c:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   47c9e:	689b      	ldr	r3, [r3, #8]
   47ca0:	b103      	cbz	r3, 47ca4 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   47ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   47ca4:	6763      	str	r3, [r4, #116]	; 0x74
}
   47ca6:	4640      	mov	r0, r8
   47ca8:	b004      	add	sp, #16
   47caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   47cae:	bf00      	nop
   47cb0:	200071d4 	.word	0x200071d4

00047cb4 <z_impl_k_thread_create>:
{
   47cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   47cb6:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   47cb8:	2500      	movs	r5, #0
   47cba:	9505      	str	r5, [sp, #20]
   47cbc:	9d10      	ldr	r5, [sp, #64]	; 0x40
   47cbe:	9504      	str	r5, [sp, #16]
   47cc0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   47cc2:	9503      	str	r5, [sp, #12]
   47cc4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   47cc6:	9502      	str	r5, [sp, #8]
{
   47cc8:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   47ccc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   47cce:	9501      	str	r5, [sp, #4]
   47cd0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   47cd2:	9500      	str	r5, [sp, #0]
{
   47cd4:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   47cd6:	f7ff ffbd 	bl	47c54 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   47cda:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   47cde:	bf08      	it	eq
   47ce0:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   47ce4:	d005      	beq.n	47cf2 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   47ce6:	ea56 0307 	orrs.w	r3, r6, r7
   47cea:	d105      	bne.n	47cf8 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   47cec:	4620      	mov	r0, r4
   47cee:	f000 fe05 	bl	488fc <z_sched_start>
}
   47cf2:	4620      	mov	r0, r4
   47cf4:	b007      	add	sp, #28
   47cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   47cf8:	4903      	ldr	r1, [pc, #12]	; (47d08 <z_impl_k_thread_create+0x54>)
   47cfa:	463a      	mov	r2, r7
   47cfc:	4633      	mov	r3, r6
   47cfe:	f104 0018 	add.w	r0, r4, #24
   47d02:	f001 f803 	bl	48d0c <z_add_timeout>
   47d06:	e7f4      	b.n	47cf2 <z_impl_k_thread_create+0x3e>
   47d08:	00050e09 	.word	0x00050e09

00047d0c <z_init_static_threads>:
{
   47d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   47d10:	4c29      	ldr	r4, [pc, #164]	; (47db8 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   47d12:	4d2a      	ldr	r5, [pc, #168]	; (47dbc <z_init_static_threads+0xb0>)
{
   47d14:	b087      	sub	sp, #28
   47d16:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   47d18:	42ae      	cmp	r6, r5
   47d1a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   47d1e:	d30f      	bcc.n	47d40 <z_init_static_threads+0x34>
	k_sched_lock();
   47d20:	f000 fe3c 	bl	4899c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   47d24:	4c24      	ldr	r4, [pc, #144]	; (47db8 <z_init_static_threads+0xac>)
   47d26:	f8df 9098 	ldr.w	r9, [pc, #152]	; 47dc0 <z_init_static_threads+0xb4>
   47d2a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   47d2e:	f240 37e7 	movw	r7, #999	; 0x3e7
   47d32:	42ac      	cmp	r4, r5
   47d34:	d320      	bcc.n	47d78 <z_init_static_threads+0x6c>
}
   47d36:	b007      	add	sp, #28
   47d38:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   47d3c:	f000 be42 	b.w	489c4 <k_sched_unlock>
		z_setup_new_thread(
   47d40:	f854 3c04 	ldr.w	r3, [r4, #-4]
   47d44:	9305      	str	r3, [sp, #20]
   47d46:	f854 3c10 	ldr.w	r3, [r4, #-16]
   47d4a:	9304      	str	r3, [sp, #16]
   47d4c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   47d50:	9303      	str	r3, [sp, #12]
   47d52:	f854 3c18 	ldr.w	r3, [r4, #-24]
   47d56:	9302      	str	r3, [sp, #8]
   47d58:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   47d5c:	9301      	str	r3, [sp, #4]
   47d5e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   47d62:	9300      	str	r3, [sp, #0]
   47d64:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   47d68:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   47d6c:	f7ff ff72 	bl	47c54 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   47d70:	f854 3c30 	ldr.w	r3, [r4, #-48]
   47d74:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   47d76:	e7ce      	b.n	47d16 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   47d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
   47d7a:	1c5a      	adds	r2, r3, #1
   47d7c:	d00d      	beq.n	47d9a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   47d7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   47d82:	2100      	movs	r1, #0
   47d84:	4638      	mov	r0, r7
   47d86:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   47d8a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   47d8e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   47d92:	d104      	bne.n	47d9e <z_init_static_threads+0x92>
	z_sched_start(thread);
   47d94:	4640      	mov	r0, r8
   47d96:	f000 fdb1 	bl	488fc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   47d9a:	3430      	adds	r4, #48	; 0x30
   47d9c:	e7c9      	b.n	47d32 <z_init_static_threads+0x26>
   47d9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   47da2:	2300      	movs	r3, #0
   47da4:	f7de f9ac 	bl	26100 <__aeabi_uldivmod>
   47da8:	4602      	mov	r2, r0
   47daa:	460b      	mov	r3, r1
   47dac:	f108 0018 	add.w	r0, r8, #24
   47db0:	4649      	mov	r1, r9
   47db2:	f000 ffab 	bl	48d0c <z_add_timeout>
   47db6:	e7f0      	b.n	47d9a <z_init_static_threads+0x8e>
   47db8:	20001054 	.word	0x20001054
   47dbc:	20001054 	.word	0x20001054
   47dc0:	00050e09 	.word	0x00050e09

00047dc4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   47dc4:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   47dc6:	4c0b      	ldr	r4, [pc, #44]	; (47df4 <idle+0x30>)
	return !z_sys_post_kernel;
   47dc8:	4d0b      	ldr	r5, [pc, #44]	; (47df8 <idle+0x34>)
	__asm__ volatile(
   47dca:	f04f 0220 	mov.w	r2, #32
   47dce:	f3ef 8311 	mrs	r3, BASEPRI
   47dd2:	f382 8812 	msr	BASEPRI_MAX, r2
   47dd6:	f3bf 8f6f 	isb	sy
   47dda:	f009 f925 	bl	51028 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   47dde:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   47de0:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   47de2:	b913      	cbnz	r3, 47dea <idle+0x26>
	arch_cpu_idle();
   47de4:	f7e4 ff2e 	bl	2cc44 <arch_cpu_idle>
}
   47de8:	e7ef      	b.n	47dca <idle+0x6>
   47dea:	f7e4 fd2d 	bl	2c848 <pm_system_suspend>
   47dee:	2800      	cmp	r0, #0
   47df0:	d1eb      	bne.n	47dca <idle+0x6>
   47df2:	e7f7      	b.n	47de4 <idle+0x20>
   47df4:	200071d4 	.word	0x200071d4
   47df8:	2000742f 	.word	0x2000742f

00047dfc <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   47dfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   47e00:	4604      	mov	r4, r0
   47e02:	460e      	mov	r6, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   47e04:	f100 0808 	add.w	r8, r0, #8
   47e08:	f04f 0120 	mov.w	r1, #32
   47e0c:	f3ef 8711 	mrs	r7, BASEPRI
   47e10:	f381 8812 	msr	BASEPRI_MAX, r1
   47e14:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   47e18:	6a05      	ldr	r5, [r0, #32]
   47e1a:	68c1      	ldr	r1, [r0, #12]
   47e1c:	428d      	cmp	r5, r1
   47e1e:	d22f      	bcs.n	47e80 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   47e20:	f009 f873 	bl	50f0a <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   47e24:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   47e26:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   47e28:	4631      	mov	r1, r6
		if (pending_thread != NULL) {
   47e2a:	b178      	cbz	r0, 47e4c <z_impl_k_msgq_put+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   47e2c:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
   47e2e:	6940      	ldr	r0, [r0, #20]
   47e30:	f003 ff99 	bl	4bd66 <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   47e34:	4628      	mov	r0, r5
   47e36:	67ec      	str	r4, [r5, #124]	; 0x7c
   47e38:	f009 f830 	bl	50e9c <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   47e3c:	4640      	mov	r0, r8
   47e3e:	4639      	mov	r1, r7
   47e40:	f000 fd4a 	bl	488d8 <z_reschedule>
			return 0;
   47e44:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   47e46:	b002      	add	sp, #8
   47e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   47e4c:	69e0      	ldr	r0, [r4, #28]
   47e4e:	f003 ff8a 	bl	4bd66 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   47e52:	69e3      	ldr	r3, [r4, #28]
   47e54:	68a2      	ldr	r2, [r4, #8]
   47e56:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   47e58:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   47e5a:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   47e5c:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   47e5e:	bf04      	itt	eq
   47e60:	6923      	ldreq	r3, [r4, #16]
   47e62:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   47e64:	6a23      	ldr	r3, [r4, #32]
   47e66:	3301      	adds	r3, #1
	z_handle_obj_poll_events(&msgq->poll_events, state);
   47e68:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->used_msgs++;
   47e6c:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   47e6e:	2110      	movs	r1, #16
   47e70:	f009 fa8f 	bl	51392 <z_handle_obj_poll_events>
		result = 0;
   47e74:	2000      	movs	r0, #0
	__asm__ volatile(
   47e76:	f387 8811 	msr	BASEPRI, r7
   47e7a:	f3bf 8f6f 	isb	sy
	return result;
   47e7e:	e7e2      	b.n	47e46 <z_impl_k_msgq_put+0x4a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   47e80:	ea52 0103 	orrs.w	r1, r2, r3
   47e84:	d00a      	beq.n	47e9c <z_impl_k_msgq_put+0xa0>
		_current->base.swap_data = (void *) data;
   47e86:	4907      	ldr	r1, [pc, #28]	; (47ea4 <z_impl_k_msgq_put+0xa8>)
   47e88:	6889      	ldr	r1, [r1, #8]
   47e8a:	614e      	str	r6, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   47e8c:	e9cd 2300 	strd	r2, r3, [sp]
   47e90:	4639      	mov	r1, r7
   47e92:	4602      	mov	r2, r0
   47e94:	4640      	mov	r0, r8
   47e96:	f000 fcc5 	bl	48824 <z_pend_curr>
		return result;
   47e9a:	e7d4      	b.n	47e46 <z_impl_k_msgq_put+0x4a>
		result = -ENOMSG;
   47e9c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   47ea0:	e7e9      	b.n	47e76 <z_impl_k_msgq_put+0x7a>
   47ea2:	bf00      	nop
   47ea4:	200071d4 	.word	0x200071d4

00047ea8 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   47ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   47eaa:	4604      	mov	r4, r0

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   47eac:	f104 0708 	add.w	r7, r4, #8
{
   47eb0:	4608      	mov	r0, r1
	__asm__ volatile(
   47eb2:	f04f 0120 	mov.w	r1, #32
   47eb6:	f3ef 8611 	mrs	r6, BASEPRI
   47eba:	f381 8812 	msr	BASEPRI_MAX, r1
   47ebe:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   47ec2:	6a21      	ldr	r1, [r4, #32]
   47ec4:	2900      	cmp	r1, #0
   47ec6:	d031      	beq.n	47f2c <z_impl_k_msgq_get+0x84>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   47ec8:	68a2      	ldr	r2, [r4, #8]
   47eca:	69a1      	ldr	r1, [r4, #24]
   47ecc:	f003 ff4b 	bl	4bd66 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   47ed0:	69a3      	ldr	r3, [r4, #24]
   47ed2:	68a2      	ldr	r2, [r4, #8]
   47ed4:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   47ed6:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   47ed8:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   47eda:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   47edc:	bf04      	itt	eq
   47ede:	6923      	ldreq	r3, [r4, #16]
   47ee0:	61a3      	streq	r3, [r4, #24]
		}
		msgq->used_msgs--;
   47ee2:	6a23      	ldr	r3, [r4, #32]
   47ee4:	3b01      	subs	r3, #1
   47ee6:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   47ee8:	4620      	mov	r0, r4
   47eea:	f009 f80e 	bl	50f0a <z_unpend_first_thread>
		if (pending_thread != NULL) {
   47eee:	4605      	mov	r5, r0
   47ef0:	b360      	cbz	r0, 47f4c <z_impl_k_msgq_get+0xa4>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   47ef2:	6941      	ldr	r1, [r0, #20]
   47ef4:	68a2      	ldr	r2, [r4, #8]
   47ef6:	69e0      	ldr	r0, [r4, #28]
   47ef8:	f003 ff35 	bl	4bd66 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   47efc:	69e3      	ldr	r3, [r4, #28]
   47efe:	68a2      	ldr	r2, [r4, #8]
   47f00:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   47f02:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   47f04:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   47f06:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   47f08:	bf04      	itt	eq
   47f0a:	6923      	ldreq	r3, [r4, #16]
   47f0c:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   47f0e:	6a23      	ldr	r3, [r4, #32]
   47f10:	3301      	adds	r3, #1
   47f12:	6223      	str	r3, [r4, #32]
   47f14:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   47f16:	4628      	mov	r0, r5
   47f18:	67ec      	str	r4, [r5, #124]	; 0x7c
   47f1a:	f008 ffbf 	bl	50e9c <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   47f1e:	4638      	mov	r0, r7
   47f20:	4631      	mov	r1, r6
   47f22:	f000 fcd9 	bl	488d8 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   47f26:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   47f28:	b003      	add	sp, #12
   47f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   47f2c:	ea52 0103 	orrs.w	r1, r2, r3
   47f30:	d00a      	beq.n	47f48 <z_impl_k_msgq_get+0xa0>
		_current->base.swap_data = data;
   47f32:	4909      	ldr	r1, [pc, #36]	; (47f58 <z_impl_k_msgq_get+0xb0>)
   47f34:	6889      	ldr	r1, [r1, #8]
   47f36:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   47f38:	e9cd 2300 	strd	r2, r3, [sp]
   47f3c:	4631      	mov	r1, r6
   47f3e:	4622      	mov	r2, r4
   47f40:	4638      	mov	r0, r7
   47f42:	f000 fc6f 	bl	48824 <z_pend_curr>
		return result;
   47f46:	e7ef      	b.n	47f28 <z_impl_k_msgq_get+0x80>
		result = -ENOMSG;
   47f48:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   47f4c:	f386 8811 	msr	BASEPRI, r6
   47f50:	f3bf 8f6f 	isb	sy
	return result;
   47f54:	e7e8      	b.n	47f28 <z_impl_k_msgq_get+0x80>
   47f56:	bf00      	nop
   47f58:	200071d4 	.word	0x200071d4

00047f5c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   47f5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   47f60:	4604      	mov	r4, r0
   47f62:	4617      	mov	r7, r2
   47f64:	461e      	mov	r6, r3
	__asm__ volatile(
   47f66:	f04f 0320 	mov.w	r3, #32
   47f6a:	f3ef 8811 	mrs	r8, BASEPRI
   47f6e:	f383 8812 	msr	BASEPRI_MAX, r3
   47f72:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   47f76:	68c3      	ldr	r3, [r0, #12]
   47f78:	4a32      	ldr	r2, [pc, #200]	; (48044 <z_impl_k_mutex_lock+0xe8>)
   47f7a:	b17b      	cbz	r3, 47f9c <z_impl_k_mutex_lock+0x40>
   47f7c:	6880      	ldr	r0, [r0, #8]
   47f7e:	6891      	ldr	r1, [r2, #8]
   47f80:	4288      	cmp	r0, r1
   47f82:	d019      	beq.n	47fb8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   47f84:	ea57 0306 	orrs.w	r3, r7, r6
   47f88:	d118      	bne.n	47fbc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   47f8a:	f388 8811 	msr	BASEPRI, r8
   47f8e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   47f92:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   47f96:	b002      	add	sp, #8
   47f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   47f9c:	6891      	ldr	r1, [r2, #8]
   47f9e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   47fa2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   47fa4:	3301      	adds	r3, #1
   47fa6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   47fa8:	6893      	ldr	r3, [r2, #8]
   47faa:	60a3      	str	r3, [r4, #8]
   47fac:	f388 8811 	msr	BASEPRI, r8
   47fb0:	f3bf 8f6f 	isb	sy
		return 0;
   47fb4:	2000      	movs	r0, #0
   47fb6:	e7ee      	b.n	47f96 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   47fb8:	6921      	ldr	r1, [r4, #16]
   47fba:	e7f2      	b.n	47fa2 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   47fbc:	f991 100e 	ldrsb.w	r1, [r1, #14]
   47fc0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   47fc4:	4299      	cmp	r1, r3
   47fc6:	bfa8      	it	ge
   47fc8:	4619      	movge	r1, r3
   47fca:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   47fce:	4291      	cmp	r1, r2
   47fd0:	bfb8      	it	lt
   47fd2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   47fd4:	428b      	cmp	r3, r1
   47fd6:	dd2e      	ble.n	48036 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   47fd8:	f008 fd11 	bl	509fe <adjust_owner_prio.isra.0>
   47fdc:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   47fde:	e9cd 7600 	strd	r7, r6, [sp]
   47fe2:	4819      	ldr	r0, [pc, #100]	; (48048 <z_impl_k_mutex_lock+0xec>)
   47fe4:	4622      	mov	r2, r4
   47fe6:	4641      	mov	r1, r8
   47fe8:	f000 fc1c 	bl	48824 <z_pend_curr>
	if (got_mutex == 0) {
   47fec:	2800      	cmp	r0, #0
   47fee:	d0e1      	beq.n	47fb4 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   47ff0:	f04f 0320 	mov.w	r3, #32
   47ff4:	f3ef 8611 	mrs	r6, BASEPRI
   47ff8:	f383 8812 	msr	BASEPRI_MAX, r3
   47ffc:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   48000:	6823      	ldr	r3, [r4, #0]
   48002:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48004:	429c      	cmp	r4, r3
   48006:	d00a      	beq.n	4801e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   48008:	b14b      	cbz	r3, 4801e <z_impl_k_mutex_lock+0xc2>
   4800a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   4800e:	4299      	cmp	r1, r3
   48010:	bfa8      	it	ge
   48012:	4619      	movge	r1, r3
   48014:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   48018:	4299      	cmp	r1, r3
   4801a:	bfb8      	it	lt
   4801c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   4801e:	68a0      	ldr	r0, [r4, #8]
   48020:	f008 fced 	bl	509fe <adjust_owner_prio.isra.0>
   48024:	b948      	cbnz	r0, 4803a <z_impl_k_mutex_lock+0xde>
   48026:	b945      	cbnz	r5, 4803a <z_impl_k_mutex_lock+0xde>
	__asm__ volatile(
   48028:	f386 8811 	msr	BASEPRI, r6
   4802c:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   48030:	f06f 000a 	mvn.w	r0, #10
   48034:	e7af      	b.n	47f96 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   48036:	2500      	movs	r5, #0
   48038:	e7d1      	b.n	47fde <z_impl_k_mutex_lock+0x82>
		z_reschedule(&lock, key);
   4803a:	4803      	ldr	r0, [pc, #12]	; (48048 <z_impl_k_mutex_lock+0xec>)
   4803c:	4631      	mov	r1, r6
   4803e:	f000 fc4b 	bl	488d8 <z_reschedule>
   48042:	e7f5      	b.n	48030 <z_impl_k_mutex_lock+0xd4>
   48044:	200071d4 	.word	0x200071d4
   48048:	20007430 	.word	0x20007430

0004804c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   4804c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   4804e:	6883      	ldr	r3, [r0, #8]
{
   48050:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   48052:	2b00      	cmp	r3, #0
   48054:	d032      	beq.n	480bc <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   48056:	4a1c      	ldr	r2, [pc, #112]	; (480c8 <z_impl_k_mutex_unlock+0x7c>)
   48058:	6892      	ldr	r2, [r2, #8]
   4805a:	4293      	cmp	r3, r2
   4805c:	d131      	bne.n	480c2 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   4805e:	7bda      	ldrb	r2, [r3, #15]
   48060:	3a01      	subs	r2, #1
   48062:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   48064:	68c3      	ldr	r3, [r0, #12]
   48066:	2b01      	cmp	r3, #1
   48068:	d905      	bls.n	48076 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   4806a:	3b01      	subs	r3, #1
   4806c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   4806e:	f000 fca9 	bl	489c4 <k_sched_unlock>

	return 0;
   48072:	2000      	movs	r0, #0
}
   48074:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   48076:	f04f 0320 	mov.w	r3, #32
   4807a:	f3ef 8511 	mrs	r5, BASEPRI
   4807e:	f383 8812 	msr	BASEPRI_MAX, r3
   48082:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   48086:	6901      	ldr	r1, [r0, #16]
   48088:	6880      	ldr	r0, [r0, #8]
   4808a:	f008 fcb8 	bl	509fe <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   4808e:	4620      	mov	r0, r4
   48090:	f008 ff3b 	bl	50f0a <z_unpend_first_thread>
	mutex->owner = new_owner;
   48094:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   48096:	b158      	cbz	r0, 480b0 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   48098:	f990 200e 	ldrsb.w	r2, [r0, #14]
   4809c:	6122      	str	r2, [r4, #16]
   4809e:	2200      	movs	r2, #0
   480a0:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   480a2:	f008 fefb 	bl	50e9c <z_ready_thread>
		z_reschedule(&lock, key);
   480a6:	4809      	ldr	r0, [pc, #36]	; (480cc <z_impl_k_mutex_unlock+0x80>)
   480a8:	4629      	mov	r1, r5
   480aa:	f000 fc15 	bl	488d8 <z_reschedule>
   480ae:	e7de      	b.n	4806e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   480b0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   480b2:	f385 8811 	msr	BASEPRI, r5
   480b6:	f3bf 8f6f 	isb	sy
   480ba:	e7d8      	b.n	4806e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   480bc:	f06f 0015 	mvn.w	r0, #21
   480c0:	e7d8      	b.n	48074 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   480c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   480c6:	e7d5      	b.n	48074 <z_impl_k_mutex_unlock+0x28>
   480c8:	200071d4 	.word	0x200071d4
   480cc:	20007430 	.word	0x20007430

000480d0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   480d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   480d2:	4611      	mov	r1, r2
	__asm__ volatile(
   480d4:	f04f 0220 	mov.w	r2, #32
   480d8:	f3ef 8511 	mrs	r5, BASEPRI
   480dc:	f382 8812 	msr	BASEPRI_MAX, r2
   480e0:	f3bf 8f6f 	isb	sy
   480e4:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   480e6:	b19c      	cbz	r4, 48110 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   480e8:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   480ea:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   480ec:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   480f0:	4294      	cmp	r4, r2
	list->head = node;
   480f2:	6003      	str	r3, [r0, #0]
	list->tail = node;
   480f4:	bf08      	it	eq
   480f6:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   480f8:	2101      	movs	r1, #1
   480fa:	4620      	mov	r0, r4
   480fc:	f008 fcf4 	bl	50ae8 <z_queue_node_peek>
   48100:	4604      	mov	r4, r0
	__asm__ volatile(
   48102:	f385 8811 	msr	BASEPRI, r5
   48106:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   4810a:	4620      	mov	r0, r4
   4810c:	b003      	add	sp, #12
   4810e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   48110:	ea51 0203 	orrs.w	r2, r1, r3
   48114:	d0f5      	beq.n	48102 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   48116:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   4811a:	e9cd 1300 	strd	r1, r3, [sp]
   4811e:	4610      	mov	r0, r2
   48120:	4629      	mov	r1, r5
   48122:	f000 fb7f 	bl	48824 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   48126:	2800      	cmp	r0, #0
   48128:	d1ef      	bne.n	4810a <z_impl_k_queue_get+0x3a>
   4812a:	4b02      	ldr	r3, [pc, #8]	; (48134 <z_impl_k_queue_get+0x64>)
   4812c:	689b      	ldr	r3, [r3, #8]
   4812e:	695c      	ldr	r4, [r3, #20]
   48130:	e7eb      	b.n	4810a <z_impl_k_queue_get+0x3a>
   48132:	bf00      	nop
   48134:	200071d4 	.word	0x200071d4

00048138 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   48138:	b538      	push	{r3, r4, r5, lr}
   4813a:	4604      	mov	r4, r0
	__asm__ volatile(
   4813c:	f04f 0320 	mov.w	r3, #32
   48140:	f3ef 8511 	mrs	r5, BASEPRI
   48144:	f383 8812 	msr	BASEPRI_MAX, r3
   48148:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   4814c:	f008 fedd 	bl	50f0a <z_unpend_first_thread>

	if (thread != NULL) {
   48150:	b148      	cbz	r0, 48166 <z_impl_k_sem_give+0x2e>
   48152:	2200      	movs	r2, #0
   48154:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   48156:	f008 fea1 	bl	50e9c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   4815a:	4629      	mov	r1, r5
   4815c:	4808      	ldr	r0, [pc, #32]	; (48180 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   4815e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   48162:	f000 bbb9 	b.w	488d8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   48166:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   4816a:	429a      	cmp	r2, r3
   4816c:	bf18      	it	ne
   4816e:	3301      	addne	r3, #1
   48170:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   48172:	2102      	movs	r1, #2
   48174:	f104 0010 	add.w	r0, r4, #16
   48178:	f009 f90b 	bl	51392 <z_handle_obj_poll_events>
}
   4817c:	e7ed      	b.n	4815a <z_impl_k_sem_give+0x22>
   4817e:	bf00      	nop
   48180:	20007430 	.word	0x20007430

00048184 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   48184:	b513      	push	{r0, r1, r4, lr}
   48186:	f04f 0420 	mov.w	r4, #32
   4818a:	f3ef 8111 	mrs	r1, BASEPRI
   4818e:	f384 8812 	msr	BASEPRI_MAX, r4
   48192:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   48196:	6884      	ldr	r4, [r0, #8]
   48198:	b144      	cbz	r4, 481ac <z_impl_k_sem_take+0x28>
		sem->count--;
   4819a:	3c01      	subs	r4, #1
   4819c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   4819e:	f381 8811 	msr	BASEPRI, r1
   481a2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   481a6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   481a8:	b002      	add	sp, #8
   481aa:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   481ac:	ea52 0403 	orrs.w	r4, r2, r3
   481b0:	d106      	bne.n	481c0 <z_impl_k_sem_take+0x3c>
   481b2:	f381 8811 	msr	BASEPRI, r1
   481b6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   481ba:	f06f 000f 	mvn.w	r0, #15
   481be:	e7f3      	b.n	481a8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   481c0:	e9cd 2300 	strd	r2, r3, [sp]
   481c4:	4602      	mov	r2, r0
   481c6:	4802      	ldr	r0, [pc, #8]	; (481d0 <z_impl_k_sem_take+0x4c>)
   481c8:	f000 fb2c 	bl	48824 <z_pend_curr>
	return ret;
   481cc:	e7ec      	b.n	481a8 <z_impl_k_sem_take+0x24>
   481ce:	bf00      	nop
   481d0:	20007430 	.word	0x20007430

000481d4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   481d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   481d6:	4b09      	ldr	r3, [pc, #36]	; (481fc <k_sys_work_q_init+0x28>)
   481d8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   481da:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   481dc:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   481de:	9300      	str	r3, [sp, #0]
   481e0:	4907      	ldr	r1, [pc, #28]	; (48200 <k_sys_work_q_init+0x2c>)
   481e2:	4808      	ldr	r0, [pc, #32]	; (48204 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   481e4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   481e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   481ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
   481f0:	f000 f92c 	bl	4844c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   481f4:	4620      	mov	r0, r4
   481f6:	b004      	add	sp, #16
   481f8:	bd10      	pop	{r4, pc}
   481fa:	bf00      	nop
   481fc:	000544ec 	.word	0x000544ec
   48200:	2000a3f0 	.word	0x2000a3f0
   48204:	20004100 	.word	0x20004100

00048208 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   48208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   4820c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 4834c <work_queue_main+0x144>
   48210:	b085      	sub	sp, #20
   48212:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   48214:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   48218:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	__asm__ volatile(
   4821c:	f04f 0320 	mov.w	r3, #32
   48220:	f3ef 8811 	mrs	r8, BASEPRI
   48224:	f383 8812 	msr	BASEPRI_MAX, r3
   48228:	f3bf 8f6f 	isb	sy
   4822c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   48230:	b98d      	cbnz	r5, 48256 <work_queue_main+0x4e>
		} else if (flag_test_and_clear(&queue->flags,
   48232:	2102      	movs	r1, #2
   48234:	f104 0098 	add.w	r0, r4, #152	; 0x98
   48238:	f008 fcd2 	bl	50be0 <flag_test_and_clear>
   4823c:	2800      	cmp	r0, #0
   4823e:	d143      	bne.n	482c8 <work_queue_main+0xc0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   48240:	2300      	movs	r3, #0
   48242:	e9cd 6700 	strd	r6, r7, [sp]
   48246:	9302      	str	r3, [sp, #8]
   48248:	f104 0288 	add.w	r2, r4, #136	; 0x88
   4824c:	4641      	mov	r1, r8
   4824e:	4840      	ldr	r0, [pc, #256]	; (48350 <work_queue_main+0x148>)
   48250:	f000 fce4 	bl	48c1c <z_sched_wait>
			continue;
   48254:	e7e2      	b.n	4821c <work_queue_main+0x14>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   48256:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   4825a:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   4825c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   48260:	4295      	cmp	r5, r2
	list->tail = node;
   48262:	bf08      	it	eq
   48264:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   48268:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   4826c:	f043 0302 	orr.w	r3, r3, #2
   48270:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   48274:	68eb      	ldr	r3, [r5, #12]
   48276:	f023 0304 	bic.w	r3, r3, #4
   4827a:	f043 0301 	orr.w	r3, r3, #1
   4827e:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   48280:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   48282:	f388 8811 	msr	BASEPRI, r8
   48286:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   4828a:	4628      	mov	r0, r5
   4828c:	4798      	blx	r3
	__asm__ volatile(
   4828e:	f04f 0320 	mov.w	r3, #32
   48292:	f3ef 8b11 	mrs	fp, BASEPRI
   48296:	f383 8812 	msr	BASEPRI_MAX, r3
   4829a:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   4829e:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   482a0:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   482a2:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   482a6:	d419      	bmi.n	482dc <work_queue_main+0xd4>
	*flagp &= ~BIT(bit);
   482a8:	60ea      	str	r2, [r5, #12]
   482aa:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   482ae:	f023 0302 	bic.w	r3, r3, #2
   482b2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   482b6:	f38b 8811 	msr	BASEPRI, fp
   482ba:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   482be:	05db      	lsls	r3, r3, #23
   482c0:	d4ac      	bmi.n	4821c <work_queue_main+0x14>
	z_impl_k_yield();
   482c2:	f000 fba7 	bl	48a14 <z_impl_k_yield>
}
   482c6:	e7a9      	b.n	4821c <work_queue_main+0x14>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   482c8:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   482cc:	2200      	movs	r2, #0
   482ce:	2101      	movs	r1, #1
   482d0:	4628      	mov	r0, r5
   482d2:	f008 fe70 	bl	50fb6 <z_sched_wake>
   482d6:	2800      	cmp	r0, #0
   482d8:	d1f8      	bne.n	482cc <work_queue_main+0xc4>
   482da:	e7b1      	b.n	48240 <work_queue_main+0x38>
	*flagp &= ~BIT(bit);
   482dc:	f023 0303 	bic.w	r3, r3, #3
   482e0:	60eb      	str	r3, [r5, #12]
	return list->head;
   482e2:	f8d9 3000 	ldr.w	r3, [r9]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   482e6:	2b00      	cmp	r3, #0
   482e8:	d0df      	beq.n	482aa <work_queue_main+0xa2>
	return node->next;
   482ea:	f04f 0800 	mov.w	r8, #0
   482ee:	f8d3 a000 	ldr.w	sl, [r3]
	parent->next = child;
   482f2:	4641      	mov	r1, r8
   482f4:	2b00      	cmp	r3, #0
   482f6:	d0d8      	beq.n	482aa <work_queue_main+0xa2>
		if (wc->work == work) {
   482f8:	685a      	ldr	r2, [r3, #4]
   482fa:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   482fc:	4618      	mov	r0, r3
		if (wc->work == work) {
   482fe:	d112      	bne.n	48326 <work_queue_main+0x11e>
	return node->next;
   48300:	681a      	ldr	r2, [r3, #0]
	return list->tail;
   48302:	f8d9 0004 	ldr.w	r0, [r9, #4]
Z_GENLIST_REMOVE(slist, snode)
   48306:	f1b8 0f00 	cmp.w	r8, #0
   4830a:	d115      	bne.n	48338 <work_queue_main+0x130>
   4830c:	4283      	cmp	r3, r0
	list->head = node;
   4830e:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
   48312:	d101      	bne.n	48318 <work_queue_main+0x110>
	list->tail = node;
   48314:	f8c9 2004 	str.w	r2, [r9, #4]
	parent->next = child;
   48318:	4618      	mov	r0, r3
   4831a:	f840 1b08 	str.w	r1, [r0], #8
	z_impl_k_sem_give(sem);
   4831e:	f7ff ff0b 	bl	48138 <z_impl_k_sem_give>
}
   48322:	4640      	mov	r0, r8
   48324:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   48326:	f1ba 0f00 	cmp.w	sl, #0
   4832a:	d00c      	beq.n	48346 <work_queue_main+0x13e>
	return node->next;
   4832c:	f8da 2000 	ldr.w	r2, [sl]
   48330:	4653      	mov	r3, sl
   48332:	4680      	mov	r8, r0
   48334:	4692      	mov	sl, r2
   48336:	e7dd      	b.n	482f4 <work_queue_main+0xec>
Z_GENLIST_REMOVE(slist, snode)
   48338:	4283      	cmp	r3, r0
	parent->next = child;
   4833a:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
   4833e:	bf08      	it	eq
   48340:	f8c9 8004 	streq.w	r8, [r9, #4]
}
   48344:	e7e8      	b.n	48318 <work_queue_main+0x110>
   48346:	4652      	mov	r2, sl
   48348:	e7f2      	b.n	48330 <work_queue_main+0x128>
   4834a:	bf00      	nop
   4834c:	200071fc 	.word	0x200071fc
   48350:	20007430 	.word	0x20007430

00048354 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   48354:	68c3      	ldr	r3, [r0, #12]
{
   48356:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   48358:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   4835c:	079b      	lsls	r3, r3, #30
{
   4835e:	4605      	mov	r5, r0
   48360:	460c      	mov	r4, r1
	if (ret) {
   48362:	d50d      	bpl.n	48380 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   48364:	2201      	movs	r2, #1
   48366:	2100      	movs	r1, #0
   48368:	f104 0008 	add.w	r0, r4, #8
   4836c:	f008 fc28 	bl	50bc0 <z_impl_k_sem_init>
	parent->next = child;
   48370:	2300      	movs	r3, #0
   48372:	6023      	str	r3, [r4, #0]
	return list->tail;
   48374:	4b05      	ldr	r3, [pc, #20]	; (4838c <cancel_sync_locked+0x38>)
	canceler->work = work;
   48376:	6065      	str	r5, [r4, #4]
   48378:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   4837a:	b91a      	cbnz	r2, 48384 <cancel_sync_locked+0x30>
	list->head = node;
   4837c:	e9c3 4400 	strd	r4, r4, [r3]
}
   48380:	4630      	mov	r0, r6
   48382:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   48384:	6014      	str	r4, [r2, #0]
	list->tail = node;
   48386:	605c      	str	r4, [r3, #4]
}
   48388:	e7fa      	b.n	48380 <cancel_sync_locked+0x2c>
   4838a:	bf00      	nop
   4838c:	200071fc 	.word	0x200071fc

00048390 <submit_to_queue_locked>:
{
   48390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   48392:	68c3      	ldr	r3, [r0, #12]
{
   48394:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   48396:	0799      	lsls	r1, r3, #30
{
   48398:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   4839a:	f3c3 0640 	ubfx	r6, r3, #1, #1
   4839e:	d42b      	bmi.n	483f8 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   483a0:	075a      	lsls	r2, r3, #29
   483a2:	d419      	bmi.n	483d8 <submit_to_queue_locked+0x48>
		if (*queuep == NULL) {
   483a4:	683a      	ldr	r2, [r7, #0]
   483a6:	b90a      	cbnz	r2, 483ac <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   483a8:	6882      	ldr	r2, [r0, #8]
   483aa:	603a      	str	r2, [r7, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   483ac:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   483ae:	bf44      	itt	mi
   483b0:	68a3      	ldrmi	r3, [r4, #8]
   483b2:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   483b4:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   483b6:	bf4c      	ite	mi
   483b8:	2602      	movmi	r6, #2
		ret = 1;
   483ba:	2601      	movpl	r6, #1
	if (queue == NULL) {
   483bc:	2d00      	cmp	r5, #0
   483be:	d03a      	beq.n	48436 <submit_to_queue_locked+0xa6>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   483c0:	4b1e      	ldr	r3, [pc, #120]	; (4843c <submit_to_queue_locked+0xac>)
   483c2:	689b      	ldr	r3, [r3, #8]
   483c4:	42ab      	cmp	r3, r5
   483c6:	d00a      	beq.n	483de <submit_to_queue_locked+0x4e>
	return (*flagp & BIT(bit)) != 0U;
   483c8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   483cc:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   483ce:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   483d2:	d414      	bmi.n	483fe <submit_to_queue_locked+0x6e>
		ret = -EBUSY;
   483d4:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   483d8:	2300      	movs	r3, #0
   483da:	603b      	str	r3, [r7, #0]
	return ret;
   483dc:	e025      	b.n	4842a <submit_to_queue_locked+0x9a>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   483de:	f008 fafc 	bl	509da <k_is_in_isr>
   483e2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   483e6:	2800      	cmp	r0, #0
   483e8:	d1f0      	bne.n	483cc <submit_to_queue_locked+0x3c>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   483ea:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   483ec:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   483f0:	d5f0      	bpl.n	483d4 <submit_to_queue_locked+0x44>
	} else if (plugged && !draining) {
   483f2:	b152      	cbz	r2, 4840a <submit_to_queue_locked+0x7a>
   483f4:	075b      	lsls	r3, r3, #29
   483f6:	d408      	bmi.n	4840a <submit_to_queue_locked+0x7a>
		ret = -EBUSY;
   483f8:	f06f 060f 	mvn.w	r6, #15
   483fc:	e7ec      	b.n	483d8 <submit_to_queue_locked+0x48>
	} else if (draining && !chained) {
   483fe:	2a00      	cmp	r2, #0
   48400:	d1fa      	bne.n	483f8 <submit_to_queue_locked+0x68>
	return (*flagp & BIT(bit)) != 0U;
   48402:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   48406:	2b00      	cmp	r3, #0
   48408:	d1f6      	bne.n	483f8 <submit_to_queue_locked+0x68>
	parent->next = child;
   4840a:	2300      	movs	r3, #0
   4840c:	6023      	str	r3, [r4, #0]
	return list->tail;
   4840e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   48412:	b963      	cbnz	r3, 4842e <submit_to_queue_locked+0x9e>
	list->head = node;
   48414:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   48418:	4628      	mov	r0, r5
   4841a:	f008 fbfa 	bl	50c12 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   4841e:	68e3      	ldr	r3, [r4, #12]
   48420:	f043 0304 	orr.w	r3, r3, #4
   48424:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   48426:	683b      	ldr	r3, [r7, #0]
   48428:	60a3      	str	r3, [r4, #8]
}
   4842a:	4630      	mov	r0, r6
   4842c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   4842e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   48430:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   48434:	e7f0      	b.n	48418 <submit_to_queue_locked+0x88>
		return -EINVAL;
   48436:	f06f 0615 	mvn.w	r6, #21
   4843a:	e7cd      	b.n	483d8 <submit_to_queue_locked+0x48>
   4843c:	200071d4 	.word	0x200071d4

00048440 <k_work_submit>:
{
   48440:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   48442:	4801      	ldr	r0, [pc, #4]	; (48448 <k_work_submit+0x8>)
   48444:	f008 bc55 	b.w	50cf2 <k_work_submit_to_queue>
   48448:	20004100 	.word	0x20004100

0004844c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   4844c:	b5f0      	push	{r4, r5, r6, r7, lr}
   4844e:	b089      	sub	sp, #36	; 0x24
   48450:	4604      	mov	r4, r0
	list->head = NULL;
   48452:	2000      	movs	r0, #0
	list->tail = NULL;
   48454:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   48458:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   4845a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   4845e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   48462:	f104 0090 	add.w	r0, r4, #144	; 0x90
   48466:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   4846a:	b31d      	cbz	r5, 484b4 <k_work_queue_start+0x68>
   4846c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   4846e:	2800      	cmp	r0, #0
   48470:	f240 1001 	movw	r0, #257	; 0x101
   48474:	bf08      	it	eq
   48476:	2001      	moveq	r0, #1
	*flagp = flags;
   48478:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   4847c:	2000      	movs	r0, #0
   4847e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   48482:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   48486:	e9cd 3003 	strd	r3, r0, [sp, #12]
   4848a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   4848e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   48492:	4b09      	ldr	r3, [pc, #36]	; (484b8 <k_work_queue_start+0x6c>)
   48494:	9400      	str	r4, [sp, #0]
   48496:	4620      	mov	r0, r4
   48498:	f7ff fc0c 	bl	47cb4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   4849c:	b125      	cbz	r5, 484a8 <k_work_queue_start+0x5c>
   4849e:	6829      	ldr	r1, [r5, #0]
   484a0:	b111      	cbz	r1, 484a8 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   484a2:	4620      	mov	r0, r4
   484a4:	f008 fa9f 	bl	509e6 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   484a8:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   484aa:	b009      	add	sp, #36	; 0x24
   484ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   484b0:	f008 ba9c 	b.w	509ec <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   484b4:	2001      	movs	r0, #1
   484b6:	e7df      	b.n	48478 <k_work_queue_start+0x2c>
   484b8:	00048209 	.word	0x00048209

000484bc <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   484bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   484be:	9001      	str	r0, [sp, #4]
   484c0:	4608      	mov	r0, r1
	__asm__ volatile(
   484c2:	f04f 0120 	mov.w	r1, #32
   484c6:	f3ef 8411 	mrs	r4, BASEPRI
   484ca:	f381 8812 	msr	BASEPRI_MAX, r1
   484ce:	f3bf 8f6f 	isb	sy
	return *flagp;
   484d2:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   484d4:	f011 0f0e 	tst.w	r1, #14
   484d8:	d116      	bne.n	48508 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   484da:	ea53 0502 	orrs.w	r5, r3, r2
   484de:	d108      	bne.n	484f2 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   484e0:	a901      	add	r1, sp, #4
   484e2:	f7ff ff55 	bl	48390 <submit_to_queue_locked>
	__asm__ volatile(
   484e6:	f384 8811 	msr	BASEPRI, r4
   484ea:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   484ee:	b003      	add	sp, #12
   484f0:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   484f2:	f041 0108 	orr.w	r1, r1, #8
   484f6:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   484f8:	9901      	ldr	r1, [sp, #4]
   484fa:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   484fc:	3010      	adds	r0, #16
   484fe:	4903      	ldr	r1, [pc, #12]	; (4850c <k_work_schedule_for_queue+0x50>)
   48500:	f000 fc04 	bl	48d0c <z_add_timeout>
	return ret;
   48504:	2001      	movs	r0, #1
   48506:	e7ee      	b.n	484e6 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   48508:	2000      	movs	r0, #0
   4850a:	e7ec      	b.n	484e6 <k_work_schedule_for_queue+0x2a>
   4850c:	00050c83 	.word	0x00050c83

00048510 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   48510:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   48512:	4801      	ldr	r0, [pc, #4]	; (48518 <k_work_schedule+0x8>)
   48514:	f7ff bfd2 	b.w	484bc <k_work_schedule_for_queue>
   48518:	20004100 	.word	0x20004100

0004851c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   4851c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4851e:	460c      	mov	r4, r1
   48520:	9001      	str	r0, [sp, #4]
   48522:	4616      	mov	r6, r2
   48524:	461d      	mov	r5, r3
	__asm__ volatile(
   48526:	f04f 0320 	mov.w	r3, #32
   4852a:	f3ef 8711 	mrs	r7, BASEPRI
   4852e:	f383 8812 	msr	BASEPRI_MAX, r3
   48532:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   48536:	4608      	mov	r0, r1
   48538:	f008 fb5d 	bl	50bf6 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   4853c:	ea55 0306 	orrs.w	r3, r5, r6
   48540:	d109      	bne.n	48556 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   48542:	a901      	add	r1, sp, #4
   48544:	4620      	mov	r0, r4
   48546:	f7ff ff23 	bl	48390 <submit_to_queue_locked>
	__asm__ volatile(
   4854a:	f387 8811 	msr	BASEPRI, r7
   4854e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   48552:	b003      	add	sp, #12
   48554:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   48556:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   48558:	4906      	ldr	r1, [pc, #24]	; (48574 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   4855a:	f043 0308 	orr.w	r3, r3, #8
   4855e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   48560:	9b01      	ldr	r3, [sp, #4]
   48562:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   48564:	f104 0010 	add.w	r0, r4, #16
   48568:	4632      	mov	r2, r6
   4856a:	462b      	mov	r3, r5
   4856c:	f000 fbce 	bl	48d0c <z_add_timeout>
	return ret;
   48570:	2001      	movs	r0, #1
   48572:	e7ea      	b.n	4854a <k_work_reschedule_for_queue+0x2e>
   48574:	00050c83 	.word	0x00050c83

00048578 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   48578:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   4857a:	4801      	ldr	r0, [pc, #4]	; (48580 <k_work_reschedule+0x8>)
   4857c:	f7ff bfce 	b.w	4851c <k_work_reschedule_for_queue>
   48580:	20004100 	.word	0x20004100

00048584 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   48584:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   48586:	4c08      	ldr	r4, [pc, #32]	; (485a8 <z_reset_time_slice+0x24>)
   48588:	6823      	ldr	r3, [r4, #0]
   4858a:	b15b      	cbz	r3, 485a4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   4858c:	f7fd fb76 	bl	45c7c <sys_clock_elapsed>
   48590:	4603      	mov	r3, r0
   48592:	6820      	ldr	r0, [r4, #0]
   48594:	4a05      	ldr	r2, [pc, #20]	; (485ac <z_reset_time_slice+0x28>)
   48596:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   48598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   4859c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   4859e:	2100      	movs	r1, #0
   485a0:	f008 bd52 	b.w	51048 <z_set_timeout_expiry>
}
   485a4:	bd10      	pop	{r4, pc}
   485a6:	bf00      	nop
   485a8:	2000720c 	.word	0x2000720c
   485ac:	200071d4 	.word	0x200071d4

000485b0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   485b0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   485b2:	4d0c      	ldr	r5, [pc, #48]	; (485e4 <update_cache+0x34>)
   485b4:	462b      	mov	r3, r5
   485b6:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   485ba:	429c      	cmp	r4, r3
   485bc:	d000      	beq.n	485c0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   485be:	b904      	cbnz	r4, 485c2 <update_cache+0x12>
   485c0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   485c2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   485c4:	b938      	cbnz	r0, 485d6 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   485c6:	7b5a      	ldrb	r2, [r3, #13]
   485c8:	06d2      	lsls	r2, r2, #27
   485ca:	d104      	bne.n	485d6 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   485cc:	69a2      	ldr	r2, [r4, #24]
   485ce:	b912      	cbnz	r2, 485d6 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   485d0:	89da      	ldrh	r2, [r3, #14]
   485d2:	2a7f      	cmp	r2, #127	; 0x7f
   485d4:	d804      	bhi.n	485e0 <update_cache+0x30>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   485d6:	429c      	cmp	r4, r3
   485d8:	d001      	beq.n	485de <update_cache+0x2e>
			z_reset_time_slice();
   485da:	f7ff ffd3 	bl	48584 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   485de:	4623      	mov	r3, r4
   485e0:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   485e2:	bd38      	pop	{r3, r4, r5, pc}
   485e4:	200071d4 	.word	0x200071d4

000485e8 <move_thread_to_end_of_prio_q>:
{
   485e8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   485ea:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   485ee:	7b43      	ldrb	r3, [r0, #13]
   485f0:	2a00      	cmp	r2, #0
{
   485f2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   485f4:	da04      	bge.n	48600 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   485f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   485fa:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   485fc:	f008 fbe9 	bl	50dd2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   48600:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   48602:	4a15      	ldr	r2, [pc, #84]	; (48658 <move_thread_to_end_of_prio_q+0x70>)
   48604:	f063 037f 	orn	r3, r3, #127	; 0x7f
   48608:	4610      	mov	r0, r2
   4860a:	734b      	strb	r3, [r1, #13]
   4860c:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   48610:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48612:	4283      	cmp	r3, r0
   48614:	bf08      	it	eq
   48616:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   48618:	b923      	cbnz	r3, 48624 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   4861a:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   4861e:	6021      	str	r1, [r4, #0]
	list->tail = node;
   48620:	6251      	str	r1, [r2, #36]	; 0x24
}
   48622:	e00c      	b.n	4863e <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   48624:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   48628:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   4862c:	42b5      	cmp	r5, r6
   4862e:	d00e      	beq.n	4864e <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   48630:	42ae      	cmp	r6, r5
   48632:	dd0c      	ble.n	4864e <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   48634:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   48636:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   4863a:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   4863c:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   4863e:	6890      	ldr	r0, [r2, #8]
   48640:	1a43      	subs	r3, r0, r1
   48642:	4258      	negs	r0, r3
}
   48644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   48648:	4158      	adcs	r0, r3
   4864a:	f7ff bfb1 	b.w	485b0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   4864e:	429c      	cmp	r4, r3
   48650:	d0e3      	beq.n	4861a <move_thread_to_end_of_prio_q+0x32>
   48652:	681b      	ldr	r3, [r3, #0]
   48654:	e7e0      	b.n	48618 <move_thread_to_end_of_prio_q+0x30>
   48656:	bf00      	nop
   48658:	200071d4 	.word	0x200071d4

0004865c <ready_thread>:
{
   4865c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   4865e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   48662:	7b42      	ldrb	r2, [r0, #13]
   48664:	2b00      	cmp	r3, #0
   48666:	db29      	blt.n	486bc <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   48668:	06d3      	lsls	r3, r2, #27
   4866a:	d127      	bne.n	486bc <ready_thread+0x60>
	return node->next != NULL;
   4866c:	6983      	ldr	r3, [r0, #24]
   4866e:	bb2b      	cbnz	r3, 486bc <ready_thread+0x60>
	return list->head == list;
   48670:	4913      	ldr	r1, [pc, #76]	; (486c0 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   48672:	f062 027f 	orn	r2, r2, #127	; 0x7f
   48676:	7342      	strb	r2, [r0, #13]
   48678:	460a      	mov	r2, r1
   4867a:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4867e:	4294      	cmp	r4, r2
   48680:	bf18      	it	ne
   48682:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   48684:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   48686:	b923      	cbnz	r3, 48692 <ready_thread+0x36>
	node->prev = tail;
   48688:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   4868c:	6020      	str	r0, [r4, #0]
	list->tail = node;
   4868e:	6248      	str	r0, [r1, #36]	; 0x24
}
   48690:	e00c      	b.n	486ac <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   48692:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   48696:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   4869a:	42b5      	cmp	r5, r6
   4869c:	d00a      	beq.n	486b4 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   4869e:	42ae      	cmp	r6, r5
   486a0:	dd08      	ble.n	486b4 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   486a2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   486a4:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   486a8:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   486aa:	6058      	str	r0, [r3, #4]
}
   486ac:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   486ae:	2000      	movs	r0, #0
   486b0:	f7ff bf7e 	b.w	485b0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   486b4:	42a3      	cmp	r3, r4
   486b6:	d0e7      	beq.n	48688 <ready_thread+0x2c>
   486b8:	681b      	ldr	r3, [r3, #0]
   486ba:	e7e4      	b.n	48686 <ready_thread+0x2a>
}
   486bc:	bc70      	pop	{r4, r5, r6}
   486be:	4770      	bx	lr
   486c0:	200071d4 	.word	0x200071d4

000486c4 <unready_thread>:
{
   486c4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   486c6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   486ca:	7b43      	ldrb	r3, [r0, #13]
   486cc:	2a00      	cmp	r2, #0
{
   486ce:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   486d0:	da04      	bge.n	486dc <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   486d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   486d6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   486d8:	f008 fb7b 	bl	50dd2 <sys_dlist_remove>
	update_cache(thread == _current);
   486dc:	4b04      	ldr	r3, [pc, #16]	; (486f0 <unready_thread+0x2c>)
   486de:	6898      	ldr	r0, [r3, #8]
   486e0:	1a43      	subs	r3, r0, r1
   486e2:	4258      	negs	r0, r3
   486e4:	4158      	adcs	r0, r3
}
   486e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   486ea:	f7ff bf61 	b.w	485b0 <update_cache>
   486ee:	bf00      	nop
   486f0:	200071d4 	.word	0x200071d4

000486f4 <pend>:
{
   486f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   486f8:	4606      	mov	r6, r0
   486fa:	4615      	mov	r5, r2
   486fc:	461c      	mov	r4, r3
	__asm__ volatile(
   486fe:	f04f 0320 	mov.w	r3, #32
   48702:	f3ef 8711 	mrs	r7, BASEPRI
   48706:	f383 8812 	msr	BASEPRI_MAX, r3
   4870a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   4870e:	f008 fb9d 	bl	50e4c <add_to_waitq_locked>
	__asm__ volatile(
   48712:	f387 8811 	msr	BASEPRI, r7
   48716:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   4871a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   4871e:	bf08      	it	eq
   48720:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   48724:	d008      	beq.n	48738 <pend+0x44>
   48726:	462a      	mov	r2, r5
   48728:	4623      	mov	r3, r4
   4872a:	f106 0018 	add.w	r0, r6, #24
   4872e:	4903      	ldr	r1, [pc, #12]	; (4873c <pend+0x48>)
}
   48730:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   48734:	f000 baea 	b.w	48d0c <z_add_timeout>
   48738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   4873c:	00050e09 	.word	0x00050e09

00048740 <k_sched_time_slice_set>:
{
   48740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   48744:	4604      	mov	r4, r0
   48746:	460d      	mov	r5, r1
	__asm__ volatile(
   48748:	f04f 0320 	mov.w	r3, #32
   4874c:	f3ef 8811 	mrs	r8, BASEPRI
   48750:	f383 8812 	msr	BASEPRI_MAX, r3
   48754:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   48758:	2600      	movs	r6, #0
   4875a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   4875e:	f240 30e7 	movw	r0, #999	; 0x3e7
   48762:	4631      	mov	r1, r6
   48764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   48768:	2300      	movs	r3, #0
   4876a:	fbe4 0107 	umlal	r0, r1, r4, r7
   4876e:	f7dd fcc7 	bl	26100 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   48772:	42b4      	cmp	r4, r6
   48774:	dd02      	ble.n	4877c <k_sched_time_slice_set+0x3c>
			slice_time = MAX(2, slice_time);
   48776:	2802      	cmp	r0, #2
   48778:	bfb8      	it	lt
   4877a:	2002      	movlt	r0, #2
		_current_cpu->slice_ticks = 0;
   4877c:	4b06      	ldr	r3, [pc, #24]	; (48798 <k_sched_time_slice_set+0x58>)
   4877e:	611e      	str	r6, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
   48780:	4b06      	ldr	r3, [pc, #24]	; (4879c <k_sched_time_slice_set+0x5c>)
   48782:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   48784:	4b06      	ldr	r3, [pc, #24]	; (487a0 <k_sched_time_slice_set+0x60>)
   48786:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   48788:	f7ff fefc 	bl	48584 <z_reset_time_slice>
	__asm__ volatile(
   4878c:	f388 8811 	msr	BASEPRI, r8
   48790:	f3bf 8f6f 	isb	sy
}
   48794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   48798:	200071d4 	.word	0x200071d4
   4879c:	2000720c 	.word	0x2000720c
   487a0:	20007208 	.word	0x20007208

000487a4 <z_time_slice>:
{
   487a4:	b538      	push	{r3, r4, r5, lr}
   487a6:	4601      	mov	r1, r0
	__asm__ volatile(
   487a8:	f04f 0320 	mov.w	r3, #32
   487ac:	f3ef 8411 	mrs	r4, BASEPRI
   487b0:	f383 8812 	msr	BASEPRI_MAX, r3
   487b4:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   487b8:	4b15      	ldr	r3, [pc, #84]	; (48810 <z_time_slice+0x6c>)
   487ba:	4a16      	ldr	r2, [pc, #88]	; (48814 <z_time_slice+0x70>)
   487bc:	6898      	ldr	r0, [r3, #8]
   487be:	6815      	ldr	r5, [r2, #0]
   487c0:	42a8      	cmp	r0, r5
   487c2:	d106      	bne.n	487d2 <z_time_slice+0x2e>
			z_reset_time_slice();
   487c4:	f7ff fede 	bl	48584 <z_reset_time_slice>
	__asm__ volatile(
   487c8:	f384 8811 	msr	BASEPRI, r4
   487cc:	f3bf 8f6f 	isb	sy
}
   487d0:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   487d2:	2500      	movs	r5, #0
   487d4:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   487d6:	4a10      	ldr	r2, [pc, #64]	; (48818 <z_time_slice+0x74>)
   487d8:	6812      	ldr	r2, [r2, #0]
   487da:	b1ba      	cbz	r2, 4880c <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   487dc:	89c2      	ldrh	r2, [r0, #14]
   487de:	2a7f      	cmp	r2, #127	; 0x7f
   487e0:	d814      	bhi.n	4880c <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   487e2:	7b42      	ldrb	r2, [r0, #13]
   487e4:	06d2      	lsls	r2, r2, #27
   487e6:	d111      	bne.n	4880c <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   487e8:	4a0c      	ldr	r2, [pc, #48]	; (4881c <z_time_slice+0x78>)
   487ea:	f990 500e 	ldrsb.w	r5, [r0, #14]
   487ee:	6812      	ldr	r2, [r2, #0]
   487f0:	4295      	cmp	r5, r2
   487f2:	db0b      	blt.n	4880c <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   487f4:	4a0a      	ldr	r2, [pc, #40]	; (48820 <z_time_slice+0x7c>)
   487f6:	4290      	cmp	r0, r2
   487f8:	d008      	beq.n	4880c <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   487fa:	691a      	ldr	r2, [r3, #16]
   487fc:	428a      	cmp	r2, r1
   487fe:	dc02      	bgt.n	48806 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   48800:	f7ff fef2 	bl	485e8 <move_thread_to_end_of_prio_q>
   48804:	e7de      	b.n	487c4 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   48806:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   48808:	611a      	str	r2, [r3, #16]
   4880a:	e7dd      	b.n	487c8 <z_time_slice+0x24>
   4880c:	2200      	movs	r2, #0
   4880e:	e7fb      	b.n	48808 <z_time_slice+0x64>
   48810:	200071d4 	.word	0x200071d4
   48814:	20007204 	.word	0x20007204
   48818:	2000720c 	.word	0x2000720c
   4881c:	20007208 	.word	0x20007208
   48820:	20004000 	.word	0x20004000

00048824 <z_pend_curr>:
{
   48824:	b510      	push	{r4, lr}
	pending_current = _current;
   48826:	4b07      	ldr	r3, [pc, #28]	; (48844 <z_pend_curr+0x20>)
   48828:	6898      	ldr	r0, [r3, #8]
   4882a:	4b07      	ldr	r3, [pc, #28]	; (48848 <z_pend_curr+0x24>)
{
   4882c:	460c      	mov	r4, r1
	pending_current = _current;
   4882e:	6018      	str	r0, [r3, #0]
{
   48830:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   48832:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   48836:	f7ff ff5d 	bl	486f4 <pend>
	ret = arch_swap(key);
   4883a:	4620      	mov	r0, r4
}
   4883c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   48840:	f7e4 ba96 	b.w	2cd70 <arch_swap>
   48844:	200071d4 	.word	0x200071d4
   48848:	20007204 	.word	0x20007204

0004884c <z_set_prio>:
{
   4884c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4884e:	4604      	mov	r4, r0
	__asm__ volatile(
   48850:	f04f 0320 	mov.w	r3, #32
   48854:	f3ef 8611 	mrs	r6, BASEPRI
   48858:	f383 8812 	msr	BASEPRI_MAX, r3
   4885c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   48860:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   48862:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   48864:	b249      	sxtb	r1, r1
   48866:	d119      	bne.n	4889c <z_set_prio+0x50>
	return node->next != NULL;
   48868:	6985      	ldr	r5, [r0, #24]
   4886a:	b9bd      	cbnz	r5, 4889c <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   4886c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   48870:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   48872:	f008 faae 	bl	50dd2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   48876:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   48878:	4a16      	ldr	r2, [pc, #88]	; (488d4 <z_set_prio+0x88>)
				thread->base.prio = prio;
   4887a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   4887c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   48880:	7343      	strb	r3, [r0, #13]
   48882:	4613      	mov	r3, r2
   48884:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48888:	4298      	cmp	r0, r3
   4888a:	bf18      	it	ne
   4888c:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   4888e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   48890:	b95d      	cbnz	r5, 488aa <z_set_prio+0x5e>
	node->prev = tail;
   48892:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   48896:	6004      	str	r4, [r0, #0]
	list->tail = node;
   48898:	6254      	str	r4, [r2, #36]	; 0x24
}
   4889a:	e011      	b.n	488c0 <z_set_prio+0x74>
			thread->base.prio = prio;
   4889c:	73a1      	strb	r1, [r4, #14]
   4889e:	2000      	movs	r0, #0
	__asm__ volatile(
   488a0:	f386 8811 	msr	BASEPRI, r6
   488a4:	f3bf 8f6f 	isb	sy
}
   488a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   488aa:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   488ae:	42b9      	cmp	r1, r7
   488b0:	d00b      	beq.n	488ca <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   488b2:	428f      	cmp	r7, r1
   488b4:	dd09      	ble.n	488ca <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   488b6:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   488b8:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   488bc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   488be:	606c      	str	r4, [r5, #4]
			update_cache(1);
   488c0:	2001      	movs	r0, #1
   488c2:	f7ff fe75 	bl	485b0 <update_cache>
   488c6:	2001      	movs	r0, #1
   488c8:	e7ea      	b.n	488a0 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   488ca:	42a8      	cmp	r0, r5
   488cc:	d0e1      	beq.n	48892 <z_set_prio+0x46>
   488ce:	682d      	ldr	r5, [r5, #0]
   488d0:	e7de      	b.n	48890 <z_set_prio+0x44>
   488d2:	bf00      	nop
   488d4:	200071d4 	.word	0x200071d4

000488d8 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   488d8:	b949      	cbnz	r1, 488ee <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   488da:	f3ef 8005 	mrs	r0, IPSR
   488de:	b930      	cbnz	r0, 488ee <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   488e0:	4b05      	ldr	r3, [pc, #20]	; (488f8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   488e2:	69da      	ldr	r2, [r3, #28]
   488e4:	689b      	ldr	r3, [r3, #8]
   488e6:	429a      	cmp	r2, r3
   488e8:	d001      	beq.n	488ee <z_reschedule+0x16>
   488ea:	f7e4 ba41 	b.w	2cd70 <arch_swap>
   488ee:	f381 8811 	msr	BASEPRI, r1
   488f2:	f3bf 8f6f 	isb	sy
}
   488f6:	4770      	bx	lr
   488f8:	200071d4 	.word	0x200071d4

000488fc <z_sched_start>:
{
   488fc:	b510      	push	{r4, lr}
	__asm__ volatile(
   488fe:	f04f 0220 	mov.w	r2, #32
   48902:	f3ef 8411 	mrs	r4, BASEPRI
   48906:	f382 8812 	msr	BASEPRI_MAX, r2
   4890a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   4890e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   48910:	0751      	lsls	r1, r2, #29
   48912:	d404      	bmi.n	4891e <z_sched_start+0x22>
	__asm__ volatile(
   48914:	f384 8811 	msr	BASEPRI, r4
   48918:	f3bf 8f6f 	isb	sy
}
   4891c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   4891e:	f022 0204 	bic.w	r2, r2, #4
   48922:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   48924:	f7ff fe9a 	bl	4865c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   48928:	4621      	mov	r1, r4
   4892a:	4802      	ldr	r0, [pc, #8]	; (48934 <z_sched_start+0x38>)
}
   4892c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   48930:	f7ff bfd2 	b.w	488d8 <z_reschedule>
   48934:	20007430 	.word	0x20007430

00048938 <z_impl_k_thread_suspend>:
{
   48938:	b570      	push	{r4, r5, r6, lr}
   4893a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   4893c:	3018      	adds	r0, #24
   4893e:	f008 fb5d 	bl	50ffc <z_abort_timeout>
	__asm__ volatile(
   48942:	f04f 0320 	mov.w	r3, #32
   48946:	f3ef 8611 	mrs	r6, BASEPRI
   4894a:	f383 8812 	msr	BASEPRI_MAX, r3
   4894e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   48952:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   48956:	7b63      	ldrb	r3, [r4, #13]
   48958:	2a00      	cmp	r2, #0
   4895a:	da05      	bge.n	48968 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   4895c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   48960:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   48962:	4620      	mov	r0, r4
   48964:	f008 fa35 	bl	50dd2 <sys_dlist_remove>
		update_cache(thread == _current);
   48968:	4d0b      	ldr	r5, [pc, #44]	; (48998 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   4896a:	7b63      	ldrb	r3, [r4, #13]
   4896c:	68a8      	ldr	r0, [r5, #8]
   4896e:	f043 0310 	orr.w	r3, r3, #16
   48972:	7363      	strb	r3, [r4, #13]
   48974:	1b03      	subs	r3, r0, r4
   48976:	4258      	negs	r0, r3
   48978:	4158      	adcs	r0, r3
   4897a:	f7ff fe19 	bl	485b0 <update_cache>
	__asm__ volatile(
   4897e:	f386 8811 	msr	BASEPRI, r6
   48982:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   48986:	68ab      	ldr	r3, [r5, #8]
   48988:	42a3      	cmp	r3, r4
   4898a:	d103      	bne.n	48994 <z_impl_k_thread_suspend+0x5c>
}
   4898c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   48990:	f008 baf7 	b.w	50f82 <z_reschedule_unlocked>
}
   48994:	bd70      	pop	{r4, r5, r6, pc}
   48996:	bf00      	nop
   48998:	200071d4 	.word	0x200071d4

0004899c <k_sched_lock>:
	__asm__ volatile(
   4899c:	f04f 0320 	mov.w	r3, #32
   489a0:	f3ef 8111 	mrs	r1, BASEPRI
   489a4:	f383 8812 	msr	BASEPRI_MAX, r3
   489a8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   489ac:	4b04      	ldr	r3, [pc, #16]	; (489c0 <k_sched_lock+0x24>)
   489ae:	689a      	ldr	r2, [r3, #8]
   489b0:	7bd3      	ldrb	r3, [r2, #15]
   489b2:	3b01      	subs	r3, #1
   489b4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   489b6:	f381 8811 	msr	BASEPRI, r1
   489ba:	f3bf 8f6f 	isb	sy
}
   489be:	4770      	bx	lr
   489c0:	200071d4 	.word	0x200071d4

000489c4 <k_sched_unlock>:
{
   489c4:	b510      	push	{r4, lr}
	__asm__ volatile(
   489c6:	f04f 0320 	mov.w	r3, #32
   489ca:	f3ef 8411 	mrs	r4, BASEPRI
   489ce:	f383 8812 	msr	BASEPRI_MAX, r3
   489d2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   489d6:	4b08      	ldr	r3, [pc, #32]	; (489f8 <k_sched_unlock+0x34>)
   489d8:	689a      	ldr	r2, [r3, #8]
   489da:	7bd3      	ldrb	r3, [r2, #15]
   489dc:	3301      	adds	r3, #1
   489de:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   489e0:	2000      	movs	r0, #0
   489e2:	f7ff fde5 	bl	485b0 <update_cache>
	__asm__ volatile(
   489e6:	f384 8811 	msr	BASEPRI, r4
   489ea:	f3bf 8f6f 	isb	sy
}
   489ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   489f2:	f008 bac6 	b.w	50f82 <z_reschedule_unlocked>
   489f6:	bf00      	nop
   489f8:	200071d4 	.word	0x200071d4

000489fc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   489fc:	4b04      	ldr	r3, [pc, #16]	; (48a10 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   489fe:	2100      	movs	r1, #0
   48a00:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   48a04:	e9c3 2208 	strd	r2, r2, [r3, #32]
   48a08:	4608      	mov	r0, r1
   48a0a:	f7ff be99 	b.w	48740 <k_sched_time_slice_set>
   48a0e:	bf00      	nop
   48a10:	200071d4 	.word	0x200071d4

00048a14 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   48a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   48a16:	f04f 0320 	mov.w	r3, #32
   48a1a:	f3ef 8511 	mrs	r5, BASEPRI
   48a1e:	f383 8812 	msr	BASEPRI_MAX, r3
   48a22:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   48a26:	4919      	ldr	r1, [pc, #100]	; (48a8c <z_impl_k_yield+0x78>)
   48a28:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   48a2a:	7b43      	ldrb	r3, [r0, #13]
   48a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   48a30:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   48a32:	f008 f9ce 	bl	50dd2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   48a36:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   48a38:	460a      	mov	r2, r1
   48a3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   48a3e:	7343      	strb	r3, [r0, #13]
   48a40:	f852 3f20 	ldr.w	r3, [r2, #32]!
	return (node == list->tail) ? NULL : node->next;
   48a44:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48a46:	4293      	cmp	r3, r2
   48a48:	bf08      	it	eq
   48a4a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   48a4c:	b923      	cbnz	r3, 48a58 <z_impl_k_yield+0x44>
	node->prev = tail;
   48a4e:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   48a52:	6020      	str	r0, [r4, #0]
	list->tail = node;
   48a54:	6248      	str	r0, [r1, #36]	; 0x24
}
   48a56:	e00c      	b.n	48a72 <z_impl_k_yield+0x5e>
	int32_t b1 = thread_1->base.prio;
   48a58:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   48a5c:	f993 700e 	ldrsb.w	r7, [r3, #14]
	if (b1 != b2) {
   48a60:	42be      	cmp	r6, r7
   48a62:	d00e      	beq.n	48a82 <z_impl_k_yield+0x6e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   48a64:	42b7      	cmp	r7, r6
   48a66:	dd0c      	ble.n	48a82 <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
   48a68:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   48a6a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   48a6e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   48a70:	6058      	str	r0, [r3, #4]
	}
	queue_thread(_current);
	update_cache(1);
   48a72:	2001      	movs	r0, #1
   48a74:	f7ff fd9c 	bl	485b0 <update_cache>
   48a78:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   48a7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   48a7e:	f7e4 b977 	b.w	2cd70 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   48a82:	42a3      	cmp	r3, r4
   48a84:	d0e3      	beq.n	48a4e <z_impl_k_yield+0x3a>
   48a86:	681b      	ldr	r3, [r3, #0]
   48a88:	e7e0      	b.n	48a4c <z_impl_k_yield+0x38>
   48a8a:	bf00      	nop
   48a8c:	200071d4 	.word	0x200071d4

00048a90 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   48a90:	ea50 0301 	orrs.w	r3, r0, r1
{
   48a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   48a98:	4605      	mov	r5, r0
   48a9a:	460e      	mov	r6, r1
	if (ticks == 0) {
   48a9c:	d103      	bne.n	48aa6 <z_tick_sleep+0x16>
	z_impl_k_yield();
   48a9e:	f7ff ffb9 	bl	48a14 <z_impl_k_yield>
		k_yield();
		return 0;
   48aa2:	2000      	movs	r0, #0
   48aa4:	e02c      	b.n	48b00 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   48aa6:	1c83      	adds	r3, r0, #2
   48aa8:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   48aac:	db2a      	blt.n	48b04 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   48aae:	f008 fae7 	bl	51080 <sys_clock_tick_get_32>
   48ab2:	1944      	adds	r4, r0, r5
   48ab4:	f04f 0320 	mov.w	r3, #32
   48ab8:	f3ef 8811 	mrs	r8, BASEPRI
   48abc:	f383 8812 	msr	BASEPRI_MAX, r3
   48ac0:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   48ac4:	4f11      	ldr	r7, [pc, #68]	; (48b0c <z_tick_sleep+0x7c>)
   48ac6:	4b12      	ldr	r3, [pc, #72]	; (48b10 <z_tick_sleep+0x80>)
   48ac8:	68b8      	ldr	r0, [r7, #8]
   48aca:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   48acc:	f7ff fdfa 	bl	486c4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   48ad0:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   48ad2:	4910      	ldr	r1, [pc, #64]	; (48b14 <z_tick_sleep+0x84>)
   48ad4:	462a      	mov	r2, r5
   48ad6:	4633      	mov	r3, r6
   48ad8:	3018      	adds	r0, #24
   48ada:	f000 f917 	bl	48d0c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   48ade:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   48ae0:	7b53      	ldrb	r3, [r2, #13]
   48ae2:	f043 0310 	orr.w	r3, r3, #16
   48ae6:	7353      	strb	r3, [r2, #13]
   48ae8:	4640      	mov	r0, r8
   48aea:	f7e4 f941 	bl	2cd70 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   48aee:	f008 fac7 	bl	51080 <sys_clock_tick_get_32>
   48af2:	1a20      	subs	r0, r4, r0
   48af4:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   48af8:	2801      	cmp	r0, #1
   48afa:	f173 0300 	sbcs.w	r3, r3, #0
   48afe:	dbd0      	blt.n	48aa2 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   48b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   48b04:	f06f 0401 	mvn.w	r4, #1
   48b08:	1a24      	subs	r4, r4, r0
   48b0a:	e7d3      	b.n	48ab4 <z_tick_sleep+0x24>
   48b0c:	200071d4 	.word	0x200071d4
   48b10:	20007204 	.word	0x20007204
   48b14:	00050e09 	.word	0x00050e09

00048b18 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   48b18:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   48b1c:	bf08      	it	eq
   48b1e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   48b22:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   48b24:	d106      	bne.n	48b34 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   48b26:	4b08      	ldr	r3, [pc, #32]	; (48b48 <z_impl_k_sleep+0x30>)
   48b28:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   48b2a:	f7ff ff05 	bl	48938 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   48b2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   48b32:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   48b34:	f7ff ffac 	bl	48a90 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   48b38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   48b3c:	fb80 0303 	smull	r0, r3, r0, r3
   48b40:	0bc0      	lsrs	r0, r0, #15
   48b42:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   48b46:	e7f4      	b.n	48b32 <z_impl_k_sleep+0x1a>
   48b48:	200071d4 	.word	0x200071d4

00048b4c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   48b4c:	4b01      	ldr	r3, [pc, #4]	; (48b54 <z_impl_z_current_get+0x8>)
   48b4e:	6898      	ldr	r0, [r3, #8]
   48b50:	4770      	bx	lr
   48b52:	bf00      	nop
   48b54:	200071d4 	.word	0x200071d4

00048b58 <z_impl_k_is_preempt_thread>:
   48b58:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   48b5c:	b93b      	cbnz	r3, 48b6e <z_impl_k_is_preempt_thread+0x16>
   48b5e:	4b05      	ldr	r3, [pc, #20]	; (48b74 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   48b60:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   48b62:	89d8      	ldrh	r0, [r3, #14]
   48b64:	287f      	cmp	r0, #127	; 0x7f
   48b66:	bf8c      	ite	hi
   48b68:	2000      	movhi	r0, #0
   48b6a:	2001      	movls	r0, #1
   48b6c:	4770      	bx	lr
   48b6e:	2000      	movs	r0, #0
}
   48b70:	4770      	bx	lr
   48b72:	bf00      	nop
   48b74:	200071d4 	.word	0x200071d4

00048b78 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   48b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   48b7c:	4604      	mov	r4, r0
   48b7e:	f04f 0320 	mov.w	r3, #32
   48b82:	f3ef 8611 	mrs	r6, BASEPRI
   48b86:	f383 8812 	msr	BASEPRI_MAX, r3
   48b8a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   48b8e:	7b43      	ldrb	r3, [r0, #13]
   48b90:	071a      	lsls	r2, r3, #28
   48b92:	d505      	bpl.n	48ba0 <z_thread_abort+0x28>
	__asm__ volatile(
   48b94:	f386 8811 	msr	BASEPRI, r6
   48b98:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   48b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   48ba0:	f023 0220 	bic.w	r2, r3, #32
   48ba4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   48ba8:	09d2      	lsrs	r2, r2, #7
   48baa:	d120      	bne.n	48bee <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   48bac:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   48bae:	68a3      	ldr	r3, [r4, #8]
   48bb0:	b113      	cbz	r3, 48bb8 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   48bb2:	4620      	mov	r0, r4
   48bb4:	f008 f915 	bl	50de2 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   48bb8:	f104 0018 	add.w	r0, r4, #24
   48bbc:	f008 fa1e 	bl	50ffc <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   48bc0:	f104 0758 	add.w	r7, r4, #88	; 0x58
   48bc4:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   48bc8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48bca:	42bd      	cmp	r5, r7
   48bcc:	d000      	beq.n	48bd0 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   48bce:	b9b5      	cbnz	r5, 48bfe <z_thread_abort+0x86>
		update_cache(1);
   48bd0:	2001      	movs	r0, #1
   48bd2:	f7ff fced 	bl	485b0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   48bd6:	4b10      	ldr	r3, [pc, #64]	; (48c18 <z_thread_abort+0xa0>)
   48bd8:	689b      	ldr	r3, [r3, #8]
   48bda:	42a3      	cmp	r3, r4
   48bdc:	d1da      	bne.n	48b94 <z_thread_abort+0x1c>
   48bde:	f3ef 8305 	mrs	r3, IPSR
   48be2:	2b00      	cmp	r3, #0
   48be4:	d1d6      	bne.n	48b94 <z_thread_abort+0x1c>
   48be6:	4630      	mov	r0, r6
   48be8:	f7e4 f8c2 	bl	2cd70 <arch_swap>
	return ret;
   48bec:	e7d2      	b.n	48b94 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   48bee:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   48bf2:	f043 0308 	orr.w	r3, r3, #8
   48bf6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   48bf8:	f008 f8eb 	bl	50dd2 <sys_dlist_remove>
}
   48bfc:	e7d7      	b.n	48bae <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   48bfe:	4628      	mov	r0, r5
   48c00:	f008 f8ef 	bl	50de2 <unpend_thread_no_timeout>
   48c04:	f105 0018 	add.w	r0, r5, #24
   48c08:	f008 f9f8 	bl	50ffc <z_abort_timeout>
   48c0c:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   48c10:	4628      	mov	r0, r5
   48c12:	f7ff fd23 	bl	4865c <ready_thread>
   48c16:	e7d7      	b.n	48bc8 <z_thread_abort+0x50>
   48c18:	200071d4 	.word	0x200071d4

00048c1c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   48c1c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   48c1e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   48c22:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   48c24:	e9cd 6700 	strd	r6, r7, [sp]
   48c28:	f7ff fdfc 	bl	48824 <z_pend_curr>

	if (data != NULL) {
   48c2c:	b11c      	cbz	r4, 48c36 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   48c2e:	4b03      	ldr	r3, [pc, #12]	; (48c3c <z_sched_wait+0x20>)
   48c30:	689b      	ldr	r3, [r3, #8]
   48c32:	695b      	ldr	r3, [r3, #20]
   48c34:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   48c36:	b002      	add	sp, #8
   48c38:	bdd0      	pop	{r4, r6, r7, pc}
   48c3a:	bf00      	nop
   48c3c:	200071d4 	.word	0x200071d4

00048c40 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   48c40:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   48c42:	4806      	ldr	r0, [pc, #24]	; (48c5c <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   48c44:	4a06      	ldr	r2, [pc, #24]	; (48c60 <z_data_copy+0x20>)
   48c46:	4907      	ldr	r1, [pc, #28]	; (48c64 <z_data_copy+0x24>)
   48c48:	1a12      	subs	r2, r2, r0
   48c4a:	f003 f88c 	bl	4bd66 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   48c4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   48c52:	4a05      	ldr	r2, [pc, #20]	; (48c68 <z_data_copy+0x28>)
   48c54:	4905      	ldr	r1, [pc, #20]	; (48c6c <z_data_copy+0x2c>)
   48c56:	4806      	ldr	r0, [pc, #24]	; (48c70 <z_data_copy+0x30>)
   48c58:	f003 b885 	b.w	4bd66 <memcpy>
   48c5c:	20000000 	.word	0x20000000
   48c60:	20001514 	.word	0x20001514
   48c64:	00054564 	.word	0x00054564
   48c68:	00000000 	.word	0x00000000
   48c6c:	00054564 	.word	0x00054564
   48c70:	20000000 	.word	0x20000000

00048c74 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   48c74:	4b03      	ldr	r3, [pc, #12]	; (48c84 <elapsed+0x10>)
   48c76:	681b      	ldr	r3, [r3, #0]
   48c78:	b90b      	cbnz	r3, 48c7e <elapsed+0xa>
   48c7a:	f7fc bfff 	b.w	45c7c <sys_clock_elapsed>
}
   48c7e:	2000      	movs	r0, #0
   48c80:	4770      	bx	lr
   48c82:	bf00      	nop
   48c84:	20007210 	.word	0x20007210

00048c88 <next_timeout>:
	return list->head == list;
   48c88:	4b11      	ldr	r3, [pc, #68]	; (48cd0 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   48c8a:	b510      	push	{r4, lr}
   48c8c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48c8e:	429c      	cmp	r4, r3
   48c90:	d10a      	bne.n	48ca8 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   48c92:	f7ff ffef 	bl	48c74 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   48c96:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   48c9a:	4b0e      	ldr	r3, [pc, #56]	; (48cd4 <next_timeout+0x4c>)
   48c9c:	691b      	ldr	r3, [r3, #16]
   48c9e:	b113      	cbz	r3, 48ca6 <next_timeout+0x1e>
   48ca0:	4298      	cmp	r0, r3
   48ca2:	bfa8      	it	ge
   48ca4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   48ca6:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   48ca8:	f7ff ffe4 	bl	48c74 <elapsed>
	if ((to == NULL) ||
   48cac:	2c00      	cmp	r4, #0
   48cae:	d0f2      	beq.n	48c96 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   48cb0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   48cb4:	1a1b      	subs	r3, r3, r0
   48cb6:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   48cba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   48cbe:	f172 0100 	sbcs.w	r1, r2, #0
   48cc2:	dae8      	bge.n	48c96 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   48cc4:	2a00      	cmp	r2, #0
   48cc6:	bfac      	ite	ge
   48cc8:	4618      	movge	r0, r3
   48cca:	2000      	movlt	r0, #0
   48ccc:	e7e5      	b.n	48c9a <next_timeout+0x12>
   48cce:	bf00      	nop
   48cd0:	20000ec8 	.word	0x20000ec8
   48cd4:	200071d4 	.word	0x200071d4

00048cd8 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
   48cd8:	4a0b      	ldr	r2, [pc, #44]	; (48d08 <remove_timeout+0x30>)
   48cda:	6803      	ldr	r3, [r0, #0]
   48cdc:	6852      	ldr	r2, [r2, #4]
   48cde:	4290      	cmp	r0, r2
{
   48ce0:	b530      	push	{r4, r5, lr}
   48ce2:	d009      	beq.n	48cf8 <remove_timeout+0x20>
	if (next(t) != NULL) {
   48ce4:	b143      	cbz	r3, 48cf8 <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
   48ce6:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   48cea:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   48cee:	1912      	adds	r2, r2, r4
   48cf0:	eb41 0105 	adc.w	r1, r1, r5
   48cf4:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   48cf8:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   48cfa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   48cfc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   48cfe:	2300      	movs	r3, #0
	node->prev = NULL;
   48d00:	e9c0 3300 	strd	r3, r3, [r0]
}
   48d04:	bd30      	pop	{r4, r5, pc}
   48d06:	bf00      	nop
   48d08:	20000ec8 	.word	0x20000ec8

00048d0c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   48d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   48d10:	bf08      	it	eq
   48d12:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   48d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   48d18:	4604      	mov	r4, r0
   48d1a:	461d      	mov	r5, r3
   48d1c:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   48d1e:	d061      	beq.n	48de4 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   48d20:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   48d22:	f04f 0320 	mov.w	r3, #32
   48d26:	f3ef 8711 	mrs	r7, BASEPRI
   48d2a:	f383 8812 	msr	BASEPRI_MAX, r3
   48d2e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   48d32:	3201      	adds	r2, #1
   48d34:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   48d38:	da24      	bge.n	48d84 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   48d3a:	4930      	ldr	r1, [pc, #192]	; (48dfc <z_add_timeout+0xf0>)
   48d3c:	e9d1 2000 	ldrd	r2, r0, [r1]
   48d40:	f06f 0301 	mvn.w	r3, #1
   48d44:	1a9b      	subs	r3, r3, r2
   48d46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   48d4a:	eb62 0000 	sbc.w	r0, r2, r0
   48d4e:	1b9e      	subs	r6, r3, r6
   48d50:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   48d54:	2e01      	cmp	r6, #1
   48d56:	f170 0300 	sbcs.w	r3, r0, #0
   48d5a:	da01      	bge.n	48d60 <z_add_timeout+0x54>
   48d5c:	2601      	movs	r6, #1
   48d5e:	2000      	movs	r0, #0
   48d60:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   48d64:	4e26      	ldr	r6, [pc, #152]	; (48e00 <z_add_timeout+0xf4>)
   48d66:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   48d6a:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48d6c:	45b4      	cmp	ip, r6
   48d6e:	bf08      	it	eq
   48d70:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   48d74:	f1bc 0f00 	cmp.w	ip, #0
   48d78:	d10d      	bne.n	48d96 <z_add_timeout+0x8a>
	node->prev = tail;
   48d7a:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   48d7e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   48d80:	6074      	str	r4, [r6, #4]
}
   48d82:	e01c      	b.n	48dbe <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   48d84:	f7ff ff76 	bl	48c74 <elapsed>
   48d88:	3601      	adds	r6, #1
   48d8a:	f145 0500 	adc.w	r5, r5, #0
   48d8e:	1836      	adds	r6, r6, r0
   48d90:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   48d94:	e7e4      	b.n	48d60 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   48d96:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   48d9a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   48d9e:	4293      	cmp	r3, r2
   48da0:	eb71 0e00 	sbcs.w	lr, r1, r0
   48da4:	da1f      	bge.n	48de6 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   48da6:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   48da8:	f8dc 3004 	ldr.w	r3, [ip, #4]
   48dac:	eb60 0001 	sbc.w	r0, r0, r1
   48db0:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   48db4:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   48db8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   48dba:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   48dbe:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48dc0:	42b3      	cmp	r3, r6
   48dc2:	d00b      	beq.n	48ddc <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   48dc4:	429c      	cmp	r4, r3
   48dc6:	d109      	bne.n	48ddc <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   48dc8:	f7ff ff5e 	bl	48c88 <next_timeout>

			if (next_time == 0 ||
   48dcc:	b118      	cbz	r0, 48dd6 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   48dce:	4b0d      	ldr	r3, [pc, #52]	; (48e04 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   48dd0:	691b      	ldr	r3, [r3, #16]
   48dd2:	4283      	cmp	r3, r0
   48dd4:	d002      	beq.n	48ddc <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   48dd6:	2100      	movs	r1, #0
   48dd8:	f7fc ff1e 	bl	45c18 <sys_clock_set_timeout>
	__asm__ volatile(
   48ddc:	f387 8811 	msr	BASEPRI, r7
   48de0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   48de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   48de6:	1a9b      	subs	r3, r3, r2
   48de8:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   48dec:	45ac      	cmp	ip, r5
   48dee:	e9c4 3104 	strd	r3, r1, [r4, #16]
   48df2:	d0c2      	beq.n	48d7a <z_add_timeout+0x6e>
   48df4:	f8dc c000 	ldr.w	ip, [ip]
   48df8:	e7bc      	b.n	48d74 <z_add_timeout+0x68>
   48dfa:	bf00      	nop
   48dfc:	200041a0 	.word	0x200041a0
   48e00:	20000ec8 	.word	0x20000ec8
   48e04:	200071d4 	.word	0x200071d4

00048e08 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   48e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   48e0c:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   48e0e:	f7ff fcc9 	bl	487a4 <z_time_slice>
	__asm__ volatile(
   48e12:	f04f 0320 	mov.w	r3, #32
   48e16:	f3ef 8411 	mrs	r4, BASEPRI
   48e1a:	f383 8812 	msr	BASEPRI_MAX, r3
   48e1e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   48e22:	4e24      	ldr	r6, [pc, #144]	; (48eb4 <sys_clock_announce+0xac>)
	return list->head == list;
   48e24:	f8df 8090 	ldr.w	r8, [pc, #144]	; 48eb8 <sys_clock_announce+0xb0>
   48e28:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   48e2a:	4d24      	ldr	r5, [pc, #144]	; (48ebc <sys_clock_announce+0xb4>)
   48e2c:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   48e30:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48e32:	4540      	cmp	r0, r8
		curr_tick += dt;
   48e34:	e9d5 1e00 	ldrd	r1, lr, [r5]
   48e38:	ea4f 77e2 	mov.w	r7, r2, asr #31
   48e3c:	d00b      	beq.n	48e56 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   48e3e:	b150      	cbz	r0, 48e56 <sys_clock_announce+0x4e>
   48e40:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   48e44:	429a      	cmp	r2, r3
   48e46:	eb77 090c 	sbcs.w	r9, r7, ip
   48e4a:	da16      	bge.n	48e7a <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   48e4c:	1a9b      	subs	r3, r3, r2
   48e4e:	eb6c 0c07 	sbc.w	ip, ip, r7
   48e52:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   48e56:	1851      	adds	r1, r2, r1
   48e58:	eb4e 0707 	adc.w	r7, lr, r7
   48e5c:	e9c5 1700 	strd	r1, r7, [r5]
	announce_remaining = 0;
   48e60:	2500      	movs	r5, #0
   48e62:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   48e64:	f7ff ff10 	bl	48c88 <next_timeout>
   48e68:	4629      	mov	r1, r5
   48e6a:	f7fc fed5 	bl	45c18 <sys_clock_set_timeout>
	__asm__ volatile(
   48e6e:	f384 8811 	msr	BASEPRI, r4
   48e72:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   48e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   48e7a:	1859      	adds	r1, r3, r1
   48e7c:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   48e80:	1ad3      	subs	r3, r2, r3
   48e82:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   48e84:	2200      	movs	r2, #0
   48e86:	2300      	movs	r3, #0
   48e88:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   48e8c:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   48e90:	f7ff ff22 	bl	48cd8 <remove_timeout>
   48e94:	f384 8811 	msr	BASEPRI, r4
   48e98:	f3bf 8f6f 	isb	sy
		t->fn(t);
   48e9c:	6883      	ldr	r3, [r0, #8]
   48e9e:	4798      	blx	r3
	__asm__ volatile(
   48ea0:	f04f 0320 	mov.w	r3, #32
   48ea4:	f3ef 8411 	mrs	r4, BASEPRI
   48ea8:	f383 8812 	msr	BASEPRI_MAX, r3
   48eac:	f3bf 8f6f 	isb	sy
	return k;
   48eb0:	e7bc      	b.n	48e2c <sys_clock_announce+0x24>
   48eb2:	bf00      	nop
   48eb4:	20007210 	.word	0x20007210
   48eb8:	20000ec8 	.word	0x20000ec8
   48ebc:	200041a0 	.word	0x200041a0

00048ec0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   48ec0:	b510      	push	{r4, lr}
   48ec2:	f04f 0320 	mov.w	r3, #32
   48ec6:	f3ef 8411 	mrs	r4, BASEPRI
   48eca:	f383 8812 	msr	BASEPRI_MAX, r3
   48ece:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   48ed2:	f7fc fed3 	bl	45c7c <sys_clock_elapsed>
   48ed6:	4a05      	ldr	r2, [pc, #20]	; (48eec <sys_clock_tick_get+0x2c>)
   48ed8:	e9d2 3100 	ldrd	r3, r1, [r2]
   48edc:	18c0      	adds	r0, r0, r3
   48ede:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   48ee2:	f384 8811 	msr	BASEPRI, r4
   48ee6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   48eea:	bd10      	pop	{r4, pc}
   48eec:	200041a0 	.word	0x200041a0

00048ef0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   48ef0:	b570      	push	{r4, r5, r6, lr}
   48ef2:	4604      	mov	r4, r0
	__asm__ volatile(
   48ef4:	f04f 0320 	mov.w	r3, #32
   48ef8:	f3ef 8511 	mrs	r5, BASEPRI
   48efc:	f383 8812 	msr	BASEPRI_MAX, r3
   48f00:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   48f04:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   48f08:	3301      	adds	r3, #1
   48f0a:	f142 0200 	adc.w	r2, r2, #0
   48f0e:	2b02      	cmp	r3, #2
   48f10:	f172 0200 	sbcs.w	r2, r2, #0
   48f14:	d304      	bcc.n	48f20 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   48f16:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   48f1a:	4917      	ldr	r1, [pc, #92]	; (48f78 <z_timer_expiration_handler+0x88>)
   48f1c:	f7ff fef6 	bl	48d0c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   48f20:	6b23      	ldr	r3, [r4, #48]	; 0x30
   48f22:	3301      	adds	r3, #1
   48f24:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   48f26:	6a23      	ldr	r3, [r4, #32]
   48f28:	b173      	cbz	r3, 48f48 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   48f2a:	f385 8811 	msr	BASEPRI, r5
   48f2e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   48f32:	6a23      	ldr	r3, [r4, #32]
   48f34:	4620      	mov	r0, r4
   48f36:	4798      	blx	r3
	__asm__ volatile(
   48f38:	f04f 0320 	mov.w	r3, #32
   48f3c:	f3ef 8511 	mrs	r5, BASEPRI
   48f40:	f383 8812 	msr	BASEPRI_MAX, r3
   48f44:	f3bf 8f6f 	isb	sy
	return list->head == list;
   48f48:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48f4c:	42a6      	cmp	r6, r4
   48f4e:	d000      	beq.n	48f52 <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   48f50:	b926      	cbnz	r6, 48f5c <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
   48f52:	f385 8811 	msr	BASEPRI, r5
   48f56:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   48f5a:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   48f5c:	4630      	mov	r0, r6
   48f5e:	f007 ffad 	bl	50ebc <z_unpend_thread_no_timeout>
   48f62:	2300      	movs	r3, #0
   48f64:	67f3      	str	r3, [r6, #124]	; 0x7c
   48f66:	f385 8811 	msr	BASEPRI, r5
   48f6a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   48f6e:	4630      	mov	r0, r6
}
   48f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   48f74:	f007 bf92 	b.w	50e9c <z_ready_thread>
   48f78:	00048ef1 	.word	0x00048ef1

00048f7c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   48f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   48f80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   48f84:	bf08      	it	eq
   48f86:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   48f8a:	4605      	mov	r5, r0
   48f8c:	4614      	mov	r4, r2
   48f8e:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   48f92:	4619      	mov	r1, r3
   48f94:	4691      	mov	r9, r2
   48f96:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   48f98:	d037      	beq.n	4900a <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   48f9a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   48f9e:	bf08      	it	eq
   48fa0:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   48fa4:	4637      	mov	r7, r6
   48fa6:	4682      	mov	sl, r0
   48fa8:	d011      	beq.n	48fce <z_impl_k_timer_start+0x52>
   48faa:	ea50 0306 	orrs.w	r3, r0, r6
   48fae:	d00e      	beq.n	48fce <z_impl_k_timer_start+0x52>
   48fb0:	1c72      	adds	r2, r6, #1
   48fb2:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
   48fb6:	db0a      	blt.n	48fce <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   48fb8:	2e02      	cmp	r6, #2
   48fba:	4684      	mov	ip, r0
   48fbc:	f170 0000 	sbcs.w	r0, r0, #0
   48fc0:	bfbc      	itt	lt
   48fc2:	2702      	movlt	r7, #2
   48fc4:	f04f 0c00 	movlt.w	ip, #0
   48fc8:	3f01      	subs	r7, #1
   48fca:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   48fce:	1c63      	adds	r3, r4, #1
   48fd0:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   48fd4:	db0a      	blt.n	48fec <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   48fd6:	2c01      	cmp	r4, #1
   48fd8:	f171 0300 	sbcs.w	r3, r1, #0
   48fdc:	4622      	mov	r2, r4
   48fde:	bfbc      	itt	lt
   48fe0:	2201      	movlt	r2, #1
   48fe2:	2100      	movlt	r1, #0
   48fe4:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
   48fe8:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   48fec:	4628      	mov	r0, r5
   48fee:	f008 f805 	bl	50ffc <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   48ff2:	2300      	movs	r3, #0
   48ff4:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
   48ff6:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   48ffa:	464a      	mov	r2, r9
   48ffc:	4643      	mov	r3, r8
   48ffe:	4628      	mov	r0, r5
   49000:	4903      	ldr	r1, [pc, #12]	; (49010 <z_impl_k_timer_start+0x94>)
		     duration);
}
   49002:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   49006:	f7ff be81 	b.w	48d0c <z_add_timeout>
}
   4900a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   4900e:	bf00      	nop
   49010:	00048ef1 	.word	0x00048ef1

00049014 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   49014:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   49018:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   4901a:	4b29      	ldr	r3, [pc, #164]	; (490c0 <z_impl_k_poll+0xac>)
   4901c:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   4901e:	2301      	movs	r3, #1
   49020:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   49024:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   49028:	ea52 0305 	orrs.w	r3, r2, r5
{
   4902c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   4902e:	bf0c      	ite	eq
   49030:	2301      	moveq	r3, #1
   49032:	2300      	movne	r3, #0
   49034:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   49038:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   4903a:	f008 f89b 	bl	51174 <register_events>
   4903e:	4681      	mov	r9, r0
	__asm__ volatile(
   49040:	f04f 0320 	mov.w	r3, #32
   49044:	f3ef 8a11 	mrs	sl, BASEPRI
   49048:	f383 8812 	msr	BASEPRI_MAX, r3
   4904c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   49050:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   49054:	b964      	cbnz	r4, 49070 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   49056:	4601      	mov	r1, r0
   49058:	4652      	mov	r2, sl
   4905a:	4640      	mov	r0, r8
   4905c:	f008 f95b 	bl	51316 <clear_event_registrations>
	__asm__ volatile(
   49060:	f38a 8811 	msr	BASEPRI, sl
   49064:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   49068:	4620      	mov	r0, r4
   4906a:	b002      	add	sp, #8
   4906c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   49070:	2300      	movs	r3, #0
   49072:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   49076:	ea56 0305 	orrs.w	r3, r6, r5
   4907a:	d106      	bne.n	4908a <z_impl_k_poll+0x76>
   4907c:	f38a 8811 	msr	BASEPRI, sl
   49080:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   49084:	f06f 040a 	mvn.w	r4, #10
   49088:	e7ee      	b.n	49068 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   4908a:	e9cd 6500 	strd	r6, r5, [sp]
   4908e:	4a0d      	ldr	r2, [pc, #52]	; (490c4 <z_impl_k_poll+0xb0>)
   49090:	480d      	ldr	r0, [pc, #52]	; (490c8 <z_impl_k_poll+0xb4>)
   49092:	4651      	mov	r1, sl
   49094:	f7ff fbc6 	bl	48824 <z_pend_curr>
   49098:	4604      	mov	r4, r0
	__asm__ volatile(
   4909a:	f04f 0320 	mov.w	r3, #32
   4909e:	f3ef 8511 	mrs	r5, BASEPRI
   490a2:	f383 8812 	msr	BASEPRI_MAX, r3
   490a6:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   490aa:	462a      	mov	r2, r5
   490ac:	4649      	mov	r1, r9
   490ae:	4640      	mov	r0, r8
   490b0:	f008 f931 	bl	51316 <clear_event_registrations>
	__asm__ volatile(
   490b4:	f385 8811 	msr	BASEPRI, r5
   490b8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   490bc:	e7d4      	b.n	49068 <z_impl_k_poll+0x54>
   490be:	bf00      	nop
   490c0:	200071d4 	.word	0x200071d4
   490c4:	20000ed0 	.word	0x20000ed0
   490c8:	20007430 	.word	0x20007430

000490cc <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   490cc:	b538      	push	{r3, r4, r5, lr}
   490ce:	4603      	mov	r3, r0
	__asm__ volatile(
   490d0:	f04f 0220 	mov.w	r2, #32
   490d4:	f3ef 8511 	mrs	r5, BASEPRI
   490d8:	f382 8812 	msr	BASEPRI_MAX, r2
   490dc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   490e0:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   490e2:	2101      	movs	r1, #1
   490e4:	6081      	str	r1, [r0, #8]
	return list->head == list;
   490e6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   490e8:	4283      	cmp	r3, r0
   490ea:	d106      	bne.n	490fa <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   490ec:	f385 8811 	msr	BASEPRI, r5
   490f0:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   490f4:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   490f6:	4620      	mov	r0, r4
   490f8:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   490fa:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   490fe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   49100:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   49102:	2300      	movs	r3, #0
	node->prev = NULL;
   49104:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   49108:	f008 f8ab 	bl	51262 <signal_poll_event>
	z_reschedule(&lock, key);
   4910c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   4910e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   49110:	4801      	ldr	r0, [pc, #4]	; (49118 <z_impl_k_poll_signal_raise+0x4c>)
   49112:	f7ff fbe1 	bl	488d8 <z_reschedule>
	return rc;
   49116:	e7ee      	b.n	490f6 <z_impl_k_poll_signal_raise+0x2a>
   49118:	20007430 	.word	0x20007430

0004911c <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   4911c:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   4911e:	4601      	mov	r1, r0
   49120:	4801      	ldr	r0, [pc, #4]	; (49128 <k_aligned_alloc+0xc>)
   49122:	f008 b944 	b.w	513ae <z_heap_aligned_alloc>
   49126:	bf00      	nop
   49128:	20001138 	.word	0x20001138

0004912c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   4912c:	4b01      	ldr	r3, [pc, #4]	; (49134 <k_thread_system_pool_assign+0x8>)
   4912e:	6743      	str	r3, [r0, #116]	; 0x74
}
   49130:	4770      	bx	lr
   49132:	bf00      	nop
   49134:	20001138 	.word	0x20001138

00049138 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   49138:	b538      	push	{r3, r4, r5, lr}
   4913a:	4604      	mov	r4, r0
   4913c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   4913e:	f007 fc4c 	bl	509da <k_is_in_isr>
   49142:	b920      	cbnz	r0, 4914e <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   49144:	4b06      	ldr	r3, [pc, #24]	; (49160 <z_thread_aligned_alloc+0x28>)
   49146:	689b      	ldr	r3, [r3, #8]
   49148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   4914a:	b90b      	cbnz	r3, 49150 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   4914c:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   4914e:	4b05      	ldr	r3, [pc, #20]	; (49164 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   49150:	462a      	mov	r2, r5
   49152:	4621      	mov	r1, r4
   49154:	4618      	mov	r0, r3
}
   49156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   4915a:	f008 b928 	b.w	513ae <z_heap_aligned_alloc>
   4915e:	bf00      	nop
   49160:	200071d4 	.word	0x200071d4
   49164:	20001138 	.word	0x20001138

00049168 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   49168:	4770      	bx	lr

0004916a <strlcpy>:
 *
 * Nathan Myers <ncm-nospam@cantrip.org>, 2003/06/03
 * Placed in the public domain.
 */

size_t strlcpy(char *dst, const char *src, size_t size) {
   4916a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4916c:	4606      	mov	r6, r0
    const size_t len = strlen(src);
   4916e:	4608      	mov	r0, r1
size_t strlcpy(char *dst, const char *src, size_t size) {
   49170:	460f      	mov	r7, r1
   49172:	4614      	mov	r4, r2
    const size_t len = strlen(src);
   49174:	f002 fdc0 	bl	4bcf8 <strlen>
   49178:	4605      	mov	r5, r0
    if (size != 0) {
   4917a:	b154      	cbz	r4, 49192 <strlcpy+0x28>
        memcpy(dst, src, (len > size - 1) ? size - 1 : len);
   4917c:	3c01      	subs	r4, #1
   4917e:	4284      	cmp	r4, r0
   49180:	4622      	mov	r2, r4
   49182:	4639      	mov	r1, r7
   49184:	bf28      	it	cs
   49186:	4602      	movcs	r2, r0
   49188:	4630      	mov	r0, r6
   4918a:	f002 fdec 	bl	4bd66 <memcpy>
        dst[size - 1] = 0;
   4918e:	2300      	movs	r3, #0
   49190:	5533      	strb	r3, [r6, r4]
    }
    return len;
}
   49192:	4628      	mov	r0, r5
   49194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00049196 <zmk_event_manager_raise>:

int zmk_event_manager_raise(zmk_event_t *event) { return zmk_event_manager_handle_from(event, 0); }
   49196:	2100      	movs	r1, #0
   49198:	f7df beb2 	b.w	28f00 <zmk_event_manager_handle_from>

0004919c <behavior_reset_init>:
#if DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT)
struct behavior_reset_config {
    int type;
};

static int behavior_reset_init(const struct device *dev) { return 0; };
   4919c:	2000      	movs	r0, #0
   4919e:	4770      	bx	lr

000491a0 <on_keymap_binding_pressed>:

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   491a0:	b082      	sub	sp, #8
   491a2:	b508      	push	{r3, lr}
   491a4:	a902      	add	r1, sp, #8
   491a6:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   491aa:	6800      	ldr	r0, [r0, #0]
   491ac:	f7fe fbfc 	bl	479a8 <z_impl_device_get_binding>
    const struct behavior_reset_config *cfg = dev->config;

    // TODO: Correct magic code for going into DFU?
    // See
    // https://github.com/adafruit/Adafruit_nRF52_Bootloader/blob/d6b28e66053eea467166f44875e3c7ec741cb471/src/main.c#L107
    sys_reboot(cfg->type);
   491b0:	6843      	ldr	r3, [r0, #4]
   491b2:	6818      	ldr	r0, [r3, #0]
   491b4:	f7e1 ff78 	bl	2b0a8 <sys_reboot>

000491b8 <ext_power_enable>:
__syscall int ext_power_enable(const struct device *dev);

static inline int z_impl_ext_power_enable(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->enable == NULL) {
   491b8:	6883      	ldr	r3, [r0, #8]
   491ba:	681b      	ldr	r3, [r3, #0]
   491bc:	b103      	cbz	r3, 491c0 <ext_power_enable+0x8>
        return -ENOTSUP;
    }

    return api->enable(dev);
   491be:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_enable(dev);
}
   491c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   491c4:	4770      	bx	lr

000491c6 <ext_power_disable>:
__syscall int ext_power_disable(const struct device *dev);

static inline int z_impl_ext_power_disable(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->disable == NULL) {
   491c6:	6883      	ldr	r3, [r0, #8]
   491c8:	685b      	ldr	r3, [r3, #4]
   491ca:	b103      	cbz	r3, 491ce <ext_power_disable+0x8>
        return -ENOTSUP;
    }

    return api->disable(dev);
   491cc:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_DISABLE);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_disable(dev);
}
   491ce:	f06f 0085 	mvn.w	r0, #133	; 0x85
   491d2:	4770      	bx	lr

000491d4 <ext_power_get>:
__syscall int ext_power_get(const struct device *dev);

static inline int z_impl_ext_power_get(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->get == NULL) {
   491d4:	6883      	ldr	r3, [r0, #8]
   491d6:	689b      	ldr	r3, [r3, #8]
   491d8:	b103      	cbz	r3, 491dc <ext_power_get+0x8>
        return -ENOTSUP;
    }

    return api->get(dev);
   491da:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_GET);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_get(dev);
}
   491dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   491e0:	4770      	bx	lr

000491e2 <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   491e2:	b082      	sub	sp, #8
   491e4:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
   491e8:	2000      	movs	r0, #0
   491ea:	b002      	add	sp, #8
   491ec:	4770      	bx	lr

000491ee <behavior_ext_power_init>:

static int behavior_ext_power_init(const struct device *dev) { return 0; };
   491ee:	2000      	movs	r0, #0
   491f0:	4770      	bx	lr

000491f2 <zmk_hid_register_mods>:
int zmk_hid_register_mods(zmk_mod_flags_t modifiers) {
   491f2:	b570      	push	{r4, r5, r6, lr}
   491f4:	2400      	movs	r4, #0
   491f6:	4606      	mov	r6, r0
    int ret = 0;
   491f8:	4625      	mov	r5, r4
        if (modifiers & (1 << i)) {
   491fa:	fa46 f304 	asr.w	r3, r6, r4
   491fe:	07db      	lsls	r3, r3, #31
   49200:	d503      	bpl.n	4920a <zmk_hid_register_mods+0x18>
            ret += zmk_hid_register_mod(i);
   49202:	b2e0      	uxtb	r0, r4
   49204:	f7df ff34 	bl	29070 <zmk_hid_register_mod>
   49208:	4405      	add	r5, r0
    for (zmk_mod_t i = 0; i < 8; i++) {
   4920a:	3401      	adds	r4, #1
   4920c:	2c08      	cmp	r4, #8
   4920e:	d1f4      	bne.n	491fa <zmk_hid_register_mods+0x8>
}
   49210:	4628      	mov	r0, r5
   49212:	bd70      	pop	{r4, r5, r6, pc}

00049214 <zmk_hid_unregister_mods>:
int zmk_hid_unregister_mods(zmk_mod_flags_t modifiers) {
   49214:	b570      	push	{r4, r5, r6, lr}
   49216:	2400      	movs	r4, #0
   49218:	4606      	mov	r6, r0
    int ret = 0;
   4921a:	4625      	mov	r5, r4
        if (modifiers & (1 << i)) {
   4921c:	fa46 f304 	asr.w	r3, r6, r4
   49220:	07db      	lsls	r3, r3, #31
   49222:	d503      	bpl.n	4922c <zmk_hid_unregister_mods+0x18>
            ret += zmk_hid_unregister_mod(i);
   49224:	b2e0      	uxtb	r0, r4
   49226:	f7df ff49 	bl	290bc <zmk_hid_unregister_mod>
   4922a:	4405      	add	r5, r0
    for (zmk_mod_t i = 0; i < 8; i++) {
   4922c:	3401      	adds	r4, #1
   4922e:	2c08      	cmp	r4, #8
   49230:	d1f4      	bne.n	4921c <zmk_hid_unregister_mods+0x8>
}
   49232:	4628      	mov	r0, r5
   49234:	bd70      	pop	{r4, r5, r6, pc}

00049236 <zmk_hid_press>:
    switch (ZMK_HID_USAGE_PAGE(usage)) {
   49236:	f3c0 4307 	ubfx	r3, r0, #16, #8
   4923a:	2b07      	cmp	r3, #7
   4923c:	d004      	beq.n	49248 <zmk_hid_press+0x12>
   4923e:	2b0c      	cmp	r3, #12
   49240:	d005      	beq.n	4924e <zmk_hid_press+0x18>
}
   49242:	f06f 0015 	mvn.w	r0, #21
   49246:	4770      	bx	lr
        return zmk_hid_keyboard_press(ZMK_HID_USAGE_ID(usage));
   49248:	b280      	uxth	r0, r0
   4924a:	f7df bf97 	b.w	2917c <zmk_hid_keyboard_press>
        return zmk_hid_consumer_press(ZMK_HID_USAGE_ID(usage));
   4924e:	b280      	uxth	r0, r0
   49250:	f7df bfce 	b.w	291f0 <zmk_hid_consumer_press>

00049254 <zmk_hid_release>:
    switch (ZMK_HID_USAGE_PAGE(usage)) {
   49254:	f3c0 4307 	ubfx	r3, r0, #16, #8
   49258:	2b07      	cmp	r3, #7
   4925a:	d004      	beq.n	49266 <zmk_hid_release+0x12>
   4925c:	2b0c      	cmp	r3, #12
   4925e:	d005      	beq.n	4926c <zmk_hid_release+0x18>
}
   49260:	f06f 0015 	mvn.w	r0, #21
   49264:	4770      	bx	lr
        return zmk_hid_keyboard_release(ZMK_HID_USAGE_ID(usage));
   49266:	b280      	uxth	r0, r0
   49268:	f7df bfa0 	b.w	291ac <zmk_hid_keyboard_release>
        return zmk_hid_consumer_release(ZMK_HID_USAGE_ID(usage));
   4926c:	b280      	uxth	r0, r0
   4926e:	f7df bfd3 	b.w	29218 <zmk_hid_consumer_release>

00049272 <behavior_key_press_init>:
#include <zmk/events/keycode_state_changed.h>
#include <zmk/behavior.h>

LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

static int behavior_key_press_init(const struct device *dev) { return 0; };
   49272:	2000      	movs	r0, #0
   49274:	4770      	bx	lr

00049276 <zmk_keycode_state_changed_from_encoded>:
};

ZMK_EVENT_DECLARE(zmk_keycode_state_changed);

static inline struct zmk_keycode_state_changed_event *
zmk_keycode_state_changed_from_encoded(uint32_t encoded, bool pressed, int64_t timestamp) {
   49276:	b570      	push	{r4, r5, r6, lr}
    uint16_t page = ZMK_HID_USAGE_PAGE(encoded);
    uint16_t id = ZMK_HID_USAGE_ID(encoded);
    uint8_t implicit_modifiers = 0x00;
    uint8_t explicit_modifiers = 0x00;

    if (!page) {
   49278:	f410 0f7f 	tst.w	r0, #16711680	; 0xff0000
   4927c:	b286      	uxth	r6, r0
    uint16_t page = ZMK_HID_USAGE_PAGE(encoded);
   4927e:	f3c0 4407 	ubfx	r4, r0, #16, #8
zmk_keycode_state_changed_from_encoded(uint32_t encoded, bool pressed, int64_t timestamp) {
   49282:	b088      	sub	sp, #32
    zmk_key_t key;
    bool pressed;
};

static inline bool is_mod(uint8_t usage_page, uint32_t keycode) {
    return (keycode >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL &&
   49284:	f1a6 05e0 	sub.w	r5, r6, #224	; 0xe0
   49288:	ea4f 6010 	mov.w	r0, r0, lsr #24
    if (!page) {
   4928c:	d11a      	bne.n	492c4 <zmk_keycode_state_changed_from_encoded+0x4e>
            keycode <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI && usage_page == HID_USAGE_KEY);
   4928e:	2d07      	cmp	r5, #7
   49290:	d91c      	bls.n	492cc <zmk_keycode_state_changed_from_encoded+0x56>
        page = HID_USAGE_KEY;
   49292:	2407      	movs	r4, #7
    }

    if (is_mod(page, id)) {
        explicit_modifiers = SELECT_MODS(encoded);
    } else {
        implicit_modifiers = SELECT_MODS(encoded);
   49294:	b2c5      	uxtb	r5, r0
    uint8_t explicit_modifiers = 0x00;
   49296:	2000      	movs	r0, #0
    }

    return new_zmk_keycode_state_changed(
        (struct zmk_keycode_state_changed){.usage_page = page,
   49298:	e9cd 2306 	strd	r2, r3, [sp, #24]
    return new_zmk_keycode_state_changed(
   4929c:	ab08      	add	r3, sp, #32
        (struct zmk_keycode_state_changed){.usage_page = page,
   4929e:	f88d 0011 	strb.w	r0, [sp, #17]
   492a2:	f88d 1012 	strb.w	r1, [sp, #18]
    return new_zmk_keycode_state_changed(
   492a6:	e913 0003 	ldmdb	r3, {r0, r1}
   492aa:	e88d 0003 	stmia.w	sp, {r0, r1}
        (struct zmk_keycode_state_changed){.usage_page = page,
   492ae:	f8ad 4008 	strh.w	r4, [sp, #8]
   492b2:	9603      	str	r6, [sp, #12]
   492b4:	f88d 5010 	strb.w	r5, [sp, #16]
    return new_zmk_keycode_state_changed(
   492b8:	ab02      	add	r3, sp, #8
   492ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   492bc:	f7e0 fb9c 	bl	299f8 <new_zmk_keycode_state_changed>
                                           .keycode = id,
                                           .implicit_modifiers = implicit_modifiers,
                                           .explicit_modifiers = explicit_modifiers,
                                           .state = pressed,
                                           .timestamp = timestamp});
}
   492c0:	b008      	add	sp, #32
   492c2:	bd70      	pop	{r4, r5, r6, pc}
   492c4:	2d07      	cmp	r5, #7
   492c6:	d8e5      	bhi.n	49294 <zmk_keycode_state_changed_from_encoded+0x1e>
   492c8:	2c07      	cmp	r4, #7
   492ca:	d1e3      	bne.n	49294 <zmk_keycode_state_changed_from_encoded+0x1e>
        explicit_modifiers = SELECT_MODS(encoded);
   492cc:	b2c0      	uxtb	r0, r0
   492ce:	2407      	movs	r4, #7
    uint8_t implicit_modifiers = 0x00;
   492d0:	2500      	movs	r5, #0
   492d2:	e7e1      	b.n	49298 <zmk_keycode_state_changed_from_encoded+0x22>

000492d4 <on_keymap_binding_released>:
    return ZMK_EVENT_RAISE(
        zmk_keycode_state_changed_from_encoded(binding->param1, true, event.timestamp));
}

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   492d4:	b082      	sub	sp, #8
   492d6:	b508      	push	{r3, lr}
   492d8:	a902      	add	r1, sp, #8
   492da:	e881 000c 	stmia.w	r1, {r2, r3}
    LOG_DBG("position %d keycode 0x%02X", event.position, binding->param1);
    return ZMK_EVENT_RAISE(
   492de:	6840      	ldr	r0, [r0, #4]
   492e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   492e4:	2100      	movs	r1, #0
   492e6:	f7ff ffc6 	bl	49276 <zmk_keycode_state_changed_from_encoded>
        zmk_keycode_state_changed_from_encoded(binding->param1, false, event.timestamp));
}
   492ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   492ee:	b002      	add	sp, #8
    return ZMK_EVENT_RAISE(
   492f0:	f7ff bf51 	b.w	49196 <zmk_event_manager_raise>

000492f4 <on_keymap_binding_pressed>:
                                     struct zmk_behavior_binding_event event) {
   492f4:	b082      	sub	sp, #8
   492f6:	b508      	push	{r3, lr}
   492f8:	a902      	add	r1, sp, #8
   492fa:	e881 000c 	stmia.w	r1, {r2, r3}
    return ZMK_EVENT_RAISE(
   492fe:	6840      	ldr	r0, [r0, #4]
   49300:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   49304:	2101      	movs	r1, #1
   49306:	f7ff ffb6 	bl	49276 <zmk_keycode_state_changed_from_encoded>
}
   4930a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   4930e:	b002      	add	sp, #8
    return ZMK_EVENT_RAISE(
   49310:	f7ff bf41 	b.w	49196 <zmk_event_manager_raise>

00049314 <queue_macro>:

static void queue_macro(uint32_t position, const struct zmk_behavior_binding bindings[],
                        struct behavior_macro_trigger_state state) {
   49314:	b082      	sub	sp, #8
   49316:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   4931a:	4688      	mov	r8, r1
   4931c:	a90a      	add	r1, sp, #40	; 0x28
   4931e:	e881 000c 	stmia.w	r1, {r2, r3}
    LOG_DBG("Iterating macro bindings - starting: %d, count: %d", state.start_index, state.count);
    for (int i = state.start_index; i < state.start_index + state.count; i++) {
   49322:	f8bd 7032 	ldrh.w	r7, [sp, #50]	; 0x32
                        struct behavior_macro_trigger_state state) {
   49326:	4605      	mov	r5, r0
        if (!handle_control_binding(&state, &bindings[i])) {
   49328:	f04f 090c 	mov.w	r9, #12
            switch (state.mode) {
            case MACRO_MODE_TAP:
                zmk_behavior_queue_add(position, bindings[i], true, state.tap_ms);
   4932c:	f04f 0a01 	mov.w	sl, #1
    for (int i = state.start_index; i < state.start_index + state.count; i++) {
   49330:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   49334:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   49338:	4413      	add	r3, r2
   4933a:	429f      	cmp	r7, r3
   4933c:	db04      	blt.n	49348 <queue_macro+0x34>
                LOG_ERR("Unknown macro mode: %d", state.mode);
                break;
            }
        }
    }
}
   4933e:	b002      	add	sp, #8
   49340:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   49344:	b002      	add	sp, #8
   49346:	4770      	bx	lr
        if (!handle_control_binding(&state, &bindings[i])) {
   49348:	fb09 8407 	mla	r4, r9, r7, r8
   4934c:	4621      	mov	r1, r4
   4934e:	a80a      	add	r0, sp, #40	; 0x28
   49350:	f7df ff86 	bl	29260 <handle_control_binding>
   49354:	b9b0      	cbnz	r0, 49384 <queue_macro+0x70>
            switch (state.mode) {
   49356:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   4935a:	2e01      	cmp	r6, #1
   4935c:	d00a      	beq.n	49374 <queue_macro+0x60>
   4935e:	2e02      	cmp	r6, #2
   49360:	d012      	beq.n	49388 <queue_macro+0x74>
   49362:	b97e      	cbnz	r6, 49384 <queue_macro+0x70>
                zmk_behavior_queue_add(position, bindings[i], true, state.tap_ms);
   49364:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   49366:	e9cd a300 	strd	sl, r3, [sp]
   4936a:	4628      	mov	r0, r5
   4936c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
   49370:	f7e0 f938 	bl	295e4 <zmk_behavior_queue_add>
                zmk_behavior_queue_add(position, bindings[i], true, state.wait_ms);
   49374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   49376:	e9cd 6300 	strd	r6, r3, [sp]
                zmk_behavior_queue_add(position, bindings[i], false, state.wait_ms);
   4937a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
   4937e:	4628      	mov	r0, r5
   49380:	f7e0 f930 	bl	295e4 <zmk_behavior_queue_add>
    for (int i = state.start_index; i < state.start_index + state.count; i++) {
   49384:	3701      	adds	r7, #1
   49386:	e7d3      	b.n	49330 <queue_macro+0x1c>
                zmk_behavior_queue_add(position, bindings[i], false, state.wait_ms);
   49388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   4938a:	e9cd 0300 	strd	r0, r3, [sp]
   4938e:	e7f4      	b.n	4937a <queue_macro+0x66>

00049390 <on_macro_binding_pressed>:

static int on_macro_binding_pressed(struct zmk_behavior_binding *binding,
                                    struct zmk_behavior_binding_event event) {
   49390:	b082      	sub	sp, #8
   49392:	b530      	push	{r4, r5, lr}
   49394:	b087      	sub	sp, #28
   49396:	a90a      	add	r1, sp, #40	; 0x28
   49398:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   4939c:	6800      	ldr	r0, [r0, #0]
   4939e:	f7fe fb03 	bl	479a8 <z_impl_device_get_binding>
    const struct behavior_macro_config *cfg = dev->config;
    struct behavior_macro_state *state = dev->data;
   493a2:	6903      	ldr	r3, [r0, #16]
    const struct behavior_macro_config *cfg = dev->config;
   493a4:	6845      	ldr	r5, [r0, #4]
    struct behavior_macro_trigger_state trigger_state = {.mode = MACRO_MODE_TAP,
   493a6:	691b      	ldr	r3, [r3, #16]
   493a8:	f8ad 3014 	strh.w	r3, [sp, #20]
   493ac:	2400      	movs	r4, #0
   493ae:	f88d 4010 	strb.w	r4, [sp, #16]
   493b2:	f8ad 4012 	strh.w	r4, [sp, #18]
                                                         .tap_ms = cfg->default_tap_ms,
                                                         .wait_ms = cfg->default_wait_ms,
                                                         .start_index = 0,
                                                         .count = state->press_bindings_count};

    queue_macro(event.position, cfg->bindings, trigger_state);
   493b6:	ab06      	add	r3, sp, #24
   493b8:	e913 0003 	ldmdb	r3, {r0, r1}
    struct behavior_macro_trigger_state trigger_state = {.mode = MACRO_MODE_TAP,
   493bc:	682a      	ldr	r2, [r5, #0]
   493be:	9202      	str	r2, [sp, #8]
   493c0:	686a      	ldr	r2, [r5, #4]
   493c2:	9203      	str	r2, [sp, #12]
    queue_macro(event.position, cfg->bindings, trigger_state);
   493c4:	e88d 0003 	stmia.w	sp, {r0, r1}
   493c8:	4613      	mov	r3, r2
   493ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
   493cc:	9a02      	ldr	r2, [sp, #8]
   493ce:	f105 010c 	add.w	r1, r5, #12
   493d2:	f7ff ff9f 	bl	49314 <queue_macro>

    return ZMK_BEHAVIOR_OPAQUE;
}
   493d6:	4620      	mov	r0, r4
   493d8:	b007      	add	sp, #28
   493da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   493de:	b002      	add	sp, #8
   493e0:	4770      	bx	lr

000493e2 <on_macro_binding_released>:

static int on_macro_binding_released(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   493e2:	b082      	sub	sp, #8
   493e4:	b513      	push	{r0, r1, r4, lr}
   493e6:	a904      	add	r1, sp, #16
   493e8:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   493ec:	6800      	ldr	r0, [r0, #0]
   493ee:	f7fe fadb 	bl	479a8 <z_impl_device_get_binding>
    const struct behavior_macro_config *cfg = dev->config;
    struct behavior_macro_state *state = dev->data;

    queue_macro(event.position, cfg->bindings, state->release_state);
   493f2:	6903      	ldr	r3, [r0, #16]
   493f4:	6844      	ldr	r4, [r0, #4]
   493f6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   493fa:	e88d 0003 	stmia.w	sp, {r0, r1}
   493fe:	9805      	ldr	r0, [sp, #20]
   49400:	cb0c      	ldmia	r3, {r2, r3}
   49402:	f104 010c 	add.w	r1, r4, #12
   49406:	f7ff ff85 	bl	49314 <queue_macro>

    return ZMK_BEHAVIOR_OPAQUE;
}
   4940a:	2000      	movs	r0, #0
   4940c:	b002      	add	sp, #8
   4940e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   49412:	b002      	add	sp, #8
   49414:	4770      	bx	lr

00049416 <behavior_mo_init>:
LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

struct behavior_mo_config {};
struct behavior_mo_data {};

static int behavior_mo_init(const struct device *dev) { return 0; };
   49416:	2000      	movs	r0, #0
   49418:	4770      	bx	lr

0004941a <mo_keymap_binding_released>:
    LOG_DBG("position %d layer %d", event.position, binding->param1);
    return zmk_keymap_layer_activate(binding->param1);
}

static int mo_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   4941a:	b082      	sub	sp, #8
   4941c:	e88d 000c 	stmia.w	sp, {r2, r3}
    LOG_DBG("position %d layer %d", event.position, binding->param1);
    return zmk_keymap_layer_deactivate(binding->param1);
   49420:	7900      	ldrb	r0, [r0, #4]
}
   49422:	b002      	add	sp, #8
    return zmk_keymap_layer_deactivate(binding->param1);
   49424:	f000 b914 	b.w	49650 <zmk_keymap_layer_deactivate>

00049428 <mo_keymap_binding_pressed>:
                                     struct zmk_behavior_binding_event event) {
   49428:	b082      	sub	sp, #8
   4942a:	e88d 000c 	stmia.w	sp, {r2, r3}
    return zmk_keymap_layer_activate(binding->param1);
   4942e:	7900      	ldrb	r0, [r0, #4]
}
   49430:	b002      	add	sp, #8
    return zmk_keymap_layer_activate(binding->param1);
   49432:	f000 b90a 	b.w	4964a <zmk_keymap_layer_activate>

00049436 <press_tap_dance_behavior.isra.0>:
static inline int press_tap_dance_behavior(struct active_tap_dance *tap_dance, int64_t timestamp) {
   49436:	b5f0      	push	{r4, r5, r6, r7, lr}
   49438:	4617      	mov	r7, r2
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   4943a:	6942      	ldr	r2, [r0, #20]
static inline int press_tap_dance_behavior(struct active_tap_dance *tap_dance, int64_t timestamp) {
   4943c:	461d      	mov	r5, r3
    tap_dance->tap_dance_decided = true;
   4943e:	2301      	movs	r3, #1
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   49440:	6891      	ldr	r1, [r2, #8]
    tap_dance->tap_dance_decided = true;
   49442:	7683      	strb	r3, [r0, #26]
static inline int press_tap_dance_behavior(struct active_tap_dance *tap_dance, int64_t timestamp) {
   49444:	4604      	mov	r4, r0
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   49446:	6803      	ldr	r3, [r0, #0]
        .position = tap_dance->position,
   49448:	f8d4 c004 	ldr.w	ip, [r4, #4]
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   4944c:	220c      	movs	r2, #12
static inline int press_tap_dance_behavior(struct active_tap_dance *tap_dance, int64_t timestamp) {
   4944e:	b093      	sub	sp, #76	; 0x4c
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   49450:	fb02 1103 	mla	r1, r2, r3, r1
   49454:	eb0d 0602 	add.w	r6, sp, r2
   49458:	e911 0007 	ldmdb	r1, {r0, r1, r2}
   4945c:	e9cd c707 	strd	ip, r7, [sp, #28]
    struct zmk_behavior_binding_event event = {
   49460:	2300      	movs	r3, #0
   49462:	9306      	str	r3, [sp, #24]
   49464:	9509      	str	r5, [sp, #36]	; 0x24
   49466:	ab06      	add	r3, sp, #24
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   49468:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    return behavior_keymap_binding_pressed(&binding, event);
   4946c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   4946e:	ac0a      	add	r4, sp, #40	; 0x28
   49470:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return z_impl_behavior_keymap_binding_pressed(binding, event);
   49474:	e9cd c70b 	strd	ip, r7, [sp, #44]	; 0x2c
   49478:	950d      	str	r5, [sp, #52]	; 0x34
   4947a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   4947e:	ad0e      	add	r5, sp, #56	; 0x38
   49480:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   49484:	9803      	ldr	r0, [sp, #12]
   49486:	f7fe fa8f 	bl	479a8 <z_impl_device_get_binding>
    if (dev == NULL) {
   4948a:	b158      	cbz	r0, 494a4 <press_tap_dance_behavior.isra.0+0x6e>
    if (api->binding_pressed == NULL) {
   4948c:	6883      	ldr	r3, [r0, #8]
   4948e:	689c      	ldr	r4, [r3, #8]
   49490:	b144      	cbz	r4, 494a4 <press_tap_dance_behavior.isra.0+0x6e>
    return api->binding_pressed(binding, event);
   49492:	ab12      	add	r3, sp, #72	; 0x48
   49494:	e913 0003 	ldmdb	r3, {r0, r1}
   49498:	e88d 0003 	stmia.w	sp, {r0, r1}
   4949c:	4630      	mov	r0, r6
   4949e:	e895 000c 	ldmia.w	r5, {r2, r3}
   494a2:	47a0      	blx	r4
}
   494a4:	b013      	add	sp, #76	; 0x4c
   494a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000494a8 <release_tap_dance_behavior.isra.0>:
static inline int release_tap_dance_behavior(struct active_tap_dance *tap_dance,
   494a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   494aa:	4617      	mov	r7, r2
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   494ac:	6942      	ldr	r2, [r0, #20]
static inline int release_tap_dance_behavior(struct active_tap_dance *tap_dance,
   494ae:	4604      	mov	r4, r0
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   494b0:	6891      	ldr	r1, [r2, #8]
        .position = tap_dance->position,
   494b2:	f8d4 c004 	ldr.w	ip, [r4, #4]
static inline int release_tap_dance_behavior(struct active_tap_dance *tap_dance,
   494b6:	461d      	mov	r5, r3
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   494b8:	6803      	ldr	r3, [r0, #0]
   494ba:	220c      	movs	r2, #12
static inline int release_tap_dance_behavior(struct active_tap_dance *tap_dance,
   494bc:	b093      	sub	sp, #76	; 0x4c
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   494be:	fb02 1103 	mla	r1, r2, r3, r1
   494c2:	eb0d 0602 	add.w	r6, sp, r2
   494c6:	e911 0007 	ldmdb	r1, {r0, r1, r2}
   494ca:	e9cd c707 	strd	ip, r7, [sp, #28]
    struct zmk_behavior_binding_event event = {
   494ce:	2300      	movs	r3, #0
   494d0:	9306      	str	r3, [sp, #24]
    tap_dance->position = ZMK_BHV_TAP_DANCE_POSITION_FREE;
   494d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   494d6:	6063      	str	r3, [r4, #4]
   494d8:	9509      	str	r5, [sp, #36]	; 0x24
   494da:	ab06      	add	r3, sp, #24
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   494dc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    return behavior_keymap_binding_released(&binding, event);
   494e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   494e2:	ac0a      	add	r4, sp, #40	; 0x28
   494e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return z_impl_behavior_keymap_binding_released(binding, event);
   494e8:	e9cd c70b 	strd	ip, r7, [sp, #44]	; 0x2c
   494ec:	950d      	str	r5, [sp, #52]	; 0x34
   494ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   494f2:	ad0e      	add	r5, sp, #56	; 0x38
   494f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   494f8:	9803      	ldr	r0, [sp, #12]
   494fa:	f7fe fa55 	bl	479a8 <z_impl_device_get_binding>
    if (dev == NULL) {
   494fe:	b158      	cbz	r0, 49518 <release_tap_dance_behavior.isra.0+0x70>
    if (api->binding_released == NULL) {
   49500:	6883      	ldr	r3, [r0, #8]
   49502:	68dc      	ldr	r4, [r3, #12]
   49504:	b144      	cbz	r4, 49518 <release_tap_dance_behavior.isra.0+0x70>
    return api->binding_released(binding, event);
   49506:	ab12      	add	r3, sp, #72	; 0x48
   49508:	e913 0003 	ldmdb	r3, {r0, r1}
   4950c:	e88d 0003 	stmia.w	sp, {r0, r1}
   49510:	4630      	mov	r0, r6
   49512:	e895 000c 	ldmia.w	r5, {r2, r3}
   49516:	47a0      	blx	r4
}
   49518:	b013      	add	sp, #76	; 0x4c
   4951a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004951c <on_tap_dance_binding_released>:
                                         struct zmk_behavior_binding_event event) {
   4951c:	b082      	sub	sp, #8
   4951e:	b508      	push	{r3, lr}
    struct active_tap_dance *tap_dance = find_tap_dance(event.position);
   49520:	4618      	mov	r0, r3
                                         struct zmk_behavior_binding_event event) {
   49522:	a902      	add	r1, sp, #8
   49524:	e881 000c 	stmia.w	r1, {r2, r3}
    struct active_tap_dance *tap_dance = find_tap_dance(event.position);
   49528:	f7df fefe 	bl	29328 <find_tap_dance>
    if (tap_dance == NULL) {
   4952c:	b138      	cbz	r0, 4953e <on_tap_dance_binding_released+0x22>
    if (tap_dance->tap_dance_decided) {
   4952e:	7e83      	ldrb	r3, [r0, #26]
    tap_dance->is_pressed = false;
   49530:	2200      	movs	r2, #0
   49532:	7402      	strb	r2, [r0, #16]
    if (tap_dance->tap_dance_decided) {
   49534:	b11b      	cbz	r3, 4953e <on_tap_dance_binding_released+0x22>
        release_tap_dance_behavior(tap_dance, event.timestamp);
   49536:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   4953a:	f7ff ffb5 	bl	494a8 <release_tap_dance_behavior.isra.0>
}
   4953e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   49542:	2000      	movs	r0, #0
   49544:	b002      	add	sp, #8
   49546:	4770      	bx	lr

00049548 <behavior_tap_dance_timer_handler>:
    if (tap_dance->position == ZMK_BHV_TAP_DANCE_POSITION_FREE) {
   49548:	f850 3c24 	ldr.w	r3, [r0, #-36]
   4954c:	3301      	adds	r3, #1
void behavior_tap_dance_timer_handler(struct k_work *item) {
   4954e:	b570      	push	{r4, r5, r6, lr}
   49550:	4604      	mov	r4, r0
    if (tap_dance->position == ZMK_BHV_TAP_DANCE_POSITION_FREE) {
   49552:	d013      	beq.n	4957c <behavior_tap_dance_timer_handler+0x34>
    if (tap_dance->timer_cancelled) {
   49554:	f810 3c0f 	ldrb.w	r3, [r0, #-15]
   49558:	b983      	cbnz	r3, 4957c <behavior_tap_dance_timer_handler+0x34>
    struct active_tap_dance *tap_dance = CONTAINER_OF(item, struct active_tap_dance, release_timer);
   4955a:	f1a0 0528 	sub.w	r5, r0, #40	; 0x28
    press_tap_dance_behavior(tap_dance, tap_dance->release_at);
   4955e:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   49562:	4628      	mov	r0, r5
   49564:	f7ff ff67 	bl	49436 <press_tap_dance_behavior.isra.0>
    if (tap_dance->is_pressed) {
   49568:	f814 3c18 	ldrb.w	r3, [r4, #-24]
   4956c:	b933      	cbnz	r3, 4957c <behavior_tap_dance_timer_handler+0x34>
    release_tap_dance_behavior(tap_dance, tap_dance->release_at);
   4956e:	e954 2302 	ldrd	r2, r3, [r4, #-8]
   49572:	4628      	mov	r0, r5
}
   49574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    release_tap_dance_behavior(tap_dance, tap_dance->release_at);
   49578:	f7ff bf96 	b.w	494a8 <release_tap_dance_behavior.isra.0>
}
   4957c:	bd70      	pop	{r4, r5, r6, pc}

0004957e <behavior_transparent_init>:

LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

#if DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT)

static int behavior_transparent_init(const struct device *dev) { return 0; };
   4957e:	2000      	movs	r0, #0
   49580:	4770      	bx	lr

00049582 <on_keymap_binding_pressed>:

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   49582:	b082      	sub	sp, #8
   49584:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_TRANSPARENT;
}
   49588:	2001      	movs	r0, #1
   4958a:	b002      	add	sp, #8
   4958c:	4770      	bx	lr

0004958e <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
   4958e:	b082      	sub	sp, #8
   49590:	e88d 000c 	stmia.w	sp, {r2, r3}
   49594:	2001      	movs	r0, #1
   49596:	b002      	add	sp, #8
   49598:	4770      	bx	lr

0004959a <behavior_none_init>:

LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

#if DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT)

static int behavior_none_init(const struct device *dev) { return 0; };
   4959a:	2000      	movs	r0, #0
   4959c:	4770      	bx	lr

0004959e <on_keymap_binding_pressed>:

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   4959e:	b082      	sub	sp, #8
   495a0:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
   495a4:	2000      	movs	r0, #0
   495a6:	b002      	add	sp, #8
   495a8:	4770      	bx	lr

000495aa <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
   495aa:	b082      	sub	sp, #8
   495ac:	e88d 000c 	stmia.w	sp, {r2, r3}
   495b0:	2000      	movs	r0, #0
   495b2:	b002      	add	sp, #8
   495b4:	4770      	bx	lr

000495b6 <endpoint_listener>:

static int endpoint_listener(const zmk_event_t *eh) {
   495b6:	b508      	push	{r3, lr}
    update_current_endpoint();
   495b8:	f7e0 f8c4 	bl	29744 <update_current_endpoint>
    return 0;
}
   495bc:	2000      	movs	r0, #0
   495be:	bd08      	pop	{r3, pc}

000495c0 <zmk_endpoints_send_report>:
    switch (usage_page) {
   495c0:	2807      	cmp	r0, #7
   495c2:	d004      	beq.n	495ce <zmk_endpoints_send_report+0xe>
   495c4:	280c      	cmp	r0, #12
   495c6:	d004      	beq.n	495d2 <zmk_endpoints_send_report+0x12>
}
   495c8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   495cc:	4770      	bx	lr
        return send_keyboard_report();
   495ce:	f7e0 b865 	b.w	2969c <send_keyboard_report>
        return send_consumer_report();
   495d2:	f7e0 b87b 	b.w	296cc <send_consumer_report>

000495d6 <hid_listener>:
        }
    }
    return zmk_endpoints_send_report(ev->usage_page);
}

int hid_listener(const zmk_event_t *eh) {
   495d6:	b538      	push	{r3, r4, r5, lr}
    const struct zmk_keycode_state_changed *ev = as_zmk_keycode_state_changed(eh);
   495d8:	f7e0 fa2a 	bl	29a30 <as_zmk_keycode_state_changed>
    if (ev) {
   495dc:	4604      	mov	r4, r0
   495de:	b1e8      	cbz	r0, 4961c <hid_listener+0x46>
    err = zmk_hid_press(ZMK_HID_USAGE(ev->usage_page, ev->keycode));
   495e0:	8803      	ldrh	r3, [r0, #0]
   495e2:	6840      	ldr	r0, [r0, #4]
   495e4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
        if (ev->state) {
   495e8:	7aa3      	ldrb	r3, [r4, #10]
   495ea:	b1cb      	cbz	r3, 49620 <hid_listener+0x4a>
    err = zmk_hid_press(ZMK_HID_USAGE(ev->usage_page, ev->keycode));
   495ec:	f7ff fe23 	bl	49236 <zmk_hid_press>
    if (err < 0) {
   495f0:	2800      	cmp	r0, #0
   495f2:	db13      	blt.n	4961c <hid_listener+0x46>
    explicit_mods_changed = zmk_hid_register_mods(ev->explicit_modifiers);
   495f4:	7a60      	ldrb	r0, [r4, #9]
   495f6:	f7ff fdfc 	bl	491f2 <zmk_hid_register_mods>
   495fa:	4605      	mov	r5, r0
    implicit_mods_changed = zmk_hid_implicit_modifiers_press(ev->implicit_modifiers);
   495fc:	7a20      	ldrb	r0, [r4, #8]
   495fe:	f7df fd8b 	bl	29118 <zmk_hid_implicit_modifiers_press>
    if (ev->usage_page != HID_USAGE_KEY &&
   49602:	8823      	ldrh	r3, [r4, #0]
   49604:	2b07      	cmp	r3, #7
   49606:	d006      	beq.n	49616 <hid_listener+0x40>
   49608:	2d00      	cmp	r5, #0
   4960a:	dc01      	bgt.n	49610 <hid_listener+0x3a>
        (explicit_mods_changed > 0 || implicit_mods_changed > 0)) {
   4960c:	2800      	cmp	r0, #0
   4960e:	dd02      	ble.n	49616 <hid_listener+0x40>
        err = zmk_endpoints_send_report(HID_USAGE_KEY);
   49610:	2007      	movs	r0, #7
   49612:	f7ff ffd5 	bl	495c0 <zmk_endpoints_send_report>
    return zmk_endpoints_send_report(ev->usage_page);
   49616:	8820      	ldrh	r0, [r4, #0]
   49618:	f7ff ffd2 	bl	495c0 <zmk_endpoints_send_report>
        } else {
            hid_listener_keycode_released(ev);
        }
    }
    return 0;
}
   4961c:	2000      	movs	r0, #0
   4961e:	bd38      	pop	{r3, r4, r5, pc}
    err = zmk_hid_release(ZMK_HID_USAGE(ev->usage_page, ev->keycode));
   49620:	f7ff fe18 	bl	49254 <zmk_hid_release>
    if (err < 0) {
   49624:	2800      	cmp	r0, #0
   49626:	dbf9      	blt.n	4961c <hid_listener+0x46>
    explicit_mods_changed = zmk_hid_unregister_mods(ev->explicit_modifiers);
   49628:	7a60      	ldrb	r0, [r4, #9]
   4962a:	f7ff fdf3 	bl	49214 <zmk_hid_unregister_mods>
   4962e:	4605      	mov	r5, r0
    implicit_mods_changed = zmk_hid_implicit_modifiers_release();
   49630:	f7df fd8c 	bl	2914c <zmk_hid_implicit_modifiers_release>
   49634:	e7e5      	b.n	49602 <hid_listener+0x2c>

00049636 <zmk_keymap_layer_active_with_state>:
bool zmk_keymap_layer_active_with_state(uint8_t layer, zmk_keymap_layers_state_t state_to_test) {
   49636:	4603      	mov	r3, r0
    return (state_to_test & (BIT(layer))) == (BIT(layer)) || layer == _zmk_keymap_layer_default;
   49638:	2001      	movs	r0, #1
   4963a:	fa00 f203 	lsl.w	r2, r0, r3
   4963e:	438a      	bics	r2, r1
   49640:	bf1c      	itt	ne
   49642:	fab3 f083 	clzne	r0, r3
   49646:	0940      	lsrne	r0, r0, #5
};
   49648:	4770      	bx	lr

0004964a <zmk_keymap_layer_activate>:
int zmk_keymap_layer_activate(uint8_t layer) { return set_layer_state(layer, true); };
   4964a:	2101      	movs	r1, #1
   4964c:	f7e0 b8d0 	b.w	297f0 <set_layer_state>

00049650 <zmk_keymap_layer_deactivate>:
int zmk_keymap_layer_deactivate(uint8_t layer) { return set_layer_state(layer, false); };
   49650:	2100      	movs	r1, #0
   49652:	f7e0 b8cd 	b.w	297f0 <set_layer_state>

00049656 <invoke_locally>:
                   bool pressed) {
   49656:	b082      	sub	sp, #8
   49658:	b570      	push	{r4, r5, r6, lr}
   4965a:	b088      	sub	sp, #32
   4965c:	a90c      	add	r1, sp, #48	; 0x30
   4965e:	e881 000c 	stmia.w	r1, {r2, r3}
   49662:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   49666:	4606      	mov	r6, r0
   49668:	466c      	mov	r4, sp
   4966a:	ad04      	add	r5, sp, #16
    if (pressed) {
   4966c:	b1e3      	cbz	r3, 496a8 <invoke_locally+0x52>
        return behavior_keymap_binding_pressed(binding, event);
   4966e:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   49670:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return z_impl_behavior_keymap_binding_pressed(binding, event);
   49674:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   49678:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   4967c:	6830      	ldr	r0, [r6, #0]
   4967e:	f7fe f993 	bl	479a8 <z_impl_device_get_binding>
    if (dev == NULL) {
   49682:	b300      	cbz	r0, 496c6 <invoke_locally+0x70>
    if (api->binding_pressed == NULL) {
   49684:	6883      	ldr	r3, [r0, #8]
   49686:	689c      	ldr	r4, [r3, #8]
    if (api->binding_released == NULL) {
   49688:	b324      	cbz	r4, 496d4 <invoke_locally+0x7e>
    return api->binding_released(binding, event);
   4968a:	aa08      	add	r2, sp, #32
   4968c:	e912 0003 	ldmdb	r2, {r0, r1}
   49690:	ab0e      	add	r3, sp, #56	; 0x38
   49692:	e883 0003 	stmia.w	r3, {r0, r1}
   49696:	e895 000c 	ldmia.w	r5, {r2, r3}
   4969a:	4630      	mov	r0, r6
   4969c:	4621      	mov	r1, r4
}
   4969e:	b008      	add	sp, #32
   496a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   496a4:	b002      	add	sp, #8
   496a6:	4708      	bx	r1
        return behavior_keymap_binding_released(binding, event);
   496a8:	ab0c      	add	r3, sp, #48	; 0x30
   496aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   496ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return z_impl_behavior_keymap_binding_released(binding, event);
   496b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   496b4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   496b8:	6830      	ldr	r0, [r6, #0]
   496ba:	f7fe f975 	bl	479a8 <z_impl_device_get_binding>
    if (dev == NULL) {
   496be:	b110      	cbz	r0, 496c6 <invoke_locally+0x70>
    if (api->binding_released == NULL) {
   496c0:	6883      	ldr	r3, [r0, #8]
   496c2:	68dc      	ldr	r4, [r3, #12]
   496c4:	e7e0      	b.n	49688 <invoke_locally+0x32>
        return -EINVAL;
   496c6:	f06f 0015 	mvn.w	r0, #21
}
   496ca:	b008      	add	sp, #32
   496cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   496d0:	b002      	add	sp, #8
   496d2:	4770      	bx	lr
        return -ENOTSUP;
   496d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
        return behavior_keymap_binding_released(binding, event);
   496d8:	e7f7      	b.n	496ca <invoke_locally+0x74>

000496da <keymap_listener>:
    return -ENOTSUP;
}

#endif /* ZMK_KEYMAP_HAS_SENSORS */

int keymap_listener(const zmk_event_t *eh) {
   496da:	b537      	push	{r0, r1, r2, r4, r5, lr}
    const struct zmk_position_state_changed *pos_ev;
    if ((pos_ev = as_zmk_position_state_changed(eh)) != NULL) {
   496dc:	f7df fc66 	bl	28fac <as_zmk_position_state_changed>
   496e0:	4603      	mov	r3, r0
   496e2:	b150      	cbz	r0, 496fa <keymap_listener+0x20>
        return zmk_keymap_position_state_changed(pos_ev->source, pos_ev->position, pos_ev->state,
   496e4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
   496e8:	7a02      	ldrb	r2, [r0, #8]
   496ea:	7800      	ldrb	r0, [r0, #0]
   496ec:	e9cd 4500 	strd	r4, r5, [sp]
   496f0:	6859      	ldr	r1, [r3, #4]
   496f2:	f7e0 f941 	bl	29978 <zmk_keymap_position_state_changed>
                                           sensor_ev->timestamp);
    }
#endif /* ZMK_KEYMAP_HAS_SENSORS */

    return -ENOTSUP;
}
   496f6:	b003      	add	sp, #12
   496f8:	bd30      	pop	{r4, r5, pc}
    return -ENOTSUP;
   496fa:	f06f 0085 	mvn.w	r0, #133	; 0x85
   496fe:	e7fa      	b.n	496f6 <keymap_listener+0x1c>

00049700 <behavior_bt_init>:
    }

    return -ENOTSUP;
}

static int behavior_bt_init(const struct device *dev) { return 0; };
   49700:	2000      	movs	r0, #0
   49702:	4770      	bx	lr

00049704 <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   49704:	b082      	sub	sp, #8
   49706:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
   4970a:	2000      	movs	r0, #0
   4970c:	b002      	add	sp, #8
   4970e:	4770      	bx	lr

00049710 <on_keymap_binding_pressed>:
                                     struct zmk_behavior_binding_event event) {
   49710:	b082      	sub	sp, #8
   49712:	e88d 000c 	stmia.w	sp, {r2, r3}
    switch (binding->param1) {
   49716:	6843      	ldr	r3, [r0, #4]
   49718:	2b03      	cmp	r3, #3
   4971a:	d810      	bhi.n	4973e <on_keymap_binding_pressed+0x2e>
   4971c:	e8df f003 	tbb	[pc, r3]
   49720:	0b080502 	.word	0x0b080502
}
   49724:	b002      	add	sp, #8
        return zmk_ble_clear_bonds();
   49726:	f7e0 bbdd 	b.w	29ee4 <zmk_ble_clear_bonds>
}
   4972a:	b002      	add	sp, #8
        return zmk_ble_prof_next();
   4972c:	f7e0 bc22 	b.w	29f74 <zmk_ble_prof_next>
}
   49730:	b002      	add	sp, #8
        return zmk_ble_prof_prev();
   49732:	f7e0 bc2d 	b.w	29f90 <zmk_ble_prof_prev>
        return zmk_ble_prof_select(binding->param2);
   49736:	7a00      	ldrb	r0, [r0, #8]
}
   49738:	b002      	add	sp, #8
        return zmk_ble_prof_select(binding->param2);
   4973a:	f7e0 bbff 	b.w	29f3c <zmk_ble_prof_select>
}
   4973e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   49742:	b002      	add	sp, #8
   49744:	4770      	bx	lr

00049746 <raise_profile_changed_event_callback>:
    raise_profile_changed_event();
   49746:	f7e0 b993 	b.w	29a70 <raise_profile_changed_event>

0004974a <auth_cancel>:
static void auth_cancel(struct bt_conn *conn) {
   4974a:	b500      	push	{lr}
   4974c:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   4974e:	f003 fc15 	bl	4cf7c <bt_conn_get_dst>
   49752:	4669      	mov	r1, sp
   49754:	f7e0 f9ae 	bl	29ab4 <bt_addr_le_to_str.constprop.0.isra.0>
}
   49758:	b009      	add	sp, #36	; 0x24
   4975a:	f85d fb04 	ldr.w	pc, [sp], #4

0004975e <security_changed>:
static void security_changed(struct bt_conn *conn, bt_security_t level, enum bt_security_err err) {
   4975e:	b500      	push	{lr}
   49760:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   49762:	f003 fc0b 	bl	4cf7c <bt_conn_get_dst>
   49766:	4669      	mov	r1, sp
   49768:	f7e0 f9a4 	bl	29ab4 <bt_addr_le_to_str.constprop.0.isra.0>
}
   4976c:	b009      	add	sp, #36	; 0x24
   4976e:	f85d fb04 	ldr.w	pc, [sp], #4

00049772 <le_param_updated>:
                             uint16_t timeout) {
   49772:	b500      	push	{lr}
   49774:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   49776:	f003 fc01 	bl	4cf7c <bt_conn_get_dst>
   4977a:	4669      	mov	r1, sp
   4977c:	f7e0 f99a 	bl	29ab4 <bt_addr_le_to_str.constprop.0.isra.0>
}
   49780:	b009      	add	sp, #36	; 0x24
   49782:	f85d fb04 	ldr.w	pc, [sp], #4

00049786 <auth_pairing_accept>:
                                                const struct bt_conn_pairing_feat *const feat) {
   49786:	b500      	push	{lr}
   49788:	b089      	sub	sp, #36	; 0x24
    bt_conn_get_info(conn, &info);
   4978a:	4669      	mov	r1, sp
   4978c:	f7e6 fc5c 	bl	30048 <bt_conn_get_info>
    if (info.role == BT_CONN_ROLE_PERIPHERAL && !zmk_ble_active_profile_is_open()) {
   49790:	f89d 3001 	ldrb.w	r3, [sp, #1]
   49794:	2b01      	cmp	r3, #1
   49796:	d102      	bne.n	4979e <auth_pairing_accept+0x18>
   49798:	f7e0 fa56 	bl	29c48 <zmk_ble_active_profile_is_open>
   4979c:	b118      	cbz	r0, 497a6 <auth_pairing_accept+0x20>
    return BT_SECURITY_ERR_SUCCESS;
   4979e:	2000      	movs	r0, #0
};
   497a0:	b009      	add	sp, #36	; 0x24
   497a2:	f85d fb04 	ldr.w	pc, [sp], #4
        return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
   497a6:	2006      	movs	r0, #6
   497a8:	e7fa      	b.n	497a0 <auth_pairing_accept+0x1a>

000497aa <update_advertising_callback>:
static void update_advertising_callback(struct k_work *work) { update_advertising(); }
   497aa:	f7e0 bab9 	b.w	29d20 <update_advertising>

000497ae <input_ccc_changed>:
}
   497ae:	4770      	bx	lr

000497b0 <write_ctrl_point>:
                                const void *buf, uint16_t len, uint16_t offset, uint8_t flags) {
   497b0:	b538      	push	{r3, r4, r5, lr}
   497b2:	460c      	mov	r4, r1
   497b4:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    uint8_t *value = attr->user_data;
   497b8:	68e5      	ldr	r5, [r4, #12]
    if (offset + len > sizeof(ctrl_point)) {
   497ba:	461c      	mov	r4, r3
   497bc:	18c3      	adds	r3, r0, r3
   497be:	2b01      	cmp	r3, #1
                                const void *buf, uint16_t len, uint16_t offset, uint8_t flags) {
   497c0:	4611      	mov	r1, r2
    if (offset + len > sizeof(ctrl_point)) {
   497c2:	dc05      	bgt.n	497d0 <write_ctrl_point+0x20>
    memcpy(value + offset, buf, len);
   497c4:	4622      	mov	r2, r4
   497c6:	4428      	add	r0, r5
   497c8:	f002 facd 	bl	4bd66 <memcpy>
}
   497cc:	4620      	mov	r0, r4
   497ce:	bd38      	pop	{r3, r4, r5, pc}
        return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   497d0:	f06f 0406 	mvn.w	r4, #6
   497d4:	e7fa      	b.n	497cc <write_ctrl_point+0x1c>

000497d6 <read_hids_consumer_input_report>:
                                               uint16_t len, uint16_t offset) {
   497d6:	b5f0      	push	{r4, r5, r6, r7, lr}
   497d8:	b085      	sub	sp, #20
   497da:	461f      	mov	r7, r3
   497dc:	4604      	mov	r4, r0
   497de:	460d      	mov	r5, r1
   497e0:	4616      	mov	r6, r2
    struct zmk_hid_consumer_report_body *report_body = &zmk_hid_get_consumer_report()->body;
   497e2:	f7df fd39 	bl	29258 <zmk_hid_get_consumer_report>
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
   497e6:	230c      	movs	r3, #12
   497e8:	9302      	str	r3, [sp, #8]
    struct zmk_hid_consumer_report_body *report_body = &zmk_hid_get_consumer_report()->body;
   497ea:	3001      	adds	r0, #1
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
   497ec:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   497f0:	9001      	str	r0, [sp, #4]
   497f2:	9300      	str	r3, [sp, #0]
   497f4:	4632      	mov	r2, r6
   497f6:	463b      	mov	r3, r7
   497f8:	4629      	mov	r1, r5
   497fa:	4620      	mov	r0, r4
   497fc:	f004 fed1 	bl	4e5a2 <bt_gatt_attr_read>
}
   49800:	b005      	add	sp, #20
   49802:	bdf0      	pop	{r4, r5, r6, r7, pc}

00049804 <read_hids_report_ref>:
                                    void *buf, uint16_t len, uint16_t offset) {
   49804:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   49806:	2402      	movs	r4, #2
   49808:	9402      	str	r4, [sp, #8]
   4980a:	68cc      	ldr	r4, [r1, #12]
   4980c:	9401      	str	r4, [sp, #4]
   4980e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   49812:	9400      	str	r4, [sp, #0]
   49814:	f004 fec5 	bl	4e5a2 <bt_gatt_attr_read>
}
   49818:	b004      	add	sp, #16
   4981a:	bd10      	pop	{r4, pc}

0004981c <read_hids_info>:
                              uint16_t len, uint16_t offset) {
   4981c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   4981e:	2404      	movs	r4, #4
   49820:	9402      	str	r4, [sp, #8]
   49822:	68cc      	ldr	r4, [r1, #12]
   49824:	9401      	str	r4, [sp, #4]
   49826:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   4982a:	9400      	str	r4, [sp, #0]
   4982c:	f004 feb9 	bl	4e5a2 <bt_gatt_attr_read>
}
   49830:	b004      	add	sp, #16
   49832:	bd10      	pop	{r4, pc}

00049834 <read_hids_input_report>:
                                      void *buf, uint16_t len, uint16_t offset) {
   49834:	b5f0      	push	{r4, r5, r6, r7, lr}
   49836:	b085      	sub	sp, #20
   49838:	461f      	mov	r7, r3
   4983a:	4604      	mov	r4, r0
   4983c:	460d      	mov	r5, r1
   4983e:	4616      	mov	r6, r2
    struct zmk_hid_keyboard_report_body *report_body = &zmk_hid_get_keyboard_report()->body;
   49840:	f7df fd06 	bl	29250 <zmk_hid_get_keyboard_report>
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
   49844:	2308      	movs	r3, #8
   49846:	9302      	str	r3, [sp, #8]
    struct zmk_hid_keyboard_report_body *report_body = &zmk_hid_get_keyboard_report()->body;
   49848:	3001      	adds	r0, #1
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
   4984a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   4984e:	9001      	str	r0, [sp, #4]
   49850:	9300      	str	r3, [sp, #0]
   49852:	4632      	mov	r2, r6
   49854:	463b      	mov	r3, r7
   49856:	4629      	mov	r1, r5
   49858:	4620      	mov	r0, r4
   4985a:	f004 fea2 	bl	4e5a2 <bt_gatt_attr_read>
}
   4985e:	b005      	add	sp, #20
   49860:	bdf0      	pop	{r4, r5, r6, r7, pc}

00049862 <destination_connection>:
struct bt_conn *destination_connection() {
   49862:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bt_addr_le_t *addr = zmk_ble_active_profile_addr();
   49864:	f7e0 fba2 	bl	29fac <zmk_ble_active_profile_addr>
    if (!bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   49868:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   4986a:	2207      	movs	r2, #7
   4986c:	4669      	mov	r1, sp
   4986e:	9400      	str	r4, [sp, #0]
    bt_addr_le_t *addr = zmk_ble_active_profile_addr();
   49870:	4605      	mov	r5, r0
    if (!bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   49872:	f8cd 4003 	str.w	r4, [sp, #3]
   49876:	f002 fa66 	bl	4bd46 <memcmp>
   4987a:	b120      	cbz	r0, 49886 <destination_connection+0x24>
    } else if ((conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr)) == NULL) {
   4987c:	4629      	mov	r1, r5
   4987e:	4620      	mov	r0, r4
   49880:	f7e6 fb90 	bl	2ffa4 <bt_conn_lookup_addr_le>
   49884:	b900      	cbnz	r0, 49888 <destination_connection+0x26>
struct bt_conn *destination_connection() {
   49886:	2000      	movs	r0, #0
}
   49888:	b003      	add	sp, #12
   4988a:	bd30      	pop	{r4, r5, pc}

0004988c <zmk_battery_work>:
    int rc = zmk_battery_update(battery);
   4988c:	f7e0 bc8a 	b.w	2a1a4 <zmk_battery_update.constprop.0>

00049890 <release_peripheral_slot_for_conn>:
int release_peripheral_slot_for_conn(struct bt_conn *conn) {
   49890:	b508      	push	{r3, lr}
    int idx = peripheral_slot_index_for_conn(conn);
   49892:	f7e0 fdb3 	bl	2a3fc <peripheral_slot_index_for_conn>
    if (idx < 0) {
   49896:	2800      	cmp	r0, #0
   49898:	db03      	blt.n	498a2 <release_peripheral_slot_for_conn+0x12>
}
   4989a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return release_peripheral_slot(idx);
   4989e:	f7e0 bf03 	b.w	2a6a8 <release_peripheral_slot>
}
   498a2:	bd08      	pop	{r3, pc}

000498a4 <split_central_disconnected>:
static void split_central_disconnected(struct bt_conn *conn, uint8_t reason) {
   498a4:	b510      	push	{r4, lr}
   498a6:	b088      	sub	sp, #32
   498a8:	4604      	mov	r4, r0
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   498aa:	f003 fb67 	bl	4cf7c <bt_conn_get_dst>
   498ae:	4669      	mov	r1, sp
   498b0:	f7e0 fd12 	bl	2a2d8 <bt_addr_le_to_str.constprop.0.isra.0>
    err = release_peripheral_slot_for_conn(conn);
   498b4:	4620      	mov	r0, r4
   498b6:	f7ff ffeb 	bl	49890 <release_peripheral_slot_for_conn>
    if (err < 0) {
   498ba:	2800      	cmp	r0, #0
   498bc:	db01      	blt.n	498c2 <split_central_disconnected+0x1e>
    start_scan();
   498be:	f7e0 fcb1 	bl	2a224 <start_scan>
}
   498c2:	b008      	add	sp, #32
   498c4:	bd10      	pop	{r4, pc}

000498c6 <split_central_connected>:
static void split_central_connected(struct bt_conn *conn, uint8_t conn_err) {
   498c6:	b530      	push	{r4, r5, lr}
   498c8:	b091      	sub	sp, #68	; 0x44
   498ca:	4604      	mov	r4, r0
   498cc:	460d      	mov	r5, r1
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   498ce:	f003 fb55 	bl	4cf7c <bt_conn_get_dst>
   498d2:	4669      	mov	r1, sp
   498d4:	f7e0 fd00 	bl	2a2d8 <bt_addr_le_to_str.constprop.0.isra.0>
    bt_conn_get_info(conn, &info);
   498d8:	a908      	add	r1, sp, #32
   498da:	4620      	mov	r0, r4
   498dc:	f7e6 fbb4 	bl	30048 <bt_conn_get_info>
    if (info.role != BT_CONN_ROLE_CENTRAL) {
   498e0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   498e4:	b92b      	cbnz	r3, 498f2 <split_central_connected+0x2c>
        release_peripheral_slot_for_conn(conn);
   498e6:	4620      	mov	r0, r4
    if (conn_err) {
   498e8:	b12d      	cbz	r5, 498f6 <split_central_connected+0x30>
        release_peripheral_slot_for_conn(conn);
   498ea:	f7ff ffd1 	bl	49890 <release_peripheral_slot_for_conn>
        start_scan();
   498ee:	f7e0 fc99 	bl	2a224 <start_scan>
}
   498f2:	b011      	add	sp, #68	; 0x44
   498f4:	bd30      	pop	{r4, r5, pc}
    confirm_peripheral_slot_conn(conn);
   498f6:	f7e0 ffd1 	bl	2a89c <confirm_peripheral_slot_conn>
    split_central_process_connection(conn);
   498fa:	4620      	mov	r0, r4
   498fc:	f7e0 fd96 	bl	2a42c <split_central_process_connection>
   49900:	e7f7      	b.n	498f2 <split_central_connected+0x2c>

00049902 <zmk_split_bt_invoke_behavior>:
                                 struct zmk_behavior_binding_event event, bool state) {
   49902:	b082      	sub	sp, #8
   49904:	b530      	push	{r4, r5, lr}
   49906:	b08d      	sub	sp, #52	; 0x34
   49908:	4604      	mov	r4, r0
   4990a:	a810      	add	r0, sp, #64	; 0x40
   4990c:	e880 000c 	stmia.w	r0, {r2, r3}
    struct zmk_split_run_behavior_payload payload = {.data = {
   49910:	2300      	movs	r3, #0
   49912:	f8cd 3012 	str.w	r3, [sp, #18]
   49916:	f8cd 3016 	str.w	r3, [sp, #22]
   4991a:	f88d 301a 	strb.w	r3, [sp, #26]
   4991e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   49920:	f88d 3008 	strb.w	r3, [sp, #8]
   49924:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   49928:	f88d 3009 	strb.w	r3, [sp, #9]
   4992c:	684b      	ldr	r3, [r1, #4]
   4992e:	f8cd 300a 	str.w	r3, [sp, #10]
    if (strlcpy(payload.behavior_dev, binding->behavior_dev, payload_dev_size) >=
   49932:	2209      	movs	r2, #9
    struct zmk_split_run_behavior_payload payload = {.data = {
   49934:	688b      	ldr	r3, [r1, #8]
    if (strlcpy(payload.behavior_dev, binding->behavior_dev, payload_dev_size) >=
   49936:	6809      	ldr	r1, [r1, #0]
    struct zmk_split_run_behavior_payload payload = {.data = {
   49938:	f8cd 300e 	str.w	r3, [sp, #14]
    if (strlcpy(payload.behavior_dev, binding->behavior_dev, payload_dev_size) >=
   4993c:	f10d 0012 	add.w	r0, sp, #18
   49940:	f7ff fc13 	bl	4916a <strlcpy>
    struct zmk_split_run_behavior_payload_wrapper wrapper = {.source = source, .payload = payload};
   49944:	ad06      	add	r5, sp, #24
   49946:	f88d 401c 	strb.w	r4, [sp, #28]
   4994a:	aa02      	add	r2, sp, #8
   4994c:	f10d 031d 	add.w	r3, sp, #29
   49950:	4614      	mov	r4, r2
   49952:	cc03      	ldmia	r4!, {r0, r1}
   49954:	42ac      	cmp	r4, r5
   49956:	6018      	str	r0, [r3, #0]
   49958:	6059      	str	r1, [r3, #4]
   4995a:	4622      	mov	r2, r4
   4995c:	f103 0308 	add.w	r3, r3, #8
   49960:	d1f6      	bne.n	49950 <zmk_split_bt_invoke_behavior+0x4e>
   49962:	8821      	ldrh	r1, [r4, #0]
   49964:	78a2      	ldrb	r2, [r4, #2]
   49966:	709a      	strb	r2, [r3, #2]
   49968:	8019      	strh	r1, [r3, #0]
    return split_bt_invoke_behavior_payload(wrapper);
   4996a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   4996c:	9300      	str	r3, [sp, #0]
   4996e:	ab07      	add	r3, sp, #28
   49970:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   49972:	f7e0 fc81 	bl	2a278 <split_bt_invoke_behavior_payload>
}
   49976:	b00d      	add	sp, #52	; 0x34
   49978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   4997c:	b002      	add	sp, #8
   4997e:	4770      	bx	lr

00049980 <raise_usb_status_changed_event>:
static void raise_usb_status_changed_event(struct k_work *_work) {
   49980:	b508      	push	{r3, lr}
    ZMK_EVENT_RAISE(new_zmk_usb_conn_state_changed(
   49982:	f7e0 ffb5 	bl	2a8f0 <zmk_usb_get_conn_state>
   49986:	f7df fb1b 	bl	28fc0 <new_zmk_usb_conn_state_changed>
}
   4998a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ZMK_EVENT_RAISE(new_zmk_usb_conn_state_changed(
   4998e:	f7ff bc02 	b.w	49196 <zmk_event_manager_raise>

00049992 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   49992:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   49994:	2364      	movs	r3, #100	; 0x64
{
   49996:	4605      	mov	r5, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   49998:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   4999a:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   4999c:	270a      	movs	r7, #10
	while (buflen > 0 && divisor > 0) {
   4999e:	b969      	cbnz	r1, 499bc <u8_to_dec+0x2a>
	if (buflen) {
		*buf = '\0';
	}

	return num_digits;
}
   499a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   499a2:	429a      	cmp	r2, r3
   499a4:	fbb2 f4f3 	udiv	r4, r2, r3
   499a8:	d20c      	bcs.n	499c4 <u8_to_dec+0x32>
   499aa:	2b01      	cmp	r3, #1
   499ac:	d00a      	beq.n	499c4 <u8_to_dec+0x32>
   499ae:	b948      	cbnz	r0, 499c4 <u8_to_dec+0x32>
		value -= digit * divisor;
   499b0:	fb03 2214 	mls	r2, r3, r4, r2
   499b4:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   499b6:	240a      	movs	r4, #10
   499b8:	fbb3 f3f4 	udiv	r3, r3, r4
	while (buflen > 0 && divisor > 0) {
   499bc:	3e01      	subs	r6, #1
   499be:	d1f0      	bne.n	499a2 <u8_to_dec+0x10>
		*buf = '\0';
   499c0:	702e      	strb	r6, [r5, #0]
	return num_digits;
   499c2:	e7ed      	b.n	499a0 <u8_to_dec+0xe>
			*buf = (char)digit + '0';
   499c4:	3430      	adds	r4, #48	; 0x30
   499c6:	f805 4b01 	strb.w	r4, [r5], #1
			buflen--;
   499ca:	fbb2 f4f3 	udiv	r4, r2, r3
   499ce:	3901      	subs	r1, #1
   499d0:	fb03 2214 	mls	r2, r3, r4, r2
			num_digits++;
   499d4:	3001      	adds	r0, #1
		divisor /= 10;
   499d6:	fbb3 f3f7 	udiv	r3, r3, r7
			buflen--;
   499da:	b2c9      	uxtb	r1, r1
			num_digits++;
   499dc:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   499de:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   499e0:	b2db      	uxtb	r3, r3
   499e2:	e7dc      	b.n	4999e <u8_to_dec+0xc>

000499e4 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   499e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   499e8:	b2db      	uxtb	r3, r3
   499ea:	2b09      	cmp	r3, #9
   499ec:	d802      	bhi.n	499f4 <char2hex+0x10>
		*x = c - '0';
   499ee:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   499f0:	2000      	movs	r0, #0
   499f2:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   499f4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   499f8:	2b05      	cmp	r3, #5
   499fa:	d802      	bhi.n	49a02 <char2hex+0x1e>
		*x = c - 'a' + 10;
   499fc:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   499fe:	b2c3      	uxtb	r3, r0
   49a00:	e7f5      	b.n	499ee <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   49a02:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   49a06:	2b05      	cmp	r3, #5
   49a08:	d801      	bhi.n	49a0e <char2hex+0x2a>
		*x = c - 'A' + 10;
   49a0a:	3837      	subs	r0, #55	; 0x37
   49a0c:	e7f7      	b.n	499fe <char2hex+0x1a>
		return -EINVAL;
   49a0e:	f06f 0015 	mvn.w	r0, #21
}
   49a12:	4770      	bx	lr

00049a14 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   49a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   49a16:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   49a18:	f001 0001 	and.w	r0, r1, #1
   49a1c:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   49a20:	429e      	cmp	r6, r3
   49a22:	ea4f 0751 	mov.w	r7, r1, lsr #1
   49a26:	d903      	bls.n	49a30 <hex2bin+0x1c>
		return 0;
   49a28:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   49a2a:	4630      	mov	r0, r6
   49a2c:	b003      	add	sp, #12
   49a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   49a30:	b158      	cbz	r0, 49a4a <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   49a32:	7828      	ldrb	r0, [r5, #0]
   49a34:	f10d 0107 	add.w	r1, sp, #7
   49a38:	f7ff ffd4 	bl	499e4 <char2hex>
   49a3c:	2800      	cmp	r0, #0
   49a3e:	dbf3      	blt.n	49a28 <hex2bin+0x14>
		buf[0] = dec;
   49a40:	f89d 3007 	ldrb.w	r3, [sp, #7]
   49a44:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   49a48:	3501      	adds	r5, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   49a4a:	3501      	adds	r5, #1
   49a4c:	4417      	add	r7, r2
   49a4e:	42ba      	cmp	r2, r7
   49a50:	d0eb      	beq.n	49a2a <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   49a52:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   49a56:	f10d 0107 	add.w	r1, sp, #7
   49a5a:	f7ff ffc3 	bl	499e4 <char2hex>
   49a5e:	2800      	cmp	r0, #0
   49a60:	dbe2      	blt.n	49a28 <hex2bin+0x14>
		buf[i] = dec << 4;
   49a62:	f89d 4007 	ldrb.w	r4, [sp, #7]
   49a66:	0124      	lsls	r4, r4, #4
   49a68:	b2e4      	uxtb	r4, r4
   49a6a:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   49a6c:	f815 0b02 	ldrb.w	r0, [r5], #2
   49a70:	f7ff ffb8 	bl	499e4 <char2hex>
   49a74:	2800      	cmp	r0, #0
   49a76:	dbd7      	blt.n	49a28 <hex2bin+0x14>
		buf[i] += dec;
   49a78:	f89d 3007 	ldrb.w	r3, [sp, #7]
   49a7c:	441c      	add	r4, r3
   49a7e:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   49a82:	e7e4      	b.n	49a4e <hex2bin+0x3a>

00049a84 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   49a84:	4603      	mov	r3, r0
   49a86:	b140      	cbz	r0, 49a9a <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   49a88:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   49a8a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   49a8e:	2a02      	cmp	r2, #2
   49a90:	d006      	beq.n	49aa0 <sys_notify_validate+0x1c>
   49a92:	2a03      	cmp	r2, #3
   49a94:	d004      	beq.n	49aa0 <sys_notify_validate+0x1c>
   49a96:	2a01      	cmp	r2, #1
   49a98:	d005      	beq.n	49aa6 <sys_notify_validate+0x22>
   49a9a:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   49a9e:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   49aa0:	681a      	ldr	r2, [r3, #0]
   49aa2:	2a00      	cmp	r2, #0
   49aa4:	d0f9      	beq.n	49a9a <sys_notify_validate+0x16>
		notify->result = 0;
   49aa6:	2000      	movs	r0, #0
   49aa8:	6098      	str	r0, [r3, #8]
   49aaa:	4770      	bx	lr

00049aac <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   49aac:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   49aae:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   49ab2:	2a02      	cmp	r2, #2
{
   49ab4:	b510      	push	{r4, lr}
   49ab6:	4603      	mov	r3, r0
	notify->result = res;
   49ab8:	6081      	str	r1, [r0, #8]
	switch (method) {
   49aba:	f04f 0400 	mov.w	r4, #0
   49abe:	d007      	beq.n	49ad0 <sys_notify_finalize+0x24>
   49ac0:	2a03      	cmp	r2, #3
   49ac2:	d002      	beq.n	49aca <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   49ac4:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   49ac6:	2000      	movs	r0, #0
   49ac8:	e001      	b.n	49ace <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   49aca:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   49acc:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   49ace:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   49ad0:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   49ad2:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   49ad4:	2800      	cmp	r0, #0
   49ad6:	d0f6      	beq.n	49ac6 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   49ad8:	f7ff faf8 	bl	490cc <z_impl_k_poll_signal_raise>
   49adc:	e7f3      	b.n	49ac6 <sys_notify_finalize+0x1a>

00049ade <arch_printk_char_out>:
}
   49ade:	2000      	movs	r0, #0
   49ae0:	4770      	bx	lr

00049ae2 <str_out>:
{
   49ae2:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   49ae4:	688a      	ldr	r2, [r1, #8]
   49ae6:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   49ae8:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   49aea:	b114      	cbz	r4, 49af2 <str_out+0x10>
   49aec:	684b      	ldr	r3, [r1, #4]
   49aee:	4293      	cmp	r3, r2
   49af0:	dc01      	bgt.n	49af6 <str_out+0x14>
		ctx->count++;
   49af2:	608d      	str	r5, [r1, #8]
}
   49af4:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   49af6:	3b01      	subs	r3, #1
   49af8:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   49afa:	bf08      	it	eq
   49afc:	2200      	moveq	r2, #0
   49afe:	608d      	str	r5, [r1, #8]
   49b00:	bf0c      	ite	eq
   49b02:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   49b04:	54a0      	strbne	r0, [r4, r2]
   49b06:	e7f5      	b.n	49af4 <str_out+0x12>

00049b08 <printk>:
{
   49b08:	b40f      	push	{r0, r1, r2, r3}
   49b0a:	b507      	push	{r0, r1, r2, lr}
   49b0c:	a904      	add	r1, sp, #16
   49b0e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   49b12:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   49b14:	f7e0 ff74 	bl	2aa00 <vprintk>
}
   49b18:	b003      	add	sp, #12
   49b1a:	f85d eb04 	ldr.w	lr, [sp], #4
   49b1e:	b004      	add	sp, #16
   49b20:	4770      	bx	lr

00049b22 <snprintk>:
{
   49b22:	b40c      	push	{r2, r3}
   49b24:	b507      	push	{r0, r1, r2, lr}
   49b26:	ab04      	add	r3, sp, #16
   49b28:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   49b2c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   49b2e:	f7e0 ff75 	bl	2aa1c <vsnprintk>
}
   49b32:	b003      	add	sp, #12
   49b34:	f85d eb04 	ldr.w	lr, [sp], #4
   49b38:	b002      	add	sp, #8
   49b3a:	4770      	bx	lr

00049b3c <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   49b3c:	b510      	push	{r4, lr}
	return list->head;
   49b3e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   49b40:	2200      	movs	r2, #0
   49b42:	b90b      	cbnz	r3, 49b48 <sys_slist_find_and_remove+0xc>
   49b44:	4618      	mov	r0, r3
   49b46:	e00b      	b.n	49b60 <sys_slist_find_and_remove+0x24>
   49b48:	428b      	cmp	r3, r1
   49b4a:	d10f      	bne.n	49b6c <sys_slist_find_and_remove+0x30>
	return node->next;
   49b4c:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   49b4e:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   49b50:	b93a      	cbnz	r2, 49b62 <sys_slist_find_and_remove+0x26>
   49b52:	42a1      	cmp	r1, r4
	list->head = node;
   49b54:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   49b56:	d100      	bne.n	49b5a <sys_slist_find_and_remove+0x1e>
	list->tail = node;
   49b58:	6043      	str	r3, [r0, #4]
	parent->next = child;
   49b5a:	2300      	movs	r3, #0
   49b5c:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   49b5e:	2001      	movs	r0, #1
   49b60:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   49b62:	42a1      	cmp	r1, r4
	parent->next = child;
   49b64:	6013      	str	r3, [r2, #0]
	list->tail = node;
   49b66:	bf08      	it	eq
   49b68:	6042      	streq	r2, [r0, #4]
}
   49b6a:	e7f6      	b.n	49b5a <sys_slist_find_and_remove+0x1e>
	return node->next;
   49b6c:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   49b6e:	681b      	ldr	r3, [r3, #0]
   49b70:	e7e7      	b.n	49b42 <sys_slist_find_and_remove+0x6>

00049b72 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   49b72:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   49b74:	f013 0307 	ands.w	r3, r3, #7
   49b78:	d105      	bne.n	49b86 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   49b7a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   49b7c:	2b00      	cmp	r3, #0
   49b7e:	bf0c      	ite	eq
   49b80:	2000      	moveq	r0, #0
   49b82:	2003      	movne	r0, #3
   49b84:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   49b86:	2b02      	cmp	r3, #2
   49b88:	d105      	bne.n	49b96 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   49b8a:	8b40      	ldrh	r0, [r0, #26]
   49b8c:	fab0 f080 	clz	r0, r0
   49b90:	0940      	lsrs	r0, r0, #5
   49b92:	0080      	lsls	r0, r0, #2
   49b94:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   49b96:	2b01      	cmp	r3, #1
   49b98:	d105      	bne.n	49ba6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   49b9a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   49b9c:	2b00      	cmp	r3, #0
   49b9e:	bf0c      	ite	eq
   49ba0:	2000      	moveq	r0, #0
   49ba2:	2005      	movne	r0, #5
   49ba4:	4770      	bx	lr
	int evt = EVT_NOP;
   49ba6:	2000      	movs	r0, #0
}
   49ba8:	4770      	bx	lr

00049baa <validate_args>:
{
   49baa:	b510      	push	{r4, lr}
   49bac:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   49bae:	b100      	cbz	r0, 49bb2 <validate_args+0x8>
   49bb0:	b911      	cbnz	r1, 49bb8 <validate_args+0xe>
		return -EINVAL;
   49bb2:	f06f 0015 	mvn.w	r0, #21
}
   49bb6:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   49bb8:	1d08      	adds	r0, r1, #4
   49bba:	f7ff ff63 	bl	49a84 <sys_notify_validate>
	if ((rv == 0)
   49bbe:	2800      	cmp	r0, #0
   49bc0:	d1f9      	bne.n	49bb6 <validate_args+0xc>
	    && ((cli->notify.flags
   49bc2:	68a3      	ldr	r3, [r4, #8]
   49bc4:	2b03      	cmp	r3, #3
   49bc6:	d9f6      	bls.n	49bb6 <validate_args+0xc>
   49bc8:	e7f3      	b.n	49bb2 <validate_args+0x8>

00049bca <notify_one>:
{
   49bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   49bce:	460d      	mov	r5, r1
   49bd0:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   49bd2:	4619      	mov	r1, r3
   49bd4:	1d28      	adds	r0, r5, #4
{
   49bd6:	4690      	mov	r8, r2
   49bd8:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   49bda:	f7ff ff67 	bl	49aac <sys_notify_finalize>
	if (cb) {
   49bde:	4604      	mov	r4, r0
   49be0:	b138      	cbz	r0, 49bf2 <notify_one+0x28>
		cb(mgr, cli, state, res);
   49be2:	4633      	mov	r3, r6
   49be4:	4642      	mov	r2, r8
   49be6:	4629      	mov	r1, r5
   49be8:	4638      	mov	r0, r7
   49bea:	46a4      	mov	ip, r4
}
   49bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   49bf0:	4760      	bx	ip
}
   49bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00049bf6 <transition_complete>:
{
   49bf6:	b410      	push	{r4}
	__asm__ volatile(
   49bf8:	f04f 0420 	mov.w	r4, #32
   49bfc:	f3ef 8211 	mrs	r2, BASEPRI
   49c00:	f384 8812 	msr	BASEPRI_MAX, r4
   49c04:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   49c08:	6141      	str	r1, [r0, #20]
}
   49c0a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   49c0c:	2101      	movs	r1, #1
   49c0e:	f7e0 bf19 	b.w	2aa44 <process_event>

00049c12 <onoff_manager_init>:
{
   49c12:	b538      	push	{r3, r4, r5, lr}
   49c14:	460c      	mov	r4, r1
	if ((mgr == NULL)
   49c16:	4605      	mov	r5, r0
   49c18:	b158      	cbz	r0, 49c32 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   49c1a:	b151      	cbz	r1, 49c32 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   49c1c:	680b      	ldr	r3, [r1, #0]
   49c1e:	b143      	cbz	r3, 49c32 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   49c20:	684b      	ldr	r3, [r1, #4]
   49c22:	b133      	cbz	r3, 49c32 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   49c24:	221c      	movs	r2, #28
   49c26:	2100      	movs	r1, #0
   49c28:	f002 f8a8 	bl	4bd7c <memset>
   49c2c:	612c      	str	r4, [r5, #16]
	return 0;
   49c2e:	2000      	movs	r0, #0
}
   49c30:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   49c32:	f06f 0015 	mvn.w	r0, #21
   49c36:	e7fb      	b.n	49c30 <onoff_manager_init+0x1e>

00049c38 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   49c38:	b570      	push	{r4, r5, r6, lr}
   49c3a:	4605      	mov	r5, r0
   49c3c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   49c3e:	f7ff ffb4 	bl	49baa <validate_args>

	if (rv < 0) {
   49c42:	1e04      	subs	r4, r0, #0
   49c44:	db15      	blt.n	49c72 <onoff_request+0x3a>
   49c46:	f04f 0320 	mov.w	r3, #32
   49c4a:	f3ef 8211 	mrs	r2, BASEPRI
   49c4e:	f383 8812 	msr	BASEPRI_MAX, r3
   49c52:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   49c56:	8b6b      	ldrh	r3, [r5, #26]
   49c58:	8b2c      	ldrh	r4, [r5, #24]
   49c5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   49c5e:	428b      	cmp	r3, r1
   49c60:	f004 0407 	and.w	r4, r4, #7
   49c64:	d107      	bne.n	49c76 <onoff_request+0x3e>
	__asm__ volatile(
   49c66:	f382 8811 	msr	BASEPRI, r2
   49c6a:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   49c6e:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   49c72:	4620      	mov	r0, r4
   49c74:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   49c76:	2c02      	cmp	r4, #2
   49c78:	d10c      	bne.n	49c94 <onoff_request+0x5c>
		mgr->refs += 1U;
   49c7a:	3301      	adds	r3, #1
   49c7c:	836b      	strh	r3, [r5, #26]
   49c7e:	f382 8811 	msr	BASEPRI, r2
   49c82:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   49c86:	2300      	movs	r3, #0
   49c88:	4622      	mov	r2, r4
   49c8a:	4631      	mov	r1, r6
   49c8c:	4628      	mov	r0, r5
   49c8e:	f7ff ff9c 	bl	49bca <notify_one>
   49c92:	e7ee      	b.n	49c72 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   49c94:	2c06      	cmp	r4, #6
   49c96:	d814      	bhi.n	49cc2 <onoff_request+0x8a>
   49c98:	e8df f004 	tbb	[pc, r4]
   49c9c:	13131304 	.word	0x13131304
   49ca0:	1a04      	.short	0x1a04
   49ca2:	04          	.byte	0x04
   49ca3:	00          	.byte	0x00
	parent->next = child;
   49ca4:	2300      	movs	r3, #0
   49ca6:	6033      	str	r3, [r6, #0]
	return list->tail;
   49ca8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   49caa:	b93b      	cbnz	r3, 49cbc <onoff_request+0x84>
	list->head = node;
   49cac:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   49cb0:	b9ac      	cbnz	r4, 49cde <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   49cb2:	2102      	movs	r1, #2
   49cb4:	4628      	mov	r0, r5
   49cb6:	f7e0 fec5 	bl	2aa44 <process_event>
   49cba:	e7da      	b.n	49c72 <onoff_request+0x3a>
	parent->next = child;
   49cbc:	601e      	str	r6, [r3, #0]
	list->tail = node;
   49cbe:	606e      	str	r6, [r5, #4]
}
   49cc0:	e7f6      	b.n	49cb0 <onoff_request+0x78>
   49cc2:	f382 8811 	msr	BASEPRI, r2
   49cc6:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   49cca:	f06f 0404 	mvn.w	r4, #4
   49cce:	e7d0      	b.n	49c72 <onoff_request+0x3a>
   49cd0:	f382 8811 	msr	BASEPRI, r2
   49cd4:	f3bf 8f6f 	isb	sy
   49cd8:	f06f 0485 	mvn.w	r4, #133	; 0x85
   49cdc:	e7c9      	b.n	49c72 <onoff_request+0x3a>
   49cde:	f382 8811 	msr	BASEPRI, r2
   49ce2:	f3bf 8f6f 	isb	sy
		if (notify) {
   49ce6:	e7c4      	b.n	49c72 <onoff_request+0x3a>

00049ce8 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   49ce8:	b510      	push	{r4, lr}
	__asm__ volatile(
   49cea:	f04f 0320 	mov.w	r3, #32
   49cee:	f3ef 8211 	mrs	r2, BASEPRI
   49cf2:	f383 8812 	msr	BASEPRI_MAX, r3
   49cf6:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   49cfa:	8b04      	ldrh	r4, [r0, #24]
   49cfc:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   49d00:	2c02      	cmp	r4, #2
   49d02:	d00a      	beq.n	49d1a <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   49d04:	2c01      	cmp	r4, #1
   49d06:	bf0c      	ite	eq
   49d08:	f06f 0004 	mvneq.w	r0, #4
   49d0c:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   49d10:	f382 8811 	msr	BASEPRI, r2
   49d14:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   49d18:	e008      	b.n	49d2c <onoff_release+0x44>
	mgr->refs -= 1U;
   49d1a:	8b43      	ldrh	r3, [r0, #26]
   49d1c:	3b01      	subs	r3, #1
   49d1e:	b29b      	uxth	r3, r3
   49d20:	8343      	strh	r3, [r0, #26]
	if (stop) {
   49d22:	b923      	cbnz	r3, 49d2e <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   49d24:	4621      	mov	r1, r4
   49d26:	f7e0 fe8d 	bl	2aa44 <process_event>
	int rv = state;
   49d2a:	4620      	mov	r0, r4
}
   49d2c:	bd10      	pop	{r4, pc}
	int rv = state;
   49d2e:	4620      	mov	r0, r4
   49d30:	e7ee      	b.n	49d10 <onoff_release+0x28>

00049d32 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   49d32:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   49d34:	b1b0      	cbz	r0, 49d64 <onoff_cancel+0x32>
   49d36:	b1a9      	cbz	r1, 49d64 <onoff_cancel+0x32>
	__asm__ volatile(
   49d38:	f04f 0220 	mov.w	r2, #32
   49d3c:	f3ef 8511 	mrs	r5, BASEPRI
   49d40:	f382 8812 	msr	BASEPRI_MAX, r2
   49d44:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   49d48:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   49d4a:	f7ff fef7 	bl	49b3c <sys_slist_find_and_remove>
   49d4e:	b130      	cbz	r0, 49d5e <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   49d50:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   49d54:	f385 8811 	msr	BASEPRI, r5
   49d58:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   49d5c:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   49d5e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   49d62:	e7f7      	b.n	49d54 <onoff_cancel+0x22>
		return -EINVAL;
   49d64:	f06f 0015 	mvn.w	r0, #21
   49d68:	e7f8      	b.n	49d5c <onoff_cancel+0x2a>

00049d6a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   49d6a:	4604      	mov	r4, r0
   49d6c:	b508      	push	{r3, lr}
   49d6e:	4608      	mov	r0, r1
   49d70:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   49d72:	461a      	mov	r2, r3
   49d74:	47a0      	blx	r4
	return z_impl_z_current_get();
   49d76:	f7fe fee9 	bl	48b4c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   49d7a:	f7e3 f99b 	bl	2d0b4 <z_impl_k_thread_abort>

00049d7e <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   49d7e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   49d82:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   49d84:	0840      	lsrs	r0, r0, #1
   49d86:	4770      	bx	lr

00049d88 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   49d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   49d8a:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   49d8c:	f7ff fff7 	bl	49d7e <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   49d90:	fab0 f080 	clz	r0, r0
   49d94:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   49d98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   49d9c:	00ca      	lsls	r2, r1, #3
   49d9e:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   49da2:	1d17      	adds	r7, r2, #4
{
   49da4:	460c      	mov	r4, r1
   49da6:	3206      	adds	r2, #6
   49da8:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   49daa:	b956      	cbnz	r6, 49dc2 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   49dac:	2101      	movs	r1, #1
   49dae:	fa01 f000 	lsl.w	r0, r1, r0
   49db2:	68d9      	ldr	r1, [r3, #12]
   49db4:	4301      	orrs	r1, r0
   49db6:	60d9      	str	r1, [r3, #12]
		b->next = c;
   49db8:	f8cc 4010 	str.w	r4, [ip, #16]
   49dbc:	53dd      	strh	r5, [r3, r7]
   49dbe:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   49dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   49dc2:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   49dc4:	3104      	adds	r1, #4
   49dc6:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   49dc8:	53d8      	strh	r0, [r3, r7]
   49dca:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   49dce:	529e      	strh	r6, [r3, r2]
   49dd0:	80c5      	strh	r5, [r0, #6]
   49dd2:	525d      	strh	r5, [r3, r1]
   49dd4:	e7f4      	b.n	49dc0 <free_list_add+0x38>

00049dd6 <free_list_remove_bidx>:
{
   49dd6:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   49dd8:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   49ddc:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   49dde:	4299      	cmp	r1, r3
   49de0:	f102 0104 	add.w	r1, r2, #4
   49de4:	d10a      	bne.n	49dfc <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   49de6:	2301      	movs	r3, #1
   49de8:	fa03 f202 	lsl.w	r2, r3, r2
   49dec:	68c3      	ldr	r3, [r0, #12]
   49dee:	ea23 0302 	bic.w	r3, r3, r2
   49df2:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   49df4:	2300      	movs	r3, #0
   49df6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   49dfa:	bd10      	pop	{r4, pc}
   49dfc:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   49dfe:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   49e02:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   49e06:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   49e0a:	80cb      	strh	r3, [r1, #6]
   49e0c:	8082      	strh	r2, [r0, #4]
}
   49e0e:	e7f4      	b.n	49dfa <free_list_remove_bidx+0x24>

00049e10 <free_list_remove>:
{
   49e10:	b508      	push	{r3, lr}
   49e12:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   49e14:	f7ff ffb3 	bl	49d7e <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   49e18:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   49e1c:	f1c2 021f 	rsb	r2, r2, #31
   49e20:	4618      	mov	r0, r3
}
   49e22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   49e26:	f7ff bfd6 	b.w	49dd6 <free_list_remove_bidx>

00049e2a <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   49e2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   49e2e:	fab1 f581 	clz	r5, r1
   49e32:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   49e36:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   49e3a:	4603      	mov	r3, r0
	if (b->next) {
   49e3c:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   49e40:	460e      	mov	r6, r1
	if (b->next) {
   49e42:	b1c2      	cbz	r2, 49e76 <alloc_chunk+0x4c>
   49e44:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   49e46:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   49e4a:	4618      	mov	r0, r3
   49e4c:	4621      	mov	r1, r4
   49e4e:	f7ff ff96 	bl	49d7e <chunk_size>
   49e52:	42b0      	cmp	r0, r6
   49e54:	d306      	bcc.n	49e64 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   49e56:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   49e58:	4618      	mov	r0, r3
   49e5a:	f7ff ffbc 	bl	49dd6 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   49e5e:	4620      	mov	r0, r4
   49e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   49e64:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   49e68:	3f01      	subs	r7, #1
   49e6a:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   49e6c:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   49e70:	d001      	beq.n	49e76 <alloc_chunk+0x4c>
   49e72:	4282      	cmp	r2, r0
   49e74:	d1e7      	bne.n	49e46 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   49e76:	f1c5 0220 	rsb	r2, r5, #32
   49e7a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   49e7e:	4094      	lsls	r4, r2
   49e80:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   49e82:	4014      	ands	r4, r2
   49e84:	d0eb      	beq.n	49e5e <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   49e86:	fa94 f2a4 	rbit	r2, r4
   49e8a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   49e8e:	1d11      	adds	r1, r2, #4
   49e90:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   49e94:	4621      	mov	r1, r4
   49e96:	e7df      	b.n	49e58 <alloc_chunk+0x2e>

00049e98 <merge_chunks>:
{
   49e98:	b538      	push	{r3, r4, r5, lr}
   49e9a:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   49e9c:	f7ff ff6f 	bl	49d7e <chunk_size>
{
   49ea0:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   49ea2:	4604      	mov	r4, r0
   49ea4:	4611      	mov	r1, r2
   49ea6:	4618      	mov	r0, r3
   49ea8:	f7ff ff69 	bl	49d7e <chunk_size>
		((uint16_t *)cmem)[f] = val;
   49eac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   49eb0:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   49eb2:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   49eb4:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   49eb6:	4618      	mov	r0, r3
   49eb8:	f7ff ff61 	bl	49d7e <chunk_size>
	void *cmem = &buf[c];
   49ebc:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   49ebe:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   49ec2:	bd38      	pop	{r3, r4, r5, pc}

00049ec4 <split_chunks>:
{
   49ec4:	b538      	push	{r3, r4, r5, lr}
   49ec6:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   49ec8:	f7ff ff59 	bl	49d7e <chunk_size>
{
   49ecc:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   49ece:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   49ed0:	1a51      	subs	r1, r2, r1
   49ed2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   49ed6:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   49ed8:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   49eda:	8060      	strh	r0, [r4, #2]
   49edc:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   49ee0:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   49ee2:	8044      	strh	r4, [r0, #2]
   49ee4:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   49ee8:	4618      	mov	r0, r3
   49eea:	4611      	mov	r1, r2
   49eec:	f7ff ff47 	bl	49d7e <chunk_size>
	void *cmem = &buf[c];
   49ef0:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   49ef2:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   49ef6:	bd38      	pop	{r3, r4, r5, pc}

00049ef8 <free_chunk>:
{
   49ef8:	b538      	push	{r3, r4, r5, lr}
   49efa:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   49efc:	f7ff ff3f 	bl	49d7e <chunk_size>
   49f00:	460c      	mov	r4, r1
   49f02:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   49f04:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   49f08:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   49f0a:	07da      	lsls	r2, r3, #31
   49f0c:	d40a      	bmi.n	49f24 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   49f0e:	4628      	mov	r0, r5
   49f10:	f7ff ff7e 	bl	49e10 <free_list_remove>
	return c + chunk_size(h, c);
   49f14:	4621      	mov	r1, r4
   49f16:	4628      	mov	r0, r5
   49f18:	f7ff ff31 	bl	49d7e <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   49f1c:	1822      	adds	r2, r4, r0
   49f1e:	4628      	mov	r0, r5
   49f20:	f7ff ffba 	bl	49e98 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   49f24:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   49f28:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   49f2a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   49f2e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   49f30:	07db      	lsls	r3, r3, #31
   49f32:	d40c      	bmi.n	49f4e <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   49f34:	4628      	mov	r0, r5
   49f36:	f7ff ff6b 	bl	49e10 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   49f3a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   49f3e:	4622      	mov	r2, r4
   49f40:	1a61      	subs	r1, r4, r1
   49f42:	4628      	mov	r0, r5
   49f44:	f7ff ffa8 	bl	49e98 <merge_chunks>
   49f48:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   49f4c:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   49f4e:	4621      	mov	r1, r4
   49f50:	4628      	mov	r0, r5
}
   49f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   49f56:	f7ff bf17 	b.w	49d88 <free_list_add>

00049f5a <sys_heap_free>:
	if (mem == NULL) {
   49f5a:	b161      	cbz	r1, 49f76 <sys_heap_free+0x1c>
   49f5c:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   49f5e:	3904      	subs	r1, #4
   49f60:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   49f62:	f021 0307 	bic.w	r3, r1, #7
   49f66:	4403      	add	r3, r0
	free_chunk(h, c);
   49f68:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   49f6a:	885a      	ldrh	r2, [r3, #2]
   49f6c:	f022 0201 	bic.w	r2, r2, #1
   49f70:	805a      	strh	r2, [r3, #2]
   49f72:	f7ff bfc1 	b.w	49ef8 <free_chunk>
}
   49f76:	4770      	bx	lr

00049f78 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   49f78:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   49f7a:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   49f7c:	b909      	cbnz	r1, 49f82 <sys_heap_alloc+0xa>
		return NULL;
   49f7e:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   49f80:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   49f82:	68ab      	ldr	r3, [r5, #8]
   49f84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   49f88:	d9f9      	bls.n	49f7e <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   49f8a:	310b      	adds	r1, #11
   49f8c:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   49f8e:	4621      	mov	r1, r4
   49f90:	4628      	mov	r0, r5
   49f92:	f7ff ff4a 	bl	49e2a <alloc_chunk>
	if (c == 0U) {
   49f96:	4606      	mov	r6, r0
   49f98:	2800      	cmp	r0, #0
   49f9a:	d0f0      	beq.n	49f7e <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   49f9c:	4601      	mov	r1, r0
   49f9e:	4628      	mov	r0, r5
   49fa0:	f7ff feed 	bl	49d7e <chunk_size>
   49fa4:	42a0      	cmp	r0, r4
   49fa6:	d907      	bls.n	49fb8 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   49fa8:	1932      	adds	r2, r6, r4
   49faa:	4628      	mov	r0, r5
   49fac:	f7ff ff8a 	bl	49ec4 <split_chunks>
		free_list_add(h, c + chunk_sz);
   49fb0:	4611      	mov	r1, r2
   49fb2:	4628      	mov	r0, r5
   49fb4:	f7ff fee8 	bl	49d88 <free_list_add>
	void *cmem = &buf[c];
   49fb8:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   49fbc:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   49fbe:	8853      	ldrh	r3, [r2, #2]
   49fc0:	f043 0301 	orr.w	r3, r3, #1
   49fc4:	8053      	strh	r3, [r2, #2]
   49fc6:	3004      	adds	r0, #4
	return mem;
   49fc8:	e7da      	b.n	49f80 <sys_heap_alloc+0x8>

00049fca <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   49fca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   49fce:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   49fd2:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   49fd6:	6806      	ldr	r6, [r0, #0]
{
   49fd8:	460f      	mov	r7, r1
   49fda:	4614      	mov	r4, r2
	if (align != rew) {
   49fdc:	d00c      	beq.n	49ff8 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   49fde:	424b      	negs	r3, r1
   49fe0:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   49fe2:	2b04      	cmp	r3, #4
   49fe4:	461a      	mov	r2, r3
   49fe6:	464f      	mov	r7, r9
   49fe8:	bf28      	it	cs
   49fea:	2204      	movcs	r2, #4
	rew = align & -align;
   49fec:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   49fee:	b964      	cbnz	r4, 4a00a <sys_heap_aligned_alloc+0x40>
		return NULL;
   49ff0:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   49ff2:	4628      	mov	r0, r5
   49ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   49ff8:	2904      	cmp	r1, #4
   49ffa:	d804      	bhi.n	4a006 <sys_heap_aligned_alloc+0x3c>
}
   49ffc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   4a000:	4611      	mov	r1, r2
   4a002:	f7ff bfb9 	b.w	49f78 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   4a006:	2204      	movs	r2, #4
   4a008:	e7f1      	b.n	49fee <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   4a00a:	68b3      	ldr	r3, [r6, #8]
   4a00c:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   4a010:	d9ee      	bls.n	49ff0 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   4a012:	f104 010b 	add.w	r1, r4, #11
   4a016:	4439      	add	r1, r7
   4a018:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   4a01a:	08c9      	lsrs	r1, r1, #3
   4a01c:	4630      	mov	r0, r6
   4a01e:	f7ff ff04 	bl	49e2a <alloc_chunk>
	if (c0 == 0) {
   4a022:	4680      	mov	r8, r0
   4a024:	2800      	cmp	r0, #0
   4a026:	d0e3      	beq.n	49ff0 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   4a028:	f109 0504 	add.w	r5, r9, #4
   4a02c:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   4a030:	1e7b      	subs	r3, r7, #1
   4a032:	4435      	add	r5, r6
   4a034:	441d      	add	r5, r3
   4a036:	427f      	negs	r7, r7
   4a038:	403d      	ands	r5, r7
   4a03a:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   4a03e:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   4a040:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   4a042:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   4a044:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   4a046:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   4a04a:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   4a04c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   4a050:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   4a054:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   4a058:	d208      	bcs.n	4a06c <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   4a05a:	4601      	mov	r1, r0
   4a05c:	463a      	mov	r2, r7
   4a05e:	4630      	mov	r0, r6
   4a060:	f7ff ff30 	bl	49ec4 <split_chunks>
		free_list_add(h, c0);
   4a064:	4641      	mov	r1, r8
   4a066:	4630      	mov	r0, r6
   4a068:	f7ff fe8e 	bl	49d88 <free_list_add>
	return c + chunk_size(h, c);
   4a06c:	4639      	mov	r1, r7
   4a06e:	4630      	mov	r0, r6
   4a070:	f7ff fe85 	bl	49d7e <chunk_size>
   4a074:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   4a076:	4284      	cmp	r4, r0
   4a078:	d207      	bcs.n	4a08a <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   4a07a:	4630      	mov	r0, r6
   4a07c:	4622      	mov	r2, r4
   4a07e:	f7ff ff21 	bl	49ec4 <split_chunks>
		free_list_add(h, c_end);
   4a082:	4621      	mov	r1, r4
   4a084:	4630      	mov	r0, r6
   4a086:	f7ff fe7f 	bl	49d88 <free_list_add>
	void *cmem = &buf[c];
   4a08a:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   4a08e:	8873      	ldrh	r3, [r6, #2]
   4a090:	f043 0301 	orr.w	r3, r3, #1
   4a094:	8073      	strh	r3, [r6, #2]
   4a096:	e7ac      	b.n	49ff2 <sys_heap_aligned_alloc+0x28>

0004a098 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   4a098:	3a04      	subs	r2, #4
{
   4a09a:	b4f0      	push	{r4, r5, r6, r7}
   4a09c:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   4a09e:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   4a0a0:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   4a0a2:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   4a0a6:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   4a0aa:	1a0e      	subs	r6, r1, r0
   4a0ac:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   4a0ae:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   4a0b0:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   4a0b4:	4604      	mov	r4, r0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   4a0b6:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   4a0ba:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   4a0bc:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   4a0be:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   4a0c0:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   4a0c4:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   4a0c6:	f1c2 0220 	rsb	r2, r2, #32
   4a0ca:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   4a0cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   4a0d0:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   4a0d4:	4294      	cmp	r4, r2
   4a0d6:	d1fb      	bne.n	4a0d0 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   4a0d8:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   4a0da:	f042 0201 	orr.w	r2, r2, #1
   4a0de:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   4a0e0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   4a0e4:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   4a0e6:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   4a0e8:	8007      	strh	r7, [r0, #0]
   4a0ea:	8065      	strh	r5, [r4, #2]
   4a0ec:	1984      	adds	r4, r0, r6
   4a0ee:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   4a0f2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   4a0f6:	8067      	strh	r7, [r4, #2]
   4a0f8:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   4a0fa:	885a      	ldrh	r2, [r3, #2]
   4a0fc:	f042 0201 	orr.w	r2, r2, #1
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   4a100:	bcf0      	pop	{r4, r5, r6, r7}
   4a102:	805a      	strh	r2, [r3, #2]
	free_list_add(h, chunk0_size);
   4a104:	f7ff be40 	b.w	49d88 <free_list_add>

0004a108 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   4a108:	4770      	bx	lr

0004a10a <read_str>:
{
   4a10a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   4a10e:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   4a112:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   4a114:	4640      	mov	r0, r8
{
   4a116:	461f      	mov	r7, r3
   4a118:	460c      	mov	r4, r1
   4a11a:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   4a11c:	f001 fdec 	bl	4bcf8 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   4a120:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   4a124:	9300      	str	r3, [sp, #0]
   4a126:	b280      	uxth	r0, r0
   4a128:	e9cd 8001 	strd	r8, r0, [sp, #4]
   4a12c:	463b      	mov	r3, r7
   4a12e:	4632      	mov	r2, r6
   4a130:	4621      	mov	r1, r4
   4a132:	4628      	mov	r0, r5
   4a134:	f004 fa35 	bl	4e5a2 <bt_gatt_attr_read>
}
   4a138:	b004      	add	sp, #16
   4a13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004a13e <blvl_ccc_cfg_changed>:
}
   4a13e:	4770      	bx	lr

0004a140 <bas_init>:
}
   4a140:	2000      	movs	r0, #0
   4a142:	4770      	bx	lr

0004a144 <nvs_flash_rd>:
{
   4a144:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   4a146:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4a148:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   4a14a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4a14c:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   4a14e:	fa16 f181 	uxtah	r1, r6, r1
   4a152:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   4a156:	6884      	ldr	r4, [r0, #8]
   4a158:	6824      	ldr	r4, [r4, #0]
   4a15a:	46a4      	mov	ip, r4
}
   4a15c:	bc70      	pop	{r4, r5, r6}
   4a15e:	4760      	bx	ip

0004a160 <nvs_flash_block_cmp>:
{
   4a160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4a164:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4a166:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   4a168:	681d      	ldr	r5, [r3, #0]
   4a16a:	426d      	negs	r5, r5
{
   4a16c:	b089      	sub	sp, #36	; 0x24
   4a16e:	4681      	mov	r9, r0
   4a170:	460e      	mov	r6, r1
   4a172:	4617      	mov	r7, r2
	block_size =
   4a174:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   4a178:	b91c      	cbnz	r4, 4a182 <nvs_flash_block_cmp+0x22>
	return 0;
   4a17a:	4620      	mov	r0, r4
}
   4a17c:	b009      	add	sp, #36	; 0x24
   4a17e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   4a182:	42ac      	cmp	r4, r5
   4a184:	46a0      	mov	r8, r4
   4a186:	bf28      	it	cs
   4a188:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   4a18a:	4643      	mov	r3, r8
   4a18c:	466a      	mov	r2, sp
   4a18e:	4631      	mov	r1, r6
   4a190:	4648      	mov	r0, r9
   4a192:	f7ff ffd7 	bl	4a144 <nvs_flash_rd>
		if (rc) {
   4a196:	2800      	cmp	r0, #0
   4a198:	d1f0      	bne.n	4a17c <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   4a19a:	4642      	mov	r2, r8
   4a19c:	4669      	mov	r1, sp
   4a19e:	4638      	mov	r0, r7
   4a1a0:	f001 fdd1 	bl	4bd46 <memcmp>
		if (rc) {
   4a1a4:	b920      	cbnz	r0, 4a1b0 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   4a1a6:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   4a1aa:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   4a1ac:	4447      	add	r7, r8
   4a1ae:	e7e3      	b.n	4a178 <nvs_flash_block_cmp+0x18>
			return 1;
   4a1b0:	2001      	movs	r0, #1
   4a1b2:	e7e3      	b.n	4a17c <nvs_flash_block_cmp+0x1c>

0004a1b4 <nvs_flash_cmp_const>:
{
   4a1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4a1b8:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4a1ba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   4a1bc:	681d      	ldr	r5, [r3, #0]
   4a1be:	426d      	negs	r5, r5
{
   4a1c0:	b088      	sub	sp, #32
	block_size =
   4a1c2:	f005 0520 	and.w	r5, r5, #32
{
   4a1c6:	4607      	mov	r7, r0
   4a1c8:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   4a1ca:	4668      	mov	r0, sp
{
   4a1cc:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   4a1ce:	462a      	mov	r2, r5
   4a1d0:	f001 fdd4 	bl	4bd7c <memset>
	while (len) {
   4a1d4:	b91c      	cbnz	r4, 4a1de <nvs_flash_cmp_const+0x2a>
	return 0;
   4a1d6:	4620      	mov	r0, r4
}
   4a1d8:	b008      	add	sp, #32
   4a1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   4a1de:	42ac      	cmp	r4, r5
   4a1e0:	46a0      	mov	r8, r4
   4a1e2:	bf28      	it	cs
   4a1e4:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   4a1e6:	4643      	mov	r3, r8
   4a1e8:	466a      	mov	r2, sp
   4a1ea:	4631      	mov	r1, r6
   4a1ec:	4638      	mov	r0, r7
   4a1ee:	f7ff ffb7 	bl	4a160 <nvs_flash_block_cmp>
		if (rc) {
   4a1f2:	2800      	cmp	r0, #0
   4a1f4:	d1f0      	bne.n	4a1d8 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   4a1f6:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   4a1fa:	4446      	add	r6, r8
   4a1fc:	e7ea      	b.n	4a1d4 <nvs_flash_cmp_const+0x20>

0004a1fe <nvs_flash_erase_sector>:
{
   4a1fe:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4a200:	8982      	ldrh	r2, [r0, #12]
   4a202:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   4a204:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4a206:	0c09      	lsrs	r1, r1, #16
{
   4a208:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   4a20a:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   4a20c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4a20e:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   4a212:	6883      	ldr	r3, [r0, #8]
   4a214:	689b      	ldr	r3, [r3, #8]
   4a216:	4798      	blx	r3
	if (rc) {
   4a218:	b950      	cbnz	r0, 4a230 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   4a21a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   4a21c:	89a3      	ldrh	r3, [r4, #12]
   4a21e:	7912      	ldrb	r2, [r2, #4]
   4a220:	4629      	mov	r1, r5
   4a222:	4620      	mov	r0, r4
   4a224:	f7ff ffc6 	bl	4a1b4 <nvs_flash_cmp_const>
		rc = -ENXIO;
   4a228:	2800      	cmp	r0, #0
   4a22a:	bf18      	it	ne
   4a22c:	f06f 0005 	mvnne.w	r0, #5
}
   4a230:	bd38      	pop	{r3, r4, r5, pc}

0004a232 <nvs_ate_crc8_update>:
{
   4a232:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4a234:	4601      	mov	r1, r0
{
   4a236:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4a238:	2207      	movs	r2, #7
   4a23a:	20ff      	movs	r0, #255	; 0xff
   4a23c:	f7e0 fbc2 	bl	2a9c4 <crc8_ccitt>
	entry->crc8 = crc8;
   4a240:	71e0      	strb	r0, [r4, #7]
}
   4a242:	bd10      	pop	{r4, pc}

0004a244 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   4a244:	680b      	ldr	r3, [r1, #0]
   4a246:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   4a24a:	0c1a      	lsrs	r2, r3, #16
   4a24c:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   4a250:	bf08      	it	eq
   4a252:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
	*addr += (1 << ADDR_SECT_SHIFT);
   4a256:	600b      	str	r3, [r1, #0]
}
   4a258:	4770      	bx	lr

0004a25a <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   4a25a:	7803      	ldrb	r3, [r0, #0]
   4a25c:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   4a25e:	bf81      	itttt	hi
   4a260:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   4a264:	18c9      	addhi	r1, r1, r3
   4a266:	425b      	neghi	r3, r3
   4a268:	4019      	andhi	r1, r3
}
   4a26a:	4608      	mov	r0, r1
   4a26c:	4770      	bx	lr

0004a26e <nvs_ate_valid>:
{
   4a26e:	b570      	push	{r4, r5, r6, lr}
   4a270:	460c      	mov	r4, r1
   4a272:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a274:	2108      	movs	r1, #8
   4a276:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4a278:	f7ff ffef 	bl	4a25a <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4a27c:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a27e:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4a280:	4621      	mov	r1, r4
   4a282:	20ff      	movs	r0, #255	; 0xff
   4a284:	f7e0 fb9e 	bl	2a9c4 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   4a288:	79e3      	ldrb	r3, [r4, #7]
   4a28a:	4283      	cmp	r3, r0
   4a28c:	d107      	bne.n	4a29e <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   4a28e:	89aa      	ldrh	r2, [r5, #12]
   4a290:	8863      	ldrh	r3, [r4, #2]
   4a292:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   4a294:	4283      	cmp	r3, r0
   4a296:	bf2c      	ite	cs
   4a298:	2000      	movcs	r0, #0
   4a29a:	2001      	movcc	r0, #1
}
   4a29c:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   4a29e:	2000      	movs	r0, #0
   4a2a0:	e7fc      	b.n	4a29c <nvs_ate_valid+0x2e>

0004a2a2 <nvs_close_ate_valid>:
{
   4a2a2:	b538      	push	{r3, r4, r5, lr}
   4a2a4:	4605      	mov	r5, r0
   4a2a6:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   4a2a8:	f7ff ffe1 	bl	4a26e <nvs_ate_valid>
   4a2ac:	b1a0      	cbz	r0, 4a2d8 <nvs_close_ate_valid+0x36>
   4a2ae:	88a0      	ldrh	r0, [r4, #4]
   4a2b0:	b998      	cbnz	r0, 4a2da <nvs_close_ate_valid+0x38>
   4a2b2:	8822      	ldrh	r2, [r4, #0]
   4a2b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4a2b8:	429a      	cmp	r2, r3
   4a2ba:	d10d      	bne.n	4a2d8 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a2bc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   4a2be:	2108      	movs	r1, #8
   4a2c0:	f7ff ffcb 	bl	4a25a <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   4a2c4:	8862      	ldrh	r2, [r4, #2]
   4a2c6:	89ab      	ldrh	r3, [r5, #12]
   4a2c8:	1a9b      	subs	r3, r3, r2
   4a2ca:	fbb3 f2f0 	udiv	r2, r3, r0
   4a2ce:	fb02 3010 	mls	r0, r2, r0, r3
   4a2d2:	fab0 f080 	clz	r0, r0
   4a2d6:	0940      	lsrs	r0, r0, #5
}
   4a2d8:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   4a2da:	2000      	movs	r0, #0
   4a2dc:	e7fc      	b.n	4a2d8 <nvs_close_ate_valid+0x36>

0004a2de <nvs_prev_ate>:
{
   4a2de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4a2e0:	4604      	mov	r4, r0
   4a2e2:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a2e4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4a2e6:	2108      	movs	r1, #8
   4a2e8:	f7ff ffb7 	bl	4a25a <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4a2ec:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a2ee:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4a2f0:	2308      	movs	r3, #8
   4a2f2:	4620      	mov	r0, r4
   4a2f4:	f7ff ff26 	bl	4a144 <nvs_flash_rd>
	if (rc) {
   4a2f8:	4606      	mov	r6, r0
   4a2fa:	2800      	cmp	r0, #0
   4a2fc:	d136      	bne.n	4a36c <nvs_prev_ate+0x8e>
	*addr += ate_size;
   4a2fe:	682b      	ldr	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   4a300:	89a2      	ldrh	r2, [r4, #12]
	*addr += ate_size;
   4a302:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   4a304:	b299      	uxth	r1, r3
   4a306:	1bd2      	subs	r2, r2, r7
   4a308:	4291      	cmp	r1, r2
	*addr += ate_size;
   4a30a:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   4a30c:	d12e      	bne.n	4a36c <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   4a30e:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   4a310:	bf03      	ittte	eq
   4a312:	89e2      	ldrheq	r2, [r4, #14]
   4a314:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
   4a318:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   4a31c:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   4a320:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4a322:	2308      	movs	r3, #8
   4a324:	466a      	mov	r2, sp
   4a326:	4620      	mov	r0, r4
   4a328:	f7ff ff0c 	bl	4a144 <nvs_flash_rd>
	if (rc) {
   4a32c:	b9e8      	cbnz	r0, 4a36a <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   4a32e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   4a330:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   4a332:	466b      	mov	r3, sp
		if (data8[i] != value) {
   4a334:	f813 1b01 	ldrb.w	r1, [r3], #1
   4a338:	428a      	cmp	r2, r1
   4a33a:	d10c      	bne.n	4a356 <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   4a33c:	3001      	adds	r0, #1
   4a33e:	2808      	cmp	r0, #8
   4a340:	d1f8      	bne.n	4a334 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   4a342:	6863      	ldr	r3, [r4, #4]
   4a344:	e005      	b.n	4a352 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   4a346:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   4a348:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   4a34c:	0c1b      	lsrs	r3, r3, #16
   4a34e:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   4a350:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   4a352:	602b      	str	r3, [r5, #0]
		return 0;
   4a354:	e00a      	b.n	4a36c <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   4a356:	4669      	mov	r1, sp
   4a358:	4620      	mov	r0, r4
   4a35a:	f7ff ffa2 	bl	4a2a2 <nvs_close_ate_valid>
   4a35e:	2800      	cmp	r0, #0
   4a360:	d1f1      	bne.n	4a346 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   4a362:	4629      	mov	r1, r5
   4a364:	4620      	mov	r0, r4
   4a366:	f7e0 fefd 	bl	2b164 <nvs_recover_last_ate>
   4a36a:	4606      	mov	r6, r0
}
   4a36c:	4630      	mov	r0, r6
   4a36e:	b003      	add	sp, #12
   4a370:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004a372 <nvs_flash_al_wrt>:
{
   4a372:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4a376:	4607      	mov	r7, r0
   4a378:	b089      	sub	sp, #36	; 0x24
   4a37a:	4690      	mov	r8, r2
	if (!len) {
   4a37c:	461e      	mov	r6, r3
   4a37e:	b91b      	cbnz	r3, 4a388 <nvs_flash_al_wrt+0x16>
		return 0;
   4a380:	2000      	movs	r0, #0
}
   4a382:	b009      	add	sp, #36	; 0x24
   4a384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   4a388:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4a38a:	8983      	ldrh	r3, [r0, #12]
   4a38c:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   4a38e:	fa14 f181 	uxtah	r1, r4, r1
   4a392:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   4a396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   4a398:	681d      	ldr	r5, [r3, #0]
   4a39a:	426d      	negs	r5, r5
	if (blen > 0) {
   4a39c:	4035      	ands	r5, r6
   4a39e:	d00c      	beq.n	4a3ba <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   4a3a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   4a3a2:	6883      	ldr	r3, [r0, #8]
   4a3a4:	4621      	mov	r1, r4
   4a3a6:	f8d3 9004 	ldr.w	r9, [r3, #4]
   4a3aa:	462b      	mov	r3, r5
   4a3ac:	47c8      	blx	r9
		if (rc) {
   4a3ae:	2800      	cmp	r0, #0
   4a3b0:	d1e7      	bne.n	4a382 <nvs_flash_al_wrt+0x10>
	if (len) {
   4a3b2:	1b76      	subs	r6, r6, r5
   4a3b4:	d0e4      	beq.n	4a380 <nvs_flash_al_wrt+0xe>
		offset += blen;
   4a3b6:	442c      	add	r4, r5
		data8 += blen;
   4a3b8:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   4a3ba:	4632      	mov	r2, r6
   4a3bc:	4641      	mov	r1, r8
   4a3be:	4668      	mov	r0, sp
   4a3c0:	f001 fcd1 	bl	4bd66 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   4a3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   4a3c6:	681a      	ldr	r2, [r3, #0]
   4a3c8:	7919      	ldrb	r1, [r3, #4]
   4a3ca:	1b92      	subs	r2, r2, r6
   4a3cc:	eb0d 0006 	add.w	r0, sp, r6
   4a3d0:	f001 fcd4 	bl	4bd7c <memset>
				 fs->flash_parameters->write_block_size);
   4a3d4:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   4a3d8:	681b      	ldr	r3, [r3, #0]
   4a3da:	6882      	ldr	r2, [r0, #8]
   4a3dc:	4621      	mov	r1, r4
   4a3de:	6855      	ldr	r5, [r2, #4]
   4a3e0:	466a      	mov	r2, sp
   4a3e2:	47a8      	blx	r5
	return rc;
   4a3e4:	e7cd      	b.n	4a382 <nvs_flash_al_wrt+0x10>

0004a3e6 <nvs_flash_ate_wrt>:
{
   4a3e6:	b510      	push	{r4, lr}
   4a3e8:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   4a3ea:	2308      	movs	r3, #8
   4a3ec:	6841      	ldr	r1, [r0, #4]
{
   4a3ee:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   4a3f0:	f7ff ffbf 	bl	4a372 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   4a3f4:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   4a3f6:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   4a3f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   4a3fa:	f7ff ff2e 	bl	4a25a <nvs_al_size.isra.0>
   4a3fe:	6863      	ldr	r3, [r4, #4]
   4a400:	1a1b      	subs	r3, r3, r0
   4a402:	6063      	str	r3, [r4, #4]
}
   4a404:	4610      	mov	r0, r2
   4a406:	bd10      	pop	{r4, pc}

0004a408 <nvs_add_gc_done_ate>:
{
   4a408:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   4a40a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4a40e:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   4a412:	2300      	movs	r3, #0
{
   4a414:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   4a416:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   4a41a:	6883      	ldr	r3, [r0, #8]
   4a41c:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   4a420:	4668      	mov	r0, sp
   4a422:	f7ff ff06 	bl	4a232 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   4a426:	4669      	mov	r1, sp
   4a428:	4620      	mov	r0, r4
   4a42a:	f7ff ffdc 	bl	4a3e6 <nvs_flash_ate_wrt>
}
   4a42e:	b002      	add	sp, #8
   4a430:	bd10      	pop	{r4, pc}

0004a432 <nvs_gc>:
{
   4a432:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4a436:	4604      	mov	r4, r0
   4a438:	b095      	sub	sp, #84	; 0x54
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a43a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4a43c:	2108      	movs	r1, #8
   4a43e:	f7ff ff0c 	bl	4a25a <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   4a442:	6863      	ldr	r3, [r4, #4]
   4a444:	0c1b      	lsrs	r3, r3, #16
   4a446:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a448:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   4a44a:	a903      	add	r1, sp, #12
   4a44c:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   4a44e:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   4a450:	f7ff fef8 	bl	4a244 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   4a454:	f8dd b00c 	ldr.w	fp, [sp, #12]
   4a458:	89a6      	ldrh	r6, [r4, #12]
   4a45a:	445e      	add	r6, fp
   4a45c:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4a45e:	aa06      	add	r2, sp, #24
   4a460:	2308      	movs	r3, #8
   4a462:	4631      	mov	r1, r6
   4a464:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   4a466:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4a468:	f7ff fe6c 	bl	4a144 <nvs_flash_rd>
	if (rc < 0) {
   4a46c:	1e02      	subs	r2, r0, #0
   4a46e:	f2c0 80a9 	blt.w	4a5c4 <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   4a472:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   4a474:	aa06      	add	r2, sp, #24
   4a476:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   4a478:	2300      	movs	r3, #0
		if (data8[i] != value) {
   4a47a:	f812 0b01 	ldrb.w	r0, [r2], #1
   4a47e:	4281      	cmp	r1, r0
   4a480:	f040 808f 	bne.w	4a5a2 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   4a484:	3301      	adds	r3, #1
   4a486:	2b08      	cmp	r3, #8
   4a488:	d1f7      	bne.n	4a47a <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   4a48a:	68a3      	ldr	r3, [r4, #8]
   4a48c:	6862      	ldr	r2, [r4, #4]
   4a48e:	442b      	add	r3, r5
   4a490:	429a      	cmp	r2, r3
   4a492:	d27e      	bcs.n	4a592 <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   4a494:	4659      	mov	r1, fp
   4a496:	4620      	mov	r0, r4
   4a498:	f7ff feb1 	bl	4a1fe <nvs_flash_erase_sector>
   4a49c:	4602      	mov	r2, r0
	if (rc) {
   4a49e:	e091      	b.n	4a5c4 <nvs_gc+0x192>
		gc_addr += close_ate.offset;
   4a4a0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   4a4a4:	0c36      	lsrs	r6, r6, #16
   4a4a6:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   4a4a8:	441e      	add	r6, r3
   4a4aa:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   4a4ac:	aa08      	add	r2, sp, #32
   4a4ae:	a904      	add	r1, sp, #16
   4a4b0:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   4a4b2:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   4a4b6:	f7ff ff12 	bl	4a2de <nvs_prev_ate>
		if (rc) {
   4a4ba:	4602      	mov	r2, r0
   4a4bc:	2800      	cmp	r0, #0
   4a4be:	f040 8081 	bne.w	4a5c4 <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   4a4c2:	a908      	add	r1, sp, #32
   4a4c4:	4620      	mov	r0, r4
   4a4c6:	f7ff fed2 	bl	4a26e <nvs_ate_valid>
   4a4ca:	b918      	cbnz	r0, 4a4d4 <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
   4a4cc:	9b01      	ldr	r3, [sp, #4]
   4a4ce:	459a      	cmp	sl, r3
   4a4d0:	d1ec      	bne.n	4a4ac <nvs_gc+0x7a>
   4a4d2:	e7da      	b.n	4a48a <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
   4a4d4:	6863      	ldr	r3, [r4, #4]
   4a4d6:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4a4d8:	aa0a      	add	r2, sp, #40	; 0x28
   4a4da:	a905      	add	r1, sp, #20
   4a4dc:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   4a4de:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4a4e0:	f7ff fefd 	bl	4a2de <nvs_prev_ate>
			if (rc) {
   4a4e4:	4602      	mov	r2, r0
   4a4e6:	2800      	cmp	r0, #0
   4a4e8:	d16c      	bne.n	4a5c4 <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
   4a4ea:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   4a4ee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   4a4f2:	429a      	cmp	r2, r3
   4a4f4:	d027      	beq.n	4a546 <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
   4a4f6:	6862      	ldr	r2, [r4, #4]
   4a4f8:	9b05      	ldr	r3, [sp, #20]
   4a4fa:	429a      	cmp	r2, r3
   4a4fc:	d1ec      	bne.n	4a4d8 <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   4a4fe:	4556      	cmp	r6, sl
   4a500:	d1e4      	bne.n	4a4cc <nvs_gc+0x9a>
   4a502:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   4a506:	2b00      	cmp	r3, #0
   4a508:	d0e0      	beq.n	4a4cc <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   4a50a:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   4a50e:	ea4f 431a 	mov.w	r3, sl, lsr #16
   4a512:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   4a514:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   4a516:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   4a518:	68a3      	ldr	r3, [r4, #8]
   4a51a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   4a51e:	f7ff fe88 	bl	4a232 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4a522:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   4a524:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4a528:	681e      	ldr	r6, [r3, #0]
   4a52a:	4276      	negs	r6, r6
	block_size =
   4a52c:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   4a530:	f1b9 0f00 	cmp.w	r9, #0
   4a534:	d10e      	bne.n	4a554 <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   4a536:	a908      	add	r1, sp, #32
   4a538:	4620      	mov	r0, r4
   4a53a:	f7ff ff54 	bl	4a3e6 <nvs_flash_ate_wrt>
			if (rc) {
   4a53e:	4602      	mov	r2, r0
   4a540:	2800      	cmp	r0, #0
   4a542:	d0c3      	beq.n	4a4cc <nvs_gc+0x9a>
   4a544:	e03e      	b.n	4a5c4 <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   4a546:	a90a      	add	r1, sp, #40	; 0x28
   4a548:	4620      	mov	r0, r4
   4a54a:	f7ff fe90 	bl	4a26e <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   4a54e:	2800      	cmp	r0, #0
   4a550:	d0d1      	beq.n	4a4f6 <nvs_gc+0xc4>
   4a552:	e7d4      	b.n	4a4fe <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
   4a554:	454e      	cmp	r6, r9
   4a556:	46b0      	mov	r8, r6
   4a558:	bf28      	it	cs
   4a55a:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   4a55c:	aa0c      	add	r2, sp, #48	; 0x30
   4a55e:	4643      	mov	r3, r8
   4a560:	4639      	mov	r1, r7
   4a562:	4620      	mov	r0, r4
   4a564:	f7ff fdee 	bl	4a144 <nvs_flash_rd>
		if (rc) {
   4a568:	4602      	mov	r2, r0
   4a56a:	bb58      	cbnz	r0, 4a5c4 <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   4a56c:	4643      	mov	r3, r8
   4a56e:	68a1      	ldr	r1, [r4, #8]
   4a570:	aa0c      	add	r2, sp, #48	; 0x30
   4a572:	4620      	mov	r0, r4
   4a574:	f7ff fefd 	bl	4a372 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   4a578:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   4a57a:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   4a57c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   4a57e:	f7ff fe6c 	bl	4a25a <nvs_al_size.isra.0>
   4a582:	68a3      	ldr	r3, [r4, #8]
   4a584:	4403      	add	r3, r0
   4a586:	60a3      	str	r3, [r4, #8]
		if (rc) {
   4a588:	b9e2      	cbnz	r2, 4a5c4 <nvs_gc+0x192>
		len -= bytes_to_copy;
   4a58a:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
   4a58e:	4447      	add	r7, r8
   4a590:	e7ce      	b.n	4a530 <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
   4a592:	4620      	mov	r0, r4
   4a594:	f7ff ff38 	bl	4a408 <nvs_add_gc_done_ate>
		if (rc) {
   4a598:	4602      	mov	r2, r0
   4a59a:	2800      	cmp	r0, #0
   4a59c:	f43f af7a 	beq.w	4a494 <nvs_gc+0x62>
   4a5a0:	e010      	b.n	4a5c4 <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
   4a5a2:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   4a5a4:	a906      	add	r1, sp, #24
   4a5a6:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   4a5a8:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   4a5aa:	f7ff fe7a 	bl	4a2a2 <nvs_close_ate_valid>
   4a5ae:	2800      	cmp	r0, #0
   4a5b0:	f47f af76 	bne.w	4a4a0 <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   4a5b4:	a904      	add	r1, sp, #16
   4a5b6:	4620      	mov	r0, r4
   4a5b8:	f7e0 fdd4 	bl	2b164 <nvs_recover_last_ate>
		if (rc) {
   4a5bc:	4602      	mov	r2, r0
   4a5be:	2800      	cmp	r0, #0
   4a5c0:	f43f af74 	beq.w	4a4ac <nvs_gc+0x7a>
}
   4a5c4:	4610      	mov	r0, r2
   4a5c6:	b015      	add	sp, #84	; 0x54
   4a5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0004a5cc <nvs_delete>:

int nvs_delete(struct nvs_fs *fs, uint16_t id)
{
	return nvs_write(fs, id, NULL, 0);
   4a5cc:	2300      	movs	r3, #0
   4a5ce:	461a      	mov	r2, r3
   4a5d0:	f7e0 bf62 	b.w	2b498 <nvs_write>

0004a5d4 <nvs_read_hist>:
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   4a5d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   4a5d8:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   4a5da:	7c03      	ldrb	r3, [r0, #16]
{
   4a5dc:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   4a5e0:	4604      	mov	r4, r0
   4a5e2:	460f      	mov	r7, r1
   4a5e4:	4690      	mov	r8, r2
	if (!fs->ready) {
   4a5e6:	2b00      	cmp	r3, #0
   4a5e8:	d04e      	beq.n	4a688 <nvs_read_hist+0xb4>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a5ea:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4a5ec:	2108      	movs	r1, #8
   4a5ee:	f7ff fe34 	bl	4a25a <nvs_al_size.isra.0>

	if (len > (fs->sector_size - 2 * ate_size)) {
   4a5f2:	89a3      	ldrh	r3, [r4, #12]
   4a5f4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   4a5f8:	429e      	cmp	r6, r3
   4a5fa:	d848      	bhi.n	4a68e <nvs_read_hist+0xba>
		return -EINVAL;
	}

	cnt_his = 0U;

	wlk_addr = fs->ate_wra;
   4a5fc:	f8d4 a004 	ldr.w	sl, [r4, #4]
   4a600:	f8cd a004 	str.w	sl, [sp, #4]
	cnt_his = 0U;
   4a604:	2500      	movs	r5, #0
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
   4a606:	45a9      	cmp	r9, r5
   4a608:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
   4a60a:	f8dd a004 	ldr.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
   4a60e:	d20b      	bcs.n	4a628 <nvs_read_hist+0x54>
		if (wlk_addr == fs->ate_wra) {
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   4a610:	6863      	ldr	r3, [r4, #4]
   4a612:	4553      	cmp	r3, sl
   4a614:	d120      	bne.n	4a658 <nvs_read_hist+0x84>
   4a616:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   4a61a:	42bb      	cmp	r3, r7
   4a61c:	d01c      	beq.n	4a658 <nvs_read_hist+0x84>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
		return -ENOENT;
   4a61e:	f06f 0001 	mvn.w	r0, #1

	return wlk_ate.len;

err:
	return rc;
}
   4a622:	b004      	add	sp, #16
   4a624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4a628:	aa02      	add	r2, sp, #8
   4a62a:	a901      	add	r1, sp, #4
   4a62c:	4620      	mov	r0, r4
   4a62e:	f7ff fe56 	bl	4a2de <nvs_prev_ate>
		if (rc) {
   4a632:	2800      	cmp	r0, #0
   4a634:	d1f5      	bne.n	4a622 <nvs_read_hist+0x4e>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   4a636:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   4a63a:	42bb      	cmp	r3, r7
   4a63c:	d106      	bne.n	4a64c <nvs_read_hist+0x78>
   4a63e:	a902      	add	r1, sp, #8
   4a640:	4620      	mov	r0, r4
   4a642:	f7ff fe14 	bl	4a26e <nvs_ate_valid>
   4a646:	b108      	cbz	r0, 4a64c <nvs_read_hist+0x78>
			cnt_his++;
   4a648:	3501      	adds	r5, #1
   4a64a:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
   4a64c:	6862      	ldr	r2, [r4, #4]
   4a64e:	9b01      	ldr	r3, [sp, #4]
   4a650:	429a      	cmp	r2, r3
   4a652:	d1d8      	bne.n	4a606 <nvs_read_hist+0x32>
		rd_addr = wlk_addr;
   4a654:	4651      	mov	r1, sl
   4a656:	e7de      	b.n	4a616 <nvs_read_hist+0x42>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   4a658:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   4a65c:	2b00      	cmp	r3, #0
   4a65e:	d0de      	beq.n	4a61e <nvs_read_hist+0x4a>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   4a660:	45a9      	cmp	r9, r5
   4a662:	d8dc      	bhi.n	4a61e <nvs_read_hist+0x4a>
	rd_addr += wlk_ate.offset;
   4a664:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   4a668:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   4a66a:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   4a66c:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   4a670:	bf28      	it	cs
   4a672:	4633      	movcs	r3, r6
   4a674:	4401      	add	r1, r0
   4a676:	4642      	mov	r2, r8
   4a678:	4620      	mov	r0, r4
   4a67a:	f7ff fd63 	bl	4a144 <nvs_flash_rd>
	if (rc) {
   4a67e:	2800      	cmp	r0, #0
   4a680:	d1cf      	bne.n	4a622 <nvs_read_hist+0x4e>
	return wlk_ate.len;
   4a682:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   4a686:	e7cc      	b.n	4a622 <nvs_read_hist+0x4e>
		return -EACCES;
   4a688:	f06f 000c 	mvn.w	r0, #12
   4a68c:	e7c9      	b.n	4a622 <nvs_read_hist+0x4e>
		return -EINVAL;
   4a68e:	f06f 0015 	mvn.w	r0, #21
   4a692:	e7c6      	b.n	4a622 <nvs_read_hist+0x4e>

0004a694 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   4a694:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   4a696:	2400      	movs	r4, #0
   4a698:	9400      	str	r4, [sp, #0]
   4a69a:	f7ff ff9b 	bl	4a5d4 <nvs_read_hist>
	return rc;
}
   4a69e:	b002      	add	sp, #8
   4a6a0:	bd10      	pop	{r4, pc}

0004a6a2 <usb_write>:
{
   4a6a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4a6a6:	4606      	mov	r6, r0
   4a6a8:	460f      	mov	r7, r1
   4a6aa:	4690      	mov	r8, r2
   4a6ac:	4699      	mov	r9, r3
   4a6ae:	250b      	movs	r5, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   4a6b0:	464b      	mov	r3, r9
   4a6b2:	4642      	mov	r2, r8
   4a6b4:	4639      	mov	r1, r7
   4a6b6:	4630      	mov	r0, r6
   4a6b8:	f7f9 ff5a 	bl	44570 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
   4a6bc:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   4a6c0:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   4a6c2:	d103      	bne.n	4a6cc <usb_write+0x2a>
	z_impl_k_yield();
   4a6c4:	f7fe f9a6 	bl	48a14 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
   4a6c8:	3d01      	subs	r5, #1
   4a6ca:	d1f1      	bne.n	4a6b0 <usb_write+0xe>
}
   4a6cc:	4620      	mov	r0, r4
   4a6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0004a6d2 <usb_get_dev_data_by_cfg>:
	return list->head;
   4a6d2:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4a6d4:	b140      	cbz	r0, 4a6e8 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
   4a6d6:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
   4a6da:	685b      	ldr	r3, [r3, #4]
   4a6dc:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4a6de:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
   4a6e2:	d001      	beq.n	4a6e8 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
   4a6e4:	6840      	ldr	r0, [r0, #4]
   4a6e6:	e7f5      	b.n	4a6d4 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   4a6e8:	4770      	bx	lr

0004a6ea <usb_get_dev_data_by_iface>:
	return list->head;
   4a6ea:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4a6ec:	b150      	cbz	r0, 4a704 <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   4a6ee:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
   4a6f2:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   4a6f4:	685b      	ldr	r3, [r3, #4]
   4a6f6:	789b      	ldrb	r3, [r3, #2]
   4a6f8:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4a6fa:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
   4a6fe:	d001      	beq.n	4a704 <usb_get_dev_data_by_iface+0x1a>
	return node->next;
   4a700:	6840      	ldr	r0, [r0, #4]
   4a702:	e7f3      	b.n	4a6ec <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   4a704:	4770      	bx	lr

0004a706 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
   4a706:	b530      	push	{r4, r5, lr}
	return list->head;
   4a708:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4a70a:	b188      	cbz	r0, 4a730 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   4a70c:	f850 3c04 	ldr.w	r3, [r0, #-4]
   4a710:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   4a712:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   4a714:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4a716:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   4a718:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
   4a71a:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   4a71c:	b2dc      	uxtb	r4, r3
   4a71e:	42a5      	cmp	r5, r4
   4a720:	d801      	bhi.n	4a726 <usb_get_dev_data_by_ep+0x20>
	return node->next;
   4a722:	6840      	ldr	r0, [r0, #4]
   4a724:	e7f1      	b.n	4a70a <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
   4a726:	3301      	adds	r3, #1
   4a728:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
   4a72c:	428c      	cmp	r4, r1
   4a72e:	d1f5      	bne.n	4a71c <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   4a730:	bd30      	pop	{r4, r5, pc}

0004a732 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   4a732:	4770      	bx	lr

0004a734 <get_sectors_cb>:
{
   4a734:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   4a736:	6802      	ldr	r2, [r0, #0]
   4a738:	684c      	ldr	r4, [r1, #4]
   4a73a:	42a2      	cmp	r2, r4
   4a73c:	d201      	bcs.n	4a742 <get_sectors_cb+0xe>
		*bail_value = true;
   4a73e:	2001      	movs	r0, #1
}
   4a740:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   4a742:	688b      	ldr	r3, [r1, #8]
   4a744:	4423      	add	r3, r4
   4a746:	429a      	cmp	r2, r3
   4a748:	d301      	bcc.n	4a74e <get_sectors_cb+0x1a>
		*bail_value = false;
   4a74a:	2000      	movs	r0, #0
   4a74c:	e7f8      	b.n	4a740 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
   4a74e:	e9d1 5303 	ldrd	r5, r3, [r1, #12]
   4a752:	694e      	ldr	r6, [r1, #20]
   4a754:	42b3      	cmp	r3, r6
   4a756:	d303      	bcc.n	4a760 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
   4a758:	f06f 030b 	mvn.w	r3, #11
   4a75c:	618b      	str	r3, [r1, #24]
		return true;
   4a75e:	e7f4      	b.n	4a74a <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   4a760:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   4a764:	1b12      	subs	r2, r2, r4
   4a766:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   4a76a:	6842      	ldr	r2, [r0, #4]
   4a76c:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   4a76e:	3301      	adds	r3, #1
   4a770:	610b      	str	r3, [r1, #16]
	return true;
   4a772:	e7e4      	b.n	4a73e <get_sectors_cb+0xa>

0004a774 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   4a774:	2200      	movs	r2, #0
   4a776:	4611      	mov	r1, r2
   4a778:	f7e1 bdce 	b.w	2c318 <settings_save_one>

0004a77c <settings_name_steq>:
{
   4a77c:	4603      	mov	r3, r0
   4a77e:	b510      	push	{r4, lr}
   4a780:	4608      	mov	r0, r1
	if (next) {
   4a782:	b10a      	cbz	r2, 4a788 <settings_name_steq+0xc>
		*next = NULL;
   4a784:	2100      	movs	r1, #0
   4a786:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   4a788:	b153      	cbz	r3, 4a7a0 <settings_name_steq+0x24>
   4a78a:	b1d0      	cbz	r0, 4a7c2 <settings_name_steq+0x46>
   4a78c:	1e41      	subs	r1, r0, #1
	while ((*key != '\0') && (*key == *name) &&
   4a78e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   4a792:	b180      	cbz	r0, 4a7b6 <settings_name_steq+0x3a>
	while ((*key != '\0') && (*key == *name) &&
   4a794:	f813 4b01 	ldrb.w	r4, [r3], #1
   4a798:	42a0      	cmp	r0, r4
   4a79a:	d101      	bne.n	4a7a0 <settings_name_steq+0x24>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   4a79c:	283d      	cmp	r0, #61	; 0x3d
   4a79e:	d1f6      	bne.n	4a78e <settings_name_steq+0x12>
		return 0;
   4a7a0:	2000      	movs	r0, #0
   4a7a2:	e00e      	b.n	4a7c2 <settings_name_steq+0x46>
			*next = name + 1;
   4a7a4:	3301      	adds	r3, #1
   4a7a6:	6013      	str	r3, [r2, #0]
   4a7a8:	e00a      	b.n	4a7c0 <settings_name_steq+0x44>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   4a7aa:	283d      	cmp	r0, #61	; 0x3d
   4a7ac:	d008      	beq.n	4a7c0 <settings_name_steq+0x44>
   4a7ae:	fab0 f080 	clz	r0, r0
   4a7b2:	0940      	lsrs	r0, r0, #5
   4a7b4:	e005      	b.n	4a7c2 <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   4a7b6:	7818      	ldrb	r0, [r3, #0]
   4a7b8:	282f      	cmp	r0, #47	; 0x2f
   4a7ba:	d1f6      	bne.n	4a7aa <settings_name_steq+0x2e>
		if (next) {
   4a7bc:	2a00      	cmp	r2, #0
   4a7be:	d1f1      	bne.n	4a7a4 <settings_name_steq+0x28>
		return 1;
   4a7c0:	2001      	movs	r0, #1
}
   4a7c2:	bd10      	pop	{r4, pc}

0004a7c4 <settings_name_next>:
{
   4a7c4:	b510      	push	{r4, lr}
	if (next) {
   4a7c6:	b109      	cbz	r1, 4a7cc <settings_name_next+0x8>
		*next = NULL;
   4a7c8:	2300      	movs	r3, #0
   4a7ca:	600b      	str	r3, [r1, #0]
	if (!name) {
   4a7cc:	b158      	cbz	r0, 4a7e6 <settings_name_next+0x22>
   4a7ce:	4603      	mov	r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   4a7d0:	781a      	ldrb	r2, [r3, #0]
   4a7d2:	461c      	mov	r4, r3
   4a7d4:	3301      	adds	r3, #1
   4a7d6:	b12a      	cbz	r2, 4a7e4 <settings_name_next+0x20>
   4a7d8:	2a3d      	cmp	r2, #61	; 0x3d
   4a7da:	d003      	beq.n	4a7e4 <settings_name_next+0x20>
   4a7dc:	2a2f      	cmp	r2, #47	; 0x2f
   4a7de:	d1f7      	bne.n	4a7d0 <settings_name_next+0xc>
		if (next) {
   4a7e0:	b101      	cbz	r1, 4a7e4 <settings_name_next+0x20>
			*next = name + 1;
   4a7e2:	600b      	str	r3, [r1, #0]
   4a7e4:	1a20      	subs	r0, r4, r0
}
   4a7e6:	bd10      	pop	{r4, pc}

0004a7e8 <settings_call_set_handler>:
{
   4a7e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   4a7ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
	const char *name_key = name;
   4a7f0:	9001      	str	r0, [sp, #4]
{
   4a7f2:	4607      	mov	r7, r0
   4a7f4:	460c      	mov	r4, r1
   4a7f6:	4615      	mov	r5, r2
   4a7f8:	461e      	mov	r6, r3
	if (load_arg && load_arg->subtree &&
   4a7fa:	f1b8 0f00 	cmp.w	r8, #0
   4a7fe:	d007      	beq.n	4a810 <settings_call_set_handler+0x28>
   4a800:	f8d8 1000 	ldr.w	r1, [r8]
   4a804:	b981      	cbnz	r1, 4a828 <settings_call_set_handler+0x40>
	if (load_arg && load_arg->cb) {
   4a806:	f8d8 e004 	ldr.w	lr, [r8, #4]
   4a80a:	f1be 0f00 	cmp.w	lr, #0
   4a80e:	d114      	bne.n	4a83a <settings_call_set_handler+0x52>
		ch = settings_parse_and_lookup(name, &name_key);
   4a810:	a901      	add	r1, sp, #4
   4a812:	4638      	mov	r0, r7
   4a814:	f7e1 fe50 	bl	2c4b8 <settings_parse_and_lookup>
		if (!ch) {
   4a818:	b158      	cbz	r0, 4a832 <settings_call_set_handler+0x4a>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   4a81a:	6887      	ldr	r7, [r0, #8]
   4a81c:	9801      	ldr	r0, [sp, #4]
   4a81e:	4633      	mov	r3, r6
   4a820:	462a      	mov	r2, r5
   4a822:	4621      	mov	r1, r4
   4a824:	47b8      	blx	r7
		if (rc != 0) {
   4a826:	e004      	b.n	4a832 <settings_call_set_handler+0x4a>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   4a828:	aa01      	add	r2, sp, #4
   4a82a:	f7ff ffa7 	bl	4a77c <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   4a82e:	2800      	cmp	r0, #0
   4a830:	d1e9      	bne.n	4a806 <settings_call_set_handler+0x1e>
}
   4a832:	2000      	movs	r0, #0
   4a834:	b002      	add	sp, #8
   4a836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   4a83a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   4a83e:	9801      	ldr	r0, [sp, #4]
   4a840:	9308      	str	r3, [sp, #32]
   4a842:	462a      	mov	r2, r5
   4a844:	4633      	mov	r3, r6
   4a846:	4621      	mov	r1, r4
   4a848:	46f4      	mov	ip, lr
}
   4a84a:	b002      	add	sp, #8
   4a84c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   4a850:	4760      	bx	ip

0004a852 <settings_nvs_read_fn>:
{
   4a852:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   4a854:	4613      	mov	r3, r2
{
   4a856:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   4a858:	460a      	mov	r2, r1
   4a85a:	8881      	ldrh	r1, [r0, #4]
   4a85c:	6800      	ldr	r0, [r0, #0]
   4a85e:	f7ff ff19 	bl	4a694 <nvs_read>
}
   4a862:	42a0      	cmp	r0, r4
   4a864:	bfa8      	it	ge
   4a866:	4620      	movge	r0, r4
   4a868:	bd10      	pop	{r4, pc}

0004a86a <settings_nvs_save>:
{
   4a86a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4a86e:	b097      	sub	sp, #92	; 0x5c
   4a870:	4604      	mov	r4, r0
   4a872:	9201      	str	r2, [sp, #4]
   4a874:	469a      	mov	sl, r3
	if (!name) {
   4a876:	4689      	mov	r9, r1
   4a878:	2900      	cmp	r1, #0
   4a87a:	d07e      	beq.n	4a97a <settings_nvs_save+0x110>
	delete = ((value == NULL) || (val_len == 0));
   4a87c:	b1da      	cbz	r2, 4a8b6 <settings_nvs_save+0x4c>
   4a87e:	faba f78a 	clz	r7, sl
   4a882:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   4a884:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   4a886:	3501      	adds	r5, #1
   4a888:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   4a88a:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   4a88c:	f104 0b08 	add.w	fp, r4, #8
		name_id--;
   4a890:	1e6e      	subs	r6, r5, #1
   4a892:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   4a894:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   4a898:	d040      	beq.n	4a91c <settings_nvs_save+0xb2>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   4a89a:	234a      	movs	r3, #74	; 0x4a
   4a89c:	aa03      	add	r2, sp, #12
   4a89e:	4631      	mov	r1, r6
   4a8a0:	4658      	mov	r0, fp
   4a8a2:	f7ff fef7 	bl	4a694 <nvs_read>
		if (rc < 0) {
   4a8a6:	2800      	cmp	r0, #0
   4a8a8:	da07      	bge.n	4a8ba <settings_nvs_save+0x50>
		name_id--;
   4a8aa:	f110 0f02 	cmn.w	r0, #2
   4a8ae:	bf08      	it	eq
   4a8b0:	46b0      	moveq	r8, r6
   4a8b2:	4635      	mov	r5, r6
   4a8b4:	e7ec      	b.n	4a890 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   4a8b6:	2701      	movs	r7, #1
   4a8b8:	e7e4      	b.n	4a884 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   4a8ba:	f100 0358 	add.w	r3, r0, #88	; 0x58
   4a8be:	eb0d 0003 	add.w	r0, sp, r3
   4a8c2:	2300      	movs	r3, #0
   4a8c4:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   4a8c8:	a903      	add	r1, sp, #12
   4a8ca:	4648      	mov	r0, r9
   4a8cc:	f001 fa1b 	bl	4bd06 <strcmp>
   4a8d0:	2800      	cmp	r0, #0
   4a8d2:	d1ee      	bne.n	4a8b2 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   4a8d4:	b32f      	cbz	r7, 4a922 <settings_nvs_save+0xb8>
   4a8d6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   4a8d8:	42b3      	cmp	r3, r6
   4a8da:	d008      	beq.n	4a8ee <settings_nvs_save+0x84>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   4a8dc:	4631      	mov	r1, r6
   4a8de:	4658      	mov	r0, fp
   4a8e0:	f7ff fe74 	bl	4a5cc <nvs_delete>
			if (rc >= 0) {
   4a8e4:	2800      	cmp	r0, #0
   4a8e6:	da0f      	bge.n	4a908 <settings_nvs_save+0x9e>
}
   4a8e8:	b017      	add	sp, #92	; 0x5c
   4a8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cf->last_name_id--;
   4a8ee:	4622      	mov	r2, r4
   4a8f0:	1e73      	subs	r3, r6, #1
   4a8f2:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   4a8f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   4a8fa:	2302      	movs	r3, #2
   4a8fc:	4658      	mov	r0, fp
   4a8fe:	f7e0 fdcb 	bl	2b498 <nvs_write>
			if (rc < 0) {
   4a902:	2800      	cmp	r0, #0
   4a904:	daea      	bge.n	4a8dc <settings_nvs_save+0x72>
   4a906:	e7ef      	b.n	4a8e8 <settings_nvs_save+0x7e>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   4a908:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   4a90c:	313f      	adds	r1, #63	; 0x3f
   4a90e:	b289      	uxth	r1, r1
   4a910:	4658      	mov	r0, fp
   4a912:	f7ff fe5b 	bl	4a5cc <nvs_delete>
	if (rc < 0) {
   4a916:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   4a91a:	e7e5      	b.n	4a8e8 <settings_nvs_save+0x7e>
	if (delete) {
   4a91c:	b1ff      	cbz	r7, 4a95e <settings_nvs_save+0xf4>
			return 0;
   4a91e:	2000      	movs	r0, #0
   4a920:	e7e2      	b.n	4a8e8 <settings_nvs_save+0x7e>
		name_id--;
   4a922:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   4a924:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   4a928:	d02a      	beq.n	4a980 <settings_nvs_save+0x116>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   4a92a:	f104 0508 	add.w	r5, r4, #8
   4a92e:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   4a932:	9a01      	ldr	r2, [sp, #4]
   4a934:	4653      	mov	r3, sl
   4a936:	b289      	uxth	r1, r1
   4a938:	4628      	mov	r0, r5
   4a93a:	f7e0 fdad 	bl	2b498 <nvs_write>
	if (rc < 0) {
   4a93e:	2800      	cmp	r0, #0
   4a940:	dbd2      	blt.n	4a8e8 <settings_nvs_save+0x7e>
	if (write_name) {
   4a942:	b977      	cbnz	r7, 4a962 <settings_nvs_save+0xf8>
	if (write_name_id > cf->last_name_id) {
   4a944:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   4a946:	4543      	cmp	r3, r8
   4a948:	d2e9      	bcs.n	4a91e <settings_nvs_save+0xb4>
		cf->last_name_id = write_name_id;
   4a94a:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   4a94c:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   4a94e:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   4a952:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   4a956:	4628      	mov	r0, r5
   4a958:	f7e0 fd9e 	bl	2b498 <nvs_write>
   4a95c:	e7db      	b.n	4a916 <settings_nvs_save+0xac>
	write_name = true;
   4a95e:	2701      	movs	r7, #1
   4a960:	e7e0      	b.n	4a924 <settings_nvs_save+0xba>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   4a962:	4648      	mov	r0, r9
   4a964:	f001 f9c8 	bl	4bcf8 <strlen>
   4a968:	464a      	mov	r2, r9
   4a96a:	4603      	mov	r3, r0
   4a96c:	4641      	mov	r1, r8
   4a96e:	4628      	mov	r0, r5
   4a970:	f7e0 fd92 	bl	2b498 <nvs_write>
		if (rc < 0) {
   4a974:	2800      	cmp	r0, #0
   4a976:	dae5      	bge.n	4a944 <settings_nvs_save+0xda>
   4a978:	e7b6      	b.n	4a8e8 <settings_nvs_save+0x7e>
		return -EINVAL;
   4a97a:	f06f 0015 	mvn.w	r0, #21
   4a97e:	e7b3      	b.n	4a8e8 <settings_nvs_save+0x7e>
		return -ENOMEM;
   4a980:	f06f 000b 	mvn.w	r0, #11
   4a984:	e7b0      	b.n	4a8e8 <settings_nvs_save+0x7e>

0004a986 <settings_nvs_backend_init>:
{
   4a986:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   4a988:	f100 0608 	add.w	r6, r0, #8
   4a98c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   4a98e:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   4a990:	4630      	mov	r0, r6
   4a992:	f7e0 fc19 	bl	2b1c8 <nvs_init>
	if (rc) {
   4a996:	4605      	mov	r5, r0
   4a998:	b970      	cbnz	r0, 4a9b8 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   4a99a:	2302      	movs	r3, #2
   4a99c:	f10d 0206 	add.w	r2, sp, #6
   4a9a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   4a9a4:	4630      	mov	r0, r6
   4a9a6:	f7ff fe75 	bl	4a694 <nvs_read>
	if (rc < 0) {
   4a9aa:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   4a9ac:	bfac      	ite	ge
   4a9ae:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   4a9b2:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
   4a9b6:	8723      	strh	r3, [r4, #56]	; 0x38
}
   4a9b8:	4628      	mov	r0, r5
   4a9ba:	b002      	add	sp, #8
   4a9bc:	bd70      	pop	{r4, r5, r6, pc}

0004a9be <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   4a9be:	b538      	push	{r3, r4, r5, lr}
   4a9c0:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   4a9c2:	42ab      	cmp	r3, r5
{
   4a9c4:	4611      	mov	r1, r2
   4a9c6:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   4a9c8:	d804      	bhi.n	4a9d4 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   4a9ca:	461a      	mov	r2, r3
   4a9cc:	f001 f9cb 	bl	4bd66 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   4a9d0:	4620      	mov	r0, r4
   4a9d2:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   4a9d4:	2400      	movs	r4, #0
   4a9d6:	e7fb      	b.n	4a9d0 <_copy+0x12>

0004a9d8 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   4a9d8:	f001 b9d0 	b.w	4bd7c <memset>

0004a9dc <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   4a9dc:	09c3      	lsrs	r3, r0, #7
   4a9de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   4a9e2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   4a9e6:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   4a9ea:	b2c0      	uxtb	r0, r0
   4a9ec:	4770      	bx	lr

0004a9ee <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   4a9ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4a9f2:	4606      	mov	r6, r0
   4a9f4:	b0a9      	sub	sp, #164	; 0xa4
   4a9f6:	4688      	mov	r8, r1
   4a9f8:	4614      	mov	r4, r2
   4a9fa:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   4a9fc:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   4aa00:	f7e1 fff4 	bl	2c9ec <uECC_get_rng>
		if (!rng_function ||
   4aa04:	4603      	mov	r3, r0
   4aa06:	2800      	cmp	r0, #0
   4aa08:	d03e      	beq.n	4aa88 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   4aa0a:	2140      	movs	r1, #64	; 0x40
   4aa0c:	a808      	add	r0, sp, #32
   4aa0e:	4798      	blx	r3
		if (!rng_function ||
   4aa10:	b3d0      	cbz	r0, 4aa88 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   4aa12:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   4aa16:	f112 031f 	adds.w	r3, r2, #31
   4aa1a:	bf48      	it	mi
   4aa1c:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   4aa20:	466d      	mov	r5, sp
   4aa22:	464a      	mov	r2, r9
   4aa24:	a908      	add	r1, sp, #32
   4aa26:	4628      	mov	r0, r5
   4aa28:	f343 1347 	sbfx	r3, r3, #5, #8
   4aa2c:	f000 f9f6 	bl	4ae1c <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   4aa30:	4622      	mov	r2, r4
   4aa32:	4629      	mov	r1, r5
   4aa34:	a818      	add	r0, sp, #96	; 0x60
   4aa36:	f000 fe09 	bl	4b64c <EccPoint_compute_public_key>
   4aa3a:	b318      	cbz	r0, 4aa84 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   4aa3c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   4aa40:	1dd9      	adds	r1, r3, #7
   4aa42:	bf48      	it	mi
   4aa44:	f103 010e 	addmi.w	r1, r3, #14
   4aa48:	462a      	mov	r2, r5
   4aa4a:	4640      	mov	r0, r8
   4aa4c:	10c9      	asrs	r1, r1, #3
   4aa4e:	f000 fe25 	bl	4b69c <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   4aa52:	f994 1001 	ldrsb.w	r1, [r4, #1]
   4aa56:	aa18      	add	r2, sp, #96	; 0x60
   4aa58:	4630      	mov	r0, r6
   4aa5a:	f000 fe1f 	bl	4b69c <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   4aa5e:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   4aa62:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   4aa66:	ab18      	add	r3, sp, #96	; 0x60
   4aa68:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   4aa6c:	1870      	adds	r0, r6, r1
   4aa6e:	f000 fe15 	bl	4b69c <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   4aa72:	2220      	movs	r2, #32
   4aa74:	2100      	movs	r1, #0
   4aa76:	4628      	mov	r0, r5
   4aa78:	f001 f980 	bl	4bd7c <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   4aa7c:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   4aa7e:	b029      	add	sp, #164	; 0xa4
   4aa80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   4aa84:	3f01      	subs	r7, #1
   4aa86:	d1bb      	bne.n	4aa00 <uECC_make_key+0x12>
        		return 0;
   4aa88:	2000      	movs	r0, #0
   4aa8a:	e7f8      	b.n	4aa7e <uECC_make_key+0x90>

0004aa8c <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   4aa8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4aa90:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   4aa92:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   4aa96:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   4aa9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   4aa9e:	b0a4      	sub	sp, #144	; 0x90
   4aaa0:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   4aaa2:	1dda      	adds	r2, r3, #7
   4aaa4:	bf48      	it	mi
   4aaa6:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   4aaaa:	ad04      	add	r5, sp, #16
{
   4aaac:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   4aaae:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   4aab0:	4628      	mov	r0, r5
   4aab2:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   4aab4:	9502      	str	r5, [sp, #8]
   4aab6:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   4aab8:	f000 fe04 	bl	4b6c4 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   4aabc:	463a      	mov	r2, r7
   4aabe:	4649      	mov	r1, r9
   4aac0:	a814      	add	r0, sp, #80	; 0x50
   4aac2:	f000 fdff 	bl	4b6c4 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   4aac6:	ab14      	add	r3, sp, #80	; 0x50
   4aac8:	eb09 0107 	add.w	r1, r9, r7
   4aacc:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   4aad0:	463a      	mov	r2, r7
   4aad2:	f000 fdf7 	bl	4b6c4 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   4aad6:	4623      	mov	r3, r4
   4aad8:	4632      	mov	r2, r6
   4aada:	4629      	mov	r1, r5
   4aadc:	4628      	mov	r0, r5
   4aade:	f000 fd89 	bl	4b5f4 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   4aae2:	fab0 f380 	clz	r3, r0
   4aae6:	9401      	str	r4, [sp, #4]
   4aae8:	aa24      	add	r2, sp, #144	; 0x90
   4aaea:	095b      	lsrs	r3, r3, #5
   4aaec:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   4aaf0:	8863      	ldrh	r3, [r4, #2]
   4aaf2:	3301      	adds	r3, #1
   4aaf4:	b21b      	sxth	r3, r3
   4aaf6:	9300      	str	r3, [sp, #0]
   4aaf8:	f851 2c88 	ldr.w	r2, [r1, #-136]
   4aafc:	a914      	add	r1, sp, #80	; 0x50
   4aafe:	2300      	movs	r3, #0
   4ab00:	4608      	mov	r0, r1
   4ab02:	f000 fcaf 	bl	4b464 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   4ab06:	aa14      	add	r2, sp, #80	; 0x50
   4ab08:	4639      	mov	r1, r7
   4ab0a:	4640      	mov	r0, r8
   4ab0c:	f000 fdc6 	bl	4b69c <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   4ab10:	4621      	mov	r1, r4
   4ab12:	a814      	add	r0, sp, #80	; 0x50
   4ab14:	f000 fc1b 	bl	4b34e <EccPoint_isZero>
   4ab18:	af02      	add	r7, sp, #8
   4ab1a:	4604      	mov	r4, r0
   4ab1c:	2208      	movs	r2, #8
   4ab1e:	2100      	movs	r1, #0
   4ab20:	4638      	mov	r0, r7
   4ab22:	f001 f92b 	bl	4bd7c <memset>
   4ab26:	2220      	movs	r2, #32
   4ab28:	2100      	movs	r1, #0
   4ab2a:	4630      	mov	r0, r6
   4ab2c:	f001 f926 	bl	4bd7c <memset>
   4ab30:	2220      	movs	r2, #32
   4ab32:	2100      	movs	r1, #0
   4ab34:	4628      	mov	r0, r5
   4ab36:	f001 f921 	bl	4bd7c <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   4ab3a:	fab4 f084 	clz	r0, r4
   4ab3e:	0940      	lsrs	r0, r0, #5
   4ab40:	b024      	add	sp, #144	; 0x90
   4ab42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004ab46 <uECC_vli_add>:
{
   4ab46:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   4ab48:	2400      	movs	r4, #0
{
   4ab4a:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   4ab4c:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   4ab4e:	b265      	sxtb	r5, r4
   4ab50:	42ab      	cmp	r3, r5
   4ab52:	dc00      	bgt.n	4ab56 <uECC_vli_add+0x10>
}
   4ab54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   4ab56:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   4ab5a:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   4ab5e:	443d      	add	r5, r7
   4ab60:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   4ab62:	42af      	cmp	r7, r5
   4ab64:	f000 0001 	and.w	r0, r0, #1
   4ab68:	bf18      	it	ne
   4ab6a:	2000      	movne	r0, #0
		result[i] = sum;
   4ab6c:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   4ab70:	bf88      	it	hi
   4ab72:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   4ab76:	3401      	adds	r4, #1
   4ab78:	e7e9      	b.n	4ab4e <uECC_vli_add+0x8>

0004ab7a <uECC_vli_rshift1>:
	vli += num_words;
   4ab7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   4ab7e:	2300      	movs	r3, #0
	while (vli-- > end) {
   4ab80:	4288      	cmp	r0, r1
   4ab82:	d300      	bcc.n	4ab86 <uECC_vli_rshift1+0xc>
}
   4ab84:	4770      	bx	lr
		uECC_word_t temp = *vli;
   4ab86:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   4ab8a:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   4ab8e:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   4ab90:	07d3      	lsls	r3, r2, #31
   4ab92:	e7f5      	b.n	4ab80 <uECC_vli_rshift1+0x6>

0004ab94 <vli_modInv_update>:
	if (!EVEN(uv)) {
   4ab94:	6803      	ldr	r3, [r0, #0]
   4ab96:	07db      	lsls	r3, r3, #31
{
   4ab98:	b570      	push	{r4, r5, r6, lr}
   4ab9a:	4605      	mov	r5, r0
   4ab9c:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   4ab9e:	d404      	bmi.n	4abaa <vli_modInv_update+0x16>
}
   4aba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uECC_vli_rshift1(uv, num_words);
   4aba4:	4611      	mov	r1, r2
   4aba6:	f7ff bfe8 	b.w	4ab7a <uECC_vli_rshift1>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   4abaa:	4613      	mov	r3, r2
   4abac:	460a      	mov	r2, r1
   4abae:	4601      	mov	r1, r0
   4abb0:	f7ff ffc9 	bl	4ab46 <uECC_vli_add>
	uECC_vli_rshift1(uv, num_words);
   4abb4:	4621      	mov	r1, r4
		carry = uECC_vli_add(uv, uv, mod, num_words);
   4abb6:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   4abb8:	4628      	mov	r0, r5
   4abba:	f7ff ffde 	bl	4ab7a <uECC_vli_rshift1>
	if (carry) {
   4abbe:	b146      	cbz	r6, 4abd2 <vli_modInv_update+0x3e>
		uv[num_words - 1] |= HIGH_BIT_SET;
   4abc0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   4abc4:	3c01      	subs	r4, #1
   4abc6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   4abca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   4abce:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
   4abd2:	bd70      	pop	{r4, r5, r6, pc}

0004abd4 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   4abd4:	f04f 0c00 	mov.w	ip, #0
{
   4abd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   4abdc:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   4abde:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   4abe0:	fa4f f98c 	sxtb.w	r9, ip
   4abe4:	454b      	cmp	r3, r9
   4abe6:	dc16      	bgt.n	4ac16 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   4abe8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   4abec:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   4abf0:	9601      	str	r6, [sp, #4]
   4abf2:	f04f 0800 	mov.w	r8, #0
   4abf6:	9f01      	ldr	r7, [sp, #4]
   4abf8:	fa53 fe88 	uxtab	lr, r3, r8
   4abfc:	fa4f fe8e 	sxtb.w	lr, lr
   4ac00:	45be      	cmp	lr, r7
   4ac02:	fa5f f688 	uxtb.w	r6, r8
   4ac06:	db28      	blt.n	4ac5a <uECC_vli_mult+0x86>
	result[num_words * 2 - 1] = r0;
   4ac08:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   4ac0c:	f840 4c04 	str.w	r4, [r0, #-4]
}
   4ac10:	b003      	add	sp, #12
   4ac12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   4ac16:	f04f 0e00 	mov.w	lr, #0
   4ac1a:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   4ac1e:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   4ac20:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   4ac24:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   4ac28:	fba6 6707 	umull	r6, r7, r6, r7
   4ac2c:	1936      	adds	r6, r6, r4
		for (i = 0; i <= k; ++i) {
   4ac2e:	f10e 0e01 	add.w	lr, lr, #1
   4ac32:	416f      	adcs	r7, r5
	*r0 = (uECC_word_t)r01;
   4ac34:	4634      	mov	r4, r6
		for (i = 0; i <= k; ++i) {
   4ac36:	fa4f f68e 	sxtb.w	r6, lr
   4ac3a:	f04f 0b00 	mov.w	fp, #0
   4ac3e:	bf28      	it	cs
   4ac40:	f04f 0b01 	movcs.w	fp, #1
   4ac44:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   4ac46:	44d8      	add	r8, fp
	*r1 = r01 >> uECC_WORD_BITS;
   4ac48:	463d      	mov	r5, r7
		for (i = 0; i <= k; ++i) {
   4ac4a:	dde9      	ble.n	4ac20 <uECC_vli_mult+0x4c>
		result[k] = r0;
   4ac4c:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r2 += (r01 < p);
   4ac50:	4645      	mov	r5, r8
   4ac52:	f10c 0c01 	add.w	ip, ip, #1
	*r1 = r01 >> uECC_WORD_BITS;
   4ac56:	463c      	mov	r4, r7
   4ac58:	e7c2      	b.n	4abe0 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   4ac5a:	3601      	adds	r6, #1
   4ac5c:	46a9      	mov	r9, r5
   4ac5e:	b276      	sxtb	r6, r6
   4ac60:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
   4ac64:	2500      	movs	r5, #0
   4ac66:	b277      	sxtb	r7, r6
   4ac68:	42bb      	cmp	r3, r7
   4ac6a:	dc05      	bgt.n	4ac78 <uECC_vli_mult+0xa4>
		result[k] = r0;
   4ac6c:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   4ac70:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   4ac74:	464c      	mov	r4, r9
   4ac76:	e7be      	b.n	4abf6 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   4ac78:	f06f 0703 	mvn.w	r7, #3
   4ac7c:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
   4ac7e:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
   4ac82:	f85a 7007 	ldr.w	r7, [sl, r7]
   4ac86:	fba7 7c0c 	umull	r7, ip, r7, ip
   4ac8a:	193f      	adds	r7, r7, r4
   4ac8c:	eb5c 0c09 	adcs.w	ip, ip, r9
   4ac90:	f04f 0b00 	mov.w	fp, #0
   4ac94:	bf28      	it	cs
   4ac96:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   4ac9a:	445d      	add	r5, fp
	*r1 = r01 >> uECC_WORD_BITS;
   4ac9c:	46e1      	mov	r9, ip
	*r0 = (uECC_word_t)r01;
   4ac9e:	463c      	mov	r4, r7
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   4aca0:	3601      	adds	r6, #1
   4aca2:	e7e0      	b.n	4ac66 <uECC_vli_mult+0x92>

0004aca4 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   4aca4:	2300      	movs	r3, #0
{
   4aca6:	b510      	push	{r4, lr}
		 vli[i] = 0;
   4aca8:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   4acaa:	b25a      	sxtb	r2, r3
   4acac:	4291      	cmp	r1, r2
   4acae:	dc00      	bgt.n	4acb2 <uECC_vli_clear+0xe>
}
   4acb0:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   4acb2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   4acb6:	3301      	adds	r3, #1
   4acb8:	e7f7      	b.n	4acaa <uECC_vli_clear+0x6>

0004acba <uECC_vli_isZero>:
{
   4acba:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   4acbc:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   4acbe:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   4acc0:	b25c      	sxtb	r4, r3
   4acc2:	42a1      	cmp	r1, r4
   4acc4:	dc03      	bgt.n	4acce <uECC_vli_isZero+0x14>
}
   4acc6:	fab2 f082 	clz	r0, r2
   4acca:	0940      	lsrs	r0, r0, #5
   4accc:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   4acce:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   4acd2:	3301      	adds	r3, #1
   4acd4:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   4acd6:	e7f3      	b.n	4acc0 <uECC_vli_isZero+0x6>

0004acd8 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4acd8:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   4acda:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4acdc:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   4ace0:	f001 011f 	and.w	r1, r1, #31
   4ace4:	408b      	lsls	r3, r1
}
   4ace6:	4018      	ands	r0, r3
   4ace8:	4770      	bx	lr

0004acea <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   4acea:	1e4b      	subs	r3, r1, #1
{
   4acec:	b510      	push	{r4, lr}
   4acee:	b25b      	sxtb	r3, r3
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   4acf0:	1d04      	adds	r4, r0, #4
   4acf2:	061a      	lsls	r2, r3, #24
   4acf4:	d403      	bmi.n	4acfe <uECC_vli_numBits+0x14>
   4acf6:	1e5a      	subs	r2, r3, #1
   4acf8:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
   4acfc:	b171      	cbz	r1, 4ad1c <uECC_vli_numBits+0x32>
	return (i + 1);
   4acfe:	3301      	adds	r3, #1
   4ad00:	b25b      	sxtb	r3, r3
	if (num_digits == 0) {
   4ad02:	b183      	cbz	r3, 4ad26 <uECC_vli_numBits+0x3c>
	digit = vli[num_digits - 1];
   4ad04:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   4ad08:	3a01      	subs	r2, #1
   4ad0a:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
	for (i = 0; digit; ++i) {
   4ad0e:	2200      	movs	r2, #0
   4ad10:	b931      	cbnz	r1, 4ad20 <uECC_vli_numBits+0x36>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   4ad12:	3b01      	subs	r3, #1
   4ad14:	eb02 1243 	add.w	r2, r2, r3, lsl #5
   4ad18:	b210      	sxth	r0, r2
}
   4ad1a:	bd10      	pop	{r4, pc}
   4ad1c:	4613      	mov	r3, r2
   4ad1e:	e7e8      	b.n	4acf2 <uECC_vli_numBits+0x8>
		digit >>= 1;
   4ad20:	0849      	lsrs	r1, r1, #1
	for (i = 0; digit; ++i) {
   4ad22:	3201      	adds	r2, #1
   4ad24:	e7f4      	b.n	4ad10 <uECC_vli_numBits+0x26>
		return 0;
   4ad26:	4618      	mov	r0, r3
   4ad28:	e7f7      	b.n	4ad1a <uECC_vli_numBits+0x30>

0004ad2a <uECC_vli_set>:
{
   4ad2a:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   4ad2c:	2300      	movs	r3, #0
   4ad2e:	b25c      	sxtb	r4, r3
   4ad30:	42a2      	cmp	r2, r4
   4ad32:	dc00      	bgt.n	4ad36 <uECC_vli_set+0xc>
}
   4ad34:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   4ad36:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   4ad3a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   4ad3e:	3301      	adds	r3, #1
   4ad40:	e7f5      	b.n	4ad2e <uECC_vli_set+0x4>

0004ad42 <uECC_vli_cmp_unsafe>:
{
   4ad42:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   4ad44:	3a01      	subs	r2, #1
   4ad46:	b252      	sxtb	r2, r2
   4ad48:	0613      	lsls	r3, r2, #24
   4ad4a:	d501      	bpl.n	4ad50 <uECC_vli_cmp_unsafe+0xe>
	return 0;
   4ad4c:	2000      	movs	r0, #0
}
   4ad4e:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   4ad50:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   4ad54:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   4ad58:	429c      	cmp	r4, r3
   4ad5a:	d805      	bhi.n	4ad68 <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   4ad5c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   4ad60:	d2f2      	bcs.n	4ad48 <uECC_vli_cmp_unsafe+0x6>
			return -1;
   4ad62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4ad66:	e7f2      	b.n	4ad4e <uECC_vli_cmp_unsafe+0xc>
			return 1;
   4ad68:	2001      	movs	r0, #1
   4ad6a:	e7f0      	b.n	4ad4e <uECC_vli_cmp_unsafe+0xc>

0004ad6c <uECC_vli_equal>:
{
   4ad6c:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   4ad6e:	3a01      	subs	r2, #1
   4ad70:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   4ad72:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   4ad74:	0614      	lsls	r4, r2, #24
   4ad76:	d503      	bpl.n	4ad80 <uECC_vli_equal+0x14>
}
   4ad78:	1e18      	subs	r0, r3, #0
   4ad7a:	bf18      	it	ne
   4ad7c:	2001      	movne	r0, #1
   4ad7e:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   4ad80:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   4ad84:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   4ad88:	406c      	eors	r4, r5
   4ad8a:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
   4ad8c:	3a01      	subs	r2, #1
   4ad8e:	e7f1      	b.n	4ad74 <uECC_vli_equal+0x8>

0004ad90 <uECC_vli_sub>:
{
   4ad90:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   4ad92:	2400      	movs	r4, #0
{
   4ad94:	4606      	mov	r6, r0
   4ad96:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   4ad98:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   4ad9a:	b265      	sxtb	r5, r4
   4ad9c:	4565      	cmp	r5, ip
   4ad9e:	db00      	blt.n	4ada2 <uECC_vli_sub+0x12>
}
   4ada0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   4ada2:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   4ada6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   4adaa:	1a3d      	subs	r5, r7, r0
   4adac:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   4adae:	42af      	cmp	r7, r5
   4adb0:	f000 0001 	and.w	r0, r0, #1
   4adb4:	bf18      	it	ne
   4adb6:	2000      	movne	r0, #0
		result[i] = diff;
   4adb8:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   4adbc:	bf38      	it	cc
   4adbe:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   4adc2:	3401      	adds	r4, #1
   4adc4:	e7e9      	b.n	4ad9a <uECC_vli_sub+0xa>

0004adc6 <uECC_vli_modAdd>:
{
   4adc6:	b570      	push	{r4, r5, r6, lr}
   4adc8:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   4adcc:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   4adce:	4633      	mov	r3, r6
{
   4add0:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   4add2:	f7ff feb8 	bl	4ab46 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   4add6:	b930      	cbnz	r0, 4ade6 <uECC_vli_modAdd+0x20>
   4add8:	4632      	mov	r2, r6
   4adda:	4621      	mov	r1, r4
   4addc:	4628      	mov	r0, r5
   4adde:	f7ff ffb0 	bl	4ad42 <uECC_vli_cmp_unsafe>
   4ade2:	2801      	cmp	r0, #1
   4ade4:	d007      	beq.n	4adf6 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   4ade6:	4633      	mov	r3, r6
   4ade8:	462a      	mov	r2, r5
   4adea:	4621      	mov	r1, r4
   4adec:	4620      	mov	r0, r4
}
   4adee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   4adf2:	f7ff bfcd 	b.w	4ad90 <uECC_vli_sub>
}
   4adf6:	bd70      	pop	{r4, r5, r6, pc}

0004adf8 <uECC_vli_modSub>:
{
   4adf8:	b570      	push	{r4, r5, r6, lr}
   4adfa:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   4adfe:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   4ae00:	4633      	mov	r3, r6
{
   4ae02:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   4ae04:	f7ff ffc4 	bl	4ad90 <uECC_vli_sub>
	if (l_borrow) {
   4ae08:	b138      	cbz	r0, 4ae1a <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   4ae0a:	4633      	mov	r3, r6
   4ae0c:	462a      	mov	r2, r5
   4ae0e:	4621      	mov	r1, r4
   4ae10:	4620      	mov	r0, r4
}
   4ae12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   4ae16:	f7ff be96 	b.w	4ab46 <uECC_vli_add>
}
   4ae1a:	bd70      	pop	{r4, r5, r6, pc}

0004ae1c <uECC_vli_mmod>:
{
   4ae1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4ae20:	b0a5      	sub	sp, #148	; 0x94
   4ae22:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   4ae24:	ab14      	add	r3, sp, #80	; 0x50
   4ae26:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   4ae2a:	9001      	str	r0, [sp, #4]
			   uECC_vli_numBits(mod, num_words);
   4ae2c:	4629      	mov	r1, r5
   4ae2e:	4610      	mov	r0, r2
{
   4ae30:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   4ae32:	f7ff ff5a 	bl	4acea <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   4ae36:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   4ae3a:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   4ae3c:	2c00      	cmp	r4, #0
   4ae3e:	4621      	mov	r1, r4
   4ae40:	bfb8      	it	lt
   4ae42:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   4ae46:	4263      	negs	r3, r4
   4ae48:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   4ae4c:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   4ae50:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   4ae54:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   4ae56:	bf58      	it	pl
   4ae58:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   4ae5a:	f7ff ff23 	bl	4aca4 <uECC_vli_clear>
	if (bit_shift > 0) {
   4ae5e:	2e00      	cmp	r6, #0
   4ae60:	ea4f 0081 	mov.w	r0, r1, lsl #2
   4ae64:	dd2d      	ble.n	4aec2 <uECC_vli_mmod+0xa6>
   4ae66:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   4ae68:	2200      	movs	r2, #0
   4ae6a:	4418      	add	r0, r3
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   4ae6c:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   4ae70:	4613      	mov	r3, r2
   4ae72:	429d      	cmp	r5, r3
   4ae74:	d81a      	bhi.n	4aeac <uECC_vli_mmod+0x90>
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4ae76:	ab04      	add	r3, sp, #16
   4ae78:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   4ae7c:	9300      	str	r3, [sp, #0]
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4ae7e:	1e6f      	subs	r7, r5, #1
   4ae80:	ab24      	add	r3, sp, #144	; 0x90
		for (i = 0; i < num_words * 2; ++i) {
   4ae82:	ea4f 0845 	mov.w	r8, r5, lsl #1
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4ae86:	ea4f 0985 	mov.w	r9, r5, lsl #2
   4ae8a:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4ae8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   4ae90:	2c00      	cmp	r4, #0
   4ae92:	da53      	bge.n	4af3c <uECC_vli_mmod+0x120>
	uECC_vli_set(result, v[index], num_words);
   4ae94:	ab24      	add	r3, sp, #144	; 0x90
   4ae96:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   4ae9a:	9801      	ldr	r0, [sp, #4]
   4ae9c:	f856 1c88 	ldr.w	r1, [r6, #-136]
   4aea0:	462a      	mov	r2, r5
   4aea2:	f7ff ff42 	bl	4ad2a <uECC_vli_set>
}
   4aea6:	b025      	add	sp, #148	; 0x94
   4aea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   4aeac:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   4aeb0:	fa0c f106 	lsl.w	r1, ip, r6
   4aeb4:	430a      	orrs	r2, r1
   4aeb6:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   4aeba:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   4aebc:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   4aec0:	e7d7      	b.n	4ae72 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   4aec2:	ab04      	add	r3, sp, #16
   4aec4:	462a      	mov	r2, r5
   4aec6:	4639      	mov	r1, r7
   4aec8:	4418      	add	r0, r3
   4aeca:	f7ff ff2e 	bl	4ad2a <uECC_vli_set>
   4aece:	e7d2      	b.n	4ae76 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   4aed0:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   4aed4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   4aed8:	ab24      	add	r3, sp, #144	; 0x90
   4aeda:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   4aede:	f10c 0c01 	add.w	ip, ip, #1
   4aee2:	f853 3c80 	ldr.w	r3, [r3, #-128]
   4aee6:	440b      	add	r3, r1
   4aee8:	1ad3      	subs	r3, r2, r3
   4aeea:	bf34      	ite	cc
   4aeec:	f04f 0b01 	movcc.w	fp, #1
   4aef0:	f04f 0b00 	movcs.w	fp, #0
			if (diff != v[index][i]) {
   4aef4:	429a      	cmp	r2, r3
			v[1 - index][i] = diff;
   4aef6:	f85e 2c88 	ldr.w	r2, [lr, #-136]
   4aefa:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
				borrow = (diff > v[index][i]);
   4aefe:	bf18      	it	ne
   4af00:	4659      	movne	r1, fp
		for (i = 0; i < num_words * 2; ++i) {
   4af02:	fa4f f08c 	sxtb.w	r0, ip
   4af06:	4540      	cmp	r0, r8
   4af08:	dbe2      	blt.n	4aed0 <uECC_vli_mmod+0xb4>
		index = !(index ^ borrow);
   4af0a:	1a73      	subs	r3, r6, r1
   4af0c:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   4af0e:	4629      	mov	r1, r5
   4af10:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   4af12:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   4af14:	f7ff fe31 	bl	4ab7a <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4af18:	f109 0390 	add.w	r3, r9, #144	; 0x90
   4af1c:	446b      	add	r3, sp
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4af1e:	9800      	ldr	r0, [sp, #0]
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4af20:	f853 2c80 	ldr.w	r2, [r3, #-128]
   4af24:	f857 3c80 	ldr.w	r3, [r7, #-128]
   4af28:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   4af2c:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4af30:	4629      	mov	r1, r5
   4af32:	3c01      	subs	r4, #1
   4af34:	f7ff fe21 	bl	4ab7a <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   4af38:	b224      	sxth	r4, r4
   4af3a:	e7a9      	b.n	4ae90 <uECC_vli_mmod+0x74>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   4af3c:	ab24      	add	r3, sp, #144	; 0x90
   4af3e:	f04f 0c00 	mov.w	ip, #0
			v[1 - index][i] = diff;
   4af42:	f1c6 0e01 	rsb	lr, r6, #1
		uECC_word_t borrow = 0;
   4af46:	4661      	mov	r1, ip
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   4af48:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   4af4c:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
   4af50:	e7d7      	b.n	4af02 <uECC_vli_mmod+0xe6>

0004af52 <uECC_vli_modMult_fast>:
{
   4af52:	b530      	push	{r4, r5, lr}
   4af54:	461c      	mov	r4, r3
   4af56:	b091      	sub	sp, #68	; 0x44
   4af58:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   4af5a:	f993 3000 	ldrsb.w	r3, [r3]
   4af5e:	4668      	mov	r0, sp
   4af60:	f7ff fe38 	bl	4abd4 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   4af64:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   4af68:	4669      	mov	r1, sp
   4af6a:	4628      	mov	r0, r5
   4af6c:	4798      	blx	r3
}
   4af6e:	b011      	add	sp, #68	; 0x44
   4af70:	bd30      	pop	{r4, r5, pc}

0004af72 <uECC_vli_modSquare_fast>:
{
   4af72:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   4af74:	460a      	mov	r2, r1
   4af76:	f7ff bfec 	b.w	4af52 <uECC_vli_modMult_fast>

0004af7a <double_jacobian_default>:
{
   4af7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   4af7e:	f993 6000 	ldrsb.w	r6, [r3]
{
   4af82:	b092      	sub	sp, #72	; 0x48
   4af84:	4604      	mov	r4, r0
   4af86:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   4af88:	4610      	mov	r0, r2
   4af8a:	4631      	mov	r1, r6
{
   4af8c:	4615      	mov	r5, r2
   4af8e:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   4af90:	f7ff fe93 	bl	4acba <uECC_vli_isZero>
   4af94:	2800      	cmp	r0, #0
   4af96:	f040 8091 	bne.w	4b0bc <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   4af9a:	463a      	mov	r2, r7
   4af9c:	4649      	mov	r1, r9
   4af9e:	a802      	add	r0, sp, #8
   4afa0:	f7ff ffe7 	bl	4af72 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   4afa4:	463b      	mov	r3, r7
   4afa6:	aa02      	add	r2, sp, #8
   4afa8:	4621      	mov	r1, r4
   4afaa:	a80a      	add	r0, sp, #40	; 0x28
   4afac:	f7ff ffd1 	bl	4af52 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   4afb0:	a902      	add	r1, sp, #8
   4afb2:	4608      	mov	r0, r1
   4afb4:	463a      	mov	r2, r7
   4afb6:	f7ff ffdc 	bl	4af72 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   4afba:	463b      	mov	r3, r7
   4afbc:	462a      	mov	r2, r5
   4afbe:	4649      	mov	r1, r9
   4afc0:	4648      	mov	r0, r9
   4afc2:	f7ff ffc6 	bl	4af52 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   4afc6:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   4afca:	463a      	mov	r2, r7
   4afcc:	4629      	mov	r1, r5
   4afce:	4628      	mov	r0, r5
   4afd0:	f7ff ffcf 	bl	4af72 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   4afd4:	4643      	mov	r3, r8
   4afd6:	462a      	mov	r2, r5
   4afd8:	4621      	mov	r1, r4
   4afda:	4620      	mov	r0, r4
   4afdc:	9600      	str	r6, [sp, #0]
   4afde:	f7ff fef2 	bl	4adc6 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   4afe2:	4643      	mov	r3, r8
   4afe4:	462a      	mov	r2, r5
   4afe6:	4629      	mov	r1, r5
   4afe8:	4628      	mov	r0, r5
   4afea:	9600      	str	r6, [sp, #0]
   4afec:	f7ff feeb 	bl	4adc6 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   4aff0:	4643      	mov	r3, r8
   4aff2:	462a      	mov	r2, r5
   4aff4:	4621      	mov	r1, r4
   4aff6:	4628      	mov	r0, r5
   4aff8:	9600      	str	r6, [sp, #0]
   4affa:	f7ff fefd 	bl	4adf8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   4affe:	463b      	mov	r3, r7
   4b000:	462a      	mov	r2, r5
   4b002:	4621      	mov	r1, r4
   4b004:	4620      	mov	r0, r4
   4b006:	f7ff ffa4 	bl	4af52 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   4b00a:	4643      	mov	r3, r8
   4b00c:	4622      	mov	r2, r4
   4b00e:	4621      	mov	r1, r4
   4b010:	4628      	mov	r0, r5
   4b012:	9600      	str	r6, [sp, #0]
   4b014:	f7ff fed7 	bl	4adc6 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   4b018:	4643      	mov	r3, r8
   4b01a:	9600      	str	r6, [sp, #0]
   4b01c:	462a      	mov	r2, r5
   4b01e:	4621      	mov	r1, r4
   4b020:	4620      	mov	r0, r4
   4b022:	f7ff fed0 	bl	4adc6 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4b026:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   4b028:	07db      	lsls	r3, r3, #31
   4b02a:	d54a      	bpl.n	4b0c2 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   4b02c:	4633      	mov	r3, r6
   4b02e:	4642      	mov	r2, r8
   4b030:	4621      	mov	r1, r4
   4b032:	4620      	mov	r0, r4
   4b034:	f7ff fd87 	bl	4ab46 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   4b038:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   4b03a:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   4b03c:	4620      	mov	r0, r4
   4b03e:	f7ff fd9c 	bl	4ab7a <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   4b042:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   4b046:	3b01      	subs	r3, #1
   4b048:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   4b04c:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   4b050:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   4b054:	463a      	mov	r2, r7
   4b056:	4621      	mov	r1, r4
   4b058:	4628      	mov	r0, r5
   4b05a:	f7ff ff8a 	bl	4af72 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   4b05e:	4643      	mov	r3, r8
   4b060:	aa0a      	add	r2, sp, #40	; 0x28
   4b062:	4629      	mov	r1, r5
   4b064:	4628      	mov	r0, r5
   4b066:	9600      	str	r6, [sp, #0]
   4b068:	f7ff fec6 	bl	4adf8 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   4b06c:	4643      	mov	r3, r8
   4b06e:	aa0a      	add	r2, sp, #40	; 0x28
   4b070:	4629      	mov	r1, r5
   4b072:	4628      	mov	r0, r5
   4b074:	9600      	str	r6, [sp, #0]
   4b076:	f7ff febf 	bl	4adf8 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   4b07a:	a90a      	add	r1, sp, #40	; 0x28
   4b07c:	4608      	mov	r0, r1
   4b07e:	4643      	mov	r3, r8
   4b080:	462a      	mov	r2, r5
   4b082:	9600      	str	r6, [sp, #0]
   4b084:	f7ff feb8 	bl	4adf8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   4b088:	463b      	mov	r3, r7
   4b08a:	aa0a      	add	r2, sp, #40	; 0x28
   4b08c:	4621      	mov	r1, r4
   4b08e:	4620      	mov	r0, r4
   4b090:	f7ff ff5f 	bl	4af52 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   4b094:	aa02      	add	r2, sp, #8
   4b096:	4643      	mov	r3, r8
   4b098:	4610      	mov	r0, r2
   4b09a:	4621      	mov	r1, r4
   4b09c:	9600      	str	r6, [sp, #0]
   4b09e:	f7ff feab 	bl	4adf8 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   4b0a2:	4632      	mov	r2, r6
   4b0a4:	4629      	mov	r1, r5
   4b0a6:	4620      	mov	r0, r4
   4b0a8:	f7ff fe3f 	bl	4ad2a <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   4b0ac:	4649      	mov	r1, r9
   4b0ae:	4628      	mov	r0, r5
   4b0b0:	f7ff fe3b 	bl	4ad2a <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   4b0b4:	a902      	add	r1, sp, #8
   4b0b6:	4648      	mov	r0, r9
   4b0b8:	f7ff fe37 	bl	4ad2a <uECC_vli_set>
}
   4b0bc:	b012      	add	sp, #72	; 0x48
   4b0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   4b0c2:	4631      	mov	r1, r6
   4b0c4:	4620      	mov	r0, r4
   4b0c6:	f7ff fd58 	bl	4ab7a <uECC_vli_rshift1>
   4b0ca:	e7c3      	b.n	4b054 <double_jacobian_default+0xda>

0004b0cc <x_side_default>:
{
   4b0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4b0d0:	4615      	mov	r5, r2
   4b0d2:	b08a      	sub	sp, #40	; 0x28
   4b0d4:	4604      	mov	r4, r0
   4b0d6:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   4b0d8:	221c      	movs	r2, #28
   4b0da:	2100      	movs	r1, #0
   4b0dc:	a803      	add	r0, sp, #12
   4b0de:	f000 fe4d 	bl	4bd7c <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   4b0e2:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   4b0e4:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   4b0e8:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   4b0ea:	462a      	mov	r2, r5
   4b0ec:	4631      	mov	r1, r6
   4b0ee:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   4b0f0:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   4b0f2:	f7ff ff3e 	bl	4af72 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   4b0f6:	463b      	mov	r3, r7
   4b0f8:	aa02      	add	r2, sp, #8
   4b0fa:	4621      	mov	r1, r4
   4b0fc:	4620      	mov	r0, r4
   4b0fe:	f8cd 8000 	str.w	r8, [sp]
   4b102:	f7ff fe79 	bl	4adf8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   4b106:	462b      	mov	r3, r5
   4b108:	4632      	mov	r2, r6
   4b10a:	4621      	mov	r1, r4
   4b10c:	4620      	mov	r0, r4
   4b10e:	f7ff ff20 	bl	4af52 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   4b112:	f8cd 8000 	str.w	r8, [sp]
   4b116:	463b      	mov	r3, r7
   4b118:	f105 0284 	add.w	r2, r5, #132	; 0x84
   4b11c:	4621      	mov	r1, r4
   4b11e:	4620      	mov	r0, r4
   4b120:	f7ff fe51 	bl	4adc6 <uECC_vli_modAdd>
}
   4b124:	b00a      	add	sp, #40	; 0x28
   4b126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004b12a <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   4b12a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4b12e:	b09a      	sub	sp, #104	; 0x68
   4b130:	4616      	mov	r6, r2
   4b132:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   4b136:	4644      	mov	r4, r8
{
   4b138:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   4b13a:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4b13e:	9500      	str	r5, [sp, #0]
{
   4b140:	4607      	mov	r7, r0
   4b142:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4b144:	4623      	mov	r3, r4
   4b146:	4602      	mov	r2, r0
   4b148:	4631      	mov	r1, r6
   4b14a:	a802      	add	r0, sp, #8
   4b14c:	f7ff fe54 	bl	4adf8 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   4b150:	a902      	add	r1, sp, #8
   4b152:	4642      	mov	r2, r8
   4b154:	4608      	mov	r0, r1
   4b156:	f7ff ff0c 	bl	4af72 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   4b15a:	4643      	mov	r3, r8
   4b15c:	aa02      	add	r2, sp, #8
   4b15e:	4639      	mov	r1, r7
   4b160:	4638      	mov	r0, r7
   4b162:	f7ff fef6 	bl	4af52 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   4b166:	4643      	mov	r3, r8
   4b168:	aa02      	add	r2, sp, #8
   4b16a:	4631      	mov	r1, r6
   4b16c:	4630      	mov	r0, r6
   4b16e:	f7ff fef0 	bl	4af52 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   4b172:	4623      	mov	r3, r4
   4b174:	4652      	mov	r2, sl
   4b176:	4649      	mov	r1, r9
   4b178:	a802      	add	r0, sp, #8
   4b17a:	9500      	str	r5, [sp, #0]
   4b17c:	f7ff fe23 	bl	4adc6 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   4b180:	4623      	mov	r3, r4
   4b182:	4652      	mov	r2, sl
   4b184:	4649      	mov	r1, r9
   4b186:	4648      	mov	r0, r9
   4b188:	9500      	str	r5, [sp, #0]
   4b18a:	f7ff fe35 	bl	4adf8 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   4b18e:	4623      	mov	r3, r4
   4b190:	463a      	mov	r2, r7
   4b192:	4631      	mov	r1, r6
   4b194:	a80a      	add	r0, sp, #40	; 0x28
   4b196:	9500      	str	r5, [sp, #0]
   4b198:	f7ff fe2e 	bl	4adf8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   4b19c:	4643      	mov	r3, r8
   4b19e:	aa0a      	add	r2, sp, #40	; 0x28
   4b1a0:	4651      	mov	r1, sl
   4b1a2:	4650      	mov	r0, sl
   4b1a4:	f7ff fed5 	bl	4af52 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   4b1a8:	4623      	mov	r3, r4
   4b1aa:	4632      	mov	r2, r6
   4b1ac:	4639      	mov	r1, r7
   4b1ae:	a80a      	add	r0, sp, #40	; 0x28
   4b1b0:	9500      	str	r5, [sp, #0]
   4b1b2:	f7ff fe08 	bl	4adc6 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   4b1b6:	4642      	mov	r2, r8
   4b1b8:	4649      	mov	r1, r9
   4b1ba:	4630      	mov	r0, r6
   4b1bc:	f7ff fed9 	bl	4af72 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   4b1c0:	4623      	mov	r3, r4
   4b1c2:	aa0a      	add	r2, sp, #40	; 0x28
   4b1c4:	4631      	mov	r1, r6
   4b1c6:	4630      	mov	r0, r6
   4b1c8:	9500      	str	r5, [sp, #0]
   4b1ca:	f7ff fe15 	bl	4adf8 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   4b1ce:	4623      	mov	r3, r4
   4b1d0:	4632      	mov	r2, r6
   4b1d2:	4639      	mov	r1, r7
   4b1d4:	a812      	add	r0, sp, #72	; 0x48
   4b1d6:	9500      	str	r5, [sp, #0]
   4b1d8:	f7ff fe0e 	bl	4adf8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   4b1dc:	4643      	mov	r3, r8
   4b1de:	aa12      	add	r2, sp, #72	; 0x48
   4b1e0:	4649      	mov	r1, r9
   4b1e2:	4648      	mov	r0, r9
   4b1e4:	f7ff feb5 	bl	4af52 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   4b1e8:	4623      	mov	r3, r4
   4b1ea:	4652      	mov	r2, sl
   4b1ec:	4649      	mov	r1, r9
   4b1ee:	4648      	mov	r0, r9
   4b1f0:	9500      	str	r5, [sp, #0]
   4b1f2:	f7ff fe01 	bl	4adf8 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   4b1f6:	4642      	mov	r2, r8
   4b1f8:	a902      	add	r1, sp, #8
   4b1fa:	a812      	add	r0, sp, #72	; 0x48
   4b1fc:	f7ff feb9 	bl	4af72 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   4b200:	a912      	add	r1, sp, #72	; 0x48
   4b202:	4623      	mov	r3, r4
   4b204:	aa0a      	add	r2, sp, #40	; 0x28
   4b206:	4608      	mov	r0, r1
   4b208:	9500      	str	r5, [sp, #0]
   4b20a:	f7ff fdf5 	bl	4adf8 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   4b20e:	4623      	mov	r3, r4
   4b210:	463a      	mov	r2, r7
   4b212:	a912      	add	r1, sp, #72	; 0x48
   4b214:	a80a      	add	r0, sp, #40	; 0x28
   4b216:	9500      	str	r5, [sp, #0]
   4b218:	f7ff fdee 	bl	4adf8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   4b21c:	a90a      	add	r1, sp, #40	; 0x28
   4b21e:	4643      	mov	r3, r8
   4b220:	aa02      	add	r2, sp, #8
   4b222:	4608      	mov	r0, r1
   4b224:	f7ff fe95 	bl	4af52 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   4b228:	4623      	mov	r3, r4
   4b22a:	4652      	mov	r2, sl
   4b22c:	a90a      	add	r1, sp, #40	; 0x28
   4b22e:	4650      	mov	r0, sl
   4b230:	9500      	str	r5, [sp, #0]
   4b232:	f7ff fde1 	bl	4adf8 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   4b236:	462a      	mov	r2, r5
   4b238:	a912      	add	r1, sp, #72	; 0x48
   4b23a:	4638      	mov	r0, r7
   4b23c:	f7ff fd75 	bl	4ad2a <uECC_vli_set>
}
   4b240:	b01a      	add	sp, #104	; 0x68
   4b242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004b246 <uECC_vli_modInv>:
{
   4b246:	b5f0      	push	{r4, r5, r6, r7, lr}
   4b248:	460f      	mov	r7, r1
   4b24a:	b0a1      	sub	sp, #132	; 0x84
   4b24c:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   4b24e:	4619      	mov	r1, r3
   4b250:	4638      	mov	r0, r7
{
   4b252:	4615      	mov	r5, r2
   4b254:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   4b256:	f7ff fd30 	bl	4acba <uECC_vli_isZero>
   4b25a:	b128      	cbz	r0, 4b268 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   4b25c:	4630      	mov	r0, r6
}
   4b25e:	b021      	add	sp, #132	; 0x84
   4b260:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   4b264:	f7ff bd1e 	b.w	4aca4 <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   4b268:	4622      	mov	r2, r4
   4b26a:	4639      	mov	r1, r7
   4b26c:	4668      	mov	r0, sp
   4b26e:	f7ff fd5c 	bl	4ad2a <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   4b272:	4629      	mov	r1, r5
   4b274:	a808      	add	r0, sp, #32
   4b276:	f7ff fd58 	bl	4ad2a <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   4b27a:	a810      	add	r0, sp, #64	; 0x40
   4b27c:	4621      	mov	r1, r4
   4b27e:	f7ff fd11 	bl	4aca4 <uECC_vli_clear>
	u[0] = 1;
   4b282:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   4b284:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   4b286:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   4b288:	f7ff fd0c 	bl	4aca4 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   4b28c:	4622      	mov	r2, r4
   4b28e:	a908      	add	r1, sp, #32
   4b290:	4668      	mov	r0, sp
   4b292:	f7ff fd56 	bl	4ad42 <uECC_vli_cmp_unsafe>
   4b296:	b930      	cbnz	r0, 4b2a6 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   4b298:	4622      	mov	r2, r4
   4b29a:	a910      	add	r1, sp, #64	; 0x40
   4b29c:	4630      	mov	r0, r6
   4b29e:	f7ff fd44 	bl	4ad2a <uECC_vli_set>
}
   4b2a2:	b021      	add	sp, #132	; 0x84
   4b2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   4b2a6:	9b00      	ldr	r3, [sp, #0]
   4b2a8:	07da      	lsls	r2, r3, #31
   4b2aa:	d409      	bmi.n	4b2c0 <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   4b2ac:	4621      	mov	r1, r4
   4b2ae:	4668      	mov	r0, sp
   4b2b0:	f7ff fc63 	bl	4ab7a <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   4b2b4:	4622      	mov	r2, r4
   4b2b6:	4629      	mov	r1, r5
   4b2b8:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   4b2ba:	f7ff fc6b 	bl	4ab94 <vli_modInv_update>
   4b2be:	e7e5      	b.n	4b28c <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   4b2c0:	9b08      	ldr	r3, [sp, #32]
   4b2c2:	07db      	lsls	r3, r3, #31
   4b2c4:	d407      	bmi.n	4b2d6 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   4b2c6:	4621      	mov	r1, r4
   4b2c8:	a808      	add	r0, sp, #32
   4b2ca:	f7ff fc56 	bl	4ab7a <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   4b2ce:	4622      	mov	r2, r4
   4b2d0:	4629      	mov	r1, r5
   4b2d2:	a818      	add	r0, sp, #96	; 0x60
   4b2d4:	e7f1      	b.n	4b2ba <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   4b2d6:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   4b2d8:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   4b2da:	dd1c      	ble.n	4b316 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   4b2dc:	aa08      	add	r2, sp, #32
   4b2de:	4669      	mov	r1, sp
   4b2e0:	4668      	mov	r0, sp
   4b2e2:	f7ff fd55 	bl	4ad90 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   4b2e6:	4621      	mov	r1, r4
   4b2e8:	4668      	mov	r0, sp
   4b2ea:	f7ff fc46 	bl	4ab7a <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   4b2ee:	4622      	mov	r2, r4
   4b2f0:	a918      	add	r1, sp, #96	; 0x60
   4b2f2:	a810      	add	r0, sp, #64	; 0x40
   4b2f4:	f7ff fd25 	bl	4ad42 <uECC_vli_cmp_unsafe>
   4b2f8:	2800      	cmp	r0, #0
   4b2fa:	da05      	bge.n	4b308 <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   4b2fc:	a910      	add	r1, sp, #64	; 0x40
   4b2fe:	4623      	mov	r3, r4
   4b300:	462a      	mov	r2, r5
   4b302:	4608      	mov	r0, r1
   4b304:	f7ff fc1f 	bl	4ab46 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   4b308:	a910      	add	r1, sp, #64	; 0x40
   4b30a:	4623      	mov	r3, r4
   4b30c:	aa18      	add	r2, sp, #96	; 0x60
   4b30e:	4608      	mov	r0, r1
   4b310:	f7ff fd3e 	bl	4ad90 <uECC_vli_sub>
   4b314:	e7ce      	b.n	4b2b4 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   4b316:	466a      	mov	r2, sp
   4b318:	a808      	add	r0, sp, #32
   4b31a:	f7ff fd39 	bl	4ad90 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   4b31e:	4621      	mov	r1, r4
   4b320:	a808      	add	r0, sp, #32
   4b322:	f7ff fc2a 	bl	4ab7a <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   4b326:	4622      	mov	r2, r4
   4b328:	a910      	add	r1, sp, #64	; 0x40
   4b32a:	a818      	add	r0, sp, #96	; 0x60
   4b32c:	f7ff fd09 	bl	4ad42 <uECC_vli_cmp_unsafe>
   4b330:	2800      	cmp	r0, #0
   4b332:	da05      	bge.n	4b340 <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   4b334:	a918      	add	r1, sp, #96	; 0x60
   4b336:	4623      	mov	r3, r4
   4b338:	462a      	mov	r2, r5
   4b33a:	4608      	mov	r0, r1
   4b33c:	f7ff fc03 	bl	4ab46 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   4b340:	a918      	add	r1, sp, #96	; 0x60
   4b342:	4623      	mov	r3, r4
   4b344:	aa10      	add	r2, sp, #64	; 0x40
   4b346:	4608      	mov	r0, r1
   4b348:	f7ff fd22 	bl	4ad90 <uECC_vli_sub>
   4b34c:	e7bf      	b.n	4b2ce <uECC_vli_modInv+0x88>

0004b34e <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   4b34e:	7809      	ldrb	r1, [r1, #0]
   4b350:	0049      	lsls	r1, r1, #1
   4b352:	b249      	sxtb	r1, r1
   4b354:	f7ff bcb1 	b.w	4acba <uECC_vli_isZero>

0004b358 <apply_z>:
{
   4b358:	b5f0      	push	{r4, r5, r6, r7, lr}
   4b35a:	4615      	mov	r5, r2
   4b35c:	b089      	sub	sp, #36	; 0x24
   4b35e:	461c      	mov	r4, r3
   4b360:	4607      	mov	r7, r0
   4b362:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   4b364:	461a      	mov	r2, r3
   4b366:	4629      	mov	r1, r5
   4b368:	4668      	mov	r0, sp
   4b36a:	f7ff fe02 	bl	4af72 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   4b36e:	4623      	mov	r3, r4
   4b370:	466a      	mov	r2, sp
   4b372:	4639      	mov	r1, r7
   4b374:	4638      	mov	r0, r7
   4b376:	f7ff fdec 	bl	4af52 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   4b37a:	4623      	mov	r3, r4
   4b37c:	462a      	mov	r2, r5
   4b37e:	4669      	mov	r1, sp
   4b380:	4668      	mov	r0, sp
   4b382:	f7ff fde6 	bl	4af52 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   4b386:	4623      	mov	r3, r4
   4b388:	466a      	mov	r2, sp
   4b38a:	4631      	mov	r1, r6
   4b38c:	4630      	mov	r0, r6
   4b38e:	f7ff fde0 	bl	4af52 <uECC_vli_modMult_fast>
}
   4b392:	b009      	add	sp, #36	; 0x24
   4b394:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004b396 <XYcZ_add>:
{
   4b396:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4b39a:	b08a      	sub	sp, #40	; 0x28
   4b39c:	4614      	mov	r4, r2
   4b39e:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   4b3a2:	4655      	mov	r5, sl
{
   4b3a4:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   4b3a6:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4b3aa:	9600      	str	r6, [sp, #0]
{
   4b3ac:	4680      	mov	r8, r0
   4b3ae:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4b3b0:	462b      	mov	r3, r5
   4b3b2:	4602      	mov	r2, r0
   4b3b4:	4621      	mov	r1, r4
   4b3b6:	a802      	add	r0, sp, #8
   4b3b8:	f7ff fd1e 	bl	4adf8 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   4b3bc:	a902      	add	r1, sp, #8
   4b3be:	4652      	mov	r2, sl
   4b3c0:	4608      	mov	r0, r1
   4b3c2:	f7ff fdd6 	bl	4af72 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   4b3c6:	4653      	mov	r3, sl
   4b3c8:	aa02      	add	r2, sp, #8
   4b3ca:	4641      	mov	r1, r8
   4b3cc:	4640      	mov	r0, r8
   4b3ce:	f7ff fdc0 	bl	4af52 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   4b3d2:	4653      	mov	r3, sl
   4b3d4:	aa02      	add	r2, sp, #8
   4b3d6:	4621      	mov	r1, r4
   4b3d8:	4620      	mov	r0, r4
   4b3da:	f7ff fdba 	bl	4af52 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   4b3de:	462b      	mov	r3, r5
   4b3e0:	464a      	mov	r2, r9
   4b3e2:	4639      	mov	r1, r7
   4b3e4:	4638      	mov	r0, r7
   4b3e6:	9600      	str	r6, [sp, #0]
   4b3e8:	f7ff fd06 	bl	4adf8 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   4b3ec:	4652      	mov	r2, sl
   4b3ee:	4639      	mov	r1, r7
   4b3f0:	a802      	add	r0, sp, #8
   4b3f2:	f7ff fdbe 	bl	4af72 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   4b3f6:	a902      	add	r1, sp, #8
   4b3f8:	462b      	mov	r3, r5
   4b3fa:	4642      	mov	r2, r8
   4b3fc:	4608      	mov	r0, r1
   4b3fe:	9600      	str	r6, [sp, #0]
   4b400:	f7ff fcfa 	bl	4adf8 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   4b404:	a902      	add	r1, sp, #8
   4b406:	462b      	mov	r3, r5
   4b408:	4622      	mov	r2, r4
   4b40a:	4608      	mov	r0, r1
   4b40c:	9600      	str	r6, [sp, #0]
   4b40e:	f7ff fcf3 	bl	4adf8 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   4b412:	462b      	mov	r3, r5
   4b414:	4642      	mov	r2, r8
   4b416:	4621      	mov	r1, r4
   4b418:	4620      	mov	r0, r4
   4b41a:	9600      	str	r6, [sp, #0]
   4b41c:	f7ff fcec 	bl	4adf8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   4b420:	4653      	mov	r3, sl
   4b422:	4622      	mov	r2, r4
   4b424:	4649      	mov	r1, r9
   4b426:	4648      	mov	r0, r9
   4b428:	f7ff fd93 	bl	4af52 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   4b42c:	462b      	mov	r3, r5
   4b42e:	aa02      	add	r2, sp, #8
   4b430:	4641      	mov	r1, r8
   4b432:	4620      	mov	r0, r4
   4b434:	9600      	str	r6, [sp, #0]
   4b436:	f7ff fcdf 	bl	4adf8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   4b43a:	4653      	mov	r3, sl
   4b43c:	4622      	mov	r2, r4
   4b43e:	4639      	mov	r1, r7
   4b440:	4638      	mov	r0, r7
   4b442:	f7ff fd86 	bl	4af52 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   4b446:	462b      	mov	r3, r5
   4b448:	464a      	mov	r2, r9
   4b44a:	4639      	mov	r1, r7
   4b44c:	4638      	mov	r0, r7
   4b44e:	9600      	str	r6, [sp, #0]
   4b450:	f7ff fcd2 	bl	4adf8 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   4b454:	4632      	mov	r2, r6
   4b456:	a902      	add	r1, sp, #8
   4b458:	4620      	mov	r0, r4
   4b45a:	f7ff fc66 	bl	4ad2a <uECC_vli_set>
}
   4b45e:	b00a      	add	sp, #40	; 0x28
   4b460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004b464 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   4b464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4b468:	b0af      	sub	sp, #188	; 0xbc
   4b46a:	4691      	mov	r9, r2
   4b46c:	9c39      	ldr	r4, [sp, #228]	; 0xe4
   4b46e:	9002      	str	r0, [sp, #8]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   4b470:	f994 6000 	ldrsb.w	r6, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   4b474:	a816      	add	r0, sp, #88	; 0x58
   4b476:	4632      	mov	r2, r6
{
   4b478:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   4b47a:	f7ff fc56 	bl	4ad2a <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   4b47e:	00b3      	lsls	r3, r6, #2
   4b480:	9303      	str	r3, [sp, #12]
   4b482:	eb01 0386 	add.w	r3, r1, r6, lsl #2
{
   4b486:	4688      	mov	r8, r1
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   4b488:	a826      	add	r0, sp, #152	; 0x98
   4b48a:	4619      	mov	r1, r3
   4b48c:	9304      	str	r3, [sp, #16]
   4b48e:	f7ff fc4c 	bl	4ad2a <uECC_vli_set>
	if (initial_Z) {
   4b492:	2d00      	cmp	r5, #0
   4b494:	f000 8081 	beq.w	4b59a <EccPoint_mult+0x136>
		uECC_vli_set(z, initial_Z, num_words);
   4b498:	4629      	mov	r1, r5
   4b49a:	a806      	add	r0, sp, #24
   4b49c:	f7ff fc45 	bl	4ad2a <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   4b4a0:	4632      	mov	r2, r6
   4b4a2:	a916      	add	r1, sp, #88	; 0x58
   4b4a4:	a80e      	add	r0, sp, #56	; 0x38
   4b4a6:	f7ff fc40 	bl	4ad2a <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   4b4aa:	a926      	add	r1, sp, #152	; 0x98
   4b4ac:	a81e      	add	r0, sp, #120	; 0x78
   4b4ae:	f7ff fc3c 	bl	4ad2a <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   4b4b2:	4623      	mov	r3, r4
   4b4b4:	aa06      	add	r2, sp, #24
   4b4b6:	a816      	add	r0, sp, #88	; 0x58
   4b4b8:	f7ff ff4e 	bl	4b358 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   4b4bc:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   4b4c0:	4623      	mov	r3, r4
   4b4c2:	aa06      	add	r2, sp, #24
   4b4c4:	a926      	add	r1, sp, #152	; 0x98
   4b4c6:	a816      	add	r0, sp, #88	; 0x58
   4b4c8:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   4b4ca:	4623      	mov	r3, r4
   4b4cc:	aa06      	add	r2, sp, #24
   4b4ce:	a91e      	add	r1, sp, #120	; 0x78
   4b4d0:	a80e      	add	r0, sp, #56	; 0x38
   4b4d2:	f7ff ff41 	bl	4b358 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   4b4d6:	f9bd 50e0 	ldrsh.w	r5, [sp, #224]	; 0xe0
   4b4da:	3d02      	subs	r5, #2
   4b4dc:	b22d      	sxth	r5, r5
   4b4de:	2d00      	cmp	r5, #0
   4b4e0:	dc62      	bgt.n	4b5a8 <EccPoint_mult+0x144>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4b4e2:	f8d9 5000 	ldr.w	r5, [r9]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4b4e6:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4b4e8:	f005 0701 	and.w	r7, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4b4ec:	ab0e      	add	r3, sp, #56	; 0x38
   4b4ee:	eb03 1947 	add.w	r9, r3, r7, lsl #5
   4b4f2:	43ed      	mvns	r5, r5
   4b4f4:	ab1e      	add	r3, sp, #120	; 0x78
   4b4f6:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   4b4fa:	f005 0501 	and.w	r5, r5, #1
   4b4fe:	ab0e      	add	r3, sp, #56	; 0x38
   4b500:	eb03 1a45 	add.w	sl, r3, r5, lsl #5
   4b504:	ab1e      	add	r3, sp, #120	; 0x78
   4b506:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   4b50a:	462b      	mov	r3, r5
   4b50c:	4652      	mov	r2, sl
   4b50e:	4639      	mov	r1, r7
   4b510:	4648      	mov	r0, r9

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   4b512:	f104 0b04 	add.w	fp, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4b516:	f7ff fe08 	bl	4b12a <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   4b51a:	465b      	mov	r3, fp
   4b51c:	aa0e      	add	r2, sp, #56	; 0x38
   4b51e:	a916      	add	r1, sp, #88	; 0x58
   4b520:	a806      	add	r0, sp, #24
   4b522:	9600      	str	r6, [sp, #0]
   4b524:	f7ff fc68 	bl	4adf8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   4b528:	a906      	add	r1, sp, #24
   4b52a:	4623      	mov	r3, r4
   4b52c:	463a      	mov	r2, r7
   4b52e:	4608      	mov	r0, r1
   4b530:	f7ff fd0f 	bl	4af52 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   4b534:	a906      	add	r1, sp, #24
   4b536:	4623      	mov	r3, r4
   4b538:	4642      	mov	r2, r8
   4b53a:	4608      	mov	r0, r1
   4b53c:	f7ff fd09 	bl	4af52 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   4b540:	a906      	add	r1, sp, #24
   4b542:	4633      	mov	r3, r6
   4b544:	465a      	mov	r2, fp
   4b546:	4608      	mov	r0, r1
   4b548:	f7ff fe7d 	bl	4b246 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   4b54c:	a906      	add	r1, sp, #24
   4b54e:	9a04      	ldr	r2, [sp, #16]
   4b550:	4623      	mov	r3, r4
   4b552:	4608      	mov	r0, r1
   4b554:	f7ff fcfd 	bl	4af52 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   4b558:	a906      	add	r1, sp, #24
   4b55a:	4623      	mov	r3, r4
   4b55c:	464a      	mov	r2, r9
   4b55e:	4608      	mov	r0, r1
   4b560:	f7ff fcf7 	bl	4af52 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   4b564:	463b      	mov	r3, r7
   4b566:	464a      	mov	r2, r9
   4b568:	4629      	mov	r1, r5
   4b56a:	4650      	mov	r0, sl
   4b56c:	9400      	str	r4, [sp, #0]
   4b56e:	f7ff ff12 	bl	4b396 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   4b572:	4623      	mov	r3, r4
   4b574:	aa06      	add	r2, sp, #24
   4b576:	a91e      	add	r1, sp, #120	; 0x78
   4b578:	a80e      	add	r0, sp, #56	; 0x38
   4b57a:	f7ff feed 	bl	4b358 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   4b57e:	9802      	ldr	r0, [sp, #8]
   4b580:	4632      	mov	r2, r6
   4b582:	a90e      	add	r1, sp, #56	; 0x38
   4b584:	f7ff fbd1 	bl	4ad2a <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   4b588:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   4b58c:	a91e      	add	r1, sp, #120	; 0x78
   4b58e:	4418      	add	r0, r3
   4b590:	f7ff fbcb 	bl	4ad2a <uECC_vli_set>
}
   4b594:	b02f      	add	sp, #188	; 0xbc
   4b596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   4b59a:	4631      	mov	r1, r6
   4b59c:	a806      	add	r0, sp, #24
   4b59e:	f7ff fb81 	bl	4aca4 <uECC_vli_clear>
		z[0] = 1;
   4b5a2:	2301      	movs	r3, #1
   4b5a4:	9306      	str	r3, [sp, #24]
   4b5a6:	e77b      	b.n	4b4a0 <EccPoint_mult+0x3c>
		nb = !uECC_vli_testBit(scalar, i);
   4b5a8:	4629      	mov	r1, r5
   4b5aa:	4648      	mov	r0, r9
   4b5ac:	f7ff fb94 	bl	4acd8 <uECC_vli_testBit>
   4b5b0:	fab0 f780 	clz	r7, r0
   4b5b4:	097f      	lsrs	r7, r7, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4b5b6:	f1c7 0101 	rsb	r1, r7, #1
   4b5ba:	ab0e      	add	r3, sp, #56	; 0x38
   4b5bc:	eb03 1b41 	add.w	fp, r3, r1, lsl #5
   4b5c0:	ab1e      	add	r3, sp, #120	; 0x78
   4b5c2:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   4b5c6:	ab0e      	add	r3, sp, #56	; 0x38
   4b5c8:	eb03 1a47 	add.w	sl, r3, r7, lsl #5
   4b5cc:	ab1e      	add	r3, sp, #120	; 0x78
   4b5ce:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   4b5d2:	463b      	mov	r3, r7
   4b5d4:	4652      	mov	r2, sl
   4b5d6:	4658      	mov	r0, fp
   4b5d8:	9400      	str	r4, [sp, #0]
   4b5da:	9105      	str	r1, [sp, #20]
   4b5dc:	f7ff fda5 	bl	4b12a <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   4b5e0:	9905      	ldr	r1, [sp, #20]
   4b5e2:	9400      	str	r4, [sp, #0]
   4b5e4:	460b      	mov	r3, r1
   4b5e6:	465a      	mov	r2, fp
   4b5e8:	4639      	mov	r1, r7
   4b5ea:	4650      	mov	r0, sl
   4b5ec:	f7ff fed3 	bl	4b396 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   4b5f0:	3d01      	subs	r5, #1
   4b5f2:	e773      	b.n	4b4dc <EccPoint_mult+0x78>

0004b5f4 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   4b5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   4b5f8:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   4b5fc:	f119 061f 	adds.w	r6, r9, #31
   4b600:	bf48      	it	mi
   4b602:	f109 063e 	addmi.w	r6, r9, #62	; 0x3e
{
   4b606:	460f      	mov	r7, r1

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   4b608:	f103 0524 	add.w	r5, r3, #36	; 0x24
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   4b60c:	f346 1647 	sbfx	r6, r6, #5, #8
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   4b610:	4601      	mov	r1, r0
{
   4b612:	4690      	mov	r8, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   4b614:	4633      	mov	r3, r6
   4b616:	462a      	mov	r2, r5
   4b618:	4638      	mov	r0, r7
   4b61a:	f7ff fa94 	bl	4ab46 <uECC_vli_add>
   4b61e:	4604      	mov	r4, r0
   4b620:	b990      	cbnz	r0, 4b648 <regularize_k+0x54>
   4b622:	ebb9 1f46 	cmp.w	r9, r6, lsl #5
   4b626:	da06      	bge.n	4b636 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   4b628:	4649      	mov	r1, r9
   4b62a:	4638      	mov	r0, r7
   4b62c:	f7ff fb54 	bl	4acd8 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   4b630:	1e04      	subs	r4, r0, #0
   4b632:	bf18      	it	ne
   4b634:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   4b636:	4633      	mov	r3, r6
   4b638:	462a      	mov	r2, r5
   4b63a:	4639      	mov	r1, r7
   4b63c:	4640      	mov	r0, r8
   4b63e:	f7ff fa82 	bl	4ab46 <uECC_vli_add>

	return carry;
}
   4b642:	4620      	mov	r0, r4
   4b644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   4b648:	2401      	movs	r4, #1
   4b64a:	e7f4      	b.n	4b636 <regularize_k+0x42>

0004b64c <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   4b64c:	b530      	push	{r4, r5, lr}
   4b64e:	4614      	mov	r4, r2
   4b650:	b095      	sub	sp, #84	; 0x54
   4b652:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   4b654:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   4b656:	4623      	mov	r3, r4
{
   4b658:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   4b65a:	a904      	add	r1, sp, #16
   4b65c:	9102      	str	r1, [sp, #8]
   4b65e:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   4b660:	f7ff ffc8 	bl	4b5f4 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   4b664:	fab0 f380 	clz	r3, r0
   4b668:	9401      	str	r4, [sp, #4]
   4b66a:	095b      	lsrs	r3, r3, #5
   4b66c:	aa14      	add	r2, sp, #80	; 0x50
   4b66e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   4b672:	8863      	ldrh	r3, [r4, #2]
   4b674:	3301      	adds	r3, #1
   4b676:	b21b      	sxth	r3, r3
   4b678:	9300      	str	r3, [sp, #0]
   4b67a:	f852 2c48 	ldr.w	r2, [r2, #-72]
   4b67e:	2300      	movs	r3, #0
   4b680:	f104 0144 	add.w	r1, r4, #68	; 0x44
   4b684:	4628      	mov	r0, r5
   4b686:	f7ff feed 	bl	4b464 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   4b68a:	4621      	mov	r1, r4
   4b68c:	4628      	mov	r0, r5
   4b68e:	f7ff fe5e 	bl	4b34e <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   4b692:	fab0 f080 	clz	r0, r0
   4b696:	0940      	lsrs	r0, r0, #5
   4b698:	b015      	add	sp, #84	; 0x54
   4b69a:	bd30      	pop	{r4, r5, pc}

0004b69c <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   4b69c:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   4b69e:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   4b6a0:	1e4f      	subs	r7, r1, #1
   4b6a2:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   4b6a4:	428c      	cmp	r4, r1
   4b6a6:	f105 0501 	add.w	r5, r5, #1
   4b6aa:	db00      	blt.n	4b6ae <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   4b6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   4b6ae:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   4b6b0:	f023 0603 	bic.w	r6, r3, #3
   4b6b4:	f003 0303 	and.w	r3, r3, #3
   4b6b8:	5996      	ldr	r6, [r2, r6]
   4b6ba:	00db      	lsls	r3, r3, #3
   4b6bc:	fa26 f303 	lsr.w	r3, r6, r3
   4b6c0:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   4b6c2:	e7ee      	b.n	4b6a2 <uECC_vli_nativeToBytes+0x6>

0004b6c4 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   4b6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4b6c6:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   4b6c8:	1cd1      	adds	r1, r2, #3
   4b6ca:	bf48      	it	mi
   4b6cc:	1d91      	addmi	r1, r2, #6
   4b6ce:	f341 0187 	sbfx	r1, r1, #2, #8
{
   4b6d2:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   4b6d4:	f7ff fae6 	bl	4aca4 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   4b6d8:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   4b6da:	1e67      	subs	r7, r4, #1
   4b6dc:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   4b6de:	42a2      	cmp	r2, r4
   4b6e0:	f105 0501 	add.w	r5, r5, #1
   4b6e4:	db00      	blt.n	4b6e8 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   4b6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   4b6e8:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   4b6ea:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   4b6ee:	5cb2      	ldrb	r2, [r6, r2]
   4b6f0:	f003 0303 	and.w	r3, r3, #3
   4b6f4:	00db      	lsls	r3, r3, #3
   4b6f6:	409a      	lsls	r2, r3
		native[b / uECC_WORD_SIZE] |=
   4b6f8:	5843      	ldr	r3, [r0, r1]
   4b6fa:	4313      	orrs	r3, r2
   4b6fc:	5043      	str	r3, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   4b6fe:	e7ed      	b.n	4b6dc <uECC_vli_bytesToNative+0x18>

0004b700 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   4b700:	b5f0      	push	{r4, r5, r6, r7, lr}
   4b702:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   4b704:	f991 6000 	ldrsb.w	r6, [r1]
{
   4b708:	4605      	mov	r5, r0
   4b70a:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   4b70c:	f7ff fe1f 	bl	4b34e <EccPoint_isZero>
   4b710:	bb28      	cbnz	r0, 4b75e <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   4b712:	1d27      	adds	r7, r4, #4
   4b714:	4632      	mov	r2, r6
   4b716:	4629      	mov	r1, r5
   4b718:	4638      	mov	r0, r7
   4b71a:	f7ff fb12 	bl	4ad42 <uECC_vli_cmp_unsafe>
   4b71e:	2801      	cmp	r0, #1
   4b720:	d120      	bne.n	4b764 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   4b722:	4632      	mov	r2, r6
   4b724:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   4b728:	4638      	mov	r0, r7
   4b72a:	f7ff fb0a 	bl	4ad42 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   4b72e:	2801      	cmp	r0, #1
   4b730:	d118      	bne.n	4b764 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   4b732:	4622      	mov	r2, r4
   4b734:	4668      	mov	r0, sp
   4b736:	f7ff fc1c 	bl	4af72 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   4b73a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   4b73e:	4622      	mov	r2, r4
   4b740:	4629      	mov	r1, r5
   4b742:	a808      	add	r0, sp, #32
   4b744:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   4b746:	4632      	mov	r2, r6
   4b748:	a908      	add	r1, sp, #32
   4b74a:	4668      	mov	r0, sp
   4b74c:	f7ff fb0e 	bl	4ad6c <uECC_vli_equal>
		return -3;

	return 0;
   4b750:	2800      	cmp	r0, #0
   4b752:	bf14      	ite	ne
   4b754:	f06f 0002 	mvnne.w	r0, #2
   4b758:	2000      	moveq	r0, #0
}
   4b75a:	b011      	add	sp, #68	; 0x44
   4b75c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   4b75e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4b762:	e7fa      	b.n	4b75a <uECC_valid_point+0x5a>
		return -2;
   4b764:	f06f 0001 	mvn.w	r0, #1
   4b768:	e7f7      	b.n	4b75a <uECC_valid_point+0x5a>

0004b76a <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   4b76a:	b5f0      	push	{r4, r5, r6, r7, lr}
   4b76c:	460c      	mov	r4, r1

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   4b76e:	f991 7001 	ldrsb.w	r7, [r1, #1]
{
   4b772:	b091      	sub	sp, #68	; 0x44
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   4b774:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   4b776:	4601      	mov	r1, r0
{
   4b778:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   4b77a:	463a      	mov	r2, r7
   4b77c:	4668      	mov	r0, sp
   4b77e:	f7ff ffa1 	bl	4b6c4 <uECC_vli_bytesToNative>
	_public + curve->num_words,
   4b782:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   4b786:	463a      	mov	r2, r7
   4b788:	19e9      	adds	r1, r5, r7
   4b78a:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   4b78e:	f7ff ff99 	bl	4b6c4 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   4b792:	2210      	movs	r2, #16
   4b794:	4631      	mov	r1, r6
   4b796:	4668      	mov	r0, sp
   4b798:	f7ff fad3 	bl	4ad42 <uECC_vli_cmp_unsafe>
   4b79c:	b128      	cbz	r0, 4b7aa <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   4b79e:	4621      	mov	r1, r4
   4b7a0:	4668      	mov	r0, sp
   4b7a2:	f7ff ffad 	bl	4b700 <uECC_valid_point>
}
   4b7a6:	b011      	add	sp, #68	; 0x44
   4b7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -4;
   4b7aa:	f06f 0003 	mvn.w	r0, #3
   4b7ae:	e7fa      	b.n	4b7a6 <uECC_valid_public_key+0x3c>

0004b7b0 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   4b7b0:	78cb      	ldrb	r3, [r1, #3]
   4b7b2:	7802      	ldrb	r2, [r0, #0]
   4b7b4:	4053      	eors	r3, r2
   4b7b6:	7003      	strb	r3, [r0, #0]
   4b7b8:	884b      	ldrh	r3, [r1, #2]
   4b7ba:	7842      	ldrb	r2, [r0, #1]
   4b7bc:	4053      	eors	r3, r2
   4b7be:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   4b7c0:	680a      	ldr	r2, [r1, #0]
   4b7c2:	7883      	ldrb	r3, [r0, #2]
   4b7c4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4b7c8:	7083      	strb	r3, [r0, #2]
   4b7ca:	680a      	ldr	r2, [r1, #0]
   4b7cc:	78c3      	ldrb	r3, [r0, #3]
   4b7ce:	4053      	eors	r3, r2
   4b7d0:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   4b7d2:	79cb      	ldrb	r3, [r1, #7]
   4b7d4:	7902      	ldrb	r2, [r0, #4]
   4b7d6:	4053      	eors	r3, r2
   4b7d8:	7103      	strb	r3, [r0, #4]
   4b7da:	88cb      	ldrh	r3, [r1, #6]
   4b7dc:	7942      	ldrb	r2, [r0, #5]
   4b7de:	4053      	eors	r3, r2
   4b7e0:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   4b7e2:	684a      	ldr	r2, [r1, #4]
   4b7e4:	7983      	ldrb	r3, [r0, #6]
   4b7e6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4b7ea:	7183      	strb	r3, [r0, #6]
   4b7ec:	684a      	ldr	r2, [r1, #4]
   4b7ee:	79c3      	ldrb	r3, [r0, #7]
   4b7f0:	4053      	eors	r3, r2
   4b7f2:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   4b7f4:	7acb      	ldrb	r3, [r1, #11]
   4b7f6:	7a02      	ldrb	r2, [r0, #8]
   4b7f8:	4053      	eors	r3, r2
   4b7fa:	7203      	strb	r3, [r0, #8]
   4b7fc:	7a42      	ldrb	r2, [r0, #9]
   4b7fe:	894b      	ldrh	r3, [r1, #10]
   4b800:	4053      	eors	r3, r2
   4b802:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   4b804:	688a      	ldr	r2, [r1, #8]
   4b806:	7a83      	ldrb	r3, [r0, #10]
   4b808:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4b80c:	7283      	strb	r3, [r0, #10]
   4b80e:	688a      	ldr	r2, [r1, #8]
   4b810:	7ac3      	ldrb	r3, [r0, #11]
   4b812:	4053      	eors	r3, r2
   4b814:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   4b816:	7bcb      	ldrb	r3, [r1, #15]
   4b818:	7b02      	ldrb	r2, [r0, #12]
   4b81a:	4053      	eors	r3, r2
   4b81c:	7303      	strb	r3, [r0, #12]
   4b81e:	89cb      	ldrh	r3, [r1, #14]
   4b820:	7b42      	ldrb	r2, [r0, #13]
   4b822:	4053      	eors	r3, r2
   4b824:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   4b826:	68ca      	ldr	r2, [r1, #12]
   4b828:	7b83      	ldrb	r3, [r0, #14]
   4b82a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4b82e:	7383      	strb	r3, [r0, #14]
   4b830:	68ca      	ldr	r2, [r1, #12]
   4b832:	7bc3      	ldrb	r3, [r0, #15]
   4b834:	4053      	eors	r3, r2
   4b836:	73c3      	strb	r3, [r0, #15]
}
   4b838:	4770      	bx	lr

0004b83a <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   4b83a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   4b83c:	7802      	ldrb	r2, [r0, #0]
   4b83e:	f88d 2000 	strb.w	r2, [sp]
   4b842:	7942      	ldrb	r2, [r0, #5]
   4b844:	f88d 2001 	strb.w	r2, [sp, #1]
   4b848:	7a82      	ldrb	r2, [r0, #10]
   4b84a:	f88d 2002 	strb.w	r2, [sp, #2]
   4b84e:	7bc2      	ldrb	r2, [r0, #15]
   4b850:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   4b854:	7902      	ldrb	r2, [r0, #4]
   4b856:	f88d 2004 	strb.w	r2, [sp, #4]
   4b85a:	7a42      	ldrb	r2, [r0, #9]
   4b85c:	f88d 2005 	strb.w	r2, [sp, #5]
   4b860:	7b82      	ldrb	r2, [r0, #14]
   4b862:	f88d 2006 	strb.w	r2, [sp, #6]
   4b866:	78c2      	ldrb	r2, [r0, #3]
   4b868:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   4b86c:	7a02      	ldrb	r2, [r0, #8]
   4b86e:	f88d 2008 	strb.w	r2, [sp, #8]
   4b872:	7b42      	ldrb	r2, [r0, #13]
   4b874:	f88d 2009 	strb.w	r2, [sp, #9]
   4b878:	7882      	ldrb	r2, [r0, #2]
   4b87a:	f88d 200a 	strb.w	r2, [sp, #10]
   4b87e:	79c2      	ldrb	r2, [r0, #7]
   4b880:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   4b884:	7b02      	ldrb	r2, [r0, #12]
   4b886:	f88d 200c 	strb.w	r2, [sp, #12]
   4b88a:	7842      	ldrb	r2, [r0, #1]
   4b88c:	7ac3      	ldrb	r3, [r0, #11]
   4b88e:	f88d 200d 	strb.w	r2, [sp, #13]
   4b892:	7982      	ldrb	r2, [r0, #6]
   4b894:	f88d 200e 	strb.w	r2, [sp, #14]
   4b898:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   4b89c:	2310      	movs	r3, #16
   4b89e:	466a      	mov	r2, sp
   4b8a0:	4619      	mov	r1, r3
   4b8a2:	f7ff f88c 	bl	4a9be <_copy>
}
   4b8a6:	b005      	add	sp, #20
   4b8a8:	f85d fb04 	ldr.w	pc, [sp], #4

0004b8ac <mult_row_column>:
{
   4b8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4b8ae:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   4b8b0:	7808      	ldrb	r0, [r1, #0]
{
   4b8b2:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   4b8b4:	f7ff f892 	bl	4a9dc <_double_byte>
   4b8b8:	4605      	mov	r5, r0
   4b8ba:	7860      	ldrb	r0, [r4, #1]
   4b8bc:	f7ff f88e 	bl	4a9dc <_double_byte>
   4b8c0:	78a2      	ldrb	r2, [r4, #2]
   4b8c2:	7863      	ldrb	r3, [r4, #1]
   4b8c4:	4053      	eors	r3, r2
   4b8c6:	78e2      	ldrb	r2, [r4, #3]
   4b8c8:	4053      	eors	r3, r2
   4b8ca:	405d      	eors	r5, r3
   4b8cc:	4068      	eors	r0, r5
   4b8ce:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   4b8d0:	7860      	ldrb	r0, [r4, #1]
   4b8d2:	7827      	ldrb	r7, [r4, #0]
   4b8d4:	f7ff f882 	bl	4a9dc <_double_byte>
   4b8d8:	4605      	mov	r5, r0
   4b8da:	78a0      	ldrb	r0, [r4, #2]
   4b8dc:	f7ff f87e 	bl	4a9dc <_double_byte>
   4b8e0:	78a3      	ldrb	r3, [r4, #2]
   4b8e2:	405f      	eors	r7, r3
   4b8e4:	78e3      	ldrb	r3, [r4, #3]
   4b8e6:	405f      	eors	r7, r3
   4b8e8:	407d      	eors	r5, r7
   4b8ea:	4068      	eors	r0, r5
   4b8ec:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   4b8ee:	7863      	ldrb	r3, [r4, #1]
   4b8f0:	7827      	ldrb	r7, [r4, #0]
   4b8f2:	78a0      	ldrb	r0, [r4, #2]
   4b8f4:	405f      	eors	r7, r3
   4b8f6:	f7ff f871 	bl	4a9dc <_double_byte>
   4b8fa:	4605      	mov	r5, r0
   4b8fc:	78e0      	ldrb	r0, [r4, #3]
   4b8fe:	f7ff f86d 	bl	4a9dc <_double_byte>
   4b902:	78e3      	ldrb	r3, [r4, #3]
   4b904:	405f      	eors	r7, r3
   4b906:	407d      	eors	r5, r7
   4b908:	4068      	eors	r0, r5
   4b90a:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   4b90c:	7820      	ldrb	r0, [r4, #0]
   4b90e:	f7ff f865 	bl	4a9dc <_double_byte>
   4b912:	7862      	ldrb	r2, [r4, #1]
   4b914:	7823      	ldrb	r3, [r4, #0]
   4b916:	4053      	eors	r3, r2
   4b918:	78a2      	ldrb	r2, [r4, #2]
   4b91a:	4053      	eors	r3, r2
   4b91c:	ea80 0503 	eor.w	r5, r0, r3
   4b920:	78e0      	ldrb	r0, [r4, #3]
   4b922:	f7ff f85b 	bl	4a9dc <_double_byte>
   4b926:	b2ed      	uxtb	r5, r5
   4b928:	4045      	eors	r5, r0
   4b92a:	70f5      	strb	r5, [r6, #3]
}
   4b92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004b92e <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   4b92e:	b570      	push	{r4, r5, r6, lr}
   4b930:	4614      	mov	r4, r2
   4b932:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   4b934:	4605      	mov	r5, r0
   4b936:	2800      	cmp	r0, #0
   4b938:	d049      	beq.n	4b9ce <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   4b93a:	2900      	cmp	r1, #0
   4b93c:	d049      	beq.n	4b9d2 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   4b93e:	2a00      	cmp	r2, #0
   4b940:	d049      	beq.n	4b9d6 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   4b942:	2310      	movs	r3, #16
   4b944:	460a      	mov	r2, r1
   4b946:	4668      	mov	r0, sp
   4b948:	4619      	mov	r1, r3
   4b94a:	f7ff f838 	bl	4a9be <_copy>
	add_round_key(state, s->words);
   4b94e:	4621      	mov	r1, r4
   4b950:	4668      	mov	r0, sp
   4b952:	f7ff ff2d 	bl	4b7b0 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   4b956:	3410      	adds	r4, #16
   4b958:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   4b95c:	4668      	mov	r0, sp
   4b95e:	f7e1 f90d 	bl	2cb7c <sub_bytes>
		shift_rows(state);
   4b962:	4668      	mov	r0, sp
   4b964:	f7ff ff69 	bl	4b83a <shift_rows>
	mult_row_column(t, s);
   4b968:	4669      	mov	r1, sp
   4b96a:	a804      	add	r0, sp, #16
   4b96c:	f7ff ff9e 	bl	4b8ac <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   4b970:	a901      	add	r1, sp, #4
   4b972:	a805      	add	r0, sp, #20
   4b974:	f7ff ff9a 	bl	4b8ac <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   4b978:	a902      	add	r1, sp, #8
   4b97a:	a806      	add	r0, sp, #24
   4b97c:	f7ff ff96 	bl	4b8ac <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   4b980:	a903      	add	r1, sp, #12
   4b982:	a807      	add	r0, sp, #28
   4b984:	f7ff ff92 	bl	4b8ac <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   4b988:	2310      	movs	r3, #16
   4b98a:	4619      	mov	r1, r3
   4b98c:	eb0d 0203 	add.w	r2, sp, r3
   4b990:	4668      	mov	r0, sp
   4b992:	f7ff f814 	bl	4a9be <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   4b996:	4621      	mov	r1, r4
   4b998:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   4b99a:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   4b99c:	f7ff ff08 	bl	4b7b0 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   4b9a0:	42b4      	cmp	r4, r6
   4b9a2:	d1db      	bne.n	4b95c <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   4b9a4:	f7e1 f8ea 	bl	2cb7c <sub_bytes>
	shift_rows(state);
   4b9a8:	4668      	mov	r0, sp
   4b9aa:	f7ff ff46 	bl	4b83a <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   4b9ae:	4621      	mov	r1, r4
   4b9b0:	4668      	mov	r0, sp
   4b9b2:	f7ff fefd 	bl	4b7b0 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   4b9b6:	2310      	movs	r3, #16
   4b9b8:	4619      	mov	r1, r3
   4b9ba:	466a      	mov	r2, sp
   4b9bc:	4628      	mov	r0, r5
   4b9be:	f7fe fffe 	bl	4a9be <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   4b9c2:	4668      	mov	r0, sp
   4b9c4:	2210      	movs	r2, #16
   4b9c6:	2100      	movs	r1, #0
   4b9c8:	f7ff f806 	bl	4a9d8 <_set>

	return TC_CRYPTO_SUCCESS;
   4b9cc:	2001      	movs	r0, #1
}
   4b9ce:	b008      	add	sp, #32
   4b9d0:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   4b9d2:	4608      	mov	r0, r1
   4b9d4:	e7fb      	b.n	4b9ce <tc_aes_encrypt+0xa0>
   4b9d6:	4610      	mov	r0, r2
   4b9d8:	e7f9      	b.n	4b9ce <tc_aes_encrypt+0xa0>

0004b9da <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   4b9da:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   4b9dc:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   4b9de:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   4b9e0:	f912 3b10 	ldrsb.w	r3, [r2], #16
   4b9e4:	2b00      	cmp	r3, #0
   4b9e6:	bfac      	ite	ge
   4b9e8:	2300      	movge	r3, #0
   4b9ea:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   4b9ec:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   4b9f0:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   4b9f4:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   4b9f6:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   4b9fa:	d002      	beq.n	4ba02 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   4b9fc:	7813      	ldrb	r3, [r2, #0]
   4b9fe:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   4ba00:	e7f4      	b.n	4b9ec <gf_double+0x12>
	}
}
   4ba02:	bd10      	pop	{r4, pc}

0004ba04 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   4ba04:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   4ba06:	b120      	cbz	r0, 4ba12 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   4ba08:	2258      	movs	r2, #88	; 0x58
   4ba0a:	2100      	movs	r1, #0
   4ba0c:	f7fe ffe4 	bl	4a9d8 <_set>
   4ba10:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   4ba12:	bd08      	pop	{r3, pc}

0004ba14 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   4ba14:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   4ba16:	4604      	mov	r4, r0
   4ba18:	b188      	cbz	r0, 4ba3e <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   4ba1a:	2210      	movs	r2, #16
   4ba1c:	2100      	movs	r1, #0
   4ba1e:	f7fe ffdb 	bl	4a9d8 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   4ba22:	2210      	movs	r2, #16
   4ba24:	f104 0030 	add.w	r0, r4, #48	; 0x30
   4ba28:	2100      	movs	r1, #0
   4ba2a:	f7fe ffd5 	bl	4a9d8 <_set>
	s->leftover_offset = 0;
   4ba2e:	2300      	movs	r3, #0
   4ba30:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   4ba32:	2200      	movs	r2, #0
   4ba34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   4ba38:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   4ba3c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   4ba3e:	bd10      	pop	{r4, pc}

0004ba40 <tc_cmac_setup>:
{
   4ba40:	b570      	push	{r4, r5, r6, lr}
   4ba42:	4604      	mov	r4, r0
   4ba44:	460d      	mov	r5, r1
   4ba46:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   4ba48:	b310      	cbz	r0, 4ba90 <tc_cmac_setup+0x50>
   4ba4a:	b311      	cbz	r1, 4ba92 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   4ba4c:	2258      	movs	r2, #88	; 0x58
   4ba4e:	2100      	movs	r1, #0
   4ba50:	f7fe ffc2 	bl	4a9d8 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   4ba54:	4629      	mov	r1, r5
	s->sched = sched;
   4ba56:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   4ba58:	4630      	mov	r0, r6
   4ba5a:	f7e1 f89b 	bl	2cb94 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   4ba5e:	2210      	movs	r2, #16
   4ba60:	2100      	movs	r1, #0
   4ba62:	4620      	mov	r0, r4
   4ba64:	f7fe ffb8 	bl	4a9d8 <_set>
	gf_double (s->K1, s->iv);
   4ba68:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   4ba6c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4ba6e:	4621      	mov	r1, r4
   4ba70:	4620      	mov	r0, r4
   4ba72:	f7ff ff5c 	bl	4b92e <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   4ba76:	4621      	mov	r1, r4
   4ba78:	4628      	mov	r0, r5
   4ba7a:	f7ff ffae 	bl	4b9da <gf_double>
	gf_double (s->K2, s->K1);
   4ba7e:	4629      	mov	r1, r5
   4ba80:	f104 0020 	add.w	r0, r4, #32
   4ba84:	f7ff ffa9 	bl	4b9da <gf_double>
	tc_cmac_init(s);
   4ba88:	4620      	mov	r0, r4
   4ba8a:	f7ff ffc3 	bl	4ba14 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   4ba8e:	2001      	movs	r0, #1
}
   4ba90:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   4ba92:	4608      	mov	r0, r1
   4ba94:	e7fc      	b.n	4ba90 <tc_cmac_setup+0x50>

0004ba96 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   4ba96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4ba9a:	460e      	mov	r6, r1
   4ba9c:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   4ba9e:	4604      	mov	r4, r0
   4baa0:	2800      	cmp	r0, #0
   4baa2:	d060      	beq.n	4bb66 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   4baa4:	b1fa      	cbz	r2, 4bae6 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   4baa6:	2900      	cmp	r1, #0
   4baa8:	d05d      	beq.n	4bb66 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   4baaa:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   4baae:	ea53 0102 	orrs.w	r1, r3, r2
   4bab2:	d058      	beq.n	4bb66 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   4bab4:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   4bab6:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   4baba:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   4babe:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   4bac2:	f1b8 0f00 	cmp.w	r8, #0
   4bac6:	d02c      	beq.n	4bb22 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   4bac8:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   4bacc:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   4bad0:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   4bad2:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   4bad4:	d20a      	bcs.n	4baec <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   4bad6:	462b      	mov	r3, r5
   4bad8:	4632      	mov	r2, r6
   4bada:	4629      	mov	r1, r5
   4badc:	f7fe ff6f 	bl	4a9be <_copy>
			s->leftover_offset += data_length;
   4bae0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   4bae2:	442b      	add	r3, r5
   4bae4:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   4bae6:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   4bae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   4baec:	463b      	mov	r3, r7
   4baee:	4632      	mov	r2, r6
   4baf0:	4639      	mov	r1, r7
   4baf2:	f7fe ff64 	bl	4a9be <_copy>
		data_length -= remaining_space;
   4baf6:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   4baf8:	2300      	movs	r3, #0
   4bafa:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   4bafc:	4445      	add	r5, r8
		data += remaining_space;
   4bafe:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4bb00:	1e63      	subs	r3, r4, #1
   4bb02:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   4bb06:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4bb0a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4bb0e:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   4bb10:	ea82 0200 	eor.w	r2, r2, r0
   4bb14:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4bb16:	d1f6      	bne.n	4bb06 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   4bb18:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4bb1a:	4621      	mov	r1, r4
   4bb1c:	4620      	mov	r0, r4
   4bb1e:	f7ff ff06 	bl	4b92e <tc_aes_encrypt>
   4bb22:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   4bb26:	2d10      	cmp	r5, #16
   4bb28:	d80a      	bhi.n	4bb40 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   4bb2a:	2d00      	cmp	r5, #0
   4bb2c:	d0db      	beq.n	4bae6 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   4bb2e:	462b      	mov	r3, r5
   4bb30:	4632      	mov	r2, r6
   4bb32:	4629      	mov	r1, r5
   4bb34:	f104 0030 	add.w	r0, r4, #48	; 0x30
   4bb38:	f7fe ff41 	bl	4a9be <_copy>
		s->leftover_offset = data_length;
   4bb3c:	6465      	str	r5, [r4, #68]	; 0x44
   4bb3e:	e7d2      	b.n	4bae6 <tc_cmac_update+0x50>
   4bb40:	1e63      	subs	r3, r4, #1
   4bb42:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   4bb44:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4bb48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4bb4c:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   4bb4e:	ea82 0200 	eor.w	r2, r2, r0
   4bb52:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4bb54:	d1f6      	bne.n	4bb44 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   4bb56:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4bb58:	4621      	mov	r1, r4
   4bb5a:	4620      	mov	r0, r4
   4bb5c:	f7ff fee7 	bl	4b92e <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   4bb60:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   4bb62:	3d10      	subs	r5, #16
   4bb64:	e7df      	b.n	4bb26 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   4bb66:	2000      	movs	r0, #0
   4bb68:	e7be      	b.n	4bae8 <tc_cmac_update+0x52>

0004bb6a <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   4bb6a:	b570      	push	{r4, r5, r6, lr}
   4bb6c:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   4bb6e:	4605      	mov	r5, r0
   4bb70:	b1e8      	cbz	r0, 4bbae <tc_cmac_final+0x44>
   4bb72:	b369      	cbz	r1, 4bbd0 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   4bb74:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   4bb76:	2a10      	cmp	r2, #16
   4bb78:	d11a      	bne.n	4bbb0 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   4bb7a:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4bb7c:	1e63      	subs	r3, r4, #1
   4bb7e:	3901      	subs	r1, #1
   4bb80:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   4bb84:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4bb88:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   4bb8c:	4072      	eors	r2, r6
   4bb8e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4bb92:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   4bb94:	ea82 0206 	eor.w	r2, r2, r6
   4bb98:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4bb9a:	d1f3      	bne.n	4bb84 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   4bb9c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4bb9e:	4621      	mov	r1, r4
   4bba0:	4628      	mov	r0, r5
   4bba2:	f7ff fec4 	bl	4b92e <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   4bba6:	4620      	mov	r0, r4
   4bba8:	f7ff ff2c 	bl	4ba04 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   4bbac:	2001      	movs	r0, #1
}
   4bbae:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   4bbb0:	f102 0030 	add.w	r0, r2, #48	; 0x30
   4bbb4:	2100      	movs	r1, #0
   4bbb6:	f1c2 0210 	rsb	r2, r2, #16
   4bbba:	4420      	add	r0, r4
   4bbbc:	f7fe ff0c 	bl	4a9d8 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   4bbc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   4bbc2:	4423      	add	r3, r4
   4bbc4:	2280      	movs	r2, #128	; 0x80
   4bbc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   4bbca:	f104 0120 	add.w	r1, r4, #32
   4bbce:	e7d5      	b.n	4bb7c <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   4bbd0:	4608      	mov	r0, r1
   4bbd2:	e7ec      	b.n	4bbae <tc_cmac_final+0x44>

0004bbd4 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   4bbd4:	f004 be57 	b.w	50886 <z_fatal_error>

0004bbd8 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   4bbd8:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   4bbda:	6800      	ldr	r0, [r0, #0]
   4bbdc:	f004 be53 	b.w	50886 <z_fatal_error>

0004bbe0 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   4bbe0:	2100      	movs	r1, #0
   4bbe2:	2001      	movs	r0, #1
   4bbe4:	f7ff bff6 	b.w	4bbd4 <z_arm_fatal_error>

0004bbe8 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   4bbe8:	b508      	push	{r3, lr}
	handler();
   4bbea:	f7e1 f899 	bl	2cd20 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   4bbee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   4bbf2:	f7e1 b959 	b.w	2cea8 <z_arm_exc_exit>

0004bbf6 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   4bbf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4bbfa:	4684      	mov	ip, r0
   4bbfc:	460f      	mov	r7, r1
	register const char *s = nptr;
   4bbfe:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   4bc00:	4621      	mov	r1, r4
   4bc02:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
}

static inline int isspace(int c)
{
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   4bc06:	2b20      	cmp	r3, #32
   4bc08:	d0fa      	beq.n	4bc00 <strtoul+0xa>
   4bc0a:	f1a3 0009 	sub.w	r0, r3, #9
   4bc0e:	2804      	cmp	r0, #4
   4bc10:	d9f6      	bls.n	4bc00 <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
   4bc12:	2b2d      	cmp	r3, #45	; 0x2d
   4bc14:	d125      	bne.n	4bc62 <strtoul+0x6c>
		neg = 1;
		c = *s++;
   4bc16:	784b      	ldrb	r3, [r1, #1]
   4bc18:	1c8c      	adds	r4, r1, #2
		neg = 1;
   4bc1a:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   4bc1e:	bb3a      	cbnz	r2, 4bc70 <strtoul+0x7a>
   4bc20:	2b30      	cmp	r3, #48	; 0x30
   4bc22:	d032      	beq.n	4bc8a <strtoul+0x94>
		s += 2;
		base = 16;
	}

	if (base == 0) {
		base = c == '0' ? 8 : 10;
   4bc24:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   4bc26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   4bc2a:	2500      	movs	r5, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   4bc2c:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   4bc30:	fb02 f801 	mul.w	r8, r2, r1
   4bc34:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
   4bc38:	4628      	mov	r0, r5
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   4bc3a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
		if (isdigit(c)) {
   4bc3e:	2e09      	cmp	r6, #9
   4bc40:	d82a      	bhi.n	4bc98 <strtoul+0xa2>
			c -= '0';
   4bc42:	4633      	mov	r3, r6
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   4bc44:	429a      	cmp	r2, r3
   4bc46:	dd37      	ble.n	4bcb8 <strtoul+0xc2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   4bc48:	1c6e      	adds	r6, r5, #1
   4bc4a:	d007      	beq.n	4bc5c <strtoul+0x66>
   4bc4c:	4288      	cmp	r0, r1
   4bc4e:	d830      	bhi.n	4bcb2 <strtoul+0xbc>
   4bc50:	d101      	bne.n	4bc56 <strtoul+0x60>
   4bc52:	4543      	cmp	r3, r8
   4bc54:	dc2d      	bgt.n	4bcb2 <strtoul+0xbc>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   4bc56:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   4bc5a:	2501      	movs	r5, #1
	for (acc = 0, any = 0;; c = *s++) {
   4bc5c:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   4bc60:	e7eb      	b.n	4bc3a <strtoul+0x44>
	} else if (c == '+') {
   4bc62:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   4bc64:	bf04      	itt	eq
   4bc66:	784b      	ldrbeq	r3, [r1, #1]
   4bc68:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   4bc6a:	f04f 0e00 	mov.w	lr, #0
   4bc6e:	e7d6      	b.n	4bc1e <strtoul+0x28>
	if ((base == 0 || base == 16) &&
   4bc70:	2a10      	cmp	r2, #16
   4bc72:	d1d8      	bne.n	4bc26 <strtoul+0x30>
   4bc74:	2b30      	cmp	r3, #48	; 0x30
   4bc76:	d1d6      	bne.n	4bc26 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   4bc78:	7821      	ldrb	r1, [r4, #0]
   4bc7a:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   4bc7e:	2958      	cmp	r1, #88	; 0x58
   4bc80:	d1d1      	bne.n	4bc26 <strtoul+0x30>
		c = s[1];
   4bc82:	7863      	ldrb	r3, [r4, #1]
		base = 16;
   4bc84:	2210      	movs	r2, #16
		s += 2;
   4bc86:	3402      	adds	r4, #2
	if (base == 0) {
   4bc88:	e7cd      	b.n	4bc26 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   4bc8a:	7822      	ldrb	r2, [r4, #0]
   4bc8c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   4bc90:	2a58      	cmp	r2, #88	; 0x58
   4bc92:	d0f6      	beq.n	4bc82 <strtoul+0x8c>
		base = c == '0' ? 8 : 10;
   4bc94:	2208      	movs	r2, #8
   4bc96:	e7c6      	b.n	4bc26 <strtoul+0x30>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   4bc98:	f043 0620 	orr.w	r6, r3, #32
   4bc9c:	3e61      	subs	r6, #97	; 0x61
		} else if (isalpha(c)) {
   4bc9e:	2e19      	cmp	r6, #25
   4bca0:	d80a      	bhi.n	4bcb8 <strtoul+0xc2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   4bca2:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   4bca6:	2e1a      	cmp	r6, #26
   4bca8:	bf34      	ite	cc
   4bcaa:	2637      	movcc	r6, #55	; 0x37
   4bcac:	2657      	movcs	r6, #87	; 0x57
   4bcae:	1b9b      	subs	r3, r3, r6
   4bcb0:	e7c8      	b.n	4bc44 <strtoul+0x4e>
			any = -1;
   4bcb2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   4bcb6:	e7d1      	b.n	4bc5c <strtoul+0x66>
		}
	}
	if (any < 0) {
   4bcb8:	1c6b      	adds	r3, r5, #1
   4bcba:	d107      	bne.n	4bccc <strtoul+0xd6>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   4bcbc:	f7fb fe9e 	bl	479fc <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   4bcc0:	2322      	movs	r3, #34	; 0x22
   4bcc2:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   4bcc4:	4628      	mov	r0, r5
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   4bcc6:	b947      	cbnz	r7, 4bcda <strtoul+0xe4>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   4bcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   4bccc:	f1be 0f00 	cmp.w	lr, #0
   4bcd0:	d000      	beq.n	4bcd4 <strtoul+0xde>
		acc = -acc;
   4bcd2:	4240      	negs	r0, r0
	if (endptr != NULL) {
   4bcd4:	2f00      	cmp	r7, #0
   4bcd6:	d0f7      	beq.n	4bcc8 <strtoul+0xd2>
		*endptr = (char *)(any ? s - 1 : nptr);
   4bcd8:	b10d      	cbz	r5, 4bcde <strtoul+0xe8>
   4bcda:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   4bcde:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   4bce2:	e7f1      	b.n	4bcc8 <strtoul+0xd2>

0004bce4 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   4bce4:	3901      	subs	r1, #1
   4bce6:	4603      	mov	r3, r0
   4bce8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   4bcec:	b90a      	cbnz	r2, 4bcf2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   4bcee:	701a      	strb	r2, [r3, #0]

	return dest;
}
   4bcf0:	4770      	bx	lr
		*d = *s;
   4bcf2:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   4bcf6:	e7f7      	b.n	4bce8 <strcpy+0x4>

0004bcf8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   4bcf8:	4603      	mov	r3, r0
	size_t n = 0;
   4bcfa:	2000      	movs	r0, #0

	while (*s != '\0') {
   4bcfc:	5c1a      	ldrb	r2, [r3, r0]
   4bcfe:	b902      	cbnz	r2, 4bd02 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   4bd00:	4770      	bx	lr
		n++;
   4bd02:	3001      	adds	r0, #1
   4bd04:	e7fa      	b.n	4bcfc <strlen+0x4>

0004bd06 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   4bd06:	1e43      	subs	r3, r0, #1
   4bd08:	3901      	subs	r1, #1
   4bd0a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4bd0e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   4bd12:	4282      	cmp	r2, r0
   4bd14:	d101      	bne.n	4bd1a <strcmp+0x14>
   4bd16:	2a00      	cmp	r2, #0
   4bd18:	d1f7      	bne.n	4bd0a <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   4bd1a:	1a10      	subs	r0, r2, r0
   4bd1c:	4770      	bx	lr

0004bd1e <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   4bd1e:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   4bd20:	460b      	mov	r3, r1
   4bd22:	4605      	mov	r5, r0
   4bd24:	b16a      	cbz	r2, 4bd42 <strncmp+0x24>
   4bd26:	f810 6b01 	ldrb.w	r6, [r0], #1
   4bd2a:	781c      	ldrb	r4, [r3, #0]
   4bd2c:	42b4      	cmp	r4, r6
   4bd2e:	f101 0101 	add.w	r1, r1, #1
   4bd32:	d100      	bne.n	4bd36 <strncmp+0x18>
   4bd34:	b91c      	cbnz	r4, 4bd3e <strncmp+0x20>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   4bd36:	782a      	ldrb	r2, [r5, #0]
   4bd38:	781b      	ldrb	r3, [r3, #0]
   4bd3a:	1ad0      	subs	r0, r2, r3
   4bd3c:	e002      	b.n	4bd44 <strncmp+0x26>
		n--;
   4bd3e:	3a01      	subs	r2, #1
   4bd40:	e7ee      	b.n	4bd20 <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   4bd42:	4610      	mov	r0, r2
}
   4bd44:	bd70      	pop	{r4, r5, r6, pc}

0004bd46 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   4bd46:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   4bd48:	b15a      	cbz	r2, 4bd62 <memcmp+0x1c>
   4bd4a:	3901      	subs	r1, #1
   4bd4c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   4bd4e:	f810 2b01 	ldrb.w	r2, [r0], #1
   4bd52:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   4bd56:	42a0      	cmp	r0, r4
   4bd58:	d001      	beq.n	4bd5e <memcmp+0x18>
   4bd5a:	429a      	cmp	r2, r3
   4bd5c:	d0f7      	beq.n	4bd4e <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   4bd5e:	1ad0      	subs	r0, r2, r3
}
   4bd60:	bd10      	pop	{r4, pc}
		return 0;
   4bd62:	4610      	mov	r0, r2
   4bd64:	e7fc      	b.n	4bd60 <memcmp+0x1a>

0004bd66 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   4bd66:	b510      	push	{r4, lr}
   4bd68:	1e43      	subs	r3, r0, #1
   4bd6a:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   4bd6c:	4291      	cmp	r1, r2
   4bd6e:	d100      	bne.n	4bd72 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   4bd70:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   4bd72:	f811 4b01 	ldrb.w	r4, [r1], #1
   4bd76:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   4bd7a:	e7f7      	b.n	4bd6c <memcpy+0x6>

0004bd7c <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   4bd7c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   4bd7e:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   4bd80:	4603      	mov	r3, r0
	while (n > 0) {
   4bd82:	4293      	cmp	r3, r2
   4bd84:	d100      	bne.n	4bd88 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   4bd86:	4770      	bx	lr
		*(d_byte++) = c_byte;
   4bd88:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   4bd8c:	e7f9      	b.n	4bd82 <memset+0x6>

0004bd8e <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   4bd8e:	684b      	ldr	r3, [r1, #4]
   4bd90:	2b01      	cmp	r3, #1
   4bd92:	dd07      	ble.n	4bda4 <sprintf_out+0x16>
		*(p->ptr) = c;
   4bd94:	680b      	ldr	r3, [r1, #0]
   4bd96:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   4bd98:	680b      	ldr	r3, [r1, #0]
   4bd9a:	3301      	adds	r3, #1
   4bd9c:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   4bd9e:	684b      	ldr	r3, [r1, #4]
   4bda0:	3b01      	subs	r3, #1
   4bda2:	604b      	str	r3, [r1, #4]
}
   4bda4:	2000      	movs	r0, #0
   4bda6:	4770      	bx	lr

0004bda8 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   4bda8:	b084      	sub	sp, #16
   4bdaa:	ab04      	add	r3, sp, #16
   4bdac:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   4bdb0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   4bdb4:	2b06      	cmp	r3, #6
   4bdb6:	d108      	bne.n	4bdca <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   4bdb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   4bdbc:	2201      	movs	r2, #1
   4bdbe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   4bdc2:	f3bf 8f4f 	dsb	sy
        __WFE();
   4bdc6:	bf20      	wfe
    while (true)
   4bdc8:	e7fd      	b.n	4bdc6 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   4bdca:	b004      	add	sp, #16
   4bdcc:	4770      	bx	lr

0004bdce <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   4bdce:	b084      	sub	sp, #16
   4bdd0:	ab04      	add	r3, sp, #16
   4bdd2:	e903 0007 	stmdb	r3, {r0, r1, r2}
   4bdd6:	2300      	movs	r3, #0
   4bdd8:	f383 8811 	msr	BASEPRI, r3
   4bddc:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   4bde0:	b004      	add	sp, #16
   4bde2:	4770      	bx	lr

0004bde4 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   4bde4:	b530      	push	{r4, r5, lr}
   4bde6:	b085      	sub	sp, #20
   4bde8:	4604      	mov	r4, r0
   4bdea:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   4bdec:	4668      	mov	r0, sp
   4bdee:	2203      	movs	r2, #3
   4bdf0:	f7ff ffb9 	bl	4bd66 <memcpy>
	(void)memset(res + 3, 0, 13);
   4bdf4:	220d      	movs	r2, #13
   4bdf6:	2100      	movs	r1, #0
   4bdf8:	f10d 0003 	add.w	r0, sp, #3
   4bdfc:	f7ff ffbe 	bl	4bd7c <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   4be00:	4620      	mov	r0, r4
   4be02:	466a      	mov	r2, sp
   4be04:	4669      	mov	r1, sp
   4be06:	f7eb f98b 	bl	37120 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   4be0a:	4604      	mov	r4, r0
   4be0c:	b920      	cbnz	r0, 4be18 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   4be0e:	2203      	movs	r2, #3
   4be10:	4669      	mov	r1, sp
   4be12:	4628      	mov	r0, r5
   4be14:	f7ff ffa7 	bl	4bd66 <memcpy>

	return 0;
}
   4be18:	4620      	mov	r0, r4
   4be1a:	b005      	add	sp, #20
   4be1c:	bd30      	pop	{r4, r5, pc}

0004be1e <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   4be1e:	b513      	push	{r0, r1, r4, lr}
   4be20:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   4be22:	aa01      	add	r2, sp, #4
   4be24:	3103      	adds	r1, #3
   4be26:	f7ff ffdd 	bl	4bde4 <ah>
	if (err) {
   4be2a:	b948      	cbnz	r0, 4be40 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   4be2c:	2203      	movs	r2, #3
   4be2e:	a901      	add	r1, sp, #4
   4be30:	4620      	mov	r0, r4
   4be32:	f7ff ff88 	bl	4bd46 <memcmp>
   4be36:	fab0 f080 	clz	r0, r0
   4be3a:	0940      	lsrs	r0, r0, #5
}
   4be3c:	b002      	add	sp, #8
   4be3e:	bd10      	pop	{r4, pc}
		return false;
   4be40:	2000      	movs	r0, #0
   4be42:	e7fb      	b.n	4be3c <bt_rpa_irk_matches+0x1e>

0004be44 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   4be44:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   4be46:	1cce      	adds	r6, r1, #3
{
   4be48:	4605      	mov	r5, r0
   4be4a:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   4be4c:	4630      	mov	r0, r6
   4be4e:	2103      	movs	r1, #3
   4be50:	f7eb f964 	bl	3711c <bt_rand>
	if (err) {
   4be54:	b960      	cbnz	r0, 4be70 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   4be56:	7963      	ldrb	r3, [r4, #5]
   4be58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4be5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   4be60:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   4be62:	4622      	mov	r2, r4
   4be64:	4631      	mov	r1, r6
   4be66:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   4be68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   4be6c:	f7ff bfba 	b.w	4bde4 <ah>
}
   4be70:	bd70      	pop	{r4, r5, r6, pc}

0004be72 <send_cmd_status>:
{
   4be72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   4be76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   4be7a:	4606      	mov	r6, r0
   4be7c:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   4be7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4be82:	2100      	movs	r1, #0
   4be84:	200f      	movs	r0, #15
   4be86:	f7e1 fd59 	bl	2d93c <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   4be8a:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   4be8c:	f100 0808 	add.w	r8, r0, #8
   4be90:	4604      	mov	r4, r0
   4be92:	7507      	strb	r7, [r0, #20]
   4be94:	2102      	movs	r1, #2
   4be96:	4640      	mov	r0, r8
   4be98:	f003 ff46 	bl	4fd28 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   4be9c:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   4be9e:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   4bea0:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   4bea2:	7041      	strb	r1, [r0, #1]
   4bea4:	4640      	mov	r0, r8
   4bea6:	f003 ff3f 	bl	4fd28 <net_buf_simple_add>
	evt->ncmd = 1U;
   4beaa:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   4beac:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   4beae:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   4beb0:	4620      	mov	r0, r4
}
   4beb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   4beb6:	f7e2 baf3 	b.w	2e4a0 <bt_recv_prio>

0004beba <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   4beba:	f101 0320 	add.w	r3, r1, #32
   4bebe:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   4bec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   4bec4:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   4bec8:	428b      	cmp	r3, r1
   4beca:	d1f9      	bne.n	4bec0 <sys_memcpy_swap.constprop.0+0x6>
}
   4becc:	4770      	bx	lr

0004bece <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   4bece:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   4bed2:	f043 0306 	orr.w	r3, r3, #6
   4bed6:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   4beda:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   4bede:	f043 0304 	orr.w	r3, r3, #4
   4bee2:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   4bee6:	4770      	bx	lr

0004bee8 <default_CSPRNG>:
{
   4bee8:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   4beea:	f7eb f917 	bl	3711c <bt_rand>
}
   4beee:	fab0 f080 	clz	r0, r0
   4bef2:	0940      	lsrs	r0, r0, #5
   4bef4:	bd08      	pop	{r3, pc}

0004bef6 <bt_settings_decode_key>:
{
   4bef6:	b570      	push	{r4, r5, r6, lr}
   4bef8:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   4befa:	2100      	movs	r1, #0
{
   4befc:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   4befe:	f7fe fc61 	bl	4a7c4 <settings_name_next>
   4bf02:	280d      	cmp	r0, #13
   4bf04:	d118      	bne.n	4bf38 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   4bf06:	7b23      	ldrb	r3, [r4, #12]
   4bf08:	2b30      	cmp	r3, #48	; 0x30
   4bf0a:	d013      	beq.n	4bf34 <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   4bf0c:	2b31      	cmp	r3, #49	; 0x31
   4bf0e:	d113      	bne.n	4bf38 <bt_settings_decode_key+0x42>
   4bf10:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_PUBLIC;
   4bf12:	f805 3b06 	strb.w	r3, [r5], #6
   4bf16:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   4bf1a:	462a      	mov	r2, r5
   4bf1c:	4620      	mov	r0, r4
   4bf1e:	2301      	movs	r3, #1
   4bf20:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   4bf22:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   4bf24:	f7fd fd76 	bl	49a14 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   4bf28:	42b4      	cmp	r4, r6
   4bf2a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   4bf2e:	d1f4      	bne.n	4bf1a <bt_settings_decode_key+0x24>
	return 0;
   4bf30:	2000      	movs	r0, #0
}
   4bf32:	bd70      	pop	{r4, r5, r6, pc}
   4bf34:	2300      	movs	r3, #0
   4bf36:	e7ec      	b.n	4bf12 <bt_settings_decode_key+0x1c>
		return -EINVAL;
   4bf38:	f06f 0015 	mvn.w	r0, #21
   4bf3c:	e7f9      	b.n	4bf32 <bt_settings_decode_key+0x3c>

0004bf3e <bt_settings_init>:
{
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   4bf3e:	f7e0 bb3f 	b.w	2c5c0 <settings_subsys_init>

0004bf42 <bt_uuid_cmp>:
{
   4bf42:	b510      	push	{r4, lr}
   4bf44:	460c      	mov	r4, r1
	if (u1->type != u2->type) {
   4bf46:	7801      	ldrb	r1, [r0, #0]
   4bf48:	7822      	ldrb	r2, [r4, #0]
   4bf4a:	428a      	cmp	r2, r1
{
   4bf4c:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   4bf4e:	d00f      	beq.n	4bf70 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   4bf50:	4669      	mov	r1, sp
   4bf52:	f7e1 fc35 	bl	2d7c0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   4bf56:	a905      	add	r1, sp, #20
   4bf58:	4620      	mov	r0, r4
   4bf5a:	f7e1 fc31 	bl	2d7c0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   4bf5e:	2210      	movs	r2, #16
   4bf60:	f10d 0115 	add.w	r1, sp, #21
   4bf64:	f10d 0001 	add.w	r0, sp, #1
   4bf68:	f7ff feed 	bl	4bd46 <memcmp>
}
   4bf6c:	b00a      	add	sp, #40	; 0x28
   4bf6e:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   4bf70:	2a01      	cmp	r2, #1
   4bf72:	d006      	beq.n	4bf82 <bt_uuid_cmp+0x40>
   4bf74:	2a02      	cmp	r2, #2
   4bf76:	d007      	beq.n	4bf88 <bt_uuid_cmp+0x46>
   4bf78:	b972      	cbnz	r2, 4bf98 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   4bf7a:	8840      	ldrh	r0, [r0, #2]
   4bf7c:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   4bf7e:	1ac0      	subs	r0, r0, r3
   4bf80:	e7f4      	b.n	4bf6c <bt_uuid_cmp+0x2a>
   4bf82:	6840      	ldr	r0, [r0, #4]
   4bf84:	6863      	ldr	r3, [r4, #4]
   4bf86:	e7fa      	b.n	4bf7e <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   4bf88:	2210      	movs	r2, #16
   4bf8a:	1c61      	adds	r1, r4, #1
   4bf8c:	3001      	adds	r0, #1
}
   4bf8e:	b00a      	add	sp, #40	; 0x28
   4bf90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   4bf94:	f7ff bed7 	b.w	4bd46 <memcmp>
	switch (u1->type) {
   4bf98:	f06f 0015 	mvn.w	r0, #21
   4bf9c:	e7e6      	b.n	4bf6c <bt_uuid_cmp+0x2a>

0004bf9e <bt_uuid_create>:
	switch (data_len) {
   4bf9e:	2a04      	cmp	r2, #4
{
   4bfa0:	b510      	push	{r4, lr}
	switch (data_len) {
   4bfa2:	d00a      	beq.n	4bfba <bt_uuid_create+0x1c>
   4bfa4:	2a10      	cmp	r2, #16
   4bfa6:	d00d      	beq.n	4bfc4 <bt_uuid_create+0x26>
   4bfa8:	2a02      	cmp	r2, #2
   4bfaa:	f04f 0300 	mov.w	r3, #0
   4bfae:	d10f      	bne.n	4bfd0 <bt_uuid_create+0x32>
		uuid->type = BT_UUID_TYPE_16;
   4bfb0:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   4bfb2:	880b      	ldrh	r3, [r1, #0]
   4bfb4:	8043      	strh	r3, [r0, #2]
	return true;
   4bfb6:	2001      	movs	r0, #1
}
   4bfb8:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   4bfba:	2301      	movs	r3, #1
   4bfbc:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   4bfbe:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   4bfc0:	6043      	str	r3, [r0, #4]
		break;
   4bfc2:	e7f8      	b.n	4bfb6 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   4bfc4:	2302      	movs	r3, #2
   4bfc6:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   4bfca:	f7ff fecc 	bl	4bd66 <memcpy>
		break;
   4bfce:	e7f2      	b.n	4bfb6 <bt_uuid_create+0x18>
	switch (data_len) {
   4bfd0:	4618      	mov	r0, r3
   4bfd2:	e7f1      	b.n	4bfb8 <bt_uuid_create+0x1a>

0004bfd4 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   4bfd4:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   4bfd6:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   4bfd8:	2106      	movs	r1, #6
{
   4bfda:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   4bfdc:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   4bfe0:	f7eb f89c 	bl	3711c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   4bfe4:	b918      	cbnz	r0, 4bfee <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   4bfe6:	79a3      	ldrb	r3, [r4, #6]
   4bfe8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   4bfec:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   4bfee:	bd10      	pop	{r4, pc}

0004bff0 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   4bff0:	280f      	cmp	r0, #15
   4bff2:	d807      	bhi.n	4c004 <bt_hci_evt_get_flags+0x14>
   4bff4:	280d      	cmp	r0, #13
   4bff6:	d80b      	bhi.n	4c010 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   4bff8:	2805      	cmp	r0, #5
   4bffa:	bf08      	it	eq
   4bffc:	2003      	moveq	r0, #3
   4bffe:	bf18      	it	ne
   4c000:	2002      	movne	r0, #2
   4c002:	4770      	bx	lr
	switch (evt) {
   4c004:	2813      	cmp	r0, #19
   4c006:	d003      	beq.n	4c010 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   4c008:	281a      	cmp	r0, #26
   4c00a:	bf08      	it	eq
   4c00c:	2001      	moveq	r0, #1
   4c00e:	e7f6      	b.n	4bffe <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   4c010:	2001      	movs	r0, #1
	}
}
   4c012:	4770      	bx	lr

0004c014 <handle_event>:
{
   4c014:	b430      	push	{r4, r5}
   4c016:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   4c01a:	4604      	mov	r4, r0
   4c01c:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   4c01e:	429a      	cmp	r2, r3
   4c020:	d101      	bne.n	4c026 <handle_event+0x12>
}
   4c022:	bc30      	pop	{r4, r5}
   4c024:	4770      	bx	lr
		if (handler->event != event) {
   4c026:	4611      	mov	r1, r2
   4c028:	f811 5b08 	ldrb.w	r5, [r1], #8
   4c02c:	42a5      	cmp	r5, r4
   4c02e:	d106      	bne.n	4c03e <handle_event+0x2a>
		if (buf->len < handler->min_len) {
   4c030:	8981      	ldrh	r1, [r0, #12]
   4c032:	7853      	ldrb	r3, [r2, #1]
   4c034:	4299      	cmp	r1, r3
   4c036:	d3f4      	bcc.n	4c022 <handle_event+0xe>
}
   4c038:	bc30      	pop	{r4, r5}
		handler->handler(buf);
   4c03a:	6853      	ldr	r3, [r2, #4]
   4c03c:	4718      	bx	r3
   4c03e:	460a      	mov	r2, r1
   4c040:	e7ed      	b.n	4c01e <handle_event+0xa>

0004c042 <hci_data_buf_overflow>:
}
   4c042:	4770      	bx	lr

0004c044 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   4c044:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   4c048:	b183      	cbz	r3, 4c06c <update_sec_level+0x28>
   4c04a:	7b5a      	ldrb	r2, [r3, #13]
   4c04c:	07d1      	lsls	r1, r2, #31
   4c04e:	d50d      	bpl.n	4c06c <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   4c050:	06d2      	lsls	r2, r2, #27
   4c052:	d50d      	bpl.n	4c070 <update_sec_level+0x2c>
   4c054:	7b1b      	ldrb	r3, [r3, #12]
   4c056:	2b10      	cmp	r3, #16
   4c058:	bf14      	ite	ne
   4c05a:	2303      	movne	r3, #3
   4c05c:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   4c05e:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   4c060:	7a80      	ldrb	r0, [r0, #10]
}
   4c062:	4298      	cmp	r0, r3
   4c064:	bf8c      	ite	hi
   4c066:	2000      	movhi	r0, #0
   4c068:	2001      	movls	r0, #1
   4c06a:	4770      	bx	lr
   4c06c:	2302      	movs	r3, #2
   4c06e:	e7f6      	b.n	4c05e <update_sec_level+0x1a>
   4c070:	2303      	movs	r3, #3
   4c072:	e7f4      	b.n	4c05e <update_sec_level+0x1a>

0004c074 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   4c074:	2207      	movs	r2, #7
   4c076:	f7ff be76 	b.w	4bd66 <memcpy>

0004c07a <atomic_or>:
{
   4c07a:	b510      	push	{r4, lr}
   4c07c:	4603      	mov	r3, r0
}
   4c07e:	f3bf 8f5b 	dmb	ish
   4c082:	e853 0f00 	ldrex	r0, [r3]
   4c086:	ea40 0201 	orr.w	r2, r0, r1
   4c08a:	e843 2400 	strex	r4, r2, [r3]
   4c08e:	2c00      	cmp	r4, #0
   4c090:	d1f7      	bne.n	4c082 <atomic_or+0x8>
   4c092:	f3bf 8f5b 	dmb	ish
   4c096:	bd10      	pop	{r4, pc}

0004c098 <atomic_and>:
{
   4c098:	b510      	push	{r4, lr}
   4c09a:	4603      	mov	r3, r0
}
   4c09c:	f3bf 8f5b 	dmb	ish
   4c0a0:	e853 0f00 	ldrex	r0, [r3]
   4c0a4:	ea00 0201 	and.w	r2, r0, r1
   4c0a8:	e843 2400 	strex	r4, r2, [r3]
   4c0ac:	2c00      	cmp	r4, #0
   4c0ae:	d1f7      	bne.n	4c0a0 <atomic_and+0x8>
   4c0b0:	f3bf 8f5b 	dmb	ish
   4c0b4:	bd10      	pop	{r4, pc}

0004c0b6 <unpair_remote>:
{
   4c0b6:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   4c0b8:	4601      	mov	r1, r0
   4c0ba:	7818      	ldrb	r0, [r3, #0]
   4c0bc:	f7e1 bc6a 	b.w	2d994 <unpair>

0004c0c0 <le_data_len_change>:
{
   4c0c0:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   4c0c2:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4c0c4:	8818      	ldrh	r0, [r3, #0]
   4c0c6:	f7e3 fd61 	bl	2fb8c <bt_conn_lookup_handle>
	if (!conn) {
   4c0ca:	b118      	cbz	r0, 4c0d4 <le_data_len_change+0x14>
}
   4c0cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   4c0d0:	f000 be83 	b.w	4cdda <bt_conn_unref>
}
   4c0d4:	bd08      	pop	{r3, pc}

0004c0d6 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   4c0d6:	2101      	movs	r1, #1
   4c0d8:	3008      	adds	r0, #8
   4c0da:	f003 be56 	b.w	4fd8a <net_buf_simple_pull_mem>

0004c0de <le_conn_update_complete>:
{
   4c0de:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   4c0e0:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4c0e2:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   4c0e6:	f7e3 fd51 	bl	2fb8c <bt_conn_lookup_handle>
	if (!conn) {
   4c0ea:	4604      	mov	r4, r0
   4c0ec:	b390      	cbz	r0, 4c154 <le_conn_update_complete+0x76>
	if (!evt->status) {
   4c0ee:	782b      	ldrb	r3, [r5, #0]
   4c0f0:	b9cb      	cbnz	r3, 4c126 <le_conn_update_complete+0x48>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   4c0f2:	792a      	ldrb	r2, [r5, #4]
   4c0f4:	78eb      	ldrb	r3, [r5, #3]
   4c0f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4c0fa:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   4c0fe:	79aa      	ldrb	r2, [r5, #6]
   4c100:	796b      	ldrb	r3, [r5, #5]
   4c102:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4c106:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   4c10a:	79eb      	ldrb	r3, [r5, #7]
   4c10c:	7a2a      	ldrb	r2, [r5, #8]
   4c10e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4c112:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   4c116:	f7e3 fe2f 	bl	2fd78 <notify_le_param_updated>
	bt_conn_unref(conn);
   4c11a:	4620      	mov	r0, r4
}
   4c11c:	b003      	add	sp, #12
   4c11e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   4c122:	f000 be5a 	b.w	4cdda <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   4c126:	2b1a      	cmp	r3, #26
   4c128:	d1f7      	bne.n	4c11a <le_conn_update_complete+0x3c>
   4c12a:	78c3      	ldrb	r3, [r0, #3]
   4c12c:	2b01      	cmp	r3, #1
   4c12e:	d1f4      	bne.n	4c11a <le_conn_update_complete+0x3c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   4c130:	f44f 6180 	mov.w	r1, #1024	; 0x400
   4c134:	3004      	adds	r0, #4
   4c136:	f7ff ffa0 	bl	4c07a <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   4c13a:	0543      	lsls	r3, r0, #21
   4c13c:	d4ed      	bmi.n	4c11a <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   4c13e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   4c142:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   4c144:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   4c146:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   4c14a:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   4c14c:	4620      	mov	r0, r4
   4c14e:	f7e4 faab 	bl	306a8 <bt_l2cap_update_conn_param>
   4c152:	e7e2      	b.n	4c11a <le_conn_update_complete+0x3c>
}
   4c154:	b003      	add	sp, #12
   4c156:	bd30      	pop	{r4, r5, pc}

0004c158 <hci_vendor_event>:
static void hci_vendor_event(struct net_buf *buf)
   4c158:	4770      	bx	lr

0004c15a <sys_put_le64>:
	dst[1] = val >> 8;
   4c15a:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   4c15e:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   4c160:	0e00      	lsrs	r0, r0, #24
   4c162:	7053      	strb	r3, [r2, #1]
   4c164:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   4c166:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   4c168:	f3c1 2007 	ubfx	r0, r1, #8, #8
   4c16c:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   4c16e:	7093      	strb	r3, [r2, #2]
   4c170:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   4c172:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   4c174:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   4c176:	71d1      	strb	r1, [r2, #7]
}
   4c178:	4770      	bx	lr

0004c17a <hci_num_completed_packets>:
{
   4c17a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   4c17e:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   4c180:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   4c182:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   4c184:	783b      	ldrb	r3, [r7, #0]
   4c186:	429d      	cmp	r5, r3
   4c188:	db01      	blt.n	4c18e <hci_num_completed_packets+0x14>
}
   4c18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   4c18e:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   4c192:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   4c196:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   4c19a:	f7e3 fcf7 	bl	2fb8c <bt_conn_lookup_handle>
		if (!conn) {
   4c19e:	4604      	mov	r4, r0
   4c1a0:	b318      	cbz	r0, 4c1ea <hci_num_completed_packets+0x70>
			k_work_submit(&conn->tx_complete_work);
   4c1a2:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   4c1a6:	b1ee      	cbz	r6, 4c1e4 <hci_num_completed_packets+0x6a>
	__asm__ volatile(
   4c1a8:	f04f 0320 	mov.w	r3, #32
   4c1ac:	f3ef 8211 	mrs	r2, BASEPRI
   4c1b0:	f383 8812 	msr	BASEPRI_MAX, r3
   4c1b4:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   4c1b8:	69e3      	ldr	r3, [r4, #28]
   4c1ba:	b16b      	cbz	r3, 4c1d8 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   4c1bc:	3b01      	subs	r3, #1
   4c1be:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   4c1c0:	f382 8811 	msr	BASEPRI, r2
   4c1c4:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   4c1c8:	4620      	mov	r0, r4
   4c1ca:	f7e3 fc37 	bl	2fa3c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   4c1ce:	3e01      	subs	r6, #1
   4c1d0:	f7fb ffb2 	bl	48138 <z_impl_k_sem_give>
   4c1d4:	b2b6      	uxth	r6, r6
   4c1d6:	e7e6      	b.n	4c1a6 <hci_num_completed_packets+0x2c>
	return list->head;
   4c1d8:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   4c1da:	b943      	cbnz	r3, 4c1ee <hci_num_completed_packets+0x74>
   4c1dc:	f382 8811 	msr	BASEPRI, r2
   4c1e0:	f3bf 8f6f 	isb	sy
		bt_conn_unref(conn);
   4c1e4:	4620      	mov	r0, r4
   4c1e6:	f000 fdf8 	bl	4cdda <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   4c1ea:	3501      	adds	r5, #1
   4c1ec:	e7ca      	b.n	4c184 <hci_num_completed_packets+0xa>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4c1ee:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   4c1f0:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   4c1f2:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4c1f4:	428b      	cmp	r3, r1
	list->tail = node;
   4c1f6:	bf08      	it	eq
   4c1f8:	61a0      	streq	r0, [r4, #24]
   4c1fa:	f382 8811 	msr	BASEPRI, r2
   4c1fe:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   4c202:	f04f 0220 	mov.w	r2, #32
   4c206:	f3ef 8111 	mrs	r1, BASEPRI
   4c20a:	f382 8812 	msr	BASEPRI_MAX, r2
   4c20e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   4c212:	68da      	ldr	r2, [r3, #12]
   4c214:	61e2      	str	r2, [r4, #28]
	return list->tail;
   4c216:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   4c218:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   4c21c:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   4c220:	b94a      	cbnz	r2, 4c236 <hci_num_completed_packets+0xbc>
	list->head = node;
   4c222:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   4c226:	f381 8811 	msr	BASEPRI, r1
   4c22a:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   4c22e:	4648      	mov	r0, r9
   4c230:	f7fc f906 	bl	48440 <k_work_submit>
   4c234:	e7c8      	b.n	4c1c8 <hci_num_completed_packets+0x4e>
	parent->next = child;
   4c236:	6013      	str	r3, [r2, #0]
	list->tail = node;
   4c238:	6263      	str	r3, [r4, #36]	; 0x24
}
   4c23a:	e7f4      	b.n	4c226 <hci_num_completed_packets+0xac>

0004c23c <hci_disconn_complete>:
{
   4c23c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   4c23e:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   4c240:	7835      	ldrb	r5, [r6, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   4c242:	f8b6 0001 	ldrh.w	r0, [r6, #1]
	if (evt->status) {
   4c246:	b9fd      	cbnz	r5, 4c288 <hci_disconn_complete+0x4c>
	conn = bt_conn_lookup_handle(handle);
   4c248:	f7e3 fca0 	bl	2fb8c <bt_conn_lookup_handle>
	if (!conn) {
   4c24c:	4604      	mov	r4, r0
   4c24e:	b1d8      	cbz	r0, 4c288 <hci_disconn_complete+0x4c>
	conn->err = evt->reason;
   4c250:	78f3      	ldrb	r3, [r6, #3]
   4c252:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   4c254:	4629      	mov	r1, r5
   4c256:	f7e3 fca1 	bl	2fb9c <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   4c25a:	78a3      	ldrb	r3, [r4, #2]
   4c25c:	2b01      	cmp	r3, #1
   4c25e:	d004      	beq.n	4c26a <hci_disconn_complete+0x2e>
	bt_conn_unref(conn);
   4c260:	4620      	mov	r0, r4
}
   4c262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   4c266:	f000 bdb8 	b.w	4cdda <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4c26a:	f3bf 8f5b 	dmb	ish
   4c26e:	6863      	ldr	r3, [r4, #4]
   4c270:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   4c274:	07db      	lsls	r3, r3, #31
   4c276:	d5f3      	bpl.n	4c260 <hci_disconn_complete+0x24>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   4c278:	4620      	mov	r0, r4
   4c27a:	2102      	movs	r1, #2
   4c27c:	f7e3 fc8e 	bl	2fb9c <bt_conn_set_state>
		bt_le_scan_update(false);
   4c280:	4628      	mov	r0, r5
   4c282:	f7e3 f83d 	bl	2f300 <bt_le_scan_update>
   4c286:	e7eb      	b.n	4c260 <hci_disconn_complete+0x24>
}
   4c288:	bd70      	pop	{r4, r5, r6, pc}

0004c28a <le_ltk_request>:
{
   4c28a:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   4c28c:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   4c28e:	8826      	ldrh	r6, [r4, #0]
{
   4c290:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   4c292:	b2b0      	uxth	r0, r6
   4c294:	f7e3 fc7a 	bl	2fb8c <bt_conn_lookup_handle>
	if (!conn) {
   4c298:	4605      	mov	r5, r0
   4c29a:	b318      	cbz	r0, 4c2e4 <le_ltk_request+0x5a>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   4c29c:	af02      	add	r7, sp, #8
   4c29e:	f8d4 2002 	ldr.w	r2, [r4, #2]
   4c2a2:	f8d4 3006 	ldr.w	r3, [r4, #6]
   4c2a6:	9701      	str	r7, [sp, #4]
   4c2a8:	8961      	ldrh	r1, [r4, #10]
   4c2aa:	9100      	str	r1, [sp, #0]
   4c2ac:	f003 f9a9 	bl	4f602 <bt_smp_request_ltk>
   4c2b0:	b1d0      	cbz	r0, 4c2e8 <le_ltk_request+0x5e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   4c2b2:	2112      	movs	r1, #18
   4c2b4:	f242 001a 	movw	r0, #8218	; 0x201a
   4c2b8:	f7e1 fd2e 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   4c2bc:	4604      	mov	r4, r0
   4c2be:	b170      	cbz	r0, 4c2de <le_ltk_request+0x54>
	return net_buf_simple_add(&buf->b, len);
   4c2c0:	2112      	movs	r1, #18
   4c2c2:	3008      	adds	r0, #8
   4c2c4:	f003 fd30 	bl	4fd28 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   4c2c8:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   4c2ca:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   4c2ce:	2210      	movs	r2, #16
   4c2d0:	f7ff fd49 	bl	4bd66 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   4c2d4:	4621      	mov	r1, r4
   4c2d6:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   4c2da:	f7e1 fd57 	bl	2dd8c <bt_hci_cmd_send>
	bt_conn_unref(conn);
   4c2de:	4628      	mov	r0, r5
   4c2e0:	f000 fd7b 	bl	4cdda <bt_conn_unref>
}
   4c2e4:	b007      	add	sp, #28
   4c2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   4c2e8:	2102      	movs	r1, #2
   4c2ea:	f242 001b 	movw	r0, #8219	; 0x201b
   4c2ee:	f7e1 fd13 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   4c2f2:	4604      	mov	r4, r0
   4c2f4:	2800      	cmp	r0, #0
   4c2f6:	d0f2      	beq.n	4c2de <le_ltk_request+0x54>
   4c2f8:	2102      	movs	r1, #2
   4c2fa:	3008      	adds	r0, #8
   4c2fc:	f003 fd14 	bl	4fd28 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   4c300:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   4c302:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   4c304:	f242 001b 	movw	r0, #8219	; 0x201b
   4c308:	e7e7      	b.n	4c2da <le_ltk_request+0x50>

0004c30a <le_conn_param_neg_reply>:
{
   4c30a:	b570      	push	{r4, r5, r6, lr}
   4c30c:	4606      	mov	r6, r0
   4c30e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   4c310:	f242 0021 	movw	r0, #8225	; 0x2021
   4c314:	2103      	movs	r1, #3
   4c316:	f7e1 fcff 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   4c31a:	4604      	mov	r4, r0
   4c31c:	b160      	cbz	r0, 4c338 <le_conn_param_neg_reply+0x2e>
   4c31e:	2103      	movs	r1, #3
   4c320:	3008      	adds	r0, #8
   4c322:	f003 fd01 	bl	4fd28 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   4c326:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   4c328:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   4c32a:	4621      	mov	r1, r4
   4c32c:	f242 0021 	movw	r0, #8225	; 0x2021
}
   4c330:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   4c334:	f7e1 bd2a 	b.w	2dd8c <bt_hci_cmd_send>
}
   4c338:	bd70      	pop	{r4, r5, r6, pc}

0004c33a <le_conn_param_req>:
{
   4c33a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   4c33c:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   4c33e:	78d9      	ldrb	r1, [r3, #3]
   4c340:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   4c342:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   4c344:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   4c348:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   4c34c:	7959      	ldrb	r1, [r3, #5]
   4c34e:	791a      	ldrb	r2, [r3, #4]
   4c350:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   4c354:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   4c358:	799a      	ldrb	r2, [r3, #6]
   4c35a:	79d9      	ldrb	r1, [r3, #7]
   4c35c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   4c360:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   4c364:	7a1a      	ldrb	r2, [r3, #8]
   4c366:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   4c368:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   4c36a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   4c36e:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   4c370:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   4c374:	f7e3 fc0a 	bl	2fb8c <bt_conn_lookup_handle>
	if (!conn) {
   4c378:	4606      	mov	r6, r0
   4c37a:	b928      	cbnz	r0, 4c388 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   4c37c:	2102      	movs	r1, #2
   4c37e:	4620      	mov	r0, r4
   4c380:	f7ff ffc3 	bl	4c30a <le_conn_param_neg_reply>
}
   4c384:	b003      	add	sp, #12
   4c386:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   4c388:	4669      	mov	r1, sp
   4c38a:	f7e3 fd59 	bl	2fe40 <le_param_req>
   4c38e:	b938      	cbnz	r0, 4c3a0 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   4c390:	211e      	movs	r1, #30
   4c392:	4620      	mov	r0, r4
   4c394:	f7ff ffb9 	bl	4c30a <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   4c398:	4630      	mov	r0, r6
   4c39a:	f000 fd1e 	bl	4cdda <bt_conn_unref>
   4c39e:	e7f1      	b.n	4c384 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   4c3a0:	210e      	movs	r1, #14
   4c3a2:	f242 0020 	movw	r0, #8224	; 0x2020
   4c3a6:	f7e1 fcb7 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   4c3aa:	4605      	mov	r5, r0
   4c3ac:	2800      	cmp	r0, #0
   4c3ae:	d0f3      	beq.n	4c398 <le_conn_param_req+0x5e>
   4c3b0:	210e      	movs	r1, #14
   4c3b2:	3008      	adds	r0, #8
   4c3b4:	f003 fcb8 	bl	4fd28 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   4c3b8:	220e      	movs	r2, #14
   4c3ba:	4604      	mov	r4, r0
   4c3bc:	2100      	movs	r1, #0
   4c3be:	f7ff fcdd 	bl	4bd7c <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   4c3c2:	f8bd 3000 	ldrh.w	r3, [sp]
   4c3c6:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   4c3c8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   4c3cc:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   4c3ce:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   4c3d2:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   4c3d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   4c3d8:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   4c3da:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   4c3dc:	4629      	mov	r1, r5
   4c3de:	f242 0020 	movw	r0, #8224	; 0x2020
   4c3e2:	f7e1 fcd3 	bl	2dd8c <bt_hci_cmd_send>
   4c3e6:	e7d7      	b.n	4c398 <le_conn_param_req+0x5e>

0004c3e8 <hci_le_read_max_data_len>:
{
   4c3e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4c3ea:	4606      	mov	r6, r0
   4c3ec:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   4c3ee:	aa01      	add	r2, sp, #4
   4c3f0:	2100      	movs	r1, #0
   4c3f2:	f242 002f 	movw	r0, #8239	; 0x202f
   4c3f6:	f7e1 fceb 	bl	2ddd0 <bt_hci_cmd_send_sync>
	if (err) {
   4c3fa:	4604      	mov	r4, r0
   4c3fc:	b948      	cbnz	r0, 4c412 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   4c3fe:	9801      	ldr	r0, [sp, #4]
   4c400:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   4c402:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   4c406:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   4c408:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   4c40c:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   4c40e:	f7f7 fb01 	bl	43a14 <net_buf_unref>
}
   4c412:	4620      	mov	r0, r4
   4c414:	b002      	add	sp, #8
   4c416:	bd70      	pop	{r4, r5, r6, pc}

0004c418 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   4c418:	f7e1 bd46 	b.w	2dea8 <bt_le_create_conn_legacy>

0004c41c <bt_hci_disconnect>:
{
   4c41c:	b570      	push	{r4, r5, r6, lr}
   4c41e:	4606      	mov	r6, r0
   4c420:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   4c422:	f240 4006 	movw	r0, #1030	; 0x406
   4c426:	2103      	movs	r1, #3
   4c428:	f7e1 fc76 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   4c42c:	4604      	mov	r4, r0
   4c42e:	b168      	cbz	r0, 4c44c <bt_hci_disconnect+0x30>
   4c430:	2103      	movs	r1, #3
   4c432:	3008      	adds	r0, #8
   4c434:	f003 fc78 	bl	4fd28 <net_buf_simple_add>
	disconn->reason = reason;
   4c438:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   4c43a:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   4c43c:	4621      	mov	r1, r4
   4c43e:	2200      	movs	r2, #0
}
   4c440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   4c444:	f240 4006 	movw	r0, #1030	; 0x406
   4c448:	f7e1 bcc2 	b.w	2ddd0 <bt_hci_cmd_send_sync>
}
   4c44c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4c450:	bd70      	pop	{r4, r5, r6, pc}

0004c452 <bt_le_set_data_len>:
{
   4c452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4c454:	4607      	mov	r7, r0
   4c456:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   4c458:	f242 0022 	movw	r0, #8226	; 0x2022
   4c45c:	2106      	movs	r1, #6
{
   4c45e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   4c460:	f7e1 fc5a 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   4c464:	4604      	mov	r4, r0
   4c466:	b170      	cbz	r0, 4c486 <bt_le_set_data_len+0x34>
   4c468:	2106      	movs	r1, #6
   4c46a:	3008      	adds	r0, #8
   4c46c:	f003 fc5c 	bl	4fd28 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   4c470:	883b      	ldrh	r3, [r7, #0]
   4c472:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   4c474:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   4c476:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   4c478:	4621      	mov	r1, r4
   4c47a:	f242 0022 	movw	r0, #8226	; 0x2022
}
   4c47e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   4c482:	f7e1 bc83 	b.w	2dd8c <bt_hci_cmd_send>
}
   4c486:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4c48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004c48c <bt_le_set_phy>:
{
   4c48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4c490:	4681      	mov	r9, r0
   4c492:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   4c494:	f242 0032 	movw	r0, #8242	; 0x2032
   4c498:	2107      	movs	r1, #7
{
   4c49a:	f89d a020 	ldrb.w	sl, [sp, #32]
   4c49e:	4617      	mov	r7, r2
   4c4a0:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   4c4a2:	f7e1 fc39 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   4c4a6:	4605      	mov	r5, r0
   4c4a8:	b198      	cbz	r0, 4c4d2 <bt_le_set_phy+0x46>
   4c4aa:	2107      	movs	r1, #7
   4c4ac:	3008      	adds	r0, #8
   4c4ae:	f003 fc3b 	bl	4fd28 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   4c4b2:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   4c4b6:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   4c4ba:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   4c4bc:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   4c4be:	f8a0 a005 	strh.w	sl, [r0, #5]
	cp->handle = sys_cpu_to_le16(conn->handle);
   4c4c2:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   4c4c4:	4629      	mov	r1, r5
   4c4c6:	f242 0032 	movw	r0, #8242	; 0x2032
}
   4c4ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   4c4ce:	f7e1 bc5d 	b.w	2dd8c <bt_hci_cmd_send>
}
   4c4d2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4c4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004c4da <le_phy_update_complete>:
{
   4c4da:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   4c4dc:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4c4de:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   4c4e2:	f7e3 fb53 	bl	2fb8c <bt_conn_lookup_handle>
	if (!conn) {
   4c4e6:	4604      	mov	r4, r0
   4c4e8:	b308      	cbz	r0, 4c52e <le_phy_update_complete+0x54>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   4c4ea:	1d06      	adds	r6, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4c4ec:	f06f 0180 	mvn.w	r1, #128	; 0x80
   4c4f0:	4630      	mov	r0, r6
   4c4f2:	f7ff fdd1 	bl	4c098 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   4c4f6:	0603      	lsls	r3, r0, #24
   4c4f8:	d507      	bpl.n	4c50a <le_phy_update_complete+0x30>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4c4fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   4c4fe:	4630      	mov	r0, r6
   4c500:	f7ff fdbb 	bl	4c07a <atomic_or>
		conn_auto_initiate(conn);
   4c504:	4620      	mov	r0, r4
   4c506:	f7e1 fd4b 	bl	2dfa0 <conn_auto_initiate>
	conn->le.phy.tx_phy = bt_get_phy(evt->tx_phy);
   4c50a:	78e8      	ldrb	r0, [r5, #3]
   4c50c:	f7e1 fcc2 	bl	2de94 <bt_get_phy>
   4c510:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
	conn->le.phy.rx_phy = bt_get_phy(evt->rx_phy);
   4c514:	7928      	ldrb	r0, [r5, #4]
   4c516:	f7e1 fcbd 	bl	2de94 <bt_get_phy>
   4c51a:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	notify_le_phy_updated(conn);
   4c51e:	4620      	mov	r0, r4
   4c520:	f7e3 fc6c 	bl	2fdfc <notify_le_phy_updated>
	bt_conn_unref(conn);
   4c524:	4620      	mov	r0, r4
}
   4c526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   4c52a:	f000 bc56 	b.w	4cdda <bt_conn_unref>
}
   4c52e:	bd70      	pop	{r4, r5, r6, pc}

0004c530 <le_remote_feat_complete>:
{
   4c530:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   4c532:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4c534:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   4c538:	f7e3 fb28 	bl	2fb8c <bt_conn_lookup_handle>
	if (!conn) {
   4c53c:	4604      	mov	r4, r0
   4c53e:	b198      	cbz	r0, 4c568 <le_remote_feat_complete+0x38>
	if (!evt->status) {
   4c540:	782b      	ldrb	r3, [r5, #0]
   4c542:	b923      	cbnz	r3, 4c54e <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   4c544:	2208      	movs	r2, #8
   4c546:	1ce9      	adds	r1, r5, #3
   4c548:	30ac      	adds	r0, #172	; 0xac
   4c54a:	f7ff fc0c 	bl	4bd66 <memcpy>
   4c54e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   4c552:	1d20      	adds	r0, r4, #4
   4c554:	f7ff fd91 	bl	4c07a <atomic_or>
	conn_auto_initiate(conn);
   4c558:	4620      	mov	r0, r4
   4c55a:	f7e1 fd21 	bl	2dfa0 <conn_auto_initiate>
	bt_conn_unref(conn);
   4c55e:	4620      	mov	r0, r4
}
   4c560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   4c564:	f000 bc39 	b.w	4cdda <bt_conn_unref>
}
   4c568:	bd38      	pop	{r3, r4, r5, pc}

0004c56a <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   4c56a:	6880      	ldr	r0, [r0, #8]
   4c56c:	f7e1 bd7c 	b.w	2e068 <bt_hci_le_enh_conn_complete>

0004c570 <le_legacy_conn_complete>:
{
   4c570:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   4c572:	6881      	ldr	r1, [r0, #8]
{
   4c574:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   4c576:	780b      	ldrb	r3, [r1, #0]
   4c578:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   4c57c:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   4c580:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   4c584:	78cb      	ldrb	r3, [r1, #3]
   4c586:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   4c58a:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   4c58e:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   4c592:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   4c596:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   4c59a:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   4c59e:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   4c5a2:	7c4b      	ldrb	r3, [r1, #17]
   4c5a4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   4c5a8:	a803      	add	r0, sp, #12
   4c5aa:	3104      	adds	r1, #4
   4c5ac:	f7ff fd62 	bl	4c074 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   4c5b0:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   4c5b2:	4669      	mov	r1, sp
   4c5b4:	2206      	movs	r2, #6
   4c5b6:	f10d 0013 	add.w	r0, sp, #19
   4c5ba:	9400      	str	r4, [sp, #0]
   4c5bc:	f8ad 4004 	strh.w	r4, [sp, #4]
   4c5c0:	f7ff fbd1 	bl	4bd66 <memcpy>
   4c5c4:	2206      	movs	r2, #6
   4c5c6:	4669      	mov	r1, sp
   4c5c8:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   4c5cc:	9400      	str	r4, [sp, #0]
   4c5ce:	f8ad 4004 	strh.w	r4, [sp, #4]
   4c5d2:	f7ff fbc8 	bl	4bd66 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   4c5d6:	a802      	add	r0, sp, #8
   4c5d8:	f7e1 fd46 	bl	2e068 <bt_hci_le_enh_conn_complete>
}
   4c5dc:	b00a      	add	sp, #40	; 0x28
   4c5de:	bd10      	pop	{r4, pc}

0004c5e0 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   4c5e0:	8803      	ldrh	r3, [r0, #0]
   4c5e2:	8842      	ldrh	r2, [r0, #2]
   4c5e4:	4293      	cmp	r3, r2
{
   4c5e6:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   4c5e8:	d819      	bhi.n	4c61e <bt_le_conn_params_valid+0x3e>
   4c5ea:	2b05      	cmp	r3, #5
   4c5ec:	d917      	bls.n	4c61e <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   4c5ee:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   4c5f2:	d814      	bhi.n	4c61e <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   4c5f4:	8883      	ldrh	r3, [r0, #4]
   4c5f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   4c5fa:	d210      	bcs.n	4c61e <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   4c5fc:	88c0      	ldrh	r0, [r0, #6]
   4c5fe:	f1a0 010a 	sub.w	r1, r0, #10
   4c602:	b289      	uxth	r1, r1
   4c604:	f640 4476 	movw	r4, #3190	; 0xc76
   4c608:	42a1      	cmp	r1, r4
   4c60a:	d808      	bhi.n	4c61e <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   4c60c:	3301      	adds	r3, #1
   4c60e:	b29b      	uxth	r3, r3
   4c610:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   4c612:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   4c616:	bf34      	ite	cc
   4c618:	2001      	movcc	r0, #1
   4c61a:	2000      	movcs	r0, #0
}
   4c61c:	bd10      	pop	{r4, pc}
		return false;
   4c61e:	2000      	movs	r0, #0
   4c620:	e7fc      	b.n	4c61c <bt_le_conn_params_valid+0x3c>

0004c622 <hci_encrypt_key_refresh_complete>:
{
   4c622:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   4c624:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4c626:	f8b3 0001 	ldrh.w	r0, [r3, #1]
	uint8_t status = evt->status;
   4c62a:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   4c62c:	f7e3 faae 	bl	2fb8c <bt_conn_lookup_handle>
	if (!conn) {
   4c630:	4604      	mov	r4, r0
   4c632:	b320      	cbz	r0, 4c67e <hci_encrypt_key_refresh_complete+0x5c>
	if (status) {
   4c634:	b165      	cbz	r5, 4c650 <hci_encrypt_key_refresh_complete+0x2e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   4c636:	4628      	mov	r0, r5
   4c638:	f7e1 fe54 	bl	2e2e4 <bt_security_err_get>
   4c63c:	4629      	mov	r1, r5
   4c63e:	4602      	mov	r2, r0
   4c640:	4620      	mov	r0, r4
   4c642:	f7e3 fc65 	bl	2ff10 <bt_conn_security_changed>
	bt_conn_unref(conn);
   4c646:	4620      	mov	r0, r4
}
   4c648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   4c64c:	f000 bbc5 	b.w	4cdda <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   4c650:	7883      	ldrb	r3, [r0, #2]
   4c652:	2b01      	cmp	r3, #1
   4c654:	d1ef      	bne.n	4c636 <hci_encrypt_key_refresh_complete+0x14>
		bt_smp_update_keys(conn);
   4c656:	f003 fa34 	bl	4fac2 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   4c65a:	4620      	mov	r0, r4
   4c65c:	f7ff fcf2 	bl	4c044 <update_sec_level>
   4c660:	2800      	cmp	r0, #0
   4c662:	d1e8      	bne.n	4c636 <hci_encrypt_key_refresh_complete+0x14>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   4c664:	2005      	movs	r0, #5
   4c666:	f7e1 fe3d 	bl	2e2e4 <bt_security_err_get>
   4c66a:	2105      	movs	r1, #5
   4c66c:	4602      	mov	r2, r0
   4c66e:	4620      	mov	r0, r4
   4c670:	f7e3 fc4e 	bl	2ff10 <bt_conn_security_changed>
		bt_conn_disconnect(conn, status);
   4c674:	2105      	movs	r1, #5
   4c676:	4620      	mov	r0, r4
   4c678:	f000 fca8 	bl	4cfcc <bt_conn_disconnect>
   4c67c:	e7e3      	b.n	4c646 <hci_encrypt_key_refresh_complete+0x24>
}
   4c67e:	bd38      	pop	{r3, r4, r5, pc}

0004c680 <hci_encrypt_change>:
{
   4c680:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   4c682:	6886      	ldr	r6, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4c684:	f8b6 0001 	ldrh.w	r0, [r6, #1]
	uint8_t status = evt->status;
   4c688:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   4c68a:	f7e3 fa7f 	bl	2fb8c <bt_conn_lookup_handle>
	if (!conn) {
   4c68e:	4604      	mov	r4, r0
   4c690:	b368      	cbz	r0, 4c6ee <hci_encrypt_change+0x6e>
	if (status) {
   4c692:	b165      	cbz	r5, 4c6ae <hci_encrypt_change+0x2e>
		bt_conn_security_changed(conn, status,
   4c694:	4628      	mov	r0, r5
   4c696:	f7e1 fe25 	bl	2e2e4 <bt_security_err_get>
   4c69a:	4629      	mov	r1, r5
   4c69c:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   4c69e:	4620      	mov	r0, r4
   4c6a0:	f7e3 fc36 	bl	2ff10 <bt_conn_security_changed>
	bt_conn_unref(conn);
   4c6a4:	4620      	mov	r0, r4
}
   4c6a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   4c6aa:	f000 bb96 	b.w	4cdda <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   4c6ae:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   4c6b0:	78f3      	ldrb	r3, [r6, #3]
   4c6b2:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   4c6b4:	2a01      	cmp	r2, #1
   4c6b6:	d005      	beq.n	4c6c4 <hci_encrypt_change+0x44>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   4c6b8:	2000      	movs	r0, #0
   4c6ba:	f7e1 fe13 	bl	2e2e4 <bt_security_err_get>
   4c6be:	2100      	movs	r1, #0
   4c6c0:	4602      	mov	r2, r0
   4c6c2:	e7ec      	b.n	4c69e <hci_encrypt_change+0x1e>
		if (conn->encrypt) {
   4c6c4:	b10b      	cbz	r3, 4c6ca <hci_encrypt_change+0x4a>
			bt_smp_update_keys(conn);
   4c6c6:	f003 f9fc 	bl	4fac2 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   4c6ca:	4620      	mov	r0, r4
   4c6cc:	f7ff fcba 	bl	4c044 <update_sec_level>
   4c6d0:	2800      	cmp	r0, #0
   4c6d2:	d1f1      	bne.n	4c6b8 <hci_encrypt_change+0x38>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   4c6d4:	2005      	movs	r0, #5
   4c6d6:	f7e1 fe05 	bl	2e2e4 <bt_security_err_get>
   4c6da:	2105      	movs	r1, #5
   4c6dc:	4602      	mov	r2, r0
   4c6de:	4620      	mov	r0, r4
   4c6e0:	f7e3 fc16 	bl	2ff10 <bt_conn_security_changed>
		bt_conn_disconnect(conn, status);
   4c6e4:	2105      	movs	r1, #5
   4c6e6:	4620      	mov	r0, r4
   4c6e8:	f000 fc70 	bl	4cfcc <bt_conn_disconnect>
   4c6ec:	e7da      	b.n	4c6a4 <hci_encrypt_change+0x24>
}
   4c6ee:	bd70      	pop	{r4, r5, r6, pc}

0004c6f0 <bt_send>:
		return bt_hci_ecc_send(buf);
   4c6f0:	f7e0 bf2e 	b.w	2d550 <bt_hci_ecc_send>

0004c6f4 <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   4c6f4:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   4c6f6:	f7e7 fb65 	bl	33dc4 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   4c6fa:	b118      	cbz	r0, 4c704 <bt_addr_le_is_bonded+0x10>
   4c6fc:	89c0      	ldrh	r0, [r0, #14]
   4c6fe:	3800      	subs	r0, #0
   4c700:	bf18      	it	ne
   4c702:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   4c704:	bd08      	pop	{r3, pc}

0004c706 <bt_data_parse>:
}

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   4c706:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4c708:	4604      	mov	r4, r0
   4c70a:	460e      	mov	r6, r1
   4c70c:	4617      	mov	r7, r2
	while (ad->len > 1) {
   4c70e:	88a3      	ldrh	r3, [r4, #4]
   4c710:	2b01      	cmp	r3, #1
   4c712:	d801      	bhi.n	4c718 <bt_data_parse+0x12>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   4c714:	b003      	add	sp, #12
   4c716:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
   4c718:	4620      	mov	r0, r4
   4c71a:	f003 fb3e 	bl	4fd9a <net_buf_simple_pull_u8>
		if (len == 0U) {
   4c71e:	4605      	mov	r5, r0
   4c720:	2800      	cmp	r0, #0
   4c722:	d0f7      	beq.n	4c714 <bt_data_parse+0xe>
		if (len > ad->len) {
   4c724:	88a3      	ldrh	r3, [r4, #4]
   4c726:	4283      	cmp	r3, r0
   4c728:	d3f4      	bcc.n	4c714 <bt_data_parse+0xe>
		data.type = net_buf_simple_pull_u8(ad);
   4c72a:	4620      	mov	r0, r4
   4c72c:	f003 fb35 	bl	4fd9a <net_buf_simple_pull_u8>
		data.data_len = len - 1;
   4c730:	3d01      	subs	r5, #1
		data.data = ad->data;
   4c732:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
   4c734:	f88d 0000 	strb.w	r0, [sp]
		if (!func(&data, user_data)) {
   4c738:	4639      	mov	r1, r7
   4c73a:	4668      	mov	r0, sp
		data.data_len = len - 1;
   4c73c:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
   4c740:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   4c742:	47b0      	blx	r6
   4c744:	2800      	cmp	r0, #0
   4c746:	d0e5      	beq.n	4c714 <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
   4c748:	4629      	mov	r1, r5
   4c74a:	4620      	mov	r0, r4
   4c74c:	f003 fb15 	bl	4fd7a <net_buf_simple_pull>
   4c750:	e7dd      	b.n	4c70e <bt_data_parse+0x8>

0004c752 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   4c752:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   4c754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   4c758:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   4c75a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4c75e:	2100      	movs	r1, #0
{
   4c760:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   4c762:	f7e1 f8eb 	bl	2d93c <bt_buf_get_evt>
   4c766:	2102      	movs	r1, #2
   4c768:	4604      	mov	r4, r0
   4c76a:	3008      	adds	r0, #8
   4c76c:	f003 fadc 	bl	4fd28 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   4c770:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   4c772:	7045      	strb	r5, [r0, #1]

	return buf;
}
   4c774:	4620      	mov	r0, r4
   4c776:	bd70      	pop	{r4, r5, r6, pc}

0004c778 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   4c778:	3103      	adds	r1, #3
{
   4c77a:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   4c77c:	b2c9      	uxtb	r1, r1
{
   4c77e:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   4c780:	200e      	movs	r0, #14
   4c782:	f7ff ffe6 	bl	4c752 <bt_hci_evt_create>
   4c786:	2103      	movs	r1, #3
   4c788:	4604      	mov	r4, r0
   4c78a:	3008      	adds	r0, #8
   4c78c:	f003 facc 	bl	4fd28 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   4c790:	2301      	movs	r3, #1
   4c792:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   4c794:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   4c798:	4620      	mov	r0, r4
   4c79a:	bd38      	pop	{r3, r4, r5, pc}

0004c79c <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   4c79c:	b570      	push	{r4, r5, r6, lr}
   4c79e:	4605      	mov	r5, r0
   4c7a0:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   4c7a2:	200f      	movs	r0, #15
   4c7a4:	2104      	movs	r1, #4
   4c7a6:	f7ff ffd4 	bl	4c752 <bt_hci_evt_create>
   4c7aa:	2104      	movs	r1, #4
   4c7ac:	4604      	mov	r4, r0
   4c7ae:	3008      	adds	r0, #8
   4c7b0:	f003 faba 	bl	4fd28 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   4c7b4:	2201      	movs	r2, #1
	cs->status = status;
   4c7b6:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   4c7b8:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   4c7ba:	8045      	strh	r5, [r0, #2]

	return buf;
}
   4c7bc:	4620      	mov	r0, r4
   4c7be:	bd70      	pop	{r4, r5, r6, pc}

0004c7c0 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   4c7c0:	2207      	movs	r2, #7
   4c7c2:	f7ff bad0 	b.w	4bd66 <memcpy>

0004c7c6 <atomic_get>:
   4c7c6:	f3bf 8f5b 	dmb	ish
   4c7ca:	6800      	ldr	r0, [r0, #0]
   4c7cc:	f3bf 8f5b 	dmb	ish
}
   4c7d0:	4770      	bx	lr

0004c7d2 <adv_unpause_enabled>:
{
   4c7d2:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4c7d4:	f100 0310 	add.w	r3, r0, #16
   4c7d8:	f3bf 8f5b 	dmb	ish
   4c7dc:	e853 2f00 	ldrex	r2, [r3]
   4c7e0:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   4c7e4:	e843 1400 	strex	r4, r1, [r3]
   4c7e8:	2c00      	cmp	r4, #0
   4c7ea:	d1f7      	bne.n	4c7dc <adv_unpause_enabled+0xa>
   4c7ec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   4c7f0:	0453      	lsls	r3, r2, #17
   4c7f2:	d503      	bpl.n	4c7fc <adv_unpause_enabled+0x2a>
}
   4c7f4:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   4c7f6:	2101      	movs	r1, #1
   4c7f8:	f000 b9fe 	b.w	4cbf8 <bt_le_adv_set_enable>
}
   4c7fc:	bc10      	pop	{r4}
   4c7fe:	4770      	bx	lr

0004c800 <hci_id_add.constprop.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   4c800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4c802:	4607      	mov	r7, r0
   4c804:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   4c806:	f242 0027 	movw	r0, #8231	; 0x2027
   4c80a:	2127      	movs	r1, #39	; 0x27
   4c80c:	f7e1 fa84 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   4c810:	4604      	mov	r4, r0
   4c812:	b1d0      	cbz	r0, 4c84a <hci_id_add.constprop.0+0x4a>
   4c814:	2127      	movs	r1, #39	; 0x27
   4c816:	3008      	adds	r0, #8
   4c818:	f003 fa86 	bl	4fd28 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   4c81c:	4639      	mov	r1, r7
   4c81e:	4605      	mov	r5, r0
   4c820:	f7ff ffce 	bl	4c7c0 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   4c824:	4631      	mov	r1, r6
   4c826:	2210      	movs	r2, #16
   4c828:	1de8      	adds	r0, r5, #7
   4c82a:	f7ff fa9c 	bl	4bd66 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   4c82e:	2210      	movs	r2, #16
   4c830:	2100      	movs	r1, #0
   4c832:	f105 0017 	add.w	r0, r5, #23
   4c836:	f7ff faa1 	bl	4bd7c <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   4c83a:	4621      	mov	r1, r4
   4c83c:	2200      	movs	r2, #0
}
   4c83e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   4c842:	f242 0027 	movw	r0, #8231	; 0x2027
   4c846:	f7e1 bac3 	b.w	2ddd0 <bt_hci_cmd_send_sync>
}
   4c84a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4c84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004c850 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   4c850:	7a03      	ldrb	r3, [r0, #8]
   4c852:	075b      	lsls	r3, r3, #29
   4c854:	d504      	bpl.n	4c860 <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   4c856:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   4c85a:	3001      	adds	r0, #1
   4c85c:	f7ff bfd0 	b.w	4c800 <hci_id_add.constprop.0>
}
   4c860:	4770      	bx	lr

0004c862 <addr_res_enable>:
{
   4c862:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   4c864:	2101      	movs	r1, #1
{
   4c866:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   4c868:	f242 002d 	movw	r0, #8237	; 0x202d
   4c86c:	f7e1 fa54 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   4c870:	4604      	mov	r4, r0
   4c872:	b158      	cbz	r0, 4c88c <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   4c874:	4629      	mov	r1, r5
   4c876:	3008      	adds	r0, #8
   4c878:	f003 fa65 	bl	4fd46 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   4c87c:	4621      	mov	r1, r4
   4c87e:	2200      	movs	r2, #0
}
   4c880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   4c884:	f242 002d 	movw	r0, #8237	; 0x202d
   4c888:	f7e1 baa2 	b.w	2ddd0 <bt_hci_cmd_send_sync>
}
   4c88c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4c890:	bd38      	pop	{r3, r4, r5, pc}

0004c892 <is_adv_using_rand_addr>:
{
   4c892:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   4c894:	f7e2 faa4 	bl	2ede0 <bt_le_adv_lookup_legacy>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
   4c898:	b120      	cbz	r0, 4c8a4 <is_adv_using_rand_addr+0x12>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   4c89a:	3010      	adds	r0, #16
   4c89c:	f7ff ff93 	bl	4c7c6 <atomic_get>
   4c8a0:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   4c8a4:	bd08      	pop	{r3, pc}

0004c8a6 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   4c8a6:	f100 0210 	add.w	r2, r0, #16
{
   4c8aa:	b508      	push	{r3, lr}
   4c8ac:	4603      	mov	r3, r0
   4c8ae:	4610      	mov	r0, r2
   4c8b0:	f7ff ff89 	bl	4c7c6 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   4c8b4:	0641      	lsls	r1, r0, #25
   4c8b6:	d511      	bpl.n	4c8dc <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4c8b8:	f3bf 8f5b 	dmb	ish
   4c8bc:	e852 0f00 	ldrex	r0, [r2]
   4c8c0:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
   4c8c4:	e842 0100 	strex	r1, r0, [r2]
   4c8c8:	2900      	cmp	r1, #0
   4c8ca:	d1f7      	bne.n	4c8bc <adv_pause_enabled+0x16>
   4c8cc:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   4c8d0:	4618      	mov	r0, r3
   4c8d2:	2100      	movs	r1, #0
}
   4c8d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   4c8d8:	f000 b98e 	b.w	4cbf8 <bt_le_adv_set_enable>
}
   4c8dc:	bd08      	pop	{r3, pc}

0004c8de <bt_lookup_id_addr>:
{
   4c8de:	b510      	push	{r4, lr}
   4c8e0:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   4c8e2:	f7e7 fa1d 	bl	33d20 <bt_keys_find_irk>
		if (keys) {
   4c8e6:	b100      	cbz	r0, 4c8ea <bt_lookup_id_addr+0xc>
			return &keys->addr;
   4c8e8:	1c44      	adds	r4, r0, #1
}
   4c8ea:	4620      	mov	r0, r4
   4c8ec:	bd10      	pop	{r4, pc}

0004c8ee <bt_id_set_private_addr>:
{
   4c8ee:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   4c8f0:	2106      	movs	r1, #6
   4c8f2:	4668      	mov	r0, sp
   4c8f4:	f7ea fc12 	bl	3711c <bt_rand>
	if (err) {
   4c8f8:	b940      	cbnz	r0, 4c90c <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   4c8fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   4c8fe:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   4c900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4c904:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   4c908:	f7e1 fe84 	bl	2e614 <set_random_address>
}
   4c90c:	b003      	add	sp, #12
   4c90e:	f85d fb04 	ldr.w	pc, [sp], #4

0004c912 <bt_id_set_adv_private_addr>:
{
   4c912:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   4c914:	2106      	movs	r1, #6
   4c916:	4668      	mov	r0, sp
   4c918:	f7ea fc00 	bl	3711c <bt_rand>
	if (err) {
   4c91c:	b940      	cbnz	r0, 4c930 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   4c91e:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   4c922:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   4c924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4c928:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   4c92c:	f7e1 fe72 	bl	2e614 <set_random_address>
}
   4c930:	b003      	add	sp, #12
   4c932:	f85d fb04 	ldr.w	pc, [sp], #4

0004c936 <bt_id_scan_random_addr_check>:
{
   4c936:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   4c938:	f7e2 fa52 	bl	2ede0 <bt_le_adv_lookup_legacy>
	if (!adv) {
   4c93c:	b110      	cbz	r0, 4c944 <bt_id_scan_random_addr_check+0xe>
   4c93e:	3010      	adds	r0, #16
   4c940:	f7ff ff41 	bl	4c7c6 <atomic_get>
}
   4c944:	2001      	movs	r0, #1
   4c946:	bd08      	pop	{r3, pc}

0004c948 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   4c948:	7a03      	ldrb	r3, [r0, #8]
   4c94a:	07d9      	lsls	r1, r3, #31
   4c94c:	d504      	bpl.n	4c958 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   4c94e:	f023 0301 	bic.w	r3, r3, #1
   4c952:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   4c954:	f7e1 beee 	b.w	2e734 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   4c958:	0799      	lsls	r1, r3, #30
   4c95a:	d504      	bpl.n	4c966 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   4c95c:	f023 0302 	bic.w	r3, r3, #2
   4c960:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   4c962:	f7e1 bf8d 	b.w	2e880 <bt_id_del>
}
   4c966:	4770      	bx	lr

0004c968 <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   4c968:	2000      	movs	r0, #0
   4c96a:	4770      	bx	lr

0004c96c <get_adv_channel_map>:
{
   4c96c:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   4c96e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   4c972:	bf0c      	ite	eq
   4c974:	2007      	moveq	r0, #7
   4c976:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   4c978:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   4c97a:	bf48      	it	mi
   4c97c:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   4c980:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   4c982:	bf48      	it	mi
   4c984:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   4c988:	4770      	bx	lr

0004c98a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4c98a:	f3bf 8f5b 	dmb	ish
   4c98e:	6800      	ldr	r0, [r0, #0]
   4c990:	f3bf 8f5b 	dmb	ish
}
   4c994:	4770      	bx	lr

0004c996 <atomic_and>:
{
   4c996:	b510      	push	{r4, lr}
   4c998:	4603      	mov	r3, r0
}
   4c99a:	f3bf 8f5b 	dmb	ish
   4c99e:	e853 0f00 	ldrex	r0, [r3]
   4c9a2:	ea00 0201 	and.w	r2, r0, r1
   4c9a6:	e843 2400 	strex	r4, r2, [r3]
   4c9aa:	2c00      	cmp	r4, #0
   4c9ac:	d1f7      	bne.n	4c99e <atomic_and+0x8>
   4c9ae:	f3bf 8f5b 	dmb	ish
   4c9b2:	bd10      	pop	{r4, pc}

0004c9b4 <hci_set_ad>:
{
   4c9b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4c9b8:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   4c9ba:	2120      	movs	r1, #32
{
   4c9bc:	9000      	str	r0, [sp, #0]
   4c9be:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   4c9c0:	f7e1 f9aa 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   4c9c4:	4605      	mov	r5, r0
   4c9c6:	2800      	cmp	r0, #0
   4c9c8:	d050      	beq.n	4ca6c <hci_set_ad+0xb8>
	return net_buf_simple_add(&buf->b, len);
   4c9ca:	2120      	movs	r1, #32
   4c9cc:	3008      	adds	r0, #8
   4c9ce:	f003 f9ab 	bl	4fd28 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   4c9d2:	2220      	movs	r2, #32
   4c9d4:	2100      	movs	r1, #0
   4c9d6:	4681      	mov	r9, r0
   4c9d8:	f7ff f9d0 	bl	4bd7c <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   4c9dc:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   4c9e0:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   4c9e4:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   4c9e6:	f8d4 8000 	ldr.w	r8, [r4]
   4c9ea:	2300      	movs	r3, #0
   4c9ec:	6862      	ldr	r2, [r4, #4]
   4c9ee:	4293      	cmp	r3, r2
   4c9f0:	d30c      	bcc.n	4ca0c <hci_set_ad+0x58>
	for (size_t i = 0; i < ad_len; i++) {
   4c9f2:	3408      	adds	r4, #8
   4c9f4:	45a2      	cmp	sl, r4
   4c9f6:	d1f6      	bne.n	4c9e6 <hci_set_ad+0x32>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   4c9f8:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   4c9fa:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   4c9fe:	2200      	movs	r2, #0
   4ca00:	4629      	mov	r1, r5
}
   4ca02:	b003      	add	sp, #12
   4ca04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   4ca08:	f7e1 b9e2 	b.w	2ddd0 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   4ca0c:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   4ca10:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   4ca14:	1cb0      	adds	r0, r6, #2
   4ca16:	1811      	adds	r1, r2, r0
   4ca18:	291f      	cmp	r1, #31
   4ca1a:	d908      	bls.n	4ca2e <hci_set_ad+0x7a>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   4ca1c:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   4ca20:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   4ca24:	d11a      	bne.n	4ca5c <hci_set_ad+0xa8>
   4ca26:	2a00      	cmp	r2, #0
   4ca28:	dd18      	ble.n	4ca5c <hci_set_ad+0xa8>
				type = BT_DATA_NAME_SHORTENED;
   4ca2a:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   4ca2e:	b2d7      	uxtb	r7, r2
   4ca30:	1c79      	adds	r1, r7, #1
   4ca32:	f80b 1006 	strb.w	r1, [fp, r6]
   4ca36:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   4ca38:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   4ca3a:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   4ca3e:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   4ca42:	f8d8 1004 	ldr.w	r1, [r8, #4]
   4ca46:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   4ca48:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   4ca4a:	f7ff f98c 	bl	4bd66 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   4ca4e:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   4ca50:	4437      	add	r7, r6
   4ca52:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   4ca54:	3301      	adds	r3, #1
   4ca56:	f108 0808 	add.w	r8, r8, #8
   4ca5a:	e7c7      	b.n	4c9ec <hci_set_ad+0x38>
		net_buf_unref(buf);
   4ca5c:	4628      	mov	r0, r5
   4ca5e:	f7f6 ffd9 	bl	43a14 <net_buf_unref>
		return err;
   4ca62:	f06f 0015 	mvn.w	r0, #21
}
   4ca66:	b003      	add	sp, #12
   4ca68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOBUFS;
   4ca6c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4ca70:	e7f9      	b.n	4ca66 <hci_set_ad+0xb2>

0004ca72 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   4ca72:	2301      	movs	r3, #1
{
   4ca74:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   4ca76:	fa03 f101 	lsl.w	r1, r3, r1
{
   4ca7a:	4604      	mov	r4, r0
	if (val) {
   4ca7c:	b162      	cbz	r2, 4ca98 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4ca7e:	f3bf 8f5b 	dmb	ish
   4ca82:	e854 3f00 	ldrex	r3, [r4]
   4ca86:	430b      	orrs	r3, r1
   4ca88:	e844 3200 	strex	r2, r3, [r4]
   4ca8c:	2a00      	cmp	r2, #0
   4ca8e:	d1f8      	bne.n	4ca82 <atomic_set_bit_to+0x10>
   4ca90:	f3bf 8f5b 	dmb	ish
	}
}
   4ca94:	bc10      	pop	{r4}
   4ca96:	4770      	bx	lr
   4ca98:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4ca9a:	43c9      	mvns	r1, r1
   4ca9c:	f7ff bf7b 	b.w	4c996 <atomic_and>

0004caa0 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   4caa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4caa4:	b087      	sub	sp, #28
   4caa6:	4605      	mov	r5, r0
   4caa8:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   4caac:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   4cab0:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   4cab4:	460c      	mov	r4, r1
   4cab6:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   4cab8:	2100      	movs	r1, #0
   4caba:	2210      	movs	r2, #16
   4cabc:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   4cabe:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   4cac0:	f7ff f95c 	bl	4bd7c <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   4cac4:	b9ee      	cbnz	r6, 4cb02 <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   4cac6:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   4caca:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   4cacc:	a902      	add	r1, sp, #8
   4cace:	f242 0008 	movw	r0, #8200	; 0x2008
   4cad2:	f7ff ff6f 	bl	4c9b4 <hci_set_ad>
		if (err) {
   4cad6:	4604      	mov	r4, r0
   4cad8:	b978      	cbnz	r0, 4cafa <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   4cada:	f1ba 0f00 	cmp.w	sl, #0
   4cade:	d13e      	bne.n	4cb5e <le_adv_update.constprop.0+0xbe>
   4cae0:	3510      	adds	r5, #16
   4cae2:	f3bf 8f5b 	dmb	ish
   4cae6:	e855 3f00 	ldrex	r3, [r5]
   4caea:	f043 0304 	orr.w	r3, r3, #4
   4caee:	e845 3200 	strex	r2, r3, [r5]
   4caf2:	2a00      	cmp	r2, #0
   4caf4:	d1f7      	bne.n	4cae6 <le_adv_update.constprop.0+0x46>
   4caf6:	f3bf 8f5b 	dmb	ish
}
   4cafa:	4620      	mov	r0, r4
   4cafc:	b007      	add	sp, #28
   4cafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   4cb02:	f7e1 fd69 	bl	2e5d8 <bt_get_name>
   4cb06:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   4cb08:	b9e4      	cbnz	r4, 4cb44 <le_adv_update.constprop.0+0xa4>
   4cb0a:	bb37      	cbnz	r7, 4cb5a <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   4cb0c:	4658      	mov	r0, fp
   4cb0e:	f7ff f8f3 	bl	4bcf8 <strlen>
   4cb12:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   4cb14:	2e01      	cmp	r6, #1
		d[0].data = ad;
   4cb16:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   4cb1a:	f88d 3000 	strb.w	r3, [sp]
   4cb1e:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   4cb22:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   4cb26:	d1d0      	bne.n	4caca <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   4cb28:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   4cb2c:	9605      	str	r6, [sp, #20]
			d_len = 2;
   4cb2e:	2202      	movs	r2, #2
   4cb30:	e7cc      	b.n	4cacc <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   4cb32:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   4cb36:	3a08      	subs	r2, #8
   4cb38:	2a01      	cmp	r2, #1
   4cb3a:	d925      	bls.n	4cb88 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   4cb3c:	3301      	adds	r3, #1
   4cb3e:	4598      	cmp	r8, r3
   4cb40:	d1f7      	bne.n	4cb32 <le_adv_update.constprop.0+0x92>
   4cb42:	e7e2      	b.n	4cb0a <le_adv_update.constprop.0+0x6a>
   4cb44:	2300      	movs	r3, #0
   4cb46:	e7fa      	b.n	4cb3e <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   4cb48:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   4cb4c:	3a08      	subs	r2, #8
   4cb4e:	2a01      	cmp	r2, #1
   4cb50:	d91a      	bls.n	4cb88 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   4cb52:	3301      	adds	r3, #1
   4cb54:	4599      	cmp	r9, r3
   4cb56:	d1f7      	bne.n	4cb48 <le_adv_update.constprop.0+0xa8>
   4cb58:	e7d8      	b.n	4cb0c <le_adv_update.constprop.0+0x6c>
   4cb5a:	2300      	movs	r3, #0
   4cb5c:	e7fa      	b.n	4cb54 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   4cb5e:	2e02      	cmp	r6, #2
   4cb60:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   4cb64:	bf08      	it	eq
   4cb66:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   4cb68:	a902      	add	r1, sp, #8
			d_len = 2;
   4cb6a:	bf08      	it	eq
   4cb6c:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   4cb6e:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   4cb72:	bf08      	it	eq
   4cb74:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   4cb78:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   4cb7c:	f7ff ff1a 	bl	4c9b4 <hci_set_ad>
		if (err) {
   4cb80:	2800      	cmp	r0, #0
   4cb82:	d0ad      	beq.n	4cae0 <le_adv_update.constprop.0+0x40>
   4cb84:	4604      	mov	r4, r0
   4cb86:	e7b8      	b.n	4cafa <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   4cb88:	f06f 0415 	mvn.w	r4, #21
   4cb8c:	e7b5      	b.n	4cafa <le_adv_update.constprop.0+0x5a>

0004cb8e <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   4cb8e:	6843      	ldr	r3, [r0, #4]
   4cb90:	f013 0008 	ands.w	r0, r3, #8
   4cb94:	d00a      	beq.n	4cbac <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   4cb96:	035a      	lsls	r2, r3, #13
   4cb98:	d407      	bmi.n	4cbaa <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   4cb9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   4cb9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   4cba2:	bf14      	ite	ne
   4cba4:	2002      	movne	r0, #2
   4cba6:	2001      	moveq	r0, #1
   4cba8:	4770      	bx	lr
   4cbaa:	2001      	movs	r0, #1
}
   4cbac:	4770      	bx	lr

0004cbae <bt_le_adv_set_enable_legacy>:
{
   4cbae:	b570      	push	{r4, r5, r6, lr}
   4cbb0:	4606      	mov	r6, r0
   4cbb2:	b086      	sub	sp, #24
   4cbb4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   4cbb6:	f242 000a 	movw	r0, #8202	; 0x200a
   4cbba:	2101      	movs	r1, #1
   4cbbc:	f7e1 f8ac 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   4cbc0:	4604      	mov	r4, r0
   4cbc2:	b1b0      	cbz	r0, 4cbf2 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   4cbc4:	3008      	adds	r0, #8
	if (enable) {
   4cbc6:	b195      	cbz	r5, 4cbee <bt_le_adv_set_enable_legacy+0x40>
   4cbc8:	2101      	movs	r1, #1
   4cbca:	f003 f8bc 	bl	4fd46 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   4cbce:	f106 0210 	add.w	r2, r6, #16
   4cbd2:	a903      	add	r1, sp, #12
   4cbd4:	4620      	mov	r0, r4
   4cbd6:	9500      	str	r5, [sp, #0]
   4cbd8:	2306      	movs	r3, #6
   4cbda:	f7e1 f88b 	bl	2dcf4 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   4cbde:	2200      	movs	r2, #0
   4cbe0:	4621      	mov	r1, r4
   4cbe2:	f242 000a 	movw	r0, #8202	; 0x200a
   4cbe6:	f7e1 f8f3 	bl	2ddd0 <bt_hci_cmd_send_sync>
}
   4cbea:	b006      	add	sp, #24
   4cbec:	bd70      	pop	{r4, r5, r6, pc}
   4cbee:	4629      	mov	r1, r5
   4cbf0:	e7eb      	b.n	4cbca <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   4cbf2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4cbf6:	e7f8      	b.n	4cbea <bt_le_adv_set_enable_legacy+0x3c>

0004cbf8 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   4cbf8:	f7ff bfd9 	b.w	4cbae <bt_le_adv_set_enable_legacy>

0004cbfc <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   4cbfc:	3018      	adds	r0, #24
   4cbfe:	f004 b8a3 	b.w	50d48 <k_work_cancel_delayable>

0004cc02 <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   4cc02:	f7e2 ba49 	b.w	2f098 <bt_le_adv_stop>

0004cc06 <atomic_and>:
{
   4cc06:	b510      	push	{r4, lr}
   4cc08:	4603      	mov	r3, r0
}
   4cc0a:	f3bf 8f5b 	dmb	ish
   4cc0e:	e853 0f00 	ldrex	r0, [r3]
   4cc12:	ea00 0201 	and.w	r2, r0, r1
   4cc16:	e843 2400 	strex	r4, r2, [r3]
   4cc1a:	2c00      	cmp	r4, #0
   4cc1c:	d1f7      	bne.n	4cc0e <atomic_and+0x8>
   4cc1e:	f3bf 8f5b 	dmb	ish
   4cc22:	bd10      	pop	{r4, pc}

0004cc24 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   4cc24:	f7e2 bae4 	b.w	2f1f0 <bt_le_scan_set_enable_legacy>

0004cc28 <atomic_and>:
{
   4cc28:	b510      	push	{r4, lr}
   4cc2a:	4603      	mov	r3, r0
}
   4cc2c:	f3bf 8f5b 	dmb	ish
   4cc30:	e853 0f00 	ldrex	r0, [r3]
   4cc34:	ea00 0201 	and.w	r2, r0, r1
   4cc38:	e843 2400 	strex	r4, r2, [r3]
   4cc3c:	2c00      	cmp	r4, #0
   4cc3e:	d1f7      	bne.n	4cc30 <atomic_and+0x8>
   4cc40:	f3bf 8f5b 	dmb	ish
   4cc44:	bd10      	pop	{r4, pc}

0004cc46 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4cc46:	f3bf 8f5b 	dmb	ish
   4cc4a:	6800      	ldr	r0, [r0, #0]
   4cc4c:	f3bf 8f5b 	dmb	ish
}
   4cc50:	4770      	bx	lr

0004cc52 <atomic_or>:
{
   4cc52:	b510      	push	{r4, lr}
   4cc54:	4603      	mov	r3, r0
}
   4cc56:	f3bf 8f5b 	dmb	ish
   4cc5a:	e853 0f00 	ldrex	r0, [r3]
   4cc5e:	ea40 0201 	orr.w	r2, r0, r1
   4cc62:	e843 2400 	strex	r4, r2, [r3]
   4cc66:	2c00      	cmp	r4, #0
   4cc68:	d1f7      	bne.n	4cc5a <atomic_or+0x8>
   4cc6a:	f3bf 8f5b 	dmb	ish
   4cc6e:	bd10      	pop	{r4, pc}

0004cc70 <tx_notify>:
{
   4cc70:	b570      	push	{r4, r5, r6, lr}
   4cc72:	4604      	mov	r4, r0
	__asm__ volatile(
   4cc74:	f04f 0220 	mov.w	r2, #32
   4cc78:	f3ef 8311 	mrs	r3, BASEPRI
   4cc7c:	f382 8812 	msr	BASEPRI_MAX, r2
   4cc80:	f3bf 8f6f 	isb	sy
	return list->head;
   4cc84:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   4cc86:	b920      	cbnz	r0, 4cc92 <tx_notify+0x22>
	__asm__ volatile(
   4cc88:	f383 8811 	msr	BASEPRI, r3
   4cc8c:	f3bf 8f6f 	isb	sy
}
   4cc90:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4cc92:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   4cc94:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   4cc96:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4cc98:	4288      	cmp	r0, r1
	list->tail = node;
   4cc9a:	bf08      	it	eq
   4cc9c:	6262      	streq	r2, [r4, #36]	; 0x24
   4cc9e:	f383 8811 	msr	BASEPRI, r3
   4cca2:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   4cca6:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   4ccaa:	f7e2 fe05 	bl	2f8b8 <tx_free>
		cb(conn, user_data);
   4ccae:	4631      	mov	r1, r6
   4ccb0:	4620      	mov	r0, r4
   4ccb2:	47a8      	blx	r5
	while (1) {
   4ccb4:	e7de      	b.n	4cc74 <tx_notify+0x4>

0004ccb6 <tx_complete_work>:
	tx_notify(conn);
   4ccb6:	3828      	subs	r0, #40	; 0x28
   4ccb8:	f7ff bfda 	b.w	4cc70 <tx_notify>

0004ccbc <bt_conn_reset_rx_state>:
{
   4ccbc:	b510      	push	{r4, lr}
   4ccbe:	4604      	mov	r4, r0
	if (!conn->rx) {
   4ccc0:	6900      	ldr	r0, [r0, #16]
   4ccc2:	b118      	cbz	r0, 4cccc <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   4ccc4:	f7f6 fea6 	bl	43a14 <net_buf_unref>
	conn->rx = NULL;
   4ccc8:	2300      	movs	r3, #0
   4ccca:	6123      	str	r3, [r4, #16]
}
   4cccc:	bd10      	pop	{r4, pc}

0004ccce <conn_cleanup>:
{
   4ccce:	b570      	push	{r4, r5, r6, lr}
   4ccd0:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   4ccd2:	f100 0638 	add.w	r6, r0, #56	; 0x38
   4ccd6:	2200      	movs	r2, #0
   4ccd8:	2300      	movs	r3, #0
   4ccda:	4630      	mov	r0, r6
   4ccdc:	f002 ffc1 	bl	4fc62 <net_buf_get>
   4cce0:	4605      	mov	r5, r0
   4cce2:	b950      	cbnz	r0, 4ccfa <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   4cce4:	4620      	mov	r0, r4
   4cce6:	f7ff ffe9 	bl	4ccbc <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   4ccea:	f104 0058 	add.w	r0, r4, #88	; 0x58
   4ccee:	2200      	movs	r2, #0
}
   4ccf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   4ccf4:	2300      	movs	r3, #0
   4ccf6:	f7fb bc3f 	b.w	48578 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   4ccfa:	6968      	ldr	r0, [r5, #20]
   4ccfc:	b108      	cbz	r0, 4cd02 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   4ccfe:	f7e2 fddb 	bl	2f8b8 <tx_free>
		net_buf_unref(buf);
   4cd02:	4628      	mov	r0, r5
   4cd04:	f7f6 fe86 	bl	43a14 <net_buf_unref>
   4cd08:	e7e5      	b.n	4ccd6 <conn_cleanup+0x8>

0004cd0a <bt_conn_recv>:
{
   4cd0a:	b570      	push	{r4, r5, r6, lr}
   4cd0c:	4616      	mov	r6, r2
   4cd0e:	4604      	mov	r4, r0
   4cd10:	460d      	mov	r5, r1
	tx_notify(conn);
   4cd12:	f7ff ffad 	bl	4cc70 <tx_notify>
	switch (flags) {
   4cd16:	2e01      	cmp	r6, #1
   4cd18:	d017      	beq.n	4cd4a <bt_conn_recv+0x40>
   4cd1a:	2e02      	cmp	r6, #2
   4cd1c:	d117      	bne.n	4cd4e <bt_conn_recv+0x44>
		if (conn->rx) {
   4cd1e:	6923      	ldr	r3, [r4, #16]
   4cd20:	b113      	cbz	r3, 4cd28 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   4cd22:	4620      	mov	r0, r4
   4cd24:	f7ff ffca 	bl	4ccbc <bt_conn_reset_rx_state>
		conn->rx = buf;
   4cd28:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   4cd2a:	6921      	ldr	r1, [r4, #16]
   4cd2c:	898a      	ldrh	r2, [r1, #12]
   4cd2e:	2a01      	cmp	r2, #1
   4cd30:	d937      	bls.n	4cda2 <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   4cd32:	688b      	ldr	r3, [r1, #8]
   4cd34:	881b      	ldrh	r3, [r3, #0]
   4cd36:	3304      	adds	r3, #4
   4cd38:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   4cd3a:	429a      	cmp	r2, r3
   4cd3c:	d331      	bcc.n	4cda2 <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   4cd3e:	d928      	bls.n	4cd92 <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   4cd40:	4620      	mov	r0, r4
}
   4cd42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   4cd46:	f7ff bfb9 	b.w	4ccbc <bt_conn_reset_rx_state>
		if (!conn->rx) {
   4cd4a:	6920      	ldr	r0, [r4, #16]
   4cd4c:	b918      	cbnz	r0, 4cd56 <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   4cd4e:	4620      	mov	r0, r4
   4cd50:	f7ff ffb4 	bl	4ccbc <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   4cd54:	e001      	b.n	4cd5a <bt_conn_recv+0x50>
		if (!buf->len) {
   4cd56:	89ae      	ldrh	r6, [r5, #12]
   4cd58:	b926      	cbnz	r6, 4cd64 <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   4cd5a:	4628      	mov	r0, r5
}
   4cd5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   4cd60:	f7f6 be58 	b.w	43a14 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   4cd64:	3008      	adds	r0, #8
   4cd66:	f003 f82c 	bl	4fdc2 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   4cd6a:	4286      	cmp	r6, r0
   4cd6c:	d907      	bls.n	4cd7e <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   4cd6e:	6921      	ldr	r1, [r4, #16]
   4cd70:	2200      	movs	r2, #0
   4cd72:	4620      	mov	r0, r4
   4cd74:	f000 facf 	bl	4d316 <bt_l2cap_recv>
			conn->rx = NULL;
   4cd78:	2300      	movs	r3, #0
   4cd7a:	6123      	str	r3, [r4, #16]
   4cd7c:	e7ed      	b.n	4cd5a <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   4cd7e:	6920      	ldr	r0, [r4, #16]
   4cd80:	89aa      	ldrh	r2, [r5, #12]
   4cd82:	68a9      	ldr	r1, [r5, #8]
   4cd84:	3008      	adds	r0, #8
   4cd86:	f002 ffd5 	bl	4fd34 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   4cd8a:	4628      	mov	r0, r5
   4cd8c:	f7f6 fe42 	bl	43a14 <net_buf_unref>
		break;
   4cd90:	e7cb      	b.n	4cd2a <bt_conn_recv+0x20>
	conn->rx = NULL;
   4cd92:	2300      	movs	r3, #0
   4cd94:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   4cd96:	4620      	mov	r0, r4
   4cd98:	2201      	movs	r2, #1
}
   4cd9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   4cd9e:	f000 baba 	b.w	4d316 <bt_l2cap_recv>
}
   4cda2:	bd70      	pop	{r4, r5, r6, pc}

0004cda4 <bt_conn_ref>:
{
   4cda4:	b510      	push	{r4, lr}
   4cda6:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   4cda8:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
   4cdac:	4610      	mov	r0, r2
   4cdae:	f7ff ff4a 	bl	4cc46 <atomic_get>
		if (!old) {
   4cdb2:	b180      	cbz	r0, 4cdd6 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   4cdb4:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   4cdb8:	1c41      	adds	r1, r0, #1
   4cdba:	e852 4f00 	ldrex	r4, [r2]
   4cdbe:	4284      	cmp	r4, r0
   4cdc0:	d104      	bne.n	4cdcc <bt_conn_ref+0x28>
   4cdc2:	e842 1c00 	strex	ip, r1, [r2]
   4cdc6:	f1bc 0f00 	cmp.w	ip, #0
   4cdca:	d1f6      	bne.n	4cdba <bt_conn_ref+0x16>
   4cdcc:	f3bf 8f5b 	dmb	ish
   4cdd0:	d1ec      	bne.n	4cdac <bt_conn_ref+0x8>
}
   4cdd2:	4618      	mov	r0, r3
   4cdd4:	bd10      	pop	{r4, pc}
			return NULL;
   4cdd6:	4603      	mov	r3, r0
   4cdd8:	e7fb      	b.n	4cdd2 <bt_conn_ref+0x2e>

0004cdda <bt_conn_unref>:
{
   4cdda:	b508      	push	{r3, lr}
   4cddc:	4603      	mov	r3, r0
	old = atomic_dec(&conn->ref);
   4cdde:	30bc      	adds	r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   4cde0:	f3bf 8f5b 	dmb	ish
   4cde4:	e850 2f00 	ldrex	r2, [r0]
   4cde8:	3a01      	subs	r2, #1
   4cdea:	e840 2100 	strex	r1, r2, [r0]
   4cdee:	2900      	cmp	r1, #0
   4cdf0:	d1f8      	bne.n	4cde4 <bt_conn_unref+0xa>
   4cdf2:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   4cdf6:	789b      	ldrb	r3, [r3, #2]
   4cdf8:	2b01      	cmp	r3, #1
   4cdfa:	d106      	bne.n	4ce0a <bt_conn_unref+0x30>
	    atomic_get(&conn->ref) == 0) {
   4cdfc:	f7ff ff23 	bl	4cc46 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   4ce00:	b918      	cbnz	r0, 4ce0a <bt_conn_unref+0x30>
}
   4ce02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   4ce06:	f7e2 b9a5 	b.w	2f154 <bt_le_adv_resume>
}
   4ce0a:	bd08      	pop	{r3, pc}

0004ce0c <conn_lookup_handle>:
{
   4ce0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4ce10:	4607      	mov	r7, r0
   4ce12:	460e      	mov	r6, r1
   4ce14:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   4ce16:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   4ce18:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   4ce1c:	42b4      	cmp	r4, r6
   4ce1e:	d103      	bne.n	4ce28 <conn_lookup_handle+0x1c>
	return NULL;
   4ce20:	2300      	movs	r3, #0
}
   4ce22:	4618      	mov	r0, r3
   4ce24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   4ce28:	fb09 7004 	mla	r0, r9, r4, r7
   4ce2c:	f7ff ffba 	bl	4cda4 <bt_conn_ref>
   4ce30:	4603      	mov	r3, r0
		if (!conn) {
   4ce32:	b158      	cbz	r0, 4ce4c <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   4ce34:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   4ce36:	2d01      	cmp	r5, #1
   4ce38:	d002      	beq.n	4ce40 <conn_lookup_handle+0x34>
   4ce3a:	3d07      	subs	r5, #7
   4ce3c:	2d01      	cmp	r5, #1
   4ce3e:	d803      	bhi.n	4ce48 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   4ce40:	881a      	ldrh	r2, [r3, #0]
   4ce42:	4542      	cmp	r2, r8
   4ce44:	d0ed      	beq.n	4ce22 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   4ce46:	4618      	mov	r0, r3
   4ce48:	f7ff ffc7 	bl	4cdda <bt_conn_unref>
	for (i = 0; i < size; i++) {
   4ce4c:	3401      	adds	r4, #1
   4ce4e:	e7e5      	b.n	4ce1c <conn_lookup_handle+0x10>

0004ce50 <bt_conn_connected>:
{
   4ce50:	b510      	push	{r4, lr}
   4ce52:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   4ce54:	f7e3 fbcc 	bl	305f0 <bt_l2cap_connected>
	notify_connected(conn);
   4ce58:	4620      	mov	r0, r4
}
   4ce5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   4ce5e:	f7e2 bd35 	b.w	2f8cc <notify_connected>

0004ce62 <bt_conn_le_start_encryption>:
{
   4ce62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4ce66:	4682      	mov	sl, r0
   4ce68:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   4ce6a:	f242 0019 	movw	r0, #8217	; 0x2019
   4ce6e:	211c      	movs	r1, #28
{
   4ce70:	9e08      	ldr	r6, [sp, #32]
   4ce72:	4690      	mov	r8, r2
   4ce74:	461f      	mov	r7, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   4ce76:	f7e0 ff4f 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   4ce7a:	4605      	mov	r5, r0
   4ce7c:	b340      	cbz	r0, 4ced0 <bt_conn_le_start_encryption+0x6e>
	return net_buf_simple_add(&buf->b, len);
   4ce7e:	211c      	movs	r1, #28
   4ce80:	3008      	adds	r0, #8
   4ce82:	f002 ff51 	bl	4fd28 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   4ce86:	f8ba 3000 	ldrh.w	r3, [sl]
   4ce8a:	4604      	mov	r4, r0
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   4ce8c:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   4ce8e:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   4ce92:	4649      	mov	r1, r9
   4ce94:	f7fe ff67 	bl	4bd66 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   4ce98:	2202      	movs	r2, #2
   4ce9a:	4641      	mov	r1, r8
   4ce9c:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   4cea0:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   4cea2:	f7fe ff60 	bl	4bd66 <memcpy>
	memcpy(cp->ltk, ltk, len);
   4cea6:	4632      	mov	r2, r6
   4cea8:	4639      	mov	r1, r7
   4ceaa:	4620      	mov	r0, r4
   4ceac:	f7fe ff5b 	bl	4bd66 <memcpy>
	if (len < sizeof(cp->ltk)) {
   4ceb0:	2e0f      	cmp	r6, #15
   4ceb2:	d805      	bhi.n	4cec0 <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   4ceb4:	f1c6 0210 	rsb	r2, r6, #16
   4ceb8:	2100      	movs	r1, #0
   4ceba:	19a0      	adds	r0, r4, r6
   4cebc:	f7fe ff5e 	bl	4bd7c <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   4cec0:	4629      	mov	r1, r5
   4cec2:	2200      	movs	r2, #0
}
   4cec4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   4cec8:	f242 0019 	movw	r0, #8217	; 0x2019
   4cecc:	f7e0 bf80 	b.w	2ddd0 <bt_hci_cmd_send_sync>
}
   4ced0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4ced4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004ced8 <bt_conn_set_security>:
{
   4ced8:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   4ceda:	7b43      	ldrb	r3, [r0, #13]
   4cedc:	2b07      	cmp	r3, #7
{
   4cede:	4604      	mov	r4, r0
   4cee0:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   4cee2:	d11e      	bne.n	4cf22 <bt_conn_set_security+0x4a>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   4cee4:	7a43      	ldrb	r3, [r0, #9]
   4cee6:	428b      	cmp	r3, r1
   4cee8:	d211      	bcs.n	4cf0e <bt_conn_set_security+0x36>
   4ceea:	7a83      	ldrb	r3, [r0, #10]
   4ceec:	428b      	cmp	r3, r1
   4ceee:	d20e      	bcs.n	4cf0e <bt_conn_set_security+0x36>
	if (val) {
   4cef0:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   4cef2:	f100 0004 	add.w	r0, r0, #4
   4cef6:	d50c      	bpl.n	4cf12 <bt_conn_set_security+0x3a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4cef8:	f44f 6100 	mov.w	r1, #2048	; 0x800
   4cefc:	f7ff fea9 	bl	4cc52 <atomic_or>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   4cf00:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   4cf04:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   4cf06:	4620      	mov	r0, r4
   4cf08:	f002 fbf0 	bl	4f6ec <bt_smp_start_security>
	if (err) {
   4cf0c:	b930      	cbnz	r0, 4cf1c <bt_conn_set_security+0x44>
		return -ENOTCONN;
   4cf0e:	2000      	movs	r0, #0
}
   4cf10:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4cf12:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   4cf16:	f7ff fe87 	bl	4cc28 <atomic_and>
   4cf1a:	e7f1      	b.n	4cf00 <bt_conn_set_security+0x28>
		conn->required_sec_level = conn->sec_level;
   4cf1c:	7a63      	ldrb	r3, [r4, #9]
   4cf1e:	72a3      	strb	r3, [r4, #10]
   4cf20:	e7f6      	b.n	4cf10 <bt_conn_set_security+0x38>
		return -ENOTCONN;
   4cf22:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4cf26:	e7f3      	b.n	4cf10 <bt_conn_set_security+0x38>

0004cf28 <bt_conn_get_security>:
}
   4cf28:	7a40      	ldrb	r0, [r0, #9]
   4cf2a:	4770      	bx	lr

0004cf2c <bt_conn_is_peer_addr_le>:
{
   4cf2c:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   4cf2e:	7a03      	ldrb	r3, [r0, #8]
   4cf30:	428b      	cmp	r3, r1
{
   4cf32:	4604      	mov	r4, r0
   4cf34:	4615      	mov	r5, r2
	if (id != conn->id) {
   4cf36:	d115      	bne.n	4cf64 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   4cf38:	f100 0188 	add.w	r1, r0, #136	; 0x88
   4cf3c:	2207      	movs	r2, #7
   4cf3e:	4628      	mov	r0, r5
   4cf40:	f7fe ff01 	bl	4bd46 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   4cf44:	b180      	cbz	r0, 4cf68 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   4cf46:	78e3      	ldrb	r3, [r4, #3]
   4cf48:	2207      	movs	r2, #7
   4cf4a:	b943      	cbnz	r3, 4cf5e <bt_conn_is_peer_addr_le+0x32>
   4cf4c:	f104 0196 	add.w	r1, r4, #150	; 0x96
   4cf50:	4628      	mov	r0, r5
   4cf52:	f7fe fef8 	bl	4bd46 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   4cf56:	fab0 f080 	clz	r0, r0
   4cf5a:	0940      	lsrs	r0, r0, #5
}
   4cf5c:	bd38      	pop	{r3, r4, r5, pc}
   4cf5e:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   4cf62:	e7f5      	b.n	4cf50 <bt_conn_is_peer_addr_le+0x24>
		return false;
   4cf64:	2000      	movs	r0, #0
   4cf66:	e7f9      	b.n	4cf5c <bt_conn_is_peer_addr_le+0x30>
		return true;
   4cf68:	2001      	movs	r0, #1
   4cf6a:	e7f7      	b.n	4cf5c <bt_conn_is_peer_addr_le+0x30>

0004cf6c <bt_conn_exists_le>:
{
   4cf6c:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   4cf6e:	f7e3 f819 	bl	2ffa4 <bt_conn_lookup_addr_le>
	if (conn) {
   4cf72:	b110      	cbz	r0, 4cf7a <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   4cf74:	f7ff ff31 	bl	4cdda <bt_conn_unref>
		return true;
   4cf78:	2001      	movs	r0, #1
}
   4cf7a:	bd08      	pop	{r3, pc}

0004cf7c <bt_conn_get_dst>:
}
   4cf7c:	3088      	adds	r0, #136	; 0x88
   4cf7e:	4770      	bx	lr

0004cf80 <bt_conn_le_phy_update>:
{
   4cf80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4cf82:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   4cf84:	3004      	adds	r0, #4
   4cf86:	f7ff fe5e 	bl	4cc46 <atomic_get>
   4cf8a:	460b      	mov	r3, r1
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   4cf8c:	04c1      	lsls	r1, r0, #19
   4cf8e:	d51a      	bpl.n	4cfc6 <bt_conn_le_phy_update+0x46>
	if ((param->options & BT_CONN_LE_PHY_OPT_CODED_S2) &&
   4cf90:	881c      	ldrh	r4, [r3, #0]
   4cf92:	f004 0203 	and.w	r2, r4, #3
   4cf96:	2a03      	cmp	r2, #3
   4cf98:	d011      	beq.n	4cfbe <bt_conn_le_phy_update+0x3e>
	} else if (param->options & BT_CONN_LE_PHY_OPT_CODED_S2) {
   4cf9a:	07e2      	lsls	r2, r4, #31
   4cf9c:	d411      	bmi.n	4cfc2 <bt_conn_le_phy_update+0x42>
	} else if (param->options & BT_CONN_LE_PHY_OPT_CODED_S8) {
   4cf9e:	f004 0402 	and.w	r4, r4, #2
	if (param->pref_tx_phy == BT_GAP_LE_PHY_NONE) {
   4cfa2:	789a      	ldrb	r2, [r3, #2]
	if (param->pref_rx_phy == BT_GAP_LE_PHY_NONE) {
   4cfa4:	78db      	ldrb	r3, [r3, #3]
	if (param->pref_tx_phy == BT_GAP_LE_PHY_NONE) {
   4cfa6:	fab2 f182 	clz	r1, r2
   4cfaa:	0949      	lsrs	r1, r1, #5
	if (param->pref_rx_phy == BT_GAP_LE_PHY_NONE) {
   4cfac:	b90b      	cbnz	r3, 4cfb2 <bt_conn_le_phy_update+0x32>
		all_phys |= BT_HCI_LE_PHY_RX_ANY;
   4cfae:	f041 0102 	orr.w	r1, r1, #2
	return bt_le_set_phy(conn, all_phys, param->pref_tx_phy,
   4cfb2:	9400      	str	r4, [sp, #0]
   4cfb4:	4628      	mov	r0, r5
   4cfb6:	f7ff fa69 	bl	4c48c <bt_le_set_phy>
}
   4cfba:	b003      	add	sp, #12
   4cfbc:	bd30      	pop	{r4, r5, pc}
		phy_opts = BT_HCI_LE_PHY_CODED_ANY;
   4cfbe:	2400      	movs	r4, #0
   4cfc0:	e7ef      	b.n	4cfa2 <bt_conn_le_phy_update+0x22>
		phy_opts = BT_HCI_LE_PHY_CODED_S2;
   4cfc2:	2401      	movs	r4, #1
   4cfc4:	e7ed      	b.n	4cfa2 <bt_conn_le_phy_update+0x22>
		return -EAGAIN;
   4cfc6:	f06f 000a 	mvn.w	r0, #10
   4cfca:	e7f6      	b.n	4cfba <bt_conn_le_phy_update+0x3a>

0004cfcc <bt_conn_disconnect>:
{
   4cfcc:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4cfce:	7883      	ldrb	r3, [r0, #2]
   4cfd0:	2b01      	cmp	r3, #1
{
   4cfd2:	4604      	mov	r4, r0
   4cfd4:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4cfd6:	d103      	bne.n	4cfe0 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   4cfd8:	2100      	movs	r1, #0
   4cfda:	3088      	adds	r0, #136	; 0x88
   4cfdc:	f7e3 f90c 	bl	301f8 <bt_le_set_auto_conn>
	switch (conn->state) {
   4cfe0:	7b63      	ldrb	r3, [r4, #13]
   4cfe2:	3b02      	subs	r3, #2
   4cfe4:	2b06      	cmp	r3, #6
   4cfe6:	d825      	bhi.n	4d034 <bt_conn_disconnect+0x68>
   4cfe8:	e8df f003 	tbb	[pc, r3]
   4cfec:	24242404 	.word	0x24242404
   4cff0:	160e      	.short	0x160e
   4cff2:	0c          	.byte	0x0c
   4cff3:	00          	.byte	0x00
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   4cff4:	4620      	mov	r0, r4
		conn->err = reason;
   4cff6:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   4cff8:	2100      	movs	r1, #0
   4cffa:	f7e2 fdcf 	bl	2fb9c <bt_conn_set_state>
			bt_le_scan_update(false);
   4cffe:	2000      	movs	r0, #0
   4d000:	f7e2 f97e 	bl	2f300 <bt_le_scan_update>
{
   4d004:	2000      	movs	r0, #0
}
   4d006:	bd38      	pop	{r3, r4, r5, pc}
			k_work_cancel_delayable(&conn->deferred_work);
   4d008:	f104 0058 	add.w	r0, r4, #88	; 0x58
   4d00c:	f003 fe9c 	bl	50d48 <k_work_cancel_delayable>
}
   4d010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   4d014:	f7e0 bfaa 	b.w	2df6c <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   4d018:	8820      	ldrh	r0, [r4, #0]
   4d01a:	4629      	mov	r1, r5
   4d01c:	f7ff f9fe 	bl	4c41c <bt_hci_disconnect>
	if (err) {
   4d020:	2800      	cmp	r0, #0
   4d022:	d1f0      	bne.n	4d006 <bt_conn_disconnect+0x3a>
	if (conn->state == BT_CONN_CONNECTED) {
   4d024:	7b63      	ldrb	r3, [r4, #13]
   4d026:	2b07      	cmp	r3, #7
   4d028:	d1ec      	bne.n	4d004 <bt_conn_disconnect+0x38>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   4d02a:	2108      	movs	r1, #8
   4d02c:	4620      	mov	r0, r4
   4d02e:	f7e2 fdb5 	bl	2fb9c <bt_conn_set_state>
   4d032:	e7e7      	b.n	4d004 <bt_conn_disconnect+0x38>
		return -ENOTCONN;
   4d034:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4d038:	e7e5      	b.n	4d006 <bt_conn_disconnect+0x3a>

0004d03a <bt_conn_le_conn_update>:
{
   4d03a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4d03c:	4607      	mov	r7, r0
   4d03e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   4d040:	f242 0013 	movw	r0, #8211	; 0x2013
   4d044:	210e      	movs	r1, #14
   4d046:	f7e0 fe67 	bl	2dd18 <bt_hci_cmd_create>
	if (!buf) {
   4d04a:	4606      	mov	r6, r0
   4d04c:	b1d0      	cbz	r0, 4d084 <bt_conn_le_conn_update+0x4a>
   4d04e:	210e      	movs	r1, #14
   4d050:	3008      	adds	r0, #8
   4d052:	f002 fe69 	bl	4fd28 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   4d056:	220e      	movs	r2, #14
   4d058:	4604      	mov	r4, r0
   4d05a:	2100      	movs	r1, #0
   4d05c:	f7fe fe8e 	bl	4bd7c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   4d060:	883b      	ldrh	r3, [r7, #0]
   4d062:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   4d064:	882b      	ldrh	r3, [r5, #0]
   4d066:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   4d068:	886b      	ldrh	r3, [r5, #2]
   4d06a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   4d06c:	88ab      	ldrh	r3, [r5, #4]
   4d06e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   4d070:	88eb      	ldrh	r3, [r5, #6]
   4d072:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   4d074:	4631      	mov	r1, r6
   4d076:	2200      	movs	r2, #0
}
   4d078:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   4d07c:	f242 0013 	movw	r0, #8211	; 0x2013
   4d080:	f7e0 bea6 	b.w	2ddd0 <bt_hci_cmd_send_sync>
}
   4d084:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4d088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004d08a <l2cap_connected>:
}
   4d08a:	4770      	bx	lr

0004d08c <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   4d08c:	3010      	adds	r0, #16
   4d08e:	f003 be5b 	b.w	50d48 <k_work_cancel_delayable>

0004d092 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   4d092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4d094:	4607      	mov	r7, r0
   4d096:	460e      	mov	r6, r1
   4d098:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   4d09a:	2300      	movs	r3, #0
   4d09c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   4d0a0:	2104      	movs	r1, #4
   4d0a2:	2000      	movs	r0, #0
   4d0a4:	f7e2 fe56 	bl	2fd54 <bt_conn_create_pdu_timeout>
	if (!buf) {
   4d0a8:	4604      	mov	r4, r0
   4d0aa:	b130      	cbz	r0, 4d0ba <l2cap_create_le_sig_pdu.constprop.0+0x28>
   4d0ac:	2104      	movs	r1, #4
   4d0ae:	3008      	adds	r0, #8
   4d0b0:	f002 fe3a 	bl	4fd28 <net_buf_simple_add>
	hdr->code = code;
   4d0b4:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   4d0b6:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   4d0b8:	8045      	strh	r5, [r0, #2]
}
   4d0ba:	4620      	mov	r0, r4
   4d0bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004d0be <bt_l2cap_chan_remove>:
	return list->head;
   4d0be:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   4d0c0:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4d0c2:	b173      	cbz	r3, 4d0e2 <bt_l2cap_chan_remove+0x24>
   4d0c4:	3b08      	subs	r3, #8
   4d0c6:	2500      	movs	r5, #0
	return node->next;
   4d0c8:	461a      	mov	r2, r3
		if (chan == ch) {
   4d0ca:	428b      	cmp	r3, r1
   4d0cc:	f852 4f08 	ldr.w	r4, [r2, #8]!
   4d0d0:	d10d      	bne.n	4d0ee <bt_l2cap_chan_remove+0x30>
	return list->tail;
   4d0d2:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   4d0d4:	b935      	cbnz	r5, 4d0e4 <bt_l2cap_chan_remove+0x26>
   4d0d6:	428a      	cmp	r2, r1
	list->head = node;
   4d0d8:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   4d0da:	d100      	bne.n	4d0de <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   4d0dc:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   4d0de:	2200      	movs	r2, #0
   4d0e0:	609a      	str	r2, [r3, #8]
}
   4d0e2:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   4d0e4:	428a      	cmp	r2, r1
	parent->next = child;
   4d0e6:	602c      	str	r4, [r5, #0]
	list->tail = node;
   4d0e8:	bf08      	it	eq
   4d0ea:	6545      	streq	r5, [r0, #84]	; 0x54
}
   4d0ec:	e7f7      	b.n	4d0de <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4d0ee:	2c00      	cmp	r4, #0
   4d0f0:	d0f7      	beq.n	4d0e2 <bt_l2cap_chan_remove+0x24>
   4d0f2:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   4d0f6:	4615      	mov	r5, r2
   4d0f8:	e7e6      	b.n	4d0c8 <bt_l2cap_chan_remove+0xa>

0004d0fa <bt_l2cap_chan_del>:
{
   4d0fa:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   4d0fc:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   4d100:	4604      	mov	r4, r0
	if (!chan->conn) {
   4d102:	b123      	cbz	r3, 4d10e <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   4d104:	686b      	ldr	r3, [r5, #4]
   4d106:	b103      	cbz	r3, 4d10a <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   4d108:	4798      	blx	r3
	chan->conn = NULL;
   4d10a:	2300      	movs	r3, #0
   4d10c:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   4d10e:	68e3      	ldr	r3, [r4, #12]
   4d110:	b10b      	cbz	r3, 4d116 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   4d112:	4620      	mov	r0, r4
   4d114:	4798      	blx	r3
	if (ops->released) {
   4d116:	69eb      	ldr	r3, [r5, #28]
   4d118:	b11b      	cbz	r3, 4d122 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   4d11a:	4620      	mov	r0, r4
}
   4d11c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   4d120:	4718      	bx	r3
}
   4d122:	bd70      	pop	{r4, r5, r6, pc}

0004d124 <l2cap_rtx_timeout>:
{
   4d124:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   4d126:	f1a0 0410 	sub.w	r4, r0, #16
   4d12a:	4621      	mov	r1, r4
   4d12c:	f850 0c10 	ldr.w	r0, [r0, #-16]
   4d130:	f7ff ffc5 	bl	4d0be <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   4d134:	4620      	mov	r0, r4
}
   4d136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
   4d13a:	f7ff bfde 	b.w	4d0fa <bt_l2cap_chan_del>

0004d13e <bt_l2cap_disconnected>:
	return list->head;
   4d13e:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   4d140:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d142:	b130      	cbz	r0, 4d152 <bt_l2cap_disconnected+0x14>
	return node->next;
   4d144:	f850 4908 	ldr.w	r4, [r0], #-8
   4d148:	b104      	cbz	r4, 4d14c <bt_l2cap_disconnected+0xe>
   4d14a:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   4d14c:	f7ff ffd5 	bl	4d0fa <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d150:	b904      	cbnz	r4, 4d154 <bt_l2cap_disconnected+0x16>
}
   4d152:	bd38      	pop	{r3, r4, r5, pc}
   4d154:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d156:	b12d      	cbz	r5, 4d164 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   4d158:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d15a:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   4d15c:	f7ff ffcd 	bl	4d0fa <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d160:	462c      	mov	r4, r5
   4d162:	e7f7      	b.n	4d154 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   4d164:	4620      	mov	r0, r4
}
   4d166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   4d16a:	f7ff bfc6 	b.w	4d0fa <bt_l2cap_chan_del>

0004d16e <bt_l2cap_security_changed>:
{
   4d16e:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   4d170:	6d03      	ldr	r3, [r0, #80]	; 0x50
   4d172:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d174:	b1bb      	cbz	r3, 4d1a6 <bt_l2cap_security_changed+0x38>
   4d176:	4618      	mov	r0, r3
	return node->next;
   4d178:	f850 4908 	ldr.w	r4, [r0], #-8
   4d17c:	b104      	cbz	r4, 4d180 <bt_l2cap_security_changed+0x12>
   4d17e:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   4d180:	f853 3c04 	ldr.w	r3, [r3, #-4]
   4d184:	689b      	ldr	r3, [r3, #8]
   4d186:	b10b      	cbz	r3, 4d18c <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   4d188:	4629      	mov	r1, r5
   4d18a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d18c:	b15c      	cbz	r4, 4d1a6 <bt_l2cap_security_changed+0x38>
   4d18e:	4620      	mov	r0, r4
   4d190:	68a4      	ldr	r4, [r4, #8]
   4d192:	6843      	ldr	r3, [r0, #4]
   4d194:	b124      	cbz	r4, 4d1a0 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   4d196:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d198:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   4d19a:	2b00      	cmp	r3, #0
   4d19c:	d1f4      	bne.n	4d188 <bt_l2cap_security_changed+0x1a>
   4d19e:	e7f6      	b.n	4d18e <bt_l2cap_security_changed+0x20>
   4d1a0:	689b      	ldr	r3, [r3, #8]
   4d1a2:	2b00      	cmp	r3, #0
   4d1a4:	d1f0      	bne.n	4d188 <bt_l2cap_security_changed+0x1a>
}
   4d1a6:	bd38      	pop	{r3, r4, r5, pc}

0004d1a8 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   4d1a8:	3104      	adds	r1, #4
   4d1aa:	f7e2 bdd3 	b.w	2fd54 <bt_conn_create_pdu_timeout>

0004d1ae <bt_l2cap_send_cb>:
{
   4d1ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4d1b2:	4614      	mov	r4, r2
   4d1b4:	4605      	mov	r5, r0
   4d1b6:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   4d1b8:	f102 0008 	add.w	r0, r2, #8
   4d1bc:	2104      	movs	r1, #4
   4d1be:	461e      	mov	r6, r3
   4d1c0:	f8dd 8018 	ldr.w	r8, [sp, #24]
   4d1c4:	f002 fdd1 	bl	4fd6a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   4d1c8:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   4d1ca:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   4d1cc:	3a04      	subs	r2, #4
   4d1ce:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   4d1d0:	4643      	mov	r3, r8
   4d1d2:	4632      	mov	r2, r6
   4d1d4:	4621      	mov	r1, r4
   4d1d6:	4628      	mov	r0, r5
}
   4d1d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   4d1dc:	f7e2 bc64 	b.w	2faa8 <bt_conn_send_cb>

0004d1e0 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   4d1e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4d1e2:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   4d1e4:	2202      	movs	r2, #2
   4d1e6:	2001      	movs	r0, #1
   4d1e8:	f7ff ff53 	bl	4d092 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   4d1ec:	4604      	mov	r4, r0
   4d1ee:	b198      	cbz	r0, 4d218 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   4d1f0:	2102      	movs	r1, #2
   4d1f2:	3008      	adds	r0, #8
   4d1f4:	f002 fd98 	bl	4fd28 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   4d1f8:	2300      	movs	r3, #0
   4d1fa:	7003      	strb	r3, [r0, #0]
   4d1fc:	7043      	strb	r3, [r0, #1]
   4d1fe:	4622      	mov	r2, r4
   4d200:	9300      	str	r3, [sp, #0]
   4d202:	2105      	movs	r1, #5
   4d204:	4628      	mov	r0, r5
   4d206:	f7ff ffd2 	bl	4d1ae <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   4d20a:	b128      	cbz	r0, 4d218 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   4d20c:	4620      	mov	r0, r4
}
   4d20e:	b003      	add	sp, #12
   4d210:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   4d214:	f7f6 bbfe 	b.w	43a14 <net_buf_unref>
}
   4d218:	b003      	add	sp, #12
   4d21a:	bd30      	pop	{r4, r5, pc}

0004d21c <l2cap_recv>:
{
   4d21c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   4d21e:	898b      	ldrh	r3, [r1, #12]
   4d220:	2b03      	cmp	r3, #3
{
   4d222:	b085      	sub	sp, #20
   4d224:	4605      	mov	r5, r0
   4d226:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   4d228:	d911      	bls.n	4d24e <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   4d22a:	2104      	movs	r1, #4
   4d22c:	f104 0008 	add.w	r0, r4, #8
   4d230:	f002 fdab 	bl	4fd8a <net_buf_simple_pull_mem>
	if (buf->len != len) {
   4d234:	89a3      	ldrh	r3, [r4, #12]
   4d236:	8846      	ldrh	r6, [r0, #2]
   4d238:	429e      	cmp	r6, r3
   4d23a:	d108      	bne.n	4d24e <l2cap_recv+0x32>
	if (!hdr->ident) {
   4d23c:	7841      	ldrb	r1, [r0, #1]
   4d23e:	b131      	cbz	r1, 4d24e <l2cap_recv+0x32>
	switch (hdr->code) {
   4d240:	7803      	ldrb	r3, [r0, #0]
   4d242:	2b12      	cmp	r3, #18
   4d244:	d006      	beq.n	4d254 <l2cap_recv+0x38>
   4d246:	2b13      	cmp	r3, #19
   4d248:	d001      	beq.n	4d24e <l2cap_recv+0x32>
   4d24a:	2b01      	cmp	r3, #1
   4d24c:	d14b      	bne.n	4d2e6 <l2cap_recv+0xca>
}
   4d24e:	2000      	movs	r0, #0
   4d250:	b005      	add	sp, #20
   4d252:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < sizeof(*req)) {
   4d254:	2e07      	cmp	r6, #7
   4d256:	682d      	ldr	r5, [r5, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   4d258:	68a2      	ldr	r2, [r4, #8]
	if (buf->len < sizeof(*req)) {
   4d25a:	d9f8      	bls.n	4d24e <l2cap_recv+0x32>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   4d25c:	78ef      	ldrb	r7, [r5, #3]
   4d25e:	b11f      	cbz	r7, 4d268 <l2cap_recv+0x4c>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   4d260:	4628      	mov	r0, r5
		l2cap_send_reject(chan->conn, hdr->ident,
   4d262:	f7ff ffbd 	bl	4d1e0 <l2cap_send_reject.constprop.0>
		break;
   4d266:	e7f2      	b.n	4d24e <l2cap_recv+0x32>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   4d268:	7850      	ldrb	r0, [r2, #1]
   4d26a:	7813      	ldrb	r3, [r2, #0]
   4d26c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   4d270:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   4d274:	78d0      	ldrb	r0, [r2, #3]
   4d276:	7893      	ldrb	r3, [r2, #2]
   4d278:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   4d27c:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   4d280:	7950      	ldrb	r0, [r2, #5]
   4d282:	7913      	ldrb	r3, [r2, #4]
   4d284:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   4d288:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   4d28c:	7993      	ldrb	r3, [r2, #6]
   4d28e:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   4d290:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   4d292:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   4d296:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   4d298:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   4d29c:	f7ff fef9 	bl	4d092 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   4d2a0:	4604      	mov	r4, r0
   4d2a2:	2800      	cmp	r0, #0
   4d2a4:	d0d3      	beq.n	4d24e <l2cap_recv+0x32>
	accepted = le_param_req(conn, &param);
   4d2a6:	a902      	add	r1, sp, #8
   4d2a8:	4628      	mov	r0, r5
   4d2aa:	f7e2 fdc9 	bl	2fe40 <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   4d2ae:	2102      	movs	r1, #2
   4d2b0:	4606      	mov	r6, r0
   4d2b2:	f104 0008 	add.w	r0, r4, #8
   4d2b6:	f002 fd37 	bl	4fd28 <net_buf_simple_add>
	if (accepted) {
   4d2ba:	f086 0301 	eor.w	r3, r6, #1
   4d2be:	b2db      	uxtb	r3, r3
   4d2c0:	8003      	strh	r3, [r0, #0]
   4d2c2:	4622      	mov	r2, r4
   4d2c4:	9700      	str	r7, [sp, #0]
   4d2c6:	463b      	mov	r3, r7
   4d2c8:	2105      	movs	r1, #5
   4d2ca:	4628      	mov	r0, r5
   4d2cc:	f7ff ff6f 	bl	4d1ae <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   4d2d0:	b110      	cbz	r0, 4d2d8 <l2cap_recv+0xbc>
		net_buf_unref(buf);
   4d2d2:	4620      	mov	r0, r4
   4d2d4:	f7f6 fb9e 	bl	43a14 <net_buf_unref>
	if (accepted) {
   4d2d8:	2e00      	cmp	r6, #0
   4d2da:	d0b8      	beq.n	4d24e <l2cap_recv+0x32>
		bt_conn_le_conn_update(conn, &param);
   4d2dc:	a902      	add	r1, sp, #8
   4d2de:	4628      	mov	r0, r5
   4d2e0:	f7ff feab 	bl	4d03a <bt_conn_le_conn_update>
   4d2e4:	e7b3      	b.n	4d24e <l2cap_recv+0x32>
		l2cap_send_reject(chan->conn, hdr->ident,
   4d2e6:	6828      	ldr	r0, [r5, #0]
   4d2e8:	e7bb      	b.n	4d262 <l2cap_recv+0x46>

0004d2ea <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   4d2ea:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4d2ec:	b138      	cbz	r0, 4d2fe <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   4d2ee:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   4d2f2:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4d2f4:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   4d2f8:	d001      	beq.n	4d2fe <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   4d2fa:	6880      	ldr	r0, [r0, #8]
   4d2fc:	e7f6      	b.n	4d2ec <bt_l2cap_le_lookup_tx_cid+0x2>
}
   4d2fe:	4770      	bx	lr

0004d300 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   4d300:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4d302:	b138      	cbz	r0, 4d314 <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   4d304:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   4d308:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4d30a:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   4d30e:	d001      	beq.n	4d314 <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   4d310:	6880      	ldr	r0, [r0, #8]
   4d312:	e7f6      	b.n	4d302 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   4d314:	4770      	bx	lr

0004d316 <bt_l2cap_recv>:
{
   4d316:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   4d318:	898b      	ldrh	r3, [r1, #12]
   4d31a:	2b03      	cmp	r3, #3
{
   4d31c:	4605      	mov	r5, r0
   4d31e:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   4d320:	d804      	bhi.n	4d32c <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   4d322:	4620      	mov	r0, r4
}
   4d324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   4d328:	f7f6 bb74 	b.w	43a14 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   4d32c:	2104      	movs	r1, #4
   4d32e:	f104 0008 	add.w	r0, r4, #8
   4d332:	f002 fd2a 	bl	4fd8a <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   4d336:	8841      	ldrh	r1, [r0, #2]
   4d338:	4628      	mov	r0, r5
   4d33a:	f7ff ffe1 	bl	4d300 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   4d33e:	2800      	cmp	r0, #0
   4d340:	d0ef      	beq.n	4d322 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   4d342:	6843      	ldr	r3, [r0, #4]
   4d344:	4621      	mov	r1, r4
   4d346:	691b      	ldr	r3, [r3, #16]
   4d348:	4798      	blx	r3
   4d34a:	e7ea      	b.n	4d322 <bt_l2cap_recv+0xc>

0004d34c <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   4d34c:	4770      	bx	lr

0004d34e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   4d34e:	4603      	mov	r3, r0
	return list->head;
   4d350:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   4d352:	b128      	cbz	r0, 4d360 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4d354:	6859      	ldr	r1, [r3, #4]
	return node->next;
   4d356:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   4d358:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4d35a:	4288      	cmp	r0, r1
	list->tail = node;
   4d35c:	bf08      	it	eq
   4d35e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   4d360:	4770      	bx	lr

0004d362 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   4d362:	4603      	mov	r3, r0
	size_t bytes = 0;
   4d364:	2000      	movs	r0, #0

	while (buf) {
   4d366:	b903      	cbnz	r3, 4d36a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   4d368:	4770      	bx	lr
		bytes += buf->len;
   4d36a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   4d36c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   4d36e:	4410      	add	r0, r2
		buf = buf->frags;
   4d370:	e7f9      	b.n	4d366 <net_buf_frags_len+0x4>

0004d372 <att_sent>:
	if (chan->ops->sent) {
   4d372:	684b      	ldr	r3, [r1, #4]
   4d374:	695b      	ldr	r3, [r3, #20]
{
   4d376:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   4d378:	b103      	cbz	r3, 4d37c <att_sent+0xa>
		chan->ops->sent(chan);
   4d37a:	4718      	bx	r3
}
   4d37c:	4770      	bx	lr

0004d37e <attr_read_type_cb>:
{
   4d37e:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   4d380:	68d4      	ldr	r4, [r2, #12]
   4d382:	7823      	ldrb	r3, [r4, #0]
   4d384:	3102      	adds	r1, #2
   4d386:	b913      	cbnz	r3, 4d38e <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   4d388:	7021      	strb	r1, [r4, #0]
	return true;
   4d38a:	2001      	movs	r0, #1
}
   4d38c:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   4d38e:	428b      	cmp	r3, r1
   4d390:	d0fb      	beq.n	4d38a <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   4d392:	8983      	ldrh	r3, [r0, #12]
   4d394:	3b02      	subs	r3, #2
   4d396:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   4d398:	2000      	movs	r0, #0
   4d39a:	6110      	str	r0, [r2, #16]
		return false;
   4d39c:	e7f6      	b.n	4d38c <attr_read_type_cb+0xe>

0004d39e <att_prepare_write_req>:
}
   4d39e:	2006      	movs	r0, #6
   4d3a0:	4770      	bx	lr

0004d3a2 <att_get>:
{
   4d3a2:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   4d3a4:	7b43      	ldrb	r3, [r0, #13]
   4d3a6:	2b07      	cmp	r3, #7
   4d3a8:	d001      	beq.n	4d3ae <att_get+0xc>
		return NULL;
   4d3aa:	2000      	movs	r0, #0
}
   4d3ac:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   4d3ae:	2104      	movs	r1, #4
   4d3b0:	f7ff ffa6 	bl	4d300 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   4d3b4:	2800      	cmp	r0, #0
   4d3b6:	d0f8      	beq.n	4d3aa <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4d3b8:	f3bf 8f5b 	dmb	ish
   4d3bc:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   4d3c0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   4d3c4:	075b      	lsls	r3, r3, #29
   4d3c6:	d4f0      	bmi.n	4d3aa <att_get+0x8>
	return att_chan->att;
   4d3c8:	f850 0c08 	ldr.w	r0, [r0, #-8]
   4d3cc:	e7ee      	b.n	4d3ac <att_get+0xa>

0004d3ce <att_notify_mult>:
{
   4d3ce:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   4d3d0:	6803      	ldr	r3, [r0, #0]
   4d3d2:	898a      	ldrh	r2, [r1, #12]
   4d3d4:	6818      	ldr	r0, [r3, #0]
   4d3d6:	6889      	ldr	r1, [r1, #8]
   4d3d8:	f001 fca0 	bl	4ed1c <bt_gatt_mult_notification>
}
   4d3dc:	2000      	movs	r0, #0
   4d3de:	bd08      	pop	{r3, pc}

0004d3e0 <att_notify>:
{
   4d3e0:	b538      	push	{r3, r4, r5, lr}
   4d3e2:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   4d3e4:	f101 0008 	add.w	r0, r1, #8
   4d3e8:	460c      	mov	r4, r1
   4d3ea:	f002 fcde 	bl	4fdaa <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   4d3ee:	682d      	ldr	r5, [r5, #0]
   4d3f0:	89a3      	ldrh	r3, [r4, #12]
   4d3f2:	68a2      	ldr	r2, [r4, #8]
   4d3f4:	4601      	mov	r1, r0
   4d3f6:	6828      	ldr	r0, [r5, #0]
   4d3f8:	f001 fc61 	bl	4ecbe <bt_gatt_notification>
}
   4d3fc:	2000      	movs	r0, #0
   4d3fe:	bd38      	pop	{r3, r4, r5, pc}

0004d400 <att_chan_mtu_updated>:
{
   4d400:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   4d402:	6805      	ldr	r5, [r0, #0]
	return list->head;
   4d404:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4d406:	b382      	cbz	r2, 4d46a <att_chan_mtu_updated+0x6a>
	return node->next;
   4d408:	6813      	ldr	r3, [r2, #0]
   4d40a:	b10b      	cbz	r3, 4d410 <att_chan_mtu_updated+0x10>
   4d40c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   4d410:	f5a2 74a2 	sub.w	r4, r2, #324	; 0x144
   4d414:	2200      	movs	r2, #0
   4d416:	4611      	mov	r1, r2
   4d418:	e001      	b.n	4d41e <att_chan_mtu_updated+0x1e>
   4d41a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (chan == updated_chan) {
   4d41e:	4284      	cmp	r4, r0
   4d420:	d009      	beq.n	4d436 <att_chan_mtu_updated+0x36>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   4d422:	f8b4 608a 	ldrh.w	r6, [r4, #138]	; 0x8a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   4d426:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   4d42a:	42b1      	cmp	r1, r6
   4d42c:	bf38      	it	cc
   4d42e:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   4d430:	42a2      	cmp	r2, r4
   4d432:	bf38      	it	cc
   4d434:	4622      	movcc	r2, r4
   4d436:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4d438:	b12b      	cbz	r3, 4d446 <att_chan_mtu_updated+0x46>
   4d43a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   4d43e:	2b00      	cmp	r3, #0
   4d440:	d1eb      	bne.n	4d41a <att_chan_mtu_updated+0x1a>
		if (chan == updated_chan) {
   4d442:	4284      	cmp	r4, r0
   4d444:	d1ed      	bne.n	4d422 <att_chan_mtu_updated+0x22>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   4d446:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   4d44a:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   4d44e:	428b      	cmp	r3, r1
   4d450:	d801      	bhi.n	4d456 <att_chan_mtu_updated+0x56>
   4d452:	4290      	cmp	r0, r2
   4d454:	d90b      	bls.n	4d46e <att_chan_mtu_updated+0x6e>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   4d456:	4282      	cmp	r2, r0
   4d458:	bf38      	it	cc
   4d45a:	4602      	movcc	r2, r0
   4d45c:	4299      	cmp	r1, r3
   4d45e:	6828      	ldr	r0, [r5, #0]
   4d460:	bf38      	it	cc
   4d462:	4619      	movcc	r1, r3
}
   4d464:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   4d466:	f7e5 b98f 	b.w	32788 <bt_gatt_att_max_mtu_changed>
   4d46a:	4611      	mov	r1, r2
   4d46c:	e7eb      	b.n	4d446 <att_chan_mtu_updated+0x46>
}
   4d46e:	bc70      	pop	{r4, r5, r6}
   4d470:	4770      	bx	lr

0004d472 <write_cb>:
{
   4d472:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4d474:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   4d476:	4601      	mov	r1, r0
{
   4d478:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   4d47a:	222a      	movs	r2, #42	; 0x2a
   4d47c:	6820      	ldr	r0, [r4, #0]
   4d47e:	f001 f900 	bl	4e682 <bt_gatt_check_perm>
   4d482:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   4d484:	bb00      	cbnz	r0, 4d4c8 <write_cb+0x56>
	if (!data->req) {
   4d486:	7a23      	ldrb	r3, [r4, #8]
   4d488:	b1b3      	cbz	r3, 4d4b8 <write_cb+0x46>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   4d48a:	f1a3 0218 	sub.w	r2, r3, #24
   4d48e:	4253      	negs	r3, r2
   4d490:	4153      	adcs	r3, r2
   4d492:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   4d494:	9301      	str	r3, [sp, #4]
   4d496:	8a63      	ldrh	r3, [r4, #18]
   4d498:	9300      	str	r3, [sp, #0]
   4d49a:	68ae      	ldr	r6, [r5, #8]
   4d49c:	8a23      	ldrh	r3, [r4, #16]
   4d49e:	68e2      	ldr	r2, [r4, #12]
   4d4a0:	6820      	ldr	r0, [r4, #0]
   4d4a2:	4629      	mov	r1, r5
   4d4a4:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   4d4a6:	2800      	cmp	r0, #0
   4d4a8:	db08      	blt.n	4d4bc <write_cb+0x4a>
   4d4aa:	8a23      	ldrh	r3, [r4, #16]
   4d4ac:	4298      	cmp	r0, r3
   4d4ae:	d10e      	bne.n	4d4ce <write_cb+0x5c>
	data->err = 0U;
   4d4b0:	2300      	movs	r3, #0
   4d4b2:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   4d4b4:	2001      	movs	r0, #1
   4d4b6:	e008      	b.n	4d4ca <write_cb+0x58>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   4d4b8:	2302      	movs	r3, #2
   4d4ba:	e7eb      	b.n	4d494 <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   4d4bc:	f110 0fff 	cmn.w	r0, #255	; 0xff
   4d4c0:	d305      	bcc.n	4d4ce <write_cb+0x5c>
		return -err;
   4d4c2:	4240      	negs	r0, r0
   4d4c4:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   4d4c6:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   4d4c8:	2000      	movs	r0, #0
}
   4d4ca:	b002      	add	sp, #8
   4d4cc:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   4d4ce:	200e      	movs	r0, #14
   4d4d0:	e7f9      	b.n	4d4c6 <write_cb+0x54>

0004d4d2 <bt_gatt_foreach_attr>:
{
   4d4d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   4d4d4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   4d4d8:	2300      	movs	r3, #0
   4d4da:	9300      	str	r3, [sp, #0]
   4d4dc:	461a      	mov	r2, r3
   4d4de:	f7e4 fae3 	bl	31aa8 <bt_gatt_foreach_attr_type>
}
   4d4e2:	b005      	add	sp, #20
   4d4e4:	f85d fb04 	ldr.w	pc, [sp], #4

0004d4e8 <find_type_cb>:
{
   4d4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   4d4ec:	f8d2 9000 	ldr.w	r9, [r2]
{
   4d4f0:	b091      	sub	sp, #68	; 0x44
   4d4f2:	4607      	mov	r7, r0
   4d4f4:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4d4f6:	2500      	movs	r5, #0
   4d4f8:	f642 0301 	movw	r3, #10241	; 0x2801
   4d4fc:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   4d4fe:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4d502:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   4d506:	a90b      	add	r1, sp, #44	; 0x2c
{
   4d508:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4d50a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   4d50e:	f7fe fd18 	bl	4bf42 <bt_uuid_cmp>
   4d512:	2800      	cmp	r0, #0
   4d514:	d079      	beq.n	4d60a <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   4d516:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   4d51a:	6838      	ldr	r0, [r7, #0]
   4d51c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   4d520:	a90b      	add	r1, sp, #44	; 0x2c
   4d522:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   4d526:	f7fe fd0c 	bl	4bf42 <bt_uuid_cmp>
   4d52a:	b138      	cbz	r0, 4d53c <find_type_cb+0x54>
		if (data->group &&
   4d52c:	68a3      	ldr	r3, [r4, #8]
   4d52e:	b11b      	cbz	r3, 4d538 <find_type_cb+0x50>
   4d530:	885a      	ldrh	r2, [r3, #2]
   4d532:	42b2      	cmp	r2, r6
   4d534:	d200      	bcs.n	4d538 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   4d536:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   4d538:	2001      	movs	r0, #1
   4d53a:	e009      	b.n	4d550 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   4d53c:	6861      	ldr	r1, [r4, #4]
   4d53e:	4608      	mov	r0, r1
   4d540:	f7ff ff0f 	bl	4d362 <net_buf_frags_len>
   4d544:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   4d548:	1a1b      	subs	r3, r3, r0
   4d54a:	2b03      	cmp	r3, #3
   4d54c:	d803      	bhi.n	4d556 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   4d54e:	2000      	movs	r0, #0
}
   4d550:	b011      	add	sp, #68	; 0x44
   4d552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   4d556:	4608      	mov	r0, r1
   4d558:	f002 fbb8 	bl	4fccc <net_buf_frag_last>
   4d55c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   4d55e:	6860      	ldr	r0, [r4, #4]
   4d560:	f7ff feff 	bl	4d362 <net_buf_frags_len>
   4d564:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   4d568:	f105 0b08 	add.w	fp, r5, #8
   4d56c:	ebaa 0a00 	sub.w	sl, sl, r0
   4d570:	4658      	mov	r0, fp
   4d572:	f002 fc26 	bl	4fdc2 <net_buf_simple_tailroom>
   4d576:	4582      	cmp	sl, r0
   4d578:	d23f      	bcs.n	4d5fa <find_type_cb+0x112>
   4d57a:	6860      	ldr	r0, [r4, #4]
   4d57c:	f7ff fef1 	bl	4d362 <net_buf_frags_len>
   4d580:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   4d584:	1a18      	subs	r0, r3, r0
	if (!len) {
   4d586:	b970      	cbnz	r0, 4d5a6 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   4d588:	6863      	ldr	r3, [r4, #4]
   4d58a:	7998      	ldrb	r0, [r3, #6]
   4d58c:	f7f6 f980 	bl	43890 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   4d590:	2200      	movs	r2, #0
   4d592:	2300      	movs	r3, #0
   4d594:	f002 fb60 	bl	4fc58 <net_buf_alloc_fixed>
		if (!frag) {
   4d598:	4605      	mov	r5, r0
   4d59a:	2800      	cmp	r0, #0
   4d59c:	d0d7      	beq.n	4d54e <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   4d59e:	4601      	mov	r1, r0
   4d5a0:	6860      	ldr	r0, [r4, #4]
   4d5a2:	f002 fba4 	bl	4fcee <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   4d5a6:	2300      	movs	r3, #0
   4d5a8:	9300      	str	r3, [sp, #0]
   4d5aa:	f8d7 9004 	ldr.w	r9, [r7, #4]
   4d5ae:	4639      	mov	r1, r7
   4d5b0:	2310      	movs	r3, #16
   4d5b2:	aa02      	add	r2, sp, #8
   4d5b4:	4640      	mov	r0, r8
   4d5b6:	47c8      	blx	r9
	if (read < 0) {
   4d5b8:	1e07      	subs	r7, r0, #0
   4d5ba:	db26      	blt.n	4d60a <find_type_cb+0x122>
	if (read != data->value_len) {
   4d5bc:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   4d5be:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   4d5c0:	42ba      	cmp	r2, r7
   4d5c2:	d01e      	beq.n	4d602 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   4d5c4:	4601      	mov	r1, r0
   4d5c6:	a80b      	add	r0, sp, #44	; 0x2c
   4d5c8:	f7fe fce9 	bl	4bf9e <bt_uuid_create>
   4d5cc:	b1e8      	cbz	r0, 4d60a <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   4d5ce:	b2fa      	uxtb	r2, r7
   4d5d0:	a902      	add	r1, sp, #8
   4d5d2:	a806      	add	r0, sp, #24
   4d5d4:	f7fe fce3 	bl	4bf9e <bt_uuid_create>
   4d5d8:	b1b8      	cbz	r0, 4d60a <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   4d5da:	a906      	add	r1, sp, #24
   4d5dc:	a80b      	add	r0, sp, #44	; 0x2c
   4d5de:	f7fe fcb0 	bl	4bf42 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   4d5e2:	b990      	cbnz	r0, 4d60a <find_type_cb+0x122>
	data->err = 0x00;
   4d5e4:	2300      	movs	r3, #0
   4d5e6:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   4d5e8:	2104      	movs	r1, #4
   4d5ea:	f105 0008 	add.w	r0, r5, #8
   4d5ee:	f002 fb9b 	bl	4fd28 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   4d5f2:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   4d5f4:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   4d5f6:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   4d5f8:	e79e      	b.n	4d538 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   4d5fa:	4658      	mov	r0, fp
   4d5fc:	f002 fbe1 	bl	4fdc2 <net_buf_simple_tailroom>
   4d600:	e7c1      	b.n	4d586 <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   4d602:	a902      	add	r1, sp, #8
   4d604:	f7fe fb9f 	bl	4bd46 <memcmp>
   4d608:	e7eb      	b.n	4d5e2 <find_type_cb+0xfa>
	data->group = NULL;
   4d60a:	2300      	movs	r3, #0
   4d60c:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   4d60e:	e793      	b.n	4d538 <find_type_cb+0x50>

0004d610 <find_info_cb>:
{
   4d610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   4d612:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   4d614:	6817      	ldr	r7, [r2, #0]
{
   4d616:	4605      	mov	r5, r0
   4d618:	460e      	mov	r6, r1
   4d61a:	4614      	mov	r4, r2
	if (!data->rsp) {
   4d61c:	b963      	cbnz	r3, 4d638 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   4d61e:	6850      	ldr	r0, [r2, #4]
   4d620:	2101      	movs	r1, #1
   4d622:	3008      	adds	r0, #8
   4d624:	f002 fb80 	bl	4fd28 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   4d628:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   4d62a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   4d62c:	781b      	ldrb	r3, [r3, #0]
   4d62e:	2b00      	cmp	r3, #0
   4d630:	bf14      	ite	ne
   4d632:	2302      	movne	r3, #2
   4d634:	2301      	moveq	r3, #1
   4d636:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   4d638:	68a3      	ldr	r3, [r4, #8]
   4d63a:	781b      	ldrb	r3, [r3, #0]
   4d63c:	2b01      	cmp	r3, #1
   4d63e:	d003      	beq.n	4d648 <find_info_cb+0x38>
   4d640:	2b02      	cmp	r3, #2
   4d642:	d019      	beq.n	4d678 <find_info_cb+0x68>
   4d644:	2000      	movs	r0, #0
   4d646:	e016      	b.n	4d676 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   4d648:	682b      	ldr	r3, [r5, #0]
   4d64a:	781b      	ldrb	r3, [r3, #0]
   4d64c:	2b00      	cmp	r3, #0
   4d64e:	d1f9      	bne.n	4d644 <find_info_cb+0x34>
   4d650:	6860      	ldr	r0, [r4, #4]
   4d652:	2104      	movs	r1, #4
   4d654:	3008      	adds	r0, #8
   4d656:	f002 fb67 	bl	4fd28 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   4d65a:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   4d65c:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   4d65e:	885b      	ldrh	r3, [r3, #2]
   4d660:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   4d662:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   4d664:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   4d666:	899b      	ldrh	r3, [r3, #12]
   4d668:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   4d66c:	1ac0      	subs	r0, r0, r3
   4d66e:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   4d670:	bf94      	ite	ls
   4d672:	2000      	movls	r0, #0
   4d674:	2001      	movhi	r0, #1
}
   4d676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   4d678:	682b      	ldr	r3, [r5, #0]
   4d67a:	781b      	ldrb	r3, [r3, #0]
   4d67c:	2b02      	cmp	r3, #2
   4d67e:	d1e1      	bne.n	4d644 <find_info_cb+0x34>
   4d680:	6860      	ldr	r0, [r4, #4]
   4d682:	2112      	movs	r1, #18
   4d684:	3008      	adds	r0, #8
   4d686:	f002 fb4f 	bl	4fd28 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   4d68a:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   4d68c:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   4d68e:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   4d690:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   4d694:	3101      	adds	r1, #1
   4d696:	f7fe fb66 	bl	4bd66 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   4d69a:	6863      	ldr	r3, [r4, #4]
   4d69c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   4d6a0:	899b      	ldrh	r3, [r3, #12]
   4d6a2:	1ac0      	subs	r0, r0, r3
   4d6a4:	2812      	cmp	r0, #18
   4d6a6:	e7e3      	b.n	4d670 <find_info_cb+0x60>

0004d6a8 <attr_read_group_cb>:
	if (!data->rsp->len) {
   4d6a8:	68d0      	ldr	r0, [r2, #12]
   4d6aa:	7803      	ldrb	r3, [r0, #0]
   4d6ac:	3104      	adds	r1, #4
   4d6ae:	b913      	cbnz	r3, 4d6b6 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   4d6b0:	7001      	strb	r1, [r0, #0]
	return true;
   4d6b2:	2001      	movs	r0, #1
   4d6b4:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   4d6b6:	428b      	cmp	r3, r1
   4d6b8:	d0fb      	beq.n	4d6b2 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   4d6ba:	6891      	ldr	r1, [r2, #8]
   4d6bc:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   4d6be:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   4d6c0:	3b04      	subs	r3, #4
   4d6c2:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   4d6c4:	6110      	str	r0, [r2, #16]
}
   4d6c6:	4770      	bx	lr

0004d6c8 <chan_req_sent>:
	if (chan->req) {
   4d6c8:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   4d6cc:	b133      	cbz	r3, 4d6dc <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   4d6ce:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4d6d2:	2300      	movs	r3, #0
   4d6d4:	f500 7088 	add.w	r0, r0, #272	; 0x110
   4d6d8:	f7fa bf4e 	b.w	48578 <k_work_reschedule>
}
   4d6dc:	4770      	bx	lr

0004d6de <att_chan_read>:
{
   4d6de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4d6e2:	4680      	mov	r8, r0
   4d6e4:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   4d6e6:	4610      	mov	r0, r2
{
   4d6e8:	4699      	mov	r9, r3
   4d6ea:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   4d6ec:	f7ff fe39 	bl	4d362 <net_buf_frags_len>
   4d6f0:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   4d6f4:	4283      	cmp	r3, r0
{
   4d6f6:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   4d6f8:	d97a      	bls.n	4d7f0 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   4d6fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   4d6fe:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   4d700:	4630      	mov	r0, r6
   4d702:	f002 fae3 	bl	4fccc <net_buf_frag_last>
	size_t len, total = 0;
   4d706:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   4d70a:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   4d70c:	4630      	mov	r0, r6
   4d70e:	f7ff fe28 	bl	4d362 <net_buf_frags_len>
   4d712:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   4d716:	f105 0708 	add.w	r7, r5, #8
   4d71a:	1a24      	subs	r4, r4, r0
   4d71c:	4638      	mov	r0, r7
   4d71e:	f002 fb50 	bl	4fdc2 <net_buf_simple_tailroom>
   4d722:	4284      	cmp	r4, r0
   4d724:	d211      	bcs.n	4d74a <att_chan_read+0x6c>
   4d726:	4630      	mov	r0, r6
   4d728:	f7ff fe1b 	bl	4d362 <net_buf_frags_len>
   4d72c:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   4d730:	1a24      	subs	r4, r4, r0
		if (!len) {
   4d732:	bb34      	cbnz	r4, 4d782 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   4d734:	79b0      	ldrb	r0, [r6, #6]
   4d736:	f7f6 f8ab 	bl	43890 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   4d73a:	2200      	movs	r2, #0
   4d73c:	2300      	movs	r3, #0
   4d73e:	f002 fa8b 	bl	4fc58 <net_buf_alloc_fixed>
			if (!frag) {
   4d742:	4605      	mov	r5, r0
   4d744:	b930      	cbnz	r0, 4d754 <att_chan_read+0x76>
	return total;
   4d746:	4657      	mov	r7, sl
   4d748:	e02c      	b.n	4d7a4 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   4d74a:	4638      	mov	r0, r7
   4d74c:	f002 fb39 	bl	4fdc2 <net_buf_simple_tailroom>
   4d750:	4604      	mov	r4, r0
   4d752:	e7ee      	b.n	4d732 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   4d754:	4601      	mov	r1, r0
   4d756:	4630      	mov	r0, r6
   4d758:	f002 fac9 	bl	4fcee <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   4d75c:	4630      	mov	r0, r6
   4d75e:	f7ff fe00 	bl	4d362 <net_buf_frags_len>
   4d762:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   4d766:	f105 0708 	add.w	r7, r5, #8
   4d76a:	1a24      	subs	r4, r4, r0
   4d76c:	4638      	mov	r0, r7
   4d76e:	f002 fb28 	bl	4fdc2 <net_buf_simple_tailroom>
   4d772:	4284      	cmp	r4, r0
   4d774:	d21a      	bcs.n	4d7ac <att_chan_read+0xce>
   4d776:	4630      	mov	r0, r6
   4d778:	f7ff fdf3 	bl	4d362 <net_buf_frags_len>
   4d77c:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   4d780:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   4d782:	68a9      	ldr	r1, [r5, #8]
   4d784:	89aa      	ldrh	r2, [r5, #12]
   4d786:	f8cd 9000 	str.w	r9, [sp]
   4d78a:	f8db 7004 	ldr.w	r7, [fp, #4]
   4d78e:	9803      	ldr	r0, [sp, #12]
   4d790:	440a      	add	r2, r1
   4d792:	b2a3      	uxth	r3, r4
   4d794:	4659      	mov	r1, fp
   4d796:	47b8      	blx	r7
		if (read < 0) {
   4d798:	1e07      	subs	r7, r0, #0
   4d79a:	da0c      	bge.n	4d7b6 <att_chan_read+0xd8>
				return total;
   4d79c:	f1ba 0f00 	cmp.w	sl, #0
   4d7a0:	bf18      	it	ne
   4d7a2:	4657      	movne	r7, sl
}
   4d7a4:	4638      	mov	r0, r7
   4d7a6:	b005      	add	sp, #20
   4d7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4d7ac:	4638      	mov	r0, r7
   4d7ae:	f002 fb08 	bl	4fdc2 <net_buf_simple_tailroom>
   4d7b2:	4604      	mov	r4, r0
   4d7b4:	e7e5      	b.n	4d782 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   4d7b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   4d7b8:	b993      	cbnz	r3, 4d7e0 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   4d7ba:	4639      	mov	r1, r7
   4d7bc:	f105 0008 	add.w	r0, r5, #8
   4d7c0:	f002 fab2 	bl	4fd28 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   4d7c4:	4630      	mov	r0, r6
   4d7c6:	f7ff fdcc 	bl	4d362 <net_buf_frags_len>
   4d7ca:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   4d7ce:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   4d7d0:	4283      	cmp	r3, r0
		total += read;
   4d7d2:	44ba      	add	sl, r7
		offset += read;
   4d7d4:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   4d7d8:	d9b5      	bls.n	4d746 <att_chan_read+0x68>
   4d7da:	42a7      	cmp	r7, r4
   4d7dc:	d096      	beq.n	4d70c <att_chan_read+0x2e>
   4d7de:	e7b2      	b.n	4d746 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   4d7e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   4d7e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   4d7e4:	4639      	mov	r1, r7
   4d7e6:	4628      	mov	r0, r5
   4d7e8:	4798      	blx	r3
   4d7ea:	2800      	cmp	r0, #0
   4d7ec:	d1e5      	bne.n	4d7ba <att_chan_read+0xdc>
   4d7ee:	e7aa      	b.n	4d746 <att_chan_read+0x68>
		return 0;
   4d7f0:	2700      	movs	r7, #0
   4d7f2:	e7d7      	b.n	4d7a4 <att_chan_read+0xc6>

0004d7f4 <chan_req_send>:
{
   4d7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   4d7f6:	688f      	ldr	r7, [r1, #8]
{
   4d7f8:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   4d7fa:	4638      	mov	r0, r7
   4d7fc:	f7ff fdb1 	bl	4d362 <net_buf_frags_len>
   4d800:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   4d804:	4283      	cmp	r3, r0
{
   4d806:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   4d808:	d30d      	bcc.n	4d826 <chan_req_send+0x32>
	req->buf = NULL;
   4d80a:	2600      	movs	r6, #0
	chan->req = req;
   4d80c:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   4d810:	4632      	mov	r2, r6
	req->buf = NULL;
   4d812:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   4d814:	4620      	mov	r0, r4
   4d816:	4639      	mov	r1, r7
   4d818:	f7e3 f86c 	bl	308f4 <chan_send>
	if (err) {
   4d81c:	b110      	cbz	r0, 4d824 <chan_req_send+0x30>
		req->buf = buf;
   4d81e:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   4d820:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   4d824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   4d826:	f06f 0079 	mvn.w	r0, #121	; 0x79
   4d82a:	e7fb      	b.n	4d824 <chan_req_send+0x30>

0004d82c <process_queue>:
{
   4d82c:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   4d82e:	2200      	movs	r2, #0
{
   4d830:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   4d832:	2300      	movs	r3, #0
   4d834:	4608      	mov	r0, r1
{
   4d836:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   4d838:	f002 fa13 	bl	4fc62 <net_buf_get>
	if (buf) {
   4d83c:	4605      	mov	r5, r0
   4d83e:	b160      	cbz	r0, 4d85a <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   4d840:	4601      	mov	r1, r0
   4d842:	2200      	movs	r2, #0
   4d844:	4620      	mov	r0, r4
   4d846:	f7e3 f855 	bl	308f4 <chan_send>
		if (err) {
   4d84a:	4604      	mov	r4, r0
   4d84c:	b118      	cbz	r0, 4d856 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   4d84e:	4629      	mov	r1, r5
   4d850:	4630      	mov	r0, r6
   4d852:	f003 f96c 	bl	50b2e <k_queue_prepend>
}
   4d856:	4620      	mov	r0, r4
   4d858:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   4d85a:	f06f 0401 	mvn.w	r4, #1
   4d85e:	e7fa      	b.n	4d856 <process_queue+0x2a>

0004d860 <bt_att_chan_send_rsp>:
{
   4d860:	b538      	push	{r3, r4, r5, lr}
   4d862:	4604      	mov	r4, r0
   4d864:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   4d866:	f7e3 f845 	bl	308f4 <chan_send>
	if (err) {
   4d86a:	b130      	cbz	r0, 4d87a <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   4d86c:	4629      	mov	r1, r5
   4d86e:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   4d872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   4d876:	f002 ba18 	b.w	4fcaa <net_buf_put>
}
   4d87a:	bd38      	pop	{r3, r4, r5, pc}

0004d87c <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4d87c:	b510      	push	{r4, lr}
	return list->head;
   4d87e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4d880:	2200      	movs	r2, #0
   4d882:	b153      	cbz	r3, 4d89a <sys_slist_find_and_remove.isra.0+0x1e>
   4d884:	428b      	cmp	r3, r1
   4d886:	d10e      	bne.n	4d8a6 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   4d888:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   4d88a:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   4d88c:	b932      	cbnz	r2, 4d89c <sys_slist_find_and_remove.isra.0+0x20>
   4d88e:	42a1      	cmp	r1, r4
	list->head = node;
   4d890:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   4d892:	d100      	bne.n	4d896 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   4d894:	6043      	str	r3, [r0, #4]
	parent->next = child;
   4d896:	2300      	movs	r3, #0
   4d898:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4d89a:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   4d89c:	42a1      	cmp	r1, r4
	parent->next = child;
   4d89e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   4d8a0:	bf08      	it	eq
   4d8a2:	6042      	streq	r2, [r0, #4]
}
   4d8a4:	e7f7      	b.n	4d896 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   4d8a6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4d8a8:	681b      	ldr	r3, [r3, #0]
   4d8aa:	e7ea      	b.n	4d882 <sys_slist_find_and_remove.isra.0+0x6>

0004d8ac <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   4d8ac:	2006      	movs	r0, #6
   4d8ae:	4770      	bx	lr

0004d8b0 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4d8b0:	30f0      	adds	r0, #240	; 0xf0
   4d8b2:	f3bf 8f5b 	dmb	ish
   4d8b6:	e850 3f00 	ldrex	r3, [r0]
   4d8ba:	f023 0301 	bic.w	r3, r3, #1
   4d8be:	e840 3200 	strex	r2, r3, [r0]
   4d8c2:	2a00      	cmp	r2, #0
   4d8c4:	d1f7      	bne.n	4d8b6 <chan_rsp_sent+0x6>
   4d8c6:	f3bf 8f5b 	dmb	ish
}
   4d8ca:	4770      	bx	lr

0004d8cc <chan_cfm_sent>:
   4d8cc:	30f0      	adds	r0, #240	; 0xf0
   4d8ce:	f3bf 8f5b 	dmb	ish
   4d8d2:	e850 3f00 	ldrex	r3, [r0]
   4d8d6:	f023 0302 	bic.w	r3, r3, #2
   4d8da:	e840 3200 	strex	r2, r3, [r0]
   4d8de:	2a00      	cmp	r2, #0
   4d8e0:	d1f7      	bne.n	4d8d2 <chan_cfm_sent+0x6>
   4d8e2:	f3bf 8f5b 	dmb	ish
}
   4d8e6:	4770      	bx	lr

0004d8e8 <read_cb>:
{
   4d8e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   4d8ea:	6816      	ldr	r6, [r2, #0]
{
   4d8ec:	4605      	mov	r5, r0
	data->err = 0x00;
   4d8ee:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   4d8f0:	68b0      	ldr	r0, [r6, #8]
	data->err = 0x00;
   4d8f2:	7313      	strb	r3, [r2, #12]
{
   4d8f4:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   4d8f6:	4629      	mov	r1, r5
   4d8f8:	2215      	movs	r2, #21
   4d8fa:	f000 fec2 	bl	4e682 <bt_gatt_check_perm>
   4d8fe:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   4d900:	b980      	cbnz	r0, 4d924 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   4d902:	e9cd 0000 	strd	r0, r0, [sp]
   4d906:	4629      	mov	r1, r5
   4d908:	88a3      	ldrh	r3, [r4, #4]
   4d90a:	68a2      	ldr	r2, [r4, #8]
   4d90c:	4630      	mov	r0, r6
   4d90e:	f7ff fee6 	bl	4d6de <att_chan_read>
	if (ret < 0) {
   4d912:	2800      	cmp	r0, #0
   4d914:	da09      	bge.n	4d92a <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   4d916:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   4d91a:	bf26      	itte	cs
   4d91c:	4240      	negcs	r0, r0
   4d91e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   4d920:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   4d922:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   4d924:	2000      	movs	r0, #0
}
   4d926:	b002      	add	sp, #8
   4d928:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   4d92a:	2001      	movs	r0, #1
   4d92c:	e7fb      	b.n	4d926 <read_cb+0x3e>

0004d92e <bt_att_sent>:
{
   4d92e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   4d930:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   4d934:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   4d938:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   4d93a:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   4d93e:	b10b      	cbz	r3, 4d944 <bt_att_sent+0x16>
		chan->sent(chan);
   4d940:	4638      	mov	r0, r7
   4d942:	4798      	blx	r3
   4d944:	f3bf 8f5b 	dmb	ish
   4d948:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   4d94c:	e853 1f00 	ldrex	r1, [r3]
   4d950:	f021 0110 	bic.w	r1, r1, #16
   4d954:	e843 1200 	strex	r2, r1, [r3]
   4d958:	2a00      	cmp	r2, #0
   4d95a:	d1f7      	bne.n	4d94c <bt_att_sent+0x1e>
   4d95c:	f3bf 8f5b 	dmb	ish
	if (!att) {
   4d960:	b30c      	cbz	r4, 4d9a6 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   4d962:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   4d966:	b98b      	cbnz	r3, 4d98c <bt_att_sent+0x5e>
   4d968:	6863      	ldr	r3, [r4, #4]
   4d96a:	b17b      	cbz	r3, 4d98c <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   4d96c:	1d20      	adds	r0, r4, #4
   4d96e:	f7ff fcee 	bl	4d34e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4d972:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   4d974:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4d976:	4638      	mov	r0, r7
   4d978:	f7ff ff3c 	bl	4d7f4 <chan_req_send>
   4d97c:	2800      	cmp	r0, #0
   4d97e:	da12      	bge.n	4d9a6 <bt_att_sent+0x78>
	parent->next = child;
   4d980:	6863      	ldr	r3, [r4, #4]
   4d982:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   4d984:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   4d986:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   4d988:	b903      	cbnz	r3, 4d98c <bt_att_sent+0x5e>
	list->tail = node;
   4d98a:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   4d98c:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   4d990:	4638      	mov	r0, r7
   4d992:	f7ff ff4b 	bl	4d82c <process_queue>
	if (!err) {
   4d996:	b130      	cbz	r0, 4d9a6 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   4d998:	f104 010c 	add.w	r1, r4, #12
   4d99c:	4638      	mov	r0, r7
}
   4d99e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   4d9a2:	f7ff bf43 	b.w	4d82c <process_queue>
}
   4d9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004d9a8 <att_req_send_process>:
{
   4d9a8:	b570      	push	{r4, r5, r6, lr}
   4d9aa:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   4d9ac:	3004      	adds	r0, #4
   4d9ae:	f7ff fcce 	bl	4d34e <sys_slist_get>
	if (!node) {
   4d9b2:	4606      	mov	r6, r0
   4d9b4:	b1d0      	cbz	r0, 4d9ec <att_req_send_process+0x44>
	return list->head;
   4d9b6:	6a68      	ldr	r0, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4d9b8:	b1e8      	cbz	r0, 4d9f6 <att_req_send_process+0x4e>
	return node->next;
   4d9ba:	6804      	ldr	r4, [r0, #0]
   4d9bc:	b10c      	cbz	r4, 4d9c2 <att_req_send_process+0x1a>
   4d9be:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   4d9c2:	f850 3c50 	ldr.w	r3, [r0, #-80]
   4d9c6:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   4d9ca:	b153      	cbz	r3, 4d9e2 <att_req_send_process+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4d9cc:	b19c      	cbz	r4, 4d9f6 <att_req_send_process+0x4e>
   4d9ce:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   4d9d2:	4620      	mov	r0, r4
   4d9d4:	b15b      	cbz	r3, 4d9ee <att_req_send_process+0x46>
   4d9d6:	f5a3 74a2 	sub.w	r4, r3, #324	; 0x144
		if (!chan->req) {
   4d9da:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   4d9de:	2b00      	cmp	r3, #0
   4d9e0:	d1f5      	bne.n	4d9ce <att_req_send_process+0x26>
	return chan_req_send(chan, req);
   4d9e2:	4631      	mov	r1, r6
   4d9e4:	f7ff ff06 	bl	4d7f4 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4d9e8:	2800      	cmp	r0, #0
   4d9ea:	dbef      	blt.n	4d9cc <att_req_send_process+0x24>
}
   4d9ec:	bd70      	pop	{r4, r5, r6, pc}
		if (!chan->req) {
   4d9ee:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
   4d9f2:	2c00      	cmp	r4, #0
   4d9f4:	d0f5      	beq.n	4d9e2 <att_req_send_process+0x3a>
	parent->next = child;
   4d9f6:	686b      	ldr	r3, [r5, #4]
   4d9f8:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   4d9fa:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   4d9fc:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   4d9fe:	2b00      	cmp	r3, #0
   4da00:	d1f4      	bne.n	4d9ec <att_req_send_process+0x44>
	list->tail = node;
   4da02:	60ae      	str	r6, [r5, #8]
}
   4da04:	e7f2      	b.n	4d9ec <att_req_send_process+0x44>

0004da06 <bt_att_status>:
{
   4da06:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4da08:	f3bf 8f5b 	dmb	ish
   4da0c:	680b      	ldr	r3, [r1, #0]
   4da0e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   4da12:	07db      	lsls	r3, r3, #31
{
   4da14:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   4da16:	d519      	bpl.n	4da4c <bt_att_status+0x46>
	if (!chan->att) {
   4da18:	f850 0c08 	ldr.w	r0, [r0, #-8]
   4da1c:	b1b0      	cbz	r0, 4da4c <bt_att_status+0x46>
	if (chan->req) {
   4da1e:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   4da22:	b99b      	cbnz	r3, 4da4c <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   4da24:	3004      	adds	r0, #4
   4da26:	f7ff fc92 	bl	4d34e <sys_slist_get>
	if (!node) {
   4da2a:	4604      	mov	r4, r0
   4da2c:	b170      	cbz	r0, 4da4c <bt_att_status+0x46>
	return chan_req_send(chan, req);
   4da2e:	4601      	mov	r1, r0
   4da30:	f1a5 0008 	sub.w	r0, r5, #8
   4da34:	f7ff fede 	bl	4d7f4 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4da38:	2800      	cmp	r0, #0
   4da3a:	da07      	bge.n	4da4c <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   4da3c:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   4da40:	685a      	ldr	r2, [r3, #4]
   4da42:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   4da44:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   4da46:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   4da48:	b902      	cbnz	r2, 4da4c <bt_att_status+0x46>
	list->tail = node;
   4da4a:	609c      	str	r4, [r3, #8]
}
   4da4c:	bd38      	pop	{r3, r4, r5, pc}

0004da4e <bt_att_chan_create_pdu>:
{
   4da4e:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   4da50:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   4da54:	3201      	adds	r2, #1
   4da56:	429a      	cmp	r2, r3
{
   4da58:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   4da5a:	d80f      	bhi.n	4da7c <bt_att_chan_create_pdu+0x2e>
	switch (att_op_get_type(op)) {
   4da5c:	4608      	mov	r0, r1
   4da5e:	f7e2 fe6d 	bl	3073c <att_op_get_type>
   4da62:	2802      	cmp	r0, #2
   4da64:	d001      	beq.n	4da6a <bt_att_chan_create_pdu+0x1c>
   4da66:	2804      	cmp	r0, #4
   4da68:	d10b      	bne.n	4da82 <bt_att_chan_create_pdu+0x34>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   4da6a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4da6e:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   4da70:	2100      	movs	r1, #0
   4da72:	4608      	mov	r0, r1
   4da74:	f7ff fb98 	bl	4d1a8 <bt_l2cap_create_pdu_timeout>
   4da78:	4604      	mov	r4, r0
	if (!buf) {
   4da7a:	b938      	cbnz	r0, 4da8c <bt_att_chan_create_pdu+0x3e>
		return NULL;
   4da7c:	2400      	movs	r4, #0
}
   4da7e:	4620      	mov	r0, r4
   4da80:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   4da82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4da86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4da8a:	e7f1      	b.n	4da70 <bt_att_chan_create_pdu+0x22>
   4da8c:	2101      	movs	r1, #1
   4da8e:	3008      	adds	r0, #8
   4da90:	f002 f94a 	bl	4fd28 <net_buf_simple_add>
	hdr->code = op;
   4da94:	7005      	strb	r5, [r0, #0]
	return buf;
   4da96:	e7f2      	b.n	4da7e <bt_att_chan_create_pdu+0x30>

0004da98 <att_write_req>:
{
   4da98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4da9a:	460c      	mov	r4, r1
   4da9c:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   4da9e:	f101 0008 	add.w	r0, r1, #8
   4daa2:	f002 f982 	bl	4fdaa <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   4daa6:	89a2      	ldrh	r2, [r4, #12]
   4daa8:	9201      	str	r2, [sp, #4]
   4daaa:	68a2      	ldr	r2, [r4, #8]
   4daac:	9200      	str	r2, [sp, #0]
   4daae:	4603      	mov	r3, r0
   4dab0:	2213      	movs	r2, #19
   4dab2:	2112      	movs	r1, #18
   4dab4:	4628      	mov	r0, r5
   4dab6:	f7e3 f8bd 	bl	30c34 <att_write_rsp.constprop.0>
}
   4daba:	b003      	add	sp, #12
   4dabc:	bd30      	pop	{r4, r5, pc}

0004dabe <att_write_cmd>:
{
   4dabe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4dac0:	460c      	mov	r4, r1
   4dac2:	4605      	mov	r5, r0
   4dac4:	f101 0008 	add.w	r0, r1, #8
   4dac8:	f002 f96f 	bl	4fdaa <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   4dacc:	89a2      	ldrh	r2, [r4, #12]
   4dace:	9201      	str	r2, [sp, #4]
   4dad0:	68a2      	ldr	r2, [r4, #8]
   4dad2:	9200      	str	r2, [sp, #0]
   4dad4:	2200      	movs	r2, #0
   4dad6:	4603      	mov	r3, r0
   4dad8:	4611      	mov	r1, r2
   4dada:	4628      	mov	r0, r5
   4dadc:	f7e3 f8aa 	bl	30c34 <att_write_rsp.constprop.0>
}
   4dae0:	b003      	add	sp, #12
   4dae2:	bd30      	pop	{r4, r5, pc}

0004dae4 <bt_att_create_pdu>:
{
   4dae4:	b538      	push	{r3, r4, r5, lr}
   4dae6:	460d      	mov	r5, r1
   4dae8:	4614      	mov	r4, r2
	att = att_get(conn);
   4daea:	f7ff fc5a 	bl	4d3a2 <att_get>
	if (!att) {
   4daee:	b168      	cbz	r0, 4db0c <bt_att_create_pdu+0x28>
	return list->head;
   4daf0:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4daf2:	b15b      	cbz	r3, 4db0c <bt_att_create_pdu+0x28>
   4daf4:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
   4daf8:	681b      	ldr	r3, [r3, #0]
   4dafa:	b10b      	cbz	r3, 4db00 <bt_att_create_pdu+0x1c>
   4dafc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   4db00:	1c62      	adds	r2, r4, #1
   4db02:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   4db06:	428a      	cmp	r2, r1
   4db08:	d90d      	bls.n	4db26 <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4db0a:	b90b      	cbnz	r3, 4db10 <bt_att_create_pdu+0x2c>
}
   4db0c:	2000      	movs	r0, #0
   4db0e:	bd38      	pop	{r3, r4, r5, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4db10:	4618      	mov	r0, r3
   4db12:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   4db16:	2b00      	cmp	r3, #0
   4db18:	d0f3      	beq.n	4db02 <bt_att_create_pdu+0x1e>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   4db1a:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   4db1e:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4db20:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   4db24:	d8f4      	bhi.n	4db10 <bt_att_create_pdu+0x2c>
		return bt_att_chan_create_pdu(chan, op, len);
   4db26:	4622      	mov	r2, r4
   4db28:	4629      	mov	r1, r5
}
   4db2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   4db2e:	f7ff bf8e 	b.w	4da4e <bt_att_chan_create_pdu>

0004db32 <att_read_blob_req>:
{
   4db32:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   4db34:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   4db36:	8813      	ldrh	r3, [r2, #0]
   4db38:	8852      	ldrh	r2, [r2, #2]
   4db3a:	9200      	str	r2, [sp, #0]
   4db3c:	210c      	movs	r1, #12
   4db3e:	220d      	movs	r2, #13
   4db40:	f7e3 f99c 	bl	30e7c <att_read_rsp>
}
   4db44:	b003      	add	sp, #12
   4db46:	f85d fb04 	ldr.w	pc, [sp], #4

0004db4a <att_read_req>:
{
   4db4a:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   4db4c:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   4db4e:	2200      	movs	r2, #0
   4db50:	881b      	ldrh	r3, [r3, #0]
   4db52:	9200      	str	r2, [sp, #0]
   4db54:	210a      	movs	r1, #10
   4db56:	220b      	movs	r2, #11
   4db58:	f7e3 f990 	bl	30e7c <att_read_rsp>
}
   4db5c:	b003      	add	sp, #12
   4db5e:	f85d fb04 	ldr.w	pc, [sp], #4

0004db62 <bt_att_init>:
	bt_gatt_init();
   4db62:	f7e3 bf07 	b.w	31974 <bt_gatt_init>

0004db66 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   4db66:	898a      	ldrh	r2, [r1, #12]
   4db68:	6889      	ldr	r1, [r1, #8]
   4db6a:	2300      	movs	r3, #0
   4db6c:	f7e3 bb3e 	b.w	311ec <att_handle_rsp>

0004db70 <att_handle_find_type_rsp>:
static uint8_t att_handle_find_type_rsp(struct bt_att_chan *chan,
   4db70:	f7ff bff9 	b.w	4db66 <att_handle_find_info_rsp>

0004db74 <att_handle_read_type_rsp>:
static uint8_t att_handle_read_type_rsp(struct bt_att_chan *chan,
   4db74:	f7ff bff7 	b.w	4db66 <att_handle_find_info_rsp>

0004db78 <att_handle_read_rsp>:
static uint8_t att_handle_read_rsp(struct bt_att_chan *chan,
   4db78:	f7ff bff5 	b.w	4db66 <att_handle_find_info_rsp>

0004db7c <att_handle_read_blob_rsp>:
static uint8_t att_handle_read_blob_rsp(struct bt_att_chan *chan,
   4db7c:	f7ff bff3 	b.w	4db66 <att_handle_find_info_rsp>

0004db80 <att_handle_read_mult_rsp>:
static uint8_t att_handle_read_mult_rsp(struct bt_att_chan *chan,
   4db80:	f7ff bff1 	b.w	4db66 <att_handle_find_info_rsp>

0004db84 <att_handle_read_group_rsp>:
static uint8_t att_handle_read_group_rsp(struct bt_att_chan *chan,
   4db84:	f7ff bfef 	b.w	4db66 <att_handle_find_info_rsp>

0004db88 <att_handle_write_rsp>:
static uint8_t att_handle_write_rsp(struct bt_att_chan *chan,
   4db88:	f7ff bfed 	b.w	4db66 <att_handle_find_info_rsp>

0004db8c <att_handle_prepare_write_rsp>:
static uint8_t att_handle_prepare_write_rsp(struct bt_att_chan *chan,
   4db8c:	f7ff bfeb 	b.w	4db66 <att_handle_find_info_rsp>

0004db90 <att_handle_exec_write_rsp>:
static uint8_t att_handle_exec_write_rsp(struct bt_att_chan *chan,
   4db90:	f7ff bfe9 	b.w	4db66 <att_handle_find_info_rsp>

0004db94 <att_confirm>:
static uint8_t att_confirm(struct bt_att_chan *chan, struct net_buf *buf)
   4db94:	f7ff bfe7 	b.w	4db66 <att_handle_find_info_rsp>

0004db98 <att_mtu_rsp>:
{
   4db98:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   4db9a:	688e      	ldr	r6, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   4db9c:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   4db9e:	2b16      	cmp	r3, #22
{
   4dba0:	4604      	mov	r4, r0
   4dba2:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   4dba4:	d806      	bhi.n	4dbb4 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   4dba6:	2200      	movs	r2, #0
   4dba8:	2304      	movs	r3, #4
   4dbaa:	4611      	mov	r1, r2
}
   4dbac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   4dbb0:	f7e3 bb1c 	b.w	311ec <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   4dbb4:	2b41      	cmp	r3, #65	; 0x41
   4dbb6:	bf28      	it	cs
   4dbb8:	2341      	movcs	r3, #65	; 0x41
   4dbba:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   4dbbe:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   4dbc2:	f7ff fc1d 	bl	4d400 <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   4dbc6:	89aa      	ldrh	r2, [r5, #12]
   4dbc8:	2300      	movs	r3, #0
   4dbca:	4631      	mov	r1, r6
   4dbcc:	4620      	mov	r0, r4
   4dbce:	e7ed      	b.n	4dbac <att_mtu_rsp+0x14>

0004dbd0 <bt_att_encrypt_change>:
{
   4dbd0:	b570      	push	{r4, r5, r6, lr}
	if (!att_chan->att) {
   4dbd2:	f850 3c08 	ldr.w	r3, [r0, #-8]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   4dbd6:	4605      	mov	r5, r0
{
   4dbd8:	4604      	mov	r4, r0
	struct bt_conn *conn = ch->chan.conn;
   4dbda:	f855 6908 	ldr.w	r6, [r5], #-8
	if (!att_chan->att) {
   4dbde:	2b00      	cmp	r3, #0
   4dbe0:	d035      	beq.n	4dc4e <bt_att_encrypt_change+0x7e>
	if (hci_status) {
   4dbe2:	b139      	cbz	r1, 4dbf4 <bt_att_encrypt_change+0x24>
		if (att_chan->req && att_chan->req->retrying) {
   4dbe4:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   4dbe8:	b38b      	cbz	r3, 4dc4e <bt_att_encrypt_change+0x7e>
   4dbea:	7c1b      	ldrb	r3, [r3, #16]
   4dbec:	07da      	lsls	r2, r3, #31
   4dbee:	d52e      	bpl.n	4dc4e <bt_att_encrypt_change+0x7e>
		return BT_ATT_ERR_AUTHENTICATION;
   4dbf0:	2305      	movs	r3, #5
   4dbf2:	e01f      	b.n	4dc34 <bt_att_encrypt_change+0x64>
	bt_gatt_encrypt_change(conn);
   4dbf4:	4630      	mov	r0, r6
   4dbf6:	f7e4 fddb 	bl	327b0 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   4dbfa:	7a73      	ldrb	r3, [r6, #9]
   4dbfc:	2b01      	cmp	r3, #1
   4dbfe:	d026      	beq.n	4dc4e <bt_att_encrypt_change+0x7e>
	if (!(att_chan->req && att_chan->req->retrying)) {
   4dc00:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   4dc04:	b31c      	cbz	r4, 4dc4e <bt_att_encrypt_change+0x7e>
   4dc06:	7c23      	ldrb	r3, [r4, #16]
   4dc08:	07db      	lsls	r3, r3, #31
   4dc0a:	d520      	bpl.n	4dc4e <bt_att_encrypt_change+0x7e>
	if (!req->encode) {
   4dc0c:	68e3      	ldr	r3, [r4, #12]
   4dc0e:	2b00      	cmp	r3, #0
   4dc10:	d0ee      	beq.n	4dbf0 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   4dc12:	6962      	ldr	r2, [r4, #20]
   4dc14:	7c61      	ldrb	r1, [r4, #17]
   4dc16:	4628      	mov	r0, r5
   4dc18:	f7ff ff19 	bl	4da4e <bt_att_chan_create_pdu>
	if (!buf) {
   4dc1c:	4606      	mov	r6, r0
   4dc1e:	b140      	cbz	r0, 4dc32 <bt_att_encrypt_change+0x62>
	if (req->encode(buf, req->len, req->user_data)) {
   4dc20:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   4dc24:	68e3      	ldr	r3, [r4, #12]
   4dc26:	4798      	blx	r3
   4dc28:	4602      	mov	r2, r0
   4dc2a:	b150      	cbz	r0, 4dc42 <bt_att_encrypt_change+0x72>
		net_buf_unref(buf);
   4dc2c:	4630      	mov	r0, r6
   4dc2e:	f7f5 fef1 	bl	43a14 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   4dc32:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   4dc34:	2200      	movs	r2, #0
   4dc36:	4628      	mov	r0, r5
   4dc38:	4611      	mov	r1, r2
}
   4dc3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   4dc3e:	f7e3 bad5 	b.w	311ec <att_handle_rsp>
	if (chan_send(att_chan, buf, NULL)) {
   4dc42:	4631      	mov	r1, r6
   4dc44:	4628      	mov	r0, r5
   4dc46:	f7e2 fe55 	bl	308f4 <chan_send>
   4dc4a:	2800      	cmp	r0, #0
   4dc4c:	d1ee      	bne.n	4dc2c <bt_att_encrypt_change+0x5c>
}
   4dc4e:	bd70      	pop	{r4, r5, r6, pc}

0004dc50 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   4dc50:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   4dc54:	f7e3 bb36 	b.w	312c4 <bt_att_disconnected>

0004dc58 <bt_att_send>:
{
   4dc58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   4dc5c:	4607      	mov	r7, r0
   4dc5e:	460d      	mov	r5, r1
   4dc60:	4616      	mov	r6, r2
   4dc62:	4698      	mov	r8, r3
	att = att_get(conn);
   4dc64:	f7ff fb9d 	bl	4d3a2 <att_get>
	if (!att) {
   4dc68:	4604      	mov	r4, r0
   4dc6a:	b938      	cbnz	r0, 4dc7c <bt_att_send+0x24>
		net_buf_unref(buf);
   4dc6c:	4628      	mov	r0, r5
   4dc6e:	f7f5 fed1 	bl	43a14 <net_buf_unref>
		return -ENOTCONN;
   4dc72:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   4dc76:	b002      	add	sp, #8
   4dc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   4dc7c:	b146      	cbz	r6, 4dc90 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   4dc7e:	f8cd 8000 	str.w	r8, [sp]
   4dc82:	4633      	mov	r3, r6
   4dc84:	462a      	mov	r2, r5
   4dc86:	2104      	movs	r1, #4
   4dc88:	4638      	mov	r0, r7
   4dc8a:	f7ff fa90 	bl	4d1ae <bt_l2cap_send_cb>
   4dc8e:	e7f2      	b.n	4dc76 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   4dc90:	f100 060c 	add.w	r6, r0, #12
   4dc94:	4629      	mov	r1, r5
   4dc96:	4630      	mov	r0, r6
   4dc98:	f002 f807 	bl	4fcaa <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   4dc9c:	2200      	movs	r2, #0
   4dc9e:	2300      	movs	r3, #0
   4dca0:	4630      	mov	r0, r6
   4dca2:	f001 ffde 	bl	4fc62 <net_buf_get>
	if (!buf) {
   4dca6:	4605      	mov	r5, r0
   4dca8:	b908      	cbnz	r0, 4dcae <bt_att_send+0x56>
	return 0;
   4dcaa:	2000      	movs	r0, #0
   4dcac:	e7e3      	b.n	4dc76 <bt_att_send+0x1e>
	return list->head;
   4dcae:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4dcb0:	b1a3      	cbz	r3, 4dcdc <bt_att_send+0x84>
	return node->next;
   4dcb2:	681c      	ldr	r4, [r3, #0]
   4dcb4:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   4dcb8:	b10c      	cbz	r4, 4dcbe <bt_att_send+0x66>
   4dcba:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   4dcbe:	2200      	movs	r2, #0
   4dcc0:	4629      	mov	r1, r5
   4dcc2:	f7e2 fe17 	bl	308f4 <chan_send>
		if (err >= 0) {
   4dcc6:	2800      	cmp	r0, #0
   4dcc8:	daef      	bge.n	4dcaa <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4dcca:	b13c      	cbz	r4, 4dcdc <bt_att_send+0x84>
   4dccc:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   4dcd0:	b10b      	cbz	r3, 4dcd6 <bt_att_send+0x7e>
   4dcd2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   4dcd6:	4620      	mov	r0, r4
   4dcd8:	461c      	mov	r4, r3
   4dcda:	e7f0      	b.n	4dcbe <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   4dcdc:	4629      	mov	r1, r5
   4dcde:	4630      	mov	r0, r6
   4dce0:	f002 ff25 	bl	50b2e <k_queue_prepend>
   4dce4:	e7e1      	b.n	4dcaa <bt_att_send+0x52>

0004dce6 <bt_att_req_send>:
{
   4dce6:	b510      	push	{r4, lr}
   4dce8:	460c      	mov	r4, r1
	att = att_get(conn);
   4dcea:	f7ff fb5a 	bl	4d3a2 <att_get>
	if (!att) {
   4dcee:	b160      	cbz	r0, 4dd0a <bt_att_req_send+0x24>
	parent->next = child;
   4dcf0:	2300      	movs	r3, #0
   4dcf2:	6023      	str	r3, [r4, #0]
	return list->tail;
   4dcf4:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   4dcf6:	b92b      	cbnz	r3, 4dd04 <bt_att_req_send+0x1e>
	list->head = node;
   4dcf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   4dcfc:	f7ff fe54 	bl	4d9a8 <att_req_send_process>
	return 0;
   4dd00:	2000      	movs	r0, #0
}
   4dd02:	bd10      	pop	{r4, pc}
	parent->next = child;
   4dd04:	601c      	str	r4, [r3, #0]
	list->tail = node;
   4dd06:	6084      	str	r4, [r0, #8]
}
   4dd08:	e7f8      	b.n	4dcfc <bt_att_req_send+0x16>
		return -ENOTCONN;
   4dd0a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4dd0e:	e7f8      	b.n	4dd02 <bt_att_req_send+0x1c>

0004dd10 <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   4dd10:	b510      	push	{r4, lr}
   4dd12:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   4dd14:	f7ff fb45 	bl	4d3a2 <att_get>
	if (!att) {
   4dd18:	b198      	cbz	r0, 4dd42 <bt_att_find_req_by_user_data+0x32>
	return list->head;
   4dd1a:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   4dd1c:	b14b      	cbz	r3, 4dd32 <bt_att_find_req_by_user_data+0x22>
		if (chan->req->user_data == user_data) {
   4dd1e:	f853 2c50 	ldr.w	r2, [r3, #-80]
   4dd22:	6991      	ldr	r1, [r2, #24]
   4dd24:	42a1      	cmp	r1, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   4dd26:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (chan->req->user_data == user_data) {
   4dd2a:	d009      	beq.n	4dd40 <bt_att_find_req_by_user_data+0x30>
	return node->next;
   4dd2c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   4dd30:	e7f4      	b.n	4dd1c <bt_att_find_req_by_user_data+0xc>
	return list->head;
   4dd32:	6840      	ldr	r0, [r0, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   4dd34:	b128      	cbz	r0, 4dd42 <bt_att_find_req_by_user_data+0x32>
		if (req->user_data == user_data) {
   4dd36:	6983      	ldr	r3, [r0, #24]
   4dd38:	42a3      	cmp	r3, r4
   4dd3a:	d002      	beq.n	4dd42 <bt_att_find_req_by_user_data+0x32>
	return node->next;
   4dd3c:	6800      	ldr	r0, [r0, #0]
   4dd3e:	e7f9      	b.n	4dd34 <bt_att_find_req_by_user_data+0x24>
		if (chan->req->user_data == user_data) {
   4dd40:	4610      	mov	r0, r2
			return req;
		}
	}

	return NULL;
}
   4dd42:	bd10      	pop	{r4, pc}

0004dd44 <gatt_ccc_changed>:
{
   4dd44:	b430      	push	{r4, r5}
   4dd46:	460b      	mov	r3, r1
   4dd48:	460a      	mov	r2, r1
   4dd4a:	f101 043c 	add.w	r4, r1, #60	; 0x3c
	uint16_t value = 0x0000;
   4dd4e:	2100      	movs	r1, #0
		if (ccc->cfg[i].value > value) {
   4dd50:	8915      	ldrh	r5, [r2, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   4dd52:	320a      	adds	r2, #10
   4dd54:	42a9      	cmp	r1, r5
   4dd56:	bf38      	it	cc
   4dd58:	4629      	movcc	r1, r5
   4dd5a:	42a2      	cmp	r2, r4
   4dd5c:	d1f8      	bne.n	4dd50 <gatt_ccc_changed+0xc>
	if (value != ccc->value) {
   4dd5e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   4dd60:	428a      	cmp	r2, r1
   4dd62:	d004      	beq.n	4dd6e <gatt_ccc_changed+0x2a>
		ccc->value = value;
   4dd64:	8799      	strh	r1, [r3, #60]	; 0x3c
		if (ccc->cfg_changed) {
   4dd66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   4dd68:	b10b      	cbz	r3, 4dd6e <gatt_ccc_changed+0x2a>
}
   4dd6a:	bc30      	pop	{r4, r5}
			ccc->cfg_changed(attr, value);
   4dd6c:	4718      	bx	r3
}
   4dd6e:	bc30      	pop	{r4, r5}
   4dd70:	4770      	bx	lr

0004dd72 <gatt_indicate_rsp>:
{
   4dd72:	b510      	push	{r4, lr}
   4dd74:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   4dd76:	68a3      	ldr	r3, [r4, #8]
{
   4dd78:	460a      	mov	r2, r1
	if (params->func) {
   4dd7a:	b10b      	cbz	r3, 4dd80 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   4dd7c:	4621      	mov	r1, r4
   4dd7e:	4798      	blx	r3
	params->_ref--;
   4dd80:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   4dd82:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   4dd84:	3b01      	subs	r3, #1
   4dd86:	b2db      	uxtb	r3, r3
   4dd88:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   4dd8a:	b122      	cbz	r2, 4dd96 <gatt_indicate_rsp+0x24>
   4dd8c:	b91b      	cbnz	r3, 4dd96 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   4dd8e:	4620      	mov	r0, r4
}
   4dd90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   4dd94:	4710      	bx	r2
}
   4dd96:	bd10      	pop	{r4, pc}

0004dd98 <match_uuid>:
	data->attr = attr;
   4dd98:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   4dd9a:	8091      	strh	r1, [r2, #4]
}
   4dd9c:	2000      	movs	r0, #0
   4dd9e:	4770      	bx	lr

0004dda0 <ccc_set_cb>:
}
   4dda0:	2000      	movs	r0, #0
   4dda2:	4770      	bx	lr

0004dda4 <atomic_get>:
   4dda4:	f3bf 8f5b 	dmb	ish
   4dda8:	6800      	ldr	r0, [r0, #0]
   4ddaa:	f3bf 8f5b 	dmb	ish
}
   4ddae:	4770      	bx	lr

0004ddb0 <gen_hash_m>:
{
   4ddb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   4ddb2:	6807      	ldr	r7, [r0, #0]
   4ddb4:	783d      	ldrb	r5, [r7, #0]
{
   4ddb6:	b089      	sub	sp, #36	; 0x24
   4ddb8:	4606      	mov	r6, r0
   4ddba:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   4ddbc:	b9dd      	cbnz	r5, 4ddf6 <gen_hash_m+0x46>
	switch (u16->val) {
   4ddbe:	887b      	ldrh	r3, [r7, #2]
   4ddc0:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   4ddc4:	d004      	beq.n	4ddd0 <gen_hash_m+0x20>
   4ddc6:	d810      	bhi.n	4ddea <gen_hash_m+0x3a>
   4ddc8:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   4ddcc:	2b03      	cmp	r3, #3
   4ddce:	d812      	bhi.n	4ddf6 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   4ddd0:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4ddd4:	2202      	movs	r2, #2
   4ddd6:	f10d 010a 	add.w	r1, sp, #10
   4ddda:	4620      	mov	r0, r4
   4dddc:	f7fd fe5b 	bl	4ba96 <tc_cmac_update>
   4dde0:	b968      	cbnz	r0, 4ddfe <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   4dde2:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   4dde6:	65a2      	str	r2, [r4, #88]	; 0x58
   4dde8:	e006      	b.n	4ddf8 <gen_hash_m+0x48>
	switch (u16->val) {
   4ddea:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   4ddee:	33ff      	adds	r3, #255	; 0xff
   4ddf0:	b29b      	uxth	r3, r3
   4ddf2:	2b04      	cmp	r3, #4
   4ddf4:	d91e      	bls.n	4de34 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   4ddf6:	2501      	movs	r5, #1
}
   4ddf8:	4628      	mov	r0, r5
   4ddfa:	b009      	add	sp, #36	; 0x24
   4ddfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   4ddfe:	887b      	ldrh	r3, [r7, #2]
   4de00:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4de04:	2202      	movs	r2, #2
   4de06:	f10d 010a 	add.w	r1, sp, #10
   4de0a:	4620      	mov	r0, r4
   4de0c:	f7fd fe43 	bl	4ba96 <tc_cmac_update>
   4de10:	2800      	cmp	r0, #0
   4de12:	d0e6      	beq.n	4dde2 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   4de14:	2000      	movs	r0, #0
   4de16:	9000      	str	r0, [sp, #0]
   4de18:	aa03      	add	r2, sp, #12
   4de1a:	6877      	ldr	r7, [r6, #4]
   4de1c:	2313      	movs	r3, #19
   4de1e:	4631      	mov	r1, r6
   4de20:	47b8      	blx	r7
		if (len < 0) {
   4de22:	1e02      	subs	r2, r0, #0
   4de24:	dbdf      	blt.n	4dde6 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   4de26:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4de28:	4620      	mov	r0, r4
   4de2a:	f7fd fe34 	bl	4ba96 <tc_cmac_update>
   4de2e:	2800      	cmp	r0, #0
   4de30:	d1e1      	bne.n	4ddf6 <gen_hash_m+0x46>
   4de32:	e7d6      	b.n	4dde2 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   4de34:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4de38:	2202      	movs	r2, #2
   4de3a:	f10d 010a 	add.w	r1, sp, #10
   4de3e:	4620      	mov	r0, r4
   4de40:	f7fd fe29 	bl	4ba96 <tc_cmac_update>
   4de44:	2800      	cmp	r0, #0
   4de46:	d0cc      	beq.n	4dde2 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   4de48:	887b      	ldrh	r3, [r7, #2]
   4de4a:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4de4e:	2202      	movs	r2, #2
   4de50:	f10d 010a 	add.w	r1, sp, #10
   4de54:	e7e8      	b.n	4de28 <gen_hash_m+0x78>

0004de56 <atomic_or>:
{
   4de56:	b510      	push	{r4, lr}
   4de58:	4603      	mov	r3, r0
}
   4de5a:	f3bf 8f5b 	dmb	ish
   4de5e:	e853 0f00 	ldrex	r0, [r3]
   4de62:	ea40 0201 	orr.w	r2, r0, r1
   4de66:	e843 2400 	strex	r4, r2, [r3]
   4de6a:	2c00      	cmp	r4, #0
   4de6c:	d1f7      	bne.n	4de5e <atomic_or+0x8>
   4de6e:	f3bf 8f5b 	dmb	ish
   4de72:	bd10      	pop	{r4, pc}

0004de74 <bt_addr_le_cmp>:
   4de74:	2207      	movs	r2, #7
   4de76:	f7fd bf66 	b.w	4bd46 <memcmp>

0004de7a <find_ccc_cfg>:
{
   4de7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4de7c:	4606      	mov	r6, r0
   4de7e:	1c4c      	adds	r4, r1, #1
   4de80:	f101 053d 	add.w	r5, r1, #61	; 0x3d
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   4de84:	1e67      	subs	r7, r4, #1
						    &cfg->peer)) {
   4de86:	4620      	mov	r0, r4
		if (conn) {
   4de88:	b14e      	cbz	r6, 4de9e <find_ccc_cfg+0x24>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   4de8a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   4de8e:	4622      	mov	r2, r4
   4de90:	4630      	mov	r0, r6
   4de92:	f7ff f84b 	bl	4cf2c <bt_conn_is_peer_addr_le>
   4de96:	b198      	cbz	r0, 4dec0 <find_ccc_cfg+0x46>
}
   4de98:	4638      	mov	r0, r7
   4de9a:	b003      	add	sp, #12
   4de9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   4de9e:	4669      	mov	r1, sp
   4dea0:	9600      	str	r6, [sp, #0]
   4dea2:	f8cd 6003 	str.w	r6, [sp, #3]
   4dea6:	f7ff ffe5 	bl	4de74 <bt_addr_le_cmp>
   4deaa:	2800      	cmp	r0, #0
   4deac:	d0f4      	beq.n	4de98 <find_ccc_cfg+0x1e>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   4deae:	f104 030a 	add.w	r3, r4, #10
   4deb2:	42ab      	cmp	r3, r5
   4deb4:	d007      	beq.n	4dec6 <find_ccc_cfg+0x4c>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   4deb6:	f104 0709 	add.w	r7, r4, #9
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   4deba:	4618      	mov	r0, r3
						    &cfg->peer)) {
   4debc:	461c      	mov	r4, r3
   4debe:	e7ee      	b.n	4de9e <find_ccc_cfg+0x24>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   4dec0:	340a      	adds	r4, #10
   4dec2:	42ac      	cmp	r4, r5
   4dec4:	d1de      	bne.n	4de84 <find_ccc_cfg+0xa>
	return NULL;
   4dec6:	2700      	movs	r7, #0
   4dec8:	e7e6      	b.n	4de98 <find_ccc_cfg+0x1e>

0004deca <ccc_find_cfg>:
{
   4deca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4dece:	4604      	mov	r4, r0
   4ded0:	460f      	mov	r7, r1
   4ded2:	4690      	mov	r8, r2
   4ded4:	1c46      	adds	r6, r0, #1
   4ded6:	2500      	movs	r5, #0
		if (id == ccc->cfg[i].id &&
   4ded8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   4dedc:	4543      	cmp	r3, r8
   4dede:	d107      	bne.n	4def0 <ccc_find_cfg+0x26>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   4dee0:	4639      	mov	r1, r7
   4dee2:	4630      	mov	r0, r6
   4dee4:	f7ff ffc6 	bl	4de74 <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   4dee8:	b910      	cbnz	r0, 4def0 <ccc_find_cfg+0x26>
			return &ccc->cfg[i];
   4deea:	1960      	adds	r0, r4, r5
}
   4deec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   4def0:	350a      	adds	r5, #10
   4def2:	2d3c      	cmp	r5, #60	; 0x3c
   4def4:	f106 060a 	add.w	r6, r6, #10
   4def8:	d1ee      	bne.n	4ded8 <ccc_find_cfg+0xe>
	return NULL;
   4defa:	2000      	movs	r0, #0
   4defc:	e7f6      	b.n	4deec <ccc_find_cfg+0x22>

0004defe <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   4defe:	2207      	movs	r2, #7
   4df00:	f7fd bf31 	b.w	4bd66 <memcpy>

0004df04 <cf_write>:
{
   4df04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4df08:	461f      	mov	r7, r3
   4df0a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   4df0e:	2b01      	cmp	r3, #1
{
   4df10:	4606      	mov	r6, r0
   4df12:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   4df14:	d82e      	bhi.n	4df74 <cf_write+0x70>
	if (offset + len > sizeof(cfg->data)) {
   4df16:	443b      	add	r3, r7
   4df18:	2b01      	cmp	r3, #1
   4df1a:	463d      	mov	r5, r7
   4df1c:	dc2d      	bgt.n	4df7a <cf_write+0x76>
	cfg = find_cf_cfg(conn);
   4df1e:	f7e3 fa67 	bl	313f0 <find_cf_cfg>
	if (!cfg) {
   4df22:	4604      	mov	r4, r0
   4df24:	b918      	cbnz	r0, 4df2e <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   4df26:	f7e3 fa63 	bl	313f0 <find_cf_cfg>
	if (!cfg) {
   4df2a:	4604      	mov	r4, r0
   4df2c:	b340      	cbz	r0, 4df80 <cf_write+0x7c>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   4df2e:	b197      	cbz	r7, 4df56 <cf_write+0x52>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   4df30:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   4df32:	f898 2000 	ldrb.w	r2, [r8]
   4df36:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   4df38:	fa21 f003 	lsr.w	r0, r1, r3
   4df3c:	07c7      	lsls	r7, r0, #31
   4df3e:	d503      	bpl.n	4df48 <cf_write+0x44>
		    !(value[i / 8] & BIT(i % 8))) {
   4df40:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   4df44:	07c0      	lsls	r0, r0, #31
   4df46:	d51e      	bpl.n	4df86 <cf_write+0x82>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   4df48:	3301      	adds	r3, #1
   4df4a:	2b03      	cmp	r3, #3
   4df4c:	d1f4      	bne.n	4df38 <cf_write+0x34>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   4df4e:	f002 0207 	and.w	r2, r2, #7
   4df52:	4311      	orrs	r1, r2
   4df54:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   4df56:	f106 0188 	add.w	r1, r6, #136	; 0x88
   4df5a:	1c60      	adds	r0, r4, #1
   4df5c:	f7ff ffcf 	bl	4defe <bt_addr_le_copy>
	cfg->id = conn->id;
   4df60:	4620      	mov	r0, r4
   4df62:	7a33      	ldrb	r3, [r6, #8]
   4df64:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4df68:	2101      	movs	r1, #1
   4df6a:	f7ff ff74 	bl	4de56 <atomic_or>
}
   4df6e:	4628      	mov	r0, r5
   4df70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4df74:	f06f 0506 	mvn.w	r5, #6
   4df78:	e7f9      	b.n	4df6e <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   4df7a:	f06f 050c 	mvn.w	r5, #12
   4df7e:	e7f6      	b.n	4df6e <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   4df80:	f06f 0510 	mvn.w	r5, #16
   4df84:	e7f3      	b.n	4df6e <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   4df86:	f06f 0512 	mvn.w	r5, #18
   4df8a:	e7f0      	b.n	4df6e <cf_write+0x6a>

0004df8c <clear_ccc_cfg>:
{
   4df8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   4df8e:	2500      	movs	r5, #0
{
   4df90:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   4df92:	4669      	mov	r1, sp
   4df94:	3001      	adds	r0, #1
   4df96:	9500      	str	r5, [sp, #0]
   4df98:	f8cd 5003 	str.w	r5, [sp, #3]
   4df9c:	f7ff ffaf 	bl	4defe <bt_addr_le_copy>
	cfg->id = 0U;
   4dfa0:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   4dfa2:	8125      	strh	r5, [r4, #8]
}
   4dfa4:	b003      	add	sp, #12
   4dfa6:	bd30      	pop	{r4, r5, pc}

0004dfa8 <gatt_sub_free>:
{
   4dfa8:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   4dfaa:	2300      	movs	r3, #0
   4dfac:	4669      	mov	r1, sp
   4dfae:	3001      	adds	r0, #1
   4dfb0:	9300      	str	r3, [sp, #0]
   4dfb2:	f8cd 3003 	str.w	r3, [sp, #3]
   4dfb6:	f7ff ffa2 	bl	4defe <bt_addr_le_copy>
}
   4dfba:	b003      	add	sp, #12
   4dfbc:	f85d fb04 	ldr.w	pc, [sp], #4

0004dfc0 <gatt_sub_remove>:
{
   4dfc0:	b570      	push	{r4, r5, r6, lr}
   4dfc2:	460c      	mov	r4, r1
	if (params) {
   4dfc4:	4619      	mov	r1, r3
   4dfc6:	b16b      	cbz	r3, 4dfe4 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   4dfc8:	f103 061c 	add.w	r6, r3, #28
	return list->tail;
   4dfcc:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   4dfce:	69db      	ldr	r3, [r3, #28]
Z_GENLIST_REMOVE(slist, snode)
   4dfd0:	b97a      	cbnz	r2, 4dff2 <gatt_sub_remove+0x32>
   4dfd2:	42ae      	cmp	r6, r5
	list->head = node;
   4dfd4:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   4dfd6:	d100      	bne.n	4dfda <gatt_sub_remove+0x1a>
	list->tail = node;
   4dfd8:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   4dfda:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   4dfdc:	680d      	ldr	r5, [r1, #0]
   4dfde:	61cb      	str	r3, [r1, #28]
   4dfe0:	461a      	mov	r2, r3
   4dfe2:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   4dfe4:	68a3      	ldr	r3, [r4, #8]
   4dfe6:	b94b      	cbnz	r3, 4dffc <gatt_sub_remove+0x3c>
		gatt_sub_free(sub);
   4dfe8:	4620      	mov	r0, r4
}
   4dfea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gatt_sub_free(sub);
   4dfee:	f7ff bfdb 	b.w	4dfa8 <gatt_sub_free>
Z_GENLIST_REMOVE(slist, snode)
   4dff2:	42ae      	cmp	r6, r5
	parent->next = child;
   4dff4:	6013      	str	r3, [r2, #0]
	list->tail = node;
   4dff6:	bf08      	it	eq
   4dff8:	60e2      	streq	r2, [r4, #12]
}
   4dffa:	e7ee      	b.n	4dfda <gatt_sub_remove+0x1a>
}
   4dffc:	bd70      	pop	{r4, r5, r6, pc}

0004dffe <sc_save>:
{
   4dffe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   4e002:	4680      	mov	r8, r0
   4e004:	460f      	mov	r7, r1
   4e006:	4616      	mov	r6, r2
   4e008:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   4e00a:	f7e3 fa13 	bl	31434 <find_sc_cfg>
	if (!cfg) {
   4e00e:	4604      	mov	r4, r0
   4e010:	b960      	cbnz	r0, 4e02c <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   4e012:	4669      	mov	r1, sp
   4e014:	9000      	str	r0, [sp, #0]
   4e016:	f8cd 0003 	str.w	r0, [sp, #3]
   4e01a:	f7e3 fa0b 	bl	31434 <find_sc_cfg>
		if (!cfg) {
   4e01e:	4604      	mov	r4, r0
   4e020:	b1d0      	cbz	r0, 4e058 <sc_save+0x5a>
		cfg->id = id;
   4e022:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   4e026:	4639      	mov	r1, r7
   4e028:	f7ff ff69 	bl	4defe <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   4e02c:	8922      	ldrh	r2, [r4, #8]
   4e02e:	8963      	ldrh	r3, [r4, #10]
   4e030:	b972      	cbnz	r2, 4e050 <sc_save+0x52>
   4e032:	b97b      	cbnz	r3, 4e054 <sc_save+0x56>
		cfg->data.start = start;
   4e034:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   4e036:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   4e038:	4621      	mov	r1, r4
   4e03a:	f811 0b01 	ldrb.w	r0, [r1], #1
   4e03e:	f7fe fb59 	bl	4c6f4 <bt_addr_le_is_bonded>
   4e042:	b148      	cbz	r0, 4e058 <sc_save+0x5a>
		sc_store(cfg);
   4e044:	4620      	mov	r0, r4
}
   4e046:	b002      	add	sp, #8
   4e048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   4e04c:	f7e3 ba90 	b.w	31570 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   4e050:	4296      	cmp	r6, r2
   4e052:	d304      	bcc.n	4e05e <sc_save+0x60>
   4e054:	42ab      	cmp	r3, r5
   4e056:	d3ee      	bcc.n	4e036 <sc_save+0x38>
}
   4e058:	b002      	add	sp, #8
   4e05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (*end < new_end) {
   4e05e:	42ab      	cmp	r3, r5
		*start = new_start;
   4e060:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   4e062:	d2e9      	bcs.n	4e038 <sc_save+0x3a>
   4e064:	e7e7      	b.n	4e036 <sc_save+0x38>

0004e066 <atomic_and>:
{
   4e066:	b510      	push	{r4, lr}
   4e068:	4603      	mov	r3, r0
}
   4e06a:	f3bf 8f5b 	dmb	ish
   4e06e:	e853 0f00 	ldrex	r0, [r3]
   4e072:	ea00 0201 	and.w	r2, r0, r1
   4e076:	e843 2400 	strex	r4, r2, [r3]
   4e07a:	2c00      	cmp	r4, #0
   4e07c:	d1f7      	bne.n	4e06e <atomic_and+0x8>
   4e07e:	f3bf 8f5b 	dmb	ish
   4e082:	bd10      	pop	{r4, pc}

0004e084 <gatt_write_ccc_rsp>:
{
   4e084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4e088:	9c06      	ldr	r4, [sp, #24]
   4e08a:	460e      	mov	r6, r1
   4e08c:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4e08e:	f06f 0104 	mvn.w	r1, #4
   4e092:	f104 0018 	add.w	r0, r4, #24
   4e096:	f7ff ffe6 	bl	4e066 <atomic_and>
	if (err) {
   4e09a:	b1fe      	cbz	r6, 4e0dc <gatt_write_ccc_rsp+0x58>
		sub = gatt_sub_find(conn);
   4e09c:	4628      	mov	r0, r5
   4e09e:	f7e3 f9e5 	bl	3146c <gatt_sub_find>
		if (!sub) {
   4e0a2:	4601      	mov	r1, r0
   4e0a4:	b320      	cbz	r0, 4e0f0 <gatt_write_ccc_rsp+0x6c>
	return list->head;
   4e0a6:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   4e0a8:	b14b      	cbz	r3, 4e0be <gatt_write_ccc_rsp+0x3a>
	return node->next;
   4e0aa:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   4e0ac:	f104 071c 	add.w	r7, r4, #28
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   4e0b0:	b12b      	cbz	r3, 4e0be <gatt_write_ccc_rsp+0x3a>
			if (node == &params->node) {
   4e0b2:	42bb      	cmp	r3, r7
   4e0b4:	d10b      	bne.n	4e0ce <gatt_write_ccc_rsp+0x4a>
				gatt_sub_remove(conn, sub, tmp, params);
   4e0b6:	4623      	mov	r3, r4
   4e0b8:	4628      	mov	r0, r5
   4e0ba:	f7ff ff81 	bl	4dfc0 <gatt_sub_remove>
	if (params->write) {
   4e0be:	6863      	ldr	r3, [r4, #4]
   4e0c0:	b1b3      	cbz	r3, 4e0f0 <gatt_write_ccc_rsp+0x6c>
		params->write(conn, err, NULL);
   4e0c2:	4631      	mov	r1, r6
   4e0c4:	4628      	mov	r0, r5
   4e0c6:	2200      	movs	r2, #0
}
   4e0c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   4e0cc:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   4e0ce:	b11a      	cbz	r2, 4e0d8 <gatt_write_ccc_rsp+0x54>
	return node->next;
   4e0d0:	6810      	ldr	r0, [r2, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
   4e0d2:	4613      	mov	r3, r2
   4e0d4:	4602      	mov	r2, r0
   4e0d6:	e7eb      	b.n	4e0b0 <gatt_write_ccc_rsp+0x2c>
   4e0d8:	4610      	mov	r0, r2
   4e0da:	e7fa      	b.n	4e0d2 <gatt_write_ccc_rsp+0x4e>
	} else if (!params->value) {
   4e0dc:	8aa3      	ldrh	r3, [r4, #20]
   4e0de:	2b00      	cmp	r3, #0
   4e0e0:	d1ed      	bne.n	4e0be <gatt_write_ccc_rsp+0x3a>
		params->notify(conn, params, NULL, 0);
   4e0e2:	6827      	ldr	r7, [r4, #0]
   4e0e4:	4633      	mov	r3, r6
   4e0e6:	4632      	mov	r2, r6
   4e0e8:	4621      	mov	r1, r4
   4e0ea:	4628      	mov	r0, r5
   4e0ec:	47b8      	blx	r7
   4e0ee:	e7e6      	b.n	4e0be <gatt_write_ccc_rsp+0x3a>
}
   4e0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004e0f4 <gatt_req_send>:
{
   4e0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4e0f8:	4606      	mov	r6, r0
   4e0fa:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   4e0fc:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   4e100:	2100      	movs	r1, #0
{
   4e102:	f89d a020 	ldrb.w	sl, [sp, #32]
   4e106:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   4e10a:	4617      	mov	r7, r2
   4e10c:	461d      	mov	r5, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   4e10e:	f7e3 f839 	bl	31184 <bt_att_req_alloc>
	if (!req) {
   4e112:	4604      	mov	r4, r0
   4e114:	b180      	cbz	r0, 4e138 <gatt_req_send+0x44>
	req->att_op = op;
   4e116:	f880 a011 	strb.w	sl, [r0, #17]
	req->len = len;
   4e11a:	f8c0 8014 	str.w	r8, [r0, #20]
	req->encode = encode;
   4e11e:	60c5      	str	r5, [r0, #12]
	req->func = func;
   4e120:	f8c0 9004 	str.w	r9, [r0, #4]
	req->user_data = params;
   4e124:	6187      	str	r7, [r0, #24]
	buf = bt_att_create_pdu(conn, op, len);
   4e126:	4642      	mov	r2, r8
   4e128:	4651      	mov	r1, sl
   4e12a:	4630      	mov	r0, r6
   4e12c:	f7ff fcda 	bl	4dae4 <bt_att_create_pdu>
	if (!buf) {
   4e130:	b938      	cbnz	r0, 4e142 <gatt_req_send+0x4e>
		bt_att_req_free(req);
   4e132:	4620      	mov	r0, r4
   4e134:	f7e3 f848 	bl	311c8 <bt_att_req_free>
		return -ENOMEM;
   4e138:	f06f 050b 	mvn.w	r5, #11
}
   4e13c:	4628      	mov	r0, r5
   4e13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->buf = buf;
   4e142:	60a0      	str	r0, [r4, #8]
	err = encode(buf, len, params);
   4e144:	463a      	mov	r2, r7
   4e146:	4641      	mov	r1, r8
   4e148:	47a8      	blx	r5
	if (err) {
   4e14a:	4605      	mov	r5, r0
   4e14c:	b118      	cbz	r0, 4e156 <gatt_req_send+0x62>
		bt_att_req_free(req);
   4e14e:	4620      	mov	r0, r4
   4e150:	f7e3 f83a 	bl	311c8 <bt_att_req_free>
   4e154:	e7f2      	b.n	4e13c <gatt_req_send+0x48>
	err = bt_att_req_send(conn, req);
   4e156:	4621      	mov	r1, r4
   4e158:	4630      	mov	r0, r6
   4e15a:	f7ff fdc4 	bl	4dce6 <bt_att_req_send>
	if (err) {
   4e15e:	4605      	mov	r5, r0
   4e160:	2800      	cmp	r0, #0
   4e162:	d0eb      	beq.n	4e13c <gatt_req_send+0x48>
   4e164:	e7f3      	b.n	4e14e <gatt_req_send+0x5a>

0004e166 <read_included_uuid_encode>:
{
   4e166:	b510      	push	{r4, lr}
	return net_buf_simple_add(&buf->b, len);
   4e168:	2102      	movs	r1, #2
   4e16a:	3008      	adds	r0, #8
   4e16c:	4614      	mov	r4, r2
   4e16e:	f001 fddb 	bl	4fd28 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   4e172:	8963      	ldrh	r3, [r4, #10]
   4e174:	8003      	strh	r3, [r0, #0]
}
   4e176:	2000      	movs	r0, #0
   4e178:	bd10      	pop	{r4, pc}

0004e17a <gatt_find_info_encode>:
{
   4e17a:	b510      	push	{r4, lr}
   4e17c:	2104      	movs	r1, #4
   4e17e:	3008      	adds	r0, #8
   4e180:	4614      	mov	r4, r2
   4e182:	f001 fdd1 	bl	4fd28 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   4e186:	8923      	ldrh	r3, [r4, #8]
   4e188:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   4e18a:	89e3      	ldrh	r3, [r4, #14]
   4e18c:	8043      	strh	r3, [r0, #2]
}
   4e18e:	2000      	movs	r0, #0
   4e190:	bd10      	pop	{r4, pc}

0004e192 <gatt_read_group_encode>:
{
   4e192:	b538      	push	{r3, r4, r5, lr}
   4e194:	f100 0408 	add.w	r4, r0, #8
   4e198:	2104      	movs	r1, #4
   4e19a:	4620      	mov	r0, r4
   4e19c:	4615      	mov	r5, r2
   4e19e:	f001 fdc3 	bl	4fd28 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   4e1a2:	892b      	ldrh	r3, [r5, #8]
   4e1a4:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   4e1a6:	89eb      	ldrh	r3, [r5, #14]
   4e1a8:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4e1aa:	7c2b      	ldrb	r3, [r5, #16]
   4e1ac:	b933      	cbnz	r3, 4e1bc <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   4e1ae:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   4e1b2:	4620      	mov	r0, r4
   4e1b4:	f001 fdcf 	bl	4fd56 <net_buf_simple_add_le16>
}
   4e1b8:	2000      	movs	r0, #0
   4e1ba:	bd38      	pop	{r3, r4, r5, pc}
   4e1bc:	f642 0101 	movw	r1, #10241	; 0x2801
   4e1c0:	e7f7      	b.n	4e1b2 <gatt_read_group_encode+0x20>

0004e1c2 <gatt_read_type_encode>:
{
   4e1c2:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   4e1c4:	f100 0408 	add.w	r4, r0, #8
   4e1c8:	2104      	movs	r1, #4
   4e1ca:	4620      	mov	r0, r4
   4e1cc:	4615      	mov	r5, r2
   4e1ce:	f001 fdab 	bl	4fd28 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   4e1d2:	892b      	ldrh	r3, [r5, #8]
   4e1d4:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   4e1d6:	89eb      	ldrh	r3, [r5, #14]
   4e1d8:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   4e1da:	7c2b      	ldrb	r3, [r5, #16]
   4e1dc:	2b02      	cmp	r3, #2
   4e1de:	d004      	beq.n	4e1ea <gatt_read_type_encode+0x28>
   4e1e0:	2b03      	cmp	r3, #3
   4e1e2:	d009      	beq.n	4e1f8 <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   4e1e4:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   4e1e6:	8859      	ldrh	r1, [r3, #2]
   4e1e8:	e001      	b.n	4e1ee <gatt_read_type_encode+0x2c>
   4e1ea:	f642 0102 	movw	r1, #10242	; 0x2802
   4e1ee:	4620      	mov	r0, r4
   4e1f0:	f001 fdb1 	bl	4fd56 <net_buf_simple_add_le16>
}
   4e1f4:	2000      	movs	r0, #0
   4e1f6:	bd38      	pop	{r3, r4, r5, pc}
   4e1f8:	f642 0103 	movw	r1, #10243	; 0x2803
   4e1fc:	e7f7      	b.n	4e1ee <gatt_read_type_encode+0x2c>

0004e1fe <sc_set>:
{
   4e1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4e202:	460e      	mov	r6, r1
   4e204:	b086      	sub	sp, #24
   4e206:	4617      	mov	r7, r2
   4e208:	4698      	mov	r8, r3
	if (!name) {
   4e20a:	4605      	mov	r5, r0
   4e20c:	b928      	cbnz	r0, 4e21a <sc_set+0x1c>
		return -EINVAL;
   4e20e:	f06f 0415 	mvn.w	r4, #21
}
   4e212:	4620      	mov	r0, r4
   4e214:	b006      	add	sp, #24
   4e216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   4e21a:	a902      	add	r1, sp, #8
   4e21c:	f7fd fe6b 	bl	4bef6 <bt_settings_decode_key>
	if (err) {
   4e220:	4604      	mov	r4, r0
   4e222:	2800      	cmp	r0, #0
   4e224:	d1f3      	bne.n	4e20e <sc_set+0x10>
	settings_name_next(name, &next);
   4e226:	a901      	add	r1, sp, #4
   4e228:	4628      	mov	r0, r5
   4e22a:	f7fc facb 	bl	4a7c4 <settings_name_next>
	if (!next) {
   4e22e:	9801      	ldr	r0, [sp, #4]
   4e230:	b998      	cbnz	r0, 4e25a <sc_set+0x5c>
	cfg = find_sc_cfg(id, &addr);
   4e232:	a902      	add	r1, sp, #8
   4e234:	2000      	movs	r0, #0
   4e236:	f7e3 f8fd 	bl	31434 <find_sc_cfg>
	if (!cfg && len_rd) {
   4e23a:	4605      	mov	r5, r0
   4e23c:	bb08      	cbnz	r0, 4e282 <sc_set+0x84>
   4e23e:	2e00      	cmp	r6, #0
   4e240:	d0e7      	beq.n	4e212 <sc_set+0x14>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   4e242:	a904      	add	r1, sp, #16
   4e244:	9004      	str	r0, [sp, #16]
   4e246:	4604      	mov	r4, r0
   4e248:	f8cd 0013 	str.w	r0, [sp, #19]
   4e24c:	f7e3 f8f2 	bl	31434 <find_sc_cfg>
		if (!cfg) {
   4e250:	4605      	mov	r5, r0
   4e252:	b948      	cbnz	r0, 4e268 <sc_set+0x6a>
			return -ENOMEM;
   4e254:	f06f 040b 	mvn.w	r4, #11
   4e258:	e7db      	b.n	4e212 <sc_set+0x14>
		unsigned long next_id = strtoul(next, NULL, 10);
   4e25a:	220a      	movs	r2, #10
   4e25c:	4621      	mov	r1, r4
   4e25e:	f7fd fcca 	bl	4bbf6 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   4e262:	2800      	cmp	r0, #0
   4e264:	d0e5      	beq.n	4e232 <sc_set+0x34>
   4e266:	e7d2      	b.n	4e20e <sc_set+0x10>
		cfg->id = id;
   4e268:	f800 4b01 	strb.w	r4, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   4e26c:	a902      	add	r1, sp, #8
   4e26e:	f7ff fe46 	bl	4defe <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   4e272:	2204      	movs	r2, #4
   4e274:	f105 0108 	add.w	r1, r5, #8
   4e278:	4640      	mov	r0, r8
   4e27a:	47b8      	blx	r7
		if (len < 0) {
   4e27c:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   4e280:	e7c7      	b.n	4e212 <sc_set+0x14>
	if (len_rd) {
   4e282:	2e00      	cmp	r6, #0
   4e284:	d1f5      	bne.n	4e272 <sc_set+0x74>
		memset(cfg, 0, sizeof(*cfg));
   4e286:	220c      	movs	r2, #12
   4e288:	4631      	mov	r1, r6
   4e28a:	f7fd fd77 	bl	4bd7c <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   4e28e:	e7c0      	b.n	4e212 <sc_set+0x14>

0004e290 <clear_cf_cfg>:
{
   4e290:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4e292:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   4e294:	2500      	movs	r5, #0
   4e296:	4669      	mov	r1, sp
   4e298:	3001      	adds	r0, #1
   4e29a:	9500      	str	r5, [sp, #0]
   4e29c:	f8cd 5003 	str.w	r5, [sp, #3]
   4e2a0:	f7ff fe2d 	bl	4defe <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   4e2a4:	f104 0008 	add.w	r0, r4, #8
   4e2a8:	2201      	movs	r2, #1
   4e2aa:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   4e2ac:	340c      	adds	r4, #12
   4e2ae:	f7fd fd65 	bl	4bd7c <memset>
   4e2b2:	f3bf 8f5b 	dmb	ish
   4e2b6:	e854 3f00 	ldrex	r3, [r4]
   4e2ba:	e844 5200 	strex	r2, r5, [r4]
   4e2be:	2a00      	cmp	r2, #0
   4e2c0:	d1f9      	bne.n	4e2b6 <clear_cf_cfg+0x26>
   4e2c2:	f3bf 8f5b 	dmb	ish
}
   4e2c6:	b003      	add	sp, #12
   4e2c8:	bd30      	pop	{r4, r5, pc}

0004e2ca <cf_set>:
{
   4e2ca:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   4e2ce:	4688      	mov	r8, r1
   4e2d0:	4616      	mov	r6, r2
   4e2d2:	461f      	mov	r7, r3
	if (!name) {
   4e2d4:	4605      	mov	r5, r0
   4e2d6:	b928      	cbnz	r0, 4e2e4 <cf_set+0x1a>
		return -EINVAL;
   4e2d8:	f06f 0415 	mvn.w	r4, #21
}
   4e2dc:	4620      	mov	r0, r4
   4e2de:	b004      	add	sp, #16
   4e2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   4e2e4:	a902      	add	r1, sp, #8
   4e2e6:	f7fd fe06 	bl	4bef6 <bt_settings_decode_key>
	if (err) {
   4e2ea:	4604      	mov	r4, r0
   4e2ec:	2800      	cmp	r0, #0
   4e2ee:	d1f3      	bne.n	4e2d8 <cf_set+0xe>
	settings_name_next(name, &next);
   4e2f0:	a901      	add	r1, sp, #4
   4e2f2:	4628      	mov	r0, r5
   4e2f4:	f7fc fa66 	bl	4a7c4 <settings_name_next>
	if (!next) {
   4e2f8:	9801      	ldr	r0, [sp, #4]
   4e2fa:	b9d0      	cbnz	r0, 4e332 <cf_set+0x68>
	cfg = find_cf_cfg_by_addr(id, &addr);
   4e2fc:	a902      	add	r1, sp, #8
   4e2fe:	2000      	movs	r0, #0
   4e300:	f7e3 f8d6 	bl	314b0 <find_cf_cfg_by_addr>
	if (!cfg) {
   4e304:	4605      	mov	r5, r0
   4e306:	b948      	cbnz	r0, 4e31c <cf_set+0x52>
		cfg = find_cf_cfg(NULL);
   4e308:	f7e3 f872 	bl	313f0 <find_cf_cfg>
		if (!cfg) {
   4e30c:	4605      	mov	r5, r0
   4e30e:	b1d8      	cbz	r0, 4e348 <cf_set+0x7e>
		cfg->id = id;
   4e310:	2300      	movs	r3, #0
   4e312:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   4e316:	a902      	add	r1, sp, #8
   4e318:	f7ff fdf1 	bl	4defe <bt_addr_le_copy>
	if (len_rd) {
   4e31c:	f1b8 0f00 	cmp.w	r8, #0
   4e320:	d00e      	beq.n	4e340 <cf_set+0x76>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   4e322:	2201      	movs	r2, #1
   4e324:	f105 0108 	add.w	r1, r5, #8
   4e328:	4638      	mov	r0, r7
   4e32a:	47b0      	blx	r6
		if (len < 0) {
   4e32c:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   4e330:	e7d4      	b.n	4e2dc <cf_set+0x12>
		unsigned long next_id = strtoul(next, NULL, 10);
   4e332:	220a      	movs	r2, #10
   4e334:	4621      	mov	r1, r4
   4e336:	f7fd fc5e 	bl	4bbf6 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   4e33a:	2800      	cmp	r0, #0
   4e33c:	d0de      	beq.n	4e2fc <cf_set+0x32>
   4e33e:	e7cb      	b.n	4e2d8 <cf_set+0xe>
		clear_cf_cfg(cfg);
   4e340:	4628      	mov	r0, r5
   4e342:	f7ff ffa5 	bl	4e290 <clear_cf_cfg>
   4e346:	e7c9      	b.n	4e2dc <cf_set+0x12>
			return -ENOMEM;
   4e348:	f06f 040b 	mvn.w	r4, #11
   4e34c:	e7c6      	b.n	4e2dc <cf_set+0x12>

0004e34e <gatt_find_type_encode>:
{
   4e34e:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   4e350:	f100 0508 	add.w	r5, r0, #8
   4e354:	2106      	movs	r1, #6
   4e356:	4628      	mov	r0, r5
   4e358:	4614      	mov	r4, r2
   4e35a:	f001 fce5 	bl	4fd28 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   4e35e:	8923      	ldrh	r3, [r4, #8]
   4e360:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   4e362:	89e3      	ldrh	r3, [r4, #14]
   4e364:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4e366:	7c23      	ldrb	r3, [r4, #16]
	switch (params->uuid->type) {
   4e368:	6821      	ldr	r1, [r4, #0]
		uuid_val = BT_UUID_GATT_PRIMARY_VAL;
   4e36a:	2b00      	cmp	r3, #0
   4e36c:	f642 0301 	movw	r3, #10241	; 0x2801
   4e370:	bf08      	it	eq
   4e372:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   4e376:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   4e378:	780b      	ldrb	r3, [r1, #0]
   4e37a:	b11b      	cbz	r3, 4e384 <gatt_find_type_encode+0x36>
   4e37c:	2b02      	cmp	r3, #2
   4e37e:	d006      	beq.n	4e38e <gatt_find_type_encode+0x40>
}
   4e380:	2000      	movs	r0, #0
   4e382:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   4e384:	8849      	ldrh	r1, [r1, #2]
   4e386:	4628      	mov	r0, r5
   4e388:	f001 fce5 	bl	4fd56 <net_buf_simple_add_le16>
}
   4e38c:	e7f8      	b.n	4e380 <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   4e38e:	2210      	movs	r2, #16
   4e390:	3101      	adds	r1, #1
   4e392:	4628      	mov	r0, r5
   4e394:	f001 fcce 	bl	4fd34 <net_buf_simple_add_mem>
   4e398:	e7f2      	b.n	4e380 <gatt_find_type_encode+0x32>

0004e39a <sc_clear>:
{
   4e39a:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4e39c:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   4e3a0:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4e3a2:	4631      	mov	r1, r6
   4e3a4:	7a00      	ldrb	r0, [r0, #8]
   4e3a6:	f7fe f9a5 	bl	4c6f4 <bt_addr_le_is_bonded>
   4e3aa:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   4e3ac:	4631      	mov	r1, r6
   4e3ae:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4e3b0:	b11d      	cbz	r5, 4e3ba <sc_clear+0x20>
}
   4e3b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   4e3b6:	f7e3 ba0b 	b.w	317d0 <bt_gatt_clear_sc>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   4e3ba:	f7e3 f83b 	bl	31434 <find_sc_cfg>
		if (cfg) {
   4e3be:	b128      	cbz	r0, 4e3cc <sc_clear+0x32>
	memset(cfg, 0, sizeof(*cfg));
   4e3c0:	4629      	mov	r1, r5
   4e3c2:	220c      	movs	r2, #12
}
   4e3c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   4e3c8:	f7fd bcd8 	b.w	4bd7c <memset>
}
   4e3cc:	bd70      	pop	{r4, r5, r6, pc}

0004e3ce <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   4e3ce:	2a02      	cmp	r2, #2
{
   4e3d0:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   4e3d2:	d108      	bne.n	4e3e6 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   4e3d4:	2300      	movs	r3, #0
   4e3d6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   4e3da:	461a      	mov	r2, r3
   4e3dc:	7a00      	ldrb	r0, [r0, #8]
   4e3de:	f7ff fe0e 	bl	4dffe <sc_save>
}
   4e3e2:	2002      	movs	r0, #2
   4e3e4:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   4e3e6:	f7ff ffd8 	bl	4e39a <sc_clear>
   4e3ea:	e7fa      	b.n	4e3e2 <sc_ccc_cfg_write+0x14>

0004e3ec <read_appearance>:
{
   4e3ec:	b513      	push	{r0, r1, r4, lr}
   4e3ee:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   4e3f2:	4610      	mov	r0, r2
	if (offset > value_len) {
   4e3f4:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   4e3f6:	f240 32c1 	movw	r2, #961	; 0x3c1
   4e3fa:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   4e3fe:	d80d      	bhi.n	4e41c <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   4e400:	f1c1 0402 	rsb	r4, r1, #2
   4e404:	429c      	cmp	r4, r3
   4e406:	bfa8      	it	ge
   4e408:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   4e40a:	f10d 0306 	add.w	r3, sp, #6
   4e40e:	4622      	mov	r2, r4
   4e410:	4419      	add	r1, r3
   4e412:	f7fd fca8 	bl	4bd66 <memcpy>
}
   4e416:	4620      	mov	r0, r4
   4e418:	b002      	add	sp, #8
   4e41a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e41c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   4e420:	e7f9      	b.n	4e416 <read_appearance+0x2a>

0004e422 <read_name>:
{
   4e422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4e426:	4698      	mov	r8, r3
   4e428:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   4e42c:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   4e42e:	f7e0 f8d3 	bl	2e5d8 <bt_get_name>
   4e432:	4607      	mov	r7, r0
				 strlen(name));
   4e434:	f7fd fc60 	bl	4bcf8 <strlen>
	if (offset > value_len) {
   4e438:	b283      	uxth	r3, r0
   4e43a:	42b3      	cmp	r3, r6
   4e43c:	d30c      	bcc.n	4e458 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   4e43e:	1b9c      	subs	r4, r3, r6
   4e440:	4544      	cmp	r4, r8
   4e442:	bfa8      	it	ge
   4e444:	4644      	movge	r4, r8
   4e446:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   4e448:	4622      	mov	r2, r4
   4e44a:	19b9      	adds	r1, r7, r6
   4e44c:	4628      	mov	r0, r5
   4e44e:	f7fd fc8a 	bl	4bd66 <memcpy>
}
   4e452:	4620      	mov	r0, r4
   4e454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e458:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   4e45c:	e7f9      	b.n	4e452 <read_name+0x30>

0004e45e <cf_read>:
{
   4e45e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4e460:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   4e462:	2300      	movs	r3, #0
{
   4e464:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   4e468:	f88d 3004 	strb.w	r3, [sp, #4]
{
   4e46c:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   4e46e:	f7e2 ffbf 	bl	313f0 <find_cf_cfg>
	if (cfg) {
   4e472:	b128      	cbz	r0, 4e480 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   4e474:	f100 0108 	add.w	r1, r0, #8
   4e478:	2201      	movs	r2, #1
   4e47a:	a801      	add	r0, sp, #4
   4e47c:	f7fd fc73 	bl	4bd66 <memcpy>
	if (offset > value_len) {
   4e480:	2e01      	cmp	r6, #1
   4e482:	d80d      	bhi.n	4e4a0 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   4e484:	f1c6 0401 	rsb	r4, r6, #1
   4e488:	42bc      	cmp	r4, r7
   4e48a:	bfa8      	it	ge
   4e48c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   4e48e:	ab01      	add	r3, sp, #4
   4e490:	4622      	mov	r2, r4
   4e492:	1999      	adds	r1, r3, r6
   4e494:	4628      	mov	r0, r5
   4e496:	f7fd fc66 	bl	4bd66 <memcpy>
}
   4e49a:	4620      	mov	r0, r4
   4e49c:	b003      	add	sp, #12
   4e49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e4a0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   4e4a4:	e7f9      	b.n	4e49a <cf_read+0x3c>

0004e4a6 <bt_gatt_attr_read_service>:
{
   4e4a6:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   4e4a8:	68c9      	ldr	r1, [r1, #12]
{
   4e4aa:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   4e4ac:	780a      	ldrb	r2, [r1, #0]
{
   4e4ae:	461c      	mov	r4, r3
   4e4b0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   4e4b4:	b992      	cbnz	r2, 4e4dc <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   4e4b6:	884a      	ldrh	r2, [r1, #2]
   4e4b8:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   4e4bc:	2b02      	cmp	r3, #2
   4e4be:	d818      	bhi.n	4e4f2 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   4e4c0:	f1c3 0202 	rsb	r2, r3, #2
   4e4c4:	4294      	cmp	r4, r2
   4e4c6:	bfa8      	it	ge
   4e4c8:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   4e4ca:	4622      	mov	r2, r4
   4e4cc:	f10d 0106 	add.w	r1, sp, #6
   4e4d0:	4419      	add	r1, r3
   4e4d2:	f7fd fc48 	bl	4bd66 <memcpy>
}
   4e4d6:	4620      	mov	r0, r4
   4e4d8:	b002      	add	sp, #8
   4e4da:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   4e4dc:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   4e4de:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   4e4e2:	d806      	bhi.n	4e4f2 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   4e4e4:	f1c3 0210 	rsb	r2, r3, #16
   4e4e8:	4294      	cmp	r4, r2
   4e4ea:	bfa8      	it	ge
   4e4ec:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   4e4ee:	4622      	mov	r2, r4
   4e4f0:	e7ee      	b.n	4e4d0 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e4f2:	f06f 0406 	mvn.w	r4, #6
   4e4f6:	e7ee      	b.n	4e4d6 <bt_gatt_attr_read_service+0x30>

0004e4f8 <bt_gatt_attr_read_ccc>:
{
   4e4f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   4e4fa:	68c9      	ldr	r1, [r1, #12]
{
   4e4fc:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   4e500:	4615      	mov	r5, r2
   4e502:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   4e504:	f7ff fcb9 	bl	4de7a <find_ccc_cfg>
	if (cfg) {
   4e508:	b100      	cbz	r0, 4e50c <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   4e50a:	8900      	ldrh	r0, [r0, #8]
   4e50c:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   4e510:	2e02      	cmp	r6, #2
   4e512:	d80e      	bhi.n	4e532 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   4e514:	f1c6 0402 	rsb	r4, r6, #2
   4e518:	42bc      	cmp	r4, r7
   4e51a:	bfa8      	it	ge
   4e51c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   4e51e:	f10d 0306 	add.w	r3, sp, #6
   4e522:	4622      	mov	r2, r4
   4e524:	1999      	adds	r1, r3, r6
   4e526:	4628      	mov	r0, r5
   4e528:	f7fd fc1d 	bl	4bd66 <memcpy>
}
   4e52c:	4620      	mov	r0, r4
   4e52e:	b003      	add	sp, #12
   4e530:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e532:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   4e536:	e7f9      	b.n	4e52c <bt_gatt_attr_read_ccc+0x34>

0004e538 <gatt_write_ccc_buf>:
{
   4e538:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   4e53a:	f100 0508 	add.w	r5, r0, #8
   4e53e:	2102      	movs	r1, #2
   4e540:	4628      	mov	r0, r5
   4e542:	4614      	mov	r4, r2
   4e544:	f001 fbf0 	bl	4fd28 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   4e548:	8963      	ldrh	r3, [r4, #10]
   4e54a:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   4e54c:	8aa1      	ldrh	r1, [r4, #20]
   4e54e:	4628      	mov	r0, r5
   4e550:	f001 fc01 	bl	4fd56 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4e554:	2104      	movs	r1, #4
   4e556:	f104 0018 	add.w	r0, r4, #24
   4e55a:	f7ff fc7c 	bl	4de56 <atomic_or>
}
   4e55e:	2000      	movs	r0, #0
   4e560:	bd38      	pop	{r3, r4, r5, pc}

0004e562 <sc_restore_rsp>:
{
   4e562:	b538      	push	{r3, r4, r5, lr}
   4e564:	4604      	mov	r4, r0
   4e566:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   4e568:	f7e2 ff42 	bl	313f0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   4e56c:	b130      	cbz	r0, 4e57c <sc_restore_rsp+0x1a>
   4e56e:	7a03      	ldrb	r3, [r0, #8]
   4e570:	07db      	lsls	r3, r3, #31
   4e572:	d503      	bpl.n	4e57c <sc_restore_rsp+0x1a>
   4e574:	2101      	movs	r1, #1
   4e576:	300c      	adds	r0, #12
   4e578:	f7ff fc6d 	bl	4de56 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   4e57c:	b985      	cbnz	r5, 4e5a0 <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   4e57e:	7a20      	ldrb	r0, [r4, #8]
   4e580:	f104 0188 	add.w	r1, r4, #136	; 0x88
   4e584:	f7e2 ff56 	bl	31434 <find_sc_cfg>
		if (sc_cfg) {
   4e588:	4604      	mov	r4, r0
   4e58a:	b148      	cbz	r0, 4e5a0 <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   4e58c:	4629      	mov	r1, r5
   4e58e:	2204      	movs	r2, #4
   4e590:	3008      	adds	r0, #8
   4e592:	f7fd fbf3 	bl	4bd7c <memset>
		sc_store(cfg);
   4e596:	4620      	mov	r0, r4
}
   4e598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   4e59c:	f7e2 bfe8 	b.w	31570 <sc_store>
}
   4e5a0:	bd38      	pop	{r3, r4, r5, pc}

0004e5a2 <bt_gatt_attr_read>:
{
   4e5a2:	b510      	push	{r4, lr}
   4e5a4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   4e5a8:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   4e5ac:	42a1      	cmp	r1, r4
{
   4e5ae:	4610      	mov	r0, r2
	if (offset > value_len) {
   4e5b0:	d80b      	bhi.n	4e5ca <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   4e5b2:	1a64      	subs	r4, r4, r1
   4e5b4:	429c      	cmp	r4, r3
   4e5b6:	bfa8      	it	ge
   4e5b8:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   4e5ba:	9b03      	ldr	r3, [sp, #12]
   4e5bc:	b2a4      	uxth	r4, r4
   4e5be:	4622      	mov	r2, r4
   4e5c0:	4419      	add	r1, r3
   4e5c2:	f7fd fbd0 	bl	4bd66 <memcpy>
}
   4e5c6:	4620      	mov	r0, r4
   4e5c8:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e5ca:	f06f 0406 	mvn.w	r4, #6
   4e5ce:	e7fa      	b.n	4e5c6 <bt_gatt_attr_read+0x24>

0004e5d0 <bt_gatt_attr_value_handle>:
{
   4e5d0:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   4e5d2:	4604      	mov	r4, r0
   4e5d4:	b910      	cbnz	r0, 4e5dc <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   4e5d6:	2000      	movs	r0, #0
}
   4e5d8:	b002      	add	sp, #8
   4e5da:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   4e5dc:	2300      	movs	r3, #0
   4e5de:	f88d 3004 	strb.w	r3, [sp, #4]
   4e5e2:	6800      	ldr	r0, [r0, #0]
   4e5e4:	f642 0303 	movw	r3, #10243	; 0x2803
   4e5e8:	a901      	add	r1, sp, #4
   4e5ea:	f8ad 3006 	strh.w	r3, [sp, #6]
   4e5ee:	f7fd fca8 	bl	4bf42 <bt_uuid_cmp>
   4e5f2:	2800      	cmp	r0, #0
   4e5f4:	d1ef      	bne.n	4e5d6 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   4e5f6:	68e3      	ldr	r3, [r4, #12]
   4e5f8:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   4e5fa:	2800      	cmp	r0, #0
   4e5fc:	d1ec      	bne.n	4e5d8 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   4e5fe:	4620      	mov	r0, r4
   4e600:	f7e3 fa22 	bl	31a48 <bt_gatt_attr_get_handle>
   4e604:	3001      	adds	r0, #1
   4e606:	b280      	uxth	r0, r0
	return handle;
   4e608:	e7e6      	b.n	4e5d8 <bt_gatt_attr_value_handle+0x8>

0004e60a <bt_gatt_attr_read_chrc>:
{
   4e60a:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   4e60c:	68cc      	ldr	r4, [r1, #12]
{
   4e60e:	b087      	sub	sp, #28
   4e610:	4608      	mov	r0, r1
   4e612:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   4e614:	79a3      	ldrb	r3, [r4, #6]
   4e616:	f88d 3004 	strb.w	r3, [sp, #4]
{
   4e61a:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   4e61e:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   4e620:	f7ff ffd6 	bl	4e5d0 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   4e624:	6821      	ldr	r1, [r4, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   4e626:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   4e62a:	780b      	ldrb	r3, [r1, #0]
   4e62c:	b99b      	cbnz	r3, 4e656 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   4e62e:	884b      	ldrh	r3, [r1, #2]
   4e630:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   4e634:	2405      	movs	r4, #5
	if (offset > value_len) {
   4e636:	42b4      	cmp	r4, r6
   4e638:	d315      	bcc.n	4e666 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   4e63a:	1ba4      	subs	r4, r4, r6
   4e63c:	42bc      	cmp	r4, r7
   4e63e:	bfa8      	it	ge
   4e640:	463c      	movge	r4, r7
   4e642:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   4e644:	ab01      	add	r3, sp, #4
   4e646:	4622      	mov	r2, r4
   4e648:	1999      	adds	r1, r3, r6
   4e64a:	4628      	mov	r0, r5
   4e64c:	f7fd fb8b 	bl	4bd66 <memcpy>
}
   4e650:	4620      	mov	r0, r4
   4e652:	b007      	add	sp, #28
   4e654:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   4e656:	2210      	movs	r2, #16
   4e658:	3101      	adds	r1, #1
   4e65a:	f10d 0007 	add.w	r0, sp, #7
   4e65e:	f7fd fb82 	bl	4bd66 <memcpy>
		value_len += 16U;
   4e662:	2413      	movs	r4, #19
   4e664:	e7e7      	b.n	4e636 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e666:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   4e66a:	e7f1      	b.n	4e650 <bt_gatt_attr_read_chrc+0x46>

0004e66c <bt_gatt_foreach_attr>:
{
   4e66c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   4e66e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   4e672:	2300      	movs	r3, #0
   4e674:	9300      	str	r3, [sp, #0]
   4e676:	461a      	mov	r2, r3
   4e678:	f7e3 fa16 	bl	31aa8 <bt_gatt_foreach_attr_type>
}
   4e67c:	b005      	add	sp, #20
   4e67e:	f85d fb04 	ldr.w	pc, [sp], #4

0004e682 <bt_gatt_check_perm>:
{
   4e682:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   4e684:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   4e686:	7c8b      	ldrb	r3, [r1, #18]
{
   4e688:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   4e68a:	d504      	bpl.n	4e696 <bt_gatt_check_perm+0x14>
   4e68c:	f013 0f15 	tst.w	r3, #21
   4e690:	d01e      	beq.n	4e6d0 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   4e692:	6848      	ldr	r0, [r1, #4]
   4e694:	b1e0      	cbz	r0, 4e6d0 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   4e696:	0790      	lsls	r0, r2, #30
   4e698:	d504      	bpl.n	4e6a4 <bt_gatt_check_perm+0x22>
   4e69a:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   4e69e:	d019      	beq.n	4e6d4 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   4e6a0:	6889      	ldr	r1, [r1, #8]
   4e6a2:	b1b9      	cbz	r1, 4e6d4 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   4e6a4:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   4e6a8:	f014 0f30 	tst.w	r4, #48	; 0x30
   4e6ac:	d103      	bne.n	4e6b6 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   4e6ae:	f014 000c 	ands.w	r0, r4, #12
   4e6b2:	d107      	bne.n	4e6c4 <bt_gatt_check_perm+0x42>
}
   4e6b4:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   4e6b6:	4628      	mov	r0, r5
   4e6b8:	f7fe fc36 	bl	4cf28 <bt_conn_get_security>
   4e6bc:	2802      	cmp	r0, #2
   4e6be:	d8f6      	bhi.n	4e6ae <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   4e6c0:	2005      	movs	r0, #5
   4e6c2:	e7f7      	b.n	4e6b4 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   4e6c4:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   4e6c6:	2b00      	cmp	r3, #0
   4e6c8:	bf14      	ite	ne
   4e6ca:	2000      	movne	r0, #0
   4e6cc:	200f      	moveq	r0, #15
   4e6ce:	e7f1      	b.n	4e6b4 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   4e6d0:	2002      	movs	r0, #2
   4e6d2:	e7ef      	b.n	4e6b4 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   4e6d4:	2003      	movs	r0, #3
   4e6d6:	e7ed      	b.n	4e6b4 <bt_gatt_check_perm+0x32>

0004e6d8 <gatt_notify>:
{
   4e6d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4e6dc:	4614      	mov	r4, r2
   4e6de:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   4e6e0:	2214      	movs	r2, #20
   4e6e2:	6861      	ldr	r1, [r4, #4]
{
   4e6e4:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   4e6e6:	f7ff ffcc 	bl	4e682 <bt_gatt_check_perm>
   4e6ea:	bb08      	cbnz	r0, 4e730 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   4e6ec:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   4e6ee:	211b      	movs	r1, #27
   4e6f0:	3202      	adds	r2, #2
   4e6f2:	4638      	mov	r0, r7
   4e6f4:	f7ff f9f6 	bl	4dae4 <bt_att_create_pdu>
	if (!buf) {
   4e6f8:	4605      	mov	r5, r0
   4e6fa:	b1e8      	cbz	r0, 4e738 <gatt_notify+0x60>
	return net_buf_simple_add(&buf->b, len);
   4e6fc:	f100 0908 	add.w	r9, r0, #8
   4e700:	2102      	movs	r1, #2
   4e702:	4648      	mov	r0, r9
   4e704:	f001 fb10 	bl	4fd28 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   4e708:	4606      	mov	r6, r0
   4e70a:	89a1      	ldrh	r1, [r4, #12]
   4e70c:	f826 8b02 	strh.w	r8, [r6], #2
   4e710:	4648      	mov	r0, r9
   4e712:	f001 fb09 	bl	4fd28 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   4e716:	89a2      	ldrh	r2, [r4, #12]
   4e718:	68a1      	ldr	r1, [r4, #8]
   4e71a:	4630      	mov	r0, r6
   4e71c:	f7fd fb23 	bl	4bd66 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   4e720:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   4e724:	4629      	mov	r1, r5
   4e726:	4638      	mov	r0, r7
}
   4e728:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   4e72c:	f7ff ba94 	b.w	4dc58 <bt_att_send>
		return -EPERM;
   4e730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   4e734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   4e738:	f06f 000b 	mvn.w	r0, #11
   4e73c:	e7fa      	b.n	4e734 <gatt_notify+0x5c>

0004e73e <gatt_discover_next>:
{
   4e73e:	b570      	push	{r4, r5, r6, lr}
	if (!last_handle)
   4e740:	460b      	mov	r3, r1
{
   4e742:	4605      	mov	r5, r0
   4e744:	4614      	mov	r4, r2
	if (!last_handle)
   4e746:	b929      	cbnz	r1, 4e754 <gatt_discover_next+0x16>
	if (!bt_gatt_discover(conn, params)) {
   4e748:	4621      	mov	r1, r4
   4e74a:	4628      	mov	r0, r5
   4e74c:	f7e3 fd48 	bl	321e0 <bt_gatt_discover>
   4e750:	b928      	cbnz	r0, 4e75e <gatt_discover_next+0x20>
}
   4e752:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   4e754:	f64f 72ff 	movw	r2, #65535	; 0xffff
   4e758:	4291      	cmp	r1, r2
   4e75a:	d107      	bne.n	4e76c <gatt_discover_next+0x2e>
	params->start_handle = last_handle;
   4e75c:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   4e75e:	6863      	ldr	r3, [r4, #4]
   4e760:	4622      	mov	r2, r4
   4e762:	4628      	mov	r0, r5
   4e764:	2100      	movs	r1, #0
}
   4e766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   4e76a:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   4e76c:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   4e76e:	3301      	adds	r3, #1
   4e770:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   4e772:	429a      	cmp	r2, r3
		params->start_handle++;
   4e774:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   4e776:	d2e7      	bcs.n	4e748 <gatt_discover_next+0xa>
   4e778:	e7f1      	b.n	4e75e <gatt_discover_next+0x20>

0004e77a <gatt_find_type_rsp>:
{
   4e77a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4e77e:	b088      	sub	sp, #32
   4e780:	4607      	mov	r7, r0
   4e782:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   4e786:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   4e788:	b911      	cbnz	r1, 4e790 <gatt_find_type_rsp+0x16>
   4e78a:	f013 0803 	ands.w	r8, r3, #3
   4e78e:	d008      	beq.n	4e7a2 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   4e790:	f8d9 3004 	ldr.w	r3, [r9, #4]
   4e794:	464a      	mov	r2, r9
   4e796:	2100      	movs	r1, #0
   4e798:	4638      	mov	r0, r7
}
   4e79a:	b008      	add	sp, #32
   4e79c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   4e7a0:	4718      	bx	r3
	for (uint8_t i = 0U; i < count; i++) {
   4e7a2:	f3c3 0387 	ubfx	r3, r3, #2, #8
   4e7a6:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   4e7aa:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   4e7ac:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   4e7b0:	42ac      	cmp	r4, r5
   4e7b2:	d107      	bne.n	4e7c4 <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   4e7b4:	464a      	mov	r2, r9
   4e7b6:	4641      	mov	r1, r8
   4e7b8:	4638      	mov	r0, r7
}
   4e7ba:	b008      	add	sp, #32
   4e7bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   4e7c0:	f7ff bfbd 	b.w	4e73e <gatt_discover_next>
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   4e7c4:	8863      	ldrh	r3, [r4, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4e7c6:	f899 1010 	ldrb.w	r1, [r9, #16]
		value.end_handle = end_handle;
   4e7ca:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   4e7ce:	2900      	cmp	r1, #0
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   4e7d0:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   4e7d4:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   4e7d8:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   4e7da:	9301      	str	r3, [sp, #4]
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   4e7dc:	bf14      	ite	ne
   4e7de:	4651      	movne	r1, sl
   4e7e0:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   4e7e4:	ab01      	add	r3, sp, #4
   4e7e6:	f8ad 1002 	strh.w	r1, [sp, #2]
   4e7ea:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   4e7ec:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   4e7f0:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4e7f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   4e7f8:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   4e7fc:	f8cd d00c 	str.w	sp, [sp, #12]
   4e800:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4e804:	464a      	mov	r2, r9
   4e806:	a903      	add	r1, sp, #12
   4e808:	4638      	mov	r0, r7
   4e80a:	4798      	blx	r3
   4e80c:	3404      	adds	r4, #4
   4e80e:	2800      	cmp	r0, #0
   4e810:	d1ce      	bne.n	4e7b0 <gatt_find_type_rsp+0x36>
}
   4e812:	b008      	add	sp, #32
   4e814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004e818 <gatt_read_group_rsp>:
{
   4e818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4e81c:	b08f      	sub	sp, #60	; 0x3c
   4e81e:	4681      	mov	r9, r0
   4e820:	9d18      	ldr	r5, [sp, #96]	; 0x60
   4e822:	4617      	mov	r7, r2
	if (err) {
   4e824:	b131      	cbz	r1, 4e834 <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   4e826:	686b      	ldr	r3, [r5, #4]
   4e828:	462a      	mov	r2, r5
   4e82a:	2100      	movs	r1, #0
}
   4e82c:	b00f      	add	sp, #60	; 0x3c
   4e82e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   4e832:	4718      	bx	r3
	switch (rsp->len) {
   4e834:	7812      	ldrb	r2, [r2, #0]
   4e836:	2a06      	cmp	r2, #6
   4e838:	d002      	beq.n	4e840 <gatt_read_group_rsp+0x28>
   4e83a:	2a14      	cmp	r2, #20
   4e83c:	d10d      	bne.n	4e85a <gatt_read_group_rsp+0x42>
   4e83e:	2102      	movs	r1, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
   4e840:	3b01      	subs	r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   4e842:	f88d 1010 	strb.w	r1, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
   4e846:	b29c      	uxth	r4, r3
   4e848:	f107 0801 	add.w	r8, r7, #1
	uint16_t start_handle, end_handle = 0U;
   4e84c:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   4e84e:	783b      	ldrb	r3, [r7, #0]
   4e850:	42a3      	cmp	r3, r4
   4e852:	d90a      	bls.n	4e86a <gatt_read_group_rsp+0x52>
	if (length == 0U && end_handle) {
   4e854:	b90c      	cbnz	r4, 4e85a <gatt_read_group_rsp+0x42>
   4e856:	2e00      	cmp	r6, #0
   4e858:	d150      	bne.n	4e8fc <gatt_read_group_rsp+0xe4>
	params->func(conn, NULL, params);
   4e85a:	686b      	ldr	r3, [r5, #4]
   4e85c:	462a      	mov	r2, r5
   4e85e:	2100      	movs	r1, #0
   4e860:	4648      	mov	r0, r9
   4e862:	4798      	blx	r3
}
   4e864:	b00f      	add	sp, #60	; 0x3c
   4e866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct bt_gatt_attr attr = {};
   4e86a:	2214      	movs	r2, #20
   4e86c:	2100      	movs	r1, #0
   4e86e:	a809      	add	r0, sp, #36	; 0x24
   4e870:	f7fd fa84 	bl	4bd7c <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   4e874:	f8b8 a000 	ldrh.w	sl, [r8]
   4e878:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   4e87c:	2b00      	cmp	r3, #0
   4e87e:	d0ec      	beq.n	4e85a <gatt_read_group_rsp+0x42>
		end_handle = sys_le16_to_cpu(data->end_handle);
   4e880:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   4e884:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   4e888:	2e00      	cmp	r6, #0
   4e88a:	d0e6      	beq.n	4e85a <gatt_read_group_rsp+0x42>
   4e88c:	42b3      	cmp	r3, r6
   4e88e:	d8e4      	bhi.n	4e85a <gatt_read_group_rsp+0x42>
		switch (u.uuid.type) {
   4e890:	f89d 3010 	ldrb.w	r3, [sp, #16]
   4e894:	b323      	cbz	r3, 4e8e0 <gatt_read_group_rsp+0xc8>
   4e896:	2b02      	cmp	r3, #2
   4e898:	d02a      	beq.n	4e8f0 <gatt_read_group_rsp+0xd8>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   4e89a:	f04f 0300 	mov.w	r3, #0
   4e89e:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4e8a2:	7c2b      	ldrb	r3, [r5, #16]
		value.end_handle = end_handle;
   4e8a4:	f8ad b00c 	strh.w	fp, [sp, #12]
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   4e8a8:	2b00      	cmp	r3, #0
   4e8aa:	f642 0301 	movw	r3, #10241	; 0x2801
   4e8ae:	bf08      	it	eq
   4e8b0:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   4e8b4:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   4e8b8:	ab04      	add	r3, sp, #16
   4e8ba:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   4e8bc:	ab01      	add	r3, sp, #4
   4e8be:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   4e8c0:	ab02      	add	r3, sp, #8
   4e8c2:	930c      	str	r3, [sp, #48]	; 0x30
		attr.handle = start_handle;
   4e8c4:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4e8c8:	686b      	ldr	r3, [r5, #4]
   4e8ca:	462a      	mov	r2, r5
   4e8cc:	a909      	add	r1, sp, #36	; 0x24
   4e8ce:	4648      	mov	r0, r9
   4e8d0:	4798      	blx	r3
   4e8d2:	2800      	cmp	r0, #0
   4e8d4:	d0c6      	beq.n	4e864 <gatt_read_group_rsp+0x4c>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   4e8d6:	783b      	ldrb	r3, [r7, #0]
   4e8d8:	1ae4      	subs	r4, r4, r3
   4e8da:	b2a4      	uxth	r4, r4
   4e8dc:	4498      	add	r8, r3
   4e8de:	e7b6      	b.n	4e84e <gatt_read_group_rsp+0x36>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   4e8e0:	2202      	movs	r2, #2
   4e8e2:	f108 0104 	add.w	r1, r8, #4
   4e8e6:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   4e8ea:	f7fd fa3c 	bl	4bd66 <memcpy>
			break;
   4e8ee:	e7d4      	b.n	4e89a <gatt_read_group_rsp+0x82>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   4e8f0:	2210      	movs	r2, #16
   4e8f2:	f108 0104 	add.w	r1, r8, #4
   4e8f6:	f10d 0011 	add.w	r0, sp, #17
   4e8fa:	e7f6      	b.n	4e8ea <gatt_read_group_rsp+0xd2>
	gatt_discover_next(conn, handle, params);
   4e8fc:	462a      	mov	r2, r5
   4e8fe:	4631      	mov	r1, r6
   4e900:	4648      	mov	r0, r9
}
   4e902:	b00f      	add	sp, #60	; 0x3c
   4e904:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   4e908:	f7ff bf19 	b.w	4e73e <gatt_discover_next>

0004e90c <read_included_uuid_cb>:
{
   4e90c:	b570      	push	{r4, r5, r6, lr}
   4e90e:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
   4e910:	2b10      	cmp	r3, #16
{
   4e912:	4611      	mov	r1, r2
   4e914:	9c12      	ldr	r4, [sp, #72]	; 0x48
   4e916:	4605      	mov	r5, r0
   4e918:	461a      	mov	r2, r3
	if (length != 16U) {
   4e91a:	d006      	beq.n	4e92a <read_included_uuid_cb+0x1e>
		params->func(conn, NULL, params);
   4e91c:	6863      	ldr	r3, [r4, #4]
   4e91e:	4622      	mov	r2, r4
   4e920:	2100      	movs	r1, #0
}
   4e922:	b00e      	add	sp, #56	; 0x38
   4e924:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
   4e928:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   4e92a:	8963      	ldrh	r3, [r4, #10]
   4e92c:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   4e930:	89a3      	ldrh	r3, [r4, #12]
   4e932:	f8ad 300e 	strh.w	r3, [sp, #14]
	value.uuid = &u.uuid;
   4e936:	ae04      	add	r6, sp, #16
	u.uuid.type = BT_UUID_TYPE_128;
   4e938:	2302      	movs	r3, #2
	memcpy(u.u128.val, pdu, length);
   4e93a:	f10d 0011 	add.w	r0, sp, #17
	value.uuid = &u.uuid;
   4e93e:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   4e940:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   4e944:	f7fd fa0f 	bl	4bd66 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   4e948:	6821      	ldr	r1, [r4, #0]
   4e94a:	b9c9      	cbnz	r1, 4e980 <read_included_uuid_cb+0x74>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   4e94c:	f642 0202 	movw	r2, #10242	; 0x2802
   4e950:	2300      	movs	r3, #0
   4e952:	f8ad 2006 	strh.w	r2, [sp, #6]
   4e956:	aa01      	add	r2, sp, #4
   4e958:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   4e95c:	f88d 3004 	strb.w	r3, [sp, #4]
   4e960:	aa02      	add	r2, sp, #8
   4e962:	930b      	str	r3, [sp, #44]	; 0x2c
   4e964:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   4e968:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   4e96a:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   4e96c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4e970:	4622      	mov	r2, r4
   4e972:	6863      	ldr	r3, [r4, #4]
   4e974:	a909      	add	r1, sp, #36	; 0x24
   4e976:	4628      	mov	r0, r5
   4e978:	4798      	blx	r3
   4e97a:	b930      	cbnz	r0, 4e98a <read_included_uuid_cb+0x7e>
}
   4e97c:	b00e      	add	sp, #56	; 0x38
   4e97e:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   4e980:	4630      	mov	r0, r6
   4e982:	f7fd fade 	bl	4bf42 <bt_uuid_cmp>
   4e986:	2800      	cmp	r0, #0
   4e988:	d0e0      	beq.n	4e94c <read_included_uuid_cb+0x40>
	gatt_discover_next(conn, params->start_handle, params);
   4e98a:	8921      	ldrh	r1, [r4, #8]
   4e98c:	4622      	mov	r2, r4
   4e98e:	4628      	mov	r0, r5
   4e990:	f7ff fed5 	bl	4e73e <gatt_discover_next>
	return;
   4e994:	e7f2      	b.n	4e97c <read_included_uuid_cb+0x70>

0004e996 <gatt_find_info_rsp>:
{
   4e996:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4e99a:	b08f      	sub	sp, #60	; 0x3c
   4e99c:	4680      	mov	r8, r0
   4e99e:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   4e9a0:	2900      	cmp	r1, #0
   4e9a2:	f040 8094 	bne.w	4eace <gatt_find_info_rsp+0x138>
	switch (rsp->format) {
   4e9a6:	7810      	ldrb	r0, [r2, #0]
   4e9a8:	2801      	cmp	r0, #1
   4e9aa:	d01e      	beq.n	4e9ea <gatt_find_info_rsp+0x54>
   4e9ac:	2802      	cmp	r0, #2
   4e9ae:	f040 808e 	bne.w	4eace <gatt_find_info_rsp+0x138>
   4e9b2:	4601      	mov	r1, r0
		len = sizeof(*info.i128);
   4e9b4:	f04f 0a12 	mov.w	sl, #18
	length--;
   4e9b8:	3b01      	subs	r3, #1
   4e9ba:	b29b      	uxth	r3, r3
	if (length < len) {
   4e9bc:	4553      	cmp	r3, sl
		u.uuid.type = BT_UUID_TYPE_16;
   4e9be:	f88d 1010 	strb.w	r1, [sp, #16]
	if (length < len) {
   4e9c2:	f0c0 8084 	bcc.w	4eace <gatt_find_info_rsp+0x138>
	for (i = length / len, pdu = rsp->info; i != 0;
   4e9c6:	fbb3 fbfa 	udiv	fp, r3, sl
	bool skip = false;
   4e9ca:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   4e9ce:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
   4e9d0:	f8cd 9000 	str.w	r9, [sp]
			skip = false;
   4e9d4:	464d      	mov	r5, r9
   4e9d6:	af04      	add	r7, sp, #16
	for (i = length / len, pdu = rsp->info; i != 0;
   4e9d8:	f1bb 0f00 	cmp.w	fp, #0
   4e9dc:	d108      	bne.n	4e9f0 <gatt_find_info_rsp+0x5a>
	gatt_discover_next(conn, handle, params);
   4e9de:	9900      	ldr	r1, [sp, #0]
   4e9e0:	4632      	mov	r2, r6
   4e9e2:	4640      	mov	r0, r8
   4e9e4:	f7ff feab 	bl	4e73e <gatt_discover_next>
	return;
   4e9e8:	e06e      	b.n	4eac8 <gatt_find_info_rsp+0x132>
	switch (rsp->format) {
   4e9ea:	f04f 0a04 	mov.w	sl, #4
   4e9ee:	e7e3      	b.n	4e9b8 <gatt_find_info_rsp+0x22>
		handle = sys_le16_to_cpu(info.i16->handle);
   4e9f0:	8823      	ldrh	r3, [r4, #0]
   4e9f2:	9301      	str	r3, [sp, #4]
   4e9f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   4e9f8:	9300      	str	r3, [sp, #0]
		if (skip) {
   4e9fa:	f1b9 0f00 	cmp.w	r9, #0
   4e9fe:	d14c      	bne.n	4ea9a <gatt_find_info_rsp+0x104>
		switch (u.uuid.type) {
   4ea00:	f89d 3010 	ldrb.w	r3, [sp, #16]
   4ea04:	b3b3      	cbz	r3, 4ea74 <gatt_find_info_rsp+0xde>
   4ea06:	2b02      	cmp	r3, #2
   4ea08:	d03b      	beq.n	4ea82 <gatt_find_info_rsp+0xec>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   4ea0a:	6831      	ldr	r1, [r6, #0]
   4ea0c:	2900      	cmp	r1, #0
   4ea0e:	d13f      	bne.n	4ea90 <gatt_find_info_rsp+0xfa>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   4ea10:	7c33      	ldrb	r3, [r6, #16]
   4ea12:	2b04      	cmp	r3, #4
   4ea14:	d147      	bne.n	4eaa6 <gatt_find_info_rsp+0x110>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   4ea16:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   4ea1a:	a902      	add	r1, sp, #8
   4ea1c:	4638      	mov	r0, r7
   4ea1e:	f88d 5008 	strb.w	r5, [sp, #8]
   4ea22:	f8ad 300a 	strh.w	r3, [sp, #10]
   4ea26:	f7fd fa8c 	bl	4bf42 <bt_uuid_cmp>
   4ea2a:	b3b0      	cbz	r0, 4ea9a <gatt_find_info_rsp+0x104>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   4ea2c:	f642 0301 	movw	r3, #10241	; 0x2801
   4ea30:	a903      	add	r1, sp, #12
   4ea32:	4638      	mov	r0, r7
   4ea34:	f88d 500c 	strb.w	r5, [sp, #12]
   4ea38:	f8ad 300e 	strh.w	r3, [sp, #14]
   4ea3c:	f7fd fa81 	bl	4bf42 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   4ea40:	b358      	cbz	r0, 4ea9a <gatt_find_info_rsp+0x104>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   4ea42:	f642 0302 	movw	r3, #10242	; 0x2802
   4ea46:	a909      	add	r1, sp, #36	; 0x24
   4ea48:	4638      	mov	r0, r7
   4ea4a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   4ea4e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   4ea52:	f7fd fa76 	bl	4bf42 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   4ea56:	b300      	cbz	r0, 4ea9a <gatt_find_info_rsp+0x104>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   4ea58:	f642 0303 	movw	r3, #10243	; 0x2803
   4ea5c:	a909      	add	r1, sp, #36	; 0x24
   4ea5e:	4638      	mov	r0, r7
   4ea60:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   4ea64:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   4ea68:	f7fd fa6b 	bl	4bf42 <bt_uuid_cmp>
   4ea6c:	b9d8      	cbnz	r0, 4eaa6 <gatt_find_info_rsp+0x110>
				skip = true;
   4ea6e:	f04f 0901 	mov.w	r9, #1
   4ea72:	e014      	b.n	4ea9e <gatt_find_info_rsp+0x108>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   4ea74:	78a3      	ldrb	r3, [r4, #2]
   4ea76:	78e2      	ldrb	r2, [r4, #3]
   4ea78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4ea7c:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   4ea80:	e7c3      	b.n	4ea0a <gatt_find_info_rsp+0x74>
			memcpy(u.u128.val, info.i128->uuid, 16);
   4ea82:	2210      	movs	r2, #16
   4ea84:	1ca1      	adds	r1, r4, #2
   4ea86:	f10d 0011 	add.w	r0, sp, #17
   4ea8a:	f7fd f96c 	bl	4bd66 <memcpy>
			break;
   4ea8e:	e7bc      	b.n	4ea0a <gatt_find_info_rsp+0x74>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   4ea90:	4638      	mov	r0, r7
   4ea92:	f7fd fa56 	bl	4bf42 <bt_uuid_cmp>
   4ea96:	2800      	cmp	r0, #0
   4ea98:	d0ba      	beq.n	4ea10 <gatt_find_info_rsp+0x7a>
			skip = false;
   4ea9a:	f04f 0900 	mov.w	r9, #0
	     i--, pdu = (const uint8_t *)pdu + len) {
   4ea9e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   4eaa2:	4454      	add	r4, sl
   4eaa4:	e798      	b.n	4e9d8 <gatt_find_info_rsp+0x42>
		attr.handle = handle;
   4eaa6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   4eaaa:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   4eaae:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   4eab2:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4eab6:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   4eab8:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4eabc:	4632      	mov	r2, r6
   4eabe:	a909      	add	r1, sp, #36	; 0x24
   4eac0:	4640      	mov	r0, r8
   4eac2:	4798      	blx	r3
   4eac4:	2800      	cmp	r0, #0
   4eac6:	d1ea      	bne.n	4ea9e <gatt_find_info_rsp+0x108>
}
   4eac8:	b00f      	add	sp, #60	; 0x3c
   4eaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	params->func(conn, NULL, params);
   4eace:	6873      	ldr	r3, [r6, #4]
   4ead0:	4632      	mov	r2, r6
   4ead2:	2100      	movs	r1, #0
   4ead4:	4640      	mov	r0, r8
   4ead6:	4798      	blx	r3
   4ead8:	e7f6      	b.n	4eac8 <gatt_find_info_rsp+0x132>

0004eada <bt_gatt_write_without_response_cb>:
{
   4eada:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   4eade:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   4eae0:	7b42      	ldrb	r2, [r0, #13]
   4eae2:	2a07      	cmp	r2, #7
{
   4eae4:	461e      	mov	r6, r3
   4eae6:	e9dd 9a0d 	ldrd	r9, sl, [sp, #52]	; 0x34
   4eaea:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   4eaee:	4605      	mov	r5, r0
   4eaf0:	4688      	mov	r8, r1
	if (conn->state != BT_CONN_CONNECTED) {
   4eaf2:	d132      	bne.n	4eb5a <bt_gatt_write_without_response_cb+0x80>
	if (conn->encrypt) {
   4eaf4:	7ac2      	ldrb	r2, [r0, #11]
   4eaf6:	bb1a      	cbnz	r2, 4eb40 <bt_gatt_write_without_response_cb+0x66>
	if (sign) {
   4eaf8:	b313      	cbz	r3, 4eb40 <bt_gatt_write_without_response_cb+0x66>
		buf = bt_att_create_pdu(conn, BT_ATT_OP_SIGNED_WRITE_CMD,
   4eafa:	f106 020e 	add.w	r2, r6, #14
   4eafe:	21d2      	movs	r1, #210	; 0xd2
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
   4eb00:	f7fe fff0 	bl	4dae4 <bt_att_create_pdu>
   4eb04:	4604      	mov	r4, r0
	if (!buf) {
   4eb06:	b1b0      	cbz	r0, 4eb36 <bt_gatt_write_without_response_cb+0x5c>
   4eb08:	2102      	movs	r1, #2
   4eb0a:	3008      	adds	r0, #8
   4eb0c:	f001 f90c 	bl	4fd28 <net_buf_simple_add>
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   4eb10:	2300      	movs	r3, #0
	cmd->handle = sys_cpu_to_le16(handle);
   4eb12:	f8a0 8000 	strh.w	r8, [r0]
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   4eb16:	2200      	movs	r2, #0
   4eb18:	e9cd 3302 	strd	r3, r3, [sp, #8]
   4eb1c:	2300      	movs	r3, #0
   4eb1e:	e9cd 2300 	strd	r2, r3, [sp]
   4eb22:	4631      	mov	r1, r6
   4eb24:	463a      	mov	r2, r7
   4eb26:	4620      	mov	r0, r4
   4eb28:	f7f4 ffa6 	bl	43a78 <net_buf_append_bytes>
	if (write != length) {
   4eb2c:	42b0      	cmp	r0, r6
   4eb2e:	d00b      	beq.n	4eb48 <bt_gatt_write_without_response_cb+0x6e>
		net_buf_unref(buf);
   4eb30:	4620      	mov	r0, r4
   4eb32:	f7f4 ff6f 	bl	43a14 <net_buf_unref>
		return -ENOMEM;
   4eb36:	f06f 000b 	mvn.w	r0, #11
}
   4eb3a:	b004      	add	sp, #16
   4eb3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
   4eb40:	1cb2      	adds	r2, r6, #2
   4eb42:	2152      	movs	r1, #82	; 0x52
   4eb44:	4628      	mov	r0, r5
   4eb46:	e7db      	b.n	4eb00 <bt_gatt_write_without_response_cb+0x26>
	return bt_att_send(conn, buf, func, user_data);
   4eb48:	4653      	mov	r3, sl
   4eb4a:	464a      	mov	r2, r9
   4eb4c:	4621      	mov	r1, r4
   4eb4e:	4628      	mov	r0, r5
}
   4eb50:	b004      	add	sp, #16
   4eb52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, func, user_data);
   4eb56:	f7ff b87f 	b.w	4dc58 <bt_att_send>
		return -ENOTCONN;
   4eb5a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4eb5e:	e7ec      	b.n	4eb3a <bt_gatt_write_without_response_cb+0x60>

0004eb60 <gatt_ccc_discover_cb>:
{
   4eb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4eb62:	4605      	mov	r5, r0
	struct bt_gatt_subscribe_params *sub_params = params->sub_params;
   4eb64:	6954      	ldr	r4, [r2, #20]
{
   4eb66:	4610      	mov	r0, r2
	if (!attr) {
   4eb68:	460e      	mov	r6, r1
   4eb6a:	b951      	cbnz	r1, 4eb82 <gatt_ccc_discover_cb+0x22>
		memset(params, 0, sizeof(*params));
   4eb6c:	2218      	movs	r2, #24
   4eb6e:	f7fd f905 	bl	4bd7c <memset>
		sub_params->notify(conn, sub_params, NULL, 0);
   4eb72:	6827      	ldr	r7, [r4, #0]
   4eb74:	4633      	mov	r3, r6
   4eb76:	4632      	mov	r2, r6
   4eb78:	4621      	mov	r1, r4
   4eb7a:	4628      	mov	r0, r5
   4eb7c:	47b8      	blx	r7
		return BT_GATT_ITER_STOP;
   4eb7e:	2000      	movs	r0, #0
}
   4eb80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   4eb82:	7c13      	ldrb	r3, [r2, #16]
   4eb84:	2b04      	cmp	r3, #4
   4eb86:	d112      	bne.n	4ebae <gatt_ccc_discover_cb+0x4e>
		memset(params, 0, sizeof(*params));
   4eb88:	2100      	movs	r1, #0
   4eb8a:	2218      	movs	r2, #24
   4eb8c:	f7fd f8f6 	bl	4bd7c <memset>
		sub_params->ccc_handle = attr->handle;
   4eb90:	8a33      	ldrh	r3, [r6, #16]
   4eb92:	8163      	strh	r3, [r4, #10]
		if (bt_gatt_subscribe(conn, sub_params)) {
   4eb94:	4621      	mov	r1, r4
   4eb96:	4628      	mov	r0, r5
   4eb98:	f7e3 fd28 	bl	325ec <bt_gatt_subscribe>
   4eb9c:	2800      	cmp	r0, #0
   4eb9e:	d0ee      	beq.n	4eb7e <gatt_ccc_discover_cb+0x1e>
			sub_params->notify(conn, sub_params, NULL, 0);
   4eba0:	2300      	movs	r3, #0
   4eba2:	6826      	ldr	r6, [r4, #0]
   4eba4:	461a      	mov	r2, r3
   4eba6:	4621      	mov	r1, r4
   4eba8:	4628      	mov	r0, r5
   4ebaa:	47b0      	blx	r6
   4ebac:	e7e7      	b.n	4eb7e <gatt_ccc_discover_cb+0x1e>
	return BT_GATT_ITER_CONTINUE;
   4ebae:	2001      	movs	r0, #1
   4ebb0:	e7e6      	b.n	4eb80 <gatt_ccc_discover_cb+0x20>

0004ebb2 <bt_gatt_cancel>:
{
   4ebb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4ebb4:	4604      	mov	r4, r0
   4ebb6:	460d      	mov	r5, r1
	k_sched_lock();
   4ebb8:	f7f9 fef0 	bl	4899c <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   4ebbc:	4629      	mov	r1, r5
   4ebbe:	4620      	mov	r0, r4
   4ebc0:	f7ff f8a6 	bl	4dd10 <bt_att_find_req_by_user_data>
	if (req) {
   4ebc4:	4601      	mov	r1, r0
   4ebc6:	b920      	cbnz	r0, 4ebd2 <bt_gatt_cancel+0x20>
}
   4ebc8:	b002      	add	sp, #8
   4ebca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   4ebce:	f7f9 bef9 	b.w	489c4 <k_sched_unlock>
		func = req->func;
   4ebd2:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   4ebd4:	4620      	mov	r0, r4
   4ebd6:	f7e2 fbcf 	bl	31378 <bt_att_req_cancel>
	k_sched_unlock();
   4ebda:	f7f9 fef3 	bl	489c4 <k_sched_unlock>
	if (func) {
   4ebde:	b12e      	cbz	r6, 4ebec <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   4ebe0:	2300      	movs	r3, #0
   4ebe2:	9500      	str	r5, [sp, #0]
   4ebe4:	461a      	mov	r2, r3
   4ebe6:	210e      	movs	r1, #14
   4ebe8:	4620      	mov	r0, r4
   4ebea:	47b0      	blx	r6
}
   4ebec:	b002      	add	sp, #8
   4ebee:	bd70      	pop	{r4, r5, r6, pc}

0004ebf0 <bt_gatt_unsubscribe>:
{
   4ebf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   4ebf4:	7b43      	ldrb	r3, [r0, #13]
   4ebf6:	2b07      	cmp	r3, #7
{
   4ebf8:	4607      	mov	r7, r0
   4ebfa:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   4ebfc:	d159      	bne.n	4ecb2 <bt_gatt_unsubscribe+0xc2>
	sub = gatt_sub_find(conn);
   4ebfe:	f7e2 fc35 	bl	3146c <gatt_sub_find>
	if (!sub) {
   4ec02:	4606      	mov	r6, r0
   4ec04:	2800      	cmp	r0, #0
   4ec06:	d057      	beq.n	4ecb8 <bt_gatt_unsubscribe+0xc8>
	return list->head;
   4ec08:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   4ec0a:	2c00      	cmp	r4, #0
   4ec0c:	d054      	beq.n	4ecb8 <bt_gatt_unsubscribe+0xc8>
   4ec0e:	2300      	movs	r3, #0
   4ec10:	3c1c      	subs	r4, #28
   4ec12:	4698      	mov	r8, r3
		if (params == tmp) {
   4ec14:	42a5      	cmp	r5, r4
   4ec16:	d009      	beq.n	4ec2c <bt_gatt_unsubscribe+0x3c>
		if (tmp->value_handle == params->value_handle) {
   4ec18:	8921      	ldrh	r1, [r4, #8]
   4ec1a:	892a      	ldrh	r2, [r5, #8]
			has_subscription = true;
   4ec1c:	4291      	cmp	r1, r2
   4ec1e:	bf08      	it	eq
   4ec20:	f04f 0801 	moveq.w	r8, #1
	return node->next;
   4ec24:	69e4      	ldr	r4, [r4, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   4ec26:	b11c      	cbz	r4, 4ec30 <bt_gatt_unsubscribe+0x40>
   4ec28:	3c1c      	subs	r4, #28
   4ec2a:	e7f3      	b.n	4ec14 <bt_gatt_unsubscribe+0x24>
			found = true;
   4ec2c:	2301      	movs	r3, #1
   4ec2e:	e7f9      	b.n	4ec24 <bt_gatt_unsubscribe+0x34>
	if (!found) {
   4ec30:	2b00      	cmp	r3, #0
   4ec32:	d041      	beq.n	4ecb8 <bt_gatt_unsubscribe+0xc8>
	if (!has_subscription) {
   4ec34:	f1b8 0f00 	cmp.w	r8, #0
   4ec38:	d022      	beq.n	4ec80 <bt_gatt_unsubscribe+0x90>
	return list->head;
   4ec3a:	68b3      	ldr	r3, [r6, #8]
	sys_slist_find_and_remove(&sub->list, &params->node);
   4ec3c:	f105 021c 	add.w	r2, r5, #28
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4ec40:	b153      	cbz	r3, 4ec58 <bt_gatt_unsubscribe+0x68>
   4ec42:	429a      	cmp	r2, r3
   4ec44:	d12b      	bne.n	4ec9e <bt_gatt_unsubscribe+0xae>
	return node->next;
   4ec46:	69eb      	ldr	r3, [r5, #28]
	return list->tail;
   4ec48:	68f1      	ldr	r1, [r6, #12]
Z_GENLIST_REMOVE(slist, snode)
   4ec4a:	bb1c      	cbnz	r4, 4ec94 <bt_gatt_unsubscribe+0xa4>
   4ec4c:	4291      	cmp	r1, r2
	list->head = node;
   4ec4e:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   4ec50:	d100      	bne.n	4ec54 <bt_gatt_unsubscribe+0x64>
	list->tail = node;
   4ec52:	60f3      	str	r3, [r6, #12]
	parent->next = child;
   4ec54:	2300      	movs	r3, #0
   4ec56:	61eb      	str	r3, [r5, #28]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   4ec58:	f105 0018 	add.w	r0, r5, #24
   4ec5c:	f7ff f8a2 	bl	4dda4 <atomic_get>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   4ec60:	0743      	lsls	r3, r0, #29
   4ec62:	d503      	bpl.n	4ec6c <bt_gatt_unsubscribe+0x7c>
		bt_gatt_cancel(conn, params);
   4ec64:	4629      	mov	r1, r5
   4ec66:	4638      	mov	r0, r7
   4ec68:	f7ff ffa3 	bl	4ebb2 <bt_gatt_cancel>
	if (gatt_sub_is_empty(sub)) {
   4ec6c:	68b3      	ldr	r3, [r6, #8]
   4ec6e:	b913      	cbnz	r3, 4ec76 <bt_gatt_unsubscribe+0x86>
		gatt_sub_free(sub);
   4ec70:	4630      	mov	r0, r6
   4ec72:	f7ff f999 	bl	4dfa8 <gatt_sub_free>
	if (has_subscription) {
   4ec76:	f1b8 0f00 	cmp.w	r8, #0
   4ec7a:	d113      	bne.n	4eca4 <bt_gatt_unsubscribe+0xb4>
	return 0;
   4ec7c:	2000      	movs	r0, #0
   4ec7e:	e007      	b.n	4ec90 <bt_gatt_unsubscribe+0xa0>
		params->value = 0x0000;
   4ec80:	f8a5 8014 	strh.w	r8, [r5, #20]
		err = gatt_write_ccc(conn, params);
   4ec84:	4629      	mov	r1, r5
   4ec86:	4638      	mov	r0, r7
   4ec88:	f7e2 fd16 	bl	316b8 <gatt_write_ccc>
		if (err) {
   4ec8c:	2800      	cmp	r0, #0
   4ec8e:	d0d4      	beq.n	4ec3a <bt_gatt_unsubscribe+0x4a>
}
   4ec90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_REMOVE(slist, snode)
   4ec94:	4291      	cmp	r1, r2
	parent->next = child;
   4ec96:	6023      	str	r3, [r4, #0]
	list->tail = node;
   4ec98:	bf08      	it	eq
   4ec9a:	60f4      	streq	r4, [r6, #12]
}
   4ec9c:	e7da      	b.n	4ec54 <bt_gatt_unsubscribe+0x64>
	return node->next;
   4ec9e:	461c      	mov	r4, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4eca0:	681b      	ldr	r3, [r3, #0]
   4eca2:	e7cd      	b.n	4ec40 <bt_gatt_unsubscribe+0x50>
		params->notify(conn, params, NULL, 0);
   4eca4:	2300      	movs	r3, #0
   4eca6:	682c      	ldr	r4, [r5, #0]
   4eca8:	461a      	mov	r2, r3
   4ecaa:	4629      	mov	r1, r5
   4ecac:	4638      	mov	r0, r7
   4ecae:	47a0      	blx	r4
   4ecb0:	e7e4      	b.n	4ec7c <bt_gatt_unsubscribe+0x8c>
		return -ENOTCONN;
   4ecb2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4ecb6:	e7eb      	b.n	4ec90 <bt_gatt_unsubscribe+0xa0>
		return -EINVAL;
   4ecb8:	f06f 0015 	mvn.w	r0, #21
   4ecbc:	e7e8      	b.n	4ec90 <bt_gatt_unsubscribe+0xa0>

0004ecbe <bt_gatt_notification>:
{
   4ecbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4ecc2:	4680      	mov	r8, r0
   4ecc4:	460e      	mov	r6, r1
   4ecc6:	4691      	mov	r9, r2
   4ecc8:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   4ecca:	f7e2 fbcf 	bl	3146c <gatt_sub_find>
	if (!sub) {
   4ecce:	b300      	cbz	r0, 4ed12 <bt_gatt_notification+0x54>
	return list->head;
   4ecd0:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   4ecd2:	b1f4      	cbz	r4, 4ed12 <bt_gatt_notification+0x54>
	return node->next;
   4ecd4:	6825      	ldr	r5, [r4, #0]
   4ecd6:	b105      	cbz	r5, 4ecda <bt_gatt_notification+0x1c>
   4ecd8:	3d1c      	subs	r5, #28
		if (handle != params->value_handle) {
   4ecda:	f834 3c14 	ldrh.w	r3, [r4, #-20]
   4ecde:	42b3      	cmp	r3, r6
   4ece0:	d114      	bne.n	4ed0c <bt_gatt_notification+0x4e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   4ece2:	3c1c      	subs	r4, #28
   4ece4:	e007      	b.n	4ecf6 <bt_gatt_notification+0x38>
   4ece6:	462c      	mov	r4, r5
   4ece8:	69ed      	ldr	r5, [r5, #28]
   4ecea:	8923      	ldrh	r3, [r4, #8]
   4ecec:	b19d      	cbz	r5, 4ed16 <bt_gatt_notification+0x58>
		if (handle != params->value_handle) {
   4ecee:	42b3      	cmp	r3, r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   4ecf0:	f1a5 051c 	sub.w	r5, r5, #28
		if (handle != params->value_handle) {
   4ecf4:	d1f7      	bne.n	4ece6 <bt_gatt_notification+0x28>
		if (params->notify(conn, params, data, length) ==
   4ecf6:	6827      	ldr	r7, [r4, #0]
   4ecf8:	4653      	mov	r3, sl
   4ecfa:	464a      	mov	r2, r9
   4ecfc:	4621      	mov	r1, r4
   4ecfe:	4640      	mov	r0, r8
   4ed00:	47b8      	blx	r7
   4ed02:	b918      	cbnz	r0, 4ed0c <bt_gatt_notification+0x4e>
			bt_gatt_unsubscribe(conn, params);
   4ed04:	4621      	mov	r1, r4
   4ed06:	4640      	mov	r0, r8
   4ed08:	f7ff ff72 	bl	4ebf0 <bt_gatt_unsubscribe>
   4ed0c:	462c      	mov	r4, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   4ed0e:	2d00      	cmp	r5, #0
   4ed10:	d1ea      	bne.n	4ece8 <bt_gatt_notification+0x2a>
}
   4ed12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (handle != params->value_handle) {
   4ed16:	42b3      	cmp	r3, r6
   4ed18:	d0ed      	beq.n	4ecf6 <bt_gatt_notification+0x38>
   4ed1a:	e7fa      	b.n	4ed12 <bt_gatt_notification+0x54>

0004ed1c <bt_gatt_mult_notification>:
{
   4ed1c:	e92d 4eff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
   4ed20:	4681      	mov	r9, r0
   4ed22:	460c      	mov	r4, r1
   4ed24:	4615      	mov	r5, r2
	sub = gatt_sub_find(conn);
   4ed26:	f7e2 fba1 	bl	3146c <gatt_sub_find>
	if (!sub) {
   4ed2a:	4607      	mov	r7, r0
   4ed2c:	b140      	cbz	r0, 4ed40 <bt_gatt_mult_notification+0x24>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   4ed2e:	462a      	mov	r2, r5
   4ed30:	4621      	mov	r1, r4
   4ed32:	a801      	add	r0, sp, #4
   4ed34:	f000 ffaf 	bl	4fc96 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   4ed38:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   4ed3c:	2b04      	cmp	r3, #4
   4ed3e:	d802      	bhi.n	4ed46 <bt_gatt_mult_notification+0x2a>
}
   4ed40:	b004      	add	sp, #16
   4ed42:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   4ed46:	2104      	movs	r1, #4
   4ed48:	eb0d 0001 	add.w	r0, sp, r1
   4ed4c:	f001 f81d 	bl	4fd8a <net_buf_simple_pull_mem>
		if (len > buf.len) {
   4ed50:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   4ed54:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		handle = sys_cpu_to_le16(nfy->handle);
   4ed58:	f8b0 b000 	ldrh.w	fp, [r0]
		if (len > buf.len) {
   4ed5c:	4553      	cmp	r3, sl
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   4ed5e:	4606      	mov	r6, r0
		if (len > buf.len) {
   4ed60:	d3ee      	bcc.n	4ed40 <bt_gatt_mult_notification+0x24>
	return list->head;
   4ed62:	68bc      	ldr	r4, [r7, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   4ed64:	b1fc      	cbz	r4, 4eda6 <bt_gatt_mult_notification+0x8a>
	return node->next;
   4ed66:	6825      	ldr	r5, [r4, #0]
   4ed68:	b105      	cbz	r5, 4ed6c <bt_gatt_mult_notification+0x50>
   4ed6a:	3d1c      	subs	r5, #28
			if (handle != params->value_handle) {
   4ed6c:	f834 3c14 	ldrh.w	r3, [r4, #-20]
   4ed70:	455b      	cmp	r3, fp
   4ed72:	d115      	bne.n	4eda0 <bt_gatt_mult_notification+0x84>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   4ed74:	3c1c      	subs	r4, #28
   4ed76:	e007      	b.n	4ed88 <bt_gatt_mult_notification+0x6c>
   4ed78:	462c      	mov	r4, r5
   4ed7a:	69ed      	ldr	r5, [r5, #28]
   4ed7c:	8923      	ldrh	r3, [r4, #8]
   4ed7e:	b1bd      	cbz	r5, 4edb0 <bt_gatt_mult_notification+0x94>
			if (handle != params->value_handle) {
   4ed80:	455b      	cmp	r3, fp
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   4ed82:	f1a5 051c 	sub.w	r5, r5, #28
			if (handle != params->value_handle) {
   4ed86:	d1f7      	bne.n	4ed78 <bt_gatt_mult_notification+0x5c>
			if (params->notify(conn, params, nfy->value, len) ==
   4ed88:	f8d4 c000 	ldr.w	ip, [r4]
   4ed8c:	4653      	mov	r3, sl
   4ed8e:	1d32      	adds	r2, r6, #4
   4ed90:	4621      	mov	r1, r4
   4ed92:	4648      	mov	r0, r9
   4ed94:	47e0      	blx	ip
   4ed96:	b918      	cbnz	r0, 4eda0 <bt_gatt_mult_notification+0x84>
				bt_gatt_unsubscribe(conn, params);
   4ed98:	4621      	mov	r1, r4
   4ed9a:	4648      	mov	r0, r9
   4ed9c:	f7ff ff28 	bl	4ebf0 <bt_gatt_unsubscribe>
   4eda0:	462c      	mov	r4, r5
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   4eda2:	2d00      	cmp	r5, #0
   4eda4:	d1e9      	bne.n	4ed7a <bt_gatt_mult_notification+0x5e>
		net_buf_simple_pull_mem(&buf, len);
   4eda6:	4651      	mov	r1, sl
   4eda8:	a801      	add	r0, sp, #4
   4edaa:	f000 ffee 	bl	4fd8a <net_buf_simple_pull_mem>
   4edae:	e7c3      	b.n	4ed38 <bt_gatt_mult_notification+0x1c>
			if (handle != params->value_handle) {
   4edb0:	455b      	cmp	r3, fp
   4edb2:	d0e9      	beq.n	4ed88 <bt_gatt_mult_notification+0x6c>
   4edb4:	e7f7      	b.n	4eda6 <bt_gatt_mult_notification+0x8a>

0004edb6 <bt_gatt_change_aware>:
{
   4edb6:	b570      	push	{r4, r5, r6, lr}
   4edb8:	460e      	mov	r6, r1
	cfg = find_cf_cfg(conn);
   4edba:	f7e2 fb19 	bl	313f0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   4edbe:	b1c8      	cbz	r0, 4edf4 <bt_gatt_change_aware+0x3e>
   4edc0:	7a03      	ldrb	r3, [r0, #8]
   4edc2:	07da      	lsls	r2, r3, #31
   4edc4:	d516      	bpl.n	4edf4 <bt_gatt_change_aware+0x3e>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   4edc6:	f100 040c 	add.w	r4, r0, #12
   4edca:	4620      	mov	r0, r4
   4edcc:	f7fe ffea 	bl	4dda4 <atomic_get>
   4edd0:	f010 0501 	ands.w	r5, r0, #1
   4edd4:	d10e      	bne.n	4edf4 <bt_gatt_change_aware+0x3e>
	if (!req) {
   4edd6:	b176      	cbz	r6, 4edf6 <bt_gatt_change_aware+0x40>
   4edd8:	4620      	mov	r0, r4
   4edda:	f7fe ffe3 	bl	4dda4 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   4edde:	0783      	lsls	r3, r0, #30
   4ede0:	d50b      	bpl.n	4edfa <bt_gatt_change_aware+0x44>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4ede2:	f06f 0102 	mvn.w	r1, #2
   4ede6:	4620      	mov	r0, r4
   4ede8:	f7ff f93d 	bl	4e066 <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4edec:	2101      	movs	r1, #1
   4edee:	4620      	mov	r0, r4
   4edf0:	f7ff f831 	bl	4de56 <atomic_or>
		return true;
   4edf4:	2501      	movs	r5, #1
}
   4edf6:	4628      	mov	r0, r5
   4edf8:	bd70      	pop	{r4, r5, r6, pc}
   4edfa:	2102      	movs	r1, #2
   4edfc:	4620      	mov	r0, r4
   4edfe:	f7ff f82a 	bl	4de56 <atomic_or>
}
   4ee02:	e7f8      	b.n	4edf6 <bt_gatt_change_aware+0x40>

0004ee04 <ccc_delayed_store>:
{
   4ee04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4ee08:	f1a0 061c 	sub.w	r6, r0, #28
   4ee0c:	1f04      	subs	r4, r0, #4
			ccc_store->conn_list[i] = NULL;
   4ee0e:	f04f 0800 	mov.w	r8, #0
		struct bt_conn *conn = ccc_store->conn_list[i];
   4ee12:	f856 5f04 	ldr.w	r5, [r6, #4]!
		if (!conn) {
   4ee16:	b17d      	cbz	r5, 4ee38 <ccc_delayed_store+0x34>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4ee18:	f105 0788 	add.w	r7, r5, #136	; 0x88
   4ee1c:	7a28      	ldrb	r0, [r5, #8]
   4ee1e:	4639      	mov	r1, r7
   4ee20:	f7fd fc68 	bl	4c6f4 <bt_addr_le_is_bonded>
   4ee24:	b140      	cbz	r0, 4ee38 <ccc_delayed_store+0x34>
			ccc_store->conn_list[i] = NULL;
   4ee26:	f8c6 8000 	str.w	r8, [r6]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   4ee2a:	7a28      	ldrb	r0, [r5, #8]
   4ee2c:	4639      	mov	r1, r7
   4ee2e:	f7e3 fcff 	bl	32830 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   4ee32:	4628      	mov	r0, r5
   4ee34:	f7fd ffd1 	bl	4cdda <bt_conn_unref>
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   4ee38:	42a6      	cmp	r6, r4
   4ee3a:	d1ea      	bne.n	4ee12 <ccc_delayed_store+0xe>
}
   4ee3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004ee40 <sys_memcpy_swap>:
	psrc += length - 1;
   4ee40:	1e53      	subs	r3, r2, #1
   4ee42:	4419      	add	r1, r3
	for (; length > 0; length--) {
   4ee44:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   4ee46:	f811 3901 	ldrb.w	r3, [r1], #-1
   4ee4a:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   4ee4e:	4290      	cmp	r0, r2
   4ee50:	d1f9      	bne.n	4ee46 <sys_memcpy_swap+0x6>
}
   4ee52:	4770      	bx	lr

0004ee54 <smp_encrypt_info>:
}
   4ee54:	2007      	movs	r0, #7
   4ee56:	4770      	bx	lr

0004ee58 <le_sc_oob_config_set>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   4ee58:	7ac2      	ldrb	r2, [r0, #11]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   4ee5a:	7c83      	ldrb	r3, [r0, #18]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4ee5c:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4ee60:	78c0      	ldrb	r0, [r0, #3]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   4ee62:	f002 0201 	and.w	r2, r2, #1
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   4ee66:	f003 0301 	and.w	r3, r3, #1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4ee6a:	b940      	cbnz	r0, 4ee7e <le_sc_oob_config_set+0x26>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   4ee6c:	b112      	cbz	r2, 4ee74 <le_sc_oob_config_set+0x1c>
		if (rsp_oob_present) {
   4ee6e:	3301      	adds	r3, #1
	info->lesc.oob_config = oob_config;
   4ee70:	704b      	strb	r3, [r1, #1]
}
   4ee72:	4770      	bx	lr
				     BT_CONN_OOB_BOTH_PEERS :
   4ee74:	2b00      	cmp	r3, #0
   4ee76:	bf0c      	ite	eq
   4ee78:	2303      	moveq	r3, #3
   4ee7a:	2300      	movne	r3, #0
   4ee7c:	e7f8      	b.n	4ee70 <le_sc_oob_config_set+0x18>
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   4ee7e:	b922      	cbnz	r2, 4ee8a <le_sc_oob_config_set+0x32>
				     BT_CONN_OOB_BOTH_PEERS :
   4ee80:	2b00      	cmp	r3, #0
   4ee82:	bf0c      	ite	eq
   4ee84:	2303      	moveq	r3, #3
   4ee86:	2301      	movne	r3, #1
   4ee88:	e7f2      	b.n	4ee70 <le_sc_oob_config_set+0x18>
		if (rsp_oob_present) {
   4ee8a:	005b      	lsls	r3, r3, #1
   4ee8c:	e7f0      	b.n	4ee70 <le_sc_oob_config_set+0x18>

0004ee8e <smp_chan_get>:
{
   4ee8e:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   4ee90:	2106      	movs	r1, #6
   4ee92:	f7fe fa35 	bl	4d300 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   4ee96:	b100      	cbz	r0, 4ee9a <smp_chan_get+0xc>
	return CONTAINER_OF(chan, struct bt_smp, chan);
   4ee98:	38f0      	subs	r0, #240	; 0xf0
}
   4ee9a:	bd08      	pop	{r3, pc}

0004ee9c <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4ee9c:	f3bf 8f5b 	dmb	ish
   4eea0:	6800      	ldr	r0, [r0, #0]
   4eea2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   4eea6:	4108      	asrs	r0, r1
}
   4eea8:	f000 0001 	and.w	r0, r0, #1
   4eeac:	4770      	bx	lr

0004eeae <smp_keys_check>:
{
   4eeae:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   4eeb0:	210b      	movs	r1, #11
{
   4eeb2:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   4eeb4:	3004      	adds	r0, #4
   4eeb6:	f7ff fff1 	bl	4ee9c <atomic_test_bit>
   4eeba:	b108      	cbz	r0, 4eec0 <smp_keys_check+0x12>
		return false;
   4eebc:	2000      	movs	r0, #0
}
   4eebe:	bd38      	pop	{r3, r4, r5, pc}
	if (!conn->le.keys) {
   4eec0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   4eec4:	b983      	cbnz	r3, 4eee8 <smp_keys_check+0x3a>
						     conn->id, &conn->le.dst);
   4eec6:	f104 0588 	add.w	r5, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   4eeca:	7a21      	ldrb	r1, [r4, #8]
   4eecc:	462a      	mov	r2, r5
   4eece:	2020      	movs	r0, #32
   4eed0:	f7e4 ff00 	bl	33cd4 <bt_keys_find>
   4eed4:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   4eed8:	b930      	cbnz	r0, 4eee8 <smp_keys_check+0x3a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   4eeda:	7a21      	ldrb	r1, [r4, #8]
   4eedc:	462a      	mov	r2, r5
   4eede:	2004      	movs	r0, #4
   4eee0:	f7e4 fef8 	bl	33cd4 <bt_keys_find>
   4eee4:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   4eee8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   4eeec:	2b00      	cmp	r3, #0
   4eeee:	d0e5      	beq.n	4eebc <smp_keys_check+0xe>
   4eef0:	89da      	ldrh	r2, [r3, #14]
   4eef2:	f002 0224 	and.w	r2, r2, #36	; 0x24
   4eef6:	2a00      	cmp	r2, #0
   4eef8:	d0e0      	beq.n	4eebc <smp_keys_check+0xe>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   4eefa:	7aa2      	ldrb	r2, [r4, #10]
   4eefc:	2a02      	cmp	r2, #2
   4eefe:	d902      	bls.n	4ef06 <smp_keys_check+0x58>
   4ef00:	7b5b      	ldrb	r3, [r3, #13]
   4ef02:	07db      	lsls	r3, r3, #31
   4ef04:	d5da      	bpl.n	4eebc <smp_keys_check+0xe>
	return true;
   4ef06:	2001      	movs	r0, #1
   4ef08:	e7d9      	b.n	4eebe <smp_keys_check+0x10>

0004ef0a <update_keys_check>:
{
   4ef0a:	b510      	push	{r4, lr}
   4ef0c:	4603      	mov	r3, r0
	if (!keys ||
   4ef0e:	b1d9      	cbz	r1, 4ef48 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   4ef10:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   4ef12:	f010 0f24 	tst.w	r0, #36	; 0x24
   4ef16:	d017      	beq.n	4ef48 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   4ef18:	7d1a      	ldrb	r2, [r3, #20]
   4ef1a:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   4ef1c:	7b09      	ldrb	r1, [r1, #12]
   4ef1e:	42a2      	cmp	r2, r4
   4ef20:	bf28      	it	cs
   4ef22:	4622      	movcs	r2, r4
   4ef24:	4291      	cmp	r1, r2
   4ef26:	d901      	bls.n	4ef2c <update_keys_check+0x22>
		return false;
   4ef28:	2000      	movs	r0, #0
}
   4ef2a:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   4ef2c:	0682      	lsls	r2, r0, #26
   4ef2e:	d404      	bmi.n	4ef3a <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   4ef30:	7a18      	ldrb	r0, [r3, #8]
   4ef32:	3800      	subs	r0, #0
   4ef34:	bf18      	it	ne
   4ef36:	2001      	movne	r0, #1
   4ef38:	e7f7      	b.n	4ef2a <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   4ef3a:	2105      	movs	r1, #5
   4ef3c:	1d18      	adds	r0, r3, #4
   4ef3e:	f7ff ffad 	bl	4ee9c <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   4ef42:	2800      	cmp	r0, #0
   4ef44:	d1f4      	bne.n	4ef30 <update_keys_check+0x26>
   4ef46:	e7ef      	b.n	4ef28 <update_keys_check+0x1e>
	return true;
   4ef48:	2001      	movs	r0, #1
   4ef4a:	e7ee      	b.n	4ef2a <update_keys_check+0x20>

0004ef4c <remote_sec_level_reachable>:
{
   4ef4c:	b508      	push	{r3, lr}
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   4ef4e:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
   4ef52:	7a92      	ldrb	r2, [r2, #10]
	switch (sec) {
   4ef54:	2a03      	cmp	r2, #3
{
   4ef56:	4603      	mov	r3, r0
	switch (sec) {
   4ef58:	d015      	beq.n	4ef86 <remote_sec_level_reachable+0x3a>
   4ef5a:	d804      	bhi.n	4ef66 <remote_sec_level_reachable+0x1a>
   4ef5c:	3a01      	subs	r2, #1
   4ef5e:	2a01      	cmp	r2, #1
   4ef60:	d914      	bls.n	4ef8c <remote_sec_level_reachable+0x40>
		return BT_SMP_ERR_UNSPECIFIED;
   4ef62:	2008      	movs	r0, #8
   4ef64:	e00e      	b.n	4ef84 <remote_sec_level_reachable+0x38>
	switch (sec) {
   4ef66:	2a04      	cmp	r2, #4
   4ef68:	d1fb      	bne.n	4ef62 <remote_sec_level_reachable+0x16>
	return MIN(req->max_key_size, rsp->max_key_size);
   4ef6a:	7d02      	ldrb	r2, [r0, #20]
   4ef6c:	7b41      	ldrb	r1, [r0, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   4ef6e:	428a      	cmp	r2, r1
   4ef70:	bf28      	it	cs
   4ef72:	460a      	movcs	r2, r1
   4ef74:	2a10      	cmp	r2, #16
   4ef76:	d10b      	bne.n	4ef90 <remote_sec_level_reachable+0x44>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   4ef78:	2105      	movs	r1, #5
   4ef7a:	3004      	adds	r0, #4
   4ef7c:	f7ff ff8e 	bl	4ee9c <atomic_test_bit>
   4ef80:	b908      	cbnz	r0, 4ef86 <remote_sec_level_reachable+0x3a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   4ef82:	2003      	movs	r0, #3
}
   4ef84:	bd08      	pop	{r3, pc}
		if (smp->method == JUST_WORKS) {
   4ef86:	7a1b      	ldrb	r3, [r3, #8]
   4ef88:	2b00      	cmp	r3, #0
   4ef8a:	d0fa      	beq.n	4ef82 <remote_sec_level_reachable+0x36>
		return 0;
   4ef8c:	2000      	movs	r0, #0
   4ef8e:	e7f9      	b.n	4ef84 <remote_sec_level_reachable+0x38>
			return BT_SMP_ERR_ENC_KEY_SIZE;
   4ef90:	2006      	movs	r0, #6
   4ef92:	e7f7      	b.n	4ef84 <remote_sec_level_reachable+0x38>

0004ef94 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   4ef94:	2301      	movs	r3, #1
   4ef96:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4ef98:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4ef9a:	f3bf 8f5b 	dmb	ish
   4ef9e:	e850 2f00 	ldrex	r2, [r0]
   4efa2:	401a      	ands	r2, r3
   4efa4:	e840 2100 	strex	r1, r2, [r0]
   4efa8:	2900      	cmp	r1, #0
   4efaa:	d1f8      	bne.n	4ef9e <atomic_clear_bit+0xa>
   4efac:	f3bf 8f5b 	dmb	ish
}
   4efb0:	4770      	bx	lr

0004efb2 <bt_smp_aes_cmac>:
{
   4efb2:	b570      	push	{r4, r5, r6, lr}
   4efb4:	b0c2      	sub	sp, #264	; 0x108
   4efb6:	460d      	mov	r5, r1
   4efb8:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   4efba:	4601      	mov	r1, r0
   4efbc:	aa16      	add	r2, sp, #88	; 0x58
   4efbe:	4668      	mov	r0, sp
{
   4efc0:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   4efc2:	f7fc fd3d 	bl	4ba40 <tc_cmac_setup>
   4efc6:	b918      	cbnz	r0, 4efd0 <bt_smp_aes_cmac+0x1e>
		return -EIO;
   4efc8:	f06f 0004 	mvn.w	r0, #4
}
   4efcc:	b042      	add	sp, #264	; 0x108
   4efce:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   4efd0:	4632      	mov	r2, r6
   4efd2:	4629      	mov	r1, r5
   4efd4:	4668      	mov	r0, sp
   4efd6:	f7fc fd5e 	bl	4ba96 <tc_cmac_update>
   4efda:	2800      	cmp	r0, #0
   4efdc:	d0f4      	beq.n	4efc8 <bt_smp_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   4efde:	4669      	mov	r1, sp
   4efe0:	4620      	mov	r0, r4
   4efe2:	f7fc fdc2 	bl	4bb6a <tc_cmac_final>
   4efe6:	2800      	cmp	r0, #0
   4efe8:	d0ee      	beq.n	4efc8 <bt_smp_aes_cmac+0x16>
	return 0;
   4efea:	2000      	movs	r0, #0
   4efec:	e7ee      	b.n	4efcc <bt_smp_aes_cmac+0x1a>

0004efee <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   4efee:	2007      	movs	r0, #7
   4eff0:	4770      	bx	lr

0004eff2 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   4eff2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   4eff4:	2300      	movs	r3, #0
   4eff6:	9300      	str	r3, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   4eff8:	4604      	mov	r4, r0
   4effa:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   4effc:	460a      	mov	r2, r1
   4effe:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   4f002:	2106      	movs	r1, #6
   4f004:	f7fe f8d3 	bl	4d1ae <bt_l2cap_send_cb>
   4f008:	b128      	cbz	r0, 4f016 <smp_send.constprop.0+0x24>
		net_buf_unref(buf);
   4f00a:	4628      	mov	r0, r5
}
   4f00c:	b003      	add	sp, #12
   4f00e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   4f012:	f7f4 bcff 	b.w	43a14 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   4f016:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4f01a:	2300      	movs	r3, #0
   4f01c:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   4f020:	b003      	add	sp, #12
   4f022:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   4f026:	f7f9 baa7 	b.w	48578 <k_work_reschedule>

0004f02a <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   4f02a:	b510      	push	{r4, lr}
   4f02c:	1e43      	subs	r3, r0, #1
   4f02e:	f100 0210 	add.w	r2, r0, #16
   4f032:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   4f034:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   4f038:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   4f03c:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   4f03e:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   4f040:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   4f042:	d1f7      	bne.n	4f034 <sys_mem_swap.constprop.0+0xa>
	}
}
   4f044:	bd10      	pop	{r4, pc}

0004f046 <smp_f6>:
{
   4f046:	b5f0      	push	{r4, r5, r6, r7, lr}
   4f048:	b097      	sub	sp, #92	; 0x5c
   4f04a:	4605      	mov	r5, r0
   4f04c:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   4f04e:	a805      	add	r0, sp, #20
   4f050:	2210      	movs	r2, #16
{
   4f052:	461c      	mov	r4, r3
   4f054:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   4f056:	f7ff fef3 	bl	4ee40 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   4f05a:	2210      	movs	r2, #16
   4f05c:	4631      	mov	r1, r6
   4f05e:	a809      	add	r0, sp, #36	; 0x24
   4f060:	f7ff feee 	bl	4ee40 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   4f064:	4621      	mov	r1, r4
   4f066:	2210      	movs	r2, #16
   4f068:	a80d      	add	r0, sp, #52	; 0x34
   4f06a:	f7ff fee9 	bl	4ee40 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   4f06e:	991c      	ldr	r1, [sp, #112]	; 0x70
   4f070:	2203      	movs	r2, #3
   4f072:	a811      	add	r0, sp, #68	; 0x44
   4f074:	f7ff fee4 	bl	4ee40 <sys_memcpy_swap>
	m[51] = a1->type;
   4f078:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   4f07a:	f814 3b01 	ldrb.w	r3, [r4], #1
   4f07e:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   4f082:	4621      	mov	r1, r4
   4f084:	2206      	movs	r2, #6
   4f086:	a812      	add	r0, sp, #72	; 0x48
   4f088:	f7fc fe6d 	bl	4bd66 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   4f08c:	4621      	mov	r1, r4
   4f08e:	2206      	movs	r2, #6
   4f090:	a812      	add	r0, sp, #72	; 0x48
   4f092:	f7ff fed5 	bl	4ee40 <sys_memcpy_swap>
	m[58] = a2->type;
   4f096:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   4f098:	f814 3b01 	ldrb.w	r3, [r4], #1
   4f09c:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   4f0a0:	4621      	mov	r1, r4
   4f0a2:	2206      	movs	r2, #6
   4f0a4:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   4f0a8:	f7fc fe5d 	bl	4bd66 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   4f0ac:	4621      	mov	r1, r4
   4f0ae:	2206      	movs	r2, #6
   4f0b0:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   4f0b4:	f7ff fec4 	bl	4ee40 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   4f0b8:	2210      	movs	r2, #16
   4f0ba:	4629      	mov	r1, r5
   4f0bc:	a801      	add	r0, sp, #4
   4f0be:	f7ff febf 	bl	4ee40 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   4f0c2:	463b      	mov	r3, r7
   4f0c4:	2241      	movs	r2, #65	; 0x41
   4f0c6:	a905      	add	r1, sp, #20
   4f0c8:	a801      	add	r0, sp, #4
   4f0ca:	f7ff ff72 	bl	4efb2 <bt_smp_aes_cmac>
	if (err) {
   4f0ce:	4604      	mov	r4, r0
   4f0d0:	b910      	cbnz	r0, 4f0d8 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   4f0d2:	4638      	mov	r0, r7
   4f0d4:	f7ff ffa9 	bl	4f02a <sys_mem_swap.constprop.0>
}
   4f0d8:	4620      	mov	r0, r4
   4f0da:	b017      	add	sp, #92	; 0x5c
   4f0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004f0de <smp_f4>:
{
   4f0de:	b5f0      	push	{r4, r5, r6, r7, lr}
   4f0e0:	b097      	sub	sp, #92	; 0x5c
   4f0e2:	4614      	mov	r4, r2
   4f0e4:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   4f0e6:	2220      	movs	r2, #32
   4f0e8:	4601      	mov	r1, r0
   4f0ea:	a805      	add	r0, sp, #20
{
   4f0ec:	461d      	mov	r5, r3
   4f0ee:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   4f0f0:	f7ff fea6 	bl	4ee40 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   4f0f4:	2220      	movs	r2, #32
   4f0f6:	4631      	mov	r1, r6
   4f0f8:	a80d      	add	r0, sp, #52	; 0x34
   4f0fa:	f7ff fea1 	bl	4ee40 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   4f0fe:	4621      	mov	r1, r4
   4f100:	2210      	movs	r2, #16
   4f102:	a801      	add	r0, sp, #4
	m[64] = z;
   4f104:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   4f108:	f7ff fe9a 	bl	4ee40 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   4f10c:	463b      	mov	r3, r7
   4f10e:	2241      	movs	r2, #65	; 0x41
   4f110:	a905      	add	r1, sp, #20
   4f112:	a801      	add	r0, sp, #4
   4f114:	f7ff ff4d 	bl	4efb2 <bt_smp_aes_cmac>
	if (err) {
   4f118:	4604      	mov	r4, r0
   4f11a:	b910      	cbnz	r0, 4f122 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   4f11c:	4638      	mov	r0, r7
   4f11e:	f7ff ff84 	bl	4f02a <sys_mem_swap.constprop.0>
}
   4f122:	4620      	mov	r0, r4
   4f124:	b017      	add	sp, #92	; 0x5c
   4f126:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004f128 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   4f128:	2301      	movs	r3, #1
   4f12a:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4f12c:	f3bf 8f5b 	dmb	ish
   4f130:	e850 2f00 	ldrex	r2, [r0]
   4f134:	431a      	orrs	r2, r3
   4f136:	e840 2100 	strex	r1, r2, [r0]
   4f13a:	2900      	cmp	r1, #0
   4f13c:	d1f8      	bne.n	4f130 <atomic_set_bit+0x8>
   4f13e:	f3bf 8f5b 	dmb	ish
}
   4f142:	4770      	bx	lr

0004f144 <smp_keypress_notif>:
{
   4f144:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   4f146:	210e      	movs	r1, #14
   4f148:	f7ff ffee 	bl	4f128 <atomic_set_bit>
}
   4f14c:	2000      	movs	r0, #0
   4f14e:	bd08      	pop	{r3, pc}

0004f150 <generate_dhkey>:
{
   4f150:	b510      	push	{r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   4f152:	2107      	movs	r1, #7
{
   4f154:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   4f156:	3004      	adds	r0, #4
   4f158:	f7ff ffe6 	bl	4f128 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   4f15c:	2008      	movs	r0, #8
   4f15e:	f7e3 fd45 	bl	32bec <smp_find>
   4f162:	b920      	cbnz	r0, 4f16e <generate_dhkey+0x1e>
		return smp_dhkey_generate(smp);
   4f164:	4620      	mov	r0, r4
}
   4f166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_dhkey_generate(smp);
   4f16a:	f7e3 beb7 	b.w	32edc <smp_dhkey_generate>
}
   4f16e:	2000      	movs	r0, #0
   4f170:	bd10      	pop	{r4, pc}

0004f172 <smp_ident_info>:
{
   4f172:	b538      	push	{r3, r4, r5, lr}
   4f174:	4604      	mov	r4, r0
   4f176:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   4f178:	3004      	adds	r0, #4
   4f17a:	210d      	movs	r1, #13
   4f17c:	f7ff fe8e 	bl	4ee9c <atomic_test_bit>
   4f180:	b170      	cbz	r0, 4f1a0 <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
   4f182:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   4f184:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   4f188:	2002      	movs	r0, #2
   4f18a:	7a19      	ldrb	r1, [r3, #8]
   4f18c:	f103 0288 	add.w	r2, r3, #136	; 0x88
   4f190:	f000 fd0c 	bl	4fbac <bt_keys_get_type>
		if (!keys) {
   4f194:	b150      	cbz	r0, 4f1ac <smp_ident_info+0x3a>
		memcpy(keys->irk.val, req->irk, 16);
   4f196:	2210      	movs	r2, #16
   4f198:	4629      	mov	r1, r5
   4f19a:	302a      	adds	r0, #42	; 0x2a
   4f19c:	f7fc fde3 	bl	4bd66 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   4f1a0:	4620      	mov	r0, r4
   4f1a2:	2109      	movs	r1, #9
   4f1a4:	f7ff ffc0 	bl	4f128 <atomic_set_bit>
	return 0;
   4f1a8:	2000      	movs	r0, #0
}
   4f1aa:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   4f1ac:	2008      	movs	r0, #8
   4f1ae:	e7fc      	b.n	4f1aa <smp_ident_info+0x38>

0004f1b0 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   4f1b0:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   4f1b2:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   4f1b4:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   4f1b6:	4628      	mov	r0, r5
   4f1b8:	2104      	movs	r1, #4
   4f1ba:	f7ff fe6f 	bl	4ee9c <atomic_test_bit>
   4f1be:	b168      	cbz	r0, 4f1dc <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   4f1c0:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   4f1c2:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   4f1c4:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   4f1c6:	4608      	mov	r0, r1
   4f1c8:	f7fd ffee 	bl	4d1a8 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   4f1cc:	4604      	mov	r4, r0
   4f1ce:	b940      	cbnz	r0, 4f1e2 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   4f1d0:	2104      	movs	r1, #4
   4f1d2:	4628      	mov	r0, r5
   4f1d4:	f7ff ffa8 	bl	4f128 <atomic_set_bit>
}
   4f1d8:	4620      	mov	r0, r4
   4f1da:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   4f1dc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4f1e0:	e7ef      	b.n	4f1c2 <smp_create_pdu.constprop.0+0x12>
   4f1e2:	2101      	movs	r1, #1
   4f1e4:	3008      	adds	r0, #8
   4f1e6:	f000 fd9f 	bl	4fd28 <net_buf_simple_add>
	hdr->code = op;
   4f1ea:	7006      	strb	r6, [r0, #0]
	return buf;
   4f1ec:	e7f4      	b.n	4f1d8 <smp_create_pdu.constprop.0+0x28>

0004f1ee <smp_send_pairing_random>:
{
   4f1ee:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   4f1f0:	2104      	movs	r1, #4
{
   4f1f2:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   4f1f4:	f7ff ffdc 	bl	4f1b0 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   4f1f8:	4604      	mov	r4, r0
   4f1fa:	b170      	cbz	r0, 4f21a <smp_send_pairing_random+0x2c>
   4f1fc:	2110      	movs	r1, #16
   4f1fe:	3008      	adds	r0, #8
   4f200:	f000 fd92 	bl	4fd28 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   4f204:	2210      	movs	r2, #16
   4f206:	f105 0127 	add.w	r1, r5, #39	; 0x27
   4f20a:	f7fc fdac 	bl	4bd66 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   4f20e:	4628      	mov	r0, r5
   4f210:	4621      	mov	r1, r4
   4f212:	f7ff feee 	bl	4eff2 <smp_send.constprop.0>
	return 0;
   4f216:	2000      	movs	r0, #0
}
   4f218:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   4f21a:	2008      	movs	r0, #8
   4f21c:	e7fc      	b.n	4f218 <smp_send_pairing_random+0x2a>

0004f21e <sc_smp_send_dhkey_check>:
{
   4f21e:	b570      	push	{r4, r5, r6, lr}
   4f220:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   4f222:	210d      	movs	r1, #13
{
   4f224:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   4f226:	f7ff ffc3 	bl	4f1b0 <smp_create_pdu.constprop.0>
	if (!buf) {
   4f22a:	4604      	mov	r4, r0
   4f22c:	b168      	cbz	r0, 4f24a <sc_smp_send_dhkey_check+0x2c>
   4f22e:	2110      	movs	r1, #16
   4f230:	3008      	adds	r0, #8
   4f232:	f000 fd79 	bl	4fd28 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   4f236:	2210      	movs	r2, #16
   4f238:	4631      	mov	r1, r6
   4f23a:	f7fc fd94 	bl	4bd66 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   4f23e:	4628      	mov	r0, r5
   4f240:	4621      	mov	r1, r4
   4f242:	f7ff fed6 	bl	4eff2 <smp_send.constprop.0>
	return 0;
   4f246:	2000      	movs	r0, #0
}
   4f248:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   4f24a:	2008      	movs	r0, #8
   4f24c:	e7fc      	b.n	4f248 <sc_smp_send_dhkey_check+0x2a>

0004f24e <compute_and_send_central_dhcheck>:
{
   4f24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4f252:	4604      	mov	r4, r0
   4f254:	b08c      	sub	sp, #48	; 0x30
	(void)memset(r, 0, sizeof(r));
   4f256:	2210      	movs	r2, #16
   4f258:	2100      	movs	r1, #0
   4f25a:	a808      	add	r0, sp, #32
   4f25c:	f7fc fd8e 	bl	4bd7c <memset>
	switch (smp->method) {
   4f260:	7a23      	ldrb	r3, [r4, #8]
   4f262:	2b05      	cmp	r3, #5
   4f264:	d821      	bhi.n	4f2aa <compute_and_send_central_dhcheck+0x5c>
   4f266:	e8df f003 	tbb	[pc, r3]
   4f26a:	0309      	.short	0x0309
   4f26c:	24200903 	.word	0x24200903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   4f270:	2204      	movs	r2, #4
   4f272:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   4f276:	a808      	add	r0, sp, #32
   4f278:	f7fc fd75 	bl	4bd66 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   4f27c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   smp->tk)) {
   4f280:	f104 0247 	add.w	r2, r4, #71	; 0x47
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   4f284:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   4f288:	e9cd 6201 	strd	r6, r2, [sp, #4]
   4f28c:	f104 0727 	add.w	r7, r4, #39	; 0x27
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   4f290:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   4f294:	f104 0837 	add.w	r8, r4, #55	; 0x37
   4f298:	9200      	str	r2, [sp, #0]
   4f29a:	338f      	adds	r3, #143	; 0x8f
   4f29c:	4642      	mov	r2, r8
   4f29e:	4639      	mov	r1, r7
   4f2a0:	f104 0097 	add.w	r0, r4, #151	; 0x97
   4f2a4:	f7e3 fd08 	bl	32cb8 <smp_f5>
   4f2a8:	b148      	cbz	r0, 4f2be <compute_and_send_central_dhcheck+0x70>
		return BT_SMP_ERR_UNSPECIFIED;
   4f2aa:	2008      	movs	r0, #8
}
   4f2ac:	b00c      	add	sp, #48	; 0x30
   4f2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (smp->oobd_remote) {
   4f2b2:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   4f2b6:	2900      	cmp	r1, #0
   4f2b8:	d0e0      	beq.n	4f27c <compute_and_send_central_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   4f2ba:	2210      	movs	r2, #16
   4f2bc:	e7db      	b.n	4f276 <compute_and_send_central_dhcheck+0x28>
		   &smp->chan.chan.conn->le.init_addr,
   4f2be:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.resp_addr, e)) {
   4f2c2:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   4f2c6:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   4f2c8:	ad04      	add	r5, sp, #16
   4f2ca:	9301      	str	r3, [sp, #4]
   4f2cc:	f104 030a 	add.w	r3, r4, #10
   4f2d0:	9202      	str	r2, [sp, #8]
   4f2d2:	9300      	str	r3, [sp, #0]
   4f2d4:	9503      	str	r5, [sp, #12]
   4f2d6:	ab08      	add	r3, sp, #32
   4f2d8:	4642      	mov	r2, r8
   4f2da:	4639      	mov	r1, r7
   4f2dc:	4630      	mov	r0, r6
   4f2de:	f7ff feb2 	bl	4f046 <smp_f6>
   4f2e2:	2800      	cmp	r0, #0
   4f2e4:	d1e1      	bne.n	4f2aa <compute_and_send_central_dhcheck+0x5c>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   4f2e6:	210d      	movs	r1, #13
   4f2e8:	4620      	mov	r0, r4
   4f2ea:	f7ff ff1d 	bl	4f128 <atomic_set_bit>
	return sc_smp_send_dhkey_check(smp, e);
   4f2ee:	4629      	mov	r1, r5
   4f2f0:	f7ff ff95 	bl	4f21e <sc_smp_send_dhkey_check>
   4f2f4:	e7da      	b.n	4f2ac <compute_and_send_central_dhcheck+0x5e>

0004f2f6 <compute_and_check_and_send_periph_dhcheck>:
{
   4f2f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4f2fa:	4604      	mov	r4, r0
   4f2fc:	b091      	sub	sp, #68	; 0x44
	(void)memset(r, 0, sizeof(r));
   4f2fe:	2210      	movs	r2, #16
   4f300:	2100      	movs	r1, #0
   4f302:	a80c      	add	r0, sp, #48	; 0x30
   4f304:	f7fc fd3a 	bl	4bd7c <memset>
	switch (smp->method) {
   4f308:	7a23      	ldrb	r3, [r4, #8]
   4f30a:	2b05      	cmp	r3, #5
   4f30c:	d821      	bhi.n	4f352 <compute_and_check_and_send_periph_dhcheck+0x5c>
   4f30e:	e8df f003 	tbb	[pc, r3]
   4f312:	0309      	.short	0x0309
   4f314:	25200903 	.word	0x25200903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   4f318:	2204      	movs	r2, #4
   4f31a:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   4f31e:	a80c      	add	r0, sp, #48	; 0x30
   4f320:	f7fc fd21 	bl	4bd66 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   4f324:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   smp->tk)) {
   4f328:	f104 0247 	add.w	r2, r4, #71	; 0x47
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   4f32c:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   4f330:	e9cd 5201 	strd	r5, r2, [sp, #4]
   4f334:	f104 0637 	add.w	r6, r4, #55	; 0x37
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   4f338:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   4f33c:	f104 0727 	add.w	r7, r4, #39	; 0x27
   4f340:	9200      	str	r2, [sp, #0]
   4f342:	338f      	adds	r3, #143	; 0x8f
   4f344:	463a      	mov	r2, r7
   4f346:	4631      	mov	r1, r6
   4f348:	f104 0097 	add.w	r0, r4, #151	; 0x97
   4f34c:	f7e3 fcb4 	bl	32cb8 <smp_f5>
   4f350:	b150      	cbz	r0, 4f368 <compute_and_check_and_send_periph_dhcheck+0x72>
		return BT_SMP_ERR_UNSPECIFIED;
   4f352:	2508      	movs	r5, #8
}
   4f354:	4628      	mov	r0, r5
   4f356:	b011      	add	sp, #68	; 0x44
   4f358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (smp->oobd_remote) {
   4f35c:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   4f360:	2900      	cmp	r1, #0
   4f362:	d0df      	beq.n	4f324 <compute_and_check_and_send_periph_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   4f364:	2210      	movs	r2, #16
   4f366:	e7da      	b.n	4f31e <compute_and_check_and_send_periph_dhcheck+0x28>
		   &smp->chan.chan.conn->le.resp_addr,
   4f368:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.init_addr, e)) {
   4f36c:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   4f370:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   4f372:	f10d 0820 	add.w	r8, sp, #32
   4f376:	9301      	str	r3, [sp, #4]
   4f378:	f104 0311 	add.w	r3, r4, #17
   4f37c:	9202      	str	r2, [sp, #8]
   4f37e:	9300      	str	r3, [sp, #0]
   4f380:	f8cd 800c 	str.w	r8, [sp, #12]
   4f384:	ab0c      	add	r3, sp, #48	; 0x30
   4f386:	4632      	mov	r2, r6
   4f388:	4639      	mov	r1, r7
   4f38a:	4628      	mov	r0, r5
   4f38c:	f7ff fe5b 	bl	4f046 <smp_f6>
   4f390:	2800      	cmp	r0, #0
   4f392:	d1de      	bne.n	4f352 <compute_and_check_and_send_periph_dhcheck+0x5c>
	if (smp->method == LE_SC_OOB) {
   4f394:	7a23      	ldrb	r3, [r4, #8]
   4f396:	2b05      	cmp	r3, #5
   4f398:	d106      	bne.n	4f3a8 <compute_and_check_and_send_periph_dhcheck+0xb2>
		if (smp->oobd_local) {
   4f39a:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   4f39e:	2210      	movs	r2, #16
   4f3a0:	a80c      	add	r0, sp, #48	; 0x30
		if (smp->oobd_local) {
   4f3a2:	b351      	cbz	r1, 4f3fa <compute_and_check_and_send_periph_dhcheck+0x104>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   4f3a4:	f7fc fcdf 	bl	4bd66 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   4f3a8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   4f3ac:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   4f3b0:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   4f3b2:	f10d 0910 	add.w	r9, sp, #16
   4f3b6:	9301      	str	r3, [sp, #4]
   4f3b8:	f104 030a 	add.w	r3, r4, #10
   4f3bc:	9202      	str	r2, [sp, #8]
   4f3be:	9300      	str	r3, [sp, #0]
   4f3c0:	f8cd 900c 	str.w	r9, [sp, #12]
   4f3c4:	ab0c      	add	r3, sp, #48	; 0x30
   4f3c6:	463a      	mov	r2, r7
   4f3c8:	4631      	mov	r1, r6
   4f3ca:	4628      	mov	r0, r5
   4f3cc:	f7ff fe3b 	bl	4f046 <smp_f6>
   4f3d0:	2800      	cmp	r0, #0
   4f3d2:	d1be      	bne.n	4f352 <compute_and_check_and_send_periph_dhcheck+0x5c>
	if (memcmp(smp->e, re, 16)) {
   4f3d4:	2210      	movs	r2, #16
   4f3d6:	4649      	mov	r1, r9
   4f3d8:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   4f3dc:	f7fc fcb3 	bl	4bd46 <memcmp>
   4f3e0:	b970      	cbnz	r0, 4f400 <compute_and_check_and_send_periph_dhcheck+0x10a>
	err = sc_smp_send_dhkey_check(smp, e);
   4f3e2:	4641      	mov	r1, r8
   4f3e4:	4620      	mov	r0, r4
   4f3e6:	f7ff ff1a 	bl	4f21e <sc_smp_send_dhkey_check>
	if (err) {
   4f3ea:	4605      	mov	r5, r0
   4f3ec:	2800      	cmp	r0, #0
   4f3ee:	d1b1      	bne.n	4f354 <compute_and_check_and_send_periph_dhcheck+0x5e>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4f3f0:	2101      	movs	r1, #1
   4f3f2:	1d20      	adds	r0, r4, #4
   4f3f4:	f7ff fe98 	bl	4f128 <atomic_set_bit>
	return 0;
   4f3f8:	e7ac      	b.n	4f354 <compute_and_check_and_send_periph_dhcheck+0x5e>
			memset(r, 0, sizeof(r));
   4f3fa:	f7fc fcbf 	bl	4bd7c <memset>
   4f3fe:	e7d3      	b.n	4f3a8 <compute_and_check_and_send_periph_dhcheck+0xb2>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   4f400:	250b      	movs	r5, #11
   4f402:	e7a7      	b.n	4f354 <compute_and_check_and_send_periph_dhcheck+0x5e>

0004f404 <smp_dhkey_check>:
{
   4f404:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4f406:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   4f40a:	688e      	ldr	r6, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4f40c:	78dd      	ldrb	r5, [r3, #3]
{
   4f40e:	b091      	sub	sp, #68	; 0x44
   4f410:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4f412:	2d00      	cmp	r5, #0
   4f414:	d15b      	bne.n	4f4ce <smp_dhkey_check+0xca>
		(void)memset(r, 0, sizeof(r));
   4f416:	2210      	movs	r2, #16
   4f418:	4629      	mov	r1, r5
   4f41a:	a80c      	add	r0, sp, #48	; 0x30
   4f41c:	f7fc fcae 	bl	4bd7c <memset>
		switch (smp->method) {
   4f420:	7a23      	ldrb	r3, [r4, #8]
   4f422:	2b05      	cmp	r3, #5
   4f424:	d820      	bhi.n	4f468 <smp_dhkey_check+0x64>
   4f426:	e8df f003 	tbb	[pc, r3]
   4f42a:	0309      	.short	0x0309
   4f42c:	231f0903 	.word	0x231f0903
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   4f430:	2204      	movs	r2, #4
   4f432:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
				memcpy(r, smp->oobd_local->r, sizeof(r));
   4f436:	a80c      	add	r0, sp, #48	; 0x30
   4f438:	f7fc fc95 	bl	4bd66 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
   4f43c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
			   &smp->chan.chan.conn->le.init_addr, e)) {
   4f440:	f103 028f 	add.w	r2, r3, #143	; 0x8f
			   &smp->chan.chan.conn->le.resp_addr,
   4f444:	3396      	adds	r3, #150	; 0x96
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   4f446:	af08      	add	r7, sp, #32
   4f448:	9301      	str	r3, [sp, #4]
   4f44a:	f104 0311 	add.w	r3, r4, #17
   4f44e:	9202      	str	r2, [sp, #8]
   4f450:	9300      	str	r3, [sp, #0]
   4f452:	9703      	str	r7, [sp, #12]
   4f454:	ab0c      	add	r3, sp, #48	; 0x30
   4f456:	f104 0227 	add.w	r2, r4, #39	; 0x27
   4f45a:	f104 0137 	add.w	r1, r4, #55	; 0x37
   4f45e:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
   4f462:	f7ff fdf0 	bl	4f046 <smp_f6>
   4f466:	b148      	cbz	r0, 4f47c <smp_dhkey_check+0x78>
			return BT_SMP_ERR_UNSPECIFIED;
   4f468:	2508      	movs	r5, #8
}
   4f46a:	4628      	mov	r0, r5
   4f46c:	b011      	add	sp, #68	; 0x44
   4f46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (smp->oobd_local) {
   4f470:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   4f474:	2900      	cmp	r1, #0
   4f476:	d0e1      	beq.n	4f43c <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   4f478:	2210      	movs	r2, #16
   4f47a:	e7dc      	b.n	4f436 <smp_dhkey_check+0x32>
		if (memcmp(e, req->e, 16)) {
   4f47c:	4631      	mov	r1, r6
   4f47e:	2210      	movs	r2, #16
   4f480:	4638      	mov	r0, r7
   4f482:	f7fc fc60 	bl	4bd46 <memcmp>
   4f486:	4606      	mov	r6, r0
   4f488:	b9f8      	cbnz	r0, 4f4ca <smp_dhkey_check+0xc6>
	return MIN(req->max_key_size, rsp->max_key_size);
   4f48a:	7d23      	ldrb	r3, [r4, #20]
   4f48c:	7b67      	ldrb	r7, [r4, #13]
		(void)memset(ediv, 0, sizeof(ediv));
   4f48e:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   4f490:	429f      	cmp	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   4f492:	f04f 0202 	mov.w	r2, #2
   4f496:	a805      	add	r0, sp, #20
	return MIN(req->max_key_size, rsp->max_key_size);
   4f498:	bf28      	it	cs
   4f49a:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   4f49c:	f7fc fc6e 	bl	4bd7c <memset>
		(void)memset(rand, 0, sizeof(rand));
   4f4a0:	2208      	movs	r2, #8
   4f4a2:	4631      	mov	r1, r6
   4f4a4:	a806      	add	r0, sp, #24
   4f4a6:	f7fc fc69 	bl	4bd7c <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   4f4aa:	9700      	str	r7, [sp, #0]
   4f4ac:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   4f4b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
   4f4b4:	aa05      	add	r2, sp, #20
   4f4b6:	a906      	add	r1, sp, #24
   4f4b8:	f7fd fcd3 	bl	4ce62 <bt_conn_le_start_encryption>
   4f4bc:	2800      	cmp	r0, #0
   4f4be:	dbd3      	blt.n	4f468 <smp_dhkey_check+0x64>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4f4c0:	2101      	movs	r1, #1
   4f4c2:	1d20      	adds	r0, r4, #4
   4f4c4:	f7ff fe30 	bl	4f128 <atomic_set_bit>
		return 0;
   4f4c8:	e7cf      	b.n	4f46a <smp_dhkey_check+0x66>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   4f4ca:	250b      	movs	r5, #11
   4f4cc:	e7cd      	b.n	4f46a <smp_dhkey_check+0x66>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   4f4ce:	2d01      	cmp	r5, #1
   4f4d0:	d113      	bne.n	4f4fa <smp_dhkey_check+0xf6>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   4f4d2:	1d05      	adds	r5, r0, #4
   4f4d4:	2110      	movs	r1, #16
   4f4d6:	4628      	mov	r0, r5
   4f4d8:	f7ff fd5c 	bl	4ef94 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   4f4dc:	4631      	mov	r1, r6
   4f4de:	2210      	movs	r2, #16
   4f4e0:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   4f4e4:	f7fc fc3f 	bl	4bd66 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   4f4e8:	2107      	movs	r1, #7
   4f4ea:	4628      	mov	r0, r5
   4f4ec:	f7ff fcd6 	bl	4ee9c <atomic_test_bit>
   4f4f0:	b128      	cbz	r0, 4f4fe <smp_dhkey_check+0xfa>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4f4f2:	2109      	movs	r1, #9
   4f4f4:	4628      	mov	r0, r5
   4f4f6:	f7ff fe17 	bl	4f128 <atomic_set_bit>
			return 0;
   4f4fa:	2500      	movs	r5, #0
   4f4fc:	e7b5      	b.n	4f46a <smp_dhkey_check+0x66>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   4f4fe:	210a      	movs	r1, #10
   4f500:	4628      	mov	r0, r5
   4f502:	f7ff fccb 	bl	4ee9c <atomic_test_bit>
   4f506:	2800      	cmp	r0, #0
   4f508:	d1f3      	bne.n	4f4f2 <smp_dhkey_check+0xee>
		return compute_and_check_and_send_periph_dhcheck(smp);
   4f50a:	4620      	mov	r0, r4
}
   4f50c:	b011      	add	sp, #68	; 0x44
   4f50e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   4f512:	f7ff bef0 	b.w	4f2f6 <compute_and_check_and_send_periph_dhcheck>

0004f516 <smp_pairing_confirm>:
{
   4f516:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   4f518:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   4f51a:	1d05      	adds	r5, r0, #4
{
   4f51c:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   4f51e:	210b      	movs	r1, #11
   4f520:	4628      	mov	r0, r5
   4f522:	f7ff fd37 	bl	4ef94 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   4f526:	2210      	movs	r2, #16
   4f528:	4631      	mov	r1, r6
   4f52a:	f104 0017 	add.w	r0, r4, #23
   4f52e:	f7fc fc1a 	bl	4bd66 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4f532:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4f536:	78db      	ldrb	r3, [r3, #3]
   4f538:	b93b      	cbnz	r3, 4f54a <smp_pairing_confirm+0x34>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   4f53a:	4620      	mov	r0, r4
   4f53c:	2104      	movs	r1, #4
   4f53e:	f7ff fdf3 	bl	4f128 <atomic_set_bit>
}
   4f542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_random(smp);
   4f546:	f7ff be52 	b.w	4f1ee <smp_send_pairing_random>
	switch (smp->method) {
   4f54a:	7a23      	ldrb	r3, [r4, #8]
   4f54c:	2b01      	cmp	r3, #1
   4f54e:	d009      	beq.n	4f564 <smp_pairing_confirm+0x4e>
   4f550:	2b02      	cmp	r3, #2
   4f552:	d113      	bne.n	4f57c <smp_pairing_confirm+0x66>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   4f554:	4620      	mov	r0, r4
   4f556:	2104      	movs	r1, #4
   4f558:	f7ff fde6 	bl	4f128 <atomic_set_bit>
}
   4f55c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   4f560:	f7e3 bdda 	b.w	33118 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   4f564:	210a      	movs	r1, #10
   4f566:	4628      	mov	r0, r5
   4f568:	f7ff fc98 	bl	4ee9c <atomic_test_bit>
   4f56c:	2800      	cmp	r0, #0
   4f56e:	d0f1      	beq.n	4f554 <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   4f570:	4628      	mov	r0, r5
   4f572:	2100      	movs	r1, #0
   4f574:	f7ff fdd8 	bl	4f128 <atomic_set_bit>
			return 0;
   4f578:	2000      	movs	r0, #0
}
   4f57a:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   4f57c:	2008      	movs	r0, #8
   4f57e:	e7fc      	b.n	4f57a <smp_pairing_confirm+0x64>

0004f580 <smp_central_ident>:
static uint8_t smp_central_ident(struct bt_smp *smp, struct net_buf *buf)
   4f580:	2007      	movs	r0, #7
   4f582:	4770      	bx	lr

0004f584 <atomic_test_and_clear_bit>:
{
   4f584:	b530      	push	{r4, r5, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   4f586:	2301      	movs	r3, #1
   4f588:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4f58c:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4f58e:	f3bf 8f5b 	dmb	ish
   4f592:	e850 3f00 	ldrex	r3, [r0]
   4f596:	ea03 0402 	and.w	r4, r3, r2
   4f59a:	e840 4500 	strex	r5, r4, [r0]
   4f59e:	2d00      	cmp	r5, #0
   4f5a0:	d1f7      	bne.n	4f592 <atomic_test_and_clear_bit+0xe>
   4f5a2:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   4f5a6:	4219      	tst	r1, r3
}
   4f5a8:	bf14      	ite	ne
   4f5aa:	2001      	movne	r0, #1
   4f5ac:	2000      	moveq	r0, #0
   4f5ae:	bd30      	pop	{r4, r5, pc}

0004f5b0 <smp_reset>:
{
   4f5b0:	b570      	push	{r4, r5, r6, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   4f5b2:	1d03      	adds	r3, r0, #4
   4f5b4:	4604      	mov	r4, r0
   4f5b6:	2500      	movs	r5, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   4f5b8:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
   4f5bc:	f3bf 8f5b 	dmb	ish
   4f5c0:	e853 2f00 	ldrex	r2, [r3]
   4f5c4:	e843 5100 	strex	r1, r5, [r3]
   4f5c8:	2900      	cmp	r1, #0
   4f5ca:	d1f9      	bne.n	4f5c0 <smp_reset+0x10>
   4f5cc:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   4f5d0:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   4f5d4:	f001 fbb8 	bl	50d48 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   4f5d8:	7225      	strb	r5, [r4, #8]
   4f5da:	f3bf 8f5b 	dmb	ish
   4f5de:	e854 3f00 	ldrex	r3, [r4]
   4f5e2:	e844 5200 	strex	r2, r5, [r4]
   4f5e6:	2a00      	cmp	r2, #0
   4f5e8:	d1f9      	bne.n	4f5de <smp_reset+0x2e>
   4f5ea:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4f5ee:	78f3      	ldrb	r3, [r6, #3]
   4f5f0:	b92b      	cbnz	r3, 4f5fe <smp_reset+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   4f5f2:	210b      	movs	r1, #11
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   4f5f4:	4620      	mov	r0, r4
}
   4f5f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   4f5fa:	f7ff bd95 	b.w	4f128 <atomic_set_bit>
   4f5fe:	2101      	movs	r1, #1
   4f600:	e7f8      	b.n	4f5f4 <smp_reset+0x44>

0004f602 <bt_smp_request_ltk>:
{
   4f602:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4f606:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   4f60a:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   4f60e:	4604      	mov	r4, r0
   4f610:	4692      	mov	sl, r2
   4f612:	461f      	mov	r7, r3
	smp = smp_chan_get(conn);
   4f614:	f7ff fc3b 	bl	4ee8e <smp_chan_get>
	if (!smp) {
   4f618:	4605      	mov	r5, r0
   4f61a:	2800      	cmp	r0, #0
   4f61c:	d05a      	beq.n	4f6d4 <bt_smp_request_ltk+0xd2>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   4f61e:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   4f620:	f1b9 0f00 	cmp.w	r9, #0
   4f624:	d127      	bne.n	4f676 <bt_smp_request_ltk+0x74>
   4f626:	ea5a 0307 	orrs.w	r3, sl, r7
   4f62a:	d124      	bne.n	4f676 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   4f62c:	2103      	movs	r1, #3
   4f62e:	4630      	mov	r0, r6
   4f630:	f7ff fc34 	bl	4ee9c <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   4f634:	b3d0      	cbz	r0, 4f6ac <bt_smp_request_ltk+0xaa>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   4f636:	2101      	movs	r1, #1
   4f638:	4630      	mov	r0, r6
   4f63a:	f7ff fc2f 	bl	4ee9c <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   4f63e:	b3a8      	cbz	r0, 4f6ac <bt_smp_request_ltk+0xaa>
	return MIN(req->max_key_size, rsp->max_key_size);
   4f640:	7d2c      	ldrb	r4, [r5, #20]
   4f642:	7b6b      	ldrb	r3, [r5, #13]
   4f644:	429c      	cmp	r4, r3
   4f646:	bf28      	it	cs
   4f648:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   4f64a:	4622      	mov	r2, r4
   4f64c:	f105 0147 	add.w	r1, r5, #71	; 0x47
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   4f650:	4640      	mov	r0, r8
   4f652:	f7fc fb88 	bl	4bd66 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   4f656:	2c0f      	cmp	r4, #15
   4f658:	d806      	bhi.n	4f668 <bt_smp_request_ltk+0x66>
			(void)memset(ltk + enc_size, 0,
   4f65a:	f1c4 0210 	rsb	r2, r4, #16
   4f65e:	2100      	movs	r1, #0
   4f660:	eb08 0004 	add.w	r0, r8, r4
   4f664:	f7fc fb8a 	bl	4bd7c <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4f668:	4630      	mov	r0, r6
   4f66a:	2101      	movs	r1, #1
   4f66c:	f7ff fd5c 	bl	4f128 <atomic_set_bit>
		return true;
   4f670:	2001      	movs	r0, #1
}
   4f672:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!conn->le.keys) {
   4f676:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   4f67a:	b9f3      	cbnz	r3, 4f6ba <bt_smp_request_ltk+0xb8>
					     &conn->le.dst);
   4f67c:	f104 0b88 	add.w	fp, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   4f680:	7a21      	ldrb	r1, [r4, #8]
   4f682:	465a      	mov	r2, fp
   4f684:	2020      	movs	r0, #32
   4f686:	f7e4 fb25 	bl	33cd4 <bt_keys_find>
   4f68a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   4f68e:	b930      	cbnz	r0, 4f69e <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   4f690:	7a21      	ldrb	r1, [r4, #8]
   4f692:	465a      	mov	r2, fp
   4f694:	2001      	movs	r0, #1
   4f696:	f7e4 fb1d 	bl	33cd4 <bt_keys_find>
   4f69a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   4f69e:	f1b9 0f00 	cmp.w	r9, #0
   4f6a2:	d10a      	bne.n	4f6ba <bt_smp_request_ltk+0xb8>
   4f6a4:	ea5a 0707 	orrs.w	r7, sl, r7
   4f6a8:	d004      	beq.n	4f6b4 <bt_smp_request_ltk+0xb2>
   4f6aa:	e006      	b.n	4f6ba <bt_smp_request_ltk+0xb8>
	if (!conn->le.keys) {
   4f6ac:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   4f6b0:	2b00      	cmp	r3, #0
   4f6b2:	d0e3      	beq.n	4f67c <bt_smp_request_ltk+0x7a>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   4f6b4:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   4f6b8:	b971      	cbnz	r1, 4f6d8 <bt_smp_request_ltk+0xd6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   4f6ba:	210f      	movs	r1, #15
   4f6bc:	4630      	mov	r0, r6
   4f6be:	f7ff fbed 	bl	4ee9c <atomic_test_bit>
   4f6c2:	b120      	cbz	r0, 4f6ce <bt_smp_request_ltk+0xcc>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   4f6c4:	2202      	movs	r2, #2
   4f6c6:	2106      	movs	r1, #6
   4f6c8:	4620      	mov	r0, r4
   4f6ca:	f7e0 fc21 	bl	2ff10 <bt_conn_security_changed>
	smp_reset(smp);
   4f6ce:	4628      	mov	r0, r5
   4f6d0:	f7ff ff6e 	bl	4f5b0 <smp_reset>
		return false;
   4f6d4:	2000      	movs	r0, #0
   4f6d6:	e7cc      	b.n	4f672 <bt_smp_request_ltk+0x70>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   4f6d8:	89cb      	ldrh	r3, [r1, #14]
   4f6da:	069b      	lsls	r3, r3, #26
   4f6dc:	d5ed      	bpl.n	4f6ba <bt_smp_request_ltk+0xb8>
		enc_size = conn->le.keys->enc_size;
   4f6de:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   4f6e0:	311a      	adds	r1, #26
   4f6e2:	4622      	mov	r2, r4
   4f6e4:	e7b4      	b.n	4f650 <bt_smp_request_ltk+0x4e>

0004f6e6 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   4f6e6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   4f6ea:	4770      	bx	lr

0004f6ec <bt_smp_start_security>:
{
   4f6ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   4f6f0:	78c6      	ldrb	r6, [r0, #3]
{
   4f6f2:	4604      	mov	r4, r0
	switch (conn->role) {
   4f6f4:	b13e      	cbz	r6, 4f706 <bt_smp_start_security+0x1a>
   4f6f6:	2e01      	cmp	r6, #1
   4f6f8:	d03e      	beq.n	4f778 <bt_smp_start_security+0x8c>
		return -EIO;
   4f6fa:	f06f 0415 	mvn.w	r4, #21
}
   4f6fe:	4620      	mov	r0, r4
   4f700:	b003      	add	sp, #12
   4f702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		smp = smp_chan_get(conn);
   4f706:	f7ff fbc2 	bl	4ee8e <smp_chan_get>
		if (!smp) {
   4f70a:	4605      	mov	r5, r0
   4f70c:	b910      	cbnz	r0, 4f714 <bt_smp_start_security+0x28>
			return -ENOTCONN;
   4f70e:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   4f712:	e7f4      	b.n	4f6fe <bt_smp_start_security+0x12>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   4f714:	1d06      	adds	r6, r0, #4
   4f716:	2103      	movs	r1, #3
   4f718:	4630      	mov	r0, r6
   4f71a:	f7ff fbbf 	bl	4ee9c <atomic_test_bit>
   4f71e:	b110      	cbz	r0, 4f726 <bt_smp_start_security+0x3a>
			return -EBUSY;
   4f720:	f06f 040f 	mvn.w	r4, #15
   4f724:	e7eb      	b.n	4f6fe <bt_smp_start_security+0x12>
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   4f726:	2101      	movs	r1, #1
   4f728:	4630      	mov	r0, r6
   4f72a:	f7ff fbb7 	bl	4ee9c <atomic_test_bit>
   4f72e:	2800      	cmp	r0, #0
   4f730:	d1f6      	bne.n	4f720 <bt_smp_start_security+0x34>
		if (!smp_keys_check(conn)) {
   4f732:	4620      	mov	r0, r4
   4f734:	f7ff fbbb 	bl	4eeae <smp_keys_check>
   4f738:	b928      	cbnz	r0, 4f746 <bt_smp_start_security+0x5a>
			return smp_send_pairing_req(conn);
   4f73a:	4620      	mov	r0, r4
}
   4f73c:	b003      	add	sp, #12
   4f73e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return smp_send_pairing_req(conn);
   4f742:	f7e3 bbe1 	b.w	32f08 <smp_send_pairing_req>
						  conn->le.keys->ltk.rand,
   4f746:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
		err = bt_conn_le_start_encryption(conn,
   4f74a:	7b0b      	ldrb	r3, [r1, #12]
   4f74c:	9300      	str	r3, [sp, #0]
   4f74e:	f101 0218 	add.w	r2, r1, #24
   4f752:	f101 031a 	add.w	r3, r1, #26
   4f756:	4620      	mov	r0, r4
   4f758:	3110      	adds	r1, #16
   4f75a:	f7fd fb82 	bl	4ce62 <bt_conn_le_start_encryption>
		if (err) {
   4f75e:	4604      	mov	r4, r0
   4f760:	2800      	cmp	r0, #0
   4f762:	d1cc      	bne.n	4f6fe <bt_smp_start_security+0x12>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   4f764:	210b      	movs	r1, #11
   4f766:	4628      	mov	r0, r5
   4f768:	f7ff fcde 	bl	4f128 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4f76c:	2101      	movs	r1, #1
   4f76e:	4630      	mov	r0, r6
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   4f770:	f7ff fcda 	bl	4f128 <atomic_set_bit>
	return 0;
   4f774:	2400      	movs	r4, #0
   4f776:	e7c2      	b.n	4f6fe <bt_smp_start_security+0x12>
	smp = smp_chan_get(conn);
   4f778:	f7ff fb89 	bl	4ee8e <smp_chan_get>
	if (!smp) {
   4f77c:	4605      	mov	r5, r0
   4f77e:	2800      	cmp	r0, #0
   4f780:	d0c5      	beq.n	4f70e <bt_smp_start_security+0x22>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   4f782:	f100 0804 	add.w	r8, r0, #4
   4f786:	2104      	movs	r1, #4
   4f788:	4640      	mov	r0, r8
   4f78a:	f7ff fb87 	bl	4ee9c <atomic_test_bit>
   4f78e:	2800      	cmp	r0, #0
   4f790:	d150      	bne.n	4f834 <bt_smp_start_security+0x148>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   4f792:	2103      	movs	r1, #3
   4f794:	4640      	mov	r0, r8
   4f796:	f7ff fb81 	bl	4ee9c <atomic_test_bit>
   4f79a:	2800      	cmp	r0, #0
   4f79c:	d1c0      	bne.n	4f720 <bt_smp_start_security+0x34>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   4f79e:	4631      	mov	r1, r6
   4f7a0:	4640      	mov	r0, r8
   4f7a2:	f7ff fb7b 	bl	4ee9c <atomic_test_bit>
   4f7a6:	2800      	cmp	r0, #0
   4f7a8:	d1ba      	bne.n	4f720 <bt_smp_start_security+0x34>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   4f7aa:	7aa0      	ldrb	r0, [r4, #10]
   4f7ac:	f7e3 fb20 	bl	32df0 <sec_level_reachable.isra.0>
   4f7b0:	b168      	cbz	r0, 4f7ce <bt_smp_start_security+0xe2>
	if (!conn->le.keys) {
   4f7b2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   4f7b6:	b983      	cbnz	r3, 4f7da <bt_smp_start_security+0xee>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   4f7b8:	7a20      	ldrb	r0, [r4, #8]
   4f7ba:	f104 0188 	add.w	r1, r4, #136	; 0x88
   4f7be:	f7e4 fa07 	bl	33bd0 <bt_keys_get_addr>
   4f7c2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   4f7c6:	b940      	cbnz	r0, 4f7da <bt_smp_start_security+0xee>
			return -ENOMEM;
   4f7c8:	f06f 040b 	mvn.w	r4, #11
   4f7cc:	e797      	b.n	4f6fe <bt_smp_start_security+0x12>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   4f7ce:	4620      	mov	r0, r4
   4f7d0:	f7ff fb6d 	bl	4eeae <smp_keys_check>
   4f7d4:	2800      	cmp	r0, #0
   4f7d6:	d1ec      	bne.n	4f7b2 <bt_smp_start_security+0xc6>
   4f7d8:	e78f      	b.n	4f6fa <bt_smp_start_security+0xe>
	if (smp_init(smp) != 0) {
   4f7da:	4628      	mov	r0, r5
   4f7dc:	f7e3 fb62 	bl	32ea4 <smp_init>
   4f7e0:	4607      	mov	r7, r0
   4f7e2:	b110      	cbz	r0, 4f7ea <bt_smp_start_security+0xfe>
		return -ENOBUFS;
   4f7e4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   4f7e8:	e789      	b.n	4f6fe <bt_smp_start_security+0x12>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   4f7ea:	210b      	movs	r1, #11
   4f7ec:	4628      	mov	r0, r5
   4f7ee:	f7ff fcdf 	bl	4f1b0 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   4f7f2:	4606      	mov	r6, r0
   4f7f4:	2800      	cmp	r0, #0
   4f7f6:	d0f5      	beq.n	4f7e4 <bt_smp_start_security+0xf8>
   4f7f8:	2101      	movs	r1, #1
   4f7fa:	3008      	adds	r0, #8
   4f7fc:	f000 fa94 	bl	4fd28 <net_buf_simple_add>
   4f800:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   4f802:	2009      	movs	r0, #9
   4f804:	f7e3 fa3a 	bl	32c7c <get_auth.constprop.0>
   4f808:	463b      	mov	r3, r7
   4f80a:	f889 0000 	strb.w	r0, [r9]
   4f80e:	4632      	mov	r2, r6
   4f810:	4620      	mov	r0, r4
   4f812:	9700      	str	r7, [sp, #0]
   4f814:	2106      	movs	r1, #6
   4f816:	f7fd fcca 	bl	4d1ae <bt_l2cap_send_cb>
	if (err) {
   4f81a:	4604      	mov	r4, r0
   4f81c:	b118      	cbz	r0, 4f826 <bt_smp_start_security+0x13a>
		net_buf_unref(req_buf);
   4f81e:	4630      	mov	r0, r6
   4f820:	f7f4 f8f8 	bl	43a14 <net_buf_unref>
		return err;
   4f824:	e76b      	b.n	4f6fe <bt_smp_start_security+0x12>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   4f826:	210f      	movs	r1, #15
   4f828:	4640      	mov	r0, r8
   4f82a:	f7ff fc7d 	bl	4f128 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   4f82e:	2101      	movs	r1, #1
   4f830:	4628      	mov	r0, r5
   4f832:	e79d      	b.n	4f770 <bt_smp_start_security+0x84>
		return -EIO;
   4f834:	f06f 0404 	mvn.w	r4, #4
   4f838:	e761      	b.n	4f6fe <bt_smp_start_security+0x12>

0004f83a <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4f83a:	1d03      	adds	r3, r0, #4
{
   4f83c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4f83e:	4605      	mov	r5, r0
   4f840:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4f842:	4618      	mov	r0, r3
   4f844:	2103      	movs	r1, #3
   4f846:	f7ff fb29 	bl	4ee9c <atomic_test_bit>
   4f84a:	b1d0      	cbz	r0, 4f882 <smp_error+0x48>
		smp_pairing_complete(smp, reason);
   4f84c:	4631      	mov	r1, r6
   4f84e:	4628      	mov	r0, r5
   4f850:	f7e4 f832 	bl	338b8 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   4f854:	2105      	movs	r1, #5
   4f856:	4628      	mov	r0, r5
   4f858:	f7ff fcaa 	bl	4f1b0 <smp_create_pdu.constprop.0>
	if (!buf) {
   4f85c:	4604      	mov	r4, r0
   4f85e:	b308      	cbz	r0, 4f8a4 <smp_error+0x6a>
   4f860:	2101      	movs	r1, #1
   4f862:	3008      	adds	r0, #8
   4f864:	f000 fa60 	bl	4fd28 <net_buf_simple_add>
   4f868:	2300      	movs	r3, #0
	rsp->reason = reason;
   4f86a:	7006      	strb	r6, [r0, #0]
   4f86c:	9300      	str	r3, [sp, #0]
   4f86e:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   4f872:	4622      	mov	r2, r4
   4f874:	2106      	movs	r1, #6
   4f876:	f7fd fc9a 	bl	4d1ae <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   4f87a:	b978      	cbnz	r0, 4f89c <smp_error+0x62>
	return 0;
   4f87c:	2000      	movs	r0, #0
}
   4f87e:	b002      	add	sp, #8
   4f880:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   4f882:	2101      	movs	r1, #1
   4f884:	4618      	mov	r0, r3
   4f886:	f7ff fb09 	bl	4ee9c <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4f88a:	2800      	cmp	r0, #0
   4f88c:	d1de      	bne.n	4f84c <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   4f88e:	210f      	movs	r1, #15
   4f890:	4618      	mov	r0, r3
   4f892:	f7ff fb03 	bl	4ee9c <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   4f896:	2800      	cmp	r0, #0
   4f898:	d1d8      	bne.n	4f84c <smp_error+0x12>
   4f89a:	e7db      	b.n	4f854 <smp_error+0x1a>
		net_buf_unref(buf);
   4f89c:	4620      	mov	r0, r4
   4f89e:	f7f4 f8b9 	bl	43a14 <net_buf_unref>
   4f8a2:	e7eb      	b.n	4f87c <smp_error+0x42>
		return -ENOBUFS;
   4f8a4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4f8a8:	e7e9      	b.n	4f87e <smp_error+0x44>

0004f8aa <bt_smp_dhkey_ready>:
{
   4f8aa:	b570      	push	{r4, r5, r6, lr}
   4f8ac:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   4f8ae:	2008      	movs	r0, #8
   4f8b0:	f7e3 f99c 	bl	32bec <smp_find>
	if (smp) {
   4f8b4:	4604      	mov	r4, r0
   4f8b6:	b1b8      	cbz	r0, 4f8e8 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   4f8b8:	1d05      	adds	r5, r0, #4
   4f8ba:	2108      	movs	r1, #8
   4f8bc:	4628      	mov	r0, r5
   4f8be:	f7ff fb69 	bl	4ef94 <atomic_clear_bit>
	if (!dhkey) {
   4f8c2:	b3c6      	cbz	r6, 4f936 <bt_smp_dhkey_ready+0x8c>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   4f8c4:	2107      	movs	r1, #7
   4f8c6:	f7ff fb65 	bl	4ef94 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   4f8ca:	4631      	mov	r1, r6
   4f8cc:	2220      	movs	r2, #32
   4f8ce:	f104 0097 	add.w	r0, r4, #151	; 0x97
   4f8d2:	f7fc fa48 	bl	4bd66 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   4f8d6:	210a      	movs	r1, #10
   4f8d8:	4628      	mov	r0, r5
   4f8da:	f7ff fadf 	bl	4ee9c <atomic_test_bit>
   4f8de:	b168      	cbz	r0, 4f8fc <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4f8e0:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4f8e2:	4628      	mov	r0, r5
   4f8e4:	f7ff fc20 	bl	4f128 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   4f8e8:	2007      	movs	r0, #7
   4f8ea:	f7e3 f97f 	bl	32bec <smp_find>
		if (smp) {
   4f8ee:	4604      	mov	r4, r0
   4f8f0:	b118      	cbz	r0, 4f8fa <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   4f8f2:	f7e3 faf3 	bl	32edc <smp_dhkey_generate>
			if (err) {
   4f8f6:	4601      	mov	r1, r0
   4f8f8:	b9b0      	cbnz	r0, 4f928 <bt_smp_dhkey_ready+0x7e>
}
   4f8fa:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   4f8fc:	2110      	movs	r1, #16
   4f8fe:	4628      	mov	r0, r5
   4f900:	f7ff facc 	bl	4ee9c <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4f904:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   4f906:	2800      	cmp	r0, #0
   4f908:	d1eb      	bne.n	4f8e2 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   4f90a:	4628      	mov	r0, r5
   4f90c:	f7ff fac6 	bl	4ee9c <atomic_test_bit>
   4f910:	2800      	cmp	r0, #0
   4f912:	d0e9      	beq.n	4f8e8 <bt_smp_dhkey_ready+0x3e>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4f914:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   4f918:	78db      	ldrb	r3, [r3, #3]
			return compute_and_send_central_dhcheck(smp);
   4f91a:	4620      	mov	r0, r4
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4f91c:	b943      	cbnz	r3, 4f930 <bt_smp_dhkey_ready+0x86>
			return compute_and_send_central_dhcheck(smp);
   4f91e:	f7ff fc96 	bl	4f24e <compute_and_send_central_dhcheck>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   4f922:	4601      	mov	r1, r0
		if (err) {
   4f924:	2800      	cmp	r0, #0
   4f926:	d0df      	beq.n	4f8e8 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   4f928:	4620      	mov	r0, r4
   4f92a:	f7ff ff86 	bl	4f83a <smp_error>
   4f92e:	e7db      	b.n	4f8e8 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   4f930:	f7ff fce1 	bl	4f2f6 <compute_and_check_and_send_periph_dhcheck>
   4f934:	e7f5      	b.n	4f922 <bt_smp_dhkey_ready+0x78>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   4f936:	210b      	movs	r1, #11
   4f938:	e7f6      	b.n	4f928 <bt_smp_dhkey_ready+0x7e>

0004f93a <smp_ident_addr_info>:
{
   4f93a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   4f93e:	688f      	ldr	r7, [r1, #8]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   4f940:	783b      	ldrb	r3, [r7, #0]
{
   4f942:	4604      	mov	r4, r0
   4f944:	b123      	cbz	r3, 4f950 <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
   4f946:	79bb      	ldrb	r3, [r7, #6]
   4f948:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   4f94c:	2bc0      	cmp	r3, #192	; 0xc0
   4f94e:	d176      	bne.n	4fa3e <smp_ident_addr_info+0x104>
	struct bt_conn *conn = smp->chan.chan.conn;
   4f950:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   4f954:	f105 0888 	add.w	r8, r5, #136	; 0x88
	return memcmp(a, b, sizeof(*a));
   4f958:	2207      	movs	r2, #7
   4f95a:	4639      	mov	r1, r7
   4f95c:	4640      	mov	r0, r8
   4f95e:	f7fc f9f2 	bl	4bd46 <memcmp>
   4f962:	b180      	cbz	r0, 4f986 <smp_ident_addr_info+0x4c>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   4f964:	7a28      	ldrb	r0, [r5, #8]
   4f966:	4639      	mov	r1, r7
   4f968:	f7e4 fa2c 	bl	33dc4 <bt_keys_find_addr>
		if (keys) {
   4f96c:	4606      	mov	r6, r0
   4f96e:	b150      	cbz	r0, 4f986 <smp_ident_addr_info+0x4c>
			if (!update_keys_check(smp, keys)) {
   4f970:	4601      	mov	r1, r0
   4f972:	4620      	mov	r0, r4
   4f974:	f7ff fac9 	bl	4ef0a <update_keys_check>
   4f978:	b910      	cbnz	r0, 4f980 <smp_ident_addr_info+0x46>
				return BT_SMP_ERR_UNSPECIFIED;
   4f97a:	2008      	movs	r0, #8
}
   4f97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_keys_clear(keys);
   4f980:	4630      	mov	r0, r6
   4f982:	f7e4 fa3d 	bl	33e00 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   4f986:	210d      	movs	r1, #13
   4f988:	1d20      	adds	r0, r4, #4
   4f98a:	f7ff fa87 	bl	4ee9c <atomic_test_bit>
   4f98e:	b398      	cbz	r0, 4f9f8 <smp_ident_addr_info+0xbe>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   4f990:	7a29      	ldrb	r1, [r5, #8]
   4f992:	4642      	mov	r2, r8
   4f994:	2002      	movs	r0, #2
   4f996:	f000 f909 	bl	4fbac <bt_keys_get_type>
		if (!keys) {
   4f99a:	4606      	mov	r6, r0
   4f99c:	2800      	cmp	r0, #0
   4f99e:	d0ec      	beq.n	4f97a <smp_ident_addr_info+0x40>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   4f9a0:	78eb      	ldrb	r3, [r5, #3]
   4f9a2:	2b00      	cmp	r3, #0
   4f9a4:	d144      	bne.n	4fa30 <smp_ident_addr_info+0xf6>
			dst = &conn->le.resp_addr;
   4f9a6:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   4f9aa:	780b      	ldrb	r3, [r1, #0]
   4f9ac:	2b01      	cmp	r3, #1
   4f9ae:	d120      	bne.n	4f9f2 <smp_ident_addr_info+0xb8>
		if (bt_addr_le_is_rpa(dst)) {
   4f9b0:	798b      	ldrb	r3, [r1, #6]
   4f9b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   4f9b6:	2b40      	cmp	r3, #64	; 0x40
   4f9b8:	d11b      	bne.n	4f9f2 <smp_ident_addr_info+0xb8>
	memcpy(dst, src, sizeof(*dst));
   4f9ba:	2206      	movs	r2, #6
   4f9bc:	3101      	adds	r1, #1
   4f9be:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   4f9c2:	f7fc f9d0 	bl	4bd66 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   4f9c6:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   4f9ca:	b193      	cbz	r3, 4f9f2 <smp_ident_addr_info+0xb8>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   4f9cc:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   4f9d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   4f9d4:	2bc0      	cmp	r3, #192	; 0xc0
   4f9d6:	d00c      	beq.n	4f9f2 <smp_ident_addr_info+0xb8>
	memcpy(dst, src, sizeof(*dst));
   4f9d8:	2207      	movs	r2, #7
   4f9da:	4639      	mov	r1, r7
   4f9dc:	1c70      	adds	r0, r6, #1
   4f9de:	f7fc f9c2 	bl	4bd66 <memcpy>
   4f9e2:	2207      	movs	r2, #7
   4f9e4:	4639      	mov	r1, r7
   4f9e6:	4640      	mov	r0, r8
   4f9e8:	f7fc f9bd 	bl	4bd66 <memcpy>
				bt_conn_identity_resolved(conn);
   4f9ec:	4628      	mov	r0, r5
   4f9ee:	f7e0 fa61 	bl	2feb4 <bt_conn_identity_resolved>
		bt_id_add(keys);
   4f9f2:	4630      	mov	r0, r6
   4f9f4:	f7de fe9e 	bl	2e734 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   4f9f8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   4f9fc:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   4fa00:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   4fa02:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   4fa06:	d503      	bpl.n	4fa10 <smp_ident_addr_info+0xd6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   4fa08:	210a      	movs	r1, #10
   4fa0a:	4620      	mov	r0, r4
   4fa0c:	f7ff fb8c 	bl	4f128 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4fa10:	78eb      	ldrb	r3, [r5, #3]
   4fa12:	b943      	cbnz	r3, 4fa26 <smp_ident_addr_info+0xec>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   4fa14:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   4fa18:	b92b      	cbnz	r3, 4fa26 <smp_ident_addr_info+0xec>
	struct bt_keys *keys = conn->le.keys;
   4fa1a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (!keys) {
   4fa1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   4fa22:	2b00      	cmp	r3, #0
   4fa24:	d0a9      	beq.n	4f97a <smp_ident_addr_info+0x40>
	if (!smp->local_dist && !smp->remote_dist) {
   4fa26:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   4fa2a:	b121      	cbz	r1, 4fa36 <smp_ident_addr_info+0xfc>
	return 0;
   4fa2c:	2000      	movs	r0, #0
   4fa2e:	e7a5      	b.n	4f97c <smp_ident_addr_info+0x42>
			dst = &conn->le.init_addr;
   4fa30:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   4fa34:	e7b9      	b.n	4f9aa <smp_ident_addr_info+0x70>
		smp_pairing_complete(smp, 0);
   4fa36:	4620      	mov	r0, r4
   4fa38:	f7e3 ff3e 	bl	338b8 <smp_pairing_complete>
   4fa3c:	e7f6      	b.n	4fa2c <smp_ident_addr_info+0xf2>
		return BT_SMP_ERR_INVALID_PARAMS;
   4fa3e:	200a      	movs	r0, #10
   4fa40:	e79c      	b.n	4f97c <smp_ident_addr_info+0x42>

0004fa42 <bt_smp_disconnected>:
{
   4fa42:	b570      	push	{r4, r5, r6, lr}
   4fa44:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   4fa46:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   4fa4a:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4fa4e:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   4fa50:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   4fa54:	f001 f978 	bl	50d48 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4fa58:	2103      	movs	r1, #3
   4fa5a:	4620      	mov	r0, r4
   4fa5c:	f7ff fa1e 	bl	4ee9c <atomic_test_bit>
   4fa60:	b1a0      	cbz	r0, 4fa8c <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   4fa62:	2108      	movs	r1, #8
   4fa64:	4630      	mov	r0, r6
   4fa66:	f7e3 ff27 	bl	338b8 <smp_pairing_complete>
	if (keys) {
   4fa6a:	b13d      	cbz	r5, 4fa7c <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   4fa6c:	89eb      	ldrh	r3, [r5, #14]
   4fa6e:	b113      	cbz	r3, 4fa76 <bt_smp_disconnected+0x34>
   4fa70:	7b6b      	ldrb	r3, [r5, #13]
   4fa72:	079b      	lsls	r3, r3, #30
   4fa74:	d502      	bpl.n	4fa7c <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   4fa76:	4628      	mov	r0, r5
   4fa78:	f7e4 f9c2 	bl	33e00 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   4fa7c:	4630      	mov	r0, r6
   4fa7e:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   4fa82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   4fa86:	2100      	movs	r1, #0
   4fa88:	f7fc b978 	b.w	4bd7c <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   4fa8c:	2101      	movs	r1, #1
   4fa8e:	4620      	mov	r0, r4
   4fa90:	f7ff fa04 	bl	4ee9c <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4fa94:	2800      	cmp	r0, #0
   4fa96:	d1e4      	bne.n	4fa62 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   4fa98:	210f      	movs	r1, #15
   4fa9a:	4620      	mov	r0, r4
   4fa9c:	f7ff f9fe 	bl	4ee9c <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   4faa0:	2800      	cmp	r0, #0
   4faa2:	d1de      	bne.n	4fa62 <bt_smp_disconnected+0x20>
   4faa4:	e7e1      	b.n	4fa6a <bt_smp_disconnected+0x28>

0004faa6 <smp_timeout>:
{
   4faa6:	b510      	push	{r4, lr}
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   4faa8:	2108      	movs	r1, #8
{
   4faaa:	4604      	mov	r4, r0
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   4faac:	f5a0 70ec 	sub.w	r0, r0, #472	; 0x1d8
   4fab0:	f7e3 ff02 	bl	338b8 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   4fab4:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
   4fab8:	2104      	movs	r1, #4
}
   4faba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   4fabe:	f7ff bb33 	b.w	4f128 <atomic_set_bit>

0004fac2 <bt_smp_update_keys>:
{
   4fac2:	b570      	push	{r4, r5, r6, lr}
   4fac4:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   4fac6:	f7ff f9e2 	bl	4ee8e <smp_chan_get>
	if (!smp) {
   4faca:	4605      	mov	r5, r0
   4facc:	2800      	cmp	r0, #0
   4face:	d06a      	beq.n	4fba6 <bt_smp_update_keys+0xe4>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   4fad0:	1d06      	adds	r6, r0, #4
   4fad2:	2103      	movs	r1, #3
   4fad4:	4630      	mov	r0, r6
   4fad6:	f7ff f9e1 	bl	4ee9c <atomic_test_bit>
   4fada:	2800      	cmp	r0, #0
   4fadc:	d063      	beq.n	4fba6 <bt_smp_update_keys+0xe4>
	if (conn->le.keys) {
   4fade:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4fae2:	b108      	cbz	r0, 4fae8 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   4fae4:	f7e4 f98c 	bl	33e00 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   4fae8:	7a20      	ldrb	r0, [r4, #8]
   4faea:	f104 0188 	add.w	r1, r4, #136	; 0x88
   4faee:	f7e4 f86f 	bl	33bd0 <bt_keys_get_addr>
   4faf2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   4faf6:	b928      	cbnz	r0, 4fb04 <bt_smp_update_keys+0x42>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   4faf8:	4628      	mov	r0, r5
   4fafa:	2108      	movs	r1, #8
}
   4fafc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   4fb00:	f7ff be9b 	b.w	4f83a <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   4fb04:	210e      	movs	r1, #14
   4fb06:	4630      	mov	r0, r6
   4fb08:	f7ff f9c8 	bl	4ee9c <atomic_test_bit>
   4fb0c:	b128      	cbz	r0, 4fb1a <bt_smp_update_keys+0x58>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   4fb0e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   4fb12:	7b53      	ldrb	r3, [r2, #13]
   4fb14:	f043 0302 	orr.w	r3, r3, #2
   4fb18:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   4fb1a:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   4fb1c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   4fb20:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   4fb22:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   4fb24:	d836      	bhi.n	4fb94 <bt_smp_update_keys+0xd2>
   4fb26:	b3c2      	cbz	r2, 4fb9a <bt_smp_update_keys+0xd8>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   4fb28:	f043 0301 	orr.w	r3, r3, #1
   4fb2c:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   4fb2e:	7b6b      	ldrb	r3, [r5, #13]
   4fb30:	7d2a      	ldrb	r2, [r5, #20]
   4fb32:	4293      	cmp	r3, r2
   4fb34:	bf28      	it	cs
   4fb36:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   4fb38:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   4fb3a:	4630      	mov	r0, r6
   4fb3c:	2105      	movs	r1, #5
   4fb3e:	f7ff f9ad 	bl	4ee9c <atomic_test_bit>
   4fb42:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   4fb46:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   4fb48:	b350      	cbz	r0, 4fba0 <bt_smp_update_keys+0xde>
		conn->le.keys->flags |= BT_KEYS_SC;
   4fb4a:	f042 0210 	orr.w	r2, r2, #16
   4fb4e:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   4fb50:	210d      	movs	r1, #13
   4fb52:	4630      	mov	r0, r6
   4fb54:	f7ff f9a2 	bl	4ee9c <atomic_test_bit>
   4fb58:	b328      	cbz	r0, 4fba6 <bt_smp_update_keys+0xe4>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   4fb5a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4fb5e:	2120      	movs	r1, #32
   4fb60:	f000 f834 	bl	4fbcc <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   4fb64:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4fb68:	f105 0147 	add.w	r1, r5, #71	; 0x47
   4fb6c:	2210      	movs	r2, #16
   4fb6e:	301a      	adds	r0, #26
   4fb70:	f7fc f8f9 	bl	4bd66 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   4fb74:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4fb78:	2208      	movs	r2, #8
   4fb7a:	2100      	movs	r1, #0
   4fb7c:	3010      	adds	r0, #16
   4fb7e:	f7fc f8fd 	bl	4bd7c <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   4fb82:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4fb86:	2202      	movs	r2, #2
}
   4fb88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   4fb8c:	2100      	movs	r1, #0
   4fb8e:	3018      	adds	r0, #24
   4fb90:	f7fc b8f4 	b.w	4bd7c <memset>
	switch (smp->method) {
   4fb94:	3a05      	subs	r2, #5
   4fb96:	2a01      	cmp	r2, #1
   4fb98:	d9c6      	bls.n	4fb28 <bt_smp_update_keys+0x66>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   4fb9a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		break;
   4fb9e:	e7c5      	b.n	4fb2c <bt_smp_update_keys+0x6a>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   4fba0:	f022 0210 	bic.w	r2, r2, #16
   4fba4:	735a      	strb	r2, [r3, #13]
}
   4fba6:	bd70      	pop	{r4, r5, r6, pc}

0004fba8 <id_add>:
	bt_id_add(keys);
   4fba8:	f7de bdc4 	b.w	2e734 <bt_id_add>

0004fbac <bt_keys_get_type>:
{
   4fbac:	b570      	push	{r4, r5, r6, lr}
   4fbae:	4604      	mov	r4, r0
   4fbb0:	460d      	mov	r5, r1
   4fbb2:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   4fbb4:	f7e4 f88e 	bl	33cd4 <bt_keys_find>
	if (keys) {
   4fbb8:	b938      	cbnz	r0, 4fbca <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   4fbba:	4631      	mov	r1, r6
   4fbbc:	4628      	mov	r0, r5
   4fbbe:	f7e4 f807 	bl	33bd0 <bt_keys_get_addr>
	if (!keys) {
   4fbc2:	b110      	cbz	r0, 4fbca <bt_keys_get_type+0x1e>
	keys->keys |= type;
   4fbc4:	89c3      	ldrh	r3, [r0, #14]
   4fbc6:	431c      	orrs	r4, r3
   4fbc8:	81c4      	strh	r4, [r0, #14]
}
   4fbca:	bd70      	pop	{r4, r5, r6, pc}

0004fbcc <bt_keys_add_type>:
	keys->keys |= type;
   4fbcc:	89c3      	ldrh	r3, [r0, #14]
   4fbce:	4319      	orrs	r1, r3
   4fbd0:	81c1      	strh	r1, [r0, #14]
}
   4fbd2:	4770      	bx	lr

0004fbd4 <keys_set>:
{
   4fbd4:	b570      	push	{r4, r5, r6, lr}
   4fbd6:	4606      	mov	r6, r0
   4fbd8:	b090      	sub	sp, #64	; 0x40
   4fbda:	4614      	mov	r4, r2
   4fbdc:	4618      	mov	r0, r3
	if (!name) {
   4fbde:	b326      	cbz	r6, 4fc2a <keys_set+0x56>
	len = read_cb(cb_arg, val, sizeof(val));
   4fbe0:	2234      	movs	r2, #52	; 0x34
   4fbe2:	a903      	add	r1, sp, #12
   4fbe4:	47a0      	blx	r4
	if (len < 0) {
   4fbe6:	1e04      	subs	r4, r0, #0
   4fbe8:	db1f      	blt.n	4fc2a <keys_set+0x56>
	err = bt_settings_decode_key(name, &addr);
   4fbea:	a901      	add	r1, sp, #4
   4fbec:	4630      	mov	r0, r6
   4fbee:	f7fc f982 	bl	4bef6 <bt_settings_decode_key>
	if (err) {
   4fbf2:	4605      	mov	r5, r0
   4fbf4:	b9c8      	cbnz	r0, 4fc2a <keys_set+0x56>
	settings_name_next(name, &next);
   4fbf6:	4669      	mov	r1, sp
   4fbf8:	4630      	mov	r0, r6
   4fbfa:	f7fa fde3 	bl	4a7c4 <settings_name_next>
	if (!next) {
   4fbfe:	9800      	ldr	r0, [sp, #0]
   4fc00:	b968      	cbnz	r0, 4fc1e <keys_set+0x4a>
	if (!len) {
   4fc02:	b9ac      	cbnz	r4, 4fc30 <keys_set+0x5c>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   4fc04:	aa01      	add	r2, sp, #4
   4fc06:	4621      	mov	r1, r4
   4fc08:	203f      	movs	r0, #63	; 0x3f
   4fc0a:	f7e4 f863 	bl	33cd4 <bt_keys_find>
		if (keys) {
   4fc0e:	b118      	cbz	r0, 4fc18 <keys_set+0x44>
			(void)memset(keys, 0, sizeof(*keys));
   4fc10:	2240      	movs	r2, #64	; 0x40
   4fc12:	4621      	mov	r1, r4
   4fc14:	f7fc f8b2 	bl	4bd7c <memset>
}
   4fc18:	4628      	mov	r0, r5
   4fc1a:	b010      	add	sp, #64	; 0x40
   4fc1c:	bd70      	pop	{r4, r5, r6, pc}
		unsigned long next_id = strtoul(next, NULL, 10);
   4fc1e:	220a      	movs	r2, #10
   4fc20:	4629      	mov	r1, r5
   4fc22:	f7fb ffe8 	bl	4bbf6 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   4fc26:	2800      	cmp	r0, #0
   4fc28:	d0eb      	beq.n	4fc02 <keys_set+0x2e>
		return -EINVAL;
   4fc2a:	f06f 0515 	mvn.w	r5, #21
   4fc2e:	e7f3      	b.n	4fc18 <keys_set+0x44>
	keys = bt_keys_get_addr(id, &addr);
   4fc30:	a901      	add	r1, sp, #4
   4fc32:	2000      	movs	r0, #0
   4fc34:	f7e3 ffcc 	bl	33bd0 <bt_keys_get_addr>
	if (!keys) {
   4fc38:	b150      	cbz	r0, 4fc50 <keys_set+0x7c>
	if (len != BT_KEYS_STORAGE_LEN) {
   4fc3a:	2c34      	cmp	r4, #52	; 0x34
   4fc3c:	d002      	beq.n	4fc44 <keys_set+0x70>
			bt_keys_clear(keys);
   4fc3e:	f7e4 f8df 	bl	33e00 <bt_keys_clear>
			return -EINVAL;
   4fc42:	e7f2      	b.n	4fc2a <keys_set+0x56>
		memcpy(keys->storage_start, val, len);
   4fc44:	4622      	mov	r2, r4
   4fc46:	a903      	add	r1, sp, #12
   4fc48:	300c      	adds	r0, #12
   4fc4a:	f7fc f88c 	bl	4bd66 <memcpy>
	return 0;
   4fc4e:	e7e3      	b.n	4fc18 <keys_set+0x44>
		return -ENOMEM;
   4fc50:	f06f 050b 	mvn.w	r5, #11
   4fc54:	e7e0      	b.n	4fc18 <keys_set+0x44>

0004fc56 <fixed_data_unref>:
}
   4fc56:	4770      	bx	lr

0004fc58 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   4fc58:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   4fc5a:	6849      	ldr	r1, [r1, #4]
   4fc5c:	6809      	ldr	r1, [r1, #0]
   4fc5e:	f7f3 be47 	b.w	438f0 <net_buf_alloc_len>

0004fc62 <net_buf_get>:
{
   4fc62:	b570      	push	{r4, r5, r6, lr}
   4fc64:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   4fc66:	f7f8 fa33 	bl	480d0 <z_impl_k_queue_get>
	if (!buf) {
   4fc6a:	4605      	mov	r5, r0
   4fc6c:	b128      	cbz	r0, 4fc7a <net_buf_get+0x18>
   4fc6e:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   4fc70:	7963      	ldrb	r3, [r4, #5]
   4fc72:	f013 0301 	ands.w	r3, r3, #1
   4fc76:	d102      	bne.n	4fc7e <net_buf_get+0x1c>
	frag->frags = NULL;
   4fc78:	6023      	str	r3, [r4, #0]
}
   4fc7a:	4628      	mov	r0, r5
   4fc7c:	bd70      	pop	{r4, r5, r6, pc}
   4fc7e:	2300      	movs	r3, #0
   4fc80:	2200      	movs	r2, #0
   4fc82:	4630      	mov	r0, r6
   4fc84:	f7f8 fa24 	bl	480d0 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   4fc88:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   4fc8a:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   4fc8c:	f023 0301 	bic.w	r3, r3, #1
   4fc90:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   4fc92:	4604      	mov	r4, r0
   4fc94:	e7ec      	b.n	4fc70 <net_buf_get+0xe>

0004fc96 <net_buf_simple_init_with_data>:
	buf->size  = size;
   4fc96:	b292      	uxth	r2, r2
	buf->__buf = data;
   4fc98:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   4fc9a:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   4fc9c:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   4fc9e:	8082      	strh	r2, [r0, #4]
}
   4fca0:	4770      	bx	lr

0004fca2 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   4fca2:	6883      	ldr	r3, [r0, #8]
   4fca4:	440b      	add	r3, r1
   4fca6:	6003      	str	r3, [r0, #0]
}
   4fca8:	4770      	bx	lr

0004fcaa <net_buf_put>:
{
   4fcaa:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   4fcac:	460a      	mov	r2, r1
   4fcae:	6814      	ldr	r4, [r2, #0]
   4fcb0:	b914      	cbnz	r4, 4fcb8 <net_buf_put+0xe>
}
   4fcb2:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   4fcb4:	f000 bf45 	b.w	50b42 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   4fcb8:	7953      	ldrb	r3, [r2, #5]
   4fcba:	f043 0301 	orr.w	r3, r3, #1
   4fcbe:	7153      	strb	r3, [r2, #5]
   4fcc0:	4622      	mov	r2, r4
   4fcc2:	e7f4      	b.n	4fcae <net_buf_put+0x4>

0004fcc4 <net_buf_ref>:
	buf->ref++;
   4fcc4:	7902      	ldrb	r2, [r0, #4]
   4fcc6:	3201      	adds	r2, #1
   4fcc8:	7102      	strb	r2, [r0, #4]
}
   4fcca:	4770      	bx	lr

0004fccc <net_buf_frag_last>:
{
   4fccc:	4603      	mov	r3, r0
	while (buf->frags) {
   4fcce:	4618      	mov	r0, r3
   4fcd0:	681b      	ldr	r3, [r3, #0]
   4fcd2:	2b00      	cmp	r3, #0
   4fcd4:	d1fb      	bne.n	4fcce <net_buf_frag_last+0x2>
}
   4fcd6:	4770      	bx	lr

0004fcd8 <net_buf_frag_insert>:
	if (parent->frags) {
   4fcd8:	6802      	ldr	r2, [r0, #0]
{
   4fcda:	b510      	push	{r4, lr}
	if (parent->frags) {
   4fcdc:	b12a      	cbz	r2, 4fcea <net_buf_frag_insert+0x12>
   4fcde:	460b      	mov	r3, r1
	while (buf->frags) {
   4fce0:	461c      	mov	r4, r3
   4fce2:	681b      	ldr	r3, [r3, #0]
   4fce4:	2b00      	cmp	r3, #0
   4fce6:	d1fb      	bne.n	4fce0 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   4fce8:	6022      	str	r2, [r4, #0]
	parent->frags = frag;
   4fcea:	6001      	str	r1, [r0, #0]
}
   4fcec:	bd10      	pop	{r4, pc}

0004fcee <net_buf_frag_add>:
{
   4fcee:	b510      	push	{r4, lr}
	if (!head) {
   4fcf0:	4604      	mov	r4, r0
   4fcf2:	b920      	cbnz	r0, 4fcfe <net_buf_frag_add+0x10>
	buf->ref++;
   4fcf4:	790b      	ldrb	r3, [r1, #4]
   4fcf6:	3301      	adds	r3, #1
   4fcf8:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   4fcfa:	4608      	mov	r0, r1
}
   4fcfc:	bd10      	pop	{r4, pc}
   4fcfe:	4603      	mov	r3, r0
	while (buf->frags) {
   4fd00:	4618      	mov	r0, r3
   4fd02:	681b      	ldr	r3, [r3, #0]
   4fd04:	2b00      	cmp	r3, #0
   4fd06:	d1fb      	bne.n	4fd00 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   4fd08:	f7ff ffe6 	bl	4fcd8 <net_buf_frag_insert>
   4fd0c:	4620      	mov	r0, r4
   4fd0e:	e7f5      	b.n	4fcfc <net_buf_frag_add+0xe>

0004fd10 <net_buf_frag_del>:
{
   4fd10:	b510      	push	{r4, lr}
	if (parent) {
   4fd12:	b108      	cbz	r0, 4fd18 <net_buf_frag_del+0x8>
		parent->frags = frag->frags;
   4fd14:	680b      	ldr	r3, [r1, #0]
   4fd16:	6003      	str	r3, [r0, #0]
	next_frag = frag->frags;
   4fd18:	680c      	ldr	r4, [r1, #0]
	frag->frags = NULL;
   4fd1a:	2300      	movs	r3, #0
	net_buf_unref(frag);
   4fd1c:	4608      	mov	r0, r1
	frag->frags = NULL;
   4fd1e:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   4fd20:	f7f3 fe78 	bl	43a14 <net_buf_unref>
}
   4fd24:	4620      	mov	r0, r4
   4fd26:	bd10      	pop	{r4, pc}

0004fd28 <net_buf_simple_add>:
	return buf->data + buf->len;
   4fd28:	8883      	ldrh	r3, [r0, #4]
   4fd2a:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   4fd2c:	4419      	add	r1, r3
   4fd2e:	8081      	strh	r1, [r0, #4]
	return tail;
}
   4fd30:	18d0      	adds	r0, r2, r3
   4fd32:	4770      	bx	lr

0004fd34 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   4fd34:	b430      	push	{r4, r5}
   4fd36:	8884      	ldrh	r4, [r0, #4]
   4fd38:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   4fd3a:	18a3      	adds	r3, r4, r2
   4fd3c:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   4fd3e:	1928      	adds	r0, r5, r4
}
   4fd40:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   4fd42:	f7fc b810 	b.w	4bd66 <memcpy>

0004fd46 <net_buf_simple_add_u8>:
   4fd46:	8883      	ldrh	r3, [r0, #4]
   4fd48:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   4fd4a:	b510      	push	{r4, lr}
	buf->len += len;
   4fd4c:	1c5c      	adds	r4, r3, #1
   4fd4e:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   4fd50:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   4fd52:	18d0      	adds	r0, r2, r3
   4fd54:	bd10      	pop	{r4, pc}

0004fd56 <net_buf_simple_add_le16>:
   4fd56:	8883      	ldrh	r3, [r0, #4]
   4fd58:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   4fd5a:	b530      	push	{r4, r5, lr}
   4fd5c:	18d4      	adds	r4, r2, r3
	buf->len += len;
   4fd5e:	1c9d      	adds	r5, r3, #2
   4fd60:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   4fd62:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   4fd64:	0a09      	lsrs	r1, r1, #8
   4fd66:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   4fd68:	bd30      	pop	{r4, r5, pc}

0004fd6a <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   4fd6a:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   4fd6c:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   4fd6e:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   4fd70:	1a40      	subs	r0, r0, r1
	buf->len += len;
   4fd72:	4411      	add	r1, r2
	buf->data -= len;
   4fd74:	6018      	str	r0, [r3, #0]
	buf->len += len;
   4fd76:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   4fd78:	4770      	bx	lr

0004fd7a <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   4fd7a:	8882      	ldrh	r2, [r0, #4]
   4fd7c:	1a52      	subs	r2, r2, r1
{
   4fd7e:	4603      	mov	r3, r0
	buf->len -= len;
   4fd80:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   4fd82:	6800      	ldr	r0, [r0, #0]
   4fd84:	4408      	add	r0, r1
   4fd86:	6018      	str	r0, [r3, #0]
}
   4fd88:	4770      	bx	lr

0004fd8a <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   4fd8a:	4603      	mov	r3, r0
	void *data = buf->data;
   4fd8c:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   4fd8e:	889a      	ldrh	r2, [r3, #4]
   4fd90:	1a52      	subs	r2, r2, r1
	buf->data += len;
   4fd92:	4401      	add	r1, r0
	buf->len -= len;
   4fd94:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   4fd96:	6019      	str	r1, [r3, #0]

	return data;
}
   4fd98:	4770      	bx	lr

0004fd9a <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   4fd9a:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   4fd9c:	6803      	ldr	r3, [r0, #0]
   4fd9e:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   4fda0:	2101      	movs	r1, #1
   4fda2:	f7ff ffea 	bl	4fd7a <net_buf_simple_pull>

	return val;
}
   4fda6:	4620      	mov	r0, r4
   4fda8:	bd10      	pop	{r4, pc}

0004fdaa <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   4fdaa:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   4fdac:	6803      	ldr	r3, [r0, #0]
   4fdae:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   4fdb0:	2102      	movs	r1, #2
   4fdb2:	f7ff ffe2 	bl	4fd7a <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   4fdb6:	4620      	mov	r0, r4
   4fdb8:	bd10      	pop	{r4, pc}

0004fdba <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   4fdba:	6802      	ldr	r2, [r0, #0]
   4fdbc:	6880      	ldr	r0, [r0, #8]
}
   4fdbe:	1a10      	subs	r0, r2, r0
   4fdc0:	4770      	bx	lr

0004fdc2 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   4fdc2:	8883      	ldrh	r3, [r0, #4]
   4fdc4:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   4fdc6:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   4fdc8:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   4fdca:	6803      	ldr	r3, [r0, #0]
   4fdcc:	1a5b      	subs	r3, r3, r1
}
   4fdce:	1ad0      	subs	r0, r2, r3
   4fdd0:	4770      	bx	lr

0004fdd2 <hid_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   4fdd2:	7081      	strb	r1, [r0, #2]
}
   4fdd4:	4770      	bx	lr

0004fdd6 <usb_hid_device_init>:
static int usb_hid_device_init(const struct device *dev)
{
	LOG_DBG("Init HID Device: dev %p (%s)", dev, dev->name);

	return 0;
}
   4fdd6:	2000      	movs	r0, #0
   4fdd8:	4770      	bx	lr

0004fdda <usb_hid_init>:
	usb_set_hid_report_size(cfg, dev_data->report_size);
   4fdda:	6903      	ldr	r3, [r0, #16]
   4fddc:	6842      	ldr	r2, [r0, #4]
   4fdde:	685b      	ldr	r3, [r3, #4]
   4fde0:	6852      	ldr	r2, [r2, #4]
	dst[0] = val;
   4fde2:	7413      	strb	r3, [r2, #16]
	dst[1] = val >> 8;
   4fde4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   4fde8:	7453      	strb	r3, [r2, #17]
}
   4fdea:	2000      	movs	r0, #0
   4fdec:	4770      	bx	lr

0004fdee <hid_int_ep_write>:
{
   4fdee:	b430      	push	{r4, r5}
	const struct usb_cfg_data *cfg = dev->config;
   4fdf0:	6844      	ldr	r4, [r0, #4]
	struct hid_device_info *hid_dev_data = dev->data;
   4fdf2:	6900      	ldr	r0, [r0, #16]
	if (hid_dev_data->configured && !hid_dev_data->suspended) {
   4fdf4:	7b05      	ldrb	r5, [r0, #12]
   4fdf6:	b135      	cbz	r5, 4fe06 <hid_int_ep_write+0x18>
   4fdf8:	7b40      	ldrb	r0, [r0, #13]
   4fdfa:	b920      	cbnz	r0, 4fe06 <hid_int_ep_write+0x18>
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
   4fdfc:	6a20      	ldr	r0, [r4, #32]
}
   4fdfe:	bc30      	pop	{r4, r5}
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
   4fe00:	7900      	ldrb	r0, [r0, #4]
   4fe02:	f7fa bc4e 	b.w	4a6a2 <usb_write>
}
   4fe06:	f06f 000a 	mvn.w	r0, #10
   4fe0a:	bc30      	pop	{r4, r5}
   4fe0c:	4770      	bx	lr

0004fe0e <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   4fe0e:	6903      	ldr	r3, [r0, #16]
{
   4fe10:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
   4fe12:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   4fe16:	2300      	movs	r3, #0
   4fe18:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   4fe1a:	7f83      	ldrb	r3, [r0, #30]
{
   4fe1c:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   4fe1e:	b113      	cbz	r3, 4fe26 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   4fe20:	7a40      	ldrb	r0, [r0, #9]
   4fe22:	f000 fb5a 	bl	504da <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   4fe26:	2301      	movs	r3, #1
   4fe28:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   4fe2a:	2300      	movs	r3, #0
   4fe2c:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   4fe2e:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   4fe30:	77a3      	strb	r3, [r4, #30]
}
   4fe32:	bd10      	pop	{r4, pc}

0004fe34 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   4fe34:	f7f8 b892 	b.w	47f5c <z_impl_k_mutex_lock>

0004fe38 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   4fe38:	f7f8 b908 	b.w	4804c <z_impl_k_mutex_unlock>

0004fe3c <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   4fe3c:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   4fe3e:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   4fe40:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   4fe44:	b921      	cbnz	r1, 4fe50 <usb_dc_ep_check_cap+0x14>
   4fe46:	3a00      	subs	r2, #0
   4fe48:	bf18      	it	ne
   4fe4a:	2201      	movne	r2, #1
   4fe4c:	4250      	negs	r0, r2
   4fe4e:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   4fe50:	2a08      	cmp	r2, #8
   4fe52:	d806      	bhi.n	4fe62 <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   4fe54:	2901      	cmp	r1, #1
   4fe56:	d107      	bne.n	4fe68 <usb_dc_ep_check_cap+0x2c>
   4fe58:	f083 0008 	eor.w	r0, r3, #8
   4fe5c:	f340 00c0 	sbfx	r0, r0, #3, #1
   4fe60:	4770      	bx	lr
		return -1;
   4fe62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4fe66:	4770      	bx	lr
	return 0;
   4fe68:	2000      	movs	r0, #0
}
   4fe6a:	4770      	bx	lr

0004fe6c <usb_dc_ep_read>:
{
   4fe6c:	b570      	push	{r4, r5, r6, lr}
   4fe6e:	4604      	mov	r4, r0
   4fe70:	460e      	mov	r6, r1
   4fe72:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   4fe74:	f7f4 fbf8 	bl	44668 <usb_dc_ep_read_wait>
	if (ret) {
   4fe78:	b930      	cbnz	r0, 4fe88 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   4fe7a:	b906      	cbnz	r6, 4fe7e <usb_dc_ep_read+0x12>
   4fe7c:	b125      	cbz	r5, 4fe88 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   4fe7e:	4620      	mov	r0, r4
}
   4fe80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   4fe84:	f7f4 bc38 	b.w	446f8 <usb_dc_ep_read_continue>
}
   4fe88:	bd70      	pop	{r4, r5, r6, pc}

0004fe8a <usb_dc_wakeup_request>:
{
   4fe8a:	b508      	push	{r3, lr}
	bool res = nrfx_usbd_wakeup_req();
   4fe8c:	f7f6 ffc4 	bl	46e18 <nrfx_usbd_wakeup_req>
	return 0;
   4fe90:	2800      	cmp	r0, #0
}
   4fe92:	bf0c      	ite	eq
   4fe94:	f06f 000a 	mvneq.w	r0, #10
   4fe98:	2000      	movne	r0, #0
   4fe9a:	bd08      	pop	{r3, pc}

0004fe9c <adc_context_on_timer_expired>:
{
   4fe9c:	b410      	push	{r4}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   4fe9e:	f1a0 0308 	sub.w	r3, r0, #8
   4fea2:	f3bf 8f5b 	dmb	ish
   4fea6:	e853 2f00 	ldrex	r2, [r3]
   4feaa:	1c51      	adds	r1, r2, #1
   4feac:	e843 1400 	strex	r4, r1, [r3]
   4feb0:	2c00      	cmp	r4, #0
   4feb2:	d1f8      	bne.n	4fea6 <adc_context_on_timer_expired+0xa>
   4feb4:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   4feb8:	b922      	cbnz	r2, 4fec4 <adc_context_on_timer_expired+0x28>
		adc_context_start_sampling(ctx);
   4feba:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
}
   4febe:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   4fec0:	f7f4 bd08 	b.w	448d4 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
   4fec4:	f06f 030f 	mvn.w	r3, #15
}
   4fec8:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   4feca:	6683      	str	r3, [r0, #104]	; 0x68
}
   4fecc:	4770      	bx	lr

0004fece <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   4fece:	6903      	ldr	r3, [r0, #16]
   4fed0:	b2c9      	uxtb	r1, r1
   4fed2:	220c      	movs	r2, #12
   4fed4:	fb01 3302 	mla	r3, r1, r2, r3
   4fed8:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   4feda:	f000 0007 	and.w	r0, r0, #7
   4fede:	4770      	bx	lr

0004fee0 <set_on_state>:
	__asm__ volatile(
   4fee0:	f04f 0320 	mov.w	r3, #32
   4fee4:	f3ef 8211 	mrs	r2, BASEPRI
   4fee8:	f383 8812 	msr	BASEPRI_MAX, r3
   4feec:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   4fef0:	6803      	ldr	r3, [r0, #0]
   4fef2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   4fef6:	f043 0302 	orr.w	r3, r3, #2
   4fefa:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   4fefc:	f382 8811 	msr	BASEPRI, r2
   4ff00:	f3bf 8f6f 	isb	sy
}
   4ff04:	4770      	bx	lr

0004ff06 <stop>:
{
   4ff06:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   4ff08:	6903      	ldr	r3, [r0, #16]
	return &data->subsys[type];
   4ff0a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   4ff0c:	f04f 0420 	mov.w	r4, #32
   4ff10:	f3ef 8511 	mrs	r5, BASEPRI
   4ff14:	f384 8812 	msr	BASEPRI_MAX, r4
   4ff18:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   4ff1c:	260c      	movs	r6, #12
   4ff1e:	fb06 3401 	mla	r4, r6, r1, r3
   4ff22:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   4ff24:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   4ff28:	d008      	beq.n	4ff3c <stop+0x36>
   4ff2a:	42a2      	cmp	r2, r4
   4ff2c:	d006      	beq.n	4ff3c <stop+0x36>
	__asm__ volatile(
   4ff2e:	f385 8811 	msr	BASEPRI, r5
   4ff32:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   4ff36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   4ff3a:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   4ff3c:	fb06 3301 	mla	r3, r6, r1, r3
   4ff40:	2201      	movs	r2, #1
   4ff42:	641a      	str	r2, [r3, #64]	; 0x40
   4ff44:	f385 8811 	msr	BASEPRI, r5
   4ff48:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   4ff4c:	6843      	ldr	r3, [r0, #4]
   4ff4e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   4ff52:	685b      	ldr	r3, [r3, #4]
   4ff54:	4798      	blx	r3
	return 0;
   4ff56:	2000      	movs	r0, #0
   4ff58:	e7ef      	b.n	4ff3a <stop+0x34>

0004ff5a <api_stop>:
	return stop(dev, subsys, CTX_API);
   4ff5a:	2280      	movs	r2, #128	; 0x80
   4ff5c:	f7ff bfd3 	b.w	4ff06 <stop>

0004ff60 <async_start>:
{
   4ff60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4ff62:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   4ff64:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   4ff66:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   4ff68:	f04f 0520 	mov.w	r5, #32
   4ff6c:	f3ef 8611 	mrs	r6, BASEPRI
   4ff70:	f385 8812 	msr	BASEPRI_MAX, r5
   4ff74:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   4ff78:	250c      	movs	r5, #12
   4ff7a:	fb05 4401 	mla	r4, r5, r1, r4
   4ff7e:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   4ff80:	f005 0c07 	and.w	ip, r5, #7
   4ff84:	f1bc 0f01 	cmp.w	ip, #1
   4ff88:	d10c      	bne.n	4ffa4 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   4ff8a:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   4ff8c:	f386 8811 	msr	BASEPRI, r6
   4ff90:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   4ff94:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   4ff98:	6843      	ldr	r3, [r0, #4]
   4ff9a:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   4ff9e:	4798      	blx	r3
	return 0;
   4ffa0:	2000      	movs	r0, #0
}
   4ffa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   4ffa4:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   4ffa8:	42af      	cmp	r7, r5
   4ffaa:	f386 8811 	msr	BASEPRI, r6
   4ffae:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   4ffb2:	bf0c      	ite	eq
   4ffb4:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   4ffb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   4ffbc:	e7f1      	b.n	4ffa2 <async_start+0x42>

0004ffbe <api_start>:
{
   4ffbe:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   4ffc0:	2480      	movs	r4, #128	; 0x80
   4ffc2:	9400      	str	r4, [sp, #0]
   4ffc4:	f7ff ffcc 	bl	4ff60 <async_start>
}
   4ffc8:	b002      	add	sp, #8
   4ffca:	bd10      	pop	{r4, pc}

0004ffcc <onoff_started_callback>:
	return &data->mgr[type];
   4ffcc:	6900      	ldr	r0, [r0, #16]
{
   4ffce:	b410      	push	{r4}
	return &data->mgr[type];
   4ffd0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   4ffd2:	241c      	movs	r4, #28
   4ffd4:	fb03 0004 	mla	r0, r3, r4, r0
   4ffd8:	2100      	movs	r1, #0
}
   4ffda:	bc10      	pop	{r4}
	notify(mgr, 0);
   4ffdc:	4710      	bx	r2

0004ffde <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   4ffde:	2000      	movs	r0, #0
   4ffe0:	f000 b922 	b.w	50228 <nrfx_clock_start>

0004ffe4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   4ffe4:	2000      	movs	r0, #0
   4ffe6:	f7f5 bfaf 	b.w	45f48 <nrfx_clock_stop>

0004ffea <blocking_start_callback>:
{
   4ffea:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   4ffec:	f7f8 b8a4 	b.w	48138 <z_impl_k_sem_give>

0004fff0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4fff0:	6843      	ldr	r3, [r0, #4]
   4fff2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   4fff4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   4fff8:	600b      	str	r3, [r1, #0]
}
   4fffa:	2000      	movs	r0, #0
   4fffc:	4770      	bx	lr

0004fffe <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4fffe:	6843      	ldr	r3, [r0, #4]
   50000:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   50002:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   50006:	4042      	eors	r2, r0
   50008:	400a      	ands	r2, r1
   5000a:	4042      	eors	r2, r0
    p_reg->OUT = value;
   5000c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   50010:	2000      	movs	r0, #0
   50012:	4770      	bx	lr

00050014 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   50014:	6843      	ldr	r3, [r0, #4]
   50016:	685b      	ldr	r3, [r3, #4]
}
   50018:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   5001a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   5001e:	4770      	bx	lr

00050020 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   50020:	6843      	ldr	r3, [r0, #4]
   50022:	685b      	ldr	r3, [r3, #4]
}
   50024:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   50026:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   5002a:	4770      	bx	lr

0005002c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   5002c:	6843      	ldr	r3, [r0, #4]
   5002e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   50030:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   50034:	404b      	eors	r3, r1
    p_reg->OUT = value;
   50036:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   5003a:	2000      	movs	r0, #0
   5003c:	4770      	bx	lr

0005003e <gpio_nrfx_manage_callback>:
	return port->data;
   5003e:	6903      	ldr	r3, [r0, #16]
	return list->head;
   50040:	6858      	ldr	r0, [r3, #4]
{
   50042:	b510      	push	{r4, lr}
	if (!sys_slist_is_empty(callbacks)) {
   50044:	b148      	cbz	r0, 5005a <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   50046:	4288      	cmp	r0, r1
   50048:	d113      	bne.n	50072 <gpio_nrfx_manage_callback+0x34>
Z_GENLIST_REMOVE(slist, snode)
   5004a:	689c      	ldr	r4, [r3, #8]
	return node->next;
   5004c:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   5004e:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   50050:	42a1      	cmp	r1, r4
   50052:	d100      	bne.n	50056 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   50054:	6098      	str	r0, [r3, #8]
	parent->next = child;
   50056:	2000      	movs	r0, #0
   50058:	6008      	str	r0, [r1, #0]
	if (set) {
   5005a:	b97a      	cbnz	r2, 5007c <gpio_nrfx_manage_callback+0x3e>
	return 0;
   5005c:	2000      	movs	r0, #0
}
   5005e:	bd10      	pop	{r4, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   50060:	4281      	cmp	r1, r0
   50062:	d106      	bne.n	50072 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   50064:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   50066:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   50068:	6898      	ldr	r0, [r3, #8]
   5006a:	4281      	cmp	r1, r0
   5006c:	d1f3      	bne.n	50056 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   5006e:	609c      	str	r4, [r3, #8]
}
   50070:	e7f1      	b.n	50056 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   50072:	4604      	mov	r4, r0
   50074:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   50076:	2800      	cmp	r0, #0
   50078:	d1f2      	bne.n	50060 <gpio_nrfx_manage_callback+0x22>
			if (!set) {
   5007a:	b13a      	cbz	r2, 5008c <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
   5007c:	685a      	ldr	r2, [r3, #4]
   5007e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   50080:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   50082:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   50084:	2a00      	cmp	r2, #0
   50086:	d1e9      	bne.n	5005c <gpio_nrfx_manage_callback+0x1e>
	list->tail = node;
   50088:	6099      	str	r1, [r3, #8]
}
   5008a:	e7e7      	b.n	5005c <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   5008c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   50090:	e7e5      	b.n	5005e <gpio_nrfx_manage_callback+0x20>

00050092 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   50092:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   50094:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));

	if (length > sizeof(dev_id.id)) {
   50098:	2908      	cmp	r1, #8
   5009a:	6e66      	ldr	r6, [r4, #100]	; 0x64
   5009c:	6e65      	ldr	r5, [r4, #100]	; 0x64
   5009e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   500a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   500a2:	ea4f 2515 	mov.w	r5, r5, lsr #8
   500a6:	ea4f 6303 	mov.w	r3, r3, lsl #24
   500aa:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   500ae:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   500b2:	ea4f 2202 	mov.w	r2, r2, lsl #8
   500b6:	ea43 0305 	orr.w	r3, r3, r5
   500ba:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   500be:	ea43 0302 	orr.w	r3, r3, r2
   500c2:	9300      	str	r3, [sp, #0]
   500c4:	6e26      	ldr	r6, [r4, #96]	; 0x60
   500c6:	6e25      	ldr	r5, [r4, #96]	; 0x60
   500c8:	6e22      	ldr	r2, [r4, #96]	; 0x60
   500ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   500cc:	ea4f 2415 	mov.w	r4, r5, lsr #8
   500d0:	ea4f 6303 	mov.w	r3, r3, lsl #24
   500d4:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   500d8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   500dc:	ea43 0304 	orr.w	r3, r3, r4
   500e0:	ea4f 2402 	mov.w	r4, r2, lsl #8
	if (length > sizeof(dev_id.id)) {
   500e4:	bf28      	it	cs
   500e6:	2108      	movcs	r1, #8
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   500e8:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   500ec:	4323      	orrs	r3, r4
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   500ee:	460a      	mov	r2, r1
	if (length > sizeof(dev_id.id)) {
   500f0:	460c      	mov	r4, r1
	memcpy(buffer, dev_id.id, length);
   500f2:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   500f4:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   500f6:	f7fb fe36 	bl	4bd66 <memcpy>

	return length;
}
   500fa:	4620      	mov	r0, r4
   500fc:	b002      	add	sp, #8
   500fe:	bd70      	pop	{r4, r5, r6, pc}

00050100 <is_regular_addr_valid>:
{
   50100:	b538      	push	{r3, r4, r5, lr}
   50102:	4605      	mov	r5, r0
   50104:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   50106:	f000 f913 	bl	50330 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   5010a:	2d00      	cmp	r5, #0
   5010c:	db07      	blt.n	5011e <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   5010e:	42a8      	cmp	r0, r5
   50110:	d905      	bls.n	5011e <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   50112:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   50114:	4284      	cmp	r4, r0
   50116:	bf8c      	ite	hi
   50118:	2000      	movhi	r0, #0
   5011a:	2001      	movls	r0, #1
}
   5011c:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   5011e:	2000      	movs	r0, #0
   50120:	e7fc      	b.n	5011c <is_regular_addr_valid+0x1c>

00050122 <flash_nrf_read>:
{
   50122:	b570      	push	{r4, r5, r6, lr}
   50124:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   50126:	4628      	mov	r0, r5
   50128:	4619      	mov	r1, r3
{
   5012a:	4616      	mov	r6, r2
   5012c:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   5012e:	f7ff ffe7 	bl	50100 <is_regular_addr_valid>
   50132:	b138      	cbz	r0, 50144 <flash_nrf_read+0x22>
	if (!len) {
   50134:	b124      	cbz	r4, 50140 <flash_nrf_read+0x1e>
	memcpy(data, (void *)addr, len);
   50136:	4622      	mov	r2, r4
   50138:	4629      	mov	r1, r5
   5013a:	4630      	mov	r0, r6
   5013c:	f7fb fe13 	bl	4bd66 <memcpy>
		return 0;
   50140:	2000      	movs	r0, #0
}
   50142:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   50144:	f06f 0015 	mvn.w	r0, #21
   50148:	e7fb      	b.n	50142 <flash_nrf_read+0x20>

0005014a <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   5014a:	2000      	movs	r0, #0
   5014c:	f7e5 b976 	b.w	3543c <ticker_is_initialized>

00050150 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   50150:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   50154:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   50156:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   50158:	f04f 0800 	mov.w	r8, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   5015c:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
   5015e:	f8c4 8000 	str.w	r8, [r4]
{
   50162:	460d      	mov	r5, r1
   50164:	4616      	mov	r6, r2
	info->index = 0U;
   50166:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   5016a:	aa01      	add	r2, sp, #4
   5016c:	4669      	mov	r1, sp
   5016e:	4798      	blx	r3

	while (layout_size--) {
   50170:	e9dd 7c00 	ldrd	r7, ip, [sp]
   50174:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   50176:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   5017a:	4560      	cmp	r0, ip
   5017c:	d104      	bne.n	50188 <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   5017e:	f06f 0015 	mvn.w	r0, #21
}
   50182:	b003      	add	sp, #12
   50184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   50188:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   5018c:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   5018e:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   50190:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   50194:	b985      	cbnz	r5, 501b8 <flash_get_page_info+0x68>
			index_jmp = index - info->index;
   50196:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   50198:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
   5019c:	4543      	cmp	r3, r8
   5019e:	bf28      	it	cs
   501a0:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   501a2:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   501a6:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   501a8:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   501aa:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   501ac:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   501ae:	f100 0001 	add.w	r0, r0, #1
   501b2:	d9e2      	bls.n	5017a <flash_get_page_info+0x2a>
			return 0;
   501b4:	2000      	movs	r0, #0
   501b6:	e7e4      	b.n	50182 <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   501b8:	1aab      	subs	r3, r5, r2
   501ba:	fbb3 f3f9 	udiv	r3, r3, r9
   501be:	e7eb      	b.n	50198 <flash_get_page_info+0x48>

000501c0 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   501c0:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   501c2:	2200      	movs	r2, #0
   501c4:	f7ff bfc4 	b.w	50150 <flash_get_page_info>

000501c8 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   501c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   501cc:	6883      	ldr	r3, [r0, #8]
{
   501ce:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   501d0:	691b      	ldr	r3, [r3, #16]
{
   501d2:	4688      	mov	r8, r1
   501d4:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   501d6:	a901      	add	r1, sp, #4
   501d8:	aa02      	add	r2, sp, #8
   501da:	4798      	blx	r3
	off_t off = 0;
   501dc:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   501de:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   501e0:	4625      	mov	r5, r4
   501e2:	9b02      	ldr	r3, [sp, #8]
   501e4:	42ab      	cmp	r3, r5
   501e6:	d802      	bhi.n	501ee <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   501e8:	b006      	add	sp, #24
   501ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   501ee:	9f01      	ldr	r7, [sp, #4]
   501f0:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   501f4:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   501f6:	687b      	ldr	r3, [r7, #4]
   501f8:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   501fa:	683a      	ldr	r2, [r7, #0]
   501fc:	42b2      	cmp	r2, r6
   501fe:	eb0a 0306 	add.w	r3, sl, r6
   50202:	d802      	bhi.n	5020a <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   50204:	3501      	adds	r5, #1
   50206:	469a      	mov	sl, r3
   50208:	e7eb      	b.n	501e2 <flash_page_foreach+0x1a>
			page_info.start_offset = off;
   5020a:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   5020c:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   5020e:	4649      	mov	r1, r9
   50210:	a803      	add	r0, sp, #12
   50212:	47c0      	blx	r8
   50214:	2800      	cmp	r0, #0
   50216:	d0e7      	beq.n	501e8 <flash_page_foreach+0x20>
			off += page_info.size;
   50218:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   5021a:	3601      	adds	r6, #1
			off += page_info.size;
   5021c:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   5021e:	e7ec      	b.n	501fa <flash_page_foreach+0x32>

00050220 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   50220:	4770      	bx	lr

00050222 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   50222:	4700      	bx	r0

00050224 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   50224:	f000 bf32 	b.w	5108c <z_impl_k_busy_wait>

00050228 <nrfx_clock_start>:
    switch (domain)
   50228:	b110      	cbz	r0, 50230 <nrfx_clock_start+0x8>
   5022a:	2801      	cmp	r0, #1
   5022c:	d01d      	beq.n	5026a <nrfx_clock_start+0x42>
   5022e:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   50230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   50234:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   50238:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   5023c:	03c9      	lsls	r1, r1, #15
   5023e:	d512      	bpl.n	50266 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   50240:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   50244:	2a01      	cmp	r2, #1
   50246:	d10e      	bne.n	50266 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   50248:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   5024c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   50250:	2200      	movs	r2, #0
   50252:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   50256:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   5025a:	2202      	movs	r2, #2
   5025c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   50260:	2201      	movs	r2, #1
   50262:	609a      	str	r2, [r3, #8]
}
   50264:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   50266:	2200      	movs	r2, #0
   50268:	e7ee      	b.n	50248 <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   5026a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   5026e:	2200      	movs	r2, #0
   50270:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   50274:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   50278:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   5027c:	6018      	str	r0, [r3, #0]
}
   5027e:	4770      	bx	lr

00050280 <nrf_gpio_reconfigure>:
{
   50280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   50282:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   50284:	a801      	add	r0, sp, #4
{
   50286:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   5028a:	4616      	mov	r6, r2
   5028c:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   5028e:	f7f5 fecb 	bl	46028 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   50292:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   50294:	f1b6 0c00 	subs.w	ip, r6, #0
   50298:	bf18      	it	ne
   5029a:	f04f 0c01 	movne.w	ip, #1
   5029e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   502a2:	1e0b      	subs	r3, r1, #0
   502a4:	bf18      	it	ne
   502a6:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   502a8:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   502aa:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   502ae:	bf14      	ite	ne
   502b0:	f04f 0c0c 	movne.w	ip, #12
   502b4:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   502b8:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   502ba:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   502be:	bf14      	ite	ne
   502c0:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   502c4:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   502c8:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   502ca:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   502ce:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   502d2:	bf14      	ite	ne
   502d4:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   502d8:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   502dc:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   502e0:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   502e4:	b101      	cbz	r1, 502e8 <nrf_gpio_reconfigure+0x68>
   502e6:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   502e8:	b10e      	cbz	r6, 502ee <nrf_gpio_reconfigure+0x6e>
   502ea:	7836      	ldrb	r6, [r6, #0]
   502ec:	0076      	lsls	r6, r6, #1
   502ee:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   502f0:	b10d      	cbz	r5, 502f6 <nrf_gpio_reconfigure+0x76>
   502f2:	782d      	ldrb	r5, [r5, #0]
   502f4:	00ad      	lsls	r5, r5, #2
   502f6:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   502f8:	b10c      	cbz	r4, 502fe <nrf_gpio_reconfigure+0x7e>
   502fa:	7824      	ldrb	r4, [r4, #0]
   502fc:	0224      	lsls	r4, r4, #8
   502fe:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   50300:	b10f      	cbz	r7, 50306 <nrf_gpio_reconfigure+0x86>
   50302:	783f      	ldrb	r7, [r7, #0]
   50304:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   50306:	430c      	orrs	r4, r1
   50308:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   5030a:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   5030e:	b003      	add	sp, #12
   50310:	bdf0      	pop	{r4, r5, r6, r7, pc}

00050312 <nrf_gpio_cfg_sense_set>:
{
   50312:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   50314:	f10d 030f 	add.w	r3, sp, #15
   50318:	9301      	str	r3, [sp, #4]
   5031a:	2300      	movs	r3, #0
{
   5031c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   50320:	9300      	str	r3, [sp, #0]
   50322:	461a      	mov	r2, r3
   50324:	4619      	mov	r1, r3
   50326:	f7ff ffab 	bl	50280 <nrf_gpio_reconfigure>
}
   5032a:	b005      	add	sp, #20
   5032c:	f85d fb04 	ldr.w	pc, [sp], #4

00050330 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   50330:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   50334:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   50336:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   50338:	4350      	muls	r0, r2
   5033a:	4770      	bx	lr

0005033c <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   5033c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   50340:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   50342:	4770      	bx	lr

00050344 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   50344:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   50348:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   5034a:	4770      	bx	lr

0005034c <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   5034c:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   50350:	681a      	ldr	r2, [r3, #0]
   50352:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   50354:	bf1f      	itttt	ne
   50356:	2200      	movne	r2, #0
   50358:	601a      	strne	r2, [r3, #0]
   5035a:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   5035c:	2001      	movne	r0, #1
   5035e:	bf08      	it	eq
   50360:	2000      	moveq	r0, #0
}
   50362:	4770      	bx	lr

00050364 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   50364:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   50368:	f44f 7260 	mov.w	r2, #896	; 0x380
   5036c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   50370:	4770      	bx	lr

00050372 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   50372:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   50376:	f44f 7260 	mov.w	r2, #896	; 0x380
   5037a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   5037e:	4770      	bx	lr

00050380 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   50380:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   50382:	f7f6 fa3f 	bl	46804 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   50386:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   5038a:	f7f5 be19 	b.w	45fc0 <nrfx_clock_irq_handler>

0005038e <nrfx_usbd_consumer>:
{
   5038e:	b530      	push	{r4, r5, lr}
        p_next->p_data = p_transfer->p_data;
   50390:	e9d1 5400 	ldrd	r5, r4, [r1]
    if (size < data_size)
   50394:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
   50396:	bf97      	itett	ls
   50398:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
   5039c:	2100      	movhi	r1, #0
        size -= data_size;
   5039e:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   503a0:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
   503a2:	bf8e      	itee	hi
   503a4:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
   503a8:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   503aa:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
   503ac:	429a      	cmp	r2, r3
   503ae:	d103      	bne.n	503b8 <nrfx_usbd_consumer+0x2a>
   503b0:	1e20      	subs	r0, r4, #0
   503b2:	bf18      	it	ne
   503b4:	2001      	movne	r0, #1
}
   503b6:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
   503b8:	2000      	movs	r0, #0
   503ba:	e7fc      	b.n	503b6 <nrfx_usbd_consumer+0x28>

000503bc <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   503bc:	684b      	ldr	r3, [r1, #4]
{
   503be:	b510      	push	{r4, lr}
   503c0:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
   503c2:	680c      	ldr	r4, [r1, #0]
   503c4:	bf28      	it	cs
   503c6:	461a      	movcs	r2, r3
    p_next->size = tx_size;
   503c8:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
   503cc:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
   503ce:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   503d0:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   503d2:	4413      	add	r3, r2
}
   503d4:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   503d6:	600b      	str	r3, [r1, #0]
}
   503d8:	bf18      	it	ne
   503da:	2001      	movne	r0, #1
   503dc:	bd10      	pop	{r4, pc}

000503de <nrfx_usbd_feeder_ram_zlp>:
{
   503de:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
   503e0:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   503e2:	680b      	ldr	r3, [r1, #0]
   503e4:	42a2      	cmp	r2, r4
   503e6:	bf28      	it	cs
   503e8:	4622      	movcs	r2, r4
   503ea:	2a00      	cmp	r2, #0
   503ec:	bf14      	ite	ne
   503ee:	461d      	movne	r5, r3
   503f0:	2500      	moveq	r5, #0
    p_transfer->size -= tx_size;
   503f2:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
   503f6:	4413      	add	r3, r2
    p_next->size = tx_size;
   503f8:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
   503fc:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   503fe:	600b      	str	r3, [r1, #0]
}
   50400:	bf14      	ite	ne
   50402:	2001      	movne	r0, #1
   50404:	2000      	moveq	r0, #0
   50406:	bd30      	pop	{r4, r5, pc}

00050408 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   50408:	43c3      	mvns	r3, r0
   5040a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   5040e:	f000 000f 	and.w	r0, r0, #15
}
   50412:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   50416:	4770      	bx	lr

00050418 <ev_started_handler>:
}
   50418:	4770      	bx	lr

0005041a <nrf_usbd_epin_dma_handler>:
{
   5041a:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   5041c:	f7f6 fb60 	bl	46ae0 <usbd_dma_pending_clear>
{
   50420:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
   50422:	f7f6 fa53 	bl	468cc <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   50426:	7b83      	ldrb	r3, [r0, #14]
   50428:	2b03      	cmp	r3, #3
   5042a:	d10a      	bne.n	50442 <nrf_usbd_epin_dma_handler+0x28>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   5042c:	4608      	mov	r0, r1
   5042e:	f7ff ffeb 	bl	50408 <ep2bit>
   50432:	2301      	movs	r3, #1
   50434:	fa03 f000 	lsl.w	r0, r3, r0
   50438:	43c0      	mvns	r0, r0
}
   5043a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   5043e:	f7f6 bb3f 	b.w	46ac0 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   50442:	6803      	ldr	r3, [r0, #0]
   50444:	2b00      	cmp	r3, #0
   50446:	d0f1      	beq.n	5042c <nrf_usbd_epin_dma_handler+0x12>
}
   50448:	bd08      	pop	{r3, pc}

0005044a <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   5044a:	2087      	movs	r0, #135	; 0x87
   5044c:	f7ff bfe5 	b.w	5041a <nrf_usbd_epin_dma_handler>

00050450 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   50450:	2086      	movs	r0, #134	; 0x86
   50452:	f7ff bfe2 	b.w	5041a <nrf_usbd_epin_dma_handler>

00050456 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   50456:	2085      	movs	r0, #133	; 0x85
   50458:	f7ff bfdf 	b.w	5041a <nrf_usbd_epin_dma_handler>

0005045c <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   5045c:	2084      	movs	r0, #132	; 0x84
   5045e:	f7ff bfdc 	b.w	5041a <nrf_usbd_epin_dma_handler>

00050462 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   50462:	2083      	movs	r0, #131	; 0x83
   50464:	f7ff bfd9 	b.w	5041a <nrf_usbd_epin_dma_handler>

00050468 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   50468:	2082      	movs	r0, #130	; 0x82
   5046a:	f7ff bfd6 	b.w	5041a <nrf_usbd_epin_dma_handler>

0005046e <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   5046e:	2081      	movs	r0, #129	; 0x81
   50470:	f7ff bfd3 	b.w	5041a <nrf_usbd_epin_dma_handler>

00050474 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   50474:	f7f6 bb46 	b.w	46b04 <nrf_usbd_ep0in_dma_handler>

00050478 <nrfx_usbd_ep_max_packet_size_set>:
{
   50478:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   5047a:	f7f6 fa27 	bl	468cc <ep_state_access>
    p_state->max_packet_size = size;
   5047e:	8181      	strh	r1, [r0, #12]
}
   50480:	bd08      	pop	{r3, pc}

00050482 <nrfx_usbd_ep_status_get>:
{
   50482:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   50484:	f7f6 fa22 	bl	468cc <ep_state_access>
	__asm__ volatile(
   50488:	f04f 0220 	mov.w	r2, #32
   5048c:	f3ef 8311 	mrs	r3, BASEPRI
   50490:	f382 8812 	msr	BASEPRI_MAX, r2
   50494:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   50498:	6882      	ldr	r2, [r0, #8]
   5049a:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   5049c:	6802      	ldr	r2, [r0, #0]
   5049e:	b92a      	cbnz	r2, 504ac <nrfx_usbd_ep_status_get+0x2a>
   504a0:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   504a2:	f383 8811 	msr	BASEPRI, r3
   504a6:	f3bf 8f6f 	isb	sy
}
   504aa:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   504ac:	2004      	movs	r0, #4
   504ae:	e7f8      	b.n	504a2 <nrfx_usbd_ep_status_get+0x20>

000504b0 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   504b0:	2007      	movs	r0, #7
   504b2:	f7f6 bea1 	b.w	471f8 <nrf_usbd_epout_dma_handler>

000504b6 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   504b6:	2006      	movs	r0, #6
   504b8:	f7f6 be9e 	b.w	471f8 <nrf_usbd_epout_dma_handler>

000504bc <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   504bc:	2005      	movs	r0, #5
   504be:	f7f6 be9b 	b.w	471f8 <nrf_usbd_epout_dma_handler>

000504c2 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   504c2:	2004      	movs	r0, #4
   504c4:	f7f6 be98 	b.w	471f8 <nrf_usbd_epout_dma_handler>

000504c8 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   504c8:	2003      	movs	r0, #3
   504ca:	f7f6 be95 	b.w	471f8 <nrf_usbd_epout_dma_handler>

000504ce <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   504ce:	2002      	movs	r0, #2
   504d0:	f7f6 be92 	b.w	471f8 <nrf_usbd_epout_dma_handler>

000504d4 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   504d4:	2001      	movs	r0, #1
   504d6:	f7f6 be8f 	b.w	471f8 <nrf_usbd_epout_dma_handler>

000504da <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   504da:	f7f6 bf83 	b.w	473e4 <usbd_ep_abort>

000504de <debounce_update>:
        state->counter -= elapsed_ms;
    }
}

void debounce_update(struct debounce_state *state, const bool active, const int elapsed_ms,
                     const struct debounce_config *config) {
   504de:	b570      	push	{r4, r5, r6, lr}
    // This uses a variation of the integrator debouncing described at
    // https://www.kennethkuhn.com/electronics/debounce.c
    // Every update where "active" does not match the current state, we increment
    // a counter, otherwise we decrement it. When the counter reaches a
    // threshold, the state flips and we reset the counter.
    state->changed = false;
   504e0:	7804      	ldrb	r4, [r0, #0]
   504e2:	f36f 0441 	bfc	r4, #1, #1
   504e6:	7004      	strb	r4, [r0, #0]

    if (active == state->pressed) {
   504e8:	f004 0501 	and.w	r5, r4, #1
    if (state->counter < elapsed_ms) {
   504ec:	8804      	ldrh	r4, [r0, #0]
    if (active == state->pressed) {
   504ee:	428d      	cmp	r5, r1
    if (state->counter < elapsed_ms) {
   504f0:	f3c4 068d 	ubfx	r6, r4, #2, #14
    if (active == state->pressed) {
   504f4:	d109      	bne.n	5050a <debounce_update+0x2c>
    if (state->counter < elapsed_ms) {
   504f6:	42b2      	cmp	r2, r6
   504f8:	dd03      	ble.n	50502 <debounce_update+0x24>
        state->counter = 0;
   504fa:	f36f 048f 	bfc	r4, #2, #14
    if (state->counter < flip_threshold) {
        increment_counter(state, elapsed_ms);
        return;
    }

    state->pressed = !state->pressed;
   504fe:	8004      	strh	r4, [r0, #0]
    state->counter = 0;
    state->changed = true;
}
   50500:	bd70      	pop	{r4, r5, r6, pc}
        state->counter -= elapsed_ms;
   50502:	1ab6      	subs	r6, r6, r2
        state->counter += elapsed_ms;
   50504:	f366 048f 	bfi	r4, r6, #2, #14
   50508:	e7f9      	b.n	504fe <debounce_update+0x20>
    return state->pressed ? config->debounce_release_ms : config->debounce_press_ms;
   5050a:	e9d3 1300 	ldrd	r1, r3, [r3]
   5050e:	f014 0f01 	tst.w	r4, #1
   50512:	bf18      	it	ne
   50514:	4619      	movne	r1, r3
    if (state->counter < flip_threshold) {
   50516:	428e      	cmp	r6, r1
   50518:	d208      	bcs.n	5052c <debounce_update+0x4e>
    if (state->counter + elapsed_ms > DEBOUNCE_COUNTER_MAX) {
   5051a:	4416      	add	r6, r2
   5051c:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
   50520:	d3f0      	bcc.n	50504 <debounce_update+0x26>
        state->counter = DEBOUNCE_COUNTER_MAX;
   50522:	f643 73ff 	movw	r3, #16383	; 0x3fff
   50526:	f363 048f 	bfi	r4, r3, #2, #14
   5052a:	e7e8      	b.n	504fe <debounce_update+0x20>
    state->pressed = !state->pressed;
   5052c:	f085 0401 	eor.w	r4, r5, #1
   50530:	f044 0402 	orr.w	r4, r4, #2
   50534:	e7e3      	b.n	504fe <debounce_update+0x20>

00050536 <debounce_is_active>:

bool debounce_is_active(const struct debounce_state *state) {
    return state->pressed || state->counter > 0;
   50536:	8800      	ldrh	r0, [r0, #0]
   50538:	f020 0002 	bic.w	r0, r0, #2
   5053c:	b280      	uxth	r0, r0
}
   5053e:	3800      	subs	r0, #0
   50540:	bf18      	it	ne
   50542:	2001      	movne	r0, #1
   50544:	4770      	bx	lr

00050546 <debounce_is_pressed>:

bool debounce_is_pressed(const struct debounce_state *state) { return state->pressed; }
   50546:	7800      	ldrb	r0, [r0, #0]
   50548:	f000 0001 	and.w	r0, r0, #1
   5054c:	4770      	bx	lr

0005054e <debounce_get_changed>:

   5054e:	7800      	ldrb	r0, [r0, #0]
   50550:	f3c0 0040 	ubfx	r0, r0, #1, #1
   50554:	4770      	bx	lr

00050556 <z_impl_gpio_pin_configure>:
{
   50556:	b4f0      	push	{r4, r5, r6, r7}
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   50558:	04d4      	lsls	r4, r2, #19
	const struct gpio_driver_api *api =
   5055a:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
   5055c:	6906      	ldr	r6, [r0, #16]
{
   5055e:	4613      	mov	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   50560:	d506      	bpl.n	50570 <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   50562:	f412 6f40 	tst.w	r2, #3072	; 0xc00
   50566:	d003      	beq.n	50570 <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   50568:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   5056a:	bf48      	it	mi
   5056c:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
   50570:	6834      	ldr	r4, [r6, #0]
   50572:	2501      	movs	r5, #1
   50574:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   50576:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   5057a:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   5057c:	bf4c      	ite	mi
   5057e:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   50580:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
   50582:	683b      	ldr	r3, [r7, #0]
   50584:	6034      	str	r4, [r6, #0]
}
   50586:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   50588:	4718      	bx	r3

0005058a <kscan_direct_configure>:
    struct kscan_direct_data *data = dev->data;
   5058a:	6903      	ldr	r3, [r0, #16]
    if (!callback) {
   5058c:	b111      	cbz	r1, 50594 <kscan_direct_configure+0xa>
    data->callback = callback;
   5058e:	6059      	str	r1, [r3, #4]
    return 0;
   50590:	2000      	movs	r0, #0
   50592:	4770      	bx	lr
        return -EINVAL;
   50594:	f06f 0015 	mvn.w	r0, #21
}
   50598:	4770      	bx	lr

0005059a <kscan_direct_interrupt_configure.isra.0>:
static int kscan_direct_interrupt_configure(const struct device *dev, const gpio_flags_t flags) {
   5059a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   5059e:	4606      	mov	r6, r0
   505a0:	460c      	mov	r4, r1
    for (int i = 0; i < config->inputs.len; i++) {
   505a2:	2500      	movs	r5, #0
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   505a4:	f401 4700 	and.w	r7, r1, #32768	; 0x8000
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   505a8:	f04f 0801 	mov.w	r8, #1
   505ac:	6873      	ldr	r3, [r6, #4]
   505ae:	42ab      	cmp	r3, r5
   505b0:	d802      	bhi.n	505b8 <kscan_direct_interrupt_configure.isra.0+0x1e>
    return 0;
   505b2:	2000      	movs	r0, #0
}
   505b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   505b8:	6833      	ldr	r3, [r6, #0]
   505ba:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   505be:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
   505c2:	7911      	ldrb	r1, [r2, #4]
	const struct gpio_driver_api *api =
   505c4:	f8d0 c008 	ldr.w	ip, [r0, #8]
	const struct gpio_driver_data *const data =
   505c8:	6902      	ldr	r2, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   505ca:	b18f      	cbz	r7, 505f0 <kscan_direct_interrupt_configure.isra.0+0x56>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   505cc:	6812      	ldr	r2, [r2, #0]
   505ce:	fa08 f301 	lsl.w	r3, r8, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   505d2:	4213      	tst	r3, r2
   505d4:	d00c      	beq.n	505f0 <kscan_direct_interrupt_configure.isra.0+0x56>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   505d6:	f484 22c0 	eor.w	r2, r4, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   505da:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   505de:	f8dc 9018 	ldr.w	r9, [ip, #24]
   505e2:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
   505e6:	47c8      	blx	r9
        if (err) {
   505e8:	2800      	cmp	r0, #0
   505ea:	d1e3      	bne.n	505b4 <kscan_direct_interrupt_configure.isra.0+0x1a>
    for (int i = 0; i < config->inputs.len; i++) {
   505ec:	3501      	adds	r5, #1
   505ee:	e7dd      	b.n	505ac <kscan_direct_interrupt_configure.isra.0+0x12>
   505f0:	4622      	mov	r2, r4
   505f2:	e7f2      	b.n	505da <kscan_direct_interrupt_configure.isra.0+0x40>

000505f4 <kscan_direct_irq_callback_handler>:
    struct kscan_direct_data *data = irq_data->dev->data;
   505f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
                                              const gpio_port_pins_t pin) {
   505f8:	b510      	push	{r4, lr}
    struct kscan_direct_data *data = irq_data->dev->data;
   505fa:	691c      	ldr	r4, [r3, #16]
    return kscan_direct_interrupt_configure(dev, GPIO_INT_DISABLE);
   505fc:	6823      	ldr	r3, [r4, #0]
   505fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   50602:	6858      	ldr	r0, [r3, #4]
   50604:	f7ff ffc9 	bl	5059a <kscan_direct_interrupt_configure.isra.0>
	return z_impl_k_uptime_ticks();
   50608:	f000 fd3e 	bl	51088 <z_impl_k_uptime_ticks>
   5060c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   50610:	fba0 0302 	umull	r0, r3, r0, r2
   50614:	fb02 3101 	mla	r1, r2, r1, r3
   50618:	0bc0      	lsrs	r0, r0, #15
   5061a:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   5061e:	0bc9      	lsrs	r1, r1, #15
    data->scan_time = k_uptime_get();
   50620:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    k_work_reschedule(&data->work, K_NO_WAIT);
   50624:	2200      	movs	r2, #0
   50626:	f104 0008 	add.w	r0, r4, #8
   5062a:	2300      	movs	r3, #0
}
   5062c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    k_work_reschedule(&data->work, K_NO_WAIT);
   50630:	f7f7 bfa2 	b.w	48578 <k_work_reschedule>

00050634 <kscan_direct_read>:
static int kscan_direct_read(const struct device *dev) {
   50634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const struct kscan_direct_config *config = dev->config;
   50638:	6844      	ldr	r4, [r0, #4]
    struct kscan_direct_data *data = dev->data;
   5063a:	f8d0 8010 	ldr.w	r8, [r0, #16]
static int kscan_direct_read(const struct device *dev) {
   5063e:	4606      	mov	r6, r0
    for (int i = 0; i < config->inputs.len; i++) {
   50640:	2500      	movs	r5, #0
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   50642:	f04f 0901 	mov.w	r9, #1
        debounce_update(&data->pin_state[i], active, config->debounce_scan_period_ms,
   50646:	f104 0a08 	add.w	sl, r4, #8
    for (int i = 0; i < config->inputs.len; i++) {
   5064a:	6863      	ldr	r3, [r4, #4]
   5064c:	42ab      	cmp	r3, r5
   5064e:	d835      	bhi.n	506bc <kscan_direct_read+0x88>
    for (int i = 0; i < config->inputs.len; i++) {
   50650:	f04f 0900 	mov.w	r9, #0
    bool continue_scan = false;
   50654:	464d      	mov	r5, r9
    for (int i = 0; i < config->inputs.len; i++) {
   50656:	6863      	ldr	r3, [r4, #4]
   50658:	454b      	cmp	r3, r9
   5065a:	d853      	bhi.n	50704 <kscan_direct_read+0xd0>
    const struct kscan_direct_config *config = dev->config;
   5065c:	6870      	ldr	r0, [r6, #4]
    if (continue_scan) {
   5065e:	2d00      	cmp	r5, #0
   50660:	f000 809e 	beq.w	507a0 <kscan_direct_read+0x16c>
    struct kscan_direct_data *data = dev->data;
   50664:	6934      	ldr	r4, [r6, #16]
    data->scan_time += config->debounce_scan_period_ms;
   50666:	6903      	ldr	r3, [r0, #16]
   50668:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
   5066c:	1818      	adds	r0, r3, r0
   5066e:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   50672:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
   50676:	03c9      	lsls	r1, r1, #15
   50678:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   5067c:	f240 33e7 	movw	r3, #999	; 0x3e7
   50680:	03c0      	lsls	r0, r0, #15
   50682:	18c0      	adds	r0, r0, r3
   50684:	f141 0100 	adc.w	r1, r1, #0
    k_work_reschedule(&data->work, K_TIMEOUT_ABS_MS(data->scan_time));
   50688:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   5068c:	f171 0300 	sbcs.w	r3, r1, #0
   50690:	f104 0408 	add.w	r4, r4, #8
   50694:	d37f      	bcc.n	50796 <kscan_direct_read+0x162>
   50696:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   5069a:	2300      	movs	r3, #0
   5069c:	f7d5 fd30 	bl	26100 <__aeabi_uldivmod>
   506a0:	f06f 0201 	mvn.w	r2, #1
   506a4:	1a12      	subs	r2, r2, r0
   506a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   506aa:	eb63 0301 	sbc.w	r3, r3, r1
   506ae:	4620      	mov	r0, r4
   506b0:	f7f7 ff62 	bl	48578 <k_work_reschedule>
}
   506b4:	2000      	movs	r0, #0
   506b6:	b003      	add	sp, #12
   506b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   506bc:	6823      	ldr	r3, [r4, #0]
	return gpio_pin_get(spec->port, spec->pin);
   506be:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
   506c2:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
	const struct gpio_driver_data *const data =
   506c6:	f8d0 b010 	ldr.w	fp, [r0, #16]
	return gpio_pin_get(spec->port, spec->pin);
   506ca:	7917      	ldrb	r7, [r2, #4]
	return api->port_get_raw(port, value);
   506cc:	6883      	ldr	r3, [r0, #8]
   506ce:	a901      	add	r1, sp, #4
   506d0:	685b      	ldr	r3, [r3, #4]
   506d2:	4798      	blx	r3
	if (ret == 0) {
   506d4:	b948      	cbnz	r0, 506ea <kscan_direct_read+0xb6>
		*value ^= data->invert;
   506d6:	f8db 2000 	ldr.w	r2, [fp]
   506da:	9b01      	ldr	r3, [sp, #4]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   506dc:	fa09 f707 	lsl.w	r7, r9, r7
		*value ^= data->invert;
   506e0:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   506e2:	423b      	tst	r3, r7
   506e4:	bf14      	ite	ne
   506e6:	2001      	movne	r0, #1
   506e8:	2000      	moveq	r0, #0
        debounce_update(&data->pin_state[i], active, config->debounce_scan_period_ms,
   506ea:	f8d8 7048 	ldr.w	r7, [r8, #72]	; 0x48
   506ee:	6922      	ldr	r2, [r4, #16]
   506f0:	1e01      	subs	r1, r0, #0
   506f2:	4653      	mov	r3, sl
   506f4:	eb07 0045 	add.w	r0, r7, r5, lsl #1
   506f8:	bf18      	it	ne
   506fa:	2101      	movne	r1, #1
   506fc:	f7ff feef 	bl	504de <debounce_update>
    for (int i = 0; i < config->inputs.len; i++) {
   50700:	3501      	adds	r5, #1
   50702:	e7a2      	b.n	5064a <kscan_direct_read+0x16>
        struct debounce_state *state = &data->pin_state[i];
   50704:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
   50708:	eb03 0a49 	add.w	sl, r3, r9, lsl #1
        if (debounce_get_changed(state)) {
   5070c:	4650      	mov	r0, sl
   5070e:	f7ff ff1e 	bl	5054e <debounce_get_changed>
   50712:	b948      	cbnz	r0, 50728 <kscan_direct_read+0xf4>
        continue_scan = continue_scan || debounce_is_active(state);
   50714:	2d00      	cmp	r5, #0
   50716:	d13c      	bne.n	50792 <kscan_direct_read+0x15e>
   50718:	4650      	mov	r0, sl
   5071a:	f7ff ff0c 	bl	50536 <debounce_is_active>
   5071e:	f000 0501 	and.w	r5, r0, #1
    for (int i = 0; i < config->inputs.len; i++) {
   50722:	f109 0901 	add.w	r9, r9, #1
   50726:	e796      	b.n	50656 <kscan_direct_read+0x22>
            const bool pressed = debounce_is_pressed(state);
   50728:	4650      	mov	r0, sl
   5072a:	f7ff ff0c 	bl	50546 <debounce_is_pressed>
            data->callback(dev, 0, i, pressed);
   5072e:	f8d8 c004 	ldr.w	ip, [r8, #4]
   50732:	4603      	mov	r3, r0
            const bool pressed = debounce_is_pressed(state);
   50734:	4607      	mov	r7, r0
            data->callback(dev, 0, i, pressed);
   50736:	464a      	mov	r2, r9
   50738:	2100      	movs	r1, #0
   5073a:	4630      	mov	r0, r6
   5073c:	47e0      	blx	ip
            if (config->toggle_mode && pressed) {
   5073e:	7e23      	ldrb	r3, [r4, #24]
   50740:	2b00      	cmp	r3, #0
   50742:	d0e7      	beq.n	50714 <kscan_direct_read+0xe0>
   50744:	2f00      	cmp	r7, #0
   50746:	d0e5      	beq.n	50714 <kscan_direct_read+0xe0>
                kscan_inputs_set_flags(&config->inputs, &config->inputs.gpios[i]);
   50748:	6823      	ldr	r3, [r4, #0]
    for (int i = 0; i < inputs->len; i++) {
   5074a:	2700      	movs	r7, #0
                kscan_inputs_set_flags(&config->inputs, &config->inputs.gpios[i]);
   5074c:	eb03 0bc9 	add.w	fp, r3, r9, lsl #3
    for (int i = 0; i < inputs->len; i++) {
   50750:	6863      	ldr	r3, [r4, #4]
   50752:	42bb      	cmp	r3, r7
   50754:	d9de      	bls.n	50714 <kscan_direct_read+0xe0>
        extra_flags = GPIO_INPUT | kscan_gpio_get_extra_flags(&inputs->gpios[i],
   50756:	6821      	ldr	r1, [r4, #0]
   50758:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    if (!active) {
   5075c:	459b      	cmp	fp, r3
   5075e:	795a      	ldrb	r2, [r3, #5]
        extra_flags = GPIO_INPUT | kscan_gpio_get_extra_flags(&inputs->gpios[i],
   50760:	ea4f 00c7 	mov.w	r0, r7, lsl #3
    if (!active) {
   50764:	d012      	beq.n	5078c <kscan_direct_read+0x158>
        return ((BIT(0) & gpio->dt_flags) ? GPIO_PULL_UP : GPIO_PULL_DOWN);
   50766:	f012 0f01 	tst.w	r2, #1
   5076a:	bf0c      	ite	eq
   5076c:	f04f 0c20 	moveq.w	ip, #32
   50770:	f04f 0c10 	movne.w	ip, #16
	return gpio_pin_configure(spec->port,
   50774:	5808      	ldr	r0, [r1, r0]
				  spec->pin,
   50776:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   50778:	ea42 020c 	orr.w	r2, r2, ip
   5077c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   50780:	f7ff fee9 	bl	50556 <z_impl_gpio_pin_configure>
        if (err) {
   50784:	2800      	cmp	r0, #0
   50786:	d1c5      	bne.n	50714 <kscan_direct_read+0xe0>
    for (int i = 0; i < inputs->len; i++) {
   50788:	3701      	adds	r7, #1
   5078a:	e7e1      	b.n	50750 <kscan_direct_read+0x11c>
    return 0;
   5078c:	f04f 0c00 	mov.w	ip, #0
   50790:	e7f0      	b.n	50774 <kscan_direct_read+0x140>
        continue_scan = continue_scan || debounce_is_active(state);
   50792:	2001      	movs	r0, #1
   50794:	e7c3      	b.n	5071e <kscan_direct_read+0xea>
    k_work_reschedule(&data->work, K_TIMEOUT_ABS_MS(data->scan_time));
   50796:	f06f 0201 	mvn.w	r2, #1
   5079a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   5079e:	e786      	b.n	506ae <kscan_direct_read+0x7a>
    return kscan_direct_interrupt_configure(dev, GPIO_INT_LEVEL_ACTIVE);
   507a0:	f44f 2198 	mov.w	r1, #311296	; 0x4c000
   507a4:	f7ff fef9 	bl	5059a <kscan_direct_interrupt_configure.isra.0>
   507a8:	e784      	b.n	506b4 <kscan_direct_read+0x80>

000507aa <kscan_direct_enable>:
static int kscan_direct_enable(const struct device *dev) {
   507aa:	b570      	push	{r4, r5, r6, lr}
    struct kscan_direct_data *data = dev->data;
   507ac:	6906      	ldr	r6, [r0, #16]
static int kscan_direct_enable(const struct device *dev) {
   507ae:	4604      	mov	r4, r0
   507b0:	f000 fc6a 	bl	51088 <z_impl_k_uptime_ticks>
   507b4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   507b8:	fba0 3205 	umull	r3, r2, r0, r5
   507bc:	fb05 2101 	mla	r1, r5, r1, r2
   507c0:	0bdb      	lsrs	r3, r3, #15
   507c2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   507c6:	0bc9      	lsrs	r1, r1, #15
    data->scan_time = k_uptime_get();
   507c8:	e9c6 3110 	strd	r3, r1, [r6, #64]	; 0x40
    return kscan_direct_read(dev);
   507cc:	4620      	mov	r0, r4
}
   507ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return kscan_direct_read(dev);
   507d2:	f7ff bf2f 	b.w	50634 <kscan_direct_read>

000507d6 <kscan_direct_work_handler>:
    kscan_direct_read(data->dev);
   507d6:	f850 0c08 	ldr.w	r0, [r0, #-8]
   507da:	f7ff bf2b 	b.w	50634 <kscan_direct_read>

000507de <kscan_direct_disable>:
static int kscan_direct_disable(const struct device *dev) {
   507de:	b510      	push	{r4, lr}
   507e0:	4604      	mov	r4, r0
    k_work_cancel_delayable(&data->work);
   507e2:	6900      	ldr	r0, [r0, #16]
   507e4:	3008      	adds	r0, #8
   507e6:	f000 faaf 	bl	50d48 <k_work_cancel_delayable>
    return kscan_direct_interrupt_configure(dev, GPIO_INT_DISABLE);
   507ea:	6860      	ldr	r0, [r4, #4]
   507ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
}
   507f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return kscan_direct_interrupt_configure(dev, GPIO_INT_DISABLE);
   507f4:	f7ff bed1 	b.w	5059a <kscan_direct_interrupt_configure.isra.0>

000507f8 <battery_channel_get>:

#include "battery_common.h"

int battery_channel_get(const struct battery_value *value, enum sensor_channel chan,
                        struct sensor_value *val_out) {
    switch (chan) {
   507f8:	2927      	cmp	r1, #39	; 0x27
                        struct sensor_value *val_out) {
   507fa:	b510      	push	{r4, lr}
    switch (chan) {
   507fc:	d004      	beq.n	50808 <battery_channel_get+0x10>
   507fe:	292c      	cmp	r1, #44	; 0x2c
   50800:	d010      	beq.n	50824 <battery_channel_get+0x2c>
   50802:	f06f 0085 	mvn.w	r0, #133	; 0x85
    default:
        return -ENOTSUP;
    }

    return 0;
}
   50806:	bd10      	pop	{r4, pc}
        val_out->val1 = value->millivolts / 1000;
   50808:	8843      	ldrh	r3, [r0, #2]
   5080a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   5080e:	fbb3 f4f1 	udiv	r4, r3, r1
        val_out->val2 = (value->millivolts % 1000) * 1000U;
   50812:	fb01 3314 	mls	r3, r1, r4, r3
   50816:	b29b      	uxth	r3, r3
        val_out->val1 = value->millivolts / 1000;
   50818:	b2a0      	uxth	r0, r4
        val_out->val2 = (value->millivolts % 1000) * 1000U;
   5081a:	434b      	muls	r3, r1
   5081c:	e9c2 0300 	strd	r0, r3, [r2]
    return 0;
   50820:	2000      	movs	r0, #0
   50822:	e7f0      	b.n	50806 <battery_channel_get+0xe>
        val_out->val1 = value->state_of_charge;
   50824:	7900      	ldrb	r0, [r0, #4]
        break;
   50826:	2300      	movs	r3, #0
   50828:	e7f8      	b.n	5081c <battery_channel_get+0x24>

0005082a <lithium_ion_mv_to_pct>:

uint8_t lithium_ion_mv_to_pct(int16_t bat_mv) {
    // Simple linear approximation of a battery based off adafruit's discharge graph:
    // https://learn.adafruit.com/li-ion-and-lipoly-batteries/voltages

    if (bat_mv >= 4200) {
   5082a:	f241 0367 	movw	r3, #4199	; 0x1067
   5082e:	4298      	cmp	r0, r3
   50830:	dc0a      	bgt.n	50848 <lithium_ion_mv_to_pct+0x1e>
        return 100;
    } else if (bat_mv <= 3450) {
   50832:	f640 537a 	movw	r3, #3450	; 0xd7a
   50836:	4298      	cmp	r0, r3
   50838:	dd08      	ble.n	5084c <lithium_ion_mv_to_pct+0x22>
        return 0;
    }

    return bat_mv * 2 / 15 - 459;
   5083a:	230f      	movs	r3, #15
   5083c:	0040      	lsls	r0, r0, #1
   5083e:	fbb0 f0f3 	udiv	r0, r0, r3
   50842:	3035      	adds	r0, #53	; 0x35
   50844:	b2c0      	uxtb	r0, r0
   50846:	4770      	bx	lr
        return 100;
   50848:	2064      	movs	r0, #100	; 0x64
   5084a:	4770      	bx	lr
        return 0;
   5084c:	2000      	movs	r0, #0
   5084e:	4770      	bx	lr

00050850 <vddh_channel_get>:
    return battery_channel_get(&drv_data->value, chan, val);
   50850:	6900      	ldr	r0, [r0, #16]
   50852:	301c      	adds	r0, #28
   50854:	f7ff bfd0 	b.w	507f8 <battery_channel_get>

00050858 <z_device_state_init>:
}
   50858:	4770      	bx	lr

0005085a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   5085a:	b138      	cbz	r0, 5086c <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   5085c:	68c3      	ldr	r3, [r0, #12]
   5085e:	8818      	ldrh	r0, [r3, #0]
   50860:	f3c0 0008 	ubfx	r0, r0, #0, #9
   50864:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   50868:	4258      	negs	r0, r3
   5086a:	4158      	adcs	r0, r3
}
   5086c:	4770      	bx	lr

0005086e <arch_system_halt>:
	__asm__ volatile(
   5086e:	f04f 0220 	mov.w	r2, #32
   50872:	f3ef 8311 	mrs	r3, BASEPRI
   50876:	f382 8812 	msr	BASEPRI_MAX, r2
   5087a:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   5087e:	e7fe      	b.n	5087e <arch_system_halt+0x10>

00050880 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   50880:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   50882:	f7ff fff4 	bl	5086e <arch_system_halt>

00050886 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   50886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   50888:	4605      	mov	r5, r0
   5088a:	460e      	mov	r6, r1
   5088c:	f04f 0320 	mov.w	r3, #32
   50890:	f3ef 8711 	mrs	r7, BASEPRI
   50894:	f383 8812 	msr	BASEPRI_MAX, r3
   50898:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   5089c:	f7f8 f956 	bl	48b4c <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   508a0:	4631      	mov	r1, r6
   508a2:	4604      	mov	r4, r0
   508a4:	4628      	mov	r0, r5
   508a6:	f7ff ffeb 	bl	50880 <k_sys_fatal_error_handler>
	__asm__ volatile(
   508aa:	f387 8811 	msr	BASEPRI, r7
   508ae:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   508b2:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   508b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   508b8:	f7dc bbfc 	b.w	2d0b4 <z_impl_k_thread_abort>

000508bc <k_heap_init>:
{
   508bc:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   508be:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   508c2:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   508c6:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   508c8:	f7f9 bbe6 	b.w	4a098 <sys_heap_init>

000508cc <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   508cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   508d0:	b085      	sub	sp, #20
   508d2:	4606      	mov	r6, r0
   508d4:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   508d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   508da:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   508dc:	f000 fbda 	bl	51094 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   508e0:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   508e4:	4605      	mov	r5, r0
   508e6:	460f      	mov	r7, r1
	__asm__ volatile(
   508e8:	f04f 0320 	mov.w	r3, #32
   508ec:	f3ef 8411 	mrs	r4, BASEPRI
   508f0:	f383 8812 	msr	BASEPRI_MAX, r3
   508f4:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   508f8:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   508fc:	464a      	mov	r2, r9
   508fe:	4641      	mov	r1, r8
   50900:	4630      	mov	r0, r6
   50902:	f7f9 fb62 	bl	49fca <sys_heap_aligned_alloc>
   50906:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   50908:	f7f8 fada 	bl	48ec0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   5090c:	9b03      	ldr	r3, [sp, #12]
   5090e:	b13b      	cbz	r3, 50920 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   50910:	f384 8811 	msr	BASEPRI, r4
   50914:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   50918:	4618      	mov	r0, r3
   5091a:	b005      	add	sp, #20
   5091c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   50920:	1a28      	subs	r0, r5, r0
   50922:	eb67 0101 	sbc.w	r1, r7, r1
   50926:	2801      	cmp	r0, #1
   50928:	f171 0200 	sbcs.w	r2, r1, #0
   5092c:	dbf0      	blt.n	50910 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   5092e:	e9cd 0100 	strd	r0, r1, [sp]
   50932:	465a      	mov	r2, fp
   50934:	4621      	mov	r1, r4
   50936:	4650      	mov	r0, sl
   50938:	f7f7 ff74 	bl	48824 <z_pend_curr>
	__asm__ volatile(
   5093c:	f04f 0320 	mov.w	r3, #32
   50940:	f3ef 8411 	mrs	r4, BASEPRI
   50944:	f383 8812 	msr	BASEPRI_MAX, r3
   50948:	f3bf 8f6f 	isb	sy
   5094c:	e7d6      	b.n	508fc <k_heap_aligned_alloc+0x30>

0005094e <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   5094e:	b538      	push	{r3, r4, r5, lr}
   50950:	4604      	mov	r4, r0
   50952:	f04f 0320 	mov.w	r3, #32
   50956:	f3ef 8511 	mrs	r5, BASEPRI
   5095a:	f383 8812 	msr	BASEPRI_MAX, r3
   5095e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   50962:	f7f9 fafa 	bl	49f5a <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   50966:	f104 000c 	add.w	r0, r4, #12
   5096a:	f000 fb14 	bl	50f96 <z_unpend_all>
   5096e:	b130      	cbz	r0, 5097e <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   50970:	4629      	mov	r1, r5
   50972:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   50976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   5097a:	f7f7 bfad 	b.w	488d8 <z_reschedule>
	__asm__ volatile(
   5097e:	f385 8811 	msr	BASEPRI, r5
   50982:	f3bf 8f6f 	isb	sy
}
   50986:	bd38      	pop	{r3, r4, r5, pc}

00050988 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   50988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   5098a:	4604      	mov	r4, r0
   5098c:	460d      	mov	r5, r1
	__asm__ volatile(
   5098e:	f04f 0320 	mov.w	r3, #32
   50992:	f3ef 8611 	mrs	r6, BASEPRI
   50996:	f383 8812 	msr	BASEPRI_MAX, r3
   5099a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   5099e:	6947      	ldr	r7, [r0, #20]
   509a0:	b977      	cbnz	r7, 509c0 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   509a2:	f000 fab2 	bl	50f0a <z_unpend_first_thread>

		if (pending_thread != NULL) {
   509a6:	b158      	cbz	r0, 509c0 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   509a8:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   509aa:	6142      	str	r2, [r0, #20]
   509ac:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   509ae:	f000 fa75 	bl	50e9c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   509b2:	4631      	mov	r1, r6
   509b4:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   509b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   509bc:	f7f7 bf8c 	b.w	488d8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   509c0:	682b      	ldr	r3, [r5, #0]
   509c2:	6962      	ldr	r2, [r4, #20]
   509c4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   509c6:	682b      	ldr	r3, [r5, #0]
   509c8:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   509ca:	69a3      	ldr	r3, [r4, #24]
   509cc:	3b01      	subs	r3, #1
   509ce:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   509d0:	f386 8811 	msr	BASEPRI, r6
   509d4:	f3bf 8f6f 	isb	sy
}
   509d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000509da <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   509da:	f3ef 8005 	mrs	r0, IPSR
}
   509de:	3800      	subs	r0, #0
   509e0:	bf18      	it	ne
   509e2:	2001      	movne	r0, #1
   509e4:	4770      	bx	lr

000509e6 <z_impl_k_thread_name_set>:
}
   509e6:	f06f 0057 	mvn.w	r0, #87	; 0x57
   509ea:	4770      	bx	lr

000509ec <z_impl_k_thread_start>:
	z_sched_start(thread);
   509ec:	f7f7 bf86 	b.w	488fc <z_sched_start>

000509f0 <z_pm_save_idle_exit>:
{
   509f0:	b508      	push	{r3, lr}
	pm_system_resume();
   509f2:	f7db fee7 	bl	2c7c4 <pm_system_resume>
}
   509f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   509fa:	f7ff bc11 	b.w	50220 <sys_clock_idle_exit>

000509fe <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   509fe:	f990 300e 	ldrsb.w	r3, [r0, #14]
   50a02:	428b      	cmp	r3, r1
   50a04:	d001      	beq.n	50a0a <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   50a06:	f7f7 bf21 	b.w	4884c <z_set_prio>
}
   50a0a:	2000      	movs	r0, #0
   50a0c:	4770      	bx	lr

00050a0e <z_impl_k_mutex_init>:
{
   50a0e:	4603      	mov	r3, r0
	mutex->owner = NULL;
   50a10:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   50a12:	e9c3 0002 	strd	r0, r0, [r3, #8]
   50a16:	e9c3 3300 	strd	r3, r3, [r3]
}
   50a1a:	4770      	bx	lr

00050a1c <queue_insert>:
{
   50a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   50a20:	4699      	mov	r9, r3
   50a22:	4604      	mov	r4, r0
   50a24:	f89d 3020 	ldrb.w	r3, [sp, #32]
   50a28:	460d      	mov	r5, r1
   50a2a:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   50a2c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   50a30:	f04f 0220 	mov.w	r2, #32
   50a34:	f3ef 8711 	mrs	r7, BASEPRI
   50a38:	f382 8812 	msr	BASEPRI_MAX, r2
   50a3c:	f3bf 8f6f 	isb	sy
	if (is_append) {
   50a40:	b103      	cbz	r3, 50a44 <queue_insert+0x28>
	return list->tail;
   50a42:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   50a44:	4630      	mov	r0, r6
   50a46:	f000 fa60 	bl	50f0a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   50a4a:	b158      	cbz	r0, 50a64 <queue_insert+0x48>
   50a4c:	2300      	movs	r3, #0
   50a4e:	67c3      	str	r3, [r0, #124]	; 0x7c
   50a50:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   50a54:	f000 fa22 	bl	50e9c <z_ready_thread>
	z_reschedule(&queue->lock, key);
   50a58:	4630      	mov	r0, r6
   50a5a:	4639      	mov	r1, r7
   50a5c:	f7f7 ff3c 	bl	488d8 <z_reschedule>
		return 0;
   50a60:	2000      	movs	r0, #0
   50a62:	e00c      	b.n	50a7e <queue_insert+0x62>
	if (alloc) {
   50a64:	f1b9 0f00 	cmp.w	r9, #0
   50a68:	d01b      	beq.n	50aa2 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   50a6a:	2108      	movs	r1, #8
   50a6c:	f7f8 fb64 	bl	49138 <z_thread_aligned_alloc>
		if (anode == NULL) {
   50a70:	b938      	cbnz	r0, 50a82 <queue_insert+0x66>
	__asm__ volatile(
   50a72:	f387 8811 	msr	BASEPRI, r7
   50a76:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   50a7a:	f06f 000b 	mvn.w	r0, #11
}
   50a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   50a82:	2201      	movs	r2, #1
		anode->data = data;
   50a84:	f8c0 8004 	str.w	r8, [r0, #4]
   50a88:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   50a8a:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   50a8c:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   50a90:	b95d      	cbnz	r5, 50aaa <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   50a92:	6822      	ldr	r2, [r4, #0]
   50a94:	430a      	orrs	r2, r1
   50a96:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   50a98:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   50a9a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   50a9c:	b96a      	cbnz	r2, 50aba <queue_insert+0x9e>
	list->tail = node;
   50a9e:	6060      	str	r0, [r4, #4]
}
   50aa0:	e00b      	b.n	50aba <queue_insert+0x9e>
	node->next_and_flags = flags;
   50aa2:	f8c8 9000 	str.w	r9, [r8]
}
   50aa6:	4640      	mov	r0, r8
   50aa8:	e7ef      	b.n	50a8a <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   50aaa:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   50aac:	2a03      	cmp	r2, #3
   50aae:	d810      	bhi.n	50ad2 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   50ab0:	6001      	str	r1, [r0, #0]
	return list->tail;
   50ab2:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   50ab4:	b939      	cbnz	r1, 50ac6 <queue_insert+0xaa>
	list->head = node;
   50ab6:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   50aba:	2104      	movs	r1, #4
   50abc:	f104 0010 	add.w	r0, r4, #16
   50ac0:	f000 fc67 	bl	51392 <z_handle_obj_poll_events>
   50ac4:	e7c8      	b.n	50a58 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   50ac6:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   50ac8:	f002 0203 	and.w	r2, r2, #3
   50acc:	4302      	orrs	r2, r0
   50ace:	600a      	str	r2, [r1, #0]
   50ad0:	e7e5      	b.n	50a9e <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   50ad2:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   50ad6:	430a      	orrs	r2, r1
   50ad8:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   50ada:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   50adc:	f002 0203 	and.w	r2, r2, #3
   50ae0:	ea40 0302 	orr.w	r3, r0, r2
   50ae4:	602b      	str	r3, [r5, #0]
}
   50ae6:	e7e8      	b.n	50aba <queue_insert+0x9e>

00050ae8 <z_queue_node_peek>:
{
   50ae8:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   50aea:	4604      	mov	r4, r0
   50aec:	b130      	cbz	r0, 50afc <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   50aee:	6802      	ldr	r2, [r0, #0]
   50af0:	0793      	lsls	r3, r2, #30
   50af2:	d003      	beq.n	50afc <z_queue_node_peek+0x14>
		ret = anode->data;
   50af4:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   50af6:	b109      	cbz	r1, 50afc <z_queue_node_peek+0x14>
			k_free(anode);
   50af8:	f000 fc6c 	bl	513d4 <k_free>
}
   50afc:	4620      	mov	r0, r4
   50afe:	bd10      	pop	{r4, pc}

00050b00 <z_impl_k_queue_init>:
	list->head = NULL;
   50b00:	2300      	movs	r3, #0
	list->tail = NULL;
   50b02:	e9c0 3300 	strd	r3, r3, [r0]
   50b06:	f100 0308 	add.w	r3, r0, #8
   50b0a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   50b0e:	f100 0310 	add.w	r3, r0, #16
   50b12:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   50b16:	4770      	bx	lr

00050b18 <k_queue_append>:
{
   50b18:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   50b1a:	2301      	movs	r3, #1
   50b1c:	9300      	str	r3, [sp, #0]
   50b1e:	2300      	movs	r3, #0
{
   50b20:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   50b22:	4619      	mov	r1, r3
   50b24:	f7ff ff7a 	bl	50a1c <queue_insert>
}
   50b28:	b003      	add	sp, #12
   50b2a:	f85d fb04 	ldr.w	pc, [sp], #4

00050b2e <k_queue_prepend>:
{
   50b2e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   50b30:	2300      	movs	r3, #0
{
   50b32:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   50b34:	9300      	str	r3, [sp, #0]
   50b36:	4619      	mov	r1, r3
   50b38:	f7ff ff70 	bl	50a1c <queue_insert>
}
   50b3c:	b003      	add	sp, #12
   50b3e:	f85d fb04 	ldr.w	pc, [sp], #4

00050b42 <k_queue_append_list>:
{
   50b42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   50b46:	4680      	mov	r8, r0
   50b48:	4615      	mov	r5, r2
	CHECKIF(head == NULL || tail == NULL) {
   50b4a:	460c      	mov	r4, r1
   50b4c:	b3a9      	cbz	r1, 50bba <k_queue_append_list+0x78>
   50b4e:	b3a2      	cbz	r2, 50bba <k_queue_append_list+0x78>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   50b50:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   50b54:	f04f 0320 	mov.w	r3, #32
   50b58:	f3ef 8711 	mrs	r7, BASEPRI
   50b5c:	f383 8812 	msr	BASEPRI_MAX, r3
   50b60:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   50b64:	4630      	mov	r0, r6
   50b66:	f000 f9d0 	bl	50f0a <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   50b6a:	b168      	cbz	r0, 50b88 <k_queue_append_list+0x46>
   50b6c:	f04f 0900 	mov.w	r9, #0
	thread->base.swap_data = data;
   50b70:	6144      	str	r4, [r0, #20]
   50b72:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   50b76:	f000 f991 	bl	50e9c <z_ready_thread>
		head = *(void **)head;
   50b7a:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   50b7c:	4630      	mov	r0, r6
   50b7e:	f000 f9c4 	bl	50f0a <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   50b82:	b144      	cbz	r4, 50b96 <k_queue_append_list+0x54>
   50b84:	2800      	cmp	r0, #0
   50b86:	d1f3      	bne.n	50b70 <k_queue_append_list+0x2e>
	return list->tail;
   50b88:	f8d8 3004 	ldr.w	r3, [r8, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   50b8c:	b97b      	cbnz	r3, 50bae <k_queue_append_list+0x6c>
	list->head = node;
   50b8e:	f8c8 4000 	str.w	r4, [r8]
	list->tail = node;
   50b92:	f8c8 5004 	str.w	r5, [r8, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   50b96:	2104      	movs	r1, #4
   50b98:	f108 0010 	add.w	r0, r8, #16
   50b9c:	f000 fbf9 	bl	51392 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   50ba0:	4630      	mov	r0, r6
   50ba2:	4639      	mov	r1, r7
   50ba4:	f7f7 fe98 	bl	488d8 <z_reschedule>
	return 0;
   50ba8:	2000      	movs	r0, #0
}
   50baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   50bae:	681a      	ldr	r2, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   50bb0:	f002 0203 	and.w	r2, r2, #3
   50bb4:	4314      	orrs	r4, r2
   50bb6:	601c      	str	r4, [r3, #0]
}
   50bb8:	e7eb      	b.n	50b92 <k_queue_append_list+0x50>
		return -EINVAL;
   50bba:	f06f 0015 	mvn.w	r0, #21
   50bbe:	e7f4      	b.n	50baa <k_queue_append_list+0x68>

00050bc0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   50bc0:	b15a      	cbz	r2, 50bda <z_impl_k_sem_init+0x1a>
   50bc2:	428a      	cmp	r2, r1
   50bc4:	d309      	bcc.n	50bda <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   50bc6:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   50bca:	e9c0 1202 	strd	r1, r2, [r0, #8]
   50bce:	e9c0 0000 	strd	r0, r0, [r0]
   50bd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   50bd6:	2000      	movs	r0, #0
   50bd8:	4770      	bx	lr
		return -EINVAL;
   50bda:	f06f 0015 	mvn.w	r0, #21
}
   50bde:	4770      	bx	lr

00050be0 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   50be0:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   50be2:	2301      	movs	r3, #1
   50be4:	408b      	lsls	r3, r1
   50be6:	ea22 0303 	bic.w	r3, r2, r3
   50bea:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   50bec:	fa22 f001 	lsr.w	r0, r2, r1
}
   50bf0:	f000 0001 	and.w	r0, r0, #1
   50bf4:	4770      	bx	lr

00050bf6 <unschedule_locked>:
{
   50bf6:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   50bf8:	2103      	movs	r1, #3
{
   50bfa:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   50bfc:	300c      	adds	r0, #12
   50bfe:	f7ff ffef 	bl	50be0 <flag_test_and_clear>
   50c02:	4604      	mov	r4, r0
   50c04:	b118      	cbz	r0, 50c0e <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   50c06:	f105 0010 	add.w	r0, r5, #16
   50c0a:	f000 f9f7 	bl	50ffc <z_abort_timeout>
}
   50c0e:	4620      	mov	r0, r4
   50c10:	bd38      	pop	{r3, r4, r5, pc}

00050c12 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   50c12:	b120      	cbz	r0, 50c1e <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   50c14:	2200      	movs	r2, #0
   50c16:	4611      	mov	r1, r2
   50c18:	3088      	adds	r0, #136	; 0x88
   50c1a:	f000 b9cc 	b.w	50fb6 <z_sched_wake>
}
   50c1e:	4770      	bx	lr

00050c20 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   50c20:	68c3      	ldr	r3, [r0, #12]
{
   50c22:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   50c24:	f3c3 0540 	ubfx	r5, r3, #1, #1
   50c28:	079b      	lsls	r3, r3, #30
{
   50c2a:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   50c2c:	d416      	bmi.n	50c5c <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   50c2e:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   50c30:	2102      	movs	r1, #2
   50c32:	300c      	adds	r0, #12
   50c34:	f7ff ffd4 	bl	50be0 <flag_test_and_clear>
   50c38:	b180      	cbz	r0, 50c5c <cancel_async_locked+0x3c>
	return list->head;
   50c3a:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   50c3e:	b16a      	cbz	r2, 50c5c <cancel_async_locked+0x3c>
   50c40:	4294      	cmp	r4, r2
   50c42:	d11b      	bne.n	50c7c <cancel_async_locked+0x5c>
	return node->next;
   50c44:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   50c46:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   50c4a:	b98d      	cbnz	r5, 50c70 <cancel_async_locked+0x50>
   50c4c:	428c      	cmp	r4, r1
	list->head = node;
   50c4e:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   50c52:	d101      	bne.n	50c58 <cancel_async_locked+0x38>
	list->tail = node;
   50c54:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   50c58:	2300      	movs	r3, #0
   50c5a:	6023      	str	r3, [r4, #0]
	return *flagp;
   50c5c:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   50c5e:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   50c62:	bf1e      	ittt	ne
   50c64:	f043 0302 	orrne.w	r3, r3, #2
   50c68:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   50c6a:	f040 0002 	orrne.w	r0, r0, #2
}
   50c6e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   50c70:	428c      	cmp	r4, r1
	parent->next = child;
   50c72:	602a      	str	r2, [r5, #0]
	list->tail = node;
   50c74:	bf08      	it	eq
   50c76:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   50c7a:	e7ed      	b.n	50c58 <cancel_async_locked+0x38>
	return node->next;
   50c7c:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   50c7e:	6812      	ldr	r2, [r2, #0]
   50c80:	e7dd      	b.n	50c3e <cancel_async_locked+0x1e>

00050c82 <work_timeout>:
{
   50c82:	b573      	push	{r0, r1, r4, r5, r6, lr}
   50c84:	4604      	mov	r4, r0
   50c86:	f04f 0320 	mov.w	r3, #32
   50c8a:	f3ef 8511 	mrs	r5, BASEPRI
   50c8e:	f383 8812 	msr	BASEPRI_MAX, r3
   50c92:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   50c96:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   50c98:	f1a0 0610 	sub.w	r6, r0, #16
   50c9c:	2103      	movs	r1, #3
   50c9e:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   50ca0:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   50ca2:	f7ff ff9d 	bl	50be0 <flag_test_and_clear>
   50ca6:	b128      	cbz	r0, 50cb4 <work_timeout+0x32>
		queue = dw->queue;
   50ca8:	69a3      	ldr	r3, [r4, #24]
   50caa:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   50cac:	a901      	add	r1, sp, #4
   50cae:	4630      	mov	r0, r6
   50cb0:	f7f7 fb6e 	bl	48390 <submit_to_queue_locked>
	__asm__ volatile(
   50cb4:	f385 8811 	msr	BASEPRI, r5
   50cb8:	f3bf 8f6f 	isb	sy
}
   50cbc:	b002      	add	sp, #8
   50cbe:	bd70      	pop	{r4, r5, r6, pc}

00050cc0 <k_work_init>:
{
   50cc0:	b538      	push	{r3, r4, r5, lr}
   50cc2:	4604      	mov	r4, r0
   50cc4:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   50cc6:	2210      	movs	r2, #16
   50cc8:	2100      	movs	r1, #0
   50cca:	f7fb f857 	bl	4bd7c <memset>
   50cce:	6065      	str	r5, [r4, #4]
}
   50cd0:	bd38      	pop	{r3, r4, r5, pc}

00050cd2 <k_work_busy_get>:
	__asm__ volatile(
   50cd2:	f04f 0220 	mov.w	r2, #32
   50cd6:	f3ef 8311 	mrs	r3, BASEPRI
   50cda:	f382 8812 	msr	BASEPRI_MAX, r2
   50cde:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   50ce2:	68c0      	ldr	r0, [r0, #12]
   50ce4:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   50ce8:	f383 8811 	msr	BASEPRI, r3
   50cec:	f3bf 8f6f 	isb	sy
}
   50cf0:	4770      	bx	lr

00050cf2 <k_work_submit_to_queue>:
{
   50cf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   50cf4:	9001      	str	r0, [sp, #4]
   50cf6:	4608      	mov	r0, r1
	__asm__ volatile(
   50cf8:	f04f 0320 	mov.w	r3, #32
   50cfc:	f3ef 8511 	mrs	r5, BASEPRI
   50d00:	f383 8812 	msr	BASEPRI_MAX, r3
   50d04:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   50d08:	a901      	add	r1, sp, #4
   50d0a:	f7f7 fb41 	bl	48390 <submit_to_queue_locked>
   50d0e:	4604      	mov	r4, r0
	__asm__ volatile(
   50d10:	f385 8811 	msr	BASEPRI, r5
   50d14:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   50d18:	2800      	cmp	r0, #0
   50d1a:	dd04      	ble.n	50d26 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   50d1c:	f7f7 ff1c 	bl	48b58 <z_impl_k_is_preempt_thread>
   50d20:	b108      	cbz	r0, 50d26 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   50d22:	f7f7 fe77 	bl	48a14 <z_impl_k_yield>
}
   50d26:	4620      	mov	r0, r4
   50d28:	b003      	add	sp, #12
   50d2a:	bd30      	pop	{r4, r5, pc}

00050d2c <k_work_init_delayable>:
{
   50d2c:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   50d2e:	2230      	movs	r2, #48	; 0x30
{
   50d30:	4604      	mov	r4, r0
   50d32:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   50d34:	2100      	movs	r1, #0
   50d36:	f7fb f821 	bl	4bd7c <memset>
   50d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
   50d3e:	6065      	str	r5, [r4, #4]
   50d40:	60e3      	str	r3, [r4, #12]
}
   50d42:	bd38      	pop	{r3, r4, r5, pc}

00050d44 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   50d44:	f7ff bfc5 	b.w	50cd2 <k_work_busy_get>

00050d48 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   50d48:	b538      	push	{r3, r4, r5, lr}
   50d4a:	4604      	mov	r4, r0
	__asm__ volatile(
   50d4c:	f04f 0320 	mov.w	r3, #32
   50d50:	f3ef 8511 	mrs	r5, BASEPRI
   50d54:	f383 8812 	msr	BASEPRI_MAX, r3
   50d58:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   50d5c:	f7ff ff4b 	bl	50bf6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   50d60:	4620      	mov	r0, r4
   50d62:	f7ff ff5d 	bl	50c20 <cancel_async_locked>
	__asm__ volatile(
   50d66:	f385 8811 	msr	BASEPRI, r5
   50d6a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   50d6e:	bd38      	pop	{r3, r4, r5, pc}

00050d70 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   50d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   50d72:	4604      	mov	r4, r0
   50d74:	460d      	mov	r5, r1
	__asm__ volatile(
   50d76:	f04f 0320 	mov.w	r3, #32
   50d7a:	f3ef 8611 	mrs	r6, BASEPRI
   50d7e:	f383 8812 	msr	BASEPRI_MAX, r3
   50d82:	f3bf 8f6f 	isb	sy
	return *flagp;
   50d86:	68c3      	ldr	r3, [r0, #12]
   50d88:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   50d8c:	2b00      	cmp	r3, #0
   50d8e:	bf14      	ite	ne
   50d90:	2701      	movne	r7, #1
   50d92:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   50d94:	d105      	bne.n	50da2 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   50d96:	f386 8811 	msr	BASEPRI, r6
   50d9a:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   50d9e:	4638      	mov	r0, r7
   50da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   50da2:	f7ff ff28 	bl	50bf6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   50da6:	4620      	mov	r0, r4
   50da8:	f7ff ff3a 	bl	50c20 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   50dac:	4629      	mov	r1, r5
   50dae:	4620      	mov	r0, r4
   50db0:	f7f7 fad0 	bl	48354 <cancel_sync_locked>
   50db4:	f386 8811 	msr	BASEPRI, r6
   50db8:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   50dbc:	2800      	cmp	r0, #0
   50dbe:	d0ee      	beq.n	50d9e <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   50dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   50dc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   50dc8:	f105 0008 	add.w	r0, r5, #8
   50dcc:	f7f7 f9da 	bl	48184 <z_impl_k_sem_take>
   50dd0:	e7e5      	b.n	50d9e <k_work_cancel_delayable_sync+0x2e>

00050dd2 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   50dd2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   50dd6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   50dd8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   50dda:	2300      	movs	r3, #0
	node->prev = NULL;
   50ddc:	e9c0 3300 	strd	r3, r3, [r0]
}
   50de0:	4770      	bx	lr

00050de2 <unpend_thread_no_timeout>:
{
   50de2:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   50de4:	f7ff fff5 	bl	50dd2 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   50de8:	7b43      	ldrb	r3, [r0, #13]
   50dea:	f023 0302 	bic.w	r3, r3, #2
   50dee:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   50df0:	2300      	movs	r3, #0
   50df2:	6083      	str	r3, [r0, #8]
}
   50df4:	bd08      	pop	{r3, pc}

00050df6 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   50df6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   50dfa:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   50dfe:	4283      	cmp	r3, r0
		return b2 - b1;
   50e00:	bf14      	ite	ne
   50e02:	1ac0      	subne	r0, r0, r3
	return 0;
   50e04:	2000      	moveq	r0, #0
}
   50e06:	4770      	bx	lr

00050e08 <z_thread_timeout>:
{
   50e08:	b510      	push	{r4, lr}
   50e0a:	4601      	mov	r1, r0
	__asm__ volatile(
   50e0c:	f04f 0320 	mov.w	r3, #32
   50e10:	f3ef 8411 	mrs	r4, BASEPRI
   50e14:	f383 8812 	msr	BASEPRI_MAX, r3
   50e18:	f3bf 8f6f 	isb	sy
		if (!killed) {
   50e1c:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   50e20:	f013 0f28 	tst.w	r3, #40	; 0x28
   50e24:	d10d      	bne.n	50e42 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   50e26:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   50e2a:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   50e2c:	b10b      	cbz	r3, 50e32 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   50e2e:	f7ff ffd8 	bl	50de2 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   50e32:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   50e36:	f023 0314 	bic.w	r3, r3, #20
   50e3a:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   50e3e:	f7f7 fc0d 	bl	4865c <ready_thread>
	__asm__ volatile(
   50e42:	f384 8811 	msr	BASEPRI, r4
   50e46:	f3bf 8f6f 	isb	sy
}
   50e4a:	bd10      	pop	{r4, pc}

00050e4c <add_to_waitq_locked>:
{
   50e4c:	b538      	push	{r3, r4, r5, lr}
   50e4e:	4604      	mov	r4, r0
   50e50:	460d      	mov	r5, r1
	unready_thread(thread);
   50e52:	f7f7 fc37 	bl	486c4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   50e56:	7b63      	ldrb	r3, [r4, #13]
   50e58:	f043 0302 	orr.w	r3, r3, #2
   50e5c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   50e5e:	b1e5      	cbz	r5, 50e9a <add_to_waitq_locked+0x4e>
	return list->head == list;
   50e60:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   50e62:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   50e64:	429d      	cmp	r5, r3
   50e66:	d109      	bne.n	50e7c <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   50e68:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   50e6a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   50e6e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   50e70:	606c      	str	r4, [r5, #4]
}
   50e72:	e012      	b.n	50e9a <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   50e74:	686a      	ldr	r2, [r5, #4]
   50e76:	4293      	cmp	r3, r2
   50e78:	d0f6      	beq.n	50e68 <add_to_waitq_locked+0x1c>
   50e7a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   50e7c:	2b00      	cmp	r3, #0
   50e7e:	d0f3      	beq.n	50e68 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   50e80:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   50e84:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   50e88:	428a      	cmp	r2, r1
   50e8a:	d0f3      	beq.n	50e74 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   50e8c:	4291      	cmp	r1, r2
   50e8e:	ddf1      	ble.n	50e74 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   50e90:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   50e92:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   50e96:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   50e98:	605c      	str	r4, [r3, #4]
}
   50e9a:	bd38      	pop	{r3, r4, r5, pc}

00050e9c <z_ready_thread>:
{
   50e9c:	b510      	push	{r4, lr}
	__asm__ volatile(
   50e9e:	f04f 0320 	mov.w	r3, #32
   50ea2:	f3ef 8411 	mrs	r4, BASEPRI
   50ea6:	f383 8812 	msr	BASEPRI_MAX, r3
   50eaa:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   50eae:	f7f7 fbd5 	bl	4865c <ready_thread>
	__asm__ volatile(
   50eb2:	f384 8811 	msr	BASEPRI, r4
   50eb6:	f3bf 8f6f 	isb	sy
}
   50eba:	bd10      	pop	{r4, pc}

00050ebc <z_unpend_thread_no_timeout>:
{
   50ebc:	b508      	push	{r3, lr}
	__asm__ volatile(
   50ebe:	f04f 0320 	mov.w	r3, #32
   50ec2:	f3ef 8111 	mrs	r1, BASEPRI
   50ec6:	f383 8812 	msr	BASEPRI_MAX, r3
   50eca:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   50ece:	f7ff ff88 	bl	50de2 <unpend_thread_no_timeout>
	__asm__ volatile(
   50ed2:	f381 8811 	msr	BASEPRI, r1
   50ed6:	f3bf 8f6f 	isb	sy
}
   50eda:	bd08      	pop	{r3, pc}

00050edc <z_unpend1_no_timeout>:
{
   50edc:	b508      	push	{r3, lr}
   50ede:	4603      	mov	r3, r0
	__asm__ volatile(
   50ee0:	f04f 0220 	mov.w	r2, #32
   50ee4:	f3ef 8111 	mrs	r1, BASEPRI
   50ee8:	f382 8812 	msr	BASEPRI_MAX, r2
   50eec:	f3bf 8f6f 	isb	sy
	return list->head == list;
   50ef0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   50ef2:	4283      	cmp	r3, r0
   50ef4:	d007      	beq.n	50f06 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   50ef6:	b108      	cbz	r0, 50efc <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   50ef8:	f7ff ff73 	bl	50de2 <unpend_thread_no_timeout>
	__asm__ volatile(
   50efc:	f381 8811 	msr	BASEPRI, r1
   50f00:	f3bf 8f6f 	isb	sy
}
   50f04:	bd08      	pop	{r3, pc}
   50f06:	2000      	movs	r0, #0
   50f08:	e7f8      	b.n	50efc <z_unpend1_no_timeout+0x20>

00050f0a <z_unpend_first_thread>:
{
   50f0a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   50f0c:	f04f 0320 	mov.w	r3, #32
   50f10:	f3ef 8511 	mrs	r5, BASEPRI
   50f14:	f383 8812 	msr	BASEPRI_MAX, r3
   50f18:	f3bf 8f6f 	isb	sy
	return list->head == list;
   50f1c:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   50f1e:	42a0      	cmp	r0, r4
   50f20:	d00d      	beq.n	50f3e <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   50f22:	b134      	cbz	r4, 50f32 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   50f24:	4620      	mov	r0, r4
   50f26:	f7ff ff5c 	bl	50de2 <unpend_thread_no_timeout>
   50f2a:	f104 0018 	add.w	r0, r4, #24
   50f2e:	f000 f865 	bl	50ffc <z_abort_timeout>
	__asm__ volatile(
   50f32:	f385 8811 	msr	BASEPRI, r5
   50f36:	f3bf 8f6f 	isb	sy
}
   50f3a:	4620      	mov	r0, r4
   50f3c:	bd38      	pop	{r3, r4, r5, pc}
   50f3e:	2400      	movs	r4, #0
   50f40:	e7f7      	b.n	50f32 <z_unpend_first_thread+0x28>

00050f42 <z_unpend_thread>:
{
   50f42:	b510      	push	{r4, lr}
	__asm__ volatile(
   50f44:	f04f 0320 	mov.w	r3, #32
   50f48:	f3ef 8411 	mrs	r4, BASEPRI
   50f4c:	f383 8812 	msr	BASEPRI_MAX, r3
   50f50:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   50f54:	f7ff ff45 	bl	50de2 <unpend_thread_no_timeout>
	__asm__ volatile(
   50f58:	f384 8811 	msr	BASEPRI, r4
   50f5c:	f3bf 8f6f 	isb	sy
}
   50f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   50f64:	3018      	adds	r0, #24
   50f66:	f000 b849 	b.w	50ffc <z_abort_timeout>

00050f6a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   50f6a:	4603      	mov	r3, r0
   50f6c:	b920      	cbnz	r0, 50f78 <z_reschedule_irqlock+0xe>
   50f6e:	f3ef 8205 	mrs	r2, IPSR
   50f72:	b90a      	cbnz	r2, 50f78 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   50f74:	f7db befc 	b.w	2cd70 <arch_swap>
   50f78:	f383 8811 	msr	BASEPRI, r3
   50f7c:	f3bf 8f6f 	isb	sy
}
   50f80:	4770      	bx	lr

00050f82 <z_reschedule_unlocked>:
	__asm__ volatile(
   50f82:	f04f 0320 	mov.w	r3, #32
   50f86:	f3ef 8011 	mrs	r0, BASEPRI
   50f8a:	f383 8812 	msr	BASEPRI_MAX, r3
   50f8e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   50f92:	f7ff bfea 	b.w	50f6a <z_reschedule_irqlock>

00050f96 <z_unpend_all>:
{
   50f96:	b538      	push	{r3, r4, r5, lr}
   50f98:	4605      	mov	r5, r0
	int need_sched = 0;
   50f9a:	2000      	movs	r0, #0
	return list->head == list;
   50f9c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   50f9e:	42a5      	cmp	r5, r4
   50fa0:	d000      	beq.n	50fa4 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   50fa2:	b904      	cbnz	r4, 50fa6 <z_unpend_all+0x10>
}
   50fa4:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   50fa6:	4620      	mov	r0, r4
   50fa8:	f7ff ffcb 	bl	50f42 <z_unpend_thread>
		z_ready_thread(thread);
   50fac:	4620      	mov	r0, r4
   50fae:	f7ff ff75 	bl	50e9c <z_ready_thread>
		need_sched = 1;
   50fb2:	2001      	movs	r0, #1
   50fb4:	e7f2      	b.n	50f9c <z_unpend_all+0x6>

00050fb6 <z_sched_wake>:
{
   50fb6:	b538      	push	{r3, r4, r5, lr}
   50fb8:	f04f 0320 	mov.w	r3, #32
   50fbc:	f3ef 8511 	mrs	r5, BASEPRI
   50fc0:	f383 8812 	msr	BASEPRI_MAX, r3
   50fc4:	f3bf 8f6f 	isb	sy
	return list->head == list;
   50fc8:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   50fca:	42a0      	cmp	r0, r4
   50fcc:	d012      	beq.n	50ff4 <z_sched_wake+0x3e>
		if (thread != NULL) {
   50fce:	b19c      	cbz	r4, 50ff8 <z_sched_wake+0x42>
   50fd0:	67e1      	str	r1, [r4, #124]	; 0x7c
   50fd2:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   50fd4:	4620      	mov	r0, r4
   50fd6:	f7ff ff04 	bl	50de2 <unpend_thread_no_timeout>
   50fda:	f104 0018 	add.w	r0, r4, #24
   50fde:	f000 f80d 	bl	50ffc <z_abort_timeout>
			ready_thread(thread);
   50fe2:	4620      	mov	r0, r4
   50fe4:	f7f7 fb3a 	bl	4865c <ready_thread>
			ret = true;
   50fe8:	2001      	movs	r0, #1
	__asm__ volatile(
   50fea:	f385 8811 	msr	BASEPRI, r5
   50fee:	f3bf 8f6f 	isb	sy
}
   50ff2:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   50ff4:	2000      	movs	r0, #0
   50ff6:	e7f8      	b.n	50fea <z_sched_wake+0x34>
   50ff8:	4620      	mov	r0, r4
   50ffa:	e7f6      	b.n	50fea <z_sched_wake+0x34>

00050ffc <z_abort_timeout>:
{
   50ffc:	b510      	push	{r4, lr}
	__asm__ volatile(
   50ffe:	f04f 0220 	mov.w	r2, #32
   51002:	f3ef 8411 	mrs	r4, BASEPRI
   51006:	f382 8812 	msr	BASEPRI_MAX, r2
   5100a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   5100e:	6803      	ldr	r3, [r0, #0]
   51010:	b13b      	cbz	r3, 51022 <z_abort_timeout+0x26>
			remove_timeout(to);
   51012:	f7f7 fe61 	bl	48cd8 <remove_timeout>
			ret = 0;
   51016:	2000      	movs	r0, #0
	__asm__ volatile(
   51018:	f384 8811 	msr	BASEPRI, r4
   5101c:	f3bf 8f6f 	isb	sy
}
   51020:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   51022:	f06f 0015 	mvn.w	r0, #21
   51026:	e7f7      	b.n	51018 <z_abort_timeout+0x1c>

00051028 <z_get_next_timeout_expiry>:
{
   51028:	b510      	push	{r4, lr}
	__asm__ volatile(
   5102a:	f04f 0320 	mov.w	r3, #32
   5102e:	f3ef 8411 	mrs	r4, BASEPRI
   51032:	f383 8812 	msr	BASEPRI_MAX, r3
   51036:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   5103a:	f7f7 fe25 	bl	48c88 <next_timeout>
	__asm__ volatile(
   5103e:	f384 8811 	msr	BASEPRI, r4
   51042:	f3bf 8f6f 	isb	sy
}
   51046:	bd10      	pop	{r4, pc}

00051048 <z_set_timeout_expiry>:
{
   51048:	b570      	push	{r4, r5, r6, lr}
   5104a:	4604      	mov	r4, r0
   5104c:	460d      	mov	r5, r1
	__asm__ volatile(
   5104e:	f04f 0320 	mov.w	r3, #32
   51052:	f3ef 8611 	mrs	r6, BASEPRI
   51056:	f383 8812 	msr	BASEPRI_MAX, r3
   5105a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   5105e:	f7f7 fe13 	bl	48c88 <next_timeout>
			      || (ticks <= next_to);
   51062:	2801      	cmp	r0, #1
   51064:	dd07      	ble.n	51076 <z_set_timeout_expiry+0x2e>
   51066:	42a0      	cmp	r0, r4
   51068:	db05      	blt.n	51076 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   5106a:	42a0      	cmp	r0, r4
   5106c:	4629      	mov	r1, r5
   5106e:	bfa8      	it	ge
   51070:	4620      	movge	r0, r4
   51072:	f7f4 fdd1 	bl	45c18 <sys_clock_set_timeout>
	__asm__ volatile(
   51076:	f386 8811 	msr	BASEPRI, r6
   5107a:	f3bf 8f6f 	isb	sy
}
   5107e:	bd70      	pop	{r4, r5, r6, pc}

00051080 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   51080:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   51082:	f7f7 ff1d 	bl	48ec0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   51086:	bd08      	pop	{r3, pc}

00051088 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   51088:	f7f7 bf1a 	b.w	48ec0 <sys_clock_tick_get>

0005108c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   5108c:	b108      	cbz	r0, 51092 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   5108e:	f7dc b909 	b.w	2d2a4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   51092:	4770      	bx	lr

00051094 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   51094:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   51098:	bf08      	it	eq
   5109a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   5109e:	b538      	push	{r3, r4, r5, lr}
   510a0:	460c      	mov	r4, r1
   510a2:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   510a4:	d014      	beq.n	510d0 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   510a6:	4308      	orrs	r0, r1
   510a8:	d103      	bne.n	510b2 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   510aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   510ae:	f7f7 bf07 	b.w	48ec0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   510b2:	f06f 0001 	mvn.w	r0, #1
   510b6:	1b40      	subs	r0, r0, r5
   510b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   510bc:	eb63 0101 	sbc.w	r1, r3, r1
   510c0:	2900      	cmp	r1, #0
   510c2:	da04      	bge.n	510ce <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   510c4:	f7f7 fefc 	bl	48ec0 <sys_clock_tick_get>
   510c8:	1940      	adds	r0, r0, r5
   510ca:	eb41 0104 	adc.w	r1, r1, r4
}
   510ce:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   510d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   510d4:	4601      	mov	r1, r0
   510d6:	e7fa      	b.n	510ce <sys_clock_timeout_end_calc+0x3a>

000510d8 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   510d8:	b510      	push	{r4, lr}
   510da:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   510dc:	f7ff ff8e 	bl	50ffc <z_abort_timeout>

	if (inactive) {
   510e0:	b9b0      	cbnz	r0, 51110 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   510e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   510e4:	b10b      	cbz	r3, 510ea <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   510e6:	4620      	mov	r0, r4
   510e8:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   510ea:	f104 0018 	add.w	r0, r4, #24
   510ee:	f7ff fef5 	bl	50edc <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   510f2:	b168      	cbz	r0, 51110 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   510f4:	f7ff fed2 	bl	50e9c <z_ready_thread>
	__asm__ volatile(
   510f8:	f04f 0320 	mov.w	r3, #32
   510fc:	f3ef 8011 	mrs	r0, BASEPRI
   51100:	f383 8812 	msr	BASEPRI_MAX, r3
   51104:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   51108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   5110c:	f7ff bf2d 	b.w	50f6a <z_reschedule_irqlock>
   51110:	bd10      	pop	{r4, pc}

00051112 <add_event>:
{
   51112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   51114:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   51116:	e9d0 1300 	ldrd	r1, r3, [r0]
   5111a:	4288      	cmp	r0, r1
   5111c:	4604      	mov	r4, r0
   5111e:	d105      	bne.n	5112c <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   51120:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   51122:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   51126:	601d      	str	r5, [r3, #0]
	list->tail = node;
   51128:	6065      	str	r5, [r4, #4]
   5112a:	e01d      	b.n	51168 <add_event+0x56>
	if ((pending == NULL) ||
   5112c:	2b00      	cmp	r3, #0
   5112e:	d0f7      	beq.n	51120 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   51130:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   51132:	b100      	cbz	r0, 51136 <add_event+0x24>
   51134:	3860      	subs	r0, #96	; 0x60
   51136:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   5113a:	4639      	mov	r1, r7
   5113c:	f7ff fe5b 	bl	50df6 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   51140:	2800      	cmp	r0, #0
   51142:	dced      	bgt.n	51120 <add_event+0xe>
	return list->head == list;
   51144:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   51146:	42b4      	cmp	r4, r6
   51148:	d0ea      	beq.n	51120 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   5114a:	2e00      	cmp	r6, #0
   5114c:	d0e8      	beq.n	51120 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   5114e:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   51150:	b101      	cbz	r1, 51154 <add_event+0x42>
   51152:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   51154:	4638      	mov	r0, r7
   51156:	f7ff fe4e 	bl	50df6 <z_sched_prio_cmp>
   5115a:	2800      	cmp	r0, #0
   5115c:	dd05      	ble.n	5116a <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   5115e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   51160:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   51164:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   51166:	6075      	str	r5, [r6, #4]
}
   51168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   5116a:	6863      	ldr	r3, [r4, #4]
   5116c:	429e      	cmp	r6, r3
   5116e:	d0d7      	beq.n	51120 <add_event+0xe>
   51170:	6836      	ldr	r6, [r6, #0]
   51172:	e7ea      	b.n	5114a <add_event+0x38>

00051174 <register_events>:
{
   51174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   51178:	2500      	movs	r5, #0
{
   5117a:	468b      	mov	fp, r1
   5117c:	4614      	mov	r4, r2
   5117e:	461f      	mov	r7, r3
   51180:	4682      	mov	sl, r0
	int events_registered = 0;
   51182:	462e      	mov	r6, r5
	event->poller = NULL;
   51184:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   51186:	455d      	cmp	r5, fp
   51188:	db02      	blt.n	51190 <register_events+0x1c>
}
   5118a:	4630      	mov	r0, r6
   5118c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51190:	f04f 0320 	mov.w	r3, #32
   51194:	f3ef 8911 	mrs	r9, BASEPRI
   51198:	f383 8812 	msr	BASEPRI_MAX, r3
   5119c:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   511a0:	f89a 300d 	ldrb.w	r3, [sl, #13]
   511a4:	f003 031f 	and.w	r3, r3, #31
   511a8:	3b01      	subs	r3, #1
   511aa:	2b07      	cmp	r3, #7
   511ac:	d80f      	bhi.n	511ce <register_events+0x5a>
   511ae:	e8df f003 	tbb	[pc, r3]
   511b2:	041e      	.short	0x041e
   511b4:	0e0e0a0e 	.word	0x0e0e0a0e
   511b8:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   511ba:	f8da 3010 	ldr.w	r3, [sl, #16]
   511be:	689b      	ldr	r3, [r3, #8]
   511c0:	b12b      	cbz	r3, 511ce <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   511c2:	2302      	movs	r3, #2
   511c4:	e020      	b.n	51208 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   511c6:	f8da 3010 	ldr.w	r3, [sl, #16]
   511ca:	681b      	ldr	r3, [r3, #0]
   511cc:	bb8b      	cbnz	r3, 51232 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   511ce:	bb47      	cbnz	r7, 51222 <register_events+0xae>
   511d0:	7823      	ldrb	r3, [r4, #0]
   511d2:	b333      	cbz	r3, 51222 <register_events+0xae>
	switch (event->type) {
   511d4:	f89a 300d 	ldrb.w	r3, [sl, #13]
   511d8:	f003 031f 	and.w	r3, r3, #31
   511dc:	3b01      	subs	r3, #1
   511de:	2b07      	cmp	r3, #7
   511e0:	d830      	bhi.n	51244 <register_events+0xd0>
   511e2:	e8df f003 	tbb	[pc, r3]
   511e6:	2833      	.short	0x2833
   511e8:	2f2f282f 	.word	0x2f2f282f
   511ec:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   511ee:	f8da 3010 	ldr.w	r3, [sl, #16]
   511f2:	689b      	ldr	r3, [r3, #8]
   511f4:	2b00      	cmp	r3, #0
   511f6:	d0ea      	beq.n	511ce <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   511f8:	2301      	movs	r3, #1
   511fa:	e005      	b.n	51208 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   511fc:	f8da 3010 	ldr.w	r3, [sl, #16]
   51200:	6a1b      	ldr	r3, [r3, #32]
   51202:	2b00      	cmp	r3, #0
   51204:	d0e3      	beq.n	511ce <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   51206:	2310      	movs	r3, #16
	event->state |= state;
   51208:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   5120c:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   51210:	f3c2 3145 	ubfx	r1, r2, #13, #6
   51214:	430b      	orrs	r3, r1
   51216:	f363 3252 	bfi	r2, r3, #13, #6
   5121a:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   5121e:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   51222:	f389 8811 	msr	BASEPRI, r9
   51226:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   5122a:	3501      	adds	r5, #1
   5122c:	f10a 0a14 	add.w	sl, sl, #20
   51230:	e7a9      	b.n	51186 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   51232:	2304      	movs	r3, #4
   51234:	e7e8      	b.n	51208 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   51236:	f8da 0010 	ldr.w	r0, [sl, #16]
   5123a:	4622      	mov	r2, r4
   5123c:	4651      	mov	r1, sl
   5123e:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   51240:	f7ff ff67 	bl	51112 <add_event>
	event->poller = poller;
   51244:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   51248:	3601      	adds	r6, #1
   5124a:	e7ea      	b.n	51222 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   5124c:	f8da 0010 	ldr.w	r0, [sl, #16]
   51250:	4622      	mov	r2, r4
   51252:	4651      	mov	r1, sl
   51254:	e7f4      	b.n	51240 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   51256:	f8da 0010 	ldr.w	r0, [sl, #16]
   5125a:	4622      	mov	r2, r4
   5125c:	4651      	mov	r1, sl
   5125e:	3024      	adds	r0, #36	; 0x24
   51260:	e7ee      	b.n	51240 <register_events+0xcc>

00051262 <signal_poll_event>:
{
   51262:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   51266:	6884      	ldr	r4, [r0, #8]
{
   51268:	4605      	mov	r5, r0
   5126a:	460e      	mov	r6, r1
	if (poller != NULL) {
   5126c:	b144      	cbz	r4, 51280 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   5126e:	7863      	ldrb	r3, [r4, #1]
   51270:	2b01      	cmp	r3, #1
   51272:	d12e      	bne.n	512d2 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   51274:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   51278:	f013 0302 	ands.w	r3, r3, #2
   5127c:	d10a      	bne.n	51294 <signal_poll_event+0x32>
		poller->is_polling = false;
   5127e:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   51280:	68eb      	ldr	r3, [r5, #12]
   51282:	f3c3 3245 	ubfx	r2, r3, #13, #6
   51286:	4316      	orrs	r6, r2
	event->poller = NULL;
   51288:	2000      	movs	r0, #0
	event->state |= state;
   5128a:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   5128e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   51290:	60eb      	str	r3, [r5, #12]
	return retcode;
   51292:	e03e      	b.n	51312 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   51294:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   51298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   5129c:	bf08      	it	eq
   5129e:	f112 0f02 	cmneq.w	r2, #2
   512a2:	d032      	beq.n	5130a <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   512a4:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   512a8:	4640      	mov	r0, r8
   512aa:	f7ff fe4a 	bl	50f42 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   512ae:	2e08      	cmp	r6, #8
   512b0:	bf0c      	ite	eq
   512b2:	f06f 0303 	mvneq.w	r3, #3
   512b6:	2300      	movne	r3, #0
   512b8:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   512ba:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   512be:	06db      	lsls	r3, r3, #27
   512c0:	d109      	bne.n	512d6 <signal_poll_event+0x74>
   512c2:	f854 7c48 	ldr.w	r7, [r4, #-72]
   512c6:	b937      	cbnz	r7, 512d6 <signal_poll_event+0x74>
	z_ready_thread(thread);
   512c8:	4640      	mov	r0, r8
   512ca:	f7ff fde7 	bl	50e9c <z_ready_thread>
		poller->is_polling = false;
   512ce:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   512d0:	e7d6      	b.n	51280 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   512d2:	2b02      	cmp	r3, #2
   512d4:	d001      	beq.n	512da <signal_poll_event+0x78>
		poller->is_polling = false;
   512d6:	2300      	movs	r3, #0
   512d8:	e7d1      	b.n	5127e <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   512da:	7823      	ldrb	r3, [r4, #0]
   512dc:	2b00      	cmp	r3, #0
   512de:	d0cf      	beq.n	51280 <signal_poll_event+0x1e>
   512e0:	f854 7c04 	ldr.w	r7, [r4, #-4]
   512e4:	2f00      	cmp	r7, #0
   512e6:	d0f2      	beq.n	512ce <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   512e8:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   512ec:	f1a4 0914 	sub.w	r9, r4, #20
   512f0:	f104 0014 	add.w	r0, r4, #20
   512f4:	f7ff fe82 	bl	50ffc <z_abort_timeout>
		twork->poll_result = 0;
   512f8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   512fc:	4649      	mov	r1, r9
   512fe:	4638      	mov	r0, r7
   51300:	f7ff fcf7 	bl	50cf2 <k_work_submit_to_queue>
		poller->is_polling = false;
   51304:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   51308:	e7ba      	b.n	51280 <signal_poll_event+0x1e>
		poller->is_polling = false;
   5130a:	2300      	movs	r3, #0
   5130c:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   5130e:	f06f 000a 	mvn.w	r0, #10
}
   51312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00051316 <clear_event_registrations>:
	while (num_events--) {
   51316:	2314      	movs	r3, #20
{
   51318:	b5f0      	push	{r4, r5, r6, r7, lr}
   5131a:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   5131e:	2400      	movs	r4, #0
	switch (event->type) {
   51320:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   51324:	b901      	cbnz	r1, 51328 <clear_event_registrations+0x12>
}
   51326:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   51328:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   5132c:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   51330:	f003 031f 	and.w	r3, r3, #31
   51334:	2b08      	cmp	r3, #8
   51336:	f1a0 0714 	sub.w	r7, r0, #20
   5133a:	d80c      	bhi.n	51356 <clear_event_registrations+0x40>
   5133c:	fa26 f303 	lsr.w	r3, r6, r3
   51340:	07db      	lsls	r3, r3, #31
   51342:	d508      	bpl.n	51356 <clear_event_registrations+0x40>
	return node->next != NULL;
   51344:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   51348:	b12b      	cbz	r3, 51356 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   5134a:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   5134e:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   51350:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   51352:	e940 4405 	strd	r4, r4, [r0, #-20]
   51356:	f382 8811 	msr	BASEPRI, r2
   5135a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   5135e:	f04f 0320 	mov.w	r3, #32
   51362:	f3ef 8211 	mrs	r2, BASEPRI
   51366:	f383 8812 	msr	BASEPRI_MAX, r3
   5136a:	f3bf 8f6f 	isb	sy
   5136e:	3901      	subs	r1, #1
   51370:	4638      	mov	r0, r7
   51372:	e7d7      	b.n	51324 <clear_event_registrations+0xe>

00051374 <k_poll_event_init>:
{
   51374:	b510      	push	{r4, lr}
	event->type = type;
   51376:	04d2      	lsls	r2, r2, #19
   51378:	0209      	lsls	r1, r1, #8
   5137a:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   5137e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   51382:	430a      	orrs	r2, r1
   51384:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   51386:	2400      	movs	r4, #0
	event->type = type;
   51388:	430a      	orrs	r2, r1
	event->obj = obj;
   5138a:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   5138e:	6084      	str	r4, [r0, #8]
}
   51390:	bd10      	pop	{r4, pc}

00051392 <z_handle_obj_poll_events>:
{
   51392:	4603      	mov	r3, r0
	return list->head == list;
   51394:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   51396:	4283      	cmp	r3, r0
   51398:	d008      	beq.n	513ac <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   5139a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   5139e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   513a0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   513a2:	2300      	movs	r3, #0
	node->prev = NULL;
   513a4:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   513a8:	f7ff bf5b 	b.w	51262 <signal_poll_event>
}
   513ac:	4770      	bx	lr

000513ae <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   513ae:	3204      	adds	r2, #4
{
   513b0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   513b2:	4604      	mov	r4, r0
   513b4:	d208      	bcs.n	513c8 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   513b6:	2600      	movs	r6, #0
   513b8:	2700      	movs	r7, #0
   513ba:	e9cd 6700 	strd	r6, r7, [sp]
   513be:	f041 0104 	orr.w	r1, r1, #4
   513c2:	f7ff fa83 	bl	508cc <k_heap_aligned_alloc>
	if (mem == NULL) {
   513c6:	b910      	cbnz	r0, 513ce <z_heap_aligned_alloc+0x20>
		return NULL;
   513c8:	2000      	movs	r0, #0
}
   513ca:	b002      	add	sp, #8
   513cc:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   513ce:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   513d2:	e7fa      	b.n	513ca <z_heap_aligned_alloc+0x1c>

000513d4 <k_free>:
	if (ptr != NULL) {
   513d4:	b120      	cbz	r0, 513e0 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   513d6:	1f01      	subs	r1, r0, #4
   513d8:	f850 0c04 	ldr.w	r0, [r0, #-4]
   513dc:	f7ff bab7 	b.w	5094e <k_heap_free>
}
   513e0:	4770      	bx	lr

000513e2 <k_malloc>:
{
   513e2:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   513e4:	2004      	movs	r0, #4
   513e6:	f7f7 be99 	b.w	4911c <k_aligned_alloc>

000513ea <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   513ea:	4770      	bx	lr

000513ec <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   513ec:	f7f4 bc6a 	b.w	45cc4 <SystemInit>
