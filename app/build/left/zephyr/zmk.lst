
zmk.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00026000 <_vector_table>:
   26000:	e8 a3 00 20 bd cf 02 00 db ba 04 00 91 cf 02 00     ... ............
   26010:	91 cf 02 00 91 cf 02 00 91 cf 02 00 00 00 00 00     ................
	...
   2602c:	25 cd 02 00 91 cf 02 00 00 00 00 00 dd cc 02 00     %...............
   2603c:	91 cf 02 00                                         ....

00026040 <_irq_vector_table>:
   26040:	a1 cd 02 00 b9 fe 03 00 a1 cd 02 00 a1 cd 02 00     ................
   26050:	a1 cd 02 00 a1 cd 02 00 a1 cd 02 00 a1 cd 02 00     ................
   26060:	a1 cd 02 00 a1 cd 02 00 a1 cd 02 00 a1 cd 02 00     ................
   26070:	a1 cd 02 00 a1 cd 02 00 a1 cd 02 00 a1 cd 02 00     ................
   26080:	a1 cd 02 00 a1 cd 02 00 a1 cd 02 00 a1 cd 02 00     ................
   26090:	a1 cd 02 00 a1 cd 02 00 a1 cd 02 00 a1 cd 02 00     ................
   260a0:	a1 cd 02 00 a1 cd 02 00 a1 cd 02 00 a1 cd 02 00     ................
   260b0:	a1 cd 02 00 a1 cd 02 00 a1 cd 02 00 a1 cd 02 00     ................
   260c0:	a1 cd 02 00 a1 cd 02 00 a1 cd 02 00 a1 cd 02 00     ................
   260d0:	a1 cd 02 00 a1 cd 02 00 a1 cd 02 00 a1 cd 02 00     ................
   260e0:	a1 cd 02 00 a1 cd 02 00 a1 cd 02 00 a1 cd 02 00     ................
   260f0:	a1 cd 02 00 a1 cd 02 00 a1 cd 02 00 a1 cd 02 00     ................

Disassembly of section text:

00026100 <__aeabi_uldivmod>:
   26100:	b953      	cbnz	r3, 26118 <__aeabi_uldivmod+0x18>
   26102:	b94a      	cbnz	r2, 26118 <__aeabi_uldivmod+0x18>
   26104:	2900      	cmp	r1, #0
   26106:	bf08      	it	eq
   26108:	2800      	cmpeq	r0, #0
   2610a:	bf1c      	itt	ne
   2610c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   26110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   26114:	f000 b80c 	b.w	26130 <__aeabi_idiv0>
   26118:	f1ad 0c08 	sub.w	ip, sp, #8
   2611c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   26120:	f000 f808 	bl	26134 <__udivmoddi4>
   26124:	f8dd e004 	ldr.w	lr, [sp, #4]
   26128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2612c:	b004      	add	sp, #16
   2612e:	4770      	bx	lr

00026130 <__aeabi_idiv0>:
   26130:	4770      	bx	lr
   26132:	bf00      	nop

00026134 <__udivmoddi4>:
   26134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26138:	4686      	mov	lr, r0
   2613a:	468c      	mov	ip, r1
   2613c:	4608      	mov	r0, r1
   2613e:	9e08      	ldr	r6, [sp, #32]
   26140:	4615      	mov	r5, r2
   26142:	4674      	mov	r4, lr
   26144:	4619      	mov	r1, r3
   26146:	2b00      	cmp	r3, #0
   26148:	f040 80c2 	bne.w	262d0 <__udivmoddi4+0x19c>
   2614c:	4285      	cmp	r5, r0
   2614e:	fab2 f282 	clz	r2, r2
   26152:	d945      	bls.n	261e0 <__udivmoddi4+0xac>
   26154:	b14a      	cbz	r2, 2616a <__udivmoddi4+0x36>
   26156:	f1c2 0320 	rsb	r3, r2, #32
   2615a:	fa00 fc02 	lsl.w	ip, r0, r2
   2615e:	fa2e f303 	lsr.w	r3, lr, r3
   26162:	4095      	lsls	r5, r2
   26164:	ea43 0c0c 	orr.w	ip, r3, ip
   26168:	4094      	lsls	r4, r2
   2616a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   2616e:	b2a8      	uxth	r0, r5
   26170:	fbbc f8fe 	udiv	r8, ip, lr
   26174:	0c23      	lsrs	r3, r4, #16
   26176:	fb0e cc18 	mls	ip, lr, r8, ip
   2617a:	fb08 f900 	mul.w	r9, r8, r0
   2617e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   26182:	4599      	cmp	r9, r3
   26184:	d928      	bls.n	261d8 <__udivmoddi4+0xa4>
   26186:	18eb      	adds	r3, r5, r3
   26188:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   2618c:	d204      	bcs.n	26198 <__udivmoddi4+0x64>
   2618e:	4599      	cmp	r9, r3
   26190:	d902      	bls.n	26198 <__udivmoddi4+0x64>
   26192:	f1a8 0702 	sub.w	r7, r8, #2
   26196:	442b      	add	r3, r5
   26198:	eba3 0309 	sub.w	r3, r3, r9
   2619c:	b2a4      	uxth	r4, r4
   2619e:	fbb3 fcfe 	udiv	ip, r3, lr
   261a2:	fb0e 331c 	mls	r3, lr, ip, r3
   261a6:	fb0c f000 	mul.w	r0, ip, r0
   261aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   261ae:	42a0      	cmp	r0, r4
   261b0:	d914      	bls.n	261dc <__udivmoddi4+0xa8>
   261b2:	192c      	adds	r4, r5, r4
   261b4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   261b8:	d204      	bcs.n	261c4 <__udivmoddi4+0x90>
   261ba:	42a0      	cmp	r0, r4
   261bc:	d902      	bls.n	261c4 <__udivmoddi4+0x90>
   261be:	f1ac 0302 	sub.w	r3, ip, #2
   261c2:	442c      	add	r4, r5
   261c4:	1a24      	subs	r4, r4, r0
   261c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   261ca:	b11e      	cbz	r6, 261d4 <__udivmoddi4+0xa0>
   261cc:	40d4      	lsrs	r4, r2
   261ce:	2300      	movs	r3, #0
   261d0:	6034      	str	r4, [r6, #0]
   261d2:	6073      	str	r3, [r6, #4]
   261d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   261d8:	4647      	mov	r7, r8
   261da:	e7dd      	b.n	26198 <__udivmoddi4+0x64>
   261dc:	4663      	mov	r3, ip
   261de:	e7f1      	b.n	261c4 <__udivmoddi4+0x90>
   261e0:	bb92      	cbnz	r2, 26248 <__udivmoddi4+0x114>
   261e2:	1b43      	subs	r3, r0, r5
   261e4:	2101      	movs	r1, #1
   261e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   261ea:	b2af      	uxth	r7, r5
   261ec:	fbb3 fcfe 	udiv	ip, r3, lr
   261f0:	0c20      	lsrs	r0, r4, #16
   261f2:	fb0e 331c 	mls	r3, lr, ip, r3
   261f6:	fb0c f807 	mul.w	r8, ip, r7
   261fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   261fe:	4598      	cmp	r8, r3
   26200:	d962      	bls.n	262c8 <__udivmoddi4+0x194>
   26202:	18eb      	adds	r3, r5, r3
   26204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   26208:	d204      	bcs.n	26214 <__udivmoddi4+0xe0>
   2620a:	4598      	cmp	r8, r3
   2620c:	d902      	bls.n	26214 <__udivmoddi4+0xe0>
   2620e:	f1ac 0002 	sub.w	r0, ip, #2
   26212:	442b      	add	r3, r5
   26214:	eba3 0308 	sub.w	r3, r3, r8
   26218:	b2a4      	uxth	r4, r4
   2621a:	fbb3 fcfe 	udiv	ip, r3, lr
   2621e:	fb0e 331c 	mls	r3, lr, ip, r3
   26222:	fb0c f707 	mul.w	r7, ip, r7
   26226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   2622a:	42a7      	cmp	r7, r4
   2622c:	d94e      	bls.n	262cc <__udivmoddi4+0x198>
   2622e:	192c      	adds	r4, r5, r4
   26230:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   26234:	d204      	bcs.n	26240 <__udivmoddi4+0x10c>
   26236:	42a7      	cmp	r7, r4
   26238:	d902      	bls.n	26240 <__udivmoddi4+0x10c>
   2623a:	f1ac 0302 	sub.w	r3, ip, #2
   2623e:	442c      	add	r4, r5
   26240:	1be4      	subs	r4, r4, r7
   26242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   26246:	e7c0      	b.n	261ca <__udivmoddi4+0x96>
   26248:	f1c2 0320 	rsb	r3, r2, #32
   2624c:	fa20 f103 	lsr.w	r1, r0, r3
   26250:	4095      	lsls	r5, r2
   26252:	4090      	lsls	r0, r2
   26254:	fa2e f303 	lsr.w	r3, lr, r3
   26258:	4303      	orrs	r3, r0
   2625a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   2625e:	b2af      	uxth	r7, r5
   26260:	fbb1 fcfe 	udiv	ip, r1, lr
   26264:	fb0e 101c 	mls	r0, lr, ip, r1
   26268:	0c19      	lsrs	r1, r3, #16
   2626a:	fb0c f807 	mul.w	r8, ip, r7
   2626e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   26272:	4588      	cmp	r8, r1
   26274:	fa04 f402 	lsl.w	r4, r4, r2
   26278:	d922      	bls.n	262c0 <__udivmoddi4+0x18c>
   2627a:	1869      	adds	r1, r5, r1
   2627c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   26280:	d204      	bcs.n	2628c <__udivmoddi4+0x158>
   26282:	4588      	cmp	r8, r1
   26284:	d902      	bls.n	2628c <__udivmoddi4+0x158>
   26286:	f1ac 0002 	sub.w	r0, ip, #2
   2628a:	4429      	add	r1, r5
   2628c:	eba1 0108 	sub.w	r1, r1, r8
   26290:	b29b      	uxth	r3, r3
   26292:	fbb1 fcfe 	udiv	ip, r1, lr
   26296:	fb0e 111c 	mls	r1, lr, ip, r1
   2629a:	fb0c f707 	mul.w	r7, ip, r7
   2629e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   262a2:	429f      	cmp	r7, r3
   262a4:	d90e      	bls.n	262c4 <__udivmoddi4+0x190>
   262a6:	18eb      	adds	r3, r5, r3
   262a8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   262ac:	d204      	bcs.n	262b8 <__udivmoddi4+0x184>
   262ae:	429f      	cmp	r7, r3
   262b0:	d902      	bls.n	262b8 <__udivmoddi4+0x184>
   262b2:	f1ac 0102 	sub.w	r1, ip, #2
   262b6:	442b      	add	r3, r5
   262b8:	1bdb      	subs	r3, r3, r7
   262ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   262be:	e792      	b.n	261e6 <__udivmoddi4+0xb2>
   262c0:	4660      	mov	r0, ip
   262c2:	e7e3      	b.n	2628c <__udivmoddi4+0x158>
   262c4:	4661      	mov	r1, ip
   262c6:	e7f7      	b.n	262b8 <__udivmoddi4+0x184>
   262c8:	4660      	mov	r0, ip
   262ca:	e7a3      	b.n	26214 <__udivmoddi4+0xe0>
   262cc:	4663      	mov	r3, ip
   262ce:	e7b7      	b.n	26240 <__udivmoddi4+0x10c>
   262d0:	4283      	cmp	r3, r0
   262d2:	d906      	bls.n	262e2 <__udivmoddi4+0x1ae>
   262d4:	b916      	cbnz	r6, 262dc <__udivmoddi4+0x1a8>
   262d6:	2100      	movs	r1, #0
   262d8:	4608      	mov	r0, r1
   262da:	e77b      	b.n	261d4 <__udivmoddi4+0xa0>
   262dc:	e9c6 e000 	strd	lr, r0, [r6]
   262e0:	e7f9      	b.n	262d6 <__udivmoddi4+0x1a2>
   262e2:	fab3 f783 	clz	r7, r3
   262e6:	b98f      	cbnz	r7, 2630c <__udivmoddi4+0x1d8>
   262e8:	4283      	cmp	r3, r0
   262ea:	d301      	bcc.n	262f0 <__udivmoddi4+0x1bc>
   262ec:	4572      	cmp	r2, lr
   262ee:	d808      	bhi.n	26302 <__udivmoddi4+0x1ce>
   262f0:	ebbe 0402 	subs.w	r4, lr, r2
   262f4:	eb60 0303 	sbc.w	r3, r0, r3
   262f8:	2001      	movs	r0, #1
   262fa:	469c      	mov	ip, r3
   262fc:	b91e      	cbnz	r6, 26306 <__udivmoddi4+0x1d2>
   262fe:	2100      	movs	r1, #0
   26300:	e768      	b.n	261d4 <__udivmoddi4+0xa0>
   26302:	4638      	mov	r0, r7
   26304:	e7fa      	b.n	262fc <__udivmoddi4+0x1c8>
   26306:	e9c6 4c00 	strd	r4, ip, [r6]
   2630a:	e7f8      	b.n	262fe <__udivmoddi4+0x1ca>
   2630c:	f1c7 0c20 	rsb	ip, r7, #32
   26310:	40bb      	lsls	r3, r7
   26312:	fa22 f40c 	lsr.w	r4, r2, ip
   26316:	431c      	orrs	r4, r3
   26318:	fa2e f10c 	lsr.w	r1, lr, ip
   2631c:	fa20 f30c 	lsr.w	r3, r0, ip
   26320:	40b8      	lsls	r0, r7
   26322:	4301      	orrs	r1, r0
   26324:	ea4f 4914 	mov.w	r9, r4, lsr #16
   26328:	fa0e f507 	lsl.w	r5, lr, r7
   2632c:	fbb3 f8f9 	udiv	r8, r3, r9
   26330:	fa1f fe84 	uxth.w	lr, r4
   26334:	fb09 3018 	mls	r0, r9, r8, r3
   26338:	0c0b      	lsrs	r3, r1, #16
   2633a:	fb08 fa0e 	mul.w	sl, r8, lr
   2633e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   26342:	459a      	cmp	sl, r3
   26344:	fa02 f207 	lsl.w	r2, r2, r7
   26348:	d940      	bls.n	263cc <__udivmoddi4+0x298>
   2634a:	18e3      	adds	r3, r4, r3
   2634c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   26350:	d204      	bcs.n	2635c <__udivmoddi4+0x228>
   26352:	459a      	cmp	sl, r3
   26354:	d902      	bls.n	2635c <__udivmoddi4+0x228>
   26356:	f1a8 0002 	sub.w	r0, r8, #2
   2635a:	4423      	add	r3, r4
   2635c:	eba3 030a 	sub.w	r3, r3, sl
   26360:	b289      	uxth	r1, r1
   26362:	fbb3 f8f9 	udiv	r8, r3, r9
   26366:	fb09 3318 	mls	r3, r9, r8, r3
   2636a:	fb08 fe0e 	mul.w	lr, r8, lr
   2636e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   26372:	458e      	cmp	lr, r1
   26374:	d92c      	bls.n	263d0 <__udivmoddi4+0x29c>
   26376:	1861      	adds	r1, r4, r1
   26378:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2637c:	d204      	bcs.n	26388 <__udivmoddi4+0x254>
   2637e:	458e      	cmp	lr, r1
   26380:	d902      	bls.n	26388 <__udivmoddi4+0x254>
   26382:	f1a8 0302 	sub.w	r3, r8, #2
   26386:	4421      	add	r1, r4
   26388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   2638c:	fba0 9802 	umull	r9, r8, r0, r2
   26390:	eba1 010e 	sub.w	r1, r1, lr
   26394:	4541      	cmp	r1, r8
   26396:	46ce      	mov	lr, r9
   26398:	4643      	mov	r3, r8
   2639a:	d302      	bcc.n	263a2 <__udivmoddi4+0x26e>
   2639c:	d106      	bne.n	263ac <__udivmoddi4+0x278>
   2639e:	454d      	cmp	r5, r9
   263a0:	d204      	bcs.n	263ac <__udivmoddi4+0x278>
   263a2:	ebb9 0e02 	subs.w	lr, r9, r2
   263a6:	eb68 0304 	sbc.w	r3, r8, r4
   263aa:	3801      	subs	r0, #1
   263ac:	2e00      	cmp	r6, #0
   263ae:	d0a6      	beq.n	262fe <__udivmoddi4+0x1ca>
   263b0:	ebb5 020e 	subs.w	r2, r5, lr
   263b4:	eb61 0103 	sbc.w	r1, r1, r3
   263b8:	fa01 fc0c 	lsl.w	ip, r1, ip
   263bc:	fa22 f307 	lsr.w	r3, r2, r7
   263c0:	ea4c 0303 	orr.w	r3, ip, r3
   263c4:	40f9      	lsrs	r1, r7
   263c6:	e9c6 3100 	strd	r3, r1, [r6]
   263ca:	e798      	b.n	262fe <__udivmoddi4+0x1ca>
   263cc:	4640      	mov	r0, r8
   263ce:	e7c5      	b.n	2635c <__udivmoddi4+0x228>
   263d0:	4643      	mov	r3, r8
   263d2:	e7d9      	b.n	26388 <__udivmoddi4+0x254>
   263d4:	0000      	movs	r0, r0
	...

000263d8 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   263d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   263da:	4d41      	ldr	r5, [pc, #260]	; (264e0 <bt_init+0x108>)
   263dc:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   263e0:	6899      	ldr	r1, [r3, #8]
   263e2:	f011 0101 	ands.w	r1, r1, #1
   263e6:	d124      	bne.n	26432 <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   263e8:	aa01      	add	r2, sp, #4
   263ea:	f640 4003 	movw	r0, #3075	; 0xc03
   263ee:	f007 fc8b 	bl	2dd08 <bt_hci_cmd_send_sync>
		if (err) {
   263f2:	4604      	mov	r4, r0
   263f4:	2800      	cmp	r0, #0
   263f6:	d16f      	bne.n	264d8 <bt_init+0x100>
		hci_reset_complete(rsp);
   263f8:	9c01      	ldr	r4, [sp, #4]
	uint8_t status = buf->data[0];
   263fa:	68a3      	ldr	r3, [r4, #8]
	if (status) {
   263fc:	781b      	ldrb	r3, [r3, #0]
   263fe:	b9ab      	cbnz	r3, 2642c <bt_init+0x54>
		bt_scan_reset();
   26400:	f008 ff14 	bl	2f22c <bt_scan_reset>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26404:	f3bf 8f5b 	dmb	ish
   26408:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   2640c:	f3bf 8f5b 	dmb	ish
   26410:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26414:	f003 0305 	and.w	r3, r3, #5
   26418:	f3bf 8f5b 	dmb	ish
   2641c:	e852 1f00 	ldrex	r1, [r2]
   26420:	e842 3000 	strex	r0, r3, [r2]
   26424:	2800      	cmp	r0, #0
   26426:	d1f9      	bne.n	2641c <bt_init+0x44>
   26428:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   2642c:	4620      	mov	r0, r4
   2642e:	f01d fa8d 	bl	4394c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   26432:	aa01      	add	r2, sp, #4
   26434:	2100      	movs	r1, #0
   26436:	f241 0003 	movw	r0, #4099	; 0x1003
   2643a:	f007 fc65 	bl	2dd08 <bt_hci_cmd_send_sync>
	if (err) {
   2643e:	4604      	mov	r4, r0
   26440:	2800      	cmp	r0, #0
   26442:	d149      	bne.n	264d8 <bt_init+0x100>
	read_local_features_complete(rsp);
   26444:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   26446:	4827      	ldr	r0, [pc, #156]	; (264e4 <bt_init+0x10c>)
   26448:	68b1      	ldr	r1, [r6, #8]
   2644a:	2208      	movs	r2, #8
   2644c:	3101      	adds	r1, #1
   2644e:	f025 fc03 	bl	4bc58 <memcpy>
	net_buf_unref(rsp);
   26452:	4630      	mov	r0, r6
   26454:	f01d fa7a 	bl	4394c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   26458:	4621      	mov	r1, r4
   2645a:	aa01      	add	r2, sp, #4
   2645c:	f241 0001 	movw	r0, #4097	; 0x1001
   26460:	f007 fc52 	bl	2dd08 <bt_hci_cmd_send_sync>
	if (err) {
   26464:	4604      	mov	r4, r0
   26466:	2800      	cmp	r0, #0
   26468:	d136      	bne.n	264d8 <bt_init+0x100>
	read_local_ver_complete(rsp);
   2646a:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   2646c:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   2646e:	785a      	ldrb	r2, [r3, #1]
   26470:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   26474:	78d9      	ldrb	r1, [r3, #3]
   26476:	789a      	ldrb	r2, [r3, #2]
   26478:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2647c:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   26480:	791a      	ldrb	r2, [r3, #4]
   26482:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   26486:	7a19      	ldrb	r1, [r3, #8]
   26488:	79da      	ldrb	r2, [r3, #7]
   2648a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2648e:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   26492:	795a      	ldrb	r2, [r3, #5]
   26494:	799b      	ldrb	r3, [r3, #6]
   26496:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   2649a:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   2649e:	f01d fa55 	bl	4394c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   264a2:	4621      	mov	r1, r4
   264a4:	aa01      	add	r2, sp, #4
   264a6:	f241 0002 	movw	r0, #4098	; 0x1002
   264aa:	f007 fc2d 	bl	2dd08 <bt_hci_cmd_send_sync>
	if (err) {
   264ae:	4604      	mov	r4, r0
   264b0:	b990      	cbnz	r0, 264d8 <bt_init+0x100>
	read_supported_commands_complete(rsp);
   264b2:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   264b4:	480c      	ldr	r0, [pc, #48]	; (264e8 <bt_init+0x110>)
   264b6:	68b1      	ldr	r1, [r6, #8]
   264b8:	2240      	movs	r2, #64	; 0x40
   264ba:	3101      	adds	r1, #1
   264bc:	f025 fbcc 	bl	4bc58 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
   264c0:	4809      	ldr	r0, [pc, #36]	; (264e8 <bt_init+0x110>)
   264c2:	f025 fc7d 	bl	4bdc0 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
   264c6:	4630      	mov	r0, r6
   264c8:	f01d fa40 	bl	4394c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   264cc:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   264d0:	065a      	lsls	r2, r3, #25
   264d2:	d40b      	bmi.n	264ec <bt_init+0x114>
		return -ENODEV;
   264d4:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   264d8:	4620      	mov	r0, r4
   264da:	b002      	add	sp, #8
   264dc:	bd70      	pop	{r4, r5, r6, pc}
   264de:	bf00      	nop
   264e0:	20000030 	.word	0x20000030
   264e4:	200000a0 	.word	0x200000a0
   264e8:	200000a8 	.word	0x200000a8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   264ec:	4621      	mov	r1, r4
   264ee:	aa01      	add	r2, sp, #4
   264f0:	f242 0003 	movw	r0, #8195	; 0x2003
   264f4:	f007 fc08 	bl	2dd08 <bt_hci_cmd_send_sync>
	if (err) {
   264f8:	4604      	mov	r4, r0
   264fa:	2800      	cmp	r0, #0
   264fc:	d1ec      	bne.n	264d8 <bt_init+0x100>
	read_le_features_complete(rsp);
   264fe:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   26500:	48b7      	ldr	r0, [pc, #732]	; (267e0 <bt_init+0x408>)
   26502:	68b1      	ldr	r1, [r6, #8]
   26504:	2208      	movs	r2, #8
   26506:	3101      	adds	r1, #1
   26508:	f025 fba6 	bl	4bc58 <memcpy>
	net_buf_unref(rsp);
   2650c:	4630      	mov	r0, r6
   2650e:	f01d fa1d 	bl	4394c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   26512:	4621      	mov	r1, r4
   26514:	aa01      	add	r2, sp, #4
   26516:	f242 0002 	movw	r0, #8194	; 0x2002
   2651a:	f007 fbf5 	bl	2dd08 <bt_hci_cmd_send_sync>
		if (err) {
   2651e:	4604      	mov	r4, r0
   26520:	2800      	cmp	r0, #0
   26522:	d1d9      	bne.n	264d8 <bt_init+0x100>
		le_read_buffer_size_complete(rsp);
   26524:	9c01      	ldr	r4, [sp, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   26526:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   26528:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   2652c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   26530:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   26532:	b121      	cbz	r1, 2653e <bt_init+0x166>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   26534:	78da      	ldrb	r2, [r3, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   26536:	48ab      	ldr	r0, [pc, #684]	; (267e4 <bt_init+0x40c>)
   26538:	4611      	mov	r1, r2
   2653a:	f02a faba 	bl	50ab2 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   2653e:	4620      	mov	r0, r4
   26540:	f01d fa04 	bl	4394c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   26544:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   26548:	f016 0620 	ands.w	r6, r6, #32
   2654c:	d118      	bne.n	26580 <bt_init+0x1a8>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   2654e:	2102      	movs	r1, #2
   26550:	f640 406d 	movw	r0, #3181	; 0xc6d
   26554:	f007 fb7c 	bl	2dc50 <bt_hci_cmd_create>
		if (!buf) {
   26558:	4604      	mov	r4, r0
   2655a:	2800      	cmp	r0, #0
   2655c:	f000 80ce 	beq.w	266fc <bt_init+0x324>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   26560:	2102      	movs	r1, #2
   26562:	3008      	adds	r0, #8
   26564:	f029 fb59 	bl	4fc1a <net_buf_simple_add>
		cp_le->le = 0x01;
   26568:	2301      	movs	r3, #1
   2656a:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   2656c:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   2656e:	4621      	mov	r1, r4
   26570:	4632      	mov	r2, r6
   26572:	f640 406d 	movw	r0, #3181	; 0xc6d
   26576:	f007 fbc7 	bl	2dd08 <bt_hci_cmd_send_sync>
		if (err) {
   2657a:	4604      	mov	r4, r0
   2657c:	2800      	cmp	r0, #0
   2657e:	d1ab      	bne.n	264d8 <bt_init+0x100>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   26580:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   26584:	071b      	lsls	r3, r3, #28
   26586:	d512      	bpl.n	265ae <bt_init+0x1d6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   26588:	aa01      	add	r2, sp, #4
   2658a:	2100      	movs	r1, #0
   2658c:	f242 001c 	movw	r0, #8220	; 0x201c
   26590:	f007 fbba 	bl	2dd08 <bt_hci_cmd_send_sync>
		if (err) {
   26594:	4604      	mov	r4, r0
   26596:	2800      	cmp	r0, #0
   26598:	d19e      	bne.n	264d8 <bt_init+0x100>
		le_read_supp_states_complete(rsp);
   2659a:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   2659c:	6883      	ldr	r3, [r0, #8]
   2659e:	f8d3 2001 	ldr.w	r2, [r3, #1]
   265a2:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   265a6:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   265aa:	f01d f9cf 	bl	4394c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   265ae:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   265b2:	069e      	lsls	r6, r3, #26
   265b4:	d524      	bpl.n	26600 <bt_init+0x228>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   265b6:	f10d 0102 	add.w	r1, sp, #2
   265ba:	4668      	mov	r0, sp
   265bc:	f025 fe8d 	bl	4c2da <hci_le_read_max_data_len>
		if (err) {
   265c0:	4604      	mov	r4, r0
   265c2:	2800      	cmp	r0, #0
   265c4:	d188      	bne.n	264d8 <bt_init+0x100>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   265c6:	2104      	movs	r1, #4
   265c8:	f242 0024 	movw	r0, #8228	; 0x2024
   265cc:	f007 fb40 	bl	2dc50 <bt_hci_cmd_create>
		if (!buf) {
   265d0:	4606      	mov	r6, r0
   265d2:	2800      	cmp	r0, #0
   265d4:	f000 8092 	beq.w	266fc <bt_init+0x324>
   265d8:	2104      	movs	r1, #4
   265da:	3008      	adds	r0, #8
   265dc:	f029 fb1d 	bl	4fc1a <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   265e0:	f8bd 3000 	ldrh.w	r3, [sp]
   265e4:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   265e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   265ea:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   265ec:	4622      	mov	r2, r4
   265ee:	4631      	mov	r1, r6
   265f0:	f242 0024 	movw	r0, #8228	; 0x2024
   265f4:	f007 fb88 	bl	2dd08 <bt_hci_cmd_send_sync>
		if (err) {
   265f8:	4604      	mov	r4, r0
   265fa:	2800      	cmp	r0, #0
   265fc:	f47f af6c 	bne.w	264d8 <bt_init+0x100>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   26600:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   26604:	065c      	lsls	r4, r3, #25
   26606:	d510      	bpl.n	2662a <bt_init+0x252>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   26608:	aa01      	add	r2, sp, #4
   2660a:	2100      	movs	r1, #0
   2660c:	f242 002a 	movw	r0, #8234	; 0x202a
   26610:	f007 fb7a 	bl	2dd08 <bt_hci_cmd_send_sync>
		if (err) {
   26614:	4604      	mov	r4, r0
   26616:	2800      	cmp	r0, #0
   26618:	f47f af5e 	bne.w	264d8 <bt_init+0x100>
		le_read_resolving_list_size_complete(rsp);
   2661c:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   2661e:	6883      	ldr	r3, [r0, #8]
   26620:	785b      	ldrb	r3, [r3, #1]
   26622:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   26626:	f01d f991 	bl	4394c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   2662a:	2108      	movs	r1, #8
   2662c:	f242 0001 	movw	r0, #8193	; 0x2001
   26630:	f007 fb0e 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   26634:	4604      	mov	r4, r0
   26636:	2800      	cmp	r0, #0
   26638:	d060      	beq.n	266fc <bt_init+0x324>
   2663a:	2108      	movs	r1, #8
   2663c:	4408      	add	r0, r1
   2663e:	f029 faec 	bl	4fc1a <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   26642:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   26646:	f011 0f40 	tst.w	r1, #64	; 0x40
   2664a:	4602      	mov	r2, r0
   2664c:	f240 2302 	movw	r3, #514	; 0x202
   26650:	bf08      	it	eq
   26652:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   26654:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   26656:	bf4c      	ite	mi
   26658:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   2665c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   26660:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   26662:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   26666:	bf48      	it	mi
   26668:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   2666c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   26670:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   26674:	bf18      	it	ne
   26676:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   2667a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   2667e:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   26680:	bf48      	it	mi
   26682:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   26686:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   26688:	bf08      	it	eq
   2668a:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   2668e:	2100      	movs	r1, #0
   26690:	f025 fcdc 	bl	4c04c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   26694:	4621      	mov	r1, r4
   26696:	2200      	movs	r2, #0
   26698:	f242 0001 	movw	r0, #8193	; 0x2001
   2669c:	f007 fb34 	bl	2dd08 <bt_hci_cmd_send_sync>
	if (err) {
   266a0:	4604      	mov	r4, r0
   266a2:	2800      	cmp	r0, #0
   266a4:	f47f af18 	bne.w	264d8 <bt_init+0x100>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   266a8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   266ac:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   266b0:	0698      	lsls	r0, r3, #26
   266b2:	d426      	bmi.n	26702 <bt_init+0x32a>
	if (bt_dev.le.acl_mtu) {
   266b4:	b9d9      	cbnz	r1, 266ee <bt_init+0x316>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   266b6:	aa01      	add	r2, sp, #4
   266b8:	f241 0005 	movw	r0, #4101	; 0x1005
   266bc:	f007 fb24 	bl	2dd08 <bt_hci_cmd_send_sync>
	if (err) {
   266c0:	4604      	mov	r4, r0
   266c2:	2800      	cmp	r0, #0
   266c4:	f47f af08 	bne.w	264d8 <bt_init+0x100>
	if (bt_dev.le.acl_mtu) {
   266c8:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
   266cc:	9c01      	ldr	r4, [sp, #4]
	if (bt_dev.le.acl_mtu) {
   266ce:	b95b      	cbnz	r3, 266e8 <bt_init+0x310>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   266d0:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   266d2:	785a      	ldrb	r2, [r3, #1]
   266d4:	7899      	ldrb	r1, [r3, #2]
   266d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   266da:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   266de:	889a      	ldrh	r2, [r3, #4]
   266e0:	4840      	ldr	r0, [pc, #256]	; (267e4 <bt_init+0x40c>)
   266e2:	4611      	mov	r1, r2
   266e4:	f02a f9e5 	bl	50ab2 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   266e8:	4620      	mov	r0, r4
   266ea:	f01d f92f 	bl	4394c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   266ee:	2108      	movs	r1, #8
   266f0:	f640 4001 	movw	r0, #3073	; 0xc01
   266f4:	f007 faac 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   266f8:	4604      	mov	r4, r0
   266fa:	b938      	cbnz	r0, 2670c <bt_init+0x334>
		return -ENOBUFS;
   266fc:	f06f 0468 	mvn.w	r4, #104	; 0x68
   26700:	e6ea      	b.n	264d8 <bt_init+0x100>
	else if (!bt_dev.le.acl_mtu) {
   26702:	2900      	cmp	r1, #0
   26704:	d1f3      	bne.n	266ee <bt_init+0x316>
		return -EIO;
   26706:	f06f 0404 	mvn.w	r4, #4
   2670a:	e6e5      	b.n	264d8 <bt_init+0x100>
   2670c:	2108      	movs	r1, #8
   2670e:	4408      	add	r0, r1
   26710:	f029 fa83 	bl	4fc1a <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   26714:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   26718:	07d9      	lsls	r1, r3, #31
   2671a:	4602      	mov	r2, r0
   2671c:	d457      	bmi.n	267ce <bt_init+0x3f6>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   2671e:	4832      	ldr	r0, [pc, #200]	; (267e8 <bt_init+0x410>)
   26720:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
	sys_put_le64(mask, ev->events);
   26724:	f025 fc92 	bl	4c04c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   26728:	4621      	mov	r1, r4
   2672a:	2200      	movs	r2, #0
   2672c:	f640 4001 	movw	r0, #3073	; 0xc01
   26730:	f007 faea 	bl	2dd08 <bt_hci_cmd_send_sync>
	if (err) {
   26734:	4604      	mov	r4, r0
   26736:	2800      	cmp	r0, #0
   26738:	f47f aece 	bne.w	264d8 <bt_init+0x100>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   2673c:	4601      	mov	r1, r0
   2673e:	aa01      	add	r2, sp, #4
   26740:	f64f 4001 	movw	r0, #64513	; 0xfc01
   26744:	f007 fae0 	bl	2dd08 <bt_hci_cmd_send_sync>
	if (err) {
   26748:	4604      	mov	r4, r0
   2674a:	bb48      	cbnz	r0, 267a0 <bt_init+0x3c8>
	net_buf_unref(rsp);
   2674c:	9801      	ldr	r0, [sp, #4]
   2674e:	f01d f8fd 	bl	4394c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   26752:	4621      	mov	r1, r4
   26754:	aa01      	add	r2, sp, #4
   26756:	f64f 4002 	movw	r0, #64514	; 0xfc02
   2675a:	f007 fad5 	bl	2dd08 <bt_hci_cmd_send_sync>
	if (err) {
   2675e:	4604      	mov	r4, r0
   26760:	b9f0      	cbnz	r0, 267a0 <bt_init+0x3c8>
	rp.cmds = (void *)rsp->data;
   26762:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   26764:	4821      	ldr	r0, [pc, #132]	; (267ec <bt_init+0x414>)
   26766:	68b1      	ldr	r1, [r6, #8]
   26768:	2202      	movs	r2, #2
   2676a:	3101      	adds	r1, #1
   2676c:	f025 fa74 	bl	4bc58 <memcpy>
	net_buf_unref(rsp);
   26770:	4630      	mov	r0, r6
   26772:	f01d f8eb 	bl	4394c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   26776:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   2677a:	075b      	lsls	r3, r3, #29
   2677c:	d510      	bpl.n	267a0 <bt_init+0x3c8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   2677e:	aa01      	add	r2, sp, #4
   26780:	4621      	mov	r1, r4
   26782:	f64f 4003 	movw	r0, #64515	; 0xfc03
   26786:	f007 fabf 	bl	2dd08 <bt_hci_cmd_send_sync>
		if (err) {
   2678a:	b948      	cbnz	r0, 267a0 <bt_init+0x3c8>
		rp.feat = (void *)rsp->data;
   2678c:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   2678e:	4818      	ldr	r0, [pc, #96]	; (267f0 <bt_init+0x418>)
   26790:	68a1      	ldr	r1, [r4, #8]
   26792:	2201      	movs	r2, #1
   26794:	4411      	add	r1, r2
   26796:	f025 fa5f 	bl	4bc58 <memcpy>
		net_buf_unref(rsp);
   2679a:	4620      	mov	r0, r4
   2679c:	f01d f8d6 	bl	4394c <net_buf_unref>
	err = bt_id_init();
   267a0:	f026 f85b 	bl	4c85a <bt_id_init>
	if (err) {
   267a4:	4604      	mov	r4, r0
   267a6:	2800      	cmp	r0, #0
   267a8:	f47f ae96 	bne.w	264d8 <bt_init+0x100>
		err = bt_conn_init();
   267ac:	f009 fe6a 	bl	30484 <bt_conn_init>
		if (err) {
   267b0:	4604      	mov	r4, r0
   267b2:	2800      	cmp	r0, #0
   267b4:	f47f ae90 	bne.w	264d8 <bt_init+0x100>
		if (!bt_dev.id_count) {
   267b8:	79eb      	ldrb	r3, [r5, #7]
   267ba:	2b00      	cmp	r3, #0
   267bc:	f43f ae8c 	beq.w	264d8 <bt_init+0x100>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   267c0:	2104      	movs	r1, #4
   267c2:	480c      	ldr	r0, [pc, #48]	; (267f4 <bt_init+0x41c>)
   267c4:	f025 fbd2 	bl	4bf6c <atomic_or>
	bt_finalize_init();
   267c8:	f007 fe38 	bl	2e43c <bt_finalize_init>
	return 0;
   267cc:	e684      	b.n	264d8 <bt_init+0x100>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   267ce:	a102      	add	r1, pc, #8	; (adr r1, 267d8 <bt_init+0x400>)
   267d0:	e9d1 0100 	ldrd	r0, r1, [r1]
   267d4:	e7a6      	b.n	26724 <bt_init+0x34c>
   267d6:	bf00      	nop
   267d8:	02008890 	.word	0x02008890
   267dc:	20008000 	.word	0x20008000
   267e0:	20000100 	.word	0x20000100
   267e4:	20000130 	.word	0x20000130
   267e8:	02008810 	.word	0x02008810
   267ec:	200000e9 	.word	0x200000e9
   267f0:	200000e8 	.word	0x200000e8
   267f4:	200000fc 	.word	0x200000fc

000267f8 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
   267f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
   267fc:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
   26800:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
   26804:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
   26806:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
   26808:	45a0      	cmp	r8, r4
{
   2680a:	460f      	mov	r7, r1
   2680c:	4616      	mov	r6, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
   2680e:	d819      	bhi.n	26844 <ull_drift_ticks_get+0x4c>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   26810:	4d1d      	ldr	r5, [pc, #116]	; (26888 <ull_drift_ticks_get+0x90>)
   26812:	fba3 0105 	umull	r0, r1, r3, r5
   26816:	a31a      	add	r3, pc, #104	; (adr r3, 26880 <ull_drift_ticks_get+0x88>)
   26818:	e9d3 2300 	ldrd	r2, r3, [r3]
   2681c:	f7ff fc70 	bl	26100 <__aeabi_uldivmod>
   26820:	4603      	mov	r3, r0
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   26822:	eba4 0008 	sub.w	r0, r4, r8
   26826:	fba0 0105 	umull	r0, r1, r0, r5
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   2682a:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   2682e:	a314      	add	r3, pc, #80	; (adr r3, 26880 <ull_drift_ticks_get+0x88>)
   26830:	e9d3 2300 	ldrd	r2, r3, [r3]
   26834:	f7ff fc64 	bl	26100 <__aeabi_uldivmod>
   26838:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   2683c:	603c      	str	r4, [r7, #0]
		*ticks_drift_minus =
   2683e:	6030      	str	r0, [r6, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
   26840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   26844:	f8df 9040 	ldr.w	r9, [pc, #64]	; 26888 <ull_drift_ticks_get+0x90>
   26848:	a30d      	add	r3, pc, #52	; (adr r3, 26880 <ull_drift_ticks_get+0x88>)
   2684a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2684e:	fba8 0109 	umull	r0, r1, r8, r9
   26852:	f7ff fc55 	bl	26100 <__aeabi_uldivmod>
   26856:	4604      	mov	r4, r0
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   26858:	f105 0030 	add.w	r0, r5, #48	; 0x30
   2685c:	a308      	add	r3, pc, #32	; (adr r3, 26880 <ull_drift_ticks_get+0x88>)
   2685e:	e9d3 2300 	ldrd	r2, r3, [r3]
   26862:	fba0 0109 	umull	r0, r1, r0, r9
   26866:	f7ff fc4b 	bl	26100 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   2686a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   2686e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   26872:	603c      	str	r4, [r7, #0]
		*ticks_drift_minus =
   26874:	6030      	str	r0, [r6, #0]
}
   26876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2687a:	bf00      	nop
   2687c:	f3af 8000 	nop.w
   26880:	1afd498d 	.word	0x1afd498d
   26884:	00000007 	.word	0x00000007
   26888:	3b9aca00 	.word	0x3b9aca00
   2688c:	00000000 	.word	0x00000000

00026890 <ll_adv_enable>:
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint8_t hci_err;
	uint32_t ret;

	if (!enable) {
   26890:	2800      	cmp	r0, #0
   26892:	d04e      	beq.n	26932 <ll_adv_enable+0xa2>
{
   26894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
   26898:	4c5f      	ldr	r4, [pc, #380]	; (26a18 <ll_adv_enable+0x188>)
   2689a:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
   2689e:	f012 0501 	ands.w	r5, r2, #1
{
   268a2:	b091      	sub	sp, #68	; 0x44
	if (!adv || adv->is_enabled) {
   268a4:	f040 81fe 	bne.w	26ca4 <ll_adv_enable+0x414>
	ull_filter_adv_update(lll->filter_policy);
   268a8:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	lll->rl_idx = FILTER_IDX_NONE;
   268ac:	23ff      	movs	r3, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
   268ae:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
   268b2:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
   268b6:	f018 fe95 	bl	3f5e4 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   268ba:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   268be:	0746      	lsls	r6, r0, #29
   268c0:	d428      	bmi.n	26914 <ll_adv_enable+0x84>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   268c2:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   268c6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   268ca:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   268ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   268d2:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   268d4:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
   268d8:	b186      	cbz	r6, 268fc <ll_adv_enable+0x6c>
		const uint8_t *adv_addr;

		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
   268da:	484f      	ldr	r0, [pc, #316]	; (26a18 <ll_adv_enable+0x188>)
   268dc:	4631      	mov	r1, r6
   268de:	f012 fa6b 	bl	38db8 <ull_adv_pdu_update_addrs>

		/* In case the local IRK was not set or no match was
		 * found the fallback address was used instead, check
		 * that a valid address has been set.
		 */
		if (pdu_adv_to_update->tx_addr &&
   268e2:	7833      	ldrb	r3, [r6, #0]
   268e4:	065d      	lsls	r5, r3, #25
   268e6:	d505      	bpl.n	268f4 <ll_adv_enable+0x64>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
   268e8:	2106      	movs	r1, #6
   268ea:	f00d fae7 	bl	33ebc <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
   268ee:	2800      	cmp	r0, #0
   268f0:	f000 81da 	beq.w	26ca8 <ll_adv_enable+0x418>
		if ((pdu->type != PDU_ADV_TYPE_EXT_IND) ||
		    (pdu->adv_ext_ind.adv_mode & BT_HCI_LE_ADV_PROP_SCAN)) {
#else
		if (1) {
#endif
			ull_adv_pdu_update_addrs(adv, pdu_scan);
   268f4:	4848      	ldr	r0, [pc, #288]	; (26a18 <ll_adv_enable+0x188>)
   268f6:	4641      	mov	r1, r8
   268f8:	f012 fa5e 	bl	38db8 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   268fc:	7833      	ldrb	r3, [r6, #0]
   268fe:	f013 0f0e 	tst.w	r3, #14
   26902:	d118      	bne.n	26936 <ll_adv_enable+0xa6>
		if (lll->conn) {
   26904:	6a23      	ldr	r3, [r4, #32]
   26906:	2b00      	cmp	r3, #0
   26908:	f000 8090 	beq.w	26a2c <ll_adv_enable+0x19c>
	return BT_HCI_ERR_CMD_DISALLOWED;
   2690c:	200c      	movs	r0, #12
}
   2690e:	b011      	add	sp, #68	; 0x44
   26910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
   26914:	462a      	mov	r2, r5
   26916:	f104 016b 	add.w	r1, r4, #107	; 0x6b
   2691a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   2691e:	f018 fff7 	bl	3f910 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
   26922:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
   26924:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
   26928:	d0cb      	beq.n	268c2 <ll_adv_enable+0x32>
			ull_filter_rpa_update(false);
   2692a:	4628      	mov	r0, r5
   2692c:	f018 fea0 	bl	3f670 <ull_filter_rpa_update>
   26930:	e7c7      	b.n	268c2 <ll_adv_enable+0x32>
		return disable(handle);
   26932:	f011 bf5d 	b.w	387f0 <disable.constprop.0>
	uint8_t ch_map = lll->chan_map;
   26936:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   2693a:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
   2693c:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26940:	a80c      	add	r0, sp, #48	; 0x30
	uint8_t ch_map = lll->chan_map;
   26942:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26946:	f00d fc4f 	bl	341e8 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
   2694a:	4602      	mov	r2, r0
   2694c:	2800      	cmp	r0, #0
   2694e:	d059      	beq.n	26a04 <ll_adv_enable+0x174>
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
   26950:	f898 1001 	ldrb.w	r1, [r8, #1]
   26954:	4630      	mov	r0, r6
   26956:	f011 ffff 	bl	38958 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   2695a:	4930      	ldr	r1, [pc, #192]	; (26a1c <ll_adv_enable+0x18c>)
	uint16_t interval = adv->interval;
   2695c:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
   26960:	2500      	movs	r5, #0
	adv->ull.ticks_prepare_to_start =
   26962:	2331      	movs	r3, #49	; 0x31
   26964:	60a3      	str	r3, [r4, #8]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   26966:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   2696a:	a329      	add	r3, pc, #164	; (adr r3, 26a10 <ll_adv_enable+0x180>)
   2696c:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
   26970:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
   26972:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_preempt_to_start =
   26974:	60e5      	str	r5, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   26976:	fba0 0101 	umull	r0, r1, r0, r1
   2697a:	f7ff fbc1 	bl	26100 <__aeabi_uldivmod>
   2697e:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
   26980:	f00e fe9e 	bl	356c0 <ticker_ticks_now_get>
   26984:	4680      	mov	r8, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   26986:	b93f      	cbnz	r7, 26998 <ll_adv_enable+0x108>
   26988:	7835      	ldrb	r5, [r6, #0]
   2698a:	f005 050f 	and.w	r5, r5, #15
   2698e:	f1a5 0501 	sub.w	r5, r5, #1
   26992:	fab5 f585 	clz	r5, r5
   26996:	096d      	lsrs	r5, r5, #5
   26998:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
   2699c:	6923      	ldr	r3, [r4, #16]
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   2699e:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
   269a2:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   269a6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
   269aa:	f000 8146 	beq.w	26c3a <ll_adv_enable+0x3aa>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   269ae:	2000      	movs	r0, #0
   269b0:	4a1b      	ldr	r2, [pc, #108]	; (26a20 <ll_adv_enable+0x190>)
   269b2:	4f1c      	ldr	r7, [pc, #112]	; (26a24 <ll_adv_enable+0x194>)
   269b4:	9304      	str	r3, [sp, #16]
		ret_cb = TICKER_STATUS_BUSY;
   269b6:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   269b8:	ae0e      	add	r6, sp, #56	; 0x38
   269ba:	9301      	str	r3, [sp, #4]
   269bc:	9205      	str	r2, [sp, #20]
   269be:	2103      	movs	r1, #3
   269c0:	e9cd 0002 	strd	r0, r0, [sp, #8]
   269c4:	9608      	str	r6, [sp, #32]
   269c6:	9406      	str	r4, [sp, #24]
   269c8:	4643      	mov	r3, r8
   269ca:	9000      	str	r0, [sp, #0]
   269cc:	9707      	str	r7, [sp, #28]
   269ce:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
   269d0:	950e      	str	r5, [sp, #56]	; 0x38
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   269d2:	f00e fd49 	bl	35468 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
   269d6:	4631      	mov	r1, r6
   269d8:	f011 f93e 	bl	37c58 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
   269dc:	b990      	cbnz	r0, 26a04 <ll_adv_enable+0x174>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   269de:	4912      	ldr	r1, [pc, #72]	; (26a28 <ll_adv_enable+0x198>)
   269e0:	9105      	str	r1, [sp, #20]
   269e2:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
   269e6:	9300      	str	r3, [sp, #0]
   269e8:	e9cd 0003 	strd	r0, r0, [sp, #12]
   269ec:	e9cd 0001 	strd	r0, r0, [sp, #4]
   269f0:	9707      	str	r7, [sp, #28]
   269f2:	9608      	str	r6, [sp, #32]
   269f4:	9406      	str	r4, [sp, #24]
   269f6:	4643      	mov	r3, r8
   269f8:	2201      	movs	r2, #1
   269fa:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
   269fc:	950e      	str	r5, [sp, #56]	; 0x38
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   269fe:	f00e fd33 	bl	35468 <ticker_start>
   26a02:	e140      	b.n	26c86 <ll_adv_enable+0x3f6>
	if (adv->lll.conn) {
   26a04:	6a23      	ldr	r3, [r4, #32]
   26a06:	2b00      	cmp	r3, #0
   26a08:	d080      	beq.n	2690c <ll_adv_enable+0x7c>
		conn_release(adv);
   26a0a:	f011 feaf 	bl	3876c <conn_release.constprop.0>
   26a0e:	e77d      	b.n	2690c <ll_adv_enable+0x7c>
   26a10:	1afd498d 	.word	0x1afd498d
   26a14:	00000007 	.word	0x00000007
   26a18:	200057b4 	.word	0x200057b4
   26a1c:	3b9aca00 	.word	0x3b9aca00
   26a20:	000389c9 	.word	0x000389c9
   26a24:	00037131 	.word	0x00037131
   26a28:	000384fd 	.word	0x000384fd
		link = ll_rx_link_alloc();
   26a2c:	f011 f85e 	bl	37aec <ll_rx_link_alloc>
		if (!link) {
   26a30:	4681      	mov	r9, r0
   26a32:	2800      	cmp	r0, #0
   26a34:	f000 8140 	beq.w	26cb8 <ll_adv_enable+0x428>
		node_rx = ll_rx_alloc();
   26a38:	f011 f864 	bl	37b04 <ll_rx_alloc>
		if (!node_rx) {
   26a3c:	4682      	mov	sl, r0
   26a3e:	2800      	cmp	r0, #0
   26a40:	f000 8137 	beq.w	26cb2 <ll_adv_enable+0x422>
		conn = ll_conn_acquire();
   26a44:	f013 faa2 	bl	39f8c <ll_conn_acquire>
		if (!conn) {
   26a48:	4605      	mov	r5, r0
   26a4a:	2800      	cmp	r0, #0
   26a4c:	f000 812e 	beq.w	26cac <ll_adv_enable+0x41c>
		conn_lll->handle = 0xFFFF;
   26a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (!conn_lll->link_tx_free) {
   26a54:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
   26a56:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
   26a58:	f105 031c 	add.w	r3, r5, #28
   26a5c:	930b      	str	r3, [sp, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
   26a5e:	2800      	cmp	r0, #0
   26a60:	f000 8130 	beq.w	26cc4 <ll_adv_enable+0x434>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   26a64:	f105 0268 	add.w	r2, r5, #104	; 0x68
   26a68:	f105 0164 	add.w	r1, r5, #100	; 0x64
   26a6c:	f00d fa32 	bl	33ed4 <memq_init>
			conn_lll->phy_tx = PHY_1M;
   26a70:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   26a74:	4998      	ldr	r1, [pc, #608]	; (26cd8 <ll_adv_enable+0x448>)
			conn_lll->phy_tx = PHY_1M;
   26a76:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
   26a7a:	f023 0307 	bic.w	r3, r3, #7
   26a7e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   26a82:	f043 0301 	orr.w	r3, r3, #1
   26a86:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
   26a8a:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   26a8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26a92:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26a96:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
		conn_lll->sn = 0;
   26a9a:	f895 307a 	ldrb.w	r3, [r5, #122]	; 0x7a
   26a9e:	f023 0307 	bic.w	r3, r3, #7
   26aa2:	f885 307a 	strb.w	r3, [r5, #122]	; 0x7a
		conn_lll->periph.initiated = 0;
   26aa6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   26aaa:	f023 0307 	bic.w	r3, r3, #7
   26aae:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		conn->own_id_addr_type = BT_ADDR_LE_NONE->type;
   26ab2:	f895 30d6 	ldrb.w	r3, [r5, #214]	; 0xd6
		conn_lll->link_tx_free = NULL;
   26ab6:	2700      	movs	r7, #0
		conn->own_id_addr_type = BT_ADDR_LE_NONE->type;
   26ab8:	f367 0300 	bfi	r3, r7, #0, #1
   26abc:	f885 30d6 	strb.w	r3, [r5, #214]	; 0xd6
		conn->connect_expire = 6;
   26ac0:	2206      	movs	r2, #6
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   26ac2:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
   26ac6:	e9c5 3116 	strd	r3, r1, [r5, #88]	; 0x58
		conn->connect_expire = 6;
   26aca:	f8a5 20c0 	strh.w	r2, [r5, #192]	; 0xc0
		conn_lll->periph.window_widening_event_us = 0;
   26ace:	e9c5 7712 	strd	r7, r7, [r5, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
   26ad2:	676f      	str	r7, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
   26ad4:	f8a5 7078 	strh.w	r7, [r5, #120]	; 0x78
		conn_lll->event_counter = 0;
   26ad8:	866f      	strh	r7, [r5, #50]	; 0x32
		conn_lll->latency_prepare = 0;
   26ada:	f8c5 702e 	str.w	r7, [r5, #46]	; 0x2e
		conn_lll->data_chan_use = 0;
   26ade:	f885 703b 	strb.w	r7, [r5, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
   26ae2:	652f      	str	r7, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
   26ae4:	f8a5 70c4 	strh.w	r7, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
   26ae8:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
		conn->apto_expire = 0U;
   26aec:	f8a5 70d0 	strh.w	r7, [r5, #208]	; 0xd0
		conn->appto_expire = 0U;
   26af0:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
		(void)memcpy(conn->own_id_addr, BT_ADDR_LE_NONE->a.val,
   26af4:	f64f 7bff 	movw	fp, #65535	; 0xffff
   26af8:	f06f 03ff 	mvn.w	r3, #255	; 0xff
   26afc:	f10d 0131 	add.w	r1, sp, #49	; 0x31
   26b00:	f105 00d7 	add.w	r0, r5, #215	; 0xd7
   26b04:	930c      	str	r3, [sp, #48]	; 0x30
   26b06:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
   26b0a:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
   26b0e:	f025 f8a3 	bl	4bc58 <memcpy>
		conn->peer_id_addr_type = BT_ADDR_LE_NONE->type;
   26b12:	f895 10d6 	ldrb.w	r1, [r5, #214]	; 0xd6
   26b16:	f367 0141 	bfi	r1, r7, #1, #1
   26b1a:	f885 10d6 	strb.w	r1, [r5, #214]	; 0xd6
		(void)memcpy(conn->peer_id_addr, BT_ADDR_LE_NONE->a.val,
   26b1e:	2206      	movs	r2, #6
   26b20:	f06f 03ff 	mvn.w	r3, #255	; 0xff
   26b24:	f10d 0139 	add.w	r1, sp, #57	; 0x39
   26b28:	f105 00dd 	add.w	r0, r5, #221	; 0xdd
   26b2c:	930e      	str	r3, [sp, #56]	; 0x38
   26b2e:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
   26b32:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
   26b36:	f025 f88f 	bl	4bc58 <memcpy>
		conn->common.fex_valid = 0;
   26b3a:	f895 30e4 	ldrb.w	r3, [r5, #228]	; 0xe4
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
   26b3e:	f885 70f2 	strb.w	r7, [r5, #242]	; 0xf2
		conn->common.fex_valid = 0;
   26b42:	f023 0307 	bic.w	r3, r3, #7
   26b46:	f885 30e4 	strb.w	r3, [r5, #228]	; 0xe4
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
   26b4a:	f8a5 70f0 	strh.w	r7, [r5, #240]	; 0xf0
		conn->llcp_rx = NULL;
   26b4e:	f8c5 7114 	str.w	r7, [r5, #276]	; 0x114
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
   26b52:	f8a5 7118 	strh.w	r7, [r5, #280]	; 0x118
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
   26b56:	f8a5 7130 	strh.w	r7, [r5, #304]	; 0x130
		conn->llcp_feature.features_conn = ll_feat_get();
   26b5a:	f010 fa83 	bl	37064 <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   26b5e:	f895 314a 	ldrb.w	r3, [r5, #330]	; 0x14a
		conn->llcp_version.req = conn->llcp_version.ack = 0;
   26b62:	f8a5 7148 	strh.w	r7, [r5, #328]	; 0x148
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   26b66:	f023 0303 	bic.w	r3, r3, #3
   26b6a:	f885 314a 	strb.w	r3, [r5, #330]	; 0x14a
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   26b6e:	f895 307a 	ldrb.w	r3, [r5, #122]	; 0x7a
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
   26b72:	f8a5 7150 	strh.w	r7, [r5, #336]	; 0x150
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   26b76:	f023 0318 	bic.w	r3, r3, #24
   26b7a:	f885 307a 	strb.w	r3, [r5, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   26b7e:	f895 3176 	ldrb.w	r3, [r5, #374]	; 0x176
		conn->llcp_terminate.reason_final = 0;
   26b82:	f885 7153 	strb.w	r7, [r5, #339]	; 0x153
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   26b86:	f023 0307 	bic.w	r3, r3, #7
   26b8a:	f885 3176 	strb.w	r3, [r5, #374]	; 0x176
		conn->llcp_conn_param.disabled = 0;
   26b8e:	f895 3196 	ldrb.w	r3, [r5, #406]	; 0x196
		conn->llcp_terminate.node_rx.hdr.link = link;
   26b92:	f8c5 9154 	str.w	r9, [r5, #340]	; 0x154
		conn->llcp_conn_param.disabled = 0;
   26b96:	f367 1345 	bfi	r3, r7, #5, #1
   26b9a:	f885 3196 	strb.w	r3, [r5, #406]	; 0x196
		conn->llcp_length.disabled = 0U;
   26b9e:	f895 31be 	ldrb.w	r3, [r5, #446]	; 0x1be
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   26ba2:	f8a5 7174 	strh.w	r7, [r5, #372]	; 0x174
		conn->llcp_length.disabled = 0U;
   26ba6:	f367 03c3 	bfi	r3, r7, #3, #1
		conn->llcp_feature.features_peer = 0;
   26baa:	2200      	movs	r2, #0
		conn->llcp_length.disabled = 0U;
   26bac:	f885 31be 	strb.w	r3, [r5, #446]	; 0x1be
		conn->llcp_feature.features_peer = 0;
   26bb0:	2300      	movs	r3, #0
		conn->llcp_feature.features_conn = ll_feat_get();
   26bb2:	e9c5 014e 	strd	r0, r1, [r5, #312]	; 0x138
		conn->llcp_feature.features_peer = 0;
   26bb6:	e9c5 2350 	strd	r2, r3, [r5, #320]	; 0x140
		conn->periph.llcp_type = 0U;
   26bba:	f885 70e5 	strb.w	r7, [r5, #229]	; 0xe5
		conn->llcp_conn_param.req = 0;
   26bbe:	f8a5 7194 	strh.w	r7, [r5, #404]	; 0x194
		conn->periph.ticks_to_offset = 0;
   26bc2:	f8c5 70ec 	str.w	r7, [r5, #236]	; 0xec
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
   26bc6:	f8a5 71bc 	strh.w	r7, [r5, #444]	; 0x1bc
		conn->llcp_length.cache.tx_octets = 0U;
   26bca:	f8a5 71c8 	strh.w	r7, [r5, #456]	; 0x1c8
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
   26bce:	f013 fd3b 	bl	3a648 <ull_conn_default_tx_octets_get>
   26bd2:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
   26bd6:	f013 fd3d 	bl	3a654 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
   26bda:	f8d5 21cc 	ldr.w	r2, [r5, #460]	; 0x1cc
   26bde:	4b3f      	ldr	r3, [pc, #252]	; (26cdc <ll_adv_enable+0x44c>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
   26be0:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
   26be4:	4013      	ands	r3, r2
   26be6:	f8c5 31cc 	str.w	r3, [r5, #460]	; 0x1cc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   26bea:	f013 fd39 	bl	3a660 <ull_conn_default_phy_tx_get>
   26bee:	f895 31d0 	ldrb.w	r3, [r5, #464]	; 0x1d0
   26bf2:	f360 0302 	bfi	r3, r0, #0, #3
   26bf6:	f885 31d0 	strb.w	r3, [r5, #464]	; 0x1d0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26bfa:	f013 fd37 	bl	3a66c <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
   26bfe:	f105 031c 	add.w	r3, r5, #28
   26c02:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26c04:	f895 31d0 	ldrb.w	r3, [r5, #464]	; 0x1d0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   26c08:	f8c5 71d4 	str.w	r7, [r5, #468]	; 0x1d4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26c0c:	f360 03c5 	bfi	r3, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
   26c10:	e9c4 9a18 	strd	r9, sl, [r4, #96]	; 0x60
		conn->tx_data = conn->tx_data_last = 0;
   26c14:	e9c5 7778 	strd	r7, r7, [r5, #480]	; 0x1e0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   26c18:	e9c5 7776 	strd	r7, r7, [r5, #472]	; 0x1d8
	hdr->disabled_cb = hdr->disabled_param = NULL;
   26c1c:	e9c5 7705 	strd	r7, r7, [r5, #20]
	hdr->ref = 0U;
   26c20:	702f      	strb	r7, [r5, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
   26c22:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26c24:	f885 31d0 	strb.w	r3, [r5, #464]	; 0x1d0
		err = lll_clock_wait();
   26c28:	f019 feac 	bl	40984 <lll_clock_wait>
		if (err) {
   26c2c:	2800      	cmp	r0, #0
   26c2e:	f43f ae82 	beq.w	26936 <ll_adv_enable+0xa6>
			conn_release(adv);
   26c32:	f011 fd9b 	bl	3876c <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
   26c36:	2003      	movs	r0, #3
   26c38:	e669      	b.n	2690e <ll_adv_enable+0x7e>
		ll_adv_ticker_ext[handle].ticks_slot_window =
   26c3a:	4a29      	ldr	r2, [pc, #164]	; (26ce0 <ll_adv_enable+0x450>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26c3c:	4829      	ldr	r0, [pc, #164]	; (26ce4 <ll_adv_enable+0x454>)
		ret = ticker_start_ext(
   26c3e:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
   26c40:	f203 1347 	addw	r3, r3, #327	; 0x147
		ret = ticker_start_ext(
   26c44:	9406      	str	r4, [sp, #24]
   26c46:	9502      	str	r5, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26c48:	2191      	movs	r1, #145	; 0x91
		ll_adv_ticker_ext[handle].ticks_slot_window =
   26c4a:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26c4c:	fba7 0300 	umull	r0, r3, r7, r0
   26c50:	fb01 3107 	mla	r1, r1, r7, r3
		ret = ticker_start_ext(
   26c54:	4b24      	ldr	r3, [pc, #144]	; (26ce8 <ll_adv_enable+0x458>)
   26c56:	9307      	str	r3, [sp, #28]
   26c58:	4b24      	ldr	r3, [pc, #144]	; (26cec <ll_adv_enable+0x45c>)
   26c5a:	9305      	str	r3, [sp, #20]
   26c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26c60:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
   26c62:	2702      	movs	r7, #2
		ret = ticker_start_ext(
   26c64:	9303      	str	r3, [sp, #12]
   26c66:	ae0e      	add	r6, sp, #56	; 0x38
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26c68:	a319      	add	r3, pc, #100	; (adr r3, 26cd0 <ll_adv_enable+0x440>)
   26c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
   26c6e:	970e      	str	r7, [sp, #56]	; 0x38
		ret = ticker_start_ext(
   26c70:	9608      	str	r6, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26c72:	f7ff fa45 	bl	26100 <__aeabi_uldivmod>
		ret = ticker_start_ext(
   26c76:	4643      	mov	r3, r8
   26c78:	e9cd 5000 	strd	r5, r0, [sp]
   26c7c:	463a      	mov	r2, r7
   26c7e:	4628      	mov	r0, r5
   26c80:	2103      	movs	r1, #3
   26c82:	f00e fb9b 	bl	353bc <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
   26c86:	4631      	mov	r1, r6
   26c88:	f010 ffe6 	bl	37c58 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   26c8c:	2800      	cmp	r0, #0
   26c8e:	f47f aeb9 	bne.w	26a04 <ll_adv_enable+0x174>
	adv->is_enabled = 1;
   26c92:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   26c96:	f043 0301 	orr.w	r3, r3, #1
   26c9a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   26c9e:	f012 fa79 	bl	39194 <ull_scan_is_enabled_get>
   26ca2:	b158      	cbz	r0, 26cbc <ll_adv_enable+0x42c>
			return 0;
   26ca4:	2000      	movs	r0, #0
   26ca6:	e632      	b.n	2690e <ll_adv_enable+0x7e>
			return BT_HCI_ERR_INVALID_PARAM;
   26ca8:	2012      	movs	r0, #18
   26caa:	e630      	b.n	2690e <ll_adv_enable+0x7e>
			ll_rx_release(node_rx);
   26cac:	4650      	mov	r0, sl
   26cae:	f010 ff2f 	bl	37b10 <ll_rx_release>
			ll_rx_link_release(link);
   26cb2:	4648      	mov	r0, r9
   26cb4:	f010 ff20 	bl	37af8 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   26cb8:	2007      	movs	r0, #7
   26cba:	e628      	b.n	2690e <ll_adv_enable+0x7e>
		ull_filter_adv_scan_state_cb(BIT(0));
   26cbc:	2001      	movs	r0, #1
   26cbe:	f018 fc73 	bl	3f5a8 <ull_filter_adv_scan_state_cb>
   26cc2:	e7ef      	b.n	26ca4 <ll_adv_enable+0x414>
			conn_lll->link_tx_free = &conn_lll->link_tx;
   26cc4:	f105 006c 	add.w	r0, r5, #108	; 0x6c
   26cc8:	6768      	str	r0, [r5, #116]	; 0x74
   26cca:	e6cb      	b.n	26a64 <ll_adv_enable+0x1d4>
   26ccc:	f3af 8000 	nop.w
   26cd0:	1afd498d 	.word	0x1afd498d
   26cd4:	00000007 	.word	0x00000007
   26cd8:	01480148 	.word	0x01480148
   26cdc:	f6ff0000 	.word	0xf6ff0000
   26ce0:	200057a8 	.word	0x200057a8
   26ce4:	84e72a00 	.word	0x84e72a00
   26ce8:	00037131 	.word	0x00037131
   26cec:	000389c9 	.word	0x000389c9

00026cf0 <ull_adv_time_update>:
{
   26cf0:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
   26cf2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
   26cf6:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
   26cf8:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
   26cfc:	460d      	mov	r5, r1
   26cfe:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26d00:	2101      	movs	r1, #1
   26d02:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
   26d06:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
   26d08:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26d0c:	f00d fa6c 	bl	341e8 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
   26d10:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26d12:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
   26d14:	4628      	mov	r0, r5
   26d16:	f011 fe1f 	bl	38958 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
   26d1a:	491d      	ldr	r1, [pc, #116]	; (26d90 <ull_adv_time_update+0xa0>)
   26d1c:	a31a      	add	r3, pc, #104	; (adr r3, 26d88 <ull_adv_time_update+0x98>)
   26d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   26d22:	fba0 0101 	umull	r0, r1, r0, r1
   26d26:	f7ff f9eb 	bl	26100 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
   26d2a:	6923      	ldr	r3, [r4, #16]
   26d2c:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
   26d2e:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
   26d30:	d221      	bcs.n	26d76 <ull_adv_time_update+0x86>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
   26d32:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
   26d34:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26d36:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26d38:	4a16      	ldr	r2, [pc, #88]	; (26d94 <ull_adv_time_update+0xa4>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26d3a:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26d3c:	4b16      	ldr	r3, [pc, #88]	; (26d98 <ull_adv_time_update+0xa8>)
   26d3e:	1aa2      	subs	r2, r4, r2
   26d40:	fba3 3202 	umull	r3, r2, r3, r2
	ret_cb = TICKER_STATUS_BUSY;
   26d44:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26d46:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26d48:	2300      	movs	r3, #0
   26d4a:	440a      	add	r2, r1
   26d4c:	ae09      	add	r6, sp, #36	; 0x24
	ret_cb = TICKER_STATUS_BUSY;
   26d4e:	9109      	str	r1, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26d50:	4912      	ldr	r1, [pc, #72]	; (26d9c <ull_adv_time_update+0xac>)
   26d52:	9105      	str	r1, [sp, #20]
   26d54:	e9cd 3303 	strd	r3, r3, [sp, #12]
   26d58:	2103      	movs	r1, #3
   26d5a:	b2d2      	uxtb	r2, r2
   26d5c:	9606      	str	r6, [sp, #24]
   26d5e:	9300      	str	r3, [sp, #0]
   26d60:	4618      	mov	r0, r3
   26d62:	f00e fbf5 	bl	35550 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
   26d66:	4631      	mov	r1, r6
   26d68:	f010 ff76 	bl	37c58 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   26d6c:	b938      	cbnz	r0, 26d7e <ull_adv_time_update+0x8e>
	adv->ull.ticks_slot = time_ticks;
   26d6e:	6125      	str	r5, [r4, #16]
		return BT_HCI_ERR_SUCCESS;
   26d70:	2000      	movs	r0, #0
}
   26d72:	b00a      	add	sp, #40	; 0x28
   26d74:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
   26d76:	d9fb      	bls.n	26d70 <ull_adv_time_update+0x80>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
   26d78:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
   26d7a:	2300      	movs	r3, #0
   26d7c:	e7db      	b.n	26d36 <ull_adv_time_update+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
   26d7e:	200c      	movs	r0, #12
}
   26d80:	b00a      	add	sp, #40	; 0x28
   26d82:	bd70      	pop	{r4, r5, r6, pc}
   26d84:	f3af 8000 	nop.w
   26d88:	1afd498d 	.word	0x1afd498d
   26d8c:	00000007 	.word	0x00000007
   26d90:	3b9aca00 	.word	0x3b9aca00
   26d94:	200057b4 	.word	0x200057b4
   26d98:	88888889 	.word	0x88888889
   26d9c:	00037131 	.word	0x00037131

00026da0 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
   26da0:	b538      	push	{r3, r4, r5, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
   26da2:	4c19      	ldr	r4, [pc, #100]	; (26e08 <ll_scan_params_set+0x68>)
{
   26da4:	f89d e010 	ldrb.w	lr, [sp, #16]
	if (!scan || scan->is_enabled) {
   26da8:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
   26dac:	f01c 0501 	ands.w	r5, ip, #1
   26db0:	d122      	bne.n	26df8 <ll_scan_params_set+0x58>
	scan->own_addr_type = own_addr_type;
   26db2:	f363 0c42 	bfi	ip, r3, #1, #2
	lll->filter_policy = filter_policy;
   26db6:	0140      	lsls	r0, r0, #5
   26db8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	lll->interval = interval;
   26dbc:	87a1      	strh	r1, [r4, #60]	; 0x3c
	lll->filter_policy = filter_policy;
   26dbe:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   26dc2:	f00e 0e18 	and.w	lr, lr, #24
   26dc6:	f000 0020 	and.w	r0, r0, #32
   26dca:	ea40 000e 	orr.w	r0, r0, lr
   26dce:	f023 0338 	bic.w	r3, r3, #56	; 0x38
   26dd2:	4303      	orrs	r3, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26dd4:	480d      	ldr	r0, [pc, #52]	; (26e0c <ll_scan_params_set+0x6c>)
	lll->filter_policy = filter_policy;
   26dd6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26dda:	2191      	movs	r1, #145	; 0x91
   26ddc:	fba2 0300 	umull	r0, r3, r2, r0
	scan->own_addr_type = own_addr_type;
   26de0:	f884 c044 	strb.w	ip, [r4, #68]	; 0x44
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26de4:	fb01 3102 	mla	r1, r1, r2, r3
   26de8:	a305      	add	r3, pc, #20	; (adr r3, 26e00 <ll_scan_params_set+0x60>)
   26dea:	e9d3 2300 	ldrd	r2, r3, [r3]
   26dee:	f7ff f987 	bl	26100 <__aeabi_uldivmod>
   26df2:	6420      	str	r0, [r4, #64]	; 0x40
}
   26df4:	4628      	mov	r0, r5
   26df6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   26df8:	250c      	movs	r5, #12
}
   26dfa:	4628      	mov	r0, r5
   26dfc:	bd38      	pop	{r3, r4, r5, pc}
   26dfe:	bf00      	nop
   26e00:	1afd498d 	.word	0x1afd498d
   26e04:	00000007 	.word	0x00000007
   26e08:	20005844 	.word	0x20005844
   26e0c:	84e72a00 	.word	0x84e72a00

00026e10 <ull_scan_params_set>:
{
   26e10:	b510      	push	{r4, lr}
   26e12:	4604      	mov	r4, r0
   26e14:	f89d 0008 	ldrb.w	r0, [sp, #8]
	lll->interval = interval;
   26e18:	8422      	strh	r2, [r4, #32]
	lll->filter_policy = filter_policy;
   26e1a:	ea4f 1c41 	mov.w	ip, r1, lsl #5
   26e1e:	00c0      	lsls	r0, r0, #3
   26e20:	7da1      	ldrb	r1, [r4, #22]
   26e22:	f000 0018 	and.w	r0, r0, #24
   26e26:	f00c 0c20 	and.w	ip, ip, #32
   26e2a:	ea4c 0c00 	orr.w	ip, ip, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26e2e:	480c      	ldr	r0, [pc, #48]	; (26e60 <ull_scan_params_set+0x50>)
	lll->filter_policy = filter_policy;
   26e30:	f021 0138 	bic.w	r1, r1, #56	; 0x38
   26e34:	ea4c 0c01 	orr.w	ip, ip, r1
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26e38:	fba3 0200 	umull	r0, r2, r3, r0
   26e3c:	2191      	movs	r1, #145	; 0x91
   26e3e:	fb01 2103 	mla	r1, r1, r3, r2
	lll->filter_policy = filter_policy;
   26e42:	f884 c016 	strb.w	ip, [r4, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26e46:	a304      	add	r3, pc, #16	; (adr r3, 26e58 <ull_scan_params_set+0x48>)
   26e48:	e9d3 2300 	ldrd	r2, r3, [r3]
   26e4c:	f7ff f958 	bl	26100 <__aeabi_uldivmod>
   26e50:	6260      	str	r0, [r4, #36]	; 0x24
}
   26e52:	bd10      	pop	{r4, pc}
   26e54:	f3af 8000 	nop.w
   26e58:	1afd498d 	.word	0x1afd498d
   26e5c:	00000007 	.word	0x00000007
   26e60:	84e72a00 	.word	0x84e72a00
   26e64:	00000000 	.word	0x00000000

00026e68 <ull_scan_enable>:
{
   26e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26e6c:	4604      	mov	r4, r0
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
   26e6e:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
   26e72:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
   26e76:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   26e7a:	f3c0 0040 	ubfx	r0, r0, #1, #1
   26e7e:	f360 1386 	bfi	r3, r0, #6, #1
{
   26e82:	b08c      	sub	sp, #48	; 0x30
	lll->init_addr_type = scan->own_addr_type;
   26e84:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
   26e88:	f00e fc50 	bl	3572c <ll_addr_read>
	lll->chan = 0U;
   26e8c:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
   26e90:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   26e92:	484b      	ldr	r0, [pc, #300]	; (26fc0 <ull_scan_enable+0x158>)
   26e94:	61e4      	str	r4, [r4, #28]
	lll->chan = 0U;
   26e96:	f002 0279 	and.w	r2, r2, #121	; 0x79
   26e9a:	2500      	movs	r5, #0
   26e9c:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
   26ea0:	2191      	movs	r1, #145	; 0x91
   26ea2:	fba3 0200 	umull	r0, r2, r3, r0
   26ea6:	fb01 2103 	mla	r1, r1, r3, r2
	hdr->disabled_cb = hdr->disabled_param = NULL;
   26eaa:	e9c4 5505 	strd	r5, r5, [r4, #20]
   26eae:	a342      	add	r3, pc, #264	; (adr r3, 26fb8 <ull_scan_enable+0x150>)
   26eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
   26eb4:	7025      	strb	r5, [r4, #0]
   26eb6:	f7ff f923 	bl	26100 <__aeabi_uldivmod>
	scan->ull.ticks_active_to_start = 0U;
   26eba:	2331      	movs	r3, #49	; 0x31
   26ebc:	60a3      	str	r3, [r4, #8]
	if ((lll->ticks_window +
   26ebe:	6c23      	ldr	r3, [r4, #64]	; 0x40
	scan->ull.ticks_active_to_start = 0U;
   26ec0:	6065      	str	r5, [r4, #4]
	if ((lll->ticks_window +
   26ec2:	3309      	adds	r3, #9
	    (ticks_interval -
   26ec4:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
   26ec8:	4293      	cmp	r3, r2
			scan->ull.ticks_slot = ticks_interval -
   26eca:	bf28      	it	cs
   26ecc:	4613      	movcs	r3, r2
   26ece:	6123      	str	r3, [r4, #16]
	scan->ull.ticks_preempt_to_start =
   26ed0:	60e5      	str	r5, [r4, #12]
		lll->ticks_window = 0U;
   26ed2:	bf28      	it	cs
   26ed4:	6425      	strcs	r5, [r4, #64]	; 0x40
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
   26ed6:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
   26ed8:	f00e fbf2 	bl	356c0 <ticker_ticks_now_get>
	if (!lll->conn) {
   26edc:	6a23      	ldr	r3, [r4, #32]
	ticks_anchor = ticker_ticks_now_get();
   26ede:	4607      	mov	r7, r0
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
   26ee0:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	if (!lll->conn) {
   26ee4:	2b00      	cmp	r3, #0
   26ee6:	d04a      	beq.n	26f7e <ull_scan_enable+0x116>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   26ee8:	4d36      	ldr	r5, [pc, #216]	; (26fc4 <ull_scan_enable+0x15c>)
   26eea:	4b37      	ldr	r3, [pc, #220]	; (26fc8 <ull_scan_enable+0x160>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26eec:	f8cd 8020 	str.w	r8, [sp, #32]
   26ef0:	9406      	str	r4, [sp, #24]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   26ef2:	1b65      	subs	r5, r4, r5
   26ef4:	fba3 3505 	umull	r3, r5, r3, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   26ef8:	4831      	ldr	r0, [pc, #196]	; (26fc0 <ull_scan_enable+0x158>)
   26efa:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26efc:	f04f 0a00 	mov.w	sl, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   26f00:	fba3 0200 	umull	r0, r2, r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f04:	f8cd a00c 	str.w	sl, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   26f08:	2191      	movs	r1, #145	; 0x91
   26f0a:	fb01 2103 	mla	r1, r1, r3, r2
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f0e:	6923      	ldr	r3, [r4, #16]
   26f10:	9304      	str	r3, [sp, #16]
   26f12:	4b2e      	ldr	r3, [pc, #184]	; (26fcc <ull_scan_enable+0x164>)
   26f14:	9307      	str	r3, [sp, #28]
   26f16:	4b2e      	ldr	r3, [pc, #184]	; (26fd0 <ull_scan_enable+0x168>)
   26f18:	9305      	str	r3, [sp, #20]
	ret_cb = TICKER_STATUS_BUSY;
   26f1a:	f04f 0902 	mov.w	r9, #2
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   26f1e:	a326      	add	r3, pc, #152	; (adr r3, 26fb8 <ull_scan_enable+0x150>)
   26f20:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret_cb = TICKER_STATUS_BUSY;
   26f24:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   26f28:	f7ff f8ea 	bl	26100 <__aeabi_uldivmod>
   26f2c:	4610      	mov	r0, r2
   26f2e:	4619      	mov	r1, r3
   26f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26f34:	2300      	movs	r3, #0
   26f36:	f7ff f8e3 	bl	26100 <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   26f3a:	092d      	lsrs	r5, r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f3c:	3504      	adds	r5, #4
   26f3e:	b2ed      	uxtb	r5, r5
   26f40:	e9cd 6001 	strd	r6, r0, [sp, #4]
   26f44:	2103      	movs	r1, #3
   26f46:	463b      	mov	r3, r7
   26f48:	462a      	mov	r2, r5
   26f4a:	f8cd a000 	str.w	sl, [sp]
   26f4e:	4650      	mov	r0, sl
   26f50:	f00e fa8a 	bl	35468 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
   26f54:	4641      	mov	r1, r8
   26f56:	f010 fe7f 	bl	37c58 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   26f5a:	b960      	cbnz	r0, 26f76 <ull_scan_enable+0x10e>
	scan->is_enabled = 1U;
   26f5c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   26f60:	f043 0301 	orr.w	r3, r3, #1
   26f64:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
   26f68:	f011 fefc 	bl	38d64 <ull_adv_is_enabled_get>
   26f6c:	b1f8      	cbz	r0, 26fae <ull_scan_enable+0x146>
	return 0;
   26f6e:	2000      	movs	r0, #0
}
   26f70:	b00c      	add	sp, #48	; 0x30
   26f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   26f76:	200c      	movs	r0, #12
}
   26f78:	b00c      	add	sp, #48	; 0x30
   26f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t offset_us = 0U;
   26f7e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
   26f82:	6921      	ldr	r1, [r4, #16]
   26f84:	4643      	mov	r3, r8
   26f86:	aa0a      	add	r2, sp, #40	; 0x28
   26f88:	2003      	movs	r0, #3
   26f8a:	f001 f9dd 	bl	28348 <ull_sched_after_mstr_slot_get>
		if (offset_us) {
   26f8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   26f90:	2900      	cmp	r1, #0
   26f92:	d0a9      	beq.n	26ee8 <ull_scan_enable+0x80>
				       HAL_TICKER_US_TO_TICKS(offset_us);
   26f94:	480f      	ldr	r0, [pc, #60]	; (26fd4 <ull_scan_enable+0x16c>)
   26f96:	a308      	add	r3, pc, #32	; (adr r3, 26fb8 <ull_scan_enable+0x150>)
   26f98:	e9d3 2300 	ldrd	r2, r3, [r3]
   26f9c:	fba1 0100 	umull	r0, r1, r1, r0
   26fa0:	f7ff f8ae 	bl	26100 <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
   26fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				       HAL_TICKER_US_TO_TICKS(offset_us);
   26fa6:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
   26faa:	441f      	add	r7, r3
   26fac:	e79c      	b.n	26ee8 <ull_scan_enable+0x80>
		ull_filter_adv_scan_state_cb(BIT(1));
   26fae:	4648      	mov	r0, r9
   26fb0:	f018 fafa 	bl	3f5a8 <ull_filter_adv_scan_state_cb>
   26fb4:	e7db      	b.n	26f6e <ull_scan_enable+0x106>
   26fb6:	bf00      	nop
   26fb8:	1afd498d 	.word	0x1afd498d
   26fbc:	00000007 	.word	0x00000007
   26fc0:	84e72a00 	.word	0x84e72a00
   26fc4:	20005844 	.word	0x20005844
   26fc8:	38e38e39 	.word	0x38e38e39
   26fcc:	00037131 	.word	0x00037131
   26fd0:	00038f89 	.word	0x00038f89
   26fd4:	3b9aca00 	.word	0x3b9aca00

00026fd8 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
   26fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26fdc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   26fde:	8e45      	ldrh	r5, [r0, #50]	; 0x32

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   26fe0:	f8b0 60f4 	ldrh.w	r6, [r0, #244]	; 0xf4
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26fe4:	441d      	add	r5, r3
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26fe6:	f890 311a 	ldrb.w	r3, [r0, #282]	; 0x11a
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26fea:	b2ad      	uxth	r5, r5
   26fec:	4429      	add	r1, r5
{
   26fee:	4617      	mov	r7, r2
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26ff0:	f013 0207 	ands.w	r2, r3, #7
{
   26ff4:	b08b      	sub	sp, #44	; 0x2c
   26ff6:	4604      	mov	r4, r0
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26ff8:	b289      	uxth	r1, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26ffa:	d00a      	beq.n	27012 <event_conn_upd_prep+0x3a>
		static memq_link_t s_link;
		static struct mayfly s_mfy_sched_offset = {0, 0,
			&s_link, 0, 0 };
		void (*fp_mfy_select_or_use)(void *) = NULL;

		switch (conn->llcp_cu.state) {
   26ffc:	1e53      	subs	r3, r2, #1
   26ffe:	2b04      	cmp	r3, #4
   27000:	f200 837c 	bhi.w	276fc <event_conn_upd_prep+0x724>
   27004:	e8df f013 	tbh	[pc, r3, lsl #1]
   27008:	0201016a 	.word	0x0201016a
   2700c:	023901fc 	.word	0x023901fc
   27010:	0204      	.short	0x0204
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   27012:	1b89      	subs	r1, r1, r6
   27014:	fa1f f881 	uxth.w	r8, r1
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
   27018:	0409      	lsls	r1, r1, #16
   2701a:	f100 81cb 	bmi.w	273b4 <event_conn_upd_prep+0x3dc>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   2701e:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   27022:	2b00      	cmp	r3, #0
   27024:	f2c0 8263 	blt.w	274ee <event_conn_upd_prep+0x516>
			conn->periph.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
   27028:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   2702c:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   27030:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   27034:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
		conn->llcp_cu.ack = conn->llcp_cu.req;
   27038:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
   2703c:	f884 1119 	strb.w	r1, [r4, #281]	; 0x119
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   27040:	4293      	cmp	r3, r2
   27042:	d00a      	beq.n	2705a <event_conn_upd_prep+0x82>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   27044:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   27048:	f003 030f 	and.w	r3, r3, #15
   2704c:	2b06      	cmp	r3, #6
   2704e:	d104      	bne.n	2705a <event_conn_upd_prep+0x82>
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
   27050:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   27052:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
			conn->procedure_expire = 0U;
   27056:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn == conn_upd_curr) {
   2705a:	4b93      	ldr	r3, [pc, #588]	; (272a8 <event_conn_upd_prep+0x2d0>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
   2705c:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
	if (conn == conn_upd_curr) {
   27060:	681a      	ldr	r2, [r3, #0]
   27062:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   27064:	bf04      	itt	eq
   27066:	2200      	moveq	r2, #0
   27068:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
   2706a:	f1b9 0f00 	cmp.w	r9, #0
   2706e:	f000 81b7 	beq.w	273e0 <event_conn_upd_prep+0x408>
   27072:	f8d9 0000 	ldr.w	r0, [r9]
   27076:	2800      	cmp	r0, #0
   27078:	f000 81b2 	beq.w	273e0 <event_conn_upd_prep+0x408>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
   2707c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   27080:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
   27082:	6841      	ldr	r1, [r0, #4]
   27084:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
		if ((conn->llcp_cu.interval != lll->interval) ||
   27088:	fa1f fc83 	uxth.w	ip, r3
   2708c:	4562      	cmp	r2, ip
		    (conn->llcp_cu.latency != lll->latency) ||
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   2708e:	f8b4 1120 	ldrh.w	r1, [r4, #288]	; 0x120
		if ((conn->llcp_cu.interval != lll->interval) ||
   27092:	f000 8234 	beq.w	274fe <event_conn_upd_prep+0x526>
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
   27096:	8d22      	ldrh	r2, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
   27098:	f8c9 301e 	str.w	r3, [r9, #30]
			cu->status = 0x00;
   2709c:	2300      	movs	r3, #0
   2709e:	f889 301c 	strb.w	r3, [r9, #28]
			rx->hdr.handle = lll->handle;
   270a2:	f8a9 2006 	strh.w	r2, [r9, #6]
			cu->latency = conn->llcp_cu.latency;
			cu->timeout = conn->llcp_cu.timeout;
   270a6:	f8a9 1022 	strh.w	r1, [r9, #34]	; 0x22
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   270aa:	2318      	movs	r3, #24
   270ac:	f889 3004 	strb.w	r3, [r9, #4]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
   270b0:	4649      	mov	r1, r9
   270b2:	f010 fd33 	bl	37b1c <ll_rx_put>
		ll_rx_sched();
   270b6:	f010 fd3b 	bl	37b30 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   270ba:	68a3      	ldr	r3, [r4, #8]
   270bc:	2b00      	cmp	r3, #0
   270be:	da09      	bge.n	270d4 <event_conn_upd_prep+0xfc>
			uint32_t ticks_prepare_to_start =
   270c0:	68e1      	ldr	r1, [r4, #12]
   270c2:	6862      	ldr	r2, [r4, #4]
				MAX(conn->ull.ticks_active_to_start,
				    conn->ull.ticks_preempt_to_start);

			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
   270c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   270c8:	4291      	cmp	r1, r2
   270ca:	bf2c      	ite	cs
   270cc:	187f      	addcs	r7, r7, r1
   270ce:	18bf      	addcc	r7, r7, r2
   270d0:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
   270d2:	1aff      	subs	r7, r7, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
   270d4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
   270d6:	f8b4 911c 	ldrh.w	r9, [r4, #284]	; 0x11c
		conn_interval_old = instant_latency * lll->interval;
   270da:	fb11 f108 	smulbb	r1, r1, r8
   270de:	b289      	uxth	r1, r1
		latency = conn_interval_old / conn->llcp_cu.interval;
   270e0:	fbb1 f3f9 	udiv	r3, r1, r9
		conn_interval_new = latency * conn->llcp_cu.interval;
   270e4:	fb19 f003 	smulbb	r0, r9, r3
   270e8:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   270ea:	4281      	cmp	r1, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
   270ec:	fa1f fa83 	uxth.w	sl, r3
		if (conn_interval_new > conn_interval_old) {
   270f0:	f080 8165 	bcs.w	273be <event_conn_upd_prep+0x3e6>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
   270f4:	1a40      	subs	r0, r0, r1
   270f6:	f240 42e2 	movw	r2, #1250	; 0x4e2
   270fa:	496c      	ldr	r1, [pc, #432]	; (272ac <event_conn_upd_prep+0x2d4>)
   270fc:	fb02 f000 	mul.w	r0, r2, r0
   27100:	fba0 0101 	umull	r0, r1, r0, r1
   27104:	a366      	add	r3, pc, #408	; (adr r3, 272a0 <event_conn_upd_prep+0x2c8>)
   27106:	e9d3 2300 	ldrd	r2, r3, [r3]
   2710a:	f7fe fff9 	bl	26100 <__aeabi_uldivmod>
   2710e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   27112:	4407      	add	r7, r0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
   27114:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   27116:	441e      	add	r6, r3
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
   27118:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
   2711c:	1b76      	subs	r6, r6, r5
   2711e:	4456      	add	r6, sl
		conn_interval_us = conn->llcp_cu.interval *
   27120:	f240 4be2 	movw	fp, #1250	; 0x4e2
		} else if (lll->role) {
   27124:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
   27126:	85e6      	strh	r6, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
   27128:	fb0b f609 	mul.w	r6, fp, r9
		} else if (lll->role) {
   2712c:	f2c0 8207 	blt.w	2753e <event_conn_upd_prep+0x566>
			periodic_us -= lll->periph.window_widening_periodic_us;
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
		} else if (!lll->role) {
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   27130:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   27134:	485d      	ldr	r0, [pc, #372]	; (272ac <event_conn_upd_prep+0x2d4>)
   27136:	a35a      	add	r3, pc, #360	; (adr r3, 272a0 <event_conn_upd_prep+0x2c8>)
   27138:	e9d3 2300 	ldrd	r2, r3, [r3]
   2713c:	fba1 0100 	umull	r0, r1, r1, r0
   27140:	f7fe ffde 	bl	26100 <__aeabi_uldivmod>
   27144:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
		periodic_us = conn_interval_us;
   27148:	4635      	mov	r5, r6

			/* Workaround: Due to the missing remainder param in
			 * ticker_start function for first interval; add a
			 * tick so as to use the ceiled value.
			 */
			ticks_win_offset += 1U;
   2714a:	f108 0801 	add.w	r8, r8, #1

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   2714e:	4a58      	ldr	r2, [pc, #352]	; (272b0 <event_conn_upd_prep+0x2d8>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   27150:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
		lll->latency = conn->llcp_cu.latency;
   27154:	f8b4 011e 	ldrh.w	r0, [r4, #286]	; 0x11e

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27158:	4956      	ldr	r1, [pc, #344]	; (272b4 <event_conn_upd_prep+0x2dc>)
		lll->interval = conn->llcp_cu.interval;
   2715a:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   2715e:	4432      	add	r2, r6
   27160:	fbb2 f2f6 	udiv	r2, r2, r6
   27164:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   27168:	f242 7210 	movw	r2, #10000	; 0x2710
   2716c:	fb02 6303 	mla	r3, r2, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27170:	4431      	add	r1, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   27172:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27174:	fbb1 f1f6 	udiv	r1, r1, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   27178:	fbb3 f3f6 	udiv	r3, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   2717c:	b28a      	uxth	r2, r1
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   2717e:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27182:	1d83      	adds	r3, r0, #6
   27184:	429a      	cmp	r2, r3
		lll->latency = conn->llcp_cu.latency;
   27186:	85a0      	strh	r0, [r4, #44]	; 0x2c
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27188:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   2718c:	dd04      	ble.n	27198 <event_conn_upd_prep+0x1c0>
   2718e:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   27192:	33fa      	adds	r3, #250	; 0xfa
   27194:	441a      	add	r2, r3
   27196:	b292      	uxth	r2, r2
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
   27198:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   2719c:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
		if (conn->llcp_cu.cmd) {
   271a0:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
   271a2:	bf44      	itt	mi
   271a4:	2300      	movmi	r3, #0
   271a6:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
   271aa:	2102      	movs	r1, #2
   271ac:	2001      	movs	r0, #1
   271ae:	f01c f953 	bl	43458 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
   271b2:	2200      	movs	r2, #0
   271b4:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
   271b6:	4682      	mov	sl, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
   271b8:	2001      	movs	r0, #1
   271ba:	f00c fedb 	bl	33f74 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   271be:	493e      	ldr	r1, [pc, #248]	; (272b8 <event_conn_upd_prep+0x2e0>)
   271c0:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   271c4:	4620      	mov	r0, r4
   271c6:	f00c fe65 	bl	33e94 <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   271ca:	f100 0905 	add.w	r9, r0, #5
   271ce:	fa5f f989 	uxtb.w	r9, r9
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
   271d2:	4b3a      	ldr	r3, [pc, #232]	; (272bc <event_conn_upd_prep+0x2e4>)
   271d4:	9400      	str	r4, [sp, #0]
   271d6:	464a      	mov	r2, r9
   271d8:	2101      	movs	r1, #1
   271da:	2000      	movs	r0, #0
   271dc:	f00e f9d0 	bl	35580 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   271e0:	f030 0302 	bics.w	r3, r0, #2
   271e4:	d00c      	beq.n	27200 <event_conn_upd_prep+0x228>
   271e6:	4a36      	ldr	r2, [pc, #216]	; (272c0 <event_conn_upd_prep+0x2e8>)
   271e8:	4936      	ldr	r1, [pc, #216]	; (272c4 <event_conn_upd_prep+0x2ec>)
   271ea:	4837      	ldr	r0, [pc, #220]	; (272c8 <event_conn_upd_prep+0x2f0>)
   271ec:	f640 43cb 	movw	r3, #3275	; 0xccb
   271f0:	f022 fc03 	bl	499fa <printk>
   271f4:	4040      	eors	r0, r0
   271f6:	f380 8811 	msr	BASEPRI, r0
   271fa:	f04f 0003 	mov.w	r0, #3
   271fe:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
   27200:	4e2a      	ldr	r6, [pc, #168]	; (272ac <event_conn_upd_prep+0x2d4>)
   27202:	fba5 6b06 	umull	r6, fp, r5, r6
   27206:	a326      	add	r3, pc, #152	; (adr r3, 272a0 <event_conn_upd_prep+0x2c8>)
   27208:	e9d3 2300 	ldrd	r2, r3, [r3]
   2720c:	4630      	mov	r0, r6
   2720e:	4659      	mov	r1, fp
   27210:	f7fe ff76 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
   27214:	4b2d      	ldr	r3, [pc, #180]	; (272cc <event_conn_upd_prep+0x2f4>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   27216:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
   2721a:	fba5 3103 	umull	r3, r1, r5, r3
   2721e:	2207      	movs	r2, #7
   27220:	1af0      	subs	r0, r6, r3
   27222:	fb02 1105 	mla	r1, r2, r5, r1
   27226:	eb6b 0101 	sbc.w	r1, fp, r1
   2722a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2722e:	2300      	movs	r3, #0
   27230:	f7fe ff66 	bl	26100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   27234:	e9cd 5001 	strd	r5, r0, [sp, #4]
   27238:	9408      	str	r4, [sp, #32]
   2723a:	9406      	str	r4, [sp, #24]
   2723c:	f8cd 8000 	str.w	r8, [sp]
				     TICKER_NULL_LAZY,
#else
				     TICKER_LAZY_MUST_EXPIRE_KEEP,
#endif /* CONFIG_BT_TICKER_LOW_LAT */
				     (ticks_slot_overhead +
				      conn->ull.ticks_slot),
   27240:	6921      	ldr	r1, [r4, #16]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   27242:	f994 5039 	ldrsb.w	r5, [r4, #57]	; 0x39
   27246:	4822      	ldr	r0, [pc, #136]	; (272d0 <event_conn_upd_prep+0x2f8>)
   27248:	9104      	str	r1, [sp, #16]
   2724a:	4922      	ldr	r1, [pc, #136]	; (272d4 <event_conn_upd_prep+0x2fc>)
   2724c:	4c22      	ldr	r4, [pc, #136]	; (272d8 <event_conn_upd_prep+0x300>)
   2724e:	9407      	str	r4, [sp, #28]
   27250:	ea31 0125 	bics.w	r1, r1, r5, asr #32
   27254:	bf28      	it	cs
   27256:	4601      	movcs	r1, r0
   27258:	9105      	str	r1, [sp, #20]
   2725a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   2725e:	463b      	mov	r3, r7
   27260:	9103      	str	r1, [sp, #12]
   27262:	464a      	mov	r2, r9
   27264:	2101      	movs	r1, #1
   27266:	2000      	movs	r0, #0
   27268:	f00e f8fe 	bl	35468 <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   2726c:	f030 0302 	bics.w	r3, r0, #2
   27270:	d00c      	beq.n	2728c <event_conn_upd_prep+0x2b4>
   27272:	4a13      	ldr	r2, [pc, #76]	; (272c0 <event_conn_upd_prep+0x2e8>)
   27274:	4913      	ldr	r1, [pc, #76]	; (272c4 <event_conn_upd_prep+0x2ec>)
   27276:	4814      	ldr	r0, [pc, #80]	; (272c8 <event_conn_upd_prep+0x2f0>)
   27278:	f640 43e5 	movw	r3, #3301	; 0xce5
   2727c:	f022 fbbd 	bl	499fa <printk>
   27280:	4040      	eors	r0, r0
   27282:	f380 8811 	msr	BASEPRI, r0
   27286:	f04f 0003 	mov.w	r0, #3
   2728a:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
   2728c:	f1ba 0f00 	cmp.w	sl, #0
   27290:	f040 814f 	bne.w	27532 <event_conn_upd_prep+0x55a>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
   27294:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
   27296:	b00b      	add	sp, #44	; 0x2c
   27298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2729c:	f3af 8000 	nop.w
   272a0:	1afd498d 	.word	0x1afd498d
   272a4:	00000007 	.word	0x00000007
   272a8:	200058bc 	.word	0x200058bc
   272ac:	3b9aca00 	.word	0x3b9aca00
   272b0:	026259ff 	.word	0x026259ff
   272b4:	01c9c37f 	.word	0x01c9c37f
   272b8:	20003360 	.word	0x20003360
   272bc:	00039695 	.word	0x00039695
   272c0:	00052f80 	.word	0x00052f80
   272c4:	00053060 	.word	0x00053060
   272c8:	00052a70 	.word	0x00052a70
   272cc:	1afd498d 	.word	0x1afd498d
   272d0:	0003e1e5 	.word	0x0003e1e5
   272d4:	0003e3d1 	.word	0x0003e3d1
   272d8:	0003963d 	.word	0x0003963d
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
   272dc:	f8df 8320 	ldr.w	r8, [pc, #800]	; 27600 <event_conn_upd_prep+0x628>
		rx = ll_pdu_rx_alloc_peek(1);
   272e0:	2001      	movs	r0, #1
   272e2:	f010 fc2b 	bl	37b3c <ll_pdu_rx_alloc_peek>
		if (!rx) {
   272e6:	4606      	mov	r6, r0
   272e8:	2800      	cmp	r0, #0
   272ea:	f000 81b0 	beq.w	2764e <event_conn_upd_prep+0x676>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   272ee:	48c5      	ldr	r0, [pc, #788]	; (27604 <event_conn_upd_prep+0x62c>)
   272f0:	f00c fd9a 	bl	33e28 <mem_acquire>
		if (!tx) {
   272f4:	4605      	mov	r5, r0
   272f6:	2800      	cmp	r0, #0
   272f8:	f000 81a9 	beq.w	2764e <event_conn_upd_prep+0x676>
	if (!conn_upd_curr) {
   272fc:	4bc2      	ldr	r3, [pc, #776]	; (27608 <event_conn_upd_prep+0x630>)
   272fe:	681a      	ldr	r2, [r3, #0]
   27300:	2a00      	cmp	r2, #0
   27302:	f000 8168 	beq.w	275d6 <event_conn_upd_prep+0x5fe>
		(void)ll_pdu_rx_alloc();
   27306:	f010 fc39 	bl	37b7c <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
   2730a:	6833      	ldr	r3, [r6, #0]
   2730c:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   27310:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   27312:	792b      	ldrb	r3, [r5, #4]
		conn->llcp_rx = rx;
   27314:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   27318:	f043 0303 	orr.w	r3, r3, #3
   2731c:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
   2731e:	230c      	movs	r3, #12
   27320:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   27322:	2300      	movs	r3, #0
   27324:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
   27326:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   2732a:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
   2732c:	4ab7      	ldr	r2, [pc, #732]	; (2760c <event_conn_upd_prep+0x634>)
   2732e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   27332:	fba2 2303 	umull	r2, r3, r2, r3
   27336:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
   27338:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
   2733c:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
   27340:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
   27344:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   27348:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
   2734c:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   27350:	f8a5 300f 	strh.w	r3, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
   27354:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   27358:	f8c4 70fc 	str.w	r7, [r4, #252]	; 0xfc
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
   2735c:	2203      	movs	r2, #3
   2735e:	f362 0302 	bfi	r3, r2, #0, #3
   27362:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   27366:	68a3      	ldr	r3, [r4, #8]
   27368:	2b00      	cmp	r3, #0
   2736a:	da0a      	bge.n	27382 <event_conn_upd_prep+0x3aa>
			uint32_t ticks_prepare_to_start =
   2736c:	68e1      	ldr	r1, [r4, #12]
   2736e:	6862      	ldr	r2, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
   27370:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
   27374:	4291      	cmp	r1, r2
   27376:	bf2c      	ite	cs
   27378:	187f      	addcs	r7, r7, r1
   2737a:	18bf      	addcc	r7, r7, r2
   2737c:	1aff      	subs	r7, r7, r3
   2737e:	f8c4 70fc 	str.w	r7, [r4, #252]	; 0xfc
		mfy_sched_offset->fp = fp_mfy_select_or_use;
   27382:	4ba3      	ldr	r3, [pc, #652]	; (27610 <event_conn_upd_prep+0x638>)
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   27384:	2201      	movs	r2, #1
		win_offs = &pdu_ctrl_tx->llctrl.conn_update_ind.win_offset;
   27386:	3509      	adds	r5, #9
		conn->llcp.conn_upd.pdu_win_offset = win_offs;
   27388:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   2738c:	2102      	movs	r1, #2
   2738e:	4610      	mov	r0, r2
		mfy_sched_offset->param = (void *)conn;
   27390:	e9c3 4802 	strd	r4, r8, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   27394:	f00c fe22 	bl	33fdc <mayfly_enqueue>
		LL_ASSERT(!retval);
   27398:	b160      	cbz	r0, 273b4 <event_conn_upd_prep+0x3dc>
   2739a:	4a9e      	ldr	r2, [pc, #632]	; (27614 <event_conn_upd_prep+0x63c>)
   2739c:	499e      	ldr	r1, [pc, #632]	; (27618 <event_conn_upd_prep+0x640>)
   2739e:	489f      	ldr	r0, [pc, #636]	; (2761c <event_conn_upd_prep+0x644>)
   273a0:	f640 3373 	movw	r3, #2931	; 0xb73
   273a4:	f022 fb29 	bl	499fa <printk>
   273a8:	4040      	eors	r0, r0
   273aa:	f380 8811 	msr	BASEPRI, r0
   273ae:	f04f 0003 	mov.w	r0, #3
   273b2:	df02      	svc	2
			return -EINPROGRESS;
   273b4:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
   273b8:	b00b      	add	sp, #44	; 0x2c
   273ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   273be:	fb09 1113 	mls	r1, r9, r3, r1
   273c2:	4897      	ldr	r0, [pc, #604]	; (27620 <event_conn_upd_prep+0x648>)
   273c4:	f240 43e2 	movw	r3, #1250	; 0x4e2
   273c8:	b289      	uxth	r1, r1
   273ca:	fb03 f101 	mul.w	r1, r3, r1
   273ce:	fba1 0100 	umull	r0, r1, r1, r0
   273d2:	a389      	add	r3, pc, #548	; (adr r3, 275f8 <event_conn_upd_prep+0x620>)
   273d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   273d8:	f7fe fe92 	bl	26100 <__aeabi_uldivmod>
   273dc:	1a3f      	subs	r7, r7, r0
   273de:	e699      	b.n	27114 <event_conn_upd_prep+0x13c>
		LL_ASSERT(rx && rx->hdr.link);
   273e0:	4a8c      	ldr	r2, [pc, #560]	; (27614 <event_conn_upd_prep+0x63c>)
   273e2:	4990      	ldr	r1, [pc, #576]	; (27624 <event_conn_upd_prep+0x64c>)
   273e4:	488d      	ldr	r0, [pc, #564]	; (2761c <event_conn_upd_prep+0x644>)
   273e6:	f44f 6342 	mov.w	r3, #3104	; 0xc20
   273ea:	f022 fb06 	bl	499fa <printk>
   273ee:	4040      	eors	r0, r0
   273f0:	f380 8811 	msr	BASEPRI, r0
   273f4:	f04f 0003 	mov.w	r0, #3
   273f8:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   273fa:	f8d9 0000 	ldr.w	r0, [r9]
   273fe:	e63d      	b.n	2707c <event_conn_upd_prep+0xa4>
		switch (conn->llcp_cu.state) {
   27400:	f06f 000f 	mvn.w	r0, #15
}
   27404:	b00b      	add	sp, #44	; 0x2c
   27406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (conn->llcp_cu.state) {
   2740a:	f8df 821c 	ldr.w	r8, [pc, #540]	; 27628 <event_conn_upd_prep+0x650>
   2740e:	e767      	b.n	272e0 <event_conn_upd_prep+0x308>
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
   27410:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
	    conn->tx_head &&
   27414:	f8d0 11d4 	ldr.w	r1, [r0, #468]	; 0x1d4
			conn->llcp_ack = conn->llcp_req;
   27418:	f890 00f0 	ldrb.w	r0, [r0, #240]	; 0xf0
   2741c:	f884 00f1 	strb.w	r0, [r4, #241]	; 0xf1
			conn->llcp_cu.ack = conn->llcp_cu.req;
   27420:	f894 0118 	ldrb.w	r0, [r4, #280]	; 0x118
	conn_upd_curr = NULL;
   27424:	4a78      	ldr	r2, [pc, #480]	; (27608 <event_conn_upd_prep+0x630>)
			conn->llcp_cu.ack = conn->llcp_cu.req;
   27426:	f884 0119 	strb.w	r0, [r4, #281]	; 0x119
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   2742a:	f894 0194 	ldrb.w	r0, [r4, #404]	; 0x194
   2742e:	f884 0195 	strb.w	r0, [r4, #405]	; 0x195
	conn_upd_curr = NULL;
   27432:	2000      	movs	r0, #0
   27434:	6010      	str	r0, [r2, #0]
		if (!conn->tx_ctrl) {
   27436:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
   2743a:	f1a3 0209 	sub.w	r2, r3, #9
	if (
   2743e:	2900      	cmp	r1, #0
   27440:	f000 8111 	beq.w	27666 <event_conn_upd_prep+0x68e>
	    !conn->llcp_enc.pause_tx &&
   27444:	f894 5176 	ldrb.w	r5, [r4, #374]	; 0x176
	    conn->tx_head &&
   27448:	07ad      	lsls	r5, r5, #30
   2744a:	f100 80f1 	bmi.w	27630 <event_conn_upd_prep+0x658>
	    !conn->llcp_phy.pause_tx &&
   2744e:	f894 51cf 	ldrb.w	r5, [r4, #463]	; 0x1cf
   27452:	07ef      	lsls	r7, r5, #31
   27454:	f100 80ec 	bmi.w	27630 <event_conn_upd_prep+0x658>
		if (conn->tx_head == conn->tx_data) {
   27458:	f8d4 51e0 	ldr.w	r5, [r4, #480]	; 0x1e0
   2745c:	42a9      	cmp	r1, r5
   2745e:	f000 811b 	beq.w	27698 <event_conn_upd_prep+0x6c0>
		} else if (!conn->tx_ctrl) {
   27462:	2800      	cmp	r0, #0
   27464:	f040 80e5 	bne.w	27632 <event_conn_upd_prep+0x65a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   27468:	7908      	ldrb	r0, [r1, #4]
   2746a:	f000 0003 	and.w	r0, r0, #3
   2746e:	2803      	cmp	r0, #3
   27470:	f000 8137 	beq.w	276e2 <event_conn_upd_prep+0x70a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   27474:	f8c4 11d8 	str.w	r1, [r4, #472]	; 0x1d8
   27478:	e0dd      	b.n	27636 <event_conn_upd_prep+0x65e>
						      conn->lll.latency + 6;
   2747a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   2747c:	f890 011a 	ldrb.w	r0, [r0, #282]	; 0x11a
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
   27480:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
	    conn->tx_head &&
   27484:	f8d4 51d4 	ldr.w	r5, [r4, #468]	; 0x1d4
						      conn->lll.latency + 6;
   27488:	3206      	adds	r2, #6
   2748a:	4411      	add	r1, r2
   2748c:	b289      	uxth	r1, r1
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   2748e:	f36f 0002 	bfc	r0, #0, #3
			conn->llcp.conn_upd.instant = event_counter +
   27492:	f8a4 10f4 	strh.w	r1, [r4, #244]	; 0xf4
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
   27496:	f1a3 0209 	sub.w	r2, r3, #9
			pdu_ctrl_tx->llctrl.conn_update_ind.instant =
   2749a:	8119      	strh	r1, [r3, #8]
		if (!conn->tx_ctrl) {
   2749c:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   274a0:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	if (
   274a4:	2d00      	cmp	r5, #0
   274a6:	f000 80d5 	beq.w	27654 <event_conn_upd_prep+0x67c>
	    !conn->llcp_enc.pause_tx &&
   274aa:	f894 0176 	ldrb.w	r0, [r4, #374]	; 0x176
	    conn->tx_head &&
   274ae:	0786      	lsls	r6, r0, #30
   274b0:	f100 8093 	bmi.w	275da <event_conn_upd_prep+0x602>
	    !conn->llcp_phy.pause_tx &&
   274b4:	f894 01cf 	ldrb.w	r0, [r4, #463]	; 0x1cf
   274b8:	07c0      	lsls	r0, r0, #31
   274ba:	f100 808e 	bmi.w	275da <event_conn_upd_prep+0x602>
		if (conn->tx_head == conn->tx_data) {
   274be:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
   274c2:	4285      	cmp	r5, r0
   274c4:	f000 80f6 	beq.w	276b4 <event_conn_upd_prep+0x6dc>
		} else if (!conn->tx_ctrl) {
   274c8:	2900      	cmp	r1, #0
   274ca:	f000 8102 	beq.w	276d2 <event_conn_upd_prep+0x6fa>
	tx->next = conn->tx_ctrl_last->next;
   274ce:	f8d4 51dc 	ldr.w	r5, [r4, #476]	; 0x1dc
   274d2:	6829      	ldr	r1, [r5, #0]
   274d4:	f843 1c09 	str.w	r1, [r3, #-9]
	conn->tx_ctrl_last->next = tx;
   274d8:	602a      	str	r2, [r5, #0]
	if (!tx->next) {
   274da:	f853 3c09 	ldr.w	r3, [r3, #-9]
	conn->tx_ctrl_last = tx;
   274de:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
	if (!tx->next) {
   274e2:	2b00      	cmp	r3, #0
   274e4:	f47f af66 	bne.w	273b4 <event_conn_upd_prep+0x3dc>
		conn->tx_data_last = tx;
   274e8:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
   274ec:	e762      	b.n	273b4 <event_conn_upd_prep+0x3dc>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   274ee:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   274f2:	2b00      	cmp	r3, #0
   274f4:	f43f ad98 	beq.w	27028 <event_conn_upd_prep+0x50>
			conn->periph.llcp_type = LLCP_NONE;
   274f8:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
   274fc:	e598      	b.n	27030 <event_conn_upd_prep+0x58>
		if ((conn->llcp_cu.interval != lll->interval) ||
   274fe:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
   27502:	ebbc 4f13 	cmp.w	ip, r3, lsr #16
   27506:	f47f adc6 	bne.w	27096 <event_conn_upd_prep+0xbe>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   2750a:	f240 4ce2 	movw	ip, #1250	; 0x4e2
   2750e:	fb0c f202 	mul.w	r2, ip, r2
   27512:	f242 7c10 	movw	ip, #10000	; 0x2710
   27516:	fb0c 2c01 	mla	ip, ip, r1, r2
   2751a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   2751e:	fbbc f2f2 	udiv	r2, ip, r2
		    (conn->llcp_cu.latency != lll->latency) ||
   27522:	f8b4 c0c2 	ldrh.w	ip, [r4, #194]	; 0xc2
   27526:	b292      	uxth	r2, r2
   27528:	4594      	cmp	ip, r2
   2752a:	f47f adb4 	bne.w	27096 <event_conn_upd_prep+0xbe>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   2752e:	2301      	movs	r3, #1
   27530:	e5bc      	b.n	270ac <event_conn_upd_prep+0xd4>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
   27532:	2201      	movs	r2, #1
   27534:	2102      	movs	r1, #2
   27536:	4610      	mov	r0, r2
   27538:	f00c fd1c 	bl	33f74 <mayfly_enable>
   2753c:	e6aa      	b.n	27294 <event_conn_upd_prep+0x2bc>
				lll->periph.window_widening_periodic_us *
   2753e:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->periph.window_widening_prepare_us -=
   27540:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   27542:	fb02 3318 	mls	r3, r2, r8, r3
   27546:	64a3      	str	r3, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
   27548:	f019 fa6e 	bl	40a28 <lll_clock_ppm_local_get>
   2754c:	4605      	mov	r5, r0
   2754e:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   27552:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 27620 <event_conn_upd_prep+0x648>
				ceiling_fraction(((lll_clock_ppm_local_get() +
   27556:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   2755a:	f019 fa67 	bl	40a2c <lll_clock_ppm_get>
   2755e:	4405      	add	r5, r0
   27560:	fb06 f505 	mul.w	r5, r6, r5
   27564:	4b31      	ldr	r3, [pc, #196]	; (2762c <event_conn_upd_prep+0x654>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
   27566:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
				ceiling_fraction(((lll_clock_ppm_local_get() +
   2756a:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
   2756e:	f205 253f 	addw	r5, r5, #575	; 0x23f
   27572:	fba3 3505 	umull	r3, r5, r3, r5
   27576:	0cad      	lsrs	r5, r5, #18
			lll->periph.window_widening_prepare_us +=
   27578:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			lll->periph.window_widening_periodic_us =
   2757a:	6425      	str	r5, [r4, #64]	; 0x40
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
   2757c:	fb0b f202 	mul.w	r2, fp, r2
				lll->periph.window_widening_periodic_us *
   27580:	fb05 f00a 	mul.w	r0, r5, sl
			lll->periph.window_size_prepare_us =
   27584:	6522      	str	r2, [r4, #80]	; 0x50
				(conn_interval_us >> 1) - EVENT_IFS_US;
   27586:	0872      	lsrs	r2, r6, #1
			lll->periph.window_widening_prepare_us +=
   27588:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
   2758a:	3a96      	subs	r2, #150	; 0x96
   2758c:	4293      	cmp	r3, r2
   2758e:	bf28      	it	cs
   27590:	4613      	movcs	r3, r2
   27592:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
			conn->periph.ticks_to_offset = 0U;
   27596:	2300      	movs	r3, #0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   27598:	fba0 0108 	umull	r0, r1, r0, r8
			conn->periph.ticks_to_offset = 0U;
   2759c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   275a0:	a315      	add	r3, pc, #84	; (adr r3, 275f8 <event_conn_upd_prep+0x620>)
   275a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   275a6:	f7fe fdab 	bl	26100 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   275aa:	4b18      	ldr	r3, [pc, #96]	; (2760c <event_conn_upd_prep+0x634>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   275ac:	1a3f      	subs	r7, r7, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   275ae:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   275b2:	fba3 3000 	umull	r3, r0, r3, r0
   275b6:	0a80      	lsrs	r0, r0, #10
   275b8:	fb0b f000 	mul.w	r0, fp, r0
   275bc:	fba0 0108 	umull	r0, r1, r0, r8
   275c0:	a30d      	add	r3, pc, #52	; (adr r3, 275f8 <event_conn_upd_prep+0x620>)
   275c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   275c6:	f7fe fd9b 	bl	26100 <__aeabi_uldivmod>
			periodic_us -= lll->periph.window_widening_periodic_us;
   275ca:	1b75      	subs	r5, r6, r5
		lll->interval = conn->llcp_cu.interval;
   275cc:	f8b4 911c 	ldrh.w	r9, [r4, #284]	; 0x11c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   275d0:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
			periodic_us -= lll->periph.window_widening_periodic_us;
   275d4:	e5bb      	b.n	2714e <event_conn_upd_prep+0x176>
		conn_upd_curr = conn;
   275d6:	601c      	str	r4, [r3, #0]
   275d8:	e695      	b.n	27306 <event_conn_upd_prep+0x32e>
		if (!conn->tx_ctrl) {
   275da:	2900      	cmp	r1, #0
   275dc:	d04e      	beq.n	2767c <event_conn_upd_prep+0x6a4>
	tx->next = conn->tx_ctrl_last->next;
   275de:	f8d4 11dc 	ldr.w	r1, [r4, #476]	; 0x1dc
   275e2:	6808      	ldr	r0, [r1, #0]
   275e4:	f843 0c09 	str.w	r0, [r3, #-9]
	conn->tx_ctrl_last->next = tx;
   275e8:	600a      	str	r2, [r1, #0]
	if (!tx->next) {
   275ea:	f853 3c09 	ldr.w	r3, [r3, #-9]
	conn->tx_ctrl_last = tx;
   275ee:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
}
   275f2:	e776      	b.n	274e2 <event_conn_upd_prep+0x50a>
   275f4:	f3af 8000 	nop.w
   275f8:	1afd498d 	.word	0x1afd498d
   275fc:	00000007 	.word	0x00000007
   27600:	0003ea35 	.word	0x0003ea35
   27604:	200059a0 	.word	0x200059a0
   27608:	200058bc 	.word	0x200058bc
   2760c:	d1b71759 	.word	0xd1b71759
   27610:	20000c24 	.word	0x20000c24
   27614:	00052f80 	.word	0x00052f80
   27618:	00052d74 	.word	0x00052d74
   2761c:	00052a70 	.word	0x00052a70
   27620:	3b9aca00 	.word	0x3b9aca00
   27624:	0005304c 	.word	0x0005304c
   27628:	00028501 	.word	0x00028501
   2762c:	431bde83 	.word	0x431bde83
		if (!conn->tx_ctrl) {
   27630:	b358      	cbz	r0, 2768a <event_conn_upd_prep+0x6b2>
	tx->next = conn->tx_ctrl_last->next;
   27632:	f8d4 11dc 	ldr.w	r1, [r4, #476]	; 0x1dc
   27636:	6808      	ldr	r0, [r1, #0]
   27638:	f843 0c09 	str.w	r0, [r3, #-9]
	conn->tx_ctrl_last->next = tx;
   2763c:	600a      	str	r2, [r1, #0]
	if (!tx->next) {
   2763e:	f853 3c09 	ldr.w	r3, [r3, #-9]
	conn->tx_ctrl_last = tx;
   27642:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
	if (!tx->next) {
   27646:	b1b3      	cbz	r3, 27676 <event_conn_upd_prep+0x69e>
			return -ECANCELED;
   27648:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2764c:	e623      	b.n	27296 <event_conn_upd_prep+0x2be>
			return -ENOBUFS;
   2764e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27652:	e620      	b.n	27296 <event_conn_upd_prep+0x2be>
		if (!conn->tx_ctrl) {
   27654:	2900      	cmp	r1, #0
   27656:	d1c2      	bne.n	275de <event_conn_upd_prep+0x606>
			tx->next = conn->tx_head;
   27658:	f843 1c09 	str.w	r1, [r3, #-9]
				conn->tx_ctrl = tx;
   2765c:	e9c4 2275 	strd	r2, r2, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   27660:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
	if (!tx->next) {
   27664:	e740      	b.n	274e8 <event_conn_upd_prep+0x510>
		if (!conn->tx_ctrl) {
   27666:	2800      	cmp	r0, #0
   27668:	d1e3      	bne.n	27632 <event_conn_upd_prep+0x65a>
			tx->next = conn->tx_head;
   2766a:	f843 0c09 	str.w	r0, [r3, #-9]
				conn->tx_ctrl = tx;
   2766e:	e9c4 2275 	strd	r2, r2, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   27672:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
		conn->tx_data_last = tx;
   27676:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
   2767a:	e7e5      	b.n	27648 <event_conn_upd_prep+0x670>
			tx->next = conn->tx_head;
   2767c:	f843 5c09 	str.w	r5, [r3, #-9]
				conn->tx_ctrl = tx;
   27680:	e9c4 2275 	strd	r2, r2, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   27684:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
	if (!tx->next) {
   27688:	e694      	b.n	273b4 <event_conn_upd_prep+0x3dc>
			tx->next = conn->tx_head;
   2768a:	f843 1c09 	str.w	r1, [r3, #-9]
				conn->tx_ctrl = tx;
   2768e:	e9c4 2275 	strd	r2, r2, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   27692:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
	if (!tx->next) {
   27696:	e7d7      	b.n	27648 <event_conn_upd_prep+0x670>
			conn->tx_data = conn->tx_data->next;
   27698:	680d      	ldr	r5, [r1, #0]
   2769a:	f8c4 51e0 	str.w	r5, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   2769e:	2800      	cmp	r0, #0
   276a0:	d1c7      	bne.n	27632 <event_conn_upd_prep+0x65a>
			tx->next = conn->tx_head->next;
   276a2:	6808      	ldr	r0, [r1, #0]
   276a4:	f843 0c09 	str.w	r0, [r3, #-9]
			conn->tx_head->next = tx;
   276a8:	600a      	str	r2, [r1, #0]
	if (!tx->next) {
   276aa:	f853 3c09 	ldr.w	r3, [r3, #-9]
				conn->tx_ctrl_last = tx;
   276ae:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   276b2:	e7c8      	b.n	27646 <event_conn_upd_prep+0x66e>
			conn->tx_data = conn->tx_data->next;
   276b4:	6828      	ldr	r0, [r5, #0]
   276b6:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   276ba:	2900      	cmp	r1, #0
   276bc:	f47f af07 	bne.w	274ce <event_conn_upd_prep+0x4f6>
			tx->next = conn->tx_head->next;
   276c0:	6829      	ldr	r1, [r5, #0]
   276c2:	f843 1c09 	str.w	r1, [r3, #-9]
			conn->tx_head->next = tx;
   276c6:	602a      	str	r2, [r5, #0]
	if (!tx->next) {
   276c8:	f853 3c09 	ldr.w	r3, [r3, #-9]
				conn->tx_ctrl_last = tx;
   276cc:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   276d0:	e707      	b.n	274e2 <event_conn_upd_prep+0x50a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   276d2:	7929      	ldrb	r1, [r5, #4]
   276d4:	f001 0103 	and.w	r1, r1, #3
   276d8:	2903      	cmp	r1, #3
   276da:	d009      	beq.n	276f0 <event_conn_upd_prep+0x718>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   276dc:	f8c4 51d8 	str.w	r5, [r4, #472]	; 0x1d8
   276e0:	e6f7      	b.n	274d2 <event_conn_upd_prep+0x4fa>
	    ((pdu_data_tx->llctrl.opcode !=
   276e2:	79c8      	ldrb	r0, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   276e4:	2803      	cmp	r0, #3
   276e6:	d0dc      	beq.n	276a2 <event_conn_upd_prep+0x6ca>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   276e8:	280a      	cmp	r0, #10
   276ea:	f47f aec3 	bne.w	27474 <event_conn_upd_prep+0x49c>
   276ee:	e7d8      	b.n	276a2 <event_conn_upd_prep+0x6ca>
	    ((pdu_data_tx->llctrl.opcode !=
   276f0:	79e9      	ldrb	r1, [r5, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   276f2:	2903      	cmp	r1, #3
   276f4:	d0e4      	beq.n	276c0 <event_conn_upd_prep+0x6e8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   276f6:	290a      	cmp	r1, #10
   276f8:	d1f0      	bne.n	276dc <event_conn_upd_prep+0x704>
   276fa:	e7e1      	b.n	276c0 <event_conn_upd_prep+0x6e8>
			LL_ASSERT(0);
   276fc:	4a07      	ldr	r2, [pc, #28]	; (2771c <event_conn_upd_prep+0x744>)
   276fe:	4908      	ldr	r1, [pc, #32]	; (27720 <event_conn_upd_prep+0x748>)
   27700:	4808      	ldr	r0, [pc, #32]	; (27724 <event_conn_upd_prep+0x74c>)
   27702:	f640 33c7 	movw	r3, #3015	; 0xbc7
   27706:	f022 f978 	bl	499fa <printk>
   2770a:	4040      	eors	r0, r0
   2770c:	f380 8811 	msr	BASEPRI, r0
   27710:	f04f 0003 	mov.w	r0, #3
   27714:	df02      	svc	2
		void (*fp_mfy_select_or_use)(void *) = NULL;
   27716:	f04f 0800 	mov.w	r8, #0
			break;
   2771a:	e5e1      	b.n	272e0 <event_conn_upd_prep+0x308>
   2771c:	00052f80 	.word	0x00052f80
   27720:	00052ad0 	.word	0x00052ad0
   27724:	00052a70 	.word	0x00052a70

00027728 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
   27728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   2772c:	680b      	ldr	r3, [r1, #0]
	conn = lll->hdr.parent;
   2772e:	f8d2 b000 	ldr.w	fp, [r2]
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   27732:	681b      	ldr	r3, [r3, #0]
{
   27734:	b097      	sub	sp, #92	; 0x5c
   27736:	468a      	mov	sl, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   27738:	930b      	str	r3, [sp, #44]	; 0x2c

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
   2773a:	7f03      	ldrb	r3, [r0, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   2773c:	f100 011e 	add.w	r1, r0, #30
	peer_addr_type = pdu_adv->tx_addr;
   27740:	f3c3 1380 	ubfx	r3, r3, #6, #1
{
   27744:	4604      	mov	r4, r0
   27746:	4615      	mov	r5, r2
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   27748:	a814      	add	r0, sp, #80	; 0x50
   2774a:	2206      	movs	r2, #6
	peer_addr_type = pdu_adv->tx_addr;
   2774c:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   27750:	f024 fa82 	bl	4bc58 <memcpy>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
   27754:	f89a 0011 	ldrb.w	r0, [sl, #17]
   27758:	900d      	str	r0, [sp, #52]	; 0x34

	if (rl_idx != FILTER_IDX_NONE) {
   2775a:	28ff      	cmp	r0, #255	; 0xff
		/* Get identity address */
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
   2775c:	f10d 0848 	add.w	r8, sp, #72	; 0x48
	if (rl_idx != FILTER_IDX_NONE) {
   27760:	f000 8083 	beq.w	2786a <ull_periph_setup+0x142>
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
   27764:	4642      	mov	r2, r8
   27766:	f10d 0147 	add.w	r1, sp, #71	; 0x47
   2776a:	f017 fc1b 	bl	3efa4 <ll_rl_id_addr_get>
		/* Mark it as identity address from RPA (0x02, 0x03) */
		peer_addr_type += 2;
   2776e:	f89d 6047 	ldrb.w	r6, [sp, #71]	; 0x47
   27772:	3602      	adds	r6, #2
   27774:	b2f6      	uxtb	r6, r6
   27776:	f88d 6047 	strb.w	r6, [sp, #71]	; 0x47
	link = rx->link;

#if defined(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)
	const uint8_t peer_id_addr_type = (peer_addr_type & 0x01);
	const uint8_t own_id_addr_type = pdu_adv->rx_addr;
	const uint8_t *own_id_addr = adv->own_id_addr;
   2777a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	const uint8_t own_id_addr_type = pdu_adv->rx_addr;
   2777c:	7f27      	ldrb	r7, [r4, #28]
	link = rx->link;
   2777e:	f8d4 c000 	ldr.w	ip, [r4]
   27782:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
	const uint8_t *own_id_addr = adv->own_id_addr;
   27786:	f103 0971 	add.w	r9, r3, #113	; 0x71
	const uint8_t own_id_addr_type = pdu_adv->rx_addr;
   2778a:	09ff      	lsrs	r7, r7, #7

	/* Do not connect twice to the same peer */
	if (ull_conn_peer_connected(own_id_addr_type, own_id_addr,
   2778c:	4643      	mov	r3, r8
   2778e:	f006 0201 	and.w	r2, r6, #1
   27792:	4649      	mov	r1, r9
   27794:	4638      	mov	r0, r7
   27796:	f012 ff6f 	bl	3a678 <ull_conn_peer_connected>
   2779a:	2800      	cmp	r0, #0
   2779c:	d14b      	bne.n	27836 <ull_periph_setup+0x10e>

		return;
	}

	/* Remember peer and own identity address */
	conn->peer_id_addr_type = peer_id_addr_type;
   2779e:	f89b 20d6 	ldrb.w	r2, [fp, #214]	; 0xd6
   277a2:	900e      	str	r0, [sp, #56]	; 0x38
   277a4:	f366 0241 	bfi	r2, r6, #1, #1
   277a8:	f88b 20d6 	strb.w	r2, [fp, #214]	; 0xd6
	(void)memcpy(conn->peer_id_addr, peer_id_addr,
   277ac:	4641      	mov	r1, r8
   277ae:	2206      	movs	r2, #6
   277b0:	f10b 00dd 	add.w	r0, fp, #221	; 0xdd
   277b4:	f024 fa50 	bl	4bc58 <memcpy>
		     sizeof(conn->peer_id_addr));
	conn->own_id_addr_type = own_id_addr_type;
   277b8:	f89b 20d6 	ldrb.w	r2, [fp, #214]	; 0xd6
   277bc:	f367 0200 	bfi	r2, r7, #0, #1
	(void)memcpy(conn->own_id_addr, own_id_addr,
   277c0:	4649      	mov	r1, r9
	conn->own_id_addr_type = own_id_addr_type;
   277c2:	f88b 20d6 	strb.w	r2, [fp, #214]	; 0xd6
	(void)memcpy(conn->own_id_addr, own_id_addr,
   277c6:	f10b 00d7 	add.w	r0, fp, #215	; 0xd7
   277ca:	2206      	movs	r2, #6
   277cc:	f024 fa44 	bl	4bc58 <memcpy>
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   277d0:	1d2f      	adds	r7, r5, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   277d2:	2203      	movs	r2, #3
   277d4:	f104 012e 	add.w	r1, r4, #46	; 0x2e
   277d8:	f105 0008 	add.w	r0, r5, #8
   277dc:	f024 fa3c 	bl	4bc58 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   277e0:	f105 0618 	add.w	r6, r5, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   277e4:	2204      	movs	r2, #4
   277e6:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   277ea:	4638      	mov	r0, r7
   277ec:	f024 fa34 	bl	4bc58 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   277f0:	2205      	movs	r2, #5
   277f2:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   277f6:	4630      	mov	r0, r6
   277f8:	f024 fa2e 	bl	4bc58 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   277fc:	4630      	mov	r0, r6
   277fe:	2105      	movs	r1, #5
   27800:	f00c fcf2 	bl	341e8 <util_ones_count_get>
   27804:	7f6a      	ldrb	r2, [r5, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   27806:	f894 603f 	ldrb.w	r6, [r4, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   2780a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2780e:	f360 0205 	bfi	r2, r0, #0, #6
   27812:	776a      	strb	r2, [r5, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   27814:	f3c6 0204 	ubfx	r2, r6, #0, #5
   27818:	77aa      	strb	r2, [r5, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   2781a:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
   2781c:	81e9      	strh	r1, [r5, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
   2781e:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   27820:	b289      	uxth	r1, r1
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   27822:	f006 021f 	and.w	r2, r6, #31
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
   27826:	d906      	bls.n	27836 <ull_periph_setup+0x10e>
   27828:	321b      	adds	r2, #27
   2782a:	f002 021f 	and.w	r2, r2, #31
   2782e:	2a0b      	cmp	r2, #11
   27830:	d801      	bhi.n	27836 <ull_periph_setup+0x10e>
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
   27832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27834:	bb09      	cbnz	r1, 2787a <ull_periph_setup+0x152>

static void invalid_release(struct ull_hdr *hdr, struct lll_conn *lll,
			    memq_link_t *link, struct node_rx_hdr *rx)
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;
   27836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		struct node_rx_pdu *rx_csa;

		/* pick the rx node instance stored within the
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;
   27838:	68e6      	ldr	r6, [r4, #12]

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
   2783a:	980c      	ldr	r0, [sp, #48]	; 0x30
	hdr->disabled_cb = NULL;
   2783c:	2200      	movs	r2, #0
   2783e:	615a      	str	r2, [r3, #20]
	lll->periph.initiated = 0U;
   27840:	f895 3020 	ldrb.w	r3, [r5, #32]
	rx->type = NODE_RX_TYPE_RELEASE;
   27844:	2701      	movs	r7, #1
	lll->periph.initiated = 0U;
   27846:	f362 0300 	bfi	r3, r2, #0, #1
   2784a:	f885 3020 	strb.w	r3, [r5, #32]
		ll_rx_put(link, rx);
   2784e:	4621      	mov	r1, r4
	rx->type = NODE_RX_TYPE_RELEASE;
   27850:	7127      	strb	r7, [r4, #4]
		ll_rx_put(link, rx);
   27852:	f010 f963 	bl	37b1c <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
   27856:	6830      	ldr	r0, [r6, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
   27858:	7137      	strb	r7, [r6, #4]
	ll_rx_put(link, rx);
   2785a:	4631      	mov	r1, r6
   2785c:	f010 f95e 	bl	37b1c <ll_rx_put>
	ll_rx_sched();
   27860:	f010 f966 	bl	37b30 <ll_rx_sched>
}
   27864:	b017      	add	sp, #92	; 0x5c
   27866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
   2786a:	2206      	movs	r2, #6
   2786c:	a914      	add	r1, sp, #80	; 0x50
   2786e:	4640      	mov	r0, r8
   27870:	f024 f9f2 	bl	4bc58 <memcpy>
	const uint8_t peer_id_addr_type = (peer_addr_type & 0x01);
   27874:	f89d 6047 	ldrb.w	r6, [sp, #71]	; 0x47
   27878:	e77f      	b.n	2777a <ull_periph_setup+0x52>
	((struct lll_adv *)ftr->param)->conn = NULL;
   2787a:	f8da 2000 	ldr.w	r2, [sl]
   2787e:	6053      	str	r3, [r2, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
   27880:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
   27884:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   27888:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2788c:	822b      	strh	r3, [r5, #16]
	conn->periph.sca = pdu_adv->connect_ind.sca;
   2788e:	f89b 30e4 	ldrb.w	r3, [fp, #228]	; 0xe4
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
   27892:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   27894:	920f      	str	r2, [sp, #60]	; 0x3c
	conn->periph.sca = pdu_adv->connect_ind.sca;
   27896:	0976      	lsrs	r6, r6, #5
   27898:	f366 03c5 	bfi	r3, r6, #3, #3
   2789c:	f88b 30e4 	strb.w	r3, [fp, #228]	; 0xe4
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   278a0:	f240 46e2 	movw	r6, #1250	; 0x4e2
   278a4:	fb06 f901 	mul.w	r9, r6, r1
		ceiling_fraction(((lll_clock_ppm_local_get() +
   278a8:	f019 f8be 	bl	40a28 <lll_clock_ppm_local_get>
   278ac:	900e      	str	r0, [sp, #56]	; 0x38
   278ae:	f89b 00e4 	ldrb.w	r0, [fp, #228]	; 0xe4
   278b2:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   278b6:	f019 f8b9 	bl	40a2c <lll_clock_ppm_get>
   278ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   278bc:	4ac0      	ldr	r2, [pc, #768]	; (27bc0 <ull_periph_setup+0x498>)
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   278be:	8a29      	ldrh	r1, [r5, #16]
		ceiling_fraction(((lll_clock_ppm_local_get() +
   278c0:	4403      	add	r3, r0
   278c2:	fb09 f303 	mul.w	r3, r9, r3
   278c6:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   278ca:	f203 233f 	addw	r3, r3, #575	; 0x23f
   278ce:	fba2 2303 	umull	r2, r3, r2, r3
   278d2:	0c9b      	lsrs	r3, r3, #18
	lll->periph.window_widening_periodic_us =
   278d4:	626b      	str	r3, [r5, #36]	; 0x24
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
   278d6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   278da:	4aba      	ldr	r2, [pc, #744]	; (27bc4 <ull_periph_setup+0x49c>)
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
   278dc:	fb06 f303 	mul.w	r3, r6, r3
   278e0:	63ab      	str	r3, [r5, #56]	; 0x38
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   278e2:	ea4f 0359 	mov.w	r3, r9, lsr #1
   278e6:	3b96      	subs	r3, #150	; 0x96
   278e8:	62ab      	str	r3, [r5, #40]	; 0x28
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   278ea:	8f26      	ldrh	r6, [r4, #56]	; 0x38
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   278ec:	4bb6      	ldr	r3, [pc, #728]	; (27bc8 <ull_periph_setup+0x4a0>)
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   278ee:	f242 7010 	movw	r0, #10000	; 0x2710
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   278f2:	444a      	add	r2, r9
   278f4:	fbb2 f2f9 	udiv	r2, r2, r9
   278f8:	f8ab 20c6 	strh.w	r2, [fp, #198]	; 0xc6
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   278fc:	b2b2      	uxth	r2, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   278fe:	fb00 9202 	mla	r2, r0, r2, r9
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27902:	444b      	add	r3, r9
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   27904:	3a01      	subs	r2, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27906:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   27908:	fbb2 f2f9 	udiv	r2, r2, r9
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   2790c:	fbb3 f3f9 	udiv	r3, r3, r9
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   27910:	f8ab 20c2 	strh.w	r2, [fp, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27914:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27916:	4282      	cmp	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27918:	f8ab 20ce 	strh.w	r2, [fp, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   2791c:	dd04      	ble.n	27928 <ull_periph_setup+0x200>
   2791e:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
   27922:	31fa      	adds	r1, #250	; 0xfa
   27924:	440a      	add	r2, r1
   27926:	b292      	uxth	r2, r2
   27928:	f8ab 20ca 	strh.w	r2, [fp, #202]	; 0xca
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
   2792c:	4639      	mov	r1, r7
   2792e:	2204      	movs	r2, #4
   27930:	f10b 00e8 	add.w	r0, fp, #232	; 0xe8
   27934:	f024 f990 	bl	4bc58 <memcpy>
		chan_sel = pdu_adv->chan_sel;
   27938:	4623      	mov	r3, r4
   2793a:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
   2793e:	f3c2 1240 	ubfx	r2, r2, #5, #1
   27942:	920e      	str	r2, [sp, #56]	; 0x38
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   27944:	07da      	lsls	r2, r3, #31
   27946:	f100 8101 	bmi.w	27b4c <ull_periph_setup+0x424>
	cc->status = 0U;
   2794a:	f44f 7380 	mov.w	r3, #256	; 0x100
   2794e:	83a3      	strh	r3, [r4, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
   27950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27952:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
   27956:	f018 f8f9 	bl	3fb4c <ull_filter_lll_lrpa_used>
   2795a:	4601      	mov	r1, r0
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
   2795c:	2206      	movs	r2, #6
   2795e:	f104 002b 	add.w	r0, r4, #43	; 0x2b
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
   27962:	2900      	cmp	r1, #0
   27964:	f000 80ea 	beq.w	27b3c <ull_periph_setup+0x414>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
   27968:	f104 0124 	add.w	r1, r4, #36	; 0x24
   2796c:	f024 f974 	bl	4bc58 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
   27970:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   27972:	2bff      	cmp	r3, #255	; 0xff
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
   27974:	f104 0025 	add.w	r0, r4, #37	; 0x25
	if (rl_idx != FILTER_IDX_NONE) {
   27978:	f000 80e3 	beq.w	27b42 <ull_periph_setup+0x41a>
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
   2797c:	a914      	add	r1, sp, #80	; 0x50
   2797e:	2206      	movs	r2, #6
   27980:	f024 f96a 	bl	4bc58 <memcpy>
	cc->peer_addr_type = peer_addr_type;
   27984:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   27988:	77a3      	strb	r3, [r4, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
   2798a:	4641      	mov	r1, r8
   2798c:	2206      	movs	r2, #6
   2798e:	f104 001f 	add.w	r0, r4, #31
   27992:	f024 f961 	bl	4bc58 <memcpy>
	cc->interval = lll->interval;
   27996:	f8d5 300e 	ldr.w	r3, [r5, #14]
   2799a:	f8c4 3032 	str.w	r3, [r4, #50]	; 0x32
	cc->sca = conn->periph.sca;
   2799e:	f89b 30e4 	ldrb.w	r3, [fp, #228]	; 0xe4
	cc->timeout = timeout;
   279a2:	86e6      	strh	r6, [r4, #54]	; 0x36
	cc->sca = conn->periph.sca;
   279a4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   279a8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	lll->handle = ll_conn_handle_get(conn);
   279ac:	4658      	mov	r0, fp
   279ae:	f012 faf9 	bl	39fa4 <ll_conn_handle_get>
		ll_rx_put(link, rx);
   279b2:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
   279b4:	81a8      	strh	r0, [r5, #12]
	rx->handle = lll->handle;
   279b6:	80e0      	strh	r0, [r4, #6]
		rx_csa = (void *)ftr->extra;
   279b8:	f8da 4004 	ldr.w	r4, [sl, #4]
		ll_rx_put(link, rx);
   279bc:	980c      	ldr	r0, [sp, #48]	; 0x30
   279be:	f010 f8ad 	bl	37b1c <ll_rx_put>
		rx->handle = lll->handle;
   279c2:	89ab      	ldrh	r3, [r5, #12]
   279c4:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   279c6:	231b      	movs	r3, #27
   279c8:	7123      	strb	r3, [r4, #4]
		if (chan_sel) {
   279ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		link = rx->link;
   279cc:	f8d4 8000 	ldr.w	r8, [r4]
		if (chan_sel) {
   279d0:	2b00      	cmp	r3, #0
   279d2:	f040 80d0 	bne.w	27b76 <ull_periph_setup+0x44e>
   279d6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
			cs->csa = 0x00;
   279d8:	7726      	strb	r6, [r4, #28]
	ll_rx_put(link, rx);
   279da:	4621      	mov	r1, r4
   279dc:	4640      	mov	r0, r8
   279de:	f010 f89d 	bl	37b1c <ll_rx_put>
	ll_rx_sched();
   279e2:	f010 f8a5 	bl	37b30 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   279e6:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
	max_tx_time = lll->max_tx_time;
   279ea:	f8b5 6040 	ldrh.w	r6, [r5, #64]	; 0x40
	max_rx_time = lll->max_rx_time;
   279ee:	f8b5 4042 	ldrh.w	r4, [r5, #66]	; 0x42
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   279f2:	2101      	movs	r1, #1
   279f4:	f000 0007 	and.w	r0, r0, #7
   279f8:	f018 fe1e 	bl	40638 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   279fc:	4434      	add	r4, r6
   279fe:	f504 74e1 	add.w	r4, r4, #450	; 0x1c2
   27a02:	1821      	adds	r1, r4, r0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   27a04:	4680      	mov	r8, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27a06:	4871      	ldr	r0, [pc, #452]	; (27bcc <ull_periph_setup+0x4a4>)
	conn->ull.ticks_active_to_start = 0U;
   27a08:	2700      	movs	r7, #0
	conn->ull.ticks_prepare_to_start =
   27a0a:	2331      	movs	r3, #49	; 0x31
   27a0c:	f8cb 3008 	str.w	r3, [fp, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27a10:	fba1 0100 	umull	r0, r1, r1, r0
   27a14:	a368      	add	r3, pc, #416	; (adr r3, 27bb8 <ull_periph_setup+0x490>)
   27a16:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_active_to_start = 0U;
   27a1a:	f8cb 7004 	str.w	r7, [fp, #4]
	conn->ull.ticks_preempt_to_start =
   27a1e:	f8cb 700c 	str.w	r7, [fp, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27a22:	f7fe fb6d 	bl	26100 <__aeabi_uldivmod>
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   27a26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	conn_offset_us = ftr->radio_end_us;
   27a28:	f8da 400c 	ldr.w	r4, [sl, #12]
	conn_interval_us -= lll->periph.window_widening_periodic_us;
   27a2c:	6a6e      	ldr	r6, [r5, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   27a2e:	f240 43e2 	movw	r3, #1250	; 0x4e2
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27a32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   27a36:	fb03 4402 	mla	r4, r3, r2, r4
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   27a3a:	2102      	movs	r1, #2
   27a3c:	463a      	mov	r2, r7
	conn->ull.ticks_slot =
   27a3e:	f8cb 0010 	str.w	r0, [fp, #16]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   27a42:	2001      	movs	r0, #1
   27a44:	f00c fa96 	bl	33f74 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
   27a48:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   27a4a:	4628      	mov	r0, r5
   27a4c:	f011 f970 	bl	38d30 <ull_adv_handle_get>
   27a50:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   27a52:	4b5f      	ldr	r3, [pc, #380]	; (27bd0 <ull_periph_setup+0x4a8>)
   27a54:	9500      	str	r5, [sp, #0]
   27a56:	b2d2      	uxtb	r2, r2
   27a58:	4638      	mov	r0, r7
   27a5a:	2101      	movs	r1, #1
   27a5c:	f00d fd90 	bl	35580 <ticker_stop>
	conn_offset_us -= EVENT_JITTER_US;
   27a60:	f204 44b2 	addw	r4, r4, #1202	; 0x4b2
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   27a64:	2801      	cmp	r0, #1
	conn_interval_us -= lll->periph.window_widening_periodic_us;
   27a66:	eba9 0606 	sub.w	r6, r9, r6
	conn_offset_us -= ready_delay_us;
   27a6a:	eba4 0408 	sub.w	r4, r4, r8
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   27a6e:	f000 808c 	beq.w	27b8a <ull_periph_setup+0x462>
	if (adv->lll.is_hdcd) {
   27a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27a74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   27a78:	07db      	lsls	r3, r3, #31
   27a7a:	d474      	bmi.n	27b66 <ull_periph_setup+0x43e>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27a7c:	4658      	mov	r0, fp
   27a7e:	f012 fa91 	bl	39fa4 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   27a82:	f8df 9148 	ldr.w	r9, [pc, #328]	; 27bcc <ull_periph_setup+0x4a4>
   27a86:	fba6 8609 	umull	r8, r6, r6, r9
   27a8a:	a34b      	add	r3, pc, #300	; (adr r3, 27bb8 <ull_periph_setup+0x490>)
   27a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27a90:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   27a92:	4631      	mov	r1, r6
   27a94:	4640      	mov	r0, r8
   27a96:	f7fe fb33 	bl	26100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27a9a:	f8da 3008 	ldr.w	r3, [sl, #8]
   27a9e:	4a4d      	ldr	r2, [pc, #308]	; (27bd4 <ull_periph_setup+0x4ac>)
   27aa0:	9207      	str	r2, [sp, #28]
   27aa2:	f1a3 0a3a 	sub.w	sl, r3, #58	; 0x3a
				     HAL_TICKER_REMAINDER(conn_interval_us),
   27aa6:	4b4c      	ldr	r3, [pc, #304]	; (27bd8 <ull_periph_setup+0x4b0>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27aa8:	f8cd b018 	str.w	fp, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   27aac:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
   27ab0:	fba7 3103 	umull	r3, r1, r7, r3
   27ab4:	ebb8 0003 	subs.w	r0, r8, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27ab8:	4b48      	ldr	r3, [pc, #288]	; (27bdc <ull_periph_setup+0x4b4>)
   27aba:	9305      	str	r3, [sp, #20]
   27abc:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   27ac0:	9308      	str	r3, [sp, #32]
   27ac2:	f8db 3010 	ldr.w	r3, [fp, #16]
   27ac6:	9304      	str	r3, [sp, #16]
   27ac8:	f04f 0300 	mov.w	r3, #0
   27acc:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   27ace:	f04f 0307 	mov.w	r3, #7
   27ad2:	fb03 1107 	mla	r1, r3, r7, r1
   27ad6:	eb66 0101 	sbc.w	r1, r6, r1
   27ada:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27ade:	2300      	movs	r3, #0
   27ae0:	f7fe fb0e 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   27ae4:	a334      	add	r3, pc, #208	; (adr r3, 27bb8 <ull_periph_setup+0x490>)
   27ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27aea:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   27aee:	fba4 0109 	umull	r0, r1, r4, r9
   27af2:	f7fe fb05 	bl	26100 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27af6:	3505      	adds	r5, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27af8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   27afc:	b2ed      	uxtb	r5, r5
   27afe:	9000      	str	r0, [sp, #0]
   27b00:	4653      	mov	r3, sl
   27b02:	462a      	mov	r2, r5
   27b04:	2101      	movs	r1, #1
   27b06:	2000      	movs	r0, #0
   27b08:	f00d fcae 	bl	35468 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   27b0c:	f030 0302 	bics.w	r3, r0, #2
   27b10:	d00c      	beq.n	27b2c <ull_periph_setup+0x404>
   27b12:	4a33      	ldr	r2, [pc, #204]	; (27be0 <ull_periph_setup+0x4b8>)
   27b14:	4933      	ldr	r1, [pc, #204]	; (27be4 <ull_periph_setup+0x4bc>)
   27b16:	4834      	ldr	r0, [pc, #208]	; (27be8 <ull_periph_setup+0x4c0>)
   27b18:	f240 13c9 	movw	r3, #457	; 0x1c9
   27b1c:	f021 ff6d 	bl	499fa <printk>
   27b20:	4040      	eors	r0, r0
   27b22:	f380 8811 	msr	BASEPRI, r0
   27b26:	f04f 0003 	mov.w	r0, #3
   27b2a:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
   27b2c:	2201      	movs	r2, #1
   27b2e:	2102      	movs	r1, #2
   27b30:	4610      	mov	r0, r2
   27b32:	f00c fa1f 	bl	33f74 <mayfly_enable>
}
   27b36:	b017      	add	sp, #92	; 0x5c
   27b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
   27b3c:	f024 f897 	bl	4bc6e <memset>
   27b40:	e716      	b.n	27970 <ull_periph_setup+0x248>
		memset(cc->peer_rpa, 0x0, BDADDR_SIZE);
   27b42:	2206      	movs	r2, #6
   27b44:	2100      	movs	r1, #0
   27b46:	f024 f892 	bl	4bc6e <memset>
   27b4a:	e71b      	b.n	27984 <ull_periph_setup+0x25c>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   27b4c:	4a24      	ldr	r2, [pc, #144]	; (27be0 <ull_periph_setup+0x4b8>)
   27b4e:	4927      	ldr	r1, [pc, #156]	; (27bec <ull_periph_setup+0x4c4>)
   27b50:	4825      	ldr	r0, [pc, #148]	; (27be8 <ull_periph_setup+0x4c0>)
   27b52:	23f1      	movs	r3, #241	; 0xf1
   27b54:	f021 ff51 	bl	499fa <printk>
   27b58:	4040      	eors	r0, r0
   27b5a:	f380 8811 	msr	BASEPRI, r0
   27b5e:	f04f 0003 	mov.w	r0, #3
   27b62:	df02      	svc	2
   27b64:	e6f1      	b.n	2794a <ull_periph_setup+0x222>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   27b66:	2300      	movs	r3, #0
   27b68:	2201      	movs	r2, #1
   27b6a:	9300      	str	r3, [sp, #0]
   27b6c:	4618      	mov	r0, r3
   27b6e:	4611      	mov	r1, r2
   27b70:	f00d fd06 	bl	35580 <ticker_stop>
   27b74:	e782      	b.n	27a7c <ull_periph_setup+0x354>
			lll->data_chan_sel = 1;
   27b76:	7f6b      	ldrb	r3, [r5, #29]
   27b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   27b7c:	4638      	mov	r0, r7
			lll->data_chan_sel = 1;
   27b7e:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   27b80:	f017 f80e 	bl	3eba0 <lll_chan_id>
   27b84:	2601      	movs	r6, #1
   27b86:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
   27b88:	e726      	b.n	279d8 <ull_periph_setup+0x2b0>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   27b8a:	f010 f8a5 	bl	37cd8 <ull_disable_mark_get>
   27b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27b90:	4283      	cmp	r3, r0
   27b92:	f43f af6e 	beq.w	27a72 <ull_periph_setup+0x34a>
   27b96:	4a12      	ldr	r2, [pc, #72]	; (27be0 <ull_periph_setup+0x4b8>)
   27b98:	4915      	ldr	r1, [pc, #84]	; (27bf0 <ull_periph_setup+0x4c8>)
   27b9a:	4813      	ldr	r0, [pc, #76]	; (27be8 <ull_periph_setup+0x4c0>)
   27b9c:	f240 239f 	movw	r3, #671	; 0x29f
   27ba0:	f021 ff2b 	bl	499fa <printk>
   27ba4:	4040      	eors	r0, r0
   27ba6:	f380 8811 	msr	BASEPRI, r0
   27baa:	f04f 0003 	mov.w	r0, #3
   27bae:	df02      	svc	2
		  param == ull_disable_mark_get());
}
   27bb0:	e75f      	b.n	27a72 <ull_periph_setup+0x34a>
   27bb2:	bf00      	nop
   27bb4:	f3af 8000 	nop.w
   27bb8:	1afd498d 	.word	0x1afd498d
   27bbc:	00000007 	.word	0x00000007
   27bc0:	431bde83 	.word	0x431bde83
   27bc4:	026259ff 	.word	0x026259ff
   27bc8:	01c9c37f 	.word	0x01c9c37f
   27bcc:	3b9aca00 	.word	0x3b9aca00
   27bd0:	0003e1a9 	.word	0x0003e1a9
   27bd4:	0003e179 	.word	0x0003e179
   27bd8:	1afd498d 	.word	0x1afd498d
   27bdc:	0003e1e5 	.word	0x0003e1e5
   27be0:	00053198 	.word	0x00053198
   27be4:	00053060 	.word	0x00053060
   27be8:	00052a70 	.word	0x00052a70
   27bec:	00052b80 	.word	0x00052b80
   27bf0:	000531f4 	.word	0x000531f4
   27bf4:	00000000 	.word	0x00000000

00027bf8 <ll_create_connection>:
uint8_t ll_create_connection(uint16_t scan_interval, uint16_t scan_window,
			  uint8_t filter_policy, uint8_t peer_addr_type,
			  uint8_t const *const peer_addr, uint8_t own_addr_type,
			  uint16_t interval, uint16_t latency, uint16_t timeout)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
   27bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27bfc:	b08b      	sub	sp, #44	; 0x2c
   27bfe:	e9cd 0105 	strd	r0, r1, [sp, #20]
   27c02:	9302      	str	r3, [sp, #8]
	uint16_t max_rx_time;
	memq_link_t *link;
	uint8_t hop;
	int err;

	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   27c04:	2000      	movs	r0, #0
{
   27c06:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   27c0a:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
   27c0e:	f8bd a058 	ldrh.w	sl, [sp, #88]	; 0x58
   27c12:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
   27c16:	9304      	str	r3, [sp, #16]
   27c18:	4616      	mov	r6, r2
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   27c1a:	f011 fac9 	bl	391b0 <ull_scan_is_disabled_get>
	if (!scan) {
   27c1e:	2800      	cmp	r0, #0
   27c20:	f000 81b7 	beq.w	27f92 <ll_create_connection+0x39a>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* Check if random address has been set */
	own_id_addr_type = (own_addr_type & 0x01);
   27c24:	f008 0701 	and.w	r7, r8, #1
	own_id_addr = ll_addr_get(own_id_addr_type);
   27c28:	4605      	mov	r5, r0
   27c2a:	4638      	mov	r0, r7
   27c2c:	f00d fd6e 	bl	3570c <ll_addr_get>
   27c30:	9003      	str	r0, [sp, #12]
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
   27c32:	2f00      	cmp	r7, #0
   27c34:	d16b      	bne.n	27d0e <ll_create_connection+0x116>
		return BT_HCI_ERR_INVALID_PARAM;
	}

#if defined(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)
	/* Do not connect twice to the same peer */
	if (ull_conn_peer_connected(own_id_addr_type, own_id_addr,
   27c36:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   27c3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   27c3c:	4638      	mov	r0, r7
   27c3e:	f012 fd1b 	bl	3a678 <ull_conn_peer_connected>
   27c42:	2800      	cmp	r0, #0
   27c44:	f040 81b6 	bne.w	27fb4 <ll_create_connection+0x3bc>

#else /* !CONFIG_BT_CTLR_ADV_EXT */
	lll = &scan->lll;
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	if (lll->conn) {
   27c48:	6a2b      	ldr	r3, [r5, #32]
	lll = &scan->lll;
   27c4a:	f105 021c 	add.w	r2, r5, #28
   27c4e:	9207      	str	r2, [sp, #28]
	if (lll->conn) {
   27c50:	2b00      	cmp	r3, #0
   27c52:	d063      	beq.n	27d1c <ll_create_connection+0x124>
		conn_lll = lll->conn;
   27c54:	f8d5 9020 	ldr.w	r9, [r5, #32]
	conn->ull.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);

#if defined(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)
	/* Remember peer and own identity address */
	conn->peer_id_addr_type = peer_addr_type;
   27c58:	9b02      	ldr	r3, [sp, #8]
		conn = HDR_LLL2ULL(conn_lll);
   27c5a:	f8d9 4000 	ldr.w	r4, [r9]
	conn->peer_id_addr_type = peer_addr_type;
   27c5e:	f003 0a01 	and.w	sl, r3, #1
	lll_hdr_init(&conn->lll, conn);

conn_is_valid:
#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
						      conn_lll->phy_flags);
   27c62:	f899 0044 	ldrb.w	r0, [r9, #68]	; 0x44
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
   27c66:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   27c6a:	f000 0007 	and.w	r0, r0, #7
   27c6e:	f018 fce1 	bl	40634 <lll_radio_tx_ready_delay_get>
	max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
#endif /* CONFIG_BT_LL_SW_LLCP_LEGACY */

	conn->ull.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27c72:	f8b9 1040 	ldrh.w	r1, [r9, #64]	; 0x40
   27c76:	f8b9 3042 	ldrh.w	r3, [r9, #66]	; 0x42
   27c7a:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
   27c7e:	4401      	add	r1, r0
   27c80:	48d7      	ldr	r0, [pc, #860]	; (27fe0 <ll_create_connection+0x3e8>)
   27c82:	4419      	add	r1, r3
   27c84:	fba1 0100 	umull	r0, r1, r1, r0
   27c88:	a3d3      	add	r3, pc, #844	; (adr r3, 27fd8 <ll_create_connection+0x3e0>)
   27c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   27c8e:	f7fe fa37 	bl	26100 <__aeabi_uldivmod>
   27c92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
   27c96:	6120      	str	r0, [r4, #16]
				       max_tx_time +
				       EVENT_IFS_US +
				       max_rx_time);

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ull_filter_scan_update(filter_policy);
   27c98:	4630      	mov	r0, r6
   27c9a:	f017 fcc5 	bl	3f628 <ull_filter_scan_update>

	lll->rl_idx = FILTER_IDX_NONE;
	lll->rpa_gen = 0;
   27c9e:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   27ca2:	f36f 0341 	bfc	r3, #1, #1
   27ca6:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
   27caa:	23ff      	movs	r3, #255	; 0xff
   27cac:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   27cb0:	2e00      	cmp	r6, #0
   27cb2:	f000 8172 	beq.w	27f9a <ll_create_connection+0x3a2>
		/* Look up the resolving list */
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
						 NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   27cb6:	f1a8 0302 	sub.w	r3, r8, #2
   27cba:	2b01      	cmp	r3, #1
   27cbc:	f240 817e 	bls.w	27fbc <ll_create_connection+0x3c4>
		own_addr_type &= 0x1;
		lll->rpa_gen = 1;
	}
#endif

	scan->own_addr_type = own_addr_type;
   27cc0:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
   27cc4:	9914      	ldr	r1, [sp, #80]	; 0x50
	scan->own_addr_type = own_addr_type;
   27cc6:	f368 0342 	bfi	r3, r8, #1, #2
   27cca:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
   27cce:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   27cd2:	f36a 0300 	bfi	r3, sl, #0, #1
   27cd6:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
   27cda:	2206      	movs	r2, #6
   27cdc:	f105 0024 	add.w	r0, r5, #36	; 0x24
   27ce0:	f023 ffba 	bl	4bc58 <memcpy>
	lll->conn_timeout = timeout;
   27ce4:	9b04      	ldr	r3, [sp, #16]
   27ce6:	862b      	strh	r3, [r5, #48]	; 0x30

	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
   27ce8:	f105 001c 	add.w	r0, r5, #28
   27cec:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   27cf0:	2100      	movs	r1, #0
   27cf2:	9600      	str	r6, [sp, #0]
   27cf4:	f7ff f88c 	bl	26e10 <ull_scan_params_set>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	return 0;
#else /* !CONFIG_BT_CTLR_ADV_EXT */
	/* wait for stable clocks */
	err = lll_clock_wait();
   27cf8:	f018 fe44 	bl	40984 <lll_clock_wait>
	if (err) {
   27cfc:	2800      	cmp	r0, #0
   27cfe:	f040 817b 	bne.w	27ff8 <ll_create_connection+0x400>
		conn_release(scan);

		return BT_HCI_ERR_HW_FAILURE;
	}

	return ull_scan_enable(scan);
   27d02:	4628      	mov	r0, r5
   27d04:	f7ff f8b0 	bl	26e68 <ull_scan_enable>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
}
   27d08:	b00b      	add	sp, #44	; 0x2c
   27d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
   27d0e:	2106      	movs	r1, #6
   27d10:	f00c f8d4 	bl	33ebc <mem_nz>
   27d14:	2800      	cmp	r0, #0
   27d16:	d18e      	bne.n	27c36 <ll_create_connection+0x3e>
		return BT_HCI_ERR_INVALID_PARAM;
   27d18:	2012      	movs	r0, #18
   27d1a:	e7f5      	b.n	27d08 <ll_create_connection+0x110>
	link = ll_rx_link_alloc();
   27d1c:	f00f fee6 	bl	37aec <ll_rx_link_alloc>
	if (!link) {
   27d20:	9007      	str	r0, [sp, #28]
   27d22:	2800      	cmp	r0, #0
   27d24:	f000 81c1 	beq.w	280aa <ll_create_connection+0x4b2>
	conn = ll_conn_acquire();
   27d28:	f012 f930 	bl	39f8c <ll_conn_acquire>
	if (!conn) {
   27d2c:	4604      	mov	r4, r0
   27d2e:	2800      	cmp	r0, #0
   27d30:	f000 81b8 	beq.w	280a4 <ll_create_connection+0x4ac>
	err = util_aa_le32(conn_lll->access_addr);
   27d34:	3020      	adds	r0, #32
   27d36:	f00c fa6b 	bl	34210 <util_aa_le32>
	conn_lll = &conn->lll;
   27d3a:	f104 091c 	add.w	r9, r4, #28
	LL_ASSERT(!err);
   27d3e:	2800      	cmp	r0, #0
   27d40:	f040 8183 	bne.w	2804a <ll_create_connection+0x452>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
   27d44:	2103      	movs	r1, #3
   27d46:	f104 0024 	add.w	r0, r4, #36	; 0x24
   27d4a:	f018 fb21 	bl	40390 <lll_csrand_get>
	if (!conn_lll->link_tx_free) {
   27d4e:	6f60      	ldr	r0, [r4, #116]	; 0x74
	conn_lll->latency = latency;
   27d50:	f8a4 b02c 	strh.w	fp, [r4, #44]	; 0x2c
	conn_lll->handle = 0xFFFF;
   27d54:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->interval = interval;
   27d58:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
	conn_lll->handle = 0xFFFF;
   27d5c:	8523      	strh	r3, [r4, #40]	; 0x28
	if (!conn_lll->link_tx_free) {
   27d5e:	2800      	cmp	r0, #0
   27d60:	f000 8180 	beq.w	28064 <ll_create_connection+0x46c>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   27d64:	f104 0164 	add.w	r1, r4, #100	; 0x64
   27d68:	f104 0268 	add.w	r2, r4, #104	; 0x68
   27d6c:	f00c f8b2 	bl	33ed4 <memq_init>
	conn_lll->phy_tx = PHY_1M;
   27d70:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   27d74:	4a9b      	ldr	r2, [pc, #620]	; (27fe4 <ll_create_connection+0x3ec>)
	conn_lll->phy_tx = PHY_1M;
   27d76:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
   27d7a:	f023 0307 	bic.w	r3, r3, #7
   27d7e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   27d82:	f043 0301 	orr.w	r3, r3, #1
   27d86:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn_lll->sn = 0;
   27d8a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   27d8e:	f023 0307 	bic.w	r3, r3, #7
	conn_lll->link_tx_free = NULL;
   27d92:	f04f 0b00 	mov.w	fp, #0
	conn_lll->sn = 0;
   27d96:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   27d9a:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
   27d9e:	e9c4 3216 	strd	r3, r2, [r4, #88]	; 0x58
	conn_lll->link_tx_free = NULL;
   27da2:	f8c4 b074 	str.w	fp, [r4, #116]	; 0x74
	conn_lll->packet_tx_head_len = 0;
   27da6:	f8a4 b078 	strh.w	fp, [r4, #120]	; 0x78
	conn_lll->latency_prepare = 0;
   27daa:	f8c4 b02e 	str.w	fp, [r4, #46]	; 0x2e
	conn_lll->event_counter = 0;
   27dae:	f8a4 b032 	strh.w	fp, [r4, #50]	; 0x32
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
   27db2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   27db6:	f016 fe9f 	bl	3eaf8 <ull_chan_map_get>
   27dba:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   27dbe:	f360 0305 	bfi	r3, r0, #0, #6
	lll_csrand_get(&hop, sizeof(uint8_t));
   27dc2:	2101      	movs	r1, #1
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
   27dc4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	lll_csrand_get(&hop, sizeof(uint8_t));
   27dc8:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   27dcc:	f018 fae0 	bl	40390 <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
   27dd0:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   27dd4:	4b84      	ldr	r3, [pc, #528]	; (27fe8 <ll_create_connection+0x3f0>)
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   27dd6:	f8dd c010 	ldr.w	ip, [sp, #16]
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27dda:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	conn_lll->data_chan_use = 0;
   27ddc:	f884 b03b 	strb.w	fp, [r4, #59]	; 0x3b
	conn_lll->data_chan_hop = 5 + (hop % 12);
   27de0:	fba3 1302 	umull	r1, r3, r3, r2
   27de4:	08db      	lsrs	r3, r3, #3
   27de6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   27dea:	eba2 0283 	sub.w	r2, r2, r3, lsl #2
	conn_lll->data_chan_sel = 0;
   27dee:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   27df2:	497e      	ldr	r1, [pc, #504]	; (27fec <ll_create_connection+0x3f4>)
	conn->supervision_expire = 0U;
   27df4:	f8a4 b0c4 	strh.w	fp, [r4, #196]	; 0xc4
	conn_lll->data_chan_sel = 0;
   27df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	conn_lll->data_chan_hop = 5 + (hop % 12);
   27dfc:	3205      	adds	r2, #5
	conn_lll->data_chan_sel = 0;
   27dfe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	conn_lll->central.initiated = 0;
   27e02:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	conn_lll->data_chan_hop = 5 + (hop % 12);
   27e06:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
   27e0a:	f240 42e2 	movw	r2, #1250	; 0x4e2
   27e0e:	fb02 f20a 	mul.w	r2, r2, sl
	conn_lll->central.initiated = 0;
   27e12:	f023 0303 	bic.w	r3, r3, #3
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   27e16:	4411      	add	r1, r2
	conn_lll->central.initiated = 0;
   27e18:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   27e1c:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27e20:	4b73      	ldr	r3, [pc, #460]	; (27ff0 <ll_create_connection+0x3f8>)
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   27e22:	f8a4 10c6 	strh.w	r1, [r4, #198]	; 0xc6
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   27e26:	f242 7110 	movw	r1, #10000	; 0x2710
   27e2a:	fb01 210c 	mla	r1, r1, ip, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27e2e:	4413      	add	r3, r2
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   27e30:	3901      	subs	r1, #1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27e32:	fbb3 f3f2 	udiv	r3, r3, r2
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   27e36:	fbb1 f2f2 	udiv	r2, r1, r2
   27e3a:	f8a4 20c2 	strh.w	r2, [r4, #194]	; 0xc2
	conn->connect_expire = CONN_ESTAB_COUNTDOWN;
   27e3e:	2206      	movs	r2, #6
   27e40:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27e44:	1d81      	adds	r1, r0, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27e46:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27e48:	428a      	cmp	r2, r1
	conn->procedure_expire = 0U;
   27e4a:	f8a4 b0c8 	strh.w	fp, [r4, #200]	; 0xc8
	conn->apto_expire = 0U;
   27e4e:	f8a4 b0d0 	strh.w	fp, [r4, #208]	; 0xd0
	conn->appto_expire = 0U;
   27e52:	f8a4 b0cc 	strh.w	fp, [r4, #204]	; 0xcc
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27e56:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27e5a:	dd02      	ble.n	27e62 <ll_create_connection+0x26a>
   27e5c:	3a06      	subs	r2, #6
   27e5e:	1a12      	subs	r2, r2, r0
   27e60:	b292      	uxth	r2, r2
	conn->common.fex_valid = 0U;
   27e62:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27e66:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
	conn->common.fex_valid = 0U;
   27e6a:	f023 0307 	bic.w	r3, r3, #7
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
   27e6e:	f04f 0b00 	mov.w	fp, #0
	conn->common.fex_valid = 0U;
   27e72:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	conn->peer_id_addr_type = peer_addr_type;
   27e76:	9b02      	ldr	r3, [sp, #8]
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
   27e78:	f884 b0f2 	strb.w	fp, [r4, #242]	; 0xf2
   27e7c:	f8a4 b0f0 	strh.w	fp, [r4, #240]	; 0xf0
	conn->llcp_rx = NULL;
   27e80:	f8c4 b114 	str.w	fp, [r4, #276]	; 0x114
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
   27e84:	f8a4 b118 	strh.w	fp, [r4, #280]	; 0x118
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
   27e88:	f8a4 b130 	strh.w	fp, [r4, #304]	; 0x130
	conn->peer_id_addr_type = peer_addr_type;
   27e8c:	f003 0a01 	and.w	sl, r3, #1
	conn->llcp_feature.features_conn = ll_feat_get();
   27e90:	f00f f8e8 	bl	37064 <ll_feat_get>
	conn->llcp_terminate.node_rx.hdr.link = link;
   27e94:	9b07      	ldr	r3, [sp, #28]
   27e96:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   27e9a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
	conn->llcp_version.req = conn->llcp_version.ack = 0;
   27e9e:	f8a4 b148 	strh.w	fp, [r4, #328]	; 0x148
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   27ea2:	f023 0303 	bic.w	r3, r3, #3
   27ea6:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   27eaa:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_terminate.req = conn->llcp_terminate.ack = 0U;
   27eae:	f8a4 b150 	strh.w	fp, [r4, #336]	; 0x150
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   27eb2:	f023 0318 	bic.w	r3, r3, #24
   27eb6:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   27eba:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
	conn->llcp_terminate.reason_final = 0U;
   27ebe:	f884 b153 	strb.w	fp, [r4, #339]	; 0x153
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   27ec2:	f023 0307 	bic.w	r3, r3, #7
   27ec6:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
	conn->llcp_conn_param.disabled = 0U;
   27eca:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   27ece:	f8a4 b174 	strh.w	fp, [r4, #372]	; 0x174
	conn->llcp_conn_param.disabled = 0U;
   27ed2:	f36b 1345 	bfi	r3, fp, #5, #1
   27ed6:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
	conn->llcp_length.disabled = 0U;
   27eda:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
	conn->llcp_conn_param.req = 0U;
   27ede:	f8a4 b194 	strh.w	fp, [r4, #404]	; 0x194
	conn->llcp_length.disabled = 0U;
   27ee2:	f36b 03c3 	bfi	r3, fp, #3, #1
	conn->llcp_feature.features_peer = 0;
   27ee6:	2200      	movs	r2, #0
	conn->llcp_length.disabled = 0U;
   27ee8:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
	conn->llcp_feature.features_peer = 0;
   27eec:	2300      	movs	r3, #0
	conn->llcp_feature.features_conn = ll_feat_get();
   27eee:	e9c4 014e 	strd	r0, r1, [r4, #312]	; 0x138
	conn->llcp_feature.features_peer = 0;
   27ef2:	e9c4 2350 	strd	r2, r3, [r4, #320]	; 0x140
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
   27ef6:	f8a4 b1bc 	strh.w	fp, [r4, #444]	; 0x1bc
	conn->llcp_length.cache.tx_octets = 0U;
   27efa:	f8a4 b1c8 	strh.w	fp, [r4, #456]	; 0x1c8
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
   27efe:	f012 fba3 	bl	3a648 <ull_conn_default_tx_octets_get>
   27f02:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
	conn->default_tx_time = ull_conn_default_tx_time_get();
   27f06:	f012 fba5 	bl	3a654 <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   27f0a:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   27f0e:	4b39      	ldr	r3, [pc, #228]	; (27ff4 <ll_create_connection+0x3fc>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
   27f10:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   27f14:	4013      	ands	r3, r2
   27f16:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   27f1a:	f012 fba1 	bl	3a660 <ull_conn_default_phy_tx_get>
   27f1e:	f894 31d0 	ldrb.w	r3, [r4, #464]	; 0x1d0
   27f22:	f360 0302 	bfi	r3, r0, #0, #3
   27f26:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   27f2a:	f012 fb9f 	bl	3a66c <ull_conn_default_phy_rx_get>
   27f2e:	f894 31d0 	ldrb.w	r3, [r4, #464]	; 0x1d0
	(void)memcpy(conn->peer_id_addr, peer_addr, sizeof(conn->peer_id_addr));
   27f32:	9914      	ldr	r1, [sp, #80]	; 0x50
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   27f34:	f8c4 b1d4 	str.w	fp, [r4, #468]	; 0x1d4
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   27f38:	f360 03c5 	bfi	r3, r0, #3, #3
   27f3c:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
	conn->peer_id_addr_type = peer_addr_type;
   27f40:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
	conn->ull.ticks_active_to_start = 0U;
   27f44:	f8c4 b004 	str.w	fp, [r4, #4]
	conn->peer_id_addr_type = peer_addr_type;
   27f48:	f36a 0341 	bfi	r3, sl, #1, #1
   27f4c:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	conn->ull.ticks_prepare_to_start =
   27f50:	2331      	movs	r3, #49	; 0x31
   27f52:	60a3      	str	r3, [r4, #8]
	(void)memcpy(conn->peer_id_addr, peer_addr, sizeof(conn->peer_id_addr));
   27f54:	2206      	movs	r2, #6
	conn->tx_data = conn->tx_data_last = 0;
   27f56:	e9c4 bb78 	strd	fp, fp, [r4, #480]	; 0x1e0
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   27f5a:	e9c4 bb76 	strd	fp, fp, [r4, #472]	; 0x1d8
	conn->ull.ticks_preempt_to_start =
   27f5e:	f8c4 b00c 	str.w	fp, [r4, #12]
	(void)memcpy(conn->peer_id_addr, peer_addr, sizeof(conn->peer_id_addr));
   27f62:	f104 00dd 	add.w	r0, r4, #221	; 0xdd
   27f66:	f023 fe77 	bl	4bc58 <memcpy>
	conn->own_id_addr_type = own_id_addr_type;
   27f6a:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
	(void)memcpy(conn->own_id_addr, own_id_addr, sizeof(conn->own_id_addr));
   27f6e:	9903      	ldr	r1, [sp, #12]
	conn->own_id_addr_type = own_id_addr_type;
   27f70:	f368 0300 	bfi	r3, r8, #0, #1
   27f74:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	(void)memcpy(conn->own_id_addr, own_id_addr, sizeof(conn->own_id_addr));
   27f78:	2206      	movs	r2, #6
   27f7a:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   27f7e:	f023 fe6b 	bl	4bc58 <memcpy>
	lll->conn = conn_lll;
   27f82:	f8c5 9020 	str.w	r9, [r5, #32]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   27f86:	e9c4 bb05 	strd	fp, fp, [r4, #20]
	hdr->ref = 0U;
   27f8a:	f884 b000 	strb.w	fp, [r4]
   27f8e:	61e4      	str	r4, [r4, #28]

#if defined(CONFIG_BT_CTLR_JIT_SCHEDULING)
	hdr->score = 0U;
	hdr->latency = 0U;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */
}
   27f90:	e667      	b.n	27c62 <ll_create_connection+0x6a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   27f92:	200c      	movs	r0, #12
}
   27f94:	b00b      	add	sp, #44	; 0x2c
   27f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   27f9a:	f017 ff85 	bl	3fea8 <ull_filter_lll_rl_enabled>
   27f9e:	2800      	cmp	r0, #0
   27fa0:	f43f ae89 	beq.w	27cb6 <ll_create_connection+0xbe>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
   27fa4:	9802      	ldr	r0, [sp, #8]
   27fa6:	9914      	ldr	r1, [sp, #80]	; 0x50
   27fa8:	4632      	mov	r2, r6
   27faa:	f017 fcb1 	bl	3f910 <ull_filter_rl_find>
   27fae:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
   27fb2:	e680      	b.n	27cb6 <ll_create_connection+0xbe>
		return BT_HCI_ERR_CONN_ALREADY_EXISTS;
   27fb4:	200b      	movs	r0, #11
}
   27fb6:	b00b      	add	sp, #44	; 0x2c
   27fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ull_filter_rpa_update(false);
   27fbc:	2000      	movs	r0, #0
   27fbe:	f017 fb57 	bl	3f670 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   27fc2:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   27fc6:	f043 0302 	orr.w	r3, r3, #2
	own_id_addr_type = (own_addr_type & 0x01);
   27fca:	46b8      	mov	r8, r7
		lll->rpa_gen = 1;
   27fcc:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
   27fd0:	e676      	b.n	27cc0 <ll_create_connection+0xc8>
   27fd2:	bf00      	nop
   27fd4:	f3af 8000 	nop.w
   27fd8:	1afd498d 	.word	0x1afd498d
   27fdc:	00000007 	.word	0x00000007
   27fe0:	3b9aca00 	.word	0x3b9aca00
   27fe4:	01480148 	.word	0x01480148
   27fe8:	aaaaaaab 	.word	0xaaaaaaab
   27fec:	026259ff 	.word	0x026259ff
   27ff0:	01c9c37f 	.word	0x01c9c37f
   27ff4:	f6ff0000 	.word	0xf6ff0000
	struct node_rx_pdu *cc;
	struct lll_conn *lll;
	struct ll_conn *conn;
	memq_link_t *link;

	lll = scan->lll.conn;
   27ff8:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(!lll->link_tx_free);
   27ffa:	6da3      	ldr	r3, [r4, #88]	; 0x58
   27ffc:	b163      	cbz	r3, 28018 <ll_create_connection+0x420>
   27ffe:	4a2c      	ldr	r2, [pc, #176]	; (280b0 <ll_create_connection+0x4b8>)
   28000:	492c      	ldr	r1, [pc, #176]	; (280b4 <ll_create_connection+0x4bc>)
   28002:	482d      	ldr	r0, [pc, #180]	; (280b8 <ll_create_connection+0x4c0>)
   28004:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
   28008:	f021 fcf7 	bl	499fa <printk>
   2800c:	4040      	eors	r0, r0
   2800e:	f380 8811 	msr	BASEPRI, r0
   28012:	f04f 0003 	mov.w	r0, #3
   28016:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   28018:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   2801c:	f104 0048 	add.w	r0, r4, #72	; 0x48
   28020:	f00b ff5c 	bl	33edc <memq_deinit>
	LL_ASSERT(link);
   28024:	4606      	mov	r6, r0
   28026:	b308      	cbz	r0, 2806c <ll_create_connection+0x474>
	lll->link_tx_free = link;

	conn = HDR_LLL2ULL(lll);
   28028:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
   2802a:	65a6      	str	r6, [r4, #88]	; 0x58

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
   2802c:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
	LL_ASSERT(link);
   28030:	b354      	cbz	r4, 28088 <ll_create_connection+0x490>

	ll_rx_link_release(link);
   28032:	4620      	mov	r0, r4
   28034:	f00f fd60 	bl	37af8 <ll_rx_link_release>

	ll_conn_release(conn);
   28038:	4638      	mov	r0, r7
   2803a:	f011 ffad 	bl	39f98 <ll_conn_release>
	scan->lll.conn = NULL;
   2803e:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
   28040:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
   28042:	622b      	str	r3, [r5, #32]
}
   28044:	b00b      	add	sp, #44	; 0x2c
   28046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
   2804a:	4a19      	ldr	r2, [pc, #100]	; (280b0 <ll_create_connection+0x4b8>)
   2804c:	491b      	ldr	r1, [pc, #108]	; (280bc <ll_create_connection+0x4c4>)
   2804e:	481a      	ldr	r0, [pc, #104]	; (280b8 <ll_create_connection+0x4c0>)
   28050:	23bf      	movs	r3, #191	; 0xbf
   28052:	f021 fcd2 	bl	499fa <printk>
   28056:	4040      	eors	r0, r0
   28058:	f380 8811 	msr	BASEPRI, r0
   2805c:	f04f 0003 	mov.w	r0, #3
   28060:	df02      	svc	2
   28062:	e66f      	b.n	27d44 <ll_create_connection+0x14c>
		conn_lll->link_tx_free = &conn_lll->link_tx;
   28064:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   28068:	6760      	str	r0, [r4, #116]	; 0x74
   2806a:	e67b      	b.n	27d64 <ll_create_connection+0x16c>
	LL_ASSERT(link);
   2806c:	4a10      	ldr	r2, [pc, #64]	; (280b0 <ll_create_connection+0x4b8>)
   2806e:	4914      	ldr	r1, [pc, #80]	; (280c0 <ll_create_connection+0x4c8>)
   28070:	4811      	ldr	r0, [pc, #68]	; (280b8 <ll_create_connection+0x4c0>)
   28072:	f240 43ba 	movw	r3, #1210	; 0x4ba
   28076:	f021 fcc0 	bl	499fa <printk>
   2807a:	4040      	eors	r0, r0
   2807c:	f380 8811 	msr	BASEPRI, r0
   28080:	f04f 0003 	mov.w	r0, #3
   28084:	df02      	svc	2
   28086:	e7cf      	b.n	28028 <ll_create_connection+0x430>
	LL_ASSERT(link);
   28088:	4a09      	ldr	r2, [pc, #36]	; (280b0 <ll_create_connection+0x4b8>)
   2808a:	490d      	ldr	r1, [pc, #52]	; (280c0 <ll_create_connection+0x4c8>)
   2808c:	480a      	ldr	r0, [pc, #40]	; (280b8 <ll_create_connection+0x4c0>)
   2808e:	f240 43c1 	movw	r3, #1217	; 0x4c1
   28092:	f021 fcb2 	bl	499fa <printk>
   28096:	4040      	eors	r0, r0
   28098:	f380 8811 	msr	BASEPRI, r0
   2809c:	f04f 0003 	mov.w	r0, #3
   280a0:	df02      	svc	2
   280a2:	e7c6      	b.n	28032 <ll_create_connection+0x43a>
		ll_rx_link_release(link);
   280a4:	9807      	ldr	r0, [sp, #28]
   280a6:	f00f fd27 	bl	37af8 <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   280aa:	2007      	movs	r0, #7
   280ac:	e62c      	b.n	27d08 <ll_create_connection+0x110>
   280ae:	bf00      	nop
   280b0:	00053224 	.word	0x00053224
   280b4:	00052eac 	.word	0x00052eac
   280b8:	00052a70 	.word	0x00052a70
   280bc:	00052c4c 	.word	0x00052c4c
   280c0:	00052fd8 	.word	0x00052fd8
   280c4:	00000000 	.word	0x00000000

000280c8 <ull_central_setup>:
{
   280c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	peer_addr_type = pdu_tx->rx_addr;
   280cc:	4607      	mov	r7, r0
{
   280ce:	b08d      	sub	sp, #52	; 0x34
   280d0:	4604      	mov	r4, r0
	peer_addr_type = pdu_tx->rx_addr;
   280d2:	f817 9f1c 	ldrb.w	r9, [r7, #28]!
{
   280d6:	460e      	mov	r6, r1
   280d8:	4615      	mov	r5, r2
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
   280da:	f100 0124 	add.w	r1, r0, #36	; 0x24
   280de:	2206      	movs	r2, #6
   280e0:	a80a      	add	r0, sp, #40	; 0x28
   280e2:	f023 fdb9 	bl	4bc58 <memcpy>
	chan_sel = pdu_tx->chan_sel;
   280e6:	f894 801c 	ldrb.w	r8, [r4, #28]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   280ea:	07fb      	lsls	r3, r7, #31
	peer_addr_type = pdu_tx->rx_addr;
   280ec:	f3c9 19c0 	ubfx	r9, r9, #7, #1
	chan_sel = pdu_tx->chan_sel;
   280f0:	f3c8 1840 	ubfx	r8, r8, #5, #1
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   280f4:	f100 80fb 	bmi.w	282ee <ull_central_setup+0x226>
	cc->status = 0U;
   280f8:	2300      	movs	r3, #0
   280fa:	83a3      	strh	r3, [r4, #28]
	if (ftr->lrpa_used) {
   280fc:	7cb1      	ldrb	r1, [r6, #18]
	uint8_t rl_idx = ftr->rl_idx;
   280fe:	7c77      	ldrb	r7, [r6, #17]
	if (ftr->lrpa_used) {
   28100:	f011 0101 	ands.w	r1, r1, #1
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
   28104:	f104 002b 	add.w	r0, r4, #43	; 0x2b
   28108:	f04f 0206 	mov.w	r2, #6
	if (ftr->lrpa_used) {
   2810c:	f000 80d9 	beq.w	282c2 <ull_central_setup+0x1fa>
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
   28110:	f104 011e 	add.w	r1, r4, #30
   28114:	f023 fda0 	bl	4bc58 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
   28118:	2fff      	cmp	r7, #255	; 0xff
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
   2811a:	f104 0b25 	add.w	fp, r4, #37	; 0x25
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
   2811e:	f104 0a1f 	add.w	sl, r4, #31
	if (rl_idx != FILTER_IDX_NONE) {
   28122:	f000 80d7 	beq.w	282d4 <ull_central_setup+0x20c>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
   28126:	4652      	mov	r2, sl
   28128:	4638      	mov	r0, r7
   2812a:	f104 011e 	add.w	r1, r4, #30
   2812e:	f016 ff39 	bl	3efa4 <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
   28132:	7fa3      	ldrb	r3, [r4, #30]
   28134:	3302      	adds	r3, #2
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
   28136:	a90a      	add	r1, sp, #40	; 0x28
   28138:	4658      	mov	r0, fp
		cc->peer_addr_type += 2;
   2813a:	77a3      	strb	r3, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
   2813c:	2206      	movs	r2, #6
   2813e:	f023 fd8b 	bl	4bc58 <memcpy>
	scan = HDR_LLL2ULL(ftr->param);
   28142:	6833      	ldr	r3, [r6, #0]
   28144:	f8d3 9000 	ldr.w	r9, [r3]
	cc->interval = lll->interval;
   28148:	f8d5 300e 	ldr.w	r3, [r5, #14]
   2814c:	f8c4 3032 	str.w	r3, [r4, #50]	; 0x32
	cc->timeout = scan->lll.conn_timeout;
   28150:	f8b9 3030 	ldrh.w	r3, [r9, #48]	; 0x30
   28154:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->sca = lll_clock_sca_local_get();
   28156:	f018 fc65 	bl	40a24 <lll_clock_sca_local_get>
   2815a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	conn = lll->hdr.parent;
   2815e:	682f      	ldr	r7, [r5, #0]
	lll->handle = ll_conn_handle_get(conn);
   28160:	4638      	mov	r0, r7
   28162:	f011 ff1f 	bl	39fa4 <ll_conn_handle_get>
		rx_csa = (void *)ftr->extra;
   28166:	f8d6 a004 	ldr.w	sl, [r6, #4]
	lll->handle = ll_conn_handle_get(conn);
   2816a:	81a8      	strh	r0, [r5, #12]
		ll_rx_put(link, rx);
   2816c:	4621      	mov	r1, r4
	rx->handle = lll->handle;
   2816e:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
   28170:	6820      	ldr	r0, [r4, #0]
   28172:	f00f fcd3 	bl	37b1c <ll_rx_put>
		rx->handle = lll->handle;
   28176:	89ab      	ldrh	r3, [r5, #12]
   28178:	f8aa 3006 	strh.w	r3, [sl, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   2817c:	231b      	movs	r3, #27
		link = rx->link;
   2817e:	f8da 4000 	ldr.w	r4, [sl]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   28182:	f88a 3004 	strb.w	r3, [sl, #4]
		if (chan_sel) {
   28186:	f1b8 0f00 	cmp.w	r8, #0
   2818a:	f040 80be 	bne.w	2830a <ull_central_setup+0x242>
	ll_rx_put(link, rx);
   2818e:	4651      	mov	r1, sl
   28190:	4620      	mov	r0, r4
			cs->csa = 0x00;
   28192:	f88a 801c 	strb.w	r8, [sl, #28]
	ll_rx_put(link, rx);
   28196:	f00f fcc1 	bl	37b1c <ll_rx_put>
	ll_rx_sched();
   2819a:	f00f fcc9 	bl	37b30 <ll_rx_sched>
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
   2819e:	68ba      	ldr	r2, [r7, #8]
   281a0:	687b      	ldr	r3, [r7, #4]
						      lll->phy_flags);
   281a2:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   281a6:	f8b5 800e 	ldrh.w	r8, [r5, #14]
	conn_offset_us = ftr->radio_end_us;
   281aa:	68f4      	ldr	r4, [r6, #12]
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
   281ac:	429a      	cmp	r2, r3
   281ae:	bf38      	it	cc
   281b0:	461a      	movcc	r2, r3
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
   281b2:	f3c0 01c0 	ubfx	r1, r0, #3, #1
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   281b6:	f240 43e2 	movw	r3, #1250	; 0x4e2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
   281ba:	f000 0007 	and.w	r0, r0, #7
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   281be:	fb03 f808 	mul.w	r8, r3, r8
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
   281c2:	4692      	mov	sl, r2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
   281c4:	f018 fa36 	bl	40634 <lll_radio_tx_ready_delay_get>
	conn_offset_us += EVENT_TICKER_RES_MARGIN_US;
   281c8:	3420      	adds	r4, #32
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   281ca:	2200      	movs	r2, #0
   281cc:	2102      	movs	r1, #2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
   281ce:	1a24      	subs	r4, r4, r0
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   281d0:	2001      	movs	r0, #1
   281d2:	f00b fecf 	bl	33f74 <mayfly_enable>
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
   281d6:	4648      	mov	r0, r9
   281d8:	f010 ffc2 	bl	39160 <ull_scan_handle_get>
   281dc:	1d02      	adds	r2, r0, #4
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   281de:	4b52      	ldr	r3, [pc, #328]	; (28328 <ull_central_setup+0x260>)
   281e0:	f8cd 9000 	str.w	r9, [sp]
   281e4:	b2d2      	uxtb	r2, r2
   281e6:	2101      	movs	r1, #1
   281e8:	2000      	movs	r0, #0
   281ea:	f00d f9c9 	bl	35580 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   281ee:	f030 0302 	bics.w	r3, r0, #2
   281f2:	d00c      	beq.n	2820e <ull_central_setup+0x146>
   281f4:	4a4d      	ldr	r2, [pc, #308]	; (2832c <ull_central_setup+0x264>)
   281f6:	494e      	ldr	r1, [pc, #312]	; (28330 <ull_central_setup+0x268>)
   281f8:	484e      	ldr	r0, [pc, #312]	; (28334 <ull_central_setup+0x26c>)
   281fa:	f240 33c9 	movw	r3, #969	; 0x3c9
   281fe:	f021 fbfc 	bl	499fa <printk>
   28202:	4040      	eors	r0, r0
   28204:	f380 8811 	msr	BASEPRI, r0
   28208:	f04f 0003 	mov.w	r0, #3
   2820c:	df02      	svc	2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   2820e:	f04f 0900 	mov.w	r9, #0
   28212:	464b      	mov	r3, r9
   28214:	2203      	movs	r2, #3
   28216:	2101      	movs	r1, #1
   28218:	f8cd 9000 	str.w	r9, [sp]
   2821c:	4648      	mov	r0, r9
   2821e:	f00d f9af 	bl	35580 <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   28222:	4638      	mov	r0, r7
   28224:	f011 febe 	bl	39fa4 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   28228:	68b6      	ldr	r6, [r6, #8]
   2822a:	3e09      	subs	r6, #9
   2822c:	eba6 060a 	sub.w	r6, r6, sl
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   28230:	f8df a104 	ldr.w	sl, [pc, #260]	; 28338 <ull_central_setup+0x270>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   28234:	4605      	mov	r5, r0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   28236:	a33a      	add	r3, pc, #232	; (adr r3, 28320 <ull_central_setup+0x258>)
   28238:	e9d3 2300 	ldrd	r2, r3, [r3]
   2823c:	fba8 010a 	umull	r0, r1, r8, sl
   28240:	f7fd ff5e 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
   28244:	4619      	mov	r1, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   28246:	4b3d      	ldr	r3, [pc, #244]	; (2833c <ull_central_setup+0x274>)
   28248:	9307      	str	r3, [sp, #28]
   2824a:	4b3d      	ldr	r3, [pc, #244]	; (28340 <ull_central_setup+0x278>)
   2824c:	9305      	str	r3, [sp, #20]
   2824e:	f240 33f9 	movw	r3, #1017	; 0x3f9
   28252:	9706      	str	r7, [sp, #24]
   28254:	9308      	str	r3, [sp, #32]
   28256:	693b      	ldr	r3, [r7, #16]
   28258:	4680      	mov	r8, r0
   2825a:	e9cd 9303 	strd	r9, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   2825e:	4610      	mov	r0, r2
   28260:	2300      	movs	r3, #0
   28262:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28266:	f7fd ff4b 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   2826a:	a32d      	add	r3, pc, #180	; (adr r3, 28320 <ull_central_setup+0x258>)
   2826c:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   28270:	e9cd 8001 	strd	r8, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   28274:	fba4 010a 	umull	r0, r1, r4, sl
   28278:	f7fd ff42 	bl	26100 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   2827c:	3505      	adds	r5, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   2827e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   28282:	b2ed      	uxtb	r5, r5
   28284:	9000      	str	r0, [sp, #0]
   28286:	4633      	mov	r3, r6
   28288:	462a      	mov	r2, r5
   2828a:	2101      	movs	r1, #1
   2828c:	4648      	mov	r0, r9
   2828e:	f00d f8eb 	bl	35468 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   28292:	f030 0302 	bics.w	r3, r0, #2
   28296:	d00c      	beq.n	282b2 <ull_central_setup+0x1ea>
   28298:	4a24      	ldr	r2, [pc, #144]	; (2832c <ull_central_setup+0x264>)
   2829a:	4925      	ldr	r1, [pc, #148]	; (28330 <ull_central_setup+0x268>)
   2829c:	4825      	ldr	r0, [pc, #148]	; (28334 <ull_central_setup+0x26c>)
   2829e:	f240 33fa 	movw	r3, #1018	; 0x3fa
   282a2:	f021 fbaa 	bl	499fa <printk>
   282a6:	4040      	eors	r0, r0
   282a8:	f380 8811 	msr	BASEPRI, r0
   282ac:	f04f 0003 	mov.w	r0, #3
   282b0:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
   282b2:	2201      	movs	r2, #1
   282b4:	2102      	movs	r1, #2
   282b6:	4610      	mov	r0, r2
   282b8:	f00b fe5c 	bl	33f74 <mayfly_enable>
}
   282bc:	b00d      	add	sp, #52	; 0x34
   282be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
   282c2:	f023 fcd4 	bl	4bc6e <memset>
	if (rl_idx != FILTER_IDX_NONE) {
   282c6:	2fff      	cmp	r7, #255	; 0xff
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
   282c8:	f104 0b25 	add.w	fp, r4, #37	; 0x25
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
   282cc:	f104 0a1f 	add.w	sl, r4, #31
	if (rl_idx != FILTER_IDX_NONE) {
   282d0:	f47f af29 	bne.w	28126 <ull_central_setup+0x5e>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
   282d4:	4658      	mov	r0, fp
   282d6:	2206      	movs	r2, #6
   282d8:	2100      	movs	r1, #0
   282da:	f023 fcc8 	bl	4bc6e <memset>
		cc->peer_addr_type = peer_addr_type;
   282de:	f884 901e 	strb.w	r9, [r4, #30]
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
   282e2:	a90a      	add	r1, sp, #40	; 0x28
   282e4:	4650      	mov	r0, sl
   282e6:	2206      	movs	r2, #6
   282e8:	f023 fcb6 	bl	4bc58 <memcpy>
   282ec:	e729      	b.n	28142 <ull_central_setup+0x7a>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   282ee:	4a0f      	ldr	r2, [pc, #60]	; (2832c <ull_central_setup+0x264>)
   282f0:	4914      	ldr	r1, [pc, #80]	; (28344 <ull_central_setup+0x27c>)
   282f2:	4810      	ldr	r0, [pc, #64]	; (28334 <ull_central_setup+0x26c>)
   282f4:	f44f 7352 	mov.w	r3, #840	; 0x348
   282f8:	f021 fb7f 	bl	499fa <printk>
   282fc:	4040      	eors	r0, r0
   282fe:	f380 8811 	msr	BASEPRI, r0
   28302:	f04f 0003 	mov.w	r0, #3
   28306:	df02      	svc	2
   28308:	e6f6      	b.n	280f8 <ull_central_setup+0x30>
			lll->data_chan_sel = 1;
   2830a:	7f6b      	ldrb	r3, [r5, #29]
   2830c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   28310:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   28312:	1d28      	adds	r0, r5, #4
   28314:	f016 fc44 	bl	3eba0 <lll_chan_id>
   28318:	f04f 0801 	mov.w	r8, #1
   2831c:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
   2831e:	e736      	b.n	2818e <ull_central_setup+0xc6>
   28320:	1afd498d 	.word	0x1afd498d
   28324:	00000007 	.word	0x00000007
   28328:	0003e39d 	.word	0x0003e39d
   2832c:	00053224 	.word	0x00053224
   28330:	00053060 	.word	0x00053060
   28334:	00052a70 	.word	0x00052a70
   28338:	3b9aca00 	.word	0x3b9aca00
   2833c:	0003e3a1 	.word	0x0003e3a1
   28340:	0003e3d1 	.word	0x0003e3d1
   28344:	00052b80 	.word	0x00052b80

00028348 <ull_sched_after_mstr_slot_get>:
}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

void ull_sched_after_mstr_slot_get(uint8_t user_id, uint32_t ticks_slot_abs,
				   uint32_t *ticks_anchor, uint32_t *us_offset)
{
   28348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2834c:	b08d      	sub	sp, #52	; 0x34
   2834e:	461d      	mov	r5, r3
   28350:	9307      	str	r3, [sp, #28]
	uint8_t ticker_id_prev;
	uint8_t ticker_id;

	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);

	ticker_id = ticker_id_prev = 0xff;
   28352:	f04f 0bff 	mov.w	fp, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
   28356:	2300      	movs	r3, #0
{
   28358:	4616      	mov	r6, r2
   2835a:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 28450 <ull_sched_after_mstr_slot_get+0x108>
	ticker_id = ticker_id_prev = 0xff;
   2835e:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
   28362:	1d0a      	adds	r2, r1, #4
{
   28364:	4604      	mov	r4, r0
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
   28366:	9206      	str	r2, [sp, #24]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
   28368:	602b      	str	r3, [r5, #0]
   2836a:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_slot_abs_prev = 0U;
   2836c:	469a      	mov	sl, r3
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
   2836e:	9304      	str	r3, [sp, #16]
   28370:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
   28374:	af0a      	add	r7, sp, #40	; 0x28
		uint32_t volatile ret_cb;
		struct ll_conn *conn;
		uint32_t ret;
		bool success;

		ret_cb = TICKER_STATUS_BUSY;
   28376:	2502      	movs	r5, #2
					       NULL, /* lazy */
					       ticker_match_op_cb,
					       NULL, /* match_op_context */
					       ticker_op_cb, (void *)&ret_cb);
#else
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
   28378:	e9cd 9801 	strd	r9, r8, [sp, #4]
   2837c:	9700      	str	r7, [sp, #0]
   2837e:	4633      	mov	r3, r6
   28380:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   28384:	4621      	mov	r1, r4
   28386:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   28388:	950b      	str	r5, [sp, #44]	; 0x2c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
   2838a:	f00d f93b 	bl	35604 <ticker_next_slot_get>
					   &ticker_id, ticks_anchor,
					   &ticks_to_expire,
					   ticker_op_cb, (void *)&ret_cb);
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */
		if (ret == TICKER_STATUS_BUSY) {
   2838e:	2802      	cmp	r0, #2
   28390:	d02c      	beq.n	283ec <ull_sched_after_mstr_slot_get+0xa4>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
						 user_id);
			}
		}

		success = (ret_cb == TICKER_STATUS_SUCCESS);
   28392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		LL_ASSERT(success);
   28394:	bb83      	cbnz	r3, 283f8 <ull_sched_after_mstr_slot_get+0xb0>

		if (ticker_id == 0xff) {
   28396:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   2839a:	28ff      	cmp	r0, #255	; 0xff
   2839c:	d03c      	beq.n	28418 <ull_sched_after_mstr_slot_get+0xd0>
			break;
		}

#if !defined(CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH)
		if ((ticker_id < TICKER_ID_CONN_BASE) ||
   2839e:	3805      	subs	r0, #5
   283a0:	b2c3      	uxtb	r3, r0
   283a2:	2b05      	cmp	r3, #5
   283a4:	d8e8      	bhi.n	28378 <ull_sched_after_mstr_slot_get+0x30>
		    (ticker_id > TICKER_ID_CONN_LAST)) {
			continue;
		}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
   283a6:	b280      	uxth	r0, r0
   283a8:	f011 fe04 	bl	39fb4 <ll_conn_get>
		if (conn && !conn->lll.role) {
   283ac:	2800      	cmp	r0, #0
   283ae:	d0e2      	beq.n	28376 <ull_sched_after_mstr_slot_get+0x2e>
   283b0:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   283b4:	2b00      	cmp	r3, #0
   283b6:	dbde      	blt.n	28376 <ull_sched_after_mstr_slot_get+0x2e>
			}
#endif

			ticks_slot_abs_curr += conn->ull.ticks_slot;

			if ((ticker_id_prev != 0xff) &&
   283b8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_abs_curr += conn->ull.ticks_slot;
   283bc:	6903      	ldr	r3, [r0, #16]
			uint32_t ticks_to_expire_normal = ticks_to_expire;
   283be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			if ((ticker_id_prev != 0xff) &&
   283c0:	d00a      	beq.n	283d8 <ull_sched_after_mstr_slot_get+0x90>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
   283c2:	9904      	ldr	r1, [sp, #16]
   283c4:	9305      	str	r3, [sp, #20]
   283c6:	4628      	mov	r0, r5
   283c8:	f00d f97c 	bl	356c4 <ticker_ticks_diff_get>
						   ticks_to_expire_prev) >
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
   283cc:	9b06      	ldr	r3, [sp, #24]
   283ce:	eb0a 0203 	add.w	r2, sl, r3
			if ((ticker_id_prev != 0xff) &&
   283d2:	4290      	cmp	r0, r2
   283d4:	9b05      	ldr	r3, [sp, #20]
   283d6:	d822      	bhi.n	2841e <ull_sched_after_mstr_slot_get+0xd6>
				break;
			}

			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
   283d8:	9504      	str	r5, [sp, #16]
			ticker_id_prev = ticker_id;
   283da:	f89d b027 	ldrb.w	fp, [sp, #39]	; 0x27
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   283de:	469a      	mov	sl, r3
		ret_cb = TICKER_STATUS_BUSY;
   283e0:	2502      	movs	r5, #2
   283e2:	e7c9      	b.n	28378 <ull_sched_after_mstr_slot_get+0x30>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
   283e4:	4621      	mov	r1, r4
   283e6:	2000      	movs	r0, #0
   283e8:	f00d f952 	bl	35690 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   283ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   283ee:	2b02      	cmp	r3, #2
   283f0:	d0f8      	beq.n	283e4 <ull_sched_after_mstr_slot_get+0x9c>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   283f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		LL_ASSERT(success);
   283f4:	2b00      	cmp	r3, #0
   283f6:	d0ce      	beq.n	28396 <ull_sched_after_mstr_slot_get+0x4e>
   283f8:	4a16      	ldr	r2, [pc, #88]	; (28454 <ull_sched_after_mstr_slot_get+0x10c>)
   283fa:	4917      	ldr	r1, [pc, #92]	; (28458 <ull_sched_after_mstr_slot_get+0x110>)
   283fc:	4817      	ldr	r0, [pc, #92]	; (2845c <ull_sched_after_mstr_slot_get+0x114>)
   283fe:	2373      	movs	r3, #115	; 0x73
   28400:	f021 fafb 	bl	499fa <printk>
   28404:	4040      	eors	r0, r0
   28406:	f380 8811 	msr	BASEPRI, r0
   2840a:	f04f 0003 	mov.w	r0, #3
   2840e:	df02      	svc	2
		if (ticker_id == 0xff) {
   28410:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   28414:	28ff      	cmp	r0, #255	; 0xff
   28416:	d1c2      	bne.n	2839e <ull_sched_after_mstr_slot_get+0x56>
		}
	}

	if (ticker_id_prev != 0xff) {
   28418:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   2841c:	d00f      	beq.n	2843e <ull_sched_after_mstr_slot_get+0xf6>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
   2841e:	9b04      	ldr	r3, [sp, #16]
   28420:	480f      	ldr	r0, [pc, #60]	; (28460 <ull_sched_after_mstr_slot_get+0x118>)
   28422:	4453      	add	r3, sl
   28424:	fba3 0200 	umull	r0, r2, r3, r0
   28428:	2107      	movs	r1, #7
   2842a:	fb01 2103 	mla	r1, r1, r3, r2
   2842e:	a306      	add	r3, pc, #24	; (adr r3, 28448 <ull_sched_after_mstr_slot_get+0x100>)
   28430:	e9d3 2300 	ldrd	r2, r3, [r3]
   28434:	f7fd fe64 	bl	26100 <__aeabi_uldivmod>
   28438:	9b07      	ldr	r3, [sp, #28]
						    ticks_slot_abs_prev) +
   2843a:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
   2843c:	6018      	str	r0, [r3, #0]
						    (EVENT_JITTER_US << 3);
	}
}
   2843e:	b00d      	add	sp, #52	; 0x34
   28440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28444:	f3af 8000 	nop.w
   28448:	3b9aca00 	.word	0x3b9aca00
   2844c:	00000000 	.word	0x00000000
   28450:	0003e775 	.word	0x0003e775
   28454:	00053270 	.word	0x00053270
   28458:	000532b4 	.word	0x000532b4
   2845c:	00052a70 	.word	0x00052a70
   28460:	1afd498d 	.word	0x1afd498d
   28464:	00000000 	.word	0x00000000

00028468 <after_mstr_offset_get>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

static void after_mstr_offset_get(uint16_t conn_interval, uint32_t ticks_slot,
				  uint32_t ticks_anchor,
				  uint32_t *win_offset_us)
{
   28468:	b570      	push	{r4, r5, r6, lr}
   2846a:	b082      	sub	sp, #8
   2846c:	461c      	mov	r4, r3
	uint32_t ticks_anchor_offset = ticks_anchor;
   2846e:	9201      	str	r2, [sp, #4]
{
   28470:	4615      	mov	r5, r2
   28472:	4606      	mov	r6, r0

	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
   28474:	aa01      	add	r2, sp, #4
   28476:	2002      	movs	r0, #2
   28478:	f7ff ff66 	bl	28348 <ull_sched_after_mstr_slot_get>
				      &ticks_anchor_offset, win_offset_us);

	if (!*win_offset_us) {
   2847c:	6823      	ldr	r3, [r4, #0]
   2847e:	b30b      	cbz	r3, 284c4 <after_mstr_offset_get+0x5c>
		return;
	}

	if ((ticks_anchor_offset - ticks_anchor) & BIT(HAL_TICKER_CNTR_MSBIT)) {
   28480:	9801      	ldr	r0, [sp, #4]
   28482:	1b43      	subs	r3, r0, r5
   28484:	021b      	lsls	r3, r3, #8
   28486:	d41f      	bmi.n	284c8 <after_mstr_offset_get+0x60>
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
			ticker_ticks_diff_get(ticks_anchor,
					      ticks_anchor_offset));
	} else {
		*win_offset_us += HAL_TICKER_TICKS_TO_US(
   28488:	4629      	mov	r1, r5
   2848a:	f00d f91b 	bl	356c4 <ticker_ticks_diff_get>
   2848e:	4a1a      	ldr	r2, [pc, #104]	; (284f8 <after_mstr_offset_get+0x90>)
   28490:	4603      	mov	r3, r0
   28492:	2107      	movs	r1, #7
   28494:	fba0 0202 	umull	r0, r2, r0, r2
   28498:	fb01 2103 	mla	r1, r1, r3, r2
   2849c:	a314      	add	r3, pc, #80	; (adr r3, 284f0 <after_mstr_offset_get+0x88>)
   2849e:	e9d3 2300 	ldrd	r2, r3, [r3]
   284a2:	f7fd fe2d 	bl	26100 <__aeabi_uldivmod>
   284a6:	6822      	ldr	r2, [r4, #0]
   284a8:	4402      	add	r2, r0
			ticker_ticks_diff_get(ticks_anchor_offset,
					      ticks_anchor));
	}

	if ((*win_offset_us & BIT(31)) == 0) {
   284aa:	2a00      	cmp	r2, #0
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
   284ac:	6022      	str	r2, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
   284ae:	db09      	blt.n	284c4 <after_mstr_offset_get+0x5c>
		uint32_t conn_interval_us = conn_interval * CONN_INT_UNIT_US;
   284b0:	f240 43e2 	movw	r3, #1250	; 0x4e2
   284b4:	fb03 f006 	mul.w	r0, r3, r6

		while (*win_offset_us > conn_interval_us) {
   284b8:	4290      	cmp	r0, r2
   284ba:	d203      	bcs.n	284c4 <after_mstr_offset_get+0x5c>
			*win_offset_us -= conn_interval_us;
   284bc:	1a12      	subs	r2, r2, r0
		while (*win_offset_us > conn_interval_us) {
   284be:	4282      	cmp	r2, r0
   284c0:	d8fc      	bhi.n	284bc <after_mstr_offset_get+0x54>
   284c2:	6022      	str	r2, [r4, #0]
		}
	}
}
   284c4:	b002      	add	sp, #8
   284c6:	bd70      	pop	{r4, r5, r6, pc}
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
   284c8:	4601      	mov	r1, r0
   284ca:	4628      	mov	r0, r5
   284cc:	f00d f8fa 	bl	356c4 <ticker_ticks_diff_get>
   284d0:	4a09      	ldr	r2, [pc, #36]	; (284f8 <after_mstr_offset_get+0x90>)
   284d2:	4603      	mov	r3, r0
   284d4:	2107      	movs	r1, #7
   284d6:	fba0 0202 	umull	r0, r2, r0, r2
   284da:	fb01 2103 	mla	r1, r1, r3, r2
   284de:	a304      	add	r3, pc, #16	; (adr r3, 284f0 <after_mstr_offset_get+0x88>)
   284e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   284e4:	f7fd fe0c 	bl	26100 <__aeabi_uldivmod>
   284e8:	6822      	ldr	r2, [r4, #0]
   284ea:	1a12      	subs	r2, r2, r0
   284ec:	e7dd      	b.n	284aa <after_mstr_offset_get+0x42>
   284ee:	bf00      	nop
   284f0:	3b9aca00 	.word	0x3b9aca00
   284f4:	00000000 	.word	0x00000000
   284f8:	1afd498d 	.word	0x1afd498d
   284fc:	00000000 	.word	0x00000000

00028500 <ull_sched_mfy_win_offset_select>:
{
   28500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   28504:	f8b0 11a4 	ldrh.w	r1, [r0, #420]	; 0x1a4
{
   28508:	b089      	sub	sp, #36	; 0x24
   2850a:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   2850c:	f240 43e2 	movw	r3, #1250	; 0x4e2
   28510:	483d      	ldr	r0, [pc, #244]	; (28608 <ull_sched_mfy_win_offset_select+0x108>)
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
   28512:	2600      	movs	r6, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   28514:	fb03 f101 	mul.w	r1, r3, r1
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
   28518:	ad05      	add	r5, sp, #20
	uint8_t offset_m_max = OFFSET_M_MAX;
   2851a:	2306      	movs	r3, #6
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
   2851c:	e9c5 6601 	strd	r6, r6, [r5, #4]
	uint8_t offset_m_max = OFFSET_M_MAX;
   28520:	f88d 300f 	strb.w	r3, [sp, #15]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   28524:	fba1 0100 	umull	r0, r1, r1, r0
   28528:	a335      	add	r3, pc, #212	; (adr r3, 28600 <ull_sched_mfy_win_offset_select+0x100>)
   2852a:	e9d3 2300 	ldrd	r2, r3, [r3]
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
   2852e:	9605      	str	r6, [sp, #20]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   28530:	f7fd fde6 	bl	26100 <__aeabi_uldivmod>
	win_offset_calc(conn, 1, &ticks_to_offset,
   28534:	f10d 030f 	add.w	r3, sp, #15
   28538:	9501      	str	r5, [sp, #4]
   2853a:	9300      	str	r3, [sp, #0]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   2853c:	9004      	str	r0, [sp, #16]
	win_offset_calc(conn, 1, &ticks_to_offset,
   2853e:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
   28542:	4620      	mov	r0, r4
   28544:	aa04      	add	r2, sp, #16
   28546:	2101      	movs	r1, #1
   28548:	f016 f916 	bl	3e778 <win_offset_calc.constprop.0>
		while (offset_index_m < offset_m_max) {
   2854c:	f89d 000f 	ldrb.w	r0, [sp, #15]
   28550:	46b0      	mov	r8, r6
	uint8_t has_offset_s = 0U;
   28552:	4637      	mov	r7, r6
   28554:	f504 79d2 	add.w	r9, r4, #420	; 0x1a4
			if (win_offset_s != 0xffff) {
   28558:	f64f 76ff 	movw	r6, #65535	; 0xffff
		win_offset_s =
   2855c:	f8b9 c000 	ldrh.w	ip, [r9]
		while (offset_index_m < offset_m_max) {
   28560:	b178      	cbz	r0, 28582 <ull_sched_mfy_win_offset_select+0x82>
   28562:	462a      	mov	r2, r5
		uint8_t offset_index_m = 0U;
   28564:	2300      	movs	r3, #0
			if (win_offset_s != 0xffff) {
   28566:	45b4      	cmp	ip, r6
			offset_index_m++;
   28568:	f103 0101 	add.w	r1, r3, #1
			if (win_offset_s != 0xffff) {
   2856c:	d004      	beq.n	28578 <ull_sched_mfy_win_offset_select+0x78>
				if (win_offset_s ==
   2856e:	f8b2 e000 	ldrh.w	lr, [r2]
   28572:	45e6      	cmp	lr, ip
   28574:	d01b      	beq.n	285ae <ull_sched_mfy_win_offset_select+0xae>
				has_offset_s = 1U;
   28576:	2701      	movs	r7, #1
			offset_index_m++;
   28578:	b2cb      	uxtb	r3, r1
		while (offset_index_m < offset_m_max) {
   2857a:	4283      	cmp	r3, r0
   2857c:	f102 0202 	add.w	r2, r2, #2
   28580:	d1f1      	bne.n	28566 <ull_sched_mfy_win_offset_select+0x66>
	while (offset_index_s < OFFSET_S_MAX) {
   28582:	f108 0801 	add.w	r8, r8, #1
   28586:	f1b8 0f06 	cmp.w	r8, #6
   2858a:	f109 0902 	add.w	r9, r9, #2
   2858e:	d1e5      	bne.n	2855c <ull_sched_mfy_win_offset_select+0x5c>
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
   28590:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
	} else if (!has_offset_s) {
   28594:	bb27      	cbnz	r7, 285e0 <ull_sched_mfy_win_offset_select+0xe0>
		conn->llcp_cu.win_offset_us = win_offset_m[0] *
   28596:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   2859a:	f240 41e2 	movw	r1, #1250	; 0x4e2
   2859e:	fb02 f101 	mul.w	r1, r2, r1
	dst[1] = val >> 8;
   285a2:	0a10      	lsrs	r0, r2, #8
   285a4:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
	dst[0] = val;
   285a8:	701a      	strb	r2, [r3, #0]
	dst[1] = val >> 8;
   285aa:	7058      	strb	r0, [r3, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   285ac:	e00e      	b.n	285cc <ull_sched_mfy_win_offset_select+0xcc>
		if (offset_index_m < offset_m_max) {
   285ae:	4283      	cmp	r3, r0
   285b0:	d2e7      	bcs.n	28582 <ull_sched_mfy_win_offset_select+0x82>
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
   285b2:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
		conn->llcp_cu.win_offset_us = win_offset_s * CONN_INT_UNIT_US;
   285b6:	f240 43e2 	movw	r3, #1250	; 0x4e2
   285ba:	fb03 f30c 	mul.w	r3, r3, ip
   285be:	ea4f 211c 	mov.w	r1, ip, lsr #8
   285c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
	dst[0] = val;
   285c6:	f882 c000 	strb.w	ip, [r2]
	dst[1] = val >> 8;
   285ca:	7051      	strb	r1, [r2, #1]
				has_offset_s = 1U;
   285cc:	2204      	movs	r2, #4
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   285ce:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   285d2:	f362 0302 	bfi	r3, r2, #0, #3
   285d6:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
}
   285da:	b009      	add	sp, #36	; 0x24
   285dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   285e0:	f813 2c05 	ldrb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
   285e4:	2003      	movs	r0, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   285e6:	4302      	orrs	r2, r0
		pdu_ctrl_tx->llctrl.opcode =
   285e8:	f640 7111 	movw	r1, #3857	; 0xf11
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   285ec:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
   285f0:	2220      	movs	r2, #32
   285f2:	701a      	strb	r2, [r3, #0]
		pdu_ctrl_tx->len =
   285f4:	f803 0c04 	strb.w	r0, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
   285f8:	f823 1c02 	strh.w	r1, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
   285fc:	2205      	movs	r2, #5
   285fe:	e7e6      	b.n	285ce <ull_sched_mfy_win_offset_select+0xce>
   28600:	1afd498d 	.word	0x1afd498d
   28604:	00000007 	.word	0x00000007
   28608:	3b9aca00 	.word	0x3b9aca00
   2860c:	00000000 	.word	0x00000000

00028610 <isr_window>:
	 */
	radio_tmr_end_capture();
}

static void isr_window(void *param)
{
   28610:	b538      	push	{r3, r4, r5, lr}
   28612:	4604      	mov	r4, r0
	uint32_t remainder_us;
	struct lll_scan *lll;

	isr_common_done(param);
   28614:	f019 f8a2 	bl	4175c <isr_common_done>

	lll = param;

	/* Next radio channel to scan, round-robin 37, 38, and 39. */
	if (++lll->chan == ADV_CHAN_MAX) {
   28618:	7da3      	ldrb	r3, [r4, #22]
   2861a:	7da2      	ldrb	r2, [r4, #22]
   2861c:	f3c3 0341 	ubfx	r3, r3, #1, #2
   28620:	3301      	adds	r3, #1
   28622:	f003 0303 	and.w	r3, r3, #3
   28626:	2b03      	cmp	r3, #3
		lll->chan = 0U;
   28628:	bf08      	it	eq
   2862a:	2300      	moveq	r3, #0
   2862c:	f363 0242 	bfi	r2, r3, #1, #2
	}
	lll_chan_set(37 + lll->chan);
   28630:	bf14      	ite	ne
   28632:	f103 0025 	addne.w	r0, r3, #37	; 0x25
   28636:	2025      	moveq	r0, #37	; 0x25
   28638:	75a2      	strb	r2, [r4, #22]
   2863a:	f017 ffb9 	bl	405b0 <lll_chan_set>

#if defined(CONFIG_BT_CENTRAL)
	bool is_sched_advanced = IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) &&
				 lll->conn && lll->conn_win_offset_us;
   2863e:	6863      	ldr	r3, [r4, #4]
   28640:	b10b      	cbz	r3, 28646 <isr_window+0x36>
   28642:	6923      	ldr	r3, [r4, #16]
   28644:	b94b      	cbnz	r3, 2865a <isr_window+0x4a>
		ticks_anchor_prev = radio_tmr_start_get();
	} else {
		ticks_anchor_prev = 0U;
	}

	ticks_at_start = ticker_ticks_now_get() +
   28646:	f00d f83b 	bl	356c0 <ticker_ticks_now_get>
			 HAL_TICKER_CNTR_CMP_OFFSET_MIN;
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   2864a:	1cc1      	adds	r1, r0, #3
   2864c:	2000      	movs	r0, #0
   2864e:	f01a fd5b 	bl	43108 <radio_tmr_start_tick>
		 * interval units until it is in the future.
		 */
		lll->conn_win_offset_us -= ticks_delta_us;
	}
#endif /* CONFIG_BT_CENTRAL */
}
   28652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
   28656:	f01a bdd5 	b.w	43204 <radio_tmr_end_capture>
		ticks_anchor_prev = radio_tmr_start_get();
   2865a:	f01a fd87 	bl	4316c <radio_tmr_start_get>
   2865e:	4605      	mov	r5, r0
	ticks_at_start = ticker_ticks_now_get() +
   28660:	f00d f82e 	bl	356c0 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   28664:	1cc1      	adds	r1, r0, #3
   28666:	2000      	movs	r0, #0
   28668:	f01a fd4e 	bl	43108 <radio_tmr_start_tick>
	radio_tmr_end_capture();
   2866c:	f01a fdca 	bl	43204 <radio_tmr_end_capture>
		ticks_anchor_new = radio_tmr_start_get();
   28670:	f01a fd7c 	bl	4316c <radio_tmr_start_get>
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
   28674:	4629      	mov	r1, r5
   28676:	f00d f825 	bl	356c4 <ticker_ticks_diff_get>
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
   2867a:	4a0b      	ldr	r2, [pc, #44]	; (286a8 <isr_window+0x98>)
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
   2867c:	4603      	mov	r3, r0
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
   2867e:	2107      	movs	r1, #7
   28680:	fba0 0202 	umull	r0, r2, r0, r2
   28684:	fb01 2103 	mla	r1, r1, r3, r2
   28688:	a305      	add	r3, pc, #20	; (adr r3, 286a0 <isr_window+0x90>)
   2868a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2868e:	f7fd fd37 	bl	26100 <__aeabi_uldivmod>
		lll->conn_win_offset_us -= ticks_delta_us;
   28692:	6923      	ldr	r3, [r4, #16]
   28694:	1a1b      	subs	r3, r3, r0
   28696:	6123      	str	r3, [r4, #16]
}
   28698:	bd38      	pop	{r3, r4, r5, pc}
   2869a:	bf00      	nop
   2869c:	f3af 8000 	nop.w
   286a0:	3b9aca00 	.word	0x3b9aca00
   286a4:	00000000 	.word	0x00000000
   286a8:	1afd498d 	.word	0x1afd498d
   286ac:	00000000 	.word	0x00000000

000286b0 <isr_rx>:
{
   286b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   286b4:	b089      	sub	sp, #36	; 0x24
   286b6:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   286b8:	f01a fb3a 	bl	42d30 <radio_is_done>
	if (trx_done) {
   286bc:	b2c0      	uxtb	r0, r0
   286be:	b950      	cbnz	r0, 286d6 <isr_rx+0x26>
	lll_isr_status_reset();
   286c0:	f017 ffce 	bl	40660 <lll_isr_status_reset>
	radio_isr_set(isr_done, lll);
   286c4:	487e      	ldr	r0, [pc, #504]	; (288c0 <isr_rx+0x210>)
   286c6:	4621      	mov	r1, r4
   286c8:	f01a fa0e 	bl	42ae8 <radio_isr_set>
}
   286cc:	b009      	add	sp, #36	; 0x24
   286ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
   286d2:	f01a bb03 	b.w	42cdc <radio_disable>
		crc_ok = radio_crc_is_valid();
   286d6:	f01a fb4b 	bl	42d70 <radio_crc_is_valid>
   286da:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   286dc:	f01a fc66 	bl	42fac <radio_filter_has_match>
   286e0:	4607      	mov	r7, r0
		devmatch_id = radio_filter_match_get();
   286e2:	f01a fc6d 	bl	42fc0 <radio_filter_match_get>
   286e6:	4681      	mov	r9, r0
		irkmatch_ok = radio_ar_has_match();
   286e8:	f01a fe82 	bl	433f0 <radio_ar_has_match>
   286ec:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   286ee:	f01a fe63 	bl	433b8 <radio_ar_match_get>
   286f2:	4682      	mov	sl, r0
		rssi_ready = radio_rssi_is_ready();
   286f4:	f01a fc1e 	bl	42f34 <radio_rssi_is_ready>
	if (!trx_done || !crc_ok) {
   286f8:	b2ed      	uxtb	r5, r5
		rssi_ready = radio_rssi_is_ready();
   286fa:	4680      	mov	r8, r0
		phy_flags_rx = radio_phy_flags_rx_get();
   286fc:	f01a fc00 	bl	42f00 <radio_phy_flags_rx_get>
	lll_isr_status_reset();
   28700:	f017 ffae 	bl	40660 <lll_isr_status_reset>
	if (!trx_done || !crc_ok) {
   28704:	2d00      	cmp	r5, #0
   28706:	d0dd      	beq.n	286c4 <isr_rx+0x14>
	node_rx = ull_pdu_rx_alloc_peek(1);
   28708:	2001      	movs	r0, #1
   2870a:	f00f fb89 	bl	37e20 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   2870e:	4605      	mov	r5, r0
   28710:	2800      	cmp	r0, #0
   28712:	f000 81cb 	beq.w	28aac <isr_rx+0x3fc>
	rl_idx = devmatch_ok ?
   28716:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
		irkmatch_ok = radio_ar_has_match();
   2871a:	b2f6      	uxtb	r6, r6
	rl_idx = devmatch_ok ?
   2871c:	f040 81bd 	bne.w	28a9a <isr_rx+0x3ea>
   28720:	2e00      	cmp	r6, #0
   28722:	f040 80c2 	bne.w	288aa <isr_rx+0x1fa>
   28726:	f04f 09ff 	mov.w	r9, #255	; 0xff
	    !lll_scan_isr_rx_check(lll, irkmatch_ok, devmatch_ok, rl_idx)) {
   2872a:	463a      	mov	r2, r7
   2872c:	464b      	mov	r3, r9
   2872e:	4631      	mov	r1, r6
   28730:	4620      	mov	r0, r4
   28732:	f019 fa39 	bl	41ba8 <lll_scan_isr_rx_check>
	if (has_adva &&
   28736:	2800      	cmp	r0, #0
   28738:	d0c4      	beq.n	286c4 <isr_rx+0x14>
	/* Initiator */
	/* Note: connectable ADV_EXT_IND is handled as any other ADV_EXT_IND
	 *       because we need to receive AUX_ADV_IND anyway.
	 */
	} else if (lll->conn && !lll->conn->central.cancelled &&
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
   2873a:	7f2a      	ldrb	r2, [r5, #28]
	} else if (lll->conn && !lll->conn->central.cancelled &&
   2873c:	6861      	ldr	r1, [r4, #4]
	bool dir_report = false;
   2873e:	2300      	movs	r3, #0
   28740:	f88d 301b 	strb.w	r3, [sp, #27]
		rssi_ready = radio_rssi_is_ready();
   28744:	fa5f f788 	uxtb.w	r7, r8
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
   28748:	f002 030f 	and.w	r3, r2, #15
	} else if (lll->conn && !lll->conn->central.cancelled &&
   2874c:	2900      	cmp	r1, #0
   2874e:	f000 80d6 	beq.w	288fe <isr_rx+0x24e>
   28752:	6861      	ldr	r1, [r4, #4]
   28754:	f891 1020 	ldrb.w	r1, [r1, #32]
   28758:	0788      	lsls	r0, r1, #30
   2875a:	f100 80d0 	bmi.w	288fe <isr_rx+0x24e>
   2875e:	2b07      	cmp	r3, #7
   28760:	d0b0      	beq.n	286c4 <isr_rx+0x14>
#if defined(CONFIG_BT_CENTRAL)
static inline bool isr_scan_init_check(const struct lll_scan *lll,
				       const struct pdu_adv *pdu,
				       uint8_t rl_idx)
{
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
   28762:	7da1      	ldrb	r1, [r4, #22]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
				    rl_idx)) &&
   28764:	0709      	lsls	r1, r1, #28
   28766:	f140 81af 	bpl.w	28ac8 <isr_rx+0x418>
   2876a:	2b00      	cmp	r3, #0
   2876c:	f040 80ae 	bne.w	288cc <isr_rx+0x21c>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
   28770:	7f6b      	ldrb	r3, [r5, #29]
   28772:	2b25      	cmp	r3, #37	; 0x25
   28774:	d8a6      	bhi.n	286c4 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   28776:	2004      	movs	r0, #4
   28778:	f00f fb52 	bl	37e20 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   2877c:	2800      	cmp	r0, #0
   2877e:	d0a1      	beq.n	286c4 <isr_rx+0x14>
		pdu_end_us = radio_tmr_end_get();
   28780:	f01a fd48 	bl	43214 <radio_tmr_end_get>
		if (!lll->ticks_window) {
   28784:	6a63      	ldr	r3, [r4, #36]	; 0x24
		pdu_end_us = radio_tmr_end_get();
   28786:	4607      	mov	r7, r0
		if (!lll->ticks_window) {
   28788:	b943      	cbnz	r3, 2879c <isr_rx+0xec>
			scan_interval_us = lll->interval * SCAN_INT_UNIT_US;
   2878a:	8c23      	ldrh	r3, [r4, #32]
   2878c:	f240 2271 	movw	r2, #625	; 0x271
   28790:	fb02 f303 	mul.w	r3, r2, r3
			pdu_end_us %= scan_interval_us;
   28794:	fbb0 f2f3 	udiv	r2, r0, r3
   28798:	fb03 0712 	mls	r7, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
   2879c:	6823      	ldr	r3, [r4, #0]
   2879e:	691a      	ldr	r2, [r3, #16]
   287a0:	4b48      	ldr	r3, [pc, #288]	; (288c4 <isr_rx+0x214>)
   287a2:	2107      	movs	r1, #7
   287a4:	fba2 0303 	umull	r0, r3, r2, r3
   287a8:	fb01 3102 	mla	r1, r1, r2, r3
   287ac:	a342      	add	r3, pc, #264	; (adr r3, 288b8 <isr_rx+0x208>)
   287ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   287b2:	f7fd fca5 	bl	26100 <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
   287b6:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
   287ba:	42bb      	cmp	r3, r7
   287bc:	d382      	bcc.n	286c4 <isr_rx+0x14>
		radio_switch_complete_and_disable();
   287be:	f01a fb91 	bl	42ee4 <radio_switch_complete_and_disable>
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   287c2:	4648      	mov	r0, r9
		lll_conn = lll->conn;
   287c4:	6863      	ldr	r3, [r4, #4]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   287c6:	f017 f9cf 	bl	3fb68 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
   287ca:	7de3      	ldrb	r3, [r4, #23]
   287cc:	079f      	lsls	r7, r3, #30
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   287ce:	4680      	mov	r8, r0
		if (lll->rpa_gen && lrpa) {
   287d0:	f140 81db 	bpl.w	28b8a <isr_rx+0x4da>
   287d4:	2800      	cmp	r0, #0
   287d6:	f000 81d8 	beq.w	28b8a <isr_rx+0x4da>
			init_addr = lrpa->val;
   287da:	4683      	mov	fp, r0
			init_tx_addr = 1;
   287dc:	2701      	movs	r7, #1
		pdu_tx = (void *)radio_pkt_scratch_get();
   287de:	f01a fad5 	bl	42d8c <radio_pkt_scratch_get>
					     pdu_adv_rx->tx_addr,
   287e2:	7f2b      	ldrb	r3, [r5, #28]
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
   287e4:	aa07      	add	r2, sp, #28
   287e6:	9203      	str	r2, [sp, #12]
					     pdu_adv_rx->adv_ind.addr,
   287e8:	f105 021e 	add.w	r2, r5, #30
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
   287ec:	4601      	mov	r1, r0
		pdu_tx = (void *)radio_pkt_scratch_get();
   287ee:	4682      	mov	sl, r0
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
   287f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   287f4:	9200      	str	r2, [sp, #0]
   287f6:	4620      	mov	r0, r4
   287f8:	2200      	movs	r2, #0
   287fa:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   287fe:	f019 f9ed 	bl	41bdc <lll_scan_prepare_connect_req>
		radio_pkt_tx_set(pdu_tx);
   28802:	4650      	mov	r0, sl
   28804:	f01a fa48 	bl	42c98 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   28808:	f01a fa88 	bl	42d1c <radio_is_ready>
   2880c:	2800      	cmp	r0, #0
   2880e:	f040 81d1 	bne.w	28bb4 <isr_rx+0x504>
		radio_isr_set(isr_done_cleanup, lll);
   28812:	482d      	ldr	r0, [pc, #180]	; (288c8 <isr_rx+0x218>)
   28814:	4621      	mov	r1, r4
   28816:	f01a f967 	bl	42ae8 <radio_isr_set>
		lll->conn->central.initiated = 1U;
   2881a:	6861      	ldr	r1, [r4, #4]
		lll->is_stop = 1U;
   2881c:	7da3      	ldrb	r3, [r4, #22]
		lll->conn->central.initiated = 1U;
   2881e:	f891 2020 	ldrb.w	r2, [r1, #32]
		lll->is_stop = 1U;
   28822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		lll->conn->central.initiated = 1U;
   28826:	f042 0201 	orr.w	r2, r2, #1
   2882a:	f881 2020 	strb.w	r2, [r1, #32]
		lll->is_stop = 1U;
   2882e:	75a3      	strb	r3, [r4, #22]
		rx = ull_pdu_rx_alloc();
   28830:	f00f fb16 	bl	37e60 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   28834:	2316      	movs	r3, #22
		rx = ull_pdu_rx_alloc();
   28836:	4607      	mov	r7, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   28838:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   2883a:	f64f 73ff 	movw	r3, #65535	; 0xffff
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
   2883e:	7f2d      	ldrb	r5, [r5, #28]
		rx->hdr.handle = 0xffff;
   28840:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
   28842:	4651      	mov	r1, sl
   28844:	2224      	movs	r2, #36	; 0x24
   28846:	301c      	adds	r0, #28
   28848:	f023 fa06 	bl	4bc58 <memcpy>
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
   2884c:	7f3b      	ldrb	r3, [r7, #28]
		ftr->param = lll;
   2884e:	60bc      	str	r4, [r7, #8]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
   28850:	f3c5 1540 	ubfx	r5, r5, #5, #1
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
   28854:	f365 1345 	bfi	r3, r5, #5, #1
   28858:	773b      	strb	r3, [r7, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
   2885a:	f01a fc87 	bl	4316c <radio_tmr_start_get>
				    radio_rx_chain_delay_get(PHY_1M, 0);
   2885e:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
   28860:	6138      	str	r0, [r7, #16]
				    radio_rx_chain_delay_get(PHY_1M, 0);
   28862:	2001      	movs	r0, #1
		ftr->radio_end_us = conn_space_us -
   28864:	9d07      	ldr	r5, [sp, #28]
				    radio_rx_chain_delay_get(PHY_1M, 0);
   28866:	f01a fa27 	bl	42cb8 <radio_rx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   2886a:	2e00      	cmp	r6, #0
   2886c:	bf08      	it	eq
   2886e:	f04f 09ff 	moveq.w	r9, #255	; 0xff
   28872:	f887 9019 	strb.w	r9, [r7, #25]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
   28876:	7de3      	ldrb	r3, [r4, #23]
		ftr->radio_end_us = conn_space_us -
   28878:	1a2d      	subs	r5, r5, r0
		ftr->lrpa_used = lll->rpa_gen && lrpa;
   2887a:	f013 0302 	ands.w	r3, r3, #2
		ftr->radio_end_us = conn_space_us -
   2887e:	617d      	str	r5, [r7, #20]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
   28880:	d003      	beq.n	2888a <isr_rx+0x1da>
   28882:	f1b8 0300 	subs.w	r3, r8, #0
   28886:	bf18      	it	ne
   28888:	2301      	movne	r3, #1
   2888a:	7eba      	ldrb	r2, [r7, #26]
   2888c:	f363 0200 	bfi	r2, r3, #0, #1
   28890:	76ba      	strb	r2, [r7, #26]
			ftr->extra = ull_pdu_rx_alloc();
   28892:	f00f fae5 	bl	37e60 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   28896:	4639      	mov	r1, r7
			ftr->extra = ull_pdu_rx_alloc();
   28898:	60f8      	str	r0, [r7, #12]
		ull_rx_put(rx->hdr.link, rx);
   2889a:	6838      	ldr	r0, [r7, #0]
   2889c:	f00f faf6 	bl	37e8c <ull_rx_put>
}
   288a0:	b009      	add	sp, #36	; 0x24
   288a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		ull_rx_sched();
   288a6:	f00f bb01 	b.w	37eac <ull_rx_sched>
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   288aa:	fa5f f08a 	uxtb.w	r0, sl
   288ae:	f017 f9e9 	bl	3fc84 <ull_filter_lll_rl_irk_idx>
   288b2:	4681      	mov	r9, r0
   288b4:	e739      	b.n	2872a <isr_rx+0x7a>
   288b6:	bf00      	nop
   288b8:	3b9aca00 	.word	0x3b9aca00
   288bc:	00000000 	.word	0x00000000
   288c0:	00041815 	.word	0x00041815
   288c4:	1afd498d 	.word	0x1afd498d
   288c8:	00041a05 	.word	0x00041a05
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
   288cc:	2b01      	cmp	r3, #1
   288ce:	f040 810b 	bne.w	28ae8 <isr_rx+0x438>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
   288d2:	7f6a      	ldrb	r2, [r5, #29]
   288d4:	2a0c      	cmp	r2, #12
   288d6:	f47f aef5 	bne.w	286c4 <isr_rx+0x14>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
		  (/* allow directed adv packets addressed to this device */
			  isr_scan_tgta_check(lll, true, pdu->rx_addr,
   288da:	7f2a      	ldrb	r2, [r5, #28]
   288dc:	f8cd 9000 	str.w	r9, [sp]
   288e0:	4619      	mov	r1, r3
   288e2:	2300      	movs	r3, #0
   288e4:	9301      	str	r3, [sp, #4]
   288e6:	09d2      	lsrs	r2, r2, #7
   288e8:	f105 0324 	add.w	r3, r5, #36	; 0x24
   288ec:	4620      	mov	r0, r4
   288ee:	f019 f8af 	bl	41a50 <isr_scan_tgta_check>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
   288f2:	2800      	cmp	r0, #0
   288f4:	f47f af3f 	bne.w	28776 <isr_rx+0xc6>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   288f8:	7f2b      	ldrb	r3, [r5, #28]
   288fa:	f003 030f 	and.w	r3, r3, #15
   288fe:	2b00      	cmp	r3, #0
   28900:	d17d      	bne.n	289fe <isr_rx+0x34e>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
   28902:	7f6b      	ldrb	r3, [r5, #29]
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   28904:	2b25      	cmp	r3, #37	; 0x25
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
   28906:	461a      	mov	r2, r3
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   28908:	f63f aedc 	bhi.w	286c4 <isr_rx+0x14>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
   2890c:	7da1      	ldrb	r1, [r4, #22]
   2890e:	0689      	lsls	r1, r1, #26
   28910:	f140 8093 	bpl.w	28a3a <isr_rx+0x38a>
		   !lll->conn) {
   28914:	6862      	ldr	r2, [r4, #4]
		   lll->type &&
   28916:	2a00      	cmp	r2, #0
   28918:	f040 810f 	bne.w	28b3a <isr_rx+0x48a>
		radio_tmr_tifs_set(EVENT_IFS_US);
   2891c:	2096      	movs	r0, #150	; 0x96
   2891e:	9205      	str	r2, [sp, #20]
   28920:	f01a fb64 	bl	42fec <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   28924:	9a05      	ldr	r2, [sp, #20]
   28926:	4610      	mov	r0, r2
   28928:	f01a fa34 	bl	42d94 <radio_switch_complete_and_rx>
			      uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;
	int err = 0;

	node_rx = ull_pdu_rx_alloc_peek(3);
   2892c:	2003      	movs	r0, #3
   2892e:	f00f fa77 	bl	37e20 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   28932:	4680      	mov	r8, r0
   28934:	2800      	cmp	r0, #0
   28936:	f43f aec5 	beq.w	286c4 <isr_rx+0x14>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   2893a:	f00f fa91 	bl	37e60 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   2893e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28942:	f8a8 3006 	strh.w	r3, [r8, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   28946:	2305      	movs	r3, #5
   28948:	f888 3004 	strb.w	r3, [r8, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   2894c:	2f00      	cmp	r7, #0
   2894e:	f040 8118 	bne.w	28b82 <isr_rx+0x4d2>
   28952:	237f      	movs	r3, #127	; 0x7f
						  BT_HCI_LE_RSSI_NOT_AVAILABLE;
#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* save the resolving list index. */
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   28954:	2e00      	cmp	r6, #0
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   28956:	f888 3018 	strb.w	r3, [r8, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   2895a:	bf14      	ite	ne
   2895c:	464b      	movne	r3, r9
   2895e:	23ff      	moveq	r3, #255	; 0xff
   28960:	f888 3019 	strb.w	r3, [r8, #25]
#endif /* CONFIG_BT_CTLR_ADV_EXT */
#endif /* CONFIG_BT_CTLR_PRIVACY */

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	/* save the directed adv report flag */
	node_rx->hdr.rx_ftr.direct = dir_report;
   28964:	f898 301a 	ldrb.w	r3, [r8, #26]
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   28968:	f8d8 0000 	ldr.w	r0, [r8]
	node_rx->hdr.rx_ftr.direct = dir_report;
   2896c:	f36f 0341 	bfc	r3, #1, #1
   28970:	f888 301a 	strb.w	r3, [r8, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
   28974:	4641      	mov	r1, r8
   28976:	f00f fa89 	bl	37e8c <ull_rx_put>
	ull_rx_sched();
   2897a:	f00f fa97 	bl	37eac <ull_rx_sched>
		pdu_tx = (void *)radio_pkt_scratch_get();
   2897e:	f01a fa05 	bl	42d8c <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   28982:	7f2b      	ldrb	r3, [r5, #28]
		pdu_tx = (void *)radio_pkt_scratch_get();
   28984:	4606      	mov	r6, r0
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   28986:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   2898a:	7832      	ldrb	r2, [r6, #0]
   2898c:	01db      	lsls	r3, r3, #7
   2898e:	f002 0270 	and.w	r2, r2, #112	; 0x70
   28992:	f043 0303 	orr.w	r3, r3, #3
   28996:	4313      	orrs	r3, r2
   28998:	7033      	strb	r3, [r6, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   2899a:	230c      	movs	r3, #12
   2899c:	7073      	strb	r3, [r6, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   2899e:	4648      	mov	r0, r9
   289a0:	f017 f8e2 	bl	3fb68 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
   289a4:	7de3      	ldrb	r3, [r4, #23]
   289a6:	079a      	lsls	r2, r3, #30
   289a8:	f140 80f5 	bpl.w	28b96 <isr_rx+0x4e6>
   289ac:	2800      	cmp	r0, #0
   289ae:	f000 80f2 	beq.w	28b96 <isr_rx+0x4e6>
			pdu_tx->tx_addr = 1;
   289b2:	7833      	ldrb	r3, [r6, #0]
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
   289b4:	4601      	mov	r1, r0
			pdu_tx->tx_addr = 1;
   289b6:	4630      	mov	r0, r6
   289b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   289bc:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
   289c0:	2206      	movs	r2, #6
   289c2:	f023 f949 	bl	4bc58 <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
   289c6:	2206      	movs	r2, #6
   289c8:	f105 011e 	add.w	r1, r5, #30
   289cc:	f106 0008 	add.w	r0, r6, #8
   289d0:	f023 f942 	bl	4bc58 <memcpy>
		radio_pkt_tx_set(pdu_tx);
   289d4:	4630      	mov	r0, r6
   289d6:	f01a f95f 	bl	42c98 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   289da:	f01a f99f 	bl	42d1c <radio_is_ready>
   289de:	2800      	cmp	r0, #0
   289e0:	f040 80f6 	bne.w	28bd0 <isr_rx+0x520>
		radio_tmr_end_capture();
   289e4:	f01a fc0e 	bl	43204 <radio_tmr_end_capture>
		lll->state = 1U;
   289e8:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
   289ea:	4880      	ldr	r0, [pc, #512]	; (28bec <isr_rx+0x53c>)
		lll->state = 1U;
   289ec:	f043 0301 	orr.w	r3, r3, #1
		radio_isr_set(isr_tx, lll);
   289f0:	4621      	mov	r1, r4
		lll->state = 1U;
   289f2:	75a3      	strb	r3, [r4, #22]
}
   289f4:	b009      	add	sp, #36	; 0x24
   289f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		radio_isr_set(isr_tx, lll);
   289fa:	f01a b875 	b.w	42ae8 <radio_isr_set>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   289fe:	2b06      	cmp	r3, #6
   28a00:	f43f af7f 	beq.w	28902 <isr_rx+0x252>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   28a04:	2145      	movs	r1, #69	; 0x45
   28a06:	40d9      	lsrs	r1, r3
   28a08:	f011 0101 	ands.w	r1, r1, #1
   28a0c:	f040 8097 	bne.w	28b3e <isr_rx+0x48e>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   28a10:	2b01      	cmp	r3, #1
   28a12:	d170      	bne.n	28af6 <isr_rx+0x446>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   28a14:	7f6b      	ldrb	r3, [r5, #29]
   28a16:	2b0c      	cmp	r3, #12
   28a18:	f47f ae54 	bne.w	286c4 <isr_rx+0x14>
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
   28a1c:	7f2a      	ldrb	r2, [r5, #28]
   28a1e:	f8cd 9000 	str.w	r9, [sp]
   28a22:	f10d 031b 	add.w	r3, sp, #27
   28a26:	9301      	str	r3, [sp, #4]
   28a28:	09d2      	lsrs	r2, r2, #7
   28a2a:	f105 0324 	add.w	r3, r5, #36	; 0x24
   28a2e:	4620      	mov	r0, r4
   28a30:	f019 f80e 	bl	41a50 <isr_scan_tgta_check>
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
   28a34:	2800      	cmp	r0, #0
   28a36:	d05e      	beq.n	28af6 <isr_rx+0x446>
		 (pdu_adv_rx->len != 0) &&
   28a38:	7f6a      	ldrb	r2, [r5, #29]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   28a3a:	2a00      	cmp	r2, #0
   28a3c:	f43f ae42 	beq.w	286c4 <isr_rx+0x14>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
   28a40:	6863      	ldr	r3, [r4, #4]
		 (pdu_adv_rx->len != 0) &&
   28a42:	b12b      	cbz	r3, 28a50 <isr_rx+0x3a0>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
   28a44:	7f2b      	ldrb	r3, [r5, #28]
   28a46:	f003 030f 	and.w	r3, r3, #15
   28a4a:	2b07      	cmp	r3, #7
   28a4c:	f47f ae3a 	bne.w	286c4 <isr_rx+0x14>
	node_rx = ull_pdu_rx_alloc_peek(3);
   28a50:	2003      	movs	r0, #3
		err = isr_rx_scan_report(lll, rssi_ready, phy_flags_rx,
   28a52:	f89d 801b 	ldrb.w	r8, [sp, #27]
	node_rx = ull_pdu_rx_alloc_peek(3);
   28a56:	f00f f9e3 	bl	37e20 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   28a5a:	4605      	mov	r5, r0
   28a5c:	2800      	cmp	r0, #0
   28a5e:	f43f ae31 	beq.w	286c4 <isr_rx+0x14>
	ull_pdu_rx_alloc();
   28a62:	f00f f9fd 	bl	37e60 <ull_pdu_rx_alloc>
	node_rx->hdr.handle = 0xffff;
   28a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28a6a:	80eb      	strh	r3, [r5, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   28a6c:	2305      	movs	r3, #5
   28a6e:	712b      	strb	r3, [r5, #4]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   28a70:	2f00      	cmp	r7, #0
   28a72:	d135      	bne.n	28ae0 <isr_rx+0x430>
   28a74:	207f      	movs	r0, #127	; 0x7f
	node_rx->hdr.rx_ftr.direct = dir_report;
   28a76:	7eab      	ldrb	r3, [r5, #26]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   28a78:	7628      	strb	r0, [r5, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   28a7a:	2e00      	cmp	r6, #0
   28a7c:	bf08      	it	eq
   28a7e:	f04f 09ff 	moveq.w	r9, #255	; 0xff
	node_rx->hdr.rx_ftr.direct = dir_report;
   28a82:	f368 0341 	bfi	r3, r8, #1, #1
	ull_rx_put(node_rx->hdr.link, node_rx);
   28a86:	6828      	ldr	r0, [r5, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
   28a88:	76ab      	strb	r3, [r5, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
   28a8a:	4629      	mov	r1, r5
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   28a8c:	f885 9019 	strb.w	r9, [r5, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
   28a90:	f00f f9fc 	bl	37e8c <ull_rx_put>
	ull_rx_sched();
   28a94:	f00f fa0a 	bl	37eac <ull_rx_sched>
	if (!err) {
   28a98:	e614      	b.n	286c4 <isr_rx+0x14>
		 ull_filter_lll_rl_idx(((lll->filter_policy &
   28a9a:	7da0      	ldrb	r0, [r4, #22]
   28a9c:	fa5f f189 	uxtb.w	r1, r9
   28aa0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   28aa4:	f017 f884 	bl	3fbb0 <ull_filter_lll_rl_idx>
   28aa8:	4681      	mov	r9, r0
   28aaa:	e63e      	b.n	2872a <isr_rx+0x7a>
	LL_ASSERT(node_rx);
   28aac:	4a50      	ldr	r2, [pc, #320]	; (28bf0 <isr_rx+0x540>)
   28aae:	4951      	ldr	r1, [pc, #324]	; (28bf4 <isr_rx+0x544>)
   28ab0:	4851      	ldr	r0, [pc, #324]	; (28bf8 <isr_rx+0x548>)
   28ab2:	f240 23c3 	movw	r3, #707	; 0x2c3
   28ab6:	f020 ffa0 	bl	499fa <printk>
   28aba:	4040      	eors	r0, r0
   28abc:	f380 8811 	msr	BASEPRI, r0
   28ac0:	f04f 0003 	mov.w	r0, #3
   28ac4:	df02      	svc	2
   28ac6:	e626      	b.n	28716 <isr_rx+0x66>
	if (rl_idx != FILTER_IDX_NONE) {
   28ac8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   28acc:	f88d 901c 	strb.w	r9, [sp, #28]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
   28ad0:	f3c2 1880 	ubfx	r8, r2, #6, #1
	if (rl_idx != FILTER_IDX_NONE) {
   28ad4:	d038      	beq.n	28b48 <isr_rx+0x498>
		return (rl_idx == lll->rl_idx);
   28ad6:	7e22      	ldrb	r2, [r4, #24]
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
   28ad8:	4591      	cmp	r9, r2
   28ada:	f43f ae46 	beq.w	2876a <isr_rx+0xba>
   28ade:	e70e      	b.n	288fe <isr_rx+0x24e>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   28ae0:	f01a fa1a 	bl	42f18 <radio_rssi_get>
   28ae4:	b2c0      	uxtb	r0, r0
   28ae6:	e7c6      	b.n	28a76 <isr_rx+0x3c6>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   28ae8:	2b06      	cmp	r3, #6
   28aea:	f43f af0a 	beq.w	28902 <isr_rx+0x252>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   28aee:	2245      	movs	r2, #69	; 0x45
   28af0:	40da      	lsrs	r2, r3
   28af2:	07d0      	lsls	r0, r2, #31
   28af4:	d423      	bmi.n	28b3e <isr_rx+0x48e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   28af6:	7f2b      	ldrb	r3, [r5, #28]
					rl_idx, &dir_report))) ||
   28af8:	f003 030f 	and.w	r3, r3, #15
   28afc:	2b04      	cmp	r3, #4
   28afe:	f47f ade1 	bne.w	286c4 <isr_rx+0x14>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   28b02:	7f6b      	ldrb	r3, [r5, #29]
   28b04:	2b25      	cmp	r3, #37	; 0x25
   28b06:	f63f addd 	bhi.w	286c4 <isr_rx+0x14>
		   (lll->state != 0U) &&
   28b0a:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
   28b0c:	07db      	lsls	r3, r3, #31
   28b0e:	f57f add9 	bpl.w	286c4 <isr_rx+0x14>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   28b12:	f01a f93b 	bl	42d8c <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   28b16:	7f2b      	ldrb	r3, [r5, #28]
   28b18:	7802      	ldrb	r2, [r0, #0]
   28b1a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   28b1e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   28b22:	f47f adcf 	bne.w	286c4 <isr_rx+0x14>
		(memcmp(&sreq->scan_req.adv_addr[0],
   28b26:	3008      	adds	r0, #8
   28b28:	2206      	movs	r2, #6
   28b2a:	f105 011e 	add.w	r1, r5, #30
   28b2e:	f023 f883 	bl	4bc38 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   28b32:	2800      	cmp	r0, #0
   28b34:	f47f adc6 	bne.w	286c4 <isr_rx+0x14>
   28b38:	e77e      	b.n	28a38 <isr_rx+0x388>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   28b3a:	461a      	mov	r2, r3
   28b3c:	e77d      	b.n	28a3a <isr_rx+0x38a>
   28b3e:	7f6a      	ldrb	r2, [r5, #29]
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   28b40:	2a25      	cmp	r2, #37	; 0x25
   28b42:	f67f af7a 	bls.w	28a3a <isr_rx+0x38a>
   28b46:	e5bd      	b.n	286c4 <isr_rx+0x14>
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
   28b48:	f105 0a1e 	add.w	sl, r5, #30
	} else if (!ull_filter_lll_rl_addr_allowed(addr_type, addr, &rl_idx)) {
   28b4c:	aa07      	add	r2, sp, #28
   28b4e:	4651      	mov	r1, sl
   28b50:	4640      	mov	r0, r8
   28b52:	f017 f94d 	bl	3fdf0 <ull_filter_lll_rl_addr_allowed>
   28b56:	2800      	cmp	r0, #0
   28b58:	f43f aece 	beq.w	288f8 <isr_rx+0x248>
	return ((lll->adv_addr_type == addr_type) &&
   28b5c:	7de3      	ldrb	r3, [r4, #23]
   28b5e:	f003 0301 	and.w	r3, r3, #1
   28b62:	4543      	cmp	r3, r8
   28b64:	f47f aec8 	bne.w	288f8 <isr_rx+0x248>
		!memcmp(lll->adv_addr, addr, BDADDR_SIZE));
   28b68:	4651      	mov	r1, sl
   28b6a:	2206      	movs	r2, #6
   28b6c:	f104 0008 	add.w	r0, r4, #8
   28b70:	f023 f862 	bl	4bc38 <memcmp>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
   28b74:	7f2b      	ldrb	r3, [r5, #28]
   28b76:	f003 030f 	and.w	r3, r3, #15
	return ((lll->adv_addr_type == addr_type) &&
   28b7a:	2800      	cmp	r0, #0
   28b7c:	f43f adf5 	beq.w	2876a <isr_rx+0xba>
   28b80:	e6bd      	b.n	288fe <isr_rx+0x24e>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   28b82:	f01a f9c9 	bl	42f18 <radio_rssi_get>
   28b86:	b2c3      	uxtb	r3, r0
   28b88:	e6e4      	b.n	28954 <isr_rx+0x2a4>
			init_tx_addr = lll->init_addr_type;
   28b8a:	7da7      	ldrb	r7, [r4, #22]
			init_addr = lll->init_addr;
   28b8c:	f104 0b19 	add.w	fp, r4, #25
			init_tx_addr = lll->init_addr_type;
   28b90:	f3c7 1780 	ubfx	r7, r7, #6, #1
			init_addr = lll->init_addr;
   28b94:	e623      	b.n	287de <isr_rx+0x12e>
			pdu_tx->tx_addr = lll->init_addr_type;
   28b96:	7da3      	ldrb	r3, [r4, #22]
   28b98:	7832      	ldrb	r2, [r6, #0]
   28b9a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   28b9e:	4630      	mov	r0, r6
   28ba0:	f363 1286 	bfi	r2, r3, #6, #1
   28ba4:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
   28ba8:	f104 0119 	add.w	r1, r4, #25
   28bac:	2206      	movs	r2, #6
   28bae:	f023 f853 	bl	4bc58 <memcpy>
   28bb2:	e708      	b.n	289c6 <isr_rx+0x316>
		LL_ASSERT(!radio_is_ready());
   28bb4:	4a0e      	ldr	r2, [pc, #56]	; (28bf0 <isr_rx+0x540>)
   28bb6:	4911      	ldr	r1, [pc, #68]	; (28bfc <isr_rx+0x54c>)
   28bb8:	480f      	ldr	r0, [pc, #60]	; (28bf8 <isr_rx+0x548>)
   28bba:	f240 4391 	movw	r3, #1169	; 0x491
   28bbe:	f020 ff1c 	bl	499fa <printk>
   28bc2:	4040      	eors	r0, r0
   28bc4:	f380 8811 	msr	BASEPRI, r0
   28bc8:	f04f 0003 	mov.w	r0, #3
   28bcc:	df02      	svc	2
   28bce:	e620      	b.n	28812 <isr_rx+0x162>
		LL_ASSERT(!radio_is_ready());
   28bd0:	4a07      	ldr	r2, [pc, #28]	; (28bf0 <isr_rx+0x540>)
   28bd2:	490a      	ldr	r1, [pc, #40]	; (28bfc <isr_rx+0x54c>)
   28bd4:	4808      	ldr	r0, [pc, #32]	; (28bf8 <isr_rx+0x548>)
   28bd6:	f240 5316 	movw	r3, #1302	; 0x516
   28bda:	f020 ff0e 	bl	499fa <printk>
   28bde:	4040      	eors	r0, r0
   28be0:	f380 8811 	msr	BASEPRI, r0
   28be4:	f04f 0003 	mov.w	r0, #3
   28be8:	df02      	svc	2
   28bea:	e6fb      	b.n	289e4 <isr_rx+0x334>
   28bec:	00041829 	.word	0x00041829
   28bf0:	000536d4 	.word	0x000536d4
   28bf4:	00053688 	.word	0x00053688
   28bf8:	00052a70 	.word	0x00052a70
   28bfc:	00053690 	.word	0x00053690

00028c00 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   28c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28c04:	b08f      	sub	sp, #60	; 0x3c
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
   28c06:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 28ce0 <nrf_flash_sync_exe+0xe0>
{
   28c0a:	900b      	str	r0, [sp, #44]	; 0x2c
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   28c0c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   28c10:	f10d 0036 	add.w	r0, sp, #54	; 0x36
   28c14:	f00e fffa 	bl	37c0c <ll_timeslice_ticker_id_get>
			   HAL_TICKER_US_TO_TICKS(
   28c18:	4f32      	ldr	r7, [pc, #200]	; (28ce4 <nrf_flash_sync_exe+0xe4>)
	err = ticker_start(instance_index,
   28c1a:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
   28c1e:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
   28c22:	f00c fd4d 	bl	356c0 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
   28c26:	f8d8 4000 	ldr.w	r4, [r8]
	err = ticker_start(instance_index,
   28c2a:	900a      	str	r0, [sp, #40]	; 0x28
			   HAL_TICKER_US_TO_TICKS(
   28c2c:	fba4 5407 	umull	r5, r4, r4, r7
   28c30:	a329      	add	r3, pc, #164	; (adr r3, 28cd8 <nrf_flash_sync_exe+0xd8>)
   28c32:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
   28c36:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(
   28c38:	4621      	mov	r1, r4
   28c3a:	4628      	mov	r0, r5
   28c3c:	f7fd fa60 	bl	26100 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
   28c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   28c42:	9306      	str	r3, [sp, #24]
   28c44:	e9cd 6607 	strd	r6, r6, [sp, #28]
   28c48:	4b27      	ldr	r3, [pc, #156]	; (28ce8 <nrf_flash_sync_exe+0xe8>)
   28c4a:	9305      	str	r3, [sp, #20]
			   HAL_TICKER_US_TO_TICKS(
   28c4c:	4681      	mov	r9, r0
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
   28c4e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   28c52:	a321      	add	r3, pc, #132	; (adr r3, 28cd8 <nrf_flash_sync_exe+0xd8>)
   28c54:	e9d3 2300 	ldrd	r2, r3, [r3]
   28c58:	fba0 0107 	umull	r0, r1, r0, r7
   28c5c:	f7fd fa50 	bl	26100 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   28c60:	4b22      	ldr	r3, [pc, #136]	; (28cec <nrf_flash_sync_exe+0xec>)
   28c62:	f029 477f 	bic.w	r7, r9, #4278190080	; 0xff000000
   28c66:	fba7 3103 	umull	r3, r1, r7, r3
	err = ticker_start(instance_index,
   28c6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   28c6e:	2207      	movs	r2, #7
	err = ticker_start(instance_index,
   28c70:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   28c74:	fb02 1107 	mla	r1, r2, r7, r1
   28c78:	1ae8      	subs	r0, r5, r3
   28c7a:	eb64 0101 	sbc.w	r1, r4, r1
   28c7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28c82:	2300      	movs	r3, #0
   28c84:	f7fd fa3c 	bl	26100 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
   28c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28c8a:	9600      	str	r6, [sp, #0]
   28c8c:	e9cd 7001 	strd	r7, r0, [sp, #4]
   28c90:	465a      	mov	r2, fp
   28c92:	2103      	movs	r1, #3
   28c94:	4650      	mov	r0, sl
   28c96:	f00c fbe7 	bl	35468 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   28c9a:	f030 0402 	bics.w	r4, r0, #2
   28c9e:	d116      	bne.n	28cce <nrf_flash_sync_exe+0xce>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   28ca0:	4a13      	ldr	r2, [pc, #76]	; (28cf0 <nrf_flash_sync_exe+0xf0>)
   28ca2:	4814      	ldr	r0, [pc, #80]	; (28cf4 <nrf_flash_sync_exe+0xf4>)
   28ca4:	2300      	movs	r3, #0
   28ca6:	f01f fa09 	bl	480bc <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
   28caa:	b168      	cbz	r0, 28cc8 <nrf_flash_sync_exe+0xc8>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   28cac:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   28cb0:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
   28cb4:	9400      	str	r4, [sp, #0]
   28cb6:	4623      	mov	r3, r4
   28cb8:	2103      	movs	r1, #3
   28cba:	f00c fc61 	bl	35580 <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
   28cbe:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
   28cc2:	b00f      	add	sp, #60	; 0x3c
   28cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
   28cc8:	f8d8 000c 	ldr.w	r0, [r8, #12]
   28ccc:	e7f9      	b.n	28cc2 <nrf_flash_sync_exe+0xc2>
		result = -ECANCELED;
   28cce:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return result;
   28cd2:	e7f6      	b.n	28cc2 <nrf_flash_sync_exe+0xc2>
   28cd4:	f3af 8000 	nop.w
   28cd8:	1afd498d 	.word	0x1afd498d
   28cdc:	00000007 	.word	0x00000007
   28ce0:	20006dc0 	.word	0x20006dc0
   28ce4:	3b9aca00 	.word	0x3b9aca00
   28ce8:	00045431 	.word	0x00045431
   28cec:	1afd498d 	.word	0x1afd498d
   28cf0:	000b7b44 	.word	0x000b7b44
   28cf4:	20006da8 	.word	0x20006da8

00028cf8 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
   28cf8:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
   28cfa:	4d0f      	ldr	r5, [pc, #60]	; (28d38 <nrf_flash_sync_check_time_limit+0x40>)
{
   28cfc:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
   28cfe:	f00c fcdf 	bl	356c0 <ticker_ticks_now_get>
   28d02:	68a9      	ldr	r1, [r5, #8]
   28d04:	f00c fcde 	bl	356c4 <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
   28d08:	6869      	ldr	r1, [r5, #4]
	if (ticks_diff + ticks_diff/iteration >
   28d0a:	fbb0 f4f4 	udiv	r4, r0, r4
   28d0e:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
   28d10:	480a      	ldr	r0, [pc, #40]	; (28d3c <nrf_flash_sync_check_time_limit+0x44>)
   28d12:	a307      	add	r3, pc, #28	; (adr r3, 28d30 <nrf_flash_sync_check_time_limit+0x38>)
   28d14:	e9d3 2300 	ldrd	r2, r3, [r3]
   28d18:	fba1 0100 	umull	r0, r1, r1, r0
   28d1c:	f7fd f9f0 	bl	26100 <__aeabi_uldivmod>
   28d20:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
   28d24:	4284      	cmp	r4, r0
   28d26:	bf94      	ite	ls
   28d28:	2000      	movls	r0, #0
   28d2a:	2001      	movhi	r0, #1
   28d2c:	bd38      	pop	{r3, r4, r5, pc}
   28d2e:	bf00      	nop
   28d30:	1afd498d 	.word	0x1afd498d
   28d34:	00000007 	.word	0x00000007
   28d38:	20006dc0 	.word	0x20006dc0
   28d3c:	3b9aca00 	.word	0x3b9aca00

00028d40 <activity_expiry_function>:
    }
}

K_WORK_DEFINE(activity_work, activity_work_handler);

void activity_expiry_function() { k_work_submit(&activity_work); }
   28d40:	4801      	ldr	r0, [pc, #4]	; (28d48 <activity_expiry_function+0x8>)
   28d42:	f01f bb19 	b.w	48378 <k_work_submit>
   28d46:	bf00      	nop
   28d48:	20000290 	.word	0x20000290

00028d4c <activity_init>:

K_TIMER_DEFINE(activity_timer, activity_expiry_function, NULL);

int activity_init() {
   28d4c:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_uptime_ticks();
   28d4e:	f028 f914 	bl	50f7a <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   28d52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28d56:	fba0 0302 	umull	r0, r3, r0, r2
   28d5a:	fb02 3101 	mla	r1, r2, r1, r3
   28d5e:	0bc0      	lsrs	r0, r0, #15
    activity_last_uptime = k_uptime_get();
   28d60:	4a07      	ldr	r2, [pc, #28]	; (28d80 <activity_init+0x34>)
   28d62:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   28d66:	6010      	str	r0, [r2, #0]

    k_timer_start(&activity_timer, K_SECONDS(1), K_SECONDS(1));
   28d68:	2300      	movs	r3, #0
	compiler_barrier();
   28d6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	z_impl_k_timer_start(timer, duration, period);
   28d6e:	4805      	ldr	r0, [pc, #20]	; (28d84 <activity_init+0x38>)
   28d70:	e9cd 2300 	strd	r2, r3, [sp]
   28d74:	f020 f89e 	bl	48eb4 <z_impl_k_timer_start>
    return 0;
}
   28d78:	2000      	movs	r0, #0
   28d7a:	b003      	add	sp, #12
   28d7c:	f85d fb04 	ldr.w	pc, [sp], #4
   28d80:	200041a0 	.word	0x200041a0
   28d84:	20001050 	.word	0x20001050

00028d88 <raise_event>:
int raise_event() {
   28d88:	b508      	push	{r3, lr}
    return ZMK_EVENT_RAISE(new_zmk_activity_state_changed(
   28d8a:	4b04      	ldr	r3, [pc, #16]	; (28d9c <raise_event+0x14>)
   28d8c:	7818      	ldrb	r0, [r3, #0]
   28d8e:	f000 f8e5 	bl	28f5c <new_zmk_activity_state_changed>
}
   28d92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return ZMK_EVENT_RAISE(new_zmk_activity_state_changed(
   28d96:	f020 b99a 	b.w	490ce <zmk_event_manager_raise>
   28d9a:	bf00      	nop
   28d9c:	200072da 	.word	0x200072da

00028da0 <set_state>:
    if (activity_state == state)
   28da0:	4b04      	ldr	r3, [pc, #16]	; (28db4 <set_state+0x14>)
   28da2:	781a      	ldrb	r2, [r3, #0]
   28da4:	4282      	cmp	r2, r0
   28da6:	d002      	beq.n	28dae <set_state+0xe>
    activity_state = state;
   28da8:	7018      	strb	r0, [r3, #0]
    return raise_event();
   28daa:	f7ff bfed 	b.w	28d88 <raise_event>
}
   28dae:	2000      	movs	r0, #0
   28db0:	4770      	bx	lr
   28db2:	bf00      	nop
   28db4:	200072da 	.word	0x200072da

00028db8 <activity_event_listener>:
int activity_event_listener(const zmk_event_t *eh) {
   28db8:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   28dba:	f028 f8de 	bl	50f7a <z_impl_k_uptime_ticks>
   28dbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28dc2:	fba0 0302 	umull	r0, r3, r0, r2
   28dc6:	fb02 3101 	mla	r1, r2, r1, r3
   28dca:	0bc0      	lsrs	r0, r0, #15
    activity_last_uptime = k_uptime_get();
   28dcc:	4a04      	ldr	r2, [pc, #16]	; (28de0 <activity_event_listener+0x28>)
   28dce:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   28dd2:	6010      	str	r0, [r2, #0]
}
   28dd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return set_state(ZMK_ACTIVITY_ACTIVE);
   28dd8:	2000      	movs	r0, #0
   28dda:	f7ff bfe1 	b.w	28da0 <set_state>
   28dde:	bf00      	nop
   28de0:	200041a0 	.word	0x200041a0

00028de4 <activity_work_handler>:
void activity_work_handler(struct k_work *work) {
   28de4:	b508      	push	{r3, lr}
   28de6:	f028 f8c8 	bl	50f7a <z_impl_k_uptime_ticks>
   28dea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28dee:	fba0 0302 	umull	r0, r3, r0, r2
   28df2:	fb02 3101 	mla	r1, r2, r1, r3
    int32_t inactive_time = current - activity_last_uptime;
   28df6:	4a08      	ldr	r2, [pc, #32]	; (28e18 <activity_work_handler+0x34>)
   28df8:	0bc3      	lsrs	r3, r0, #15
   28dfa:	6812      	ldr	r2, [r2, #0]
   28dfc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   28e00:	1a9b      	subs	r3, r3, r2
        if (inactive_time > MAX_IDLE_MS) {
   28e02:	f247 5230 	movw	r2, #30000	; 0x7530
   28e06:	4293      	cmp	r3, r2
   28e08:	dd04      	ble.n	28e14 <activity_work_handler+0x30>
}
   28e0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_state(ZMK_ACTIVITY_IDLE);
   28e0e:	2001      	movs	r0, #1
   28e10:	f7ff bfc6 	b.w	28da0 <set_state>
}
   28e14:	bd08      	pop	{r3, pc}
   28e16:	bf00      	nop
   28e18:	200041a0 	.word	0x200041a0

00028e1c <zmk_kscan_process_msgq>:

    k_msgq_put(&zmk_kscan_msgq, &ev, K_NO_WAIT);
    k_work_submit(&msg_processor.work);
}

void zmk_kscan_process_msgq(struct k_work *item) {
   28e1c:	b530      	push	{r4, r5, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   28e1e:	4c18      	ldr	r4, [pc, #96]	; (28e80 <zmk_kscan_process_msgq+0x64>)
   28e20:	b08d      	sub	sp, #52	; 0x34
   28e22:	2200      	movs	r2, #0
   28e24:	2300      	movs	r3, #0
   28e26:	a903      	add	r1, sp, #12
   28e28:	4620      	mov	r0, r4
   28e2a:	f01e ffd9 	bl	47de0 <z_impl_k_msgq_get>
    struct zmk_kscan_event ev;

    while (k_msgq_get(&zmk_kscan_msgq, &ev, K_NO_WAIT) == 0) {
   28e2e:	b108      	cbz	r0, 28e34 <zmk_kscan_process_msgq+0x18>
            (struct zmk_position_state_changed){.source = ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL,
                                                .state = pressed,
                                                .position = position,
                                                .timestamp = k_uptime_get()}));
    }
}
   28e30:	b00d      	add	sp, #52	; 0x34
   28e32:	bd30      	pop	{r4, r5, pc}
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
   28e34:	9d05      	ldr	r5, [sp, #20]
        uint32_t position = zmk_matrix_transform_row_column_to_position(ev.row, ev.column);
   28e36:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   28e3a:	f000 f857 	bl	28eec <zmk_matrix_transform_row_column_to_position>
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
   28e3e:	fab5 f585 	clz	r5, r5
   28e42:	096d      	lsrs	r5, r5, #5
        ZMK_EVENT_RAISE(new_zmk_position_state_changed(
   28e44:	23ff      	movs	r3, #255	; 0xff
   28e46:	f88d 3018 	strb.w	r3, [sp, #24]
   28e4a:	9007      	str	r0, [sp, #28]
   28e4c:	f88d 5020 	strb.w	r5, [sp, #32]
	return z_impl_k_uptime_ticks();
   28e50:	f028 f893 	bl	50f7a <z_impl_k_uptime_ticks>
   28e54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28e58:	fba0 0302 	umull	r0, r3, r0, r2
   28e5c:	fb02 3101 	mla	r1, r2, r1, r3
   28e60:	0bc0      	lsrs	r0, r0, #15
   28e62:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   28e66:	0bc9      	lsrs	r1, r1, #15
   28e68:	e88d 0003 	stmia.w	sp, {r0, r1}
   28e6c:	ab06      	add	r3, sp, #24
   28e6e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   28e72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   28e74:	f000 f87e 	bl	28f74 <new_zmk_position_state_changed>
   28e78:	f020 f929 	bl	490ce <zmk_event_manager_raise>
                                                .timestamp = k_uptime_get()}));
   28e7c:	e7d1      	b.n	28e22 <zmk_kscan_process_msgq+0x6>
   28e7e:	bf00      	nop
   28e80:	2000122c 	.word	0x2000122c

00028e84 <zmk_kscan_callback>:
                               bool pressed) {
   28e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        .state = (pressed ? ZMK_KSCAN_EVENT_STATE_PRESSED : ZMK_KSCAN_EVENT_STATE_RELEASED)};
   28e86:	f083 0301 	eor.w	r3, r3, #1
    struct zmk_kscan_event ev = {
   28e8a:	e9cd 1201 	strd	r1, r2, [sp, #4]
        .state = (pressed ? ZMK_KSCAN_EVENT_STATE_PRESSED : ZMK_KSCAN_EVENT_STATE_RELEASED)};
   28e8e:	9303      	str	r3, [sp, #12]
	return z_impl_k_msgq_put(msgq, data, timeout);
   28e90:	2200      	movs	r2, #0
   28e92:	2300      	movs	r3, #0
   28e94:	a901      	add	r1, sp, #4
   28e96:	4804      	ldr	r0, [pc, #16]	; (28ea8 <zmk_kscan_callback+0x24>)
   28e98:	f01e ff4c 	bl	47d34 <z_impl_k_msgq_put>
    k_work_submit(&msg_processor.work);
   28e9c:	4803      	ldr	r0, [pc, #12]	; (28eac <zmk_kscan_callback+0x28>)
   28e9e:	f01f fa6b 	bl	48378 <k_work_submit>
}
   28ea2:	b005      	add	sp, #20
   28ea4:	f85d fb04 	ldr.w	pc, [sp], #4
   28ea8:	2000122c 	.word	0x2000122c
   28eac:	200041a4 	.word	0x200041a4

00028eb0 <zmk_kscan_init>:

int zmk_kscan_init(char *name) {
   28eb0:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   28eb2:	f01e fd15 	bl	478e0 <z_impl_device_get_binding>
    const struct device *dev = device_get_binding(name);
    if (dev == NULL) {
   28eb6:	4604      	mov	r4, r0
   28eb8:	b178      	cbz	r0, 28eda <zmk_kscan_init+0x2a>
        LOG_ERR("Failed to get the KSCAN device");
        return -EINVAL;
    }

    k_work_init(&msg_processor.work, zmk_kscan_process_msgq);
   28eba:	4909      	ldr	r1, [pc, #36]	; (28ee0 <zmk_kscan_init+0x30>)
   28ebc:	4809      	ldr	r0, [pc, #36]	; (28ee4 <zmk_kscan_init+0x34>)
   28ebe:	f027 fe78 	bl	50bb2 <k_work_init>
					kscan_callback_t callback)
{
	const struct kscan_driver_api *api =
				(struct kscan_driver_api *)dev->api;

	return api->config(dev, callback);
   28ec2:	68a3      	ldr	r3, [r4, #8]
   28ec4:	4908      	ldr	r1, [pc, #32]	; (28ee8 <zmk_kscan_init+0x38>)
   28ec6:	681b      	ldr	r3, [r3, #0]
   28ec8:	4620      	mov	r0, r4
   28eca:	4798      	blx	r3
static inline int z_impl_kscan_enable_callback(const struct device *dev)
{
	const struct kscan_driver_api *api =
			(const struct kscan_driver_api *)dev->api;

	if (api->enable_callback == NULL) {
   28ecc:	68a3      	ldr	r3, [r4, #8]
   28ece:	689b      	ldr	r3, [r3, #8]
   28ed0:	b10b      	cbz	r3, 28ed6 <zmk_kscan_init+0x26>
		return -ENOSYS;
	}

	return api->enable_callback(dev);
   28ed2:	4620      	mov	r0, r4
   28ed4:	4798      	blx	r3

    kscan_config(dev, zmk_kscan_callback);
    kscan_enable_callback(dev);

    return 0;
   28ed6:	2000      	movs	r0, #0
}
   28ed8:	bd10      	pop	{r4, pc}
        return -EINVAL;
   28eda:	f06f 0015 	mvn.w	r0, #21
   28ede:	e7fb      	b.n	28ed8 <zmk_kscan_init+0x28>
   28ee0:	00028e1d 	.word	0x00028e1d
   28ee4:	200041a4 	.word	0x200041a4
   28ee8:	00028e85 	.word	0x00028e85

00028eec <zmk_matrix_transform_row_column_to_position>:
#endif

    matrix_index = (row * ZMK_MATRIX_COLS) + column;

#ifdef ZMK_KEYMAP_TRANSFORM_NODE
    return transform[matrix_index];
   28eec:	230a      	movs	r3, #10
   28eee:	fb03 1100 	mla	r1, r3, r0, r1
#else
    return matrix_index;
#endif /* ZMK_KEYMAP_TRANSFORM_NODE */
};
   28ef2:	4b02      	ldr	r3, [pc, #8]	; (28efc <zmk_matrix_transform_row_column_to_position+0x10>)
   28ef4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   28ef8:	4770      	bx	lr
   28efa:	bf00      	nop
   28efc:	000519ec 	.word	0x000519ec

00028f00 <zmk_event_manager_handle_from>:
extern struct zmk_event_type *__event_type_end[];

extern struct zmk_event_subscription __event_subscriptions_start[];
extern struct zmk_event_subscription __event_subscriptions_end[];

int zmk_event_manager_handle_from(zmk_event_t *event, uint8_t start_index) {
   28f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret = 0;
    uint8_t len = __event_subscriptions_end - __event_subscriptions_start;
   28f04:	4b13      	ldr	r3, [pc, #76]	; (28f54 <zmk_event_manager_handle_from+0x54>)
   28f06:	4e14      	ldr	r6, [pc, #80]	; (28f58 <zmk_event_manager_handle_from+0x58>)
   28f08:	eba3 0806 	sub.w	r8, r3, r6
int zmk_event_manager_handle_from(zmk_event_t *event, uint8_t start_index) {
   28f0c:	4607      	mov	r7, r0
    for (int i = start_index; i < len; i++) {
   28f0e:	460d      	mov	r5, r1
   28f10:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
   28f14:	f3c8 08c7 	ubfx	r8, r8, #3, #8
   28f18:	45a8      	cmp	r8, r5
   28f1a:	dc06      	bgt.n	28f2a <zmk_event_manager_handle_from+0x2a>
        switch (ret) {
        case ZMK_EV_EVENT_BUBBLE:
            continue;
        case ZMK_EV_EVENT_HANDLED:
            LOG_DBG("Listener handled the event");
            ret = 0;
   28f1c:	2400      	movs	r4, #0
            goto release;
        }
    }

release:
    k_free(event);
   28f1e:	4638      	mov	r0, r7
   28f20:	f028 f9d1 	bl	512c6 <k_free>
    return ret;
}
   28f24:	4620      	mov	r0, r4
   28f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (ev_sub->event_type != event->event) {
   28f2a:	6832      	ldr	r2, [r6, #0]
   28f2c:	683b      	ldr	r3, [r7, #0]
   28f2e:	429a      	cmp	r2, r3
   28f30:	d10b      	bne.n	28f4a <zmk_event_manager_handle_from+0x4a>
        event->last_listener_index = i;
   28f32:	713d      	strb	r5, [r7, #4]
        ret = ev_sub->listener->callback(event);
   28f34:	6873      	ldr	r3, [r6, #4]
   28f36:	4638      	mov	r0, r7
   28f38:	681b      	ldr	r3, [r3, #0]
   28f3a:	4798      	blx	r3
        switch (ret) {
   28f3c:	2801      	cmp	r0, #1
        ret = ev_sub->listener->callback(event);
   28f3e:	4604      	mov	r4, r0
        switch (ret) {
   28f40:	d0ec      	beq.n	28f1c <zmk_event_manager_handle_from+0x1c>
   28f42:	2802      	cmp	r0, #2
   28f44:	d004      	beq.n	28f50 <zmk_event_manager_handle_from+0x50>
   28f46:	2800      	cmp	r0, #0
   28f48:	d1e9      	bne.n	28f1e <zmk_event_manager_handle_from+0x1e>
    for (int i = start_index; i < len; i++) {
   28f4a:	3501      	adds	r5, #1
   28f4c:	3608      	adds	r6, #8
   28f4e:	e7e3      	b.n	28f18 <zmk_event_manager_handle_from+0x18>
        switch (ret) {
   28f50:	2400      	movs	r4, #0
   28f52:	e7e7      	b.n	28f24 <zmk_event_manager_handle_from+0x24>
   28f54:	0005440c 	.word	0x0005440c
   28f58:	000543cc 	.word	0x000543cc

00028f5c <new_zmk_activity_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/activity_state_changed.h>

   28f5c:	b510      	push	{r4, lr}
   28f5e:	4604      	mov	r4, r0
   28f60:	200c      	movs	r0, #12
   28f62:	f028 f9b7 	bl	512d4 <k_malloc>
   28f66:	4a02      	ldr	r2, [pc, #8]	; (28f70 <new_zmk_activity_state_changed+0x14>)
   28f68:	6002      	str	r2, [r0, #0]
   28f6a:	7204      	strb	r4, [r0, #8]
   28f6c:	bd10      	pop	{r4, pc}
   28f6e:	bf00      	nop
   28f70:	00051a84 	.word	0x00051a84

00028f74 <new_zmk_position_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/position_state_changed.h>

   28f74:	b084      	sub	sp, #16
   28f76:	b570      	push	{r4, r5, r6, lr}
   28f78:	ac04      	add	r4, sp, #16
   28f7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   28f7e:	2020      	movs	r0, #32
   28f80:	f028 f9a8 	bl	512d4 <k_malloc>
   28f84:	4604      	mov	r4, r0
   28f86:	4b08      	ldr	r3, [pc, #32]	; (28fa8 <new_zmk_position_state_changed+0x34>)
   28f88:	f844 3b08 	str.w	r3, [r4], #8
   28f8c:	ad04      	add	r5, sp, #16
   28f8e:	4606      	mov	r6, r0
   28f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   28f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   28f94:	e895 0003 	ldmia.w	r5, {r0, r1}
   28f98:	e884 0003 	stmia.w	r4, {r0, r1}
   28f9c:	4630      	mov	r0, r6
   28f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   28fa2:	b004      	add	sp, #16
   28fa4:	4770      	bx	lr
   28fa6:	bf00      	nop
   28fa8:	00051a88 	.word	0x00051a88

00028fac <as_zmk_position_state_changed>:
   28fac:	6802      	ldr	r2, [r0, #0]
   28fae:	4b03      	ldr	r3, [pc, #12]	; (28fbc <as_zmk_position_state_changed+0x10>)
   28fb0:	429a      	cmp	r2, r3
   28fb2:	bf0c      	ite	eq
   28fb4:	3008      	addeq	r0, #8
   28fb6:	2000      	movne	r0, #0
   28fb8:	4770      	bx	lr
   28fba:	bf00      	nop
   28fbc:	00051a88 	.word	0x00051a88

00028fc0 <new_zmk_usb_conn_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/usb_conn_state_changed.h>

   28fc0:	b510      	push	{r4, lr}
   28fc2:	4604      	mov	r4, r0
   28fc4:	200c      	movs	r0, #12
   28fc6:	f028 f985 	bl	512d4 <k_malloc>
   28fca:	4a02      	ldr	r2, [pc, #8]	; (28fd4 <new_zmk_usb_conn_state_changed+0x14>)
   28fcc:	6002      	str	r2, [r0, #0]
   28fce:	7204      	strb	r4, [r0, #8]
   28fd0:	bd10      	pop	{r4, pc}
   28fd2:	bf00      	nop
   28fd4:	00051a90 	.word	0x00051a90

00028fd8 <on_keymap_binding_pressed>:

    return 0;
}

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   28fd8:	b082      	sub	sp, #8
   28fda:	b538      	push	{r3, r4, r5, lr}
   28fdc:	a904      	add	r1, sp, #16
   28fde:	e881 000c 	stmia.w	r1, {r2, r3}
   28fe2:	4605      	mov	r5, r0
   28fe4:	4811      	ldr	r0, [pc, #68]	; (2902c <on_keymap_binding_pressed+0x54>)
   28fe6:	f01e fc7b 	bl	478e0 <z_impl_device_get_binding>
   28fea:	4604      	mov	r4, r0
    const struct device *ext_power = device_get_binding("EXT_POWER");
    if (ext_power == NULL) {
   28fec:	b1a0      	cbz	r0, 29018 <on_keymap_binding_pressed+0x40>
        LOG_ERR("Unable to retrieve ext_power device: %d", binding->param1);
        return -EIO;
    }

    switch (binding->param1) {
   28fee:	686b      	ldr	r3, [r5, #4]
   28ff0:	2b01      	cmp	r3, #1
   28ff2:	d00c      	beq.n	2900e <on_keymap_binding_pressed+0x36>
   28ff4:	2b02      	cmp	r3, #2
   28ff6:	d005      	beq.n	29004 <on_keymap_binding_pressed+0x2c>
   28ff8:	b9a3      	cbnz	r3, 29024 <on_keymap_binding_pressed+0x4c>
    default:
        LOG_ERR("Unknown ext_power command: %d", binding->param1);
    }

    return -ENOTSUP;
}
   28ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   28ffe:	b002      	add	sp, #8
            return ext_power_disable(ext_power);
   29000:	f020 b87d 	b.w	490fe <ext_power_disable>
        if (ext_power_get(ext_power) > 0)
   29004:	f020 f882 	bl	4910c <ext_power_get>
   29008:	2800      	cmp	r0, #0
            return ext_power_disable(ext_power);
   2900a:	4620      	mov	r0, r4
        if (ext_power_get(ext_power) > 0)
   2900c:	dcf5      	bgt.n	28ffa <on_keymap_binding_pressed+0x22>
}
   2900e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29012:	b002      	add	sp, #8
            return ext_power_enable(ext_power);
   29014:	f020 b86c 	b.w	490f0 <ext_power_enable>
        return -EIO;
   29018:	f06f 0004 	mvn.w	r0, #4
}
   2901c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29020:	b002      	add	sp, #8
   29022:	4770      	bx	lr
    switch (binding->param1) {
   29024:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29028:	e7f8      	b.n	2901c <on_keymap_binding_pressed+0x44>
   2902a:	bf00      	nop
   2902c:	00053be9 	.word	0x00053be9

00029030 <on_keymap_binding_convert_central_state_dependent_params>:
                                                         struct zmk_behavior_binding_event event) {
   29030:	b082      	sub	sp, #8
   29032:	b510      	push	{r4, lr}
   29034:	a902      	add	r1, sp, #8
   29036:	e881 000c 	stmia.w	r1, {r2, r3}
   2903a:	4604      	mov	r4, r0
   2903c:	480b      	ldr	r0, [pc, #44]	; (2906c <on_keymap_binding_convert_central_state_dependent_params+0x3c>)
   2903e:	f01e fc4f 	bl	478e0 <z_impl_device_get_binding>
    if (ext_power == NULL) {
   29042:	b178      	cbz	r0, 29064 <on_keymap_binding_convert_central_state_dependent_params+0x34>
    if (binding->param1 == EXT_POWER_TOGGLE_CMD) {
   29044:	6863      	ldr	r3, [r4, #4]
   29046:	2b02      	cmp	r3, #2
   29048:	d004      	beq.n	29054 <on_keymap_binding_convert_central_state_dependent_params+0x24>
    return 0;
   2904a:	2000      	movs	r0, #0
}
   2904c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29050:	b002      	add	sp, #8
   29052:	4770      	bx	lr
        binding->param1 = ext_power_get(ext_power) > 0 ? EXT_POWER_OFF_CMD : EXT_POWER_ON_CMD;
   29054:	f020 f85a 	bl	4910c <ext_power_get>
   29058:	2800      	cmp	r0, #0
   2905a:	bfcc      	ite	gt
   2905c:	2000      	movgt	r0, #0
   2905e:	2001      	movle	r0, #1
   29060:	6060      	str	r0, [r4, #4]
   29062:	e7f2      	b.n	2904a <on_keymap_binding_convert_central_state_dependent_params+0x1a>
        return -EIO;
   29064:	f06f 0004 	mvn.w	r0, #4
   29068:	e7f0      	b.n	2904c <on_keymap_binding_convert_central_state_dependent_params+0x1c>
   2906a:	bf00      	nop
   2906c:	00053be9 	.word	0x00053be9

00029070 <zmk_hid_register_mod>:
#define GET_MODIFIERS (keyboard_report.body.modifiers)

zmk_mod_flags_t zmk_hid_get_explicit_mods() { return explicit_modifiers; }

int zmk_hid_register_mod(zmk_mod_t modifier) {
    explicit_modifier_counts[modifier]++;
   29070:	4a0d      	ldr	r2, [pc, #52]	; (290a8 <zmk_hid_register_mod+0x38>)
   29072:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   29076:	3301      	adds	r3, #1
   29078:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    LOG_DBG("Modifier %d count %d", modifier, explicit_modifier_counts[modifier]);
    WRITE_BIT(explicit_modifiers, modifier, true);
   2907c:	4a0b      	ldr	r2, [pc, #44]	; (290ac <zmk_hid_register_mod+0x3c>)
   2907e:	2301      	movs	r3, #1
   29080:	7811      	ldrb	r1, [r2, #0]
   29082:	4083      	lsls	r3, r0
   29084:	430b      	orrs	r3, r1
    zmk_mod_flags_t current = GET_MODIFIERS;
    SET_MODIFIERS(explicit_modifiers);
   29086:	490a      	ldr	r1, [pc, #40]	; (290b0 <zmk_hid_register_mod+0x40>)
   29088:	7809      	ldrb	r1, [r1, #0]
    WRITE_BIT(explicit_modifiers, modifier, true);
   2908a:	b2db      	uxtb	r3, r3
   2908c:	7013      	strb	r3, [r2, #0]
    SET_MODIFIERS(explicit_modifiers);
   2908e:	ea23 0301 	bic.w	r3, r3, r1
   29092:	4908      	ldr	r1, [pc, #32]	; (290b4 <zmk_hid_register_mod+0x44>)
    zmk_mod_flags_t current = GET_MODIFIERS;
   29094:	4a08      	ldr	r2, [pc, #32]	; (290b8 <zmk_hid_register_mod+0x48>)
    SET_MODIFIERS(explicit_modifiers);
   29096:	7809      	ldrb	r1, [r1, #0]
    zmk_mod_flags_t current = GET_MODIFIERS;
   29098:	7850      	ldrb	r0, [r2, #1]
    SET_MODIFIERS(explicit_modifiers);
   2909a:	430b      	orrs	r3, r1
    return current == GET_MODIFIERS ? 0 : 1;
}
   2909c:	1a18      	subs	r0, r3, r0
    SET_MODIFIERS(explicit_modifiers);
   2909e:	7053      	strb	r3, [r2, #1]
}
   290a0:	bf18      	it	ne
   290a2:	2001      	movne	r0, #1
   290a4:	4770      	bx	lr
   290a6:	bf00      	nop
   290a8:	200041b4 	.word	0x200041b4
   290ac:	200072dd 	.word	0x200072dd
   290b0:	200072db 	.word	0x200072db
   290b4:	200072dc 	.word	0x200072dc
   290b8:	20000fd9 	.word	0x20000fd9

000290bc <zmk_hid_unregister_mod>:

int zmk_hid_unregister_mod(zmk_mod_t modifier) {
    if (explicit_modifier_counts[modifier] <= 0) {
   290bc:	4a11      	ldr	r2, [pc, #68]	; (29104 <zmk_hid_unregister_mod+0x48>)
   290be:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   290c2:	2b00      	cmp	r3, #0
int zmk_hid_unregister_mod(zmk_mod_t modifier) {
   290c4:	b510      	push	{r4, lr}
    if (explicit_modifier_counts[modifier] <= 0) {
   290c6:	dd19      	ble.n	290fc <zmk_hid_unregister_mod+0x40>
        LOG_ERR("Tried to unregister modifier %d too often", modifier);
        return -EINVAL;
    }
    explicit_modifier_counts[modifier]--;
   290c8:	3b01      	subs	r3, #1
   290ca:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    LOG_DBG("Modifier %d count: %d", modifier, explicit_modifier_counts[modifier]);
    if (explicit_modifier_counts[modifier] == 0) {
   290ce:	4a0e      	ldr	r2, [pc, #56]	; (29108 <zmk_hid_unregister_mod+0x4c>)
   290d0:	b92b      	cbnz	r3, 290de <zmk_hid_unregister_mod+0x22>
        LOG_DBG("Modifier %d released", modifier);
        WRITE_BIT(explicit_modifiers, modifier, false);
   290d2:	7813      	ldrb	r3, [r2, #0]
   290d4:	2101      	movs	r1, #1
   290d6:	4081      	lsls	r1, r0
   290d8:	ea23 0301 	bic.w	r3, r3, r1
   290dc:	7013      	strb	r3, [r2, #0]
    }
    zmk_mod_flags_t current = GET_MODIFIERS;
    SET_MODIFIERS(explicit_modifiers);
   290de:	480b      	ldr	r0, [pc, #44]	; (2910c <zmk_hid_unregister_mod+0x50>)
    zmk_mod_flags_t current = GET_MODIFIERS;
   290e0:	4b0b      	ldr	r3, [pc, #44]	; (29110 <zmk_hid_unregister_mod+0x54>)
    SET_MODIFIERS(explicit_modifiers);
   290e2:	7804      	ldrb	r4, [r0, #0]
   290e4:	7810      	ldrb	r0, [r2, #0]
   290e6:	4a0b      	ldr	r2, [pc, #44]	; (29114 <zmk_hid_unregister_mod+0x58>)
    zmk_mod_flags_t current = GET_MODIFIERS;
   290e8:	7859      	ldrb	r1, [r3, #1]
    SET_MODIFIERS(explicit_modifiers);
   290ea:	7812      	ldrb	r2, [r2, #0]
   290ec:	ea20 0004 	bic.w	r0, r0, r4
   290f0:	4310      	orrs	r0, r2
   290f2:	7058      	strb	r0, [r3, #1]
    return current == GET_MODIFIERS ? 0 : 1;
   290f4:	1a40      	subs	r0, r0, r1
   290f6:	bf18      	it	ne
   290f8:	2001      	movne	r0, #1
}
   290fa:	bd10      	pop	{r4, pc}
        return -EINVAL;
   290fc:	f06f 0015 	mvn.w	r0, #21
   29100:	e7fb      	b.n	290fa <zmk_hid_unregister_mod+0x3e>
   29102:	bf00      	nop
   29104:	200041b4 	.word	0x200041b4
   29108:	200072dd 	.word	0x200072dd
   2910c:	200072db 	.word	0x200072db
   29110:	20000fd9 	.word	0x20000fd9
   29114:	200072dc 	.word	0x200072dc

00029118 <zmk_hid_implicit_modifiers_press>:
        if (val) {                                                                                 \
            break;                                                                                 \
        }                                                                                          \
    }

int zmk_hid_implicit_modifiers_press(zmk_mod_flags_t new_implicit_modifiers) {
   29118:	b510      	push	{r4, lr}
    implicit_modifiers = new_implicit_modifiers;
   2911a:	4b08      	ldr	r3, [pc, #32]	; (2913c <zmk_hid_implicit_modifiers_press+0x24>)
    zmk_mod_flags_t current = GET_MODIFIERS;
   2911c:	4a08      	ldr	r2, [pc, #32]	; (29140 <zmk_hid_implicit_modifiers_press+0x28>)
    implicit_modifiers = new_implicit_modifiers;
   2911e:	7018      	strb	r0, [r3, #0]
    SET_MODIFIERS(explicit_modifiers);
   29120:	4b08      	ldr	r3, [pc, #32]	; (29144 <zmk_hid_implicit_modifiers_press+0x2c>)
    zmk_mod_flags_t current = GET_MODIFIERS;
   29122:	7851      	ldrb	r1, [r2, #1]
    SET_MODIFIERS(explicit_modifiers);
   29124:	781c      	ldrb	r4, [r3, #0]
   29126:	4b08      	ldr	r3, [pc, #32]	; (29148 <zmk_hid_implicit_modifiers_press+0x30>)
   29128:	781b      	ldrb	r3, [r3, #0]
   2912a:	ea23 0304 	bic.w	r3, r3, r4
   2912e:	4318      	orrs	r0, r3
   29130:	7050      	strb	r0, [r2, #1]
    return current == GET_MODIFIERS ? 0 : 1;
}
   29132:	1a40      	subs	r0, r0, r1
   29134:	bf18      	it	ne
   29136:	2001      	movne	r0, #1
   29138:	bd10      	pop	{r4, pc}
   2913a:	bf00      	nop
   2913c:	200072dc 	.word	0x200072dc
   29140:	20000fd9 	.word	0x20000fd9
   29144:	200072db 	.word	0x200072db
   29148:	200072dd 	.word	0x200072dd

0002914c <zmk_hid_implicit_modifiers_release>:

int zmk_hid_implicit_modifiers_release() {
    implicit_modifiers = 0;
   2914c:	4b07      	ldr	r3, [pc, #28]	; (2916c <zmk_hid_implicit_modifiers_release+0x20>)
   2914e:	2200      	movs	r2, #0
   29150:	701a      	strb	r2, [r3, #0]
    zmk_mod_flags_t current = GET_MODIFIERS;
    SET_MODIFIERS(explicit_modifiers);
   29152:	4b07      	ldr	r3, [pc, #28]	; (29170 <zmk_hid_implicit_modifiers_release+0x24>)
    zmk_mod_flags_t current = GET_MODIFIERS;
   29154:	4a07      	ldr	r2, [pc, #28]	; (29174 <zmk_hid_implicit_modifiers_release+0x28>)
    SET_MODIFIERS(explicit_modifiers);
   29156:	7819      	ldrb	r1, [r3, #0]
   29158:	4b07      	ldr	r3, [pc, #28]	; (29178 <zmk_hid_implicit_modifiers_release+0x2c>)
    zmk_mod_flags_t current = GET_MODIFIERS;
   2915a:	7850      	ldrb	r0, [r2, #1]
    SET_MODIFIERS(explicit_modifiers);
   2915c:	781b      	ldrb	r3, [r3, #0]
   2915e:	ea23 0301 	bic.w	r3, r3, r1
    return current == GET_MODIFIERS ? 0 : 1;
}
   29162:	1a18      	subs	r0, r3, r0
    SET_MODIFIERS(explicit_modifiers);
   29164:	7053      	strb	r3, [r2, #1]
}
   29166:	bf18      	it	ne
   29168:	2001      	movne	r0, #1
   2916a:	4770      	bx	lr
   2916c:	200072dc 	.word	0x200072dc
   29170:	200072db 	.word	0x200072db
   29174:	20000fd9 	.word	0x20000fd9
   29178:	200072dd 	.word	0x200072dd

0002917c <zmk_hid_keyboard_press>:
    SET_MODIFIERS(explicit_modifiers);
    return current == GET_MODIFIERS ? 0 : 1;
}

int zmk_hid_keyboard_press(zmk_key_t code) {
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   2917c:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
   29180:	2b07      	cmp	r3, #7
   29182:	d803      	bhi.n	2918c <zmk_hid_keyboard_press+0x10>
        return zmk_hid_register_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
   29184:	3020      	adds	r0, #32
   29186:	b2c0      	uxtb	r0, r0
   29188:	f7ff bf72 	b.w	29070 <zmk_hid_register_mod>
   2918c:	4b06      	ldr	r3, [pc, #24]	; (291a8 <zmk_hid_keyboard_press+0x2c>)
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   2918e:	2206      	movs	r2, #6
    TOGGLE_KEYBOARD(0U, usage);
   29190:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   29194:	b119      	cbz	r1, 2919e <zmk_hid_keyboard_press+0x22>
   29196:	3a01      	subs	r2, #1
   29198:	d1fa      	bne.n	29190 <zmk_hid_keyboard_press+0x14>
    }
    select_keyboard_usage(code);
    return 0;
};
   2919a:	2000      	movs	r0, #0
   2919c:	4770      	bx	lr
    TOGGLE_KEYBOARD(0U, usage);
   2919e:	7018      	strb	r0, [r3, #0]
   291a0:	2800      	cmp	r0, #0
   291a2:	d0f8      	beq.n	29196 <zmk_hid_keyboard_press+0x1a>
   291a4:	e7f9      	b.n	2919a <zmk_hid_keyboard_press+0x1e>
   291a6:	bf00      	nop
   291a8:	20000fdb 	.word	0x20000fdb

000291ac <zmk_hid_keyboard_release>:

int zmk_hid_keyboard_release(zmk_key_t code) {
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   291ac:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
   291b0:	2b07      	cmp	r3, #7
int zmk_hid_keyboard_release(zmk_key_t code) {
   291b2:	b410      	push	{r4}
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   291b4:	d804      	bhi.n	291c0 <zmk_hid_keyboard_release+0x14>
        return zmk_hid_unregister_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
   291b6:	3020      	adds	r0, #32
    }
    deselect_keyboard_usage(code);
    return 0;
};
   291b8:	bc10      	pop	{r4}
        return zmk_hid_unregister_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
   291ba:	b2c0      	uxtb	r0, r0
   291bc:	f7ff bf7e 	b.w	290bc <zmk_hid_unregister_mod>
    TOGGLE_KEYBOARD(usage, 0U);
   291c0:	2300      	movs	r3, #0
   291c2:	4a06      	ldr	r2, [pc, #24]	; (291dc <zmk_hid_keyboard_release+0x30>)
   291c4:	4619      	mov	r1, r3
   291c6:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   291ca:	3301      	adds	r3, #1
   291cc:	42a0      	cmp	r0, r4
   291ce:	bf08      	it	eq
   291d0:	7011      	strbeq	r1, [r2, #0]
   291d2:	2b06      	cmp	r3, #6
   291d4:	d1f7      	bne.n	291c6 <zmk_hid_keyboard_release+0x1a>
};
   291d6:	2000      	movs	r0, #0
   291d8:	bc10      	pop	{r4}
   291da:	4770      	bx	lr
   291dc:	20000fdb 	.word	0x20000fdb

000291e0 <zmk_hid_keyboard_clear>:
        return zmk_hid_mod_is_pressed(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
    }
    return check_keyboard_usage(code);
}

void zmk_hid_keyboard_clear() { memset(&keyboard_report.body, 0, sizeof(keyboard_report.body)); }
   291e0:	4802      	ldr	r0, [pc, #8]	; (291ec <zmk_hid_keyboard_clear+0xc>)
   291e2:	2208      	movs	r2, #8
   291e4:	2100      	movs	r1, #0
   291e6:	f022 bd42 	b.w	4bc6e <memset>
   291ea:	bf00      	nop
   291ec:	20000fda 	.word	0x20000fda

000291f0 <zmk_hid_consumer_press>:

int zmk_hid_consumer_press(zmk_key_t code) {
   291f0:	b510      	push	{r4, lr}
    TOGGLE_CONSUMER(0U, code);
   291f2:	4908      	ldr	r1, [pc, #32]	; (29214 <zmk_hid_consumer_press+0x24>)
   291f4:	2300      	movs	r3, #0
   291f6:	eb01 0243 	add.w	r2, r1, r3, lsl #1
   291fa:	f8b2 4001 	ldrh.w	r4, [r2, #1]
   291fe:	b124      	cbz	r4, 2920a <zmk_hid_consumer_press+0x1a>
   29200:	3301      	adds	r3, #1
   29202:	2b06      	cmp	r3, #6
   29204:	d1f7      	bne.n	291f6 <zmk_hid_consumer_press+0x6>
    return 0;
};
   29206:	2000      	movs	r0, #0
   29208:	bd10      	pop	{r4, pc}
    TOGGLE_CONSUMER(0U, code);
   2920a:	f8a2 0001 	strh.w	r0, [r2, #1]
   2920e:	2800      	cmp	r0, #0
   29210:	d0f6      	beq.n	29200 <zmk_hid_consumer_press+0x10>
   29212:	e7f8      	b.n	29206 <zmk_hid_consumer_press+0x16>
   29214:	20000fcc 	.word	0x20000fcc

00029218 <zmk_hid_consumer_release>:

int zmk_hid_consumer_release(zmk_key_t code) {
   29218:	b530      	push	{r4, r5, lr}
    TOGGLE_CONSUMER(code, 0U);
   2921a:	2300      	movs	r3, #0
   2921c:	4c07      	ldr	r4, [pc, #28]	; (2923c <zmk_hid_consumer_release+0x24>)
   2921e:	4619      	mov	r1, r3
   29220:	eb04 0243 	add.w	r2, r4, r3, lsl #1
   29224:	3301      	adds	r3, #1
   29226:	f8b2 5001 	ldrh.w	r5, [r2, #1]
   2922a:	4285      	cmp	r5, r0
   2922c:	bf04      	itt	eq
   2922e:	7051      	strbeq	r1, [r2, #1]
   29230:	7091      	strbeq	r1, [r2, #2]
   29232:	2b06      	cmp	r3, #6
   29234:	d1f4      	bne.n	29220 <zmk_hid_consumer_release+0x8>
    return 0;
};
   29236:	2000      	movs	r0, #0
   29238:	bd30      	pop	{r4, r5, pc}
   2923a:	bf00      	nop
   2923c:	20000fcc 	.word	0x20000fcc

00029240 <zmk_hid_consumer_clear>:

void zmk_hid_consumer_clear() { memset(&consumer_report.body, 0, sizeof(consumer_report.body)); }
   29240:	4802      	ldr	r0, [pc, #8]	; (2924c <zmk_hid_consumer_clear+0xc>)
   29242:	220c      	movs	r2, #12
   29244:	2100      	movs	r1, #0
   29246:	f022 bd12 	b.w	4bc6e <memset>
   2924a:	bf00      	nop
   2924c:	20000fcd 	.word	0x20000fcd

00029250 <zmk_hid_get_keyboard_report>:
    return false;
}

struct zmk_hid_keyboard_report *zmk_hid_get_keyboard_report() {
    return &keyboard_report;
}
   29250:	4800      	ldr	r0, [pc, #0]	; (29254 <zmk_hid_get_keyboard_report+0x4>)
   29252:	4770      	bx	lr
   29254:	20000fd9 	.word	0x20000fd9

00029258 <zmk_hid_get_consumer_report>:

struct zmk_hid_consumer_report *zmk_hid_get_consumer_report() {
    return &consumer_report;
}
   29258:	4800      	ldr	r0, [pc, #0]	; (2925c <zmk_hid_get_consumer_report+0x4>)
   2925a:	4770      	bx	lr
   2925c:	20000fcc 	.word	0x20000fcc

00029260 <handle_control_binding>:
#define IS_TAP_TIME(dev) ZM_IS_NODE_MATCH(dev, TAP_TIME)
#define IS_WAIT_TIME(dev) ZM_IS_NODE_MATCH(dev, WAIT_TIME)
#define IS_PAUSE(dev) ZM_IS_NODE_MATCH(dev, WAIT_REL)

static bool handle_control_binding(struct behavior_macro_trigger_state *state,
                                   const struct zmk_behavior_binding *binding) {
   29260:	b538      	push	{r3, r4, r5, lr}
   29262:	460c      	mov	r4, r1
   29264:	4605      	mov	r5, r0
    if (IS_TAP_MODE(binding->behavior_dev)) {
   29266:	4914      	ldr	r1, [pc, #80]	; (292b8 <handle_control_binding+0x58>)
   29268:	6820      	ldr	r0, [r4, #0]
   2926a:	f022 fcc5 	bl	4bbf8 <strcmp>
   2926e:	b910      	cbnz	r0, 29276 <handle_control_binding+0x16>
        state->mode = MACRO_MODE_TAP;
   29270:	7228      	strb	r0, [r5, #8]
        LOG_DBG("macro wait time set: %d", state->wait_ms);
    } else {
        return false;
    }

    return true;
   29272:	2001      	movs	r0, #1
}
   29274:	bd38      	pop	{r3, r4, r5, pc}
    } else if (IS_PRESS_MODE(binding->behavior_dev)) {
   29276:	4911      	ldr	r1, [pc, #68]	; (292bc <handle_control_binding+0x5c>)
   29278:	6820      	ldr	r0, [r4, #0]
   2927a:	f022 fcbd 	bl	4bbf8 <strcmp>
   2927e:	b910      	cbnz	r0, 29286 <handle_control_binding+0x26>
        state->mode = MACRO_MODE_PRESS;
   29280:	2301      	movs	r3, #1
        state->mode = MACRO_MODE_RELEASE;
   29282:	722b      	strb	r3, [r5, #8]
        LOG_DBG("macro mode set: release");
   29284:	e7f5      	b.n	29272 <handle_control_binding+0x12>
    } else if (IS_RELEASE_MODE(binding->behavior_dev)) {
   29286:	490e      	ldr	r1, [pc, #56]	; (292c0 <handle_control_binding+0x60>)
   29288:	6820      	ldr	r0, [r4, #0]
   2928a:	f022 fcb5 	bl	4bbf8 <strcmp>
   2928e:	b908      	cbnz	r0, 29294 <handle_control_binding+0x34>
        state->mode = MACRO_MODE_RELEASE;
   29290:	2302      	movs	r3, #2
   29292:	e7f6      	b.n	29282 <handle_control_binding+0x22>
    } else if (IS_TAP_TIME(binding->behavior_dev)) {
   29294:	490b      	ldr	r1, [pc, #44]	; (292c4 <handle_control_binding+0x64>)
   29296:	6820      	ldr	r0, [r4, #0]
   29298:	f022 fcae 	bl	4bbf8 <strcmp>
   2929c:	b910      	cbnz	r0, 292a4 <handle_control_binding+0x44>
        state->tap_ms = binding->param1;
   2929e:	6863      	ldr	r3, [r4, #4]
   292a0:	606b      	str	r3, [r5, #4]
        LOG_DBG("macro tap time set: %d", state->tap_ms);
   292a2:	e7e6      	b.n	29272 <handle_control_binding+0x12>
    } else if (IS_WAIT_TIME(binding->behavior_dev)) {
   292a4:	4908      	ldr	r1, [pc, #32]	; (292c8 <handle_control_binding+0x68>)
   292a6:	6820      	ldr	r0, [r4, #0]
   292a8:	f022 fca6 	bl	4bbf8 <strcmp>
   292ac:	b910      	cbnz	r0, 292b4 <handle_control_binding+0x54>
        state->wait_ms = binding->param1;
   292ae:	6863      	ldr	r3, [r4, #4]
   292b0:	602b      	str	r3, [r5, #0]
        LOG_DBG("macro wait time set: %d", state->wait_ms);
   292b2:	e7de      	b.n	29272 <handle_control_binding+0x12>
        return false;
   292b4:	2000      	movs	r0, #0
   292b6:	e7dd      	b.n	29274 <handle_control_binding+0x14>
   292b8:	00053c06 	.word	0x00053c06
   292bc:	00053c0e 	.word	0x00053c0e
   292c0:	00053c18 	.word	0x00053c18
   292c4:	00053c20 	.word	0x00053c20
   292c8:	00053c2d 	.word	0x00053c2d

000292cc <behavior_macro_init>:

static int behavior_macro_init(const struct device *dev) {
   292cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    const struct behavior_macro_config *cfg = dev->config;
   292d0:	f8d0 8004 	ldr.w	r8, [r0, #4]
    struct behavior_macro_state *state = dev->data;
   292d4:	6907      	ldr	r7, [r0, #16]
    state->press_bindings_count = cfg->count;
   292d6:	f8d8 3008 	ldr.w	r3, [r8, #8]

    LOG_DBG("Precalculate initial release state:");
    for (int i = 0; i < cfg->count; i++) {
        if (handle_control_binding(&state->release_state, &cfg->bindings[i])) {
            // Updated state used for initial state on release.
        } else if (IS_PAUSE(cfg->bindings[i].behavior_dev)) {
   292da:	f8df 9048 	ldr.w	r9, [pc, #72]	; 29324 <behavior_macro_init+0x58>
    state->press_bindings_count = cfg->count;
   292de:	613b      	str	r3, [r7, #16]
    state->release_state.count = 0;
   292e0:	2400      	movs	r4, #0
    state->release_state.start_index = cfg->count;
   292e2:	817b      	strh	r3, [r7, #10]
    state->release_state.count = 0;
   292e4:	81bc      	strh	r4, [r7, #12]
    for (int i = 0; i < cfg->count; i++) {
   292e6:	f108 060c 	add.w	r6, r8, #12
   292ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
   292ee:	42a3      	cmp	r3, r4
   292f0:	d911      	bls.n	29316 <behavior_macro_init+0x4a>
        if (handle_control_binding(&state->release_state, &cfg->bindings[i])) {
   292f2:	4631      	mov	r1, r6
   292f4:	4638      	mov	r0, r7
   292f6:	f7ff ffb3 	bl	29260 <handle_control_binding>
   292fa:	1c65      	adds	r5, r4, #1
   292fc:	b970      	cbnz	r0, 2931c <behavior_macro_init+0x50>
        } else if (IS_PAUSE(cfg->bindings[i].behavior_dev)) {
   292fe:	6830      	ldr	r0, [r6, #0]
   29300:	4649      	mov	r1, r9
   29302:	f022 fc79 	bl	4bbf8 <strcmp>
   29306:	b948      	cbnz	r0, 2931c <behavior_macro_init+0x50>
            state->release_state.start_index = i + 1;
            state->release_state.count = cfg->count - state->release_state.start_index;
   29308:	f8d8 3008 	ldr.w	r3, [r8, #8]
            state->press_bindings_count = i;
   2930c:	613c      	str	r4, [r7, #16]
            state->release_state.start_index = i + 1;
   2930e:	b2ad      	uxth	r5, r5
            state->release_state.count = cfg->count - state->release_state.start_index;
   29310:	1b5b      	subs	r3, r3, r5
            state->release_state.start_index = i + 1;
   29312:	817d      	strh	r5, [r7, #10]
            state->release_state.count = cfg->count - state->release_state.start_index;
   29314:	81bb      	strh	r3, [r7, #12]
            // Ignore regular invokable bindings
        }
    }

    return 0;
};
   29316:	2000      	movs	r0, #0
   29318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    for (int i = 0; i < cfg->count; i++) {
   2931c:	462c      	mov	r4, r5
   2931e:	360c      	adds	r6, #12
   29320:	e7e3      	b.n	292ea <behavior_macro_init+0x1e>
   29322:	bf00      	nop
   29324:	00053c3b 	.word	0x00053c3b

00029328 <find_tap_dance>:
    struct k_work_delayable release_timer;
};

struct active_tap_dance active_tap_dances[ZMK_BHV_TAP_DANCE_MAX_HELD] = {};

static struct active_tap_dance *find_tap_dance(uint32_t position) {
   29328:	b510      	push	{r4, lr}
   2932a:	4b09      	ldr	r3, [pc, #36]	; (29350 <find_tap_dance+0x28>)
    for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
   2932c:	2100      	movs	r1, #0
   2932e:	461a      	mov	r2, r3
        if (active_tap_dances[i].position == position && !active_tap_dances[i].timer_cancelled) {
   29330:	685c      	ldr	r4, [r3, #4]
   29332:	4284      	cmp	r4, r0
   29334:	d105      	bne.n	29342 <find_tap_dance+0x1a>
   29336:	7e5c      	ldrb	r4, [r3, #25]
   29338:	b91c      	cbnz	r4, 29342 <find_tap_dance+0x1a>
            return &active_tap_dances[i];
   2933a:	2358      	movs	r3, #88	; 0x58
   2933c:	fb03 2001 	mla	r0, r3, r1, r2
        }
    }
    return NULL;
}
   29340:	bd10      	pop	{r4, pc}
    for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
   29342:	3101      	adds	r1, #1
   29344:	290a      	cmp	r1, #10
   29346:	f103 0358 	add.w	r3, r3, #88	; 0x58
   2934a:	d1f1      	bne.n	29330 <find_tap_dance+0x8>
    return NULL;
   2934c:	2000      	movs	r0, #0
   2934e:	e7f7      	b.n	29340 <find_tap_dance+0x18>
   29350:	20001510 	.word	0x20001510

00029354 <behavior_tap_dance_init>:
        }
    }
    return ZMK_EV_EVENT_BUBBLE;
}

static int behavior_tap_dance_init(const struct device *dev) {
   29354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    static bool init_first_run = true;
    if (init_first_run) {
   29358:	4e0b      	ldr	r6, [pc, #44]	; (29388 <behavior_tap_dance_init+0x34>)
   2935a:	7833      	ldrb	r3, [r6, #0]
   2935c:	b183      	cbz	r3, 29380 <behavior_tap_dance_init+0x2c>
   2935e:	4c0b      	ldr	r4, [pc, #44]	; (2938c <behavior_tap_dance_init+0x38>)
        for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
            k_work_init_delayable(&active_tap_dances[i].release_timer,
   29360:	f8df 802c 	ldr.w	r8, [pc, #44]	; 29390 <behavior_tap_dance_init+0x3c>
        for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
   29364:	2500      	movs	r5, #0
    tap_dance->position = ZMK_BHV_TAP_DANCE_POSITION_FREE;
   29366:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
            k_work_init_delayable(&active_tap_dances[i].release_timer,
   2936a:	4620      	mov	r0, r4
   2936c:	4641      	mov	r1, r8
        for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
   2936e:	3501      	adds	r5, #1
            k_work_init_delayable(&active_tap_dances[i].release_timer,
   29370:	f027 fc55 	bl	50c1e <k_work_init_delayable>
        for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
   29374:	2d0a      	cmp	r5, #10
    tap_dance->position = ZMK_BHV_TAP_DANCE_POSITION_FREE;
   29376:	f844 7c24 	str.w	r7, [r4, #-36]
        for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
   2937a:	f104 0458 	add.w	r4, r4, #88	; 0x58
   2937e:	d1f4      	bne.n	2936a <behavior_tap_dance_init+0x16>
                                  behavior_tap_dance_timer_handler);
            clear_tap_dance(&active_tap_dances[i]);
        }
    }
    init_first_run = false;
   29380:	2000      	movs	r0, #0
   29382:	7030      	strb	r0, [r6, #0]
    return 0;
}
   29384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29388:	20000fe2 	.word	0x20000fe2
   2938c:	20001538 	.word	0x20001538
   29390:	00049481 	.word	0x00049481

00029394 <on_tap_dance_binding_pressed>:
                                        struct zmk_behavior_binding_event event) {
   29394:	b082      	sub	sp, #8
   29396:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2939a:	a908      	add	r1, sp, #32
   2939c:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   293a0:	6800      	ldr	r0, [r0, #0]
   293a2:	e9dd 570a 	ldrd	r5, r7, [sp, #40]	; 0x28
   293a6:	461e      	mov	r6, r3
   293a8:	f01e fa9a 	bl	478e0 <z_impl_device_get_binding>
    const struct behavior_tap_dance_config *cfg = dev->config;
   293ac:	f8d0 8004 	ldr.w	r8, [r0, #4]
    tap_dance = find_tap_dance(event.position);
   293b0:	4630      	mov	r0, r6
   293b2:	f7ff ffb9 	bl	29328 <find_tap_dance>
    if (tap_dance == NULL) {
   293b6:	4604      	mov	r4, r0
   293b8:	b9a8      	cbnz	r0, 293e6 <on_tap_dance_binding_pressed+0x52>
   293ba:	4b32      	ldr	r3, [pc, #200]	; (29484 <on_tap_dance_binding_pressed+0xf0>)
    for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
   293bc:	4601      	mov	r1, r0
   293be:	461a      	mov	r2, r3
        if (ref_dance->position == ZMK_BHV_TAP_DANCE_POSITION_FREE) {
   293c0:	6858      	ldr	r0, [r3, #4]
   293c2:	3001      	adds	r0, #1
   293c4:	d12c      	bne.n	29420 <on_tap_dance_binding_pressed+0x8c>
        struct active_tap_dance *const ref_dance = &active_tap_dances[i];
   293c6:	2358      	movs	r3, #88	; 0x58
   293c8:	4359      	muls	r1, r3
            ref_dance->counter = 0;
   293ca:	2300      	movs	r3, #0
        struct active_tap_dance *const ref_dance = &active_tap_dances[i];
   293cc:	1854      	adds	r4, r2, r1
            ref_dance->counter = 0;
   293ce:	5053      	str	r3, [r2, r1]
            ref_dance->release_at = 0;
   293d0:	2000      	movs	r0, #0
   293d2:	2100      	movs	r1, #0
   293d4:	e9c4 0108 	strd	r0, r1, [r4, #32]
            ref_dance->is_pressed = true;
   293d8:	2201      	movs	r2, #1
            ref_dance->position = position;
   293da:	6066      	str	r6, [r4, #4]
            ref_dance->config = config;
   293dc:	f8c4 8014 	str.w	r8, [r4, #20]
            ref_dance->is_pressed = true;
   293e0:	7422      	strb	r2, [r4, #16]
            ref_dance->timer_started = true;
   293e2:	8322      	strh	r2, [r4, #24]
            ref_dance->tap_dance_decided = false;
   293e4:	76a3      	strb	r3, [r4, #26]
    tap_dance->is_pressed = true;
   293e6:	f04f 0901 	mov.w	r9, #1
    int timer_cancel_result = k_work_cancel_delayable(&tap_dance->release_timer);
   293ea:	f104 0628 	add.w	r6, r4, #40	; 0x28
    tap_dance->is_pressed = true;
   293ee:	f884 9010 	strb.w	r9, [r4, #16]
    int timer_cancel_result = k_work_cancel_delayable(&tap_dance->release_timer);
   293f2:	4630      	mov	r0, r6
   293f4:	f027 fc21 	bl	50c3a <k_work_cancel_delayable>
    if (tap_dance->counter < cfg->behavior_count) {
   293f8:	6823      	ldr	r3, [r4, #0]
   293fa:	f8d8 2004 	ldr.w	r2, [r8, #4]
    if (timer_cancel_result == -EINPROGRESS) {
   293fe:	3077      	adds	r0, #119	; 0x77
        tap_dance->timer_cancelled = true;
   29400:	bf08      	it	eq
   29402:	f884 9019 	strbeq.w	r9, [r4, #25]
    if (tap_dance->counter < cfg->behavior_count) {
   29406:	4293      	cmp	r3, r2
        tap_dance->counter++;
   29408:	bf3c      	itt	cc
   2940a:	3301      	addcc	r3, #1
   2940c:	6023      	strcc	r3, [r4, #0]
    if (tap_dance->counter == cfg->behavior_count) {
   2940e:	6823      	ldr	r3, [r4, #0]
   29410:	4293      	cmp	r3, r2
   29412:	d10f      	bne.n	29434 <on_tap_dance_binding_pressed+0xa0>
        press_tap_dance_behavior(tap_dance, event.timestamp);
   29414:	462a      	mov	r2, r5
   29416:	463b      	mov	r3, r7
   29418:	4620      	mov	r0, r4
   2941a:	f01f ffa8 	bl	4936e <press_tap_dance_behavior.isra.0>
        return ZMK_EV_EVENT_BUBBLE;
   2941e:	e004      	b.n	2942a <on_tap_dance_binding_pressed+0x96>
    for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
   29420:	3101      	adds	r1, #1
   29422:	290a      	cmp	r1, #10
   29424:	f103 0358 	add.w	r3, r3, #88	; 0x58
   29428:	d1ca      	bne.n	293c0 <on_tap_dance_binding_pressed+0x2c>
}
   2942a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2942e:	2000      	movs	r0, #0
   29430:	b002      	add	sp, #8
   29432:	4770      	bx	lr
    tap_dance->release_at = event.timestamp + tap_dance->config->tapping_term_ms;
   29434:	6963      	ldr	r3, [r4, #20]
   29436:	681b      	ldr	r3, [r3, #0]
   29438:	195d      	adds	r5, r3, r5
   2943a:	f147 0700 	adc.w	r7, r7, #0
   2943e:	e9c4 5708 	strd	r5, r7, [r4, #32]
	return z_impl_k_uptime_ticks();
   29442:	f027 fd9a 	bl	50f7a <z_impl_k_uptime_ticks>
   29446:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2944a:	fba0 0302 	umull	r0, r3, r0, r2
   2944e:	fb02 3101 	mla	r1, r2, r1, r3
   29452:	0bc3      	lsrs	r3, r0, #15
   29454:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    int32_t ms_left = tap_dance->release_at - k_uptime_get();
   29458:	1aec      	subs	r4, r5, r3
    if (ms_left > 0) {
   2945a:	2c00      	cmp	r4, #0
   2945c:	dde5      	ble.n	2942a <on_tap_dance_binding_pressed+0x96>
   2945e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   29462:	f240 30e7 	movw	r0, #999	; 0x3e7
   29466:	2100      	movs	r1, #0
   29468:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2946c:	2300      	movs	r3, #0
   2946e:	fbe4 0105 	umlal	r0, r1, r4, r5
   29472:	f7fc fe45 	bl	26100 <__aeabi_uldivmod>
   29476:	4602      	mov	r2, r0
   29478:	460b      	mov	r3, r1
        k_work_schedule(&tap_dance->release_timer, K_MSEC(ms_left));
   2947a:	4630      	mov	r0, r6
   2947c:	f01e ffe4 	bl	48448 <k_work_schedule>
        LOG_DBG("Successfully reset timer at position %d", tap_dance->position);
   29480:	e7d3      	b.n	2942a <on_tap_dance_binding_pressed+0x96>
   29482:	bf00      	nop
   29484:	20001510 	.word	0x20001510

00029488 <tap_dance_position_state_changed_listener>:
static int tap_dance_position_state_changed_listener(const zmk_event_t *eh) {
   29488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct zmk_position_state_changed *ev = as_zmk_position_state_changed(eh);
   2948a:	f7ff fd8f 	bl	28fac <as_zmk_position_state_changed>
    if (ev == NULL) {
   2948e:	4604      	mov	r4, r0
   29490:	b328      	cbz	r0, 294de <tap_dance_position_state_changed_listener+0x56>
    if (!ev->state) {
   29492:	7a03      	ldrb	r3, [r0, #8]
   29494:	b31b      	cbz	r3, 294de <tap_dance_position_state_changed_listener+0x56>
   29496:	4d16      	ldr	r5, [pc, #88]	; (294f0 <tap_dance_position_state_changed_listener+0x68>)
    for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
   29498:	2600      	movs	r6, #0
        tap_dance->timer_cancelled = true;
   2949a:	2701      	movs	r7, #1
        if (tap_dance->position == ZMK_BHV_TAP_DANCE_POSITION_FREE) {
   2949c:	f855 3c24 	ldr.w	r3, [r5, #-36]
   294a0:	1c5a      	adds	r2, r3, #1
   294a2:	d01e      	beq.n	294e2 <tap_dance_position_state_changed_listener+0x5a>
        if (tap_dance->position == ev->position) {
   294a4:	6862      	ldr	r2, [r4, #4]
   294a6:	4293      	cmp	r3, r2
   294a8:	d01b      	beq.n	294e2 <tap_dance_position_state_changed_listener+0x5a>
    int timer_cancel_result = k_work_cancel_delayable(&tap_dance->release_timer);
   294aa:	4628      	mov	r0, r5
   294ac:	f027 fbc5 	bl	50c3a <k_work_cancel_delayable>
        if (!tap_dance->tap_dance_decided) {
   294b0:	f815 3c0e 	ldrb.w	r3, [r5, #-14]
    if (timer_cancel_result == -EINPROGRESS) {
   294b4:	3077      	adds	r0, #119	; 0x77
        tap_dance->timer_cancelled = true;
   294b6:	bf08      	it	eq
   294b8:	f805 7c0f 	strbeq.w	r7, [r5, #-15]
        if (!tap_dance->tap_dance_decided) {
   294bc:	b98b      	cbnz	r3, 294e2 <tap_dance_position_state_changed_listener+0x5a>
        struct active_tap_dance *tap_dance = &active_tap_dances[i];
   294be:	4d0d      	ldr	r5, [pc, #52]	; (294f4 <tap_dance_position_state_changed_listener+0x6c>)
   294c0:	2358      	movs	r3, #88	; 0x58
   294c2:	fb03 5506 	mla	r5, r3, r6, r5
            press_tap_dance_behavior(tap_dance, ev->timestamp);
   294c6:	4628      	mov	r0, r5
   294c8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   294cc:	f01f ff4f 	bl	4936e <press_tap_dance_behavior.isra.0>
            if (!tap_dance->is_pressed) {
   294d0:	7c2b      	ldrb	r3, [r5, #16]
   294d2:	b923      	cbnz	r3, 294de <tap_dance_position_state_changed_listener+0x56>
                release_tap_dance_behavior(tap_dance, ev->timestamp);
   294d4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   294d8:	4628      	mov	r0, r5
   294da:	f01f ff81 	bl	493e0 <release_tap_dance_behavior.isra.0>
}
   294de:	2000      	movs	r0, #0
   294e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
   294e2:	3601      	adds	r6, #1
   294e4:	2e0a      	cmp	r6, #10
   294e6:	f105 0558 	add.w	r5, r5, #88	; 0x58
   294ea:	d1d7      	bne.n	2949c <tap_dance_position_state_changed_listener+0x14>
   294ec:	e7f7      	b.n	294de <tap_dance_position_state_changed_listener+0x56>
   294ee:	bf00      	nop
   294f0:	20001538 	.word	0x20001538
   294f4:	20001510 	.word	0x20001510

000294f8 <behavior_queue_process_next>:
K_MSGQ_DEFINE(zmk_behavior_queue_msgq, sizeof(struct q_item), CONFIG_ZMK_BEHAVIORS_QUEUE_SIZE, 4);

static void behavior_queue_process_next(struct k_work *work);
static K_WORK_DELAYABLE_DEFINE(queue_work, behavior_queue_process_next);

static void behavior_queue_process_next(struct k_work *work) {
   294f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   294fc:	b095      	sub	sp, #84	; 0x54
    struct q_item item = {.wait = 0};
   294fe:	2214      	movs	r2, #20
   29500:	2100      	movs	r1, #0
   29502:	a80f      	add	r0, sp, #60	; 0x3c
   29504:	f022 fbb3 	bl	4bc6e <memset>
	return z_impl_k_msgq_get(msgq, data, timeout);
   29508:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 295dc <behavior_queue_process_next+0xe4>
   2950c:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   29510:	2200      	movs	r2, #0
   29512:	2300      	movs	r3, #0
   29514:	a90f      	add	r1, sp, #60	; 0x3c
   29516:	4640      	mov	r0, r8
   29518:	f01e fc62 	bl	47de0 <z_impl_k_msgq_get>

    while (k_msgq_get(&zmk_behavior_queue_msgq, &item, K_NO_WAIT) == 0) {
   2951c:	2800      	cmp	r0, #0
   2951e:	d149      	bne.n	295b4 <behavior_queue_process_next+0xbc>
        LOG_DBG("Invoking %s: 0x%02x 0x%02x", log_strdup(item.binding.behavior_dev),
                item.binding.param1, item.binding.param2);

        struct zmk_behavior_binding_event event = {.position = item.position,
   29520:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   29522:	9002      	str	r0, [sp, #8]
	return z_impl_k_uptime_ticks();
   29524:	f027 fd29 	bl	50f7a <z_impl_k_uptime_ticks>
   29528:	fba0 0c07 	umull	r0, ip, r0, r7
   2952c:	fb07 cc01 	mla	ip, r7, r1, ip
   29530:	0bc5      	lsrs	r5, r0, #15
   29532:	ea45 454c 	orr.w	r5, r5, ip, lsl #17
                                                   .timestamp = k_uptime_get()};

        if (item.press) {
   29536:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   2953a:	e9cd 6503 	strd	r6, r5, [sp, #12]
   2953e:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
   29542:	f013 0f01 	tst.w	r3, #1
   29546:	f8cd c014 	str.w	ip, [sp, #20]
   2954a:	ab02      	add	r3, sp, #8
   2954c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2954e:	ac06      	add	r4, sp, #24
   29550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   29554:	f10d 0928 	add.w	r9, sp, #40	; 0x28
   29558:	d02f      	beq.n	295ba <behavior_queue_process_next+0xc2>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_PRESSED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_pressed(binding, event);
   2955a:	e9cd 6507 	strd	r6, r5, [sp, #28]
   2955e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   29562:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   29566:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
__syscall int behavior_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                              struct zmk_behavior_binding_event event);

static inline int z_impl_behavior_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                                         struct zmk_behavior_binding_event event) {
    const struct device *dev = device_get_binding(binding->behavior_dev);
   2956a:	9810      	ldr	r0, [sp, #64]	; 0x40
   2956c:	f01e f9b8 	bl	478e0 <z_impl_device_get_binding>

    if (dev == NULL) {
   29570:	b150      	cbz	r0, 29588 <behavior_queue_process_next+0x90>
        return -EINVAL;
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->binding_pressed == NULL) {
   29572:	6883      	ldr	r3, [r0, #8]
   29574:	689c      	ldr	r4, [r3, #8]
        return -EINVAL;
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->binding_released == NULL) {
   29576:	b13c      	cbz	r4, 29588 <behavior_queue_process_next+0x90>
        return -ENOTSUP;
    }

    return api->binding_released(binding, event);
   29578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   2957c:	e88d 0003 	stmia.w	sp, {r0, r1}
   29580:	a810      	add	r0, sp, #64	; 0x40
   29582:	e899 000c 	ldmia.w	r9, {r2, r3}
   29586:	47a0      	blx	r4
            behavior_keymap_binding_released(&item.binding, event);
        }

        LOG_DBG("Processing next queued behavior in %dms", item.wait);

        if (item.wait > 0) {
   29588:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   2958a:	2c01      	cmp	r4, #1
   2958c:	d9c0      	bls.n	29510 <behavior_queue_process_next+0x18>
            k_work_schedule(&queue_work, K_MSEC(item.wait));
   2958e:	f3c4 045e 	ubfx	r4, r4, #1, #31
   29592:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   29596:	f240 30e7 	movw	r0, #999	; 0x3e7
   2959a:	2100      	movs	r1, #0
   2959c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   295a0:	2300      	movs	r3, #0
   295a2:	fbe5 0104 	umlal	r0, r1, r5, r4
   295a6:	f7fc fdab 	bl	26100 <__aeabi_uldivmod>
   295aa:	4602      	mov	r2, r0
   295ac:	460b      	mov	r3, r1
   295ae:	480c      	ldr	r0, [pc, #48]	; (295e0 <behavior_queue_process_next+0xe8>)
   295b0:	f01e ff4a 	bl	48448 <k_work_schedule>
            break;
        }
    }
}
   295b4:	b015      	add	sp, #84	; 0x54
   295b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_RELEASED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_released(binding, event);
   295ba:	e9cd 6507 	strd	r6, r5, [sp, #28]
   295be:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   295c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   295c6:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   295ca:	9810      	ldr	r0, [sp, #64]	; 0x40
   295cc:	f01e f988 	bl	478e0 <z_impl_device_get_binding>
    if (dev == NULL) {
   295d0:	2800      	cmp	r0, #0
   295d2:	d0d9      	beq.n	29588 <behavior_queue_process_next+0x90>
    if (api->binding_released == NULL) {
   295d4:	6883      	ldr	r3, [r0, #8]
   295d6:	68dc      	ldr	r4, [r3, #12]
   295d8:	e7cd      	b.n	29576 <behavior_queue_process_next+0x7e>
   295da:	bf00      	nop
   295dc:	2000119c 	.word	0x2000119c
   295e0:	20000000 	.word	0x20000000

000295e4 <zmk_behavior_queue_add>:

int zmk_behavior_queue_add(uint32_t position, const struct zmk_behavior_binding binding, bool press,
                           uint32_t wait) {
   295e4:	b510      	push	{r4, lr}
   295e6:	b08a      	sub	sp, #40	; 0x28
   295e8:	ac01      	add	r4, sp, #4
   295ea:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    struct q_item item = {.press = press, .binding = binding, .wait = wait};
   295ee:	a805      	add	r0, sp, #20
   295f0:	2211      	movs	r2, #17
   295f2:	2100      	movs	r1, #0
   295f4:	f022 fb3b 	bl	4bc6e <memset>
   295f8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   295fc:	ab06      	add	r3, sp, #24
   295fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   29602:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   29606:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   29608:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   2960c:	9309      	str	r3, [sp, #36]	; 0x24
	return z_impl_k_msgq_put(msgq, data, timeout);
   2960e:	4809      	ldr	r0, [pc, #36]	; (29634 <zmk_behavior_queue_add+0x50>)
   29610:	2200      	movs	r2, #0
   29612:	2300      	movs	r3, #0
   29614:	a905      	add	r1, sp, #20
   29616:	f01e fb8d 	bl	47d34 <z_impl_k_msgq_put>

    const int ret = k_msgq_put(&zmk_behavior_queue_msgq, &item, K_NO_WAIT);
    if (ret < 0) {
   2961a:	2800      	cmp	r0, #0
   2961c:	db04      	blt.n	29628 <zmk_behavior_queue_add+0x44>
}

static inline bool k_work_delayable_is_pending(
	const struct k_work_delayable *dwork)
{
	return k_work_delayable_busy_get(dwork) != 0;
   2961e:	4806      	ldr	r0, [pc, #24]	; (29638 <zmk_behavior_queue_add+0x54>)
   29620:	f027 fb09 	bl	50c36 <k_work_delayable_busy_get>
        return ret;
    }

    if (!k_work_delayable_is_pending(&queue_work)) {
   29624:	b110      	cbz	r0, 2962c <zmk_behavior_queue_add+0x48>
        behavior_queue_process_next(&queue_work.work);
    }

    return 0;
   29626:	2000      	movs	r0, #0
}
   29628:	b00a      	add	sp, #40	; 0x28
   2962a:	bd10      	pop	{r4, pc}
        behavior_queue_process_next(&queue_work.work);
   2962c:	4802      	ldr	r0, [pc, #8]	; (29638 <zmk_behavior_queue_add+0x54>)
   2962e:	f7ff ff63 	bl	294f8 <behavior_queue_process_next>
   29632:	e7f8      	b.n	29626 <zmk_behavior_queue_add+0x42>
   29634:	2000119c 	.word	0x2000119c
   29638:	20000000 	.word	0x20000000

0002963c <layer_state_changed_listener>:
        LOG_DBG("layer %d", layer);
        zmk_keymap_layer_deactivate(layer);
    }
}

static int layer_state_changed_listener(const zmk_event_t *ev) {
   2963c:	b538      	push	{r3, r4, r5, lr}
    static bool conditional_layer_updates_needed;

    conditional_layer_updates_needed = true;
   2963e:	4c15      	ldr	r4, [pc, #84]	; (29694 <layer_state_changed_listener+0x58>)
   29640:	2301      	movs	r3, #1
   29642:	7023      	strb	r3, [r4, #0]
	return z_impl_k_sem_take(sem, timeout);
   29644:	4814      	ldr	r0, [pc, #80]	; (29698 <layer_state_changed_listener+0x5c>)
   29646:	2200      	movs	r2, #0
   29648:	2300      	movs	r3, #0
   2964a:	f01e fd37 	bl	480bc <z_impl_k_sem_take>

    // Semaphore ensures we don't re-enter the loop in the middle of doing update, and
    // ensures that "waterfalling layer updates" are all processed to trigger subsequent
    // nested conditional layers properly.
    if (k_sem_take(&conditional_layer_sem, K_NO_WAIT) < 0) {
   2964e:	2800      	cmp	r0, #0
   29650:	db05      	blt.n	2965e <layer_state_changed_listener+0x22>
    while (conditional_layer_updates_needed) {
        int8_t max_then_layer = -1;
        uint32_t then_layers = 0;
        uint32_t then_layer_state = 0;

        conditional_layer_updates_needed = false;
   29652:	2500      	movs	r5, #0
    while (conditional_layer_updates_needed) {
   29654:	7823      	ldrb	r3, [r4, #0]
   29656:	b923      	cbnz	r3, 29662 <layer_state_changed_listener+0x26>
	z_impl_k_sem_give(sem);
   29658:	480f      	ldr	r0, [pc, #60]	; (29698 <layer_state_changed_listener+0x5c>)
   2965a:	f01e fd09 	bl	48070 <z_impl_k_sem_give>
        }
    }

    k_sem_give(&conditional_layer_sem);
    return 0;
}
   2965e:	2000      	movs	r0, #0
   29660:	bd38      	pop	{r3, r4, r5, pc}
        conditional_layer_updates_needed = false;
   29662:	7025      	strb	r5, [r4, #0]
            if ((zmk_keymap_layer_state() & mask) == mask) {
   29664:	f000 f8fc 	bl	29860 <zmk_keymap_layer_state>
   29668:	f000 0006 	and.w	r0, r0, #6
                if ((BIT(layer) & then_layer_state) != 0U) {
   2966c:	2806      	cmp	r0, #6
    if (!zmk_keymap_layer_active(layer)) {
   2966e:	f04f 0003 	mov.w	r0, #3
                if ((BIT(layer) & then_layer_state) != 0U) {
   29672:	d107      	bne.n	29684 <layer_state_changed_listener+0x48>
    if (!zmk_keymap_layer_active(layer)) {
   29674:	f000 f8fa 	bl	2986c <zmk_keymap_layer_active>
   29678:	2800      	cmp	r0, #0
   2967a:	d1eb      	bne.n	29654 <layer_state_changed_listener+0x18>
        zmk_keymap_layer_activate(layer);
   2967c:	2003      	movs	r0, #3
   2967e:	f01f ff80 	bl	49582 <zmk_keymap_layer_activate>
   29682:	e7e7      	b.n	29654 <layer_state_changed_listener+0x18>
    if (zmk_keymap_layer_active(layer)) {
   29684:	f000 f8f2 	bl	2986c <zmk_keymap_layer_active>
   29688:	2800      	cmp	r0, #0
   2968a:	d0e3      	beq.n	29654 <layer_state_changed_listener+0x18>
        zmk_keymap_layer_deactivate(layer);
   2968c:	2003      	movs	r0, #3
   2968e:	f01f ff7b 	bl	49588 <zmk_keymap_layer_deactivate>
        for (uint8_t layer = 0; layer <= max_then_layer; layer++) {
   29692:	e7df      	b.n	29654 <layer_state_changed_listener+0x18>
   29694:	200072de 	.word	0x200072de
   29698:	200012a4 	.word	0x200012a4

0002969c <send_keyboard_report>:
    enum zmk_endpoint new_endpoint =
        (preferred_endpoint == ZMK_ENDPOINT_USB) ? ZMK_ENDPOINT_BLE : ZMK_ENDPOINT_USB;
    return zmk_endpoints_select(new_endpoint);
}

static int send_keyboard_report() {
   2969c:	b508      	push	{r3, lr}
    struct zmk_hid_keyboard_report *keyboard_report = zmk_hid_get_keyboard_report();
   2969e:	f7ff fdd7 	bl	29250 <zmk_hid_get_keyboard_report>

    switch (current_endpoint) {
   296a2:	4a09      	ldr	r2, [pc, #36]	; (296c8 <send_keyboard_report+0x2c>)
   296a4:	7812      	ldrb	r2, [r2, #0]
   296a6:	b122      	cbz	r2, 296b2 <send_keyboard_report+0x16>
   296a8:	2a01      	cmp	r2, #1
   296aa:	d007      	beq.n	296bc <send_keyboard_report+0x20>

    default:
        LOG_ERR("Unsupported endpoint %d", current_endpoint);
        return -ENOTSUP;
    }
}
   296ac:	f06f 0085 	mvn.w	r0, #133	; 0x85
   296b0:	bd08      	pop	{r3, pc}
   296b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        int err = zmk_usb_hid_send_report((uint8_t *)keyboard_report, sizeof(*keyboard_report));
   296b6:	2109      	movs	r1, #9
   296b8:	f001 b8ec 	b.w	2a894 <zmk_usb_hid_send_report>
}
   296bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        int err = zmk_hog_send_keyboard_report(&keyboard_report->body);
   296c0:	3001      	adds	r0, #1
   296c2:	f000 bcab 	b.w	2a01c <zmk_hog_send_keyboard_report>
   296c6:	bf00      	nop
   296c8:	20000fe3 	.word	0x20000fe3

000296cc <send_consumer_report>:

static int send_consumer_report() {
   296cc:	b508      	push	{r3, lr}
    struct zmk_hid_consumer_report *consumer_report = zmk_hid_get_consumer_report();
   296ce:	f7ff fdc3 	bl	29258 <zmk_hid_get_consumer_report>

    switch (current_endpoint) {
   296d2:	4a09      	ldr	r2, [pc, #36]	; (296f8 <send_consumer_report+0x2c>)
   296d4:	7812      	ldrb	r2, [r2, #0]
   296d6:	b122      	cbz	r2, 296e2 <send_consumer_report+0x16>
   296d8:	2a01      	cmp	r2, #1
   296da:	d007      	beq.n	296ec <send_consumer_report+0x20>

    default:
        LOG_ERR("Unsupported endpoint %d", current_endpoint);
        return -ENOTSUP;
    }
}
   296dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   296e0:	bd08      	pop	{r3, pc}
   296e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        int err = zmk_usb_hid_send_report((uint8_t *)consumer_report, sizeof(*consumer_report));
   296e6:	210d      	movs	r1, #13
   296e8:	f001 b8d4 	b.w	2a894 <zmk_usb_hid_send_report>
}
   296ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        int err = zmk_hog_send_consumer_report(&consumer_report->body);
   296f0:	3001      	adds	r0, #1
   296f2:	f000 bcb9 	b.w	2a068 <zmk_hog_send_consumer_report>
   296f6:	bf00      	nop
   296f8:	20000fe3 	.word	0x20000fe3

000296fc <endpoints_save_preferred_work>:
    settings_save_one("endpoints/preferred", &preferred_endpoint, sizeof(preferred_endpoint));
   296fc:	4902      	ldr	r1, [pc, #8]	; (29708 <endpoints_save_preferred_work+0xc>)
   296fe:	4803      	ldr	r0, [pc, #12]	; (2970c <endpoints_save_preferred_work+0x10>)
   29700:	2201      	movs	r2, #1
   29702:	f002 bda5 	b.w	2c250 <settings_save_one>
   29706:	bf00      	nop
   29708:	200072df 	.word	0x200072df
   2970c:	00053c7c 	.word	0x00053c7c

00029710 <zmk_endpoints_init>:
}

struct settings_handler endpoints_handler = {.name = "endpoints", .h_set = endpoints_handle_set};
#endif /* IS_ENABLED(CONFIG_SETTINGS) */

static int zmk_endpoints_init(const struct device *_arg) {
   29710:	b510      	push	{r4, lr}
#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
   29712:	f002 fef1 	bl	2c4f8 <settings_subsys_init>

    int err = settings_register(&endpoints_handler);
   29716:	4807      	ldr	r0, [pc, #28]	; (29734 <zmk_endpoints_init+0x24>)
   29718:	f002 fe2a 	bl	2c370 <settings_register>
    if (err) {
   2971c:	4604      	mov	r4, r0
   2971e:	b930      	cbnz	r0, 2972e <zmk_endpoints_init+0x1e>
        LOG_ERR("Failed to register the endpoints settings handler (err %d)", err);
        return err;
    }

    k_work_init_delayable(&endpoints_save_work, endpoints_save_preferred_work);
   29720:	4805      	ldr	r0, [pc, #20]	; (29738 <zmk_endpoints_init+0x28>)
   29722:	4906      	ldr	r1, [pc, #24]	; (2973c <zmk_endpoints_init+0x2c>)
   29724:	f027 fa7b 	bl	50c1e <k_work_init_delayable>

    settings_load_subtree("endpoints");
   29728:	4805      	ldr	r0, [pc, #20]	; (29740 <zmk_endpoints_init+0x30>)
   2972a:	f002 fdcb 	bl	2c2c4 <settings_load_subtree>
#endif

    return 0;
}
   2972e:	4620      	mov	r0, r4
   29730:	bd10      	pop	{r4, pc}
   29732:	bf00      	nop
   29734:	20000504 	.word	0x20000504
   29738:	20001880 	.word	0x20001880
   2973c:	000296fd 	.word	0x000296fd
   29740:	00053c90 	.word	0x00053c90

00029744 <update_current_endpoint>:

    zmk_endpoints_send_report(HID_USAGE_KEY);
    zmk_endpoints_send_report(HID_USAGE_CONSUMER);
}

static void update_current_endpoint() {
   29744:	b538      	push	{r3, r4, r5, lr}
    return zmk_ble_active_profile_is_connected();
   29746:	f000 fac7 	bl	29cd8 <zmk_ble_active_profile_is_connected>
    if (is_ble_ready()) {
   2974a:	b1c8      	cbz	r0, 29780 <update_current_endpoint+0x3c>

enum usb_dc_status_code zmk_usb_get_status();
enum zmk_usb_conn_state zmk_usb_get_conn_state();

static inline bool zmk_usb_is_powered() { return zmk_usb_get_conn_state() != ZMK_USB_CONN_NONE; }
static inline bool zmk_usb_is_hid_ready() { return zmk_usb_get_conn_state() == ZMK_USB_CONN_HID; }
   2974c:	f001 f86c 	bl	2a828 <zmk_usb_get_conn_state>
        if (is_usb_ready()) {
   29750:	2802      	cmp	r0, #2
   29752:	d11b      	bne.n	2978c <update_current_endpoint+0x48>
            return preferred_endpoint;
   29754:	4b0f      	ldr	r3, [pc, #60]	; (29794 <update_current_endpoint+0x50>)
   29756:	781c      	ldrb	r4, [r3, #0]
    enum zmk_endpoint new_endpoint = get_selected_endpoint();

    if (new_endpoint != current_endpoint) {
   29758:	4d0f      	ldr	r5, [pc, #60]	; (29798 <update_current_endpoint+0x54>)
   2975a:	782b      	ldrb	r3, [r5, #0]
   2975c:	42a3      	cmp	r3, r4
   2975e:	d017      	beq.n	29790 <update_current_endpoint+0x4c>
    zmk_hid_keyboard_clear();
   29760:	f7ff fd3e 	bl	291e0 <zmk_hid_keyboard_clear>
    zmk_hid_consumer_clear();
   29764:	f7ff fd6c 	bl	29240 <zmk_hid_consumer_clear>
        return send_keyboard_report();
   29768:	f7ff ff98 	bl	2969c <send_keyboard_report>
        return send_consumer_report();
   2976c:	f7ff ffae 	bl	296cc <send_consumer_report>
        disconnect_current_endpoint();

        current_endpoint = new_endpoint;
        LOG_INF("Endpoint changed: %d", current_endpoint);

        ZMK_EVENT_RAISE(new_zmk_endpoint_selection_changed(
   29770:	4620      	mov	r0, r4
        current_endpoint = new_endpoint;
   29772:	702c      	strb	r4, [r5, #0]
        ZMK_EVENT_RAISE(new_zmk_endpoint_selection_changed(
   29774:	f000 f830 	bl	297d8 <new_zmk_endpoint_selection_changed>
            (struct zmk_endpoint_selection_changed){.endpoint = current_endpoint}));
    }
}
   29778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ZMK_EVENT_RAISE(new_zmk_endpoint_selection_changed(
   2977c:	f01f bca7 	b.w	490ce <zmk_event_manager_raise>
   29780:	f001 f852 	bl	2a828 <zmk_usb_get_conn_state>
    if (is_usb_ready()) {
   29784:	1e84      	subs	r4, r0, #2
   29786:	bf18      	it	ne
   29788:	2401      	movne	r4, #1
   2978a:	e7e5      	b.n	29758 <update_current_endpoint+0x14>
        return ZMK_ENDPOINT_BLE;
   2978c:	2401      	movs	r4, #1
   2978e:	e7e3      	b.n	29758 <update_current_endpoint+0x14>
}
   29790:	bd38      	pop	{r3, r4, r5, pc}
   29792:	bf00      	nop
   29794:	200072df 	.word	0x200072df
   29798:	20000fe3 	.word	0x20000fe3

0002979c <endpoints_handle_set>:
                                void *cb_arg) {
   2979c:	b570      	push	{r4, r5, r6, lr}
   2979e:	460c      	mov	r4, r1
   297a0:	4615      	mov	r5, r2
    if (settings_name_steq(name, "preferred", NULL)) {
   297a2:	490b      	ldr	r1, [pc, #44]	; (297d0 <endpoints_handle_set+0x34>)
   297a4:	2200      	movs	r2, #0
                                void *cb_arg) {
   297a6:	461e      	mov	r6, r3
    if (settings_name_steq(name, "preferred", NULL)) {
   297a8:	f020 ff61 	bl	4a66e <settings_name_steq>
   297ac:	b908      	cbnz	r0, 297b2 <endpoints_handle_set+0x16>
    return 0;
   297ae:	2000      	movs	r0, #0
}
   297b0:	bd70      	pop	{r4, r5, r6, pc}
        if (len != sizeof(enum zmk_endpoint)) {
   297b2:	2c01      	cmp	r4, #1
   297b4:	d108      	bne.n	297c8 <endpoints_handle_set+0x2c>
        int err = read_cb(cb_arg, &preferred_endpoint, sizeof(enum zmk_endpoint));
   297b6:	4907      	ldr	r1, [pc, #28]	; (297d4 <endpoints_handle_set+0x38>)
   297b8:	4622      	mov	r2, r4
   297ba:	4630      	mov	r0, r6
   297bc:	47a8      	blx	r5
        if (err <= 0) {
   297be:	2800      	cmp	r0, #0
   297c0:	ddf6      	ble.n	297b0 <endpoints_handle_set+0x14>
        update_current_endpoint();
   297c2:	f7ff ffbf 	bl	29744 <update_current_endpoint>
   297c6:	e7f2      	b.n	297ae <endpoints_handle_set+0x12>
            return -EINVAL;
   297c8:	f06f 0015 	mvn.w	r0, #21
   297cc:	e7f0      	b.n	297b0 <endpoints_handle_set+0x14>
   297ce:	bf00      	nop
   297d0:	00053c86 	.word	0x00053c86
   297d4:	200072df 	.word	0x200072df

000297d8 <new_zmk_endpoint_selection_changed>:
 */

#include <kernel.h>
#include <zmk/events/endpoint_selection_changed.h>

ZMK_EVENT_IMPL(zmk_endpoint_selection_changed);
   297d8:	b510      	push	{r4, lr}
   297da:	4604      	mov	r4, r0
   297dc:	200c      	movs	r0, #12
   297de:	f027 fd79 	bl	512d4 <k_malloc>
   297e2:	4a02      	ldr	r2, [pc, #8]	; (297ec <new_zmk_endpoint_selection_changed+0x14>)
   297e4:	6002      	str	r2, [r0, #0]
   297e6:	7204      	strb	r4, [r0, #8]
   297e8:	bd10      	pop	{r4, pc}
   297ea:	bf00      	nop
   297ec:	00051b48 	.word	0x00051b48

000297f0 <set_layer_state>:
                                                        DT_INST_FOREACH_CHILD(0, SENSOR_LAYER)};

#endif /* ZMK_KEYMAP_HAS_SENSORS */

static inline int set_layer_state(uint8_t layer, bool state) {
    if (layer >= ZMK_KEYMAP_LAYERS_LEN) {
   297f0:	2803      	cmp	r0, #3
static inline int set_layer_state(uint8_t layer, bool state) {
   297f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (layer >= ZMK_KEYMAP_LAYERS_LEN) {
   297f4:	d82f      	bhi.n	29856 <set_layer_state+0x66>
        return -EINVAL;
    }

    // Default layer should *always* remain active
    if (layer == _zmk_keymap_layer_default && !state) {
   297f6:	bb28      	cbnz	r0, 29844 <set_layer_state+0x54>
   297f8:	b309      	cbz	r1, 2983e <set_layer_state+0x4e>
        return 0;
    }

    zmk_keymap_layers_state_t old_state = _zmk_keymap_layer_state;
   297fa:	4b18      	ldr	r3, [pc, #96]	; (2985c <set_layer_state+0x6c>)
   297fc:	681a      	ldr	r2, [r3, #0]
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
   297fe:	2301      	movs	r3, #1
   29800:	4083      	lsls	r3, r0
   29802:	4313      	orrs	r3, r2
   29804:	4c15      	ldr	r4, [pc, #84]	; (2985c <set_layer_state+0x6c>)
    // Don't send state changes unless there was an actual change
    if (old_state != _zmk_keymap_layer_state) {
   29806:	429a      	cmp	r2, r3
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
   29808:	6023      	str	r3, [r4, #0]
    if (old_state != _zmk_keymap_layer_state) {
   2980a:	d018      	beq.n	2983e <set_layer_state+0x4e>

ZMK_EVENT_DECLARE(zmk_layer_state_changed);

static inline struct zmk_layer_state_changed_event *create_layer_state_changed(uint8_t layer,
                                                                               bool state) {
    return new_zmk_layer_state_changed((struct zmk_layer_state_changed){
   2980c:	f88d 0000 	strb.w	r0, [sp]
   29810:	f88d 1001 	strb.w	r1, [sp, #1]
	return z_impl_k_uptime_ticks();
   29814:	f027 fbb1 	bl	50f7a <z_impl_k_uptime_ticks>
   29818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2981c:	fba0 0302 	umull	r0, r3, r0, r2
   29820:	fb02 3101 	mla	r1, r2, r1, r3
   29824:	0bc0      	lsrs	r0, r0, #15
   29826:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   2982a:	0bc9      	lsrs	r1, r1, #15
   2982c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   29830:	ab04      	add	r3, sp, #16
   29832:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   29836:	f000 f8c9 	bl	299cc <new_zmk_layer_state_changed>
        LOG_DBG("layer_changed: layer %d state %d", layer, state);
        ZMK_EVENT_RAISE(create_layer_state_changed(layer, state));
   2983a:	f01f fc48 	bl	490ce <zmk_event_manager_raise>
        return 0;
   2983e:	2000      	movs	r0, #0
    }

    return 0;
}
   29840:	b004      	add	sp, #16
   29842:	bd10      	pop	{r4, pc}
    zmk_keymap_layers_state_t old_state = _zmk_keymap_layer_state;
   29844:	4b05      	ldr	r3, [pc, #20]	; (2985c <set_layer_state+0x6c>)
   29846:	681a      	ldr	r2, [r3, #0]
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
   29848:	2900      	cmp	r1, #0
   2984a:	d1d8      	bne.n	297fe <set_layer_state+0xe>
   2984c:	2301      	movs	r3, #1
   2984e:	4083      	lsls	r3, r0
   29850:	ea22 0303 	bic.w	r3, r2, r3
   29854:	e7d6      	b.n	29804 <set_layer_state+0x14>
        return -EINVAL;
   29856:	f06f 0015 	mvn.w	r0, #21
   2985a:	e7f1      	b.n	29840 <set_layer_state+0x50>
   2985c:	200042a0 	.word	0x200042a0

00029860 <zmk_keymap_layer_state>:

uint8_t zmk_keymap_layer_default() { return _zmk_keymap_layer_default; }

zmk_keymap_layers_state_t zmk_keymap_layer_state() { return _zmk_keymap_layer_state; }
   29860:	4b01      	ldr	r3, [pc, #4]	; (29868 <zmk_keymap_layer_state+0x8>)
   29862:	6818      	ldr	r0, [r3, #0]
   29864:	4770      	bx	lr
   29866:	bf00      	nop
   29868:	200042a0 	.word	0x200042a0

0002986c <zmk_keymap_layer_active>:
    // breaks up that assumption by accident
    return (state_to_test & (BIT(layer))) == (BIT(layer)) || layer == _zmk_keymap_layer_default;
};

bool zmk_keymap_layer_active(uint8_t layer) {
    return zmk_keymap_layer_active_with_state(layer, _zmk_keymap_layer_state);
   2986c:	4b01      	ldr	r3, [pc, #4]	; (29874 <zmk_keymap_layer_active+0x8>)
   2986e:	6819      	ldr	r1, [r3, #0]
   29870:	f01f be7d 	b.w	4956e <zmk_keymap_layer_active_with_state>
   29874:	200042a0 	.word	0x200042a0

00029878 <zmk_keymap_apply_position_state>:
        return behavior_keymap_binding_released(binding, event);
    }
}

int zmk_keymap_apply_position_state(uint8_t source, int layer, uint32_t position, bool pressed,
                                    int64_t timestamp) {
   29878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2987c:	4615      	mov	r5, r2
    // We want to make a copy of this, since it may be converted from
    // relative to absolute before being invoked
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   2987e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
                                    int64_t timestamp) {
   29882:	461f      	mov	r7, r3
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   29884:	434a      	muls	r2, r1
   29886:	230c      	movs	r3, #12
   29888:	fb03 2205 	mla	r2, r3, r5, r2
   2988c:	4b39      	ldr	r3, [pc, #228]	; (29974 <zmk_keymap_apply_position_state+0xfc>)
   2988e:	4413      	add	r3, r2
                                    int64_t timestamp) {
   29890:	4682      	mov	sl, r0
   29892:	460e      	mov	r6, r1
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   29894:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
                                    int64_t timestamp) {
   29898:	b08d      	sub	sp, #52	; 0x34
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   2989a:	ac05      	add	r4, sp, #20
   2989c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                                    int64_t timestamp) {
   298a0:	e9dd 8916 	ldrd	r8, r9, [sp, #88]	; 0x58
   298a4:	f01e f81c 	bl	478e0 <z_impl_device_get_binding>
    LOG_DBG("layer: %d position: %d, binding name: %s", layer, position,
            log_strdup(binding.behavior_dev));

    behavior = device_get_binding(binding.behavior_dev);

    if (!behavior) {
   298a8:	4683      	mov	fp, r0
   298aa:	2800      	cmp	r0, #0
   298ac:	d05d      	beq.n	2996a <zmk_keymap_apply_position_state+0xf2>
	return z_impl_behavior_keymap_binding_convert_central_state_dependent_params(binding, event);
   298ae:	e9cd 6508 	strd	r6, r5, [sp, #32]
   298b2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    const struct device *dev = device_get_binding(binding->behavior_dev);
   298b6:	9805      	ldr	r0, [sp, #20]
   298b8:	f01e f812 	bl	478e0 <z_impl_device_get_binding>
    if (api->binding_convert_central_state_dependent_params == NULL) {
   298bc:	6883      	ldr	r3, [r0, #8]
   298be:	685b      	ldr	r3, [r3, #4]
   298c0:	469c      	mov	ip, r3
   298c2:	b153      	cbz	r3, 298da <zmk_keymap_apply_position_state+0x62>
    return api->binding_convert_central_state_dependent_params(binding, event);
   298c4:	ab0c      	add	r3, sp, #48	; 0x30
   298c6:	e913 0003 	ldmdb	r3, {r0, r1}
   298ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   298ce:	e88d 0003 	stmia.w	sp, {r0, r1}
   298d2:	4620      	mov	r0, r4
   298d4:	4661      	mov	r1, ip
   298d6:	4788      	blx	r1
        LOG_WRN("No behavior assigned to %d on layer %d", position, layer);
        return 1;
    }

    int err = behavior_keymap_binding_convert_central_state_dependent_params(&binding, event);
    if (err) {
   298d8:	bb58      	cbnz	r0, 29932 <zmk_keymap_apply_position_state+0xba>
    *locality = api->locality;
   298da:	f8db 3008 	ldr.w	r3, [fp, #8]
   298de:	781b      	ldrb	r3, [r3, #0]
    if (err) {
        LOG_ERR("Failed to get behavior locality %d", err);
        return err;
    }

    switch (locality) {
   298e0:	2b01      	cmp	r3, #1
   298e2:	d013      	beq.n	2990c <zmk_keymap_apply_position_state+0x94>
   298e4:	2b02      	cmp	r3, #2
   298e6:	d027      	beq.n	29938 <zmk_keymap_apply_position_state+0xc0>
   298e8:	2b00      	cmp	r3, #0
   298ea:	d140      	bne.n	2996e <zmk_keymap_apply_position_state+0xf6>
    case BEHAVIOR_LOCALITY_CENTRAL:
        return invoke_locally(&binding, event, pressed);
   298ec:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   298f0:	ab0c      	add	r3, sp, #48	; 0x30
   298f2:	9702      	str	r7, [sp, #8]
   298f4:	e913 0003 	ldmdb	r3, {r0, r1}
   298f8:	e9cd 6508 	strd	r6, r5, [sp, #32]
   298fc:	e88d 0003 	stmia.w	sp, {r0, r1}
   29900:	462b      	mov	r3, r5
   29902:	4632      	mov	r2, r6
#if ZMK_BLE_IS_CENTRAL
        for (int i = 0; i < ZMK_BLE_SPLIT_PERIPHERAL_COUNT; i++) {
            zmk_split_bt_invoke_behavior(i, &binding, event, pressed);
        }
#endif
        return invoke_locally(&binding, event, pressed);
   29904:	4620      	mov	r0, r4
   29906:	f01f fe42 	bl	4958e <invoke_locally>
   2990a:	e012      	b.n	29932 <zmk_keymap_apply_position_state+0xba>
            return invoke_locally(&binding, event, pressed);
   2990c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   29910:	9702      	str	r7, [sp, #8]
   29912:	aa0a      	add	r2, sp, #40	; 0x28
   29914:	e892 0003 	ldmia.w	r2, {r0, r1}
   29918:	e9cd 6508 	strd	r6, r5, [sp, #32]
   2991c:	e88d 0003 	stmia.w	sp, {r0, r1}
   29920:	ab08      	add	r3, sp, #32
        if (source == ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL) {
   29922:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
            return invoke_locally(&binding, event, pressed);
   29926:	cb0c      	ldmia	r3, {r2, r3}
        if (source == ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL) {
   29928:	d0ec      	beq.n	29904 <zmk_keymap_apply_position_state+0x8c>
            return zmk_split_bt_invoke_behavior(source, &binding, event, pressed);
   2992a:	4621      	mov	r1, r4
   2992c:	4650      	mov	r0, sl
   2992e:	f01f ff61 	bl	497f4 <zmk_split_bt_invoke_behavior>
    }

    return -ENOTSUP;
}
   29932:	b00d      	add	sp, #52	; 0x34
   29934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            zmk_split_bt_invoke_behavior(i, &binding, event, pressed);
   29938:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   2993c:	e9cd 6508 	strd	r6, r5, [sp, #32]
   29940:	9702      	str	r7, [sp, #8]
   29942:	ae0a      	add	r6, sp, #40	; 0x28
   29944:	e896 0003 	ldmia.w	r6, {r0, r1}
   29948:	e88d 0003 	stmia.w	sp, {r0, r1}
   2994c:	ad08      	add	r5, sp, #32
   2994e:	e895 000c 	ldmia.w	r5, {r2, r3}
   29952:	4621      	mov	r1, r4
   29954:	2000      	movs	r0, #0
   29956:	f01f ff4d 	bl	497f4 <zmk_split_bt_invoke_behavior>
        return invoke_locally(&binding, event, pressed);
   2995a:	9702      	str	r7, [sp, #8]
   2995c:	e896 0003 	ldmia.w	r6, {r0, r1}
   29960:	e88d 0003 	stmia.w	sp, {r0, r1}
   29964:	e895 000c 	ldmia.w	r5, {r2, r3}
   29968:	e7cc      	b.n	29904 <zmk_keymap_apply_position_state+0x8c>
        return 1;
   2996a:	2001      	movs	r0, #1
   2996c:	e7e1      	b.n	29932 <zmk_keymap_apply_position_state+0xba>
    switch (locality) {
   2996e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29972:	e7de      	b.n	29932 <zmk_keymap_apply_position_state+0xba>
   29974:	00051b54 	.word	0x00051b54

00029978 <zmk_keymap_position_state_changed>:

int zmk_keymap_position_state_changed(uint8_t source, uint32_t position, bool pressed,
                                      int64_t timestamp) {
   29978:	e92d 4ef3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}
   2997c:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
   29980:	4d10      	ldr	r5, [pc, #64]	; (299c4 <zmk_keymap_position_state_changed+0x4c>)
   29982:	4681      	mov	r9, r0
   29984:	460f      	mov	r7, r1
    if (pressed) {
   29986:	4614      	mov	r4, r2
   29988:	b11a      	cbz	r2, 29992 <zmk_keymap_position_state_changed+0x1a>
        zmk_keymap_active_behavior_layer[position] = _zmk_keymap_layer_state;
   2998a:	4b0f      	ldr	r3, [pc, #60]	; (299c8 <zmk_keymap_position_state_changed+0x50>)
   2998c:	681b      	ldr	r3, [r3, #0]
   2998e:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
                                      int64_t timestamp) {
   29992:	2603      	movs	r6, #3
    }
    for (int layer = ZMK_KEYMAP_LAYERS_LEN - 1; layer >= _zmk_keymap_layer_default; layer--) {
        if (zmk_keymap_layer_active_with_state(layer, zmk_keymap_active_behavior_layer[position])) {
   29994:	f855 1027 	ldr.w	r1, [r5, r7, lsl #2]
   29998:	b2f0      	uxtb	r0, r6
   2999a:	f01f fde8 	bl	4956e <zmk_keymap_layer_active_with_state>
   2999e:	b930      	cbnz	r0, 299ae <zmk_keymap_position_state_changed+0x36>
    for (int layer = ZMK_KEYMAP_LAYERS_LEN - 1; layer >= _zmk_keymap_layer_default; layer--) {
   299a0:	3e01      	subs	r6, #1
   299a2:	d2f7      	bcs.n	29994 <zmk_keymap_position_state_changed+0x1c>
                return ret;
            }
        }
    }

    return -ENOTSUP;
   299a4:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   299a8:	b002      	add	sp, #8
   299aa:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
            int ret = zmk_keymap_apply_position_state(source, layer, position, pressed, timestamp);
   299ae:	e9cd ab00 	strd	sl, fp, [sp]
   299b2:	4623      	mov	r3, r4
   299b4:	463a      	mov	r2, r7
   299b6:	4631      	mov	r1, r6
   299b8:	4648      	mov	r0, r9
   299ba:	f7ff ff5d 	bl	29878 <zmk_keymap_apply_position_state>
            if (ret > 0) {
   299be:	2800      	cmp	r0, #0
   299c0:	ddf2      	ble.n	299a8 <zmk_keymap_position_state_changed+0x30>
   299c2:	e7ed      	b.n	299a0 <zmk_keymap_position_state_changed+0x28>
   299c4:	20004210 	.word	0x20004210
   299c8:	200042a0 	.word	0x200042a0

000299cc <new_zmk_layer_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/layer_state_changed.h>

   299cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   299ce:	466c      	mov	r4, sp
   299d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   299d4:	2018      	movs	r0, #24
   299d6:	f027 fc7d 	bl	512d4 <k_malloc>
   299da:	4605      	mov	r5, r0
   299dc:	4b05      	ldr	r3, [pc, #20]	; (299f4 <new_zmk_layer_state_changed+0x28>)
   299de:	f845 3b08 	str.w	r3, [r5], #8
   299e2:	4606      	mov	r6, r0
   299e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   299e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   299ec:	4630      	mov	r0, r6
   299ee:	b004      	add	sp, #16
   299f0:	bd70      	pop	{r4, r5, r6, pc}
   299f2:	bf00      	nop
   299f4:	00052214 	.word	0x00052214

000299f8 <new_zmk_keycode_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/keycode_state_changed.h>

ZMK_EVENT_IMPL(zmk_keycode_state_changed);
   299f8:	b084      	sub	sp, #16
   299fa:	b570      	push	{r4, r5, r6, lr}
   299fc:	ac04      	add	r4, sp, #16
   299fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   29a02:	2020      	movs	r0, #32
   29a04:	f027 fc66 	bl	512d4 <k_malloc>
   29a08:	4604      	mov	r4, r0
   29a0a:	4b08      	ldr	r3, [pc, #32]	; (29a2c <new_zmk_keycode_state_changed+0x34>)
   29a0c:	f844 3b08 	str.w	r3, [r4], #8
   29a10:	ad04      	add	r5, sp, #16
   29a12:	4606      	mov	r6, r0
   29a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   29a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   29a18:	e895 0003 	ldmia.w	r5, {r0, r1}
   29a1c:	e884 0003 	stmia.w	r4, {r0, r1}
   29a20:	4630      	mov	r0, r6
   29a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   29a26:	b004      	add	sp, #16
   29a28:	4770      	bx	lr
   29a2a:	bf00      	nop
   29a2c:	0005221c 	.word	0x0005221c

00029a30 <as_zmk_keycode_state_changed>:
   29a30:	6802      	ldr	r2, [r0, #0]
   29a32:	4b03      	ldr	r3, [pc, #12]	; (29a40 <as_zmk_keycode_state_changed+0x10>)
   29a34:	429a      	cmp	r2, r3
   29a36:	bf0c      	ite	eq
   29a38:	3008      	addeq	r0, #8
   29a3a:	2000      	movne	r0, #0
   29a3c:	4770      	bx	lr
   29a3e:	bf00      	nop
   29a40:	0005221c 	.word	0x0005221c

00029a44 <new_zmk_ble_active_profile_changed>:
 */

#include <kernel.h>
#include <zmk/events/ble_active_profile_changed.h>

   29a44:	b513      	push	{r0, r1, r4, lr}
   29a46:	466c      	mov	r4, sp
   29a48:	e884 0003 	stmia.w	r4, {r0, r1}
   29a4c:	2010      	movs	r0, #16
   29a4e:	f027 fc41 	bl	512d4 <k_malloc>
   29a52:	4602      	mov	r2, r0
   29a54:	4905      	ldr	r1, [pc, #20]	; (29a6c <new_zmk_ble_active_profile_changed+0x28>)
   29a56:	f842 1b08 	str.w	r1, [r2], #8
   29a5a:	4603      	mov	r3, r0
   29a5c:	e894 0003 	ldmia.w	r4, {r0, r1}
   29a60:	e882 0003 	stmia.w	r2, {r0, r1}
   29a64:	4618      	mov	r0, r3
   29a66:	b002      	add	sp, #8
   29a68:	bd10      	pop	{r4, pc}
   29a6a:	bf00      	nop
   29a6c:	00052220 	.word	0x00052220

00029a70 <raise_profile_changed_event>:

static bt_addr_le_t peripheral_addr;

#endif /* IS_ENABLED(CONFIG_ZMK_SPLIT_ROLE_CENTRAL) */

static void raise_profile_changed_event() {
   29a70:	b507      	push	{r0, r1, r2, lr}
    ZMK_EVENT_RAISE(new_zmk_ble_active_profile_changed((struct zmk_ble_active_profile_changed){
   29a72:	4b09      	ldr	r3, [pc, #36]	; (29a98 <raise_profile_changed_event+0x28>)
   29a74:	781a      	ldrb	r2, [r3, #0]
   29a76:	4b09      	ldr	r3, [pc, #36]	; (29a9c <raise_profile_changed_event+0x2c>)
   29a78:	f88d 2000 	strb.w	r2, [sp]
   29a7c:	2116      	movs	r1, #22
   29a7e:	fb02 3301 	mla	r3, r2, r1, r3
   29a82:	9301      	str	r3, [sp, #4]
   29a84:	ab02      	add	r3, sp, #8
   29a86:	e913 0003 	ldmdb	r3, {r0, r1}
   29a8a:	f7ff ffdb 	bl	29a44 <new_zmk_ble_active_profile_changed>
        .index = active_profile, .profile = &profiles[active_profile]}));
}
   29a8e:	b003      	add	sp, #12
   29a90:	f85d eb04 	ldr.w	lr, [sp], #4
    ZMK_EVENT_RAISE(new_zmk_ble_active_profile_changed((struct zmk_ble_active_profile_changed){
   29a94:	f01f bb1b 	b.w	490ce <zmk_event_manager_raise>
   29a98:	200072e7 	.word	0x200072e7
   29a9c:	200072e8 	.word	0x200072e8

00029aa0 <ble_save_profile_work>:

int zmk_ble_active_profile_index() { return active_profile; }

#if IS_ENABLED(CONFIG_SETTINGS)
static void ble_save_profile_work(struct k_work *work) {
    settings_save_one("ble/active_profile", &active_profile, sizeof(active_profile));
   29aa0:	4902      	ldr	r1, [pc, #8]	; (29aac <ble_save_profile_work+0xc>)
   29aa2:	4803      	ldr	r0, [pc, #12]	; (29ab0 <ble_save_profile_work+0x10>)
   29aa4:	2201      	movs	r2, #1
   29aa6:	f002 bbd3 	b.w	2c250 <settings_save_one>
   29aaa:	bf00      	nop
   29aac:	200072e7 	.word	0x200072e7
   29ab0:	00053d26 	.word	0x00053d26

00029ab4 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   29ab4:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   29ab6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   29ab8:	b08a      	sub	sp, #40	; 0x28
   29aba:	4604      	mov	r4, r0
   29abc:	460e      	mov	r6, r1
   29abe:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   29ac0:	2b03      	cmp	r3, #3
   29ac2:	d820      	bhi.n	29b06 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   29ac4:	e8df f003 	tbb	[pc, r3]
   29ac8:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   29acc:	4911      	ldr	r1, [pc, #68]	; (29b14 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   29ace:	4628      	mov	r0, r5
   29ad0:	f022 f881 	bl	4bbd6 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   29ad4:	9505      	str	r5, [sp, #20]
   29ad6:	7863      	ldrb	r3, [r4, #1]
   29ad8:	9304      	str	r3, [sp, #16]
   29ada:	78a3      	ldrb	r3, [r4, #2]
   29adc:	9303      	str	r3, [sp, #12]
   29ade:	78e3      	ldrb	r3, [r4, #3]
   29ae0:	9302      	str	r3, [sp, #8]
   29ae2:	7923      	ldrb	r3, [r4, #4]
   29ae4:	9301      	str	r3, [sp, #4]
   29ae6:	7963      	ldrb	r3, [r4, #5]
   29ae8:	9300      	str	r3, [sp, #0]
   29aea:	79a3      	ldrb	r3, [r4, #6]
   29aec:	4a0a      	ldr	r2, [pc, #40]	; (29b18 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   29aee:	211e      	movs	r1, #30
   29af0:	4630      	mov	r0, r6
   29af2:	f01f ff8f 	bl	49a14 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   29af6:	b00a      	add	sp, #40	; 0x28
   29af8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   29afa:	4908      	ldr	r1, [pc, #32]	; (29b1c <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   29afc:	e7e7      	b.n	29ace <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   29afe:	4908      	ldr	r1, [pc, #32]	; (29b20 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   29b00:	e7e5      	b.n	29ace <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   29b02:	4908      	ldr	r1, [pc, #32]	; (29b24 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   29b04:	e7e3      	b.n	29ace <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   29b06:	4a08      	ldr	r2, [pc, #32]	; (29b28 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   29b08:	210a      	movs	r1, #10
   29b0a:	4628      	mov	r0, r5
   29b0c:	f01f ff82 	bl	49a14 <snprintk>
		break;
   29b10:	e7e0      	b.n	29ad4 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   29b12:	bf00      	nop
   29b14:	00053d39 	.word	0x00053d39
   29b18:	00053d62 	.word	0x00053d62
   29b1c:	00053d40 	.word	0x00053d40
   29b20:	00053d47 	.word	0x00053d47
   29b24:	00053d51 	.word	0x00053d51
   29b28:	00053d5b 	.word	0x00053d5b

00029b2c <ble_profiles_handle_set>:
#endif /* IS_ENABLED(CONFIG_ZMK_SPLIT_ROLE_CENTRAL) */

#if IS_ENABLED(CONFIG_SETTINGS)

static int ble_profiles_handle_set(const char *name, size_t len, settings_read_cb read_cb,
                                   void *cb_arg) {
   29b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29b30:	b08a      	sub	sp, #40	; 0x28
   29b32:	460d      	mov	r5, r1
   29b34:	4616      	mov	r6, r2
    const char *next;

    LOG_DBG("Setting BLE value %s", log_strdup(name));

    if (settings_name_steq(name, "profiles", &next) && next) {
   29b36:	4926      	ldr	r1, [pc, #152]	; (29bd0 <ble_profiles_handle_set+0xa4>)
   29b38:	466a      	mov	r2, sp
                                   void *cb_arg) {
   29b3a:	4604      	mov	r4, r0
   29b3c:	461f      	mov	r7, r3
    if (settings_name_steq(name, "profiles", &next) && next) {
   29b3e:	f020 fd96 	bl	4a66e <settings_name_steq>
   29b42:	b1f8      	cbz	r0, 29b84 <ble_profiles_handle_set+0x58>
   29b44:	9800      	ldr	r0, [sp, #0]
   29b46:	b1e8      	cbz	r0, 29b84 <ble_profiles_handle_set+0x58>
        char *endptr;
        uint8_t idx = strtoul(next, &endptr, 10);
   29b48:	220a      	movs	r2, #10
   29b4a:	a901      	add	r1, sp, #4
   29b4c:	f021 ffcc 	bl	4bae8 <strtoul>
        if (*endptr != '\0') {
   29b50:	9b01      	ldr	r3, [sp, #4]
   29b52:	781b      	ldrb	r3, [r3, #0]
   29b54:	bb03      	cbnz	r3, 29b98 <ble_profiles_handle_set+0x6c>
            LOG_WRN("Invalid profile index: %s", log_strdup(next));
            return -EINVAL;
        }

        if (len != sizeof(struct zmk_ble_profile)) {
   29b56:	2d16      	cmp	r5, #22
   29b58:	d11e      	bne.n	29b98 <ble_profiles_handle_set+0x6c>
            LOG_ERR("Invalid profile size (got %d expected %d)", len,
                    sizeof(struct zmk_ble_profile));
            return -EINVAL;
        }

        if (idx >= ZMK_BLE_PROFILE_COUNT) {
   29b5a:	b2c4      	uxtb	r4, r0
   29b5c:	2c04      	cmp	r4, #4
   29b5e:	d81b      	bhi.n	29b98 <ble_profiles_handle_set+0x6c>
            LOG_WRN("Profile address for index %d is larger than max of %d", idx,
                    ZMK_BLE_PROFILE_COUNT);
            return -EINVAL;
        }

        int err = read_cb(cb_arg, &profiles[idx], sizeof(struct zmk_ble_profile));
   29b60:	f8df 8070 	ldr.w	r8, [pc, #112]	; 29bd4 <ble_profiles_handle_set+0xa8>
   29b64:	436c      	muls	r4, r5
   29b66:	462a      	mov	r2, r5
   29b68:	eb08 0104 	add.w	r1, r8, r4
   29b6c:	4638      	mov	r0, r7
   29b6e:	47b0      	blx	r6
        if (err <= 0) {
   29b70:	2800      	cmp	r0, #0
   29b72:	dd13      	ble.n	29b9c <ble_profiles_handle_set+0x70>
            LOG_ERR("Failed to handle profile address from settings (err %d)", err);
            return err;
        }

        char addr_str[BT_ADDR_LE_STR_LEN];
        bt_addr_le_to_str(&profiles[idx].peer, addr_str, sizeof(addr_str));
   29b74:	f104 000f 	add.w	r0, r4, #15
   29b78:	a902      	add	r1, sp, #8
   29b7a:	4440      	add	r0, r8
   29b7c:	f7ff ff9a 	bl	29ab4 <bt_addr_le_to_str.constprop.0.isra.0>
            return err;
        }
    }
#endif

    return 0;
   29b80:	2000      	movs	r0, #0
   29b82:	e00b      	b.n	29b9c <ble_profiles_handle_set+0x70>
    } else if (settings_name_steq(name, "active_profile", &next) && !next) {
   29b84:	4914      	ldr	r1, [pc, #80]	; (29bd8 <ble_profiles_handle_set+0xac>)
   29b86:	466a      	mov	r2, sp
   29b88:	4620      	mov	r0, r4
   29b8a:	f020 fd70 	bl	4a66e <settings_name_steq>
   29b8e:	b178      	cbz	r0, 29bb0 <ble_profiles_handle_set+0x84>
   29b90:	9b00      	ldr	r3, [sp, #0]
   29b92:	b96b      	cbnz	r3, 29bb0 <ble_profiles_handle_set+0x84>
        if (len != sizeof(active_profile)) {
   29b94:	2d01      	cmp	r5, #1
   29b96:	d004      	beq.n	29ba2 <ble_profiles_handle_set+0x76>
            return -EINVAL;
   29b98:	f06f 0015 	mvn.w	r0, #21
};
   29b9c:	b00a      	add	sp, #40	; 0x28
   29b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        int err = read_cb(cb_arg, &active_profile, sizeof(active_profile));
   29ba2:	490e      	ldr	r1, [pc, #56]	; (29bdc <ble_profiles_handle_set+0xb0>)
   29ba4:	462a      	mov	r2, r5
        int err = read_cb(cb_arg, &peripheral_addr, sizeof(bt_addr_le_t));
   29ba6:	4638      	mov	r0, r7
   29ba8:	47b0      	blx	r6
        if (err <= 0) {
   29baa:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   29bae:	e7f5      	b.n	29b9c <ble_profiles_handle_set+0x70>
    else if (settings_name_steq(name, "peripheral_address", &next) && !next) {
   29bb0:	490b      	ldr	r1, [pc, #44]	; (29be0 <ble_profiles_handle_set+0xb4>)
   29bb2:	466a      	mov	r2, sp
   29bb4:	4620      	mov	r0, r4
   29bb6:	f020 fd5a 	bl	4a66e <settings_name_steq>
   29bba:	2800      	cmp	r0, #0
   29bbc:	d0e0      	beq.n	29b80 <ble_profiles_handle_set+0x54>
   29bbe:	9b00      	ldr	r3, [sp, #0]
   29bc0:	2b00      	cmp	r3, #0
   29bc2:	d1dd      	bne.n	29b80 <ble_profiles_handle_set+0x54>
        if (len != sizeof(bt_addr_le_t)) {
   29bc4:	2d07      	cmp	r5, #7
   29bc6:	d1e7      	bne.n	29b98 <ble_profiles_handle_set+0x6c>
        int err = read_cb(cb_arg, &peripheral_addr, sizeof(bt_addr_le_t));
   29bc8:	4906      	ldr	r1, [pc, #24]	; (29be4 <ble_profiles_handle_set+0xb8>)
   29bca:	462a      	mov	r2, r5
   29bcc:	e7eb      	b.n	29ba6 <ble_profiles_handle_set+0x7a>
   29bce:	bf00      	nop
   29bd0:	00053d85 	.word	0x00053d85
   29bd4:	200072e8 	.word	0x200072e8
   29bd8:	00053d2a 	.word	0x00053d2a
   29bdc:	200072e7 	.word	0x200072e7
   29be0:	00053da9 	.word	0x00053da9
   29be4:	200072e0 	.word	0x200072e0

00029be8 <disconnected>:
        LOG_DBG("Active profile connected");
        k_work_submit(&raise_profile_changed_event_work);
    }
}

static void disconnected(struct bt_conn *conn, uint8_t reason) {
   29be8:	b510      	push	{r4, lr}
   29bea:	b090      	sub	sp, #64	; 0x40
   29bec:	4604      	mov	r4, r0
    char addr[BT_ADDR_LE_STR_LEN];
    struct bt_conn_info info;

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   29bee:	f023 f93e 	bl	4ce6e <bt_conn_get_dst>
   29bf2:	4669      	mov	r1, sp
   29bf4:	f7ff ff5e 	bl	29ab4 <bt_addr_le_to_str.constprop.0.isra.0>

    LOG_DBG("Disconnected from %s (reason 0x%02x)", log_strdup(addr), reason);

    bt_conn_get_info(conn, &info);
   29bf8:	a908      	add	r1, sp, #32
   29bfa:	4620      	mov	r0, r4
   29bfc:	f006 f9c0 	bl	2ff80 <bt_conn_get_info>

    if (info.role != BT_CONN_ROLE_PERIPHERAL) {
   29c00:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   29c04:	2b01      	cmp	r3, #1
   29c06:	d114      	bne.n	29c32 <disconnected+0x4a>
        return;
    }

    // We need to do this in a work callback, otherwise the advertising update will still see the
    // connection for a profile as active, and not start advertising yet.
    k_work_submit(&update_advertising_work);
   29c08:	480b      	ldr	r0, [pc, #44]	; (29c38 <disconnected+0x50>)
   29c0a:	f01e fbb5 	bl	48378 <k_work_submit>
    return bt_addr_le_cmp(bt_conn_get_dst(conn), &profiles[active_profile].peer) == 0;
   29c0e:	4620      	mov	r0, r4
   29c10:	f023 f92d 	bl	4ce6e <bt_conn_get_dst>
   29c14:	4b09      	ldr	r3, [pc, #36]	; (29c3c <disconnected+0x54>)
   29c16:	7819      	ldrb	r1, [r3, #0]
   29c18:	220f      	movs	r2, #15
   29c1a:	2316      	movs	r3, #22
   29c1c:	fb13 2301 	smlabb	r3, r3, r1, r2
	return memcmp(a, b, sizeof(*a));
   29c20:	4907      	ldr	r1, [pc, #28]	; (29c40 <disconnected+0x58>)
   29c22:	2207      	movs	r2, #7
   29c24:	4419      	add	r1, r3
   29c26:	f022 f807 	bl	4bc38 <memcmp>

    if (is_conn_active_profile(conn)) {
   29c2a:	b910      	cbnz	r0, 29c32 <disconnected+0x4a>
        LOG_DBG("Active profile disconnected");
        k_work_submit(&raise_profile_changed_event_work);
   29c2c:	4805      	ldr	r0, [pc, #20]	; (29c44 <disconnected+0x5c>)
   29c2e:	f01e fba3 	bl	48378 <k_work_submit>
    }
}
   29c32:	b010      	add	sp, #64	; 0x40
   29c34:	bd10      	pop	{r4, pc}
   29c36:	bf00      	nop
   29c38:	2000057c 	.word	0x2000057c
   29c3c:	200072e7 	.word	0x200072e7
   29c40:	200072e8 	.word	0x200072e8
   29c44:	2000058c 	.word	0x2000058c

00029c48 <zmk_ble_active_profile_is_open>:
bool zmk_ble_active_profile_is_open() {
   29c48:	b507      	push	{r0, r1, r2, lr}
    return !bt_addr_le_cmp(&profiles[active_profile].peer, BT_ADDR_LE_ANY);
   29c4a:	4b0b      	ldr	r3, [pc, #44]	; (29c78 <zmk_ble_active_profile_is_open+0x30>)
   29c4c:	480b      	ldr	r0, [pc, #44]	; (29c7c <zmk_ble_active_profile_is_open+0x34>)
   29c4e:	7819      	ldrb	r1, [r3, #0]
   29c50:	220f      	movs	r2, #15
   29c52:	2316      	movs	r3, #22
   29c54:	fb13 2301 	smlabb	r3, r3, r1, r2
   29c58:	2200      	movs	r2, #0
   29c5a:	9200      	str	r2, [sp, #0]
   29c5c:	4669      	mov	r1, sp
   29c5e:	f8cd 2003 	str.w	r2, [sp, #3]
   29c62:	4418      	add	r0, r3
   29c64:	2207      	movs	r2, #7
   29c66:	f021 ffe7 	bl	4bc38 <memcmp>
}
   29c6a:	fab0 f080 	clz	r0, r0
   29c6e:	0940      	lsrs	r0, r0, #5
   29c70:	b003      	add	sp, #12
   29c72:	f85d fb04 	ldr.w	pc, [sp], #4
   29c76:	bf00      	nop
   29c78:	200072e7 	.word	0x200072e7
   29c7c:	200072e8 	.word	0x200072e8

00029c80 <set_profile_address>:
void set_profile_address(uint8_t index, const bt_addr_le_t *addr) {
   29c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29c84:	4604      	mov	r4, r0
   29c86:	b08c      	sub	sp, #48	; 0x30
   29c88:	460d      	mov	r5, r1
   29c8a:	f04f 0816 	mov.w	r8, #22
    memcpy(&profiles[index].peer, addr, sizeof(bt_addr_le_t));
   29c8e:	4f0f      	ldr	r7, [pc, #60]	; (29ccc <set_profile_address+0x4c>)
    bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
   29c90:	a904      	add	r1, sp, #16
   29c92:	4628      	mov	r0, r5
   29c94:	fb14 f608 	smulbb	r6, r4, r8
   29c98:	f7ff ff0c 	bl	29ab4 <bt_addr_le_to_str.constprop.0.isra.0>
    memcpy(&profiles[index].peer, addr, sizeof(bt_addr_le_t));
   29c9c:	f106 000f 	add.w	r0, r6, #15
   29ca0:	4629      	mov	r1, r5
   29ca2:	2207      	movs	r2, #7
   29ca4:	4438      	add	r0, r7
   29ca6:	f021 ffd7 	bl	4bc58 <memcpy>
    sprintf(setting_name, "ble/profiles/%d", index);
   29caa:	4622      	mov	r2, r4
   29cac:	4908      	ldr	r1, [pc, #32]	; (29cd0 <set_profile_address+0x50>)
   29cae:	4668      	mov	r0, sp
   29cb0:	f003 fa4e 	bl	2d150 <sprintf>
    settings_save_one(setting_name, &profiles[index], sizeof(struct zmk_ble_profile));
   29cb4:	4642      	mov	r2, r8
   29cb6:	19b9      	adds	r1, r7, r6
   29cb8:	4668      	mov	r0, sp
   29cba:	f002 fac9 	bl	2c250 <settings_save_one>
    k_work_submit(&raise_profile_changed_event_work);
   29cbe:	4805      	ldr	r0, [pc, #20]	; (29cd4 <set_profile_address+0x54>)
   29cc0:	f01e fb5a 	bl	48378 <k_work_submit>
}
   29cc4:	b00c      	add	sp, #48	; 0x30
   29cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29cca:	bf00      	nop
   29ccc:	200072e8 	.word	0x200072e8
   29cd0:	00053d8e 	.word	0x00053d8e
   29cd4:	2000058c 	.word	0x2000058c

00029cd8 <zmk_ble_active_profile_is_connected>:
bool zmk_ble_active_profile_is_connected() {
   29cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
bt_addr_le_t *zmk_ble_active_profile_addr() { return &profiles[active_profile].peer; }
   29cda:	4b0f      	ldr	r3, [pc, #60]	; (29d18 <zmk_ble_active_profile_is_connected+0x40>)
   29cdc:	781a      	ldrb	r2, [r3, #0]
   29cde:	2416      	movs	r4, #22
   29ce0:	230f      	movs	r3, #15
   29ce2:	fb14 3402 	smlabb	r4, r4, r2, r3
   29ce6:	4b0d      	ldr	r3, [pc, #52]	; (29d1c <zmk_ble_active_profile_is_connected+0x44>)
   29ce8:	441c      	add	r4, r3
    if (!bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   29cea:	2500      	movs	r5, #0
   29cec:	2207      	movs	r2, #7
   29cee:	4669      	mov	r1, sp
   29cf0:	4620      	mov	r0, r4
   29cf2:	9500      	str	r5, [sp, #0]
   29cf4:	f8cd 5003 	str.w	r5, [sp, #3]
   29cf8:	f021 ff9e 	bl	4bc38 <memcmp>
   29cfc:	b148      	cbz	r0, 29d12 <zmk_ble_active_profile_is_connected+0x3a>
    } else if ((conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr)) == NULL) {
   29cfe:	4621      	mov	r1, r4
   29d00:	4628      	mov	r0, r5
   29d02:	f006 f8eb 	bl	2fedc <bt_conn_lookup_addr_le>
   29d06:	b120      	cbz	r0, 29d12 <zmk_ble_active_profile_is_connected+0x3a>
    bt_conn_unref(conn);
   29d08:	f022 ffe0 	bl	4cccc <bt_conn_unref>
    return true;
   29d0c:	2001      	movs	r0, #1
}
   29d0e:	b003      	add	sp, #12
   29d10:	bd30      	pop	{r4, r5, pc}
        return false;
   29d12:	2000      	movs	r0, #0
   29d14:	e7fb      	b.n	29d0e <zmk_ble_active_profile_is_connected+0x36>
   29d16:	bf00      	nop
   29d18:	200072e7 	.word	0x200072e7
   29d1c:	200072e8 	.word	0x200072e8

00029d20 <update_advertising>:
int update_advertising() {
   29d20:	b5f0      	push	{r4, r5, r6, r7, lr}
   29d22:	b08d      	sub	sp, #52	; 0x34
    if (zmk_ble_active_profile_is_open()) {
   29d24:	f7ff ff90 	bl	29c48 <zmk_ble_active_profile_is_open>
   29d28:	b998      	cbnz	r0, 29d52 <update_advertising+0x32>
    } else if (!zmk_ble_active_profile_is_connected()) {
   29d2a:	f7ff ffd5 	bl	29cd8 <zmk_ble_active_profile_is_connected>
   29d2e:	f080 0301 	eor.w	r3, r0, #1
   29d32:	005b      	lsls	r3, r3, #1
   29d34:	b2db      	uxtb	r3, r3
    switch (desired_adv + CURR_ADV(advertising_status)) {
   29d36:	4d21      	ldr	r5, [pc, #132]	; (29dbc <update_advertising+0x9c>)
   29d38:	782a      	ldrb	r2, [r5, #0]
   29d3a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   29d3e:	2b11      	cmp	r3, #17
   29d40:	dc09      	bgt.n	29d56 <update_advertising+0x36>
   29d42:	2b02      	cmp	r3, #2
   29d44:	d02d      	beq.n	29da2 <update_advertising+0x82>
   29d46:	2b10      	cmp	r3, #16
   29d48:	d023      	beq.n	29d92 <update_advertising+0x72>
        desired_adv = ZMK_ADV_CONN;
   29d4a:	2400      	movs	r4, #0
};
   29d4c:	4620      	mov	r0, r4
   29d4e:	b00d      	add	sp, #52	; 0x34
   29d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
        desired_adv = ZMK_ADV_CONN;
   29d52:	2302      	movs	r3, #2
   29d54:	e7ef      	b.n	29d36 <update_advertising+0x16>
    switch (desired_adv + CURR_ADV(advertising_status)) {
   29d56:	2b20      	cmp	r3, #32
   29d58:	d01b      	beq.n	29d92 <update_advertising+0x72>
   29d5a:	2b12      	cmp	r3, #18
   29d5c:	d1f5      	bne.n	29d4a <update_advertising+0x2a>
        CHECKED_ADV_STOP();
   29d5e:	f005 f937 	bl	2efd0 <bt_le_adv_stop>
   29d62:	2300      	movs	r3, #0
   29d64:	702b      	strb	r3, [r5, #0]
   29d66:	4604      	mov	r4, r0
   29d68:	2800      	cmp	r0, #0
   29d6a:	d1ef      	bne.n	29d4c <update_advertising+0x2c>
        CHECKED_OPEN_ADV();
   29d6c:	4f14      	ldr	r7, [pc, #80]	; (29dc0 <update_advertising+0xa0>)
   29d6e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   29d70:	ae02      	add	r6, sp, #8
   29d72:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   29d74:	683b      	ldr	r3, [r7, #0]
   29d76:	4913      	ldr	r1, [pc, #76]	; (29dc4 <update_advertising+0xa4>)
   29d78:	6033      	str	r3, [r6, #0]
   29d7a:	2204      	movs	r2, #4
   29d7c:	9400      	str	r4, [sp, #0]
   29d7e:	4623      	mov	r3, r4
   29d80:	a802      	add	r0, sp, #8
   29d82:	f005 f8f3 	bl	2ef6c <bt_le_adv_start>
   29d86:	4604      	mov	r4, r0
   29d88:	2800      	cmp	r0, #0
   29d8a:	d1df      	bne.n	29d4c <update_advertising+0x2c>
   29d8c:	2302      	movs	r3, #2
   29d8e:	702b      	strb	r3, [r5, #0]
        break;
   29d90:	e7db      	b.n	29d4a <update_advertising+0x2a>
        CHECKED_ADV_STOP();
   29d92:	f005 f91d 	bl	2efd0 <bt_le_adv_stop>
   29d96:	2300      	movs	r3, #0
   29d98:	702b      	strb	r3, [r5, #0]
   29d9a:	4604      	mov	r4, r0
   29d9c:	2800      	cmp	r0, #0
   29d9e:	d0d4      	beq.n	29d4a <update_advertising+0x2a>
   29da0:	e7d4      	b.n	29d4c <update_advertising+0x2c>
        CHECKED_OPEN_ADV();
   29da2:	4e07      	ldr	r6, [pc, #28]	; (29dc0 <update_advertising+0xa0>)
   29da4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   29da6:	ac07      	add	r4, sp, #28
   29da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   29daa:	6833      	ldr	r3, [r6, #0]
   29dac:	6023      	str	r3, [r4, #0]
   29dae:	2300      	movs	r3, #0
   29db0:	4904      	ldr	r1, [pc, #16]	; (29dc4 <update_advertising+0xa4>)
   29db2:	9300      	str	r3, [sp, #0]
   29db4:	2204      	movs	r2, #4
   29db6:	a807      	add	r0, sp, #28
   29db8:	e7e3      	b.n	29d82 <update_advertising+0x62>
   29dba:	bf00      	nop
   29dbc:	20007356 	.word	0x20007356
   29dc0:	000518d0 	.word	0x000518d0
   29dc4:	00052224 	.word	0x00052224

00029dc8 <auth_pairing_complete>:
    }

    return BT_SECURITY_ERR_SUCCESS;
};

static void auth_pairing_complete(struct bt_conn *conn, bool bonded) {
   29dc8:	b530      	push	{r4, r5, lr}
   29dca:	b091      	sub	sp, #68	; 0x44
   29dcc:	4605      	mov	r5, r0
    struct bt_conn_info info;
    char addr[BT_ADDR_LE_STR_LEN];
    const bt_addr_le_t *dst = bt_conn_get_dst(conn);
   29dce:	f023 f84e 	bl	4ce6e <bt_conn_get_dst>

    bt_addr_le_to_str(dst, addr, sizeof(addr));
   29dd2:	4669      	mov	r1, sp
    const bt_addr_le_t *dst = bt_conn_get_dst(conn);
   29dd4:	4604      	mov	r4, r0
    bt_addr_le_to_str(dst, addr, sizeof(addr));
   29dd6:	f7ff fe6d 	bl	29ab4 <bt_addr_le_to_str.constprop.0.isra.0>
    bt_conn_get_info(conn, &info);
   29dda:	a908      	add	r1, sp, #32
   29ddc:	4628      	mov	r0, r5
   29dde:	f006 f8cf 	bl	2ff80 <bt_conn_get_info>

    if (info.role != BT_CONN_ROLE_PERIPHERAL) {
   29de2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   29de6:	2b01      	cmp	r3, #1
   29de8:	d105      	bne.n	29df6 <auth_pairing_complete+0x2e>
        LOG_DBG("SKIPPING FOR ROLE %d", info.role);
        return;
    }

    if (!zmk_ble_active_profile_is_open()) {
   29dea:	f7ff ff2d 	bl	29c48 <zmk_ble_active_profile_is_open>
        LOG_ERR("Pairing completed but current profile is not open: %s", log_strdup(addr));
        bt_unpair(BT_ID_DEFAULT, dst);
   29dee:	4621      	mov	r1, r4
    if (!zmk_ble_active_profile_is_open()) {
   29df0:	b918      	cbnz	r0, 29dfa <auth_pairing_complete+0x32>
        bt_unpair(BT_ID_DEFAULT, dst);
   29df2:	f004 f9ed 	bl	2e1d0 <bt_unpair>
        return;
    }

    set_profile_address(active_profile, dst);
    update_advertising();
};
   29df6:	b011      	add	sp, #68	; 0x44
   29df8:	bd30      	pop	{r4, r5, pc}
    set_profile_address(active_profile, dst);
   29dfa:	4b03      	ldr	r3, [pc, #12]	; (29e08 <auth_pairing_complete+0x40>)
   29dfc:	7818      	ldrb	r0, [r3, #0]
   29dfe:	f7ff ff3f 	bl	29c80 <set_profile_address>
    update_advertising();
   29e02:	f7ff ff8d 	bl	29d20 <update_advertising>
   29e06:	e7f6      	b.n	29df6 <auth_pairing_complete+0x2e>
   29e08:	200072e7 	.word	0x200072e7

00029e0c <connected>:
static void connected(struct bt_conn *conn, uint8_t err) {
   29e0c:	b530      	push	{r4, r5, lr}
   29e0e:	b091      	sub	sp, #68	; 0x44
   29e10:	460d      	mov	r5, r1
    bt_conn_get_info(conn, &info);
   29e12:	a908      	add	r1, sp, #32
static void connected(struct bt_conn *conn, uint8_t err) {
   29e14:	4604      	mov	r4, r0
    bt_conn_get_info(conn, &info);
   29e16:	f006 f8b3 	bl	2ff80 <bt_conn_get_info>
    if (info.role != BT_CONN_ROLE_PERIPHERAL) {
   29e1a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   29e1e:	2b01      	cmp	r3, #1
   29e20:	d10b      	bne.n	29e3a <connected+0x2e>
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   29e22:	4620      	mov	r0, r4
   29e24:	f023 f823 	bl	4ce6e <bt_conn_get_dst>
   29e28:	4669      	mov	r1, sp
   29e2a:	f7ff fe43 	bl	29ab4 <bt_addr_le_to_str.constprop.0.isra.0>
    advertising_status = ZMK_ADV_NONE;
   29e2e:	4b11      	ldr	r3, [pc, #68]	; (29e74 <connected+0x68>)
   29e30:	2200      	movs	r2, #0
   29e32:	701a      	strb	r2, [r3, #0]
    if (err) {
   29e34:	b11d      	cbz	r5, 29e3e <connected+0x32>
        update_advertising();
   29e36:	f7ff ff73 	bl	29d20 <update_advertising>
}
   29e3a:	b011      	add	sp, #68	; 0x44
   29e3c:	bd30      	pop	{r4, r5, pc}
    if (bt_conn_set_security(conn, BT_SECURITY_L2)) {
   29e3e:	2102      	movs	r1, #2
   29e40:	4620      	mov	r0, r4
   29e42:	f022 ffc2 	bl	4cdca <bt_conn_set_security>
    update_advertising();
   29e46:	f7ff ff6b 	bl	29d20 <update_advertising>
    return bt_addr_le_cmp(bt_conn_get_dst(conn), &profiles[active_profile].peer) == 0;
   29e4a:	4620      	mov	r0, r4
   29e4c:	f023 f80f 	bl	4ce6e <bt_conn_get_dst>
   29e50:	4b09      	ldr	r3, [pc, #36]	; (29e78 <connected+0x6c>)
   29e52:	7819      	ldrb	r1, [r3, #0]
   29e54:	220f      	movs	r2, #15
   29e56:	2316      	movs	r3, #22
   29e58:	fb13 2301 	smlabb	r3, r3, r1, r2
   29e5c:	4907      	ldr	r1, [pc, #28]	; (29e7c <connected+0x70>)
   29e5e:	2207      	movs	r2, #7
   29e60:	4419      	add	r1, r3
   29e62:	f021 fee9 	bl	4bc38 <memcmp>
    if (is_conn_active_profile(conn)) {
   29e66:	2800      	cmp	r0, #0
   29e68:	d1e7      	bne.n	29e3a <connected+0x2e>
        k_work_submit(&raise_profile_changed_event_work);
   29e6a:	4805      	ldr	r0, [pc, #20]	; (29e80 <connected+0x74>)
   29e6c:	f01e fa84 	bl	48378 <k_work_submit>
   29e70:	e7e3      	b.n	29e3a <connected+0x2e>
   29e72:	bf00      	nop
   29e74:	20007356 	.word	0x20007356
   29e78:	200072e7 	.word	0x200072e7
   29e7c:	200072e8 	.word	0x200072e8
   29e80:	2000058c 	.word	0x2000058c

00029e84 <zmk_ble_init>:
    }

    update_advertising();
}

static int zmk_ble_init(const struct device *_arg) {
   29e84:	b510      	push	{r4, lr}
    int err = bt_enable(NULL);
   29e86:	2000      	movs	r0, #0
   29e88:	f004 faf0 	bl	2e46c <bt_enable>

    if (err) {
   29e8c:	4604      	mov	r4, r0
   29e8e:	b9c0      	cbnz	r0, 29ec2 <zmk_ble_init+0x3e>
        LOG_ERR("BLUETOOTH FAILED (%d)", err);
        return err;
    }

#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
   29e90:	f002 fb32 	bl	2c4f8 <settings_subsys_init>

    err = settings_register(&profiles_handler);
   29e94:	480c      	ldr	r0, [pc, #48]	; (29ec8 <zmk_ble_init+0x44>)
   29e96:	f002 fa6b 	bl	2c370 <settings_register>
    if (err) {
   29e9a:	4604      	mov	r4, r0
   29e9c:	b988      	cbnz	r0, 29ec2 <zmk_ble_init+0x3e>
        LOG_ERR("Failed to setup the profile settings handler (err %d)", err);
        return err;
    }

    k_work_init_delayable(&ble_save_work, ble_save_profile_work);
   29e9e:	490b      	ldr	r1, [pc, #44]	; (29ecc <zmk_ble_init+0x48>)
   29ea0:	480b      	ldr	r0, [pc, #44]	; (29ed0 <zmk_ble_init+0x4c>)
   29ea2:	f026 febc 	bl	50c1e <k_work_init_delayable>

    settings_load_subtree("ble");
   29ea6:	480b      	ldr	r0, [pc, #44]	; (29ed4 <zmk_ble_init+0x50>)
   29ea8:	f002 fa0c 	bl	2c2c4 <settings_load_subtree>
    settings_load_subtree("bt");
   29eac:	480a      	ldr	r0, [pc, #40]	; (29ed8 <zmk_ble_init+0x54>)
   29eae:	f002 fa09 	bl	2c2c4 <settings_load_subtree>
            LOG_ERR("Failed to delete setting: %d", err);
        }
    }
#endif

    bt_conn_cb_register(&conn_callbacks);
   29eb2:	480a      	ldr	r0, [pc, #40]	; (29edc <zmk_ble_init+0x58>)
   29eb4:	f005 ffee 	bl	2fe94 <bt_conn_cb_register>
    bt_conn_auth_cb_register(&zmk_ble_auth_cb_display);
   29eb8:	4809      	ldr	r0, [pc, #36]	; (29ee0 <zmk_ble_init+0x5c>)
   29eba:	f006 fac9 	bl	30450 <bt_conn_auth_cb_register>
    update_advertising();
   29ebe:	f7ff ff2f 	bl	29d20 <update_advertising>

    zmk_ble_ready(0);

    return 0;
}
   29ec2:	4620      	mov	r0, r4
   29ec4:	bd10      	pop	{r4, pc}
   29ec6:	bf00      	nop
   29ec8:	20000564 	.word	0x20000564
   29ecc:	00029aa1 	.word	0x00029aa1
   29ed0:	200018b0 	.word	0x200018b0
   29ed4:	00053d9e 	.word	0x00053d9e
   29ed8:	00053da2 	.word	0x00053da2
   29edc:	20000544 	.word	0x20000544
   29ee0:	2000051c 	.word	0x2000051c

00029ee4 <zmk_ble_active_profile_addr>:
bt_addr_le_t *zmk_ble_active_profile_addr() { return &profiles[active_profile].peer; }
   29ee4:	4b04      	ldr	r3, [pc, #16]	; (29ef8 <zmk_ble_active_profile_addr+0x14>)
   29ee6:	4805      	ldr	r0, [pc, #20]	; (29efc <zmk_ble_active_profile_addr+0x18>)
   29ee8:	7819      	ldrb	r1, [r3, #0]
   29eea:	220f      	movs	r2, #15
   29eec:	2316      	movs	r3, #22
   29eee:	fb13 2301 	smlabb	r3, r3, r1, r2
   29ef2:	4418      	add	r0, r3
   29ef4:	4770      	bx	lr
   29ef6:	bf00      	nop
   29ef8:	200072e7 	.word	0x200072e7
   29efc:	200072e8 	.word	0x200072e8

00029f00 <zmk_ble_set_peripheral_addr>:
void zmk_ble_set_peripheral_addr(bt_addr_le_t *addr) {
   29f00:	b510      	push	{r4, lr}
    memcpy(&peripheral_addr, addr, sizeof(bt_addr_le_t));
   29f02:	4601      	mov	r1, r0
void zmk_ble_set_peripheral_addr(bt_addr_le_t *addr) {
   29f04:	4604      	mov	r4, r0
    memcpy(&peripheral_addr, addr, sizeof(bt_addr_le_t));
   29f06:	2207      	movs	r2, #7
   29f08:	4804      	ldr	r0, [pc, #16]	; (29f1c <zmk_ble_set_peripheral_addr+0x1c>)
   29f0a:	f021 fea5 	bl	4bc58 <memcpy>
    settings_save_one("ble/peripheral_address", addr, sizeof(bt_addr_le_t));
   29f0e:	4621      	mov	r1, r4
   29f10:	4803      	ldr	r0, [pc, #12]	; (29f20 <zmk_ble_set_peripheral_addr+0x20>)
}
   29f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    settings_save_one("ble/peripheral_address", addr, sizeof(bt_addr_le_t));
   29f16:	2207      	movs	r2, #7
   29f18:	f002 b99a 	b.w	2c250 <settings_save_one>
   29f1c:	200072e0 	.word	0x200072e0
   29f20:	00053da5 	.word	0x00053da5

00029f24 <read_hids_report_map>:
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
                             sizeof(struct hids_report));
}

static ssize_t read_hids_report_map(struct bt_conn *conn, const struct bt_gatt_attr *attr,
                                    void *buf, uint16_t len, uint16_t offset) {
   29f24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buf, len, offset, zmk_hid_report_desc,
   29f26:	244c      	movs	r4, #76	; 0x4c
   29f28:	9402      	str	r4, [sp, #8]
   29f2a:	4c04      	ldr	r4, [pc, #16]	; (29f3c <read_hids_report_map+0x18>)
   29f2c:	9401      	str	r4, [sp, #4]
   29f2e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   29f32:	9400      	str	r4, [sp, #0]
   29f34:	f024 faae 	bl	4e494 <bt_gatt_attr_read>
                             sizeof(zmk_hid_report_desc));
}
   29f38:	b004      	add	sp, #16
   29f3a:	bd10      	pop	{r4, pc}
   29f3c:	00053de3 	.word	0x00053de3

00029f40 <zmk_hog_init>:
    k_work_submit_to_queue(&hog_work_q, &hog_consumer_work);

    return 0;
};

int zmk_hog_init(const struct device *_arg) {
   29f40:	b507      	push	{r0, r1, r2, lr}
    static const struct k_work_queue_config queue_config = {.name = "HID Over GATT Send Work"};
    k_work_queue_start(&hog_work_q, hog_q_stack, K_THREAD_STACK_SIZEOF(hog_q_stack),
   29f42:	4b06      	ldr	r3, [pc, #24]	; (29f5c <zmk_hog_init+0x1c>)
   29f44:	9300      	str	r3, [sp, #0]
   29f46:	4906      	ldr	r1, [pc, #24]	; (29f60 <zmk_hog_init+0x20>)
   29f48:	4806      	ldr	r0, [pc, #24]	; (29f64 <zmk_hog_init+0x24>)
   29f4a:	2305      	movs	r3, #5
   29f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
   29f50:	f01e fa18 	bl	48384 <k_work_queue_start>
                       CONFIG_ZMK_BLE_THREAD_PRIORITY, &queue_config);

    return 0;
}
   29f54:	2000      	movs	r0, #0
   29f56:	b003      	add	sp, #12
   29f58:	f85d fb04 	ldr.w	pc, [sp], #4
   29f5c:	00052244 	.word	0x00052244
   29f60:	20007428 	.word	0x20007428
   29f64:	200018e0 	.word	0x200018e0

00029f68 <send_keyboard_report_callback>:
void send_keyboard_report_callback(struct k_work *work) {
   29f68:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
   29f6a:	4e13      	ldr	r6, [pc, #76]	; (29fb8 <send_keyboard_report_callback+0x50>)
        struct bt_gatt_notify_params notify_params = {
   29f6c:	4f13      	ldr	r7, [pc, #76]	; (29fbc <send_keyboard_report_callback+0x54>)
void send_keyboard_report_callback(struct k_work *work) {
   29f6e:	b089      	sub	sp, #36	; 0x24
   29f70:	2200      	movs	r2, #0
   29f72:	2300      	movs	r3, #0
   29f74:	4669      	mov	r1, sp
   29f76:	4630      	mov	r0, r6
   29f78:	f01d ff32 	bl	47de0 <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_hog_keyboard_msgq, &report, K_NO_WAIT) == 0) {
   29f7c:	4605      	mov	r5, r0
   29f7e:	b108      	cbz	r0, 29f84 <send_keyboard_report_callback+0x1c>
}
   29f80:	b009      	add	sp, #36	; 0x24
   29f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
        struct bt_conn *conn = destination_connection();
   29f84:	f01f fbe6 	bl	49754 <destination_connection>
        if (conn == NULL) {
   29f88:	4604      	mov	r4, r0
   29f8a:	2800      	cmp	r0, #0
   29f8c:	d0f8      	beq.n	29f80 <send_keyboard_report_callback+0x18>
        struct bt_gatt_notify_params notify_params = {
   29f8e:	2218      	movs	r2, #24
   29f90:	4629      	mov	r1, r5
   29f92:	a802      	add	r0, sp, #8
   29f94:	f021 fe6b 	bl	4bc6e <memset>
   29f98:	2308      	movs	r3, #8
        int err = bt_gatt_notify_cb(conn, &notify_params);
   29f9a:	eb0d 0103 	add.w	r1, sp, r3
   29f9e:	4620      	mov	r0, r4
        struct bt_gatt_notify_params notify_params = {
   29fa0:	9703      	str	r7, [sp, #12]
   29fa2:	f8cd d010 	str.w	sp, [sp, #16]
   29fa6:	f8ad 3014 	strh.w	r3, [sp, #20]
        int err = bt_gatt_notify_cb(conn, &notify_params);
   29faa:	f007 ff4d 	bl	31e48 <bt_gatt_notify_cb>
        bt_conn_unref(conn);
   29fae:	4620      	mov	r0, r4
   29fb0:	f022 fe8c 	bl	4cccc <bt_conn_unref>
   29fb4:	e7dc      	b.n	29f70 <send_keyboard_report_callback+0x8>
   29fb6:	bf00      	nop
   29fb8:	200011fc 	.word	0x200011fc
   29fbc:	000522b0 	.word	0x000522b0

00029fc0 <send_consumer_report_callback>:
void send_consumer_report_callback(struct k_work *work) {
   29fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29fc4:	4f13      	ldr	r7, [pc, #76]	; (2a014 <send_consumer_report_callback+0x54>)
        struct bt_gatt_notify_params notify_params = {
   29fc6:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2a018 <send_consumer_report_callback+0x58>
void send_consumer_report_callback(struct k_work *work) {
   29fca:	b08a      	sub	sp, #40	; 0x28
   29fcc:	ae01      	add	r6, sp, #4
   29fce:	2200      	movs	r2, #0
   29fd0:	2300      	movs	r3, #0
   29fd2:	4631      	mov	r1, r6
   29fd4:	4638      	mov	r0, r7
   29fd6:	f01d ff03 	bl	47de0 <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_hog_consumer_msgq, &report, K_NO_WAIT) == 0) {
   29fda:	4605      	mov	r5, r0
   29fdc:	b110      	cbz	r0, 29fe4 <send_consumer_report_callback+0x24>
};
   29fde:	b00a      	add	sp, #40	; 0x28
   29fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        struct bt_conn *conn = destination_connection();
   29fe4:	f01f fbb6 	bl	49754 <destination_connection>
        if (conn == NULL) {
   29fe8:	4604      	mov	r4, r0
   29fea:	2800      	cmp	r0, #0
   29fec:	d0f7      	beq.n	29fde <send_consumer_report_callback+0x1e>
        struct bt_gatt_notify_params notify_params = {
   29fee:	2218      	movs	r2, #24
   29ff0:	4629      	mov	r1, r5
   29ff2:	a804      	add	r0, sp, #16
   29ff4:	f021 fe3b 	bl	4bc6e <memset>
   29ff8:	230c      	movs	r3, #12
        int err = bt_gatt_notify_cb(conn, &notify_params);
   29ffa:	a904      	add	r1, sp, #16
   29ffc:	4620      	mov	r0, r4
        struct bt_gatt_notify_params notify_params = {
   29ffe:	e9cd 8605 	strd	r8, r6, [sp, #20]
   2a002:	f8ad 301c 	strh.w	r3, [sp, #28]
        int err = bt_gatt_notify_cb(conn, &notify_params);
   2a006:	f007 ff1f 	bl	31e48 <bt_gatt_notify_cb>
        bt_conn_unref(conn);
   2a00a:	4620      	mov	r0, r4
   2a00c:	f022 fe5e 	bl	4cccc <bt_conn_unref>
   2a010:	e7dd      	b.n	29fce <send_consumer_report_callback+0xe>
   2a012:	bf00      	nop
   2a014:	200011cc 	.word	0x200011cc
   2a018:	00052314 	.word	0x00052314

0002a01c <zmk_hog_send_keyboard_report>:
int zmk_hog_send_keyboard_report(struct zmk_hid_keyboard_report_body *report) {
   2a01c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a01e:	4605      	mov	r5, r0
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a020:	f640 42cd 	movw	r2, #3277	; 0xccd
   2a024:	4601      	mov	r1, r0
   2a026:	2300      	movs	r3, #0
   2a028:	480c      	ldr	r0, [pc, #48]	; (2a05c <zmk_hog_send_keyboard_report+0x40>)
   2a02a:	f01d fe83 	bl	47d34 <z_impl_k_msgq_put>
    if (err) {
   2a02e:	4604      	mov	r4, r0
   2a030:	b178      	cbz	r0, 2a052 <zmk_hog_send_keyboard_report+0x36>
        switch (err) {
   2a032:	f110 0f0b 	cmn.w	r0, #11
   2a036:	d109      	bne.n	2a04c <zmk_hog_send_keyboard_report+0x30>
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a038:	2200      	movs	r2, #0
   2a03a:	2300      	movs	r3, #0
   2a03c:	4669      	mov	r1, sp
   2a03e:	4807      	ldr	r0, [pc, #28]	; (2a05c <zmk_hog_send_keyboard_report+0x40>)
   2a040:	f01d fece 	bl	47de0 <z_impl_k_msgq_get>
            return zmk_hog_send_keyboard_report(report);
   2a044:	4628      	mov	r0, r5
   2a046:	f7ff ffe9 	bl	2a01c <zmk_hog_send_keyboard_report>
   2a04a:	4604      	mov	r4, r0
};
   2a04c:	4620      	mov	r0, r4
   2a04e:	b003      	add	sp, #12
   2a050:	bd30      	pop	{r4, r5, pc}
    k_work_submit_to_queue(&hog_work_q, &hog_keyboard_work);
   2a052:	4903      	ldr	r1, [pc, #12]	; (2a060 <zmk_hog_send_keyboard_report+0x44>)
   2a054:	4803      	ldr	r0, [pc, #12]	; (2a064 <zmk_hog_send_keyboard_report+0x48>)
   2a056:	f026 fdc5 	bl	50be4 <k_work_submit_to_queue>
    return 0;
   2a05a:	e7f7      	b.n	2a04c <zmk_hog_send_keyboard_report+0x30>
   2a05c:	200011fc 	.word	0x200011fc
   2a060:	200005ac 	.word	0x200005ac
   2a064:	200018e0 	.word	0x200018e0

0002a068 <zmk_hog_send_consumer_report>:
int zmk_hog_send_consumer_report(struct zmk_hid_consumer_report_body *report) {
   2a068:	b530      	push	{r4, r5, lr}
   2a06a:	4605      	mov	r5, r0
   2a06c:	b085      	sub	sp, #20
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a06e:	f640 42cd 	movw	r2, #3277	; 0xccd
   2a072:	4601      	mov	r1, r0
   2a074:	2300      	movs	r3, #0
   2a076:	480d      	ldr	r0, [pc, #52]	; (2a0ac <zmk_hog_send_consumer_report+0x44>)
   2a078:	f01d fe5c 	bl	47d34 <z_impl_k_msgq_put>
    if (err) {
   2a07c:	4604      	mov	r4, r0
   2a07e:	b178      	cbz	r0, 2a0a0 <zmk_hog_send_consumer_report+0x38>
        switch (err) {
   2a080:	f110 0f0b 	cmn.w	r0, #11
   2a084:	d109      	bne.n	2a09a <zmk_hog_send_consumer_report+0x32>
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a086:	2200      	movs	r2, #0
   2a088:	2300      	movs	r3, #0
   2a08a:	a901      	add	r1, sp, #4
   2a08c:	4807      	ldr	r0, [pc, #28]	; (2a0ac <zmk_hog_send_consumer_report+0x44>)
   2a08e:	f01d fea7 	bl	47de0 <z_impl_k_msgq_get>
            return zmk_hog_send_consumer_report(report);
   2a092:	4628      	mov	r0, r5
   2a094:	f7ff ffe8 	bl	2a068 <zmk_hog_send_consumer_report>
   2a098:	4604      	mov	r4, r0
};
   2a09a:	4620      	mov	r0, r4
   2a09c:	b005      	add	sp, #20
   2a09e:	bd30      	pop	{r4, r5, pc}
    k_work_submit_to_queue(&hog_work_q, &hog_consumer_work);
   2a0a0:	4903      	ldr	r1, [pc, #12]	; (2a0b0 <zmk_hog_send_consumer_report+0x48>)
   2a0a2:	4804      	ldr	r0, [pc, #16]	; (2a0b4 <zmk_hog_send_consumer_report+0x4c>)
   2a0a4:	f026 fd9e 	bl	50be4 <k_work_submit_to_queue>
    return 0;
   2a0a8:	e7f7      	b.n	2a09a <zmk_hog_send_consumer_report+0x32>
   2a0aa:	bf00      	nop
   2a0ac:	200011cc 	.word	0x200011cc
   2a0b0:	2000059c 	.word	0x2000059c
   2a0b4:	200018e0 	.word	0x200018e0

0002a0b8 <new_zmk_battery_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/battery_state_changed.h>

   2a0b8:	b510      	push	{r4, lr}
   2a0ba:	4604      	mov	r4, r0
   2a0bc:	200c      	movs	r0, #12
   2a0be:	f027 f909 	bl	512d4 <k_malloc>
   2a0c2:	4a02      	ldr	r2, [pc, #8]	; (2a0cc <new_zmk_battery_state_changed+0x14>)
   2a0c4:	6002      	str	r2, [r0, #0]
   2a0c6:	7204      	strb	r4, [r0, #8]
   2a0c8:	bd10      	pop	{r4, pc}
   2a0ca:	bf00      	nop
   2a0cc:	00052378 	.word	0x00052378

0002a0d0 <zmk_battery_timer>:
    }
}

K_WORK_DEFINE(battery_work, zmk_battery_work);

static void zmk_battery_timer(struct k_timer *timer) { k_work_submit(&battery_work); }
   2a0d0:	4801      	ldr	r0, [pc, #4]	; (2a0d8 <zmk_battery_timer+0x8>)
   2a0d2:	f01e b951 	b.w	48378 <k_work_submit>
   2a0d6:	bf00      	nop
   2a0d8:	2000067c 	.word	0x2000067c

0002a0dc <zmk_battery_update.constprop.0>:
static int zmk_battery_update(const struct device *battery) {
   2a0dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
						  enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, type);
   2a0de:	4c0f      	ldr	r4, [pc, #60]	; (2a11c <zmk_battery_update.constprop.0+0x40>)
   2a0e0:	68a5      	ldr	r5, [r4, #8]
   2a0e2:	212c      	movs	r1, #44	; 0x2c
   2a0e4:	68eb      	ldr	r3, [r5, #12]
   2a0e6:	4620      	mov	r0, r4
   2a0e8:	4798      	blx	r3
    if (rc != 0) {
   2a0ea:	b9a0      	cbnz	r0, 2a116 <zmk_battery_update.constprop.0+0x3a>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
   2a0ec:	212c      	movs	r1, #44	; 0x2c
   2a0ee:	692b      	ldr	r3, [r5, #16]
   2a0f0:	466a      	mov	r2, sp
   2a0f2:	4620      	mov	r0, r4
   2a0f4:	4798      	blx	r3
    if (rc != 0) {
   2a0f6:	b970      	cbnz	r0, 2a116 <zmk_battery_update.constprop.0+0x3a>
    if (last_state_of_charge != state_of_charge.val1) {
   2a0f8:	4c09      	ldr	r4, [pc, #36]	; (2a120 <zmk_battery_update.constprop.0+0x44>)
   2a0fa:	9b00      	ldr	r3, [sp, #0]
   2a0fc:	7822      	ldrb	r2, [r4, #0]
   2a0fe:	429a      	cmp	r2, r3
   2a100:	d009      	beq.n	2a116 <zmk_battery_update.constprop.0+0x3a>
        last_state_of_charge = state_of_charge.val1;
   2a102:	b2d8      	uxtb	r0, r3
   2a104:	7020      	strb	r0, [r4, #0]
        rc = bt_bas_set_battery_level(last_state_of_charge);
   2a106:	f000 ffa1 	bl	2b04c <bt_bas_set_battery_level>
        if (rc != 0) {
   2a10a:	b920      	cbnz	r0, 2a116 <zmk_battery_update.constprop.0+0x3a>
        rc = ZMK_EVENT_RAISE(new_zmk_battery_state_changed(
   2a10c:	7820      	ldrb	r0, [r4, #0]
   2a10e:	f7ff ffd3 	bl	2a0b8 <new_zmk_battery_state_changed>
   2a112:	f01e ffdc 	bl	490ce <zmk_event_manager_raise>
}
   2a116:	b003      	add	sp, #12
   2a118:	bd30      	pop	{r4, r5, pc}
   2a11a:	bf00      	nop
   2a11c:	000514c4 	.word	0x000514c4
   2a120:	20007358 	.word	0x20007358

0002a124 <zmk_battery_init>:

K_TIMER_DEFINE(battery_timer, zmk_battery_timer, NULL);

static int zmk_battery_init(const struct device *_arg) {
   2a124:	b513      	push	{r0, r1, r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   2a126:	480b      	ldr	r0, [pc, #44]	; (2a154 <zmk_battery_init+0x30>)
   2a128:	f026 fb10 	bl	5074c <z_device_is_ready>
    }

    LOG_WRN("Finding battery device labeled BATTERY is deprecated. Use zmk,battery chosen node.");
#endif

    if (!device_is_ready(battery)) {
   2a12c:	b170      	cbz	r0, 2a14c <zmk_battery_init+0x28>
        LOG_ERR("Battery device \"%s\" is not ready", battery->name);
        return -ENODEV;
    }

    int rc = zmk_battery_update(battery);
   2a12e:	f7ff ffd5 	bl	2a0dc <zmk_battery_update.constprop.0>

    if (rc != 0) {
   2a132:	4604      	mov	r4, r0
   2a134:	b938      	cbnz	r0, 2a146 <zmk_battery_init+0x22>
        LOG_DBG("Failed to update battery value: %d.", rc);
        return rc;
    }

    k_timer_start(&battery_timer, K_MINUTES(1), K_SECONDS(CONFIG_ZMK_BATTERY_REPORT_INTERVAL));
   2a136:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   2a13a:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
   2a13c:	4806      	ldr	r0, [pc, #24]	; (2a158 <zmk_battery_init+0x34>)
   2a13e:	e9cd 2300 	strd	r2, r3, [sp]
   2a142:	f01e feb7 	bl	48eb4 <z_impl_k_timer_start>

    return 0;
}
   2a146:	4620      	mov	r0, r4
   2a148:	b002      	add	sp, #8
   2a14a:	bd10      	pop	{r4, pc}
        return -ENODEV;
   2a14c:	f06f 0412 	mvn.w	r4, #18
   2a150:	e7f9      	b.n	2a146 <zmk_battery_init+0x22>
   2a152:	bf00      	nop
   2a154:	000514c4 	.word	0x000514c4
   2a158:	20001088 	.word	0x20001088

0002a15c <start_scan>:
    if (type == BT_GAP_ADV_TYPE_ADV_IND || type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
        bt_data_parse(ad, split_central_eir_found, (void *)addr);
    }
}

static int start_scan(void) {
   2a15c:	b530      	push	{r4, r5, lr}
    int err;

    err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, split_central_device_found);
   2a15e:	4d06      	ldr	r5, [pc, #24]	; (2a178 <start_scan+0x1c>)
   2a160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
static int start_scan(void) {
   2a162:	b087      	sub	sp, #28
    err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, split_central_device_found);
   2a164:	ac01      	add	r4, sp, #4
   2a166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2a168:	682b      	ldr	r3, [r5, #0]
   2a16a:	4904      	ldr	r1, [pc, #16]	; (2a17c <start_scan+0x20>)
   2a16c:	6023      	str	r3, [r4, #0]
   2a16e:	a801      	add	r0, sp, #4
   2a170:	f005 f996 	bl	2f4a0 <bt_le_scan_start>
        return err;
    }

    LOG_DBG("Scanning successfully started");
    return 0;
}
   2a174:	b007      	add	sp, #28
   2a176:	bd30      	pop	{r4, r5, pc}
   2a178:	000518e4 	.word	0x000518e4
   2a17c:	0002a289 	.word	0x0002a289

0002a180 <zmk_split_bt_central_init>:

    struct zmk_split_run_behavior_payload_wrapper wrapper = {.source = source, .payload = payload};
    return split_bt_invoke_behavior_payload(wrapper);
}

int zmk_split_bt_central_init(const struct device *_arg) {
   2a180:	b507      	push	{r0, r1, r2, lr}
    k_work_queue_start(&split_central_split_run_q, split_central_split_run_q_stack,
   2a182:	2300      	movs	r3, #0
   2a184:	4907      	ldr	r1, [pc, #28]	; (2a1a4 <zmk_split_bt_central_init+0x24>)
   2a186:	9300      	str	r3, [sp, #0]
   2a188:	f44f 7200 	mov.w	r2, #512	; 0x200
   2a18c:	2305      	movs	r3, #5
   2a18e:	4806      	ldr	r0, [pc, #24]	; (2a1a8 <zmk_split_bt_central_init+0x28>)
   2a190:	f01e f8f8 	bl	48384 <k_work_queue_start>
                       K_THREAD_STACK_SIZEOF(split_central_split_run_q_stack),
                       CONFIG_ZMK_BLE_THREAD_PRIORITY, NULL);
    bt_conn_cb_register(&conn_callbacks);
   2a194:	4805      	ldr	r0, [pc, #20]	; (2a1ac <zmk_split_bt_central_init+0x2c>)
   2a196:	f005 fe7d 	bl	2fe94 <bt_conn_cb_register>

    return start_scan();
}
   2a19a:	b003      	add	sp, #12
   2a19c:	f85d eb04 	ldr.w	lr, [sp], #4
    return start_scan();
   2a1a0:	f7ff bfdc 	b.w	2a15c <start_scan>
   2a1a4:	20007628 	.word	0x20007628
   2a1a8:	20001980 	.word	0x20001980
   2a1ac:	2000069c 	.word	0x2000069c

0002a1b0 <split_bt_invoke_behavior_payload>:
split_bt_invoke_behavior_payload(struct zmk_split_run_behavior_payload_wrapper payload_wrapper) {
   2a1b0:	b084      	sub	sp, #16
   2a1b2:	b510      	push	{r4, lr}
   2a1b4:	b088      	sub	sp, #32
   2a1b6:	ac0a      	add	r4, sp, #40	; 0x28
   2a1b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a1bc:	4811      	ldr	r0, [pc, #68]	; (2a204 <split_bt_invoke_behavior_payload+0x54>)
   2a1be:	4621      	mov	r1, r4
   2a1c0:	f640 42cd 	movw	r2, #3277	; 0xccd
   2a1c4:	2300      	movs	r3, #0
   2a1c6:	f01d fdb5 	bl	47d34 <z_impl_k_msgq_put>
    if (err) {
   2a1ca:	4604      	mov	r4, r0
   2a1cc:	b1a8      	cbz	r0, 2a1fa <split_bt_invoke_behavior_payload+0x4a>
        switch (err) {
   2a1ce:	f110 0f0b 	cmn.w	r0, #11
   2a1d2:	d10c      	bne.n	2a1ee <split_bt_invoke_behavior_payload+0x3e>
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a1d4:	2200      	movs	r2, #0
   2a1d6:	2300      	movs	r3, #0
   2a1d8:	a903      	add	r1, sp, #12
   2a1da:	480a      	ldr	r0, [pc, #40]	; (2a204 <split_bt_invoke_behavior_payload+0x54>)
   2a1dc:	f01d fe00 	bl	47de0 <z_impl_k_msgq_get>
            return split_bt_invoke_behavior_payload(payload_wrapper);
   2a1e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a1e2:	9300      	str	r3, [sp, #0]
   2a1e4:	ab0a      	add	r3, sp, #40	; 0x28
   2a1e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2a1e8:	f7ff ffe2 	bl	2a1b0 <split_bt_invoke_behavior_payload>
   2a1ec:	4604      	mov	r4, r0
};
   2a1ee:	4620      	mov	r0, r4
   2a1f0:	b008      	add	sp, #32
   2a1f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a1f6:	b004      	add	sp, #16
   2a1f8:	4770      	bx	lr
    k_work_submit_to_queue(&split_central_split_run_q, &split_central_split_run_work);
   2a1fa:	4903      	ldr	r1, [pc, #12]	; (2a208 <split_bt_invoke_behavior_payload+0x58>)
   2a1fc:	4803      	ldr	r0, [pc, #12]	; (2a20c <split_bt_invoke_behavior_payload+0x5c>)
   2a1fe:	f026 fcf1 	bl	50be4 <k_work_submit_to_queue>
    return 0;
   2a202:	e7f4      	b.n	2a1ee <split_bt_invoke_behavior_payload+0x3e>
   2a204:	2000125c 	.word	0x2000125c
   2a208:	2000068c 	.word	0x2000068c
   2a20c:	20001980 	.word	0x20001980

0002a210 <bt_addr_le_to_str.constprop.0.isra.0>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   2a210:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
   2a212:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   2a214:	b08a      	sub	sp, #40	; 0x28
   2a216:	4604      	mov	r4, r0
   2a218:	460e      	mov	r6, r1
   2a21a:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   2a21c:	2b03      	cmp	r3, #3
   2a21e:	d820      	bhi.n	2a262 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   2a220:	e8df f003 	tbb	[pc, r3]
   2a224:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
   2a228:	4911      	ldr	r1, [pc, #68]	; (2a270 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		strcpy(type, "random");
   2a22a:	4628      	mov	r0, r5
   2a22c:	f021 fcd3 	bl	4bbd6 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   2a230:	9505      	str	r5, [sp, #20]
   2a232:	7863      	ldrb	r3, [r4, #1]
   2a234:	9304      	str	r3, [sp, #16]
   2a236:	78a3      	ldrb	r3, [r4, #2]
   2a238:	9303      	str	r3, [sp, #12]
   2a23a:	78e3      	ldrb	r3, [r4, #3]
   2a23c:	9302      	str	r3, [sp, #8]
   2a23e:	7923      	ldrb	r3, [r4, #4]
   2a240:	9301      	str	r3, [sp, #4]
   2a242:	7963      	ldrb	r3, [r4, #5]
   2a244:	9300      	str	r3, [sp, #0]
   2a246:	79a3      	ldrb	r3, [r4, #6]
   2a248:	4a0a      	ldr	r2, [pc, #40]	; (2a274 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   2a24a:	211e      	movs	r1, #30
   2a24c:	4630      	mov	r0, r6
   2a24e:	f01f fbe1 	bl	49a14 <snprintk>
}
   2a252:	b00a      	add	sp, #40	; 0x28
   2a254:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   2a256:	4908      	ldr	r1, [pc, #32]	; (2a278 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   2a258:	e7e7      	b.n	2a22a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   2a25a:	4908      	ldr	r1, [pc, #32]	; (2a27c <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   2a25c:	e7e5      	b.n	2a22a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   2a25e:	4908      	ldr	r1, [pc, #32]	; (2a280 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   2a260:	e7e3      	b.n	2a22a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   2a262:	4a08      	ldr	r2, [pc, #32]	; (2a284 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   2a264:	210a      	movs	r1, #10
   2a266:	4628      	mov	r0, r5
   2a268:	f01f fbd4 	bl	49a14 <snprintk>
		break;
   2a26c:	e7e0      	b.n	2a230 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   2a26e:	bf00      	nop
   2a270:	00053d39 	.word	0x00053d39
   2a274:	00053d62 	.word	0x00053d62
   2a278:	00053d40 	.word	0x00053d40
   2a27c:	00053d47 	.word	0x00053d47
   2a280:	00053d51 	.word	0x00053d51
   2a284:	00053d5b 	.word	0x00053d5b

0002a288 <split_central_device_found>:
                                       struct net_buf_simple *ad) {
   2a288:	b570      	push	{r4, r5, r6, lr}
   2a28a:	b088      	sub	sp, #32
   2a28c:	4616      	mov	r6, r2
    bt_addr_le_to_str(addr, dev, sizeof(dev));
   2a28e:	4669      	mov	r1, sp
                                       struct net_buf_simple *ad) {
   2a290:	4605      	mov	r5, r0
   2a292:	461c      	mov	r4, r3
    bt_addr_le_to_str(addr, dev, sizeof(dev));
   2a294:	f7ff ffbc 	bl	2a210 <bt_addr_le_to_str.constprop.0.isra.0>
    if (type == BT_GAP_ADV_TYPE_ADV_IND || type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
   2a298:	2e01      	cmp	r6, #1
   2a29a:	d804      	bhi.n	2a2a6 <split_central_device_found+0x1e>
        bt_data_parse(ad, split_central_eir_found, (void *)addr);
   2a29c:	4903      	ldr	r1, [pc, #12]	; (2a2ac <split_central_device_found+0x24>)
   2a29e:	462a      	mov	r2, r5
   2a2a0:	4620      	mov	r0, r4
   2a2a2:	f022 f9a9 	bl	4c5f8 <bt_data_parse>
}
   2a2a6:	b008      	add	sp, #32
   2a2a8:	bd70      	pop	{r4, r5, r6, pc}
   2a2aa:	bf00      	nop
   2a2ac:	0002a6bd 	.word	0x0002a6bd

0002a2b0 <peripheral_event_work_callback>:
void peripheral_event_work_callback(struct k_work *work) {
   2a2b0:	b530      	push	{r4, r5, lr}
   2a2b2:	4d0c      	ldr	r5, [pc, #48]	; (2a2e4 <peripheral_event_work_callback+0x34>)
   2a2b4:	b089      	sub	sp, #36	; 0x24
   2a2b6:	ac02      	add	r4, sp, #8
   2a2b8:	2200      	movs	r2, #0
   2a2ba:	2300      	movs	r3, #0
   2a2bc:	4621      	mov	r1, r4
   2a2be:	4628      	mov	r0, r5
   2a2c0:	f01d fd8e 	bl	47de0 <z_impl_k_msgq_get>
    while (k_msgq_get(&peripheral_event_msgq, &ev, K_NO_WAIT) == 0) {
   2a2c4:	b108      	cbz	r0, 2a2ca <peripheral_event_work_callback+0x1a>
}
   2a2c6:	b009      	add	sp, #36	; 0x24
   2a2c8:	bd30      	pop	{r4, r5, pc}
        ZMK_EVENT_RAISE(new_zmk_position_state_changed(ev));
   2a2ca:	ab08      	add	r3, sp, #32
   2a2cc:	e913 0003 	ldmdb	r3, {r0, r1}
   2a2d0:	e88d 0003 	stmia.w	sp, {r0, r1}
   2a2d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2a2d8:	f7fe fe4c 	bl	28f74 <new_zmk_position_state_changed>
   2a2dc:	f01e fef7 	bl	490ce <zmk_event_manager_raise>
   2a2e0:	e7ea      	b.n	2a2b8 <peripheral_event_work_callback+0x8>
   2a2e2:	bf00      	nop
   2a2e4:	2000116c 	.word	0x2000116c

0002a2e8 <split_central_split_run_callback>:
void split_central_split_run_callback(struct k_work *work) {
   2a2e8:	b570      	push	{r4, r5, r6, lr}
   2a2ea:	4e10      	ldr	r6, [pc, #64]	; (2a32c <split_central_split_run_callback+0x44>)
        if (peripherals[payload_wrapper.source].state != PERIPHERAL_SLOT_STATE_CONNECTED) {
   2a2ec:	4c10      	ldr	r4, [pc, #64]	; (2a330 <split_central_split_run_callback+0x48>)
void split_central_split_run_callback(struct k_work *work) {
   2a2ee:	b08a      	sub	sp, #40	; 0x28
   2a2f0:	2200      	movs	r2, #0
   2a2f2:	2300      	movs	r3, #0
   2a2f4:	a905      	add	r1, sp, #20
   2a2f6:	4630      	mov	r0, r6
   2a2f8:	f01d fd72 	bl	47de0 <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_split_central_split_run_msgq, &payload_wrapper, K_NO_WAIT) == 0) {
   2a2fc:	b108      	cbz	r0, 2a302 <split_central_split_run_callback+0x1a>
}
   2a2fe:	b00a      	add	sp, #40	; 0x28
   2a300:	bd70      	pop	{r4, r5, r6, pc}
        if (peripherals[payload_wrapper.source].state != PERIPHERAL_SLOT_STATE_CONNECTED) {
   2a302:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2a306:	227c      	movs	r2, #124	; 0x7c
   2a308:	4353      	muls	r3, r2
   2a30a:	18e5      	adds	r5, r4, r3
   2a30c:	5ce3      	ldrb	r3, [r4, r3]
   2a30e:	2b02      	cmp	r3, #2
   2a310:	d1ee      	bne.n	2a2f0 <split_central_split_run_callback+0x8>
 */
static inline int bt_gatt_write_without_response(struct bt_conn *conn,
						 uint16_t handle, const void *data,
						 uint16_t length, bool sign)
{
	return bt_gatt_write_without_response_cb(conn, handle, data, length,
   2a312:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2a316:	2301      	movs	r3, #1
   2a318:	9300      	str	r3, [sp, #0]
   2a31a:	f8b5 1058 	ldrh.w	r1, [r5, #88]	; 0x58
   2a31e:	6868      	ldr	r0, [r5, #4]
   2a320:	2313      	movs	r3, #19
   2a322:	f10d 0215 	add.w	r2, sp, #21
   2a326:	f024 fb51 	bl	4e9cc <bt_gatt_write_without_response_cb>
   2a32a:	e7e1      	b.n	2a2f0 <split_central_split_run_callback+0x8>
   2a32c:	2000125c 	.word	0x2000125c
   2a330:	200042a4 	.word	0x200042a4

0002a334 <peripheral_slot_index_for_conn>:
        if (peripherals[i].conn == conn) {
   2a334:	4b03      	ldr	r3, [pc, #12]	; (2a344 <peripheral_slot_index_for_conn+0x10>)
   2a336:	685b      	ldr	r3, [r3, #4]
   2a338:	4283      	cmp	r3, r0
}
   2a33a:	bf14      	ite	ne
   2a33c:	f06f 0015 	mvnne.w	r0, #21
   2a340:	2000      	moveq	r0, #0
   2a342:	4770      	bx	lr
   2a344:	200042a4 	.word	0x200042a4

0002a348 <peripheral_slot_for_conn>:
struct peripheral_slot *peripheral_slot_for_conn(struct bt_conn *conn) {
   2a348:	b508      	push	{r3, lr}
    int idx = peripheral_slot_index_for_conn(conn);
   2a34a:	f7ff fff3 	bl	2a334 <peripheral_slot_index_for_conn>
    if (idx < 0) {
   2a34e:	1e03      	subs	r3, r0, #0
    return &peripherals[idx];
   2a350:	bfa3      	ittte	ge
   2a352:	4803      	ldrge	r0, [pc, #12]	; (2a360 <peripheral_slot_for_conn+0x18>)
   2a354:	227c      	movge	r2, #124	; 0x7c
   2a356:	fb02 0003 	mlage	r0, r2, r3, r0
        return NULL;
   2a35a:	2000      	movlt	r0, #0
}
   2a35c:	bd08      	pop	{r3, pc}
   2a35e:	bf00      	nop
   2a360:	200042a4 	.word	0x200042a4

0002a364 <split_central_process_connection>:
static void split_central_process_connection(struct bt_conn *conn) {
   2a364:	b510      	push	{r4, lr}
    err = bt_conn_set_security(conn, BT_SECURITY_L2);
   2a366:	2102      	movs	r1, #2
static void split_central_process_connection(struct bt_conn *conn) {
   2a368:	b088      	sub	sp, #32
   2a36a:	4604      	mov	r4, r0
    err = bt_conn_set_security(conn, BT_SECURITY_L2);
   2a36c:	f022 fd2d 	bl	4cdca <bt_conn_set_security>
    if (err) {
   2a370:	b948      	cbnz	r0, 2a386 <split_central_process_connection+0x22>
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   2a372:	4620      	mov	r0, r4
   2a374:	f7ff ffe8 	bl	2a348 <peripheral_slot_for_conn>
    if (slot == NULL) {
   2a378:	b128      	cbz	r0, 2a386 <split_central_process_connection+0x22>
    if (!slot->subscribe_params.value_handle) {
   2a37a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   2a37c:	b12b      	cbz	r3, 2a38a <split_central_process_connection+0x26>
    bt_conn_get_info(conn, &info);
   2a37e:	4669      	mov	r1, sp
   2a380:	4620      	mov	r0, r4
   2a382:	f005 fdfd 	bl	2ff80 <bt_conn_get_info>
}
   2a386:	b008      	add	sp, #32
   2a388:	bd10      	pop	{r4, pc}
        slot->discover_params.uuid = &split_service_uuid.uuid;
   2a38a:	4a09      	ldr	r2, [pc, #36]	; (2a3b0 <split_central_process_connection+0x4c>)
   2a38c:	6082      	str	r2, [r0, #8]
        slot->discover_params.func = split_central_service_discovery_func;
   2a38e:	4a09      	ldr	r2, [pc, #36]	; (2a3b4 <split_central_process_connection+0x50>)
   2a390:	60c2      	str	r2, [r0, #12]
        slot->discover_params.start_handle = 0x0001;
   2a392:	2201      	movs	r2, #1
   2a394:	8202      	strh	r2, [r0, #16]
        slot->discover_params.end_handle = 0xffff;
   2a396:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2a39a:	82c2      	strh	r2, [r0, #22]
        slot->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   2a39c:	7603      	strb	r3, [r0, #24]
        err = bt_gatt_discover(slot->conn, &slot->discover_params);
   2a39e:	f100 0108 	add.w	r1, r0, #8
   2a3a2:	6840      	ldr	r0, [r0, #4]
   2a3a4:	f007 feb8 	bl	32118 <bt_gatt_discover>
        if (err) {
   2a3a8:	2800      	cmp	r0, #0
   2a3aa:	d0e8      	beq.n	2a37e <split_central_process_connection+0x1a>
   2a3ac:	e7eb      	b.n	2a386 <split_central_process_connection+0x22>
   2a3ae:	bf00      	nop
   2a3b0:	00053e6d 	.word	0x00053e6d
   2a3b4:	0002a3b9 	.word	0x0002a3b9

0002a3b8 <split_central_service_discovery_func>:
                                                    struct bt_gatt_discover_params *params) {
   2a3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a3bc:	4613      	mov	r3, r2
   2a3be:	b086      	sub	sp, #24
   2a3c0:	4607      	mov	r7, r0
    if (!attr) {
   2a3c2:	460d      	mov	r5, r1
   2a3c4:	b939      	cbnz	r1, 2a3d6 <split_central_service_discovery_func+0x1e>
        (void)memset(params, 0, sizeof(*params));
   2a3c6:	2218      	movs	r2, #24
   2a3c8:	4618      	mov	r0, r3
   2a3ca:	f021 fc50 	bl	4bc6e <memset>
        return BT_GATT_ITER_STOP;
   2a3ce:	2000      	movs	r0, #0
}
   2a3d0:	b006      	add	sp, #24
   2a3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   2a3d6:	f7ff ffb7 	bl	2a348 <peripheral_slot_for_conn>
    if (slot == NULL) {
   2a3da:	4604      	mov	r4, r0
   2a3dc:	2800      	cmp	r0, #0
   2a3de:	d0f6      	beq.n	2a3ce <split_central_service_discovery_func+0x16>
    if (bt_uuid_cmp(slot->discover_params.uuid, BT_UUID_DECLARE_128(ZMK_SPLIT_BT_SERVICE_UUID))) {
   2a3e0:	4b12      	ldr	r3, [pc, #72]	; (2a42c <split_central_service_discovery_func+0x74>)
   2a3e2:	f8d0 c008 	ldr.w	ip, [r0, #8]
   2a3e6:	aa01      	add	r2, sp, #4
   2a3e8:	f103 0810 	add.w	r8, r3, #16
   2a3ec:	4696      	mov	lr, r2
   2a3ee:	6818      	ldr	r0, [r3, #0]
   2a3f0:	6859      	ldr	r1, [r3, #4]
   2a3f2:	4616      	mov	r6, r2
   2a3f4:	c603      	stmia	r6!, {r0, r1}
   2a3f6:	3308      	adds	r3, #8
   2a3f8:	4543      	cmp	r3, r8
   2a3fa:	4632      	mov	r2, r6
   2a3fc:	d1f7      	bne.n	2a3ee <split_central_service_discovery_func+0x36>
   2a3fe:	781b      	ldrb	r3, [r3, #0]
   2a400:	7033      	strb	r3, [r6, #0]
   2a402:	4671      	mov	r1, lr
   2a404:	4660      	mov	r0, ip
   2a406:	f021 fd15 	bl	4be34 <bt_uuid_cmp>
   2a40a:	b108      	cbz	r0, 2a410 <split_central_service_discovery_func+0x58>
        return BT_GATT_ITER_CONTINUE;
   2a40c:	2001      	movs	r0, #1
   2a40e:	e7df      	b.n	2a3d0 <split_central_service_discovery_func+0x18>
    slot->discover_params.func = split_central_chrc_discovery_func;
   2a410:	4b07      	ldr	r3, [pc, #28]	; (2a430 <split_central_service_discovery_func+0x78>)
   2a412:	60e3      	str	r3, [r4, #12]
    slot->discover_params.start_handle = attr->handle + 1;
   2a414:	8a2b      	ldrh	r3, [r5, #16]
    slot->discover_params.uuid = NULL;
   2a416:	60a0      	str	r0, [r4, #8]
    slot->discover_params.start_handle = attr->handle + 1;
   2a418:	3301      	adds	r3, #1
   2a41a:	8223      	strh	r3, [r4, #16]
    slot->discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
   2a41c:	2303      	movs	r3, #3
   2a41e:	7623      	strb	r3, [r4, #24]
    int err = bt_gatt_discover(conn, &slot->discover_params);
   2a420:	f104 0108 	add.w	r1, r4, #8
   2a424:	4638      	mov	r0, r7
   2a426:	f007 fe77 	bl	32118 <bt_gatt_discover>
    if (err) {
   2a42a:	e7d0      	b.n	2a3ce <split_central_service_discovery_func+0x16>
   2a42c:	000518f8 	.word	0x000518f8
   2a430:	0002a4f9 	.word	0x0002a4f9

0002a434 <split_central_notify_func>:
                                         uint16_t length) {
   2a434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a438:	b086      	sub	sp, #24
   2a43a:	4607      	mov	r7, r0
   2a43c:	4614      	mov	r4, r2
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   2a43e:	f7ff ff83 	bl	2a348 <peripheral_slot_for_conn>
    if (slot == NULL) {
   2a442:	2800      	cmp	r0, #0
   2a444:	d051      	beq.n	2a4ea <split_central_notify_func+0xb6>
    if (!data) {
   2a446:	b924      	cbnz	r4, 2a452 <split_central_notify_func+0x1e>
        params->value_handle = 0U;
   2a448:	810c      	strh	r4, [r1, #8]
        return BT_GATT_ITER_STOP;
   2a44a:	4620      	mov	r0, r4
}
   2a44c:	b006      	add	sp, #24
   2a44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a452:	1e63      	subs	r3, r4, #1
   2a454:	f100 0259 	add.w	r2, r0, #89	; 0x59
   2a458:	340f      	adds	r4, #15
        slot->changed_positions[i] = ((uint8_t *)data)[i] ^ slot->position_state[i];
   2a45a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   2a45e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   2a462:	4069      	eors	r1, r5
   2a464:	7411      	strb	r1, [r2, #16]
        slot->position_state[i] = ((uint8_t *)data)[i];
   2a466:	7819      	ldrb	r1, [r3, #0]
   2a468:	7011      	strb	r1, [r2, #0]
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a46a:	42a3      	cmp	r3, r4
   2a46c:	d1f5      	bne.n	2a45a <split_central_notify_func+0x26>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a46e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 2a4f0 <split_central_notify_func+0xbc>
                k_work_submit(&peripheral_event_work);
   2a472:	f8df a080 	ldr.w	sl, [pc, #128]	; 2a4f4 <split_central_notify_func+0xc0>
   2a476:	f100 046a 	add.w	r4, r0, #106	; 0x6a
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a47a:	2600      	movs	r6, #0
                bool pressed = slot->position_state[i] & BIT(j);
   2a47c:	f04f 0801 	mov.w	r8, #1
        for (int j = 0; j < 8; j++) {
   2a480:	2500      	movs	r5, #0
            if (slot->changed_positions[i] & BIT(j)) {
   2a482:	7823      	ldrb	r3, [r4, #0]
   2a484:	40eb      	lsrs	r3, r5
   2a486:	07db      	lsls	r3, r3, #31
   2a488:	d527      	bpl.n	2a4da <split_central_notify_func+0xa6>
                bool pressed = slot->position_state[i] & BIT(j);
   2a48a:	f814 1c10 	ldrb.w	r1, [r4, #-16]
   2a48e:	fa08 f305 	lsl.w	r3, r8, r5
   2a492:	4219      	tst	r1, r3
                                                            peripheral_slot_index_for_conn(conn),
   2a494:	4638      	mov	r0, r7
                bool pressed = slot->position_state[i] & BIT(j);
   2a496:	bf14      	ite	ne
   2a498:	2101      	movne	r1, #1
   2a49a:	2100      	moveq	r1, #0
                                                            peripheral_slot_index_for_conn(conn),
   2a49c:	f7ff ff4a 	bl	2a334 <peripheral_slot_index_for_conn>
   2a4a0:	19aa      	adds	r2, r5, r6
                struct zmk_position_state_changed ev = {.source =
   2a4a2:	f88d 0000 	strb.w	r0, [sp]
   2a4a6:	9201      	str	r2, [sp, #4]
   2a4a8:	f88d 1008 	strb.w	r1, [sp, #8]
	return z_impl_k_uptime_ticks();
   2a4ac:	f026 fd65 	bl	50f7a <z_impl_k_uptime_ticks>
   2a4b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a4b4:	fba0 0302 	umull	r0, r3, r0, r2
   2a4b8:	fb02 3101 	mla	r1, r2, r1, r3
   2a4bc:	0bc0      	lsrs	r0, r0, #15
   2a4be:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   2a4c2:	0bc9      	lsrs	r1, r1, #15
   2a4c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a4c8:	2200      	movs	r2, #0
   2a4ca:	2300      	movs	r3, #0
   2a4cc:	4669      	mov	r1, sp
   2a4ce:	4648      	mov	r0, r9
   2a4d0:	f01d fc30 	bl	47d34 <z_impl_k_msgq_put>
                k_work_submit(&peripheral_event_work);
   2a4d4:	4650      	mov	r0, sl
   2a4d6:	f01d ff4f 	bl	48378 <k_work_submit>
        for (int j = 0; j < 8; j++) {
   2a4da:	3501      	adds	r5, #1
   2a4dc:	2d08      	cmp	r5, #8
   2a4de:	d1d0      	bne.n	2a482 <split_central_notify_func+0x4e>
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a4e0:	3608      	adds	r6, #8
   2a4e2:	2e80      	cmp	r6, #128	; 0x80
   2a4e4:	f104 0401 	add.w	r4, r4, #1
   2a4e8:	d1ca      	bne.n	2a480 <split_central_notify_func+0x4c>
        return BT_GATT_ITER_CONTINUE;
   2a4ea:	2001      	movs	r0, #1
   2a4ec:	e7ae      	b.n	2a44c <split_central_notify_func+0x18>
   2a4ee:	bf00      	nop
   2a4f0:	2000116c 	.word	0x2000116c
   2a4f4:	200006bc 	.word	0x200006bc

0002a4f8 <split_central_chrc_discovery_func>:
                                                 struct bt_gatt_discover_params *params) {
   2a4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a4fc:	4606      	mov	r6, r0
   2a4fe:	b08a      	sub	sp, #40	; 0x28
    if (!attr) {
   2a500:	460d      	mov	r5, r1
   2a502:	2900      	cmp	r1, #0
   2a504:	d062      	beq.n	2a5cc <split_central_chrc_discovery_func+0xd4>
    if (!attr->user_data) {
   2a506:	68c9      	ldr	r1, [r1, #12]
   2a508:	2900      	cmp	r1, #0
   2a50a:	d061      	beq.n	2a5d0 <split_central_chrc_discovery_func+0xd8>
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   2a50c:	f7ff ff1c 	bl	2a348 <peripheral_slot_for_conn>
    if (slot == NULL) {
   2a510:	4604      	mov	r4, r0
   2a512:	2800      	cmp	r0, #0
   2a514:	d03a      	beq.n	2a58c <split_central_chrc_discovery_func+0x94>
                     BT_UUID_DECLARE_128(ZMK_SPLIT_BT_CHAR_POSITION_STATE_UUID))) {
   2a516:	4b2f      	ldr	r3, [pc, #188]	; (2a5d4 <split_central_chrc_discovery_func+0xdc>)
    if (!bt_uuid_cmp(((struct bt_gatt_chrc *)attr->user_data)->uuid,
   2a518:	f8d1 c000 	ldr.w	ip, [r1]
                     BT_UUID_DECLARE_128(ZMK_SPLIT_BT_CHAR_POSITION_STATE_UUID))) {
   2a51c:	466a      	mov	r2, sp
   2a51e:	f103 0810 	add.w	r8, r3, #16
   2a522:	4696      	mov	lr, r2
   2a524:	6818      	ldr	r0, [r3, #0]
   2a526:	6859      	ldr	r1, [r3, #4]
   2a528:	4617      	mov	r7, r2
   2a52a:	c703      	stmia	r7!, {r0, r1}
   2a52c:	3308      	adds	r3, #8
   2a52e:	4543      	cmp	r3, r8
   2a530:	463a      	mov	r2, r7
   2a532:	d1f7      	bne.n	2a524 <split_central_chrc_discovery_func+0x2c>
   2a534:	781b      	ldrb	r3, [r3, #0]
   2a536:	703b      	strb	r3, [r7, #0]
    if (!bt_uuid_cmp(((struct bt_gatt_chrc *)attr->user_data)->uuid,
   2a538:	4671      	mov	r1, lr
   2a53a:	4660      	mov	r0, ip
   2a53c:	f021 fc7a 	bl	4be34 <bt_uuid_cmp>
   2a540:	bb38      	cbnz	r0, 2a592 <split_central_chrc_discovery_func+0x9a>
        slot->discover_params.start_handle = attr->handle + 2;
   2a542:	8a2b      	ldrh	r3, [r5, #16]
        slot->discover_params.uuid = NULL;
   2a544:	60a0      	str	r0, [r4, #8]
        slot->discover_params.start_handle = attr->handle + 2;
   2a546:	3302      	adds	r3, #2
   2a548:	8223      	strh	r3, [r4, #16]
        slot->discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
   2a54a:	2303      	movs	r3, #3
   2a54c:	7623      	strb	r3, [r4, #24]
        slot->subscribe_params.disc_params = &slot->sub_discover_params;
   2a54e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2a552:	6323      	str	r3, [r4, #48]	; 0x30
        slot->subscribe_params.end_handle = slot->discover_params.end_handle;
   2a554:	8ae3      	ldrh	r3, [r4, #22]
   2a556:	85a3      	strh	r3, [r4, #44]	; 0x2c
        slot->subscribe_params.value_handle = bt_gatt_attr_value_handle(attr);
   2a558:	4628      	mov	r0, r5
   2a55a:	f023 ffb2 	bl	4e4c2 <bt_gatt_attr_value_handle>
        slot->subscribe_params.notify = split_central_notify_func;
   2a55e:	4b1e      	ldr	r3, [pc, #120]	; (2a5d8 <split_central_chrc_discovery_func+0xe0>)
   2a560:	6223      	str	r3, [r4, #32]
        slot->subscribe_params.value = BT_GATT_CCC_NOTIFY;
   2a562:	2301      	movs	r3, #1
        slot->subscribe_params.value_handle = bt_gatt_attr_value_handle(attr);
   2a564:	8520      	strh	r0, [r4, #40]	; 0x28
        slot->subscribe_params.value = BT_GATT_CCC_NOTIFY;
   2a566:	86a3      	strh	r3, [r4, #52]	; 0x34
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   2a568:	4630      	mov	r0, r6
   2a56a:	f7ff feed 	bl	2a348 <peripheral_slot_for_conn>
    if (slot == NULL) {
   2a56e:	b120      	cbz	r0, 2a57a <split_central_chrc_discovery_func+0x82>
    int err = bt_gatt_subscribe(conn, &slot->subscribe_params);
   2a570:	f100 0120 	add.w	r1, r0, #32
   2a574:	4630      	mov	r0, r6
   2a576:	f007 ffd5 	bl	32524 <bt_gatt_subscribe>
    bool subscribed = (slot->run_behavior_handle && slot->subscribe_params.value_handle);
   2a57a:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   2a57e:	b11b      	cbz	r3, 2a588 <split_central_chrc_discovery_func+0x90>
   2a580:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   2a582:	3b00      	subs	r3, #0
   2a584:	bf18      	it	ne
   2a586:	2301      	movne	r3, #1
    return subscribed ? BT_GATT_ITER_STOP : BT_GATT_ITER_CONTINUE;
   2a588:	f083 0001 	eor.w	r0, r3, #1
}
   2a58c:	b00a      	add	sp, #40	; 0x28
   2a58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (!bt_uuid_cmp(((struct bt_gatt_chrc *)attr->user_data)->uuid,
   2a592:	68eb      	ldr	r3, [r5, #12]
   2a594:	681f      	ldr	r7, [r3, #0]
                            BT_UUID_DECLARE_128(ZMK_SPLIT_BT_CHAR_RUN_BEHAVIOR_UUID))) {
   2a596:	4b11      	ldr	r3, [pc, #68]	; (2a5dc <split_central_chrc_discovery_func+0xe4>)
   2a598:	aa05      	add	r2, sp, #20
   2a59a:	f103 0e10 	add.w	lr, r3, #16
   2a59e:	4694      	mov	ip, r2
   2a5a0:	6818      	ldr	r0, [r3, #0]
   2a5a2:	6859      	ldr	r1, [r3, #4]
   2a5a4:	4616      	mov	r6, r2
   2a5a6:	c603      	stmia	r6!, {r0, r1}
   2a5a8:	3308      	adds	r3, #8
   2a5aa:	4573      	cmp	r3, lr
   2a5ac:	4632      	mov	r2, r6
   2a5ae:	d1f7      	bne.n	2a5a0 <split_central_chrc_discovery_func+0xa8>
   2a5b0:	781b      	ldrb	r3, [r3, #0]
   2a5b2:	7033      	strb	r3, [r6, #0]
    } else if (!bt_uuid_cmp(((struct bt_gatt_chrc *)attr->user_data)->uuid,
   2a5b4:	4661      	mov	r1, ip
   2a5b6:	4638      	mov	r0, r7
   2a5b8:	f021 fc3c 	bl	4be34 <bt_uuid_cmp>
   2a5bc:	2800      	cmp	r0, #0
   2a5be:	d1dc      	bne.n	2a57a <split_central_chrc_discovery_func+0x82>
        slot->run_behavior_handle = bt_gatt_attr_value_handle(attr);
   2a5c0:	4628      	mov	r0, r5
   2a5c2:	f023 ff7e 	bl	4e4c2 <bt_gatt_attr_value_handle>
   2a5c6:	f8a4 0058 	strh.w	r0, [r4, #88]	; 0x58
   2a5ca:	e7d6      	b.n	2a57a <split_central_chrc_discovery_func+0x82>
        return BT_GATT_ITER_STOP;
   2a5cc:	4608      	mov	r0, r1
   2a5ce:	e7dd      	b.n	2a58c <split_central_chrc_discovery_func+0x94>
   2a5d0:	4608      	mov	r0, r1
   2a5d2:	e7db      	b.n	2a58c <split_central_chrc_discovery_func+0x94>
   2a5d4:	00051909 	.word	0x00051909
   2a5d8:	0002a435 	.word	0x0002a435
   2a5dc:	0005191a 	.word	0x0005191a

0002a5e0 <release_peripheral_slot>:
int release_peripheral_slot(int index) {
   2a5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (index < 0 || index >= ZMK_BLE_SPLIT_PERIPHERAL_COUNT) {
   2a5e4:	4604      	mov	r4, r0
int release_peripheral_slot(int index) {
   2a5e6:	b086      	sub	sp, #24
    if (index < 0 || index >= ZMK_BLE_SPLIT_PERIPHERAL_COUNT) {
   2a5e8:	2800      	cmp	r0, #0
   2a5ea:	d14a      	bne.n	2a682 <release_peripheral_slot+0xa2>
    if (slot->state == PERIPHERAL_SLOT_STATE_OPEN) {
   2a5ec:	4d26      	ldr	r5, [pc, #152]	; (2a688 <release_peripheral_slot+0xa8>)
   2a5ee:	782b      	ldrb	r3, [r5, #0]
   2a5f0:	2b00      	cmp	r3, #0
   2a5f2:	d046      	beq.n	2a682 <release_peripheral_slot+0xa2>
    if (slot->conn != NULL) {
   2a5f4:	6868      	ldr	r0, [r5, #4]
   2a5f6:	b110      	cbz	r0, 2a5fe <release_peripheral_slot+0x1e>
        bt_conn_unref(slot->conn);
   2a5f8:	f022 fb68 	bl	4cccc <bt_conn_unref>
        slot->conn = NULL;
   2a5fc:	606c      	str	r4, [r5, #4]
    slot->state = PERIPHERAL_SLOT_STATE_OPEN;
   2a5fe:	2400      	movs	r4, #0
   2a600:	4f22      	ldr	r7, [pc, #136]	; (2a68c <release_peripheral_slot+0xac>)
   2a602:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2a690 <release_peripheral_slot+0xb0>
                k_work_submit(&peripheral_event_work);
   2a606:	f8df a08c 	ldr.w	sl, [pc, #140]	; 2a694 <release_peripheral_slot+0xb4>
    slot->state = PERIPHERAL_SLOT_STATE_OPEN;
   2a60a:	702c      	strb	r4, [r5, #0]
                struct zmk_position_state_changed ev = {.source = index,
   2a60c:	46a0      	mov	r8, r4
        for (int j = 0; j < 8; j++) {
   2a60e:	2600      	movs	r6, #0
            if (slot->position_state[i] & BIT(j)) {
   2a610:	783b      	ldrb	r3, [r7, #0]
   2a612:	40f3      	lsrs	r3, r6
   2a614:	07db      	lsls	r3, r3, #31
   2a616:	d51c      	bpl.n	2a652 <release_peripheral_slot+0x72>
                struct zmk_position_state_changed ev = {.source = index,
   2a618:	1933      	adds	r3, r6, r4
   2a61a:	f88d 8000 	strb.w	r8, [sp]
   2a61e:	9301      	str	r3, [sp, #4]
   2a620:	f88d 8008 	strb.w	r8, [sp, #8]
	return z_impl_k_uptime_ticks();
   2a624:	f026 fca9 	bl	50f7a <z_impl_k_uptime_ticks>
   2a628:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a62c:	fba0 0302 	umull	r0, r3, r0, r2
   2a630:	fb02 3101 	mla	r1, r2, r1, r3
   2a634:	0bc0      	lsrs	r0, r0, #15
   2a636:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   2a63a:	0bc9      	lsrs	r1, r1, #15
   2a63c:	e9cd 0104 	strd	r0, r1, [sp, #16]
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a640:	2200      	movs	r2, #0
   2a642:	2300      	movs	r3, #0
   2a644:	4669      	mov	r1, sp
   2a646:	4648      	mov	r0, r9
   2a648:	f01d fb74 	bl	47d34 <z_impl_k_msgq_put>
                k_work_submit(&peripheral_event_work);
   2a64c:	4650      	mov	r0, sl
   2a64e:	f01d fe93 	bl	48378 <k_work_submit>
        for (int j = 0; j < 8; j++) {
   2a652:	3601      	adds	r6, #1
   2a654:	2e08      	cmp	r6, #8
   2a656:	d1db      	bne.n	2a610 <release_peripheral_slot+0x30>
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a658:	3408      	adds	r4, #8
   2a65a:	2c80      	cmp	r4, #128	; 0x80
   2a65c:	f107 0701 	add.w	r7, r7, #1
   2a660:	d1d5      	bne.n	2a60e <release_peripheral_slot+0x2e>
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a662:	2200      	movs	r2, #0
   2a664:	490c      	ldr	r1, [pc, #48]	; (2a698 <release_peripheral_slot+0xb8>)
        slot->position_state[i] = 0U;
   2a666:	4613      	mov	r3, r2
   2a668:	f801 3f01 	strb.w	r3, [r1, #1]!
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a66c:	3201      	adds	r2, #1
   2a66e:	2a10      	cmp	r2, #16
        slot->changed_positions[i] = 0U;
   2a670:	740b      	strb	r3, [r1, #16]
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a672:	d1f9      	bne.n	2a668 <release_peripheral_slot+0x88>
    slot->subscribe_params.value_handle = 0;
   2a674:	852b      	strh	r3, [r5, #40]	; 0x28
    slot->run_behavior_handle = 0;
   2a676:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
   2a67a:	2000      	movs	r0, #0
}
   2a67c:	b006      	add	sp, #24
   2a67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return -EINVAL;
   2a682:	f06f 0015 	mvn.w	r0, #21
   2a686:	e7f9      	b.n	2a67c <release_peripheral_slot+0x9c>
   2a688:	200042a4 	.word	0x200042a4
   2a68c:	200042fe 	.word	0x200042fe
   2a690:	2000116c 	.word	0x2000116c
   2a694:	200006bc 	.word	0x200006bc
   2a698:	200042fd 	.word	0x200042fd

0002a69c <reserve_peripheral_slot>:
int reserve_peripheral_slot() {
   2a69c:	b538      	push	{r3, r4, r5, lr}
        if (peripherals[i].state == PERIPHERAL_SLOT_STATE_OPEN) {
   2a69e:	4d06      	ldr	r5, [pc, #24]	; (2a6b8 <reserve_peripheral_slot+0x1c>)
   2a6a0:	782c      	ldrb	r4, [r5, #0]
   2a6a2:	b934      	cbnz	r4, 2a6b2 <reserve_peripheral_slot+0x16>
            release_peripheral_slot(i);
   2a6a4:	4620      	mov	r0, r4
   2a6a6:	f7ff ff9b 	bl	2a5e0 <release_peripheral_slot>
            peripherals[i].state = PERIPHERAL_SLOT_STATE_CONNECTING;
   2a6aa:	2301      	movs	r3, #1
   2a6ac:	702b      	strb	r3, [r5, #0]
   2a6ae:	4620      	mov	r0, r4
}
   2a6b0:	bd38      	pop	{r3, r4, r5, pc}
    return -ENOMEM;
   2a6b2:	f06f 000b 	mvn.w	r0, #11
   2a6b6:	e7fb      	b.n	2a6b0 <reserve_peripheral_slot+0x14>
   2a6b8:	200042a4 	.word	0x200042a4

0002a6bc <split_central_eir_found>:
static bool split_central_eir_found(struct bt_data *data, void *user_data) {
   2a6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (data->type) {
   2a6c0:	7803      	ldrb	r3, [r0, #0]
   2a6c2:	3b06      	subs	r3, #6
   2a6c4:	2b01      	cmp	r3, #1
static bool split_central_eir_found(struct bt_data *data, void *user_data) {
   2a6c6:	b0a4      	sub	sp, #144	; 0x90
   2a6c8:	4605      	mov	r5, r0
   2a6ca:	460e      	mov	r6, r1
    switch (data->type) {
   2a6cc:	d903      	bls.n	2a6d6 <split_central_eir_found+0x1a>
            return true;
   2a6ce:	2001      	movs	r0, #1
}
   2a6d0:	b024      	add	sp, #144	; 0x90
   2a6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (data->data_len % 16 != 0U) {
   2a6d6:	7844      	ldrb	r4, [r0, #1]
   2a6d8:	f014 040f 	ands.w	r4, r4, #15
   2a6dc:	d1f7      	bne.n	2a6ce <split_central_eir_found+0x12>
        for (i = 0; i < data->data_len; i += 16) {
   2a6de:	786b      	ldrb	r3, [r5, #1]
   2a6e0:	429c      	cmp	r4, r3
   2a6e2:	daf4      	bge.n	2a6ce <split_central_eir_found+0x12>
            if (!bt_uuid_create(&uuid.uuid, &data->data[i], 16)) {
   2a6e4:	6869      	ldr	r1, [r5, #4]
   2a6e6:	2210      	movs	r2, #16
   2a6e8:	4421      	add	r1, r4
   2a6ea:	a801      	add	r0, sp, #4
   2a6ec:	f021 fbd0 	bl	4be90 <bt_uuid_create>
   2a6f0:	b370      	cbz	r0, 2a750 <split_central_eir_found+0x94>
            if (bt_uuid_cmp(&uuid.uuid, BT_UUID_DECLARE_128(ZMK_SPLIT_BT_SERVICE_UUID))) {
   2a6f2:	4b35      	ldr	r3, [pc, #212]	; (2a7c8 <split_central_eir_found+0x10c>)
   2a6f4:	aa06      	add	r2, sp, #24
   2a6f6:	f103 0710 	add.w	r7, r3, #16
   2a6fa:	4696      	mov	lr, r2
   2a6fc:	6818      	ldr	r0, [r3, #0]
   2a6fe:	6859      	ldr	r1, [r3, #4]
   2a700:	4694      	mov	ip, r2
   2a702:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   2a706:	3308      	adds	r3, #8
   2a708:	42bb      	cmp	r3, r7
   2a70a:	4662      	mov	r2, ip
   2a70c:	d1f6      	bne.n	2a6fc <split_central_eir_found+0x40>
   2a70e:	781b      	ldrb	r3, [r3, #0]
   2a710:	f88c 3000 	strb.w	r3, [ip]
   2a714:	4671      	mov	r1, lr
   2a716:	a801      	add	r0, sp, #4
   2a718:	f021 fb8c 	bl	4be34 <bt_uuid_cmp>
   2a71c:	b1d0      	cbz	r0, 2a754 <split_central_eir_found+0x98>
                bt_uuid_to_str(&uuid.uuid, uuid_str, sizeof(uuid_str));
   2a71e:	2225      	movs	r2, #37	; 0x25
   2a720:	a910      	add	r1, sp, #64	; 0x40
   2a722:	a801      	add	r0, sp, #4
   2a724:	f003 f81e 	bl	2d764 <bt_uuid_to_str>
                bt_uuid_to_str(BT_UUID_DECLARE_128(ZMK_SPLIT_BT_SERVICE_UUID), service_uuid_str,
   2a728:	aa0b      	add	r2, sp, #44	; 0x2c
   2a72a:	4b27      	ldr	r3, [pc, #156]	; (2a7c8 <split_central_eir_found+0x10c>)
   2a72c:	4696      	mov	lr, r2
   2a72e:	6818      	ldr	r0, [r3, #0]
   2a730:	6859      	ldr	r1, [r3, #4]
   2a732:	4694      	mov	ip, r2
   2a734:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   2a738:	3308      	adds	r3, #8
   2a73a:	42bb      	cmp	r3, r7
   2a73c:	4662      	mov	r2, ip
   2a73e:	d1f6      	bne.n	2a72e <split_central_eir_found+0x72>
   2a740:	781b      	ldrb	r3, [r3, #0]
   2a742:	f88c 3000 	strb.w	r3, [ip]
   2a746:	2225      	movs	r2, #37	; 0x25
   2a748:	a91a      	add	r1, sp, #104	; 0x68
   2a74a:	4670      	mov	r0, lr
   2a74c:	f003 f80a 	bl	2d764 <bt_uuid_to_str>
        for (i = 0; i < data->data_len; i += 16) {
   2a750:	3410      	adds	r4, #16
   2a752:	e7c4      	b.n	2a6de <split_central_eir_found+0x22>
            zmk_ble_set_peripheral_addr(addr);
   2a754:	4630      	mov	r0, r6
   2a756:	f7ff fbd3 	bl	29f00 <zmk_ble_set_peripheral_addr>
            err = bt_le_scan_stop();
   2a75a:	f004 ff1d 	bl	2f598 <bt_le_scan_stop>
            if (err) {
   2a75e:	4607      	mov	r7, r0
   2a760:	2800      	cmp	r0, #0
   2a762:	d1f5      	bne.n	2a750 <split_central_eir_found+0x94>
            uint8_t slot_idx = reserve_peripheral_slot();
   2a764:	f7ff ff9a 	bl	2a69c <reserve_peripheral_slot>
            slot->conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   2a768:	4631      	mov	r1, r6
   2a76a:	b2c5      	uxtb	r5, r0
   2a76c:	4638      	mov	r0, r7
   2a76e:	f005 fbb5 	bl	2fedc <bt_conn_lookup_addr_le>
   2a772:	f8df c058 	ldr.w	ip, [pc, #88]	; 2a7cc <split_central_eir_found+0x110>
   2a776:	4c16      	ldr	r4, [pc, #88]	; (2a7d0 <split_central_eir_found+0x114>)
   2a778:	227c      	movs	r2, #124	; 0x7c
   2a77a:	4355      	muls	r5, r2
   2a77c:	eb0c 0805 	add.w	r8, ip, r5
   2a780:	af1a      	add	r7, sp, #104	; 0x68
   2a782:	f8c8 0004 	str.w	r0, [r8, #4]
            if (slot->conn) {
   2a786:	b150      	cbz	r0, 2a79e <split_central_eir_found+0xe2>
                split_central_process_connection(slot->conn);
   2a788:	f7ff fdec 	bl	2a364 <split_central_process_connection>
                err = bt_conn_le_phy_update(slot->conn, BT_CONN_LE_PHY_PARAM_2M);
   2a78c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   2a78e:	901a      	str	r0, [sp, #104]	; 0x68
   2a790:	4639      	mov	r1, r7
   2a792:	f8d8 0004 	ldr.w	r0, [r8, #4]
   2a796:	f022 fb6c 	bl	4ce72 <bt_conn_le_phy_update>
            return false;
   2a79a:	2000      	movs	r0, #0
   2a79c:	e798      	b.n	2a6d0 <split_central_eir_found+0x14>
                param = BT_LE_CONN_PARAM(0x0006, 0x0006, 30, 400);
   2a79e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   2a7a0:	6d21      	ldr	r1, [r4, #80]	; 0x50
   2a7a2:	ab10      	add	r3, sp, #64	; 0x40
                err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN, param, &slot->conn);
   2a7a4:	3454      	adds	r4, #84	; 0x54
                param = BT_LE_CONN_PARAM(0x0006, 0x0006, 30, 400);
   2a7a6:	c303      	stmia	r3!, {r0, r1}
                err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN, param, &slot->conn);
   2a7a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2a7ac:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   2a7b0:	1d2b      	adds	r3, r5, #4
   2a7b2:	4463      	add	r3, ip
   2a7b4:	aa10      	add	r2, sp, #64	; 0x40
   2a7b6:	4639      	mov	r1, r7
   2a7b8:	4630      	mov	r0, r6
   2a7ba:	f005 fc0f 	bl	2ffdc <bt_conn_le_create>
                if (err) {
   2a7be:	2800      	cmp	r0, #0
   2a7c0:	d0eb      	beq.n	2a79a <split_central_eir_found+0xde>
                    start_scan();
   2a7c2:	f7ff fccb 	bl	2a15c <start_scan>
   2a7c6:	e7e8      	b.n	2a79a <split_central_eir_found+0xde>
   2a7c8:	000518f8 	.word	0x000518f8
   2a7cc:	200042a4 	.word	0x200042a4
   2a7d0:	000518e4 	.word	0x000518e4

0002a7d4 <confirm_peripheral_slot_conn>:
int confirm_peripheral_slot_conn(struct bt_conn *conn) {
   2a7d4:	b508      	push	{r3, lr}
    int idx = peripheral_slot_index_for_conn(conn);
   2a7d6:	f7ff fdad 	bl	2a334 <peripheral_slot_index_for_conn>
    if (idx < 0) {
   2a7da:	2800      	cmp	r0, #0
   2a7dc:	db05      	blt.n	2a7ea <confirm_peripheral_slot_conn+0x16>
    peripherals[idx].state = PERIPHERAL_SLOT_STATE_CONNECTED;
   2a7de:	237c      	movs	r3, #124	; 0x7c
   2a7e0:	4358      	muls	r0, r3
   2a7e2:	4b02      	ldr	r3, [pc, #8]	; (2a7ec <confirm_peripheral_slot_conn+0x18>)
   2a7e4:	2202      	movs	r2, #2
   2a7e6:	541a      	strb	r2, [r3, r0]
    return 0;
   2a7e8:	2000      	movs	r0, #0
}
   2a7ea:	bd08      	pop	{r3, pc}
   2a7ec:	200042a4 	.word	0x200042a4

0002a7f0 <usb_status_cb>:
        return ZMK_USB_CONN_POWERED;
    }
}

void usb_status_cb(enum usb_dc_status_code status, const uint8_t *params) {
    usb_status = status;
   2a7f0:	4b02      	ldr	r3, [pc, #8]	; (2a7fc <usb_status_cb+0xc>)
   2a7f2:	7018      	strb	r0, [r3, #0]
    k_work_submit(&usb_status_notifier_work);
   2a7f4:	4802      	ldr	r0, [pc, #8]	; (2a800 <usb_status_cb+0x10>)
   2a7f6:	f01d bdbf 	b.w	48378 <k_work_submit>
   2a7fa:	bf00      	nop
   2a7fc:	20000ff3 	.word	0x20000ff3
   2a800:	200006cc 	.word	0x200006cc

0002a804 <zmk_usb_init>:
};

static int zmk_usb_init(const struct device *_arg) {
   2a804:	b508      	push	{r3, lr}
    int usb_enable_ret;

    usb_enable_ret = usb_enable(usb_status_cb);
   2a806:	4804      	ldr	r0, [pc, #16]	; (2a818 <zmk_usb_init+0x14>)
   2a808:	f001 fa42 	bl	2bc90 <usb_enable>

    if (usb_enable_ret != 0) {
        LOG_ERR("Unable to enable USB");
        return -EINVAL;
   2a80c:	2800      	cmp	r0, #0
    }

    return 0;
}
   2a80e:	bf18      	it	ne
   2a810:	f06f 0015 	mvnne.w	r0, #21
   2a814:	bd08      	pop	{r3, pc}
   2a816:	bf00      	nop
   2a818:	0002a7f1 	.word	0x0002a7f1

0002a81c <zmk_usb_get_status>:
enum usb_dc_status_code zmk_usb_get_status() { return usb_status; }
   2a81c:	4b01      	ldr	r3, [pc, #4]	; (2a824 <zmk_usb_get_status+0x8>)
   2a81e:	7818      	ldrb	r0, [r3, #0]
   2a820:	4770      	bx	lr
   2a822:	bf00      	nop
   2a824:	20000ff3 	.word	0x20000ff3

0002a828 <zmk_usb_get_conn_state>:
    switch (usb_status) {
   2a828:	4b08      	ldr	r3, [pc, #32]	; (2a84c <zmk_usb_get_conn_state+0x24>)
   2a82a:	781b      	ldrb	r3, [r3, #0]
   2a82c:	3b03      	subs	r3, #3
   2a82e:	2b08      	cmp	r3, #8
   2a830:	d808      	bhi.n	2a844 <zmk_usb_get_conn_state+0x1c>
   2a832:	e8df f003 	tbb	[pc, r3]
   2a836:	0905      	.short	0x0905
   2a838:	07070505 	.word	0x07070505
   2a83c:	0707      	.short	0x0707
   2a83e:	09          	.byte	0x09
   2a83f:	00          	.byte	0x00
        return ZMK_USB_CONN_HID;
   2a840:	2002      	movs	r0, #2
   2a842:	4770      	bx	lr
        return ZMK_USB_CONN_POWERED;
   2a844:	2001      	movs	r0, #1
   2a846:	4770      	bx	lr
    switch (usb_status) {
   2a848:	2000      	movs	r0, #0
}
   2a84a:	4770      	bx	lr
   2a84c:	20000ff3 	.word	0x20000ff3

0002a850 <zmk_usb_hid_init>:

        return err;
    }
}

static int zmk_usb_hid_init(const struct device *_arg) {
   2a850:	b510      	push	{r4, lr}
   2a852:	4809      	ldr	r0, [pc, #36]	; (2a878 <zmk_usb_hid_init+0x28>)
    hid_dev = device_get_binding("HID_0");
   2a854:	4c09      	ldr	r4, [pc, #36]	; (2a87c <zmk_usb_hid_init+0x2c>)
   2a856:	f01d f843 	bl	478e0 <z_impl_device_get_binding>
   2a85a:	6020      	str	r0, [r4, #0]
    if (hid_dev == NULL) {
   2a85c:	b148      	cbz	r0, 2a872 <zmk_usb_hid_init+0x22>
        LOG_ERR("Unable to locate HID device");
        return -EINVAL;
    }

    usb_hid_register_device(hid_dev, zmk_hid_report_desc, sizeof(zmk_hid_report_desc), &ops);
   2a85e:	4b08      	ldr	r3, [pc, #32]	; (2a880 <zmk_usb_hid_init+0x30>)
   2a860:	4908      	ldr	r1, [pc, #32]	; (2a884 <zmk_usb_hid_init+0x34>)
   2a862:	224c      	movs	r2, #76	; 0x4c
   2a864:	f019 f988 	bl	43b78 <usb_hid_register_device>
    usb_hid_init(hid_dev);
   2a868:	6820      	ldr	r0, [r4, #0]
   2a86a:	f025 fa2f 	bl	4fccc <usb_hid_init>

    return 0;
   2a86e:	2000      	movs	r0, #0
}
   2a870:	bd10      	pop	{r4, pc}
        return -EINVAL;
   2a872:	f06f 0015 	mvn.w	r0, #21
   2a876:	e7fb      	b.n	2a870 <zmk_usb_hid_init+0x20>
   2a878:	00053e7e 	.word	0x00053e7e
   2a87c:	20004320 	.word	0x20004320
   2a880:	00052380 	.word	0x00052380
   2a884:	00053e84 	.word	0x00053e84

0002a888 <in_ready_cb>:
	z_impl_k_sem_give(sem);
   2a888:	4801      	ldr	r0, [pc, #4]	; (2a890 <in_ready_cb+0x8>)
   2a88a:	f01d bbf1 	b.w	48070 <z_impl_k_sem_give>
   2a88e:	bf00      	nop
   2a890:	200012bc 	.word	0x200012bc

0002a894 <zmk_usb_hid_send_report>:
int zmk_usb_hid_send_report(const uint8_t *report, size_t len) {
   2a894:	b538      	push	{r3, r4, r5, lr}
   2a896:	4604      	mov	r4, r0
   2a898:	460d      	mov	r5, r1
    switch (zmk_usb_get_status()) {
   2a89a:	f7ff ffbf 	bl	2a81c <zmk_usb_get_status>
   2a89e:	280b      	cmp	r0, #11
   2a8a0:	d80b      	bhi.n	2a8ba <zmk_usb_hid_send_report+0x26>
   2a8a2:	e8df f000 	tbb	[pc, r0]
   2a8a6:	1e1e      	.short	0x1e1e
   2a8a8:	061e0a0a 	.word	0x061e0a0a
   2a8ac:	0a0a0a0a 	.word	0x0a0a0a0a
   2a8b0:	1e0a      	.short	0x1e0a
}
   2a8b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return usb_wakeup_request();
   2a8b6:	f001 b9b5 	b.w	2bc24 <usb_wakeup_request>
	return z_impl_k_sem_take(sem, timeout);
   2a8ba:	f44f 7276 	mov.w	r2, #984	; 0x3d8
   2a8be:	2300      	movs	r3, #0
   2a8c0:	4809      	ldr	r0, [pc, #36]	; (2a8e8 <zmk_usb_hid_send_report+0x54>)
   2a8c2:	f01d fbfb 	bl	480bc <z_impl_k_sem_take>
        int err = hid_int_ep_write(hid_dev, report, len, NULL);
   2a8c6:	4809      	ldr	r0, [pc, #36]	; (2a8ec <zmk_usb_hid_send_report+0x58>)
   2a8c8:	4621      	mov	r1, r4
   2a8ca:	6800      	ldr	r0, [r0, #0]
   2a8cc:	2300      	movs	r3, #0
   2a8ce:	462a      	mov	r2, r5
   2a8d0:	f025 fa06 	bl	4fce0 <hid_int_ep_write>
        if (err) {
   2a8d4:	4604      	mov	r4, r0
   2a8d6:	b110      	cbz	r0, 2a8de <zmk_usb_hid_send_report+0x4a>
	z_impl_k_sem_give(sem);
   2a8d8:	4803      	ldr	r0, [pc, #12]	; (2a8e8 <zmk_usb_hid_send_report+0x54>)
   2a8da:	f01d fbc9 	bl	48070 <z_impl_k_sem_give>
}
   2a8de:	4620      	mov	r0, r4
   2a8e0:	bd38      	pop	{r3, r4, r5, pc}
    switch (zmk_usb_get_status()) {
   2a8e2:	f06f 0412 	mvn.w	r4, #18
   2a8e6:	e7fa      	b.n	2a8de <zmk_usb_hid_send_report+0x4a>
   2a8e8:	200012bc 	.word	0x200012bc
   2a8ec:	20004320 	.word	0x20004320

0002a8f0 <main>:
#define ZMK_KSCAN_DEV DT_LABEL(ZMK_MATRIX_NODE_ID)

void main(void) {
    LOG_INF("Welcome to ZMK!\n");

    if (zmk_kscan_init(ZMK_KSCAN_DEV) != 0) {
   2a8f0:	4801      	ldr	r0, [pc, #4]	; (2a8f8 <main+0x8>)
   2a8f2:	f7fe badd 	b.w	28eb0 <zmk_kscan_init>
   2a8f6:	bf00      	nop
   2a8f8:	00053ed0 	.word	0x00053ed0

0002a8fc <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   2a8fc:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2a8fe:	4c09      	ldr	r4, [pc, #36]	; (2a924 <crc8_ccitt+0x28>)
   2a900:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   2a902:	4291      	cmp	r1, r2
   2a904:	d100      	bne.n	2a908 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   2a906:	bd10      	pop	{r4, pc}
		val ^= p[i];
   2a908:	f811 3b01 	ldrb.w	r3, [r1], #1
   2a90c:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2a90e:	0903      	lsrs	r3, r0, #4
   2a910:	0100      	lsls	r0, r0, #4
   2a912:	5ce3      	ldrb	r3, [r4, r3]
   2a914:	b2c0      	uxtb	r0, r0
   2a916:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2a918:	0918      	lsrs	r0, r3, #4
   2a91a:	011b      	lsls	r3, r3, #4
   2a91c:	5c20      	ldrb	r0, [r4, r0]
   2a91e:	b2db      	uxtb	r3, r3
   2a920:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
   2a922:	e7ee      	b.n	2a902 <crc8_ccitt+0x6>
   2a924:	00053ed6 	.word	0x00053ed6

0002a928 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   2a928:	680b      	ldr	r3, [r1, #0]
   2a92a:	3301      	adds	r3, #1
   2a92c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   2a92e:	4b01      	ldr	r3, [pc, #4]	; (2a934 <char_out+0xc>)
   2a930:	681b      	ldr	r3, [r3, #0]
   2a932:	4718      	bx	r3
   2a934:	200006dc 	.word	0x200006dc

0002a938 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   2a938:	b507      	push	{r0, r1, r2, lr}
   2a93a:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
   2a93c:	2100      	movs	r1, #0
{
   2a93e:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
   2a940:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
   2a942:	4803      	ldr	r0, [pc, #12]	; (2a950 <vprintk+0x18>)
   2a944:	a901      	add	r1, sp, #4
   2a946:	f000 f927 	bl	2ab98 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   2a94a:	b003      	add	sp, #12
   2a94c:	f85d fb04 	ldr.w	pc, [sp], #4
   2a950:	0002a929 	.word	0x0002a929

0002a954 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   2a954:	b530      	push	{r4, r5, lr}
   2a956:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   2a958:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   2a95c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   2a95e:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   2a960:	a901      	add	r1, sp, #4
   2a962:	4805      	ldr	r0, [pc, #20]	; (2a978 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   2a964:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   2a966:	f000 f917 	bl	2ab98 <cbvprintf>

	if (ctx.count < ctx.max) {
   2a96a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   2a96e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   2a970:	bfb8      	it	lt
   2a972:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   2a974:	b005      	add	sp, #20
   2a976:	bd30      	pop	{r4, r5, pc}
   2a978:	000499d5 	.word	0x000499d5

0002a97c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   2a97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a980:	8b05      	ldrh	r5, [r0, #24]
{
   2a982:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   2a984:	0728      	lsls	r0, r5, #28
{
   2a986:	4690      	mov	r8, r2
	if (processing) {
   2a988:	d411      	bmi.n	2a9ae <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   2a98a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a98c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   2a990:	f040 80cd 	bne.w	2ab2e <process_event+0x1b2>
			evt = process_recheck(mgr);
   2a994:	4620      	mov	r0, r4
   2a996:	f01f f865 	bl	49a64 <process_recheck>
		}

		if (evt == EVT_NOP) {
   2a99a:	b178      	cbz	r0, 2a9bc <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   2a99c:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a99e:	8b21      	ldrh	r1, [r4, #24]
   2a9a0:	2804      	cmp	r0, #4
   2a9a2:	d811      	bhi.n	2a9c8 <process_event+0x4c>
   2a9a4:	e8df f000 	tbb	[pc, r0]
   2a9a8:	856d10c3 	.word	0x856d10c3
   2a9ac:	95          	.byte	0x95
   2a9ad:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   2a9ae:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   2a9b0:	bf0c      	ite	eq
   2a9b2:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2a9b6:	f045 0520 	orrne.w	r5, r5, #32
   2a9ba:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   2a9bc:	f388 8811 	msr	BASEPRI, r8
   2a9c0:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   2a9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2a9c8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   2a9cc:	45aa      	cmp	sl, r5
   2a9ce:	f000 80a6 	beq.w	2ab1e <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   2a9d2:	2700      	movs	r7, #0
   2a9d4:	46b9      	mov	r9, r7
   2a9d6:	463e      	mov	r6, r7
   2a9d8:	68a3      	ldr	r3, [r4, #8]
   2a9da:	2b00      	cmp	r3, #0
   2a9dc:	f000 80bd 	beq.w	2ab5a <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   2a9e0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   2a9e4:	8321      	strh	r1, [r4, #24]
   2a9e6:	f388 8811 	msr	BASEPRI, r8
   2a9ea:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   2a9ee:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2a9f0:	2900      	cmp	r1, #0
   2a9f2:	f000 80bb 	beq.w	2ab6c <process_event+0x1f0>
	return node->next;
   2a9f6:	680d      	ldr	r5, [r1, #0]
   2a9f8:	2900      	cmp	r1, #0
   2a9fa:	f000 80b7 	beq.w	2ab6c <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   2a9fe:	f8d1 8004 	ldr.w	r8, [r1, #4]
   2aa02:	4633      	mov	r3, r6
   2aa04:	4652      	mov	r2, sl
   2aa06:	4620      	mov	r0, r4
   2aa08:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2aa0a:	2d00      	cmp	r5, #0
   2aa0c:	d076      	beq.n	2aafc <process_event+0x180>
   2aa0e:	682b      	ldr	r3, [r5, #0]
   2aa10:	4629      	mov	r1, r5
   2aa12:	461d      	mov	r5, r3
   2aa14:	e7f0      	b.n	2a9f8 <process_event+0x7c>
   2aa16:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   2aa1a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   2aa1c:	2a01      	cmp	r2, #1
   2aa1e:	d81b      	bhi.n	2aa58 <process_event+0xdc>
	list->head = NULL;
   2aa20:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2aa22:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   2aa26:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   2aa28:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2aa2a:	b289      	uxth	r1, r1
	list->tail = NULL;
   2aa2c:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   2aa30:	d109      	bne.n	2aa46 <process_event+0xca>
   2aa32:	463b      	mov	r3, r7
   2aa34:	e003      	b.n	2aa3e <process_event+0xc2>
				mgr->refs += 1U;
   2aa36:	8b62      	ldrh	r2, [r4, #26]
	return node->next;
   2aa38:	681b      	ldr	r3, [r3, #0]
   2aa3a:	3201      	adds	r2, #1
   2aa3c:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   2aa3e:	2b00      	cmp	r3, #0
   2aa40:	d1f9      	bne.n	2aa36 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2aa42:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   2aa46:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   2aa48:	4620      	mov	r0, r4
   2aa4a:	f01f f80b 	bl	49a64 <process_recheck>
   2aa4e:	2800      	cmp	r0, #0
   2aa50:	d07b      	beq.n	2ab4a <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2aa52:	f041 0120 	orr.w	r1, r1, #32
   2aa56:	e077      	b.n	2ab48 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   2aa58:	2b04      	cmp	r3, #4
   2aa5a:	d10a      	bne.n	2aa72 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2aa5c:	f021 0107 	bic.w	r1, r1, #7
   2aa60:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   2aa62:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   2aa64:	4620      	mov	r0, r4
   2aa66:	f01e fffd 	bl	49a64 <process_recheck>
   2aa6a:	b110      	cbz	r0, 2aa72 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2aa6c:	f041 0120 	orr.w	r1, r1, #32
   2aa70:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2aa72:	8b21      	ldrh	r1, [r4, #24]
   2aa74:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   2aa78:	45aa      	cmp	sl, r5
   2aa7a:	d050      	beq.n	2ab1e <process_event+0x1a2>
   2aa7c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   2aa7e:	46b9      	mov	r9, r7
   2aa80:	e7aa      	b.n	2a9d8 <process_event+0x5c>
			transit = mgr->transitions->start;
   2aa82:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2aa84:	f021 0107 	bic.w	r1, r1, #7
   2aa88:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   2aa8c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   2aa8e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   2aa92:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   2aa94:	d12d      	bne.n	2aaf2 <process_event+0x176>
		    || (transit != NULL)) {
   2aa96:	f1b9 0f00 	cmp.w	r9, #0
   2aa9a:	d040      	beq.n	2ab1e <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   2aa9c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   2aaa0:	8321      	strh	r1, [r4, #24]
   2aaa2:	f388 8811 	msr	BASEPRI, r8
   2aaa6:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   2aaaa:	493a      	ldr	r1, [pc, #232]	; (2ab94 <process_event+0x218>)
   2aaac:	4620      	mov	r0, r4
   2aaae:	47c8      	blx	r9
   2aab0:	e029      	b.n	2ab06 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2aab2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   2aab6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2aab8:	f041 0104 	orr.w	r1, r1, #4
   2aabc:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   2aabe:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   2aac0:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   2aac4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   2aac6:	d0e6      	beq.n	2aa96 <process_event+0x11a>
   2aac8:	2700      	movs	r7, #0
		res = 0;
   2aaca:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2aacc:	f04f 0a04 	mov.w	sl, #4
   2aad0:	e782      	b.n	2a9d8 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2aad2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   2aad6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2aad8:	f041 0105 	orr.w	r1, r1, #5
   2aadc:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   2aade:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   2aae0:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   2aae4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   2aae6:	d0d6      	beq.n	2aa96 <process_event+0x11a>
   2aae8:	2700      	movs	r7, #0
		res = 0;
   2aaea:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2aaec:	f04f 0a05 	mov.w	sl, #5
   2aaf0:	e772      	b.n	2a9d8 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   2aaf2:	2700      	movs	r7, #0
		res = 0;
   2aaf4:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2aaf6:	f04f 0a06 	mov.w	sl, #6
   2aafa:	e76d      	b.n	2a9d8 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2aafc:	462b      	mov	r3, r5
   2aafe:	e787      	b.n	2aa10 <process_event+0x94>
			if (transit != NULL) {
   2ab00:	f1b9 0f00 	cmp.w	r9, #0
   2ab04:	d1d1      	bne.n	2aaaa <process_event+0x12e>
	__asm__ volatile(
   2ab06:	f04f 0320 	mov.w	r3, #32
   2ab0a:	f3ef 8811 	mrs	r8, BASEPRI
   2ab0e:	f383 8812 	msr	BASEPRI_MAX, r3
   2ab12:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   2ab16:	8b23      	ldrh	r3, [r4, #24]
   2ab18:	f023 0308 	bic.w	r3, r3, #8
   2ab1c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   2ab1e:	8b25      	ldrh	r5, [r4, #24]
   2ab20:	06ea      	lsls	r2, r5, #27
   2ab22:	d52e      	bpl.n	2ab82 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   2ab24:	f025 0310 	bic.w	r3, r5, #16
   2ab28:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   2ab2a:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   2ab2e:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2ab30:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   2ab32:	2e00      	cmp	r6, #0
   2ab34:	f6bf af6f 	bge.w	2aa16 <process_event+0x9a>
	list->head = NULL;
   2ab38:	2300      	movs	r3, #0
		*clients = mgr->clients;
   2ab3a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   2ab3c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2ab40:	f021 0107 	bic.w	r1, r1, #7
   2ab44:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2ab48:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2ab4a:	8b21      	ldrh	r1, [r4, #24]
   2ab4c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   2ab50:	45aa      	cmp	sl, r5
   2ab52:	f04f 0900 	mov.w	r9, #0
   2ab56:	f47f af3f 	bne.w	2a9d8 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   2ab5a:	2f00      	cmp	r7, #0
   2ab5c:	d09b      	beq.n	2aa96 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   2ab5e:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   2ab62:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   2ab64:	f388 8811 	msr	BASEPRI, r8
   2ab68:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   2ab6c:	2f00      	cmp	r7, #0
   2ab6e:	d0c7      	beq.n	2ab00 <process_event+0x184>
	return node->next;
   2ab70:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   2ab72:	4639      	mov	r1, r7
   2ab74:	4633      	mov	r3, r6
   2ab76:	4652      	mov	r2, sl
   2ab78:	4620      	mov	r0, r4
   2ab7a:	f01e ff9f 	bl	49abc <notify_one>
	list->head = node;
   2ab7e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   2ab80:	e7f4      	b.n	2ab6c <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   2ab82:	06ab      	lsls	r3, r5, #26
   2ab84:	f57f af1a 	bpl.w	2a9bc <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   2ab88:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   2ab8c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   2ab8e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   2ab92:	e6ff      	b.n	2a994 <process_event+0x18>
   2ab94:	00049ae9 	.word	0x00049ae9

0002ab98 <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
   2ab98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ab9c:	b08d      	sub	sp, #52	; 0x34
   2ab9e:	461d      	mov	r5, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
   2aba0:	1e53      	subs	r3, r2, #1
{
   2aba2:	4682      	mov	sl, r0
   2aba4:	9101      	str	r1, [sp, #4]
	fmt--;
   2aba6:	9303      	str	r3, [sp, #12]
	size_t count = 0;
   2aba8:	f04f 0900 	mov.w	r9, #0

start:
	while (*++fmt != '%') {
   2abac:	9b03      	ldr	r3, [sp, #12]
   2abae:	7858      	ldrb	r0, [r3, #1]
   2abb0:	2825      	cmp	r0, #37	; 0x25
   2abb2:	f103 0401 	add.w	r4, r3, #1
   2abb6:	d119      	bne.n	2abec <cbvprintf+0x54>
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;

	for (fmt++ ; ; fmt++) {
   2abb8:	461e      	mov	r6, r3
	special = 0;
   2abba:	2000      	movs	r0, #0
	precision = -1;
   2abbc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	for (fmt++ ; ; fmt++) {
   2abc0:	3602      	adds	r6, #2
	length_mod = 0;
   2abc2:	4603      	mov	r3, r0
	padding_mode = 0;
   2abc4:	9002      	str	r0, [sp, #8]
	min_width = -1;
   2abc6:	4644      	mov	r4, r8
		switch (*fmt) {
   2abc8:	7831      	ldrb	r1, [r6, #0]
   2abca:	9603      	str	r6, [sp, #12]
   2abcc:	2939      	cmp	r1, #57	; 0x39
   2abce:	d854      	bhi.n	2ac7a <cbvprintf+0xe2>
   2abd0:	291f      	cmp	r1, #31
   2abd2:	d814      	bhi.n	2abfe <cbvprintf+0x66>
   2abd4:	2900      	cmp	r1, #0
   2abd6:	f000 81f0 	beq.w	2afba <cbvprintf+0x422>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
   2abda:	9901      	ldr	r1, [sp, #4]
   2abdc:	2025      	movs	r0, #37	; 0x25
   2abde:	47d0      	blx	sl
			OUTC(*fmt);
   2abe0:	9901      	ldr	r1, [sp, #4]
   2abe2:	7830      	ldrb	r0, [r6, #0]
   2abe4:	47d0      	blx	sl
   2abe6:	f109 0902 	add.w	r9, r9, #2
			goto start;
   2abea:	e7df      	b.n	2abac <cbvprintf+0x14>
		if (*fmt == '\0') {
   2abec:	2800      	cmp	r0, #0
   2abee:	f000 81e4 	beq.w	2afba <cbvprintf+0x422>
		OUTC(*fmt);
   2abf2:	9901      	ldr	r1, [sp, #4]
   2abf4:	47d0      	blx	sl
   2abf6:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
   2abfa:	9403      	str	r4, [sp, #12]
   2abfc:	e7d6      	b.n	2abac <cbvprintf+0x14>
		switch (*fmt) {
   2abfe:	f1a1 0220 	sub.w	r2, r1, #32
   2ac02:	2a19      	cmp	r2, #25
   2ac04:	d8e9      	bhi.n	2abda <cbvprintf+0x42>
   2ac06:	a701      	add	r7, pc, #4	; (adr r7, 2ac0c <cbvprintf+0x74>)
   2ac08:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
   2ac0c:	0002ac75 	.word	0x0002ac75
   2ac10:	0002abdb 	.word	0x0002abdb
   2ac14:	0002abdb 	.word	0x0002abdb
   2ac18:	0002ac75 	.word	0x0002ac75
   2ac1c:	0002abdb 	.word	0x0002abdb
   2ac20:	0002acf5 	.word	0x0002acf5
   2ac24:	0002abdb 	.word	0x0002abdb
   2ac28:	0002abdb 	.word	0x0002abdb
   2ac2c:	0002abdb 	.word	0x0002abdb
   2ac30:	0002abdb 	.word	0x0002abdb
   2ac34:	0002ad41 	.word	0x0002ad41
   2ac38:	0002ac75 	.word	0x0002ac75
   2ac3c:	0002abdb 	.word	0x0002abdb
   2ac40:	0002ad55 	.word	0x0002ad55
   2ac44:	0002ad01 	.word	0x0002ad01
   2ac48:	0002abdb 	.word	0x0002abdb
   2ac4c:	0002ad0f 	.word	0x0002ad0f
   2ac50:	0002ad2f 	.word	0x0002ad2f
   2ac54:	0002ad2f 	.word	0x0002ad2f
   2ac58:	0002ad2f 	.word	0x0002ad2f
   2ac5c:	0002ad2f 	.word	0x0002ad2f
   2ac60:	0002ad2f 	.word	0x0002ad2f
   2ac64:	0002ad2f 	.word	0x0002ad2f
   2ac68:	0002ad2f 	.word	0x0002ad2f
   2ac6c:	0002ad2f 	.word	0x0002ad2f
   2ac70:	0002ad2f 	.word	0x0002ad2f
   2ac74:	4608      	mov	r0, r1
   2ac76:	3601      	adds	r6, #1
   2ac78:	e7a6      	b.n	2abc8 <cbvprintf+0x30>
   2ac7a:	2958      	cmp	r1, #88	; 0x58
   2ac7c:	f000 80ee 	beq.w	2ae5c <cbvprintf+0x2c4>
   2ac80:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
   2ac84:	b2d7      	uxtb	r7, r2
   2ac86:	2f17      	cmp	r7, #23
   2ac88:	d8a7      	bhi.n	2abda <cbvprintf+0x42>
   2ac8a:	2a17      	cmp	r2, #23
   2ac8c:	d8a5      	bhi.n	2abda <cbvprintf+0x42>
   2ac8e:	a701      	add	r7, pc, #4	; (adr r7, 2ac94 <cbvprintf+0xfc>)
   2ac90:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
   2ac94:	0002af03 	.word	0x0002af03
   2ac98:	0002ad7b 	.word	0x0002ad7b
   2ac9c:	0002abdb 	.word	0x0002abdb
   2aca0:	0002abdb 	.word	0x0002abdb
   2aca4:	0002abdb 	.word	0x0002abdb
   2aca8:	0002ad5b 	.word	0x0002ad5b
   2acac:	0002ad7b 	.word	0x0002ad7b
   2acb0:	0002abdb 	.word	0x0002abdb
   2acb4:	0002abdb 	.word	0x0002abdb
   2acb8:	0002ad5b 	.word	0x0002ad5b
   2acbc:	0002abdb 	.word	0x0002abdb
   2acc0:	0002abdb 	.word	0x0002abdb
   2acc4:	0002abdb 	.word	0x0002abdb
   2acc8:	0002ae37 	.word	0x0002ae37
   2accc:	0002abdb 	.word	0x0002abdb
   2acd0:	0002abdb 	.word	0x0002abdb
   2acd4:	0002aed7 	.word	0x0002aed7
   2acd8:	0002abdb 	.word	0x0002abdb
   2acdc:	0002ad7b 	.word	0x0002ad7b
   2ace0:	0002abdb 	.word	0x0002abdb
   2ace4:	0002abdb 	.word	0x0002abdb
   2ace8:	0002ae37 	.word	0x0002ae37
   2acec:	0002abdb 	.word	0x0002abdb
   2acf0:	0002ad5b 	.word	0x0002ad5b
			OUTC('%');
   2acf4:	9901      	ldr	r1, [sp, #4]
   2acf6:	2025      	movs	r0, #37	; 0x25
   2acf8:	47d0      	blx	sl
   2acfa:	f109 0901 	add.w	r9, r9, #1
			goto start;
   2acfe:	e755      	b.n	2abac <cbvprintf+0x14>
			padding_mode &= (char)~PAD_ZERO;
   2ad00:	9a02      	ldr	r2, [sp, #8]
   2ad02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   2ad06:	9202      	str	r2, [sp, #8]
			precision = 0;
   2ad08:	f04f 0800 	mov.w	r8, #0
			continue;
   2ad0c:	e7b3      	b.n	2ac76 <cbvprintf+0xde>
			if (min_width < 0 && precision < 0 && !padding_mode) {
   2ad0e:	2c00      	cmp	r4, #0
   2ad10:	da0d      	bge.n	2ad2e <cbvprintf+0x196>
   2ad12:	f1b8 0f00 	cmp.w	r8, #0
   2ad16:	da0d      	bge.n	2ad34 <cbvprintf+0x19c>
   2ad18:	9a02      	ldr	r2, [sp, #8]
   2ad1a:	2a00      	cmp	r2, #0
   2ad1c:	f000 8145 	beq.w	2afaa <cbvprintf+0x412>
				if (min_width < 0) {
   2ad20:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
				min_width = 10 * min_width + *fmt - '0';
   2ad24:	220a      	movs	r2, #10
   2ad26:	fb02 1404 	mla	r4, r2, r4, r1
   2ad2a:	3c30      	subs	r4, #48	; 0x30
   2ad2c:	e7a3      	b.n	2ac76 <cbvprintf+0xde>
			if (precision >= 0) {
   2ad2e:	f1b8 0f00 	cmp.w	r8, #0
   2ad32:	dbf5      	blt.n	2ad20 <cbvprintf+0x188>
				precision = 10 * precision + *fmt - '0';
   2ad34:	220a      	movs	r2, #10
   2ad36:	fb02 1208 	mla	r2, r2, r8, r1
   2ad3a:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
   2ad3e:	e79a      	b.n	2ac76 <cbvprintf+0xde>
			if (precision >= 0) {
   2ad40:	f1b8 0f00 	cmp.w	r8, #0
				precision = va_arg(ap, int);
   2ad44:	f855 2b04 	ldr.w	r2, [r5], #4
			if (precision >= 0) {
   2ad48:	f280 8131 	bge.w	2afae <cbvprintf+0x416>
				if (min_width < 0) {
   2ad4c:	2a00      	cmp	r2, #0
   2ad4e:	f280 8130 	bge.w	2afb2 <cbvprintf+0x41a>
					min_width = -min_width;
   2ad52:	4254      	negs	r4, r2
		switch (*fmt) {
   2ad54:	2202      	movs	r2, #2
				padding_mode = PAD_ZERO;
   2ad56:	9202      	str	r2, [sp, #8]
   2ad58:	e78d      	b.n	2ac76 <cbvprintf+0xde>
			if (*fmt == 'h' && length_mod == 'h') {
   2ad5a:	2968      	cmp	r1, #104	; 0x68
   2ad5c:	d103      	bne.n	2ad66 <cbvprintf+0x1ce>
   2ad5e:	2b68      	cmp	r3, #104	; 0x68
   2ad60:	d106      	bne.n	2ad70 <cbvprintf+0x1d8>
				length_mod = 'H';
   2ad62:	2348      	movs	r3, #72	; 0x48
   2ad64:	e787      	b.n	2ac76 <cbvprintf+0xde>
			} else if (*fmt == 'l' && length_mod == 'l') {
   2ad66:	296c      	cmp	r1, #108	; 0x6c
   2ad68:	d102      	bne.n	2ad70 <cbvprintf+0x1d8>
   2ad6a:	2b6c      	cmp	r3, #108	; 0x6c
   2ad6c:	f000 8123 	beq.w	2afb6 <cbvprintf+0x41e>
			} else if (length_mod == '\0') {
   2ad70:	2b00      	cmp	r3, #0
   2ad72:	f47f af32 	bne.w	2abda <cbvprintf+0x42>
		switch (*fmt) {
   2ad76:	460b      	mov	r3, r1
   2ad78:	e77d      	b.n	2ac76 <cbvprintf+0xde>
			if (length_mod == 'z') {
   2ad7a:	2b7a      	cmp	r3, #122	; 0x7a
   2ad7c:	d106      	bne.n	2ad8c <cbvprintf+0x1f4>
			} else if (*fmt == 'u') {
   2ad7e:	2975      	cmp	r1, #117	; 0x75
				precision = va_arg(ap, int);
   2ad80:	f855 6b04 	ldr.w	r6, [r5], #4
			} else if (*fmt == 'u') {
   2ad84:	d114      	bne.n	2adb0 <cbvprintf+0x218>
				d = va_arg(ap, unsigned int);
   2ad86:	f04f 0b00 	mov.w	fp, #0
			if (*fmt != 'u' && (int_value_type)d < 0) {
   2ad8a:	e00c      	b.n	2ada6 <cbvprintf+0x20e>
			} else if (length_mod == 'l') {
   2ad8c:	2b6c      	cmp	r3, #108	; 0x6c
   2ad8e:	d0f6      	beq.n	2ad7e <cbvprintf+0x1e6>
			} else if (length_mod == 'L') {
   2ad90:	2b4c      	cmp	r3, #76	; 0x4c
   2ad92:	d1f4      	bne.n	2ad7e <cbvprintf+0x1e6>
					unsigned long long llu =
   2ad94:	3507      	adds	r5, #7
   2ad96:	f025 0307 	bic.w	r3, r5, #7
				if (*fmt == 'u') {
   2ad9a:	2975      	cmp	r1, #117	; 0x75
					unsigned long long llu =
   2ad9c:	e9d3 6b00 	ldrd	r6, fp, [r3]
   2ada0:	f103 0508 	add.w	r5, r3, #8
				if (*fmt == 'u') {
   2ada4:	d106      	bne.n	2adb4 <cbvprintf+0x21c>
			} else if (special == ' ') {
   2ada6:	2820      	cmp	r0, #32
   2ada8:	d13e      	bne.n	2ae28 <cbvprintf+0x290>
				prefix = " ";
   2adaa:	4f86      	ldr	r7, [pc, #536]	; (2afc4 <cbvprintf+0x42c>)
				min_width--;
   2adac:	3c01      	subs	r4, #1
   2adae:	e009      	b.n	2adc4 <cbvprintf+0x22c>
				d = va_arg(ap, int);
   2adb0:	ea4f 7be6 	mov.w	fp, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
   2adb4:	f1bb 0f00 	cmp.w	fp, #0
   2adb8:	daf5      	bge.n	2ada6 <cbvprintf+0x20e>
				d = -d;
   2adba:	4276      	negs	r6, r6
				prefix = "-";
   2adbc:	4f82      	ldr	r7, [pc, #520]	; (2afc8 <cbvprintf+0x430>)
				d = -d;
   2adbe:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
				min_width--;
   2adc2:	3c01      	subs	r4, #1
	int i = 0;
   2adc4:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   2adc8:	9305      	str	r3, [sp, #20]
   2adca:	2300      	movs	r3, #0
   2adcc:	9304      	str	r3, [sp, #16]
		unsigned int c = num % base;
   2adce:	4630      	mov	r0, r6
   2add0:	4659      	mov	r1, fp
   2add2:	220a      	movs	r2, #10
   2add4:	2300      	movs	r3, #0
   2add6:	f7fb f993 	bl	26100 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
   2adda:	9b04      	ldr	r3, [sp, #16]
   2addc:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
   2ade0:	f8cd c010 	str.w	ip, [sp, #16]
   2ade4:	f8dd c014 	ldr.w	ip, [sp, #20]
   2ade8:	3230      	adds	r2, #48	; 0x30
   2adea:	f80c 2d01 	strb.w	r2, [ip, #-1]!
   2adee:	f8cd c014 	str.w	ip, [sp, #20]
		num /= base;
   2adf2:	46b4      	mov	ip, r6
   2adf4:	465a      	mov	r2, fp
	} while (num);
   2adf6:	f1bc 0f0a 	cmp.w	ip, #10
   2adfa:	f172 0200 	sbcs.w	r2, r2, #0
		num /= base;
   2adfe:	4606      	mov	r6, r0
   2ae00:	468b      	mov	fp, r1
	} while (num);
   2ae02:	d2e4      	bcs.n	2adce <cbvprintf+0x236>
	return -i;
   2ae04:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
   2ae08:	3330      	adds	r3, #48	; 0x30
			data = buf + sizeof(buf) - data_len;
   2ae0a:	eb0d 0603 	add.w	r6, sp, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
   2ae0e:	f1b8 0f00 	cmp.w	r8, #0
			data = buf + sizeof(buf) - data_len;
   2ae12:	f1a6 0604 	sub.w	r6, r6, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
   2ae16:	da6d      	bge.n	2aef4 <cbvprintf+0x35c>
   2ae18:	9b02      	ldr	r3, [sp, #8]
   2ae1a:	07d9      	lsls	r1, r3, #31
   2ae1c:	d47c      	bmi.n	2af18 <cbvprintf+0x380>
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
   2ae1e:	eba8 030b 	sub.w	r3, r8, fp
		min_width -= data_len;
   2ae22:	eba4 040b 	sub.w	r4, r4, fp
   2ae26:	e013      	b.n	2ae50 <cbvprintf+0x2b8>
			} else if (special == '+') {
   2ae28:	282b      	cmp	r0, #43	; 0x2b
				prefix = "+";
   2ae2a:	bf0a      	itet	eq
   2ae2c:	4f67      	ldreq	r7, [pc, #412]	; (2afcc <cbvprintf+0x434>)
	prefix = "";
   2ae2e:	4f68      	ldrne	r7, [pc, #416]	; (2afd0 <cbvprintf+0x438>)
				min_width--;
   2ae30:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
   2ae34:	e7c6      	b.n	2adc4 <cbvprintf+0x22c>
			if (*fmt == 'p') {
   2ae36:	2970      	cmp	r1, #112	; 0x70
   2ae38:	d10f      	bne.n	2ae5a <cbvprintf+0x2c2>
				x = (uintptr_t)va_arg(ap, void *);
   2ae3a:	f855 2b04 	ldr.w	r2, [r5], #4
   2ae3e:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
   2ae40:	b9fa      	cbnz	r2, 2ae82 <cbvprintf+0x2ea>
					data = "(nil)";
   2ae42:	4e64      	ldr	r6, [pc, #400]	; (2afd4 <cbvprintf+0x43c>)
		min_width -= data_len;
   2ae44:	3c05      	subs	r4, #5
		precision -= data_len;
   2ae46:	f06f 0304 	mvn.w	r3, #4
					data_len = 5;
   2ae4a:	f04f 0b05 	mov.w	fp, #5
	prefix = "";
   2ae4e:	4f60      	ldr	r7, [pc, #384]	; (2afd0 <cbvprintf+0x438>)
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
   2ae50:	9a02      	ldr	r2, [sp, #8]
   2ae52:	0792      	lsls	r2, r2, #30
   2ae54:	d46f      	bmi.n	2af36 <cbvprintf+0x39e>
   2ae56:	46a0      	mov	r8, r4
   2ae58:	e065      	b.n	2af26 <cbvprintf+0x38e>
		switch (*fmt) {
   2ae5a:	2178      	movs	r1, #120	; 0x78
			} else if (length_mod == 'l') {
   2ae5c:	2b6c      	cmp	r3, #108	; 0x6c
   2ae5e:	d103      	bne.n	2ae68 <cbvprintf+0x2d0>
				x = va_arg(ap, unsigned int);
   2ae60:	f855 2b04 	ldr.w	r2, [r5], #4
   2ae64:	2300      	movs	r3, #0
   2ae66:	e008      	b.n	2ae7a <cbvprintf+0x2e2>
			} else if (length_mod == 'L') {
   2ae68:	2b4c      	cmp	r3, #76	; 0x4c
   2ae6a:	d1f9      	bne.n	2ae60 <cbvprintf+0x2c8>
				unsigned long long llx =
   2ae6c:	3507      	adds	r5, #7
   2ae6e:	f025 0307 	bic.w	r3, r5, #7
   2ae72:	461d      	mov	r5, r3
   2ae74:	685b      	ldr	r3, [r3, #4]
   2ae76:	f855 2b08 	ldr.w	r2, [r5], #8
			if (special == '#') {
   2ae7a:	2823      	cmp	r0, #35	; 0x23
   2ae7c:	d125      	bne.n	2aeca <cbvprintf+0x332>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
   2ae7e:	0688      	lsls	r0, r1, #26
   2ae80:	d521      	bpl.n	2aec6 <cbvprintf+0x32e>
   2ae82:	4f55      	ldr	r7, [pc, #340]	; (2afd8 <cbvprintf+0x440>)
				min_width -= 2;
   2ae84:	3c02      	subs	r4, #2
			data_len = convert_value(x, 16, ALPHA(*fmt),
   2ae86:	f001 0160 	and.w	r1, r1, #96	; 0x60
   2ae8a:	f1a1 0b39 	sub.w	fp, r1, #57	; 0x39
	int i = 0;
   2ae8e:	f10d 0e2d 	add.w	lr, sp, #45	; 0x2d
   2ae92:	2600      	movs	r6, #0
		unsigned int c = num % base;
   2ae94:	f002 010f 	and.w	r1, r2, #15
		if (c >= 10) {
   2ae98:	2909      	cmp	r1, #9
			c += alpha;
   2ae9a:	bf88      	it	hi
   2ae9c:	4459      	addhi	r1, fp
		buftop[--i] = c + '0';
   2ae9e:	3130      	adds	r1, #48	; 0x30
   2aea0:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	} while (num);
   2aea4:	2a10      	cmp	r2, #16
		num /= base;
   2aea6:	ea4f 1112 	mov.w	r1, r2, lsr #4
   2aeaa:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
   2aeae:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
   2aeb2:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
   2aeb6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
	} while (num);
   2aeba:	d208      	bcs.n	2aece <cbvprintf+0x336>
	return -i;
   2aebc:	f1c6 0b01 	rsb	fp, r6, #1
			data = buf + sizeof(buf) - data_len;
   2aec0:	f106 0330 	add.w	r3, r6, #48	; 0x30
   2aec4:	e7a1      	b.n	2ae0a <cbvprintf+0x272>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
   2aec6:	4f45      	ldr	r7, [pc, #276]	; (2afdc <cbvprintf+0x444>)
   2aec8:	e7dc      	b.n	2ae84 <cbvprintf+0x2ec>
	prefix = "";
   2aeca:	4f41      	ldr	r7, [pc, #260]	; (2afd0 <cbvprintf+0x438>)
   2aecc:	e7db      	b.n	2ae86 <cbvprintf+0x2ee>
		buftop[--i] = c + '0';
   2aece:	4666      	mov	r6, ip
		num /= base;
   2aed0:	460a      	mov	r2, r1
   2aed2:	4603      	mov	r3, r0
   2aed4:	e7de      	b.n	2ae94 <cbvprintf+0x2fc>
			data = va_arg(ap, char *);
   2aed6:	f855 6b04 	ldr.w	r6, [r5], #4
			data_len = strlen(data);
   2aeda:	4630      	mov	r0, r6
   2aedc:	f020 fe85 	bl	4bbea <strlen>
			if (precision >= 0 && data_len > precision) {
   2aee0:	f1b8 0f00 	cmp.w	r8, #0
			data_len = strlen(data);
   2aee4:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
   2aee6:	db02      	blt.n	2aeee <cbvprintf+0x356>
   2aee8:	4540      	cmp	r0, r8
   2aeea:	bfa8      	it	ge
   2aeec:	46c3      	movge	fp, r8
	prefix = "";
   2aeee:	4f38      	ldr	r7, [pc, #224]	; (2afd0 <cbvprintf+0x438>)
			precision = 0;
   2aef0:	f04f 0800 	mov.w	r8, #0
		precision -= data_len;
   2aef4:	eba8 030b 	sub.w	r3, r8, fp
		if (precision > 0) {
   2aef8:	2b00      	cmp	r3, #0
   2aefa:	dd92      	ble.n	2ae22 <cbvprintf+0x28a>
			min_width -= precision;
   2aefc:	eba4 0408 	sub.w	r4, r4, r8
   2af00:	e7a6      	b.n	2ae50 <cbvprintf+0x2b8>
			buf[0] = c;
   2af02:	f855 3b04 	ldr.w	r3, [r5], #4
   2af06:	f88d 3018 	strb.w	r3, [sp, #24]
		min_width -= data_len;
   2af0a:	3c01      	subs	r4, #1
		precision -= data_len;
   2af0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			data_len = 1;
   2af10:	f04f 0b01 	mov.w	fp, #1
			data = buf;
   2af14:	ae06      	add	r6, sp, #24
   2af16:	e79a      	b.n	2ae4e <cbvprintf+0x2b6>
   2af18:	46a0      	mov	r8, r4
   2af1a:	e7eb      	b.n	2aef4 <cbvprintf+0x35c>
   2af1c:	9302      	str	r3, [sp, #8]
			while (--min_width >= 0) {
				OUTC(' ');
   2af1e:	9901      	ldr	r1, [sp, #4]
   2af20:	2020      	movs	r0, #32
   2af22:	47d0      	blx	sl
   2af24:	9b02      	ldr	r3, [sp, #8]
			while (--min_width >= 0) {
   2af26:	f1b8 0801 	subs.w	r8, r8, #1
   2af2a:	d5f7      	bpl.n	2af1c <cbvprintf+0x384>
   2af2c:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
   2af30:	3c01      	subs	r4, #1
   2af32:	4491      	add	r9, r2
   2af34:	1aa4      	subs	r4, r4, r2
   2af36:	46b8      	mov	r8, r7
   2af38:	e006      	b.n	2af48 <cbvprintf+0x3b0>
   2af3a:	9304      	str	r3, [sp, #16]
   2af3c:	9202      	str	r2, [sp, #8]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
   2af3e:	9901      	ldr	r1, [sp, #4]
   2af40:	47d0      	blx	sl
   2af42:	9a02      	ldr	r2, [sp, #8]
   2af44:	9b04      	ldr	r3, [sp, #16]
   2af46:	4690      	mov	r8, r2
		while (*prefix) {
   2af48:	4642      	mov	r2, r8
   2af4a:	f812 0b01 	ldrb.w	r0, [r2], #1
   2af4e:	2800      	cmp	r0, #0
   2af50:	d1f3      	bne.n	2af3a <cbvprintf+0x3a2>
   2af52:	461a      	mov	r2, r3
		}
		while (--precision >= 0) {
   2af54:	3a01      	subs	r2, #1
   2af56:	d515      	bpl.n	2af84 <cbvprintf+0x3ec>
   2af58:	2b00      	cmp	r3, #0
   2af5a:	bfac      	ite	ge
   2af5c:	ebc7 0703 	rsbge	r7, r7, r3
   2af60:	427f      	neglt	r7, r7
   2af62:	465b      	mov	r3, fp
			OUTC('0');
		}
		while (--data_len >= 0) {
   2af64:	3b01      	subs	r3, #1
   2af66:	d515      	bpl.n	2af94 <cbvprintf+0x3fc>
   2af68:	f1bb 0f00 	cmp.w	fp, #0
   2af6c:	bfa8      	it	ge
   2af6e:	445f      	addge	r7, fp
   2af70:	444f      	add	r7, r9
   2af72:	4626      	mov	r6, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
   2af74:	3e01      	subs	r6, #1
   2af76:	d514      	bpl.n	2afa2 <cbvprintf+0x40a>
   2af78:	2c00      	cmp	r4, #0
   2af7a:	bfa8      	it	ge
   2af7c:	193f      	addge	r7, r7, r4
   2af7e:	eb07 0908 	add.w	r9, r7, r8
   2af82:	e613      	b.n	2abac <cbvprintf+0x14>
   2af84:	9304      	str	r3, [sp, #16]
   2af86:	9202      	str	r2, [sp, #8]
			OUTC('0');
   2af88:	9901      	ldr	r1, [sp, #4]
   2af8a:	2030      	movs	r0, #48	; 0x30
   2af8c:	47d0      	blx	sl
   2af8e:	9b04      	ldr	r3, [sp, #16]
   2af90:	9a02      	ldr	r2, [sp, #8]
   2af92:	e7df      	b.n	2af54 <cbvprintf+0x3bc>
   2af94:	9302      	str	r3, [sp, #8]
			OUTC(*data++);
   2af96:	9901      	ldr	r1, [sp, #4]
   2af98:	f816 0b01 	ldrb.w	r0, [r6], #1
   2af9c:	47d0      	blx	sl
   2af9e:	9b02      	ldr	r3, [sp, #8]
   2afa0:	e7e0      	b.n	2af64 <cbvprintf+0x3cc>
			OUTC(' ');
   2afa2:	9901      	ldr	r1, [sp, #4]
   2afa4:	2020      	movs	r0, #32
   2afa6:	47d0      	blx	sl
   2afa8:	e7e4      	b.n	2af74 <cbvprintf+0x3dc>
				padding_mode = PAD_ZERO;
   2afaa:	2201      	movs	r2, #1
   2afac:	e6d3      	b.n	2ad56 <cbvprintf+0x1be>
				precision = va_arg(ap, int);
   2afae:	4690      	mov	r8, r2
   2afb0:	e661      	b.n	2ac76 <cbvprintf+0xde>
   2afb2:	4614      	mov	r4, r2
   2afb4:	e65f      	b.n	2ac76 <cbvprintf+0xde>
				length_mod = 'L';
   2afb6:	234c      	movs	r3, #76	; 0x4c
   2afb8:	e65d      	b.n	2ac76 <cbvprintf+0xde>
		}

		goto start;
	}
}
   2afba:	4648      	mov	r0, r9
   2afbc:	b00d      	add	sp, #52	; 0x34
   2afbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2afc2:	bf00      	nop
   2afc4:	00053ee8 	.word	0x00053ee8
   2afc8:	00053ee6 	.word	0x00053ee6
   2afcc:	00053eea 	.word	0x00053eea
   2afd0:	00053f20 	.word	0x00053f20
   2afd4:	00053ef2 	.word	0x00053ef2
   2afd8:	00053eec 	.word	0x00053eec
   2afdc:	00053eef 	.word	0x00053eef

0002afe0 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   2afe0:	b508      	push	{r3, lr}
	__asm__ volatile(
   2afe2:	f04f 0220 	mov.w	r2, #32
   2afe6:	f3ef 8311 	mrs	r3, BASEPRI
   2afea:	f382 8812 	msr	BASEPRI_MAX, r2
   2afee:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   2aff2:	f002 f8dd 	bl	2d1b0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   2aff6:	4803      	ldr	r0, [pc, #12]	; (2b004 <sys_reboot+0x24>)
   2aff8:	f01e fcff 	bl	499fa <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   2affc:	f001 fdbe 	bl	2cb7c <arch_cpu_idle>
   2b000:	e7fc      	b.n	2affc <sys_reboot+0x1c>
   2b002:	bf00      	nop
   2b004:	00053ef8 	.word	0x00053ef8

0002b008 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
   2b008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
   2b00a:	2407      	movs	r4, #7
   2b00c:	9402      	str	r4, [sp, #8]
   2b00e:	4c04      	ldr	r4, [pc, #16]	; (2b020 <read_pnp_id+0x18>)
   2b010:	9401      	str	r4, [sp, #4]
   2b012:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   2b016:	9400      	str	r4, [sp, #0]
   2b018:	f023 fa3c 	bl	4e494 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
   2b01c:	b004      	add	sp, #16
   2b01e:	bd10      	pop	{r4, pc}
   2b020:	20000ff4 	.word	0x20000ff4

0002b024 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   2b024:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   2b026:	4c08      	ldr	r4, [pc, #32]	; (2b048 <read_blvl+0x24>)
{
   2b028:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   2b02a:	7824      	ldrb	r4, [r4, #0]
   2b02c:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   2b030:	2401      	movs	r4, #1
   2b032:	9402      	str	r4, [sp, #8]
   2b034:	f10d 0417 	add.w	r4, sp, #23
   2b038:	9401      	str	r4, [sp, #4]
   2b03a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2b03e:	9400      	str	r4, [sp, #0]
   2b040:	f023 fa28 	bl	4e494 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   2b044:	b006      	add	sp, #24
   2b046:	bd10      	pop	{r4, pc}
   2b048:	20000ffb 	.word	0x20000ffb

0002b04c <bt_bas_set_battery_level>:
{
	return battery_level;
}

int bt_bas_set_battery_level(uint8_t level)
{
   2b04c:	b500      	push	{lr}
   2b04e:	b089      	sub	sp, #36	; 0x24
	int rc;

	if (level > 100U) {
   2b050:	2864      	cmp	r0, #100	; 0x64
{
   2b052:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
   2b056:	d819      	bhi.n	2b08c <bt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
   2b058:	4b0e      	ldr	r3, [pc, #56]	; (2b094 <bt_bas_set_battery_level+0x48>)
	memset(&params, 0, sizeof(params));
   2b05a:	2218      	movs	r2, #24
   2b05c:	7018      	strb	r0, [r3, #0]
   2b05e:	2100      	movs	r1, #0
   2b060:	a802      	add	r0, sp, #8
   2b062:	f020 fe04 	bl	4bc6e <memset>
	params.attr = attr;
   2b066:	4b0c      	ldr	r3, [pc, #48]	; (2b098 <bt_bas_set_battery_level+0x4c>)
   2b068:	9303      	str	r3, [sp, #12]
	params.data = data;
   2b06a:	f10d 0307 	add.w	r3, sp, #7
   2b06e:	9304      	str	r3, [sp, #16]
	return bt_gatt_notify_cb(conn, &params);
   2b070:	a902      	add	r1, sp, #8
	params.len = len;
   2b072:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
   2b074:	2000      	movs	r0, #0
	params.len = len;
   2b076:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   2b07a:	f006 fee5 	bl	31e48 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
   2b07e:	f110 0f80 	cmn.w	r0, #128	; 0x80
   2b082:	bf08      	it	eq
   2b084:	2000      	moveq	r0, #0
}
   2b086:	b009      	add	sp, #36	; 0x24
   2b088:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   2b08c:	f06f 0015 	mvn.w	r0, #21
   2b090:	e7f9      	b.n	2b086 <bt_bas_set_battery_level+0x3a>
   2b092:	bf00      	nop
   2b094:	20000ffb 	.word	0x20000ffb
   2b098:	00052434 	.word	0x00052434

0002b09c <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   2b09c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2b0a0:	460f      	mov	r7, r1
   2b0a2:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b0a4:	2108      	movs	r1, #8
   2b0a6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   2b0a8:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2b0fc <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b0ac:	f01f f84e 	bl	4a14c <nvs_al_size.isra.0>
	*addr -= ate_size;
   2b0b0:	683c      	ldr	r4, [r7, #0]
   2b0b2:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b0b4:	4680      	mov	r8, r0
	*addr -= ate_size;
   2b0b6:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   2b0b8:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   2b0bc:	42ac      	cmp	r4, r5
   2b0be:	d803      	bhi.n	2b0c8 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   2b0c0:	2000      	movs	r0, #0
}
   2b0c2:	b003      	add	sp, #12
   2b0c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2b0c8:	2308      	movs	r3, #8
   2b0ca:	466a      	mov	r2, sp
   2b0cc:	4621      	mov	r1, r4
   2b0ce:	4630      	mov	r0, r6
   2b0d0:	f01e ffb1 	bl	4a036 <nvs_flash_rd>
		if (rc) {
   2b0d4:	2800      	cmp	r0, #0
   2b0d6:	d1f4      	bne.n	2b0c2 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   2b0d8:	4669      	mov	r1, sp
   2b0da:	4630      	mov	r0, r6
   2b0dc:	f01f f840 	bl	4a160 <nvs_ate_valid>
   2b0e0:	b140      	cbz	r0, 2b0f4 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   2b0e2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   2b0e6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   2b0ea:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   2b0ec:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   2b0f0:	4413      	add	r3, r2
   2b0f2:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   2b0f4:	eba4 0408 	sub.w	r4, r4, r8
   2b0f8:	e7e0      	b.n	2b0bc <nvs_recover_last_ate+0x20>
   2b0fa:	bf00      	nop
   2b0fc:	ffff0000 	.word	0xffff0000

0002b100 <nvs_init>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   2b100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b104:	4604      	mov	r4, r0
   2b106:	b088      	sub	sp, #32
   2b108:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   2b10a:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   2b10e:	4638      	mov	r0, r7
   2b110:	f025 fbf6 	bl	50900 <z_impl_k_mutex_init>
   2b114:	4628      	mov	r0, r5
   2b116:	f01c fbe3 	bl	478e0 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   2b11a:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   2b11c:	2800      	cmp	r0, #0
   2b11e:	f000 8152 	beq.w	2b3c6 <nvs_init+0x2c6>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   2b122:	6883      	ldr	r3, [r0, #8]
   2b124:	68db      	ldr	r3, [r3, #12]
   2b126:	4798      	blx	r3
		LOG_ERR("No valid flash device found");
		return -ENXIO;
	}

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   2b128:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   2b12a:	b928      	cbnz	r0, 2b138 <nvs_init+0x38>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
   2b12c:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   2b130:	4628      	mov	r0, r5
   2b132:	b008      	add	sp, #32
   2b134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   2b138:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   2b13a:	6883      	ldr	r3, [r0, #8]
   2b13c:	68db      	ldr	r3, [r3, #12]
   2b13e:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   2b140:	6803      	ldr	r3, [r0, #0]
   2b142:	3b01      	subs	r3, #1
   2b144:	2b1f      	cmp	r3, #31
   2b146:	d8f1      	bhi.n	2b12c <nvs_init+0x2c>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   2b148:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2b14a:	6821      	ldr	r1, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   2b14c:	aa05      	add	r2, sp, #20
   2b14e:	f024 ffb0 	bl	500b2 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   2b152:	2800      	cmp	r0, #0
   2b154:	d1ea      	bne.n	2b12c <nvs_init+0x2c>
	if (!fs->sector_size || fs->sector_size % info.size) {
   2b156:	89a5      	ldrh	r5, [r4, #12]
   2b158:	2d00      	cmp	r5, #0
   2b15a:	d0e7      	beq.n	2b12c <nvs_init+0x2c>
   2b15c:	9b06      	ldr	r3, [sp, #24]
   2b15e:	fbb5 f2f3 	udiv	r2, r5, r3
   2b162:	fb03 5512 	mls	r5, r3, r2, r5
   2b166:	2d00      	cmp	r5, #0
   2b168:	d1e0      	bne.n	2b12c <nvs_init+0x2c>
	if (fs->sector_count < 2) {
   2b16a:	89e3      	ldrh	r3, [r4, #14]
   2b16c:	2b01      	cmp	r3, #1
   2b16e:	d9dd      	bls.n	2b12c <nvs_init+0x2c>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   2b170:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   2b172:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   2b174:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   2b178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b17c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b180:	4638      	mov	r0, r7
   2b182:	f01c fe87 	bl	47e94 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b186:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2b188:	2108      	movs	r1, #8
   2b18a:	f01e ffdf 	bl	4a14c <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   2b18e:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b190:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   2b192:	89e3      	ldrh	r3, [r4, #14]
   2b194:	fa1f fa85 	uxth.w	sl, r5
   2b198:	4553      	cmp	r3, sl
   2b19a:	d808      	bhi.n	2b1ae <nvs_init+0xae>
	if (closed_sectors == fs->sector_count) {
   2b19c:	89e3      	ldrh	r3, [r4, #14]
   2b19e:	4543      	cmp	r3, r8
   2b1a0:	d123      	bne.n	2b1ea <nvs_init+0xea>
	return z_impl_k_mutex_unlock(mutex);
   2b1a2:	4638      	mov	r0, r7
   2b1a4:	f01c feee 	bl	47f84 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
   2b1a8:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   2b1ac:	e7c0      	b.n	2b130 <nvs_init+0x30>
		       (uint16_t)(fs->sector_size - ate_size);
   2b1ae:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   2b1b0:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   2b1b2:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   2b1b4:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2b1b8:	464a      	mov	r2, r9
   2b1ba:	2308      	movs	r3, #8
   2b1bc:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   2b1be:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2b1c0:	f01e ff71 	bl	4a0a6 <nvs_flash_cmp_const>
		if (rc) {
   2b1c4:	b178      	cbz	r0, 2b1e6 <nvs_init+0xe6>
			nvs_sector_advance(fs, &addr);
   2b1c6:	89e0      	ldrh	r0, [r4, #14]
   2b1c8:	4669      	mov	r1, sp
   2b1ca:	f01e ffb4 	bl	4a136 <nvs_sector_advance.isra.0>
			closed_sectors++;
   2b1ce:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2b1d2:	9900      	ldr	r1, [sp, #0]
   2b1d4:	2308      	movs	r3, #8
   2b1d6:	464a      	mov	r2, r9
   2b1d8:	4620      	mov	r0, r4
			closed_sectors++;
   2b1da:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2b1de:	f01e ff62 	bl	4a0a6 <nvs_flash_cmp_const>
			if (!rc) {
   2b1e2:	2800      	cmp	r0, #0
   2b1e4:	d0da      	beq.n	2b19c <nvs_init+0x9c>
	for (i = 0; i < fs->sector_count; i++) {
   2b1e6:	3501      	adds	r5, #1
   2b1e8:	e7d3      	b.n	2b192 <nvs_init+0x92>
	if (i == fs->sector_count) {
   2b1ea:	4553      	cmp	r3, sl
   2b1ec:	d10b      	bne.n	2b206 <nvs_init+0x106>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   2b1ee:	9900      	ldr	r1, [sp, #0]
   2b1f0:	2308      	movs	r3, #8
   2b1f2:	464a      	mov	r2, r9
   2b1f4:	1b89      	subs	r1, r1, r6
   2b1f6:	4620      	mov	r0, r4
   2b1f8:	f01e ff55 	bl	4a0a6 <nvs_flash_cmp_const>
		if (!rc) {
   2b1fc:	b918      	cbnz	r0, 2b206 <nvs_init+0x106>
			nvs_sector_advance(fs, &addr);
   2b1fe:	89e0      	ldrh	r0, [r4, #14]
   2b200:	4669      	mov	r1, sp
   2b202:	f01e ff98 	bl	4a136 <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   2b206:	4669      	mov	r1, sp
   2b208:	4620      	mov	r0, r4
   2b20a:	f7ff ff47 	bl	2b09c <nvs_recover_last_ate>
	if (rc) {
   2b20e:	4605      	mov	r5, r0
   2b210:	b118      	cbz	r0, 2b21a <nvs_init+0x11a>
   2b212:	4638      	mov	r0, r7
   2b214:	f01c feb6 	bl	47f84 <z_impl_k_mutex_unlock>
	if (rc) {
   2b218:	e78a      	b.n	2b130 <nvs_init+0x30>
	fs->ate_wra = addr;
   2b21a:	9b00      	ldr	r3, [sp, #0]
   2b21c:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   2b21e:	ea4f 4813 	mov.w	r8, r3, lsr #16
   2b222:	ea4f 4808 	mov.w	r8, r8, lsl #16
   2b226:	f8c4 8008 	str.w	r8, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   2b22a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   2b22e:	4299      	cmp	r1, r3
   2b230:	d30f      	bcc.n	2b252 <nvs_init+0x152>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2b232:	2308      	movs	r3, #8
   2b234:	aa01      	add	r2, sp, #4
   2b236:	4620      	mov	r0, r4
   2b238:	f01e fefd 	bl	4a036 <nvs_flash_rd>
		if (rc) {
   2b23c:	4605      	mov	r5, r0
   2b23e:	2800      	cmp	r0, #0
   2b240:	d1e7      	bne.n	2b212 <nvs_init+0x112>
   2b242:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   2b244:	f813 2b01 	ldrb.w	r2, [r3], #1
   2b248:	4591      	cmp	r9, r2
   2b24a:	d133      	bne.n	2b2b4 <nvs_init+0x1b4>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2b24c:	3501      	adds	r5, #1
   2b24e:	2d08      	cmp	r5, #8
   2b250:	d1f8      	bne.n	2b244 <nvs_init+0x144>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   2b252:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   2b254:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   2b256:	0c1b      	lsrs	r3, r3, #16
   2b258:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   2b25a:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   2b25c:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   2b25e:	f01e ff6a 	bl	4a136 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   2b262:	89a3      	ldrh	r3, [r4, #12]
   2b264:	9900      	ldr	r1, [sp, #0]
   2b266:	464a      	mov	r2, r9
   2b268:	4620      	mov	r0, r4
   2b26a:	f01e ff1c 	bl	4a0a6 <nvs_flash_cmp_const>
	if (rc < 0) {
   2b26e:	1e05      	subs	r5, r0, #0
   2b270:	dbcf      	blt.n	2b212 <nvs_init+0x112>
		addr = fs->ate_wra + ate_size;
   2b272:	6863      	ldr	r3, [r4, #4]
	if (rc) {
   2b274:	d074      	beq.n	2b360 <nvs_init+0x260>
		addr = fs->ate_wra + ate_size;
   2b276:	eb06 0803 	add.w	r8, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   2b27a:	f64f 79ff 	movw	r9, #65535	; 0xffff
   2b27e:	89a3      	ldrh	r3, [r4, #12]
		addr = fs->ate_wra + ate_size;
   2b280:	f8cd 8000 	str.w	r8, [sp]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   2b284:	fa1f f288 	uxth.w	r2, r8
   2b288:	1b9b      	subs	r3, r3, r6
   2b28a:	429a      	cmp	r2, r3
   2b28c:	d32c      	bcc.n	2b2e8 <nvs_init+0x1e8>
		bool gc_done_marker = false;
   2b28e:	2300      	movs	r3, #0
			addr = fs->ate_wra & ADDR_SECT_MASK;
   2b290:	6861      	ldr	r1, [r4, #4]
		if (gc_done_marker) {
   2b292:	2b00      	cmp	r3, #0
   2b294:	d041      	beq.n	2b31a <nvs_init+0x21a>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   2b296:	0c09      	lsrs	r1, r1, #16
   2b298:	0409      	lsls	r1, r1, #16
			nvs_sector_advance(fs, &addr);
   2b29a:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
   2b29c:	9100      	str	r1, [sp, #0]
			nvs_sector_advance(fs, &addr);
   2b29e:	4669      	mov	r1, sp
   2b2a0:	f01e ff49 	bl	4a136 <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
   2b2a4:	9900      	ldr	r1, [sp, #0]
   2b2a6:	4620      	mov	r0, r4
   2b2a8:	f01e ff22 	bl	4a0f0 <nvs_flash_erase_sector>
		rc = nvs_gc(fs);
   2b2ac:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   2b2ae:	2d00      	cmp	r5, #0
   2b2b0:	d072      	beq.n	2b398 <nvs_init+0x298>
   2b2b2:	e7ae      	b.n	2b212 <nvs_init+0x112>
		if (nvs_ate_valid(fs, &last_ate)) {
   2b2b4:	a901      	add	r1, sp, #4
   2b2b6:	4620      	mov	r0, r4
   2b2b8:	f01e ff52 	bl	4a160 <nvs_ate_valid>
   2b2bc:	6862      	ldr	r2, [r4, #4]
   2b2be:	b910      	cbnz	r0, 2b2c6 <nvs_init+0x1c6>
		fs->ate_wra -= ate_size;
   2b2c0:	1b92      	subs	r2, r2, r6
   2b2c2:	6062      	str	r2, [r4, #4]
   2b2c4:	e7b1      	b.n	2b22a <nvs_init+0x12a>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   2b2c6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
   2b2ca:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   2b2ce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2b2d0:	4429      	add	r1, r5
   2b2d2:	f01e ff3b 	bl	4a14c <nvs_al_size.isra.0>
   2b2d6:	4440      	add	r0, r8
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   2b2d8:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   2b2da:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   2b2dc:	d1f0      	bne.n	2b2c0 <nvs_init+0x1c0>
   2b2de:	2d00      	cmp	r5, #0
   2b2e0:	d0ee      	beq.n	2b2c0 <nvs_init+0x1c0>
				rc = -ESPIPE;
   2b2e2:	f06f 051c 	mvn.w	r5, #28
   2b2e6:	e068      	b.n	2b3ba <nvs_init+0x2ba>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2b2e8:	2308      	movs	r3, #8
   2b2ea:	aa03      	add	r2, sp, #12
   2b2ec:	4641      	mov	r1, r8
   2b2ee:	4620      	mov	r0, r4
   2b2f0:	f01e fea1 	bl	4a036 <nvs_flash_rd>
			if (rc) {
   2b2f4:	4605      	mov	r5, r0
   2b2f6:	2800      	cmp	r0, #0
   2b2f8:	d18b      	bne.n	2b212 <nvs_init+0x112>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   2b2fa:	a903      	add	r1, sp, #12
   2b2fc:	4620      	mov	r0, r4
   2b2fe:	f01e ff2f 	bl	4a160 <nvs_ate_valid>
   2b302:	b130      	cbz	r0, 2b312 <nvs_init+0x212>
   2b304:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2b308:	454b      	cmp	r3, r9
   2b30a:	d102      	bne.n	2b312 <nvs_init+0x212>
			    (gc_done_ate.id == 0xffff) &&
   2b30c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2b310:	b10b      	cbz	r3, 2b316 <nvs_init+0x216>
			addr += ate_size;
   2b312:	44b0      	add	r8, r6
   2b314:	e7b3      	b.n	2b27e <nvs_init+0x17e>
				gc_done_marker = true;
   2b316:	2301      	movs	r3, #1
   2b318:	e7ba      	b.n	2b290 <nvs_init+0x190>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   2b31a:	4620      	mov	r0, r4
   2b31c:	f01e fee8 	bl	4a0f0 <nvs_flash_erase_sector>
		if (rc) {
   2b320:	4605      	mov	r5, r0
   2b322:	2800      	cmp	r0, #0
   2b324:	f47f af75 	bne.w	2b212 <nvs_init+0x112>
		fs->ate_wra &= ADDR_SECT_MASK;
   2b328:	6863      	ldr	r3, [r4, #4]
   2b32a:	4a28      	ldr	r2, [pc, #160]	; (2b3cc <nvs_init+0x2cc>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   2b32c:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   2b32e:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   2b330:	440b      	add	r3, r1
   2b332:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   2b336:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   2b338:	4013      	ands	r3, r2
   2b33a:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   2b33c:	4620      	mov	r0, r4
   2b33e:	f01e fff1 	bl	4a324 <nvs_gc>
   2b342:	e7b3      	b.n	2b2ac <nvs_init+0x1ac>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   2b344:	1a5b      	subs	r3, r3, r1
   2b346:	464a      	mov	r2, r9
   2b348:	4620      	mov	r0, r4
   2b34a:	f01e feac 	bl	4a0a6 <nvs_flash_cmp_const>
		if (rc < 0) {
   2b34e:	1e05      	subs	r5, r0, #0
   2b350:	f6ff af5f 	blt.w	2b212 <nvs_init+0x112>
		if (!rc) {
   2b354:	d008      	beq.n	2b368 <nvs_init+0x268>
		fs->data_wra += fs->flash_parameters->write_block_size;
   2b356:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2b358:	68a3      	ldr	r3, [r4, #8]
   2b35a:	6812      	ldr	r2, [r2, #0]
   2b35c:	4413      	add	r3, r2
   2b35e:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   2b360:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   2b364:	428b      	cmp	r3, r1
   2b366:	d8ed      	bhi.n	2b344 <nvs_init+0x244>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   2b368:	6861      	ldr	r1, [r4, #4]
   2b36a:	89a3      	ldrh	r3, [r4, #12]
   2b36c:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   2b370:	429a      	cmp	r2, r3
   2b372:	d19c      	bne.n	2b2ae <nvs_init+0x1ae>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   2b374:	f8df 8054 	ldr.w	r8, [pc, #84]	; 2b3cc <nvs_init+0x2cc>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   2b378:	68a2      	ldr	r2, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   2b37a:	ea01 0308 	and.w	r3, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   2b37e:	429a      	cmp	r2, r3
   2b380:	d095      	beq.n	2b2ae <nvs_init+0x1ae>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   2b382:	4620      	mov	r0, r4
   2b384:	f01e feb4 	bl	4a0f0 <nvs_flash_erase_sector>
		if (rc) {
   2b388:	4605      	mov	r5, r0
   2b38a:	2800      	cmp	r0, #0
   2b38c:	f47f af41 	bne.w	2b212 <nvs_init+0x112>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   2b390:	6863      	ldr	r3, [r4, #4]
   2b392:	ea03 0308 	and.w	r3, r3, r8
   2b396:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   2b398:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   2b39a:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   2b39c:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   2b3a0:	429a      	cmp	r2, r3
   2b3a2:	d006      	beq.n	2b3b2 <nvs_init+0x2b2>
   2b3a4:	4638      	mov	r0, r7
   2b3a6:	f01c fded 	bl	47f84 <z_impl_k_mutex_unlock>
	fs->ready = true;
   2b3aa:	2301      	movs	r3, #1
   2b3ac:	7423      	strb	r3, [r4, #16]
	return 0;
   2b3ae:	2500      	movs	r5, #0
   2b3b0:	e6be      	b.n	2b130 <nvs_init+0x30>
		rc = nvs_add_gc_done_ate(fs);
   2b3b2:	4620      	mov	r0, r4
   2b3b4:	f01e ffa1 	bl	4a2fa <nvs_add_gc_done_ate>
   2b3b8:	4605      	mov	r5, r0
   2b3ba:	4638      	mov	r0, r7
   2b3bc:	f01c fde2 	bl	47f84 <z_impl_k_mutex_unlock>
	if (rc) {
   2b3c0:	2d00      	cmp	r5, #0
   2b3c2:	d0f2      	beq.n	2b3aa <nvs_init+0x2aa>
   2b3c4:	e6b4      	b.n	2b130 <nvs_init+0x30>
		return -ENXIO;
   2b3c6:	f06f 0505 	mvn.w	r5, #5
   2b3ca:	e6b1      	b.n	2b130 <nvs_init+0x30>
   2b3cc:	ffff0000 	.word	0xffff0000

0002b3d0 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   2b3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b3d4:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   2b3d6:	7c03      	ldrb	r3, [r0, #16]
{
   2b3d8:	b089      	sub	sp, #36	; 0x24
   2b3da:	4604      	mov	r4, r0
   2b3dc:	4689      	mov	r9, r1
   2b3de:	4690      	mov	r8, r2
	if (!fs->ready) {
   2b3e0:	2b00      	cmp	r3, #0
   2b3e2:	f000 80bd 	beq.w	2b560 <nvs_write+0x190>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b3e6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   2b3e8:	2108      	movs	r1, #8
   2b3ea:	4610      	mov	r0, r2
   2b3ec:	f01e feae 	bl	4a14c <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   2b3f0:	4629      	mov	r1, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b3f2:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   2b3f4:	4610      	mov	r0, r2
   2b3f6:	f01e fea9 	bl	4a14c <nvs_al_size.isra.0>

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   2b3fa:	89a3      	ldrh	r3, [r4, #12]
   2b3fc:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   2b400:	429d      	cmp	r5, r3
	data_size = nvs_al_size(fs, len);
   2b402:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   2b404:	f200 80af 	bhi.w	2b566 <nvs_write+0x196>
   2b408:	b11d      	cbz	r5, 2b412 <nvs_write+0x42>
	    ((len > 0) && (data == NULL))) {
   2b40a:	f1b8 0f00 	cmp.w	r8, #0
   2b40e:	f000 80aa 	beq.w	2b566 <nvs_write+0x196>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
   2b412:	6863      	ldr	r3, [r4, #4]
   2b414:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;

	while (1) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2b416:	aa04      	add	r2, sp, #16
   2b418:	a903      	add	r1, sp, #12
   2b41a:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   2b41c:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2b420:	f01e fed6 	bl	4a1d0 <nvs_prev_ate>
		if (rc) {
   2b424:	4606      	mov	r6, r0
   2b426:	2800      	cmp	r0, #0
   2b428:	d165      	bne.n	2b4f6 <nvs_write+0x126>
			return rc;
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   2b42a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2b42e:	454b      	cmp	r3, r9
   2b430:	d005      	beq.n	2b43e <nvs_write+0x6e>
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   2b432:	6862      	ldr	r2, [r4, #4]
   2b434:	9b03      	ldr	r3, [sp, #12]
   2b436:	429a      	cmp	r2, r3
   2b438:	d1ed      	bne.n	2b416 <nvs_write+0x46>
				return rc;
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   2b43a:	b9e5      	cbnz	r5, 2b476 <nvs_write+0xa6>
   2b43c:	e05b      	b.n	2b4f6 <nvs_write+0x126>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   2b43e:	a904      	add	r1, sp, #16
   2b440:	4620      	mov	r0, r4
   2b442:	f01e fe8d 	bl	4a160 <nvs_ate_valid>
   2b446:	2800      	cmp	r0, #0
   2b448:	d0f3      	beq.n	2b432 <nvs_write+0x62>
		rd_addr += wlk_ate.offset;
   2b44a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			if (wlk_ate.len == 0U) {
   2b44e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
   2b452:	b175      	cbz	r5, 2b472 <nvs_write+0xa2>
		} else if (len == wlk_ate.len) {
   2b454:	429d      	cmp	r5, r3
   2b456:	d10e      	bne.n	2b476 <nvs_write+0xa6>
		rd_addr &= ADDR_SECT_MASK;
   2b458:	ea4f 411b 	mov.w	r1, fp, lsr #16
   2b45c:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   2b45e:	4401      	add	r1, r0
   2b460:	462b      	mov	r3, r5
   2b462:	4642      	mov	r2, r8
   2b464:	4620      	mov	r0, r4
   2b466:	f01e fdf4 	bl	4a052 <nvs_flash_block_cmp>
			if (rc <= 0) {
   2b46a:	2800      	cmp	r0, #0
   2b46c:	dc03      	bgt.n	2b476 <nvs_write+0xa6>
   2b46e:	4606      	mov	r6, r0
   2b470:	e041      	b.n	2b4f6 <nvs_write+0x126>
			if (wlk_ate.len == 0U) {
   2b472:	2b00      	cmp	r3, #0
   2b474:	d03f      	beq.n	2b4f6 <nvs_write+0x126>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   2b476:	2f00      	cmp	r7, #0
   2b478:	d141      	bne.n	2b4fe <nvs_write+0x12e>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   2b47a:	f104 0314 	add.w	r3, r4, #20
   2b47e:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   2b480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b488:	f104 0014 	add.w	r0, r4, #20
   2b48c:	f01c fd02 	bl	47e94 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   2b490:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 2b56c <nvs_write+0x19c>

	gc_count = 0;
	while (1) {
		if (gc_count == fs->sector_count) {
   2b494:	89e3      	ldrh	r3, [r4, #14]
   2b496:	429e      	cmp	r6, r3
   2b498:	d05f      	beq.n	2b55a <nvs_write+0x18a>
			 */
			rc = -ENOSPC;
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   2b49a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   2b49e:	18f9      	adds	r1, r7, r3
   2b4a0:	428a      	cmp	r2, r1
   2b4a2:	d32f      	bcc.n	2b504 <nvs_write+0x134>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2b4a4:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
   2b4a8:	a806      	add	r0, sp, #24
	entry.part = 0xff;
   2b4aa:	23ff      	movs	r3, #255	; 0xff
   2b4ac:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
   2b4b0:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
   2b4b4:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&entry);
   2b4b8:	f01e fe34 	bl	4a124 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2b4bc:	68a1      	ldr	r1, [r4, #8]
   2b4be:	462b      	mov	r3, r5
   2b4c0:	4642      	mov	r2, r8
   2b4c2:	4620      	mov	r0, r4
   2b4c4:	f01e fece 	bl	4a264 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   2b4c8:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2b4ca:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
   2b4cc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2b4ce:	f01e fe3d 	bl	4a14c <nvs_al_size.isra.0>
   2b4d2:	68a2      	ldr	r2, [r4, #8]
   2b4d4:	4402      	add	r2, r0
   2b4d6:	60a2      	str	r2, [r4, #8]
	if (rc) {
   2b4d8:	f1ba 0f00 	cmp.w	sl, #0
   2b4dc:	d107      	bne.n	2b4ee <nvs_write+0x11e>
	rc = nvs_flash_ate_wrt(fs, &entry);
   2b4de:	a906      	add	r1, sp, #24
   2b4e0:	4620      	mov	r0, r4
   2b4e2:	f01e fef9 	bl	4a2d8 <nvs_flash_ate_wrt>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
   2b4e6:	2800      	cmp	r0, #0
   2b4e8:	bf14      	ite	ne
   2b4ea:	4682      	movne	sl, r0
   2b4ec:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
   2b4ee:	9801      	ldr	r0, [sp, #4]
   2b4f0:	f01c fd48 	bl	47f84 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
   2b4f4:	4656      	mov	r6, sl
}
   2b4f6:	4630      	mov	r0, r6
   2b4f8:	b009      	add	sp, #36	; 0x24
   2b4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		required_space = data_size + ate_size;
   2b4fe:	4457      	add	r7, sl
   2b500:	b2bf      	uxth	r7, r7
   2b502:	e7ba      	b.n	2b47a <nvs_write+0xaa>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b504:	2108      	movs	r1, #8
   2b506:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2b508:	f01e fe20 	bl	4a14c <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   2b50c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b510:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
   2b514:	2300      	movs	r3, #0
   2b516:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   2b51a:	1813      	adds	r3, r2, r0
   2b51c:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   2b520:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   2b522:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   2b526:	441a      	add	r2, r3
   2b528:	1a10      	subs	r0, r2, r0
   2b52a:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   2b52c:	a806      	add	r0, sp, #24
   2b52e:	f01e fdf9 	bl	4a124 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   2b532:	a906      	add	r1, sp, #24
   2b534:	4620      	mov	r0, r4
   2b536:	f01e fecf 	bl	4a2d8 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   2b53a:	89e0      	ldrh	r0, [r4, #14]
   2b53c:	1d21      	adds	r1, r4, #4
   2b53e:	f01e fdfa 	bl	4a136 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   2b542:	6863      	ldr	r3, [r4, #4]
   2b544:	ea03 030b 	and.w	r3, r3, fp
   2b548:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   2b54a:	4620      	mov	r0, r4
   2b54c:	f01e feea 	bl	4a324 <nvs_gc>
		if (rc) {
   2b550:	4682      	mov	sl, r0
   2b552:	2800      	cmp	r0, #0
   2b554:	d1cb      	bne.n	2b4ee <nvs_write+0x11e>
		gc_count++;
   2b556:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
   2b558:	e79c      	b.n	2b494 <nvs_write+0xc4>
			rc = -ENOSPC;
   2b55a:	f06f 0a1b 	mvn.w	sl, #27
   2b55e:	e7c6      	b.n	2b4ee <nvs_write+0x11e>
		return -EACCES;
   2b560:	f06f 060c 	mvn.w	r6, #12
   2b564:	e7c7      	b.n	2b4f6 <nvs_write+0x126>
		return -EINVAL;
   2b566:	f06f 0615 	mvn.w	r6, #21
   2b56a:	e7c4      	b.n	2b4f6 <nvs_write+0x126>
   2b56c:	ffff0000 	.word	0xffff0000

0002b570 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2b570:	4b0c      	ldr	r3, [pc, #48]	; (2b5a4 <class_handler+0x34>)
{
   2b572:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2b574:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b576:	4e0c      	ldr	r6, [pc, #48]	; (2b5a8 <class_handler+0x38>)
   2b578:	4b0c      	ldr	r3, [pc, #48]	; (2b5ac <class_handler+0x3c>)
   2b57a:	42b3      	cmp	r3, r6
   2b57c:	d303      	bcc.n	2b586 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
   2b57e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b582:	bcf0      	pop	{r4, r5, r6, r7}
   2b584:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
   2b586:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2b588:	42bd      	cmp	r5, r7
   2b58a:	d309      	bcc.n	2b5a0 <class_handler+0x30>
		if (iface->class_handler &&
   2b58c:	691c      	ldr	r4, [r3, #16]
   2b58e:	b13c      	cbz	r4, 2b5a0 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   2b590:	f895 c002 	ldrb.w	ip, [r5, #2]
   2b594:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
   2b596:	45ac      	cmp	ip, r5
   2b598:	d102      	bne.n	2b5a0 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
   2b59a:	4623      	mov	r3, r4
}
   2b59c:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
   2b59e:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b5a0:	3324      	adds	r3, #36	; 0x24
   2b5a2:	e7ea      	b.n	2b57a <class_handler+0xa>
   2b5a4:	20004324 	.word	0x20004324
   2b5a8:	2000150c 	.word	0x2000150c
   2b5ac:	200014e8 	.word	0x200014e8

0002b5b0 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   2b5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b5b4:	4c13      	ldr	r4, [pc, #76]	; (2b604 <custom_handler+0x54>)
   2b5b6:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2b608 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2b5ba:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2b60c <custom_handler+0x5c>
{
   2b5be:	4605      	mov	r5, r0
   2b5c0:	460e      	mov	r6, r1
   2b5c2:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b5c4:	4544      	cmp	r4, r8
   2b5c6:	d303      	bcc.n	2b5d0 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
   2b5c8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
   2b5d0:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2b5d2:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   2b5d6:	429a      	cmp	r2, r3
   2b5d8:	d312      	bcc.n	2b600 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
   2b5da:	69a3      	ldr	r3, [r4, #24]
   2b5dc:	b183      	cbz	r3, 2b600 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   2b5de:	7890      	ldrb	r0, [r2, #2]
   2b5e0:	7929      	ldrb	r1, [r5, #4]
   2b5e2:	4288      	cmp	r0, r1
   2b5e4:	d105      	bne.n	2b5f2 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
   2b5e6:	463a      	mov	r2, r7
   2b5e8:	4631      	mov	r1, r6
   2b5ea:	4628      	mov	r0, r5
}
   2b5ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
   2b5f0:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
   2b5f2:	7952      	ldrb	r2, [r2, #5]
   2b5f4:	2a01      	cmp	r2, #1
   2b5f6:	d103      	bne.n	2b600 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
   2b5f8:	463a      	mov	r2, r7
   2b5fa:	4631      	mov	r1, r6
   2b5fc:	4628      	mov	r0, r5
   2b5fe:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b600:	3424      	adds	r4, #36	; 0x24
   2b602:	e7df      	b.n	2b5c4 <custom_handler+0x14>
   2b604:	200014e8 	.word	0x200014e8
   2b608:	2000150c 	.word	0x2000150c
   2b60c:	20004324 	.word	0x20004324

0002b610 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   2b610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b614:	4c0b      	ldr	r4, [pc, #44]	; (2b644 <vendor_handler+0x34>)
   2b616:	f8df 8030 	ldr.w	r8, [pc, #48]	; 2b648 <vendor_handler+0x38>
{
   2b61a:	4605      	mov	r5, r0
   2b61c:	460e      	mov	r6, r1
   2b61e:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b620:	4544      	cmp	r4, r8
   2b622:	d302      	bcc.n	2b62a <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
   2b624:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b628:	e009      	b.n	2b63e <vendor_handler+0x2e>
		if (iface->vendor_handler) {
   2b62a:	6963      	ldr	r3, [r4, #20]
   2b62c:	b90b      	cbnz	r3, 2b632 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b62e:	3424      	adds	r4, #36	; 0x24
   2b630:	e7f6      	b.n	2b620 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
   2b632:	463a      	mov	r2, r7
   2b634:	4631      	mov	r1, r6
   2b636:	4628      	mov	r0, r5
   2b638:	4798      	blx	r3
   2b63a:	2800      	cmp	r0, #0
   2b63c:	d1f7      	bne.n	2b62e <vendor_handler+0x1e>
}
   2b63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b642:	bf00      	nop
   2b644:	200014e8 	.word	0x200014e8
   2b648:	2000150c 	.word	0x2000150c

0002b64c <set_endpoint>:
{
   2b64c:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   2b64e:	7883      	ldrb	r3, [r0, #2]
   2b650:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   2b654:	7903      	ldrb	r3, [r0, #4]
   2b656:	7942      	ldrb	r2, [r0, #5]
   2b658:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b65c:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   2b660:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
   2b662:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   2b664:	f003 0303 	and.w	r3, r3, #3
   2b668:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
   2b66c:	f018 fe46 	bl	442fc <usb_dc_ep_configure>
	if (ret == -EALREADY) {
   2b670:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2b674:	d004      	beq.n	2b680 <set_endpoint+0x34>
	} else if (ret) {
   2b676:	b118      	cbz	r0, 2b680 <set_endpoint+0x34>
		return false;
   2b678:	2000      	movs	r0, #0
}
   2b67a:	b003      	add	sp, #12
   2b67c:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
   2b680:	f89d 0000 	ldrb.w	r0, [sp]
   2b684:	f018 fec0 	bl	44408 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
   2b688:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2b68c:	d001      	beq.n	2b692 <set_endpoint+0x46>
	} else if (ret) {
   2b68e:	2800      	cmp	r0, #0
   2b690:	d1f2      	bne.n	2b678 <set_endpoint+0x2c>
	usb_dev.configured = true;
   2b692:	4b02      	ldr	r3, [pc, #8]	; (2b69c <set_endpoint+0x50>)
   2b694:	2001      	movs	r0, #1
   2b696:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
   2b69a:	e7ee      	b.n	2b67a <set_endpoint+0x2e>
   2b69c:	20004324 	.word	0x20004324

0002b6a0 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
   2b6a0:	4802      	ldr	r0, [pc, #8]	; (2b6ac <usb_reset_alt_setting+0xc>)
   2b6a2:	2208      	movs	r2, #8
   2b6a4:	2100      	movs	r1, #0
   2b6a6:	f020 bae2 	b.w	4bc6e <memset>
   2b6aa:	bf00      	nop
   2b6ac:	200043df 	.word	0x200043df

0002b6b0 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
   2b6b0:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b6b2:	4b0b      	ldr	r3, [pc, #44]	; (2b6e0 <is_ep_valid.part.0+0x30>)
   2b6b4:	4c0b      	ldr	r4, [pc, #44]	; (2b6e4 <is_ep_valid.part.0+0x34>)
   2b6b6:	42a3      	cmp	r3, r4
   2b6b8:	d301      	bcc.n	2b6be <is_ep_valid.part.0+0xe>
	return false;
   2b6ba:	2000      	movs	r0, #0
}
   2b6bc:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
   2b6be:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2b6c0:	7f1e      	ldrb	r6, [r3, #28]
   2b6c2:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
   2b6c4:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2b6c6:	b2d5      	uxtb	r5, r2
   2b6c8:	42ae      	cmp	r6, r5
   2b6ca:	d801      	bhi.n	2b6d0 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b6cc:	3324      	adds	r3, #36	; 0x24
   2b6ce:	e7f2      	b.n	2b6b6 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
   2b6d0:	3201      	adds	r2, #1
   2b6d2:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
   2b6d6:	4285      	cmp	r5, r0
   2b6d8:	d1f5      	bne.n	2b6c6 <is_ep_valid.part.0+0x16>
		return true;
   2b6da:	2001      	movs	r0, #1
   2b6dc:	e7ee      	b.n	2b6bc <is_ep_valid.part.0+0xc>
   2b6de:	bf00      	nop
   2b6e0:	200014e8 	.word	0x200014e8
   2b6e4:	2000150c 	.word	0x2000150c

0002b6e8 <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
   2b6e8:	4809      	ldr	r0, [pc, #36]	; (2b710 <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
   2b6ea:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
   2b6ec:	7803      	ldrb	r3, [r0, #0]
   2b6ee:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
   2b6f2:	330a      	adds	r3, #10
   2b6f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
   2b6f8:	b13b      	cbz	r3, 2b70a <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
   2b6fa:	f100 0208 	add.w	r2, r0, #8
   2b6fe:	f100 0110 	add.w	r1, r0, #16
   2b702:	4798      	blx	r3
   2b704:	43c0      	mvns	r0, r0
   2b706:	0fc0      	lsrs	r0, r0, #31
}
   2b708:	bd08      	pop	{r3, pc}
		return false;
   2b70a:	4618      	mov	r0, r3
   2b70c:	e7fc      	b.n	2b708 <usb_handle_request.constprop.0+0x20>
   2b70e:	bf00      	nop
   2b710:	20004324 	.word	0x20004324

0002b714 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
   2b714:	2804      	cmp	r0, #4
{
   2b716:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b71a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 2b7a8 <forward_status_cb+0x94>
   2b71e:	4604      	mov	r4, r0
   2b720:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
   2b722:	d113      	bne.n	2b74c <forward_status_cb+0x38>
		usb_reset_alt_setting();
   2b724:	f7ff ffbc 	bl	2b6a0 <usb_reset_alt_setting>
		if (usb_dev.configured) {
   2b728:	4b20      	ldr	r3, [pc, #128]	; (2b7ac <forward_status_cb+0x98>)
   2b72a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   2b72e:	b1ab      	cbz	r3, 2b75c <forward_status_cb+0x48>
			usb_cancel_transfers();
   2b730:	f000 fcfe 	bl	2c130 <usb_cancel_transfers>
   2b734:	4d1e      	ldr	r5, [pc, #120]	; (2b7b0 <forward_status_cb+0x9c>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b736:	4545      	cmp	r5, r8
   2b738:	d226      	bcs.n	2b788 <forward_status_cb+0x74>
		ep_data = cfg_data->endpoint;
   2b73a:	f8d5 9020 	ldr.w	r9, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2b73e:	2700      	movs	r7, #0
   2b740:	7f2a      	ldrb	r2, [r5, #28]
   2b742:	b2fb      	uxtb	r3, r7
   2b744:	429a      	cmp	r2, r3
   2b746:	d817      	bhi.n	2b778 <forward_status_cb+0x64>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b748:	3524      	adds	r5, #36	; 0x24
   2b74a:	e7f4      	b.n	2b736 <forward_status_cb+0x22>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
   2b74c:	2805      	cmp	r0, #5
   2b74e:	d110      	bne.n	2b772 <forward_status_cb+0x5e>
		if (usb_dev.configured) {
   2b750:	4b16      	ldr	r3, [pc, #88]	; (2b7ac <forward_status_cb+0x98>)
   2b752:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   2b756:	b10b      	cbz	r3, 2b75c <forward_status_cb+0x48>
			usb_cancel_transfers();
   2b758:	f000 fcea 	bl	2c130 <usb_cancel_transfers>
   2b75c:	4d14      	ldr	r5, [pc, #80]	; (2b7b0 <forward_status_cb+0x9c>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b75e:	4545      	cmp	r5, r8
   2b760:	d317      	bcc.n	2b792 <forward_status_cb+0x7e>
	if (usb_dev.user_status_callback) {
   2b762:	4b12      	ldr	r3, [pc, #72]	; (2b7ac <forward_status_cb+0x98>)
   2b764:	6a1b      	ldr	r3, [r3, #32]
   2b766:	b1e3      	cbz	r3, 2b7a2 <forward_status_cb+0x8e>
		usb_dev.user_status_callback(status, param);
   2b768:	4631      	mov	r1, r6
   2b76a:	4620      	mov	r0, r4
}
   2b76c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
   2b770:	4718      	bx	r3
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
   2b772:	2801      	cmp	r0, #1
   2b774:	d1f2      	bne.n	2b75c <forward_status_cb+0x48>
   2b776:	e7d7      	b.n	2b728 <forward_status_cb+0x14>
	return usb_dc_ep_disable(ep_data->ep_addr);
   2b778:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
			if (ret < 0) {
   2b77c:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
   2b77e:	7918      	ldrb	r0, [r3, #4]
   2b780:	f018 fe6c 	bl	4445c <usb_dc_ep_disable>
			if (ret < 0) {
   2b784:	2800      	cmp	r0, #0
   2b786:	dadb      	bge.n	2b740 <forward_status_cb+0x2c>
				usb_dev.configured = false;
   2b788:	4b08      	ldr	r3, [pc, #32]	; (2b7ac <forward_status_cb+0x98>)
   2b78a:	2200      	movs	r2, #0
   2b78c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   2b790:	e7e4      	b.n	2b75c <forward_status_cb+0x48>
		if (cfg_data->cb_usb_status) {
   2b792:	68eb      	ldr	r3, [r5, #12]
   2b794:	b11b      	cbz	r3, 2b79e <forward_status_cb+0x8a>
			cfg_data->cb_usb_status(cfg_data, status, param);
   2b796:	4632      	mov	r2, r6
   2b798:	4621      	mov	r1, r4
   2b79a:	4628      	mov	r0, r5
   2b79c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b79e:	3524      	adds	r5, #36	; 0x24
   2b7a0:	e7dd      	b.n	2b75e <forward_status_cb+0x4a>
}
   2b7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b7a6:	bf00      	nop
   2b7a8:	2000150c 	.word	0x2000150c
   2b7ac:	20004324 	.word	0x20004324
   2b7b0:	200014e8 	.word	0x200014e8

0002b7b4 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   2b7b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
   2b7b6:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
   2b7b8:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   2b7ba:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
   2b7bc:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
   2b7c0:	d007      	beq.n	2b7d2 <usb_halt_endpoint_req.isra.0+0x1e>
   2b7c2:	4620      	mov	r0, r4
   2b7c4:	f7ff ff74 	bl	2b6b0 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   2b7c8:	b178      	cbz	r0, 2b7ea <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
   2b7ca:	4b0d      	ldr	r3, [pc, #52]	; (2b800 <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   2b7cc:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
   2b7d0:	b158      	cbz	r0, 2b7ea <usb_halt_endpoint_req.isra.0+0x36>
		if (halt) {
   2b7d2:	4e0b      	ldr	r6, [pc, #44]	; (2b800 <usb_halt_endpoint_req.isra.0+0x4c>)
			usb_dc_ep_set_stall(ep);
   2b7d4:	4620      	mov	r0, r4
		if (halt) {
   2b7d6:	b155      	cbz	r5, 2b7ee <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
   2b7d8:	f018 fdb2 	bl	44340 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
   2b7dc:	69f3      	ldr	r3, [r6, #28]
   2b7de:	b11b      	cbz	r3, 2b7e8 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
   2b7e0:	f10d 0107 	add.w	r1, sp, #7
   2b7e4:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   2b7e6:	4798      	blx	r3
		return true;
   2b7e8:	2001      	movs	r0, #1
}
   2b7ea:	b002      	add	sp, #8
   2b7ec:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
   2b7ee:	f018 fdcf 	bl	44390 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
   2b7f2:	69f3      	ldr	r3, [r6, #28]
   2b7f4:	2b00      	cmp	r3, #0
   2b7f6:	d0f7      	beq.n	2b7e8 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   2b7f8:	f10d 0107 	add.w	r1, sp, #7
   2b7fc:	2009      	movs	r0, #9
   2b7fe:	e7f2      	b.n	2b7e6 <usb_halt_endpoint_req.isra.0+0x32>
   2b800:	20004324 	.word	0x20004324

0002b804 <usb_handle_standard_request>:
{
   2b804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
   2b808:	4ea4      	ldr	r6, [pc, #656]	; (2ba9c <usb_handle_standard_request+0x298>)
   2b80a:	69b3      	ldr	r3, [r6, #24]
{
   2b80c:	4604      	mov	r4, r0
   2b80e:	460f      	mov	r7, r1
   2b810:	4615      	mov	r5, r2
	if (usb_dev.custom_req_handler &&
   2b812:	b9fb      	cbnz	r3, 2b854 <usb_handle_standard_request+0x50>
	switch (setup->RequestType.recipient) {
   2b814:	7823      	ldrb	r3, [r4, #0]
   2b816:	f003 031f 	and.w	r3, r3, #31
   2b81a:	2b01      	cmp	r3, #1
   2b81c:	f000 809d 	beq.w	2b95a <usb_handle_standard_request+0x156>
   2b820:	2b02      	cmp	r3, #2
   2b822:	f000 8107 	beq.w	2ba34 <usb_handle_standard_request+0x230>
   2b826:	bb33      	cbnz	r3, 2b876 <usb_handle_standard_request+0x72>
	if (usb_reqtype_is_to_host(setup)) {
   2b828:	f994 0000 	ldrsb.w	r0, [r4]
	uint8_t *data = *data_buf;
   2b82c:	682a      	ldr	r2, [r5, #0]
		switch (setup->bRequest) {
   2b82e:	7861      	ldrb	r1, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   2b830:	2800      	cmp	r0, #0
   2b832:	da34      	bge.n	2b89e <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
   2b834:	2906      	cmp	r1, #6
   2b836:	d012      	beq.n	2b85e <usb_handle_standard_request+0x5a>
   2b838:	2908      	cmp	r1, #8
   2b83a:	d02b      	beq.n	2b894 <usb_handle_standard_request+0x90>
   2b83c:	b9d9      	cbnz	r1, 2b876 <usb_handle_standard_request+0x72>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   2b83e:	2301      	movs	r3, #1
   2b840:	7013      	strb	r3, [r2, #0]
	data[1] = 0U;
   2b842:	7051      	strb	r1, [r2, #1]
		data[0] |= (usb_dev.remote_wakeup ?
   2b844:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
   2b848:	005b      	lsls	r3, r3, #1
   2b84a:	f043 0301 	orr.w	r3, r3, #1
   2b84e:	7013      	strb	r3, [r2, #0]
		*len = 2;
   2b850:	2302      	movs	r3, #2
   2b852:	e12c      	b.n	2baae <usb_handle_standard_request+0x2aa>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
   2b854:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
   2b856:	2800      	cmp	r0, #0
   2b858:	d1dc      	bne.n	2b814 <usb_handle_standard_request+0x10>
		return 0;
   2b85a:	2000      	movs	r0, #0
   2b85c:	e00d      	b.n	2b87a <usb_handle_standard_request+0x76>
			return usb_get_descriptor(setup, len, data_buf);
   2b85e:	8862      	ldrh	r2, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   2b860:	0a10      	lsrs	r0, r2, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   2b862:	1f01      	subs	r1, r0, #4
   2b864:	2901      	cmp	r1, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   2b866:	4684      	mov	ip, r0
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   2b868:	d905      	bls.n	2b876 <usb_handle_standard_request+0x72>
   2b86a:	2807      	cmp	r0, #7
   2b86c:	d803      	bhi.n	2b876 <usb_handle_standard_request+0x72>
	p = (uint8_t *)usb_dev.descriptors;
   2b86e:	6a71      	ldr	r1, [r6, #36]	; 0x24
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
   2b870:	b2d2      	uxtb	r2, r2
	while (p[DESC_bLength] != 0U) {
   2b872:	780c      	ldrb	r4, [r1, #0]
   2b874:	b91c      	cbnz	r4, 2b87e <usb_handle_standard_request+0x7a>
			rc = -EINVAL;
   2b876:	f06f 0015 	mvn.w	r0, #21
}
   2b87a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
   2b87e:	784e      	ldrb	r6, [r1, #1]
   2b880:	4566      	cmp	r6, ip
   2b882:	d103      	bne.n	2b88c <usb_handle_standard_request+0x88>
			if (cur_index == index) {
   2b884:	429a      	cmp	r2, r3
   2b886:	f000 810d 	beq.w	2baa4 <usb_handle_standard_request+0x2a0>
			cur_index++;
   2b88a:	3301      	adds	r3, #1
		p += p[DESC_bLength];
   2b88c:	4421      	add	r1, r4
   2b88e:	e7f0      	b.n	2b872 <usb_handle_standard_request+0x6e>
			*len = p[DESC_bLength];
   2b890:	780b      	ldrb	r3, [r1, #0]
   2b892:	e10c      	b.n	2baae <usb_handle_standard_request+0x2aa>
			data[0] = usb_dev.configuration;
   2b894:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   2b898:	7013      	strb	r3, [r2, #0]
				*len = 1;
   2b89a:	2301      	movs	r3, #1
   2b89c:	e107      	b.n	2baae <usb_handle_standard_request+0x2aa>
		switch (setup->bRequest) {
   2b89e:	3901      	subs	r1, #1
   2b8a0:	2908      	cmp	r1, #8
   2b8a2:	d8e8      	bhi.n	2b876 <usb_handle_standard_request+0x72>
   2b8a4:	a301      	add	r3, pc, #4	; (adr r3, 2b8ac <usb_handle_standard_request+0xa8>)
   2b8a6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   2b8aa:	bf00      	nop
   2b8ac:	0002b945 	.word	0x0002b945
   2b8b0:	0002b877 	.word	0x0002b877
   2b8b4:	0002b953 	.word	0x0002b953
   2b8b8:	0002b877 	.word	0x0002b877
   2b8bc:	0002b8d1 	.word	0x0002b8d1
   2b8c0:	0002b877 	.word	0x0002b877
   2b8c4:	0002b877 	.word	0x0002b877
   2b8c8:	0002b877 	.word	0x0002b877
   2b8cc:	0002b8dd 	.word	0x0002b8dd
			return !usb_dc_set_address(setup->wValue);
   2b8d0:	78a0      	ldrb	r0, [r4, #2]
   2b8d2:	f018 fd01 	bl	442d8 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
   2b8d6:	2800      	cmp	r0, #0
   2b8d8:	d0bf      	beq.n	2b85a <usb_handle_standard_request+0x56>
   2b8da:	e7cc      	b.n	2b876 <usb_handle_standard_request+0x72>
	if (setup->wValue == 0U) {
   2b8dc:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2b8de:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
   2b8e0:	bb63      	cbnz	r3, 2b93c <usb_handle_standard_request+0x138>
		usb_reset_alt_setting();
   2b8e2:	f7ff fedd 	bl	2b6a0 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   2b8e6:	8863      	ldrh	r3, [r4, #2]
   2b8e8:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
   2b8ec:	69f3      	ldr	r3, [r6, #28]
   2b8ee:	2b00      	cmp	r3, #0
   2b8f0:	d0b3      	beq.n	2b85a <usb_handle_standard_request+0x56>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   2b8f2:	496b      	ldr	r1, [pc, #428]	; (2baa0 <usb_handle_standard_request+0x29c>)
   2b8f4:	2003      	movs	r0, #3
   2b8f6:	4798      	blx	r3
   2b8f8:	e7af      	b.n	2b85a <usb_handle_standard_request+0x56>
		switch (p[DESC_bDescriptorType]) {
   2b8fa:	786b      	ldrb	r3, [r5, #1]
   2b8fc:	2b04      	cmp	r3, #4
   2b8fe:	d010      	beq.n	2b922 <usb_handle_standard_request+0x11e>
   2b900:	2b05      	cmp	r3, #5
   2b902:	d011      	beq.n	2b928 <usb_handle_standard_request+0x124>
   2b904:	2b02      	cmp	r3, #2
   2b906:	d104      	bne.n	2b912 <usb_handle_standard_request+0x10e>
			cur_config = p[CONF_DESC_bConfigurationValue];
   2b908:	796f      	ldrb	r7, [r5, #5]
			if (cur_config == setup->wValue) {
   2b90a:	8863      	ldrh	r3, [r4, #2]
				found = true;
   2b90c:	42bb      	cmp	r3, r7
   2b90e:	bf08      	it	eq
   2b910:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
   2b912:	782b      	ldrb	r3, [r5, #0]
   2b914:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
   2b916:	782b      	ldrb	r3, [r5, #0]
   2b918:	2b00      	cmp	r3, #0
   2b91a:	d1ee      	bne.n	2b8fa <usb_handle_standard_request+0xf6>
	if (found) {
   2b91c:	2800      	cmp	r0, #0
   2b91e:	d0aa      	beq.n	2b876 <usb_handle_standard_request+0x72>
   2b920:	e7df      	b.n	2b8e2 <usb_handle_standard_request+0xde>
			cur_alt_setting =
   2b922:	f895 8003 	ldrb.w	r8, [r5, #3]
			break;
   2b926:	e7f4      	b.n	2b912 <usb_handle_standard_request+0x10e>
			if ((cur_config != setup->wValue) ||
   2b928:	8863      	ldrh	r3, [r4, #2]
   2b92a:	42bb      	cmp	r3, r7
   2b92c:	d1f1      	bne.n	2b912 <usb_handle_standard_request+0x10e>
   2b92e:	f1b8 0f00 	cmp.w	r8, #0
   2b932:	d1ee      	bne.n	2b912 <usb_handle_standard_request+0x10e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
   2b934:	4628      	mov	r0, r5
   2b936:	f7ff fe89 	bl	2b64c <set_endpoint>
			break;
   2b93a:	e7ea      	b.n	2b912 <usb_handle_standard_request+0x10e>
	uint8_t cur_config = 0xFF;
   2b93c:	27ff      	movs	r7, #255	; 0xff
	bool found = false;
   2b93e:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
   2b940:	46b8      	mov	r8, r7
   2b942:	e7e8      	b.n	2b916 <usb_handle_standard_request+0x112>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   2b944:	8863      	ldrh	r3, [r4, #2]
   2b946:	2b01      	cmp	r3, #1
   2b948:	d195      	bne.n	2b876 <usb_handle_standard_request+0x72>
					usb_dev.remote_wakeup = false;
   2b94a:	2300      	movs	r3, #0
					usb_dev.remote_wakeup = true;
   2b94c:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
   2b950:	e783      	b.n	2b85a <usb_handle_standard_request+0x56>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   2b952:	8863      	ldrh	r3, [r4, #2]
   2b954:	2b01      	cmp	r3, #1
   2b956:	d18e      	bne.n	2b876 <usb_handle_standard_request+0x72>
   2b958:	e7f8      	b.n	2b94c <usb_handle_standard_request+0x148>
	if (!is_device_configured() ||
   2b95a:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   2b95e:	f8d5 c000 	ldr.w	ip, [r5]
   2b962:	2b00      	cmp	r3, #0
   2b964:	d087      	beq.n	2b876 <usb_handle_standard_request+0x72>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2b966:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   2b968:	88a3      	ldrh	r3, [r4, #4]
   2b96a:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2b96e:	462a      	mov	r2, r5
	while (p[DESC_bLength] != 0U) {
   2b970:	7810      	ldrb	r0, [r2, #0]
   2b972:	2800      	cmp	r0, #0
   2b974:	f43f af7f 	beq.w	2b876 <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
   2b978:	7851      	ldrb	r1, [r2, #1]
   2b97a:	2902      	cmp	r1, #2
   2b97c:	d104      	bne.n	2b988 <usb_handle_standard_request+0x184>
			if (interface < cfg_descr->bNumInterfaces) {
   2b97e:	f892 8004 	ldrb.w	r8, [r2, #4]
   2b982:	45f0      	cmp	r8, lr
   2b984:	f200 8095 	bhi.w	2bab2 <usb_handle_standard_request+0x2ae>
		p += p[DESC_bLength];
   2b988:	4402      	add	r2, r0
   2b98a:	e7f1      	b.n	2b970 <usb_handle_standard_request+0x16c>
			data[0] = 0U;
   2b98c:	f88c 2000 	strb.w	r2, [ip]
			data[1] = 0U;
   2b990:	f88c 2001 	strb.w	r2, [ip, #1]
			*len = 2;
   2b994:	6039      	str	r1, [r7, #0]
			return true;
   2b996:	e760      	b.n	2b85a <usb_handle_standard_request+0x56>
		p += p[DESC_bLength];
   2b998:	4415      	add	r5, r2
   2b99a:	e096      	b.n	2baca <usb_handle_standard_request+0x2c6>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   2b99c:	2a0b      	cmp	r2, #11
   2b99e:	f47f af6a 	bne.w	2b876 <usb_handle_standard_request+0x72>
	bool ret = false;
   2b9a2:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
   2b9a4:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   2b9a8:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
   2b9aa:	46ba      	mov	sl, r7
   2b9ac:	e006      	b.n	2b9bc <usb_handle_standard_request+0x1b8>
		switch (p[DESC_bDescriptorType]) {
   2b9ae:	786b      	ldrb	r3, [r5, #1]
   2b9b0:	2b04      	cmp	r3, #4
   2b9b2:	d00f      	beq.n	2b9d4 <usb_handle_standard_request+0x1d0>
   2b9b4:	2b05      	cmp	r3, #5
   2b9b6:	d021      	beq.n	2b9fc <usb_handle_standard_request+0x1f8>
		p += p[DESC_bLength];
   2b9b8:	782b      	ldrb	r3, [r5, #0]
   2b9ba:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
   2b9bc:	782b      	ldrb	r3, [r5, #0]
   2b9be:	2b00      	cmp	r3, #0
   2b9c0:	d1f5      	bne.n	2b9ae <usb_handle_standard_request+0x1aa>
	if (usb_dev.status_callback) {
   2b9c2:	69f3      	ldr	r3, [r6, #28]
   2b9c4:	b113      	cbz	r3, 2b9cc <usb_handle_standard_request+0x1c8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
   2b9c6:	4651      	mov	r1, sl
   2b9c8:	2007      	movs	r0, #7
   2b9ca:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
   2b9cc:	2f00      	cmp	r7, #0
   2b9ce:	f47f af44 	bne.w	2b85a <usb_handle_standard_request+0x56>
   2b9d2:	e750      	b.n	2b876 <usb_handle_standard_request+0x72>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   2b9d4:	f895 8002 	ldrb.w	r8, [r5, #2]
			if (cur_iface == setup->wIndex &&
   2b9d8:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
   2b9da:	f895 9003 	ldrb.w	r9, [r5, #3]
			if (cur_iface == setup->wIndex &&
   2b9de:	4598      	cmp	r8, r3
   2b9e0:	d1ea      	bne.n	2b9b8 <usb_handle_standard_request+0x1b4>
			    cur_alt_setting == setup->wValue) {
   2b9e2:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
   2b9e4:	4599      	cmp	r9, r3
   2b9e6:	d1e7      	bne.n	2b9b8 <usb_handle_standard_request+0x1b4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   2b9e8:	f1b8 0f07 	cmp.w	r8, #7
   2b9ec:	d81f      	bhi.n	2ba2e <usb_handle_standard_request+0x22a>
		usb_dev.alt_setting[iface] = alt_setting;
   2b9ee:	eb06 0308 	add.w	r3, r6, r8
		return true;
   2b9f2:	46aa      	mov	sl, r5
				ret = usb_set_alt_setting(setup->wIndex,
   2b9f4:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
	return true;
   2b9f8:	2701      	movs	r7, #1
   2b9fa:	e7dd      	b.n	2b9b8 <usb_handle_standard_request+0x1b4>
			if (cur_iface == setup->wIndex) {
   2b9fc:	88a3      	ldrh	r3, [r4, #4]
   2b9fe:	4543      	cmp	r3, r8
   2ba00:	d1da      	bne.n	2b9b8 <usb_handle_standard_request+0x1b4>
	if (cur_alt_setting != alt_setting) {
   2ba02:	78a3      	ldrb	r3, [r4, #2]
   2ba04:	454b      	cmp	r3, r9
   2ba06:	d00d      	beq.n	2ba24 <usb_handle_standard_request+0x220>
		ret = reset_endpoint(ep_desc);
   2ba08:	78af      	ldrb	r7, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
   2ba0a:	4638      	mov	r0, r7
   2ba0c:	f000 fb72 	bl	2c0f4 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
   2ba10:	4638      	mov	r0, r7
   2ba12:	f018 fd23 	bl	4445c <usb_dc_ep_disable>
	if (ret == -EALREADY) {
   2ba16:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2ba1a:	d0ed      	beq.n	2b9f8 <usb_handle_standard_request+0x1f4>
	} else if (ret) {
   2ba1c:	fab0 f780 	clz	r7, r0
   2ba20:	097f      	lsrs	r7, r7, #5
   2ba22:	e7c9      	b.n	2b9b8 <usb_handle_standard_request+0x1b4>
		ret = set_endpoint(ep_desc);
   2ba24:	4628      	mov	r0, r5
   2ba26:	f7ff fe11 	bl	2b64c <set_endpoint>
   2ba2a:	4607      	mov	r7, r0
   2ba2c:	e7c4      	b.n	2b9b8 <usb_handle_standard_request+0x1b4>
   2ba2e:	46aa      	mov	sl, r5
	return false;
   2ba30:	2700      	movs	r7, #0
   2ba32:	e7c1      	b.n	2b9b8 <usb_handle_standard_request+0x1b4>
	if (usb_reqtype_is_to_host(setup)) {
   2ba34:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
   2ba38:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   2ba3a:	2a00      	cmp	r2, #0
   2ba3c:	da18      	bge.n	2ba70 <usb_handle_standard_request+0x26c>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   2ba3e:	2b00      	cmp	r3, #0
   2ba40:	f47f af19 	bne.w	2b876 <usb_handle_standard_request+0x72>
	uint8_t ep = setup->wIndex;
   2ba44:	7924      	ldrb	r4, [r4, #4]
   2ba46:	682d      	ldr	r5, [r5, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
   2ba48:	0663      	lsls	r3, r4, #25
   2ba4a:	d00a      	beq.n	2ba62 <usb_handle_standard_request+0x25e>
   2ba4c:	4620      	mov	r0, r4
   2ba4e:	f7ff fe2f 	bl	2b6b0 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   2ba52:	2800      	cmp	r0, #0
   2ba54:	f43f af0f 	beq.w	2b876 <usb_handle_standard_request+0x72>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   2ba58:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   2ba5c:	2b00      	cmp	r3, #0
   2ba5e:	f43f af0a 	beq.w	2b876 <usb_handle_standard_request+0x72>
		usb_dc_ep_is_stalled(ep, &data[0]);
   2ba62:	4629      	mov	r1, r5
   2ba64:	4620      	mov	r0, r4
   2ba66:	f018 fcb3 	bl	443d0 <usb_dc_ep_is_stalled>
		data[1] = 0U;
   2ba6a:	2300      	movs	r3, #0
   2ba6c:	706b      	strb	r3, [r5, #1]
   2ba6e:	e6ef      	b.n	2b850 <usb_handle_standard_request+0x4c>
		switch (setup->bRequest) {
   2ba70:	2b01      	cmp	r3, #1
   2ba72:	d008      	beq.n	2ba86 <usb_handle_standard_request+0x282>
   2ba74:	2b03      	cmp	r3, #3
   2ba76:	f47f aefe 	bne.w	2b876 <usb_handle_standard_request+0x72>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   2ba7a:	8863      	ldrh	r3, [r4, #2]
   2ba7c:	2b00      	cmp	r3, #0
   2ba7e:	f47f aefa 	bne.w	2b876 <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
   2ba82:	2101      	movs	r1, #1
   2ba84:	e003      	b.n	2ba8e <usb_handle_standard_request+0x28a>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   2ba86:	8861      	ldrh	r1, [r4, #2]
   2ba88:	2900      	cmp	r1, #0
   2ba8a:	f47f aef4 	bne.w	2b876 <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
   2ba8e:	88a0      	ldrh	r0, [r4, #4]
   2ba90:	f7ff fe90 	bl	2b7b4 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
   2ba94:	2800      	cmp	r0, #0
   2ba96:	f47f aee0 	bne.w	2b85a <usb_handle_standard_request+0x56>
   2ba9a:	e6ec      	b.n	2b876 <usb_handle_standard_request+0x72>
   2ba9c:	20004324 	.word	0x20004324
   2baa0:	200043de 	.word	0x200043de
		if (type == USB_DESC_CONFIGURATION) {
   2baa4:	2802      	cmp	r0, #2
		*data = p;
   2baa6:	6029      	str	r1, [r5, #0]
		if (type == USB_DESC_CONFIGURATION) {
   2baa8:	f47f aef2 	bne.w	2b890 <usb_handle_standard_request+0x8c>
			*len = (p[CONF_DESC_wTotalLength]) |
   2baac:	884b      	ldrh	r3, [r1, #2]
		*len = 2;
   2baae:	603b      	str	r3, [r7, #0]
		return true;
   2bab0:	e6d3      	b.n	2b85a <usb_handle_standard_request+0x56>
	if (usb_reqtype_is_to_host(setup)) {
   2bab2:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
   2bab6:	7862      	ldrb	r2, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   2bab8:	2800      	cmp	r0, #0
   2baba:	f6bf af6f 	bge.w	2b99c <usb_handle_standard_request+0x198>
		switch (setup->bRequest) {
   2babe:	2a00      	cmp	r2, #0
   2bac0:	f43f af64 	beq.w	2b98c <usb_handle_standard_request+0x188>
   2bac4:	2a0a      	cmp	r2, #10
   2bac6:	f47f aed6 	bne.w	2b876 <usb_handle_standard_request+0x72>
	while (p[DESC_bLength] != 0U) {
   2baca:	782a      	ldrb	r2, [r5, #0]
   2bacc:	2a00      	cmp	r2, #0
   2bace:	f43f aed2 	beq.w	2b876 <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
   2bad2:	7869      	ldrb	r1, [r5, #1]
   2bad4:	2904      	cmp	r1, #4
   2bad6:	f47f af5f 	bne.w	2b998 <usb_handle_standard_request+0x194>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   2bada:	78a9      	ldrb	r1, [r5, #2]
			if (cur_iface == setup->wIndex) {
   2badc:	428b      	cmp	r3, r1
   2bade:	f47f af5b 	bne.w	2b998 <usb_handle_standard_request+0x194>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   2bae2:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
   2bae4:	bf96      	itet	ls
   2bae6:	199b      	addls	r3, r3, r6
	return 0;
   2bae8:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
   2baea:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
   2baee:	f88c 3000 	strb.w	r3, [ip]
   2baf2:	e6d2      	b.n	2b89a <usb_handle_standard_request+0x96>

0002baf4 <usb_data_to_host>:
{
   2baf4:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
   2baf6:	4c13      	ldr	r4, [pc, #76]	; (2bb44 <usb_data_to_host+0x50>)
   2baf8:	7d23      	ldrb	r3, [r4, #20]
   2bafa:	b9cb      	cbnz	r3, 2bb30 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
   2bafc:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   2bafe:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
   2bb00:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   2bb02:	ab01      	add	r3, sp, #4
   2bb04:	2080      	movs	r0, #128	; 0x80
   2bb06:	f01e fd45 	bl	4a594 <usb_write>
		usb_dev.data_buf += chunk;
   2bb0a:	9a01      	ldr	r2, [sp, #4]
   2bb0c:	68a3      	ldr	r3, [r4, #8]
   2bb0e:	4413      	add	r3, r2
   2bb10:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   2bb12:	68e3      	ldr	r3, [r4, #12]
   2bb14:	1a9b      	subs	r3, r3, r2
   2bb16:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
   2bb18:	b943      	cbnz	r3, 2bb2c <usb_data_to_host+0x38>
   2bb1a:	b13a      	cbz	r2, 2bb2c <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
   2bb1c:	6923      	ldr	r3, [r4, #16]
   2bb1e:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
   2bb20:	429a      	cmp	r2, r3
   2bb22:	dd03      	ble.n	2bb2c <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
   2bb24:	069b      	lsls	r3, r3, #26
   2bb26:	d101      	bne.n	2bb2c <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
   2bb28:	2301      	movs	r3, #1
   2bb2a:	7523      	strb	r3, [r4, #20]
}
   2bb2c:	b002      	add	sp, #8
   2bb2e:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
   2bb30:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   2bb32:	461a      	mov	r2, r3
   2bb34:	4619      	mov	r1, r3
   2bb36:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
   2bb38:	7523      	strb	r3, [r4, #20]
}
   2bb3a:	b002      	add	sp, #8
   2bb3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   2bb40:	f018 bcb2 	b.w	444a8 <usb_dc_ep_write>
   2bb44:	20004324 	.word	0x20004324

0002bb48 <usb_handle_control_transfer>:
{
   2bb48:	b530      	push	{r4, r5, lr}
   2bb4a:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
   2bb4c:	2300      	movs	r3, #0
{
   2bb4e:	4602      	mov	r2, r0
   2bb50:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
   2bb52:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
   2bb54:	2800      	cmp	r0, #0
   2bb56:	d158      	bne.n	2bc0a <usb_handle_control_transfer+0xc2>
   2bb58:	2900      	cmp	r1, #0
   2bb5a:	d135      	bne.n	2bbc8 <usb_handle_control_transfer+0x80>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
   2bb5c:	2208      	movs	r2, #8
   2bb5e:	460b      	mov	r3, r1
   2bb60:	eb0d 0102 	add.w	r1, sp, r2
   2bb64:	f024 f8fb 	bl	4fd5e <usb_dc_ep_read>
   2bb68:	2800      	cmp	r0, #0
   2bb6a:	da04      	bge.n	2bb76 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   2bb6c:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   2bb6e:	f018 fbe7 	bl	44340 <usb_dc_ep_set_stall>
}
   2bb72:	b005      	add	sp, #20
   2bb74:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
   2bb76:	4c2a      	ldr	r4, [pc, #168]	; (2bc20 <usb_handle_control_transfer+0xd8>)
   2bb78:	9a02      	ldr	r2, [sp, #8]
   2bb7a:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   2bb7c:	9a03      	ldr	r2, [sp, #12]
   2bb7e:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
   2bb80:	f104 0238 	add.w	r2, r4, #56	; 0x38
   2bb84:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
   2bb86:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
   2bb8a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
   2bb8e:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
   2bb90:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
   2bb92:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
   2bb96:	db0a      	blt.n	2bbae <usb_handle_control_transfer+0x66>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
   2bb98:	2b80      	cmp	r3, #128	; 0x80
   2bb9a:	d904      	bls.n	2bba6 <usb_handle_control_transfer+0x5e>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   2bb9c:	2080      	movs	r0, #128	; 0x80
   2bb9e:	f018 fbcf 	bl	44340 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   2bba2:	2000      	movs	r0, #0
   2bba4:	e7e3      	b.n	2bb6e <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
   2bba6:	b113      	cbz	r3, 2bbae <usb_handle_control_transfer+0x66>
				usb_dev.data_buf_residue = setup->wLength;
   2bba8:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
   2bbac:	e7e1      	b.n	2bb72 <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
   2bbae:	f7ff fd9b 	bl	2b6e8 <usb_handle_request.constprop.0>
   2bbb2:	2800      	cmp	r0, #0
   2bbb4:	d0da      	beq.n	2bb6c <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
   2bbb6:	88e2      	ldrh	r2, [r4, #6]
   2bbb8:	6923      	ldr	r3, [r4, #16]
   2bbba:	429a      	cmp	r2, r3
   2bbbc:	bfd4      	ite	le
   2bbbe:	60e2      	strle	r2, [r4, #12]
   2bbc0:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
   2bbc2:	f7ff ff97 	bl	2baf4 <usb_data_to_host>
   2bbc6:	e7d4      	b.n	2bb72 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
   2bbc8:	4c15      	ldr	r4, [pc, #84]	; (2bc20 <usb_handle_control_transfer+0xd8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2bbca:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
   2bbce:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2bbd0:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
   2bbd2:	dc04      	bgt.n	2bbde <usb_handle_control_transfer+0x96>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2bbd4:	f024 f8c3 	bl	4fd5e <usb_dc_ep_read>
   2bbd8:	2800      	cmp	r0, #0
   2bbda:	daca      	bge.n	2bb72 <usb_handle_control_transfer+0x2a>
   2bbdc:	e7c6      	b.n	2bb6c <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2bbde:	462a      	mov	r2, r5
   2bbe0:	f024 f8bd 	bl	4fd5e <usb_dc_ep_read>
   2bbe4:	2800      	cmp	r0, #0
   2bbe6:	dbd9      	blt.n	2bb9c <usb_handle_control_transfer+0x54>
		usb_dev.data_buf += chunk;
   2bbe8:	9a01      	ldr	r2, [sp, #4]
   2bbea:	68a3      	ldr	r3, [r4, #8]
   2bbec:	4413      	add	r3, r2
   2bbee:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   2bbf0:	68e3      	ldr	r3, [r4, #12]
   2bbf2:	1a9b      	subs	r3, r3, r2
   2bbf4:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
   2bbf6:	2b00      	cmp	r3, #0
   2bbf8:	d1bb      	bne.n	2bb72 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
   2bbfa:	f104 0338 	add.w	r3, r4, #56	; 0x38
   2bbfe:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
   2bc00:	f7ff fd72 	bl	2b6e8 <usb_handle_request.constprop.0>
   2bc04:	2800      	cmp	r0, #0
   2bc06:	d1dc      	bne.n	2bbc2 <usb_handle_control_transfer+0x7a>
   2bc08:	e7b0      	b.n	2bb6c <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
   2bc0a:	2880      	cmp	r0, #128	; 0x80
   2bc0c:	d1b1      	bne.n	2bb72 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
   2bc0e:	4b04      	ldr	r3, [pc, #16]	; (2bc20 <usb_handle_control_transfer+0xd8>)
   2bc10:	68da      	ldr	r2, [r3, #12]
   2bc12:	2a00      	cmp	r2, #0
   2bc14:	d1d5      	bne.n	2bbc2 <usb_handle_control_transfer+0x7a>
   2bc16:	7d1b      	ldrb	r3, [r3, #20]
   2bc18:	2b00      	cmp	r3, #0
   2bc1a:	d1d2      	bne.n	2bbc2 <usb_handle_control_transfer+0x7a>
   2bc1c:	e7a9      	b.n	2bb72 <usb_handle_control_transfer+0x2a>
   2bc1e:	bf00      	nop
   2bc20:	20004324 	.word	0x20004324

0002bc24 <usb_wakeup_request>:
	return usb_dev.remote_wakeup;
   2bc24:	4b04      	ldr	r3, [pc, #16]	; (2bc38 <usb_wakeup_request+0x14>)
		if (usb_get_remote_wakeup_status()) {
   2bc26:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
   2bc2a:	b10b      	cbz	r3, 2bc30 <usb_wakeup_request+0xc>
			return usb_dc_wakeup_request();
   2bc2c:	f024 b8a6 	b.w	4fd7c <usb_dc_wakeup_request>
}
   2bc30:	f06f 000c 	mvn.w	r0, #12
   2bc34:	4770      	bx	lr
   2bc36:	bf00      	nop
   2bc38:	20004324 	.word	0x20004324

0002bc3c <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
   2bc3c:	4b05      	ldr	r3, [pc, #20]	; (2bc54 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
   2bc3e:	4a06      	ldr	r2, [pc, #24]	; (2bc58 <usb_set_config+0x1c>)
   2bc40:	629a      	str	r2, [r3, #40]	; 0x28
   2bc42:	4a06      	ldr	r2, [pc, #24]	; (2bc5c <usb_set_config+0x20>)
   2bc44:	62da      	str	r2, [r3, #44]	; 0x2c
   2bc46:	4a06      	ldr	r2, [pc, #24]	; (2bc60 <usb_set_config+0x24>)
   2bc48:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
   2bc4a:	4a06      	ldr	r2, [pc, #24]	; (2bc64 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
   2bc4c:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
   2bc4e:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
   2bc50:	2000      	movs	r0, #0
   2bc52:	4770      	bx	lr
   2bc54:	20004324 	.word	0x20004324
   2bc58:	0002b805 	.word	0x0002b805
   2bc5c:	0002b571 	.word	0x0002b571
   2bc60:	0002b611 	.word	0x0002b611
   2bc64:	0002b5b1 	.word	0x0002b5b1

0002bc68 <usb_device_init>:
 */
static int usb_device_init(const struct device *dev)
{
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
   2bc68:	4b08      	ldr	r3, [pc, #32]	; (2bc8c <usb_device_init+0x24>)
{
   2bc6a:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
   2bc6c:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
   2bc70:	b934      	cbnz	r4, 2bc80 <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
   2bc72:	f000 f8cb 	bl	2be0c <usb_get_device_descriptor>
	if (!device_descriptor) {
   2bc76:	b130      	cbz	r0, 2bc86 <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
   2bc78:	f7ff ffe0 	bl	2bc3c <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
   2bc7c:	4620      	mov	r0, r4
}
   2bc7e:	bd10      	pop	{r4, pc}
		return -EALREADY;
   2bc80:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2bc84:	e7fb      	b.n	2bc7e <usb_device_init+0x16>
		return -1;
   2bc86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bc8a:	e7f8      	b.n	2bc7e <usb_device_init+0x16>
   2bc8c:	20004324 	.word	0x20004324

0002bc90 <usb_enable>:
{
   2bc90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2bc94:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
   2bc96:	4d35      	ldr	r5, [pc, #212]	; (2bd6c <usb_enable+0xdc>)
	return z_impl_k_mutex_lock(mutex, timeout);
   2bc98:	4835      	ldr	r0, [pc, #212]	; (2bd70 <usb_enable+0xe0>)
   2bc9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bc9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bca2:	f01c f8f7 	bl	47e94 <z_impl_k_mutex_lock>
   2bca6:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
   2bcaa:	2e00      	cmp	r6, #0
   2bcac:	d15b      	bne.n	2bd66 <usb_enable+0xd6>
	usb_dev.status_callback = cb;
   2bcae:	4831      	ldr	r0, [pc, #196]	; (2bd74 <usb_enable+0xe4>)
	usb_dev.user_status_callback = status_cb;
   2bcb0:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
   2bcb2:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
   2bcb4:	f018 fd12 	bl	446dc <usb_dc_set_status_callback>
	ret = usb_dc_attach();
   2bcb8:	f018 fad0 	bl	4425c <usb_dc_attach>
	if (ret < 0) {
   2bcbc:	1e04      	subs	r4, r0, #0
   2bcbe:	db36      	blt.n	2bd2e <usb_enable+0x9e>
	ret = usb_transfer_init();
   2bcc0:	f000 fa5a 	bl	2c178 <usb_transfer_init>
	if (ret < 0) {
   2bcc4:	1e04      	subs	r4, r0, #0
   2bcc6:	db32      	blt.n	2bd2e <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   2bcc8:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
   2bcca:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   2bccc:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
   2bcd0:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
   2bcd4:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   2bcd8:	f018 fb10 	bl	442fc <usb_dc_ep_configure>
	if (ret < 0) {
   2bcdc:	1e04      	subs	r4, r0, #0
   2bcde:	db26      	blt.n	2bd2e <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   2bce0:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
   2bce2:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   2bce4:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   2bce8:	f018 fb08 	bl	442fc <usb_dc_ep_configure>
	if (ret < 0) {
   2bcec:	1e04      	subs	r4, r0, #0
   2bcee:	db1e      	blt.n	2bd2e <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
   2bcf0:	4921      	ldr	r1, [pc, #132]	; (2bd78 <usb_enable+0xe8>)
   2bcf2:	4630      	mov	r0, r6
   2bcf4:	f018 fcde 	bl	446b4 <usb_dc_ep_set_callback>
	if (ret < 0) {
   2bcf8:	1e04      	subs	r4, r0, #0
   2bcfa:	db18      	blt.n	2bd2e <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
   2bcfc:	491e      	ldr	r1, [pc, #120]	; (2bd78 <usb_enable+0xe8>)
   2bcfe:	4638      	mov	r0, r7
   2bd00:	f018 fcd8 	bl	446b4 <usb_dc_ep_set_callback>
	if (ret < 0) {
   2bd04:	1e04      	subs	r4, r0, #0
   2bd06:	db12      	blt.n	2bd2e <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2bd08:	4c1c      	ldr	r4, [pc, #112]	; (2bd7c <usb_enable+0xec>)
   2bd0a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2bd80 <usb_enable+0xf0>
   2bd0e:	4544      	cmp	r4, r8
   2bd10:	d314      	bcc.n	2bd3c <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
   2bd12:	2000      	movs	r0, #0
   2bd14:	f018 fb78 	bl	44408 <usb_dc_ep_enable>
	if (ret < 0) {
   2bd18:	1e04      	subs	r4, r0, #0
   2bd1a:	db08      	blt.n	2bd2e <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   2bd1c:	2080      	movs	r0, #128	; 0x80
   2bd1e:	f018 fb73 	bl	44408 <usb_dc_ep_enable>
	if (ret < 0) {
   2bd22:	1e04      	subs	r4, r0, #0
   2bd24:	db03      	blt.n	2bd2e <usb_enable+0x9e>
	usb_dev.enabled = true;
   2bd26:	2301      	movs	r3, #1
   2bd28:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
   2bd2c:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   2bd2e:	4810      	ldr	r0, [pc, #64]	; (2bd70 <usb_enable+0xe0>)
   2bd30:	f01c f928 	bl	47f84 <z_impl_k_mutex_unlock>
}
   2bd34:	4620      	mov	r0, r4
   2bd36:	b002      	add	sp, #8
   2bd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
   2bd3c:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2bd3e:	2600      	movs	r6, #0
   2bd40:	7f22      	ldrb	r2, [r4, #28]
   2bd42:	b2f3      	uxtb	r3, r6
   2bd44:	429a      	cmp	r2, r3
   2bd46:	d801      	bhi.n	2bd4c <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2bd48:	3424      	adds	r4, #36	; 0x24
   2bd4a:	e7e0      	b.n	2bd0e <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
   2bd4c:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   2bd50:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   2bd54:	7910      	ldrb	r0, [r2, #4]
   2bd56:	f018 fcad 	bl	446b4 <usb_dc_ep_set_callback>
   2bd5a:	3601      	adds	r6, #1
   2bd5c:	2800      	cmp	r0, #0
   2bd5e:	d0ef      	beq.n	2bd40 <usb_enable+0xb0>
   2bd60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2bd64:	e7e3      	b.n	2bd2e <usb_enable+0x9e>
		ret = -EALREADY;
   2bd66:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2bd6a:	e7e0      	b.n	2bd2e <usb_enable+0x9e>
   2bd6c:	20004324 	.word	0x20004324
   2bd70:	20001158 	.word	0x20001158
   2bd74:	0002b715 	.word	0x0002b715
   2bd78:	0002bb49 	.word	0x0002bb49
   2bd7c:	200014e8 	.word	0x200014e8
   2bd80:	2000150c 	.word	0x2000150c

0002bd84 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
   2bd84:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
   2bd86:	4b1f      	ldr	r3, [pc, #124]	; (2be04 <usb_update_sn_string_descriptor+0x80>)
{
   2bd88:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
   2bd8a:	aa05      	add	r2, sp, #20
   2bd8c:	f103 0510 	add.w	r5, r3, #16
   2bd90:	6818      	ldr	r0, [r3, #0]
   2bd92:	6859      	ldr	r1, [r3, #4]
   2bd94:	4614      	mov	r4, r2
   2bd96:	c403      	stmia	r4!, {r0, r1}
   2bd98:	3308      	adds	r3, #8
   2bd9a:	42ab      	cmp	r3, r5
   2bd9c:	4622      	mov	r2, r4
   2bd9e:	d1f7      	bne.n	2bd90 <usb_update_sn_string_descriptor+0xc>
   2bda0:	781b      	ldrb	r3, [r3, #0]
   2bda2:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
   2bda4:	2210      	movs	r2, #16
   2bda6:	2100      	movs	r1, #0
   2bda8:	a801      	add	r0, sp, #4
   2bdaa:	f01f ff60 	bl	4bc6e <memset>
	memset(sn, 0, sizeof(sn));
   2bdae:	2212      	movs	r2, #18
   2bdb0:	2100      	movs	r1, #0
   2bdb2:	4815      	ldr	r0, [pc, #84]	; (2be08 <usb_update_sn_string_descriptor+0x84>)
   2bdb4:	f01f ff5b 	bl	4bc6e <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
   2bdb8:	2110      	movs	r1, #16
   2bdba:	a801      	add	r0, sp, #4
   2bdbc:	f024 f8e2 	bl	4ff84 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
   2bdc0:	2800      	cmp	r0, #0
   2bdc2:	dd1b      	ble.n	2bdfc <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
   2bdc4:	2808      	cmp	r0, #8
   2bdc6:	bfb8      	it	lt
   2bdc8:	2008      	movlt	r0, #8
   2bdca:	3809      	subs	r0, #9
   2bdcc:	ab01      	add	r3, sp, #4
   2bdce:	490e      	ldr	r1, [pc, #56]	; (2be08 <usb_update_sn_string_descriptor+0x84>)
   2bdd0:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
   2bdd2:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   2bdd4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   2bdd8:	ac0a      	add	r4, sp, #40	; 0x28
   2bdda:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   2bdde:	f003 030f 	and.w	r3, r3, #15
   2bde2:	3328      	adds	r3, #40	; 0x28
   2bde4:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
   2bde6:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   2bde8:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   2bdec:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   2bdf0:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
   2bdf2:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   2bdf4:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
   2bdf6:	f101 0102 	add.w	r1, r1, #2
   2bdfa:	d1eb      	bne.n	2bdd4 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
   2bdfc:	4802      	ldr	r0, [pc, #8]	; (2be08 <usb_update_sn_string_descriptor+0x84>)
   2bdfe:	b00b      	add	sp, #44	; 0x2c
   2be00:	bd30      	pop	{r4, r5, pc}
   2be02:	bf00      	nop
   2be04:	00053f2d 	.word	0x00053f2d
   2be08:	20007359 	.word	0x20007359

0002be0c <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
   2be0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2be10:	4c64      	ldr	r4, [pc, #400]	; (2bfa4 <usb_get_device_descriptor+0x198>)
   2be12:	b085      	sub	sp, #20
	uint8_t str_descr_idx = 0U;
   2be14:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
   2be16:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
   2be1a:	46b1      	mov	r9, r6
	struct usb_cfg_data *cfg_data = NULL;
   2be1c:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
   2be1e:	46b2      	mov	sl, r6
	while (head->bLength != 0U) {
   2be20:	7823      	ldrb	r3, [r4, #0]
   2be22:	b92b      	cbnz	r3, 2be30 <usb_get_device_descriptor+0x24>
	if ((head + 1) != __usb_descriptor_end) {
   2be24:	4b60      	ldr	r3, [pc, #384]	; (2bfa8 <usb_get_device_descriptor+0x19c>)
   2be26:	3402      	adds	r4, #2
   2be28:	429c      	cmp	r4, r3
   2be2a:	d1f3      	bne.n	2be14 <usb_get_device_descriptor+0x8>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
   2be2c:	485d      	ldr	r0, [pc, #372]	; (2bfa4 <usb_get_device_descriptor+0x198>)
   2be2e:	e01c      	b.n	2be6a <usb_get_device_descriptor+0x5e>
		switch (head->bDescriptorType) {
   2be30:	7863      	ldrb	r3, [r4, #1]
   2be32:	2b05      	cmp	r3, #5
   2be34:	d805      	bhi.n	2be42 <usb_get_device_descriptor+0x36>
   2be36:	e8df f003 	tbb	[pc, r3]
   2be3a:	047b      	.short	0x047b
   2be3c:	25077b03 	.word	0x25077b03
   2be40:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
   2be42:	7823      	ldrb	r3, [r4, #0]
   2be44:	441c      	add	r4, r3
   2be46:	e7eb      	b.n	2be20 <usb_get_device_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
   2be48:	78e3      	ldrb	r3, [r4, #3]
   2be4a:	2b00      	cmp	r3, #0
   2be4c:	d1f9      	bne.n	2be42 <usb_get_device_descriptor+0x36>
			if (if_descr->bInterfaceNumber == 0U) {
   2be4e:	78a3      	ldrb	r3, [r4, #2]
   2be50:	b173      	cbz	r3, 2be70 <usb_get_device_descriptor+0x64>
			numof_ifaces++;
   2be52:	f109 0901 	add.w	r9, r9, #1
   2be56:	fa5f f989 	uxtb.w	r9, r9
			break;
   2be5a:	e7f2      	b.n	2be42 <usb_get_device_descriptor+0x36>
		if (cfg_data->interface_descriptor == iface) {
   2be5c:	686a      	ldr	r2, [r5, #4]
   2be5e:	4294      	cmp	r4, r2
   2be60:	d009      	beq.n	2be76 <usb_get_device_descriptor+0x6a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2be62:	3524      	adds	r5, #36	; 0x24
   2be64:	429d      	cmp	r5, r3
   2be66:	d3f9      	bcc.n	2be5c <usb_get_device_descriptor+0x50>
		return NULL;
   2be68:	2000      	movs	r0, #0
}
   2be6a:	b005      	add	sp, #20
   2be6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2be70:	4d4e      	ldr	r5, [pc, #312]	; (2bfac <usb_get_device_descriptor+0x1a0>)
   2be72:	4b4f      	ldr	r3, [pc, #316]	; (2bfb0 <usb_get_device_descriptor+0x1a4>)
   2be74:	e7f6      	b.n	2be64 <usb_get_device_descriptor+0x58>
				if (cfg_data->interface_config) {
   2be76:	68ab      	ldr	r3, [r5, #8]
   2be78:	2b00      	cmp	r3, #0
   2be7a:	d0ea      	beq.n	2be52 <usb_get_device_descriptor+0x46>
					cfg_data->interface_config(head,
   2be7c:	4649      	mov	r1, r9
   2be7e:	4620      	mov	r0, r4
   2be80:	4798      	blx	r3
   2be82:	e7e6      	b.n	2be52 <usb_get_device_descriptor+0x46>
			if (!cfg_data) {
   2be84:	2d00      	cmp	r5, #0
   2be86:	d0ef      	beq.n	2be68 <usb_get_device_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   2be88:	2300      	movs	r3, #0
   2be8a:	2101      	movs	r1, #1
   2be8c:	7f2a      	ldrb	r2, [r5, #28]
   2be8e:	4293      	cmp	r3, r2
   2be90:	d2ea      	bcs.n	2be68 <usb_get_device_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   2be92:	6a2a      	ldr	r2, [r5, #32]
   2be94:	78a7      	ldrb	r7, [r4, #2]
   2be96:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2be9a:	7910      	ldrb	r0, [r2, #4]
   2be9c:	4287      	cmp	r7, r0
   2be9e:	d001      	beq.n	2bea4 <usb_get_device_descriptor+0x98>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   2bea0:	3301      	adds	r3, #1
   2bea2:	e7f3      	b.n	2be8c <usb_get_device_descriptor+0x80>
   2bea4:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   2bea6:	78e0      	ldrb	r0, [r4, #3]
   2bea8:	f000 0003 	and.w	r0, r0, #3
   2beac:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   2beb0:	7920      	ldrb	r0, [r4, #4]
   2beb2:	f894 c005 	ldrb.w	ip, [r4, #5]
   2beb6:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
   2beba:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   2bebe:	f994 0002 	ldrsb.w	r0, [r4, #2]
   2bec2:	2800      	cmp	r0, #0
   2bec4:	fa5f f887 	uxtb.w	r8, r7
   2bec8:	da27      	bge.n	2bf1a <usb_get_device_descriptor+0x10e>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   2beca:	f107 0010 	add.w	r0, r7, #16
   2bece:	fa01 f000 	lsl.w	r0, r1, r0
   2bed2:	ea10 0f0b 	tst.w	r0, fp
   2bed6:	d127      	bne.n	2bf28 <usb_get_device_descriptor+0x11c>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   2bed8:	f048 0080 	orr.w	r0, r8, #128	; 0x80
   2bedc:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   2bee0:	a802      	add	r0, sp, #8
   2bee2:	e9cd 3200 	strd	r3, r2, [sp]
   2bee6:	f023 ff22 	bl	4fd2e <usb_dc_ep_check_cap>
   2beea:	e9dd 3200 	ldrd	r3, r2, [sp]
   2beee:	2101      	movs	r1, #1
   2bef0:	b9d0      	cbnz	r0, 2bf28 <usb_get_device_descriptor+0x11c>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   2bef2:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2bef6:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   2bef8:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
   2befc:	bf18      	it	ne
   2befe:	f108 0810 	addne.w	r8, r8, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   2bf02:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1U << (idx + 16U));
   2bf04:	bf18      	it	ne
   2bf06:	fa5f f888 	uxtbne.w	r8, r8
   2bf0a:	460b      	mov	r3, r1
					*requested_ep |= (1U << idx);
   2bf0c:	bf0c      	ite	eq
   2bf0e:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
   2bf10:	fa01 f308 	lslne.w	r3, r1, r8
					*requested_ep |= (1U << idx);
   2bf14:	ea4b 0b03 	orr.w	fp, fp, r3
				return 0;
   2bf18:	e793      	b.n	2be42 <usb_get_device_descriptor+0x36>
				if ((*requested_ep & (1U << (idx)))) {
   2bf1a:	fa01 f007 	lsl.w	r0, r1, r7
   2bf1e:	ea10 0f0b 	tst.w	r0, fp
   2bf22:	d101      	bne.n	2bf28 <usb_get_device_descriptor+0x11c>
   2bf24:	4640      	mov	r0, r8
   2bf26:	e7d9      	b.n	2bedc <usb_get_device_descriptor+0xd0>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   2bf28:	3701      	adds	r7, #1
   2bf2a:	2f10      	cmp	r7, #16
   2bf2c:	d1bb      	bne.n	2bea6 <usb_get_device_descriptor+0x9a>
   2bf2e:	e7b7      	b.n	2bea0 <usb_get_device_descriptor+0x94>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
   2bf30:	2e03      	cmp	r6, #3
   2bf32:	d11d      	bne.n	2bf70 <usb_get_device_descriptor+0x164>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
   2bf34:	f7ff ff26 	bl	2bd84 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
   2bf38:	4607      	mov	r7, r0
   2bf3a:	b168      	cbz	r0, 2bf58 <usb_get_device_descriptor+0x14c>
	runtime_sn_len = strlen(runtime_sn);
   2bf3c:	f01f fe55 	bl	4bbea <strlen>
	if (!runtime_sn_len) {
   2bf40:	4680      	mov	r8, r0
   2bf42:	b148      	cbz	r0, 2bf58 <usb_get_device_descriptor+0x14c>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
   2bf44:	481b      	ldr	r0, [pc, #108]	; (2bfb4 <usb_get_device_descriptor+0x1a8>)
   2bf46:	f01f fe50 	bl	4bbea <strlen>
	if (runtime_sn_len != default_sn_len) {
   2bf4a:	4580      	cmp	r8, r0
   2bf4c:	d104      	bne.n	2bf58 <usb_get_device_descriptor+0x14c>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
   2bf4e:	4642      	mov	r2, r8
   2bf50:	4639      	mov	r1, r7
   2bf52:	1ca0      	adds	r0, r4, #2
   2bf54:	f01f fe80 	bl	4bc58 <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   2bf58:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
   2bf5a:	f06f 0102 	mvn.w	r1, #2
   2bf5e:	18e2      	adds	r2, r4, r3
   2bf60:	1b09      	subs	r1, r1, r4
   2bf62:	eb04 0353 	add.w	r3, r4, r3, lsr #1
   2bf66:	42d1      	cmn	r1, r2
   2bf68:	d513      	bpl.n	2bf92 <usb_get_device_descriptor+0x186>
			str_descr_idx += 1U;
   2bf6a:	3601      	adds	r6, #1
   2bf6c:	b2f6      	uxtb	r6, r6
			break;
   2bf6e:	e768      	b.n	2be42 <usb_get_device_descriptor+0x36>
			if (str_descr_idx) {
   2bf70:	2e00      	cmp	r6, #0
   2bf72:	d1f1      	bne.n	2bf58 <usb_get_device_descriptor+0x14c>
				if (!cfg_descr) {
   2bf74:	f1ba 0f00 	cmp.w	sl, #0
   2bf78:	f43f af76 	beq.w	2be68 <usb_get_device_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
   2bf7c:	eba4 030a 	sub.w	r3, r4, sl
	dst[0] = val;
   2bf80:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
   2bf84:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2bf88:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
   2bf8c:	f88a 9004 	strb.w	r9, [sl, #4]
   2bf90:	e7eb      	b.n	2bf6a <usb_get_device_descriptor+0x15e>
		buf[i] = 0U;
   2bf92:	f04f 0000 	mov.w	r0, #0
   2bf96:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
   2bf9a:	f813 0901 	ldrb.w	r0, [r3], #-1
   2bf9e:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
   2bfa2:	e7e0      	b.n	2bf66 <usb_get_device_descriptor+0x15a>
   2bfa4:	20001454 	.word	0x20001454
   2bfa8:	200014e6 	.word	0x200014e6
   2bfac:	200014e8 	.word	0x200014e8
   2bfb0:	2000150c 	.word	0x2000150c
   2bfb4:	00053f2d 	.word	0x00053f2d

0002bfb8 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
   2bfb8:	b510      	push	{r4, lr}
   2bfba:	4b09      	ldr	r3, [pc, #36]	; (2bfe0 <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2bfbc:	2100      	movs	r1, #0
   2bfbe:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
   2bfc0:	781c      	ldrb	r4, [r3, #0]
   2bfc2:	4284      	cmp	r4, r0
   2bfc4:	d105      	bne.n	2bfd2 <usb_ep_get_transfer+0x1a>
   2bfc6:	685c      	ldr	r4, [r3, #4]
   2bfc8:	b11c      	cbz	r4, 2bfd2 <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
   2bfca:	2348      	movs	r3, #72	; 0x48
   2bfcc:	fb03 2001 	mla	r0, r3, r1, r2
		}
	}

	return NULL;
}
   2bfd0:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2bfd2:	3101      	adds	r1, #1
   2bfd4:	2904      	cmp	r1, #4
   2bfd6:	f103 0348 	add.w	r3, r3, #72	; 0x48
   2bfda:	d1f1      	bne.n	2bfc0 <usb_ep_get_transfer+0x8>
	return NULL;
   2bfdc:	2000      	movs	r0, #0
   2bfde:	e7f7      	b.n	2bfd0 <usb_ep_get_transfer+0x18>
   2bfe0:	200043e8 	.word	0x200043e8

0002bfe4 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
   2bfe4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
   2bfe8:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
   2bfec:	f810 6c34 	ldrb.w	r6, [r0, #-52]
	if (trans->status != -EBUSY) {
   2bff0:	3310      	adds	r3, #16
{
   2bff2:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
   2bff4:	d110      	bne.n	2c018 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
   2bff6:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
   2bff8:	f850 2c28 	ldr.w	r2, [r0, #-40]
	if (trans->flags & USB_TRANS_WRITE) {
   2bffc:	0799      	lsls	r1, r3, #30
   2bffe:	d53c      	bpl.n	2c07a <usb_transfer_work+0x96>
		if (!trans->bsize) {
   2c000:	bb02      	cbnz	r2, 2c044 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
   2c002:	f013 0304 	ands.w	r3, r3, #4
   2c006:	d104      	bne.n	2c012 <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
   2c008:	461a      	mov	r2, r3
   2c00a:	4619      	mov	r1, r3
   2c00c:	4630      	mov	r0, r6
   2c00e:	f01e fac1 	bl	4a594 <usb_write>
			}
			trans->status = 0;
   2c012:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
   2c014:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
   2c018:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2c01c:	3310      	adds	r3, #16
   2c01e:	d00e      	beq.n	2c03e <usb_transfer_work+0x5a>
   2c020:	f854 5c20 	ldr.w	r5, [r4, #-32]
   2c024:	b15d      	cbz	r5, 2c03e <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
   2c026:	f854 7c24 	ldr.w	r7, [r4, #-36]
		void *priv = trans->priv;
   2c02a:	f854 8c1c 	ldr.w	r8, [r4, #-28]

		if (k_is_in_isr()) {
   2c02e:	f024 fc4d 	bl	508cc <k_is_in_isr>
   2c032:	2800      	cmp	r0, #0
   2c034:	d04c      	beq.n	2c0d0 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2c036:	482e      	ldr	r0, [pc, #184]	; (2c0f0 <usb_transfer_work+0x10c>)
   2c038:	4621      	mov	r1, r4
   2c03a:	f024 fdd3 	bl	50be4 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
   2c03e:	b002      	add	sp, #8
   2c040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
   2c044:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   2c048:	ab01      	add	r3, sp, #4
   2c04a:	4630      	mov	r0, r6
   2c04c:	f01e faa2 	bl	4a594 <usb_write>
		if (ret) {
   2c050:	b110      	cbz	r0, 2c058 <usb_transfer_work+0x74>
			trans->status = -EINVAL;
   2c052:	f06f 0315 	mvn.w	r3, #21
   2c056:	e7dd      	b.n	2c014 <usb_transfer_work+0x30>
		trans->buffer += bytes;
   2c058:	9a01      	ldr	r2, [sp, #4]
   2c05a:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2c05e:	4413      	add	r3, r2
   2c060:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   2c064:	f854 3c28 	ldr.w	r3, [r4, #-40]
   2c068:	1a9b      	subs	r3, r3, r2
   2c06a:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   2c06e:	f854 3c24 	ldr.w	r3, [r4, #-36]
   2c072:	4413      	add	r3, r2
   2c074:	f844 3c24 	str.w	r3, [r4, #-36]
   2c078:	e7ce      	b.n	2c018 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
   2c07a:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   2c07e:	ab01      	add	r3, sp, #4
   2c080:	4630      	mov	r0, r6
   2c082:	f018 fa8d 	bl	445a0 <usb_dc_ep_read_wait>
		if (ret) {
   2c086:	2800      	cmp	r0, #0
   2c088:	d1e3      	bne.n	2c052 <usb_transfer_work+0x6e>
		trans->buffer += bytes;
   2c08a:	9d01      	ldr	r5, [sp, #4]
   2c08c:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2c090:	442b      	add	r3, r5
   2c092:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   2c096:	f854 3c28 	ldr.w	r3, [r4, #-40]
   2c09a:	1b5b      	subs	r3, r3, r5
   2c09c:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   2c0a0:	f854 3c24 	ldr.w	r3, [r4, #-36]
   2c0a4:	442b      	add	r3, r5
   2c0a6:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   2c0aa:	2d00      	cmp	r5, #0
   2c0ac:	d0b1      	beq.n	2c012 <usb_transfer_work+0x2e>
   2c0ae:	4630      	mov	r0, r6
   2c0b0:	f018 fb1a 	bl	446e8 <usb_dc_ep_mps>
   2c0b4:	fbb5 f3f0 	udiv	r3, r5, r0
   2c0b8:	fb03 5510 	mls	r5, r3, r0, r5
   2c0bc:	2d00      	cmp	r5, #0
   2c0be:	d1a8      	bne.n	2c012 <usb_transfer_work+0x2e>
   2c0c0:	f854 3c28 	ldr.w	r3, [r4, #-40]
   2c0c4:	2b00      	cmp	r3, #0
   2c0c6:	d0a4      	beq.n	2c012 <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
   2c0c8:	4630      	mov	r0, r6
   2c0ca:	f018 fab1 	bl	44630 <usb_dc_ep_read_continue>
   2c0ce:	e7a3      	b.n	2c018 <usb_transfer_work+0x34>
		trans->cb = NULL;
   2c0d0:	f844 0c20 	str.w	r0, [r4, #-32]
	z_impl_k_sem_give(sem);
   2c0d4:	f1a4 0018 	sub.w	r0, r4, #24
   2c0d8:	f01b ffca 	bl	48070 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
   2c0dc:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2c0e0:	338c      	adds	r3, #140	; 0x8c
   2c0e2:	d0ac      	beq.n	2c03e <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
   2c0e4:	4642      	mov	r2, r8
   2c0e6:	4639      	mov	r1, r7
   2c0e8:	4630      	mov	r0, r6
   2c0ea:	47a8      	blx	r5
   2c0ec:	e7a7      	b.n	2c03e <usb_transfer_work+0x5a>
   2c0ee:	bf00      	nop
   2c0f0:	200040f8 	.word	0x200040f8

0002c0f4 <usb_cancel_transfer>:
	irq_unlock(key);
	return ret;
}

void usb_cancel_transfer(uint8_t ep)
{
   2c0f4:	b510      	push	{r4, lr}
   2c0f6:	f04f 0320 	mov.w	r3, #32
   2c0fa:	f3ef 8411 	mrs	r4, BASEPRI
   2c0fe:	f383 8812 	msr	BASEPRI_MAX, r3
   2c102:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
   2c106:	f7ff ff57 	bl	2bfb8 <usb_ep_get_transfer>
	if (!trans) {
   2c10a:	b150      	cbz	r0, 2c122 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
   2c10c:	6843      	ldr	r3, [r0, #4]
   2c10e:	3310      	adds	r3, #16
   2c110:	d107      	bne.n	2c122 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
   2c112:	f06f 038b 	mvn.w	r3, #139	; 0x8b
   2c116:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2c118:	f100 0134 	add.w	r1, r0, #52	; 0x34
   2c11c:	4803      	ldr	r0, [pc, #12]	; (2c12c <usb_cancel_transfer+0x38>)
   2c11e:	f024 fd61 	bl	50be4 <k_work_submit_to_queue>
	__asm__ volatile(
   2c122:	f384 8811 	msr	BASEPRI, r4
   2c126:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
   2c12a:	bd10      	pop	{r4, pc}
   2c12c:	200040f8 	.word	0x200040f8

0002c130 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
   2c130:	b570      	push	{r4, r5, r6, lr}
   2c132:	4c0f      	ldr	r4, [pc, #60]	; (2c170 <usb_cancel_transfers+0x40>)
   2c134:	2504      	movs	r5, #4
	__asm__ volatile(
   2c136:	f04f 0320 	mov.w	r3, #32
   2c13a:	f3ef 8611 	mrs	r6, BASEPRI
   2c13e:	f383 8812 	msr	BASEPRI_MAX, r3
   2c142:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
   2c146:	6863      	ldr	r3, [r4, #4]
   2c148:	3310      	adds	r3, #16
   2c14a:	d107      	bne.n	2c15c <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
   2c14c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2c150:	4808      	ldr	r0, [pc, #32]	; (2c174 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
   2c152:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2c154:	f104 0134 	add.w	r1, r4, #52	; 0x34
   2c158:	f024 fd44 	bl	50be4 <k_work_submit_to_queue>
	__asm__ volatile(
   2c15c:	f386 8811 	msr	BASEPRI, r6
   2c160:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2c164:	3d01      	subs	r5, #1
   2c166:	f104 0448 	add.w	r4, r4, #72	; 0x48
   2c16a:	d1e4      	bne.n	2c136 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
   2c16c:	bd70      	pop	{r4, r5, r6, pc}
   2c16e:	bf00      	nop
   2c170:	200043e8 	.word	0x200043e8
   2c174:	200040f8 	.word	0x200040f8

0002c178 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
   2c178:	b570      	push	{r4, r5, r6, lr}
   2c17a:	4c0a      	ldr	r4, [pc, #40]	; (2c1a4 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
   2c17c:	4e0a      	ldr	r6, [pc, #40]	; (2c1a8 <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2c17e:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
   2c180:	4631      	mov	r1, r6
   2c182:	4620      	mov	r0, r4
   2c184:	f024 fd15 	bl	50bb2 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2c188:	2201      	movs	r2, #1
   2c18a:	f1a4 0018 	sub.w	r0, r4, #24
   2c18e:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2c190:	3501      	adds	r5, #1
   2c192:	f024 fc8e 	bl	50ab2 <z_impl_k_sem_init>
   2c196:	2d04      	cmp	r5, #4
   2c198:	f104 0448 	add.w	r4, r4, #72	; 0x48
   2c19c:	d1f0      	bne.n	2c180 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
   2c19e:	2000      	movs	r0, #0
   2c1a0:	bd70      	pop	{r4, r5, r6, pc}
   2c1a2:	bf00      	nop
   2c1a4:	2000441c 	.word	0x2000441c
   2c1a8:	0002bfe5 	.word	0x0002bfe5

0002c1ac <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   2c1ac:	4b0c      	ldr	r3, [pc, #48]	; (2c1e0 <flash_area_open+0x34>)
   2c1ae:	681b      	ldr	r3, [r3, #0]
{
   2c1b0:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
   2c1b2:	b193      	cbz	r3, 2c1da <flash_area_open+0x2e>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   2c1b4:	4a0b      	ldr	r2, [pc, #44]	; (2c1e4 <flash_area_open+0x38>)
   2c1b6:	6815      	ldr	r5, [r2, #0]
   2c1b8:	2200      	movs	r2, #0
   2c1ba:	42aa      	cmp	r2, r5
   2c1bc:	db02      	blt.n	2c1c4 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   2c1be:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
   2c1c2:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   2c1c4:	461c      	mov	r4, r3
   2c1c6:	f814 6b10 	ldrb.w	r6, [r4], #16
   2c1ca:	4286      	cmp	r6, r0
   2c1cc:	d002      	beq.n	2c1d4 <flash_area_open+0x28>
	for (int i = 0; i < flash_map_entries; i++) {
   2c1ce:	3201      	adds	r2, #1
   2c1d0:	4623      	mov	r3, r4
   2c1d2:	e7f2      	b.n	2c1ba <flash_area_open+0xe>
	*fap = area;
   2c1d4:	600b      	str	r3, [r1, #0]
	return 0;
   2c1d6:	2000      	movs	r0, #0
   2c1d8:	e7f3      	b.n	2c1c2 <flash_area_open+0x16>
		return -EACCES;
   2c1da:	f06f 000c 	mvn.w	r0, #12
   2c1de:	e7f0      	b.n	2c1c2 <flash_area_open+0x16>
   2c1e0:	2000074c 	.word	0x2000074c
   2c1e4:	00052470 	.word	0x00052470

0002c1e8 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   2c1e8:	b570      	push	{r4, r5, r6, lr}
   2c1ea:	b088      	sub	sp, #32
   2c1ec:	4605      	mov	r5, r0
   2c1ee:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   2c1f0:	b2c0      	uxtb	r0, r0
   2c1f2:	4669      	mov	r1, sp
{
   2c1f4:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   2c1f6:	f7ff ffd9 	bl	2c1ac <flash_area_open>
	if (rc < 0 || fa == NULL) {
   2c1fa:	2800      	cmp	r0, #0
   2c1fc:	db1f      	blt.n	2c23e <flash_area_get_sectors+0x56>
   2c1fe:	9b00      	ldr	r3, [sp, #0]
   2c200:	b1eb      	cbz	r3, 2c23e <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
   2c202:	685a      	ldr	r2, [r3, #4]
   2c204:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
   2c206:	689a      	ldr	r2, [r3, #8]
	cb_data->ret_len = *cnt;
   2c208:	6821      	ldr	r1, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
   2c20a:	68d8      	ldr	r0, [r3, #12]
	cb_data->area_idx = idx;
   2c20c:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   2c20e:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   2c212:	2200      	movs	r2, #0
	cb_data->status = 0;
   2c214:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
   2c218:	9205      	str	r2, [sp, #20]
   2c21a:	f01b fb61 	bl	478e0 <z_impl_device_get_binding>
   2c21e:	4605      	mov	r5, r0
	flash_area_close(fa);
   2c220:	9800      	ldr	r0, [sp, #0]
   2c222:	f01e f9ff 	bl	4a624 <flash_area_close>
	if (flash_dev == NULL) {
   2c226:	b16d      	cbz	r5, 2c244 <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
   2c228:	4628      	mov	r0, r5
   2c22a:	4908      	ldr	r1, [pc, #32]	; (2c24c <flash_area_get_sectors+0x64>)
   2c22c:	aa01      	add	r2, sp, #4
   2c22e:	f023 ff44 	bl	500ba <flash_page_foreach>
	if (cb_data->status == 0) {
   2c232:	9807      	ldr	r0, [sp, #28]
   2c234:	b908      	cbnz	r0, 2c23a <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
   2c236:	9b05      	ldr	r3, [sp, #20]
   2c238:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   2c23a:	b008      	add	sp, #32
   2c23c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2c23e:	f06f 0015 	mvn.w	r0, #21
   2c242:	e7fa      	b.n	2c23a <flash_area_get_sectors+0x52>
		return -ENODEV;
   2c244:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   2c248:	e7f7      	b.n	2c23a <flash_area_get_sectors+0x52>
   2c24a:	bf00      	nop
   2c24c:	0004a627 	.word	0x0004a627

0002c250 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   2c250:	4b10      	ldr	r3, [pc, #64]	; (2c294 <settings_save_one+0x44>)
{
   2c252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   2c256:	681c      	ldr	r4, [r3, #0]
{
   2c258:	4605      	mov	r5, r0
   2c25a:	460e      	mov	r6, r1
   2c25c:	4617      	mov	r7, r2
	if (!cs) {
   2c25e:	b1ac      	cbz	r4, 2c28c <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   2c260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c268:	480b      	ldr	r0, [pc, #44]	; (2c298 <settings_save_one+0x48>)
   2c26a:	f01b fe13 	bl	47e94 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   2c26e:	6863      	ldr	r3, [r4, #4]
   2c270:	4632      	mov	r2, r6
   2c272:	f8d3 8008 	ldr.w	r8, [r3, #8]
   2c276:	4629      	mov	r1, r5
   2c278:	463b      	mov	r3, r7
   2c27a:	4620      	mov	r0, r4
   2c27c:	47c0      	blx	r8
   2c27e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   2c280:	4805      	ldr	r0, [pc, #20]	; (2c298 <settings_save_one+0x48>)
   2c282:	f01b fe7f 	bl	47f84 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   2c286:	4620      	mov	r0, r4
   2c288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   2c28c:	f06f 0401 	mvn.w	r4, #1
   2c290:	e7f9      	b.n	2c286 <settings_save_one+0x36>
   2c292:	bf00      	nop
   2c294:	20004508 	.word	0x20004508
   2c298:	20001144 	.word	0x20001144

0002c29c <settings_src_register>:
	parent->next = child;
   2c29c:	2300      	movs	r3, #0
   2c29e:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   2c2a0:	4b04      	ldr	r3, [pc, #16]	; (2c2b4 <settings_src_register+0x18>)
   2c2a2:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   2c2a4:	b912      	cbnz	r2, 2c2ac <settings_src_register+0x10>
	list->head = node;
   2c2a6:	e9c3 0000 	strd	r0, r0, [r3]
}
   2c2aa:	4770      	bx	lr
	parent->next = child;
   2c2ac:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2c2ae:	6058      	str	r0, [r3, #4]
}
   2c2b0:	4770      	bx	lr
   2c2b2:	bf00      	nop
   2c2b4:	2000450c 	.word	0x2000450c

0002c2b8 <settings_dst_register>:
	settings_save_dst = cs;
   2c2b8:	4b01      	ldr	r3, [pc, #4]	; (2c2c0 <settings_dst_register+0x8>)
   2c2ba:	6018      	str	r0, [r3, #0]
}
   2c2bc:	4770      	bx	lr
   2c2be:	bf00      	nop
   2c2c0:	20004508 	.word	0x20004508

0002c2c4 <settings_load_subtree>:
{
   2c2c4:	b530      	push	{r4, r5, lr}
   2c2c6:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   2c2c8:	2300      	movs	r3, #0
{
   2c2ca:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   2c2cc:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2c2d0:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   2c2d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c2d6:	480c      	ldr	r0, [pc, #48]	; (2c308 <settings_load_subtree+0x44>)
   2c2d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c2dc:	f01b fdda 	bl	47e94 <z_impl_k_mutex_lock>
	return list->head;
   2c2e0:	4b0a      	ldr	r3, [pc, #40]	; (2c30c <settings_load_subtree+0x48>)
   2c2e2:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   2c2e4:	b94c      	cbnz	r4, 2c2fa <settings_load_subtree+0x36>
	rc = settings_commit_subtree(subtree);
   2c2e6:	4628      	mov	r0, r5
   2c2e8:	f000 f8ce 	bl	2c488 <settings_commit_subtree>
   2c2ec:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   2c2ee:	4806      	ldr	r0, [pc, #24]	; (2c308 <settings_load_subtree+0x44>)
   2c2f0:	f01b fe48 	bl	47f84 <z_impl_k_mutex_unlock>
}
   2c2f4:	4620      	mov	r0, r4
   2c2f6:	b005      	add	sp, #20
   2c2f8:	bd30      	pop	{r4, r5, pc}
		cs->cs_itf->csi_load(cs, &arg);
   2c2fa:	6863      	ldr	r3, [r4, #4]
   2c2fc:	4620      	mov	r0, r4
   2c2fe:	681b      	ldr	r3, [r3, #0]
   2c300:	a901      	add	r1, sp, #4
   2c302:	4798      	blx	r3
	return node->next;
   2c304:	6824      	ldr	r4, [r4, #0]
   2c306:	e7ed      	b.n	2c2e4 <settings_load_subtree+0x20>
   2c308:	20001144 	.word	0x20001144
   2c30c:	2000450c 	.word	0x2000450c

0002c310 <settings_load_subtree_direct>:
{
   2c310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   2c312:	e9cd 0101 	strd	r0, r1, [sp, #4]
   2c316:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   2c318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c31c:	480a      	ldr	r0, [pc, #40]	; (2c348 <settings_load_subtree_direct+0x38>)
   2c31e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c322:	f01b fdb7 	bl	47e94 <z_impl_k_mutex_lock>
	return list->head;
   2c326:	4b09      	ldr	r3, [pc, #36]	; (2c34c <settings_load_subtree_direct+0x3c>)
   2c328:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   2c32a:	b92c      	cbnz	r4, 2c338 <settings_load_subtree_direct+0x28>
	return z_impl_k_mutex_unlock(mutex);
   2c32c:	4806      	ldr	r0, [pc, #24]	; (2c348 <settings_load_subtree_direct+0x38>)
   2c32e:	f01b fe29 	bl	47f84 <z_impl_k_mutex_unlock>
}
   2c332:	4620      	mov	r0, r4
   2c334:	b004      	add	sp, #16
   2c336:	bd10      	pop	{r4, pc}
		cs->cs_itf->csi_load(cs, &arg);
   2c338:	6863      	ldr	r3, [r4, #4]
   2c33a:	4620      	mov	r0, r4
   2c33c:	681b      	ldr	r3, [r3, #0]
   2c33e:	a901      	add	r1, sp, #4
   2c340:	4798      	blx	r3
	return node->next;
   2c342:	6824      	ldr	r4, [r4, #0]
   2c344:	e7f1      	b.n	2c32a <settings_load_subtree_direct+0x1a>
   2c346:	bf00      	nop
   2c348:	20001144 	.word	0x20001144
   2c34c:	2000450c 	.word	0x2000450c

0002c350 <settings_store_init>:
	list->head = NULL;
   2c350:	4b02      	ldr	r3, [pc, #8]	; (2c35c <settings_store_init+0xc>)
   2c352:	2200      	movs	r2, #0
	list->tail = NULL;
   2c354:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   2c358:	4770      	bx	lr
   2c35a:	bf00      	nop
   2c35c:	2000450c 	.word	0x2000450c

0002c360 <settings_init>:
	list->head = NULL;
   2c360:	4b02      	ldr	r3, [pc, #8]	; (2c36c <settings_init+0xc>)
   2c362:	2200      	movs	r2, #0
	list->tail = NULL;
   2c364:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   2c368:	f7ff bff2 	b.w	2c350 <settings_store_init>
   2c36c:	20004514 	.word	0x20004514

0002c370 <settings_register>:
}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
int settings_register(struct settings_handler *handler)
{
   2c370:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c372:	4c1b      	ldr	r4, [pc, #108]	; (2c3e0 <settings_register+0x70>)
   2c374:	4e1b      	ldr	r6, [pc, #108]	; (2c3e4 <settings_register+0x74>)
{
   2c376:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c378:	42b4      	cmp	r4, r6
   2c37a:	d312      	bcc.n	2c3a2 <settings_register+0x32>
	return list->head;
   2c37c:	4e1a      	ldr	r6, [pc, #104]	; (2c3e8 <settings_register+0x78>)
	return z_impl_k_mutex_lock(mutex, timeout);
   2c37e:	481b      	ldr	r0, [pc, #108]	; (2c3ec <settings_register+0x7c>)
   2c380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c388:	f01b fd84 	bl	47e94 <z_impl_k_mutex_lock>
   2c38c:	6834      	ldr	r4, [r6, #0]
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2c38e:	b17c      	cbz	r4, 2c3b0 <settings_register+0x40>
		if (strcmp(handler->name, ch->name) == 0) {
   2c390:	6828      	ldr	r0, [r5, #0]
   2c392:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2c396:	3c14      	subs	r4, #20
		if (strcmp(handler->name, ch->name) == 0) {
   2c398:	f01f fc2e 	bl	4bbf8 <strcmp>
   2c39c:	b1c8      	cbz	r0, 2c3d2 <settings_register+0x62>
	return node->next;
   2c39e:	6964      	ldr	r4, [r4, #20]
   2c3a0:	e7f5      	b.n	2c38e <settings_register+0x1e>
		if (strcmp(handler->name, ch->name) == 0) {
   2c3a2:	6821      	ldr	r1, [r4, #0]
   2c3a4:	6828      	ldr	r0, [r5, #0]
   2c3a6:	f01f fc27 	bl	4bbf8 <strcmp>
   2c3aa:	b1a8      	cbz	r0, 2c3d8 <settings_register+0x68>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c3ac:	3414      	adds	r4, #20
   2c3ae:	e7e3      	b.n	2c378 <settings_register+0x8>
	parent->next = child;
   2c3b0:	2200      	movs	r2, #0
   2c3b2:	616a      	str	r2, [r5, #20]
	return list->tail;
   2c3b4:	6872      	ldr	r2, [r6, #4]
			rc = -EEXIST;
			goto end;
		}
	}
	sys_slist_append(&settings_handlers, &handler->node);
   2c3b6:	f105 0314 	add.w	r3, r5, #20
Z_GENLIST_APPEND(slist, snode)
   2c3ba:	b93a      	cbnz	r2, 2c3cc <settings_register+0x5c>
	list->head = node;
   2c3bc:	e9c6 3300 	strd	r3, r3, [r6]
	int rc = 0;
   2c3c0:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   2c3c2:	480a      	ldr	r0, [pc, #40]	; (2c3ec <settings_register+0x7c>)
   2c3c4:	f01b fdde 	bl	47f84 <z_impl_k_mutex_unlock>

end:
	k_mutex_unlock(&settings_lock);
	return rc;
}
   2c3c8:	4620      	mov	r0, r4
   2c3ca:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   2c3cc:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2c3ce:	6073      	str	r3, [r6, #4]
}
   2c3d0:	e7f6      	b.n	2c3c0 <settings_register+0x50>
			rc = -EEXIST;
   2c3d2:	f06f 0410 	mvn.w	r4, #16
   2c3d6:	e7f4      	b.n	2c3c2 <settings_register+0x52>
			return -EEXIST;
   2c3d8:	f06f 0410 	mvn.w	r4, #16
   2c3dc:	e7f4      	b.n	2c3c8 <settings_register+0x58>
   2c3de:	bf00      	nop
   2c3e0:	000517c8 	.word	0x000517c8
   2c3e4:	00051840 	.word	0x00051840
   2c3e8:	20004514 	.word	0x20004514
   2c3ec:	20001144 	.word	0x20001144

0002c3f0 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   2c3f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2c3f4:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   2c3f6:	460c      	mov	r4, r1
   2c3f8:	b109      	cbz	r1, 2c3fe <settings_parse_and_lookup+0xe>
		*next = NULL;
   2c3fa:	2300      	movs	r3, #0
   2c3fc:	600b      	str	r3, [r1, #0]
{
   2c3fe:	4d1f      	ldr	r5, [pc, #124]	; (2c47c <settings_parse_and_lookup+0x8c>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c400:	f8df 907c 	ldr.w	r9, [pc, #124]	; 2c480 <settings_parse_and_lookup+0x90>
{
   2c404:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c406:	454d      	cmp	r5, r9
   2c408:	d30f      	bcc.n	2c42a <settings_parse_and_lookup+0x3a>
	return list->head;
   2c40a:	4b1e      	ldr	r3, [pc, #120]	; (2c484 <settings_parse_and_lookup+0x94>)
   2c40c:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2c40e:	b385      	cbz	r5, 2c472 <settings_parse_and_lookup+0x82>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2c410:	f855 8c14 	ldr.w	r8, [r5, #-20]
   2c414:	aa01      	add	r2, sp, #4
   2c416:	4641      	mov	r1, r8
   2c418:	4638      	mov	r0, r7
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2c41a:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2c41c:	f01e f927 	bl	4a66e <settings_name_steq>
   2c420:	b310      	cbz	r0, 2c468 <settings_parse_and_lookup+0x78>
			continue;
		}
		if (!bestmatch) {
   2c422:	b9d6      	cbnz	r6, 2c45a <settings_parse_and_lookup+0x6a>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   2c424:	bb14      	cbnz	r4, 2c46c <settings_parse_and_lookup+0x7c>
{
   2c426:	462e      	mov	r6, r5
   2c428:	e01e      	b.n	2c468 <settings_parse_and_lookup+0x78>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2c42a:	f8d5 8000 	ldr.w	r8, [r5]
   2c42e:	aa01      	add	r2, sp, #4
   2c430:	4641      	mov	r1, r8
   2c432:	4638      	mov	r0, r7
   2c434:	f01e f91b 	bl	4a66e <settings_name_steq>
   2c438:	b150      	cbz	r0, 2c450 <settings_parse_and_lookup+0x60>
		if (!bestmatch) {
   2c43a:	b916      	cbnz	r6, 2c442 <settings_parse_and_lookup+0x52>
			if (next) {
   2c43c:	b954      	cbnz	r4, 2c454 <settings_parse_and_lookup+0x64>
{
   2c43e:	462e      	mov	r6, r5
   2c440:	e006      	b.n	2c450 <settings_parse_and_lookup+0x60>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   2c442:	6831      	ldr	r1, [r6, #0]
   2c444:	2200      	movs	r2, #0
   2c446:	4640      	mov	r0, r8
   2c448:	f01e f911 	bl	4a66e <settings_name_steq>
   2c44c:	2800      	cmp	r0, #0
   2c44e:	d1f5      	bne.n	2c43c <settings_parse_and_lookup+0x4c>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c450:	3514      	adds	r5, #20
   2c452:	e7d8      	b.n	2c406 <settings_parse_and_lookup+0x16>
				*next = tmpnext;
   2c454:	9b01      	ldr	r3, [sp, #4]
   2c456:	6023      	str	r3, [r4, #0]
   2c458:	e7f1      	b.n	2c43e <settings_parse_and_lookup+0x4e>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   2c45a:	6831      	ldr	r1, [r6, #0]
   2c45c:	2200      	movs	r2, #0
   2c45e:	4640      	mov	r0, r8
   2c460:	f01e f905 	bl	4a66e <settings_name_steq>
   2c464:	2800      	cmp	r0, #0
   2c466:	d1dd      	bne.n	2c424 <settings_parse_and_lookup+0x34>
	return node->next;
   2c468:	696d      	ldr	r5, [r5, #20]
   2c46a:	e7d0      	b.n	2c40e <settings_parse_and_lookup+0x1e>
				*next = tmpnext;
   2c46c:	9b01      	ldr	r3, [sp, #4]
   2c46e:	6023      	str	r3, [r4, #0]
   2c470:	e7d9      	b.n	2c426 <settings_parse_and_lookup+0x36>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   2c472:	4630      	mov	r0, r6
   2c474:	b003      	add	sp, #12
   2c476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2c47a:	bf00      	nop
   2c47c:	000517c8 	.word	0x000517c8
   2c480:	00051840 	.word	0x00051840
   2c484:	20004514 	.word	0x20004514

0002c488 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   2c488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c48a:	4c18      	ldr	r4, [pc, #96]	; (2c4ec <settings_commit_subtree+0x64>)
   2c48c:	4f18      	ldr	r7, [pc, #96]	; (2c4f0 <settings_commit_subtree+0x68>)
{
   2c48e:	4606      	mov	r6, r0
	rc = 0;
   2c490:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c492:	42bc      	cmp	r4, r7
   2c494:	d308      	bcc.n	2c4a8 <settings_commit_subtree+0x20>
	return list->head;
   2c496:	4b17      	ldr	r3, [pc, #92]	; (2c4f4 <settings_commit_subtree+0x6c>)
   2c498:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2c49a:	b32c      	cbz	r4, 2c4e8 <settings_commit_subtree+0x60>
   2c49c:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2c49e:	b9b6      	cbnz	r6, 2c4ce <settings_commit_subtree+0x46>
			continue;
		}
		if (ch->h_commit) {
   2c4a0:	68e3      	ldr	r3, [r4, #12]
   2c4a2:	b9e3      	cbnz	r3, 2c4de <settings_commit_subtree+0x56>
	return node->next;
   2c4a4:	6964      	ldr	r4, [r4, #20]
   2c4a6:	e7f8      	b.n	2c49a <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2c4a8:	b92e      	cbnz	r6, 2c4b6 <settings_commit_subtree+0x2e>
		if (ch->h_commit) {
   2c4aa:	68e3      	ldr	r3, [r4, #12]
   2c4ac:	b95b      	cbnz	r3, 2c4c6 <settings_commit_subtree+0x3e>
{
   2c4ae:	4628      	mov	r0, r5
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c4b0:	3414      	adds	r4, #20
   2c4b2:	4605      	mov	r5, r0
   2c4b4:	e7ed      	b.n	2c492 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2c4b6:	6820      	ldr	r0, [r4, #0]
   2c4b8:	2200      	movs	r2, #0
   2c4ba:	4631      	mov	r1, r6
   2c4bc:	f01e f8d7 	bl	4a66e <settings_name_steq>
   2c4c0:	2800      	cmp	r0, #0
   2c4c2:	d1f2      	bne.n	2c4aa <settings_commit_subtree+0x22>
   2c4c4:	e7f3      	b.n	2c4ae <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
   2c4c6:	4798      	blx	r3
			if (!rc) {
   2c4c8:	2d00      	cmp	r5, #0
   2c4ca:	d1f0      	bne.n	2c4ae <settings_commit_subtree+0x26>
   2c4cc:	e7f0      	b.n	2c4b0 <settings_commit_subtree+0x28>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2c4ce:	6820      	ldr	r0, [r4, #0]
   2c4d0:	2200      	movs	r2, #0
   2c4d2:	4631      	mov	r1, r6
   2c4d4:	f01e f8cb 	bl	4a66e <settings_name_steq>
   2c4d8:	2800      	cmp	r0, #0
   2c4da:	d1e1      	bne.n	2c4a0 <settings_commit_subtree+0x18>
   2c4dc:	e7e2      	b.n	2c4a4 <settings_commit_subtree+0x1c>
			rc2 = ch->h_commit();
   2c4de:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   2c4e0:	2d00      	cmp	r5, #0
   2c4e2:	bf08      	it	eq
   2c4e4:	4605      	moveq	r5, r0
   2c4e6:	e7dd      	b.n	2c4a4 <settings_commit_subtree+0x1c>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   2c4e8:	4628      	mov	r0, r5
   2c4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c4ec:	000517c8 	.word	0x000517c8
   2c4f0:	00051840 	.word	0x00051840
   2c4f4:	20004514 	.word	0x20004514

0002c4f8 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   2c4f8:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   2c4fa:	4c07      	ldr	r4, [pc, #28]	; (2c518 <settings_subsys_init+0x20>)
   2c4fc:	7823      	ldrb	r3, [r4, #0]
   2c4fe:	b10b      	cbz	r3, 2c504 <settings_subsys_init+0xc>
		return 0;
   2c500:	2000      	movs	r0, #0
	if (!err) {
		settings_subsys_initialized = true;
	}

	return err;
}
   2c502:	bd10      	pop	{r4, pc}
	settings_init();
   2c504:	f7ff ff2c 	bl	2c360 <settings_init>
	err = settings_backend_init(); /* func rises kernel panic once error */
   2c508:	f000 f866 	bl	2c5d8 <settings_backend_init>
	if (!err) {
   2c50c:	2800      	cmp	r0, #0
   2c50e:	d1f8      	bne.n	2c502 <settings_subsys_init+0xa>
		settings_subsys_initialized = true;
   2c510:	2301      	movs	r3, #1
   2c512:	7023      	strb	r3, [r4, #0]
   2c514:	e7f4      	b.n	2c500 <settings_subsys_init+0x8>
   2c516:	bf00      	nop
   2c518:	2000736b 	.word	0x2000736b

0002c51c <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   2c51c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   2c520:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   2c522:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 2c5d4 <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   2c526:	3401      	adds	r4, #1
{
   2c528:	b098      	sub	sp, #96	; 0x60
   2c52a:	4680      	mov	r8, r0
   2c52c:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   2c52e:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   2c530:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   2c534:	1e65      	subs	r5, r4, #1
   2c536:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   2c538:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2c53c:	d047      	beq.n	2c5ce <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   2c53e:	234a      	movs	r3, #74	; 0x4a
   2c540:	aa05      	add	r2, sp, #20
   2c542:	4629      	mov	r1, r5
   2c544:	4630      	mov	r0, r6
   2c546:	f01e f81e 	bl	4a586 <nvs_read>
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   2c54a:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   2c54e:	343f      	adds	r4, #63	; 0x3f
   2c550:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   2c552:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   2c554:	4621      	mov	r1, r4
   2c556:	2301      	movs	r3, #1
   2c558:	f10d 020b 	add.w	r2, sp, #11
   2c55c:	4630      	mov	r0, r6
   2c55e:	f01e f812 	bl	4a586 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   2c562:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   2c564:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   2c566:	dc03      	bgt.n	2c570 <settings_nvs_load+0x54>
   2c568:	2800      	cmp	r0, #0
   2c56a:	dc03      	bgt.n	2c574 <settings_nvs_load+0x58>
{
   2c56c:	462c      	mov	r4, r5
   2c56e:	e7e1      	b.n	2c534 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   2c570:	2800      	cmp	r0, #0
   2c572:	dc16      	bgt.n	2c5a2 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   2c574:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   2c578:	42ab      	cmp	r3, r5
   2c57a:	d109      	bne.n	2c590 <settings_nvs_load+0x74>
				cf->last_name_id--;
   2c57c:	4642      	mov	r2, r8
   2c57e:	1e6b      	subs	r3, r5, #1
   2c580:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2c584:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2c588:	2302      	movs	r3, #2
   2c58a:	4630      	mov	r0, r6
   2c58c:	f7fe ff20 	bl	2b3d0 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   2c590:	4629      	mov	r1, r5
   2c592:	4630      	mov	r0, r6
   2c594:	f01d ff93 	bl	4a4be <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   2c598:	4621      	mov	r1, r4
   2c59a:	4630      	mov	r0, r6
   2c59c:	f01d ff8f 	bl	4a4be <nvs_delete>
			continue;
   2c5a0:	e7e4      	b.n	2c56c <settings_nvs_load+0x50>
		name[rc1] = '\0';
   2c5a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
   2c5a6:	eb0d 0703 	add.w	r7, sp, r3
   2c5aa:	2300      	movs	r3, #0
   2c5ac:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   2c5b0:	4652      	mov	r2, sl
   2c5b2:	f8cd 9000 	str.w	r9, [sp]
   2c5b6:	ab03      	add	r3, sp, #12
   2c5b8:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   2c5ba:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   2c5bc:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   2c5c0:	f01e f88b 	bl	4a6da <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   2c5c4:	2800      	cmp	r0, #0
   2c5c6:	d0d1      	beq.n	2c56c <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   2c5c8:	b018      	add	sp, #96	; 0x60
   2c5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c5ce:	2000      	movs	r0, #0
	return ret;
   2c5d0:	e7fa      	b.n	2c5c8 <settings_nvs_load+0xac>
   2c5d2:	bf00      	nop
   2c5d4:	0004a745 	.word	0x0004a745

0002c5d8 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   2c5d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   2c5da:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   2c5dc:	4669      	mov	r1, sp
   2c5de:	2002      	movs	r0, #2
	uint32_t sector_cnt = 1;
   2c5e0:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   2c5e2:	f7ff fde3 	bl	2c1ac <flash_area_open>
	if (rc) {
   2c5e6:	4604      	mov	r4, r0
   2c5e8:	2800      	cmp	r0, #0
   2c5ea:	d134      	bne.n	2c656 <settings_backend_init+0x7e>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   2c5ec:	aa02      	add	r2, sp, #8
   2c5ee:	a901      	add	r1, sp, #4
   2c5f0:	2002      	movs	r0, #2
   2c5f2:	f7ff fdf9 	bl	2c1e8 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   2c5f6:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   2c5fa:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   2c5fc:	d02b      	beq.n	2c656 <settings_backend_init+0x7e>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   2c5fe:	b138      	cbz	r0, 2c610 <settings_backend_init+0x38>
   2c600:	340c      	adds	r4, #12
   2c602:	d005      	beq.n	2c610 <settings_backend_init+0x38>
		k_panic();
   2c604:	4040      	eors	r0, r0
   2c606:	f380 8811 	msr	BASEPRI, r0
   2c60a:	f04f 0004 	mov.w	r0, #4
   2c60e:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   2c610:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   2c612:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   2c616:	d223      	bcs.n	2c660 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   2c618:	9a00      	ldr	r2, [sp, #0]
   2c61a:	2300      	movs	r3, #0
   2c61c:	6894      	ldr	r4, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   2c61e:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   2c620:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   2c622:	4284      	cmp	r4, r0
   2c624:	d31a      	bcc.n	2c65c <settings_backend_init+0x84>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   2c626:	3301      	adds	r3, #1
   2c628:	2b08      	cmp	r3, #8
   2c62a:	d1f9      	bne.n	2c620 <settings_backend_init+0x48>
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   2c62c:	4d0e      	ldr	r5, [pc, #56]	; (2c668 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
   2c62e:	82eb      	strh	r3, [r5, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   2c630:	6853      	ldr	r3, [r2, #4]
   2c632:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   2c634:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   2c636:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   2c638:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   2c63a:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   2c63c:	f01e f91c 	bl	4a878 <settings_nvs_backend_init>
	if (rc) {
   2c640:	4604      	mov	r4, r0
   2c642:	b940      	cbnz	r0, 2c656 <settings_backend_init+0x7e>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   2c644:	4e09      	ldr	r6, [pc, #36]	; (2c66c <settings_backend_init+0x94>)
   2c646:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   2c648:	4628      	mov	r0, r5
   2c64a:	f7ff fe27 	bl	2c29c <settings_src_register>
	settings_dst_register(&cf->cf_store);
   2c64e:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   2c650:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   2c652:	f7ff fe31 	bl	2c2b8 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   2c656:	4620      	mov	r0, r4
   2c658:	b004      	add	sp, #16
   2c65a:	bd70      	pop	{r4, r5, r6, pc}
   2c65c:	b29b      	uxth	r3, r3
   2c65e:	e7e5      	b.n	2c62c <settings_backend_init+0x54>
		return -EDOM;
   2c660:	f06f 0420 	mvn.w	r4, #32
   2c664:	e7f7      	b.n	2c656 <settings_backend_init+0x7e>
   2c666:	bf00      	nop
   2c668:	2000451c 	.word	0x2000451c
   2c66c:	20000750 	.word	0x20000750

0002c670 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   2c670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c674:	4605      	mov	r5, r0
	__asm__ volatile(
   2c676:	f04f 0320 	mov.w	r3, #32
   2c67a:	f3ef 8611 	mrs	r6, BASEPRI
   2c67e:	f383 8812 	msr	BASEPRI_MAX, r3
   2c682:	f3bf 8f6f 	isb	sy
	return list->head;
   2c686:	4b0e      	ldr	r3, [pc, #56]	; (2c6c0 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   2c688:	4f0e      	ldr	r7, [pc, #56]	; (2c6c4 <pm_state_notify+0x54>)
   2c68a:	681c      	ldr	r4, [r3, #0]
   2c68c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2c6c8 <pm_state_notify+0x58>
   2c690:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   2c694:	b92c      	cbnz	r4, 2c6a2 <pm_state_notify+0x32>
	__asm__ volatile(
   2c696:	f386 8811 	msr	BASEPRI, r6
   2c69a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   2c69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   2c6a2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   2c6a6:	2d00      	cmp	r5, #0
   2c6a8:	bf18      	it	ne
   2c6aa:	4613      	movne	r3, r2
		if (callback) {
   2c6ac:	b12b      	cbz	r3, 2c6ba <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   2c6ae:	f898 2014 	ldrb.w	r2, [r8, #20]
   2c6b2:	fb09 f202 	mul.w	r2, r9, r2
   2c6b6:	5cb8      	ldrb	r0, [r7, r2]
   2c6b8:	4798      	blx	r3
	return node->next;
   2c6ba:	6824      	ldr	r4, [r4, #0]
   2c6bc:	e7ea      	b.n	2c694 <pm_state_notify+0x24>
   2c6be:	bf00      	nop
   2c6c0:	2000456c 	.word	0x2000456c
   2c6c4:	20004560 	.word	0x20004560
   2c6c8:	200071cc 	.word	0x200071cc

0002c6cc <atomic_clear_bit.constprop.0>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c6cc:	4a0a      	ldr	r2, [pc, #40]	; (2c6f8 <atomic_clear_bit.constprop.0+0x2c>)
   2c6ce:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c6d2:	0943      	lsrs	r3, r0, #5
   2c6d4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c6d8:	f000 001f 	and.w	r0, r0, #31
   2c6dc:	2301      	movs	r3, #1
   2c6de:	4083      	lsls	r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c6e0:	43db      	mvns	r3, r3
   2c6e2:	e852 0f00 	ldrex	r0, [r2]
   2c6e6:	4018      	ands	r0, r3
   2c6e8:	e842 0100 	strex	r1, r0, [r2]
   2c6ec:	2900      	cmp	r1, #0
   2c6ee:	d1f8      	bne.n	2c6e2 <atomic_clear_bit.constprop.0+0x16>
   2c6f0:	f3bf 8f5b 	dmb	ish
}
   2c6f4:	4770      	bx	lr
   2c6f6:	bf00      	nop
   2c6f8:	2000455c 	.word	0x2000455c

0002c6fc <pm_system_resume>:

void pm_system_resume(void)
{
   2c6fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
   2c6fe:	4b1c      	ldr	r3, [pc, #112]	; (2c770 <pm_system_resume+0x74>)
   2c700:	7d1c      	ldrb	r4, [r3, #20]
   2c702:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c706:	f004 031f 	and.w	r3, r4, #31
   2c70a:	2201      	movs	r2, #1
   2c70c:	409a      	lsls	r2, r3
   2c70e:	4b19      	ldr	r3, [pc, #100]	; (2c774 <pm_system_resume+0x78>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c710:	0961      	lsrs	r1, r4, #5
   2c712:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   2c716:	43d0      	mvns	r0, r2
   2c718:	e853 1f00 	ldrex	r1, [r3]
   2c71c:	ea01 0500 	and.w	r5, r1, r0
   2c720:	e843 5600 	strex	r6, r5, [r3]
   2c724:	2e00      	cmp	r6, #0
   2c726:	d1f7      	bne.n	2c718 <pm_system_resume+0x1c>
   2c728:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   2c72c:	420a      	tst	r2, r1
   2c72e:	d017      	beq.n	2c760 <pm_system_resume+0x64>
		exit_pos_ops(z_cpus_pm_state[id]);
   2c730:	4d11      	ldr	r5, [pc, #68]	; (2c778 <pm_system_resume+0x7c>)
   2c732:	220c      	movs	r2, #12
   2c734:	fb02 5204 	mla	r2, r2, r4, r5
   2c738:	ca07      	ldmia	r2, {r0, r1, r2}
   2c73a:	ab01      	add	r3, sp, #4
   2c73c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   2c740:	4a0e      	ldr	r2, [pc, #56]	; (2c77c <pm_system_resume+0x80>)
   2c742:	b17a      	cbz	r2, 2c764 <pm_system_resume+0x68>
		pm_power_state_exit_post_ops(info);
   2c744:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2c748:	f01f faba 	bl	4bcc0 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   2c74c:	2000      	movs	r0, #0
   2c74e:	f7ff ff8f 	bl	2c670 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   2c752:	230c      	movs	r3, #12
   2c754:	435c      	muls	r4, r3
   2c756:	192a      	adds	r2, r5, r4
   2c758:	2300      	movs	r3, #0
   2c75a:	512b      	str	r3, [r5, r4]
   2c75c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   2c760:	b004      	add	sp, #16
   2c762:	bd70      	pop	{r4, r5, r6, pc}
   2c764:	f382 8811 	msr	BASEPRI, r2
   2c768:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   2c76c:	e7ee      	b.n	2c74c <pm_system_resume+0x50>
   2c76e:	bf00      	nop
   2c770:	200071cc 	.word	0x200071cc
   2c774:	20004574 	.word	0x20004574
   2c778:	20004560 	.word	0x20004560
   2c77c:	0004bcc1 	.word	0x0004bcc1

0002c780 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   2c780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   2c784:	4b35      	ldr	r3, [pc, #212]	; (2c85c <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c786:	4a36      	ldr	r2, [pc, #216]	; (2c860 <pm_system_suspend+0xe0>)
   2c788:	7d1c      	ldrb	r4, [r3, #20]
   2c78a:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2c78e:	0963      	lsrs	r3, r4, #5
   2c790:	ea4f 0883 	mov.w	r8, r3, lsl #2
   2c794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2c798:	4d32      	ldr	r5, [pc, #200]	; (2c864 <pm_system_suspend+0xe4>)
   2c79a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c79e:	f004 091f 	and.w	r9, r4, #31
   2c7a2:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   2c7a6:	f013 0f01 	tst.w	r3, #1
{
   2c7aa:	b085      	sub	sp, #20
   2c7ac:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   2c7ae:	d10a      	bne.n	2c7c6 <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   2c7b0:	4601      	mov	r1, r0
   2c7b2:	4620      	mov	r0, r4
   2c7b4:	f000 f876 	bl	2c8a4 <pm_policy_next_state>
		if (info != NULL) {
   2c7b8:	b128      	cbz	r0, 2c7c6 <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
   2c7ba:	c807      	ldmia	r0, {r0, r1, r2}
   2c7bc:	230c      	movs	r3, #12
   2c7be:	fb03 5304 	mla	r3, r3, r4, r5
   2c7c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   2c7c6:	230c      	movs	r3, #12
   2c7c8:	4363      	muls	r3, r4
   2c7ca:	18ea      	adds	r2, r5, r3
   2c7cc:	5cee      	ldrb	r6, [r5, r3]
   2c7ce:	b936      	cbnz	r6, 2c7de <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   2c7d0:	4620      	mov	r0, r4
   2c7d2:	f7ff ff7b 	bl	2c6cc <atomic_clear_bit.constprop.0>
		ret = false;
   2c7d6:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   2c7d8:	b005      	add	sp, #20
   2c7da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
   2c7de:	1c7b      	adds	r3, r7, #1
   2c7e0:	d010      	beq.n	2c804 <pm_system_suspend+0x84>
			return (uint32_t)((t * to_hz + off) / from_hz);
   2c7e2:	f8d2 c008 	ldr.w	ip, [r2, #8]
   2c7e6:	4e20      	ldr	r6, [pc, #128]	; (2c868 <pm_system_suspend+0xe8>)
   2c7e8:	4a20      	ldr	r2, [pc, #128]	; (2c86c <pm_system_suspend+0xec>)
   2c7ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2c7ee:	2100      	movs	r1, #0
   2c7f0:	fbec 6100 	umlal	r6, r1, ip, r0
   2c7f4:	2300      	movs	r3, #0
   2c7f6:	4630      	mov	r0, r6
   2c7f8:	f7f9 fc82 	bl	26100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   2c7fc:	2101      	movs	r1, #1
   2c7fe:	1a38      	subs	r0, r7, r0
   2c800:	f024 fb9b 	bl	50f3a <z_set_timeout_expiry>
	k_sched_lock();
   2c804:	f01c f866 	bl	488d4 <k_sched_lock>
	pm_state_notify(true);
   2c808:	2001      	movs	r0, #1
   2c80a:	f7ff ff31 	bl	2c670 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c80e:	f3bf 8f5b 	dmb	ish
   2c812:	4b17      	ldr	r3, [pc, #92]	; (2c870 <pm_system_suspend+0xf0>)
   2c814:	4498      	add	r8, r3
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c816:	2301      	movs	r3, #1
   2c818:	fa03 f309 	lsl.w	r3, r3, r9
   2c81c:	e858 2f00 	ldrex	r2, [r8]
   2c820:	431a      	orrs	r2, r3
   2c822:	e848 2100 	strex	r1, r2, [r8]
   2c826:	2900      	cmp	r1, #0
   2c828:	d1f8      	bne.n	2c81c <pm_system_suspend+0x9c>
   2c82a:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
   2c82e:	230c      	movs	r3, #12
   2c830:	fb03 5504 	mla	r5, r3, r4, r5
   2c834:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   2c838:	ab01      	add	r3, sp, #4
   2c83a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   2c83e:	4a0d      	ldr	r2, [pc, #52]	; (2c874 <pm_system_suspend+0xf4>)
   2c840:	b11a      	cbz	r2, 2c84a <pm_system_suspend+0xca>
		pm_power_state_set(info);
   2c842:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2c846:	f01f fa28 	bl	4bc9a <pm_power_state_set>
	pm_system_resume();
   2c84a:	f7ff ff57 	bl	2c6fc <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   2c84e:	4620      	mov	r0, r4
   2c850:	f7ff ff3c 	bl	2c6cc <atomic_clear_bit.constprop.0>
	k_sched_unlock();
   2c854:	f01c f852 	bl	488fc <k_sched_unlock>
	bool ret = true;
   2c858:	2001      	movs	r0, #1
   2c85a:	e7bd      	b.n	2c7d8 <pm_system_suspend+0x58>
   2c85c:	200071cc 	.word	0x200071cc
   2c860:	2000455c 	.word	0x2000455c
   2c864:	20004560 	.word	0x20004560
   2c868:	000f423f 	.word	0x000f423f
   2c86c:	000f4240 	.word	0x000f4240
   2c870:	20004574 	.word	0x20004574
   2c874:	0004bc9b 	.word	0x0004bc9b

0002c878 <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c878:	4b05      	ldr	r3, [pc, #20]	; (2c890 <pm_constraint_get+0x18>)
   2c87a:	f3bf 8f5b 	dmb	ish
   2c87e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2c882:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
   2c886:	fab0 f080 	clz	r0, r0
   2c88a:	0940      	lsrs	r0, r0, #5
   2c88c:	4770      	bx	lr
   2c88e:	bf00      	nop
   2c890:	20004578 	.word	0x20004578

0002c894 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   2c894:	b908      	cbnz	r0, 2c89a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   2c896:	4b02      	ldr	r3, [pc, #8]	; (2c8a0 <pm_state_cpu_get_all+0xc>)
   2c898:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   2c89a:	2000      	movs	r0, #0
   2c89c:	4770      	bx	lr
   2c89e:	bf00      	nop
   2c8a0:	000524b4 	.word	0x000524b4

0002c8a4 <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   2c8a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c8a8:	460f      	mov	r7, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   2c8aa:	a901      	add	r1, sp, #4
   2c8ac:	f7ff fff2 	bl	2c894 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   2c8b0:	1e44      	subs	r4, r0, #1
   2c8b2:	b224      	sxth	r4, r4
   2c8b4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2c8b8:	f8df 9060 	ldr.w	r9, [pc, #96]	; 2c91c <pm_policy_next_state+0x78>
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   2c8bc:	4605      	mov	r5, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   2c8be:	00a4      	lsls	r4, r4, #2
   2c8c0:	f44f 4800 	mov.w	r8, #32768	; 0x8000
   2c8c4:	b925      	cbnz	r5, 2c8d0 <pm_policy_next_state+0x2c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   2c8c6:	462e      	mov	r6, r5
}
   2c8c8:	4630      	mov	r0, r6
   2c8ca:	b003      	add	sp, #12
   2c8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   2c8d0:	9b01      	ldr	r3, [sp, #4]
		if (!pm_constraint_get(state->state)) {
   2c8d2:	5d18      	ldrb	r0, [r3, r4]
		const struct pm_state_info *state = &cpu_states[i];
   2c8d4:	191e      	adds	r6, r3, r4
		if (!pm_constraint_get(state->state)) {
   2c8d6:	f7ff ffcf 	bl	2c878 <pm_constraint_get>
   2c8da:	b1d8      	cbz	r0, 2c914 <pm_policy_next_state+0x70>
   2c8dc:	6870      	ldr	r0, [r6, #4]
   2c8de:	4a10      	ldr	r2, [pc, #64]	; (2c920 <pm_policy_next_state+0x7c>)
   2c8e0:	f04f 0a00 	mov.w	sl, #0
   2c8e4:	46cc      	mov	ip, r9
   2c8e6:	4651      	mov	r1, sl
   2c8e8:	fbe0 c108 	umlal	ip, r1, r0, r8
   2c8ec:	2300      	movs	r3, #0
   2c8ee:	4660      	mov	r0, ip
   2c8f0:	f7f9 fc06 	bl	26100 <__aeabi_uldivmod>
   2c8f4:	4683      	mov	fp, r0
   2c8f6:	68b0      	ldr	r0, [r6, #8]
   2c8f8:	4a09      	ldr	r2, [pc, #36]	; (2c920 <pm_policy_next_state+0x7c>)
   2c8fa:	46cc      	mov	ip, r9
   2c8fc:	4651      	mov	r1, sl
   2c8fe:	fbe0 c108 	umlal	ip, r1, r0, r8
   2c902:	2300      	movs	r3, #0
   2c904:	4660      	mov	r0, ip
   2c906:	f7f9 fbfb 	bl	26100 <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
   2c90a:	1c7b      	adds	r3, r7, #1
   2c90c:	d0dc      	beq.n	2c8c8 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
   2c90e:	4458      	add	r0, fp
		if ((ticks == K_TICKS_FOREVER) ||
   2c910:	42b8      	cmp	r0, r7
   2c912:	d9d9      	bls.n	2c8c8 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   2c914:	3d01      	subs	r5, #1
   2c916:	b2ad      	uxth	r5, r5
   2c918:	3c0c      	subs	r4, #12
   2c91a:	e7d3      	b.n	2c8c4 <pm_policy_next_state+0x20>
   2c91c:	000f423f 	.word	0x000f423f
   2c920:	000f4240 	.word	0x000f4240

0002c924 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   2c924:	4b01      	ldr	r3, [pc, #4]	; (2c92c <uECC_get_rng+0x8>)
   2c926:	6818      	ldr	r0, [r3, #0]
   2c928:	4770      	bx	lr
   2c92a:	bf00      	nop
   2c92c:	20000760 	.word	0x20000760

0002c930 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   2c930:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   2c932:	2208      	movs	r2, #8
{
   2c934:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   2c936:	f01e f971 	bl	4ac1c <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   2c93a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   2c93c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   2c93e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   2c940:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   2c942:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   2c944:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   2c946:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   2c948:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   2c94a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   2c94c:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2c94e:	4613      	mov	r3, r2
   2c950:	466a      	mov	r2, sp
{
   2c952:	460c      	mov	r4, r1
   2c954:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
   2c956:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2c958:	4611      	mov	r1, r2
   2c95a:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
   2c95c:	e9cd 7701 	strd	r7, r7, [sp, #4]
   2c960:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2c962:	f01e f869 	bl	4aa38 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c966:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2c968:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c96a:	4630      	mov	r0, r6
   2c96c:	f01e f864 	bl	4aa38 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   2c970:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2c972:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
   2c974:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2c976:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
   2c978:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   2c97a:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
   2c97c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c97e:	4405      	add	r5, r0
	tmp[7] = 0;
   2c980:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2c984:	4610      	mov	r0, r2
   2c986:	4611      	mov	r1, r2
   2c988:	f01e f856 	bl	4aa38 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c98c:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2c98e:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c990:	4630      	mov	r0, r6
   2c992:	f01e f851 	bl	4aa38 <uECC_vli_add>
   2c996:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
   2c998:	6a20      	ldr	r0, [r4, #32]
   2c99a:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
   2c99c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2c99e:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
   2c9a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2c9a2:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   2c9a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2c9a6:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
   2c9a8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   2c9aa:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c9ac:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   2c9ae:	e9cd 7704 	strd	r7, r7, [sp, #16]
   2c9b2:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c9b4:	f01e f840 	bl	4aa38 <uECC_vli_add>
   2c9b8:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
   2c9ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2c9bc:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
   2c9be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   2c9c0:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
   2c9c4:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
   2c9c6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2c9c8:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
   2c9ca:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
   2c9ce:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
   2c9d0:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   2c9d4:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
   2c9d6:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
   2c9da:	6a20      	ldr	r0, [r4, #32]
   2c9dc:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c9de:	4630      	mov	r0, r6
   2c9e0:	f01e f82a 	bl	4aa38 <uECC_vli_add>
   2c9e4:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
   2c9e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2c9e8:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
   2c9ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
   2c9ec:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
   2c9ee:	6b60      	ldr	r0, [r4, #52]	; 0x34
   2c9f0:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   2c9f2:	6a20      	ldr	r0, [r4, #32]
   2c9f4:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
   2c9f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2c9f8:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2c9fa:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   2c9fc:	e9cd 7704 	strd	r7, r7, [sp, #16]
   2ca00:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2ca02:	f01e f93e 	bl	4ac82 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   2ca06:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2ca08:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   2ca0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2ca0c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   2ca0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2ca10:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   2ca12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2ca14:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   2ca16:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ca18:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   2ca1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2ca1c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2ca1e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2ca20:	2308      	movs	r3, #8
   2ca22:	4630      	mov	r0, r6
   2ca24:	f01e f92d 	bl	4ac82 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   2ca28:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2ca2a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   2ca2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2ca2e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   2ca30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2ca32:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   2ca34:	6a23      	ldr	r3, [r4, #32]
   2ca36:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   2ca38:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ca3a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   2ca3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   2ca3e:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   2ca42:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2ca44:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2ca46:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2ca48:	2308      	movs	r3, #8
   2ca4a:	4630      	mov	r0, r6
   2ca4c:	f01e f919 	bl	4ac82 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   2ca50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2ca52:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   2ca54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   2ca56:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   2ca5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ca5c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   2ca5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2ca60:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   2ca62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2ca64:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
	tmp[7] = product[13];
   2ca66:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2ca68:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2ca6a:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2ca6c:	2308      	movs	r3, #8
   2ca6e:	4630      	mov	r0, r6
   2ca70:	f01e f907 	bl	4ac82 <uECC_vli_sub>

	if (carry < 0) {
   2ca74:	1a2d      	subs	r5, r5, r0
   2ca76:	d410      	bmi.n	2ca9a <vli_mmod_fast_secp256r1+0x16a>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   2ca78:	4c0d      	ldr	r4, [pc, #52]	; (2cab0 <vli_mmod_fast_secp256r1+0x180>)
		while (carry || 
   2ca7a:	b935      	cbnz	r5, 2ca8a <vli_mmod_fast_secp256r1+0x15a>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   2ca7c:	2208      	movs	r2, #8
   2ca7e:	4631      	mov	r1, r6
   2ca80:	4620      	mov	r0, r4
   2ca82:	f01e f8d7 	bl	4ac34 <uECC_vli_cmp_unsafe>
		while (carry || 
   2ca86:	2801      	cmp	r0, #1
   2ca88:	d00f      	beq.n	2caaa <vli_mmod_fast_secp256r1+0x17a>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   2ca8a:	2308      	movs	r3, #8
   2ca8c:	4622      	mov	r2, r4
   2ca8e:	4631      	mov	r1, r6
   2ca90:	4630      	mov	r0, r6
   2ca92:	f01e f8f6 	bl	4ac82 <uECC_vli_sub>
   2ca96:	1a2d      	subs	r5, r5, r0
   2ca98:	e7ef      	b.n	2ca7a <vli_mmod_fast_secp256r1+0x14a>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   2ca9a:	4a05      	ldr	r2, [pc, #20]	; (2cab0 <vli_mmod_fast_secp256r1+0x180>)
   2ca9c:	2308      	movs	r3, #8
   2ca9e:	4631      	mov	r1, r6
   2caa0:	4630      	mov	r0, r6
   2caa2:	f01d ffc9 	bl	4aa38 <uECC_vli_add>
		while (carry < 0);
   2caa6:	182d      	adds	r5, r5, r0
   2caa8:	d4f8      	bmi.n	2ca9c <vli_mmod_fast_secp256r1+0x16c>
		}
	}
}
   2caaa:	b009      	add	sp, #36	; 0x24
   2caac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2caae:	bf00      	nop
   2cab0:	000524b8 	.word	0x000524b8

0002cab4 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   2cab4:	4904      	ldr	r1, [pc, #16]	; (2cac8 <sub_bytes+0x14>)
   2cab6:	1e43      	subs	r3, r0, #1
   2cab8:	300f      	adds	r0, #15
   2caba:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2cabe:	5c8a      	ldrb	r2, [r1, r2]
   2cac0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   2cac2:	4283      	cmp	r3, r0
   2cac4:	d1f9      	bne.n	2caba <sub_bytes+0x6>
	}
}
   2cac6:	4770      	bx	lr
   2cac8:	00053f51 	.word	0x00053f51

0002cacc <tc_aes128_set_encrypt_key>:
{
   2cacc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   2cace:	4e26      	ldr	r6, [pc, #152]	; (2cb68 <tc_aes128_set_encrypt_key+0x9c>)
{
   2cad0:	4607      	mov	r7, r0
   2cad2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   2cad4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   2cad6:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   2cad8:	ad01      	add	r5, sp, #4
   2cada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2cadc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2cade:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2cae0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2cae4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   2cae8:	4638      	mov	r0, r7
   2caea:	2f00      	cmp	r7, #0
   2caec:	d038      	beq.n	2cb60 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   2caee:	2c00      	cmp	r4, #0
   2caf0:	d038      	beq.n	2cb64 <tc_aes128_set_encrypt_key+0x98>
   2caf2:	1f38      	subs	r0, r7, #4
   2caf4:	4621      	mov	r1, r4
   2caf6:	4602      	mov	r2, r0
   2caf8:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2cafa:	784b      	ldrb	r3, [r1, #1]
   2cafc:	780d      	ldrb	r5, [r1, #0]
   2cafe:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2cb00:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   2cb04:	78cd      	ldrb	r5, [r1, #3]
   2cb06:	432b      	orrs	r3, r5
   2cb08:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   2cb0a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2cb0c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   2cb10:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2cb12:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   2cb16:	d1f0      	bne.n	2cafa <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2cb18:	4c14      	ldr	r4, [pc, #80]	; (2cb6c <tc_aes128_set_encrypt_key+0xa0>)
   2cb1a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   2cb1c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   2cb1e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   2cb20:	d116      	bne.n	2cb50 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2cb22:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2cb26:	5ca5      	ldrb	r5, [r4, r2]
   2cb28:	0e1a      	lsrs	r2, r3, #24
   2cb2a:	5ca2      	ldrb	r2, [r4, r2]
   2cb2c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   2cb30:	f3c3 2507 	ubfx	r5, r3, #8, #8
   2cb34:	b2db      	uxtb	r3, r3
   2cb36:	5d65      	ldrb	r5, [r4, r5]
   2cb38:	5ce3      	ldrb	r3, [r4, r3]
   2cb3a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   2cb3e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   2cb42:	f021 0303 	bic.w	r3, r1, #3
   2cb46:	3330      	adds	r3, #48	; 0x30
   2cb48:	446b      	add	r3, sp
   2cb4a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   2cb4e:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   2cb50:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   2cb54:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   2cb56:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   2cb58:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   2cb5a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   2cb5c:	d1de      	bne.n	2cb1c <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   2cb5e:	2001      	movs	r0, #1
}
   2cb60:	b00d      	add	sp, #52	; 0x34
   2cb62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2cb64:	4620      	mov	r0, r4
   2cb66:	e7fb      	b.n	2cb60 <tc_aes128_set_encrypt_key+0x94>
   2cb68:	00051948 	.word	0x00051948
   2cb6c:	00053f51 	.word	0x00053f51

0002cb70 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   2cb70:	4901      	ldr	r1, [pc, #4]	; (2cb78 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   2cb72:	2210      	movs	r2, #16
	str	r2, [r1]
   2cb74:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   2cb76:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   2cb78:	e000ed10 	.word	0xe000ed10

0002cb7c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   2cb7c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   2cb7e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   2cb80:	f380 8811 	msr	BASEPRI, r0
	isb
   2cb84:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   2cb88:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   2cb8c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   2cb8e:	b662      	cpsie	i
	isb
   2cb90:	f3bf 8f6f 	isb	sy

	bx	lr
   2cb94:	4770      	bx	lr
   2cb96:	bf00      	nop

0002cb98 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   2cb98:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   2cb9a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   2cb9c:	f381 8811 	msr	BASEPRI, r1

	wfe
   2cba0:	bf20      	wfe

	msr	BASEPRI, r0
   2cba2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   2cba6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   2cba8:	4770      	bx	lr
   2cbaa:	bf00      	nop

0002cbac <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   2cbac:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2cbae:	2800      	cmp	r0, #0
   2cbb0:	db07      	blt.n	2cbc2 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2cbb2:	4a04      	ldr	r2, [pc, #16]	; (2cbc4 <arch_irq_enable+0x18>)
   2cbb4:	0941      	lsrs	r1, r0, #5
   2cbb6:	2301      	movs	r3, #1
   2cbb8:	f000 001f 	and.w	r0, r0, #31
   2cbbc:	4083      	lsls	r3, r0
   2cbbe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   2cbc2:	4770      	bx	lr
   2cbc4:	e000e100 	.word	0xe000e100

0002cbc8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   2cbc8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2cbca:	2800      	cmp	r0, #0
   2cbcc:	db0c      	blt.n	2cbe8 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2cbce:	0943      	lsrs	r3, r0, #5
   2cbd0:	4906      	ldr	r1, [pc, #24]	; (2cbec <arch_irq_disable+0x24>)
   2cbd2:	f000 001f 	and.w	r0, r0, #31
   2cbd6:	3320      	adds	r3, #32
   2cbd8:	2201      	movs	r2, #1
   2cbda:	4082      	lsls	r2, r0
   2cbdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   2cbe0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2cbe4:	f3bf 8f6f 	isb	sy
}
   2cbe8:	4770      	bx	lr
   2cbea:	bf00      	nop
   2cbec:	e000e100 	.word	0xe000e100

0002cbf0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   2cbf0:	4b05      	ldr	r3, [pc, #20]	; (2cc08 <arch_irq_is_enabled+0x18>)
   2cbf2:	0942      	lsrs	r2, r0, #5
   2cbf4:	f000 001f 	and.w	r0, r0, #31
   2cbf8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   2cbfc:	2301      	movs	r3, #1
   2cbfe:	fa03 f000 	lsl.w	r0, r3, r0
}
   2cc02:	4010      	ands	r0, r2
   2cc04:	4770      	bx	lr
   2cc06:	bf00      	nop
   2cc08:	e000e100 	.word	0xe000e100

0002cc0c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   2cc0c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   2cc0e:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2cc10:	bfa8      	it	ge
   2cc12:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
   2cc16:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2cc1a:	bfb8      	it	lt
   2cc1c:	4b06      	ldrlt	r3, [pc, #24]	; (2cc38 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2cc1e:	ea4f 1141 	mov.w	r1, r1, lsl #5
   2cc22:	bfac      	ite	ge
   2cc24:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2cc28:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2cc2c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2cc2e:	bfb4      	ite	lt
   2cc30:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2cc32:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
   2cc36:	4770      	bx	lr
   2cc38:	e000ed14 	.word	0xe000ed14

0002cc3c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   2cc3c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   2cc3e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   2cc40:	4b04      	ldr	r3, [pc, #16]	; (2cc54 <_arch_isr_direct_pm+0x18>)
   2cc42:	699a      	ldr	r2, [r3, #24]
   2cc44:	b11a      	cbz	r2, 2cc4e <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   2cc46:	2200      	movs	r2, #0
   2cc48:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   2cc4a:	f023 fe4a 	bl	508e2 <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   2cc4e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   2cc50:	bd08      	pop	{r3, pc}
   2cc52:	bf00      	nop
   2cc54:	200071cc 	.word	0x200071cc

0002cc58 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   2cc58:	bf30      	wfi
    b z_SysNmiOnReset
   2cc5a:	f7ff bffd 	b.w	2cc58 <z_SysNmiOnReset>
   2cc5e:	bf00      	nop

0002cc60 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2cc60:	4a0f      	ldr	r2, [pc, #60]	; (2cca0 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   2cc62:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2cc64:	4b0f      	ldr	r3, [pc, #60]	; (2cca4 <z_arm_prep_c+0x44>)
   2cc66:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   2cc6a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   2cc6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2cc70:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   2cc74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   2cc78:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   2cc7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
   2cc80:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   2cc84:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   2cc88:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   2cc8c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   2cc90:	f01a fe9a 	bl	479c8 <z_bss_zero>
	z_data_copy();
   2cc94:	f01b ff70 	bl	48b78 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   2cc98:	f000 f984 	bl	2cfa4 <z_arm_interrupt_init>
	z_cstart();
   2cc9c:	f01a fe9e 	bl	479dc <z_cstart>
   2cca0:	00026000 	.word	0x00026000
   2cca4:	e000ed00 	.word	0xe000ed00

0002cca8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   2cca8:	4a09      	ldr	r2, [pc, #36]	; (2ccd0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   2ccaa:	490a      	ldr	r1, [pc, #40]	; (2ccd4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   2ccac:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   2ccae:	6809      	ldr	r1, [r1, #0]
   2ccb0:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2ccb2:	4909      	ldr	r1, [pc, #36]	; (2ccd8 <arch_swap+0x30>)
	_current->arch.basepri = key;
   2ccb4:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2ccb6:	684b      	ldr	r3, [r1, #4]
   2ccb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2ccbc:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   2ccbe:	2300      	movs	r3, #0
   2ccc0:	f383 8811 	msr	BASEPRI, r3
   2ccc4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   2ccc8:	6893      	ldr	r3, [r2, #8]
}
   2ccca:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   2cccc:	4770      	bx	lr
   2ccce:	bf00      	nop
   2ccd0:	200071cc 	.word	0x200071cc
   2ccd4:	00053b50 	.word	0x00053b50
   2ccd8:	e000ed00 	.word	0xe000ed00

0002ccdc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   2ccdc:	490f      	ldr	r1, [pc, #60]	; (2cd1c <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   2ccde:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   2cce0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   2cce4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   2cce6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   2ccea:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2ccee:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   2ccf0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   2ccf4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   2ccf8:	4f09      	ldr	r7, [pc, #36]	; (2cd20 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   2ccfa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   2ccfe:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   2cd00:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   2cd02:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   2cd04:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   2cd06:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   2cd08:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   2cd0a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   2cd0e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   2cd12:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   2cd16:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   2cd1a:	4770      	bx	lr
    ldr r1, =_kernel
   2cd1c:	200071cc 	.word	0x200071cc
    ldr v4, =_SCS_ICSR
   2cd20:	e000ed04 	.word	0xe000ed04

0002cd24 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   2cd24:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   2cd28:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   2cd2a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   2cd2e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   2cd32:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   2cd34:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   2cd38:	2902      	cmp	r1, #2
    beq _oops
   2cd3a:	d0ff      	beq.n	2cd3c <_oops>

0002cd3c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   2cd3c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   2cd3e:	f01e fec4 	bl	4baca <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   2cd42:	bd01      	pop	{r0, pc}

0002cd44 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   2cd44:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   2cd48:	9b00      	ldr	r3, [sp, #0]
   2cd4a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   2cd4e:	490a      	ldr	r1, [pc, #40]	; (2cd78 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   2cd50:	9b01      	ldr	r3, [sp, #4]
   2cd52:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   2cd56:	9b02      	ldr	r3, [sp, #8]
   2cd58:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   2cd5c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   2cd60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   2cd64:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   2cd68:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   2cd6c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   2cd6e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   2cd70:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   2cd72:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   2cd74:	4770      	bx	lr
   2cd76:	bf00      	nop
   2cd78:	00049c5d 	.word	0x00049c5d

0002cd7c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   2cd7c:	4b07      	ldr	r3, [pc, #28]	; (2cd9c <arch_switch_to_main_thread+0x20>)
   2cd7e:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   2cd80:	4610      	mov	r0, r2
   2cd82:	f381 8809 	msr	PSP, r1
   2cd86:	2100      	movs	r1, #0
   2cd88:	b663      	cpsie	if
   2cd8a:	f381 8811 	msr	BASEPRI, r1
   2cd8e:	f3bf 8f6f 	isb	sy
   2cd92:	2200      	movs	r2, #0
   2cd94:	2300      	movs	r3, #0
   2cd96:	f01c ff61 	bl	49c5c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   2cd9a:	bf00      	nop
   2cd9c:	200071cc 	.word	0x200071cc

0002cda0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   2cda0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   2cda2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   2cda4:	4a0b      	ldr	r2, [pc, #44]	; (2cdd4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   2cda6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   2cda8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   2cdaa:	bf1e      	ittt	ne
	movne	r1, #0
   2cdac:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   2cdae:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   2cdb0:	f023 fd97 	blne	508e2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   2cdb4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   2cdb6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   2cdba:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   2cdbe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   2cdc2:	4905      	ldr	r1, [pc, #20]	; (2cdd8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   2cdc4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   2cdc6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   2cdc8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   2cdca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   2cdce:	4903      	ldr	r1, [pc, #12]	; (2cddc <_isr_wrapper+0x3c>)
	bx r1
   2cdd0:	4708      	bx	r1
   2cdd2:	0000      	.short	0x0000
	ldr r2, =_kernel
   2cdd4:	200071cc 	.word	0x200071cc
	ldr r1, =_sw_isr_table
   2cdd8:	000515fc 	.word	0x000515fc
	ldr r1, =z_arm_int_exit
   2cddc:	0002cde1 	.word	0x0002cde1

0002cde0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   2cde0:	4b04      	ldr	r3, [pc, #16]	; (2cdf4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   2cde2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   2cde4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   2cde6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   2cde8:	d003      	beq.n	2cdf2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   2cdea:	4903      	ldr	r1, [pc, #12]	; (2cdf8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   2cdec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   2cdf0:	600a      	str	r2, [r1, #0]

0002cdf2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   2cdf2:	4770      	bx	lr
	ldr r3, =_kernel
   2cdf4:	200071cc 	.word	0x200071cc
	ldr r1, =_SCS_ICSR
   2cdf8:	e000ed04 	.word	0xe000ed04

0002cdfc <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   2cdfc:	4b0d      	ldr	r3, [pc, #52]	; (2ce34 <bus_fault.constprop.0+0x38>)
   2cdfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   2ce00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   2ce02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2ce04:	0592      	lsls	r2, r2, #22
   2ce06:	d508      	bpl.n	2ce1a <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   2ce08:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   2ce0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2ce0c:	0412      	lsls	r2, r2, #16
   2ce0e:	d504      	bpl.n	2ce1a <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   2ce10:	b118      	cbz	r0, 2ce1a <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   2ce12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2ce14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   2ce18:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   2ce1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   2ce1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2ce1e:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2ce20:	4a04      	ldr	r2, [pc, #16]	; (2ce34 <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   2ce22:	bf58      	it	pl
   2ce24:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2ce26:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   2ce28:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2ce2a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   2ce2e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2ce30:	7008      	strb	r0, [r1, #0]

	return reason;
}
   2ce32:	4770      	bx	lr
   2ce34:	e000ed00 	.word	0xe000ed00

0002ce38 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   2ce38:	4b0e      	ldr	r3, [pc, #56]	; (2ce74 <mem_manage_fault.constprop.0+0x3c>)
   2ce3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   2ce3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   2ce3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2ce40:	0792      	lsls	r2, r2, #30
   2ce42:	d508      	bpl.n	2ce56 <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
   2ce44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   2ce46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2ce48:	0612      	lsls	r2, r2, #24
   2ce4a:	d504      	bpl.n	2ce56 <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
   2ce4c:	b118      	cbz	r0, 2ce56 <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   2ce4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2ce50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   2ce54:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   2ce56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2ce58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   2ce5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2ce5c:	06d2      	lsls	r2, r2, #27
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2ce5e:	4a05      	ldr	r2, [pc, #20]	; (2ce74 <mem_manage_fault.constprop.0+0x3c>)
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   2ce60:	bf58      	it	pl
   2ce62:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2ce64:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2ce66:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2ce68:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   2ce6c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2ce6e:	7008      	strb	r0, [r1, #0]
}
   2ce70:	4770      	bx	lr
   2ce72:	bf00      	nop
   2ce74:	e000ed00 	.word	0xe000ed00

0002ce78 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   2ce78:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2ce7a:	4b40      	ldr	r3, [pc, #256]	; (2cf7c <z_arm_fault+0x104>)
   2ce7c:	685b      	ldr	r3, [r3, #4]
{
   2ce7e:	b08a      	sub	sp, #40	; 0x28
   2ce80:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2ce82:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2ce86:	2500      	movs	r5, #0
   2ce88:	f385 8811 	msr	BASEPRI, r5
   2ce8c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   2ce90:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
   2ce94:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
   2ce98:	d111      	bne.n	2cebe <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   2ce9a:	f002 000c 	and.w	r0, r2, #12
   2ce9e:	2808      	cmp	r0, #8
   2cea0:	d00d      	beq.n	2cebe <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   2cea2:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   2cea4:	bf4c      	ite	mi
   2cea6:	460e      	movmi	r6, r1
			*nested_exc = true;
   2cea8:	2501      	movpl	r5, #1
	*recoverable = false;
   2ceaa:	2200      	movs	r2, #0
	switch (fault) {
   2ceac:	3b03      	subs	r3, #3
	*recoverable = false;
   2ceae:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   2ceb2:	2b03      	cmp	r3, #3
   2ceb4:	d83a      	bhi.n	2cf2c <z_arm_fault+0xb4>
   2ceb6:	e8df f003 	tbb	[pc, r3]
   2ceba:	5204      	.short	0x5204
   2cebc:	5a56      	.short	0x5a56
		return NULL;
   2cebe:	462e      	mov	r6, r5
   2cec0:	e7f3      	b.n	2ceaa <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2cec2:	4b2e      	ldr	r3, [pc, #184]	; (2cf7c <z_arm_fault+0x104>)
   2cec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2cec6:	0791      	lsls	r1, r2, #30
   2cec8:	d430      	bmi.n	2cf2c <z_arm_fault+0xb4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   2ceca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2cecc:	2a00      	cmp	r2, #0
   2cece:	db2d      	blt.n	2cf2c <z_arm_fault+0xb4>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   2ced0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ced2:	0052      	lsls	r2, r2, #1
   2ced4:	d52a      	bpl.n	2cf2c <z_arm_fault+0xb4>
	uint16_t fault_insn = *(ret_addr - 1);
   2ced6:	69b2      	ldr	r2, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   2ced8:	f832 1c02 	ldrh.w	r1, [r2, #-2]
   2cedc:	f64d 7202 	movw	r2, #57090	; 0xdf02
   2cee0:	4291      	cmp	r1, r2
   2cee2:	d009      	beq.n	2cef8 <z_arm_fault+0x80>
		} else if (SCB_MMFSR != 0) {
   2cee4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   2cee8:	b142      	cbz	r2, 2cefc <z_arm_fault+0x84>
			reason = mem_manage_fault(esf, 1, recoverable);
   2ceea:	f10d 0107 	add.w	r1, sp, #7
   2ceee:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   2cef0:	f7ff ffa2 	bl	2ce38 <mem_manage_fault.constprop.0>
   2cef4:	4604      	mov	r4, r0
		break;
   2cef6:	e01a      	b.n	2cf2e <z_arm_fault+0xb6>
			reason = esf->basic.r0;
   2cef8:	6834      	ldr	r4, [r6, #0]
   2cefa:	e018      	b.n	2cf2e <z_arm_fault+0xb6>
		} else if (SCB_BFSR != 0) {
   2cefc:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   2cf00:	b12a      	cbz	r2, 2cf0e <z_arm_fault+0x96>
			reason = bus_fault(esf, 1, recoverable);
   2cf02:	f10d 0107 	add.w	r1, sp, #7
   2cf06:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   2cf08:	f7ff ff78 	bl	2cdfc <bus_fault.constprop.0>
   2cf0c:	e7f2      	b.n	2cef4 <z_arm_fault+0x7c>
		} else if (SCB_UFSR != 0) {
   2cf0e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
   2cf10:	b292      	uxth	r2, r2
   2cf12:	b15a      	cbz	r2, 2cf2c <z_arm_fault+0xb4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2cf14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   2cf16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   2cf18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   2cf1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   2cf1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   2cf1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   2cf20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2cf22:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   2cf26:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   2cf2a:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
   2cf2c:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   2cf2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2cf32:	b993      	cbnz	r3, 2cf5a <z_arm_fault+0xe2>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   2cf34:	2220      	movs	r2, #32
   2cf36:	4631      	mov	r1, r6
   2cf38:	a802      	add	r0, sp, #8
   2cf3a:	f01e fe8d 	bl	4bc58 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   2cf3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2cf40:	b1bd      	cbz	r5, 2cf72 <z_arm_fault+0xfa>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   2cf42:	f3c3 0208 	ubfx	r2, r3, #0, #9
   2cf46:	b922      	cbnz	r2, 2cf52 <z_arm_fault+0xda>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   2cf48:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   2cf4c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2cf50:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   2cf52:	a902      	add	r1, sp, #8
   2cf54:	4620      	mov	r0, r4
   2cf56:	f01e fdb6 	bl	4bac6 <z_arm_fatal_error>
}
   2cf5a:	b00a      	add	sp, #40	; 0x28
   2cf5c:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   2cf5e:	f10d 0107 	add.w	r1, sp, #7
   2cf62:	2000      	movs	r0, #0
   2cf64:	e7c4      	b.n	2cef0 <z_arm_fault+0x78>
		reason = bus_fault(esf, 0, recoverable);
   2cf66:	f10d 0107 	add.w	r1, sp, #7
   2cf6a:	2000      	movs	r0, #0
   2cf6c:	e7cc      	b.n	2cf08 <z_arm_fault+0x90>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2cf6e:	4b03      	ldr	r3, [pc, #12]	; (2cf7c <z_arm_fault+0x104>)
   2cf70:	e7d0      	b.n	2cf14 <z_arm_fault+0x9c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2cf72:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   2cf76:	f023 0301 	bic.w	r3, r3, #1
   2cf7a:	e7e9      	b.n	2cf50 <z_arm_fault+0xd8>
   2cf7c:	e000ed00 	.word	0xe000ed00

0002cf80 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   2cf80:	4a02      	ldr	r2, [pc, #8]	; (2cf8c <z_arm_fault_init+0xc>)
   2cf82:	6953      	ldr	r3, [r2, #20]
   2cf84:	f043 0310 	orr.w	r3, r3, #16
   2cf88:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   2cf8a:	4770      	bx	lr
   2cf8c:	e000ed00 	.word	0xe000ed00

0002cf90 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   2cf90:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   2cf94:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   2cf98:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   2cf9a:	4672      	mov	r2, lr
	bl z_arm_fault
   2cf9c:	f7ff ff6c 	bl	2ce78 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   2cfa0:	bd01      	pop	{r0, pc}
   2cfa2:	bf00      	nop

0002cfa4 <z_arm_interrupt_init>:
   2cfa4:	4804      	ldr	r0, [pc, #16]	; (2cfb8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   2cfa6:	2300      	movs	r3, #0
   2cfa8:	2120      	movs	r1, #32
   2cfaa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   2cfac:	3301      	adds	r3, #1
   2cfae:	2b30      	cmp	r3, #48	; 0x30
   2cfb0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   2cfb4:	d1f9      	bne.n	2cfaa <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   2cfb6:	4770      	bx	lr
   2cfb8:	e000e100 	.word	0xe000e100

0002cfbc <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   2cfbc:	f024 f990 	bl	512e0 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2cfc0:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2cfc2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   2cfc6:	4808      	ldr	r0, [pc, #32]	; (2cfe8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   2cfc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   2cfcc:	1840      	adds	r0, r0, r1
    msr PSP, r0
   2cfce:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   2cfd2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   2cfd6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   2cfd8:	4308      	orrs	r0, r1
    msr CONTROL, r0
   2cfda:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   2cfde:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   2cfe2:	f7ff fe3d 	bl	2cc60 <z_arm_prep_c>
   2cfe6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   2cfe8:	200096a8 	.word	0x200096a8

0002cfec <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   2cfec:	4b06      	ldr	r3, [pc, #24]	; (2d008 <z_impl_k_thread_abort+0x1c>)
   2cfee:	689b      	ldr	r3, [r3, #8]
   2cff0:	4283      	cmp	r3, r0
   2cff2:	d107      	bne.n	2d004 <z_impl_k_thread_abort+0x18>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2cff4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   2cff8:	b123      	cbz	r3, 2d004 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2cffa:	4a04      	ldr	r2, [pc, #16]	; (2d00c <z_impl_k_thread_abort+0x20>)
   2cffc:	6853      	ldr	r3, [r2, #4]
   2cffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2d002:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   2d004:	f01b bd54 	b.w	48ab0 <z_thread_abort>
   2d008:	200071cc 	.word	0x200071cc
   2d00c:	e000ed00 	.word	0xe000ed00

0002d010 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   2d010:	4b02      	ldr	r3, [pc, #8]	; (2d01c <z_arm_configure_static_mpu_regions+0xc>)
   2d012:	4a03      	ldr	r2, [pc, #12]	; (2d020 <z_arm_configure_static_mpu_regions+0x10>)
   2d014:	4803      	ldr	r0, [pc, #12]	; (2d024 <z_arm_configure_static_mpu_regions+0x14>)
   2d016:	2101      	movs	r1, #1
   2d018:	f000 b860 	b.w	2d0dc <arm_core_mpu_configure_static_mpu_regions>
   2d01c:	20040000 	.word	0x20040000
   2d020:	20000000 	.word	0x20000000
   2d024:	00052564 	.word	0x00052564

0002d028 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   2d028:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   2d02a:	4e20      	ldr	r6, [pc, #128]	; (2d0ac <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   2d02c:	2500      	movs	r5, #0
   2d02e:	428d      	cmp	r5, r1
   2d030:	db01      	blt.n	2d036 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   2d032:	4610      	mov	r0, r2
   2d034:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   2d036:	6844      	ldr	r4, [r0, #4]
   2d038:	b374      	cbz	r4, 2d098 <mpu_configure_regions+0x70>
		if (do_sanity_check &&
   2d03a:	b153      	cbz	r3, 2d052 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   2d03c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   2d040:	ea14 0f0c 	tst.w	r4, ip
   2d044:	d12f      	bne.n	2d0a6 <mpu_configure_regions+0x7e>
		&&
   2d046:	2c1f      	cmp	r4, #31
   2d048:	d92d      	bls.n	2d0a6 <mpu_configure_regions+0x7e>
		((part->start & (part->size - 1U)) == 0U);
   2d04a:	6807      	ldr	r7, [r0, #0]
		&&
   2d04c:	ea1c 0f07 	tst.w	ip, r7
   2d050:	d129      	bne.n	2d0a6 <mpu_configure_regions+0x7e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   2d052:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   2d054:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2d056:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   2d05a:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
   2d05e:	d91e      	bls.n	2d09e <mpu_configure_regions+0x76>
	if (size > (1UL << 31)) {
   2d060:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   2d064:	d81d      	bhi.n	2d0a2 <mpu_configure_regions+0x7a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   2d066:	3c01      	subs	r4, #1
   2d068:	fab4 f484 	clz	r4, r4
   2d06c:	f1c4 041f 	rsb	r4, r4, #31
   2d070:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   2d072:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2d076:	ea4c 0c04 	orr.w	ip, ip, r4
   2d07a:	d814      	bhi.n	2d0a6 <mpu_configure_regions+0x7e>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2d07c:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
   2d080:	4314      	orrs	r4, r2
   2d082:	f044 0410 	orr.w	r4, r4, #16
   2d086:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2d08a:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2d08e:	f04c 0401 	orr.w	r4, ip, #1
   2d092:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
   2d096:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
   2d098:	3501      	adds	r5, #1
   2d09a:	300c      	adds	r0, #12
   2d09c:	e7c7      	b.n	2d02e <mpu_configure_regions+0x6>
		return REGION_32B;
   2d09e:	2408      	movs	r4, #8
   2d0a0:	e7e7      	b.n	2d072 <mpu_configure_regions+0x4a>
		return REGION_4G;
   2d0a2:	243e      	movs	r4, #62	; 0x3e
   2d0a4:	e7e5      	b.n	2d072 <mpu_configure_regions+0x4a>
			return -EINVAL;
   2d0a6:	f06f 0215 	mvn.w	r2, #21
   2d0aa:	e7c2      	b.n	2d032 <mpu_configure_regions+0xa>
   2d0ac:	e000ed00 	.word	0xe000ed00

0002d0b0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   2d0b0:	4b04      	ldr	r3, [pc, #16]	; (2d0c4 <arm_core_mpu_enable+0x14>)
   2d0b2:	2205      	movs	r2, #5
   2d0b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   2d0b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2d0bc:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   2d0c0:	4770      	bx	lr
   2d0c2:	bf00      	nop
   2d0c4:	e000ed00 	.word	0xe000ed00

0002d0c8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   2d0c8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   2d0cc:	4b02      	ldr	r3, [pc, #8]	; (2d0d8 <arm_core_mpu_disable+0x10>)
   2d0ce:	2200      	movs	r2, #0
   2d0d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   2d0d4:	4770      	bx	lr
   2d0d6:	bf00      	nop
   2d0d8:	e000ed00 	.word	0xe000ed00

0002d0dc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   2d0dc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   2d0de:	4c03      	ldr	r4, [pc, #12]	; (2d0ec <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   2d0e0:	2301      	movs	r3, #1
   2d0e2:	7822      	ldrb	r2, [r4, #0]
   2d0e4:	f7ff ffa0 	bl	2d028 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   2d0e8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   2d0ea:	bd10      	pop	{r4, pc}
   2d0ec:	2000736c 	.word	0x2000736c

0002d0f0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   2d0f0:	4914      	ldr	r1, [pc, #80]	; (2d144 <z_arm_mpu_init+0x54>)
   2d0f2:	6808      	ldr	r0, [r1, #0]
   2d0f4:	2808      	cmp	r0, #8
{
   2d0f6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   2d0f8:	d821      	bhi.n	2d13e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   2d0fa:	f7ff ffe5 	bl	2d0c8 <arm_core_mpu_disable>
   2d0fe:	4c12      	ldr	r4, [pc, #72]	; (2d148 <z_arm_mpu_init+0x58>)
   2d100:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2d102:	2200      	movs	r2, #0
   2d104:	4290      	cmp	r0, r2
   2d106:	f101 010c 	add.w	r1, r1, #12
   2d10a:	d105      	bne.n	2d118 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   2d10c:	4b0f      	ldr	r3, [pc, #60]	; (2d14c <z_arm_mpu_init+0x5c>)
   2d10e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   2d110:	f7ff ffce 	bl	2d0b0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   2d114:	2000      	movs	r0, #0
}
   2d116:	bd10      	pop	{r4, pc}
   2d118:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2d11c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   2d120:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   2d124:	4313      	orrs	r3, r2
   2d126:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2d12a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2d12e:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2d132:	f043 0301 	orr.w	r3, r3, #1
   2d136:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2d13a:	3201      	adds	r2, #1
   2d13c:	e7e2      	b.n	2d104 <z_arm_mpu_init+0x14>
		return -1;
   2d13e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d142:	e7e8      	b.n	2d116 <z_arm_mpu_init+0x26>
   2d144:	00052570 	.word	0x00052570
   2d148:	e000ed00 	.word	0xe000ed00
   2d14c:	2000736c 	.word	0x2000736c

0002d150 <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *ZRESTRICT str, const char *ZRESTRICT format, ...)
{
   2d150:	b40e      	push	{r1, r2, r3}
   2d152:	b50f      	push	{r0, r1, r2, r3, lr}
   2d154:	ab05      	add	r3, sp, #20

	struct emitter p;
	int     r;

	p.ptr = str;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   2d156:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   2d15a:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = str;
   2d15e:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   2d160:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   2d162:	4806      	ldr	r0, [pc, #24]	; (2d17c <sprintf+0x2c>)
	va_start(vargs, format);
   2d164:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   2d166:	a902      	add	r1, sp, #8
   2d168:	f7fd fd16 	bl	2ab98 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
   2d16c:	9b02      	ldr	r3, [sp, #8]
   2d16e:	2200      	movs	r2, #0
   2d170:	701a      	strb	r2, [r3, #0]
	return r;
}
   2d172:	b004      	add	sp, #16
   2d174:	f85d eb04 	ldr.w	lr, [sp], #4
   2d178:	b003      	add	sp, #12
   2d17a:	4770      	bx	lr
   2d17c:	0004bc81 	.word	0x0004bc81

0002d180 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   2d180:	f04f 0320 	mov.w	r3, #32
   2d184:	f3ef 8211 	mrs	r2, BASEPRI
   2d188:	f383 8812 	msr	BASEPRI_MAX, r3
   2d18c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   2d190:	4906      	ldr	r1, [pc, #24]	; (2d1ac <nordicsemi_nrf52_init+0x2c>)
   2d192:	2301      	movs	r3, #1
   2d194:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   2d198:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   2d19c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   2d1a0:	f382 8811 	msr	BASEPRI, r2
   2d1a4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   2d1a8:	2000      	movs	r0, #0
   2d1aa:	4770      	bx	lr
   2d1ac:	4001e000 	.word	0x4001e000

0002d1b0 <sys_arch_reboot>:
    *p_gpregret = val;
   2d1b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2d1b4:	b2c0      	uxtb	r0, r0
   2d1b6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   2d1ba:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2d1be:	4905      	ldr	r1, [pc, #20]	; (2d1d4 <sys_arch_reboot+0x24>)
   2d1c0:	4b05      	ldr	r3, [pc, #20]	; (2d1d8 <sys_arch_reboot+0x28>)
   2d1c2:	68ca      	ldr	r2, [r1, #12]
   2d1c4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2d1c8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2d1ca:	60cb      	str	r3, [r1, #12]
   2d1cc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   2d1d0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   2d1d2:	e7fd      	b.n	2d1d0 <sys_arch_reboot+0x20>
   2d1d4:	e000ed00 	.word	0xe000ed00
   2d1d8:	05fa0004 	.word	0x05fa0004

0002d1dc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   2d1dc:	b120      	cbz	r0, 2d1e8 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   2d1de:	4b03      	ldr	r3, [pc, #12]	; (2d1ec <arch_busy_wait+0x10>)
   2d1e0:	0180      	lsls	r0, r0, #6
   2d1e2:	f043 0301 	orr.w	r3, r3, #1
   2d1e6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   2d1e8:	4770      	bx	lr
   2d1ea:	bf00      	nop
   2d1ec:	000519e0 	.word	0x000519e0

0002d1f0 <pinmux_borne_init>:
#include <devicetree.h>

#define CHARGE_CTRL_1 26
#define CHARGE_CTRL_2 4

static int pinmux_borne_init(const struct device *port) {
   2d1f0:	b510      	push	{r4, lr}
   2d1f2:	4816      	ldr	r0, [pc, #88]	; (2d24c <pinmux_borne_init+0x5c>)
   2d1f4:	f01a fb74 	bl	478e0 <z_impl_device_get_binding>
   2d1f8:	4604      	mov	r4, r0
   2d1fa:	4815      	ldr	r0, [pc, #84]	; (2d250 <pinmux_borne_init+0x60>)
   2d1fc:	f01a fb70 	bl	478e0 <z_impl_device_get_binding>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   2d200:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
   2d202:	68a1      	ldr	r1, [r4, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2d204:	6813      	ldr	r3, [r2, #0]
   2d206:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   2d20a:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
   2d20c:	4620      	mov	r0, r4
   2d20e:	680b      	ldr	r3, [r1, #0]
   2d210:	f44f 7200 	mov.w	r2, #512	; 0x200
   2d214:	211a      	movs	r1, #26
   2d216:	4798      	blx	r3

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2d218:	6923      	ldr	r3, [r4, #16]
   2d21a:	681b      	ldr	r3, [r3, #0]
   2d21c:	015b      	lsls	r3, r3, #5
	return api->port_clear_bits_raw(port, pins);
   2d21e:	68a3      	ldr	r3, [r4, #8]
	return api->port_set_bits_raw(port, pins);
   2d220:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	return api->port_clear_bits_raw(port, pins);
   2d224:	bf54      	ite	pl
   2d226:	691b      	ldrpl	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
   2d228:	68db      	ldrmi	r3, [r3, #12]
   2d22a:	4620      	mov	r0, r4
   2d22c:	4798      	blx	r3
	struct gpio_driver_data *data =
   2d22e:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
   2d230:	68a1      	ldr	r1, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2d232:	6813      	ldr	r3, [r2, #0]
   2d234:	f023 0310 	bic.w	r3, r3, #16
   2d238:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   2d23a:	4620      	mov	r0, r4
   2d23c:	680b      	ldr	r3, [r1, #0]
   2d23e:	f44f 7280 	mov.w	r2, #256	; 0x100
   2d242:	2104      	movs	r1, #4
   2d244:	4798      	blx	r3
    gpio_pin_configure(p0, CHARGE_CTRL_1, GPIO_INPUT);
    gpio_pin_configure(p0, CHARGE_CTRL_2, GPIO_INPUT);
#endif
#endif
    return 0;
}
   2d246:	2000      	movs	r0, #0
   2d248:	bd10      	pop	{r4, pc}
   2d24a:	bf00      	nop
   2d24c:	00054060 	.word	0x00054060
   2d250:	00054067 	.word	0x00054067

0002d254 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   2d254:	b570      	push	{r4, r5, r6, lr}
   2d256:	4c21      	ldr	r4, [pc, #132]	; (2d2dc <le_gen_dhkey+0x88>)
   2d258:	f3bf 8f5b 	dmb	ish
   2d25c:	6823      	ldr	r3, [r4, #0]
   2d25e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2d262:	07da      	lsls	r2, r3, #31
{
   2d264:	4606      	mov	r6, r0
   2d266:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2d268:	d501      	bpl.n	2d26e <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   2d26a:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
   2d26c:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2d26e:	2901      	cmp	r1, #1
   2d270:	d831      	bhi.n	2d2d6 <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d272:	f3bf 8f5b 	dmb	ish
   2d276:	e854 3f00 	ldrex	r3, [r4]
   2d27a:	f043 0202 	orr.w	r2, r3, #2
   2d27e:	e844 2100 	strex	r1, r2, [r4]
   2d282:	2900      	cmp	r1, #0
   2d284:	d1f7      	bne.n	2d276 <le_gen_dhkey+0x22>
   2d286:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   2d28a:	079b      	lsls	r3, r3, #30
   2d28c:	d4ed      	bmi.n	2d26a <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
   2d28e:	4814      	ldr	r0, [pc, #80]	; (2d2e0 <le_gen_dhkey+0x8c>)
   2d290:	4631      	mov	r1, r6
   2d292:	f01e fd8b 	bl	4bdac <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
   2d296:	4813      	ldr	r0, [pc, #76]	; (2d2e4 <le_gen_dhkey+0x90>)
   2d298:	f106 0120 	add.w	r1, r6, #32
   2d29c:	f01e fd86 	bl	4bdac <sys_memcpy_swap.constprop.0>
   2d2a0:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   2d2a4:	b175      	cbz	r5, 2d2c4 <le_gen_dhkey+0x70>
   2d2a6:	e854 3f00 	ldrex	r3, [r4]
   2d2aa:	f043 0304 	orr.w	r3, r3, #4
   2d2ae:	e844 3200 	strex	r2, r3, [r4]
   2d2b2:	2a00      	cmp	r2, #0
   2d2b4:	d1f7      	bne.n	2d2a6 <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d2b6:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
   2d2ba:	480b      	ldr	r0, [pc, #44]	; (2d2e8 <le_gen_dhkey+0x94>)
   2d2bc:	f01a fed8 	bl	48070 <z_impl_k_sem_give>
   2d2c0:	2000      	movs	r0, #0
   2d2c2:	e7d3      	b.n	2d26c <le_gen_dhkey+0x18>
   2d2c4:	e854 3f00 	ldrex	r3, [r4]
   2d2c8:	f023 0304 	bic.w	r3, r3, #4
   2d2cc:	e844 3200 	strex	r2, r3, [r4]
   2d2d0:	2a00      	cmp	r2, #0
   2d2d2:	d0f0      	beq.n	2d2b6 <le_gen_dhkey+0x62>
   2d2d4:	e7f6      	b.n	2d2c4 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   2d2d6:	2012      	movs	r0, #18
   2d2d8:	e7c8      	b.n	2d26c <le_gen_dhkey+0x18>
   2d2da:	bf00      	nop
   2d2dc:	20004594 	.word	0x20004594
   2d2e0:	2000738d 	.word	0x2000738d
   2d2e4:	200073ad 	.word	0x200073ad
   2d2e8:	2000128c 	.word	0x2000128c

0002d2ec <ecc_thread>:
{
   2d2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   2d2f0:	4f5f      	ldr	r7, [pc, #380]	; (2d470 <ecc_thread+0x184>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d2f2:	4d60      	ldr	r5, [pc, #384]	; (2d474 <ecc_thread+0x188>)
   2d2f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d2f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d2fc:	4638      	mov	r0, r7
   2d2fe:	f01a fedd 	bl	480bc <z_impl_k_sem_take>
   2d302:	f3bf 8f5b 	dmb	ish
   2d306:	682c      	ldr	r4, [r5, #0]
   2d308:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2d30c:	f014 0401 	ands.w	r4, r4, #1
   2d310:	d055      	beq.n	2d3be <ecc_thread+0xd2>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   2d312:	f8df 8164 	ldr.w	r8, [pc, #356]	; 2d478 <ecc_thread+0x18c>
   2d316:	4c59      	ldr	r4, [pc, #356]	; (2d47c <ecc_thread+0x190>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   2d318:	4e59      	ldr	r6, [pc, #356]	; (2d480 <ecc_thread+0x194>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   2d31a:	485a      	ldr	r0, [pc, #360]	; (2d484 <ecc_thread+0x198>)
   2d31c:	4642      	mov	r2, r8
   2d31e:	4621      	mov	r1, r4
   2d320:	f01d fade 	bl	4a8e0 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   2d324:	2800      	cmp	r0, #0
   2d326:	d03e      	beq.n	2d3a6 <ecc_thread+0xba>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   2d328:	2220      	movs	r2, #32
   2d32a:	4631      	mov	r1, r6
   2d32c:	4620      	mov	r0, r4
   2d32e:	f01e fc83 	bl	4bc38 <memcmp>
   2d332:	2800      	cmp	r0, #0
   2d334:	d0f1      	beq.n	2d31a <ecc_thread+0x2e>
	return 0;
   2d336:	f04f 0800 	mov.w	r8, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2d33a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d33e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d342:	2001      	movs	r0, #1
   2d344:	f000 fa6c 	bl	2d820 <bt_buf_get_rx>
   2d348:	f100 0608 	add.w	r6, r0, #8
   2d34c:	2102      	movs	r1, #2
   2d34e:	4604      	mov	r4, r0
   2d350:	4630      	mov	r0, r6
   2d352:	f022 fc62 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2d356:	233e      	movs	r3, #62	; 0x3e
   2d358:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2d35a:	2342      	movs	r3, #66	; 0x42
   2d35c:	7043      	strb	r3, [r0, #1]
   2d35e:	2101      	movs	r1, #1
   2d360:	4630      	mov	r0, r6
   2d362:	f022 fc5a 	bl	4fc1a <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   2d366:	2308      	movs	r3, #8
   2d368:	7003      	strb	r3, [r0, #0]
   2d36a:	2141      	movs	r1, #65	; 0x41
   2d36c:	4630      	mov	r0, r6
   2d36e:	f022 fc54 	bl	4fc1a <net_buf_simple_add>
   2d372:	4606      	mov	r6, r0
	evt->status = status;
   2d374:	f800 8b01 	strb.w	r8, [r0], #1
	if (status) {
   2d378:	f1b8 0f00 	cmp.w	r8, #0
   2d37c:	d016      	beq.n	2d3ac <ecc_thread+0xc0>
		(void)memset(evt->key, 0, sizeof(evt->key));
   2d37e:	2240      	movs	r2, #64	; 0x40
   2d380:	2100      	movs	r1, #0
   2d382:	f01e fc74 	bl	4bc6e <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d386:	f3bf 8f5b 	dmb	ish
   2d38a:	e855 3f00 	ldrex	r3, [r5]
   2d38e:	f023 0301 	bic.w	r3, r3, #1
   2d392:	e845 3200 	strex	r2, r3, [r5]
   2d396:	2a00      	cmp	r2, #0
   2d398:	d1f7      	bne.n	2d38a <ecc_thread+0x9e>
   2d39a:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   2d39e:	4620      	mov	r0, r4
	bt_recv(buf);
   2d3a0:	f000 ff96 	bl	2e2d0 <bt_recv>
	while (true) {
   2d3a4:	e7a6      	b.n	2d2f4 <ecc_thread+0x8>
			return BT_HCI_ERR_UNSPECIFIED;
   2d3a6:	f04f 081f 	mov.w	r8, #31
   2d3aa:	e7c6      	b.n	2d33a <ecc_thread+0x4e>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
   2d3ac:	4935      	ldr	r1, [pc, #212]	; (2d484 <ecc_thread+0x198>)
   2d3ae:	f01e fcfd 	bl	4bdac <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
   2d3b2:	3120      	adds	r1, #32
   2d3b4:	f106 0021 	add.w	r0, r6, #33	; 0x21
   2d3b8:	f01e fcf8 	bl	4bdac <sys_memcpy_swap.constprop.0>
   2d3bc:	e7e3      	b.n	2d386 <ecc_thread+0x9a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d3be:	f3bf 8f5b 	dmb	ish
   2d3c2:	682b      	ldr	r3, [r5, #0]
   2d3c4:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   2d3c8:	079b      	lsls	r3, r3, #30
   2d3ca:	d593      	bpl.n	2d2f4 <ecc_thread+0x8>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   2d3cc:	492a      	ldr	r1, [pc, #168]	; (2d478 <ecc_thread+0x18c>)
   2d3ce:	482d      	ldr	r0, [pc, #180]	; (2d484 <ecc_thread+0x198>)
   2d3d0:	f01e f944 	bl	4b65c <uECC_valid_public_key>
	if (ret < 0) {
   2d3d4:	2800      	cmp	r0, #0
   2d3d6:	db11      	blt.n	2d3fc <ecc_thread+0x110>
   2d3d8:	f3bf 8f5b 	dmb	ish
		ret = uECC_shared_secret(ecc.public_key_be,
   2d3dc:	4927      	ldr	r1, [pc, #156]	; (2d47c <ecc_thread+0x190>)
   2d3de:	682b      	ldr	r3, [r5, #0]
   2d3e0:	4827      	ldr	r0, [pc, #156]	; (2d480 <ecc_thread+0x194>)
   2d3e2:	f3bf 8f5b 	dmb	ish
   2d3e6:	f013 0f04 	tst.w	r3, #4
   2d3ea:	f101 0220 	add.w	r2, r1, #32
   2d3ee:	4b22      	ldr	r3, [pc, #136]	; (2d478 <ecc_thread+0x18c>)
   2d3f0:	bf18      	it	ne
   2d3f2:	4601      	movne	r1, r0
   2d3f4:	4610      	mov	r0, r2
   2d3f6:	f01d fac2 	bl	4a97e <uECC_shared_secret>
   2d3fa:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2d3fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d400:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d404:	2001      	movs	r0, #1
   2d406:	f000 fa0b 	bl	2d820 <bt_buf_get_rx>
   2d40a:	f100 0808 	add.w	r8, r0, #8
   2d40e:	2102      	movs	r1, #2
   2d410:	4606      	mov	r6, r0
   2d412:	4640      	mov	r0, r8
   2d414:	f022 fc01 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2d418:	233e      	movs	r3, #62	; 0x3e
   2d41a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2d41c:	2322      	movs	r3, #34	; 0x22
   2d41e:	7043      	strb	r3, [r0, #1]
   2d420:	2101      	movs	r1, #1
   2d422:	4640      	mov	r0, r8
   2d424:	f022 fbf9 	bl	4fc1a <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   2d428:	2309      	movs	r3, #9
   2d42a:	7003      	strb	r3, [r0, #0]
   2d42c:	2121      	movs	r1, #33	; 0x21
   2d42e:	4640      	mov	r0, r8
   2d430:	f022 fbf3 	bl	4fc1a <net_buf_simple_add>
   2d434:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   2d436:	3001      	adds	r0, #1
   2d438:	b99c      	cbnz	r4, 2d462 <ecc_thread+0x176>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   2d43a:	221f      	movs	r2, #31
   2d43c:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   2d43e:	21ff      	movs	r1, #255	; 0xff
   2d440:	2220      	movs	r2, #32
   2d442:	f01e fc14 	bl	4bc6e <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d446:	f3bf 8f5b 	dmb	ish
   2d44a:	e855 3f00 	ldrex	r3, [r5]
   2d44e:	f023 0302 	bic.w	r3, r3, #2
   2d452:	e845 3200 	strex	r2, r3, [r5]
   2d456:	2a00      	cmp	r2, #0
   2d458:	d1f7      	bne.n	2d44a <ecc_thread+0x15e>
   2d45a:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   2d45e:	4630      	mov	r0, r6
   2d460:	e79e      	b.n	2d3a0 <ecc_thread+0xb4>
		evt->status = 0U;
   2d462:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   2d464:	4907      	ldr	r1, [pc, #28]	; (2d484 <ecc_thread+0x198>)
		evt->status = 0U;
   2d466:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   2d468:	f01e fca0 	bl	4bdac <sys_memcpy_swap.constprop.0>
   2d46c:	e7eb      	b.n	2d446 <ecc_thread+0x15a>
   2d46e:	bf00      	nop
   2d470:	2000128c 	.word	0x2000128c
   2d474:	20004594 	.word	0x20004594
   2d478:	00052590 	.word	0x00052590
   2d47c:	2000736d 	.word	0x2000736d
   2d480:	00054075 	.word	0x00054075
   2d484:	2000738d 	.word	0x2000738d

0002d488 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   2d488:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2d48a:	7d06      	ldrb	r6, [r0, #20]
   2d48c:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   2d48e:	b976      	cbnz	r6, 2d4ae <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   2d490:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   2d492:	881d      	ldrh	r5, [r3, #0]
   2d494:	f242 0226 	movw	r2, #8230	; 0x2026
   2d498:	4295      	cmp	r5, r2
   2d49a:	d045      	beq.n	2d528 <bt_hci_ecc_send+0xa0>
   2d49c:	d80f      	bhi.n	2d4be <bt_hci_ecc_send+0x36>
   2d49e:	f242 0201 	movw	r2, #8193	; 0x2001
   2d4a2:	4295      	cmp	r5, r2
   2d4a4:	d04f      	beq.n	2d546 <bt_hci_ecc_send+0xbe>
   2d4a6:	f242 0325 	movw	r3, #8229	; 0x2025
   2d4aa:	429d      	cmp	r5, r3
   2d4ac:	d013      	beq.n	2d4d6 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   2d4ae:	4b2a      	ldr	r3, [pc, #168]	; (2d558 <bt_hci_ecc_send+0xd0>)
   2d4b0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   2d4b4:	4620      	mov	r0, r4
   2d4b6:	691b      	ldr	r3, [r3, #16]
}
   2d4b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   2d4bc:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   2d4be:	f242 035e 	movw	r3, #8286	; 0x205e
   2d4c2:	429d      	cmp	r5, r3
   2d4c4:	d1f3      	bne.n	2d4ae <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   2d4c6:	2103      	movs	r1, #3
   2d4c8:	3008      	adds	r0, #8
   2d4ca:	f022 fbcf 	bl	4fc6c <net_buf_simple_pull>
	cmd = (void *)buf->data;
   2d4ce:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   2d4d0:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2d4d4:	e02e      	b.n	2d534 <bt_hci_ecc_send+0xac>
   2d4d6:	2103      	movs	r1, #3
   2d4d8:	3008      	adds	r0, #8
   2d4da:	f022 fbc7 	bl	4fc6c <net_buf_simple_pull>
	net_buf_unref(buf);
   2d4de:	4620      	mov	r0, r4
   2d4e0:	f016 fa34 	bl	4394c <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d4e4:	f3bf 8f5b 	dmb	ish
   2d4e8:	4b1c      	ldr	r3, [pc, #112]	; (2d55c <bt_hci_ecc_send+0xd4>)
   2d4ea:	681a      	ldr	r2, [r3, #0]
   2d4ec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   2d4f0:	0792      	lsls	r2, r2, #30
   2d4f2:	d507      	bpl.n	2d504 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   2d4f4:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   2d4f6:	4631      	mov	r1, r6
   2d4f8:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   2d4fc:	f01e fc32 	bl	4bd64 <send_cmd_status>
}
   2d500:	2000      	movs	r0, #0
   2d502:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d504:	f3bf 8f5b 	dmb	ish
   2d508:	e853 2f00 	ldrex	r2, [r3]
   2d50c:	f042 0101 	orr.w	r1, r2, #1
   2d510:	e843 1000 	strex	r0, r1, [r3]
   2d514:	2800      	cmp	r0, #0
   2d516:	d1f7      	bne.n	2d508 <bt_hci_ecc_send+0x80>
   2d518:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   2d51c:	07d3      	lsls	r3, r2, #31
   2d51e:	d4e9      	bmi.n	2d4f4 <bt_hci_ecc_send+0x6c>
	z_impl_k_sem_give(sem);
   2d520:	480f      	ldr	r0, [pc, #60]	; (2d560 <bt_hci_ecc_send+0xd8>)
   2d522:	f01a fda5 	bl	48070 <z_impl_k_sem_give>
}
   2d526:	e7e6      	b.n	2d4f6 <bt_hci_ecc_send+0x6e>
   2d528:	2103      	movs	r1, #3
   2d52a:	3008      	adds	r0, #8
   2d52c:	f022 fb9e 	bl	4fc6c <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   2d530:	68a0      	ldr	r0, [r4, #8]
   2d532:	4631      	mov	r1, r6
   2d534:	f7ff fe8e 	bl	2d254 <le_gen_dhkey>
   2d538:	4606      	mov	r6, r0
	net_buf_unref(buf);
   2d53a:	4620      	mov	r0, r4
   2d53c:	f016 fa06 	bl	4394c <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   2d540:	4631      	mov	r1, r6
   2d542:	4628      	mov	r0, r5
   2d544:	e7da      	b.n	2d4fc <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   2d546:	78da      	ldrb	r2, [r3, #3]
   2d548:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2d54c:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   2d54e:	791a      	ldrb	r2, [r3, #4]
   2d550:	f022 0201 	bic.w	r2, r2, #1
   2d554:	711a      	strb	r2, [r3, #4]
}
   2d556:	e7aa      	b.n	2d4ae <bt_hci_ecc_send+0x26>
   2d558:	20000030 	.word	0x20000030
   2d55c:	20004594 	.word	0x20004594
   2d560:	2000128c 	.word	0x2000128c

0002d564 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   2d564:	b510      	push	{r4, lr}
   2d566:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2d568:	4c0c      	ldr	r4, [pc, #48]	; (2d59c <bt_hci_ecc_init+0x38>)
   2d56a:	490d      	ldr	r1, [pc, #52]	; (2d5a0 <bt_hci_ecc_init+0x3c>)
   2d56c:	2200      	movs	r2, #0
   2d56e:	2300      	movs	r3, #0
   2d570:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2d574:	2300      	movs	r3, #0
   2d576:	220a      	movs	r2, #10
   2d578:	e9cd 2303 	strd	r2, r3, [sp, #12]
   2d57c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2d580:	9300      	str	r3, [sp, #0]
   2d582:	f44f 628f 	mov.w	r2, #1144	; 0x478
   2d586:	4b07      	ldr	r3, [pc, #28]	; (2d5a4 <bt_hci_ecc_init+0x40>)
   2d588:	4620      	mov	r0, r4
   2d58a:	f01a fb2f 	bl	47bec <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2d58e:	4906      	ldr	r1, [pc, #24]	; (2d5a8 <bt_hci_ecc_init+0x44>)
   2d590:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   2d592:	b008      	add	sp, #32
   2d594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d598:	f023 b99e 	b.w	508d8 <z_impl_k_thread_name_set>
   2d59c:	20001a20 	.word	0x20001a20
   2d5a0:	20007828 	.word	0x20007828
   2d5a4:	0002d2ed 	.word	0x0002d2ed
   2d5a8:	0005406e 	.word	0x0005406e

0002d5ac <save_id>:
static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   2d5ac:	4903      	ldr	r1, [pc, #12]	; (2d5bc <save_id+0x10>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   2d5ae:	4804      	ldr	r0, [pc, #16]	; (2d5c0 <save_id+0x14>)
   2d5b0:	79ca      	ldrb	r2, [r1, #7]
   2d5b2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   2d5b6:	f7fe be4b 	b.w	2c250 <settings_save_one>
   2d5ba:	bf00      	nop
   2d5bc:	20000030 	.word	0x20000030
   2d5c0:	00054095 	.word	0x00054095

0002d5c4 <set>:
{
   2d5c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d5c6:	4616      	mov	r6, r2
   2d5c8:	461f      	mov	r7, r3
	if (!name) {
   2d5ca:	4604      	mov	r4, r0
   2d5cc:	b920      	cbnz	r0, 2d5d8 <set+0x14>
		return -ENOENT;
   2d5ce:	f06f 0401 	mvn.w	r4, #1
}
   2d5d2:	4620      	mov	r0, r4
   2d5d4:	b003      	add	sp, #12
   2d5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = settings_name_next(name, &next);
   2d5d8:	a901      	add	r1, sp, #4
   2d5da:	f01d f86c 	bl	4a6b6 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   2d5de:	4911      	ldr	r1, [pc, #68]	; (2d624 <set+0x60>)
	len = settings_name_next(name, &next);
   2d5e0:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   2d5e2:	4620      	mov	r0, r4
   2d5e4:	f01e fb14 	bl	4bc10 <strncmp>
   2d5e8:	4604      	mov	r4, r0
   2d5ea:	2800      	cmp	r0, #0
   2d5ec:	d1ef      	bne.n	2d5ce <set+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d5ee:	f3bf 8f5b 	dmb	ish
   2d5f2:	4d0d      	ldr	r5, [pc, #52]	; (2d628 <set+0x64>)
   2d5f4:	682b      	ldr	r3, [r5, #0]
   2d5f6:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   2d5fa:	075b      	lsls	r3, r3, #29
   2d5fc:	d4e9      	bmi.n	2d5d2 <set+0xe>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   2d5fe:	3dcc      	subs	r5, #204	; 0xcc
   2d600:	2207      	movs	r2, #7
   2d602:	4629      	mov	r1, r5
   2d604:	4638      	mov	r0, r7
   2d606:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   2d608:	2806      	cmp	r0, #6
   2d60a:	d806      	bhi.n	2d61a <set+0x56>
			(void)memset(bt_dev.id_addr, 0,
   2d60c:	2207      	movs	r2, #7
   2d60e:	4621      	mov	r1, r4
   2d610:	4628      	mov	r0, r5
   2d612:	f01e fb2c 	bl	4bc6e <memset>
			bt_dev.id_count = 0U;
   2d616:	71ec      	strb	r4, [r5, #7]
   2d618:	e7db      	b.n	2d5d2 <set+0xe>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   2d61a:	2307      	movs	r3, #7
   2d61c:	fbb0 f0f3 	udiv	r0, r0, r3
   2d620:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   2d622:	e7d6      	b.n	2d5d2 <set+0xe>
   2d624:	00053d4e 	.word	0x00053d4e
   2d628:	200000fc 	.word	0x200000fc

0002d62c <bt_settings_encode_key>:
{
   2d62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d630:	b088      	sub	sp, #32
		snprintk(path, path_size,
   2d632:	799c      	ldrb	r4, [r3, #6]
{
   2d634:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   2d638:	795d      	ldrb	r5, [r3, #5]
   2d63a:	791e      	ldrb	r6, [r3, #4]
   2d63c:	78df      	ldrb	r7, [r3, #3]
   2d63e:	f893 c002 	ldrb.w	ip, [r3, #2]
   2d642:	f893 e001 	ldrb.w	lr, [r3, #1]
   2d646:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   2d648:	f1b8 0f00 	cmp.w	r8, #0
   2d64c:	d00e      	beq.n	2d66c <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   2d64e:	e9cd 3806 	strd	r3, r8, [sp, #24]
   2d652:	e9cd ce04 	strd	ip, lr, [sp, #16]
   2d656:	4613      	mov	r3, r2
   2d658:	e9cd 6702 	strd	r6, r7, [sp, #8]
   2d65c:	e9cd 4500 	strd	r4, r5, [sp]
   2d660:	4a08      	ldr	r2, [pc, #32]	; (2d684 <bt_settings_encode_key+0x58>)
   2d662:	f01c f9d7 	bl	49a14 <snprintk>
}
   2d666:	b008      	add	sp, #32
   2d668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   2d66c:	e9cd e305 	strd	lr, r3, [sp, #20]
   2d670:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   2d674:	4613      	mov	r3, r2
   2d676:	e9cd 5601 	strd	r5, r6, [sp, #4]
   2d67a:	4a03      	ldr	r2, [pc, #12]	; (2d688 <bt_settings_encode_key+0x5c>)
   2d67c:	9400      	str	r4, [sp, #0]
   2d67e:	f01c f9c9 	bl	49a14 <snprintk>
}
   2d682:	e7f0      	b.n	2d666 <bt_settings_encode_key+0x3a>
   2d684:	0005409b 	.word	0x0005409b
   2d688:	000540bf 	.word	0x000540bf

0002d68c <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   2d68c:	4801      	ldr	r0, [pc, #4]	; (2d694 <bt_settings_save_id+0x8>)
   2d68e:	f01a be73 	b.w	48378 <k_work_submit>
   2d692:	bf00      	nop
   2d694:	20000764 	.word	0x20000764

0002d698 <commit>:
}

static int commit(void)
{
   2d698:	b510      	push	{r4, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   2d69a:	4c15      	ldr	r4, [pc, #84]	; (2d6f0 <commit+0x58>)
   2d69c:	79e3      	ldrb	r3, [r4, #7]
   2d69e:	b1cb      	cbz	r3, 2d6d4 <commit+0x3c>
   2d6a0:	f3bf 8f5b 	dmb	ish
   2d6a4:	4c13      	ldr	r4, [pc, #76]	; (2d6f4 <commit+0x5c>)
   2d6a6:	6823      	ldr	r3, [r4, #0]
   2d6a8:	f3bf 8f5b 	dmb	ish
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2d6ac:	079a      	lsls	r2, r3, #30
   2d6ae:	d401      	bmi.n	2d6b4 <commit+0x1c>
		bt_finalize_init();
   2d6b0:	f000 fec4 	bl	2e43c <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d6b4:	f3bf 8f5b 	dmb	ish
   2d6b8:	e854 3f00 	ldrex	r3, [r4]
   2d6bc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
   2d6c0:	e844 2100 	strex	r1, r2, [r4]
   2d6c4:	2900      	cmp	r1, #0
   2d6c6:	d1f7      	bne.n	2d6b8 <commit+0x20>
   2d6c8:	f3bf 8f5b 	dmb	ish
	}

	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   2d6cc:	045b      	lsls	r3, r3, #17
   2d6ce:	d40c      	bmi.n	2d6ea <commit+0x52>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
   2d6d0:	2000      	movs	r0, #0
   2d6d2:	e009      	b.n	2d6e8 <commit+0x50>
		err = bt_setup_public_id_addr();
   2d6d4:	f001 f988 	bl	2e9e8 <bt_setup_public_id_addr>
		if (err) {
   2d6d8:	b930      	cbnz	r0, 2d6e8 <commit+0x50>
	if (!bt_dev.id_count) {
   2d6da:	79e3      	ldrb	r3, [r4, #7]
   2d6dc:	2b00      	cmp	r3, #0
   2d6de:	d1df      	bne.n	2d6a0 <commit+0x8>
		err = bt_setup_random_id_addr();
   2d6e0:	f001 f9c2 	bl	2ea68 <bt_setup_random_id_addr>
		if (err) {
   2d6e4:	2800      	cmp	r0, #0
   2d6e6:	d0db      	beq.n	2d6a0 <commit+0x8>
}
   2d6e8:	bd10      	pop	{r4, pc}
		bt_settings_save_id();
   2d6ea:	f7ff ffcf 	bl	2d68c <bt_settings_save_id>
   2d6ee:	e7ef      	b.n	2d6d0 <commit+0x38>
   2d6f0:	20000030 	.word	0x20000030
   2d6f4:	200000fc 	.word	0x200000fc

0002d6f8 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   2d6f8:	b430      	push	{r4, r5}
   2d6fa:	4603      	mov	r3, r0
   2d6fc:	4608      	mov	r0, r1
	switch (src->type) {
   2d6fe:	781a      	ldrb	r2, [r3, #0]
   2d700:	2a01      	cmp	r2, #1
   2d702:	d013      	beq.n	2d72c <uuid_to_uuid128+0x34>
   2d704:	2a02      	cmp	r2, #2
   2d706:	d026      	beq.n	2d756 <uuid_to_uuid128+0x5e>
   2d708:	b972      	cbnz	r2, 2d728 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   2d70a:	4a15      	ldr	r2, [pc, #84]	; (2d760 <uuid_to_uuid128+0x68>)
   2d70c:	f102 0410 	add.w	r4, r2, #16
   2d710:	f852 5b04 	ldr.w	r5, [r2], #4
   2d714:	f841 5b04 	str.w	r5, [r1], #4
   2d718:	42a2      	cmp	r2, r4
   2d71a:	d1f9      	bne.n	2d710 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
   2d71c:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
   2d71e:	7812      	ldrb	r2, [r2, #0]
   2d720:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
   2d722:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   2d724:	0a1b      	lsrs	r3, r3, #8
   2d726:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   2d728:	bc30      	pop	{r4, r5}
   2d72a:	4770      	bx	lr
		*dst = uuid128_base;
   2d72c:	4a0c      	ldr	r2, [pc, #48]	; (2d760 <uuid_to_uuid128+0x68>)
   2d72e:	f102 0410 	add.w	r4, r2, #16
   2d732:	f852 5b04 	ldr.w	r5, [r2], #4
   2d736:	f841 5b04 	str.w	r5, [r1], #4
   2d73a:	42a2      	cmp	r2, r4
   2d73c:	d1f9      	bne.n	2d732 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
   2d73e:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
   2d740:	7812      	ldrb	r2, [r2, #0]
   2d742:	700a      	strb	r2, [r1, #0]
   2d744:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   2d748:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
   2d74a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   2d74c:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   2d74e:	0a1b      	lsrs	r3, r3, #8
   2d750:	7382      	strb	r2, [r0, #14]
   2d752:	7403      	strb	r3, [r0, #16]
}
   2d754:	e7e8      	b.n	2d728 <uuid_to_uuid128+0x30>
}
   2d756:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   2d758:	2211      	movs	r2, #17
   2d75a:	4619      	mov	r1, r3
   2d75c:	f01e ba7c 	b.w	4bc58 <memcpy>
   2d760:	00054102 	.word	0x00054102

0002d764 <bt_uuid_to_str>:
	}
	return true;
}

void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
   2d764:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t tmp1, tmp5;
	uint16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
   2d766:	7805      	ldrb	r5, [r0, #0]
   2d768:	2d01      	cmp	r5, #1
{
   2d76a:	b08b      	sub	sp, #44	; 0x2c
   2d76c:	4604      	mov	r4, r0
   2d76e:	460e      	mov	r6, r1
   2d770:	4617      	mov	r7, r2
	switch (uuid->type) {
   2d772:	d00c      	beq.n	2d78e <bt_uuid_to_str+0x2a>
   2d774:	2d02      	cmp	r5, #2
   2d776:	d00d      	beq.n	2d794 <bt_uuid_to_str+0x30>
   2d778:	2d00      	cmp	r5, #0
   2d77a:	d144      	bne.n	2d806 <bt_uuid_to_str+0xa2>
	case BT_UUID_TYPE_16:
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
   2d77c:	8843      	ldrh	r3, [r0, #2]
   2d77e:	4a25      	ldr	r2, [pc, #148]	; (2d814 <bt_uuid_to_str+0xb0>)
		break;
	case BT_UUID_TYPE_32:
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   2d780:	4639      	mov	r1, r7
   2d782:	4630      	mov	r0, r6
		break;
	default:
		(void)memset(str, 0, len);
		return;
	}
}
   2d784:	b00b      	add	sp, #44	; 0x2c
   2d786:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   2d78a:	f01c b943 	b.w	49a14 <snprintk>
   2d78e:	6843      	ldr	r3, [r0, #4]
   2d790:	4a21      	ldr	r2, [pc, #132]	; (2d818 <bt_uuid_to_str+0xb4>)
   2d792:	e7f5      	b.n	2d780 <bt_uuid_to_str+0x1c>
		memcpy(&tmp0, &BT_UUID_128(uuid)->val[0], sizeof(tmp0));
   2d794:	462a      	mov	r2, r5
   2d796:	1c41      	adds	r1, r0, #1
   2d798:	a806      	add	r0, sp, #24
   2d79a:	f01e fa5d 	bl	4bc58 <memcpy>
		memcpy(&tmp1, &BT_UUID_128(uuid)->val[2], sizeof(tmp1));
   2d79e:	1ce1      	adds	r1, r4, #3
   2d7a0:	2204      	movs	r2, #4
   2d7a2:	a808      	add	r0, sp, #32
   2d7a4:	f01e fa58 	bl	4bc58 <memcpy>
		memcpy(&tmp2, &BT_UUID_128(uuid)->val[6], sizeof(tmp2));
   2d7a8:	462a      	mov	r2, r5
   2d7aa:	1de1      	adds	r1, r4, #7
   2d7ac:	f10d 001a 	add.w	r0, sp, #26
   2d7b0:	f01e fa52 	bl	4bc58 <memcpy>
		memcpy(&tmp3, &BT_UUID_128(uuid)->val[8], sizeof(tmp3));
   2d7b4:	462a      	mov	r2, r5
   2d7b6:	f104 0109 	add.w	r1, r4, #9
   2d7ba:	a807      	add	r0, sp, #28
   2d7bc:	f01e fa4c 	bl	4bc58 <memcpy>
		memcpy(&tmp4, &BT_UUID_128(uuid)->val[10], sizeof(tmp4));
   2d7c0:	462a      	mov	r2, r5
   2d7c2:	f104 010b 	add.w	r1, r4, #11
   2d7c6:	f10d 001e 	add.w	r0, sp, #30
   2d7ca:	f01e fa45 	bl	4bc58 <memcpy>
		memcpy(&tmp5, &BT_UUID_128(uuid)->val[12], sizeof(tmp5));
   2d7ce:	f104 010d 	add.w	r1, r4, #13
   2d7d2:	2204      	movs	r2, #4
   2d7d4:	a809      	add	r0, sp, #36	; 0x24
   2d7d6:	f01e fa3f 	bl	4bc58 <memcpy>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
   2d7da:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   2d7de:	9304      	str	r3, [sp, #16]
   2d7e0:	9b08      	ldr	r3, [sp, #32]
   2d7e2:	9303      	str	r3, [sp, #12]
   2d7e4:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   2d7e8:	9302      	str	r3, [sp, #8]
   2d7ea:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2d7ee:	9301      	str	r3, [sp, #4]
   2d7f0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   2d7f4:	9300      	str	r3, [sp, #0]
   2d7f6:	4a09      	ldr	r2, [pc, #36]	; (2d81c <bt_uuid_to_str+0xb8>)
   2d7f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d7fa:	4639      	mov	r1, r7
   2d7fc:	4630      	mov	r0, r6
   2d7fe:	f01c f909 	bl	49a14 <snprintk>
}
   2d802:	b00b      	add	sp, #44	; 0x2c
   2d804:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)memset(str, 0, len);
   2d806:	2100      	movs	r1, #0
   2d808:	4630      	mov	r0, r6
}
   2d80a:	b00b      	add	sp, #44	; 0x2c
   2d80c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		(void)memset(str, 0, len);
   2d810:	f01e ba2d 	b.w	4bc6e <memset>
   2d814:	000540fd 	.word	0x000540fd
   2d818:	000540e0 	.word	0x000540e0
   2d81c:	000540e5 	.word	0x000540e5

0002d820 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   2d820:	b538      	push	{r3, r4, r5, lr}
   2d822:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   2d824:	4805      	ldr	r0, [pc, #20]	; (2d83c <bt_buf_get_rx+0x1c>)
   2d826:	f022 f990 	bl	4fb4a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   2d82a:	4604      	mov	r4, r0
   2d82c:	b120      	cbz	r0, 2d838 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   2d82e:	2100      	movs	r1, #0
   2d830:	3008      	adds	r0, #8
   2d832:	f022 f9af 	bl	4fb94 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2d836:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   2d838:	4620      	mov	r0, r4
   2d83a:	bd38      	pop	{r3, r4, r5, pc}
   2d83c:	200013fc 	.word	0x200013fc

0002d840 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   2d840:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   2d842:	490b      	ldr	r1, [pc, #44]	; (2d870 <bt_buf_get_cmd_complete+0x30>)
{
   2d844:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   2d846:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   2d84a:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   2d84c:	b920      	cbnz	r0, 2d858 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   2d84e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2d852:	2001      	movs	r0, #1
   2d854:	f7ff bfe4 	b.w	2d820 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   2d858:	f022 f9ad 	bl	4fbb6 <net_buf_ref>
   2d85c:	2301      	movs	r3, #1
		buf->len = 0U;
   2d85e:	2100      	movs	r1, #0
   2d860:	7503      	strb	r3, [r0, #20]
   2d862:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   2d864:	4604      	mov	r4, r0
   2d866:	3008      	adds	r0, #8
   2d868:	f022 f994 	bl	4fb94 <net_buf_simple_reserve>
}
   2d86c:	4620      	mov	r0, r4
   2d86e:	bd10      	pop	{r4, pc}
   2d870:	20000030 	.word	0x20000030

0002d874 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   2d874:	b570      	push	{r4, r5, r6, lr}
   2d876:	4604      	mov	r4, r0
	switch (evt) {
   2d878:	2c0f      	cmp	r4, #15
{
   2d87a:	460d      	mov	r5, r1
   2d87c:	4610      	mov	r0, r2
   2d87e:	4619      	mov	r1, r3
	switch (evt) {
   2d880:	d805      	bhi.n	2d88e <bt_buf_get_evt+0x1a>
   2d882:	2c0d      	cmp	r4, #13
   2d884:	d90d      	bls.n	2d8a2 <bt_buf_get_evt+0x2e>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   2d886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   2d88a:	f7ff bfd9 	b.w	2d840 <bt_buf_get_cmd_complete>
	switch (evt) {
   2d88e:	2c13      	cmp	r4, #19
   2d890:	d107      	bne.n	2d8a2 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   2d892:	480c      	ldr	r0, [pc, #48]	; (2d8c4 <bt_buf_get_evt+0x50>)
   2d894:	f022 f959 	bl	4fb4a <net_buf_alloc_fixed>
			if (buf) {
   2d898:	4604      	mov	r4, r0
   2d89a:	b938      	cbnz	r0, 2d8ac <bt_buf_get_evt+0x38>
{
   2d89c:	2400      	movs	r4, #0
}
   2d89e:	4620      	mov	r0, r4
   2d8a0:	bd70      	pop	{r4, r5, r6, pc}
   2d8a2:	4602      	mov	r2, r0
   2d8a4:	460b      	mov	r3, r1
		if (discardable) {
   2d8a6:	b145      	cbz	r5, 2d8ba <bt_buf_get_evt+0x46>
   2d8a8:	4807      	ldr	r0, [pc, #28]	; (2d8c8 <bt_buf_get_evt+0x54>)
   2d8aa:	e7f3      	b.n	2d894 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   2d8ac:	2100      	movs	r1, #0
   2d8ae:	3008      	adds	r0, #8
   2d8b0:	f022 f970 	bl	4fb94 <net_buf_simple_reserve>
   2d8b4:	2301      	movs	r3, #1
   2d8b6:	7523      	strb	r3, [r4, #20]
}
   2d8b8:	e7f1      	b.n	2d89e <bt_buf_get_evt+0x2a>
}
   2d8ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2d8be:	2001      	movs	r0, #1
   2d8c0:	f7ff bfae 	b.w	2d820 <bt_buf_get_rx>
   2d8c4:	20001428 	.word	0x20001428
   2d8c8:	20001378 	.word	0x20001378

0002d8cc <unpair>:
{
   2d8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d8d0:	4606      	mov	r6, r0
   2d8d2:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   2d8d4:	f002 fb02 	bl	2fedc <bt_conn_lookup_addr_le>
	if (conn) {
   2d8d8:	4604      	mov	r4, r0
   2d8da:	b140      	cbz	r0, 2d8ee <unpair+0x22>
		if (conn->type == BT_CONN_TYPE_LE) {
   2d8dc:	7883      	ldrb	r3, [r0, #2]
   2d8de:	2b01      	cmp	r3, #1
   2d8e0:	d019      	beq.n	2d916 <unpair+0x4a>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   2d8e2:	2113      	movs	r1, #19
   2d8e4:	f01f faeb 	bl	4cebe <bt_conn_disconnect>
		bt_conn_unref(conn);
   2d8e8:	4620      	mov	r0, r4
   2d8ea:	f01f f9ef 	bl	4cccc <bt_conn_unref>
			keys = bt_keys_find_addr(id, addr);
   2d8ee:	4639      	mov	r1, r7
   2d8f0:	4630      	mov	r0, r6
   2d8f2:	f006 fa03 	bl	33cfc <bt_keys_find_addr>
		if (keys) {
   2d8f6:	4605      	mov	r5, r0
   2d8f8:	b9d0      	cbnz	r0, 2d930 <unpair+0x64>
	bt_gatt_clear(id, addr);
   2d8fa:	4639      	mov	r1, r7
   2d8fc:	4630      	mov	r0, r6
   2d8fe:	f004 ff7b 	bl	327f8 <bt_gatt_clear>
	if (bt_auth && bt_auth->bond_deleted) {
   2d902:	4b0e      	ldr	r3, [pc, #56]	; (2d93c <unpair+0x70>)
   2d904:	681b      	ldr	r3, [r3, #0]
   2d906:	b1bb      	cbz	r3, 2d938 <unpair+0x6c>
   2d908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2d90a:	b1ab      	cbz	r3, 2d938 <unpair+0x6c>
		bt_auth->bond_deleted(id, addr);
   2d90c:	4639      	mov	r1, r7
   2d90e:	4630      	mov	r0, r6
}
   2d910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_auth->bond_deleted(id, addr);
   2d914:	4718      	bx	r3
			conn->le.keys = NULL;
   2d916:	2300      	movs	r3, #0
			keys = conn->le.keys;
   2d918:	f8d0 50b4 	ldr.w	r5, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
   2d91c:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   2d920:	2113      	movs	r1, #19
   2d922:	f01f facc 	bl	4cebe <bt_conn_disconnect>
		bt_conn_unref(conn);
   2d926:	4620      	mov	r0, r4
   2d928:	f01f f9d0 	bl	4cccc <bt_conn_unref>
		if (!keys) {
   2d92c:	2d00      	cmp	r5, #0
   2d92e:	d0de      	beq.n	2d8ee <unpair+0x22>
			bt_keys_clear(keys);
   2d930:	4628      	mov	r0, r5
   2d932:	f006 fa01 	bl	33d38 <bt_keys_clear>
   2d936:	e7e0      	b.n	2d8fa <unpair+0x2e>
}
   2d938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d93c:	20004604 	.word	0x20004604

0002d940 <hci_disconn_complete_prio>:
{
   2d940:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2d942:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2d944:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   2d948:	781b      	ldrb	r3, [r3, #0]
   2d94a:	b98b      	cbnz	r3, 2d970 <hci_disconn_complete_prio+0x30>
	conn = bt_conn_lookup_handle(handle);
   2d94c:	4620      	mov	r0, r4
   2d94e:	f002 f8b9 	bl	2fac4 <bt_conn_lookup_handle>
	if (!conn) {
   2d952:	4605      	mov	r5, r0
   2d954:	b968      	cbnz	r0, 2d972 <hci_disconn_complete_prio+0x32>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   2d956:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   2d95a:	4a0a      	ldr	r2, [pc, #40]	; (2d984 <hci_disconn_complete_prio+0x44>)
	if (!conn) {
   2d95c:	2306      	movs	r3, #6
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   2d95e:	ea6f 5010 	mvn.w	r0, r0, lsr #20
		if (!disconnected_handles[i]) {
   2d962:	f832 1b02 	ldrh.w	r1, [r2], #2
   2d966:	b909      	cbnz	r1, 2d96c <hci_disconn_complete_prio+0x2c>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   2d968:	f822 0c02 	strh.w	r0, [r2, #-2]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   2d96c:	3b01      	subs	r3, #1
   2d96e:	d1f8      	bne.n	2d962 <hci_disconn_complete_prio+0x22>
}
   2d970:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2d972:	2101      	movs	r1, #1
   2d974:	f002 f8ae 	bl	2fad4 <bt_conn_set_state>
	bt_conn_unref(conn);
   2d978:	4628      	mov	r0, r5
}
   2d97a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   2d97e:	f01f b9a5 	b.w	4cccc <bt_conn_unref>
   2d982:	bf00      	nop
   2d984:	2000720c 	.word	0x2000720c

0002d988 <hci_le_meta_event>:
{
   2d988:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   2d98a:	2101      	movs	r1, #1
   2d98c:	4604      	mov	r4, r0
   2d98e:	3008      	adds	r0, #8
   2d990:	f022 f974 	bl	4fc7c <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   2d994:	4621      	mov	r1, r4
   2d996:	4a03      	ldr	r2, [pc, #12]	; (2d9a4 <hci_le_meta_event+0x1c>)
   2d998:	7800      	ldrb	r0, [r0, #0]
}
   2d99a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   2d99e:	230b      	movs	r3, #11
   2d9a0:	f01e bab1 	b.w	4bf06 <handle_event>
   2d9a4:	000526c8 	.word	0x000526c8

0002d9a8 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   2d9a8:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   2d9aa:	4c0c      	ldr	r4, [pc, #48]	; (2d9dc <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   2d9ac:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   2d9ae:	2205      	movs	r2, #5
   2d9b0:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   2d9b4:	f002 fab6 	bl	2ff24 <bt_conn_lookup_state_le>
		if (!conn) {
   2d9b8:	b970      	cbnz	r0, 2d9d8 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   2d9ba:	4b09      	ldr	r3, [pc, #36]	; (2d9e0 <find_pending_connect.part.0+0x38>)
   2d9bc:	6818      	ldr	r0, [r3, #0]
   2d9be:	889a      	ldrh	r2, [r3, #4]
   2d9c0:	9000      	str	r0, [sp, #0]
   2d9c2:	799b      	ldrb	r3, [r3, #6]
   2d9c4:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   2d9c8:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   2d9cc:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   2d9d0:	2204      	movs	r2, #4
   2d9d2:	4669      	mov	r1, sp
   2d9d4:	f002 faa6 	bl	2ff24 <bt_conn_lookup_state_le>
}
   2d9d8:	b002      	add	sp, #8
   2d9da:	bd10      	pop	{r4, pc}
   2d9dc:	20000030 	.word	0x20000030
   2d9e0:	0005198a 	.word	0x0005198a

0002d9e4 <hci_cmd_done>:
{
   2d9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d9e6:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   2d9e8:	7990      	ldrb	r0, [r2, #6]
{
   2d9ea:	460e      	mov	r6, r1
   2d9ec:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   2d9ee:	f015 feeb 	bl	437c8 <net_buf_pool_get>
   2d9f2:	4b28      	ldr	r3, [pc, #160]	; (2da94 <hci_cmd_done+0xb0>)
   2d9f4:	4283      	cmp	r3, r0
   2d9f6:	d14b      	bne.n	2da90 <hci_cmd_done+0xac>
	if (cmd(buf)->opcode != opcode) {
   2d9f8:	4620      	mov	r0, r4
   2d9fa:	f015 feed 	bl	437d8 <net_buf_id>
   2d9fe:	4d26      	ldr	r5, [pc, #152]	; (2da98 <hci_cmd_done+0xb4>)
   2da00:	230c      	movs	r3, #12
   2da02:	fb03 5000 	mla	r0, r3, r0, r5
   2da06:	8843      	ldrh	r3, [r0, #2]
   2da08:	42bb      	cmp	r3, r7
   2da0a:	d141      	bne.n	2da90 <hci_cmd_done+0xac>
	if (bt_dev.sent_cmd) {
   2da0c:	4f23      	ldr	r7, [pc, #140]	; (2da9c <hci_cmd_done+0xb8>)
   2da0e:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2da12:	b120      	cbz	r0, 2da1e <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   2da14:	f015 ff9a 	bl	4394c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2da18:	2300      	movs	r3, #0
   2da1a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   2da1e:	4620      	mov	r0, r4
   2da20:	f015 feda 	bl	437d8 <net_buf_id>
   2da24:	270c      	movs	r7, #12
   2da26:	fb07 5000 	mla	r0, r7, r0, r5
   2da2a:	6843      	ldr	r3, [r0, #4]
   2da2c:	b19b      	cbz	r3, 2da56 <hci_cmd_done+0x72>
   2da2e:	b996      	cbnz	r6, 2da56 <hci_cmd_done+0x72>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   2da30:	4620      	mov	r0, r4
   2da32:	f015 fed1 	bl	437d8 <net_buf_id>
   2da36:	fb07 5000 	mla	r0, r7, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
   2da3a:	2101      	movs	r1, #1
   2da3c:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   2da3e:	e9d2 0300 	ldrd	r0, r3, [r2]
	if (val) {
   2da42:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   2da44:	f003 071f 	and.w	r7, r3, #31
   2da48:	40b9      	lsls	r1, r7
	if (val) {
   2da4a:	095b      	lsrs	r3, r3, #5
   2da4c:	b1d2      	cbz	r2, 2da84 <hci_cmd_done+0xa0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2da4e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2da52:	f01e fa8b 	bl	4bf6c <atomic_or>
	if (cmd(buf)->sync) {
   2da56:	4620      	mov	r0, r4
   2da58:	f015 febe 	bl	437d8 <net_buf_id>
   2da5c:	270c      	movs	r7, #12
   2da5e:	fb07 5000 	mla	r0, r7, r0, r5
   2da62:	6883      	ldr	r3, [r0, #8]
   2da64:	b1a3      	cbz	r3, 2da90 <hci_cmd_done+0xac>
		cmd(buf)->status = status;
   2da66:	4620      	mov	r0, r4
   2da68:	f015 feb6 	bl	437d8 <net_buf_id>
   2da6c:	4378      	muls	r0, r7
   2da6e:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   2da70:	4620      	mov	r0, r4
   2da72:	f015 feb1 	bl	437d8 <net_buf_id>
   2da76:	fb07 5500 	mla	r5, r7, r0, r5
   2da7a:	68a8      	ldr	r0, [r5, #8]
}
   2da7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   2da80:	f01a baf6 	b.w	48070 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2da84:	43c9      	mvns	r1, r1
   2da86:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2da8a:	f01e fa7e 	bl	4bf8a <atomic_and>
   2da8e:	e7e2      	b.n	2da56 <hci_cmd_done+0x72>
   2da90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2da92:	bf00      	nop
   2da94:	200013d0 	.word	0x200013d0
   2da98:	2000459c 	.word	0x2000459c
   2da9c:	20000030 	.word	0x20000030

0002daa0 <hci_cmd_status>:
{
   2daa0:	b538      	push	{r3, r4, r5, lr}
   2daa2:	2104      	movs	r1, #4
   2daa4:	4604      	mov	r4, r0
   2daa6:	3008      	adds	r0, #8
   2daa8:	f022 f8e8 	bl	4fc7c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   2daac:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   2daae:	7801      	ldrb	r1, [r0, #0]
   2dab0:	8840      	ldrh	r0, [r0, #2]
   2dab2:	4622      	mov	r2, r4
   2dab4:	f7ff ff96 	bl	2d9e4 <hci_cmd_done>
	if (ncmd) {
   2dab8:	b125      	cbz	r5, 2dac4 <hci_cmd_status+0x24>
   2daba:	4803      	ldr	r0, [pc, #12]	; (2dac8 <hci_cmd_status+0x28>)
}
   2dabc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2dac0:	f01a bad6 	b.w	48070 <z_impl_k_sem_give>
   2dac4:	bd38      	pop	{r3, r4, r5, pc}
   2dac6:	bf00      	nop
   2dac8:	20000150 	.word	0x20000150

0002dacc <hci_cmd_complete>:
{
   2dacc:	b538      	push	{r3, r4, r5, lr}
   2dace:	2103      	movs	r1, #3
   2dad0:	4604      	mov	r4, r0
   2dad2:	3008      	adds	r0, #8
   2dad4:	f022 f8d2 	bl	4fc7c <net_buf_simple_pull_mem>
	status = buf->data[0];
   2dad8:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   2dada:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   2dadc:	7819      	ldrb	r1, [r3, #0]
   2dade:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   2dae2:	4622      	mov	r2, r4
   2dae4:	f7ff ff7e 	bl	2d9e4 <hci_cmd_done>
	if (ncmd) {
   2dae8:	b125      	cbz	r5, 2daf4 <hci_cmd_complete+0x28>
   2daea:	4803      	ldr	r0, [pc, #12]	; (2daf8 <hci_cmd_complete+0x2c>)
}
   2daec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2daf0:	f01a babe 	b.w	48070 <z_impl_k_sem_give>
   2daf4:	bd38      	pop	{r3, r4, r5, pc}
   2daf6:	bf00      	nop
   2daf8:	20000150 	.word	0x20000150

0002dafc <hci_tx_thread>:
{
   2dafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   2db00:	f8df 8104 	ldr.w	r8, [pc, #260]	; 2dc08 <hci_tx_thread+0x10c>
		BT_ASSERT(err == 0);
   2db04:	f8df 9104 	ldr.w	r9, [pc, #260]	; 2dc0c <hci_tx_thread+0x110>
			ev_count += bt_conn_prepare_events(&events[1]);
   2db08:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   2db0c:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   2db10:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
   2db12:	f36f 3352 	bfc	r3, #13, #6
   2db16:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   2db1a:	f001 ff97 	bl	2fa4c <bt_conn_prepare_events>
   2db1e:	1c45      	adds	r5, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   2db20:	4839      	ldr	r0, [pc, #228]	; (2dc08 <hci_tx_thread+0x10c>)
   2db22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2db26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2db2a:	4629      	mov	r1, r5
   2db2c:	f01b fa0e 	bl	48f4c <z_impl_k_poll>
		BT_ASSERT(err == 0);
   2db30:	b160      	cbz	r0, 2db4c <hci_tx_thread+0x50>
   2db32:	4937      	ldr	r1, [pc, #220]	; (2dc10 <hci_tx_thread+0x114>)
   2db34:	4837      	ldr	r0, [pc, #220]	; (2dc14 <hci_tx_thread+0x118>)
   2db36:	f640 1393 	movw	r3, #2451	; 0x993
   2db3a:	464a      	mov	r2, r9
   2db3c:	f01b ff5d 	bl	499fa <printk>
   2db40:	4040      	eors	r0, r0
   2db42:	f380 8811 	msr	BASEPRI, r0
   2db46:	f04f 0003 	mov.w	r0, #3
   2db4a:	df02      	svc	2
{
   2db4c:	4e2e      	ldr	r6, [pc, #184]	; (2dc08 <hci_tx_thread+0x10c>)
	for (; count; ev++, count--) {
   2db4e:	b915      	cbnz	r5, 2db56 <hci_tx_thread+0x5a>
	z_impl_k_yield();
   2db50:	f01a fefc 	bl	4894c <z_impl_k_yield>
	while (1) {
   2db54:	e7da      	b.n	2db0c <hci_tx_thread+0x10>
		switch (ev->state) {
   2db56:	68f3      	ldr	r3, [r6, #12]
   2db58:	f3c3 3345 	ubfx	r3, r3, #13, #6
   2db5c:	2b04      	cmp	r3, #4
   2db5e:	d148      	bne.n	2dbf2 <hci_tx_thread+0xf6>
			if (ev->tag == BT_EVENT_CMD_TX) {
   2db60:	7b33      	ldrb	r3, [r6, #12]
   2db62:	2b00      	cmp	r3, #0
   2db64:	d148      	bne.n	2dbf8 <hci_tx_thread+0xfc>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   2db66:	482c      	ldr	r0, [pc, #176]	; (2dc18 <hci_tx_thread+0x11c>)
   2db68:	2200      	movs	r2, #0
   2db6a:	2300      	movs	r3, #0
   2db6c:	f021 fff2 	bl	4fb54 <net_buf_get>
	BT_ASSERT(buf);
   2db70:	4604      	mov	r4, r0
   2db72:	b960      	cbnz	r0, 2db8e <hci_tx_thread+0x92>
   2db74:	4929      	ldr	r1, [pc, #164]	; (2dc1c <hci_tx_thread+0x120>)
   2db76:	4827      	ldr	r0, [pc, #156]	; (2dc14 <hci_tx_thread+0x118>)
   2db78:	f640 132a 	movw	r3, #2346	; 0x92a
   2db7c:	464a      	mov	r2, r9
   2db7e:	f01b ff3c 	bl	499fa <printk>
   2db82:	4040      	eors	r0, r0
   2db84:	f380 8811 	msr	BASEPRI, r0
   2db88:	f04f 0003 	mov.w	r0, #3
   2db8c:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   2db8e:	4f24      	ldr	r7, [pc, #144]	; (2dc20 <hci_tx_thread+0x124>)
	return z_impl_k_sem_take(sem, timeout);
   2db90:	4824      	ldr	r0, [pc, #144]	; (2dc24 <hci_tx_thread+0x128>)
   2db92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2db96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2db9a:	f01a fa8f 	bl	480bc <z_impl_k_sem_take>
   2db9e:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2dba2:	b120      	cbz	r0, 2dbae <hci_tx_thread+0xb2>
		net_buf_unref(bt_dev.sent_cmd);
   2dba4:	f015 fed2 	bl	4394c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2dba8:	2300      	movs	r3, #0
   2dbaa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   2dbae:	4620      	mov	r0, r4
   2dbb0:	f022 f801 	bl	4fbb6 <net_buf_ref>
   2dbb4:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
		return bt_hci_ecc_send(buf);
   2dbb8:	4620      	mov	r0, r4
   2dbba:	f7ff fc65 	bl	2d488 <bt_hci_ecc_send>
	if (err) {
   2dbbe:	b1c0      	cbz	r0, 2dbf2 <hci_tx_thread+0xf6>
	z_impl_k_sem_give(sem);
   2dbc0:	4818      	ldr	r0, [pc, #96]	; (2dc24 <hci_tx_thread+0x128>)
   2dbc2:	f01a fa55 	bl	48070 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   2dbc6:	4620      	mov	r0, r4
   2dbc8:	f015 fe06 	bl	437d8 <net_buf_id>
   2dbcc:	4b16      	ldr	r3, [pc, #88]	; (2dc28 <hci_tx_thread+0x12c>)
   2dbce:	220c      	movs	r2, #12
   2dbd0:	fb02 3000 	mla	r0, r2, r0, r3
   2dbd4:	211f      	movs	r1, #31
   2dbd6:	8840      	ldrh	r0, [r0, #2]
   2dbd8:	4622      	mov	r2, r4
   2dbda:	f7ff ff03 	bl	2d9e4 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   2dbde:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2dbe2:	f015 feb3 	bl	4394c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2dbe6:	2300      	movs	r3, #0
		net_buf_unref(buf);
   2dbe8:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   2dbea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		net_buf_unref(buf);
   2dbee:	f015 fead 	bl	4394c <net_buf_unref>
	for (; count; ev++, count--) {
   2dbf2:	3614      	adds	r6, #20
   2dbf4:	3d01      	subs	r5, #1
   2dbf6:	e7aa      	b.n	2db4e <hci_tx_thread+0x52>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   2dbf8:	2b01      	cmp	r3, #1
   2dbfa:	d1fa      	bne.n	2dbf2 <hci_tx_thread+0xf6>
					conn = CONTAINER_OF(ev->fifo,
   2dbfc:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   2dbfe:	3838      	subs	r0, #56	; 0x38
   2dc00:	f002 fbc6 	bl	30390 <bt_conn_process_tx>
   2dc04:	e7f5      	b.n	2dbf2 <hci_tx_thread+0xf6>
   2dc06:	bf00      	nop
   2dc08:	20000774 	.word	0x20000774
   2dc0c:	00054113 	.word	0x00054113
   2dc10:	00054147 	.word	0x00054147
   2dc14:	00054150 	.word	0x00054150
   2dc18:	2000016c 	.word	0x2000016c
   2dc1c:	0005416d 	.word	0x0005416d
   2dc20:	20000030 	.word	0x20000030
   2dc24:	20000150 	.word	0x20000150
   2dc28:	2000459c 	.word	0x2000459c

0002dc2c <bt_hci_cmd_state_set_init>:
{
   2dc2c:	b510      	push	{r4, lr}
	state->bit = bit;
   2dc2e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   2dc32:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2dc36:	720b      	strb	r3, [r1, #8]
{
   2dc38:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   2dc3a:	f015 fdcd 	bl	437d8 <net_buf_id>
   2dc3e:	4b03      	ldr	r3, [pc, #12]	; (2dc4c <bt_hci_cmd_state_set_init+0x20>)
   2dc40:	220c      	movs	r2, #12
   2dc42:	fb02 3300 	mla	r3, r2, r0, r3
   2dc46:	605c      	str	r4, [r3, #4]
}
   2dc48:	bd10      	pop	{r4, pc}
   2dc4a:	bf00      	nop
   2dc4c:	2000459c 	.word	0x2000459c

0002dc50 <bt_hci_cmd_create>:
{
   2dc50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   2dc54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2dc58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2dc5c:	4606      	mov	r6, r0
   2dc5e:	4817      	ldr	r0, [pc, #92]	; (2dcbc <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   2dc60:	4d17      	ldr	r5, [pc, #92]	; (2dcc0 <bt_hci_cmd_create+0x70>)
{
   2dc62:	460f      	mov	r7, r1
   2dc64:	f021 ff71 	bl	4fb4a <net_buf_alloc_fixed>
   2dc68:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   2dc6a:	f100 0a08 	add.w	sl, r0, #8
   2dc6e:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2dc70:	f04f 0800 	mov.w	r8, #0
   2dc74:	4650      	mov	r0, sl
   2dc76:	f021 ff8d 	bl	4fb94 <net_buf_simple_reserve>
   2dc7a:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   2dc7e:	4620      	mov	r0, r4
   2dc80:	f015 fdaa 	bl	437d8 <net_buf_id>
   2dc84:	f04f 090c 	mov.w	r9, #12
   2dc88:	fb09 5000 	mla	r0, r9, r0, r5
   2dc8c:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   2dc8e:	4620      	mov	r0, r4
   2dc90:	f015 fda2 	bl	437d8 <net_buf_id>
   2dc94:	fb09 5000 	mla	r0, r9, r0, r5
   2dc98:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   2dc9c:	4620      	mov	r0, r4
   2dc9e:	f015 fd9b 	bl	437d8 <net_buf_id>
   2dca2:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   2dca6:	2103      	movs	r1, #3
   2dca8:	f8c5 8004 	str.w	r8, [r5, #4]
   2dcac:	4650      	mov	r0, sl
   2dcae:	f021 ffb4 	bl	4fc1a <net_buf_simple_add>
	hdr->param_len = param_len;
   2dcb2:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   2dcb4:	8006      	strh	r6, [r0, #0]
}
   2dcb6:	4620      	mov	r0, r4
   2dcb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2dcbc:	200013d0 	.word	0x200013d0
   2dcc0:	2000459c 	.word	0x2000459c

0002dcc4 <bt_hci_cmd_send>:
{
   2dcc4:	b538      	push	{r3, r4, r5, lr}
   2dcc6:	4605      	mov	r5, r0
	if (!buf) {
   2dcc8:	460c      	mov	r4, r1
   2dcca:	b919      	cbnz	r1, 2dcd4 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   2dccc:	f7ff ffc0 	bl	2dc50 <bt_hci_cmd_create>
		if (!buf) {
   2dcd0:	4604      	mov	r4, r0
   2dcd2:	b198      	cbz	r0, 2dcfc <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   2dcd4:	f640 4335 	movw	r3, #3125	; 0xc35
   2dcd8:	429d      	cmp	r5, r3
   2dcda:	d109      	bne.n	2dcf0 <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
   2dcdc:	4620      	mov	r0, r4
   2dcde:	f7ff fbd3 	bl	2d488 <bt_hci_ecc_send>
		if (err) {
   2dce2:	4605      	mov	r5, r0
   2dce4:	b140      	cbz	r0, 2dcf8 <bt_hci_cmd_send+0x34>
			net_buf_unref(buf);
   2dce6:	4620      	mov	r0, r4
   2dce8:	f015 fe30 	bl	4394c <net_buf_unref>
}
   2dcec:	4628      	mov	r0, r5
   2dcee:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   2dcf0:	4804      	ldr	r0, [pc, #16]	; (2dd04 <bt_hci_cmd_send+0x40>)
   2dcf2:	4621      	mov	r1, r4
   2dcf4:	f021 ff52 	bl	4fb9c <net_buf_put>
	return 0;
   2dcf8:	2500      	movs	r5, #0
   2dcfa:	e7f7      	b.n	2dcec <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   2dcfc:	f06f 0568 	mvn.w	r5, #104	; 0x68
   2dd00:	e7f4      	b.n	2dcec <bt_hci_cmd_send+0x28>
   2dd02:	bf00      	nop
   2dd04:	2000016c 	.word	0x2000016c

0002dd08 <bt_hci_cmd_send_sync>:
{
   2dd08:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dd0a:	4615      	mov	r5, r2
   2dd0c:	b087      	sub	sp, #28
	if (!buf) {
   2dd0e:	460c      	mov	r4, r1
   2dd10:	b921      	cbnz	r1, 2dd1c <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   2dd12:	f7ff ff9d 	bl	2dc50 <bt_hci_cmd_create>
		if (!buf) {
   2dd16:	4604      	mov	r4, r0
   2dd18:	2800      	cmp	r0, #0
   2dd1a:	d047      	beq.n	2ddac <bt_hci_cmd_send_sync+0xa4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2dd1c:	2201      	movs	r2, #1
   2dd1e:	2100      	movs	r1, #0
   2dd20:	4668      	mov	r0, sp
   2dd22:	f022 fec6 	bl	50ab2 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   2dd26:	4620      	mov	r0, r4
   2dd28:	f015 fd56 	bl	437d8 <net_buf_id>
   2dd2c:	4f21      	ldr	r7, [pc, #132]	; (2ddb4 <bt_hci_cmd_send_sync+0xac>)
   2dd2e:	230c      	movs	r3, #12
   2dd30:	fb03 7000 	mla	r0, r3, r0, r7
   2dd34:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   2dd38:	4620      	mov	r0, r4
   2dd3a:	f021 ff3c 	bl	4fbb6 <net_buf_ref>
   2dd3e:	4601      	mov	r1, r0
   2dd40:	481d      	ldr	r0, [pc, #116]	; (2ddb8 <bt_hci_cmd_send_sync+0xb0>)
   2dd42:	f021 ff2b 	bl	4fb9c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   2dd46:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2dd4a:	2300      	movs	r3, #0
   2dd4c:	4668      	mov	r0, sp
   2dd4e:	f01a f9b5 	bl	480bc <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   2dd52:	4606      	mov	r6, r0
   2dd54:	b180      	cbz	r0, 2dd78 <bt_hci_cmd_send_sync+0x70>
   2dd56:	4a19      	ldr	r2, [pc, #100]	; (2ddbc <bt_hci_cmd_send_sync+0xb4>)
   2dd58:	4919      	ldr	r1, [pc, #100]	; (2ddc0 <bt_hci_cmd_send_sync+0xb8>)
   2dd5a:	481a      	ldr	r0, [pc, #104]	; (2ddc4 <bt_hci_cmd_send_sync+0xbc>)
   2dd5c:	f240 1331 	movw	r3, #305	; 0x131
   2dd60:	f01b fe4b 	bl	499fa <printk>
   2dd64:	4818      	ldr	r0, [pc, #96]	; (2ddc8 <bt_hci_cmd_send_sync+0xc0>)
   2dd66:	4631      	mov	r1, r6
   2dd68:	f01b fe47 	bl	499fa <printk>
   2dd6c:	4040      	eors	r0, r0
   2dd6e:	f380 8811 	msr	BASEPRI, r0
   2dd72:	f04f 0003 	mov.w	r0, #3
   2dd76:	df02      	svc	2
	status = cmd(buf)->status;
   2dd78:	4620      	mov	r0, r4
   2dd7a:	f015 fd2d 	bl	437d8 <net_buf_id>
   2dd7e:	230c      	movs	r3, #12
   2dd80:	4358      	muls	r0, r3
   2dd82:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
   2dd84:	b156      	cbz	r6, 2dd9c <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   2dd86:	4620      	mov	r0, r4
   2dd88:	f015 fde0 	bl	4394c <net_buf_unref>
			return -ECONNREFUSED;
   2dd8c:	2e09      	cmp	r6, #9
   2dd8e:	bf14      	ite	ne
   2dd90:	f06f 0004 	mvnne.w	r0, #4
   2dd94:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   2dd98:	b007      	add	sp, #28
   2dd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   2dd9c:	b115      	cbz	r5, 2dda4 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   2dd9e:	602c      	str	r4, [r5, #0]
	return 0;
   2dda0:	2000      	movs	r0, #0
   2dda2:	e7f9      	b.n	2dd98 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   2dda4:	4620      	mov	r0, r4
   2dda6:	f015 fdd1 	bl	4394c <net_buf_unref>
   2ddaa:	e7f9      	b.n	2dda0 <bt_hci_cmd_send_sync+0x98>
			return -ENOBUFS;
   2ddac:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2ddb0:	e7f2      	b.n	2dd98 <bt_hci_cmd_send_sync+0x90>
   2ddb2:	bf00      	nop
   2ddb4:	2000459c 	.word	0x2000459c
   2ddb8:	2000016c 	.word	0x2000016c
   2ddbc:	00054113 	.word	0x00054113
   2ddc0:	00054147 	.word	0x00054147
   2ddc4:	00054150 	.word	0x00054150
   2ddc8:	00054171 	.word	0x00054171

0002ddcc <bt_get_phy>:
	switch (hci_phy) {
   2ddcc:	3801      	subs	r0, #1
   2ddce:	b2c0      	uxtb	r0, r0
   2ddd0:	2802      	cmp	r0, #2
   2ddd2:	bf9a      	itte	ls
   2ddd4:	4b01      	ldrls	r3, [pc, #4]	; (2dddc <bt_get_phy+0x10>)
   2ddd6:	5c18      	ldrbls	r0, [r3, r0]
{
   2ddd8:	2000      	movhi	r0, #0
}
   2ddda:	4770      	bx	lr
   2dddc:	00054244 	.word	0x00054244

0002dde0 <bt_le_create_conn_legacy>:
{
   2dde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dde4:	b086      	sub	sp, #24
   2dde6:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   2dde8:	f10d 010b 	add.w	r1, sp, #11
   2ddec:	2000      	movs	r0, #0
   2ddee:	f000 fe69 	bl	2eac4 <bt_id_set_create_conn_own_addr>
	if (err) {
   2ddf2:	4605      	mov	r5, r0
   2ddf4:	2800      	cmp	r0, #0
   2ddf6:	d147      	bne.n	2de88 <bt_le_create_conn_legacy+0xa8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   2ddf8:	2119      	movs	r1, #25
   2ddfa:	f242 000d 	movw	r0, #8205	; 0x200d
   2ddfe:	f7ff ff27 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   2de02:	4607      	mov	r7, r0
   2de04:	2800      	cmp	r0, #0
   2de06:	d046      	beq.n	2de96 <bt_le_create_conn_legacy+0xb6>
   2de08:	2119      	movs	r1, #25
   2de0a:	3008      	adds	r0, #8
   2de0c:	f021 ff05 	bl	4fc1a <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
   2de10:	4629      	mov	r1, r5
   2de12:	4604      	mov	r4, r0
   2de14:	2219      	movs	r2, #25
   2de16:	f01d ff2a 	bl	4bc6e <memset>
		if (!bt_dev.le.rl_size ||
   2de1a:	4d20      	ldr	r5, [pc, #128]	; (2de9c <bt_le_create_conn_legacy+0xbc>)
	cp->own_addr_type = own_addr_type;
   2de1c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2de20:	7323      	strb	r3, [r4, #12]
		if (!bt_dev.le.rl_size ||
   2de22:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   2de26:	b39b      	cbz	r3, 2de90 <bt_le_create_conn_legacy+0xb0>
   2de28:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   2de2c:	429a      	cmp	r2, r3
   2de2e:	d82f      	bhi.n	2de90 <bt_le_create_conn_legacy+0xb0>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   2de30:	f106 0188 	add.w	r1, r6, #136	; 0x88
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   2de34:	1d60      	adds	r0, r4, #5
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   2de36:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   2de3a:	f01e f894 	bl	4bf66 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   2de3e:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   2de42:	89ab      	ldrh	r3, [r5, #12]
   2de44:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   2de46:	89eb      	ldrh	r3, [r5, #14]
   2de48:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   2de4a:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
   2de4e:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   2de52:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
   2de56:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   2de5a:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
   2de5e:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   2de62:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
   2de66:	f8a4 3013 	strh.w	r3, [r4, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   2de6a:	2301      	movs	r3, #1
   2de6c:	4a0c      	ldr	r2, [pc, #48]	; (2dea0 <bt_le_create_conn_legacy+0xc0>)
   2de6e:	9300      	str	r3, [sp, #0]
   2de70:	a903      	add	r1, sp, #12
   2de72:	230b      	movs	r3, #11
   2de74:	4638      	mov	r0, r7
   2de76:	f7ff fed9 	bl	2dc2c <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   2de7a:	4642      	mov	r2, r8
   2de7c:	4639      	mov	r1, r7
   2de7e:	f242 000d 	movw	r0, #8205	; 0x200d
   2de82:	f7ff ff41 	bl	2dd08 <bt_hci_cmd_send_sync>
   2de86:	4605      	mov	r5, r0
}
   2de88:	4628      	mov	r0, r5
   2de8a:	b006      	add	sp, #24
   2de8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			peer_addr = &conn->le.resp_addr;
   2de90:	f106 0196 	add.w	r1, r6, #150	; 0x96
   2de94:	e7ce      	b.n	2de34 <bt_le_create_conn_legacy+0x54>
		return -ENOBUFS;
   2de96:	f06f 0568 	mvn.w	r5, #104	; 0x68
   2de9a:	e7f5      	b.n	2de88 <bt_le_create_conn_legacy+0xa8>
   2de9c:	20000030 	.word	0x20000030
   2dea0:	200000fc 	.word	0x200000fc

0002dea4 <bt_le_create_conn_cancel>:
{
   2dea4:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   2dea6:	2100      	movs	r1, #0
{
   2dea8:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   2deaa:	f242 000e 	movw	r0, #8206	; 0x200e
   2deae:	f7ff fecf 	bl	2dc50 <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   2deb2:	2500      	movs	r5, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   2deb4:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   2deb6:	230b      	movs	r3, #11
   2deb8:	a903      	add	r1, sp, #12
   2deba:	4a06      	ldr	r2, [pc, #24]	; (2ded4 <bt_le_create_conn_cancel+0x30>)
   2debc:	9500      	str	r5, [sp, #0]
   2debe:	f7ff feb5 	bl	2dc2c <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   2dec2:	462a      	mov	r2, r5
   2dec4:	4621      	mov	r1, r4
   2dec6:	f242 000e 	movw	r0, #8206	; 0x200e
   2deca:	f7ff ff1d 	bl	2dd08 <bt_hci_cmd_send_sync>
}
   2dece:	b007      	add	sp, #28
   2ded0:	bd30      	pop	{r4, r5, pc}
   2ded2:	bf00      	nop
   2ded4:	200000fc 	.word	0x200000fc

0002ded8 <conn_auto_initiate>:
{
   2ded8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2deda:	7b43      	ldrb	r3, [r0, #13]
   2dedc:	2b07      	cmp	r3, #7
{
   2dede:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2dee0:	d15a      	bne.n	2df98 <conn_auto_initiate+0xc0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2dee2:	f3bf 8f5b 	dmb	ish
   2dee6:	6843      	ldr	r3, [r0, #4]
   2dee8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   2deec:	049b      	lsls	r3, r3, #18
   2deee:	f100 0604 	add.w	r6, r0, #4
   2def2:	d41b      	bmi.n	2df2c <conn_auto_initiate+0x54>
   2def4:	78c3      	ldrb	r3, [r0, #3]
   2def6:	b123      	cbz	r3, 2df02 <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   2def8:	4b28      	ldr	r3, [pc, #160]	; (2df9c <conn_auto_initiate+0xc4>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   2defa:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   2defe:	071d      	lsls	r5, r3, #28
   2df00:	d514      	bpl.n	2df2c <conn_auto_initiate+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   2df02:	2102      	movs	r1, #2
   2df04:	f242 0016 	movw	r0, #8214	; 0x2016
   2df08:	f7ff fea2 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   2df0c:	4605      	mov	r5, r0
   2df0e:	b168      	cbz	r0, 2df2c <conn_auto_initiate+0x54>
   2df10:	2102      	movs	r1, #2
   2df12:	3008      	adds	r0, #8
   2df14:	f021 fe81 	bl	4fc1a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2df18:	8823      	ldrh	r3, [r4, #0]
   2df1a:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   2df1c:	4629      	mov	r1, r5
   2df1e:	f242 0016 	movw	r0, #8214	; 0x2016
}
   2df22:	b004      	add	sp, #16
   2df24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   2df28:	f7ff becc 	b.w	2dcc4 <bt_hci_cmd_send>
   2df2c:	f3bf 8f5b 	dmb	ish
   2df30:	6863      	ldr	r3, [r4, #4]
   2df32:	4d1a      	ldr	r5, [pc, #104]	; (2df9c <conn_auto_initiate+0xc4>)
   2df34:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   2df38:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   2df3c:	f3c3 3100 	ubfx	r1, r3, #12, #1
   2df40:	d111      	bne.n	2df66 <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   2df42:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   2df46:	07d8      	lsls	r0, r3, #31
   2df48:	d50d      	bpl.n	2df66 <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   2df4a:	2302      	movs	r3, #2
   2df4c:	9100      	str	r1, [sp, #0]
   2df4e:	461a      	mov	r2, r3
   2df50:	4620      	mov	r0, r4
   2df52:	f01e fa14 	bl	4c37e <bt_le_set_phy>
		if (!err) {
   2df56:	b930      	cbnz	r0, 2df66 <conn_auto_initiate+0x8e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2df58:	2180      	movs	r1, #128	; 0x80
   2df5a:	4630      	mov	r0, r6
}
   2df5c:	b004      	add	sp, #16
   2df5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2df62:	f01e b803 	b.w	4bf6c <atomic_or>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   2df66:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   2df6a:	069a      	lsls	r2, r3, #26
   2df6c:	d514      	bpl.n	2df98 <conn_auto_initiate+0xc0>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   2df6e:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   2df72:	689b      	ldr	r3, [r3, #8]
   2df74:	079b      	lsls	r3, r3, #30
   2df76:	d50f      	bpl.n	2df98 <conn_auto_initiate+0xc0>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   2df78:	f10d 010e 	add.w	r1, sp, #14
   2df7c:	a803      	add	r0, sp, #12
   2df7e:	f01e f9ac 	bl	4c2da <hci_le_read_max_data_len>
			if (!err) {
   2df82:	b948      	cbnz	r0, 2df98 <conn_auto_initiate+0xc0>
				err = bt_le_set_data_len(conn,
   2df84:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2df88:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2df8c:	4620      	mov	r0, r4
}
   2df8e:	b004      	add	sp, #16
   2df90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				err = bt_le_set_data_len(conn,
   2df94:	f01e b9d6 	b.w	4c344 <bt_le_set_data_len>
}
   2df98:	b004      	add	sp, #16
   2df9a:	bd70      	pop	{r4, r5, r6, pc}
   2df9c:	20000030 	.word	0x20000030

0002dfa0 <bt_hci_le_enh_conn_complete>:
{
   2dfa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2dfa4:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   2dfa8:	4986      	ldr	r1, [pc, #536]	; (2e1c4 <bt_hci_le_enh_conn_complete+0x224>)
	handle |= ~BT_ACL_HANDLE_MASK;
   2dfaa:	ea6f 5307 	mvn.w	r3, r7, lsl #20
   2dfae:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   2dfb2:	4605      	mov	r5, r0
   2dfb4:	b085      	sub	sp, #20
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2dfb6:	fa1f f887 	uxth.w	r8, r7
	handle |= ~BT_ACL_HANDLE_MASK;
   2dfba:	b29b      	uxth	r3, r3
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   2dfbc:	2200      	movs	r2, #0
   2dfbe:	4608      	mov	r0, r1
		if (disconnected_handles[i] == handle) {
   2dfc0:	f831 4b02 	ldrh.w	r4, [r1], #2
   2dfc4:	42a3      	cmp	r3, r4
   2dfc6:	d120      	bne.n	2e00a <bt_hci_le_enh_conn_complete+0x6a>
			disconnected_handles[i] = 0;
   2dfc8:	2300      	movs	r3, #0
   2dfca:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
			return true;
   2dfce:	2601      	movs	r6, #1
	bt_id_pending_keys_update();
   2dfd0:	f000 fb32 	bl	2e638 <bt_id_pending_keys_update>
	if (evt->status) {
   2dfd4:	782c      	ldrb	r4, [r5, #0]
   2dfd6:	2c00      	cmp	r4, #0
   2dfd8:	d03d      	beq.n	2e056 <bt_hci_le_enh_conn_complete+0xb6>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2dfda:	2c3c      	cmp	r4, #60	; 0x3c
   2dfdc:	d11a      	bne.n	2e014 <bt_hci_le_enh_conn_complete+0x74>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2dfde:	f000 fe9b 	bl	2ed18 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2dfe2:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2dfe6:	3010      	adds	r0, #16
   2dfe8:	f01d ffcf 	bl	4bf8a <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   2dfec:	2000      	movs	r0, #0
   2dfee:	f7ff fcdb 	bl	2d9a8 <find_pending_connect.part.0>
		if (!conn) {
   2dff2:	4605      	mov	r5, r0
   2dff4:	b360      	cbz	r0, 2e050 <bt_hci_le_enh_conn_complete+0xb0>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   2dff6:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2dff8:	2100      	movs	r1, #0
   2dffa:	f001 fd6b 	bl	2fad4 <bt_conn_set_state>
		bt_conn_unref(conn);
   2dffe:	4628      	mov	r0, r5
}
   2e000:	b005      	add	sp, #20
   2e002:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   2e006:	f01e be61 	b.w	4cccc <bt_conn_unref>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   2e00a:	3201      	adds	r2, #1
   2e00c:	2a06      	cmp	r2, #6
   2e00e:	d1d7      	bne.n	2dfc0 <bt_hci_le_enh_conn_complete+0x20>
	return false;
   2e010:	2600      	movs	r6, #0
   2e012:	e7dd      	b.n	2dfd0 <bt_hci_le_enh_conn_complete+0x30>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2e014:	2c02      	cmp	r4, #2
   2e016:	d11b      	bne.n	2e050 <bt_hci_le_enh_conn_complete+0xb0>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   2e018:	2100      	movs	r1, #0
   2e01a:	2206      	movs	r2, #6
   2e01c:	4608      	mov	r0, r1
   2e01e:	f001 ff81 	bl	2ff24 <bt_conn_lookup_state_le>
	if (!conn) {
   2e022:	4605      	mov	r5, r0
   2e024:	b188      	cbz	r0, 2e04a <bt_hci_le_enh_conn_complete+0xaa>
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   2e026:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2e028:	2100      	movs	r1, #0
   2e02a:	f001 fd53 	bl	2fad4 <bt_conn_set_state>
   2e02e:	f3bf 8f5b 	dmb	ish
   2e032:	686b      	ldr	r3, [r5, #4]
   2e034:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   2e038:	07da      	lsls	r2, r3, #31
   2e03a:	d503      	bpl.n	2e044 <bt_hci_le_enh_conn_complete+0xa4>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   2e03c:	4621      	mov	r1, r4
   2e03e:	4628      	mov	r0, r5
   2e040:	f001 fd48 	bl	2fad4 <bt_conn_set_state>
	bt_conn_unref(conn);
   2e044:	4628      	mov	r0, r5
   2e046:	f01e fe41 	bl	4cccc <bt_conn_unref>
			bt_le_scan_update(false);
   2e04a:	2000      	movs	r0, #0
   2e04c:	f001 f8f4 	bl	2f238 <bt_le_scan_update>
}
   2e050:	b005      	add	sp, #20
   2e052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   2e056:	792b      	ldrb	r3, [r5, #4]
   2e058:	3b02      	subs	r3, #2
   2e05a:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   2e05c:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   2e060:	f200 8092 	bhi.w	2e188 <bt_hci_le_enh_conn_complete+0x1e8>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   2e064:	4649      	mov	r1, r9
   2e066:	a802      	add	r0, sp, #8
   2e068:	f01d ff7d 	bl	4bf66 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   2e06c:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   2e070:	2206      	movs	r2, #6
   2e072:	3b02      	subs	r3, #2
   2e074:	f105 0111 	add.w	r1, r5, #17
   2e078:	f10d 0001 	add.w	r0, sp, #1
   2e07c:	f88d 3008 	strb.w	r3, [sp, #8]
   2e080:	f01d fdea 	bl	4bc58 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   2e084:	2301      	movs	r3, #1
   2e086:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
   2e08a:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   2e08c:	2800      	cmp	r0, #0
   2e08e:	f040 808e 	bne.w	2e1ae <bt_hci_le_enh_conn_complete+0x20e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   2e092:	2206      	movs	r2, #6
   2e094:	a902      	add	r1, sp, #8
   2e096:	f001 ff45 	bl	2ff24 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2e09a:	78eb      	ldrb	r3, [r5, #3]
   2e09c:	2b01      	cmp	r3, #1
   2e09e:	4604      	mov	r4, r0
   2e0a0:	d10a      	bne.n	2e0b8 <bt_hci_le_enh_conn_complete+0x118>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2e0a2:	f000 fe39 	bl	2ed18 <bt_le_adv_lookup_legacy>
   2e0a6:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2e0aa:	4681      	mov	r9, r0
   2e0ac:	3010      	adds	r0, #16
   2e0ae:	f01d ff6c 	bl	4bf8a <atomic_and>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   2e0b2:	4648      	mov	r0, r9
   2e0b4:	f01e fd1b 	bl	4caee <bt_le_lim_adv_cancel_timeout>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2e0b8:	78eb      	ldrb	r3, [r5, #3]
   2e0ba:	b923      	cbnz	r3, 2e0c6 <bt_hci_le_enh_conn_complete+0x126>
   2e0bc:	4842      	ldr	r0, [pc, #264]	; (2e1c8 <bt_hci_le_enh_conn_complete+0x228>)
   2e0be:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   2e0c2:	f01d ff62 	bl	4bf8a <atomic_and>
	if (!conn) {
   2e0c6:	2c00      	cmp	r4, #0
   2e0c8:	d073      	beq.n	2e1b2 <bt_hci_le_enh_conn_complete+0x212>
	conn->handle = handle;
   2e0ca:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   2e0cc:	a902      	add	r1, sp, #8
	conn->handle = handle;
   2e0ce:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   2e0d2:	f01d ff48 	bl	4bf66 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   2e0d6:	7e2a      	ldrb	r2, [r5, #24]
   2e0d8:	7deb      	ldrb	r3, [r5, #23]
   2e0da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2e0de:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   2e0e2:	7eaa      	ldrb	r2, [r5, #26]
   2e0e4:	7e6b      	ldrb	r3, [r5, #25]
   2e0e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2e0ea:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   2e0ee:	7f2a      	ldrb	r2, [r5, #28]
   2e0f0:	7eeb      	ldrb	r3, [r5, #27]
   2e0f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2e0f6:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   2e0fa:	78eb      	ldrb	r3, [r5, #3]
   2e0fc:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   2e0fe:	2200      	movs	r2, #0
   2e100:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2e102:	2b01      	cmp	r3, #1
	conn->le.phy.tx_phy = BT_GAP_LE_PHY_1M;
   2e104:	f240 1201 	movw	r2, #257	; 0x101
   2e108:	f8a4 20b8 	strh.w	r2, [r4, #184]	; 0xb8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2e10c:	d115      	bne.n	2e13a <bt_hci_le_enh_conn_complete+0x19a>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   2e10e:	4669      	mov	r1, sp
   2e110:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   2e114:	f01d ff27 	bl	4bf66 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2e118:	f000 fdfe 	bl	2ed18 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   2e11c:	7a21      	ldrb	r1, [r4, #8]
   2e11e:	4d2b      	ldr	r5, [pc, #172]	; (2e1cc <bt_hci_le_enh_conn_complete+0x22c>)
   2e120:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   2e124:	4429      	add	r1, r5
   2e126:	f104 0096 	add.w	r0, r4, #150	; 0x96
   2e12a:	f01d ff1c 	bl	4bf66 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   2e12e:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   2e132:	065b      	lsls	r3, r3, #25
   2e134:	d501      	bpl.n	2e13a <bt_hci_le_enh_conn_complete+0x19a>
			bt_le_adv_resume();
   2e136:	f000 ffa9 	bl	2f08c <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2e13a:	78e3      	ldrb	r3, [r4, #3]
   2e13c:	b96b      	cbnz	r3, 2e15a <bt_hci_le_enh_conn_complete+0x1ba>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   2e13e:	4669      	mov	r1, sp
   2e140:	f104 0096 	add.w	r0, r4, #150	; 0x96
   2e144:	f01d ff0f 	bl	4bf66 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   2e148:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   2e14a:	4b20      	ldr	r3, [pc, #128]	; (2e1cc <bt_hci_le_enh_conn_complete+0x22c>)
					&bt_dev.id_addr[conn->id]);
   2e14c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   2e150:	4419      	add	r1, r3
   2e152:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   2e156:	f01d ff06 	bl	4bf66 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   2e15a:	2107      	movs	r1, #7
   2e15c:	4620      	mov	r0, r4
   2e15e:	f001 fcb9 	bl	2fad4 <bt_conn_set_state>
	if (is_disconnected) {
   2e162:	b11e      	cbz	r6, 2e16c <bt_hci_le_enh_conn_complete+0x1cc>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2e164:	2101      	movs	r1, #1
   2e166:	4620      	mov	r0, r4
   2e168:	f001 fcb4 	bl	2fad4 <bt_conn_set_state>
	bt_conn_connected(conn);
   2e16c:	4620      	mov	r0, r4
   2e16e:	f01e fde8 	bl	4cd42 <bt_conn_connected>
	conn_auto_initiate(conn);
   2e172:	4620      	mov	r0, r4
   2e174:	f7ff feb0 	bl	2ded8 <conn_auto_initiate>
	bt_conn_unref(conn);
   2e178:	4620      	mov	r0, r4
   2e17a:	f01e fda7 	bl	4cccc <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2e17e:	78e3      	ldrb	r3, [r4, #3]
   2e180:	2b00      	cmp	r3, #0
   2e182:	f47f af65 	bne.w	2e050 <bt_hci_le_enh_conn_complete+0xb0>
   2e186:	e760      	b.n	2e04a <bt_hci_le_enh_conn_complete+0xaa>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   2e188:	78eb      	ldrb	r3, [r5, #3]
   2e18a:	2b01      	cmp	r3, #1
   2e18c:	bf04      	itt	eq
   2e18e:	4b0f      	ldreq	r3, [pc, #60]	; (2e1cc <bt_hci_le_enh_conn_complete+0x22c>)
   2e190:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   2e194:	4649      	mov	r1, r9
   2e196:	4620      	mov	r0, r4
   2e198:	f01e fb1a 	bl	4c7d0 <bt_lookup_id_addr>
   2e19c:	4601      	mov	r1, r0
   2e19e:	a802      	add	r0, sp, #8
   2e1a0:	f01d fee1 	bl	4bf66 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   2e1a4:	4649      	mov	r1, r9
   2e1a6:	4668      	mov	r0, sp
   2e1a8:	f01d fedd 	bl	4bf66 <bt_addr_le_copy>
   2e1ac:	e76d      	b.n	2e08a <bt_hci_le_enh_conn_complete+0xea>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   2e1ae:	2801      	cmp	r0, #1
   2e1b0:	d004      	beq.n	2e1bc <bt_hci_le_enh_conn_complete+0x21c>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   2e1b2:	211f      	movs	r1, #31
   2e1b4:	4640      	mov	r0, r8
   2e1b6:	f01e f8aa 	bl	4c30e <bt_hci_disconnect>
		return;
   2e1ba:	e749      	b.n	2e050 <bt_hci_le_enh_conn_complete+0xb0>
   2e1bc:	a802      	add	r0, sp, #8
   2e1be:	f7ff fbf3 	bl	2d9a8 <find_pending_connect.part.0>
   2e1c2:	e76a      	b.n	2e09a <bt_hci_le_enh_conn_complete+0xfa>
   2e1c4:	2000720c 	.word	0x2000720c
   2e1c8:	200000fc 	.word	0x200000fc
   2e1cc:	20000030 	.word	0x20000030

0002e1d0 <bt_unpair>:
{
   2e1d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2e1d2:	460c      	mov	r4, r1
   2e1d4:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
   2e1d8:	b9d0      	cbnz	r0, 2e210 <bt_unpair+0x40>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   2e1da:	b949      	cbnz	r1, 2e1f0 <bt_unpair+0x20>
		bt_foreach_bond(id, unpair_remote, &id);
   2e1dc:	490e      	ldr	r1, [pc, #56]	; (2e218 <bt_unpair+0x48>)
   2e1de:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2e1e2:	f10d 0207 	add.w	r2, sp, #7
   2e1e6:	f005 fcd1 	bl	33b8c <bt_foreach_bond>
		return 0;
   2e1ea:	2000      	movs	r0, #0
}
   2e1ec:	b004      	add	sp, #16
   2e1ee:	bd10      	pop	{r4, pc}
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   2e1f0:	9002      	str	r0, [sp, #8]
	return memcmp(a, b, sizeof(*a));
   2e1f2:	2207      	movs	r2, #7
   2e1f4:	f8cd 000b 	str.w	r0, [sp, #11]
   2e1f8:	a902      	add	r1, sp, #8
   2e1fa:	4620      	mov	r0, r4
   2e1fc:	f01d fd1c 	bl	4bc38 <memcmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   2e200:	2800      	cmp	r0, #0
   2e202:	d0eb      	beq.n	2e1dc <bt_unpair+0xc>
	unpair(id, addr);
   2e204:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2e208:	4621      	mov	r1, r4
   2e20a:	f7ff fb5f 	bl	2d8cc <unpair>
	return 0;
   2e20e:	e7ec      	b.n	2e1ea <bt_unpair+0x1a>
		return -EINVAL;
   2e210:	f06f 0015 	mvn.w	r0, #21
   2e214:	e7ea      	b.n	2e1ec <bt_unpair+0x1c>
   2e216:	bf00      	nop
   2e218:	0004bfa9 	.word	0x0004bfa9

0002e21c <bt_security_err_get>:
	switch (hci_err) {
   2e21c:	2829      	cmp	r0, #41	; 0x29
   2e21e:	bf9a      	itte	ls
   2e220:	4b01      	ldrls	r3, [pc, #4]	; (2e228 <bt_security_err_get+0xc>)
   2e222:	5c18      	ldrbls	r0, [r3, r0]
{
   2e224:	2009      	movhi	r0, #9
}
   2e226:	4770      	bx	lr
   2e228:	0005421a 	.word	0x0005421a

0002e22c <hci_event_prio>:
{
   2e22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e230:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   2e232:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   2e236:	4630      	mov	r0, r6
   2e238:	f021 fd38 	bl	4fcac <net_buf_simple_headroom>
	state->len = buf->len;
   2e23c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2e240:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   2e244:	4605      	mov	r5, r0
   2e246:	d80c      	bhi.n	2e262 <hci_event_prio+0x36>
   2e248:	4a1c      	ldr	r2, [pc, #112]	; (2e2bc <hci_event_prio+0x90>)
   2e24a:	491d      	ldr	r1, [pc, #116]	; (2e2c0 <hci_event_prio+0x94>)
   2e24c:	481d      	ldr	r0, [pc, #116]	; (2e2c4 <hci_event_prio+0x98>)
   2e24e:	f640 532f 	movw	r3, #3375	; 0xd2f
   2e252:	f01b fbd2 	bl	499fa <printk>
   2e256:	4040      	eors	r0, r0
   2e258:	f380 8811 	msr	BASEPRI, r0
   2e25c:	f04f 0003 	mov.w	r0, #3
   2e260:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   2e262:	4630      	mov	r0, r6
   2e264:	2102      	movs	r1, #2
   2e266:	f021 fd09 	bl	4fc7c <net_buf_simple_pull_mem>
   2e26a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2e26c:	7800      	ldrb	r0, [r0, #0]
   2e26e:	f01d fe38 	bl	4bee2 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2e272:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2e274:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2e276:	d40c      	bmi.n	2e292 <hci_event_prio+0x66>
   2e278:	4a10      	ldr	r2, [pc, #64]	; (2e2bc <hci_event_prio+0x90>)
   2e27a:	4913      	ldr	r1, [pc, #76]	; (2e2c8 <hci_event_prio+0x9c>)
   2e27c:	4811      	ldr	r0, [pc, #68]	; (2e2c4 <hci_event_prio+0x98>)
   2e27e:	f640 5333 	movw	r3, #3379	; 0xd33
   2e282:	f01b fbba 	bl	499fa <printk>
   2e286:	4040      	eors	r0, r0
   2e288:	f380 8811 	msr	BASEPRI, r0
   2e28c:	f04f 0003 	mov.w	r0, #3
   2e290:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   2e292:	2305      	movs	r3, #5
   2e294:	4a0d      	ldr	r2, [pc, #52]	; (2e2cc <hci_event_prio+0xa0>)
   2e296:	7838      	ldrb	r0, [r7, #0]
   2e298:	4621      	mov	r1, r4
   2e29a:	f01d fe34 	bl	4bf06 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   2e29e:	07b3      	lsls	r3, r6, #30
   2e2a0:	d507      	bpl.n	2e2b2 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   2e2a2:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   2e2a4:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2e2a8:	fa13 f585 	uxtah	r5, r3, r5
   2e2ac:	60a5      	str	r5, [r4, #8]
}
   2e2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   2e2b2:	4620      	mov	r0, r4
}
   2e2b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   2e2b8:	f015 bb48 	b.w	4394c <net_buf_unref>
   2e2bc:	00054113 	.word	0x00054113
   2e2c0:	00054191 	.word	0x00054191
   2e2c4:	00054150 	.word	0x00054150
   2e2c8:	000541aa 	.word	0x000541aa
   2e2cc:	00052670 	.word	0x00052670

0002e2d0 <bt_recv>:
{
   2e2d0:	b570      	push	{r4, r5, r6, lr}
	if (bt_recv_thread_id == NULL) {
   2e2d2:	4d3b      	ldr	r5, [pc, #236]	; (2e3c0 <bt_recv+0xf0>)
   2e2d4:	682b      	ldr	r3, [r5, #0]
{
   2e2d6:	4604      	mov	r4, r0
	if (bt_recv_thread_id == NULL) {
   2e2d8:	b913      	cbnz	r3, 2e2e0 <bt_recv+0x10>
	return z_impl_z_current_get();
   2e2da:	f01a fbd3 	bl	48a84 <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
   2e2de:	6028      	str	r0, [r5, #0]
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2e2e0:	7d23      	ldrb	r3, [r4, #20]
	switch (bt_buf_get_type(buf)) {
   2e2e2:	2b01      	cmp	r3, #1
   2e2e4:	d036      	beq.n	2e354 <bt_recv+0x84>
   2e2e6:	2b03      	cmp	r3, #3
   2e2e8:	d163      	bne.n	2e3b2 <bt_recv+0xe2>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2e2ea:	89a3      	ldrh	r3, [r4, #12]
   2e2ec:	2b03      	cmp	r3, #3
   2e2ee:	d80c      	bhi.n	2e30a <bt_recv+0x3a>
   2e2f0:	4a34      	ldr	r2, [pc, #208]	; (2e3c4 <bt_recv+0xf4>)
   2e2f2:	4935      	ldr	r1, [pc, #212]	; (2e3c8 <bt_recv+0xf8>)
   2e2f4:	4835      	ldr	r0, [pc, #212]	; (2e3cc <bt_recv+0xfc>)
   2e2f6:	f240 13b5 	movw	r3, #437	; 0x1b5
   2e2fa:	f01b fb7e 	bl	499fa <printk>
   2e2fe:	4040      	eors	r0, r0
   2e300:	f380 8811 	msr	BASEPRI, r0
   2e304:	f04f 0003 	mov.w	r0, #3
   2e308:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   2e30a:	2104      	movs	r1, #4
   2e30c:	f104 0008 	add.w	r0, r4, #8
   2e310:	f021 fcb4 	bl	4fc7c <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   2e314:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   2e316:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   2e318:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   2e31a:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   2e31c:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   2e31e:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   2e322:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   2e324:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   2e326:	d003      	beq.n	2e330 <bt_recv+0x60>
	net_buf_unref(buf);
   2e328:	4620      	mov	r0, r4
   2e32a:	f015 fb0f 	bl	4394c <net_buf_unref>
}
   2e32e:	e00f      	b.n	2e350 <bt_recv+0x80>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   2e330:	f001 fbc8 	bl	2fac4 <bt_conn_lookup_handle>
	if (!conn) {
   2e334:	4605      	mov	r5, r0
   2e336:	2800      	cmp	r0, #0
   2e338:	d0f6      	beq.n	2e328 <bt_recv+0x58>
	acl(buf)->index = bt_conn_index(conn);
   2e33a:	f001 fc9b 	bl	2fc74 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   2e33e:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   2e340:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   2e342:	4621      	mov	r1, r4
   2e344:	4628      	mov	r0, r5
   2e346:	f01e fc59 	bl	4cbfc <bt_conn_recv>
	bt_conn_unref(conn);
   2e34a:	4628      	mov	r0, r5
   2e34c:	f01e fcbe 	bl	4cccc <bt_conn_unref>
		return 0;
   2e350:	2000      	movs	r0, #0
}
   2e352:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2e354:	89a3      	ldrh	r3, [r4, #12]
   2e356:	2b01      	cmp	r3, #1
   2e358:	d80c      	bhi.n	2e374 <bt_recv+0xa4>
   2e35a:	4a1a      	ldr	r2, [pc, #104]	; (2e3c4 <bt_recv+0xf4>)
   2e35c:	491a      	ldr	r1, [pc, #104]	; (2e3c8 <bt_recv+0xf8>)
   2e35e:	481b      	ldr	r0, [pc, #108]	; (2e3cc <bt_recv+0xfc>)
   2e360:	f640 1317 	movw	r3, #2327	; 0x917
   2e364:	f01b fb49 	bl	499fa <printk>
   2e368:	4040      	eors	r0, r0
   2e36a:	f380 8811 	msr	BASEPRI, r0
   2e36e:	f04f 0003 	mov.w	r0, #3
   2e372:	df02      	svc	2
   2e374:	2102      	movs	r1, #2
   2e376:	f104 0008 	add.w	r0, r4, #8
   2e37a:	f021 fc7f 	bl	4fc7c <net_buf_simple_pull_mem>
   2e37e:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   2e380:	7800      	ldrb	r0, [r0, #0]
   2e382:	f01d fdae 	bl	4bee2 <bt_hci_evt_get_flags>
   2e386:	0783      	lsls	r3, r0, #30
   2e388:	d40c      	bmi.n	2e3a4 <bt_recv+0xd4>
   2e38a:	4a0e      	ldr	r2, [pc, #56]	; (2e3c4 <bt_recv+0xf4>)
   2e38c:	4910      	ldr	r1, [pc, #64]	; (2e3d0 <bt_recv+0x100>)
   2e38e:	480f      	ldr	r0, [pc, #60]	; (2e3cc <bt_recv+0xfc>)
   2e390:	f640 131b 	movw	r3, #2331	; 0x91b
   2e394:	f01b fb31 	bl	499fa <printk>
   2e398:	4040      	eors	r0, r0
   2e39a:	f380 8811 	msr	BASEPRI, r0
   2e39e:	f04f 0003 	mov.w	r0, #3
   2e3a2:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   2e3a4:	4a0b      	ldr	r2, [pc, #44]	; (2e3d4 <bt_recv+0x104>)
   2e3a6:	7828      	ldrb	r0, [r5, #0]
   2e3a8:	2306      	movs	r3, #6
   2e3aa:	4621      	mov	r1, r4
   2e3ac:	f01d fdab 	bl	4bf06 <handle_event>
   2e3b0:	e7ba      	b.n	2e328 <bt_recv+0x58>
		net_buf_unref(buf);
   2e3b2:	4620      	mov	r0, r4
   2e3b4:	f015 faca 	bl	4394c <net_buf_unref>
		return -EINVAL;
   2e3b8:	f06f 0015 	mvn.w	r0, #21
   2e3bc:	e7c9      	b.n	2e352 <bt_recv+0x82>
   2e3be:	bf00      	nop
   2e3c0:	20004598 	.word	0x20004598
   2e3c4:	00054113 	.word	0x00054113
   2e3c8:	00054191 	.word	0x00054191
   2e3cc:	00054150 	.word	0x00054150
   2e3d0:	000541c3 	.word	0x000541c3
   2e3d4:	00052698 	.word	0x00052698

0002e3d8 <bt_recv_prio>:
{
   2e3d8:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   2e3da:	7d03      	ldrb	r3, [r0, #20]
   2e3dc:	2b01      	cmp	r3, #1
{
   2e3de:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   2e3e0:	d00c      	beq.n	2e3fc <bt_recv_prio+0x24>
   2e3e2:	4a09      	ldr	r2, [pc, #36]	; (2e408 <bt_recv_prio+0x30>)
   2e3e4:	4909      	ldr	r1, [pc, #36]	; (2e40c <bt_recv_prio+0x34>)
   2e3e6:	480a      	ldr	r0, [pc, #40]	; (2e410 <bt_recv_prio+0x38>)
   2e3e8:	f640 537c 	movw	r3, #3452	; 0xd7c
   2e3ec:	f01b fb05 	bl	499fa <printk>
   2e3f0:	4040      	eors	r0, r0
   2e3f2:	f380 8811 	msr	BASEPRI, r0
   2e3f6:	f04f 0003 	mov.w	r0, #3
   2e3fa:	df02      	svc	2
	hci_event_prio(buf);
   2e3fc:	4620      	mov	r0, r4
   2e3fe:	f7ff ff15 	bl	2e22c <hci_event_prio>
}
   2e402:	2000      	movs	r0, #0
   2e404:	bd10      	pop	{r4, pc}
   2e406:	bf00      	nop
   2e408:	00054113 	.word	0x00054113
   2e40c:	000541f1 	.word	0x000541f1
   2e410:	00054150 	.word	0x00054150

0002e414 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   2e414:	4a08      	ldr	r2, [pc, #32]	; (2e438 <bt_hci_driver_register+0x24>)
{
   2e416:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   2e418:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   2e41c:	b930      	cbnz	r0, 2e42c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   2e41e:	68d9      	ldr	r1, [r3, #12]
   2e420:	b139      	cbz	r1, 2e432 <bt_hci_driver_register+0x1e>
   2e422:	6919      	ldr	r1, [r3, #16]
   2e424:	b129      	cbz	r1, 2e432 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   2e426:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
   2e42a:	4770      	bx	lr
		return -EALREADY;
   2e42c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2e430:	4770      	bx	lr
		return -EINVAL;
   2e432:	f06f 0015 	mvn.w	r0, #21
}
   2e436:	4770      	bx	lr
   2e438:	20000030 	.word	0x20000030

0002e43c <bt_finalize_init>:
{
   2e43c:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e43e:	4804      	ldr	r0, [pc, #16]	; (2e450 <bt_finalize_init+0x14>)
   2e440:	2102      	movs	r1, #2
   2e442:	f01d fd93 	bl	4bf6c <atomic_or>
}
   2e446:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
   2e44a:	2000      	movs	r0, #0
   2e44c:	f000 bef4 	b.w	2f238 <bt_le_scan_update>
   2e450:	200000fc 	.word	0x200000fc

0002e454 <init_work>:

static void init_work(struct k_work *work)
{
   2e454:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
   2e456:	f7f7 ffbf 	bl	263d8 <bt_init>
	if (ready_cb) {
   2e45a:	4b03      	ldr	r3, [pc, #12]	; (2e468 <init_work+0x14>)
   2e45c:	681b      	ldr	r3, [r3, #0]
   2e45e:	b113      	cbz	r3, 2e466 <init_work+0x12>
		ready_cb(err);
	}
}
   2e460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   2e464:	4718      	bx	r3
}
   2e466:	bd10      	pop	{r4, pc}
   2e468:	200045b4 	.word	0x200045b4

0002e46c <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   2e46c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   2e46e:	4d22      	ldr	r5, [pc, #136]	; (2e4f8 <bt_enable+0x8c>)
   2e470:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
   2e474:	b088      	sub	sp, #32
   2e476:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   2e478:	2b00      	cmp	r3, #0
   2e47a:	d037      	beq.n	2e4ec <bt_enable+0x80>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e47c:	2101      	movs	r1, #1
   2e47e:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   2e482:	f01d fd73 	bl	4bf6c <atomic_or>
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2e486:	07c3      	lsls	r3, r0, #31
   2e488:	d433      	bmi.n	2e4f2 <bt_enable+0x86>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		err = bt_settings_init();
   2e48a:	f01d fcd1 	bl	4be30 <bt_settings_init>
		if (err) {
   2e48e:	4604      	mov	r4, r0
   2e490:	bb48      	cbnz	r0, 2e4e6 <bt_enable+0x7a>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   2e492:	4b1a      	ldr	r3, [pc, #104]	; (2e4fc <bt_enable+0x90>)
   2e494:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2e496:	2200      	movs	r2, #0
   2e498:	2300      	movs	r3, #0
   2e49a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2e49e:	f06f 0308 	mvn.w	r3, #8
   2e4a2:	e9cd 0302 	strd	r0, r3, [sp, #8]
   2e4a6:	e9cd 0000 	strd	r0, r0, [sp]
   2e4aa:	9004      	str	r0, [sp, #16]
   2e4ac:	4b14      	ldr	r3, [pc, #80]	; (2e500 <bt_enable+0x94>)
   2e4ae:	4915      	ldr	r1, [pc, #84]	; (2e504 <bt_enable+0x98>)
   2e4b0:	4815      	ldr	r0, [pc, #84]	; (2e508 <bt_enable+0x9c>)
   2e4b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2e4b6:	f019 fb99 	bl	47bec <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2e4ba:	4914      	ldr	r1, [pc, #80]	; (2e50c <bt_enable+0xa0>)
   2e4bc:	4812      	ldr	r0, [pc, #72]	; (2e508 <bt_enable+0x9c>)
   2e4be:	f022 fa0b 	bl	508d8 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&rx_thread_data, "BT RX");
#endif

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
   2e4c2:	f7ff f84f 	bl	2d564 <bt_hci_ecc_init>
	}

	err = bt_dev.drv->open();
   2e4c6:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   2e4ca:	68db      	ldr	r3, [r3, #12]
   2e4cc:	4798      	blx	r3
	if (err) {
   2e4ce:	4604      	mov	r4, r0
   2e4d0:	b948      	cbnz	r0, 2e4e6 <bt_enable+0x7a>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   2e4d2:	b926      	cbnz	r6, 2e4de <bt_enable+0x72>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   2e4d4:	b008      	add	sp, #32
   2e4d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   2e4da:	f7f7 bf7d 	b.w	263d8 <bt_init>
	k_work_submit(&bt_dev.init);
   2e4de:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   2e4e2:	f019 ff49 	bl	48378 <k_work_submit>
}
   2e4e6:	4620      	mov	r0, r4
   2e4e8:	b008      	add	sp, #32
   2e4ea:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2e4ec:	f06f 0412 	mvn.w	r4, #18
   2e4f0:	e7f9      	b.n	2e4e6 <bt_enable+0x7a>
		return -EALREADY;
   2e4f2:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2e4f6:	e7f6      	b.n	2e4e6 <bt_enable+0x7a>
   2e4f8:	20000030 	.word	0x20000030
   2e4fc:	200045b4 	.word	0x200045b4
   2e500:	0002dafd 	.word	0x0002dafd
   2e504:	20007ca0 	.word	0x20007ca0
   2e508:	20001aa0 	.word	0x20001aa0
   2e50c:	00054214 	.word	0x00054214

0002e510 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   2e510:	4800      	ldr	r0, [pc, #0]	; (2e514 <bt_get_name+0x4>)
   2e512:	4770      	bx	lr
   2e514:	00053dbc 	.word	0x00053dbc

0002e518 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   2e518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   2e51a:	4f0b      	ldr	r7, [pc, #44]	; (2e548 <id_find+0x30>)
{
   2e51c:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   2e51e:	2500      	movs	r5, #0
   2e520:	79fb      	ldrb	r3, [r7, #7]
   2e522:	b2ec      	uxtb	r4, r5
   2e524:	42a3      	cmp	r3, r4
   2e526:	d802      	bhi.n	2e52e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   2e528:	f06f 0001 	mvn.w	r0, #1
   2e52c:	e00a      	b.n	2e544 <id_find+0x2c>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   2e52e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   2e532:	2207      	movs	r2, #7
   2e534:	4439      	add	r1, r7
   2e536:	4630      	mov	r0, r6
   2e538:	f01d fb7e 	bl	4bc38 <memcmp>
   2e53c:	3501      	adds	r5, #1
   2e53e:	2800      	cmp	r0, #0
   2e540:	d1ee      	bne.n	2e520 <id_find+0x8>
   2e542:	4620      	mov	r0, r4
}
   2e544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e546:	bf00      	nop
   2e548:	20000030 	.word	0x20000030

0002e54c <set_random_address>:
{
   2e54c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   2e54e:	4913      	ldr	r1, [pc, #76]	; (2e59c <set_random_address+0x50>)
   2e550:	2206      	movs	r2, #6
   2e552:	4605      	mov	r5, r0
   2e554:	f01d fb70 	bl	4bc38 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   2e558:	b1d8      	cbz	r0, 2e592 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   2e55a:	2106      	movs	r1, #6
   2e55c:	f242 0005 	movw	r0, #8197	; 0x2005
   2e560:	f7ff fb76 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   2e564:	4604      	mov	r4, r0
   2e566:	b1b0      	cbz	r0, 2e596 <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2e568:	2206      	movs	r2, #6
   2e56a:	4629      	mov	r1, r5
   2e56c:	3008      	adds	r0, #8
   2e56e:	f021 fb5a 	bl	4fc26 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   2e572:	2200      	movs	r2, #0
   2e574:	4621      	mov	r1, r4
   2e576:	f242 0005 	movw	r0, #8197	; 0x2005
   2e57a:	f7ff fbc5 	bl	2dd08 <bt_hci_cmd_send_sync>
	if (err) {
   2e57e:	b948      	cbnz	r0, 2e594 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   2e580:	2206      	movs	r2, #6
   2e582:	4806      	ldr	r0, [pc, #24]	; (2e59c <set_random_address+0x50>)
   2e584:	4629      	mov	r1, r5
   2e586:	f01d fb67 	bl	4bc58 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   2e58a:	4b05      	ldr	r3, [pc, #20]	; (2e5a0 <set_random_address+0x54>)
   2e58c:	2201      	movs	r2, #1
   2e58e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
   2e592:	2000      	movs	r0, #0
}
   2e594:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2e596:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2e59a:	e7fb      	b.n	2e594 <set_random_address+0x48>
   2e59c:	20000091 	.word	0x20000091
   2e5a0:	20000030 	.word	0x20000030

0002e5a4 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   2e5a4:	b530      	push	{r4, r5, lr}
   2e5a6:	4604      	mov	r4, r0
   2e5a8:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2e5aa:	460d      	mov	r5, r1
   2e5ac:	b1d1      	cbz	r1, 2e5e4 <id_create.constprop.0+0x40>
   2e5ae:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2e5b0:	2207      	movs	r2, #7
   2e5b2:	a902      	add	r1, sp, #8
   2e5b4:	4628      	mov	r0, r5
   2e5b6:	9302      	str	r3, [sp, #8]
   2e5b8:	f8cd 300b 	str.w	r3, [sp, #11]
   2e5bc:	f01d fb3c 	bl	4bc38 <memcmp>
   2e5c0:	b180      	cbz	r0, 2e5e4 <id_create.constprop.0+0x40>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   2e5c2:	4814      	ldr	r0, [pc, #80]	; (2e614 <id_create.constprop.0+0x70>)
   2e5c4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2e5c8:	4629      	mov	r1, r5
   2e5ca:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   2e5cc:	f01e f871 	bl	4c6b2 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e5d0:	4811      	ldr	r0, [pc, #68]	; (2e618 <id_create.constprop.0+0x74>)
   2e5d2:	f01e f871 	bl	4c6b8 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   2e5d6:	0783      	lsls	r3, r0, #30
   2e5d8:	d501      	bpl.n	2e5de <id_create.constprop.0+0x3a>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   2e5da:	f7ff f857 	bl	2d68c <bt_settings_save_id>
	}

	return 0;
   2e5de:	2000      	movs	r0, #0
}
   2e5e0:	b005      	add	sp, #20
   2e5e2:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   2e5e4:	4668      	mov	r0, sp
   2e5e6:	f01d fc6e 	bl	4bec6 <bt_addr_le_create_static>
			if (err) {
   2e5ea:	2800      	cmp	r0, #0
   2e5ec:	d1f8      	bne.n	2e5e0 <id_create.constprop.0+0x3c>
		} while (id_find(&new_addr) >= 0);
   2e5ee:	4668      	mov	r0, sp
   2e5f0:	f7ff ff92 	bl	2e518 <id_find>
   2e5f4:	2800      	cmp	r0, #0
   2e5f6:	daf5      	bge.n	2e5e4 <id_create.constprop.0+0x40>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   2e5f8:	4b06      	ldr	r3, [pc, #24]	; (2e614 <id_create.constprop.0+0x70>)
   2e5fa:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2e5fe:	441c      	add	r4, r3
   2e600:	4669      	mov	r1, sp
   2e602:	4620      	mov	r0, r4
   2e604:	f01e f855 	bl	4c6b2 <bt_addr_le_copy>
		if (addr) {
   2e608:	2d00      	cmp	r5, #0
   2e60a:	d0e1      	beq.n	2e5d0 <id_create.constprop.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   2e60c:	4621      	mov	r1, r4
   2e60e:	4628      	mov	r0, r5
   2e610:	e7dc      	b.n	2e5cc <id_create.constprop.0+0x28>
   2e612:	bf00      	nop
   2e614:	20000030 	.word	0x20000030
   2e618:	200000fc 	.word	0x200000fc

0002e61c <bt_id_adv_random_addr_check>:
{
   2e61c:	b508      	push	{r3, lr}
   2e61e:	4805      	ldr	r0, [pc, #20]	; (2e634 <bt_id_adv_random_addr_check+0x18>)
   2e620:	f01e f84a 	bl	4c6b8 <atomic_get>
	if (!(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
   2e624:	0503      	lsls	r3, r0, #20
   2e626:	d402      	bmi.n	2e62e <bt_id_adv_random_addr_check+0x12>
   2e628:	4802      	ldr	r0, [pc, #8]	; (2e634 <bt_id_adv_random_addr_check+0x18>)
   2e62a:	f01e f845 	bl	4c6b8 <atomic_get>
}
   2e62e:	2001      	movs	r0, #1
   2e630:	bd08      	pop	{r3, pc}
   2e632:	bf00      	nop
   2e634:	200000fc 	.word	0x200000fc

0002e638 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e638:	4b0a      	ldr	r3, [pc, #40]	; (2e664 <bt_id_pending_keys_update+0x2c>)
   2e63a:	f3bf 8f5b 	dmb	ish
   2e63e:	e853 2f00 	ldrex	r2, [r3]
   2e642:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   2e646:	e843 1000 	strex	r0, r1, [r3]
   2e64a:	2800      	cmp	r0, #0
   2e64c:	d1f7      	bne.n	2e63e <bt_id_pending_keys_update+0x6>
   2e64e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   2e652:	0493      	lsls	r3, r2, #18
   2e654:	d504      	bpl.n	2e660 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   2e656:	4904      	ldr	r1, [pc, #16]	; (2e668 <bt_id_pending_keys_update+0x30>)
   2e658:	2200      	movs	r2, #0
   2e65a:	2002      	movs	r0, #2
   2e65c:	f005 bab6 	b.w	33bcc <bt_keys_foreach>
}
   2e660:	4770      	bx	lr
   2e662:	bf00      	nop
   2e664:	200000fc 	.word	0x200000fc
   2e668:	0004c83b 	.word	0x0004c83b

0002e66c <bt_id_add>:
{
   2e66c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2e670:	4c4e      	ldr	r4, [pc, #312]	; (2e7ac <bt_id_add+0x140>)
   2e672:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   2e676:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   2e67a:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2e67c:	b10a      	cbz	r2, 2e682 <bt_id_add+0x16>
   2e67e:	429a      	cmp	r2, r3
   2e680:	d209      	bcs.n	2e696 <bt_id_add+0x2a>
		bt_dev.le.rl_entries++;
   2e682:	3301      	adds	r3, #1
   2e684:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   2e688:	7a2b      	ldrb	r3, [r5, #8]
   2e68a:	f043 0304 	orr.w	r3, r3, #4
   2e68e:	722b      	strb	r3, [r5, #8]
}
   2e690:	b002      	add	sp, #8
   2e692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   2e696:	2100      	movs	r1, #0
   2e698:	2206      	movs	r2, #6
   2e69a:	4608      	mov	r0, r1
   2e69c:	f001 fc42 	bl	2ff24 <bt_conn_lookup_state_le>
	if (conn) {
   2e6a0:	f104 03cc 	add.w	r3, r4, #204	; 0xcc
   2e6a4:	4606      	mov	r6, r0
   2e6a6:	b1a0      	cbz	r0, 2e6d2 <bt_id_add+0x66>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e6a8:	f3bf 8f5b 	dmb	ish
   2e6ac:	e853 1f00 	ldrex	r1, [r3]
   2e6b0:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   2e6b4:	e843 1200 	strex	r2, r1, [r3]
   2e6b8:	2a00      	cmp	r2, #0
   2e6ba:	d1f7      	bne.n	2e6ac <bt_id_add+0x40>
   2e6bc:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   2e6c0:	7a2b      	ldrb	r3, [r5, #8]
   2e6c2:	f043 0301 	orr.w	r3, r3, #1
   2e6c6:	722b      	strb	r3, [r5, #8]
}
   2e6c8:	b002      	add	sp, #8
   2e6ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   2e6ce:	f01e bafd 	b.w	4cccc <bt_conn_unref>
   2e6d2:	4618      	mov	r0, r3
   2e6d4:	f01d fff0 	bl	4c6b8 <atomic_get>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   2e6d8:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2e6da:	f3c0 1740 	ubfx	r7, r0, #5, #1
   2e6de:	4834      	ldr	r0, [pc, #208]	; (2e7b0 <bt_id_add+0x144>)
   2e6e0:	f000 fb14 	bl	2ed0c <bt_le_ext_adv_foreach>
	if (scan_enabled) {
   2e6e4:	b117      	cbz	r7, 2e6ec <bt_id_add+0x80>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   2e6e6:	4630      	mov	r0, r6
   2e6e8:	f01e fa15 	bl	4cb16 <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries) {
   2e6ec:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2e6f0:	b9b3      	cbnz	r3, 2e720 <bt_id_add+0xb4>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   2e6f2:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   2e6f6:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   2e6fa:	429a      	cmp	r2, r3
   2e6fc:	d123      	bne.n	2e746 <bt_id_add+0xda>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   2e6fe:	2200      	movs	r2, #0
   2e700:	4611      	mov	r1, r2
   2e702:	f242 0029 	movw	r0, #8233	; 0x2029
   2e706:	f7ff faff 	bl	2dd08 <bt_hci_cmd_send_sync>
		if (err) {
   2e70a:	b970      	cbnz	r0, 2e72a <bt_id_add+0xbe>
		bt_dev.le.rl_entries++;
   2e70c:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2e710:	3301      	adds	r3, #1
   2e712:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   2e716:	7a2b      	ldrb	r3, [r5, #8]
   2e718:	f043 0304 	orr.w	r3, r3, #4
   2e71c:	722b      	strb	r3, [r5, #8]
		goto done;
   2e71e:	e004      	b.n	2e72a <bt_id_add+0xbe>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   2e720:	2000      	movs	r0, #0
   2e722:	f01e f817 	bl	4c754 <addr_res_enable>
		if (err) {
   2e726:	2800      	cmp	r0, #0
   2e728:	d0e3      	beq.n	2e6f2 <bt_id_add+0x86>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   2e72a:	2001      	movs	r0, #1
   2e72c:	f01e f812 	bl	4c754 <addr_res_enable>
	if (scan_enabled) {
   2e730:	b117      	cbz	r7, 2e738 <bt_id_add+0xcc>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2e732:	2001      	movs	r0, #1
   2e734:	f01e f9ef 	bl	4cb16 <bt_le_scan_set_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2e738:	481e      	ldr	r0, [pc, #120]	; (2e7b4 <bt_id_add+0x148>)
   2e73a:	2100      	movs	r1, #0
}
   2e73c:	b002      	add	sp, #8
   2e73e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2e742:	f000 bae3 	b.w	2ed0c <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2e746:	f105 0801 	add.w	r8, r5, #1
   2e74a:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   2e74e:	4640      	mov	r0, r8
   2e750:	f01d ffcf 	bl	4c6f2 <hci_id_add.constprop.0>
	if (err) {
   2e754:	4606      	mov	r6, r0
   2e756:	2800      	cmp	r0, #0
   2e758:	d1e7      	bne.n	2e72a <bt_id_add+0xbe>
	bt_dev.le.rl_entries++;
   2e75a:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2e75e:	3301      	adds	r3, #1
   2e760:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   2e764:	7a2b      	ldrb	r3, [r5, #8]
   2e766:	f043 0304 	orr.w	r3, r3, #4
   2e76a:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   2e76c:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   2e770:	075b      	lsls	r3, r3, #29
   2e772:	d5da      	bpl.n	2e72a <bt_id_add+0xbe>
	bt_addr_le_copy(&cp.id_addr, addr);
   2e774:	4641      	mov	r1, r8
   2e776:	4668      	mov	r0, sp
   2e778:	f01d ff9b 	bl	4c6b2 <bt_addr_le_copy>
	cp.mode = mode;
   2e77c:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   2e77e:	2108      	movs	r1, #8
   2e780:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   2e784:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   2e788:	f7ff fa62 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   2e78c:	4604      	mov	r4, r0
   2e78e:	2800      	cmp	r0, #0
   2e790:	d0cb      	beq.n	2e72a <bt_id_add+0xbe>
   2e792:	2208      	movs	r2, #8
   2e794:	4669      	mov	r1, sp
   2e796:	4410      	add	r0, r2
   2e798:	f021 fa45 	bl	4fc26 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   2e79c:	4632      	mov	r2, r6
   2e79e:	4621      	mov	r1, r4
   2e7a0:	f242 004e 	movw	r0, #8270	; 0x204e
   2e7a4:	f7ff fab0 	bl	2dd08 <bt_hci_cmd_send_sync>
	if (err) {
   2e7a8:	e7bf      	b.n	2e72a <bt_id_add+0xbe>
   2e7aa:	bf00      	nop
   2e7ac:	20000030 	.word	0x20000030
   2e7b0:	0004c799 	.word	0x0004c799
   2e7b4:	0004c6c5 	.word	0x0004c6c5

0002e7b8 <bt_id_del>:
{
   2e7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
   2e7bc:	4d45      	ldr	r5, [pc, #276]	; (2e8d4 <bt_id_del+0x11c>)
   2e7be:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   2e7c2:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
{
   2e7c6:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
   2e7c8:	b112      	cbz	r2, 2e7d0 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   2e7ca:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   2e7cc:	4293      	cmp	r3, r2
   2e7ce:	dd08      	ble.n	2e7e2 <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
   2e7d0:	3b01      	subs	r3, #1
   2e7d2:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   2e7d6:	7a23      	ldrb	r3, [r4, #8]
   2e7d8:	f023 0304 	bic.w	r3, r3, #4
   2e7dc:	7223      	strb	r3, [r4, #8]
}
   2e7de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   2e7e2:	2100      	movs	r1, #0
   2e7e4:	2206      	movs	r2, #6
   2e7e6:	4608      	mov	r0, r1
   2e7e8:	f001 fb9c 	bl	2ff24 <bt_conn_lookup_state_le>
	if (conn) {
   2e7ec:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   2e7f0:	4606      	mov	r6, r0
   2e7f2:	b198      	cbz	r0, 2e81c <bt_id_del+0x64>
   2e7f4:	f3bf 8f5b 	dmb	ish
   2e7f8:	e853 1f00 	ldrex	r1, [r3]
   2e7fc:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   2e800:	e843 1200 	strex	r2, r1, [r3]
   2e804:	2a00      	cmp	r2, #0
   2e806:	d1f7      	bne.n	2e7f8 <bt_id_del+0x40>
   2e808:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   2e80c:	7a23      	ldrb	r3, [r4, #8]
   2e80e:	f043 0302 	orr.w	r3, r3, #2
   2e812:	7223      	strb	r3, [r4, #8]
}
   2e814:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   2e818:	f01e ba58 	b.w	4cccc <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e81c:	4618      	mov	r0, r3
   2e81e:	f01d ff4b 	bl	4c6b8 <atomic_get>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   2e822:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2e824:	f3c0 1840 	ubfx	r8, r0, #5, #1
   2e828:	482b      	ldr	r0, [pc, #172]	; (2e8d8 <bt_id_del+0x120>)
   2e82a:	f000 fa6f 	bl	2ed0c <bt_le_ext_adv_foreach>
	if (scan_enabled) {
   2e82e:	f1b8 0f00 	cmp.w	r8, #0
   2e832:	d002      	beq.n	2e83a <bt_id_del+0x82>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   2e834:	4630      	mov	r0, r6
   2e836:	f01e f96e 	bl	4cb16 <bt_le_scan_set_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   2e83a:	2000      	movs	r0, #0
   2e83c:	f01d ff8a 	bl	4c754 <addr_res_enable>
	if (err) {
   2e840:	4607      	mov	r7, r0
   2e842:	b988      	cbnz	r0, 2e868 <bt_id_del+0xb0>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2e844:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   2e848:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   2e84c:	429a      	cmp	r2, r3
   2e84e:	d21d      	bcs.n	2e88c <bt_id_del+0xd4>
		bt_dev.le.rl_entries--;
   2e850:	3b01      	subs	r3, #1
   2e852:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   2e856:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2e858:	4920      	ldr	r1, [pc, #128]	; (2e8dc <bt_id_del+0x124>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   2e85a:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2e85e:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   2e860:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2e862:	2002      	movs	r0, #2
   2e864:	f005 f9b2 	bl	33bcc <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
   2e868:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   2e86c:	b113      	cbz	r3, 2e874 <bt_id_del+0xbc>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   2e86e:	2001      	movs	r0, #1
   2e870:	f01d ff70 	bl	4c754 <addr_res_enable>
	if (scan_enabled) {
   2e874:	f1b8 0f00 	cmp.w	r8, #0
   2e878:	d002      	beq.n	2e880 <bt_id_del+0xc8>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2e87a:	2001      	movs	r0, #1
   2e87c:	f01e f94b 	bl	4cb16 <bt_le_scan_set_enable>
}
   2e880:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2e884:	4816      	ldr	r0, [pc, #88]	; (2e8e0 <bt_id_del+0x128>)
   2e886:	2100      	movs	r1, #0
   2e888:	f000 ba40 	b.w	2ed0c <bt_le_ext_adv_foreach>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   2e88c:	2107      	movs	r1, #7
   2e88e:	f242 0028 	movw	r0, #8232	; 0x2028
   2e892:	f7ff f9dd 	bl	2dc50 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   2e896:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
   2e89a:	4606      	mov	r6, r0
   2e89c:	2800      	cmp	r0, #0
   2e89e:	d0e3      	beq.n	2e868 <bt_id_del+0xb0>
	return net_buf_simple_add(&buf->b, len);
   2e8a0:	2107      	movs	r1, #7
   2e8a2:	3008      	adds	r0, #8
   2e8a4:	f021 f9b9 	bl	4fc1a <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2e8a8:	4649      	mov	r1, r9
   2e8aa:	f01d ff02 	bl	4c6b2 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   2e8ae:	463a      	mov	r2, r7
   2e8b0:	4631      	mov	r1, r6
   2e8b2:	f242 0028 	movw	r0, #8232	; 0x2028
   2e8b6:	f7ff fa27 	bl	2dd08 <bt_hci_cmd_send_sync>
	if (err) {
   2e8ba:	2800      	cmp	r0, #0
   2e8bc:	d1d4      	bne.n	2e868 <bt_id_del+0xb0>
	bt_dev.le.rl_entries--;
   2e8be:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   2e8c2:	3b01      	subs	r3, #1
   2e8c4:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   2e8c8:	7a23      	ldrb	r3, [r4, #8]
   2e8ca:	f023 0304 	bic.w	r3, r3, #4
   2e8ce:	7223      	strb	r3, [r4, #8]
   2e8d0:	e7ca      	b.n	2e868 <bt_id_del+0xb0>
   2e8d2:	bf00      	nop
   2e8d4:	20000030 	.word	0x20000030
   2e8d8:	0004c799 	.word	0x0004c799
   2e8dc:	0004c743 	.word	0x0004c743
   2e8e0:	0004c6c5 	.word	0x0004c6c5

0002e8e4 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   2e8e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2e8e6:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2e8e8:	4605      	mov	r5, r0
   2e8ea:	b918      	cbnz	r0, 2e8f4 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   2e8ec:	b1ec      	cbz	r4, 2e92a <bt_id_create+0x46>
		return -EINVAL;
   2e8ee:	f06f 0015 	mvn.w	r0, #21
   2e8f2:	e018      	b.n	2e926 <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2e8f4:	2300      	movs	r3, #0
   2e8f6:	2207      	movs	r2, #7
   2e8f8:	4669      	mov	r1, sp
   2e8fa:	9300      	str	r3, [sp, #0]
   2e8fc:	f8cd 3003 	str.w	r3, [sp, #3]
   2e900:	f01d f99a 	bl	4bc38 <memcmp>
   2e904:	2800      	cmp	r0, #0
   2e906:	d0f1      	beq.n	2e8ec <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   2e908:	782b      	ldrb	r3, [r5, #0]
   2e90a:	2b01      	cmp	r3, #1
   2e90c:	d1ef      	bne.n	2e8ee <bt_id_create+0xa>
   2e90e:	79ab      	ldrb	r3, [r5, #6]
   2e910:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2e914:	2bc0      	cmp	r3, #192	; 0xc0
   2e916:	d1ea      	bne.n	2e8ee <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   2e918:	4628      	mov	r0, r5
   2e91a:	f7ff fdfd 	bl	2e518 <id_find>
   2e91e:	2800      	cmp	r0, #0
   2e920:	dbe4      	blt.n	2e8ec <bt_id_create+0x8>
			return -EALREADY;
   2e922:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   2e926:	b002      	add	sp, #8
   2e928:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   2e92a:	4e12      	ldr	r6, [pc, #72]	; (2e974 <bt_id_create+0x90>)
   2e92c:	79f3      	ldrb	r3, [r6, #7]
   2e92e:	2b01      	cmp	r3, #1
   2e930:	d01c      	beq.n	2e96c <bt_id_create+0x88>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e932:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   2e936:	f01d febf 	bl	4c6b8 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2e93a:	07c3      	lsls	r3, r0, #31
   2e93c:	d40b      	bmi.n	2e956 <bt_id_create+0x72>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   2e93e:	2d00      	cmp	r5, #0
   2e940:	d0d5      	beq.n	2e8ee <bt_id_create+0xa>
   2e942:	2207      	movs	r2, #7
   2e944:	4669      	mov	r1, sp
   2e946:	4628      	mov	r0, r5
   2e948:	9400      	str	r4, [sp, #0]
   2e94a:	f8cd 4003 	str.w	r4, [sp, #3]
   2e94e:	f01d f973 	bl	4bc38 <memcmp>
   2e952:	2800      	cmp	r0, #0
   2e954:	d0cb      	beq.n	2e8ee <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   2e956:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
   2e958:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   2e95a:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   2e95c:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   2e95e:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
   2e960:	f7ff fe20 	bl	2e5a4 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
   2e964:	2800      	cmp	r0, #0
   2e966:	bf08      	it	eq
   2e968:	4620      	moveq	r0, r4
   2e96a:	e7dc      	b.n	2e926 <bt_id_create+0x42>
		return -ENOMEM;
   2e96c:	f06f 000b 	mvn.w	r0, #11
   2e970:	e7d9      	b.n	2e926 <bt_id_create+0x42>
   2e972:	bf00      	nop
   2e974:	20000030 	.word	0x20000030

0002e978 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   2e978:	b570      	push	{r4, r5, r6, lr}
   2e97a:	b086      	sub	sp, #24
   2e97c:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   2e97e:	aa01      	add	r2, sp, #4
   2e980:	2100      	movs	r1, #0
   2e982:	f241 0009 	movw	r0, #4105	; 0x1009
   2e986:	f7ff f9bf 	bl	2dd08 <bt_hci_cmd_send_sync>
	if (err) {
   2e98a:	4604      	mov	r4, r0
   2e98c:	b970      	cbnz	r0, 2e9ac <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   2e98e:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   2e990:	9002      	str	r0, [sp, #8]
   2e992:	689d      	ldr	r5, [r3, #8]
   2e994:	f8ad 000c 	strh.w	r0, [sp, #12]
   2e998:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   2e99a:	2206      	movs	r2, #6
   2e99c:	a902      	add	r1, sp, #8
   2e99e:	4628      	mov	r0, r5
   2e9a0:	f01d f94a 	bl	4bc38 <memcmp>
   2e9a4:	b928      	cbnz	r0, 2e9b2 <bt_id_read_public_addr+0x3a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   2e9a6:	9801      	ldr	r0, [sp, #4]
   2e9a8:	f014 ffd0 	bl	4394c <net_buf_unref>
		return 0U;
   2e9ac:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   2e9ae:	b006      	add	sp, #24
   2e9b0:	bd70      	pop	{r4, r5, r6, pc}
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   2e9b2:	4b0c      	ldr	r3, [pc, #48]	; (2e9e4 <bt_id_read_public_addr+0x6c>)
   2e9b4:	6818      	ldr	r0, [r3, #0]
   2e9b6:	9004      	str	r0, [sp, #16]
   2e9b8:	889b      	ldrh	r3, [r3, #4]
   2e9ba:	f8ad 3014 	strh.w	r3, [sp, #20]
   2e9be:	2206      	movs	r2, #6
   2e9c0:	a904      	add	r1, sp, #16
   2e9c2:	4628      	mov	r0, r5
   2e9c4:	f01d f938 	bl	4bc38 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   2e9c8:	2800      	cmp	r0, #0
   2e9ca:	d0ec      	beq.n	2e9a6 <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
   2e9cc:	2206      	movs	r2, #6
   2e9ce:	4629      	mov	r1, r5
   2e9d0:	1c70      	adds	r0, r6, #1
   2e9d2:	f01d f941 	bl	4bc58 <memcpy>
	net_buf_unref(rsp);
   2e9d6:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   2e9d8:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   2e9da:	f014 ffb7 	bl	4394c <net_buf_unref>
	return 1U;
   2e9de:	2001      	movs	r0, #1
   2e9e0:	e7e5      	b.n	2e9ae <bt_id_read_public_addr+0x36>
   2e9e2:	bf00      	nop
   2e9e4:	00051991 	.word	0x00051991

0002e9e8 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   2e9e8:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   2e9ea:	4668      	mov	r0, sp
   2e9ec:	f7ff ffc4 	bl	2e978 <bt_id_read_public_addr>
   2e9f0:	4b04      	ldr	r3, [pc, #16]	; (2ea04 <bt_setup_public_id_addr+0x1c>)
   2e9f2:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   2e9f4:	b118      	cbz	r0, 2e9fe <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   2e9f6:	4669      	mov	r1, sp
   2e9f8:	2000      	movs	r0, #0
   2e9fa:	f7ff fdd3 	bl	2e5a4 <id_create.constprop.0>
}
   2e9fe:	b003      	add	sp, #12
   2ea00:	f85d fb04 	ldr.w	pc, [sp], #4
   2ea04:	20000030 	.word	0x20000030

0002ea08 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   2ea08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   2ea0c:	4b15      	ldr	r3, [pc, #84]	; (2ea64 <bt_read_static_addr+0x5c>)
   2ea0e:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   2ea12:	07db      	lsls	r3, r3, #31
{
   2ea14:	4607      	mov	r7, r0
   2ea16:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   2ea18:	d404      	bmi.n	2ea24 <bt_read_static_addr+0x1c>
		BT_WARN("Read Static Addresses command not available");
		return 0;
   2ea1a:	2500      	movs	r5, #0
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   2ea1c:	4628      	mov	r0, r5
   2ea1e:	b002      	add	sp, #8
   2ea20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   2ea24:	aa01      	add	r2, sp, #4
   2ea26:	2100      	movs	r1, #0
   2ea28:	f64f 4009 	movw	r0, #64521	; 0xfc09
   2ea2c:	f7ff f96c 	bl	2dd08 <bt_hci_cmd_send_sync>
	if (err) {
   2ea30:	4604      	mov	r4, r0
   2ea32:	2800      	cmp	r0, #0
   2ea34:	d1f1      	bne.n	2ea1a <bt_read_static_addr+0x12>
	rp = (void *)rsp->data;
   2ea36:	9b01      	ldr	r3, [sp, #4]
   2ea38:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   2ea3a:	785d      	ldrb	r5, [r3, #1]
   2ea3c:	42b5      	cmp	r5, r6
   2ea3e:	bf28      	it	cs
   2ea40:	4635      	movcs	r5, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   2ea42:	f04f 0816 	mov.w	r8, #22
   2ea46:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   2ea48:	42a5      	cmp	r5, r4
   2ea4a:	dc03      	bgt.n	2ea54 <bt_read_static_addr+0x4c>
	net_buf_unref(rsp);
   2ea4c:	9801      	ldr	r0, [sp, #4]
   2ea4e:	f014 ff7d 	bl	4394c <net_buf_unref>
	if (!cnt) {
   2ea52:	e7e3      	b.n	2ea1c <bt_read_static_addr+0x14>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   2ea54:	fb08 7004 	mla	r0, r8, r4, r7
   2ea58:	2216      	movs	r2, #22
   2ea5a:	4631      	mov	r1, r6
   2ea5c:	f01d f8fc 	bl	4bc58 <memcpy>
	for (i = 0; i < cnt; i++) {
   2ea60:	3401      	adds	r4, #1
   2ea62:	e7f1      	b.n	2ea48 <bt_read_static_addr+0x40>
   2ea64:	20000030 	.word	0x20000030

0002ea68 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   2ea68:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   2ea6a:	4e15      	ldr	r6, [pc, #84]	; (2eac0 <bt_setup_random_id_addr+0x58>)
   2ea6c:	79f4      	ldrb	r4, [r6, #7]
{
   2ea6e:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   2ea70:	b92c      	cbnz	r4, 2ea7e <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   2ea72:	2101      	movs	r1, #1
   2ea74:	a802      	add	r0, sp, #8
   2ea76:	f7ff ffc7 	bl	2ea08 <bt_read_static_addr>
   2ea7a:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   2ea7c:	b9c8      	cbnz	r0, 2eab2 <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   2ea7e:	2100      	movs	r1, #0
   2ea80:	4608      	mov	r0, r1
}
   2ea82:	b009      	add	sp, #36	; 0x24
   2ea84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   2ea88:	f7ff bf2c 	b.w	2e8e4 <bt_id_create>
   2ea8c:	ab02      	add	r3, sp, #8
   2ea8e:	fb07 3105 	mla	r1, r7, r5, r3
   2ea92:	2206      	movs	r2, #6
   2ea94:	f10d 0001 	add.w	r0, sp, #1
   2ea98:	f01d f8de 	bl	4bc58 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   2ea9c:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   2ea9e:	4669      	mov	r1, sp
   2eaa0:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   2eaa2:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   2eaa6:	f7ff fd7d 	bl	2e5a4 <id_create.constprop.0>
				if (err) {
   2eaaa:	3401      	adds	r4, #1
   2eaac:	b110      	cbz	r0, 2eab4 <bt_setup_random_id_addr+0x4c>
}
   2eaae:	b009      	add	sp, #36	; 0x24
   2eab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   2eab2:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   2eab4:	79f3      	ldrb	r3, [r6, #7]
   2eab6:	b2e5      	uxtb	r5, r4
   2eab8:	42ab      	cmp	r3, r5
   2eaba:	d8e7      	bhi.n	2ea8c <bt_setup_random_id_addr+0x24>
			return 0;
   2eabc:	2000      	movs	r0, #0
   2eabe:	e7f6      	b.n	2eaae <bt_setup_random_id_addr+0x46>
   2eac0:	20000030 	.word	0x20000030

0002eac4 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   2eac4:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   2eac6:	4c07      	ldr	r4, [pc, #28]	; (2eae4 <bt_id_set_create_conn_own_addr+0x20>)
   2eac8:	7823      	ldrb	r3, [r4, #0]
   2eaca:	2b01      	cmp	r3, #1
{
   2eacc:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
   2eace:	d003      	beq.n	2ead8 <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   2ead0:	7823      	ldrb	r3, [r4, #0]
   2ead2:	702b      	strb	r3, [r5, #0]
	}

	return 0;
   2ead4:	2000      	movs	r0, #0
}
   2ead6:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   2ead8:	1c60      	adds	r0, r4, #1
   2eada:	f7ff fd37 	bl	2e54c <set_random_address>
			if (err) {
   2eade:	2800      	cmp	r0, #0
   2eae0:	d0f6      	beq.n	2ead0 <bt_id_set_create_conn_own_addr+0xc>
   2eae2:	e7f8      	b.n	2ead6 <bt_id_set_create_conn_own_addr+0x12>
   2eae4:	20000030 	.word	0x20000030

0002eae8 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   2eae8:	b570      	push	{r4, r5, r6, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   2eaea:	4b0c      	ldr	r3, [pc, #48]	; (2eb1c <bt_id_set_scan_own_addr+0x34>)
   2eaec:	781b      	ldrb	r3, [r3, #0]
   2eaee:	700b      	strb	r3, [r1, #0]
{
   2eaf0:	4606      	mov	r6, r0
   2eaf2:	460d      	mov	r5, r1
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   2eaf4:	f01d fe46 	bl	4c784 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   2eaf8:	b110      	cbz	r0, 2eb00 <bt_id_set_scan_own_addr+0x18>
				return err;
			}
		}
	}

	return 0;
   2eafa:	2400      	movs	r4, #0
}
   2eafc:	4620      	mov	r0, r4
   2eafe:	bd70      	pop	{r4, r5, r6, pc}
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   2eb00:	f01d fe6e 	bl	4c7e0 <bt_id_set_private_addr>
			if (err) {
   2eb04:	4604      	mov	r4, r0
   2eb06:	b910      	cbnz	r0, 2eb0e <bt_id_set_scan_own_addr+0x26>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   2eb08:	2301      	movs	r3, #1
   2eb0a:	702b      	strb	r3, [r5, #0]
   2eb0c:	e7f5      	b.n	2eafa <bt_id_set_scan_own_addr+0x12>
				if (active_scan || !is_adv_using_rand_addr()) {
   2eb0e:	2e00      	cmp	r6, #0
   2eb10:	d1f4      	bne.n	2eafc <bt_id_set_scan_own_addr+0x14>
   2eb12:	f01d fe37 	bl	4c784 <is_adv_using_rand_addr>
   2eb16:	2800      	cmp	r0, #0
   2eb18:	d1f6      	bne.n	2eb08 <bt_id_set_scan_own_addr+0x20>
   2eb1a:	e7ef      	b.n	2eafc <bt_id_set_scan_own_addr+0x14>
   2eb1c:	20000030 	.word	0x20000030

0002eb20 <bt_id_set_adv_own_addr>:
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   2eb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2eb24:	461e      	mov	r6, r3
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   2eb26:	07cb      	lsls	r3, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   2eb28:	7805      	ldrb	r5, [r0, #0]
{
   2eb2a:	4604      	mov	r4, r0
   2eb2c:	460f      	mov	r7, r1
   2eb2e:	4691      	mov	r9, r2
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   2eb30:	d533      	bpl.n	2eb9a <bt_id_set_adv_own_addr+0x7a>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   2eb32:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 2ebf4 <bt_id_set_adv_own_addr+0xd4>
   2eb36:	b1a2      	cbz	r2, 2eb62 <bt_id_set_adv_own_addr+0x42>
   2eb38:	0688      	lsls	r0, r1, #26
   2eb3a:	d40b      	bmi.n	2eb54 <bt_id_set_adv_own_addr+0x34>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2eb3c:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   2eb40:	f818 3003 	ldrb.w	r3, [r8, r3]
   2eb44:	2b01      	cmp	r3, #1
   2eb46:	d014      	beq.n	2eb72 <bt_id_set_adv_own_addr+0x52>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   2eb48:	7033      	strb	r3, [r6, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   2eb4a:	06ba      	lsls	r2, r7, #26
   2eb4c:	d521      	bpl.n	2eb92 <bt_id_set_adv_own_addr+0x72>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   2eb4e:	f043 0302 	orr.w	r3, r3, #2
   2eb52:	e00c      	b.n	2eb6e <bt_id_set_adv_own_addr+0x4e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   2eb54:	f898 30d0 	ldrb.w	r3, [r8, #208]	; 0xd0
   2eb58:	0659      	lsls	r1, r3, #25
   2eb5a:	d4ef      	bmi.n	2eb3c <bt_id_set_adv_own_addr+0x1c>
			return -ENOTSUP;
   2eb5c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2eb60:	e018      	b.n	2eb94 <bt_id_set_adv_own_addr+0x74>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2eb62:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   2eb66:	f818 3003 	ldrb.w	r3, [r8, r3]
   2eb6a:	2b01      	cmp	r3, #1
   2eb6c:	d001      	beq.n	2eb72 <bt_id_set_adv_own_addr+0x52>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
			}

			*own_addr_type = id_addr->type;
   2eb6e:	7033      	strb	r3, [r6, #0]
		} else {
			err = bt_id_set_adv_private_addr(adv);
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}

		if (err) {
   2eb70:	e00f      	b.n	2eb92 <bt_id_set_adv_own_addr+0x72>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   2eb72:	2007      	movs	r0, #7
   2eb74:	fb00 8005 	mla	r0, r0, r5, r8
		return set_random_address(addr);
   2eb78:	3001      	adds	r0, #1
   2eb7a:	f7ff fce7 	bl	2e54c <set_random_address>
				if (err) {
   2eb7e:	4604      	mov	r4, r0
   2eb80:	b940      	cbnz	r0, 2eb94 <bt_id_set_adv_own_addr+0x74>
			*own_addr_type = id_addr->type;
   2eb82:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   2eb86:	f818 3005 	ldrb.w	r3, [r8, r5]
   2eb8a:	7033      	strb	r3, [r6, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   2eb8c:	f1b9 0f00 	cmp.w	r9, #0
   2eb90:	d1db      	bne.n	2eb4a <bt_id_set_adv_own_addr+0x2a>
			return err;
		}
	}

	return 0;
   2eb92:	2400      	movs	r4, #0
}
   2eb94:	4620      	mov	r0, r4
   2eb96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   2eb9a:	f011 0704 	ands.w	r7, r1, #4
   2eb9e:	d011      	beq.n	2ebc4 <bt_id_set_adv_own_addr+0xa4>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2eba0:	4f14      	ldr	r7, [pc, #80]	; (2ebf4 <bt_id_set_adv_own_addr+0xd4>)
   2eba2:	ebc5 08c5 	rsb	r8, r5, r5, lsl #3
   2eba6:	f817 3008 	ldrb.w	r3, [r7, r8]
   2ebaa:	2b01      	cmp	r3, #1
   2ebac:	d1df      	bne.n	2eb6e <bt_id_set_adv_own_addr+0x4e>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   2ebae:	2007      	movs	r0, #7
   2ebb0:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   2ebb4:	4438      	add	r0, r7
   2ebb6:	f7ff fcc9 	bl	2e54c <set_random_address>
			*own_addr_type = id_addr->type;
   2ebba:	f817 3008 	ldrb.w	r3, [r7, r8]
		return set_random_address(addr);
   2ebbe:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
   2ebc0:	7033      	strb	r3, [r6, #0]
		if (err) {
   2ebc2:	e7e7      	b.n	2eb94 <bt_id_set_adv_own_addr+0x74>
   2ebc4:	480c      	ldr	r0, [pc, #48]	; (2ebf8 <bt_id_set_adv_own_addr+0xd8>)
   2ebc6:	f01d fd77 	bl	4c6b8 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   2ebca:	0683      	lsls	r3, r0, #26
   2ebcc:	d50b      	bpl.n	2ebe6 <bt_id_set_adv_own_addr+0xc6>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   2ebce:	4638      	mov	r0, r7
   2ebd0:	f01d ffa1 	bl	4cb16 <bt_le_scan_set_enable>
			err = bt_id_set_adv_private_addr(adv);
   2ebd4:	4620      	mov	r0, r4
   2ebd6:	f01d fe15 	bl	4c804 <bt_id_set_adv_private_addr>
   2ebda:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
   2ebdc:	2001      	movs	r0, #1
   2ebde:	7030      	strb	r0, [r6, #0]
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2ebe0:	f01d ff99 	bl	4cb16 <bt_le_scan_set_enable>
   2ebe4:	e7d6      	b.n	2eb94 <bt_id_set_adv_own_addr+0x74>
			err = bt_id_set_adv_private_addr(adv);
   2ebe6:	4620      	mov	r0, r4
   2ebe8:	f01d fe0c 	bl	4c804 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   2ebec:	2301      	movs	r3, #1
			err = bt_id_set_adv_private_addr(adv);
   2ebee:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
   2ebf0:	e7e6      	b.n	2ebc0 <bt_id_set_adv_own_addr+0xa0>
   2ebf2:	bf00      	nop
   2ebf4:	20000030 	.word	0x20000030
   2ebf8:	200000fc 	.word	0x200000fc

0002ebfc <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2ebfc:	6843      	ldr	r3, [r0, #4]
{
   2ebfe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ec00:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2ec02:	0558      	lsls	r0, r3, #21
   2ec04:	d408      	bmi.n	2ec18 <valid_adv_param+0x1c>
		return false;
	}

	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2ec06:	6922      	ldr	r2, [r4, #16]
   2ec08:	b10a      	cbz	r2, 2ec0e <valid_adv_param+0x12>
   2ec0a:	07d9      	lsls	r1, r3, #31
   2ec0c:	d504      	bpl.n	2ec18 <valid_adv_param+0x1c>
	if (param->id >= bt_dev.id_count ||
   2ec0e:	4d1c      	ldr	r5, [pc, #112]	; (2ec80 <valid_adv_param+0x84>)
   2ec10:	7820      	ldrb	r0, [r4, #0]
   2ec12:	79eb      	ldrb	r3, [r5, #7]
   2ec14:	4283      	cmp	r3, r0
   2ec16:	d802      	bhi.n	2ec1e <valid_adv_param+0x22>
		return false;
   2ec18:	2000      	movs	r0, #0
		return false;
	}

	return valid_adv_ext_param(param);
}
   2ec1a:	b003      	add	sp, #12
   2ec1c:	bd30      	pop	{r4, r5, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   2ec1e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   2ec22:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2ec24:	2207      	movs	r2, #7
   2ec26:	4669      	mov	r1, sp
   2ec28:	4428      	add	r0, r5
   2ec2a:	9300      	str	r3, [sp, #0]
   2ec2c:	f8cd 3003 	str.w	r3, [sp, #3]
   2ec30:	f01d f802 	bl	4bc38 <memcmp>
	if (param->id >= bt_dev.id_count ||
   2ec34:	2800      	cmp	r0, #0
   2ec36:	d0ef      	beq.n	2ec18 <valid_adv_param+0x1c>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2ec38:	6860      	ldr	r0, [r4, #4]
   2ec3a:	07c2      	lsls	r2, r0, #31
   2ec3c:	d406      	bmi.n	2ec4c <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   2ec3e:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   2ec42:	2b08      	cmp	r3, #8
   2ec44:	d802      	bhi.n	2ec4c <valid_adv_param+0x50>
   2ec46:	68a3      	ldr	r3, [r4, #8]
   2ec48:	2b9f      	cmp	r3, #159	; 0x9f
   2ec4a:	d9e5      	bls.n	2ec18 <valid_adv_param+0x1c>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   2ec4c:	f010 0f30 	tst.w	r0, #48	; 0x30
   2ec50:	d002      	beq.n	2ec58 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   2ec52:	6923      	ldr	r3, [r4, #16]
   2ec54:	2b00      	cmp	r3, #0
   2ec56:	d0df      	beq.n	2ec18 <valid_adv_param+0x1c>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   2ec58:	06c3      	lsls	r3, r0, #27
   2ec5a:	d401      	bmi.n	2ec60 <valid_adv_param+0x64>
   2ec5c:	6923      	ldr	r3, [r4, #16]
   2ec5e:	b943      	cbnz	r3, 2ec72 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   2ec60:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   2ec64:	429a      	cmp	r2, r3
   2ec66:	d8d7      	bhi.n	2ec18 <valid_adv_param+0x1c>
   2ec68:	2a1f      	cmp	r2, #31
   2ec6a:	d9d5      	bls.n	2ec18 <valid_adv_param+0x1c>
		    param->interval_min < 0x0020 ||
   2ec6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   2ec70:	d8d2      	bhi.n	2ec18 <valid_adv_param+0x1c>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   2ec72:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   2ec76:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   2ec7a:	bf18      	it	ne
   2ec7c:	2001      	movne	r0, #1
   2ec7e:	e7cc      	b.n	2ec1a <valid_adv_param+0x1e>
   2ec80:	20000030 	.word	0x20000030

0002ec84 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   2ec84:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   2ec86:	4606      	mov	r6, r0
   2ec88:	4b1e      	ldr	r3, [pc, #120]	; (2ed04 <le_adv_start_add_conn+0x80>)
   2ec8a:	f816 2b09 	ldrb.w	r2, [r6], #9
   2ec8e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   2ec92:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2ec94:	2300      	movs	r3, #0
{
   2ec96:	4605      	mov	r5, r0
   2ec98:	2207      	movs	r2, #7
   2ec9a:	460f      	mov	r7, r1
   2ec9c:	4630      	mov	r0, r6
   2ec9e:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2eca0:	9300      	str	r3, [sp, #0]
   2eca2:	f8cd 3003 	str.w	r3, [sp, #3]
   2eca6:	f01c ffc7 	bl	4bc38 <memcmp>
   2ecaa:	782a      	ldrb	r2, [r5, #0]
   2ecac:	4604      	mov	r4, r0
   2ecae:	b9a8      	cbnz	r0, 2ecdc <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   2ecb0:	4b15      	ldr	r3, [pc, #84]	; (2ed08 <le_adv_start_add_conn+0x84>)
   2ecb2:	6818      	ldr	r0, [r3, #0]
   2ecb4:	8899      	ldrh	r1, [r3, #4]
   2ecb6:	9002      	str	r0, [sp, #8]
   2ecb8:	799b      	ldrb	r3, [r3, #6]
   2ecba:	f8ad 100c 	strh.w	r1, [sp, #12]
   2ecbe:	4610      	mov	r0, r2
   2ecc0:	a902      	add	r1, sp, #8
   2ecc2:	f88d 300e 	strb.w	r3, [sp, #14]
   2ecc6:	f001 f8ed 	bl	2fea4 <bt_conn_add_le>
		if (!conn) {
   2ecca:	4605      	mov	r5, r0
   2eccc:	b1b8      	cbz	r0, 2ecfe <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   2ecce:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   2ecd0:	f000 ff00 	bl	2fad4 <bt_conn_set_state>
	*out_conn = conn;
   2ecd4:	603d      	str	r5, [r7, #0]
	return 0;
}
   2ecd6:	4620      	mov	r0, r4
   2ecd8:	b005      	add	sp, #20
   2ecda:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   2ecdc:	4631      	mov	r1, r6
   2ecde:	4610      	mov	r0, r2
   2ece0:	f01e f8bd 	bl	4ce5e <bt_conn_exists_le>
   2ece4:	4604      	mov	r4, r0
   2ece6:	b938      	cbnz	r0, 2ecf8 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   2ece8:	7828      	ldrb	r0, [r5, #0]
   2ecea:	4631      	mov	r1, r6
   2ecec:	f001 f8da 	bl	2fea4 <bt_conn_add_le>
	if (!conn) {
   2ecf0:	4605      	mov	r5, r0
   2ecf2:	b120      	cbz	r0, 2ecfe <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   2ecf4:	2105      	movs	r1, #5
   2ecf6:	e7eb      	b.n	2ecd0 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   2ecf8:	f06f 0415 	mvn.w	r4, #21
   2ecfc:	e7eb      	b.n	2ecd6 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   2ecfe:	f06f 040b 	mvn.w	r4, #11
   2ed02:	e7e8      	b.n	2ecd6 <le_adv_start_add_conn+0x52>
   2ed04:	20000030 	.word	0x20000030
   2ed08:	00051997 	.word	0x00051997

0002ed0c <bt_le_ext_adv_foreach>:
{
   2ed0c:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   2ed0e:	4801      	ldr	r0, [pc, #4]	; (2ed14 <bt_le_ext_adv_foreach+0x8>)
   2ed10:	4718      	bx	r3
   2ed12:	bf00      	nop
   2ed14:	20000048 	.word	0x20000048

0002ed18 <bt_le_adv_lookup_legacy>:
}
   2ed18:	4800      	ldr	r0, [pc, #0]	; (2ed1c <bt_le_adv_lookup_legacy+0x4>)
   2ed1a:	4770      	bx	lr
   2ed1c:	20000048 	.word	0x20000048

0002ed20 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   2ed20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   2ed24:	690f      	ldr	r7, [r1, #16]
{
   2ed26:	b08f      	sub	sp, #60	; 0x3c
   2ed28:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   2ed2a:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   2ed2c:	1afe      	subs	r6, r7, r3
{
   2ed2e:	4605      	mov	r5, r0
   2ed30:	488c      	ldr	r0, [pc, #560]	; (2ef64 <bt_le_adv_start_legacy+0x244>)
   2ed32:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   2ed34:	bf18      	it	ne
   2ed36:	2601      	movne	r6, #1
	struct bt_conn *conn = NULL;
   2ed38:	9307      	str	r3, [sp, #28]
   2ed3a:	f01d fd9f 	bl	4c87c <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2ed3e:	0782      	lsls	r2, r0, #30
{
   2ed40:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2ed42:	f140 8104 	bpl.w	2ef4e <bt_le_adv_start_legacy+0x22e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   2ed46:	4608      	mov	r0, r1
   2ed48:	f7ff ff58 	bl	2ebfc <valid_adv_param>
   2ed4c:	b928      	cbnz	r0, 2ed5a <bt_le_adv_start_legacy+0x3a>
		return -EINVAL;
   2ed4e:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   2ed52:	4658      	mov	r0, fp
   2ed54:	b00f      	add	sp, #60	; 0x3c
   2ed56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   2ed5a:	4620      	mov	r0, r4
   2ed5c:	f7ff fc5e 	bl	2e61c <bt_id_adv_random_addr_check>
   2ed60:	4681      	mov	r9, r0
   2ed62:	2800      	cmp	r0, #0
   2ed64:	d0f3      	beq.n	2ed4e <bt_le_adv_start_legacy+0x2e>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2ed66:	f105 0810 	add.w	r8, r5, #16
   2ed6a:	4640      	mov	r0, r8
   2ed6c:	f01d fd86 	bl	4c87c <atomic_get>
   2ed70:	0643      	lsls	r3, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2ed72:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   2ed76:	f100 80ed 	bmi.w	2ef54 <bt_le_adv_start_legacy+0x234>
	(void)memset(&set_param, 0, sizeof(set_param));
   2ed7a:	220f      	movs	r2, #15
   2ed7c:	4659      	mov	r1, fp
   2ed7e:	a80a      	add	r0, sp, #40	; 0x28
   2ed80:	f01c ff75 	bl	4bc6e <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   2ed84:	68a3      	ldr	r3, [r4, #8]
   2ed86:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   2ed8a:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   2ed8c:	68e3      	ldr	r3, [r4, #12]
   2ed8e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   2ed92:	f01d fd64 	bl	4c85e <get_adv_channel_map>
	if (adv->id != param->id) {
   2ed96:	782a      	ldrb	r2, [r5, #0]
   2ed98:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   2ed9a:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   2ed9e:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   2eda0:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   2eda4:	d004      	beq.n	2edb0 <bt_le_adv_start_legacy+0x90>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2eda6:	486f      	ldr	r0, [pc, #444]	; (2ef64 <bt_le_adv_start_legacy+0x244>)
   2eda8:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   2edac:	f01d fd6c 	bl	4c888 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   2edb0:	4a6d      	ldr	r2, [pc, #436]	; (2ef68 <bt_le_adv_start_legacy+0x248>)
	adv->id = param->id;
   2edb2:	7823      	ldrb	r3, [r4, #0]
   2edb4:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   2edb6:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   2edba:	6861      	ldr	r1, [r4, #4]
   2edbc:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   2edc0:	4632      	mov	r2, r6
   2edc2:	4628      	mov	r0, r5
   2edc4:	f7ff feac 	bl	2eb20 <bt_id_set_adv_own_addr>
	if (err) {
   2edc8:	4683      	mov	fp, r0
   2edca:	2800      	cmp	r0, #0
   2edcc:	d1c1      	bne.n	2ed52 <bt_le_adv_start_legacy+0x32>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   2edce:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
   2edd2:	b1a7      	cbz	r7, 2edfe <bt_le_adv_start_legacy+0xde>
	memcpy(dst, src, sizeof(*dst));
   2edd4:	2207      	movs	r2, #7
   2edd6:	6921      	ldr	r1, [r4, #16]
   2edd8:	f01c ff3e 	bl	4bc58 <memcpy>
	name_type = get_adv_name_type_param(param);
   2eddc:	4620      	mov	r0, r4
   2edde:	f01d fe4f 	bl	4ca80 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2ede2:	6862      	ldr	r2, [r4, #4]
	name_type = get_adv_name_type_param(param);
   2ede4:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2ede6:	07d0      	lsls	r0, r2, #31
   2ede8:	d41a      	bmi.n	2ee20 <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   2edea:	0592      	lsls	r2, r2, #22
   2edec:	d403      	bmi.n	2edf6 <bt_le_adv_start_legacy+0xd6>
   2edee:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2edf0:	b90b      	cbnz	r3, 2edf6 <bt_le_adv_start_legacy+0xd6>
   2edf2:	2e02      	cmp	r6, #2
   2edf4:	d14f      	bne.n	2ee96 <bt_le_adv_start_legacy+0x176>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   2edf6:	2302      	movs	r3, #2
   2edf8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2edfc:	e01e      	b.n	2ee3c <bt_le_adv_start_legacy+0x11c>
   2edfe:	2207      	movs	r2, #7
   2ee00:	a908      	add	r1, sp, #32
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   2ee02:	9708      	str	r7, [sp, #32]
   2ee04:	f8cd 7023 	str.w	r7, [sp, #35]	; 0x23
   2ee08:	f01c ff26 	bl	4bc58 <memcpy>
	name_type = get_adv_name_type_param(param);
   2ee0c:	4620      	mov	r0, r4
   2ee0e:	f01d fe37 	bl	4ca80 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2ee12:	6862      	ldr	r2, [r4, #4]
   2ee14:	07d1      	lsls	r1, r2, #31
	name_type = get_adv_name_type_param(param);
   2ee16:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2ee18:	d5e7      	bpl.n	2edea <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   2ee1a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
   2ee1e:	e00d      	b.n	2ee3c <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   2ee20:	f012 0f10 	tst.w	r2, #16
   2ee24:	bf0c      	ite	eq
   2ee26:	2201      	moveq	r2, #1
   2ee28:	2204      	movne	r2, #4
   2ee2a:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
   2ee2e:	6921      	ldr	r1, [r4, #16]
   2ee30:	2207      	movs	r2, #7
   2ee32:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   2ee36:	f01c ff0f 	bl	4bc58 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   2ee3a:	46d9      	mov	r9, fp
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   2ee3c:	210f      	movs	r1, #15
   2ee3e:	f242 0006 	movw	r0, #8198	; 0x2006
   2ee42:	f7fe ff05 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   2ee46:	4683      	mov	fp, r0
   2ee48:	2800      	cmp	r0, #0
   2ee4a:	f000 8086 	beq.w	2ef5a <bt_le_adv_start_legacy+0x23a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2ee4e:	220f      	movs	r2, #15
   2ee50:	a90a      	add	r1, sp, #40	; 0x28
   2ee52:	3008      	adds	r0, #8
   2ee54:	f020 fee7 	bl	4fc26 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   2ee58:	2200      	movs	r2, #0
   2ee5a:	4659      	mov	r1, fp
   2ee5c:	f242 0006 	movw	r0, #8198	; 0x2006
   2ee60:	f7fe ff52 	bl	2dd08 <bt_hci_cmd_send_sync>
	if (err) {
   2ee64:	2800      	cmp	r0, #0
   2ee66:	d17b      	bne.n	2ef60 <bt_le_adv_start_legacy+0x240>
	if (!dir_adv) {
   2ee68:	b1df      	cbz	r7, 2eea2 <bt_le_adv_start_legacy+0x182>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2ee6a:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2ee6c:	07db      	lsls	r3, r3, #31
   2ee6e:	d426      	bmi.n	2eebe <bt_le_adv_start_legacy+0x19e>
	return bt_le_adv_set_enable_legacy(adv, enable);
   2ee70:	4628      	mov	r0, r5
   2ee72:	2101      	movs	r1, #1
   2ee74:	f01d fe14 	bl	4caa0 <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2ee78:	9d07      	ldr	r5, [sp, #28]
	if (err) {
   2ee7a:	4683      	mov	fp, r0
   2ee7c:	2800      	cmp	r0, #0
   2ee7e:	d05f      	beq.n	2ef40 <bt_le_adv_start_legacy+0x220>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2ee80:	2d00      	cmp	r5, #0
   2ee82:	f43f af66 	beq.w	2ed52 <bt_le_adv_start_legacy+0x32>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2ee86:	4628      	mov	r0, r5
   2ee88:	2100      	movs	r1, #0
   2ee8a:	f000 fe23 	bl	2fad4 <bt_conn_set_state>
			bt_conn_unref(conn);
   2ee8e:	4628      	mov	r0, r5
   2ee90:	f01d ff1c 	bl	4cccc <bt_conn_unref>
   2ee94:	e75d      	b.n	2ed52 <bt_le_adv_start_legacy+0x32>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   2ee96:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   2ee98:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   2ee9c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2eea0:	e7cc      	b.n	2ee3c <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   2eea2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2eea4:	9300      	str	r3, [sp, #0]
   2eea6:	e9cd 9601 	strd	r9, r6, [sp, #4]
   2eeaa:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2eeac:	9905      	ldr	r1, [sp, #20]
   2eeae:	4652      	mov	r2, sl
   2eeb0:	4628      	mov	r0, r5
   2eeb2:	f01d fd6e 	bl	4c992 <le_adv_update.constprop.0>
		if (err) {
   2eeb6:	4683      	mov	fp, r0
   2eeb8:	2800      	cmp	r0, #0
   2eeba:	d0d6      	beq.n	2ee6a <bt_le_adv_start_legacy+0x14a>
   2eebc:	e749      	b.n	2ed52 <bt_le_adv_start_legacy+0x32>
		err = le_adv_start_add_conn(adv, &conn);
   2eebe:	a907      	add	r1, sp, #28
   2eec0:	4628      	mov	r0, r5
   2eec2:	f7ff fedf 	bl	2ec84 <le_adv_start_add_conn>
		if (err) {
   2eec6:	4683      	mov	fp, r0
   2eec8:	2800      	cmp	r0, #0
   2eeca:	d0d1      	beq.n	2ee70 <bt_le_adv_start_legacy+0x150>
			if (err == -ENOMEM && !dir_adv &&
   2eecc:	f110 0f0c 	cmn.w	r0, #12
   2eed0:	f47f af3f 	bne.w	2ed52 <bt_le_adv_start_legacy+0x32>
   2eed4:	2f00      	cmp	r7, #0
   2eed6:	f47f af3c 	bne.w	2ed52 <bt_le_adv_start_legacy+0x32>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   2eeda:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   2eedc:	0790      	lsls	r0, r2, #30
   2eede:	f53f af38 	bmi.w	2ed52 <bt_le_adv_start_legacy+0x32>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   2eee2:	6863      	ldr	r3, [r4, #4]
   2eee4:	f083 0302 	eor.w	r3, r3, #2
   2eee8:	f3c3 0b40 	ubfx	fp, r3, #1, #1
   2eeec:	f00b 0201 	and.w	r2, fp, #1
   2eef0:	210d      	movs	r1, #13
   2eef2:	4640      	mov	r0, r8
   2eef4:	f01d fd36 	bl	4c964 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   2eef8:	1e73      	subs	r3, r6, #1
   2eefa:	425a      	negs	r2, r3
   2eefc:	415a      	adcs	r2, r3
   2eefe:	2107      	movs	r1, #7
   2ef00:	4640      	mov	r0, r8
   2ef02:	f01d fd2f 	bl	4c964 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   2ef06:	1eb1      	subs	r1, r6, #2
   2ef08:	424a      	negs	r2, r1
   2ef0a:	414a      	adcs	r2, r1
   2ef0c:	4640      	mov	r0, r8
   2ef0e:	2108      	movs	r1, #8
   2ef10:	f01d fd28 	bl	4c964 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   2ef14:	6862      	ldr	r2, [r4, #4]
   2ef16:	2109      	movs	r1, #9
   2ef18:	f002 0201 	and.w	r2, r2, #1
   2ef1c:	4640      	mov	r0, r8
   2ef1e:	f01d fd21 	bl	4c964 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   2ef22:	464a      	mov	r2, r9
   2ef24:	210a      	movs	r1, #10
   2ef26:	4640      	mov	r0, r8
   2ef28:	f01d fd1c 	bl	4c964 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   2ef2c:	6862      	ldr	r2, [r4, #4]
   2ef2e:	210c      	movs	r1, #12
   2ef30:	f3c2 0280 	ubfx	r2, r2, #2, #1
   2ef34:	4640      	mov	r0, r8
   2ef36:	f01d fd15 	bl	4c964 <atomic_set_bit_to>
	return 0;
   2ef3a:	f04f 0b00 	mov.w	fp, #0
   2ef3e:	e708      	b.n	2ed52 <bt_le_adv_start_legacy+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2ef40:	b115      	cbz	r5, 2ef48 <bt_le_adv_start_legacy+0x228>
		bt_conn_unref(conn);
   2ef42:	4628      	mov	r0, r5
   2ef44:	f01d fec2 	bl	4cccc <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   2ef48:	2f00      	cmp	r7, #0
   2ef4a:	d1cf      	bne.n	2eeec <bt_le_adv_start_legacy+0x1cc>
   2ef4c:	e7c9      	b.n	2eee2 <bt_le_adv_start_legacy+0x1c2>
		return -EAGAIN;
   2ef4e:	f06f 0b0a 	mvn.w	fp, #10
   2ef52:	e6fe      	b.n	2ed52 <bt_le_adv_start_legacy+0x32>
		return -EALREADY;
   2ef54:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   2ef58:	e6fb      	b.n	2ed52 <bt_le_adv_start_legacy+0x32>
		return -ENOBUFS;
   2ef5a:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   2ef5e:	e6f8      	b.n	2ed52 <bt_le_adv_start_legacy+0x32>
   2ef60:	4683      	mov	fp, r0
   2ef62:	e6f6      	b.n	2ed52 <bt_le_adv_start_legacy+0x32>
   2ef64:	200000fc 	.word	0x200000fc
   2ef68:	20000030 	.word	0x20000030

0002ef6c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   2ef6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ef6e:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   2ef70:	9a06      	ldr	r2, [sp, #24]
{
   2ef72:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   2ef74:	e9cd 3200 	strd	r3, r2, [sp]
   2ef78:	462b      	mov	r3, r5
   2ef7a:	460a      	mov	r2, r1
   2ef7c:	4601      	mov	r1, r0
   2ef7e:	4811      	ldr	r0, [pc, #68]	; (2efc4 <bt_le_adv_start+0x58>)
   2ef80:	f7ff fece 	bl	2ed20 <bt_le_adv_start_legacy>
   2ef84:	4621      	mov	r1, r4
   2ef86:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   2ef88:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   2ef8a:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   2ef8e:	429d      	cmp	r5, r3
   2ef90:	d102      	bne.n	2ef98 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   2ef92:	4630      	mov	r0, r6
   2ef94:	b002      	add	sp, #8
   2ef96:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   2ef98:	880a      	ldrh	r2, [r1, #0]
   2ef9a:	4282      	cmp	r2, r0
   2ef9c:	d104      	bne.n	2efa8 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   2ef9e:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   2efa0:	b112      	cbz	r2, 2efa8 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   2efa2:	7812      	ldrb	r2, [r2, #0]
   2efa4:	07d2      	lsls	r2, r2, #31
   2efa6:	d402      	bmi.n	2efae <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   2efa8:	3301      	adds	r3, #1
   2efaa:	3108      	adds	r1, #8
   2efac:	e7ef      	b.n	2ef8e <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   2efae:	4906      	ldr	r1, [pc, #24]	; (2efc8 <bt_le_adv_start+0x5c>)
   2efb0:	4806      	ldr	r0, [pc, #24]	; (2efcc <bt_le_adv_start+0x60>)
   2efb2:	f021 fe34 	bl	50c1e <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   2efb6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2efba:	2300      	movs	r3, #0
   2efbc:	4803      	ldr	r0, [pc, #12]	; (2efcc <bt_le_adv_start+0x60>)
   2efbe:	f019 fa77 	bl	484b0 <k_work_reschedule>
   2efc2:	e7e6      	b.n	2ef92 <bt_le_adv_start+0x26>
   2efc4:	20000048 	.word	0x20000048
   2efc8:	0004caf5 	.word	0x0004caf5
   2efcc:	20000060 	.word	0x20000060

0002efd0 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   2efd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   2efd2:	4828      	ldr	r0, [pc, #160]	; (2f074 <bt_le_adv_stop+0xa4>)
   2efd4:	f01d fd8b 	bl	4caee <bt_le_lim_adv_cancel_timeout>
   2efd8:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2efdc:	4826      	ldr	r0, [pc, #152]	; (2f078 <bt_le_adv_stop+0xa8>)
   2efde:	f01d fc53 	bl	4c888 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2efe2:	4825      	ldr	r0, [pc, #148]	; (2f078 <bt_le_adv_stop+0xa8>)
   2efe4:	f01d fc4a 	bl	4c87c <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2efe8:	0641      	lsls	r1, r0, #25
   2efea:	d53a      	bpl.n	2f062 <bt_le_adv_stop+0x92>
   2efec:	4822      	ldr	r0, [pc, #136]	; (2f078 <bt_le_adv_stop+0xa8>)
   2efee:	f01d fc45 	bl	4c87c <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2eff2:	0582      	lsls	r2, r0, #22
   2eff4:	d521      	bpl.n	2f03a <bt_le_adv_stop+0x6a>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2eff6:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2eff8:	4820      	ldr	r0, [pc, #128]	; (2f07c <bt_le_adv_stop+0xac>)
   2effa:	9300      	str	r3, [sp, #0]
   2effc:	2207      	movs	r2, #7
   2effe:	4669      	mov	r1, sp
   2f000:	f8cd 3003 	str.w	r3, [sp, #3]
   2f004:	f01c fe18 	bl	4bc38 <memcmp>
   2f008:	4b1d      	ldr	r3, [pc, #116]	; (2f080 <bt_le_adv_stop+0xb0>)
   2f00a:	bb70      	cbnz	r0, 2f06a <bt_le_adv_stop+0x9a>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   2f00c:	4a1d      	ldr	r2, [pc, #116]	; (2f084 <bt_le_adv_stop+0xb4>)
   2f00e:	8891      	ldrh	r1, [r2, #4]
   2f010:	6810      	ldr	r0, [r2, #0]
   2f012:	7992      	ldrb	r2, [r2, #6]
   2f014:	f8ad 100c 	strh.w	r1, [sp, #12]
   2f018:	f88d 200e 	strb.w	r2, [sp, #14]
   2f01c:	9002      	str	r0, [sp, #8]
   2f01e:	2204      	movs	r2, #4
   2f020:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   2f022:	7e18      	ldrb	r0, [r3, #24]
   2f024:	f000 ff7e 	bl	2ff24 <bt_conn_lookup_state_le>
   2f028:	4604      	mov	r4, r0
	if (conn) {
   2f02a:	b130      	cbz	r0, 2f03a <bt_le_adv_stop+0x6a>
		conn->err = status;
   2f02c:	2100      	movs	r1, #0
   2f02e:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2f030:	f000 fd50 	bl	2fad4 <bt_conn_set_state>
		bt_conn_unref(conn);
   2f034:	4620      	mov	r0, r4
   2f036:	f01d fe49 	bl	4cccc <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   2f03a:	480e      	ldr	r0, [pc, #56]	; (2f074 <bt_le_adv_stop+0xa4>)
   2f03c:	2100      	movs	r1, #0
   2f03e:	f01d fd2f 	bl	4caa0 <bt_le_adv_set_enable_legacy>
		if (err) {
   2f042:	4604      	mov	r4, r0
   2f044:	b970      	cbnz	r0, 2f064 <bt_le_adv_stop+0x94>
   2f046:	4810      	ldr	r0, [pc, #64]	; (2f088 <bt_le_adv_stop+0xb8>)
   2f048:	f01d fc18 	bl	4c87c <atomic_get>
	if (!(IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	      BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) &&
	    !IS_ENABLED(CONFIG_BT_PRIVACY) &&
	    !IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY)) {
		/* If scan is ongoing set back NRPA */
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   2f04c:	0683      	lsls	r3, r0, #26
   2f04e:	d508      	bpl.n	2f062 <bt_le_adv_stop+0x92>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   2f050:	4620      	mov	r0, r4
   2f052:	f01d fd60 	bl	4cb16 <bt_le_scan_set_enable>
			bt_id_set_private_addr(BT_ID_DEFAULT);
   2f056:	4620      	mov	r0, r4
   2f058:	f01d fbc2 	bl	4c7e0 <bt_id_set_private_addr>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2f05c:	2001      	movs	r0, #1
   2f05e:	f01d fd5a 	bl	4cb16 <bt_le_scan_set_enable>
		return 0;
   2f062:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   2f064:	4620      	mov	r0, r4
   2f066:	b004      	add	sp, #16
   2f068:	bd10      	pop	{r4, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   2f06a:	2205      	movs	r2, #5
   2f06c:	f103 0121 	add.w	r1, r3, #33	; 0x21
   2f070:	e7d7      	b.n	2f022 <bt_le_adv_stop+0x52>
   2f072:	bf00      	nop
   2f074:	20000048 	.word	0x20000048
   2f078:	20000058 	.word	0x20000058
   2f07c:	20000051 	.word	0x20000051
   2f080:	20000030 	.word	0x20000030
   2f084:	00051997 	.word	0x00051997
   2f088:	200000fc 	.word	0x200000fc

0002f08c <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   2f08c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2f08e:	4c20      	ldr	r4, [pc, #128]	; (2f110 <bt_le_adv_resume+0x84>)
   2f090:	4620      	mov	r0, r4
   2f092:	f01d fbf3 	bl	4c87c <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2f096:	0480      	lsls	r0, r0, #18
   2f098:	d538      	bpl.n	2f10c <bt_le_adv_resume+0x80>
   2f09a:	4620      	mov	r0, r4
   2f09c:	f01d fbee 	bl	4c87c <atomic_get>
   2f0a0:	0641      	lsls	r1, r0, #25
   2f0a2:	d433      	bmi.n	2f10c <bt_le_adv_resume+0x80>
   2f0a4:	4620      	mov	r0, r4
   2f0a6:	f01d fbe9 	bl	4c87c <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2f0aa:	0582      	lsls	r2, r0, #22
   2f0ac:	d52e      	bpl.n	2f10c <bt_le_adv_resume+0x80>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   2f0ae:	a901      	add	r1, sp, #4
   2f0b0:	f1a4 0010 	sub.w	r0, r4, #16
   2f0b4:	f7ff fde6 	bl	2ec84 <le_adv_start_add_conn>
	if (err) {
   2f0b8:	4605      	mov	r5, r0
   2f0ba:	bb38      	cbnz	r0, 2f10c <bt_le_adv_resume+0x80>
	return bt_le_adv_set_enable_legacy(adv, enable);
   2f0bc:	2101      	movs	r1, #1
   2f0be:	f1a4 0010 	sub.w	r0, r4, #16
   2f0c2:	f01d fced 	bl	4caa0 <bt_le_adv_set_enable_legacy>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   2f0c6:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   2f0c8:	b928      	cbnz	r0, 2f0d6 <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   2f0ca:	4630      	mov	r0, r6
	if (persist_paused) {
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   2f0cc:	b002      	add	sp, #8
   2f0ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   2f0d2:	f01d bdfb 	b.w	4cccc <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2f0d6:	4629      	mov	r1, r5
   2f0d8:	4630      	mov	r0, r6
   2f0da:	f000 fcfb 	bl	2fad4 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f0de:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2f0e2:	4620      	mov	r0, r4
   2f0e4:	f01d fbd0 	bl	4c888 <atomic_and>
   2f0e8:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   2f0ea:	4630      	mov	r0, r6
   2f0ec:	f01d fdee 	bl	4cccc <bt_conn_unref>
	if (persist_paused) {
   2f0f0:	04ab      	lsls	r3, r5, #18
   2f0f2:	d50b      	bpl.n	2f10c <bt_le_adv_resume+0x80>
   2f0f4:	f3bf 8f5b 	dmb	ish
   2f0f8:	e854 3f00 	ldrex	r3, [r4]
   2f0fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2f100:	e844 3200 	strex	r2, r3, [r4]
   2f104:	2a00      	cmp	r2, #0
   2f106:	d1f7      	bne.n	2f0f8 <bt_le_adv_resume+0x6c>
   2f108:	f3bf 8f5b 	dmb	ish
}
   2f10c:	b002      	add	sp, #8
   2f10e:	bd70      	pop	{r4, r5, r6, pc}
   2f110:	20000058 	.word	0x20000058

0002f114 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2f114:	4b03      	ldr	r3, [pc, #12]	; (2f124 <atomic_get.constprop.0+0x10>)
   2f116:	f3bf 8f5b 	dmb	ish
   2f11a:	6818      	ldr	r0, [r3, #0]
   2f11c:	f3bf 8f5b 	dmb	ish
}
   2f120:	4770      	bx	lr
   2f122:	bf00      	nop
   2f124:	200000fc 	.word	0x200000fc

0002f128 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   2f128:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   2f12a:	2102      	movs	r1, #2
{
   2f12c:	b087      	sub	sp, #28
   2f12e:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   2f130:	f242 000c 	movw	r0, #8204	; 0x200c
   2f134:	f7fe fd8c 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   2f138:	4605      	mov	r5, r0
   2f13a:	b300      	cbz	r0, 2f17e <bt_le_scan_set_enable_legacy+0x56>
	return net_buf_simple_add(&buf->b, len);
   2f13c:	2102      	movs	r1, #2
   2f13e:	3008      	adds	r0, #8
   2f140:	f020 fd6b 	bl	4fc1a <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   2f144:	2c01      	cmp	r4, #1
   2f146:	4602      	mov	r2, r0
   2f148:	d117      	bne.n	2f17a <bt_le_scan_set_enable_legacy+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2f14a:	f7ff ffe3 	bl	2f114 <atomic_get.constprop.0>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   2f14e:	f3c0 2000 	ubfx	r0, r0, #8, #1
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   2f152:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   2f154:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   2f156:	425c      	negs	r4, r3
   2f158:	415c      	adcs	r4, r3
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   2f15a:	7050      	strb	r0, [r2, #1]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   2f15c:	a903      	add	r1, sp, #12
   2f15e:	4a09      	ldr	r2, [pc, #36]	; (2f184 <bt_le_scan_set_enable_legacy+0x5c>)
   2f160:	9400      	str	r4, [sp, #0]
   2f162:	4628      	mov	r0, r5
   2f164:	2305      	movs	r3, #5
   2f166:	f7fe fd61 	bl	2dc2c <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   2f16a:	2200      	movs	r2, #0
   2f16c:	4629      	mov	r1, r5
   2f16e:	f242 000c 	movw	r0, #8204	; 0x200c
   2f172:	f7fe fdc9 	bl	2dd08 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   2f176:	b007      	add	sp, #28
   2f178:	bd30      	pop	{r4, r5, pc}
   2f17a:	2000      	movs	r0, #0
   2f17c:	e7e9      	b.n	2f152 <bt_le_scan_set_enable_legacy+0x2a>
		return -ENOBUFS;
   2f17e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2f182:	e7f8      	b.n	2f176 <bt_le_scan_set_enable_legacy+0x4e>
   2f184:	200000fc 	.word	0x200000fc

0002f188 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   2f188:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2f18a:	4605      	mov	r5, r0
   2f18c:	4614      	mov	r4, r2
   2f18e:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   2f190:	2207      	movs	r2, #7
   2f192:	2100      	movs	r1, #0
   2f194:	4668      	mov	r0, sp
   2f196:	f01c fd6a 	bl	4bc6e <memset>

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   2f19a:	2300      	movs	r3, #0
   2f19c:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   2f1a0:	1e6b      	subs	r3, r5, #1
   2f1a2:	4258      	negs	r0, r3
   2f1a4:	f10d 0105 	add.w	r1, sp, #5
   2f1a8:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
   2f1aa:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
   2f1ae:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
   2f1b2:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   2f1b6:	f7ff fc97 	bl	2eae8 <bt_id_set_scan_own_addr>
	if (err) {
   2f1ba:	4604      	mov	r4, r0
   2f1bc:	bb38      	cbnz	r0, 2f20e <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   2f1be:	2107      	movs	r1, #7
   2f1c0:	f242 000b 	movw	r0, #8203	; 0x200b
   2f1c4:	f7fe fd44 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   2f1c8:	4606      	mov	r6, r0
   2f1ca:	b348      	cbz	r0, 2f220 <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2f1cc:	2207      	movs	r2, #7
   2f1ce:	4669      	mov	r1, sp
   2f1d0:	3008      	adds	r0, #8
   2f1d2:	f020 fd28 	bl	4fc26 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   2f1d6:	4622      	mov	r2, r4
   2f1d8:	4631      	mov	r1, r6
   2f1da:	f242 000b 	movw	r0, #8203	; 0x200b
   2f1de:	f7fe fd93 	bl	2dd08 <bt_hci_cmd_send_sync>
	if (err) {
   2f1e2:	4604      	mov	r4, r0
   2f1e4:	b998      	cbnz	r0, 2f20e <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
   2f1e6:	2001      	movs	r0, #1
   2f1e8:	f7ff ff9e 	bl	2f128 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   2f1ec:	4604      	mov	r4, r0
   2f1ee:	b970      	cbnz	r0, 2f20e <start_le_scan_legacy+0x86>
	if (val) {
   2f1f0:	2d01      	cmp	r5, #1
   2f1f2:	d10f      	bne.n	2f214 <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2f1f4:	f3bf 8f5b 	dmb	ish
   2f1f8:	4b0b      	ldr	r3, [pc, #44]	; (2f228 <start_le_scan_legacy+0xa0>)
   2f1fa:	e853 1f00 	ldrex	r1, [r3]
   2f1fe:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   2f202:	e843 1200 	strex	r2, r1, [r3]
   2f206:	2a00      	cmp	r2, #0
   2f208:	d1f7      	bne.n	2f1fa <start_le_scan_legacy+0x72>
   2f20a:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   2f20e:	4620      	mov	r0, r4
   2f210:	b002      	add	sp, #8
   2f212:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f214:	f06f 0180 	mvn.w	r1, #128	; 0x80
   2f218:	4803      	ldr	r0, [pc, #12]	; (2f228 <start_le_scan_legacy+0xa0>)
   2f21a:	f01d fc6d 	bl	4caf8 <atomic_and>
   2f21e:	e7f6      	b.n	2f20e <start_le_scan_legacy+0x86>
		return -ENOBUFS;
   2f220:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2f224:	e7f3      	b.n	2f20e <start_le_scan_legacy+0x86>
   2f226:	bf00      	nop
   2f228:	200000fc 	.word	0x200000fc

0002f22c <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   2f22c:	4b01      	ldr	r3, [pc, #4]	; (2f234 <bt_scan_reset+0x8>)
   2f22e:	2200      	movs	r2, #0
   2f230:	601a      	str	r2, [r3, #0]
}
   2f232:	4770      	bx	lr
   2f234:	200045c0 	.word	0x200045c0

0002f238 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   2f238:	b538      	push	{r3, r4, r5, lr}
   2f23a:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2f23c:	f7ff ff6a 	bl	2f114 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2f240:	0641      	lsls	r1, r0, #25
   2f242:	f3c0 1280 	ubfx	r2, r0, #6, #1
   2f246:	d433      	bmi.n	2f2b0 <bt_le_scan_update+0x78>
   2f248:	f7ff ff64 	bl	2f114 <atomic_get.constprop.0>
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   2f24c:	0683      	lsls	r3, r0, #26
   2f24e:	d427      	bmi.n	2f2a0 <bt_le_scan_update+0x68>

	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		struct bt_conn *conn;

		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   2f250:	2100      	movs	r1, #0
   2f252:	2206      	movs	r2, #6
   2f254:	4608      	mov	r0, r1
   2f256:	f000 fe65 	bl	2ff24 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT);
		if (conn) {
   2f25a:	4604      	mov	r4, r0
   2f25c:	bb30      	cbnz	r0, 2f2ac <bt_le_scan_update+0x74>
			bt_conn_unref(conn);
			return 0;
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   2f25e:	2202      	movs	r2, #2
   2f260:	4601      	mov	r1, r0
   2f262:	f000 fe5f 	bl	2ff24 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
   2f266:	b318      	cbz	r0, 2f2b0 <bt_le_scan_update+0x78>
   2f268:	f3bf 8f5b 	dmb	ish
   2f26c:	4b11      	ldr	r3, [pc, #68]	; (2f2b4 <bt_le_scan_update+0x7c>)
   2f26e:	e853 1f00 	ldrex	r1, [r3]
   2f272:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   2f276:	e843 1200 	strex	r2, r1, [r3]
   2f27a:	2a00      	cmp	r2, #0
   2f27c:	d1f7      	bne.n	2f26e <bt_le_scan_update+0x36>
   2f27e:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   2f282:	f01d fd23 	bl	4cccc <bt_conn_unref>
		window = BT_GAP_SCAN_FAST_WINDOW;
   2f286:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   2f288:	4620      	mov	r0, r4
   2f28a:	bf08      	it	eq
   2f28c:	2212      	moveq	r2, #18
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   2f28e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   2f292:	bf16      	itet	ne
   2f294:	2230      	movne	r2, #48	; 0x30
   2f296:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   2f29a:	2160      	movne	r1, #96	; 0x60
   2f29c:	f7ff bf74 	b.w	2f188 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   2f2a0:	4610      	mov	r0, r2
   2f2a2:	f7ff ff41 	bl	2f128 <bt_le_scan_set_enable_legacy>
		if (err) {
   2f2a6:	2800      	cmp	r0, #0
   2f2a8:	d0d2      	beq.n	2f250 <bt_le_scan_update+0x18>
}
   2f2aa:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   2f2ac:	f01d fd0e 	bl	4cccc <bt_conn_unref>
		return 0;
   2f2b0:	2000      	movs	r0, #0
   2f2b2:	e7fa      	b.n	2f2aa <bt_le_scan_update+0x72>
   2f2b4:	200000fc 	.word	0x200000fc

0002f2b8 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   2f2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   2f2bc:	f100 0608 	add.w	r6, r0, #8
   2f2c0:	b08d      	sub	sp, #52	; 0x34
   2f2c2:	4604      	mov	r4, r0
   2f2c4:	4630      	mov	r0, r6
   2f2c6:	f020 fce1 	bl	4fc8c <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   2f2ca:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 2f494 <bt_hci_le_adv_report+0x1dc>
   2f2ce:	4680      	mov	r8, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   2f2d0:	f1b8 0f00 	cmp.w	r8, #0
   2f2d4:	d102      	bne.n	2f2dc <bt_hci_le_adv_report+0x24>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   2f2d6:	b00d      	add	sp, #52	; 0x34
   2f2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
   2f2dc:	89a3      	ldrh	r3, [r4, #12]
   2f2de:	2b08      	cmp	r3, #8
   2f2e0:	d9f9      	bls.n	2f2d6 <bt_hci_le_adv_report+0x1e>
	return net_buf_simple_pull_mem(&buf->b, len);
   2f2e2:	2109      	movs	r1, #9
   2f2e4:	4630      	mov	r0, r6
   2f2e6:	f020 fcc9 	bl	4fc7c <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
   2f2ea:	f890 9008 	ldrb.w	r9, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   2f2ee:	237f      	movs	r3, #127	; 0x7f
   2f2f0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
   2f2f4:	eb00 0309 	add.w	r3, r0, r9
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   2f2f8:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
   2f2fa:	7a5b      	ldrb	r3, [r3, #9]
   2f2fc:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
   2f300:	23ff      	movs	r3, #255	; 0xff
   2f302:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
   2f306:	2300      	movs	r3, #0
   2f308:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   2f30c:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
   2f310:	7802      	ldrb	r2, [r0, #0]
   2f312:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   2f316:	2a04      	cmp	r2, #4
   2f318:	bf9c      	itt	ls
   2f31a:	4b5f      	ldrls	r3, [pc, #380]	; (2f498 <bt_hci_le_adv_report+0x1e0>)
   2f31c:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   2f31e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   2f322:	1c43      	adds	r3, r0, #1
   2f324:	4605      	mov	r5, r0
   2f326:	9301      	str	r3, [sp, #4]
   2f328:	f7ff fef4 	bl	2f114 <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   2f32c:	0647      	lsls	r7, r0, #25
   2f32e:	d50d      	bpl.n	2f34c <bt_hci_le_adv_report+0x94>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   2f330:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2f334:	0758      	lsls	r0, r3, #29
   2f336:	d509      	bpl.n	2f34c <bt_hci_le_adv_report+0x94>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   2f338:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
   2f33a:	4630      	mov	r0, r6
   2f33c:	3101      	adds	r1, #1
   2f33e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2f342:	f020 fc93 	bl	4fc6c <net_buf_simple_pull>
   2f346:	fa5f f888 	uxtb.w	r8, r8
   2f34a:	e7c1      	b.n	2f2d0 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   2f34c:	786b      	ldrb	r3, [r5, #1]
   2f34e:	1e9a      	subs	r2, r3, #2
   2f350:	2a01      	cmp	r2, #1
   2f352:	d84e      	bhi.n	2f3f2 <bt_hci_le_adv_report+0x13a>
	memcpy(dst, src, sizeof(*dst));
   2f354:	2207      	movs	r2, #7
   2f356:	1c69      	adds	r1, r5, #1
   2f358:	a804      	add	r0, sp, #16
   2f35a:	f01c fc7d 	bl	4bc58 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   2f35e:	f89d 3010 	ldrb.w	r3, [sp, #16]
   2f362:	3b02      	subs	r3, #2
   2f364:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
   2f368:	ab04      	add	r3, sp, #16
   2f36a:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
   2f36c:	f8da 3000 	ldr.w	r3, [sl]
   2f370:	b1a3      	cbz	r3, 2f39c <bt_hci_le_adv_report+0xe4>
	state->offset = net_buf_simple_headroom(buf);
   2f372:	4630      	mov	r0, r6
   2f374:	f020 fc9a 	bl	4fcac <net_buf_simple_headroom>
	state->len = buf->len;
   2f378:	89a7      	ldrh	r7, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   2f37a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   2f37e:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
   2f382:	f8da c000 	ldr.w	ip, [sl]
		buf->len = len;
   2f386:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   2f38a:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   2f38c:	4633      	mov	r3, r6
   2f38e:	a804      	add	r0, sp, #16
   2f390:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
   2f392:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   2f394:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2f396:	fa13 f38b 	uxtah	r3, r3, fp
   2f39a:	60a3      	str	r3, [r4, #8]
	return list->head;
   2f39c:	4b3f      	ldr	r3, [pc, #252]	; (2f49c <bt_hci_le_adv_report+0x1e4>)
   2f39e:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   2f3a0:	2b00      	cmp	r3, #0
   2f3a2:	d03b      	beq.n	2f41c <bt_hci_le_adv_report+0x164>
	return node->next;
   2f3a4:	681a      	ldr	r2, [r3, #0]
   2f3a6:	b102      	cbz	r2, 2f3aa <bt_hci_le_adv_report+0xf2>
   2f3a8:	3a08      	subs	r2, #8
		if (listener->recv) {
   2f3aa:	f853 1c08 	ldr.w	r1, [r3, #-8]
   2f3ae:	b1b9      	cbz	r1, 2f3e0 <bt_hci_le_adv_report+0x128>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   2f3b0:	4617      	mov	r7, r2
   2f3b2:	f1a3 0208 	sub.w	r2, r3, #8
	state->offset = net_buf_simple_headroom(buf);
   2f3b6:	4630      	mov	r0, r6
   2f3b8:	9203      	str	r2, [sp, #12]
   2f3ba:	f020 fc77 	bl	4fcac <net_buf_simple_headroom>
			listener->recv(info, buf);
   2f3be:	9a03      	ldr	r2, [sp, #12]
	state->len = buf->len;
   2f3c0:	89a3      	ldrh	r3, [r4, #12]
   2f3c2:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
   2f3c4:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   2f3c8:	4683      	mov	fp, r0
			listener->recv(info, buf);
   2f3ca:	4631      	mov	r1, r6
   2f3cc:	a808      	add	r0, sp, #32
	state->len = buf->len;
   2f3ce:	9302      	str	r3, [sp, #8]
   2f3d0:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   2f3d2:	6922      	ldr	r2, [r4, #16]
	buf->len = state->len;
   2f3d4:	9b02      	ldr	r3, [sp, #8]
   2f3d6:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2f3d8:	fa12 f28b 	uxtah	r2, r2, fp
   2f3dc:	60a2      	str	r2, [r4, #8]
}
   2f3de:	463a      	mov	r2, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   2f3e0:	b1e2      	cbz	r2, 2f41c <bt_hci_le_adv_report+0x164>
   2f3e2:	6897      	ldr	r7, [r2, #8]
   2f3e4:	6813      	ldr	r3, [r2, #0]
   2f3e6:	b1bf      	cbz	r7, 2f418 <bt_hci_le_adv_report+0x160>
   2f3e8:	3f08      	subs	r7, #8
		if (listener->recv) {
   2f3ea:	2b00      	cmp	r3, #0
   2f3ec:	d1e3      	bne.n	2f3b6 <bt_hci_le_adv_report+0xfe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   2f3ee:	463a      	mov	r2, r7
   2f3f0:	e7f7      	b.n	2f3e2 <bt_hci_le_adv_report+0x12a>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   2f3f2:	2bff      	cmp	r3, #255	; 0xff
   2f3f4:	d109      	bne.n	2f40a <bt_hci_le_adv_report+0x152>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   2f3f6:	2300      	movs	r3, #0
   2f3f8:	9306      	str	r3, [sp, #24]
   2f3fa:	2207      	movs	r2, #7
   2f3fc:	f8cd 301b 	str.w	r3, [sp, #27]
   2f400:	a906      	add	r1, sp, #24
   2f402:	a804      	add	r0, sp, #16
   2f404:	f01c fc28 	bl	4bc58 <memcpy>
}
   2f408:	e7ae      	b.n	2f368 <bt_hci_le_adv_report+0xb0>
		bt_addr_le_copy(&id_addr,
   2f40a:	1c69      	adds	r1, r5, #1
   2f40c:	2000      	movs	r0, #0
   2f40e:	f01d f9df 	bl	4c7d0 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   2f412:	2207      	movs	r2, #7
   2f414:	4601      	mov	r1, r0
   2f416:	e7f4      	b.n	2f402 <bt_hci_le_adv_report+0x14a>
		if (listener->recv) {
   2f418:	2b00      	cmp	r3, #0
   2f41a:	d1cc      	bne.n	2f3b6 <bt_hci_le_adv_report+0xfe>
	check_pending_conn(&id_addr, addr, info->adv_props);
   2f41c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   2f420:	f7ff fe78 	bl	2f114 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2f424:	0641      	lsls	r1, r0, #25
   2f426:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   2f42a:	d485      	bmi.n	2f338 <bt_hci_le_adv_report+0x80>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   2f42c:	07d2      	lsls	r2, r2, #31
   2f42e:	d583      	bpl.n	2f338 <bt_hci_le_adv_report+0x80>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   2f430:	2202      	movs	r2, #2
   2f432:	a904      	add	r1, sp, #16
   2f434:	4658      	mov	r0, fp
   2f436:	f000 fd75 	bl	2ff24 <bt_conn_lookup_state_le>
	if (!conn) {
   2f43a:	4607      	mov	r7, r0
   2f43c:	2800      	cmp	r0, #0
   2f43e:	f43f af7b 	beq.w	2f338 <bt_hci_le_adv_report+0x80>
   2f442:	f7ff fe67 	bl	2f114 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   2f446:	0683      	lsls	r3, r0, #26
   2f448:	d411      	bmi.n	2f46e <bt_hci_le_adv_report+0x1b6>
   2f44a:	9901      	ldr	r1, [sp, #4]
   2f44c:	2207      	movs	r2, #7
   2f44e:	f107 0096 	add.w	r0, r7, #150	; 0x96
   2f452:	f01c fc01 	bl	4bc58 <memcpy>
	if (bt_le_create_conn(conn)) {
   2f456:	4638      	mov	r0, r7
   2f458:	f01c ff57 	bl	4c30a <bt_le_create_conn>
   2f45c:	b960      	cbnz	r0, 2f478 <bt_hci_le_adv_report+0x1c0>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   2f45e:	4638      	mov	r0, r7
   2f460:	2106      	movs	r1, #6
   2f462:	f000 fb37 	bl	2fad4 <bt_conn_set_state>
	bt_conn_unref(conn);
   2f466:	4638      	mov	r0, r7
   2f468:	f01d fc30 	bl	4cccc <bt_conn_unref>
	return;
   2f46c:	e764      	b.n	2f338 <bt_hci_le_adv_report+0x80>
	return bt_le_scan_set_enable_legacy(enable);
   2f46e:	4658      	mov	r0, fp
   2f470:	f7ff fe5a 	bl	2f128 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   2f474:	2800      	cmp	r0, #0
   2f476:	d0e8      	beq.n	2f44a <bt_hci_le_adv_report+0x192>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   2f478:	231f      	movs	r3, #31
   2f47a:	733b      	strb	r3, [r7, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2f47c:	2100      	movs	r1, #0
   2f47e:	4638      	mov	r0, r7
   2f480:	f000 fb28 	bl	2fad4 <bt_conn_set_state>
	bt_conn_unref(conn);
   2f484:	4638      	mov	r0, r7
   2f486:	f01d fc21 	bl	4cccc <bt_conn_unref>
	bt_le_scan_update(false);
   2f48a:	2000      	movs	r0, #0
   2f48c:	f7ff fed4 	bl	2f238 <bt_le_scan_update>
   2f490:	e752      	b.n	2f338 <bt_hci_le_adv_report+0x80>
   2f492:	bf00      	nop
   2f494:	200045c0 	.word	0x200045c0
   2f498:	00054247 	.word	0x00054247
   2f49c:	200045b8 	.word	0x200045b8

0002f4a0 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   2f4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f4a2:	4605      	mov	r5, r0
   2f4a4:	f7ff fe36 	bl	2f114 <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2f4a8:	0780      	lsls	r0, r0, #30
{
   2f4aa:	460f      	mov	r7, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2f4ac:	d56c      	bpl.n	2f588 <bt_le_scan_start+0xe8>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   2f4ae:	782a      	ldrb	r2, [r5, #0]
   2f4b0:	2a01      	cmp	r2, #1
   2f4b2:	d903      	bls.n	2f4bc <bt_le_scan_start+0x1c>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   2f4b4:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   2f4b8:	4620      	mov	r0, r4
   2f4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   2f4bc:	686b      	ldr	r3, [r5, #4]
   2f4be:	2b0f      	cmp	r3, #15
   2f4c0:	d8f8      	bhi.n	2f4b4 <bt_le_scan_start+0x14>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   2f4c2:	8928      	ldrh	r0, [r5, #8]
   2f4c4:	1f03      	subs	r3, r0, #4
   2f4c6:	b29b      	uxth	r3, r3
   2f4c8:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   2f4cc:	42a3      	cmp	r3, r4
   2f4ce:	d8f1      	bhi.n	2f4b4 <bt_le_scan_start+0x14>
	if (param->window < 0x0004 || param->window > 0x4000) {
   2f4d0:	8969      	ldrh	r1, [r5, #10]
   2f4d2:	1f0b      	subs	r3, r1, #4
   2f4d4:	b29b      	uxth	r3, r3
   2f4d6:	42a3      	cmp	r3, r4
   2f4d8:	d8ec      	bhi.n	2f4b4 <bt_le_scan_start+0x14>
	if (param->window > param->interval) {
   2f4da:	4288      	cmp	r0, r1
   2f4dc:	d3ea      	bcc.n	2f4b4 <bt_le_scan_start+0x14>
	if (param->type && !bt_id_scan_random_addr_check()) {
   2f4de:	b992      	cbnz	r2, 2f506 <bt_le_scan_start+0x66>
   2f4e0:	f3bf 8f5b 	dmb	ish
   2f4e4:	4e2a      	ldr	r6, [pc, #168]	; (2f590 <bt_le_scan_start+0xf0>)
   2f4e6:	e856 0f00 	ldrex	r0, [r6]
   2f4ea:	f040 0340 	orr.w	r3, r0, #64	; 0x40
   2f4ee:	e846 3200 	strex	r2, r3, [r6]
   2f4f2:	2a00      	cmp	r2, #0
   2f4f4:	d1f7      	bne.n	2f4e6 <bt_le_scan_start+0x46>
   2f4f6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2f4fa:	f010 0240 	ands.w	r2, r0, #64	; 0x40
   2f4fe:	d007      	beq.n	2f510 <bt_le_scan_start+0x70>
		return -EALREADY;
   2f500:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2f504:	e7d8      	b.n	2f4b8 <bt_le_scan_start+0x18>
	if (param->type && !bt_id_scan_random_addr_check()) {
   2f506:	f01d f98f 	bl	4c828 <bt_id_scan_random_addr_check>
   2f50a:	2800      	cmp	r0, #0
   2f50c:	d1e8      	bne.n	2f4e0 <bt_le_scan_start+0x40>
   2f50e:	e7d1      	b.n	2f4b4 <bt_le_scan_start+0x14>
   2f510:	f7ff fe00 	bl	2f114 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   2f514:	0681      	lsls	r1, r0, #26
   2f516:	d50a      	bpl.n	2f52e <bt_le_scan_start+0x8e>
	return bt_le_scan_set_enable_legacy(enable);
   2f518:	4610      	mov	r0, r2
   2f51a:	f7ff fe05 	bl	2f128 <bt_le_scan_set_enable_legacy>
		if (err) {
   2f51e:	4604      	mov	r4, r0
   2f520:	b128      	cbz	r0, 2f52e <bt_le_scan_start+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f522:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2f526:	4630      	mov	r0, r6
   2f528:	f01d fae6 	bl	4caf8 <atomic_and>
		return err;
   2f52c:	e7c4      	b.n	2f4b8 <bt_le_scan_start+0x18>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   2f52e:	686b      	ldr	r3, [r5, #4]
	if (val) {
   2f530:	07db      	lsls	r3, r3, #31
   2f532:	d515      	bpl.n	2f560 <bt_le_scan_start+0xc0>
   2f534:	f3bf 8f5b 	dmb	ish
   2f538:	e856 3f00 	ldrex	r3, [r6]
   2f53c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2f540:	e846 3200 	strex	r2, r3, [r6]
   2f544:	2a00      	cmp	r2, #0
   2f546:	d1f7      	bne.n	2f538 <bt_le_scan_start+0x98>
   2f548:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   2f54c:	89ab      	ldrh	r3, [r5, #12]
   2f54e:	b16b      	cbz	r3, 2f56c <bt_le_scan_start+0xcc>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f550:	480f      	ldr	r0, [pc, #60]	; (2f590 <bt_le_scan_start+0xf0>)
   2f552:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2f556:	f01d facf 	bl	4caf8 <atomic_and>
			return -ENOTSUP;
   2f55a:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2f55e:	e7ab      	b.n	2f4b8 <bt_le_scan_start+0x18>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f560:	f46f 7180 	mvn.w	r1, #256	; 0x100
   2f564:	480a      	ldr	r0, [pc, #40]	; (2f590 <bt_le_scan_start+0xf0>)
   2f566:	f01d fac7 	bl	4caf8 <atomic_and>
   2f56a:	e7ef      	b.n	2f54c <bt_le_scan_start+0xac>
		err = start_le_scan_legacy(param->type, param->interval,
   2f56c:	896a      	ldrh	r2, [r5, #10]
   2f56e:	8929      	ldrh	r1, [r5, #8]
   2f570:	7828      	ldrb	r0, [r5, #0]
   2f572:	f7ff fe09 	bl	2f188 <start_le_scan_legacy>
	if (err) {
   2f576:	4604      	mov	r4, r0
   2f578:	b118      	cbz	r0, 2f582 <bt_le_scan_start+0xe2>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f57a:	4805      	ldr	r0, [pc, #20]	; (2f590 <bt_le_scan_start+0xf0>)
   2f57c:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2f580:	e7d2      	b.n	2f528 <bt_le_scan_start+0x88>
	scan_dev_found_cb = cb;
   2f582:	4b04      	ldr	r3, [pc, #16]	; (2f594 <bt_le_scan_start+0xf4>)
   2f584:	601f      	str	r7, [r3, #0]
	return 0;
   2f586:	e797      	b.n	2f4b8 <bt_le_scan_start+0x18>
		return -EAGAIN;
   2f588:	f06f 040a 	mvn.w	r4, #10
   2f58c:	e794      	b.n	2f4b8 <bt_le_scan_start+0x18>
   2f58e:	bf00      	nop
   2f590:	200000fc 	.word	0x200000fc
   2f594:	200045c0 	.word	0x200045c0

0002f598 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   2f598:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f59a:	4808      	ldr	r0, [pc, #32]	; (2f5bc <bt_le_scan_stop+0x24>)
   2f59c:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2f5a0:	f01d faaa 	bl	4caf8 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2f5a4:	0643      	lsls	r3, r0, #25
   2f5a6:	d506      	bpl.n	2f5b6 <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
   2f5a8:	4b05      	ldr	r3, [pc, #20]	; (2f5c0 <bt_le_scan_stop+0x28>)
   2f5aa:	2000      	movs	r0, #0
   2f5ac:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   2f5ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   2f5b2:	f7ff be41 	b.w	2f238 <bt_le_scan_update>
}
   2f5b6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2f5ba:	bd08      	pop	{r3, pc}
   2f5bc:	200000fc 	.word	0x200000fc
   2f5c0:	200045c0 	.word	0x200045c0

0002f5c4 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   2f5c4:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   2f5c6:	4904      	ldr	r1, [pc, #16]	; (2f5d8 <bt_pub_key_is_debug+0x14>)
   2f5c8:	2240      	movs	r2, #64	; 0x40
   2f5ca:	f01c fb35 	bl	4bc38 <memcmp>
}
   2f5ce:	fab0 f080 	clz	r0, r0
   2f5d2:	0940      	lsrs	r0, r0, #5
   2f5d4:	bd08      	pop	{r3, pc}
   2f5d6:	bf00      	nop
   2f5d8:	0005424c 	.word	0x0005424c

0002f5dc <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   2f5dc:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   2f5de:	4b31      	ldr	r3, [pc, #196]	; (2f6a4 <bt_pub_key_gen+0xc8>)
   2f5e0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   2f5e4:	f003 0306 	and.w	r3, r3, #6
   2f5e8:	2b06      	cmp	r3, #6
   2f5ea:	d152      	bne.n	2f692 <bt_pub_key_gen+0xb6>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
   2f5ec:	2800      	cmp	r0, #0
   2f5ee:	d053      	beq.n	2f698 <bt_pub_key_gen+0xbc>
	return list->head;
   2f5f0:	4e2d      	ldr	r6, [pc, #180]	; (2f6a8 <bt_pub_key_gen+0xcc>)
   2f5f2:	6832      	ldr	r2, [r6, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f5f4:	b132      	cbz	r2, 2f604 <bt_pub_key_gen+0x28>
   2f5f6:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   2f5f8:	4283      	cmp	r3, r0
   2f5fa:	d050      	beq.n	2f69e <bt_pub_key_gen+0xc2>
	return node->next;
   2f5fc:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f5fe:	b10b      	cbz	r3, 2f604 <bt_pub_key_gen+0x28>
   2f600:	3b04      	subs	r3, #4
   2f602:	e7f9      	b.n	2f5f8 <bt_pub_key_gen+0x1c>
	parent->next = child;
   2f604:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   2f606:	6872      	ldr	r2, [r6, #4]
			BT_WARN("Callback already registered");
			return -EALREADY;
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   2f608:	1d03      	adds	r3, r0, #4
	list->head = node;
   2f60a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2f60c:	b902      	cbnz	r2, 2f610 <bt_pub_key_gen+0x34>
	list->tail = node;
   2f60e:	6073      	str	r3, [r6, #4]
   2f610:	4c26      	ldr	r4, [pc, #152]	; (2f6ac <bt_pub_key_gen+0xd0>)
   2f612:	f3bf 8f5b 	dmb	ish
   2f616:	e854 2f00 	ldrex	r2, [r4]
   2f61a:	f042 0310 	orr.w	r3, r2, #16
   2f61e:	e844 3100 	strex	r1, r3, [r4]
   2f622:	2900      	cmp	r1, #0
   2f624:	d1f7      	bne.n	2f616 <bt_pub_key_gen+0x3a>
   2f626:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2f62a:	f012 0210 	ands.w	r2, r2, #16
   2f62e:	d002      	beq.n	2f636 <bt_pub_key_gen+0x5a>

		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
   2f630:	2500      	movs	r5, #0
}
   2f632:	4628      	mov	r0, r5
   2f634:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2f636:	f3bf 8f5b 	dmb	ish
   2f63a:	e854 3f00 	ldrex	r3, [r4]
   2f63e:	f023 0308 	bic.w	r3, r3, #8
   2f642:	e844 3100 	strex	r1, r3, [r4]
   2f646:	2900      	cmp	r1, #0
   2f648:	d1f7      	bne.n	2f63a <bt_pub_key_gen+0x5e>
   2f64a:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   2f64e:	4611      	mov	r1, r2
   2f650:	f242 0025 	movw	r0, #8229	; 0x2025
   2f654:	f7fe fb58 	bl	2dd08 <bt_hci_cmd_send_sync>
	if (err) {
   2f658:	4605      	mov	r5, r0
   2f65a:	2800      	cmp	r0, #0
   2f65c:	d0e8      	beq.n	2f630 <bt_pub_key_gen+0x54>
   2f65e:	f3bf 8f5b 	dmb	ish
   2f662:	e854 3f00 	ldrex	r3, [r4]
   2f666:	f023 0310 	bic.w	r3, r3, #16
   2f66a:	e844 3200 	strex	r2, r3, [r4]
   2f66e:	2a00      	cmp	r2, #0
   2f670:	d1f7      	bne.n	2f662 <bt_pub_key_gen+0x86>
   2f672:	f3bf 8f5b 	dmb	ish
	return list->head;
   2f676:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f678:	b13c      	cbz	r4, 2f68a <bt_pub_key_gen+0xae>
			if (cb->func) {
   2f67a:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f67e:	3c04      	subs	r4, #4
			if (cb->func) {
   2f680:	b10b      	cbz	r3, 2f686 <bt_pub_key_gen+0xaa>
				cb->func(NULL);
   2f682:	2000      	movs	r0, #0
   2f684:	4798      	blx	r3
	return node->next;
   2f686:	6864      	ldr	r4, [r4, #4]
   2f688:	e7f6      	b.n	2f678 <bt_pub_key_gen+0x9c>
	list->head = NULL;
   2f68a:	2300      	movs	r3, #0
	list->tail = NULL;
   2f68c:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   2f690:	e7cf      	b.n	2f632 <bt_pub_key_gen+0x56>
		return -ENOTSUP;
   2f692:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2f696:	e7cc      	b.n	2f632 <bt_pub_key_gen+0x56>
		return -EINVAL;
   2f698:	f06f 0515 	mvn.w	r5, #21
   2f69c:	e7c9      	b.n	2f632 <bt_pub_key_gen+0x56>
			return -EALREADY;
   2f69e:	f06f 0577 	mvn.w	r5, #119	; 0x77
   2f6a2:	e7c6      	b.n	2f632 <bt_pub_key_gen+0x56>
   2f6a4:	20000030 	.word	0x20000030
   2f6a8:	200045c8 	.word	0x200045c8
   2f6ac:	200000fc 	.word	0x200000fc

0002f6b0 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2f6b0:	4b05      	ldr	r3, [pc, #20]	; (2f6c8 <bt_pub_key_get+0x18>)
   2f6b2:	f3bf 8f5b 	dmb	ish
   2f6b6:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   2f6b8:	4804      	ldr	r0, [pc, #16]	; (2f6cc <bt_pub_key_get+0x1c>)
   2f6ba:	f3bf 8f5b 	dmb	ish
	return NULL;
   2f6be:	f013 0f08 	tst.w	r3, #8
}
   2f6c2:	bf08      	it	eq
   2f6c4:	2000      	moveq	r0, #0
   2f6c6:	4770      	bx	lr
   2f6c8:	200000fc 	.word	0x200000fc
   2f6cc:	200073cd 	.word	0x200073cd

0002f6d0 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   2f6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   2f6d2:	4d1f      	ldr	r5, [pc, #124]	; (2f750 <bt_dh_key_gen+0x80>)
   2f6d4:	682b      	ldr	r3, [r5, #0]
   2f6d6:	428b      	cmp	r3, r1
{
   2f6d8:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   2f6da:	d032      	beq.n	2f742 <bt_dh_key_gen+0x72>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2f6dc:	b113      	cbz	r3, 2f6e4 <bt_dh_key_gen+0x14>
		return -EBUSY;
   2f6de:	f06f 000f 	mvn.w	r0, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   2f6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f6e4:	4b1b      	ldr	r3, [pc, #108]	; (2f754 <bt_dh_key_gen+0x84>)
   2f6e6:	f3bf 8f5b 	dmb	ish
   2f6ea:	681a      	ldr	r2, [r3, #0]
   2f6ec:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2f6f0:	f3c2 1700 	ubfx	r7, r2, #4, #1
   2f6f4:	06d2      	lsls	r2, r2, #27
   2f6f6:	d4f2      	bmi.n	2f6de <bt_dh_key_gen+0xe>
   2f6f8:	f3bf 8f5b 	dmb	ish
   2f6fc:	681b      	ldr	r3, [r3, #0]
   2f6fe:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   2f702:	071b      	lsls	r3, r3, #28
   2f704:	d520      	bpl.n	2f748 <bt_dh_key_gen+0x78>
	dh_key_cb = cb;
   2f706:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   2f708:	f242 0026 	movw	r0, #8230	; 0x2026
   2f70c:	2140      	movs	r1, #64	; 0x40
   2f70e:	f7fe fa9f 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   2f712:	4604      	mov	r4, r0
   2f714:	b190      	cbz	r0, 2f73c <bt_dh_key_gen+0x6c>
	return net_buf_simple_add(&buf->b, len);
   2f716:	2140      	movs	r1, #64	; 0x40
   2f718:	3008      	adds	r0, #8
   2f71a:	f020 fa7e 	bl	4fc1a <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   2f71e:	2240      	movs	r2, #64	; 0x40
   2f720:	4631      	mov	r1, r6
   2f722:	f01c fa99 	bl	4bc58 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   2f726:	463a      	mov	r2, r7
   2f728:	4621      	mov	r1, r4
   2f72a:	f242 0026 	movw	r0, #8230	; 0x2026
   2f72e:	f7fe faeb 	bl	2dd08 <bt_hci_cmd_send_sync>
	if (err) {
   2f732:	2800      	cmp	r0, #0
   2f734:	d0d5      	beq.n	2f6e2 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   2f736:	2300      	movs	r3, #0
   2f738:	602b      	str	r3, [r5, #0]
		return err;
   2f73a:	e7d2      	b.n	2f6e2 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   2f73c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2f740:	e7f9      	b.n	2f736 <bt_dh_key_gen+0x66>
		return -EALREADY;
   2f742:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2f746:	e7cc      	b.n	2f6e2 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   2f748:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   2f74c:	e7c9      	b.n	2f6e2 <bt_dh_key_gen+0x12>
   2f74e:	bf00      	nop
   2f750:	200045c4 	.word	0x200045c4
   2f754:	200000fc 	.word	0x200000fc

0002f758 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   2f758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2f75a:	4c1b      	ldr	r4, [pc, #108]	; (2f7c8 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   2f75c:	6886      	ldr	r6, [r0, #8]
   2f75e:	f3bf 8f5b 	dmb	ish
   2f762:	e854 3f00 	ldrex	r3, [r4]
   2f766:	f023 0310 	bic.w	r3, r3, #16
   2f76a:	e844 3200 	strex	r2, r3, [r4]
   2f76e:	2a00      	cmp	r2, #0
   2f770:	d1f7      	bne.n	2f762 <bt_hci_evt_le_pkey_complete+0xa>
   2f772:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   2f776:	7833      	ldrb	r3, [r6, #0]
   2f778:	b983      	cbnz	r3, 2f79c <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   2f77a:	4814      	ldr	r0, [pc, #80]	; (2f7cc <bt_hci_evt_le_pkey_complete+0x74>)
   2f77c:	2240      	movs	r2, #64	; 0x40
   2f77e:	1c71      	adds	r1, r6, #1
   2f780:	f01c fa6a 	bl	4bc58 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2f784:	f3bf 8f5b 	dmb	ish
   2f788:	e854 3f00 	ldrex	r3, [r4]
   2f78c:	f043 0308 	orr.w	r3, r3, #8
   2f790:	e844 3200 	strex	r2, r3, [r4]
   2f794:	2a00      	cmp	r2, #0
   2f796:	d1f7      	bne.n	2f788 <bt_hci_evt_le_pkey_complete+0x30>
   2f798:	f3bf 8f5b 	dmb	ish
	return list->head;
   2f79c:	4d0c      	ldr	r5, [pc, #48]	; (2f7d0 <bt_hci_evt_le_pkey_complete+0x78>)
   2f79e:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f7a0:	b16c      	cbz	r4, 2f7be <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   2f7a2:	4f0a      	ldr	r7, [pc, #40]	; (2f7cc <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f7a4:	3c04      	subs	r4, #4
		if (cb->func) {
   2f7a6:	6823      	ldr	r3, [r4, #0]
   2f7a8:	b12b      	cbz	r3, 2f7b6 <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   2f7aa:	7832      	ldrb	r2, [r6, #0]
   2f7ac:	2a00      	cmp	r2, #0
   2f7ae:	bf0c      	ite	eq
   2f7b0:	4638      	moveq	r0, r7
   2f7b2:	2000      	movne	r0, #0
   2f7b4:	4798      	blx	r3
	return node->next;
   2f7b6:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f7b8:	b10c      	cbz	r4, 2f7be <bt_hci_evt_le_pkey_complete+0x66>
   2f7ba:	3c04      	subs	r4, #4
   2f7bc:	e7f3      	b.n	2f7a6 <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   2f7be:	2300      	movs	r3, #0
	list->tail = NULL;
   2f7c0:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   2f7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f7c6:	bf00      	nop
   2f7c8:	200000fc 	.word	0x200000fc
   2f7cc:	200073cd 	.word	0x200073cd
   2f7d0:	200045c8 	.word	0x200045c8

0002f7d4 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   2f7d4:	4905      	ldr	r1, [pc, #20]	; (2f7ec <bt_hci_evt_le_dhkey_complete+0x18>)
   2f7d6:	680b      	ldr	r3, [r1, #0]
   2f7d8:	b133      	cbz	r3, 2f7e8 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   2f7da:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   2f7dc:	2000      	movs	r0, #0
   2f7de:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   2f7e0:	7811      	ldrb	r1, [r2, #0]
   2f7e2:	b901      	cbnz	r1, 2f7e6 <bt_hci_evt_le_dhkey_complete+0x12>
   2f7e4:	1c50      	adds	r0, r2, #1
   2f7e6:	4718      	bx	r3
	}
}
   2f7e8:	4770      	bx	lr
   2f7ea:	bf00      	nop
   2f7ec:	200045c4 	.word	0x200045c4

0002f7f0 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   2f7f0:	2300      	movs	r3, #0
	tx->user_data = NULL;
   2f7f2:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   2f7f6:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   2f7f8:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   2f7fa:	4801      	ldr	r0, [pc, #4]	; (2f800 <tx_free+0x10>)
   2f7fc:	f021 b905 	b.w	50a0a <k_queue_append>
   2f800:	20001304 	.word	0x20001304

0002f804 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   2f804:	4b0e      	ldr	r3, [pc, #56]	; (2f840 <notify_connected+0x3c>)
{
   2f806:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   2f808:	681d      	ldr	r5, [r3, #0]
{
   2f80a:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   2f80c:	b955      	cbnz	r5, 2f824 <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f80e:	4d0d      	ldr	r5, [pc, #52]	; (2f844 <notify_connected+0x40>)
   2f810:	4e0d      	ldr	r6, [pc, #52]	; (2f848 <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
   2f812:	7b21      	ldrb	r1, [r4, #12]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f814:	42b5      	cmp	r5, r6
   2f816:	d30c      	bcc.n	2f832 <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
   2f818:	b989      	cbnz	r1, 2f83e <notify_connected+0x3a>
		bt_gatt_connected(conn);
   2f81a:	4620      	mov	r0, r4
	}
}
   2f81c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
   2f820:	f002 bef6 	b.w	32610 <bt_gatt_connected>
		if (cb->connected) {
   2f824:	682b      	ldr	r3, [r5, #0]
   2f826:	b113      	cbz	r3, 2f82e <notify_connected+0x2a>
			cb->connected(conn, conn->err);
   2f828:	7b21      	ldrb	r1, [r4, #12]
   2f82a:	4620      	mov	r0, r4
   2f82c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2f82e:	69ed      	ldr	r5, [r5, #28]
   2f830:	e7ec      	b.n	2f80c <notify_connected+0x8>
		if (cb->connected) {
   2f832:	682b      	ldr	r3, [r5, #0]
   2f834:	b10b      	cbz	r3, 2f83a <notify_connected+0x36>
			cb->connected(conn, conn->err);
   2f836:	4620      	mov	r0, r4
   2f838:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f83a:	3520      	adds	r5, #32
   2f83c:	e7e9      	b.n	2f812 <notify_connected+0xe>
}
   2f83e:	bd70      	pop	{r4, r5, r6, pc}
   2f840:	20004600 	.word	0x20004600
   2f844:	000517a0 	.word	0x000517a0
   2f848:	000517a0 	.word	0x000517a0

0002f84c <send_frag>:
{
   2f84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   2f850:	694d      	ldr	r5, [r1, #20]
{
   2f852:	4604      	mov	r4, r0
   2f854:	460e      	mov	r6, r1
   2f856:	4617      	mov	r7, r2
   2f858:	4699      	mov	r9, r3
	return z_impl_k_sem_take(sem, timeout);
   2f85a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f85e:	4844      	ldr	r0, [pc, #272]	; (2f970 <_flash_used+0x58>)
   2f860:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2f864:	f018 fc2a 	bl	480bc <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   2f868:	7b63      	ldrb	r3, [r4, #13]
   2f86a:	2b07      	cmp	r3, #7
   2f86c:	d174      	bne.n	2f958 <_flash_used+0x40>
	__asm__ volatile(
   2f86e:	f04f 0320 	mov.w	r3, #32
   2f872:	f3ef 8111 	mrs	r1, BASEPRI
   2f876:	f383 8812 	msr	BASEPRI_MAX, r3
   2f87a:	f3bf 8f6f 	isb	sy
	if (tx) {
   2f87e:	69a2      	ldr	r2, [r4, #24]
   2f880:	2d00      	cmp	r5, #0
   2f882:	d043      	beq.n	2f90c <send_frag+0xc0>
	parent->next = child;
   2f884:	2300      	movs	r3, #0
   2f886:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   2f888:	2a00      	cmp	r2, #0
   2f88a:	d13c      	bne.n	2f906 <send_frag+0xba>
	list->head = node;
   2f88c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   2f890:	f381 8811 	msr	BASEPRI, r1
   2f894:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   2f898:	2104      	movs	r1, #4
   2f89a:	f106 0008 	add.w	r0, r6, #8
   2f89e:	f020 f9dd 	bl	4fc5c <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2f8a2:	8823      	ldrh	r3, [r4, #0]
   2f8a4:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   2f8a8:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2f8ac:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2f8ae:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2f8b0:	3b04      	subs	r3, #4
   2f8b2:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2f8b4:	2302      	movs	r3, #2
   2f8b6:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   2f8b8:	4630      	mov	r0, r6
   2f8ba:	f01c fe92 	bl	4c5e2 <bt_send>
	if (err) {
   2f8be:	2800      	cmp	r0, #0
   2f8c0:	d054      	beq.n	2f96c <_flash_used+0x54>
	__asm__ volatile(
   2f8c2:	f04f 0320 	mov.w	r3, #32
   2f8c6:	f3ef 8111 	mrs	r1, BASEPRI
   2f8ca:	f383 8812 	msr	BASEPRI_MAX, r3
   2f8ce:	f3bf 8f6f 	isb	sy
		if (tx) {
   2f8d2:	b37d      	cbz	r5, 2f934 <_flash_used+0x1c>
	return list->head;
   2f8d4:	6962      	ldr	r2, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f8d6:	2300      	movs	r3, #0
   2f8d8:	b152      	cbz	r2, 2f8f0 <send_frag+0xa4>
   2f8da:	4295      	cmp	r5, r2
   2f8dc:	d127      	bne.n	2f92e <_flash_used+0x16>
	return node->next;
   2f8de:	682a      	ldr	r2, [r5, #0]
	return list->tail;
   2f8e0:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   2f8e2:	b9fb      	cbnz	r3, 2f924 <_flash_used+0xc>
   2f8e4:	42a8      	cmp	r0, r5
	list->head = node;
   2f8e6:	6162      	str	r2, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   2f8e8:	d100      	bne.n	2f8ec <send_frag+0xa0>
	list->tail = node;
   2f8ea:	61a2      	str	r2, [r4, #24]
	parent->next = child;
   2f8ec:	2300      	movs	r3, #0
   2f8ee:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   2f8f0:	f381 8811 	msr	BASEPRI, r1
   2f8f4:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   2f8f8:	481d      	ldr	r0, [pc, #116]	; (2f970 <_flash_used+0x58>)
   2f8fa:	f018 fbb9 	bl	48070 <z_impl_k_sem_give>
		tx_free(tx);
   2f8fe:	4628      	mov	r0, r5
   2f900:	f7ff ff76 	bl	2f7f0 <tx_free>
   2f904:	e022      	b.n	2f94c <_flash_used+0x34>
   2f906:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2f908:	61a5      	str	r5, [r4, #24]
}
   2f90a:	e7c1      	b.n	2f890 <send_frag+0x44>
		if (tail_tx) {
   2f90c:	b132      	cbz	r2, 2f91c <_flash_used+0x4>
			pending_no_cb = &tail_tx->pending_no_cb;
   2f90e:	68d3      	ldr	r3, [r2, #12]
   2f910:	f102 080c 	add.w	r8, r2, #12
		(*pending_no_cb)++;
   2f914:	3301      	adds	r3, #1
   2f916:	f8c8 3000 	str.w	r3, [r8]
   2f91a:	e7b9      	b.n	2f890 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   2f91c:	69e3      	ldr	r3, [r4, #28]
   2f91e:	f104 081c 	add.w	r8, r4, #28
   2f922:	e7f7      	b.n	2f914 <send_frag+0xc8>
Z_GENLIST_REMOVE(slist, snode)
   2f924:	42a8      	cmp	r0, r5
	parent->next = child;
   2f926:	601a      	str	r2, [r3, #0]
	list->tail = node;
   2f928:	bf08      	it	eq
   2f92a:	61a3      	streq	r3, [r4, #24]
}
   2f92c:	e7de      	b.n	2f8ec <send_frag+0xa0>
	return node->next;
   2f92e:	4613      	mov	r3, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f930:	6812      	ldr	r2, [r2, #0]
   2f932:	e7d1      	b.n	2f8d8 <send_frag+0x8c>
			(*pending_no_cb)--;
   2f934:	f8d8 3000 	ldr.w	r3, [r8]
   2f938:	3b01      	subs	r3, #1
   2f93a:	f8c8 3000 	str.w	r3, [r8]
   2f93e:	f381 8811 	msr	BASEPRI, r1
   2f942:	f3bf 8f6f 	isb	sy
   2f946:	480a      	ldr	r0, [pc, #40]	; (2f970 <_flash_used+0x58>)
   2f948:	f018 fb92 	bl	48070 <z_impl_k_sem_give>
	if (always_consume) {
   2f94c:	f1b9 0f00 	cmp.w	r9, #0
   2f950:	d108      	bne.n	2f964 <_flash_used+0x4c>
	return false;
   2f952:	2000      	movs	r0, #0
}
   2f954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2f958:	4805      	ldr	r0, [pc, #20]	; (2f970 <_flash_used+0x58>)
   2f95a:	f018 fb89 	bl	48070 <z_impl_k_sem_give>
	if (tx) {
   2f95e:	2d00      	cmp	r5, #0
   2f960:	d1cd      	bne.n	2f8fe <send_frag+0xb2>
   2f962:	e7f3      	b.n	2f94c <_flash_used+0x34>
		net_buf_unref(buf);
   2f964:	4630      	mov	r0, r6
   2f966:	f013 fff1 	bl	4394c <net_buf_unref>
   2f96a:	e7f2      	b.n	2f952 <_flash_used+0x3a>
	return true;
   2f96c:	2001      	movs	r0, #1
   2f96e:	e7f1      	b.n	2f954 <_flash_used+0x3c>
   2f970:	20000130 	.word	0x20000130

0002f974 <bt_conn_get_pkts>:
}
   2f974:	4800      	ldr	r0, [pc, #0]	; (2f978 <bt_conn_get_pkts+0x4>)
   2f976:	4770      	bx	lr
   2f978:	20000130 	.word	0x20000130

0002f97c <bt_conn_new>:
{
   2f97c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   2f97e:	2200      	movs	r2, #0
   2f980:	4604      	mov	r4, r0
   2f982:	428a      	cmp	r2, r1
   2f984:	d102      	bne.n	2f98c <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   2f986:	2400      	movs	r4, #0
}
   2f988:	4620      	mov	r0, r4
   2f98a:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2f98c:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   2f990:	2001      	movs	r0, #1
   2f992:	f3bf 8f5b 	dmb	ish
   2f996:	e853 5f00 	ldrex	r5, [r3]
   2f99a:	2d00      	cmp	r5, #0
   2f99c:	d104      	bne.n	2f9a8 <bt_conn_new+0x2c>
   2f99e:	e843 0c00 	strex	ip, r0, [r3]
   2f9a2:	f1bc 0f00 	cmp.w	ip, #0
   2f9a6:	d1f6      	bne.n	2f996 <bt_conn_new+0x1a>
   2f9a8:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   2f9ac:	d002      	beq.n	2f9b4 <bt_conn_new+0x38>
   2f9ae:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2f9b0:	4402      	add	r2, r0
   2f9b2:	e7e6      	b.n	2f982 <bt_conn_new+0x6>
	if (!conn) {
   2f9b4:	2c00      	cmp	r4, #0
   2f9b6:	d0e6      	beq.n	2f986 <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   2f9b8:	22bc      	movs	r2, #188	; 0xbc
   2f9ba:	2100      	movs	r1, #0
   2f9bc:	4620      	mov	r0, r4
   2f9be:	f01c f956 	bl	4bc6e <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   2f9c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2f9c6:	4904      	ldr	r1, [pc, #16]	; (2f9d8 <bt_conn_new+0x5c>)
   2f9c8:	f021 f929 	bl	50c1e <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   2f9cc:	4903      	ldr	r1, [pc, #12]	; (2f9dc <bt_conn_new+0x60>)
   2f9ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2f9d2:	f021 f8ee 	bl	50bb2 <k_work_init>
	return conn;
   2f9d6:	e7d7      	b.n	2f988 <bt_conn_new+0xc>
   2f9d8:	00030261 	.word	0x00030261
   2f9dc:	0004cba9 	.word	0x0004cba9

0002f9e0 <bt_conn_send_cb>:
{
   2f9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f9e2:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   2f9e4:	7b43      	ldrb	r3, [r0, #13]
   2f9e6:	2b07      	cmp	r3, #7
{
   2f9e8:	4604      	mov	r4, r0
   2f9ea:	460e      	mov	r6, r1
   2f9ec:	4615      	mov	r5, r2
	if (conn->state != BT_CONN_CONNECTED) {
   2f9ee:	d114      	bne.n	2fa1a <bt_conn_send_cb+0x3a>
	if (cb) {
   2f9f0:	b312      	cbz	r2, 2fa38 <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
   2f9f2:	f019 f847 	bl	48a84 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   2f9f6:	4b13      	ldr	r3, [pc, #76]	; (2fa44 <bt_conn_send_cb+0x64>)
   2f9f8:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   2f9fa:	4813      	ldr	r0, [pc, #76]	; (2fa48 <bt_conn_send_cb+0x68>)
   2f9fc:	bf07      	ittee	eq
   2f9fe:	2200      	moveq	r2, #0
   2fa00:	2300      	moveq	r3, #0
   2fa02:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   2fa06:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   2fa0a:	f018 fafd 	bl	48008 <z_impl_k_queue_get>
		if (!tx) {
   2fa0e:	b1a8      	cbz	r0, 2fa3c <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   2fa10:	7b63      	ldrb	r3, [r4, #13]
   2fa12:	2b07      	cmp	r3, #7
   2fa14:	d004      	beq.n	2fa20 <bt_conn_send_cb+0x40>
			tx_free(tx);
   2fa16:	f7ff feeb 	bl	2f7f0 <tx_free>
		return -ENOTCONN;
   2fa1a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   2fa1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx->user_data = user_data;
   2fa20:	e9c0 5701 	strd	r5, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   2fa24:	2300      	movs	r3, #0
   2fa26:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   2fa28:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   2fa2a:	4631      	mov	r1, r6
   2fa2c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2fa30:	f020 f8b4 	bl	4fb9c <net_buf_put>
	return 0;
   2fa34:	2000      	movs	r0, #0
   2fa36:	e7f2      	b.n	2fa1e <bt_conn_send_cb+0x3e>
   2fa38:	4610      	mov	r0, r2
   2fa3a:	e7f5      	b.n	2fa28 <bt_conn_send_cb+0x48>
			return -ENOBUFS;
   2fa3c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2fa40:	e7ed      	b.n	2fa1e <bt_conn_send_cb+0x3e>
   2fa42:	bf00      	nop
   2fa44:	200040f8 	.word	0x200040f8
   2fa48:	20001304 	.word	0x20001304

0002fa4c <bt_conn_prepare_events>:
{
   2fa4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	conn_change.signaled = 0U;
   2fa50:	4b1a      	ldr	r3, [pc, #104]	; (2fabc <bt_conn_prepare_events+0x70>)
   2fa52:	4c1b      	ldr	r4, [pc, #108]	; (2fac0 <bt_conn_prepare_events+0x74>)
   2fa54:	2500      	movs	r5, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   2fa56:	462a      	mov	r2, r5
   2fa58:	2101      	movs	r1, #1
{
   2fa5a:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
   2fa5c:	609d      	str	r5, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   2fa5e:	f021 fc02 	bl	51266 <k_poll_event_init>
   2fa62:	2601      	movs	r6, #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
   2fa64:	f04f 0914 	mov.w	r9, #20
	if (!atomic_get(&conn->ref)) {
   2fa68:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
		if (!conn_prepare_events(conn, &events[ev_count])) {
   2fa6c:	fb09 7806 	mla	r8, r9, r6, r7
	if (!atomic_get(&conn->ref)) {
   2fa70:	f01d f862 	bl	4cb38 <atomic_get>
   2fa74:	b158      	cbz	r0, 2fa8e <bt_conn_prepare_events+0x42>
	if (conn->state == BT_CONN_DISCONNECTED &&
   2fa76:	7b63      	ldrb	r3, [r4, #13]
   2fa78:	b98b      	cbnz	r3, 2fa9e <bt_conn_prepare_events+0x52>
   2fa7a:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2fa7e:	1d20      	adds	r0, r4, #4
   2fa80:	f01d f84b 	bl	4cb1a <atomic_and>
   2fa84:	0643      	lsls	r3, r0, #25
   2fa86:	d50a      	bpl.n	2fa9e <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
   2fa88:	4620      	mov	r0, r4
   2fa8a:	f01d f899 	bl	4cbc0 <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2fa8e:	3501      	adds	r5, #1
   2fa90:	2d06      	cmp	r5, #6
   2fa92:	f104 04c0 	add.w	r4, r4, #192	; 0xc0
   2fa96:	d1e7      	bne.n	2fa68 <bt_conn_prepare_events+0x1c>
}
   2fa98:	4630      	mov	r0, r6
   2fa9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   2fa9e:	7b63      	ldrb	r3, [r4, #13]
   2faa0:	2b07      	cmp	r3, #7
   2faa2:	d1f4      	bne.n	2fa8e <bt_conn_prepare_events+0x42>
	k_poll_event_init(&events[0],
   2faa4:	f104 0338 	add.w	r3, r4, #56	; 0x38
   2faa8:	2200      	movs	r2, #0
   2faaa:	2104      	movs	r1, #4
   2faac:	4640      	mov	r0, r8
   2faae:	f021 fbda 	bl	51266 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   2fab2:	2301      	movs	r3, #1
   2fab4:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
   2fab8:	441e      	add	r6, r3
   2faba:	e7e8      	b.n	2fa8e <bt_conn_prepare_events+0x42>
   2fabc:	20000814 	.word	0x20000814
   2fac0:	20001b20 	.word	0x20001b20

0002fac4 <bt_conn_lookup_handle>:
{
   2fac4:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   2fac6:	2106      	movs	r1, #6
   2fac8:	4801      	ldr	r0, [pc, #4]	; (2fad0 <bt_conn_lookup_handle+0xc>)
   2faca:	f01d b918 	b.w	4ccfe <conn_lookup_handle>
   2face:	bf00      	nop
   2fad0:	20001b20 	.word	0x20001b20

0002fad4 <bt_conn_set_state>:
{
   2fad4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   2fad6:	7b45      	ldrb	r5, [r0, #13]
   2fad8:	428d      	cmp	r5, r1
{
   2fada:	4604      	mov	r4, r0
	if (conn->state == state) {
   2fadc:	f000 80a6 	beq.w	2fc2c <bt_conn_set_state+0x158>
	conn->state = state;
   2fae0:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   2fae2:	b15d      	cbz	r5, 2fafc <bt_conn_set_state+0x28>
   2fae4:	2d06      	cmp	r5, #6
   2fae6:	d00f      	beq.n	2fb08 <bt_conn_set_state+0x34>
	switch (conn->state) {
   2fae8:	7b63      	ldrb	r3, [r4, #13]
   2faea:	2b07      	cmp	r3, #7
   2faec:	f200 809e 	bhi.w	2fc2c <bt_conn_set_state+0x158>
   2faf0:	e8df f003 	tbb	[pc, r3]
   2faf4:	9c9c1142 	.word	0x9c9c1142
   2faf8:	28779c9c 	.word	0x28779c9c
		if (conn->type != BT_CONN_TYPE_ISO) {
   2fafc:	7883      	ldrb	r3, [r0, #2]
   2fafe:	2b08      	cmp	r3, #8
   2fb00:	d0f2      	beq.n	2fae8 <bt_conn_set_state+0x14>
			bt_conn_ref(conn);
   2fb02:	f01d f8c8 	bl	4cc96 <bt_conn_ref>
   2fb06:	e7ef      	b.n	2fae8 <bt_conn_set_state+0x14>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2fb08:	7883      	ldrb	r3, [r0, #2]
   2fb0a:	2b01      	cmp	r3, #1
   2fb0c:	d1ec      	bne.n	2fae8 <bt_conn_set_state+0x14>
			k_work_cancel_delayable(&conn->deferred_work);
   2fb0e:	3058      	adds	r0, #88	; 0x58
   2fb10:	f021 f893 	bl	50c3a <k_work_cancel_delayable>
   2fb14:	e7e8      	b.n	2fae8 <bt_conn_set_state+0x14>
	z_impl_k_sem_give(sem);
   2fb16:	4d54      	ldr	r5, [pc, #336]	; (2fc68 <bt_conn_set_state+0x194>)
		tx->pending_no_cb = 0U;
   2fb18:	2600      	movs	r6, #0
	__asm__ volatile(
   2fb1a:	f04f 0220 	mov.w	r2, #32
   2fb1e:	f3ef 8311 	mrs	r3, BASEPRI
   2fb22:	f382 8812 	msr	BASEPRI_MAX, r2
   2fb26:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   2fb2a:	69e2      	ldr	r2, [r4, #28]
   2fb2c:	2a00      	cmp	r2, #0
   2fb2e:	d077      	beq.n	2fc20 <bt_conn_set_state+0x14c>
			conn->pending_no_cb--;
   2fb30:	3a01      	subs	r2, #1
   2fb32:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   2fb34:	f383 8811 	msr	BASEPRI, r3
   2fb38:	f3bf 8f6f 	isb	sy
   2fb3c:	4628      	mov	r0, r5
   2fb3e:	f018 fa97 	bl	48070 <z_impl_k_sem_give>
}
   2fb42:	e7ea      	b.n	2fb1a <bt_conn_set_state+0x46>
		if (conn->type == BT_CONN_TYPE_SCO) {
   2fb44:	78a3      	ldrb	r3, [r4, #2]
   2fb46:	2b04      	cmp	r3, #4
   2fb48:	d070      	beq.n	2fc2c <bt_conn_set_state+0x158>
	z_impl_k_queue_init(queue);
   2fb4a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2fb4e:	f020 ff50 	bl	509f2 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   2fb52:	4846      	ldr	r0, [pc, #280]	; (2fc6c <bt_conn_set_state+0x198>)
   2fb54:	2100      	movs	r1, #0
   2fb56:	f019 fa55 	bl	49004 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   2fb5a:	2300      	movs	r3, #0
	list->tail = NULL;
   2fb5c:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2fb60:	78e3      	ldrb	r3, [r4, #3]
   2fb62:	2b01      	cmp	r3, #1
   2fb64:	d162      	bne.n	2fc2c <bt_conn_set_state+0x158>
			k_work_schedule(&conn->deferred_work,
   2fb66:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   2fb6a:	2300      	movs	r3, #0
   2fb6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
   2fb70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   2fb74:	f018 bc68 	b.w	48448 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   2fb78:	78a3      	ldrb	r3, [r4, #2]
   2fb7a:	2b04      	cmp	r3, #4
   2fb7c:	d104      	bne.n	2fb88 <bt_conn_set_state+0xb4>
			bt_conn_unref(conn);
   2fb7e:	4620      	mov	r0, r4
}
   2fb80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   2fb84:	f01d b8a2 	b.w	4cccc <bt_conn_unref>
		switch (old_state) {
   2fb88:	3d01      	subs	r5, #1
   2fb8a:	2d05      	cmp	r5, #5
   2fb8c:	d84e      	bhi.n	2fc2c <bt_conn_set_state+0x158>
   2fb8e:	a301      	add	r3, pc, #4	; (adr r3, 2fb94 <bt_conn_set_state+0xc0>)
   2fb90:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   2fb94:	0002fbad 	.word	0x0002fbad
   2fb98:	0002fbd5 	.word	0x0002fbd5
   2fb9c:	0002fb7f 	.word	0x0002fb7f
   2fba0:	0002fb7f 	.word	0x0002fb7f
   2fba4:	0002fbd5 	.word	0x0002fbd5
   2fba8:	0002fbd5 	.word	0x0002fbd5
			tx_notify(conn);
   2fbac:	4620      	mov	r0, r4
   2fbae:	f01c ffd8 	bl	4cb62 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   2fbb2:	78a3      	ldrb	r3, [r4, #2]
   2fbb4:	2b01      	cmp	r3, #1
   2fbb6:	d103      	bne.n	2fbc0 <bt_conn_set_state+0xec>
				k_work_cancel_delayable(&conn->deferred_work);
   2fbb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2fbbc:	f021 f83d 	bl	50c3a <k_work_cancel_delayable>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2fbc0:	2140      	movs	r1, #64	; 0x40
   2fbc2:	1d20      	adds	r0, r4, #4
   2fbc4:	f01c ffbe 	bl	4cb44 <atomic_or>
   2fbc8:	4828      	ldr	r0, [pc, #160]	; (2fc6c <bt_conn_set_state+0x198>)
}
   2fbca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2fbce:	2100      	movs	r1, #0
   2fbd0:	f019 ba18 	b.w	49004 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   2fbd4:	7b23      	ldrb	r3, [r4, #12]
   2fbd6:	2b00      	cmp	r3, #0
   2fbd8:	d0d1      	beq.n	2fb7e <bt_conn_set_state+0xaa>
				notify_connected(conn);
   2fbda:	4620      	mov	r0, r4
   2fbdc:	f7ff fe12 	bl	2f804 <notify_connected>
   2fbe0:	e7cd      	b.n	2fb7e <bt_conn_set_state+0xaa>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2fbe2:	78a3      	ldrb	r3, [r4, #2]
   2fbe4:	2b01      	cmp	r3, #1
   2fbe6:	d121      	bne.n	2fc2c <bt_conn_set_state+0x158>
					K_MSEC(10 * bt_dev.create_param.timeout));
   2fbe8:	4b21      	ldr	r3, [pc, #132]	; (2fc70 <bt_conn_set_state+0x19c>)
   2fbea:	8a98      	ldrh	r0, [r3, #20]
			k_work_schedule(&conn->deferred_work,
   2fbec:	3458      	adds	r4, #88	; 0x58
					K_MSEC(10 * bt_dev.create_param.timeout));
   2fbee:	b1a8      	cbz	r0, 2fc1c <bt_conn_set_state+0x148>
   2fbf0:	230a      	movs	r3, #10
   2fbf2:	4358      	muls	r0, r3
   2fbf4:	2100      	movs	r1, #0
			return ((t * to_hz + off) / from_hz);
   2fbf6:	03c9      	lsls	r1, r1, #15
   2fbf8:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2fbfc:	f240 33e7 	movw	r3, #999	; 0x3e7
   2fc00:	03c0      	lsls	r0, r0, #15
   2fc02:	18c0      	adds	r0, r0, r3
   2fc04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2fc08:	f04f 0300 	mov.w	r3, #0
   2fc0c:	f141 0100 	adc.w	r1, r1, #0
   2fc10:	f7f6 fa76 	bl	26100 <__aeabi_uldivmod>
   2fc14:	4602      	mov	r2, r0
   2fc16:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   2fc18:	4620      	mov	r0, r4
   2fc1a:	e7a9      	b.n	2fb70 <bt_conn_set_state+0x9c>
					K_MSEC(10 * bt_dev.create_param.timeout));
   2fc1c:	4601      	mov	r1, r0
   2fc1e:	e7ea      	b.n	2fbf6 <bt_conn_set_state+0x122>
	return list->head;
   2fc20:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2fc22:	b920      	cbnz	r0, 2fc2e <bt_conn_set_state+0x15a>
   2fc24:	f383 8811 	msr	BASEPRI, r3
   2fc28:	f3bf 8f6f 	isb	sy
}
   2fc2c:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2fc2e:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   2fc30:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2fc32:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2fc34:	4288      	cmp	r0, r1
	list->tail = node;
   2fc36:	bf08      	it	eq
   2fc38:	61a2      	streq	r2, [r4, #24]
   2fc3a:	f383 8811 	msr	BASEPRI, r3
   2fc3e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2fc42:	f04f 0220 	mov.w	r2, #32
   2fc46:	f3ef 8311 	mrs	r3, BASEPRI
   2fc4a:	f382 8812 	msr	BASEPRI_MAX, r2
   2fc4e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   2fc52:	68c2      	ldr	r2, [r0, #12]
   2fc54:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   2fc56:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   2fc58:	f383 8811 	msr	BASEPRI, r3
   2fc5c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   2fc60:	f7ff fdc6 	bl	2f7f0 <tx_free>
   2fc64:	e76a      	b.n	2fb3c <bt_conn_set_state+0x68>
   2fc66:	bf00      	nop
   2fc68:	20000130 	.word	0x20000130
   2fc6c:	20000814 	.word	0x20000814
   2fc70:	20000030 	.word	0x20000030

0002fc74 <bt_conn_index>:
		index = conn - acl_conns;
   2fc74:	4b03      	ldr	r3, [pc, #12]	; (2fc84 <bt_conn_index+0x10>)
   2fc76:	1ac0      	subs	r0, r0, r3
   2fc78:	4b03      	ldr	r3, [pc, #12]	; (2fc88 <bt_conn_index+0x14>)
   2fc7a:	1180      	asrs	r0, r0, #6
   2fc7c:	4358      	muls	r0, r3
}
   2fc7e:	b2c0      	uxtb	r0, r0
   2fc80:	4770      	bx	lr
   2fc82:	bf00      	nop
   2fc84:	20001b20 	.word	0x20001b20
   2fc88:	aaaaaaab 	.word	0xaaaaaaab

0002fc8c <bt_conn_create_pdu_timeout>:
{
   2fc8c:	b538      	push	{r3, r4, r5, lr}
   2fc8e:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   2fc90:	4906      	ldr	r1, [pc, #24]	; (2fcac <bt_conn_create_pdu_timeout+0x20>)
   2fc92:	2800      	cmp	r0, #0
   2fc94:	bf08      	it	eq
   2fc96:	4608      	moveq	r0, r1
   2fc98:	f01f ff57 	bl	4fb4a <net_buf_alloc_fixed>
	if (!buf) {
   2fc9c:	4604      	mov	r4, r0
   2fc9e:	b118      	cbz	r0, 2fca8 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   2fca0:	1d29      	adds	r1, r5, #4
   2fca2:	3008      	adds	r0, #8
   2fca4:	f01f ff76 	bl	4fb94 <net_buf_simple_reserve>
}
   2fca8:	4620      	mov	r0, r4
   2fcaa:	bd38      	pop	{r3, r4, r5, pc}
   2fcac:	2000134c 	.word	0x2000134c

0002fcb0 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   2fcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2fcb2:	1d03      	adds	r3, r0, #4
{
   2fcb4:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2fcb6:	4618      	mov	r0, r3
   2fcb8:	f01c ff3e 	bl	4cb38 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2fcbc:	0582      	lsls	r2, r0, #22
   2fcbe:	d512      	bpl.n	2fce6 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   2fcc0:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2fcc4:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   2fcc8:	4291      	cmp	r1, r2
   2fcca:	d80c      	bhi.n	2fce6 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   2fccc:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   2fcd0:	4291      	cmp	r1, r2
   2fcd2:	d308      	bcc.n	2fce6 <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   2fcd4:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   2fcd8:	4291      	cmp	r1, r2
   2fcda:	d104      	bne.n	2fce6 <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2fcdc:	f46f 7100 	mvn.w	r1, #512	; 0x200
   2fce0:	4618      	mov	r0, r3
   2fce2:	f01c ff1a 	bl	4cb1a <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   2fce6:	4b10      	ldr	r3, [pc, #64]	; (2fd28 <notify_le_param_updated+0x78>)
   2fce8:	681d      	ldr	r5, [r3, #0]
   2fcea:	b925      	cbnz	r5, 2fcf6 <notify_le_param_updated+0x46>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fcec:	4d0f      	ldr	r5, [pc, #60]	; (2fd2c <notify_le_param_updated+0x7c>)
   2fcee:	4f10      	ldr	r7, [pc, #64]	; (2fd30 <notify_le_param_updated+0x80>)
   2fcf0:	42bd      	cmp	r5, r7
   2fcf2:	d30c      	bcc.n	2fd0e <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   2fcf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   2fcf6:	68ee      	ldr	r6, [r5, #12]
   2fcf8:	b13e      	cbz	r6, 2fd0a <notify_le_param_updated+0x5a>
			cb->le_param_updated(conn, conn->le.interval,
   2fcfa:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   2fcfe:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   2fd02:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   2fd06:	4620      	mov	r0, r4
   2fd08:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   2fd0a:	69ed      	ldr	r5, [r5, #28]
   2fd0c:	e7ed      	b.n	2fcea <notify_le_param_updated+0x3a>
		if (cb->le_param_updated) {
   2fd0e:	68ee      	ldr	r6, [r5, #12]
   2fd10:	b13e      	cbz	r6, 2fd22 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   2fd12:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   2fd16:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   2fd1a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   2fd1e:	4620      	mov	r0, r4
   2fd20:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fd22:	3520      	adds	r5, #32
   2fd24:	e7e4      	b.n	2fcf0 <notify_le_param_updated+0x40>
   2fd26:	bf00      	nop
   2fd28:	20004600 	.word	0x20004600
   2fd2c:	000517a0 	.word	0x000517a0
   2fd30:	000517a0 	.word	0x000517a0

0002fd34 <notify_le_phy_updated>:
}
#endif

#if defined(CONFIG_BT_USER_PHY_UPDATE)
void notify_le_phy_updated(struct bt_conn *conn)
{
   2fd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   2fd36:	4b0d      	ldr	r3, [pc, #52]	; (2fd6c <notify_le_phy_updated+0x38>)
   2fd38:	681d      	ldr	r5, [r3, #0]
{
   2fd3a:	4604      	mov	r4, r0
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   2fd3c:	f100 06b8 	add.w	r6, r0, #184	; 0xb8
	for (cb = callback_list; cb; cb = cb->_next) {
   2fd40:	b935      	cbnz	r5, 2fd50 <notify_le_phy_updated+0x1c>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fd42:	4d0b      	ldr	r5, [pc, #44]	; (2fd70 <notify_le_phy_updated+0x3c>)
   2fd44:	4e0b      	ldr	r6, [pc, #44]	; (2fd74 <notify_le_phy_updated+0x40>)
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   2fd46:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fd4a:	42b5      	cmp	r5, r6
   2fd4c:	d307      	bcc.n	2fd5e <notify_le_phy_updated+0x2a>
		}
	}
}
   2fd4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_phy_updated) {
   2fd50:	69ab      	ldr	r3, [r5, #24]
   2fd52:	b113      	cbz	r3, 2fd5a <notify_le_phy_updated+0x26>
			cb->le_phy_updated(conn, &conn->le.phy);
   2fd54:	4631      	mov	r1, r6
   2fd56:	4620      	mov	r0, r4
   2fd58:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2fd5a:	69ed      	ldr	r5, [r5, #28]
   2fd5c:	e7f0      	b.n	2fd40 <notify_le_phy_updated+0xc>
		if (cb->le_phy_updated) {
   2fd5e:	69ab      	ldr	r3, [r5, #24]
   2fd60:	b113      	cbz	r3, 2fd68 <notify_le_phy_updated+0x34>
			cb->le_phy_updated(conn, &conn->le.phy);
   2fd62:	4639      	mov	r1, r7
   2fd64:	4620      	mov	r0, r4
   2fd66:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fd68:	3520      	adds	r5, #32
   2fd6a:	e7ee      	b.n	2fd4a <notify_le_phy_updated+0x16>
   2fd6c:	20004600 	.word	0x20004600
   2fd70:	000517a0 	.word	0x000517a0
   2fd74:	000517a0 	.word	0x000517a0

0002fd78 <le_param_req>:
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   2fd78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fd7c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   2fd7e:	4608      	mov	r0, r1
{
   2fd80:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   2fd82:	f01c fba6 	bl	4c4d2 <bt_le_conn_params_valid>
   2fd86:	4605      	mov	r5, r0
   2fd88:	b918      	cbnz	r0, 2fd92 <le_param_req+0x1a>
		return false;
   2fd8a:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   2fd8c:	4628      	mov	r0, r5
   2fd8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   2fd92:	4b13      	ldr	r3, [pc, #76]	; (2fde0 <le_param_req+0x68>)
   2fd94:	681e      	ldr	r6, [r3, #0]
   2fd96:	b946      	cbnz	r6, 2fdaa <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fd98:	4e12      	ldr	r6, [pc, #72]	; (2fde4 <le_param_req+0x6c>)
   2fd9a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 2fde8 <le_param_req+0x70>
   2fd9e:	4546      	cmp	r6, r8
   2fda0:	d2f4      	bcs.n	2fd8c <le_param_req+0x14>
		if (!cb->le_param_req) {
   2fda2:	68b3      	ldr	r3, [r6, #8]
   2fda4:	b983      	cbnz	r3, 2fdc8 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fda6:	3620      	adds	r6, #32
   2fda8:	e7f9      	b.n	2fd9e <le_param_req+0x26>
		if (!cb->le_param_req) {
   2fdaa:	68b3      	ldr	r3, [r6, #8]
   2fdac:	b90b      	cbnz	r3, 2fdb2 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   2fdae:	69f6      	ldr	r6, [r6, #28]
   2fdb0:	e7f1      	b.n	2fd96 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   2fdb2:	4621      	mov	r1, r4
   2fdb4:	4638      	mov	r0, r7
   2fdb6:	4798      	blx	r3
   2fdb8:	2800      	cmp	r0, #0
   2fdba:	d0e6      	beq.n	2fd8a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   2fdbc:	4620      	mov	r0, r4
   2fdbe:	f01c fb88 	bl	4c4d2 <bt_le_conn_params_valid>
   2fdc2:	2800      	cmp	r0, #0
   2fdc4:	d1f3      	bne.n	2fdae <le_param_req+0x36>
   2fdc6:	e7e0      	b.n	2fd8a <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   2fdc8:	4621      	mov	r1, r4
   2fdca:	4638      	mov	r0, r7
   2fdcc:	4798      	blx	r3
   2fdce:	2800      	cmp	r0, #0
   2fdd0:	d0db      	beq.n	2fd8a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   2fdd2:	4620      	mov	r0, r4
   2fdd4:	f01c fb7d 	bl	4c4d2 <bt_le_conn_params_valid>
   2fdd8:	2800      	cmp	r0, #0
   2fdda:	d1e4      	bne.n	2fda6 <le_param_req+0x2e>
   2fddc:	e7d5      	b.n	2fd8a <le_param_req+0x12>
   2fdde:	bf00      	nop
   2fde0:	20004600 	.word	0x20004600
   2fde4:	000517a0 	.word	0x000517a0
   2fde8:	000517a0 	.word	0x000517a0

0002fdec <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   2fdec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2fdf0:	78c3      	ldrb	r3, [r0, #3]
{
   2fdf2:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2fdf4:	b973      	cbnz	r3, 2fe14 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   2fdf6:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   2fdfa:	4b10      	ldr	r3, [pc, #64]	; (2fe3c <bt_conn_identity_resolved+0x50>)
   2fdfc:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2fdfe:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   2fe02:	b955      	cbnz	r5, 2fe1a <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fe04:	4d0e      	ldr	r5, [pc, #56]	; (2fe40 <bt_conn_identity_resolved+0x54>)
   2fe06:	4f0f      	ldr	r7, [pc, #60]	; (2fe44 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2fe08:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fe0c:	42bd      	cmp	r5, r7
   2fe0e:	d30c      	bcc.n	2fe2a <bt_conn_identity_resolved+0x3e>
		}
	}
}
   2fe10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   2fe14:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   2fe18:	e7ef      	b.n	2fdfa <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   2fe1a:	692b      	ldr	r3, [r5, #16]
   2fe1c:	b11b      	cbz	r3, 2fe26 <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2fe1e:	463a      	mov	r2, r7
   2fe20:	4631      	mov	r1, r6
   2fe22:	4620      	mov	r0, r4
   2fe24:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2fe26:	69ed      	ldr	r5, [r5, #28]
   2fe28:	e7eb      	b.n	2fe02 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   2fe2a:	692b      	ldr	r3, [r5, #16]
   2fe2c:	b11b      	cbz	r3, 2fe36 <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2fe2e:	4642      	mov	r2, r8
   2fe30:	4631      	mov	r1, r6
   2fe32:	4620      	mov	r0, r4
   2fe34:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fe36:	3520      	adds	r5, #32
   2fe38:	e7e8      	b.n	2fe0c <bt_conn_identity_resolved+0x20>
   2fe3a:	bf00      	nop
   2fe3c:	20004600 	.word	0x20004600
   2fe40:	000517a0 	.word	0x000517a0
   2fe44:	000517a0 	.word	0x000517a0

0002fe48 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   2fe48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   2fe4a:	7a43      	ldrb	r3, [r0, #9]
   2fe4c:	7283      	strb	r3, [r0, #10]
{
   2fe4e:	4604      	mov	r4, r0
   2fe50:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   2fe52:	f01d f905 	bl	4d060 <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
   2fe56:	4b0c      	ldr	r3, [pc, #48]	; (2fe88 <bt_conn_security_changed+0x40>)
   2fe58:	681d      	ldr	r5, [r3, #0]
   2fe5a:	b925      	cbnz	r5, 2fe66 <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fe5c:	4d0b      	ldr	r5, [pc, #44]	; (2fe8c <bt_conn_security_changed+0x44>)
   2fe5e:	4f0c      	ldr	r7, [pc, #48]	; (2fe90 <bt_conn_security_changed+0x48>)
   2fe60:	42bd      	cmp	r5, r7
   2fe62:	d308      	bcc.n	2fe76 <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   2fe64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   2fe66:	696b      	ldr	r3, [r5, #20]
   2fe68:	b11b      	cbz	r3, 2fe72 <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   2fe6a:	7a61      	ldrb	r1, [r4, #9]
   2fe6c:	4632      	mov	r2, r6
   2fe6e:	4620      	mov	r0, r4
   2fe70:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2fe72:	69ed      	ldr	r5, [r5, #28]
   2fe74:	e7f1      	b.n	2fe5a <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   2fe76:	696b      	ldr	r3, [r5, #20]
   2fe78:	b11b      	cbz	r3, 2fe82 <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   2fe7a:	7a61      	ldrb	r1, [r4, #9]
   2fe7c:	4632      	mov	r2, r6
   2fe7e:	4620      	mov	r0, r4
   2fe80:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fe82:	3520      	adds	r5, #32
   2fe84:	e7ec      	b.n	2fe60 <bt_conn_security_changed+0x18>
   2fe86:	bf00      	nop
   2fe88:	20004600 	.word	0x20004600
   2fe8c:	000517a0 	.word	0x000517a0
   2fe90:	000517a0 	.word	0x000517a0

0002fe94 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   2fe94:	4b02      	ldr	r3, [pc, #8]	; (2fea0 <bt_conn_cb_register+0xc>)
   2fe96:	681a      	ldr	r2, [r3, #0]
   2fe98:	61c2      	str	r2, [r0, #28]
	callback_list = cb;
   2fe9a:	6018      	str	r0, [r3, #0]
}
   2fe9c:	4770      	bx	lr
   2fe9e:	bf00      	nop
   2fea0:	20004600 	.word	0x20004600

0002fea4 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   2fea4:	b570      	push	{r4, r5, r6, lr}
   2fea6:	4606      	mov	r6, r0
   2fea8:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   2feaa:	480a      	ldr	r0, [pc, #40]	; (2fed4 <bt_conn_add_le+0x30>)
   2feac:	2106      	movs	r1, #6
   2feae:	f7ff fd65 	bl	2f97c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   2feb2:	4604      	mov	r4, r0
   2feb4:	b160      	cbz	r0, 2fed0 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   2feb6:	7206      	strb	r6, [r0, #8]
   2feb8:	2207      	movs	r2, #7
   2feba:	4629      	mov	r1, r5
   2febc:	3088      	adds	r0, #136	; 0x88
   2febe:	f01b fecb 	bl	4bc58 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   2fec2:	2301      	movs	r3, #1
   2fec4:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   2fec6:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   2fec8:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   2feca:	4b03      	ldr	r3, [pc, #12]	; (2fed8 <bt_conn_add_le+0x34>)
   2fecc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   2fed0:	4620      	mov	r0, r4
   2fed2:	bd70      	pop	{r4, r5, r6, pc}
   2fed4:	20001b20 	.word	0x20001b20
   2fed8:	00280018 	.word	0x00280018

0002fedc <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   2fedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fee0:	4e0f      	ldr	r6, [pc, #60]	; (2ff20 <bt_conn_lookup_addr_le+0x44>)
   2fee2:	4607      	mov	r7, r0
   2fee4:	4688      	mov	r8, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2fee6:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2fee8:	4630      	mov	r0, r6
   2feea:	f01c fed4 	bl	4cc96 <bt_conn_ref>

		if (!conn) {
   2feee:	4604      	mov	r4, r0
   2fef0:	b120      	cbz	r0, 2fefc <bt_conn_lookup_addr_le+0x20>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   2fef2:	7883      	ldrb	r3, [r0, #2]
   2fef4:	2b01      	cmp	r3, #1
   2fef6:	d00a      	beq.n	2ff0e <bt_conn_lookup_addr_le+0x32>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   2fef8:	f01c fee8 	bl	4cccc <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2fefc:	3501      	adds	r5, #1
   2fefe:	2d06      	cmp	r5, #6
   2ff00:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
   2ff04:	d1f0      	bne.n	2fee8 <bt_conn_lookup_addr_le+0xc>
		}

		return conn;
	}

	return NULL;
   2ff06:	2400      	movs	r4, #0
}
   2ff08:	4620      	mov	r0, r4
   2ff0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   2ff0e:	4642      	mov	r2, r8
   2ff10:	4639      	mov	r1, r7
   2ff12:	f01c ff84 	bl	4ce1e <bt_conn_is_peer_addr_le>
   2ff16:	2800      	cmp	r0, #0
   2ff18:	d1f6      	bne.n	2ff08 <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
   2ff1a:	4620      	mov	r0, r4
   2ff1c:	e7ec      	b.n	2fef8 <bt_conn_lookup_addr_le+0x1c>
   2ff1e:	bf00      	nop
   2ff20:	20001b20 	.word	0x20001b20

0002ff24 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   2ff24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2ff28:	f8df a050 	ldr.w	sl, [pc, #80]	; 2ff7c <bt_conn_lookup_state_le+0x58>
{
   2ff2c:	4606      	mov	r6, r0
   2ff2e:	460f      	mov	r7, r1
   2ff30:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2ff32:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2ff34:	f04f 09c0 	mov.w	r9, #192	; 0xc0
   2ff38:	fb09 a005 	mla	r0, r9, r5, sl
   2ff3c:	f01c feab 	bl	4cc96 <bt_conn_ref>

		if (!conn) {
   2ff40:	4604      	mov	r4, r0
   2ff42:	b120      	cbz	r0, 2ff4e <bt_conn_lookup_state_le+0x2a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   2ff44:	7883      	ldrb	r3, [r0, #2]
   2ff46:	2b01      	cmp	r3, #1
   2ff48:	d006      	beq.n	2ff58 <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   2ff4a:	f01c febf 	bl	4cccc <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2ff4e:	3501      	adds	r5, #1
   2ff50:	2d06      	cmp	r5, #6
   2ff52:	d1f1      	bne.n	2ff38 <bt_conn_lookup_state_le+0x14>
		}

		return conn;
	}

	return NULL;
   2ff54:	2400      	movs	r4, #0
   2ff56:	e00d      	b.n	2ff74 <bt_conn_lookup_state_le+0x50>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   2ff58:	b137      	cbz	r7, 2ff68 <bt_conn_lookup_state_le+0x44>
   2ff5a:	463a      	mov	r2, r7
   2ff5c:	4631      	mov	r1, r6
   2ff5e:	f01c ff5e 	bl	4ce1e <bt_conn_is_peer_addr_le>
   2ff62:	b908      	cbnz	r0, 2ff68 <bt_conn_lookup_state_le+0x44>
			bt_conn_unref(conn);
   2ff64:	4620      	mov	r0, r4
   2ff66:	e7f0      	b.n	2ff4a <bt_conn_lookup_state_le+0x26>
		if (!(conn->state == state && conn->id == id)) {
   2ff68:	7b63      	ldrb	r3, [r4, #13]
   2ff6a:	4543      	cmp	r3, r8
   2ff6c:	d1fa      	bne.n	2ff64 <bt_conn_lookup_state_le+0x40>
   2ff6e:	7a23      	ldrb	r3, [r4, #8]
   2ff70:	42b3      	cmp	r3, r6
   2ff72:	d1f7      	bne.n	2ff64 <bt_conn_lookup_state_le+0x40>
}
   2ff74:	4620      	mov	r0, r4
   2ff76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2ff7a:	bf00      	nop
   2ff7c:	20001b20 	.word	0x20001b20

0002ff80 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   2ff80:	b570      	push	{r4, r5, r6, lr}
	info->type = conn->type;
   2ff82:	7882      	ldrb	r2, [r0, #2]
   2ff84:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   2ff86:	78c5      	ldrb	r5, [r0, #3]
   2ff88:	704d      	strb	r5, [r1, #1]
	info->id = conn->id;
   2ff8a:	7a03      	ldrb	r3, [r0, #8]
   2ff8c:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
   2ff8e:	2a01      	cmp	r2, #1
   2ff90:	d11e      	bne.n	2ffd0 <bt_conn_get_info+0x50>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
		info->le.src = &bt_dev.id_addr[conn->id];
   2ff92:	4a11      	ldr	r2, [pc, #68]	; (2ffd8 <bt_conn_get_info+0x58>)
   2ff94:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   2ff98:	4413      	add	r3, r2
		info->le.dst = &conn->le.dst;
   2ff9a:	f100 0688 	add.w	r6, r0, #136	; 0x88
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   2ff9e:	f100 0296 	add.w	r2, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
   2ffa2:	f100 048f 	add.w	r4, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2ffa6:	b115      	cbz	r5, 2ffae <bt_conn_get_info+0x2e>
   2ffa8:	4615      	mov	r5, r2
   2ffaa:	4622      	mov	r2, r4
   2ffac:	462c      	mov	r4, r5
		info->le.src = &bt_dev.id_addr[conn->id];
   2ffae:	e9c1 3601 	strd	r3, r6, [r1, #4]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   2ffb2:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   2ffb6:	828b      	strh	r3, [r1, #20]
			info->le.remote = &conn->le.resp_addr;
   2ffb8:	e9c1 4203 	strd	r4, r2, [r1, #12]
		info->le.latency = conn->le.latency;
   2ffbc:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   2ffc0:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
#if defined(CONFIG_BT_USER_PHY_UPDATE)
		info->le.phy = &conn->le.phy;
   2ffc2:	30b8      	adds	r0, #184	; 0xb8
		info->le.timeout = conn->le.timeout;
   2ffc4:	f830 3c12 	ldrh.w	r3, [r0, #-18]
   2ffc8:	830b      	strh	r3, [r1, #24]
		info->le.phy = &conn->le.phy;
   2ffca:	61c8      	str	r0, [r1, #28]
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   2ffcc:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
   2ffce:	bd70      	pop	{r4, r5, r6, pc}
	return -EINVAL;
   2ffd0:	f06f 0015 	mvn.w	r0, #21
   2ffd4:	e7fb      	b.n	2ffce <bt_conn_get_info+0x4e>
   2ffd6:	bf00      	nop
   2ffd8:	20000030 	.word	0x20000030

0002ffdc <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   2ffdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2ffe0:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2ffe2:	4851      	ldr	r0, [pc, #324]	; (30128 <bt_conn_le_create+0x14c>)
   2ffe4:	f01c fda8 	bl	4cb38 <atomic_get>
   2ffe8:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2ffea:	0781      	lsls	r1, r0, #30
{
   2ffec:	4615      	mov	r5, r2
   2ffee:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2fff0:	d405      	bmi.n	2fffe <bt_conn_le_create+0x22>
		return -EAGAIN;
   2fff2:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   2fff6:	4628      	mov	r0, r5
   2fff8:	b002      	add	sp, #8
   2fffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   2fffe:	4610      	mov	r0, r2
   30000:	f01c fa67 	bl	4c4d2 <bt_le_conn_params_valid>
   30004:	b910      	cbnz	r0, 3000c <bt_conn_le_create+0x30>
		return -EINVAL;
   30006:	f06f 0515 	mvn.w	r5, #21
   3000a:	e7f4      	b.n	2fff6 <bt_conn_le_create+0x1a>
   3000c:	4846      	ldr	r0, [pc, #280]	; (30128 <bt_conn_le_create+0x14c>)
   3000e:	f01c fd93 	bl	4cb38 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   30012:	0642      	lsls	r2, r0, #25
   30014:	d4ed      	bmi.n	2fff2 <bt_conn_le_create+0x16>
   30016:	4844      	ldr	r0, [pc, #272]	; (30128 <bt_conn_le_create+0x14c>)
   30018:	f01c fd8e 	bl	4cb38 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   3001c:	0503      	lsls	r3, r0, #20
   3001e:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   30022:	d47a      	bmi.n	3011a <bt_conn_le_create+0x13e>
	if (!bt_id_scan_random_addr_check()) {
   30024:	f01c fc00 	bl	4c828 <bt_id_scan_random_addr_check>
   30028:	2800      	cmp	r0, #0
   3002a:	d0ec      	beq.n	30006 <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   3002c:	4621      	mov	r1, r4
   3002e:	4640      	mov	r0, r8
   30030:	f01c ff15 	bl	4ce5e <bt_conn_exists_le>
   30034:	2800      	cmp	r0, #0
   30036:	d1e6      	bne.n	30006 <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   30038:	7823      	ldrb	r3, [r4, #0]
   3003a:	3b02      	subs	r3, #2
   3003c:	2b01      	cmp	r3, #1
   3003e:	d849      	bhi.n	300d4 <bt_conn_le_create+0xf8>
   30040:	2207      	movs	r2, #7
   30042:	4621      	mov	r1, r4
   30044:	4668      	mov	r0, sp
   30046:	f01b fe07 	bl	4bc58 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   3004a:	f89d 3000 	ldrb.w	r3, [sp]
   3004e:	3b02      	subs	r3, #2
   30050:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   30054:	4669      	mov	r1, sp
   30056:	2000      	movs	r0, #0
   30058:	f7ff ff24 	bl	2fea4 <bt_conn_add_le>
	if (!conn) {
   3005c:	4604      	mov	r4, r0
   3005e:	2800      	cmp	r0, #0
   30060:	d05e      	beq.n	30120 <bt_conn_le_create+0x144>
	conn->le.interval_min = param->interval_min;
   30062:	882b      	ldrh	r3, [r5, #0]
   30064:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   30068:	886b      	ldrh	r3, [r5, #2]
   3006a:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   3006e:	88ab      	ldrh	r3, [r5, #4]
   30070:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   30074:	88eb      	ldrh	r3, [r5, #6]
   30076:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
   3007a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   3007e:	4d2b      	ldr	r5, [pc, #172]	; (3012c <bt_conn_le_create+0x150>)
   30080:	f105 0c08 	add.w	ip, r5, #8
   30084:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   30088:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   3008a:	2b00      	cmp	r3, #0
   3008c:	bf08      	it	eq
   3008e:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   30092:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   30094:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   30096:	b903      	cbnz	r3, 3009a <bt_conn_le_create+0xbe>
   30098:	89ab      	ldrh	r3, [r5, #12]
   3009a:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   3009c:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   3009e:	b903      	cbnz	r3, 300a2 <bt_conn_le_create+0xc6>
   300a0:	89eb      	ldrh	r3, [r5, #14]
   300a2:	826b      	strh	r3, [r5, #18]
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   300a4:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   300a8:	b11b      	cbz	r3, 300b2 <bt_conn_le_create+0xd6>
   300aa:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   300ae:	429a      	cmp	r2, r3
   300b0:	d91c      	bls.n	300ec <bt_conn_le_create+0x110>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   300b2:	2102      	movs	r1, #2
   300b4:	4620      	mov	r0, r4
   300b6:	f7ff fd0d 	bl	2fad4 <bt_conn_set_state>
		err = bt_le_scan_update(true);
   300ba:	2001      	movs	r0, #1
   300bc:	f7ff f8bc 	bl	2f238 <bt_le_scan_update>
		if (err) {
   300c0:	4605      	mov	r5, r0
   300c2:	b180      	cbz	r0, 300e6 <bt_conn_le_create+0x10a>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   300c4:	4620      	mov	r0, r4
   300c6:	2100      	movs	r1, #0
   300c8:	f7ff fd04 	bl	2fad4 <bt_conn_set_state>
			bt_conn_unref(conn);
   300cc:	4620      	mov	r0, r4
   300ce:	f01c fdfd 	bl	4cccc <bt_conn_unref>
			return err;
   300d2:	e790      	b.n	2fff6 <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   300d4:	4621      	mov	r1, r4
   300d6:	f01c fb7b 	bl	4c7d0 <bt_lookup_id_addr>
   300da:	2207      	movs	r2, #7
   300dc:	4601      	mov	r1, r0
   300de:	4668      	mov	r0, sp
   300e0:	f01b fdba 	bl	4bc58 <memcpy>
}
   300e4:	e7b6      	b.n	30054 <bt_conn_le_create+0x78>
		*ret_conn = conn;
   300e6:	603c      	str	r4, [r7, #0]
	return 0;
   300e8:	2500      	movs	r5, #0
   300ea:	e784      	b.n	2fff6 <bt_conn_le_create+0x1a>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   300ec:	2106      	movs	r1, #6
   300ee:	4620      	mov	r0, r4
   300f0:	f7ff fcf0 	bl	2fad4 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   300f4:	4620      	mov	r0, r4
   300f6:	f01c f908 	bl	4c30a <bt_le_create_conn>
	if (err) {
   300fa:	4605      	mov	r5, r0
   300fc:	2800      	cmp	r0, #0
   300fe:	d0f2      	beq.n	300e6 <bt_conn_le_create+0x10a>
		conn->err = 0;
   30100:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   30102:	4631      	mov	r1, r6
   30104:	4620      	mov	r0, r4
		conn->err = 0;
   30106:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   30108:	f7ff fce4 	bl	2fad4 <bt_conn_set_state>
		bt_conn_unref(conn);
   3010c:	4620      	mov	r0, r4
   3010e:	f01c fddd 	bl	4cccc <bt_conn_unref>
		bt_le_scan_update(false);
   30112:	4630      	mov	r0, r6
   30114:	f7ff f890 	bl	2f238 <bt_le_scan_update>
		return err;
   30118:	e76d      	b.n	2fff6 <bt_conn_le_create+0x1a>
		return -EALREADY;
   3011a:	f06f 0577 	mvn.w	r5, #119	; 0x77
   3011e:	e76a      	b.n	2fff6 <bt_conn_le_create+0x1a>
		return -ENOMEM;
   30120:	f06f 050b 	mvn.w	r5, #11
   30124:	e767      	b.n	2fff6 <bt_conn_le_create+0x1a>
   30126:	bf00      	nop
   30128:	200000fc 	.word	0x200000fc
   3012c:	20000030 	.word	0x20000030

00030130 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   30130:	b570      	push	{r4, r5, r6, lr}
   30132:	4606      	mov	r6, r0
   30134:	482f      	ldr	r0, [pc, #188]	; (301f4 <bt_le_set_auto_conn+0xc4>)
   30136:	f01c fcff 	bl	4cb38 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   3013a:	0780      	lsls	r0, r0, #30
{
   3013c:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   3013e:	d553      	bpl.n	301e8 <bt_le_set_auto_conn+0xb8>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   30140:	b929      	cbnz	r1, 3014e <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
   30142:	f01c fb71 	bl	4c828 <bt_id_scan_random_addr_check>
   30146:	b940      	cbnz	r0, 3015a <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   30148:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   3014c:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   3014e:	4608      	mov	r0, r1
   30150:	f01c f9bf 	bl	4c4d2 <bt_le_conn_params_valid>
   30154:	2800      	cmp	r0, #0
   30156:	d1f4      	bne.n	30142 <bt_le_set_auto_conn+0x12>
   30158:	e7f6      	b.n	30148 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   3015a:	4631      	mov	r1, r6
   3015c:	2000      	movs	r0, #0
   3015e:	f7ff febd 	bl	2fedc <bt_conn_lookup_addr_le>
	if (!conn) {
   30162:	4604      	mov	r4, r0
   30164:	b928      	cbnz	r0, 30172 <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   30166:	4631      	mov	r1, r6
   30168:	f7ff fe9c 	bl	2fea4 <bt_conn_add_le>
		if (!conn) {
   3016c:	4604      	mov	r4, r0
   3016e:	2800      	cmp	r0, #0
   30170:	d03d      	beq.n	301ee <bt_le_set_auto_conn+0xbe>
		if (!atomic_test_and_set_bit(conn->flags,
   30172:	1d20      	adds	r0, r4, #4
	if (param) {
   30174:	b33d      	cbz	r5, 301c6 <bt_le_set_auto_conn+0x96>
	conn->le.interval_min = param->interval_min;
   30176:	882b      	ldrh	r3, [r5, #0]
   30178:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   3017c:	886b      	ldrh	r3, [r5, #2]
   3017e:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
   30182:	88ab      	ldrh	r3, [r5, #4]
   30184:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   30188:	88eb      	ldrh	r3, [r5, #6]
   3018a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   3018e:	2101      	movs	r1, #1
   30190:	f01c fcd8 	bl	4cb44 <atomic_or>
		if (!atomic_test_and_set_bit(conn->flags,
   30194:	07c1      	lsls	r1, r0, #31
   30196:	d402      	bmi.n	3019e <bt_le_set_auto_conn+0x6e>
			bt_conn_ref(conn);
   30198:	4620      	mov	r0, r4
   3019a:	f01c fd7c 	bl	4cc96 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   3019e:	7b63      	ldrb	r3, [r4, #13]
   301a0:	b963      	cbnz	r3, 301bc <bt_le_set_auto_conn+0x8c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   301a2:	4814      	ldr	r0, [pc, #80]	; (301f4 <bt_le_set_auto_conn+0xc4>)
   301a4:	f01c fcc8 	bl	4cb38 <atomic_get>
   301a8:	0783      	lsls	r3, r0, #30
   301aa:	d507      	bpl.n	301bc <bt_le_set_auto_conn+0x8c>
		if (param) {
   301ac:	b11d      	cbz	r5, 301b6 <bt_le_set_auto_conn+0x86>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   301ae:	2102      	movs	r1, #2
   301b0:	4620      	mov	r0, r4
   301b2:	f7ff fc8f 	bl	2fad4 <bt_conn_set_state>
		bt_le_scan_update(false);
   301b6:	2000      	movs	r0, #0
   301b8:	f7ff f83e 	bl	2f238 <bt_le_scan_update>
	bt_conn_unref(conn);
   301bc:	4620      	mov	r0, r4
   301be:	f01c fd85 	bl	4cccc <bt_conn_unref>
	return 0;
   301c2:	2000      	movs	r0, #0
   301c4:	e7c2      	b.n	3014c <bt_le_set_auto_conn+0x1c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   301c6:	f06f 0101 	mvn.w	r1, #1
   301ca:	f01c fca6 	bl	4cb1a <atomic_and>
		if (atomic_test_and_clear_bit(conn->flags,
   301ce:	07c2      	lsls	r2, r0, #31
   301d0:	d5e5      	bpl.n	3019e <bt_le_set_auto_conn+0x6e>
			bt_conn_unref(conn);
   301d2:	4620      	mov	r0, r4
   301d4:	f01c fd7a 	bl	4cccc <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   301d8:	7b63      	ldrb	r3, [r4, #13]
   301da:	2b02      	cmp	r3, #2
   301dc:	d1df      	bne.n	3019e <bt_le_set_auto_conn+0x6e>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   301de:	4629      	mov	r1, r5
   301e0:	4620      	mov	r0, r4
   301e2:	f7ff fc77 	bl	2fad4 <bt_conn_set_state>
   301e6:	e7da      	b.n	3019e <bt_le_set_auto_conn+0x6e>
		return -EAGAIN;
   301e8:	f06f 000a 	mvn.w	r0, #10
   301ec:	e7ae      	b.n	3014c <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   301ee:	f06f 000b 	mvn.w	r0, #11
   301f2:	e7ab      	b.n	3014c <bt_le_set_auto_conn+0x1c>
   301f4:	200000fc 	.word	0x200000fc

000301f8 <send_conn_le_param_update>:
{
   301f8:	b538      	push	{r3, r4, r5, lr}
   301fa:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   301fc:	4608      	mov	r0, r1
{
   301fe:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   30200:	f01c f967 	bl	4c4d2 <bt_le_conn_params_valid>
   30204:	b338      	cbz	r0, 30256 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   30206:	4b15      	ldr	r3, [pc, #84]	; (3025c <send_conn_le_param_update+0x64>)
   30208:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   3020c:	0799      	lsls	r1, r3, #30
   3020e:	d407      	bmi.n	30220 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   30210:	78e3      	ldrb	r3, [r4, #3]
   30212:	b173      	cbz	r3, 30232 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   30214:	4629      	mov	r1, r5
   30216:	4620      	mov	r0, r4
}
   30218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   3021c:	f000 b9e0 	b.w	305e0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   30220:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   30224:	079a      	lsls	r2, r3, #30
   30226:	d5f3      	bpl.n	30210 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   30228:	1d20      	adds	r0, r4, #4
   3022a:	f01c fc85 	bl	4cb38 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   3022e:	0543      	lsls	r3, r0, #21
   30230:	d4ee      	bmi.n	30210 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   30232:	4629      	mov	r1, r5
   30234:	4620      	mov	r0, r4
   30236:	f01c fe79 	bl	4cf2c <bt_conn_le_conn_update>
		if (rc == 0) {
   3023a:	b958      	cbnz	r0, 30254 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   3023c:	882b      	ldrh	r3, [r5, #0]
   3023e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   30242:	886b      	ldrh	r3, [r5, #2]
   30244:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   30248:	88ab      	ldrh	r3, [r5, #4]
   3024a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   3024e:	88eb      	ldrh	r3, [r5, #6]
   30250:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   30254:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   30256:	f06f 0015 	mvn.w	r0, #21
   3025a:	e7fb      	b.n	30254 <send_conn_le_param_update+0x5c>
   3025c:	20000030 	.word	0x20000030

00030260 <deferred_work>:
{
   30260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   30262:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   30266:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   30268:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   3026c:	b9fb      	cbnz	r3, 302ae <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   3026e:	4628      	mov	r0, r5
   30270:	f01c fede 	bl	4d030 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   30274:	4b24      	ldr	r3, [pc, #144]	; (30308 <deferred_work+0xa8>)
   30276:	681e      	ldr	r6, [r3, #0]
   30278:	b94e      	cbnz	r6, 3028e <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   3027a:	4e24      	ldr	r6, [pc, #144]	; (3030c <deferred_work+0xac>)
   3027c:	4f24      	ldr	r7, [pc, #144]	; (30310 <deferred_work+0xb0>)
   3027e:	42be      	cmp	r6, r7
   30280:	d30d      	bcc.n	3029e <deferred_work+0x3e>
		bt_conn_unref(conn);
   30282:	4628      	mov	r0, r5
}
   30284:	b003      	add	sp, #12
   30286:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   3028a:	f01c bd1f 	b.w	4cccc <bt_conn_unref>
		if (cb->disconnected) {
   3028e:	6873      	ldr	r3, [r6, #4]
   30290:	b11b      	cbz	r3, 3029a <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   30292:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   30296:	4628      	mov	r0, r5
   30298:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   3029a:	69f6      	ldr	r6, [r6, #28]
   3029c:	e7ec      	b.n	30278 <deferred_work+0x18>
		if (cb->disconnected) {
   3029e:	6873      	ldr	r3, [r6, #4]
   302a0:	b11b      	cbz	r3, 302aa <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   302a2:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   302a6:	4628      	mov	r0, r5
   302a8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   302aa:	3620      	adds	r6, #32
   302ac:	e7e7      	b.n	3027e <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   302ae:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   302b2:	2b01      	cmp	r3, #1
   302b4:	d126      	bne.n	30304 <deferred_work+0xa4>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   302b6:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   302ba:	b923      	cbnz	r3, 302c6 <deferred_work+0x66>
}
   302bc:	b003      	add	sp, #12
   302be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_create_conn_cancel();
   302c2:	f7fd bdef 	b.w	2dea4 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   302c6:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   302ca:	f46f 7100 	mvn.w	r1, #512	; 0x200
   302ce:	4630      	mov	r0, r6
   302d0:	f01c fc23 	bl	4cb1a <atomic_and>
   302d4:	0583      	lsls	r3, r0, #22
   302d6:	d50f      	bpl.n	302f8 <deferred_work+0x98>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   302d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   302da:	9300      	str	r3, [sp, #0]
   302dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   302de:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   302e0:	4669      	mov	r1, sp
   302e2:	4628      	mov	r0, r5
   302e4:	f7ff ff88 	bl	301f8 <send_conn_le_param_update>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   302e8:	f44f 7180 	mov.w	r1, #256	; 0x100
   302ec:	4630      	mov	r0, r6
}
   302ee:	b003      	add	sp, #12
   302f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   302f4:	f01c bc26 	b.w	4cb44 <atomic_or>
		param = BT_LE_CONN_PARAM(
   302f8:	4a06      	ldr	r2, [pc, #24]	; (30314 <deferred_work+0xb4>)
   302fa:	6810      	ldr	r0, [r2, #0]
   302fc:	6851      	ldr	r1, [r2, #4]
   302fe:	466b      	mov	r3, sp
   30300:	c303      	stmia	r3!, {r0, r1}
   30302:	e7ed      	b.n	302e0 <deferred_work+0x80>
}
   30304:	b003      	add	sp, #12
   30306:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30308:	20004600 	.word	0x20004600
   3030c:	000517a0 	.word	0x000517a0
   30310:	000517a0 	.word	0x000517a0
   30314:	00051982 	.word	0x00051982

00030318 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   30318:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   3031a:	4801      	ldr	r0, [pc, #4]	; (30320 <bt_conn_create_frag_timeout+0x8>)
   3031c:	f7ff bcb6 	b.w	2fc8c <bt_conn_create_pdu_timeout>
   30320:	200013a4 	.word	0x200013a4

00030324 <create_frag>:
{
   30324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30328:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   3032a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3032e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   30332:	2000      	movs	r0, #0
{
   30334:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   30336:	f7ff ffef 	bl	30318 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   3033a:	7b73      	ldrb	r3, [r6, #13]
   3033c:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   3033e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   30340:	f04f 0600 	mov.w	r6, #0
   30344:	d005      	beq.n	30352 <create_frag+0x2e>
		net_buf_unref(frag);
   30346:	f013 fb01 	bl	4394c <net_buf_unref>
		return NULL;
   3034a:	4635      	mov	r5, r6
}
   3034c:	4628      	mov	r0, r5
   3034e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   30352:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   30354:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   30358:	4e0c      	ldr	r6, [pc, #48]	; (3038c <create_frag+0x68>)
   3035a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   3035c:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   30360:	f01f fca8 	bl	4fcb4 <net_buf_simple_tailroom>
   30364:	4580      	cmp	r8, r0
   30366:	d20c      	bcs.n	30382 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   30368:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   3036c:	f854 1f08 	ldr.w	r1, [r4, #8]!
   30370:	4632      	mov	r2, r6
   30372:	4638      	mov	r0, r7
   30374:	f01f fc57 	bl	4fc26 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   30378:	4631      	mov	r1, r6
   3037a:	4620      	mov	r0, r4
   3037c:	f01f fc76 	bl	4fc6c <net_buf_simple_pull>
   30380:	e7e4      	b.n	3034c <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   30382:	4638      	mov	r0, r7
   30384:	f01f fc96 	bl	4fcb4 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   30388:	b286      	uxth	r6, r0
   3038a:	e7ef      	b.n	3036c <create_frag+0x48>
   3038c:	20000030 	.word	0x20000030

00030390 <bt_conn_process_tx>:
{
   30390:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   30392:	7b43      	ldrb	r3, [r0, #13]
{
   30394:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   30396:	b95b      	cbnz	r3, 303b0 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   30398:	f06f 0140 	mvn.w	r1, #64	; 0x40
   3039c:	3004      	adds	r0, #4
   3039e:	f01c fbbc 	bl	4cb1a <atomic_and>
   303a2:	0643      	lsls	r3, r0, #25
   303a4:	d504      	bpl.n	303b0 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   303a6:	4620      	mov	r0, r4
}
   303a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   303ac:	f01c bc08 	b.w	4cbc0 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   303b0:	2200      	movs	r2, #0
   303b2:	2300      	movs	r3, #0
   303b4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   303b8:	f01f fbcc 	bl	4fb54 <net_buf_get>
	BT_ASSERT(buf);
   303bc:	4605      	mov	r5, r0
   303be:	b960      	cbnz	r0, 303da <bt_conn_process_tx+0x4a>
   303c0:	4a1f      	ldr	r2, [pc, #124]	; (30440 <bt_conn_process_tx+0xb0>)
   303c2:	4920      	ldr	r1, [pc, #128]	; (30444 <bt_conn_process_tx+0xb4>)
   303c4:	4820      	ldr	r0, [pc, #128]	; (30448 <bt_conn_process_tx+0xb8>)
   303c6:	f240 23e7 	movw	r3, #743	; 0x2e7
   303ca:	f019 fb16 	bl	499fa <printk>
   303ce:	4040      	eors	r0, r0
   303d0:	f380 8811 	msr	BASEPRI, r0
   303d4:	f04f 0003 	mov.w	r0, #3
   303d8:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   303da:	4e1c      	ldr	r6, [pc, #112]	; (3044c <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
   303dc:	89aa      	ldrh	r2, [r5, #12]
   303de:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   303e2:	429a      	cmp	r2, r3
   303e4:	d807      	bhi.n	303f6 <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   303e6:	2300      	movs	r3, #0
   303e8:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   303ea:	4629      	mov	r1, r5
   303ec:	4620      	mov	r0, r4
   303ee:	f7ff fa2d 	bl	2f84c <send_frag>
	if (!send_buf(conn, buf)) {
   303f2:	b130      	cbz	r0, 30402 <bt_conn_process_tx+0x72>
}
   303f4:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   303f6:	4629      	mov	r1, r5
   303f8:	4620      	mov	r0, r4
   303fa:	f7ff ff93 	bl	30324 <create_frag>
	if (!frag) {
   303fe:	4601      	mov	r1, r0
   30400:	b920      	cbnz	r0, 3040c <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
   30402:	4628      	mov	r0, r5
}
   30404:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   30408:	f013 baa0 	b.w	4394c <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   3040c:	2301      	movs	r3, #1
   3040e:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   30410:	4620      	mov	r0, r4
   30412:	f7ff fa1b 	bl	2f84c <send_frag>
   30416:	2800      	cmp	r0, #0
   30418:	d0f3      	beq.n	30402 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   3041a:	89aa      	ldrh	r2, [r5, #12]
   3041c:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   30420:	429a      	cmp	r2, r3
   30422:	d802      	bhi.n	3042a <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
   30424:	2300      	movs	r3, #0
   30426:	2203      	movs	r2, #3
   30428:	e7df      	b.n	303ea <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   3042a:	4629      	mov	r1, r5
   3042c:	4620      	mov	r0, r4
   3042e:	f7ff ff79 	bl	30324 <create_frag>
		if (!frag) {
   30432:	4601      	mov	r1, r0
   30434:	2800      	cmp	r0, #0
   30436:	d0e4      	beq.n	30402 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   30438:	2301      	movs	r3, #1
   3043a:	461a      	mov	r2, r3
   3043c:	e7e8      	b.n	30410 <bt_conn_process_tx+0x80>
   3043e:	bf00      	nop
   30440:	0005428c 	.word	0x0005428c
   30444:	0005416d 	.word	0x0005416d
   30448:	00054150 	.word	0x00054150
   3044c:	20000030 	.word	0x20000030

00030450 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   30450:	4b0b      	ldr	r3, [pc, #44]	; (30480 <bt_conn_auth_cb_register+0x30>)
   30452:	b158      	cbz	r0, 3046c <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   30454:	681a      	ldr	r2, [r3, #0]
   30456:	b962      	cbnz	r2, 30472 <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   30458:	6942      	ldr	r2, [r0, #20]
   3045a:	b93a      	cbnz	r2, 3046c <bt_conn_auth_cb_register+0x1c>
   3045c:	6842      	ldr	r2, [r0, #4]
   3045e:	b95a      	cbnz	r2, 30478 <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   30460:	6882      	ldr	r2, [r0, #8]
   30462:	b94a      	cbnz	r2, 30478 <bt_conn_auth_cb_register+0x28>
   30464:	68c2      	ldr	r2, [r0, #12]
   30466:	b93a      	cbnz	r2, 30478 <bt_conn_auth_cb_register+0x28>
   30468:	6982      	ldr	r2, [r0, #24]
   3046a:	b92a      	cbnz	r2, 30478 <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   3046c:	6018      	str	r0, [r3, #0]
		return 0;
   3046e:	2000      	movs	r0, #0
   30470:	4770      	bx	lr
		return -EALREADY;
   30472:	f06f 0077 	mvn.w	r0, #119	; 0x77
   30476:	4770      	bx	lr
		return -EINVAL;
   30478:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   3047c:	4770      	bx	lr
   3047e:	bf00      	nop
   30480:	20004604 	.word	0x20004604

00030484 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   30484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   30486:	4917      	ldr	r1, [pc, #92]	; (304e4 <bt_conn_init+0x60>)
   30488:	4817      	ldr	r0, [pc, #92]	; (304e8 <bt_conn_init+0x64>)
   3048a:	f020 fabe 	bl	50a0a <k_queue_append>
   3048e:	4917      	ldr	r1, [pc, #92]	; (304ec <bt_conn_init+0x68>)
   30490:	4815      	ldr	r0, [pc, #84]	; (304e8 <bt_conn_init+0x64>)
   30492:	f020 faba 	bl	50a0a <k_queue_append>
   30496:	4916      	ldr	r1, [pc, #88]	; (304f0 <bt_conn_init+0x6c>)
   30498:	4813      	ldr	r0, [pc, #76]	; (304e8 <bt_conn_init+0x64>)
   3049a:	f020 fab6 	bl	50a0a <k_queue_append>
	}

	bt_att_init();
   3049e:	f01d fad9 	bl	4da54 <bt_att_init>

	err = bt_smp_init();
   304a2:	f003 fb15 	bl	33ad0 <bt_smp_init>
	if (err) {
   304a6:	4605      	mov	r5, r0
   304a8:	b9d0      	cbnz	r0, 304e0 <bt_conn_init+0x5c>
		return err;
	}

	bt_l2cap_init();
   304aa:	f01c fec8 	bl	4d23e <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   304ae:	4f11      	ldr	r7, [pc, #68]	; (304f4 <bt_conn_init+0x70>)
   304b0:	462e      	mov	r6, r5
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   304b2:	4638      	mov	r0, r7
   304b4:	f01c fbef 	bl	4cc96 <bt_conn_ref>

			if (!conn) {
   304b8:	4604      	mov	r4, r0
   304ba:	b160      	cbz	r0, 304d6 <bt_conn_init+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   304bc:	3004      	adds	r0, #4
   304be:	f01c fb3b 	bl	4cb38 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   304c2:	07c3      	lsls	r3, r0, #31
   304c4:	d504      	bpl.n	304d0 <bt_conn_init+0x4c>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
   304c6:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   304c8:	2102      	movs	r1, #2
   304ca:	4620      	mov	r0, r4
   304cc:	f7ff fb02 	bl	2fad4 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
   304d0:	4620      	mov	r0, r4
   304d2:	f01c fbfb 	bl	4cccc <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   304d6:	3601      	adds	r6, #1
   304d8:	2e06      	cmp	r6, #6
   304da:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
   304de:	d1e8      	bne.n	304b2 <bt_conn_init+0x2e>
		}
	}

	return 0;
}
   304e0:	4628      	mov	r0, r5
   304e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   304e4:	200045d0 	.word	0x200045d0
   304e8:	20001304 	.word	0x20001304
   304ec:	200045e0 	.word	0x200045e0
   304f0:	200045f0 	.word	0x200045f0
   304f4:	20001b20 	.word	0x20001b20

000304f8 <l2cap_accept>:
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   304f8:	b530      	push	{r4, r5, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   304fa:	4c09      	ldr	r4, [pc, #36]	; (30520 <l2cap_accept+0x28>)
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   304fc:	2300      	movs	r3, #0
   304fe:	25e8      	movs	r5, #232	; 0xe8
		if (l2cap->chan.chan.conn) {
   30500:	fb05 f003 	mul.w	r0, r5, r3
   30504:	1902      	adds	r2, r0, r4
   30506:	5820      	ldr	r0, [r4, r0]
   30508:	b128      	cbz	r0, 30516 <l2cap_accept+0x1e>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   3050a:	3301      	adds	r3, #1
   3050c:	2b06      	cmp	r3, #6
   3050e:	d1f7      	bne.n	30500 <l2cap_accept+0x8>
		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   30510:	f06f 000b 	mvn.w	r0, #11
}
   30514:	bd30      	pop	{r4, r5, pc}
		l2cap->chan.chan.ops = &ops;
   30516:	4b03      	ldr	r3, [pc, #12]	; (30524 <l2cap_accept+0x2c>)
   30518:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   3051a:	600a      	str	r2, [r1, #0]
		return 0;
   3051c:	e7fa      	b.n	30514 <l2cap_accept+0x1c>
   3051e:	bf00      	nop
   30520:	20001fa0 	.word	0x20001fa0
   30524:	00052750 	.word	0x00052750

00030528 <bt_l2cap_connected>:
{
   30528:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   3052c:	4e29      	ldr	r6, [pc, #164]	; (305d4 <bt_l2cap_connected+0xac>)
   3052e:	4f2a      	ldr	r7, [pc, #168]	; (305d8 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   30530:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 305dc <bt_l2cap_connected+0xb4>
{
   30534:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   30536:	42be      	cmp	r6, r7
   30538:	d302      	bcc.n	30540 <bt_l2cap_connected+0x18>
}
   3053a:	b003      	add	sp, #12
   3053c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   30540:	6873      	ldr	r3, [r6, #4]
   30542:	a901      	add	r1, sp, #4
   30544:	4620      	mov	r0, r4
   30546:	4798      	blx	r3
   30548:	2800      	cmp	r0, #0
   3054a:	db3d      	blt.n	305c8 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   3054c:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   3054e:	8833      	ldrh	r3, [r6, #0]
   30550:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   30554:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   30558:	4641      	mov	r1, r8
   3055a:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   3055e:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   30562:	f020 fb5c 	bl	50c1e <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   30566:	f3bf 8f5b 	dmb	ish
   3056a:	f105 0368 	add.w	r3, r5, #104	; 0x68
   3056e:	2200      	movs	r2, #0
   30570:	e853 1f00 	ldrex	r1, [r3]
   30574:	e843 2000 	strex	r0, r2, [r3]
   30578:	2800      	cmp	r0, #0
   3057a:	d1f9      	bne.n	30570 <bt_l2cap_connected+0x48>
   3057c:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   30580:	60aa      	str	r2, [r5, #8]
	return list->tail;
   30582:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   30584:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
   30588:	bb02      	cbnz	r2, 305cc <bt_l2cap_connected+0xa4>
	list->head = node;
   3058a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   3058e:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   30590:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   30592:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   30594:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   30598:	681b      	ldr	r3, [r3, #0]
   3059a:	b103      	cbz	r3, 3059e <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   3059c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3059e:	9b01      	ldr	r3, [sp, #4]
   305a0:	f3bf 8f5b 	dmb	ish
   305a4:	3368      	adds	r3, #104	; 0x68
   305a6:	e853 1f00 	ldrex	r1, [r3]
   305aa:	f041 0101 	orr.w	r1, r1, #1
   305ae:	e843 1200 	strex	r2, r1, [r3]
   305b2:	2a00      	cmp	r2, #0
   305b4:	d1f7      	bne.n	305a6 <bt_l2cap_connected+0x7e>
   305b6:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   305ba:	9801      	ldr	r0, [sp, #4]
   305bc:	6843      	ldr	r3, [r0, #4]
   305be:	699b      	ldr	r3, [r3, #24]
   305c0:	b113      	cbz	r3, 305c8 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   305c2:	f100 0168 	add.w	r1, r0, #104	; 0x68
   305c6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   305c8:	360c      	adds	r6, #12
   305ca:	e7b4      	b.n	30536 <bt_l2cap_connected+0xe>
	parent->next = child;
   305cc:	6013      	str	r3, [r2, #0]
	list->tail = node;
   305ce:	6563      	str	r3, [r4, #84]	; 0x54
}
   305d0:	e7dd      	b.n	3058e <bt_l2cap_connected+0x66>
   305d2:	bf00      	nop
   305d4:	0005177c 	.word	0x0005177c
   305d8:	000517a0 	.word	0x000517a0
   305dc:	0004d017 	.word	0x0004d017

000305e0 <bt_l2cap_update_conn_param>:
{
   305e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   305e2:	4b17      	ldr	r3, [pc, #92]	; (30640 <bt_l2cap_update_conn_param+0x60>)
{
   305e4:	460e      	mov	r6, r1
	ident++;
   305e6:	7819      	ldrb	r1, [r3, #0]
   305e8:	3101      	adds	r1, #1
   305ea:	b2c9      	uxtb	r1, r1
   305ec:	2901      	cmp	r1, #1
   305ee:	bf38      	it	cc
   305f0:	2101      	movcc	r1, #1
{
   305f2:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   305f4:	2208      	movs	r2, #8
   305f6:	2012      	movs	r0, #18
	ident++;
   305f8:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   305fa:	f01c fcc3 	bl	4cf84 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   305fe:	4604      	mov	r4, r0
   30600:	b1d0      	cbz	r0, 30638 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   30602:	2108      	movs	r1, #8
   30604:	4408      	add	r0, r1
   30606:	f01f fb08 	bl	4fc1a <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   3060a:	8833      	ldrh	r3, [r6, #0]
   3060c:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   3060e:	8873      	ldrh	r3, [r6, #2]
   30610:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   30612:	88b3      	ldrh	r3, [r6, #4]
   30614:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   30616:	88f3      	ldrh	r3, [r6, #6]
   30618:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   3061a:	2300      	movs	r3, #0
   3061c:	4628      	mov	r0, r5
   3061e:	9300      	str	r3, [sp, #0]
   30620:	4622      	mov	r2, r4
   30622:	2105      	movs	r1, #5
   30624:	f01c fd3c 	bl	4d0a0 <bt_l2cap_send_cb>
	if (err) {
   30628:	4605      	mov	r5, r0
   3062a:	b110      	cbz	r0, 30632 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   3062c:	4620      	mov	r0, r4
   3062e:	f013 f98d 	bl	4394c <net_buf_unref>
}
   30632:	4628      	mov	r0, r5
   30634:	b002      	add	sp, #8
   30636:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   30638:	f06f 050b 	mvn.w	r5, #11
   3063c:	e7f9      	b.n	30632 <bt_l2cap_update_conn_param+0x52>
   3063e:	bf00      	nop
   30640:	2000740d 	.word	0x2000740d

00030644 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   30644:	4b02      	ldr	r3, [pc, #8]	; (30650 <att_cfm_sent+0xc>)
   30646:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   3064a:	f01c be0b 	b.w	4d264 <att_sent>
   3064e:	bf00      	nop
   30650:	0004d7bf 	.word	0x0004d7bf

00030654 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   30654:	4b02      	ldr	r3, [pc, #8]	; (30660 <att_rsp_sent+0xc>)
   30656:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   3065a:	f01c be03 	b.w	4d264 <att_sent>
   3065e:	bf00      	nop
   30660:	0004d7a3 	.word	0x0004d7a3

00030664 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   30664:	4b02      	ldr	r3, [pc, #8]	; (30670 <att_req_sent+0xc>)
   30666:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   3066a:	f01c bdfb 	b.w	4d264 <att_sent>
   3066e:	bf00      	nop
   30670:	0004d5bb 	.word	0x0004d5bb

00030674 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   30674:	281d      	cmp	r0, #29
   30676:	d020      	beq.n	306ba <att_op_get_type+0x46>
   30678:	d813      	bhi.n	306a2 <att_op_get_type+0x2e>
   3067a:	2819      	cmp	r0, #25
   3067c:	d904      	bls.n	30688 <att_op_get_type+0x14>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   3067e:	281b      	cmp	r0, #27
   30680:	bf0c      	ite	eq
   30682:	2003      	moveq	r0, #3
   30684:	2006      	movne	r0, #6
   30686:	4770      	bx	lr
	switch (op) {
   30688:	b1c8      	cbz	r0, 306be <att_op_get_type+0x4a>
   3068a:	4a11      	ldr	r2, [pc, #68]	; (306d0 <att_op_get_type+0x5c>)
   3068c:	2301      	movs	r3, #1
   3068e:	4083      	lsls	r3, r0
   30690:	401a      	ands	r2, r3
   30692:	b9b2      	cbnz	r2, 306c2 <att_op_get_type+0x4e>
   30694:	4a0f      	ldr	r2, [pc, #60]	; (306d4 <att_op_get_type+0x60>)
   30696:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   30698:	2a00      	cmp	r2, #0
   3069a:	bf14      	ite	ne
   3069c:	2001      	movne	r0, #1
   3069e:	2006      	moveq	r0, #6
   306a0:	4770      	bx	lr
	switch (op) {
   306a2:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   306a6:	2b52      	cmp	r3, #82	; 0x52
   306a8:	d00d      	beq.n	306c6 <att_op_get_type+0x52>
   306aa:	281e      	cmp	r0, #30
   306ac:	d00d      	beq.n	306ca <att_op_get_type+0x56>
		return ATT_COMMAND;
   306ae:	f010 0f40 	tst.w	r0, #64	; 0x40
   306b2:	bf0c      	ite	eq
   306b4:	2006      	moveq	r0, #6
   306b6:	2000      	movne	r0, #0
   306b8:	4770      	bx	lr
		return ATT_INDICATION;
   306ba:	2005      	movs	r0, #5
   306bc:	4770      	bx	lr
	return ATT_UNKNOWN;
   306be:	2006      	movs	r0, #6
   306c0:	4770      	bx	lr
		return ATT_RESPONSE;
   306c2:	2002      	movs	r0, #2
   306c4:	4770      	bx	lr
		return ATT_COMMAND;
   306c6:	2000      	movs	r0, #0
   306c8:	4770      	bx	lr
	switch (op) {
   306ca:	2004      	movs	r0, #4
}
   306cc:	4770      	bx	lr
   306ce:	bf00      	nop
   306d0:	028aaaaa 	.word	0x028aaaaa
   306d4:	01455554 	.word	0x01455554

000306d8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   306d8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   306da:	3808      	subs	r0, #8
   306dc:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   306de:	a901      	add	r1, sp, #4
   306e0:	4802      	ldr	r0, [pc, #8]	; (306ec <bt_att_released+0x14>)
   306e2:	f020 f8ca 	bl	5087a <k_mem_slab_free>
}
   306e6:	b003      	add	sp, #12
   306e8:	f85d fb04 	ldr.w	pc, [sp], #4
   306ec:	200010dc 	.word	0x200010dc

000306f0 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   306f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   306f2:	2300      	movs	r3, #0
{
   306f4:	4607      	mov	r7, r0
   306f6:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   306f8:	481e      	ldr	r0, [pc, #120]	; (30774 <bt_att_accept+0x84>)
   306fa:	2200      	movs	r2, #0
   306fc:	4669      	mov	r1, sp
   306fe:	f017 fa17 	bl	47b30 <k_mem_slab_alloc>
   30702:	4604      	mov	r4, r0
   30704:	b998      	cbnz	r0, 3072e <bt_att_accept+0x3e>
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
   30706:	4601      	mov	r1, r0
   30708:	222c      	movs	r2, #44	; 0x2c
   3070a:	9800      	ldr	r0, [sp, #0]
   3070c:	f01b faaf 	bl	4bc6e <memset>
	att->conn = conn;
   30710:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   30712:	4819      	ldr	r0, [pc, #100]	; (30778 <bt_att_accept+0x88>)
	list->tail = NULL;
   30714:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   30716:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   3071a:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   3071e:	2200      	movs	r2, #0
   30720:	2300      	movs	r3, #0
   30722:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   30724:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   30726:	f017 fa03 	bl	47b30 <k_mem_slab_alloc>
   3072a:	4604      	mov	r4, r0
   3072c:	b120      	cbz	r0, 30738 <bt_att_accept+0x48>
		return -ENOMEM;
   3072e:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   30732:	4620      	mov	r0, r4
   30734:	b003      	add	sp, #12
   30736:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(chan, 0, sizeof(*chan));
   30738:	4601      	mov	r1, r0
   3073a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   3073e:	9801      	ldr	r0, [sp, #4]
   30740:	f01b fa95 	bl	4bc6e <memset>
	chan->chan.chan.ops = &ops;
   30744:	9801      	ldr	r0, [sp, #4]
   30746:	4b0d      	ldr	r3, [pc, #52]	; (3077c <bt_att_accept+0x8c>)
   30748:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   3074a:	30f8      	adds	r0, #248	; 0xf8
   3074c:	f020 f951 	bl	509f2 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   30750:	9b01      	ldr	r3, [sp, #4]
   30752:	f3bf 8f5b 	dmb	ish
   30756:	33f0      	adds	r3, #240	; 0xf0
   30758:	e853 2f00 	ldrex	r2, [r3]
   3075c:	e843 4100 	strex	r1, r4, [r3]
   30760:	2900      	cmp	r1, #0
   30762:	d1f9      	bne.n	30758 <bt_att_accept+0x68>
   30764:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   30768:	9b01      	ldr	r3, [sp, #4]
   3076a:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   3076e:	6033      	str	r3, [r6, #0]
	return 0;
   30770:	e7df      	b.n	30732 <bt_att_accept+0x42>
   30772:	bf00      	nop
   30774:	200010c0 	.word	0x200010c0
   30778:	200010dc 	.word	0x200010dc
   3077c:	20000824 	.word	0x20000824

00030780 <read_group_cb>:
{
   30780:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   30784:	4605      	mov	r5, r0
   30786:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   30788:	f04f 0800 	mov.w	r8, #0
   3078c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   30790:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   30792:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   30794:	f88d 8008 	strb.w	r8, [sp, #8]
   30798:	a902      	add	r1, sp, #8
{
   3079a:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   3079c:	f8ad 300a 	strh.w	r3, [sp, #10]
   307a0:	f01b fb48 	bl	4be34 <bt_uuid_cmp>
   307a4:	b1a0      	cbz	r0, 307d0 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   307a6:	f642 0301 	movw	r3, #10241	; 0x2801
   307aa:	6828      	ldr	r0, [r5, #0]
   307ac:	f88d 800c 	strb.w	r8, [sp, #12]
   307b0:	a903      	add	r1, sp, #12
   307b2:	f8ad 300e 	strh.w	r3, [sp, #14]
   307b6:	f01b fb3d 	bl	4be34 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   307ba:	b148      	cbz	r0, 307d0 <read_group_cb+0x50>
		if (data->group &&
   307bc:	6923      	ldr	r3, [r4, #16]
   307be:	b11b      	cbz	r3, 307c8 <read_group_cb+0x48>
   307c0:	885a      	ldrh	r2, [r3, #2]
   307c2:	42b2      	cmp	r2, r6
   307c4:	d200      	bcs.n	307c8 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   307c6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   307c8:	2001      	movs	r0, #1
}
   307ca:	b004      	add	sp, #16
   307cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   307d0:	6861      	ldr	r1, [r4, #4]
   307d2:	6828      	ldr	r0, [r5, #0]
   307d4:	f01b fb2e 	bl	4be34 <bt_uuid_cmp>
   307d8:	b110      	cbz	r0, 307e0 <read_group_cb+0x60>
		data->group = NULL;
   307da:	2300      	movs	r3, #0
   307dc:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   307de:	e7f3      	b.n	307c8 <read_group_cb+0x48>
	if (data->rsp->len &&
   307e0:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   307e2:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   307e4:	781a      	ldrb	r2, [r3, #0]
   307e6:	b13a      	cbz	r2, 307f8 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   307e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   307ec:	8981      	ldrh	r1, [r0, #12]
   307ee:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   307f0:	4293      	cmp	r3, r2
   307f2:	da01      	bge.n	307f8 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   307f4:	2000      	movs	r0, #0
   307f6:	e7e8      	b.n	307ca <read_group_cb+0x4a>
   307f8:	2104      	movs	r1, #4
   307fa:	3008      	adds	r0, #8
   307fc:	f01f fa0d 	bl	4fc1a <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   30800:	4b09      	ldr	r3, [pc, #36]	; (30828 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   30802:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   30804:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   30806:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   30808:	9300      	str	r3, [sp, #0]
   3080a:	9401      	str	r4, [sp, #4]
   3080c:	68a2      	ldr	r2, [r4, #8]
   3080e:	2300      	movs	r3, #0
   30810:	4629      	mov	r1, r5
   30812:	4638      	mov	r0, r7
   30814:	f01c fedc 	bl	4d5d0 <att_chan_read>
	if (read < 0) {
   30818:	2800      	cmp	r0, #0
   3081a:	dbeb      	blt.n	307f4 <read_group_cb+0x74>
	if (!data->group) {
   3081c:	6920      	ldr	r0, [r4, #16]
   3081e:	3800      	subs	r0, #0
   30820:	bf18      	it	ne
   30822:	2001      	movne	r0, #1
   30824:	e7d1      	b.n	307ca <read_group_cb+0x4a>
   30826:	bf00      	nop
   30828:	0004d59b 	.word	0x0004d59b

0003082c <chan_send>:
{
   3082c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   30830:	688b      	ldr	r3, [r1, #8]
   30832:	781b      	ldrb	r3, [r3, #0]
   30834:	2bd2      	cmp	r3, #210	; 0xd2
{
   30836:	4605      	mov	r5, r0
   30838:	460c      	mov	r4, r1
   3083a:	4616      	mov	r6, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   3083c:	d10c      	bne.n	30858 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   3083e:	6803      	ldr	r3, [r0, #0]
   30840:	6818      	ldr	r0, [r3, #0]
   30842:	f01e fec9 	bl	4f5d8 <bt_smp_sign>
		if (err) {
   30846:	4607      	mov	r7, r0
   30848:	b130      	cbz	r0, 30858 <chan_send+0x2c>
			net_buf_unref(buf);
   3084a:	4620      	mov	r0, r4
   3084c:	f013 f87e 	bl	4394c <net_buf_unref>
}
   30850:	4638      	mov	r0, r7
   30852:	b003      	add	sp, #12
   30854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   30858:	f104 0008 	add.w	r0, r4, #8
   3085c:	f01f fa26 	bl	4fcac <net_buf_simple_headroom>
	state->len = buf->len;
   30860:	f8b4 900c 	ldrh.w	r9, [r4, #12]
   30864:	6829      	ldr	r1, [r5, #0]
	state->offset = net_buf_simple_headroom(buf);
   30866:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   30868:	b9f6      	cbnz	r6, 308a8 <chan_send+0x7c>
	switch (att_op_get_type(buf->data[0])) {
   3086a:	68a3      	ldr	r3, [r4, #8]
   3086c:	7818      	ldrb	r0, [r3, #0]
   3086e:	f7ff ff01 	bl	30674 <att_op_get_type>
   30872:	3801      	subs	r0, #1
   30874:	b2c0      	uxtb	r0, r0
   30876:	2804      	cmp	r0, #4
   30878:	d913      	bls.n	308a2 <chan_send+0x76>
		return att_sent;
   3087a:	4b15      	ldr	r3, [pc, #84]	; (308d0 <chan_send+0xa4>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   3087c:	6808      	ldr	r0, [r1, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   3087e:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
			       &chan->chan.chan);
   30882:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   30884:	9500      	str	r5, [sp, #0]
   30886:	4622      	mov	r2, r4
   30888:	2104      	movs	r1, #4
   3088a:	f01c fc09 	bl	4d0a0 <bt_l2cap_send_cb>
	if (err) {
   3088e:	4607      	mov	r7, r0
   30890:	2800      	cmp	r0, #0
   30892:	d0dd      	beq.n	30850 <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
   30894:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   30896:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   3089a:	fa13 f388 	uxtah	r3, r3, r8
   3089e:	60a3      	str	r3, [r4, #8]
}
   308a0:	e7d6      	b.n	30850 <chan_send+0x24>
   308a2:	4b0c      	ldr	r3, [pc, #48]	; (308d4 <chan_send+0xa8>)
   308a4:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
	if (cb == chan_rsp_sent) {
   308a8:	4b0b      	ldr	r3, [pc, #44]	; (308d8 <chan_send+0xac>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   308aa:	6808      	ldr	r0, [r1, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   308ac:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
	if (cb == chan_rsp_sent) {
   308b0:	429e      	cmp	r6, r3
   308b2:	d009      	beq.n	308c8 <chan_send+0x9c>
	} else if (cb == chan_cfm_sent) {
   308b4:	4b09      	ldr	r3, [pc, #36]	; (308dc <chan_send+0xb0>)
   308b6:	429e      	cmp	r6, r3
   308b8:	d008      	beq.n	308cc <chan_send+0xa0>
		return att_req_sent;
   308ba:	4909      	ldr	r1, [pc, #36]	; (308e0 <chan_send+0xb4>)
   308bc:	4b04      	ldr	r3, [pc, #16]	; (308d0 <chan_send+0xa4>)
   308be:	4a09      	ldr	r2, [pc, #36]	; (308e4 <chan_send+0xb8>)
   308c0:	428e      	cmp	r6, r1
   308c2:	bf08      	it	eq
   308c4:	4613      	moveq	r3, r2
   308c6:	e7dc      	b.n	30882 <chan_send+0x56>
		return att_rsp_sent;
   308c8:	4b07      	ldr	r3, [pc, #28]	; (308e8 <chan_send+0xbc>)
   308ca:	e7da      	b.n	30882 <chan_send+0x56>
		return att_cfm_sent;
   308cc:	4b07      	ldr	r3, [pc, #28]	; (308ec <chan_send+0xc0>)
   308ce:	e7d8      	b.n	30882 <chan_send+0x56>
   308d0:	0004d265 	.word	0x0004d265
   308d4:	00052774 	.word	0x00052774
   308d8:	0004d7a3 	.word	0x0004d7a3
   308dc:	0004d7bf 	.word	0x0004d7bf
   308e0:	0004d5bb 	.word	0x0004d5bb
   308e4:	00030665 	.word	0x00030665
   308e8:	00030655 	.word	0x00030655
   308ec:	00030645 	.word	0x00030645

000308f0 <read_type_cb>:
{
   308f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   308f4:	6817      	ldr	r7, [r2, #0]
{
   308f6:	4605      	mov	r5, r0
   308f8:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   308fa:	6800      	ldr	r0, [r0, #0]
   308fc:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   308fe:	68be      	ldr	r6, [r7, #8]
{
   30900:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   30902:	f01b fa97 	bl	4be34 <bt_uuid_cmp>
   30906:	4681      	mov	r9, r0
   30908:	2800      	cmp	r0, #0
   3090a:	d13d      	bne.n	30988 <read_type_cb+0x98>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   3090c:	4630      	mov	r0, r6
   3090e:	2215      	movs	r2, #21
   30910:	4629      	mov	r1, r5
   30912:	f01d fe2f 	bl	4e574 <bt_gatt_check_perm>
   30916:	4606      	mov	r6, r0
   30918:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   3091a:	b140      	cbz	r0, 3092e <read_type_cb+0x3e>
		if (data->rsp->len) {
   3091c:	68e3      	ldr	r3, [r4, #12]
   3091e:	781b      	ldrb	r3, [r3, #0]
   30920:	b10b      	cbz	r3, 30926 <read_type_cb+0x36>
			data->err = 0x00;
   30922:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   30926:	2000      	movs	r0, #0
}
   30928:	b003      	add	sp, #12
   3092a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   3092e:	68a0      	ldr	r0, [r4, #8]
   30930:	f01f f945 	bl	4fbbe <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   30934:	2102      	movs	r1, #2
   30936:	3008      	adds	r0, #8
   30938:	f01f f96f 	bl	4fc1a <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   3093c:	4b13      	ldr	r3, [pc, #76]	; (3098c <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   3093e:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   30940:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   30944:	9300      	str	r3, [sp, #0]
   30946:	9401      	str	r4, [sp, #4]
   30948:	68a2      	ldr	r2, [r4, #8]
   3094a:	4633      	mov	r3, r6
   3094c:	4629      	mov	r1, r5
   3094e:	4638      	mov	r0, r7
   30950:	f01c fe3e 	bl	4d5d0 <att_chan_read>
	if (read < 0) {
   30954:	2800      	cmp	r0, #0
   30956:	da07      	bge.n	30968 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   30958:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   3095c:	bf26      	itte	cs
   3095e:	4240      	negcs	r0, r0
   30960:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   30962:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   30964:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   30966:	e7de      	b.n	30926 <read_type_cb+0x36>
	if (!data->item) {
   30968:	6923      	ldr	r3, [r4, #16]
   3096a:	2b00      	cmp	r3, #0
   3096c:	d0db      	beq.n	30926 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   3096e:	68a0      	ldr	r0, [r4, #8]
   30970:	f01c fc70 	bl	4d254 <net_buf_frags_len>
   30974:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   30978:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   3097a:	68e3      	ldr	r3, [r4, #12]
   3097c:	781b      	ldrb	r3, [r3, #0]
   3097e:	4298      	cmp	r0, r3
   30980:	bf94      	ite	ls
   30982:	2000      	movls	r0, #0
   30984:	2001      	movhi	r0, #1
   30986:	e7cf      	b.n	30928 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   30988:	2001      	movs	r0, #1
   3098a:	e7cd      	b.n	30928 <read_type_cb+0x38>
   3098c:	0004d271 	.word	0x0004d271

00030990 <bt_att_connected>:
{
   30990:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   30992:	4606      	mov	r6, r0
{
   30994:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   30996:	2104      	movs	r1, #4
   30998:	f856 0908 	ldr.w	r0, [r6], #-8
   3099c:	f01c fc1e 	bl	4d1dc <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   309a0:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   309a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   309a6:	b91b      	cbnz	r3, 309b0 <bt_att_connected+0x20>
   309a8:	f105 000c 	add.w	r0, r5, #12
   309ac:	f020 f821 	bl	509f2 <z_impl_k_queue_init>
	parent->next = child;
   309b0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   309b2:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   309b6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   309b8:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   309bc:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   309be:	b902      	cbnz	r2, 309c2 <bt_att_connected+0x32>
	list->tail = node;
   309c0:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   309c2:	f3bf 8f5b 	dmb	ish
   309c6:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   309ca:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   309ce:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   309d0:	bf58      	it	pl
   309d2:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   309d4:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   309d6:	bf5c      	itt	pl
   309d8:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   309dc:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   309e0:	f01c fc87 	bl	4d2f2 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   309e4:	f504 7084 	add.w	r0, r4, #264	; 0x108
   309e8:	4902      	ldr	r1, [pc, #8]	; (309f4 <bt_att_connected+0x64>)
}
   309ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   309ee:	f020 b916 	b.w	50c1e <k_work_init_delayable>
   309f2:	bf00      	nop
   309f4:	0004db43 	.word	0x0004db43

000309f8 <att_indicate>:
{
   309f8:	b570      	push	{r4, r5, r6, lr}
   309fa:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   309fc:	f101 0008 	add.w	r0, r1, #8
   30a00:	460d      	mov	r5, r1
   30a02:	f01f f94b 	bl	4fc9c <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   30a06:	6826      	ldr	r6, [r4, #0]
   30a08:	89ab      	ldrh	r3, [r5, #12]
   30a0a:	68aa      	ldr	r2, [r5, #8]
   30a0c:	4601      	mov	r1, r0
   30a0e:	6830      	ldr	r0, [r6, #0]
   30a10:	f01e f8ce 	bl	4ebb0 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   30a14:	211e      	movs	r1, #30
   30a16:	2200      	movs	r2, #0
   30a18:	4620      	mov	r0, r4
   30a1a:	f01c ff91 	bl	4d940 <bt_att_chan_create_pdu>
	if (!buf) {
   30a1e:	4601      	mov	r1, r0
   30a20:	b118      	cbz	r0, 30a2a <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   30a22:	4a03      	ldr	r2, [pc, #12]	; (30a30 <att_indicate+0x38>)
   30a24:	4620      	mov	r0, r4
   30a26:	f01c fe94 	bl	4d752 <bt_att_chan_send_rsp>
}
   30a2a:	2000      	movs	r0, #0
   30a2c:	bd70      	pop	{r4, r5, r6, pc}
   30a2e:	bf00      	nop
   30a30:	0004d7bf 	.word	0x0004d7bf

00030a34 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   30a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30a38:	4688      	mov	r8, r1
   30a3a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   30a3c:	2101      	movs	r1, #1
   30a3e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   30a40:	4605      	mov	r5, r0
   30a42:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   30a44:	f01c ff7c 	bl	4d940 <bt_att_chan_create_pdu>
	if (!buf) {
   30a48:	4604      	mov	r4, r0
   30a4a:	b178      	cbz	r0, 30a6c <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   30a4c:	2104      	movs	r1, #4
   30a4e:	3008      	adds	r0, #8
   30a50:	f01f f8e3 	bl	4fc1a <net_buf_simple_add>
	rsp->request = req;
   30a54:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   30a58:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   30a5a:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   30a5e:	4621      	mov	r1, r4
   30a60:	4628      	mov	r0, r5
   30a62:	4a03      	ldr	r2, [pc, #12]	; (30a70 <send_err_rsp.part.0+0x3c>)
}
   30a64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   30a68:	f01c be73 	b.w	4d752 <bt_att_chan_send_rsp>
}
   30a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30a70:	0004d7a3 	.word	0x0004d7a3

00030a74 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   30a74:	898b      	ldrh	r3, [r1, #12]
{
   30a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30a7a:	4604      	mov	r4, r0
   30a7c:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
   30a7e:	2b00      	cmp	r3, #0
   30a80:	d06d      	beq.n	30b5e <bt_att_recv+0xea>
	return net_buf_simple_pull_mem(&buf->b, len);
   30a82:	2101      	movs	r1, #1
   30a84:	f106 0008 	add.w	r0, r6, #8
   30a88:	f01f f8f8 	bl	4fc7c <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   30a8c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   30a90:	4607      	mov	r7, r0
   30a92:	2b00      	cmp	r3, #0
   30a94:	d063      	beq.n	30b5e <bt_att_recv+0xea>
		if (hdr->code == handlers[i].op) {
   30a96:	7801      	ldrb	r1, [r0, #0]
   30a98:	4a33      	ldr	r2, [pc, #204]	; (30b68 <bt_att_recv+0xf4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   30a9a:	f1a4 0508 	sub.w	r5, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   30a9e:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   30aa0:	f812 e033 	ldrb.w	lr, [r2, r3, lsl #3]
   30aa4:	458e      	cmp	lr, r1
   30aa6:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   30aaa:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
   30aae:	d126      	bne.n	30afe <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   30ab0:	f890 8002 	ldrb.w	r8, [r0, #2]
   30ab4:	f1b8 0f01 	cmp.w	r8, #1
   30ab8:	d131      	bne.n	30b1e <bt_att_recv+0xaa>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   30aba:	f3bf 8f5b 	dmb	ish
   30abe:	34e8      	adds	r4, #232	; 0xe8
   30ac0:	e854 3f00 	ldrex	r3, [r4]
   30ac4:	f043 0101 	orr.w	r1, r3, #1
   30ac8:	e844 1e00 	strex	lr, r1, [r4]
   30acc:	f1be 0f00 	cmp.w	lr, #0
   30ad0:	d1f6      	bne.n	30ac0 <bt_att_recv+0x4c>
   30ad2:	f3bf 8f5b 	dmb	ish
   30ad6:	07d9      	lsls	r1, r3, #31
   30ad8:	d441      	bmi.n	30b5e <bt_att_recv+0xea>
	if (buf->len < handler->expect_len) {
   30ada:	89b1      	ldrh	r1, [r6, #12]
   30adc:	7843      	ldrb	r3, [r0, #1]
   30ade:	4299      	cmp	r1, r3
   30ae0:	d340      	bcc.n	30b64 <bt_att_recv+0xf0>
		err = handler->func(att_chan, buf);
   30ae2:	eb02 030c 	add.w	r3, r2, ip
   30ae6:	4631      	mov	r1, r6
   30ae8:	685b      	ldr	r3, [r3, #4]
   30aea:	4628      	mov	r0, r5
   30aec:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   30aee:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   30af2:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   30af4:	d133      	bne.n	30b5e <bt_att_recv+0xea>
   30af6:	b390      	cbz	r0, 30b5e <bt_att_recv+0xea>
		send_err_rsp(att_chan, hdr->code, 0, err);
   30af8:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   30afa:	b381      	cbz	r1, 30b5e <bt_att_recv+0xea>
   30afc:	e00a      	b.n	30b14 <bt_att_recv+0xa0>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   30afe:	3301      	adds	r3, #1
   30b00:	2b1c      	cmp	r3, #28
   30b02:	d1cd      	bne.n	30aa0 <bt_att_recv+0x2c>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   30b04:	4608      	mov	r0, r1
   30b06:	f7ff fdb5 	bl	30674 <att_op_get_type>
   30b0a:	b340      	cbz	r0, 30b5e <bt_att_recv+0xea>
   30b0c:	2805      	cmp	r0, #5
   30b0e:	d026      	beq.n	30b5e <bt_att_recv+0xea>
	if (!req) {
   30b10:	b329      	cbz	r1, 30b5e <bt_att_recv+0xea>
   30b12:	2306      	movs	r3, #6
   30b14:	2200      	movs	r2, #0
   30b16:	4628      	mov	r0, r5
   30b18:	f7ff ff8c 	bl	30a34 <send_err_rsp.part.0>
   30b1c:	e01f      	b.n	30b5e <bt_att_recv+0xea>
		} else if (handler->type == ATT_INDICATION &&
   30b1e:	f1b8 0f05 	cmp.w	r8, #5
   30b22:	d008      	beq.n	30b36 <bt_att_recv+0xc2>
	if (buf->len < handler->expect_len) {
   30b24:	89b2      	ldrh	r2, [r6, #12]
   30b26:	7843      	ldrb	r3, [r0, #1]
   30b28:	429a      	cmp	r2, r3
   30b2a:	d318      	bcc.n	30b5e <bt_att_recv+0xea>
		err = handler->func(att_chan, buf);
   30b2c:	6843      	ldr	r3, [r0, #4]
   30b2e:	4631      	mov	r1, r6
   30b30:	4628      	mov	r0, r5
   30b32:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   30b34:	e013      	b.n	30b5e <bt_att_recv+0xea>
   30b36:	34e8      	adds	r4, #232	; 0xe8
   30b38:	f3bf 8f5b 	dmb	ish
   30b3c:	e854 3f00 	ldrex	r3, [r4]
   30b40:	f043 0102 	orr.w	r1, r3, #2
   30b44:	e844 1e00 	strex	lr, r1, [r4]
   30b48:	f1be 0f00 	cmp.w	lr, #0
   30b4c:	d1f6      	bne.n	30b3c <bt_att_recv+0xc8>
   30b4e:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
   30b52:	079b      	lsls	r3, r3, #30
   30b54:	d403      	bmi.n	30b5e <bt_att_recv+0xea>
	if (buf->len < handler->expect_len) {
   30b56:	89b1      	ldrh	r1, [r6, #12]
   30b58:	7843      	ldrb	r3, [r0, #1]
   30b5a:	4299      	cmp	r1, r3
   30b5c:	d2c1      	bcs.n	30ae2 <bt_att_recv+0x6e>
}
   30b5e:	2000      	movs	r0, #0
   30b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = BT_ATT_ERR_INVALID_PDU;
   30b64:	2304      	movs	r3, #4
   30b66:	e7c7      	b.n	30af8 <bt_att_recv+0x84>
   30b68:	00052788 	.word	0x00052788

00030b6c <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   30b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   30b6e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   30b70:	6803      	ldr	r3, [r0, #0]
   30b72:	460d      	mov	r5, r1
   30b74:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   30b76:	b087      	sub	sp, #28
   30b78:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   30b7a:	bf18      	it	ne
   30b7c:	2101      	movne	r1, #1
   30b7e:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   30b80:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   30b82:	f01e f891 	bl	4eca8 <bt_gatt_change_aware>
   30b86:	2800      	cmp	r0, #0
   30b88:	d042      	beq.n	30c10 <att_write_rsp.constprop.0+0xa4>
	if (!handle) {
   30b8a:	2e00      	cmp	r6, #0
   30b8c:	d042      	beq.n	30c14 <att_write_rsp.constprop.0+0xa8>
	(void)memset(&data, 0, sizeof(data));
   30b8e:	2218      	movs	r2, #24
   30b90:	2100      	movs	r1, #0
   30b92:	4668      	mov	r0, sp
   30b94:	f01b f86b 	bl	4bc6e <memset>
	if (rsp) {
   30b98:	bb47      	cbnz	r7, 30bec <att_write_rsp.constprop.0+0x80>
	data.conn = chan->att->conn;
   30b9a:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   30b9c:	4a1e      	ldr	r2, [pc, #120]	; (30c18 <att_write_rsp.constprop.0+0xac>)
	data.conn = chan->att->conn;
   30b9e:	681b      	ldr	r3, [r3, #0]
   30ba0:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   30ba2:	2300      	movs	r3, #0
   30ba4:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   30ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   30baa:	9303      	str	r3, [sp, #12]
	data.len = len;
   30bac:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   30bb0:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   30bb4:	2301      	movs	r3, #1
   30bb6:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   30bba:	4631      	mov	r1, r6
   30bbc:	466b      	mov	r3, sp
   30bbe:	4630      	mov	r0, r6
	data.req = req;
   30bc0:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   30bc4:	f01c fbfe 	bl	4d3c4 <bt_gatt_foreach_attr>
	if (data.err) {
   30bc8:	f89d 3014 	ldrb.w	r3, [sp, #20]
   30bcc:	b1c3      	cbz	r3, 30c00 <att_write_rsp.constprop.0+0x94>
		if (rsp) {
   30bce:	b157      	cbz	r7, 30be6 <att_write_rsp.constprop.0+0x7a>
			net_buf_unref(data.buf);
   30bd0:	9801      	ldr	r0, [sp, #4]
   30bd2:	f012 febb 	bl	4394c <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   30bd6:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   30bda:	b125      	cbz	r5, 30be6 <att_write_rsp.constprop.0+0x7a>
   30bdc:	4632      	mov	r2, r6
   30bde:	4629      	mov	r1, r5
   30be0:	4620      	mov	r0, r4
   30be2:	f7ff ff27 	bl	30a34 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   30be6:	2000      	movs	r0, #0
}
   30be8:	b007      	add	sp, #28
   30bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   30bec:	2200      	movs	r2, #0
   30bee:	4639      	mov	r1, r7
   30bf0:	4620      	mov	r0, r4
   30bf2:	f01c fea5 	bl	4d940 <bt_att_chan_create_pdu>
   30bf6:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   30bf8:	2800      	cmp	r0, #0
   30bfa:	d1ce      	bne.n	30b9a <att_write_rsp.constprop.0+0x2e>
			return BT_ATT_ERR_UNLIKELY;
   30bfc:	200e      	movs	r0, #14
   30bfe:	e7f3      	b.n	30be8 <att_write_rsp.constprop.0+0x7c>
	if (data.buf) {
   30c00:	9901      	ldr	r1, [sp, #4]
   30c02:	2900      	cmp	r1, #0
   30c04:	d0ef      	beq.n	30be6 <att_write_rsp.constprop.0+0x7a>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30c06:	4a05      	ldr	r2, [pc, #20]	; (30c1c <att_write_rsp.constprop.0+0xb0>)
   30c08:	4620      	mov	r0, r4
   30c0a:	f01c fda2 	bl	4d752 <bt_att_chan_send_rsp>
   30c0e:	e7ea      	b.n	30be6 <att_write_rsp.constprop.0+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   30c10:	2012      	movs	r0, #18
   30c12:	e7e9      	b.n	30be8 <att_write_rsp.constprop.0+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
   30c14:	2001      	movs	r0, #1
   30c16:	e7e7      	b.n	30be8 <att_write_rsp.constprop.0+0x7c>
   30c18:	0004d365 	.word	0x0004d365
   30c1c:	0004d7a3 	.word	0x0004d7a3

00030c20 <att_read_group_req>:
{
   30c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   30c24:	898e      	ldrh	r6, [r1, #12]
   30c26:	3e04      	subs	r6, #4
   30c28:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   30c2a:	2e02      	cmp	r6, #2
{
   30c2c:	4604      	mov	r4, r0
   30c2e:	b08c      	sub	sp, #48	; 0x30
   30c30:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   30c32:	d001      	beq.n	30c38 <att_read_group_req+0x18>
   30c34:	2e10      	cmp	r6, #16
   30c36:	d166      	bne.n	30d06 <att_read_group_req+0xe6>
   30c38:	2104      	movs	r1, #4
   30c3a:	3008      	adds	r0, #8
   30c3c:	f01f f81e 	bl	4fc7c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   30c40:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   30c44:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   30c46:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   30c48:	1d01      	adds	r1, r0, #4
   30c4a:	4632      	mov	r2, r6
   30c4c:	4640      	mov	r0, r8
   30c4e:	f01b f91f 	bl	4be90 <bt_uuid_create>
   30c52:	2800      	cmp	r0, #0
   30c54:	d059      	beq.n	30d0a <att_read_group_req+0xea>
	if (!start || !end) {
   30c56:	2d00      	cmp	r5, #0
   30c58:	d035      	beq.n	30cc6 <att_read_group_req+0xa6>
   30c5a:	2600      	movs	r6, #0
   30c5c:	b397      	cbz	r7, 30cc4 <att_read_group_req+0xa4>
	if (start > end) {
   30c5e:	42bd      	cmp	r5, r7
   30c60:	d831      	bhi.n	30cc6 <att_read_group_req+0xa6>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   30c62:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   30c66:	a901      	add	r1, sp, #4
   30c68:	4640      	mov	r0, r8
   30c6a:	f88d 6004 	strb.w	r6, [sp, #4]
   30c6e:	f8ad 3006 	strh.w	r3, [sp, #6]
   30c72:	f01b f8df 	bl	4be34 <bt_uuid_cmp>
   30c76:	bb50      	cbnz	r0, 30cce <att_read_group_req+0xae>
	struct bt_conn *conn = chan->chan.chan.conn;
   30c78:	68a6      	ldr	r6, [r4, #8]
	(void)memset(&data, 0, sizeof(data));
   30c7a:	2214      	movs	r2, #20
   30c7c:	2100      	movs	r1, #0
   30c7e:	a807      	add	r0, sp, #28
   30c80:	f01a fff5 	bl	4bc6e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   30c84:	2201      	movs	r2, #1
   30c86:	2111      	movs	r1, #17
   30c88:	4630      	mov	r0, r6
   30c8a:	f01c fea4 	bl	4d9d6 <bt_att_create_pdu>
   30c8e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   30c90:	2800      	cmp	r0, #0
   30c92:	d03a      	beq.n	30d0a <att_read_group_req+0xea>
	return net_buf_simple_add(&buf->b, len);
   30c94:	2101      	movs	r1, #1
   30c96:	3008      	adds	r0, #8
	data.uuid = uuid;
   30c98:	e9cd 4807 	strd	r4, r8, [sp, #28]
   30c9c:	f01e ffbd 	bl	4fc1a <net_buf_simple_add>
	data.rsp->len = 0U;
   30ca0:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   30ca2:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   30ca4:	4a1a      	ldr	r2, [pc, #104]	; (30d10 <att_read_group_req+0xf0>)
	data.rsp->len = 0U;
   30ca6:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   30ca8:	4639      	mov	r1, r7
	data.group = NULL;
   30caa:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   30cac:	4628      	mov	r0, r5
   30cae:	ab07      	add	r3, sp, #28
   30cb0:	f01c fb88 	bl	4d3c4 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   30cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30cb6:	781b      	ldrb	r3, [r3, #0]
   30cb8:	b9fb      	cbnz	r3, 30cfa <att_read_group_req+0xda>
		net_buf_unref(data.buf);
   30cba:	9809      	ldr	r0, [sp, #36]	; 0x24
   30cbc:	f012 fe46 	bl	4394c <net_buf_unref>
	if (!req) {
   30cc0:	230a      	movs	r3, #10
   30cc2:	e001      	b.n	30cc8 <att_read_group_req+0xa8>
			*err = 0U;
   30cc4:	463d      	mov	r5, r7
	if (!req) {
   30cc6:	2301      	movs	r3, #1
   30cc8:	462a      	mov	r2, r5
   30cca:	2110      	movs	r1, #16
   30ccc:	e00e      	b.n	30cec <att_read_group_req+0xcc>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   30cce:	f642 0301 	movw	r3, #10241	; 0x2801
   30cd2:	a907      	add	r1, sp, #28
   30cd4:	4640      	mov	r0, r8
   30cd6:	f88d 601c 	strb.w	r6, [sp, #28]
   30cda:	f8ad 301e 	strh.w	r3, [sp, #30]
   30cde:	f01b f8a9 	bl	4be34 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   30ce2:	2800      	cmp	r0, #0
   30ce4:	d0c8      	beq.n	30c78 <att_read_group_req+0x58>
	if (!req) {
   30ce6:	2310      	movs	r3, #16
   30ce8:	462a      	mov	r2, r5
   30cea:	4619      	mov	r1, r3
   30cec:	4620      	mov	r0, r4
   30cee:	f7ff fea1 	bl	30a34 <send_err_rsp.part.0>
		return 0;
   30cf2:	2000      	movs	r0, #0
}
   30cf4:	b00c      	add	sp, #48	; 0x30
   30cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30cfa:	4a06      	ldr	r2, [pc, #24]	; (30d14 <att_read_group_req+0xf4>)
   30cfc:	9909      	ldr	r1, [sp, #36]	; 0x24
   30cfe:	4620      	mov	r0, r4
   30d00:	f01c fd27 	bl	4d752 <bt_att_chan_send_rsp>
	return 0;
   30d04:	e7f5      	b.n	30cf2 <att_read_group_req+0xd2>
		return BT_ATT_ERR_INVALID_PDU;
   30d06:	2004      	movs	r0, #4
   30d08:	e7f4      	b.n	30cf4 <att_read_group_req+0xd4>
		return BT_ATT_ERR_UNLIKELY;
   30d0a:	200e      	movs	r0, #14
   30d0c:	e7f2      	b.n	30cf4 <att_read_group_req+0xd4>
   30d0e:	bf00      	nop
   30d10:	00030781 	.word	0x00030781
   30d14:	0004d7a3 	.word	0x0004d7a3

00030d18 <att_read_mult_req>:
{
   30d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   30d1c:	6886      	ldr	r6, [r0, #8]
{
   30d1e:	b085      	sub	sp, #20
   30d20:	4604      	mov	r4, r0
   30d22:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   30d24:	4630      	mov	r0, r6
   30d26:	2101      	movs	r1, #1
   30d28:	f01d ffbe 	bl	4eca8 <bt_gatt_change_aware>
   30d2c:	2800      	cmp	r0, #0
   30d2e:	d038      	beq.n	30da2 <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   30d30:	2210      	movs	r2, #16
   30d32:	2100      	movs	r1, #0
   30d34:	4668      	mov	r0, sp
   30d36:	f01a ff9a 	bl	4bc6e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   30d3a:	2200      	movs	r2, #0
   30d3c:	210f      	movs	r1, #15
   30d3e:	4630      	mov	r0, r6
   30d40:	f01c fe49 	bl	4d9d6 <bt_att_create_pdu>
   30d44:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   30d46:	b370      	cbz	r0, 30da6 <att_read_mult_req+0x8e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   30d48:	f8df 9060 	ldr.w	r9, [pc, #96]	; 30dac <att_read_mult_req+0x94>
	data.chan = chan;
   30d4c:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   30d4e:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   30d52:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   30d56:	89ab      	ldrh	r3, [r5, #12]
   30d58:	2b01      	cmp	r3, #1
   30d5a:	d805      	bhi.n	30d68 <att_read_mult_req+0x50>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30d5c:	4a14      	ldr	r2, [pc, #80]	; (30db0 <att_read_mult_req+0x98>)
   30d5e:	9902      	ldr	r1, [sp, #8]
   30d60:	4620      	mov	r0, r4
   30d62:	f01c fcf6 	bl	4d752 <bt_att_chan_send_rsp>
	return 0;
   30d66:	e018      	b.n	30d9a <att_read_mult_req+0x82>
   30d68:	4638      	mov	r0, r7
   30d6a:	f01e ff97 	bl	4fc9c <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   30d6e:	466b      	mov	r3, sp
   30d70:	464a      	mov	r2, r9
   30d72:	4601      	mov	r1, r0
   30d74:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   30d76:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   30d7a:	f01c fb23 	bl	4d3c4 <bt_gatt_foreach_attr>
		if (data.err) {
   30d7e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   30d82:	2b00      	cmp	r3, #0
   30d84:	d0e7      	beq.n	30d56 <att_read_mult_req+0x3e>
			net_buf_unref(data.buf);
   30d86:	9802      	ldr	r0, [sp, #8]
   30d88:	f012 fde0 	bl	4394c <net_buf_unref>
	if (!req) {
   30d8c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   30d90:	4632      	mov	r2, r6
   30d92:	210e      	movs	r1, #14
   30d94:	4620      	mov	r0, r4
   30d96:	f7ff fe4d 	bl	30a34 <send_err_rsp.part.0>
			return 0;
   30d9a:	2000      	movs	r0, #0
}
   30d9c:	b005      	add	sp, #20
   30d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   30da2:	2012      	movs	r0, #18
   30da4:	e7fa      	b.n	30d9c <att_read_mult_req+0x84>
		return BT_ATT_ERR_UNLIKELY;
   30da6:	200e      	movs	r0, #14
   30da8:	e7f8      	b.n	30d9c <att_read_mult_req+0x84>
   30daa:	bf00      	nop
   30dac:	0004d7db 	.word	0x0004d7db
   30db0:	0004d7a3 	.word	0x0004d7a3

00030db4 <att_read_rsp>:
{
   30db4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   30db8:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   30dbc:	4604      	mov	r4, r0
   30dbe:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   30dc0:	4640      	mov	r0, r8
   30dc2:	2101      	movs	r1, #1
{
   30dc4:	4617      	mov	r7, r2
   30dc6:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   30dc8:	f01d ff6e 	bl	4eca8 <bt_gatt_change_aware>
   30dcc:	b388      	cbz	r0, 30e32 <att_read_rsp+0x7e>
	if (!handle) {
   30dce:	b395      	cbz	r5, 30e36 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   30dd0:	2210      	movs	r2, #16
   30dd2:	2100      	movs	r1, #0
   30dd4:	4668      	mov	r0, sp
   30dd6:	f01a ff4a 	bl	4bc6e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   30dda:	2200      	movs	r2, #0
   30ddc:	4639      	mov	r1, r7
   30dde:	4640      	mov	r0, r8
   30de0:	f01c fdf9 	bl	4d9d6 <bt_att_create_pdu>
   30de4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   30de6:	b340      	cbz	r0, 30e3a <att_read_rsp+0x86>
	data.offset = offset;
   30de8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   30dec:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   30df0:	2301      	movs	r3, #1
   30df2:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   30df6:	4a12      	ldr	r2, [pc, #72]	; (30e40 <att_read_rsp+0x8c>)
	data.chan = chan;
   30df8:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   30dfa:	466b      	mov	r3, sp
   30dfc:	4629      	mov	r1, r5
   30dfe:	4628      	mov	r0, r5
   30e00:	f01c fae0 	bl	4d3c4 <bt_gatt_foreach_attr>
	if (data.err) {
   30e04:	f89d 300c 	ldrb.w	r3, [sp, #12]
   30e08:	b16b      	cbz	r3, 30e26 <att_read_rsp+0x72>
		net_buf_unref(data.buf);
   30e0a:	9802      	ldr	r0, [sp, #8]
   30e0c:	f012 fd9e 	bl	4394c <net_buf_unref>
	if (!req) {
   30e10:	f89d 300c 	ldrb.w	r3, [sp, #12]
   30e14:	462a      	mov	r2, r5
   30e16:	4631      	mov	r1, r6
   30e18:	4620      	mov	r0, r4
   30e1a:	f7ff fe0b 	bl	30a34 <send_err_rsp.part.0>
		return 0;
   30e1e:	2000      	movs	r0, #0
}
   30e20:	b004      	add	sp, #16
   30e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30e26:	4a07      	ldr	r2, [pc, #28]	; (30e44 <att_read_rsp+0x90>)
   30e28:	9902      	ldr	r1, [sp, #8]
   30e2a:	4620      	mov	r0, r4
   30e2c:	f01c fc91 	bl	4d752 <bt_att_chan_send_rsp>
	return 0;
   30e30:	e7f5      	b.n	30e1e <att_read_rsp+0x6a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   30e32:	2012      	movs	r0, #18
   30e34:	e7f4      	b.n	30e20 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   30e36:	2001      	movs	r0, #1
   30e38:	e7f2      	b.n	30e20 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   30e3a:	200e      	movs	r0, #14
   30e3c:	e7f0      	b.n	30e20 <att_read_rsp+0x6c>
   30e3e:	bf00      	nop
   30e40:	0004d7db 	.word	0x0004d7db
   30e44:	0004d7a3 	.word	0x0004d7a3

00030e48 <att_read_type_req>:
{
   30e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   30e4c:	898d      	ldrh	r5, [r1, #12]
   30e4e:	3d04      	subs	r5, #4
   30e50:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   30e52:	2d02      	cmp	r5, #2
{
   30e54:	4604      	mov	r4, r0
   30e56:	b08c      	sub	sp, #48	; 0x30
   30e58:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   30e5a:	d001      	beq.n	30e60 <att_read_type_req+0x18>
   30e5c:	2d10      	cmp	r5, #16
   30e5e:	d14d      	bne.n	30efc <att_read_type_req+0xb4>
	return net_buf_simple_pull_mem(&buf->b, len);
   30e60:	2104      	movs	r1, #4
   30e62:	3008      	adds	r0, #8
   30e64:	f01e ff0a 	bl	4fc7c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   30e68:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   30e6c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   30e6e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   30e70:	1d01      	adds	r1, r0, #4
   30e72:	462a      	mov	r2, r5
   30e74:	4640      	mov	r0, r8
   30e76:	f01b f80b 	bl	4be90 <bt_uuid_create>
   30e7a:	b188      	cbz	r0, 30ea0 <att_read_type_req+0x58>
	if (!start || !end) {
   30e7c:	b19e      	cbz	r6, 30ea6 <att_read_type_req+0x5e>
   30e7e:	b18f      	cbz	r7, 30ea4 <att_read_type_req+0x5c>
	if (start > end) {
   30e80:	42b7      	cmp	r7, r6
   30e82:	d310      	bcc.n	30ea6 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   30e84:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   30e86:	68a5      	ldr	r5, [r4, #8]
	(void)memset(&data, 0, sizeof(data));
   30e88:	2100      	movs	r1, #0
   30e8a:	eb0d 0002 	add.w	r0, sp, r2
   30e8e:	f01a feee 	bl	4bc6e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   30e92:	2201      	movs	r2, #1
   30e94:	2109      	movs	r1, #9
   30e96:	4628      	mov	r0, r5
   30e98:	f01c fd9d 	bl	4d9d6 <bt_att_create_pdu>
   30e9c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   30e9e:	b960      	cbnz	r0, 30eba <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   30ea0:	200e      	movs	r0, #14
   30ea2:	e007      	b.n	30eb4 <att_read_type_req+0x6c>
			*err = 0U;
   30ea4:	463e      	mov	r6, r7
	if (!req) {
   30ea6:	2301      	movs	r3, #1
   30ea8:	4632      	mov	r2, r6
   30eaa:	2108      	movs	r1, #8
   30eac:	4620      	mov	r0, r4
   30eae:	f7ff fdc1 	bl	30a34 <send_err_rsp.part.0>
		return 0;
   30eb2:	2000      	movs	r0, #0
}
   30eb4:	b00c      	add	sp, #48	; 0x30
   30eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   30eba:	2101      	movs	r1, #1
   30ebc:	3008      	adds	r0, #8
	data.uuid = uuid;
   30ebe:	e9cd 4806 	strd	r4, r8, [sp, #24]
   30ec2:	f01e feaa 	bl	4fc1a <net_buf_simple_add>
	data.rsp->len = 0U;
   30ec6:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   30ec8:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   30eca:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   30ecc:	230a      	movs	r3, #10
   30ece:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   30ed2:	4a0b      	ldr	r2, [pc, #44]	; (30f00 <att_read_type_req+0xb8>)
   30ed4:	ab06      	add	r3, sp, #24
   30ed6:	4639      	mov	r1, r7
   30ed8:	4630      	mov	r0, r6
   30eda:	f01c fa73 	bl	4d3c4 <bt_gatt_foreach_attr>
	if (data.err) {
   30ede:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   30ee2:	b12b      	cbz	r3, 30ef0 <att_read_type_req+0xa8>
		net_buf_unref(data.buf);
   30ee4:	9808      	ldr	r0, [sp, #32]
   30ee6:	f012 fd31 	bl	4394c <net_buf_unref>
	if (!req) {
   30eea:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   30eee:	e7db      	b.n	30ea8 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30ef0:	4a04      	ldr	r2, [pc, #16]	; (30f04 <att_read_type_req+0xbc>)
   30ef2:	9908      	ldr	r1, [sp, #32]
   30ef4:	4620      	mov	r0, r4
   30ef6:	f01c fc2c 	bl	4d752 <bt_att_chan_send_rsp>
	return 0;
   30efa:	e7da      	b.n	30eb2 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   30efc:	2004      	movs	r0, #4
   30efe:	e7d9      	b.n	30eb4 <att_read_type_req+0x6c>
   30f00:	000308f1 	.word	0x000308f1
   30f04:	0004d7a3 	.word	0x0004d7a3

00030f08 <att_find_type_req>:
{
   30f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30f0c:	460f      	mov	r7, r1
   30f0e:	b086      	sub	sp, #24
   30f10:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   30f12:	2106      	movs	r1, #6
   30f14:	f107 0008 	add.w	r0, r7, #8
   30f18:	f01e feb0 	bl	4fc7c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   30f1c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   30f1e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   30f22:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   30f24:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (!start || !end) {
   30f28:	b1c5      	cbz	r5, 30f5c <att_find_type_req+0x54>
   30f2a:	2300      	movs	r3, #0
   30f2c:	f1b8 0f00 	cmp.w	r8, #0
   30f30:	d013      	beq.n	30f5a <att_find_type_req+0x52>
	if (start > end) {
   30f32:	4545      	cmp	r5, r8
   30f34:	d812      	bhi.n	30f5c <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   30f36:	f88d 3000 	strb.w	r3, [sp]
   30f3a:	f88d 3004 	strb.w	r3, [sp, #4]
   30f3e:	a901      	add	r1, sp, #4
   30f40:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   30f44:	4668      	mov	r0, sp
   30f46:	f8ad 2002 	strh.w	r2, [sp, #2]
   30f4a:	f8ad 3006 	strh.w	r3, [sp, #6]
   30f4e:	f01a ff71 	bl	4be34 <bt_uuid_cmp>
   30f52:	4606      	mov	r6, r0
   30f54:	b160      	cbz	r0, 30f70 <att_find_type_req+0x68>
	if (!req) {
   30f56:	230a      	movs	r3, #10
   30f58:	e001      	b.n	30f5e <att_find_type_req+0x56>
			*err = 0U;
   30f5a:	4645      	mov	r5, r8
	if (!req) {
   30f5c:	2301      	movs	r3, #1
   30f5e:	462a      	mov	r2, r5
   30f60:	2106      	movs	r1, #6
   30f62:	4620      	mov	r0, r4
   30f64:	f7ff fd66 	bl	30a34 <send_err_rsp.part.0>
		return 0;
   30f68:	2000      	movs	r0, #0
}
   30f6a:	b006      	add	sp, #24
   30f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   30f70:	f8d4 a008 	ldr.w	sl, [r4, #8]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   30f74:	7b3f      	ldrb	r7, [r7, #12]
	(void)memset(&data, 0, sizeof(data));
   30f76:	4601      	mov	r1, r0
   30f78:	2214      	movs	r2, #20
   30f7a:	a801      	add	r0, sp, #4
   30f7c:	f01a fe77 	bl	4bc6e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   30f80:	4632      	mov	r2, r6
   30f82:	2107      	movs	r1, #7
   30f84:	4650      	mov	r0, sl
   30f86:	f01c fd26 	bl	4d9d6 <bt_att_create_pdu>
   30f8a:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   30f8c:	b1e0      	cbz	r0, 30fc8 <att_find_type_req+0xc0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   30f8e:	230a      	movs	r3, #10
   30f90:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   30f94:	4a0d      	ldr	r2, [pc, #52]	; (30fcc <att_find_type_req+0xc4>)
	data.chan = chan;
   30f96:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   30f98:	ab01      	add	r3, sp, #4
   30f9a:	4641      	mov	r1, r8
   30f9c:	4628      	mov	r0, r5
	data.value = value;
   30f9e:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   30fa2:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   30fa6:	f01c fa0d 	bl	4d3c4 <bt_gatt_foreach_attr>
	if (data.err) {
   30faa:	f89d 3015 	ldrb.w	r3, [sp, #21]
   30fae:	b12b      	cbz	r3, 30fbc <att_find_type_req+0xb4>
		net_buf_unref(data.buf);
   30fb0:	9802      	ldr	r0, [sp, #8]
   30fb2:	f012 fccb 	bl	4394c <net_buf_unref>
	if (!req) {
   30fb6:	f89d 3015 	ldrb.w	r3, [sp, #21]
   30fba:	e7d0      	b.n	30f5e <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30fbc:	4a04      	ldr	r2, [pc, #16]	; (30fd0 <att_find_type_req+0xc8>)
   30fbe:	9902      	ldr	r1, [sp, #8]
   30fc0:	4620      	mov	r0, r4
   30fc2:	f01c fbc6 	bl	4d752 <bt_att_chan_send_rsp>
	return 0;
   30fc6:	e7cf      	b.n	30f68 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   30fc8:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   30fca:	e7ce      	b.n	30f6a <att_find_type_req+0x62>
   30fcc:	0004d3db 	.word	0x0004d3db
   30fd0:	0004d7a3 	.word	0x0004d7a3

00030fd4 <att_find_info_req>:
{
   30fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   30fd6:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   30fd8:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   30fda:	885e      	ldrh	r6, [r3, #2]
{
   30fdc:	b085      	sub	sp, #20
   30fde:	4604      	mov	r4, r0
	if (!start || !end) {
   30fe0:	b195      	cbz	r5, 31008 <att_find_info_req+0x34>
   30fe2:	b186      	cbz	r6, 31006 <att_find_info_req+0x32>
	if (start > end) {
   30fe4:	42ae      	cmp	r6, r5
   30fe6:	d30f      	bcc.n	31008 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   30fe8:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   30fea:	2210      	movs	r2, #16
   30fec:	2100      	movs	r1, #0
   30fee:	4668      	mov	r0, sp
   30ff0:	f01a fe3d 	bl	4bc6e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   30ff4:	2200      	movs	r2, #0
   30ff6:	2105      	movs	r1, #5
   30ff8:	4638      	mov	r0, r7
   30ffa:	f01c fcec 	bl	4d9d6 <bt_att_create_pdu>
   30ffe:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   31000:	b958      	cbnz	r0, 3101a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   31002:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   31004:	e007      	b.n	31016 <att_find_info_req+0x42>
			*err = 0U;
   31006:	4635      	mov	r5, r6
	if (!req) {
   31008:	2301      	movs	r3, #1
   3100a:	462a      	mov	r2, r5
   3100c:	2104      	movs	r1, #4
   3100e:	4620      	mov	r0, r4
   31010:	f7ff fd10 	bl	30a34 <send_err_rsp.part.0>
		return 0;
   31014:	2000      	movs	r0, #0
}
   31016:	b005      	add	sp, #20
   31018:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   3101a:	466b      	mov	r3, sp
   3101c:	4a09      	ldr	r2, [pc, #36]	; (31044 <att_find_info_req+0x70>)
	data.chan = chan;
   3101e:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   31020:	4631      	mov	r1, r6
   31022:	4628      	mov	r0, r5
   31024:	f01c f9ce 	bl	4d3c4 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   31028:	9b02      	ldr	r3, [sp, #8]
   3102a:	b923      	cbnz	r3, 31036 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   3102c:	9801      	ldr	r0, [sp, #4]
   3102e:	f012 fc8d 	bl	4394c <net_buf_unref>
	if (!req) {
   31032:	230a      	movs	r3, #10
   31034:	e7e9      	b.n	3100a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   31036:	4a04      	ldr	r2, [pc, #16]	; (31048 <att_find_info_req+0x74>)
   31038:	9901      	ldr	r1, [sp, #4]
   3103a:	4620      	mov	r0, r4
   3103c:	f01c fb89 	bl	4d752 <bt_att_chan_send_rsp>
	return 0;
   31040:	e7e8      	b.n	31014 <att_find_info_req+0x40>
   31042:	bf00      	nop
   31044:	0004d503 	.word	0x0004d503
   31048:	0004d7a3 	.word	0x0004d7a3

0003104c <att_mtu_req>:
{
   3104c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   3104e:	6803      	ldr	r3, [r0, #0]
{
   31050:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   31052:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   31054:	f3bf 8f5b 	dmb	ish
   31058:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   3105c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   31060:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   31064:	071b      	lsls	r3, r3, #28
   31066:	d421      	bmi.n	310ac <att_mtu_req+0x60>
	mtu_client = sys_le16_to_cpu(req->mtu);
   31068:	688b      	ldr	r3, [r1, #8]
   3106a:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   3106c:	2e16      	cmp	r6, #22
   3106e:	d91f      	bls.n	310b0 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   31070:	2202      	movs	r2, #2
   31072:	2103      	movs	r1, #3
   31074:	f01c fcaf 	bl	4d9d6 <bt_att_create_pdu>
	if (!pdu) {
   31078:	4607      	mov	r7, r0
   3107a:	b1d8      	cbz	r0, 310b4 <att_mtu_req+0x68>
	return net_buf_simple_add(&buf->b, len);
   3107c:	2102      	movs	r1, #2
   3107e:	3008      	adds	r0, #8
   31080:	f01e fdcb 	bl	4fc1a <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   31084:	2341      	movs	r3, #65	; 0x41
   31086:	7003      	strb	r3, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   31088:	4a0b      	ldr	r2, [pc, #44]	; (310b8 <att_mtu_req+0x6c>)
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   3108a:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   3108c:	4639      	mov	r1, r7
   3108e:	4620      	mov	r0, r4
   31090:	f01c fb5f 	bl	4d752 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   31094:	2e41      	cmp	r6, #65	; 0x41
   31096:	bf28      	it	cs
   31098:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   3109a:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   3109c:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   310a0:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   310a4:	f01c f925 	bl	4d2f2 <att_chan_mtu_updated>
	return 0;
   310a8:	4628      	mov	r0, r5
}
   310aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   310ac:	2006      	movs	r0, #6
   310ae:	e7fc      	b.n	310aa <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   310b0:	2004      	movs	r0, #4
   310b2:	e7fa      	b.n	310aa <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   310b4:	200e      	movs	r0, #14
   310b6:	e7f8      	b.n	310aa <att_mtu_req+0x5e>
   310b8:	0004d7a3 	.word	0x0004d7a3

000310bc <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   310bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   310be:	2300      	movs	r3, #0
{
   310c0:	4605      	mov	r5, r0
   310c2:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   310c4:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   310c6:	f017 fcdd 	bl	48a84 <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
   310ca:	4b0b      	ldr	r3, [pc, #44]	; (310f8 <bt_att_req_alloc+0x3c>)
   310cc:	681b      	ldr	r3, [r3, #0]
   310ce:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   310d0:	bf04      	itt	eq
   310d2:	2500      	moveq	r5, #0
   310d4:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   310d6:	a901      	add	r1, sp, #4
   310d8:	4808      	ldr	r0, [pc, #32]	; (310fc <bt_att_req_alloc+0x40>)
   310da:	462a      	mov	r2, r5
   310dc:	4623      	mov	r3, r4
   310de:	f016 fd27 	bl	47b30 <k_mem_slab_alloc>
   310e2:	4601      	mov	r1, r0
   310e4:	b930      	cbnz	r0, 310f4 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   310e6:	9801      	ldr	r0, [sp, #4]
   310e8:	221c      	movs	r2, #28
   310ea:	f01a fdc0 	bl	4bc6e <memset>

	return req;
   310ee:	9801      	ldr	r0, [sp, #4]
}
   310f0:	b003      	add	sp, #12
   310f2:	bd30      	pop	{r4, r5, pc}
		return NULL;
   310f4:	2000      	movs	r0, #0
   310f6:	e7fb      	b.n	310f0 <bt_att_req_alloc+0x34>
   310f8:	20004598 	.word	0x20004598
   310fc:	20001114 	.word	0x20001114

00031100 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   31100:	b507      	push	{r0, r1, r2, lr}
   31102:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   31104:	6880      	ldr	r0, [r0, #8]
   31106:	b120      	cbz	r0, 31112 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   31108:	f012 fc20 	bl	4394c <net_buf_unref>
		req->buf = NULL;
   3110c:	9b01      	ldr	r3, [sp, #4]
   3110e:	2200      	movs	r2, #0
   31110:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   31112:	4803      	ldr	r0, [pc, #12]	; (31120 <bt_att_req_free+0x20>)
   31114:	a901      	add	r1, sp, #4
   31116:	f01f fbb0 	bl	5087a <k_mem_slab_free>
}
   3111a:	b003      	add	sp, #12
   3111c:	f85d fb04 	ldr.w	pc, [sp], #4
   31120:	20001114 	.word	0x20001114

00031124 <att_handle_rsp>:
{
   31124:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   31128:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   3112a:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   3112e:	460e      	mov	r6, r1
   31130:	4617      	mov	r7, r2
   31132:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   31134:	f01f fd81 	bl	50c3a <k_work_cancel_delayable>
	if (!chan->req) {
   31138:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   3113c:	b930      	cbnz	r0, 3114c <att_handle_rsp+0x28>
	att_req_send_process(chan->att);
   3113e:	6820      	ldr	r0, [r4, #0]
   31140:	f01c fbab 	bl	4d89a <att_req_send_process>
}
   31144:	2000      	movs	r0, #0
   31146:	b002      	add	sp, #8
   31148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   3114c:	4b10      	ldr	r3, [pc, #64]	; (31190 <att_handle_rsp+0x6c>)
   3114e:	4298      	cmp	r0, r3
   31150:	f04f 0800 	mov.w	r8, #0
   31154:	d102      	bne.n	3115c <att_handle_rsp+0x38>
		chan->req = NULL;
   31156:	f8c4 80f4 	str.w	r8, [r4, #244]	; 0xf4
   3115a:	e7f0      	b.n	3113e <att_handle_rsp+0x1a>
	func = chan->req->func;
   3115c:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   31160:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   31164:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   31168:	f7ff ffca 	bl	31100 <bt_att_req_free>
	att_req_send_process(chan->att);
   3116c:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   3116e:	f8c4 80f4 	str.w	r8, [r4, #244]	; 0xf4
	att_req_send_process(chan->att);
   31172:	f01c fb92 	bl	4d89a <att_req_send_process>
	if (func) {
   31176:	f1b9 0f00 	cmp.w	r9, #0
   3117a:	d0e3      	beq.n	31144 <att_handle_rsp+0x20>
		func(chan->att->conn, err, pdu, len, params);
   3117c:	6820      	ldr	r0, [r4, #0]
   3117e:	f8cd a000 	str.w	sl, [sp]
   31182:	6800      	ldr	r0, [r0, #0]
   31184:	463b      	mov	r3, r7
   31186:	4632      	mov	r2, r6
   31188:	4629      	mov	r1, r5
   3118a:	47c8      	blx	r9
   3118c:	e7da      	b.n	31144 <att_handle_rsp+0x20>
   3118e:	bf00      	nop
   31190:	20004608 	.word	0x20004608

00031194 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   31194:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
	rsp = (void *)buf->data;
   31198:	688a      	ldr	r2, [r1, #8]
{
   3119a:	b570      	push	{r4, r5, r6, lr}
   3119c:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
   3119e:	b30b      	cbz	r3, 311e4 <att_error_rsp+0x50>
   311a0:	4915      	ldr	r1, [pc, #84]	; (311f8 <att_error_rsp+0x64>)
   311a2:	428b      	cmp	r3, r1
   311a4:	d01e      	beq.n	311e4 <att_error_rsp+0x50>
	err = rsp->error;
   311a6:	78d5      	ldrb	r5, [r2, #3]
	if (!att_change_security(chan->chan.chan.conn, err)) {
   311a8:	6880      	ldr	r0, [r0, #8]
	switch (err) {
   311aa:	2d05      	cmp	r5, #5
   311ac:	d006      	beq.n	311bc <att_error_rsp+0x28>
   311ae:	2d0f      	cmp	r5, #15
   311b0:	d119      	bne.n	311e6 <att_error_rsp+0x52>
		if (conn->sec_level >= BT_SECURITY_L2)
   311b2:	7a43      	ldrb	r3, [r0, #9]
   311b4:	2b01      	cmp	r3, #1
   311b6:	d816      	bhi.n	311e6 <att_error_rsp+0x52>
		sec = BT_SECURITY_L2;
   311b8:	2102      	movs	r1, #2
   311ba:	e007      	b.n	311cc <att_error_rsp+0x38>
		if (conn->sec_level < BT_SECURITY_L2) {
   311bc:	7a43      	ldrb	r3, [r0, #9]
   311be:	2b01      	cmp	r3, #1
   311c0:	d9fa      	bls.n	311b8 <att_error_rsp+0x24>
		} else if (conn->sec_level < BT_SECURITY_L3) {
   311c2:	2b02      	cmp	r3, #2
   311c4:	d00c      	beq.n	311e0 <att_error_rsp+0x4c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
   311c6:	2b03      	cmp	r3, #3
   311c8:	d10d      	bne.n	311e6 <att_error_rsp+0x52>
			sec = BT_SECURITY_L4;
   311ca:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
   311cc:	f01b fdfd 	bl	4cdca <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
   311d0:	b948      	cbnz	r0, 311e6 <att_error_rsp+0x52>
		chan->req->retrying = true;
   311d2:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
   311d6:	7c13      	ldrb	r3, [r2, #16]
   311d8:	f043 0301 	orr.w	r3, r3, #1
   311dc:	7413      	strb	r3, [r2, #16]
}
   311de:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
   311e0:	2103      	movs	r1, #3
   311e2:	e7f3      	b.n	311cc <att_error_rsp+0x38>
		err = BT_ATT_ERR_UNLIKELY;
   311e4:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
   311e6:	2200      	movs	r2, #0
   311e8:	462b      	mov	r3, r5
   311ea:	4620      	mov	r0, r4
   311ec:	4611      	mov	r1, r2
}
   311ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
   311f2:	f7ff bf97 	b.w	31124 <att_handle_rsp>
   311f6:	bf00      	nop
   311f8:	20004608 	.word	0x20004608

000311fc <bt_att_disconnected>:
{
   311fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   311fe:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   31202:	b085      	sub	sp, #20
   31204:	4604      	mov	r4, r0
	if (!att_chan->att) {
   31206:	2d00      	cmp	r5, #0
   31208:	d04d      	beq.n	312a6 <bt_att_disconnected+0xaa>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   3120a:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   3120e:	f105 0024 	add.w	r0, r5, #36	; 0x24
   31212:	f01c faac 	bl	4d76e <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   31216:	f1a4 0608 	sub.w	r6, r4, #8
   3121a:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   3121e:	2200      	movs	r2, #0
   31220:	2300      	movs	r3, #0
   31222:	4638      	mov	r0, r7
   31224:	f01e fc96 	bl	4fb54 <net_buf_get>
   31228:	4602      	mov	r2, r0
   3122a:	bb18      	cbnz	r0, 31274 <bt_att_disconnected+0x78>
	if (chan->req) {
   3122c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   31230:	b123      	cbz	r3, 3123c <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   31232:	4601      	mov	r1, r0
   31234:	230e      	movs	r3, #14
   31236:	4630      	mov	r0, r6
   31238:	f7ff ff74 	bl	31124 <att_handle_rsp>
	chan->att = NULL;
   3123c:	2300      	movs	r3, #0
   3123e:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   31242:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   31244:	2b00      	cmp	r3, #0
   31246:	d12e      	bne.n	312a6 <bt_att_disconnected+0xaa>
	att_reset(att);
   31248:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   3124a:	9803      	ldr	r0, [sp, #12]
   3124c:	2200      	movs	r2, #0
   3124e:	2300      	movs	r3, #0
   31250:	300c      	adds	r0, #12
   31252:	f01e fc7f 	bl	4fb54 <net_buf_get>
   31256:	b980      	cbnz	r0, 3127a <bt_att_disconnected+0x7e>
	while (!sys_slist_is_empty(&att->reqs)) {
   31258:	9803      	ldr	r0, [sp, #12]
	return list->head;
   3125a:	6845      	ldr	r5, [r0, #4]
   3125c:	b985      	cbnz	r5, 31280 <bt_att_disconnected+0x84>
	att->conn = NULL;
   3125e:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   31260:	a903      	add	r1, sp, #12
   31262:	4812      	ldr	r0, [pc, #72]	; (312ac <bt_att_disconnected+0xb0>)
   31264:	f01f fb09 	bl	5087a <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   31268:	6820      	ldr	r0, [r4, #0]
}
   3126a:	b005      	add	sp, #20
   3126c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
   31270:	f001 bb4e 	b.w	32910 <bt_gatt_disconnected>
		net_buf_unref(buf);
   31274:	f012 fb6a 	bl	4394c <net_buf_unref>
   31278:	e7d1      	b.n	3121e <bt_att_disconnected+0x22>
		net_buf_unref(buf);
   3127a:	f012 fb67 	bl	4394c <net_buf_unref>
   3127e:	e7e4      	b.n	3124a <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   31280:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   31282:	686e      	ldr	r6, [r5, #4]
	return node->next;
   31284:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   31286:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   31288:	4295      	cmp	r5, r2
	list->tail = node;
   3128a:	bf08      	it	eq
   3128c:	6083      	streq	r3, [r0, #8]
   3128e:	b136      	cbz	r6, 3129e <bt_att_disconnected+0xa2>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   31290:	69ab      	ldr	r3, [r5, #24]
   31292:	9300      	str	r3, [sp, #0]
   31294:	2300      	movs	r3, #0
   31296:	6800      	ldr	r0, [r0, #0]
   31298:	461a      	mov	r2, r3
   3129a:	210e      	movs	r1, #14
   3129c:	47b0      	blx	r6
		bt_att_req_free(req);
   3129e:	4628      	mov	r0, r5
   312a0:	f7ff ff2e 	bl	31100 <bt_att_req_free>
   312a4:	e7d8      	b.n	31258 <bt_att_disconnected+0x5c>
}
   312a6:	b005      	add	sp, #20
   312a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   312aa:	bf00      	nop
   312ac:	200010c0 	.word	0x200010c0

000312b0 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   312b0:	b510      	push	{r4, lr}
   312b2:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   312b4:	b348      	cbz	r0, 3130a <bt_att_req_cancel+0x5a>
   312b6:	b341      	cbz	r1, 3130a <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
   312b8:	f01b ffec 	bl	4d294 <att_get>
	if (!att) {
   312bc:	b328      	cbz	r0, 3130a <bt_att_req_cancel+0x5a>
	return list->head;
   312be:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   312c0:	b1eb      	cbz	r3, 312fe <bt_att_req_cancel+0x4e>
   312c2:	f5a3 72a2 	sub.w	r2, r3, #324	; 0x144
	return node->next;
   312c6:	681b      	ldr	r3, [r3, #0]
   312c8:	b10b      	cbz	r3, 312ce <bt_att_req_cancel+0x1e>
   312ca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
	if (chan->req != req) {
   312ce:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
   312d2:	428c      	cmp	r4, r1
   312d4:	d00b      	beq.n	312ee <bt_att_req_cancel+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   312d6:	b193      	cbz	r3, 312fe <bt_att_req_cancel+0x4e>
   312d8:	461a      	mov	r2, r3
   312da:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   312de:	2b00      	cmp	r3, #0
   312e0:	d0f5      	beq.n	312ce <bt_att_req_cancel+0x1e>
	if (chan->req != req) {
   312e2:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
   312e6:	428c      	cmp	r4, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   312e8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
	if (chan->req != req) {
   312ec:	d1f4      	bne.n	312d8 <bt_att_req_cancel+0x28>
	chan->req = &cancel;
   312ee:	4b07      	ldr	r3, [pc, #28]	; (3130c <bt_att_req_cancel+0x5c>)
   312f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
	bt_att_req_free(req);
   312f4:	4620      	mov	r0, r4

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);

	bt_att_req_free(req);
}
   312f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   312fa:	f7ff bf01 	b.w	31100 <bt_att_req_free>
	sys_slist_find_and_remove(&att->reqs, &req->node);
   312fe:	3004      	adds	r0, #4
   31300:	4621      	mov	r1, r4
   31302:	f01c fa34 	bl	4d76e <sys_slist_find_and_remove.isra.0>
	bt_att_req_free(req);
   31306:	4620      	mov	r0, r4
   31308:	e7f5      	b.n	312f6 <bt_att_req_cancel+0x46>
}
   3130a:	bd10      	pop	{r4, pc}
   3130c:	20004608 	.word	0x20004608

00031310 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   31310:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   31312:	4904      	ldr	r1, [pc, #16]	; (31324 <db_hash_set+0x14>)
{
   31314:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   31316:	4618      	mov	r0, r3
   31318:	2210      	movs	r2, #16
   3131a:	47a0      	blx	r4

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   3131c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   31320:	bd10      	pop	{r4, pc}
   31322:	bf00      	nop
   31324:	20002568 	.word	0x20002568

00031328 <find_cf_cfg>:
{
   31328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3132a:	4d0f      	ldr	r5, [pc, #60]	; (31368 <find_cf_cfg+0x40>)
   3132c:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   3132e:	2600      	movs	r6, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   31330:	462f      	mov	r7, r5
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   31332:	1c6a      	adds	r2, r5, #1
		if (!conn) {
   31334:	b954      	cbnz	r4, 3134c <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   31336:	4669      	mov	r1, sp
   31338:	4610      	mov	r0, r2
   3133a:	9400      	str	r4, [sp, #0]
   3133c:	f8cd 4003 	str.w	r4, [sp, #3]
   31340:	f01c fd11 	bl	4dd66 <bt_addr_le_cmp>
   31344:	b940      	cbnz	r0, 31358 <find_cf_cfg+0x30>
}
   31346:	4638      	mov	r0, r7
   31348:	b003      	add	sp, #12
   3134a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   3134c:	7829      	ldrb	r1, [r5, #0]
   3134e:	4620      	mov	r0, r4
   31350:	f01b fd65 	bl	4ce1e <bt_conn_is_peer_addr_le>
   31354:	2800      	cmp	r0, #0
   31356:	d1f6      	bne.n	31346 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   31358:	3601      	adds	r6, #1
   3135a:	2e0c      	cmp	r6, #12
   3135c:	f105 0510 	add.w	r5, r5, #16
   31360:	d1e6      	bne.n	31330 <find_cf_cfg+0x8>
	return NULL;
   31362:	2700      	movs	r7, #0
   31364:	e7ef      	b.n	31346 <find_cf_cfg+0x1e>
   31366:	bf00      	nop
   31368:	200046b4 	.word	0x200046b4

0003136c <find_sc_cfg>:
{
   3136c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3136e:	4d0b      	ldr	r5, [pc, #44]	; (3139c <find_sc_cfg+0x30>)
   31370:	4606      	mov	r6, r0
   31372:	460f      	mov	r7, r1
   31374:	2400      	movs	r4, #0
		if (id == sc_cfg[i].id &&
   31376:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   3137a:	42b3      	cmp	r3, r6
   3137c:	d107      	bne.n	3138e <find_sc_cfg+0x22>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   3137e:	4639      	mov	r1, r7
   31380:	4628      	mov	r0, r5
   31382:	f01c fcf0 	bl	4dd66 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   31386:	b910      	cbnz	r0, 3138e <find_sc_cfg+0x22>
			return &sc_cfg[i];
   31388:	4805      	ldr	r0, [pc, #20]	; (313a0 <find_sc_cfg+0x34>)
   3138a:	4420      	add	r0, r4
}
   3138c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   3138e:	340c      	adds	r4, #12
   31390:	2c90      	cmp	r4, #144	; 0x90
   31392:	f105 050c 	add.w	r5, r5, #12
   31396:	d1ee      	bne.n	31376 <find_sc_cfg+0xa>
	return NULL;
   31398:	2000      	movs	r0, #0
   3139a:	e7f7      	b.n	3138c <find_sc_cfg+0x20>
   3139c:	2000721d 	.word	0x2000721d
   313a0:	2000721c 	.word	0x2000721c

000313a4 <gatt_sub_find>:
{
   313a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   313a6:	4d0f      	ldr	r5, [pc, #60]	; (313e4 <gatt_sub_find+0x40>)
   313a8:	4604      	mov	r4, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   313aa:	2600      	movs	r6, #0
		struct gatt_sub *sub = &subscriptions[i];
   313ac:	462f      	mov	r7, r5
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   313ae:	1c6a      	adds	r2, r5, #1
		if (!conn) {
   313b0:	b954      	cbnz	r4, 313c8 <gatt_sub_find+0x24>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   313b2:	4669      	mov	r1, sp
   313b4:	4610      	mov	r0, r2
   313b6:	9400      	str	r4, [sp, #0]
   313b8:	f8cd 4003 	str.w	r4, [sp, #3]
   313bc:	f01c fcd3 	bl	4dd66 <bt_addr_le_cmp>
   313c0:	b940      	cbnz	r0, 313d4 <gatt_sub_find+0x30>
}
   313c2:	4638      	mov	r0, r7
   313c4:	b003      	add	sp, #12
   313c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   313c8:	7829      	ldrb	r1, [r5, #0]
   313ca:	4620      	mov	r0, r4
   313cc:	f01b fd27 	bl	4ce1e <bt_conn_is_peer_addr_le>
   313d0:	2800      	cmp	r0, #0
   313d2:	d1f6      	bne.n	313c2 <gatt_sub_find+0x1e>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   313d4:	3601      	adds	r6, #1
   313d6:	2e0c      	cmp	r6, #12
   313d8:	f105 0510 	add.w	r5, r5, #16
   313dc:	d1e6      	bne.n	313ac <gatt_sub_find+0x8>
	return NULL;
   313de:	2700      	movs	r7, #0
   313e0:	e7ef      	b.n	313c2 <gatt_sub_find+0x1e>
   313e2:	bf00      	nop
   313e4:	20004784 	.word	0x20004784

000313e8 <find_cf_cfg_by_addr>:
{
   313e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   313ea:	4d0b      	ldr	r5, [pc, #44]	; (31418 <find_cf_cfg_by_addr+0x30>)
   313ec:	4606      	mov	r6, r0
   313ee:	460f      	mov	r7, r1
   313f0:	2400      	movs	r4, #0
			if (id == cf_cfg[i].id &&
   313f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   313f6:	42b3      	cmp	r3, r6
   313f8:	d107      	bne.n	3140a <find_cf_cfg_by_addr+0x22>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   313fa:	4629      	mov	r1, r5
   313fc:	4638      	mov	r0, r7
   313fe:	f01c fcb2 	bl	4dd66 <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   31402:	b910      	cbnz	r0, 3140a <find_cf_cfg_by_addr+0x22>
				return &cf_cfg[i];
   31404:	4805      	ldr	r0, [pc, #20]	; (3141c <find_cf_cfg_by_addr+0x34>)
   31406:	4420      	add	r0, r4
}
   31408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   3140a:	3410      	adds	r4, #16
   3140c:	2cc0      	cmp	r4, #192	; 0xc0
   3140e:	f105 0510 	add.w	r5, r5, #16
   31412:	d1ee      	bne.n	313f2 <find_cf_cfg_by_addr+0xa>
	return NULL;
   31414:	2000      	movs	r0, #0
   31416:	e7f7      	b.n	31408 <find_cf_cfg_by_addr+0x20>
   31418:	200046b5 	.word	0x200046b5
   3141c:	200046b4 	.word	0x200046b4

00031420 <ccc_load>:
{
   31420:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   31422:	4b20      	ldr	r3, [pc, #128]	; (314a4 <ccc_load+0x84>)
{
   31424:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   31426:	6882      	ldr	r2, [r0, #8]
   31428:	429a      	cmp	r2, r3
   3142a:	d10a      	bne.n	31442 <ccc_load+0x22>
	if (!load->entry) {
   3142c:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
   3142e:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   31430:	b953      	cbnz	r3, 31448 <ccc_load+0x28>
	cfg = ccc_find_cfg(ccc, addr, id);
   31432:	7922      	ldrb	r2, [r4, #4]
   31434:	6821      	ldr	r1, [r4, #0]
   31436:	4630      	mov	r0, r6
   31438:	f01c fcc0 	bl	4ddbc <ccc_find_cfg>
	if (!cfg) {
   3143c:	b108      	cbz	r0, 31442 <ccc_load+0x22>
	clear_ccc_cfg(cfg);
   3143e:	f01c fd1e 	bl	4de7e <clear_ccc_cfg>
		return BT_GATT_ITER_CONTINUE;
   31442:	2001      	movs	r0, #1
}
   31444:	b002      	add	sp, #8
   31446:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!load->count) {
   31448:	68e0      	ldr	r0, [r4, #12]
   3144a:	2800      	cmp	r0, #0
   3144c:	d0fa      	beq.n	31444 <ccc_load+0x24>
	if (load->entry->handle != handle) {
   3144e:	881b      	ldrh	r3, [r3, #0]
   31450:	428b      	cmp	r3, r1
   31452:	d00a      	beq.n	3146a <ccc_load+0x4a>
		if (load->entry->handle < handle) {
   31454:	d2f5      	bcs.n	31442 <ccc_load+0x22>
	load->count--;
   31456:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   31458:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   3145a:	3801      	subs	r0, #1
	load->entry++;
   3145c:	3304      	adds	r3, #4
	load->count--;
   3145e:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   31460:	3800      	subs	r0, #0
	load->entry++;
   31462:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   31464:	bf18      	it	ne
   31466:	2001      	movne	r0, #1
   31468:	e7ec      	b.n	31444 <ccc_load+0x24>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   3146a:	7922      	ldrb	r2, [r4, #4]
   3146c:	6821      	ldr	r1, [r4, #0]
   3146e:	4630      	mov	r0, r6
   31470:	f01c fca4 	bl	4ddbc <ccc_find_cfg>
	if (!cfg) {
   31474:	4605      	mov	r5, r0
   31476:	b980      	cbnz	r0, 3149a <ccc_load+0x7a>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   31478:	9000      	str	r0, [sp, #0]
   3147a:	4602      	mov	r2, r0
   3147c:	f8cd 0003 	str.w	r0, [sp, #3]
   31480:	4669      	mov	r1, sp
   31482:	4630      	mov	r0, r6
   31484:	f01c fc9a 	bl	4ddbc <ccc_find_cfg>
		if (!cfg) {
   31488:	4605      	mov	r5, r0
   3148a:	2800      	cmp	r0, #0
   3148c:	d0e3      	beq.n	31456 <ccc_load+0x36>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   3148e:	6821      	ldr	r1, [r4, #0]
   31490:	3001      	adds	r0, #1
   31492:	f01c fcad 	bl	4ddf0 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   31496:	7923      	ldrb	r3, [r4, #4]
   31498:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   3149a:	68a3      	ldr	r3, [r4, #8]
   3149c:	885b      	ldrh	r3, [r3, #2]
   3149e:	812b      	strh	r3, [r5, #8]
   314a0:	e7d9      	b.n	31456 <ccc_load+0x36>
   314a2:	bf00      	nop
   314a4:	00031509 	.word	0x00031509

000314a8 <sc_store>:
{
   314a8:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   314aa:	4605      	mov	r5, r0
{
   314ac:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   314ae:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   314b2:	4604      	mov	r4, r0
	if (cfg->id) {
   314b4:	b19a      	cbz	r2, 314de <sc_store+0x36>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   314b6:	ae02      	add	r6, sp, #8
   314b8:	2104      	movs	r1, #4
   314ba:	4630      	mov	r0, r6
   314bc:	f018 f9e2 	bl	49884 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   314c0:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   314c2:	462b      	mov	r3, r5
   314c4:	a803      	add	r0, sp, #12
   314c6:	4a07      	ldr	r2, [pc, #28]	; (314e4 <sc_store+0x3c>)
   314c8:	2124      	movs	r1, #36	; 0x24
   314ca:	f7fc f8af 	bl	2d62c <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   314ce:	2204      	movs	r2, #4
   314d0:	f104 0108 	add.w	r1, r4, #8
   314d4:	a803      	add	r0, sp, #12
   314d6:	f7fa febb 	bl	2c250 <settings_save_one>
}
   314da:	b00c      	add	sp, #48	; 0x30
   314dc:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   314de:	9200      	str	r2, [sp, #0]
   314e0:	e7ef      	b.n	314c2 <sc_store+0x1a>
   314e2:	bf00      	nop
   314e4:	000542d4 	.word	0x000542d4

000314e8 <db_hash_commit>:

static int db_hash_commit(void)
{
   314e8:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   314ea:	2108      	movs	r1, #8
   314ec:	4804      	ldr	r0, [pc, #16]	; (31500 <db_hash_commit+0x18>)
   314ee:	f01c fc2b 	bl	4dd48 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   314f2:	2200      	movs	r2, #0
   314f4:	2300      	movs	r3, #0
   314f6:	4803      	ldr	r0, [pc, #12]	; (31504 <db_hash_commit+0x1c>)
   314f8:	f016 ffda 	bl	484b0 <k_work_reschedule>

	return 0;
}
   314fc:	2000      	movs	r0, #0
   314fe:	bd08      	pop	{r3, pc}
   31500:	20002620 	.word	0x20002620
   31504:	20002578 	.word	0x20002578

00031508 <bt_gatt_attr_write_ccc>:
{
   31508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3150c:	461f      	mov	r7, r3
   3150e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   31512:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   31516:	4605      	mov	r5, r0
   31518:	4688      	mov	r8, r1
	if (offset) {
   3151a:	2b00      	cmp	r3, #0
   3151c:	d15d      	bne.n	315da <bt_gatt_attr_write_ccc+0xd2>
	if (!len || len > sizeof(uint16_t)) {
   3151e:	1e7b      	subs	r3, r7, #1
   31520:	2b01      	cmp	r3, #1
   31522:	d85d      	bhi.n	315e0 <bt_gatt_attr_write_ccc+0xd8>
	if (len < sizeof(uint16_t)) {
   31524:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   31526:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   31528:	7816      	ldrb	r6, [r2, #0]
   3152a:	bf18      	it	ne
   3152c:	8816      	ldrhne	r6, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   3152e:	f01c fc1d 	bl	4dd6c <find_ccc_cfg>
	if (!cfg) {
   31532:	4604      	mov	r4, r0
   31534:	b980      	cbnz	r0, 31558 <bt_gatt_attr_write_ccc+0x50>
		if (!value) {
   31536:	b916      	cbnz	r6, 3153e <bt_gatt_attr_write_ccc+0x36>
			return len;
   31538:	4638      	mov	r0, r7
}
   3153a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   3153e:	4649      	mov	r1, r9
   31540:	f01c fc14 	bl	4dd6c <find_ccc_cfg>
		if (!cfg) {
   31544:	4604      	mov	r4, r0
   31546:	2800      	cmp	r0, #0
   31548:	d04d      	beq.n	315e6 <bt_gatt_attr_write_ccc+0xde>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   3154a:	f105 0188 	add.w	r1, r5, #136	; 0x88
   3154e:	3001      	adds	r0, #1
   31550:	f01c fc4e 	bl	4ddf0 <bt_addr_le_copy>
		cfg->id = conn->id;
   31554:	7a2b      	ldrb	r3, [r5, #8]
   31556:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   31558:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
   3155c:	bb8b      	cbnz	r3, 315c2 <bt_gatt_attr_write_ccc+0xba>
	if (cfg->value != ccc->value) {
   3155e:	f8b9 303c 	ldrh.w	r3, [r9, #60]	; 0x3c
	value_changed = cfg->value != value;
   31562:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   31566:	8126      	strh	r6, [r4, #8]
	if (cfg->value != ccc->value) {
   31568:	42b3      	cmp	r3, r6
   3156a:	d003      	beq.n	31574 <bt_gatt_attr_write_ccc+0x6c>
		gatt_ccc_changed(attr, ccc);
   3156c:	4649      	mov	r1, r9
   3156e:	4640      	mov	r0, r8
   31570:	f01c fb61 	bl	4dc36 <gatt_ccc_changed>
	if (value_changed) {
   31574:	45b2      	cmp	sl, r6
   31576:	d01e      	beq.n	315b6 <bt_gatt_attr_write_ccc+0xae>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   31578:	4628      	mov	r0, r5
   3157a:	f7fe fb7b 	bl	2fc74 <bt_conn_index>
   3157e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 315ec <bt_gatt_attr_write_ccc+0xe4>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   31582:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
   31586:	429d      	cmp	r5, r3
   31588:	d015      	beq.n	315b6 <bt_gatt_attr_write_ccc+0xae>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   3158a:	7a28      	ldrb	r0, [r5, #8]
   3158c:	f105 0188 	add.w	r1, r5, #136	; 0x88
   31590:	f01b f829 	bl	4c5e6 <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   31594:	b178      	cbz	r0, 315b6 <bt_gatt_attr_write_ccc+0xae>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   31596:	4628      	mov	r0, r5
   31598:	f7fe fb6c 	bl	2fc74 <bt_conn_index>
   3159c:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   3159e:	4628      	mov	r0, r5
   315a0:	f01b fb79 	bl	4cc96 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   315a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   315a8:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   315ac:	2300      	movs	r3, #0
   315ae:	f108 0018 	add.w	r0, r8, #24
   315b2:	f016 ff7d 	bl	484b0 <k_work_reschedule>
	if (!value) {
   315b6:	2e00      	cmp	r6, #0
   315b8:	d1be      	bne.n	31538 <bt_gatt_attr_write_ccc+0x30>
		clear_ccc_cfg(cfg);
   315ba:	4620      	mov	r0, r4
   315bc:	f01c fc5f 	bl	4de7e <clear_ccc_cfg>
   315c0:	e7ba      	b.n	31538 <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   315c2:	4632      	mov	r2, r6
   315c4:	4641      	mov	r1, r8
   315c6:	4628      	mov	r0, r5
   315c8:	4798      	blx	r3
		if (write < 0) {
   315ca:	2800      	cmp	r0, #0
   315cc:	dbb5      	blt.n	3153a <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
   315ce:	3801      	subs	r0, #1
   315d0:	2801      	cmp	r0, #1
   315d2:	d9c4      	bls.n	3155e <bt_gatt_attr_write_ccc+0x56>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   315d4:	f06f 000d 	mvn.w	r0, #13
   315d8:	e7af      	b.n	3153a <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   315da:	f06f 0006 	mvn.w	r0, #6
   315de:	e7ac      	b.n	3153a <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   315e0:	f06f 000c 	mvn.w	r0, #12
   315e4:	e7a9      	b.n	3153a <bt_gatt_attr_write_ccc+0x32>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   315e6:	f06f 0010 	mvn.w	r0, #16
   315ea:	e7a6      	b.n	3153a <bt_gatt_attr_write_ccc+0x32>
   315ec:	20002510 	.word	0x20002510

000315f0 <gatt_write_ccc>:
{
   315f0:	b507      	push	{r0, r1, r2, lr}
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   315f2:	2312      	movs	r3, #18
{
   315f4:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   315f6:	2104      	movs	r1, #4
   315f8:	e9cd 3100 	strd	r3, r1, [sp]
   315fc:	4b03      	ldr	r3, [pc, #12]	; (3160c <gatt_write_ccc+0x1c>)
   315fe:	4904      	ldr	r1, [pc, #16]	; (31610 <gatt_write_ccc+0x20>)
   31600:	f01c fcf1 	bl	4dfe6 <gatt_req_send>
}
   31604:	b003      	add	sp, #12
   31606:	f85d fb04 	ldr.w	pc, [sp], #4
   3160a:	bf00      	nop
   3160c:	0004e42b 	.word	0x0004e42b
   31610:	0004df77 	.word	0x0004df77

00031614 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   31614:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   31616:	6881      	ldr	r1, [r0, #8]
{
   31618:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   3161a:	4a07      	ldr	r2, [pc, #28]	; (31638 <remove_peer_from_attr+0x24>)
   3161c:	4291      	cmp	r1, r2
   3161e:	d109      	bne.n	31634 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   31620:	791a      	ldrb	r2, [r3, #4]
   31622:	6819      	ldr	r1, [r3, #0]
   31624:	68c0      	ldr	r0, [r0, #12]
   31626:	f01c fbc9 	bl	4ddbc <ccc_find_cfg>
	if (cfg) {
   3162a:	b118      	cbz	r0, 31634 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   3162c:	220a      	movs	r2, #10
   3162e:	2100      	movs	r1, #0
   31630:	f01a fb1d 	bl	4bc6e <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   31634:	2001      	movs	r0, #1
   31636:	bd08      	pop	{r3, pc}
   31638:	00031509 	.word	0x00031509

0003163c <convert_to_id_on_match>:
{
   3163c:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   3163e:	4b0b      	ldr	r3, [pc, #44]	; (3166c <convert_to_id_on_match+0x30>)
{
   31640:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   31642:	6882      	ldr	r2, [r0, #8]
   31644:	429a      	cmp	r2, r3
   31646:	d10e      	bne.n	31666 <convert_to_id_on_match+0x2a>
   31648:	68c5      	ldr	r5, [r0, #12]
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   3164a:	1c6c      	adds	r4, r5, #1
   3164c:	353d      	adds	r5, #61	; 0x3d
		if (bt_addr_le_cmp(&ccc->cfg[i].peer, match->private_addr) == 0) {
   3164e:	6831      	ldr	r1, [r6, #0]
   31650:	4620      	mov	r0, r4
   31652:	f01c fb88 	bl	4dd66 <bt_addr_le_cmp>
   31656:	b918      	cbnz	r0, 31660 <convert_to_id_on_match+0x24>
			bt_addr_le_copy(&ccc->cfg[i].peer, match->id_addr);
   31658:	6871      	ldr	r1, [r6, #4]
   3165a:	4620      	mov	r0, r4
   3165c:	f01c fbc8 	bl	4ddf0 <bt_addr_le_copy>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   31660:	340a      	adds	r4, #10
   31662:	42ac      	cmp	r4, r5
   31664:	d1f3      	bne.n	3164e <convert_to_id_on_match+0x12>
}
   31666:	2001      	movs	r0, #1
   31668:	bd70      	pop	{r4, r5, r6, pc}
   3166a:	bf00      	nop
   3166c:	00031509 	.word	0x00031509

00031670 <ccc_save>:
{
   31670:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   31672:	4b0c      	ldr	r3, [pc, #48]	; (316a4 <ccc_save+0x34>)
{
   31674:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   31676:	6882      	ldr	r2, [r0, #8]
   31678:	429a      	cmp	r2, r3
{
   3167a:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   3167c:	d10f      	bne.n	3169e <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   3167e:	7922      	ldrb	r2, [r4, #4]
   31680:	6821      	ldr	r1, [r4, #0]
   31682:	68c0      	ldr	r0, [r0, #12]
   31684:	f01c fb9a 	bl	4ddbc <ccc_find_cfg>
	if (!cfg) {
   31688:	b148      	cbz	r0, 3169e <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   3168a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   3168e:	8901      	ldrh	r1, [r0, #8]
   31690:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   31694:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   31696:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   31698:	8151      	strh	r1, [r2, #10]
	save->count++;
   3169a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   3169e:	2001      	movs	r0, #1
   316a0:	bd38      	pop	{r3, r4, r5, pc}
   316a2:	bf00      	nop
   316a4:	00031509 	.word	0x00031509

000316a8 <bt_gatt_store_cf.isra.0>:
static int bt_gatt_store_cf(struct bt_conn *conn)
   316a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   316aa:	b08d      	sub	sp, #52	; 0x34
   316ac:	4605      	mov	r5, r0
	cfg = find_cf_cfg(conn);
   316ae:	f7ff fe3b 	bl	31328 <find_cf_cfg>
					       &conn->le.dst, id_str);
   316b2:	f105 0688 	add.w	r6, r5, #136	; 0x88
	if (!cfg) {
   316b6:	4604      	mov	r4, r0
   316b8:	b300      	cbz	r0, 316fc <bt_gatt_store_cf.isra.0+0x54>
		if (conn->id) {
   316ba:	7a2a      	ldrb	r2, [r5, #8]
		str = (char *)cfg->data;
   316bc:	3408      	adds	r4, #8
		if (conn->id) {
   316be:	b16a      	cbz	r2, 316dc <bt_gatt_store_cf.isra.0+0x34>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   316c0:	af02      	add	r7, sp, #8
   316c2:	2104      	movs	r1, #4
   316c4:	4638      	mov	r0, r7
   316c6:	f018 f8dd 	bl	49884 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   316ca:	4633      	mov	r3, r6
   316cc:	4a0d      	ldr	r2, [pc, #52]	; (31704 <bt_gatt_store_cf.isra.0+0x5c>)
   316ce:	9700      	str	r7, [sp, #0]
   316d0:	2124      	movs	r1, #36	; 0x24
   316d2:	a803      	add	r0, sp, #12
   316d4:	f7fb ffaa 	bl	2d62c <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   316d8:	7a2b      	ldrb	r3, [r5, #8]
   316da:	b98b      	cbnz	r3, 31700 <bt_gatt_store_cf.isra.0+0x58>
		len = 0;
   316dc:	2501      	movs	r5, #1
		bt_settings_encode_key(key, sizeof(key), "cf",
   316de:	2300      	movs	r3, #0
   316e0:	9300      	str	r3, [sp, #0]
   316e2:	4a08      	ldr	r2, [pc, #32]	; (31704 <bt_gatt_store_cf.isra.0+0x5c>)
   316e4:	4633      	mov	r3, r6
   316e6:	2124      	movs	r1, #36	; 0x24
   316e8:	a803      	add	r0, sp, #12
   316ea:	f7fb ff9f 	bl	2d62c <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   316ee:	462a      	mov	r2, r5
   316f0:	4621      	mov	r1, r4
   316f2:	a803      	add	r0, sp, #12
   316f4:	f7fa fdac 	bl	2c250 <settings_save_one>
}
   316f8:	b00d      	add	sp, #52	; 0x34
   316fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
   316fc:	4605      	mov	r5, r0
   316fe:	e7ee      	b.n	316de <bt_gatt_store_cf.isra.0+0x36>
   31700:	2501      	movs	r5, #1
   31702:	e7f4      	b.n	316ee <bt_gatt_store_cf.isra.0+0x46>
   31704:	000542ce 	.word	0x000542ce

00031708 <bt_gatt_clear_sc>:
{
   31708:	b570      	push	{r4, r5, r6, lr}
   3170a:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   3170c:	f7ff fe2e 	bl	3136c <find_sc_cfg>
	if (!cfg) {
   31710:	4604      	mov	r4, r0
   31712:	b1b8      	cbz	r0, 31744 <bt_gatt_clear_sc+0x3c>
		if (cfg->id) {
   31714:	4605      	mov	r5, r0
   31716:	f815 2b01 	ldrb.w	r2, [r5], #1
   3171a:	b1b2      	cbz	r2, 3174a <bt_gatt_clear_sc+0x42>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   3171c:	ae02      	add	r6, sp, #8
   3171e:	2104      	movs	r1, #4
   31720:	4630      	mov	r0, r6
   31722:	f018 f8af 	bl	49884 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   31726:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   31728:	4a09      	ldr	r2, [pc, #36]	; (31750 <bt_gatt_clear_sc+0x48>)
   3172a:	2124      	movs	r1, #36	; 0x24
   3172c:	462b      	mov	r3, r5
   3172e:	a803      	add	r0, sp, #12
   31730:	f7fb ff7c 	bl	2d62c <bt_settings_encode_key>
		err = settings_delete(key);
   31734:	a803      	add	r0, sp, #12
   31736:	f018 ff96 	bl	4a666 <settings_delete>
	memset(cfg, 0, sizeof(*cfg));
   3173a:	220c      	movs	r2, #12
   3173c:	2100      	movs	r1, #0
   3173e:	4620      	mov	r0, r4
   31740:	f01a fa95 	bl	4bc6e <memset>
}
   31744:	2000      	movs	r0, #0
   31746:	b00c      	add	sp, #48	; 0x30
   31748:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   3174a:	9200      	str	r2, [sp, #0]
   3174c:	e7ec      	b.n	31728 <bt_gatt_clear_sc+0x20>
   3174e:	bf00      	nop
   31750:	000542d4 	.word	0x000542d4

00031754 <disconnected_cb>:
{
   31754:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   31758:	4b25      	ldr	r3, [pc, #148]	; (317f0 <disconnected_cb+0x9c>)
{
   3175a:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   3175c:	6882      	ldr	r2, [r0, #8]
   3175e:	429a      	cmp	r2, r3
{
   31760:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   31762:	d12f      	bne.n	317c4 <disconnected_cb+0x70>
	ccc = attr->user_data;
   31764:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   31766:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
   31768:	b363      	cbz	r3, 317c4 <disconnected_cb+0x70>
				if (ccc == &sc_ccc) {
   3176a:	f8df b088 	ldr.w	fp, [pc, #136]	; 317f4 <disconnected_cb+0xa0>
   3176e:	1c6c      	adds	r4, r5, #1
   31770:	f105 0a3d 	add.w	sl, r5, #61	; 0x3d
	value_used = false;
   31774:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   31778:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   3177c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   31780:	b19b      	cbz	r3, 317aa <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   31782:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   31786:	4622      	mov	r2, r4
   31788:	4630      	mov	r0, r6
   3178a:	f01b fb48 	bl	4ce1e <bt_conn_is_peer_addr_le>
   3178e:	b9e0      	cbnz	r0, 317ca <disconnected_cb+0x76>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   31790:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   31794:	4621      	mov	r1, r4
   31796:	f7fe fba1 	bl	2fedc <bt_conn_lookup_addr_le>
			if (tmp) {
   3179a:	b130      	cbz	r0, 317aa <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
   3179c:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   3179e:	2b07      	cmp	r3, #7
   317a0:	bf08      	it	eq
   317a2:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   317a6:	f01b fa91 	bl	4cccc <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   317aa:	340a      	adds	r4, #10
   317ac:	4554      	cmp	r4, sl
   317ae:	d1e5      	bne.n	3177c <disconnected_cb+0x28>
	if (!value_used) {
   317b0:	f1b8 0f00 	cmp.w	r8, #0
   317b4:	d106      	bne.n	317c4 <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
   317b6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
		ccc->value = 0U;
   317b8:	f8a5 803c 	strh.w	r8, [r5, #60]	; 0x3c
		if (ccc->cfg_changed) {
   317bc:	b113      	cbz	r3, 317c4 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
   317be:	4641      	mov	r1, r8
   317c0:	4638      	mov	r0, r7
   317c2:	4798      	blx	r3
}
   317c4:	2001      	movs	r0, #1
   317c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   317ca:	7a30      	ldrb	r0, [r6, #8]
   317cc:	4649      	mov	r1, r9
   317ce:	f01a ff0a 	bl	4c5e6 <bt_addr_le_is_bonded>
   317d2:	b940      	cbnz	r0, 317e6 <disconnected_cb+0x92>
				if (ccc == &sc_ccc) {
   317d4:	455d      	cmp	r5, fp
   317d6:	d102      	bne.n	317de <disconnected_cb+0x8a>
					sc_clear(conn);
   317d8:	4630      	mov	r0, r6
   317da:	f01c fd57 	bl	4e28c <sc_clear>
				clear_ccc_cfg(cfg);
   317de:	1e60      	subs	r0, r4, #1
   317e0:	f01c fb4d 	bl	4de7e <clear_ccc_cfg>
   317e4:	e7e1      	b.n	317aa <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   317e6:	4649      	mov	r1, r9
   317e8:	4620      	mov	r0, r4
   317ea:	f01c fb01 	bl	4ddf0 <bt_addr_le_copy>
   317ee:	e7dc      	b.n	317aa <disconnected_cb+0x56>
   317f0:	00031509 	.word	0x00031509
   317f4:	20000880 	.word	0x20000880

000317f8 <read_ppcp>:
{
   317f8:	b513      	push	{r0, r1, r4, lr}
   317fa:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   317fe:	4c0b      	ldr	r4, [pc, #44]	; (3182c <read_ppcp+0x34>)
{
   31800:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   31802:	4a0b      	ldr	r2, [pc, #44]	; (31830 <read_ppcp+0x38>)
	if (offset > value_len) {
   31804:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   31806:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   3180a:	d80b      	bhi.n	31824 <read_ppcp+0x2c>
	len = MIN(buf_len, value_len - offset);
   3180c:	f1c1 0408 	rsb	r4, r1, #8
   31810:	429c      	cmp	r4, r3
   31812:	bfa8      	it	ge
   31814:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   31816:	4622      	mov	r2, r4
   31818:	4469      	add	r1, sp
   3181a:	f01a fa1d 	bl	4bc58 <memcpy>
}
   3181e:	4620      	mov	r0, r4
   31820:	b002      	add	sp, #8
   31822:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   31824:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   31828:	e7f9      	b.n	3181e <read_ppcp+0x26>
   3182a:	bf00      	nop
   3182c:	000c0006 	.word	0x000c0006
   31830:	0190001e 	.word	0x0190001e

00031834 <sc_commit>:
{
   31834:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   31836:	4809      	ldr	r0, [pc, #36]	; (3185c <sc_commit+0x28>)
   31838:	f06f 0102 	mvn.w	r1, #2
   3183c:	f01c fb8c 	bl	4df58 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   31840:	4806      	ldr	r0, [pc, #24]	; (3185c <sc_commit+0x28>)
   31842:	f01c fa28 	bl	4dc96 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   31846:	07c3      	lsls	r3, r0, #31
   31848:	d505      	bpl.n	31856 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   3184a:	4805      	ldr	r0, [pc, #20]	; (31860 <sc_commit+0x2c>)
   3184c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   31850:	2300      	movs	r3, #0
   31852:	f016 fe2d 	bl	484b0 <k_work_reschedule>
}
   31856:	2000      	movs	r0, #0
   31858:	bd08      	pop	{r3, pc}
   3185a:	bf00      	nop
   3185c:	20002620 	.word	0x20002620
   31860:	200025f0 	.word	0x200025f0

00031864 <sc_indicate_rsp>:
{
   31864:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   31866:	f06f 0102 	mvn.w	r1, #2
   3186a:	4604      	mov	r4, r0
   3186c:	480d      	ldr	r0, [pc, #52]	; (318a4 <sc_indicate_rsp+0x40>)
   3186e:	f01c fb73 	bl	4df58 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   31872:	480c      	ldr	r0, [pc, #48]	; (318a4 <sc_indicate_rsp+0x40>)
   31874:	f01c fa0f 	bl	4dc96 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   31878:	07c2      	lsls	r2, r0, #31
   3187a:	d504      	bpl.n	31886 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   3187c:	480a      	ldr	r0, [pc, #40]	; (318a8 <sc_indicate_rsp+0x44>)
   3187e:	2200      	movs	r2, #0
   31880:	2300      	movs	r3, #0
   31882:	f016 fe15 	bl	484b0 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   31886:	4620      	mov	r0, r4
   31888:	f7ff fd4e 	bl	31328 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   3188c:	b140      	cbz	r0, 318a0 <sc_indicate_rsp+0x3c>
   3188e:	7a03      	ldrb	r3, [r0, #8]
   31890:	07db      	lsls	r3, r3, #31
   31892:	d505      	bpl.n	318a0 <sc_indicate_rsp+0x3c>
}
   31894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   31898:	2101      	movs	r1, #1
   3189a:	300c      	adds	r0, #12
   3189c:	f01c ba54 	b.w	4dd48 <atomic_or>
   318a0:	bd10      	pop	{r4, pc}
   318a2:	bf00      	nop
   318a4:	20002620 	.word	0x20002620
   318a8:	200025f0 	.word	0x200025f0

000318ac <bt_gatt_init>:
{
   318ac:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   318ae:	4b26      	ldr	r3, [pc, #152]	; (31948 <bt_gatt_init+0x9c>)
   318b0:	f3bf 8f5b 	dmb	ish
   318b4:	2201      	movs	r2, #1
   318b6:	e853 1f00 	ldrex	r1, [r3]
   318ba:	2900      	cmp	r1, #0
   318bc:	d103      	bne.n	318c6 <bt_gatt_init+0x1a>
   318be:	e843 2000 	strex	r0, r2, [r3]
   318c2:	2800      	cmp	r0, #0
   318c4:	d1f7      	bne.n	318b6 <bt_gatt_init+0xa>
   318c6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   318ca:	d13b      	bne.n	31944 <bt_gatt_init+0x98>
   318cc:	f3bf 8f5b 	dmb	ish
   318d0:	4b1e      	ldr	r3, [pc, #120]	; (3194c <bt_gatt_init+0xa0>)
   318d2:	e853 1f00 	ldrex	r1, [r3]
   318d6:	2900      	cmp	r1, #0
   318d8:	d103      	bne.n	318e2 <bt_gatt_init+0x36>
   318da:	e843 2000 	strex	r0, r2, [r3]
   318de:	2800      	cmp	r0, #0
   318e0:	d1f7      	bne.n	318d2 <bt_gatt_init+0x26>
   318e2:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   318e6:	d108      	bne.n	318fa <bt_gatt_init+0x4e>
   318e8:	4919      	ldr	r1, [pc, #100]	; (31950 <bt_gatt_init+0xa4>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   318ea:	4a1a      	ldr	r2, [pc, #104]	; (31954 <bt_gatt_init+0xa8>)
   318ec:	880b      	ldrh	r3, [r1, #0]
   318ee:	4c1a      	ldr	r4, [pc, #104]	; (31958 <bt_gatt_init+0xac>)
	if (!atomic_cas(&service_init, 0, 1)) {
   318f0:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   318f2:	42a2      	cmp	r2, r4
   318f4:	d320      	bcc.n	31938 <bt_gatt_init+0x8c>
   318f6:	b100      	cbz	r0, 318fa <bt_gatt_init+0x4e>
   318f8:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   318fa:	4b18      	ldr	r3, [pc, #96]	; (3195c <bt_gatt_init+0xb0>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   318fc:	4918      	ldr	r1, [pc, #96]	; (31960 <bt_gatt_init+0xb4>)
   318fe:	4819      	ldr	r0, [pc, #100]	; (31964 <bt_gatt_init+0xb8>)
   31900:	2200      	movs	r2, #0
	list->tail = NULL;
   31902:	e9c3 2200 	strd	r2, r2, [r3]
   31906:	f01f f98a 	bl	50c1e <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   3190a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   3190e:	2300      	movs	r3, #0
   31910:	4814      	ldr	r0, [pc, #80]	; (31964 <bt_gatt_init+0xb8>)
   31912:	f016 fd99 	bl	48448 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   31916:	4914      	ldr	r1, [pc, #80]	; (31968 <bt_gatt_init+0xbc>)
   31918:	4814      	ldr	r0, [pc, #80]	; (3196c <bt_gatt_init+0xc0>)
   3191a:	f01f f980 	bl	50c1e <k_work_init_delayable>
   3191e:	2102      	movs	r1, #2
   31920:	4813      	ldr	r0, [pc, #76]	; (31970 <bt_gatt_init+0xc4>)
   31922:	f01c fa11 	bl	4dd48 <atomic_or>
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   31926:	4813      	ldr	r0, [pc, #76]	; (31974 <bt_gatt_init+0xc8>)
   31928:	4913      	ldr	r1, [pc, #76]	; (31978 <bt_gatt_init+0xcc>)
   3192a:	f01f f978 	bl	50c1e <k_work_init_delayable>
}
   3192e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_cb_register(&gatt_conn_cb);
   31932:	4812      	ldr	r0, [pc, #72]	; (3197c <bt_gatt_init+0xd0>)
   31934:	f7fe baae 	b.w	2fe94 <bt_conn_cb_register>
		last_static_handle += svc->attr_count;
   31938:	6850      	ldr	r0, [r2, #4]
   3193a:	4403      	add	r3, r0
   3193c:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   3193e:	3208      	adds	r2, #8
   31940:	2001      	movs	r0, #1
   31942:	e7d6      	b.n	318f2 <bt_gatt_init+0x46>
}
   31944:	bd10      	pop	{r4, pc}
   31946:	bf00      	nop
   31948:	20004778 	.word	0x20004778
   3194c:	20004774 	.word	0x20004774
   31950:	200072ac 	.word	0x200072ac
   31954:	000517a0 	.word	0x000517a0
   31958:	000517c8 	.word	0x000517c8
   3195c:	2000477c 	.word	0x2000477c
   31960:	00031b09 	.word	0x00031b09
   31964:	20002578 	.word	0x20002578
   31968:	00031ded 	.word	0x00031ded
   3196c:	200025f0 	.word	0x200025f0
   31970:	20002620 	.word	0x20002620
   31974:	20002528 	.word	0x20002528
   31978:	0004ecf7 	.word	0x0004ecf7
   3197c:	20000848 	.word	0x20000848

00031980 <bt_gatt_attr_get_handle>:
{
   31980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   31984:	4603      	mov	r3, r0
   31986:	b148      	cbz	r0, 3199c <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   31988:	8a00      	ldrh	r0, [r0, #16]
   3198a:	b938      	cbnz	r0, 3199c <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   3198c:	4912      	ldr	r1, [pc, #72]	; (319d8 <bt_gatt_attr_get_handle+0x58>)
   3198e:	f8df e04c 	ldr.w	lr, [pc, #76]	; 319dc <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   31992:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   31994:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   31998:	4571      	cmp	r1, lr
   3199a:	d301      	bcc.n	319a0 <bt_gatt_attr_get_handle+0x20>
}
   3199c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   319a0:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   319a4:	42bb      	cmp	r3, r7
   319a6:	d304      	bcc.n	319b2 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   319a8:	fb0c 7206 	mla	r2, ip, r6, r7
   319ac:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   319ae:	4293      	cmp	r3, r2
   319b0:	d90e      	bls.n	319d0 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   319b2:	4434      	add	r4, r6
   319b4:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   319b6:	3108      	adds	r1, #8
   319b8:	4614      	mov	r4, r2
   319ba:	e7ed      	b.n	31998 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   319bc:	fb0c 7805 	mla	r8, ip, r5, r7
   319c0:	4543      	cmp	r3, r8
   319c2:	d007      	beq.n	319d4 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   319c4:	3501      	adds	r5, #1
   319c6:	1962      	adds	r2, r4, r5
   319c8:	42b5      	cmp	r5, r6
   319ca:	b292      	uxth	r2, r2
   319cc:	d1f6      	bne.n	319bc <bt_gatt_attr_get_handle+0x3c>
   319ce:	e7f2      	b.n	319b6 <bt_gatt_attr_get_handle+0x36>
   319d0:	2500      	movs	r5, #0
   319d2:	e7f8      	b.n	319c6 <bt_gatt_attr_get_handle+0x46>
   319d4:	4610      	mov	r0, r2
   319d6:	e7e1      	b.n	3199c <bt_gatt_attr_get_handle+0x1c>
   319d8:	000517a0 	.word	0x000517a0
   319dc:	000517c8 	.word	0x000517c8

000319e0 <bt_gatt_foreach_attr_type>:
{
   319e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   319e4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   319e8:	9100      	str	r1, [sp, #0]
   319ea:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   319ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
   319f0:	2d00      	cmp	r5, #0
   319f2:	bf08      	it	eq
   319f4:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   319f6:	4b24      	ldr	r3, [pc, #144]	; (31a88 <bt_gatt_foreach_attr_type+0xa8>)
   319f8:	881b      	ldrh	r3, [r3, #0]
   319fa:	4283      	cmp	r3, r0
{
   319fc:	4607      	mov	r7, r0
   319fe:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   31a00:	d23c      	bcs.n	31a7c <bt_gatt_foreach_attr_type+0x9c>
}
   31a02:	b003      	add	sp, #12
   31a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   31a08:	6873      	ldr	r3, [r6, #4]
   31a0a:	4423      	add	r3, r4
   31a0c:	42bb      	cmp	r3, r7
   31a0e:	d232      	bcs.n	31a76 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   31a10:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   31a12:	3608      	adds	r6, #8
   31a14:	4b1d      	ldr	r3, [pc, #116]	; (31a8c <bt_gatt_foreach_attr_type+0xac>)
   31a16:	429e      	cmp	r6, r3
   31a18:	d3f6      	bcc.n	31a08 <bt_gatt_foreach_attr_type+0x28>
   31a1a:	e7f2      	b.n	31a02 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   31a1c:	5889      	ldr	r1, [r1, r2]
   31a1e:	9301      	str	r3, [sp, #4]
   31a20:	4640      	mov	r0, r8
   31a22:	f01a fa07 	bl	4be34 <bt_uuid_cmp>
   31a26:	9b01      	ldr	r3, [sp, #4]
   31a28:	b190      	cbz	r0, 31a50 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   31a2a:	3401      	adds	r4, #1
   31a2c:	f10a 0a01 	add.w	sl, sl, #1
   31a30:	b2a4      	uxth	r4, r4
   31a32:	6873      	ldr	r3, [r6, #4]
   31a34:	4553      	cmp	r3, sl
   31a36:	d9ec      	bls.n	31a12 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   31a38:	9b00      	ldr	r3, [sp, #0]
   31a3a:	429c      	cmp	r4, r3
   31a3c:	d8e1      	bhi.n	31a02 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   31a3e:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   31a40:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   31a42:	d3f2      	bcc.n	31a2a <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   31a44:	fb0b f20a 	mul.w	r2, fp, sl
   31a48:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   31a4a:	f1b8 0f00 	cmp.w	r8, #0
   31a4e:	d1e5      	bne.n	31a1c <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   31a50:	f1b9 0f00 	cmp.w	r9, #0
   31a54:	d10b      	bne.n	31a6e <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   31a56:	3d01      	subs	r5, #1
   31a58:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   31a5a:	4618      	mov	r0, r3
   31a5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   31a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   31a60:	4621      	mov	r1, r4
   31a62:	4798      	blx	r3
	if (!*num_matches) {
   31a64:	2d00      	cmp	r5, #0
   31a66:	d0cc      	beq.n	31a02 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   31a68:	2800      	cmp	r0, #0
   31a6a:	d1de      	bne.n	31a2a <bt_gatt_foreach_attr_type+0x4a>
   31a6c:	e7c9      	b.n	31a02 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   31a6e:	68da      	ldr	r2, [r3, #12]
   31a70:	4591      	cmp	r9, r2
   31a72:	d1da      	bne.n	31a2a <bt_gatt_foreach_attr_type+0x4a>
   31a74:	e7ef      	b.n	31a56 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   31a76:	f04f 0a00 	mov.w	sl, #0
   31a7a:	e7da      	b.n	31a32 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   31a7c:	4e04      	ldr	r6, [pc, #16]	; (31a90 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   31a7e:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   31a80:	f04f 0b14 	mov.w	fp, #20
   31a84:	e7c6      	b.n	31a14 <bt_gatt_foreach_attr_type+0x34>
   31a86:	bf00      	nop
   31a88:	200072ac 	.word	0x200072ac
   31a8c:	000517c8 	.word	0x000517c8
   31a90:	000517a0 	.word	0x000517a0

00031a94 <db_hash_gen>:
{
   31a94:	b530      	push	{r4, r5, lr}
   31a96:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   31a98:	2400      	movs	r4, #0
{
   31a9a:	4605      	mov	r5, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   31a9c:	aa1c      	add	r2, sp, #112	; 0x70
   31a9e:	4669      	mov	r1, sp
   31aa0:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   31aa2:	e9cd 4400 	strd	r4, r4, [sp]
   31aa6:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   31aaa:	f019 ff42 	bl	4b932 <tc_cmac_setup>
   31aae:	b308      	cbz	r0, 31af4 <db_hash_gen+0x60>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   31ab0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   31ab4:	2001      	movs	r0, #1
   31ab6:	4a10      	ldr	r2, [pc, #64]	; (31af8 <db_hash_gen+0x64>)
   31ab8:	ab04      	add	r3, sp, #16
   31aba:	f01c fd50 	bl	4e55e <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   31abe:	480f      	ldr	r0, [pc, #60]	; (31afc <db_hash_gen+0x68>)
   31ac0:	a904      	add	r1, sp, #16
   31ac2:	f019 ffcb 	bl	4ba5c <tc_cmac_final>
   31ac6:	b1a8      	cbz	r0, 31af4 <db_hash_gen+0x60>
   31ac8:	4b0c      	ldr	r3, [pc, #48]	; (31afc <db_hash_gen+0x68>)
   31aca:	f103 0210 	add.w	r2, r3, #16
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   31ace:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   31ad0:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   31ad2:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   31ad6:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
   31ada:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   31adc:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   31ade:	d1f6      	bne.n	31ace <db_hash_gen+0x3a>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   31ae0:	b125      	cbz	r5, 31aec <db_hash_gen+0x58>
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   31ae2:	4906      	ldr	r1, [pc, #24]	; (31afc <db_hash_gen+0x68>)
   31ae4:	4806      	ldr	r0, [pc, #24]	; (31b00 <db_hash_gen+0x6c>)
   31ae6:	2210      	movs	r2, #16
   31ae8:	f7fa fbb2 	bl	2c250 <settings_save_one>
   31aec:	4805      	ldr	r0, [pc, #20]	; (31b04 <db_hash_gen+0x70>)
   31aee:	2104      	movs	r1, #4
   31af0:	f01c f92a 	bl	4dd48 <atomic_or>
}
   31af4:	b049      	add	sp, #292	; 0x124
   31af6:	bd30      	pop	{r4, r5, pc}
   31af8:	0004dca3 	.word	0x0004dca3
   31afc:	20002558 	.word	0x20002558
   31b00:	000542bc 	.word	0x000542bc
   31b04:	20002620 	.word	0x20002620

00031b08 <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   31b08:	f06f 0108 	mvn.w	r1, #8
{
   31b0c:	b508      	push	{r3, lr}
   31b0e:	4828      	ldr	r0, [pc, #160]	; (31bb0 <db_hash_process+0xa8>)
   31b10:	f01c fa22 	bl	4df58 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   31b14:	0701      	lsls	r1, r0, #28
   31b16:	d545      	bpl.n	31ba4 <db_hash_process+0x9c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   31b18:	4825      	ldr	r0, [pc, #148]	; (31bb0 <db_hash_process+0xa8>)
   31b1a:	f01c f8bc 	bl	4dc96 <atomic_get>
   31b1e:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   31b20:	075a      	lsls	r2, r3, #29
   31b22:	f3c0 0080 	ubfx	r0, r0, #2, #1
   31b26:	d401      	bmi.n	31b2c <db_hash_process+0x24>
			db_hash_gen(false);
   31b28:	f7ff ffb4 	bl	31a94 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   31b2c:	4921      	ldr	r1, [pc, #132]	; (31bb4 <db_hash_process+0xac>)
   31b2e:	2210      	movs	r2, #16
   31b30:	1888      	adds	r0, r1, r2
   31b32:	f01a f881 	bl	4bc38 <memcmp>
   31b36:	b948      	cbnz	r0, 31b4c <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   31b38:	481f      	ldr	r0, [pc, #124]	; (31bb8 <db_hash_process+0xb0>)
   31b3a:	f01f f87e 	bl	50c3a <k_work_cancel_delayable>
}
   31b3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   31b42:	481b      	ldr	r0, [pc, #108]	; (31bb0 <db_hash_process+0xa8>)
   31b44:	f06f 0101 	mvn.w	r1, #1
   31b48:	f01c ba06 	b.w	4df58 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   31b4c:	4818      	ldr	r0, [pc, #96]	; (31bb0 <db_hash_process+0xa8>)
   31b4e:	2101      	movs	r1, #1
   31b50:	f01c f8fa 	bl	4dd48 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   31b54:	f010 0f01 	tst.w	r0, #1
   31b58:	4b18      	ldr	r3, [pc, #96]	; (31bbc <db_hash_process+0xb4>)
   31b5a:	d113      	bne.n	31b84 <db_hash_process+0x7c>
		gatt_sc.start = start;
   31b5c:	4a18      	ldr	r2, [pc, #96]	; (31bc0 <db_hash_process+0xb8>)
   31b5e:	619a      	str	r2, [r3, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   31b60:	4813      	ldr	r0, [pc, #76]	; (31bb0 <db_hash_process+0xa8>)
   31b62:	f01c f898 	bl	4dc96 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   31b66:	0783      	lsls	r3, r0, #30
   31b68:	d405      	bmi.n	31b76 <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   31b6a:	4813      	ldr	r0, [pc, #76]	; (31bb8 <db_hash_process+0xb0>)
   31b6c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   31b70:	2300      	movs	r3, #0
   31b72:	f016 fc9d 	bl	484b0 <k_work_reschedule>
}
   31b76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   31b7a:	490e      	ldr	r1, [pc, #56]	; (31bb4 <db_hash_process+0xac>)
   31b7c:	4811      	ldr	r0, [pc, #68]	; (31bc4 <db_hash_process+0xbc>)
   31b7e:	2210      	movs	r2, #16
   31b80:	f7fa bb66 	b.w	2c250 <settings_save_one>
	if (new_start >= *start && new_end <= *end) {
   31b84:	8b1a      	ldrh	r2, [r3, #24]
   31b86:	8b58      	ldrh	r0, [r3, #26]
   31b88:	2a01      	cmp	r2, #1
   31b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   31b8e:	d805      	bhi.n	31b9c <db_hash_process+0x94>
   31b90:	4290      	cmp	r0, r2
   31b92:	d0f0      	beq.n	31b76 <db_hash_process+0x6e>
		*end = new_end;
   31b94:	f64f 72ff 	movw	r2, #65535	; 0xffff
   31b98:	835a      	strh	r2, [r3, #26]
   31b9a:	e7e1      	b.n	31b60 <db_hash_process+0x58>
	if (*end < new_end) {
   31b9c:	4290      	cmp	r0, r2
		*start = new_start;
   31b9e:	8319      	strh	r1, [r3, #24]
	if (*end < new_end) {
   31ba0:	d0de      	beq.n	31b60 <db_hash_process+0x58>
   31ba2:	e7f7      	b.n	31b94 <db_hash_process+0x8c>
}
   31ba4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	db_hash_gen(true);
   31ba8:	2001      	movs	r0, #1
   31baa:	f7ff bf73 	b.w	31a94 <db_hash_gen>
   31bae:	bf00      	nop
   31bb0:	20002620 	.word	0x20002620
   31bb4:	20002558 	.word	0x20002558
   31bb8:	200025f0 	.word	0x200025f0
   31bbc:	200025d0 	.word	0x200025d0
   31bc0:	ffff0001 	.word	0xffff0001
   31bc4:	000542bc 	.word	0x000542bc

00031bc8 <ccc_set_direct>:
{
   31bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31bcc:	b0b8      	sub	sp, #224	; 0xe0
   31bce:	460c      	mov	r4, r1
   31bd0:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   31bd2:	4921      	ldr	r1, [pc, #132]	; (31c58 <ccc_set_direct+0x90>)
   31bd4:	983e      	ldr	r0, [sp, #248]	; 0xf8
   31bd6:	466a      	mov	r2, sp
{
   31bd8:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   31bda:	f018 fd48 	bl	4a66e <settings_name_steq>
   31bde:	2800      	cmp	r0, #0
   31be0:	d037      	beq.n	31c52 <ccc_set_direct+0x8a>
		return ccc_set(name, len, read_cb, cb_arg);
   31be2:	9d00      	ldr	r5, [sp, #0]
		settings_name_next(name, &next);
   31be4:	a901      	add	r1, sp, #4
   31be6:	4628      	mov	r0, r5
   31be8:	f018 fd65 	bl	4a6b6 <settings_name_next>
		if (!name) {
   31bec:	b165      	cbz	r5, 31c08 <ccc_set_direct+0x40>
		} else if (!next) {
   31bee:	9801      	ldr	r0, [sp, #4]
   31bf0:	b970      	cbnz	r0, 31c10 <ccc_set_direct+0x48>
		err = bt_settings_decode_key(name, &addr);
   31bf2:	f10d 0808 	add.w	r8, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   31bf6:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   31bf8:	4628      	mov	r0, r5
   31bfa:	4641      	mov	r1, r8
			load.addr_with_id.id = BT_ID_DEFAULT;
   31bfc:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   31c00:	f01a f8f2 	bl	4bde8 <bt_settings_decode_key>
		if (err) {
   31c04:	4605      	mov	r5, r0
   31c06:	b150      	cbz	r0, 31c1e <ccc_set_direct+0x56>
			return -EINVAL;
   31c08:	f06f 0415 	mvn.w	r4, #21
   31c0c:	4625      	mov	r5, r4
   31c0e:	e01a      	b.n	31c46 <ccc_set_direct+0x7e>
			unsigned long next_id = strtoul(next, NULL, 10);
   31c10:	220a      	movs	r2, #10
   31c12:	2100      	movs	r1, #0
   31c14:	f019 ff68 	bl	4bae8 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   31c18:	2800      	cmp	r0, #0
   31c1a:	d0ea      	beq.n	31bf2 <ccc_set_direct+0x2a>
   31c1c:	e7f4      	b.n	31c08 <ccc_set_direct+0x40>
		load.addr_with_id.addr = &addr;
   31c1e:	f8cd 8010 	str.w	r8, [sp, #16]
		if (len_rd) {
   31c22:	b1a4      	cbz	r4, 31c4e <ccc_set_direct+0x86>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   31c24:	22c0      	movs	r2, #192	; 0xc0
   31c26:	a908      	add	r1, sp, #32
   31c28:	4638      	mov	r0, r7
   31c2a:	47b0      	blx	r6
			if (len < 0) {
   31c2c:	1e04      	subs	r4, r0, #0
   31c2e:	dbed      	blt.n	31c0c <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   31c30:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   31c32:	ab08      	add	r3, sp, #32
			load.count = len / sizeof(*ccc_store);
   31c34:	e9cd 3406 	strd	r3, r4, [sp, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   31c38:	4a08      	ldr	r2, [pc, #32]	; (31c5c <ccc_set_direct+0x94>)
   31c3a:	ab04      	add	r3, sp, #16
   31c3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   31c40:	2001      	movs	r0, #1
   31c42:	f01c fc8c 	bl	4e55e <bt_gatt_foreach_attr>
}
   31c46:	4628      	mov	r0, r5
   31c48:	b038      	add	sp, #224	; 0xe0
   31c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31c4e:	4623      	mov	r3, r4
   31c50:	e7f0      	b.n	31c34 <ccc_set_direct+0x6c>
			return -EINVAL;
   31c52:	f06f 0515 	mvn.w	r5, #21
   31c56:	e7f6      	b.n	31c46 <ccc_set_direct+0x7e>
   31c58:	000542c4 	.word	0x000542c4
   31c5c:	00031421 	.word	0x00031421

00031c60 <gatt_indicate>:
{
   31c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   31c64:	4615      	mov	r5, r2
   31c66:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   31c68:	2214      	movs	r2, #20
   31c6a:	6869      	ldr	r1, [r5, #4]
{
   31c6c:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   31c6e:	f01c fc81 	bl	4e574 <bt_gatt_check_perm>
   31c72:	4607      	mov	r7, r0
   31c74:	2800      	cmp	r0, #0
   31c76:	d13b      	bne.n	31cf0 <gatt_indicate+0x90>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   31c78:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   31c7c:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   31c7e:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   31c80:	f7ff fa1c 	bl	310bc <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   31c84:	3602      	adds	r6, #2
	if (!req) {
   31c86:	4604      	mov	r4, r0
   31c88:	b178      	cbz	r0, 31caa <gatt_indicate+0x4a>
	req->func = func;
   31c8a:	4b1b      	ldr	r3, [pc, #108]	; (31cf8 <gatt_indicate+0x98>)
	req->len = len;
   31c8c:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   31c8e:	211d      	movs	r1, #29
   31c90:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   31c92:	60c7      	str	r7, [r0, #12]
	req->func = func;
   31c94:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   31c96:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   31c98:	4632      	mov	r2, r6
   31c9a:	4640      	mov	r0, r8
   31c9c:	f01b fe9b 	bl	4d9d6 <bt_att_create_pdu>
	if (!buf) {
   31ca0:	4606      	mov	r6, r0
   31ca2:	b938      	cbnz	r0, 31cb4 <gatt_indicate+0x54>
		bt_att_req_free(req);
   31ca4:	4620      	mov	r0, r4
   31ca6:	f7ff fa2b 	bl	31100 <bt_att_req_free>
		return -ENOMEM;
   31caa:	f06f 050b 	mvn.w	r5, #11
}
   31cae:	4628      	mov	r0, r5
   31cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   31cb4:	f100 0a08 	add.w	sl, r0, #8
   31cb8:	2102      	movs	r1, #2
   31cba:	4650      	mov	r0, sl
   31cbc:	f01d ffad 	bl	4fc1a <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   31cc0:	4607      	mov	r7, r0
   31cc2:	8aa9      	ldrh	r1, [r5, #20]
   31cc4:	f827 9b02 	strh.w	r9, [r7], #2
   31cc8:	4650      	mov	r0, sl
   31cca:	f01d ffa6 	bl	4fc1a <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   31cce:	8aaa      	ldrh	r2, [r5, #20]
   31cd0:	6929      	ldr	r1, [r5, #16]
   31cd2:	4638      	mov	r0, r7
   31cd4:	f019 ffc0 	bl	4bc58 <memcpy>
	req->buf = buf;
   31cd8:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   31cda:	4621      	mov	r1, r4
   31cdc:	4640      	mov	r0, r8
   31cde:	f01b ff7b 	bl	4dbd8 <bt_att_req_send>
	if (err) {
   31ce2:	4605      	mov	r5, r0
   31ce4:	2800      	cmp	r0, #0
   31ce6:	d0e2      	beq.n	31cae <gatt_indicate+0x4e>
		bt_att_req_free(req);
   31ce8:	4620      	mov	r0, r4
   31cea:	f7ff fa09 	bl	31100 <bt_att_req_free>
   31cee:	e7de      	b.n	31cae <gatt_indicate+0x4e>
		return -EPERM;
   31cf0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   31cf4:	e7db      	b.n	31cae <gatt_indicate+0x4e>
   31cf6:	bf00      	nop
   31cf8:	0004dc65 	.word	0x0004dc65

00031cfc <bt_gatt_indicate>:
{
   31cfc:	b530      	push	{r4, r5, lr}
   31cfe:	4604      	mov	r4, r0
   31d00:	b08b      	sub	sp, #44	; 0x2c
   31d02:	4837      	ldr	r0, [pc, #220]	; (31de0 <bt_gatt_indicate+0xe4>)
   31d04:	f01b ffc7 	bl	4dc96 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   31d08:	0782      	lsls	r2, r0, #30
{
   31d0a:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   31d0c:	d561      	bpl.n	31dd2 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   31d0e:	b114      	cbz	r4, 31d16 <bt_gatt_indicate+0x1a>
   31d10:	7b63      	ldrb	r3, [r4, #13]
   31d12:	2b07      	cmp	r3, #7
   31d14:	d160      	bne.n	31dd8 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   31d16:	6868      	ldr	r0, [r5, #4]
   31d18:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   31d1a:	f7ff fe31 	bl	31980 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   31d1e:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   31d20:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   31d24:	b33a      	cbz	r2, 31d76 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   31d26:	a905      	add	r1, sp, #20
   31d28:	9102      	str	r1, [sp, #8]
   31d2a:	492e      	ldr	r1, [pc, #184]	; (31de4 <bt_gatt_indicate+0xe8>)
   31d2c:	9101      	str	r1, [sp, #4]
   31d2e:	2101      	movs	r1, #1
	found->attr = NULL;
   31d30:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   31d32:	9100      	str	r1, [sp, #0]
   31d34:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   31d38:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   31d3a:	f7ff fe51 	bl	319e0 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   31d3e:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   31d40:	b91b      	cbnz	r3, 31d4a <bt_gatt_indicate+0x4e>
			return -ENOENT;
   31d42:	f06f 0001 	mvn.w	r0, #1
}
   31d46:	b00b      	add	sp, #44	; 0x2c
   31d48:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   31d4a:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   31d4c:	9b05      	ldr	r3, [sp, #20]
   31d4e:	6818      	ldr	r0, [r3, #0]
   31d50:	2300      	movs	r3, #0
   31d52:	f88d 3010 	strb.w	r3, [sp, #16]
   31d56:	a904      	add	r1, sp, #16
   31d58:	f642 0303 	movw	r3, #10243	; 0x2803
   31d5c:	f8ad 3012 	strh.w	r3, [sp, #18]
   31d60:	f01a f868 	bl	4be34 <bt_uuid_cmp>
   31d64:	b970      	cbnz	r0, 31d84 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   31d66:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   31d68:	68c3      	ldr	r3, [r0, #12]
   31d6a:	799b      	ldrb	r3, [r3, #6]
   31d6c:	069b      	lsls	r3, r3, #26
   31d6e:	d405      	bmi.n	31d7c <bt_gatt_indicate+0x80>
			return -EINVAL;
   31d70:	f06f 0015 	mvn.w	r0, #21
   31d74:	e7e7      	b.n	31d46 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   31d76:	2800      	cmp	r0, #0
   31d78:	d1e8      	bne.n	31d4c <bt_gatt_indicate+0x50>
   31d7a:	e7e2      	b.n	31d42 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   31d7c:	f01c fba1 	bl	4e4c2 <bt_gatt_attr_value_handle>
   31d80:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   31d84:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   31d88:	b13c      	cbz	r4, 31d9a <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   31d8a:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   31d8c:	4601      	mov	r1, r0
		params->_ref = 1;
   31d8e:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   31d90:	462a      	mov	r2, r5
   31d92:	4620      	mov	r0, r4
   31d94:	f7ff ff64 	bl	31c60 <gatt_indicate>
   31d98:	e7d5      	b.n	31d46 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   31d9a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   31d9e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   31da0:	2302      	movs	r3, #2
   31da2:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31da6:	f642 1302 	movw	r3, #10498	; 0x2902
   31daa:	f8ad 3012 	strh.w	r3, [sp, #18]
   31dae:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   31db0:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31db2:	9302      	str	r3, [sp, #8]
   31db4:	4b0c      	ldr	r3, [pc, #48]	; (31de8 <bt_gatt_indicate+0xec>)
   31db6:	9301      	str	r3, [sp, #4]
   31db8:	2301      	movs	r3, #1
   31dba:	9300      	str	r3, [sp, #0]
   31dbc:	aa04      	add	r2, sp, #16
   31dbe:	4623      	mov	r3, r4
   31dc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   31dc4:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31dc6:	f88d 4010 	strb.w	r4, [sp, #16]
   31dca:	f7ff fe09 	bl	319e0 <bt_gatt_foreach_attr_type>
	return data.err;
   31dce:	9807      	ldr	r0, [sp, #28]
   31dd0:	e7b9      	b.n	31d46 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   31dd2:	f06f 000a 	mvn.w	r0, #10
   31dd6:	e7b6      	b.n	31d46 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   31dd8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   31ddc:	e7b3      	b.n	31d46 <bt_gatt_indicate+0x4a>
   31dde:	bf00      	nop
   31de0:	200000fc 	.word	0x200000fc
   31de4:	0004dc8b 	.word	0x0004dc8b
   31de8:	00031f31 	.word	0x00031f31

00031dec <sc_process>:
{
   31dec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   31dee:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   31df2:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   31df4:	f850 3c08 	ldr.w	r3, [r0, #-8]
   31df8:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   31dfa:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   31dfe:	f06f 0101 	mvn.w	r1, #1
   31e02:	4628      	mov	r0, r5
   31e04:	f01c f8a8 	bl	4df58 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   31e08:	4b0d      	ldr	r3, [pc, #52]	; (31e40 <sc_process+0x54>)
   31e0a:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   31e0e:	4b0d      	ldr	r3, [pc, #52]	; (31e44 <sc_process+0x58>)
   31e10:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   31e14:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   31e16:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   31e18:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   31e1c:	2304      	movs	r3, #4
	sc->start = 0U;
   31e1e:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   31e22:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   31e26:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   31e2a:	4631      	mov	r1, r6
   31e2c:	f7ff ff66 	bl	31cfc <bt_gatt_indicate>
   31e30:	b918      	cbnz	r0, 31e3a <sc_process+0x4e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   31e32:	2102      	movs	r1, #2
   31e34:	4628      	mov	r0, r5
   31e36:	f01b ff87 	bl	4dd48 <atomic_or>
}
   31e3a:	b002      	add	sp, #8
   31e3c:	bd70      	pop	{r4, r5, r6, pc}
   31e3e:	bf00      	nop
   31e40:	00052890 	.word	0x00052890
   31e44:	00031865 	.word	0x00031865

00031e48 <bt_gatt_notify_cb>:
{
   31e48:	b530      	push	{r4, r5, lr}
   31e4a:	4604      	mov	r4, r0
   31e4c:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   31e4e:	4835      	ldr	r0, [pc, #212]	; (31f24 <bt_gatt_notify_cb+0xdc>)
   31e50:	f01b ff21 	bl	4dc96 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   31e54:	0782      	lsls	r2, r0, #30
{
   31e56:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   31e58:	d55d      	bpl.n	31f16 <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   31e5a:	b114      	cbz	r4, 31e62 <bt_gatt_notify_cb+0x1a>
   31e5c:	7b63      	ldrb	r3, [r4, #13]
   31e5e:	2b07      	cmp	r3, #7
   31e60:	d15c      	bne.n	31f1c <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   31e62:	6868      	ldr	r0, [r5, #4]
   31e64:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   31e66:	f7ff fd8b 	bl	31980 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   31e6a:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   31e6c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   31e70:	b33a      	cbz	r2, 31ec2 <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   31e72:	a905      	add	r1, sp, #20
   31e74:	9102      	str	r1, [sp, #8]
   31e76:	492c      	ldr	r1, [pc, #176]	; (31f28 <bt_gatt_notify_cb+0xe0>)
   31e78:	9101      	str	r1, [sp, #4]
   31e7a:	2101      	movs	r1, #1
	found->attr = NULL;
   31e7c:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   31e7e:	9100      	str	r1, [sp, #0]
   31e80:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   31e84:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   31e86:	f7ff fdab 	bl	319e0 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   31e8a:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   31e8c:	b91b      	cbnz	r3, 31e96 <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   31e8e:	f06f 0001 	mvn.w	r0, #1
}
   31e92:	b00b      	add	sp, #44	; 0x2c
   31e94:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   31e96:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   31e98:	9b05      	ldr	r3, [sp, #20]
   31e9a:	6818      	ldr	r0, [r3, #0]
   31e9c:	2300      	movs	r3, #0
   31e9e:	f88d 3010 	strb.w	r3, [sp, #16]
   31ea2:	a904      	add	r1, sp, #16
   31ea4:	f642 0303 	movw	r3, #10243	; 0x2803
   31ea8:	f8ad 3012 	strh.w	r3, [sp, #18]
   31eac:	f019 ffc2 	bl	4be34 <bt_uuid_cmp>
   31eb0:	b970      	cbnz	r0, 31ed0 <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   31eb2:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   31eb4:	68c3      	ldr	r3, [r0, #12]
   31eb6:	799b      	ldrb	r3, [r3, #6]
   31eb8:	06db      	lsls	r3, r3, #27
   31eba:	d405      	bmi.n	31ec8 <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   31ebc:	f06f 0015 	mvn.w	r0, #21
   31ec0:	e7e7      	b.n	31e92 <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   31ec2:	2800      	cmp	r0, #0
   31ec4:	d1e8      	bne.n	31e98 <bt_gatt_notify_cb+0x50>
   31ec6:	e7e2      	b.n	31e8e <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   31ec8:	f01c fafb 	bl	4e4c2 <bt_gatt_attr_value_handle>
   31ecc:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   31ed0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   31ed4:	b12c      	cbz	r4, 31ee2 <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   31ed6:	4601      	mov	r1, r0
   31ed8:	462a      	mov	r2, r5
   31eda:	4620      	mov	r0, r4
   31edc:	f01c fb75 	bl	4e5ca <gatt_notify>
   31ee0:	e7d7      	b.n	31e92 <bt_gatt_notify_cb+0x4a>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31ee2:	f642 1202 	movw	r2, #10498	; 0x2902
   31ee6:	f8ad 2012 	strh.w	r2, [sp, #18]
   31eea:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   31eec:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31ef0:	9202      	str	r2, [sp, #8]
   31ef2:	4a0e      	ldr	r2, [pc, #56]	; (31f2c <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
   31ef4:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   31ef6:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31ef8:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   31efc:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31f00:	aa04      	add	r2, sp, #16
   31f02:	4623      	mov	r3, r4
   31f04:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   31f08:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31f0a:	f88d 4010 	strb.w	r4, [sp, #16]
   31f0e:	f7ff fd67 	bl	319e0 <bt_gatt_foreach_attr_type>
	return data.err;
   31f12:	9807      	ldr	r0, [sp, #28]
   31f14:	e7bd      	b.n	31e92 <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   31f16:	f06f 000a 	mvn.w	r0, #10
   31f1a:	e7ba      	b.n	31e92 <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   31f1c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   31f20:	e7b7      	b.n	31e92 <bt_gatt_notify_cb+0x4a>
   31f22:	bf00      	nop
   31f24:	200000fc 	.word	0x200000fc
   31f28:	0004dc8b 	.word	0x0004dc8b
   31f2c:	00031f31 	.word	0x00031f31

00031f30 <notify_cb>:
{
   31f30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   31f34:	4b3d      	ldr	r3, [pc, #244]	; (3202c <notify_cb+0xfc>)
{
   31f36:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   31f38:	6882      	ldr	r2, [r0, #8]
   31f3a:	429a      	cmp	r2, r3
{
   31f3c:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   31f3e:	d005      	beq.n	31f4c <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   31f40:	f04f 0901 	mov.w	r9, #1
}
   31f44:	4648      	mov	r0, r9
   31f46:	b003      	add	sp, #12
   31f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   31f4c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   31f50:	4b37      	ldr	r3, [pc, #220]	; (32030 <notify_cb+0x100>)
   31f52:	459a      	cmp	sl, r3
   31f54:	d018      	beq.n	31f88 <notify_cb+0x58>
   31f56:	f10a 0701 	add.w	r7, sl, #1
   31f5a:	f10a 0b3d 	add.w	fp, sl, #61	; 0x3d
		if (cfg->value != data->type) {
   31f5e:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   31f62:	89ab      	ldrh	r3, [r5, #12]
   31f64:	429a      	cmp	r2, r3
   31f66:	d10b      	bne.n	31f80 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   31f68:	f817 0c01 	ldrb.w	r0, [r7, #-1]
   31f6c:	4639      	mov	r1, r7
   31f6e:	f7fd ffb5 	bl	2fedc <bt_conn_lookup_addr_le>
		if (!conn) {
   31f72:	4604      	mov	r4, r0
   31f74:	b120      	cbz	r0, 31f80 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
   31f76:	7b43      	ldrb	r3, [r0, #13]
   31f78:	2b07      	cmp	r3, #7
   31f7a:	d029      	beq.n	31fd0 <notify_cb+0xa0>
			bt_conn_unref(conn);
   31f7c:	f01a fea6 	bl	4cccc <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   31f80:	370a      	adds	r7, #10
   31f82:	45bb      	cmp	fp, r7
   31f84:	d1eb      	bne.n	31f5e <notify_cb+0x2e>
   31f86:	e7db      	b.n	31f40 <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   31f88:	2600      	movs	r6, #0
   31f8a:	4c2a      	ldr	r4, [pc, #168]	; (32034 <notify_cb+0x104>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   31f8c:	4637      	mov	r7, r6
   31f8e:	4669      	mov	r1, sp
   31f90:	4620      	mov	r0, r4
   31f92:	9700      	str	r7, [sp, #0]
   31f94:	f8cd 7003 	str.w	r7, [sp, #3]
   31f98:	f01b fee5 	bl	4dd66 <bt_addr_le_cmp>
   31f9c:	b178      	cbz	r0, 31fbe <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   31f9e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   31fa2:	2207      	movs	r2, #7
   31fa4:	4621      	mov	r1, r4
   31fa6:	f7fd ffbd 	bl	2ff24 <bt_conn_lookup_state_le>
			if (!conn) {
   31faa:	b970      	cbnz	r0, 31fca <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
   31fac:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   31fae:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   31fb2:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   31fb4:	4621      	mov	r1, r4
   31fb6:	8853      	ldrh	r3, [r2, #2]
   31fb8:	8812      	ldrh	r2, [r2, #0]
   31fba:	f01b ff99 	bl	4def0 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   31fbe:	3601      	adds	r6, #1
   31fc0:	2e0c      	cmp	r6, #12
   31fc2:	f104 040c 	add.w	r4, r4, #12
   31fc6:	d1e2      	bne.n	31f8e <notify_cb+0x5e>
   31fc8:	e7c5      	b.n	31f56 <notify_cb+0x26>
			bt_conn_unref(conn);
   31fca:	f01a fe7f 	bl	4cccc <bt_conn_unref>
   31fce:	e7f6      	b.n	31fbe <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   31fd0:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
   31fd4:	b123      	cbz	r3, 31fe0 <notify_cb+0xb0>
   31fd6:	4641      	mov	r1, r8
   31fd8:	4798      	blx	r3
   31fda:	b908      	cbnz	r0, 31fe0 <notify_cb+0xb0>
			bt_conn_unref(conn);
   31fdc:	4620      	mov	r0, r4
   31fde:	e7cd      	b.n	31f7c <notify_cb+0x4c>
		if (bt_gatt_check_perm(conn, attr,
   31fe0:	2214      	movs	r2, #20
   31fe2:	4641      	mov	r1, r8
   31fe4:	4620      	mov	r0, r4
   31fe6:	f01c fac5 	bl	4e574 <bt_gatt_check_perm>
   31fea:	4681      	mov	r9, r0
   31fec:	2800      	cmp	r0, #0
   31fee:	d1c7      	bne.n	31f80 <notify_cb+0x50>
		if (data->type == BT_GATT_CCC_INDICATE) {
   31ff0:	89ab      	ldrh	r3, [r5, #12]
			err = gatt_indicate(conn, data->handle,
   31ff2:	88a9      	ldrh	r1, [r5, #4]
   31ff4:	692a      	ldr	r2, [r5, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   31ff6:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   31ff8:	4620      	mov	r0, r4
		if (data->type == BT_GATT_CCC_INDICATE) {
   31ffa:	d10d      	bne.n	32018 <notify_cb+0xe8>
			err = gatt_indicate(conn, data->handle,
   31ffc:	f7ff fe30 	bl	31c60 <gatt_indicate>
			if (err == 0) {
   32000:	4606      	mov	r6, r0
   32002:	b960      	cbnz	r0, 3201e <notify_cb+0xee>
				data->ind_params->_ref++;
   32004:	692a      	ldr	r2, [r5, #16]
   32006:	7d93      	ldrb	r3, [r2, #22]
   32008:	3301      	adds	r3, #1
   3200a:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   3200c:	4620      	mov	r0, r4
   3200e:	f01a fe5d 	bl	4cccc <bt_conn_unref>
		data->err = 0;
   32012:	2300      	movs	r3, #0
   32014:	60ab      	str	r3, [r5, #8]
   32016:	e7b3      	b.n	31f80 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   32018:	f01c fad7 	bl	4e5ca <gatt_notify>
   3201c:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   3201e:	4620      	mov	r0, r4
   32020:	f01a fe54 	bl	4cccc <bt_conn_unref>
		if (err < 0) {
   32024:	2e00      	cmp	r6, #0
   32026:	daf4      	bge.n	32012 <notify_cb+0xe2>
   32028:	e78c      	b.n	31f44 <notify_cb+0x14>
   3202a:	bf00      	nop
   3202c:	00031509 	.word	0x00031509
   32030:	20000880 	.word	0x20000880
   32034:	2000721d 	.word	0x2000721d

00032038 <update_ccc>:
{
   32038:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   3203c:	4b31      	ldr	r3, [pc, #196]	; (32104 <update_ccc+0xcc>)
	struct bt_conn *conn = data->conn;
   3203e:	6814      	ldr	r4, [r2, #0]
{
   32040:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   32042:	6882      	ldr	r2, [r0, #8]
   32044:	429a      	cmp	r2, r3
{
   32046:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   32048:	d158      	bne.n	320fc <update_ccc+0xc4>
	ccc = attr->user_data;
   3204a:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   3204e:	f108 0501 	add.w	r5, r8, #1
   32052:	f108 093d 	add.w	r9, r8, #61	; 0x3d
		if (!cfg->value ||
   32056:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   3205a:	b1f3      	cbz	r3, 3209a <update_ccc+0x62>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   3205c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   32060:	462a      	mov	r2, r5
   32062:	4620      	mov	r0, r4
   32064:	f01a fedb 	bl	4ce1e <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   32068:	b1b8      	cbz	r0, 3209a <update_ccc+0x62>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   3206a:	222a      	movs	r2, #42	; 0x2a
   3206c:	4631      	mov	r1, r6
   3206e:	4620      	mov	r0, r4
   32070:	f01c fa80 	bl	4e574 <bt_gatt_check_perm>
		if (err) {
   32074:	b1a8      	cbz	r0, 320a2 <update_ccc+0x6a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   32076:	2803      	cmp	r0, #3
   32078:	d00f      	beq.n	3209a <update_ccc+0x62>
			sec = BT_SECURITY_L2;
   3207a:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   3207c:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   3207e:	bf0c      	ite	eq
   32080:	f04f 0a03 	moveq.w	sl, #3
   32084:	f04f 0a02 	movne.w	sl, #2
			    bt_conn_get_security(conn) < sec) {
   32088:	f01a fec7 	bl	4ce1a <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   3208c:	4582      	cmp	sl, r0
   3208e:	d908      	bls.n	320a2 <update_ccc+0x6a>
				if (data->sec < sec) {
   32090:	793b      	ldrb	r3, [r7, #4]
   32092:	4553      	cmp	r3, sl
   32094:	d201      	bcs.n	3209a <update_ccc+0x62>
					data->sec = sec;
   32096:	f887 a004 	strb.w	sl, [r7, #4]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   3209a:	350a      	adds	r5, #10
   3209c:	454d      	cmp	r5, r9
   3209e:	d1da      	bne.n	32056 <update_ccc+0x1e>
   320a0:	e02c      	b.n	320fc <update_ccc+0xc4>
		gatt_ccc_changed(attr, ccc);
   320a2:	4641      	mov	r1, r8
   320a4:	4630      	mov	r0, r6
   320a6:	f01b fdc6 	bl	4dc36 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   320aa:	4b17      	ldr	r3, [pc, #92]	; (32108 <update_ccc+0xd0>)
   320ac:	4598      	cmp	r8, r3
   320ae:	d125      	bne.n	320fc <update_ccc+0xc4>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   320b0:	7a20      	ldrb	r0, [r4, #8]
   320b2:	f104 0188 	add.w	r1, r4, #136	; 0x88
   320b6:	f7ff f959 	bl	3136c <find_sc_cfg>
	if (!cfg) {
   320ba:	b1f8      	cbz	r0, 320fc <update_ccc+0xc4>
	if (!(cfg->data.start || cfg->data.end)) {
   320bc:	8902      	ldrh	r2, [r0, #8]
   320be:	8943      	ldrh	r3, [r0, #10]
   320c0:	ea53 0102 	orrs.w	r1, r3, r2
   320c4:	d01a      	beq.n	320fc <update_ccc+0xc4>
	index = bt_conn_index(conn);
   320c6:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   320c8:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   320cc:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   320d0:	f7fd fdd0 	bl	2fc74 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   320d4:	490d      	ldr	r1, [pc, #52]	; (3210c <update_ccc+0xd4>)
   320d6:	4a0e      	ldr	r2, [pc, #56]	; (32110 <update_ccc+0xd8>)
   320d8:	2318      	movs	r3, #24
   320da:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   320de:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   320e0:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   320e2:	4a0c      	ldr	r2, [pc, #48]	; (32114 <update_ccc+0xdc>)
   320e4:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   320e6:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   320e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   320ec:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   320ee:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   320f0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   320f4:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   320f6:	4620      	mov	r0, r4
   320f8:	f7ff fe00 	bl	31cfc <bt_gatt_indicate>
}
   320fc:	2001      	movs	r0, #1
   320fe:	b002      	add	sp, #8
   32100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32104:	00031509 	.word	0x00031509
   32108:	20000880 	.word	0x20000880
   3210c:	20004624 	.word	0x20004624
   32110:	00052890 	.word	0x00052890
   32114:	0004e455 	.word	0x0004e455

00032118 <bt_gatt_discover>:
{
   32118:	b570      	push	{r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   3211a:	7b43      	ldrb	r3, [r0, #13]
   3211c:	2b07      	cmp	r3, #7
{
   3211e:	b086      	sub	sp, #24
   32120:	4605      	mov	r5, r0
   32122:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
   32124:	f040 8099 	bne.w	3225a <bt_gatt_discover+0x142>
	switch (params->type) {
   32128:	7c0b      	ldrb	r3, [r1, #16]
   3212a:	2b06      	cmp	r3, #6
   3212c:	d867      	bhi.n	321fe <bt_gatt_discover+0xe6>
   3212e:	e8df f003 	tbb	[pc, r3]
   32132:	0404      	.short	0x0404
   32134:	8d595151 	.word	0x8d595151
   32138:	20          	.byte	0x20
   32139:	00          	.byte	0x00
		if (params->uuid) {
   3213a:	680b      	ldr	r3, [r1, #0]
   3213c:	b18b      	cbz	r3, 32162 <bt_gatt_discover+0x4a>
	switch (params->uuid->type) {
   3213e:	781b      	ldrb	r3, [r3, #0]
   32140:	b16b      	cbz	r3, 3215e <bt_gatt_discover+0x46>
   32142:	2b02      	cmp	r3, #2
   32144:	d15b      	bne.n	321fe <bt_gatt_discover+0xe6>
   32146:	2316      	movs	r3, #22
	return gatt_req_send(conn, gatt_find_type_rsp, params,
   32148:	9301      	str	r3, [sp, #4]
   3214a:	2306      	movs	r3, #6
   3214c:	9300      	str	r3, [sp, #0]
   3214e:	4944      	ldr	r1, [pc, #272]	; (32260 <bt_gatt_discover+0x148>)
   32150:	4b44      	ldr	r3, [pc, #272]	; (32264 <bt_gatt_discover+0x14c>)
   32152:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   32154:	4628      	mov	r0, r5
   32156:	f01b ff46 	bl	4dfe6 <gatt_req_send>
}
   3215a:	b006      	add	sp, #24
   3215c:	bd70      	pop	{r4, r5, r6, pc}
		len += BT_UUID_SIZE_16;
   3215e:	2308      	movs	r3, #8
   32160:	e7f2      	b.n	32148 <bt_gatt_discover+0x30>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   32162:	2310      	movs	r3, #16
   32164:	2104      	movs	r1, #4
   32166:	e9cd 3100 	strd	r3, r1, [sp]
   3216a:	4622      	mov	r2, r4
   3216c:	4b3e      	ldr	r3, [pc, #248]	; (32268 <bt_gatt_discover+0x150>)
   3216e:	493f      	ldr	r1, [pc, #252]	; (3226c <bt_gatt_discover+0x154>)
   32170:	e7f0      	b.n	32154 <bt_gatt_discover+0x3c>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   32172:	6808      	ldr	r0, [r1, #0]
   32174:	2800      	cmp	r0, #0
   32176:	d042      	beq.n	321fe <bt_gatt_discover+0xe6>
   32178:	7806      	ldrb	r6, [r0, #0]
   3217a:	2e00      	cmp	r6, #0
   3217c:	d13f      	bne.n	321fe <bt_gatt_discover+0xe6>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   3217e:	f44f 5324 	mov.w	r3, #10496	; 0x2900
   32182:	a902      	add	r1, sp, #8
   32184:	f88d 6008 	strb.w	r6, [sp, #8]
   32188:	f8ad 300a 	strh.w	r3, [sp, #10]
   3218c:	f019 fe52 	bl	4be34 <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   32190:	b300      	cbz	r0, 321d4 <bt_gatt_discover+0xbc>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   32192:	f642 1302 	movw	r3, #10498	; 0x2902
   32196:	6820      	ldr	r0, [r4, #0]
   32198:	f88d 600c 	strb.w	r6, [sp, #12]
   3219c:	a903      	add	r1, sp, #12
   3219e:	f8ad 300e 	strh.w	r3, [sp, #14]
   321a2:	f019 fe47 	bl	4be34 <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   321a6:	b1a8      	cbz	r0, 321d4 <bt_gatt_discover+0xbc>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   321a8:	f642 1303 	movw	r3, #10499	; 0x2903
   321ac:	6820      	ldr	r0, [r4, #0]
   321ae:	f88d 6010 	strb.w	r6, [sp, #16]
   321b2:	a904      	add	r1, sp, #16
   321b4:	f8ad 3012 	strh.w	r3, [sp, #18]
   321b8:	f019 fe3c 	bl	4be34 <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   321bc:	b150      	cbz	r0, 321d4 <bt_gatt_discover+0xbc>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
   321be:	f642 1304 	movw	r3, #10500	; 0x2904
   321c2:	6820      	ldr	r0, [r4, #0]
   321c4:	f88d 6014 	strb.w	r6, [sp, #20]
   321c8:	a905      	add	r1, sp, #20
   321ca:	f8ad 3016 	strh.w	r3, [sp, #22]
   321ce:	f019 fe31 	bl	4be34 <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   321d2:	b9a0      	cbnz	r0, 321fe <bt_gatt_discover+0xe6>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
   321d4:	2308      	movs	r3, #8
   321d6:	2204      	movs	r2, #4
   321d8:	e9cd 3200 	strd	r3, r2, [sp]
   321dc:	4924      	ldr	r1, [pc, #144]	; (32270 <bt_gatt_discover+0x158>)
   321de:	4b25      	ldr	r3, [pc, #148]	; (32274 <bt_gatt_discover+0x15c>)
   321e0:	4622      	mov	r2, r4
   321e2:	e7b7      	b.n	32154 <bt_gatt_discover+0x3c>
		if (params->uuid &&
   321e4:	6808      	ldr	r0, [r1, #0]
   321e6:	b388      	cbz	r0, 3224c <bt_gatt_discover+0x134>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   321e8:	2600      	movs	r6, #0
   321ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   321ee:	a902      	add	r1, sp, #8
   321f0:	f88d 6008 	strb.w	r6, [sp, #8]
   321f4:	f8ad 300a 	strh.w	r3, [sp, #10]
   321f8:	f019 fe1c 	bl	4be34 <bt_uuid_cmp>
		if (params->uuid &&
   321fc:	b910      	cbnz	r0, 32204 <bt_gatt_discover+0xec>
			return -EINVAL;
   321fe:	f06f 0015 	mvn.w	r0, #21
   32202:	e7aa      	b.n	3215a <bt_gatt_discover+0x42>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   32204:	f642 0301 	movw	r3, #10241	; 0x2801
   32208:	6820      	ldr	r0, [r4, #0]
   3220a:	f88d 600c 	strb.w	r6, [sp, #12]
   3220e:	a903      	add	r1, sp, #12
   32210:	f8ad 300e 	strh.w	r3, [sp, #14]
   32214:	f019 fe0e 	bl	4be34 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   32218:	2800      	cmp	r0, #0
   3221a:	d0f0      	beq.n	321fe <bt_gatt_discover+0xe6>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   3221c:	f642 0302 	movw	r3, #10242	; 0x2802
   32220:	6820      	ldr	r0, [r4, #0]
   32222:	f88d 6010 	strb.w	r6, [sp, #16]
   32226:	a904      	add	r1, sp, #16
   32228:	f8ad 3012 	strh.w	r3, [sp, #18]
   3222c:	f019 fe02 	bl	4be34 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   32230:	2800      	cmp	r0, #0
   32232:	d0e4      	beq.n	321fe <bt_gatt_discover+0xe6>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   32234:	f642 0303 	movw	r3, #10243	; 0x2803
   32238:	6820      	ldr	r0, [r4, #0]
   3223a:	f88d 6014 	strb.w	r6, [sp, #20]
   3223e:	a905      	add	r1, sp, #20
   32240:	f8ad 3016 	strh.w	r3, [sp, #22]
   32244:	f019 fdf6 	bl	4be34 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   32248:	2800      	cmp	r0, #0
   3224a:	d0d8      	beq.n	321fe <bt_gatt_discover+0xe6>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   3224c:	2304      	movs	r3, #4
   3224e:	e9cd 3300 	strd	r3, r3, [sp]
   32252:	4909      	ldr	r1, [pc, #36]	; (32278 <bt_gatt_discover+0x160>)
   32254:	4b09      	ldr	r3, [pc, #36]	; (3227c <bt_gatt_discover+0x164>)
   32256:	4622      	mov	r2, r4
   32258:	e77c      	b.n	32154 <bt_gatt_discover+0x3c>
		return -ENOTCONN;
   3225a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   3225e:	e77c      	b.n	3215a <bt_gatt_discover+0x42>
   32260:	0004e66d 	.word	0x0004e66d
   32264:	0004e241 	.word	0x0004e241
   32268:	0004e085 	.word	0x0004e085
   3226c:	0004e70b 	.word	0x0004e70b
   32270:	00032281 	.word	0x00032281
   32274:	0004e0b5 	.word	0x0004e0b5
   32278:	0004e889 	.word	0x0004e889
   3227c:	0004e06d 	.word	0x0004e06d

00032280 <gatt_read_type_rsp>:
{
   32280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32284:	b093      	sub	sp, #76	; 0x4c
   32286:	4680      	mov	r8, r0
   32288:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   3228a:	4617      	mov	r7, r2
	if (err) {
   3228c:	b131      	cbz	r1, 3229c <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   3228e:	686b      	ldr	r3, [r5, #4]
   32290:	462a      	mov	r2, r5
   32292:	2100      	movs	r1, #0
}
   32294:	b013      	add	sp, #76	; 0x4c
   32296:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
   3229a:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   3229c:	7c2a      	ldrb	r2, [r5, #16]
   3229e:	2a02      	cmp	r2, #2
   322a0:	d171      	bne.n	32386 <gatt_read_type_rsp+0x106>
	switch (rsp->len) {
   322a2:	7838      	ldrb	r0, [r7, #0]
   322a4:	2806      	cmp	r0, #6
   322a6:	d018      	beq.n	322da <gatt_read_type_rsp+0x5a>
   322a8:	2808      	cmp	r0, #8
   322aa:	d110      	bne.n	322ce <gatt_read_type_rsp+0x4e>
	for (length--, pdu = rsp->data; length >= rsp->len;
   322ac:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
   322ae:	2600      	movs	r6, #0
		u.uuid.type = BT_UUID_TYPE_16;
   322b0:	f88d 1020 	strb.w	r1, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   322b4:	b2a4      	uxth	r4, r4
   322b6:	f107 0901 	add.w	r9, r7, #1
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   322ba:	46b3      	mov	fp, r6
   322bc:	f642 0a02 	movw	sl, #10242	; 0x2802
	for (length--, pdu = rsp->data; length >= rsp->len;
   322c0:	783b      	ldrb	r3, [r7, #0]
   322c2:	42a3      	cmp	r3, r4
   322c4:	d90b      	bls.n	322de <gatt_read_type_rsp+0x5e>
	if (length == 0U && handle) {
   322c6:	b914      	cbnz	r4, 322ce <gatt_read_type_rsp+0x4e>
   322c8:	2e00      	cmp	r6, #0
   322ca:	f040 811e 	bne.w	3250a <gatt_read_type_rsp+0x28a>
	params->func(conn, NULL, params);
   322ce:	686b      	ldr	r3, [r5, #4]
   322d0:	462a      	mov	r2, r5
   322d2:	2100      	movs	r1, #0
   322d4:	4640      	mov	r0, r8
   322d6:	4798      	blx	r3
	if (!handle) {
   322d8:	e03b      	b.n	32352 <gatt_read_type_rsp+0xd2>
	switch (rsp->len) {
   322da:	4611      	mov	r1, r2
   322dc:	e7e6      	b.n	322ac <gatt_read_type_rsp+0x2c>
		handle = sys_le16_to_cpu(data->handle);
   322de:	f8b9 3000 	ldrh.w	r3, [r9]
   322e2:	b29e      	uxth	r6, r3
		if (!handle) {
   322e4:	2e00      	cmp	r6, #0
   322e6:	d0f2      	beq.n	322ce <gatt_read_type_rsp+0x4e>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   322e8:	f8b9 0002 	ldrh.w	r0, [r9, #2]
   322ec:	f8ad 001c 	strh.w	r0, [sp, #28]
		switch (u.uuid.type) {
   322f0:	f89d 2020 	ldrb.w	r2, [sp, #32]
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   322f4:	f8b9 1004 	ldrh.w	r1, [r9, #4]
   322f8:	f8ad 101e 	strh.w	r1, [sp, #30]
		switch (u.uuid.type) {
   322fc:	b172      	cbz	r2, 3231c <gatt_read_type_rsp+0x9c>
   322fe:	2a02      	cmp	r2, #2
   32300:	d017      	beq.n	32332 <gatt_read_type_rsp+0xb2>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   32302:	6829      	ldr	r1, [r5, #0]
   32304:	b341      	cbz	r1, 32358 <gatt_read_type_rsp+0xd8>
   32306:	a808      	add	r0, sp, #32
   32308:	9303      	str	r3, [sp, #12]
   3230a:	f019 fd93 	bl	4be34 <bt_uuid_cmp>
   3230e:	9b03      	ldr	r3, [sp, #12]
   32310:	b310      	cbz	r0, 32358 <gatt_read_type_rsp+0xd8>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   32312:	783b      	ldrb	r3, [r7, #0]
   32314:	1ae4      	subs	r4, r4, r3
   32316:	b2a4      	uxth	r4, r4
   32318:	4499      	add	r9, r3
   3231a:	e7d1      	b.n	322c0 <gatt_read_type_rsp+0x40>
			value.uuid = &u.uuid;
   3231c:	aa08      	add	r2, sp, #32
   3231e:	9206      	str	r2, [sp, #24]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   32320:	f899 2006 	ldrb.w	r2, [r9, #6]
   32324:	f899 1007 	ldrb.w	r1, [r9, #7]
   32328:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   3232c:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
			break;
   32330:	e7e7      	b.n	32302 <gatt_read_type_rsp+0x82>
			params->_included.attr_handle = handle;
   32332:	812b      	strh	r3, [r5, #8]
	return gatt_req_send(conn, read_included_uuid_cb, params,
   32334:	230a      	movs	r3, #10
			params->_included.start_handle = value.start_handle;
   32336:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   32338:	81a9      	strh	r1, [r5, #12]
	return gatt_req_send(conn, read_included_uuid_cb, params,
   3233a:	4640      	mov	r0, r8
   3233c:	9201      	str	r2, [sp, #4]
   3233e:	9300      	str	r3, [sp, #0]
   32340:	4976      	ldr	r1, [pc, #472]	; (3251c <gatt_read_type_rsp+0x29c>)
   32342:	4b77      	ldr	r3, [pc, #476]	; (32520 <gatt_read_type_rsp+0x2a0>)
   32344:	462a      	mov	r2, r5
   32346:	f01b fe4e 	bl	4dfe6 <gatt_req_send>
			return read_included_uuid(conn, params);
   3234a:	b286      	uxth	r6, r0
	if (!handle) {
   3234c:	2e00      	cmp	r6, #0
   3234e:	f040 80dc 	bne.w	3250a <gatt_read_type_rsp+0x28a>
}
   32352:	b013      	add	sp, #76	; 0x4c
   32354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   32358:	aa05      	add	r2, sp, #20
   3235a:	e9cd 2b0d 	strd	r2, fp, [sp, #52]	; 0x34
   3235e:	aa06      	add	r2, sp, #24
   32360:	9210      	str	r2, [sp, #64]	; 0x40
		attr.handle = handle;
   32362:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   32366:	f88d b014 	strb.w	fp, [sp, #20]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   3236a:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   3236c:	f8ad a016 	strh.w	sl, [sp, #22]
   32370:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   32374:	f88d b046 	strb.w	fp, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   32378:	462a      	mov	r2, r5
   3237a:	a90d      	add	r1, sp, #52	; 0x34
   3237c:	4640      	mov	r0, r8
   3237e:	4798      	blx	r3
   32380:	2800      	cmp	r0, #0
   32382:	d1c6      	bne.n	32312 <gatt_read_type_rsp+0x92>
   32384:	e7e5      	b.n	32352 <gatt_read_type_rsp+0xd2>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
   32386:	2a03      	cmp	r2, #3
   32388:	d15b      	bne.n	32442 <gatt_read_type_rsp+0x1c2>
	switch (rsp->len) {
   3238a:	783a      	ldrb	r2, [r7, #0]
   3238c:	2a07      	cmp	r2, #7
   3238e:	d002      	beq.n	32396 <gatt_read_type_rsp+0x116>
   32390:	2a15      	cmp	r2, #21
   32392:	d19c      	bne.n	322ce <gatt_read_type_rsp+0x4e>
   32394:	2102      	movs	r1, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
   32396:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   32398:	f88d 1020 	strb.w	r1, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   3239c:	b2a4      	uxth	r4, r4
   3239e:	f107 0901 	add.w	r9, r7, #1
	uint16_t handle = 0U;
   323a2:	2600      	movs	r6, #0
   323a4:	f10d 0a20 	add.w	sl, sp, #32
	for (length--, pdu = rsp->data; length >= rsp->len;
   323a8:	783b      	ldrb	r3, [r7, #0]
   323aa:	42a3      	cmp	r3, r4
   323ac:	d88b      	bhi.n	322c6 <gatt_read_type_rsp+0x46>
		handle = sys_le16_to_cpu(data->handle);
   323ae:	f8b9 b000 	ldrh.w	fp, [r9]
   323b2:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   323b6:	2e00      	cmp	r6, #0
   323b8:	d089      	beq.n	322ce <gatt_read_type_rsp+0x4e>
		switch (u.uuid.type) {
   323ba:	f89d 3020 	ldrb.w	r3, [sp, #32]
   323be:	b163      	cbz	r3, 323da <gatt_read_type_rsp+0x15a>
   323c0:	2b02      	cmp	r3, #2
   323c2:	d013      	beq.n	323ec <gatt_read_type_rsp+0x16c>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   323c4:	6829      	ldr	r1, [r5, #0]
   323c6:	b1c9      	cbz	r1, 323fc <gatt_read_type_rsp+0x17c>
   323c8:	4650      	mov	r0, sl
   323ca:	f019 fd33 	bl	4be34 <bt_uuid_cmp>
   323ce:	b1a8      	cbz	r0, 323fc <gatt_read_type_rsp+0x17c>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   323d0:	783b      	ldrb	r3, [r7, #0]
   323d2:	1ae4      	subs	r4, r4, r3
   323d4:	b2a4      	uxth	r4, r4
   323d6:	4499      	add	r9, r3
   323d8:	e7e6      	b.n	323a8 <gatt_read_type_rsp+0x128>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   323da:	f899 3005 	ldrb.w	r3, [r9, #5]
   323de:	f899 2006 	ldrb.w	r2, [r9, #6]
   323e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   323e6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			break;
   323ea:	e7eb      	b.n	323c4 <gatt_read_type_rsp+0x144>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   323ec:	2210      	movs	r2, #16
   323ee:	f109 0105 	add.w	r1, r9, #5
   323f2:	f10d 0021 	add.w	r0, sp, #33	; 0x21
   323f6:	f019 fc2f 	bl	4bc58 <memcpy>
			break;
   323fa:	e7e3      	b.n	323c4 <gatt_read_type_rsp+0x144>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   323fc:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   32400:	f899 3002 	ldrb.w	r3, [r9, #2]
   32404:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   32408:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   3240c:	f88d 301e 	strb.w	r3, [sp, #30]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   32410:	f8ad 2016 	strh.w	r2, [sp, #22]
   32414:	2300      	movs	r3, #0
   32416:	aa05      	add	r2, sp, #20
   32418:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
   3241c:	aa06      	add	r2, sp, #24
   3241e:	f88d 3014 	strb.w	r3, [sp, #20]
   32422:	930f      	str	r3, [sp, #60]	; 0x3c
   32424:	9210      	str	r2, [sp, #64]	; 0x40
   32426:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   3242a:	f8cd a018 	str.w	sl, [sp, #24]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   3242e:	686b      	ldr	r3, [r5, #4]
		attr.handle = handle;
   32430:	f8ad b044 	strh.w	fp, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   32434:	462a      	mov	r2, r5
   32436:	a90d      	add	r1, sp, #52	; 0x34
   32438:	4640      	mov	r0, r8
   3243a:	4798      	blx	r3
   3243c:	2800      	cmp	r0, #0
   3243e:	d1c7      	bne.n	323d0 <gatt_read_type_rsp+0x150>
   32440:	e787      	b.n	32352 <gatt_read_type_rsp+0xd2>
	if (params->uuid->type != BT_UUID_TYPE_16) {
   32442:	682a      	ldr	r2, [r5, #0]
   32444:	7816      	ldrb	r6, [r2, #0]
   32446:	b96e      	cbnz	r6, 32464 <gatt_read_type_rsp+0x1e4>
	uuid_val = BT_UUID_16(params->uuid)->val;
   32448:	8852      	ldrh	r2, [r2, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
   3244a:	1e5c      	subs	r4, r3, #1
   3244c:	b2a4      	uxth	r4, r4
   3244e:	f107 0901 	add.w	r9, r7, #1
		switch (uuid_val) {
   32452:	f5a2 5b24 	sub.w	fp, r2, #10496	; 0x2900
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   32456:	46b2      	mov	sl, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   32458:	783b      	ldrb	r3, [r7, #0]
   3245a:	42a3      	cmp	r3, r4
   3245c:	d907      	bls.n	3246e <gatt_read_type_rsp+0x1ee>
	if (length == 0U && handle) {
   3245e:	b90c      	cbnz	r4, 32464 <gatt_read_type_rsp+0x1e4>
   32460:	2e00      	cmp	r6, #0
   32462:	d152      	bne.n	3250a <gatt_read_type_rsp+0x28a>
	params->func(conn, NULL, params);
   32464:	686b      	ldr	r3, [r5, #4]
   32466:	462a      	mov	r2, r5
   32468:	2100      	movs	r1, #0
   3246a:	4640      	mov	r0, r8
   3246c:	e712      	b.n	32294 <gatt_read_type_rsp+0x14>
		handle = sys_le16_to_cpu(data->handle);
   3246e:	f8b9 2000 	ldrh.w	r2, [r9]
   32472:	b296      	uxth	r6, r2
		if (!handle) {
   32474:	2e00      	cmp	r6, #0
   32476:	d0f5      	beq.n	32464 <gatt_read_type_rsp+0x1e4>
		switch (uuid_val) {
   32478:	f1bb 0f04 	cmp.w	fp, #4
   3247c:	d8f2      	bhi.n	32464 <gatt_read_type_rsp+0x1e4>
   3247e:	a301      	add	r3, pc, #4	; (adr r3, 32484 <gatt_read_type_rsp+0x204>)
   32480:	f853 f02b 	ldr.w	pc, [r3, fp, lsl #2]
   32484:	00032499 	.word	0x00032499
   32488:	00032465 	.word	0x00032465
   3248c:	00032499 	.word	0x00032499
   32490:	00032499 	.word	0x00032499
   32494:	000324d1 	.word	0x000324d1
			value.scc.flags = sys_get_le16(data->value);
   32498:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   3249c:	f8ad 3020 	strh.w	r3, [sp, #32]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   324a0:	682b      	ldr	r3, [r5, #0]
		attr.handle = handle;
   324a2:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   324a6:	e9cd 3a0d 	strd	r3, sl, [sp, #52]	; 0x34
   324aa:	ab08      	add	r3, sp, #32
   324ac:	9310      	str	r3, [sp, #64]	; 0x40
   324ae:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   324b2:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   324b4:	f88d a046 	strb.w	sl, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   324b8:	462a      	mov	r2, r5
   324ba:	a90d      	add	r1, sp, #52	; 0x34
   324bc:	4640      	mov	r0, r8
   324be:	4798      	blx	r3
   324c0:	2800      	cmp	r0, #0
   324c2:	f43f af46 	beq.w	32352 <gatt_read_type_rsp+0xd2>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   324c6:	783b      	ldrb	r3, [r7, #0]
   324c8:	1ae4      	subs	r4, r4, r3
   324ca:	b2a4      	uxth	r4, r4
   324cc:	4499      	add	r9, r3
   324ce:	e7c3      	b.n	32458 <gatt_read_type_rsp+0x1d8>
			value.cpf.format = cpf->format;
   324d0:	f899 3002 	ldrb.w	r3, [r9, #2]
   324d4:	f88d 3020 	strb.w	r3, [sp, #32]
			value.cpf.exponent = cpf->exponent;
   324d8:	f899 3003 	ldrb.w	r3, [r9, #3]
   324dc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
   324e0:	f899 1005 	ldrb.w	r1, [r9, #5]
   324e4:	f899 3004 	ldrb.w	r3, [r9, #4]
   324e8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   324ec:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			value.cpf.name_space = cpf->name_space;
   324f0:	f899 3006 	ldrb.w	r3, [r9, #6]
   324f4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			value.cpf.description = sys_le16_to_cpu(cpf->description);
   324f8:	f899 3007 	ldrb.w	r3, [r9, #7]
   324fc:	f899 1008 	ldrb.w	r1, [r9, #8]
   32500:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   32504:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
			break;
   32508:	e7ca      	b.n	324a0 <gatt_read_type_rsp+0x220>
	gatt_discover_next(conn, handle, params);
   3250a:	462a      	mov	r2, r5
   3250c:	4631      	mov	r1, r6
   3250e:	4640      	mov	r0, r8
}
   32510:	b013      	add	sp, #76	; 0x4c
   32512:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   32516:	f01c b88b 	b.w	4e630 <gatt_discover_next>
   3251a:	bf00      	nop
   3251c:	0004e7ff 	.word	0x0004e7ff
   32520:	0004e059 	.word	0x0004e059

00032524 <bt_gatt_subscribe>:
{
   32524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   32526:	7b43      	ldrb	r3, [r0, #13]
   32528:	2b07      	cmp	r3, #7
{
   3252a:	4606      	mov	r6, r0
   3252c:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   3252e:	d161      	bne.n	325f4 <bt_gatt_subscribe+0xd0>
	sub = gatt_sub_find(conn);
   32530:	f7fe ff38 	bl	313a4 <gatt_sub_find>
	if (!sub) {
   32534:	4604      	mov	r4, r0
   32536:	b958      	cbnz	r0, 32550 <bt_gatt_subscribe+0x2c>
		sub = gatt_sub_find(NULL);
   32538:	f7fe ff34 	bl	313a4 <gatt_sub_find>
		if (sub) {
   3253c:	4604      	mov	r4, r0
   3253e:	2800      	cmp	r0, #0
   32540:	d05b      	beq.n	325fa <bt_gatt_subscribe+0xd6>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   32542:	f106 0188 	add.w	r1, r6, #136	; 0x88
   32546:	3001      	adds	r0, #1
   32548:	f01b fc52 	bl	4ddf0 <bt_addr_le_copy>
			sub->id = conn->id;
   3254c:	7a33      	ldrb	r3, [r6, #8]
   3254e:	7023      	strb	r3, [r4, #0]
	return list->head;
   32550:	68a3      	ldr	r3, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   32552:	b1db      	cbz	r3, 3258c <bt_gatt_subscribe+0x68>
   32554:	3b1c      	subs	r3, #28
   32556:	2200      	movs	r2, #0
		if (tmp == params) {
   32558:	429d      	cmp	r5, r3
   3255a:	d051      	beq.n	32600 <bt_gatt_subscribe+0xdc>
		if (tmp->value_handle == params->value_handle &&
   3255c:	8918      	ldrh	r0, [r3, #8]
   3255e:	8929      	ldrh	r1, [r5, #8]
   32560:	4288      	cmp	r0, r1
   32562:	d104      	bne.n	3256e <bt_gatt_subscribe+0x4a>
   32564:	8a98      	ldrh	r0, [r3, #20]
   32566:	8aa9      	ldrh	r1, [r5, #20]
			has_subscription = true;
   32568:	4288      	cmp	r0, r1
   3256a:	bf28      	it	cs
   3256c:	2201      	movcs	r2, #1
	return node->next;
   3256e:	69db      	ldr	r3, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   32570:	b953      	cbnz	r3, 32588 <bt_gatt_subscribe+0x64>
	if (!has_subscription) {
   32572:	b15a      	cbz	r2, 3258c <bt_gatt_subscribe+0x68>
	parent->next = child;
   32574:	68a2      	ldr	r2, [r4, #8]
   32576:	61ea      	str	r2, [r5, #28]
Z_GENLIST_PREPEND(slist, snode)
   32578:	68e2      	ldr	r2, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   3257a:	f105 031c 	add.w	r3, r5, #28
	list->head = node;
   3257e:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   32580:	b902      	cbnz	r2, 32584 <bt_gatt_subscribe+0x60>
	list->tail = node;
   32582:	60e3      	str	r3, [r4, #12]
	return 0;
   32584:	2600      	movs	r6, #0
   32586:	e024      	b.n	325d2 <bt_gatt_subscribe+0xae>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   32588:	3b1c      	subs	r3, #28
   3258a:	e7e5      	b.n	32558 <bt_gatt_subscribe+0x34>
		if (!params->ccc_handle) {
   3258c:	896f      	ldrh	r7, [r5, #10]
   3258e:	bb1f      	cbnz	r7, 325d8 <bt_gatt_subscribe+0xb4>
	memcpy(&ccc_uuid, BT_UUID_GATT_CCC, sizeof(ccc_uuid));
   32590:	4c1d      	ldr	r4, [pc, #116]	; (32608 <bt_gatt_subscribe+0xe4>)
   32592:	f88d 7004 	strb.w	r7, [sp, #4]
   32596:	2204      	movs	r2, #4
   32598:	f642 1302 	movw	r3, #10498	; 0x2902
   3259c:	eb0d 0102 	add.w	r1, sp, r2
   325a0:	4620      	mov	r0, r4
   325a2:	f8ad 3006 	strh.w	r3, [sp, #6]
   325a6:	f019 fb57 	bl	4bc58 <memcpy>
	memset(params->disc_params, 0, sizeof(*params->disc_params));
   325aa:	2218      	movs	r2, #24
   325ac:	4639      	mov	r1, r7
   325ae:	6928      	ldr	r0, [r5, #16]
   325b0:	f019 fb5d 	bl	4bc6e <memset>
	params->disc_params->sub_params = params;
   325b4:	6929      	ldr	r1, [r5, #16]
	params->disc_params->type = BT_GATT_DISCOVER_DESCRIPTOR;
   325b6:	2304      	movs	r3, #4
   325b8:	740b      	strb	r3, [r1, #16]
	params->disc_params->start_handle = params->value_handle;
   325ba:	892b      	ldrh	r3, [r5, #8]
   325bc:	810b      	strh	r3, [r1, #8]
	params->disc_params->end_handle = params->end_handle;
   325be:	89ab      	ldrh	r3, [r5, #12]
   325c0:	81cb      	strh	r3, [r1, #14]
	params->disc_params->func = gatt_ccc_discover_cb;
   325c2:	4b12      	ldr	r3, [pc, #72]	; (3260c <bt_gatt_subscribe+0xe8>)
	params->disc_params->sub_params = params;
   325c4:	614d      	str	r5, [r1, #20]
	err = bt_gatt_discover(conn, params->disc_params);
   325c6:	4630      	mov	r0, r6
	params->disc_params->uuid = &ccc_uuid.uuid;
   325c8:	600c      	str	r4, [r1, #0]
	params->disc_params->func = gatt_ccc_discover_cb;
   325ca:	604b      	str	r3, [r1, #4]
	err = bt_gatt_discover(conn, params->disc_params);
   325cc:	f7ff fda4 	bl	32118 <bt_gatt_discover>
   325d0:	4606      	mov	r6, r0
}
   325d2:	4630      	mov	r0, r6
   325d4:	b003      	add	sp, #12
   325d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = gatt_write_ccc(conn, params);
   325d8:	4630      	mov	r0, r6
   325da:	4629      	mov	r1, r5
   325dc:	f7ff f808 	bl	315f0 <gatt_write_ccc>
		if (err) {
   325e0:	4606      	mov	r6, r0
   325e2:	2800      	cmp	r0, #0
   325e4:	d0c6      	beq.n	32574 <bt_gatt_subscribe+0x50>
	if (gatt_sub_is_empty(sub)) {
   325e6:	68a3      	ldr	r3, [r4, #8]
   325e8:	2b00      	cmp	r3, #0
   325ea:	d1f2      	bne.n	325d2 <bt_gatt_subscribe+0xae>
		gatt_sub_free(sub);
   325ec:	4620      	mov	r0, r4
   325ee:	f01b fc54 	bl	4de9a <gatt_sub_free>
   325f2:	e7ee      	b.n	325d2 <bt_gatt_subscribe+0xae>
		return -ENOTCONN;
   325f4:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   325f8:	e7eb      	b.n	325d2 <bt_gatt_subscribe+0xae>
		return -ENOMEM;
   325fa:	f06f 060b 	mvn.w	r6, #11
   325fe:	e7e8      	b.n	325d2 <bt_gatt_subscribe+0xae>
			return -EALREADY;
   32600:	f06f 0677 	mvn.w	r6, #119	; 0x77
   32604:	e7e5      	b.n	325d2 <bt_gatt_subscribe+0xae>
   32606:	bf00      	nop
   32608:	20007218 	.word	0x20007218
   3260c:	0004ea53 	.word	0x0004ea53

00032610 <bt_gatt_connected>:
{
   32610:	b570      	push	{r4, r5, r6, lr}
   32612:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   32614:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   32618:	4604      	mov	r4, r0
	data.conn = conn;
   3261a:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   3261c:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   3261e:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   32620:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   32624:	4631      	mov	r1, r6
   32626:	f019 ffde 	bl	4c5e6 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   3262a:	b198      	cbz	r0, 32654 <bt_gatt_connected+0x44>
		if (conn->id) {
   3262c:	7a22      	ldrb	r2, [r4, #8]
   3262e:	2a00      	cmp	r2, #0
   32630:	d03b      	beq.n	326aa <bt_gatt_connected+0x9a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   32632:	ad02      	add	r5, sp, #8
   32634:	2104      	movs	r1, #4
   32636:	4628      	mov	r0, r5
   32638:	f017 f924 	bl	49884 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   3263c:	9500      	str	r5, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   3263e:	4a1d      	ldr	r2, [pc, #116]	; (326b4 <bt_gatt_connected+0xa4>)
   32640:	2124      	movs	r1, #36	; 0x24
   32642:	a805      	add	r0, sp, #20
   32644:	4633      	mov	r3, r6
   32646:	f7fa fff1 	bl	2d62c <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   3264a:	aa05      	add	r2, sp, #20
   3264c:	491a      	ldr	r1, [pc, #104]	; (326b8 <bt_gatt_connected+0xa8>)
   3264e:	4610      	mov	r0, r2
   32650:	f7f9 fe5e 	bl	2c310 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   32654:	ab03      	add	r3, sp, #12
   32656:	4a19      	ldr	r2, [pc, #100]	; (326bc <bt_gatt_connected+0xac>)
   32658:	f64f 71ff 	movw	r1, #65535	; 0xffff
   3265c:	2001      	movs	r0, #1
   3265e:	f01b ff7e 	bl	4e55e <bt_gatt_foreach_attr>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   32662:	78e3      	ldrb	r3, [r4, #3]
   32664:	b94b      	cbnz	r3, 3267a <bt_gatt_connected+0x6a>
	    bt_conn_get_security(conn) < data.sec) {
   32666:	4620      	mov	r0, r4
   32668:	f01a fbd7 	bl	4ce1a <bt_conn_get_security>
   3266c:	f89d 1010 	ldrb.w	r1, [sp, #16]
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
   32670:	4288      	cmp	r0, r1
   32672:	d202      	bcs.n	3267a <bt_gatt_connected+0x6a>
		int err = bt_conn_set_security(conn, data.sec);
   32674:	4620      	mov	r0, r4
   32676:	f01a fba8 	bl	4cdca <bt_conn_set_security>
	sub = gatt_sub_find(conn);
   3267a:	4620      	mov	r0, r4
   3267c:	f7fe fe92 	bl	313a4 <gatt_sub_find>
	if (!sub) {
   32680:	b1a8      	cbz	r0, 326ae <bt_gatt_connected+0x9e>
	return list->head;
   32682:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   32684:	b19d      	cbz	r5, 326ae <bt_gatt_connected+0x9e>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   32686:	7a20      	ldrb	r0, [r4, #8]
   32688:	4631      	mov	r1, r6
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   3268a:	3d1c      	subs	r5, #28
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   3268c:	f019 ffab 	bl	4c5e6 <bt_addr_le_is_bonded>
   32690:	b148      	cbz	r0, 326a6 <bt_gatt_connected+0x96>
   32692:	f105 0018 	add.w	r0, r5, #24
   32696:	f01b fafe 	bl	4dc96 <atomic_get>
   3269a:	0783      	lsls	r3, r0, #30
   3269c:	d403      	bmi.n	326a6 <bt_gatt_connected+0x96>
			gatt_write_ccc(conn, params);
   3269e:	4629      	mov	r1, r5
   326a0:	4620      	mov	r0, r4
   326a2:	f7fe ffa5 	bl	315f0 <gatt_write_ccc>
	return node->next;
   326a6:	69ed      	ldr	r5, [r5, #28]
   326a8:	e7ec      	b.n	32684 <bt_gatt_connected+0x74>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   326aa:	9200      	str	r2, [sp, #0]
   326ac:	e7c7      	b.n	3263e <bt_gatt_connected+0x2e>
}
   326ae:	b00e      	add	sp, #56	; 0x38
   326b0:	bd70      	pop	{r4, r5, r6, pc}
   326b2:	bf00      	nop
   326b4:	000542c7 	.word	0x000542c7
   326b8:	00031bc9 	.word	0x00031bc9
   326bc:	00032039 	.word	0x00032039

000326c0 <bt_gatt_att_max_mtu_changed>:
{
   326c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   326c2:	4b08      	ldr	r3, [pc, #32]	; (326e4 <bt_gatt_att_max_mtu_changed+0x24>)
   326c4:	681c      	ldr	r4, [r3, #0]
   326c6:	4605      	mov	r5, r0
   326c8:	460e      	mov	r6, r1
   326ca:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   326cc:	b14c      	cbz	r4, 326e2 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   326ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   326d2:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   326d4:	b11b      	cbz	r3, 326de <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   326d6:	463a      	mov	r2, r7
   326d8:	4631      	mov	r1, r6
   326da:	4628      	mov	r0, r5
   326dc:	4798      	blx	r3
	return node->next;
   326de:	6864      	ldr	r4, [r4, #4]
   326e0:	e7f4      	b.n	326cc <bt_gatt_att_max_mtu_changed+0xc>
}
   326e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   326e4:	2000477c 	.word	0x2000477c

000326e8 <bt_gatt_encrypt_change>:
{
   326e8:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   326ea:	4a06      	ldr	r2, [pc, #24]	; (32704 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   326ec:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   326ee:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   326f0:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   326f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   326f6:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   326fa:	f01b ff30 	bl	4e55e <bt_gatt_foreach_attr>
}
   326fe:	b003      	add	sp, #12
   32700:	f85d fb04 	ldr.w	pc, [sp], #4
   32704:	00032039 	.word	0x00032039

00032708 <db_hash_read>:
{
   32708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   3270a:	4914      	ldr	r1, [pc, #80]	; (3275c <db_hash_read+0x54>)
{
   3270c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   32710:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   32712:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   32716:	461f      	mov	r7, r3
   32718:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   3271a:	f01e faa2 	bl	50c62 <k_work_cancel_delayable_sync>
   3271e:	4810      	ldr	r0, [pc, #64]	; (32760 <db_hash_read+0x58>)
   32720:	f01b fab9 	bl	4dc96 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   32724:	0743      	lsls	r3, r0, #29
   32726:	d402      	bmi.n	3272e <db_hash_read+0x26>
		db_hash_gen(true);
   32728:	2001      	movs	r0, #1
   3272a:	f7ff f9b3 	bl	31a94 <db_hash_gen>
	(void)bt_gatt_change_aware(conn, true);
   3272e:	2101      	movs	r1, #1
   32730:	4620      	mov	r0, r4
   32732:	f01c fab9 	bl	4eca8 <bt_gatt_change_aware>
	if (offset > value_len) {
   32736:	2e10      	cmp	r6, #16
   32738:	d80c      	bhi.n	32754 <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
   3273a:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   3273e:	4909      	ldr	r1, [pc, #36]	; (32764 <db_hash_read+0x5c>)
	len = MIN(buf_len, value_len - offset);
   32740:	42bc      	cmp	r4, r7
   32742:	bfa8      	it	ge
   32744:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   32746:	4622      	mov	r2, r4
   32748:	4431      	add	r1, r6
   3274a:	4628      	mov	r0, r5
   3274c:	f019 fa84 	bl	4bc58 <memcpy>
}
   32750:	4620      	mov	r0, r4
   32752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   32754:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   32758:	e7fa      	b.n	32750 <db_hash_read+0x48>
   3275a:	bf00      	nop
   3275c:	200025a8 	.word	0x200025a8
   32760:	20002620 	.word	0x20002620
   32764:	20002558 	.word	0x20002558

00032768 <bt_gatt_store_ccc>:
{
   32768:	b570      	push	{r4, r5, r6, lr}
   3276a:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   3276c:	2300      	movs	r3, #0
{
   3276e:	4604      	mov	r4, r0
   32770:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   32772:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   32774:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   32778:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   3277a:	4a11      	ldr	r2, [pc, #68]	; (327c0 <bt_gatt_store_ccc+0x58>)
   3277c:	ab0d      	add	r3, sp, #52	; 0x34
   3277e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   32782:	2001      	movs	r0, #1
   32784:	f01b feeb 	bl	4e55e <bt_gatt_foreach_attr>
	if (id) {
   32788:	b1ac      	cbz	r4, 327b6 <bt_gatt_store_ccc+0x4e>
		u8_to_dec(id_str, sizeof(id_str), id);
   3278a:	ae03      	add	r6, sp, #12
   3278c:	4622      	mov	r2, r4
   3278e:	2104      	movs	r1, #4
   32790:	4630      	mov	r0, r6
   32792:	f017 f877 	bl	49884 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   32796:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   32798:	4a0a      	ldr	r2, [pc, #40]	; (327c4 <bt_gatt_store_ccc+0x5c>)
   3279a:	462b      	mov	r3, r5
   3279c:	2124      	movs	r1, #36	; 0x24
   3279e:	a804      	add	r0, sp, #16
   327a0:	f7fa ff44 	bl	2d62c <bt_settings_encode_key>
	if (save.count) {
   327a4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   327a6:	b142      	cbz	r2, 327ba <bt_gatt_store_ccc+0x52>
		len = save.count * sizeof(*save.store);
   327a8:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   327aa:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   327ac:	a804      	add	r0, sp, #16
   327ae:	f7f9 fd4f 	bl	2c250 <settings_save_one>
}
   327b2:	b040      	add	sp, #256	; 0x100
   327b4:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   327b6:	9400      	str	r4, [sp, #0]
   327b8:	e7ee      	b.n	32798 <bt_gatt_store_ccc+0x30>
		str = NULL;
   327ba:	4611      	mov	r1, r2
   327bc:	e7f6      	b.n	327ac <bt_gatt_store_ccc+0x44>
   327be:	bf00      	nop
   327c0:	00031671 	.word	0x00031671
   327c4:	000542c7 	.word	0x000542c7

000327c8 <bt_gatt_identity_resolved>:
{
   327c8:	b513      	push	{r0, r1, r4, lr}
   327ca:	4604      	mov	r4, r0
	struct addr_match user_data = {
   327cc:	e9cd 1200 	strd	r1, r2, [sp]
	bt_gatt_foreach_attr(0x0001, 0xffff, convert_to_id_on_match, &user_data);
   327d0:	466b      	mov	r3, sp
   327d2:	4a08      	ldr	r2, [pc, #32]	; (327f4 <bt_gatt_identity_resolved+0x2c>)
   327d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   327d8:	2001      	movs	r0, #1
   327da:	f01b fec0 	bl	4e55e <bt_gatt_foreach_attr>
	bt_gatt_store_ccc(conn->id, &(conn->le.dst));
   327de:	f104 0188 	add.w	r1, r4, #136	; 0x88
   327e2:	7a20      	ldrb	r0, [r4, #8]
   327e4:	f7ff ffc0 	bl	32768 <bt_gatt_store_ccc>
	bt_gatt_store_cf(conn);
   327e8:	4620      	mov	r0, r4
   327ea:	f7fe ff5d 	bl	316a8 <bt_gatt_store_cf.isra.0>
}
   327ee:	b002      	add	sp, #8
   327f0:	bd10      	pop	{r4, pc}
   327f2:	bf00      	nop
   327f4:	0003163d 	.word	0x0003163d

000327f8 <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
   327f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   327fa:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   327fc:	ae03      	add	r6, sp, #12
{
   327fe:	4604      	mov	r4, r0
   32800:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
   32802:	9103      	str	r1, [sp, #12]
   32804:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   32808:	4a3c      	ldr	r2, [pc, #240]	; (328fc <bt_gatt_clear+0x104>)
   3280a:	4633      	mov	r3, r6
   3280c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   32810:	2001      	movs	r0, #1
   32812:	f01b fea4 	bl	4e55e <bt_gatt_foreach_attr>
		if (id) {
   32816:	2c00      	cmp	r4, #0
   32818:	d03e      	beq.n	32898 <bt_gatt_clear+0xa0>
			u8_to_dec(id_str, sizeof(id_str), id);
   3281a:	af02      	add	r7, sp, #8
   3281c:	4622      	mov	r2, r4
   3281e:	2104      	movs	r1, #4
   32820:	4638      	mov	r0, r7
   32822:	f017 f82f 	bl	49884 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   32826:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   32828:	4a35      	ldr	r2, [pc, #212]	; (32900 <bt_gatt_clear+0x108>)
   3282a:	462b      	mov	r3, r5
   3282c:	2124      	movs	r1, #36	; 0x24
   3282e:	a805      	add	r0, sp, #20
   32830:	f7fa fefc 	bl	2d62c <bt_settings_encode_key>
		return settings_delete(key);
   32834:	a805      	add	r0, sp, #20
   32836:	f017 ff16 	bl	4a666 <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
   3283a:	2800      	cmp	r0, #0
   3283c:	db2a      	blt.n	32894 <bt_gatt_clear+0x9c>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
   3283e:	4629      	mov	r1, r5
   32840:	4620      	mov	r0, r4
   32842:	f7fe ff61 	bl	31708 <bt_gatt_clear_sc>
		if (err < 0) {
   32846:	2800      	cmp	r0, #0
   32848:	db24      	blt.n	32894 <bt_gatt_clear+0x9c>
	cfg = find_cf_cfg_by_addr(id, addr);
   3284a:	4629      	mov	r1, r5
   3284c:	4620      	mov	r0, r4
   3284e:	f7fe fdcb 	bl	313e8 <find_cf_cfg_by_addr>
	if (cfg) {
   32852:	b108      	cbz	r0, 32858 <bt_gatt_clear+0x60>
		clear_cf_cfg(cfg);
   32854:	f01b fc95 	bl	4e182 <clear_cf_cfg>
		if (id) {
   32858:	b304      	cbz	r4, 3289c <bt_gatt_clear+0xa4>
			u8_to_dec(id_str, sizeof(id_str), id);
   3285a:	4622      	mov	r2, r4
   3285c:	2104      	movs	r1, #4
   3285e:	4630      	mov	r0, r6
   32860:	f017 f810 	bl	49884 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   32864:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
   32866:	4a27      	ldr	r2, [pc, #156]	; (32904 <bt_gatt_clear+0x10c>)
   32868:	462b      	mov	r3, r5
   3286a:	2124      	movs	r1, #36	; 0x24
   3286c:	a805      	add	r0, sp, #20
   3286e:	f7fa fedd 	bl	2d62c <bt_settings_encode_key>
		return settings_delete(key);
   32872:	a805      	add	r0, sp, #20
   32874:	f017 fef7 	bl	4a666 <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
   32878:	2800      	cmp	r0, #0
   3287a:	db0b      	blt.n	32894 <bt_gatt_clear+0x9c>
   3287c:	4f22      	ldr	r7, [pc, #136]	; (32908 <bt_gatt_clear+0x110>)
   3287e:	2600      	movs	r6, #0
		if (id == sub->id &&
   32880:	f817 3c01 	ldrb.w	r3, [r7, #-1]
   32884:	42a3      	cmp	r3, r4
   32886:	d00b      	beq.n	328a0 <bt_gatt_clear+0xa8>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   32888:	3610      	adds	r6, #16
   3288a:	2ec0      	cmp	r6, #192	; 0xc0
   3288c:	f107 0710 	add.w	r7, r7, #16
   32890:	d1f6      	bne.n	32880 <bt_gatt_clear+0x88>

	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
   32892:	2000      	movs	r0, #0
}
   32894:	b00f      	add	sp, #60	; 0x3c
   32896:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   32898:	9400      	str	r4, [sp, #0]
   3289a:	e7c5      	b.n	32828 <bt_gatt_clear+0x30>
			bt_settings_encode_key(key, sizeof(key), "cf",
   3289c:	9400      	str	r4, [sp, #0]
   3289e:	e7e2      	b.n	32866 <bt_gatt_clear+0x6e>
		    !bt_addr_le_cmp(addr, &sub->peer)) {
   328a0:	4639      	mov	r1, r7
   328a2:	4628      	mov	r0, r5
   328a4:	f01b fa5f 	bl	4dd66 <bt_addr_le_cmp>
		if (id == sub->id &&
   328a8:	2800      	cmp	r0, #0
   328aa:	d1ed      	bne.n	32888 <bt_gatt_clear+0x90>
		struct gatt_sub *sub = &subscriptions[i];
   328ac:	4d17      	ldr	r5, [pc, #92]	; (3290c <bt_gatt_clear+0x114>)
   328ae:	4435      	add	r5, r6
	return list->head;
   328b0:	68ab      	ldr	r3, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   328b2:	2b00      	cmp	r3, #0
   328b4:	d0ed      	beq.n	32892 <bt_gatt_clear+0x9a>
	return node->next;
   328b6:	681c      	ldr	r4, [r3, #0]
   328b8:	b104      	cbz	r4, 328bc <bt_gatt_clear+0xc4>
   328ba:	3c1c      	subs	r4, #28
		params->value = 0U;
   328bc:	2700      	movs	r7, #0
   328be:	f823 7c08 	strh.w	r7, [r3, #-8]
		gatt_sub_remove(NULL, sub, prev, params);
   328c2:	463a      	mov	r2, r7
   328c4:	3b1c      	subs	r3, #28
   328c6:	4629      	mov	r1, r5
   328c8:	4638      	mov	r0, r7
   328ca:	f01b faf2 	bl	4deb2 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   328ce:	b954      	cbnz	r4, 328e6 <bt_gatt_clear+0xee>
   328d0:	e7df      	b.n	32892 <bt_gatt_clear+0x9a>
   328d2:	f1a2 061c 	sub.w	r6, r2, #28
		gatt_sub_remove(NULL, sub, prev, params);
   328d6:	2200      	movs	r2, #0
		params->value = 0U;
   328d8:	82a7      	strh	r7, [r4, #20]
		gatt_sub_remove(NULL, sub, prev, params);
   328da:	4623      	mov	r3, r4
   328dc:	4629      	mov	r1, r5
   328de:	4610      	mov	r0, r2
   328e0:	f01b fae7 	bl	4deb2 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   328e4:	4634      	mov	r4, r6
   328e6:	69e2      	ldr	r2, [r4, #28]
   328e8:	2a00      	cmp	r2, #0
   328ea:	d1f2      	bne.n	328d2 <bt_gatt_clear+0xda>
		params->value = 0U;
   328ec:	82a2      	strh	r2, [r4, #20]
		gatt_sub_remove(NULL, sub, prev, params);
   328ee:	4623      	mov	r3, r4
   328f0:	4629      	mov	r1, r5
   328f2:	4610      	mov	r0, r2
   328f4:	f01b fadd 	bl	4deb2 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   328f8:	e7cb      	b.n	32892 <bt_gatt_clear+0x9a>
   328fa:	bf00      	nop
   328fc:	00031615 	.word	0x00031615
   32900:	000542c7 	.word	0x000542c7
   32904:	000542ce 	.word	0x000542ce
   32908:	20004785 	.word	0x20004785
   3290c:	20004784 	.word	0x20004784

00032910 <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
   32910:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   32914:	4603      	mov	r3, r0
   32916:	4a4c      	ldr	r2, [pc, #304]	; (32a48 <bt_gatt_disconnected+0x138>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   32918:	4e4c      	ldr	r6, [pc, #304]	; (32a4c <bt_gatt_disconnected+0x13c>)
{
   3291a:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   3291c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   32920:	2001      	movs	r0, #1
   32922:	f01b fe1c 	bl	4e55e <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   32926:	4620      	mov	r0, r4
   32928:	f7fd f9a4 	bl	2fc74 <bt_conn_index>
   3292c:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   3292e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   32932:	b120      	cbz	r0, 3293e <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   32934:	f01a f9ca 	bl	4cccc <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   32938:	2300      	movs	r3, #0
   3293a:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   3293e:	4a43      	ldr	r2, [pc, #268]	; (32a4c <bt_gatt_disconnected+0x13c>)
   32940:	2300      	movs	r3, #0
		if (gatt_ccc_store.conn_list[i]) {
   32942:	f852 1b04 	ldr.w	r1, [r2], #4
   32946:	b929      	cbnz	r1, 32954 <bt_gatt_disconnected+0x44>
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   32948:	3301      	adds	r3, #1
   3294a:	2b06      	cmp	r3, #6
   3294c:	d1f9      	bne.n	32942 <bt_gatt_disconnected+0x32>

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   3294e:	4840      	ldr	r0, [pc, #256]	; (32a50 <bt_gatt_disconnected+0x140>)
   32950:	f01e f973 	bl	50c3a <k_work_cancel_delayable>
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   32954:	f104 0688 	add.w	r6, r4, #136	; 0x88
   32958:	7a20      	ldrb	r0, [r4, #8]
   3295a:	4631      	mov	r1, r6
   3295c:	f019 fe43 	bl	4c5e6 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   32960:	b130      	cbz	r0, 32970 <bt_gatt_disconnected+0x60>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   32962:	7a20      	ldrb	r0, [r4, #8]
   32964:	4631      	mov	r1, r6
   32966:	f7ff feff 	bl	32768 <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn);
   3296a:	4620      	mov	r0, r4
   3296c:	f7fe fe9c 	bl	316a8 <bt_gatt_store_cf.isra.0>
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   32970:	7a20      	ldrb	r0, [r4, #8]
   32972:	4631      	mov	r1, r6
   32974:	f019 fe37 	bl	4c5e6 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   32978:	b150      	cbz	r0, 32990 <bt_gatt_disconnected+0x80>
		struct addr_with_id addr_with_id = {
   3297a:	7a23      	ldrb	r3, [r4, #8]
   3297c:	f88d 3004 	strb.w	r3, [sp, #4]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   32980:	4a34      	ldr	r2, [pc, #208]	; (32a54 <bt_gatt_disconnected+0x144>)
		struct addr_with_id addr_with_id = {
   32982:	9600      	str	r6, [sp, #0]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   32984:	466b      	mov	r3, sp
   32986:	f64f 71ff 	movw	r1, #65535	; 0xffff
   3298a:	2001      	movs	r0, #1
   3298c:	f01b fde7 	bl	4e55e <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   32990:	4620      	mov	r0, r4
   32992:	f7fe fd07 	bl	313a4 <gatt_sub_find>
	if (!sub) {
   32996:	4607      	mov	r7, r0
   32998:	b940      	cbnz	r0, 329ac <bt_gatt_disconnected+0x9c>
	cfg = find_cf_cfg(conn);
   3299a:	4620      	mov	r0, r4
   3299c:	f7fe fcc4 	bl	31328 <find_cf_cfg>
	if (!cfg) {
   329a0:	4605      	mov	r5, r0
   329a2:	2800      	cmp	r0, #0
   329a4:	d137      	bne.n	32a16 <bt_gatt_disconnected+0x106>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   329a6:	b002      	add	sp, #8
   329a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return list->head;
   329ac:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   329ae:	2d00      	cmp	r5, #0
   329b0:	d0f3      	beq.n	3299a <bt_gatt_disconnected+0x8a>
	return node->next;
   329b2:	f855 891c 	ldr.w	r8, [r5], #-28
   329b6:	f1b8 0f00 	cmp.w	r8, #0
   329ba:	d001      	beq.n	329c0 <bt_gatt_disconnected+0xb0>
   329bc:	f1a8 081c 	sub.w	r8, r8, #28
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   329c0:	f04f 0900 	mov.w	r9, #0
			params->value = 0U;
   329c4:	46ca      	mov	sl, r9
   329c6:	e001      	b.n	329cc <bt_gatt_disconnected+0xbc>
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   329c8:	4645      	mov	r5, r8
   329ca:	4698      	mov	r8, r3
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   329cc:	7a20      	ldrb	r0, [r4, #8]
   329ce:	4631      	mov	r1, r6
   329d0:	f019 fe09 	bl	4c5e6 <bt_addr_le_is_bonded>
   329d4:	b980      	cbnz	r0, 329f8 <bt_gatt_disconnected+0xe8>
			params->value = 0U;
   329d6:	f8a5 a014 	strh.w	sl, [r5, #20]
			gatt_sub_remove(conn, sub, prev, params);
   329da:	462b      	mov	r3, r5
   329dc:	464a      	mov	r2, r9
   329de:	4639      	mov	r1, r7
   329e0:	4620      	mov	r0, r4
   329e2:	f01b fa66 	bl	4deb2 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   329e6:	f1b8 0f00 	cmp.w	r8, #0
   329ea:	d0d6      	beq.n	3299a <bt_gatt_disconnected+0x8a>
   329ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
   329f0:	2b00      	cmp	r3, #0
   329f2:	d0e9      	beq.n	329c8 <bt_gatt_disconnected+0xb8>
   329f4:	3b1c      	subs	r3, #28
   329f6:	e7e7      	b.n	329c8 <bt_gatt_disconnected+0xb8>
   329f8:	f105 0018 	add.w	r0, r5, #24
   329fc:	f01b f94b 	bl	4dc96 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   32a00:	07c3      	lsls	r3, r0, #31
   32a02:	d4e8      	bmi.n	329d6 <bt_gatt_disconnected+0xc6>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   32a04:	787b      	ldrb	r3, [r7, #1]
   32a06:	b11b      	cbz	r3, 32a10 <bt_gatt_disconnected+0x100>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   32a08:	4631      	mov	r1, r6
   32a0a:	1c78      	adds	r0, r7, #1
   32a0c:	f01b f9f0 	bl	4ddf0 <bt_addr_le_copy>
			prev = &params->node;
   32a10:	f105 091c 	add.w	r9, r5, #28
   32a14:	e7e7      	b.n	329e6 <bt_gatt_disconnected+0xd6>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   32a16:	7a20      	ldrb	r0, [r4, #8]
   32a18:	4631      	mov	r1, r6
   32a1a:	f019 fde4 	bl	4c5e6 <bt_addr_le_is_bonded>
   32a1e:	b928      	cbnz	r0, 32a2c <bt_gatt_disconnected+0x11c>
		clear_cf_cfg(cfg);
   32a20:	4628      	mov	r0, r5
}
   32a22:	b002      	add	sp, #8
   32a24:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		clear_cf_cfg(cfg);
   32a28:	f01b bbab 	b.w	4e182 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   32a2c:	4631      	mov	r1, r6
   32a2e:	1c68      	adds	r0, r5, #1
   32a30:	f01b f9de 	bl	4ddf0 <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   32a34:	f06f 0102 	mvn.w	r1, #2
   32a38:	f105 000c 	add.w	r0, r5, #12
}
   32a3c:	b002      	add	sp, #8
   32a3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32a42:	f01b ba89 	b.w	4df58 <atomic_and>
   32a46:	bf00      	nop
   32a48:	00031755 	.word	0x00031755
   32a4c:	20002510 	.word	0x20002510
   32a50:	20002528 	.word	0x20002528
   32a54:	00031615 	.word	0x00031615

00032a58 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   32a58:	4b10      	ldr	r3, [pc, #64]	; (32a9c <get_io_capa+0x44>)
   32a5a:	681a      	ldr	r2, [r3, #0]
   32a5c:	b1ca      	cbz	r2, 32a92 <get_io_capa+0x3a>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   32a5e:	e9d2 1301 	ldrd	r1, r3, [r2, #4]
   32a62:	b921      	cbnz	r1, 32a6e <get_io_capa+0x16>
	if (bt_auth->passkey_entry) {
		if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
		    fixed_passkey != BT_PASSKEY_INVALID) {
			return BT_SMP_IO_KEYBOARD_DISPLAY;
		} else {
			return BT_SMP_IO_KEYBOARD_ONLY;
   32a64:	2b00      	cmp	r3, #0
   32a66:	bf0c      	ite	eq
   32a68:	2003      	moveq	r0, #3
   32a6a:	2002      	movne	r0, #2
   32a6c:	4770      	bx	lr
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   32a6e:	b133      	cbz	r3, 32a7e <get_io_capa+0x26>
   32a70:	68d2      	ldr	r2, [r2, #12]
   32a72:	b912      	cbnz	r2, 32a7a <get_io_capa+0x22>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   32a74:	4a0a      	ldr	r2, [pc, #40]	; (32aa0 <get_io_capa+0x48>)
   32a76:	7812      	ldrb	r2, [r2, #0]
   32a78:	b932      	cbnz	r2, 32a88 <get_io_capa+0x30>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   32a7a:	2004      	movs	r0, #4
   32a7c:	4770      	bx	lr
	if (sc_supported && bt_auth->passkey_display &&
   32a7e:	4908      	ldr	r1, [pc, #32]	; (32aa0 <get_io_capa+0x48>)
   32a80:	7808      	ldrb	r0, [r1, #0]
   32a82:	b148      	cbz	r0, 32a98 <get_io_capa+0x40>
   32a84:	68d2      	ldr	r2, [r2, #12]
   32a86:	b932      	cbnz	r2, 32a96 <get_io_capa+0x3e>
	if (bt_auth->passkey_entry) {
   32a88:	3b00      	subs	r3, #0
   32a8a:	bf18      	it	ne
   32a8c:	2301      	movne	r3, #1
   32a8e:	0058      	lsls	r0, r3, #1
   32a90:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   32a92:	2003      	movs	r0, #3
   32a94:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   32a96:	2001      	movs	r0, #1
	}
}
   32a98:	4770      	bx	lr
   32a9a:	bf00      	nop
   32a9c:	20004604 	.word	0x20004604
   32aa0:	2000740e 	.word	0x2000740e

00032aa4 <get_pair_method>:

	return true;
}

static uint8_t get_pair_method(struct bt_smp *smp, uint8_t remote_io)
{
   32aa4:	b510      	push	{r4, lr}
   32aa6:	460c      	mov	r4, r1
	struct bt_smp_pairing *req, *rsp;

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   32aa8:	7b03      	ldrb	r3, [r0, #12]
   32aaa:	7cc1      	ldrb	r1, [r0, #19]
   32aac:	ea03 0201 	and.w	r2, r3, r1
   32ab0:	0712      	lsls	r2, r2, #28
   32ab2:	d504      	bpl.n	32abe <get_pair_method+0x1a>
		/* if one side has OOB data use OOB */
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   32ab4:	7ac2      	ldrb	r2, [r0, #11]
   32ab6:	7c80      	ldrb	r0, [r0, #18]
   32ab8:	4302      	orrs	r2, r0
   32aba:	07d2      	lsls	r2, r2, #31
   32abc:	d40e      	bmi.n	32adc <get_pair_method+0x38>
			return LE_SC_OOB;
		}
	}

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   32abe:	2c04      	cmp	r4, #4
   32ac0:	d80e      	bhi.n	32ae0 <get_pair_method+0x3c>
		return JUST_WORKS;
	}

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   32ac2:	ea43 0001 	orr.w	r0, r3, r1
   32ac6:	f010 0004 	ands.w	r0, r0, #4
   32aca:	d006      	beq.n	32ada <get_pair_method+0x36>
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
   32acc:	f7ff ffc4 	bl	32a58 <get_io_capa>
   32ad0:	4b04      	ldr	r3, [pc, #16]	; (32ae4 <get_pair_method+0x40>)
   32ad2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   32ad6:	4423      	add	r3, r4
   32ad8:	5c18      	ldrb	r0, [r3, r0]
#else
	return JUST_WORKS;
#endif
}
   32ada:	bd10      	pop	{r4, pc}
			return LE_SC_OOB;
   32adc:	2005      	movs	r0, #5
   32ade:	e7fc      	b.n	32ada <get_pair_method+0x36>
		return JUST_WORKS;
   32ae0:	2000      	movs	r0, #0
   32ae2:	e7fa      	b.n	32ada <get_pair_method+0x36>
   32ae4:	00054307 	.word	0x00054307

00032ae8 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   32ae8:	b530      	push	{r4, r5, lr}
   32aea:	4c0c      	ldr	r4, [pc, #48]	; (32b1c <bt_smp_accept+0x34>)
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   32aec:	2300      	movs	r3, #0
   32aee:	4622      	mov	r2, r4
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   32af0:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   32af4:	b138      	cbz	r0, 32b06 <bt_smp_accept+0x1e>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   32af6:	3301      	adds	r3, #1
   32af8:	2b06      	cmp	r3, #6
   32afa:	f504 7402 	add.w	r4, r4, #520	; 0x208
   32afe:	d1f7      	bne.n	32af0 <bt_smp_accept+0x8>
		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   32b00:	f06f 000b 	mvn.w	r0, #11
}
   32b04:	bd30      	pop	{r4, r5, pc}
		smp->chan.chan.ops = &ops;
   32b06:	f44f 7402 	mov.w	r4, #520	; 0x208
   32b0a:	4363      	muls	r3, r4
   32b0c:	18d4      	adds	r4, r2, r3
		*chan = &smp->chan.chan;
   32b0e:	33f0      	adds	r3, #240	; 0xf0
		smp->chan.chan.ops = &ops;
   32b10:	4d03      	ldr	r5, [pc, #12]	; (32b20 <bt_smp_accept+0x38>)
   32b12:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		*chan = &smp->chan.chan;
   32b16:	441a      	add	r2, r3
   32b18:	600a      	str	r2, [r1, #0]
		return 0;
   32b1a:	e7f3      	b.n	32b04 <bt_smp_accept+0x1c>
   32b1c:	20002628 	.word	0x20002628
   32b20:	00052994 	.word	0x00052994

00032b24 <smp_find>:
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   32b24:	4a08      	ldr	r2, [pc, #32]	; (32b48 <smp_find+0x24>)
{
   32b26:	b510      	push	{r4, lr}
   32b28:	4601      	mov	r1, r0
   32b2a:	2300      	movs	r3, #0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   32b2c:	1d14      	adds	r4, r2, #4
   32b2e:	18e0      	adds	r0, r4, r3
   32b30:	f01c f92d 	bl	4ed8e <atomic_test_bit>
   32b34:	b108      	cbz	r0, 32b3a <smp_find+0x16>
			return &bt_smp_pool[i];
   32b36:	1898      	adds	r0, r3, r2
}
   32b38:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   32b3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
   32b3e:	f5b3 6f43 	cmp.w	r3, #3120	; 0xc30
   32b42:	d1f4      	bne.n	32b2e <smp_find+0xa>
   32b44:	e7f8      	b.n	32b38 <smp_find+0x14>
   32b46:	bf00      	nop
   32b48:	20002628 	.word	0x20002628

00032b4c <smp_g2>:
{
   32b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   32b4e:	b099      	sub	sp, #100	; 0x64
   32b50:	4614      	mov	r4, r2
   32b52:	460f      	mov	r7, r1
	sys_memcpy_swap(m, u, 32);
   32b54:	2220      	movs	r2, #32
   32b56:	4601      	mov	r1, r0
   32b58:	a804      	add	r0, sp, #16
{
   32b5a:	461e      	mov	r6, r3
   32b5c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
   32b5e:	f01c f8e8 	bl	4ed32 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   32b62:	2220      	movs	r2, #32
   32b64:	4639      	mov	r1, r7
   32b66:	a80c      	add	r0, sp, #48	; 0x30
   32b68:	f01c f8e3 	bl	4ed32 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   32b6c:	2210      	movs	r2, #16
   32b6e:	4631      	mov	r1, r6
   32b70:	a814      	add	r0, sp, #80	; 0x50
   32b72:	f01c f8de 	bl	4ed32 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   32b76:	4621      	mov	r1, r4
   32b78:	2210      	movs	r2, #16
   32b7a:	4668      	mov	r0, sp
   32b7c:	f01c f8d9 	bl	4ed32 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   32b80:	466b      	mov	r3, sp
   32b82:	2250      	movs	r2, #80	; 0x50
   32b84:	a904      	add	r1, sp, #16
   32b86:	4618      	mov	r0, r3
   32b88:	f01c f98c 	bl	4eea4 <bt_smp_aes_cmac>
	if (err) {
   32b8c:	4604      	mov	r4, r0
   32b8e:	b960      	cbnz	r0, 32baa <smp_g2+0x5e>
	memcpy(passkey, xs + 12, 4);
   32b90:	2204      	movs	r2, #4
   32b92:	a903      	add	r1, sp, #12
   32b94:	4628      	mov	r0, r5
   32b96:	f019 f85f 	bl	4bc58 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   32b9a:	682b      	ldr	r3, [r5, #0]
   32b9c:	4a04      	ldr	r2, [pc, #16]	; (32bb0 <smp_g2+0x64>)
   32b9e:	ba1b      	rev	r3, r3
   32ba0:	fbb3 f1f2 	udiv	r1, r3, r2
   32ba4:	fb02 3311 	mls	r3, r2, r1, r3
   32ba8:	602b      	str	r3, [r5, #0]
}
   32baa:	4620      	mov	r0, r4
   32bac:	b019      	add	sp, #100	; 0x64
   32bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32bb0:	000f4240 	.word	0x000f4240

00032bb4 <get_auth.constprop.0>:
	if (sc_supported) {
   32bb4:	4b0c      	ldr	r3, [pc, #48]	; (32be8 <get_auth.constprop.0+0x34>)
   32bb6:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   32bb8:	b510      	push	{r4, lr}
	if (sc_supported) {
   32bba:	b17b      	cbz	r3, 32bdc <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   32bbc:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   32bc0:	f7ff ff4a 	bl	32a58 <get_io_capa>
	if (bondable) {
   32bc4:	4b09      	ldr	r3, [pc, #36]	; (32bec <get_auth.constprop.0+0x38>)
   32bc6:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   32bc8:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   32bca:	bf0c      	ite	eq
   32bcc:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   32bd0:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   32bd4:	b12b      	cbz	r3, 32be2 <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   32bd6:	f044 0001 	orr.w	r0, r4, #1
}
   32bda:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   32bdc:	f000 0407 	and.w	r4, r0, #7
   32be0:	e7ee      	b.n	32bc0 <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   32be2:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   32be6:	e7f8      	b.n	32bda <get_auth.constprop.0+0x26>
   32be8:	2000740e 	.word	0x2000740e
   32bec:	20000ffc 	.word	0x20000ffc

00032bf0 <smp_f5>:
{
   32bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32bf4:	b09a      	sub	sp, #104	; 0x68
   32bf6:	461d      	mov	r5, r3
   32bf8:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	uint8_t m[53] = { 0x00, /* counter */
   32bfc:	4b2e      	ldr	r3, [pc, #184]	; (32cb8 <smp_f5+0xc8>)
{
   32bfe:	4616      	mov	r6, r2
	uint8_t m[53] = { 0x00, /* counter */
   32c00:	aa0c      	add	r2, sp, #48	; 0x30
{
   32c02:	4684      	mov	ip, r0
   32c04:	468a      	mov	sl, r1
	uint8_t m[53] = { 0x00, /* counter */
   32c06:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   32c0a:	4690      	mov	r8, r2
   32c0c:	6818      	ldr	r0, [r3, #0]
   32c0e:	6859      	ldr	r1, [r3, #4]
   32c10:	4614      	mov	r4, r2
   32c12:	c403      	stmia	r4!, {r0, r1}
   32c14:	3308      	adds	r3, #8
   32c16:	4573      	cmp	r3, lr
   32c18:	4622      	mov	r2, r4
   32c1a:	d1f7      	bne.n	32c0c <smp_f5+0x1c>
   32c1c:	6818      	ldr	r0, [r3, #0]
   32c1e:	791b      	ldrb	r3, [r3, #4]
   32c20:	6020      	str	r0, [r4, #0]
   32c22:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   32c24:	4661      	mov	r1, ip
   32c26:	2220      	movs	r2, #32
   32c28:	a804      	add	r0, sp, #16
   32c2a:	f01c f882 	bl	4ed32 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   32c2e:	4823      	ldr	r0, [pc, #140]	; (32cbc <smp_f5+0xcc>)
   32c30:	466b      	mov	r3, sp
   32c32:	2220      	movs	r2, #32
   32c34:	a904      	add	r1, sp, #16
   32c36:	f01c f935 	bl	4eea4 <bt_smp_aes_cmac>
	if (err) {
   32c3a:	4604      	mov	r4, r0
   32c3c:	bbc0      	cbnz	r0, 32cb0 <smp_f5+0xc0>
	sys_memcpy_swap(m + 5, n1, 16);
   32c3e:	2210      	movs	r2, #16
   32c40:	4651      	mov	r1, sl
   32c42:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   32c46:	f01c f874 	bl	4ed32 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   32c4a:	2210      	movs	r2, #16
   32c4c:	4631      	mov	r1, r6
   32c4e:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   32c52:	f01c f86e 	bl	4ed32 <sys_memcpy_swap>
	m[37] = a1->type;
   32c56:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   32c58:	2206      	movs	r2, #6
	m[37] = a1->type;
   32c5a:	f811 3b01 	ldrb.w	r3, [r1], #1
   32c5e:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   32c62:	f10d 0056 	add.w	r0, sp, #86	; 0x56
   32c66:	f01c f864 	bl	4ed32 <sys_memcpy_swap>
	m[44] = a2->type;
   32c6a:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   32c6c:	2206      	movs	r2, #6
	m[44] = a2->type;
   32c6e:	f811 3b01 	ldrb.w	r3, [r1], #1
   32c72:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   32c76:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
   32c7a:	f01c f85a 	bl	4ed32 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   32c7e:	464b      	mov	r3, r9
   32c80:	2235      	movs	r2, #53	; 0x35
   32c82:	4641      	mov	r1, r8
   32c84:	4668      	mov	r0, sp
   32c86:	f01c f90d 	bl	4eea4 <bt_smp_aes_cmac>
	if (err) {
   32c8a:	4604      	mov	r4, r0
   32c8c:	b980      	cbnz	r0, 32cb0 <smp_f5+0xc0>
	sys_mem_swap(mackey, 16);
   32c8e:	4648      	mov	r0, r9
   32c90:	f01c f944 	bl	4ef1c <sys_mem_swap.constprop.0>
	m[0] = 0x01;
   32c94:	2301      	movs	r3, #1
   32c96:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   32c9a:	2235      	movs	r2, #53	; 0x35
   32c9c:	463b      	mov	r3, r7
   32c9e:	4641      	mov	r1, r8
   32ca0:	4668      	mov	r0, sp
   32ca2:	f01c f8ff 	bl	4eea4 <bt_smp_aes_cmac>
	if (err) {
   32ca6:	4604      	mov	r4, r0
   32ca8:	b910      	cbnz	r0, 32cb0 <smp_f5+0xc0>
	sys_mem_swap(ltk, 16);
   32caa:	4638      	mov	r0, r7
   32cac:	f01c f936 	bl	4ef1c <sys_mem_swap.constprop.0>
}
   32cb0:	4620      	mov	r0, r4
   32cb2:	b01a      	add	sp, #104	; 0x68
   32cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32cb8:	0005199e 	.word	0x0005199e
   32cbc:	000542f7 	.word	0x000542f7

00032cc0 <sc_smp_check_confirm>:
{
   32cc0:	b530      	push	{r4, r5, lr}
	switch (smp->method) {
   32cc2:	7a03      	ldrb	r3, [r0, #8]
{
   32cc4:	b087      	sub	sp, #28
   32cc6:	4604      	mov	r4, r0
	switch (smp->method) {
   32cc8:	2b05      	cmp	r3, #5
   32cca:	d818      	bhi.n	32cfe <sc_smp_check_confirm+0x3e>
   32ccc:	e8df f003 	tbb	[pc, r3]
   32cd0:	1a03031a 	.word	0x1a03031a
   32cd4:	2717      	.short	0x2717
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   32cd6:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   32cda:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
   32cde:	40d3      	lsrs	r3, r2
   32ce0:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   32ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   32ce8:	490e      	ldr	r1, [pc, #56]	; (32d24 <sc_smp_check_confirm+0x64>)
   32cea:	ad02      	add	r5, sp, #8
   32cec:	9500      	str	r5, [sp, #0]
   32cee:	6809      	ldr	r1, [r1, #0]
   32cf0:	f104 0237 	add.w	r2, r4, #55	; 0x37
   32cf4:	f104 0057 	add.w	r0, r4, #87	; 0x57
   32cf8:	f01c f96a 	bl	4efd0 <smp_f4>
   32cfc:	b120      	cbz	r0, 32d08 <sc_smp_check_confirm+0x48>
		return BT_SMP_ERR_UNSPECIFIED;
   32cfe:	2008      	movs	r0, #8
}
   32d00:	b007      	add	sp, #28
   32d02:	bd30      	pop	{r4, r5, pc}
	switch (smp->method) {
   32d04:	2300      	movs	r3, #0
   32d06:	e7ef      	b.n	32ce8 <sc_smp_check_confirm+0x28>
	if (memcmp(smp->pcnf, cfm, 16)) {
   32d08:	2210      	movs	r2, #16
   32d0a:	4629      	mov	r1, r5
   32d0c:	f104 0017 	add.w	r0, r4, #23
   32d10:	f018 ff92 	bl	4bc38 <memcmp>
   32d14:	3800      	subs	r0, #0
   32d16:	bf18      	it	ne
   32d18:	2001      	movne	r0, #1
   32d1a:	0080      	lsls	r0, r0, #2
   32d1c:	e7f0      	b.n	32d00 <sc_smp_check_confirm+0x40>
	switch (smp->method) {
   32d1e:	2000      	movs	r0, #0
   32d20:	e7ee      	b.n	32d00 <sc_smp_check_confirm+0x40>
   32d22:	bf00      	nop
   32d24:	20004844 	.word	0x20004844

00032d28 <sec_level_reachable.isra.0>:
	switch (conn->required_sec_level) {
   32d28:	2803      	cmp	r0, #3
static bool sec_level_reachable(struct bt_conn *conn)
   32d2a:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
   32d2c:	d00a      	beq.n	32d44 <sec_level_reachable.isra.0+0x1c>
   32d2e:	d805      	bhi.n	32d3c <sec_level_reachable.isra.0+0x14>
   32d30:	3801      	subs	r0, #1
   32d32:	2801      	cmp	r0, #1
   32d34:	bf8c      	ite	hi
   32d36:	2000      	movhi	r0, #0
   32d38:	2001      	movls	r0, #1
}
   32d3a:	bd08      	pop	{r3, pc}
	switch (conn->required_sec_level) {
   32d3c:	2804      	cmp	r0, #4
   32d3e:	d010      	beq.n	32d62 <sec_level_reachable.isra.0+0x3a>
   32d40:	2000      	movs	r0, #0
   32d42:	e7fa      	b.n	32d3a <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   32d44:	f7ff fe88 	bl	32a58 <get_io_capa>
   32d48:	2803      	cmp	r0, #3
   32d4a:	d108      	bne.n	32d5e <sec_level_reachable.isra.0+0x36>
		       (bt_auth && bt_auth->oob_data_request);
   32d4c:	4b0c      	ldr	r3, [pc, #48]	; (32d80 <sec_level_reachable.isra.0+0x58>)
   32d4e:	6818      	ldr	r0, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   32d50:	2800      	cmp	r0, #0
   32d52:	d0f2      	beq.n	32d3a <sec_level_reachable.isra.0+0x12>
		       (bt_auth && bt_auth->oob_data_request);
   32d54:	6900      	ldr	r0, [r0, #16]
   32d56:	3800      	subs	r0, #0
   32d58:	bf18      	it	ne
   32d5a:	2001      	movne	r0, #1
   32d5c:	e7ed      	b.n	32d3a <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   32d5e:	2001      	movs	r0, #1
   32d60:	e7eb      	b.n	32d3a <sec_level_reachable.isra.0+0x12>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   32d62:	f7ff fe79 	bl	32a58 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   32d66:	2803      	cmp	r0, #3
   32d68:	d104      	bne.n	32d74 <sec_level_reachable.isra.0+0x4c>
   32d6a:	4b05      	ldr	r3, [pc, #20]	; (32d80 <sec_level_reachable.isra.0+0x58>)
   32d6c:	6818      	ldr	r0, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   32d6e:	b118      	cbz	r0, 32d78 <sec_level_reachable.isra.0+0x50>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   32d70:	6900      	ldr	r0, [r0, #16]
   32d72:	b108      	cbz	r0, 32d78 <sec_level_reachable.isra.0+0x50>
   32d74:	4b03      	ldr	r3, [pc, #12]	; (32d84 <sec_level_reachable.isra.0+0x5c>)
   32d76:	7818      	ldrb	r0, [r3, #0]
   32d78:	f000 0001 	and.w	r0, r0, #1
   32d7c:	e7dd      	b.n	32d3a <sec_level_reachable.isra.0+0x12>
   32d7e:	bf00      	nop
   32d80:	20004604 	.word	0x20004604
   32d84:	2000740e 	.word	0x2000740e

00032d88 <display_passkey>:
{
   32d88:	b538      	push	{r3, r4, r5, lr}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   32d8a:	2104      	movs	r1, #4
{
   32d8c:	4604      	mov	r4, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   32d8e:	30d8      	adds	r0, #216	; 0xd8
   32d90:	f004 f960 	bl	37054 <bt_rand>
   32d94:	b9e0      	cbnz	r0, 32dd0 <display_passkey+0x48>
		smp->passkey %= 1000000;
   32d96:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   32d9a:	4a0e      	ldr	r2, [pc, #56]	; (32dd4 <display_passkey+0x4c>)
	if (bt_auth && bt_auth->passkey_display) {
   32d9c:	4d0e      	ldr	r5, [pc, #56]	; (32dd8 <display_passkey+0x50>)
		smp->passkey %= 1000000;
   32d9e:	fbb3 f1f2 	udiv	r1, r3, r2
   32da2:	fb02 3311 	mls	r3, r2, r1, r3
   32da6:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   32daa:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
   32dac:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   32db0:	b163      	cbz	r3, 32dcc <display_passkey+0x44>
   32db2:	685b      	ldr	r3, [r3, #4]
   32db4:	b153      	cbz	r3, 32dcc <display_passkey+0x44>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   32db6:	210b      	movs	r1, #11
   32db8:	1d20      	adds	r0, r4, #4
   32dba:	f01c f92e 	bl	4f01a <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   32dbe:	682b      	ldr	r3, [r5, #0]
   32dc0:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   32dc4:	685b      	ldr	r3, [r3, #4]
   32dc6:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   32dca:	4798      	blx	r3
	return 0;
   32dcc:	2000      	movs	r0, #0
}
   32dce:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   32dd0:	2008      	movs	r0, #8
   32dd2:	e7fc      	b.n	32dce <display_passkey+0x46>
   32dd4:	000f4240 	.word	0x000f4240
   32dd8:	20004604 	.word	0x20004604

00032ddc <smp_init>:
{
   32ddc:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   32dde:	22f0      	movs	r2, #240	; 0xf0
{
   32de0:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   32de2:	2100      	movs	r1, #0
   32de4:	f018 ff43 	bl	4bc6e <memset>
	if (bt_rand(smp->prnd, 16)) {
   32de8:	2110      	movs	r1, #16
   32dea:	f105 0027 	add.w	r0, r5, #39	; 0x27
   32dee:	f004 f931 	bl	37054 <bt_rand>
   32df2:	4604      	mov	r4, r0
   32df4:	b948      	cbnz	r0, 32e0a <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   32df6:	2105      	movs	r1, #5
   32df8:	4628      	mov	r0, r5
   32dfa:	f01c f90e 	bl	4f01a <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   32dfe:	f7fc fc57 	bl	2f6b0 <bt_pub_key_get>
   32e02:	4b03      	ldr	r3, [pc, #12]	; (32e10 <smp_init+0x34>)
   32e04:	6018      	str	r0, [r3, #0]
}
   32e06:	4620      	mov	r0, r4
   32e08:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   32e0a:	2408      	movs	r4, #8
   32e0c:	e7fb      	b.n	32e06 <smp_init+0x2a>
   32e0e:	bf00      	nop
   32e10:	20004844 	.word	0x20004844

00032e14 <smp_dhkey_generate>:
{
   32e14:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   32e16:	1d05      	adds	r5, r0, #4
{
   32e18:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   32e1a:	2108      	movs	r1, #8
   32e1c:	4628      	mov	r0, r5
   32e1e:	f01c f8fc 	bl	4f01a <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   32e22:	4906      	ldr	r1, [pc, #24]	; (32e3c <smp_dhkey_generate+0x28>)
   32e24:	f104 0057 	add.w	r0, r4, #87	; 0x57
   32e28:	f7fc fc52 	bl	2f6d0 <bt_dh_key_gen>
	if (err) {
   32e2c:	b120      	cbz	r0, 32e38 <smp_dhkey_generate+0x24>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   32e2e:	4628      	mov	r0, r5
   32e30:	2108      	movs	r1, #8
   32e32:	f01c f828 	bl	4ee86 <atomic_clear_bit>
		return BT_SMP_ERR_UNSPECIFIED;
   32e36:	2008      	movs	r0, #8
}
   32e38:	bd38      	pop	{r3, r4, r5, pc}
   32e3a:	bf00      	nop
   32e3c:	0004f79d 	.word	0x0004f79d

00032e40 <smp_send_pairing_req>:
{
   32e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32e44:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   32e46:	f01b ff9b 	bl	4ed80 <smp_chan_get>
	if (!smp) {
   32e4a:	4604      	mov	r4, r0
   32e4c:	2800      	cmp	r0, #0
   32e4e:	d070      	beq.n	32f32 <smp_send_pairing_req+0xf2>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   32e50:	1d06      	adds	r6, r0, #4
   32e52:	2104      	movs	r1, #4
   32e54:	4630      	mov	r0, r6
   32e56:	f01b ff9a 	bl	4ed8e <atomic_test_bit>
   32e5a:	2800      	cmp	r0, #0
   32e5c:	d16c      	bne.n	32f38 <smp_send_pairing_req+0xf8>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   32e5e:	2102      	movs	r1, #2
   32e60:	4630      	mov	r0, r6
   32e62:	f01b ff94 	bl	4ed8e <atomic_test_bit>
   32e66:	2800      	cmp	r0, #0
   32e68:	d161      	bne.n	32f2e <smp_send_pairing_req+0xee>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   32e6a:	2103      	movs	r1, #3
   32e6c:	4630      	mov	r0, r6
   32e6e:	f01b ff8e 	bl	4ed8e <atomic_test_bit>
   32e72:	b118      	cbz	r0, 32e7c <smp_send_pairing_req+0x3c>
		return -EBUSY;
   32e74:	f06f 000f 	mvn.w	r0, #15
}
   32e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   32e7c:	2101      	movs	r1, #1
   32e7e:	4630      	mov	r0, r6
   32e80:	f01b ff85 	bl	4ed8e <atomic_test_bit>
   32e84:	2800      	cmp	r0, #0
   32e86:	d1f5      	bne.n	32e74 <smp_send_pairing_req+0x34>
	if (!sec_level_reachable(conn)) {
   32e88:	7aa8      	ldrb	r0, [r5, #10]
   32e8a:	f7ff ff4d 	bl	32d28 <sec_level_reachable.isra.0>
   32e8e:	2800      	cmp	r0, #0
   32e90:	d055      	beq.n	32f3e <smp_send_pairing_req+0xfe>
	if (!conn->le.keys) {
   32e92:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   32e96:	b133      	cbz	r3, 32ea6 <smp_send_pairing_req+0x66>
	if (smp_init(smp)) {
   32e98:	4620      	mov	r0, r4
   32e9a:	f7ff ff9f 	bl	32ddc <smp_init>
   32e9e:	b170      	cbz	r0, 32ebe <smp_send_pairing_req+0x7e>
		return -ENOBUFS;
   32ea0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   32ea4:	e7e8      	b.n	32e78 <smp_send_pairing_req+0x38>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   32ea6:	7a28      	ldrb	r0, [r5, #8]
   32ea8:	f105 0188 	add.w	r1, r5, #136	; 0x88
   32eac:	f000 fe2c 	bl	33b08 <bt_keys_get_addr>
   32eb0:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   32eb4:	2800      	cmp	r0, #0
   32eb6:	d1ef      	bne.n	32e98 <smp_send_pairing_req+0x58>
			return -ENOMEM;
   32eb8:	f06f 000b 	mvn.w	r0, #11
   32ebc:	e7dc      	b.n	32e78 <smp_send_pairing_req+0x38>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   32ebe:	2101      	movs	r1, #1
   32ec0:	4620      	mov	r0, r4
   32ec2:	f01c f8ee 	bl	4f0a2 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   32ec6:	4607      	mov	r7, r0
   32ec8:	2800      	cmp	r0, #0
   32eca:	d0e9      	beq.n	32ea0 <smp_send_pairing_req+0x60>
   32ecc:	2106      	movs	r1, #6
   32ece:	3008      	adds	r0, #8
   32ed0:	f01c fea3 	bl	4fc1a <net_buf_simple_add>
   32ed4:	4605      	mov	r5, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   32ed6:	2009      	movs	r0, #9
   32ed8:	f7ff fe6c 	bl	32bb4 <get_auth.constprop.0>
   32edc:	70a8      	strb	r0, [r5, #2]
	req->io_capability = get_io_capa();
   32ede:	f7ff fdbb 	bl	32a58 <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   32ee2:	4b18      	ldr	r3, [pc, #96]	; (32f44 <smp_send_pairing_req+0x104>)
	req->io_capability = get_io_capa();
   32ee4:	7028      	strb	r0, [r5, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   32ee6:	781b      	ldrb	r3, [r3, #0]
   32ee8:	706b      	strb	r3, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   32eea:	2310      	movs	r3, #16
   32eec:	70eb      	strb	r3, [r5, #3]
	req->resp_key_dist = RECV_KEYS;
   32eee:	f04f 0803 	mov.w	r8, #3
	req->init_key_dist = SEND_KEYS;
   32ef2:	2301      	movs	r3, #1
	smp->local_dist = SEND_KEYS;
   32ef4:	f240 3201 	movw	r2, #769	; 0x301
	req->init_key_dist = SEND_KEYS;
   32ef8:	712b      	strb	r3, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
   32efa:	f885 8005 	strb.w	r8, [r5, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
   32efe:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   32f00:	7263      	strb	r3, [r4, #9]
	smp->local_dist = SEND_KEYS;
   32f02:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
	memcpy(smp->preq + 1, req, sizeof(*req));
   32f06:	f104 000a 	add.w	r0, r4, #10
   32f0a:	2206      	movs	r2, #6
   32f0c:	f018 fea4 	bl	4bc58 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   32f10:	4639      	mov	r1, r7
   32f12:	4620      	mov	r0, r4
   32f14:	f01b ffe6 	bl	4eee4 <smp_send.constprop.0>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
   32f18:	4620      	mov	r0, r4
   32f1a:	2102      	movs	r1, #2
   32f1c:	f01c f87d 	bl	4f01a <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   32f20:	210b      	movs	r1, #11
   32f22:	f01c f87a 	bl	4f01a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   32f26:	4641      	mov	r1, r8
   32f28:	4630      	mov	r0, r6
   32f2a:	f01c f876 	bl	4f01a <atomic_set_bit>
		return 0;
   32f2e:	2000      	movs	r0, #0
   32f30:	e7a2      	b.n	32e78 <smp_send_pairing_req+0x38>
		return -ENOTCONN;
   32f32:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   32f36:	e79f      	b.n	32e78 <smp_send_pairing_req+0x38>
		return -EIO;
   32f38:	f06f 0004 	mvn.w	r0, #4
   32f3c:	e79c      	b.n	32e78 <smp_send_pairing_req+0x38>
		return -EINVAL;
   32f3e:	f06f 0015 	mvn.w	r0, #21
   32f42:	e799      	b.n	32e78 <smp_send_pairing_req+0x38>
   32f44:	2000740f 	.word	0x2000740f

00032f48 <smp_security_request>:
{
   32f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   32f4a:	1d04      	adds	r4, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   32f4c:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	struct bt_smp_security_request *req = (void *)buf->data;
   32f50:	688b      	ldr	r3, [r1, #8]
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   32f52:	4620      	mov	r0, r4
   32f54:	2102      	movs	r1, #2
   32f56:	f01b ff1a 	bl	4ed8e <atomic_test_bit>
   32f5a:	2800      	cmp	r0, #0
   32f5c:	d150      	bne.n	33000 <smp_security_request+0xb8>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   32f5e:	2103      	movs	r1, #3
   32f60:	4620      	mov	r0, r4
   32f62:	f01b ff14 	bl	4ed8e <atomic_test_bit>
   32f66:	2800      	cmp	r0, #0
   32f68:	d14a      	bne.n	33000 <smp_security_request+0xb8>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   32f6a:	2101      	movs	r1, #1
   32f6c:	4620      	mov	r0, r4
   32f6e:	f01b ff0e 	bl	4ed8e <atomic_test_bit>
   32f72:	2800      	cmp	r0, #0
   32f74:	d144      	bne.n	33000 <smp_security_request+0xb8>
	if (sc_supported) {
   32f76:	4a24      	ldr	r2, [pc, #144]	; (33008 <smp_security_request+0xc0>)
   32f78:	7812      	ldrb	r2, [r2, #0]
   32f7a:	2a00      	cmp	r2, #0
   32f7c:	d042      	beq.n	33004 <smp_security_request+0xbc>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   32f7e:	781e      	ldrb	r6, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   32f80:	0737      	lsls	r7, r6, #28
   32f82:	d53f      	bpl.n	33004 <smp_security_request+0xbc>
	if (conn->le.keys) {
   32f84:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   32f88:	b153      	cbz	r3, 32fa0 <smp_security_request+0x58>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   32f8a:	89db      	ldrh	r3, [r3, #14]
   32f8c:	f003 0324 	and.w	r3, r3, #36	; 0x24
   32f90:	b9bb      	cbnz	r3, 32fc2 <smp_security_request+0x7a>
	if (smp_send_pairing_req(conn) < 0) {
   32f92:	4628      	mov	r0, r5
   32f94:	f7ff ff54 	bl	32e40 <smp_send_pairing_req>
   32f98:	2800      	cmp	r0, #0
   32f9a:	db2a      	blt.n	32ff2 <smp_security_request+0xaa>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   32f9c:	210f      	movs	r1, #15
   32f9e:	e02c      	b.n	32ffa <smp_security_request+0xb2>
					     &conn->le.dst);
   32fa0:	f105 0788 	add.w	r7, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   32fa4:	7a29      	ldrb	r1, [r5, #8]
   32fa6:	463a      	mov	r2, r7
   32fa8:	2020      	movs	r0, #32
   32faa:	f000 fe2f 	bl	33c0c <bt_keys_find>
   32fae:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   32fb2:	b930      	cbnz	r0, 32fc2 <smp_security_request+0x7a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
   32fb4:	7a29      	ldrb	r1, [r5, #8]
   32fb6:	463a      	mov	r2, r7
   32fb8:	2004      	movs	r0, #4
   32fba:	f000 fe27 	bl	33c0c <bt_keys_find>
   32fbe:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys) {
   32fc2:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
   32fc6:	2900      	cmp	r1, #0
   32fc8:	d0e3      	beq.n	32f92 <smp_security_request+0x4a>
	if ((auth & BT_SMP_AUTH_MITM) &&
   32fca:	0770      	lsls	r0, r6, #29
   32fcc:	d502      	bpl.n	32fd4 <smp_security_request+0x8c>
   32fce:	7b4b      	ldrb	r3, [r1, #13]
   32fd0:	07da      	lsls	r2, r3, #31
   32fd2:	d5de      	bpl.n	32f92 <smp_security_request+0x4a>
	if ((auth & BT_SMP_AUTH_SC) &&
   32fd4:	89cb      	ldrh	r3, [r1, #14]
   32fd6:	069b      	lsls	r3, r3, #26
   32fd8:	d5db      	bpl.n	32f92 <smp_security_request+0x4a>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
   32fda:	7b0b      	ldrb	r3, [r1, #12]
   32fdc:	9300      	str	r3, [sp, #0]
   32fde:	f101 0218 	add.w	r2, r1, #24
   32fe2:	f101 031a 	add.w	r3, r1, #26
   32fe6:	4628      	mov	r0, r5
   32fe8:	3110      	adds	r1, #16
   32fea:	f019 feb3 	bl	4cd54 <bt_conn_le_start_encryption>
   32fee:	2800      	cmp	r0, #0
   32ff0:	da02      	bge.n	32ff8 <smp_security_request+0xb0>
		return BT_SMP_ERR_UNSPECIFIED;
   32ff2:	2008      	movs	r0, #8
}
   32ff4:	b003      	add	sp, #12
   32ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   32ff8:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   32ffa:	4620      	mov	r0, r4
   32ffc:	f01c f80d 	bl	4f01a <atomic_set_bit>
		return 0;
   33000:	2000      	movs	r0, #0
   33002:	e7f7      	b.n	32ff4 <smp_security_request+0xac>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   33004:	2003      	movs	r0, #3
   33006:	e7f5      	b.n	32ff4 <smp_security_request+0xac>
   33008:	2000740e 	.word	0x2000740e

0003300c <sc_send_public_key>:
{
   3300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   3300e:	210c      	movs	r1, #12
{
   33010:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   33012:	f01c f846 	bl	4f0a2 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   33016:	4604      	mov	r4, r0
   33018:	b1a8      	cbz	r0, 33046 <sc_send_public_key+0x3a>
   3301a:	2140      	movs	r1, #64	; 0x40
   3301c:	3008      	adds	r0, #8
   3301e:	f01c fdfc 	bl	4fc1a <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   33022:	4f0a      	ldr	r7, [pc, #40]	; (3304c <sc_send_public_key+0x40>)
   33024:	2220      	movs	r2, #32
   33026:	6839      	ldr	r1, [r7, #0]
   33028:	4606      	mov	r6, r0
   3302a:	f018 fe15 	bl	4bc58 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   3302e:	6839      	ldr	r1, [r7, #0]
   33030:	2220      	movs	r2, #32
   33032:	4411      	add	r1, r2
   33034:	18b0      	adds	r0, r6, r2
   33036:	f018 fe0f 	bl	4bc58 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   3303a:	4628      	mov	r0, r5
   3303c:	4621      	mov	r1, r4
   3303e:	f01b ff51 	bl	4eee4 <smp_send.constprop.0>
	return 0;
   33042:	2000      	movs	r0, #0
}
   33044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   33046:	2008      	movs	r0, #8
   33048:	e7fc      	b.n	33044 <sc_send_public_key+0x38>
   3304a:	bf00      	nop
   3304c:	20004844 	.word	0x20004844

00033050 <smp_send_pairing_confirm>:
{
   33050:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   33052:	7a04      	ldrb	r4, [r0, #8]
   33054:	2c02      	cmp	r4, #2
{
   33056:	4605      	mov	r5, r0
	switch (smp->method) {
   33058:	d823      	bhi.n	330a2 <smp_send_pairing_confirm+0x52>
   3305a:	b144      	cbz	r4, 3306e <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   3305c:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   33060:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   33064:	40dc      	lsrs	r4, r3
   33066:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   3306a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   3306e:	2103      	movs	r1, #3
   33070:	4628      	mov	r0, r5
   33072:	f01c f816 	bl	4f0a2 <smp_create_pdu.constprop.0>
	if (!buf) {
   33076:	4606      	mov	r6, r0
   33078:	b1a8      	cbz	r0, 330a6 <smp_send_pairing_confirm+0x56>
   3307a:	2110      	movs	r1, #16
   3307c:	3008      	adds	r0, #8
   3307e:	f01c fdcc 	bl	4fc1a <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   33082:	9000      	str	r0, [sp, #0]
   33084:	480f      	ldr	r0, [pc, #60]	; (330c4 <smp_send_pairing_confirm+0x74>)
   33086:	4623      	mov	r3, r4
   33088:	6800      	ldr	r0, [r0, #0]
   3308a:	f105 0227 	add.w	r2, r5, #39	; 0x27
   3308e:	f105 0157 	add.w	r1, r5, #87	; 0x57
   33092:	f01b ff9d 	bl	4efd0 <smp_f4>
   33096:	4604      	mov	r4, r0
   33098:	b150      	cbz	r0, 330b0 <smp_send_pairing_confirm+0x60>
		net_buf_unref(buf);
   3309a:	4630      	mov	r0, r6
   3309c:	f010 fc56 	bl	4394c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   330a0:	e001      	b.n	330a6 <smp_send_pairing_confirm+0x56>
	switch (smp->method) {
   330a2:	2c03      	cmp	r4, #3
   330a4:	d002      	beq.n	330ac <smp_send_pairing_confirm+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
   330a6:	2008      	movs	r0, #8
}
   330a8:	b002      	add	sp, #8
   330aa:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   330ac:	2400      	movs	r4, #0
   330ae:	e7de      	b.n	3306e <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   330b0:	4631      	mov	r1, r6
   330b2:	4628      	mov	r0, r5
   330b4:	f01b ff16 	bl	4eee4 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   330b8:	1d28      	adds	r0, r5, #4
   330ba:	4621      	mov	r1, r4
   330bc:	f01b fee3 	bl	4ee86 <atomic_clear_bit>
	return 0;
   330c0:	4620      	mov	r0, r4
   330c2:	e7f1      	b.n	330a8 <smp_send_pairing_confirm+0x58>
   330c4:	20004844 	.word	0x20004844

000330c8 <smp_pairing_random>:
{
   330c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   330ca:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   330cc:	f100 0537 	add.w	r5, r0, #55	; 0x37
   330d0:	6889      	ldr	r1, [r1, #8]
   330d2:	2210      	movs	r2, #16
   330d4:	4628      	mov	r0, r5
   330d6:	f018 fdbf 	bl	4bc58 <memcpy>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   330da:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   330de:	78db      	ldrb	r3, [r3, #3]
   330e0:	2b00      	cmp	r3, #0
   330e2:	d154      	bne.n	3318e <smp_pairing_random+0xc6>
		err = sc_smp_check_confirm(smp);
   330e4:	4620      	mov	r0, r4
   330e6:	f7ff fdeb 	bl	32cc0 <sc_smp_check_confirm>
		if (err) {
   330ea:	b940      	cbnz	r0, 330fe <smp_pairing_random+0x36>
		switch (smp->method) {
   330ec:	7a23      	ldrb	r3, [r4, #8]
   330ee:	2b05      	cmp	r3, #5
   330f0:	d804      	bhi.n	330fc <smp_pairing_random+0x34>
   330f2:	e8df f003 	tbb	[pc, r3]
   330f6:	223a      	.short	0x223a
   330f8:	3a030622 	.word	0x3a030622
				return BT_SMP_ERR_UNSPECIFIED;
   330fc:	2008      	movs	r0, #8
}
   330fe:	b004      	add	sp, #16
   33100:	bd70      	pop	{r4, r5, r6, pc}
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
   33102:	ab03      	add	r3, sp, #12
   33104:	4863      	ldr	r0, [pc, #396]	; (33294 <smp_pairing_random+0x1cc>)
   33106:	9300      	str	r3, [sp, #0]
   33108:	6800      	ldr	r0, [r0, #0]
   3310a:	462b      	mov	r3, r5
   3310c:	f104 0227 	add.w	r2, r4, #39	; 0x27
   33110:	f104 0157 	add.w	r1, r4, #87	; 0x57
   33114:	f7ff fd1a 	bl	32b4c <smp_g2>
   33118:	2800      	cmp	r0, #0
   3311a:	d1ef      	bne.n	330fc <smp_pairing_random+0x34>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   3311c:	210a      	movs	r1, #10
   3311e:	1d20      	adds	r0, r4, #4
   33120:	f01b ff7b 	bl	4f01a <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   33124:	2109      	movs	r1, #9
   33126:	f01b ff78 	bl	4f01a <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   3312a:	4b5b      	ldr	r3, [pc, #364]	; (33298 <smp_pairing_random+0x1d0>)
   3312c:	9903      	ldr	r1, [sp, #12]
   3312e:	681b      	ldr	r3, [r3, #0]
   33130:	68db      	ldr	r3, [r3, #12]
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   33132:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   33136:	4798      	blx	r3
			return 0;
   33138:	e021      	b.n	3317e <smp_pairing_random+0xb6>
			smp->passkey_round++;
   3313a:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   3313e:	3301      	adds	r3, #1
   33140:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   33142:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   33144:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
			if (smp->passkey_round == 20U) {
   33148:	d00f      	beq.n	3316a <smp_pairing_random+0xa2>
			if (bt_rand(smp->prnd, 16)) {
   3314a:	2110      	movs	r1, #16
   3314c:	f104 0027 	add.w	r0, r4, #39	; 0x27
   33150:	f003 ff80 	bl	37054 <bt_rand>
   33154:	2800      	cmp	r0, #0
   33156:	d1d1      	bne.n	330fc <smp_pairing_random+0x34>
			atomic_set_bit(smp->allowed_cmds,
   33158:	2103      	movs	r1, #3
   3315a:	4620      	mov	r0, r4
   3315c:	f01b ff5d 	bl	4f01a <atomic_set_bit>
}
   33160:	b004      	add	sp, #16
   33162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return smp_send_pairing_confirm(smp);
   33166:	f7ff bf73 	b.w	33050 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   3316a:	1d23      	adds	r3, r4, #4
   3316c:	2107      	movs	r1, #7
   3316e:	4618      	mov	r0, r3
   33170:	f01b fe0d 	bl	4ed8e <atomic_test_bit>
   33174:	b128      	cbz	r0, 33182 <smp_pairing_random+0xba>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   33176:	2109      	movs	r1, #9
   33178:	4618      	mov	r0, r3
   3317a:	f01b ff4e 	bl	4f01a <atomic_set_bit>
			return 0;
   3317e:	2000      	movs	r0, #0
   33180:	e7bd      	b.n	330fe <smp_pairing_random+0x36>
		return compute_and_send_central_dhcheck(smp);
   33182:	4620      	mov	r0, r4
}
   33184:	b004      	add	sp, #16
   33186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_send_central_dhcheck(smp);
   3318a:	f01b bfd9 	b.w	4f140 <compute_and_send_central_dhcheck>
	switch (smp->method) {
   3318e:	7a23      	ldrb	r3, [r4, #8]
   33190:	2b05      	cmp	r3, #5
   33192:	d8b3      	bhi.n	330fc <smp_pairing_random+0x34>
   33194:	a201      	add	r2, pc, #4	; (adr r2, 3319c <smp_pairing_random+0xd4>)
   33196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   3319a:	bf00      	nop
   3319c:	000331e5 	.word	0x000331e5
   331a0:	000331fd 	.word	0x000331fd
   331a4:	000331fd 	.word	0x000331fd
   331a8:	000331b5 	.word	0x000331b5
   331ac:	000330fd 	.word	0x000330fd
   331b0:	0003324d 	.word	0x0003324d
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   331b4:	ab03      	add	r3, sp, #12
   331b6:	4937      	ldr	r1, [pc, #220]	; (33294 <smp_pairing_random+0x1cc>)
   331b8:	9300      	str	r3, [sp, #0]
   331ba:	6809      	ldr	r1, [r1, #0]
   331bc:	f104 0327 	add.w	r3, r4, #39	; 0x27
   331c0:	462a      	mov	r2, r5
   331c2:	f104 0057 	add.w	r0, r4, #87	; 0x57
   331c6:	f7ff fcc1 	bl	32b4c <smp_g2>
   331ca:	2800      	cmp	r0, #0
   331cc:	d196      	bne.n	330fc <smp_pairing_random+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   331ce:	210a      	movs	r1, #10
   331d0:	1d20      	adds	r0, r4, #4
   331d2:	f01b ff22 	bl	4f01a <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   331d6:	4b30      	ldr	r3, [pc, #192]	; (33298 <smp_pairing_random+0x1d0>)
   331d8:	9903      	ldr	r1, [sp, #12]
   331da:	681b      	ldr	r3, [r3, #0]
   331dc:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   331e0:	68db      	ldr	r3, [r3, #12]
   331e2:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   331e4:	4620      	mov	r0, r4
   331e6:	210d      	movs	r1, #13
   331e8:	f01b ff17 	bl	4f01a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   331ec:	1d20      	adds	r0, r4, #4
   331ee:	2110      	movs	r1, #16
   331f0:	f01b ff13 	bl	4f01a <atomic_set_bit>
	return smp_send_pairing_random(smp);
   331f4:	4620      	mov	r0, r4
   331f6:	f01b ff73 	bl	4f0e0 <smp_send_pairing_random>
   331fa:	e780      	b.n	330fe <smp_pairing_random+0x36>
		err = sc_smp_check_confirm(smp);
   331fc:	4620      	mov	r0, r4
   331fe:	f7ff fd5f 	bl	32cc0 <sc_smp_check_confirm>
		if (err) {
   33202:	2800      	cmp	r0, #0
   33204:	f47f af7b 	bne.w	330fe <smp_pairing_random+0x36>
		atomic_set_bit(smp->allowed_cmds,
   33208:	2103      	movs	r1, #3
   3320a:	4620      	mov	r0, r4
   3320c:	f01b ff05 	bl	4f01a <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   33210:	f01b ff66 	bl	4f0e0 <smp_send_pairing_random>
		if (err) {
   33214:	2800      	cmp	r0, #0
   33216:	f47f af72 	bne.w	330fe <smp_pairing_random+0x36>
		smp->passkey_round++;
   3321a:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   3321e:	3301      	adds	r3, #1
   33220:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   33222:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   33224:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   33228:	d106      	bne.n	33238 <smp_pairing_random+0x170>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   3322a:	210d      	movs	r1, #13
   3322c:	4620      	mov	r0, r4
   3322e:	f01b fef4 	bl	4f01a <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   33232:	2110      	movs	r1, #16
   33234:	1d20      	adds	r0, r4, #4
   33236:	e7a0      	b.n	3317a <smp_pairing_random+0xb2>
		if (bt_rand(smp->prnd, 16)) {
   33238:	2110      	movs	r1, #16
   3323a:	f104 0027 	add.w	r0, r4, #39	; 0x27
   3323e:	f003 ff09 	bl	37054 <bt_rand>
   33242:	3800      	subs	r0, #0
   33244:	bf18      	it	ne
   33246:	2001      	movne	r0, #1
   33248:	00c0      	lsls	r0, r0, #3
   3324a:	e758      	b.n	330fe <smp_pairing_random+0x36>
		if (bt_rand(smp->prnd, 16)) {
   3324c:	2110      	movs	r1, #16
   3324e:	f104 0027 	add.w	r0, r4, #39	; 0x27
   33252:	f003 feff 	bl	37054 <bt_rand>
   33256:	4605      	mov	r5, r0
   33258:	2800      	cmp	r0, #0
   3325a:	f47f af4f 	bne.w	330fc <smp_pairing_random+0x34>
		if (bt_auth && bt_auth->oob_data_request) {
   3325e:	4e0e      	ldr	r6, [pc, #56]	; (33298 <smp_pairing_random+0x1d0>)
   33260:	6833      	ldr	r3, [r6, #0]
   33262:	b1a3      	cbz	r3, 3328e <smp_pairing_random+0x1c6>
   33264:	691b      	ldr	r3, [r3, #16]
   33266:	b193      	cbz	r3, 3328e <smp_pairing_random+0x1c6>
			struct bt_conn_oob_info info = {
   33268:	4b0c      	ldr	r3, [pc, #48]	; (3329c <smp_pairing_random+0x1d4>)
			le_sc_oob_config_set(smp, &info);
   3326a:	a903      	add	r1, sp, #12
			struct bt_conn_oob_info info = {
   3326c:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   33270:	f8ad 300c 	strh.w	r3, [sp, #12]
			le_sc_oob_config_set(smp, &info);
   33274:	4620      	mov	r0, r4
   33276:	f01b fd68 	bl	4ed4a <le_sc_oob_config_set>
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   3327a:	210c      	movs	r1, #12
			smp->oobd_remote = NULL;
   3327c:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   33280:	1d20      	adds	r0, r4, #4
   33282:	f01b feca 	bl	4f01a <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   33286:	6833      	ldr	r3, [r6, #0]
   33288:	a903      	add	r1, sp, #12
   3328a:	691b      	ldr	r3, [r3, #16]
   3328c:	e751      	b.n	33132 <smp_pairing_random+0x6a>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   3328e:	2002      	movs	r0, #2
   33290:	e735      	b.n	330fe <smp_pairing_random+0x36>
   33292:	bf00      	nop
   33294:	20004844 	.word	0x20004844
   33298:	20004604 	.word	0x20004604
   3329c:	0005199e 	.word	0x0005199e

000332a0 <smp_public_key_periph>:
{
   332a0:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   332a2:	1d05      	adds	r5, r0, #4
{
   332a4:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   332a6:	210e      	movs	r1, #14
   332a8:	4628      	mov	r0, r5
   332aa:	f01b fd70 	bl	4ed8e <atomic_test_bit>
   332ae:	b120      	cbz	r0, 332ba <smp_public_key_periph+0x1a>
	err = sc_send_public_key(smp);
   332b0:	4620      	mov	r0, r4
   332b2:	f7ff feab 	bl	3300c <sc_send_public_key>
	if (err) {
   332b6:	b158      	cbz	r0, 332d0 <smp_public_key_periph+0x30>
}
   332b8:	bd38      	pop	{r3, r4, r5, pc}
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   332ba:	4b26      	ldr	r3, [pc, #152]	; (33354 <smp_public_key_periph+0xb4>)
   332bc:	2220      	movs	r2, #32
   332be:	6819      	ldr	r1, [r3, #0]
   332c0:	f104 0057 	add.w	r0, r4, #87	; 0x57
   332c4:	f018 fcb8 	bl	4bc38 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   332c8:	2800      	cmp	r0, #0
   332ca:	d1f1      	bne.n	332b0 <smp_public_key_periph+0x10>
{
   332cc:	2008      	movs	r0, #8
   332ce:	e7f3      	b.n	332b8 <smp_public_key_periph+0x18>
	switch (smp->method) {
   332d0:	7a23      	ldrb	r3, [r4, #8]
   332d2:	2b05      	cmp	r3, #5
   332d4:	d8fa      	bhi.n	332cc <smp_public_key_periph+0x2c>
   332d6:	a201      	add	r2, pc, #4	; (adr r2, 332dc <smp_public_key_periph+0x3c>)
   332d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   332dc:	000332f5 	.word	0x000332f5
   332e0:	00033329 	.word	0x00033329
   332e4:	0003330f 	.word	0x0003330f
   332e8:	000332f5 	.word	0x000332f5
   332ec:	000332cd 	.word	0x000332cd
   332f0:	0003334d 	.word	0x0003334d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   332f4:	2104      	movs	r1, #4
   332f6:	4620      	mov	r0, r4
   332f8:	f01b fe8f 	bl	4f01a <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   332fc:	f7ff fea8 	bl	33050 <smp_send_pairing_confirm>
		if (err) {
   33300:	2800      	cmp	r0, #0
   33302:	d1d9      	bne.n	332b8 <smp_public_key_periph+0x18>
	return generate_dhkey(smp);
   33304:	4620      	mov	r0, r4
}
   33306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return generate_dhkey(smp);
   3330a:	f01b be9a 	b.w	4f042 <generate_dhkey>
		err = display_passkey(smp);
   3330e:	4620      	mov	r0, r4
   33310:	f7ff fd3a 	bl	32d88 <display_passkey>
		if (err) {
   33314:	2800      	cmp	r0, #0
   33316:	d1cf      	bne.n	332b8 <smp_public_key_periph+0x18>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   33318:	2103      	movs	r1, #3
   3331a:	4620      	mov	r0, r4
   3331c:	f01b fe7d 	bl	4f01a <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   33320:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   33322:	f01b fe7a 	bl	4f01a <atomic_set_bit>
		break;
   33326:	e7ed      	b.n	33304 <smp_public_key_periph+0x64>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   33328:	4620      	mov	r0, r4
   3332a:	2103      	movs	r1, #3
   3332c:	f01b fe75 	bl	4f01a <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   33330:	210e      	movs	r1, #14
   33332:	f01b fe72 	bl	4f01a <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   33336:	4628      	mov	r0, r5
   33338:	210a      	movs	r1, #10
   3333a:	f01b fe6e 	bl	4f01a <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   3333e:	4b06      	ldr	r3, [pc, #24]	; (33358 <smp_public_key_periph+0xb8>)
   33340:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   33344:	681b      	ldr	r3, [r3, #0]
   33346:	689b      	ldr	r3, [r3, #8]
   33348:	4798      	blx	r3
		break;
   3334a:	e7db      	b.n	33304 <smp_public_key_periph+0x64>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   3334c:	2104      	movs	r1, #4
   3334e:	4620      	mov	r0, r4
   33350:	e7e7      	b.n	33322 <smp_public_key_periph+0x82>
   33352:	bf00      	nop
   33354:	20004844 	.word	0x20004844
   33358:	20004604 	.word	0x20004604

0003335c <smp_public_key>:
{
   3335c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   3335e:	688d      	ldr	r5, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   33360:	f100 0757 	add.w	r7, r0, #87	; 0x57
{
   33364:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   33366:	2220      	movs	r2, #32
   33368:	4629      	mov	r1, r5
   3336a:	4638      	mov	r0, r7
   3336c:	f018 fc74 	bl	4bc58 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   33370:	2220      	movs	r2, #32
   33372:	18a9      	adds	r1, r5, r2
   33374:	f104 0077 	add.w	r0, r4, #119	; 0x77
   33378:	f018 fc6e 	bl	4bc58 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   3337c:	4638      	mov	r0, r7
   3337e:	f7fc f921 	bl	2f5c4 <bt_pub_key_is_debug>
   33382:	b998      	cbnz	r0, 333ac <smp_public_key+0x50>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   33384:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   33388:	78db      	ldrb	r3, [r3, #3]
   3338a:	2b00      	cmp	r3, #0
   3338c:	f040 8081 	bne.w	33492 <smp_public_key+0x136>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   33390:	1d26      	adds	r6, r4, #4
   33392:	210e      	movs	r1, #14
   33394:	4630      	mov	r0, r6
   33396:	f01b fcfa 	bl	4ed8e <atomic_test_bit>
   3339a:	b330      	cbz	r0, 333ea <smp_public_key+0x8e>
		switch (smp->method) {
   3339c:	7a23      	ldrb	r3, [r4, #8]
   3339e:	2b05      	cmp	r3, #5
   333a0:	d82b      	bhi.n	333fa <smp_public_key+0x9e>
   333a2:	e8df f003 	tbb	[pc, r3]
   333a6:	472c      	.short	0x472c
   333a8:	532a2c31 	.word	0x532a2c31
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   333ac:	210e      	movs	r1, #14
   333ae:	1d20      	adds	r0, r4, #4
   333b0:	f01b fe33 	bl	4f01a <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   333b4:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   333b8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   333bc:	b933      	cbnz	r3, 333cc <smp_public_key+0x70>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   333be:	7a28      	ldrb	r0, [r5, #8]
   333c0:	f105 0188 	add.w	r1, r5, #136	; 0x88
   333c4:	f000 fba0 	bl	33b08 <bt_keys_get_addr>
   333c8:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   333cc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   333d0:	2b00      	cmp	r3, #0
   333d2:	d0d7      	beq.n	33384 <smp_public_key+0x28>
   333d4:	89da      	ldrh	r2, [r3, #14]
   333d6:	f002 0224 	and.w	r2, r2, #36	; 0x24
   333da:	2a00      	cmp	r2, #0
   333dc:	d0d2      	beq.n	33384 <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   333de:	7b5b      	ldrb	r3, [r3, #13]
   333e0:	079b      	lsls	r3, r3, #30
   333e2:	d4cf      	bmi.n	33384 <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   333e4:	2003      	movs	r0, #3
}
   333e6:	b003      	add	sp, #12
   333e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   333ea:	4b32      	ldr	r3, [pc, #200]	; (334b4 <smp_public_key+0x158>)
   333ec:	2220      	movs	r2, #32
   333ee:	6819      	ldr	r1, [r3, #0]
   333f0:	4638      	mov	r0, r7
   333f2:	f018 fc21 	bl	4bc38 <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   333f6:	2800      	cmp	r0, #0
   333f8:	d1d0      	bne.n	3339c <smp_public_key+0x40>
			return BT_SMP_ERR_UNSPECIFIED;
   333fa:	2008      	movs	r0, #8
   333fc:	e7f3      	b.n	333e6 <smp_public_key+0x8a>
			atomic_set_bit(smp->allowed_cmds,
   333fe:	2103      	movs	r1, #3
			atomic_set_bit(smp->allowed_cmds,
   33400:	4620      	mov	r0, r4
   33402:	f01b fe0a 	bl	4f01a <atomic_set_bit>
			break;
   33406:	e00f      	b.n	33428 <smp_public_key+0xcc>
			err = display_passkey(smp);
   33408:	4620      	mov	r0, r4
   3340a:	f7ff fcbd 	bl	32d88 <display_passkey>
			if (err) {
   3340e:	2800      	cmp	r0, #0
   33410:	d1e9      	bne.n	333e6 <smp_public_key+0x8a>
			atomic_set_bit(smp->allowed_cmds,
   33412:	2103      	movs	r1, #3
   33414:	4620      	mov	r0, r4
   33416:	f01b fe00 	bl	4f01a <atomic_set_bit>
			atomic_set_bit(smp->allowed_cmds,
   3341a:	210e      	movs	r1, #14
   3341c:	f01b fdfd 	bl	4f01a <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
   33420:	f7ff fe16 	bl	33050 <smp_send_pairing_confirm>
			if (err) {
   33424:	2800      	cmp	r0, #0
   33426:	d1de      	bne.n	333e6 <smp_public_key+0x8a>
		return generate_dhkey(smp);
   33428:	4620      	mov	r0, r4
}
   3342a:	b003      	add	sp, #12
   3342c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return generate_dhkey(smp);
   33430:	f01b be07 	b.w	4f042 <generate_dhkey>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   33434:	210a      	movs	r1, #10
   33436:	4630      	mov	r0, r6
   33438:	f01b fdef 	bl	4f01a <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
   3343c:	4b1e      	ldr	r3, [pc, #120]	; (334b8 <smp_public_key+0x15c>)
   3343e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   33442:	681b      	ldr	r3, [r3, #0]
   33444:	689b      	ldr	r3, [r3, #8]
   33446:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   33448:	210e      	movs	r1, #14
   3344a:	e7d9      	b.n	33400 <smp_public_key+0xa4>
			if (bt_rand(smp->prnd, 16)) {
   3344c:	2110      	movs	r1, #16
   3344e:	f104 0027 	add.w	r0, r4, #39	; 0x27
   33452:	f003 fdff 	bl	37054 <bt_rand>
   33456:	4605      	mov	r5, r0
   33458:	2800      	cmp	r0, #0
   3345a:	d1ce      	bne.n	333fa <smp_public_key+0x9e>
			if (bt_auth && bt_auth->oob_data_request) {
   3345c:	4f16      	ldr	r7, [pc, #88]	; (334b8 <smp_public_key+0x15c>)
   3345e:	683b      	ldr	r3, [r7, #0]
   33460:	b333      	cbz	r3, 334b0 <smp_public_key+0x154>
   33462:	691b      	ldr	r3, [r3, #16]
   33464:	b323      	cbz	r3, 334b0 <smp_public_key+0x154>
				struct bt_conn_oob_info info = {
   33466:	4b15      	ldr	r3, [pc, #84]	; (334bc <smp_public_key+0x160>)
				le_sc_oob_config_set(smp, &info);
   33468:	a901      	add	r1, sp, #4
				struct bt_conn_oob_info info = {
   3346a:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   3346e:	f8ad 3004 	strh.w	r3, [sp, #4]
				le_sc_oob_config_set(smp, &info);
   33472:	4620      	mov	r0, r4
   33474:	f01b fc69 	bl	4ed4a <le_sc_oob_config_set>
				atomic_set_bit(smp->flags,
   33478:	4630      	mov	r0, r6
				smp->oobd_remote = NULL;
   3347a:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
				atomic_set_bit(smp->flags,
   3347e:	210c      	movs	r1, #12
   33480:	f01b fdcb 	bl	4f01a <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
   33484:	683b      	ldr	r3, [r7, #0]
   33486:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   3348a:	691b      	ldr	r3, [r3, #16]
   3348c:	a901      	add	r1, sp, #4
   3348e:	4798      	blx	r3
			break;
   33490:	e7ca      	b.n	33428 <smp_public_key+0xcc>
	if (!sc_public_key) {
   33492:	4b08      	ldr	r3, [pc, #32]	; (334b4 <smp_public_key+0x158>)
   33494:	681d      	ldr	r5, [r3, #0]
   33496:	b92d      	cbnz	r5, 334a4 <smp_public_key+0x148>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   33498:	1d20      	adds	r0, r4, #4
   3349a:	2106      	movs	r1, #6
   3349c:	f01b fdbd 	bl	4f01a <atomic_set_bit>
		return 0;
   334a0:	4628      	mov	r0, r5
   334a2:	e7a0      	b.n	333e6 <smp_public_key+0x8a>
	err = smp_public_key_periph(smp);
   334a4:	4620      	mov	r0, r4
}
   334a6:	b003      	add	sp, #12
   334a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	err = smp_public_key_periph(smp);
   334ac:	f7ff bef8 	b.w	332a0 <smp_public_key_periph>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
   334b0:	2002      	movs	r0, #2
   334b2:	e798      	b.n	333e6 <smp_public_key+0x8a>
   334b4:	20004844 	.word	0x20004844
   334b8:	20004604 	.word	0x20004604
   334bc:	0005199e 	.word	0x0005199e

000334c0 <bt_smp_connected>:
{
   334c0:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   334c2:	4905      	ldr	r1, [pc, #20]	; (334d8 <bt_smp_connected+0x18>)
   334c4:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   334c8:	30e8      	adds	r0, #232	; 0xe8
   334ca:	f01d fba8 	bl	50c1e <k_work_init_delayable>
	smp_reset(smp);
   334ce:	4620      	mov	r0, r4
}
   334d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   334d4:	f01b bfe5 	b.w	4f4a2 <smp_reset>
   334d8:	0004f999 	.word	0x0004f999

000334dc <smp_pairing_accept_query>:
	if (bt_auth && bt_auth->pairing_accept) {
   334dc:	4b13      	ldr	r3, [pc, #76]	; (3352c <smp_pairing_accept_query+0x50>)
   334de:	681b      	ldr	r3, [r3, #0]
{
   334e0:	b507      	push	{r0, r1, r2, lr}
	if (bt_auth && bt_auth->pairing_accept) {
   334e2:	b1f3      	cbz	r3, 33522 <smp_pairing_accept_query+0x46>
   334e4:	681b      	ldr	r3, [r3, #0]
   334e6:	b1f3      	cbz	r3, 33526 <smp_pairing_accept_query+0x4a>
		const struct bt_conn_pairing_feat feat = {
   334e8:	780a      	ldrb	r2, [r1, #0]
   334ea:	f88d 2000 	strb.w	r2, [sp]
   334ee:	784a      	ldrb	r2, [r1, #1]
   334f0:	f88d 2001 	strb.w	r2, [sp, #1]
   334f4:	788a      	ldrb	r2, [r1, #2]
   334f6:	f88d 2002 	strb.w	r2, [sp, #2]
   334fa:	78ca      	ldrb	r2, [r1, #3]
   334fc:	f88d 2003 	strb.w	r2, [sp, #3]
   33500:	790a      	ldrb	r2, [r1, #4]
   33502:	f88d 2004 	strb.w	r2, [sp, #4]
   33506:	794a      	ldrb	r2, [r1, #5]
   33508:	f88d 2005 	strb.w	r2, [sp, #5]
		return smp_err_get(bt_auth->pairing_accept(conn, &feat));
   3350c:	4669      	mov	r1, sp
   3350e:	4798      	blx	r3
	switch (auth_err) {
   33510:	3801      	subs	r0, #1
   33512:	b2c0      	uxtb	r0, r0
   33514:	2808      	cmp	r0, #8
   33516:	d804      	bhi.n	33522 <smp_pairing_accept_query+0x46>
   33518:	4b05      	ldr	r3, [pc, #20]	; (33530 <smp_pairing_accept_query+0x54>)
   3351a:	5c18      	ldrb	r0, [r3, r0]
}
   3351c:	b003      	add	sp, #12
   3351e:	f85d fb04 	ldr.w	pc, [sp], #4
		return smp_err_get(bt_auth->pairing_accept(conn, &feat));
   33522:	2000      	movs	r0, #0
   33524:	e7fa      	b.n	3351c <smp_pairing_accept_query+0x40>
	return 0;
   33526:	4618      	mov	r0, r3
   33528:	e7f8      	b.n	3351c <smp_pairing_accept_query+0x40>
   3352a:	bf00      	nop
   3352c:	20004604 	.word	0x20004604
   33530:	000542df 	.word	0x000542df

00033534 <smp_pairing_rsp>:
{
   33534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
   33538:	688e      	ldr	r6, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   3353a:	78f3      	ldrb	r3, [r6, #3]
   3353c:	3b07      	subs	r3, #7
   3353e:	2b09      	cmp	r3, #9
{
   33540:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   33542:	f200 8086 	bhi.w	33652 <smp_pairing_rsp+0x11e>
	smp->local_dist &= rsp->init_key_dist;
   33546:	7932      	ldrb	r2, [r6, #4]
   33548:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
	struct bt_conn *conn = smp->chan.chan.conn;
   3354c:	f8d0 80f0 	ldr.w	r8, [r0, #240]	; 0xf0
	smp->local_dist &= rsp->init_key_dist;
   33550:	4013      	ands	r3, r2
   33552:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	smp->remote_dist &= rsp->resp_key_dist;
   33556:	7972      	ldrb	r2, [r6, #5]
   33558:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   3355c:	4013      	ands	r3, r2
   3355e:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   33562:	2302      	movs	r3, #2
   33564:	7403      	strb	r3, [r0, #16]
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   33566:	2206      	movs	r2, #6
   33568:	4631      	mov	r1, r6
   3356a:	3011      	adds	r0, #17
   3356c:	f018 fb74 	bl	4bc58 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   33570:	78b3      	ldrb	r3, [r6, #2]
   33572:	071f      	lsls	r7, r3, #28
   33574:	d506      	bpl.n	33584 <smp_pairing_rsp+0x50>
   33576:	7b23      	ldrb	r3, [r4, #12]
   33578:	071d      	lsls	r5, r3, #28
   3357a:	d503      	bpl.n	33584 <smp_pairing_rsp+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   3357c:	2105      	movs	r1, #5
   3357e:	1d20      	adds	r0, r4, #4
   33580:	f01b fd4b 	bl	4f01a <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   33584:	78b3      	ldrb	r3, [r6, #2]
   33586:	0698      	lsls	r0, r3, #26
   33588:	d506      	bpl.n	33598 <smp_pairing_rsp+0x64>
   3358a:	7b23      	ldrb	r3, [r4, #12]
   3358c:	0699      	lsls	r1, r3, #26
   3358e:	d503      	bpl.n	33598 <smp_pairing_rsp+0x64>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   33590:	2114      	movs	r1, #20
   33592:	1d20      	adds	r0, r4, #4
   33594:	f01b fd41 	bl	4f01a <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   33598:	78b3      	ldrb	r3, [r6, #2]
   3359a:	07da      	lsls	r2, r3, #31
   3359c:	d506      	bpl.n	335ac <smp_pairing_rsp+0x78>
   3359e:	7b23      	ldrb	r3, [r4, #12]
   335a0:	07db      	lsls	r3, r3, #31
   335a2:	d503      	bpl.n	335ac <smp_pairing_rsp+0x78>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   335a4:	210d      	movs	r1, #13
   335a6:	1d20      	adds	r0, r4, #4
   335a8:	f01b fd37 	bl	4f01a <atomic_set_bit>
	smp->method = get_pair_method(smp, rsp->io_capability);
   335ac:	7831      	ldrb	r1, [r6, #0]
   335ae:	4620      	mov	r0, r4
   335b0:	f7ff fa78 	bl	32aa4 <get_pair_method>
   335b4:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   335b6:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
   335ba:	4620      	mov	r0, r4
   335bc:	f01b fc1e 	bl	4edfc <update_keys_check>
   335c0:	b918      	cbnz	r0, 335ca <smp_pairing_rsp+0x96>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   335c2:	2503      	movs	r5, #3
}
   335c4:	4628      	mov	r0, r5
   335c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = remote_sec_level_reachable(smp);
   335ca:	4620      	mov	r0, r4
   335cc:	f01b fc37 	bl	4ee3e <remote_sec_level_reachable>
	if (err) {
   335d0:	4605      	mov	r5, r0
   335d2:	2800      	cmp	r0, #0
   335d4:	d1f6      	bne.n	335c4 <smp_pairing_rsp+0x90>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   335d6:	1d27      	adds	r7, r4, #4
   335d8:	2105      	movs	r1, #5
   335da:	4638      	mov	r0, r7
   335dc:	f01b fbd7 	bl	4ed8e <atomic_test_bit>
   335e0:	2800      	cmp	r0, #0
   335e2:	d0ee      	beq.n	335c2 <smp_pairing_rsp+0x8e>
	smp->remote_dist &= RECV_KEYS_SC;
   335e4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	smp->local_dist &= SEND_KEYS_SC;
   335e8:	f884 50e8 	strb.w	r5, [r4, #232]	; 0xe8
	smp->remote_dist &= RECV_KEYS_SC;
   335ec:	f003 0302 	and.w	r3, r3, #2
   335f0:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		err = smp_pairing_accept_query(conn, rsp);
   335f4:	4631      	mov	r1, r6
   335f6:	4640      	mov	r0, r8
   335f8:	f7ff ff70 	bl	334dc <smp_pairing_accept_query>
		if (err) {
   335fc:	4605      	mov	r5, r0
   335fe:	2800      	cmp	r0, #0
   33600:	d1e0      	bne.n	335c4 <smp_pairing_rsp+0x90>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   33602:	7a23      	ldrb	r3, [r4, #8]
   33604:	b993      	cbnz	r3, 3362c <smp_pairing_rsp+0xf8>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   33606:	210f      	movs	r1, #15
   33608:	4638      	mov	r0, r7
   3360a:	f01b fbc0 	bl	4ed8e <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   3360e:	b168      	cbz	r0, 3362c <smp_pairing_rsp+0xf8>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   33610:	4e11      	ldr	r6, [pc, #68]	; (33658 <smp_pairing_rsp+0x124>)
   33612:	6833      	ldr	r3, [r6, #0]
   33614:	b153      	cbz	r3, 3362c <smp_pairing_rsp+0xf8>
	    bt_auth && bt_auth->pairing_confirm) {
   33616:	699b      	ldr	r3, [r3, #24]
   33618:	b143      	cbz	r3, 3362c <smp_pairing_rsp+0xf8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   3361a:	4638      	mov	r0, r7
   3361c:	210a      	movs	r1, #10
   3361e:	f01b fcfc 	bl	4f01a <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   33622:	6833      	ldr	r3, [r6, #0]
   33624:	4640      	mov	r0, r8
   33626:	699b      	ldr	r3, [r3, #24]
   33628:	4798      	blx	r3
		return 0;
   3362a:	e7cb      	b.n	335c4 <smp_pairing_rsp+0x90>
	if (!sc_public_key) {
   3362c:	4b0b      	ldr	r3, [pc, #44]	; (3365c <smp_pairing_rsp+0x128>)
   3362e:	681b      	ldr	r3, [r3, #0]
   33630:	b923      	cbnz	r3, 3363c <smp_pairing_rsp+0x108>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   33632:	2106      	movs	r1, #6
   33634:	4638      	mov	r0, r7
   33636:	f01b fcf0 	bl	4f01a <atomic_set_bit>
		return 0;
   3363a:	e7c3      	b.n	335c4 <smp_pairing_rsp+0x90>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   3363c:	4620      	mov	r0, r4
   3363e:	210c      	movs	r1, #12
   33640:	f01b fceb 	bl	4f01a <atomic_set_bit>
	atomic_clear_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   33644:	210b      	movs	r1, #11
   33646:	f01b fc1e 	bl	4ee86 <atomic_clear_bit>
}
   3364a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return sc_send_public_key(smp);
   3364e:	f7ff bcdd 	b.w	3300c <sc_send_public_key>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   33652:	2506      	movs	r5, #6
   33654:	e7b6      	b.n	335c4 <smp_pairing_rsp+0x90>
   33656:	bf00      	nop
   33658:	20004604 	.word	0x20004604
   3365c:	20004844 	.word	0x20004844

00033660 <smp_pairing_req>:
{
   33660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   33664:	688e      	ldr	r6, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   33666:	78f3      	ldrb	r3, [r6, #3]
   33668:	3b07      	subs	r3, #7
   3366a:	2b09      	cmp	r3, #9
{
   3366c:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   3366e:	f200 80b9 	bhi.w	337e4 <smp_pairing_req+0x184>
	struct bt_conn *conn = smp->chan.chan.conn;
   33672:	f8d0 80f0 	ldr.w	r8, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
   33676:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
   3367a:	b15b      	cbz	r3, 33694 <smp_pairing_req+0x34>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   3367c:	1d27      	adds	r7, r4, #4
   3367e:	210f      	movs	r1, #15
   33680:	4638      	mov	r0, r7
   33682:	f01b fb84 	bl	4ed8e <atomic_test_bit>
   33686:	b998      	cbnz	r0, 336b0 <smp_pairing_req+0x50>
		int ret = smp_init(smp);
   33688:	4620      	mov	r0, r4
   3368a:	f7ff fba7 	bl	32ddc <smp_init>
		if (ret) {
   3368e:	b178      	cbz	r0, 336b0 <smp_pairing_req+0x50>
			return ret;
   33690:	b2c5      	uxtb	r5, r0
   33692:	e00a      	b.n	336aa <smp_pairing_req+0x4a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   33694:	f898 0008 	ldrb.w	r0, [r8, #8]
   33698:	f108 0188 	add.w	r1, r8, #136	; 0x88
   3369c:	f000 fa34 	bl	33b08 <bt_keys_get_addr>
   336a0:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
		if (!conn->le.keys) {
   336a4:	2800      	cmp	r0, #0
   336a6:	d1e9      	bne.n	3367c <smp_pairing_req+0x1c>
			return BT_SMP_ERR_UNSPECIFIED;
   336a8:	2508      	movs	r5, #8
}
   336aa:	4628      	mov	r0, r5
   336ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   336b0:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   336b2:	2206      	movs	r2, #6
   336b4:	4631      	mov	r1, r6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   336b6:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   336b8:	f104 000a 	add.w	r0, r4, #10
   336bc:	f018 facc 	bl	4bc58 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   336c0:	2302      	movs	r3, #2
   336c2:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   336c4:	78b0      	ldrb	r0, [r6, #2]
   336c6:	f7ff fa75 	bl	32bb4 <get_auth.constprop.0>
   336ca:	74e0      	strb	r0, [r4, #19]
   336cc:	4605      	mov	r5, r0
	rsp->io_capability = get_io_capa();
   336ce:	f7ff f9c3 	bl	32a58 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   336d2:	4b45      	ldr	r3, [pc, #276]	; (337e8 <smp_pairing_req+0x188>)
	rsp->io_capability = get_io_capa();
   336d4:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   336d6:	781b      	ldrb	r3, [r3, #0]
   336d8:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   336da:	2310      	movs	r3, #16
   336dc:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   336de:	7933      	ldrb	r3, [r6, #4]
   336e0:	f003 0303 	and.w	r3, r3, #3
   336e4:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   336e6:	7973      	ldrb	r3, [r6, #5]
   336e8:	f003 0301 	and.w	r3, r3, #1
   336ec:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   336ee:	072b      	lsls	r3, r5, #28
   336f0:	d50c      	bpl.n	3370c <smp_pairing_req+0xac>
   336f2:	78b3      	ldrb	r3, [r6, #2]
   336f4:	071d      	lsls	r5, r3, #28
   336f6:	d509      	bpl.n	3370c <smp_pairing_req+0xac>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   336f8:	2105      	movs	r1, #5
   336fa:	4638      	mov	r0, r7
   336fc:	f01b fc8d 	bl	4f01a <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   33700:	7d63      	ldrb	r3, [r4, #21]
   33702:	f003 0302 	and.w	r3, r3, #2
   33706:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   33708:	2300      	movs	r3, #0
   3370a:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   3370c:	7ce3      	ldrb	r3, [r4, #19]
   3370e:	0698      	lsls	r0, r3, #26
   33710:	d506      	bpl.n	33720 <smp_pairing_req+0xc0>
   33712:	78b3      	ldrb	r3, [r6, #2]
   33714:	0699      	lsls	r1, r3, #26
   33716:	d503      	bpl.n	33720 <smp_pairing_req+0xc0>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   33718:	2114      	movs	r1, #20
   3371a:	4638      	mov	r0, r7
   3371c:	f01b fc7d 	bl	4f01a <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   33720:	7da3      	ldrb	r3, [r4, #22]
   33722:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   33726:	7d63      	ldrb	r3, [r4, #21]
   33728:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   3372c:	7ce3      	ldrb	r3, [r4, #19]
   3372e:	07da      	lsls	r2, r3, #31
   33730:	d506      	bpl.n	33740 <smp_pairing_req+0xe0>
   33732:	78b3      	ldrb	r3, [r6, #2]
   33734:	07db      	lsls	r3, r3, #31
   33736:	d503      	bpl.n	33740 <smp_pairing_req+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   33738:	210d      	movs	r1, #13
   3373a:	4638      	mov	r0, r7
   3373c:	f01b fc6d 	bl	4f01a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   33740:	2103      	movs	r1, #3
   33742:	4638      	mov	r0, r7
   33744:	f01b fc69 	bl	4f01a <atomic_set_bit>
	smp->method = get_pair_method(smp, req->io_capability);
   33748:	7831      	ldrb	r1, [r6, #0]
   3374a:	4620      	mov	r0, r4
   3374c:	f7ff f9aa 	bl	32aa4 <get_pair_method>
   33750:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   33752:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
   33756:	4620      	mov	r0, r4
   33758:	f01b fb50 	bl	4edfc <update_keys_check>
   3375c:	b908      	cbnz	r0, 33762 <smp_pairing_req+0x102>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   3375e:	2503      	movs	r5, #3
   33760:	e7a3      	b.n	336aa <smp_pairing_req+0x4a>
	err = remote_sec_level_reachable(smp);
   33762:	4620      	mov	r0, r4
   33764:	f01b fb6b 	bl	4ee3e <remote_sec_level_reachable>
	if (err) {
   33768:	4605      	mov	r5, r0
   3376a:	2800      	cmp	r0, #0
   3376c:	d19d      	bne.n	336aa <smp_pairing_req+0x4a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   3376e:	2105      	movs	r1, #5
   33770:	4638      	mov	r0, r7
   33772:	f01b fb0c 	bl	4ed8e <atomic_test_bit>
   33776:	2800      	cmp	r0, #0
   33778:	d0f1      	beq.n	3375e <smp_pairing_req+0xfe>
		err = smp_pairing_accept_query(conn, req);
   3377a:	4631      	mov	r1, r6
   3377c:	4640      	mov	r0, r8
   3377e:	f7ff fead 	bl	334dc <smp_pairing_accept_query>
		if (err) {
   33782:	4605      	mov	r5, r0
   33784:	2800      	cmp	r0, #0
   33786:	d190      	bne.n	336aa <smp_pairing_req+0x4a>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   33788:	7a23      	ldrb	r3, [r4, #8]
   3378a:	b993      	cbnz	r3, 337b2 <smp_pairing_req+0x152>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   3378c:	210f      	movs	r1, #15
   3378e:	4638      	mov	r0, r7
   33790:	f01b fafd 	bl	4ed8e <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   33794:	b968      	cbnz	r0, 337b2 <smp_pairing_req+0x152>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   33796:	4e15      	ldr	r6, [pc, #84]	; (337ec <smp_pairing_req+0x18c>)
   33798:	6833      	ldr	r3, [r6, #0]
   3379a:	b153      	cbz	r3, 337b2 <smp_pairing_req+0x152>
	    bt_auth && bt_auth->pairing_confirm) {
   3379c:	699b      	ldr	r3, [r3, #24]
   3379e:	b143      	cbz	r3, 337b2 <smp_pairing_req+0x152>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   337a0:	4638      	mov	r0, r7
   337a2:	210a      	movs	r1, #10
   337a4:	f01b fc39 	bl	4f01a <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   337a8:	6833      	ldr	r3, [r6, #0]
   337aa:	4640      	mov	r0, r8
   337ac:	699b      	ldr	r3, [r3, #24]
   337ae:	4798      	blx	r3
		return 0;
   337b0:	e77b      	b.n	336aa <smp_pairing_req+0x4a>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   337b2:	210c      	movs	r1, #12
   337b4:	4620      	mov	r0, r4
   337b6:	f01b fc30 	bl	4f01a <atomic_set_bit>
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   337ba:	2102      	movs	r1, #2
   337bc:	f01b fc71 	bl	4f0a2 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   337c0:	4606      	mov	r6, r0
   337c2:	2800      	cmp	r0, #0
   337c4:	f43f af70 	beq.w	336a8 <smp_pairing_req+0x48>
   337c8:	2106      	movs	r1, #6
   337ca:	3008      	adds	r0, #8
   337cc:	f01c fa25 	bl	4fc1a <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   337d0:	f104 0111 	add.w	r1, r4, #17
   337d4:	2206      	movs	r2, #6
   337d6:	f018 fa3f 	bl	4bc58 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   337da:	4631      	mov	r1, r6
   337dc:	4620      	mov	r0, r4
   337de:	f01b fb81 	bl	4eee4 <smp_send.constprop.0>
	return 0;
   337e2:	e762      	b.n	336aa <smp_pairing_req+0x4a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   337e4:	2506      	movs	r5, #6
   337e6:	e760      	b.n	336aa <smp_pairing_req+0x4a>
   337e8:	2000740f 	.word	0x2000740f
   337ec:	20004604 	.word	0x20004604

000337f0 <smp_pairing_complete>:
{
   337f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   337f2:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   337f6:	4605      	mov	r5, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   337f8:	1d07      	adds	r7, r0, #4
	if (!status) {
   337fa:	b9e9      	cbnz	r1, 33838 <smp_pairing_complete+0x48>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   337fc:	210d      	movs	r1, #13
   337fe:	4638      	mov	r0, r7
   33800:	f01b fac5 	bl	4ed8e <atomic_test_bit>
		if (bond_flag) {
   33804:	4606      	mov	r6, r0
   33806:	b118      	cbz	r0, 33810 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   33808:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   3380c:	f000 fabc 	bl	33d88 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
   33810:	4b24      	ldr	r3, [pc, #144]	; (338a4 <smp_pairing_complete+0xb4>)
   33812:	681b      	ldr	r3, [r3, #0]
   33814:	b123      	cbz	r3, 33820 <smp_pairing_complete+0x30>
   33816:	69db      	ldr	r3, [r3, #28]
		    bt_auth && bt_auth->pairing_failed) {
   33818:	b113      	cbz	r3, 33820 <smp_pairing_complete+0x30>
			bt_auth->pairing_failed(conn, security_err);
   3381a:	4631      	mov	r1, r6
   3381c:	4620      	mov	r0, r4
   3381e:	4798      	blx	r3
	smp_reset(smp);
   33820:	4628      	mov	r0, r5
   33822:	f01b fe3e 	bl	4f4a2 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   33826:	7a62      	ldrb	r2, [r4, #9]
   33828:	7aa3      	ldrb	r3, [r4, #10]
   3382a:	429a      	cmp	r2, r3
   3382c:	d039      	beq.n	338a2 <smp_pairing_complete+0xb2>
		bt_smp_start_security(conn);
   3382e:	4620      	mov	r0, r4
}
   33830:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   33834:	f01b bed3 	b.w	4f5de <bt_smp_start_security>
	switch (smp_err) {
   33838:	3901      	subs	r1, #1
   3383a:	b2c9      	uxtb	r1, r1
   3383c:	290e      	cmp	r1, #14
   3383e:	bf9c      	itt	ls
   33840:	4b19      	ldrls	r3, [pc, #100]	; (338a8 <smp_pairing_complete+0xb8>)
   33842:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   33844:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   33848:	bf88      	it	hi
   3384a:	2609      	movhi	r6, #9
		if (conn->le.keys &&
   3384c:	b143      	cbz	r3, 33860 <smp_pairing_complete+0x70>
   3384e:	7b1b      	ldrb	r3, [r3, #12]
   33850:	bb03      	cbnz	r3, 33894 <smp_pairing_complete+0xa4>
			bt_keys_clear(conn->le.keys);
   33852:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   33856:	f000 fa6f 	bl	33d38 <bt_keys_clear>
			conn->le.keys = NULL;
   3385a:	2300      	movs	r3, #0
   3385c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   33860:	2102      	movs	r1, #2
   33862:	4638      	mov	r0, r7
   33864:	f01b fa93 	bl	4ed8e <atomic_test_bit>
   33868:	b940      	cbnz	r0, 3387c <smp_pairing_complete+0x8c>
	switch (err) {
   3386a:	2e07      	cmp	r6, #7
   3386c:	bf96      	itet	ls
   3386e:	4b0f      	ldrls	r3, [pc, #60]	; (338ac <smp_pairing_complete+0xbc>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   33870:	211f      	movhi	r1, #31
   33872:	5d99      	ldrbls	r1, [r3, r6]
			bt_conn_security_changed(conn,
   33874:	4632      	mov	r2, r6
   33876:	4620      	mov	r0, r4
   33878:	f7fc fae6 	bl	2fe48 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   3387c:	2103      	movs	r1, #3
   3387e:	4638      	mov	r0, r7
   33880:	f01b fa85 	bl	4ed8e <atomic_test_bit>
   33884:	2800      	cmp	r0, #0
   33886:	d0cb      	beq.n	33820 <smp_pairing_complete+0x30>
   33888:	4b06      	ldr	r3, [pc, #24]	; (338a4 <smp_pairing_complete+0xb4>)
   3388a:	681b      	ldr	r3, [r3, #0]
   3388c:	2b00      	cmp	r3, #0
   3388e:	d0c7      	beq.n	33820 <smp_pairing_complete+0x30>
		    bt_auth && bt_auth->pairing_failed) {
   33890:	6a1b      	ldr	r3, [r3, #32]
   33892:	e7c1      	b.n	33818 <smp_pairing_complete+0x28>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   33894:	2102      	movs	r1, #2
   33896:	4638      	mov	r0, r7
   33898:	f01b fa79 	bl	4ed8e <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   3389c:	2800      	cmp	r0, #0
   3389e:	d1d8      	bne.n	33852 <smp_pairing_complete+0x62>
   338a0:	e7de      	b.n	33860 <smp_pairing_complete+0x70>
}
   338a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   338a4:	20004604 	.word	0x20004604
   338a8:	000542e8 	.word	0x000542e8
   338ac:	000542d7 	.word	0x000542d7

000338b0 <bt_smp_recv>:
{
   338b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   338b2:	898b      	ldrh	r3, [r1, #12]
{
   338b4:	4607      	mov	r7, r0
   338b6:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   338b8:	b393      	cbz	r3, 33920 <bt_smp_recv+0x70>
	return net_buf_simple_pull_mem(&buf->b, len);
   338ba:	2101      	movs	r1, #1
   338bc:	f105 0008 	add.w	r0, r5, #8
   338c0:	f01c f9dc 	bl	4fc7c <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   338c4:	2104      	movs	r1, #4
   338c6:	4606      	mov	r6, r0
   338c8:	f1a7 00ec 	sub.w	r0, r7, #236	; 0xec
   338cc:	f1a7 04f0 	sub.w	r4, r7, #240	; 0xf0
   338d0:	f01b fa5d 	bl	4ed8e <atomic_test_bit>
   338d4:	bb20      	cbnz	r0, 33920 <bt_smp_recv+0x70>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   338d6:	7831      	ldrb	r1, [r6, #0]
   338d8:	290e      	cmp	r1, #14
   338da:	d821      	bhi.n	33920 <bt_smp_recv+0x70>
	if (!handlers[hdr->code].func) {
   338dc:	4f11      	ldr	r7, [pc, #68]	; (33924 <bt_smp_recv+0x74>)
   338de:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   338e2:	b923      	cbnz	r3, 338ee <bt_smp_recv+0x3e>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   338e4:	2107      	movs	r1, #7
		smp_error(smp, err);
   338e6:	4620      	mov	r0, r4
   338e8:	f01b ff20 	bl	4f72c <smp_error>
   338ec:	e018      	b.n	33920 <bt_smp_recv+0x70>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   338ee:	4620      	mov	r0, r4
   338f0:	f01b fdc1 	bl	4f476 <atomic_test_and_clear_bit>
   338f4:	7833      	ldrb	r3, [r6, #0]
   338f6:	b918      	cbnz	r0, 33900 <bt_smp_recv+0x50>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   338f8:	2b05      	cmp	r3, #5
   338fa:	d011      	beq.n	33920 <bt_smp_recv+0x70>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   338fc:	2108      	movs	r1, #8
   338fe:	e7f2      	b.n	338e6 <bt_smp_recv+0x36>
	if (buf->len != handlers[hdr->code].expect_len) {
   33900:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   33904:	89a9      	ldrh	r1, [r5, #12]
   33906:	7912      	ldrb	r2, [r2, #4]
   33908:	4291      	cmp	r1, r2
   3390a:	d001      	beq.n	33910 <bt_smp_recv+0x60>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   3390c:	210a      	movs	r1, #10
   3390e:	e7ea      	b.n	338e6 <bt_smp_recv+0x36>
	err = handlers[hdr->code].func(smp, buf);
   33910:	4629      	mov	r1, r5
   33912:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   33916:	4620      	mov	r0, r4
   33918:	4798      	blx	r3
	if (err) {
   3391a:	4601      	mov	r1, r0
   3391c:	2800      	cmp	r0, #0
   3391e:	d1e2      	bne.n	338e6 <bt_smp_recv+0x36>
}
   33920:	2000      	movs	r0, #0
   33922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33924:	000529b8 	.word	0x000529b8

00033928 <bt_smp_pkey_ready>:
{
   33928:	b538      	push	{r3, r4, r5, lr}
	sc_public_key = pkey;
   3392a:	4b16      	ldr	r3, [pc, #88]	; (33984 <bt_smp_pkey_ready+0x5c>)
   3392c:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   3392e:	b1f0      	cbz	r0, 3396e <bt_smp_pkey_ready+0x46>
	z_impl_k_sem_give(sem);
   33930:	4815      	ldr	r0, [pc, #84]	; (33988 <bt_smp_pkey_ready+0x60>)
   33932:	4c16      	ldr	r4, [pc, #88]	; (3398c <bt_smp_pkey_ready+0x64>)
   33934:	f014 fb9c 	bl	48070 <z_impl_k_sem_give>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   33938:	2500      	movs	r5, #0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   3393a:	2106      	movs	r1, #6
   3393c:	1d20      	adds	r0, r4, #4
   3393e:	f01b fa26 	bl	4ed8e <atomic_test_bit>
   33942:	b178      	cbz	r0, 33964 <bt_smp_pkey_ready+0x3c>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   33944:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   33948:	78db      	ldrb	r3, [r3, #3]
			err = sc_send_public_key(smp);
   3394a:	4620      	mov	r0, r4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   3394c:	b983      	cbnz	r3, 33970 <bt_smp_pkey_ready+0x48>
			err = sc_send_public_key(smp);
   3394e:	f7ff fb5d 	bl	3300c <sc_send_public_key>
			if (err) {
   33952:	4601      	mov	r1, r0
   33954:	b110      	cbz	r0, 3395c <bt_smp_pkey_ready+0x34>
				smp_error(smp, err);
   33956:	4620      	mov	r0, r4
   33958:	f01b fee8 	bl	4f72c <smp_error>
			atomic_set_bit(smp->allowed_cmds,
   3395c:	210c      	movs	r1, #12
   3395e:	4620      	mov	r0, r4
   33960:	f01b fb5b 	bl	4f01a <atomic_set_bit>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   33964:	3501      	adds	r5, #1
   33966:	2d06      	cmp	r5, #6
   33968:	f504 7402 	add.w	r4, r4, #520	; 0x208
   3396c:	d1e5      	bne.n	3393a <bt_smp_pkey_ready+0x12>
}
   3396e:	bd38      	pop	{r3, r4, r5, pc}
		err = smp_public_key_periph(smp);
   33970:	f7ff fc96 	bl	332a0 <smp_public_key_periph>
		if (err) {
   33974:	4601      	mov	r1, r0
   33976:	2800      	cmp	r0, #0
   33978:	d0f4      	beq.n	33964 <bt_smp_pkey_ready+0x3c>
			smp_error(smp, err);
   3397a:	4620      	mov	r0, r4
   3397c:	f01b fed6 	bl	4f72c <smp_error>
   33980:	e7f0      	b.n	33964 <bt_smp_pkey_ready+0x3c>
   33982:	bf00      	nop
   33984:	20004844 	.word	0x20004844
   33988:	200012d4 	.word	0x200012d4
   3398c:	20002628 	.word	0x20002628

00033990 <smp_pairing_failed>:
{
   33990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   33992:	1d05      	adds	r5, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   33994:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   33998:	688e      	ldr	r6, [r1, #8]
{
   3399a:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   3399c:	210a      	movs	r1, #10
   3399e:	4628      	mov	r0, r5
   339a0:	f01b fd69 	bl	4f476 <atomic_test_and_clear_bit>
   339a4:	b140      	cbz	r0, 339b8 <smp_pairing_failed+0x28>
		if (bt_auth && bt_auth->cancel) {
   339a6:	4b0b      	ldr	r3, [pc, #44]	; (339d4 <smp_pairing_failed+0x44>)
   339a8:	681b      	ldr	r3, [r3, #0]
   339aa:	b963      	cbnz	r3, 339c6 <smp_pairing_failed+0x36>
	smp_pairing_complete(smp, req->reason);
   339ac:	4620      	mov	r0, r4
   339ae:	7831      	ldrb	r1, [r6, #0]
   339b0:	f7ff ff1e 	bl	337f0 <smp_pairing_complete>
}
   339b4:	2000      	movs	r0, #0
   339b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   339b8:	210b      	movs	r1, #11
   339ba:	4628      	mov	r0, r5
   339bc:	f01b fd5b 	bl	4f476 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   339c0:	2800      	cmp	r0, #0
   339c2:	d1f0      	bne.n	339a6 <smp_pairing_failed+0x16>
   339c4:	e7f2      	b.n	339ac <smp_pairing_failed+0x1c>
		if (bt_auth && bt_auth->cancel) {
   339c6:	695b      	ldr	r3, [r3, #20]
   339c8:	2b00      	cmp	r3, #0
   339ca:	d0ef      	beq.n	339ac <smp_pairing_failed+0x1c>
			bt_auth->cancel(conn);
   339cc:	4638      	mov	r0, r7
   339ce:	4798      	blx	r3
   339d0:	e7ec      	b.n	339ac <smp_pairing_failed+0x1c>
   339d2:	bf00      	nop
   339d4:	20004604 	.word	0x20004604

000339d8 <bt_smp_encrypt_change>:
{
   339d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   339dc:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   339de:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   339e2:	4604      	mov	r4, r0
   339e4:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   339e6:	4630      	mov	r0, r6
   339e8:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   339ea:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   339ee:	f01b fd42 	bl	4f476 <atomic_test_and_clear_bit>
   339f2:	2800      	cmp	r0, #0
   339f4:	d05f      	beq.n	33ab6 <bt_smp_encrypt_change+0xde>
	if (hci_status) {
   339f6:	b1cf      	cbz	r7, 33a2c <bt_smp_encrypt_change+0x54>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   339f8:	2103      	movs	r1, #3
   339fa:	4630      	mov	r0, r6
   339fc:	f01b f9c7 	bl	4ed8e <atomic_test_bit>
   33a00:	2800      	cmp	r0, #0
   33a02:	d058      	beq.n	33ab6 <bt_smp_encrypt_change+0xde>
			uint8_t smp_err = smp_err_get(
   33a04:	4638      	mov	r0, r7
   33a06:	f7fa fc09 	bl	2e21c <bt_security_err_get>
	switch (auth_err) {
   33a0a:	3801      	subs	r0, #1
   33a0c:	b2c0      	uxtb	r0, r0
   33a0e:	2808      	cmp	r0, #8
   33a10:	bf9a      	itte	ls
   33a12:	4b2e      	ldrls	r3, [pc, #184]	; (33acc <bt_smp_encrypt_change+0xf4>)
   33a14:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   33a16:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   33a18:	2102      	movs	r1, #2
   33a1a:	4630      	mov	r0, r6
   33a1c:	f01b fafd 	bl	4f01a <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   33a20:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   33a22:	4628      	mov	r0, r5
}
   33a24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   33a28:	f7ff bee2 	b.w	337f0 <smp_pairing_complete>
	if (!conn->encrypt) {
   33a2c:	f898 300b 	ldrb.w	r3, [r8, #11]
   33a30:	2b00      	cmp	r3, #0
   33a32:	d040      	beq.n	33ab6 <bt_smp_encrypt_change+0xde>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   33a34:	2103      	movs	r1, #3
   33a36:	4630      	mov	r0, r6
   33a38:	f01b f9a9 	bl	4ed8e <atomic_test_bit>
   33a3c:	b920      	cbnz	r0, 33a48 <bt_smp_encrypt_change+0x70>
		smp_reset(smp);
   33a3e:	4628      	mov	r0, r5
}
   33a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   33a44:	f01b bd2d 	b.w	4f4a2 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   33a48:	2105      	movs	r1, #5
   33a4a:	4630      	mov	r0, r6
   33a4c:	f01b f99f 	bl	4ed8e <atomic_test_bit>
   33a50:	b1b8      	cbz	r0, 33a82 <bt_smp_encrypt_change+0xaa>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   33a52:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   33a56:	071f      	lsls	r7, r3, #28
   33a58:	d507      	bpl.n	33a6a <bt_smp_encrypt_change+0x92>
   33a5a:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   33a5e:	0718      	lsls	r0, r3, #28
   33a60:	d503      	bpl.n	33a6a <bt_smp_encrypt_change+0x92>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   33a62:	2111      	movs	r1, #17
   33a64:	4630      	mov	r0, r6
   33a66:	f01b fad8 	bl	4f01a <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   33a6a:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   33a6e:	f023 0308 	bic.w	r3, r3, #8
   33a72:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   33a76:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   33a7a:	f023 0308 	bic.w	r3, r3, #8
   33a7e:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   33a82:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   33a86:	07d9      	lsls	r1, r3, #31
   33a88:	d517      	bpl.n	33aba <bt_smp_encrypt_change+0xe2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   33a8a:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   33a8c:	4628      	mov	r0, r5
   33a8e:	f01b fac4 	bl	4f01a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   33a92:	2102      	movs	r1, #2
   33a94:	4630      	mov	r0, r6
   33a96:	f01b fac0 	bl	4f01a <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   33a9a:	f898 3003 	ldrb.w	r3, [r8, #3]
   33a9e:	b913      	cbnz	r3, 33aa6 <bt_smp_encrypt_change+0xce>
	    conn->role == BT_HCI_ROLE_CENTRAL && smp->remote_dist) {
   33aa0:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   33aa4:	b93b      	cbnz	r3, 33ab6 <bt_smp_encrypt_change+0xde>
	struct bt_keys *keys = conn->le.keys;
   33aa6:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   33aa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   33aac:	b11b      	cbz	r3, 33ab6 <bt_smp_encrypt_change+0xde>
	if (!smp->local_dist && !smp->remote_dist) {
   33aae:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   33ab2:	2900      	cmp	r1, #0
   33ab4:	d0b5      	beq.n	33a22 <bt_smp_encrypt_change+0x4a>
}
   33ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   33aba:	079a      	lsls	r2, r3, #30
   33abc:	d501      	bpl.n	33ac2 <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   33abe:	2108      	movs	r1, #8
   33ac0:	e7e4      	b.n	33a8c <bt_smp_encrypt_change+0xb4>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   33ac2:	075b      	lsls	r3, r3, #29
   33ac4:	d5e5      	bpl.n	33a92 <bt_smp_encrypt_change+0xba>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   33ac6:	210a      	movs	r1, #10
   33ac8:	e7e0      	b.n	33a8c <bt_smp_encrypt_change+0xb4>
   33aca:	bf00      	nop
   33acc:	000542df 	.word	0x000542df

00033ad0 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   33ad0:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   33ad2:	4b0a      	ldr	r3, [pc, #40]	; (33afc <bt_smp_init+0x2c>)
   33ad4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   33ad8:	f003 0306 	and.w	r3, r3, #6
   33adc:	2b06      	cmp	r3, #6
   33ade:	4b08      	ldr	r3, [pc, #32]	; (33b00 <bt_smp_init+0x30>)
   33ae0:	bf0c      	ite	eq
   33ae2:	2201      	moveq	r2, #1
   33ae4:	2200      	movne	r2, #0
   33ae6:	701a      	strb	r2, [r3, #0]
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
	if (IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) && !sc_supported) {
   33ae8:	d104      	bne.n	33af4 <bt_smp_init+0x24>
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   33aea:	4806      	ldr	r0, [pc, #24]	; (33b04 <bt_smp_init+0x34>)
   33aec:	f7fb fd76 	bl	2f5dc <bt_pub_key_gen>
	}

	return smp_self_test();
   33af0:	2000      	movs	r0, #0
}
   33af2:	bd08      	pop	{r3, pc}
		return -ENOENT;
   33af4:	f06f 0001 	mvn.w	r0, #1
   33af8:	e7fb      	b.n	33af2 <bt_smp_init+0x22>
   33afa:	bf00      	nop
   33afc:	20000030 	.word	0x20000030
   33b00:	2000740e 	.word	0x2000740e
   33b04:	200008e4 	.word	0x200008e4

00033b08 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   33b08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	int i;
	size_t first_free_slot = ARRAY_SIZE(key_pool);

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33b0c:	2500      	movs	r5, #0
   33b0e:	4e1d      	ldr	r6, [pc, #116]	; (33b84 <bt_keys_get_addr+0x7c>)
{
   33b10:	4680      	mov	r8, r0
   33b12:	460f      	mov	r7, r1
	size_t first_free_slot = ARRAY_SIZE(key_pool);
   33b14:	2406      	movs	r4, #6

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   33b16:	46a9      	mov	r9, r5
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   33b18:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   33b1c:	4543      	cmp	r3, r8
   33b1e:	d021      	beq.n	33b64 <bt_keys_get_addr+0x5c>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   33b20:	2c06      	cmp	r4, #6
   33b22:	d10b      	bne.n	33b3c <bt_keys_get_addr+0x34>
	return memcmp(a, b, sizeof(*a));
   33b24:	2207      	movs	r2, #7
   33b26:	4669      	mov	r1, sp
   33b28:	4630      	mov	r0, r6
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   33b2a:	f8cd 9000 	str.w	r9, [sp]
   33b2e:	f8cd 9003 	str.w	r9, [sp, #3]
   33b32:	f018 f881 	bl	4bc38 <memcmp>
			first_free_slot = i;
   33b36:	2800      	cmp	r0, #0
   33b38:	bf08      	it	eq
   33b3a:	462c      	moveq	r4, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33b3c:	3501      	adds	r5, #1
   33b3e:	2d06      	cmp	r5, #6
   33b40:	f106 0640 	add.w	r6, r6, #64	; 0x40
   33b44:	d1e8      	bne.n	33b18 <bt_keys_get_addr+0x10>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   33b46:	2c06      	cmp	r4, #6
   33b48:	d01a      	beq.n	33b80 <bt_keys_get_addr+0x78>
		keys = &key_pool[first_free_slot];
   33b4a:	480f      	ldr	r0, [pc, #60]	; (33b88 <bt_keys_get_addr+0x80>)
   33b4c:	01a3      	lsls	r3, r4, #6
	memcpy(dst, src, sizeof(*dst));
   33b4e:	2207      	movs	r2, #7
		keys->id = id;
   33b50:	f800 8003 	strb.w	r8, [r0, r3]
		bt_addr_le_copy(&keys->addr, addr);
   33b54:	3301      	adds	r3, #1
		keys = &key_pool[first_free_slot];
   33b56:	eb00 1484 	add.w	r4, r0, r4, lsl #6
   33b5a:	4639      	mov	r1, r7
   33b5c:	4418      	add	r0, r3
   33b5e:	f018 f87b 	bl	4bc58 <memcpy>
}
   33b62:	e009      	b.n	33b78 <bt_keys_get_addr+0x70>
	return memcmp(a, b, sizeof(*a));
   33b64:	2207      	movs	r2, #7
   33b66:	4639      	mov	r1, r7
   33b68:	4630      	mov	r0, r6
   33b6a:	f018 f865 	bl	4bc38 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   33b6e:	2800      	cmp	r0, #0
   33b70:	d1d6      	bne.n	33b20 <bt_keys_get_addr+0x18>
		keys = &key_pool[i];
   33b72:	4c05      	ldr	r4, [pc, #20]	; (33b88 <bt_keys_get_addr+0x80>)
   33b74:	eb04 1485 	add.w	r4, r4, r5, lsl #6
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
   33b78:	4620      	mov	r0, r4
   33b7a:	b003      	add	sp, #12
   33b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return NULL;
   33b80:	2400      	movs	r4, #0
   33b82:	e7f9      	b.n	33b78 <bt_keys_get_addr+0x70>
   33b84:	20004849 	.word	0x20004849
   33b88:	20004848 	.word	0x20004848

00033b8c <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   33b8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   33b90:	4c0d      	ldr	r4, [pc, #52]	; (33bc8 <bt_foreach_bond+0x3c>)
   33b92:	4605      	mov	r5, r0
   33b94:	460e      	mov	r6, r1
   33b96:	4617      	mov	r7, r2
   33b98:	f504 78c0 	add.w	r8, r4, #384	; 0x180
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   33b9c:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   33ba0:	b15b      	cbz	r3, 33bba <bt_foreach_bond+0x2e>
   33ba2:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   33ba6:	42ab      	cmp	r3, r5
   33ba8:	d107      	bne.n	33bba <bt_foreach_bond+0x2e>
	memcpy(dst, src, sizeof(*dst));
   33baa:	4621      	mov	r1, r4
   33bac:	2207      	movs	r2, #7
   33bae:	4668      	mov	r0, sp
   33bb0:	f018 f852 	bl	4bc58 <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
   33bb4:	4639      	mov	r1, r7
   33bb6:	4668      	mov	r0, sp
   33bb8:	47b0      	blx	r6
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33bba:	3440      	adds	r4, #64	; 0x40
   33bbc:	4544      	cmp	r4, r8
   33bbe:	d1ed      	bne.n	33b9c <bt_foreach_bond+0x10>
		}
	}
}
   33bc0:	b002      	add	sp, #8
   33bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33bc6:	bf00      	nop
   33bc8:	20004849 	.word	0x20004849

00033bcc <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   33bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33bd0:	4c08      	ldr	r4, [pc, #32]	; (33bf4 <bt_keys_foreach+0x28>)
   33bd2:	4605      	mov	r5, r0
   33bd4:	460e      	mov	r6, r1
   33bd6:	4617      	mov	r7, r2
   33bd8:	f504 78c0 	add.w	r8, r4, #384	; 0x180
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   33bdc:	89e3      	ldrh	r3, [r4, #14]
   33bde:	422b      	tst	r3, r5
   33be0:	d002      	beq.n	33be8 <bt_keys_foreach+0x1c>
			func(&key_pool[i], data);
   33be2:	4639      	mov	r1, r7
   33be4:	4620      	mov	r0, r4
   33be6:	47b0      	blx	r6
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33be8:	3440      	adds	r4, #64	; 0x40
   33bea:	4544      	cmp	r4, r8
   33bec:	d1f6      	bne.n	33bdc <bt_keys_foreach+0x10>
		}
	}
}
   33bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33bf2:	bf00      	nop
   33bf4:	20004848 	.word	0x20004848

00033bf8 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   33bf8:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   33bfa:	4903      	ldr	r1, [pc, #12]	; (33c08 <keys_commit+0x10>)
   33bfc:	2200      	movs	r2, #0
   33bfe:	2002      	movs	r0, #2
   33c00:	f7ff ffe4 	bl	33bcc <bt_keys_foreach>
	}

	return 0;
}
   33c04:	2000      	movs	r0, #0
   33c06:	bd08      	pop	{r3, pc}
   33c08:	0004fa9b 	.word	0x0004fa9b

00033c0c <bt_keys_find>:
{
   33c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33c10:	4d0f      	ldr	r5, [pc, #60]	; (33c50 <bt_keys_find+0x44>)
   33c12:	4606      	mov	r6, r0
   33c14:	460f      	mov	r7, r1
   33c16:	4690      	mov	r8, r2
   33c18:	2400      	movs	r4, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   33c1a:	f8b5 300d 	ldrh.w	r3, [r5, #13]
   33c1e:	4233      	tst	r3, r6
   33c20:	d00d      	beq.n	33c3e <bt_keys_find+0x32>
   33c22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   33c26:	42bb      	cmp	r3, r7
   33c28:	d109      	bne.n	33c3e <bt_keys_find+0x32>
	return memcmp(a, b, sizeof(*a));
   33c2a:	2207      	movs	r2, #7
   33c2c:	4641      	mov	r1, r8
   33c2e:	4628      	mov	r0, r5
   33c30:	f018 f802 	bl	4bc38 <memcmp>
   33c34:	b918      	cbnz	r0, 33c3e <bt_keys_find+0x32>
			return &key_pool[i];
   33c36:	4807      	ldr	r0, [pc, #28]	; (33c54 <bt_keys_find+0x48>)
   33c38:	4420      	add	r0, r4
}
   33c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33c3e:	3440      	adds	r4, #64	; 0x40
   33c40:	f5b4 7fc0 	cmp.w	r4, #384	; 0x180
   33c44:	f105 0540 	add.w	r5, r5, #64	; 0x40
   33c48:	d1e7      	bne.n	33c1a <bt_keys_find+0xe>
	return NULL;
   33c4a:	2000      	movs	r0, #0
   33c4c:	e7f5      	b.n	33c3a <bt_keys_find+0x2e>
   33c4e:	bf00      	nop
   33c50:	20004849 	.word	0x20004849
   33c54:	20004848 	.word	0x20004848

00033c58 <bt_keys_find_irk>:
{
   33c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   33c5c:	780b      	ldrb	r3, [r1, #0]
   33c5e:	2b01      	cmp	r3, #1
   33c60:	4607      	mov	r7, r0
   33c62:	460d      	mov	r5, r1
   33c64:	d002      	beq.n	33c6c <bt_keys_find_irk+0x14>
		return NULL;
   33c66:	2000      	movs	r0, #0
}
   33c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   33c6c:	798b      	ldrb	r3, [r1, #6]
   33c6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   33c72:	2b40      	cmp	r3, #64	; 0x40
   33c74:	d1f7      	bne.n	33c66 <bt_keys_find_irk+0xe>
   33c76:	4e1e      	ldr	r6, [pc, #120]	; (33cf0 <bt_keys_find_irk+0x98>)
   33c78:	2400      	movs	r4, #0
		    !bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
   33c7a:	f101 0801 	add.w	r8, r1, #1
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   33c7e:	f836 3c2c 	ldrh.w	r3, [r6, #-44]
   33c82:	079a      	lsls	r2, r3, #30
   33c84:	d50c      	bpl.n	33ca0 <bt_keys_find_irk+0x48>
		if (key_pool[i].id == id &&
   33c86:	f816 3c3a 	ldrb.w	r3, [r6, #-58]
   33c8a:	42bb      	cmp	r3, r7
   33c8c:	d108      	bne.n	33ca0 <bt_keys_find_irk+0x48>
	return memcmp(a, b, sizeof(*a));
   33c8e:	2206      	movs	r2, #6
   33c90:	4631      	mov	r1, r6
   33c92:	4640      	mov	r0, r8
   33c94:	f017 ffd0 	bl	4bc38 <memcmp>
   33c98:	b910      	cbnz	r0, 33ca0 <bt_keys_find_irk+0x48>
			return &key_pool[i];
   33c9a:	4816      	ldr	r0, [pc, #88]	; (33cf4 <bt_keys_find_irk+0x9c>)
   33c9c:	4420      	add	r0, r4
   33c9e:	e7e3      	b.n	33c68 <bt_keys_find_irk+0x10>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33ca0:	3440      	adds	r4, #64	; 0x40
   33ca2:	f5b4 7fc0 	cmp.w	r4, #384	; 0x180
   33ca6:	f106 0640 	add.w	r6, r6, #64	; 0x40
   33caa:	d1e8      	bne.n	33c7e <bt_keys_find_irk+0x26>
   33cac:	4e12      	ldr	r6, [pc, #72]	; (33cf8 <bt_keys_find_irk+0xa0>)
   33cae:	2400      	movs	r4, #0
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   33cb0:	3501      	adds	r5, #1
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   33cb2:	f836 3c1c 	ldrh.w	r3, [r6, #-28]
   33cb6:	079b      	lsls	r3, r3, #30
   33cb8:	d512      	bpl.n	33ce0 <bt_keys_find_irk+0x88>
		if (key_pool[i].id != id) {
   33cba:	f816 3c2a 	ldrb.w	r3, [r6, #-42]
   33cbe:	42bb      	cmp	r3, r7
   33cc0:	d10e      	bne.n	33ce0 <bt_keys_find_irk+0x88>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   33cc2:	4629      	mov	r1, r5
   33cc4:	4630      	mov	r0, r6
   33cc6:	f018 f823 	bl	4bd10 <bt_rpa_irk_matches>
   33cca:	b148      	cbz	r0, 33ce0 <bt_keys_find_irk+0x88>
			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
   33ccc:	4e09      	ldr	r6, [pc, #36]	; (33cf4 <bt_keys_find_irk+0x9c>)
   33cce:	f104 003a 	add.w	r0, r4, #58	; 0x3a
	memcpy(dst, src, sizeof(*dst));
   33cd2:	2206      	movs	r2, #6
   33cd4:	4629      	mov	r1, r5
   33cd6:	4430      	add	r0, r6
   33cd8:	f017 ffbe 	bl	4bc58 <memcpy>
			return &key_pool[i];
   33cdc:	19a0      	adds	r0, r4, r6
   33cde:	e7c3      	b.n	33c68 <bt_keys_find_irk+0x10>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33ce0:	3440      	adds	r4, #64	; 0x40
   33ce2:	f5b4 7fc0 	cmp.w	r4, #384	; 0x180
   33ce6:	f106 0640 	add.w	r6, r6, #64	; 0x40
   33cea:	d1e2      	bne.n	33cb2 <bt_keys_find_irk+0x5a>
   33cec:	e7bb      	b.n	33c66 <bt_keys_find_irk+0xe>
   33cee:	bf00      	nop
   33cf0:	20004882 	.word	0x20004882
   33cf4:	20004848 	.word	0x20004848
   33cf8:	20004872 	.word	0x20004872

00033cfc <bt_keys_find_addr>:
{
   33cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33cfe:	4d0c      	ldr	r5, [pc, #48]	; (33d30 <bt_keys_find_addr+0x34>)
   33d00:	4606      	mov	r6, r0
   33d02:	460f      	mov	r7, r1
   33d04:	2400      	movs	r4, #0
		if (key_pool[i].id == id &&
   33d06:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   33d0a:	42b3      	cmp	r3, r6
   33d0c:	d108      	bne.n	33d20 <bt_keys_find_addr+0x24>
	return memcmp(a, b, sizeof(*a));
   33d0e:	2207      	movs	r2, #7
   33d10:	4639      	mov	r1, r7
   33d12:	4628      	mov	r0, r5
   33d14:	f017 ff90 	bl	4bc38 <memcmp>
   33d18:	b910      	cbnz	r0, 33d20 <bt_keys_find_addr+0x24>
			return &key_pool[i];
   33d1a:	4806      	ldr	r0, [pc, #24]	; (33d34 <bt_keys_find_addr+0x38>)
   33d1c:	4420      	add	r0, r4
}
   33d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33d20:	3440      	adds	r4, #64	; 0x40
   33d22:	f5b4 7fc0 	cmp.w	r4, #384	; 0x180
   33d26:	f105 0540 	add.w	r5, r5, #64	; 0x40
   33d2a:	d1ec      	bne.n	33d06 <bt_keys_find_addr+0xa>
	return NULL;
   33d2c:	2000      	movs	r0, #0
   33d2e:	e7f6      	b.n	33d1e <bt_keys_find_addr+0x22>
   33d30:	20004849 	.word	0x20004849
   33d34:	20004848 	.word	0x20004848

00033d38 <bt_keys_clear>:
{
   33d38:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   33d3a:	7a03      	ldrb	r3, [r0, #8]
   33d3c:	075b      	lsls	r3, r3, #29
{
   33d3e:	b08c      	sub	sp, #48	; 0x30
   33d40:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   33d42:	d501      	bpl.n	33d48 <bt_keys_clear+0x10>
		bt_id_del(keys);
   33d44:	f7fa fd38 	bl	2e7b8 <bt_id_del>
		if (keys->id) {
   33d48:	4625      	mov	r5, r4
   33d4a:	f815 2b01 	ldrb.w	r2, [r5], #1
   33d4e:	b1b2      	cbz	r2, 33d7e <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   33d50:	ae02      	add	r6, sp, #8
   33d52:	2104      	movs	r1, #4
   33d54:	4630      	mov	r0, r6
   33d56:	f015 fd95 	bl	49884 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   33d5a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   33d5c:	4a09      	ldr	r2, [pc, #36]	; (33d84 <bt_keys_clear+0x4c>)
   33d5e:	462b      	mov	r3, r5
   33d60:	2124      	movs	r1, #36	; 0x24
   33d62:	a803      	add	r0, sp, #12
   33d64:	f7f9 fc62 	bl	2d62c <bt_settings_encode_key>
		settings_delete(key);
   33d68:	a803      	add	r0, sp, #12
   33d6a:	f016 fc7c 	bl	4a666 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   33d6e:	2240      	movs	r2, #64	; 0x40
   33d70:	2100      	movs	r1, #0
   33d72:	4620      	mov	r0, r4
}
   33d74:	b00c      	add	sp, #48	; 0x30
   33d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   33d7a:	f017 bf78 	b.w	4bc6e <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   33d7e:	9200      	str	r2, [sp, #0]
   33d80:	e7ec      	b.n	33d5c <bt_keys_clear+0x24>
   33d82:	bf00      	nop
   33d84:	00054323 	.word	0x00054323

00033d88 <bt_keys_store>:
{
   33d88:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   33d8a:	4605      	mov	r5, r0
{
   33d8c:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   33d8e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   33d92:	4604      	mov	r4, r0
	if (keys->id) {
   33d94:	b19a      	cbz	r2, 33dbe <bt_keys_store+0x36>
		u8_to_dec(id, sizeof(id), keys->id);
   33d96:	ae02      	add	r6, sp, #8
   33d98:	2104      	movs	r1, #4
   33d9a:	4630      	mov	r0, r6
   33d9c:	f015 fd72 	bl	49884 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   33da0:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   33da2:	462b      	mov	r3, r5
   33da4:	a803      	add	r0, sp, #12
   33da6:	4a07      	ldr	r2, [pc, #28]	; (33dc4 <bt_keys_store+0x3c>)
   33da8:	2124      	movs	r1, #36	; 0x24
   33daa:	f7f9 fc3f 	bl	2d62c <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   33dae:	2234      	movs	r2, #52	; 0x34
   33db0:	f104 010c 	add.w	r1, r4, #12
   33db4:	a803      	add	r0, sp, #12
   33db6:	f7f8 fa4b 	bl	2c250 <settings_save_one>
}
   33dba:	b00c      	add	sp, #48	; 0x30
   33dbc:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   33dbe:	9200      	str	r2, [sp, #0]
   33dc0:	e7ef      	b.n	33da2 <bt_keys_store+0x1a>
   33dc2:	bf00      	nop
   33dc4:	00054323 	.word	0x00054323

00033dc8 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   33dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33dcc:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   33dce:	1dc2      	adds	r2, r0, #7
   33dd0:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   33dd4:	1e75      	subs	r5, r6, #1
{
   33dd6:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   33dd8:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
   33dda:	6018      	str	r0, [r3, #0]
{
   33ddc:	b082      	sub	sp, #8
   33dde:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   33de0:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   33de2:	2100      	movs	r1, #0
   33de4:	2204      	movs	r2, #4
   33de6:	fb07 0005 	mla	r0, r7, r5, r0
   33dea:	f017 ff40 	bl	4bc6e <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   33dee:	b1bd      	cbz	r5, 33e20 <mem_init+0x58>
   33df0:	3e02      	subs	r6, #2
   33df2:	b2b6      	uxth	r6, r6
   33df4:	fb06 7307 	mla	r3, r6, r7, r7
   33df8:	fb06 f807 	mul.w	r8, r6, r7
   33dfc:	441c      	add	r4, r3
   33dfe:	eba8 0803 	sub.w	r8, r8, r3
   33e02:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   33e04:	2204      	movs	r2, #4
   33e06:	eb04 0008 	add.w	r0, r4, r8
   33e0a:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
   33e0e:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   33e10:	f017 ff22 	bl	4bc58 <memcpy>
	while (mem_count--) {
   33e14:	42b5      	cmp	r5, r6
   33e16:	eba4 0407 	sub.w	r4, r4, r7
   33e1a:	f105 0501 	add.w	r5, r5, #1
   33e1e:	d1f1      	bne.n	33e04 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   33e20:	b002      	add	sp, #8
   33e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33e26:	bf00      	nop

00033e28 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   33e28:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   33e2a:	6805      	ldr	r5, [r0, #0]
{
   33e2c:	b082      	sub	sp, #8
	if (*mem_head) {
   33e2e:	b195      	cbz	r5, 33e56 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   33e30:	1deb      	adds	r3, r5, #7
   33e32:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   33e36:	2204      	movs	r2, #4
   33e38:	4604      	mov	r4, r0
   33e3a:	4629      	mov	r1, r5
   33e3c:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   33e40:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   33e42:	f017 ff09 	bl	4bc58 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   33e46:	9b01      	ldr	r3, [sp, #4]
   33e48:	b123      	cbz	r3, 33e54 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   33e4a:	1dda      	adds	r2, r3, #7
   33e4c:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   33e50:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   33e52:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   33e54:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   33e56:	4628      	mov	r0, r5
   33e58:	b002      	add	sp, #8
   33e5a:	bd70      	pop	{r4, r5, r6, pc}

00033e5c <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   33e5c:	680b      	ldr	r3, [r1, #0]
{
   33e5e:	b570      	push	{r4, r5, r6, lr}
   33e60:	460c      	mov	r4, r1
   33e62:	4605      	mov	r5, r0
	if (*mem_head) {
   33e64:	b183      	cbz	r3, 33e88 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   33e66:	3307      	adds	r3, #7
   33e68:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   33e6c:	881e      	ldrh	r6, [r3, #0]
   33e6e:	3601      	adds	r6, #1
   33e70:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
   33e72:	2204      	movs	r2, #4
   33e74:	4621      	mov	r1, r4
   33e76:	4628      	mov	r0, r5
   33e78:	f017 feee 	bl	4bc58 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   33e7c:	1deb      	adds	r3, r5, #7
   33e7e:	f023 0303 	bic.w	r3, r3, #3
   33e82:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   33e84:	6025      	str	r5, [r4, #0]
}
   33e86:	bd70      	pop	{r4, r5, r6, pc}
   33e88:	2601      	movs	r6, #1
   33e8a:	e7f2      	b.n	33e72 <mem_release+0x16>

00033e8c <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   33e8c:	fb02 0001 	mla	r0, r2, r1, r0
   33e90:	4770      	bx	lr
   33e92:	bf00      	nop

00033e94 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   33e94:	1a40      	subs	r0, r0, r1
   33e96:	b280      	uxth	r0, r0
}
   33e98:	fbb0 f0f2 	udiv	r0, r0, r2
   33e9c:	4770      	bx	lr
   33e9e:	bf00      	nop

00033ea0 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   33ea0:	1e53      	subs	r3, r2, #1
	src += len;
   33ea2:	4411      	add	r1, r2
	while (len--) {
   33ea4:	b29b      	uxth	r3, r3
   33ea6:	b142      	cbz	r2, 33eba <mem_rcopy+0x1a>
   33ea8:	43db      	mvns	r3, r3
   33eaa:	3801      	subs	r0, #1
   33eac:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   33eae:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   33eb2:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   33eb6:	4291      	cmp	r1, r2
   33eb8:	d1f9      	bne.n	33eae <mem_rcopy+0xe>
	}
}
   33eba:	4770      	bx	lr

00033ebc <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   33ebc:	4401      	add	r1, r0
   33ebe:	e002      	b.n	33ec6 <mem_nz+0xa>
		if (*src++) {
   33ec0:	f810 3b01 	ldrb.w	r3, [r0], #1
   33ec4:	b91b      	cbnz	r3, 33ece <mem_nz+0x12>
	while (len--) {
   33ec6:	4288      	cmp	r0, r1
   33ec8:	d1fa      	bne.n	33ec0 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   33eca:	2000      	movs	r0, #0
   33ecc:	4770      	bx	lr
			return 1;
   33ece:	2001      	movs	r0, #1
}
   33ed0:	4770      	bx	lr
   33ed2:	bf00      	nop

00033ed4 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   33ed4:	6010      	str	r0, [r2, #0]
   33ed6:	6008      	str	r0, [r1, #0]

	return link;
}
   33ed8:	4770      	bx	lr
   33eda:	bf00      	nop

00033edc <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   33edc:	680a      	ldr	r2, [r1, #0]
{
   33ede:	4603      	mov	r3, r0
	if (*head != *tail) {
   33ee0:	6800      	ldr	r0, [r0, #0]
   33ee2:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   33ee4:	bf05      	ittet	eq
   33ee6:	2200      	moveq	r2, #0
   33ee8:	600a      	streq	r2, [r1, #0]
		return NULL;
   33eea:	2000      	movne	r0, #0
	*head = *tail = NULL;
   33eec:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   33eee:	4770      	bx	lr

00033ef0 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   33ef0:	f8d2 c000 	ldr.w	ip, [r2]
   33ef4:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   33ef8:	f8d2 c000 	ldr.w	ip, [r2]
   33efc:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   33f00:	6010      	str	r0, [r2, #0]

	return link;
}
   33f02:	4770      	bx	lr

00033f04 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   33f04:	4288      	cmp	r0, r1
   33f06:	d003      	beq.n	33f10 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   33f08:	b11a      	cbz	r2, 33f12 <memq_peek+0xe>
		*mem = head->mem;
   33f0a:	6843      	ldr	r3, [r0, #4]
   33f0c:	6013      	str	r3, [r2, #0]
   33f0e:	4770      	bx	lr
		return NULL;
   33f10:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   33f12:	4770      	bx	lr

00033f14 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   33f14:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   33f16:	4283      	cmp	r3, r0
   33f18:	d009      	beq.n	33f2e <memq_dequeue+0x1a>
	if (mem) {
   33f1a:	b12a      	cbz	r2, 33f28 <memq_dequeue+0x14>
		*mem = head->mem;
   33f1c:	6858      	ldr	r0, [r3, #4]
   33f1e:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   33f20:	681a      	ldr	r2, [r3, #0]
   33f22:	600a      	str	r2, [r1, #0]

	return old_head;
}
   33f24:	4618      	mov	r0, r3
   33f26:	4770      	bx	lr
	if (old_head == NULL) {
   33f28:	2b00      	cmp	r3, #0
   33f2a:	d1f9      	bne.n	33f20 <memq_dequeue+0xc>
   33f2c:	e7fa      	b.n	33f24 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   33f2e:	2300      	movs	r3, #0
   33f30:	e7f8      	b.n	33f24 <memq_dequeue+0x10>
   33f32:	bf00      	nop

00033f34 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   33f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33f38:	f8df 8030 	ldr.w	r8, [pc, #48]	; 33f6c <mayfly_init+0x38>
   33f3c:	4e0c      	ldr	r6, [pc, #48]	; (33f70 <mayfly_init+0x3c>)
   33f3e:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   33f40:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   33f44:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   33f46:	1d22      	adds	r2, r4, #4
   33f48:	4621      	mov	r1, r4
   33f4a:	4628      	mov	r0, r5
		while (caller_id--) {
   33f4c:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   33f4e:	f7ff ffc1 	bl	33ed4 <memq_init>
		while (caller_id--) {
   33f52:	42a6      	cmp	r6, r4
   33f54:	f1a5 0508 	sub.w	r5, r5, #8
   33f58:	d1f5      	bne.n	33f46 <mayfly_init+0x12>
	while (callee_id--) {
   33f5a:	3f04      	subs	r7, #4
   33f5c:	1d3b      	adds	r3, r7, #4
   33f5e:	f1a8 0820 	sub.w	r8, r8, #32
   33f62:	f1a6 0630 	sub.w	r6, r6, #48	; 0x30
   33f66:	d1eb      	bne.n	33f40 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   33f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33f6c:	20004a44 	.word	0x20004a44
   33f70:	20004ad0 	.word	0x20004ad0

00033f74 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   33f74:	b410      	push	{r4}
   33f76:	4603      	mov	r3, r0
   33f78:	468c      	mov	ip, r1
	if (enable) {
   33f7a:	b19a      	cbz	r2, 33fa4 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   33f7c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   33f80:	4814      	ldr	r0, [pc, #80]	; (33fd4 <mayfly_enable+0x60>)
   33f82:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   33f86:	0109      	lsls	r1, r1, #4
   33f88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   33f8c:	4401      	add	r1, r0
   33f8e:	7a48      	ldrb	r0, [r1, #9]
   33f90:	7a0c      	ldrb	r4, [r1, #8]
   33f92:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   33f94:	bf04      	itt	eq
   33f96:	3001      	addeq	r0, #1
   33f98:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   33f9a:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   33f9c:	4661      	mov	r1, ip
   33f9e:	4618      	mov	r0, r3
   33fa0:	f00f ba3a 	b.w	43418 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   33fa4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   33fa8:	4c0a      	ldr	r4, [pc, #40]	; (33fd4 <mayfly_enable+0x60>)
   33faa:	0112      	lsls	r2, r2, #4
   33fac:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   33fb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   33fb4:	4423      	add	r3, r4
   33fb6:	7a9c      	ldrb	r4, [r3, #10]
   33fb8:	7ada      	ldrb	r2, [r3, #11]
   33fba:	42a2      	cmp	r2, r4
   33fbc:	d001      	beq.n	33fc2 <mayfly_enable+0x4e>
}
   33fbe:	bc10      	pop	{r4}
   33fc0:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   33fc2:	3201      	adds	r2, #1
   33fc4:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   33fc6:	4b04      	ldr	r3, [pc, #16]	; (33fd8 <mayfly_enable+0x64>)
   33fc8:	2201      	movs	r2, #1
   33fca:	545a      	strb	r2, [r3, r1]
}
   33fcc:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   33fce:	f00f ba79 	b.w	434c4 <mayfly_pend>
   33fd2:	bf00      	nop
   33fd4:	20004a4c 	.word	0x20004a4c
   33fd8:	200049c8 	.word	0x200049c8

00033fdc <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   33fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33fde:	4606      	mov	r6, r0
   33fe0:	461c      	mov	r4, r3
   33fe2:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   33fe4:	b302      	cbz	r2, 34028 <mayfly_enqueue+0x4c>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   33fe6:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   33fe8:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   33fea:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   33fec:	f012 0203 	ands.w	r2, r2, #3
   33ff0:	d13a      	bne.n	34068 <mayfly_enqueue+0x8c>
   33ff2:	4f27      	ldr	r7, [pc, #156]	; (34090 <mayfly_enqueue+0xb4>)
   33ff4:	0071      	lsls	r1, r6, #1
   33ff6:	ea4f 0c45 	mov.w	ip, r5, lsl #1
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   33ffa:	4431      	add	r1, r6
   33ffc:	44ac      	add	ip, r5
   33ffe:	0089      	lsls	r1, r1, #2
   34000:	eb01 110c 	add.w	r1, r1, ip, lsl #4
	m->_req = ack + 1;
   34004:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   34006:	3104      	adds	r1, #4
	m->_req = ack + 1;
   34008:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   3400a:	187a      	adds	r2, r7, r1
   3400c:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
   3400e:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   34010:	4621      	mov	r1, r4
   34012:	f7ff ff6d 	bl	33ef0 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   34016:	4b1f      	ldr	r3, [pc, #124]	; (34094 <mayfly_enqueue+0xb8>)
   34018:	2201      	movs	r2, #1
   3401a:	555a      	strb	r2, [r3, r5]

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   3401c:	4629      	mov	r1, r5
   3401e:	4630      	mov	r0, r6
   34020:	f00f fa50 	bl	434c4 <mayfly_pend>
		return 0;
   34024:	2000      	movs	r0, #0

	return 0;
}
   34026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   34028:	f00f fa36 	bl	43498 <mayfly_prio_is_equal>
   3402c:	2800      	cmp	r0, #0
   3402e:	d0da      	beq.n	33fe6 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   34030:	4629      	mov	r1, r5
   34032:	4630      	mov	r0, r6
   34034:	f00f fa10 	bl	43458 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   34038:	2800      	cmp	r0, #0
   3403a:	d0d4      	beq.n	33fe6 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   3403c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   34040:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   34044:	4f12      	ldr	r7, [pc, #72]	; (34090 <mayfly_enqueue+0xb4>)
	ack = m->_ack;
   34046:	7863      	ldrb	r3, [r4, #1]
		(mft[callee_id][caller_id].disable_req !=
   34048:	0112      	lsls	r2, r2, #4
   3404a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   3404e:	443a      	add	r2, r7
   34050:	0071      	lsls	r1, r6, #1
		!mayfly_is_enabled(caller_id, callee_id) ||
   34052:	7a90      	ldrb	r0, [r2, #10]
   34054:	7ad2      	ldrb	r2, [r2, #11]
   34056:	4290      	cmp	r0, r2
		(mft[callee_id][caller_id].disable_req !=
   34058:	ea4f 0c45 	mov.w	ip, r5, lsl #1
		!mayfly_is_enabled(caller_id, callee_id) ||
   3405c:	d00c      	beq.n	34078 <mayfly_enqueue+0x9c>
	state = (m->_req - ack) & 0x03;
   3405e:	7820      	ldrb	r0, [r4, #0]
   34060:	1ac0      	subs	r0, r0, r3
	if (state != 0U) {
   34062:	f010 0203 	ands.w	r2, r0, #3
   34066:	d0c8      	beq.n	33ffa <mayfly_enqueue+0x1e>
			if (state != 1U) {
   34068:	2a01      	cmp	r2, #1
   3406a:	d003      	beq.n	34074 <mayfly_enqueue+0x98>
				m->_req = ack + 1;
   3406c:	3301      	adds	r3, #1
   3406e:	b2db      	uxtb	r3, r3
   34070:	7023      	strb	r3, [r4, #0]
				goto mayfly_enqueue_pend;
   34072:	e7d0      	b.n	34016 <mayfly_enqueue+0x3a>
			return 1;
   34074:	4610      	mov	r0, r2
}
   34076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	state = (m->_req - ack) & 0x03;
   34078:	7822      	ldrb	r2, [r4, #0]
   3407a:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   3407c:	0792      	lsls	r2, r2, #30
   3407e:	d002      	beq.n	34086 <mayfly_enqueue+0xaa>
		m->_req = ack + 2;
   34080:	3302      	adds	r3, #2
   34082:	b2db      	uxtb	r3, r3
   34084:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   34086:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   3408a:	4798      	blx	r3
		return 0;
   3408c:	e7ca      	b.n	34024 <mayfly_enqueue+0x48>
   3408e:	bf00      	nop
   34090:	20004a4c 	.word	0x20004a4c
   34094:	200049c8 	.word	0x200049c8

00034098 <mayfly_run>:
		}
	}
}

void mayfly_run(uint8_t callee_id)
{
   34098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   3409c:	f8df 8140 	ldr.w	r8, [pc, #320]	; 341e0 <mayfly_run+0x148>
   340a0:	f818 3000 	ldrb.w	r3, [r8, r0]
{
   340a4:	b089      	sub	sp, #36	; 0x24
	if (!mfp[callee_id]) {
   340a6:	2b00      	cmp	r3, #0
   340a8:	d060      	beq.n	3416c <mayfly_run+0xd4>
		return;
	}
	mfp[callee_id] = 0U;
   340aa:	f04f 0b00 	mov.w	fp, #0
   340ae:	f8df 9134 	ldr.w	r9, [pc, #308]	; 341e4 <mayfly_run+0x14c>
   340b2:	f808 b000 	strb.w	fp, [r8, r0]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   340b6:	223c      	movs	r2, #60	; 0x3c
   340b8:	2304      	movs	r3, #4
   340ba:	e9cd bb04 	strd	fp, fp, [sp, #16]
   340be:	eb00 0a40 	add.w	sl, r0, r0, lsl #1
   340c2:	fb12 3300 	smlabb	r3, r2, r0, r3

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
   340c6:	2403      	movs	r4, #3
   340c8:	eb09 1a0a 	add.w	sl, r9, sl, lsl #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   340cc:	9302      	str	r3, [sp, #8]
   340ce:	4625      	mov	r5, r4
   340d0:	9003      	str	r0, [sp, #12]
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   340d2:	4654      	mov	r4, sl
		struct mayfly *m = 0;
   340d4:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
   340d6:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
   340da:	f854 0f24 	ldr.w	r0, [r4, #36]!
		struct mayfly *m = 0;
   340de:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
   340e0:	aa07      	add	r2, sp, #28
   340e2:	f7ff ff0f 	bl	33f04 <memq_peek>
   340e6:	9501      	str	r5, [sp, #4]
   340e8:	4607      	mov	r7, r0
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   340ea:	2f00      	cmp	r7, #0
   340ec:	d04a      	beq.n	34184 <mayfly_run+0xec>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   340ee:	9d07      	ldr	r5, [sp, #28]
   340f0:	7868      	ldrb	r0, [r5, #1]
   340f2:	782e      	ldrb	r6, [r5, #0]
   340f4:	1a36      	subs	r6, r6, r0
   340f6:	f006 0603 	and.w	r6, r6, #3
			if (state == 1U) {
   340fa:	2e01      	cmp	r6, #1
   340fc:	d106      	bne.n	3410c <mayfly_run+0x74>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   340fe:	1e42      	subs	r2, r0, #1
   34100:	706a      	strb	r2, [r5, #1]

				/* call the mayfly function */
				m->fp(m->param);
   34102:	e9d5 0302 	ldrd	r0, r3, [r5, #8]
   34106:	4798      	blx	r3
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   34108:	9d07      	ldr	r5, [sp, #28]
	if (((req - m->_ack) & 0x03) != 1U) {
   3410a:	7868      	ldrb	r0, [r5, #1]
	req = m->_req;
   3410c:	782b      	ldrb	r3, [r5, #0]
		memq_dequeue(mft[callee_id][caller_id].tail,
   3410e:	f8da c028 	ldr.w	ip, [sl, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
   34112:	1a18      	subs	r0, r3, r0
   34114:	f000 0003 	and.w	r0, r0, #3
   34118:	2801      	cmp	r0, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   3411a:	f04f 0200 	mov.w	r2, #0
   3411e:	4621      	mov	r1, r4
	req = m->_req;
   34120:	fa5f fb83 	uxtb.w	fp, r3
		memq_dequeue(mft[callee_id][caller_id].tail,
   34124:	4660      	mov	r0, ip
	if (((req - m->_ack) & 0x03) != 1U) {
   34126:	d00d      	beq.n	34144 <mayfly_run+0xac>
		memq_dequeue(mft[callee_id][caller_id].tail,
   34128:	f7ff fef4 	bl	33f14 <memq_dequeue>
		ack = m->_ack;
   3412c:	7869      	ldrb	r1, [r5, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   3412e:	782a      	ldrb	r2, [r5, #0]
		m->_link = link;
   34130:	606f      	str	r7, [r5, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   34132:	1a52      	subs	r2, r2, r1
   34134:	f002 0203 	and.w	r2, r2, #3
   34138:	2a01      	cmp	r2, #1
		m->_ack = req;
   3413a:	f885 b001 	strb.w	fp, [r5, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   3413e:	d018      	beq.n	34172 <mayfly_run+0xda>
   34140:	f8da c028 	ldr.w	ip, [sl, #40]	; 0x28

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   34144:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
   34148:	aa07      	add	r2, sp, #28
   3414a:	4661      	mov	r1, ip
   3414c:	f7ff feda 	bl	33f04 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   34150:	2e01      	cmp	r6, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   34152:	4607      	mov	r7, r0
			if (state == 1U) {
   34154:	d1c9      	bne.n	340ea <mayfly_run+0x52>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
   34156:	9d01      	ldr	r5, [sp, #4]
   34158:	2d00      	cmp	r5, #0
   3415a:	d03e      	beq.n	341da <mayfly_run+0x142>
					/* set mayfly callee pending */
					mfp[callee_id] = 1U;
   3415c:	9f03      	ldr	r7, [sp, #12]
   3415e:	2301      	movs	r3, #1
   34160:	f808 3007 	strb.w	r3, [r8, r7]

					/* pend the callee for execution */
					mayfly_pend(callee_id, callee_id);
   34164:	4639      	mov	r1, r7
   34166:	4638      	mov	r0, r7
   34168:	f00f f9ac 	bl	434c4 <mayfly_pend>
	}

	if (disable && !enable) {
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
   3416c:	b009      	add	sp, #36	; 0x24
   3416e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   34172:	9b02      	ldr	r3, [sp, #8]
			m->_ack = ack;
   34174:	7069      	strb	r1, [r5, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   34176:	4638      	mov	r0, r7
   34178:	4629      	mov	r1, r5
   3417a:	eb09 0203 	add.w	r2, r9, r3
   3417e:	f7ff feb7 	bl	33ef0 <memq_enqueue>
   34182:	e7dd      	b.n	34140 <mayfly_run+0xa8>
   34184:	9d01      	ldr	r5, [sp, #4]
		if (mft[callee_id][caller_id].disable_req !=
   34186:	f89a 302e 	ldrb.w	r3, [sl, #46]	; 0x2e
   3418a:	f89a 202f 	ldrb.w	r2, [sl, #47]	; 0x2f
   3418e:	429a      	cmp	r2, r3
   34190:	d003      	beq.n	3419a <mayfly_run+0x102>
			mft[callee_id][caller_id].disable_ack =
   34192:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
			disable = 1U;
   34196:	2301      	movs	r3, #1
   34198:	9304      	str	r3, [sp, #16]
		if (mft[callee_id][caller_id].enable_req !=
   3419a:	f89a 302c 	ldrb.w	r3, [sl, #44]	; 0x2c
   3419e:	f89a 202d 	ldrb.w	r2, [sl, #45]	; 0x2d
   341a2:	429a      	cmp	r2, r3
   341a4:	d003      	beq.n	341ae <mayfly_run+0x116>
			mft[callee_id][caller_id].enable_ack =
   341a6:	f88a 302d 	strb.w	r3, [sl, #45]	; 0x2d
			enable = 1U;
   341aa:	2301      	movs	r3, #1
   341ac:	9305      	str	r3, [sp, #20]
	while (caller_id--) {
   341ae:	3d01      	subs	r5, #1
   341b0:	b2ed      	uxtb	r5, r5
   341b2:	2dff      	cmp	r5, #255	; 0xff
   341b4:	f1aa 0a0c 	sub.w	sl, sl, #12
   341b8:	d18b      	bne.n	340d2 <mayfly_run+0x3a>
	if (disable && !enable) {
   341ba:	e9dd 5b04 	ldrd	r5, fp, [sp, #16]
   341be:	9f03      	ldr	r7, [sp, #12]
   341c0:	2d00      	cmp	r5, #0
   341c2:	d0d3      	beq.n	3416c <mayfly_run+0xd4>
   341c4:	f1bb 0f00 	cmp.w	fp, #0
   341c8:	d1d0      	bne.n	3416c <mayfly_run+0xd4>
		mayfly_enable_cb(callee_id, callee_id, 0);
   341ca:	465a      	mov	r2, fp
   341cc:	4639      	mov	r1, r7
   341ce:	4638      	mov	r0, r7
}
   341d0:	b009      	add	sp, #36	; 0x24
   341d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   341d6:	f00f b91f 	b.w	43418 <mayfly_enable_cb>
				if (caller_id || link) {
   341da:	2800      	cmp	r0, #0
   341dc:	d0d3      	beq.n	34186 <mayfly_run+0xee>
   341de:	e7bd      	b.n	3415c <mayfly_run+0xc4>
   341e0:	200049c8 	.word	0x200049c8
   341e4:	20004a4c 	.word	0x20004a4c

000341e8 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   341e8:	1e4b      	subs	r3, r1, #1
   341ea:	b2db      	uxtb	r3, r3
   341ec:	b171      	cbz	r1, 3420c <util_ones_count_get+0x24>
   341ee:	1e41      	subs	r1, r0, #1
   341f0:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   341f4:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   341f6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   341fa:	b123      	cbz	r3, 34206 <util_ones_count_get+0x1e>
			bite &= (bite - 1);
   341fc:	1e5a      	subs	r2, r3, #1
			one_count++;
   341fe:	3001      	adds	r0, #1
		while (bite) {
   34200:	4013      	ands	r3, r2
			one_count++;
   34202:	b2c0      	uxtb	r0, r0
		while (bite) {
   34204:	d1fa      	bne.n	341fc <util_ones_count_get+0x14>
	while (octets_len--) {
   34206:	4561      	cmp	r1, ip
   34208:	d1f5      	bne.n	341f6 <util_ones_count_get+0xe>
   3420a:	4770      	bx	lr
	uint8_t one_count = 0U;
   3420c:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   3420e:	4770      	bx	lr

00034210 <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
   34210:	b5f0      	push	{r4, r5, r6, r7, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   34212:	4d51      	ldr	r5, [pc, #324]	; (34358 <util_aa_le32+0x148>)
{
   34214:	b083      	sub	sp, #12
   34216:	4607      	mov	r7, r0
   34218:	2603      	movs	r6, #3
	consecutive_cnt = 1U;
   3421a:	2401      	movs	r4, #1
	lll_csrand_get(dst, sizeof(uint32_t));
   3421c:	2104      	movs	r1, #4
   3421e:	4638      	mov	r0, r7
   34220:	f00c f8b6 	bl	40390 <lll_csrand_get>
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   34224:	6838      	ldr	r0, [r7, #0]
	bit_idx = 31U;
   34226:	231f      	movs	r3, #31
	consecutive_bit = (aa >> bit_idx) & 0x01;
   34228:	fa20 f203 	lsr.w	r2, r0, r3
	while (bit_idx--) {
   3422c:	3b01      	subs	r3, #1
   3422e:	b2db      	uxtb	r3, r3
   34230:	2bff      	cmp	r3, #255	; 0xff
	transitions = 0U;
   34232:	f04f 0c00 	mov.w	ip, #0
	consecutive_cnt = 1U;
   34236:	f04f 0e01 	mov.w	lr, #1
	while (bit_idx--) {
   3423a:	d014      	beq.n	34266 <util_aa_le32+0x56>
		bit = (aa >> bit_idx) & 0x01;
   3423c:	fa20 f103 	lsr.w	r1, r0, r3
   34240:	f001 0101 	and.w	r1, r1, #1
		if (bit == consecutive_bit) {
   34244:	428a      	cmp	r2, r1
   34246:	d032      	beq.n	342ae <util_aa_le32+0x9e>
			transitions++;
   34248:	f10c 0201 	add.w	r2, ip, #1
		    ((consecutive_cnt < 6) &&
   3424c:	2b1c      	cmp	r3, #28
			transitions++;
   3424e:	b2d2      	uxtb	r2, r2
		    ((consecutive_cnt < 6) &&
   34250:	d94e      	bls.n	342f0 <util_aa_le32+0xe0>
		if ((transitions > 24) ||
   34252:	2a19      	cmp	r2, #25
   34254:	d03b      	beq.n	342ce <util_aa_le32+0xbe>
   34256:	4694      	mov	ip, r2
   34258:	f04f 0e01 	mov.w	lr, #1
	consecutive_cnt = 1U;
   3425c:	460a      	mov	r2, r1
	while (bit_idx--) {
   3425e:	3b01      	subs	r3, #1
   34260:	b2db      	uxtb	r3, r3
   34262:	2bff      	cmp	r3, #255	; 0xff
   34264:	d1ea      	bne.n	3423c <util_aa_le32+0x2c>
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   34266:	ea80 0305 	eor.w	r3, r0, r5
   3426a:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
   3426c:	f10d 0c04 	add.w	ip, sp, #4
   34270:	f10d 0e08 	add.w	lr, sp, #8
	uint8_t one_count = 0U;
   34274:	2200      	movs	r2, #0
		bite = *octets;
   34276:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
   3427a:	b123      	cbz	r3, 34286 <util_aa_le32+0x76>
			bite &= (bite - 1);
   3427c:	1e59      	subs	r1, r3, #1
			one_count++;
   3427e:	3201      	adds	r2, #1
		while (bite) {
   34280:	400b      	ands	r3, r1
			one_count++;
   34282:	b2d2      	uxtb	r2, r2
		while (bite) {
   34284:	d1fa      	bne.n	3427c <util_aa_le32+0x6c>
	while (octets_len--) {
   34286:	45e6      	cmp	lr, ip
   34288:	d1f5      	bne.n	34276 <util_aa_le32+0x66>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
   3428a:	2a01      	cmp	r2, #1
   3428c:	d907      	bls.n	3429e <util_aa_le32+0x8e>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   3428e:	b283      	uxth	r3, r0
   34290:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   34294:	d128      	bne.n	342e8 <util_aa_le32+0xd8>
	    !((aa & 0xFF) ^ (aa >> 24))) {
   34296:	b2c3      	uxtb	r3, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   34298:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   3429c:	d124      	bne.n	342e8 <util_aa_le32+0xd8>
	if (!retry) {
   3429e:	3e01      	subs	r6, #1
   342a0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   342a4:	d1ba      	bne.n	3421c <util_aa_le32+0xc>
		return -EFAULT;
   342a6:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
   342aa:	b003      	add	sp, #12
   342ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
			consecutive_cnt++;
   342ae:	f10e 0201 	add.w	r2, lr, #1
   342b2:	b2d2      	uxtb	r2, r2
		if ((consecutive_cnt > 6) ||
   342b4:	2a06      	cmp	r2, #6
   342b6:	d92c      	bls.n	34312 <util_aa_le32+0x102>
				aa &= ~BIT(bit_idx);
   342b8:	fa04 f203 	lsl.w	r2, r4, r3
			if (consecutive_bit) {
   342bc:	b171      	cbz	r1, 342dc <util_aa_le32+0xcc>
				aa &= ~BIT(bit_idx);
   342be:	ea20 0002 	bic.w	r0, r0, r2
				consecutive_bit = 0U;
   342c2:	2100      	movs	r1, #0
				transitions++;
   342c4:	f10c 0201 	add.w	r2, ip, #1
   342c8:	b2d2      	uxtb	r2, r2
		if ((transitions > 24) ||
   342ca:	2a19      	cmp	r2, #25
   342cc:	d1c3      	bne.n	34256 <util_aa_le32+0x46>
				aa &= ~(BIT(bit_idx + 1) - 1);
   342ce:	3301      	adds	r3, #1
   342d0:	fa04 f303 	lsl.w	r3, r4, r3
			if (consecutive_bit) {
   342d4:	b129      	cbz	r1, 342e2 <util_aa_le32+0xd2>
				aa &= ~(BIT(bit_idx + 1) - 1);
   342d6:	425b      	negs	r3, r3
   342d8:	4018      	ands	r0, r3
   342da:	e7c4      	b.n	34266 <util_aa_le32+0x56>
				aa |= BIT(bit_idx);
   342dc:	4310      	orrs	r0, r2
				consecutive_bit = 1U;
   342de:	2101      	movs	r1, #1
   342e0:	e7f0      	b.n	342c4 <util_aa_le32+0xb4>
				aa |= (BIT(bit_idx + 1) - 1);
   342e2:	3b01      	subs	r3, #1
   342e4:	4318      	orrs	r0, r3
   342e6:	e7be      	b.n	34266 <util_aa_le32+0x56>
	dst[0] = val;
   342e8:	6038      	str	r0, [r7, #0]
	return 0;
   342ea:	2000      	movs	r0, #0
}
   342ec:	b003      	add	sp, #12
   342ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		     (((bit_idx < 29) && (transitions < 1)) ||
   342f0:	d0af      	beq.n	34252 <util_aa_le32+0x42>
		      ((bit_idx < 28) && (transitions < 2))))) {
   342f2:	2a01      	cmp	r2, #1
   342f4:	d1ad      	bne.n	34252 <util_aa_le32+0x42>
				aa &= ~BIT(bit_idx);
   342f6:	fa04 f203 	lsl.w	r2, r4, r3
			if (consecutive_bit) {
   342fa:	b139      	cbz	r1, 3430c <util_aa_le32+0xfc>
				aa &= ~BIT(bit_idx);
   342fc:	ea20 0002 	bic.w	r0, r0, r2
				consecutive_bit = 0U;
   34300:	2100      	movs	r1, #0
			if (transitions != transitions_prev) {
   34302:	f1bc 0f01 	cmp.w	ip, #1
   34306:	d0dd      	beq.n	342c4 <util_aa_le32+0xb4>
	consecutive_cnt = 1U;
   34308:	460a      	mov	r2, r1
   3430a:	e7a8      	b.n	3425e <util_aa_le32+0x4e>
				aa |= BIT(bit_idx);
   3430c:	4310      	orrs	r0, r2
				consecutive_bit = 1U;
   3430e:	2101      	movs	r1, #1
   34310:	e7f7      	b.n	34302 <util_aa_le32+0xf2>
		if ((consecutive_cnt > 6) ||
   34312:	d001      	beq.n	34318 <util_aa_le32+0x108>
		    ((consecutive_cnt < 6) &&
   34314:	2b1c      	cmp	r3, #28
   34316:	d902      	bls.n	3431e <util_aa_le32+0x10e>
		      ((bit_idx < 28) && (transitions < 2))))) {
   34318:	4696      	mov	lr, r2
	consecutive_cnt = 1U;
   3431a:	460a      	mov	r2, r1
   3431c:	e79f      	b.n	3425e <util_aa_le32+0x4e>
		     (((bit_idx < 29) && (transitions < 1)) ||
   3431e:	f1bc 0f00 	cmp.w	ip, #0
   34322:	d10a      	bne.n	3433a <util_aa_le32+0x12a>
				aa &= ~BIT(bit_idx);
   34324:	2201      	movs	r2, #1
   34326:	fa02 fe03 	lsl.w	lr, r2, r3
			if (consecutive_bit) {
   3432a:	b169      	cbz	r1, 34348 <util_aa_le32+0x138>
				aa &= ~BIT(bit_idx);
   3432c:	ea20 000e 	bic.w	r0, r0, lr
				consecutive_cnt = 1U;
   34330:	468e      	mov	lr, r1
				consecutive_bit = 0U;
   34332:	4661      	mov	r1, ip
	consecutive_cnt = 1U;
   34334:	460a      	mov	r2, r1
				transitions++;
   34336:	46f4      	mov	ip, lr
   34338:	e791      	b.n	3425e <util_aa_le32+0x4e>
		     (((bit_idx < 29) && (transitions < 1)) ||
   3433a:	2b1c      	cmp	r3, #28
   3433c:	d0ec      	beq.n	34318 <util_aa_le32+0x108>
		      ((bit_idx < 28) && (transitions < 2))))) {
   3433e:	f1bc 0f01 	cmp.w	ip, #1
   34342:	d0d8      	beq.n	342f6 <util_aa_le32+0xe6>
   34344:	4696      	mov	lr, r2
   34346:	e7e8      	b.n	3431a <util_aa_le32+0x10a>
				consecutive_bit = 1U;
   34348:	4611      	mov	r1, r2
				aa |= BIT(bit_idx);
   3434a:	ea40 000e 	orr.w	r0, r0, lr
				transitions++;
   3434e:	4694      	mov	ip, r2
				consecutive_cnt = 1U;
   34350:	4696      	mov	lr, r2
	consecutive_cnt = 1U;
   34352:	460a      	mov	r2, r1
   34354:	e783      	b.n	3425e <util_aa_le32+0x4e>
   34356:	bf00      	nop
   34358:	8e89bed6 	.word	0x8e89bed6

0003435c <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
   3435c:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
   3435e:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
   34360:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
   34362:	2bff      	cmp	r3, #255	; 0xff
   34364:	d016      	beq.n	34394 <ticker_dequeue+0x38>
		ticker_current = &node[current];
   34366:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
   3436a:	428b      	cmp	r3, r1
		ticker_current = &node[current];
   3436c:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
   34370:	d029      	beq.n	343c6 <ticker_dequeue+0x6a>
	total = 0U;
   34372:	f04f 0c00 	mov.w	ip, #0
   34376:	e001      	b.n	3437c <ticker_dequeue+0x20>
		if (current == id) {
   34378:	4299      	cmp	r1, r3
   3437a:	d00d      	beq.n	34398 <ticker_dequeue+0x3c>
			break;
		}

		total += ticker_current->ticks_to_expire;
   3437c:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
   3437e:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
   34380:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
   34382:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   34384:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   34388:	44a4      	add	ip, r4
		ticker_current = &node[current];
   3438a:	ea4f 1402 	mov.w	r4, r2, lsl #4
   3438e:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
   34392:	d1f1      	bne.n	34378 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
   34394:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
   34396:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
   34398:	4571      	cmp	r1, lr
   3439a:	d017      	beq.n	343cc <ticker_dequeue+0x70>
		instance->ticker_id_head = ticker_current->next;
   3439c:	5d2b      	ldrb	r3, [r5, r4]
	timeout = ticker_current->ticks_to_expire;
   3439e:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
   343a0:	fa0f fe8e 	sxth.w	lr, lr
   343a4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   343a8:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
	if (ticker_current->next != TICKER_NULL) {
   343ac:	2bff      	cmp	r3, #255	; 0xff
	node[previous].next = ticker_current->next;
   343ae:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
   343b2:	d006      	beq.n	343c2 <ticker_dequeue+0x66>
		node[ticker_current->next].ticks_to_expire += timeout;
   343b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   343b8:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   343bc:	689a      	ldr	r2, [r3, #8]
   343be:	4402      	add	r2, r0
   343c0:	609a      	str	r2, [r3, #8]
	return (total + timeout);
   343c2:	4460      	add	r0, ip
}
   343c4:	bd30      	pop	{r4, r5, pc}
	previous = instance->ticker_id_head;
   343c6:	469e      	mov	lr, r3
	total = 0U;
   343c8:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
   343cc:	7813      	ldrb	r3, [r2, #0]
   343ce:	7743      	strb	r3, [r0, #29]
   343d0:	e7e5      	b.n	3439e <ticker_dequeue+0x42>
   343d2:	bf00      	nop

000343d4 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   343d4:	eba2 0c01 	sub.w	ip, r2, r1
   343d8:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   343dc:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   343de:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   343e0:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   343e2:	d10a      	bne.n	343fa <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   343e4:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   343e8:	4463      	add	r3, ip
	if (ticks_to_expire > ticks_to_expire_minus) {
   343ea:	42a3      	cmp	r3, r4
   343ec:	d80d      	bhi.n	3440a <ticks_to_expire_prep+0x36>
		ticks_to_expire_minus -= ticks_to_expire;
   343ee:	1ae4      	subs	r4, r4, r3
		ticks_to_expire = 0U;
   343f0:	2300      	movs	r3, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   343f2:	6144      	str	r4, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
   343f4:	6083      	str	r3, [r0, #8]
}
   343f6:	bc10      	pop	{r4}
   343f8:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   343fa:	1a89      	subs	r1, r1, r2
   343fc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   34400:	428b      	cmp	r3, r1
   34402:	d908      	bls.n	34416 <ticks_to_expire_prep+0x42>
			ticks_to_expire -= delta_current_start;
   34404:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   34406:	42a3      	cmp	r3, r4
   34408:	d9f1      	bls.n	343ee <ticks_to_expire_prep+0x1a>
		ticks_to_expire -= ticks_to_expire_minus;
   3440a:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   3440c:	2400      	movs	r4, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   3440e:	6144      	str	r4, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
   34410:	6083      	str	r3, [r0, #8]
}
   34412:	bc10      	pop	{r4}
   34414:	4770      	bx	lr
			ticks_to_expire_minus +=
   34416:	440c      	add	r4, r1
   34418:	1ae4      	subs	r4, r4, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   3441a:	e7e9      	b.n	343f0 <ticks_to_expire_prep+0x1c>

0003441c <ticker_job_list_insert>:
{
   3441c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34420:	b087      	sub	sp, #28
   34422:	4603      	mov	r3, r0
	count_user = instance->count_user;
   34424:	7a42      	ldrb	r2, [r0, #9]
{
   34426:	9000      	str	r0, [sp, #0]
	node = &instance->nodes[0];
   34428:	6800      	ldr	r0, [r0, #0]
	users = &instance->users[0];
   3442a:	685d      	ldr	r5, [r3, #4]
	node = &instance->nodes[0];
   3442c:	9001      	str	r0, [sp, #4]
	while (count_user--) {
   3442e:	2a00      	cmp	r2, #0
   34430:	f000 80ea 	beq.w	34608 <ticker_job_list_insert+0x1ec>
   34434:	1e53      	subs	r3, r2, #1
   34436:	b2db      	uxtb	r3, r3
   34438:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   3443c:	4688      	mov	r8, r1
   3443e:	9302      	str	r3, [sp, #8]
   34440:	9505      	str	r5, [sp, #20]
		user_ops = (void *)&user->user_op[0];
   34442:	9b02      	ldr	r3, [sp, #8]
   34444:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   34446:	785b      	ldrb	r3, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   34448:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   3444a:	9303      	str	r3, [sp, #12]
   3444c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   34450:	d063      	beq.n	3451a <ticker_job_list_insert+0xfe>
				ticker = &node[id_insert];
   34452:	9b01      	ldr	r3, [sp, #4]
   34454:	eb08 0548 	add.w	r5, r8, r8, lsl #1
   34458:	012c      	lsls	r4, r5, #4
   3445a:	eb03 1505 	add.w	r5, r3, r5, lsl #4
				user_op = NULL;
   3445e:	46c1      	mov	r9, r8
	ticker->req = ticker->ack + 1;
   34460:	f895 b002 	ldrb.w	fp, [r5, #2]
				insert_head = ticker->next;
   34464:	f813 8004 	ldrb.w	r8, [r3, r4]
				user_op = NULL;
   34468:	2600      	movs	r6, #0
	node = &instance->nodes[0];
   3446a:	9b00      	ldr	r3, [sp, #0]
	ticker->next = TICKER_NULL;
   3446c:	f04f 0eff 	mov.w	lr, #255	; 0xff
   34470:	f885 e000 	strb.w	lr, [r5]
	node = &instance->nodes[0];
   34474:	f8d3 c000 	ldr.w	ip, [r3]
	current = instance->ticker_id_head;
   34478:	7f59      	ldrb	r1, [r3, #29]
	ticker_new = &node[id];
   3447a:	eb0c 0a04 	add.w	sl, ip, r4
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   3447e:	4571      	cmp	r1, lr
	ticks_to_expire = ticker_new->ticks_to_expire;
   34480:	f8da 0008 	ldr.w	r0, [sl, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   34484:	d10d      	bne.n	344a2 <ticker_job_list_insert+0x86>
   34486:	e0b5      	b.n	345f4 <ticker_job_list_insert+0x1d8>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   34488:	1b00      	subs	r0, r0, r4
   3448a:	d104      	bne.n	34496 <ticker_job_list_insert+0x7a>
   3448c:	f8ba 701e 	ldrh.w	r7, [sl, #30]
   34490:	8bd2      	ldrh	r2, [r2, #30]
   34492:	4297      	cmp	r7, r2
   34494:	d876      	bhi.n	34584 <ticker_job_list_insert+0x168>
		current = ticker_current->next;
   34496:	f81c 3003 	ldrb.w	r3, [ip, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   3449a:	2bff      	cmp	r3, #255	; 0xff
   3449c:	468e      	mov	lr, r1
		current = ticker_current->next;
   3449e:	4619      	mov	r1, r3
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   344a0:	d007      	beq.n	344b2 <ticker_job_list_insert+0x96>
		(ticker_current = &node[current])->ticks_to_expire))) {
   344a2:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   344a6:	eb0c 1203 	add.w	r2, ip, r3, lsl #4
   344aa:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   344ac:	6894      	ldr	r4, [r2, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   344ae:	4284      	cmp	r4, r0
   344b0:	d9ea      	bls.n	34488 <ticker_job_list_insert+0x6c>
	if (previous == TICKER_NULL) {
   344b2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   344b6:	f8ca 0008 	str.w	r0, [sl, #8]
	ticker_new->next = current;
   344ba:	f88a 1000 	strb.w	r1, [sl]
	if (previous == TICKER_NULL) {
   344be:	d05d      	beq.n	3457c <ticker_job_list_insert+0x160>
		node[previous].next = id;
   344c0:	fa0f fe8e 	sxth.w	lr, lr
   344c4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   344c8:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   344cc:	f80c 900e 	strb.w	r9, [ip, lr]
	if (current != TICKER_NULL) {
   344d0:	29ff      	cmp	r1, #255	; 0xff
   344d2:	d008      	beq.n	344e6 <ticker_job_list_insert+0xca>
		node[current].ticks_to_expire -= ticks_to_expire;
   344d4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   344d8:	eb0c 1c01 	add.w	ip, ip, r1, lsl #4
   344dc:	f8dc 3008 	ldr.w	r3, [ip, #8]
   344e0:	1a1b      	subs	r3, r3, r0
   344e2:	f8cc 3008 	str.w	r3, [ip, #8]
	ticker->req = ticker->ack + 1;
   344e6:	f10b 0b01 	add.w	fp, fp, #1
   344ea:	f885 b001 	strb.w	fp, [r5, #1]
			if (user_op) {
   344ee:	2e00      	cmp	r6, #0
   344f0:	d0ac      	beq.n	3444c <ticker_job_list_insert+0x30>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   344f2:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   344f6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   344f8:	7032      	strb	r2, [r6, #0]
	user_op->status = status;
   344fa:	2200      	movs	r2, #0
   344fc:	62b2      	str	r2, [r6, #40]	; 0x28
	if (user_op->fp_op_func) {
   344fe:	b113      	cbz	r3, 34506 <ticker_job_list_insert+0xea>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   34500:	6b31      	ldr	r1, [r6, #48]	; 0x30
   34502:	4610      	mov	r0, r2
   34504:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   34506:	686b      	ldr	r3, [r5, #4]
   34508:	2b00      	cmp	r3, #0
   3450a:	d19f      	bne.n	3444c <ticker_job_list_insert+0x30>
					ticker->op_context =
   3450c:	e9d6 230b 	ldrd	r2, r3, [r6, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
   34510:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
					ticker->op_context =
   34514:	e9c5 2308 	strd	r2, r3, [r5, #32]
		while ((insert_head != TICKER_NULL) ||
   34518:	d19b      	bne.n	34452 <ticker_job_list_insert+0x36>
   3451a:	9b02      	ldr	r3, [sp, #8]
   3451c:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
   34520:	789a      	ldrb	r2, [r3, #2]
				user_op = &user_ops[user_ops_first];
   34522:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   34526:	eb07 0383 	add.w	r3, r7, r3, lsl #2
				first = user_ops_first + 1;
   3452a:	1c79      	adds	r1, r7, #1
		while ((insert_head != TICKER_NULL) ||
   3452c:	42ba      	cmp	r2, r7
				user_op = &user_ops[user_ops_first];
   3452e:	eb0a 0683 	add.w	r6, sl, r3, lsl #2
				first = user_ops_first + 1;
   34532:	b2cf      	uxtb	r7, r1
		while ((insert_head != TICKER_NULL) ||
   34534:	d056      	beq.n	345e4 <ticker_job_list_insert+0x1c8>
				if (first == user->count_user_op) {
   34536:	9902      	ldr	r1, [sp, #8]
   34538:	7808      	ldrb	r0, [r1, #0]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   3453a:	f81a 1023 	ldrb.w	r1, [sl, r3, lsl #2]
					first = 0U;
   3453e:	42b8      	cmp	r0, r7
   34540:	bf08      	it	eq
   34542:	2700      	moveq	r7, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   34544:	2904      	cmp	r1, #4
   34546:	d1ec      	bne.n	34522 <ticker_job_list_insert+0x106>
				id_insert = user_op->id;
   34548:	f896 9001 	ldrb.w	r9, [r6, #1]
				ticker = &node[id_insert];
   3454c:	9901      	ldr	r1, [sp, #4]
   3454e:	eb09 0249 	add.w	r2, r9, r9, lsl #1
   34552:	eb01 1502 	add.w	r5, r1, r2, lsl #4
   34556:	0114      	lsls	r4, r2, #4
				      ticker->ack) & 0xff) != 0U) {
   34558:	f895 b002 	ldrb.w	fp, [r5, #2]
				if (((ticker->req -
   3455c:	786a      	ldrb	r2, [r5, #1]
   3455e:	455a      	cmp	r2, fp
   34560:	d012      	beq.n	34588 <ticker_job_list_insert+0x16c>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   34562:	f04f 0200 	mov.w	r2, #0
   34566:	f80a 2023 	strb.w	r2, [sl, r3, lsl #2]
	if (user_op->fp_op_func) {
   3456a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
   3456c:	2001      	movs	r0, #1
	user_op->status = status;
   3456e:	62b0      	str	r0, [r6, #40]	; 0x28
	if (user_op->fp_op_func) {
   34570:	b10b      	cbz	r3, 34576 <ticker_job_list_insert+0x15a>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   34572:	6b31      	ldr	r1, [r6, #48]	; 0x30
   34574:	4798      	blx	r3
   34576:	9b02      	ldr	r3, [sp, #8]
   34578:	789a      	ldrb	r2, [r3, #2]
		while ((insert_head != TICKER_NULL) ||
   3457a:	e7d2      	b.n	34522 <ticker_job_list_insert+0x106>
		instance->ticker_id_head = id;
   3457c:	9b00      	ldr	r3, [sp, #0]
   3457e:	f883 901d 	strb.w	r9, [r3, #29]
   34582:	e7a5      	b.n	344d0 <ticker_job_list_insert+0xb4>
   34584:	4620      	mov	r0, r4
   34586:	e794      	b.n	344b2 <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   34588:	8ab3      	ldrh	r3, [r6, #20]
				ticker_job_op_start(ticker, user_op,
   3458a:	9a00      	ldr	r2, [sp, #0]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   3458c:	9703      	str	r7, [sp, #12]
   3458e:	f64f 77fe 	movw	r7, #65534	; 0xfffe
   34592:	42bb      	cmp	r3, r7
				ticker_job_op_start(ticker, user_op,
   34594:	6951      	ldr	r1, [r2, #20]
	ticker->ext_data = start->ext_data;
   34596:	f8d6 c024 	ldr.w	ip, [r6, #36]	; 0x24
	ticker->ticks_periodic = start->ticks_periodic;
   3459a:	e9d6 0203 	ldrd	r0, r2, [r6, #12]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   3459e:	d031      	beq.n	34604 <ticker_job_list_insert+0x1e8>
		ticker->must_expire =
   345a0:	f64f 7eff 	movw	lr, #65535	; 0xffff
   345a4:	4573      	cmp	r3, lr
   345a6:	d02a      	beq.n	345fe <ticker_job_list_insert+0x1e2>
   345a8:	f04f 0700 	mov.w	r7, #0
   345ac:	f885 702c 	strb.w	r7, [r5, #44]	; 0x2c
	ticker->lazy_periodic =
   345b0:	83ab      	strh	r3, [r5, #28]
	ticker->ticks_slot = start->ticks_slot;
   345b2:	69b3      	ldr	r3, [r6, #24]
   345b4:	61ab      	str	r3, [r5, #24]
	ticker->timeout_func = start->fp_timeout_func;
   345b6:	69f3      	ldr	r3, [r6, #28]
   345b8:	60eb      	str	r3, [r5, #12]
	ticker->context = start->context;
   345ba:	6a33      	ldr	r3, [r6, #32]
   345bc:	612b      	str	r3, [r5, #16]
	ticker->ticks_to_expire = start->ticks_first;
   345be:	68b3      	ldr	r3, [r6, #8]
   345c0:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus = 0U;
   345c2:	2300      	movs	r3, #0
	ticker->ticks_periodic = start->ticks_periodic;
   345c4:	6068      	str	r0, [r5, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   345c6:	622a      	str	r2, [r5, #32]
	ticker->ticks_to_expire_minus = 0U;
   345c8:	616b      	str	r3, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   345ca:	6872      	ldr	r2, [r6, #4]
	ticker->ext_data = start->ext_data;
   345cc:	f8c5 c028 	str.w	ip, [r5, #40]	; 0x28
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   345d0:	4628      	mov	r0, r5
	ticker->ticks_to_expire_minus = 0U;
   345d2:	461f      	mov	r7, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   345d4:	f7ff fefe 	bl	343d4 <ticks_to_expire_prep>
	ticker->force = 1U;
   345d8:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   345dc:	626f      	str	r7, [r5, #36]	; 0x24
	ticker->lazy_current = 0U;
   345de:	83ef      	strh	r7, [r5, #30]
	ticker->force = 1U;
   345e0:	70eb      	strb	r3, [r5, #3]
}
   345e2:	e742      	b.n	3446a <ticker_job_list_insert+0x4e>
	while (count_user--) {
   345e4:	9a02      	ldr	r2, [sp, #8]
   345e6:	9905      	ldr	r1, [sp, #20]
   345e8:	428a      	cmp	r2, r1
   345ea:	f1a2 0308 	sub.w	r3, r2, #8
   345ee:	d00b      	beq.n	34608 <ticker_job_list_insert+0x1ec>
   345f0:	9302      	str	r3, [sp, #8]
   345f2:	e726      	b.n	34442 <ticker_job_list_insert+0x26>
	ticker_new->next = current;
   345f4:	f80c 1004 	strb.w	r1, [ip, r4]
		instance->ticker_id_head = id;
   345f8:	f883 901d 	strb.w	r9, [r3, #29]
	if (current != TICKER_NULL) {
   345fc:	e773      	b.n	344e6 <ticker_job_list_insert+0xca>
		ticker->must_expire =
   345fe:	2301      	movs	r3, #1
   34600:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->lazy_periodic =
   34604:	2300      	movs	r3, #0
   34606:	e7d3      	b.n	345b0 <ticker_job_list_insert+0x194>
}
   34608:	b007      	add	sp, #28
   3460a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3460e:	bf00      	nop

00034610 <ticker_worker>:
{
   34610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   34614:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1U;
   34616:	2301      	movs	r3, #1
{
   34618:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
   3461a:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   3461c:	2d00      	cmp	r5, #0
   3461e:	d15a      	bne.n	346d6 <ticker_worker+0xc6>
	if (instance->ticker_id_head == TICKER_NULL) {
   34620:	7f43      	ldrb	r3, [r0, #29]
   34622:	2bff      	cmp	r3, #255	; 0xff
   34624:	4683      	mov	fp, r0
   34626:	d055      	beq.n	346d4 <ticker_worker+0xc4>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   34628:	f00e f9f6 	bl	42a18 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   3462c:	f8db 2014 	ldr.w	r2, [fp, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   34630:	f89b 301c 	ldrb.w	r3, [fp, #28]
	ticker_id_head = instance->ticker_id_head;
   34634:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34638:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   3463a:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   3463c:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   34640:	f000 8131 	beq.w	348a6 <ticker_worker+0x296>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   34644:	f8db 3018 	ldr.w	r3, [fp, #24]
   34648:	42bb      	cmp	r3, r7
   3464a:	bf94      	ite	ls
   3464c:	2300      	movls	r3, #0
   3464e:	2301      	movhi	r3, #1
   34650:	9302      	str	r3, [sp, #8]
	while (ticker_id_head != TICKER_NULL) {
   34652:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
   34654:	f8db 8000 	ldr.w	r8, [fp]
	ticks_expired = 0U;
   34658:	f04f 0a00 	mov.w	sl, #0
	while (ticker_id_head != TICKER_NULL) {
   3465c:	d045      	beq.n	346ea <ticker_worker+0xda>
				ticker->lazy_current = 0U;
   3465e:	46d1      	mov	r9, sl
   34660:	9505      	str	r5, [sp, #20]
   34662:	f8cd b00c 	str.w	fp, [sp, #12]
		ticker = &node[ticker_id_head];
   34666:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   3466a:	eb08 1406 	add.w	r4, r8, r6, lsl #4
   3466e:	0136      	lsls	r6, r6, #4
		ticks_to_expire = ticker->ticks_to_expire;
   34670:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   34672:	42bb      	cmp	r3, r7
   34674:	d836      	bhi.n	346e4 <ticker_worker+0xd4>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   34676:	78a2      	ldrb	r2, [r4, #2]
		ticker_id_head = ticker->next;
   34678:	f818 6006 	ldrb.w	r6, [r8, r6]
		ticks_elapsed -= ticks_to_expire;
   3467c:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   3467e:	449a      	add	sl, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   34680:	7863      	ldrb	r3, [r4, #1]
   34682:	1a9b      	subs	r3, r3, r2
   34684:	b2db      	uxtb	r3, r3
   34686:	2b01      	cmp	r3, #1
   34688:	d12a      	bne.n	346e0 <ticker_worker+0xd0>
		if (ticker->ticks_slot != 0U &&
   3468a:	f8d4 b018 	ldr.w	fp, [r4, #24]
   3468e:	f1bb 0f00 	cmp.w	fp, #0
   34692:	d050      	beq.n	34736 <ticker_worker+0x126>
   34694:	9b02      	ldr	r3, [sp, #8]
   34696:	2b00      	cmp	r3, #0
   34698:	d048      	beq.n	3472c <ticker_worker+0x11c>
		int32_t lazy_current = ticker->lazy_current;
   3469a:	8be0      	ldrh	r0, [r4, #30]
			struct ticker_ext *ext_data = ticker->ext_data;
   3469c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   3469e:	b13b      	cbz	r3, 346b0 <ticker_worker+0xa0>
   346a0:	6819      	ldr	r1, [r3, #0]
   346a2:	b119      	cbz	r1, 346ac <ticker_worker+0x9c>
			    ext_data->ticks_slot_window != 0U &&
   346a4:	7a19      	ldrb	r1, [r3, #8]
   346a6:	2900      	cmp	r1, #0
   346a8:	f000 80e6 	beq.w	34878 <ticker_worker+0x268>
				ext_data->reschedule_state =
   346ac:	f883 9008 	strb.w	r9, [r3, #8]
			ticker->lazy_current++;
   346b0:	3001      	adds	r0, #1
			if ((ticker->must_expire == 0U) ||
   346b2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   346b6:	b280      	uxth	r0, r0
   346b8:	83e0      	strh	r0, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   346ba:	b179      	cbz	r1, 346dc <ticker_worker+0xcc>
   346bc:	8ba1      	ldrh	r1, [r4, #28]
   346be:	4281      	cmp	r1, r0
   346c0:	d20c      	bcs.n	346dc <ticker_worker+0xcc>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   346c2:	2b00      	cmp	r3, #0
   346c4:	f000 80f1 	beq.w	348aa <ticker_worker+0x29a>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   346c8:	7a19      	ldrb	r1, [r3, #8]
   346ca:	2901      	cmp	r1, #1
   346cc:	d006      	beq.n	346dc <ticker_worker+0xcc>
			must_expire_skip = 1U;
   346ce:	f04f 0e01 	mov.w	lr, #1
   346d2:	e034      	b.n	3473e <ticker_worker+0x12e>
		instance->worker_trigger = 0U;
   346d4:	77c5      	strb	r5, [r0, #31]
}
   346d6:	b00f      	add	sp, #60	; 0x3c
   346d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   346dc:	3a01      	subs	r2, #1
   346de:	70a2      	strb	r2, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   346e0:	2eff      	cmp	r6, #255	; 0xff
   346e2:	d1c0      	bne.n	34666 <ticker_worker+0x56>
   346e4:	9d05      	ldr	r5, [sp, #20]
   346e6:	f8dd b00c 	ldr.w	fp, [sp, #12]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   346ea:	f89b 300b 	ldrb.w	r3, [fp, #11]
   346ee:	f89b 200a 	ldrb.w	r2, [fp, #10]
   346f2:	429a      	cmp	r2, r3
   346f4:	d108      	bne.n	34708 <ticker_worker+0xf8>
	uint8_t idx = *ticks_elapsed_index + 1;
   346f6:	3201      	adds	r2, #1
   346f8:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   346fa:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   346fc:	bf1a      	itte	ne
   346fe:	4615      	movne	r5, r2
   34700:	462b      	movne	r3, r5
   34702:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   34704:	f88b 500b 	strb.w	r5, [fp, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   34708:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   3470c:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   34710:	f8c3 a00c 	str.w	sl, [r3, #12]
	instance->worker_trigger = 0U;
   34714:	2200      	movs	r2, #0
   34716:	f88b 201f 	strb.w	r2, [fp, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   3471a:	465b      	mov	r3, fp
   3471c:	2201      	movs	r2, #1
   3471e:	2104      	movs	r1, #4
   34720:	2003      	movs	r0, #3
   34722:	46a4      	mov	ip, r4
}
   34724:	b00f      	add	sp, #60	; 0x3c
   34726:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   3472a:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   3472c:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   34730:	9304      	str	r3, [sp, #16]
   34732:	3380      	adds	r3, #128	; 0x80
   34734:	d145      	bne.n	347c2 <ticker_worker+0x1b2>
		if (ticker->ext_data) {
   34736:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   34738:	b303      	cbz	r3, 3477c <ticker_worker+0x16c>
   3473a:	f04f 0e00 	mov.w	lr, #0
			ticker->ext_data->reschedule_state =
   3473e:	f883 9008 	strb.w	r9, [r3, #8]
		if (ticker->timeout_func) {
   34742:	68e5      	ldr	r5, [r4, #12]
			ticks_drift = ticker->ext_data->ticks_drift;
   34744:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
   34746:	f8c3 9004 	str.w	r9, [r3, #4]
		ticker->ack--;
   3474a:	3a01      	subs	r2, #1
   3474c:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   3474e:	2d00      	cmp	r5, #0
   34750:	d0c6      	beq.n	346e0 <ticker_worker+0xd0>
					   ticks_expired -
   34752:	9b03      	ldr	r3, [sp, #12]
   34754:	6960      	ldr	r0, [r4, #20]
   34756:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
   34758:	6a62      	ldr	r2, [r4, #36]	; 0x24
			uint8_t next_force = (ticker_next->force > ticker->force);
   3475a:	f894 c003 	ldrb.w	ip, [r4, #3]
					   ticks_expired -
   3475e:	ebaa 0000 	sub.w	r0, sl, r0
   34762:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   34764:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   34768:	6923      	ldr	r3, [r4, #16]
   3476a:	f1be 0f00 	cmp.w	lr, #0
   3476e:	d017      	beq.n	347a0 <ticker_worker+0x190>
   34770:	e9cd c300 	strd	ip, r3, [sp]
   34774:	f64f 73ff 	movw	r3, #65535	; 0xffff
   34778:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   3477a:	e7b1      	b.n	346e0 <ticker_worker+0xd0>
		if (ticker->timeout_func) {
   3477c:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   3477e:	3a01      	subs	r2, #1
   34780:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   34782:	2d00      	cmp	r5, #0
   34784:	d0ac      	beq.n	346e0 <ticker_worker+0xd0>
			ticks_drift = 0U;
   34786:	4619      	mov	r1, r3
					   ticks_expired -
   34788:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   3478a:	6a62      	ldr	r2, [r4, #36]	; 0x24
			uint8_t next_force = (ticker_next->force > ticker->force);
   3478c:	f894 c003 	ldrb.w	ip, [r4, #3]
					   ticks_expired -
   34790:	ebaa 0003 	sub.w	r0, sl, r3
   34794:	9b03      	ldr	r3, [sp, #12]
   34796:	695b      	ldr	r3, [r3, #20]
   34798:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
   3479a:	6923      	ldr	r3, [r4, #16]
			ticks_at_expire = (instance->ticks_current +
   3479c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   347a0:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
   347a4:	e9cd c300 	strd	ip, r3, [sp]
   347a8:	4673      	mov	r3, lr
   347aa:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   347ac:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
   347ae:	f8a4 901e 	strh.w	r9, [r4, #30]
					slot_reserved = 1U;
   347b2:	2b00      	cmp	r3, #0
   347b4:	9b02      	ldr	r3, [sp, #8]
				ticker->force = 0U;
   347b6:	f884 9003 	strb.w	r9, [r4, #3]
					slot_reserved = 1U;
   347ba:	bf18      	it	ne
   347bc:	2301      	movne	r3, #1
   347be:	9302      	str	r3, [sp, #8]
   347c0:	e78e      	b.n	346e0 <ticker_worker+0xd0>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   347c2:	2eff      	cmp	r6, #255	; 0xff
   347c4:	d0b7      	beq.n	34736 <ticker_worker+0x126>
		int32_t lazy_current = ticker->lazy_current;
   347c6:	8be0      	ldrh	r0, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   347c8:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   347ca:	f8d4 e004 	ldr.w	lr, [r4, #4]
		if (lazy_current >= ticker->lazy_periodic) {
   347ce:	4298      	cmp	r0, r3
		int32_t lazy_current = ticker->lazy_current;
   347d0:	4605      	mov	r5, r0
			lazy_current -= ticker->lazy_periodic;
   347d2:	bf28      	it	cs
   347d4:	1ac5      	subcs	r5, r0, r3
			struct ticker_node *ticker_next = &nodes[id_head];
   347d6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   347da:	eb08 1303 	add.w	r3, r8, r3, lsl #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   347de:	9307      	str	r3, [sp, #28]
   347e0:	6899      	ldr	r1, [r3, #8]
		uint32_t current_age = ticker->ticks_periodic +
   347e2:	fb05 e30e 	mla	r3, r5, lr, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   347e6:	458b      	cmp	fp, r1
		uint32_t current_age = ticker->ticks_periodic +
   347e8:	9306      	str	r3, [sp, #24]
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   347ea:	d3a4      	bcc.n	34736 <ticker_worker+0x126>
				(lazy_current - ticker->priority);
   347ec:	9b04      	ldr	r3, [sp, #16]
   347ee:	960c      	str	r6, [sp, #48]	; 0x30
   347f0:	1aed      	subs	r5, r5, r3
   347f2:	9508      	str	r5, [sp, #32]
   347f4:	e9cd 7a0a 	strd	r7, sl, [sp, #40]	; 0x28
   347f8:	e9dd a306 	ldrd	sl, r3, [sp, #24]
   347fc:	9e08      	ldr	r6, [sp, #32]
   347fe:	9209      	str	r2, [sp, #36]	; 0x24
   34800:	46a4      	mov	ip, r4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   34802:	460d      	mov	r5, r1
   34804:	900d      	str	r0, [sp, #52]	; 0x34
   34806:	4674      	mov	r4, lr
			if (ticker_next->ticks_slot == 0U) {
   34808:	699a      	ldr	r2, [r3, #24]
   3480a:	b322      	cbz	r2, 34856 <ticker_worker+0x246>
			int32_t lazy_next = ticker_next->lazy_current;
   3480c:	8bda      	ldrh	r2, [r3, #30]
				ticker_next->lazy_periodic > lazy_next;
   3480e:	8b98      	ldrh	r0, [r3, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   34810:	685f      	ldr	r7, [r3, #4]
			if (!lazy_next_periodic_skip) {
   34812:	4282      	cmp	r2, r0
			int32_t lazy_next = ticker_next->lazy_current;
   34814:	4696      	mov	lr, r2
				lazy_next -= ticker_next->lazy_periodic;
   34816:	bf28      	it	cs
   34818:	eba2 0e00 	subcs.w	lr, r2, r0
					  0U :
   3481c:	b39f      	cbz	r7, 34886 <ticker_worker+0x276>
   3481e:	1a79      	subs	r1, r7, r1
				(ticker->ticks_periodic == 0U) ||
   34820:	b11c      	cbz	r4, 3482a <ticker_worker+0x21a>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   34822:	fb07 110e 	mla	r1, r7, lr, r1
				(ticker->ticks_periodic == 0U) ||
   34826:	458a      	cmp	sl, r1
   34828:	d92f      	bls.n	3488a <ticker_worker+0x27a>
   3482a:	2101      	movs	r1, #1
					(ticker->ticks_periodic != 0U) &&
   3482c:	2700      	movs	r7, #0
			if (!lazy_next_periodic_skip &&
   3482e:	4282      	cmp	r2, r0
   34830:	d311      	bcc.n	34856 <ticker_worker+0x246>
   34832:	78d8      	ldrb	r0, [r3, #3]
   34834:	f89c 2003 	ldrb.w	r2, [ip, #3]
   34838:	4290      	cmp	r0, r2
   3483a:	d82d      	bhi.n	34898 <ticker_worker+0x288>
				ticker_next->priority;
   3483c:	f993 202d 	ldrsb.w	r2, [r3, #45]	; 0x2d
			    (next_force ||
   34840:	f112 0f80 	cmn.w	r2, #128	; 0x80
   34844:	d028      	beq.n	34898 <ticker_worker+0x288>
				(lazy_next - ticker_next->priority) >
   34846:	ebae 0e02 	sub.w	lr, lr, r2
			     next_is_critical ||
   3484a:	45b6      	cmp	lr, r6
   3484c:	dd00      	ble.n	34850 <ticker_worker+0x240>
			     (next_has_priority && !current_is_older) ||
   3484e:	b319      	cbz	r1, 34898 <ticker_worker+0x288>
   34850:	9904      	ldr	r1, [sp, #16]
   34852:	4291      	cmp	r1, r2
   34854:	d01e      	beq.n	34894 <ticker_worker+0x284>
			id_head = ticker_next->next;
   34856:	781b      	ldrb	r3, [r3, #0]
		while (id_head != TICKER_NULL) {
   34858:	2bff      	cmp	r3, #255	; 0xff
   3485a:	d007      	beq.n	3486c <ticker_worker+0x25c>
			struct ticker_node *ticker_next = &nodes[id_head];
   3485c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   34860:	eb08 1303 	add.w	r3, r8, r3, lsl #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   34864:	6899      	ldr	r1, [r3, #8]
   34866:	440d      	add	r5, r1
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   34868:	45ab      	cmp	fp, r5
   3486a:	d2cd      	bcs.n	34808 <ticker_worker+0x1f8>
   3486c:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
   34870:	9a09      	ldr	r2, [sp, #36]	; 0x24
   34872:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   34874:	4664      	mov	r4, ip
   34876:	e75e      	b.n	34736 <ticker_worker+0x126>
			    TICKER_RESCHEDULE_STATE_NONE &&
   34878:	8ba1      	ldrh	r1, [r4, #28]
   3487a:	4281      	cmp	r1, r0
   3487c:	f63f af16 	bhi.w	346ac <ticker_worker+0x9c>
				ext_data->reschedule_state =
   34880:	2101      	movs	r1, #1
   34882:	7219      	strb	r1, [r3, #8]
   34884:	e714      	b.n	346b0 <ticker_worker+0xa0>
					  0U :
   34886:	4639      	mov	r1, r7
   34888:	e7ca      	b.n	34820 <ticker_worker+0x210>
					(ticker->ticks_periodic != 0U) &&
   3488a:	bf34      	ite	cc
   3488c:	2701      	movcc	r7, #1
   3488e:	2700      	movcs	r7, #0
				(ticker->ticks_periodic == 0U) ||
   34890:	2100      	movs	r1, #0
   34892:	e7cc      	b.n	3482e <ticker_worker+0x21e>
			     (equal_priority && next_is_older))) {
   34894:	2f00      	cmp	r7, #0
   34896:	d0de      	beq.n	34856 <ticker_worker+0x246>
   34898:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
   3489c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3489e:	980d      	ldr	r0, [sp, #52]	; 0x34
   348a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   348a2:	4664      	mov	r4, ip
   348a4:	e6fa      	b.n	3469c <ticker_worker+0x8c>
	uint8_t slot_reserved = 0;
   348a6:	9502      	str	r5, [sp, #8]
   348a8:	e6d3      	b.n	34652 <ticker_worker+0x42>
		if (ticker->timeout_func) {
   348aa:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   348ac:	3a01      	subs	r2, #1
   348ae:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   348b0:	2d00      	cmp	r5, #0
   348b2:	f43f af15 	beq.w	346e0 <ticker_worker+0xd0>
			ticks_drift = 0U;
   348b6:	4619      	mov	r1, r3
					   ticks_expired -
   348b8:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   348ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
			uint8_t next_force = (ticker_next->force > ticker->force);
   348bc:	f894 c003 	ldrb.w	ip, [r4, #3]
					   ticks_expired -
   348c0:	ebaa 0003 	sub.w	r0, sl, r3
   348c4:	9b03      	ldr	r3, [sp, #12]
   348c6:	695b      	ldr	r3, [r3, #20]
   348c8:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   348ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   348ce:	6923      	ldr	r3, [r4, #16]
   348d0:	e74e      	b.n	34770 <ticker_worker+0x160>
   348d2:	bf00      	nop

000348d4 <ticker_job>:
	if (instance->worker_trigger) {
   348d4:	7fc3      	ldrb	r3, [r0, #31]
   348d6:	2b00      	cmp	r3, #0
   348d8:	f040 847a 	bne.w	351d0 <ticker_job+0x8fc>
{
   348dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   348e0:	7f84      	ldrb	r4, [r0, #30]
{
   348e2:	b08f      	sub	sp, #60	; 0x3c
   348e4:	4606      	mov	r6, r0
	if (instance->job_guard) {
   348e6:	2c00      	cmp	r4, #0
   348e8:	f040 8089 	bne.w	349fe <ticker_job+0x12a>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   348ec:	7a83      	ldrb	r3, [r0, #10]
   348ee:	7ac2      	ldrb	r2, [r0, #11]
	instance->job_guard = 1U;
   348f0:	2101      	movs	r1, #1
   348f2:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   348f4:	429a      	cmp	r2, r3
	ticks_previous = instance->ticks_current;
   348f6:	6941      	ldr	r1, [r0, #20]
   348f8:	9108      	str	r1, [sp, #32]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   348fa:	f000 846a 	beq.w	351d2 <ticker_job+0x8fe>
	uint8_t idx = *ticks_elapsed_index + 1;
   348fe:	3301      	adds	r3, #1
   34900:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   34902:	2b02      	cmp	r3, #2
		idx = 0U;
   34904:	bf08      	it	eq
   34906:	4623      	moveq	r3, r4
		ticks_elapsed =
   34908:	eb00 0283 	add.w	r2, r0, r3, lsl #2
	*ticks_elapsed_index = idx;
   3490c:	7283      	strb	r3, [r0, #10]
	ticker_id_old_head = instance->ticker_id_head;
   3490e:	7f43      	ldrb	r3, [r0, #29]
		ticks_elapsed =
   34910:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   34912:	930a      	str	r3, [sp, #40]	; 0x28
		instance->ticks_current += ticks_elapsed;
   34914:	9b08      	ldr	r3, [sp, #32]
	count_user = instance->count_user;
   34916:	f890 9009 	ldrb.w	r9, [r0, #9]
	users = &instance->users[0];
   3491a:	6845      	ldr	r5, [r0, #4]
		ticks_elapsed =
   3491c:	9204      	str	r2, [sp, #16]
		instance->ticks_current += ticks_elapsed;
   3491e:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   34920:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   34924:	6143      	str	r3, [r0, #20]
	node = &instance->nodes[0];
   34926:	6803      	ldr	r3, [r0, #0]
   34928:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   3492a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   3492e:	b2db      	uxtb	r3, r3
   34930:	f1b9 0f00 	cmp.w	r9, #0
   34934:	f000 81e0 	beq.w	34cf8 <ticker_job+0x424>
		flag_elapsed = 1U;
   34938:	2401      	movs	r4, #1
   3493a:	eb05 09c3 	add.w	r9, r5, r3, lsl #3
	pending = 0U;
   3493e:	2300      	movs	r3, #0
   34940:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
   34942:	23ff      	movs	r3, #255	; 0xff
   34944:	9303      	str	r3, [sp, #12]
   34946:	9507      	str	r5, [sp, #28]
   34948:	46ca      	mov	sl, r9
   3494a:	940d      	str	r4, [sp, #52]	; 0x34
   3494c:	9602      	str	r6, [sp, #8]
		user_ops = &user->user_op[0];
   3494e:	f8da b004 	ldr.w	fp, [sl, #4]
		while (user->middle != user->last) {
   34952:	f89a c003 	ldrb.w	ip, [sl, #3]
   34956:	f89a 7002 	ldrb.w	r7, [sl, #2]
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   3495a:	f04f 0900 	mov.w	r9, #0
		while (user->middle != user->last) {
   3495e:	4567      	cmp	r7, ip
   34960:	d045      	beq.n	349ee <ticker_job+0x11a>
			if (middle == user->count_user_op) {
   34962:	f89a 1000 	ldrb.w	r1, [sl]
			middle = user->middle + 1;
   34966:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
   34968:	b23a      	sxth	r2, r7
			middle = user->middle + 1;
   3496a:	b2db      	uxtb	r3, r3
				middle = 0U;
   3496c:	4299      	cmp	r1, r3
   3496e:	bf08      	it	eq
   34970:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   34972:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   34976:	eb02 0881 	add.w	r8, r2, r1, lsl #2
			user->middle = middle;
   3497a:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   3497e:	f81b 6028 	ldrb.w	r6, [fp, r8, lsl #2]
			user_op = &user_ops[user->middle];
   34982:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   34986:	2e04      	cmp	r6, #4
			ticker = &node[user_op->id];
   34988:	7851      	ldrb	r1, [r2, #1]
			user_op = &user_ops[user->middle];
   3498a:	9200      	str	r2, [sp, #0]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   3498c:	d941      	bls.n	34a12 <ticker_job+0x13e>
			ticker = &node[user_op->id];
   3498e:	9a01      	ldr	r2, [sp, #4]
   34990:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   34994:	eb02 1404 	add.w	r4, r2, r4, lsl #4
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   34998:	2e08      	cmp	r6, #8
			state = (ticker->req - ticker->ack) & 0xff;
   3499a:	7862      	ldrb	r2, [r4, #1]
   3499c:	78a0      	ldrb	r0, [r4, #2]
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   3499e:	d83a      	bhi.n	34a16 <ticker_job+0x142>
			state = (ticker->req - ticker->ack) & 0xff;
   349a0:	1a12      	subs	r2, r2, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   349a2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   349a6:	d036      	beq.n	34a16 <ticker_job+0x142>
			    (state == 0U) ||
   349a8:	2e05      	cmp	r6, #5
   349aa:	d05d      	beq.n	34a68 <ticker_job+0x194>
			if (state == 1U) {
   349ac:	2a01      	cmp	r2, #1
   349ae:	f040 8125 	bne.w	34bfc <ticker_job+0x328>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   349b2:	2e06      	cmp	r6, #6
   349b4:	d03f      	beq.n	34a36 <ticker_job+0x162>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   349b6:	9d02      	ldr	r5, [sp, #8]
   349b8:	4628      	mov	r0, r5
   349ba:	f7ff fccf 	bl	3435c <ticker_dequeue>
			ticker->req = ticker->ack;
   349be:	78a3      	ldrb	r3, [r4, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
   349c0:	60a0      	str	r0, [r4, #8]
			ticker->req = ticker->ack;
   349c2:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   349c4:	7f2b      	ldrb	r3, [r5, #28]
   349c6:	428b      	cmp	r3, r1
   349c8:	f000 80ff 	beq.w	34bca <ticker_job+0x2f6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   349cc:	f80b 9028 	strb.w	r9, [fp, r8, lsl #2]
	user_op->status = status;
   349d0:	9b00      	ldr	r3, [sp, #0]
   349d2:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
	if (user_op->fp_op_func) {
   349d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   349d8:	b11b      	cbz	r3, 349e2 <ticker_job+0x10e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   349da:	9a00      	ldr	r2, [sp, #0]
   349dc:	2000      	movs	r0, #0
   349de:	6b11      	ldr	r1, [r2, #48]	; 0x30
   349e0:	4798      	blx	r3
		while (user->middle != user->last) {
   349e2:	f89a c003 	ldrb.w	ip, [sl, #3]
   349e6:	f89a 7002 	ldrb.w	r7, [sl, #2]
   349ea:	4567      	cmp	r7, ip
   349ec:	d1b9      	bne.n	34962 <ticker_job+0x8e>
	while (count_user--) {
   349ee:	9a07      	ldr	r2, [sp, #28]
   349f0:	4552      	cmp	r2, sl
   349f2:	f1aa 0308 	sub.w	r3, sl, #8
   349f6:	f000 8111 	beq.w	34c1c <ticker_job+0x348>
   349fa:	469a      	mov	sl, r3
   349fc:	e7a7      	b.n	3494e <ticker_job+0x7a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
   349fe:	6a44      	ldr	r4, [r0, #36]	; 0x24
   34a00:	2104      	movs	r1, #4
   34a02:	4603      	mov	r3, r0
   34a04:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   34a06:	2004      	movs	r0, #4
   34a08:	46a4      	mov	ip, r4
}
   34a0a:	b00f      	add	sp, #60	; 0x3c
   34a0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   34a10:	4760      	bx	ip
   34a12:	461f      	mov	r7, r3
   34a14:	e7a3      	b.n	3495e <ticker_job+0x8a>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   34a16:	f80b 9028 	strb.w	r9, [fp, r8, lsl #2]
	user_op->status = status;
   34a1a:	9900      	ldr	r1, [sp, #0]
   34a1c:	2201      	movs	r2, #1
   34a1e:	628a      	str	r2, [r1, #40]	; 0x28
	if (user_op->fp_op_func) {
   34a20:	6aca      	ldr	r2, [r1, #44]	; 0x2c
   34a22:	2a00      	cmp	r2, #0
   34a24:	d0f5      	beq.n	34a12 <ticker_job+0x13e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   34a26:	6b09      	ldr	r1, [r1, #48]	; 0x30
   34a28:	2001      	movs	r0, #1
   34a2a:	4790      	blx	r2
		while (user->middle != user->last) {
   34a2c:	f89a c003 	ldrb.w	ip, [sl, #3]
   34a30:	f89a 7002 	ldrb.w	r7, [sl, #2]
   34a34:	e793      	b.n	3495e <ticker_job+0x8a>
		if (instance->ticker_id_slot_previous == user_op->id) {
   34a36:	9b02      	ldr	r3, [sp, #8]
   34a38:	7f1b      	ldrb	r3, [r3, #28]
   34a3a:	428b      	cmp	r3, r1
   34a3c:	d1c6      	bne.n	349cc <ticker_job+0xf8>
			instance->ticker_id_slot_previous = TICKER_NULL;
   34a3e:	9a02      	ldr	r2, [sp, #8]
   34a40:	23ff      	movs	r3, #255	; 0xff
   34a42:	7713      	strb	r3, [r2, #28]
				ticks_at_yield =
   34a44:	9b00      	ldr	r3, [sp, #0]
   34a46:	6858      	ldr	r0, [r3, #4]
			ticks_current = instance->ticks_current;
   34a48:	9b02      	ldr	r3, [sp, #8]
   34a4a:	695a      	ldr	r2, [r3, #20]
			if (!((ticks_at_yield - ticks_current) &
   34a4c:	1a83      	subs	r3, r0, r2
   34a4e:	021d      	lsls	r5, r3, #8
   34a50:	f100 80c4 	bmi.w	34bdc <ticker_job+0x308>
				ticks_used = ticks_elapsed +
   34a54:	9a04      	ldr	r2, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34a56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   34a5a:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   34a5c:	9902      	ldr	r1, [sp, #8]
   34a5e:	698a      	ldr	r2, [r1, #24]
   34a60:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   34a62:	bf88      	it	hi
   34a64:	618b      	strhi	r3, [r1, #24]
   34a66:	e7b1      	b.n	349cc <ticker_job+0xf8>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   34a68:	9d00      	ldr	r5, [sp, #0]
   34a6a:	6868      	ldr	r0, [r5, #4]
   34a6c:	b948      	cbnz	r0, 34a82 <ticker_job+0x1ae>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   34a6e:	68a8      	ldr	r0, [r5, #8]
   34a70:	b938      	cbnz	r0, 34a82 <ticker_job+0x1ae>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   34a72:	68e8      	ldr	r0, [r5, #12]
   34a74:	b928      	cbnz	r0, 34a82 <ticker_job+0x1ae>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   34a76:	6928      	ldr	r0, [r5, #16]
   34a78:	b918      	cbnz	r0, 34a82 <ticker_job+0x1ae>
			     (user_op->params.update.lazy == 0U) &&
   34a7a:	6968      	ldr	r0, [r5, #20]
   34a7c:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   34a80:	d0c9      	beq.n	34a16 <ticker_job+0x142>
			if (state == 1U) {
   34a82:	2a01      	cmp	r2, #1
   34a84:	f040 80ba 	bne.w	34bfc <ticker_job+0x328>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   34a88:	9d02      	ldr	r5, [sp, #8]
   34a8a:	4628      	mov	r0, r5
   34a8c:	f7ff fc66 	bl	3435c <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   34a90:	696d      	ldr	r5, [r5, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   34a92:	60a0      	str	r0, [r4, #8]
   34a94:	4606      	mov	r6, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   34a96:	9505      	str	r5, [sp, #20]
	ticks_now = cntr_cnt_get();
   34a98:	f00d ffbe 	bl	42a18 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   34a9c:	9b04      	ldr	r3, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34a9e:	1b42      	subs	r2, r0, r5
   34aa0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   34aa4:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   34aa6:	4296      	cmp	r6, r2
	ticks_now = cntr_cnt_get();
   34aa8:	4601      	mov	r1, r0
	if (ticks_to_expire > ticks_elapsed) {
   34aaa:	f240 80a0 	bls.w	34bee <ticker_job+0x31a>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   34aae:	6963      	ldr	r3, [r4, #20]
   34ab0:	9306      	str	r3, [sp, #24]
		ticks_to_expire -= ticks_elapsed;
   34ab2:	1ab0      	subs	r0, r6, r2
	if ((ticker->ticks_periodic != 0U) &&
   34ab4:	6867      	ldr	r7, [r4, #4]
   34ab6:	2f00      	cmp	r7, #0
   34ab8:	d057      	beq.n	34b6a <ticker_job+0x296>
	    (user_op->params.update.lazy != 0U)) {
   34aba:	9a00      	ldr	r2, [sp, #0]
   34abc:	8a96      	ldrh	r6, [r2, #20]
	if ((ticker->ticks_periodic != 0U) &&
   34abe:	2e00      	cmp	r6, #0
   34ac0:	d053      	beq.n	34b6a <ticker_job+0x296>
		user_op->params.update.lazy--;
   34ac2:	1e73      	subs	r3, r6, #1
   34ac4:	fa1f fe83 	uxth.w	lr, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   34ac8:	4287      	cmp	r7, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34aca:	8be3      	ldrh	r3, [r4, #30]
		user_op->params.update.lazy--;
   34acc:	f8a2 e014 	strh.w	lr, [r2, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   34ad0:	d221      	bcs.n	34b16 <ticker_job+0x242>
   34ad2:	e9cd b10b 	strd	fp, r1, [sp, #44]	; 0x2c
			ticks_to_expire += ticker->ticks_periodic +
   34ad6:	f107 0c01 	add.w	ip, r7, #1
   34ada:	e018      	b.n	34b0e <ticker_job+0x23a>
	if ((ticker->remainder_current >= BIT(31)) ||
   34adc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   34ade:	f8df b204 	ldr.w	fp, [pc, #516]	; 34ce4 <ticker_job+0x410>
   34ae2:	4981      	ldr	r1, [pc, #516]	; (34ce8 <ticker_job+0x414>)
   34ae4:	4493      	add	fp, r2
   34ae6:	458b      	cmp	fp, r1
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   34ae8:	bf84      	itt	hi
   34aea:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
   34aee:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
			ticks_to_expire += ticker->ticks_periodic +
   34af2:	4665      	mov	r5, ip
	ticker->remainder_current -= ticker->remainder_periodic;
   34af4:	6a21      	ldr	r1, [r4, #32]
   34af6:	bf94      	ite	ls
   34af8:	463d      	movls	r5, r7
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   34afa:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
			ticker->lazy_current--;
   34afe:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   34b00:	1b40      	subs	r0, r0, r5
	ticker->remainder_current -= ticker->remainder_periodic;
   34b02:	1a52      	subs	r2, r2, r1
			ticker->lazy_current--;
   34b04:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   34b06:	4287      	cmp	r7, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   34b08:	6262      	str	r2, [r4, #36]	; 0x24
			ticker->lazy_current--;
   34b0a:	83e3      	strh	r3, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   34b0c:	d201      	bcs.n	34b12 <ticker_job+0x23e>
   34b0e:	459e      	cmp	lr, r3
   34b10:	d3e4      	bcc.n	34adc <ticker_job+0x208>
   34b12:	e9dd b10b 	ldrd	fp, r1, [sp, #44]	; 0x2c
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34b16:	459e      	cmp	lr, r3
   34b18:	d925      	bls.n	34b66 <ticker_job+0x292>
   34b1a:	3301      	adds	r3, #1
	ticker->remainder_current += ticker->remainder_periodic;
   34b1c:	e9d4 c208 	ldrd	ip, r2, [r4, #32]
			ticks_to_expire += ticker->ticks_periodic +
   34b20:	e9cd b10b 	strd	fp, r1, [sp, #44]	; 0x2c
   34b24:	b29b      	uxth	r3, r3
   34b26:	1c7d      	adds	r5, r7, #1
   34b28:	e005      	b.n	34b36 <ticker_job+0x262>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34b2a:	3301      	adds	r3, #1
   34b2c:	b29b      	uxth	r3, r3
	if ((ticker->remainder_current < BIT(31)) &&
   34b2e:	46bb      	mov	fp, r7
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34b30:	429e      	cmp	r6, r3
			ticks_to_expire += ticker->ticks_periodic +
   34b32:	4458      	add	r0, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34b34:	d012      	beq.n	34b5c <ticker_job+0x288>
	if ((ticker->remainder_current < BIT(31)) &&
   34b36:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 34ce4 <ticker_job+0x410>
   34b3a:	496b      	ldr	r1, [pc, #428]	; (34ce8 <ticker_job+0x414>)
	ticker->remainder_current += ticker->remainder_periodic;
   34b3c:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
   34b3e:	4493      	add	fp, r2
   34b40:	458b      	cmp	fp, r1
   34b42:	d8f2      	bhi.n	34b2a <ticker_job+0x256>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34b44:	3301      	adds	r3, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34b46:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34b4a:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34b4c:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
			ticks_to_expire += ticker->ticks_periodic +
   34b50:	46ab      	mov	fp, r5
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34b52:	429e      	cmp	r6, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34b54:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   34b58:	4458      	add	r0, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34b5a:	d1ec      	bne.n	34b36 <ticker_job+0x262>
   34b5c:	e9dd b10b 	ldrd	fp, r1, [sp, #44]	; 0x2c
   34b60:	6262      	str	r2, [r4, #36]	; 0x24
   34b62:	f8a4 e01e 	strh.w	lr, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   34b66:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
   34b6a:	9a00      	ldr	r2, [sp, #0]
	struct ticker_ext *ext_data = ticker->ext_data;
   34b6c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
				  user_op->params.update.ticks_drift_plus;
   34b6e:	6853      	ldr	r3, [r2, #4]
	ticker->ticks_to_expire = ticks_to_expire +
   34b70:	4418      	add	r0, r3
   34b72:	60a0      	str	r0, [r4, #8]
				user_op->params.update.ticks_drift_minus;
   34b74:	6890      	ldr	r0, [r2, #8]
	ticker->ticks_to_expire_minus +=
   34b76:	9a06      	ldr	r2, [sp, #24]
   34b78:	4402      	add	r2, r0
   34b7a:	6162      	str	r2, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   34b7c:	b11e      	cbz	r6, 34b86 <ticker_job+0x2b2>
   34b7e:	6832      	ldr	r2, [r6, #0]
   34b80:	b10a      	cbz	r2, 34b86 <ticker_job+0x2b2>
			user_op->params.update.ticks_drift_plus -
   34b82:	1a1b      	subs	r3, r3, r0
		ext_data->ticks_drift =
   34b84:	6073      	str	r3, [r6, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   34b86:	460a      	mov	r2, r1
   34b88:	4620      	mov	r0, r4
   34b8a:	9905      	ldr	r1, [sp, #20]
   34b8c:	f7ff fc22 	bl	343d4 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   34b90:	9900      	ldr	r1, [sp, #0]
   34b92:	69a3      	ldr	r3, [r4, #24]
   34b94:	68ca      	ldr	r2, [r1, #12]
   34b96:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   34b98:	690a      	ldr	r2, [r1, #16]
   34b9a:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   34b9c:	bf8c      	ite	hi
   34b9e:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   34ba0:	2300      	movls	r3, #0
   34ba2:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
   34ba4:	9b00      	ldr	r3, [sp, #0]
   34ba6:	7d9b      	ldrb	r3, [r3, #22]
   34ba8:	b103      	cbz	r3, 34bac <ticker_job+0x2d8>
		ticker->force = user_op->params.update.force;
   34baa:	70e3      	strb	r3, [r4, #3]
	if (user_op->params.update.must_expire) {
   34bac:	9b00      	ldr	r3, [sp, #0]
   34bae:	7ddb      	ldrb	r3, [r3, #23]
   34bb0:	b113      	cbz	r3, 34bb8 <ticker_job+0x2e4>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   34bb2:	3b01      	subs	r3, #1
   34bb4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->next = *insert_head;
   34bb8:	9b03      	ldr	r3, [sp, #12]
   34bba:	7023      	strb	r3, [r4, #0]
	*insert_head = user_op->id;
   34bbc:	9a00      	ldr	r2, [sp, #0]
		ticker->req++;
   34bbe:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
   34bc0:	7852      	ldrb	r2, [r2, #1]
   34bc2:	9203      	str	r2, [sp, #12]
		ticker->req++;
   34bc4:	3301      	adds	r3, #1
   34bc6:	7063      	strb	r3, [r4, #1]
   34bc8:	e700      	b.n	349cc <ticker_job+0xf8>
			instance->ticker_id_slot_previous = TICKER_NULL;
   34bca:	9a02      	ldr	r2, [sp, #8]
   34bcc:	23ff      	movs	r3, #255	; 0xff
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   34bce:	2e08      	cmp	r6, #8
			instance->ticker_id_slot_previous = TICKER_NULL;
   34bd0:	7713      	strb	r3, [r2, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   34bd2:	f43f af37 	beq.w	34a44 <ticker_job+0x170>
				ticks_at_yield = cntr_cnt_get();
   34bd6:	f00d ff1f 	bl	42a18 <cntr_cnt_get>
   34bda:	e735      	b.n	34a48 <ticker_job+0x174>
				if (ticks_elapsed > ticks_used) {
   34bdc:	9b04      	ldr	r3, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34bde:	1a12      	subs	r2, r2, r0
   34be0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   34be4:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
   34be6:	bf34      	ite	cc
   34be8:	1a9b      	subcc	r3, r3, r2
					ticks_used = 0;
   34bea:	2300      	movcs	r3, #0
   34bec:	e736      	b.n	34a5c <ticker_job+0x188>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   34bee:	6963      	ldr	r3, [r4, #20]
   34bf0:	1b9b      	subs	r3, r3, r6
   34bf2:	4413      	add	r3, r2
   34bf4:	9306      	str	r3, [sp, #24]
   34bf6:	6163      	str	r3, [r4, #20]
		ticks_to_expire = 0U;
   34bf8:	2000      	movs	r0, #0
   34bfa:	e75b      	b.n	34ab4 <ticker_job+0x1e0>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   34bfc:	9b02      	ldr	r3, [sp, #8]
   34bfe:	2104      	movs	r1, #4
   34c00:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   34c02:	2201      	movs	r2, #1
   34c04:	4608      	mov	r0, r1
   34c06:	47a0      	blx	r4
	while (count_user--) {
   34c08:	9a07      	ldr	r2, [sp, #28]
				user->middle = prev;
   34c0a:	f88a 7002 	strb.w	r7, [sl, #2]
				pending = 1U;
   34c0e:	2301      	movs	r3, #1
	while (count_user--) {
   34c10:	4552      	cmp	r2, sl
				pending = 1U;
   34c12:	9309      	str	r3, [sp, #36]	; 0x24
	while (count_user--) {
   34c14:	f1aa 0308 	sub.w	r3, sl, #8
   34c18:	f47f aeef 	bne.w	349fa <ticker_job+0x126>
	if (instance->ticker_id_head != ticker_id_old_head) {
   34c1c:	9e02      	ldr	r6, [sp, #8]
   34c1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   34c20:	7f73      	ldrb	r3, [r6, #29]
   34c22:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   34c24:	ebb3 0902 	subs.w	r9, r3, r2
   34c28:	bf18      	it	ne
   34c2a:	f04f 0901 	movne.w	r9, #1
	if (flag_elapsed) {
   34c2e:	2c00      	cmp	r4, #0
   34c30:	d166      	bne.n	34d00 <ticker_job+0x42c>
		ticker_job_list_insert(instance, insert_head);
   34c32:	9903      	ldr	r1, [sp, #12]
   34c34:	4630      	mov	r0, r6
   34c36:	f7ff fbf1 	bl	3441c <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   34c3a:	7f73      	ldrb	r3, [r6, #29]
   34c3c:	9300      	str	r3, [sp, #0]
   34c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   34c40:	9a00      	ldr	r2, [sp, #0]
   34c42:	4293      	cmp	r3, r2
   34c44:	f000 8305 	beq.w	35252 <ticker_job+0x97e>
	if (!pending) {
   34c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
   34c4a:	2b00      	cmp	r3, #0
   34c4c:	f000 8232 	beq.w	350b4 <ticker_job+0x7e0>
	if (instance->ticker_id_head == TICKER_NULL) {
   34c50:	7f73      	ldrb	r3, [r6, #29]
   34c52:	9300      	str	r3, [sp, #0]
   34c54:	9b00      	ldr	r3, [sp, #0]
   34c56:	2bff      	cmp	r3, #255	; 0xff
   34c58:	f000 81d6 	beq.w	35008 <ticker_job+0x734>
	if (ticker_id_old_head == TICKER_NULL) {
   34c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   34c5e:	2bff      	cmp	r3, #255	; 0xff
   34c60:	f000 8330 	beq.w	352c4 <ticker_job+0x9f0>
	ticker = &instance->nodes[instance->ticker_id_head];
   34c64:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
   34c66:	6833      	ldr	r3, [r6, #0]
		LL_ASSERT(i);
   34c68:	f8df 9080 	ldr.w	r9, [pc, #128]	; 34cec <ticker_job+0x418>
   34c6c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 34cf0 <ticker_job+0x41c>
   34c70:	4f20      	ldr	r7, [pc, #128]	; (34cf4 <ticker_job+0x420>)
	ticker = &instance->nodes[instance->ticker_id_head];
   34c72:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   34c76:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   34c7a:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   34c7c:	f8d3 b008 	ldr.w	fp, [r3, #8]
		ctr = cntr_cnt_get();
   34c80:	f00d feca 	bl	42a18 <cntr_cnt_get>
		cc = instance->ticks_current;
   34c84:	6974      	ldr	r4, [r6, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34c86:	1b03      	subs	r3, r0, r4
   34c88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   34c8c:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   34c8e:	455b      	cmp	r3, fp
   34c90:	bf2c      	ite	cs
   34c92:	18e4      	addcs	r4, r4, r3
   34c94:	445c      	addcc	r4, fp
		cc &= HAL_TICKER_CNTR_MASK;
   34c96:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   34c9a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
		ctr = cntr_cnt_get();
   34c9c:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   34c9e:	4620      	mov	r0, r4
   34ca0:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   34ca2:	f00d feb9 	bl	42a18 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34ca6:	eba0 030a 	sub.w	r3, r0, sl
   34caa:	eba4 040a 	sub.w	r4, r4, sl
   34cae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   34cb2:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34cb4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
   34cb8:	42a3      	cmp	r3, r4
		i--;
   34cba:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
   34cbe:	f240 81aa 	bls.w	35016 <ticker_job+0x742>
		LL_ASSERT(i);
   34cc2:	2d00      	cmp	r5, #0
   34cc4:	d1dc      	bne.n	34c80 <ticker_job+0x3ac>
   34cc6:	f640 133e 	movw	r3, #2366	; 0x93e
   34cca:	464a      	mov	r2, r9
   34ccc:	4641      	mov	r1, r8
   34cce:	4638      	mov	r0, r7
   34cd0:	f014 fe93 	bl	499fa <printk>
   34cd4:	4040      	eors	r0, r0
   34cd6:	f380 8811 	msr	BASEPRI, r0
   34cda:	f04f 0003 	mov.w	r0, #3
   34cde:	df02      	svc	2
   34ce0:	e7ce      	b.n	34c80 <ticker_job+0x3ac>
   34ce2:	bf00      	nop
   34ce4:	ff172b5a 	.word	0xff172b5a
   34ce8:	7f172b59 	.word	0x7f172b59
   34cec:	00052a30 	.word	0x00052a30
   34cf0:	00052adc 	.word	0x00052adc
   34cf4:	00052a70 	.word	0x00052a70
	insert_head = TICKER_NULL;
   34cf8:	23ff      	movs	r3, #255	; 0xff
	pending = 0U;
   34cfa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
   34cfe:	9303      	str	r3, [sp, #12]
	ticks_now = cntr_cnt_get();
   34d00:	f00d fe8a 	bl	42a18 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34d04:	9b08      	ldr	r3, [sp, #32]
	while (instance->ticker_id_head != TICKER_NULL) {
   34d06:	f896 b01d 	ldrb.w	fp, [r6, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34d0a:	1ac3      	subs	r3, r0, r3
   34d0c:	f023 477f 	bic.w	r7, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   34d10:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	node = &instance->nodes[0];
   34d14:	6833      	ldr	r3, [r6, #0]
   34d16:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
   34d18:	d04c      	beq.n	34db4 <ticker_job+0x4e0>
   34d1a:	f8dd a010 	ldr.w	sl, [sp, #16]
			instance->ticks_slot_previous = 0U;
   34d1e:	f8cd 9014 	str.w	r9, [sp, #20]
   34d22:	463b      	mov	r3, r7
	ticks_expired = 0U;
   34d24:	f04f 0800 	mov.w	r8, #0
			instance->ticks_slot_previous = 0U;
   34d28:	4657      	mov	r7, sl
   34d2a:	469a      	mov	sl, r3
		ticker = &node[id_expired];
   34d2c:	9b00      	ldr	r3, [sp, #0]
   34d2e:	eb0b 054b 	add.w	r5, fp, fp, lsl #1
   34d32:	eb03 1405 	add.w	r4, r3, r5, lsl #4
   34d36:	012d      	lsls	r5, r5, #4
		ticks_to_expire = ticker->ticks_to_expire;
   34d38:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   34d3a:	42bb      	cmp	r3, r7
   34d3c:	f200 8298 	bhi.w	35270 <ticker_job+0x99c>
		if (instance->ticks_slot_previous > ticks_to_expire) {
   34d40:	69b2      	ldr	r2, [r6, #24]
		skip_collision = (ticker->lazy_current != 0U);
   34d42:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		instance->ticker_id_head = ticker->next;
   34d46:	f8dd 9000 	ldr.w	r9, [sp]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   34d4a:	4293      	cmp	r3, r2
			instance->ticks_slot_previous -= ticks_to_expire;
   34d4c:	bf38      	it	cc
   34d4e:	1ad2      	subcc	r2, r2, r3
		ticks_elapsed -= ticks_to_expire;
   34d50:	eba7 0703 	sub.w	r7, r7, r3
		ticks_expired += ticks_to_expire;
   34d54:	4498      	add	r8, r3
		ticks_latency -= ticks_to_expire;
   34d56:	ebaa 0a03 	sub.w	sl, sl, r3
			instance->ticks_slot_previous = 0U;
   34d5a:	bf22      	ittt	cs
   34d5c:	2200      	movcs	r2, #0
			instance->ticker_id_slot_previous = TICKER_NULL;
   34d5e:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   34d62:	7733      	strbcs	r3, [r6, #28]
			instance->ticks_slot_previous = 0U;
   34d64:	61b2      	str	r2, [r6, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   34d66:	78a3      	ldrb	r3, [r4, #2]
   34d68:	7862      	ldrb	r2, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   34d6a:	f8d4 c018 	ldr.w	ip, [r4, #24]
		if ((ticker->ticks_periodic != 0U) ||
   34d6e:	6861      	ldr	r1, [r4, #4]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   34d70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		instance->ticker_id_head = ticker->next;
   34d72:	f819 9005 	ldrb.w	r9, [r9, r5]
		state = (ticker->req - ticker->ack) & 0xff;
   34d76:	1ad2      	subs	r2, r2, r3
   34d78:	b2d2      	uxtb	r2, r2
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   34d7a:	f1bc 0f00 	cmp.w	ip, #0
   34d7e:	d002      	beq.n	34d86 <ticker_job+0x4b2>
   34d80:	2a02      	cmp	r2, #2
   34d82:	f000 809d 	beq.w	34ec0 <ticker_job+0x5ec>
		ticker->ticks_to_expire = 0U;
   34d86:	f04f 0c00 	mov.w	ip, #0
   34d8a:	f8c4 c008 	str.w	ip, [r4, #8]
		instance->ticker_id_head = ticker->next;
   34d8e:	f886 901d 	strb.w	r9, [r6, #29]
		if ((ticker->ticks_periodic != 0U) ||
   34d92:	2900      	cmp	r1, #0
   34d94:	d14d      	bne.n	34e32 <ticker_job+0x55e>
   34d96:	b110      	cbz	r0, 34d9e <ticker_job+0x4ca>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   34d98:	7a01      	ldrb	r1, [r0, #8]
   34d9a:	2901      	cmp	r1, #1
   34d9c:	d04d      	beq.n	34e3a <ticker_job+0x566>
			if (state && ((state == 1U) || skip_collision) &&
   34d9e:	2a00      	cmp	r2, #0
   34da0:	f040 80af 	bne.w	34f02 <ticker_job+0x62e>
			ticker->req = ticker->ack;
   34da4:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   34da6:	f896 b01d 	ldrb.w	fp, [r6, #29]
   34daa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   34dae:	d1bd      	bne.n	34d2c <ticker_job+0x458>
   34db0:	f8dd 9014 	ldr.w	r9, [sp, #20]
			flag_compare_update = 1U;
   34db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		ticker_job_list_insert(instance, insert_head);
   34db6:	9903      	ldr	r1, [sp, #12]
   34db8:	4630      	mov	r0, r6
			flag_compare_update = 1U;
   34dba:	459b      	cmp	fp, r3
   34dbc:	bf18      	it	ne
   34dbe:	f04f 0901 	movne.w	r9, #1
		ticker_job_list_insert(instance, insert_head);
   34dc2:	f7ff fb2b 	bl	3441c <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   34dc6:	7f73      	ldrb	r3, [r6, #29]
   34dc8:	9300      	str	r3, [sp, #0]
		while (ticker_id_head != TICKER_NULL) {
   34dca:	9a00      	ldr	r2, [sp, #0]
	nodes = &instance->nodes[0];
   34dcc:	f8d6 b000 	ldr.w	fp, [r6]
	while (rescheduling) {
   34dd0:	f8cd 9014 	str.w	r9, [sp, #20]
		while (ticker_id_head != TICKER_NULL) {
   34dd4:	2aff      	cmp	r2, #255	; 0xff
	uint8_t  rescheduled = 0U;
   34dd6:	f04f 0300 	mov.w	r3, #0
   34dda:	46b0      	mov	r8, r6
		while (ticker_id_head != TICKER_NULL) {
   34ddc:	f000 8101 	beq.w	34fe2 <ticker_job+0x70e>
   34de0:	4646      	mov	r6, r8
		rescheduled  = 1U;
   34de2:	9800      	ldr	r0, [sp, #0]
			ticker = &nodes[ticker_id_head];
   34de4:	b202      	sxth	r2, r0
   34de6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   34dea:	eb0b 1102 	add.w	r1, fp, r2, lsl #4
   34dee:	0112      	lsls	r2, r2, #4
			ext_data = ticker->ext_data;
   34df0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   34df2:	b11d      	cbz	r5, 34dfc <ticker_job+0x528>
   34df4:	7a2c      	ldrb	r4, [r5, #8]
   34df6:	2c01      	cmp	r4, #1
   34df8:	f000 8092 	beq.w	34f20 <ticker_job+0x64c>
			ticker_id_head = ticker->next;
   34dfc:	f81b 0002 	ldrb.w	r0, [fp, r2]
		while (ticker_id_head != TICKER_NULL) {
   34e00:	28ff      	cmp	r0, #255	; 0xff
   34e02:	d1ef      	bne.n	34de4 <ticker_job+0x510>
	return rescheduled;
   34e04:	f8dd 9014 	ldr.w	r9, [sp, #20]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   34e08:	2b00      	cmp	r3, #0
   34e0a:	f43f af18 	beq.w	34c3e <ticker_job+0x36a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   34e0e:	9a00      	ldr	r2, [sp, #0]
   34e10:	990a      	ldr	r1, [sp, #40]	; 0x28
   34e12:	428a      	cmp	r2, r1
   34e14:	f47f af18 	bne.w	34c48 <ticker_job+0x374>
	if (!pending) {
   34e18:	9a09      	ldr	r2, [sp, #36]	; 0x24
   34e1a:	2a00      	cmp	r2, #0
   34e1c:	f47f af22 	bne.w	34c64 <ticker_job+0x390>
	count_user = instance->count_user;
   34e20:	7a72      	ldrb	r2, [r6, #9]
	users = &instance->users[0];
   34e22:	6874      	ldr	r4, [r6, #4]
	while (count_user--) {
   34e24:	1e57      	subs	r7, r2, #1
   34e26:	b2ff      	uxtb	r7, r7
   34e28:	2a00      	cmp	r2, #0
   34e2a:	f43f af1b 	beq.w	34c64 <ticker_job+0x390>
			flag_compare_update = 1U;
   34e2e:	4699      	mov	r9, r3
   34e30:	e149      	b.n	350c6 <ticker_job+0x7f2>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   34e32:	b1a0      	cbz	r0, 34e5e <ticker_job+0x58a>
   34e34:	7a02      	ldrb	r2, [r0, #8]
   34e36:	2a01      	cmp	r2, #1
   34e38:	d111      	bne.n	34e5e <ticker_job+0x58a>
				ticker->req = ticker->ack;
   34e3a:	7063      	strb	r3, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
   34e3c:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   34e3e:	9b08      	ldr	r3, [sp, #32]
   34e40:	6971      	ldr	r1, [r6, #20]
   34e42:	eb03 0208 	add.w	r2, r3, r8
   34e46:	4620      	mov	r0, r4
   34e48:	f7ff fac4 	bl	343d4 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   34e4c:	9a00      	ldr	r2, [sp, #0]
   34e4e:	9b03      	ldr	r3, [sp, #12]
   34e50:	5553      	strb	r3, [r2, r5]
			ticker->req++;
   34e52:	7863      	ldrb	r3, [r4, #1]
   34e54:	f8cd b00c 	str.w	fp, [sp, #12]
   34e58:	3301      	adds	r3, #1
   34e5a:	b2db      	uxtb	r3, r3
   34e5c:	e7a2      	b.n	34da4 <ticker_job+0x4d0>
				if (!ticker->lazy_current) {
   34e5e:	f1be 0f00 	cmp.w	lr, #0
   34e62:	d14b      	bne.n	34efc <ticker_job+0x628>
					lazy_periodic = ticker->lazy_periodic;
   34e64:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
				while (count--) {
   34e68:	4670      	mov	r0, lr
	ticker->remainder_current += ticker->remainder_periodic;
   34e6a:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
   34e6e:	e9cd b401 	strd	fp, r4, [sp, #4]
				ticks_to_expire = 0U;
   34e72:	2200      	movs	r2, #0
   34e74:	f101 0901 	add.w	r9, r1, #1
   34e78:	e004      	b.n	34e84 <ticker_job+0x5b0>
				while (count--) {
   34e7a:	3801      	subs	r0, #1
	if ((ticker->remainder_current < BIT(31)) &&
   34e7c:	468b      	mov	fp, r1
				while (count--) {
   34e7e:	1c44      	adds	r4, r0, #1
					ticks_to_expire +=
   34e80:	445a      	add	r2, fp
				while (count--) {
   34e82:	d011      	beq.n	34ea8 <ticker_job+0x5d4>
	if ((ticker->remainder_current < BIT(31)) &&
   34e84:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 35140 <ticker_job+0x86c>
   34e88:	4cae      	ldr	r4, [pc, #696]	; (35144 <ticker_job+0x870>)
	ticker->remainder_current += ticker->remainder_periodic;
   34e8a:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   34e8c:	449b      	add	fp, r3
   34e8e:	45a3      	cmp	fp, r4
   34e90:	d8f3      	bhi.n	34e7a <ticker_job+0x5a6>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34e92:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   34e96:	3801      	subs	r0, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34e98:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
   34e9c:	46cb      	mov	fp, r9
				while (count--) {
   34e9e:	1c44      	adds	r4, r0, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34ea0:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
					ticks_to_expire +=
   34ea4:	445a      	add	r2, fp
				while (count--) {
   34ea6:	d1ed      	bne.n	34e84 <ticker_job+0x5b0>
   34ea8:	e9dd b401 	ldrd	fp, r4, [sp, #4]
				} else if (!ticker->must_expire) {
   34eac:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
   34eb0:	6263      	str	r3, [r4, #36]	; 0x24
   34eb2:	2800      	cmp	r0, #0
   34eb4:	f000 819b 	beq.w	351ee <ticker_job+0x91a>
				ticker->ticks_to_expire = ticks_to_expire;
   34eb8:	60a2      	str	r2, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   34eba:	f8a4 e01e 	strh.w	lr, [r4, #30]
   34ebe:	e7be      	b.n	34e3e <ticker_job+0x56a>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   34ec0:	f1be 0f00 	cmp.w	lr, #0
   34ec4:	d10f      	bne.n	34ee6 <ticker_job+0x612>
   34ec6:	b118      	cbz	r0, 34ed0 <ticker_job+0x5fc>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   34ec8:	7a02      	ldrb	r2, [r0, #8]
   34eca:	2a01      	cmp	r2, #1
   34ecc:	f000 81f5 	beq.w	352ba <ticker_job+0x9e6>
			instance->ticks_slot_previous = ticker->ticks_slot;
   34ed0:	f8c6 c018 	str.w	ip, [r6, #24]
			instance->ticker_id_slot_previous = id_expired;
   34ed4:	f886 b01c 	strb.w	fp, [r6, #28]
		ticker->ticks_to_expire = 0U;
   34ed8:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   34edc:	f886 901d 	strb.w	r9, [r6, #29]
		if ((ticker->ticks_periodic != 0U) ||
   34ee0:	2900      	cmp	r1, #0
   34ee2:	d1bf      	bne.n	34e64 <ticker_job+0x590>
   34ee4:	e75e      	b.n	34da4 <ticker_job+0x4d0>
		ticker->ticks_to_expire = 0U;
   34ee6:	2200      	movs	r2, #0
   34ee8:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
   34eea:	f886 901d 	strb.w	r9, [r6, #29]
		if ((ticker->ticks_periodic != 0U) ||
   34eee:	2900      	cmp	r1, #0
   34ef0:	f000 81c3 	beq.w	3527a <ticker_job+0x9a6>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   34ef4:	b110      	cbz	r0, 34efc <ticker_job+0x628>
   34ef6:	7a02      	ldrb	r2, [r0, #8]
   34ef8:	2a01      	cmp	r2, #1
   34efa:	d09e      	beq.n	34e3a <ticker_job+0x566>
					ticker->req = ticker->ack;
   34efc:	7063      	strb	r3, [r4, #1]
				while (count--) {
   34efe:	2000      	movs	r0, #0
   34f00:	e7b3      	b.n	34e6a <ticker_job+0x596>
			if (state && ((state == 1U) || skip_collision) &&
   34f02:	2a01      	cmp	r2, #1
   34f04:	d003      	beq.n	34f0e <ticker_job+0x63a>
   34f06:	f1be 0f00 	cmp.w	lr, #0
   34f0a:	f43f af4b 	beq.w	34da4 <ticker_job+0x4d0>
			    ticker->fp_op_func) {
   34f0e:	6a22      	ldr	r2, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   34f10:	2a00      	cmp	r2, #0
   34f12:	f43f af47 	beq.w	34da4 <ticker_job+0x4d0>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   34f16:	6a61      	ldr	r1, [r4, #36]	; 0x24
   34f18:	2001      	movs	r0, #1
   34f1a:	4790      	blx	r2
			ticker->req = ticker->ack;
   34f1c:	78a3      	ldrb	r3, [r4, #2]
   34f1e:	e741      	b.n	34da4 <ticker_job+0x4d0>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   34f20:	7f33      	ldrb	r3, [r6, #28]
   34f22:	2bff      	cmp	r3, #255	; 0xff
   34f24:	4691      	mov	r9, r2
   34f26:	f000 8081 	beq.w	3502c <ticker_job+0x758>
			instance->ticks_slot_previous > ticks_elapsed) {
   34f2a:	69b3      	ldr	r3, [r6, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   34f2c:	9a04      	ldr	r2, [sp, #16]
   34f2e:	4293      	cmp	r3, r2
   34f30:	d97c      	bls.n	3502c <ticker_job+0x758>
			window_start_ticks = instance->ticks_slot_previous -
   34f32:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   34f36:	686a      	ldr	r2, [r5, #4]
		ticker->ext_data->ticks_drift += ticks_to_expire -
   34f38:	688b      	ldr	r3, [r1, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   34f3a:	f81b 4009 	ldrb.w	r4, [fp, r9]
		ticker->ext_data->ticks_drift += ticks_to_expire -
   34f3e:	1ad3      	subs	r3, r2, r3
   34f40:	9301      	str	r3, [sp, #4]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   34f42:	682b      	ldr	r3, [r5, #0]
   34f44:	429a      	cmp	r2, r3
   34f46:	d374      	bcc.n	35032 <ticker_job+0x75e>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   34f48:	9b01      	ldr	r3, [sp, #4]
   34f4a:	606b      	str	r3, [r5, #4]
		while (ticker_id_iter != TICKER_NULL) {
   34f4c:	2cff      	cmp	r4, #255	; 0xff
		ticker->ticks_to_expire = ticks_to_expire;
   34f4e:	f04f 0300 	mov.w	r3, #0
   34f52:	608b      	str	r3, [r1, #8]
		while (ticker_id_iter != TICKER_NULL) {
   34f54:	d10d      	bne.n	34f72 <ticker_job+0x69e>
		ticker->lazy_current--;
   34f56:	8bcb      	ldrh	r3, [r1, #30]
   34f58:	3b01      	subs	r3, #1
   34f5a:	83cb      	strh	r3, [r1, #30]
		ext_data->reschedule_state =
   34f5c:	f04f 0302 	mov.w	r3, #2
   34f60:	722b      	strb	r3, [r5, #8]
		rescheduled  = 1U;
   34f62:	2301      	movs	r3, #1
   34f64:	e73d      	b.n	34de2 <ticker_job+0x50e>
   34f66:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
		ticker->ext_data->ticks_drift += ticks_to_expire -
   34f6a:	9a01      	ldr	r2, [sp, #4]
   34f6c:	441a      	add	r2, r3
   34f6e:	606a      	str	r2, [r5, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   34f70:	608b      	str	r3, [r1, #8]
		ticker_id_prev = TICKER_NULL;
   34f72:	f04f 0cff 	mov.w	ip, #255	; 0xff
   34f76:	46a0      	mov	r8, r4
   34f78:	e008      	b.n	34f8c <ticker_job+0x6b8>
				ticker->ticks_to_expire -=
   34f7a:	1bdb      	subs	r3, r3, r7
   34f7c:	608b      	str	r3, [r1, #8]
			ticker_id_iter = node->next;
   34f7e:	f81b 2002 	ldrb.w	r2, [fp, r2]
		while (ticker_id_iter != TICKER_NULL) {
   34f82:	2aff      	cmp	r2, #255	; 0xff
   34f84:	46c4      	mov	ip, r8
   34f86:	f000 8093 	beq.w	350b0 <ticker_job+0x7dc>
			ticker_id_iter = node->next;
   34f8a:	4690      	mov	r8, r2
			node = &nodes[ticker_id_iter];
   34f8c:	fa0f f288 	sxth.w	r2, r8
   34f90:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   34f94:	eb0b 1e02 	add.w	lr, fp, r2, lsl #4
   34f98:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   34f9a:	f8de 7008 	ldr.w	r7, [lr, #8]
   34f9e:	429f      	cmp	r7, r3
   34fa0:	d3eb      	bcc.n	34f7a <ticker_job+0x6a6>
				node->ticks_to_expire -=
   34fa2:	1afb      	subs	r3, r7, r3
   34fa4:	f8ce 3008 	str.w	r3, [lr, #8]
				break;
   34fa8:	4667      	mov	r7, ip
		if (ticker_id_prev != TICKER_NULL) {
   34faa:	2fff      	cmp	r7, #255	; 0xff
   34fac:	d0d3      	beq.n	34f56 <ticker_job+0x682>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   34fae:	46b0      	mov	r8, r6
   34fb0:	b23e      	sxth	r6, r7
   34fb2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   34fb6:	0133      	lsls	r3, r6, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   34fb8:	f888 401d 	strb.w	r4, [r8, #29]
		ticker_id_iter = nodes[ticker_id_head].next;
   34fbc:	9400      	str	r4, [sp, #0]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   34fbe:	f81b 4003 	ldrb.w	r4, [fp, r3]
   34fc2:	f80b 4009 	strb.w	r4, [fp, r9]
			nodes[ticker_id_prev].next = ticker_id_head;
   34fc6:	f80b 0003 	strb.w	r0, [fp, r3]
		ticker->lazy_current--;
   34fca:	8bc8      	ldrh	r0, [r1, #30]
		ext_data->reschedule_state =
   34fcc:	f04f 0202 	mov.w	r2, #2
		ticker->lazy_current--;
   34fd0:	3801      	subs	r0, #1
   34fd2:	83c8      	strh	r0, [r1, #30]
		ext_data->reschedule_state =
   34fd4:	722a      	strb	r2, [r5, #8]
		while (ticker_id_head != TICKER_NULL) {
   34fd6:	9a00      	ldr	r2, [sp, #0]
   34fd8:	2aff      	cmp	r2, #255	; 0xff
		rescheduled  = 1U;
   34fda:	f04f 0301 	mov.w	r3, #1
		while (ticker_id_head != TICKER_NULL) {
   34fde:	f47f aeff 	bne.w	34de0 <ticker_job+0x50c>
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   34fe2:	f8dd 9014 	ldr.w	r9, [sp, #20]
   34fe6:	4646      	mov	r6, r8
   34fe8:	2b00      	cmp	r3, #0
   34fea:	f43f ae28 	beq.w	34c3e <ticker_job+0x36a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   34fee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   34ff0:	2aff      	cmp	r2, #255	; 0xff
   34ff2:	f000 814e 	beq.w	35292 <ticker_job+0x9be>
	if (!pending) {
   34ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   34ff8:	2b00      	cmp	r3, #0
   34ffa:	d05b      	beq.n	350b4 <ticker_job+0x7e0>
	if (instance->ticker_id_head == TICKER_NULL) {
   34ffc:	f898 301d 	ldrb.w	r3, [r8, #29]
   35000:	9300      	str	r3, [sp, #0]
   35002:	2bff      	cmp	r3, #255	; 0xff
   35004:	f47f ae2e 	bne.w	34c64 <ticker_job+0x390>
		if (cntr_stop() == 0) {
   35008:	f00d fce0 	bl	429cc <cntr_stop>
   3500c:	b918      	cbnz	r0, 35016 <ticker_job+0x742>
			instance->ticks_slot_previous = 0U;
   3500e:	61b0      	str	r0, [r6, #24]
			instance->ticks_current = cntr_cnt_get();
   35010:	f00d fd02 	bl	42a18 <cntr_cnt_get>
   35014:	6170      	str	r0, [r6, #20]
	if (instance->worker_trigger) {
   35016:	7ff3      	ldrb	r3, [r6, #31]
	instance->job_guard = 0U;
   35018:	2200      	movs	r2, #0
   3501a:	77b2      	strb	r2, [r6, #30]
	if (instance->worker_trigger) {
   3501c:	2b00      	cmp	r3, #0
   3501e:	f000 80d4 	beq.w	351ca <ticker_job+0x8f6>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   35022:	6a74      	ldr	r4, [r6, #36]	; 0x24
   35024:	4633      	mov	r3, r6
   35026:	2201      	movs	r2, #1
   35028:	2103      	movs	r1, #3
   3502a:	e4ec      	b.n	34a06 <ticker_job+0x132>
		window_start_ticks = 0U;
   3502c:	f04f 0c00 	mov.w	ip, #0
   35030:	e781      	b.n	34f36 <ticker_job+0x662>
		while (ticker_id_iter != TICKER_NULL &&
   35032:	2cff      	cmp	r4, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   35034:	eba3 0802 	sub.w	r8, r3, r2
		while (ticker_id_iter != TICKER_NULL &&
   35038:	f000 813a 	beq.w	352b0 <ticker_job+0x9dc>
		       ticks_start_offset + ticker->ticks_slot <=
   3503c:	f8d1 e018 	ldr.w	lr, [r1, #24]
		while (ticker_id_iter != TICKER_NULL &&
   35040:	45f0      	cmp	r8, lr
   35042:	f0c0 8135 	bcc.w	352b0 <ticker_job+0x9dc>
   35046:	2300      	movs	r3, #0
   35048:	e9cd 1502 	strd	r1, r5, [sp, #8]
		       ticks_start_offset + ticker->ticks_slot <=
   3504c:	46f2      	mov	sl, lr
		ticker_id_iter = nodes[ticker_id_head].next;
   3504e:	4622      	mov	r2, r4
		while (ticker_id_iter != TICKER_NULL &&
   35050:	461f      	mov	r7, r3
   35052:	e01f      	b.n	35094 <ticker_job+0x7c0>
			if (node->ticks_to_expire >
   35054:	68a9      	ldr	r1, [r5, #8]
					MIN(ticks_slot_window,
   35056:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
   35058:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
   3505a:	443b      	add	r3, r7
			if (node->ticks_to_expire >
   3505c:	d90a      	bls.n	35074 <ticker_job+0x7a0>
				window_end_ticks =
   3505e:	4543      	cmp	r3, r8
   35060:	bf28      	it	cs
   35062:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
   35064:	4553      	cmp	r3, sl
   35066:	d905      	bls.n	35074 <ticker_job+0x7a0>
			if (ticks_to_expire != 0U &&
   35068:	ebb3 030e 	subs.w	r3, r3, lr
   3506c:	d002      	beq.n	35074 <ticker_job+0x7a0>
   3506e:	4563      	cmp	r3, ip
   35070:	f4bf af79 	bcs.w	34f66 <ticker_job+0x692>
			window_start_ticks  = node->ticks_to_expire +
   35074:	69ab      	ldr	r3, [r5, #24]
			ticker_id_iter = node->next;
   35076:	f81b 2002 	ldrb.w	r2, [fp, r2]
			window_start_ticks  = node->ticks_to_expire +
   3507a:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
   3507e:	440f      	add	r7, r1
			ticks_to_expire     = ticks_slot_window -
   35080:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
   35084:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   35086:	eb07 0a0e 	add.w	sl, r7, lr
		while (ticker_id_iter != TICKER_NULL &&
   3508a:	f43f af6c 	beq.w	34f66 <ticker_job+0x692>
   3508e:	45d0      	cmp	r8, sl
   35090:	f4ff af69 	bcc.w	34f66 <ticker_job+0x692>
			node = &nodes[ticker_id_iter];
   35094:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   35098:	eb0b 1502 	add.w	r5, fp, r2, lsl #4
   3509c:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   3509e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   350a0:	2900      	cmp	r1, #0
   350a2:	d0d7      	beq.n	35054 <ticker_job+0x780>
   350a4:	7a09      	ldrb	r1, [r1, #8]
   350a6:	2901      	cmp	r1, #1
   350a8:	d1d4      	bne.n	35054 <ticker_job+0x780>
				ticker_id_iter = node->next;
   350aa:	f81b 2002 	ldrb.w	r2, [fp, r2]
				continue;
   350ae:	e7e9      	b.n	35084 <ticker_job+0x7b0>
   350b0:	4647      	mov	r7, r8
   350b2:	e77a      	b.n	34faa <ticker_job+0x6d6>
	count_user = instance->count_user;
   350b4:	7a73      	ldrb	r3, [r6, #9]
	users = &instance->users[0];
   350b6:	6874      	ldr	r4, [r6, #4]
	while (count_user--) {
   350b8:	1e5f      	subs	r7, r3, #1
   350ba:	b2ff      	uxtb	r7, r7
		flag_compare_update = 1U;
   350bc:	f04f 0901 	mov.w	r9, #1
	while (count_user--) {
   350c0:	2b00      	cmp	r3, #0
   350c2:	f43f adc5 	beq.w	34c50 <ticker_job+0x37c>
   350c6:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
   350ca:	f04f 0a00 	mov.w	sl, #0
   350ce:	9400      	str	r4, [sp, #0]
   350d0:	46b0      	mov	r8, r6
		while (user->first != user->last) {
   350d2:	787b      	ldrb	r3, [r7, #1]
   350d4:	78fa      	ldrb	r2, [r7, #3]
		user_op = &user->user_op[0];
   350d6:	687e      	ldr	r6, [r7, #4]
		while (user->first != user->last) {
   350d8:	429a      	cmp	r2, r3
   350da:	d10c      	bne.n	350f6 <ticker_job+0x822>
   350dc:	e069      	b.n	351b2 <ticker_job+0x8de>
	switch (uop->op) {
   350de:	2b01      	cmp	r3, #1
   350e0:	d061      	beq.n	351a6 <ticker_job+0x8d2>
			first = user->first + 1;
   350e2:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
   350e4:	7839      	ldrb	r1, [r7, #0]
			first = user->first + 1;
   350e6:	3301      	adds	r3, #1
   350e8:	b2db      	uxtb	r3, r3
				first = 0U;
   350ea:	4299      	cmp	r1, r3
   350ec:	bf08      	it	eq
   350ee:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   350f0:	429a      	cmp	r2, r3
			user->first = first;
   350f2:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
   350f4:	d05d      	beq.n	351b2 <ticker_job+0x8de>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   350f6:	b21b      	sxth	r3, r3
   350f8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   350fc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   35100:	eb06 0083 	add.w	r0, r6, r3, lsl #2
	switch (uop->op) {
   35104:	f816 3023 	ldrb.w	r3, [r6, r3, lsl #2]
   35108:	2b02      	cmp	r3, #2
   3510a:	d01d      	beq.n	35148 <ticker_job+0x874>
   3510c:	2b03      	cmp	r3, #3
   3510e:	d1e6      	bne.n	350de <ticker_job+0x80a>
		if (uop->id < instance->count_node) {
   35110:	7843      	ldrb	r3, [r0, #1]
   35112:	f898 2008 	ldrb.w	r2, [r8, #8]
   35116:	429a      	cmp	r2, r3
   35118:	d949      	bls.n	351ae <ticker_job+0x8da>
			node[uop->id].priority =
   3511a:	f8d8 2000 	ldr.w	r2, [r8]
   3511e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   35122:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   35126:	7903      	ldrb	r3, [r0, #4]
   35128:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   3512c:	2200      	movs	r2, #0
		fp_op_func = uop->fp_op_func;
   3512e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
			uop->status = TICKER_STATUS_SUCCESS;
   35130:	6282      	str	r2, [r0, #40]	; 0x28
	if (fp_op_func) {
   35132:	b113      	cbz	r3, 3513a <ticker_job+0x866>
		fp_op_func(uop->status, uop->op_context);
   35134:	6b01      	ldr	r1, [r0, #48]	; 0x30
   35136:	6a80      	ldr	r0, [r0, #40]	; 0x28
   35138:	4798      	blx	r3
   3513a:	78fa      	ldrb	r2, [r7, #3]
   3513c:	e7d1      	b.n	350e2 <ticker_job+0x80e>
   3513e:	bf00      	nop
   35140:	ff172b5a 	.word	0xff172b5a
   35144:	7f172b59 	.word	0x7f172b59
		ticker_by_next_slot_get(instance,
   35148:	e9d0 e401 	ldrd	lr, r4, [r0, #4]
	_ticker_id_head = *ticker_id_head;
   3514c:	f89e 2000 	ldrb.w	r2, [lr]
		ticker_by_next_slot_get(instance,
   35150:	f8d0 c00c 	ldr.w	ip, [r0, #12]
	node = instance->nodes;
   35154:	f8d8 5000 	ldr.w	r5, [r8]
	_ticks_to_expire = *ticks_to_expire;
   35158:	f8dc 1000 	ldr.w	r1, [ip]
	    (*ticks_current != instance->ticks_current)) {
   3515c:	f8d8 3014 	ldr.w	r3, [r8, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   35160:	2aff      	cmp	r2, #255	; 0xff
   35162:	d003      	beq.n	3516c <ticker_job+0x898>
   35164:	f8d4 b000 	ldr.w	fp, [r4]
   35168:	459b      	cmp	fp, r3
   3516a:	d029      	beq.n	351c0 <ticker_job+0x8ec>
		_ticker_id_head = instance->ticker_id_head;
   3516c:	f898 201d 	ldrb.w	r2, [r8, #29]
		*ticks_current = instance->ticks_current;
   35170:	6023      	str	r3, [r4, #0]
		_ticks_to_expire = 0U;
   35172:	2100      	movs	r1, #0
	while (_ticker_id_head != TICKER_NULL) {
   35174:	2aff      	cmp	r2, #255	; 0xff
   35176:	d106      	bne.n	35186 <ticker_job+0x8b2>
   35178:	e011      	b.n	3519e <ticker_job+0x8ca>
		_ticker_id_head = ticker->next;
   3517a:	5cea      	ldrb	r2, [r5, r3]
		_ticks_to_expire += ticker->ticks_to_expire;
   3517c:	f8db 4008 	ldr.w	r4, [fp, #8]
	while (_ticker_id_head != TICKER_NULL) {
   35180:	2aff      	cmp	r2, #255	; 0xff
		_ticks_to_expire += ticker->ticks_to_expire;
   35182:	4421      	add	r1, r4
	while (_ticker_id_head != TICKER_NULL) {
   35184:	d00b      	beq.n	3519e <ticker_job+0x8ca>
		ticker = &node[_ticker_id_head];
   35186:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   3518a:	eb05 1b03 	add.w	fp, r5, r3, lsl #4
   3518e:	011b      	lsls	r3, r3, #4
			if (ticker->ticks_slot) {
   35190:	f8db 4018 	ldr.w	r4, [fp, #24]
   35194:	2c00      	cmp	r4, #0
   35196:	d0f0      	beq.n	3517a <ticker_job+0x8a6>
		_ticks_to_expire += ticker->ticks_to_expire;
   35198:	f8db 3008 	ldr.w	r3, [fp, #8]
   3519c:	4419      	add	r1, r3
	*ticker_id_head = _ticker_id_head;
   3519e:	f88e 2000 	strb.w	r2, [lr]
	*ticks_to_expire = _ticks_to_expire;
   351a2:	f8cc 1000 	str.w	r1, [ip]
		fp_op_func = uop->fp_op_func;
   351a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   351a8:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
		break;
   351ac:	e7c1      	b.n	35132 <ticker_job+0x85e>
   351ae:	2201      	movs	r2, #1
   351b0:	e7bd      	b.n	3512e <ticker_job+0x85a>
	while (count_user--) {
   351b2:	9a00      	ldr	r2, [sp, #0]
   351b4:	4297      	cmp	r7, r2
   351b6:	f1a7 0308 	sub.w	r3, r7, #8
   351ba:	d044      	beq.n	35246 <ticker_job+0x972>
   351bc:	461f      	mov	r7, r3
   351be:	e788      	b.n	350d2 <ticker_job+0x7fe>
		ticker = &node[_ticker_id_head];
   351c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   351c4:	0113      	lsls	r3, r2, #4
		_ticker_id_head = ticker->next;
   351c6:	5cea      	ldrb	r2, [r5, r3]
   351c8:	e7d4      	b.n	35174 <ticker_job+0x8a0>
}
   351ca:	b00f      	add	sp, #60	; 0x3c
   351cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   351d0:	4770      	bx	lr
	ticker_id_old_head = instance->ticker_id_head;
   351d2:	7f43      	ldrb	r3, [r0, #29]
	count_user = instance->count_user;
   351d4:	7a42      	ldrb	r2, [r0, #9]
	ticker_id_old_head = instance->ticker_id_head;
   351d6:	930a      	str	r3, [sp, #40]	; 0x28
	node = &instance->nodes[0];
   351d8:	6803      	ldr	r3, [r0, #0]
   351da:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   351dc:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
   351de:	6845      	ldr	r5, [r0, #4]
	count_user = instance->count_user;
   351e0:	9209      	str	r2, [sp, #36]	; 0x24
	while (count_user--) {
   351e2:	b2db      	uxtb	r3, r3
   351e4:	2a00      	cmp	r2, #0
   351e6:	d079      	beq.n	352dc <ticker_job+0xa08>
		ticks_elapsed = 0U;
   351e8:	9404      	str	r4, [sp, #16]
   351ea:	f7ff bba6 	b.w	3493a <ticker_job+0x66>
					while (ticks_to_expire <
   351ee:	4592      	cmp	sl, r2
   351f0:	f67f ae62 	bls.w	34eb8 <ticker_job+0x5e4>
				lazy = 0U;
   351f4:	9001      	str	r0, [sp, #4]
   351f6:	1c48      	adds	r0, r1, #1
   351f8:	9002      	str	r0, [sp, #8]
   351fa:	e9cd b406 	strd	fp, r4, [sp, #24]
	if ((ticker->remainder_current < BIT(31)) &&
   351fe:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 352e4 <ticker_job+0xa10>
   35202:	e9dd 0401 	ldrd	r0, r4, [sp, #4]
   35206:	e005      	b.n	35214 <ticker_job+0x940>
   35208:	468b      	mov	fp, r1
						ticks_to_expire +=
   3520a:	445a      	add	r2, fp
						lazy++;
   3520c:	3001      	adds	r0, #1
					while (ticks_to_expire <
   3520e:	4592      	cmp	sl, r2
						lazy++;
   35210:	b280      	uxth	r0, r0
					while (ticks_to_expire <
   35212:	d911      	bls.n	35238 <ticker_job+0x964>
	if ((ticker->remainder_current < BIT(31)) &&
   35214:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 352e8 <ticker_job+0xa14>
	ticker->remainder_current += ticker->remainder_periodic;
   35218:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   3521a:	449b      	add	fp, r3
   3521c:	45cb      	cmp	fp, r9
   3521e:	d8f3      	bhi.n	35208 <ticker_job+0x934>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   35220:	46a3      	mov	fp, r4
   35222:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   35226:	445a      	add	r2, fp
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   35228:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   3522c:	3001      	adds	r0, #1
					while (ticks_to_expire <
   3522e:	4592      	cmp	sl, r2
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   35230:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   35234:	b280      	uxth	r0, r0
					while (ticks_to_expire <
   35236:	d8ed      	bhi.n	35214 <ticker_job+0x940>
				ticker->lazy_current += (lazy_periodic + lazy);
   35238:	e9dd b406 	ldrd	fp, r4, [sp, #24]
   3523c:	4470      	add	r0, lr
   3523e:	6263      	str	r3, [r4, #36]	; 0x24
   35240:	fa1f fe80 	uxth.w	lr, r0
   35244:	e638      	b.n	34eb8 <ticker_job+0x5e4>
   35246:	4646      	mov	r6, r8
	if (flag_compare_update) {
   35248:	f1b9 0f00 	cmp.w	r9, #0
   3524c:	f43f aee3 	beq.w	35016 <ticker_job+0x742>
   35250:	e4fe      	b.n	34c50 <ticker_job+0x37c>
	if (!pending) {
   35252:	9b09      	ldr	r3, [sp, #36]	; 0x24
   35254:	2b00      	cmp	r3, #0
   35256:	d1f7      	bne.n	35248 <ticker_job+0x974>
	count_user = instance->count_user;
   35258:	7a73      	ldrb	r3, [r6, #9]
	users = &instance->users[0];
   3525a:	6874      	ldr	r4, [r6, #4]
	while (count_user--) {
   3525c:	1e5f      	subs	r7, r3, #1
   3525e:	b2ff      	uxtb	r7, r7
   35260:	2b00      	cmp	r3, #0
   35262:	f47f af30 	bne.w	350c6 <ticker_job+0x7f2>
	if (flag_compare_update) {
   35266:	f1b9 0f00 	cmp.w	r9, #0
   3526a:	f43f aed4 	beq.w	35016 <ticker_job+0x742>
   3526e:	e4ef      	b.n	34c50 <ticker_job+0x37c>
			ticker->ticks_to_expire -= ticks_elapsed;
   35270:	1bdb      	subs	r3, r3, r7
   35272:	f8dd 9014 	ldr.w	r9, [sp, #20]
   35276:	60a3      	str	r3, [r4, #8]
			break;
   35278:	e59c      	b.n	34db4 <ticker_job+0x4e0>
		if ((ticker->ticks_periodic != 0U) ||
   3527a:	2800      	cmp	r0, #0
   3527c:	f43f ae47 	beq.w	34f0e <ticker_job+0x63a>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   35280:	7a02      	ldrb	r2, [r0, #8]
   35282:	2a01      	cmp	r2, #1
   35284:	f43f add9 	beq.w	34e3a <ticker_job+0x566>
			if (state && ((state == 1U) || skip_collision) &&
   35288:	f1be 0f00 	cmp.w	lr, #0
   3528c:	f47f ae3f 	bne.w	34f0e <ticker_job+0x63a>
   35290:	e588      	b.n	34da4 <ticker_job+0x4d0>
	if (!pending) {
   35292:	9a09      	ldr	r2, [sp, #36]	; 0x24
   35294:	2a00      	cmp	r2, #0
   35296:	f47f aeb7 	bne.w	35008 <ticker_job+0x734>
	count_user = instance->count_user;
   3529a:	f898 2009 	ldrb.w	r2, [r8, #9]
	users = &instance->users[0];
   3529e:	f8d8 4004 	ldr.w	r4, [r8, #4]
	while (count_user--) {
   352a2:	1e57      	subs	r7, r2, #1
   352a4:	b2ff      	uxtb	r7, r7
   352a6:	2a00      	cmp	r2, #0
   352a8:	f43f aeae 	beq.w	35008 <ticker_job+0x734>
			flag_compare_update = 1U;
   352ac:	4699      	mov	r9, r3
   352ae:	e70a      	b.n	350c6 <ticker_job+0x7f2>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   352b0:	9b01      	ldr	r3, [sp, #4]
   352b2:	606b      	str	r3, [r5, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   352b4:	2300      	movs	r3, #0
   352b6:	608b      	str	r3, [r1, #8]
		while (ticker_id_iter != TICKER_NULL) {
   352b8:	e64d      	b.n	34f56 <ticker_job+0x682>
		ticker->ticks_to_expire = 0U;
   352ba:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   352be:	f886 901d 	strb.w	r9, [r6, #29]
		if ((ticker->ticks_periodic != 0U) ||
   352c2:	e5ba      	b.n	34e3a <ticker_job+0x566>
		ticks_current = cntr_cnt_get();
   352c4:	f00d fba8 	bl	42a18 <cntr_cnt_get>
   352c8:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   352ca:	f00d fb6f 	bl	429ac <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   352ce:	7f73      	ldrb	r3, [r6, #29]
   352d0:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
   352d2:	2800      	cmp	r0, #0
   352d4:	f47f acc6 	bne.w	34c64 <ticker_job+0x390>
			instance->ticks_current = ticks_current;
   352d8:	6174      	str	r4, [r6, #20]
   352da:	e4c3      	b.n	34c64 <ticker_job+0x390>
	insert_head = TICKER_NULL;
   352dc:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
   352de:	4691      	mov	r9, r2
	insert_head = TICKER_NULL;
   352e0:	9303      	str	r3, [sp, #12]
   352e2:	e4a6      	b.n	34c32 <ticker_job+0x35e>
   352e4:	7f172b59 	.word	0x7f172b59
   352e8:	ff172b5a 	.word	0xff172b5a

000352ec <ticker_init>:
{
   352ec:	b4f0      	push	{r4, r5, r6, r7}
   352ee:	9d04      	ldr	r5, [sp, #16]
   352f0:	f89d 7014 	ldrb.w	r7, [sp, #20]
   352f4:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   352f6:	2800      	cmp	r0, #0
   352f8:	d137      	bne.n	3536a <ticker_init+0x7e>
	instance->count_node = count_node;
   352fa:	4e1d      	ldr	r6, [pc, #116]	; (35370 <ticker_init+0x84>)
	while (count_node--) {
   352fc:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
   35300:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   35302:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   35304:	fa5f fc8c 	uxtb.w	ip, ip
   35308:	b149      	cbz	r1, 3531e <ticker_init+0x32>
   3530a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   3530e:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   35312:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   35314:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   35318:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   3531c:	d1f9      	bne.n	35312 <ticker_init+0x26>
	while (count_user--) {
   3531e:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   35320:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   35322:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   35324:	b2d2      	uxtb	r2, r2
   35326:	b183      	cbz	r3, 3534a <ticker_init+0x5e>
   35328:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   3532c:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   3532e:	4610      	mov	r0, r2
   35330:	f812 3908 	ldrb.w	r3, [r2], #-8
   35334:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   35338:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   3533c:	42a8      	cmp	r0, r5
		count_op -= users[count_user].count_user_op;
   3533e:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   35342:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   35346:	b2df      	uxtb	r7, r3
	while (count_user--) {
   35348:	d1f0      	bne.n	3532c <ticker_init+0x40>
	if (count_op) {
   3534a:	b977      	cbnz	r7, 3536a <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   3534c:	9a07      	ldr	r2, [sp, #28]
   3534e:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   35350:	9a08      	ldr	r2, [sp, #32]
   35352:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   35354:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   35358:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3535a:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   3535c:	4638      	mov	r0, r7
	instance->ticks_current = 0U;
   3535e:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   35362:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   35364:	8177      	strh	r7, [r6, #10]
}
   35366:	bcf0      	pop	{r4, r5, r6, r7}
   35368:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   3536a:	2001      	movs	r0, #1
}
   3536c:	bcf0      	pop	{r4, r5, r6, r7}
   3536e:	4770      	bx	lr
   35370:	20004b0c 	.word	0x20004b0c

00035374 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   35374:	4b04      	ldr	r3, [pc, #16]	; (35388 <ticker_is_initialized+0x14>)
   35376:	222c      	movs	r2, #44	; 0x2c
   35378:	fb02 3300 	mla	r3, r2, r0, r3
   3537c:	7a18      	ldrb	r0, [r3, #8]
}
   3537e:	3800      	subs	r0, #0
   35380:	bf18      	it	ne
   35382:	2001      	movne	r0, #1
   35384:	4770      	bx	lr
   35386:	bf00      	nop
   35388:	20004b0c 	.word	0x20004b0c

0003538c <ticker_trigger>:
	if (instance->sched_cb) {
   3538c:	4b0a      	ldr	r3, [pc, #40]	; (353b8 <ticker_trigger+0x2c>)
   3538e:	222c      	movs	r2, #44	; 0x2c
   35390:	fb02 3200 	mla	r2, r2, r0, r3
{
   35394:	b410      	push	{r4}
	if (instance->sched_cb) {
   35396:	6a54      	ldr	r4, [r2, #36]	; 0x24
   35398:	b15c      	cbz	r4, 353b2 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   3539a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   3539e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   353a2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   353a6:	46a4      	mov	ip, r4
   353a8:	2201      	movs	r2, #1
}
   353aa:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   353ac:	2103      	movs	r1, #3
   353ae:	2002      	movs	r0, #2
   353b0:	4760      	bx	ip
}
   353b2:	bc10      	pop	{r4}
   353b4:	4770      	bx	lr
   353b6:	bf00      	nop
   353b8:	20004b0c 	.word	0x20004b0c

000353bc <ticker_start_ext>:
{
   353bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   353c0:	4e28      	ldr	r6, [pc, #160]	; (35464 <ticker_start_ext+0xa8>)
{
   353c2:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   353c6:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   353c8:	252c      	movs	r5, #44	; 0x2c
   353ca:	fb05 6504 	mla	r5, r5, r4, r6
{
   353ce:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   353d0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   353d4:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   353d8:	6869      	ldr	r1, [r5, #4]
   353da:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   353de:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   353e2:	78fc      	ldrb	r4, [r7, #3]
	if (last >= user->count_user_op) {
   353e4:	f811 e030 	ldrb.w	lr, [r1, r0, lsl #3]
	if (last == user->first) {
   353e8:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   353ea:	f104 0c01 	add.w	ip, r4, #1
   353ee:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   353f2:	45e6      	cmp	lr, ip
   353f4:	bf98      	it	ls
   353f6:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   353fa:	4561      	cmp	r1, ip
   353fc:	d02e      	beq.n	3545c <ticker_start_ext+0xa0>
	user_op = &user->user_op[user->last];
   353fe:	6879      	ldr	r1, [r7, #4]
   35400:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
   35404:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
   35408:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   3540c:	f04f 0904 	mov.w	r9, #4
   35410:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   35414:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   35416:	9b08      	ldr	r3, [sp, #32]
   35418:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   3541a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3541c:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   3541e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   35420:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   35422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   35424:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   35426:	9b11      	ldr	r3, [sp, #68]	; 0x44
   35428:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   3542a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3542c:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   3542e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   35430:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   35432:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   35434:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   35436:	9b10      	ldr	r3, [sp, #64]	; 0x40
   35438:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   3543a:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   3543c:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   3543e:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   35440:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   35444:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   35448:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   3544c:	4798      	blx	r3
   3544e:	4633      	mov	r3, r6
   35450:	4649      	mov	r1, r9
   35452:	2200      	movs	r2, #0
   35454:	47a8      	blx	r5
	return user_op->status;
   35456:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   35458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   3545c:	2001      	movs	r0, #1
}
   3545e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   35462:	bf00      	nop
   35464:	20004b0c 	.word	0x20004b0c

00035468 <ticker_start>:
{
   35468:	b510      	push	{r4, lr}
   3546a:	b08a      	sub	sp, #40	; 0x28
   3546c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   3546e:	9400      	str	r4, [sp, #0]
{
   35470:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35472:	9401      	str	r4, [sp, #4]
{
   35474:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35476:	9402      	str	r4, [sp, #8]
{
   35478:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   3547c:	9403      	str	r4, [sp, #12]
{
   3547e:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35480:	9404      	str	r4, [sp, #16]
{
   35482:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35484:	9405      	str	r4, [sp, #20]
{
   35486:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35488:	9406      	str	r4, [sp, #24]
{
   3548a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   3548c:	9407      	str	r4, [sp, #28]
{
   3548e:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35490:	9408      	str	r4, [sp, #32]
   35492:	2400      	movs	r4, #0
   35494:	9409      	str	r4, [sp, #36]	; 0x24
   35496:	f7ff ff91 	bl	353bc <ticker_start_ext>
}
   3549a:	b00a      	add	sp, #40	; 0x28
   3549c:	bd10      	pop	{r4, pc}
   3549e:	bf00      	nop

000354a0 <ticker_update_ext>:
{
   354a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   354a4:	4d29      	ldr	r5, [pc, #164]	; (3554c <ticker_update_ext+0xac>)
{
   354a6:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   354aa:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   354ae:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   354b0:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
   354b4:	fb0e 5e04 	mla	lr, lr, r4, r5
{
   354b8:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   354ba:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   354be:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   354c2:	f8de 1004 	ldr.w	r1, [lr, #4]
   354c6:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   354ca:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	last = user->last + 1;
   354ce:	78f4      	ldrb	r4, [r6, #3]
	if (last >= user->count_user_op) {
   354d0:	f811 9030 	ldrb.w	r9, [r1, r0, lsl #3]
	if (last == user->first) {
   354d4:	7871      	ldrb	r1, [r6, #1]
	last = user->last + 1;
   354d6:	f104 0c01 	add.w	ip, r4, #1
   354da:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   354de:	45e1      	cmp	r9, ip
   354e0:	bf98      	it	ls
   354e2:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   354e6:	4561      	cmp	r1, ip
{
   354e8:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   354ec:	d02a      	beq.n	35544 <ticker_update_ext+0xa4>
	user_op = &user->user_op[user->last];
   354ee:	f8d6 a004 	ldr.w	sl, [r6, #4]
   354f2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   354f6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   354fa:	eb0a 0481 	add.w	r4, sl, r1, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   354fe:	f04f 0b05 	mov.w	fp, #5
   35502:	f80a b021 	strb.w	fp, [sl, r1, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   35506:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   35508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3550a:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   3550c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3550e:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   35510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   35512:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   35514:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   35516:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   35518:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3551a:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   3551c:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   3551e:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   35520:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   35522:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   35524:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   35528:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
   3552c:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   35530:	e9de 3608 	ldrd	r3, r6, [lr, #32]
   35534:	4798      	blx	r3
   35536:	462b      	mov	r3, r5
   35538:	2200      	movs	r2, #0
   3553a:	2104      	movs	r1, #4
   3553c:	47b0      	blx	r6
	return user_op->status;
   3553e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   35540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   35544:	2001      	movs	r0, #1
}
   35546:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3554a:	bf00      	nop
   3554c:	20004b0c 	.word	0x20004b0c

00035550 <ticker_update>:
{
   35550:	b510      	push	{r4, lr}
   35552:	b088      	sub	sp, #32
   35554:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   35556:	9400      	str	r4, [sp, #0]
{
   35558:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   3555a:	9401      	str	r4, [sp, #4]
{
   3555c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   3555e:	9402      	str	r4, [sp, #8]
{
   35560:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   35564:	9403      	str	r4, [sp, #12]
{
   35566:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   3556a:	9404      	str	r4, [sp, #16]
{
   3556c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   3556e:	9405      	str	r4, [sp, #20]
{
   35570:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   35572:	9406      	str	r4, [sp, #24]
   35574:	2400      	movs	r4, #0
   35576:	9407      	str	r4, [sp, #28]
   35578:	f7ff ff92 	bl	354a0 <ticker_update_ext>
}
   3557c:	b008      	add	sp, #32
   3557e:	bd10      	pop	{r4, pc}

00035580 <ticker_stop>:
{
   35580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35584:	4607      	mov	r7, r0
	struct ticker_instance *instance = &_instance[instance_index];
   35586:	4d1e      	ldr	r5, [pc, #120]	; (35600 <ticker_stop+0x80>)
   35588:	eb07 0487 	add.w	r4, r7, r7, lsl #2
{
   3558c:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   3558e:	eb07 0444 	add.w	r4, r7, r4, lsl #1
	user = &instance->users[user_id];
   35592:	212c      	movs	r1, #44	; 0x2c
	struct ticker_instance *instance = &_instance[instance_index];
   35594:	eb05 0684 	add.w	r6, r5, r4, lsl #2
	user = &instance->users[user_id];
   35598:	fb01 5407 	mla	r4, r1, r7, r5
   3559c:	6865      	ldr	r5, [r4, #4]
   3559e:	eb05 01c0 	add.w	r1, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   355a2:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   355a6:	f891 e003 	ldrb.w	lr, [r1, #3]
	if (last == user->first) {
   355aa:	784d      	ldrb	r5, [r1, #1]
	last = user->last + 1;
   355ac:	f10e 0c01 	add.w	ip, lr, #1
   355b0:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   355b4:	4567      	cmp	r7, ip
   355b6:	bf98      	it	ls
   355b8:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   355bc:	4565      	cmp	r5, ip
   355be:	d01c      	beq.n	355fa <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   355c0:	684f      	ldr	r7, [r1, #4]
   355c2:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   355c6:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   355ca:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   355ce:	f04f 0807 	mov.w	r8, #7
   355d2:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   355d6:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   355d8:	9b06      	ldr	r3, [sp, #24]
   355da:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   355dc:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   355de:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   355e0:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   355e2:	f881 c003 	strb.w	ip, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   355e6:	e9d4 3708 	ldrd	r3, r7, [r4, #32]
   355ea:	4798      	blx	r3
   355ec:	4633      	mov	r3, r6
   355ee:	2200      	movs	r2, #0
   355f0:	2104      	movs	r1, #4
   355f2:	47b8      	blx	r7
	return user_op->status;
   355f4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   355f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   355fa:	2001      	movs	r0, #1
}
   355fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35600:	20004b0c 	.word	0x20004b0c

00035604 <ticker_next_slot_get>:
{
   35604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35608:	4607      	mov	r7, r0
	struct ticker_instance *instance = &_instance[instance_index];
   3560a:	4d20      	ldr	r5, [pc, #128]	; (3568c <ticker_next_slot_get+0x88>)
   3560c:	eb07 0487 	add.w	r4, r7, r7, lsl #2
{
   35610:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   35612:	eb07 0444 	add.w	r4, r7, r4, lsl #1
	user = &instance->users[user_id];
   35616:	212c      	movs	r1, #44	; 0x2c
	struct ticker_instance *instance = &_instance[instance_index];
   35618:	eb05 0684 	add.w	r6, r5, r4, lsl #2
	user = &instance->users[user_id];
   3561c:	fb01 5407 	mla	r4, r1, r7, r5
   35620:	6865      	ldr	r5, [r4, #4]
   35622:	eb05 01c0 	add.w	r1, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   35626:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   3562a:	f891 e003 	ldrb.w	lr, [r1, #3]
	if (last == user->first) {
   3562e:	784d      	ldrb	r5, [r1, #1]
	last = user->last + 1;
   35630:	f10e 0c01 	add.w	ip, lr, #1
   35634:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   35638:	4567      	cmp	r7, ip
   3563a:	bf98      	it	ls
   3563c:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   35640:	4565      	cmp	r5, ip
   35642:	d020      	beq.n	35686 <ticker_next_slot_get+0x82>
	user_op = &user->user_op[user->last];
   35644:	684f      	ldr	r7, [r1, #4]
   35646:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   3564a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   3564e:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   35652:	f64f 7802 	movw	r8, #65282	; 0xff02
   35656:	f827 802e 	strh.w	r8, [r7, lr, lsl #2]
	user_op->params.slot_get.ticks_current = ticks_current;
   3565a:	e9c5 2301 	strd	r2, r3, [r5, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   3565e:	9b06      	ldr	r3, [sp, #24]
   35660:	60eb      	str	r3, [r5, #12]
	user_op->fp_op_func = fp_op_func;
   35662:	9b07      	ldr	r3, [sp, #28]
   35664:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   35666:	9b08      	ldr	r3, [sp, #32]
   35668:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   3566a:	2302      	movs	r3, #2
   3566c:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   3566e:	f881 c003 	strb.w	ip, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   35672:	e9d4 3708 	ldrd	r3, r7, [r4, #32]
   35676:	4798      	blx	r3
   35678:	4633      	mov	r3, r6
   3567a:	2200      	movs	r2, #0
   3567c:	2104      	movs	r1, #4
   3567e:	47b8      	blx	r7
	return user_op->status;
   35680:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   35682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   35686:	2001      	movs	r0, #1
}
   35688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3568c:	20004b0c 	.word	0x20004b0c

00035690 <ticker_job_sched>:
{
   35690:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   35692:	4d0a      	ldr	r5, [pc, #40]	; (356bc <ticker_job_sched+0x2c>)
   35694:	222c      	movs	r2, #44	; 0x2c
   35696:	fb02 5200 	mla	r2, r2, r0, r5
   3569a:	e9d2 3608 	ldrd	r3, r6, [r2, #32]
{
   3569e:	4604      	mov	r4, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   356a0:	4608      	mov	r0, r1
   356a2:	4798      	blx	r3
	struct ticker_instance *instance = &_instance[instance_index];
   356a4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   356a8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   356ac:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   356b0:	46b4      	mov	ip, r6
   356b2:	2200      	movs	r2, #0
}
   356b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   356b8:	2104      	movs	r1, #4
   356ba:	4760      	bx	ip
   356bc:	20004b0c 	.word	0x20004b0c

000356c0 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   356c0:	f00d b9aa 	b.w	42a18 <cntr_cnt_get>

000356c4 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   356c4:	1a40      	subs	r0, r0, r1
}
   356c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   356ca:	4770      	bx	lr

000356cc <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   356cc:	b538      	push	{r3, r4, r5, lr}
   356ce:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   356d0:	2000      	movs	r0, #0
{
   356d2:	460c      	mov	r4, r1
		if (ull_adv_is_enabled(0)) {
   356d4:	f003 fb54 	bl	38d80 <ull_adv_is_enabled>
   356d8:	b990      	cbnz	r0, 35700 <ll_addr_set+0x34>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   356da:	f003 fd75 	bl	391c8 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   356de:	f010 0f06 	tst.w	r0, #6
   356e2:	d10d      	bne.n	35700 <ll_addr_set+0x34>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   356e4:	b935      	cbnz	r5, 356f4 <ll_addr_set+0x28>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   356e6:	4807      	ldr	r0, [pc, #28]	; (35704 <ll_addr_set+0x38>)
   356e8:	2206      	movs	r2, #6
   356ea:	4621      	mov	r1, r4
   356ec:	f016 fab4 	bl	4bc58 <memcpy>
	}

	return 0;
   356f0:	2000      	movs	r0, #0
}
   356f2:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   356f4:	2206      	movs	r2, #6
   356f6:	4621      	mov	r1, r4
   356f8:	4803      	ldr	r0, [pc, #12]	; (35708 <ll_addr_set+0x3c>)
   356fa:	f016 faad 	bl	4bc58 <memcpy>
   356fe:	e7f7      	b.n	356f0 <ll_addr_set+0x24>
			return BT_HCI_ERR_CMD_DISALLOWED;
   35700:	200c      	movs	r0, #12
}
   35702:	bd38      	pop	{r3, r4, r5, pc}
   35704:	20004b40 	.word	0x20004b40
   35708:	20004b38 	.word	0x20004b38

0003570c <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
   3570c:	2801      	cmp	r0, #1
{
   3570e:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   35710:	d805      	bhi.n	3571e <ll_addr_get+0x12>

	if (addr_type) {
		return rnd_addr;
	}

	return pub_addr;
   35712:	4a04      	ldr	r2, [pc, #16]	; (35724 <ll_addr_get+0x18>)
   35714:	4804      	ldr	r0, [pc, #16]	; (35728 <ll_addr_get+0x1c>)
   35716:	2b00      	cmp	r3, #0
   35718:	bf08      	it	eq
   3571a:	4610      	moveq	r0, r2
   3571c:	4770      	bx	lr
		return NULL;
   3571e:	2000      	movs	r0, #0
}
   35720:	4770      	bx	lr
   35722:	bf00      	nop
   35724:	20004b40 	.word	0x20004b40
   35728:	20004b38 	.word	0x20004b38

0003572c <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
   3572c:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   3572e:	b510      	push	{r4, lr}
   35730:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   35732:	d80b      	bhi.n	3574c <ll_addr_read+0x20>
	if (addr_type) {
   35734:	4608      	mov	r0, r1
		return rnd_addr;
   35736:	4c07      	ldr	r4, [pc, #28]	; (35754 <ll_addr_read+0x28>)
   35738:	4907      	ldr	r1, [pc, #28]	; (35758 <ll_addr_read+0x2c>)
   3573a:	2b00      	cmp	r3, #0
   3573c:	bf18      	it	ne
   3573e:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
   35740:	2206      	movs	r2, #6
   35742:	4621      	mov	r1, r4
   35744:	f016 fa88 	bl	4bc58 <memcpy>
	}

	return addr;
}
   35748:	4620      	mov	r0, r4
   3574a:	bd10      	pop	{r4, pc}
		return NULL;
   3574c:	2400      	movs	r4, #0
}
   3574e:	4620      	mov	r0, r4
   35750:	bd10      	pop	{r4, pc}
   35752:	bf00      	nop
   35754:	20004b40 	.word	0x20004b40
   35758:	20004b38 	.word	0x20004b38

0003575c <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   3575c:	2802      	cmp	r0, #2
   3575e:	d001      	beq.n	35764 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   35760:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   35762:	4770      	bx	lr
{
   35764:	b538      	push	{r3, r4, r5, lr}
   35766:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   35768:	4608      	mov	r0, r1
   3576a:	461d      	mov	r5, r3
   3576c:	f004 fc2a 	bl	39fc4 <ll_connected_get>
			if (!conn) {
   35770:	b110      	cbz	r0, 35778 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   35772:	2000      	movs	r0, #0
   35774:	7028      	strb	r0, [r5, #0]
}
   35776:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35778:	4620      	mov	r0, r4
}
   3577a:	bd38      	pop	{r3, r4, r5, pc}

0003577c <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   3577c:	2300      	movs	r3, #0
   3577e:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   35780:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   35782:	4770      	bx	lr

00035784 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   35784:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   35786:	4802      	ldr	r0, [pc, #8]	; (35790 <hci_driver_init+0xc>)
   35788:	f7f8 fe44 	bl	2e414 <bt_hci_driver_register>

	return 0;
}
   3578c:	2000      	movs	r0, #0
   3578e:	bd08      	pop	{r3, pc}
   35790:	00052af4 	.word	0x00052af4

00035794 <hci_driver_send>:
{
   35794:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   35796:	8983      	ldrh	r3, [r0, #12]
{
   35798:	b083      	sub	sp, #12
	if (!buf->len) {
   3579a:	b123      	cbz	r3, 357a6 <hci_driver_send+0x12>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   3579c:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   3579e:	4604      	mov	r4, r0
   357a0:	b1c3      	cbz	r3, 357d4 <hci_driver_send+0x40>
   357a2:	2b02      	cmp	r3, #2
   357a4:	d004      	beq.n	357b0 <hci_driver_send+0x1c>
   357a6:	f06f 0515 	mvn.w	r5, #21
}
   357aa:	4628      	mov	r0, r5
   357ac:	b003      	add	sp, #12
   357ae:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   357b0:	a901      	add	r1, sp, #4
   357b2:	f000 ff5d 	bl	36670 <hci_acl_handle>
	if (evt) {
   357b6:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   357b8:	4605      	mov	r5, r0
	if (evt) {
   357ba:	b113      	cbz	r3, 357c2 <hci_driver_send+0x2e>
		bt_recv_prio(evt);
   357bc:	4618      	mov	r0, r3
   357be:	f7f8 fe0b 	bl	2e3d8 <bt_recv_prio>
	if (!err) {
   357c2:	2d00      	cmp	r5, #0
   357c4:	d1f1      	bne.n	357aa <hci_driver_send+0x16>
		net_buf_unref(buf);
   357c6:	4620      	mov	r0, r4
   357c8:	f00e f8c0 	bl	4394c <net_buf_unref>
   357cc:	2500      	movs	r5, #0
}
   357ce:	4628      	mov	r0, r5
   357d0:	b003      	add	sp, #12
   357d2:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   357d4:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   357d6:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   357d8:	f000 fa90 	bl	35cfc <hci_cmd_handle>
	if (evt) {
   357dc:	2800      	cmp	r0, #0
   357de:	d0f2      	beq.n	357c6 <hci_driver_send+0x32>
		bt_recv_prio(evt);
   357e0:	f7f8 fdfa 	bl	2e3d8 <bt_recv_prio>
		if (node_rx) {
   357e4:	9d01      	ldr	r5, [sp, #4]
   357e6:	2d00      	cmp	r5, #0
   357e8:	d0ed      	beq.n	357c6 <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   357ea:	4628      	mov	r0, r5
   357ec:	f001 fbf6 	bl	36fdc <hci_get_class>
   357f0:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   357f2:	9901      	ldr	r1, [sp, #4]
   357f4:	4801      	ldr	r0, [pc, #4]	; (357fc <hci_driver_send+0x68>)
   357f6:	f01b f908 	bl	50a0a <k_queue_append>
	if (!err) {
   357fa:	e7e4      	b.n	357c6 <hci_driver_send+0x32>
   357fc:	2000131c 	.word	0x2000131c

00035800 <recv_thread>:
{
   35800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_queue_get(queue, timeout);
   35804:	4e42      	ldr	r6, [pc, #264]	; (35910 <recv_thread+0x110>)
		LL_ASSERT(0);
   35806:	f8df 810c 	ldr.w	r8, [pc, #268]	; 35914 <recv_thread+0x114>
   3580a:	4f43      	ldr	r7, [pc, #268]	; (35918 <recv_thread+0x118>)
{
   3580c:	b082      	sub	sp, #8
   3580e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35816:	4630      	mov	r0, r6
   35818:	f012 fbf6 	bl	48008 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   3581c:	2800      	cmp	r0, #0
   3581e:	d0f6      	beq.n	3580e <recv_thread+0xe>
	uint8_t class = node_rx->hdr.user_meta;
   35820:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   35822:	9001      	str	r0, [sp, #4]
	switch (class) {
   35824:	2b04      	cmp	r3, #4
   35826:	d821      	bhi.n	3586c <recv_thread+0x6c>
   35828:	2b00      	cmp	r3, #0
   3582a:	d14b      	bne.n	358c4 <recv_thread+0xc4>
		LL_ASSERT(0);
   3582c:	483b      	ldr	r0, [pc, #236]	; (3591c <recv_thread+0x11c>)
   3582e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   35832:	4642      	mov	r2, r8
   35834:	4639      	mov	r1, r7
   35836:	f014 f8e0 	bl	499fa <printk>
   3583a:	4040      	eors	r0, r0
   3583c:	f380 8811 	msr	BASEPRI, r0
   35840:	f04f 0003 	mov.w	r0, #3
   35844:	df02      	svc	2
	node_rx->hdr.next = NULL;
   35846:	9b01      	ldr	r3, [sp, #4]
   35848:	2200      	movs	r2, #0
   3584a:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   3584c:	a801      	add	r0, sp, #4
   3584e:	f002 f87b 	bl	37948 <ll_rx_mem_release>
   35852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3585a:	4630      	mov	r0, r6
   3585c:	f012 fbd4 	bl	48008 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   35860:	2800      	cmp	r0, #0
   35862:	d0d4      	beq.n	3580e <recv_thread+0xe>
	uint8_t class = node_rx->hdr.user_meta;
   35864:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   35866:	9001      	str	r0, [sp, #4]
	switch (class) {
   35868:	2b04      	cmp	r3, #4
   3586a:	d9dd      	bls.n	35828 <recv_thread+0x28>
   3586c:	2b05      	cmp	r3, #5
   3586e:	d1dd      	bne.n	3582c <recv_thread+0x2c>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   35870:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35878:	2003      	movs	r0, #3
   3587a:	f7f7 ffd1 	bl	2d820 <bt_buf_get_rx>
   3587e:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   35880:	4621      	mov	r1, r4
   35882:	9801      	ldr	r0, [sp, #4]
   35884:	f000 ff7a 	bl	3677c <hci_acl_encode>
	node_rx->hdr.next = NULL;
   35888:	9b01      	ldr	r3, [sp, #4]
   3588a:	2200      	movs	r2, #0
   3588c:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   3588e:	a801      	add	r0, sp, #4
   35890:	f002 f85a 	bl	37948 <ll_rx_mem_release>
		while (buf) {
   35894:	2c00      	cmp	r4, #0
   35896:	d0ba      	beq.n	3580e <recv_thread+0xe>
			frag = net_buf_ref(buf);
   35898:	4620      	mov	r0, r4
   3589a:	f01a f98c 	bl	4fbb6 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
   3589e:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
   358a0:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
   358a2:	2000      	movs	r0, #0
   358a4:	f01a f9ad 	bl	4fc02 <net_buf_frag_del>
			if (frag->len) {
   358a8:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
   358aa:	4604      	mov	r4, r0
				bt_recv(frag);
   358ac:	4628      	mov	r0, r5
			if (frag->len) {
   358ae:	b133      	cbz	r3, 358be <recv_thread+0xbe>
				bt_recv(frag);
   358b0:	f7f8 fd0e 	bl	2e2d0 <bt_recv>
	z_impl_k_yield();
   358b4:	f013 f84a 	bl	4894c <z_impl_k_yield>
		while (buf) {
   358b8:	2c00      	cmp	r4, #0
   358ba:	d1ed      	bne.n	35898 <recv_thread+0x98>
   358bc:	e7a7      	b.n	3580e <recv_thread+0xe>
				net_buf_unref(frag);
   358be:	f00e f845 	bl	4394c <net_buf_unref>
   358c2:	e7f7      	b.n	358b4 <recv_thread+0xb4>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   358c4:	2b02      	cmp	r3, #2
   358c6:	d013      	beq.n	358f0 <recv_thread+0xf0>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   358c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   358cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   358d0:	2001      	movs	r0, #1
   358d2:	f7f7 ffa5 	bl	2d820 <bt_buf_get_rx>
   358d6:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   358d8:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   358da:	b19c      	cbz	r4, 35904 <recv_thread+0x104>
			hci_evt_encode(node_rx, buf);
   358dc:	4621      	mov	r1, r4
   358de:	f000 ff87 	bl	367f0 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   358e2:	9b01      	ldr	r3, [sp, #4]
   358e4:	2200      	movs	r2, #0
   358e6:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   358e8:	a801      	add	r0, sp, #4
   358ea:	f002 f82d 	bl	37948 <ll_rx_mem_release>
		while (buf) {
   358ee:	e7d3      	b.n	35898 <recv_thread+0x98>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   358f0:	2200      	movs	r2, #0
   358f2:	2300      	movs	r3, #0
   358f4:	2101      	movs	r1, #1
   358f6:	2000      	movs	r0, #0
   358f8:	f7f7 ffbc 	bl	2d874 <bt_buf_get_evt>
   358fc:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   358fe:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   35900:	2c00      	cmp	r4, #0
   35902:	d1eb      	bne.n	358dc <recv_thread+0xdc>
	node_rx->hdr.next = NULL;
   35904:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   35906:	a801      	add	r0, sp, #4
   35908:	f002 f81e 	bl	37948 <ll_rx_mem_release>
		while (buf) {
   3590c:	e77f      	b.n	3580e <recv_thread+0xe>
   3590e:	bf00      	nop
   35910:	2000131c 	.word	0x2000131c
   35914:	00052a90 	.word	0x00052a90
   35918:	00052ad0 	.word	0x00052ad0
   3591c:	00052a70 	.word	0x00052a70

00035920 <prio_recv_thread>:
{
   35920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   35924:	4f2e      	ldr	r7, [pc, #184]	; (359e0 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
   35926:	4e2f      	ldr	r6, [pc, #188]	; (359e4 <prio_recv_thread+0xc4>)
{
   35928:	b082      	sub	sp, #8
   3592a:	e00c      	b.n	35946 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   3592c:	f7f7 ffa2 	bl	2d874 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   35930:	4622      	mov	r2, r4
   35932:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   35936:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   35938:	f001 fb38 	bl	36fac <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   3593c:	4620      	mov	r0, r4
   3593e:	f7f8 fd4b 	bl	2e3d8 <bt_recv_prio>
	z_impl_k_yield();
   35942:	f013 f803 	bl	4894c <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   35946:	f10d 0102 	add.w	r1, sp, #2
   3594a:	a801      	add	r0, sp, #4
   3594c:	f001 fe4c 	bl	375e8 <ll_rx_get>
   35950:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   35952:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3595a:	2100      	movs	r1, #0
   3595c:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   3595e:	2c00      	cmp	r4, #0
   35960:	d1e4      	bne.n	3592c <prio_recv_thread+0xc>
		if (node_rx) {
   35962:	9b01      	ldr	r3, [sp, #4]
   35964:	b1b3      	cbz	r3, 35994 <prio_recv_thread+0x74>
			ll_rx_dequeue();
   35966:	f001 ff2b 	bl	377c0 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   3596a:	f8dd 8004 	ldr.w	r8, [sp, #4]
   3596e:	4640      	mov	r0, r8
   35970:	f001 fb34 	bl	36fdc <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   35974:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   35976:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   3597a:	796b      	ldrb	r3, [r5, #5]
   3597c:	2b03      	cmp	r3, #3
   3597e:	d102      	bne.n	35986 <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   35980:	792b      	ldrb	r3, [r5, #4]
   35982:	2b17      	cmp	r3, #23
   35984:	d00e      	beq.n	359a4 <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
   35986:	4629      	mov	r1, r5
   35988:	4630      	mov	r0, r6
   3598a:	f01b f83e 	bl	50a0a <k_queue_append>
		if (iso_received || node_rx) {
   3598e:	9b01      	ldr	r3, [sp, #4]
   35990:	2b00      	cmp	r3, #0
   35992:	d1d8      	bne.n	35946 <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
   35994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3599c:	4638      	mov	r0, r7
   3599e:	f012 fb8d 	bl	480bc <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   359a2:	e7d0      	b.n	35946 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   359a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   359a8:	4621      	mov	r1, r4
   359aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   359ae:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   359b0:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   359b4:	f7f7 ff5e 	bl	2d874 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   359b8:	4641      	mov	r1, r8
   359ba:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   359bc:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   359be:	f105 001c 	add.w	r0, r5, #28
   359c2:	f000 feb3 	bl	3672c <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   359c6:	4640      	mov	r0, r8
   359c8:	f000 fed0 	bl	3676c <hci_disconn_complete_process>
				bt_recv_prio(buf);
   359cc:	4620      	mov	r0, r4
			if (buf) {
   359ce:	b124      	cbz	r4, 359da <prio_recv_thread+0xba>
				bt_recv_prio(buf);
   359d0:	f7f8 fd02 	bl	2e3d8 <bt_recv_prio>
					net_buf_unref(buf);
   359d4:	4620      	mov	r0, r4
   359d6:	f00d ffb9 	bl	4394c <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   359da:	9d01      	ldr	r5, [sp, #4]
   359dc:	e7d3      	b.n	35986 <prio_recv_thread+0x66>
   359de:	bf00      	nop
   359e0:	200012ec 	.word	0x200012ec
   359e4:	2000131c 	.word	0x2000131c

000359e8 <hci_driver_open>:
{
   359e8:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   359ea:	481a      	ldr	r0, [pc, #104]	; (35a54 <hci_driver_open+0x6c>)
{
   359ec:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   359ee:	f002 fc33 	bl	38258 <ll_init>
	if (err) {
   359f2:	4604      	mov	r4, r0
   359f4:	bb58      	cbnz	r0, 35a4e <hci_driver_open+0x66>
	hci_init(NULL);
   359f6:	f001 fb07 	bl	37008 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   359fa:	2600      	movs	r6, #0
   359fc:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   359fe:	f06f 0209 	mvn.w	r2, #9
   35a02:	e9cd 2403 	strd	r2, r4, [sp, #12]
   35a06:	e9cd 6706 	strd	r6, r7, [sp, #24]
   35a0a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   35a0e:	4b12      	ldr	r3, [pc, #72]	; (35a58 <hci_driver_open+0x70>)
   35a10:	4912      	ldr	r1, [pc, #72]	; (35a5c <hci_driver_open+0x74>)
   35a12:	9400      	str	r4, [sp, #0]
   35a14:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   35a18:	4811      	ldr	r0, [pc, #68]	; (35a60 <hci_driver_open+0x78>)
   35a1a:	f012 f8e7 	bl	47bec <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   35a1e:	4911      	ldr	r1, [pc, #68]	; (35a64 <hci_driver_open+0x7c>)
   35a20:	480f      	ldr	r0, [pc, #60]	; (35a60 <hci_driver_open+0x78>)
   35a22:	f01a ff59 	bl	508d8 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   35a26:	f06f 0207 	mvn.w	r2, #7
   35a2a:	e9cd 2403 	strd	r2, r4, [sp, #12]
   35a2e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   35a32:	e9cd 4401 	strd	r4, r4, [sp, #4]
   35a36:	4b0c      	ldr	r3, [pc, #48]	; (35a68 <hci_driver_open+0x80>)
   35a38:	490c      	ldr	r1, [pc, #48]	; (35a6c <hci_driver_open+0x84>)
   35a3a:	9400      	str	r4, [sp, #0]
   35a3c:	f640 0298 	movw	r2, #2200	; 0x898
   35a40:	480b      	ldr	r0, [pc, #44]	; (35a70 <hci_driver_open+0x88>)
   35a42:	f012 f8d3 	bl	47bec <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   35a46:	490b      	ldr	r1, [pc, #44]	; (35a74 <hci_driver_open+0x8c>)
   35a48:	4809      	ldr	r0, [pc, #36]	; (35a70 <hci_driver_open+0x88>)
   35a4a:	f01a ff45 	bl	508d8 <z_impl_k_thread_name_set>
}
   35a4e:	4620      	mov	r0, r4
   35a50:	b008      	add	sp, #32
   35a52:	bdd0      	pop	{r4, r6, r7, pc}
   35a54:	200012ec 	.word	0x200012ec
   35a58:	00035921 	.word	0x00035921
   35a5c:	200090e8 	.word	0x200090e8
   35a60:	200032d8 	.word	0x200032d8
   35a64:	00052ad4 	.word	0x00052ad4
   35a68:	00035801 	.word	0x00035801
   35a6c:	20008850 	.word	0x20008850
   35a70:	20003258 	.word	0x20003258
   35a74:	00052ae0 	.word	0x00052ae0

00035a78 <dup_found.constprop.0>:
	}

	return true;
}

static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
   35a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		      uint8_t adv_mode, const struct pdu_adv_adi *adi,
		      uint8_t data_status)
{
	/* check for duplicate filtering */
	if (dup_count >= 0) {
   35a7c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 35b20 <dup_found.constprop.0+0xa8>
   35a80:	f8d9 3000 	ldr.w	r3, [r9]
   35a84:	2b00      	cmp	r3, #0
   35a86:	db34      	blt.n	35af2 <dup_found.constprop.0+0x7a>
   35a88:	4680      	mov	r8, r0
   35a8a:	460f      	mov	r7, r1
   35a8c:	4616      	mov	r6, r2
		__ASSERT((adv_mode < ARRAY_SIZE(dup_filter[0].adv_mode)),
			 "adv_mode index out-of-bound");
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		/* find for existing entry and update if changed */
		for (int32_t i = 0; i < dup_count; i++) {
   35a8e:	d012      	beq.n	35ab6 <dup_found.constprop.0+0x3e>
   35a90:	4c24      	ldr	r4, [pc, #144]	; (35b24 <dup_found.constprop.0+0xac>)
   35a92:	2500      	movs	r5, #0
			dup = &dup_filter[i];
			if (memcmp(addr, &dup->addr.a.val[0],
   35a94:	4621      	mov	r1, r4
   35a96:	2206      	movs	r2, #6
   35a98:	4630      	mov	r0, r6
   35a9a:	f016 f8cd 	bl	4bc38 <memcmp>
   35a9e:	b918      	cbnz	r0, 35aa8 <dup_found.constprop.0+0x30>
				   sizeof(bt_addr_t)) ||
   35aa0:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   35aa4:	42bb      	cmp	r3, r7
   35aa6:	d027      	beq.n	35af8 <dup_found.constprop.0+0x80>
		for (int32_t i = 0; i < dup_count; i++) {
   35aa8:	f8d9 3000 	ldr.w	r3, [r9]
   35aac:	3501      	adds	r5, #1
   35aae:	429d      	cmp	r5, r3
   35ab0:	f104 0408 	add.w	r4, r4, #8
   35ab4:	dbee      	blt.n	35a94 <dup_found.constprop.0+0x1c>
			return is_dup_or_update(dup, adv_type, adv_mode, adi,
						data_status);
		}

		/* insert into the duplicate filter */
		dup = &dup_filter[dup_curr];
   35ab6:	4c1c      	ldr	r4, [pc, #112]	; (35b28 <dup_found.constprop.0+0xb0>)
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   35ab8:	4d1c      	ldr	r5, [pc, #112]	; (35b2c <dup_found.constprop.0+0xb4>)
		dup = &dup_filter[dup_curr];
   35aba:	f8d4 a000 	ldr.w	sl, [r4]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   35abe:	4631      	mov	r1, r6
   35ac0:	ea4f 06ca 	mov.w	r6, sl, lsl #3
   35ac4:	1c70      	adds	r0, r6, #1
   35ac6:	4428      	add	r0, r5
   35ac8:	2206      	movs	r2, #6
   35aca:	f016 f8c5 	bl	4bc58 <memcpy>
		dup_ext_adv_mode_reset(dup->adv_mode);
		dup_ext_adv_adi_store(&dup->adv_mode[adv_mode], adi,
				      data_status);
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   35ace:	f8d9 3000 	ldr.w	r3, [r9]
		dup->addr.type = addr_type;
   35ad2:	f805 703a 	strb.w	r7, [r5, sl, lsl #3]
		dup->mask = BIT(adv_type);
   35ad6:	2201      	movs	r2, #1
   35ad8:	4435      	add	r5, r6
   35ada:	fa02 f208 	lsl.w	r2, r2, r8
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   35ade:	2b0f      	cmp	r3, #15
		dup->mask = BIT(adv_type);
   35ae0:	71ea      	strb	r2, [r5, #7]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   35ae2:	dc1a      	bgt.n	35b1a <dup_found.constprop.0+0xa2>
			dup_count++;
   35ae4:	3301      	adds	r3, #1
   35ae6:	f8c9 3000 	str.w	r3, [r9]
			dup_curr = dup_count;
		} else {
			dup_curr++;
		}

		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   35aea:	2b10      	cmp	r3, #16
			dup_curr = 0U;
   35aec:	bf08      	it	eq
   35aee:	2300      	moveq	r3, #0
   35af0:	6023      	str	r3, [r4, #0]
		return false;
   35af2:	2000      	movs	r0, #0
		}
	}

	return false;
}
   35af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(dup->mask & BIT(adv_type))) {
   35af8:	4b0c      	ldr	r3, [pc, #48]	; (35b2c <dup_found.constprop.0+0xb4>)
   35afa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   35afe:	79da      	ldrb	r2, [r3, #7]
   35b00:	fa22 f108 	lsr.w	r1, r2, r8
   35b04:	07c9      	lsls	r1, r1, #31
   35b06:	d502      	bpl.n	35b0e <dup_found.constprop.0+0x96>
	return true;
   35b08:	2001      	movs	r0, #1
}
   35b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dup->mask |= BIT(adv_type);
   35b0e:	2101      	movs	r1, #1
   35b10:	fa01 f108 	lsl.w	r1, r1, r8
   35b14:	430a      	orrs	r2, r1
   35b16:	71da      	strb	r2, [r3, #7]
		return false;
   35b18:	e7eb      	b.n	35af2 <dup_found.constprop.0+0x7a>
			dup_curr++;
   35b1a:	6823      	ldr	r3, [r4, #0]
   35b1c:	3301      	adds	r3, #1
   35b1e:	e7e4      	b.n	35aea <dup_found.constprop.0+0x72>
   35b20:	20004b50 	.word	0x20004b50
   35b24:	20004b55 	.word	0x20004b55
   35b28:	20004b4c 	.word	0x20004b4c
   35b2c:	20004b54 	.word	0x20004b54

00035b30 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   35b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   35b32:	4c18      	ldr	r4, [pc, #96]	; (35b94 <le_remote_feat_complete+0x64>)
   35b34:	6864      	ldr	r4, [r4, #4]
   35b36:	00a4      	lsls	r4, r4, #2
   35b38:	d504      	bpl.n	35b44 <le_remote_feat_complete+0x14>
   35b3a:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   35b3c:	4a16      	ldr	r2, [pc, #88]	; (35b98 <le_remote_feat_complete+0x68>)
   35b3e:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   35b40:	0712      	lsls	r2, r2, #28
   35b42:	d400      	bmi.n	35b46 <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   35b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   35b46:	f103 0408 	add.w	r4, r3, #8
   35b4a:	4607      	mov	r7, r0
   35b4c:	460e      	mov	r6, r1
   35b4e:	4620      	mov	r0, r4
   35b50:	2102      	movs	r1, #2
   35b52:	f01a f862 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = evt;
   35b56:	f640 433e 	movw	r3, #3134	; 0xc3e
   35b5a:	8003      	strh	r3, [r0, #0]
   35b5c:	2101      	movs	r1, #1
   35b5e:	4620      	mov	r0, r4
   35b60:	f01a f85b 	bl	4fc1a <net_buf_simple_add>
   35b64:	4603      	mov	r3, r0
	me->subevent = subevt;
   35b66:	2204      	movs	r2, #4
   35b68:	701a      	strb	r2, [r3, #0]
   35b6a:	4620      	mov	r0, r4
   35b6c:	210b      	movs	r1, #11
   35b6e:	f01a f854 	bl	4fc1a <net_buf_simple_add>
		memcpy(&sep->features[0],
   35b72:	2208      	movs	r2, #8
	sep->status = status;
   35b74:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   35b76:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   35b7a:	b92f      	cbnz	r7, 35b88 <le_remote_feat_complete+0x58>
		memcpy(&sep->features[0],
   35b7c:	1d31      	adds	r1, r6, #4
   35b7e:	3003      	adds	r0, #3
}
   35b80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   35b84:	f016 b868 	b.w	4bc58 <memcpy>
}
   35b88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   35b8c:	2100      	movs	r1, #0
   35b8e:	3003      	adds	r0, #3
   35b90:	f016 b86d 	b.w	4bc6e <memset>
   35b94:	20000190 	.word	0x20000190
   35b98:	20000188 	.word	0x20000188

00035b9c <hci_vendor_cmd_handle_common>:
{
   35b9c:	b570      	push	{r4, r5, r6, lr}
	switch (ocf) {
   35b9e:	3801      	subs	r0, #1
{
   35ba0:	b086      	sub	sp, #24
   35ba2:	4614      	mov	r4, r2
	switch (ocf) {
   35ba4:	2809      	cmp	r0, #9
   35ba6:	d806      	bhi.n	35bb6 <hci_vendor_cmd_handle_common+0x1a>
   35ba8:	e8df f000 	tbb	[pc, r0]
   35bac:	05402609 	.word	0x05402609
   35bb0:	63055105 	.word	0x63055105
   35bb4:	917e      	.short	0x917e
   35bb6:	f06f 0015 	mvn.w	r0, #21
}
   35bba:	b006      	add	sp, #24
   35bbc:	bd70      	pop	{r4, r5, r6, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35bbe:	4b4d      	ldr	r3, [pc, #308]	; (35cf4 <hci_vendor_cmd_handle_common+0x158>)
   35bc0:	210d      	movs	r1, #13
   35bc2:	8818      	ldrh	r0, [r3, #0]
   35bc4:	f016 fd51 	bl	4c66a <bt_hci_cmd_complete_create>
   35bc8:	210d      	movs	r1, #13
   35bca:	6020      	str	r0, [r4, #0]
   35bcc:	3008      	adds	r0, #8
   35bce:	f01a f824 	bl	4fc1a <net_buf_simple_add>
	rp->status = 0x00;
   35bd2:	2300      	movs	r3, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   35bd4:	f04f 1102 	mov.w	r1, #131074	; 0x20002
	rp->fw_variant = 0U;
   35bd8:	f44f 7240 	mov.w	r2, #768	; 0x300
	rp->status = 0x00;
   35bdc:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   35bde:	f8c0 1001 	str.w	r1, [r0, #1]
	rp->fw_variant = 0U;
   35be2:	f8a0 2005 	strh.w	r2, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   35be6:	71c3      	strb	r3, [r0, #7]
   35be8:	7203      	strb	r3, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   35bea:	7243      	strb	r3, [r0, #9]
   35bec:	7283      	strb	r3, [r0, #10]
   35bee:	72c3      	strb	r3, [r0, #11]
   35bf0:	7303      	strb	r3, [r0, #12]
	return 0;
   35bf2:	2000      	movs	r0, #0
}
   35bf4:	b006      	add	sp, #24
   35bf6:	bd70      	pop	{r4, r5, r6, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35bf8:	4b3e      	ldr	r3, [pc, #248]	; (35cf4 <hci_vendor_cmd_handle_common+0x158>)
   35bfa:	2141      	movs	r1, #65	; 0x41
   35bfc:	8818      	ldrh	r0, [r3, #0]
   35bfe:	f016 fd34 	bl	4c66a <bt_hci_cmd_complete_create>
   35c02:	2141      	movs	r1, #65	; 0x41
   35c04:	6020      	str	r0, [r4, #0]
   35c06:	3008      	adds	r0, #8
   35c08:	f01a f807 	bl	4fc1a <net_buf_simple_add>
	rp->status = 0x00;
   35c0c:	2100      	movs	r1, #0
   35c0e:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   35c10:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   35c12:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   35c16:	f016 f82a 	bl	4bc6e <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   35c1a:	7862      	ldrb	r2, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   35c1c:	78a3      	ldrb	r3, [r4, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   35c1e:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   35c22:	f043 0303 	orr.w	r3, r3, #3
	rp->commands[0] |= BIT(5) | BIT(7);
   35c26:	7062      	strb	r2, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   35c28:	70a3      	strb	r3, [r4, #2]
}
   35c2a:	e7e2      	b.n	35bf2 <hci_vendor_cmd_handle_common+0x56>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35c2c:	4b31      	ldr	r3, [pc, #196]	; (35cf4 <hci_vendor_cmd_handle_common+0x158>)
   35c2e:	2109      	movs	r1, #9
   35c30:	8818      	ldrh	r0, [r3, #0]
   35c32:	f016 fd1a 	bl	4c66a <bt_hci_cmd_complete_create>
   35c36:	2109      	movs	r1, #9
   35c38:	6020      	str	r0, [r4, #0]
   35c3a:	3008      	adds	r0, #8
   35c3c:	f019 ffed 	bl	4fc1a <net_buf_simple_add>
	rp->status = 0x00;
   35c40:	2100      	movs	r1, #0
   35c42:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   35c46:	2208      	movs	r2, #8
   35c48:	f016 f811 	bl	4bc6e <memset>
}
   35c4c:	e7d1      	b.n	35bf2 <hci_vendor_cmd_handle_common+0x56>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   35c4e:	6889      	ldr	r1, [r1, #8]
   35c50:	2000      	movs	r0, #0
   35c52:	f7ff fd3b 	bl	356cc <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   35c56:	4b27      	ldr	r3, [pc, #156]	; (35cf4 <hci_vendor_cmd_handle_common+0x158>)
   35c58:	2101      	movs	r1, #1
   35c5a:	8818      	ldrh	r0, [r3, #0]
   35c5c:	f016 fd05 	bl	4c66a <bt_hci_cmd_complete_create>
   35c60:	2101      	movs	r1, #1
   35c62:	4605      	mov	r5, r0
   35c64:	3008      	adds	r0, #8
   35c66:	f019 ffd8 	bl	4fc1a <net_buf_simple_add>
	ccst->status = status;
   35c6a:	2300      	movs	r3, #0
   35c6c:	7003      	strb	r3, [r0, #0]
	*evt = cmd_complete_status(0x00);
   35c6e:	6025      	str	r5, [r4, #0]
}
   35c70:	e7bf      	b.n	35bf2 <hci_vendor_cmd_handle_common+0x56>
	const char build_info[] = HCI_VS_BUILD_INFO;
   35c72:	4d21      	ldr	r5, [pc, #132]	; (35cf8 <hci_vendor_cmd_handle_common+0x15c>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35c74:	4e1f      	ldr	r6, [pc, #124]	; (35cf4 <hci_vendor_cmd_handle_common+0x158>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   35c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   35c78:	f10d 0c04 	add.w	ip, sp, #4
   35c7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   35c80:	682b      	ldr	r3, [r5, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35c82:	8830      	ldrh	r0, [r6, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   35c84:	f88c 3000 	strb.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35c88:	2112      	movs	r1, #18
   35c8a:	f016 fcee 	bl	4c66a <bt_hci_cmd_complete_create>
   35c8e:	2112      	movs	r1, #18
   35c90:	6020      	str	r0, [r4, #0]
   35c92:	3008      	adds	r0, #8
   35c94:	f019 ffc1 	bl	4fc1a <net_buf_simple_add>
	rp->status = 0x00;
   35c98:	2300      	movs	r3, #0
   35c9a:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   35c9e:	2211      	movs	r2, #17
   35ca0:	a901      	add	r1, sp, #4
   35ca2:	f015 ffd9 	bl	4bc58 <memcpy>
}
   35ca6:	e7a4      	b.n	35bf2 <hci_vendor_cmd_handle_common+0x56>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35ca8:	4b12      	ldr	r3, [pc, #72]	; (35cf4 <hci_vendor_cmd_handle_common+0x158>)
   35caa:	2118      	movs	r1, #24
   35cac:	8818      	ldrh	r0, [r3, #0]
   35cae:	f016 fcdc 	bl	4c66a <bt_hci_cmd_complete_create>
   35cb2:	2118      	movs	r1, #24
   35cb4:	6020      	str	r0, [r4, #0]
   35cb6:	3008      	adds	r0, #8
   35cb8:	f019 ffaf 	bl	4fc1a <net_buf_simple_add>
	rp->status = 0x00;
   35cbc:	2300      	movs	r3, #0
   35cbe:	4604      	mov	r4, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   35cc0:	2101      	movs	r1, #1
	rp->status = 0x00;
   35cc2:	f800 3b02 	strb.w	r3, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   35cc6:	f00d fd03 	bl	436d0 <hci_vendor_read_static_addr>
   35cca:	7060      	strb	r0, [r4, #1]
}
   35ccc:	e791      	b.n	35bf2 <hci_vendor_cmd_handle_common+0x56>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35cce:	4b09      	ldr	r3, [pc, #36]	; (35cf4 <hci_vendor_cmd_handle_common+0x158>)
   35cd0:	2121      	movs	r1, #33	; 0x21
   35cd2:	8818      	ldrh	r0, [r3, #0]
   35cd4:	f016 fcc9 	bl	4c66a <bt_hci_cmd_complete_create>
   35cd8:	2121      	movs	r1, #33	; 0x21
   35cda:	6020      	str	r0, [r4, #0]
   35cdc:	3008      	adds	r0, #8
   35cde:	f019 ff9c 	bl	4fc1a <net_buf_simple_add>
	rp->status = 0x00;
   35ce2:	4601      	mov	r1, r0
   35ce4:	2300      	movs	r3, #0
   35ce6:	f801 3b11 	strb.w	r3, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   35cea:	3001      	adds	r0, #1
   35cec:	f00d fd40 	bl	43770 <hci_vendor_read_key_hierarchy_roots>
}
   35cf0:	e77f      	b.n	35bf2 <hci_vendor_cmd_handle_common+0x56>
   35cf2:	bf00      	nop
   35cf4:	200072ae 	.word	0x200072ae
   35cf8:	00052b08 	.word	0x00052b08

00035cfc <hci_cmd_handle>:
{
   35cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (cmd->len < sizeof(*chdr)) {
   35d00:	8983      	ldrh	r3, [r0, #12]
{
   35d02:	b08e      	sub	sp, #56	; 0x38
	struct net_buf *evt = NULL;
   35d04:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
   35d06:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   35d08:	9209      	str	r2, [sp, #36]	; 0x24
	if (cmd->len < sizeof(*chdr)) {
   35d0a:	d92e      	bls.n	35d6a <hci_cmd_handle+0x6e>
	return net_buf_simple_pull_mem(&buf->b, len);
   35d0c:	4604      	mov	r4, r0
   35d0e:	460e      	mov	r6, r1
   35d10:	3008      	adds	r0, #8
   35d12:	2103      	movs	r1, #3
   35d14:	f019 ffb2 	bl	4fc7c <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   35d18:	89a2      	ldrh	r2, [r4, #12]
   35d1a:	7883      	ldrb	r3, [r0, #2]
   35d1c:	429a      	cmp	r2, r3
   35d1e:	d324      	bcc.n	35d6a <hci_cmd_handle+0x6e>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   35d20:	8802      	ldrh	r2, [r0, #0]
   35d22:	4fd3      	ldr	r7, [pc, #844]	; (36070 <hci_cmd_handle+0x374>)
	switch (BT_OGF(_opcode)) {
   35d24:	f3c2 2385 	ubfx	r3, r2, #10, #6
   35d28:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   35d2a:	b290      	uxth	r0, r2
   35d2c:	803a      	strh	r2, [r7, #0]
	ocf = BT_OCF(_opcode);
   35d2e:	f3c2 0509 	ubfx	r5, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   35d32:	d809      	bhi.n	35d48 <hci_cmd_handle+0x4c>
   35d34:	b19b      	cbz	r3, 35d5e <hci_cmd_handle+0x62>
   35d36:	3b01      	subs	r3, #1
   35d38:	2b07      	cmp	r3, #7
   35d3a:	d810      	bhi.n	35d5e <hci_cmd_handle+0x62>
   35d3c:	e8df f003 	tbb	[pc, r3]
   35d40:	49260f1a 	.word	0x49260f1a
   35d44:	620f0f0f 	.word	0x620f0f0f
   35d48:	2b3f      	cmp	r3, #63	; 0x3f
   35d4a:	d108      	bne.n	35d5e <hci_cmd_handle+0x62>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   35d4c:	aa09      	add	r2, sp, #36	; 0x24
   35d4e:	4621      	mov	r1, r4
   35d50:	4628      	mov	r0, r5
   35d52:	f7ff ff23 	bl	35b9c <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   35d56:	3016      	adds	r0, #22
   35d58:	f040 8472 	bne.w	36640 <hci_cmd_handle+0x944>
	return bt_hci_cmd_status_create(_opcode, status);
   35d5c:	8838      	ldrh	r0, [r7, #0]
   35d5e:	2101      	movs	r1, #1
}
   35d60:	b00e      	add	sp, #56	; 0x38
   35d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_status_create(_opcode, status);
   35d66:	f016 bc92 	b.w	4c68e <bt_hci_cmd_status_create>
		return NULL;
   35d6a:	2400      	movs	r4, #0
}
   35d6c:	4620      	mov	r0, r4
   35d6e:	b00e      	add	sp, #56	; 0x38
   35d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (ocf) {
   35d74:	2d06      	cmp	r5, #6
   35d76:	f000 8418 	beq.w	365aa <hci_cmd_handle+0x8ae>
   35d7a:	2d1d      	cmp	r5, #29
   35d7c:	d1ef      	bne.n	35d5e <hci_cmd_handle+0x62>
	handle = sys_le16_to_cpu(cmd->handle);
   35d7e:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   35d80:	8818      	ldrh	r0, [r3, #0]
   35d82:	f004 faad 	bl	3a2e0 <ll_version_ind_send>
   35d86:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   35d88:	8838      	ldrh	r0, [r7, #0]
   35d8a:	e7e9      	b.n	35d60 <hci_cmd_handle+0x64>
	switch (ocf) {
   35d8c:	2d63      	cmp	r5, #99	; 0x63
   35d8e:	f000 8454 	beq.w	3663a <hci_cmd_handle+0x93e>
   35d92:	f200 80ed 	bhi.w	35f70 <hci_cmd_handle+0x274>
   35d96:	2d03      	cmp	r5, #3
   35d98:	f000 8429 	beq.w	365ee <hci_cmd_handle+0x8f2>
   35d9c:	2d2d      	cmp	r5, #45	; 0x2d
   35d9e:	f040 80d3 	bne.w	35f48 <hci_cmd_handle+0x24c>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
   35da2:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35da4:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   35da6:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   35da8:	f893 8002 	ldrb.w	r8, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35dac:	f016 fc5d 	bl	4c66a <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   35db0:	2104      	movs	r1, #4
   35db2:	4604      	mov	r4, r0
   35db4:	3008      	adds	r0, #8
   35db6:	f019 ff30 	bl	4fc1a <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   35dba:	b2b7      	uxth	r7, r6
   35dbc:	4605      	mov	r5, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   35dbe:	1cc3      	adds	r3, r0, #3
   35dc0:	4642      	mov	r2, r8
   35dc2:	4639      	mov	r1, r7
   35dc4:	2002      	movs	r0, #2
   35dc6:	f7ff fcc9 	bl	3575c <ll_tx_pwr_lvl_get>
	rp->handle = sys_cpu_to_le16(handle);
   35dca:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->status = status;
   35dce:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   35dd0:	e7cc      	b.n	35d6c <hci_cmd_handle+0x70>
	switch (ocf) {
   35dd2:	1e6a      	subs	r2, r5, #1
   35dd4:	2a08      	cmp	r2, #8
   35dd6:	d8c2      	bhi.n	35d5e <hci_cmd_handle+0x62>
   35dd8:	a301      	add	r3, pc, #4	; (adr r3, 35de0 <hci_cmd_handle+0xe4>)
   35dda:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   35dde:	bf00      	nop
   35de0:	0003607d 	.word	0x0003607d
   35de4:	00035fe7 	.word	0x00035fe7
   35de8:	00035fc3 	.word	0x00035fc3
   35dec:	00035d5f 	.word	0x00035d5f
   35df0:	00035d5f 	.word	0x00035d5f
   35df4:	00035d5f 	.word	0x00035d5f
   35df8:	00035d5f 	.word	0x00035d5f
   35dfc:	00035d5f 	.word	0x00035d5f
   35e00:	00035fa5 	.word	0x00035fa5
	switch (ocf) {
   35e04:	1e6a      	subs	r2, r5, #1
   35e06:	2a4d      	cmp	r2, #77	; 0x4d
   35e08:	d8a9      	bhi.n	35d5e <hci_cmd_handle+0x62>
   35e0a:	a301      	add	r3, pc, #4	; (adr r3, 35e10 <hci_cmd_handle+0x114>)
   35e0c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   35e10:	000362bf 	.word	0x000362bf
   35e14:	0003629f 	.word	0x0003629f
   35e18:	000363ef 	.word	0x000363ef
   35e1c:	00035d5f 	.word	0x00035d5f
   35e20:	000363e5 	.word	0x000363e5
   35e24:	000363c9 	.word	0x000363c9
   35e28:	000363a1 	.word	0x000363a1
   35e2c:	00036395 	.word	0x00036395
   35e30:	00036389 	.word	0x00036389
   35e34:	0003637f 	.word	0x0003637f
   35e38:	00036367 	.word	0x00036367
   35e3c:	0003657f 	.word	0x0003657f
   35e40:	0003654f 	.word	0x0003654f
   35e44:	00036547 	.word	0x00036547
   35e48:	00036529 	.word	0x00036529
   35e4c:	00036523 	.word	0x00036523
   35e50:	0003651b 	.word	0x0003651b
   35e54:	00036513 	.word	0x00036513
   35e58:	000364f3 	.word	0x000364f3
   35e5c:	000364eb 	.word	0x000364eb
   35e60:	000364c5 	.word	0x000364c5
   35e64:	000364b7 	.word	0x000364b7
   35e68:	00036487 	.word	0x00036487
   35e6c:	00036469 	.word	0x00036469
   35e70:	00036451 	.word	0x00036451
   35e74:	00036447 	.word	0x00036447
   35e78:	00036437 	.word	0x00036437
   35e7c:	00036281 	.word	0x00036281
   35e80:	00035d5f 	.word	0x00035d5f
   35e84:	00035d5f 	.word	0x00035d5f
   35e88:	00035d5f 	.word	0x00035d5f
   35e8c:	00036263 	.word	0x00036263
   35e90:	0003624b 	.word	0x0003624b
   35e94:	0003623b 	.word	0x0003623b
   35e98:	00036209 	.word	0x00036209
   35e9c:	000361fd 	.word	0x000361fd
   35ea0:	00035d5f 	.word	0x00035d5f
   35ea4:	00035d5f 	.word	0x00035d5f
   35ea8:	000361ef 	.word	0x000361ef
   35eac:	000361e7 	.word	0x000361e7
   35eb0:	000361e1 	.word	0x000361e1
   35eb4:	000361c3 	.word	0x000361c3
   35eb8:	00036199 	.word	0x00036199
   35ebc:	0003616f 	.word	0x0003616f
   35ec0:	0003614f 	.word	0x0003614f
   35ec4:	00036141 	.word	0x00036141
   35ec8:	000360f9 	.word	0x000360f9
   35ecc:	000360a5 	.word	0x000360a5
   35ed0:	00036349 	.word	0x00036349
   35ed4:	000362f5 	.word	0x000362f5
   35ed8:	00035d5f 	.word	0x00035d5f
   35edc:	00035d5f 	.word	0x00035d5f
   35ee0:	00035d5f 	.word	0x00035d5f
   35ee4:	00035d5f 	.word	0x00035d5f
   35ee8:	00035d5f 	.word	0x00035d5f
   35eec:	00035d5f 	.word	0x00035d5f
   35ef0:	00035d5f 	.word	0x00035d5f
   35ef4:	00035d5f 	.word	0x00035d5f
   35ef8:	00035d5f 	.word	0x00035d5f
   35efc:	00035d5f 	.word	0x00035d5f
   35f00:	00035d5f 	.word	0x00035d5f
   35f04:	00035d5f 	.word	0x00035d5f
   35f08:	00035d5f 	.word	0x00035d5f
   35f0c:	00035d5f 	.word	0x00035d5f
   35f10:	00035d5f 	.word	0x00035d5f
   35f14:	00035d5f 	.word	0x00035d5f
   35f18:	00035d5f 	.word	0x00035d5f
   35f1c:	00035d5f 	.word	0x00035d5f
   35f20:	00035d5f 	.word	0x00035d5f
   35f24:	00035d5f 	.word	0x00035d5f
   35f28:	00035d5f 	.word	0x00035d5f
   35f2c:	00035d5f 	.word	0x00035d5f
   35f30:	00035d5f 	.word	0x00035d5f
   35f34:	00035d5f 	.word	0x00035d5f
   35f38:	000362d5 	.word	0x000362d5
   35f3c:	00035d5f 	.word	0x00035d5f
   35f40:	00035d5f 	.word	0x00035d5f
   35f44:	000362cb 	.word	0x000362cb
	switch (ocf) {
   35f48:	2d01      	cmp	r5, #1
   35f4a:	f47f af08 	bne.w	35d5e <hci_cmd_handle+0x62>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   35f4e:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   35f50:	4b48      	ldr	r3, [pc, #288]	; (36074 <hci_cmd_handle+0x378>)
   35f52:	6811      	ldr	r1, [r2, #0]
   35f54:	6852      	ldr	r2, [r2, #4]
   35f56:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   35f58:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   35f5a:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   35f5c:	f016 fb85 	bl	4c66a <bt_hci_cmd_complete_create>
   35f60:	2101      	movs	r1, #1
   35f62:	4604      	mov	r4, r0
   35f64:	3008      	adds	r0, #8
   35f66:	f019 fe58 	bl	4fc1a <net_buf_simple_add>
	ccst->status = status;
   35f6a:	2300      	movs	r3, #0
   35f6c:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
   35f6e:	e6fd      	b.n	35d6c <hci_cmd_handle+0x70>
	switch (ocf) {
   35f70:	2d7b      	cmp	r5, #123	; 0x7b
   35f72:	f000 8323 	beq.w	365bc <hci_cmd_handle+0x8c0>
   35f76:	2d7c      	cmp	r5, #124	; 0x7c
   35f78:	f47f aef1 	bne.w	35d5e <hci_cmd_handle+0x62>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
   35f7c:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   35f7e:	881e      	ldrh	r6, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   35f80:	8859      	ldrh	r1, [r3, #2]
   35f82:	b2b0      	uxth	r0, r6
   35f84:	f004 faf0 	bl	3a568 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   35f88:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35f8a:	2103      	movs	r1, #3
   35f8c:	8838      	ldrh	r0, [r7, #0]
   35f8e:	f016 fb6c 	bl	4c66a <bt_hci_cmd_complete_create>
   35f92:	2103      	movs	r1, #3
   35f94:	4604      	mov	r4, r0
   35f96:	3008      	adds	r0, #8
   35f98:	f019 fe3f 	bl	4fc1a <net_buf_simple_add>
	rp->status = status;
   35f9c:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   35f9e:	f8a0 6001 	strh.w	r6, [r0, #1]
	if (err == -EINVAL) {
   35fa2:	e6e3      	b.n	35d6c <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35fa4:	2107      	movs	r1, #7
   35fa6:	f016 fb60 	bl	4c66a <bt_hci_cmd_complete_create>
   35faa:	2107      	movs	r1, #7
   35fac:	4604      	mov	r4, r0
   35fae:	3008      	adds	r0, #8
   35fb0:	f019 fe33 	bl	4fc1a <net_buf_simple_add>
	rp->status = 0x00;
   35fb4:	4601      	mov	r1, r0
   35fb6:	2000      	movs	r0, #0
   35fb8:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   35fbc:	f7ff fbb6 	bl	3572c <ll_addr_read>
	if (err == -EINVAL) {
   35fc0:	e6d4      	b.n	35d6c <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35fc2:	2109      	movs	r1, #9
   35fc4:	f016 fb51 	bl	4c66a <bt_hci_cmd_complete_create>
   35fc8:	2109      	movs	r1, #9
   35fca:	4604      	mov	r4, r0
   35fcc:	3008      	adds	r0, #8
   35fce:	f019 fe24 	bl	4fc1a <net_buf_simple_add>
	rp->status = 0x00;
   35fd2:	2100      	movs	r1, #0
   35fd4:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   35fd6:	2208      	movs	r2, #8
	rp->status = 0x00;
   35fd8:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   35fdc:	f015 fe47 	bl	4bc6e <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   35fe0:	2360      	movs	r3, #96	; 0x60
   35fe2:	716b      	strb	r3, [r5, #5]
	if (err == -EINVAL) {
   35fe4:	e6c2      	b.n	35d6c <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35fe6:	2141      	movs	r1, #65	; 0x41
   35fe8:	f016 fb3f 	bl	4c66a <bt_hci_cmd_complete_create>
   35fec:	2141      	movs	r1, #65	; 0x41
   35fee:	4604      	mov	r4, r0
   35ff0:	3008      	adds	r0, #8
   35ff2:	f019 fe12 	bl	4fc1a <net_buf_simple_add>
	rp->status = 0x00;
   35ff6:	2100      	movs	r1, #0
   35ff8:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   35ffa:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   35ffc:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   36000:	f015 fe35 	bl	4bc6e <memset>
	rp->commands[10] |= BIT(2);
   36004:	7aeb      	ldrb	r3, [r5, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   36006:	7bea      	ldrb	r2, [r5, #15]
	rp->commands[5] |= BIT(6) | BIT(7);
   36008:	79a9      	ldrb	r1, [r5, #6]
	rp->commands[32] |= BIT(4) | BIT(5);
   3600a:	f8d5 0021 	ldr.w	r0, [r5, #33]	; 0x21
	rp->commands[10] |= BIT(2);
   3600e:	f043 0304 	orr.w	r3, r3, #4
   36012:	72eb      	strb	r3, [r5, #11]
	rp->commands[15] |= BIT(1);
   36014:	7c2b      	ldrb	r3, [r5, #16]
   36016:	f043 0302 	orr.w	r3, r3, #2
   3601a:	742b      	strb	r3, [r5, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   3601c:	7eab      	ldrb	r3, [r5, #26]
   3601e:	f063 0308 	orn	r3, r3, #8
   36022:	76ab      	strb	r3, [r5, #26]
	rp->commands[0] |= BIT(5);
   36024:	786b      	ldrb	r3, [r5, #1]
	rp->commands[14] |= BIT(3) | BIT(5);
   36026:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[0] |= BIT(5);
   3602a:	f043 0320 	orr.w	r3, r3, #32
	rp->commands[14] |= BIT(3) | BIT(5);
   3602e:	73ea      	strb	r2, [r5, #15]
	rp->commands[0] |= BIT(5);
   36030:	706b      	strb	r3, [r5, #1]
	rp->commands[28] |= BIT(3);
   36032:	7f6a      	ldrb	r2, [r5, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   36034:	4b10      	ldr	r3, [pc, #64]	; (36078 <hci_cmd_handle+0x37c>)
	rp->commands[5] |= BIT(6) | BIT(7);
   36036:	f061 013f 	orn	r1, r1, #63	; 0x3f
	rp->commands[28] |= BIT(1) | BIT(2);
   3603a:	f042 020f 	orr.w	r2, r2, #15
	rp->commands[32] |= BIT(4) | BIT(5);
   3603e:	4303      	orrs	r3, r0
	rp->commands[5] |= BIT(6) | BIT(7);
   36040:	71a9      	strb	r1, [r5, #6]
	rp->commands[22] |= BIT(2);
   36042:	7de9      	ldrb	r1, [r5, #23]
	rp->commands[28] |= BIT(1) | BIT(2);
   36044:	776a      	strb	r2, [r5, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   36046:	f8c5 3021 	str.w	r3, [r5, #33]	; 0x21
	rp->commands[39] |= BIT(2);
   3604a:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   3604e:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
	rp->commands[22] |= BIT(2);
   36052:	f041 0104 	orr.w	r1, r1, #4
   36056:	75e9      	strb	r1, [r5, #23]
	rp->commands[39] |= BIT(2);
   36058:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[26] |= BIT(4) | BIT(5);
   3605c:	21ff      	movs	r1, #255	; 0xff
	rp->commands[38] |= BIT(7);
   3605e:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
   36062:	76e9      	strb	r1, [r5, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   36064:	7729      	strb	r1, [r5, #28]
	rp->commands[39] |= BIT(2);
   36066:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   3606a:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	if (err == -EINVAL) {
   3606e:	e67d      	b.n	35d6c <hci_cmd_handle+0x70>
   36070:	200072ae 	.word	0x200072ae
   36074:	20000190 	.word	0x20000190
   36078:	7ff9f030 	.word	0x7ff9f030
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3607c:	2109      	movs	r1, #9
   3607e:	f016 faf4 	bl	4c66a <bt_hci_cmd_complete_create>
   36082:	2109      	movs	r1, #9
   36084:	4604      	mov	r4, r0
   36086:	3008      	adds	r0, #8
   36088:	f019 fdc7 	bl	4fc1a <net_buf_simple_add>
	rp->status = 0x00;
   3608c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	rp->hci_revision = sys_cpu_to_le16(0);
   36090:	2300      	movs	r3, #0
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   36092:	4ac9      	ldr	r2, [pc, #804]	; (363b8 <hci_cmd_handle+0x6bc>)
	rp->status = 0x00;
   36094:	8001      	strh	r1, [r0, #0]
	rp->lmp_version = LL_VERSION_NUMBER;
   36096:	210c      	movs	r1, #12
	rp->hci_revision = sys_cpu_to_le16(0);
   36098:	7083      	strb	r3, [r0, #2]
   3609a:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = LL_VERSION_NUMBER;
   3609c:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   3609e:	f8c0 2005 	str.w	r2, [r0, #5]
	if (err == -EINVAL) {
   360a2:	e663      	b.n	35d6c <hci_cmd_handle+0x70>
	handle = sys_le16_to_cpu(cmd->handle);
   360a4:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   360a6:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   360a8:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   360aa:	f016 fade 	bl	4c66a <bt_hci_cmd_complete_create>
   360ae:	2105      	movs	r1, #5
   360b0:	4604      	mov	r4, r0
   360b2:	3008      	adds	r0, #8
   360b4:	f019 fdb1 	bl	4fc1a <net_buf_simple_add>
   360b8:	4605      	mov	r5, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   360ba:	1d2a      	adds	r2, r5, #4
	handle = sys_le16_to_cpu(cmd->handle);
   360bc:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   360be:	1ce9      	adds	r1, r5, #3
   360c0:	f004 f9aa 	bl	3a418 <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   360c4:	78eb      	ldrb	r3, [r5, #3]
   360c6:	792a      	ldrb	r2, [r5, #4]
	rp->status = status;
   360c8:	7028      	strb	r0, [r5, #0]
   360ca:	2b00      	cmp	r3, #0
   360cc:	fa93 f3a3 	rbit	r3, r3
   360d0:	fab3 f383 	clz	r3, r3
   360d4:	bf08      	it	eq
   360d6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   360da:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   360dc:	70eb      	strb	r3, [r5, #3]
   360de:	2a00      	cmp	r2, #0
   360e0:	fa92 f3a2 	rbit	r3, r2
   360e4:	fab3 f383 	clz	r3, r3
   360e8:	bf08      	it	eq
   360ea:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   360ee:	3301      	adds	r3, #1
	rp->handle = sys_cpu_to_le16(handle);
   360f0:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   360f4:	712b      	strb	r3, [r5, #4]
	if (err == -EINVAL) {
   360f6:	e639      	b.n	35d6c <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   360f8:	2109      	movs	r1, #9
   360fa:	f016 fab6 	bl	4c66a <bt_hci_cmd_complete_create>
   360fe:	2109      	movs	r1, #9
   36100:	4604      	mov	r4, r0
   36102:	3008      	adds	r0, #8
   36104:	f019 fd89 	bl	4fc1a <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   36108:	ab0a      	add	r3, sp, #40	; 0x28
   3610a:	4605      	mov	r5, r0
   3610c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   36110:	a908      	add	r1, sp, #32
   36112:	f10d 001e 	add.w	r0, sp, #30
   36116:	f004 f973 	bl	3a400 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   3611a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   3611e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   36122:	f8a5 2001 	strh.w	r2, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   36126:	f8a5 3003 	strh.w	r3, [r5, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   3612a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   3612e:	f8a5 3005 	strh.w	r3, [r5, #5]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   36132:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   36136:	f8a5 2007 	strh.w	r2, [r5, #7]
	rp->status = 0x00;
   3613a:	2300      	movs	r3, #0
   3613c:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
   3613e:	e615      	b.n	35d6c <hci_cmd_handle+0x70>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   36140:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   36142:	8818      	ldrh	r0, [r3, #0]
   36144:	f009 f95a 	bl	3f3fc <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   36148:	8838      	ldrh	r0, [r7, #0]
   3614a:	2101      	movs	r1, #1
   3614c:	e706      	b.n	35f5c <hci_cmd_handle+0x260>
	status = ll_rl_enable(cmd->enable);
   3614e:	68a3      	ldr	r3, [r4, #8]
   36150:	7818      	ldrb	r0, [r3, #0]
   36152:	f009 f93b 	bl	3f3cc <ll_rl_enable>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   36156:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   36158:	8838      	ldrh	r0, [r7, #0]
   3615a:	2101      	movs	r1, #1
   3615c:	f016 fa85 	bl	4c66a <bt_hci_cmd_complete_create>
   36160:	2101      	movs	r1, #1
   36162:	4604      	mov	r4, r0
   36164:	3008      	adds	r0, #8
   36166:	f019 fd58 	bl	4fc1a <net_buf_simple_add>
	ccst->status = status;
   3616a:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
   3616c:	e5fe      	b.n	35d6c <hci_cmd_handle+0x70>
	memcpy(dst, src, sizeof(*dst));
   3616e:	2207      	movs	r2, #7
   36170:	68a1      	ldr	r1, [r4, #8]
   36172:	a80a      	add	r0, sp, #40	; 0x28
   36174:	f015 fd70 	bl	4bc58 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36178:	2107      	movs	r1, #7
   3617a:	8838      	ldrh	r0, [r7, #0]
   3617c:	f016 fa75 	bl	4c66a <bt_hci_cmd_complete_create>
   36180:	2107      	movs	r1, #7
   36182:	4604      	mov	r4, r0
   36184:	3008      	adds	r0, #8
   36186:	f019 fd48 	bl	4fc1a <net_buf_simple_add>
   3618a:	4605      	mov	r5, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   3618c:	1c41      	adds	r1, r0, #1
   3618e:	a80a      	add	r0, sp, #40	; 0x28
   36190:	f009 f8ea 	bl	3f368 <ll_rl_lrpa_get>
   36194:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   36196:	e5e9      	b.n	35d6c <hci_cmd_handle+0x70>
   36198:	2207      	movs	r2, #7
   3619a:	68a1      	ldr	r1, [r4, #8]
   3619c:	a80a      	add	r0, sp, #40	; 0x28
   3619e:	f015 fd5b 	bl	4bc58 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   361a2:	2107      	movs	r1, #7
   361a4:	8838      	ldrh	r0, [r7, #0]
   361a6:	f016 fa60 	bl	4c66a <bt_hci_cmd_complete_create>
   361aa:	2107      	movs	r1, #7
   361ac:	4604      	mov	r4, r0
   361ae:	3008      	adds	r0, #8
   361b0:	f019 fd33 	bl	4fc1a <net_buf_simple_add>
   361b4:	4605      	mov	r5, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   361b6:	1c41      	adds	r1, r0, #1
   361b8:	a80a      	add	r0, sp, #40	; 0x28
   361ba:	f009 f89b 	bl	3f2f4 <ll_rl_crpa_get>
   361be:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   361c0:	e5d4      	b.n	35d6c <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   361c2:	2102      	movs	r1, #2
   361c4:	f016 fa51 	bl	4c66a <bt_hci_cmd_complete_create>
   361c8:	2102      	movs	r1, #2
   361ca:	4604      	mov	r4, r0
   361cc:	3008      	adds	r0, #8
   361ce:	f019 fd24 	bl	4fc1a <net_buf_simple_add>
   361d2:	4605      	mov	r5, r0
	rp->rl_size = ll_rl_size_get();
   361d4:	f008 ff2c 	bl	3f030 <ll_rl_size_get>
	rp->status = 0x00;
   361d8:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   361da:	7068      	strb	r0, [r5, #1]
	rp->status = 0x00;
   361dc:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
   361de:	e5c5      	b.n	35d6c <hci_cmd_handle+0x70>
	status = ll_rl_clear();
   361e0:	f008 ff28 	bl	3f034 <ll_rl_clear>
   361e4:	e7b7      	b.n	36156 <hci_cmd_handle+0x45a>
	status = ll_rl_remove(&cmd->peer_id_addr);
   361e6:	68a0      	ldr	r0, [r4, #8]
   361e8:	f008 ff68 	bl	3f0bc <ll_rl_remove>
   361ec:	e7b3      	b.n	36156 <hci_cmd_handle+0x45a>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
   361ee:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   361f0:	f100 0217 	add.w	r2, r0, #23
   361f4:	1dc1      	adds	r1, r0, #7
   361f6:	f009 fbcb 	bl	3f990 <ll_rl_add>
   361fa:	e7ac      	b.n	36156 <hci_cmd_handle+0x45a>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
   361fc:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   361fe:	8859      	ldrh	r1, [r3, #2]
   36200:	8818      	ldrh	r0, [r3, #0]
   36202:	f004 f8f3 	bl	3a3ec <ll_length_default_set>
   36206:	e7a6      	b.n	36156 <hci_cmd_handle+0x45a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36208:	2105      	movs	r1, #5
   3620a:	f016 fa2e 	bl	4c66a <bt_hci_cmd_complete_create>
   3620e:	2105      	movs	r1, #5
   36210:	4604      	mov	r4, r0
   36212:	3008      	adds	r0, #8
   36214:	f019 fd01 	bl	4fc1a <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   36218:	a90a      	add	r1, sp, #40	; 0x28
   3621a:	4605      	mov	r5, r0
   3621c:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   36220:	f004 f8d8 	bl	3a3d4 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   36224:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   36228:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   3622c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   36230:	f8a5 2003 	strh.w	r2, [r5, #3]
	rp->status = 0x00;
   36234:	2300      	movs	r3, #0
   36236:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
   36238:	e598      	b.n	35d6c <hci_cmd_handle+0x70>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
   3623a:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   3623c:	881e      	ldrh	r6, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   3623e:	889a      	ldrh	r2, [r3, #4]
   36240:	8859      	ldrh	r1, [r3, #2]
   36242:	b2b0      	uxth	r0, r6
   36244:	f004 f874 	bl	3a330 <ll_length_req_send>
   36248:	e69e      	b.n	35f88 <hci_cmd_handle+0x28c>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
   3624a:	68a2      	ldr	r2, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   3624c:	8816      	ldrh	r6, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   3624e:	7892      	ldrb	r2, [r2, #2]
   36250:	2300      	movs	r3, #0
   36252:	e9cd 3301 	strd	r3, r3, [sp, #4]
   36256:	9300      	str	r3, [sp, #0]
   36258:	2102      	movs	r1, #2
   3625a:	b2b0      	uxth	r0, r6
   3625c:	f003 ff20 	bl	3a0a0 <ll_conn_update>
   36260:	e692      	b.n	35f88 <hci_cmd_handle+0x28c>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
   36262:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   36264:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   36266:	8816      	ldrh	r6, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   36268:	8853      	ldrh	r3, [r2, #2]
   3626a:	9102      	str	r1, [sp, #8]
   3626c:	88d1      	ldrh	r1, [r2, #6]
   3626e:	9101      	str	r1, [sp, #4]
   36270:	8891      	ldrh	r1, [r2, #4]
   36272:	9100      	str	r1, [sp, #0]
   36274:	2200      	movs	r2, #0
   36276:	2102      	movs	r1, #2
   36278:	b2b0      	uxth	r0, r6
   3627a:	f003 ff11 	bl	3a0a0 <ll_conn_update>
   3627e:	e683      	b.n	35f88 <hci_cmd_handle+0x28c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36280:	2109      	movs	r1, #9
   36282:	f016 f9f2 	bl	4c66a <bt_hci_cmd_complete_create>
   36286:	2109      	movs	r1, #9
   36288:	4604      	mov	r4, r0
   3628a:	3008      	adds	r0, #8
   3628c:	f019 fcc5 	bl	4fc1a <net_buf_simple_add>
	rp->status = 0x00;
   36290:	494a      	ldr	r1, [pc, #296]	; (363bc <hci_cmd_handle+0x6c0>)
   36292:	4a4b      	ldr	r2, [pc, #300]	; (363c0 <hci_cmd_handle+0x6c4>)
   36294:	6001      	str	r1, [r0, #0]
	dst[1] = val >> 8;
   36296:	2300      	movs	r3, #0
   36298:	6042      	str	r2, [r0, #4]
   3629a:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   3629c:	e566      	b.n	35d6c <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3629e:	2104      	movs	r1, #4
   362a0:	f016 f9e3 	bl	4c66a <bt_hci_cmd_complete_create>
   362a4:	2104      	movs	r1, #4
   362a6:	4604      	mov	r4, r0
   362a8:	3008      	adds	r0, #8
   362aa:	f019 fcb6 	bl	4fc1a <net_buf_simple_add>
	rp->status = 0x00;
   362ae:	2300      	movs	r3, #0
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   362b0:	211b      	movs	r1, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   362b2:	2203      	movs	r2, #3
	rp->status = 0x00;
   362b4:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   362b6:	7041      	strb	r1, [r0, #1]
   362b8:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   362ba:	70c2      	strb	r2, [r0, #3]
	if (err == -EINVAL) {
   362bc:	e556      	b.n	35d6c <hci_cmd_handle+0x70>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   362be:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   362c0:	4b40      	ldr	r3, [pc, #256]	; (363c4 <hci_cmd_handle+0x6c8>)
   362c2:	6811      	ldr	r1, [r2, #0]
   362c4:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   362c6:	6019      	str	r1, [r3, #0]
   362c8:	e646      	b.n	35f58 <hci_cmd_handle+0x25c>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
   362ca:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   362cc:	79c1      	ldrb	r1, [r0, #7]
   362ce:	f009 f89f 	bl	3f410 <ll_priv_mode_set>
   362d2:	e740      	b.n	36156 <hci_cmd_handle+0x45a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   362d4:	2103      	movs	r1, #3
   362d6:	f016 f9c8 	bl	4c66a <bt_hci_cmd_complete_create>
   362da:	2103      	movs	r1, #3
   362dc:	4604      	mov	r4, r0
   362de:	3008      	adds	r0, #8
   362e0:	f019 fc9b 	bl	4fc1a <net_buf_simple_add>
	rp->status = 0x00;
   362e4:	4601      	mov	r1, r0
   362e6:	2300      	movs	r3, #0
   362e8:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   362ec:	3001      	adds	r0, #1
   362ee:	f7ff fa45 	bl	3577c <ll_tx_pwr_get>
	if (err == -EINVAL) {
   362f2:	e53b      	b.n	35d6c <hci_cmd_handle+0x70>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
   362f4:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   362f6:	7895      	ldrb	r5, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
   362f8:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   362fa:	8816      	ldrh	r6, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   362fc:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   36300:	07eb      	lsls	r3, r5, #31
		cmd->tx_phys |= mask_phys;
   36302:	bf48      	it	mi
   36304:	f041 0103 	orrmi.w	r1, r1, #3
		cmd->rx_phys |= mask_phys;
   36308:	7913      	ldrb	r3, [r2, #4]
		cmd->tx_phys |= mask_phys;
   3630a:	bf48      	it	mi
   3630c:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   3630e:	07ad      	lsls	r5, r5, #30
		cmd->rx_phys |= mask_phys;
   36310:	bf44      	itt	mi
   36312:	f043 0303 	orrmi.w	r3, r3, #3
   36316:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   36318:	ea41 0203 	orr.w	r2, r1, r3
   3631c:	2a03      	cmp	r2, #3
   3631e:	f200 8198 	bhi.w	36652 <hci_cmd_handle+0x956>
	if (!(cmd->tx_phys & 0x07) ||
   36322:	074d      	lsls	r5, r1, #29
   36324:	f000 8192 	beq.w	3664c <hci_cmd_handle+0x950>
   36328:	075a      	lsls	r2, r3, #29
   3632a:	f000 818f 	beq.w	3664c <hci_cmd_handle+0x950>
	if (phy_opts & 0x03) {
   3632e:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   36332:	bf1c      	itt	ne
   36334:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   36338:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   3633c:	4630      	mov	r0, r6
   3633e:	f004 f897 	bl	3a470 <ll_phy_req_send>
   36342:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   36344:	8838      	ldrh	r0, [r7, #0]
   36346:	e50b      	b.n	35d60 <hci_cmd_handle+0x64>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
   36348:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   3634a:	781a      	ldrb	r2, [r3, #0]
   3634c:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   3634e:	bf4a      	itet	mi
   36350:	2007      	movmi	r0, #7
   36352:	7858      	ldrbpl	r0, [r3, #1]
   36354:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   36356:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   36358:	bf4a      	itet	mi
   3635a:	2107      	movmi	r1, #7
	status = ll_terminate_ind_send(handle, cmd->reason);
   3635c:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   3635e:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   36360:	f004 f87c 	bl	3a45c <ll_phy_default_set>
   36364:	e6f7      	b.n	36156 <hci_cmd_handle+0x45a>
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
   36366:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   36368:	7963      	ldrb	r3, [r4, #5]
   3636a:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   3636e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   36372:	7820      	ldrb	r0, [r4, #0]
   36374:	79a4      	ldrb	r4, [r4, #6]
   36376:	9400      	str	r4, [sp, #0]
   36378:	f7f0 fd12 	bl	26da0 <ll_scan_params_set>
   3637c:	e6eb      	b.n	36156 <hci_cmd_handle+0x45a>
	status = ll_adv_enable(cmd->enable);
   3637e:	68a3      	ldr	r3, [r4, #8]
   36380:	7818      	ldrb	r0, [r3, #0]
   36382:	f7f0 fa85 	bl	26890 <ll_adv_enable>
   36386:	e6e6      	b.n	36156 <hci_cmd_handle+0x45a>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   36388:	68a1      	ldr	r1, [r4, #8]
   3638a:	f811 0b01 	ldrb.w	r0, [r1], #1
   3638e:	f002 fdef 	bl	38f70 <ll_adv_scan_rsp_set>
   36392:	e6e0      	b.n	36156 <hci_cmd_handle+0x45a>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   36394:	68a1      	ldr	r1, [r4, #8]
   36396:	f811 0b01 	ldrb.w	r0, [r1], #1
   3639a:	f002 fd9d 	bl	38ed8 <ll_adv_data_set>
   3639e:	e6da      	b.n	36156 <hci_cmd_handle+0x45a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   363a0:	2102      	movs	r1, #2
   363a2:	f016 f962 	bl	4c66a <bt_hci_cmd_complete_create>
   363a6:	2102      	movs	r1, #2
   363a8:	4604      	mov	r4, r0
   363aa:	3008      	adds	r0, #8
   363ac:	f019 fc35 	bl	4fc1a <net_buf_simple_add>
	rp->status = 0x00;
   363b0:	2300      	movs	r3, #0
   363b2:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   363b4:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   363b6:	e4d9      	b.n	35d6c <hci_cmd_handle+0x70>
   363b8:	ffff05f1 	.word	0xffff05f1
   363bc:	3fffff00 	.word	0x3fffff00
   363c0:	0003ffff 	.word	0x0003ffff
   363c4:	20000188 	.word	0x20000188
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
   363c8:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   363ca:	7ba5      	ldrb	r5, [r4, #14]
   363cc:	79a3      	ldrb	r3, [r4, #6]
   363ce:	7962      	ldrb	r2, [r4, #5]
   363d0:	7921      	ldrb	r1, [r4, #4]
   363d2:	8820      	ldrh	r0, [r4, #0]
   363d4:	9502      	str	r5, [sp, #8]
   363d6:	7b65      	ldrb	r5, [r4, #13]
   363d8:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   363da:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   363dc:	9400      	str	r4, [sp, #0]
   363de:	f002 fb8d 	bl	38afc <ll_adv_params_set>
   363e2:	e6b8      	b.n	36156 <hci_cmd_handle+0x45a>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   363e4:	68a1      	ldr	r1, [r4, #8]
   363e6:	2001      	movs	r0, #1
   363e8:	f7ff f970 	bl	356cc <ll_addr_set>
   363ec:	e6b3      	b.n	36156 <hci_cmd_handle+0x45a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   363ee:	2109      	movs	r1, #9
   363f0:	f016 f93b 	bl	4c66a <bt_hci_cmd_complete_create>
   363f4:	2109      	movs	r1, #9
   363f6:	4604      	mov	r4, r0
   363f8:	3008      	adds	r0, #8
   363fa:	f019 fc0e 	bl	4fc1a <net_buf_simple_add>
	rp->status = 0x00;
   363fe:	2500      	movs	r5, #0
   36400:	4606      	mov	r6, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   36402:	2208      	movs	r2, #8
   36404:	4629      	mov	r1, r5
	rp->status = 0x00;
   36406:	f800 5b01 	strb.w	r5, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   3640a:	f015 fc30 	bl	4bc6e <memset>
	sys_put_le64(ll_feat_get(), rp->features);
   3640e:	f000 fe29 	bl	37064 <ll_feat_get>
	dst[0] = val;
   36412:	462b      	mov	r3, r5
   36414:	f361 0307 	bfi	r3, r1, #0, #8
	dst[1] = val >> 8;
   36418:	f3c1 2207 	ubfx	r2, r1, #8, #8
	dst[0] = val;
   3641c:	f362 230f 	bfi	r3, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   36420:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
   36422:	f361 4317 	bfi	r3, r1, #16, #8
	dst[1] = val >> 8;
   36426:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
   36428:	f361 631f 	bfi	r3, r1, #24, #8
   3642c:	f8c6 0001 	str.w	r0, [r6, #1]
   36430:	f8c6 3005 	str.w	r3, [r6, #5]
	if (err == -EINVAL) {
   36434:	e49a      	b.n	35d6c <hci_cmd_handle+0x70>
	handle = sys_le16_to_cpu(cmd->handle);
   36436:	68a3      	ldr	r3, [r4, #8]
   36438:	881e      	ldrh	r6, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   3643a:	2200      	movs	r2, #0
   3643c:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   3643e:	b2b0      	uxth	r0, r6
   36440:	f007 ff64 	bl	3e30c <ll_start_enc_req_send>
   36444:	e5a0      	b.n	35f88 <hci_cmd_handle+0x28c>
	handle = sys_le16_to_cpu(cmd->handle);
   36446:	68a2      	ldr	r2, [r4, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   36448:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   3644a:	f832 6b02 	ldrh.w	r6, [r2], #2
   3644e:	e7f6      	b.n	3643e <hci_cmd_handle+0x742>
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
   36450:	68a2      	ldr	r2, [r4, #8]
				 (uint8_t *)&cmd->rand,
   36452:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
   36454:	f102 030c 	add.w	r3, r2, #12
   36458:	f831 0b02 	ldrh.w	r0, [r1], #2
   3645c:	320a      	adds	r2, #10
   3645e:	f008 f869 	bl	3e534 <ll_enc_req_send>
   36462:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   36464:	8838      	ldrh	r0, [r7, #0]
   36466:	e47b      	b.n	35d60 <hci_cmd_handle+0x64>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36468:	2109      	movs	r1, #9
   3646a:	f016 f8fe 	bl	4c66a <bt_hci_cmd_complete_create>
   3646e:	2109      	movs	r1, #9
   36470:	4604      	mov	r4, r0
   36472:	3008      	adds	r0, #8
   36474:	f019 fbd1 	bl	4fc1a <net_buf_simple_add>
	rp->status = 0x00;
   36478:	2300      	movs	r3, #0
   3647a:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   3647e:	2108      	movs	r1, #8
   36480:	f009 ff86 	bl	40390 <lll_csrand_get>
	if (err == -EINVAL) {
   36484:	e472      	b.n	35d6c <hci_cmd_handle+0x70>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   36486:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   36488:	aa0a      	add	r2, sp, #40	; 0x28
   3648a:	2300      	movs	r3, #0
   3648c:	f100 0110 	add.w	r1, r0, #16
   36490:	f00c faf8 	bl	42a84 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36494:	8838      	ldrh	r0, [r7, #0]
   36496:	2111      	movs	r1, #17
   36498:	f016 f8e7 	bl	4c66a <bt_hci_cmd_complete_create>
   3649c:	2111      	movs	r1, #17
   3649e:	4604      	mov	r4, r0
   364a0:	3008      	adds	r0, #8
   364a2:	f019 fbba 	bl	4fc1a <net_buf_simple_add>
	rp->status = 0x00;
   364a6:	2300      	movs	r3, #0
   364a8:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   364ac:	2210      	movs	r2, #16
   364ae:	a90a      	add	r1, sp, #40	; 0x28
   364b0:	f015 fbd2 	bl	4bc58 <memcpy>
	if (err == -EINVAL) {
   364b4:	e45a      	b.n	35d6c <hci_cmd_handle+0x70>
	handle = sys_le16_to_cpu(cmd->handle);
   364b6:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   364b8:	8818      	ldrh	r0, [r3, #0]
   364ba:	f003 fee9 	bl	3a290 <ll_feature_req_send>
   364be:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   364c0:	8838      	ldrh	r0, [r7, #0]
   364c2:	e44d      	b.n	35d60 <hci_cmd_handle+0x64>
	handle = sys_le16_to_cpu(cmd->handle);
   364c4:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   364c6:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   364c8:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   364ca:	f016 f8ce 	bl	4c66a <bt_hci_cmd_complete_create>
   364ce:	2108      	movs	r1, #8
   364d0:	4604      	mov	r4, r0
   364d2:	4408      	add	r0, r1
   364d4:	f019 fba1 	bl	4fc1a <net_buf_simple_add>
   364d8:	4605      	mov	r5, r0
	status = ll_chm_get(handle, rp->ch_map);
   364da:	1ce9      	adds	r1, r5, #3
	handle = sys_le16_to_cpu(cmd->handle);
   364dc:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   364de:	f003 fe73 	bl	3a1c8 <ll_chm_get>
	rp->handle = sys_le16_to_cpu(handle);
   364e2:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->status = status;
   364e6:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   364e8:	e440      	b.n	35d6c <hci_cmd_handle+0x70>
	status = ll_chm_update(&cmd->ch_map[0]);
   364ea:	68a0      	ldr	r0, [r4, #8]
   364ec:	f008 faee 	bl	3eacc <ll_chm_update>
   364f0:	e631      	b.n	36156 <hci_cmd_handle+0x45a>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
   364f2:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   364f4:	8911      	ldrh	r1, [r2, #8]
   364f6:	8853      	ldrh	r3, [r2, #2]
   364f8:	8810      	ldrh	r0, [r2, #0]
   364fa:	9102      	str	r1, [sp, #8]
   364fc:	88d1      	ldrh	r1, [r2, #6]
   364fe:	9101      	str	r1, [sp, #4]
   36500:	8891      	ldrh	r1, [r2, #4]
   36502:	9100      	str	r1, [sp, #0]
   36504:	2200      	movs	r2, #0
   36506:	4611      	mov	r1, r2
   36508:	f003 fdca 	bl	3a0a0 <ll_conn_update>
   3650c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   3650e:	8838      	ldrh	r0, [r7, #0]
   36510:	e426      	b.n	35d60 <hci_cmd_handle+0x64>
	status = ll_fal_remove(&cmd->addr);
   36512:	68a0      	ldr	r0, [r4, #8]
   36514:	f008 fcf8 	bl	3ef08 <ll_fal_remove>
   36518:	e61d      	b.n	36156 <hci_cmd_handle+0x45a>
	status = ll_fal_add(&cmd->addr);
   3651a:	68a0      	ldr	r0, [r4, #8]
   3651c:	f008 fc66 	bl	3edec <ll_fal_add>
   36520:	e619      	b.n	36156 <hci_cmd_handle+0x45a>
	status = ll_fal_clear();
   36522:	f008 fc39 	bl	3ed98 <ll_fal_clear>
   36526:	e616      	b.n	36156 <hci_cmd_handle+0x45a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   36528:	2102      	movs	r1, #2
   3652a:	f016 f89e 	bl	4c66a <bt_hci_cmd_complete_create>
   3652e:	2102      	movs	r1, #2
   36530:	4604      	mov	r4, r0
   36532:	3008      	adds	r0, #8
   36534:	f019 fb71 	bl	4fc1a <net_buf_simple_add>
	rp->status = 0x00;
   36538:	2300      	movs	r3, #0
   3653a:	7003      	strb	r3, [r0, #0]
   3653c:	4605      	mov	r5, r0
	rp->fal_size = ll_fal_size_get();
   3653e:	f008 fc29 	bl	3ed94 <ll_fal_size_get>
   36542:	7068      	strb	r0, [r5, #1]
	if (err == -EINVAL) {
   36544:	e412      	b.n	35d6c <hci_cmd_handle+0x70>
	status = ll_connect_disable(node_rx);
   36546:	4630      	mov	r0, r6
   36548:	f007 ffa6 	bl	3e498 <ll_connect_disable>
   3654c:	e603      	b.n	36156 <hci_cmd_handle+0x45a>
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
   3654e:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
   36550:	f8b4 5013 	ldrh.w	r5, [r4, #19]
   36554:	8861      	ldrh	r1, [r4, #2]
   36556:	7963      	ldrb	r3, [r4, #5]
   36558:	7922      	ldrb	r2, [r4, #4]
   3655a:	8820      	ldrh	r0, [r4, #0]
   3655c:	9504      	str	r5, [sp, #16]
   3655e:	f8b4 5011 	ldrh.w	r5, [r4, #17]
   36562:	9503      	str	r5, [sp, #12]
   36564:	f8b4 500f 	ldrh.w	r5, [r4, #15]
   36568:	9502      	str	r5, [sp, #8]
   3656a:	7b25      	ldrb	r5, [r4, #12]
   3656c:	9501      	str	r5, [sp, #4]
				      &cmd->peer_addr.a.val[0],
   3656e:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
   36570:	9400      	str	r4, [sp, #0]
   36572:	f7f1 fb41 	bl	27bf8 <ll_create_connection>
   36576:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   36578:	8838      	ldrh	r0, [r7, #0]
   3657a:	f7ff bbf1 	b.w	35d60 <hci_cmd_handle+0x64>
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
   3657e:	68a3      	ldr	r3, [r4, #8]
	if (cmd->enable && cmd->filter_dup) {
   36580:	7818      	ldrb	r0, [r3, #0]
   36582:	2800      	cmp	r0, #0
   36584:	d05f      	beq.n	36646 <hci_cmd_handle+0x94a>
   36586:	785b      	ldrb	r3, [r3, #1]
   36588:	2b00      	cmp	r3, #0
   3658a:	d05c      	beq.n	36646 <hci_cmd_handle+0x94a>
			dup_curr = 0U;
   3658c:	4a32      	ldr	r2, [pc, #200]	; (36658 <hci_cmd_handle+0x95c>)
   3658e:	2300      	movs	r3, #0
   36590:	6013      	str	r3, [r2, #0]
   36592:	4a32      	ldr	r2, [pc, #200]	; (3665c <hci_cmd_handle+0x960>)
   36594:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
   36596:	f002 fd65 	bl	39064 <ll_scan_enable>
		status = BT_HCI_ERR_SUCCESS;
   3659a:	280c      	cmp	r0, #12
	status = ll_scan_enable(cmd->enable);
   3659c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   3659e:	f04f 0101 	mov.w	r1, #1
   365a2:	8838      	ldrh	r0, [r7, #0]
		status = BT_HCI_ERR_SUCCESS;
   365a4:	bf08      	it	eq
   365a6:	2500      	moveq	r5, #0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   365a8:	e5d8      	b.n	3615c <hci_cmd_handle+0x460>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
   365aa:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   365ac:	7899      	ldrb	r1, [r3, #2]
   365ae:	8818      	ldrh	r0, [r3, #0]
   365b0:	f003 fe2e 	bl	3a210 <ll_terminate_ind_send>
   365b4:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   365b6:	8838      	ldrh	r0, [r7, #0]
   365b8:	f7ff bbd2 	b.w	35d60 <hci_cmd_handle+0x64>
	handle = sys_le16_to_cpu(cmd->handle);
   365bc:	68a3      	ldr	r3, [r4, #8]
   365be:	881e      	ldrh	r6, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   365c0:	a90a      	add	r1, sp, #40	; 0x28
   365c2:	b2b0      	uxth	r0, r6
   365c4:	f003 ffaa 	bl	3a51c <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   365c8:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   365ca:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   365cc:	8838      	ldrh	r0, [r7, #0]
   365ce:	f016 f84c 	bl	4c66a <bt_hci_cmd_complete_create>
   365d2:	2105      	movs	r1, #5
   365d4:	4604      	mov	r4, r0
   365d6:	3008      	adds	r0, #8
   365d8:	f019 fb1f 	bl	4fc1a <net_buf_simple_add>
	rp->status = status;
   365dc:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   365de:	f8a0 6001 	strh.w	r6, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   365e2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   365e6:	f8a0 3003 	strh.w	r3, [r0, #3]
	if (err == -EINVAL) {
   365ea:	f7ff bbbf 	b.w	35d6c <hci_cmd_handle+0x70>
	dup_count = DUP_FILTER_DISABLED;
   365ee:	481b      	ldr	r0, [pc, #108]	; (3665c <hci_cmd_handle+0x960>)
	event_mask = DEFAULT_EVENT_MASK;
   365f0:	491b      	ldr	r1, [pc, #108]	; (36660 <hci_cmd_handle+0x964>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   365f2:	4a1c      	ldr	r2, [pc, #112]	; (36664 <hci_cmd_handle+0x968>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   365f4:	4b1c      	ldr	r3, [pc, #112]	; (36668 <hci_cmd_handle+0x96c>)
	dup_count = DUP_FILTER_DISABLED;
   365f6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   365fa:	6004      	str	r4, [r0, #0]
	event_mask = DEFAULT_EVENT_MASK;
   365fc:	f641 75ff 	movw	r5, #8191	; 0x1fff
   36600:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   36604:	e9c1 4500 	strd	r4, r5, [r1]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   36608:	2000      	movs	r0, #0
   3660a:	2100      	movs	r1, #0
   3660c:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   36610:	201f      	movs	r0, #31
   36612:	2100      	movs	r1, #0
   36614:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   36618:	f001 fe98 	bl	3834c <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   3661c:	2101      	movs	r1, #1
   3661e:	8838      	ldrh	r0, [r7, #0]
   36620:	f016 f823 	bl	4c66a <bt_hci_cmd_complete_create>
   36624:	2101      	movs	r1, #1
   36626:	4604      	mov	r4, r0
   36628:	3008      	adds	r0, #8
   3662a:	f019 faf6 	bl	4fc1a <net_buf_simple_add>
	conn_count = 0U;
   3662e:	4a0f      	ldr	r2, [pc, #60]	; (3666c <hci_cmd_handle+0x970>)
	ccst->status = status;
   36630:	2300      	movs	r3, #0
   36632:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   36634:	6013      	str	r3, [r2, #0]
	if (err == -EINVAL) {
   36636:	f7ff bb99 	b.w	35d6c <hci_cmd_handle+0x70>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   3663a:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   3663c:	4b09      	ldr	r3, [pc, #36]	; (36664 <hci_cmd_handle+0x968>)
   3663e:	e640      	b.n	362c2 <hci_cmd_handle+0x5c6>
	return evt;
   36640:	9c09      	ldr	r4, [sp, #36]	; 0x24
   36642:	f7ff bb93 	b.w	35d6c <hci_cmd_handle+0x70>
		dup_count = DUP_FILTER_DISABLED;
   36646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3664a:	e7a2      	b.n	36592 <hci_cmd_handle+0x896>
	return bt_hci_cmd_status_create(_opcode, status);
   3664c:	2112      	movs	r1, #18
   3664e:	f7ff bb87 	b.w	35d60 <hci_cmd_handle+0x64>
   36652:	2111      	movs	r1, #17
   36654:	f7ff bb84 	b.w	35d60 <hci_cmd_handle+0x64>
   36658:	20004b4c 	.word	0x20004b4c
   3665c:	20004b50 	.word	0x20004b50
   36660:	20000190 	.word	0x20000190
   36664:	20003358 	.word	0x20003358
   36668:	20000188 	.word	0x20000188
   3666c:	20004b48 	.word	0x20004b48

00036670 <hci_acl_handle>:
{
   36670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   36674:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   36676:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   36678:	2b03      	cmp	r3, #3
	*evt = NULL;
   3667a:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   3667c:	d92e      	bls.n	366dc <hci_acl_handle+0x6c>
	return net_buf_simple_pull_mem(&buf->b, len);
   3667e:	4605      	mov	r5, r0
   36680:	4688      	mov	r8, r1
   36682:	3008      	adds	r0, #8
   36684:	2104      	movs	r1, #4
   36686:	f019 faf9 	bl	4fc7c <net_buf_simple_pull_mem>
	if (buf->len < len) {
   3668a:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   3668c:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   3668e:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   36692:	42bb      	cmp	r3, r7
   36694:	d322      	bcc.n	366dc <hci_acl_handle+0x6c>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
   36696:	2f1b      	cmp	r7, #27
   36698:	d820      	bhi.n	366dc <hci_acl_handle+0x6c>
	node_tx = ll_tx_mem_acquire();
   3669a:	f003 fca7 	bl	39fec <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   3669e:	ea4f 3619 	mov.w	r6, r9, lsr #12
   366a2:	4633      	mov	r3, r6
	if (!node_tx) {
   366a4:	4604      	mov	r4, r0
   366a6:	b1f8      	cbz	r0, 366e8 <hci_acl_handle+0x78>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   366a8:	089b      	lsrs	r3, r3, #2
   366aa:	d117      	bne.n	366dc <hci_acl_handle+0x6c>
	switch (bt_acl_flags_pb(flags)) {
   366ac:	b1d6      	cbz	r6, 366e4 <hci_acl_handle+0x74>
   366ae:	2e01      	cmp	r6, #1
   366b0:	d114      	bne.n	366dc <hci_acl_handle+0x6c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   366b2:	7923      	ldrb	r3, [r4, #4]
	pdu_data->len = len;
   366b4:	7167      	strb	r7, [r4, #5]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   366b6:	f366 0301 	bfi	r3, r6, #0, #2
	memcpy(&pdu_data->lldata[0], buf->data, len);
   366ba:	68a9      	ldr	r1, [r5, #8]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   366bc:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   366be:	463a      	mov	r2, r7
   366c0:	1de0      	adds	r0, r4, #7
   366c2:	f015 fac9 	bl	4bc58 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   366c6:	4621      	mov	r1, r4
   366c8:	f3c9 000b 	ubfx	r0, r9, #0, #12
   366cc:	f003 fc9a 	bl	3a004 <ll_tx_mem_enqueue>
   366d0:	b908      	cbnz	r0, 366d6 <hci_acl_handle+0x66>
}
   366d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ll_tx_mem_release(node_tx);
   366d6:	4620      	mov	r0, r4
   366d8:	f003 fc8e 	bl	39ff8 <ll_tx_mem_release>
	switch (bt_acl_flags_pb(flags)) {
   366dc:	f06f 0015 	mvn.w	r0, #21
}
   366e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (bt_acl_flags_pb(flags)) {
   366e4:	2602      	movs	r6, #2
   366e6:	e7e4      	b.n	366b2 <hci_acl_handle+0x42>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   366e8:	4b0f      	ldr	r3, [pc, #60]	; (36728 <hci_acl_handle+0xb8>)
   366ea:	681b      	ldr	r3, [r3, #0]
   366ec:	019b      	lsls	r3, r3, #6
   366ee:	d517      	bpl.n	36720 <hci_acl_handle+0xb0>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   366f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   366f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   366f8:	2001      	movs	r0, #1
   366fa:	f7f7 f891 	bl	2d820 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   366fe:	2102      	movs	r1, #2
   36700:	f8c8 0000 	str.w	r0, [r8]
   36704:	3008      	adds	r0, #8
   36706:	f019 fa88 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = evt;
   3670a:	f44f 738d 	mov.w	r3, #282	; 0x11a
   3670e:	8003      	strh	r3, [r0, #0]
   36710:	f8d8 0000 	ldr.w	r0, [r8]
   36714:	2101      	movs	r1, #1
   36716:	3008      	adds	r0, #8
   36718:	f019 fa7f 	bl	4fc1a <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   3671c:	2301      	movs	r3, #1
   3671e:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
   36720:	f06f 0068 	mvn.w	r0, #104	; 0x68
   36724:	e7d5      	b.n	366d2 <hci_acl_handle+0x62>
   36726:	bf00      	nop
   36728:	20000190 	.word	0x20000190

0003672c <hci_disconn_complete_encode>:
{
   3672c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   3672e:	4b0e      	ldr	r3, [pc, #56]	; (36768 <hci_disconn_complete_encode+0x3c>)
   36730:	681b      	ldr	r3, [r3, #0]
   36732:	06db      	lsls	r3, r3, #27
   36734:	d400      	bmi.n	36738 <hci_disconn_complete_encode+0xc>
}
   36736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36738:	f102 0408 	add.w	r4, r2, #8
   3673c:	4606      	mov	r6, r0
   3673e:	460d      	mov	r5, r1
   36740:	4620      	mov	r0, r4
   36742:	2102      	movs	r1, #2
   36744:	f019 fa69 	bl	4fc1a <net_buf_simple_add>
   36748:	4603      	mov	r3, r0
	hdr->evt = evt;
   3674a:	f240 4205 	movw	r2, #1029	; 0x405
   3674e:	801a      	strh	r2, [r3, #0]
   36750:	4620      	mov	r0, r4
   36752:	2104      	movs	r1, #4
   36754:	f019 fa61 	bl	4fc1a <net_buf_simple_add>
	ep->status = 0x00;
   36758:	2700      	movs	r7, #0
   3675a:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   3675c:	f8a0 5001 	strh.w	r5, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   36760:	7832      	ldrb	r2, [r6, #0]
   36762:	70c2      	strb	r2, [r0, #3]
}
   36764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36766:	bf00      	nop
   36768:	20000190 	.word	0x20000190

0003676c <hci_disconn_complete_process>:
	conn_count--;
   3676c:	4a02      	ldr	r2, [pc, #8]	; (36778 <hci_disconn_complete_process+0xc>)
   3676e:	6813      	ldr	r3, [r2, #0]
   36770:	3b01      	subs	r3, #1
   36772:	6013      	str	r3, [r2, #0]
}
   36774:	4770      	bx	lr
   36776:	bf00      	nop
   36778:	20004b48 	.word	0x20004b48

0003677c <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   3677c:	7f03      	ldrb	r3, [r0, #28]
   3677e:	f003 0303 	and.w	r3, r3, #3
   36782:	3b01      	subs	r3, #1
   36784:	2b01      	cmp	r3, #1
{
   36786:	b570      	push	{r4, r5, r6, lr}
	handle = node_rx->hdr.handle;
   36788:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
   3678a:	d90d      	bls.n	367a8 <hci_acl_encode+0x2c>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   3678c:	4a15      	ldr	r2, [pc, #84]	; (367e4 <hci_acl_encode+0x68>)
   3678e:	4916      	ldr	r1, [pc, #88]	; (367e8 <hci_acl_encode+0x6c>)
   36790:	4816      	ldr	r0, [pc, #88]	; (367ec <hci_acl_encode+0x70>)
   36792:	f641 53bb 	movw	r3, #7611	; 0x1dbb
   36796:	f013 f930 	bl	499fa <printk>
   3679a:	4040      	eors	r0, r0
   3679c:	f380 8811 	msr	BASEPRI, r0
   367a0:	f04f 0003 	mov.w	r0, #3
   367a4:	df02      	svc	2
		break;
	}
}
   367a6:	bd70      	pop	{r4, r5, r6, pc}
   367a8:	4604      	mov	r4, r0
   367aa:	f101 0508 	add.w	r5, r1, #8
   367ae:	4628      	mov	r0, r5
   367b0:	2104      	movs	r1, #4
   367b2:	f019 fa32 	bl	4fc1a <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   367b6:	7f23      	ldrb	r3, [r4, #28]
   367b8:	f003 0303 	and.w	r3, r3, #3
   367bc:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   367be:	bf0c      	ite	eq
   367c0:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   367c4:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   367c8:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   367ca:	7f61      	ldrb	r1, [r4, #29]
   367cc:	8041      	strh	r1, [r0, #2]
   367ce:	4628      	mov	r0, r5
   367d0:	f019 fa23 	bl	4fc1a <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   367d4:	7f62      	ldrb	r2, [r4, #29]
   367d6:	f104 011f 	add.w	r1, r4, #31
}
   367da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   367de:	f015 ba3b 	b.w	4bc58 <memcpy>
   367e2:	bf00      	nop
   367e4:	00052b1c 	.word	0x00052b1c
   367e8:	00052ad0 	.word	0x00052ad0
   367ec:	00052a70 	.word	0x00052a70

000367f0 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   367f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   367f4:	f890 c004 	ldrb.w	ip, [r0, #4]
	handle = node_rx->hdr.handle;
   367f8:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   367fa:	f1bc 0f03 	cmp.w	ip, #3
{
   367fe:	b089      	sub	sp, #36	; 0x24
   36800:	4604      	mov	r4, r0
   36802:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   36804:	f100 071c 	add.w	r7, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   36808:	d01e      	beq.n	36848 <hci_evt_encode+0x58>
	switch (node_rx->hdr.type) {
   3680a:	f1ac 0c05 	sub.w	ip, ip, #5
   3680e:	f1bc 0f17 	cmp.w	ip, #23
   36812:	d833      	bhi.n	3687c <hci_evt_encode+0x8c>
   36814:	e8df f01c 	tbh	[pc, ip, lsl #1]
   36818:	00320042 	.word	0x00320042
   3681c:	00320032 	.word	0x00320032
   36820:	00320032 	.word	0x00320032
   36824:	00320032 	.word	0x00320032
   36828:	00320032 	.word	0x00320032
   3682c:	00320032 	.word	0x00320032
   36830:	00320032 	.word	0x00320032
   36834:	00320032 	.word	0x00320032
   36838:	00b90032 	.word	0x00b90032
   3683c:	011b0113 	.word	0x011b0113
   36840:	0161014a 	.word	0x0161014a
   36844:	01a40174 	.word	0x01a40174
	switch (pdu_data->llctrl.opcode) {
   36848:	7fc3      	ldrb	r3, [r0, #31]
   3684a:	3b03      	subs	r3, #3
   3684c:	2b12      	cmp	r3, #18
   3684e:	f200 81be 	bhi.w	36bce <hci_evt_encode+0x3de>
   36852:	e8df f013 	tbh	[pc, r3, lsl #1]
   36856:	023a      	.short	0x023a
   36858:	01bc01bc 	.word	0x01bc01bc
   3685c:	02810268 	.word	0x02810268
   36860:	01f001bc 	.word	0x01f001bc
   36864:	01bc01bc 	.word	0x01bc01bc
   36868:	01f901bc 	.word	0x01f901bc
   3686c:	021401bc 	.word	0x021401bc
   36870:	002001bc 	.word	0x002001bc
   36874:	01bc01bc 	.word	0x01bc01bc
   36878:	01ca01ca 	.word	0x01ca01ca
		LL_ASSERT(0);
   3687c:	4ab0      	ldr	r2, [pc, #704]	; (36b40 <hci_evt_encode+0x350>)
   3687e:	49b1      	ldr	r1, [pc, #708]	; (36b44 <hci_evt_encode+0x354>)
   36880:	48b1      	ldr	r0, [pc, #708]	; (36b48 <hci_evt_encode+0x358>)
   36882:	f641 43af 	movw	r3, #7343	; 0x1caf
   36886:	f013 f8b8 	bl	499fa <printk>
   3688a:	4040      	eors	r0, r0
   3688c:	f380 8811 	msr	BASEPRI, r0
   36890:	f04f 0003 	mov.w	r0, #3
   36894:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   36896:	b009      	add	sp, #36	; 0x24
   36898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   3689c:	4aab      	ldr	r2, [pc, #684]	; (36b4c <hci_evt_encode+0x35c>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   3689e:	7e03      	ldrb	r3, [r0, #24]
	direct_report = node_rx->hdr.rx_ftr.direct;
   368a0:	7ea6      	ldrb	r6, [r4, #26]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
   368a2:	f894 8019 	ldrb.w	r8, [r4, #25]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   368a6:	e892 0003 	ldmia.w	r2, {r0, r1}
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   368aa:	425b      	negs	r3, r3
   368ac:	b25f      	sxtb	r7, r3
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   368ae:	0c0b      	lsrs	r3, r1, #16
   368b0:	f88d 301e 	strb.w	r3, [sp, #30]
	if (adv->tx_addr) {
   368b4:	7f23      	ldrb	r3, [r4, #28]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   368b6:	f8ad 101c 	strh.w	r1, [sp, #28]
	if (adv->tx_addr) {
   368ba:	0659      	lsls	r1, r3, #25
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   368bc:	9006      	str	r0, [sp, #24]
	direct_report = node_rx->hdr.rx_ftr.direct;
   368be:	f3c6 0640 	ubfx	r6, r6, #1, #1
	if (adv->tx_addr) {
   368c2:	f100 826a 	bmi.w	36d9a <hci_evt_encode+0x5aa>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   368c6:	4ba2      	ldr	r3, [pc, #648]	; (36b50 <hci_evt_encode+0x360>)
   368c8:	685b      	ldr	r3, [r3, #4]
   368ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	if (direct_report) {
   368ce:	2e00      	cmp	r6, #0
   368d0:	f040 829e 	bne.w	36e10 <hci_evt_encode+0x620>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   368d4:	2b00      	cmp	r3, #0
   368d6:	d0de      	beq.n	36896 <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   368d8:	4b9e      	ldr	r3, [pc, #632]	; (36b54 <hci_evt_encode+0x364>)
   368da:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   368dc:	079b      	lsls	r3, r3, #30
   368de:	d5da      	bpl.n	36896 <hci_evt_encode+0xa6>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   368e0:	7f20      	ldrb	r0, [r4, #28]
   368e2:	f104 091e 	add.w	r9, r4, #30
   368e6:	f3c0 1180 	ubfx	r1, r0, #6, #1
   368ea:	464a      	mov	r2, r9
   368ec:	f000 000f 	and.w	r0, r0, #15
   368f0:	f7ff f8c2 	bl	35a78 <dup_found.constprop.0>
	if (dup_scan &&
   368f4:	2800      	cmp	r0, #0
   368f6:	d1ce      	bne.n	36896 <hci_evt_encode+0xa6>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   368f8:	7f23      	ldrb	r3, [r4, #28]
   368fa:	f003 030f 	and.w	r3, r3, #15
   368fe:	2b01      	cmp	r3, #1
   36900:	f000 833a 	beq.w	36f78 <hci_evt_encode+0x788>
		data_len = (adv->len - BDADDR_SIZE);
   36904:	7f62      	ldrb	r2, [r4, #29]
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   36906:	1d93      	adds	r3, r2, #6
		data_len = (adv->len - BDADDR_SIZE);
   36908:	f1a2 0a06 	sub.w	sl, r2, #6
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   3690c:	3205      	adds	r2, #5
		data_len = (adv->len - BDADDR_SIZE);
   3690e:	fa5f fa8a 	uxtb.w	sl, sl
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   36912:	fa5f fb83 	uxtb.w	fp, r3
	return net_buf_add(buf, melen);
   36916:	b2d3      	uxtb	r3, r2
   36918:	9305      	str	r3, [sp, #20]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   3691a:	4656      	mov	r6, sl
   3691c:	3508      	adds	r5, #8
   3691e:	2102      	movs	r1, #2
   36920:	4628      	mov	r0, r5
   36922:	f019 f97a 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = evt;
   36926:	233e      	movs	r3, #62	; 0x3e
   36928:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   3692a:	f880 b001 	strb.w	fp, [r0, #1]
   3692e:	2101      	movs	r1, #1
   36930:	4628      	mov	r0, r5
   36932:	f019 f972 	bl	4fc1a <net_buf_simple_add>
   36936:	4603      	mov	r3, r0
	me->subevent = subevt;
   36938:	2202      	movs	r2, #2
   3693a:	701a      	strb	r2, [r3, #0]
   3693c:	9905      	ldr	r1, [sp, #20]
   3693e:	4628      	mov	r0, r5
   36940:	f019 f96b 	bl	4fc1a <net_buf_simple_add>
	sep->num_reports = 1U;
   36944:	2301      	movs	r3, #1
   36946:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   36948:	7f23      	ldrb	r3, [r4, #28]
   3694a:	f003 030f 	and.w	r3, r3, #15
   3694e:	3320      	adds	r3, #32
   36950:	446b      	add	r3, sp
   36952:	4605      	mov	r5, r0
   36954:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   36958:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
   3695a:	f008 fb69 	bl	3f030 <ll_rl_size_get>
   3695e:	4580      	cmp	r8, r0
   36960:	f080 8300 	bcs.w	36f64 <hci_evt_encode+0x774>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
   36964:	4640      	mov	r0, r8
   36966:	1cea      	adds	r2, r5, #3
   36968:	1ca9      	adds	r1, r5, #2
   3696a:	f008 fb1b 	bl	3efa4 <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
   3696e:	78ab      	ldrb	r3, [r5, #2]
   36970:	3302      	adds	r3, #2
   36972:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
   36974:	f885 a009 	strb.w	sl, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   36978:	350a      	adds	r5, #10
   3697a:	f104 0124 	add.w	r1, r4, #36	; 0x24
   3697e:	4632      	mov	r2, r6
   36980:	4628      	mov	r0, r5
   36982:	f015 f969 	bl	4bc58 <memcpy>
	*prssi = rssi;
   36986:	55af      	strb	r7, [r5, r6]
   36988:	e785      	b.n	36896 <hci_evt_encode+0xa6>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   3698a:	07f8      	lsls	r0, r7, #31
   3698c:	f100 81f7 	bmi.w	36d7e <hci_evt_encode+0x58e>
	status = cc->status;
   36990:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
   36992:	2f00      	cmp	r7, #0
   36994:	f000 81ea 	beq.w	36d6c <hci_evt_encode+0x57c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36998:	4b6d      	ldr	r3, [pc, #436]	; (36b50 <hci_evt_encode+0x360>)
   3699a:	685b      	ldr	r3, [r3, #4]
   3699c:	0099      	lsls	r1, r3, #2
   3699e:	f57f af7a 	bpl.w	36896 <hci_evt_encode+0xa6>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   369a2:	4b6c      	ldr	r3, [pc, #432]	; (36b54 <hci_evt_encode+0x364>)
   369a4:	681b      	ldr	r3, [r3, #0]
   369a6:	f240 2201 	movw	r2, #513	; 0x201
   369aa:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   369ac:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   369b0:	f43f af71 	beq.w	36896 <hci_evt_encode+0xa6>
   369b4:	3508      	adds	r5, #8
	if (!status) {
   369b6:	2f00      	cmp	r7, #0
   369b8:	f040 8201 	bne.w	36dbe <hci_evt_encode+0x5ce>
		conn_count++;
   369bc:	4a66      	ldr	r2, [pc, #408]	; (36b58 <hci_evt_encode+0x368>)
   369be:	6813      	ldr	r3, [r2, #0]
   369c0:	3301      	adds	r3, #1
   369c2:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   369c4:	f1b8 0f00 	cmp.w	r8, #0
   369c8:	f000 8279 	beq.w	36ebe <hci_evt_encode+0x6ce>
   369cc:	2102      	movs	r1, #2
   369ce:	4628      	mov	r0, r5
   369d0:	f019 f923 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = evt;
   369d4:	f641 733e 	movw	r3, #7998	; 0x1f3e
   369d8:	8003      	strh	r3, [r0, #0]
   369da:	2101      	movs	r1, #1
   369dc:	4628      	mov	r0, r5
   369de:	f019 f91c 	bl	4fc1a <net_buf_simple_add>
   369e2:	4603      	mov	r3, r0
	me->subevent = subevt;
   369e4:	220a      	movs	r2, #10
   369e6:	701a      	strb	r2, [r3, #0]
   369e8:	4628      	mov	r0, r5
   369ea:	211e      	movs	r1, #30
   369ec:	f019 f915 	bl	4fc1a <net_buf_simple_add>
		leecc->status = 0x00;
   369f0:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   369f2:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
   369f6:	f8b4 301d 	ldrh.w	r3, [r4, #29]
   369fa:	f8a0 3003 	strh.w	r3, [r0, #3]
   369fe:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   36a00:	2206      	movs	r2, #6
   36a02:	f104 011f 	add.w	r1, r4, #31
   36a06:	3005      	adds	r0, #5
   36a08:	f015 f926 	bl	4bc58 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   36a0c:	2206      	movs	r2, #6
   36a0e:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   36a12:	f105 000b 	add.w	r0, r5, #11
   36a16:	f015 f91f 	bl	4bc58 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   36a1a:	2206      	movs	r2, #6
   36a1c:	f104 0125 	add.w	r1, r4, #37	; 0x25
   36a20:	f105 0011 	add.w	r0, r5, #17
   36a24:	f015 f918 	bl	4bc58 <memcpy>
		leecc->interval = sys_cpu_to_le16(cc->interval);
   36a28:	f8d4 3032 	ldr.w	r3, [r4, #50]	; 0x32
   36a2c:	f8c5 3017 	str.w	r3, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   36a30:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   36a32:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   36a36:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   36a3a:	776b      	strb	r3, [r5, #29]
		return;
   36a3c:	e72b      	b.n	36896 <hci_evt_encode+0xa6>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   36a3e:	460a      	mov	r2, r1
   36a40:	4638      	mov	r0, r7
   36a42:	4631      	mov	r1, r6
}
   36a44:	b009      	add	sp, #36	; 0x24
   36a46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   36a4a:	f7ff be6f 	b.w	3672c <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36a4e:	4b40      	ldr	r3, [pc, #256]	; (36b50 <hci_evt_encode+0x360>)
   36a50:	685b      	ldr	r3, [r3, #4]
   36a52:	009a      	lsls	r2, r3, #2
   36a54:	f57f af1f 	bpl.w	36896 <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   36a58:	4b3e      	ldr	r3, [pc, #248]	; (36b54 <hci_evt_encode+0x364>)
   36a5a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36a5c:	075b      	lsls	r3, r3, #29
   36a5e:	f57f af1a 	bpl.w	36896 <hci_evt_encode+0xa6>
   36a62:	3508      	adds	r5, #8
   36a64:	2102      	movs	r1, #2
   36a66:	4628      	mov	r0, r5
   36a68:	f019 f8d7 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = evt;
   36a6c:	f640 233e 	movw	r3, #2622	; 0xa3e
   36a70:	8003      	strh	r3, [r0, #0]
   36a72:	2101      	movs	r1, #1
   36a74:	4628      	mov	r0, r5
   36a76:	f019 f8d0 	bl	4fc1a <net_buf_simple_add>
   36a7a:	4603      	mov	r3, r0
	me->subevent = subevt;
   36a7c:	2203      	movs	r2, #3
   36a7e:	4628      	mov	r0, r5
   36a80:	701a      	strb	r2, [r3, #0]
   36a82:	2109      	movs	r1, #9
   36a84:	f019 f8c9 	bl	4fc1a <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36a88:	07ff      	lsls	r7, r7, #31
   36a8a:	4605      	mov	r5, r0
   36a8c:	f100 825c 	bmi.w	36f48 <hci_evt_encode+0x758>
	sep->status = cu->status;
   36a90:	7f23      	ldrb	r3, [r4, #28]
   36a92:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   36a94:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   36a96:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   36a98:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   36a9a:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
   36a9e:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   36aa2:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   36aa6:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   36aaa:	e6f4      	b.n	36896 <hci_evt_encode+0xa6>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   36aac:	4b28      	ldr	r3, [pc, #160]	; (36b50 <hci_evt_encode+0x360>)
   36aae:	685b      	ldr	r3, [r3, #4]
   36ab0:	0418      	lsls	r0, r3, #16
   36ab2:	f04f 0400 	mov.w	r4, #0
   36ab6:	f57f aeee 	bpl.w	36896 <hci_evt_encode+0xa6>
   36aba:	3508      	adds	r5, #8
   36abc:	2102      	movs	r1, #2
   36abe:	4628      	mov	r0, r5
   36ac0:	f019 f8ab 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = evt;
   36ac4:	f44f 734c 	mov.w	r3, #816	; 0x330
   36ac8:	8003      	strh	r3, [r0, #0]
   36aca:	2103      	movs	r1, #3
   36acc:	4628      	mov	r0, r5
   36ace:	f019 f8a4 	bl	4fc1a <net_buf_simple_add>
	ep->status = 0x00;
   36ad2:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   36ad4:	f8a0 6001 	strh.w	r6, [r0, #1]
   36ad8:	e6dd      	b.n	36896 <hci_evt_encode+0xa6>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   36ada:	4b20      	ldr	r3, [pc, #128]	; (36b5c <hci_evt_encode+0x36c>)
   36adc:	681b      	ldr	r3, [r3, #0]
   36ade:	0219      	lsls	r1, r3, #8
   36ae0:	f57f aed9 	bpl.w	36896 <hci_evt_encode+0xa6>
   36ae4:	3508      	adds	r5, #8
   36ae6:	2102      	movs	r1, #2
   36ae8:	4628      	mov	r0, r5
   36aea:	f019 f896 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = evt;
   36aee:	f240 2357 	movw	r3, #599	; 0x257
   36af2:	8003      	strh	r3, [r0, #0]
   36af4:	2102      	movs	r1, #2
   36af6:	4628      	mov	r0, r5
   36af8:	f019 f88f 	bl	4fc1a <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   36afc:	8006      	strh	r6, [r0, #0]
   36afe:	e6ca      	b.n	36896 <hci_evt_encode+0xa6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36b00:	4b13      	ldr	r3, [pc, #76]	; (36b50 <hci_evt_encode+0x360>)
   36b02:	685b      	ldr	r3, [r3, #4]
   36b04:	009a      	lsls	r2, r3, #2
   36b06:	f57f aec6 	bpl.w	36896 <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   36b0a:	4b12      	ldr	r3, [pc, #72]	; (36b54 <hci_evt_encode+0x364>)
   36b0c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36b0e:	031b      	lsls	r3, r3, #12
   36b10:	f57f aec1 	bpl.w	36896 <hci_evt_encode+0xa6>
   36b14:	3508      	adds	r5, #8
   36b16:	2102      	movs	r1, #2
   36b18:	4628      	mov	r0, r5
   36b1a:	f019 f87e 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = evt;
   36b1e:	f240 433e 	movw	r3, #1086	; 0x43e
   36b22:	8003      	strh	r3, [r0, #0]
   36b24:	2101      	movs	r1, #1
   36b26:	4628      	mov	r0, r5
   36b28:	f019 f877 	bl	4fc1a <net_buf_simple_add>
	me->subevent = subevt;
   36b2c:	2314      	movs	r3, #20
   36b2e:	7003      	strb	r3, [r0, #0]
   36b30:	2103      	movs	r1, #3
   36b32:	4628      	mov	r0, r5
   36b34:	f019 f871 	bl	4fc1a <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   36b38:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   36b3a:	7f23      	ldrb	r3, [r4, #28]
   36b3c:	7083      	strb	r3, [r0, #2]
   36b3e:	e6aa      	b.n	36896 <hci_evt_encode+0xa6>
   36b40:	00052b1c 	.word	0x00052b1c
   36b44:	00052ad0 	.word	0x00052ad0
   36b48:	00052a70 	.word	0x00052a70
   36b4c:	00051974 	.word	0x00051974
   36b50:	20000190 	.word	0x20000190
   36b54:	20000188 	.word	0x20000188
   36b58:	20004b48 	.word	0x20004b48
   36b5c:	20003358 	.word	0x20003358
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36b60:	4ba5      	ldr	r3, [pc, #660]	; (36df8 <hci_evt_encode+0x608>)
   36b62:	685b      	ldr	r3, [r3, #4]
   36b64:	009f      	lsls	r7, r3, #2
   36b66:	f57f ae96 	bpl.w	36896 <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   36b6a:	4ba4      	ldr	r3, [pc, #656]	; (36dfc <hci_evt_encode+0x60c>)
   36b6c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36b6e:	0518      	lsls	r0, r3, #20
   36b70:	f57f ae91 	bpl.w	36896 <hci_evt_encode+0xa6>
   36b74:	3508      	adds	r5, #8
   36b76:	2102      	movs	r1, #2
   36b78:	4628      	mov	r0, r5
   36b7a:	f019 f84e 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = evt;
   36b7e:	f240 633e 	movw	r3, #1598	; 0x63e
   36b82:	8003      	strh	r3, [r0, #0]
   36b84:	2101      	movs	r1, #1
   36b86:	4628      	mov	r0, r5
   36b88:	f019 f847 	bl	4fc1a <net_buf_simple_add>
	me->subevent = subevt;
   36b8c:	230c      	movs	r3, #12
   36b8e:	7003      	strb	r3, [r0, #0]
   36b90:	2105      	movs	r1, #5
   36b92:	4628      	mov	r0, r5
   36b94:	f019 f841 	bl	4fc1a <net_buf_simple_add>
	sep->status = pu->status;
   36b98:	7f23      	ldrb	r3, [r4, #28]
   36b9a:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   36b9c:	f8a0 6001 	strh.w	r6, [r0, #1]
   36ba0:	7f62      	ldrb	r2, [r4, #29]
   36ba2:	2a00      	cmp	r2, #0
   36ba4:	fa92 f3a2 	rbit	r3, r2
   36ba8:	fab3 f383 	clz	r3, r3
   36bac:	bf08      	it	eq
   36bae:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   36bb2:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   36bb4:	70c3      	strb	r3, [r0, #3]
   36bb6:	7fa2      	ldrb	r2, [r4, #30]
   36bb8:	fa92 f3a2 	rbit	r3, r2
   36bbc:	2a00      	cmp	r2, #0
   36bbe:	fab3 f383 	clz	r3, r3
   36bc2:	bf08      	it	eq
   36bc4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   36bc8:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   36bca:	7103      	strb	r3, [r0, #4]
   36bcc:	e663      	b.n	36896 <hci_evt_encode+0xa6>
		LL_ASSERT(0);
   36bce:	4a8c      	ldr	r2, [pc, #560]	; (36e00 <hci_evt_encode+0x610>)
   36bd0:	498c      	ldr	r1, [pc, #560]	; (36e04 <hci_evt_encode+0x614>)
   36bd2:	488d      	ldr	r0, [pc, #564]	; (36e08 <hci_evt_encode+0x618>)
   36bd4:	f641 538f 	movw	r3, #7567	; 0x1d8f
   36bd8:	f012 ff0f 	bl	499fa <printk>
   36bdc:	4040      	eors	r0, r0
   36bde:	f380 8811 	msr	BASEPRI, r0
   36be2:	f04f 0003 	mov.w	r0, #3
   36be6:	df02      	svc	2
}
   36be8:	e655      	b.n	36896 <hci_evt_encode+0xa6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36bea:	4b83      	ldr	r3, [pc, #524]	; (36df8 <hci_evt_encode+0x608>)
   36bec:	685b      	ldr	r3, [r3, #4]
   36bee:	009a      	lsls	r2, r3, #2
   36bf0:	f57f ae51 	bpl.w	36896 <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   36bf4:	4b81      	ldr	r3, [pc, #516]	; (36dfc <hci_evt_encode+0x60c>)
   36bf6:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36bf8:	065b      	lsls	r3, r3, #25
   36bfa:	f57f ae4c 	bpl.w	36896 <hci_evt_encode+0xa6>
   36bfe:	3508      	adds	r5, #8
   36c00:	2102      	movs	r1, #2
   36c02:	4628      	mov	r0, r5
   36c04:	f019 f809 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = evt;
   36c08:	f640 333e 	movw	r3, #2878	; 0xb3e
   36c0c:	8003      	strh	r3, [r0, #0]
   36c0e:	2101      	movs	r1, #1
   36c10:	4628      	mov	r0, r5
   36c12:	f019 f802 	bl	4fc1a <net_buf_simple_add>
	me->subevent = subevt;
   36c16:	2307      	movs	r3, #7
   36c18:	7003      	strb	r3, [r0, #0]
   36c1a:	210a      	movs	r1, #10
   36c1c:	4628      	mov	r0, r5
   36c1e:	f018 fffc 	bl	4fc1a <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   36c22:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   36c24:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   36c26:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   36c28:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   36c2a:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   36c2c:	8c23      	ldrh	r3, [r4, #32]
   36c2e:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   36c30:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   36c32:	8103      	strh	r3, [r0, #8]
   36c34:	e62f      	b.n	36896 <hci_evt_encode+0xa6>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   36c36:	460b      	mov	r3, r1
   36c38:	4632      	mov	r2, r6
   36c3a:	4639      	mov	r1, r7
   36c3c:	2000      	movs	r0, #0
}
   36c3e:	b009      	add	sp, #36	; 0x24
   36c40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   36c44:	f7fe bf74 	b.w	35b30 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   36c48:	4b6b      	ldr	r3, [pc, #428]	; (36df8 <hci_evt_encode+0x608>)
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   36c4a:	f890 4020 	ldrb.w	r4, [r0, #32]
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   36c4e:	681b      	ldr	r3, [r3, #0]
   36c50:	061f      	lsls	r7, r3, #24
   36c52:	f57f ae20 	bpl.w	36896 <hci_evt_encode+0xa6>
   36c56:	3508      	adds	r5, #8
   36c58:	2102      	movs	r1, #2
   36c5a:	4628      	mov	r0, r5
   36c5c:	f018 ffdd 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = evt;
   36c60:	f44f 6381 	mov.w	r3, #1032	; 0x408
   36c64:	8003      	strh	r3, [r0, #0]
   36c66:	2104      	movs	r1, #4
   36c68:	4628      	mov	r0, r5
   36c6a:	f018 ffd6 	bl	4fc1a <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   36c6e:	fab4 f384 	clz	r3, r4
   36c72:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   36c74:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   36c76:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   36c7a:	70c3      	strb	r3, [r0, #3]
   36c7c:	e60b      	b.n	36896 <hci_evt_encode+0xa6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36c7e:	4b5e      	ldr	r3, [pc, #376]	; (36df8 <hci_evt_encode+0x608>)
   36c80:	685b      	ldr	r3, [r3, #4]
   36c82:	0098      	lsls	r0, r3, #2
   36c84:	f140 8091 	bpl.w	36daa <hci_evt_encode+0x5ba>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   36c88:	4b5c      	ldr	r3, [pc, #368]	; (36dfc <hci_evt_encode+0x60c>)
   36c8a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36c8c:	0699      	lsls	r1, r3, #26
   36c8e:	f140 808c 	bpl.w	36daa <hci_evt_encode+0x5ba>
   36c92:	3508      	adds	r5, #8
   36c94:	2102      	movs	r1, #2
   36c96:	4628      	mov	r0, r5
   36c98:	f018 ffbf 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = evt;
   36c9c:	f640 333e 	movw	r3, #2878	; 0xb3e
   36ca0:	8003      	strh	r3, [r0, #0]
   36ca2:	2101      	movs	r1, #1
   36ca4:	4628      	mov	r0, r5
   36ca6:	f018 ffb8 	bl	4fc1a <net_buf_simple_add>
	me->subevent = subevt;
   36caa:	2306      	movs	r3, #6
   36cac:	7003      	strb	r3, [r0, #0]
   36cae:	210a      	movs	r1, #10
   36cb0:	4628      	mov	r0, r5
   36cb2:	f018 ffb2 	bl	4fc1a <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   36cb6:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   36cb8:	8c23      	ldrh	r3, [r4, #32]
   36cba:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   36cbc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   36cbe:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   36cc0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   36cc2:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   36cc4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   36cc6:	8103      	strh	r3, [r0, #8]
   36cc8:	e5e5      	b.n	36896 <hci_evt_encode+0xa6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36cca:	4b4b      	ldr	r3, [pc, #300]	; (36df8 <hci_evt_encode+0x608>)
   36ccc:	685b      	ldr	r3, [r3, #4]
   36cce:	0099      	lsls	r1, r3, #2
   36cd0:	f57f ade1 	bpl.w	36896 <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   36cd4:	4b49      	ldr	r3, [pc, #292]	; (36dfc <hci_evt_encode+0x60c>)
   36cd6:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36cd8:	06da      	lsls	r2, r3, #27
   36cda:	f57f addc 	bpl.w	36896 <hci_evt_encode+0xa6>
   36cde:	3508      	adds	r5, #8
   36ce0:	2102      	movs	r1, #2
   36ce2:	4628      	mov	r0, r5
   36ce4:	f018 ff99 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = evt;
   36ce8:	f640 533e 	movw	r3, #3390	; 0xd3e
   36cec:	8003      	strh	r3, [r0, #0]
   36cee:	2101      	movs	r1, #1
   36cf0:	4628      	mov	r0, r5
   36cf2:	f018 ff92 	bl	4fc1a <net_buf_simple_add>
	me->subevent = subevt;
   36cf6:	2305      	movs	r3, #5
   36cf8:	7003      	strb	r3, [r0, #0]
   36cfa:	210c      	movs	r1, #12
   36cfc:	4628      	mov	r0, r5
   36cfe:	f018 ff8c 	bl	4fc1a <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   36d02:	f104 0120 	add.w	r1, r4, #32
   36d06:	4605      	mov	r5, r0
   36d08:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   36d0a:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   36d0e:	f014 ffa3 	bl	4bc58 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   36d12:	2202      	movs	r2, #2
   36d14:	f104 0128 	add.w	r1, r4, #40	; 0x28
   36d18:	f105 000a 	add.w	r0, r5, #10
}
   36d1c:	b009      	add	sp, #36	; 0x24
   36d1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   36d22:	f014 bf99 	b.w	4bc58 <memcpy>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   36d26:	4b34      	ldr	r3, [pc, #208]	; (36df8 <hci_evt_encode+0x608>)
   36d28:	681b      	ldr	r3, [r3, #0]
   36d2a:	061b      	lsls	r3, r3, #24
   36d2c:	f04f 0400 	mov.w	r4, #0
   36d30:	f57f adb1 	bpl.w	36896 <hci_evt_encode+0xa6>
   36d34:	3508      	adds	r5, #8
   36d36:	2102      	movs	r1, #2
   36d38:	4628      	mov	r0, r5
   36d3a:	f018 ff6e 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = evt;
   36d3e:	f44f 6381 	mov.w	r3, #1032	; 0x408
   36d42:	8003      	strh	r3, [r0, #0]
   36d44:	2104      	movs	r1, #4
   36d46:	4628      	mov	r0, r5
   36d48:	f018 ff67 	bl	4fc1a <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   36d4c:	2301      	movs	r3, #1
	ep->status = err;
   36d4e:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   36d50:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   36d54:	70c3      	strb	r3, [r0, #3]
   36d56:	e59e      	b.n	36896 <hci_evt_encode+0xa6>
	switch (pdu_data->llctrl.unknown_rsp.type) {
   36d58:	f890 3020 	ldrb.w	r3, [r0, #32]
   36d5c:	2b0e      	cmp	r3, #14
   36d5e:	f47f ad9a 	bne.w	36896 <hci_evt_encode+0xa6>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   36d62:	460b      	mov	r3, r1
   36d64:	4632      	mov	r2, r6
   36d66:	2100      	movs	r1, #0
   36d68:	201a      	movs	r0, #26
   36d6a:	e768      	b.n	36c3e <hci_evt_encode+0x44e>
		ll_rl_crpa_set(cc->peer_addr_type,
   36d6c:	7fa0      	ldrb	r0, [r4, #30]
   36d6e:	f104 0325 	add.w	r3, r4, #37	; 0x25
   36d72:	22ff      	movs	r2, #255	; 0xff
   36d74:	f104 011f 	add.w	r1, r4, #31
   36d78:	f008 fa5c 	bl	3f234 <ll_rl_crpa_set>
   36d7c:	e60c      	b.n	36998 <hci_evt_encode+0x1a8>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   36d7e:	4a20      	ldr	r2, [pc, #128]	; (36e00 <hci_evt_encode+0x610>)
   36d80:	4922      	ldr	r1, [pc, #136]	; (36e0c <hci_evt_encode+0x61c>)
   36d82:	4821      	ldr	r0, [pc, #132]	; (36e08 <hci_evt_encode+0x618>)
   36d84:	f641 23f5 	movw	r3, #6901	; 0x1af5
   36d88:	f012 fe37 	bl	499fa <printk>
   36d8c:	4040      	eors	r0, r0
   36d8e:	f380 8811 	msr	BASEPRI, r0
   36d92:	f04f 0003 	mov.w	r0, #3
   36d96:	df02      	svc	2
   36d98:	e5fa      	b.n	36990 <hci_evt_encode+0x1a0>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   36d9a:	2100      	movs	r1, #0
   36d9c:	f104 031e 	add.w	r3, r4, #30
   36da0:	4642      	mov	r2, r8
   36da2:	4608      	mov	r0, r1
   36da4:	f008 fa46 	bl	3f234 <ll_rl_crpa_set>
   36da8:	e58d      	b.n	368c6 <hci_evt_encode+0xd6>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   36daa:	2300      	movs	r3, #0
   36dac:	e9cd 3301 	strd	r3, r3, [sp, #4]
   36db0:	9300      	str	r3, [sp, #0]
   36db2:	221a      	movs	r2, #26
   36db4:	2102      	movs	r1, #2
   36db6:	4630      	mov	r0, r6
   36db8:	f003 f972 	bl	3a0a0 <ll_conn_update>
		return;
   36dbc:	e56b      	b.n	36896 <hci_evt_encode+0xa6>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   36dbe:	f1b8 0f00 	cmp.w	r8, #0
   36dc2:	f040 80a9 	bne.w	36f18 <hci_evt_encode+0x728>
   36dc6:	2102      	movs	r1, #2
   36dc8:	4628      	mov	r0, r5
   36dca:	f018 ff26 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = evt;
   36dce:	f241 333e 	movw	r3, #4926	; 0x133e
   36dd2:	8003      	strh	r3, [r0, #0]
   36dd4:	2101      	movs	r1, #1
   36dd6:	4628      	mov	r0, r5
   36dd8:	f018 ff1f 	bl	4fc1a <net_buf_simple_add>
	me->subevent = subevt;
   36ddc:	2301      	movs	r3, #1
   36dde:	7003      	strb	r3, [r0, #0]
   36de0:	2112      	movs	r1, #18
   36de2:	4628      	mov	r0, r5
   36de4:	f018 ff19 	bl	4fc1a <net_buf_simple_add>
   36de8:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   36dea:	2212      	movs	r2, #18
   36dec:	4641      	mov	r1, r8
   36dee:	f014 ff3e 	bl	4bc6e <memset>
		lecc->status = status;
   36df2:	7027      	strb	r7, [r4, #0]
		return;
   36df4:	e54f      	b.n	36896 <hci_evt_encode+0xa6>
   36df6:	bf00      	nop
   36df8:	20000190 	.word	0x20000190
   36dfc:	20000188 	.word	0x20000188
   36e00:	00052b1c 	.word	0x00052b1c
   36e04:	00052ad0 	.word	0x00052ad0
   36e08:	00052a70 	.word	0x00052a70
   36e0c:	00052b80 	.word	0x00052b80
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36e10:	2b00      	cmp	r3, #0
   36e12:	f43f ad40 	beq.w	36896 <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   36e16:	4b60      	ldr	r3, [pc, #384]	; (36f98 <hci_evt_encode+0x7a8>)
   36e18:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36e1a:	055a      	lsls	r2, r3, #21
   36e1c:	f57f ad3b 	bpl.w	36896 <hci_evt_encode+0xa6>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   36e20:	7f20      	ldrb	r0, [r4, #28]
   36e22:	f000 030f 	and.w	r3, r0, #15
   36e26:	2b01      	cmp	r3, #1
   36e28:	d00d      	beq.n	36e46 <hci_evt_encode+0x656>
   36e2a:	4a5c      	ldr	r2, [pc, #368]	; (36f9c <hci_evt_encode+0x7ac>)
   36e2c:	495c      	ldr	r1, [pc, #368]	; (36fa0 <hci_evt_encode+0x7b0>)
   36e2e:	485d      	ldr	r0, [pc, #372]	; (36fa4 <hci_evt_encode+0x7b4>)
   36e30:	f241 435a 	movw	r3, #5210	; 0x145a
   36e34:	f012 fde1 	bl	499fa <printk>
   36e38:	4040      	eors	r0, r0
   36e3a:	f380 8811 	msr	BASEPRI, r0
   36e3e:	f04f 0003 	mov.w	r0, #3
   36e42:	df02      	svc	2
   36e44:	7f20      	ldrb	r0, [r4, #28]
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   36e46:	f104 061e 	add.w	r6, r4, #30
   36e4a:	f3c0 1180 	ubfx	r1, r0, #6, #1
   36e4e:	4632      	mov	r2, r6
   36e50:	f000 000f 	and.w	r0, r0, #15
   36e54:	f7fe fe10 	bl	35a78 <dup_found.constprop.0>
	if (dup_scan &&
   36e58:	2800      	cmp	r0, #0
   36e5a:	f47f ad1c 	bne.w	36896 <hci_evt_encode+0xa6>
   36e5e:	3508      	adds	r5, #8
   36e60:	2102      	movs	r1, #2
   36e62:	4628      	mov	r0, r5
   36e64:	f018 fed9 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = evt;
   36e68:	f241 233e 	movw	r3, #4670	; 0x123e
   36e6c:	8003      	strh	r3, [r0, #0]
   36e6e:	2101      	movs	r1, #1
   36e70:	4628      	mov	r0, r5
   36e72:	f018 fed2 	bl	4fc1a <net_buf_simple_add>
   36e76:	4603      	mov	r3, r0
	me->subevent = subevt;
   36e78:	220b      	movs	r2, #11
   36e7a:	701a      	strb	r2, [r3, #0]
   36e7c:	4628      	mov	r0, r5
   36e7e:	2111      	movs	r1, #17
   36e80:	f018 fecb 	bl	4fc1a <net_buf_simple_add>
	drp->num_reports = 1U;
   36e84:	f240 1301 	movw	r3, #257	; 0x101
   36e88:	8003      	strh	r3, [r0, #0]
   36e8a:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
   36e8c:	f008 f8d0 	bl	3f030 <ll_rl_size_get>
   36e90:	4580      	cmp	r8, r0
   36e92:	d277      	bcs.n	36f84 <hci_evt_encode+0x794>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
   36e94:	1cea      	adds	r2, r5, #3
   36e96:	4640      	mov	r0, r8
   36e98:	1ca9      	adds	r1, r5, #2
   36e9a:	f008 f883 	bl	3efa4 <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
   36e9e:	78ab      	ldrb	r3, [r5, #2]
   36ea0:	3302      	adds	r3, #2
   36ea2:	70ab      	strb	r3, [r5, #2]
	dir_info->dir_addr.type = adv->rx_addr;
   36ea4:	7f23      	ldrb	r3, [r4, #28]
   36ea6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	memcpy(&dir_info->dir_addr.a.val[0],
   36eaa:	2206      	movs	r2, #6
	dir_info->dir_addr.type = adv->rx_addr;
   36eac:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   36eae:	f104 0124 	add.w	r1, r4, #36	; 0x24
   36eb2:	f105 000a 	add.w	r0, r5, #10
   36eb6:	f014 fecf 	bl	4bc58 <memcpy>
	dir_info->rssi = rssi;
   36eba:	742f      	strb	r7, [r5, #16]
   36ebc:	e4eb      	b.n	36896 <hci_evt_encode+0xa6>
   36ebe:	2102      	movs	r1, #2
   36ec0:	4628      	mov	r0, r5
   36ec2:	f018 feaa 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = evt;
   36ec6:	f241 333e 	movw	r3, #4926	; 0x133e
   36eca:	8003      	strh	r3, [r0, #0]
   36ecc:	2101      	movs	r1, #1
   36ece:	4628      	mov	r0, r5
   36ed0:	f018 fea3 	bl	4fc1a <net_buf_simple_add>
   36ed4:	4603      	mov	r3, r0
	me->subevent = subevt;
   36ed6:	2201      	movs	r2, #1
   36ed8:	701a      	strb	r2, [r3, #0]
   36eda:	4628      	mov	r0, r5
   36edc:	2112      	movs	r1, #18
   36ede:	f018 fe9c 	bl	4fc1a <net_buf_simple_add>
	lecc->status = 0x00;
   36ee2:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   36ee4:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   36ee8:	7f63      	ldrb	r3, [r4, #29]
   36eea:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   36eec:	7fa3      	ldrb	r3, [r4, #30]
   36eee:	f003 0301 	and.w	r3, r3, #1
   36ef2:	4605      	mov	r5, r0
   36ef4:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   36ef6:	2206      	movs	r2, #6
   36ef8:	f104 011f 	add.w	r1, r4, #31
   36efc:	3005      	adds	r0, #5
   36efe:	f014 feab 	bl	4bc58 <memcpy>
	lecc->interval = sys_cpu_to_le16(cc->interval);
   36f02:	f8d4 3032 	ldr.w	r3, [r4, #50]	; 0x32
   36f06:	f8c5 300b 	str.w	r3, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   36f0a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   36f0c:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   36f10:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   36f14:	746b      	strb	r3, [r5, #17]
   36f16:	e4be      	b.n	36896 <hci_evt_encode+0xa6>
   36f18:	2102      	movs	r1, #2
   36f1a:	4628      	mov	r0, r5
   36f1c:	f018 fe7d 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = evt;
   36f20:	f641 733e 	movw	r3, #7998	; 0x1f3e
   36f24:	8003      	strh	r3, [r0, #0]
   36f26:	2101      	movs	r1, #1
   36f28:	4628      	mov	r0, r5
   36f2a:	f018 fe76 	bl	4fc1a <net_buf_simple_add>
	me->subevent = subevt;
   36f2e:	230a      	movs	r3, #10
   36f30:	7003      	strb	r3, [r0, #0]
   36f32:	211e      	movs	r1, #30
   36f34:	4628      	mov	r0, r5
   36f36:	f018 fe70 	bl	4fc1a <net_buf_simple_add>
   36f3a:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   36f3c:	221e      	movs	r2, #30
   36f3e:	2100      	movs	r1, #0
   36f40:	f014 fe95 	bl	4bc6e <memset>
			leecc->status = status;
   36f44:	7027      	strb	r7, [r4, #0]
			return;
   36f46:	e4a6      	b.n	36896 <hci_evt_encode+0xa6>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36f48:	4a14      	ldr	r2, [pc, #80]	; (36f9c <hci_evt_encode+0x7ac>)
   36f4a:	4917      	ldr	r1, [pc, #92]	; (36fa8 <hci_evt_encode+0x7b8>)
   36f4c:	4815      	ldr	r0, [pc, #84]	; (36fa4 <hci_evt_encode+0x7b4>)
   36f4e:	f641 337a 	movw	r3, #7034	; 0x1b7a
   36f52:	f012 fd52 	bl	499fa <printk>
   36f56:	4040      	eors	r0, r0
   36f58:	f380 8811 	msr	BASEPRI, r0
   36f5c:	f04f 0003 	mov.w	r0, #3
   36f60:	df02      	svc	2
   36f62:	e595      	b.n	36a90 <hci_evt_encode+0x2a0>
		adv_info->addr.type = adv->tx_addr;
   36f64:	7f23      	ldrb	r3, [r4, #28]
   36f66:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   36f6a:	4649      	mov	r1, r9
		adv_info->addr.type = adv->tx_addr;
   36f6c:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   36f6e:	2206      	movs	r2, #6
   36f70:	1ce8      	adds	r0, r5, #3
   36f72:	f014 fe71 	bl	4bc58 <memcpy>
   36f76:	e4fd      	b.n	36974 <hci_evt_encode+0x184>
   36f78:	230b      	movs	r3, #11
   36f7a:	9305      	str	r3, [sp, #20]
   36f7c:	f04f 0b0c 	mov.w	fp, #12
		data_len = 0U;
   36f80:	46b2      	mov	sl, r6
   36f82:	e4cb      	b.n	3691c <hci_evt_encode+0x12c>
		dir_info->addr.type = adv->tx_addr;
   36f84:	7f23      	ldrb	r3, [r4, #28]
   36f86:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   36f8a:	4631      	mov	r1, r6
		dir_info->addr.type = adv->tx_addr;
   36f8c:	70ab      	strb	r3, [r5, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   36f8e:	2206      	movs	r2, #6
   36f90:	1ce8      	adds	r0, r5, #3
   36f92:	f014 fe61 	bl	4bc58 <memcpy>
   36f96:	e785      	b.n	36ea4 <hci_evt_encode+0x6b4>
   36f98:	20000188 	.word	0x20000188
   36f9c:	00052b1c 	.word	0x00052b1c
   36fa0:	00052b58 	.word	0x00052b58
   36fa4:	00052a70 	.word	0x00052a70
   36fa8:	00052bbc 	.word	0x00052bbc

00036fac <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   36fac:	b570      	push	{r4, r5, r6, lr}
   36fae:	f100 0408 	add.w	r4, r0, #8
   36fb2:	460e      	mov	r6, r1
   36fb4:	4620      	mov	r0, r4
   36fb6:	2102      	movs	r1, #2
   36fb8:	4615      	mov	r5, r2
   36fba:	f018 fe2e 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = evt;
   36fbe:	f240 5313 	movw	r3, #1299	; 0x513
   36fc2:	8003      	strh	r3, [r0, #0]
   36fc4:	2105      	movs	r1, #5
   36fc6:	4620      	mov	r0, r4
   36fc8:	f018 fe27 	bl	4fc1a <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   36fcc:	2301      	movs	r3, #1
   36fce:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   36fd0:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   36fd4:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   36fd8:	bd70      	pop	{r4, r5, r6, pc}
   36fda:	bf00      	nop

00036fdc <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   36fdc:	7903      	ldrb	r3, [r0, #4]
   36fde:	2b03      	cmp	r3, #3
   36fe0:	d008      	beq.n	36ff4 <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
   36fe2:	3b05      	subs	r3, #5
   36fe4:	b2db      	uxtb	r3, r3
   36fe6:	2b17      	cmp	r3, #23
   36fe8:	d901      	bls.n	36fee <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   36fea:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   36fec:	4770      	bx	lr
   36fee:	4a05      	ldr	r2, [pc, #20]	; (37004 <hci_get_class+0x28>)
   36ff0:	5cd0      	ldrb	r0, [r2, r3]
   36ff2:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   36ff4:	7f03      	ldrb	r3, [r0, #28]
   36ff6:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_EVT_LLCP;
   36ffa:	2b03      	cmp	r3, #3
   36ffc:	bf14      	ite	ne
   36ffe:	2005      	movne	r0, #5
   37000:	2004      	moveq	r0, #4
   37002:	4770      	bx	lr
   37004:	00052bf8 	.word	0x00052bf8

00037008 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   37008:	480d      	ldr	r0, [pc, #52]	; (37040 <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   3700a:	4a0e      	ldr	r2, [pc, #56]	; (37044 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   3700c:	490e      	ldr	r1, [pc, #56]	; (37048 <hci_init+0x40>)
	dup_count = DUP_FILTER_DISABLED;
   3700e:	4b0f      	ldr	r3, [pc, #60]	; (3704c <hci_init+0x44>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
   37010:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   37012:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   37016:	f641 75ff 	movw	r5, #8191	; 0x1fff
   3701a:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   3701e:	2400      	movs	r4, #0
   37020:	2500      	movs	r5, #0
   37022:	e9c2 4500 	strd	r4, r5, [r2]
	conn_count = 0U;
   37026:	4a0a      	ldr	r2, [pc, #40]	; (37050 <hci_init+0x48>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   37028:	241f      	movs	r4, #31
   3702a:	2500      	movs	r5, #0
   3702c:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   37030:	2100      	movs	r1, #0
   37032:	6011      	str	r1, [r2, #0]
	dup_count = DUP_FILTER_DISABLED;
   37034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   37038:	bc30      	pop	{r4, r5}
	dup_count = DUP_FILTER_DISABLED;
   3703a:	601a      	str	r2, [r3, #0]
}
   3703c:	4770      	bx	lr
   3703e:	bf00      	nop
   37040:	20000190 	.word	0x20000190
   37044:	20003358 	.word	0x20003358
   37048:	20000188 	.word	0x20000188
   3704c:	20004b50 	.word	0x20004b50
   37050:	20004b48 	.word	0x20004b48

00037054 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   37054:	f009 b99c 	b.w	40390 <lll_csrand_get>

00037058 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   37058:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   3705a:	2300      	movs	r3, #0
   3705c:	f00b fd12 	bl	42a84 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   37060:	2000      	movs	r0, #0
   37062:	bd08      	pop	{r3, pc}

00037064 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   37064:	4801      	ldr	r0, [pc, #4]	; (3706c <ll_feat_get+0x8>)
   37066:	2100      	movs	r1, #0
   37068:	4770      	bx	lr
   3706a:	bf00      	nop
   3706c:	000141ff 	.word	0x000141ff

00037070 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   37070:	b510      	push	{r4, lr}
   37072:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   37074:	f009 f9c2 	bl	403fc <lll_reset>
	LL_ASSERT(!err);
   37078:	b970      	cbnz	r0, 37098 <perform_lll_reset+0x28>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   3707a:	f009 fdd5 	bl	40c28 <lll_adv_reset>
	LL_ASSERT(!err);
   3707e:	b9e0      	cbnz	r0, 370ba <perform_lll_reset+0x4a>
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   37080:	f00a fd54 	bl	41b2c <lll_scan_reset>
	LL_ASSERT(!err);
   37084:	bb50      	cbnz	r0, 370dc <perform_lll_reset+0x6c>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   37086:	f00a fe8f 	bl	41da8 <lll_conn_reset>
	LL_ASSERT(!err);
   3708a:	2800      	cmp	r0, #0
   3708c:	d137      	bne.n	370fe <perform_lll_reset+0x8e>
	z_impl_k_sem_give(sem);
   3708e:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   37090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   37094:	f010 bfec 	b.w	48070 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   37098:	4a22      	ldr	r2, [pc, #136]	; (37124 <perform_lll_reset+0xb4>)
   3709a:	4923      	ldr	r1, [pc, #140]	; (37128 <perform_lll_reset+0xb8>)
   3709c:	4823      	ldr	r0, [pc, #140]	; (3712c <perform_lll_reset+0xbc>)
   3709e:	f640 0324 	movw	r3, #2084	; 0x824
   370a2:	f012 fcaa 	bl	499fa <printk>
   370a6:	4040      	eors	r0, r0
   370a8:	f380 8811 	msr	BASEPRI, r0
   370ac:	f04f 0003 	mov.w	r0, #3
   370b0:	df02      	svc	2
	err = lll_adv_reset();
   370b2:	f009 fdb9 	bl	40c28 <lll_adv_reset>
	LL_ASSERT(!err);
   370b6:	2800      	cmp	r0, #0
   370b8:	d0e2      	beq.n	37080 <perform_lll_reset+0x10>
   370ba:	4a1a      	ldr	r2, [pc, #104]	; (37124 <perform_lll_reset+0xb4>)
   370bc:	491a      	ldr	r1, [pc, #104]	; (37128 <perform_lll_reset+0xb8>)
   370be:	481b      	ldr	r0, [pc, #108]	; (3712c <perform_lll_reset+0xbc>)
   370c0:	f640 0329 	movw	r3, #2089	; 0x829
   370c4:	f012 fc99 	bl	499fa <printk>
   370c8:	4040      	eors	r0, r0
   370ca:	f380 8811 	msr	BASEPRI, r0
   370ce:	f04f 0003 	mov.w	r0, #3
   370d2:	df02      	svc	2
	err = lll_scan_reset();
   370d4:	f00a fd2a 	bl	41b2c <lll_scan_reset>
	LL_ASSERT(!err);
   370d8:	2800      	cmp	r0, #0
   370da:	d0d4      	beq.n	37086 <perform_lll_reset+0x16>
   370dc:	4a11      	ldr	r2, [pc, #68]	; (37124 <perform_lll_reset+0xb4>)
   370de:	4912      	ldr	r1, [pc, #72]	; (37128 <perform_lll_reset+0xb8>)
   370e0:	4812      	ldr	r0, [pc, #72]	; (3712c <perform_lll_reset+0xbc>)
   370e2:	f640 032f 	movw	r3, #2095	; 0x82f
   370e6:	f012 fc88 	bl	499fa <printk>
   370ea:	4040      	eors	r0, r0
   370ec:	f380 8811 	msr	BASEPRI, r0
   370f0:	f04f 0003 	mov.w	r0, #3
   370f4:	df02      	svc	2
	err = lll_conn_reset();
   370f6:	f00a fe57 	bl	41da8 <lll_conn_reset>
	LL_ASSERT(!err);
   370fa:	2800      	cmp	r0, #0
   370fc:	d0c7      	beq.n	3708e <perform_lll_reset+0x1e>
   370fe:	4a09      	ldr	r2, [pc, #36]	; (37124 <perform_lll_reset+0xb4>)
   37100:	4909      	ldr	r1, [pc, #36]	; (37128 <perform_lll_reset+0xb8>)
   37102:	480a      	ldr	r0, [pc, #40]	; (3712c <perform_lll_reset+0xbc>)
   37104:	f640 0335 	movw	r3, #2101	; 0x835
   37108:	f012 fc77 	bl	499fa <printk>
   3710c:	4040      	eors	r0, r0
   3710e:	f380 8811 	msr	BASEPRI, r0
   37112:	f04f 0003 	mov.w	r0, #3
   37116:	df02      	svc	2
   37118:	4620      	mov	r0, r4
}
   3711a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3711e:	f010 bfa7 	b.w	48070 <z_impl_k_sem_give>
   37122:	bf00      	nop
   37124:	00052c10 	.word	0x00052c10
   37128:	00052c4c 	.word	0x00052c4c
   3712c:	00052a70 	.word	0x00052a70

00037130 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   37130:	6008      	str	r0, [r1, #0]
   37132:	4801      	ldr	r0, [pc, #4]	; (37138 <ull_ticker_status_give+0x8>)
   37134:	f010 bf9c 	b.w	48070 <z_impl_k_sem_give>
   37138:	20005234 	.word	0x20005234

0003713c <disabled_cb>:
   3713c:	f010 bf98 	b.w	48070 <z_impl_k_sem_give>

00037140 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   37140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   37144:	4d2a      	ldr	r5, [pc, #168]	; (371f0 <tx_cmplt_get+0xb0>)
{
   37146:	460c      	mov	r4, r1
   37148:	4692      	mov	sl, r2
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
   3714a:	7869      	ldrb	r1, [r5, #1]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   3714c:	7822      	ldrb	r2, [r4, #0]
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   3714e:	782b      	ldrb	r3, [r5, #0]
   37150:	4291      	cmp	r1, r2
   37152:	bf9c      	itt	ls
   37154:	78aa      	ldrbls	r2, [r5, #2]
		*idx = first;
   37156:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
   37158:	4592      	cmp	sl, r2
{
   3715a:	4683      	mov	fp, r0
   3715c:	d040      	beq.n	371e0 <tx_cmplt_get+0xa0>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   3715e:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
   37162:	3201      	adds	r2, #1
   37164:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   37166:	f8df 908c 	ldr.w	r9, [pc, #140]	; 371f4 <tx_cmplt_get+0xb4>
		i = 0U;
   3716a:	4291      	cmp	r1, r2
   3716c:	bf08      	it	eq
   3716e:	2200      	moveq	r2, #0

	*idx = i;
   37170:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
   37172:	f839 2003 	ldrh.w	r2, [r9, r3]
   37176:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
   37178:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
   3717a:	444b      	add	r3, r9
   3717c:	f04f 0802 	mov.w	r8, #2
		if (!node_tx || (node_tx == (void *)1) ||
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
		      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE))) {
			/* data packet, hence count num cmplt */
			tx->node = (void *)1;
   37180:	2701      	movs	r7, #1
   37182:	e01a      	b.n	371ba <tx_cmplt_get+0x7a>
			cmplt++;
   37184:	3601      	adds	r6, #1
			tx->node = (void *)1;
   37186:	605f      	str	r7, [r3, #4]
			cmplt++;
   37188:	b2f6      	uxtb	r6, r6
	if (*idx >= count) {
   3718a:	7823      	ldrb	r3, [r4, #0]
		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
   3718c:	7869      	ldrb	r1, [r5, #1]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   3718e:	7828      	ldrb	r0, [r5, #0]
   37190:	4299      	cmp	r1, r3
   37192:	bf9c      	itt	ls
   37194:	78ab      	ldrbls	r3, [r5, #2]
		*idx = first;
   37196:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   37198:	459a      	cmp	sl, r3
   3719a:	d022      	beq.n	371e2 <tx_cmplt_get+0xa2>
	i = *idx + 1;
   3719c:	1c5a      	adds	r2, r3, #1
   3719e:	b2d2      	uxtb	r2, r2
		i = 0U;
   371a0:	4291      	cmp	r1, r2
   371a2:	bf08      	it	eq
   371a4:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   371a6:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
   371aa:	7022      	strb	r2, [r4, #0]
					    last, first);
	} while (tx && tx->handle == *handle);
   371ac:	f839 1003 	ldrh.w	r1, [r9, r3]
   371b0:	f8bb 2000 	ldrh.w	r2, [fp]
   371b4:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
   371b6:	444b      	add	r3, r9
   371b8:	d113      	bne.n	371e2 <tx_cmplt_get+0xa2>
		node_tx = tx->node;
   371ba:	6858      	ldr	r0, [r3, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   371bc:	2801      	cmp	r0, #1
   371be:	d9e1      	bls.n	37184 <tx_cmplt_get+0x44>
   371c0:	2803      	cmp	r0, #3
   371c2:	d802      	bhi.n	371ca <tx_cmplt_get+0x8a>
   371c4:	f8c3 8004 	str.w	r8, [r3, #4]
		if (((uint32_t)node_tx & ~3)) {
   371c8:	e7df      	b.n	3718a <tx_cmplt_get+0x4a>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   371ca:	7902      	ldrb	r2, [r0, #4]
   371cc:	f002 0203 	and.w	r2, r2, #3
		    (((uint32_t)node_tx & ~3) &&
   371d0:	3a01      	subs	r2, #1
   371d2:	2a01      	cmp	r2, #1
   371d4:	d908      	bls.n	371e8 <tx_cmplt_get+0xa8>
			tx->node = (void *)2;
   371d6:	2202      	movs	r2, #2
   371d8:	605a      	str	r2, [r3, #4]
			ll_tx_mem_release(node_tx);
   371da:	f002 ff0d 	bl	39ff8 <ll_tx_mem_release>
   371de:	e7d4      	b.n	3718a <tx_cmplt_get+0x4a>
		return 0;
   371e0:	2600      	movs	r6, #0

	return cmplt;
}
   371e2:	4630      	mov	r0, r6
   371e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   371e8:	3601      	adds	r6, #1
   371ea:	b2f6      	uxtb	r6, r6
			tx->node = (void *)1;
   371ec:	2201      	movs	r2, #1
			cmplt++;
   371ee:	e7f3      	b.n	371d8 <tx_cmplt_get+0x98>
   371f0:	2000094c 	.word	0x2000094c
   371f4:	20000950 	.word	0x20000950

000371f8 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   371f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   371fc:	4e3c      	ldr	r6, [pc, #240]	; (372f0 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
   371fe:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 372f4 <ull_done+0xfc>
   37202:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 372f8 <ull_done+0x100>
{
   37206:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   37208:	e9d6 0100 	ldrd	r0, r1, [r6]
   3720c:	aa01      	add	r2, sp, #4
   3720e:	f7fc fe79 	bl	33f04 <memq_peek>
		if (link) {
   37212:	4604      	mov	r4, r0
   37214:	2800      	cmp	r0, #0
   37216:	d03e      	beq.n	37296 <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
   37218:	6870      	ldr	r0, [r6, #4]
   3721a:	2200      	movs	r2, #0
   3721c:	4631      	mov	r1, r6
   3721e:	f7fc fe79 	bl	33f14 <memq_dequeue>
			rx_demux_event_done(link, done);
   37222:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
   37224:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
   37226:	b135      	cbz	r5, 37236 <ull_done+0x3e>
	return hdr->ref;
   37228:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   3722a:	2b00      	cmp	r3, #0
   3722c:	d052      	beq.n	372d4 <ull_done+0xdc>
	return hdr->ref--;
   3722e:	782b      	ldrb	r3, [r5, #0]
   37230:	3b01      	subs	r3, #1
   37232:	b2db      	uxtb	r3, r3
   37234:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   37236:	f897 3020 	ldrb.w	r3, [r7, #32]
   3723a:	b123      	cbz	r3, 37246 <ull_done+0x4e>
   3723c:	2b01      	cmp	r3, #1
   3723e:	d13b      	bne.n	372b8 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   37240:	4638      	mov	r0, r7
   37242:	f006 f9c3 	bl	3d5cc <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
   37246:	4a2d      	ldr	r2, [pc, #180]	; (372fc <ull_done+0x104>)
	last = last + 1;
   37248:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
   3724a:	f892 c001 	ldrb.w	ip, [r2, #1]
   3724e:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   37250:	3301      	adds	r3, #1
	done->extra.type = 0U;
   37252:	2100      	movs	r1, #0
   37254:	b2db      	uxtb	r3, r3
		last = 0U;
   37256:	459c      	cmp	ip, r3
   37258:	bf08      	it	eq
   3725a:	460b      	moveq	r3, r1
	if (last == first) {
   3725c:	4298      	cmp	r0, r3
   3725e:	f887 1020 	strb.w	r1, [r7, #32]
	release = RXFIFO_RELEASE(done, link, done);
   37262:	7811      	ldrb	r1, [r2, #0]
   37264:	d01a      	beq.n	3729c <ull_done+0xa4>

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
   37266:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   37268:	78d0      	ldrb	r0, [r2, #3]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   3726a:	fb00 2101 	mla	r1, r0, r1, r2
   3726e:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
   37270:	70d3      	strb	r3, [r2, #3]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   37272:	2d00      	cmp	r5, #0
   37274:	d0c8      	beq.n	37208 <ull_done+0x10>
	return hdr->ref;
   37276:	782b      	ldrb	r3, [r5, #0]
   37278:	2b00      	cmp	r3, #0
   3727a:	d1c5      	bne.n	37208 <ull_done+0x10>
   3727c:	696b      	ldr	r3, [r5, #20]
   3727e:	2b00      	cmp	r3, #0
   37280:	d0c2      	beq.n	37208 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   37282:	69a8      	ldr	r0, [r5, #24]
   37284:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   37286:	e9d6 0100 	ldrd	r0, r1, [r6]
   3728a:	aa01      	add	r2, sp, #4
   3728c:	f7fc fe3a 	bl	33f04 <memq_peek>
		if (link) {
   37290:	4604      	mov	r4, r0
   37292:	2800      	cmp	r0, #0
   37294:	d1c0      	bne.n	37218 <ull_done+0x20>
}
   37296:	b003      	add	sp, #12
   37298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
   3729c:	4918      	ldr	r1, [pc, #96]	; (37300 <ull_done+0x108>)
   3729e:	4819      	ldr	r0, [pc, #100]	; (37304 <ull_done+0x10c>)
   372a0:	f44f 6327 	mov.w	r3, #2672	; 0xa70
   372a4:	4642      	mov	r2, r8
   372a6:	f012 fba8 	bl	499fa <printk>
   372aa:	4040      	eors	r0, r0
   372ac:	f380 8811 	msr	BASEPRI, r0
   372b0:	f04f 0003 	mov.w	r0, #3
   372b4:	df02      	svc	2
   372b6:	e7dc      	b.n	37272 <ull_done+0x7a>
		LL_ASSERT(0);
   372b8:	4913      	ldr	r1, [pc, #76]	; (37308 <ull_done+0x110>)
   372ba:	4812      	ldr	r0, [pc, #72]	; (37304 <ull_done+0x10c>)
   372bc:	f640 2369 	movw	r3, #2665	; 0xa69
   372c0:	4642      	mov	r2, r8
   372c2:	f012 fb9a 	bl	499fa <printk>
   372c6:	4040      	eors	r0, r0
   372c8:	f380 8811 	msr	BASEPRI, r0
   372cc:	f04f 0003 	mov.w	r0, #3
   372d0:	df02      	svc	2
		break;
   372d2:	e7b8      	b.n	37246 <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
   372d4:	480b      	ldr	r0, [pc, #44]	; (37304 <ull_done+0x10c>)
   372d6:	f640 2312 	movw	r3, #2578	; 0xa12
   372da:	4642      	mov	r2, r8
   372dc:	4649      	mov	r1, r9
   372de:	f012 fb8c 	bl	499fa <printk>
   372e2:	4040      	eors	r0, r0
   372e4:	f380 8811 	msr	BASEPRI, r0
   372e8:	f04f 0003 	mov.w	r0, #3
   372ec:	df02      	svc	2
   372ee:	e79e      	b.n	3722e <ull_done+0x36>
   372f0:	20004c0c 	.word	0x20004c0c
   372f4:	00052c10 	.word	0x00052c10
   372f8:	00052c54 	.word	0x00052c54
   372fc:	20000a98 	.word	0x20000a98
   37300:	00052c6c 	.word	0x00052c6c
   37304:	00052a70 	.word	0x00052a70
   37308:	00052ad0 	.word	0x00052ad0

0003730c <rx_alloc>:
{
   3730c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (max > mem_link_rx.quota_pdu) {
   37310:	4f3b      	ldr	r7, [pc, #236]	; (37400 <rx_alloc+0xf4>)
   37312:	783e      	ldrb	r6, [r7, #0]
   37314:	4286      	cmp	r6, r0
   37316:	bf28      	it	cs
   37318:	4606      	movcs	r6, r0
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   3731a:	b366      	cbz	r6, 37376 <rx_alloc+0x6a>
   3731c:	4d39      	ldr	r5, [pc, #228]	; (37404 <rx_alloc+0xf8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   3731e:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 37408 <rx_alloc+0xfc>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   37322:	78ec      	ldrb	r4, [r5, #3]
		link = mem_acquire(&mem_link_rx.free);
   37324:	f107 0804 	add.w	r8, r7, #4
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   37328:	f105 0a04 	add.w	sl, r5, #4
	if (last == count) {
   3732c:	786a      	ldrb	r2, [r5, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   3732e:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   37330:	3401      	adds	r4, #1
   37332:	b2e4      	uxtb	r4, r4
		last = 0U;
   37334:	42a2      	cmp	r2, r4
   37336:	bf08      	it	eq
   37338:	2400      	moveq	r4, #0
	if (last == first) {
   3733a:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   3733c:	4640      	mov	r0, r8
   3733e:	d01c      	beq.n	3737a <rx_alloc+0x6e>
   37340:	f7fc fd72 	bl	33e28 <mem_acquire>
   37344:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   37346:	4648      	mov	r0, r9
		if (!link) {
   37348:	f1bb 0f00 	cmp.w	fp, #0
   3734c:	d013      	beq.n	37376 <rx_alloc+0x6a>
		rx = mem_acquire(&mem_pdu_rx.free);
   3734e:	f7fc fd6b 	bl	33e28 <mem_acquire>
		if (!rx) {
   37352:	2800      	cmp	r0, #0
   37354:	d048      	beq.n	373e8 <rx_alloc+0xdc>
		rx->link = link;
   37356:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   3735a:	78eb      	ldrb	r3, [r5, #3]
   3735c:	782a      	ldrb	r2, [r5, #0]
   3735e:	fb13 f302 	smulbb	r3, r3, r2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   37362:	f84a 0003 	str.w	r0, [sl, r3]
	mem_link_rx.quota_pdu += delta;
   37366:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   37368:	70ec      	strb	r4, [r5, #3]
		max--;
   3736a:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
   3736c:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   3736e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   37372:	703b      	strb	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   37374:	d1da      	bne.n	3732c <rx_alloc+0x20>
}
   37376:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (mem_link_rx.quota_pdu &&
   3737a:	783b      	ldrb	r3, [r7, #0]
   3737c:	2b00      	cmp	r3, #0
   3737e:	d0fa      	beq.n	37376 <rx_alloc+0x6a>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   37380:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3740c <rx_alloc+0x100>
		link = mem_acquire(&mem_link_rx.free);
   37384:	4d22      	ldr	r5, [pc, #136]	; (37410 <rx_alloc+0x104>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   37386:	f899 4003 	ldrb.w	r4, [r9, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   3738a:	4e1f      	ldr	r6, [pc, #124]	; (37408 <rx_alloc+0xfc>)
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   3738c:	f109 0804 	add.w	r8, r9, #4
	if (last == count) {
   37390:	f899 2001 	ldrb.w	r2, [r9, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   37394:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
   37398:	3401      	adds	r4, #1
   3739a:	b2e4      	uxtb	r4, r4
		last = 0U;
   3739c:	42a2      	cmp	r2, r4
   3739e:	bf08      	it	eq
   373a0:	2400      	moveq	r4, #0
	if (last == first) {
   373a2:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   373a4:	4628      	mov	r0, r5
   373a6:	d0e6      	beq.n	37376 <rx_alloc+0x6a>
   373a8:	f7fc fd3e 	bl	33e28 <mem_acquire>
   373ac:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   373ae:	4630      	mov	r0, r6
		if (!link) {
   373b0:	f1ba 0f00 	cmp.w	sl, #0
   373b4:	d0df      	beq.n	37376 <rx_alloc+0x6a>
		rx = mem_acquire(&mem_pdu_rx.free);
   373b6:	f7fc fd37 	bl	33e28 <mem_acquire>
		link->mem = NULL;
   373ba:	2300      	movs	r3, #0
		if (!rx) {
   373bc:	b1d0      	cbz	r0, 373f4 <rx_alloc+0xe8>
		link->mem = NULL;
   373be:	f8ca 3004 	str.w	r3, [sl, #4]
		rx->link = link;
   373c2:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   373c6:	f899 3003 	ldrb.w	r3, [r9, #3]
   373ca:	f899 2000 	ldrb.w	r2, [r9]
   373ce:	fb13 f302 	smulbb	r3, r3, r2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   373d2:	f848 0003 	str.w	r0, [r8, r3]
	mem_link_rx.quota_pdu += delta;
   373d6:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   373d8:	f889 4003 	strb.w	r4, [r9, #3]
   373dc:	3b01      	subs	r3, #1
   373de:	b2db      	uxtb	r3, r3
   373e0:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   373e2:	2b00      	cmp	r3, #0
   373e4:	d1d4      	bne.n	37390 <rx_alloc+0x84>
   373e6:	e7c6      	b.n	37376 <rx_alloc+0x6a>
			mem_release(link, &mem_link_rx.free);
   373e8:	4658      	mov	r0, fp
   373ea:	4909      	ldr	r1, [pc, #36]	; (37410 <rx_alloc+0x104>)
}
   373ec:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
   373f0:	f7fc bd34 	b.w	33e5c <mem_release>
			mem_release(link, &mem_link_rx.free);
   373f4:	4650      	mov	r0, sl
   373f6:	4906      	ldr	r1, [pc, #24]	; (37410 <rx_alloc+0x104>)
}
   373f8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
   373fc:	f7fc bd2e 	b.w	33e5c <mem_release>
   37400:	20004c24 	.word	0x20004c24
   37404:	200009a8 	.word	0x200009a8
   37408:	20004cf4 	.word	0x20004cf4
   3740c:	20000970 	.word	0x20000970
   37410:	20004c28 	.word	0x20004c28

00037414 <rx_demux>:
{
   37414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37418:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 375c8 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
   3741c:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 375cc <rx_demux+0x1b8>
			LL_ASSERT(rx);
   37420:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 375d0 <rx_demux+0x1bc>
   37424:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 375d4 <rx_demux+0x1c0>
{
   37428:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   3742a:	e9d8 0100 	ldrd	r0, r1, [r8]
   3742e:	aa03      	add	r2, sp, #12
   37430:	f7fc fd68 	bl	33f04 <memq_peek>
		if (link) {
   37434:	4605      	mov	r5, r0
   37436:	2800      	cmp	r0, #0
   37438:	d035      	beq.n	374a6 <rx_demux+0x92>
			LL_ASSERT(rx);
   3743a:	9b03      	ldr	r3, [sp, #12]
   3743c:	2b00      	cmp	r3, #0
   3743e:	f000 80a6 	beq.w	3758e <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   37442:	7818      	ldrb	r0, [r3, #0]
   37444:	aa04      	add	r2, sp, #16
   37446:	a902      	add	r1, sp, #8
   37448:	f006 fb86 	bl	3db58 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   3744c:	4604      	mov	r4, r0
   3744e:	2800      	cmp	r0, #0
   37450:	d055      	beq.n	374fe <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   37452:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   37456:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   3745a:	780f      	ldrb	r7, [r1, #0]
   3745c:	f8ad 200a 	strh.w	r2, [sp, #10]
   37460:	ae05      	add	r6, sp, #20
   37462:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   37464:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   37468:	f006 fb90 	bl	3db8c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   3746c:	4621      	mov	r1, r4
   3746e:	9a05      	ldr	r2, [sp, #20]
   37470:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   37474:	f006 fbd2 	bl	3dc1c <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   37478:	4620      	mov	r0, r4
   3747a:	f006 fb45 	bl	3db08 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   3747e:	4632      	mov	r2, r6
   37480:	4629      	mov	r1, r5
   37482:	4638      	mov	r0, r7
   37484:	f006 fb68 	bl	3db58 <ull_conn_ack_by_last_peek>
	} while (link);
   37488:	4604      	mov	r4, r0
   3748a:	2800      	cmp	r0, #0
   3748c:	d1ec      	bne.n	37468 <rx_demux+0x54>
	k_sem_give(sem_recv);
   3748e:	f8d9 0000 	ldr.w	r0, [r9]
   37492:	f010 fded 	bl	48070 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   37496:	e9d8 0100 	ldrd	r0, r1, [r8]
   3749a:	aa03      	add	r2, sp, #12
   3749c:	f7fc fd32 	bl	33f04 <memq_peek>
		if (link) {
   374a0:	4605      	mov	r5, r0
   374a2:	2800      	cmp	r0, #0
   374a4:	d1c9      	bne.n	3743a <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   374a6:	aa04      	add	r2, sp, #16
   374a8:	a902      	add	r1, sp, #8
   374aa:	f10d 0007 	add.w	r0, sp, #7
   374ae:	f006 fb37 	bl	3db20 <ull_conn_ack_peek>
			if (link) {
   374b2:	4604      	mov	r4, r0
   374b4:	2800      	cmp	r0, #0
   374b6:	d067      	beq.n	37588 <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
   374b8:	9b04      	ldr	r3, [sp, #16]
   374ba:	9305      	str	r3, [sp, #20]
   374bc:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   374c0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   374c4:	f8ad 300a 	strh.w	r3, [sp, #10]
   374c8:	ae05      	add	r6, sp, #20
   374ca:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   374ce:	f006 fb5d 	bl	3db8c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   374d2:	4621      	mov	r1, r4
   374d4:	9a05      	ldr	r2, [sp, #20]
   374d6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   374da:	f006 fb9f 	bl	3dc1c <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   374de:	4620      	mov	r0, r4
   374e0:	f006 fb12 	bl	3db08 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   374e4:	4632      	mov	r2, r6
   374e6:	4629      	mov	r1, r5
   374e8:	4638      	mov	r0, r7
   374ea:	f006 fb35 	bl	3db58 <ull_conn_ack_by_last_peek>
	} while (link);
   374ee:	4604      	mov	r4, r0
   374f0:	2800      	cmp	r0, #0
   374f2:	d1ec      	bne.n	374ce <rx_demux+0xba>
	k_sem_give(sem_recv);
   374f4:	f8d9 0000 	ldr.w	r0, [r9]
   374f8:	f010 fdba 	bl	48070 <z_impl_k_sem_give>
	} while (link);
   374fc:	e7cb      	b.n	37496 <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   374fe:	9b03      	ldr	r3, [sp, #12]
   37500:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   37502:	791b      	ldrb	r3, [r3, #4]
   37504:	3b01      	subs	r3, #1
   37506:	2b16      	cmp	r3, #22
   37508:	d80d      	bhi.n	37526 <rx_demux+0x112>
   3750a:	e8df f003 	tbb	[pc, r3]
   3750e:	0c1a      	.short	0x0c1a
   37510:	0c1a0c38 	.word	0x0c1a0c38
   37514:	0c0c0c0c 	.word	0x0c0c0c0c
   37518:	0c0c0c0c 	.word	0x0c0c0c0c
   3751c:	0c0c0c0c 	.word	0x0c0c0c0c
   37520:	2d0c0c0c 	.word	0x2d0c0c0c
   37524:	1a          	.byte	0x1a
   37525:	00          	.byte	0x00
		LL_ASSERT(0);
   37526:	4a2a      	ldr	r2, [pc, #168]	; (375d0 <rx_demux+0x1bc>)
   37528:	492b      	ldr	r1, [pc, #172]	; (375d8 <rx_demux+0x1c4>)
   3752a:	482c      	ldr	r0, [pc, #176]	; (375dc <rx_demux+0x1c8>)
   3752c:	f640 13ff 	movw	r3, #2559	; 0x9ff
   37530:	f012 fa63 	bl	499fa <printk>
   37534:	4040      	eors	r0, r0
   37536:	f380 8811 	msr	BASEPRI, r0
   3753a:	f04f 0003 	mov.w	r0, #3
   3753e:	df02      	svc	2
			if (nack) {
   37540:	e773      	b.n	3742a <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   37542:	4921      	ldr	r1, [pc, #132]	; (375c8 <rx_demux+0x1b4>)
   37544:	f8d8 0004 	ldr.w	r0, [r8, #4]
   37548:	2200      	movs	r2, #0
   3754a:	f7fc fce3 	bl	33f14 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   3754e:	4b24      	ldr	r3, [pc, #144]	; (375e0 <rx_demux+0x1cc>)
		ll_rx_put(link, rx);
   37550:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   37552:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   37554:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   37556:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   37558:	4a22      	ldr	r2, [pc, #136]	; (375e4 <rx_demux+0x1d0>)
   3755a:	f7fc fcc9 	bl	33ef0 <memq_enqueue>
	k_sem_give(sem_recv);
   3755e:	4b1b      	ldr	r3, [pc, #108]	; (375cc <rx_demux+0x1b8>)
   37560:	6818      	ldr	r0, [r3, #0]
   37562:	f010 fd85 	bl	48070 <z_impl_k_sem_give>
			if (nack) {
   37566:	e760      	b.n	3742a <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   37568:	4917      	ldr	r1, [pc, #92]	; (375c8 <rx_demux+0x1b4>)
   3756a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   3756e:	2200      	movs	r2, #0
   37570:	f7fc fcd0 	bl	33f14 <memq_dequeue>
		ull_conn_setup(link, rx);
   37574:	9905      	ldr	r1, [sp, #20]
   37576:	4628      	mov	r0, r5
   37578:	f003 f8b8 	bl	3a6ec <ull_conn_setup>
			if (nack) {
   3757c:	e755      	b.n	3742a <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
   3757e:	a905      	add	r1, sp, #20
   37580:	4628      	mov	r0, r5
   37582:	f003 f8db 	bl	3a73c <ull_conn_rx>
		if (nack) {
   37586:	b188      	cbz	r0, 375ac <rx_demux+0x198>
}
   37588:	b007      	add	sp, #28
   3758a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   3758e:	4813      	ldr	r0, [pc, #76]	; (375dc <rx_demux+0x1c8>)
   37590:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
   37594:	465a      	mov	r2, fp
   37596:	4651      	mov	r1, sl
   37598:	f012 fa2f 	bl	499fa <printk>
   3759c:	4040      	eors	r0, r0
   3759e:	f380 8811 	msr	BASEPRI, r0
   375a2:	f04f 0003 	mov.w	r0, #3
   375a6:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   375a8:	9b03      	ldr	r3, [sp, #12]
   375aa:	e74a      	b.n	37442 <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   375ac:	4906      	ldr	r1, [pc, #24]	; (375c8 <rx_demux+0x1b4>)
   375ae:	4602      	mov	r2, r0
   375b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
   375b4:	f7fc fcae 	bl	33f14 <memq_dequeue>
		if (rx) {
   375b8:	9905      	ldr	r1, [sp, #20]
   375ba:	2900      	cmp	r1, #0
   375bc:	f43f af35 	beq.w	3742a <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   375c0:	4b07      	ldr	r3, [pc, #28]	; (375e0 <rx_demux+0x1cc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   375c2:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   375c4:	78db      	ldrb	r3, [r3, #3]
   375c6:	e7c6      	b.n	37556 <rx_demux+0x142>
   375c8:	20004c1c 	.word	0x20004c1c
   375cc:	20005230 	.word	0x20005230
   375d0:	00052c10 	.word	0x00052c10
   375d4:	00052c7c 	.word	0x00052c7c
   375d8:	00052ad0 	.word	0x00052ad0
   375dc:	00052a70 	.word	0x00052a70
   375e0:	2000094c 	.word	0x2000094c
   375e4:	20004c18 	.word	0x20004c18

000375e8 <ll_rx_get>:
{
   375e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   375ec:	b085      	sub	sp, #20
   375ee:	e9cd 0100 	strd	r0, r1, [sp]
   375f2:	4e67      	ldr	r6, [pc, #412]	; (37790 <ll_rx_get+0x1a8>)
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   375f4:	4f67      	ldr	r7, [pc, #412]	; (37794 <ll_rx_get+0x1ac>)
	*node_rx = NULL;
   375f6:	9a00      	ldr	r2, [sp, #0]
   375f8:	2300      	movs	r3, #0
   375fa:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   375fc:	e9d6 0100 	ldrd	r0, r1, [r6]
   37600:	aa03      	add	r2, sp, #12
   37602:	f7fc fc7f 	bl	33f04 <memq_peek>
	if (link) {
   37606:	4605      	mov	r5, r0
   37608:	2800      	cmp	r0, #0
   3760a:	f000 80a8 	beq.w	3775e <ll_rx_get+0x176>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   3760e:	9b03      	ldr	r3, [sp, #12]
   37610:	4961      	ldr	r1, [pc, #388]	; (37798 <ll_rx_get+0x1b0>)
   37612:	781a      	ldrb	r2, [r3, #0]
   37614:	9801      	ldr	r0, [sp, #4]
   37616:	f7ff fd93 	bl	37140 <tx_cmplt_get>
		if (!cmplt) {
   3761a:	2800      	cmp	r0, #0
   3761c:	f040 80a5 	bne.w	3776a <ll_rx_get+0x182>
			f = mfifo_tx_ack.f;
   37620:	4c5e      	ldr	r4, [pc, #376]	; (3779c <ll_rx_get+0x1b4>)
   37622:	78a3      	ldrb	r3, [r4, #2]
   37624:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   37628:	78e2      	ldrb	r2, [r4, #3]
   3762a:	4683      	mov	fp, r0
   3762c:	f10d 0109 	add.w	r1, sp, #9
   37630:	f10d 000a 	add.w	r0, sp, #10
   37634:	f7ff fd84 	bl	37140 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   37638:	ea4b 0200 	orr.w	r2, fp, r0
   3763c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   37640:	d1f2      	bne.n	37628 <ll_rx_get+0x40>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   37642:	9b03      	ldr	r3, [sp, #12]
   37644:	7919      	ldrb	r1, [r3, #4]
   37646:	2901      	cmp	r1, #1
   37648:	f040 809c 	bne.w	37784 <ll_rx_get+0x19c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   3764c:	f8df b150 	ldr.w	fp, [pc, #336]	; 377a0 <ll_rx_get+0x1b8>
				(void)memq_dequeue(memq_ll_rx.tail,
   37650:	494f      	ldr	r1, [pc, #316]	; (37790 <ll_rx_get+0x1a8>)
   37652:	6870      	ldr	r0, [r6, #4]
   37654:	f7fc fc5e 	bl	33f14 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   37658:	f10b 0104 	add.w	r1, fp, #4
   3765c:	4628      	mov	r0, r5
   3765e:	f7fc fbfd 	bl	33e5c <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   37662:	f89b 3000 	ldrb.w	r3, [fp]
   37666:	2b0f      	cmp	r3, #15
   37668:	d869      	bhi.n	3773e <ll_rx_get+0x156>
	mem_link_rx.quota_pdu += delta;
   3766a:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   3766c:	494d      	ldr	r1, [pc, #308]	; (377a4 <ll_rx_get+0x1bc>)
   3766e:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   37670:	f88b 3000 	strb.w	r3, [fp]
				mem_release(rx, &mem_pdu_rx.free);
   37674:	f7fc fbf2 	bl	33e5c <mem_release>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   37678:	f89b 3000 	ldrb.w	r3, [fp]
   3767c:	2b00      	cmp	r3, #0
   3767e:	d0ba      	beq.n	375f6 <ll_rx_get+0xe>
   37680:	4d49      	ldr	r5, [pc, #292]	; (377a8 <ll_rx_get+0x1c0>)
	last = last + 1;
   37682:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   37684:	786a      	ldrb	r2, [r5, #1]
   37686:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   37688:	3401      	adds	r4, #1
   3768a:	b2e4      	uxtb	r4, r4
		last = 0U;
   3768c:	42a2      	cmp	r2, r4
   3768e:	bf08      	it	eq
   37690:	2400      	moveq	r4, #0
	if (last == first) {
   37692:	429c      	cmp	r4, r3
   37694:	d01a      	beq.n	376cc <ll_rx_get+0xe4>
		link = mem_acquire(&mem_link_rx.free);
   37696:	4845      	ldr	r0, [pc, #276]	; (377ac <ll_rx_get+0x1c4>)
   37698:	f7fc fbc6 	bl	33e28 <mem_acquire>
		if (!link) {
   3769c:	4680      	mov	r8, r0
   3769e:	2800      	cmp	r0, #0
   376a0:	d0a9      	beq.n	375f6 <ll_rx_get+0xe>
		rx = mem_acquire(&mem_pdu_rx.free);
   376a2:	4840      	ldr	r0, [pc, #256]	; (377a4 <ll_rx_get+0x1bc>)
   376a4:	f7fc fbc0 	bl	33e28 <mem_acquire>
		if (!rx) {
   376a8:	2800      	cmp	r0, #0
   376aa:	d061      	beq.n	37770 <ll_rx_get+0x188>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   376ac:	462a      	mov	r2, r5
		rx->link = link;
   376ae:	f8c0 8000 	str.w	r8, [r0]
   376b2:	78eb      	ldrb	r3, [r5, #3]
   376b4:	f812 1b04 	ldrb.w	r1, [r2], #4
   376b8:	fb13 f301 	smulbb	r3, r3, r1
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   376bc:	50d0      	str	r0, [r2, r3]
	mem_link_rx.quota_pdu += delta;
   376be:	f89b 3000 	ldrb.w	r3, [fp]
	*last = idx; /* Commit: Update write index */
   376c2:	70ec      	strb	r4, [r5, #3]
   376c4:	3b01      	subs	r3, #1
   376c6:	f88b 3000 	strb.w	r3, [fp]
	if (!max) {
   376ca:	e794      	b.n	375f6 <ll_rx_get+0xe>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   376cc:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 377b0 <ll_rx_get+0x1c8>
		link = mem_acquire(&mem_link_rx.free);
   376d0:	4c36      	ldr	r4, [pc, #216]	; (377ac <ll_rx_get+0x1c4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   376d2:	f898 9003 	ldrb.w	r9, [r8, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   376d6:	4d33      	ldr	r5, [pc, #204]	; (377a4 <ll_rx_get+0x1bc>)
	if (last == count) {
   376d8:	f898 0001 	ldrb.w	r0, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   376dc:	f898 2002 	ldrb.w	r2, [r8, #2]
	last = last + 1;
   376e0:	f109 0301 	add.w	r3, r9, #1
   376e4:	fa5f f983 	uxtb.w	r9, r3
		last = 0U;
   376e8:	4548      	cmp	r0, r9
   376ea:	bf08      	it	eq
   376ec:	f04f 0900 	moveq.w	r9, #0
	if (last == first) {
   376f0:	4591      	cmp	r9, r2
		link = mem_acquire(&mem_link_rx.free);
   376f2:	4620      	mov	r0, r4
   376f4:	f43f af7f 	beq.w	375f6 <ll_rx_get+0xe>
   376f8:	f7fc fb96 	bl	33e28 <mem_acquire>
   376fc:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   376fe:	4628      	mov	r0, r5
		if (!link) {
   37700:	f1ba 0f00 	cmp.w	sl, #0
   37704:	f43f af77 	beq.w	375f6 <ll_rx_get+0xe>
		rx = mem_acquire(&mem_pdu_rx.free);
   37708:	f7fc fb8e 	bl	33e28 <mem_acquire>
		link->mem = NULL;
   3770c:	2300      	movs	r3, #0
		if (!rx) {
   3770e:	2800      	cmp	r0, #0
   37710:	d033      	beq.n	3777a <ll_rx_get+0x192>
		link->mem = NULL;
   37712:	f8ca 3004 	str.w	r3, [sl, #4]
		rx->link = link;
   37716:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   3771a:	f898 2003 	ldrb.w	r2, [r8, #3]
   3771e:	f898 c000 	ldrb.w	ip, [r8]
   37722:	fb12 f20c 	smulbb	r2, r2, ip
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   37726:	50b8      	str	r0, [r7, r2]
	mem_link_rx.quota_pdu += delta;
   37728:	f89b 2000 	ldrb.w	r2, [fp]
	*last = idx; /* Commit: Update write index */
   3772c:	f888 9003 	strb.w	r9, [r8, #3]
   37730:	3a01      	subs	r2, #1
   37732:	b2d2      	uxtb	r2, r2
   37734:	f88b 2000 	strb.w	r2, [fp]
	while (mem_link_rx.quota_pdu &&
   37738:	2a00      	cmp	r2, #0
   3773a:	d1cd      	bne.n	376d8 <ll_rx_get+0xf0>
   3773c:	e75b      	b.n	375f6 <ll_rx_get+0xe>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   3773e:	4a1d      	ldr	r2, [pc, #116]	; (377b4 <ll_rx_get+0x1cc>)
   37740:	491d      	ldr	r1, [pc, #116]	; (377b8 <ll_rx_get+0x1d0>)
   37742:	481e      	ldr	r0, [pc, #120]	; (377bc <ll_rx_get+0x1d4>)
   37744:	f240 6306 	movw	r3, #1542	; 0x606
   37748:	f012 f957 	bl	499fa <printk>
   3774c:	4040      	eors	r0, r0
   3774e:	f380 8811 	msr	BASEPRI, r0
   37752:	f04f 0003 	mov.w	r0, #3
   37756:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   37758:	f89b 3000 	ldrb.w	r3, [fp]
   3775c:	e785      	b.n	3766a <ll_rx_get+0x82>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   3775e:	490f      	ldr	r1, [pc, #60]	; (3779c <ll_rx_get+0x1b4>)
   37760:	9801      	ldr	r0, [sp, #4]
   37762:	78ca      	ldrb	r2, [r1, #3]
   37764:	3102      	adds	r1, #2
   37766:	f7ff fceb 	bl	37140 <tx_cmplt_get>
}
   3776a:	b005      	add	sp, #20
   3776c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   37770:	490e      	ldr	r1, [pc, #56]	; (377ac <ll_rx_get+0x1c4>)
   37772:	4640      	mov	r0, r8
   37774:	f7fc fb72 	bl	33e5c <mem_release>
			return;
   37778:	e73d      	b.n	375f6 <ll_rx_get+0xe>
			mem_release(link, &mem_link_rx.free);
   3777a:	490c      	ldr	r1, [pc, #48]	; (377ac <ll_rx_get+0x1c4>)
   3777c:	4650      	mov	r0, sl
   3777e:	f7fc fb6d 	bl	33e5c <mem_release>
			return;
   37782:	e738      	b.n	375f6 <ll_rx_get+0xe>
			*node_rx = rx;
   37784:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   37786:	4610      	mov	r0, r2
			*node_rx = rx;
   37788:	600b      	str	r3, [r1, #0]
}
   3778a:	b005      	add	sp, #20
   3778c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37790:	20004c14 	.word	0x20004c14
   37794:	20000974 	.word	0x20000974
   37798:	2000094e 	.word	0x2000094e
   3779c:	2000094c 	.word	0x2000094c
   377a0:	20004c24 	.word	0x20004c24
   377a4:	20004cf4 	.word	0x20004cf4
   377a8:	200009a8 	.word	0x200009a8
   377ac:	20004c28 	.word	0x20004c28
   377b0:	20000970 	.word	0x20000970
   377b4:	00052c10 	.word	0x00052c10
   377b8:	00052c80 	.word	0x00052c80
   377bc:	00052a70 	.word	0x00052a70

000377c0 <ll_rx_dequeue>:
{
   377c0:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   377c2:	4956      	ldr	r1, [pc, #344]	; (3791c <ll_rx_dequeue+0x15c>)
{
   377c4:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   377c6:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   377c8:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   377ca:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   377cc:	aa01      	add	r2, sp, #4
   377ce:	f7fc fba1 	bl	33f14 <memq_dequeue>
	LL_ASSERT(link);
   377d2:	4604      	mov	r4, r0
   377d4:	2800      	cmp	r0, #0
   377d6:	d057      	beq.n	37888 <ll_rx_dequeue+0xc8>
	mem_release(link, &mem_link_rx.free);
   377d8:	4951      	ldr	r1, [pc, #324]	; (37920 <ll_rx_dequeue+0x160>)
   377da:	4620      	mov	r0, r4
   377dc:	f7fc fb3e 	bl	33e5c <mem_release>
	switch (rx->type) {
   377e0:	9901      	ldr	r1, [sp, #4]
   377e2:	790a      	ldrb	r2, [r1, #4]
   377e4:	2a1c      	cmp	r2, #28
   377e6:	d806      	bhi.n	377f6 <ll_rx_dequeue+0x36>
   377e8:	484e      	ldr	r0, [pc, #312]	; (37924 <ll_rx_dequeue+0x164>)
   377ea:	2301      	movs	r3, #1
   377ec:	4093      	lsls	r3, r2
   377ee:	4003      	ands	r3, r0
   377f0:	d131      	bne.n	37856 <ll_rx_dequeue+0x96>
   377f2:	2a16      	cmp	r2, #22
   377f4:	d00e      	beq.n	37814 <ll_rx_dequeue+0x54>
		LL_ASSERT(0);
   377f6:	4a4c      	ldr	r2, [pc, #304]	; (37928 <ll_rx_dequeue+0x168>)
   377f8:	494c      	ldr	r1, [pc, #304]	; (3792c <ll_rx_dequeue+0x16c>)
   377fa:	484d      	ldr	r0, [pc, #308]	; (37930 <ll_rx_dequeue+0x170>)
   377fc:	f240 43c7 	movw	r3, #1223	; 0x4c7
   37800:	f012 f8fb 	bl	499fa <printk>
   37804:	4040      	eors	r0, r0
   37806:	f380 8811 	msr	BASEPRI, r0
   3780a:	f04f 0003 	mov.w	r0, #3
   3780e:	df02      	svc	2
}
   37810:	b002      	add	sp, #8
   37812:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   37814:	7f0a      	ldrb	r2, [r1, #28]
			lll = ftr->param;
   37816:	688d      	ldr	r5, [r1, #8]
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   37818:	2a3c      	cmp	r2, #60	; 0x3c
			adv = HDR_LLL2ULL(lll);
   3781a:	682c      	ldr	r4, [r5, #0]
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   3781c:	d042      	beq.n	378a4 <ll_rx_dequeue+0xe4>
   3781e:	7f4a      	ldrb	r2, [r1, #29]
   37820:	b352      	cbz	r2, 37878 <ll_rx_dequeue+0xb8>
				if (adv->node_rx_cc_free) {
   37822:	6e60      	ldr	r0, [r4, #100]	; 0x64
   37824:	b118      	cbz	r0, 3782e <ll_rx_dequeue+0x6e>
					mem_release(rx_free, &mem_pdu_rx.free);
   37826:	4943      	ldr	r1, [pc, #268]	; (37934 <ll_rx_dequeue+0x174>)
					adv->node_rx_cc_free = NULL;
   37828:	6663      	str	r3, [r4, #100]	; 0x64
					mem_release(rx_free, &mem_pdu_rx.free);
   3782a:	f7fc fb17 	bl	33e5c <mem_release>
			adv->is_enabled = 0U;
   3782e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   37832:	f36f 0300 	bfc	r3, #0, #1
   37836:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			      (ull_scan_is_enabled(0) << 1)) |
   3783a:	2000      	movs	r0, #0
   3783c:	f001 fcc4 	bl	391c8 <ull_scan_is_enabled>
   37840:	4604      	mov	r4, r0
			      ull_adv_is_enabled(0));
   37842:	2000      	movs	r0, #0
   37844:	f001 fa9c 	bl	38d80 <ull_adv_is_enabled>
			if (!bm) {
   37848:	ea50 0044 	orrs.w	r0, r0, r4, lsl #1
   3784c:	d1e0      	bne.n	37810 <ll_rx_dequeue+0x50>
				ull_filter_adv_scan_state_cb(0);
   3784e:	f007 feab 	bl	3f5a8 <ull_filter_adv_scan_state_cb>
}
   37852:	b002      	add	sp, #8
   37854:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   37856:	2a00      	cmp	r2, #0
   37858:	d1da      	bne.n	37810 <ll_rx_dequeue+0x50>
   3785a:	4a33      	ldr	r2, [pc, #204]	; (37928 <ll_rx_dequeue+0x168>)
   3785c:	4936      	ldr	r1, [pc, #216]	; (37938 <ll_rx_dequeue+0x178>)
   3785e:	4834      	ldr	r0, [pc, #208]	; (37930 <ll_rx_dequeue+0x170>)
   37860:	f240 43c3 	movw	r3, #1219	; 0x4c3
   37864:	f012 f8c9 	bl	499fa <printk>
   37868:	4040      	eors	r0, r0
   3786a:	f380 8811 	msr	BASEPRI, r0
   3786e:	f04f 0003 	mov.w	r0, #3
   37872:	df02      	svc	2
}
   37874:	b002      	add	sp, #8
   37876:	bd70      	pop	{r4, r5, r6, pc}
			scan->is_enabled = 0U;
   37878:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
			scan->lll.conn = NULL;
   3787c:	6222      	str	r2, [r4, #32]
			scan->is_enabled = 0U;
   3787e:	f362 0300 	bfi	r3, r2, #0, #1
   37882:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   37886:	e7d8      	b.n	3783a <ll_rx_dequeue+0x7a>
	LL_ASSERT(link);
   37888:	4a27      	ldr	r2, [pc, #156]	; (37928 <ll_rx_dequeue+0x168>)
   3788a:	492c      	ldr	r1, [pc, #176]	; (3793c <ll_rx_dequeue+0x17c>)
   3788c:	4828      	ldr	r0, [pc, #160]	; (37930 <ll_rx_dequeue+0x170>)
   3788e:	f240 33a1 	movw	r3, #929	; 0x3a1
   37892:	f012 f8b2 	bl	499fa <printk>
   37896:	4040      	eors	r0, r0
   37898:	f380 8811 	msr	BASEPRI, r0
   3789c:	f04f 0003 	mov.w	r0, #3
   378a0:	df02      	svc	2
   378a2:	e799      	b.n	377d8 <ll_rx_dequeue+0x18>
				conn_lll = lll->conn;
   378a4:	686e      	ldr	r6, [r5, #4]
				LL_ASSERT(conn_lll);
   378a6:	b1ee      	cbz	r6, 378e4 <ll_rx_dequeue+0x124>
				LL_ASSERT(!conn_lll->link_tx_free);
   378a8:	6db3      	ldr	r3, [r6, #88]	; 0x58
				lll->conn = NULL;
   378aa:	2200      	movs	r2, #0
   378ac:	606a      	str	r2, [r5, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   378ae:	b163      	cbz	r3, 378ca <ll_rx_dequeue+0x10a>
   378b0:	4a1d      	ldr	r2, [pc, #116]	; (37928 <ll_rx_dequeue+0x168>)
   378b2:	4923      	ldr	r1, [pc, #140]	; (37940 <ll_rx_dequeue+0x180>)
   378b4:	481e      	ldr	r0, [pc, #120]	; (37930 <ll_rx_dequeue+0x170>)
   378b6:	f240 431a 	movw	r3, #1050	; 0x41a
   378ba:	f012 f89e 	bl	499fa <printk>
   378be:	4040      	eors	r0, r0
   378c0:	f380 8811 	msr	BASEPRI, r0
   378c4:	f04f 0003 	mov.w	r0, #3
   378c8:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   378ca:	f106 014c 	add.w	r1, r6, #76	; 0x4c
   378ce:	f106 0048 	add.w	r0, r6, #72	; 0x48
   378d2:	f7fc fb03 	bl	33edc <memq_deinit>
				LL_ASSERT(link);
   378d6:	4605      	mov	r5, r0
   378d8:	b190      	cbz	r0, 37900 <ll_rx_dequeue+0x140>
				ll_conn_release(conn);
   378da:	6830      	ldr	r0, [r6, #0]
				conn_lll->link_tx_free = link;
   378dc:	65b5      	str	r5, [r6, #88]	; 0x58
				ll_conn_release(conn);
   378de:	f002 fb5b 	bl	39f98 <ll_conn_release>
   378e2:	e7a4      	b.n	3782e <ll_rx_dequeue+0x6e>
				LL_ASSERT(conn_lll);
   378e4:	4a10      	ldr	r2, [pc, #64]	; (37928 <ll_rx_dequeue+0x168>)
   378e6:	4917      	ldr	r1, [pc, #92]	; (37944 <ll_rx_dequeue+0x184>)
   378e8:	4811      	ldr	r0, [pc, #68]	; (37930 <ll_rx_dequeue+0x170>)
   378ea:	f240 4317 	movw	r3, #1047	; 0x417
   378ee:	f012 f884 	bl	499fa <printk>
   378f2:	4040      	eors	r0, r0
   378f4:	f380 8811 	msr	BASEPRI, r0
   378f8:	f04f 0003 	mov.w	r0, #3
   378fc:	df02      	svc	2
   378fe:	e7d3      	b.n	378a8 <ll_rx_dequeue+0xe8>
				LL_ASSERT(link);
   37900:	4a09      	ldr	r2, [pc, #36]	; (37928 <ll_rx_dequeue+0x168>)
   37902:	490e      	ldr	r1, [pc, #56]	; (3793c <ll_rx_dequeue+0x17c>)
   37904:	480a      	ldr	r0, [pc, #40]	; (37930 <ll_rx_dequeue+0x170>)
   37906:	f240 431d 	movw	r3, #1053	; 0x41d
   3790a:	f012 f876 	bl	499fa <printk>
   3790e:	4040      	eors	r0, r0
   37910:	f380 8811 	msr	BASEPRI, r0
   37914:	f04f 0003 	mov.w	r0, #3
   37918:	df02      	svc	2
   3791a:	e7de      	b.n	378da <ll_rx_dequeue+0x11a>
   3791c:	20004c14 	.word	0x20004c14
   37920:	20004c28 	.word	0x20004c28
   37924:	1f800029 	.word	0x1f800029
   37928:	00052c10 	.word	0x00052c10
   3792c:	00052ad0 	.word	0x00052ad0
   37930:	00052a70 	.word	0x00052a70
   37934:	20004cf4 	.word	0x20004cf4
   37938:	00052ce4 	.word	0x00052ce4
   3793c:	00052fd8 	.word	0x00052fd8
   37940:	00052ccc 	.word	0x00052ccc
   37944:	00052cc0 	.word	0x00052cc0

00037948 <ll_rx_mem_release>:
{
   37948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   3794c:	6804      	ldr	r4, [r0, #0]
{
   3794e:	4680      	mov	r8, r0
	while (rx) {
   37950:	b30c      	cbz	r4, 37996 <ll_rx_mem_release+0x4e>
			LL_ASSERT(0);
   37952:	4f5b      	ldr	r7, [pc, #364]	; (37ac0 <ll_rx_mem_release+0x178>)
   37954:	f8df 916c 	ldr.w	r9, [pc, #364]	; 37ac4 <ll_rx_mem_release+0x17c>
   37958:	4e5b      	ldr	r6, [pc, #364]	; (37ac8 <ll_rx_mem_release+0x180>)
		rx = rx->next;
   3795a:	4625      	mov	r5, r4
   3795c:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   3795e:	792a      	ldrb	r2, [r5, #4]
   37960:	2a1c      	cmp	r2, #28
   37962:	d809      	bhi.n	37978 <ll_rx_mem_release+0x30>
   37964:	4959      	ldr	r1, [pc, #356]	; (37acc <ll_rx_mem_release+0x184>)
   37966:	2301      	movs	r3, #1
   37968:	4093      	lsls	r3, r2
   3796a:	ea13 0a01 	ands.w	sl, r3, r1
   3796e:	d12e      	bne.n	379ce <ll_rx_mem_release+0x86>
   37970:	2a17      	cmp	r2, #23
   37972:	d04a      	beq.n	37a0a <ll_rx_mem_release+0xc2>
   37974:	2a16      	cmp	r2, #22
   37976:	d016      	beq.n	379a6 <ll_rx_mem_release+0x5e>
			LL_ASSERT(0);
   37978:	f240 53fa 	movw	r3, #1530	; 0x5fa
   3797c:	463a      	mov	r2, r7
   3797e:	4649      	mov	r1, r9
   37980:	4630      	mov	r0, r6
   37982:	f012 f83a 	bl	499fa <printk>
   37986:	4040      	eors	r0, r0
   37988:	f380 8811 	msr	BASEPRI, r0
   3798c:	f04f 0003 	mov.w	r0, #3
   37990:	df02      	svc	2
	while (rx) {
   37992:	2c00      	cmp	r4, #0
   37994:	d1e1      	bne.n	3795a <ll_rx_mem_release+0x12>
	*node_rx = rx;
   37996:	2300      	movs	r3, #0
   37998:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
   3799c:	20ff      	movs	r0, #255	; 0xff
}
   3799e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   379a2:	f7ff bcb3 	b.w	3730c <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   379a6:	7f2b      	ldrb	r3, [r5, #28]
   379a8:	2b3c      	cmp	r3, #60	; 0x3c
   379aa:	d063      	beq.n	37a74 <ll_rx_mem_release+0x12c>
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
   379ac:	2b02      	cmp	r3, #2
   379ae:	d069      	beq.n	37a84 <ll_rx_mem_release+0x13c>
				LL_ASSERT(!cc->status);
   379b0:	b1db      	cbz	r3, 379ea <ll_rx_mem_release+0xa2>
   379b2:	4a43      	ldr	r2, [pc, #268]	; (37ac0 <ll_rx_mem_release+0x178>)
   379b4:	4946      	ldr	r1, [pc, #280]	; (37ad0 <ll_rx_mem_release+0x188>)
   379b6:	4844      	ldr	r0, [pc, #272]	; (37ac8 <ll_rx_mem_release+0x180>)
   379b8:	f240 532b 	movw	r3, #1323	; 0x52b
   379bc:	f012 f81d 	bl	499fa <printk>
   379c0:	4040      	eors	r0, r0
   379c2:	f380 8811 	msr	BASEPRI, r0
   379c6:	f04f 0003 	mov.w	r0, #3
   379ca:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   379cc:	792a      	ldrb	r2, [r5, #4]
   379ce:	b962      	cbnz	r2, 379ea <ll_rx_mem_release+0xa2>
   379d0:	4940      	ldr	r1, [pc, #256]	; (37ad4 <ll_rx_mem_release+0x18c>)
   379d2:	f240 537d 	movw	r3, #1405	; 0x57d
   379d6:	463a      	mov	r2, r7
   379d8:	4630      	mov	r0, r6
   379da:	f012 f80e 	bl	499fa <printk>
   379de:	4040      	eors	r0, r0
   379e0:	f380 8811 	msr	BASEPRI, r0
   379e4:	f04f 0003 	mov.w	r0, #3
   379e8:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   379ea:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 37ad8 <ll_rx_mem_release+0x190>
   379ee:	f89a 3000 	ldrb.w	r3, [sl]
   379f2:	2b0f      	cmp	r3, #15
   379f4:	d82e      	bhi.n	37a54 <ll_rx_mem_release+0x10c>
	mem_link_rx.quota_pdu += delta;
   379f6:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   379f8:	4938      	ldr	r1, [pc, #224]	; (37adc <ll_rx_mem_release+0x194>)
	mem_link_rx.quota_pdu += delta;
   379fa:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
   379fe:	4628      	mov	r0, r5
   37a00:	f7fc fa2c 	bl	33e5c <mem_release>
	while (rx) {
   37a04:	2c00      	cmp	r4, #0
   37a06:	d1a8      	bne.n	3795a <ll_rx_mem_release+0x12>
   37a08:	e7c5      	b.n	37996 <ll_rx_mem_release+0x4e>
			if (IS_ACL_HANDLE(rx_free->handle)) {
   37a0a:	88e8      	ldrh	r0, [r5, #6]
   37a0c:	2805      	cmp	r0, #5
   37a0e:	d8c0      	bhi.n	37992 <ll_rx_mem_release+0x4a>
				conn = ll_conn_get(rx_free->handle);
   37a10:	f002 fad0 	bl	39fb4 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
   37a14:	6f43      	ldr	r3, [r0, #116]	; 0x74
				conn = ll_conn_get(rx_free->handle);
   37a16:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
   37a18:	b163      	cbz	r3, 37a34 <ll_rx_mem_release+0xec>
   37a1a:	4a29      	ldr	r2, [pc, #164]	; (37ac0 <ll_rx_mem_release+0x178>)
   37a1c:	4930      	ldr	r1, [pc, #192]	; (37ae0 <ll_rx_mem_release+0x198>)
   37a1e:	482a      	ldr	r0, [pc, #168]	; (37ac8 <ll_rx_mem_release+0x180>)
   37a20:	f240 53ec 	movw	r3, #1516	; 0x5ec
   37a24:	f011 ffe9 	bl	499fa <printk>
   37a28:	4040      	eors	r0, r0
   37a2a:	f380 8811 	msr	BASEPRI, r0
   37a2e:	f04f 0003 	mov.w	r0, #3
   37a32:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
   37a34:	f105 0168 	add.w	r1, r5, #104	; 0x68
   37a38:	f105 0064 	add.w	r0, r5, #100	; 0x64
   37a3c:	f7fc fa4e 	bl	33edc <memq_deinit>
				LL_ASSERT(link);
   37a40:	4682      	mov	sl, r0
   37a42:	b370      	cbz	r0, 37aa2 <ll_rx_mem_release+0x15a>
				conn->lll.link_tx_free = link;
   37a44:	f8c5 a074 	str.w	sl, [r5, #116]	; 0x74
				ll_conn_release(conn);
   37a48:	4628      	mov	r0, r5
   37a4a:	f002 faa5 	bl	39f98 <ll_conn_release>
	while (rx) {
   37a4e:	2c00      	cmp	r4, #0
   37a50:	d183      	bne.n	3795a <ll_rx_mem_release+0x12>
   37a52:	e7a0      	b.n	37996 <ll_rx_mem_release+0x4e>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   37a54:	4923      	ldr	r1, [pc, #140]	; (37ae4 <ll_rx_mem_release+0x19c>)
   37a56:	f240 6306 	movw	r3, #1542	; 0x606
   37a5a:	463a      	mov	r2, r7
   37a5c:	4630      	mov	r0, r6
   37a5e:	f011 ffcc 	bl	499fa <printk>
   37a62:	4040      	eors	r0, r0
   37a64:	f380 8811 	msr	BASEPRI, r0
   37a68:	f04f 0003 	mov.w	r0, #3
   37a6c:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   37a6e:	f89a 3000 	ldrb.w	r3, [sl]
   37a72:	e7c0      	b.n	379f6 <ll_rx_mem_release+0xae>
				mem_release(rx_free, &mem_pdu_rx.free);
   37a74:	4919      	ldr	r1, [pc, #100]	; (37adc <ll_rx_mem_release+0x194>)
   37a76:	4628      	mov	r0, r5
   37a78:	f7fc f9f0 	bl	33e5c <mem_release>
	while (rx) {
   37a7c:	2c00      	cmp	r4, #0
   37a7e:	f47f af6c 	bne.w	3795a <ll_rx_mem_release+0x12>
   37a82:	e788      	b.n	37996 <ll_rx_mem_release+0x4e>
				ull_central_cleanup(rx_free);
   37a84:	4628      	mov	r0, r5
   37a86:	f006 fdfb 	bl	3e680 <ull_central_cleanup>
				if (!ull_adv_is_enabled_get(0))
   37a8a:	4650      	mov	r0, sl
   37a8c:	f001 f96a 	bl	38d64 <ull_adv_is_enabled_get>
   37a90:	2800      	cmp	r0, #0
   37a92:	f47f af7e 	bne.w	37992 <ll_rx_mem_release+0x4a>
					ull_filter_adv_scan_state_cb(0);
   37a96:	f007 fd87 	bl	3f5a8 <ull_filter_adv_scan_state_cb>
	while (rx) {
   37a9a:	2c00      	cmp	r4, #0
   37a9c:	f47f af5d 	bne.w	3795a <ll_rx_mem_release+0x12>
   37aa0:	e779      	b.n	37996 <ll_rx_mem_release+0x4e>
				LL_ASSERT(link);
   37aa2:	4a07      	ldr	r2, [pc, #28]	; (37ac0 <ll_rx_mem_release+0x178>)
   37aa4:	4910      	ldr	r1, [pc, #64]	; (37ae8 <ll_rx_mem_release+0x1a0>)
   37aa6:	4808      	ldr	r0, [pc, #32]	; (37ac8 <ll_rx_mem_release+0x180>)
   37aa8:	f240 53ef 	movw	r3, #1519	; 0x5ef
   37aac:	f011 ffa5 	bl	499fa <printk>
   37ab0:	4040      	eors	r0, r0
   37ab2:	f380 8811 	msr	BASEPRI, r0
   37ab6:	f04f 0003 	mov.w	r0, #3
   37aba:	df02      	svc	2
   37abc:	e7c2      	b.n	37a44 <ll_rx_mem_release+0xfc>
   37abe:	bf00      	nop
   37ac0:	00052c10 	.word	0x00052c10
   37ac4:	00052ad0 	.word	0x00052ad0
   37ac8:	00052a70 	.word	0x00052a70
   37acc:	1f000029 	.word	0x1f000029
   37ad0:	00052d04 	.word	0x00052d04
   37ad4:	00052d10 	.word	0x00052d10
   37ad8:	20004c24 	.word	0x20004c24
   37adc:	20004cf4 	.word	0x20004cf4
   37ae0:	00052d34 	.word	0x00052d34
   37ae4:	00052c80 	.word	0x00052c80
   37ae8:	00052fd8 	.word	0x00052fd8

00037aec <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   37aec:	4801      	ldr	r0, [pc, #4]	; (37af4 <ll_rx_link_alloc+0x8>)
   37aee:	f7fc b99b 	b.w	33e28 <mem_acquire>
   37af2:	bf00      	nop
   37af4:	20004c28 	.word	0x20004c28

00037af8 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   37af8:	4901      	ldr	r1, [pc, #4]	; (37b00 <ll_rx_link_release+0x8>)
   37afa:	f7fc b9af 	b.w	33e5c <mem_release>
   37afe:	bf00      	nop
   37b00:	20004c28 	.word	0x20004c28

00037b04 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   37b04:	4801      	ldr	r0, [pc, #4]	; (37b0c <ll_rx_alloc+0x8>)
   37b06:	f7fc b98f 	b.w	33e28 <mem_acquire>
   37b0a:	bf00      	nop
   37b0c:	20004cf4 	.word	0x20004cf4

00037b10 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   37b10:	4901      	ldr	r1, [pc, #4]	; (37b18 <ll_rx_release+0x8>)
   37b12:	f7fc b9a3 	b.w	33e5c <mem_release>
   37b16:	bf00      	nop
   37b18:	20004cf4 	.word	0x20004cf4

00037b1c <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   37b1c:	4b02      	ldr	r3, [pc, #8]	; (37b28 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   37b1e:	4a03      	ldr	r2, [pc, #12]	; (37b2c <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   37b20:	78db      	ldrb	r3, [r3, #3]
   37b22:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   37b24:	f7fc b9e4 	b.w	33ef0 <memq_enqueue>
   37b28:	2000094c 	.word	0x2000094c
   37b2c:	20004c18 	.word	0x20004c18

00037b30 <ll_rx_sched>:
	k_sem_give(sem_recv);
   37b30:	4b01      	ldr	r3, [pc, #4]	; (37b38 <ll_rx_sched+0x8>)
   37b32:	6818      	ldr	r0, [r3, #0]
   37b34:	f010 ba9c 	b.w	48070 <z_impl_k_sem_give>
   37b38:	20005230 	.word	0x20005230

00037b3c <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   37b3c:	490d      	ldr	r1, [pc, #52]	; (37b74 <ll_pdu_rx_alloc_peek+0x38>)
   37b3e:	788a      	ldrb	r2, [r1, #2]
   37b40:	78cb      	ldrb	r3, [r1, #3]
	if (last >= first) {
   37b42:	429a      	cmp	r2, r3
   37b44:	d80d      	bhi.n	37b62 <ll_pdu_rx_alloc_peek+0x26>
		return last - first;
   37b46:	eba3 0c02 	sub.w	ip, r3, r2
   37b4a:	fa5f fc8c 	uxtb.w	ip, ip
   37b4e:	4560      	cmp	r0, ip
   37b50:	d80e      	bhi.n	37b70 <ll_pdu_rx_alloc_peek+0x34>
	if (first == last) {
   37b52:	429a      	cmp	r2, r3
   37b54:	d00c      	beq.n	37b70 <ll_pdu_rx_alloc_peek+0x34>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   37b56:	7809      	ldrb	r1, [r1, #0]
	return *((void **)(fifo + first * size));
   37b58:	4b07      	ldr	r3, [pc, #28]	; (37b78 <ll_pdu_rx_alloc_peek+0x3c>)
   37b5a:	fb12 f201 	smulbb	r2, r2, r1
   37b5e:	5898      	ldr	r0, [r3, r2]
   37b60:	4770      	bx	lr
		return count - first + last;
   37b62:	f891 c001 	ldrb.w	ip, [r1, #1]
   37b66:	4463      	add	r3, ip
   37b68:	1a9b      	subs	r3, r3, r2
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   37b6a:	b2db      	uxtb	r3, r3
   37b6c:	4298      	cmp	r0, r3
   37b6e:	d9f2      	bls.n	37b56 <ll_pdu_rx_alloc_peek+0x1a>
		return NULL;
   37b70:	2000      	movs	r0, #0
}
   37b72:	4770      	bx	lr
   37b74:	20000970 	.word	0x20000970
   37b78:	20000974 	.word	0x20000974

00037b7c <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   37b7c:	4b09      	ldr	r3, [pc, #36]	; (37ba4 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   37b7e:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   37b80:	78da      	ldrb	r2, [r3, #3]
   37b82:	7818      	ldrb	r0, [r3, #0]
   37b84:	f893 c001 	ldrb.w	ip, [r3, #1]
   37b88:	428a      	cmp	r2, r1
   37b8a:	d009      	beq.n	37ba0 <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   37b8c:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   37b8e:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   37b92:	b2d2      	uxtb	r2, r2
	if (_first == count) {
		_first = 0U;
   37b94:	4594      	cmp	ip, r2
   37b96:	bf08      	it	eq
   37b98:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   37b9a:	6840      	ldr	r0, [r0, #4]
	}

	*first = _first; /* Write back read-index */
   37b9c:	709a      	strb	r2, [r3, #2]

	return mem;
   37b9e:	4770      	bx	lr
		return NULL;
   37ba0:	2000      	movs	r0, #0
}
   37ba2:	4770      	bx	lr
   37ba4:	20000970 	.word	0x20000970

00037ba8 <ll_tx_ack_put>:
{
   37ba8:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   37baa:	4c14      	ldr	r4, [pc, #80]	; (37bfc <ll_tx_ack_put+0x54>)
   37bac:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   37bae:	f894 e001 	ldrb.w	lr, [r4, #1]
   37bb2:	f894 c002 	ldrb.w	ip, [r4, #2]
   37bb6:	7825      	ldrb	r5, [r4, #0]
	last = last + 1;
   37bb8:	1c53      	adds	r3, r2, #1
   37bba:	b2db      	uxtb	r3, r3
		last = 0U;
   37bbc:	459e      	cmp	lr, r3
   37bbe:	bf08      	it	eq
   37bc0:	2300      	moveq	r3, #0
	if (last == first) {
   37bc2:	459c      	cmp	ip, r3
   37bc4:	d009      	beq.n	37bda <ll_tx_ack_put+0x32>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   37bc6:	fb12 f205 	smulbb	r2, r2, r5
   37bca:	f104 0c04 	add.w	ip, r4, #4
	tx->handle = handle;
   37bce:	f82c 0002 	strh.w	r0, [ip, r2]
   37bd2:	4462      	add	r2, ip
	tx->node = node_tx;
   37bd4:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
   37bd6:	70e3      	strb	r3, [r4, #3]
}
   37bd8:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
   37bda:	4a09      	ldr	r2, [pc, #36]	; (37c00 <ll_tx_ack_put+0x58>)
   37bdc:	4909      	ldr	r1, [pc, #36]	; (37c04 <ll_tx_ack_put+0x5c>)
   37bde:	480a      	ldr	r0, [pc, #40]	; (37c08 <ll_tx_ack_put+0x60>)
   37be0:	f240 634e 	movw	r3, #1614	; 0x64e
   37be4:	f011 ff09 	bl	499fa <printk>
   37be8:	4040      	eors	r0, r0
   37bea:	f380 8811 	msr	BASEPRI, r0
   37bee:	f04f 0003 	mov.w	r0, #3
   37bf2:	df02      	svc	2
	tx->handle = handle;
   37bf4:	2300      	movs	r3, #0
   37bf6:	801b      	strh	r3, [r3, #0]
   37bf8:	deff      	udf	#255	; 0xff
   37bfa:	bf00      	nop
   37bfc:	2000094c 	.word	0x2000094c
   37c00:	00052c10 	.word	0x00052c10
   37c04:	00052fcc 	.word	0x00052fcc
   37c08:	00052a70 	.word	0x00052a70

00037c0c <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   37c0c:	2200      	movs	r2, #0
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   37c0e:	230b      	movs	r3, #11
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   37c10:	7002      	strb	r2, [r0, #0]
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   37c12:	700b      	strb	r3, [r1, #0]
}
   37c14:	4770      	bx	lr
   37c16:	bf00      	nop

00037c18 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   37c18:	2200      	movs	r2, #0
{
   37c1a:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   37c1c:	4611      	mov	r1, r2
   37c1e:	4b0a      	ldr	r3, [pc, #40]	; (37c48 <ll_radio_state_abort+0x30>)
   37c20:	2001      	movs	r0, #1
   37c22:	f7fc f9db 	bl	33fdc <mayfly_enqueue>
	LL_ASSERT(!ret);
   37c26:	b900      	cbnz	r0, 37c2a <ll_radio_state_abort+0x12>
}
   37c28:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   37c2a:	4a08      	ldr	r2, [pc, #32]	; (37c4c <ll_radio_state_abort+0x34>)
   37c2c:	4908      	ldr	r1, [pc, #32]	; (37c50 <ll_radio_state_abort+0x38>)
   37c2e:	4809      	ldr	r0, [pc, #36]	; (37c54 <ll_radio_state_abort+0x3c>)
   37c30:	f240 6366 	movw	r3, #1638	; 0x666
   37c34:	f011 fee1 	bl	499fa <printk>
   37c38:	4040      	eors	r0, r0
   37c3a:	f380 8811 	msr	BASEPRI, r0
   37c3e:	f04f 0003 	mov.w	r0, #3
   37c42:	df02      	svc	2
}
   37c44:	bd08      	pop	{r3, pc}
   37c46:	bf00      	nop
   37c48:	2000092c 	.word	0x2000092c
   37c4c:	00052c10 	.word	0x00052c10
   37c50:	00052d4c 	.word	0x00052d4c
   37c54:	00052a70 	.word	0x00052a70

00037c58 <ull_ticker_status_take>:
	if (ret == TICKER_STATUS_BUSY) {
   37c58:	f030 0302 	bics.w	r3, r0, #2
{
   37c5c:	b510      	push	{r4, lr}
   37c5e:	460c      	mov	r4, r1
	if (ret == TICKER_STATUS_BUSY) {
   37c60:	d002      	beq.n	37c68 <ull_ticker_status_take+0x10>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   37c62:	680b      	ldr	r3, [r1, #0]
   37c64:	2b02      	cmp	r3, #2
   37c66:	d008      	beq.n	37c7a <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   37c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   37c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   37c70:	4809      	ldr	r0, [pc, #36]	; (37c98 <ull_ticker_status_take+0x40>)
   37c72:	f010 fa23 	bl	480bc <z_impl_k_sem_take>
	return *ret_cb;
   37c76:	6820      	ldr	r0, [r4, #0]
}
   37c78:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   37c7a:	4a08      	ldr	r2, [pc, #32]	; (37c9c <ull_ticker_status_take+0x44>)
   37c7c:	4908      	ldr	r1, [pc, #32]	; (37ca0 <ull_ticker_status_take+0x48>)
   37c7e:	4809      	ldr	r0, [pc, #36]	; (37ca4 <ull_ticker_status_take+0x4c>)
   37c80:	f240 6382 	movw	r3, #1666	; 0x682
   37c84:	f011 feb9 	bl	499fa <printk>
   37c88:	4040      	eors	r0, r0
   37c8a:	f380 8811 	msr	BASEPRI, r0
   37c8e:	f04f 0003 	mov.w	r0, #3
   37c92:	df02      	svc	2
   37c94:	e7e8      	b.n	37c68 <ull_ticker_status_take+0x10>
   37c96:	bf00      	nop
   37c98:	20005234 	.word	0x20005234
   37c9c:	00052c10 	.word	0x00052c10
   37ca0:	00052d54 	.word	0x00052d54
   37ca4:	00052a70 	.word	0x00052a70

00037ca8 <ull_disable_mark>:
	if (!*m) {
   37ca8:	4904      	ldr	r1, [pc, #16]	; (37cbc <ull_disable_mark+0x14>)
   37caa:	680a      	ldr	r2, [r1, #0]
   37cac:	b10a      	cbz	r2, 37cb2 <ull_disable_mark+0xa>
}
   37cae:	4610      	mov	r0, r2
   37cb0:	4770      	bx	lr
		*m = param;
   37cb2:	4602      	mov	r2, r0
   37cb4:	6008      	str	r0, [r1, #0]
}
   37cb6:	4610      	mov	r0, r2
   37cb8:	4770      	bx	lr
   37cba:	bf00      	nop
   37cbc:	20004c04 	.word	0x20004c04

00037cc0 <ull_disable_unmark>:
	if (*m && *m == param) {
   37cc0:	4a04      	ldr	r2, [pc, #16]	; (37cd4 <ull_disable_unmark+0x14>)
   37cc2:	6813      	ldr	r3, [r2, #0]
   37cc4:	b123      	cbz	r3, 37cd0 <ull_disable_unmark+0x10>
   37cc6:	4298      	cmp	r0, r3
		*m = NULL;
   37cc8:	bf06      	itte	eq
   37cca:	2100      	moveq	r1, #0
   37ccc:	6011      	streq	r1, [r2, #0]
	return NULL;
   37cce:	2300      	movne	r3, #0
}
   37cd0:	4618      	mov	r0, r3
   37cd2:	4770      	bx	lr
   37cd4:	20004c04 	.word	0x20004c04

00037cd8 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   37cd8:	4b01      	ldr	r3, [pc, #4]	; (37ce0 <ull_disable_mark_get+0x8>)
}
   37cda:	6818      	ldr	r0, [r3, #0]
   37cdc:	4770      	bx	lr
   37cde:	bf00      	nop
   37ce0:	20004c04 	.word	0x20004c04

00037ce4 <ull_update_mark>:
	if (!*m) {
   37ce4:	4904      	ldr	r1, [pc, #16]	; (37cf8 <ull_update_mark+0x14>)
   37ce6:	680a      	ldr	r2, [r1, #0]
   37ce8:	b10a      	cbz	r2, 37cee <ull_update_mark+0xa>
}
   37cea:	4610      	mov	r0, r2
   37cec:	4770      	bx	lr
		*m = param;
   37cee:	4602      	mov	r2, r0
   37cf0:	6008      	str	r0, [r1, #0]
}
   37cf2:	4610      	mov	r0, r2
   37cf4:	4770      	bx	lr
   37cf6:	bf00      	nop
   37cf8:	20004c08 	.word	0x20004c08

00037cfc <ull_update_unmark>:
	if (*m && *m == param) {
   37cfc:	4a04      	ldr	r2, [pc, #16]	; (37d10 <ull_update_unmark+0x14>)
   37cfe:	6813      	ldr	r3, [r2, #0]
   37d00:	b123      	cbz	r3, 37d0c <ull_update_unmark+0x10>
   37d02:	4298      	cmp	r0, r3
		*m = NULL;
   37d04:	bf06      	itte	eq
   37d06:	2100      	moveq	r1, #0
   37d08:	6011      	streq	r1, [r2, #0]
	return NULL;
   37d0a:	2300      	movne	r3, #0
}
   37d0c:	4618      	mov	r0, r3
   37d0e:	4770      	bx	lr
   37d10:	20004c08 	.word	0x20004c08

00037d14 <ull_update_mark_get>:
	return mark_get(mark_update);
   37d14:	4b01      	ldr	r3, [pc, #4]	; (37d1c <ull_update_mark_get+0x8>)
}
   37d16:	6818      	ldr	r0, [r3, #0]
   37d18:	4770      	bx	lr
   37d1a:	bf00      	nop
   37d1c:	20004c08 	.word	0x20004c08

00037d20 <ull_disable>:
{
   37d20:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   37d22:	6805      	ldr	r5, [r0, #0]
   37d24:	782b      	ldrb	r3, [r5, #0]
{
   37d26:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
   37d28:	b353      	cbz	r3, 37d80 <ull_disable+0x60>
	compiler_barrier();
   37d2a:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   37d2c:	2201      	movs	r2, #1
   37d2e:	2100      	movs	r1, #0
   37d30:	4668      	mov	r0, sp
   37d32:	f018 febe 	bl	50ab2 <z_impl_k_sem_init>
   37d36:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
   37d38:	4a13      	ldr	r2, [pc, #76]	; (37d88 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   37d3a:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   37d3e:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   37d40:	b1f3      	cbz	r3, 37d80 <ull_disable+0x60>
	mfy.param = lll;
   37d42:	4b12      	ldr	r3, [pc, #72]	; (37d8c <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   37d44:	2200      	movs	r2, #0
   37d46:	4611      	mov	r1, r2
   37d48:	2003      	movs	r0, #3
	mfy.param = lll;
   37d4a:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   37d4c:	f7fc f946 	bl	33fdc <mayfly_enqueue>
	LL_ASSERT(!ret);
   37d50:	b940      	cbnz	r0, 37d64 <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
   37d52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   37d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   37d5a:	4668      	mov	r0, sp
   37d5c:	f010 f9ae 	bl	480bc <z_impl_k_sem_take>
}
   37d60:	b007      	add	sp, #28
   37d62:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   37d64:	4a0a      	ldr	r2, [pc, #40]	; (37d90 <ull_disable+0x70>)
   37d66:	490b      	ldr	r1, [pc, #44]	; (37d94 <ull_disable+0x74>)
   37d68:	480b      	ldr	r0, [pc, #44]	; (37d98 <ull_disable+0x78>)
   37d6a:	f240 63ff 	movw	r3, #1791	; 0x6ff
   37d6e:	f011 fe44 	bl	499fa <printk>
   37d72:	4040      	eors	r0, r0
   37d74:	f380 8811 	msr	BASEPRI, r0
   37d78:	f04f 0003 	mov.w	r0, #3
   37d7c:	df02      	svc	2
   37d7e:	e7e8      	b.n	37d52 <ull_disable+0x32>
		return -EALREADY;
   37d80:	f06f 0077 	mvn.w	r0, #119	; 0x77
   37d84:	e7ec      	b.n	37d60 <ull_disable+0x40>
   37d86:	bf00      	nop
   37d88:	0003713d 	.word	0x0003713d
   37d8c:	2000091c 	.word	0x2000091c
   37d90:	00052c10 	.word	0x00052c10
   37d94:	00052d4c 	.word	0x00052d4c
   37d98:	00052a70 	.word	0x00052a70

00037d9c <ull_ticker_stop_with_mark>:
{
   37d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   37d9e:	4e1e      	ldr	r6, [pc, #120]	; (37e18 <ull_ticker_stop_with_mark+0x7c>)
   37da0:	6833      	ldr	r3, [r6, #0]
{
   37da2:	b085      	sub	sp, #20
   37da4:	460c      	mov	r4, r1
   37da6:	4617      	mov	r7, r2
	if (!*m) {
   37da8:	b353      	cbz	r3, 37e00 <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
   37daa:	4299      	cmp	r1, r3
   37dac:	d113      	bne.n	37dd6 <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   37dae:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   37db0:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   37db2:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   37db4:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   37db6:	9500      	str	r5, [sp, #0]
   37db8:	4b18      	ldr	r3, [pc, #96]	; (37e1c <ull_ticker_stop_with_mark+0x80>)
   37dba:	2103      	movs	r1, #3
   37dbc:	2000      	movs	r0, #0
   37dbe:	f7fd fbdf 	bl	35580 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   37dc2:	4629      	mov	r1, r5
   37dc4:	f7ff ff48 	bl	37c58 <ull_ticker_status_take>
	if (ret) {
   37dc8:	4605      	mov	r5, r0
   37dca:	b140      	cbz	r0, 37dde <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
   37dcc:	6833      	ldr	r3, [r6, #0]
   37dce:	b10b      	cbz	r3, 37dd4 <ull_ticker_stop_with_mark+0x38>
   37dd0:	429c      	cmp	r4, r3
   37dd2:	d017      	beq.n	37e04 <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
   37dd4:	b1c4      	cbz	r4, 37e08 <ull_ticker_stop_with_mark+0x6c>
		return -ENOLCK;
   37dd6:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   37dda:	b005      	add	sp, #20
   37ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
   37dde:	4638      	mov	r0, r7
   37de0:	f7ff ff9e 	bl	37d20 <ull_disable>
	if (*m && *m == param) {
   37de4:	6833      	ldr	r3, [r6, #0]
   37de6:	b10b      	cbz	r3, 37dec <ull_ticker_stop_with_mark+0x50>
   37de8:	429c      	cmp	r4, r3
   37dea:	d011      	beq.n	37e10 <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
   37dec:	2c00      	cmp	r4, #0
   37dee:	d1f2      	bne.n	37dd6 <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
   37df0:	2800      	cmp	r0, #0
   37df2:	d0f2      	beq.n	37dda <ull_ticker_stop_with_mark+0x3e>
	return 0;
   37df4:	f110 0f78 	cmn.w	r0, #120	; 0x78
   37df8:	bf08      	it	eq
   37dfa:	2000      	moveq	r0, #0
}
   37dfc:	b005      	add	sp, #20
   37dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   37e00:	6031      	str	r1, [r6, #0]
	if (mark != param) {
   37e02:	e7d4      	b.n	37dae <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   37e04:	2300      	movs	r3, #0
   37e06:	6033      	str	r3, [r6, #0]
		return -EALREADY;
   37e08:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   37e0c:	b005      	add	sp, #20
   37e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   37e10:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
   37e12:	2800      	cmp	r0, #0
   37e14:	d0e1      	beq.n	37dda <ull_ticker_stop_with_mark+0x3e>
   37e16:	e7ed      	b.n	37df4 <ull_ticker_stop_with_mark+0x58>
   37e18:	20004c04 	.word	0x20004c04
   37e1c:	00037131 	.word	0x00037131

00037e20 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   37e20:	490d      	ldr	r1, [pc, #52]	; (37e58 <ull_pdu_rx_alloc_peek+0x38>)
   37e22:	788a      	ldrb	r2, [r1, #2]
   37e24:	78cb      	ldrb	r3, [r1, #3]
	if (last >= first) {
   37e26:	429a      	cmp	r2, r3
   37e28:	d80d      	bhi.n	37e46 <ull_pdu_rx_alloc_peek+0x26>
		return last - first;
   37e2a:	eba3 0c02 	sub.w	ip, r3, r2
   37e2e:	fa5f fc8c 	uxtb.w	ip, ip
   37e32:	4560      	cmp	r0, ip
   37e34:	d80e      	bhi.n	37e54 <ull_pdu_rx_alloc_peek+0x34>
	if (first == last) {
   37e36:	429a      	cmp	r2, r3
   37e38:	d00c      	beq.n	37e54 <ull_pdu_rx_alloc_peek+0x34>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   37e3a:	7809      	ldrb	r1, [r1, #0]
	return *((void **)(fifo + first * size));
   37e3c:	4b07      	ldr	r3, [pc, #28]	; (37e5c <ull_pdu_rx_alloc_peek+0x3c>)
   37e3e:	fb12 f201 	smulbb	r2, r2, r1
   37e42:	5898      	ldr	r0, [r3, r2]
   37e44:	4770      	bx	lr
		return count - first + last;
   37e46:	f891 c001 	ldrb.w	ip, [r1, #1]
   37e4a:	4463      	add	r3, ip
   37e4c:	1a9b      	subs	r3, r3, r2
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   37e4e:	b2db      	uxtb	r3, r3
   37e50:	4298      	cmp	r0, r3
   37e52:	d9f2      	bls.n	37e3a <ull_pdu_rx_alloc_peek+0x1a>
		return NULL;
   37e54:	2000      	movs	r0, #0
}
   37e56:	4770      	bx	lr
   37e58:	200009a8 	.word	0x200009a8
   37e5c:	200009ac 	.word	0x200009ac

00037e60 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   37e60:	4b09      	ldr	r3, [pc, #36]	; (37e88 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   37e62:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   37e64:	78da      	ldrb	r2, [r3, #3]
   37e66:	7818      	ldrb	r0, [r3, #0]
   37e68:	f893 c001 	ldrb.w	ip, [r3, #1]
   37e6c:	428a      	cmp	r2, r1
   37e6e:	d009      	beq.n	37e84 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   37e70:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   37e72:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   37e76:	b2d2      	uxtb	r2, r2
		_first = 0U;
   37e78:	4594      	cmp	ip, r2
   37e7a:	bf08      	it	eq
   37e7c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   37e7e:	6840      	ldr	r0, [r0, #4]
	*first = _first; /* Write back read-index */
   37e80:	709a      	strb	r2, [r3, #2]
	return mem;
   37e82:	4770      	bx	lr
		return NULL;
   37e84:	2000      	movs	r0, #0
}
   37e86:	4770      	bx	lr
   37e88:	200009a8 	.word	0x200009a8

00037e8c <ull_rx_put>:
{
   37e8c:	b538      	push	{r3, r4, r5, lr}
   37e8e:	460c      	mov	r4, r1
   37e90:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   37e92:	f005 fe3f 	bl	3db14 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   37e96:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   37e98:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   37e9a:	4a03      	ldr	r2, [pc, #12]	; (37ea8 <ull_rx_put+0x1c>)
   37e9c:	4628      	mov	r0, r5
}
   37e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   37ea2:	f7fc b825 	b.w	33ef0 <memq_enqueue>
   37ea6:	bf00      	nop
   37ea8:	20004c20 	.word	0x20004c20

00037eac <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   37eac:	2201      	movs	r2, #1
   37eae:	4b02      	ldr	r3, [pc, #8]	; (37eb8 <ull_rx_sched+0xc>)
   37eb0:	4611      	mov	r1, r2
   37eb2:	2000      	movs	r0, #0
   37eb4:	f7fc b892 	b.w	33fdc <mayfly_enqueue>
   37eb8:	2000090c 	.word	0x2000090c

00037ebc <ull_prepare_enqueue>:
{
   37ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   37ec0:	4e16      	ldr	r6, [pc, #88]	; (37f1c <ull_prepare_enqueue+0x60>)
{
   37ec2:	f89d a020 	ldrb.w	sl, [sp, #32]
   37ec6:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   37ec8:	78f3      	ldrb	r3, [r6, #3]
{
   37eca:	460f      	mov	r7, r1
	last = last + 1;
   37ecc:	1c5d      	adds	r5, r3, #1
   37ece:	4611      	mov	r1, r2
	if (last == count) {
   37ed0:	7872      	ldrb	r2, [r6, #1]
	last = last + 1;
   37ed2:	b2ed      	uxtb	r5, r5
		last = 0U;
   37ed4:	42aa      	cmp	r2, r5
   37ed6:	bf08      	it	eq
   37ed8:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   37eda:	78b2      	ldrb	r2, [r6, #2]
	if (last == first) {
   37edc:	42aa      	cmp	r2, r5
   37ede:	d018      	beq.n	37f12 <ull_prepare_enqueue+0x56>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   37ee0:	4634      	mov	r4, r6
   37ee2:	4680      	mov	r8, r0
   37ee4:	f814 0b04 	ldrb.w	r0, [r4], #4
   37ee8:	fb00 4403 	mla	r4, r0, r3, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   37eec:	2210      	movs	r2, #16
   37eee:	4620      	mov	r0, r4
   37ef0:	f013 feb2 	bl	4bc58 <memcpy>
	e->is_resume = is_resume;
   37ef4:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
   37ef6:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   37ef8:	f00a 0a01 	and.w	sl, sl, #1
   37efc:	f023 0303 	bic.w	r3, r3, #3
   37f00:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   37f04:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   37f08:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   37f0a:	70f5      	strb	r5, [r6, #3]
}
   37f0c:	4620      	mov	r0, r4
   37f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
   37f12:	2400      	movs	r4, #0
}
   37f14:	4620      	mov	r0, r4
   37f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   37f1a:	bf00      	nop
   37f1c:	20000ab0 	.word	0x20000ab0

00037f20 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   37f20:	4805      	ldr	r0, [pc, #20]	; (37f38 <ull_prepare_dequeue_get+0x18>)
   37f22:	7882      	ldrb	r2, [r0, #2]
	if (first == last) {
   37f24:	78c1      	ldrb	r1, [r0, #3]
   37f26:	f890 c000 	ldrb.w	ip, [r0]
   37f2a:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   37f2c:	bf1a      	itte	ne
   37f2e:	3004      	addne	r0, #4
   37f30:	fb02 000c 	mlane	r0, r2, ip, r0
		return NULL;
   37f34:	2000      	moveq	r0, #0
}
   37f36:	4770      	bx	lr
   37f38:	20000ab0 	.word	0x20000ab0

00037f3c <ull_prepare_dequeue_iter>:
{
   37f3c:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   37f3e:	4b0d      	ldr	r3, [pc, #52]	; (37f74 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   37f40:	7802      	ldrb	r2, [r0, #0]
   37f42:	7859      	ldrb	r1, [r3, #1]
   37f44:	f893 c003 	ldrb.w	ip, [r3, #3]
   37f48:	f893 e000 	ldrb.w	lr, [r3]
   37f4c:	4291      	cmp	r1, r2
   37f4e:	bf9c      	itt	ls
   37f50:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   37f52:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   37f54:	4594      	cmp	ip, r2
   37f56:	d00a      	beq.n	37f6e <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   37f58:	1c53      	adds	r3, r2, #1
   37f5a:	b2db      	uxtb	r3, r3
		i = 0U;
   37f5c:	4299      	cmp	r1, r3
   37f5e:	bf08      	it	eq
   37f60:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   37f62:	4905      	ldr	r1, [pc, #20]	; (37f78 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   37f64:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   37f66:	fb02 100e 	mla	r0, r2, lr, r1
}
   37f6a:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   37f6e:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   37f70:	e7fb      	b.n	37f6a <ull_prepare_dequeue_iter+0x2e>
   37f72:	bf00      	nop
   37f74:	20000ab0 	.word	0x20000ab0
   37f78:	20000ab4 	.word	0x20000ab4

00037f7c <ull_prepare_dequeue>:
{
   37f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return MFIFO_DEQUEUE_GET(prep);
   37f80:	4c23      	ldr	r4, [pc, #140]	; (38010 <ull_prepare_dequeue+0x94>)
   37f82:	78a3      	ldrb	r3, [r4, #2]
	if (first == last) {
   37f84:	78e2      	ldrb	r2, [r4, #3]
   37f86:	f894 c000 	ldrb.w	ip, [r4]
   37f8a:	429a      	cmp	r2, r3
   37f8c:	d025      	beq.n	37fda <ull_prepare_dequeue+0x5e>
	return (void *)(fifo + first * size);
   37f8e:	1d27      	adds	r7, r4, #4
			mfy.param = next;
   37f90:	f8df 9080 	ldr.w	r9, [pc, #128]	; 38014 <ull_prepare_dequeue+0x98>
   37f94:	4680      	mov	r8, r0
   37f96:	fb03 7c0c 	mla	ip, r3, ip, r7
		uint8_t is_aborted = next->is_aborted;
   37f9a:	f89c 301c 	ldrb.w	r3, [ip, #28]
		if (!is_aborted) {
   37f9e:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   37fa0:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   37fa4:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
   37fa8:	d519      	bpl.n	37fde <ull_prepare_dequeue+0x62>
	uint8_t _first = *first; /* Copy read-index */
   37faa:	78a2      	ldrb	r2, [r4, #2]
		MFIFO_DEQUEUE(prep);
   37fac:	78e1      	ldrb	r1, [r4, #3]
   37fae:	f894 c000 	ldrb.w	ip, [r4]
   37fb2:	7860      	ldrb	r0, [r4, #1]
	_first += 1U;
   37fb4:	1c53      	adds	r3, r2, #1
	if (_first == last) {
   37fb6:	4291      	cmp	r1, r2
	_first += 1U;
   37fb8:	b2db      	uxtb	r3, r3
	if (_first == last) {
   37fba:	d00e      	beq.n	37fda <ull_prepare_dequeue+0x5e>
		_first = 0U;
   37fbc:	4298      	cmp	r0, r3
   37fbe:	bf08      	it	eq
   37fc0:	2300      	moveq	r3, #0
	if (first == last) {
   37fc2:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   37fc4:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   37fc6:	d008      	beq.n	37fda <ull_prepare_dequeue+0x5e>
	return (void *)(fifo + first * size);
   37fc8:	fb03 7c0c 	mla	ip, r3, ip, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   37fcc:	2d00      	cmp	r5, #0
   37fce:	d1e4      	bne.n	37f9a <ull_prepare_dequeue+0x1e>
   37fd0:	b11e      	cbz	r6, 37fda <ull_prepare_dequeue+0x5e>
   37fd2:	f89c 301c 	ldrb.w	r3, [ip, #28]
   37fd6:	07db      	lsls	r3, r3, #31
   37fd8:	d5df      	bpl.n	37f9a <ull_prepare_dequeue+0x1e>
}
   37fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   37fde:	4b0d      	ldr	r3, [pc, #52]	; (38014 <ull_prepare_dequeue+0x98>)
			mfy.param = next;
   37fe0:	f8c9 c008 	str.w	ip, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   37fe4:	462a      	mov	r2, r5
   37fe6:	4629      	mov	r1, r5
   37fe8:	4640      	mov	r0, r8
   37fea:	f7fb fff7 	bl	33fdc <mayfly_enqueue>
			LL_ASSERT(!ret);
   37fee:	2800      	cmp	r0, #0
   37ff0:	d0db      	beq.n	37faa <ull_prepare_dequeue+0x2e>
   37ff2:	4a09      	ldr	r2, [pc, #36]	; (38018 <ull_prepare_dequeue+0x9c>)
   37ff4:	4909      	ldr	r1, [pc, #36]	; (3801c <ull_prepare_dequeue+0xa0>)
   37ff6:	480a      	ldr	r0, [pc, #40]	; (38020 <ull_prepare_dequeue+0xa4>)
   37ff8:	f240 7376 	movw	r3, #1910	; 0x776
   37ffc:	f011 fcfd 	bl	499fa <printk>
   38000:	4040      	eors	r0, r0
   38002:	f380 8811 	msr	BASEPRI, r0
   38006:	f04f 0003 	mov.w	r0, #3
   3800a:	df02      	svc	2
   3800c:	e7cd      	b.n	37faa <ull_prepare_dequeue+0x2e>
   3800e:	bf00      	nop
   38010:	20000ab0 	.word	0x20000ab0
   38014:	200008ec 	.word	0x200008ec
   38018:	00052c10 	.word	0x00052c10
   3801c:	00052d4c 	.word	0x00052d4c
   38020:	00052a70 	.word	0x00052a70

00038024 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   38024:	4b06      	ldr	r3, [pc, #24]	; (38040 <ull_event_done_extra_get+0x1c>)
   38026:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   38028:	78d9      	ldrb	r1, [r3, #3]
   3802a:	7818      	ldrb	r0, [r3, #0]
   3802c:	4291      	cmp	r1, r2
   3802e:	d005      	beq.n	3803c <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   38030:	fb02 3300 	mla	r3, r2, r0, r3
   38034:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   38036:	b110      	cbz	r0, 3803e <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   38038:	3020      	adds	r0, #32
   3803a:	4770      	bx	lr
		return NULL;
   3803c:	2000      	movs	r0, #0
}
   3803e:	4770      	bx	lr
   38040:	20000a98 	.word	0x20000a98

00038044 <ull_event_done>:
{
   38044:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
   38046:	4a13      	ldr	r2, [pc, #76]	; (38094 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   38048:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   3804a:	78d5      	ldrb	r5, [r2, #3]
   3804c:	7814      	ldrb	r4, [r2, #0]
   3804e:	429d      	cmp	r5, r3
{
   38050:	4601      	mov	r1, r0
	evdone = MFIFO_DEQUEUE(done);
   38052:	7850      	ldrb	r0, [r2, #1]
   38054:	d01b      	beq.n	3808e <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   38056:	fb03 2404 	mla	r4, r3, r4, r2
	_first += 1U;
   3805a:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   3805c:	6864      	ldr	r4, [r4, #4]
	_first += 1U;
   3805e:	b2db      	uxtb	r3, r3
		_first = 0U;
   38060:	4298      	cmp	r0, r3
   38062:	bf08      	it	eq
   38064:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   38066:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   38068:	b18c      	cbz	r4, 3808e <ull_event_done+0x4a>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   3806a:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   3806c:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   3806e:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   38070:	4a09      	ldr	r2, [pc, #36]	; (38098 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   38072:	7123      	strb	r3, [r4, #4]
	evdone->param = param;
   38074:	61e1      	str	r1, [r4, #28]
	evdone->hdr.link = NULL;
   38076:	6025      	str	r5, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   38078:	4621      	mov	r1, r4
   3807a:	f7fb ff39 	bl	33ef0 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   3807e:	2201      	movs	r2, #1
   38080:	4b06      	ldr	r3, [pc, #24]	; (3809c <ull_event_done+0x58>)
   38082:	4611      	mov	r1, r2
   38084:	4628      	mov	r0, r5
   38086:	f7fb ffa9 	bl	33fdc <mayfly_enqueue>
}
   3808a:	4620      	mov	r0, r4
   3808c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   3808e:	2400      	movs	r4, #0
   38090:	e7fb      	b.n	3808a <ull_event_done+0x46>
   38092:	bf00      	nop
   38094:	20000a98 	.word	0x20000a98
   38098:	20004c10 	.word	0x20004c10
   3809c:	200008fc 	.word	0x200008fc

000380a0 <ull_rxfifo_alloc>:
{
   380a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   380a4:	b083      	sub	sp, #12
   380a6:	461d      	mov	r5, r3
   380a8:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   380ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   380ae:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   380b2:	9401      	str	r4, [sp, #4]
   380b4:	4617      	mov	r7, r2
   380b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   380b8:	9200      	str	r2, [sp, #0]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   380ba:	b353      	cbz	r3, 38112 <ull_rxfifo_alloc+0x72>
   380bc:	1e5c      	subs	r4, r3, #1
   380be:	f895 a000 	ldrb.w	sl, [r5]
   380c2:	4680      	mov	r8, r0
   380c4:	460e      	mov	r6, r1
   380c6:	b2e4      	uxtb	r4, r4
	last = last + 1;
   380c8:	f10a 0301 	add.w	r3, sl, #1
   380cc:	fa5f fa83 	uxtb.w	sl, r3
		last = 0U;
   380d0:	4556      	cmp	r6, sl
   380d2:	bf08      	it	eq
   380d4:	f04f 0a00 	moveq.w	sl, #0
	if (last == first) {
   380d8:	4557      	cmp	r7, sl
		link = mem_acquire(link_free);
   380da:	4648      	mov	r0, r9
   380dc:	d019      	beq.n	38112 <ull_rxfifo_alloc+0x72>
   380de:	f7fb fea3 	bl	33e28 <mem_acquire>
   380e2:	4683      	mov	fp, r0
		rx = mem_acquire(mem_free);
   380e4:	9800      	ldr	r0, [sp, #0]
		if (!link) {
   380e6:	f1bb 0f00 	cmp.w	fp, #0
   380ea:	d012      	beq.n	38112 <ull_rxfifo_alloc+0x72>
		rx = mem_acquire(mem_free);
   380ec:	f7fb fe9c 	bl	33e28 <mem_acquire>
		if (!rx) {
   380f0:	b190      	cbz	r0, 38118 <ull_rxfifo_alloc+0x78>
		link->mem = NULL;
   380f2:	2300      	movs	r3, #0
   380f4:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   380f8:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   380fc:	782a      	ldrb	r2, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   380fe:	9b01      	ldr	r3, [sp, #4]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   38100:	fb12 f208 	smulbb	r2, r2, r8
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   38104:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   38106:	3c01      	subs	r4, #1
   38108:	b2e4      	uxtb	r4, r4
   3810a:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
   3810c:	f885 a000 	strb.w	sl, [r5]
   38110:	d1da      	bne.n	380c8 <ull_rxfifo_alloc+0x28>
}
   38112:	b003      	add	sp, #12
   38114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
   38118:	4649      	mov	r1, r9
   3811a:	4658      	mov	r0, fp
}
   3811c:	b003      	add	sp, #12
   3811e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   38122:	f7fb be9b 	b.w	33e5c <mem_release>
   38126:	bf00      	nop

00038128 <init_reset>:
{
   38128:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
   3812a:	4c3f      	ldr	r4, [pc, #252]	; (38228 <init_reset+0x100>)
   3812c:	4d3f      	ldr	r5, [pc, #252]	; (3822c <init_reset+0x104>)
   3812e:	79a2      	ldrb	r2, [r4, #6]
   38130:	88a1      	ldrh	r1, [r4, #4]
   38132:	4e3f      	ldr	r6, [pc, #252]	; (38230 <init_reset+0x108>)
   38134:	2000      	movs	r0, #0
{
   38136:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
   38138:	4623      	mov	r3, r4
   3813a:	8068      	strh	r0, [r5, #2]
   3813c:	f104 0008 	add.w	r0, r4, #8
   38140:	f7fb fe42 	bl	33dc8 <mem_init>
   38144:	79e3      	ldrb	r3, [r4, #7]
   38146:	79a2      	ldrb	r2, [r4, #6]
   38148:	1d30      	adds	r0, r6, #4
   3814a:	441a      	add	r2, r3
   3814c:	2108      	movs	r1, #8
   3814e:	4633      	mov	r3, r6
   38150:	f7fb fe3a 	bl	33dc8 <mem_init>
   38154:	9602      	str	r6, [sp, #8]
   38156:	462e      	mov	r6, r5
   38158:	79a3      	ldrb	r3, [r4, #6]
   3815a:	f816 0b04 	ldrb.w	r0, [r6], #4
   3815e:	9303      	str	r3, [sp, #12]
   38160:	78aa      	ldrb	r2, [r5, #2]
   38162:	7869      	ldrb	r1, [r5, #1]
   38164:	1ceb      	adds	r3, r5, #3
   38166:	e9cd 6400 	strd	r6, r4, [sp]
   3816a:	f7ff ff99 	bl	380a0 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   3816e:	4b31      	ldr	r3, [pc, #196]	; (38234 <init_reset+0x10c>)
   38170:	2213      	movs	r2, #19
   38172:	1d18      	adds	r0, r3, #4
   38174:	2144      	movs	r1, #68	; 0x44
   38176:	f7fb fe27 	bl	33dc8 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   3817a:	4b2f      	ldr	r3, [pc, #188]	; (38238 <init_reset+0x110>)
   3817c:	2219      	movs	r2, #25
   3817e:	1d18      	adds	r0, r3, #4
   38180:	2108      	movs	r1, #8
   38182:	f7fb fe21 	bl	33dc8 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   38186:	482c      	ldr	r0, [pc, #176]	; (38238 <init_reset+0x110>)
   38188:	f7fb fe4e 	bl	33e28 <mem_acquire>
	LL_ASSERT(link);
   3818c:	4604      	mov	r4, r0
   3818e:	b308      	cbz	r0, 381d4 <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
   38190:	4a2a      	ldr	r2, [pc, #168]	; (3823c <init_reset+0x114>)
   38192:	4620      	mov	r0, r4
   38194:	1f11      	subs	r1, r2, #4
   38196:	f7fb fe9d 	bl	33ed4 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   3819a:	4825      	ldr	r0, [pc, #148]	; (38230 <init_reset+0x108>)
   3819c:	f7fb fe44 	bl	33e28 <mem_acquire>
	LL_ASSERT(link);
   381a0:	4604      	mov	r4, r0
   381a2:	b328      	cbz	r0, 381f0 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
   381a4:	4a26      	ldr	r2, [pc, #152]	; (38240 <init_reset+0x118>)
   381a6:	4620      	mov	r0, r4
   381a8:	1f11      	subs	r1, r2, #4
   381aa:	f7fb fe93 	bl	33ed4 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   381ae:	4822      	ldr	r0, [pc, #136]	; (38238 <init_reset+0x110>)
   381b0:	f7fb fe3a 	bl	33e28 <mem_acquire>
	LL_ASSERT(link);
   381b4:	4604      	mov	r4, r0
   381b6:	b348      	cbz	r0, 3820c <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
   381b8:	4a22      	ldr	r2, [pc, #136]	; (38244 <init_reset+0x11c>)
   381ba:	4620      	mov	r0, r4
   381bc:	1f11      	subs	r1, r2, #4
   381be:	f7fb fe89 	bl	33ed4 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   381c2:	4b21      	ldr	r3, [pc, #132]	; (38248 <init_reset+0x120>)
   381c4:	2210      	movs	r2, #16
	rx_alloc(UINT8_MAX);
   381c6:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   381c8:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   381ca:	f7ff f89f 	bl	3730c <rx_alloc>
}
   381ce:	2000      	movs	r0, #0
   381d0:	b004      	add	sp, #16
   381d2:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   381d4:	4a1d      	ldr	r2, [pc, #116]	; (3824c <init_reset+0x124>)
   381d6:	491e      	ldr	r1, [pc, #120]	; (38250 <init_reset+0x128>)
   381d8:	481e      	ldr	r0, [pc, #120]	; (38254 <init_reset+0x12c>)
   381da:	f640 0302 	movw	r3, #2050	; 0x802
   381de:	f011 fc0c 	bl	499fa <printk>
   381e2:	4040      	eors	r0, r0
   381e4:	f380 8811 	msr	BASEPRI, r0
   381e8:	f04f 0003 	mov.w	r0, #3
   381ec:	df02      	svc	2
   381ee:	e7cf      	b.n	38190 <init_reset+0x68>
	LL_ASSERT(link);
   381f0:	4a16      	ldr	r2, [pc, #88]	; (3824c <init_reset+0x124>)
   381f2:	4917      	ldr	r1, [pc, #92]	; (38250 <init_reset+0x128>)
   381f4:	4817      	ldr	r0, [pc, #92]	; (38254 <init_reset+0x12c>)
   381f6:	f640 030a 	movw	r3, #2058	; 0x80a
   381fa:	f011 fbfe 	bl	499fa <printk>
   381fe:	4040      	eors	r0, r0
   38200:	f380 8811 	msr	BASEPRI, r0
   38204:	f04f 0003 	mov.w	r0, #3
   38208:	df02      	svc	2
   3820a:	e7cb      	b.n	381a4 <init_reset+0x7c>
	LL_ASSERT(link);
   3820c:	4a0f      	ldr	r2, [pc, #60]	; (3824c <init_reset+0x124>)
   3820e:	4910      	ldr	r1, [pc, #64]	; (38250 <init_reset+0x128>)
   38210:	4810      	ldr	r0, [pc, #64]	; (38254 <init_reset+0x12c>)
   38212:	f640 0312 	movw	r3, #2066	; 0x812
   38216:	f011 fbf0 	bl	499fa <printk>
   3821a:	4040      	eors	r0, r0
   3821c:	f380 8811 	msr	BASEPRI, r0
   38220:	f04f 0003 	mov.w	r0, #3
   38224:	df02      	svc	2
   38226:	e7c7      	b.n	381b8 <init_reset+0x90>
   38228:	200009c0 	.word	0x200009c0
   3822c:	20000a98 	.word	0x20000a98
   38230:	20005204 	.word	0x20005204
   38234:	20004cf4 	.word	0x20004cf4
   38238:	20004c28 	.word	0x20004c28
   3823c:	20004c20 	.word	0x20004c20
   38240:	20004c10 	.word	0x20004c10
   38244:	20004c18 	.word	0x20004c18
   38248:	20004c24 	.word	0x20004c24
   3824c:	00052c10 	.word	0x00052c10
   38250:	00052fd8 	.word	0x00052fd8
   38254:	00052a70 	.word	0x00052a70

00038258 <ll_init>:
{
   38258:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   3825a:	4b31      	ldr	r3, [pc, #196]	; (38320 <ll_init+0xc8>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   3825c:	4c31      	ldr	r4, [pc, #196]	; (38324 <ll_init+0xcc>)
	sem_recv = sem_rx;
   3825e:	6018      	str	r0, [r3, #0]
{
   38260:	b087      	sub	sp, #28
	cntr_init();
   38262:	f00a fb95 	bl	42990 <cntr_init>
	mayfly_init();
   38266:	f7fb fe65 	bl	33f34 <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   3826a:	4a2f      	ldr	r2, [pc, #188]	; (38328 <ll_init+0xd0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   3826c:	4d2f      	ldr	r5, [pc, #188]	; (3832c <ll_init+0xd4>)
   3826e:	9505      	str	r5, [sp, #20]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   38270:	f04f 0c05 	mov.w	ip, #5
   38274:	f882 c008 	strb.w	ip, [r2, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   38278:	9404      	str	r4, [sp, #16]
   3827a:	4c2d      	ldr	r4, [pc, #180]	; (38330 <ll_init+0xd8>)
   3827c:	9403      	str	r4, [sp, #12]
   3827e:	4c2d      	ldr	r4, [pc, #180]	; (38334 <ll_init+0xdc>)
   38280:	9200      	str	r2, [sp, #0]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   38282:	2002      	movs	r0, #2
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   38284:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   38286:	210d      	movs	r1, #13
   38288:	e9cd 1401 	strd	r1, r4, [sp, #4]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   3828c:	7410      	strb	r0, [r2, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   3828e:	7610      	strb	r0, [r2, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   38290:	7013      	strb	r3, [r2, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   38292:	2000      	movs	r0, #0
   38294:	4a28      	ldr	r2, [pc, #160]	; (38338 <ll_init+0xe0>)
   38296:	f7fd f829 	bl	352ec <ticker_init>
	LL_ASSERT(!err);
   3829a:	2800      	cmp	r0, #0
   3829c:	d132      	bne.n	38304 <ll_init+0xac>
	return z_impl_k_sem_init(sem, initial_count, limit);
   3829e:	2201      	movs	r2, #1
   382a0:	2100      	movs	r1, #0
   382a2:	4826      	ldr	r0, [pc, #152]	; (3833c <ll_init+0xe4>)
   382a4:	f018 fc05 	bl	50ab2 <z_impl_k_sem_init>
	err = lll_init();
   382a8:	f008 f83e 	bl	40328 <lll_init>
	if (err) {
   382ac:	4604      	mov	r4, r0
   382ae:	b110      	cbz	r0, 382b6 <ll_init+0x5e>
}
   382b0:	4620      	mov	r0, r4
   382b2:	b007      	add	sp, #28
   382b4:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   382b6:	f7ff ff37 	bl	38128 <init_reset>
	if (err) {
   382ba:	4604      	mov	r4, r0
   382bc:	2800      	cmp	r0, #0
   382be:	d1f7      	bne.n	382b0 <ll_init+0x58>
	err = lll_adv_init();
   382c0:	f008 fc9a 	bl	40bf8 <lll_adv_init>
	if (err) {
   382c4:	4604      	mov	r4, r0
   382c6:	2800      	cmp	r0, #0
   382c8:	d1f2      	bne.n	382b0 <ll_init+0x58>
	err = ull_adv_init();
   382ca:	f000 fd05 	bl	38cd8 <ull_adv_init>
	if (err) {
   382ce:	4604      	mov	r4, r0
   382d0:	2800      	cmp	r0, #0
   382d2:	d1ed      	bne.n	382b0 <ll_init+0x58>
	err = lll_scan_init();
   382d4:	f009 fc28 	bl	41b28 <lll_scan_init>
	if (err) {
   382d8:	4604      	mov	r4, r0
   382da:	2800      	cmp	r0, #0
   382dc:	d1e8      	bne.n	382b0 <ll_init+0x58>
	err = ull_scan_init();
   382de:	f000 fe9d 	bl	3901c <ull_scan_init>
	if (err) {
   382e2:	4604      	mov	r4, r0
   382e4:	2800      	cmp	r0, #0
   382e6:	d1e3      	bne.n	382b0 <ll_init+0x58>
	err = lll_conn_init();
   382e8:	f009 fd52 	bl	41d90 <lll_conn_init>
	if (err) {
   382ec:	4604      	mov	r4, r0
   382ee:	2800      	cmp	r0, #0
   382f0:	d1de      	bne.n	382b0 <ll_init+0x58>
	err = ull_conn_init();
   382f2:	f002 f95f 	bl	3a5b4 <ull_conn_init>
	if (err) {
   382f6:	4604      	mov	r4, r0
   382f8:	2800      	cmp	r0, #0
   382fa:	d1d9      	bne.n	382b0 <ll_init+0x58>
		ull_filter_reset(true);
   382fc:	2001      	movs	r0, #1
   382fe:	f007 f8d1 	bl	3f4a4 <ull_filter_reset>
	return  0;
   38302:	e7d5      	b.n	382b0 <ll_init+0x58>
	LL_ASSERT(!err);
   38304:	4a0e      	ldr	r2, [pc, #56]	; (38340 <ll_init+0xe8>)
   38306:	490f      	ldr	r1, [pc, #60]	; (38344 <ll_init+0xec>)
   38308:	480f      	ldr	r0, [pc, #60]	; (38348 <ll_init+0xf0>)
   3830a:	f240 230d 	movw	r3, #525	; 0x20d
   3830e:	f011 fb74 	bl	499fa <printk>
   38312:	4040      	eors	r0, r0
   38314:	f380 8811 	msr	BASEPRI, r0
   38318:	f04f 0003 	mov.w	r0, #3
   3831c:	df02      	svc	2
   3831e:	e7be      	b.n	3829e <ll_init+0x46>
   38320:	20005230 	.word	0x20005230
   38324:	00043579 	.word	0x00043579
   38328:	200054f0 	.word	0x200054f0
   3832c:	000436c9 	.word	0x000436c9
   38330:	00043515 	.word	0x00043515
   38334:	2000524c 	.word	0x2000524c
   38338:	20005510 	.word	0x20005510
   3833c:	20005234 	.word	0x20005234
   38340:	00052c10 	.word	0x00052c10
   38344:	00052c4c 	.word	0x00052c4c
   38348:	00052a70 	.word	0x00052a70

0003834c <ll_reset>:
{
   3834c:	b510      	push	{r4, lr}
   3834e:	b086      	sub	sp, #24
	err = ull_adv_reset();
   38350:	f000 fcd2 	bl	38cf8 <ull_adv_reset>
	LL_ASSERT(!err);
   38354:	2800      	cmp	r0, #0
   38356:	d133      	bne.n	383c0 <ll_reset+0x74>
	err = ull_scan_reset();
   38358:	f000 fee0 	bl	3911c <ull_scan_reset>
	LL_ASSERT(!err);
   3835c:	2800      	cmp	r0, #0
   3835e:	d140      	bne.n	383e2 <ll_reset+0x96>
	err = ull_conn_reset();
   38360:	f002 f92a 	bl	3a5b8 <ull_conn_reset>
	LL_ASSERT(!err);
   38364:	2800      	cmp	r0, #0
   38366:	d14d      	bne.n	38404 <ll_reset+0xb8>
	MFIFO_INIT(tx_ack);
   38368:	4b43      	ldr	r3, [pc, #268]	; (38478 <ll_reset+0x12c>)
   3836a:	2400      	movs	r4, #0
   3836c:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   3836e:	4620      	mov	r0, r4
   38370:	f007 f898 	bl	3f4a4 <ull_filter_reset>
	MFIFO_INIT(prep);
   38374:	4941      	ldr	r1, [pc, #260]	; (3847c <ll_reset+0x130>)
	MFIFO_INIT(pdu_rx_free);
   38376:	4a42      	ldr	r2, [pc, #264]	; (38480 <ll_reset+0x134>)
	MFIFO_INIT(ll_pdu_rx_free);
   38378:	4b42      	ldr	r3, [pc, #264]	; (38484 <ll_reset+0x138>)
	MFIFO_INIT(prep);
   3837a:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
   3837c:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   3837e:	805c      	strh	r4, [r3, #2]
   38380:	2201      	movs	r2, #1
   38382:	4621      	mov	r1, r4
   38384:	4668      	mov	r0, sp
   38386:	f018 fb94 	bl	50ab2 <z_impl_k_sem_init>
		mfy.param = &sem;
   3838a:	4b3f      	ldr	r3, [pc, #252]	; (38488 <ll_reset+0x13c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   3838c:	4622      	mov	r2, r4
   3838e:	4621      	mov	r1, r4
   38390:	2003      	movs	r0, #3
		mfy.param = &sem;
   38392:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   38396:	f7fb fe21 	bl	33fdc <mayfly_enqueue>
		LL_ASSERT(!retval);
   3839a:	2800      	cmp	r0, #0
   3839c:	d15d      	bne.n	3845a <ll_reset+0x10e>
	return z_impl_k_sem_take(sem, timeout);
   3839e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   383a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   383a6:	4668      	mov	r0, sp
   383a8:	f00f fe88 	bl	480bc <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   383ac:	f000 fcaa 	bl	38d04 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   383b0:	2800      	cmp	r0, #0
   383b2:	d144      	bne.n	3843e <ll_reset+0xf2>
	err = init_reset();
   383b4:	f7ff feb8 	bl	38128 <init_reset>
	LL_ASSERT(!err);
   383b8:	2800      	cmp	r0, #0
   383ba:	d131      	bne.n	38420 <ll_reset+0xd4>
}
   383bc:	b006      	add	sp, #24
   383be:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   383c0:	4a32      	ldr	r2, [pc, #200]	; (3848c <ll_reset+0x140>)
   383c2:	4933      	ldr	r1, [pc, #204]	; (38490 <ll_reset+0x144>)
   383c4:	4833      	ldr	r0, [pc, #204]	; (38494 <ll_reset+0x148>)
   383c6:	f240 23ad 	movw	r3, #685	; 0x2ad
   383ca:	f011 fb16 	bl	499fa <printk>
   383ce:	4040      	eors	r0, r0
   383d0:	f380 8811 	msr	BASEPRI, r0
   383d4:	f04f 0003 	mov.w	r0, #3
   383d8:	df02      	svc	2
	err = ull_scan_reset();
   383da:	f000 fe9f 	bl	3911c <ull_scan_reset>
	LL_ASSERT(!err);
   383de:	2800      	cmp	r0, #0
   383e0:	d0be      	beq.n	38360 <ll_reset+0x14>
   383e2:	4a2a      	ldr	r2, [pc, #168]	; (3848c <ll_reset+0x140>)
   383e4:	492a      	ldr	r1, [pc, #168]	; (38490 <ll_reset+0x144>)
   383e6:	482b      	ldr	r0, [pc, #172]	; (38494 <ll_reset+0x148>)
   383e8:	f240 23b3 	movw	r3, #691	; 0x2b3
   383ec:	f011 fb05 	bl	499fa <printk>
   383f0:	4040      	eors	r0, r0
   383f2:	f380 8811 	msr	BASEPRI, r0
   383f6:	f04f 0003 	mov.w	r0, #3
   383fa:	df02      	svc	2
	err = ull_conn_reset();
   383fc:	f002 f8dc 	bl	3a5b8 <ull_conn_reset>
	LL_ASSERT(!err);
   38400:	2800      	cmp	r0, #0
   38402:	d0b1      	beq.n	38368 <ll_reset+0x1c>
   38404:	4a21      	ldr	r2, [pc, #132]	; (3848c <ll_reset+0x140>)
   38406:	4922      	ldr	r1, [pc, #136]	; (38490 <ll_reset+0x144>)
   38408:	4822      	ldr	r0, [pc, #136]	; (38494 <ll_reset+0x148>)
   3840a:	f240 23de 	movw	r3, #734	; 0x2de
   3840e:	f011 faf4 	bl	499fa <printk>
   38412:	4040      	eors	r0, r0
   38414:	f380 8811 	msr	BASEPRI, r0
   38418:	f04f 0003 	mov.w	r0, #3
   3841c:	df02      	svc	2
   3841e:	e7a3      	b.n	38368 <ll_reset+0x1c>
	LL_ASSERT(!err);
   38420:	4a1a      	ldr	r2, [pc, #104]	; (3848c <ll_reset+0x140>)
   38422:	491b      	ldr	r1, [pc, #108]	; (38490 <ll_reset+0x144>)
   38424:	481b      	ldr	r0, [pc, #108]	; (38494 <ll_reset+0x148>)
   38426:	f240 3327 	movw	r3, #807	; 0x327
   3842a:	f011 fae6 	bl	499fa <printk>
   3842e:	4040      	eors	r0, r0
   38430:	f380 8811 	msr	BASEPRI, r0
   38434:	f04f 0003 	mov.w	r0, #3
   38438:	df02      	svc	2
}
   3843a:	b006      	add	sp, #24
   3843c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   3843e:	4a13      	ldr	r2, [pc, #76]	; (3848c <ll_reset+0x140>)
   38440:	4913      	ldr	r1, [pc, #76]	; (38490 <ll_reset+0x144>)
   38442:	4814      	ldr	r0, [pc, #80]	; (38494 <ll_reset+0x148>)
   38444:	f240 331a 	movw	r3, #794	; 0x31a
   38448:	f011 fad7 	bl	499fa <printk>
   3844c:	4040      	eors	r0, r0
   3844e:	f380 8811 	msr	BASEPRI, r0
   38452:	f04f 0003 	mov.w	r0, #3
   38456:	df02      	svc	2
   38458:	e7ac      	b.n	383b4 <ll_reset+0x68>
		LL_ASSERT(!retval);
   3845a:	4a0c      	ldr	r2, [pc, #48]	; (3848c <ll_reset+0x140>)
   3845c:	490e      	ldr	r1, [pc, #56]	; (38498 <ll_reset+0x14c>)
   3845e:	480d      	ldr	r0, [pc, #52]	; (38494 <ll_reset+0x148>)
   38460:	f240 330d 	movw	r3, #781	; 0x30d
   38464:	f011 fac9 	bl	499fa <printk>
   38468:	4040      	eors	r0, r0
   3846a:	f380 8811 	msr	BASEPRI, r0
   3846e:	f04f 0003 	mov.w	r0, #3
   38472:	df02      	svc	2
   38474:	e793      	b.n	3839e <ll_reset+0x52>
   38476:	bf00      	nop
   38478:	2000094c 	.word	0x2000094c
   3847c:	20000ab0 	.word	0x20000ab0
   38480:	200009a8 	.word	0x200009a8
   38484:	20000970 	.word	0x20000970
   38488:	2000093c 	.word	0x2000093c
   3848c:	00052c10 	.word	0x00052c10
   38490:	00052c4c 	.word	0x00052c4c
   38494:	00052a70 	.word	0x00052a70
   38498:	00052d74 	.word	0x00052d74

0003849c <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   3849c:	b510      	push	{r4, lr}
   3849e:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   384a0:	2400      	movs	r4, #0
   384a2:	e9cd 4400 	strd	r4, r4, [sp]
   384a6:	9b04      	ldr	r3, [sp, #16]
   384a8:	f008 f962 	bl	40770 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   384ac:	b002      	add	sp, #8
   384ae:	bd10      	pop	{r4, pc}

000384b0 <lll_resume>:

void lll_resume(void *param)
{
   384b0:	b510      	push	{r4, lr}
   384b2:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   384b4:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   384b6:	691a      	ldr	r2, [r3, #16]
   384b8:	6999      	ldr	r1, [r3, #24]
   384ba:	2401      	movs	r4, #1
{
   384bc:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   384be:	4020      	ands	r0, r4
   384c0:	e9cd 0400 	strd	r0, r4, [sp]
   384c4:	6958      	ldr	r0, [r3, #20]
   384c6:	f008 f953 	bl	40770 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   384ca:	b108      	cbz	r0, 384d0 <lll_resume+0x20>
   384cc:	3077      	adds	r0, #119	; 0x77
   384ce:	d101      	bne.n	384d4 <lll_resume+0x24>
}
   384d0:	b002      	add	sp, #8
   384d2:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   384d4:	4a06      	ldr	r2, [pc, #24]	; (384f0 <lll_resume+0x40>)
   384d6:	4907      	ldr	r1, [pc, #28]	; (384f4 <lll_resume+0x44>)
   384d8:	4807      	ldr	r0, [pc, #28]	; (384f8 <lll_resume+0x48>)
   384da:	234f      	movs	r3, #79	; 0x4f
   384dc:	f011 fa8d 	bl	499fa <printk>
   384e0:	4040      	eors	r0, r0
   384e2:	f380 8811 	msr	BASEPRI, r0
   384e6:	f04f 0003 	mov.w	r0, #3
   384ea:	df02      	svc	2
}
   384ec:	b002      	add	sp, #8
   384ee:	bd10      	pop	{r4, pc}
   384f0:	00052d7c 	.word	0x00052d7c
   384f4:	00052dc0 	.word	0x00052dc0
   384f8:	00052a70 	.word	0x00052a70

000384fc <ticker_stop_cb>:
{
   384fc:	b530      	push	{r4, r5, lr}
   384fe:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   38500:	4b19      	ldr	r3, [pc, #100]	; (38568 <ticker_stop_cb+0x6c>)
{
   38502:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   38504:	4a19      	ldr	r2, [pc, #100]	; (3856c <ticker_stop_cb+0x70>)
   38506:	1aeb      	subs	r3, r5, r3
   38508:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   3850c:	f413 5f7f 	tst.w	r3, #16320	; 0x3fc0
	handle = ull_adv_handle_get(adv);
   38510:	f3c3 1487 	ubfx	r4, r3, #6, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   38514:	d119      	bne.n	3854a <ticker_stop_cb+0x4e>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   38516:	1ca2      	adds	r2, r4, #2
   38518:	4b15      	ldr	r3, [pc, #84]	; (38570 <ticker_stop_cb+0x74>)
   3851a:	9500      	str	r5, [sp, #0]
   3851c:	b2d2      	uxtb	r2, r2
   3851e:	2101      	movs	r1, #1
   38520:	2000      	movs	r0, #0
   38522:	f7fd f82d 	bl	35580 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   38526:	f030 0302 	bics.w	r3, r0, #2
   3852a:	d00c      	beq.n	38546 <ticker_stop_cb+0x4a>
   3852c:	4a11      	ldr	r2, [pc, #68]	; (38574 <ticker_stop_cb+0x78>)
   3852e:	4912      	ldr	r1, [pc, #72]	; (38578 <ticker_stop_cb+0x7c>)
   38530:	4812      	ldr	r0, [pc, #72]	; (3857c <ticker_stop_cb+0x80>)
   38532:	f640 03d2 	movw	r3, #2258	; 0x8d2
   38536:	f011 fa60 	bl	499fa <printk>
   3853a:	4040      	eors	r0, r0
   3853c:	f380 8811 	msr	BASEPRI, r0
   38540:	f04f 0003 	mov.w	r0, #3
   38544:	df02      	svc	2
}
   38546:	b003      	add	sp, #12
   38548:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   3854a:	4a0a      	ldr	r2, [pc, #40]	; (38574 <ticker_stop_cb+0x78>)
   3854c:	490c      	ldr	r1, [pc, #48]	; (38580 <ticker_stop_cb+0x84>)
   3854e:	480b      	ldr	r0, [pc, #44]	; (3857c <ticker_stop_cb+0x80>)
   38550:	f640 03cd 	movw	r3, #2253	; 0x8cd
   38554:	f011 fa51 	bl	499fa <printk>
   38558:	4040      	eors	r0, r0
   3855a:	f380 8811 	msr	BASEPRI, r0
   3855e:	f04f 0003 	mov.w	r0, #3
   38562:	df02      	svc	2
   38564:	e7d7      	b.n	38516 <ticker_stop_cb+0x1a>
   38566:	bf00      	nop
   38568:	200057b4 	.word	0x200057b4
   3856c:	88888889 	.word	0x88888889
   38570:	00038619 	.word	0x00038619
   38574:	00052dd4 	.word	0x00052dd4
   38578:	00052e20 	.word	0x00052e20
   3857c:	00052a70 	.word	0x00052a70
   38580:	00052e14 	.word	0x00052e14

00038584 <disabled_cb>:
{
   38584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   38586:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   38588:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
   3858a:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   3858c:	b1d7      	cbz	r7, 385c4 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
   3858e:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
   38590:	2300      	movs	r3, #0
   38592:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   38594:	b34c      	cbz	r4, 385ea <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
   38596:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   38598:	2316      	movs	r3, #22
	adv->node_rx_cc_free = NULL;
   3859a:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   3859c:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   3859e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   385a2:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   385a4:	221e      	movs	r2, #30
   385a6:	f104 001c 	add.w	r0, r4, #28
   385aa:	f013 fb60 	bl	4bc6e <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   385ae:	233c      	movs	r3, #60	; 0x3c
   385b0:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
   385b2:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   385b4:	4621      	mov	r1, r4
   385b6:	4638      	mov	r0, r7
   385b8:	f7ff fab0 	bl	37b1c <ll_rx_put>
}
   385bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   385c0:	f7ff bab6 	b.w	37b30 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   385c4:	4a10      	ldr	r2, [pc, #64]	; (38608 <disabled_cb+0x84>)
   385c6:	4911      	ldr	r1, [pc, #68]	; (3860c <disabled_cb+0x88>)
   385c8:	4811      	ldr	r0, [pc, #68]	; (38610 <disabled_cb+0x8c>)
   385ca:	f640 131a 	movw	r3, #2330	; 0x91a
   385ce:	f011 fa14 	bl	499fa <printk>
   385d2:	4040      	eors	r0, r0
   385d4:	f380 8811 	msr	BASEPRI, r0
   385d8:	f04f 0003 	mov.w	r0, #3
   385dc:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   385de:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
   385e0:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
   385e2:	2300      	movs	r3, #0
   385e4:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   385e6:	2c00      	cmp	r4, #0
   385e8:	d1d5      	bne.n	38596 <disabled_cb+0x12>
   385ea:	4a07      	ldr	r2, [pc, #28]	; (38608 <disabled_cb+0x84>)
   385ec:	4909      	ldr	r1, [pc, #36]	; (38614 <disabled_cb+0x90>)
   385ee:	4808      	ldr	r0, [pc, #32]	; (38610 <disabled_cb+0x8c>)
   385f0:	f640 131e 	movw	r3, #2334	; 0x91e
   385f4:	f011 fa01 	bl	499fa <printk>
   385f8:	4040      	eors	r0, r0
   385fa:	f380 8811 	msr	BASEPRI, r0
   385fe:	f04f 0003 	mov.w	r0, #3
   38602:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   38604:	6e6c      	ldr	r4, [r5, #100]	; 0x64
   38606:	e7c6      	b.n	38596 <disabled_cb+0x12>
   38608:	00052dd4 	.word	0x00052dd4
   3860c:	00052e3c 	.word	0x00052e3c
   38610:	00052a70 	.word	0x00052a70
   38614:	00052e50 	.word	0x00052e50

00038618 <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   38618:	b100      	cbz	r0, 3861c <ticker_stop_op_cb+0x4>
   3861a:	4770      	bx	lr
	mfy.param = param;
   3861c:	4b0c      	ldr	r3, [pc, #48]	; (38650 <ticker_stop_op_cb+0x38>)
{
   3861e:	b510      	push	{r4, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   38620:	4602      	mov	r2, r0
   38622:	460c      	mov	r4, r1
   38624:	2002      	movs	r0, #2
   38626:	2101      	movs	r1, #1
	mfy.param = param;
   38628:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   3862a:	f7fb fcd7 	bl	33fdc <mayfly_enqueue>
	LL_ASSERT(!ret);
   3862e:	b900      	cbnz	r0, 38632 <ticker_stop_op_cb+0x1a>
}
   38630:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   38632:	4a08      	ldr	r2, [pc, #32]	; (38654 <ticker_stop_op_cb+0x3c>)
   38634:	4908      	ldr	r1, [pc, #32]	; (38658 <ticker_stop_op_cb+0x40>)
   38636:	4809      	ldr	r0, [pc, #36]	; (3865c <ticker_stop_op_cb+0x44>)
   38638:	f640 03ee 	movw	r3, #2286	; 0x8ee
   3863c:	f011 f9dd 	bl	499fa <printk>
   38640:	4040      	eors	r0, r0
   38642:	f380 8811 	msr	BASEPRI, r0
   38646:	f04f 0003 	mov.w	r0, #3
   3864a:	df02      	svc	2
}
   3864c:	bd10      	pop	{r4, pc}
   3864e:	bf00      	nop
   38650:	20000bd4 	.word	0x20000bd4
   38654:	00052dd4 	.word	0x00052dd4
   38658:	00052d4c 	.word	0x00052d4c
   3865c:	00052a70 	.word	0x00052a70

00038660 <adv_disable>:
{
   38660:	b538      	push	{r3, r4, r5, lr}
   38662:	4604      	mov	r4, r0
   38664:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   38668:	b353      	cbz	r3, 386c0 <adv_disable+0x60>
		mfy.param = &adv->lll;
   3866a:	4d17      	ldr	r5, [pc, #92]	; (386c8 <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   3866c:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
   3866e:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   38670:	b16b      	cbz	r3, 3868e <adv_disable+0x2e>
   38672:	4a16      	ldr	r2, [pc, #88]	; (386cc <adv_disable+0x6c>)
   38674:	4916      	ldr	r1, [pc, #88]	; (386d0 <adv_disable+0x70>)
   38676:	4817      	ldr	r0, [pc, #92]	; (386d4 <adv_disable+0x74>)
   38678:	f640 1303 	movw	r3, #2307	; 0x903
   3867c:	f011 f9bd 	bl	499fa <printk>
   38680:	4040      	eors	r0, r0
   38682:	f380 8811 	msr	BASEPRI, r0
   38686:	f04f 0003 	mov.w	r0, #3
   3868a:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   3868c:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   3868e:	4912      	ldr	r1, [pc, #72]	; (386d8 <adv_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   38690:	4b0d      	ldr	r3, [pc, #52]	; (386c8 <adv_disable+0x68>)
   38692:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   38694:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   38698:	4611      	mov	r1, r2
   3869a:	2001      	movs	r0, #1
   3869c:	f7fb fc9e 	bl	33fdc <mayfly_enqueue>
		LL_ASSERT(!ret);
   386a0:	b900      	cbnz	r0, 386a4 <adv_disable+0x44>
}
   386a2:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   386a4:	4a09      	ldr	r2, [pc, #36]	; (386cc <adv_disable+0x6c>)
   386a6:	490d      	ldr	r1, [pc, #52]	; (386dc <adv_disable+0x7c>)
   386a8:	480a      	ldr	r0, [pc, #40]	; (386d4 <adv_disable+0x74>)
   386aa:	f640 130a 	movw	r3, #2314	; 0x90a
   386ae:	f011 f9a4 	bl	499fa <printk>
   386b2:	4040      	eors	r0, r0
   386b4:	f380 8811 	msr	BASEPRI, r0
   386b8:	f04f 0003 	mov.w	r0, #3
   386bc:	df02      	svc	2
}
   386be:	bd38      	pop	{r3, r4, r5, pc}
   386c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
   386c4:	f7ff bf5e 	b.w	38584 <disabled_cb>
   386c8:	20000bc4 	.word	0x20000bc4
   386cc:	00052dd4 	.word	0x00052dd4
   386d0:	00052e68 	.word	0x00052e68
   386d4:	00052a70 	.word	0x00052a70
   386d8:	00038585 	.word	0x00038585
   386dc:	00052d4c 	.word	0x00052d4c

000386e0 <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   386e0:	b900      	cbnz	r0, 386e4 <ticker_update_op_cb+0x4>
   386e2:	4770      	bx	lr
{
   386e4:	b510      	push	{r4, lr}
   386e6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   386e8:	f7ff faf6 	bl	37cd8 <ull_disable_mark_get>
   386ec:	4284      	cmp	r4, r0
   386ee:	d00c      	beq.n	3870a <ticker_update_op_cb+0x2a>
   386f0:	4a06      	ldr	r2, [pc, #24]	; (3870c <ticker_update_op_cb+0x2c>)
   386f2:	4907      	ldr	r1, [pc, #28]	; (38710 <ticker_update_op_cb+0x30>)
   386f4:	4807      	ldr	r0, [pc, #28]	; (38714 <ticker_update_op_cb+0x34>)
   386f6:	f640 03bf 	movw	r3, #2239	; 0x8bf
   386fa:	f011 f97e 	bl	499fa <printk>
   386fe:	4040      	eors	r0, r0
   38700:	f380 8811 	msr	BASEPRI, r0
   38704:	f04f 0003 	mov.w	r0, #3
   38708:	df02      	svc	2
}
   3870a:	bd10      	pop	{r4, pc}
   3870c:	00052dd4 	.word	0x00052dd4
   38710:	00052e7c 	.word	0x00052e7c
   38714:	00052a70 	.word	0x00052a70

00038718 <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
   38718:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   3871a:	4b13      	ldr	r3, [pc, #76]	; (38768 <init_set.constprop.0+0x50>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   3871c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   3871e:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   38722:	f893 c06a 	ldrb.w	ip, [r3, #106]	; 0x6a
   38726:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   3872a:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   3872e:	f022 0202 	bic.w	r2, r2, #2
   38732:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   38734:	f042 020e 	orr.w	r2, r2, #14
   38738:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
   3873a:	2006      	movs	r0, #6
	pdu->type = pdu_type;
   3873c:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   3873e:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   38742:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   38746:	f8a3 e068 	strh.w	lr, [r3, #104]	; 0x68
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   3874a:	f883 c06a 	strb.w	ip, [r3, #106]	; 0x6a
	pdu->len = BDADDR_SIZE;
   3874e:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
   38750:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   38752:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   38756:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   3875a:	2204      	movs	r2, #4
   3875c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   3875e:	7058      	strb	r0, [r3, #1]
	pdu->type = pdu_type;
   38760:	701a      	strb	r2, [r3, #0]
	adv->delay_remain = ULL_ADV_RANDOM_DELAY;
#endif /* ONFIG_BT_CTLR_JIT_SCHEDULING */

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
   38762:	f85d fb04 	ldr.w	pc, [sp], #4
   38766:	bf00      	nop
   38768:	200057b4 	.word	0x200057b4

0003876c <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   3876c:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   3876e:	4c1b      	ldr	r4, [pc, #108]	; (387dc <conn_release.constprop.0+0x70>)
   38770:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
   38772:	6dab      	ldr	r3, [r5, #88]	; 0x58
   38774:	b163      	cbz	r3, 38790 <conn_release.constprop.0+0x24>
   38776:	4a1a      	ldr	r2, [pc, #104]	; (387e0 <conn_release.constprop.0+0x74>)
   38778:	491a      	ldr	r1, [pc, #104]	; (387e4 <conn_release.constprop.0+0x78>)
   3877a:	481b      	ldr	r0, [pc, #108]	; (387e8 <conn_release.constprop.0+0x7c>)
   3877c:	f640 1348 	movw	r3, #2376	; 0x948
   38780:	f011 f93b 	bl	499fa <printk>
   38784:	4040      	eors	r0, r0
   38786:	f380 8811 	msr	BASEPRI, r0
   3878a:	f04f 0003 	mov.w	r0, #3
   3878e:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   38790:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   38794:	f105 0048 	add.w	r0, r5, #72	; 0x48
   38798:	f7fb fba0 	bl	33edc <memq_deinit>
	LL_ASSERT(link);
   3879c:	4606      	mov	r6, r0
   3879e:	b170      	cbz	r0, 387be <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   387a0:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   387a2:	65ae      	str	r6, [r5, #88]	; 0x58
	adv->lll.conn = NULL;
   387a4:	2500      	movs	r5, #0
	ll_conn_release(lll->hdr.parent);
   387a6:	f001 fbf7 	bl	39f98 <ll_conn_release>
	ll_rx_release(adv->node_rx_cc_free);
   387aa:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
   387ac:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   387ae:	f7ff f9af 	bl	37b10 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   387b2:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
   387b4:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
   387b6:	f7ff f99f 	bl	37af8 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   387ba:	6625      	str	r5, [r4, #96]	; 0x60
}
   387bc:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   387be:	4a08      	ldr	r2, [pc, #32]	; (387e0 <conn_release.constprop.0+0x74>)
   387c0:	490a      	ldr	r1, [pc, #40]	; (387ec <conn_release.constprop.0+0x80>)
   387c2:	4809      	ldr	r0, [pc, #36]	; (387e8 <conn_release.constprop.0+0x7c>)
   387c4:	f640 134a 	movw	r3, #2378	; 0x94a
   387c8:	f011 f917 	bl	499fa <printk>
   387cc:	4040      	eors	r0, r0
   387ce:	f380 8811 	msr	BASEPRI, r0
   387d2:	f04f 0003 	mov.w	r0, #3
   387d6:	df02      	svc	2
   387d8:	e7e2      	b.n	387a0 <conn_release.constprop.0+0x34>
   387da:	bf00      	nop
   387dc:	200057b4 	.word	0x200057b4
   387e0:	00052dd4 	.word	0x00052dd4
   387e4:	00052eac 	.word	0x00052eac
   387e8:	00052a70 	.word	0x00052a70
   387ec:	00052fd8 	.word	0x00052fd8

000387f0 <disable.constprop.0>:
static inline uint8_t disable(uint8_t handle)
   387f0:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
   387f2:	4c52      	ldr	r4, [pc, #328]	; (3893c <disable.constprop.0+0x14c>)
   387f4:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   387f8:	07d9      	lsls	r1, r3, #31
static inline uint8_t disable(uint8_t handle)
   387fa:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
   387fc:	d563      	bpl.n	388c6 <disable.constprop.0+0xd6>
	if (adv->lll.conn) {
   387fe:	6a23      	ldr	r3, [r4, #32]
   38800:	b153      	cbz	r3, 38818 <disable.constprop.0+0x28>
		adv->lll.conn->periph.cancelled = 1U;
   38802:	f893 2020 	ldrb.w	r2, [r3, #32]
   38806:	f042 0202 	orr.w	r2, r2, #2
   3880a:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   3880e:	6a23      	ldr	r3, [r4, #32]
   38810:	f893 3020 	ldrb.w	r3, [r3, #32]
   38814:	07da      	lsls	r2, r3, #31
   38816:	d46b      	bmi.n	388f0 <disable.constprop.0+0x100>
	mark = ull_disable_mark(adv);
   38818:	4848      	ldr	r0, [pc, #288]	; (3893c <disable.constprop.0+0x14c>)
   3881a:	f7ff fa45 	bl	37ca8 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   3881e:	4284      	cmp	r4, r0
   38820:	d00c      	beq.n	3883c <disable.constprop.0+0x4c>
   38822:	4a47      	ldr	r2, [pc, #284]	; (38940 <disable.constprop.0+0x150>)
   38824:	4947      	ldr	r1, [pc, #284]	; (38944 <disable.constprop.0+0x154>)
   38826:	4848      	ldr	r0, [pc, #288]	; (38948 <disable.constprop.0+0x158>)
   38828:	f640 13ff 	movw	r3, #2559	; 0x9ff
   3882c:	f011 f8e5 	bl	499fa <printk>
   38830:	4040      	eors	r0, r0
   38832:	f380 8811 	msr	BASEPRI, r0
   38836:	f04f 0003 	mov.w	r0, #3
   3883a:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   3883c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   38840:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   38842:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   38844:	d50d      	bpl.n	38862 <disable.constprop.0+0x72>
		ret_cb = TICKER_STATUS_BUSY;
   38846:	2102      	movs	r1, #2
   38848:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3884a:	4b40      	ldr	r3, [pc, #256]	; (3894c <disable.constprop.0+0x15c>)
   3884c:	9500      	str	r5, [sp, #0]
   3884e:	2103      	movs	r1, #3
   38850:	2201      	movs	r2, #1
   38852:	2000      	movs	r0, #0
   38854:	f7fc fe94 	bl	35580 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   38858:	4629      	mov	r1, r5
   3885a:	f7ff f9fd 	bl	37c58 <ull_ticker_status_take>
		if (ret) {
   3885e:	2800      	cmp	r0, #0
   38860:	d159      	bne.n	38916 <disable.constprop.0+0x126>
	ret_cb = TICKER_STATUS_BUSY;
   38862:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   38864:	2103      	movs	r1, #3
   38866:	4b39      	ldr	r3, [pc, #228]	; (3894c <disable.constprop.0+0x15c>)
   38868:	9500      	str	r5, [sp, #0]
   3886a:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   3886c:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   3886e:	f7fc fe87 	bl	35580 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   38872:	4629      	mov	r1, r5
   38874:	f7ff f9f0 	bl	37c58 <ull_ticker_status_take>
	if (ret) {
   38878:	bb40      	cbnz	r0, 388cc <disable.constprop.0+0xdc>
	err = ull_disable(&adv->lll);
   3887a:	4835      	ldr	r0, [pc, #212]	; (38950 <disable.constprop.0+0x160>)
   3887c:	f7ff fa50 	bl	37d20 <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
   38880:	b108      	cbz	r0, 38886 <disable.constprop.0+0x96>
   38882:	3078      	adds	r0, #120	; 0x78
   38884:	d136      	bne.n	388f4 <disable.constprop.0+0x104>
	mark = ull_disable_unmark(adv);
   38886:	482d      	ldr	r0, [pc, #180]	; (3893c <disable.constprop.0+0x14c>)
   38888:	f7ff fa1a 	bl	37cc0 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   3888c:	4284      	cmp	r4, r0
   3888e:	d00c      	beq.n	388aa <disable.constprop.0+0xba>
   38890:	4a2b      	ldr	r2, [pc, #172]	; (38940 <disable.constprop.0+0x150>)
   38892:	492c      	ldr	r1, [pc, #176]	; (38944 <disable.constprop.0+0x154>)
   38894:	482c      	ldr	r0, [pc, #176]	; (38948 <disable.constprop.0+0x158>)
   38896:	f640 2321 	movw	r3, #2593	; 0xa21
   3889a:	f011 f8ae 	bl	499fa <printk>
   3889e:	4040      	eors	r0, r0
   388a0:	f380 8811 	msr	BASEPRI, r0
   388a4:	f04f 0003 	mov.w	r0, #3
   388a8:	df02      	svc	2
	if (adv->lll.conn) {
   388aa:	6a23      	ldr	r3, [r4, #32]
   388ac:	b10b      	cbz	r3, 388b2 <disable.constprop.0+0xc2>
		conn_release(adv);
   388ae:	f7ff ff5d 	bl	3876c <conn_release.constprop.0>
	adv->is_enabled = 0U;
   388b2:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   388b6:	f36f 0300 	bfc	r3, #0, #1
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   388ba:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
   388bc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   388c0:	f000 fc68 	bl	39194 <ull_scan_is_enabled_get>
   388c4:	b320      	cbz	r0, 38910 <disable.constprop.0+0x120>
			return 0;
   388c6:	2000      	movs	r0, #0
}
   388c8:	b005      	add	sp, #20
   388ca:	bd30      	pop	{r4, r5, pc}
		mark = ull_disable_unmark(adv);
   388cc:	481b      	ldr	r0, [pc, #108]	; (3893c <disable.constprop.0+0x14c>)
   388ce:	f7ff f9f7 	bl	37cc0 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   388d2:	4284      	cmp	r4, r0
   388d4:	d00c      	beq.n	388f0 <disable.constprop.0+0x100>
   388d6:	4a1a      	ldr	r2, [pc, #104]	; (38940 <disable.constprop.0+0x150>)
   388d8:	491a      	ldr	r1, [pc, #104]	; (38944 <disable.constprop.0+0x154>)
   388da:	481b      	ldr	r0, [pc, #108]	; (38948 <disable.constprop.0+0x158>)
   388dc:	f640 2318 	movw	r3, #2584	; 0xa18
   388e0:	f011 f88b 	bl	499fa <printk>
   388e4:	4040      	eors	r0, r0
   388e6:	f380 8811 	msr	BASEPRI, r0
   388ea:	f04f 0003 	mov.w	r0, #3
   388ee:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   388f0:	200c      	movs	r0, #12
   388f2:	e7e9      	b.n	388c8 <disable.constprop.0+0xd8>
	LL_ASSERT(!err || (err == -EALREADY));
   388f4:	4a12      	ldr	r2, [pc, #72]	; (38940 <disable.constprop.0+0x150>)
   388f6:	4917      	ldr	r1, [pc, #92]	; (38954 <disable.constprop.0+0x164>)
   388f8:	4813      	ldr	r0, [pc, #76]	; (38948 <disable.constprop.0+0x158>)
   388fa:	f640 231e 	movw	r3, #2590	; 0xa1e
   388fe:	f011 f87c 	bl	499fa <printk>
   38902:	4040      	eors	r0, r0
   38904:	f380 8811 	msr	BASEPRI, r0
   38908:	f04f 0003 	mov.w	r0, #3
   3890c:	df02      	svc	2
   3890e:	e7ba      	b.n	38886 <disable.constprop.0+0x96>
		ull_filter_adv_scan_state_cb(0);
   38910:	f006 fe4a 	bl	3f5a8 <ull_filter_adv_scan_state_cb>
   38914:	e7d7      	b.n	388c6 <disable.constprop.0+0xd6>
			mark = ull_disable_unmark(adv);
   38916:	4809      	ldr	r0, [pc, #36]	; (3893c <disable.constprop.0+0x14c>)
   38918:	f7ff f9d2 	bl	37cc0 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   3891c:	4284      	cmp	r4, r0
   3891e:	d0e7      	beq.n	388f0 <disable.constprop.0+0x100>
   38920:	4a07      	ldr	r2, [pc, #28]	; (38940 <disable.constprop.0+0x150>)
   38922:	4908      	ldr	r1, [pc, #32]	; (38944 <disable.constprop.0+0x154>)
   38924:	4808      	ldr	r0, [pc, #32]	; (38948 <disable.constprop.0+0x158>)
   38926:	f640 230a 	movw	r3, #2570	; 0xa0a
   3892a:	f011 f866 	bl	499fa <printk>
   3892e:	4040      	eors	r0, r0
   38930:	f380 8811 	msr	BASEPRI, r0
   38934:	f04f 0003 	mov.w	r0, #3
   38938:	df02      	svc	2
   3893a:	e7d9      	b.n	388f0 <disable.constprop.0+0x100>
   3893c:	200057b4 	.word	0x200057b4
   38940:	00052dd4 	.word	0x00052dd4
   38944:	00052ec0 	.word	0x00052ec0
   38948:	00052a70 	.word	0x00052a70
   3894c:	00037131 	.word	0x00037131
   38950:	200057d0 	.word	0x200057d0
   38954:	00052ecc 	.word	0x00052ecc

00038958 <adv_time_get.constprop.0.isra.0>:
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
   38958:	b410      	push	{r4}
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   3895a:	7804      	ldrb	r4, [r0, #0]
   3895c:	f004 040f 	and.w	r4, r4, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
   38960:	1e53      	subs	r3, r2, #1
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   38962:	2c02      	cmp	r4, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   38964:	b29b      	uxth	r3, r3
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   38966:	d01f      	beq.n	389a8 <adv_time_get.constprop.0.isra.0+0x50>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   38968:	2c01      	cmp	r4, #1
   3896a:	d009      	beq.n	38980 <adv_time_get.constprop.0.isra.0+0x28>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   3896c:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
   3896e:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
   38970:	b18c      	cbz	r4, 38996 <adv_time_get.constprop.0.isra.0+0x3e>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
   38972:	2c06      	cmp	r4, #6
   38974:	d00f      	beq.n	38996 <adv_time_get.constprop.0.isra.0+0x3e>
   38976:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   3897a:	f44f 70f3 	mov.w	r0, #486	; 0x1e6
   3897e:	e003      	b.n	38988 <adv_time_get.constprop.0.isra.0+0x30>
   38980:	f44f 6287 	mov.w	r2, #1080	; 0x438
   38984:	f240 2016 	movw	r0, #534	; 0x216
			time_us += (BYTES2US(adv_size, PHY_1M) +
   38988:	fb03 2300 	mla	r3, r3, r0, r2
   3898c:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   38990:	4018      	ands	r0, r3
}
   38992:	bc10      	pop	{r4}
   38994:	4770      	bx	lr
				adv_size += pdu->len;
   38996:	7842      	ldrb	r2, [r0, #1]
   38998:	3210      	adds	r2, #16
			time_us += (BYTES2US(adv_size, PHY_1M) +
   3899a:	00d2      	lsls	r2, r2, #3
   3899c:	f501 715c 	add.w	r1, r1, #880	; 0x370
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   389a0:	f502 70b3 	add.w	r0, r2, #358	; 0x166
   389a4:	440a      	add	r2, r1
   389a6:	e7ef      	b.n	38988 <adv_time_get.constprop.0.isra.0+0x30>
			adv_size += pdu->len;
   389a8:	7841      	ldrb	r1, [r0, #1]
}
   389aa:	bc10      	pop	{r4}
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   389ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   389b0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   389b4:	0058      	lsls	r0, r3, #1
   389b6:	3110      	adds	r1, #16
   389b8:	f500 70c8 	add.w	r0, r0, #400	; 0x190
   389bc:	00cb      	lsls	r3, r1, #3
   389be:	fb03 0202 	mla	r2, r3, r2, r0
   389c2:	b290      	uxth	r0, r2
}
   389c4:	4770      	bx	lr
   389c6:	bf00      	nop

000389c8 <ticker_cb>:
{
   389c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   389cc:	461d      	mov	r5, r3
   389ce:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   389d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   389d4:	429d      	cmp	r5, r3
{
   389d6:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   389da:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   389dc:	d018      	beq.n	38a10 <ticker_cb+0x48>
	return ++hdr->ref;
   389de:	7823      	ldrb	r3, [r4, #0]
   389e0:	3301      	adds	r3, #1
   389e2:	b2db      	uxtb	r3, r3
   389e4:	4607      	mov	r7, r0
   389e6:	4616      	mov	r6, r2
   389e8:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
   389ea:	2b00      	cmp	r3, #0
   389ec:	d061      	beq.n	38ab2 <ticker_cb+0xea>
		p.ticks_at_expire = ticks_at_expire;
   389ee:	4938      	ldr	r1, [pc, #224]	; (38ad0 <ticker_cb+0x108>)
		mfy.param = &p;
   389f0:	4b38      	ldr	r3, [pc, #224]	; (38ad4 <ticker_cb+0x10c>)
		p.lazy = lazy;
   389f2:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
   389f4:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   389f8:	2200      	movs	r2, #0
		p.param = lll;
   389fa:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
   389fc:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
   38a00:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
   38a04:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   38a06:	2001      	movs	r0, #1
   38a08:	4611      	mov	r1, r2
   38a0a:	f7fb fae7 	bl	33fdc <mayfly_enqueue>
		LL_ASSERT(!ret);
   38a0e:	b938      	cbnz	r0, 38a20 <ticker_cb+0x58>
	if (!lll->is_hdcd)
   38a10:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   38a14:	f010 0501 	ands.w	r5, r0, #1
   38a18:	d014      	beq.n	38a44 <ticker_cb+0x7c>
}
   38a1a:	b00a      	add	sp, #40	; 0x28
   38a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   38a20:	4a2d      	ldr	r2, [pc, #180]	; (38ad8 <ticker_cb+0x110>)
   38a22:	492e      	ldr	r1, [pc, #184]	; (38adc <ticker_cb+0x114>)
   38a24:	482e      	ldr	r0, [pc, #184]	; (38ae0 <ticker_cb+0x118>)
   38a26:	f640 0392 	movw	r3, #2194	; 0x892
   38a2a:	f010 ffe6 	bl	499fa <printk>
   38a2e:	4040      	eors	r0, r0
   38a30:	f380 8811 	msr	BASEPRI, r0
   38a34:	f04f 0003 	mov.w	r0, #3
   38a38:	df02      	svc	2
	if (!lll->is_hdcd)
   38a3a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   38a3e:	f010 0501 	ands.w	r5, r0, #1
   38a42:	d1ea      	bne.n	38a1a <ticker_cb+0x52>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
   38a44:	2104      	movs	r1, #4
   38a46:	a809      	add	r0, sp, #36	; 0x24
   38a48:	f007 fcc4 	bl	403d4 <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
   38a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   38a4e:	4a25      	ldr	r2, [pc, #148]	; (38ae4 <ticker_cb+0x11c>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   38a50:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
   38a52:	fba2 1203 	umull	r1, r2, r2, r3
   38a56:	1a99      	subs	r1, r3, r2
   38a58:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   38a5c:	0a12      	lsrs	r2, r2, #8
   38a5e:	f240 1147 	movw	r1, #327	; 0x147
   38a62:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   38a66:	4a20      	ldr	r2, [pc, #128]	; (38ae8 <ticker_cb+0x120>)
   38a68:	4920      	ldr	r1, [pc, #128]	; (38aec <ticker_cb+0x124>)
   38a6a:	1aa2      	subs	r2, r4, r2
   38a6c:	fba1 1202 	umull	r1, r2, r1, r2
   38a70:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   38a72:	491f      	ldr	r1, [pc, #124]	; (38af0 <ticker_cb+0x128>)
   38a74:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
   38a76:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   38a78:	e9cd 5104 	strd	r5, r1, [sp, #16]
   38a7c:	e9cd 5502 	strd	r5, r5, [sp, #8]
   38a80:	e9cd 5500 	strd	r5, r5, [sp]
   38a84:	b2d2      	uxtb	r2, r2
   38a86:	2101      	movs	r1, #1
   38a88:	4628      	mov	r0, r5
	random_delay += (ticks_delay_window_offset + 1);
   38a8a:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   38a8c:	f7fc fd60 	bl	35550 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   38a90:	f030 0302 	bics.w	r3, r0, #2
   38a94:	d0c1      	beq.n	38a1a <ticker_cb+0x52>
   38a96:	4a10      	ldr	r2, [pc, #64]	; (38ad8 <ticker_cb+0x110>)
   38a98:	4916      	ldr	r1, [pc, #88]	; (38af4 <ticker_cb+0x12c>)
   38a9a:	4811      	ldr	r0, [pc, #68]	; (38ae0 <ticker_cb+0x118>)
   38a9c:	f240 732c 	movw	r3, #1836	; 0x72c
   38aa0:	f010 ffab 	bl	499fa <printk>
   38aa4:	4040      	eors	r0, r0
   38aa6:	f380 8811 	msr	BASEPRI, r0
   38aaa:	f04f 0003 	mov.w	r0, #3
   38aae:	df02      	svc	2
}
   38ab0:	e7b3      	b.n	38a1a <ticker_cb+0x52>
		LL_ASSERT(ref);
   38ab2:	4a09      	ldr	r2, [pc, #36]	; (38ad8 <ticker_cb+0x110>)
   38ab4:	4910      	ldr	r1, [pc, #64]	; (38af8 <ticker_cb+0x130>)
   38ab6:	480a      	ldr	r0, [pc, #40]	; (38ae0 <ticker_cb+0x118>)
   38ab8:	f640 0385 	movw	r3, #2181	; 0x885
   38abc:	f010 ff9d 	bl	499fa <printk>
   38ac0:	4040      	eors	r0, r0
   38ac2:	f380 8811 	msr	BASEPRI, r0
   38ac6:	f04f 0003 	mov.w	r0, #3
   38aca:	df02      	svc	2
   38acc:	e78f      	b.n	389ee <ticker_cb+0x26>
   38ace:	bf00      	nop
   38ad0:	20005788 	.word	0x20005788
   38ad4:	20000bb4 	.word	0x20000bb4
   38ad8:	00052dd4 	.word	0x00052dd4
   38adc:	00052d4c 	.word	0x00052d4c
   38ae0:	00052a70 	.word	0x00052a70
   38ae4:	90d4f121 	.word	0x90d4f121
   38ae8:	200057b4 	.word	0x200057b4
   38aec:	88888889 	.word	0x88888889
   38af0:	000386e1 	.word	0x000386e1
   38af4:	00052e20 	.word	0x00052e20
   38af8:	00052ee4 	.word	0x00052ee4

00038afc <ll_adv_params_set>:
{
   38afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!adv || adv->is_enabled) {
   38b00:	4c6e      	ldr	r4, [pc, #440]	; (38cbc <ll_adv_params_set+0x1c0>)
{
   38b02:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   38b04:	4b6e      	ldr	r3, [pc, #440]	; (38cc0 <ll_adv_params_set+0x1c4>)
	if (!adv || adv->is_enabled) {
   38b06:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
   38b0a:	4680      	mov	r8, r0
   38b0c:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   38b0e:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   38b12:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
   38b14:	f016 0601 	ands.w	r6, r6, #1
{
   38b18:	4615      	mov	r5, r2
   38b1a:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
   38b1e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   38b22:	9000      	str	r0, [sp, #0]
   38b24:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   38b28:	f040 808a 	bne.w	38c40 <ll_adv_params_set+0x144>
	adv->lll.chan_map = chan_map;
   38b2c:	f00c 0c07 	and.w	ip, ip, #7
   38b30:	f002 0203 	and.w	r2, r2, #3
   38b34:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   38b38:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   38b3c:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		adv->interval = 0;
   38b40:	f1be 0f01 	cmp.w	lr, #1
   38b44:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   38b48:	bf08      	it	eq
   38b4a:	f04f 0800 	moveq.w	r8, #0
	pdu->type = pdu_adv_type[adv_type];
   38b4e:	f10e 0308 	add.w	r3, lr, #8
   38b52:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
   38b56:	eb0d 0e03 	add.w	lr, sp, r3
   38b5a:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
   38b5e:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   38b60:	f898 9000 	ldrb.w	r9, [r8]
	pdu->type = pdu_adv_type[adv_type];
   38b64:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
   38b68:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   38b6c:	f013 0f0e 	tst.w	r3, #14
	adv->lll.chan_map = chan_map;
   38b70:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
   38b74:	f029 011f 	bic.w	r1, r9, #31
   38b78:	f003 030f 	and.w	r3, r3, #15
	adv->lll.chan_map = chan_map;
   38b7c:	ea4c 0c02 	orr.w	ip, ip, r2
   38b80:	ea43 0301 	orr.w	r3, r3, r1
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   38b84:	bf0c      	ite	eq
   38b86:	2201      	moveq	r2, #1
   38b88:	2200      	movne	r2, #0
   38b8a:	f362 1345 	bfi	r3, r2, #5, #1
	adv->lll.chan_map = chan_map;
   38b8e:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   38b92:	f888 3000 	strb.w	r3, [r8]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   38b96:	f003 030f 	and.w	r3, r3, #15
   38b9a:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
   38b9c:	f009 090f 	and.w	r9, r9, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   38ba0:	d045      	beq.n	38c2e <ll_adv_params_set+0x132>
	adv->own_addr_type = own_addr_type;
   38ba2:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   38ba6:	f365 0342 	bfi	r3, r5, #1, #2
   38baa:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   38bae:	b2da      	uxtb	r2, r3
   38bb0:	075b      	lsls	r3, r3, #29
   38bb2:	d508      	bpl.n	38bc6 <ll_adv_params_set+0xca>
		adv->peer_addr_type = direct_addr_type;
   38bb4:	f367 02c3 	bfi	r2, r7, #3, #1
   38bb8:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   38bbc:	4841      	ldr	r0, [pc, #260]	; (38cc4 <ll_adv_params_set+0x1c8>)
   38bbe:	990a      	ldr	r1, [sp, #40]	; 0x28
   38bc0:	2206      	movs	r2, #6
   38bc2:	f013 f849 	bl	4bc58 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   38bc6:	f898 3000 	ldrb.w	r3, [r8]
   38bca:	f003 020f 	and.w	r2, r3, #15
   38bce:	2a01      	cmp	r2, #1
		pdu->tx_addr = own_addr_type & 0x1;
   38bd0:	f005 0a01 	and.w	sl, r5, #1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   38bd4:	d039      	beq.n	38c4a <ll_adv_params_set+0x14e>
	} else if (pdu->len == 0) {
   38bd6:	f898 2001 	ldrb.w	r2, [r8, #1]
   38bda:	b1f2      	cbz	r2, 38c1a <ll_adv_params_set+0x11e>
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
   38bdc:	f1b9 0f01 	cmp.w	r9, #1
   38be0:	d04e      	beq.n	38c80 <ll_adv_params_set+0x184>
		pdu->tx_addr = own_addr_type & 0x1;
   38be2:	f898 3000 	ldrb.w	r3, [r8]
   38be6:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = 0;
   38bea:	f36f 13c7 	bfc	r3, #7, #1
   38bee:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   38bf2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	hdr->parent = parent;
   38bf6:	61e4      	str	r4, [r4, #28]
   38bf8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   38bfc:	01ad      	lsls	r5, r5, #6
   38bfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   38c00:	f005 0540 	and.w	r5, r5, #64	; 0x40
		if (pdu->len == 0) {
   38c04:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   38c06:	f045 0504 	orr.w	r5, r5, #4
   38c0a:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   38c0c:	b90a      	cbnz	r2, 38c12 <ll_adv_params_set+0x116>
			pdu->len = BDADDR_SIZE;
   38c0e:	2206      	movs	r2, #6
   38c10:	705a      	strb	r2, [r3, #1]
}
   38c12:	4630      	mov	r0, r6
   38c14:	b002      	add	sp, #8
   38c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   38c1a:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = 0;
   38c1e:	f362 13c7 	bfi	r3, r2, #7, #1
   38c22:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
   38c26:	2306      	movs	r3, #6
   38c28:	f888 3001 	strb.w	r3, [r8, #1]
   38c2c:	e7e1      	b.n	38bf2 <ll_adv_params_set+0xf6>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
   38c2e:	f1b9 0f01 	cmp.w	r9, #1
   38c32:	d0b6      	beq.n	38ba2 <ll_adv_params_set+0xa6>
		if (pdu->len == 0U) {
   38c34:	f898 2001 	ldrb.w	r2, [r8, #1]
   38c38:	b9b2      	cbnz	r2, 38c68 <ll_adv_params_set+0x16c>
			adv->ad_data_backup.len = 0U;
   38c3a:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
   38c3e:	e7b0      	b.n	38ba2 <ll_adv_params_set+0xa6>
		return BT_HCI_ERR_CMD_DISALLOWED;
   38c40:	260c      	movs	r6, #12
}
   38c42:	4630      	mov	r0, r6
   38c44:	b002      	add	sp, #8
   38c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->rx_addr = direct_addr_type;
   38c4a:	4640      	mov	r0, r8
		pdu->tx_addr = own_addr_type & 0x1;
   38c4c:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = direct_addr_type;
   38c50:	f367 13c7 	bfi	r3, r7, #7, #1
   38c54:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   38c58:	990a      	ldr	r1, [sp, #40]	; 0x28
   38c5a:	2206      	movs	r2, #6
   38c5c:	f012 fffc 	bl	4bc58 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   38c60:	230c      	movs	r3, #12
   38c62:	f888 3001 	strb.w	r3, [r8, #1]
   38c66:	e7c4      	b.n	38bf2 <ll_adv_params_set+0xf6>
			LL_ASSERT(pdu->len >=
   38c68:	2a05      	cmp	r2, #5
   38c6a:	d916      	bls.n	38c9a <ll_adv_params_set+0x19e>
			adv->ad_data_backup.len = pdu->len -
   38c6c:	3a06      	subs	r2, #6
   38c6e:	b2d2      	uxtb	r2, r2
   38c70:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   38c74:	f108 0108 	add.w	r1, r8, #8
   38c78:	4813      	ldr	r0, [pc, #76]	; (38cc8 <ll_adv_params_set+0x1cc>)
   38c7a:	f012 ffed 	bl	4bc58 <memcpy>
   38c7e:	e790      	b.n	38ba2 <ll_adv_params_set+0xa6>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
   38c80:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   38c84:	4910      	ldr	r1, [pc, #64]	; (38cc8 <ll_adv_params_set+0x1cc>)
   38c86:	f108 0008 	add.w	r0, r8, #8
   38c8a:	f012 ffe5 	bl	4bc58 <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
   38c8e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   38c92:	3306      	adds	r3, #6
   38c94:	f888 3001 	strb.w	r3, [r8, #1]
   38c98:	e7a3      	b.n	38be2 <ll_adv_params_set+0xe6>
			LL_ASSERT(pdu->len >=
   38c9a:	4a0c      	ldr	r2, [pc, #48]	; (38ccc <ll_adv_params_set+0x1d0>)
   38c9c:	490c      	ldr	r1, [pc, #48]	; (38cd0 <ll_adv_params_set+0x1d4>)
   38c9e:	480d      	ldr	r0, [pc, #52]	; (38cd4 <ll_adv_params_set+0x1d8>)
   38ca0:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   38ca4:	f010 fea9 	bl	499fa <printk>
   38ca8:	4040      	eors	r0, r0
   38caa:	f380 8811 	msr	BASEPRI, r0
   38cae:	f04f 0003 	mov.w	r0, #3
   38cb2:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
   38cb4:	f898 2001 	ldrb.w	r2, [r8, #1]
   38cb8:	e7d8      	b.n	38c6c <ll_adv_params_set+0x170>
   38cba:	bf00      	nop
   38cbc:	200057b4 	.word	0x200057b4
   38cc0:	0005197c 	.word	0x0005197c
   38cc4:	2000581f 	.word	0x2000581f
   38cc8:	200057f5 	.word	0x200057f5
   38ccc:	00052dd4 	.word	0x00052dd4
   38cd0:	00052ee8 	.word	0x00052ee8
   38cd4:	00052a70 	.word	0x00052a70

00038cd8 <ull_adv_init>:
{
   38cd8:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   38cda:	4c06      	ldr	r4, [pc, #24]	; (38cf4 <ull_adv_init+0x1c>)
   38cdc:	4620      	mov	r0, r4
   38cde:	f007 ffbb 	bl	40c58 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   38ce2:	f104 000c 	add.w	r0, r4, #12
   38ce6:	f007 ffb7 	bl	40c58 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   38cea:	f7ff fd15 	bl	38718 <init_set.constprop.0>
}
   38cee:	2000      	movs	r0, #0
   38cf0:	bd10      	pop	{r4, pc}
   38cf2:	bf00      	nop
   38cf4:	200057dc 	.word	0x200057dc

00038cf8 <ull_adv_reset>:
{
   38cf8:	b508      	push	{r3, lr}
		(void)disable(handle);
   38cfa:	f7ff fd79 	bl	387f0 <disable.constprop.0>
}
   38cfe:	2000      	movs	r0, #0
   38d00:	bd08      	pop	{r3, pc}
   38d02:	bf00      	nop

00038d04 <ull_adv_reset_finalize>:
{
   38d04:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
   38d06:	4c09      	ldr	r4, [pc, #36]	; (38d2c <ull_adv_reset_finalize+0x28>)
		lll_adv_data_reset(&lll->scan_rsp);
   38d08:	f104 050c 	add.w	r5, r4, #12
		lll_adv_data_reset(&lll->adv_data);
   38d0c:	4620      	mov	r0, r4
   38d0e:	f007 ffb3 	bl	40c78 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   38d12:	4628      	mov	r0, r5
   38d14:	f007 ffb0 	bl	40c78 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   38d18:	4620      	mov	r0, r4
   38d1a:	f007 ff9d 	bl	40c58 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   38d1e:	4628      	mov	r0, r5
   38d20:	f007 ff9a 	bl	40c58 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   38d24:	f7ff fcf8 	bl	38718 <init_set.constprop.0>
}
   38d28:	2000      	movs	r0, #0
   38d2a:	bd38      	pop	{r3, r4, r5, pc}
   38d2c:	200057dc 	.word	0x200057dc

00038d30 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   38d30:	4a03      	ldr	r2, [pc, #12]	; (38d40 <ull_adv_handle_get+0x10>)
   38d32:	4b04      	ldr	r3, [pc, #16]	; (38d44 <ull_adv_handle_get+0x14>)
   38d34:	1a80      	subs	r0, r0, r2
   38d36:	fba3 3000 	umull	r3, r0, r3, r0
}
   38d3a:	f3c0 108f 	ubfx	r0, r0, #6, #16
   38d3e:	4770      	bx	lr
   38d40:	200057b4 	.word	0x200057b4
   38d44:	88888889 	.word	0x88888889

00038d48 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   38d48:	4a04      	ldr	r2, [pc, #16]	; (38d5c <ull_adv_lll_handle_get+0x14>)
   38d4a:	6800      	ldr	r0, [r0, #0]
   38d4c:	4b04      	ldr	r3, [pc, #16]	; (38d60 <ull_adv_lll_handle_get+0x18>)
   38d4e:	1a80      	subs	r0, r0, r2
   38d50:	fba3 3000 	umull	r3, r0, r3, r0
}
   38d54:	f3c0 108f 	ubfx	r0, r0, #6, #16
   38d58:	4770      	bx	lr
   38d5a:	bf00      	nop
   38d5c:	200057b4 	.word	0x200057b4
   38d60:	88888889 	.word	0x88888889

00038d64 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   38d64:	b938      	cbnz	r0, 38d76 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   38d66:	4805      	ldr	r0, [pc, #20]	; (38d7c <ull_adv_is_enabled_get+0x18>)
   38d68:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
		return NULL;
   38d6c:	f013 0f01 	tst.w	r3, #1
   38d70:	bf08      	it	eq
   38d72:	2000      	moveq	r0, #0
   38d74:	4770      	bx	lr
   38d76:	2000      	movs	r0, #0
}
   38d78:	4770      	bx	lr
   38d7a:	bf00      	nop
   38d7c:	200057b4 	.word	0x200057b4

00038d80 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   38d80:	b928      	cbnz	r0, 38d8e <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   38d82:	4b04      	ldr	r3, [pc, #16]	; (38d94 <ull_adv_is_enabled+0x14>)
   38d84:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   38d88:	f000 0001 	and.w	r0, r0, #1
   38d8c:	4770      	bx	lr
   38d8e:	2000      	movs	r0, #0
}
   38d90:	4770      	bx	lr
   38d92:	bf00      	nop
   38d94:	200057b4 	.word	0x200057b4

00038d98 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   38d98:	b950      	cbnz	r0, 38db0 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   38d9a:	4b06      	ldr	r3, [pc, #24]	; (38db4 <ull_adv_filter_pol_get+0x1c>)
   38d9c:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   38da0:	f010 0001 	ands.w	r0, r0, #1
   38da4:	d005      	beq.n	38db2 <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   38da6:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   38daa:	f000 0003 	and.w	r0, r0, #3
   38dae:	4770      	bx	lr
		return 0;
   38db0:	2000      	movs	r0, #0
}
   38db2:	4770      	bx	lr
   38db4:	200057b4 	.word	0x200057b4

00038db8 <ull_adv_pdu_update_addrs>:
{
   38db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38dba:	460c      	mov	r4, r1
   38dbc:	4606      	mov	r6, r0
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   38dbe:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
   38dc2:	f006 fd63 	bl	3f88c <ull_filter_adva_get>
			own_id_addr = ll_addr_get(pdu->tx_addr);
   38dc6:	7823      	ldrb	r3, [r4, #0]
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   38dc8:	4605      	mov	r5, r0
			own_id_addr = ll_addr_get(pdu->tx_addr);
   38dca:	f3c3 1080 	ubfx	r0, r3, #6, #1
   38dce:	f7fc fc9d 	bl	3570c <ll_addr_get>
	(void)memcpy(adv->own_id_addr, own_id_addr, BDADDR_SIZE);
   38dd2:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
   38dd4:	4607      	mov	r7, r0
	(void)memcpy(adv->own_id_addr, own_id_addr, BDADDR_SIZE);
   38dd6:	4601      	mov	r1, r0
   38dd8:	f106 0071 	add.w	r0, r6, #113	; 0x71
   38ddc:	f012 ff3c 	bl	4bc58 <memcpy>
	if (rpa) {
   38de0:	b185      	cbz	r5, 38e04 <ull_adv_pdu_update_addrs+0x4c>
		pdu->tx_addr = 1;
   38de2:	7823      	ldrb	r3, [r4, #0]
   38de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   38de8:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   38dea:	1ca7      	adds	r7, r4, #2
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   38dec:	2206      	movs	r2, #6
   38dee:	4629      	mov	r1, r5
   38df0:	4638      	mov	r0, r7
   38df2:	f012 ff31 	bl	4bc58 <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   38df6:	7823      	ldrb	r3, [r4, #0]
   38df8:	f003 030f 	and.w	r3, r3, #15
   38dfc:	2b01      	cmp	r3, #1
   38dfe:	d003      	beq.n	38e08 <ull_adv_pdu_update_addrs+0x50>
}
   38e00:	4638      	mov	r0, r7
   38e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_addr = own_id_addr;
   38e04:	463d      	mov	r5, r7
   38e06:	e7f0      	b.n	38dea <ull_adv_pdu_update_addrs+0x32>
	rx_addr = ull_filter_tgta_get(adv->lll.rl_idx);
   38e08:	f896 0026 	ldrb.w	r0, [r6, #38]	; 0x26
   38e0c:	f006 fd6c 	bl	3f8e8 <ull_filter_tgta_get>
	if (rx_addr) {
   38e10:	4601      	mov	r1, r0
   38e12:	2800      	cmp	r0, #0
   38e14:	d0f4      	beq.n	38e00 <ull_adv_pdu_update_addrs+0x48>
		pdu->rx_addr = 1;
   38e16:	7823      	ldrb	r3, [r4, #0]
   38e18:	4620      	mov	r0, r4
   38e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   38e1e:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   38e22:	2206      	movs	r2, #6
   38e24:	f012 ff18 	bl	4bc58 <memcpy>
}
   38e28:	4638      	mov	r0, r7
   38e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00038e2c <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   38e2c:	291f      	cmp	r1, #31
   38e2e:	d849      	bhi.n	38ec4 <ull_adv_data_set+0x98>
{
   38e30:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   38e32:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   38e36:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   38e3a:	b083      	sub	sp, #12
   38e3c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   38e3e:	7833      	ldrb	r3, [r6, #0]
   38e40:	f003 030f 	and.w	r3, r3, #15
   38e44:	2b01      	cmp	r3, #1
   38e46:	460d      	mov	r5, r1
   38e48:	4604      	mov	r4, r0
   38e4a:	4617      	mov	r7, r2
   38e4c:	d03c      	beq.n	38ec8 <ull_adv_data_set+0x9c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   38e4e:	f10d 0107 	add.w	r1, sp, #7
   38e52:	3028      	adds	r0, #40	; 0x28
   38e54:	f007 ff92 	bl	40d7c <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   38e58:	4631      	mov	r1, r6
   38e5a:	4606      	mov	r6, r0
   38e5c:	f811 2b02 	ldrb.w	r2, [r1], #2
   38e60:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
   38e64:	f3c2 0303 	ubfx	r3, r2, #0, #4
   38e68:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
   38e6c:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   38e70:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   38e74:	f002 0280 	and.w	r2, r2, #128	; 0x80
   38e78:	4630      	mov	r0, r6
   38e7a:	4313      	orrs	r3, r2
   38e7c:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   38e80:	2206      	movs	r2, #6
   38e82:	f012 fee9 	bl	4bc58 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   38e86:	462a      	mov	r2, r5
   38e88:	4639      	mov	r1, r7
   38e8a:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
   38e8e:	3506      	adds	r5, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   38e90:	f012 fee2 	bl	4bc58 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   38e94:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
   38e96:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   38e9a:	07db      	lsls	r3, r3, #31
   38e9c:	d406      	bmi.n	38eac <ull_adv_data_set+0x80>
	pdu->last = idx;
   38e9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   38ea2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		return 0;
   38ea6:	2000      	movs	r0, #0
}
   38ea8:	b003      	add	sp, #12
   38eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   38eac:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   38eb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   38eb4:	4631      	mov	r1, r6
   38eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   38eb8:	4620      	mov	r0, r4
   38eba:	f7ed ff19 	bl	26cf0 <ull_adv_time_update>
		if (err) {
   38ebe:	2800      	cmp	r0, #0
   38ec0:	d0ed      	beq.n	38e9e <ull_adv_data_set+0x72>
   38ec2:	e7f1      	b.n	38ea8 <ull_adv_data_set+0x7c>
		return BT_HCI_ERR_INVALID_PARAM;
   38ec4:	2012      	movs	r0, #18
}
   38ec6:	4770      	bx	lr
		adv->ad_data_backup.len = len;
   38ec8:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
   38ecc:	460a      	mov	r2, r1
   38ece:	3041      	adds	r0, #65	; 0x41
   38ed0:	4639      	mov	r1, r7
   38ed2:	f012 fec1 	bl	4bc58 <memcpy>
		return 0;
   38ed6:	e7e6      	b.n	38ea6 <ull_adv_data_set+0x7a>

00038ed8 <ll_adv_data_set>:
{
   38ed8:	4603      	mov	r3, r0
   38eda:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   38edc:	4801      	ldr	r0, [pc, #4]	; (38ee4 <ll_adv_data_set+0xc>)
   38ede:	4619      	mov	r1, r3
   38ee0:	f7ff bfa4 	b.w	38e2c <ull_adv_data_set>
   38ee4:	200057b4 	.word	0x200057b4

00038ee8 <ull_scan_rsp_set.part.0>:
uint8_t ull_scan_rsp_set(struct ll_adv_set *adv, uint8_t len,
   38ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
   38eea:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   38eee:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   38ef2:	b083      	sub	sp, #12
   38ef4:	6b9d      	ldr	r5, [r3, #56]	; 0x38
   38ef6:	460e      	mov	r6, r1
   38ef8:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   38efa:	f10d 0107 	add.w	r1, sp, #7
   38efe:	3034      	adds	r0, #52	; 0x34
   38f00:	4617      	mov	r7, r2
   38f02:	f007 ff3b 	bl	40d7c <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   38f06:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   38f08:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
   38f0a:	f811 3b02 	ldrb.w	r3, [r1], #2
   38f0e:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   38f12:	019b      	lsls	r3, r3, #6
   38f14:	f043 0304 	orr.w	r3, r3, #4
   38f18:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   38f1a:	1db3      	adds	r3, r6, #6
   38f1c:	7043      	strb	r3, [r0, #1]
   38f1e:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   38f20:	3002      	adds	r0, #2
   38f22:	f012 fe99 	bl	4bc58 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   38f26:	4632      	mov	r2, r6
   38f28:	4639      	mov	r1, r7
   38f2a:	f105 0008 	add.w	r0, r5, #8
   38f2e:	f012 fe93 	bl	4bc58 <memcpy>
	if (adv->is_enabled) {
   38f32:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   38f36:	07da      	lsls	r2, r3, #31
   38f38:	d50b      	bpl.n	38f52 <ull_scan_rsp_set.part.0+0x6a>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   38f3a:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
   38f3e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   38f42:	2341      	movs	r3, #65	; 0x41
   38f44:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   38f46:	780a      	ldrb	r2, [r1, #0]
   38f48:	f002 020f 	and.w	r2, r2, #15
   38f4c:	40d3      	lsrs	r3, r2
   38f4e:	07db      	lsls	r3, r3, #31
   38f50:	d406      	bmi.n	38f60 <ull_scan_rsp_set.part.0+0x78>
	pdu->last = idx;
   38f52:	f89d 3007 	ldrb.w	r3, [sp, #7]
   38f56:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
   38f5a:	2000      	movs	r0, #0
}
   38f5c:	b003      	add	sp, #12
   38f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   38f60:	462a      	mov	r2, r5
   38f62:	4620      	mov	r0, r4
   38f64:	f7ed fec4 	bl	26cf0 <ull_adv_time_update>
			if (err) {
   38f68:	2800      	cmp	r0, #0
   38f6a:	d0f2      	beq.n	38f52 <ull_scan_rsp_set.part.0+0x6a>
   38f6c:	e7f6      	b.n	38f5c <ull_scan_rsp_set.part.0+0x74>
   38f6e:	bf00      	nop

00038f70 <ll_adv_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   38f70:	281f      	cmp	r0, #31
{
   38f72:	4603      	mov	r3, r0
   38f74:	460a      	mov	r2, r1
	if (len > PDU_AC_DATA_SIZE_MAX) {
   38f76:	d803      	bhi.n	38f80 <ll_adv_scan_rsp_set+0x10>
   38f78:	4802      	ldr	r0, [pc, #8]	; (38f84 <ll_adv_scan_rsp_set+0x14>)
   38f7a:	4619      	mov	r1, r3
   38f7c:	f7ff bfb4 	b.w	38ee8 <ull_scan_rsp_set.part.0>
}
   38f80:	2012      	movs	r0, #18
   38f82:	4770      	bx	lr
   38f84:	200057b4 	.word	0x200057b4

00038f88 <ticker_cb>:
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
		      uint32_t remainder, uint16_t lazy, uint8_t force,
		      void *param)
{
   38f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   38f8c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   38f8e:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   38f92:	4625      	mov	r5, r4
{
   38f94:	4680      	mov	r8, r0
   38f96:	f815 1b1c 	ldrb.w	r1, [r5], #28
   38f9a:	3101      	adds	r1, #1
   38f9c:	b2c9      	uxtb	r1, r1
   38f9e:	4617      	mov	r7, r2
   38fa0:	461e      	mov	r6, r3
   38fa2:	7021      	strb	r1, [r4, #0]

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   38fa4:	b181      	cbz	r1, 38fc8 <ticker_cb+0x40>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   38fa6:	4c17      	ldr	r4, [pc, #92]	; (39004 <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
	mfy.param = &p;
   38fa8:	4b17      	ldr	r3, [pc, #92]	; (39008 <ticker_cb+0x80>)
	p.lazy = lazy;
   38faa:	8126      	strh	r6, [r4, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   38fac:	2200      	movs	r2, #0
   38fae:	4611      	mov	r1, r2
   38fb0:	2001      	movs	r0, #1
	p.remainder = remainder;
   38fb2:	e9c4 8700 	strd	r8, r7, [r4]
	p.param = lll;
   38fb6:	60e5      	str	r5, [r4, #12]
	p.force = force;
   38fb8:	f884 900a 	strb.w	r9, [r4, #10]
	mfy.param = &p;
   38fbc:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   38fbe:	f7fb f80d 	bl	33fdc <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   38fc2:	b978      	cbnz	r0, 38fe4 <ticker_cb+0x5c>
			  (ret == TICKER_STATUS_BUSY));
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	DEBUG_RADIO_PREPARE_O(1);
}
   38fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(ref);
   38fc8:	4a10      	ldr	r2, [pc, #64]	; (3900c <ticker_cb+0x84>)
   38fca:	4911      	ldr	r1, [pc, #68]	; (39010 <ticker_cb+0x88>)
   38fcc:	4811      	ldr	r0, [pc, #68]	; (39014 <ticker_cb+0x8c>)
   38fce:	f240 23db 	movw	r3, #731	; 0x2db
   38fd2:	f010 fd12 	bl	499fa <printk>
   38fd6:	4040      	eors	r0, r0
   38fd8:	f380 8811 	msr	BASEPRI, r0
   38fdc:	f04f 0003 	mov.w	r0, #3
   38fe0:	df02      	svc	2
   38fe2:	e7e0      	b.n	38fa6 <ticker_cb+0x1e>
	LL_ASSERT(!ret);
   38fe4:	4a09      	ldr	r2, [pc, #36]	; (3900c <ticker_cb+0x84>)
   38fe6:	490c      	ldr	r1, [pc, #48]	; (39018 <ticker_cb+0x90>)
   38fe8:	480a      	ldr	r0, [pc, #40]	; (39014 <ticker_cb+0x8c>)
   38fea:	f44f 733a 	mov.w	r3, #744	; 0x2e8
   38fee:	f010 fd04 	bl	499fa <printk>
   38ff2:	4040      	eors	r0, r0
   38ff4:	f380 8811 	msr	BASEPRI, r0
   38ff8:	f04f 0003 	mov.w	r0, #3
   38ffc:	df02      	svc	2
}
   38ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   39002:	bf00      	nop
   39004:	20005834 	.word	0x20005834
   39008:	20000be4 	.word	0x20000be4
   3900c:	00052f28 	.word	0x00052f28
   39010:	00052ee4 	.word	0x00052ee4
   39014:	00052a70 	.word	0x00052a70
   39018:	00052d4c 	.word	0x00052d4c

0003901c <ull_scan_init>:
}
   3901c:	2000      	movs	r0, #0
   3901e:	4770      	bx	lr

00039020 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   39020:	3004      	adds	r0, #4
{
   39022:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   39024:	f101 021c 	add.w	r2, r1, #28
   39028:	b2c0      	uxtb	r0, r0
   3902a:	f7fe feb7 	bl	37d9c <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   3902e:	b900      	cbnz	r0, 39032 <ull_scan_disable+0x12>
}
   39030:	bd08      	pop	{r3, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
   39032:	3078      	adds	r0, #120	; 0x78
   39034:	d101      	bne.n	3903a <ull_scan_disable+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   39036:	200c      	movs	r0, #12
}
   39038:	bd08      	pop	{r3, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
   3903a:	4a07      	ldr	r2, [pc, #28]	; (39058 <ull_scan_disable+0x38>)
   3903c:	4907      	ldr	r1, [pc, #28]	; (3905c <ull_scan_disable+0x3c>)
   3903e:	4808      	ldr	r0, [pc, #32]	; (39060 <ull_scan_disable+0x40>)
   39040:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   39044:	f010 fcd9 	bl	499fa <printk>
   39048:	4040      	eors	r0, r0
   3904a:	f380 8811 	msr	BASEPRI, r0
   3904e:	f04f 0003 	mov.w	r0, #3
   39052:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   39054:	200c      	movs	r0, #12
   39056:	e7ef      	b.n	39038 <ull_scan_disable+0x18>
   39058:	00052f28 	.word	0x00052f28
   3905c:	00052f68 	.word	0x00052f68
   39060:	00052a70 	.word	0x00052a70

00039064 <ll_scan_enable>:
{
   39064:	b538      	push	{r3, r4, r5, lr}
	if (!scan || !scan->is_enabled) {
   39066:	4c2c      	ldr	r4, [pc, #176]	; (39118 <ll_scan_enable+0xb4>)
   39068:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   3906c:	f003 0201 	and.w	r2, r3, #1
	if (!enable) {
   39070:	b358      	cbz	r0, 390ca <ll_scan_enable+0x66>
	if (!scan || scan->is_enabled) {
   39072:	bb5a      	cbnz	r2, 390cc <ll_scan_enable+0x68>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   39074:	079a      	lsls	r2, r3, #30
   39076:	f3c3 0541 	ubfx	r5, r3, #1, #2
   3907a:	d50b      	bpl.n	39094 <ll_scan_enable+0x30>
		if (!mem_nz(ll_addr_get(BT_ADDR_LE_RANDOM), BDADDR_SIZE)) {
   3907c:	2001      	movs	r0, #1
   3907e:	f7fc fb45 	bl	3570c <ll_addr_get>
   39082:	2106      	movs	r1, #6
   39084:	f7fa ff1a 	bl	33ebc <mem_nz>
   39088:	2800      	cmp	r0, #0
   3908a:	d042      	beq.n	39112 <ll_scan_enable+0xae>
		own_addr_type = scan->own_addr_type;
   3908c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
   39090:	f3c5 0541 	ubfx	r5, r5, #1, #2
	ull_filter_scan_update(lll->filter_policy);
   39094:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   39098:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   3909c:	f006 fac4 	bl	3f628 <ull_filter_scan_update>
	lll->rpa_gen = 0;
   390a0:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   390a4:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	lll->rpa_gen = 0;
   390a8:	f36f 0341 	bfc	r3, #1, #1
	lll->rl_idx = FILTER_IDX_NONE;
   390ac:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
   390ae:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   390b2:	0693      	lsls	r3, r2, #26
	lll->rl_idx = FILTER_IDX_NONE;
   390b4:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	if ((lll->type & 0x1) &&
   390b8:	d502      	bpl.n	390c0 <ll_scan_enable+0x5c>
   390ba:	3d02      	subs	r5, #2
   390bc:	2d01      	cmp	r5, #1
   390be:	d91e      	bls.n	390fe <ll_scan_enable+0x9a>
}
   390c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
   390c4:	4814      	ldr	r0, [pc, #80]	; (39118 <ll_scan_enable+0xb4>)
   390c6:	f7ed becf 	b.w	26e68 <ull_scan_enable>
	if (!scan || !scan->is_enabled) {
   390ca:	b912      	cbnz	r2, 390d2 <ll_scan_enable+0x6e>
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
   390cc:	250c      	movs	r5, #12
}
   390ce:	4628      	mov	r0, r5
   390d0:	bd38      	pop	{r3, r4, r5, pc}
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
   390d2:	6a23      	ldr	r3, [r4, #32]
   390d4:	2b00      	cmp	r3, #0
   390d6:	d1f9      	bne.n	390cc <ll_scan_enable+0x68>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   390d8:	4621      	mov	r1, r4
   390da:	f7ff ffa1 	bl	39020 <ull_scan_disable>
	if (ret) {
   390de:	4605      	mov	r5, r0
   390e0:	2800      	cmp	r0, #0
   390e2:	d1f4      	bne.n	390ce <ll_scan_enable+0x6a>
		return ret;
	}

	scan->is_enabled = 0U;
   390e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   390e8:	f360 0300 	bfi	r3, r0, #0, #1
   390ec:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

#if defined(CONFIG_BT_CTLR_PRIVACY)
#if defined(CONFIG_BT_BROADCASTER)
	if (!ull_adv_is_enabled_get(0))
   390f0:	f7ff fe38 	bl	38d64 <ull_adv_is_enabled_get>
   390f4:	2800      	cmp	r0, #0
   390f6:	d1ea      	bne.n	390ce <ll_scan_enable+0x6a>
#endif
	{
		ull_filter_adv_scan_state_cb(0);
   390f8:	f006 fa56 	bl	3f5a8 <ull_filter_adv_scan_state_cb>
   390fc:	e7e7      	b.n	390ce <ll_scan_enable+0x6a>
		ull_filter_rpa_update(false);
   390fe:	2000      	movs	r0, #0
   39100:	f006 fab6 	bl	3f670 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   39104:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   39108:	f043 0302 	orr.w	r3, r3, #2
   3910c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   39110:	e7d6      	b.n	390c0 <ll_scan_enable+0x5c>
			return BT_HCI_ERR_INVALID_PARAM;
   39112:	2512      	movs	r5, #18
   39114:	e7db      	b.n	390ce <ll_scan_enable+0x6a>
   39116:	bf00      	nop
   39118:	20005844 	.word	0x20005844

0003911c <ull_scan_reset>:
{
   3911c:	b538      	push	{r3, r4, r5, lr}
	if (!scan || !scan->is_enabled) {
   3911e:	4d0f      	ldr	r5, [pc, #60]	; (3915c <ull_scan_reset+0x40>)
	for (handle = 0U; handle < BT_CTLR_SCAN_SET; handle++) {
   39120:	2400      	movs	r4, #0
   39122:	b93c      	cbnz	r4, 39134 <ull_scan_reset+0x18>
	if (!scan || !scan->is_enabled) {
   39124:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
   39128:	f014 0401 	ands.w	r4, r4, #1
   3912c:	d002      	beq.n	39134 <ull_scan_reset+0x18>
	if (scan->lll.conn) {
   3912e:	6a28      	ldr	r0, [r5, #32]
	ret = ull_scan_disable(handle, scan);
   39130:	490a      	ldr	r1, [pc, #40]	; (3915c <ull_scan_reset+0x40>)
	if (scan->lll.conn) {
   39132:	b108      	cbz	r0, 39138 <ull_scan_reset+0x1c>
}
   39134:	2000      	movs	r0, #0
   39136:	bd38      	pop	{r3, r4, r5, pc}
	ret = ull_scan_disable(handle, scan);
   39138:	f7ff ff72 	bl	39020 <ull_scan_disable>
	if (ret) {
   3913c:	2800      	cmp	r0, #0
   3913e:	d1f0      	bne.n	39122 <ull_scan_reset+0x6>
	scan->is_enabled = 0U;
   39140:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
   39144:	f360 0200 	bfi	r2, r0, #0, #1
   39148:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
   3914c:	f7ff fe0a 	bl	38d64 <ull_adv_is_enabled_get>
   39150:	2800      	cmp	r0, #0
   39152:	d1e6      	bne.n	39122 <ull_scan_reset+0x6>
		ull_filter_adv_scan_state_cb(0);
   39154:	f006 fa28 	bl	3f5a8 <ull_filter_adv_scan_state_cb>
   39158:	e7e3      	b.n	39122 <ull_scan_reset+0x6>
   3915a:	bf00      	nop
   3915c:	20005844 	.word	0x20005844

00039160 <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   39160:	4a03      	ldr	r2, [pc, #12]	; (39170 <ull_scan_handle_get+0x10>)
   39162:	4b04      	ldr	r3, [pc, #16]	; (39174 <ull_scan_handle_get+0x14>)
   39164:	1a80      	subs	r0, r0, r2
   39166:	fba3 3000 	umull	r3, r0, r3, r0
}
   3916a:	f3c0 1007 	ubfx	r0, r0, #4, #8
   3916e:	4770      	bx	lr
   39170:	20005844 	.word	0x20005844
   39174:	38e38e39 	.word	0x38e38e39

00039178 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   39178:	4a04      	ldr	r2, [pc, #16]	; (3918c <ull_scan_lll_handle_get+0x14>)
   3917a:	6800      	ldr	r0, [r0, #0]
   3917c:	4b04      	ldr	r3, [pc, #16]	; (39190 <ull_scan_lll_handle_get+0x18>)
   3917e:	1a80      	subs	r0, r0, r2
   39180:	fba3 3000 	umull	r3, r0, r3, r0
}
   39184:	f3c0 1007 	ubfx	r0, r0, #4, #8
   39188:	4770      	bx	lr
   3918a:	bf00      	nop
   3918c:	20005844 	.word	0x20005844
   39190:	38e38e39 	.word	0x38e38e39

00039194 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   39194:	b938      	cbnz	r0, 391a6 <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   39196:	4805      	ldr	r0, [pc, #20]	; (391ac <ull_scan_is_enabled_get+0x18>)
   39198:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
		return NULL;
   3919c:	f013 0f01 	tst.w	r3, #1
   391a0:	bf08      	it	eq
   391a2:	2000      	moveq	r0, #0
   391a4:	4770      	bx	lr
   391a6:	2000      	movs	r0, #0
}
   391a8:	4770      	bx	lr
   391aa:	bf00      	nop
   391ac:	20005844 	.word	0x20005844

000391b0 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   391b0:	4a04      	ldr	r2, [pc, #16]	; (391c4 <ull_scan_is_disabled_get+0x14>)
   391b2:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   391b6:	f003 0301 	and.w	r3, r3, #1
	return &ll_scan[handle];
   391ba:	4318      	orrs	r0, r3
}
   391bc:	bf0c      	ite	eq
   391be:	4610      	moveq	r0, r2
   391c0:	2000      	movne	r0, #0
   391c2:	4770      	bx	lr
   391c4:	20005844 	.word	0x20005844

000391c8 <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
   391c8:	b9a0      	cbnz	r0, 391f4 <ull_scan_is_enabled+0x2c>
	if (!scan || !scan->is_enabled) {
   391ca:	4a0b      	ldr	r2, [pc, #44]	; (391f8 <ull_scan_is_enabled+0x30>)
   391cc:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   391d0:	f013 0001 	ands.w	r0, r3, #1
   391d4:	d00f      	beq.n	391f6 <ull_scan_is_enabled+0x2e>
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   391d6:	6a10      	ldr	r0, [r2, #32]
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   391d8:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   391dc:	3800      	subs	r0, #0
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   391de:	f3c1 1240 	ubfx	r2, r1, #5, #1
   391e2:	f003 0301 	and.w	r3, r3, #1
   391e6:	fa03 f302 	lsl.w	r3, r3, r2
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   391ea:	bf18      	it	ne
   391ec:	2001      	movne	r0, #1
   391ee:	ea43 0080 	orr.w	r0, r3, r0, lsl #2
   391f2:	4770      	bx	lr
		return 0U;
   391f4:	2000      	movs	r0, #0
}
   391f6:	4770      	bx	lr
   391f8:	20005844 	.word	0x20005844

000391fc <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   391fc:	b950      	cbnz	r0, 39214 <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
   391fe:	4b06      	ldr	r3, [pc, #24]	; (39218 <ull_scan_filter_pol_get+0x1c>)
   39200:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
   39204:	f010 0001 	ands.w	r0, r0, #1
   39208:	d005      	beq.n	39216 <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
   3920a:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
   3920e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   39212:	4770      	bx	lr
		return 0;
   39214:	2000      	movs	r0, #0
}
   39216:	4770      	bx	lr
   39218:	20005844 	.word	0x20005844

0003921c <init_reset>:
{
   3921c:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   3921e:	4b15      	ldr	r3, [pc, #84]	; (39274 <init_reset+0x58>)
   39220:	4815      	ldr	r0, [pc, #84]	; (39278 <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   39222:	4c16      	ldr	r4, [pc, #88]	; (3927c <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   39224:	2206      	movs	r2, #6
   39226:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3922a:	f7fa fdcd 	bl	33dc8 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   3922e:	4b14      	ldr	r3, [pc, #80]	; (39280 <init_reset+0x64>)
   39230:	2203      	movs	r2, #3
   39232:	1d18      	adds	r0, r3, #4
   39234:	2124      	movs	r1, #36	; 0x24
   39236:	f7fa fdc7 	bl	33dc8 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   3923a:	4b12      	ldr	r3, [pc, #72]	; (39284 <init_reset+0x68>)
   3923c:	2218      	movs	r2, #24
   3923e:	1d18      	adds	r0, r3, #4
   39240:	212c      	movs	r1, #44	; 0x2c
   39242:	f7fa fdc1 	bl	33dc8 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   39246:	4b10      	ldr	r3, [pc, #64]	; (39288 <init_reset+0x6c>)
   39248:	221b      	movs	r2, #27
   3924a:	1d18      	adds	r0, r3, #4
   3924c:	2108      	movs	r1, #8
   3924e:	f7fa fdbb 	bl	33dc8 <mem_init>
	default_phy_tx |= PHY_2M;
   39252:	490e      	ldr	r1, [pc, #56]	; (3928c <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   39254:	4a0e      	ldr	r2, [pc, #56]	; (39290 <init_reset+0x74>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   39256:	480f      	ldr	r0, [pc, #60]	; (39294 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   39258:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   3925a:	f04f 0c1b 	mov.w	ip, #27
   3925e:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   39262:	700b      	strb	r3, [r1, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   39264:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   39268:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   3926a:	f8a0 c000 	strh.w	ip, [r0]
}
   3926e:	2000      	movs	r0, #0
   39270:	bd10      	pop	{r4, pc}
   39272:	bf00      	nop
   39274:	200058c0 	.word	0x200058c0
   39278:	20003360 	.word	0x20003360
   3927c:	200072b2 	.word	0x200072b2
   39280:	20005dc4 	.word	0x20005dc4
   39284:	200059a0 	.word	0x200059a0
   39288:	200058c4 	.word	0x200058c4
   3928c:	20007411 	.word	0x20007411
   39290:	20007410 	.word	0x20007410
   39294:	200072b0 	.word	0x200072b0

00039298 <ctrl_tx_pause_enqueue>:
{
   39298:	b538      	push	{r3, r4, r5, lr}
   3929a:	4604      	mov	r4, r0
		if (!conn->tx_ctrl) {
   3929c:	e9d0 3075 	ldrd	r3, r0, [r0, #468]	; 0x1d4
{
   392a0:	460d      	mov	r5, r1
	if (
   392a2:	b353      	cbz	r3, 392fa <ctrl_tx_pause_enqueue+0x62>
	    !conn->llcp_enc.pause_tx &&
   392a4:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   392a8:	0789      	lsls	r1, r1, #30
   392aa:	d415      	bmi.n	392d8 <ctrl_tx_pause_enqueue+0x40>
	    !conn->llcp_phy.pause_tx &&
   392ac:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   392b0:	07c9      	lsls	r1, r1, #31
   392b2:	d411      	bmi.n	392d8 <ctrl_tx_pause_enqueue+0x40>
		if (conn->tx_head == conn->tx_data) {
   392b4:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   392b8:	428b      	cmp	r3, r1
   392ba:	d02f      	beq.n	3931c <ctrl_tx_pause_enqueue+0x84>
		} else if (!conn->tx_ctrl) {
   392bc:	2800      	cmp	r0, #0
   392be:	d04d      	beq.n	3935c <ctrl_tx_pause_enqueue+0xc4>
			LL_ASSERT(!pause);
   392c0:	2a00      	cmp	r2, #0
   392c2:	d13d      	bne.n	39340 <ctrl_tx_pause_enqueue+0xa8>
	tx->next = conn->tx_ctrl_last->next;
   392c4:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   392c8:	681a      	ldr	r2, [r3, #0]
   392ca:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   392cc:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   392ce:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   392d0:	f8c4 51dc 	str.w	r5, [r4, #476]	; 0x1dc
	if (!tx->next) {
   392d4:	b1bb      	cbz	r3, 39306 <ctrl_tx_pause_enqueue+0x6e>
}
   392d6:	bd38      	pop	{r3, r4, r5, pc}
		if (!conn->tx_ctrl) {
   392d8:	b1c0      	cbz	r0, 3930c <ctrl_tx_pause_enqueue+0x74>
			LL_ASSERT(!pause);
   392da:	2a00      	cmp	r2, #0
   392dc:	d0f2      	beq.n	392c4 <ctrl_tx_pause_enqueue+0x2c>
   392de:	4a27      	ldr	r2, [pc, #156]	; (3937c <ctrl_tx_pause_enqueue+0xe4>)
   392e0:	4927      	ldr	r1, [pc, #156]	; (39380 <ctrl_tx_pause_enqueue+0xe8>)
   392e2:	4828      	ldr	r0, [pc, #160]	; (39384 <ctrl_tx_pause_enqueue+0xec>)
   392e4:	f44f 6328 	mov.w	r3, #2688	; 0xa80
   392e8:	f010 fb87 	bl	499fa <printk>
   392ec:	4040      	eors	r0, r0
   392ee:	f380 8811 	msr	BASEPRI, r0
   392f2:	f04f 0003 	mov.w	r0, #3
   392f6:	df02      	svc	2
   392f8:	e7e4      	b.n	392c4 <ctrl_tx_pause_enqueue+0x2c>
		if (!conn->tx_ctrl) {
   392fa:	2800      	cmp	r0, #0
   392fc:	d1ed      	bne.n	392da <ctrl_tx_pause_enqueue+0x42>
			tx->next = conn->tx_head;
   392fe:	6008      	str	r0, [r1, #0]
			conn->tx_head = tx;
   39300:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
			if (!pause) {
   39304:	b1ca      	cbz	r2, 3933a <ctrl_tx_pause_enqueue+0xa2>
		conn->tx_data_last = tx;
   39306:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
}
   3930a:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   3930c:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   3930e:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
			if (!pause) {
   39312:	2a00      	cmp	r2, #0
   39314:	d1df      	bne.n	392d6 <ctrl_tx_pause_enqueue+0x3e>
				conn->tx_ctrl = tx;
   39316:	e9c4 5576 	strd	r5, r5, [r4, #472]	; 0x1d8
}
   3931a:	bd38      	pop	{r3, r4, r5, pc}
			conn->tx_data = conn->tx_data->next;
   3931c:	6819      	ldr	r1, [r3, #0]
   3931e:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   39322:	2800      	cmp	r0, #0
   39324:	d1cc      	bne.n	392c0 <ctrl_tx_pause_enqueue+0x28>
			tx->next = conn->tx_head->next;
   39326:	6819      	ldr	r1, [r3, #0]
   39328:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   3932a:	601d      	str	r5, [r3, #0]
			if (!pause) {
   3932c:	b90a      	cbnz	r2, 39332 <ctrl_tx_pause_enqueue+0x9a>
				conn->tx_ctrl = tx;
   3932e:	e9c4 5576 	strd	r5, r5, [r4, #472]	; 0x1d8
	if (!tx->next) {
   39332:	682b      	ldr	r3, [r5, #0]
   39334:	2b00      	cmp	r3, #0
   39336:	d1ce      	bne.n	392d6 <ctrl_tx_pause_enqueue+0x3e>
   39338:	e7e5      	b.n	39306 <ctrl_tx_pause_enqueue+0x6e>
				conn->tx_ctrl = tx;
   3933a:	e9c4 1176 	strd	r1, r1, [r4, #472]	; 0x1d8
	if (!tx->next) {
   3933e:	e7e2      	b.n	39306 <ctrl_tx_pause_enqueue+0x6e>
			LL_ASSERT(!pause);
   39340:	4a0e      	ldr	r2, [pc, #56]	; (3937c <ctrl_tx_pause_enqueue+0xe4>)
   39342:	490f      	ldr	r1, [pc, #60]	; (39380 <ctrl_tx_pause_enqueue+0xe8>)
   39344:	480f      	ldr	r0, [pc, #60]	; (39384 <ctrl_tx_pause_enqueue+0xec>)
   39346:	f640 236e 	movw	r3, #2670	; 0xa6e
   3934a:	f010 fb56 	bl	499fa <printk>
   3934e:	4040      	eors	r0, r0
   39350:	f380 8811 	msr	BASEPRI, r0
   39354:	f04f 0003 	mov.w	r0, #3
   39358:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   3935a:	e7b3      	b.n	392c4 <ctrl_tx_pause_enqueue+0x2c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3935c:	7919      	ldrb	r1, [r3, #4]
   3935e:	f001 0103 	and.w	r1, r1, #3
   39362:	2903      	cmp	r1, #3
   39364:	d004      	beq.n	39370 <ctrl_tx_pause_enqueue+0xd8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   39366:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
			LL_ASSERT(!pause);
   3936a:	2a00      	cmp	r2, #0
   3936c:	d0aa      	beq.n	392c4 <ctrl_tx_pause_enqueue+0x2c>
   3936e:	e7e7      	b.n	39340 <ctrl_tx_pause_enqueue+0xa8>
	    ((pdu_data_tx->llctrl.opcode !=
   39370:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39372:	2903      	cmp	r1, #3
   39374:	d0d7      	beq.n	39326 <ctrl_tx_pause_enqueue+0x8e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   39376:	290a      	cmp	r1, #10
   39378:	d1f5      	bne.n	39366 <ctrl_tx_pause_enqueue+0xce>
   3937a:	e7d4      	b.n	39326 <ctrl_tx_pause_enqueue+0x8e>
   3937c:	00052f80 	.word	0x00052f80
   39380:	00052fc0 	.word	0x00052fc0
   39384:	00052a70 	.word	0x00052a70

00039388 <tx_lll_flush>:
{
   39388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   3938c:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   39390:	4934      	ldr	r1, [pc, #208]	; (39464 <tx_lll_flush+0xdc>)
{
   39392:	b083      	sub	sp, #12
   39394:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   39396:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   3939a:	4640      	mov	r0, r8
   3939c:	f7fa fd7a 	bl	33e94 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   393a0:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
   393a4:	4629      	mov	r1, r5
   393a6:	f008 fd01 	bl	41dac <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   393aa:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   393ac:	aa01      	add	r2, sp, #4
   393ae:	4631      	mov	r1, r6
   393b0:	f7fa fdb0 	bl	33f14 <memq_dequeue>
	while (link) {
   393b4:	b328      	cbz	r0, 39402 <tx_lll_flush+0x7a>
   393b6:	4c2c      	ldr	r4, [pc, #176]	; (39468 <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
   393b8:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   393bc:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   393c0:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   393c2:	f894 c001 	ldrb.w	ip, [r4, #1]
   393c6:	78a1      	ldrb	r1, [r4, #2]
	last = last + 1;
   393c8:	1c53      	adds	r3, r2, #1
   393ca:	b2db      	uxtb	r3, r3
		last = 0U;
   393cc:	459c      	cmp	ip, r3
   393ce:	bf08      	it	eq
   393d0:	2300      	moveq	r3, #0
	if (last == first) {
   393d2:	4299      	cmp	r1, r3
   393d4:	f894 c000 	ldrb.w	ip, [r4]
   393d8:	d033      	beq.n	39442 <tx_lll_flush+0xba>
		lll_tx->node = tx;
   393da:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   393dc:	fb12 f20c 	smulbb	r2, r2, ip
   393e0:	eb02 0c09 	add.w	ip, r2, r9
		lll_tx->handle = LLL_HANDLE_INVALID;
   393e4:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   393e8:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   393ea:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   393ee:	6002      	str	r2, [r0, #0]
		tx->next = link;
   393f0:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   393f2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
   393f4:	70e3      	strb	r3, [r4, #3]
   393f6:	aa01      	add	r2, sp, #4
   393f8:	4631      	mov	r1, r6
   393fa:	f7fa fd8b 	bl	33f14 <memq_dequeue>
	while (link) {
   393fe:	2800      	cmp	r0, #0
   39400:	d1de      	bne.n	393c0 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   39402:	f8d8 0154 	ldr.w	r0, [r8, #340]	; 0x154
	rx = (void *)&conn->llcp_terminate.node_rx;
   39406:	f508 74aa 	add.w	r4, r8, #340	; 0x154
	LL_ASSERT(rx->hdr.link);
   3940a:	b150      	cbz	r0, 39422 <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   3940c:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   3940e:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   39410:	f8c8 3154 	str.w	r3, [r8, #340]	; 0x154
	ull_rx_put(link, rx);
   39414:	f7fe fd3a 	bl	37e8c <ull_rx_put>
	ull_rx_sched();
   39418:	f7fe fd48 	bl	37eac <ull_rx_sched>
}
   3941c:	b003      	add	sp, #12
   3941e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   39422:	4a12      	ldr	r2, [pc, #72]	; (3946c <tx_lll_flush+0xe4>)
   39424:	4912      	ldr	r1, [pc, #72]	; (39470 <tx_lll_flush+0xe8>)
   39426:	4813      	ldr	r0, [pc, #76]	; (39474 <tx_lll_flush+0xec>)
   39428:	f640 13da 	movw	r3, #2522	; 0x9da
   3942c:	f010 fae5 	bl	499fa <printk>
   39430:	4040      	eors	r0, r0
   39432:	f380 8811 	msr	BASEPRI, r0
   39436:	f04f 0003 	mov.w	r0, #3
   3943a:	df02      	svc	2
	link = rx->hdr.link;
   3943c:	f8d8 0154 	ldr.w	r0, [r8, #340]	; 0x154
   39440:	e7e4      	b.n	3940c <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   39442:	4a0a      	ldr	r2, [pc, #40]	; (3946c <tx_lll_flush+0xe4>)
   39444:	490c      	ldr	r1, [pc, #48]	; (39478 <tx_lll_flush+0xf0>)
   39446:	480b      	ldr	r0, [pc, #44]	; (39474 <tx_lll_flush+0xec>)
   39448:	f640 13c6 	movw	r3, #2502	; 0x9c6
   3944c:	f010 fad5 	bl	499fa <printk>
   39450:	4040      	eors	r0, r0
   39452:	f380 8811 	msr	BASEPRI, r0
   39456:	f04f 0003 	mov.w	r0, #3
   3945a:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   3945c:	2300      	movs	r3, #0
   3945e:	801b      	strh	r3, [r3, #0]
   39460:	deff      	udf	#255	; 0xff
   39462:	bf00      	nop
   39464:	20003360 	.word	0x20003360
   39468:	20000c54 	.word	0x20000c54
   3946c:	00052f80 	.word	0x00052f80
   39470:	00052fd0 	.word	0x00052fd0
   39474:	00052a70 	.word	0x00052a70
   39478:	00052fc8 	.word	0x00052fc8

0003947c <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   3947c:	f890 2176 	ldrb.w	r2, [r0, #374]	; 0x176
   39480:	f012 0202 	ands.w	r2, r2, #2
   39484:	d00a      	beq.n	3949c <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
   39486:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
   3948a:	b1d3      	cbz	r3, 394c2 <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
   3948c:	f8d0 31dc 	ldr.w	r3, [r0, #476]	; 0x1dc
   39490:	681a      	ldr	r2, [r3, #0]
   39492:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   39494:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   39496:	680b      	ldr	r3, [r1, #0]
   39498:	b1d3      	cbz	r3, 394d0 <ctrl_tx_sec_enqueue+0x54>
   3949a:	4770      	bx	lr
		if (conn->tx_head) {
   3949c:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
   394a0:	b1cb      	cbz	r3, 394d6 <ctrl_tx_sec_enqueue+0x5a>
{
   394a2:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
   394a4:	f890 c0f1 	ldrb.w	ip, [r0, #241]	; 0xf1
   394a8:	f890 e0f0 	ldrb.w	lr, [r0, #240]	; 0xf0
   394ac:	45e6      	cmp	lr, ip
   394ae:	d004      	beq.n	394ba <ctrl_tx_sec_enqueue+0x3e>
   394b0:	f890 c0f2 	ldrb.w	ip, [r0, #242]	; 0xf2
   394b4:	f1bc 0f03 	cmp.w	ip, #3
   394b8:	d010      	beq.n	394dc <ctrl_tx_sec_enqueue+0x60>
}
   394ba:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
   394be:	f7ff beeb 	b.w	39298 <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
   394c2:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
   394c6:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   394c8:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
		if (!tx->next) {
   394cc:	2b00      	cmp	r3, #0
   394ce:	d1e4      	bne.n	3949a <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
   394d0:	f8c0 11e4 	str.w	r1, [r0, #484]	; 0x1e4
   394d4:	4770      	bx	lr
	bool pause = false;
   394d6:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
   394d8:	f7ff bede 	b.w	39298 <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   394dc:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   394e0:	f00c 0c03 	and.w	ip, ip, #3
   394e4:	f1bc 0f03 	cmp.w	ip, #3
   394e8:	d1e7      	bne.n	394ba <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
   394ea:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   394ec:	2a03      	cmp	r2, #3
   394ee:	d005      	beq.n	394fc <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   394f0:	f1a2 020a 	sub.w	r2, r2, #10
   394f4:	fab2 f282 	clz	r2, r2
   394f8:	0952      	lsrs	r2, r2, #5
   394fa:	e7de      	b.n	394ba <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
   394fc:	2201      	movs	r2, #1
   394fe:	e7dc      	b.n	394ba <ctrl_tx_sec_enqueue+0x3e>

00039500 <ticker_stop_op_cb>:
{
   39500:	b510      	push	{r4, lr}
   39502:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39504:	b9b0      	cbnz	r0, 39534 <ticker_stop_op_cb+0x34>
	mfy.param = param;
   39506:	4b12      	ldr	r3, [pc, #72]	; (39550 <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   39508:	2200      	movs	r2, #0
   3950a:	2101      	movs	r1, #1
   3950c:	2002      	movs	r0, #2
	mfy.param = param;
   3950e:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   39510:	f7fa fd64 	bl	33fdc <mayfly_enqueue>
	LL_ASSERT(!ret);
   39514:	b900      	cbnz	r0, 39518 <ticker_stop_op_cb+0x18>
}
   39516:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   39518:	4a0e      	ldr	r2, [pc, #56]	; (39554 <ticker_stop_op_cb+0x54>)
   3951a:	490f      	ldr	r1, [pc, #60]	; (39558 <ticker_stop_op_cb+0x58>)
   3951c:	480f      	ldr	r0, [pc, #60]	; (3955c <ticker_stop_op_cb+0x5c>)
   3951e:	f44f 6318 	mov.w	r3, #2432	; 0x980
   39522:	f010 fa6a 	bl	499fa <printk>
   39526:	4040      	eors	r0, r0
   39528:	f380 8811 	msr	BASEPRI, r0
   3952c:	f04f 0003 	mov.w	r0, #3
   39530:	df02      	svc	2
}
   39532:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39534:	4a07      	ldr	r2, [pc, #28]	; (39554 <ticker_stop_op_cb+0x54>)
   39536:	490a      	ldr	r1, [pc, #40]	; (39560 <ticker_stop_op_cb+0x60>)
   39538:	4808      	ldr	r0, [pc, #32]	; (3955c <ticker_stop_op_cb+0x5c>)
   3953a:	f640 137a 	movw	r3, #2426	; 0x97a
   3953e:	f010 fa5c 	bl	499fa <printk>
   39542:	4040      	eors	r0, r0
   39544:	f380 8811 	msr	BASEPRI, r0
   39548:	f04f 0003 	mov.w	r0, #3
   3954c:	df02      	svc	2
   3954e:	e7da      	b.n	39506 <ticker_stop_op_cb+0x6>
   39550:	20000c14 	.word	0x20000c14
   39554:	00052f80 	.word	0x00052f80
   39558:	00052d4c 	.word	0x00052d4c
   3955c:	00052a70 	.word	0x00052a70
   39560:	00052fe0 	.word	0x00052fe0

00039564 <disabled_cb>:
{
   39564:	b508      	push	{r3, lr}
	mfy.param = param;
   39566:	4b0b      	ldr	r3, [pc, #44]	; (39594 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   39568:	2200      	movs	r2, #0
	mfy.param = param;
   3956a:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   3956c:	4611      	mov	r1, r2
   3956e:	2001      	movs	r0, #1
   39570:	f7fa fd34 	bl	33fdc <mayfly_enqueue>
	LL_ASSERT(!ret);
   39574:	b900      	cbnz	r0, 39578 <disabled_cb+0x14>
}
   39576:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   39578:	4a07      	ldr	r2, [pc, #28]	; (39598 <disabled_cb+0x34>)
   3957a:	4908      	ldr	r1, [pc, #32]	; (3959c <disabled_cb+0x38>)
   3957c:	4808      	ldr	r0, [pc, #32]	; (395a0 <disabled_cb+0x3c>)
   3957e:	f640 13ac 	movw	r3, #2476	; 0x9ac
   39582:	f010 fa3a 	bl	499fa <printk>
   39586:	4040      	eors	r0, r0
   39588:	f380 8811 	msr	BASEPRI, r0
   3958c:	f04f 0003 	mov.w	r0, #3
   39590:	df02      	svc	2
}
   39592:	bd08      	pop	{r3, pc}
   39594:	20000bf4 	.word	0x20000bf4
   39598:	00052f80 	.word	0x00052f80
   3959c:	00052d4c 	.word	0x00052d4c
   395a0:	00052a70 	.word	0x00052a70

000395a4 <conn_disable>:
{
   395a4:	b538      	push	{r3, r4, r5, lr}
   395a6:	4604      	mov	r4, r0
	return hdr->ref;
   395a8:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   395ac:	b353      	cbz	r3, 39604 <conn_disable+0x60>
		mfy.param = &conn->lll;
   395ae:	4d17      	ldr	r5, [pc, #92]	; (3960c <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   395b0:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
   395b2:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   395b4:	b16b      	cbz	r3, 395d2 <conn_disable+0x2e>
   395b6:	4a16      	ldr	r2, [pc, #88]	; (39610 <conn_disable+0x6c>)
   395b8:	4916      	ldr	r1, [pc, #88]	; (39614 <conn_disable+0x70>)
   395ba:	4817      	ldr	r0, [pc, #92]	; (39618 <conn_disable+0x74>)
   395bc:	f640 1395 	movw	r3, #2453	; 0x995
   395c0:	f010 fa1b 	bl	499fa <printk>
   395c4:	4040      	eors	r0, r0
   395c6:	f380 8811 	msr	BASEPRI, r0
   395ca:	f04f 0003 	mov.w	r0, #3
   395ce:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   395d0:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   395d2:	4912      	ldr	r1, [pc, #72]	; (3961c <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   395d4:	4b0d      	ldr	r3, [pc, #52]	; (3960c <conn_disable+0x68>)
   395d6:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   395d8:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   395dc:	4611      	mov	r1, r2
   395de:	2001      	movs	r0, #1
   395e0:	f7fa fcfc 	bl	33fdc <mayfly_enqueue>
		LL_ASSERT(!ret);
   395e4:	b900      	cbnz	r0, 395e8 <conn_disable+0x44>
}
   395e6:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   395e8:	4a09      	ldr	r2, [pc, #36]	; (39610 <conn_disable+0x6c>)
   395ea:	490d      	ldr	r1, [pc, #52]	; (39620 <conn_disable+0x7c>)
   395ec:	480a      	ldr	r0, [pc, #40]	; (39618 <conn_disable+0x74>)
   395ee:	f640 139c 	movw	r3, #2460	; 0x99c
   395f2:	f010 fa02 	bl	499fa <printk>
   395f6:	4040      	eors	r0, r0
   395f8:	f380 8811 	msr	BASEPRI, r0
   395fc:	f04f 0003 	mov.w	r0, #3
   39600:	df02      	svc	2
}
   39602:	bd38      	pop	{r3, r4, r5, pc}
   39604:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   39608:	f7ff bfac 	b.w	39564 <disabled_cb>
   3960c:	20000c04 	.word	0x20000c04
   39610:	00052f80 	.word	0x00052f80
   39614:	00052e68 	.word	0x00052e68
   39618:	00052a70 	.word	0x00052a70
   3961c:	00039565 	.word	0x00039565
   39620:	00052d4c 	.word	0x00052d4c

00039624 <conn_setup_adv_scan_disabled_cb>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   39624:	6883      	ldr	r3, [r0, #8]
   39626:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   39628:	7f53      	ldrb	r3, [r2, #29]
   3962a:	09db      	lsrs	r3, r3, #7
	ftr = &(rx->rx_ftr);
   3962c:	f100 0108 	add.w	r1, r0, #8
	switch (lll->role) {
   39630:	d001      	beq.n	39636 <conn_setup_adv_scan_disabled_cb+0x12>
		ull_periph_setup(rx, ftr, lll);
   39632:	f7ee b879 	b.w	27728 <ull_periph_setup>
		ull_central_setup(rx, ftr, lll);
   39636:	f7ee bd47 	b.w	280c8 <ull_central_setup>
   3963a:	bf00      	nop

0003963c <ticker_start_conn_op_cb>:
{
   3963c:	b510      	push	{r4, lr}
   3963e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39640:	b990      	cbnz	r0, 39668 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   39642:	4620      	mov	r0, r4
   39644:	f7fe fb5a 	bl	37cfc <ull_update_unmark>
	LL_ASSERT(p == param);
   39648:	4284      	cmp	r4, r0
   3964a:	d00c      	beq.n	39666 <ticker_start_conn_op_cb+0x2a>
   3964c:	4a0d      	ldr	r2, [pc, #52]	; (39684 <ticker_start_conn_op_cb+0x48>)
   3964e:	490e      	ldr	r1, [pc, #56]	; (39688 <ticker_start_conn_op_cb+0x4c>)
   39650:	480e      	ldr	r0, [pc, #56]	; (3968c <ticker_start_conn_op_cb+0x50>)
   39652:	f640 03b7 	movw	r3, #2231	; 0x8b7
   39656:	f010 f9d0 	bl	499fa <printk>
   3965a:	4040      	eors	r0, r0
   3965c:	f380 8811 	msr	BASEPRI, r0
   39660:	f04f 0003 	mov.w	r0, #3
   39664:	df02      	svc	2
}
   39666:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39668:	4a06      	ldr	r2, [pc, #24]	; (39684 <ticker_start_conn_op_cb+0x48>)
   3966a:	4909      	ldr	r1, [pc, #36]	; (39690 <ticker_start_conn_op_cb+0x54>)
   3966c:	4807      	ldr	r0, [pc, #28]	; (3968c <ticker_start_conn_op_cb+0x50>)
   3966e:	f640 03b4 	movw	r3, #2228	; 0x8b4
   39672:	f010 f9c2 	bl	499fa <printk>
   39676:	4040      	eors	r0, r0
   39678:	f380 8811 	msr	BASEPRI, r0
   3967c:	f04f 0003 	mov.w	r0, #3
   39680:	df02      	svc	2
   39682:	e7de      	b.n	39642 <ticker_start_conn_op_cb+0x6>
   39684:	00052f80 	.word	0x00052f80
   39688:	00052fec 	.word	0x00052fec
   3968c:	00052a70 	.word	0x00052a70
   39690:	00052fe0 	.word	0x00052fe0

00039694 <ticker_stop_conn_op_cb>:
{
   39694:	b510      	push	{r4, lr}
   39696:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39698:	b990      	cbnz	r0, 396c0 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   3969a:	4620      	mov	r0, r4
   3969c:	f7fe fb22 	bl	37ce4 <ull_update_mark>
	LL_ASSERT(p == param);
   396a0:	4284      	cmp	r4, r0
   396a2:	d00c      	beq.n	396be <ticker_stop_conn_op_cb+0x2a>
   396a4:	4a0d      	ldr	r2, [pc, #52]	; (396dc <ticker_stop_conn_op_cb+0x48>)
   396a6:	490e      	ldr	r1, [pc, #56]	; (396e0 <ticker_stop_conn_op_cb+0x4c>)
   396a8:	480e      	ldr	r0, [pc, #56]	; (396e4 <ticker_stop_conn_op_cb+0x50>)
   396aa:	f640 03ad 	movw	r3, #2221	; 0x8ad
   396ae:	f010 f9a4 	bl	499fa <printk>
   396b2:	4040      	eors	r0, r0
   396b4:	f380 8811 	msr	BASEPRI, r0
   396b8:	f04f 0003 	mov.w	r0, #3
   396bc:	df02      	svc	2
}
   396be:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   396c0:	4a06      	ldr	r2, [pc, #24]	; (396dc <ticker_stop_conn_op_cb+0x48>)
   396c2:	4909      	ldr	r1, [pc, #36]	; (396e8 <ticker_stop_conn_op_cb+0x54>)
   396c4:	4807      	ldr	r0, [pc, #28]	; (396e4 <ticker_stop_conn_op_cb+0x50>)
   396c6:	f640 03aa 	movw	r3, #2218	; 0x8aa
   396ca:	f010 f996 	bl	499fa <printk>
   396ce:	4040      	eors	r0, r0
   396d0:	f380 8811 	msr	BASEPRI, r0
   396d4:	f04f 0003 	mov.w	r0, #3
   396d8:	df02      	svc	2
   396da:	e7de      	b.n	3969a <ticker_stop_conn_op_cb+0x6>
   396dc:	00052f80 	.word	0x00052f80
   396e0:	00052fec 	.word	0x00052fec
   396e4:	00052a70 	.word	0x00052a70
   396e8:	00052fe0 	.word	0x00052fe0

000396ec <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   396ec:	b900      	cbnz	r0, 396f0 <ticker_update_conn_op_cb+0x4>
   396ee:	4770      	bx	lr
{
   396f0:	b510      	push	{r4, lr}
   396f2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   396f4:	f7fe fb0e 	bl	37d14 <ull_update_mark_get>
   396f8:	4284      	cmp	r4, r0
   396fa:	d010      	beq.n	3971e <ticker_update_conn_op_cb+0x32>
   396fc:	f7fe faec 	bl	37cd8 <ull_disable_mark_get>
   39700:	4284      	cmp	r4, r0
   39702:	d00c      	beq.n	3971e <ticker_update_conn_op_cb+0x32>
   39704:	4a06      	ldr	r2, [pc, #24]	; (39720 <ticker_update_conn_op_cb+0x34>)
   39706:	4907      	ldr	r1, [pc, #28]	; (39724 <ticker_update_conn_op_cb+0x38>)
   39708:	4807      	ldr	r0, [pc, #28]	; (39728 <ticker_update_conn_op_cb+0x3c>)
   3970a:	f640 03a1 	movw	r3, #2209	; 0x8a1
   3970e:	f010 f974 	bl	499fa <printk>
   39712:	4040      	eors	r0, r0
   39714:	f380 8811 	msr	BASEPRI, r0
   39718:	f04f 0003 	mov.w	r0, #3
   3971c:	df02      	svc	2
}
   3971e:	bd10      	pop	{r4, pc}
   39720:	00052f80 	.word	0x00052f80
   39724:	00052ff8 	.word	0x00052ff8
   39728:	00052a70 	.word	0x00052a70

0003972c <tx_ull_dequeue>:
{
   3972c:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   3972e:	e9d0 2475 	ldrd	r2, r4, [r0, #468]	; 0x1d4
{
   39732:	4603      	mov	r3, r0
   39734:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   39736:	b164      	cbz	r4, 39752 <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   39738:	4294      	cmp	r4, r2
   3973a:	d024      	beq.n	39786 <tx_ull_dequeue+0x5a>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   3973c:	f8d3 11e0 	ldr.w	r1, [r3, #480]	; 0x1e0
		if (conn->tx_head == conn->tx_data) {
   39740:	428a      	cmp	r2, r1
   39742:	d00b      	beq.n	3975c <tx_ull_dequeue+0x30>
		conn->tx_head = conn->tx_head->next;
   39744:	6812      	ldr	r2, [r2, #0]
   39746:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
   3974a:	2300      	movs	r3, #0
}
   3974c:	bc10      	pop	{r4}
		tx->next = tx;
   3974e:	6003      	str	r3, [r0, #0]
}
   39750:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   39752:	f8d3 11e0 	ldr.w	r1, [r3, #480]	; 0x1e0
   39756:	4291      	cmp	r1, r2
   39758:	d104      	bne.n	39764 <tx_ull_dequeue+0x38>
	if (conn->tx_head == conn->tx_ctrl) {
   3975a:	b1a2      	cbz	r2, 39786 <tx_ull_dequeue+0x5a>
			conn->tx_data = conn->tx_data->next;
   3975c:	6809      	ldr	r1, [r1, #0]
   3975e:	f8c3 11e0 	str.w	r1, [r3, #480]	; 0x1e0
   39762:	e7ef      	b.n	39744 <tx_ull_dequeue+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39764:	7911      	ldrb	r1, [r2, #4]
   39766:	f001 0103 	and.w	r1, r1, #3
   3976a:	2903      	cmp	r1, #3
   3976c:	d013      	beq.n	39796 <tx_ull_dequeue+0x6a>
		conn->tx_head = conn->tx_head->next;
   3976e:	6812      	ldr	r2, [r2, #0]
   39770:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
			conn->tx_ctrl_last = NULL;
   39774:	2200      	movs	r2, #0
   39776:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
   3977a:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
		tx->next = tx;
   3977e:	4603      	mov	r3, r0
}
   39780:	bc10      	pop	{r4}
		tx->next = tx;
   39782:	6003      	str	r3, [r0, #0]
}
   39784:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   39786:	f8d3 11dc 	ldr.w	r1, [r3, #476]	; 0x1dc
		conn->tx_head = conn->tx_head->next;
   3978a:	6812      	ldr	r2, [r2, #0]
   3978c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   39790:	42a1      	cmp	r1, r4
   39792:	d1f2      	bne.n	3977a <tx_ull_dequeue+0x4e>
   39794:	e7ee      	b.n	39774 <tx_ull_dequeue+0x48>
	    ((pdu_data_tx->llctrl.opcode !=
   39796:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39798:	2903      	cmp	r1, #3
   3979a:	d0d3      	beq.n	39744 <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3979c:	290a      	cmp	r1, #10
   3979e:	d1e6      	bne.n	3976e <tx_ull_dequeue+0x42>
   397a0:	e7d0      	b.n	39744 <tx_ull_dequeue+0x18>
   397a2:	bf00      	nop

000397a4 <feature_rsp_send>:

#if defined(CONFIG_BT_PERIPHERAL) || \
	(defined(CONFIG_BT_CENTRAL) && defined(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG))
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			    struct pdu_data *pdu_rx)
{
   397a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->common.txn_lock) {
   397a8:	f890 70e4 	ldrb.w	r7, [r0, #228]	; 0xe4
   397ac:	f017 0702 	ands.w	r7, r7, #2
{
   397b0:	4688      	mov	r8, r1
	if (conn->common.txn_lock) {
   397b2:	d15d      	bne.n	39870 <feature_rsp_send+0xcc>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   397b4:	4604      	mov	r4, r0
   397b6:	4833      	ldr	r0, [pc, #204]	; (39884 <feature_rsp_send+0xe0>)
   397b8:	4691      	mov	r9, r2
   397ba:	f7fa fb35 	bl	33e28 <mem_acquire>
	if (!tx) {
   397be:	4605      	mov	r5, r0
   397c0:	2800      	cmp	r0, #0
   397c2:	d05b      	beq.n	3987c <feature_rsp_send+0xd8>
	conn->common.txn_lock = 1U;
   397c4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
	feat &= LL_FEAT_BIT_MASK;
   397c8:	492f      	ldr	r1, [pc, #188]	; (39888 <feature_rsp_send+0xe4>)
	conn->common.txn_lock = 1U;
   397ca:	f043 0302 	orr.w	r3, r3, #2
   397ce:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
   397d2:	f8d9 2004 	ldr.w	r2, [r9, #4]
   397d6:	f8d9 3008 	ldr.w	r3, [r9, #8]
	feat &= LL_FEAT_BIT_MASK;
   397da:	4311      	orrs	r1, r2
		return err;
	}

	/* AND the feature set to get Feature USED */
	req = &pdu_rx->llctrl.feature_req;
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   397dc:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   397e0:	400a      	ands	r2, r1
   397e2:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
	feat &= LL_FEAT_BIT_MASK;
   397e6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   397ea:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	feat &= LL_FEAT_BIT_MASK;
   397ee:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   397f2:	401a      	ands	r2, r3
   397f4:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
   397f8:	f8d9 6004 	ldr.w	r6, [r9, #4]
   397fc:	f8d9 9008 	ldr.w	r9, [r9, #8]
	return feat;
   39800:	f009 09ff 	and.w	r9, r9, #255	; 0xff
	 * Get all the features of peer, except octet 0.
	 * Octet 0 is the actual features used on the link
	 * See BTCore V5.2, Vol. 6, Part B, chapter 5.1.4
	 */
	conn->llcp_feature.features_peer =
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   39804:	f7fd fc2e 	bl	37064 <ll_feat_get>
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   39808:	f049 0310 	orr.w	r3, r9, #16
	conn->llcp_feature.features_peer =
   3980c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	feat &= LL_FEAT_BIT_MASK;
   39810:	4b1d      	ldr	r3, [pc, #116]	; (39888 <feature_rsp_send+0xe4>)
   39812:	4333      	orrs	r3, r6
	feat_result = feat_to_keep & feat_octet0;
   39814:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   39816:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   3981a:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
   3981e:	4303      	orrs	r3, r0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   39820:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
   39824:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   39828:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140

	/* features exchanged */
	conn->common.fex_valid = 1U;
   3982c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   39830:	f043 0301 	orr.w	r3, r3, #1
   39834:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	/* Enqueue feature response */
	pdu_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_tx);

	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   39838:	792b      	ldrb	r3, [r5, #4]
   3983a:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   3983e:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   39840:	712b      	strb	r3, [r5, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   39842:	2309      	movs	r3, #9
   39844:	716b      	strb	r3, [r5, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   39846:	71eb      	strb	r3, [r5, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   39848:	4639      	mov	r1, r7
   3984a:	18a8      	adds	r0, r5, r2
   3984c:	f012 fa0f 	bl	4bc6e <memset>
		     sizeof(pdu_tx->llctrl.feature_rsp.features));
	/*
	 * On feature response we send the local supported features.
	 * See BTCore V5.2 VOl 6 Part B, chapter 5.1.4
	 */
	feat = feat_land_octet0(ll_feat_get(),
   39850:	f7fd fc08 	bl	37064 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   39854:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
	dst[0] = val;
   39858:	7329      	strb	r1, [r5, #12]
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   3985a:	f063 03ff 	orn	r3, r3, #255	; 0xff
   3985e:	4003      	ands	r3, r0
   39860:	60ab      	str	r3, [r5, #8]
	dst[1] = val >> 8;
   39862:	f8a5 700d 	strh.w	r7, [r5, #13]
   39866:	73ef      	strb	r7, [r5, #15]
				conn->llcp_feature.features_conn);
	sys_put_le64(feat, pdu_tx->llctrl.feature_rsp.features);

	ctrl_tx_sec_enqueue(conn, tx);
   39868:	4629      	mov	r1, r5
   3986a:	4620      	mov	r0, r4
   3986c:	f7ff fe06 	bl	3947c <ctrl_tx_sec_enqueue>

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   39870:	2301      	movs	r3, #1
   39872:	f888 3004 	strb.w	r3, [r8, #4]

	return 0;
   39876:	2000      	movs	r0, #0
}
   39878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		*err = -ENOBUFS;
   3987c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   39880:	e7fa      	b.n	39878 <feature_rsp_send+0xd4>
   39882:	bf00      	nop
   39884:	200059a0 	.word	0x200059a0
   39888:	087830d0 	.word	0x087830d0

0003988c <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   3988c:	e92d 41e8 	stmdb	sp!, {r3, r5, r6, r7, r8, lr}
   39890:	4605      	mov	r5, r0
	if (conn->common.txn_lock) {
   39892:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
{
   39896:	460e      	mov	r6, r1
	if (conn->common.txn_lock) {
   39898:	0781      	lsls	r1, r0, #30
   3989a:	d433      	bmi.n	39904 <reject_ext_ind_send+0x78>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3989c:	483b      	ldr	r0, [pc, #236]	; (3998c <reject_ext_ind_send+0x100>)
   3989e:	4690      	mov	r8, r2
   398a0:	461f      	mov	r7, r3
   398a2:	f7fa fac1 	bl	33e28 <mem_acquire>
	if (!tx) {
   398a6:	2800      	cmp	r0, #0
   398a8:	d051      	beq.n	3994e <reject_ext_ind_send+0xc2>
	conn->common.txn_lock = 1U;
   398aa:	f895 30e4 	ldrb.w	r3, [r5, #228]	; 0xe4
   398ae:	f043 0302 	orr.w	r3, r3, #2
   398b2:	f885 30e4 	strb.w	r3, [r5, #228]	; 0xe4
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   398b6:	2303      	movs	r3, #3
   398b8:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   398ba:	2311      	movs	r3, #17
	    conn->tx_head &&
   398bc:	f8d5 21d4 	ldr.w	r2, [r5, #468]	; 0x1d4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   398c0:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   398c2:	7903      	ldrb	r3, [r0, #4]
		if (!conn->tx_ctrl) {
   398c4:	f8d5 11d8 	ldr.w	r1, [r5, #472]	; 0x1d8
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   398c8:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   398cc:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   398d0:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   398d2:	7103      	strb	r3, [r0, #4]
	if (
   398d4:	b1da      	cbz	r2, 3990e <reject_ext_ind_send+0x82>
	    !conn->llcp_enc.pause_tx &&
   398d6:	f895 3176 	ldrb.w	r3, [r5, #374]	; 0x176
	    conn->tx_head &&
   398da:	079f      	lsls	r7, r3, #30
   398dc:	d42d      	bmi.n	3993a <reject_ext_ind_send+0xae>
	    !conn->llcp_phy.pause_tx &&
   398de:	f895 31cf 	ldrb.w	r3, [r5, #463]	; 0x1cf
   398e2:	07db      	lsls	r3, r3, #31
   398e4:	d429      	bmi.n	3993a <reject_ext_ind_send+0xae>
		if (conn->tx_head == conn->tx_data) {
   398e6:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
   398ea:	429a      	cmp	r2, r3
   398ec:	d032      	beq.n	39954 <reject_ext_ind_send+0xc8>
		} else if (!conn->tx_ctrl) {
   398ee:	2900      	cmp	r1, #0
   398f0:	d03e      	beq.n	39970 <reject_ext_ind_send+0xe4>
	tx->next = conn->tx_ctrl_last->next;
   398f2:	f8d5 21dc 	ldr.w	r2, [r5, #476]	; 0x1dc
   398f6:	6813      	ldr	r3, [r2, #0]
   398f8:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   398fa:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   398fc:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   398fe:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
	if (!tx->next) {
   39902:	b1bb      	cbz	r3, 39934 <reject_ext_ind_send+0xa8>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   39904:	2301      	movs	r3, #1
   39906:	7133      	strb	r3, [r6, #4]
		*err = 0U;
   39908:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
   3990a:	e8bd 81e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, pc}
		if (!conn->tx_ctrl) {
   3990e:	b151      	cbz	r1, 39926 <reject_ext_ind_send+0x9a>
	tx->next = conn->tx_ctrl_last->next;
   39910:	f8d5 31dc 	ldr.w	r3, [r5, #476]	; 0x1dc
   39914:	681a      	ldr	r2, [r3, #0]
   39916:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   39918:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3991a:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   3991c:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
	if (!tx->next) {
   39920:	2b00      	cmp	r3, #0
   39922:	d1ef      	bne.n	39904 <reject_ext_ind_send+0x78>
   39924:	e006      	b.n	39934 <reject_ext_ind_send+0xa8>
			tx->next = conn->tx_head;
   39926:	6001      	str	r1, [r0, #0]
			conn->tx_head = tx;
   39928:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
   3992c:	f8c5 01d8 	str.w	r0, [r5, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   39930:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
		conn->tx_data_last = tx;
   39934:	f8c5 01e4 	str.w	r0, [r5, #484]	; 0x1e4
   39938:	e7e4      	b.n	39904 <reject_ext_ind_send+0x78>
		if (!conn->tx_ctrl) {
   3993a:	2900      	cmp	r1, #0
   3993c:	d1e8      	bne.n	39910 <reject_ext_ind_send+0x84>
			tx->next = conn->tx_head;
   3993e:	6002      	str	r2, [r0, #0]
			conn->tx_head = tx;
   39940:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
   39944:	f8c5 01d8 	str.w	r0, [r5, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   39948:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
	if (!tx->next) {
   3994c:	e7da      	b.n	39904 <reject_ext_ind_send+0x78>
		*err = -ENOBUFS;
   3994e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   39952:	e7da      	b.n	3990a <reject_ext_ind_send+0x7e>
			conn->tx_data = conn->tx_data->next;
   39954:	6813      	ldr	r3, [r2, #0]
   39956:	f8c5 31e0 	str.w	r3, [r5, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3995a:	2900      	cmp	r1, #0
   3995c:	d1c9      	bne.n	398f2 <reject_ext_ind_send+0x66>
			tx->next = conn->tx_head->next;
   3995e:	6813      	ldr	r3, [r2, #0]
   39960:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   39962:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   39964:	e9c5 0076 	strd	r0, r0, [r5, #472]	; 0x1d8
	if (!tx->next) {
   39968:	6803      	ldr	r3, [r0, #0]
   3996a:	2b00      	cmp	r3, #0
   3996c:	d1ca      	bne.n	39904 <reject_ext_ind_send+0x78>
   3996e:	e7e1      	b.n	39934 <reject_ext_ind_send+0xa8>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39970:	7913      	ldrb	r3, [r2, #4]
   39972:	f003 0303 	and.w	r3, r3, #3
   39976:	2b03      	cmp	r3, #3
   39978:	d002      	beq.n	39980 <reject_ext_ind_send+0xf4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3997a:	f8c5 21d8 	str.w	r2, [r5, #472]	; 0x1d8
   3997e:	e7ba      	b.n	398f6 <reject_ext_ind_send+0x6a>
	    ((pdu_data_tx->llctrl.opcode !=
   39980:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39982:	2b03      	cmp	r3, #3
   39984:	d0eb      	beq.n	3995e <reject_ext_ind_send+0xd2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   39986:	2b0a      	cmp	r3, #10
   39988:	d1f7      	bne.n	3997a <reject_ext_ind_send+0xee>
   3998a:	e7e8      	b.n	3995e <reject_ext_ind_send+0xd2>
   3998c:	200059a0 	.word	0x200059a0

00039990 <event_len_prep>:
{
   39990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   39992:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
   39996:	f003 0207 	and.w	r2, r3, #7
{
   3999a:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
   3999c:	2a06      	cmp	r2, #6
   3999e:	f200 80e0 	bhi.w	39b62 <event_len_prep+0x1d2>
   399a2:	e8df f002 	tbb	[pc, r2]
   399a6:	4504      	.short	0x4504
   399a8:	46464545 	.word	0x46464545
   399ac:	45          	.byte	0x45
   399ad:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   399ae:	4874      	ldr	r0, [pc, #464]	; (39b80 <event_len_prep+0x1f0>)
   399b0:	f7fa fa3a 	bl	33e28 <mem_acquire>
		if (!tx) {
   399b4:	2800      	cmp	r0, #0
   399b6:	d03b      	beq.n	39a30 <event_len_prep+0xa0>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   399b8:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   399bc:	f8b4 21c2 	ldrh.w	r2, [r4, #450]	; 0x1c2
		conn->default_tx_time = conn->llcp_length.tx_time;
   399c0:	f8b4 51c6 	ldrh.w	r5, [r4, #454]	; 0x1c6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   399c4:	f8a4 20d2 	strh.w	r2, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   399c8:	2301      	movs	r3, #1
   399ca:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   399ce:	f8a4 50d4 	strh.w	r5, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   399d2:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   399d6:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   399d8:	2309      	movs	r3, #9
   399da:	7143      	strb	r3, [r0, #5]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   399dc:	4969      	ldr	r1, [pc, #420]	; (39b84 <event_len_prep+0x1f4>)
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   399de:	8182      	strh	r2, [r0, #12]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   399e0:	2314      	movs	r3, #20
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   399e2:	2248      	movs	r2, #72	; 0x48
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   399e4:	6081      	str	r1, [r0, #8]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   399e6:	7382      	strb	r2, [r0, #14]
		if (!conn->tx_ctrl) {
   399e8:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
	    conn->tx_head &&
   399ec:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   399f0:	71c3      	strb	r3, [r0, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   399f2:	7903      	ldrb	r3, [r0, #4]
   399f4:	f043 0303 	orr.w	r3, r3, #3
   399f8:	7103      	strb	r3, [r0, #4]
	if (
   399fa:	2a00      	cmp	r2, #0
   399fc:	d06b      	beq.n	39ad6 <event_len_prep+0x146>
	    !conn->llcp_enc.pause_tx &&
   399fe:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
	    conn->tx_head &&
   39a02:	079d      	lsls	r5, r3, #30
   39a04:	d403      	bmi.n	39a0e <event_len_prep+0x7e>
	    !conn->llcp_phy.pause_tx &&
   39a06:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   39a0a:	07db      	lsls	r3, r3, #31
   39a0c:	d57b      	bpl.n	39b06 <event_len_prep+0x176>
		if (!conn->tx_ctrl) {
   39a0e:	2900      	cmp	r1, #0
   39a10:	f000 8087 	beq.w	39b22 <event_len_prep+0x192>
	tx->next = conn->tx_ctrl_last->next;
   39a14:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   39a18:	681a      	ldr	r2, [r3, #0]
   39a1a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   39a1c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   39a1e:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   39a20:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   39a24:	2b00      	cmp	r3, #0
   39a26:	d05d      	beq.n	39ae4 <event_len_prep+0x154>
		conn->procedure_expire = conn->procedure_reload;
   39a28:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   39a2c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
   39a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   39a32:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   39a36:	f8b0 c1c0 	ldrh.w	ip, [r0, #448]	; 0x1c0
		lll->max_rx_time = conn->llcp_length.rx_time;
   39a3a:	f8b0 11c4 	ldrh.w	r1, [r0, #452]	; 0x1c4
		tx_octets = conn->llcp_length.tx_octets;
   39a3e:	f8b0 71c2 	ldrh.w	r7, [r0, #450]	; 0x1c2
		uint16_t tx_time = conn->llcp_length.tx_time;
   39a42:	f8b0 61c6 	ldrh.w	r6, [r0, #454]	; 0x1c6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   39a46:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   39a4a:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   39a4c:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   39a50:	d024      	beq.n	39a9c <event_len_prep+0x10c>
			conn->llcp_length.state =
   39a52:	2206      	movs	r2, #6
   39a54:	f362 0302 	bfi	r3, r2, #0, #3
   39a58:	f880 31be 	strb.w	r3, [r0, #446]	; 0x1be
		rx = conn->llcp_rx;
   39a5c:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
		LL_ASSERT(rx && rx->hdr.link);
   39a60:	b335      	cbz	r5, 39ab0 <event_len_prep+0x120>
   39a62:	6828      	ldr	r0, [r5, #0]
   39a64:	b320      	cbz	r0, 39ab0 <event_len_prep+0x120>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   39a66:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   39a68:	6842      	ldr	r2, [r0, #4]
   39a6a:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   39a6e:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   39a72:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   39a74:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   39a76:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   39a78:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   39a7a:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   39a7c:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   39a7e:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   39a80:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   39a82:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   39a86:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   39a88:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   39a8a:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   39a8c:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   39a8e:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   39a90:	f7fe f844 	bl	37b1c <ll_rx_put>
}
   39a94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   39a98:	f7fe b84a 	b.w	37b30 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   39a9c:	f8b0 21c8 	ldrh.w	r2, [r0, #456]	; 0x1c8
   39aa0:	bb1a      	cbnz	r2, 39aea <event_len_prep+0x15a>
				conn->llcp_length.ack = conn->llcp_length.req;
   39aa2:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
				conn->procedure_expire = 0U;
   39aa6:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
				conn->llcp_length.ack = conn->llcp_length.req;
   39aaa:	f880 31bd 	strb.w	r3, [r0, #445]	; 0x1bd
				conn->procedure_expire = 0U;
   39aae:	e7d5      	b.n	39a5c <event_len_prep+0xcc>
		LL_ASSERT(rx && rx->hdr.link);
   39ab0:	4a35      	ldr	r2, [pc, #212]	; (39b88 <event_len_prep+0x1f8>)
   39ab2:	4936      	ldr	r1, [pc, #216]	; (39b8c <event_len_prep+0x1fc>)
   39ab4:	4836      	ldr	r0, [pc, #216]	; (39b90 <event_len_prep+0x200>)
   39ab6:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
   39aba:	f00f ff9e 	bl	499fa <printk>
   39abe:	4040      	eors	r0, r0
   39ac0:	f380 8811 	msr	BASEPRI, r0
   39ac4:	f04f 0003 	mov.w	r0, #3
   39ac8:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   39aca:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   39acc:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   39ad0:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   39ad4:	e7c7      	b.n	39a66 <event_len_prep+0xd6>
		if (!conn->tx_ctrl) {
   39ad6:	2900      	cmp	r1, #0
   39ad8:	d19c      	bne.n	39a14 <event_len_prep+0x84>
			tx->next = conn->tx_head;
   39ada:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
   39adc:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   39ae0:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
		conn->tx_data_last = tx;
   39ae4:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   39ae8:	e79e      	b.n	39a28 <event_len_prep+0x98>
				conn->llcp_length.tx_octets =
   39aea:	f8a0 21c2 	strh.w	r2, [r0, #450]	; 0x1c2
				conn->llcp_length.cache.tx_octets = 0;
   39aee:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   39af0:	f362 0302 	bfi	r3, r2, #0, #3
   39af4:	f880 31be 	strb.w	r3, [r0, #446]	; 0x1be
				conn->llcp_length.tx_time =
   39af8:	f8b0 31ca 	ldrh.w	r3, [r0, #458]	; 0x1ca
				conn->llcp_length.cache.tx_octets = 0;
   39afc:	f8a0 21c8 	strh.w	r2, [r0, #456]	; 0x1c8
				conn->llcp_length.tx_time =
   39b00:	f8a0 31c6 	strh.w	r3, [r0, #454]	; 0x1c6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   39b04:	e7aa      	b.n	39a5c <event_len_prep+0xcc>
		if (conn->tx_head == conn->tx_data) {
   39b06:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
   39b0a:	429a      	cmp	r2, r3
   39b0c:	d00f      	beq.n	39b2e <event_len_prep+0x19e>
		} else if (!conn->tx_ctrl) {
   39b0e:	b1d1      	cbz	r1, 39b46 <event_len_prep+0x1b6>
	tx->next = conn->tx_ctrl_last->next;
   39b10:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   39b14:	6813      	ldr	r3, [r2, #0]
   39b16:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   39b18:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   39b1a:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   39b1c:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
}
   39b20:	e780      	b.n	39a24 <event_len_prep+0x94>
			tx->next = conn->tx_head;
   39b22:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   39b24:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   39b28:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   39b2c:	e77c      	b.n	39a28 <event_len_prep+0x98>
			conn->tx_data = conn->tx_data->next;
   39b2e:	6813      	ldr	r3, [r2, #0]
   39b30:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   39b34:	2900      	cmp	r1, #0
   39b36:	d1eb      	bne.n	39b10 <event_len_prep+0x180>
			tx->next = conn->tx_head->next;
   39b38:	6813      	ldr	r3, [r2, #0]
   39b3a:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   39b3c:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   39b3e:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   39b40:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
   39b44:	e76e      	b.n	39a24 <event_len_prep+0x94>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39b46:	7913      	ldrb	r3, [r2, #4]
   39b48:	f003 0303 	and.w	r3, r3, #3
   39b4c:	2b03      	cmp	r3, #3
   39b4e:	d002      	beq.n	39b56 <event_len_prep+0x1c6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   39b50:	f8c4 21d8 	str.w	r2, [r4, #472]	; 0x1d8
   39b54:	e7de      	b.n	39b14 <event_len_prep+0x184>
	    ((pdu_data_tx->llctrl.opcode !=
   39b56:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39b58:	2b03      	cmp	r3, #3
   39b5a:	d0ed      	beq.n	39b38 <event_len_prep+0x1a8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   39b5c:	2b0a      	cmp	r3, #10
   39b5e:	d1f7      	bne.n	39b50 <event_len_prep+0x1c0>
   39b60:	e7ea      	b.n	39b38 <event_len_prep+0x1a8>
		LL_ASSERT(0);
   39b62:	4a09      	ldr	r2, [pc, #36]	; (39b88 <event_len_prep+0x1f8>)
   39b64:	490b      	ldr	r1, [pc, #44]	; (39b94 <event_len_prep+0x204>)
   39b66:	480a      	ldr	r0, [pc, #40]	; (39b90 <event_len_prep+0x200>)
   39b68:	f241 03ea 	movw	r3, #4330	; 0x10ea
   39b6c:	f00f ff45 	bl	499fa <printk>
   39b70:	4040      	eors	r0, r0
   39b72:	f380 8811 	msr	BASEPRI, r0
   39b76:	f04f 0003 	mov.w	r0, #3
   39b7a:	df02      	svc	2
}
   39b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   39b7e:	bf00      	nop
   39b80:	200059a0 	.word	0x200059a0
   39b84:	0148001b 	.word	0x0148001b
   39b88:	00052f80 	.word	0x00052f80
   39b8c:	0005304c 	.word	0x0005304c
   39b90:	00052a70 	.word	0x00052a70
   39b94:	00052ad0 	.word	0x00052ad0

00039b98 <event_phy_upd_ind_prep>:
{
   39b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   39b9c:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
   39ba0:	f013 0601 	ands.w	r6, r3, #1
{
   39ba4:	4604      	mov	r4, r0
   39ba6:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   39ba8:	f040 8098 	bne.w	39cdc <event_phy_upd_ind_prep+0x144>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   39bac:	f8b0 10f6 	ldrh.w	r1, [r0, #246]	; 0xf6
   39bb0:	1a69      	subs	r1, r5, r1
   39bb2:	0409      	lsls	r1, r1, #16
   39bb4:	f100 8099 	bmi.w	39cea <event_phy_upd_ind_prep+0x152>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   39bb8:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   39bbc:	2900      	cmp	r1, #0
   39bbe:	f2c0 8134 	blt.w	39e2a <event_phy_upd_ind_prep+0x292>
		rx = conn->llcp_rx;
   39bc2:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
   39bc6:	461a      	mov	r2, r3
			conn->llcp_ack = conn->llcp_req;
   39bc8:	f894 10f0 	ldrb.w	r1, [r4, #240]	; 0xf0
   39bcc:	f884 10f1 	strb.w	r1, [r4, #241]	; 0xf1
		old_tx = lll->phy_tx;
   39bd0:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   39bd4:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_tx_time = lll->max_tx_time;
   39bd8:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		uint16_t eff_rx_time = lll->max_rx_time;
   39bdc:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   39be0:	f013 0f1c 	tst.w	r3, #28
		old_rx = lll->phy_rx;
   39be4:	f008 0807 	and.w	r8, r8, #7
		old_tx = lll->phy_tx;
   39be8:	f001 0907 	and.w	r9, r1, #7
		if (conn->llcp.phy_upd_ind.tx) {
   39bec:	d007      	beq.n	39bfe <event_phy_upd_ind_prep+0x66>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   39bee:	f3c3 0082 	ubfx	r0, r3, #2, #3
   39bf2:	f360 0102 	bfi	r1, r0, #0, #3
   39bf6:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   39bfa:	f44f 76a4 	mov.w	r6, #328	; 0x148
		if (conn->llcp.phy_upd_ind.rx) {
   39bfe:	2b1f      	cmp	r3, #31
   39c00:	d875      	bhi.n	39cee <event_phy_upd_ind_prep+0x156>
		LL_ASSERT(rx && rx->hdr.link);
   39c02:	2d00      	cmp	r5, #0
   39c04:	f000 80f1 	beq.w	39dea <event_phy_upd_ind_prep+0x252>
   39c08:	6828      	ldr	r0, [r5, #0]
   39c0a:	2800      	cmp	r0, #0
   39c0c:	f000 80ed 	beq.w	39dea <event_phy_upd_ind_prep+0x252>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   39c10:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		    (lll->phy_rx == old_rx)) {
   39c14:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
		conn->llcp_rx = rx->hdr.link->mem;
   39c18:	f8d0 c004 	ldr.w	ip, [r0, #4]
   39c1c:	f8c4 c114 	str.w	ip, [r4, #276]	; 0x114
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   39c20:	0792      	lsls	r2, r2, #30
   39c22:	f3c3 0c02 	ubfx	ip, r3, #0, #3
		    (lll->phy_rx == old_rx)) {
   39c26:	f3c1 0e02 	ubfx	lr, r1, #0, #3
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   39c2a:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
   39c2e:	f001 0107 	and.w	r1, r1, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   39c32:	d402      	bmi.n	39c3a <event_phy_upd_ind_prep+0xa2>
   39c34:	4599      	cmp	r9, r3
   39c36:	f000 80bb 	beq.w	39db0 <event_phy_upd_ind_prep+0x218>
		rx->hdr.handle = lll->handle;
   39c3a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   39c3c:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   39c3e:	231c      	movs	r3, #28
   39c40:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   39c42:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
   39c44:	f885 c01d 	strb.w	ip, [r5, #29]
		upd->rx = lll->phy_rx;
   39c48:	f885 e01e 	strb.w	lr, [r5, #30]
		upd->status = 0U;
   39c4c:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   39c4e:	4629      	mov	r1, r5
   39c50:	f7fd ff64 	bl	37b1c <ll_rx_put>
		rx = conn->llcp_rx;
   39c54:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
		LL_ASSERT(rx && rx->hdr.link);
   39c58:	2d00      	cmp	r5, #0
   39c5a:	f000 80d7 	beq.w	39e0c <event_phy_upd_ind_prep+0x274>
   39c5e:	6828      	ldr	r0, [r5, #0]
   39c60:	2800      	cmp	r0, #0
   39c62:	f000 80d3 	beq.w	39e0c <event_phy_upd_ind_prep+0x274>
		if ((eff_tx_time <= lll->max_tx_time) &&
   39c66:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   39c6a:	6842      	ldr	r2, [r0, #4]
   39c6c:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
		if ((eff_tx_time <= lll->max_tx_time) &&
   39c70:	42b3      	cmp	r3, r6
   39c72:	d30a      	bcc.n	39c8a <event_phy_upd_ind_prep+0xf2>
   39c74:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   39c78:	d807      	bhi.n	39c8a <event_phy_upd_ind_prep+0xf2>
		    (eff_rx_time <= lll->max_rx_time) &&
   39c7a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   39c7e:	42bb      	cmp	r3, r7
   39c80:	d303      	bcc.n	39c8a <event_phy_upd_ind_prep+0xf2>
		    (eff_rx_time <= lll->max_rx_time) &&
   39c82:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   39c86:	f240 810a 	bls.w	39e9e <event_phy_upd_ind_prep+0x306>
		lll->max_tx_time = eff_tx_time;
   39c8a:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   39c8e:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   39c92:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   39c94:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   39c96:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   39c98:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   39c9c:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   39ca0:	2109      	movs	r1, #9
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   39ca2:	772b      	strb	r3, [r5, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   39ca4:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   39ca8:	7769      	strb	r1, [r5, #29]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   39caa:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
   39cae:	f8b4 4058 	ldrh.w	r4, [r4, #88]	; 0x58
   39cb2:	2300      	movs	r3, #0
   39cb4:	461a      	mov	r2, r3
   39cb6:	f361 030f 	bfi	r3, r1, #0, #16
   39cba:	f367 431f 	bfi	r3, r7, #16, #16
   39cbe:	f364 020f 	bfi	r2, r4, #0, #16
   39cc2:	f366 421f 	bfi	r2, r6, #16, #16
   39cc6:	622b      	str	r3, [r5, #32]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   39cc8:	2315      	movs	r3, #21
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   39cca:	626a      	str	r2, [r5, #36]	; 0x24
		ll_rx_put(rx->hdr.link, rx);
   39ccc:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   39cce:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   39cd0:	f7fd ff24 	bl	37b1c <ll_rx_put>
}
   39cd4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   39cd8:	f7fd bf2a 	b.w	37b30 <ll_rx_sched>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
   39cdc:	e9d0 0119 	ldrd	r0, r1, [r0, #100]	; 0x64
   39ce0:	2200      	movs	r2, #0
   39ce2:	f7fa f90f 	bl	33f04 <memq_peek>
   39ce6:	4606      	mov	r6, r0
   39ce8:	b158      	cbz	r0, 39d02 <event_phy_upd_ind_prep+0x16a>
}
   39cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   39cee:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
   39cf2:	095b      	lsrs	r3, r3, #5
   39cf4:	f363 0102 	bfi	r1, r3, #0, #3
   39cf8:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   39cfc:	f44f 77a4 	mov.w	r7, #328	; 0x148
   39d00:	e77f      	b.n	39c02 <event_phy_upd_ind_prep+0x6a>
		rx = ll_pdu_rx_alloc_peek(2);
   39d02:	2002      	movs	r0, #2
   39d04:	f7fd ff1a 	bl	37b3c <ll_pdu_rx_alloc_peek>
		if (!rx) {
   39d08:	4680      	mov	r8, r0
   39d0a:	2800      	cmp	r0, #0
   39d0c:	d0ed      	beq.n	39cea <event_phy_upd_ind_prep+0x152>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   39d0e:	489b      	ldr	r0, [pc, #620]	; (39f7c <event_phy_upd_ind_prep+0x3e4>)
   39d10:	f7fa f88a 	bl	33e28 <mem_acquire>
		if (!tx) {
   39d14:	4607      	mov	r7, r0
   39d16:	2800      	cmp	r0, #0
   39d18:	d0e7      	beq.n	39cea <event_phy_upd_ind_prep+0x152>
		conn->llcp.phy_upd_ind.initiate = 0U;
   39d1a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   39d1e:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   39d22:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   39d26:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
   39d2a:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   39d2e:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
		if (!((conn->llcp.phy_upd_ind.tx |
   39d32:	b2db      	uxtb	r3, r3
   39d34:	f040 8095 	bne.w	39e62 <event_phy_upd_ind_prep+0x2ca>
			conn->llcp_ack = conn->llcp_req;
   39d38:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
			conn->llcp.phy_upd_ind.instant = 0U;
   39d3c:	f8a4 60f6 	strh.w	r6, [r4, #246]	; 0xf6
			if (conn->llcp.phy_upd_ind.cmd) {
   39d40:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   39d42:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			if (conn->llcp.phy_upd_ind.cmd) {
   39d46:	f100 80c9 	bmi.w	39edc <event_phy_upd_ind_prep+0x344>
   39d4a:	4633      	mov	r3, r6
   39d4c:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   39d4e:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
   39d50:	2305      	movs	r3, #5
   39d52:	717b      	strb	r3, [r7, #5]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   39d54:	723e      	strb	r6, [r7, #8]
		pdu_ctrl_tx->llctrl.opcode =
   39d56:	2318      	movs	r3, #24
		if (!conn->tx_ctrl) {
   39d58:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   39d5c:	817a      	strh	r2, [r7, #10]
	    conn->tx_head &&
   39d5e:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
		pdu_ctrl_tx->llctrl.opcode =
   39d62:	71fb      	strb	r3, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   39d64:	793b      	ldrb	r3, [r7, #4]
   39d66:	f043 0303 	orr.w	r3, r3, #3
   39d6a:	713b      	strb	r3, [r7, #4]
	if (
   39d6c:	2a00      	cmp	r2, #0
   39d6e:	f000 80aa 	beq.w	39ec6 <event_phy_upd_ind_prep+0x32e>
	    !conn->llcp_enc.pause_tx &&
   39d72:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
	    conn->tx_head &&
   39d76:	079d      	lsls	r5, r3, #30
   39d78:	f100 809a 	bmi.w	39eb0 <event_phy_upd_ind_prep+0x318>
	    !conn->llcp_phy.pause_tx &&
   39d7c:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   39d80:	07d8      	lsls	r0, r3, #31
   39d82:	f100 8095 	bmi.w	39eb0 <event_phy_upd_ind_prep+0x318>
		if (conn->tx_head == conn->tx_data) {
   39d86:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
   39d8a:	429a      	cmp	r2, r3
   39d8c:	f000 80da 	beq.w	39f44 <event_phy_upd_ind_prep+0x3ac>
		} else if (!conn->tx_ctrl) {
   39d90:	2900      	cmp	r1, #0
   39d92:	f000 80e4 	beq.w	39f5e <event_phy_upd_ind_prep+0x3c6>
	tx->next = conn->tx_ctrl_last->next;
   39d96:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   39d9a:	681a      	ldr	r2, [r3, #0]
   39d9c:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   39d9e:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   39da0:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   39da2:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
	if (!tx->next) {
   39da6:	2b00      	cmp	r3, #0
   39da8:	d19f      	bne.n	39cea <event_phy_upd_ind_prep+0x152>
		conn->tx_data_last = tx;
   39daa:	f8c4 71e4 	str.w	r7, [r4, #484]	; 0x1e4
   39dae:	e79c      	b.n	39cea <event_phy_upd_ind_prep+0x152>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   39db0:	4588      	cmp	r8, r1
   39db2:	f47f af42 	bne.w	39c3a <event_phy_upd_ind_prep+0xa2>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   39db6:	2301      	movs	r3, #1
   39db8:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   39dba:	4629      	mov	r1, r5
   39dbc:	f7fd feae 	bl	37b1c <ll_rx_put>
				rx = conn->llcp_rx;
   39dc0:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
				LL_ASSERT(rx && rx->hdr.link);
   39dc4:	2d00      	cmp	r5, #0
   39dc6:	f000 80ae 	beq.w	39f26 <event_phy_upd_ind_prep+0x38e>
   39dca:	6828      	ldr	r0, [r5, #0]
   39dcc:	2800      	cmp	r0, #0
   39dce:	f000 80aa 	beq.w	39f26 <event_phy_upd_ind_prep+0x38e>
				conn->llcp_rx = rx->hdr.link->mem;
   39dd2:	6842      	ldr	r2, [r0, #4]
   39dd4:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   39dd8:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
   39dda:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   39ddc:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
   39dde:	f7fd fe9d 	bl	37b1c <ll_rx_put>
}
   39de2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   39de6:	f7fd bea3 	b.w	37b30 <ll_rx_sched>
		LL_ASSERT(rx && rx->hdr.link);
   39dea:	4a65      	ldr	r2, [pc, #404]	; (39f80 <event_phy_upd_ind_prep+0x3e8>)
   39dec:	4965      	ldr	r1, [pc, #404]	; (39f84 <event_phy_upd_ind_prep+0x3ec>)
   39dee:	4866      	ldr	r0, [pc, #408]	; (39f88 <event_phy_upd_ind_prep+0x3f0>)
   39df0:	f241 231a 	movw	r3, #4634	; 0x121a
   39df4:	f00f fe01 	bl	499fa <printk>
   39df8:	4040      	eors	r0, r0
   39dfa:	f380 8811 	msr	BASEPRI, r0
   39dfe:	f04f 0003 	mov.w	r0, #3
   39e02:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   39e04:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   39e06:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   39e0a:	e701      	b.n	39c10 <event_phy_upd_ind_prep+0x78>
		LL_ASSERT(rx && rx->hdr.link);
   39e0c:	4a5c      	ldr	r2, [pc, #368]	; (39f80 <event_phy_upd_ind_prep+0x3e8>)
   39e0e:	495d      	ldr	r1, [pc, #372]	; (39f84 <event_phy_upd_ind_prep+0x3ec>)
   39e10:	485d      	ldr	r0, [pc, #372]	; (39f88 <event_phy_upd_ind_prep+0x3f0>)
   39e12:	f241 2349 	movw	r3, #4681	; 0x1249
   39e16:	f00f fdf0 	bl	499fa <printk>
   39e1a:	4040      	eors	r0, r0
   39e1c:	f380 8811 	msr	BASEPRI, r0
   39e20:	f04f 0003 	mov.w	r0, #3
   39e24:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   39e26:	6828      	ldr	r0, [r5, #0]
   39e28:	e71d      	b.n	39c66 <event_phy_upd_ind_prep+0xce>
			rx = ll_pdu_rx_alloc();
   39e2a:	f7fd fea7 	bl	37b7c <ll_pdu_rx_alloc>
			if (!rx) {
   39e2e:	4605      	mov	r5, r0
   39e30:	2800      	cmp	r0, #0
   39e32:	f43f af5a 	beq.w	39cea <event_phy_upd_ind_prep+0x152>
			rx->hdr.link->mem = conn->llcp_rx;
   39e36:	6803      	ldr	r3, [r0, #0]
   39e38:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   39e3c:	605a      	str	r2, [r3, #4]
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   39e3e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
			conn->llcp_rx = rx;
   39e42:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   39e46:	2b00      	cmp	r3, #0
		if (conn->llcp.phy_upd_ind.tx) {
   39e48:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   39e4c:	461a      	mov	r2, r3
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   39e4e:	f6bf aebb 	bge.w	39bc8 <event_phy_upd_ind_prep+0x30>
   39e52:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   39e56:	2900      	cmp	r1, #0
   39e58:	f43f aeb6 	beq.w	39bc8 <event_phy_upd_ind_prep+0x30>
			conn->periph.llcp_type = LLCP_NONE;
   39e5c:	f884 60e5 	strb.w	r6, [r4, #229]	; 0xe5
   39e60:	e6b6      	b.n	39bd0 <event_phy_upd_ind_prep+0x38>
							 lll->latency +
   39e62:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   39e64:	1da9      	adds	r1, r5, #6
   39e66:	4419      	add	r1, r3
			conn->llcp.phy_upd_ind.instant = event_counter +
   39e68:	f8a4 10f6 	strh.w	r1, [r4, #246]	; 0xf6
			(void)ll_pdu_rx_alloc();
   39e6c:	f7fd fe86 	bl	37b7c <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   39e70:	f8d8 3000 	ldr.w	r3, [r8]
   39e74:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   39e78:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   39e7a:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
				rx = ll_pdu_rx_alloc();
   39e7e:	f7fd fe7d 	bl	37b7c <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
   39e82:	6803      	ldr	r3, [r0, #0]
   39e84:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   39e88:	605a      	str	r2, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   39e8a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   39e8e:	f8b4 20f6 	ldrh.w	r2, [r4, #246]	; 0xf6
				conn->llcp_rx = rx;
   39e92:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   39e96:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   39e9a:	095b      	lsrs	r3, r3, #5
   39e9c:	e757      	b.n	39d4e <event_phy_upd_ind_prep+0x1b6>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   39e9e:	2301      	movs	r3, #1
   39ea0:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   39ea2:	4629      	mov	r1, r5
   39ea4:	f7fd fe3a 	bl	37b1c <ll_rx_put>
}
   39ea8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   39eac:	f7fd be40 	b.w	37b30 <ll_rx_sched>
		if (!conn->tx_ctrl) {
   39eb0:	2900      	cmp	r1, #0
   39eb2:	f47f af70 	bne.w	39d96 <event_phy_upd_ind_prep+0x1fe>
			tx->next = conn->tx_head;
   39eb6:	603a      	str	r2, [r7, #0]
			conn->tx_head = tx;
   39eb8:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   39ebc:	f8c4 71d8 	str.w	r7, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   39ec0:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
	if (!tx->next) {
   39ec4:	e711      	b.n	39cea <event_phy_upd_ind_prep+0x152>
		if (!conn->tx_ctrl) {
   39ec6:	2900      	cmp	r1, #0
   39ec8:	f47f af65 	bne.w	39d96 <event_phy_upd_ind_prep+0x1fe>
			tx->next = conn->tx_head;
   39ecc:	6039      	str	r1, [r7, #0]
			conn->tx_head = tx;
   39ece:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   39ed2:	f8c4 71d8 	str.w	r7, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   39ed6:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
	if (!tx->next) {
   39eda:	e766      	b.n	39daa <event_phy_upd_ind_prep+0x212>
				(void)ll_pdu_rx_alloc();
   39edc:	f7fd fe4e 	bl	37b7c <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   39ee0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   39ee2:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   39ee6:	231c      	movs	r3, #28
				upd->status = 0U;
   39ee8:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   39eec:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
   39ef0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
   39ef4:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   39ef8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   39efc:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   39f00:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   39f04:	f3c3 0302 	ubfx	r3, r3, #0, #3
   39f08:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   39f0c:	4641      	mov	r1, r8
   39f0e:	f7fd fe05 	bl	37b1c <ll_rx_put>
				ll_rx_sched();
   39f12:	f7fd fe0d 	bl	37b30 <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   39f16:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   39f1a:	f8b4 20f6 	ldrh.w	r2, [r4, #246]	; 0xf6
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   39f1e:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   39f22:	095b      	lsrs	r3, r3, #5
   39f24:	e713      	b.n	39d4e <event_phy_upd_ind_prep+0x1b6>
				LL_ASSERT(rx && rx->hdr.link);
   39f26:	4a16      	ldr	r2, [pc, #88]	; (39f80 <event_phy_upd_ind_prep+0x3e8>)
   39f28:	4916      	ldr	r1, [pc, #88]	; (39f84 <event_phy_upd_ind_prep+0x3ec>)
   39f2a:	4817      	ldr	r0, [pc, #92]	; (39f88 <event_phy_upd_ind_prep+0x3f0>)
   39f2c:	f241 232c 	movw	r3, #4652	; 0x122c
   39f30:	f00f fd63 	bl	499fa <printk>
   39f34:	4040      	eors	r0, r0
   39f36:	f380 8811 	msr	BASEPRI, r0
   39f3a:	f04f 0003 	mov.w	r0, #3
   39f3e:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   39f40:	6828      	ldr	r0, [r5, #0]
   39f42:	e746      	b.n	39dd2 <event_phy_upd_ind_prep+0x23a>
			conn->tx_data = conn->tx_data->next;
   39f44:	6813      	ldr	r3, [r2, #0]
   39f46:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   39f4a:	2900      	cmp	r1, #0
   39f4c:	f47f af23 	bne.w	39d96 <event_phy_upd_ind_prep+0x1fe>
			tx->next = conn->tx_head->next;
   39f50:	6813      	ldr	r3, [r2, #0]
   39f52:	603b      	str	r3, [r7, #0]
			conn->tx_head->next = tx;
   39f54:	6017      	str	r7, [r2, #0]
				conn->tx_ctrl = tx;
   39f56:	e9c4 7776 	strd	r7, r7, [r4, #472]	; 0x1d8
	if (!tx->next) {
   39f5a:	683b      	ldr	r3, [r7, #0]
   39f5c:	e723      	b.n	39da6 <event_phy_upd_ind_prep+0x20e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39f5e:	7913      	ldrb	r3, [r2, #4]
   39f60:	f003 0303 	and.w	r3, r3, #3
   39f64:	2b03      	cmp	r3, #3
   39f66:	d002      	beq.n	39f6e <event_phy_upd_ind_prep+0x3d6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   39f68:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   39f6c:	e713      	b.n	39d96 <event_phy_upd_ind_prep+0x1fe>
	    ((pdu_data_tx->llctrl.opcode !=
   39f6e:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39f70:	2b03      	cmp	r3, #3
   39f72:	d0ed      	beq.n	39f50 <event_phy_upd_ind_prep+0x3b8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   39f74:	2b0a      	cmp	r3, #10
   39f76:	d1f7      	bne.n	39f68 <event_phy_upd_ind_prep+0x3d0>
   39f78:	e7ea      	b.n	39f50 <event_phy_upd_ind_prep+0x3b8>
   39f7a:	bf00      	nop
   39f7c:	200059a0 	.word	0x200059a0
   39f80:	00052f80 	.word	0x00052f80
   39f84:	0005304c 	.word	0x0005304c
   39f88:	00052a70 	.word	0x00052a70

00039f8c <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   39f8c:	4801      	ldr	r0, [pc, #4]	; (39f94 <ll_conn_acquire+0x8>)
   39f8e:	f7f9 bf4b 	b.w	33e28 <mem_acquire>
   39f92:	bf00      	nop
   39f94:	200058c0 	.word	0x200058c0

00039f98 <ll_conn_release>:
	mem_release(conn, &conn_free);
   39f98:	4901      	ldr	r1, [pc, #4]	; (39fa0 <ll_conn_release+0x8>)
   39f9a:	f7f9 bf5f 	b.w	33e5c <mem_release>
   39f9e:	bf00      	nop
   39fa0:	200058c0 	.word	0x200058c0

00039fa4 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   39fa4:	4902      	ldr	r1, [pc, #8]	; (39fb0 <ll_conn_handle_get+0xc>)
   39fa6:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   39faa:	f7f9 bf73 	b.w	33e94 <mem_index_get>
   39fae:	bf00      	nop
   39fb0:	20003360 	.word	0x20003360

00039fb4 <ll_conn_get>:
{
   39fb4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39fb6:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   39fba:	4801      	ldr	r0, [pc, #4]	; (39fc0 <ll_conn_get+0xc>)
   39fbc:	f7f9 bf66 	b.w	33e8c <mem_get>
   39fc0:	20003360 	.word	0x20003360

00039fc4 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   39fc4:	2805      	cmp	r0, #5
   39fc6:	d80d      	bhi.n	39fe4 <ll_connected_get+0x20>
{
   39fc8:	b510      	push	{r4, lr}
   39fca:	4604      	mov	r4, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39fcc:	4622      	mov	r2, r4
   39fce:	4806      	ldr	r0, [pc, #24]	; (39fe8 <ll_connected_get+0x24>)
   39fd0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   39fd4:	f7f9 ff5a 	bl	33e8c <mem_get>
	if (conn->lll.handle != handle) {
   39fd8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   39fda:	42a3      	cmp	r3, r4
   39fdc:	d100      	bne.n	39fe0 <ll_connected_get+0x1c>
}
   39fde:	bd10      	pop	{r4, pc}
		return NULL;
   39fe0:	2000      	movs	r0, #0
}
   39fe2:	bd10      	pop	{r4, pc}
		return NULL;
   39fe4:	2000      	movs	r0, #0
}
   39fe6:	4770      	bx	lr
   39fe8:	20003360 	.word	0x20003360

00039fec <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   39fec:	4801      	ldr	r0, [pc, #4]	; (39ff4 <ll_tx_mem_acquire+0x8>)
   39fee:	f7f9 bf1b 	b.w	33e28 <mem_acquire>
   39ff2:	bf00      	nop
   39ff4:	20005dc4 	.word	0x20005dc4

00039ff8 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   39ff8:	4901      	ldr	r1, [pc, #4]	; (3a000 <ll_tx_mem_release+0x8>)
   39ffa:	f7f9 bf2f 	b.w	33e5c <mem_release>
   39ffe:	bf00      	nop
   3a000:	20005dc4 	.word	0x20005dc4

0003a004 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a004:	2805      	cmp	r0, #5
   3a006:	d841      	bhi.n	3a08c <ll_tx_mem_enqueue+0x88>
{
   3a008:	b570      	push	{r4, r5, r6, lr}
   3a00a:	4604      	mov	r4, r0
   3a00c:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a00e:	4821      	ldr	r0, [pc, #132]	; (3a094 <ll_tx_mem_enqueue+0x90>)
   3a010:	4622      	mov	r2, r4
   3a012:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a016:	f7f9 ff39 	bl	33e8c <mem_get>
	if (conn->lll.handle != handle) {
   3a01a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a01c:	42a3      	cmp	r3, r4
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a01e:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   3a020:	d11e      	bne.n	3a060 <ll_tx_mem_enqueue+0x5c>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   3a022:	4a1d      	ldr	r2, [pc, #116]	; (3a098 <ll_tx_mem_enqueue+0x94>)
   3a024:	78d0      	ldrb	r0, [r2, #3]
	if (last == count) {
   3a026:	f892 c001 	ldrb.w	ip, [r2, #1]
   3a02a:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
   3a02c:	1c43      	adds	r3, r0, #1
   3a02e:	b2db      	uxtb	r3, r3
		last = 0U;
   3a030:	459c      	cmp	ip, r3
   3a032:	bf08      	it	eq
   3a034:	2300      	moveq	r3, #0
	if (last == first) {
   3a036:	4299      	cmp	r1, r3
   3a038:	d025      	beq.n	3a086 <ll_tx_mem_enqueue+0x82>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   3a03a:	4611      	mov	r1, r2
   3a03c:	f811 cb04 	ldrb.w	ip, [r1], #4
   3a040:	fb1c fc00 	smulbb	ip, ip, r0
	lll_tx->handle = handle;
   3a044:	f821 400c 	strh.w	r4, [r1, ip]
   3a048:	448c      	add	ip, r1
	lll_tx->node = tx;
   3a04a:	f8cc 6004 	str.w	r6, [ip, #4]
	*last = idx; /* Commit: Update write index */
   3a04e:	70d3      	strb	r3, [r2, #3]
   3a050:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
   3a052:	b943      	cbnz	r3, 3a066 <ll_tx_mem_enqueue+0x62>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a054:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3a058:	2b00      	cmp	r3, #0
   3a05a:	db0f      	blt.n	3a07c <ll_tx_mem_enqueue+0x78>
	return 0;
   3a05c:	2000      	movs	r0, #0
}
   3a05e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3a060:	f06f 0015 	mvn.w	r0, #21
}
   3a064:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   3a066:	4b0d      	ldr	r3, [pc, #52]	; (3a09c <ll_tx_mem_enqueue+0x98>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   3a068:	2200      	movs	r2, #0
   3a06a:	2101      	movs	r1, #1
   3a06c:	2003      	movs	r0, #3
		mfy.param = conn;
   3a06e:	609d      	str	r5, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   3a070:	f7f9 ffb4 	bl	33fdc <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a074:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3a078:	2b00      	cmp	r3, #0
   3a07a:	daef      	bge.n	3a05c <ll_tx_mem_enqueue+0x58>
		ull_periph_latency_cancel(conn, handle);
   3a07c:	4621      	mov	r1, r4
   3a07e:	4628      	mov	r0, r5
   3a080:	f004 f90c 	bl	3e29c <ull_periph_latency_cancel>
   3a084:	e7ea      	b.n	3a05c <ll_tx_mem_enqueue+0x58>
		return -ENOBUFS;
   3a086:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   3a08a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3a08c:	f06f 0015 	mvn.w	r0, #21
}
   3a090:	4770      	bx	lr
   3a092:	bf00      	nop
   3a094:	20003360 	.word	0x20003360
   3a098:	20000d38 	.word	0x20000d38
   3a09c:	20000c44 	.word	0x20000c44

0003a0a0 <ll_conn_update>:
{
   3a0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a0a4:	2805      	cmp	r0, #5
{
   3a0a6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   3a0aa:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
   3a0ae:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a0b2:	d82b      	bhi.n	3a10c <ll_conn_update+0x6c>
   3a0b4:	4682      	mov	sl, r0
   3a0b6:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a0b8:	4842      	ldr	r0, [pc, #264]	; (3a1c4 <ll_conn_update+0x124>)
   3a0ba:	4616      	mov	r6, r2
   3a0bc:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a0c0:	4652      	mov	r2, sl
   3a0c2:	461d      	mov	r5, r3
   3a0c4:	f7f9 fee2 	bl	33e8c <mem_get>
	if (conn->lll.handle != handle) {
   3a0c8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a0ca:	4553      	cmp	r3, sl
   3a0cc:	d11e      	bne.n	3a10c <ll_conn_update+0x6c>
	if (!cmd) {
   3a0ce:	b304      	cbz	r4, 3a112 <ll_conn_update+0x72>
		cmd--;
   3a0d0:	3c01      	subs	r4, #1
		if (cmd) {
   3a0d2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   3a0d6:	d024      	beq.n	3a122 <ll_conn_update+0x82>
			if ((conn->llcp_conn_param.req ==
   3a0d8:	f890 2195 	ldrb.w	r2, [r0, #405]	; 0x195
   3a0dc:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
   3a0e0:	429a      	cmp	r2, r3
   3a0e2:	d051      	beq.n	3a188 <ll_conn_update+0xe8>
			    (conn->llcp_conn_param.state !=
   3a0e4:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
			     conn->llcp_conn_param.ack) ||
   3a0e8:	f003 020f 	and.w	r2, r3, #15
   3a0ec:	2a03      	cmp	r2, #3
   3a0ee:	d14b      	bne.n	3a188 <ll_conn_update+0xe8>
			conn->llcp_conn_param.state = cmd;
   3a0f0:	f004 040f 	and.w	r4, r4, #15
   3a0f4:	f044 0410 	orr.w	r4, r4, #16
   3a0f8:	f023 031f 	bic.w	r3, r3, #31
   3a0fc:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   3a0fe:	f880 6197 	strb.w	r6, [r0, #407]	; 0x197
			conn->llcp_conn_param.state = cmd;
   3a102:	f880 4196 	strb.w	r4, [r0, #406]	; 0x196
	return 0;
   3a106:	2000      	movs	r0, #0
}
   3a108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a10c:	2002      	movs	r0, #2
}
   3a10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->llcp_conn_param.disabled &&
   3a112:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
   3a116:	0699      	lsls	r1, r3, #26
   3a118:	d42c      	bmi.n	3a174 <ll_conn_update+0xd4>
		    (!conn->common.fex_valid ||
   3a11a:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
		if (!conn->llcp_conn_param.disabled &&
   3a11e:	07da      	lsls	r2, r3, #31
   3a120:	d424      	bmi.n	3a16c <ll_conn_update+0xcc>
			if (conn->llcp_conn_param.req !=
   3a122:	f890 2194 	ldrb.w	r2, [r0, #404]	; 0x194
   3a126:	f890 3195 	ldrb.w	r3, [r0, #405]	; 0x195
   3a12a:	4293      	cmp	r3, r2
   3a12c:	d12c      	bne.n	3a188 <ll_conn_update+0xe8>
			conn->llcp_conn_param.req++;
   3a12e:	3301      	adds	r3, #1
   3a130:	f880 3194 	strb.w	r3, [r0, #404]	; 0x194
			conn->llcp_conn_param.state = cmd;
   3a134:	f8b0 3196 	ldrh.w	r3, [r0, #406]	; 0x196
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a138:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
			conn->llcp_conn_param.state = cmd;
   3a13c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   3a140:	f043 0310 	orr.w	r3, r3, #16
   3a144:	f8a0 3196 	strh.w	r3, [r0, #406]	; 0x196
			conn->llcp_conn_param.interval_min = interval_min;
   3a148:	2300      	movs	r3, #0
   3a14a:	461a      	mov	r2, r3
   3a14c:	f369 020f 	bfi	r2, r9, #0, #16
   3a150:	f365 030f 	bfi	r3, r5, #0, #16
   3a154:	f368 431f 	bfi	r3, r8, #16, #16
   3a158:	f367 421f 	bfi	r2, r7, #16, #16
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a15c:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_min = interval_min;
   3a15e:	e9c0 3266 	strd	r3, r2, [r0, #408]	; 0x198
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a162:	dad0      	bge.n	3a106 <ll_conn_update+0x66>
				ull_periph_latency_cancel(conn, handle);
   3a164:	4651      	mov	r1, sl
   3a166:	f004 f899 	bl	3e29c <ull_periph_latency_cancel>
   3a16a:	e7cc      	b.n	3a106 <ll_conn_update+0x66>
		     (conn->llcp_feature.features_conn &
   3a16c:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
		    (!conn->common.fex_valid ||
   3a170:	079b      	lsls	r3, r3, #30
   3a172:	d4d6      	bmi.n	3a122 <ll_conn_update+0x82>
		} else if (conn->lll.role) {
   3a174:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3a178:	2b00      	cmp	r3, #0
   3a17a:	db20      	blt.n	3a1be <ll_conn_update+0x11e>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   3a17c:	f890 2118 	ldrb.w	r2, [r0, #280]	; 0x118
   3a180:	f890 3119 	ldrb.w	r3, [r0, #281]	; 0x119
   3a184:	4293      	cmp	r3, r2
   3a186:	d002      	beq.n	3a18e <ll_conn_update+0xee>
			return BT_HCI_ERR_CMD_DISALLOWED;
   3a188:	200c      	movs	r0, #12
}
   3a18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3a18e:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
		conn->llcp_cu.interval = interval_max;
   3a192:	f8a0 811c 	strh.w	r8, [r0, #284]	; 0x11c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3a196:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.req++;
   3a19a:	3301      	adds	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3a19c:	f042 0209 	orr.w	r2, r2, #9
   3a1a0:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
		conn->llcp_cu.req++;
   3a1a4:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
		conn->llcp_cu.win_size = 1U;
   3a1a8:	2201      	movs	r2, #1
		conn->llcp_cu.win_offset_us = 0U;
   3a1aa:	2300      	movs	r3, #0
		conn->llcp_cu.latency = latency;
   3a1ac:	f8a0 911e 	strh.w	r9, [r0, #286]	; 0x11e
		conn->llcp_cu.timeout = timeout;
   3a1b0:	f8a0 7120 	strh.w	r7, [r0, #288]	; 0x120
		conn->llcp_cu.win_size = 1U;
   3a1b4:	f880 2128 	strb.w	r2, [r0, #296]	; 0x128
		conn->llcp_cu.win_offset_us = 0U;
   3a1b8:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
		conn->llcp_cu.req++;
   3a1bc:	e7a3      	b.n	3a106 <ll_conn_update+0x66>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   3a1be:	201a      	movs	r0, #26
   3a1c0:	e7a5      	b.n	3a10e <ll_conn_update+0x6e>
   3a1c2:	bf00      	nop
   3a1c4:	20003360 	.word	0x20003360

0003a1c8 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a1c8:	2805      	cmp	r0, #5
   3a1ca:	d81d      	bhi.n	3a208 <ll_chm_get+0x40>
{
   3a1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a1ce:	4606      	mov	r6, r0
   3a1d0:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a1d2:	480e      	ldr	r0, [pc, #56]	; (3a20c <ll_chm_get+0x44>)
   3a1d4:	4632      	mov	r2, r6
   3a1d6:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a1da:	f7f9 fe57 	bl	33e8c <mem_get>
	if (conn->lll.handle != handle) {
   3a1de:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a1e0:	42b3      	cmp	r3, r6
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a1e2:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   3a1e4:	d10e      	bne.n	3a204 <ll_chm_get+0x3c>
		memcpy(chm, conn->lll.data_chan_map,
   3a1e6:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
   3a1ea:	2600      	movs	r6, #0
   3a1ec:	f884 61e8 	strb.w	r6, [r4, #488]	; 0x1e8
		memcpy(chm, conn->lll.data_chan_map,
   3a1f0:	2205      	movs	r2, #5
   3a1f2:	4639      	mov	r1, r7
   3a1f4:	4628      	mov	r0, r5
   3a1f6:	f011 fd2f 	bl	4bc58 <memcpy>
	} while (conn->chm_updated);
   3a1fa:	f894 01e8 	ldrb.w	r0, [r4, #488]	; 0x1e8
   3a1fe:	2800      	cmp	r0, #0
   3a200:	d1f4      	bne.n	3a1ec <ll_chm_get+0x24>
}
   3a202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a204:	2002      	movs	r0, #2
}
   3a206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a208:	2002      	movs	r0, #2
}
   3a20a:	4770      	bx	lr
   3a20c:	20003360 	.word	0x20003360

0003a210 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a210:	2805      	cmp	r0, #5
   3a212:	d832      	bhi.n	3a27a <ll_terminate_ind_send+0x6a>
{
   3a214:	b538      	push	{r3, r4, r5, lr}
   3a216:	4605      	mov	r5, r0
   3a218:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a21a:	481b      	ldr	r0, [pc, #108]	; (3a288 <ll_terminate_ind_send+0x78>)
   3a21c:	462a      	mov	r2, r5
   3a21e:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a222:	f7f9 fe33 	bl	33e8c <mem_get>
	if (conn->lll.handle != handle) {
   3a226:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a228:	42ab      	cmp	r3, r5
   3a22a:	d122      	bne.n	3a272 <ll_terminate_ind_send+0x62>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   3a22c:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
   3a230:	f890 2151 	ldrb.w	r2, [r0, #337]	; 0x151
   3a234:	429a      	cmp	r2, r3
   3a236:	d11e      	bne.n	3a276 <ll_terminate_ind_send+0x66>
	switch (reason) {
   3a238:	2c1a      	cmp	r4, #26
   3a23a:	d803      	bhi.n	3a244 <ll_terminate_ind_send+0x34>
   3a23c:	2c04      	cmp	r4, #4
   3a23e:	d810      	bhi.n	3a262 <ll_terminate_ind_send+0x52>
   3a240:	2012      	movs	r0, #18
}
   3a242:	bd38      	pop	{r3, r4, r5, pc}
	switch (reason) {
   3a244:	2c29      	cmp	r4, #41	; 0x29
   3a246:	d001      	beq.n	3a24c <ll_terminate_ind_send+0x3c>
   3a248:	2c3b      	cmp	r4, #59	; 0x3b
   3a24a:	d1f9      	bne.n	3a240 <ll_terminate_ind_send+0x30>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a24c:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   3a250:	f880 4152 	strb.w	r4, [r0, #338]	; 0x152
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   3a254:	3301      	adds	r3, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a256:	2a00      	cmp	r2, #0
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   3a258:	f880 3150 	strb.w	r3, [r0, #336]	; 0x150
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a25c:	db0f      	blt.n	3a27e <ll_terminate_ind_send+0x6e>
	return 0;
   3a25e:	2000      	movs	r0, #0
}
   3a260:	bd38      	pop	{r3, r4, r5, pc}
	switch (reason) {
   3a262:	490a      	ldr	r1, [pc, #40]	; (3a28c <ll_terminate_ind_send+0x7c>)
   3a264:	fa21 fc04 	lsr.w	ip, r1, r4
   3a268:	f01c 0f01 	tst.w	ip, #1
   3a26c:	d1ee      	bne.n	3a24c <ll_terminate_ind_send+0x3c>
   3a26e:	2012      	movs	r0, #18
   3a270:	e7e7      	b.n	3a242 <ll_terminate_ind_send+0x32>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a272:	2002      	movs	r0, #2
}
   3a274:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3a276:	200c      	movs	r0, #12
}
   3a278:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a27a:	2002      	movs	r0, #2
}
   3a27c:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
   3a27e:	4629      	mov	r1, r5
   3a280:	f004 f80c 	bl	3e29c <ull_periph_latency_cancel>
   3a284:	e7eb      	b.n	3a25e <ll_terminate_ind_send+0x4e>
   3a286:	bf00      	nop
   3a288:	20003360 	.word	0x20003360
   3a28c:	04380020 	.word	0x04380020

0003a290 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a290:	2805      	cmp	r0, #5
   3a292:	d821      	bhi.n	3a2d8 <ll_feature_req_send+0x48>
{
   3a294:	b510      	push	{r4, lr}
   3a296:	4604      	mov	r4, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a298:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a29c:	480f      	ldr	r0, [pc, #60]	; (3a2dc <ll_feature_req_send+0x4c>)
   3a29e:	4622      	mov	r2, r4
   3a2a0:	f7f9 fdf4 	bl	33e8c <mem_get>
	if (conn->lll.handle != handle) {
   3a2a4:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   3a2a6:	42a1      	cmp	r1, r4
   3a2a8:	d10e      	bne.n	3a2c8 <ll_feature_req_send+0x38>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   3a2aa:	f890 4130 	ldrb.w	r4, [r0, #304]	; 0x130
   3a2ae:	f890 2131 	ldrb.w	r2, [r0, #305]	; 0x131
   3a2b2:	42a2      	cmp	r2, r4
   3a2b4:	d10a      	bne.n	3a2cc <ll_feature_req_send+0x3c>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a2b6:	f990 4039 	ldrsb.w	r4, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   3a2ba:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a2bc:	2c00      	cmp	r4, #0
	conn->llcp_feature.req++;
   3a2be:	f880 2130 	strb.w	r2, [r0, #304]	; 0x130
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a2c2:	db05      	blt.n	3a2d0 <ll_feature_req_send+0x40>
	return 0;
   3a2c4:	2000      	movs	r0, #0
}
   3a2c6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a2c8:	2002      	movs	r0, #2
}
   3a2ca:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3a2cc:	200c      	movs	r0, #12
}
   3a2ce:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   3a2d0:	f003 ffe4 	bl	3e29c <ull_periph_latency_cancel>
	return 0;
   3a2d4:	2000      	movs	r0, #0
   3a2d6:	e7f6      	b.n	3a2c6 <ll_feature_req_send+0x36>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a2d8:	2002      	movs	r0, #2
}
   3a2da:	4770      	bx	lr
   3a2dc:	20003360 	.word	0x20003360

0003a2e0 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a2e0:	2805      	cmp	r0, #5
   3a2e2:	d821      	bhi.n	3a328 <ll_version_ind_send+0x48>
{
   3a2e4:	b510      	push	{r4, lr}
   3a2e6:	4604      	mov	r4, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a2e8:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a2ec:	480f      	ldr	r0, [pc, #60]	; (3a32c <ll_version_ind_send+0x4c>)
   3a2ee:	4622      	mov	r2, r4
   3a2f0:	f7f9 fdcc 	bl	33e8c <mem_get>
	if (conn->lll.handle != handle) {
   3a2f4:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   3a2f6:	42a1      	cmp	r1, r4
   3a2f8:	d10e      	bne.n	3a318 <ll_version_ind_send+0x38>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   3a2fa:	f890 4148 	ldrb.w	r4, [r0, #328]	; 0x148
   3a2fe:	f890 2149 	ldrb.w	r2, [r0, #329]	; 0x149
   3a302:	42a2      	cmp	r2, r4
   3a304:	d10a      	bne.n	3a31c <ll_version_ind_send+0x3c>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a306:	f990 4039 	ldrsb.w	r4, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   3a30a:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a30c:	2c00      	cmp	r4, #0
	conn->llcp_version.req++;
   3a30e:	f880 2148 	strb.w	r2, [r0, #328]	; 0x148
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a312:	db05      	blt.n	3a320 <ll_version_ind_send+0x40>
	return 0;
   3a314:	2000      	movs	r0, #0
}
   3a316:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a318:	2002      	movs	r0, #2
}
   3a31a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3a31c:	200c      	movs	r0, #12
}
   3a31e:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   3a320:	f003 ffbc 	bl	3e29c <ull_periph_latency_cancel>
	return 0;
   3a324:	2000      	movs	r0, #0
   3a326:	e7f6      	b.n	3a316 <ll_version_ind_send+0x36>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a328:	2002      	movs	r0, #2
}
   3a32a:	4770      	bx	lr
   3a32c:	20003360 	.word	0x20003360

0003a330 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a330:	2805      	cmp	r0, #5
   3a332:	d84b      	bhi.n	3a3cc <ll_length_req_send+0x9c>
{
   3a334:	b570      	push	{r4, r5, r6, lr}
   3a336:	4604      	mov	r4, r0
   3a338:	460e      	mov	r6, r1
   3a33a:	4615      	mov	r5, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a33c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a340:	4602      	mov	r2, r0
   3a342:	4823      	ldr	r0, [pc, #140]	; (3a3d0 <ll_length_req_send+0xa0>)
   3a344:	f7f9 fda2 	bl	33e8c <mem_get>
	if (conn->lll.handle != handle) {
   3a348:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a34a:	42a3      	cmp	r3, r4
   3a34c:	d138      	bne.n	3a3c0 <ll_length_req_send+0x90>
	if (conn->llcp_length.disabled ||
   3a34e:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
   3a352:	071a      	lsls	r2, r3, #28
   3a354:	d436      	bmi.n	3a3c4 <ll_length_req_send+0x94>
	    (conn->common.fex_valid &&
   3a356:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
	if (conn->llcp_length.disabled ||
   3a35a:	07d1      	lsls	r1, r2, #31
   3a35c:	d503      	bpl.n	3a366 <ll_length_req_send+0x36>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   3a35e:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
	    (conn->common.fex_valid &&
   3a362:	0692      	lsls	r2, r2, #26
   3a364:	d52e      	bpl.n	3a3c4 <ll_length_req_send+0x94>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   3a366:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
   3a36a:	f890 21bd 	ldrb.w	r2, [r0, #445]	; 0x1bd
   3a36e:	428a      	cmp	r2, r1
   3a370:	d011      	beq.n	3a396 <ll_length_req_send+0x66>
		switch (conn->llcp_length.state) {
   3a372:	f003 0307 	and.w	r3, r3, #7
   3a376:	2b03      	cmp	r3, #3
   3a378:	d004      	beq.n	3a384 <ll_length_req_send+0x54>
   3a37a:	3303      	adds	r3, #3
   3a37c:	f003 0307 	and.w	r3, r3, #7
   3a380:	2b01      	cmp	r3, #1
   3a382:	d821      	bhi.n	3a3c8 <ll_length_req_send+0x98>
			if (!conn->llcp_length.cache.tx_octets) {
   3a384:	f8b0 31c8 	ldrh.w	r3, [r0, #456]	; 0x1c8
   3a388:	b9f3      	cbnz	r3, 3a3c8 <ll_length_req_send+0x98>
				conn->llcp_length.cache.tx_octets = tx_octets;
   3a38a:	f8a0 61c8 	strh.w	r6, [r0, #456]	; 0x1c8
				conn->llcp_length.cache.tx_time = tx_time;
   3a38e:	f8a0 51ca 	strh.w	r5, [r0, #458]	; 0x1ca
				return 0;
   3a392:	2000      	movs	r0, #0
}
   3a394:	bd70      	pop	{r4, r5, r6, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3a396:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a39a:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_length.tx_octets = tx_octets;
   3a39e:	f8a0 61c2 	strh.w	r6, [r0, #450]	; 0x1c2
	conn->llcp_length.req++;
   3a3a2:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3a3a4:	f36f 0302 	bfc	r3, #0, #3
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a3a8:	2900      	cmp	r1, #0
	conn->llcp_length.tx_time = tx_time;
   3a3aa:	f8a0 51c6 	strh.w	r5, [r0, #454]	; 0x1c6
	conn->llcp_length.req++;
   3a3ae:	f880 21bc 	strb.w	r2, [r0, #444]	; 0x1bc
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3a3b2:	f880 31be 	strb.w	r3, [r0, #446]	; 0x1be
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a3b6:	daec      	bge.n	3a392 <ll_length_req_send+0x62>
		ull_periph_latency_cancel(conn, handle);
   3a3b8:	4621      	mov	r1, r4
   3a3ba:	f003 ff6f 	bl	3e29c <ull_periph_latency_cancel>
   3a3be:	e7e8      	b.n	3a392 <ll_length_req_send+0x62>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a3c0:	2002      	movs	r0, #2
}
   3a3c2:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   3a3c4:	201a      	movs	r0, #26
}
   3a3c6:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   3a3c8:	200c      	movs	r0, #12
}
   3a3ca:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a3cc:	2002      	movs	r0, #2
}
   3a3ce:	4770      	bx	lr
   3a3d0:	20003360 	.word	0x20003360

0003a3d4 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   3a3d4:	4a03      	ldr	r2, [pc, #12]	; (3a3e4 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   3a3d6:	4b04      	ldr	r3, [pc, #16]	; (3a3e8 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   3a3d8:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   3a3da:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   3a3dc:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   3a3de:	800b      	strh	r3, [r1, #0]
}
   3a3e0:	4770      	bx	lr
   3a3e2:	bf00      	nop
   3a3e4:	200072b2 	.word	0x200072b2
   3a3e8:	200072b0 	.word	0x200072b0

0003a3ec <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   3a3ec:	4a02      	ldr	r2, [pc, #8]	; (3a3f8 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   3a3ee:	4b03      	ldr	r3, [pc, #12]	; (3a3fc <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   3a3f0:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   3a3f2:	8019      	strh	r1, [r3, #0]
}
   3a3f4:	2000      	movs	r0, #0
   3a3f6:	4770      	bx	lr
   3a3f8:	200072b2 	.word	0x200072b2
   3a3fc:	200072b0 	.word	0x200072b0

0003a400 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   3a400:	f04f 0c1b 	mov.w	ip, #27
   3a404:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   3a408:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   3a40c:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   3a410:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   3a412:	8018      	strh	r0, [r3, #0]
}
   3a414:	4770      	bx	lr
   3a416:	bf00      	nop

0003a418 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a418:	2805      	cmp	r0, #5
   3a41a:	d81b      	bhi.n	3a454 <ll_phy_get+0x3c>
{
   3a41c:	b570      	push	{r4, r5, r6, lr}
   3a41e:	4604      	mov	r4, r0
   3a420:	460e      	mov	r6, r1
   3a422:	4615      	mov	r5, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a424:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a428:	4602      	mov	r2, r0
   3a42a:	480b      	ldr	r0, [pc, #44]	; (3a458 <ll_phy_get+0x40>)
   3a42c:	f7f9 fd2e 	bl	33e8c <mem_get>
	if (conn->lll.handle != handle) {
   3a430:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   3a432:	42a2      	cmp	r2, r4
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a434:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   3a436:	d10b      	bne.n	3a450 <ll_phy_get+0x38>
	*tx = conn->lll.phy_tx;
   3a438:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
   3a43c:	f3c4 0402 	ubfx	r4, r4, #0, #3
   3a440:	7034      	strb	r4, [r6, #0]
	*rx = conn->lll.phy_rx;
   3a442:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   3a446:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3a44a:	702b      	strb	r3, [r5, #0]
	return 0;
   3a44c:	2000      	movs	r0, #0
}
   3a44e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a450:	2002      	movs	r0, #2
}
   3a452:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a454:	2002      	movs	r0, #2
}
   3a456:	4770      	bx	lr
   3a458:	20003360 	.word	0x20003360

0003a45c <ll_phy_default_set>:
	default_phy_tx = tx;
   3a45c:	4a02      	ldr	r2, [pc, #8]	; (3a468 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   3a45e:	4b03      	ldr	r3, [pc, #12]	; (3a46c <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   3a460:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   3a462:	7019      	strb	r1, [r3, #0]
}
   3a464:	2000      	movs	r0, #0
   3a466:	4770      	bx	lr
   3a468:	20007411 	.word	0x20007411
   3a46c:	20007410 	.word	0x20007410

0003a470 <ll_phy_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a470:	2805      	cmp	r0, #5
{
   3a472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a476:	d843      	bhi.n	3a500 <ll_phy_req_send+0x90>
   3a478:	4606      	mov	r6, r0
   3a47a:	460c      	mov	r4, r1
   3a47c:	4617      	mov	r7, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a47e:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a482:	4602      	mov	r2, r0
   3a484:	4824      	ldr	r0, [pc, #144]	; (3a518 <ll_phy_req_send+0xa8>)
   3a486:	4698      	mov	r8, r3
   3a488:	f7f9 fd00 	bl	33e8c <mem_get>
	if (conn->lll.handle != handle) {
   3a48c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a48e:	42b3      	cmp	r3, r6
   3a490:	d136      	bne.n	3a500 <ll_phy_req_send+0x90>
	if (conn->llcp_phy.disabled ||
   3a492:	f890 51cf 	ldrb.w	r5, [r0, #463]	; 0x1cf
   3a496:	f015 0508 	ands.w	r5, r5, #8
   3a49a:	d139      	bne.n	3a510 <ll_phy_req_send+0xa0>
	    (conn->common.fex_valid &&
   3a49c:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
	if (conn->llcp_phy.disabled ||
   3a4a0:	07db      	lsls	r3, r3, #31
   3a4a2:	d504      	bpl.n	3a4ae <ll_phy_req_send+0x3e>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   3a4a4:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   3a4a8:	f413 6f10 	tst.w	r3, #2304	; 0x900
   3a4ac:	d030      	beq.n	3a510 <ll_phy_req_send+0xa0>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   3a4ae:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
   3a4b2:	f890 21cd 	ldrb.w	r2, [r0, #461]	; 0x1cd
   3a4b6:	429a      	cmp	r2, r3
   3a4b8:	d126      	bne.n	3a508 <ll_phy_req_send+0x98>
	conn->llcp_phy.req++;
   3a4ba:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   3a4bc:	f004 0407 	and.w	r4, r4, #7
   3a4c0:	00a4      	lsls	r4, r4, #2
	conn->llcp_phy.req++;
   3a4c2:	f880 21cc 	strb.w	r2, [r0, #460]	; 0x1cc
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   3a4c6:	f8b0 21ce 	ldrh.w	r2, [r0, #462]	; 0x1ce
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a4ca:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   3a4ce:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   3a4d2:	f008 0807 	and.w	r8, r8, #7
   3a4d6:	ea44 1348 	orr.w	r3, r4, r8, lsl #5
   3a4da:	f007 0701 	and.w	r7, r7, #1
   3a4de:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
   3a4e2:	ea43 2347 	orr.w	r3, r3, r7, lsl #9
   3a4e6:	f022 0207 	bic.w	r2, r2, #7
   3a4ea:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a4ec:	2900      	cmp	r1, #0
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   3a4ee:	f8a0 31ce 	strh.w	r3, [r0, #462]	; 0x1ce
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a4f2:	da06      	bge.n	3a502 <ll_phy_req_send+0x92>
		ull_periph_latency_cancel(conn, handle);
   3a4f4:	4631      	mov	r1, r6
   3a4f6:	f003 fed1 	bl	3e29c <ull_periph_latency_cancel>
}
   3a4fa:	4628      	mov	r0, r5
   3a4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a500:	2502      	movs	r5, #2
}
   3a502:	4628      	mov	r0, r5
   3a504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3a508:	250c      	movs	r5, #12
}
   3a50a:	4628      	mov	r0, r5
   3a50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   3a510:	251a      	movs	r5, #26
}
   3a512:	4628      	mov	r0, r5
   3a514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3a518:	20003360 	.word	0x20003360

0003a51c <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a51c:	2805      	cmp	r0, #5
   3a51e:	d81d      	bhi.n	3a55c <ll_apto_get+0x40>
{
   3a520:	b538      	push	{r3, r4, r5, lr}
   3a522:	4604      	mov	r4, r0
   3a524:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a526:	480e      	ldr	r0, [pc, #56]	; (3a560 <ll_apto_get+0x44>)
   3a528:	4622      	mov	r2, r4
   3a52a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a52e:	f7f9 fcad 	bl	33e8c <mem_get>
	if (conn->lll.handle != handle) {
   3a532:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a534:	42a3      	cmp	r3, r4
   3a536:	d10f      	bne.n	3a558 <ll_apto_get+0x3c>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   3a538:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   3a53a:	f8b0 30ce 	ldrh.w	r3, [r0, #206]	; 0xce
   3a53e:	4a09      	ldr	r2, [pc, #36]	; (3a564 <ll_apto_get+0x48>)
   3a540:	fb01 f303 	mul.w	r3, r1, r3
   3a544:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   3a548:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   3a54c:	fba2 2303 	umull	r2, r3, r2, r3
   3a550:	099b      	lsrs	r3, r3, #6
   3a552:	802b      	strh	r3, [r5, #0]
	return 0;
   3a554:	2000      	movs	r0, #0
}
   3a556:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a558:	2002      	movs	r0, #2
}
   3a55a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a55c:	2002      	movs	r0, #2
}
   3a55e:	4770      	bx	lr
   3a560:	20003360 	.word	0x20003360
   3a564:	10624dd3 	.word	0x10624dd3

0003a568 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a568:	2805      	cmp	r0, #5
   3a56a:	d81e      	bhi.n	3a5aa <ll_apto_set+0x42>
{
   3a56c:	b538      	push	{r3, r4, r5, lr}
   3a56e:	4605      	mov	r5, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a570:	462a      	mov	r2, r5
   3a572:	480f      	ldr	r0, [pc, #60]	; (3a5b0 <ll_apto_set+0x48>)
   3a574:	460c      	mov	r4, r1
   3a576:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a57a:	f7f9 fc87 	bl	33e8c <mem_get>
	if (conn->lll.handle != handle) {
   3a57e:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   3a580:	42aa      	cmp	r2, r5
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a582:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   3a584:	d10f      	bne.n	3a5a6 <ll_apto_set+0x3e>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   3a586:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   3a588:	f240 41e2 	movw	r1, #1250	; 0x4e2
   3a58c:	fb01 f202 	mul.w	r2, r1, r2
   3a590:	f242 7110 	movw	r1, #10000	; 0x2710
   3a594:	fb01 2104 	mla	r1, r1, r4, r2
   3a598:	3901      	subs	r1, #1
	return 0;
   3a59a:	2000      	movs	r0, #0
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   3a59c:	fbb1 f1f2 	udiv	r1, r1, r2
   3a5a0:	f8a3 10ce 	strh.w	r1, [r3, #206]	; 0xce
}
   3a5a4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a5a6:	2002      	movs	r0, #2
}
   3a5a8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a5aa:	2002      	movs	r0, #2
}
   3a5ac:	4770      	bx	lr
   3a5ae:	bf00      	nop
   3a5b0:	20003360 	.word	0x20003360

0003a5b4 <ull_conn_init>:
	err = init_reset();
   3a5b4:	f7fe be32 	b.w	3921c <init_reset>

0003a5b8 <ull_conn_reset>:
{
   3a5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)ull_central_reset();
   3a5bc:	f004 f832 	bl	3e624 <ull_central_reset>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a5c0:	4e1a      	ldr	r6, [pc, #104]	; (3a62c <ull_conn_reset+0x74>)
	LL_ASSERT(err == 0 || err == -EALREADY);
   3a5c2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 3a630 <ull_conn_reset+0x78>
   3a5c6:	4f1b      	ldr	r7, [pc, #108]	; (3a634 <ull_conn_reset+0x7c>)
	(void)ull_central_reset();
   3a5c8:	2500      	movs	r5, #0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a5ca:	b2aa      	uxth	r2, r5
   3a5cc:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a5d0:	4630      	mov	r0, r6
   3a5d2:	f7f9 fc5b 	bl	33e8c <mem_get>
   3a5d6:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   3a5d8:	1d68      	adds	r0, r5, #5
   3a5da:	f104 021c 	add.w	r2, r4, #28
   3a5de:	4621      	mov	r1, r4
   3a5e0:	b2c0      	uxtb	r0, r0
   3a5e2:	f7fd fbdb 	bl	37d9c <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   3a5e6:	b170      	cbz	r0, 3a606 <ull_conn_reset+0x4e>
   3a5e8:	3078      	adds	r0, #120	; 0x78
   3a5ea:	d00c      	beq.n	3a606 <ull_conn_reset+0x4e>
   3a5ec:	4812      	ldr	r0, [pc, #72]	; (3a638 <ull_conn_reset+0x80>)
   3a5ee:	f640 03e3 	movw	r3, #2275	; 0x8e3
   3a5f2:	4642      	mov	r2, r8
   3a5f4:	4639      	mov	r1, r7
   3a5f6:	f00f fa00 	bl	499fa <printk>
   3a5fa:	4040      	eors	r0, r0
   3a5fc:	f380 8811 	msr	BASEPRI, r0
   3a600:	f04f 0003 	mov.w	r0, #3
   3a604:	df02      	svc	2
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3a606:	3501      	adds	r5, #1
	conn->lll.handle = LLL_HANDLE_INVALID;
   3a608:	f64f 72ff 	movw	r2, #65535	; 0xffff
	conn->lll.link_tx_free = NULL;
   3a60c:	2300      	movs	r3, #0
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3a60e:	2d06      	cmp	r5, #6
	conn->lll.handle = LLL_HANDLE_INVALID;
   3a610:	8522      	strh	r2, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   3a612:	6763      	str	r3, [r4, #116]	; 0x74
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3a614:	d1d9      	bne.n	3a5ca <ull_conn_reset+0x12>
	MFIFO_INIT(conn_tx);
   3a616:	4809      	ldr	r0, [pc, #36]	; (3a63c <ull_conn_reset+0x84>)
	MFIFO_INIT(conn_ack);
   3a618:	4909      	ldr	r1, [pc, #36]	; (3a640 <ull_conn_reset+0x88>)
	conn_upd_curr = NULL;
   3a61a:	4a0a      	ldr	r2, [pc, #40]	; (3a644 <ull_conn_reset+0x8c>)
	MFIFO_INIT(conn_tx);
   3a61c:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   3a61e:	804b      	strh	r3, [r1, #2]
}
   3a620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	conn_upd_curr = NULL;
   3a624:	6013      	str	r3, [r2, #0]
	err = init_reset();
   3a626:	f7fe bdf9 	b.w	3921c <init_reset>
   3a62a:	bf00      	nop
   3a62c:	20003360 	.word	0x20003360
   3a630:	00052f80 	.word	0x00052f80
   3a634:	00052f68 	.word	0x00052f68
   3a638:	00052a70 	.word	0x00052a70
   3a63c:	20000d38 	.word	0x20000d38
   3a640:	20000c54 	.word	0x20000c54
   3a644:	200058bc 	.word	0x200058bc

0003a648 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   3a648:	4b01      	ldr	r3, [pc, #4]	; (3a650 <ull_conn_default_tx_octets_get+0x8>)
}
   3a64a:	8818      	ldrh	r0, [r3, #0]
   3a64c:	4770      	bx	lr
   3a64e:	bf00      	nop
   3a650:	200072b2 	.word	0x200072b2

0003a654 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   3a654:	4b01      	ldr	r3, [pc, #4]	; (3a65c <ull_conn_default_tx_time_get+0x8>)
}
   3a656:	8818      	ldrh	r0, [r3, #0]
   3a658:	4770      	bx	lr
   3a65a:	bf00      	nop
   3a65c:	200072b0 	.word	0x200072b0

0003a660 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   3a660:	4b01      	ldr	r3, [pc, #4]	; (3a668 <ull_conn_default_phy_tx_get+0x8>)
}
   3a662:	7818      	ldrb	r0, [r3, #0]
   3a664:	4770      	bx	lr
   3a666:	bf00      	nop
   3a668:	20007411 	.word	0x20007411

0003a66c <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   3a66c:	4b01      	ldr	r3, [pc, #4]	; (3a674 <ull_conn_default_phy_rx_get+0x8>)
}
   3a66e:	7818      	ldrb	r0, [r3, #0]
   3a670:	4770      	bx	lr
   3a672:	bf00      	nop
   3a674:	20007410 	.word	0x20007410

0003a678 <ull_conn_peer_connected>:
{
   3a678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a67c:	4f1a      	ldr	r7, [pc, #104]	; (3a6e8 <ull_conn_peer_connected+0x70>)
{
   3a67e:	4681      	mov	r9, r0
   3a680:	468a      	mov	sl, r1
   3a682:	4616      	mov	r6, r2
   3a684:	4698      	mov	r8, r3
   3a686:	2500      	movs	r5, #0
   3a688:	fa1f fb85 	uxth.w	fp, r5
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a68c:	465a      	mov	r2, fp
   3a68e:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a692:	4638      	mov	r0, r7
   3a694:	f7f9 fbfa 	bl	33e8c <mem_get>
	if (conn->lll.handle != handle) {
   3a698:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a69a:	455b      	cmp	r3, fp
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a69c:	4604      	mov	r4, r0
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3a69e:	f105 0501 	add.w	r5, r5, #1
	if (conn->lll.handle != handle) {
   3a6a2:	d105      	bne.n	3a6b0 <ull_conn_peer_connected+0x38>
		    conn->peer_id_addr_type == peer_id_addr_type &&
   3a6a4:	f890 c0d6 	ldrb.w	ip, [r0, #214]	; 0xd6
   3a6a8:	f3cc 0c40 	ubfx	ip, ip, #1, #1
		if (conn &&
   3a6ac:	45b4      	cmp	ip, r6
   3a6ae:	d004      	beq.n	3a6ba <ull_conn_peer_connected+0x42>
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3a6b0:	2d06      	cmp	r5, #6
   3a6b2:	d1e9      	bne.n	3a688 <ull_conn_peer_connected+0x10>
	return false;
   3a6b4:	2000      	movs	r0, #0
}
   3a6b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !memcmp(conn->peer_id_addr, peer_id_addr, BDADDR_SIZE) &&
   3a6ba:	2206      	movs	r2, #6
   3a6bc:	4641      	mov	r1, r8
   3a6be:	30dd      	adds	r0, #221	; 0xdd
   3a6c0:	f011 faba 	bl	4bc38 <memcmp>
		    conn->peer_id_addr_type == peer_id_addr_type &&
   3a6c4:	2800      	cmp	r0, #0
   3a6c6:	d1f3      	bne.n	3a6b0 <ull_conn_peer_connected+0x38>
		    conn->own_id_addr_type == own_id_addr_type &&
   3a6c8:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
   3a6cc:	f003 0301 	and.w	r3, r3, #1
		    !memcmp(conn->peer_id_addr, peer_id_addr, BDADDR_SIZE) &&
   3a6d0:	454b      	cmp	r3, r9
   3a6d2:	d1ed      	bne.n	3a6b0 <ull_conn_peer_connected+0x38>
		    !memcmp(conn->own_id_addr, own_id_addr, BDADDR_SIZE)) {
   3a6d4:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   3a6d8:	2206      	movs	r2, #6
   3a6da:	4651      	mov	r1, sl
   3a6dc:	f011 faac 	bl	4bc38 <memcmp>
		    conn->own_id_addr_type == own_id_addr_type &&
   3a6e0:	2800      	cmp	r0, #0
   3a6e2:	d1e5      	bne.n	3a6b0 <ull_conn_peer_connected+0x38>
			return true;
   3a6e4:	2001      	movs	r0, #1
   3a6e6:	e7e6      	b.n	3a6b6 <ull_conn_peer_connected+0x3e>
   3a6e8:	20003360 	.word	0x20003360

0003a6ec <ull_conn_setup>:
{
   3a6ec:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   3a6ee:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   3a6f0:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   3a6f2:	681d      	ldr	r5, [r3, #0]
   3a6f4:	782b      	ldrb	r3, [r5, #0]
{
   3a6f6:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   3a6f8:	b193      	cbz	r3, 3a720 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   3a6fa:	696b      	ldr	r3, [r5, #20]
   3a6fc:	b163      	cbz	r3, 3a718 <ull_conn_setup+0x2c>
   3a6fe:	4a0b      	ldr	r2, [pc, #44]	; (3a72c <ull_conn_setup+0x40>)
   3a700:	490b      	ldr	r1, [pc, #44]	; (3a730 <ull_conn_setup+0x44>)
   3a702:	480c      	ldr	r0, [pc, #48]	; (3a734 <ull_conn_setup+0x48>)
   3a704:	f240 33ed 	movw	r3, #1005	; 0x3ed
   3a708:	f00f f977 	bl	499fa <printk>
   3a70c:	4040      	eors	r0, r0
   3a70e:	f380 8811 	msr	BASEPRI, r0
   3a712:	f04f 0003 	mov.w	r0, #3
   3a716:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   3a718:	4b07      	ldr	r3, [pc, #28]	; (3a738 <ull_conn_setup+0x4c>)
   3a71a:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   3a71e:	bd38      	pop	{r3, r4, r5, pc}
   3a720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   3a724:	4608      	mov	r0, r1
   3a726:	f7fe bf7d 	b.w	39624 <conn_setup_adv_scan_disabled_cb>
   3a72a:	bf00      	nop
   3a72c:	00052f80 	.word	0x00052f80
   3a730:	00052e68 	.word	0x00052e68
   3a734:	00052a70 	.word	0x00052a70
   3a738:	00039625 	.word	0x00039625

0003a73c <ull_conn_rx>:
{
   3a73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	conn = ll_connected_get((*rx)->hdr.handle);
   3a740:	680b      	ldr	r3, [r1, #0]
   3a742:	88de      	ldrh	r6, [r3, #6]
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a744:	2e05      	cmp	r6, #5
{
   3a746:	b085      	sub	sp, #20
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a748:	d864      	bhi.n	3a814 <ull_conn_rx+0xd8>
   3a74a:	460d      	mov	r5, r1
   3a74c:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a74e:	4632      	mov	r2, r6
   3a750:	48b0      	ldr	r0, [pc, #704]	; (3aa14 <ull_conn_rx+0x2d8>)
   3a752:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a756:	f7f9 fb99 	bl	33e8c <mem_get>
	if (conn->lll.handle != handle) {
   3a75a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a75c:	42b3      	cmp	r3, r6
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a75e:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   3a760:	d157      	bne.n	3a812 <ull_conn_rx+0xd6>
	pdu_rx = (void *)(*rx)->pdu;
   3a762:	682e      	ldr	r6, [r5, #0]

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   3a764:	f890 0176 	ldrb.w	r0, [r0, #374]	; 0x176
	switch (pdu_rx->ll_id) {
   3a768:	7f33      	ldrb	r3, [r6, #28]
   3a76a:	f003 0303 	and.w	r3, r3, #3
   3a76e:	2b03      	cmp	r3, #3
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   3a770:	f000 0201 	and.w	r2, r0, #1
	switch (pdu_rx->ll_id) {
   3a774:	d13a      	bne.n	3a7ec <ull_conn_rx+0xb0>
	opcode = pdu_rx->llctrl.opcode;
   3a776:	f896 801f 	ldrb.w	r8, [r6, #31]
	pdu_rx = (void *)(*rx)->pdu;
   3a77a:	f106 0c1c 	add.w	ip, r6, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   3a77e:	2a00      	cmp	r2, #0
   3a780:	d04b      	beq.n	3a81a <ull_conn_rx+0xde>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   3a782:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3a786:	2b00      	cmp	r3, #0
		((!conn->llcp_enc.refresh &&
   3a788:	f000 0204 	and.w	r2, r0, #4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   3a78c:	f2c0 81e6 	blt.w	3ab5c <ull_conn_rx+0x420>
	return (!conn->lll.role &&
   3a790:	2a00      	cmp	r2, #0
   3a792:	f040 80ae 	bne.w	3a8f2 <ull_conn_rx+0x1b6>
		((!conn->llcp_enc.refresh &&
   3a796:	f1b8 0f02 	cmp.w	r8, #2
   3a79a:	f000 81ee 	beq.w	3ab7a <ull_conn_rx+0x43e>
   3a79e:	f1b8 0f11 	cmp.w	r8, #17
   3a7a2:	d830      	bhi.n	3a806 <ull_conn_rx+0xca>
   3a7a4:	4a9c      	ldr	r2, [pc, #624]	; (3aa18 <ull_conn_rx+0x2dc>)
   3a7a6:	fa22 f208 	lsr.w	r2, r2, r8
   3a7aa:	07d1      	lsls	r1, r2, #31
   3a7ac:	d52b      	bpl.n	3a806 <ull_conn_rx+0xca>

		return 0;
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   3a7ae:	f1b8 0f19 	cmp.w	r8, #25
   3a7b2:	d856      	bhi.n	3a862 <ull_conn_rx+0x126>
   3a7b4:	e8df f018 	tbh	[pc, r8, lsl #1]
   3a7b8:	051904b8 	.word	0x051904b8
   3a7bc:	047001e1 	.word	0x047001e1
   3a7c0:	04300451 	.word	0x04300451
   3a7c4:	016a0193 	.word	0x016a0193
   3a7c8:	027b0052 	.word	0x027b0052
   3a7cc:	054c02b9 	.word	0x054c02b9
   3a7d0:	02390217 	.word	0x02390217
   3a7d4:	01bd036c 	.word	0x01bd036c
   3a7d8:	01340302 	.word	0x01340302
   3a7dc:	0103010c 	.word	0x0103010c
   3a7e0:	00ca00ca 	.word	0x00ca00ca
   3a7e4:	03f301ec 	.word	0x03f301ec
   3a7e8:	037d03b2 	.word	0x037d03b2
	switch (pdu_rx->ll_id) {
   3a7ec:	b94b      	cbnz	r3, 3a802 <ull_conn_rx+0xc6>
		if (conn->llcp_enc.pause_rx) {
   3a7ee:	b112      	cbz	r2, 3a7f6 <ull_conn_rx+0xba>
			conn->llcp_terminate.reason_final =
   3a7f0:	233d      	movs	r3, #61	; 0x3d
   3a7f2:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a7f6:	2301      	movs	r3, #1
   3a7f8:	7133      	strb	r3, [r6, #4]
		return 0;
   3a7fa:	2000      	movs	r0, #0
}
   3a7fc:	b005      	add	sp, #20
   3a7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   3a802:	2a00      	cmp	r2, #0
   3a804:	d0f9      	beq.n	3a7fa <ull_conn_rx+0xbe>
			conn->llcp_terminate.reason_final =
   3a806:	223d      	movs	r2, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a808:	2301      	movs	r3, #1
			conn->llcp_terminate.reason_final =
   3a80a:	f884 2153 	strb.w	r2, [r4, #339]	; 0x153
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a80e:	7133      	strb	r3, [r6, #4]
   3a810:	e7f3      	b.n	3a7fa <ull_conn_rx+0xbe>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a812:	682b      	ldr	r3, [r5, #0]
   3a814:	2201      	movs	r2, #1
   3a816:	711a      	strb	r2, [r3, #4]
		    PDU_DATA_LLCTRL_LEN(phy_upd_ind) != pdu_rx->len) {
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
   3a818:	e7ef      	b.n	3a7fa <ull_conn_rx+0xbe>
	switch (opcode) {
   3a81a:	f1b8 0f19 	cmp.w	r8, #25
   3a81e:	d820      	bhi.n	3a862 <ull_conn_rx+0x126>
   3a820:	e8df f018 	tbh	[pc, r8, lsl #1]
   3a824:	04e10480 	.word	0x04e10480
   3a828:	043801ab 	.word	0x043801ab
   3a82c:	03f80416 	.word	0x03f80416
   3a830:	0134015d 	.word	0x0134015d
   3a834:	0245001a 	.word	0x0245001a
   3a838:	05160281 	.word	0x05160281
   3a83c:	020301e1 	.word	0x020301e1
   3a840:	01870334 	.word	0x01870334
   3a844:	00fe02ca 	.word	0x00fe02ca
   3a848:	00cd00d6 	.word	0x00cd00d6
   3a84c:	00940094 	.word	0x00940094
   3a850:	03bb01b6 	.word	0x03bb01b6
   3a854:	0345037a 	.word	0x0345037a
   3a858:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   3a85c:	2b00      	cmp	r3, #0
   3a85e:	f2c0 831a 	blt.w	3ae96 <ull_conn_rx+0x75a>
	if (conn->common.txn_lock) {
   3a862:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3a866:	0798      	lsls	r0, r3, #30
   3a868:	d4c5      	bmi.n	3a7f6 <ull_conn_rx+0xba>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3a86a:	486c      	ldr	r0, [pc, #432]	; (3aa1c <ull_conn_rx+0x2e0>)
   3a86c:	f7f9 fadc 	bl	33e28 <mem_acquire>
	if (!tx) {
   3a870:	2800      	cmp	r0, #0
   3a872:	f000 85f6 	beq.w	3b462 <ull_conn_rx+0xd26>
	conn->common.txn_lock = 1U;
   3a876:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3a87a:	f043 0302 	orr.w	r3, r3, #2
   3a87e:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3a882:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   3a884:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3a888:	f043 0303 	orr.w	r3, r3, #3
   3a88c:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   3a88e:	2302      	movs	r3, #2
   3a890:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   3a892:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   3a896:	2207      	movs	r2, #7
   3a898:	71c2      	strb	r2, [r0, #7]
	if (
   3a89a:	2b00      	cmp	r3, #0
   3a89c:	f000 8593 	beq.w	3b3c6 <ull_conn_rx+0xc8a>
	    !conn->llcp_enc.pause_tx &&
   3a8a0:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3a8a4:	0791      	lsls	r1, r2, #30
   3a8a6:	d414      	bmi.n	3a8d2 <ull_conn_rx+0x196>
	    !conn->llcp_phy.pause_tx &&
   3a8a8:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3a8ac:	07d2      	lsls	r2, r2, #31
   3a8ae:	d410      	bmi.n	3a8d2 <ull_conn_rx+0x196>
		if (conn->tx_head == conn->tx_data) {
   3a8b0:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3a8b4:	4293      	cmp	r3, r2
   3a8b6:	f000 85d8 	beq.w	3b46a <ull_conn_rx+0xd2e>
		} else if (!conn->tx_ctrl) {
   3a8ba:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3a8be:	b95a      	cbnz	r2, 3a8d8 <ull_conn_rx+0x19c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3a8c0:	791a      	ldrb	r2, [r3, #4]
   3a8c2:	f002 0203 	and.w	r2, r2, #3
   3a8c6:	2a03      	cmp	r2, #3
   3a8c8:	f001 800f 	beq.w	3b8ea <ull_conn_rx+0x11ae>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3a8cc:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   3a8d0:	e004      	b.n	3a8dc <ull_conn_rx+0x1a0>
		if (!conn->tx_ctrl) {
   3a8d2:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3a8d6:	b39a      	cbz	r2, 3a940 <ull_conn_rx+0x204>
	tx->next = conn->tx_ctrl_last->next;
   3a8d8:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3a8dc:	681a      	ldr	r2, [r3, #0]
   3a8de:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3a8e0:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3a8e2:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   3a8e4:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3a8e8:	2b00      	cmp	r3, #0
   3a8ea:	d184      	bne.n	3a7f6 <ull_conn_rx+0xba>
		conn->tx_data_last = tx;
   3a8ec:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3a8f0:	e781      	b.n	3a7f6 <ull_conn_rx+0xba>
   3a8f2:	f1a8 0202 	sub.w	r2, r8, #2
   3a8f6:	b2d2      	uxtb	r2, r2
   3a8f8:	2a09      	cmp	r2, #9
   3a8fa:	f63f af50 	bhi.w	3a79e <ull_conn_rx+0x62>
   3a8fe:	f240 2e05 	movw	lr, #517	; 0x205
   3a902:	fa2e f202 	lsr.w	r2, lr, r2
   3a906:	07d2      	lsls	r2, r2, #31
   3a908:	f57f af4c 	bpl.w	3a7a4 <ull_conn_rx+0x68>
	switch (opcode) {
   3a90c:	f1a8 0203 	sub.w	r2, r8, #3
   3a910:	2a08      	cmp	r2, #8
   3a912:	f200 8132 	bhi.w	3ab7a <ull_conn_rx+0x43e>
   3a916:	a701      	add	r7, pc, #4	; (adr r7, 3a91c <ull_conn_rx+0x1e0>)
   3a918:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
   3a91c:	0003b099 	.word	0x0003b099
   3a920:	0003b055 	.word	0x0003b055
   3a924:	0003b019 	.word	0x0003b019
   3a928:	0003aadf 	.word	0x0003aadf
   3a92c:	0003aa8d 	.word	0x0003aa8d
   3a930:	0003a85d 	.word	0x0003a85d
   3a934:	0003acaf 	.word	0x0003acaf
   3a938:	0003ad2b 	.word	0x0003ad2b
   3a93c:	0003b251 	.word	0x0003b251
			tx->next = conn->tx_head;
   3a940:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3a942:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3a946:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3a94a:	e754      	b.n	3a7f6 <ull_conn_rx+0xba>
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   3a94c:	7f73      	ldrb	r3, [r6, #29]
   3a94e:	2b09      	cmp	r3, #9
   3a950:	d187      	bne.n	3a862 <ull_conn_rx+0x126>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   3a952:	f1b8 0f14 	cmp.w	r8, #20
   3a956:	f000 85d4 	beq.w	3b502 <ull_conn_rx+0xdc6>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   3a95a:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
	if (/* Local idle, and Peer request then complete the Peer procedure
   3a95e:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
	eff_tx_octets = conn->lll.max_tx_octets;
   3a962:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
	eff_rx_octets = conn->lll.max_rx_octets;
   3a966:	f8b4 b05a 	ldrh.w	fp, [r4, #90]	; 0x5a
	eff_rx_time = conn->lll.max_rx_time;
   3a96a:	f8b4 905e 	ldrh.w	r9, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   3a96e:	f8b4 a05c 	ldrh.w	sl, [r4, #92]	; 0x5c
	eff_tx_octets = conn->lll.max_tx_octets;
   3a972:	9101      	str	r1, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   3a974:	4293      	cmp	r3, r2
   3a976:	f001 8142 	beq.w	3bbfe <ull_conn_rx+0x14c2>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   3a97a:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	struct node_tx *tx = NULL;
   3a97e:	2300      	movs	r3, #0
	       tx) ||
   3a980:	f001 0107 	and.w	r1, r1, #7
   3a984:	2902      	cmp	r1, #2
   3a986:	f000 85dd 	beq.w	3b544 <ull_conn_rx+0xe08>
   3a98a:	f896 801f 	ldrb.w	r8, [r6, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   3a98e:	f1b8 0f15 	cmp.w	r8, #21
   3a992:	f43f af32 	beq.w	3a7fa <ull_conn_rx+0xbe>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   3a996:	4618      	mov	r0, r3
   3a998:	4920      	ldr	r1, [pc, #128]	; (3aa1c <ull_conn_rx+0x2e0>)
   3a99a:	f7f9 fa5f 	bl	33e5c <mem_release>
			if (conn->llcp_length.state ==
   3a99e:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
			conn->common.txn_lock = 0U;
   3a9a2:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			if (conn->llcp_length.state ==
   3a9a6:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   3a9aa:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   3a9ae:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   3a9b0:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
			if (conn->llcp_length.state ==
   3a9b4:	f47f af21 	bne.w	3a7fa <ull_conn_rx+0xbe>
				return -EBUSY;
   3a9b8:	f06f 000f 	mvn.w	r0, #15
   3a9bc:	e71e      	b.n	3a7fc <ull_conn_rx+0xc0>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   3a9be:	7f73      	ldrb	r3, [r6, #29]
   3a9c0:	2b01      	cmp	r3, #1
   3a9c2:	f47f af4e 	bne.w	3a862 <ull_conn_rx+0x126>
		conn->procedure_expire = 0U;
   3a9c6:	2200      	movs	r2, #0
   3a9c8:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a9cc:	7133      	strb	r3, [r6, #4]
		break;
   3a9ce:	e714      	b.n	3a7fa <ull_conn_rx+0xbe>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   3a9d0:	7f75      	ldrb	r5, [r6, #29]
   3a9d2:	2d01      	cmp	r5, #1
   3a9d4:	f47f af45 	bne.w	3a862 <ull_conn_rx+0x126>
	if (conn->common.txn_lock) {
   3a9d8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3a9dc:	0799      	lsls	r1, r3, #30
   3a9de:	d416      	bmi.n	3aa0e <ull_conn_rx+0x2d2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3a9e0:	480e      	ldr	r0, [pc, #56]	; (3aa1c <ull_conn_rx+0x2e0>)
   3a9e2:	f7f9 fa21 	bl	33e28 <mem_acquire>
	if (!tx) {
   3a9e6:	4601      	mov	r1, r0
   3a9e8:	2800      	cmp	r0, #0
   3a9ea:	f000 853a 	beq.w	3b462 <ull_conn_rx+0xd26>
	conn->common.txn_lock = 1U;
   3a9ee:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3a9f2:	f043 0302 	orr.w	r3, r3, #2
   3a9f6:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3a9fa:	7903      	ldrb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   3a9fc:	7145      	strb	r5, [r0, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3a9fe:	f043 0303 	orr.w	r3, r3, #3
   3aa02:	7103      	strb	r3, [r0, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   3aa04:	2313      	movs	r3, #19
   3aa06:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   3aa08:	4620      	mov	r0, r4
   3aa0a:	f7fe fd37 	bl	3947c <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3aa0e:	7135      	strb	r5, [r6, #4]
	return 0;
   3aa10:	e6f3      	b.n	3a7fa <ull_conn_rx+0xbe>
   3aa12:	bf00      	nop
   3aa14:	20003360 	.word	0x20003360
   3aa18:	00022060 	.word	0x00022060
   3aa1c:	200059a0 	.word	0x200059a0
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   3aa20:	7f73      	ldrb	r3, [r6, #29]
   3aa22:	2b03      	cmp	r3, #3
   3aa24:	f47f af1d 	bne.w	3a862 <ull_conn_rx+0x126>
	switch (rej_ext_ind->reject_opcode) {
   3aa28:	f896 3020 	ldrb.w	r3, [r6, #32]
   3aa2c:	3b03      	subs	r3, #3
   3aa2e:	2b13      	cmp	r3, #19
   3aa30:	f63f aee1 	bhi.w	3a7f6 <ull_conn_rx+0xba>
   3aa34:	a201      	add	r2, pc, #4	; (adr r2, 3aa3c <ull_conn_rx+0x300>)
   3aa36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   3aa3a:	bf00      	nop
   3aa3c:	0003b33b 	.word	0x0003b33b
   3aa40:	0003a7f7 	.word	0x0003a7f7
   3aa44:	0003a7f7 	.word	0x0003a7f7
   3aa48:	0003a7f7 	.word	0x0003a7f7
   3aa4c:	0003a7f7 	.word	0x0003a7f7
   3aa50:	0003a7f7 	.word	0x0003a7f7
   3aa54:	0003a7f7 	.word	0x0003a7f7
   3aa58:	0003a7f7 	.word	0x0003a7f7
   3aa5c:	0003a7f7 	.word	0x0003a7f7
   3aa60:	0003a7f7 	.word	0x0003a7f7
   3aa64:	0003a7f7 	.word	0x0003a7f7
   3aa68:	0003a7f7 	.word	0x0003a7f7
   3aa6c:	0003b2c1 	.word	0x0003b2c1
   3aa70:	0003a7f7 	.word	0x0003a7f7
   3aa74:	0003a7f7 	.word	0x0003a7f7
   3aa78:	0003a7f7 	.word	0x0003a7f7
   3aa7c:	0003a7f7 	.word	0x0003a7f7
   3aa80:	0003b285 	.word	0x0003b285
   3aa84:	0003a7f7 	.word	0x0003a7f7
   3aa88:	0003b379 	.word	0x0003b379
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   3aa8c:	7f73      	ldrb	r3, [r6, #29]
   3aa8e:	2b02      	cmp	r3, #2
   3aa90:	f47f aee7 	bne.w	3a862 <ull_conn_rx+0x126>
			    conn->llcp_conn_param.req) &&
   3aa94:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
		} else if ((conn->llcp_conn_param.ack !=
   3aa98:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   3aa9c:	f896 3020 	ldrb.w	r3, [r6, #32]
		} else if ((conn->llcp_conn_param.ack !=
   3aaa0:	4291      	cmp	r1, r2
   3aaa2:	d002      	beq.n	3aaaa <ull_conn_rx+0x36e>
			    conn->llcp_conn_param.req) &&
   3aaa4:	2b0f      	cmp	r3, #15
   3aaa6:	f000 863c 	beq.w	3b722 <ull_conn_rx+0xfe6>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   3aaaa:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   3aaae:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
   3aab2:	4291      	cmp	r1, r2
   3aab4:	d002      	beq.n	3aabc <ull_conn_rx+0x380>
   3aab6:	2b14      	cmp	r3, #20
   3aab8:	f000 870d 	beq.w	3b8d6 <ull_conn_rx+0x119a>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   3aabc:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
   3aac0:	f894 21cd 	ldrb.w	r2, [r4, #461]	; 0x1cd
   3aac4:	428a      	cmp	r2, r1
   3aac6:	d002      	beq.n	3aace <ull_conn_rx+0x392>
   3aac8:	2b16      	cmp	r3, #22
   3aaca:	f000 8780 	beq.w	3b9ce <ull_conn_rx+0x1292>
			switch (llctrl->unknown_rsp.type) {
   3aace:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3aad0:	bf04      	itt	eq
   3aad2:	2301      	moveq	r3, #1
   3aad4:	7133      	strbeq	r3, [r6, #4]
		conn->procedure_expire = 0U;
   3aad6:	2300      	movs	r3, #0
   3aad8:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		break;
   3aadc:	e68d      	b.n	3a7fa <ull_conn_rx+0xbe>
		if ((conn->llcp_req == conn->llcp_ack) ||
   3aade:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3aae2:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3aae6:	429a      	cmp	r2, r3
   3aae8:	f43f aebb 	beq.w	3a862 <ull_conn_rx+0x126>
   3aaec:	f894 20f2 	ldrb.w	r2, [r4, #242]	; 0xf2
   3aaf0:	2a03      	cmp	r2, #3
   3aaf2:	f47f aeb6 	bne.w	3a862 <ull_conn_rx+0x126>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   3aaf6:	7f72      	ldrb	r2, [r6, #29]
   3aaf8:	2a01      	cmp	r2, #1
   3aafa:	f47f aeb2 	bne.w	3a862 <ull_conn_rx+0x126>
		if (conn->lll.role) {
   3aafe:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3ab02:	2a00      	cmp	r2, #0
   3ab04:	f2c0 8748 	blt.w	3b998 <ull_conn_rx+0x125c>
			conn->llcp_enc.pause_rx = 0U;
   3ab08:	f894 0176 	ldrb.w	r0, [r4, #374]	; 0x176
			conn->llcp_ack = conn->llcp_req;
   3ab0c:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
			conn->procedure_expire = 0U;
   3ab10:	2200      	movs	r2, #0
			conn->llcp_enc.pause_rx = 0U;
   3ab12:	f020 0003 	bic.w	r0, r0, #3
   3ab16:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
			conn->procedure_expire = 0U;
   3ab1a:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		if (conn->llcp_enc.refresh) {
   3ab1e:	0745      	lsls	r5, r0, #29
   3ab20:	f57f ae6b 	bpl.w	3a7fa <ull_conn_rx+0xbe>
			conn->llcp_enc.refresh = 0U;
   3ab24:	f36f 0082 	bfc	r0, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   3ab28:	2319      	movs	r3, #25
			conn->llcp_enc.refresh = 0U;
   3ab2a:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   3ab2e:	7133      	strb	r3, [r6, #4]
   3ab30:	e663      	b.n	3a7fa <ull_conn_rx+0xbe>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   3ab32:	7f73      	ldrb	r3, [r6, #29]
   3ab34:	2b18      	cmp	r3, #24
   3ab36:	f47f ae94 	bne.w	3a862 <ull_conn_rx+0x126>
	return conn_upd_curr && (conn_upd_curr != conn);
   3ab3a:	49d1      	ldr	r1, [pc, #836]	; (3ae80 <ull_conn_rx+0x744>)
   3ab3c:	680b      	ldr	r3, [r1, #0]
   3ab3e:	2b00      	cmp	r3, #0
   3ab40:	f000 84b6 	beq.w	3b4b0 <ull_conn_rx+0xd74>
   3ab44:	429c      	cmp	r4, r3
   3ab46:	f000 84b3 	beq.w	3b4b0 <ull_conn_rx+0xd74>
			nack = reject_ext_ind_send(conn, *rx,
   3ab4a:	2320      	movs	r3, #32
   3ab4c:	220f      	movs	r2, #15
				nack = reject_ext_ind_send(conn, *rx,
   3ab4e:	4631      	mov	r1, r6
   3ab50:	4620      	mov	r0, r4
}
   3ab52:	b005      	add	sp, #20
   3ab54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   3ab58:	f7fe be98 	b.w	3988c <reject_ext_ind_send>
	       (conn->lll.role &&
   3ab5c:	2a00      	cmp	r2, #0
   3ab5e:	f000 843e 	beq.w	3b3de <ull_conn_rx+0xca2>
   3ab62:	f1b8 0f03 	cmp.w	r8, #3
   3ab66:	f200 846d 	bhi.w	3b444 <ull_conn_rx+0xd08>
   3ab6a:	f1b8 0f01 	cmp.w	r8, #1
   3ab6e:	f67f ae4a 	bls.w	3a806 <ull_conn_rx+0xca>
	switch (opcode) {
   3ab72:	f1b8 0f03 	cmp.w	r8, #3
   3ab76:	f000 828f 	beq.w	3b098 <ull_conn_rx+0x95c>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   3ab7a:	7f73      	ldrb	r3, [r6, #29]
   3ab7c:	2b02      	cmp	r3, #2
   3ab7e:	f47f ae70 	bne.w	3a862 <ull_conn_rx+0x126>
	conn->llcp_terminate.reason_final =
   3ab82:	f896 2020 	ldrb.w	r2, [r6, #32]
   3ab86:	f884 2153 	strb.w	r2, [r4, #339]	; 0x153
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3ab8a:	2301      	movs	r3, #1
   3ab8c:	7133      	strb	r3, [r6, #4]
}
   3ab8e:	e634      	b.n	3a7fa <ull_conn_rx+0xbe>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   3ab90:	7f73      	ldrb	r3, [r6, #29]
   3ab92:	2b03      	cmp	r3, #3
   3ab94:	f47f ae65 	bne.w	3a862 <ull_conn_rx+0x126>
		if (!conn->lll.role) {
   3ab98:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3ab9c:	2b00      	cmp	r3, #0
   3ab9e:	f2c0 8526 	blt.w	3b5ee <ull_conn_rx+0xeb2>
			if ((conn->llcp_phy.ack !=
   3aba2:	f894 21cd 	ldrb.w	r2, [r4, #461]	; 0x1cd
			     conn->llcp_phy.req) &&
   3aba6:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
			if ((conn->llcp_phy.ack !=
   3abaa:	428a      	cmp	r2, r1
   3abac:	d007      	beq.n	3abbe <ull_conn_rx+0x482>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   3abae:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
   3abb2:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
   3abb6:	3b01      	subs	r3, #1
   3abb8:	2b02      	cmp	r3, #2
   3abba:	f240 86ea 	bls.w	3b992 <ull_conn_rx+0x1256>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   3abbe:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3abc2:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
   3abc6:	1a1b      	subs	r3, r3, r0
   3abc8:	f003 0303 	and.w	r3, r3, #3
   3abcc:	2b02      	cmp	r3, #2
   3abce:	f000 85ef 	beq.w	3b7b0 <ull_conn_rx+0x1074>
				     LLCP_ENCRYPTION)) ||
   3abd2:	f894 0194 	ldrb.w	r0, [r4, #404]	; 0x194
   3abd6:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   3abda:	4298      	cmp	r0, r3
   3abdc:	f000 8694 	beq.w	3b908 <ull_conn_rx+0x11cc>
				nack = reject_ext_ind_send(conn, *rx,
   3abe0:	232a      	movs	r3, #42	; 0x2a
   3abe2:	2216      	movs	r2, #22
   3abe4:	e7b3      	b.n	3ab4e <ull_conn_rx+0x412>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   3abe6:	7f75      	ldrb	r5, [r6, #29]
   3abe8:	2d06      	cmp	r5, #6
   3abea:	f47f ae3a 	bne.w	3a862 <ull_conn_rx+0x126>
	if (!conn->llcp_version.tx) {
   3abee:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   3abf2:	07df      	lsls	r7, r3, #31
   3abf4:	f140 85e3 	bpl.w	3b7be <ull_conn_rx+0x1082>
	} else if (!conn->llcp_version.rx) {
   3abf8:	f013 0302 	ands.w	r3, r3, #2
   3abfc:	f47f adfb 	bne.w	3a7f6 <ull_conn_rx+0xba>
		conn->llcp_version.ack = conn->llcp_version.req;
   3ac00:	f894 2148 	ldrb.w	r2, [r4, #328]	; 0x148
   3ac04:	f884 2149 	strb.w	r2, [r4, #329]	; 0x149
		conn->procedure_expire = 0U;
   3ac08:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_version.version_number = v->version_number;
   3ac0c:	f896 2020 	ldrb.w	r2, [r6, #32]
	conn->llcp_version.rx = 1U;
   3ac10:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
	conn->llcp_version.version_number = v->version_number;
   3ac14:	f884 214b 	strb.w	r2, [r4, #331]	; 0x14b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   3ac18:	f8d6 2021 	ldr.w	r2, [r6, #33]	; 0x21
   3ac1c:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
	conn->llcp_version.rx = 1U;
   3ac20:	f043 0302 	orr.w	r3, r3, #2
   3ac24:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
	return 0;
   3ac28:	e5e7      	b.n	3a7fa <ull_conn_rx+0xbe>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   3ac2a:	7f73      	ldrb	r3, [r6, #29]
   3ac2c:	2b02      	cmp	r3, #2
   3ac2e:	f47f ae18 	bne.w	3a862 <ull_conn_rx+0x126>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   3ac32:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3ac36:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3ac3a:	429a      	cmp	r2, r3
   3ac3c:	d004      	beq.n	3ac48 <ull_conn_rx+0x50c>
   3ac3e:	f894 20f2 	ldrb.w	r2, [r4, #242]	; 0xf2
   3ac42:	2a03      	cmp	r2, #3
   3ac44:	f000 86b2 	beq.w	3b9ac <ull_conn_rx+0x1270>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   3ac48:	f894 21cc 	ldrb.w	r2, [r4, #460]	; 0x1cc
   3ac4c:	f894 31cd 	ldrb.w	r3, [r4, #461]	; 0x1cd
   3ac50:	4293      	cmp	r3, r2
   3ac52:	f000 854f 	beq.w	3b6f4 <ull_conn_rx+0xfb8>
		rej_ext_ind->error_code = rej_ind->error_code;
   3ac56:	f896 1020 	ldrb.w	r1, [r6, #32]
   3ac5a:	f886 1021 	strb.w	r1, [r6, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   3ac5e:	2923      	cmp	r1, #35	; 0x23
   3ac60:	d012      	beq.n	3ac88 <ull_conn_rx+0x54c>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3ac62:	f884 21cd 	strb.w	r2, [r4, #461]	; 0x1cd
		conn->llcp_phy.pause_tx = 0U;
   3ac66:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3ac6a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   3ac6e:	f36f 0200 	bfc	r2, #0, #1
   3ac72:	f884 21cf 	strb.w	r2, [r4, #463]	; 0x1cf
		conn->procedure_expire = 0U;
   3ac76:	2200      	movs	r2, #0
   3ac78:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3ac7c:	f3c3 0202 	ubfx	r2, r3, #0, #3
   3ac80:	f362 1306 	bfi	r3, r2, #4, #3
   3ac84:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   3ac88:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   3ac8c:	0758      	lsls	r0, r3, #29
   3ac8e:	f57f adb2 	bpl.w	3a7f6 <ull_conn_rx+0xba>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3ac92:	231c      	movs	r3, #28
   3ac94:	7133      	strb	r3, [r6, #4]
	p->status = rej_ext_ind->error_code;
   3ac96:	7731      	strb	r1, [r6, #28]
	p->tx = conn->lll.phy_tx;
   3ac98:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   3ac9c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3aca0:	7773      	strb	r3, [r6, #29]
	p->rx = conn->lll.phy_rx;
   3aca2:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   3aca6:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3acaa:	77b3      	strb	r3, [r6, #30]
	if (err) {
   3acac:	e5a5      	b.n	3a7fa <ull_conn_rx+0xbe>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   3acae:	7f73      	ldrb	r3, [r6, #29]
   3acb0:	2b09      	cmp	r3, #9
   3acb2:	f47f add6 	bne.w	3a862 <ull_conn_rx+0x126>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   3acb6:	6a32      	ldr	r2, [r6, #32]
	feat &= LL_FEAT_BIT_MASK;
   3acb8:	4972      	ldr	r1, [pc, #456]	; (3ae84 <ull_conn_rx+0x748>)
   3acba:	6a73      	ldr	r3, [r6, #36]	; 0x24
   3acbc:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   3acbe:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   3acc2:	400a      	ands	r2, r1
   3acc4:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
	feat &= LL_FEAT_BIT_MASK;
   3acc8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   3accc:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	feat &= LL_FEAT_BIT_MASK;
   3acd0:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   3acd4:	401a      	ands	r2, r3
   3acd6:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
   3acda:	6a75      	ldr	r5, [r6, #36]	; 0x24
   3acdc:	6a37      	ldr	r7, [r6, #32]
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   3acde:	f7fc f9c1 	bl	37064 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   3ace2:	f005 03ff 	and.w	r3, r5, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   3ace6:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_peer =
   3acea:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	conn->common.fex_valid = 1U;
   3acee:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3acf2:	f043 0301 	orr.w	r3, r3, #1
   3acf6:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	conn->llcp_feature.ack = conn->llcp_feature.req;
   3acfa:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
   3acfe:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
	feat &= LL_FEAT_BIT_MASK;
   3ad02:	4b60      	ldr	r3, [pc, #384]	; (3ae84 <ull_conn_rx+0x748>)
   3ad04:	433b      	orrs	r3, r7
	feat_result = feat_to_keep & feat_octet0;
   3ad06:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   3ad08:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   3ad0c:	f027 07ff 	bic.w	r7, r7, #255	; 0xff
   3ad10:	433b      	orrs	r3, r7
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   3ad12:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
	feat_result &= 0xFF;
   3ad16:	2200      	movs	r2, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   3ad18:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->procedure_expire = 0U;
   3ad1c:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	conn->llcp_feature.features_peer =
   3ad20:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
}
   3ad24:	e569      	b.n	3a7fa <ull_conn_rx+0xbe>
   3ad26:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   3ad2a:	2b00      	cmp	r3, #0
   3ad2c:	f6bf ad99 	bge.w	3a862 <ull_conn_rx+0x126>
   3ad30:	7f75      	ldrb	r5, [r6, #29]
   3ad32:	2d01      	cmp	r5, #1
   3ad34:	f47f ad95 	bne.w	3a862 <ull_conn_rx+0x126>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3ad38:	4853      	ldr	r0, [pc, #332]	; (3ae88 <ull_conn_rx+0x74c>)
   3ad3a:	f7f9 f875 	bl	33e28 <mem_acquire>
		if (!tx) {
   3ad3e:	2800      	cmp	r0, #0
   3ad40:	f000 838f 	beq.w	3b462 <ull_conn_rx+0xd26>
	conn->llcp_enc.pause_rx = 1U;
   3ad44:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   3ad48:	f022 0205 	bic.w	r2, r2, #5
   3ad4c:	f042 0205 	orr.w	r2, r2, #5
   3ad50:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
	conn->lll.enc_rx = 0;
   3ad54:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
   3ad58:	f36f 02c3 	bfc	r2, #3, #1
   3ad5c:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3ad60:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3ad62:	7145      	strb	r5, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3ad64:	f042 0203 	orr.w	r2, r2, #3
   3ad68:	7102      	strb	r2, [r0, #4]
	    conn->tx_head &&
   3ad6a:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   3ad6e:	210b      	movs	r1, #11
   3ad70:	71c1      	strb	r1, [r0, #7]
	if (
   3ad72:	2a00      	cmp	r2, #0
   3ad74:	f000 838c 	beq.w	3b490 <ull_conn_rx+0xd54>
	    !conn->llcp_enc.pause_tx &&
   3ad78:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   3ad7c:	0789      	lsls	r1, r1, #30
   3ad7e:	f100 8387 	bmi.w	3b490 <ull_conn_rx+0xd54>
	    !conn->llcp_phy.pause_tx &&
   3ad82:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3ad86:	07cb      	lsls	r3, r1, #31
   3ad88:	f100 8382 	bmi.w	3b490 <ull_conn_rx+0xd54>
		if (conn->tx_head == conn->tx_data) {
   3ad8c:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3ad90:	428a      	cmp	r2, r1
   3ad92:	f000 87bf 	beq.w	3bd14 <ull_conn_rx+0x15d8>
		} else if (!conn->tx_ctrl) {
   3ad96:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3ad9a:	2900      	cmp	r1, #0
   3ad9c:	f000 87e3 	beq.w	3bd66 <ull_conn_rx+0x162a>
	tx->next = conn->tx_ctrl_last->next;
   3ada0:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   3ada4:	6811      	ldr	r1, [r2, #0]
   3ada6:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3ada8:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   3adaa:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   3adac:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3adb0:	2a00      	cmp	r2, #0
   3adb2:	f47f ad20 	bne.w	3a7f6 <ull_conn_rx+0xba>
   3adb6:	e599      	b.n	3a8ec <ull_conn_rx+0x1b0>
   3adb8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (conn->lll.role ||
   3adbc:	2b00      	cmp	r3, #0
   3adbe:	f6ff ad50 	blt.w	3a862 <ull_conn_rx+0x126>
   3adc2:	7f73      	ldrb	r3, [r6, #29]
   3adc4:	2b18      	cmp	r3, #24
   3adc6:	f47f ad4c 	bne.w	3a862 <ull_conn_rx+0x126>
		if (!conn->lll.role &&
   3adca:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   3adce:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   3add2:	429a      	cmp	r2, r3
   3add4:	f43f ad0f 	beq.w	3a7f6 <ull_conn_rx+0xba>
		    (conn->llcp_conn_param.state ==
   3add8:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		     conn->llcp_conn_param.ack) &&
   3addc:	f003 030f 	and.w	r3, r3, #15
   3ade0:	2b04      	cmp	r3, #4
   3ade2:	f47f ad08 	bne.w	3a7f6 <ull_conn_rx+0xba>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   3ade6:	6a37      	ldr	r7, [r6, #32]
   3ade8:	6a75      	ldr	r5, [r6, #36]	; 0x24
				cpr->preferred_periodicity;
   3adea:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3adee:	b2bb      	uxth	r3, r7
   3adf0:	2b05      	cmp	r3, #5
   3adf2:	f240 85ca 	bls.w	3b98a <ull_conn_rx+0x124e>
   3adf6:	0c38      	lsrs	r0, r7, #16
   3adf8:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   3adfc:	f200 85c5 	bhi.w	3b98a <ull_conn_rx+0x124e>
			    (interval_max > 3200) ||
   3ae00:	4283      	cmp	r3, r0
   3ae02:	f200 85c2 	bhi.w	3b98a <ull_conn_rx+0x124e>
   3ae06:	b2ab      	uxth	r3, r5
			    (interval_min > interval_max) ||
   3ae08:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   3ae0c:	f080 85bd 	bcs.w	3b98a <ull_conn_rx+0x124e>
   3ae10:	0c29      	lsrs	r1, r5, #16
			    (latency > 499) ||
   3ae12:	f1a1 020a 	sub.w	r2, r1, #10
   3ae16:	b292      	uxth	r2, r2
   3ae18:	f640 4e76 	movw	lr, #3190	; 0xc76
   3ae1c:	4572      	cmp	r2, lr
   3ae1e:	f200 85b4 	bhi.w	3b98a <ull_conn_rx+0x124e>
			     ((latency + 1) * interval_max)) ||
   3ae22:	3301      	adds	r3, #1
   3ae24:	b29b      	uxth	r3, r3
   3ae26:	fb00 f303 	mul.w	r3, r0, r3
			    (timeout < 10) || (timeout > 3200) ||
   3ae2a:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   3ae2e:	f080 85ac 	bcs.w	3b98a <ull_conn_rx+0x124e>
			     ((latency + 1) * interval_max)) ||
   3ae32:	4584      	cmp	ip, r0
   3ae34:	f200 85a9 	bhi.w	3b98a <ull_conn_rx+0x124e>
			conn->llcp_conn_param.interval_min = interval_min;
   3ae38:	e9c4 7566 	strd	r7, r5, [r4, #408]	; 0x198
			conn->procedure_expire = 0U;
   3ae3c:	2300      	movs	r3, #0
			conn->llcp_conn_param.preferred_periodicity =
   3ae3e:	f884 c1a0 	strb.w	ip, [r4, #416]	; 0x1a0
			conn->procedure_expire = 0U;
   3ae42:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   3ae46:	f8d6 2029 	ldr.w	r2, [r6, #41]	; 0x29
   3ae4a:	f8d6 302d 	ldr.w	r3, [r6, #45]	; 0x2d
   3ae4e:	f8d6 1031 	ldr.w	r1, [r6, #49]	; 0x31
			conn->llcp_conn_param.reference_conn_event_count =
   3ae52:	f8c4 11aa 	str.w	r1, [r4, #426]	; 0x1aa
   3ae56:	f8c4 21a2 	str.w	r2, [r4, #418]	; 0x1a2
   3ae5a:	f8c4 31a6 	str.w	r3, [r4, #422]	; 0x1a6
				sys_le16_to_cpu(cpr->offset5);
   3ae5e:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
   3ae62:	f896 1036 	ldrb.w	r1, [r6, #54]	; 0x36
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   3ae66:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset5);
   3ae6a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset5 =
   3ae6e:	f8a4 31ae 	strh.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   3ae72:	2301      	movs	r3, #1
   3ae74:	f363 0203 	bfi	r2, r3, #0, #4
   3ae78:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3ae7c:	e4bb      	b.n	3a7f6 <ull_conn_rx+0xba>
   3ae7e:	bf00      	nop
   3ae80:	200058bc 	.word	0x200058bc
   3ae84:	087830d0 	.word	0x087830d0
   3ae88:	200059a0 	.word	0x200059a0
   3ae8c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (conn->lll.role ||
   3ae90:	2b00      	cmp	r3, #0
   3ae92:	f6ff ace6 	blt.w	3a862 <ull_conn_rx+0x126>
   3ae96:	7f73      	ldrb	r3, [r6, #29]
   3ae98:	2b09      	cmp	r3, #9
   3ae9a:	f47f ace2 	bne.w	3a862 <ull_conn_rx+0x126>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   3ae9e:	4662      	mov	r2, ip
   3aea0:	4631      	mov	r1, r6
   3aea2:	4620      	mov	r0, r4
}
   3aea4:	b005      	add	sp, #20
   3aea6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   3aeaa:	f7fe bc7b 	b.w	397a4 <feature_rsp_send>
   3aeae:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
#if defined(CONFIG_BT_CENTRAL)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   3aeb2:	2b00      	cmp	r3, #0
   3aeb4:	f6ff acd5 	blt.w	3a862 <ull_conn_rx+0x126>
   3aeb8:	7f73      	ldrb	r3, [r6, #29]
   3aeba:	2b03      	cmp	r3, #3
   3aebc:	f47f acd1 	bne.w	3a862 <ull_conn_rx+0x126>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   3aec0:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
					 conn->lll.phy_rx))) {
   3aec4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
			if (!(p->phys & (conn->lll.phy_tx |
   3aec8:	f896 2020 	ldrb.w	r2, [r6, #32]
   3aecc:	430b      	orrs	r3, r1
   3aece:	f003 0307 	and.w	r3, r3, #7
   3aed2:	4213      	tst	r3, r2
   3aed4:	f43f ac91 	beq.w	3a7fa <ull_conn_rx+0xbe>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   3aed8:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3aedc:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3aee0:	1a9b      	subs	r3, r3, r2
   3aee2:	f003 0303 	and.w	r3, r3, #3
   3aee6:	2b02      	cmp	r3, #2
   3aee8:	f43f ac87 	beq.w	3a7fa <ull_conn_rx+0xbe>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   3aeec:	f104 00f5 	add.w	r0, r4, #245	; 0xf5
   3aef0:	f003 fe02 	bl	3eaf8 <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   3aef4:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
			conn->llcp.chan_map.initiate = 1U;
   3aef8:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_CHAN_MAP;
   3aefc:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
   3aefe:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   3af00:	f884 10f2 	strb.w	r1, [r4, #242]	; 0xf2
			conn->llcp_ack -= 2U;
   3af04:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3af08:	682a      	ldr	r2, [r5, #0]
			conn->llcp.chan_map.initiate = 1U;
   3af0a:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3af0e:	2101      	movs	r1, #1
			conn->llcp.chan_map.initiate = 1U;
   3af10:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3af14:	7111      	strb	r1, [r2, #4]

		break;
   3af16:	e470      	b.n	3a7fa <ull_conn_rx+0xbe>
   3af18:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   3af1c:	2b00      	cmp	r3, #0
   3af1e:	f6bf aca0 	bge.w	3a862 <ull_conn_rx+0x126>
   3af22:	7f73      	ldrb	r3, [r6, #29]
   3af24:	2b05      	cmp	r3, #5
   3af26:	f47f ac9c 	bne.w	3a862 <ull_conn_rx+0x126>
	if (!((ind->c_to_p_phy | ind->p_to_c_phy) & 0x07)) {
   3af2a:	f896 2020 	ldrb.w	r2, [r6, #32]
   3af2e:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3af32:	4313      	orrs	r3, r2
   3af34:	f013 0307 	ands.w	r3, r3, #7
   3af38:	f040 859d 	bne.w	3ba76 <ull_conn_rx+0x133a>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   3af3c:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
   3af40:	f894 21cd 	ldrb.w	r2, [r4, #461]	; 0x1cd
   3af44:	428a      	cmp	r2, r1
   3af46:	f43f ac56 	beq.w	3a7f6 <ull_conn_rx+0xba>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   3af4a:	f894 21ce 	ldrb.w	r2, [r4, #462]	; 0x1ce
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   3af4e:	f002 0203 	and.w	r2, r2, #3
   3af52:	2a02      	cmp	r2, #2
   3af54:	f47f ac4f 	bne.w	3a7f6 <ull_conn_rx+0xba>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3af58:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3af5c:	f884 11cd 	strb.w	r1, [r4, #461]	; 0x1cd
		conn->llcp_phy.pause_tx = 0U;
   3af60:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
		conn->procedure_expire = 0U;
   3af64:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_phy.pause_tx = 0U;
   3af68:	f363 0100 	bfi	r1, r3, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3af6c:	4610      	mov	r0, r2
   3af6e:	f362 1006 	bfi	r0, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   3af72:	f884 11cf 	strb.w	r1, [r4, #463]	; 0x1cf
		if (!conn->llcp_phy.cmd) {
   3af76:	0749      	lsls	r1, r1, #29
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3af78:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
   3af7c:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
   3af80:	f57f ac47 	bpl.w	3a812 <ull_conn_rx+0xd6>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3af84:	6829      	ldr	r1, [r5, #0]
   3af86:	201c      	movs	r0, #28
   3af88:	7108      	strb	r0, [r1, #4]
		p->status = 0U;
   3af8a:	7733      	strb	r3, [r6, #28]
		p->tx = conn->lll.phy_tx;
   3af8c:	7772      	strb	r2, [r6, #29]
		p->rx = conn->lll.phy_rx;
   3af8e:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   3af92:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3af96:	77b3      	strb	r3, [r6, #30]
		if (err) {
   3af98:	e42f      	b.n	3a7fa <ull_conn_rx+0xbe>
   3af9a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (conn->lll.role ||
   3af9e:	2b00      	cmp	r3, #0
   3afa0:	f6ff ac5f 	blt.w	3a862 <ull_conn_rx+0x126>
   3afa4:	7f73      	ldrb	r3, [r6, #29]
   3afa6:	2b03      	cmp	r3, #3
   3afa8:	f47f ac5b 	bne.w	3a862 <ull_conn_rx+0x126>
		if (!conn->lll.role &&
   3afac:	f894 21cd 	ldrb.w	r2, [r4, #461]	; 0x1cd
   3afb0:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
   3afb4:	429a      	cmp	r2, r3
   3afb6:	f43f ac1e 	beq.w	3a7f6 <ull_conn_rx+0xba>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   3afba:	f894 21ce 	ldrb.w	r2, [r4, #462]	; 0x1ce
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   3afbe:	f002 0303 	and.w	r3, r2, #3
   3afc2:	2b02      	cmp	r3, #2
   3afc4:	f47f ac17 	bne.w	3a7f6 <ull_conn_rx+0xba>
			conn->llcp_phy.tx &= p->rx_phys;
   3afc8:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3afcc:	f3c2 0182 	ubfx	r1, r2, #2, #3
   3afd0:	400b      	ands	r3, r1
			conn->llcp_phy.rx &= p->tx_phys;
   3afd2:	f896 1020 	ldrb.w	r1, [r6, #32]
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   3afd6:	009b      	lsls	r3, r3, #2
   3afd8:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   3afdc:	ea01 1252 	and.w	r2, r1, r2, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   3afe0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3afe4:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   3afe8:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3afec:	d001      	beq.n	3aff2 <ull_conn_rx+0x8b6>
   3afee:	2b1f      	cmp	r3, #31
   3aff0:	d805      	bhi.n	3affe <ull_conn_rx+0x8c2>
				conn->llcp_phy.tx = 0;
   3aff2:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
   3aff6:	f003 0303 	and.w	r3, r3, #3
   3affa:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
			conn->llcp_phy.pause_tx = 1U;
   3affe:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
			conn->procedure_expire = 0U;
   3b002:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   3b004:	f043 0301 	orr.w	r3, r3, #1
   3b008:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
			conn->procedure_expire = 0U;
   3b00c:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b010:	f7ff bbf1 	b.w	3a7f6 <ull_conn_rx+0xba>
   3b014:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   3b018:	2b00      	cmp	r3, #0
   3b01a:	f6ff ac22 	blt.w	3a862 <ull_conn_rx+0x126>
   3b01e:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   3b022:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   3b026:	429a      	cmp	r2, r3
   3b028:	f43f ac1b 	beq.w	3a862 <ull_conn_rx+0x126>
   3b02c:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3b030:	2b03      	cmp	r3, #3
   3b032:	f47f ac16 	bne.w	3a862 <ull_conn_rx+0x126>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   3b036:	7f73      	ldrb	r3, [r6, #29]
   3b038:	2b01      	cmp	r3, #1
   3b03a:	f47f ac12 	bne.w	3a862 <ull_conn_rx+0x126>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3b03e:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
   3b042:	f36f 0201 	bfc	r2, #0, #2
   3b046:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b04a:	7133      	strb	r3, [r6, #4]
		break;
   3b04c:	f7ff bbd5 	b.w	3a7fa <ull_conn_rx+0xbe>
   3b050:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (conn->lll.role ||
   3b054:	2b00      	cmp	r3, #0
   3b056:	f6ff ac04 	blt.w	3a862 <ull_conn_rx+0x126>
   3b05a:	7f73      	ldrb	r3, [r6, #29]
   3b05c:	2b0d      	cmp	r3, #13
   3b05e:	f47f ac00 	bne.w	3a862 <ull_conn_rx+0x126>
		memcpy(&conn->llcp.encryption.skd[8],
   3b062:	2208      	movs	r2, #8
   3b064:	f106 0120 	add.w	r1, r6, #32
   3b068:	f504 7085 	add.w	r0, r4, #266	; 0x10a
   3b06c:	f010 fdf4 	bl	4bc58 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
   3b070:	2204      	movs	r2, #4
   3b072:	f106 0128 	add.w	r1, r6, #40	; 0x28
   3b076:	f104 0098 	add.w	r0, r4, #152	; 0x98
   3b07a:	f010 fded 	bl	4bc58 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   3b07e:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b082:	682a      	ldr	r2, [r5, #0]
		conn->llcp_enc.pause_rx = 1U;
   3b084:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b088:	2101      	movs	r1, #1
		conn->llcp_enc.pause_rx = 1U;
   3b08a:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b08e:	7111      	strb	r1, [r2, #4]
		break;
   3b090:	f7ff bbb3 	b.w	3a7fa <ull_conn_rx+0xbe>
   3b094:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   3b098:	2b00      	cmp	r3, #0
   3b09a:	f6bf abe2 	bge.w	3a862 <ull_conn_rx+0x126>
   3b09e:	7f73      	ldrb	r3, [r6, #29]
   3b0a0:	2b17      	cmp	r3, #23
   3b0a2:	f47f abde 	bne.w	3a862 <ull_conn_rx+0x126>
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   3b0a6:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3b0aa:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3b0ae:	1a9b      	subs	r3, r3, r2
   3b0b0:	f003 0303 	and.w	r3, r3, #3
   3b0b4:	2b02      	cmp	r3, #2
   3b0b6:	f000 8585 	beq.w	3bbc4 <ull_conn_rx+0x1488>
		memcpy(&conn->llcp_enc.rand[0],
   3b0ba:	2208      	movs	r2, #8
   3b0bc:	f106 0120 	add.w	r1, r6, #32
   3b0c0:	f204 1079 	addw	r0, r4, #377	; 0x179
   3b0c4:	f010 fdc8 	bl	4bc58 <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   3b0c8:	8d33      	ldrh	r3, [r6, #40]	; 0x28
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   3b0ca:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   3b0ce:	f8a4 3177 	strh.w	r3, [r4, #375]	; 0x177
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b0d2:	6829      	ldr	r1, [r5, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   3b0d4:	2301      	movs	r3, #1
   3b0d6:	f363 0201 	bfi	r2, r3, #0, #2
   3b0da:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b0de:	710b      	strb	r3, [r1, #4]
		conn->llcp_ack -= 2U;
   3b0e0:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
		conn->llcp_type = LLCP_ENCRYPTION;
   3b0e4:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
   3b0e6:	3b02      	subs	r3, #2
   3b0e8:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
		memcpy(&conn->llcp.encryption.skd[0],
   3b0ec:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
   3b0ee:	f884 10f2 	strb.w	r1, [r4, #242]	; 0xf2
		memcpy(&conn->llcp.encryption.skd[0],
   3b0f2:	f504 7081 	add.w	r0, r4, #258	; 0x102
   3b0f6:	f106 012a 	add.w	r1, r6, #42	; 0x2a
   3b0fa:	f010 fdad 	bl	4bc58 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   3b0fe:	2204      	movs	r2, #4
   3b100:	f106 0132 	add.w	r1, r6, #50	; 0x32
   3b104:	f104 0094 	add.w	r0, r4, #148	; 0x94
   3b108:	f010 fda6 	bl	4bc58 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   3b10c:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
		conn->procedure_expire = conn->procedure_reload;
   3b110:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   3b114:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->llcp_enc.pause_rx = 1U;
   3b118:	f043 0301 	orr.w	r3, r3, #1
   3b11c:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
		break;
   3b120:	f7ff bb6b 	b.w	3a7fa <ull_conn_rx+0xbe>
   3b124:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   3b128:	2b00      	cmp	r3, #0
   3b12a:	f6bf ab9a 	bge.w	3a862 <ull_conn_rx+0x126>
   3b12e:	7f73      	ldrb	r3, [r6, #29]
   3b130:	2b0c      	cmp	r3, #12
   3b132:	f47f ab96 	bne.w	3a862 <ull_conn_rx+0x126>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   3b136:	f8b6 1029 	ldrh.w	r1, [r6, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   3b13a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3b13c:	1acb      	subs	r3, r1, r3
   3b13e:	041b      	lsls	r3, r3, #16
   3b140:	f100 8497 	bmi.w	3ba72 <ull_conn_rx+0x1336>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3b144:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3b148:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3b14c:	1a9b      	subs	r3, r3, r2
   3b14e:	f003 0303 	and.w	r3, r3, #3
   3b152:	2b02      	cmp	r3, #2
   3b154:	f000 8486 	beq.w	3ba64 <ull_conn_rx+0x1328>
	if (!conn_upd_curr) {
   3b158:	4bd2      	ldr	r3, [pc, #840]	; (3b4a4 <ull_conn_rx+0xd68>)
   3b15a:	681a      	ldr	r2, [r3, #0]
   3b15c:	2a00      	cmp	r2, #0
   3b15e:	f000 8526 	beq.w	3bbae <ull_conn_rx+0x1472>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   3b162:	f896 3020 	ldrb.w	r3, [r6, #32]
   3b166:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   3b16a:	f8b6 3021 	ldrh.w	r3, [r6, #33]	; 0x21
   3b16e:	f240 42e2 	movw	r2, #1250	; 0x4e2
   3b172:	fb02 f303 	mul.w	r3, r2, r3
	conn->llcp_cu.win_offset_us =
   3b176:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   3b17a:	f8d6 3023 	ldr.w	r3, [r6, #35]	; 0x23
	conn->llcp_cu.interval =
   3b17e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   3b182:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   3b186:	f896 2027 	ldrb.w	r2, [r6, #39]	; 0x27
   3b18a:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   3b18e:	f8a4 10f4 	strh.w	r1, [r4, #244]	; 0xf4
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   3b192:	f023 030f 	bic.w	r3, r3, #15
   3b196:	f043 0308 	orr.w	r3, r3, #8
   3b19a:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
	conn->llcp_cu.ack--;
   3b19e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   3b1a2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp_cu.timeout =
   3b1a6:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
	conn->llcp_cu.ack--;
   3b1aa:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   3b1ac:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
	conn->llcp_cu.ack--;
   3b1b0:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	link->mem = conn->llcp_rx;
   3b1b4:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   3b1b6:	682a      	ldr	r2, [r5, #0]
   3b1b8:	6017      	str	r7, [r2, #0]
	conn->llcp_rx = *rx;
   3b1ba:	682a      	ldr	r2, [r5, #0]
   3b1bc:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
	*rx = NULL;
   3b1c0:	2300      	movs	r3, #0
   3b1c2:	602b      	str	r3, [r5, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   3b1c4:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   3b1c8:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   3b1cc:	4293      	cmp	r3, r2
   3b1ce:	f43f ac82 	beq.w	3aad6 <ull_conn_rx+0x39a>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
   3b1d2:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   3b1d6:	f003 030e 	and.w	r3, r3, #14
   3b1da:	2b04      	cmp	r3, #4
   3b1dc:	f47f ac7b 	bne.w	3aad6 <ull_conn_rx+0x39a>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3b1e0:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
		if (err) {
   3b1e4:	e477      	b.n	3aad6 <ull_conn_rx+0x39a>
   3b1e6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   3b1ea:	2b00      	cmp	r3, #0
   3b1ec:	f6bf ab39 	bge.w	3a862 <ull_conn_rx+0x126>
   3b1f0:	7f73      	ldrb	r3, [r6, #29]
   3b1f2:	2b08      	cmp	r3, #8
   3b1f4:	f47f ab35 	bne.w	3a862 <ull_conn_rx+0x126>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   3b1f8:	f8b6 5025 	ldrh.w	r5, [r6, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   3b1fc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3b1fe:	1aeb      	subs	r3, r5, r3
   3b200:	041f      	lsls	r7, r3, #16
   3b202:	f100 8436 	bmi.w	3ba72 <ull_conn_rx+0x1336>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3b206:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3b20a:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3b20e:	1a9b      	subs	r3, r3, r2
   3b210:	f003 0303 	and.w	r3, r3, #3
   3b214:	2b02      	cmp	r3, #2
   3b216:	f000 8425 	beq.w	3ba64 <ull_conn_rx+0x1328>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   3b21a:	2205      	movs	r2, #5
   3b21c:	f106 0120 	add.w	r1, r6, #32
   3b220:	f104 00f5 	add.w	r0, r4, #245	; 0xf5
   3b224:	f010 fd18 	bl	4bc58 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   3b228:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
	conn->llcp_ack -= 2U;
   3b22c:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
	conn->llcp.chan_map.instant = instant;
   3b230:	f8a4 50fa 	strh.w	r5, [r4, #250]	; 0xfa
	conn->llcp.chan_map.initiate = 0U;
   3b234:	f36f 0200 	bfc	r2, #0, #1
   3b238:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
	conn->llcp_type = LLCP_CHAN_MAP;
   3b23c:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
   3b23e:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b240:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   3b242:	f884 10f2 	strb.w	r1, [r4, #242]	; 0xf2
	conn->llcp_ack -= 2U;
   3b246:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b24a:	7132      	strb	r2, [r6, #4]
		if (err) {
   3b24c:	f7ff bad5 	b.w	3a7fa <ull_conn_rx+0xbe>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   3b250:	7f75      	ldrb	r5, [r6, #29]
   3b252:	2d01      	cmp	r5, #1
   3b254:	f47f ab05 	bne.w	3a862 <ull_conn_rx+0x126>
	} else if (!conn->lll.role) {
   3b258:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3b25c:	2b00      	cmp	r3, #0
   3b25e:	f2c0 80f8 	blt.w	3b452 <ull_conn_rx+0xd16>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3b262:	4891      	ldr	r0, [pc, #580]	; (3b4a8 <ull_conn_rx+0xd6c>)
   3b264:	f7f8 fde0 	bl	33e28 <mem_acquire>
		if (!tx) {
   3b268:	2800      	cmp	r0, #0
   3b26a:	f000 80fa 	beq.w	3b462 <ull_conn_rx+0xd26>
	conn->llcp_enc.pause_rx = 1U;
   3b26e:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   3b272:	f042 0201 	orr.w	r2, r2, #1
   3b276:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
	conn->lll.enc_rx = 0;
   3b27a:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
   3b27e:	f022 0218 	bic.w	r2, r2, #24
   3b282:	e56b      	b.n	3ad5c <ull_conn_rx+0x620>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   3b284:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
   3b288:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   3b28c:	429a      	cmp	r2, r3
   3b28e:	f43f aab2 	beq.w	3a7f6 <ull_conn_rx+0xba>
	conn->procedure_expire = 0U;
   3b292:	2100      	movs	r1, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3b294:	2209      	movs	r2, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   3b296:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
	conn->procedure_expire = 0U;
   3b29a:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3b29e:	7772      	strb	r2, [r6, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   3b2a0:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   3b2a4:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   3b2a8:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   3b2ac:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
   3b2b0:	84f3      	strh	r3, [r6, #38]	; 0x26
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3b2b2:	2415      	movs	r4, #21
   3b2b4:	77f4      	strb	r4, [r6, #31]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   3b2b6:	8430      	strh	r0, [r6, #32]
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   3b2b8:	84b1      	strh	r1, [r6, #36]	; 0x24
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   3b2ba:	8472      	strh	r2, [r6, #34]	; 0x22
	if (err) {
   3b2bc:	f7ff ba9d 	b.w	3a7fa <ull_conn_rx+0xbe>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   3b2c0:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   3b2c4:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   3b2c8:	4293      	cmp	r3, r2
   3b2ca:	f43f aa94 	beq.w	3a7f6 <ull_conn_rx+0xba>
	if (!lll->role && (rej_ext_ind->error_code ==
   3b2ce:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
	return ((uint16_t)src[1] << 8) | src[0];
   3b2d2:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3b2d6:	2900      	cmp	r1, #0
   3b2d8:	f2c0 821c 	blt.w	3b714 <ull_conn_rx+0xfd8>
   3b2dc:	2b1a      	cmp	r3, #26
   3b2de:	f000 85b1 	beq.w	3be44 <ull_conn_rx+0x1708>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   3b2e2:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3b2e6:	f003 010f 	and.w	r1, r3, #15
   3b2ea:	2904      	cmp	r1, #4
   3b2ec:	d106      	bne.n	3b2fc <ull_conn_rx+0xbc0>
	conn_upd_curr = NULL;
   3b2ee:	496d      	ldr	r1, [pc, #436]	; (3b4a4 <ull_conn_rx+0xd68>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3b2f0:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
	conn_upd_curr = NULL;
   3b2f4:	2200      	movs	r2, #0
   3b2f6:	600a      	str	r2, [r1, #0]
		conn->procedure_expire = 0U;
   3b2f8:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   3b2fc:	06d8      	lsls	r0, r3, #27
   3b2fe:	f57f aa7a 	bpl.w	3a7f6 <ull_conn_rx+0xba>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3b302:	2318      	movs	r3, #24
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3b304:	f01c 0f01 	tst.w	ip, #1
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3b308:	7133      	strb	r3, [r6, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3b30a:	f040 8469 	bne.w	3bbe0 <ull_conn_rx+0x14a4>
	cu->status = rej_ext_ind->error_code;
   3b30e:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3b312:	7733      	strb	r3, [r6, #28]
	cu->interval = lll->interval;
   3b314:	f8d4 202a 	ldr.w	r2, [r4, #42]	; 0x2a
   3b318:	f8c6 201e 	str.w	r2, [r6, #30]
	cu->timeout = conn->supervision_reload *
   3b31c:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
		      lll->interval * 125U / 1000;
   3b320:	b292      	uxth	r2, r2
	cu->timeout = conn->supervision_reload *
   3b322:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   3b326:	227d      	movs	r2, #125	; 0x7d
   3b328:	fb02 f303 	mul.w	r3, r2, r3
   3b32c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3b330:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   3b334:	8473      	strh	r3, [r6, #34]	; 0x22
	if (err) {
   3b336:	f7ff ba60 	b.w	3a7fa <ull_conn_rx+0xbe>
		if ((conn->llcp_ack != conn->llcp_req) &&
   3b33a:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   3b33e:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   3b342:	4293      	cmp	r3, r2
   3b344:	f43f aa57 	beq.w	3a7f6 <ull_conn_rx+0xba>
   3b348:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3b34c:	2b03      	cmp	r3, #3
   3b34e:	f47f aa52 	bne.w	3a7f6 <ull_conn_rx+0xba>
	conn->llcp_enc.pause_rx = 0U;
   3b352:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
	conn->llcp_ack = conn->llcp_req;
   3b356:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
	conn->llcp_enc.pause_rx = 0U;
   3b35a:	f023 0303 	bic.w	r3, r3, #3
	conn->procedure_expire = 0U;
   3b35e:	2100      	movs	r1, #0
	conn->llcp_enc.pause_rx = 0U;
   3b360:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
	conn->procedure_expire = 0U;
   3b364:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   3b368:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3b36c:	f886 3020 	strb.w	r3, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   3b370:	220d      	movs	r2, #13
   3b372:	77f2      	strb	r2, [r6, #31]
	if (err) {
   3b374:	f7ff ba41 	b.w	3a7fa <ull_conn_rx+0xbe>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   3b378:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
   3b37c:	f894 31cd 	ldrb.w	r3, [r4, #461]	; 0x1cd
   3b380:	428b      	cmp	r3, r1
   3b382:	f43f aa38 	beq.w	3a7f6 <ull_conn_rx+0xba>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   3b386:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   3b38a:	2a23      	cmp	r2, #35	; 0x23
   3b38c:	d012      	beq.n	3b3b4 <ull_conn_rx+0xc78>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3b38e:	f884 11cd 	strb.w	r1, [r4, #461]	; 0x1cd
		conn->llcp_phy.pause_tx = 0U;
   3b392:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3b396:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   3b39a:	f36f 0100 	bfc	r1, #0, #1
   3b39e:	f884 11cf 	strb.w	r1, [r4, #463]	; 0x1cf
		conn->procedure_expire = 0U;
   3b3a2:	2100      	movs	r1, #0
   3b3a4:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3b3a8:	f3c3 0102 	ubfx	r1, r3, #0, #3
   3b3ac:	f361 1306 	bfi	r3, r1, #4, #3
   3b3b0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   3b3b4:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   3b3b8:	075d      	lsls	r5, r3, #29
   3b3ba:	f57f aa1c 	bpl.w	3a7f6 <ull_conn_rx+0xba>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3b3be:	231c      	movs	r3, #28
   3b3c0:	7133      	strb	r3, [r6, #4]
	p->status = rej_ext_ind->error_code;
   3b3c2:	7732      	strb	r2, [r6, #28]
   3b3c4:	e468      	b.n	3ac98 <ull_conn_rx+0x55c>
		if (!conn->tx_ctrl) {
   3b3c6:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
   3b3ca:	2b00      	cmp	r3, #0
   3b3cc:	f47f aa84 	bne.w	3a8d8 <ull_conn_rx+0x19c>
			tx->next = conn->tx_head;
   3b3d0:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3b3d2:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3b3d6:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3b3da:	f7ff ba87 	b.w	3a8ec <ull_conn_rx+0x1b0>
		((!conn->llcp_enc.refresh &&
   3b3de:	f1b8 0f07 	cmp.w	r8, #7
   3b3e2:	f43f ab53 	beq.w	3aa8c <ull_conn_rx+0x350>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   3b3e6:	f1b8 0f02 	cmp.w	r8, #2
   3b3ea:	f43f abc6 	beq.w	3ab7a <ull_conn_rx+0x43e>
   3b3ee:	f1a8 0206 	sub.w	r2, r8, #6
   3b3f2:	b2d2      	uxtb	r2, r2
   3b3f4:	2a0b      	cmp	r2, #11
   3b3f6:	f63f aa06 	bhi.w	3a806 <ull_conn_rx+0xca>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   3b3fa:	4f2c      	ldr	r7, [pc, #176]	; (3b4ac <ull_conn_rx+0xd70>)
   3b3fc:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   3b400:	07d2      	lsls	r2, r2, #31
   3b402:	f53f aa00 	bmi.w	3a806 <ull_conn_rx+0xca>
	switch (opcode) {
   3b406:	f1a8 0207 	sub.w	r2, r8, #7
   3b40a:	2a0a      	cmp	r2, #10
   3b40c:	f63f ab67 	bhi.w	3aade <ull_conn_rx+0x3a2>
   3b410:	a701      	add	r7, pc, #4	; (adr r7, 3b418 <ull_conn_rx+0xcdc>)
   3b412:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
   3b416:	bf00      	nop
   3b418:	0003aa8d 	.word	0x0003aa8d
   3b41c:	0003a85d 	.word	0x0003a85d
   3b420:	0003acaf 	.word	0x0003acaf
   3b424:	0003ad2b 	.word	0x0003ad2b
   3b428:	0003b251 	.word	0x0003b251
   3b42c:	0003abe7 	.word	0x0003abe7
   3b430:	0003ac2b 	.word	0x0003ac2b
   3b434:	0003ae91 	.word	0x0003ae91
   3b438:	0003ab33 	.word	0x0003ab33
   3b43c:	0003adbd 	.word	0x0003adbd
   3b440:	0003aa21 	.word	0x0003aa21
   3b444:	f1b8 0f0b 	cmp.w	r8, #11
   3b448:	d1d1      	bne.n	3b3ee <ull_conn_rx+0xcb2>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   3b44a:	7f73      	ldrb	r3, [r6, #29]
   3b44c:	2b01      	cmp	r3, #1
   3b44e:	f47f aa08 	bne.w	3a862 <ull_conn_rx+0x126>
		conn->lll.enc_tx = 0;
   3b452:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3b456:	f36f 1304 	bfc	r3, #4, #1
   3b45a:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   3b45e:	f7ff b9ca 	b.w	3a7f6 <ull_conn_rx+0xba>
			return -ENOBUFS;
   3b462:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3b466:	f7ff b9c9 	b.w	3a7fc <ull_conn_rx+0xc0>
			conn->tx_data = conn->tx_data->next;
   3b46a:	681a      	ldr	r2, [r3, #0]
   3b46c:	f8c4 21e0 	str.w	r2, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3b470:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3b474:	2a00      	cmp	r2, #0
   3b476:	f47f aa2f 	bne.w	3a8d8 <ull_conn_rx+0x19c>
			tx->next = conn->tx_head->next;
   3b47a:	681a      	ldr	r2, [r3, #0]
   3b47c:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   3b47e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3b480:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   3b482:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
	if (!tx->next) {
   3b486:	2b00      	cmp	r3, #0
   3b488:	f47f a9b5 	bne.w	3a7f6 <ull_conn_rx+0xba>
   3b48c:	f7ff ba2e 	b.w	3a8ec <ull_conn_rx+0x1b0>
		if (!conn->tx_ctrl) {
   3b490:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3b494:	2900      	cmp	r1, #0
   3b496:	f47f ac83 	bne.w	3ada0 <ull_conn_rx+0x664>
			tx->next = conn->tx_head;
   3b49a:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3b49c:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3b4a0:	e483      	b.n	3adaa <ull_conn_rx+0x66e>
   3b4a2:	bf00      	nop
   3b4a4:	200058bc 	.word	0x200058bc
   3b4a8:	200059a0 	.word	0x200059a0
   3b4ac:	00053168 	.word	0x00053168
		if (!conn->lll.role) {
   3b4b0:	f994 7039 	ldrsb.w	r7, [r4, #57]	; 0x39
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   3b4b4:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   3b4b8:	f894 5195 	ldrb.w	r5, [r4, #405]	; 0x195
		if (!conn->lll.role) {
   3b4bc:	2f00      	cmp	r7, #0
   3b4be:	f2c0 81a9 	blt.w	3b814 <ull_conn_rx+0x10d8>
			if ((conn->llcp_conn_param.req !=
   3b4c2:	42aa      	cmp	r2, r5
   3b4c4:	d008      	beq.n	3b4d8 <ull_conn_rx+0xd9c>
			    ((conn->llcp_conn_param.state ==
   3b4c6:	f894 7196 	ldrb.w	r7, [r4, #406]	; 0x196
					conn->llcp_conn_param.ack) &&
   3b4ca:	2251      	movs	r2, #81	; 0x51
   3b4cc:	f007 070f 	and.w	r7, r7, #15
   3b4d0:	40fa      	lsrs	r2, r7
   3b4d2:	07d2      	lsls	r2, r2, #31
   3b4d4:	f100 8277 	bmi.w	3b9c6 <ull_conn_rx+0x128a>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   3b4d8:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   3b4dc:	f894 70f1 	ldrb.w	r7, [r4, #241]	; 0xf1
   3b4e0:	1bd2      	subs	r2, r2, r7
   3b4e2:	f002 0203 	and.w	r2, r2, #3
   3b4e6:	2a02      	cmp	r2, #2
   3b4e8:	f000 8400 	beq.w	3bcec <ull_conn_rx+0x15b0>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   3b4ec:	f894 71cc 	ldrb.w	r7, [r4, #460]	; 0x1cc
   3b4f0:	f894 21cd 	ldrb.w	r2, [r4, #461]	; 0x1cd
   3b4f4:	4297      	cmp	r7, r2
   3b4f6:	f000 839d 	beq.w	3bc34 <ull_conn_rx+0x14f8>
				nack = reject_ext_ind_send(conn, *rx,
   3b4fa:	232a      	movs	r3, #42	; 0x2a
   3b4fc:	220f      	movs	r2, #15
   3b4fe:	f7ff bb26 	b.w	3ab4e <ull_conn_rx+0x412>
	if (conn->common.txn_lock) {
   3b502:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3b506:	079b      	lsls	r3, r3, #30
   3b508:	f53f a975 	bmi.w	3a7f6 <ull_conn_rx+0xba>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3b50c:	48bc      	ldr	r0, [pc, #752]	; (3b800 <ull_conn_rx+0x10c4>)
   3b50e:	f7f8 fc8b 	bl	33e28 <mem_acquire>
	if (!tx) {
   3b512:	4603      	mov	r3, r0
   3b514:	2800      	cmp	r0, #0
   3b516:	d0a4      	beq.n	3b462 <ull_conn_rx+0xd26>
	conn->common.txn_lock = 1U;
   3b518:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   3b51c:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
	eff_tx_octets = conn->lll.max_tx_octets;
   3b520:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
	eff_rx_octets = conn->lll.max_rx_octets;
   3b524:	f8b4 b05a 	ldrh.w	fp, [r4, #90]	; 0x5a
	eff_rx_time = conn->lll.max_rx_time;
   3b528:	f8b4 905e 	ldrh.w	r9, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   3b52c:	f8b4 a05c 	ldrh.w	sl, [r4, #92]	; 0x5c
	eff_tx_octets = conn->lll.max_tx_octets;
   3b530:	9001      	str	r0, [sp, #4]
	conn->common.txn_lock = 1U;
   3b532:	f042 0202 	orr.w	r2, r2, #2
   3b536:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   3b53a:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
	if (/* Local idle, and Peer request then complete the Peer procedure
   3b53e:	428a      	cmp	r2, r1
   3b540:	f040 8429 	bne.w	3bd96 <ull_conn_rx+0x165a>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   3b544:	8c30      	ldrh	r0, [r6, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   3b546:	281a      	cmp	r0, #26
   3b548:	f240 822e 	bls.w	3b9a8 <ull_conn_rx+0x126c>
			eff_tx_octets = MIN(max_rx_octets,
   3b54c:	f8b4 10d2 	ldrh.w	r1, [r4, #210]	; 0xd2
   3b550:	4281      	cmp	r1, r0
   3b552:	bf28      	it	cs
   3b554:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   3b556:	8cb0      	ldrh	r0, [r6, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   3b558:	f8b6 c026 	ldrh.w	ip, [r6, #38]	; 0x26
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   3b55c:	281a      	cmp	r0, #26
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   3b55e:	8c70      	ldrh	r0, [r6, #34]	; 0x22
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   3b560:	bf94      	ite	ls
   3b562:	46de      	movls	lr, fp
   3b564:	f04f 0e1b 	movhi.w	lr, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   3b568:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   3b56c:	bf34      	ite	cc
   3b56e:	4650      	movcc	r0, sl
   3b570:	f44f 70a4 	movcs.w	r0, #328	; 0x148
		if (lr_tx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   3b574:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   3b578:	bf34      	ite	cc
   3b57a:	46cc      	movcc	ip, r9
   3b57c:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   3b580:	45de      	cmp	lr, fp
   3b582:	f000 8248 	beq.w	3ba16 <ull_conn_rx+0x12da>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   3b586:	3a01      	subs	r2, #1
   3b588:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			conn->llcp_length.rx_octets = eff_rx_octets;
   3b58c:	f8a4 e1c0 	strh.w	lr, [r4, #448]	; 0x1c0
			link->mem = conn->llcp_rx;
   3b590:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
			conn->llcp_length.tx_octets = eff_tx_octets;
   3b594:	f8a4 11c2 	strh.w	r1, [r4, #450]	; 0x1c2
			conn->llcp_length.rx_time = eff_rx_time;
   3b598:	f8a4 c1c4 	strh.w	ip, [r4, #452]	; 0x1c4
			conn->llcp_length.tx_time = eff_tx_time;
   3b59c:	f8a4 01c6 	strh.w	r0, [r4, #454]	; 0x1c6
			if (tx) {
   3b5a0:	2b00      	cmp	r3, #0
   3b5a2:	f000 8333 	beq.w	3bc0c <ull_conn_rx+0x14d0>
				conn->llcp_length.state =
   3b5a6:	f894 61be 	ldrb.w	r6, [r4, #446]	; 0x1be
   3b5aa:	f04f 0805 	mov.w	r8, #5
   3b5ae:	f368 0602 	bfi	r6, r8, #0, #3
   3b5b2:	f884 61be 	strb.w	r6, [r4, #446]	; 0x1be
			link->mem = conn->llcp_rx;
   3b5b6:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   3b5b8:	682a      	ldr	r2, [r5, #0]
   3b5ba:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   3b5bc:	682a      	ldr	r2, [r5, #0]
   3b5be:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
			*rx = NULL;
   3b5c2:	2200      	movs	r2, #0
   3b5c4:	602a      	str	r2, [r5, #0]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b5c6:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   3b5c8:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b5ca:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   3b5ce:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b5d0:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3b5d2:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3b5d4:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   3b5d6:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   3b5d8:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   3b5dc:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   3b5e0:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3b5e2:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3b5e4:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   3b5e6:	f7fd ff49 	bl	3947c <ctrl_tx_sec_enqueue>
}
   3b5ea:	f7ff b906 	b.w	3a7fa <ull_conn_rx+0xbe>
	if (conn->common.txn_lock) {
   3b5ee:	f894 70e4 	ldrb.w	r7, [r4, #228]	; 0xe4
   3b5f2:	f017 0702 	ands.w	r7, r7, #2
   3b5f6:	f47f a8fe 	bne.w	3a7f6 <ull_conn_rx+0xba>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3b5fa:	4881      	ldr	r0, [pc, #516]	; (3b800 <ull_conn_rx+0x10c4>)
   3b5fc:	f7f8 fc14 	bl	33e28 <mem_acquire>
	if (!tx) {
   3b600:	4603      	mov	r3, r0
   3b602:	2800      	cmp	r0, #0
   3b604:	f43f af2d 	beq.w	3b462 <ull_conn_rx+0xd26>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3b608:	f894 11ce 	ldrb.w	r1, [r4, #462]	; 0x1ce
	conn->common.txn_lock = 1U;
   3b60c:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
	if (conn->llcp_phy.ack ==
   3b610:	f894 e1cd 	ldrb.w	lr, [r4, #461]	; 0x1cd
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3b614:	2002      	movs	r0, #2
   3b616:	f360 0101 	bfi	r1, r0, #0, #2
	conn->common.txn_lock = 1U;
   3b61a:	f042 0202 	orr.w	r2, r2, #2
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3b61e:	f884 11ce 	strb.w	r1, [r4, #462]	; 0x1ce
	if (conn->llcp_phy.ack ==
   3b622:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
	conn->common.txn_lock = 1U;
   3b626:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   3b62a:	f894 21d0 	ldrb.w	r2, [r4, #464]	; 0x1d0
	if (conn->llcp_phy.ack ==
   3b62e:	4571      	cmp	r1, lr
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   3b630:	f3c2 0502 	ubfx	r5, r2, #0, #3
   3b634:	f002 0c07 	and.w	ip, r2, #7
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   3b638:	f3c2 00c2 	ubfx	r0, r2, #3, #3
	if (conn->llcp_phy.ack ==
   3b63c:	d114      	bne.n	3b668 <ull_conn_rx+0xf2c>
		conn->llcp_phy.ack--;
   3b63e:	3901      	subs	r1, #1
		conn->llcp_phy.cmd = 0U;
   3b640:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
		conn->llcp_phy.ack--;
   3b644:	f884 11cd 	strb.w	r1, [r4, #461]	; 0x1cd
		conn->llcp_phy.tx =
   3b648:	f894 11ce 	ldrb.w	r1, [r4, #462]	; 0x1ce
		conn->llcp_phy.cmd = 0U;
   3b64c:	f367 0282 	bfi	r2, r7, #2, #1
		conn->llcp_phy.tx =
   3b650:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.rx =
   3b654:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   3b658:	f884 21cf 	strb.w	r2, [r4, #463]	; 0x1cf
		conn->procedure_expire =
   3b65c:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
		conn->llcp_phy.rx =
   3b660:	f884 11ce 	strb.w	r1, [r4, #462]	; 0x1ce
		conn->procedure_expire =
   3b664:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	conn->llcp_phy.rx &= p->tx_phys;
   3b668:	f894 11ce 	ldrb.w	r1, [r4, #462]	; 0x1ce
	conn->llcp_phy.tx &= p->rx_phys;
   3b66c:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   3b670:	f896 7020 	ldrb.w	r7, [r6, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   3b674:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   3b678:	ea02 020c 	and.w	r2, r2, ip
	conn->llcp_phy.rx &= p->tx_phys;
   3b67c:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   3b680:	0092      	lsls	r2, r2, #2
   3b682:	f001 0103 	and.w	r1, r1, #3
   3b686:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
   3b68a:	430a      	orrs	r2, r1
   3b68c:	f884 21ce 	strb.w	r2, [r4, #462]	; 0x1ce
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   3b690:	2203      	movs	r2, #3
   3b692:	715a      	strb	r2, [r3, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   3b694:	7258      	strb	r0, [r3, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b696:	7918      	ldrb	r0, [r3, #4]
	    conn->tx_head &&
   3b698:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   3b69c:	721d      	strb	r5, [r3, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   3b69e:	2117      	movs	r1, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b6a0:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   3b6a4:	71d9      	strb	r1, [r3, #7]
		if (!conn->tx_ctrl) {
   3b6a6:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b6aa:	7118      	strb	r0, [r3, #4]
	if (
   3b6ac:	2a00      	cmp	r2, #0
   3b6ae:	f000 8124 	beq.w	3b8fa <ull_conn_rx+0x11be>
	    !conn->llcp_enc.pause_tx &&
   3b6b2:	f894 0176 	ldrb.w	r0, [r4, #374]	; 0x176
	    conn->tx_head &&
   3b6b6:	0785      	lsls	r5, r0, #30
   3b6b8:	f100 811f 	bmi.w	3b8fa <ull_conn_rx+0x11be>
	    !conn->llcp_phy.pause_tx &&
   3b6bc:	f894 01cf 	ldrb.w	r0, [r4, #463]	; 0x1cf
   3b6c0:	07c0      	lsls	r0, r0, #31
   3b6c2:	f100 811a 	bmi.w	3b8fa <ull_conn_rx+0x11be>
		if (conn->tx_head == conn->tx_data) {
   3b6c6:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
   3b6ca:	4282      	cmp	r2, r0
   3b6cc:	f000 8370 	beq.w	3bdb0 <ull_conn_rx+0x1674>
		} else if (!conn->tx_ctrl) {
   3b6d0:	2900      	cmp	r1, #0
   3b6d2:	f000 8379 	beq.w	3bdc8 <ull_conn_rx+0x168c>
	tx->next = conn->tx_ctrl_last->next;
   3b6d6:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   3b6da:	6811      	ldr	r1, [r2, #0]
   3b6dc:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   3b6de:	6013      	str	r3, [r2, #0]
	if (!tx->next) {
   3b6e0:	681a      	ldr	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   3b6e2:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3b6e6:	2a00      	cmp	r2, #0
   3b6e8:	f47f a885 	bne.w	3a7f6 <ull_conn_rx+0xba>
		conn->tx_data_last = tx;
   3b6ec:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b6f0:	f7ff b881 	b.w	3a7f6 <ull_conn_rx+0xba>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   3b6f4:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   3b6f8:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   3b6fc:	4293      	cmp	r3, r2
   3b6fe:	f43f adc1 	beq.w	3b284 <ull_conn_rx+0xb48>
		rej_ext_ind->error_code = rej_ind->error_code;
   3b702:	f896 3020 	ldrb.w	r3, [r6, #32]
   3b706:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   3b70a:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   3b70e:	2900      	cmp	r1, #0
   3b710:	f6bf ade4 	bge.w	3b2dc <ull_conn_rx+0xba0>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   3b714:	2b23      	cmp	r3, #35	; 0x23
			conn->periph.ticks_to_offset =
   3b716:	bf1c      	itt	ne
   3b718:	f8d4 31b8 	ldrne.w	r3, [r4, #440]	; 0x1b8
   3b71c:	f8c4 30ec 	strne.w	r3, [r4, #236]	; 0xec
   3b720:	e5df      	b.n	3b2e2 <ull_conn_rx+0xba6>
			conn->llcp_conn_param.disabled = 1U;
   3b722:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3b726:	f043 0320 	orr.w	r3, r3, #32
   3b72a:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
			if (!conn->lll.role) {
   3b72e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3b732:	2b00      	cmp	r3, #0
   3b734:	f2c0 8216 	blt.w	3bb64 <ull_conn_rx+0x1428>
				LL_ASSERT(conn->llcp_cu.req ==
   3b738:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   3b73c:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   3b740:	429a      	cmp	r2, r3
   3b742:	d00e      	beq.n	3b762 <ull_conn_rx+0x1026>
   3b744:	4a2f      	ldr	r2, [pc, #188]	; (3b804 <ull_conn_rx+0x10c8>)
   3b746:	4930      	ldr	r1, [pc, #192]	; (3b808 <ull_conn_rx+0x10cc>)
   3b748:	4830      	ldr	r0, [pc, #192]	; (3b80c <ull_conn_rx+0x10d0>)
   3b74a:	f641 33f5 	movw	r3, #7157	; 0x1bf5
   3b74e:	f00e f954 	bl	499fa <printk>
   3b752:	4040      	eors	r0, r0
   3b754:	f380 8811 	msr	BASEPRI, r0
   3b758:	f04f 0003 	mov.w	r0, #3
   3b75c:	df02      	svc	2
   3b75e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
				conn->llcp_conn_param.state =
   3b762:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   3b766:	2106      	movs	r1, #6
   3b768:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
   3b76c:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   3b76e:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   3b770:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
				conn->llcp_cu.win_size = 1U;
   3b774:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b778:	6828      	ldr	r0, [r5, #0]
				conn->llcp_conn_param.state =
   3b77a:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3b77e:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3b782:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
   3b786:	00db      	lsls	r3, r3, #3
   3b788:	f022 020f 	bic.w	r2, r2, #15
   3b78c:	430b      	orrs	r3, r1
   3b78e:	4313      	orrs	r3, r2
   3b790:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
				conn->llcp_cu.timeout =
   3b794:	f8b4 319e 	ldrh.w	r3, [r4, #414]	; 0x19e
					conn->llcp_conn_param.interval_max;
   3b798:	f8d4 219a 	ldr.w	r2, [r4, #410]	; 0x19a
				conn->llcp_cu.timeout =
   3b79c:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
				conn->llcp_cu.win_offset_us = 0U;
   3b7a0:	2300      	movs	r3, #0
				conn->llcp_cu.interval =
   3b7a2:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
				conn->llcp_cu.win_offset_us = 0U;
   3b7a6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b7aa:	7101      	strb	r1, [r0, #4]
				break;
   3b7ac:	f7ff b825 	b.w	3a7fa <ull_conn_rx+0xbe>
				      0x03) == 0x02) &&
   3b7b0:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3b7b4:	2b03      	cmp	r3, #3
   3b7b6:	f47f aa13 	bne.w	3abe0 <ull_conn_rx+0x4a4>
   3b7ba:	f7ff ba0a 	b.w	3abd2 <ull_conn_rx+0x496>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3b7be:	4810      	ldr	r0, [pc, #64]	; (3b800 <ull_conn_rx+0x10c4>)
   3b7c0:	f7f8 fb32 	bl	33e28 <mem_acquire>
		if (!tx) {
   3b7c4:	4601      	mov	r1, r0
   3b7c6:	2800      	cmp	r0, #0
   3b7c8:	f43f ae4b 	beq.w	3b462 <ull_conn_rx+0xd26>
		conn->llcp_version.tx = 1U;
   3b7cc:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   3b7d0:	f043 0301 	orr.w	r3, r3, #1
   3b7d4:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b7d8:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   3b7da:	7145      	strb	r5, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b7dc:	f043 0303 	orr.w	r3, r3, #3
   3b7e0:	7103      	strb	r3, [r0, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   3b7e2:	f640 420c 	movw	r2, #3084	; 0xc0c
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   3b7e6:	4b0a      	ldr	r3, [pc, #40]	; (3b810 <ull_conn_rx+0x10d4>)
   3b7e8:	f8c0 3009 	str.w	r3, [r0, #9]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   3b7ec:	f8a0 2007 	strh.w	r2, [r0, #7]
		ctrl_tx_sec_enqueue(conn, tx);
   3b7f0:	4620      	mov	r0, r4
   3b7f2:	f7fd fe43 	bl	3947c <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b7f6:	2301      	movs	r3, #1
   3b7f8:	7133      	strb	r3, [r6, #4]
   3b7fa:	f7ff ba07 	b.w	3ac0c <ull_conn_rx+0x4d0>
   3b7fe:	bf00      	nop
   3b800:	200059a0 	.word	0x200059a0
   3b804:	00052f80 	.word	0x00052f80
   3b808:	000530b4 	.word	0x000530b4
   3b80c:	00052a70 	.word	0x00052a70
   3b810:	ffff05f1 	.word	0xffff05f1
		} else if ((conn->llcp_conn_param.req ==
   3b814:	42aa      	cmp	r2, r5
   3b816:	d005      	beq.n	3b824 <ull_conn_rx+0x10e8>
			    conn->llcp_conn_param.ack) ||
   3b818:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   3b81c:	f012 0f0b 	tst.w	r2, #11
   3b820:	f47e afe9 	bne.w	3a7f6 <ull_conn_rx+0xba>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   3b824:	f8d6 8020 	ldr.w	r8, [r6, #32]
   3b828:	f8d6 e024 	ldr.w	lr, [r6, #36]	; 0x24
				cpr->preferred_periodicity;
   3b82c:	f896 9028 	ldrb.w	r9, [r6, #40]	; 0x28
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3b830:	fa1f f288 	uxth.w	r2, r8
   3b834:	2a05      	cmp	r2, #5
   3b836:	d94a      	bls.n	3b8ce <ull_conn_rx+0x1192>
   3b838:	ea4f 4718 	mov.w	r7, r8, lsr #16
   3b83c:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   3b840:	d845      	bhi.n	3b8ce <ull_conn_rx+0x1192>
			    (interval_max > 3200) ||
   3b842:	4297      	cmp	r7, r2
   3b844:	d343      	bcc.n	3b8ce <ull_conn_rx+0x1192>
   3b846:	fa1f fc8e 	uxth.w	ip, lr
			    (interval_min > interval_max) ||
   3b84a:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   3b84e:	d23e      	bcs.n	3b8ce <ull_conn_rx+0x1192>
   3b850:	ea4f 421e 	mov.w	r2, lr, lsr #16
			    (latency > 499) ||
   3b854:	f1a2 000a 	sub.w	r0, r2, #10
   3b858:	b280      	uxth	r0, r0
   3b85a:	f640 4a76 	movw	sl, #3190	; 0xc76
   3b85e:	4550      	cmp	r0, sl
   3b860:	d835      	bhi.n	3b8ce <ull_conn_rx+0x1192>
			     ((latency + 1) * interval_max)) ||
   3b862:	f10c 0001 	add.w	r0, ip, #1
   3b866:	b280      	uxth	r0, r0
   3b868:	fb07 f000 	mul.w	r0, r7, r0
			    (timeout < 10) || (timeout > 3200) ||
   3b86c:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
   3b870:	d22d      	bcs.n	3b8ce <ull_conn_rx+0x1192>
			     ((latency + 1) * interval_max)) ||
   3b872:	45b9      	cmp	r9, r7
   3b874:	d82b      	bhi.n	3b8ce <ull_conn_rx+0x1192>
			conn->llcp_conn_param.interval_min = interval_min;
   3b876:	e9c4 8e66 	strd	r8, lr, [r4, #408]	; 0x198
			conn->llcp_conn_param.preferred_periodicity =
   3b87a:	f884 91a0 	strb.w	r9, [r4, #416]	; 0x1a0
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   3b87e:	f8d6 e029 	ldr.w	lr, [r6, #41]	; 0x29
   3b882:	f8d6 002d 	ldr.w	r0, [r6, #45]	; 0x2d
   3b886:	f8d6 8031 	ldr.w	r8, [r6, #49]	; 0x31
			conn->llcp_conn_param.reference_conn_event_count =
   3b88a:	f8c4 81aa 	str.w	r8, [r4, #426]	; 0x1aa
   3b88e:	f8c4 e1a2 	str.w	lr, [r4, #418]	; 0x1a2
   3b892:	f8c4 01a6 	str.w	r0, [r4, #422]	; 0x1a6
				sys_le16_to_cpu(cpr->offset5);
   3b896:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   3b89a:	f896 e036 	ldrb.w	lr, [r6, #54]	; 0x36
   3b89e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   3b8a2:	f8a4 01ae 	strh.w	r0, [r4, #430]	; 0x1ae
			if ((conn->llcp_conn_param.interval_max !=
   3b8a6:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
   3b8a8:	42b8      	cmp	r0, r7
   3b8aa:	f000 8295 	beq.w	3bdd8 <ull_conn_rx+0x169c>
				conn->llcp_conn_param.state =
   3b8ae:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   3b8b2:	2003      	movs	r0, #3
   3b8b4:	f360 0203 	bfi	r2, r0, #0, #4
   3b8b8:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
			conn->llcp_conn_param.ack--;
   3b8bc:	3d01      	subs	r5, #1
   3b8be:	f884 5195 	strb.w	r5, [r4, #405]	; 0x195
	if (!conn_upd_curr) {
   3b8c2:	2b00      	cmp	r3, #0
   3b8c4:	f47e af99 	bne.w	3a7fa <ull_conn_rx+0xbe>
		conn_upd_curr = conn;
   3b8c8:	600c      	str	r4, [r1, #0]
   3b8ca:	f7fe bf96 	b.w	3a7fa <ull_conn_rx+0xbe>
				nack = reject_ext_ind_send(conn, *rx,
   3b8ce:	231e      	movs	r3, #30
   3b8d0:	220f      	movs	r2, #15
   3b8d2:	f7ff b93c 	b.w	3ab4e <ull_conn_rx+0x412>
			conn->llcp_length.disabled = 1U;
   3b8d6:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
			conn->llcp_length.ack = conn->llcp_length.req;
   3b8da:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			conn->llcp_length.disabled = 1U;
   3b8de:	f043 0308 	orr.w	r3, r3, #8
   3b8e2:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
			conn->llcp_length.ack = conn->llcp_length.req;
   3b8e6:	f7ff b8f6 	b.w	3aad6 <ull_conn_rx+0x39a>
	    ((pdu_data_tx->llctrl.opcode !=
   3b8ea:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3b8ec:	2a03      	cmp	r2, #3
   3b8ee:	f43f adc4 	beq.w	3b47a <ull_conn_rx+0xd3e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3b8f2:	2a0a      	cmp	r2, #10
   3b8f4:	f47e afea 	bne.w	3a8cc <ull_conn_rx+0x190>
   3b8f8:	e5bf      	b.n	3b47a <ull_conn_rx+0xd3e>
		if (!conn->tx_ctrl) {
   3b8fa:	2900      	cmp	r1, #0
   3b8fc:	f47f aeeb 	bne.w	3b6d6 <ull_conn_rx+0xf9a>
			tx->next = conn->tx_head;
   3b900:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   3b902:	e9c4 3375 	strd	r3, r3, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3b906:	e6eb      	b.n	3b6e0 <ull_conn_rx+0xfa4>
				conn->llcp_phy.state =
   3b908:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
				if (conn->llcp_phy.ack ==
   3b90c:	428a      	cmp	r2, r1
				conn->llcp_phy.state =
   3b90e:	f043 0303 	orr.w	r3, r3, #3
   3b912:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
				if (conn->llcp_phy.ack ==
   3b916:	d111      	bne.n	3b93c <ull_conn_rx+0x1200>
					conn->llcp_phy.tx =
   3b918:	f8b4 11ce 	ldrh.w	r1, [r4, #462]	; 0x1ce
						conn->phy_pref_rx;
   3b91c:	f894 01d0 	ldrb.w	r0, [r4, #464]	; 0x1d0
					conn->llcp_phy.tx =
   3b920:	f421 619f 	bic.w	r1, r1, #1272	; 0x4f8
   3b924:	f240 43fc 	movw	r3, #1276	; 0x4fc
   3b928:	f021 0104 	bic.w	r1, r1, #4
   3b92c:	ea03 0380 	and.w	r3, r3, r0, lsl #2
					conn->llcp_phy.ack--;
   3b930:	3a01      	subs	r2, #1
					conn->llcp_phy.tx =
   3b932:	430b      	orrs	r3, r1
					conn->llcp_phy.ack--;
   3b934:	f884 21cd 	strb.w	r2, [r4, #461]	; 0x1cd
					conn->llcp_phy.tx =
   3b938:	f8a4 31ce 	strh.w	r3, [r4, #462]	; 0x1ce
				conn->llcp_phy.rx &= p->tx_phys;
   3b93c:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
   3b940:	f896 1020 	ldrb.w	r1, [r6, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   3b944:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   3b948:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   3b94c:	f003 0203 	and.w	r2, r3, #3
   3b950:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3b954:	4003      	ands	r3, r0
   3b956:	009b      	lsls	r3, r3, #2
   3b958:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   3b95c:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3b95e:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   3b962:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3b966:	d001      	beq.n	3b96c <ull_conn_rx+0x1230>
   3b968:	2b1f      	cmp	r3, #31
   3b96a:	d805      	bhi.n	3b978 <ull_conn_rx+0x123c>
					conn->llcp_phy.tx = 0;
   3b96c:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
   3b970:	f003 0303 	and.w	r3, r3, #3
   3b974:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
				conn->llcp_phy.pause_tx = 1U;
   3b978:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b97c:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   3b97e:	4313      	orrs	r3, r2
   3b980:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b984:	7132      	strb	r2, [r6, #4]
   3b986:	f7fe bf38 	b.w	3a7fa <ull_conn_rx+0xbe>
				nack = reject_ext_ind_send(conn, *rx,
   3b98a:	231e      	movs	r3, #30
   3b98c:	2210      	movs	r2, #16
   3b98e:	f7ff b8de 	b.w	3ab4e <ull_conn_rx+0x412>
				nack = reject_ext_ind_send(conn, *rx,
   3b992:	2323      	movs	r3, #35	; 0x23
   3b994:	f7ff b925 	b.w	3abe2 <ull_conn_rx+0x4a6>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3b998:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3b99c:	f36f 0301 	bfc	r3, #0, #2
   3b9a0:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
   3b9a4:	f7ff b8bb 	b.w	3ab1e <ull_conn_rx+0x3e2>
   3b9a8:	9901      	ldr	r1, [sp, #4]
   3b9aa:	e5d4      	b.n	3b556 <ull_conn_rx+0xe1a>
	conn->llcp_enc.pause_rx = 0U;
   3b9ac:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	conn->llcp_ack = conn->llcp_req;
   3b9b0:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
	conn->procedure_expire = 0U;
   3b9b4:	2100      	movs	r1, #0
	conn->llcp_enc.pause_rx = 0U;
   3b9b6:	f022 0203 	bic.w	r2, r2, #3
   3b9ba:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
	conn->procedure_expire = 0U;
   3b9be:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	if (err) {
   3b9c2:	f7fe bf1a 	b.w	3a7fa <ull_conn_rx+0xbe>
				nack = reject_ext_ind_send(conn, *rx,
   3b9c6:	2323      	movs	r3, #35	; 0x23
   3b9c8:	220f      	movs	r2, #15
   3b9ca:	f7ff b8c0 	b.w	3ab4e <ull_conn_rx+0x412>
			lll->phy_tx_time = lll->phy_tx;
   3b9ce:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
   3b9d2:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
			conn->llcp_phy.ack = conn->llcp_phy.req;
   3b9d6:	f884 11cd 	strb.w	r1, [r4, #461]	; 0x1cd
			conn->llcp_phy.pause_tx = 0U;
   3b9da:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   3b9de:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   3b9e0:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   3b9e4:	f362 1106 	bfi	r1, r2, #4, #3
   3b9e8:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   3b9ec:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   3b9f0:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
			lll->phy_tx_time = lll->phy_tx;
   3b9f4:	f3c2 0202 	ubfx	r2, r2, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3b9f8:	682b      	ldr	r3, [r5, #0]
			if (conn->llcp_phy.cmd) {
   3b9fa:	f000 8103 	beq.w	3bc04 <ull_conn_rx+0x14c8>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3b9fe:	211c      	movs	r1, #28
   3ba00:	7119      	strb	r1, [r3, #4]
				p->status = 0U;
   3ba02:	2300      	movs	r3, #0
   3ba04:	7733      	strb	r3, [r6, #28]
				p->tx = lll->phy_tx;
   3ba06:	7772      	strb	r2, [r6, #29]
				p->rx = lll->phy_rx;
   3ba08:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   3ba0c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3ba10:	77b3      	strb	r3, [r6, #30]
   3ba12:	f7ff b860 	b.w	3aad6 <ull_conn_rx+0x39a>
			conn->procedure_expire = 0U;
   3ba16:	2700      	movs	r7, #0
   3ba18:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   3ba1c:	9f01      	ldr	r7, [sp, #4]
			conn->llcp_length.ack = conn->llcp_length.req;
   3ba1e:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   3ba22:	42b9      	cmp	r1, r7
   3ba24:	f000 8169 	beq.w	3bcfa <ull_conn_rx+0x15be>
			conn->lll.max_rx_time = eff_rx_time;
   3ba28:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
   3ba2c:	2b00      	cmp	r3, #0
   3ba2e:	f000 8180 	beq.w	3bd32 <ull_conn_rx+0x15f6>
					(conn->llcp_length.req - 1);
   3ba32:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   3ba34:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
				conn->llcp_length.state =
   3ba38:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
				conn->llcp_length.rx_octets = eff_rx_octets;
   3ba3c:	f8a4 e1c0 	strh.w	lr, [r4, #448]	; 0x1c0
				conn->llcp_length.state =
   3ba40:	2503      	movs	r5, #3
   3ba42:	f365 0202 	bfi	r2, r5, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   3ba46:	f8a4 11c2 	strh.w	r1, [r4, #450]	; 0x1c2
				conn->llcp_length.rx_time = eff_rx_time;
   3ba4a:	f8a4 c1c4 	strh.w	ip, [r4, #452]	; 0x1c4
				conn->llcp_length.tx_time = eff_tx_time;
   3ba4e:	f8a4 01c6 	strh.w	r0, [r4, #454]	; 0x1c6
				conn->llcp_length.state =
   3ba52:	f884 21be 	strb.w	r2, [r4, #446]	; 0x1be
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   3ba56:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   3ba5a:	84b1      	strh	r1, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   3ba5c:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   3ba60:	84f0      	strh	r0, [r6, #38]	; 0x26
	if (tx) {
   3ba62:	e5b0      	b.n	3b5c6 <ull_conn_rx+0xe8a>
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   3ba64:	232a      	movs	r3, #42	; 0x2a
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3ba66:	2201      	movs	r2, #1
   3ba68:	7132      	strb	r2, [r6, #4]
			conn->llcp_terminate.reason_final = err;
   3ba6a:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
   3ba6e:	f7fe bec4 	b.w	3a7fa <ull_conn_rx+0xbe>
		err = BT_HCI_ERR_INSTANT_PASSED;
   3ba72:	2328      	movs	r3, #40	; 0x28
   3ba74:	e7f7      	b.n	3ba66 <ull_conn_rx+0x132a>
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   3ba76:	2101      	movs	r1, #1
   3ba78:	f10d 000f 	add.w	r0, sp, #15
	phy = ind->c_to_p_phy;
   3ba7c:	f88d 200f 	strb.w	r2, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   3ba80:	f7f8 fbb2 	bl	341e8 <util_ones_count_get>
   3ba84:	2801      	cmp	r0, #1
   3ba86:	f200 8095 	bhi.w	3bbb4 <ull_conn_rx+0x1478>
	phy = ind->p_to_c_phy;
   3ba8a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3ba8e:	f88d 300f 	strb.w	r3, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   3ba92:	f10d 000f 	add.w	r0, sp, #15
   3ba96:	2101      	movs	r1, #1
   3ba98:	f7f8 fba6 	bl	341e8 <util_ones_count_get>
   3ba9c:	2801      	cmp	r0, #1
   3ba9e:	f200 8089 	bhi.w	3bbb4 <ull_conn_rx+0x1478>
	instant = sys_le16_to_cpu(ind->instant);
   3baa2:	8c71      	ldrh	r1, [r6, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   3baa4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3baa6:	1acb      	subs	r3, r1, r3
   3baa8:	041b      	lsls	r3, r3, #16
   3baaa:	f100 817c 	bmi.w	3bda6 <ull_conn_rx+0x166a>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3baae:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3bab2:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3bab6:	1a9b      	subs	r3, r3, r2
   3bab8:	f003 0303 	and.w	r3, r3, #3
   3babc:	2b02      	cmp	r3, #2
   3babe:	f000 81b1 	beq.w	3be24 <ull_conn_rx+0x16e8>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   3bac2:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
   3bac6:	f894 31cd 	ldrb.w	r3, [r4, #461]	; 0x1cd
   3baca:	4283      	cmp	r3, r0
   3bacc:	d018      	beq.n	3bb00 <ull_conn_rx+0x13c4>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   3bace:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   3bad2:	f003 0303 	and.w	r3, r3, #3
   3bad6:	2b02      	cmp	r3, #2
   3bad8:	d112      	bne.n	3bb00 <ull_conn_rx+0x13c4>
		conn->llcp_phy.pause_tx = 0U;
   3bada:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3bade:	f884 01cd 	strb.w	r0, [r4, #461]	; 0x1cd
		conn->llcp_phy.pause_tx = 0U;
   3bae2:	f36f 0300 	bfc	r3, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3bae6:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
		conn->llcp_phy.pause_tx = 0U;
   3baea:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3baee:	f3c3 0380 	ubfx	r3, r3, #2, #1
   3baf2:	f363 0041 	bfi	r0, r3, #1, #1
		conn->procedure_expire = 0U;
   3baf6:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3baf8:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
		conn->procedure_expire = 0U;
   3bafc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.tx = ind->p_to_c_phy;
   3bb00:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
	conn->llcp.phy_upd_ind.rx = ind->c_to_p_phy;
   3bb04:	f896 0020 	ldrb.w	r0, [r6, #32]
	conn->llcp.phy_upd_ind.instant = instant;
   3bb08:	f8a4 10f6 	strh.w	r1, [r4, #246]	; 0xf6
	conn->llcp.phy_upd_ind.initiate = 0U;
   3bb0c:	009b      	lsls	r3, r3, #2
   3bb0e:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
   3bb12:	f003 031c 	and.w	r3, r3, #28
   3bb16:	f001 0102 	and.w	r1, r1, #2
   3bb1a:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   3bb1e:	430b      	orrs	r3, r1
   3bb20:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
	link->mem = conn->llcp_rx;
   3bb24:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   3bb28:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   3bb2a:	682b      	ldr	r3, [r5, #0]
   3bb2c:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   3bb2e:	6829      	ldr	r1, [r5, #0]
   3bb30:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
	*rx = NULL;
   3bb34:	2300      	movs	r3, #0
   3bb36:	602b      	str	r3, [r5, #0]
	if (conn->llcp.phy_upd_ind.tx) {
   3bb38:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
	conn->llcp_ack -= 2U;
   3bb3c:	3a02      	subs	r2, #2
	conn->llcp_type = LLCP_PHY_UPD;
   3bb3e:	2106      	movs	r1, #6
	if (conn->llcp.phy_upd_ind.tx) {
   3bb40:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
   3bb44:	f884 10f2 	strb.w	r1, [r4, #242]	; 0xf2
	conn->llcp_ack -= 2U;
   3bb48:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
	if (conn->llcp.phy_upd_ind.tx) {
   3bb4c:	f43e ae55 	beq.w	3a7fa <ull_conn_rx+0xbe>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   3bb50:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
   3bb54:	f3c3 0382 	ubfx	r3, r3, #2, #3
   3bb58:	f363 1206 	bfi	r2, r3, #4, #3
   3bb5c:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
		if (err) {
   3bb60:	f7fe be4b 	b.w	3a7fa <ull_conn_rx+0xbe>
	conn_upd_curr = NULL;
   3bb64:	4bb2      	ldr	r3, [pc, #712]	; (3be30 <ull_conn_rx+0x16f4>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3bb66:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
	conn_upd_curr = NULL;
   3bb6a:	2200      	movs	r2, #0
   3bb6c:	601a      	str	r2, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   3bb6e:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3bb72:	06da      	lsls	r2, r3, #27
   3bb74:	f57e ae3f 	bpl.w	3a7f6 <ull_conn_rx+0xba>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3bb78:	2318      	movs	r3, #24
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3bb7a:	f01c 0f01 	tst.w	ip, #1
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3bb7e:	7133      	strb	r3, [r6, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3bb80:	f040 80e3 	bne.w	3bd4a <ull_conn_rx+0x160e>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   3bb84:	231a      	movs	r3, #26
   3bb86:	7733      	strb	r3, [r6, #28]
			cu->interval = lll->interval;
   3bb88:	f8d4 202a 	ldr.w	r2, [r4, #42]	; 0x2a
   3bb8c:	f8c6 201e 	str.w	r2, [r6, #30]
			cu->timeout = conn->supervision_reload *
   3bb90:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
				      lll->interval * 125U / 1000;
   3bb94:	b292      	uxth	r2, r2
			cu->timeout = conn->supervision_reload *
   3bb96:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   3bb9a:	227d      	movs	r2, #125	; 0x7d
   3bb9c:	fb02 f303 	mul.w	r3, r2, r3
   3bba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3bba4:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   3bba8:	8473      	strh	r3, [r6, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   3bbaa:	f7fe bf94 	b.w	3aad6 <ull_conn_rx+0x39a>
		conn_upd_curr = conn;
   3bbae:	601c      	str	r4, [r3, #0]
   3bbb0:	f7ff bad7 	b.w	3b162 <ull_conn_rx+0xa26>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3bbb4:	682b      	ldr	r3, [r5, #0]
   3bbb6:	2201      	movs	r2, #1
   3bbb8:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INVALID_LL_PARAM;
   3bbba:	231e      	movs	r3, #30
			conn->llcp_terminate.reason_final = err;
   3bbbc:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
   3bbc0:	f7fe be1b 	b.w	3a7fa <ull_conn_rx+0xbe>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   3bbc4:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
			conn->llcp_ack += 2U;
   3bbc8:	3202      	adds	r2, #2
   3bbca:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   3bbce:	2b00      	cmp	r3, #0
   3bbd0:	f040 80d3 	bne.w	3bd7a <ull_conn_rx+0x163e>
			conn->periph.llcp_type = conn->llcp_type;
   3bbd4:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3bbd8:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
   3bbdc:	f7ff ba6d 	b.w	3b0ba <ull_conn_rx+0x97e>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3bbe0:	4a94      	ldr	r2, [pc, #592]	; (3be34 <ull_conn_rx+0x16f8>)
   3bbe2:	4995      	ldr	r1, [pc, #596]	; (3be38 <ull_conn_rx+0x16fc>)
   3bbe4:	4895      	ldr	r0, [pc, #596]	; (3be3c <ull_conn_rx+0x1700>)
   3bbe6:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
   3bbea:	f00d ff06 	bl	499fa <printk>
   3bbee:	4040      	eors	r0, r0
   3bbf0:	f380 8811 	msr	BASEPRI, r0
   3bbf4:	f04f 0003 	mov.w	r0, #3
   3bbf8:	df02      	svc	2
   3bbfa:	f7ff bb88 	b.w	3b30e <ull_conn_rx+0xbd2>
	struct node_tx *tx = NULL;
   3bbfe:	2300      	movs	r3, #0
   3bc00:	f7fe bec5 	b.w	3a98e <ull_conn_rx+0x252>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3bc04:	2201      	movs	r2, #1
   3bc06:	711a      	strb	r2, [r3, #4]
   3bc08:	f7fe bf65 	b.w	3aad6 <ull_conn_rx+0x39a>
				conn->lll.max_tx_octets = eff_tx_octets;
   3bc0c:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->llcp_length.state =
   3bc10:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
				conn->lll.max_tx_time = eff_tx_time;
   3bc14:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   3bc18:	2004      	movs	r0, #4
   3bc1a:	f360 0102 	bfi	r1, r0, #0, #3
   3bc1e:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
			link->mem = conn->llcp_rx;
   3bc22:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   3bc24:	682a      	ldr	r2, [r5, #0]
   3bc26:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   3bc28:	682a      	ldr	r2, [r5, #0]
   3bc2a:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
			*rx = NULL;
   3bc2e:	602b      	str	r3, [r5, #0]
	if (tx) {
   3bc30:	f7fe bde3 	b.w	3a7fa <ull_conn_rx+0xbe>
				uint16_t interval_min =
   3bc34:	f8d6 9020 	ldr.w	r9, [r6, #32]
   3bc38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
					cpr->preferred_periodicity;
   3bc3c:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3bc40:	fa1f f289 	uxth.w	r2, r9
   3bc44:	2a05      	cmp	r2, #5
   3bc46:	f67f ae42 	bls.w	3b8ce <ull_conn_rx+0x1192>
   3bc4a:	ea4f 4719 	mov.w	r7, r9, lsr #16
   3bc4e:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   3bc52:	f63f ae3c 	bhi.w	3b8ce <ull_conn_rx+0x1192>
				    (interval_max > 3200) ||
   3bc56:	4297      	cmp	r7, r2
   3bc58:	f4ff ae39 	bcc.w	3b8ce <ull_conn_rx+0x1192>
   3bc5c:	fa1f fe88 	uxth.w	lr, r8
				    (interval_min > interval_max) ||
   3bc60:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
   3bc64:	f4bf ae33 	bcs.w	3b8ce <ull_conn_rx+0x1192>
   3bc68:	ea4f 4218 	mov.w	r2, r8, lsr #16
				    (latency > 499) ||
   3bc6c:	f1a2 0c0a 	sub.w	ip, r2, #10
   3bc70:	fa1f fc8c 	uxth.w	ip, ip
   3bc74:	f640 4b76 	movw	fp, #3190	; 0xc76
   3bc78:	45dc      	cmp	ip, fp
   3bc7a:	f63f ae28 	bhi.w	3b8ce <ull_conn_rx+0x1192>
				     ((latency + 1) * interval_max)) ||
   3bc7e:	f10e 0c01 	add.w	ip, lr, #1
   3bc82:	fa1f fc8c 	uxth.w	ip, ip
   3bc86:	fb07 fc0c 	mul.w	ip, r7, ip
				    (timeout > 3200) ||
   3bc8a:	ebbc 0f82 	cmp.w	ip, r2, lsl #2
   3bc8e:	f4bf ae1e 	bcs.w	3b8ce <ull_conn_rx+0x1192>
				     ((latency + 1) * interval_max)) ||
   3bc92:	45ba      	cmp	sl, r7
   3bc94:	f63f ae1b 	bhi.w	3b8ce <ull_conn_rx+0x1192>
				conn->llcp_conn_param.interval_min =
   3bc98:	e9c4 9866 	strd	r9, r8, [r4, #408]	; 0x198
				conn->llcp_conn_param.preferred_periodicity =
   3bc9c:	f884 a1a0 	strb.w	sl, [r4, #416]	; 0x1a0
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   3bca0:	f8d6 8029 	ldr.w	r8, [r6, #41]	; 0x29
   3bca4:	f8d6 c02d 	ldr.w	ip, [r6, #45]	; 0x2d
   3bca8:	f8d6 9031 	ldr.w	r9, [r6, #49]	; 0x31
				conn->llcp_conn_param.reference_conn_event_count =
   3bcac:	f8c4 91aa 	str.w	r9, [r4, #426]	; 0x1aa
   3bcb0:	f8c4 81a2 	str.w	r8, [r4, #418]	; 0x1a2
   3bcb4:	f8c4 c1a6 	str.w	ip, [r4, #422]	; 0x1a6
					sys_le16_to_cpu(cpr->offset5);
   3bcb8:	f896 c035 	ldrb.w	ip, [r6, #53]	; 0x35
   3bcbc:	f896 8036 	ldrb.w	r8, [r6, #54]	; 0x36
   3bcc0:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   3bcc4:	f8a4 c1ae 	strh.w	ip, [r4, #430]	; 0x1ae
				if ((conn->llcp_conn_param.interval_max !=
   3bcc8:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
   3bccc:	45bc      	cmp	ip, r7
   3bcce:	f000 80f3 	beq.w	3beb8 <ull_conn_rx+0x177c>
					if (conn->llcp_enc.pause_tx) {
   3bcd2:	0787      	lsls	r7, r0, #30
						conn->llcp_conn_param.state =
   3bcd4:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
					if (conn->llcp_enc.pause_tx) {
   3bcd8:	f57f adeb 	bpl.w	3b8b2 <ull_conn_rx+0x1176>
						conn->llcp_conn_param.state =
   3bcdc:	2002      	movs	r0, #2
   3bcde:	f360 0203 	bfi	r2, r0, #0, #4
   3bce2:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
						(*rx)->hdr.type =
   3bce6:	2201      	movs	r2, #1
   3bce8:	7132      	strb	r2, [r6, #4]
   3bcea:	e5e7      	b.n	3b8bc <ull_conn_rx+0x1180>
				      0x03) == 0x02) &&
   3bcec:	f894 20f2 	ldrb.w	r2, [r4, #242]	; 0xf2
   3bcf0:	2a03      	cmp	r2, #3
   3bcf2:	f47f ac02 	bne.w	3b4fa <ull_conn_rx+0xdbe>
   3bcf6:	f7ff bbf9 	b.w	3b4ec <ull_conn_rx+0xdb0>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   3bcfa:	4550      	cmp	r0, sl
   3bcfc:	f47f ae94 	bne.w	3ba28 <ull_conn_rx+0x12ec>
			    eff_rx_time == conn->lll.max_rx_time &&
   3bd00:	45cc      	cmp	ip, r9
   3bd02:	f47f ae91 	bne.w	3ba28 <ull_conn_rx+0x12ec>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3bd06:	682a      	ldr	r2, [r5, #0]
   3bd08:	2501      	movs	r5, #1
   3bd0a:	7115      	strb	r5, [r2, #4]
	if (tx) {
   3bd0c:	2b00      	cmp	r3, #0
   3bd0e:	f43e ad74 	beq.w	3a7fa <ull_conn_rx+0xbe>
   3bd12:	e458      	b.n	3b5c6 <ull_conn_rx+0xe8a>
			conn->tx_data = conn->tx_data->next;
   3bd14:	6811      	ldr	r1, [r2, #0]
   3bd16:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3bd1a:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3bd1e:	2900      	cmp	r1, #0
   3bd20:	f47f a83e 	bne.w	3ada0 <ull_conn_rx+0x664>
			tx->next = conn->tx_head->next;
   3bd24:	6811      	ldr	r1, [r2, #0]
   3bd26:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   3bd28:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   3bd2a:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3bd2e:	f7ff b83c 	b.w	3adaa <ull_conn_rx+0x66e>
				conn->lll.max_tx_octets = eff_tx_octets;
   3bd32:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   3bd36:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   3bd3a:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   3bd3e:	84b1      	strh	r1, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   3bd40:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   3bd44:	84f0      	strh	r0, [r6, #38]	; 0x26
	if (tx) {
   3bd46:	f7fe bd58 	b.w	3a7fa <ull_conn_rx+0xbe>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3bd4a:	4a3a      	ldr	r2, [pc, #232]	; (3be34 <ull_conn_rx+0x16f8>)
   3bd4c:	493a      	ldr	r1, [pc, #232]	; (3be38 <ull_conn_rx+0x16fc>)
   3bd4e:	483b      	ldr	r0, [pc, #236]	; (3be3c <ull_conn_rx+0x1700>)
   3bd50:	f641 4322 	movw	r3, #7202	; 0x1c22
   3bd54:	f00d fe51 	bl	499fa <printk>
   3bd58:	4040      	eors	r0, r0
   3bd5a:	f380 8811 	msr	BASEPRI, r0
   3bd5e:	f04f 0003 	mov.w	r0, #3
   3bd62:	df02      	svc	2
   3bd64:	e70e      	b.n	3bb84 <ull_conn_rx+0x1448>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3bd66:	7911      	ldrb	r1, [r2, #4]
   3bd68:	f001 0103 	and.w	r1, r1, #3
   3bd6c:	2903      	cmp	r1, #3
   3bd6e:	f000 80ba 	beq.w	3bee6 <ull_conn_rx+0x17aa>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3bd72:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   3bd76:	f7ff b813 	b.w	3ada0 <ull_conn_rx+0x664>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   3bd7a:	4a2e      	ldr	r2, [pc, #184]	; (3be34 <ull_conn_rx+0x16f8>)
   3bd7c:	4930      	ldr	r1, [pc, #192]	; (3be40 <ull_conn_rx+0x1704>)
   3bd7e:	482f      	ldr	r0, [pc, #188]	; (3be3c <ull_conn_rx+0x1700>)
   3bd80:	f641 13ad 	movw	r3, #6573	; 0x19ad
   3bd84:	f00d fe39 	bl	499fa <printk>
   3bd88:	4040      	eors	r0, r0
   3bd8a:	f380 8811 	msr	BASEPRI, r0
   3bd8e:	f04f 0003 	mov.w	r0, #3
   3bd92:	df02      	svc	2
   3bd94:	e71e      	b.n	3bbd4 <ull_conn_rx+0x1498>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   3bd96:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   3bd9a:	f011 0f06 	tst.w	r1, #6
   3bd9e:	f43f abd1 	beq.w	3b544 <ull_conn_rx+0xe08>
   3bda2:	f7fe bded 	b.w	3a980 <ull_conn_rx+0x244>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3bda6:	682b      	ldr	r3, [r5, #0]
   3bda8:	2201      	movs	r2, #1
   3bdaa:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   3bdac:	2328      	movs	r3, #40	; 0x28
   3bdae:	e705      	b.n	3bbbc <ull_conn_rx+0x1480>
			conn->tx_data = conn->tx_data->next;
   3bdb0:	6810      	ldr	r0, [r2, #0]
   3bdb2:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3bdb6:	2900      	cmp	r1, #0
   3bdb8:	f47f ac8d 	bne.w	3b6d6 <ull_conn_rx+0xf9a>
			tx->next = conn->tx_head->next;
   3bdbc:	6811      	ldr	r1, [r2, #0]
   3bdbe:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   3bdc0:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   3bdc2:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3bdc6:	e48b      	b.n	3b6e0 <ull_conn_rx+0xfa4>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3bdc8:	7911      	ldrb	r1, [r2, #4]
   3bdca:	f001 0103 	and.w	r1, r1, #3
   3bdce:	2903      	cmp	r1, #3
   3bdd0:	d022      	beq.n	3be18 <ull_conn_rx+0x16dc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3bdd2:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   3bdd6:	e47e      	b.n	3b6d6 <ull_conn_rx+0xf9a>
			     lll->interval) ||
   3bdd8:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   3bdda:	4567      	cmp	r7, ip
   3bddc:	f47f ad67 	bne.w	3b8ae <ull_conn_rx+0x1172>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   3bde0:	f240 47e2 	movw	r7, #1250	; 0x4e2
   3bde4:	fb07 f000 	mul.w	r0, r7, r0
   3bde8:	f242 7710 	movw	r7, #10000	; 0x2710
   3bdec:	fb07 0202 	mla	r2, r7, r2, r0
   3bdf0:	3a01      	subs	r2, #1
   3bdf2:	fbb2 f2f0 	udiv	r2, r2, r0
			    (conn->llcp_conn_param.latency != lll->latency) ||
   3bdf6:	f8b4 00c2 	ldrh.w	r0, [r4, #194]	; 0xc2
   3bdfa:	b292      	uxth	r2, r2
   3bdfc:	4290      	cmp	r0, r2
   3bdfe:	f47f ad56 	bne.w	3b8ae <ull_conn_rx+0x1172>
				conn->llcp_conn_param.state =
   3be02:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
   3be06:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   3be0a:	f042 0201 	orr.w	r2, r2, #1
   3be0e:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3be12:	2201      	movs	r2, #1
   3be14:	7132      	strb	r2, [r6, #4]
   3be16:	e551      	b.n	3b8bc <ull_conn_rx+0x1180>
	    ((pdu_data_tx->llctrl.opcode !=
   3be18:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3be1a:	2903      	cmp	r1, #3
   3be1c:	d0ce      	beq.n	3bdbc <ull_conn_rx+0x1680>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3be1e:	290a      	cmp	r1, #10
   3be20:	d1d7      	bne.n	3bdd2 <ull_conn_rx+0x1696>
   3be22:	e7cb      	b.n	3bdbc <ull_conn_rx+0x1680>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3be24:	682b      	ldr	r3, [r5, #0]
   3be26:	2201      	movs	r2, #1
   3be28:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   3be2a:	232a      	movs	r3, #42	; 0x2a
   3be2c:	e6c6      	b.n	3bbbc <ull_conn_rx+0x1480>
   3be2e:	bf00      	nop
   3be30:	200058bc 	.word	0x200058bc
   3be34:	00052f80 	.word	0x00052f80
   3be38:	00052bbc 	.word	0x00052bbc
   3be3c:	00052a70 	.word	0x00052a70
   3be40:	00053090 	.word	0x00053090
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   3be44:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   3be48:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   3be4c:	429a      	cmp	r2, r3
   3be4e:	d00e      	beq.n	3be6e <ull_conn_rx+0x1732>
   3be50:	4a29      	ldr	r2, [pc, #164]	; (3bef8 <ull_conn_rx+0x17bc>)
   3be52:	492a      	ldr	r1, [pc, #168]	; (3befc <ull_conn_rx+0x17c0>)
   3be54:	482a      	ldr	r0, [pc, #168]	; (3bf00 <ull_conn_rx+0x17c4>)
   3be56:	f241 43af 	movw	r3, #5295	; 0x14af
   3be5a:	f00d fdce 	bl	499fa <printk>
   3be5e:	4040      	eors	r0, r0
   3be60:	f380 8811 	msr	BASEPRI, r0
   3be64:	f04f 0003 	mov.w	r0, #3
   3be68:	df02      	svc	2
   3be6a:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3be6e:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   3be72:	2106      	movs	r1, #6
   3be74:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
   3be78:	3b01      	subs	r3, #1
   3be7a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3be7e:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3be82:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3be86:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
		conn->llcp_cu.win_size = 1U;
   3be8a:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3be8c:	00db      	lsls	r3, r3, #3
   3be8e:	430b      	orrs	r3, r1
   3be90:	f022 020f 	bic.w	r2, r2, #15
   3be94:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   3be96:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   3be9a:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   3be9e:	f8d4 119a 	ldr.w	r1, [r4, #410]	; 0x19a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3bea2:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
		conn->llcp_cu.win_offset_us = 0U;
   3bea6:	2000      	movs	r0, #0
   3bea8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   3beac:	f8c4 111c 	str.w	r1, [r4, #284]	; 0x11c
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   3beb0:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
	if (err) {
   3beb4:	f7fe bc9f 	b.w	3a7f6 <ull_conn_rx+0xba>
				     lll->interval) ||
   3beb8:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
   3bebc:	45f4      	cmp	ip, lr
   3bebe:	f47f af08 	bne.w	3bcd2 <ull_conn_rx+0x1596>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   3bec2:	f240 4ce2 	movw	ip, #1250	; 0x4e2
   3bec6:	fb0c f707 	mul.w	r7, ip, r7
   3beca:	f242 7c10 	movw	ip, #10000	; 0x2710
   3bece:	fb0c 7202 	mla	r2, ip, r2, r7
   3bed2:	3a01      	subs	r2, #1
   3bed4:	fbb2 f2f7 	udiv	r2, r2, r7
				     lll->latency) ||
   3bed8:	f8b4 70c2 	ldrh.w	r7, [r4, #194]	; 0xc2
   3bedc:	b292      	uxth	r2, r2
   3bede:	4297      	cmp	r7, r2
   3bee0:	f47f aef7 	bne.w	3bcd2 <ull_conn_rx+0x1596>
   3bee4:	e78d      	b.n	3be02 <ull_conn_rx+0x16c6>
	    ((pdu_data_tx->llctrl.opcode !=
   3bee6:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3bee8:	2903      	cmp	r1, #3
   3beea:	f43f af1b 	beq.w	3bd24 <ull_conn_rx+0x15e8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3beee:	290a      	cmp	r1, #10
   3bef0:	f47f af3f 	bne.w	3bd72 <ull_conn_rx+0x1636>
   3bef4:	e716      	b.n	3bd24 <ull_conn_rx+0x15e8>
   3bef6:	bf00      	nop
   3bef8:	00052f80 	.word	0x00052f80
   3befc:	000530b4 	.word	0x000530b4
   3bf00:	00052a70 	.word	0x00052a70

0003bf04 <ull_conn_llcp>:
{
   3bf04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bf08:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   3bf0a:	f890 00f1 	ldrb.w	r0, [r0, #241]	; 0xf1
   3bf0e:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3bf12:	4298      	cmp	r0, r3
{
   3bf14:	460e      	mov	r6, r1
   3bf16:	4615      	mov	r5, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   3bf18:	d031      	beq.n	3bf7e <ull_conn_llcp+0x7a>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3bf1a:	1a1b      	subs	r3, r3, r0
   3bf1c:	f003 0303 	and.w	r3, r3, #3
   3bf20:	2b02      	cmp	r3, #2
   3bf22:	d011      	beq.n	3bf48 <ull_conn_llcp+0x44>
   3bf24:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   3bf28:	460a      	mov	r2, r1
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3bf2a:	2a00      	cmp	r2, #0
   3bf2c:	f2c0 8089 	blt.w	3c042 <ull_conn_llcp+0x13e>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
   3bf30:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
   3bf34:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
   3bf38:	1a9b      	subs	r3, r3, r2
   3bf3a:	b2db      	uxtb	r3, r3
   3bf3c:	2b01      	cmp	r3, #1
   3bf3e:	f000 809a 	beq.w	3c076 <ull_conn_llcp+0x172>
	return 0;
   3bf42:	2000      	movs	r0, #0
}
   3bf44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3bf48:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   3bf4c:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
   3bf50:	429a      	cmp	r2, r3
   3bf52:	d006      	beq.n	3bf62 <ull_conn_llcp+0x5e>
			     LLCP_LENGTH_STATE_RESIZE) ||
   3bf54:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
			if ((conn->llcp_length.state ==
   3bf58:	f003 0306 	and.w	r3, r3, #6
   3bf5c:	2b04      	cmp	r3, #4
   3bf5e:	f000 8227 	beq.w	3c3b0 <ull_conn_llcp+0x4ac>
		switch (conn->llcp_type) {
   3bf62:	f894 70f2 	ldrb.w	r7, [r4, #242]	; 0xf2
   3bf66:	1e7b      	subs	r3, r7, #1
   3bf68:	2b05      	cmp	r3, #5
   3bf6a:	f200 820b 	bhi.w	3c384 <ull_conn_llcp+0x480>
   3bf6e:	e8df f013 	tbh	[pc, r3, lsl #1]
   3bf72:	0024      	.short	0x0024
   3bf74:	012701a8 	.word	0x012701a8
   3bf78:	00ec0209 	.word	0x00ec0209
   3bf7c:	00e1      	.short	0x00e1
   3bf7e:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   3bf82:	2900      	cmp	r1, #0
   3bf84:	460a      	mov	r2, r1
   3bf86:	f2c0 820d 	blt.w	3c3a4 <ull_conn_llcp+0x4a0>
	    !conn->llcp_enc.pause_rx) {
   3bf8a:	f894 7176 	ldrb.w	r7, [r4, #374]	; 0x176
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   3bf8e:	f017 0f01 	tst.w	r7, #1
   3bf92:	d1cd      	bne.n	3bf30 <ull_conn_llcp+0x2c>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   3bf94:	f894 c119 	ldrb.w	ip, [r4, #281]	; 0x119
   3bf98:	f894 e118 	ldrb.w	lr, [r4, #280]	; 0x118
   3bf9c:	45e6      	cmp	lr, ip
   3bf9e:	f000 8344 	beq.w	3c62a <ull_conn_llcp+0x726>
			conn->llcp_type = LLCP_CONN_UPD;
   3bfa2:	2301      	movs	r3, #1
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3bfa4:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
			conn->llcp_type = LLCP_CONN_UPD;
   3bfa8:	f884 30f2 	strb.w	r3, [r4, #242]	; 0xf2
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3bfac:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
			conn->llcp_ack -= 2U;
   3bfb0:	3802      	subs	r0, #2
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3bfb2:	429a      	cmp	r2, r3
			conn->llcp_ack -= 2U;
   3bfb4:	f884 00f1 	strb.w	r0, [r4, #241]	; 0xf1
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3bfb8:	d1cc      	bne.n	3bf54 <ull_conn_llcp+0x50>
			if (event_conn_upd_prep(conn, lazy,
   3bfba:	4632      	mov	r2, r6
   3bfbc:	4629      	mov	r1, r5
   3bfbe:	4620      	mov	r0, r4
   3bfc0:	f7eb f80a 	bl	26fd8 <event_conn_upd_prep>
   3bfc4:	2800      	cmp	r0, #0
   3bfc6:	f040 81ea 	bne.w	3c39e <ull_conn_llcp+0x49a>
				return -ECANCELED;
   3bfca:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3bfce:	e7b9      	b.n	3bf44 <ull_conn_llcp+0x40>
	conn->lll.enc_tx = 1;
   3bfd0:	f043 0310 	orr.w	r3, r3, #16
   3bfd4:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3bfd8:	7903      	ldrb	r3, [r0, #4]
   3bfda:	f043 0303 	orr.w	r3, r3, #3
   3bfde:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3bfe0:	2301      	movs	r3, #1
   3bfe2:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   3bfe4:	2306      	movs	r3, #6
   3bfe6:	71c3      	strb	r3, [r0, #7]
	    conn->tx_head &&
   3bfe8:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3bfec:	2b00      	cmp	r3, #0
   3bfee:	f000 86bc 	beq.w	3cd6a <ull_conn_llcp+0xe66>
	    !conn->llcp_enc.pause_tx &&
   3bff2:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3bff6:	0797      	lsls	r7, r2, #30
   3bff8:	f100 86b7 	bmi.w	3cd6a <ull_conn_llcp+0xe66>
	    !conn->llcp_phy.pause_tx &&
   3bffc:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c000:	07d0      	lsls	r0, r2, #31
   3c002:	f100 86b2 	bmi.w	3cd6a <ull_conn_llcp+0xe66>
		if (conn->tx_head == conn->tx_data) {
   3c006:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3c00a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3c00c:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3c010:	f001 8022 	beq.w	3d058 <ull_conn_llcp+0x1154>
		} else if (!conn->tx_ctrl) {
   3c014:	2a00      	cmp	r2, #0
   3c016:	f001 8143 	beq.w	3d2a0 <ull_conn_llcp+0x139c>
	tx->next = conn->tx_ctrl_last->next;
   3c01a:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c01e:	681a      	ldr	r2, [r3, #0]
   3c020:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   3c024:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   3c028:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   3c02c:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c030:	2b00      	cmp	r3, #0
   3c032:	f000 8744 	beq.w	3cebe <ull_conn_llcp+0xfba>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3c036:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3c03a:	f043 0303 	orr.w	r3, r3, #3
   3c03e:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3c042:	f894 70e5 	ldrb.w	r7, [r4, #229]	; 0xe5
   3c046:	2f00      	cmp	r7, #0
   3c048:	f43f af72 	beq.w	3bf30 <ull_conn_llcp+0x2c>
		switch (conn->periph.llcp_type) {
   3c04c:	2f02      	cmp	r7, #2
   3c04e:	f000 8168 	beq.w	3c322 <ull_conn_llcp+0x41e>
   3c052:	2f06      	cmp	r7, #6
   3c054:	d05c      	beq.n	3c110 <ull_conn_llcp+0x20c>
   3c056:	2f01      	cmp	r7, #1
   3c058:	d063      	beq.n	3c122 <ull_conn_llcp+0x21e>
			LL_ASSERT(0);
   3c05a:	4ac6      	ldr	r2, [pc, #792]	; (3c374 <ull_conn_llcp+0x470>)
   3c05c:	49c6      	ldr	r1, [pc, #792]	; (3c378 <ull_conn_llcp+0x474>)
   3c05e:	48c7      	ldr	r0, [pc, #796]	; (3c37c <ull_conn_llcp+0x478>)
   3c060:	f240 5312 	movw	r3, #1298	; 0x512
   3c064:	f00d fcc9 	bl	499fa <printk>
   3c068:	4040      	eors	r0, r0
   3c06a:	f380 8811 	msr	BASEPRI, r0
   3c06e:	f04f 0003 	mov.w	r0, #3
   3c072:	df02      	svc	2
			break;
   3c074:	e75c      	b.n	3bf30 <ull_conn_llcp+0x2c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c076:	48c2      	ldr	r0, [pc, #776]	; (3c380 <ull_conn_llcp+0x47c>)
   3c078:	f7f7 fed6 	bl	33e28 <mem_acquire>
		if (tx) {
   3c07c:	2800      	cmp	r0, #0
   3c07e:	d03a      	beq.n	3c0f6 <ull_conn_llcp+0x1f2>
			conn->llcp_terminate.ack--;
   3c080:	f894 3151 	ldrb.w	r3, [r4, #337]	; 0x151
   3c084:	3b01      	subs	r3, #1
   3c086:	f884 3151 	strb.w	r3, [r4, #337]	; 0x151
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c08a:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   3c08c:	2202      	movs	r2, #2
   3c08e:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c090:	f043 0303 	orr.w	r3, r3, #3
   3c094:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   3c096:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   3c098:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
			pdu_tx->llctrl.terminate_ind.error_code =
   3c09c:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
		if (!conn->tx_ctrl) {
   3c0a0:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
			pdu_tx->llctrl.terminate_ind.error_code =
   3c0a4:	7201      	strb	r1, [r0, #8]
	if (
   3c0a6:	2b00      	cmp	r3, #0
   3c0a8:	f000 8186 	beq.w	3c3b8 <ull_conn_llcp+0x4b4>
	    !conn->llcp_enc.pause_tx &&
   3c0ac:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c0b0:	078d      	lsls	r5, r1, #30
   3c0b2:	d412      	bmi.n	3c0da <ull_conn_llcp+0x1d6>
	    !conn->llcp_phy.pause_tx &&
   3c0b4:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3c0b8:	07c9      	lsls	r1, r1, #31
   3c0ba:	d40e      	bmi.n	3c0da <ull_conn_llcp+0x1d6>
		if (conn->tx_head == conn->tx_data) {
   3c0bc:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3c0c0:	428b      	cmp	r3, r1
   3c0c2:	f000 8562 	beq.w	3cb8a <ull_conn_llcp+0xc86>
		} else if (!conn->tx_ctrl) {
   3c0c6:	b95a      	cbnz	r2, 3c0e0 <ull_conn_llcp+0x1dc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3c0c8:	791a      	ldrb	r2, [r3, #4]
   3c0ca:	f002 0203 	and.w	r2, r2, #3
   3c0ce:	2a03      	cmp	r2, #3
   3c0d0:	f000 86ff 	beq.w	3ced2 <ull_conn_llcp+0xfce>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3c0d4:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   3c0d8:	e004      	b.n	3c0e4 <ull_conn_llcp+0x1e0>
		if (!conn->tx_ctrl) {
   3c0da:	2a00      	cmp	r2, #0
   3c0dc:	f000 8254 	beq.w	3c588 <ull_conn_llcp+0x684>
	tx->next = conn->tx_ctrl_last->next;
   3c0e0:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c0e4:	681a      	ldr	r2, [r3, #0]
   3c0e6:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3c0e8:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3c0ea:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   3c0ec:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c0f0:	2b00      	cmp	r3, #0
   3c0f2:	f000 8169 	beq.w	3c3c8 <ull_conn_llcp+0x4c4>
		if (!conn->procedure_expire) {
   3c0f6:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   3c0fa:	2b00      	cmp	r3, #0
   3c0fc:	f47f af21 	bne.w	3bf42 <ull_conn_llcp+0x3e>
			conn->procedure_expire = conn->supervision_reload;
   3c100:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   3c104:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
   3c106:	bf98      	it	ls
   3c108:	3301      	addls	r3, #1
   3c10a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   3c10e:	e718      	b.n	3bf42 <ull_conn_llcp+0x3e>
			event_counter = lll->event_counter +
   3c110:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   3c112:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   3c114:	4419      	add	r1, r3
   3c116:	4429      	add	r1, r5
			event_phy_upd_ind_prep(conn, event_counter);
   3c118:	4620      	mov	r0, r4
   3c11a:	b289      	uxth	r1, r1
   3c11c:	f7fd fd3c 	bl	39b98 <event_phy_upd_ind_prep>
		break;
   3c120:	e706      	b.n	3bf30 <ull_conn_llcp+0x2c>
			if (event_conn_upd_prep(conn, lazy,
   3c122:	4632      	mov	r2, r6
   3c124:	4629      	mov	r1, r5
   3c126:	4620      	mov	r0, r4
   3c128:	f7ea ff56 	bl	26fd8 <event_conn_upd_prep>
   3c12c:	2800      	cmp	r0, #0
   3c12e:	f47f aeff 	bne.w	3bf30 <ull_conn_llcp+0x2c>
   3c132:	e74a      	b.n	3bfca <ull_conn_llcp+0xc6>
			event_counter = lll->event_counter +
   3c134:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   3c136:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   3c138:	4419      	add	r1, r3
   3c13a:	4429      	add	r1, r5
			event_phy_upd_ind_prep(conn, event_counter);
   3c13c:	b289      	uxth	r1, r1
   3c13e:	4620      	mov	r0, r4
   3c140:	f7fd fd2a 	bl	39b98 <event_phy_upd_ind_prep>
		break;
   3c144:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3c148:	e6ef      	b.n	3bf2a <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c14a:	488d      	ldr	r0, [pc, #564]	; (3c380 <ull_conn_llcp+0x47c>)
   3c14c:	f7f7 fe6c 	bl	33e28 <mem_acquire>
	if (tx) {
   3c150:	2800      	cmp	r0, #0
   3c152:	f000 8124 	beq.w	3c39e <ull_conn_llcp+0x49a>
		conn->llcp_ack = conn->llcp_req;
   3c156:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c15a:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c15e:	7903      	ldrb	r3, [r0, #4]
   3c160:	f043 0303 	orr.w	r3, r3, #3
   3c164:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   3c166:	2301      	movs	r3, #1
   3c168:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   3c16a:	2312      	movs	r3, #18
   3c16c:	71c3      	strb	r3, [r0, #7]
		if (!conn->tx_ctrl) {
   3c16e:	e9d4 3275 	ldrd	r3, r2, [r4, #468]	; 0x1d4
	if (
   3c172:	2b00      	cmp	r3, #0
   3c174:	f000 8405 	beq.w	3c982 <ull_conn_llcp+0xa7e>
	    !conn->llcp_enc.pause_tx &&
   3c178:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c17c:	0789      	lsls	r1, r1, #30
   3c17e:	f100 82da 	bmi.w	3c736 <ull_conn_llcp+0x832>
	    !conn->llcp_phy.pause_tx &&
   3c182:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3c186:	07cf      	lsls	r7, r1, #31
   3c188:	f100 82d5 	bmi.w	3c736 <ull_conn_llcp+0x832>
		if (conn->tx_head == conn->tx_data) {
   3c18c:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3c190:	428b      	cmp	r3, r1
   3c192:	f000 866a 	beq.w	3ce6a <ull_conn_llcp+0xf66>
		} else if (!conn->tx_ctrl) {
   3c196:	2a00      	cmp	r2, #0
   3c198:	f000 86a6 	beq.w	3cee8 <ull_conn_llcp+0xfe4>
	tx->next = conn->tx_ctrl_last->next;
   3c19c:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c1a0:	681a      	ldr	r2, [r3, #0]
   3c1a2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3c1a4:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3c1a6:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   3c1a8:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c1ac:	2b00      	cmp	r3, #0
   3c1ae:	f000 83f0 	beq.w	3c992 <ull_conn_llcp+0xa8e>
		conn->procedure_expire = conn->procedure_reload;
   3c1b2:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   3c1b6:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3c1ba:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   3c1be:	e6b4      	b.n	3bf2a <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
   3c1c0:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3c1c4:	f013 0803 	ands.w	r8, r3, #3
   3c1c8:	f000 8150 	beq.w	3c46c <ull_conn_llcp+0x568>
		if (lll->role &&
   3c1cc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3c1d0:	2b00      	cmp	r3, #0
   3c1d2:	f6bf aead 	bge.w	3bf30 <ull_conn_llcp+0x2c>
   3c1d6:	f1b8 0f01 	cmp.w	r8, #1
   3c1da:	f47f af32 	bne.w	3c042 <ull_conn_llcp+0x13e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c1de:	4868      	ldr	r0, [pc, #416]	; (3c380 <ull_conn_llcp+0x47c>)
   3c1e0:	f7f7 fe22 	bl	33e28 <mem_acquire>
	if (!tx) {
   3c1e4:	4607      	mov	r7, r0
   3c1e6:	2800      	cmp	r0, #0
   3c1e8:	f000 80d9 	beq.w	3c39e <ull_conn_llcp+0x49a>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c1ec:	7903      	ldrb	r3, [r0, #4]
   3c1ee:	f043 0303 	orr.w	r3, r3, #3
   3c1f2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   3c1f4:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   3c1f8:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   3c1fa:	f100 0808 	add.w	r8, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   3c1fe:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   3c200:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   3c204:	210c      	movs	r1, #12
   3c206:	4640      	mov	r0, r8
   3c208:	f004 f8d0 	bl	403ac <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   3c20c:	4641      	mov	r1, r8
   3c20e:	2208      	movs	r2, #8
   3c210:	f504 7085 	add.w	r0, r4, #266	; 0x10a
   3c214:	f00f fd20 	bl	4bc58 <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
   3c218:	464a      	mov	r2, r9
   3c21a:	f107 0110 	add.w	r1, r7, #16
   3c21e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   3c222:	f00f fd19 	bl	4bc58 <memcpy>
	    conn->tx_head &&
   3c226:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3c22a:	2b00      	cmp	r3, #0
   3c22c:	f000 85a8 	beq.w	3cd80 <ull_conn_llcp+0xe7c>
	    !conn->llcp_enc.pause_tx &&
   3c230:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c234:	0791      	lsls	r1, r2, #30
   3c236:	f100 84cf 	bmi.w	3cbd8 <ull_conn_llcp+0xcd4>
	    !conn->llcp_phy.pause_tx &&
   3c23a:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c23e:	07d2      	lsls	r2, r2, #31
   3c240:	f100 84ca 	bmi.w	3cbd8 <ull_conn_llcp+0xcd4>
		if (conn->tx_head == conn->tx_data) {
   3c244:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3c248:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3c24c:	428b      	cmp	r3, r1
   3c24e:	f000 8674 	beq.w	3cf3a <ull_conn_llcp+0x1036>
		} else if (!conn->tx_ctrl) {
   3c252:	2a00      	cmp	r2, #0
   3c254:	f000 870f 	beq.w	3d076 <ull_conn_llcp+0x1172>
	tx->next = conn->tx_ctrl_last->next;
   3c258:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c25c:	681a      	ldr	r2, [r3, #0]
   3c25e:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   3c260:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   3c262:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   3c264:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c268:	2b00      	cmp	r3, #0
   3c26a:	f000 8593 	beq.w	3cd94 <ull_conn_llcp+0xe90>
			rx = ll_pdu_rx_alloc();
   3c26e:	f7fb fc85 	bl	37b7c <ll_pdu_rx_alloc>
			if (!rx) {
   3c272:	4607      	mov	r7, r0
   3c274:	2800      	cmp	r0, #0
   3c276:	f000 8092 	beq.w	3c39e <ull_conn_llcp+0x49a>
			rx->hdr.handle = conn->lll.handle;
   3c27a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3c27c:	80c3      	strh	r3, [r0, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3c27e:	2303      	movs	r3, #3
   3c280:	7103      	strb	r3, [r0, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3c282:	77c3      	strb	r3, [r0, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c284:	7f03      	ldrb	r3, [r0, #28]
   3c286:	f043 0303 	orr.w	r3, r3, #3
   3c28a:	7703      	strb	r3, [r0, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3c28c:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
   3c28e:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3c290:	7743      	strb	r3, [r0, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
   3c292:	f204 1179 	addw	r1, r4, #377	; 0x179
   3c296:	3020      	adds	r0, #32
   3c298:	f00f fcde 	bl	4bc58 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   3c29c:	f8b4 3177 	ldrh.w	r3, [r4, #375]	; 0x177
   3c2a0:	853b      	strh	r3, [r7, #40]	; 0x28
			ll_rx_put(rx->hdr.link, rx);
   3c2a2:	6838      	ldr	r0, [r7, #0]
   3c2a4:	4639      	mov	r1, r7
   3c2a6:	f7fb fc39 	bl	37b1c <ll_rx_put>
			ll_rx_sched();
   3c2aa:	f7fb fc41 	bl	37b30 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   3c2ae:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3c2b2:	2202      	movs	r2, #2
   3c2b4:	f362 0301 	bfi	r3, r2, #0, #2
   3c2b8:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
   3c2bc:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3c2c0:	e633      	b.n	3bf2a <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   3c2c2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   3c2c4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3c2c6:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   3c2c8:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
			event_counter = lll->event_counter +
   3c2cc:	442b      	add	r3, r5
	if (conn->llcp.chan_map.initiate) {
   3c2ce:	f012 0101 	ands.w	r1, r2, #1
			event_counter = lll->event_counter +
   3c2d2:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   3c2d4:	d17b      	bne.n	3c3ce <ull_conn_llcp+0x4ca>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   3c2d6:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
   3c2da:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3c2de:	1afb      	subs	r3, r7, r3
   3c2e0:	0418      	lsls	r0, r3, #16
   3c2e2:	f53f ae22 	bmi.w	3bf2a <ull_conn_llcp+0x26>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3c2e6:	2a00      	cmp	r2, #0
   3c2e8:	f2c0 8343 	blt.w	3c972 <ull_conn_llcp+0xa6e>
			conn->llcp_ack = conn->llcp_req;
   3c2ec:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c2f0:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
		memcpy(&lll->data_chan_map[0],
   3c2f4:	f104 0734 	add.w	r7, r4, #52	; 0x34
   3c2f8:	2205      	movs	r2, #5
   3c2fa:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
   3c2fe:	4638      	mov	r0, r7
   3c300:	f00f fcaa 	bl	4bc58 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   3c304:	2105      	movs	r1, #5
   3c306:	4638      	mov	r0, r7
   3c308:	f7f7 ff6e 	bl	341e8 <util_ones_count_get>
		lll->data_chan_count =
   3c30c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3c310:	2301      	movs	r3, #1
		lll->data_chan_count =
   3c312:	f360 0205 	bfi	r2, r0, #0, #6
   3c316:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3c31a:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
   3c31e:	b252      	sxtb	r2, r2
   3c320:	e603      	b.n	3bf2a <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   3c322:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3c324:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   3c326:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
			event_counter = lll->event_counter +
   3c32a:	440b      	add	r3, r1
   3c32c:	442b      	add	r3, r5
	if (conn->llcp.chan_map.initiate) {
   3c32e:	f012 0601 	ands.w	r6, r2, #1
			event_counter = lll->event_counter +
   3c332:	b29d      	uxth	r5, r3
	if (conn->llcp.chan_map.initiate) {
   3c334:	f040 812e 	bne.w	3c594 <ull_conn_llcp+0x690>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   3c338:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
   3c33c:	1aeb      	subs	r3, r5, r3
   3c33e:	041f      	lsls	r7, r3, #16
   3c340:	f53f adf6 	bmi.w	3bf30 <ull_conn_llcp+0x2c>
		memcpy(&lll->data_chan_map[0],
   3c344:	f104 0534 	add.w	r5, r4, #52	; 0x34
   3c348:	2205      	movs	r2, #5
   3c34a:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
			conn->periph.llcp_type = LLCP_NONE;
   3c34e:	f884 60e5 	strb.w	r6, [r4, #229]	; 0xe5
		memcpy(&lll->data_chan_map[0],
   3c352:	4628      	mov	r0, r5
   3c354:	f00f fc80 	bl	4bc58 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   3c358:	2105      	movs	r1, #5
   3c35a:	4628      	mov	r0, r5
   3c35c:	f7f7 ff44 	bl	341e8 <util_ones_count_get>
		lll->data_chan_count =
   3c360:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3c364:	2201      	movs	r2, #1
		lll->data_chan_count =
   3c366:	f360 0305 	bfi	r3, r0, #0, #6
   3c36a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3c36e:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
   3c372:	e5dd      	b.n	3bf30 <ull_conn_llcp+0x2c>
   3c374:	00052f80 	.word	0x00052f80
   3c378:	00052ad0 	.word	0x00052ad0
   3c37c:	00052a70 	.word	0x00052a70
   3c380:	200059a0 	.word	0x200059a0
			LL_ASSERT(0);
   3c384:	4ace      	ldr	r2, [pc, #824]	; (3c6c0 <ull_conn_llcp+0x7bc>)
   3c386:	49cf      	ldr	r1, [pc, #828]	; (3c6c4 <ull_conn_llcp+0x7c0>)
   3c388:	48cf      	ldr	r0, [pc, #828]	; (3c6c8 <ull_conn_llcp+0x7c4>)
   3c38a:	f240 43e1 	movw	r3, #1249	; 0x4e1
   3c38e:	f00d fb34 	bl	499fa <printk>
   3c392:	4040      	eors	r0, r0
   3c394:	f380 8811 	msr	BASEPRI, r0
   3c398:	f04f 0003 	mov.w	r0, #3
   3c39c:	df02      	svc	2
			break;
   3c39e:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3c3a2:	e5c2      	b.n	3bf2a <ull_conn_llcp+0x26>
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   3c3a4:	f894 70e5 	ldrb.w	r7, [r4, #229]	; 0xe5
   3c3a8:	2f00      	cmp	r7, #0
   3c3aa:	f47f ae4f 	bne.w	3c04c <ull_conn_llcp+0x148>
   3c3ae:	e5ec      	b.n	3bf8a <ull_conn_llcp+0x86>
				event_len_prep(conn);
   3c3b0:	4620      	mov	r0, r4
   3c3b2:	f7fd faed 	bl	39990 <event_len_prep>
   3c3b6:	e5d4      	b.n	3bf62 <ull_conn_llcp+0x5e>
		if (!conn->tx_ctrl) {
   3c3b8:	2a00      	cmp	r2, #0
   3c3ba:	f47f ae91 	bne.w	3c0e0 <ull_conn_llcp+0x1dc>
			tx->next = conn->tx_head;
   3c3be:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3c3c0:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3c3c4:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
		conn->tx_data_last = tx;
   3c3c8:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   3c3cc:	e693      	b.n	3c0f6 <ull_conn_llcp+0x1f2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c3ce:	48bf      	ldr	r0, [pc, #764]	; (3c6cc <ull_conn_llcp+0x7c8>)
   3c3d0:	f7f7 fd2a 	bl	33e28 <mem_acquire>
		if (tx) {
   3c3d4:	4680      	mov	r8, r0
   3c3d6:	2800      	cmp	r0, #0
   3c3d8:	d0e1      	beq.n	3c39e <ull_conn_llcp+0x49a>
						      conn->lll.latency + 6;
   3c3da:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   3c3dc:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
						      conn->lll.latency + 6;
   3c3e0:	3306      	adds	r3, #6
   3c3e2:	443b      	add	r3, r7
			conn->llcp.chan_map.instant = event_counter +
   3c3e4:	f8a4 30fa 	strh.w	r3, [r4, #250]	; 0xfa
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c3e8:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   3c3ea:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c3ee:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   3c3f2:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c3f6:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3c3f8:	2308      	movs	r3, #8
   3c3fa:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   3c3fc:	2301      	movs	r3, #1
   3c3fe:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   3c400:	2205      	movs	r2, #5
   3c402:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
   3c406:	3008      	adds	r0, #8
   3c408:	f00f fc26 	bl	4bc58 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   3c40c:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
   3c410:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
   3c414:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3c418:	2b00      	cmp	r3, #0
   3c41a:	f000 82bd 	beq.w	3c998 <ull_conn_llcp+0xa94>
	    !conn->llcp_enc.pause_tx &&
   3c41e:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c422:	0792      	lsls	r2, r2, #30
   3c424:	f100 82b8 	bmi.w	3c998 <ull_conn_llcp+0xa94>
	    !conn->llcp_phy.pause_tx &&
   3c428:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c42c:	07d7      	lsls	r7, r2, #31
   3c42e:	f100 82b3 	bmi.w	3c998 <ull_conn_llcp+0xa94>
		if (conn->tx_head == conn->tx_data) {
   3c432:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3c436:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3c43a:	428b      	cmp	r3, r1
   3c43c:	f000 855e 	beq.w	3cefc <ull_conn_llcp+0xff8>
		} else if (!conn->tx_ctrl) {
   3c440:	2a00      	cmp	r2, #0
   3c442:	f000 866f 	beq.w	3d124 <ull_conn_llcp+0x1220>
	tx->next = conn->tx_ctrl_last->next;
   3c446:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c44a:	681a      	ldr	r2, [r3, #0]
   3c44c:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   3c450:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   3c454:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   3c458:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3c45c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	if (!tx->next) {
   3c460:	2b00      	cmp	r3, #0
   3c462:	f47f af5c 	bne.w	3c31e <ull_conn_llcp+0x41a>
		conn->tx_data_last = tx;
   3c466:	f8c4 81e4 	str.w	r8, [r4, #484]	; 0x1e4
   3c46a:	e758      	b.n	3c31e <ull_conn_llcp+0x41a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c46c:	4897      	ldr	r0, [pc, #604]	; (3c6cc <ull_conn_llcp+0x7c8>)
   3c46e:	f7f7 fcdb 	bl	33e28 <mem_acquire>
	if (!tx) {
   3c472:	4681      	mov	r9, r0
   3c474:	2800      	cmp	r0, #0
   3c476:	d092      	beq.n	3c39e <ull_conn_llcp+0x49a>
	if (!lll->role) {
   3c478:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3c47c:	2b00      	cmp	r3, #0
   3c47e:	f280 8303 	bge.w	3ca88 <ull_conn_llcp+0xb84>
	else if (!lll->enc_rx) {
   3c482:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3c486:	0719      	lsls	r1, r3, #28
   3c488:	f53f ada2 	bmi.w	3bfd0 <ull_conn_llcp+0xcc>
		if (conn->llcp.encryption.error_code) {
   3c48c:	f894 8101 	ldrb.w	r8, [r4, #257]	; 0x101
   3c490:	f1b8 0f00 	cmp.w	r8, #0
   3c494:	f040 8482 	bne.w	3cd9c <ull_conn_llcp+0xe98>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   3c498:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   3c49c:	463b      	mov	r3, r7
   3c49e:	4642      	mov	r2, r8
   3c4a0:	f504 7181 	add.w	r1, r4, #258	; 0x102
   3c4a4:	f204 1081 	addw	r0, r4, #385	; 0x181
   3c4a8:	f006 faec 	bl	42a84 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
   3c4ac:	4639      	mov	r1, r7
   3c4ae:	2210      	movs	r2, #16
   3c4b0:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   3c4b4:	f00f fbd0 	bl	4bc58 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   3c4b8:	2208      	movs	r2, #8
   3c4ba:	f104 0194 	add.w	r1, r4, #148	; 0x94
   3c4be:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   3c4c2:	f00f fbc9 	bl	4bc58 <memcpy>
			lll->ccm_rx.direction = 1U;
   3c4c6:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
			lll->ccm_rx.counter = 0U;
   3c4ca:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->ccm_rx.direction = 1U;
   3c4ce:	f043 0301 	orr.w	r3, r3, #1
   3c4d2:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   3c4d6:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			lll->ccm_rx.counter = 0U;
   3c4da:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
			lll->ccm_tx.direction = 0U;
   3c4de:	f368 0300 	bfi	r3, r8, #0, #1
   3c4e2:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
   3c4e6:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
   3c4ea:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
			lll->enc_rx = 1U;
   3c4ee:	f043 0308 	orr.w	r3, r3, #8
   3c4f2:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c4f6:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   3c4fa:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c4fe:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
   3c502:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
			lll->ccm_rx.counter = 0U;
   3c506:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   3c50a:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   3c50e:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   3c512:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c516:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3c51a:	2301      	movs	r3, #1
   3c51c:	f889 3005 	strb.w	r3, [r9, #5]
	    conn->tx_head &&
   3c520:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
			pdu_ctrl_tx->llctrl.opcode =
   3c524:	2305      	movs	r3, #5
   3c526:	f889 3007 	strb.w	r3, [r9, #7]
	if (
   3c52a:	2a00      	cmp	r2, #0
   3c52c:	f000 8360 	beq.w	3cbf0 <ull_conn_llcp+0xcec>
	    !conn->llcp_enc.pause_tx &&
   3c530:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c534:	0799      	lsls	r1, r3, #30
   3c536:	f100 835b 	bmi.w	3cbf0 <ull_conn_llcp+0xcec>
	    !conn->llcp_phy.pause_tx &&
   3c53a:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   3c53e:	07db      	lsls	r3, r3, #31
   3c540:	f100 8356 	bmi.w	3cbf0 <ull_conn_llcp+0xcec>
		if (conn->tx_head == conn->tx_data) {
   3c544:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3c548:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3c54c:	428a      	cmp	r2, r1
   3c54e:	f000 8574 	beq.w	3d03a <ull_conn_llcp+0x1136>
		} else if (!conn->tx_ctrl) {
   3c552:	2b00      	cmp	r3, #0
   3c554:	f000 86b4 	beq.w	3d2c0 <ull_conn_llcp+0x13bc>
	tx->next = conn->tx_ctrl_last->next;
   3c558:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c55c:	681a      	ldr	r2, [r3, #0]
   3c55e:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   3c562:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   3c566:	f8d9 3000 	ldr.w	r3, [r9]
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3c56a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	conn->tx_ctrl_last = tx;
   3c56e:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c572:	2b00      	cmp	r3, #0
   3c574:	f000 82f7 	beq.w	3cb66 <ull_conn_llcp+0xc62>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3c578:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3c57c:	f043 0303 	orr.w	r3, r3, #3
   3c580:	b252      	sxtb	r2, r2
   3c582:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
   3c586:	e4d0      	b.n	3bf2a <ull_conn_llcp+0x26>
			tx->next = conn->tx_head;
   3c588:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3c58a:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3c58e:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c592:	e5b0      	b.n	3c0f6 <ull_conn_llcp+0x1f2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c594:	484d      	ldr	r0, [pc, #308]	; (3c6cc <ull_conn_llcp+0x7c8>)
   3c596:	f7f7 fc47 	bl	33e28 <mem_acquire>
		if (tx) {
   3c59a:	4606      	mov	r6, r0
   3c59c:	2800      	cmp	r0, #0
   3c59e:	f43f acc7 	beq.w	3bf30 <ull_conn_llcp+0x2c>
						      conn->lll.latency + 6;
   3c5a2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   3c5a4:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c5a8:	7902      	ldrb	r2, [r0, #4]
						      conn->lll.latency + 6;
   3c5aa:	3306      	adds	r3, #6
			conn->llcp.chan_map.initiate = 0U;
   3c5ac:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
   3c5b0:	442b      	add	r3, r5
			conn->llcp.chan_map.initiate = 0U;
   3c5b2:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
			conn->llcp.chan_map.instant = event_counter +
   3c5b6:	f8a4 30fa 	strh.w	r3, [r4, #250]	; 0xfa
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c5ba:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
   3c5be:	2301      	movs	r3, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3c5c0:	2108      	movs	r1, #8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c5c2:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3c5c4:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   3c5c6:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   3c5c8:	2205      	movs	r2, #5
   3c5ca:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
   3c5ce:	3008      	adds	r0, #8
   3c5d0:	f00f fb42 	bl	4bc58 <memcpy>
	    conn->tx_head &&
   3c5d4:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   3c5d8:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
   3c5dc:	f8a6 200d 	strh.w	r2, [r6, #13]
	if (
   3c5e0:	2b00      	cmp	r3, #0
   3c5e2:	f000 8358 	beq.w	3cc96 <ull_conn_llcp+0xd92>
	    !conn->llcp_enc.pause_tx &&
   3c5e6:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c5ea:	0791      	lsls	r1, r2, #30
   3c5ec:	f100 82e8 	bmi.w	3cbc0 <ull_conn_llcp+0xcbc>
	    !conn->llcp_phy.pause_tx &&
   3c5f0:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c5f4:	07d2      	lsls	r2, r2, #31
   3c5f6:	f100 82e3 	bmi.w	3cbc0 <ull_conn_llcp+0xcbc>
		if (conn->tx_head == conn->tx_data) {
   3c5fa:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3c5fe:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3c602:	428b      	cmp	r3, r1
   3c604:	f000 848b 	beq.w	3cf1e <ull_conn_llcp+0x101a>
		} else if (!conn->tx_ctrl) {
   3c608:	2a00      	cmp	r2, #0
   3c60a:	f000 859c 	beq.w	3d146 <ull_conn_llcp+0x1242>
	tx->next = conn->tx_ctrl_last->next;
   3c60e:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c612:	681a      	ldr	r2, [r3, #0]
   3c614:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
   3c616:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
   3c618:	6833      	ldr	r3, [r6, #0]
	conn->tx_ctrl_last = tx;
   3c61a:	f8c4 61dc 	str.w	r6, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c61e:	2b00      	cmp	r3, #0
   3c620:	f47f ac86 	bne.w	3bf30 <ull_conn_llcp+0x2c>
		conn->tx_data_last = tx;
   3c624:	f8c4 61e4 	str.w	r6, [r4, #484]	; 0x1e4
   3c628:	e482      	b.n	3bf30 <ull_conn_llcp+0x2c>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   3c62a:	f894 e131 	ldrb.w	lr, [r4, #305]	; 0x131
   3c62e:	f894 8130 	ldrb.w	r8, [r4, #304]	; 0x130
   3c632:	45c6      	cmp	lr, r8
   3c634:	d04c      	beq.n	3c6d0 <ull_conn_llcp+0x7cc>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   3c636:	ebae 0e08 	sub.w	lr, lr, r8
   3c63a:	f01e 0f01 	tst.w	lr, #1
   3c63e:	f43f ac74 	beq.w	3bf2a <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
   3c642:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3c646:	f013 0701 	ands.w	r7, r3, #1
   3c64a:	f000 81b1 	beq.w	3c9b0 <ull_conn_llcp+0xaac>
		rx = ll_pdu_rx_alloc();
   3c64e:	f7fb fa95 	bl	37b7c <ll_pdu_rx_alloc>
		if (!rx) {
   3c652:	4607      	mov	r7, r0
   3c654:	2800      	cmp	r0, #0
   3c656:	f000 8147 	beq.w	3c8e8 <ull_conn_llcp+0x9e4>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   3c65a:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
   3c65e:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
		rx->hdr.handle = conn->lll.handle;
   3c662:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3c664:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3c666:	2303      	movs	r3, #3
   3c668:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c66a:	7f03      	ldrb	r3, [r0, #28]
   3c66c:	f043 0303 	orr.w	r3, r3, #3
   3c670:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   3c672:	2309      	movs	r3, #9
   3c674:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   3c676:	77c3      	strb	r3, [r0, #31]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   3c678:	2208      	movs	r2, #8
   3c67a:	2100      	movs	r1, #0
   3c67c:	3020      	adds	r0, #32
   3c67e:	f00f faf6 	bl	4bc6e <memset>
	sys_put_le32(val >> 32, &dst[4]);
   3c682:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	dst[0] = val;
   3c686:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   3c688:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
   3c68c:	f363 0207 	bfi	r2, r3, #0, #8
   3c690:	f361 220f 	bfi	r2, r1, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   3c694:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   3c696:	f363 4217 	bfi	r2, r3, #16, #8
	dst[1] = val >> 8;
   3c69a:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
   3c69c:	f363 621f 	bfi	r2, r3, #24, #8
   3c6a0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   3c6a4:	623b      	str	r3, [r7, #32]
   3c6a6:	627a      	str	r2, [r7, #36]	; 0x24
		ll_rx_put(rx->hdr.link, rx);
   3c6a8:	4639      	mov	r1, r7
		ll_rx_put(rx->hdr.link, rx);
   3c6aa:	6808      	ldr	r0, [r1, #0]
   3c6ac:	f7fb fa36 	bl	37b1c <ll_rx_put>
		ll_rx_sched();
   3c6b0:	f7fb fa3e 	bl	37b30 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3c6b4:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c6b8:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
   3c6bc:	e42d      	b.n	3bf1a <ull_conn_llcp+0x16>
   3c6be:	bf00      	nop
   3c6c0:	00052f80 	.word	0x00052f80
   3c6c4:	00052ad0 	.word	0x00052ad0
   3c6c8:	00052a70 	.word	0x00052a70
   3c6cc:	200059a0 	.word	0x200059a0
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   3c6d0:	f894 e149 	ldrb.w	lr, [r4, #329]	; 0x149
   3c6d4:	f894 8148 	ldrb.w	r8, [r4, #328]	; 0x148
   3c6d8:	45c6      	cmp	lr, r8
   3c6da:	d035      	beq.n	3c748 <ull_conn_llcp+0x844>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   3c6dc:	ebae 0e08 	sub.w	lr, lr, r8
   3c6e0:	f01e 0f01 	tst.w	lr, #1
   3c6e4:	f43f ac21 	beq.w	3bf2a <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
   3c6e8:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   3c6ec:	07d9      	lsls	r1, r3, #31
   3c6ee:	f140 82f7 	bpl.w	3cce0 <ull_conn_llcp+0xddc>
	} else if (conn->llcp_version.rx) {
   3c6f2:	0798      	lsls	r0, r3, #30
   3c6f4:	f140 82e6 	bpl.w	3ccc4 <ull_conn_llcp+0xdc0>
		rx = ll_pdu_rx_alloc();
   3c6f8:	f7fb fa40 	bl	37b7c <ll_pdu_rx_alloc>
		if (!rx) {
   3c6fc:	4601      	mov	r1, r0
   3c6fe:	2800      	cmp	r0, #0
   3c700:	f000 80f2 	beq.w	3c8e8 <ull_conn_llcp+0x9e4>
		conn->llcp_version.ack = conn->llcp_version.req;
   3c704:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
   3c708:	f884 3149 	strb.w	r3, [r4, #329]	; 0x149
		rx->hdr.handle = conn->lll.handle;
   3c70c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3c70e:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3c710:	2303      	movs	r3, #3
   3c712:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c714:	7f03      	ldrb	r3, [r0, #28]
   3c716:	f043 0303 	orr.w	r3, r3, #3
   3c71a:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   3c71c:	2306      	movs	r3, #6
   3c71e:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   3c720:	230c      	movs	r3, #12
   3c722:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
   3c724:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
   3c728:	f880 3020 	strb.w	r3, [r0, #32]
			sys_cpu_to_le16(conn->llcp_version.company_id);
   3c72c:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		pdu->llctrl.version_ind.company_id =
   3c730:	f8c0 3021 	str.w	r3, [r0, #33]	; 0x21
   3c734:	e7b9      	b.n	3c6aa <ull_conn_llcp+0x7a6>
		if (!conn->tx_ctrl) {
   3c736:	2a00      	cmp	r2, #0
   3c738:	f47f ad30 	bne.w	3c19c <ull_conn_llcp+0x298>
			tx->next = conn->tx_head;
   3c73c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3c73e:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3c742:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c746:	e534      	b.n	3c1b2 <ull_conn_llcp+0x2ae>
		} else if (conn->llcp_conn_param.ack !=
   3c748:	f894 8195 	ldrb.w	r8, [r4, #405]	; 0x195
   3c74c:	f894 e194 	ldrb.w	lr, [r4, #404]	; 0x194
   3c750:	45f0      	cmp	r8, lr
   3c752:	f000 820b 	beq.w	3cb6c <ull_conn_llcp+0xc68>
	return conn_upd_curr && (conn_upd_curr != conn);
   3c756:	f8df 8320 	ldr.w	r8, [pc, #800]	; 3ca78 <ull_conn_llcp+0xb74>
			event_counter = lll->event_counter +
   3c75a:	f8b4 9032 	ldrh.w	r9, [r4, #50]	; 0x32
	return conn_upd_curr && (conn_upd_curr != conn);
   3c75e:	f8d8 e000 	ldr.w	lr, [r8]
					lll->latency_prepare + lazy;
   3c762:	f8b4 a02e 	ldrh.w	sl, [r4, #46]	; 0x2e
	return conn_upd_curr && (conn_upd_curr != conn);
   3c766:	f1be 0f00 	cmp.w	lr, #0
   3c76a:	f000 8358 	beq.w	3ce1e <ull_conn_llcp+0xf1a>
   3c76e:	4574      	cmp	r4, lr
   3c770:	f47f abdb 	bne.w	3bf2a <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
   3c774:	f894 e196 	ldrb.w	lr, [r4, #406]	; 0x196
   3c778:	f00e 0e0f 	and.w	lr, lr, #15
   3c77c:	f1be 0f08 	cmp.w	lr, #8
   3c780:	f200 8644 	bhi.w	3d40c <ull_conn_llcp+0x1508>
   3c784:	f20f 0b04 	addw	fp, pc, #4
   3c788:	f85b f02e 	ldr.w	pc, [fp, lr, lsl #2]
   3c78c:	0003c85b 	.word	0x0003c85b
   3c790:	0003c8f5 	.word	0x0003c8f5
   3c794:	0003c81d 	.word	0x0003c81d
   3c798:	0003bf1b 	.word	0x0003bf1b
   3c79c:	0003bf1b 	.word	0x0003bf1b
   3c7a0:	0003bf1b 	.word	0x0003bf1b
   3c7a4:	0003bf1b 	.word	0x0003bf1b
   3c7a8:	0003bf1b 	.word	0x0003bf1b
   3c7ac:	0003c7b1 	.word	0x0003c7b1
			CONTAINER_OF(conn->llcp_conn_param.pdu_win_offset0,
   3c7b0:	f8d4 c1b0 	ldr.w	ip, [r4, #432]	; 0x1b0
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   3c7b4:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
			event_counter = lll->event_counter +
   3c7b8:	eb09 030a 	add.w	r3, r9, sl
   3c7bc:	442b      	add	r3, r5
		pdu_ctrl_tx->llctrl.conn_param_req.reference_conn_event_count =
   3c7be:	f82c 3c02 	strh.w	r3, [ip, #-2]
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   3c7c2:	2304      	movs	r3, #4
   3c7c4:	f363 0103 	bfi	r1, r3, #0, #4
   3c7c8:	f884 1196 	strb.w	r1, [r4, #406]	; 0x196
		if (!conn->tx_ctrl) {
   3c7cc:	e9d4 3175 	ldrd	r3, r1, [r4, #468]	; 0x1d4
		tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
   3c7d0:	f1ac 0013 	sub.w	r0, ip, #19
	if (
   3c7d4:	2b00      	cmp	r3, #0
   3c7d6:	f000 83c9 	beq.w	3cf6c <ull_conn_llcp+0x1068>
	    conn->tx_head &&
   3c7da:	07bf      	lsls	r7, r7, #30
   3c7dc:	f100 83c6 	bmi.w	3cf6c <ull_conn_llcp+0x1068>
	    !conn->llcp_phy.pause_tx &&
   3c7e0:	f894 71cf 	ldrb.w	r7, [r4, #463]	; 0x1cf
   3c7e4:	07ff      	lsls	r7, r7, #31
   3c7e6:	f100 83c1 	bmi.w	3cf6c <ull_conn_llcp+0x1068>
		if (conn->tx_head == conn->tx_data) {
   3c7ea:	f8d4 71e0 	ldr.w	r7, [r4, #480]	; 0x1e0
   3c7ee:	42bb      	cmp	r3, r7
   3c7f0:	f000 85a6 	beq.w	3d340 <ull_conn_llcp+0x143c>
		} else if (!conn->tx_ctrl) {
   3c7f4:	2900      	cmp	r1, #0
   3c7f6:	f000 859a 	beq.w	3d32e <ull_conn_llcp+0x142a>
	tx->next = conn->tx_ctrl_last->next;
   3c7fa:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c7fe:	6819      	ldr	r1, [r3, #0]
   3c800:	f84c 1c13 	str.w	r1, [ip, #-19]
	conn->tx_ctrl_last->next = tx;
   3c804:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3c806:	f85c 3c13 	ldr.w	r3, [ip, #-19]
	conn->tx_ctrl_last = tx;
   3c80a:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c80e:	2b00      	cmp	r3, #0
   3c810:	f47f ab8b 	bne.w	3bf2a <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
   3c814:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   3c818:	f7ff bb87 	b.w	3bf2a <ull_conn_llcp+0x26>
	if (conn->llcp_enc.pause_tx) {
   3c81c:	07bb      	lsls	r3, r7, #30
   3c81e:	f53f ab84 	bmi.w	3bf2a <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
   3c822:	f7fb f9ab 	bl	37b7c <ll_pdu_rx_alloc>
	if (!rx) {
   3c826:	4601      	mov	r1, r0
   3c828:	2800      	cmp	r0, #0
   3c82a:	d05d      	beq.n	3c8e8 <ull_conn_llcp+0x9e4>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   3c82c:	f894 0196 	ldrb.w	r0, [r4, #406]	; 0x196
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c830:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   3c832:	2203      	movs	r2, #3
   3c834:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c838:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   3c83c:	f884 0196 	strb.w	r0, [r4, #406]	; 0x196
	rx->hdr.handle = conn->lll.handle;
   3c840:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c842:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   3c844:	2318      	movs	r3, #24
   3c846:	774b      	strb	r3, [r1, #29]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3c848:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
   3c84a:	80c8      	strh	r0, [r1, #6]
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3c84c:	710a      	strb	r2, [r1, #4]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3c84e:	77cb      	strb	r3, [r1, #31]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   3c850:	e9d4 3266 	ldrd	r3, r2, [r4, #408]	; 0x198
   3c854:	624a      	str	r2, [r1, #36]	; 0x24
   3c856:	620b      	str	r3, [r1, #32]
   3c858:	e727      	b.n	3c6aa <ull_conn_llcp+0x7a6>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c85a:	4888      	ldr	r0, [pc, #544]	; (3ca7c <ull_conn_llcp+0xb78>)
   3c85c:	f7f7 fae4 	bl	33e28 <mem_acquire>
	if (!tx) {
   3c860:	2800      	cmp	r0, #0
   3c862:	d041      	beq.n	3c8e8 <ull_conn_llcp+0x9e4>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c864:	7902      	ldrb	r2, [r0, #4]
	conn_upd_curr = conn;
   3c866:	f8c8 4000 	str.w	r4, [r8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c86a:	f042 0203 	orr.w	r2, r2, #3
   3c86e:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   3c870:	2218      	movs	r2, #24
   3c872:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3c874:	220f      	movs	r2, #15
   3c876:	71c2      	strb	r2, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   3c878:	e9d4 2166 	ldrd	r2, r1, [r4, #408]	; 0x198
   3c87c:	6082      	str	r2, [r0, #8]
	p->preferred_periodicity = 0U;
   3c87e:	2200      	movs	r2, #0
   3c880:	7402      	strb	r2, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
   3c882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3c886:	f8c0 2017 	str.w	r2, [r0, #23]
   3c88a:	f8c0 201b 	str.w	r2, [r0, #27]
   3c88e:	4a7c      	ldr	r2, [pc, #496]	; (3ca80 <ull_conn_llcp+0xb7c>)
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   3c890:	60c1      	str	r1, [r0, #12]
	p->offset0 = sys_cpu_to_le16(0x0000);
   3c892:	f8c0 2013 	str.w	r2, [r0, #19]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
   3c896:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   3c89a:	f8c4 61b4 	str.w	r6, [r4, #436]	; 0x1b4
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
   3c89e:	2207      	movs	r2, #7
   3c8a0:	f362 0303 	bfi	r3, r2, #0, #4
   3c8a4:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   3c8a8:	68a3      	ldr	r3, [r4, #8]
	conn->procedure_expire = conn->procedure_reload;
   3c8aa:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   3c8ae:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   3c8b2:	2b00      	cmp	r3, #0
   3c8b4:	f100 0113 	add.w	r1, r0, #19
   3c8b8:	da0a      	bge.n	3c8d0 <ull_conn_llcp+0x9cc>
			uint32_t ticks_prepare_to_start =
   3c8ba:	68e7      	ldr	r7, [r4, #12]
   3c8bc:	6860      	ldr	r0, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
   3c8be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
   3c8c2:	4287      	cmp	r7, r0
   3c8c4:	bf2c      	ite	cs
   3c8c6:	19f2      	addcs	r2, r6, r7
   3c8c8:	1832      	addcc	r2, r6, r0
   3c8ca:	1ad3      	subs	r3, r2, r3
   3c8cc:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
		s_mfy_sched_offset.param = (void *)conn;
   3c8d0:	4b6c      	ldr	r3, [pc, #432]	; (3ca84 <ull_conn_llcp+0xb80>)
		conn->llcp_conn_param.pdu_win_offset0 = win_offs;
   3c8d2:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   3c8d6:	2201      	movs	r2, #1
   3c8d8:	2102      	movs	r1, #2
   3c8da:	4610      	mov	r0, r2
		s_mfy_sched_offset.param = (void *)conn;
   3c8dc:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   3c8de:	f7f7 fb7d 	bl	33fdc <mayfly_enqueue>
		LL_ASSERT(!retval);
   3c8e2:	2800      	cmp	r0, #0
   3c8e4:	f040 84c0 	bne.w	3d268 <ull_conn_llcp+0x1364>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3c8e8:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c8ec:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
		return;
   3c8f0:	f7ff bb13 	b.w	3bf1a <ull_conn_llcp+0x16>
	if (conn->llcp_conn_param.status) {
   3c8f4:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   3c8f8:	2b00      	cmp	r3, #0
   3c8fa:	f040 835f 	bne.w	3cfbc <ull_conn_llcp+0x10b8>
	if (!conn->lll.role) {
   3c8fe:	2900      	cmp	r1, #0
   3c900:	f2c0 8463 	blt.w	3d1ca <ull_conn_llcp+0x12c6>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3c904:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
		conn->llcp_cu.win_offset_us = 0U;
   3c908:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3c90c:	2106      	movs	r1, #6
   3c90e:	f361 0203 	bfi	r2, r1, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   3c912:	f894 11a0 	ldrb.w	r1, [r4, #416]	; 0x1a0
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3c916:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
		conn->llcp_cu.win_size = 1U;
   3c91a:	2001      	movs	r0, #1
		interval_max = conn->llcp_conn_param.interval_max;
   3c91c:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
		conn->llcp_cu.win_size = 1U;
   3c920:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
		if (preferred_periodicity) {
   3c924:	2900      	cmp	r1, #0
   3c926:	f000 84dc 	beq.w	3d2e2 <ull_conn_llcp+0x13de>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   3c92a:	fbb2 f3f1 	udiv	r3, r2, r1
   3c92e:	fb13 f301 	smulbb	r3, r3, r1
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
   3c932:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   3c936:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
   3c938:	4299      	cmp	r1, r3
   3c93a:	bf98      	it	ls
   3c93c:	461a      	movls	r2, r3
   3c93e:	f8a4 211c 	strh.w	r2, [r4, #284]	; 0x11c
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3c942:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   3c946:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   3c94a:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
   3c94e:	f8c4 111e 	str.w	r1, [r4, #286]	; 0x11e
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3c952:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   3c956:	00db      	lsls	r3, r3, #3
   3c958:	f043 0302 	orr.w	r3, r3, #2
   3c95c:	f022 020f 	bic.w	r2, r2, #15
   3c960:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
   3c962:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   3c966:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
		conn->llcp_cu.ack--;
   3c96a:	f884 c119 	strb.w	ip, [r4, #281]	; 0x119
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3c96e:	f7ff badf 	b.w	3bf30 <ull_conn_llcp+0x2c>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3c972:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   3c976:	2b00      	cmp	r3, #0
   3c978:	f43f acb8 	beq.w	3c2ec <ull_conn_llcp+0x3e8>
			conn->periph.llcp_type = LLCP_NONE;
   3c97c:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
   3c980:	e4b8      	b.n	3c2f4 <ull_conn_llcp+0x3f0>
		if (!conn->tx_ctrl) {
   3c982:	2a00      	cmp	r2, #0
   3c984:	f47f ac0a 	bne.w	3c19c <ull_conn_llcp+0x298>
			tx->next = conn->tx_head;
   3c988:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3c98a:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3c98e:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
		conn->tx_data_last = tx;
   3c992:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   3c996:	e40c      	b.n	3c1b2 <ull_conn_llcp+0x2ae>
		if (!conn->tx_ctrl) {
   3c998:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3c99c:	2a00      	cmp	r2, #0
   3c99e:	f47f ad52 	bne.w	3c446 <ull_conn_llcp+0x542>
			tx->next = conn->tx_head;
   3c9a2:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   3c9a6:	e9c4 8875 	strd	r8, r8, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3c9aa:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
   3c9ae:	e555      	b.n	3c45c <ull_conn_llcp+0x558>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c9b0:	4832      	ldr	r0, [pc, #200]	; (3ca7c <ull_conn_llcp+0xb78>)
   3c9b2:	f7f7 fa39 	bl	33e28 <mem_acquire>
	if (tx) {
   3c9b6:	4680      	mov	r8, r0
   3c9b8:	2800      	cmp	r0, #0
   3c9ba:	d095      	beq.n	3c8e8 <ull_conn_llcp+0x9e4>
		conn->llcp_feature.ack--;
   3c9bc:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
   3c9c0:	3b01      	subs	r3, #1
   3c9c2:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   3c9c6:	2309      	movs	r3, #9
   3c9c8:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   3c9ca:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3c9ce:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c9d0:	7903      	ldrb	r3, [r0, #4]
   3c9d2:	f043 0303 	orr.w	r3, r3, #3
   3c9d6:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   3c9d8:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
   3c9dc:	bfb4      	ite	lt
   3c9de:	230e      	movlt	r3, #14
   3c9e0:	2308      	movge	r3, #8
   3c9e2:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   3c9e4:	4639      	mov	r1, r7
   3c9e6:	4410      	add	r0, r2
   3c9e8:	f00f f941 	bl	4bc6e <memset>
	sys_put_le32(val >> 32, &dst[4]);
   3c9ec:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	dst[0] = val;
   3c9f0:	463b      	mov	r3, r7
   3c9f2:	f362 0307 	bfi	r3, r2, #0, #8
	dst[1] = val >> 8;
   3c9f6:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
   3c9fa:	f361 230f 	bfi	r3, r1, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   3c9fe:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   3ca00:	f362 4317 	bfi	r3, r2, #16, #8
	dst[1] = val >> 8;
   3ca04:	0a12      	lsrs	r2, r2, #8
	dst[0] = val;
   3ca06:	f362 631f 	bfi	r3, r2, #24, #8
   3ca0a:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   3ca0e:	f8c8 2008 	str.w	r2, [r8, #8]
   3ca12:	f8c8 300c 	str.w	r3, [r8, #12]
	    conn->tx_head &&
   3ca16:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3ca1a:	2b00      	cmp	r3, #0
   3ca1c:	f000 8233 	beq.w	3ce86 <ull_conn_llcp+0xf82>
	    !conn->llcp_enc.pause_tx &&
   3ca20:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3ca24:	0797      	lsls	r7, r2, #30
   3ca26:	f100 8141 	bmi.w	3ccac <ull_conn_llcp+0xda8>
	    !conn->llcp_phy.pause_tx &&
   3ca2a:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3ca2e:	07d0      	lsls	r0, r2, #31
   3ca30:	f100 813c 	bmi.w	3ccac <ull_conn_llcp+0xda8>
		if (conn->tx_head == conn->tx_data) {
   3ca34:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3ca38:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3ca3c:	428b      	cmp	r3, r1
   3ca3e:	f000 829d 	beq.w	3cf7c <ull_conn_llcp+0x1078>
		} else if (!conn->tx_ctrl) {
   3ca42:	2a00      	cmp	r2, #0
   3ca44:	f000 83af 	beq.w	3d1a6 <ull_conn_llcp+0x12a2>
	tx->next = conn->tx_ctrl_last->next;
   3ca48:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3ca4c:	681a      	ldr	r2, [r3, #0]
   3ca4e:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   3ca52:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   3ca56:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   3ca5a:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3ca5e:	2b00      	cmp	r3, #0
   3ca60:	f000 821c 	beq.w	3ce9c <ull_conn_llcp+0xf98>
		conn->procedure_expire = conn->procedure_reload;
   3ca64:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3ca68:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3ca6c:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
		conn->procedure_expire = conn->procedure_reload;
   3ca70:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	break;
   3ca74:	f7ff ba51 	b.w	3bf1a <ull_conn_llcp+0x16>
   3ca78:	200058bc 	.word	0x200058bc
   3ca7c:	200059a0 	.word	0x200059a0
   3ca80:	ffff0000 	.word	0xffff0000
   3ca84:	20000c34 	.word	0x20000c34
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   3ca88:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   3ca8c:	463b      	mov	r3, r7
   3ca8e:	4642      	mov	r2, r8
   3ca90:	f504 7181 	add.w	r1, r4, #258	; 0x102
   3ca94:	f204 1081 	addw	r0, r4, #385	; 0x181
   3ca98:	f005 fff4 	bl	42a84 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
   3ca9c:	4639      	mov	r1, r7
   3ca9e:	2210      	movs	r2, #16
   3caa0:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   3caa4:	f00f f8d8 	bl	4bc58 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   3caa8:	2208      	movs	r2, #8
   3caaa:	f104 0194 	add.w	r1, r4, #148	; 0x94
   3caae:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   3cab2:	f00f f8d1 	bl	4bc58 <memcpy>
		lll->enc_rx = 1;
   3cab6:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
   3caba:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
		lll->enc_rx = 1;
   3cabe:	f023 0318 	bic.w	r3, r3, #24
   3cac2:	f043 0318 	orr.w	r3, r3, #24
   3cac6:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.direction = 0;
   3caca:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
		lll->ccm_rx.counter = 0;
   3cace:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
		lll->ccm_rx.direction = 0;
   3cad2:	f368 0300 	bfi	r3, r8, #0, #1
   3cad6:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1;
   3cada:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		lll->ccm_rx.counter = 0;
   3cade:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
		lll->ccm_tx.direction = 1;
   3cae2:	f043 0301 	orr.w	r3, r3, #1
   3cae6:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3caea:	2301      	movs	r3, #1
		lll->ccm_tx.counter = 0;
   3caec:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
		lll->ccm_rx.counter = 0;
   3caf0:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   3caf4:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   3caf8:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   3cafc:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   3cb00:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cb04:	f899 2004 	ldrb.w	r2, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3cb08:	f889 3005 	strb.w	r3, [r9, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   3cb0c:	2306      	movs	r3, #6
   3cb0e:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   3cb12:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cb16:	f042 0203 	orr.w	r2, r2, #3
   3cb1a:	f889 2004 	strb.w	r2, [r9, #4]
	if (
   3cb1e:	2b00      	cmp	r3, #0
   3cb20:	d043      	beq.n	3cbaa <ull_conn_llcp+0xca6>
	    !conn->llcp_enc.pause_tx &&
   3cb22:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3cb26:	0797      	lsls	r7, r2, #30
   3cb28:	d43f      	bmi.n	3cbaa <ull_conn_llcp+0xca6>
	    !conn->llcp_phy.pause_tx &&
   3cb2a:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3cb2e:	07d0      	lsls	r0, r2, #31
   3cb30:	d43b      	bmi.n	3cbaa <ull_conn_llcp+0xca6>
		if (conn->tx_head == conn->tx_data) {
   3cb32:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3cb36:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3cb38:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3cb3c:	f000 822e 	beq.w	3cf9c <ull_conn_llcp+0x1098>
		} else if (!conn->tx_ctrl) {
   3cb40:	2a00      	cmp	r2, #0
   3cb42:	f000 8339 	beq.w	3d1b8 <ull_conn_llcp+0x12b4>
	tx->next = conn->tx_ctrl_last->next;
   3cb46:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3cb4a:	681a      	ldr	r2, [r3, #0]
   3cb4c:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   3cb50:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   3cb54:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   3cb58:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3cb5c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	if (!tx->next) {
   3cb60:	2b00      	cmp	r3, #0
   3cb62:	f47f ad09 	bne.w	3c578 <ull_conn_llcp+0x674>
		conn->tx_data_last = tx;
   3cb66:	f8c4 91e4 	str.w	r9, [r4, #484]	; 0x1e4
   3cb6a:	e505      	b.n	3c578 <ull_conn_llcp+0x674>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3cb6c:	f894 71bd 	ldrb.w	r7, [r4, #445]	; 0x1bd
   3cb70:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
   3cb74:	429f      	cmp	r7, r3
   3cb76:	d045      	beq.n	3cc04 <ull_conn_llcp+0xd00>
			event_len_prep(conn);
   3cb78:	4620      	mov	r0, r4
   3cb7a:	f7fc ff09 	bl	39990 <event_len_prep>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3cb7e:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3cb82:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
   3cb86:	f7ff b9c8 	b.w	3bf1a <ull_conn_llcp+0x16>
			conn->tx_data = conn->tx_data->next;
   3cb8a:	6819      	ldr	r1, [r3, #0]
   3cb8c:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cb90:	2a00      	cmp	r2, #0
   3cb92:	f47f aaa5 	bne.w	3c0e0 <ull_conn_llcp+0x1dc>
			tx->next = conn->tx_head->next;
   3cb96:	681a      	ldr	r2, [r3, #0]
   3cb98:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   3cb9a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3cb9c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   3cb9e:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
	if (!tx->next) {
   3cba2:	2b00      	cmp	r3, #0
   3cba4:	f47f aaa7 	bne.w	3c0f6 <ull_conn_llcp+0x1f2>
   3cba8:	e40e      	b.n	3c3c8 <ull_conn_llcp+0x4c4>
		if (!conn->tx_ctrl) {
   3cbaa:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3cbae:	2a00      	cmp	r2, #0
   3cbb0:	d1c9      	bne.n	3cb46 <ull_conn_llcp+0xc42>
			tx->next = conn->tx_head;
   3cbb2:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   3cbb6:	e9c4 9975 	strd	r9, r9, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cbba:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
   3cbbe:	e7cd      	b.n	3cb5c <ull_conn_llcp+0xc58>
		if (!conn->tx_ctrl) {
   3cbc0:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3cbc4:	2a00      	cmp	r2, #0
   3cbc6:	f47f ad22 	bne.w	3c60e <ull_conn_llcp+0x70a>
			tx->next = conn->tx_head;
   3cbca:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
   3cbcc:	e9c4 6675 	strd	r6, r6, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cbd0:	f8c4 61dc 	str.w	r6, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3cbd4:	f7ff b9ac 	b.w	3bf30 <ull_conn_llcp+0x2c>
		if (!conn->tx_ctrl) {
   3cbd8:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3cbdc:	2a00      	cmp	r2, #0
   3cbde:	f47f ab3b 	bne.w	3c258 <ull_conn_llcp+0x354>
			tx->next = conn->tx_head;
   3cbe2:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   3cbe4:	e9c4 7775 	strd	r7, r7, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cbe8:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3cbec:	f7ff bb3f 	b.w	3c26e <ull_conn_llcp+0x36a>
		if (!conn->tx_ctrl) {
   3cbf0:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
   3cbf4:	2b00      	cmp	r3, #0
   3cbf6:	f47f acaf 	bne.w	3c558 <ull_conn_llcp+0x654>
			tx->next = conn->tx_head;
   3cbfa:	f8c9 2000 	str.w	r2, [r9]
				conn->tx_ctrl = tx;
   3cbfe:	e9c4 9975 	strd	r9, r9, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cc02:	e4b0      	b.n	3c566 <ull_conn_llcp+0x662>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   3cc04:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
   3cc08:	f894 71cd 	ldrb.w	r7, [r4, #461]	; 0x1cd
   3cc0c:	429f      	cmp	r7, r3
   3cc0e:	f43f a98c 	beq.w	3bf2a <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
   3cc12:	f894 71ce 	ldrb.w	r7, [r4, #462]	; 0x1ce
   3cc16:	f007 0803 	and.w	r8, r7, #3
   3cc1a:	f1b8 0f03 	cmp.w	r8, #3
   3cc1e:	f000 8233 	beq.w	3d088 <ull_conn_llcp+0x1184>
   3cc22:	f1b8 0f00 	cmp.w	r8, #0
   3cc26:	f47f a97f 	bne.w	3bf28 <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3cc2a:	48cb      	ldr	r0, [pc, #812]	; (3cf58 <ull_conn_llcp+0x1054>)
   3cc2c:	f7f7 f8fc 	bl	33e28 <mem_acquire>
		if (!tx) {
   3cc30:	4601      	mov	r1, r0
   3cc32:	2800      	cmp	r0, #0
   3cc34:	f43f ae58 	beq.w	3c8e8 <ull_conn_llcp+0x9e4>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   3cc38:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
		conn->lll.phy_flags = conn->llcp_phy.flags;
   3cc3c:	f894 71cf 	ldrb.w	r7, [r4, #463]	; 0x1cf
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   3cc40:	2001      	movs	r0, #1
   3cc42:	f360 0301 	bfi	r3, r0, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   3cc46:	f894 01d0 	ldrb.w	r0, [r4, #464]	; 0x1d0
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   3cc4a:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
		conn->phy_pref_tx = conn->llcp_phy.tx;
   3cc4e:	f3c3 0c82 	ubfx	ip, r3, #2, #3
   3cc52:	f36c 0002 	bfi	r0, ip, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   3cc56:	f894 c060 	ldrb.w	ip, [r4, #96]	; 0x60
   3cc5a:	f3c7 0740 	ubfx	r7, r7, #1, #1
   3cc5e:	f367 0cc3 	bfi	ip, r7, #3, #1
   3cc62:	f884 c060 	strb.w	ip, [r4, #96]	; 0x60
		conn->phy_pref_rx = conn->llcp_phy.rx;
   3cc66:	f3c3 1c42 	ubfx	ip, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cc6a:	790f      	ldrb	r7, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   3cc6c:	f36c 00c5 	bfi	r0, ip, #3, #3
   3cc70:	f884 01d0 	strb.w	r0, [r4, #464]	; 0x1d0
		conn->phy_pref_tx = conn->llcp_phy.tx;
   3cc74:	f3c3 0082 	ubfx	r0, r3, #2, #3
		pdu_ctrl_tx->len =
   3cc78:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cc7a:	f047 0703 	orr.w	r7, r7, #3
		pdu_ctrl_tx->len =
   3cc7e:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   3cc80:	2316      	movs	r3, #22
		pr->tx_phys = conn->llcp_phy.tx;
   3cc82:	7208      	strb	r0, [r1, #8]
	ctrl_tx_pause_enqueue(conn, tx, false);
   3cc84:	4642      	mov	r2, r8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cc86:	710f      	strb	r7, [r1, #4]
		pr->rx_phys = conn->llcp_phy.rx;
   3cc88:	f881 c009 	strb.w	ip, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   3cc8c:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
   3cc8e:	4620      	mov	r0, r4
   3cc90:	f7fc fb02 	bl	39298 <ctrl_tx_pause_enqueue>
   3cc94:	e6e6      	b.n	3ca64 <ull_conn_llcp+0xb60>
		if (!conn->tx_ctrl) {
   3cc96:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
   3cc9a:	2b00      	cmp	r3, #0
   3cc9c:	f47f acb7 	bne.w	3c60e <ull_conn_llcp+0x70a>
			tx->next = conn->tx_head;
   3cca0:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
   3cca2:	e9c4 6675 	strd	r6, r6, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cca6:	f8c4 61dc 	str.w	r6, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3ccaa:	e4bb      	b.n	3c624 <ull_conn_llcp+0x720>
		if (!conn->tx_ctrl) {
   3ccac:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3ccb0:	2a00      	cmp	r2, #0
   3ccb2:	f47f aec9 	bne.w	3ca48 <ull_conn_llcp+0xb44>
			tx->next = conn->tx_head;
   3ccb6:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   3ccba:	e9c4 8875 	strd	r8, r8, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3ccbe:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3ccc2:	e6cf      	b.n	3ca64 <ull_conn_llcp+0xb60>
		LL_ASSERT(0);
   3ccc4:	4aa5      	ldr	r2, [pc, #660]	; (3cf5c <ull_conn_llcp+0x1058>)
   3ccc6:	49a6      	ldr	r1, [pc, #664]	; (3cf60 <ull_conn_llcp+0x105c>)
   3ccc8:	f640 63a1 	movw	r3, #3745	; 0xea1
		LL_ASSERT(0);
   3cccc:	48a5      	ldr	r0, [pc, #660]	; (3cf64 <ull_conn_llcp+0x1060>)
   3ccce:	f00c fe94 	bl	499fa <printk>
   3ccd2:	4040      	eors	r0, r0
   3ccd4:	f380 8811 	msr	BASEPRI, r0
   3ccd8:	f04f 0003 	mov.w	r0, #3
   3ccdc:	df02      	svc	2
		break;
   3ccde:	e603      	b.n	3c8e8 <ull_conn_llcp+0x9e4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3cce0:	489d      	ldr	r0, [pc, #628]	; (3cf58 <ull_conn_llcp+0x1054>)
   3cce2:	f7f7 f8a1 	bl	33e28 <mem_acquire>
		if (tx) {
   3cce6:	2800      	cmp	r0, #0
   3cce8:	f43f adfe 	beq.w	3c8e8 <ull_conn_llcp+0x9e4>
			conn->llcp_version.ack--;
   3ccec:	f894 3149 	ldrb.w	r3, [r4, #329]	; 0x149
   3ccf0:	3b01      	subs	r3, #1
   3ccf2:	f884 3149 	strb.w	r3, [r4, #329]	; 0x149
			conn->llcp_version.tx = 1U;
   3ccf6:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   3ccfa:	f043 0301 	orr.w	r3, r3, #1
   3ccfe:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   3cd02:	7903      	ldrb	r3, [r0, #4]
   3cd04:	f043 0303 	orr.w	r3, r3, #3
   3cd08:	7103      	strb	r3, [r0, #4]
			pdu->len =
   3cd0a:	2306      	movs	r3, #6
   3cd0c:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   3cd0e:	f640 430c 	movw	r3, #3084	; 0xc0c
   3cd12:	f8a0 3007 	strh.w	r3, [r0, #7]
			pdu->llctrl.version_ind.company_id = cid;
   3cd16:	4b94      	ldr	r3, [pc, #592]	; (3cf68 <ull_conn_llcp+0x1064>)
   3cd18:	f8c0 3009 	str.w	r3, [r0, #9]
	    conn->tx_head &&
   3cd1c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3cd20:	2b00      	cmp	r3, #0
   3cd22:	f000 80c3 	beq.w	3ceac <ull_conn_llcp+0xfa8>
	    !conn->llcp_enc.pause_tx &&
   3cd26:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3cd2a:	0792      	lsls	r2, r2, #30
   3cd2c:	f100 80be 	bmi.w	3ceac <ull_conn_llcp+0xfa8>
	    !conn->llcp_phy.pause_tx &&
   3cd30:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3cd34:	07d7      	lsls	r7, r2, #31
   3cd36:	f100 80b9 	bmi.w	3ceac <ull_conn_llcp+0xfa8>
		if (conn->tx_head == conn->tx_data) {
   3cd3a:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3cd3e:	4293      	cmp	r3, r2
   3cd40:	f000 82a0 	beq.w	3d284 <ull_conn_llcp+0x1380>
		} else if (!conn->tx_ctrl) {
   3cd44:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3cd48:	2a00      	cmp	r2, #0
   3cd4a:	f000 82c2 	beq.w	3d2d2 <ull_conn_llcp+0x13ce>
	tx->next = conn->tx_ctrl_last->next;
   3cd4e:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3cd52:	681a      	ldr	r2, [r3, #0]
   3cd54:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3cd56:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3cd58:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   3cd5a:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3cd5e:	2b00      	cmp	r3, #0
   3cd60:	f47f ae80 	bne.w	3ca64 <ull_conn_llcp+0xb60>
		conn->tx_data_last = tx;
   3cd64:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
			conn->procedure_expire = conn->procedure_reload;
   3cd68:	e67c      	b.n	3ca64 <ull_conn_llcp+0xb60>
		if (!conn->tx_ctrl) {
   3cd6a:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3cd6e:	2a00      	cmp	r2, #0
   3cd70:	f47f a953 	bne.w	3c01a <ull_conn_llcp+0x116>
			tx->next = conn->tx_head;
   3cd74:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   3cd78:	e9c4 9975 	strd	r9, r9, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cd7c:	f7ff b954 	b.w	3c028 <ull_conn_llcp+0x124>
		if (!conn->tx_ctrl) {
   3cd80:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
   3cd84:	2b00      	cmp	r3, #0
   3cd86:	f47f aa67 	bne.w	3c258 <ull_conn_llcp+0x354>
			tx->next = conn->tx_head;
   3cd8a:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   3cd8c:	e9c4 7775 	strd	r7, r7, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cd90:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
		conn->tx_data_last = tx;
   3cd94:	f8c4 71e4 	str.w	r7, [r4, #484]	; 0x1e4
			if (err) {
   3cd98:	f7ff ba69 	b.w	3c26e <ull_conn_llcp+0x36a>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3cd9c:	7903      	ldrb	r3, [r0, #4]
   3cd9e:	f043 0303 	orr.w	r3, r3, #3
   3cda2:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   3cda4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3cda8:	07da      	lsls	r2, r3, #31
   3cdaa:	d57a      	bpl.n	3cea2 <ull_conn_llcp+0xf9e>
	    (conn->llcp_feature.features_conn &
   3cdac:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
	if (conn->common.fex_valid &&
   3cdb0:	075b      	lsls	r3, r3, #29
   3cdb2:	d576      	bpl.n	3cea2 <ull_conn_llcp+0xf9e>
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3cdb4:	2303      	movs	r3, #3
   3cdb6:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
   3cdb8:	f880 8009 	strb.w	r8, [r0, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   3cdbc:	2311      	movs	r3, #17
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   3cdbe:	f889 7005 	strb.w	r7, [r9, #5]
   3cdc2:	f889 3007 	strb.w	r3, [r9, #7]
	conn->llcp.encryption.error_code = 0U;
   3cdc6:	2300      	movs	r3, #0
   3cdc8:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
	    conn->tx_head &&
   3cdcc:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3cdd0:	2b00      	cmp	r3, #0
   3cdd2:	d041      	beq.n	3ce58 <ull_conn_llcp+0xf54>
	    !conn->llcp_enc.pause_tx &&
   3cdd4:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3cdd8:	0797      	lsls	r7, r2, #30
   3cdda:	d43d      	bmi.n	3ce58 <ull_conn_llcp+0xf54>
	    !conn->llcp_phy.pause_tx &&
   3cddc:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3cde0:	07d0      	lsls	r0, r2, #31
   3cde2:	d439      	bmi.n	3ce58 <ull_conn_llcp+0xf54>
		if (conn->tx_head == conn->tx_data) {
   3cde4:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3cde8:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3cdea:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3cdee:	f000 81cc 	beq.w	3d18a <ull_conn_llcp+0x1286>
		} else if (!conn->tx_ctrl) {
   3cdf2:	2a00      	cmp	r2, #0
   3cdf4:	f000 82bf 	beq.w	3d376 <ull_conn_llcp+0x1472>
	tx->next = conn->tx_ctrl_last->next;
   3cdf8:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3cdfc:	681a      	ldr	r2, [r3, #0]
   3cdfe:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   3ce02:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   3ce06:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   3ce0a:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3ce0e:	2b00      	cmp	r3, #0
   3ce10:	d067      	beq.n	3cee2 <ull_conn_llcp+0xfde>
			conn->llcp_ack = conn->llcp_req;
   3ce12:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3ce16:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3ce1a:	f7ff b912 	b.w	3c042 <ull_conn_llcp+0x13e>
	switch (conn->llcp_conn_param.state) {
   3ce1e:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3ce22:	f003 030f 	and.w	r3, r3, #15
   3ce26:	2b08      	cmp	r3, #8
   3ce28:	f200 82f0 	bhi.w	3d40c <ull_conn_llcp+0x1508>
   3ce2c:	a001      	add	r0, pc, #4	; (adr r0, 3ce34 <ull_conn_llcp+0xf30>)
   3ce2e:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   3ce32:	bf00      	nop
   3ce34:	0003c85b 	.word	0x0003c85b
   3ce38:	0003c8f5 	.word	0x0003c8f5
   3ce3c:	0003c81d 	.word	0x0003c81d
   3ce40:	0003bf2b 	.word	0x0003bf2b
   3ce44:	0003bf2b 	.word	0x0003bf2b
   3ce48:	0003bf2b 	.word	0x0003bf2b
   3ce4c:	0003bf2b 	.word	0x0003bf2b
   3ce50:	0003bf2b 	.word	0x0003bf2b
   3ce54:	0003c7b1 	.word	0x0003c7b1
		if (!conn->tx_ctrl) {
   3ce58:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3ce5c:	2a00      	cmp	r2, #0
   3ce5e:	d1cb      	bne.n	3cdf8 <ull_conn_llcp+0xef4>
			tx->next = conn->tx_head;
   3ce60:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   3ce64:	e9c4 9975 	strd	r9, r9, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3ce68:	e7cd      	b.n	3ce06 <ull_conn_llcp+0xf02>
			conn->tx_data = conn->tx_data->next;
   3ce6a:	6819      	ldr	r1, [r3, #0]
   3ce6c:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3ce70:	2a00      	cmp	r2, #0
   3ce72:	f47f a993 	bne.w	3c19c <ull_conn_llcp+0x298>
			tx->next = conn->tx_head->next;
   3ce76:	681a      	ldr	r2, [r3, #0]
   3ce78:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   3ce7a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3ce7c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   3ce7e:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
   3ce82:	f7ff b993 	b.w	3c1ac <ull_conn_llcp+0x2a8>
		if (!conn->tx_ctrl) {
   3ce86:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
   3ce8a:	2b00      	cmp	r3, #0
   3ce8c:	f47f addc 	bne.w	3ca48 <ull_conn_llcp+0xb44>
			tx->next = conn->tx_head;
   3ce90:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   3ce94:	e9c4 8875 	strd	r8, r8, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3ce98:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
		conn->tx_data_last = tx;
   3ce9c:	f8c4 81e4 	str.w	r8, [r4, #484]	; 0x1e4
		conn->procedure_expire = conn->procedure_reload;
   3cea0:	e5e0      	b.n	3ca64 <ull_conn_llcp+0xb60>
		p->error_code =	conn->llcp.encryption.error_code;
   3cea2:	f889 8008 	strb.w	r8, [r9, #8]
   3cea6:	2702      	movs	r7, #2
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   3cea8:	230d      	movs	r3, #13
   3ceaa:	e788      	b.n	3cdbe <ull_conn_llcp+0xeba>
		if (!conn->tx_ctrl) {
   3ceac:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3ceb0:	2a00      	cmp	r2, #0
   3ceb2:	f47f af4c 	bne.w	3cd4e <ull_conn_llcp+0xe4a>
			tx->next = conn->tx_head;
   3ceb6:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3ceb8:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cebc:	e74c      	b.n	3cd58 <ull_conn_llcp+0xe54>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3cebe:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
		conn->tx_data_last = tx;
   3cec2:	f8c4 91e4 	str.w	r9, [r4, #484]	; 0x1e4
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3cec6:	f043 0303 	orr.w	r3, r3, #3
   3ceca:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3cece:	f7ff b8b8 	b.w	3c042 <ull_conn_llcp+0x13e>
	    ((pdu_data_tx->llctrl.opcode !=
   3ced2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3ced4:	2a03      	cmp	r2, #3
   3ced6:	f43f ae5e 	beq.w	3cb96 <ull_conn_llcp+0xc92>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3ceda:	2a0a      	cmp	r2, #10
   3cedc:	f47f a8fa 	bne.w	3c0d4 <ull_conn_llcp+0x1d0>
   3cee0:	e659      	b.n	3cb96 <ull_conn_llcp+0xc92>
		conn->tx_data_last = tx;
   3cee2:	f8c4 91e4 	str.w	r9, [r4, #484]	; 0x1e4
   3cee6:	e794      	b.n	3ce12 <ull_conn_llcp+0xf0e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cee8:	791a      	ldrb	r2, [r3, #4]
   3ceea:	f002 0203 	and.w	r2, r2, #3
   3ceee:	2a03      	cmp	r2, #3
   3cef0:	f000 8121 	beq.w	3d136 <ull_conn_llcp+0x1232>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3cef4:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3cef8:	f7ff b950 	b.w	3c19c <ull_conn_llcp+0x298>
			conn->tx_data = conn->tx_data->next;
   3cefc:	6819      	ldr	r1, [r3, #0]
   3cefe:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cf02:	2a00      	cmp	r2, #0
   3cf04:	f47f aa9f 	bne.w	3c446 <ull_conn_llcp+0x542>
			tx->next = conn->tx_head->next;
   3cf08:	681a      	ldr	r2, [r3, #0]
   3cf0a:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   3cf0e:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   3cf12:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   3cf16:	e9c4 8876 	strd	r8, r8, [r4, #472]	; 0x1d8
   3cf1a:	f7ff ba9f 	b.w	3c45c <ull_conn_llcp+0x558>
			conn->tx_data = conn->tx_data->next;
   3cf1e:	6819      	ldr	r1, [r3, #0]
   3cf20:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cf24:	2a00      	cmp	r2, #0
   3cf26:	f47f ab72 	bne.w	3c60e <ull_conn_llcp+0x70a>
			tx->next = conn->tx_head->next;
   3cf2a:	681a      	ldr	r2, [r3, #0]
   3cf2c:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
   3cf2e:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
   3cf30:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
   3cf32:	e9c4 6676 	strd	r6, r6, [r4, #472]	; 0x1d8
   3cf36:	f7ff bb72 	b.w	3c61e <ull_conn_llcp+0x71a>
			conn->tx_data = conn->tx_data->next;
   3cf3a:	6819      	ldr	r1, [r3, #0]
   3cf3c:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cf40:	2a00      	cmp	r2, #0
   3cf42:	f47f a989 	bne.w	3c258 <ull_conn_llcp+0x354>
			tx->next = conn->tx_head->next;
   3cf46:	681a      	ldr	r2, [r3, #0]
   3cf48:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   3cf4a:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   3cf4c:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   3cf4e:	e9c4 7776 	strd	r7, r7, [r4, #472]	; 0x1d8
   3cf52:	f7ff b989 	b.w	3c268 <ull_conn_llcp+0x364>
   3cf56:	bf00      	nop
   3cf58:	200059a0 	.word	0x200059a0
   3cf5c:	00052f80 	.word	0x00052f80
   3cf60:	00052ad0 	.word	0x00052ad0
   3cf64:	00052a70 	.word	0x00052a70
   3cf68:	ffff05f1 	.word	0xffff05f1
		if (!conn->tx_ctrl) {
   3cf6c:	2900      	cmp	r1, #0
   3cf6e:	f47f ac44 	bne.w	3c7fa <ull_conn_llcp+0x8f6>
			tx->next = conn->tx_head;
   3cf72:	f84c 3c13 	str.w	r3, [ip, #-19]
				conn->tx_ctrl = tx;
   3cf76:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cf7a:	e444      	b.n	3c806 <ull_conn_llcp+0x902>
			conn->tx_data = conn->tx_data->next;
   3cf7c:	6819      	ldr	r1, [r3, #0]
   3cf7e:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cf82:	2a00      	cmp	r2, #0
   3cf84:	f47f ad60 	bne.w	3ca48 <ull_conn_llcp+0xb44>
			tx->next = conn->tx_head->next;
   3cf88:	681a      	ldr	r2, [r3, #0]
   3cf8a:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   3cf8e:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   3cf92:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   3cf96:	e9c4 8876 	strd	r8, r8, [r4, #472]	; 0x1d8
   3cf9a:	e560      	b.n	3ca5e <ull_conn_llcp+0xb5a>
			conn->tx_data = conn->tx_data->next;
   3cf9c:	6819      	ldr	r1, [r3, #0]
   3cf9e:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cfa2:	2a00      	cmp	r2, #0
   3cfa4:	f47f adcf 	bne.w	3cb46 <ull_conn_llcp+0xc42>
			tx->next = conn->tx_head->next;
   3cfa8:	681a      	ldr	r2, [r3, #0]
   3cfaa:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   3cfae:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   3cfb2:	f8d9 3000 	ldr.w	r3, [r9]
				conn->tx_ctrl_last = tx;
   3cfb6:	e9c4 9976 	strd	r9, r9, [r4, #472]	; 0x1d8
   3cfba:	e5cf      	b.n	3cb5c <ull_conn_llcp+0xc58>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3cfbc:	48bd      	ldr	r0, [pc, #756]	; (3d2b4 <ull_conn_llcp+0x13b0>)
   3cfbe:	f7f6 ff33 	bl	33e28 <mem_acquire>
		if (!tx) {
   3cfc2:	2800      	cmp	r0, #0
   3cfc4:	f43f ac90 	beq.w	3c8e8 <ull_conn_llcp+0x9e4>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3cfc8:	7902      	ldrb	r2, [r0, #4]
   3cfca:	f042 0203 	orr.w	r2, r2, #3
   3cfce:	7102      	strb	r2, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   3cfd0:	2203      	movs	r2, #3
   3cfd2:	7142      	strb	r2, [r0, #5]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   3cfd4:	f640 7211 	movw	r2, #3857	; 0xf11
   3cfd8:	f8a0 2007 	strh.w	r2, [r0, #7]
		rej->error_code = conn->llcp_conn_param.status;
   3cfdc:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
   3cfe0:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
   3cfe2:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
	if (
   3cfe6:	2a00      	cmp	r2, #0
   3cfe8:	f000 8143 	beq.w	3d272 <ull_conn_llcp+0x136e>
	    !conn->llcp_enc.pause_tx &&
   3cfec:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   3cff0:	0789      	lsls	r1, r1, #30
   3cff2:	f100 813e 	bmi.w	3d272 <ull_conn_llcp+0x136e>
	    !conn->llcp_phy.pause_tx &&
   3cff6:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3cffa:	07cb      	lsls	r3, r1, #31
   3cffc:	f100 8139 	bmi.w	3d272 <ull_conn_llcp+0x136e>
		if (conn->tx_head == conn->tx_data) {
   3d000:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3d004:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   3d006:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3d00a:	f000 81cf 	beq.w	3d3ac <ull_conn_llcp+0x14a8>
		} else if (!conn->tx_ctrl) {
   3d00e:	2900      	cmp	r1, #0
   3d010:	f000 81c4 	beq.w	3d39c <ull_conn_llcp+0x1498>
	tx->next = conn->tx_ctrl_last->next;
   3d014:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   3d018:	6811      	ldr	r1, [r2, #0]
   3d01a:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3d01c:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   3d01e:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   3d020:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3d024:	2a00      	cmp	r2, #0
   3d026:	f000 81b6 	beq.w	3d396 <ull_conn_llcp+0x1492>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3d02a:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
   3d02e:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
	conn_upd_curr = NULL;
   3d032:	2300      	movs	r3, #0
   3d034:	f8c8 3000 	str.w	r3, [r8]
   3d038:	e456      	b.n	3c8e8 <ull_conn_llcp+0x9e4>
			conn->tx_data = conn->tx_data->next;
   3d03a:	6811      	ldr	r1, [r2, #0]
   3d03c:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d040:	2b00      	cmp	r3, #0
   3d042:	f47f aa89 	bne.w	3c558 <ull_conn_llcp+0x654>
			tx->next = conn->tx_head->next;
   3d046:	6813      	ldr	r3, [r2, #0]
   3d048:	f8c9 3000 	str.w	r3, [r9]
			conn->tx_head->next = tx;
   3d04c:	f8c2 9000 	str.w	r9, [r2]
				conn->tx_ctrl = tx;
   3d050:	f8c4 91d8 	str.w	r9, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3d054:	f7ff ba87 	b.w	3c566 <ull_conn_llcp+0x662>
			conn->tx_data = conn->tx_data->next;
   3d058:	6819      	ldr	r1, [r3, #0]
   3d05a:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d05e:	2a00      	cmp	r2, #0
   3d060:	f47e afdb 	bne.w	3c01a <ull_conn_llcp+0x116>
			tx->next = conn->tx_head->next;
   3d064:	681a      	ldr	r2, [r3, #0]
   3d066:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   3d06a:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl = tx;
   3d06e:	f8c4 91d8 	str.w	r9, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3d072:	f7fe bfd9 	b.w	3c028 <ull_conn_llcp+0x124>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d076:	791a      	ldrb	r2, [r3, #4]
   3d078:	f002 0203 	and.w	r2, r2, #3
   3d07c:	2a03      	cmp	r2, #3
   3d07e:	d072      	beq.n	3d166 <ull_conn_llcp+0x1262>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d080:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d084:	f7ff b8e8 	b.w	3c258 <ull_conn_llcp+0x354>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3d088:	f884 31cd 	strb.w	r3, [r4, #461]	; 0x1cd
		if (conn->llcp_phy.tx & PHY_2M) {
   3d08c:	f3c7 0382 	ubfx	r3, r7, #2, #3
   3d090:	073f      	lsls	r7, r7, #28
   3d092:	d478      	bmi.n	3d186 <ull_conn_llcp+0x1282>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   3d094:	f013 0201 	ands.w	r2, r3, #1
   3d098:	d104      	bne.n	3d0a4 <ull_conn_llcp+0x11a0>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   3d09a:	2b03      	cmp	r3, #3
   3d09c:	bf94      	ite	ls
   3d09e:	2300      	movls	r3, #0
   3d0a0:	2301      	movhi	r3, #1
   3d0a2:	009a      	lsls	r2, r3, #2
			conn->llcp_phy.tx = PHY_2M;
   3d0a4:	f894 11ce 	ldrb.w	r1, [r4, #462]	; 0x1ce
   3d0a8:	f362 0184 	bfi	r1, r2, #2, #3
   3d0ac:	f884 11ce 	strb.w	r1, [r4, #462]	; 0x1ce
		if (conn->llcp_phy.rx & PHY_2M) {
   3d0b0:	f3c1 1342 	ubfx	r3, r1, #5, #3
   3d0b4:	0649      	lsls	r1, r1, #25
   3d0b6:	d464      	bmi.n	3d182 <ull_conn_llcp+0x127e>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   3d0b8:	f013 0101 	ands.w	r1, r3, #1
   3d0bc:	d104      	bne.n	3d0c8 <ull_conn_llcp+0x11c4>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   3d0be:	2b03      	cmp	r3, #3
   3d0c0:	bf94      	ite	ls
   3d0c2:	2300      	movls	r3, #0
   3d0c4:	2301      	movhi	r3, #1
   3d0c6:	0099      	lsls	r1, r3, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   3d0c8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			conn->llcp_phy.rx = PHY_2M;
   3d0cc:	f894 71ce 	ldrb.w	r7, [r4, #462]	; 0x1ce
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   3d0d0:	f003 0307 	and.w	r3, r3, #7
			conn->llcp.phy_upd_ind.tx = 0U;
   3d0d4:	4293      	cmp	r3, r2
   3d0d6:	bf08      	it	eq
   3d0d8:	2200      	moveq	r2, #0
		conn->llcp_ack -= 2U;
   3d0da:	3802      	subs	r0, #2
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3d0dc:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
		conn->llcp_ack -= 2U;
   3d0e0:	f884 00f1 	strb.w	r0, [r4, #241]	; 0xf1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   3d0e4:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3d0e8:	f3c3 0380 	ubfx	r3, r3, #2, #1
		conn->llcp.phy_upd_ind.initiate = 1U;
   3d0ec:	005b      	lsls	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   3d0ee:	f000 0007 	and.w	r0, r0, #7
			conn->llcp_phy.rx = PHY_2M;
   3d0f2:	f361 1747 	bfi	r7, r1, #5, #3
		conn->llcp.phy_upd_ind.initiate = 1U;
   3d0f6:	f043 0301 	orr.w	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   3d0fa:	4288      	cmp	r0, r1
   3d0fc:	bf08      	it	eq
   3d0fe:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   3d100:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   3d104:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
			conn->llcp_phy.rx = PHY_2M;
   3d108:	f884 71ce 	strb.w	r7, [r4, #462]	; 0x1ce
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3d10c:	f362 0184 	bfi	r1, r2, #2, #3
		conn->llcp.phy_upd_ind.initiate = 1U;
   3d110:	f001 011c 	and.w	r1, r1, #28
   3d114:	430b      	orrs	r3, r1
		conn->llcp_type = LLCP_PHY_UPD;
   3d116:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   3d118:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
		conn->llcp_type = LLCP_PHY_UPD;
   3d11c:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3d120:	f7fe bf1f 	b.w	3bf62 <ull_conn_llcp+0x5e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d124:	791a      	ldrb	r2, [r3, #4]
   3d126:	f002 0203 	and.w	r2, r2, #3
   3d12a:	2a03      	cmp	r2, #3
   3d12c:	d014      	beq.n	3d158 <ull_conn_llcp+0x1254>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d12e:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d132:	f7ff b988 	b.w	3c446 <ull_conn_llcp+0x542>
	    ((pdu_data_tx->llctrl.opcode !=
   3d136:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d138:	2a03      	cmp	r2, #3
   3d13a:	f43f ae9c 	beq.w	3ce76 <ull_conn_llcp+0xf72>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d13e:	2a0a      	cmp	r2, #10
   3d140:	f47f aed8 	bne.w	3cef4 <ull_conn_llcp+0xff0>
   3d144:	e697      	b.n	3ce76 <ull_conn_llcp+0xf72>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d146:	791a      	ldrb	r2, [r3, #4]
   3d148:	f002 0203 	and.w	r2, r2, #3
   3d14c:	2a03      	cmp	r2, #3
   3d14e:	d011      	beq.n	3d174 <ull_conn_llcp+0x1270>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d150:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d154:	f7ff ba5b 	b.w	3c60e <ull_conn_llcp+0x70a>
	    ((pdu_data_tx->llctrl.opcode !=
   3d158:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d15a:	2a03      	cmp	r2, #3
   3d15c:	f43f aed4 	beq.w	3cf08 <ull_conn_llcp+0x1004>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d160:	2a0a      	cmp	r2, #10
   3d162:	d1e4      	bne.n	3d12e <ull_conn_llcp+0x122a>
   3d164:	e6d0      	b.n	3cf08 <ull_conn_llcp+0x1004>
	    ((pdu_data_tx->llctrl.opcode !=
   3d166:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d168:	2a03      	cmp	r2, #3
   3d16a:	f43f aeec 	beq.w	3cf46 <ull_conn_llcp+0x1042>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d16e:	2a0a      	cmp	r2, #10
   3d170:	d186      	bne.n	3d080 <ull_conn_llcp+0x117c>
   3d172:	e6e8      	b.n	3cf46 <ull_conn_llcp+0x1042>
	    ((pdu_data_tx->llctrl.opcode !=
   3d174:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d176:	2a03      	cmp	r2, #3
   3d178:	f43f aed7 	beq.w	3cf2a <ull_conn_llcp+0x1026>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d17c:	2a0a      	cmp	r2, #10
   3d17e:	d1e7      	bne.n	3d150 <ull_conn_llcp+0x124c>
   3d180:	e6d3      	b.n	3cf2a <ull_conn_llcp+0x1026>
   3d182:	2102      	movs	r1, #2
   3d184:	e7a0      	b.n	3d0c8 <ull_conn_llcp+0x11c4>
   3d186:	2202      	movs	r2, #2
   3d188:	e78c      	b.n	3d0a4 <ull_conn_llcp+0x11a0>
			conn->tx_data = conn->tx_data->next;
   3d18a:	6819      	ldr	r1, [r3, #0]
   3d18c:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d190:	2a00      	cmp	r2, #0
   3d192:	f47f ae31 	bne.w	3cdf8 <ull_conn_llcp+0xef4>
			tx->next = conn->tx_head->next;
   3d196:	681a      	ldr	r2, [r3, #0]
   3d198:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   3d19c:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl = tx;
   3d1a0:	f8c4 91d8 	str.w	r9, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3d1a4:	e62f      	b.n	3ce06 <ull_conn_llcp+0xf02>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d1a6:	791a      	ldrb	r2, [r3, #4]
   3d1a8:	f002 0203 	and.w	r2, r2, #3
   3d1ac:	2a03      	cmp	r2, #3
   3d1ae:	f000 80ea 	beq.w	3d386 <ull_conn_llcp+0x1482>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d1b2:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d1b6:	e447      	b.n	3ca48 <ull_conn_llcp+0xb44>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d1b8:	791a      	ldrb	r2, [r3, #4]
   3d1ba:	f002 0203 	and.w	r2, r2, #3
   3d1be:	2a03      	cmp	r2, #3
   3d1c0:	f000 810d 	beq.w	3d3de <ull_conn_llcp+0x14da>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d1c4:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d1c8:	e4bd      	b.n	3cb46 <ull_conn_llcp+0xc42>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3d1ca:	483a      	ldr	r0, [pc, #232]	; (3d2b4 <ull_conn_llcp+0x13b0>)
   3d1cc:	f7f6 fe2c 	bl	33e28 <mem_acquire>
	if (!tx) {
   3d1d0:	4603      	mov	r3, r0
   3d1d2:	2800      	cmp	r0, #0
   3d1d4:	f43f ab88 	beq.w	3c8e8 <ull_conn_llcp+0x9e4>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3d1d8:	7902      	ldrb	r2, [r0, #4]
   3d1da:	f042 0203 	orr.w	r2, r2, #3
   3d1de:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   3d1e0:	2218      	movs	r2, #24
   3d1e2:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   3d1e4:	2210      	movs	r2, #16
   3d1e6:	71c2      	strb	r2, [r0, #7]
		sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   3d1e8:	e9d4 2166 	ldrd	r2, r1, [r4, #408]	; 0x198
	rsp->interval_min =
   3d1ec:	60c1      	str	r1, [r0, #12]
   3d1ee:	6082      	str	r2, [r0, #8]
	rsp->preferred_periodicity =
   3d1f0:	f894 21a0 	ldrb.w	r2, [r4, #416]	; 0x1a0
   3d1f4:	7402      	strb	r2, [r0, #16]
		sys_cpu_to_le16(conn->llcp_conn_param.reference_conn_event_count);
   3d1f6:	f8d4 11a2 	ldr.w	r1, [r4, #418]	; 0x1a2
   3d1fa:	f8d4 21a6 	ldr.w	r2, [r4, #422]	; 0x1a6
   3d1fe:	f8d4 01aa 	ldr.w	r0, [r4, #426]	; 0x1aa
	rsp->reference_conn_event_count =
   3d202:	f8c3 0019 	str.w	r0, [r3, #25]
   3d206:	f8c3 1011 	str.w	r1, [r3, #17]
   3d20a:	f8c3 2015 	str.w	r2, [r3, #21]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   3d20e:	f8b4 21ae 	ldrh.w	r2, [r4, #430]	; 0x1ae
   3d212:	f8a3 201d 	strh.w	r2, [r3, #29]
		if (!conn->tx_ctrl) {
   3d216:	e9d4 2175 	ldrd	r2, r1, [r4, #468]	; 0x1d4
	if (
   3d21a:	2a00      	cmp	r2, #0
   3d21c:	d07b      	beq.n	3d316 <ull_conn_llcp+0x1412>
	    !conn->llcp_enc.pause_tx &&
   3d21e:	f894 0176 	ldrb.w	r0, [r4, #374]	; 0x176
	    conn->tx_head &&
   3d222:	0787      	lsls	r7, r0, #30
   3d224:	d477      	bmi.n	3d316 <ull_conn_llcp+0x1412>
	    !conn->llcp_phy.pause_tx &&
   3d226:	f894 01cf 	ldrb.w	r0, [r4, #463]	; 0x1cf
   3d22a:	07c0      	lsls	r0, r0, #31
   3d22c:	d473      	bmi.n	3d316 <ull_conn_llcp+0x1412>
		if (conn->tx_head == conn->tx_data) {
   3d22e:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
   3d232:	4282      	cmp	r2, r0
   3d234:	d064      	beq.n	3d300 <ull_conn_llcp+0x13fc>
		} else if (!conn->tx_ctrl) {
   3d236:	2900      	cmp	r1, #0
   3d238:	d05a      	beq.n	3d2f0 <ull_conn_llcp+0x13ec>
	tx->next = conn->tx_ctrl_last->next;
   3d23a:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   3d23e:	6811      	ldr	r1, [r2, #0]
   3d240:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   3d242:	6013      	str	r3, [r2, #0]
	if (!tx->next) {
   3d244:	681a      	ldr	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   3d246:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3d24a:	2a00      	cmp	r2, #0
   3d24c:	d04d      	beq.n	3d2ea <ull_conn_llcp+0x13e6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   3d24e:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3d252:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   3d256:	2305      	movs	r3, #5
   3d258:	f363 0203 	bfi	r2, r3, #0, #4
   3d25c:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3d260:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3d264:	f7fe be59 	b.w	3bf1a <ull_conn_llcp+0x16>
		LL_ASSERT(!retval);
   3d268:	4a13      	ldr	r2, [pc, #76]	; (3d2b8 <ull_conn_llcp+0x13b4>)
   3d26a:	4914      	ldr	r1, [pc, #80]	; (3d2bc <ull_conn_llcp+0x13b8>)
   3d26c:	f640 63f6 	movw	r3, #3830	; 0xef6
   3d270:	e52c      	b.n	3cccc <ull_conn_llcp+0xdc8>
		if (!conn->tx_ctrl) {
   3d272:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3d276:	2900      	cmp	r1, #0
   3d278:	f47f aecc 	bne.w	3d014 <ull_conn_llcp+0x1110>
			tx->next = conn->tx_head;
   3d27c:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3d27e:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d282:	e6cc      	b.n	3d01e <ull_conn_llcp+0x111a>
			conn->tx_data = conn->tx_data->next;
   3d284:	6812      	ldr	r2, [r2, #0]
   3d286:	f8c4 21e0 	str.w	r2, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d28a:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3d28e:	2a00      	cmp	r2, #0
   3d290:	f47f ad5d 	bne.w	3cd4e <ull_conn_llcp+0xe4a>
			tx->next = conn->tx_head->next;
   3d294:	681a      	ldr	r2, [r3, #0]
   3d296:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   3d298:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   3d29a:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3d29e:	e55b      	b.n	3cd58 <ull_conn_llcp+0xe54>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d2a0:	791a      	ldrb	r2, [r3, #4]
   3d2a2:	f002 0203 	and.w	r2, r2, #3
   3d2a6:	2a03      	cmp	r2, #3
   3d2a8:	f000 80a1 	beq.w	3d3ee <ull_conn_llcp+0x14ea>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d2ac:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d2b0:	f7fe beb3 	b.w	3c01a <ull_conn_llcp+0x116>
   3d2b4:	200059a0 	.word	0x200059a0
   3d2b8:	00052f80 	.word	0x00052f80
   3d2bc:	00052d74 	.word	0x00052d74
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d2c0:	7913      	ldrb	r3, [r2, #4]
   3d2c2:	f003 0303 	and.w	r3, r3, #3
   3d2c6:	2b03      	cmp	r3, #3
   3d2c8:	d048      	beq.n	3d35c <ull_conn_llcp+0x1458>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d2ca:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   3d2ce:	f7ff b943 	b.w	3c558 <ull_conn_llcp+0x654>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d2d2:	791a      	ldrb	r2, [r3, #4]
   3d2d4:	f002 0203 	and.w	r2, r2, #3
   3d2d8:	2a03      	cmp	r2, #3
   3d2da:	d073      	beq.n	3d3c4 <ull_conn_llcp+0x14c0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d2dc:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d2e0:	e535      	b.n	3cd4e <ull_conn_llcp+0xe4a>
			conn->llcp_cu.interval = interval_max;
   3d2e2:	f8a4 211c 	strh.w	r2, [r4, #284]	; 0x11c
   3d2e6:	f7ff bb2c 	b.w	3c942 <ull_conn_llcp+0xa3e>
		conn->tx_data_last = tx;
   3d2ea:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
   3d2ee:	e7ae      	b.n	3d24e <ull_conn_llcp+0x134a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d2f0:	7911      	ldrb	r1, [r2, #4]
   3d2f2:	f001 0103 	and.w	r1, r1, #3
   3d2f6:	2903      	cmp	r1, #3
   3d2f8:	d013      	beq.n	3d322 <ull_conn_llcp+0x141e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d2fa:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   3d2fe:	e79c      	b.n	3d23a <ull_conn_llcp+0x1336>
			conn->tx_data = conn->tx_data->next;
   3d300:	6810      	ldr	r0, [r2, #0]
   3d302:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d306:	2900      	cmp	r1, #0
   3d308:	d197      	bne.n	3d23a <ull_conn_llcp+0x1336>
			tx->next = conn->tx_head->next;
   3d30a:	6811      	ldr	r1, [r2, #0]
   3d30c:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   3d30e:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   3d310:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3d314:	e796      	b.n	3d244 <ull_conn_llcp+0x1340>
		if (!conn->tx_ctrl) {
   3d316:	2900      	cmp	r1, #0
   3d318:	d18f      	bne.n	3d23a <ull_conn_llcp+0x1336>
			tx->next = conn->tx_head;
   3d31a:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   3d31c:	e9c4 3375 	strd	r3, r3, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d320:	e790      	b.n	3d244 <ull_conn_llcp+0x1340>
	    ((pdu_data_tx->llctrl.opcode !=
   3d322:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d324:	2903      	cmp	r1, #3
   3d326:	d0f0      	beq.n	3d30a <ull_conn_llcp+0x1406>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d328:	290a      	cmp	r1, #10
   3d32a:	d1e6      	bne.n	3d2fa <ull_conn_llcp+0x13f6>
   3d32c:	e7ed      	b.n	3d30a <ull_conn_llcp+0x1406>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d32e:	7919      	ldrb	r1, [r3, #4]
   3d330:	f001 0103 	and.w	r1, r1, #3
   3d334:	2903      	cmp	r1, #3
   3d336:	d018      	beq.n	3d36a <ull_conn_llcp+0x1466>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d338:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d33c:	f7ff ba5d 	b.w	3c7fa <ull_conn_llcp+0x8f6>
			conn->tx_data = conn->tx_data->next;
   3d340:	681f      	ldr	r7, [r3, #0]
   3d342:	f8c4 71e0 	str.w	r7, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d346:	2900      	cmp	r1, #0
   3d348:	f47f aa57 	bne.w	3c7fa <ull_conn_llcp+0x8f6>
			tx->next = conn->tx_head->next;
   3d34c:	6819      	ldr	r1, [r3, #0]
   3d34e:	f84c 1c13 	str.w	r1, [ip, #-19]
			conn->tx_head->next = tx;
   3d352:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   3d354:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3d358:	f7ff ba55 	b.w	3c806 <ull_conn_llcp+0x902>
	    ((pdu_data_tx->llctrl.opcode !=
   3d35c:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d35e:	2b03      	cmp	r3, #3
   3d360:	f43f ae71 	beq.w	3d046 <ull_conn_llcp+0x1142>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d364:	2b0a      	cmp	r3, #10
   3d366:	d1b0      	bne.n	3d2ca <ull_conn_llcp+0x13c6>
   3d368:	e66d      	b.n	3d046 <ull_conn_llcp+0x1142>
	    ((pdu_data_tx->llctrl.opcode !=
   3d36a:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d36c:	2903      	cmp	r1, #3
   3d36e:	d0ed      	beq.n	3d34c <ull_conn_llcp+0x1448>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d370:	290a      	cmp	r1, #10
   3d372:	d1e1      	bne.n	3d338 <ull_conn_llcp+0x1434>
   3d374:	e7ea      	b.n	3d34c <ull_conn_llcp+0x1448>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d376:	791a      	ldrb	r2, [r3, #4]
   3d378:	f002 0203 	and.w	r2, r2, #3
   3d37c:	2a03      	cmp	r2, #3
   3d37e:	d03e      	beq.n	3d3fe <ull_conn_llcp+0x14fa>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d380:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d384:	e538      	b.n	3cdf8 <ull_conn_llcp+0xef4>
	    ((pdu_data_tx->llctrl.opcode !=
   3d386:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d388:	2a03      	cmp	r2, #3
   3d38a:	f43f adfd 	beq.w	3cf88 <ull_conn_llcp+0x1084>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d38e:	2a0a      	cmp	r2, #10
   3d390:	f47f af0f 	bne.w	3d1b2 <ull_conn_llcp+0x12ae>
   3d394:	e5f8      	b.n	3cf88 <ull_conn_llcp+0x1084>
		conn->tx_data_last = tx;
   3d396:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   3d39a:	e646      	b.n	3d02a <ull_conn_llcp+0x1126>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d39c:	7911      	ldrb	r1, [r2, #4]
   3d39e:	f001 0103 	and.w	r1, r1, #3
   3d3a2:	2903      	cmp	r1, #3
   3d3a4:	d015      	beq.n	3d3d2 <ull_conn_llcp+0x14ce>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d3a6:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   3d3aa:	e633      	b.n	3d014 <ull_conn_llcp+0x1110>
			conn->tx_data = conn->tx_data->next;
   3d3ac:	6813      	ldr	r3, [r2, #0]
   3d3ae:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d3b2:	2900      	cmp	r1, #0
   3d3b4:	f47f ae2e 	bne.w	3d014 <ull_conn_llcp+0x1110>
			tx->next = conn->tx_head->next;
   3d3b8:	6811      	ldr	r1, [r2, #0]
   3d3ba:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   3d3bc:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   3d3be:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3d3c2:	e62c      	b.n	3d01e <ull_conn_llcp+0x111a>
	    ((pdu_data_tx->llctrl.opcode !=
   3d3c4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d3c6:	2a03      	cmp	r2, #3
   3d3c8:	f43f af64 	beq.w	3d294 <ull_conn_llcp+0x1390>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d3cc:	2a0a      	cmp	r2, #10
   3d3ce:	d185      	bne.n	3d2dc <ull_conn_llcp+0x13d8>
   3d3d0:	e760      	b.n	3d294 <ull_conn_llcp+0x1390>
	    ((pdu_data_tx->llctrl.opcode !=
   3d3d2:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d3d4:	2903      	cmp	r1, #3
   3d3d6:	d0ef      	beq.n	3d3b8 <ull_conn_llcp+0x14b4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d3d8:	290a      	cmp	r1, #10
   3d3da:	d1e4      	bne.n	3d3a6 <ull_conn_llcp+0x14a2>
   3d3dc:	e7ec      	b.n	3d3b8 <ull_conn_llcp+0x14b4>
	    ((pdu_data_tx->llctrl.opcode !=
   3d3de:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d3e0:	2a03      	cmp	r2, #3
   3d3e2:	f43f ade1 	beq.w	3cfa8 <ull_conn_llcp+0x10a4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d3e6:	2a0a      	cmp	r2, #10
   3d3e8:	f47f aeec 	bne.w	3d1c4 <ull_conn_llcp+0x12c0>
   3d3ec:	e5dc      	b.n	3cfa8 <ull_conn_llcp+0x10a4>
	    ((pdu_data_tx->llctrl.opcode !=
   3d3ee:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d3f0:	2a03      	cmp	r2, #3
   3d3f2:	f43f ae37 	beq.w	3d064 <ull_conn_llcp+0x1160>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d3f6:	2a0a      	cmp	r2, #10
   3d3f8:	f47f af58 	bne.w	3d2ac <ull_conn_llcp+0x13a8>
   3d3fc:	e632      	b.n	3d064 <ull_conn_llcp+0x1160>
	    ((pdu_data_tx->llctrl.opcode !=
   3d3fe:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d400:	2a03      	cmp	r2, #3
   3d402:	f43f aec8 	beq.w	3d196 <ull_conn_llcp+0x1292>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d406:	2a0a      	cmp	r2, #10
   3d408:	d1ba      	bne.n	3d380 <ull_conn_llcp+0x147c>
   3d40a:	e6c4      	b.n	3d196 <ull_conn_llcp+0x1292>
		LL_ASSERT(0);
   3d40c:	4a02      	ldr	r2, [pc, #8]	; (3d418 <ull_conn_llcp+0x1514>)
   3d40e:	4903      	ldr	r1, [pc, #12]	; (3d41c <ull_conn_llcp+0x1518>)
   3d410:	f640 73e1 	movw	r3, #4065	; 0xfe1
   3d414:	e45a      	b.n	3cccc <ull_conn_llcp+0xdc8>
   3d416:	bf00      	nop
   3d418:	00052f80 	.word	0x00052f80
   3d41c:	00052ad0 	.word	0x00052ad0

0003d420 <ull_conn_tx_demux>:
{
   3d420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   3d424:	4c26      	ldr	r4, [pc, #152]	; (3d4c0 <ull_conn_tx_demux+0xa0>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3d426:	4f27      	ldr	r7, [pc, #156]	; (3d4c4 <ull_conn_tx_demux+0xa4>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   3d428:	78e2      	ldrb	r2, [r4, #3]
{
   3d42a:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   3d42c:	1d26      	adds	r6, r4, #4
   3d42e:	e024      	b.n	3d47a <ull_conn_tx_demux+0x5a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3d430:	4642      	mov	r2, r8
   3d432:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3d436:	4638      	mov	r0, r7
   3d438:	f7f6 fd28 	bl	33e8c <mem_get>
	if (conn->lll.handle != handle) {
   3d43c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3d43e:	4543      	cmp	r3, r8
   3d440:	d128      	bne.n	3d494 <ull_conn_tx_demux+0x74>
			struct node_tx *tx = lll_tx->node;
   3d442:	f8d9 3004 	ldr.w	r3, [r9, #4]
			if (!conn->tx_data) {
   3d446:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
			tx->next = NULL;
   3d44a:	2100      	movs	r1, #0
   3d44c:	6019      	str	r1, [r3, #0]
			if (!conn->tx_data) {
   3d44e:	b362      	cbz	r2, 3d4aa <ull_conn_tx_demux+0x8a>
			if (conn->tx_data_last) {
   3d450:	f8d0 21e4 	ldr.w	r2, [r0, #484]	; 0x1e4
   3d454:	b102      	cbz	r2, 3d458 <ull_conn_tx_demux+0x38>
				conn->tx_data_last->next = tx;
   3d456:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   3d458:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
		MFIFO_DEQUEUE(conn_tx);
   3d45c:	78e2      	ldrb	r2, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   3d45e:	78a3      	ldrb	r3, [r4, #2]
   3d460:	7861      	ldrb	r1, [r4, #1]
	if (_first == last) {
   3d462:	429a      	cmp	r2, r3
   3d464:	d005      	beq.n	3d472 <ull_conn_tx_demux+0x52>
	_first += 1U;
   3d466:	3301      	adds	r3, #1
   3d468:	b2db      	uxtb	r3, r3
		_first = 0U;
   3d46a:	4299      	cmp	r1, r3
   3d46c:	bf08      	it	eq
   3d46e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   3d470:	70a3      	strb	r3, [r4, #2]
	} while (--count);
   3d472:	3d01      	subs	r5, #1
   3d474:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   3d478:	d020      	beq.n	3d4bc <ull_conn_tx_demux+0x9c>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   3d47a:	78a3      	ldrb	r3, [r4, #2]
   3d47c:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
   3d47e:	4293      	cmp	r3, r2
   3d480:	d01c      	beq.n	3d4bc <ull_conn_tx_demux+0x9c>
	return (void *)(fifo + first * size);
   3d482:	fb13 f301 	smulbb	r3, r3, r1
   3d486:	eb03 0906 	add.w	r9, r3, r6
		conn = ll_connected_get(lll_tx->handle);
   3d48a:	f836 8003 	ldrh.w	r8, [r6, r3]
	if (handle >= CONFIG_BT_MAX_CONN) {
   3d48e:	f1b8 0f05 	cmp.w	r8, #5
   3d492:	d9cd      	bls.n	3d430 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   3d494:	f8d9 1004 	ldr.w	r1, [r9, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   3d498:	790b      	ldrb	r3, [r1, #4]
   3d49a:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   3d49e:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   3d4a2:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   3d4a4:	f7fa fb80 	bl	37ba8 <ll_tx_ack_put>
   3d4a8:	e7d8      	b.n	3d45c <ull_conn_tx_demux+0x3c>
				if (!conn->tx_head) {
   3d4aa:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
				conn->tx_data = tx;
   3d4ae:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
				if (!conn->tx_head) {
   3d4b2:	2a00      	cmp	r2, #0
   3d4b4:	d1cc      	bne.n	3d450 <ull_conn_tx_demux+0x30>
					conn->tx_head = tx;
   3d4b6:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
			if (conn->tx_data_last) {
   3d4ba:	e7cd      	b.n	3d458 <ull_conn_tx_demux+0x38>
}
   3d4bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3d4c0:	20000d38 	.word	0x20000d38
   3d4c4:	20003360 	.word	0x20003360

0003d4c8 <conn_cleanup>:
	if (conn == conn_upd_curr) {
   3d4c8:	4b39      	ldr	r3, [pc, #228]	; (3d5b0 <conn_cleanup+0xe8>)
{
   3d4ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn == conn_upd_curr) {
   3d4ce:	681a      	ldr	r2, [r3, #0]
	rx = conn->llcp_rx;
   3d4d0:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	*((uint8_t *)rx->pdu) = reason;
   3d4d4:	f880 1170 	strb.w	r1, [r0, #368]	; 0x170
	if (conn == conn_upd_curr) {
   3d4d8:	4290      	cmp	r0, r2
		conn_upd_curr = NULL;
   3d4da:	bf04      	itt	eq
   3d4dc:	2200      	moveq	r2, #0
   3d4de:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   3d4e0:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   3d4e2:	f8a0 215a 	strh.w	r2, [r0, #346]	; 0x15a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3d4e6:	2317      	movs	r3, #23
{
   3d4e8:	b082      	sub	sp, #8
   3d4ea:	4606      	mov	r6, r0
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3d4ec:	f880 3158 	strb.w	r3, [r0, #344]	; 0x158
	while (rx) {
   3d4f0:	b144      	cbz	r4, 3d504 <conn_cleanup+0x3c>
		hdr->type = NODE_RX_TYPE_RELEASE;
   3d4f2:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   3d4f4:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   3d4f6:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   3d4f8:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   3d4fa:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   3d4fc:	f7fa fb0e 	bl	37b1c <ll_rx_put>
	while (rx) {
   3d500:	2c00      	cmp	r4, #0
   3d502:	d1f7      	bne.n	3d4f4 <conn_cleanup+0x2c>
	while (conn->tx_head) {
   3d504:	f8d6 11d4 	ldr.w	r1, [r6, #468]	; 0x1d4
   3d508:	b381      	cbz	r1, 3d56c <conn_cleanup+0xa4>
		link = mem_acquire(&mem_link_tx.free);
   3d50a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 3d5b4 <conn_cleanup+0xec>
		LL_ASSERT(link);
   3d50e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 3d5b8 <conn_cleanup+0xf0>
   3d512:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 3d5bc <conn_cleanup+0xf4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   3d516:	f106 0768 	add.w	r7, r6, #104	; 0x68
   3d51a:	e007      	b.n	3d52c <conn_cleanup+0x64>
   3d51c:	4629      	mov	r1, r5
   3d51e:	463a      	mov	r2, r7
   3d520:	4620      	mov	r0, r4
   3d522:	f7f6 fce5 	bl	33ef0 <memq_enqueue>
	while (conn->tx_head) {
   3d526:	f8d6 11d4 	ldr.w	r1, [r6, #468]	; 0x1d4
   3d52a:	b1f9      	cbz	r1, 3d56c <conn_cleanup+0xa4>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   3d52c:	4630      	mov	r0, r6
   3d52e:	f7fc f8fd 	bl	3972c <tx_ull_dequeue>
   3d532:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   3d534:	4640      	mov	r0, r8
   3d536:	f7f6 fc77 	bl	33e28 <mem_acquire>
		LL_ASSERT(link);
   3d53a:	4604      	mov	r4, r0
   3d53c:	2800      	cmp	r0, #0
   3d53e:	d1ed      	bne.n	3d51c <conn_cleanup+0x54>
   3d540:	481f      	ldr	r0, [pc, #124]	; (3d5c0 <conn_cleanup+0xf8>)
   3d542:	f640 135e 	movw	r3, #2398	; 0x95e
   3d546:	4652      	mov	r2, sl
   3d548:	4649      	mov	r1, r9
   3d54a:	f00c fa56 	bl	499fa <printk>
   3d54e:	4040      	eors	r0, r0
   3d550:	f380 8811 	msr	BASEPRI, r0
   3d554:	f04f 0003 	mov.w	r0, #3
   3d558:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   3d55a:	4629      	mov	r1, r5
   3d55c:	463a      	mov	r2, r7
   3d55e:	4620      	mov	r0, r4
   3d560:	f7f6 fcc6 	bl	33ef0 <memq_enqueue>
	while (conn->tx_head) {
   3d564:	f8d6 11d4 	ldr.w	r1, [r6, #468]	; 0x1d4
   3d568:	2900      	cmp	r1, #0
   3d56a:	d1df      	bne.n	3d52c <conn_cleanup+0x64>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3d56c:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   3d56e:	4b15      	ldr	r3, [pc, #84]	; (3d5c4 <conn_cleanup+0xfc>)
   3d570:	9600      	str	r6, [sp, #0]
   3d572:	3205      	adds	r2, #5
   3d574:	b2d2      	uxtb	r2, r2
   3d576:	2101      	movs	r1, #1
   3d578:	2000      	movs	r0, #0
   3d57a:	f7f8 f801 	bl	35580 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   3d57e:	f030 0302 	bics.w	r3, r0, #2
   3d582:	d00c      	beq.n	3d59e <conn_cleanup+0xd6>
   3d584:	4a0c      	ldr	r2, [pc, #48]	; (3d5b8 <conn_cleanup+0xf0>)
   3d586:	4910      	ldr	r1, [pc, #64]	; (3d5c8 <conn_cleanup+0x100>)
   3d588:	480d      	ldr	r0, [pc, #52]	; (3d5c0 <conn_cleanup+0xf8>)
   3d58a:	f640 1323 	movw	r3, #2339	; 0x923
   3d58e:	f00c fa34 	bl	499fa <printk>
   3d592:	4040      	eors	r0, r0
   3d594:	f380 8811 	msr	BASEPRI, r0
   3d598:	f04f 0003 	mov.w	r0, #3
   3d59c:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   3d59e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   3d5a2:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   3d5a4:	8533      	strh	r3, [r6, #40]	; 0x28
}
   3d5a6:	b002      	add	sp, #8
   3d5a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   3d5ac:	f7ff bf38 	b.w	3d420 <ull_conn_tx_demux>
   3d5b0:	200058bc 	.word	0x200058bc
   3d5b4:	200058c4 	.word	0x200058c4
   3d5b8:	00052f80 	.word	0x00052f80
   3d5bc:	00052fd8 	.word	0x00052fd8
   3d5c0:	00052a70 	.word	0x00052a70
   3d5c4:	00039501 	.word	0x00039501
   3d5c8:	00053060 	.word	0x00053060

0003d5cc <ull_conn_done>:
{
   3d5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   3d5ce:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   3d5d0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   3d5d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3d5d6:	429a      	cmp	r2, r3
{
   3d5d8:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   3d5da:	d069      	beq.n	3d6b0 <ull_conn_done+0xe4>
	switch (done->extra.mic_state) {
   3d5dc:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   3d5e0:	2b01      	cmp	r3, #1
   3d5e2:	4605      	mov	r5, r0
   3d5e4:	f000 8101 	beq.w	3d7ea <ull_conn_done+0x21e>
   3d5e8:	2b02      	cmp	r3, #2
   3d5ea:	d063      	beq.n	3d6b4 <ull_conn_done+0xe8>
   3d5ec:	2b00      	cmp	r3, #0
   3d5ee:	f000 80e2 	beq.w	3d7b6 <ull_conn_done+0x1ea>
	reason_final = conn->llcp_terminate.reason_final;
   3d5f2:	f894 1153 	ldrb.w	r1, [r4, #339]	; 0x153
	if (reason_final && (
   3d5f6:	2900      	cmp	r1, #0
   3d5f8:	d15f      	bne.n	3d6ba <ull_conn_done+0xee>
	latency_event = lll->latency_event;
   3d5fa:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   3d5fc:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	ticks_drift_plus = 0U;
   3d5fe:	9109      	str	r1, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   3d600:	1c7e      	adds	r6, r7, #1
   3d602:	b2b6      	uxth	r6, r6
	ticks_drift_minus = 0U;
   3d604:	9108      	str	r1, [sp, #32]
	if (done->extra.trx_cnt) {
   3d606:	2b00      	cmp	r3, #0
   3d608:	d07c      	beq.n	3d704 <ull_conn_done+0x138>
		} else if (lll->role) {
   3d60a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3d60e:	2b00      	cmp	r3, #0
   3d610:	f2c0 8116 	blt.w	3d840 <ull_conn_done+0x274>
	if (done->extra.crc_valid) {
   3d614:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   3d618:	2200      	movs	r2, #0
   3d61a:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   3d61e:	07da      	lsls	r2, r3, #31
   3d620:	f140 80e9 	bpl.w	3d7f6 <ull_conn_done+0x22a>
		conn->supervision_expire = 0U;
   3d624:	2500      	movs	r5, #0
   3d626:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   3d62a:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   3d62e:	b12b      	cbz	r3, 3d63c <ull_conn_done+0x70>
		if (conn->procedure_expire > elapsed_event) {
   3d630:	42b3      	cmp	r3, r6
   3d632:	f240 8130 	bls.w	3d896 <ull_conn_done+0x2ca>
			conn->procedure_expire -= elapsed_event;
   3d636:	1b9b      	subs	r3, r3, r6
   3d638:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   3d63c:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   3d640:	b12b      	cbz	r3, 3d64e <ull_conn_done+0x82>
		if (conn->apto_expire > elapsed_event) {
   3d642:	42b3      	cmp	r3, r6
   3d644:	f240 8107 	bls.w	3d856 <ull_conn_done+0x28a>
			conn->apto_expire -= elapsed_event;
   3d648:	1b9b      	subs	r3, r3, r6
   3d64a:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   3d64e:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3d652:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3d656:	f894 10f1 	ldrb.w	r1, [r4, #241]	; 0xf1
	if (conn->appto_expire != 0U) {
   3d65a:	b15a      	cbz	r2, 3d674 <ull_conn_done+0xa8>
		if (conn->appto_expire > elapsed_event) {
   3d65c:	42b2      	cmp	r2, r6
   3d65e:	f200 80d3 	bhi.w	3d808 <ull_conn_done+0x23c>
			if ((conn->procedure_expire == 0U) &&
   3d662:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   3d666:	2000      	movs	r0, #0
   3d668:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   3d66c:	b912      	cbnz	r2, 3d674 <ull_conn_done+0xa8>
   3d66e:	428b      	cmp	r3, r1
   3d670:	f000 811a 	beq.w	3d8a8 <ull_conn_done+0x2dc>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3d674:	1a5b      	subs	r3, r3, r1
   3d676:	f003 0303 	and.w	r3, r3, #3
   3d67a:	2b02      	cmp	r3, #2
   3d67c:	f000 80cd 	beq.w	3d81a <ull_conn_done+0x24e>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   3d680:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   3d684:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   3d688:	429a      	cmp	r2, r3
   3d68a:	f000 80f7 	beq.w	3d87c <ull_conn_done+0x2b0>
		lll->latency_event = 0U;
   3d68e:	2200      	movs	r2, #0
   3d690:	8622      	strh	r2, [r4, #48]	; 0x30
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3d692:	e9dd 6308 	ldrd	r6, r3, [sp, #32]
	if ((force) || (latency_event != lll->latency_event)) {
   3d696:	2d00      	cmp	r5, #0
   3d698:	d166      	bne.n	3d768 <ull_conn_done+0x19c>
   3d69a:	42ba      	cmp	r2, r7
   3d69c:	f000 80ca 	beq.w	3d834 <ull_conn_done+0x268>
		lazy = lll->latency_event + 1U;
   3d6a0:	3201      	adds	r2, #1
   3d6a2:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3d6a4:	2b00      	cmp	r3, #0
   3d6a6:	d161      	bne.n	3d76c <ull_conn_done+0x1a0>
   3d6a8:	2e00      	cmp	r6, #0
   3d6aa:	d15f      	bne.n	3d76c <ull_conn_done+0x1a0>
   3d6ac:	2900      	cmp	r1, #0
   3d6ae:	d15d      	bne.n	3d76c <ull_conn_done+0x1a0>
}
   3d6b0:	b00b      	add	sp, #44	; 0x2c
   3d6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_terminate.reason_final =
   3d6b4:	213d      	movs	r1, #61	; 0x3d
   3d6b6:	f884 1153 	strb.w	r1, [r4, #339]	; 0x153
	if (reason_final && (
   3d6ba:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3d6be:	2b00      	cmp	r3, #0
   3d6c0:	db1a      	blt.n	3d6f8 <ull_conn_done+0x12c>
			       conn->llcp_terminate.ack) & 0xFF) ==
   3d6c2:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
   3d6c6:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
   3d6ca:	1a9b      	subs	r3, r3, r2
			    lll->role ||
   3d6cc:	b2db      	uxtb	r3, r3
   3d6ce:	2b03      	cmp	r3, #3
   3d6d0:	d012      	beq.n	3d6f8 <ull_conn_done+0x12c>
			     TERM_ACKED) ||
   3d6d2:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3d6d6:	f013 0204 	ands.w	r2, r3, #4
   3d6da:	d10d      	bne.n	3d6f8 <ull_conn_done+0x12c>
			    conn->central.terminate_ack ||
   3d6dc:	293d      	cmp	r1, #61	; 0x3d
   3d6de:	d00b      	beq.n	3d6f8 <ull_conn_done+0x12c>
	latency_event = lll->latency_event;
   3d6e0:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	ticks_drift_minus = 0U;
   3d6e2:	e9cd 2208 	strd	r2, r2, [sp, #32]
	if (done->extra.trx_cnt) {
   3d6e6:	8caa      	ldrh	r2, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
   3d6e8:	1c7e      	adds	r6, r7, #1
   3d6ea:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   3d6ec:	b152      	cbz	r2, 3d704 <ull_conn_done+0x138>
			conn->central.terminate_ack = 1;
   3d6ee:	f043 0304 	orr.w	r3, r3, #4
   3d6f2:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
   3d6f6:	e78d      	b.n	3d614 <ull_conn_done+0x48>
		conn_cleanup(conn, reason_final);
   3d6f8:	4620      	mov	r0, r4
}
   3d6fa:	b00b      	add	sp, #44	; 0x2c
   3d6fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		conn_cleanup(conn, reason_final);
   3d700:	f7ff bee2 	b.w	3d4c8 <conn_cleanup>
	if (done->extra.crc_valid) {
   3d704:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   3d708:	07db      	lsls	r3, r3, #31
   3d70a:	d48b      	bmi.n	3d624 <ull_conn_done+0x58>
	else if (conn->connect_expire) {
   3d70c:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
   3d710:	2a00      	cmp	r2, #0
   3d712:	d070      	beq.n	3d7f6 <ull_conn_done+0x22a>
		if (conn->connect_expire > elapsed_event) {
   3d714:	42b2      	cmp	r2, r6
   3d716:	f240 80ce 	bls.w	3d8b6 <ull_conn_done+0x2ea>
			conn->connect_expire -= elapsed_event;
   3d71a:	1b92      	subs	r2, r2, r6
	if (conn->supervision_expire) {
   3d71c:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
			conn->connect_expire -= elapsed_event;
   3d720:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
   3d724:	2b00      	cmp	r3, #0
   3d726:	f000 80e0 	beq.w	3d8ea <ull_conn_done+0x31e>
		if (conn->supervision_expire > elapsed_event) {
   3d72a:	429e      	cmp	r6, r3
   3d72c:	f080 80ae 	bcs.w	3d88c <ull_conn_done+0x2c0>
			conn->supervision_expire -= elapsed_event;
   3d730:	1b9b      	subs	r3, r3, r6
   3d732:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   3d734:	2500      	movs	r5, #0
			if (conn->supervision_expire <= 6U) {
   3d736:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   3d738:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   3d73c:	8625      	strh	r5, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   3d73e:	f240 809b 	bls.w	3d878 <ull_conn_done+0x2ac>
			else if (lll->role) {
   3d742:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3d746:	42ab      	cmp	r3, r5
   3d748:	f6bf af6f 	bge.w	3d62a <ull_conn_done+0x5e>
				if (latency_event) {
   3d74c:	2f00      	cmp	r7, #0
   3d74e:	f040 8093 	bne.w	3d878 <ull_conn_done+0x2ac>
					force = conn->periph.force & 0x01;
   3d752:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
					conn->periph.force >>= 1U;
   3d756:	086b      	lsrs	r3, r5, #1
					if (force) {
   3d758:	f015 0501 	ands.w	r5, r5, #1
						conn->periph.force |= BIT(31);
   3d75c:	bf18      	it	ne
   3d75e:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
   3d762:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
   3d766:	e760      	b.n	3d62a <ull_conn_done+0x5e>
		lazy = lll->latency_event + 1U;
   3d768:	3201      	adds	r2, #1
   3d76a:	b291      	uxth	r1, r2
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   3d76c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
   3d76e:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   3d770:	9504      	str	r5, [sp, #16]
   3d772:	2000      	movs	r0, #0
   3d774:	4d5e      	ldr	r5, [pc, #376]	; (3d8f0 <ull_conn_done+0x324>)
   3d776:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   3d778:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   3d77a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   3d77e:	9406      	str	r4, [sp, #24]
   3d780:	9600      	str	r6, [sp, #0]
   3d782:	b2d2      	uxtb	r2, r2
   3d784:	2101      	movs	r1, #1
   3d786:	9505      	str	r5, [sp, #20]
   3d788:	f7f7 fee2 	bl	35550 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   3d78c:	f030 0302 	bics.w	r3, r0, #2
   3d790:	d08e      	beq.n	3d6b0 <ull_conn_done+0xe4>
   3d792:	f7fa faa1 	bl	37cd8 <ull_disable_mark_get>
   3d796:	4284      	cmp	r4, r0
   3d798:	d08a      	beq.n	3d6b0 <ull_conn_done+0xe4>
   3d79a:	4a56      	ldr	r2, [pc, #344]	; (3d8f4 <ull_conn_done+0x328>)
   3d79c:	4956      	ldr	r1, [pc, #344]	; (3d8f8 <ull_conn_done+0x32c>)
   3d79e:	4857      	ldr	r0, [pc, #348]	; (3d8fc <ull_conn_done+0x330>)
   3d7a0:	f240 63cd 	movw	r3, #1741	; 0x6cd
   3d7a4:	f00c f929 	bl	499fa <printk>
   3d7a8:	4040      	eors	r0, r0
   3d7aa:	f380 8811 	msr	BASEPRI, r0
   3d7ae:	f04f 0003 	mov.w	r0, #3
   3d7b2:	df02      	svc	2
   3d7b4:	e77c      	b.n	3d6b0 <ull_conn_done+0xe4>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   3d7b6:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3d7ba:	071e      	lsls	r6, r3, #28
   3d7bc:	d534      	bpl.n	3d828 <ull_conn_done+0x25c>
					    (lll->latency + 6)) ?
   3d7be:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   3d7c0:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   3d7c4:	1d8b      	adds	r3, r1, #6
			appto_reload_new = (conn->apto_reload >
   3d7c6:	429a      	cmp	r2, r3
   3d7c8:	bfc4      	itt	gt
   3d7ca:	1f93      	subgt	r3, r2, #6
   3d7cc:	1a5b      	subgt	r3, r3, r1
			if (conn->appto_reload != appto_reload_new) {
   3d7ce:	f8b4 10ca 	ldrh.w	r1, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   3d7d2:	bfcc      	ite	gt
   3d7d4:	b29b      	uxthgt	r3, r3
   3d7d6:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   3d7d8:	4299      	cmp	r1, r3
   3d7da:	d051      	beq.n	3d880 <ull_conn_done+0x2b4>
				conn->appto_reload = appto_reload_new;
   3d7dc:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   3d7e0:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   3d7e4:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
   3d7e8:	e703      	b.n	3d5f2 <ull_conn_done+0x26>
		conn->appto_expire = conn->apto_expire = 0U;
   3d7ea:	2300      	movs	r3, #0
   3d7ec:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   3d7f0:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   3d7f4:	e6fd      	b.n	3d5f2 <ull_conn_done+0x26>
		if (!conn->supervision_expire) {
   3d7f6:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   3d7fa:	2b00      	cmp	r3, #0
   3d7fc:	d195      	bne.n	3d72a <ull_conn_done+0x15e>
			conn->supervision_expire = conn->supervision_reload;
   3d7fe:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
   3d802:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   3d806:	e78d      	b.n	3d724 <ull_conn_done+0x158>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3d808:	1a5b      	subs	r3, r3, r1
   3d80a:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   3d80e:	1b92      	subs	r2, r2, r6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3d810:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   3d812:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3d816:	f47f af33 	bne.w	3d680 <ull_conn_done+0xb4>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   3d81a:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3d81e:	3b01      	subs	r3, #1
   3d820:	2b01      	cmp	r3, #1
   3d822:	f63f af2d 	bhi.w	3d680 <ull_conn_done+0xb4>
   3d826:	e732      	b.n	3d68e <ull_conn_done+0xc2>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   3d828:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
   3d82c:	07d8      	lsls	r0, r3, #31
   3d82e:	f57f aee0 	bpl.w	3d5f2 <ull_conn_done+0x26>
   3d832:	e7c4      	b.n	3d7be <ull_conn_done+0x1f2>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3d834:	b913      	cbnz	r3, 3d83c <ull_conn_done+0x270>
   3d836:	2e00      	cmp	r6, #0
   3d838:	f43f af3a 	beq.w	3d6b0 <ull_conn_done+0xe4>
	lazy = 0U;
   3d83c:	4629      	mov	r1, r5
   3d83e:	e795      	b.n	3d76c <ull_conn_done+0x1a0>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   3d840:	aa08      	add	r2, sp, #32
   3d842:	a909      	add	r1, sp, #36	; 0x24
   3d844:	4628      	mov	r0, r5
   3d846:	f7e8 ffd7 	bl	267f8 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   3d84a:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   3d84e:	b3bb      	cbz	r3, 3d8c0 <ull_conn_done+0x2f4>
				lll->latency_event = 0;
   3d850:	2300      	movs	r3, #0
   3d852:	8623      	strh	r3, [r4, #48]	; 0x30
   3d854:	e6de      	b.n	3d614 <ull_conn_done+0x48>
			rx = ll_pdu_rx_alloc();
   3d856:	f7fa f991 	bl	37b7c <ll_pdu_rx_alloc>
			if (rx) {
   3d85a:	4601      	mov	r1, r0
   3d85c:	b300      	cbz	r0, 3d8a0 <ull_conn_done+0x2d4>
				rx->handle = lll->handle;
   3d85e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   3d860:	2200      	movs	r2, #0
   3d862:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
				rx->handle = lll->handle;
   3d866:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   3d868:	231a      	movs	r3, #26
   3d86a:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   3d86c:	6800      	ldr	r0, [r0, #0]
   3d86e:	f7fa f955 	bl	37b1c <ll_rx_put>
				ll_rx_sched();
   3d872:	f7fa f95d 	bl	37b30 <ll_rx_sched>
   3d876:	e6ea      	b.n	3d64e <ull_conn_done+0x82>
				force = 1U;
   3d878:	2501      	movs	r5, #1
   3d87a:	e6d6      	b.n	3d62a <ull_conn_done+0x5e>
	if ((force) || (latency_event != lll->latency_event)) {
   3d87c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   3d87e:	e708      	b.n	3d692 <ull_conn_done+0xc6>
			if (conn->apto_expire == 0U) {
   3d880:	f8b4 10d0 	ldrh.w	r1, [r4, #208]	; 0xd0
   3d884:	2900      	cmp	r1, #0
   3d886:	f47f aeb4 	bne.w	3d5f2 <ull_conn_done+0x26>
   3d88a:	e7a9      	b.n	3d7e0 <ull_conn_done+0x214>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   3d88c:	2108      	movs	r1, #8
   3d88e:	4620      	mov	r0, r4
   3d890:	f7ff fe1a 	bl	3d4c8 <conn_cleanup>
			return;
   3d894:	e70c      	b.n	3d6b0 <ull_conn_done+0xe4>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   3d896:	2122      	movs	r1, #34	; 0x22
   3d898:	4620      	mov	r0, r4
   3d89a:	f7ff fe15 	bl	3d4c8 <conn_cleanup>
			return;
   3d89e:	e707      	b.n	3d6b0 <ull_conn_done+0xe4>
				conn->apto_expire = 1U;
   3d8a0:	2301      	movs	r3, #1
   3d8a2:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   3d8a6:	e6d2      	b.n	3d64e <ull_conn_done+0x82>
				conn->llcp_type = LLCP_PING;
   3d8a8:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   3d8aa:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
   3d8ac:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
				conn->llcp_ack -= 2U;
   3d8b0:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3d8b4:	e6e4      	b.n	3d680 <ull_conn_done+0xb4>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   3d8b6:	213e      	movs	r1, #62	; 0x3e
   3d8b8:	4620      	mov	r0, r4
   3d8ba:	f7ff fe05 	bl	3d4c8 <conn_cleanup>
			return;
   3d8be:	e6f7      	b.n	3d6b0 <ull_conn_done+0xe4>
				ull_conn_tx_demux(UINT8_MAX);
   3d8c0:	20ff      	movs	r0, #255	; 0xff
   3d8c2:	f7ff fdad 	bl	3d420 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   3d8c6:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
   3d8ca:	2a00      	cmp	r2, #0
   3d8cc:	d1c0      	bne.n	3d850 <ull_conn_done+0x284>
   3d8ce:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   3d8d2:	f7f6 fb17 	bl	33f04 <memq_peek>
   3d8d6:	2800      	cmp	r0, #0
   3d8d8:	d1ba      	bne.n	3d850 <ull_conn_done+0x284>
			} else if (lll->periph.latency_enabled) {
   3d8da:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   3d8de:	0759      	lsls	r1, r3, #29
   3d8e0:	f57f ae98 	bpl.w	3d614 <ull_conn_done+0x48>
				lll->latency_event = lll->latency;
   3d8e4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   3d8e6:	8623      	strh	r3, [r4, #48]	; 0x30
   3d8e8:	e694      	b.n	3d614 <ull_conn_done+0x48>
	force = 0U;
   3d8ea:	461d      	mov	r5, r3
   3d8ec:	e69d      	b.n	3d62a <ull_conn_done+0x5e>
   3d8ee:	bf00      	nop
   3d8f0:	000396ed 	.word	0x000396ed
   3d8f4:	00052f80 	.word	0x00052f80
   3d8f8:	000530dc 	.word	0x000530dc
   3d8fc:	00052a70 	.word	0x00052a70

0003d900 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   3d900:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   3d904:	2b00      	cmp	r3, #0
   3d906:	f000 80e9 	beq.w	3dadc <ull_conn_tx_lll_enqueue+0x1dc>
   3d90a:	3901      	subs	r1, #1
{
   3d90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   3d910:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 3dae0 <ull_conn_tx_lll_enqueue+0x1e0>
		LL_ASSERT(link);
   3d914:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 3dae4 <ull_conn_tx_lll_enqueue+0x1e4>
   3d918:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 3dae8 <ull_conn_tx_lll_enqueue+0x1e8>
   3d91c:	4604      	mov	r4, r0
   3d91e:	b2cd      	uxtb	r5, r1
   3d920:	e012      	b.n	3d948 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   3d922:	4640      	mov	r0, r8
   3d924:	f7f6 fa80 	bl	33e28 <mem_acquire>
		LL_ASSERT(link);
   3d928:	4607      	mov	r7, r0
   3d92a:	2800      	cmp	r0, #0
   3d92c:	d068      	beq.n	3da00 <ull_conn_tx_lll_enqueue+0x100>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   3d92e:	f104 0268 	add.w	r2, r4, #104	; 0x68
   3d932:	4631      	mov	r1, r6
   3d934:	4638      	mov	r0, r7
   3d936:	f7f6 fadb 	bl	33ef0 <memq_enqueue>
	while (conn->tx_head &&
   3d93a:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   3d93e:	3d01      	subs	r5, #1
   3d940:	b2ed      	uxtb	r5, r5
   3d942:	2b00      	cmp	r3, #0
   3d944:	f000 809c 	beq.w	3da80 <ull_conn_tx_lll_enqueue+0x180>
		 !conn->llcp_phy.pause_tx &&
   3d948:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
	while (conn->tx_head &&
   3d94c:	07d1      	lsls	r1, r2, #31
   3d94e:	d403      	bmi.n	3d958 <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   3d950:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
		 !conn->llcp_phy.pause_tx &&
   3d954:	0792      	lsls	r2, r2, #30
   3d956:	d568      	bpl.n	3da2a <ull_conn_tx_lll_enqueue+0x12a>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   3d958:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3d95c:	429a      	cmp	r2, r3
   3d95e:	f040 808f 	bne.w	3da80 <ull_conn_tx_lll_enqueue+0x180>
   3d962:	2dff      	cmp	r5, #255	; 0xff
   3d964:	f000 808c 	beq.w	3da80 <ull_conn_tx_lll_enqueue+0x180>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   3d968:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
   3d96c:	4620      	mov	r0, r4
   3d96e:	f7fb fedd 	bl	3972c <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   3d972:	7903      	ldrb	r3, [r0, #4]
   3d974:	f003 0303 	and.w	r3, r3, #3
   3d978:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   3d97a:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   3d97c:	d1d1      	bne.n	3d922 <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   3d97e:	79c3      	ldrb	r3, [r0, #7]
   3d980:	3b03      	subs	r3, #3
   3d982:	2b14      	cmp	r3, #20
   3d984:	d8cd      	bhi.n	3d922 <ull_conn_tx_lll_enqueue+0x22>
   3d986:	a201      	add	r2, pc, #4	; (adr r2, 3d98c <ull_conn_tx_lll_enqueue+0x8c>)
   3d988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   3d98c:	0003d9e9 	.word	0x0003d9e9
   3d990:	0003d9e9 	.word	0x0003d9e9
   3d994:	0003d923 	.word	0x0003d923
   3d998:	0003d923 	.word	0x0003d923
   3d99c:	0003d923 	.word	0x0003d923
   3d9a0:	0003d923 	.word	0x0003d923
   3d9a4:	0003d923 	.word	0x0003d923
   3d9a8:	0003d9e9 	.word	0x0003d9e9
   3d9ac:	0003d9e1 	.word	0x0003d9e1
   3d9b0:	0003d923 	.word	0x0003d923
   3d9b4:	0003d923 	.word	0x0003d923
   3d9b8:	0003d923 	.word	0x0003d923
   3d9bc:	0003d923 	.word	0x0003d923
   3d9c0:	0003d923 	.word	0x0003d923
   3d9c4:	0003d923 	.word	0x0003d923
   3d9c8:	0003d923 	.word	0x0003d923
   3d9cc:	0003d923 	.word	0x0003d923
   3d9d0:	0003d923 	.word	0x0003d923
   3d9d4:	0003d923 	.word	0x0003d923
   3d9d8:	0003da1d 	.word	0x0003da1d
   3d9dc:	0003da1d 	.word	0x0003da1d
		if (!conn->lll.role) {
   3d9e0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3d9e4:	2b00      	cmp	r3, #0
   3d9e6:	da9c      	bge.n	3d922 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   3d9e8:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
   3d9ec:	f043 0302 	orr.w	r3, r3, #2
   3d9f0:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
		link = mem_acquire(&mem_link_tx.free);
   3d9f4:	4640      	mov	r0, r8
   3d9f6:	f7f6 fa17 	bl	33e28 <mem_acquire>
		LL_ASSERT(link);
   3d9fa:	4607      	mov	r7, r0
   3d9fc:	2800      	cmp	r0, #0
   3d9fe:	d196      	bne.n	3d92e <ull_conn_tx_lll_enqueue+0x2e>
   3da00:	483a      	ldr	r0, [pc, #232]	; (3daec <ull_conn_tx_lll_enqueue+0x1ec>)
   3da02:	f240 7326 	movw	r3, #1830	; 0x726
   3da06:	4652      	mov	r2, sl
   3da08:	4649      	mov	r1, r9
   3da0a:	f00b fff6 	bl	499fa <printk>
   3da0e:	4040      	eors	r0, r0
   3da10:	f380 8811 	msr	BASEPRI, r0
   3da14:	f04f 0003 	mov.w	r0, #3
   3da18:	df02      	svc	2
   3da1a:	e788      	b.n	3d92e <ull_conn_tx_lll_enqueue+0x2e>
		conn->llcp_phy.pause_tx = 1U;
   3da1c:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   3da20:	f043 0301 	orr.w	r3, r3, #1
   3da24:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
		break;
   3da28:	e77b      	b.n	3d922 <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   3da2a:	791a      	ldrb	r2, [r3, #4]
   3da2c:	f002 0203 	and.w	r2, r2, #3
   3da30:	2a03      	cmp	r2, #3
   3da32:	d196      	bne.n	3d962 <ull_conn_tx_lll_enqueue+0x62>
	    ((pdu_data_tx->llctrl.opcode ==
   3da34:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   3da36:	2a03      	cmp	r2, #3
   3da38:	d001      	beq.n	3da3e <ull_conn_tx_lll_enqueue+0x13e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   3da3a:	2a0a      	cmp	r2, #10
   3da3c:	d191      	bne.n	3d962 <ull_conn_tx_lll_enqueue+0x62>
		if (((conn->llcp_req != conn->llcp_ack) &&
   3da3e:	f894 10f1 	ldrb.w	r1, [r4, #241]	; 0xf1
   3da42:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   3da46:	428a      	cmp	r2, r1
   3da48:	d01c      	beq.n	3da84 <ull_conn_tx_lll_enqueue+0x184>
   3da4a:	f894 20f2 	ldrb.w	r2, [r4, #242]	; 0xf2
   3da4e:	2a03      	cmp	r2, #3
   3da50:	d087      	beq.n	3d962 <ull_conn_tx_lll_enqueue+0x62>
			if ((tx->next != NULL) &&
   3da52:	681a      	ldr	r2, [r3, #0]
   3da54:	b1a2      	cbz	r2, 3da80 <ull_conn_tx_lll_enqueue+0x180>
   3da56:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3da5a:	428a      	cmp	r2, r1
   3da5c:	d110      	bne.n	3da80 <ull_conn_tx_lll_enqueue+0x180>
				conn->tx_head = tx->next;
   3da5e:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
				tx->next = conn->tx_ctrl_last->next;
   3da62:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
				if (!conn->tx_data_last) {
   3da66:	f8d4 11e4 	ldr.w	r1, [r4, #484]	; 0x1e4
				tx->next = conn->tx_ctrl_last->next;
   3da6a:	6810      	ldr	r0, [r2, #0]
   3da6c:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   3da6e:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   3da70:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
				if (!conn->tx_data_last) {
   3da74:	2900      	cmp	r1, #0
   3da76:	f47f af74 	bne.w	3d962 <ull_conn_tx_lll_enqueue+0x62>
					conn->tx_data_last = tx;
   3da7a:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
   3da7e:	e770      	b.n	3d962 <ull_conn_tx_lll_enqueue+0x62>
}
   3da80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		    ((conn->llcp_req == conn->llcp_ack) &&
   3da84:	f894 0131 	ldrb.w	r0, [r4, #305]	; 0x131
   3da88:	f894 1130 	ldrb.w	r1, [r4, #304]	; 0x130
   3da8c:	4288      	cmp	r0, r1
   3da8e:	d1e0      	bne.n	3da52 <ull_conn_tx_lll_enqueue+0x152>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   3da90:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
   3da94:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
   3da98:	4288      	cmp	r0, r1
   3da9a:	d1da      	bne.n	3da52 <ull_conn_tx_lll_enqueue+0x152>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   3da9c:	f894 0195 	ldrb.w	r0, [r4, #405]	; 0x195
   3daa0:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   3daa4:	4288      	cmp	r0, r1
   3daa6:	d1d4      	bne.n	3da52 <ull_conn_tx_lll_enqueue+0x152>
		       conn->llcp_conn_param.req) ||
   3daa8:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   3daac:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   3dab0:	4288      	cmp	r0, r1
   3dab2:	d1ce      	bne.n	3da52 <ull_conn_tx_lll_enqueue+0x152>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   3dab4:	f894 01cd 	ldrb.w	r0, [r4, #461]	; 0x1cd
   3dab8:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
   3dabc:	4288      	cmp	r0, r1
   3dabe:	d1c8      	bne.n	3da52 <ull_conn_tx_lll_enqueue+0x152>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   3dac0:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
			conn->llcp_ack -= 2U;
   3dac4:	3a02      	subs	r2, #2
   3dac6:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   3daca:	2201      	movs	r2, #1
   3dacc:	f362 0301 	bfi	r3, r2, #0, #2
   3dad0:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
			conn->llcp_type = LLCP_ENCRYPTION;
   3dad4:	2303      	movs	r3, #3
   3dad6:	f884 30f2 	strb.w	r3, [r4, #242]	; 0xf2
			conn->llcp_ack -= 2U;
   3dada:	e742      	b.n	3d962 <ull_conn_tx_lll_enqueue+0x62>
   3dadc:	4770      	bx	lr
   3dade:	bf00      	nop
   3dae0:	200058c4 	.word	0x200058c4
   3dae4:	00052f80 	.word	0x00052f80
   3dae8:	00052fd8 	.word	0x00052fd8
   3daec:	00052a70 	.word	0x00052a70

0003daf0 <tx_demux>:
{
   3daf0:	b510      	push	{r4, lr}
   3daf2:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   3daf4:	2001      	movs	r0, #1
   3daf6:	f7ff fc93 	bl	3d420 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   3dafa:	4620      	mov	r0, r4
   3dafc:	2101      	movs	r1, #1
}
   3dafe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   3db02:	f7ff befd 	b.w	3d900 <ull_conn_tx_lll_enqueue>
   3db06:	bf00      	nop

0003db08 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   3db08:	4901      	ldr	r1, [pc, #4]	; (3db10 <ull_conn_link_tx_release+0x8>)
   3db0a:	f7f6 b9a7 	b.w	33e5c <mem_release>
   3db0e:	bf00      	nop
   3db10:	200058c4 	.word	0x200058c4

0003db14 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   3db14:	4b01      	ldr	r3, [pc, #4]	; (3db1c <ull_conn_ack_last_idx_get+0x8>)
}
   3db16:	78d8      	ldrb	r0, [r3, #3]
   3db18:	4770      	bx	lr
   3db1a:	bf00      	nop
   3db1c:	20000c54 	.word	0x20000c54

0003db20 <ull_conn_ack_peek>:
{
   3db20:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   3db22:	4b0c      	ldr	r3, [pc, #48]	; (3db54 <ull_conn_ack_peek+0x34>)
   3db24:	f893 c002 	ldrb.w	ip, [r3, #2]
   3db28:	f893 e003 	ldrb.w	lr, [r3, #3]
   3db2c:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   3db2e:	45f4      	cmp	ip, lr
   3db30:	d00d      	beq.n	3db4e <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   3db32:	fb1c fc04 	smulbb	ip, ip, r4
   3db36:	3304      	adds	r3, #4
   3db38:	eb0c 0403 	add.w	r4, ip, r3
	*ack_last = mfifo_conn_ack.l;
   3db3c:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
   3db40:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   3db44:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
   3db46:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   3db48:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   3db4a:	6818      	ldr	r0, [r3, #0]
}
   3db4c:	bd10      	pop	{r4, pc}
		return NULL;
   3db4e:	2000      	movs	r0, #0
}
   3db50:	bd10      	pop	{r4, pc}
   3db52:	bf00      	nop
   3db54:	20000c54 	.word	0x20000c54

0003db58 <ull_conn_ack_by_last_peek>:
{
   3db58:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   3db5a:	4b0b      	ldr	r3, [pc, #44]	; (3db88 <ull_conn_ack_by_last_peek+0x30>)
   3db5c:	f893 c002 	ldrb.w	ip, [r3, #2]
   3db60:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   3db64:	4584      	cmp	ip, r0
   3db66:	d00d      	beq.n	3db84 <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
   3db68:	3304      	adds	r3, #4
   3db6a:	fb1c fc0e 	smulbb	ip, ip, lr
   3db6e:	eb0c 0e03 	add.w	lr, ip, r3
	*handle = lll_tx->handle;
   3db72:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   3db76:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
   3db7a:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   3db7c:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   3db7e:	6818      	ldr	r0, [r3, #0]
}
   3db80:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   3db84:	2000      	movs	r0, #0
   3db86:	e7fb      	b.n	3db80 <ull_conn_ack_by_last_peek+0x28>
   3db88:	20000c54 	.word	0x20000c54

0003db8c <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   3db8c:	4b09      	ldr	r3, [pc, #36]	; (3dbb4 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   3db8e:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   3db90:	78da      	ldrb	r2, [r3, #3]
   3db92:	7818      	ldrb	r0, [r3, #0]
   3db94:	f893 c001 	ldrb.w	ip, [r3, #1]
   3db98:	428a      	cmp	r2, r1
   3db9a:	d009      	beq.n	3dbb0 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   3db9c:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   3db9e:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   3dba2:	b2d2      	uxtb	r2, r2
		_first = 0U;
   3dba4:	4594      	cmp	ip, r2
   3dba6:	bf08      	it	eq
   3dba8:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   3dbaa:	6840      	ldr	r0, [r0, #4]
	*first = _first; /* Write back read-index */
   3dbac:	709a      	strb	r2, [r3, #2]
	return mem;
   3dbae:	4770      	bx	lr
		return NULL;
   3dbb0:	2000      	movs	r0, #0
}
   3dbb2:	4770      	bx	lr
   3dbb4:	20000c54 	.word	0x20000c54

0003dbb8 <ull_conn_lll_ack_enqueue>:
{
   3dbb8:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   3dbba:	4c14      	ldr	r4, [pc, #80]	; (3dc0c <ull_conn_lll_ack_enqueue+0x54>)
   3dbbc:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   3dbbe:	f894 e001 	ldrb.w	lr, [r4, #1]
   3dbc2:	f894 c002 	ldrb.w	ip, [r4, #2]
   3dbc6:	7825      	ldrb	r5, [r4, #0]
	last = last + 1;
   3dbc8:	1c53      	adds	r3, r2, #1
   3dbca:	b2db      	uxtb	r3, r3
		last = 0U;
   3dbcc:	459e      	cmp	lr, r3
   3dbce:	bf08      	it	eq
   3dbd0:	2300      	moveq	r3, #0
	if (last == first) {
   3dbd2:	459c      	cmp	ip, r3
   3dbd4:	d009      	beq.n	3dbea <ull_conn_lll_ack_enqueue+0x32>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   3dbd6:	fb12 f205 	smulbb	r2, r2, r5
   3dbda:	f104 0c04 	add.w	ip, r4, #4
	lll_tx->handle = handle;
   3dbde:	f82c 0002 	strh.w	r0, [ip, r2]
   3dbe2:	4462      	add	r2, ip
	lll_tx->node = tx;
   3dbe4:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
   3dbe6:	70e3      	strb	r3, [r4, #3]
}
   3dbe8:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   3dbea:	4a09      	ldr	r2, [pc, #36]	; (3dc10 <ull_conn_lll_ack_enqueue+0x58>)
   3dbec:	4909      	ldr	r1, [pc, #36]	; (3dc14 <ull_conn_lll_ack_enqueue+0x5c>)
   3dbee:	480a      	ldr	r0, [pc, #40]	; (3dc18 <ull_conn_lll_ack_enqueue+0x60>)
   3dbf0:	f240 7376 	movw	r3, #1910	; 0x776
   3dbf4:	f00b ff01 	bl	499fa <printk>
   3dbf8:	4040      	eors	r0, r0
   3dbfa:	f380 8811 	msr	BASEPRI, r0
   3dbfe:	f04f 0003 	mov.w	r0, #3
   3dc02:	df02      	svc	2
	lll_tx->handle = handle;
   3dc04:	2300      	movs	r3, #0
   3dc06:	801b      	strh	r3, [r3, #0]
   3dc08:	deff      	udf	#255	; 0xff
   3dc0a:	bf00      	nop
   3dc0c:	20000c54 	.word	0x20000c54
   3dc10:	00052f80 	.word	0x00052f80
   3dc14:	00052fc8 	.word	0x00052fc8
   3dc18:	00052a70 	.word	0x00052a70

0003dc1c <ull_conn_tx_ack>:
{
   3dc1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   3dc1e:	7953      	ldrb	r3, [r2, #5]
{
   3dc20:	b083      	sub	sp, #12
   3dc22:	4614      	mov	r4, r2
   3dc24:	4605      	mov	r5, r0
   3dc26:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   3dc28:	b37b      	cbz	r3, 3dc8a <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   3dc2a:	7923      	ldrb	r3, [r4, #4]
   3dc2c:	f003 0203 	and.w	r2, r3, #3
   3dc30:	2a03      	cmp	r2, #3
   3dc32:	d00d      	beq.n	3dc50 <ull_conn_tx_ack+0x34>
	} else if (handle == LLL_HANDLE_INVALID) {
   3dc34:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3dc38:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   3dc3a:	bf04      	itt	eq
   3dc3c:	f36f 0301 	bfceq	r3, #0, #2
   3dc40:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   3dc42:	4621      	mov	r1, r4
   3dc44:	4628      	mov	r0, r5
}
   3dc46:	b003      	add	sp, #12
   3dc48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   3dc4c:	f7f9 bfac 	b.w	37ba8 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   3dc50:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3dc54:	429d      	cmp	r5, r3
   3dc56:	d126      	bne.n	3dca6 <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   3dc58:	6830      	ldr	r0, [r6, #0]
   3dc5a:	4284      	cmp	r4, r0
   3dc5c:	d073      	beq.n	3dd46 <ull_conn_tx_ack+0x12a>
		LL_ASSERT(!link->next);
   3dc5e:	2800      	cmp	r0, #0
   3dc60:	d0ef      	beq.n	3dc42 <ull_conn_tx_ack+0x26>
   3dc62:	4acc      	ldr	r2, [pc, #816]	; (3df94 <ull_conn_tx_ack+0x378>)
   3dc64:	49cc      	ldr	r1, [pc, #816]	; (3df98 <ull_conn_tx_ack+0x37c>)
   3dc66:	48cd      	ldr	r0, [pc, #820]	; (3df9c <ull_conn_tx_ack+0x380>)
   3dc68:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
   3dc6c:	f00b fec5 	bl	499fa <printk>
   3dc70:	4040      	eors	r0, r0
   3dc72:	f380 8811 	msr	BASEPRI, r0
   3dc76:	f04f 0003 	mov.w	r0, #3
   3dc7a:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   3dc7c:	4621      	mov	r1, r4
   3dc7e:	4628      	mov	r0, r5
}
   3dc80:	b003      	add	sp, #12
   3dc82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   3dc86:	f7f9 bf8f 	b.w	37ba8 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   3dc8a:	4ac2      	ldr	r2, [pc, #776]	; (3df94 <ull_conn_tx_ack+0x378>)
   3dc8c:	49c4      	ldr	r1, [pc, #784]	; (3dfa0 <ull_conn_tx_ack+0x384>)
   3dc8e:	48c3      	ldr	r0, [pc, #780]	; (3df9c <ull_conn_tx_ack+0x380>)
   3dc90:	f240 7383 	movw	r3, #1923	; 0x783
   3dc94:	f00b feb1 	bl	499fa <printk>
   3dc98:	4040      	eors	r0, r0
   3dc9a:	f380 8811 	msr	BASEPRI, r0
   3dc9e:	f04f 0003 	mov.w	r0, #3
   3dca2:	df02      	svc	2
   3dca4:	e7c1      	b.n	3dc2a <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3dca6:	48bf      	ldr	r0, [pc, #764]	; (3dfa4 <ull_conn_tx_ack+0x388>)
   3dca8:	462a      	mov	r2, r5
   3dcaa:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3dcae:	f7f6 f8ed 	bl	33e8c <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   3dcb2:	79e3      	ldrb	r3, [r4, #7]
   3dcb4:	3b02      	subs	r3, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3dcb6:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
   3dcb8:	2b16      	cmp	r3, #22
   3dcba:	d8cd      	bhi.n	3dc58 <ull_conn_tx_ack+0x3c>
   3dcbc:	a201      	add	r2, pc, #4	; (adr r2, 3dcc4 <ull_conn_tx_ack+0xa8>)
   3dcbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   3dcc2:	bf00      	nop
   3dcc4:	0003dec3 	.word	0x0003dec3
   3dcc8:	0003dde5 	.word	0x0003dde5
   3dccc:	0003dd85 	.word	0x0003dd85
   3dcd0:	0003dd6f 	.word	0x0003dd6f
   3dcd4:	0003e017 	.word	0x0003e017
   3dcd8:	0003dd59 	.word	0x0003dd59
   3dcdc:	0003dc59 	.word	0x0003dc59
   3dce0:	0003dd59 	.word	0x0003dd59
   3dce4:	0003ddb9 	.word	0x0003ddb9
   3dce8:	0003df0f 	.word	0x0003df0f
   3dcec:	0003dc59 	.word	0x0003dc59
   3dcf0:	0003dd9b 	.word	0x0003dd9b
   3dcf4:	0003dc59 	.word	0x0003dc59
   3dcf8:	0003dc59 	.word	0x0003dc59
   3dcfc:	0003dc59 	.word	0x0003dc59
   3dd00:	0003dd53 	.word	0x0003dd53
   3dd04:	0003dc59 	.word	0x0003dc59
   3dd08:	0003dd59 	.word	0x0003dd59
   3dd0c:	0003dff3 	.word	0x0003dff3
   3dd10:	0003de59 	.word	0x0003de59
   3dd14:	0003de29 	.word	0x0003de29
   3dd18:	0003dfb1 	.word	0x0003dfb1
   3dd1c:	0003dee5 	.word	0x0003dee5
		conn->tx_data_last = tx;
   3dd20:	f8c7 41e4 	str.w	r4, [r7, #484]	; 0x1e4
		if (link->next == (void *)tx) {
   3dd24:	2a00      	cmp	r2, #0
   3dd26:	f040 8133 	bne.w	3df90 <ull_conn_tx_ack+0x374>
			LL_ASSERT(link->next);
   3dd2a:	4a9a      	ldr	r2, [pc, #616]	; (3df94 <ull_conn_tx_ack+0x378>)
   3dd2c:	499e      	ldr	r1, [pc, #632]	; (3dfa8 <ull_conn_tx_ack+0x38c>)
   3dd2e:	489b      	ldr	r0, [pc, #620]	; (3df9c <ull_conn_tx_ack+0x380>)
   3dd30:	f240 7392 	movw	r3, #1938	; 0x792
   3dd34:	f00b fe61 	bl	499fa <printk>
   3dd38:	4040      	eors	r0, r0
   3dd3a:	f380 8811 	msr	BASEPRI, r0
   3dd3e:	f04f 0003 	mov.w	r0, #3
   3dd42:	df02      	svc	2
   3dd44:	2000      	movs	r0, #0
			mem_release(tx, &mem_conn_tx_ctrl.free);
   3dd46:	4999      	ldr	r1, [pc, #612]	; (3dfac <ull_conn_tx_ack+0x390>)
}
   3dd48:	b003      	add	sp, #12
   3dd4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   3dd4e:	f7f6 b885 	b.w	33e5c <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   3dd52:	7a23      	ldrb	r3, [r4, #8]
   3dd54:	2b03      	cmp	r3, #3
   3dd56:	d020      	beq.n	3dd9a <ull_conn_tx_ack+0x17e>
			conn->common.txn_lock = 0U;
   3dd58:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
		if (link->next == (void *)tx) {
   3dd5c:	6830      	ldr	r0, [r6, #0]
			conn->common.txn_lock = 0U;
   3dd5e:	f36f 0341 	bfc	r3, #1, #1
		if (link->next == (void *)tx) {
   3dd62:	4284      	cmp	r4, r0
			conn->common.txn_lock = 0U;
   3dd64:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
		if (link->next == (void *)tx) {
   3dd68:	f47f af79 	bne.w	3dc5e <ull_conn_tx_ack+0x42>
   3dd6c:	e7eb      	b.n	3dd46 <ull_conn_tx_ack+0x12a>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3dd6e:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
		if (link->next == (void *)tx) {
   3dd72:	6830      	ldr	r0, [r6, #0]
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3dd74:	f043 0303 	orr.w	r3, r3, #3
		if (link->next == (void *)tx) {
   3dd78:	4284      	cmp	r4, r0
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3dd7a:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		if (link->next == (void *)tx) {
   3dd7e:	f47f af6e 	bne.w	3dc5e <ull_conn_tx_ack+0x42>
   3dd82:	e7e0      	b.n	3dd46 <ull_conn_tx_ack+0x12a>
			conn->llcp_enc.pause_tx = 1U;
   3dd84:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
		if (link->next == (void *)tx) {
   3dd88:	6830      	ldr	r0, [r6, #0]
			conn->llcp_enc.pause_tx = 1U;
   3dd8a:	f043 0302 	orr.w	r3, r3, #2
		if (link->next == (void *)tx) {
   3dd8e:	4284      	cmp	r4, r0
			conn->llcp_enc.pause_tx = 1U;
   3dd90:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
		if (link->next == (void *)tx) {
   3dd94:	f47f af63 	bne.w	3dc5e <ull_conn_tx_ack+0x42>
   3dd98:	e7d5      	b.n	3dd46 <ull_conn_tx_ack+0x12a>
		conn->llcp_enc.pause_rx = 0U;
   3dd9a:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
		if (link->next == (void *)tx) {
   3dd9e:	6830      	ldr	r0, [r6, #0]
		conn->llcp_enc.pause_rx = 0U;
   3dda0:	f023 0303 	bic.w	r3, r3, #3
   3dda4:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
		if (link->next == (void *)tx) {
   3dda8:	4284      	cmp	r4, r0
		conn->procedure_expire = 0U;
   3ddaa:	f04f 0300 	mov.w	r3, #0
   3ddae:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		if (link->next == (void *)tx) {
   3ddb2:	f47f af54 	bne.w	3dc5e <ull_conn_tx_ack+0x42>
   3ddb6:	e7c6      	b.n	3dd46 <ull_conn_tx_ack+0x12a>
		conn->llcp_enc.pause_tx = 1U;
   3ddb8:	f890 3176 	ldrb.w	r3, [r0, #374]	; 0x176
   3ddbc:	f023 0306 	bic.w	r3, r3, #6
   3ddc0:	f043 0306 	orr.w	r3, r3, #6
   3ddc4:	f880 3176 	strb.w	r3, [r0, #374]	; 0x176
		conn->procedure_expire = conn->procedure_reload;
   3ddc8:	f8b0 30c6 	ldrh.w	r3, [r0, #198]	; 0xc6
   3ddcc:	f8a0 30c8 	strh.w	r3, [r0, #200]	; 0xc8
		conn->llcp_enc.ack = conn->llcp_enc.req;
   3ddd0:	f890 3174 	ldrb.w	r3, [r0, #372]	; 0x174
   3ddd4:	f880 3175 	strb.w	r3, [r0, #373]	; 0x175
		if (link->next == (void *)tx) {
   3ddd8:	6830      	ldr	r0, [r6, #0]
   3ddda:	4284      	cmp	r4, r0
   3dddc:	f47f af3f 	bne.w	3dc5e <ull_conn_tx_ack+0x42>
			LL_ASSERT(link->next);
   3dde0:	4620      	mov	r0, r4
   3dde2:	e7b0      	b.n	3dd46 <ull_conn_tx_ack+0x12a>
		memcpy(&conn->llcp.encryption.skd[0],
   3dde4:	2208      	movs	r2, #8
   3dde6:	f104 0112 	add.w	r1, r4, #18
   3ddea:	f500 7081 	add.w	r0, r0, #258	; 0x102
   3ddee:	f00d ff33 	bl	4bc58 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   3ddf2:	2204      	movs	r2, #4
   3ddf4:	f104 011a 	add.w	r1, r4, #26
   3ddf8:	f107 0094 	add.w	r0, r7, #148	; 0x94
   3ddfc:	f00d ff2c 	bl	4bc58 <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   3de00:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
   3de04:	f043 0302 	orr.w	r3, r3, #2
   3de08:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
		conn->procedure_expire = conn->procedure_reload;
   3de0c:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
   3de10:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		conn->llcp_enc.ack = conn->llcp_enc.req;
   3de14:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
   3de18:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
		if (link->next == (void *)tx) {
   3de1c:	6830      	ldr	r0, [r6, #0]
   3de1e:	42a0      	cmp	r0, r4
   3de20:	f47f af1d 	bne.w	3dc5e <ull_conn_tx_ack+0x42>
			LL_ASSERT(link->next);
   3de24:	4620      	mov	r0, r4
   3de26:	e78e      	b.n	3dd46 <ull_conn_tx_ack+0x12a>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3de28:	f890 31ce 	ldrb.w	r3, [r0, #462]	; 0x1ce
   3de2c:	2202      	movs	r2, #2
   3de2e:	f362 0301 	bfi	r3, r2, #0, #2
   3de32:	f880 31ce 	strb.w	r3, [r0, #462]	; 0x1ce
		if (conn->lll.role) {
   3de36:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3de3a:	2b00      	cmp	r3, #0
   3de3c:	f2c0 8103 	blt.w	3e046 <ull_conn_tx_ack+0x42a>
		conn->llcp_phy.pause_tx = 0U;
   3de40:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
   3de44:	f36f 0300 	bfc	r3, #0, #1
   3de48:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (link->next == (void *)tx) {
   3de4c:	6830      	ldr	r0, [r6, #0]
   3de4e:	4284      	cmp	r4, r0
   3de50:	f47f af05 	bne.w	3dc5e <ull_conn_tx_ack+0x42>
			LL_ASSERT(link->next);
   3de54:	4620      	mov	r0, r4
   3de56:	e776      	b.n	3dd46 <ull_conn_tx_ack+0x12a>
		conn->common.txn_lock = 0U;
   3de58:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   3de5c:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
		conn->common.txn_lock = 0U;
   3de60:	f36f 0341 	bfc	r3, #1, #1
   3de64:	f880 30e4 	strb.w	r3, [r0, #228]	; 0xe4
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   3de68:	f890 31bd 	ldrb.w	r3, [r0, #445]	; 0x1bd
   3de6c:	428b      	cmp	r3, r1
   3de6e:	f43f aef3 	beq.w	3dc58 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   3de72:	f890 21be 	ldrb.w	r2, [r0, #446]	; 0x1be
   3de76:	f002 0307 	and.w	r3, r2, #7
   3de7a:	2b03      	cmp	r3, #3
   3de7c:	d005      	beq.n	3de8a <ull_conn_tx_ack+0x26e>
   3de7e:	3303      	adds	r3, #3
   3de80:	f003 0307 	and.w	r3, r3, #7
   3de84:	2b01      	cmp	r3, #1
   3de86:	f63f aee7 	bhi.w	3dc58 <ull_conn_tx_ack+0x3c>
				conn->lll.max_tx_octets =
   3de8a:	f8b7 31c2 	ldrh.w	r3, [r7, #450]	; 0x1c2
   3de8e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				conn->lll.max_tx_time =
   3de92:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	; 0x1c6
   3de96:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				if (conn->llcp_length.state ==
   3de9a:	f002 0307 	and.w	r3, r2, #7
   3de9e:	2b05      	cmp	r3, #5
   3dea0:	f000 80e2 	beq.w	3e068 <ull_conn_tx_ack+0x44c>
				if (!conn->llcp_length.cache.tx_octets) {
   3dea4:	f8b7 31c8 	ldrh.w	r3, [r7, #456]	; 0x1c8
   3dea8:	2b00      	cmp	r3, #0
   3deaa:	f040 80e8 	bne.w	3e07e <ull_conn_tx_ack+0x462>
					conn->llcp_length.ack =
   3deae:	f887 11bd 	strb.w	r1, [r7, #445]	; 0x1bd
		if (link->next == (void *)tx) {
   3deb2:	6830      	ldr	r0, [r6, #0]
					conn->procedure_expire = 0U;
   3deb4:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		if (link->next == (void *)tx) {
   3deb8:	4284      	cmp	r4, r0
   3deba:	f47f aed0 	bne.w	3dc5e <ull_conn_tx_ack+0x42>
			LL_ASSERT(link->next);
   3debe:	4620      	mov	r0, r4
   3dec0:	e741      	b.n	3dd46 <ull_conn_tx_ack+0x12a>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   3dec2:	7a23      	ldrb	r3, [r4, #8]
			conn->llcp_terminate.reason_final =
   3dec4:	2b13      	cmp	r3, #19
   3dec6:	bf08      	it	eq
   3dec8:	2316      	moveq	r3, #22
   3deca:	f880 3153 	strb.w	r3, [r0, #339]	; 0x153
		conn->llcp_terminate.ack--;
   3dece:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
   3ded2:	3b01      	subs	r3, #1
   3ded4:	f880 3151 	strb.w	r3, [r0, #337]	; 0x151
		if (link->next == (void *)tx) {
   3ded8:	6830      	ldr	r0, [r6, #0]
   3deda:	4284      	cmp	r4, r0
   3dedc:	f47f aebf 	bne.w	3dc5e <ull_conn_tx_ack+0x42>
			LL_ASSERT(link->next);
   3dee0:	4620      	mov	r0, r4
   3dee2:	e730      	b.n	3dd46 <ull_conn_tx_ack+0x12a>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   3dee4:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
   3dee8:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
   3deec:	f3c3 0382 	ubfx	r3, r3, #2, #3
   3def0:	f363 1206 	bfi	r2, r3, #4, #3
   3def4:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   3def8:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
   3defc:	f36f 0300 	bfc	r3, #0, #1
   3df00:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (link->next == (void *)tx) {
   3df04:	6830      	ldr	r0, [r6, #0]
   3df06:	4284      	cmp	r4, r0
   3df08:	f47f aea9 	bne.w	3dc5e <ull_conn_tx_ack+0x42>
   3df0c:	e71b      	b.n	3dd46 <ull_conn_tx_ack+0x12a>
		if (!conn->lll.role) {
   3df0e:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3df12:	2b00      	cmp	r3, #0
   3df14:	f6ff af36 	blt.w	3dd84 <ull_conn_tx_ack+0x168>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3df18:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3df1a:	2217      	movs	r2, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3df1c:	f043 0303 	orr.w	r3, r3, #3
   3df20:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3df22:	7162      	strb	r2, [r4, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3df24:	2303      	movs	r3, #3
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   3df26:	2208      	movs	r2, #8
   3df28:	f200 1179 	addw	r1, r0, #377	; 0x179
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3df2c:	71e3      	strb	r3, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   3df2e:	18a0      	adds	r0, r4, r2
   3df30:	f00d fe92 	bl	4bc58 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   3df34:	f8b7 3177 	ldrh.w	r3, [r7, #375]	; 0x177
   3df38:	8223      	strh	r3, [r4, #16]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   3df3a:	210c      	movs	r1, #12
   3df3c:	f104 0012 	add.w	r0, r4, #18
   3df40:	f002 fa34 	bl	403ac <lll_csrand_isr_get>
	    conn->tx_head &&
   3df44:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
	if (
   3df48:	2b00      	cmp	r3, #0
   3df4a:	f000 8083 	beq.w	3e054 <ull_conn_tx_ack+0x438>
	    !conn->llcp_enc.pause_tx &&
   3df4e:	f897 2176 	ldrb.w	r2, [r7, #374]	; 0x176
	    conn->tx_head &&
   3df52:	0791      	lsls	r1, r2, #30
   3df54:	d47e      	bmi.n	3e054 <ull_conn_tx_ack+0x438>
	    !conn->llcp_phy.pause_tx &&
   3df56:	f897 21cf 	ldrb.w	r2, [r7, #463]	; 0x1cf
   3df5a:	07d2      	lsls	r2, r2, #31
   3df5c:	d47a      	bmi.n	3e054 <ull_conn_tx_ack+0x438>
		if (conn->tx_head == conn->tx_data) {
   3df5e:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3df62:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3df66:	428b      	cmp	r3, r1
   3df68:	f000 809c 	beq.w	3e0a4 <ull_conn_tx_ack+0x488>
		} else if (!conn->tx_ctrl) {
   3df6c:	2a00      	cmp	r2, #0
   3df6e:	f000 80a6 	beq.w	3e0be <ull_conn_tx_ack+0x4a2>
	tx->next = conn->tx_ctrl_last->next;
   3df72:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
   3df76:	681a      	ldr	r2, [r3, #0]
   3df78:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   3df7a:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   3df7c:	6823      	ldr	r3, [r4, #0]
	conn->tx_ctrl_last = tx;
   3df7e:	f8c7 41dc 	str.w	r4, [r7, #476]	; 0x1dc
		if (link->next == (void *)tx) {
   3df82:	6832      	ldr	r2, [r6, #0]
	if (!tx->next) {
   3df84:	2b00      	cmp	r3, #0
   3df86:	f43f aecb 	beq.w	3dd20 <ull_conn_tx_ack+0x104>
		if (link->next == (void *)tx) {
   3df8a:	2a00      	cmp	r2, #0
   3df8c:	f43f aecd 	beq.w	3dd2a <ull_conn_tx_ack+0x10e>
}
   3df90:	b003      	add	sp, #12
   3df92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3df94:	00052f80 	.word	0x00052f80
   3df98:	00053150 	.word	0x00053150
   3df9c:	00052a70 	.word	0x00052a70
   3dfa0:	00053138 	.word	0x00053138
   3dfa4:	20003360 	.word	0x20003360
   3dfa8:	00053144 	.word	0x00053144
   3dfac:	200059a0 	.word	0x200059a0
		if (conn->lll.role) {
   3dfb0:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3dfb4:	2b00      	cmp	r3, #0
   3dfb6:	da9f      	bge.n	3def8 <ull_conn_tx_ack+0x2dc>
				conn->common.txn_lock = 0U;
   3dfb8:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   3dfbc:	4b47      	ldr	r3, [pc, #284]	; (3e0dc <ull_conn_tx_ack+0x4c0>)
				conn->common.txn_lock = 0U;
   3dfbe:	f36f 0241 	bfc	r2, #1, #1
   3dfc2:	f880 20e4 	strb.w	r2, [r0, #228]	; 0xe4
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   3dfc6:	e893 0003 	ldmia.w	r3, {r0, r1}
   3dfca:	ab02      	add	r3, sp, #8
   3dfcc:	e903 0003 	stmdb	r3, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   3dfd0:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
   3dfd4:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
   3dfd8:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   3dfdc:	f003 0307 	and.w	r3, r3, #7
   3dfe0:	3308      	adds	r3, #8
   3dfe2:	446b      	add	r3, sp
   3dfe4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   3dfe8:	f363 1206 	bfi	r2, r3, #4, #3
   3dfec:	f887 2060 	strb.w	r2, [r7, #96]	; 0x60
   3dff0:	e726      	b.n	3de40 <ull_conn_tx_ack+0x224>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   3dff2:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
		if (link->next == (void *)tx) {
   3dff6:	6830      	ldr	r0, [r6, #0]
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   3dff8:	f003 0207 	and.w	r2, r3, #7
   3dffc:	2a01      	cmp	r2, #1
   3dffe:	f47f ae2c 	bne.w	3dc5a <ull_conn_tx_ack+0x3e>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   3e002:	2202      	movs	r2, #2
   3e004:	f362 0302 	bfi	r3, r2, #0, #3
		if (link->next == (void *)tx) {
   3e008:	4284      	cmp	r4, r0
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   3e00a:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
		if (link->next == (void *)tx) {
   3e00e:	f47f ae26 	bne.w	3dc5e <ull_conn_tx_ack+0x42>
			LL_ASSERT(link->next);
   3e012:	4620      	mov	r0, r4
   3e014:	e697      	b.n	3dd46 <ull_conn_tx_ack+0x12a>
		if (conn->lll.role) {
   3e016:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3e01a:	2b00      	cmp	r3, #0
   3e01c:	f6bf aea7 	bge.w	3dd6e <ull_conn_tx_ack+0x152>
			conn->llcp_enc.pause_rx = 0U;
   3e020:	f890 3176 	ldrb.w	r3, [r0, #374]	; 0x176
   3e024:	f023 0303 	bic.w	r3, r3, #3
   3e028:	f880 3176 	strb.w	r3, [r0, #374]	; 0x176
			conn->procedure_expire = 0U;
   3e02c:	2300      	movs	r3, #0
   3e02e:	f8a0 30c8 	strh.w	r3, [r0, #200]	; 0xc8
			conn->llcp_ack = conn->llcp_req;
   3e032:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
   3e036:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
		if (link->next == (void *)tx) {
   3e03a:	6830      	ldr	r0, [r6, #0]
   3e03c:	4284      	cmp	r4, r0
   3e03e:	f47f ae0e 	bne.w	3dc5e <ull_conn_tx_ack+0x42>
			LL_ASSERT(link->next);
   3e042:	4620      	mov	r0, r4
   3e044:	e67f      	b.n	3dd46 <ull_conn_tx_ack+0x12a>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   3e046:	4b25      	ldr	r3, [pc, #148]	; (3e0dc <ull_conn_tx_ack+0x4c0>)
   3e048:	e893 0003 	ldmia.w	r3, {r0, r1}
   3e04c:	ab02      	add	r3, sp, #8
   3e04e:	e903 0003 	stmdb	r3, {r0, r1}
			if (pdu_tx->llctrl.opcode ==
   3e052:	e7bd      	b.n	3dfd0 <ull_conn_tx_ack+0x3b4>
		if (!conn->tx_ctrl) {
   3e054:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
   3e058:	2a00      	cmp	r2, #0
   3e05a:	d18a      	bne.n	3df72 <ull_conn_tx_ack+0x356>
			tx->next = conn->tx_head;
   3e05c:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   3e05e:	e9c7 4475 	strd	r4, r4, [r7, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3e062:	f8c7 41dc 	str.w	r4, [r7, #476]	; 0x1dc
   3e066:	e78c      	b.n	3df82 <ull_conn_tx_ack+0x366>
		if (link->next == (void *)tx) {
   3e068:	6830      	ldr	r0, [r6, #0]
					conn->llcp_length.state =
   3e06a:	2304      	movs	r3, #4
   3e06c:	f363 0202 	bfi	r2, r3, #0, #3
		if (link->next == (void *)tx) {
   3e070:	4284      	cmp	r4, r0
					conn->llcp_length.state =
   3e072:	f887 21be 	strb.w	r2, [r7, #446]	; 0x1be
		if (link->next == (void *)tx) {
   3e076:	f47f adf2 	bne.w	3dc5e <ull_conn_tx_ack+0x42>
			LL_ASSERT(link->next);
   3e07a:	4620      	mov	r0, r4
   3e07c:	e663      	b.n	3dd46 <ull_conn_tx_ack+0x12a>
		if (link->next == (void *)tx) {
   3e07e:	6830      	ldr	r0, [r6, #0]
				conn->llcp_length.tx_octets =
   3e080:	f8a7 31c2 	strh.w	r3, [r7, #450]	; 0x1c2
				conn->llcp_length.cache.tx_octets = 0;
   3e084:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3e086:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   3e08a:	f8a7 31c8 	strh.w	r3, [r7, #456]	; 0x1c8
		if (link->next == (void *)tx) {
   3e08e:	4284      	cmp	r4, r0
				conn->llcp_length.tx_time =
   3e090:	f8b7 31ca 	ldrh.w	r3, [r7, #458]	; 0x1ca
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3e094:	f887 21be 	strb.w	r2, [r7, #446]	; 0x1be
				conn->llcp_length.tx_time =
   3e098:	f8a7 31c6 	strh.w	r3, [r7, #454]	; 0x1c6
		if (link->next == (void *)tx) {
   3e09c:	f47f addf 	bne.w	3dc5e <ull_conn_tx_ack+0x42>
			LL_ASSERT(link->next);
   3e0a0:	4620      	mov	r0, r4
   3e0a2:	e650      	b.n	3dd46 <ull_conn_tx_ack+0x12a>
			conn->tx_data = conn->tx_data->next;
   3e0a4:	6819      	ldr	r1, [r3, #0]
   3e0a6:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3e0aa:	2a00      	cmp	r2, #0
   3e0ac:	f47f af61 	bne.w	3df72 <ull_conn_tx_ack+0x356>
			tx->next = conn->tx_head->next;
   3e0b0:	681a      	ldr	r2, [r3, #0]
   3e0b2:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   3e0b4:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   3e0b6:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   3e0b8:	e9c7 4476 	strd	r4, r4, [r7, #472]	; 0x1d8
   3e0bc:	e761      	b.n	3df82 <ull_conn_tx_ack+0x366>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3e0be:	791a      	ldrb	r2, [r3, #4]
   3e0c0:	f002 0203 	and.w	r2, r2, #3
   3e0c4:	2a03      	cmp	r2, #3
   3e0c6:	d002      	beq.n	3e0ce <ull_conn_tx_ack+0x4b2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3e0c8:	e9c7 3376 	strd	r3, r3, [r7, #472]	; 0x1d8
   3e0cc:	e751      	b.n	3df72 <ull_conn_tx_ack+0x356>
	    ((pdu_data_tx->llctrl.opcode !=
   3e0ce:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3e0d0:	2a03      	cmp	r2, #3
   3e0d2:	d0ed      	beq.n	3e0b0 <ull_conn_tx_ack+0x494>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3e0d4:	2a0a      	cmp	r2, #10
   3e0d6:	d1f7      	bne.n	3e0c8 <ull_conn_tx_ack+0x4ac>
   3e0d8:	e7ea      	b.n	3e0b0 <ull_conn_tx_ack+0x494>
   3e0da:	bf00      	nop
   3e0dc:	0005315c 	.word	0x0005315c

0003e0e0 <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
   3e0e0:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   3e0e4:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
   3e0e8:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
   3e0ea:	bf03      	ittte	eq
   3e0ec:	3301      	addeq	r3, #1
   3e0ee:	f880 30f0 	strbeq.w	r3, [r0, #240]	; 0xf0
	return 0;
   3e0f2:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
   3e0f4:	200c      	movne	r0, #12
}
   3e0f6:	4770      	bx	lr

0003e0f8 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   3e0f8:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   3e0fc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
	switch (lll->phy_tx_time) {
   3e100:	f3c2 1202 	ubfx	r2, r2, #4, #3
   3e104:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   3e106:	bf14      	ite	ne
   3e108:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   3e10a:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   3e10c:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	return max_tx_octets;
   3e110:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   3e112:	bf14      	ite	ne
   3e114:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   3e116:	3b0b      	subeq	r3, #11
   3e118:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   3e11a:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   3e11c:	bf44      	itt	mi
   3e11e:	3b04      	submi	r3, #4
   3e120:	b29b      	uxthmi	r3, r3
}
   3e122:	4298      	cmp	r0, r3
   3e124:	bf28      	it	cs
   3e126:	4618      	movcs	r0, r3
   3e128:	4770      	bx	lr
   3e12a:	bf00      	nop

0003e12c <ull_pdu_data_init>:
}
   3e12c:	4770      	bx	lr
   3e12e:	bf00      	nop

0003e130 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   3e130:	b510      	push	{r4, lr}
   3e132:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   3e134:	b930      	cbnz	r0, 3e144 <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
   3e136:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3e13a:	f36f 0382 	bfc	r3, #2, #1
   3e13e:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
}
   3e142:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   3e144:	4a09      	ldr	r2, [pc, #36]	; (3e16c <ticker_update_latency_cancel_op_cb+0x3c>)
   3e146:	490a      	ldr	r1, [pc, #40]	; (3e170 <ticker_update_latency_cancel_op_cb+0x40>)
   3e148:	480a      	ldr	r0, [pc, #40]	; (3e174 <ticker_update_latency_cancel_op_cb+0x44>)
   3e14a:	f240 23af 	movw	r3, #687	; 0x2af
   3e14e:	f00b fc54 	bl	499fa <printk>
   3e152:	4040      	eors	r0, r0
   3e154:	f380 8811 	msr	BASEPRI, r0
   3e158:	f04f 0003 	mov.w	r0, #3
   3e15c:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
   3e15e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3e162:	f36f 0382 	bfc	r3, #2, #1
   3e166:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
}
   3e16a:	bd10      	pop	{r4, pc}
   3e16c:	00053198 	.word	0x00053198
   3e170:	000531e0 	.word	0x000531e0
   3e174:	00052a70 	.word	0x00052a70

0003e178 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3e178:	b900      	cbnz	r0, 3e17c <ticker_op_cb+0x4>
   3e17a:	4770      	bx	lr
{
   3e17c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3e17e:	4a07      	ldr	r2, [pc, #28]	; (3e19c <ticker_op_cb+0x24>)
   3e180:	4907      	ldr	r1, [pc, #28]	; (3e1a0 <ticker_op_cb+0x28>)
   3e182:	4808      	ldr	r0, [pc, #32]	; (3e1a4 <ticker_op_cb+0x2c>)
   3e184:	f240 23a7 	movw	r3, #679	; 0x2a7
   3e188:	f00b fc37 	bl	499fa <printk>
   3e18c:	4040      	eors	r0, r0
   3e18e:	f380 8811 	msr	BASEPRI, r0
   3e192:	f04f 0003 	mov.w	r0, #3
   3e196:	df02      	svc	2
}
   3e198:	bd08      	pop	{r3, pc}
   3e19a:	bf00      	nop
   3e19c:	00053198 	.word	0x00053198
   3e1a0:	00052fe0 	.word	0x00052fe0
   3e1a4:	00052a70 	.word	0x00052a70

0003e1a8 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   3e1a8:	2801      	cmp	r0, #1
   3e1aa:	d000      	beq.n	3e1ae <ticker_op_stop_adv_cb+0x6>
   3e1ac:	4770      	bx	lr
{
   3e1ae:	b510      	push	{r4, lr}
   3e1b0:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   3e1b2:	f7f9 fd91 	bl	37cd8 <ull_disable_mark_get>
   3e1b6:	4284      	cmp	r4, r0
   3e1b8:	d00c      	beq.n	3e1d4 <ticker_op_stop_adv_cb+0x2c>
   3e1ba:	4a07      	ldr	r2, [pc, #28]	; (3e1d8 <ticker_op_stop_adv_cb+0x30>)
   3e1bc:	4907      	ldr	r1, [pc, #28]	; (3e1dc <ticker_op_stop_adv_cb+0x34>)
   3e1be:	4808      	ldr	r0, [pc, #32]	; (3e1e0 <ticker_op_stop_adv_cb+0x38>)
   3e1c0:	f240 239f 	movw	r3, #671	; 0x29f
   3e1c4:	f00b fc19 	bl	499fa <printk>
   3e1c8:	4040      	eors	r0, r0
   3e1ca:	f380 8811 	msr	BASEPRI, r0
   3e1ce:	f04f 0003 	mov.w	r0, #3
   3e1d2:	df02      	svc	2
}
   3e1d4:	bd10      	pop	{r4, pc}
   3e1d6:	bf00      	nop
   3e1d8:	00053198 	.word	0x00053198
   3e1dc:	000531f4 	.word	0x000531f4
   3e1e0:	00052a70 	.word	0x00052a70

0003e1e4 <ull_periph_ticker_cb>:
{
   3e1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e1e8:	9c07      	ldr	r4, [sp, #28]
   3e1ea:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3e1ee:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   3e1f0:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3e1f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3e1f6:	4299      	cmp	r1, r3
   3e1f8:	d026      	beq.n	3e248 <ull_periph_ticker_cb+0x64>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   3e1fa:	4606      	mov	r6, r0
   3e1fc:	4617      	mov	r7, r2
   3e1fe:	4601      	mov	r1, r0
   3e200:	462a      	mov	r2, r5
   3e202:	4620      	mov	r0, r4
   3e204:	f7fd fe7e 	bl	3bf04 <ull_conn_llcp>
		if (ret) {
   3e208:	b9f0      	cbnz	r0, 3e248 <ull_periph_ticker_cb+0x64>
	return ++hdr->ref;
   3e20a:	7823      	ldrb	r3, [r4, #0]
   3e20c:	3301      	adds	r3, #1
   3e20e:	b2db      	uxtb	r3, r3
   3e210:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   3e212:	b34b      	cbz	r3, 3e268 <ull_periph_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   3e214:	491b      	ldr	r1, [pc, #108]	; (3e284 <ull_periph_ticker_cb+0xa0>)
	mfy.param = &p;
   3e216:	4b1c      	ldr	r3, [pc, #112]	; (3e288 <ull_periph_ticker_cb+0xa4>)
	p.lazy = lazy;
   3e218:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   3e21a:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3e21e:	2200      	movs	r2, #0
	p.param = &conn->lll;
   3e220:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   3e222:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   3e226:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   3e22a:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3e22c:	2001      	movs	r0, #1
   3e22e:	4611      	mov	r1, r2
   3e230:	f7f5 fed4 	bl	33fdc <mayfly_enqueue>
	LL_ASSERT(!err);
   3e234:	b950      	cbnz	r0, 3e24c <ull_periph_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   3e236:	20ff      	movs	r0, #255	; 0xff
   3e238:	f7ff f8f2 	bl	3d420 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   3e23c:	4620      	mov	r0, r4
   3e23e:	21ff      	movs	r1, #255	; 0xff
}
   3e240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   3e244:	f7ff bb5c 	b.w	3d900 <ull_conn_tx_lll_enqueue>
}
   3e248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   3e24c:	4a0f      	ldr	r2, [pc, #60]	; (3e28c <ull_periph_ticker_cb+0xa8>)
   3e24e:	4910      	ldr	r1, [pc, #64]	; (3e290 <ull_periph_ticker_cb+0xac>)
   3e250:	4810      	ldr	r0, [pc, #64]	; (3e294 <ull_periph_ticker_cb+0xb0>)
   3e252:	f240 232a 	movw	r3, #554	; 0x22a
   3e256:	f00b fbd0 	bl	499fa <printk>
   3e25a:	4040      	eors	r0, r0
   3e25c:	f380 8811 	msr	BASEPRI, r0
   3e260:	f04f 0003 	mov.w	r0, #3
   3e264:	df02      	svc	2
   3e266:	e7e6      	b.n	3e236 <ull_periph_ticker_cb+0x52>
	LL_ASSERT(ref);
   3e268:	4a08      	ldr	r2, [pc, #32]	; (3e28c <ull_periph_ticker_cb+0xa8>)
   3e26a:	490b      	ldr	r1, [pc, #44]	; (3e298 <ull_periph_ticker_cb+0xb4>)
   3e26c:	4809      	ldr	r0, [pc, #36]	; (3e294 <ull_periph_ticker_cb+0xb0>)
   3e26e:	f240 231d 	movw	r3, #541	; 0x21d
   3e272:	f00b fbc2 	bl	499fa <printk>
   3e276:	4040      	eors	r0, r0
   3e278:	f380 8811 	msr	BASEPRI, r0
   3e27c:	f04f 0003 	mov.w	r0, #3
   3e280:	df02      	svc	2
   3e282:	e7c7      	b.n	3e214 <ull_periph_ticker_cb+0x30>
   3e284:	20005e3c 	.word	0x20005e3c
   3e288:	20000d5c 	.word	0x20000d5c
   3e28c:	00053198 	.word	0x00053198
   3e290:	00052c4c 	.word	0x00052c4c
   3e294:	00052a70 	.word	0x00052a70
   3e298:	00052ee4 	.word	0x00052ee4

0003e29c <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   3e29c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   3e29e:	b123      	cbz	r3, 3e2aa <ull_periph_latency_cancel+0xe>
   3e2a0:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   3e2a4:	f012 0304 	ands.w	r3, r2, #4
   3e2a8:	d000      	beq.n	3e2ac <ull_periph_latency_cancel+0x10>
   3e2aa:	4770      	bx	lr
{
   3e2ac:	b510      	push	{r4, lr}
		conn->periph.latency_cancel = 1U;
   3e2ae:	f042 0204 	orr.w	r2, r2, #4
{
   3e2b2:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   3e2b4:	4c11      	ldr	r4, [pc, #68]	; (3e2fc <ull_periph_latency_cancel+0x60>)
		conn->periph.latency_cancel = 1U;
   3e2b6:	f880 20e4 	strb.w	r2, [r0, #228]	; 0xe4
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   3e2ba:	3105      	adds	r1, #5
   3e2bc:	2201      	movs	r2, #1
   3e2be:	e9cd 3202 	strd	r3, r2, [sp, #8]
   3e2c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
   3e2c6:	e9cd 3300 	strd	r3, r3, [sp]
   3e2ca:	9006      	str	r0, [sp, #24]
   3e2cc:	b2ca      	uxtb	r2, r1
   3e2ce:	4618      	mov	r0, r3
   3e2d0:	2103      	movs	r1, #3
   3e2d2:	f7f7 f93d 	bl	35550 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   3e2d6:	f030 0302 	bics.w	r3, r0, #2
   3e2da:	d00c      	beq.n	3e2f6 <ull_periph_latency_cancel+0x5a>
   3e2dc:	4a08      	ldr	r2, [pc, #32]	; (3e300 <ull_periph_latency_cancel+0x64>)
   3e2de:	4909      	ldr	r1, [pc, #36]	; (3e304 <ull_periph_latency_cancel+0x68>)
   3e2e0:	4809      	ldr	r0, [pc, #36]	; (3e308 <ull_periph_latency_cancel+0x6c>)
   3e2e2:	f240 13e3 	movw	r3, #483	; 0x1e3
   3e2e6:	f00b fb88 	bl	499fa <printk>
   3e2ea:	4040      	eors	r0, r0
   3e2ec:	f380 8811 	msr	BASEPRI, r0
   3e2f0:	f04f 0003 	mov.w	r0, #3
   3e2f4:	df02      	svc	2
}
   3e2f6:	b008      	add	sp, #32
   3e2f8:	bd10      	pop	{r4, pc}
   3e2fa:	bf00      	nop
   3e2fc:	0003e131 	.word	0x0003e131
   3e300:	00053198 	.word	0x00053198
   3e304:	00053060 	.word	0x00053060
   3e308:	00052a70 	.word	0x00052a70

0003e30c <ll_start_enc_req_send>:
{
   3e30c:	b570      	push	{r4, r5, r6, lr}
   3e30e:	460d      	mov	r5, r1
   3e310:	4616      	mov	r6, r2
	conn = ll_connected_get(handle);
   3e312:	f7fb fe57 	bl	39fc4 <ll_connected_get>
	if (!conn) {
   3e316:	b3f8      	cbz	r0, 3e398 <ll_start_enc_req_send+0x8c>
	if (error_code) {
   3e318:	4604      	mov	r4, r0
   3e31a:	b95d      	cbnz	r5, 3e334 <ll_start_enc_req_send+0x28>
		if ((conn->llcp_req == conn->llcp_ack) ||
   3e31c:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
   3e320:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   3e324:	429a      	cmp	r2, r3
   3e326:	d003      	beq.n	3e330 <ll_start_enc_req_send+0x24>
   3e328:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
   3e32c:	2b03      	cmp	r3, #3
   3e32e:	d026      	beq.n	3e37e <ll_start_enc_req_send+0x72>
				return BT_HCI_ERR_CMD_DISALLOWED;
   3e330:	200c      	movs	r0, #12
}
   3e332:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   3e334:	f890 3176 	ldrb.w	r3, [r0, #374]	; 0x176
   3e338:	f013 0304 	ands.w	r3, r3, #4
   3e33c:	d113      	bne.n	3e366 <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   3e33e:	f890 10f0 	ldrb.w	r1, [r0, #240]	; 0xf0
   3e342:	f890 20f1 	ldrb.w	r2, [r0, #241]	; 0xf1
   3e346:	4291      	cmp	r1, r2
   3e348:	d0f2      	beq.n	3e330 <ll_start_enc_req_send+0x24>
   3e34a:	f890 20f2 	ldrb.w	r2, [r0, #242]	; 0xf2
   3e34e:	2a03      	cmp	r2, #3
   3e350:	d1ee      	bne.n	3e330 <ll_start_enc_req_send+0x24>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3e352:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
			conn->llcp.encryption.error_code = error_code;
   3e356:	f880 5101 	strb.w	r5, [r0, #257]	; 0x101
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3e35a:	f363 0201 	bfi	r2, r3, #0, #2
   3e35e:	f880 2100 	strb.w	r2, [r0, #256]	; 0x100
	return 0;
   3e362:	2000      	movs	r0, #0
}
   3e364:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   3e366:	f890 2150 	ldrb.w	r2, [r0, #336]	; 0x150
			if (conn->llcp_terminate.ack !=
   3e36a:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
   3e36e:	4293      	cmp	r3, r2
   3e370:	d1de      	bne.n	3e330 <ll_start_enc_req_send+0x24>
			conn->llcp_terminate.req++;
   3e372:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   3e374:	f880 5152 	strb.w	r5, [r0, #338]	; 0x152
			conn->llcp_terminate.req++;
   3e378:	f880 3150 	strb.w	r3, [r0, #336]	; 0x150
   3e37c:	e7f1      	b.n	3e362 <ll_start_enc_req_send+0x56>
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   3e37e:	2210      	movs	r2, #16
   3e380:	4631      	mov	r1, r6
   3e382:	f200 1081 	addw	r0, r0, #385	; 0x181
   3e386:	f00d fc67 	bl	4bc58 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3e38a:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
   3e38e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   3e392:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
   3e396:	e7e4      	b.n	3e362 <ll_start_enc_req_send+0x56>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3e398:	2002      	movs	r0, #2
}
   3e39a:	bd70      	pop	{r4, r5, r6, pc}

0003e39c <ticker_op_stop_scan_cb>:
}
   3e39c:	4770      	bx	lr
   3e39e:	bf00      	nop

0003e3a0 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3e3a0:	b900      	cbnz	r0, 3e3a4 <ticker_op_cb+0x4>
   3e3a2:	4770      	bx	lr
{
   3e3a4:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3e3a6:	4a07      	ldr	r2, [pc, #28]	; (3e3c4 <ticker_op_cb+0x24>)
   3e3a8:	4907      	ldr	r1, [pc, #28]	; (3e3c8 <ticker_op_cb+0x28>)
   3e3aa:	4808      	ldr	r0, [pc, #32]	; (3e3cc <ticker_op_cb+0x2c>)
   3e3ac:	f240 43ad 	movw	r3, #1197	; 0x4ad
   3e3b0:	f00b fb23 	bl	499fa <printk>
   3e3b4:	4040      	eors	r0, r0
   3e3b6:	f380 8811 	msr	BASEPRI, r0
   3e3ba:	f04f 0003 	mov.w	r0, #3
   3e3be:	df02      	svc	2
}
   3e3c0:	bd08      	pop	{r3, pc}
   3e3c2:	bf00      	nop
   3e3c4:	00053224 	.word	0x00053224
   3e3c8:	00052fe0 	.word	0x00052fe0
   3e3cc:	00052a70 	.word	0x00052a70

0003e3d0 <ull_central_ticker_cb>:
{
   3e3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e3d4:	9c07      	ldr	r4, [sp, #28]
   3e3d6:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3e3da:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   3e3dc:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3e3de:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3e3e2:	4299      	cmp	r1, r3
   3e3e4:	d02d      	beq.n	3e442 <ull_central_ticker_cb+0x72>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   3e3e6:	4606      	mov	r6, r0
   3e3e8:	4617      	mov	r7, r2
   3e3ea:	4601      	mov	r1, r0
   3e3ec:	462a      	mov	r2, r5
   3e3ee:	4620      	mov	r0, r4
   3e3f0:	f7fd fd88 	bl	3bf04 <ull_conn_llcp>
		if (ret) {
   3e3f4:	bb28      	cbnz	r0, 3e442 <ull_central_ticker_cb+0x72>
   3e3f6:	7823      	ldrb	r3, [r4, #0]
   3e3f8:	3301      	adds	r3, #1
   3e3fa:	b2db      	uxtb	r3, r3
   3e3fc:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   3e3fe:	b383      	cbz	r3, 3e462 <ull_central_ticker_cb+0x92>
	ull_conn_tx_demux(2);
   3e400:	2002      	movs	r0, #2
   3e402:	f7ff f80d 	bl	3d420 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 2);
   3e406:	2102      	movs	r1, #2
   3e408:	4620      	mov	r0, r4
   3e40a:	f7ff fa79 	bl	3d900 <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
   3e40e:	491c      	ldr	r1, [pc, #112]	; (3e480 <ull_central_ticker_cb+0xb0>)
	mfy.param = &p;
   3e410:	4b1c      	ldr	r3, [pc, #112]	; (3e484 <ull_central_ticker_cb+0xb4>)
	p.lazy = lazy;
   3e412:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   3e414:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3e418:	2200      	movs	r2, #0
	p.param = &conn->lll;
   3e41a:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   3e41c:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   3e420:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   3e424:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3e426:	2001      	movs	r0, #1
   3e428:	4611      	mov	r1, r2
   3e42a:	f7f5 fdd7 	bl	33fdc <mayfly_enqueue>
	LL_ASSERT(!err);
   3e42e:	b950      	cbnz	r0, 3e446 <ull_central_ticker_cb+0x76>
	ull_conn_tx_demux(UINT8_MAX);
   3e430:	20ff      	movs	r0, #255	; 0xff
   3e432:	f7fe fff5 	bl	3d420 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   3e436:	4620      	mov	r0, r4
   3e438:	21ff      	movs	r1, #255	; 0xff
}
   3e43a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   3e43e:	f7ff ba5f 	b.w	3d900 <ull_conn_tx_lll_enqueue>
}
   3e442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   3e446:	4a10      	ldr	r2, [pc, #64]	; (3e488 <ull_central_ticker_cb+0xb8>)
   3e448:	4910      	ldr	r1, [pc, #64]	; (3e48c <ull_central_ticker_cb+0xbc>)
   3e44a:	4811      	ldr	r0, [pc, #68]	; (3e490 <ull_central_ticker_cb+0xc0>)
   3e44c:	f240 434d 	movw	r3, #1101	; 0x44d
   3e450:	f00b fad3 	bl	499fa <printk>
   3e454:	4040      	eors	r0, r0
   3e456:	f380 8811 	msr	BASEPRI, r0
   3e45a:	f04f 0003 	mov.w	r0, #3
   3e45e:	df02      	svc	2
   3e460:	e7e6      	b.n	3e430 <ull_central_ticker_cb+0x60>
	LL_ASSERT(ref);
   3e462:	4a09      	ldr	r2, [pc, #36]	; (3e488 <ull_central_ticker_cb+0xb8>)
   3e464:	490b      	ldr	r1, [pc, #44]	; (3e494 <ull_central_ticker_cb+0xc4>)
   3e466:	480a      	ldr	r0, [pc, #40]	; (3e490 <ull_central_ticker_cb+0xc0>)
   3e468:	f240 433a 	movw	r3, #1082	; 0x43a
   3e46c:	f00b fac5 	bl	499fa <printk>
   3e470:	4040      	eors	r0, r0
   3e472:	f380 8811 	msr	BASEPRI, r0
   3e476:	f04f 0003 	mov.w	r0, #3
   3e47a:	df02      	svc	2
   3e47c:	e7c0      	b.n	3e400 <ull_central_ticker_cb+0x30>
   3e47e:	bf00      	nop
   3e480:	20005e54 	.word	0x20005e54
   3e484:	20000d6c 	.word	0x20000d6c
   3e488:	00053224 	.word	0x00053224
   3e48c:	00052c4c 	.word	0x00052c4c
   3e490:	00052a70 	.word	0x00052a70
   3e494:	00052ee4 	.word	0x00052ee4

0003e498 <ll_connect_disable>:
{
   3e498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e49c:	4606      	mov	r6, r0
	scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   3e49e:	2000      	movs	r0, #0
   3e4a0:	f7fa fe78 	bl	39194 <ull_scan_is_enabled_get>
	if (!scan) {
   3e4a4:	b368      	cbz	r0, 3e502 <ll_connect_disable+0x6a>
	conn_lll = scan_lll->conn;
   3e4a6:	6a03      	ldr	r3, [r0, #32]
	if (!conn_lll) {
   3e4a8:	4604      	mov	r4, r0
   3e4aa:	b353      	cbz	r3, 3e502 <ll_connect_disable+0x6a>
	conn_lll->central.cancelled = 1U;
   3e4ac:	f893 2020 	ldrb.w	r2, [r3, #32]
   3e4b0:	f042 0202 	orr.w	r2, r2, #2
   3e4b4:	f883 2020 	strb.w	r2, [r3, #32]
	conn_lll = scan_lll->conn;
   3e4b8:	6a07      	ldr	r7, [r0, #32]
	if (!conn_lll) {
   3e4ba:	b317      	cbz	r7, 3e502 <ll_connect_disable+0x6a>
		err = ull_scan_disable(SCAN_HANDLE_1M, scan);
   3e4bc:	4601      	mov	r1, r0
   3e4be:	2000      	movs	r0, #0
   3e4c0:	f7fa fdae 	bl	39020 <ull_scan_disable>
	if (!err) {
   3e4c4:	4605      	mov	r5, r0
   3e4c6:	b9c8      	cbnz	r0, 3e4fc <ll_connect_disable+0x64>
		conn = HDR_LLL2ULL(conn_lll);
   3e4c8:	683f      	ldr	r7, [r7, #0]
		link = node_rx->hdr.link;
   3e4ca:	f8d7 8154 	ldr.w	r8, [r7, #340]	; 0x154
		node_rx = (void *)&conn->llcp_terminate.node_rx;
   3e4ce:	f507 79aa 	add.w	r9, r7, #340	; 0x154
		LL_ASSERT(link);
   3e4d2:	f1b8 0f00 	cmp.w	r8, #0
   3e4d6:	d018      	beq.n	3e50a <ll_connect_disable+0x72>
		ll_rx_link_release(link);
   3e4d8:	4640      	mov	r0, r8
   3e4da:	f7f9 fb0d 	bl	37af8 <ll_rx_link_release>
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   3e4de:	2316      	movs	r3, #22
   3e4e0:	f887 3158 	strb.w	r3, [r7, #344]	; 0x158
		node_rx->hdr.handle = 0xffff;
   3e4e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3e4e8:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
		scan_lll = &scan->lll;
   3e4ec:	341c      	adds	r4, #28
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   3e4ee:	2302      	movs	r3, #2
		node_rx->hdr.rx_ftr.param = scan_lll;
   3e4f0:	f8c7 415c 	str.w	r4, [r7, #348]	; 0x15c
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   3e4f4:	f887 3170 	strb.w	r3, [r7, #368]	; 0x170
		*rx = node_rx;
   3e4f8:	f8c6 9000 	str.w	r9, [r6]
}
   3e4fc:	4628      	mov	r0, r5
   3e4fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   3e502:	250c      	movs	r5, #12
}
   3e504:	4628      	mov	r0, r5
   3e506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
   3e50a:	4a07      	ldr	r2, [pc, #28]	; (3e528 <ll_connect_disable+0x90>)
   3e50c:	4907      	ldr	r1, [pc, #28]	; (3e52c <ll_connect_disable+0x94>)
   3e50e:	4808      	ldr	r0, [pc, #32]	; (3e530 <ll_connect_disable+0x98>)
   3e510:	f240 235b 	movw	r3, #603	; 0x25b
   3e514:	f00b fa71 	bl	499fa <printk>
   3e518:	4040      	eors	r0, r0
   3e51a:	f380 8811 	msr	BASEPRI, r0
   3e51e:	f04f 0003 	mov.w	r0, #3
   3e522:	df02      	svc	2
   3e524:	e7d8      	b.n	3e4d8 <ll_connect_disable+0x40>
   3e526:	bf00      	nop
   3e528:	00053224 	.word	0x00053224
   3e52c:	00052fd8 	.word	0x00052fd8
   3e530:	00052a70 	.word	0x00052a70

0003e534 <ll_enc_req_send>:
{
   3e534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e538:	4607      	mov	r7, r0
   3e53a:	4688      	mov	r8, r1
   3e53c:	4691      	mov	r9, r2
   3e53e:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
   3e540:	f7fb fd40 	bl	39fc4 <ll_connected_get>
	if (!conn) {
   3e544:	2800      	cmp	r0, #0
   3e546:	d06a      	beq.n	3e61e <ll_enc_req_send+0xea>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
   3e548:	f890 2174 	ldrb.w	r2, [r0, #372]	; 0x174
   3e54c:	f890 3175 	ldrb.w	r3, [r0, #373]	; 0x175
   3e550:	429a      	cmp	r2, r3
   3e552:	4604      	mov	r4, r0
   3e554:	d142      	bne.n	3e5dc <ll_enc_req_send+0xa8>
   3e556:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
   3e55a:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   3e55e:	429a      	cmp	r2, r3
   3e560:	d003      	beq.n	3e56a <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
   3e562:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
   3e566:	2b03      	cmp	r3, #3
   3e568:	d038      	beq.n	3e5dc <ll_enc_req_send+0xa8>
	tx = ll_tx_mem_acquire();
   3e56a:	f7fb fd3f 	bl	39fec <ll_tx_mem_acquire>
	if (tx) {
   3e56e:	4605      	mov	r5, r0
   3e570:	b3a0      	cbz	r0, 3e5dc <ll_enc_req_send+0xa8>
		ull_pdu_data_init(pdu_data_tx);
   3e572:	3004      	adds	r0, #4
   3e574:	f7ff fdda 	bl	3e12c <ull_pdu_data_init>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
   3e578:	4631      	mov	r1, r6
   3e57a:	2210      	movs	r2, #16
   3e57c:	f204 1081 	addw	r0, r4, #385	; 0x181
   3e580:	f00d fb6a 	bl	4bc58 <memcpy>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
   3e584:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3e588:	f013 0318 	ands.w	r3, r3, #24
   3e58c:	d029      	beq.n	3e5e2 <ll_enc_req_send+0xae>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
   3e58e:	2b18      	cmp	r3, #24
   3e590:	d121      	bne.n	3e5d6 <ll_enc_req_send+0xa2>
			memcpy(&conn->llcp_enc.rand[0], rand_num,
   3e592:	2208      	movs	r2, #8
   3e594:	4641      	mov	r1, r8
   3e596:	f204 1079 	addw	r0, r4, #377	; 0x179
   3e59a:	f00d fb5d 	bl	4bc58 <memcpy>
			conn->llcp_enc.ediv[0] = ediv[0];
   3e59e:	f899 3000 	ldrb.w	r3, [r9]
   3e5a2:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
			conn->llcp_enc.ediv[1] = ediv[1];
   3e5a6:	f899 3001 	ldrb.w	r3, [r9, #1]
   3e5aa:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   3e5ae:	792b      	ldrb	r3, [r5, #4]
   3e5b0:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   3e5b4:	2201      	movs	r2, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   3e5b6:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
   3e5b8:	230a      	movs	r3, #10
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   3e5ba:	716a      	strb	r2, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   3e5bc:	71eb      	strb	r3, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
   3e5be:	4629      	mov	r1, r5
   3e5c0:	4638      	mov	r0, r7
   3e5c2:	f7fb fd1f 	bl	3a004 <ll_tx_mem_enqueue>
   3e5c6:	b930      	cbnz	r0, 3e5d6 <ll_enc_req_send+0xa2>
		conn->llcp_enc.req++;
   3e5c8:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
   3e5cc:	3301      	adds	r3, #1
   3e5ce:	f884 3174 	strb.w	r3, [r4, #372]	; 0x174
}
   3e5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
   3e5d6:	4628      	mov	r0, r5
   3e5d8:	f7fb fd0e 	bl	39ff8 <ll_tx_mem_release>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3e5dc:	200c      	movs	r0, #12
}
   3e5de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   3e5e2:	792b      	ldrb	r3, [r5, #4]
   3e5e4:	f043 0303 	orr.w	r3, r3, #3
   3e5e8:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
   3e5ea:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   3e5ec:	2208      	movs	r2, #8
			pdu_data_tx->len =
   3e5ee:	716b      	strb	r3, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   3e5f0:	2303      	movs	r3, #3
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   3e5f2:	4641      	mov	r1, r8
			pdu_data_tx->llctrl.opcode =
   3e5f4:	71eb      	strb	r3, [r5, #7]
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   3e5f6:	18a8      	adds	r0, r5, r2
   3e5f8:	f00d fb2e 	bl	4bc58 <memcpy>
			enc_req->ediv[0] = ediv[0];
   3e5fc:	f899 3000 	ldrb.w	r3, [r9]
   3e600:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
   3e602:	f899 3001 	ldrb.w	r3, [r9, #1]
   3e606:	746b      	strb	r3, [r5, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
   3e608:	2108      	movs	r1, #8
   3e60a:	f105 0012 	add.w	r0, r5, #18
   3e60e:	f001 febf 	bl	40390 <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
   3e612:	2104      	movs	r1, #4
   3e614:	f105 001a 	add.w	r0, r5, #26
   3e618:	f001 feba 	bl	40390 <lll_csrand_get>
   3e61c:	e7cf      	b.n	3e5be <ll_enc_req_send+0x8a>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3e61e:	2002      	movs	r0, #2
}
   3e620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003e624 <ull_central_reset>:
{
   3e624:	b530      	push	{r4, r5, lr}
   3e626:	b083      	sub	sp, #12
	err = ll_connect_disable(&rx);
   3e628:	a801      	add	r0, sp, #4
   3e62a:	f7ff ff35 	bl	3e498 <ll_connect_disable>
	if (!err) {
   3e62e:	4604      	mov	r4, r0
   3e630:	b110      	cbz	r0, 3e638 <ull_central_reset+0x14>
}
   3e632:	4620      	mov	r0, r4
   3e634:	b003      	add	sp, #12
   3e636:	bd30      	pop	{r4, r5, pc}
		scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   3e638:	f7fa fdac 	bl	39194 <ull_scan_is_enabled_get>
		LL_ASSERT(scan);
   3e63c:	4605      	mov	r5, r0
   3e63e:	b150      	cbz	r0, 3e656 <ull_central_reset+0x32>
		scan->is_enabled = 0U;
   3e640:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   3e644:	2200      	movs	r2, #0
		scan->is_enabled = 0U;
   3e646:	f36f 0300 	bfc	r3, #0, #1
}
   3e64a:	4620      	mov	r0, r4
		scan->is_enabled = 0U;
   3e64c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   3e650:	622a      	str	r2, [r5, #32]
}
   3e652:	b003      	add	sp, #12
   3e654:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(scan);
   3e656:	4a07      	ldr	r2, [pc, #28]	; (3e674 <ull_central_reset+0x50>)
   3e658:	4907      	ldr	r1, [pc, #28]	; (3e678 <ull_central_reset+0x54>)
   3e65a:	4808      	ldr	r0, [pc, #32]	; (3e67c <ull_central_reset+0x58>)
   3e65c:	f240 23e9 	movw	r3, #745	; 0x2e9
   3e660:	f00b f9cb 	bl	499fa <printk>
   3e664:	4040      	eors	r0, r0
   3e666:	f380 8811 	msr	BASEPRI, r0
   3e66a:	f04f 0003 	mov.w	r0, #3
   3e66e:	df02      	svc	2
   3e670:	e7e6      	b.n	3e640 <ull_central_reset+0x1c>
   3e672:	bf00      	nop
   3e674:	00053224 	.word	0x00053224
   3e678:	00053268 	.word	0x00053268
   3e67c:	00052a70 	.word	0x00052a70

0003e680 <ull_central_cleanup>:
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   3e680:	6883      	ldr	r3, [r0, #8]
{
   3e682:	b570      	push	{r4, r5, r6, lr}
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   3e684:	681d      	ldr	r5, [r3, #0]
	conn_lll = scan->lll.conn;
   3e686:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(conn_lll);
   3e688:	b31c      	cbz	r4, 3e6d2 <ull_central_cleanup+0x52>
	LL_ASSERT(!conn_lll->link_tx_free);
   3e68a:	6da3      	ldr	r3, [r4, #88]	; 0x58
	scan->lll.conn = NULL;
   3e68c:	2200      	movs	r2, #0
   3e68e:	622a      	str	r2, [r5, #32]
	LL_ASSERT(!conn_lll->link_tx_free);
   3e690:	b163      	cbz	r3, 3e6ac <ull_central_cleanup+0x2c>
   3e692:	4a1e      	ldr	r2, [pc, #120]	; (3e70c <ull_central_cleanup+0x8c>)
   3e694:	491e      	ldr	r1, [pc, #120]	; (3e710 <ull_central_cleanup+0x90>)
   3e696:	481f      	ldr	r0, [pc, #124]	; (3e714 <ull_central_cleanup+0x94>)
   3e698:	f240 3305 	movw	r3, #773	; 0x305
   3e69c:	f00b f9ad 	bl	499fa <printk>
   3e6a0:	4040      	eors	r0, r0
   3e6a2:	f380 8811 	msr	BASEPRI, r0
   3e6a6:	f04f 0003 	mov.w	r0, #3
   3e6aa:	df02      	svc	2
	link = memq_deinit(&conn_lll->memq_tx.head,
   3e6ac:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   3e6b0:	f104 0048 	add.w	r0, r4, #72	; 0x48
   3e6b4:	f7f5 fc12 	bl	33edc <memq_deinit>
	LL_ASSERT(link);
   3e6b8:	4606      	mov	r6, r0
   3e6ba:	b1c0      	cbz	r0, 3e6ee <ull_central_cleanup+0x6e>
	ll_conn_release(conn);
   3e6bc:	6820      	ldr	r0, [r4, #0]
	conn_lll->link_tx_free = link;
   3e6be:	65a6      	str	r6, [r4, #88]	; 0x58
	ll_conn_release(conn);
   3e6c0:	f7fb fc6a 	bl	39f98 <ll_conn_release>
	scan->is_enabled = 0U;
   3e6c4:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   3e6c8:	f36f 0300 	bfc	r3, #0, #1
   3e6cc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
}
   3e6d0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(conn_lll);
   3e6d2:	4a0e      	ldr	r2, [pc, #56]	; (3e70c <ull_central_cleanup+0x8c>)
   3e6d4:	4910      	ldr	r1, [pc, #64]	; (3e718 <ull_central_cleanup+0x98>)
   3e6d6:	480f      	ldr	r0, [pc, #60]	; (3e714 <ull_central_cleanup+0x94>)
   3e6d8:	f240 3302 	movw	r3, #770	; 0x302
   3e6dc:	f00b f98d 	bl	499fa <printk>
   3e6e0:	4040      	eors	r0, r0
   3e6e2:	f380 8811 	msr	BASEPRI, r0
   3e6e6:	f04f 0003 	mov.w	r0, #3
   3e6ea:	df02      	svc	2
   3e6ec:	e7cd      	b.n	3e68a <ull_central_cleanup+0xa>
	LL_ASSERT(link);
   3e6ee:	4a07      	ldr	r2, [pc, #28]	; (3e70c <ull_central_cleanup+0x8c>)
   3e6f0:	490a      	ldr	r1, [pc, #40]	; (3e71c <ull_central_cleanup+0x9c>)
   3e6f2:	4808      	ldr	r0, [pc, #32]	; (3e714 <ull_central_cleanup+0x94>)
   3e6f4:	f44f 7342 	mov.w	r3, #776	; 0x308
   3e6f8:	f00b f97f 	bl	499fa <printk>
   3e6fc:	4040      	eors	r0, r0
   3e6fe:	f380 8811 	msr	BASEPRI, r0
   3e702:	f04f 0003 	mov.w	r0, #3
   3e706:	df02      	svc	2
   3e708:	e7d8      	b.n	3e6bc <ull_central_cleanup+0x3c>
   3e70a:	bf00      	nop
   3e70c:	00053224 	.word	0x00053224
   3e710:	00052ccc 	.word	0x00052ccc
   3e714:	00052a70 	.word	0x00052a70
   3e718:	00052cc0 	.word	0x00052cc0
   3e71c:	00052fd8 	.word	0x00052fd8

0003e720 <ull_central_chm_update>:
{
   3e720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while (handle--) {
   3e722:	2505      	movs	r5, #5
		conn->llcp_type = LLCP_CHAN_MAP;
   3e724:	2702      	movs	r7, #2
	while (handle--) {
   3e726:	f64f 76ff 	movw	r6, #65535	; 0xffff
		conn = ll_connected_get(handle);
   3e72a:	4628      	mov	r0, r5
   3e72c:	f7fb fc4a 	bl	39fc4 <ll_connected_get>
		if (!conn || conn->lll.role) {
   3e730:	4604      	mov	r4, r0
   3e732:	b1c0      	cbz	r0, 3e766 <ull_central_chm_update+0x46>
   3e734:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3e738:	2b00      	cmp	r3, #0
   3e73a:	db14      	blt.n	3e766 <ull_central_chm_update+0x46>
		ret = ull_conn_llcp_req(conn);
   3e73c:	f7ff fcd0 	bl	3e0e0 <ull_conn_llcp_req>
   3e740:	4603      	mov	r3, r0
		ull_chan_map_get(conn->llcp.chan_map.chm);
   3e742:	f104 00f5 	add.w	r0, r4, #245	; 0xf5
		if (ret) {
   3e746:	b99b      	cbnz	r3, 3e770 <ull_central_chm_update+0x50>
		ull_chan_map_get(conn->llcp.chan_map.chm);
   3e748:	f000 f9d6 	bl	3eaf8 <ull_chan_map_get>
		conn->llcp.chan_map.initiate = 1U;
   3e74c:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_req++;
   3e750:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
		conn->llcp_type = LLCP_CHAN_MAP;
   3e754:	f884 70f2 	strb.w	r7, [r4, #242]	; 0xf2
		conn->llcp.chan_map.initiate = 1U;
   3e758:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_req++;
   3e75c:	3301      	adds	r3, #1
		conn->llcp.chan_map.initiate = 1U;
   3e75e:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_req++;
   3e762:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
	while (handle--) {
   3e766:	3d01      	subs	r5, #1
   3e768:	b2ad      	uxth	r5, r5
   3e76a:	42b5      	cmp	r5, r6
   3e76c:	d1dd      	bne.n	3e72a <ull_central_chm_update+0xa>
	return 0;
   3e76e:	2300      	movs	r3, #0
}
   3e770:	4618      	mov	r0, r3
   3e772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003e774 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	*((uint32_t volatile *)param) = status;
   3e774:	6008      	str	r0, [r1, #0]
}
   3e776:	4770      	bx	lr

0003e778 <win_offset_calc.constprop.0>:
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   3e778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e77c:	b091      	sub	sp, #68	; 0x44
   3e77e:	e9cd 1208 	strd	r1, r2, [sp, #32]
   3e782:	9305      	str	r3, [sp, #20]
	if (conn_curr->lll.role) {
   3e784:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   3e788:	6902      	ldr	r2, [r0, #16]
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   3e78a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   3e78c:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   3e790:	920a      	str	r2, [sp, #40]	; 0x28
	if (conn_curr->lll.role) {
   3e792:	2b00      	cmp	r3, #0
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   3e794:	4686      	mov	lr, r0
	if (conn_curr->lll.role) {
   3e796:	da02      	bge.n	3e79e <win_offset_calc.constprop.0+0x26>
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
   3e798:	4613      	mov	r3, r2
   3e79a:	3314      	adds	r3, #20
   3e79c:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   3e79e:	2600      	movs	r6, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   3e7a0:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   3e7a4:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   3e7a8:	f88d 9033 	strb.w	r9, [sp, #51]	; 0x33
		ticks_anchor_prev = offset_index = offset = 0U;
   3e7ac:	4634      	mov	r4, r6
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   3e7ae:	f8cd 9010 	str.w	r9, [sp, #16]
		ticks_anchor_prev = offset_index = offset = 0U;
   3e7b2:	46b0      	mov	r8, r6
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   3e7b4:	4635      	mov	r5, r6
   3e7b6:	46b3      	mov	fp, r6
   3e7b8:	f8cd e01c 	str.w	lr, [sp, #28]
   3e7bc:	e044      	b.n	3e848 <win_offset_calc.constprop.0+0xd0>
		if (ticker_id == 0xff) {
   3e7be:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   3e7c2:	28ff      	cmp	r0, #255	; 0xff
   3e7c4:	d064      	beq.n	3e890 <win_offset_calc.constprop.0+0x118>
		if ((ticker_id_prev != 0xff) &&
   3e7c6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   3e7ca:	d011      	beq.n	3e7f0 <win_offset_calc.constprop.0+0x78>
   3e7cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3e7ce:	4543      	cmp	r3, r8
   3e7d0:	d00e      	beq.n	3e7f0 <win_offset_calc.constprop.0+0x78>
			LL_ASSERT(0);
   3e7d2:	498d      	ldr	r1, [pc, #564]	; (3ea08 <win_offset_calc.constprop.0+0x290>)
   3e7d4:	4a8d      	ldr	r2, [pc, #564]	; (3ea0c <win_offset_calc.constprop.0+0x294>)
   3e7d6:	488e      	ldr	r0, [pc, #568]	; (3ea10 <win_offset_calc.constprop.0+0x298>)
   3e7d8:	f240 13c3 	movw	r3, #451	; 0x1c3
   3e7dc:	f00b f90d 	bl	499fa <printk>
   3e7e0:	4040      	eors	r0, r0
   3e7e2:	f380 8811 	msr	BASEPRI, r0
   3e7e6:	f04f 0003 	mov.w	r0, #3
   3e7ea:	df02      	svc	2
		if ((ticker_id < TICKER_ID_ADV_BASE) ||
   3e7ec:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   3e7f0:	1e83      	subs	r3, r0, #2
   3e7f2:	2b08      	cmp	r3, #8
   3e7f4:	f200 8082 	bhi.w	3e8fc <win_offset_calc.constprop.0+0x184>
		if (ticker_id < TICKER_ID_CONN_BASE) {
   3e7f8:	2804      	cmp	r0, #4
   3e7fa:	d97e      	bls.n	3e8fa <win_offset_calc.constprop.0+0x182>
		if (ticker_id_other != 0xff) {
   3e7fc:	9b04      	ldr	r3, [sp, #16]
   3e7fe:	2bff      	cmp	r3, #255	; 0xff
   3e800:	d177      	bne.n	3e8f2 <win_offset_calc.constprop.0+0x17a>
		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
   3e802:	3805      	subs	r0, #5
   3e804:	b280      	uxth	r0, r0
   3e806:	f7fb fbd5 	bl	39fb4 <ll_conn_get>
		if ((conn != conn_curr) && (is_select || !conn->lll.role)) {
   3e80a:	9b07      	ldr	r3, [sp, #28]
   3e80c:	4283      	cmp	r3, r0
   3e80e:	d075      	beq.n	3e8fc <win_offset_calc.constprop.0+0x184>
   3e810:	9a08      	ldr	r2, [sp, #32]
   3e812:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3e816:	2a00      	cmp	r2, #0
   3e818:	f040 8088 	bne.w	3e92c <win_offset_calc.constprop.0+0x1b4>
   3e81c:	2b00      	cmp	r3, #0
   3e81e:	db6d      	blt.n	3e8fc <win_offset_calc.constprop.0+0x184>
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3e820:	9b09      	ldr	r3, [sp, #36]	; 0x24
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   3e822:	6901      	ldr	r1, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   3e824:	9a0d      	ldr	r2, [sp, #52]	; 0x34
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3e826:	6818      	ldr	r0, [r3, #0]
			uint32_t ticks_slot_margin = 0U;
   3e828:	f8dd 8020 	ldr.w	r8, [sp, #32]
				while ((offset_index < *offset_max) &&
   3e82c:	783b      	ldrb	r3, [r7, #0]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3e82e:	4290      	cmp	r0, r2
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   3e830:	f101 0128 	add.w	r1, r1, #40	; 0x28
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3e834:	f0c0 808a 	bcc.w	3e94c <win_offset_calc.constprop.0+0x1d4>
	} while (offset_index < *offset_max);
   3e838:	42a3      	cmp	r3, r4
			ticks_anchor_prev = ticks_anchor;
   3e83a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			ticker_id_prev = ticker_id;
   3e83e:	f89d 9033 	ldrb.w	r9, [sp, #51]	; 0x33
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   3e842:	468b      	mov	fp, r1
			ticker_id_prev = ticker_id;
   3e844:	4615      	mov	r5, r2
	} while (offset_index < *offset_max);
   3e846:	d95c      	bls.n	3e902 <win_offset_calc.constprop.0+0x18a>
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   3e848:	ab0f      	add	r3, sp, #60	; 0x3c
   3e84a:	9302      	str	r3, [sp, #8]
   3e84c:	4b71      	ldr	r3, [pc, #452]	; (3ea14 <win_offset_calc.constprop.0+0x29c>)
   3e84e:	9301      	str	r3, [sp, #4]
   3e850:	ab0d      	add	r3, sp, #52	; 0x34
   3e852:	9300      	str	r3, [sp, #0]
		ret_cb = TICKER_STATUS_BUSY;
   3e854:	2102      	movs	r1, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   3e856:	ab0e      	add	r3, sp, #56	; 0x38
   3e858:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   3e85c:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   3e85e:	910f      	str	r1, [sp, #60]	; 0x3c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   3e860:	f7f6 fed0 	bl	35604 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   3e864:	2802      	cmp	r0, #2
   3e866:	d056      	beq.n	3e916 <win_offset_calc.constprop.0+0x19e>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   3e868:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		LL_ASSERT(success);
   3e86a:	2b00      	cmp	r3, #0
   3e86c:	d0a7      	beq.n	3e7be <win_offset_calc.constprop.0+0x46>
   3e86e:	4a67      	ldr	r2, [pc, #412]	; (3ea0c <win_offset_calc.constprop.0+0x294>)
   3e870:	4969      	ldr	r1, [pc, #420]	; (3ea18 <win_offset_calc.constprop.0+0x2a0>)
   3e872:	4867      	ldr	r0, [pc, #412]	; (3ea10 <win_offset_calc.constprop.0+0x298>)
   3e874:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
   3e878:	f00b f8bf 	bl	499fa <printk>
   3e87c:	4040      	eors	r0, r0
   3e87e:	f380 8811 	msr	BASEPRI, r0
   3e882:	f04f 0003 	mov.w	r0, #3
   3e886:	df02      	svc	2
		if (ticker_id == 0xff) {
   3e888:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   3e88c:	28ff      	cmp	r0, #255	; 0xff
   3e88e:	d19a      	bne.n	3e7c6 <win_offset_calc.constprop.0+0x4e>
   3e890:	46dc      	mov	ip, fp
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   3e892:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3e894:	6819      	ldr	r1, [r3, #0]
		while (offset_index < *offset_max) {
   3e896:	783b      	ldrb	r3, [r7, #0]
   3e898:	42a9      	cmp	r1, r5
   3e89a:	bf38      	it	cc
   3e89c:	4629      	movcc	r1, r5
   3e89e:	42a3      	cmp	r3, r4
   3e8a0:	d925      	bls.n	3e8ee <win_offset_calc.constprop.0+0x176>
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3e8a2:	485e      	ldr	r0, [pc, #376]	; (3ea1c <win_offset_calc.constprop.0+0x2a4>)
			if (offset >= conn_interval) {
   3e8a4:	9d05      	ldr	r5, [sp, #20]
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3e8a6:	eb0c 0301 	add.w	r3, ip, r1
   3e8aa:	fba0 2303 	umull	r2, r3, r0, r3
   3e8ae:	f3c3 124f 	ubfx	r2, r3, #5, #16
			if (offset >= conn_interval) {
   3e8b2:	4295      	cmp	r5, r2
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3e8b4:	ea4f 1353 	mov.w	r3, r3, lsr #5
			if (offset >= conn_interval) {
   3e8b8:	f240 8092 	bls.w	3e9e0 <win_offset_calc.constprop.0+0x268>
   3e8bc:	9e05      	ldr	r6, [sp, #20]
   3e8be:	e002      	b.n	3e8c6 <win_offset_calc.constprop.0+0x14e>
   3e8c0:	4296      	cmp	r6, r2
   3e8c2:	f240 808d 	bls.w	3e9e0 <win_offset_calc.constprop.0+0x268>
			sys_put_le16(offset, (win_offset + (sizeof(uint16_t) *
   3e8c6:	eb0a 0544 	add.w	r5, sl, r4, lsl #1
   3e8ca:	f80a 3014 	strb.w	r3, [sl, r4, lsl #1]
	dst[1] = val >> 8;
   3e8ce:	0a12      	lsrs	r2, r2, #8
   3e8d0:	706a      	strb	r2, [r5, #1]
		while (offset_index < *offset_max) {
   3e8d2:	783d      	ldrb	r5, [r7, #0]
			offset_index++;
   3e8d4:	3401      	adds	r4, #1
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(
   3e8d6:	3128      	adds	r1, #40	; 0x28
			offset_index++;
   3e8d8:	b2e4      	uxtb	r4, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3e8da:	eb0c 0301 	add.w	r3, ip, r1
   3e8de:	fba0 2303 	umull	r2, r3, r0, r3
		while (offset_index < *offset_max) {
   3e8e2:	42a5      	cmp	r5, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3e8e4:	f3c3 124f 	ubfx	r2, r3, #5, #16
   3e8e8:	ea4f 1353 	mov.w	r3, r3, lsr #5
		while (offset_index < *offset_max) {
   3e8ec:	d8e8      	bhi.n	3e8c0 <win_offset_calc.constprop.0+0x148>
		*ticks_to_offset_next = ticks_to_expire_prev;
   3e8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3e8f0:	6019      	str	r1, [r3, #0]
	*offset_max = offset_index;
   3e8f2:	703c      	strb	r4, [r7, #0]
}
   3e8f4:	b011      	add	sp, #68	; 0x44
   3e8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e8fa:	9004      	str	r0, [sp, #16]
   3e8fc:	783b      	ldrb	r3, [r7, #0]
	} while (offset_index < *offset_max);
   3e8fe:	42a3      	cmp	r3, r4
   3e900:	d8a2      	bhi.n	3e848 <win_offset_calc.constprop.0+0xd0>
	if (ticker_id == 0xff) {
   3e902:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   3e906:	2bff      	cmp	r3, #255	; 0xff
   3e908:	d1f3      	bne.n	3e8f2 <win_offset_calc.constprop.0+0x17a>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   3e90a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3e90c:	6819      	ldr	r1, [r3, #0]
   3e90e:	42a9      	cmp	r1, r5
   3e910:	bf38      	it	cc
   3e912:	4629      	movcc	r1, r5
		while (offset_index < *offset_max) {
   3e914:	e7eb      	b.n	3e8ee <win_offset_calc.constprop.0+0x176>
			while (ret_cb == TICKER_STATUS_BUSY) {
   3e916:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3e918:	2b02      	cmp	r3, #2
   3e91a:	d1a5      	bne.n	3e868 <win_offset_calc.constprop.0+0xf0>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
   3e91c:	2102      	movs	r1, #2
   3e91e:	2000      	movs	r0, #0
   3e920:	f7f6 feb6 	bl	35690 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   3e924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3e926:	2b02      	cmp	r3, #2
   3e928:	d0f8      	beq.n	3e91c <win_offset_calc.constprop.0+0x1a4>
   3e92a:	e79d      	b.n	3e868 <win_offset_calc.constprop.0+0xf0>
			if (conn->lll.role) {
   3e92c:	2b00      	cmp	r3, #0
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3e92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   3e930:	6901      	ldr	r1, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   3e932:	9a0d      	ldr	r2, [sp, #52]	; 0x34
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3e934:	6818      	ldr	r0, [r3, #0]
				while ((offset_index < *offset_max) &&
   3e936:	783b      	ldrb	r3, [r7, #0]
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   3e938:	bfa7      	ittee	ge
   3e93a:	3128      	addge	r1, #40	; 0x28
			uint32_t ticks_slot_margin = 0U;
   3e93c:	f04f 0800 	movge.w	r8, #0
				ticks_slot_abs_curr += ticks_slot_margin;
   3e940:	313c      	addlt	r1, #60	; 0x3c
				ticks_slot_margin =
   3e942:	f04f 0814 	movlt.w	r8, #20
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3e946:	4290      	cmp	r0, r2
   3e948:	f4bf af76 	bcs.w	3e838 <win_offset_calc.constprop.0+0xc0>
				if (ticks_to_expire_prev <
   3e94c:	4285      	cmp	r5, r0
   3e94e:	bf38      	it	cc
   3e950:	4605      	movcc	r5, r0
				while ((offset_index < *offset_max) &&
   3e952:	429c      	cmp	r4, r3
   3e954:	d235      	bcs.n	3e9c2 <win_offset_calc.constprop.0+0x24a>
					(ticks_slot_abs_prev + ticks_slot_abs +
   3e956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3e958:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
   3e95c:	445b      	add	r3, fp
   3e95e:	4498      	add	r8, r3
   3e960:	46b2      	mov	sl, r6
						  ticks_slot_abs_prev) /
   3e962:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 3ea1c <win_offset_calc.constprop.0+0x2a4>
   3e966:	9206      	str	r2, [sp, #24]
   3e968:	462e      	mov	r6, r5
   3e96a:	910b      	str	r1, [sp, #44]	; 0x2c
   3e96c:	4645      	mov	r5, r8
   3e96e:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
   3e972:	e013      	b.n	3e99c <win_offset_calc.constprop.0+0x224>
					if (offset >= conn_interval) {
   3e974:	9a05      	ldr	r2, [sp, #20]
					offset = (ticks_to_expire_prev +
   3e976:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
					if (offset >= conn_interval) {
   3e97a:	4592      	cmp	sl, r2
					ticks_to_expire_prev +=
   3e97c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3e980:	ea4f 201a 	mov.w	r0, sl, lsr #8
						  ticks_slot_abs_prev) /
   3e984:	ea4f 1353 	mov.w	r3, r3, lsr #5
					if (offset >= conn_interval) {
   3e988:	d22e      	bcs.n	3e9e8 <win_offset_calc.constprop.0+0x270>
	dst[0] = val;
   3e98a:	f808 3014 	strb.w	r3, [r8, r4, lsl #1]
	dst[1] = val >> 8;
   3e98e:	f88e 0001 	strb.w	r0, [lr, #1]
				while ((offset_index < *offset_max) &&
   3e992:	783b      	ldrb	r3, [r7, #0]
					offset_index++;
   3e994:	fa5f f48c 	uxtb.w	r4, ip
				while ((offset_index < *offset_max) &&
   3e998:	42a3      	cmp	r3, r4
   3e99a:	d919      	bls.n	3e9d0 <win_offset_calc.constprop.0+0x258>
				       (ticker_ticks_diff_get(
   3e99c:	9806      	ldr	r0, [sp, #24]
   3e99e:	4631      	mov	r1, r6
   3e9a0:	f7f6 fe90 	bl	356c4 <ticker_ticks_diff_get>
					offset = (ticks_to_expire_prev +
   3e9a4:	eb0b 0c06 	add.w	ip, fp, r6
				while ((offset_index < *offset_max) &&
   3e9a8:	42a8      	cmp	r0, r5
						  ticks_slot_abs_prev) /
   3e9aa:	fba9 c30c 	umull	ip, r3, r9, ip
					sys_put_le16(offset,
   3e9ae:	eb08 0e44 	add.w	lr, r8, r4, lsl #1
					offset_index++;
   3e9b2:	f104 0c01 	add.w	ip, r4, #1
				while ((offset_index < *offset_max) &&
   3e9b6:	d2dd      	bcs.n	3e974 <win_offset_calc.constprop.0+0x1fc>
   3e9b8:	9a06      	ldr	r2, [sp, #24]
   3e9ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   3e9bc:	4635      	mov	r5, r6
   3e9be:	4656      	mov	r6, sl
   3e9c0:	46c2      	mov	sl, r8
				*ticks_to_offset_next = ticks_to_expire_prev;
   3e9c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3e9c4:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   3e9c6:	9b05      	ldr	r3, [sp, #20]
   3e9c8:	42b3      	cmp	r3, r6
   3e9ca:	d918      	bls.n	3e9fe <win_offset_calc.constprop.0+0x286>
   3e9cc:	783b      	ldrb	r3, [r7, #0]
   3e9ce:	e733      	b.n	3e838 <win_offset_calc.constprop.0+0xc0>
				*ticks_to_offset_next = ticks_to_expire_prev;
   3e9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3e9d2:	9a06      	ldr	r2, [sp, #24]
   3e9d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   3e9d6:	4635      	mov	r5, r6
   3e9d8:	601d      	str	r5, [r3, #0]
   3e9da:	4656      	mov	r6, sl
   3e9dc:	46c2      	mov	sl, r8
   3e9de:	e7f5      	b.n	3e9cc <win_offset_calc.constprop.0+0x254>
		*ticks_to_offset_next = ticks_to_expire_prev;
   3e9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
				ticks_to_expire_prev = 0U;
   3e9e2:	2100      	movs	r1, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   3e9e4:	6019      	str	r1, [r3, #0]
   3e9e6:	e784      	b.n	3e8f2 <win_offset_calc.constprop.0+0x17a>
				*ticks_to_offset_next = ticks_to_expire_prev;
   3e9e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3e9ea:	2500      	movs	r5, #0
   3e9ec:	601d      	str	r5, [r3, #0]
	if (ticker_id == 0xff) {
   3e9ee:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
				*ticks_to_offset_next = ticks_to_expire_prev;
   3e9f2:	46dc      	mov	ip, fp
   3e9f4:	46c2      	mov	sl, r8
	if (ticker_id == 0xff) {
   3e9f6:	2bff      	cmp	r3, #255	; 0xff
   3e9f8:	f47f af7b 	bne.w	3e8f2 <win_offset_calc.constprop.0+0x17a>
   3e9fc:	e749      	b.n	3e892 <win_offset_calc.constprop.0+0x11a>
   3e9fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   3ea02:	46dc      	mov	ip, fp
   3ea04:	e7f7      	b.n	3e9f6 <win_offset_calc.constprop.0+0x27e>
   3ea06:	bf00      	nop
   3ea08:	00052ad0 	.word	0x00052ad0
   3ea0c:	00053270 	.word	0x00053270
   3ea10:	00052a70 	.word	0x00052a70
   3ea14:	0003e775 	.word	0x0003e775
   3ea18:	000532b4 	.word	0x000532b4
   3ea1c:	cccccccd 	.word	0xcccccccd

0003ea20 <ull_sched_mfy_after_mstr_offset_get>:
	struct lll_scan *lll = p->param;
   3ea20:	68c3      	ldr	r3, [r0, #12]
	after_mstr_offset_get(lll->conn->interval,
   3ea22:	6802      	ldr	r2, [r0, #0]
	conn = HDR_LLL2ULL(lll->conn);
   3ea24:	6859      	ldr	r1, [r3, #4]
	after_mstr_offset_get(lll->conn->interval,
   3ea26:	6858      	ldr	r0, [r3, #4]
			      (ticks_slot_overhead + conn->ull.ticks_slot),
   3ea28:	6809      	ldr	r1, [r1, #0]
	after_mstr_offset_get(lll->conn->interval,
   3ea2a:	89c0      	ldrh	r0, [r0, #14]
   3ea2c:	6909      	ldr	r1, [r1, #16]
   3ea2e:	3310      	adds	r3, #16
   3ea30:	f7e9 bd1a 	b.w	28468 <after_mstr_offset_get>

0003ea34 <ull_sched_mfy_win_offset_use>:
{
   3ea34:	b510      	push	{r4, lr}
   3ea36:	4604      	mov	r4, r0
	after_mstr_offset_get(conn->lll.interval,
   3ea38:	f8d0 20fc 	ldr.w	r2, [r0, #252]	; 0xfc
   3ea3c:	6901      	ldr	r1, [r0, #16]
   3ea3e:	f500 7392 	add.w	r3, r0, #292	; 0x124
   3ea42:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   3ea44:	f7e9 fd10 	bl	28468 <after_mstr_offset_get>
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   3ea48:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   3ea4c:	4908      	ldr	r1, [pc, #32]	; (3ea70 <ull_sched_mfy_win_offset_use+0x3c>)
	sys_put_le16(win_offset, (void *)conn->llcp.conn_upd.pdu_win_offset);
   3ea4e:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   3ea52:	fba1 1303 	umull	r1, r3, r1, r3
   3ea56:	0a9b      	lsrs	r3, r3, #10
   3ea58:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
   3ea5c:	7013      	strb	r3, [r2, #0]
	dst[1] = val >> 8;
   3ea5e:	7051      	strb	r1, [r2, #1]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   3ea60:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   3ea64:	2204      	movs	r2, #4
   3ea66:	f362 0302 	bfi	r3, r2, #0, #3
   3ea6a:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
}
   3ea6e:	bd10      	pop	{r4, pc}
   3ea70:	d1b71759 	.word	0xd1b71759

0003ea74 <ull_sched_mfy_free_win_offset_calc>:
{
   3ea74:	b510      	push	{r4, lr}
	if (conn->lll.role) {
   3ea76:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	uint32_t ticks_to_offset_default = 0U;
   3ea7a:	2100      	movs	r1, #0
{
   3ea7c:	b084      	sub	sp, #16
	if (conn->lll.role) {
   3ea7e:	428b      	cmp	r3, r1
		conn->llcp_conn_param.ticks_to_offset_next =
   3ea80:	bfbc      	itt	lt
   3ea82:	f8d0 30ec 	ldrlt.w	r3, [r0, #236]	; 0xec
   3ea86:	f8c0 31b8 	strlt.w	r3, [r0, #440]	; 0x1b8
	uint8_t offset_max = 6U;
   3ea8a:	f04f 0206 	mov.w	r2, #6
{
   3ea8e:	4604      	mov	r4, r0
	uint8_t offset_max = 6U;
   3ea90:	f88d 200b 	strb.w	r2, [sp, #11]
		ticks_to_offset_next =
   3ea94:	bfb8      	it	lt
   3ea96:	f500 72dc 	addlt.w	r2, r0, #440	; 0x1b8
	win_offset_calc(conn, 0, ticks_to_offset_next,
   3ea9a:	f8d0 01b0 	ldr.w	r0, [r0, #432]	; 0x1b0
	uint32_t ticks_to_offset_default = 0U;
   3ea9e:	9103      	str	r1, [sp, #12]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   3eaa0:	f10d 010b 	add.w	r1, sp, #11
   3eaa4:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
	ticks_to_offset_next = &ticks_to_offset_default;
   3eaa8:	bfa8      	it	ge
   3eaaa:	aa03      	addge	r2, sp, #12
	win_offset_calc(conn, 0, ticks_to_offset_next,
   3eaac:	e9cd 1000 	strd	r1, r0, [sp]
   3eab0:	2100      	movs	r1, #0
   3eab2:	4620      	mov	r0, r4
   3eab4:	f7ff fe60 	bl	3e778 <win_offset_calc.constprop.0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_RDY;
   3eab8:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3eabc:	2208      	movs	r2, #8
   3eabe:	f362 0303 	bfi	r3, r2, #0, #4
   3eac2:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
}
   3eac6:	b004      	add	sp, #16
   3eac8:	bd10      	pop	{r4, pc}
   3eaca:	bf00      	nop

0003eacc <ll_chm_update>:
static uint8_t count = 37U;

static void chan_map_set(uint8_t const *const chan_map);

uint8_t ll_chm_update(uint8_t const *const chm)
{
   3eacc:	b510      	push	{r4, lr}
	return count;
}

static void chan_map_set(uint8_t const *const chan_map)
{
	(void)memcpy(map, chan_map, sizeof(map));
   3eace:	4c08      	ldr	r4, [pc, #32]	; (3eaf0 <__kernel_ram_size>)
   3ead0:	2205      	movs	r2, #5
{
   3ead2:	4601      	mov	r1, r0
	(void)memcpy(map, chan_map, sizeof(map));
   3ead4:	4620      	mov	r0, r4
   3ead6:	f00d f8bf 	bl	4bc58 <memcpy>
	count = util_ones_count_get(map, sizeof(map));
   3eada:	2105      	movs	r1, #5
   3eadc:	4620      	mov	r0, r4
   3eade:	f7f5 fb83 	bl	341e8 <util_ones_count_get>
   3eae2:	4b04      	ldr	r3, [pc, #16]	; (3eaf4 <__kernel_ram_size+0x4>)
   3eae4:	7018      	strb	r0, [r3, #0]
	(void)ull_central_chm_update();
   3eae6:	f7ff fe1b 	bl	3e720 <ull_central_chm_update>
}
   3eaea:	2000      	movs	r0, #0
   3eaec:	bd10      	pop	{r4, pc}
   3eaee:	bf00      	nop
   3eaf0:	20000d7c 	.word	0x20000d7c
   3eaf4:	20000ffd 	.word	0x20000ffd

0003eaf8 <ull_chan_map_get>:
{
   3eaf8:	b508      	push	{r3, lr}
	(void)memcpy(chan_map, map, sizeof(map));
   3eafa:	4903      	ldr	r1, [pc, #12]	; (3eb08 <ull_chan_map_get+0x10>)
   3eafc:	2205      	movs	r2, #5
   3eafe:	f00d f8ab 	bl	4bc58 <memcpy>
	return count;
   3eb02:	4b02      	ldr	r3, [pc, #8]	; (3eb0c <ull_chan_map_get+0x14>)
}
   3eb04:	7818      	ldrb	r0, [r3, #0]
   3eb06:	bd08      	pop	{r3, pc}
   3eb08:	20000d7c 	.word	0x20000d7c
   3eb0c:	20000ffd 	.word	0x20000ffd

0003eb10 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   3eb10:	b530      	push	{r4, r5, lr}
   3eb12:	4604      	mov	r4, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   3eb14:	7800      	ldrb	r0, [r0, #0]
{
   3eb16:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   3eb1a:	fb02 1101 	mla	r1, r2, r1, r1
   3eb1e:	4a1f      	ldr	r2, [pc, #124]	; (3eb9c <lll_chan_sel_1+0x8c>)
   3eb20:	4401      	add	r1, r0
   3eb22:	fb82 0201 	smull	r0, r2, r2, r1
   3eb26:	440a      	add	r2, r1
   3eb28:	1152      	asrs	r2, r2, #5
   3eb2a:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   3eb2e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   3eb32:	1a8a      	subs	r2, r1, r2
   3eb34:	b2d0      	uxtb	r0, r2
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3eb36:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   3eb38:	7020      	strb	r0, [r4, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3eb3a:	5c59      	ldrb	r1, [r3, r1]
   3eb3c:	f002 0207 	and.w	r2, r2, #7
   3eb40:	fa41 f202 	asr.w	r2, r1, r2
   3eb44:	f012 0201 	ands.w	r2, r2, #1
   3eb48:	d11f      	bne.n	3eb8a <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   3eb4a:	fbb0 f4f5 	udiv	r4, r0, r5
   3eb4e:	fb05 0414 	mls	r4, r5, r4, r0
   3eb52:	b2e4      	uxtb	r4, r4
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   3eb54:	1e5d      	subs	r5, r3, #1
	chan_next = 0U;
   3eb56:	4610      	mov	r0, r2
   3eb58:	3304      	adds	r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   3eb5a:	f100 0e08 	add.w	lr, r0, #8
   3eb5e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   3eb62:	fa5f fe8e 	uxtb.w	lr, lr
		bite = *chan_map;
   3eb66:	4602      	mov	r2, r0
			if (bite & 0x01) {
   3eb68:	f011 0f01 	tst.w	r1, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   3eb6c:	f102 0c01 	add.w	ip, r2, #1
			bite >>= 1;
   3eb70:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   3eb74:	d002      	beq.n	3eb7c <lll_chan_sel_1+0x6c>
				if (chan_index == 0U) {
   3eb76:	b14c      	cbz	r4, 3eb8c <lll_chan_sel_1+0x7c>
				chan_index--;
   3eb78:	3c01      	subs	r4, #1
   3eb7a:	b2e4      	uxtb	r4, r4
			chan_next++;
   3eb7c:	fa5f f28c 	uxtb.w	r2, ip
		while (bit_count--) {
   3eb80:	4572      	cmp	r2, lr
   3eb82:	d1f1      	bne.n	3eb68 <lll_chan_sel_1+0x58>
			chan_next++;
   3eb84:	4610      	mov	r0, r2
	while (byte_count--) {
   3eb86:	429d      	cmp	r5, r3
   3eb88:	d1e7      	bne.n	3eb5a <lll_chan_sel_1+0x4a>
}
   3eb8a:	bd30      	pop	{r4, r5, pc}
		}

		if (bit_count < 8) {
   3eb8c:	1dc1      	adds	r1, r0, #7
   3eb8e:	1a89      	subs	r1, r1, r2
   3eb90:	b2c9      	uxtb	r1, r1
   3eb92:	2907      	cmp	r1, #7
   3eb94:	4610      	mov	r0, r2
   3eb96:	d8f6      	bhi.n	3eb86 <lll_chan_sel_1+0x76>
}
   3eb98:	bd30      	pop	{r4, r5, pc}
   3eb9a:	bf00      	nop
   3eb9c:	dd67c8a7 	.word	0xdd67c8a7

0003eba0 <lll_chan_id>:
	return aa_ms ^ aa_ls;
   3eba0:	8842      	ldrh	r2, [r0, #2]
   3eba2:	8800      	ldrh	r0, [r0, #0]
}
   3eba4:	4050      	eors	r0, r2
   3eba6:	4770      	bx	lr

0003eba8 <lll_chan_sel_2>:
{
   3eba8:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3ebaa:	4d34      	ldr	r5, [pc, #208]	; (3ec7c <lll_chan_sel_2+0xd4>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   3ebac:	4c34      	ldr	r4, [pc, #208]	; (3ec80 <lll_chan_sel_2+0xd8>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   3ebae:	4048      	eors	r0, r1
   3ebb0:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3ebb4:	0a06      	lsrs	r6, r0, #8
   3ebb6:	fa5f fe80 	uxtb.w	lr, r0
   3ebba:	eb0e 2e8e 	add.w	lr, lr, lr, lsl #10
   3ebbe:	eb06 2086 	add.w	r0, r6, r6, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   3ebc2:	ea04 1740 	and.w	r7, r4, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3ebc6:	ea05 0640 	and.w	r6, r5, r0, lsl #1
   3ebca:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   3ebce:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3ebd2:	433e      	orrs	r6, r7
   3ebd4:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   3ebd8:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   3ebdc:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   3ebe0:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   3ebe4:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   3ebe8:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   3ebea:	f3c0 4007 	ubfx	r0, r0, #16, #8
   3ebee:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   3ebf2:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   3ebf6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   3ebfa:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   3ebfc:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   3ec00:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   3ec02:	d1d7      	bne.n	3ebb4 <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   3ec04:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   3ec06:	481f      	ldr	r0, [pc, #124]	; (3ec84 <lll_chan_sel_2+0xdc>)
   3ec08:	fba0 4001 	umull	r4, r0, r0, r1
   3ec0c:	1a0c      	subs	r4, r1, r0
   3ec0e:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   3ec12:	0940      	lsrs	r0, r0, #5
   3ec14:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   3ec18:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   3ec1c:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3ec1e:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   3ec22:	f000 0507 	and.w	r5, r0, #7
   3ec26:	5d14      	ldrb	r4, [r2, r4]
   3ec28:	412c      	asrs	r4, r5
   3ec2a:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   3ec2c:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3ec2e:	d41c      	bmi.n	3ec6a <lll_chan_sel_2+0xc2>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   3ec30:	fb01 f303 	mul.w	r3, r1, r3
   3ec34:	1e56      	subs	r6, r2, #1
   3ec36:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   3ec3a:	3204      	adds	r2, #4
	chan_next = 0U;
   3ec3c:	4660      	mov	r0, ip
		bite = *chan_map;
   3ec3e:	f100 0508 	add.w	r5, r0, #8
   3ec42:	f816 cf01 	ldrb.w	ip, [r6, #1]!
		while (bit_count--) {
   3ec46:	b2ed      	uxtb	r5, r5
		bite = *chan_map;
   3ec48:	4601      	mov	r1, r0
			if (bite & 0x01) {
   3ec4a:	f01c 0f01 	tst.w	ip, #1
			chan_next++;
   3ec4e:	f101 0401 	add.w	r4, r1, #1
			bite >>= 1;
   3ec52:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
			if (bite & 0x01) {
   3ec56:	d002      	beq.n	3ec5e <lll_chan_sel_2+0xb6>
				if (chan_index == 0U) {
   3ec58:	b143      	cbz	r3, 3ec6c <lll_chan_sel_2+0xc4>
				chan_index--;
   3ec5a:	3b01      	subs	r3, #1
   3ec5c:	b2db      	uxtb	r3, r3
			chan_next++;
   3ec5e:	b2e1      	uxtb	r1, r4
		while (bit_count--) {
   3ec60:	42a9      	cmp	r1, r5
   3ec62:	d1f2      	bne.n	3ec4a <lll_chan_sel_2+0xa2>
			chan_next++;
   3ec64:	4608      	mov	r0, r1
	while (byte_count--) {
   3ec66:	4296      	cmp	r6, r2
   3ec68:	d1e9      	bne.n	3ec3e <lll_chan_sel_2+0x96>
}
   3ec6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (bit_count < 8) {
   3ec6c:	3007      	adds	r0, #7
   3ec6e:	1a40      	subs	r0, r0, r1
   3ec70:	b2c0      	uxtb	r0, r0
   3ec72:	2807      	cmp	r0, #7
   3ec74:	4608      	mov	r0, r1
   3ec76:	d8f6      	bhi.n	3ec66 <lll_chan_sel_2+0xbe>
}
   3ec78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3ec7a:	bf00      	nop
   3ec7c:	00022110 	.word	0x00022110
   3ec80:	00088440 	.word	0x00088440
   3ec84:	bacf914d 	.word	0xbacf914d

0003ec88 <rl_update>:
		}
	}
}

static void rl_update(void)
{
   3ec88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3ec8c:	4d18      	ldr	r5, [pc, #96]	; (3ecf0 <rl_update+0x68>)
   3ec8e:	4e19      	ldr	r6, [pc, #100]	; (3ecf4 <rl_update+0x6c>)
   3ec90:	2400      	movs	r4, #0
   3ec92:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   3ec96:	1eaf      	subs	r7, r5, #2
   3ec98:	f04f 0801 	mov.w	r8, #1
   3ec9c:	e006      	b.n	3ecac <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3ec9e:	3401      	adds	r4, #1
   3eca0:	2c08      	cmp	r4, #8
   3eca2:	f105 0506 	add.w	r5, r5, #6
   3eca6:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3ecaa:	d01f      	beq.n	3ecec <rl_update+0x64>
		if (rl[i].taken) {
   3ecac:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   3ecb0:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   3ecb4:	07da      	lsls	r2, r3, #31
   3ecb6:	d5f2      	bpl.n	3ec9e <rl_update+0x16>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3ecb8:	787a      	ldrb	r2, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   3ecba:	f897 c000 	ldrb.w	ip, [r7]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   3ecbe:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   3ecc2:	fa08 f104 	lsl.w	r1, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3ecc6:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   3ecc8:	ea4c 0c01 	orr.w	ip, ip, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3eccc:	4313      	orrs	r3, r2
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3ecce:	4631      	mov	r1, r6
   3ecd0:	4628      	mov	r0, r5
   3ecd2:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3ecd4:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   3ecd6:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3ecda:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3ecdc:	f00c ffbc 	bl	4bc58 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3ece0:	2c08      	cmp	r4, #8
   3ece2:	f105 0506 	add.w	r5, r5, #6
   3ece6:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3ecea:	d1df      	bne.n	3ecac <rl_update+0x24>
}
   3ecec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3ecf0:	20005e6a 	.word	0x20005e6a
   3ecf4:	20005f55 	.word	0x20005f55

0003ecf8 <fal_update>:
{
   3ecf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3ecfc:	4e21      	ldr	r6, [pc, #132]	; (3ed84 <fal_update+0x8c>)
   3ecfe:	4d22      	ldr	r5, [pc, #136]	; (3ed88 <fal_update+0x90>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   3ed00:	f8df 8088 	ldr.w	r8, [pc, #136]	; 3ed8c <fal_update+0x94>
   3ed04:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3ed90 <fal_update+0x98>
{
   3ed08:	2400      	movs	r4, #0
   3ed0a:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   3ed0e:	1eb7      	subs	r7, r6, #2
		if (!fal[i].taken) {
   3ed10:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   3ed14:	f04f 0c01 	mov.w	ip, #1
		if (!fal[i].taken) {
   3ed18:	f013 0f01 	tst.w	r3, #1
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3ed1c:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   3ed1e:	fa0c fc04 	lsl.w	ip, ip, r4
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3ed22:	4629      	mov	r1, r5
	for (i = 0U; i < FAL_SIZE; i++) {
   3ed24:	f106 0606 	add.w	r6, r6, #6
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3ed28:	f04f 0206 	mov.w	r2, #6
		if (!fal[i].taken) {
   3ed2c:	d023      	beq.n	3ed76 <fal_update+0x7e>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   3ed2e:	f898 e000 	ldrb.w	lr, [r8]
		j = fal[i].rl_idx;
   3ed32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   3ed36:	f1be 0f00 	cmp.w	lr, #0
   3ed3a:	d00a      	beq.n	3ed52 <fal_update+0x5a>
   3ed3c:	2b07      	cmp	r3, #7
   3ed3e:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   3ed42:	d806      	bhi.n	3ed52 <fal_update+0x5a>
   3ed44:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   3ed48:	f013 0f04 	tst.w	r3, #4
   3ed4c:	d001      	beq.n	3ed52 <fal_update+0x5a>
   3ed4e:	06db      	lsls	r3, r3, #27
   3ed50:	d511      	bpl.n	3ed76 <fal_update+0x7e>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   3ed52:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   3ed56:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   3ed5a:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   3ed5e:	ea4e 0e0c 	orr.w	lr, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3ed62:	f897 c001 	ldrb.w	ip, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   3ed66:	f887 e000 	strb.w	lr, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3ed6a:	40a3      	lsls	r3, r4
   3ed6c:	ea4c 0303 	orr.w	r3, ip, r3
   3ed70:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3ed72:	f00c ff71 	bl	4bc58 <memcpy>
	for (i = 0U; i < FAL_SIZE; i++) {
   3ed76:	3401      	adds	r4, #1
   3ed78:	2c08      	cmp	r4, #8
   3ed7a:	f105 0508 	add.w	r5, r5, #8
   3ed7e:	d1c7      	bne.n	3ed10 <fal_update+0x18>
}
   3ed80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3ed84:	200060d6 	.word	0x200060d6
   3ed88:	20006096 	.word	0x20006096
   3ed8c:	20007413 	.word	0x20007413
   3ed90:	20005f54 	.word	0x20005f54

0003ed94 <ll_fal_size_get>:
}
   3ed94:	2008      	movs	r0, #8
   3ed96:	4770      	bx	lr

0003ed98 <ll_fal_clear>:
{
   3ed98:	b538      	push	{r3, r4, r5, lr}
	if (ull_adv_filter_pol_get(0)) {
   3ed9a:	2000      	movs	r0, #0
   3ed9c:	f7f9 fffc 	bl	38d98 <ull_adv_filter_pol_get>
   3eda0:	b9f0      	cbnz	r0, 3ede0 <ll_fal_clear+0x48>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   3eda2:	f7fa fa2b 	bl	391fc <ull_scan_filter_pol_get>
   3eda6:	f010 0001 	ands.w	r0, r0, #1
   3edaa:	d119      	bne.n	3ede0 <ll_fal_clear+0x48>
   3edac:	4c0d      	ldr	r4, [pc, #52]	; (3ede4 <ll_fal_clear+0x4c>)
			rl[j].fal = 0U;
   3edae:	4d0e      	ldr	r5, [pc, #56]	; (3ede8 <ll_fal_clear+0x50>)
   3edb0:	1e62      	subs	r2, r4, #1
		uint8_t j = fal[i].rl_idx;
   3edb2:	f814 3030 	ldrb.w	r3, [r4, r0, lsl #3]
		if (j < ARRAY_SIZE(rl)) {
   3edb6:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
   3edb8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   3edbc:	d805      	bhi.n	3edca <ll_fal_clear+0x32>
			rl[j].fal = 0U;
   3edbe:	f815 3031 	ldrb.w	r3, [r5, r1, lsl #3]
   3edc2:	f36f 1345 	bfc	r3, #5, #1
   3edc6:	f805 3031 	strb.w	r3, [r5, r1, lsl #3]
		fal[i].taken = 0U;
   3edca:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   3edce:	f36f 0300 	bfc	r3, #0, #1
   3edd2:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   3edd6:	3001      	adds	r0, #1
   3edd8:	2808      	cmp	r0, #8
   3edda:	d1ea      	bne.n	3edb2 <ll_fal_clear+0x1a>
	return 0;
   3eddc:	2000      	movs	r0, #0
}
   3edde:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3ede0:	200c      	movs	r0, #12
}
   3ede2:	bd38      	pop	{r3, r4, r5, pc}
   3ede4:	20006095 	.word	0x20006095
   3ede8:	20005f54 	.word	0x20005f54

0003edec <ll_fal_add>:
{
   3edec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3edf0:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   3edf2:	2000      	movs	r0, #0
   3edf4:	f7f9 ffd0 	bl	38d98 <ull_adv_filter_pol_get>
   3edf8:	2800      	cmp	r0, #0
   3edfa:	d16b      	bne.n	3eed4 <ll_fal_add+0xe8>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   3edfc:	f7fa f9fe 	bl	391fc <ull_scan_filter_pol_get>
   3ee00:	f010 0501 	ands.w	r5, r0, #1
   3ee04:	d166      	bne.n	3eed4 <ll_fal_add+0xe8>
	if (addr->type == ADDR_TYPE_ANON) {
   3ee06:	f897 b000 	ldrb.w	fp, [r7]
   3ee0a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   3ee0e:	d064      	beq.n	3eeda <ll_fal_add+0xee>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   3ee10:	4e3b      	ldr	r6, [pc, #236]	; (3ef00 <ll_fal_add+0x114>)
   3ee12:	f107 0901 	add.w	r9, r7, #1
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3ee16:	f00b 0b01 	and.w	fp, fp, #1
		*free_idx = FILTER_IDX_NONE;
   3ee1a:	f04f 0aff 	mov.w	sl, #255	; 0xff
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   3ee1e:	462c      	mov	r4, r5
   3ee20:	f1a6 0802 	sub.w	r8, r6, #2
   3ee24:	e009      	b.n	3ee3a <ll_fal_add+0x4e>
		} else if (free_idx && !fal[i].taken &&
   3ee26:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   3ee2a:	d101      	bne.n	3ee30 <ll_fal_add+0x44>
			*free_idx = i;
   3ee2c:	fa5f fa84 	uxtb.w	sl, r4
	for (i = 0; i < FAL_SIZE; i++) {
   3ee30:	3401      	adds	r4, #1
   3ee32:	2c08      	cmp	r4, #8
   3ee34:	f106 0608 	add.w	r6, r6, #8
   3ee38:	d016      	beq.n	3ee68 <ll_fal_add+0x7c>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3ee3a:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   3ee3e:	07d9      	lsls	r1, r3, #31
   3ee40:	f3c3 0240 	ubfx	r2, r3, #1, #1
   3ee44:	d5ef      	bpl.n	3ee26 <ll_fal_add+0x3a>
   3ee46:	455a      	cmp	r2, fp
   3ee48:	d1f2      	bne.n	3ee30 <ll_fal_add+0x44>
   3ee4a:	2206      	movs	r2, #6
   3ee4c:	4630      	mov	r0, r6
   3ee4e:	4649      	mov	r1, r9
   3ee50:	f00c fef2 	bl	4bc38 <memcmp>
   3ee54:	b3d8      	cbz	r0, 3eece <ll_fal_add+0xe2>
		} else if (free_idx && !fal[i].taken &&
   3ee56:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   3ee5a:	07da      	lsls	r2, r3, #31
   3ee5c:	d5e3      	bpl.n	3ee26 <ll_fal_add+0x3a>
	for (i = 0; i < FAL_SIZE; i++) {
   3ee5e:	3401      	adds	r4, #1
   3ee60:	2c08      	cmp	r4, #8
   3ee62:	f106 0608 	add.w	r6, r6, #8
   3ee66:	d1e8      	bne.n	3ee3a <ll_fal_add+0x4e>
	} else if (j >= ARRAY_SIZE(fal)) {
   3ee68:	f1ba 0f07 	cmp.w	sl, #7
   3ee6c:	d838      	bhi.n	3eee0 <ll_fal_add+0xf4>
	fal[i].id_addr_type = id_addr->type & 0x1;
   3ee6e:	783a      	ldrb	r2, [r7, #0]
   3ee70:	f818 303a 	ldrb.w	r3, [r8, sl, lsl #3]
   3ee74:	f362 0341 	bfi	r3, r2, #1, #1
   3ee78:	f808 303a 	strb.w	r3, [r8, sl, lsl #3]
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   3ee7c:	2302      	movs	r3, #2
   3ee7e:	fb14 340a 	smlabb	r4, r4, sl, r3
	memcpy(dst, src, sizeof(*dst));
   3ee82:	eb08 0004 	add.w	r0, r8, r4
   3ee86:	2206      	movs	r2, #6
   3ee88:	4649      	mov	r1, r9
   3ee8a:	f00c fee5 	bl	4bc58 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3ee8e:	4c1d      	ldr	r4, [pc, #116]	; (3ef04 <ll_fal_add+0x118>)
   3ee90:	f897 b000 	ldrb.w	fp, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3ee94:	1e66      	subs	r6, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3ee96:	f00b 0b01 	and.w	fp, fp, #1
   3ee9a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   3ee9e:	00df      	lsls	r7, r3, #3
   3eea0:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   3eea4:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3eea8:	07db      	lsls	r3, r3, #31
   3eeaa:	d501      	bpl.n	3eeb0 <ll_fal_add+0xc4>
   3eeac:	455a      	cmp	r2, fp
   3eeae:	d01a      	beq.n	3eee6 <ll_fal_add+0xfa>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3eeb0:	3501      	adds	r5, #1
   3eeb2:	2d08      	cmp	r5, #8
   3eeb4:	f104 0428 	add.w	r4, r4, #40	; 0x28
   3eeb8:	d1ef      	bne.n	3ee9a <ll_fal_add+0xae>
		fal[i].rl_idx = FILTER_IDX_NONE;
   3eeba:	25ff      	movs	r5, #255	; 0xff
	fal[i].taken = 1U;
   3eebc:	f818 303a 	ldrb.w	r3, [r8, sl, lsl #3]
   3eec0:	eb08 02ca 	add.w	r2, r8, sl, lsl #3
   3eec4:	f043 0301 	orr.w	r3, r3, #1
   3eec8:	f808 303a 	strb.w	r3, [r8, sl, lsl #3]
   3eecc:	7055      	strb	r5, [r2, #1]
		fal[i].rl_idx = FILTER_IDX_NONE;
   3eece:	2000      	movs	r0, #0
}
   3eed0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3eed4:	200c      	movs	r0, #12
}
   3eed6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
   3eeda:	4628      	mov	r0, r5
}
   3eedc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3eee0:	2007      	movs	r0, #7
   3eee2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3eee6:	4620      	mov	r0, r4
   3eee8:	2206      	movs	r2, #6
   3eeea:	4649      	mov	r1, r9
   3eeec:	f00c fea4 	bl	4bc38 <memcmp>
   3eef0:	2800      	cmp	r0, #0
   3eef2:	d1dd      	bne.n	3eeb0 <ll_fal_add+0xc4>
		rl[j].fal = 1U;
   3eef4:	5df3      	ldrb	r3, [r6, r7]
   3eef6:	f043 0320 	orr.w	r3, r3, #32
   3eefa:	55f3      	strb	r3, [r6, r7]
   3eefc:	b2ed      	uxtb	r5, r5
   3eefe:	e7dd      	b.n	3eebc <ll_fal_add+0xd0>
   3ef00:	20006096 	.word	0x20006096
   3ef04:	20005f55 	.word	0x20005f55

0003ef08 <ll_fal_remove>:
{
   3ef08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ef0c:	4606      	mov	r6, r0
	if (ull_adv_filter_pol_get(0)) {
   3ef0e:	2000      	movs	r0, #0
   3ef10:	f7f9 ff42 	bl	38d98 <ull_adv_filter_pol_get>
   3ef14:	b9f0      	cbnz	r0, 3ef54 <ll_fal_remove+0x4c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   3ef16:	f7fa f971 	bl	391fc <ull_scan_filter_pol_get>
   3ef1a:	f010 0401 	ands.w	r4, r0, #1
   3ef1e:	d119      	bne.n	3ef54 <ll_fal_remove+0x4c>
	if (addr->type == ADDR_TYPE_ANON) {
   3ef20:	f896 8000 	ldrb.w	r8, [r6]
   3ef24:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   3ef28:	d035      	beq.n	3ef96 <ll_fal_remove+0x8e>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
   3ef2a:	4d1c      	ldr	r5, [pc, #112]	; (3ef9c <ll_fal_remove+0x94>)
   3ef2c:	3601      	adds	r6, #1
	for (i = 0; i < FAL_SIZE; i++) {
   3ef2e:	1eaf      	subs	r7, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3ef30:	f008 0801 	and.w	r8, r8, #1
   3ef34:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   3ef38:	f3c3 0240 	ubfx	r2, r3, #1, #1
   3ef3c:	07db      	lsls	r3, r3, #31
   3ef3e:	d501      	bpl.n	3ef44 <ll_fal_remove+0x3c>
   3ef40:	4542      	cmp	r2, r8
   3ef42:	d00a      	beq.n	3ef5a <ll_fal_remove+0x52>
	for (i = 0; i < FAL_SIZE; i++) {
   3ef44:	3401      	adds	r4, #1
   3ef46:	2c08      	cmp	r4, #8
   3ef48:	f105 0508 	add.w	r5, r5, #8
   3ef4c:	d1f2      	bne.n	3ef34 <ll_fal_remove+0x2c>
   3ef4e:	2002      	movs	r0, #2
}
   3ef50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3ef54:	200c      	movs	r0, #12
}
   3ef56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3ef5a:	2206      	movs	r2, #6
   3ef5c:	4628      	mov	r0, r5
   3ef5e:	4631      	mov	r1, r6
   3ef60:	f00c fe6a 	bl	4bc38 <memcmp>
   3ef64:	2800      	cmp	r0, #0
   3ef66:	d1ed      	bne.n	3ef44 <ll_fal_remove+0x3c>
		uint8_t j = fal[i].rl_idx;
   3ef68:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   3ef6c:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   3ef6e:	2b07      	cmp	r3, #7
   3ef70:	d808      	bhi.n	3ef84 <ll_fal_remove+0x7c>
			rl[j].fal = 0U;
   3ef72:	4a0b      	ldr	r2, [pc, #44]	; (3efa0 <ll_fal_remove+0x98>)
   3ef74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   3ef78:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   3ef7c:	f360 1145 	bfi	r1, r0, #5, #1
   3ef80:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		fal[i].taken = 0U;
   3ef84:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   3ef88:	f36f 0300 	bfc	r3, #0, #1
   3ef8c:	f807 3034 	strb.w	r3, [r7, r4, lsl #3]
		return 0;
   3ef90:	2000      	movs	r0, #0
}
   3ef92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   3ef96:	4620      	mov	r0, r4
}
   3ef98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ef9c:	20006096 	.word	0x20006096
   3efa0:	20005f54 	.word	0x20005f54

0003efa4 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   3efa4:	2807      	cmp	r0, #7
{
   3efa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3efaa:	4604      	mov	r4, r0
   3efac:	460e      	mov	r6, r1
   3efae:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   3efb0:	d817      	bhi.n	3efe2 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   3efb2:	4d1a      	ldr	r5, [pc, #104]	; (3f01c <ll_rl_id_addr_get+0x78>)
   3efb4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   3efb8:	00a7      	lsls	r7, r4, #2
   3efba:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   3efbe:	07db      	lsls	r3, r3, #31
   3efc0:	d51d      	bpl.n	3effe <ll_rl_id_addr_get+0x5a>
	*id_addr_type = rl[rl_idx].id_addr_type;
   3efc2:	4427      	add	r7, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   3efc4:	4640      	mov	r0, r8
	*id_addr_type = rl[rl_idx].id_addr_type;
   3efc6:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   3efca:	f3c3 1380 	ubfx	r3, r3, #6, #1
   3efce:	7033      	strb	r3, [r6, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   3efd0:	2328      	movs	r3, #40	; 0x28
   3efd2:	fb03 5104 	mla	r1, r3, r4, r5
   3efd6:	2206      	movs	r2, #6
}
   3efd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   3efdc:	3101      	adds	r1, #1
   3efde:	f00c be3b 	b.w	4bc58 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   3efe2:	4a0f      	ldr	r2, [pc, #60]	; (3f020 <ll_rl_id_addr_get+0x7c>)
   3efe4:	490f      	ldr	r1, [pc, #60]	; (3f024 <ll_rl_id_addr_get+0x80>)
   3efe6:	4810      	ldr	r0, [pc, #64]	; (3f028 <ll_rl_id_addr_get+0x84>)
   3efe8:	f44f 7389 	mov.w	r3, #274	; 0x112
   3efec:	f00a fd05 	bl	499fa <printk>
   3eff0:	4040      	eors	r0, r0
   3eff2:	f380 8811 	msr	BASEPRI, r0
   3eff6:	f04f 0003 	mov.w	r0, #3
   3effa:	df02      	svc	2
   3effc:	e7d9      	b.n	3efb2 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   3effe:	4a08      	ldr	r2, [pc, #32]	; (3f020 <ll_rl_id_addr_get+0x7c>)
   3f000:	490a      	ldr	r1, [pc, #40]	; (3f02c <ll_rl_id_addr_get+0x88>)
   3f002:	4809      	ldr	r0, [pc, #36]	; (3f028 <ll_rl_id_addr_get+0x84>)
   3f004:	f240 1313 	movw	r3, #275	; 0x113
   3f008:	f00a fcf7 	bl	499fa <printk>
   3f00c:	4040      	eors	r0, r0
   3f00e:	f380 8811 	msr	BASEPRI, r0
   3f012:	f04f 0003 	mov.w	r0, #3
   3f016:	df02      	svc	2
   3f018:	e7d3      	b.n	3efc2 <ll_rl_id_addr_get+0x1e>
   3f01a:	bf00      	nop
   3f01c:	20005f54 	.word	0x20005f54
   3f020:	000532bc 	.word	0x000532bc
   3f024:	00053300 	.word	0x00053300
   3f028:	00052a70 	.word	0x00052a70
   3f02c:	0005330c 	.word	0x0005330c

0003f030 <ll_rl_size_get>:
uint8_t ll_rl_size_get(void)
   3f030:	2008      	movs	r0, #8
   3f032:	4770      	bx	lr

0003f034 <ll_rl_clear>:
{
   3f034:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f036:	2000      	movs	r0, #0
   3f038:	f7f9 fea2 	bl	38d80 <ull_adv_is_enabled>
		? 0 : 1;
   3f03c:	b108      	cbz	r0, 3f042 <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f03e:	200c      	movs	r0, #12
}
   3f040:	bd10      	pop	{r4, pc}
   3f042:	4604      	mov	r4, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   3f044:	f7fa f8c0 	bl	391c8 <ull_scan_is_enabled>
		? 0 : 1;
   3f048:	2801      	cmp	r0, #1
   3f04a:	d8f8      	bhi.n	3f03e <ll_rl_clear+0xa>
		rl[i].taken = 0U;
   3f04c:	4b19      	ldr	r3, [pc, #100]	; (3f0b4 <ll_rl_clear+0x80>)
	peer_irk_count = 0U;
   3f04e:	481a      	ldr	r0, [pc, #104]	; (3f0b8 <ll_rl_clear+0x84>)
		rl[i].taken = 0U;
   3f050:	7819      	ldrb	r1, [r3, #0]
   3f052:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   3f056:	7004      	strb	r4, [r0, #0]
		rl[i].taken = 0U;
   3f058:	f364 0100 	bfi	r1, r4, #0, #1
   3f05c:	f364 0200 	bfi	r2, r4, #0, #1
   3f060:	7019      	strb	r1, [r3, #0]
   3f062:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   3f066:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   3f06a:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   3f06e:	f364 0100 	bfi	r1, r4, #0, #1
   3f072:	f364 0200 	bfi	r2, r4, #0, #1
   3f076:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   3f07a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   3f07e:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   3f082:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   3f086:	f364 0100 	bfi	r1, r4, #0, #1
   3f08a:	f364 0200 	bfi	r2, r4, #0, #1
   3f08e:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   3f092:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   3f096:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   3f09a:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   3f09e:	f364 0100 	bfi	r1, r4, #0, #1
   3f0a2:	f364 0200 	bfi	r2, r4, #0, #1
   3f0a6:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   3f0aa:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	return 0;
   3f0ae:	4620      	mov	r0, r4
}
   3f0b0:	bd10      	pop	{r4, pc}
   3f0b2:	bf00      	nop
   3f0b4:	20005f54 	.word	0x20005f54
   3f0b8:	20007412 	.word	0x20007412

0003f0bc <ll_rl_remove>:
{
   3f0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f0c0:	b083      	sub	sp, #12
   3f0c2:	4603      	mov	r3, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f0c4:	2000      	movs	r0, #0
{
   3f0c6:	9300      	str	r3, [sp, #0]
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f0c8:	f7f9 fe5a 	bl	38d80 <ull_adv_is_enabled>
		? 0 : 1;
   3f0cc:	b118      	cbz	r0, 3f0d6 <ll_rl_remove+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f0ce:	200c      	movs	r0, #12
}
   3f0d0:	b003      	add	sp, #12
   3f0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f0d6:	4604      	mov	r4, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   3f0d8:	f7fa f876 	bl	391c8 <ull_scan_is_enabled>
		? 0 : 1;
   3f0dc:	2801      	cmp	r0, #1
   3f0de:	d8f6      	bhi.n	3f0ce <ll_rl_remove+0x12>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3f0e0:	9b00      	ldr	r3, [sp, #0]
   3f0e2:	f8df 8138 	ldr.w	r8, [pc, #312]	; 3f21c <ll_rl_remove+0x160>
   3f0e6:	f813 bb01 	ldrb.w	fp, [r3], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f0ea:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f0ee:	f00b 0b01 	and.w	fp, fp, #1
   3f0f2:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   3f0f6:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   3f0fa:	f816 2035 	ldrb.w	r2, [r6, r5, lsl #3]
   3f0fe:	07d0      	lsls	r0, r2, #31
   3f100:	ea4f 0984 	mov.w	r9, r4, lsl #2
   3f104:	f3c2 1180 	ubfx	r1, r2, #6, #1
   3f108:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   3f10c:	d501      	bpl.n	3f112 <ll_rl_remove+0x56>
   3f10e:	4559      	cmp	r1, fp
   3f110:	d008      	beq.n	3f124 <ll_rl_remove+0x68>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f112:	3401      	adds	r4, #1
   3f114:	2c08      	cmp	r4, #8
   3f116:	f108 0828 	add.w	r8, r8, #40	; 0x28
   3f11a:	d1ea      	bne.n	3f0f2 <ll_rl_remove+0x36>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3f11c:	2002      	movs	r0, #2
}
   3f11e:	b003      	add	sp, #12
   3f120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f124:	4619      	mov	r1, r3
   3f126:	4640      	mov	r0, r8
   3f128:	2206      	movs	r2, #6
   3f12a:	9301      	str	r3, [sp, #4]
   3f12c:	f00c fd84 	bl	4bc38 <memcmp>
   3f130:	9b01      	ldr	r3, [sp, #4]
   3f132:	4607      	mov	r7, r0
   3f134:	2800      	cmp	r0, #0
   3f136:	d1ec      	bne.n	3f112 <ll_rl_remove+0x56>
		if (rl[i].pirk) {
   3f138:	f816 200a 	ldrb.w	r2, [r6, sl]
   3f13c:	0752      	lsls	r2, r2, #29
   3f13e:	d42e      	bmi.n	3f19e <ll_rl_remove+0xe2>
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
   3f140:	9a00      	ldr	r2, [sp, #0]
   3f142:	4d37      	ldr	r5, [pc, #220]	; (3f220 <ll_rl_remove+0x164>)
   3f144:	f892 a000 	ldrb.w	sl, [r2]
	for (i = 0; i < FAL_SIZE; i++) {
   3f148:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3f14c:	f00a 0a01 	and.w	sl, sl, #1
   3f150:	f818 2037 	ldrb.w	r2, [r8, r7, lsl #3]
   3f154:	f3c2 0140 	ubfx	r1, r2, #1, #1
   3f158:	07d2      	lsls	r2, r2, #31
   3f15a:	d501      	bpl.n	3f160 <ll_rl_remove+0xa4>
   3f15c:	4551      	cmp	r1, sl
   3f15e:	d00f      	beq.n	3f180 <ll_rl_remove+0xc4>
	for (i = 0; i < FAL_SIZE; i++) {
   3f160:	3701      	adds	r7, #1
   3f162:	2f08      	cmp	r7, #8
   3f164:	f105 0508 	add.w	r5, r5, #8
   3f168:	d1f2      	bne.n	3f150 <ll_rl_remove+0x94>
		rl[i].taken = 0U;
   3f16a:	44a1      	add	r9, r4
		return 0;
   3f16c:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   3f16e:	f816 3039 	ldrb.w	r3, [r6, r9, lsl #3]
   3f172:	f36f 0300 	bfc	r3, #0, #1
   3f176:	f806 3039 	strb.w	r3, [r6, r9, lsl #3]
}
   3f17a:	b003      	add	sp, #12
   3f17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3f180:	4619      	mov	r1, r3
   3f182:	2206      	movs	r2, #6
   3f184:	4628      	mov	r0, r5
   3f186:	9300      	str	r3, [sp, #0]
   3f188:	f00c fd56 	bl	4bc38 <memcmp>
   3f18c:	9b00      	ldr	r3, [sp, #0]
   3f18e:	2800      	cmp	r0, #0
   3f190:	d1e6      	bne.n	3f160 <ll_rl_remove+0xa4>
			fal[j].rl_idx = FILTER_IDX_NONE;
   3f192:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
   3f196:	23ff      	movs	r3, #255	; 0xff
   3f198:	f888 3001 	strb.w	r3, [r8, #1]
   3f19c:	e7e5      	b.n	3f16a <ll_rl_remove+0xae>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   3f19e:	f8df a084 	ldr.w	sl, [pc, #132]	; 3f224 <ll_rl_remove+0x168>
   3f1a2:	f89a 8000 	ldrb.w	r8, [sl]
   3f1a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   3f1aa:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
   3f1ae:	d002      	beq.n	3f1b6 <ll_rl_remove+0xfa>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   3f1b0:	7ded      	ldrb	r5, [r5, #23]
			if (pj && pi != pj) {
   3f1b2:	4545      	cmp	r5, r8
   3f1b4:	d102      	bne.n	3f1bc <ll_rl_remove+0x100>
			peer_irk_count--;
   3f1b6:	f88a 8000 	strb.w	r8, [sl]
   3f1ba:	e7c1      	b.n	3f140 <ll_rl_remove+0x84>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   3f1bc:	481a      	ldr	r0, [pc, #104]	; (3f228 <ll_rl_remove+0x16c>)
   3f1be:	2210      	movs	r2, #16
   3f1c0:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   3f1c4:	eb00 1005 	add.w	r0, r0, r5, lsl #4
   3f1c8:	f00c fd46 	bl	4bc58 <memcpy>
				     k < CONFIG_BT_CTLR_RL_SIZE;
   3f1cc:	4817      	ldr	r0, [pc, #92]	; (3f22c <ll_rl_remove+0x170>)
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   3f1ce:	9b01      	ldr	r3, [sp, #4]
   3f1d0:	463a      	mov	r2, r7
					if (rl[k].taken && rl[k].pirk &&
   3f1d2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   3f1d6:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
   3f1da:	f816 1031 	ldrb.w	r1, [r6, r1, lsl #3]
   3f1de:	f011 0f01 	tst.w	r1, #1
   3f1e2:	d004      	beq.n	3f1ee <ll_rl_remove+0x132>
   3f1e4:	0749      	lsls	r1, r1, #29
   3f1e6:	d502      	bpl.n	3f1ee <ll_rl_remove+0x132>
   3f1e8:	7dc1      	ldrb	r1, [r0, #23]
   3f1ea:	4541      	cmp	r1, r8
   3f1ec:	d00b      	beq.n	3f206 <ll_rl_remove+0x14a>
				     k < CONFIG_BT_CTLR_RL_SIZE;
   3f1ee:	3201      	adds	r2, #1
   3f1f0:	2a08      	cmp	r2, #8
   3f1f2:	f100 0028 	add.w	r0, r0, #40	; 0x28
   3f1f6:	d1ec      	bne.n	3f1d2 <ll_rl_remove+0x116>
			peer_irk_count--;
   3f1f8:	f89a 8000 	ldrb.w	r8, [sl]
   3f1fc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   3f200:	fa5f f888 	uxtb.w	r8, r8
   3f204:	e7d7      	b.n	3f1b6 <ll_rl_remove+0xfa>
   3f206:	f89a 8000 	ldrb.w	r8, [sl]
						peer_irk_rl_ids[pi] = k;
   3f20a:	4909      	ldr	r1, [pc, #36]	; (3f230 <ll_rl_remove+0x174>)
						rl[k].pirk_idx = pi;
   3f20c:	f88c 5017 	strb.w	r5, [ip, #23]
			peer_irk_count--;
   3f210:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
						peer_irk_rl_ids[pi] = k;
   3f214:	554a      	strb	r2, [r1, r5]
			peer_irk_count--;
   3f216:	fa5f f888 	uxtb.w	r8, r8
						break;
   3f21a:	e7cc      	b.n	3f1b6 <ll_rl_remove+0xfa>
   3f21c:	20005f55 	.word	0x20005f55
   3f220:	20006096 	.word	0x20006096
   3f224:	20007412 	.word	0x20007412
   3f228:	20005ed4 	.word	0x20005ed4
   3f22c:	20005f54 	.word	0x20005f54
   3f230:	20005ecc 	.word	0x20005ecc

0003f234 <ll_rl_crpa_set>:
{
   3f234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3f238:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   3f23a:	795b      	ldrb	r3, [r3, #5]
   3f23c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3f240:	2b40      	cmp	r3, #64	; 0x40
   3f242:	d001      	beq.n	3f248 <ll_rl_crpa_set+0x14>
}
   3f244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (id_addr) {
   3f248:	460f      	mov	r7, r1
   3f24a:	b1f1      	cbz	r1, 3f28a <ll_rl_crpa_set+0x56>
   3f24c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3f2ec <ll_rl_crpa_set+0xb8>
   3f250:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f252:	f000 0601 	and.w	r6, r0, #1
   3f256:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   3f25a:	e004      	b.n	3f266 <ll_rl_crpa_set+0x32>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f25c:	3401      	adds	r4, #1
   3f25e:	2c08      	cmp	r4, #8
   3f260:	f109 0928 	add.w	r9, r9, #40	; 0x28
   3f264:	d0ee      	beq.n	3f244 <ll_rl_crpa_set+0x10>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f266:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   3f26a:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   3f26e:	f3c2 1380 	ubfx	r3, r2, #6, #1
   3f272:	07d2      	lsls	r2, r2, #31
   3f274:	d5f2      	bpl.n	3f25c <ll_rl_crpa_set+0x28>
   3f276:	42b3      	cmp	r3, r6
   3f278:	d1f0      	bne.n	3f25c <ll_rl_crpa_set+0x28>
   3f27a:	2206      	movs	r2, #6
   3f27c:	4648      	mov	r0, r9
   3f27e:	4639      	mov	r1, r7
   3f280:	f00c fcda 	bl	4bc38 <memcmp>
   3f284:	2800      	cmp	r0, #0
   3f286:	d1e9      	bne.n	3f25c <ll_rl_crpa_set+0x28>
   3f288:	b2e2      	uxtb	r2, r4
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   3f28a:	2a07      	cmp	r2, #7
   3f28c:	d8da      	bhi.n	3f244 <ll_rl_crpa_set+0x10>
   3f28e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 3f2f0 <ll_rl_crpa_set+0xbc>
   3f292:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   3f296:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   3f29a:	07db      	lsls	r3, r3, #31
   3f29c:	d5d2      	bpl.n	3f244 <ll_rl_crpa_set+0x10>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   3f29e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   3f2a2:	00d4      	lsls	r4, r2, #3
   3f2a4:	f104 0718 	add.w	r7, r4, #24
   3f2a8:	4447      	add	r7, r8
   3f2aa:	4629      	mov	r1, r5
   3f2ac:	2206      	movs	r2, #6
   3f2ae:	4638      	mov	r0, r7
   3f2b0:	f00c fcd2 	bl	4bc58 <memcpy>
   3f2b4:	2500      	movs	r5, #0
   3f2b6:	e001      	b.n	3f2bc <ll_rl_crpa_set+0x88>
	defined(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)
static void conn_rpa_update(uint8_t rl_idx)
{
	uint16_t handle;

	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3f2b8:	2d06      	cmp	r5, #6
   3f2ba:	d0c3      	beq.n	3f244 <ll_rl_crpa_set+0x10>
		struct ll_conn *conn = ll_connected_get(handle);
   3f2bc:	b2a8      	uxth	r0, r5
   3f2be:	f7fa fe81 	bl	39fc4 <ll_connected_get>

		/* The RPA of the connection matches the RPA that was just
		 * resolved
		 */
		if (conn && !memcmp(conn->peer_id_addr, rl[rl_idx].curr_rpa.val,
   3f2c2:	4603      	mov	r3, r0
   3f2c4:	f100 06dd 	add.w	r6, r0, #221	; 0xdd
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3f2c8:	3501      	adds	r5, #1
		if (conn && !memcmp(conn->peer_id_addr, rl[rl_idx].curr_rpa.val,
   3f2ca:	2206      	movs	r2, #6
   3f2cc:	4639      	mov	r1, r7
   3f2ce:	4630      	mov	r0, r6
   3f2d0:	2b00      	cmp	r3, #0
   3f2d2:	d0f1      	beq.n	3f2b8 <ll_rl_crpa_set+0x84>
   3f2d4:	f00c fcb0 	bl	4bc38 <memcmp>
   3f2d8:	2800      	cmp	r0, #0
   3f2da:	d1ed      	bne.n	3f2b8 <ll_rl_crpa_set+0x84>
				    BDADDR_SIZE)) {
			(void)memcpy(conn->peer_id_addr, rl[rl_idx].id_addr.val,
   3f2dc:	1c61      	adds	r1, r4, #1
   3f2de:	4441      	add	r1, r8
   3f2e0:	4630      	mov	r0, r6
   3f2e2:	2206      	movs	r2, #6
}
   3f2e4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			(void)memcpy(conn->peer_id_addr, rl[rl_idx].id_addr.val,
   3f2e8:	f00c bcb6 	b.w	4bc58 <memcpy>
   3f2ec:	20005f55 	.word	0x20005f55
   3f2f0:	20005f54 	.word	0x20005f54

0003f2f4 <ll_rl_crpa_get>:
{
   3f2f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3f2f8:	4682      	mov	sl, r0
   3f2fa:	4e1a      	ldr	r6, [pc, #104]	; (3f364 <ll_rl_crpa_get+0x70>)
   3f2fc:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   3f300:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3f302:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f304:	f008 0801 	and.w	r8, r8, #1
   3f308:	1e77      	subs	r7, r6, #1
   3f30a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3f30e:	00d5      	lsls	r5, r2, #3
   3f310:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   3f314:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3f318:	07db      	lsls	r3, r3, #31
   3f31a:	f104 0401 	add.w	r4, r4, #1
   3f31e:	d501      	bpl.n	3f324 <ll_rl_crpa_get+0x30>
   3f320:	4542      	cmp	r2, r8
   3f322:	d006      	beq.n	3f332 <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f324:	2c08      	cmp	r4, #8
   3f326:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3f32a:	d1ee      	bne.n	3f30a <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3f32c:	2002      	movs	r0, #2
}
   3f32e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f332:	4630      	mov	r0, r6
   3f334:	2206      	movs	r2, #6
   3f336:	4651      	mov	r1, sl
   3f338:	f00c fc7e 	bl	4bc38 <memcmp>
   3f33c:	4683      	mov	fp, r0
   3f33e:	2800      	cmp	r0, #0
   3f340:	d1f0      	bne.n	3f324 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   3f342:	f105 0218 	add.w	r2, r5, #24
   3f346:	4417      	add	r7, r2
   3f348:	2106      	movs	r1, #6
   3f34a:	4638      	mov	r0, r7
   3f34c:	f7f4 fdb6 	bl	33ebc <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   3f350:	2800      	cmp	r0, #0
   3f352:	d0eb      	beq.n	3f32c <ll_rl_crpa_get+0x38>
   3f354:	2206      	movs	r2, #6
   3f356:	4639      	mov	r1, r7
   3f358:	4648      	mov	r0, r9
   3f35a:	f00c fc7d 	bl	4bc58 <memcpy>
		return 0;
   3f35e:	4658      	mov	r0, fp
}
   3f360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f364:	20005f55 	.word	0x20005f55

0003f368 <ll_rl_lrpa_get>:
{
   3f368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3f36c:	4682      	mov	sl, r0
   3f36e:	4e16      	ldr	r6, [pc, #88]	; (3f3c8 <ll_rl_lrpa_get+0x60>)
   3f370:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   3f374:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3f376:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f378:	f008 0801 	and.w	r8, r8, #1
   3f37c:	1e77      	subs	r7, r6, #1
   3f37e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3f382:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   3f386:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   3f38a:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3f38e:	07db      	lsls	r3, r3, #31
   3f390:	f104 0401 	add.w	r4, r4, #1
   3f394:	d501      	bpl.n	3f39a <ll_rl_lrpa_get+0x32>
   3f396:	4542      	cmp	r2, r8
   3f398:	d006      	beq.n	3f3a8 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f39a:	2c08      	cmp	r4, #8
   3f39c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3f3a0:	d1ed      	bne.n	3f37e <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3f3a2:	2002      	movs	r0, #2
}
   3f3a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f3a8:	4630      	mov	r0, r6
   3f3aa:	2206      	movs	r2, #6
   3f3ac:	4651      	mov	r1, sl
   3f3ae:	f00c fc43 	bl	4bc38 <memcmp>
   3f3b2:	4683      	mov	fp, r0
   3f3b4:	2800      	cmp	r0, #0
   3f3b6:	d1f0      	bne.n	3f39a <ll_rl_lrpa_get+0x32>
   3f3b8:	6a69      	ldr	r1, [r5, #36]	; 0x24
   3f3ba:	2206      	movs	r2, #6
   3f3bc:	4648      	mov	r0, r9
   3f3be:	f00c fc4b 	bl	4bc58 <memcpy>
		return 0;
   3f3c2:	4658      	mov	r0, fp
}
   3f3c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f3c8:	20005f55 	.word	0x20005f55

0003f3cc <ll_rl_enable>:
{
   3f3cc:	b510      	push	{r4, lr}
   3f3ce:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f3d0:	2000      	movs	r0, #0
   3f3d2:	f7f9 fcd5 	bl	38d80 <ull_adv_is_enabled>
		? 0 : 1;
   3f3d6:	b108      	cbz	r0, 3f3dc <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f3d8:	200c      	movs	r0, #12
}
   3f3da:	bd10      	pop	{r4, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   3f3dc:	f7f9 fef4 	bl	391c8 <ull_scan_is_enabled>
		? 0 : 1;
   3f3e0:	2801      	cmp	r0, #1
   3f3e2:	d8f9      	bhi.n	3f3d8 <ll_rl_enable+0xc>
	switch (enable) {
   3f3e4:	b10c      	cbz	r4, 3f3ea <ll_rl_enable+0x1e>
   3f3e6:	2c01      	cmp	r4, #1
   3f3e8:	d103      	bne.n	3f3f2 <ll_rl_enable+0x26>
		rl_enable = 0U;
   3f3ea:	4b03      	ldr	r3, [pc, #12]	; (3f3f8 <ll_rl_enable+0x2c>)
   3f3ec:	701c      	strb	r4, [r3, #0]
	return 0;
   3f3ee:	2000      	movs	r0, #0
}
   3f3f0:	bd10      	pop	{r4, pc}
	switch (enable) {
   3f3f2:	2012      	movs	r0, #18
}
   3f3f4:	bd10      	pop	{r4, pc}
   3f3f6:	bf00      	nop
   3f3f8:	20007413 	.word	0x20007413

0003f3fc <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   3f3fc:	4b03      	ldr	r3, [pc, #12]	; (3f40c <ll_rl_timeout_set+0x10>)
   3f3fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3f402:	fb02 f000 	mul.w	r0, r2, r0
   3f406:	6018      	str	r0, [r3, #0]
}
   3f408:	4770      	bx	lr
   3f40a:	bf00      	nop
   3f40c:	20005e64 	.word	0x20005e64

0003f410 <ll_priv_mode_set>:
{
   3f410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3f414:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f416:	2000      	movs	r0, #0
{
   3f418:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f41a:	f7f9 fcb1 	bl	38d80 <ull_adv_is_enabled>
		? 0 : 1;
   3f41e:	b110      	cbz	r0, 3f426 <ll_priv_mode_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f420:	200c      	movs	r0, #12
}
   3f422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3f426:	4604      	mov	r4, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   3f428:	f7f9 fece 	bl	391c8 <ull_scan_is_enabled>
		? 0 : 1;
   3f42c:	2801      	cmp	r0, #1
   3f42e:	d8f7      	bhi.n	3f420 <ll_priv_mode_set+0x10>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3f430:	4e1b      	ldr	r6, [pc, #108]	; (3f4a0 <ll_priv_mode_set+0x90>)
   3f432:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f436:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f438:	f009 0901 	and.w	r9, r9, #1
   3f43c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3f440:	00d5      	lsls	r5, r2, #3
   3f442:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   3f446:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3f44a:	07db      	lsls	r3, r3, #31
   3f44c:	f104 0401 	add.w	r4, r4, #1
   3f450:	d501      	bpl.n	3f456 <ll_priv_mode_set+0x46>
   3f452:	454a      	cmp	r2, r9
   3f454:	d006      	beq.n	3f464 <ll_priv_mode_set+0x54>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f456:	2c08      	cmp	r4, #8
   3f458:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3f45c:	d1ee      	bne.n	3f43c <ll_priv_mode_set+0x2c>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3f45e:	2002      	movs	r0, #2
}
   3f460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f464:	4630      	mov	r0, r6
   3f466:	2206      	movs	r2, #6
   3f468:	4651      	mov	r1, sl
   3f46a:	f00c fbe5 	bl	4bc38 <memcmp>
   3f46e:	2800      	cmp	r0, #0
   3f470:	d1f1      	bne.n	3f456 <ll_priv_mode_set+0x46>
		switch (mode) {
   3f472:	f1b8 0f00 	cmp.w	r8, #0
   3f476:	d00c      	beq.n	3f492 <ll_priv_mode_set+0x82>
   3f478:	f1b8 0f01 	cmp.w	r8, #1
   3f47c:	d106      	bne.n	3f48c <ll_priv_mode_set+0x7c>
			rl[i].dev = 1U;
   3f47e:	5d7b      	ldrb	r3, [r7, r5]
   3f480:	f043 0310 	orr.w	r3, r3, #16
   3f484:	557b      	strb	r3, [r7, r5]
	return 0;
   3f486:	2000      	movs	r0, #0
}
   3f488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   3f48c:	2012      	movs	r0, #18
}
   3f48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   3f492:	5d7b      	ldrb	r3, [r7, r5]
   3f494:	f368 1304 	bfi	r3, r8, #4, #1
   3f498:	557b      	strb	r3, [r7, r5]
	return 0;
   3f49a:	2000      	movs	r0, #0
   3f49c:	e7f4      	b.n	3f488 <ll_priv_mode_set+0x78>
   3f49e:	bf00      	nop
   3f4a0:	20005f55 	.word	0x20005f55

0003f4a4 <ull_filter_reset>:
{
   3f4a4:	b5d0      	push	{r4, r6, r7, lr}
   3f4a6:	4c31      	ldr	r4, [pc, #196]	; (3f56c <ull_filter_reset+0xc8>)
   3f4a8:	4931      	ldr	r1, [pc, #196]	; (3f570 <ull_filter_reset+0xcc>)
	for (int i = 0; i < FAL_SIZE; i++) {
   3f4aa:	2300      	movs	r3, #0
   3f4ac:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		uint8_t j = fal[i].rl_idx;
   3f4b0:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
		if (j < ARRAY_SIZE(rl)) {
   3f4b4:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
   3f4b6:	eb02 0e82 	add.w	lr, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   3f4ba:	d805      	bhi.n	3f4c8 <ull_filter_reset+0x24>
			rl[j].fal = 0U;
   3f4bc:	f811 203e 	ldrb.w	r2, [r1, lr, lsl #3]
   3f4c0:	f36f 1245 	bfc	r2, #5, #1
   3f4c4:	f801 203e 	strb.w	r2, [r1, lr, lsl #3]
		fal[i].taken = 0U;
   3f4c8:	f81c 2033 	ldrb.w	r2, [ip, r3, lsl #3]
   3f4cc:	f36f 0200 	bfc	r2, #0, #1
   3f4d0:	f80c 2033 	strb.w	r2, [ip, r3, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   3f4d4:	3301      	adds	r3, #1
   3f4d6:	2b08      	cmp	r3, #8
   3f4d8:	d1ea      	bne.n	3f4b0 <ull_filter_reset+0xc>
	rl_enable = 0U;
   3f4da:	4a26      	ldr	r2, [pc, #152]	; (3f574 <ull_filter_reset+0xd0>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   3f4dc:	4c26      	ldr	r4, [pc, #152]	; (3f578 <ull_filter_reset+0xd4>)
	rl_enable = 0U;
   3f4de:	2300      	movs	r3, #0
   3f4e0:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   3f4e2:	780a      	ldrb	r2, [r1, #0]
   3f4e4:	f363 0200 	bfi	r2, r3, #0, #1
   3f4e8:	700a      	strb	r2, [r1, #0]
   3f4ea:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   3f4ee:	f363 0200 	bfi	r2, r3, #0, #1
   3f4f2:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   3f4f6:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   3f4fa:	f363 0200 	bfi	r2, r3, #0, #1
   3f4fe:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   3f502:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   3f506:	f363 0200 	bfi	r2, r3, #0, #1
   3f50a:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   3f50e:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   3f512:	f363 0200 	bfi	r2, r3, #0, #1
   3f516:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   3f51a:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   3f51e:	f363 0200 	bfi	r2, r3, #0, #1
   3f522:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   3f526:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   3f52a:	f363 0200 	bfi	r2, r3, #0, #1
   3f52e:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   3f532:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   3f536:	f363 0200 	bfi	r2, r3, #0, #1
   3f53a:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   3f53e:	4a0f      	ldr	r2, [pc, #60]	; (3f57c <ull_filter_reset+0xd8>)
   3f540:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   3f542:	4b0f      	ldr	r3, [pc, #60]	; (3f580 <ull_filter_reset+0xdc>)
   3f544:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   3f548:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   3f54c:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   3f550:	4b0c      	ldr	r3, [pc, #48]	; (3f584 <ull_filter_reset+0xe0>)
   3f552:	6023      	str	r3, [r4, #0]
	if (init) {
   3f554:	b128      	cbz	r0, 3f562 <ull_filter_reset+0xbe>
}
   3f556:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   3f55a:	490b      	ldr	r1, [pc, #44]	; (3f588 <ull_filter_reset+0xe4>)
   3f55c:	480b      	ldr	r0, [pc, #44]	; (3f58c <ull_filter_reset+0xe8>)
   3f55e:	f011 bb5e 	b.w	50c1e <k_work_init_delayable>
}
   3f562:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
		k_work_cancel_delayable(&rpa_work);
   3f566:	4809      	ldr	r0, [pc, #36]	; (3f58c <ull_filter_reset+0xe8>)
   3f568:	f011 bb67 	b.w	50c3a <k_work_cancel_delayable>
   3f56c:	20006095 	.word	0x20006095
   3f570:	20005f54 	.word	0x20005f54
   3f574:	20007413 	.word	0x20007413
   3f578:	20005e64 	.word	0x20005e64
   3f57c:	20007412 	.word	0x20007412
   3f580:	20003f30 	.word	0x20003f30
   3f584:	000dbba0 	.word	0x000dbba0
   3f588:	0003f851 	.word	0x0003f851
   3f58c:	20003f00 	.word	0x20003f00

0003f590 <ull_filter_lll_get>:
	return &rl_filter;
   3f590:	4a03      	ldr	r2, [pc, #12]	; (3f5a0 <ull_filter_lll_get+0x10>)
   3f592:	4b04      	ldr	r3, [pc, #16]	; (3f5a4 <ull_filter_lll_get+0x14>)
}
   3f594:	2800      	cmp	r0, #0
   3f596:	bf14      	ite	ne
   3f598:	4610      	movne	r0, r2
   3f59a:	4618      	moveq	r0, r3
   3f59c:	4770      	bx	lr
   3f59e:	bf00      	nop
   3f5a0:	200060d4 	.word	0x200060d4
   3f5a4:	20005e68 	.word	0x20005e68

0003f5a8 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   3f5a8:	b1a8      	cbz	r0, 3f5d6 <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   3f5aa:	4a0c      	ldr	r2, [pc, #48]	; (3f5dc <ull_filter_adv_scan_state_cb+0x34>)
   3f5ac:	6812      	ldr	r2, [r2, #0]
{
   3f5ae:	b510      	push	{r4, lr}
   3f5b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   3f5b4:	f240 30e7 	movw	r0, #999	; 0x3e7
   3f5b8:	2100      	movs	r1, #0
   3f5ba:	fbe2 0103 	umlal	r0, r1, r2, r3
   3f5be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3f5c2:	2300      	movs	r3, #0
   3f5c4:	f7e6 fd9c 	bl	26100 <__aeabi_uldivmod>
}
   3f5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3f5cc:	4602      	mov	r2, r0
   3f5ce:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   3f5d0:	4803      	ldr	r0, [pc, #12]	; (3f5e0 <ull_filter_adv_scan_state_cb+0x38>)
   3f5d2:	f008 bf39 	b.w	48448 <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   3f5d6:	4802      	ldr	r0, [pc, #8]	; (3f5e0 <ull_filter_adv_scan_state_cb+0x38>)
   3f5d8:	f011 bb2f 	b.w	50c3a <k_work_cancel_delayable>
   3f5dc:	20005e64 	.word	0x20005e64
   3f5e0:	20003f00 	.word	0x20003f00

0003f5e4 <ull_filter_adv_update>:
	filter->enable_bitmask = 0;
   3f5e4:	4a0d      	ldr	r2, [pc, #52]	; (3f61c <ull_filter_adv_update+0x38>)
{
   3f5e6:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   3f5e8:	2300      	movs	r3, #0
   3f5ea:	8013      	strh	r3, [r2, #0]
	if (adv_fp &&
   3f5ec:	b970      	cbnz	r0, 3f60c <ull_filter_adv_update+0x28>
	if (rl_enable &&
   3f5ee:	4b0c      	ldr	r3, [pc, #48]	; (3f620 <ull_filter_adv_update+0x3c>)
	filter->enable_bitmask = 0;
   3f5f0:	4a0c      	ldr	r2, [pc, #48]	; (3f624 <ull_filter_adv_update+0x40>)
	if (rl_enable &&
   3f5f2:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   3f5f4:	2000      	movs	r0, #0
   3f5f6:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   3f5f8:	b903      	cbnz	r3, 3f5fc <ull_filter_adv_update+0x18>
}
   3f5fa:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_OBSERVER) || !ull_scan_is_enabled(0))) {
   3f5fc:	f7f9 fde4 	bl	391c8 <ull_scan_is_enabled>
	if (rl_enable &&
   3f600:	2800      	cmp	r0, #0
   3f602:	d1fa      	bne.n	3f5fa <ull_filter_adv_update+0x16>
}
   3f604:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   3f608:	f7ff bb3e 	b.w	3ec88 <rl_update>
	     !(ull_scan_filter_pol_get(0) & 0x1))) {
   3f60c:	4618      	mov	r0, r3
   3f60e:	f7f9 fdf5 	bl	391fc <ull_scan_filter_pol_get>
	if (adv_fp &&
   3f612:	07c3      	lsls	r3, r0, #31
   3f614:	d4eb      	bmi.n	3f5ee <ull_filter_adv_update+0xa>
		fal_update();
   3f616:	f7ff fb6f 	bl	3ecf8 <fal_update>
   3f61a:	e7e8      	b.n	3f5ee <ull_filter_adv_update+0xa>
   3f61c:	200060d4 	.word	0x200060d4
   3f620:	20007413 	.word	0x20007413
   3f624:	20005e68 	.word	0x20005e68

0003f628 <ull_filter_scan_update>:
	filter->enable_bitmask = 0;
   3f628:	4a0e      	ldr	r2, [pc, #56]	; (3f664 <ull_filter_scan_update+0x3c>)
{
   3f62a:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   3f62c:	2300      	movs	r3, #0
   3f62e:	8013      	strh	r3, [r2, #0]
	if ((scan_fp & 0x1) &&
   3f630:	07c2      	lsls	r2, r0, #31
   3f632:	d40e      	bmi.n	3f652 <ull_filter_scan_update+0x2a>
	if (rl_enable &&
   3f634:	4b0c      	ldr	r3, [pc, #48]	; (3f668 <ull_filter_scan_update+0x40>)
	filter->enable_bitmask = 0;
   3f636:	4a0d      	ldr	r2, [pc, #52]	; (3f66c <ull_filter_scan_update+0x44>)
	if (rl_enable &&
   3f638:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   3f63a:	2000      	movs	r0, #0
   3f63c:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   3f63e:	b903      	cbnz	r3, 3f642 <ull_filter_scan_update+0x1a>
}
   3f640:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_BROADCASTER) || !ull_adv_is_enabled(0))) {
   3f642:	f7f9 fb9d 	bl	38d80 <ull_adv_is_enabled>
	if (rl_enable &&
   3f646:	2800      	cmp	r0, #0
   3f648:	d1fa      	bne.n	3f640 <ull_filter_scan_update+0x18>
}
   3f64a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   3f64e:	f7ff bb1b 	b.w	3ec88 <rl_update>
	     !ull_adv_filter_pol_get(0))) {
   3f652:	4618      	mov	r0, r3
   3f654:	f7f9 fba0 	bl	38d98 <ull_adv_filter_pol_get>
	if ((scan_fp & 0x1) &&
   3f658:	2800      	cmp	r0, #0
   3f65a:	d1eb      	bne.n	3f634 <ull_filter_scan_update+0xc>
		fal_update();
   3f65c:	f7ff fb4c 	bl	3ecf8 <fal_update>
   3f660:	e7e8      	b.n	3f634 <ull_filter_scan_update+0xc>
   3f662:	bf00      	nop
   3f664:	200060d4 	.word	0x200060d4
   3f668:	20007413 	.word	0x20007413
   3f66c:	20005e68 	.word	0x20005e68

0003f670 <ull_filter_rpa_update>:
{
   3f670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f674:	4682      	mov	sl, r0
   3f676:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   3f678:	f011 fc7f 	bl	50f7a <z_impl_k_uptime_ticks>
   3f67c:	014a      	lsls	r2, r1, #5
   3f67e:	0143      	lsls	r3, r0, #5
   3f680:	1a1b      	subs	r3, r3, r0
   3f682:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   3f686:	eb62 0201 	sbc.w	r2, r2, r1
   3f68a:	0092      	lsls	r2, r2, #2
   3f68c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   3f690:	009b      	lsls	r3, r3, #2
   3f692:	181b      	adds	r3, r3, r0
   3f694:	eb41 0902 	adc.w	r9, r1, r2
   3f698:	ea4f 09c9 	mov.w	r9, r9, lsl #3
   3f69c:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
   3f6a0:	f3c3 3310 	ubfx	r3, r3, #12, #17
   3f6a4:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
   3f6a8:	ea4f 39d9 	mov.w	r9, r9, lsr #15
	bool all = timeout || (rpa_last_ms == -1) ||
   3f6ac:	f1ba 0f00 	cmp.w	sl, #0
   3f6b0:	d116      	bne.n	3f6e0 <ull_filter_rpa_update+0x70>
   3f6b2:	4a5f      	ldr	r2, [pc, #380]	; (3f830 <ull_filter_rpa_update+0x1c0>)
   3f6b4:	e9d2 1200 	ldrd	r1, r2, [r2]
   3f6b8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   3f6bc:	bf08      	it	eq
   3f6be:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
   3f6c2:	d00d      	beq.n	3f6e0 <ull_filter_rpa_update+0x70>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   3f6c4:	485b      	ldr	r0, [pc, #364]	; (3f834 <ull_filter_rpa_update+0x1c4>)
   3f6c6:	6800      	ldr	r0, [r0, #0]
   3f6c8:	1a59      	subs	r1, r3, r1
   3f6ca:	eb69 0202 	sbc.w	r2, r9, r2
	bool all = timeout || (rpa_last_ms == -1) ||
   3f6ce:	4281      	cmp	r1, r0
   3f6d0:	f172 0200 	sbcs.w	r2, r2, #0
   3f6d4:	bfac      	ite	ge
   3f6d6:	f04f 0b01 	movge.w	fp, #1
   3f6da:	f04f 0b00 	movlt.w	fp, #0
   3f6de:	e001      	b.n	3f6e4 <ull_filter_rpa_update+0x74>
   3f6e0:	f04f 0b01 	mov.w	fp, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f6e4:	4e54      	ldr	r6, [pc, #336]	; (3f838 <ull_filter_rpa_update+0x1c8>)
   3f6e6:	f8cd a004 	str.w	sl, [sp, #4]
   3f6ea:	f8df 8150 	ldr.w	r8, [pc, #336]	; 3f83c <ull_filter_rpa_update+0x1cc>
	bool all = timeout || (rpa_last_ms == -1) ||
   3f6ee:	2400      	movs	r4, #0
   3f6f0:	1ff7      	subs	r7, r6, #7
   3f6f2:	469a      	mov	sl, r3
   3f6f4:	e00d      	b.n	3f712 <ull_filter_rpa_update+0xa2>
			rl[i].rpas_ready = 1U;
   3f6f6:	4425      	add	r5, r4
   3f6f8:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   3f6fc:	f043 0302 	orr.w	r3, r3, #2
   3f700:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f704:	3401      	adds	r4, #1
   3f706:	2c08      	cmp	r4, #8
   3f708:	f108 0806 	add.w	r8, r8, #6
   3f70c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3f710:	d026      	beq.n	3f760 <ull_filter_rpa_update+0xf0>
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   3f712:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   3f716:	00a5      	lsls	r5, r4, #2
   3f718:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   3f71c:	07da      	lsls	r2, r3, #31
   3f71e:	d5f1      	bpl.n	3f704 <ull_filter_rpa_update+0x94>
   3f720:	f1bb 0f00 	cmp.w	fp, #0
   3f724:	d101      	bne.n	3f72a <ull_filter_rpa_update+0xba>
   3f726:	0798      	lsls	r0, r3, #30
   3f728:	d4ec      	bmi.n	3f704 <ull_filter_rpa_update+0x94>
			if (rl[i].pirk) {
   3f72a:	192b      	adds	r3, r5, r4
   3f72c:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   3f730:	0759      	lsls	r1, r3, #29
   3f732:	d424      	bmi.n	3f77e <ull_filter_rpa_update+0x10e>
			if (rl[i].lirk) {
   3f734:	192b      	adds	r3, r5, r4
   3f736:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   3f73a:	071a      	lsls	r2, r3, #28
   3f73c:	d5db      	bpl.n	3f6f6 <ull_filter_rpa_update+0x86>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   3f73e:	a902      	add	r1, sp, #8
   3f740:	4630      	mov	r0, r6
   3f742:	f00c faf8 	bl	4bd36 <bt_rpa_create>
				LL_ASSERT(!err);
   3f746:	2800      	cmp	r0, #0
   3f748:	d164      	bne.n	3f814 <ull_filter_rpa_update+0x1a4>
				rl[i].local_rpa = &rpa;
   3f74a:	ab02      	add	r3, sp, #8
   3f74c:	f8c6 301d 	str.w	r3, [r6, #29]
   3f750:	4619      	mov	r1, r3
   3f752:	2206      	movs	r2, #6
   3f754:	4640      	mov	r0, r8
   3f756:	f00c fa7f 	bl	4bc58 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   3f75a:	f8c6 801d 	str.w	r8, [r6, #29]
   3f75e:	e7ca      	b.n	3f6f6 <ull_filter_rpa_update+0x86>
	if (all) {
   3f760:	4653      	mov	r3, sl
   3f762:	f8dd a004 	ldr.w	sl, [sp, #4]
   3f766:	f1bb 0f00 	cmp.w	fp, #0
   3f76a:	d002      	beq.n	3f772 <ull_filter_rpa_update+0x102>
		rpa_last_ms = now;
   3f76c:	4a30      	ldr	r2, [pc, #192]	; (3f830 <ull_filter_rpa_update+0x1c0>)
   3f76e:	e9c2 3900 	strd	r3, r9, [r2]
	if (timeout) {
   3f772:	f1ba 0f00 	cmp.w	sl, #0
   3f776:	d127      	bne.n	3f7c8 <ull_filter_rpa_update+0x158>
}
   3f778:	b007      	add	sp, #28
   3f77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	psrc += length - 1;
   3f77e:	7c31      	ldrb	r1, [r6, #16]
   3f780:	4b2f      	ldr	r3, [pc, #188]	; (3f840 <ull_filter_rpa_update+0x1d0>)
   3f782:	220f      	movs	r2, #15
   3f784:	eb02 1201 	add.w	r2, r2, r1, lsl #4
   3f788:	441a      	add	r2, r3
	for (; length > 0; length--) {
   3f78a:	f10d 0017 	add.w	r0, sp, #23
   3f78e:	f10d 0307 	add.w	r3, sp, #7
		*pdst++ = *psrc--;
   3f792:	f812 1901 	ldrb.w	r1, [r2], #-1
   3f796:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   3f79a:	4283      	cmp	r3, r0
   3f79c:	d1f9      	bne.n	3f792 <ull_filter_rpa_update+0x122>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   3f79e:	f106 0117 	add.w	r1, r6, #23
   3f7a2:	a802      	add	r0, sp, #8
   3f7a4:	f00c fac7 	bl	4bd36 <bt_rpa_create>
				LL_ASSERT(!err);
   3f7a8:	2800      	cmp	r0, #0
   3f7aa:	d0c3      	beq.n	3f734 <ull_filter_rpa_update+0xc4>
   3f7ac:	4a25      	ldr	r2, [pc, #148]	; (3f844 <ull_filter_rpa_update+0x1d4>)
   3f7ae:	4926      	ldr	r1, [pc, #152]	; (3f848 <ull_filter_rpa_update+0x1d8>)
   3f7b0:	4826      	ldr	r0, [pc, #152]	; (3f84c <ull_filter_rpa_update+0x1dc>)
   3f7b2:	f240 23eb 	movw	r3, #747	; 0x2eb
   3f7b6:	f00a f920 	bl	499fa <printk>
   3f7ba:	4040      	eors	r0, r0
   3f7bc:	f380 8811 	msr	BASEPRI, r0
   3f7c0:	f04f 0003 	mov.w	r0, #3
   3f7c4:	df02      	svc	2
   3f7c6:	e7b5      	b.n	3f734 <ull_filter_rpa_update+0xc4>
		adv = ull_adv_is_enabled_get(0);
   3f7c8:	2000      	movs	r0, #0
   3f7ca:	f7f9 facb 	bl	38d64 <ull_adv_is_enabled_get>
		if (adv) {
   3f7ce:	4604      	mov	r4, r0
   3f7d0:	2800      	cmp	r0, #0
   3f7d2:	d0d1      	beq.n	3f778 <ull_filter_rpa_update+0x108>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   3f7d4:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
   3f7d8:	075b      	lsls	r3, r3, #29
   3f7da:	d5cd      	bpl.n	3f778 <ull_filter_rpa_update+0x108>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   3f7dc:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   3f7e0:	2b07      	cmp	r3, #7
   3f7e2:	d8c9      	bhi.n	3f778 <ull_filter_rpa_update+0x108>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   3f7e4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   3f7e8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   3f7ec:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   3f7ee:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   3f7f0:	3028      	adds	r0, #40	; 0x28
   3f7f2:	f001 fac3 	bl	40d7c <lll_adv_pdu_alloc>
	(void)memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   3f7f6:	7872      	ldrb	r2, [r6, #1]
   3f7f8:	4605      	mov	r5, r0
   3f7fa:	3202      	adds	r2, #2
   3f7fc:	4631      	mov	r1, r6
   3f7fe:	f00c fa2b 	bl	4bc58 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   3f802:	4629      	mov	r1, r5
   3f804:	4620      	mov	r0, r4
   3f806:	f7f9 fad7 	bl	38db8 <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   3f80a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   3f80e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   3f812:	e7b1      	b.n	3f778 <ull_filter_rpa_update+0x108>
				LL_ASSERT(!err);
   3f814:	4a0b      	ldr	r2, [pc, #44]	; (3f844 <ull_filter_rpa_update+0x1d4>)
   3f816:	490c      	ldr	r1, [pc, #48]	; (3f848 <ull_filter_rpa_update+0x1d8>)
   3f818:	480c      	ldr	r0, [pc, #48]	; (3f84c <ull_filter_rpa_update+0x1dc>)
   3f81a:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   3f81e:	f00a f8ec 	bl	499fa <printk>
   3f822:	4040      	eors	r0, r0
   3f824:	f380 8811 	msr	BASEPRI, r0
   3f828:	f04f 0003 	mov.w	r0, #3
   3f82c:	df02      	svc	2
   3f82e:	e78c      	b.n	3f74a <ull_filter_rpa_update+0xda>
   3f830:	20003f30 	.word	0x20003f30
   3f834:	20005e64 	.word	0x20005e64
   3f838:	20005f5b 	.word	0x20005f5b
   3f83c:	20005e9c 	.word	0x20005e9c
   3f840:	20005ed4 	.word	0x20005ed4
   3f844:	000532bc 	.word	0x000532bc
   3f848:	00052c4c 	.word	0x00052c4c
   3f84c:	00052a70 	.word	0x00052a70

0003f850 <rpa_timeout>:
{
   3f850:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   3f852:	2001      	movs	r0, #1
   3f854:	f7ff ff0c 	bl	3f670 <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   3f858:	4a0a      	ldr	r2, [pc, #40]	; (3f884 <rpa_timeout+0x34>)
   3f85a:	6812      	ldr	r2, [r2, #0]
   3f85c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   3f860:	f240 30e7 	movw	r0, #999	; 0x3e7
   3f864:	2100      	movs	r1, #0
   3f866:	fbe2 0103 	umlal	r0, r1, r2, r3
   3f86a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3f86e:	2300      	movs	r3, #0
   3f870:	f7e6 fc46 	bl	26100 <__aeabi_uldivmod>
}
   3f874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3f878:	4602      	mov	r2, r0
   3f87a:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   3f87c:	4802      	ldr	r0, [pc, #8]	; (3f888 <rpa_timeout+0x38>)
   3f87e:	f008 bde3 	b.w	48448 <k_work_schedule>
   3f882:	bf00      	nop
   3f884:	20005e64 	.word	0x20005e64
   3f888:	20003f00 	.word	0x20003f00

0003f88c <ull_filter_adva_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   3f88c:	2807      	cmp	r0, #7
   3f88e:	d813      	bhi.n	3f8b8 <ull_filter_adva_get+0x2c>
{
   3f890:	b570      	push	{r4, r5, r6, lr}
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   3f892:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   3f896:	4d10      	ldr	r5, [pc, #64]	; (3f8d8 <ull_filter_adva_get+0x4c>)
   3f898:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   3f89c:	071a      	lsls	r2, r3, #28
   3f89e:	4604      	mov	r4, r0
   3f8a0:	ea4f 0680 	mov.w	r6, r0, lsl #2
   3f8a4:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   3f8a8:	d505      	bpl.n	3f8b6 <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[rl_idx].rpas_ready);
   3f8aa:	079b      	lsls	r3, r3, #30
   3f8ac:	d506      	bpl.n	3f8bc <ull_filter_adva_get+0x30>
		return rl[rl_idx].local_rpa->val;
   3f8ae:	4426      	add	r6, r4
   3f8b0:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   3f8b4:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   3f8b6:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   3f8b8:	2000      	movs	r0, #0
}
   3f8ba:	4770      	bx	lr
		LL_ASSERT(rl[rl_idx].rpas_ready);
   3f8bc:	4a07      	ldr	r2, [pc, #28]	; (3f8dc <ull_filter_adva_get+0x50>)
   3f8be:	4908      	ldr	r1, [pc, #32]	; (3f8e0 <ull_filter_adva_get+0x54>)
   3f8c0:	4808      	ldr	r0, [pc, #32]	; (3f8e4 <ull_filter_adva_get+0x58>)
   3f8c2:	f44f 7347 	mov.w	r3, #796	; 0x31c
   3f8c6:	f00a f898 	bl	499fa <printk>
   3f8ca:	4040      	eors	r0, r0
   3f8cc:	f380 8811 	msr	BASEPRI, r0
   3f8d0:	f04f 0003 	mov.w	r0, #3
   3f8d4:	df02      	svc	2
   3f8d6:	e7ea      	b.n	3f8ae <ull_filter_adva_get+0x22>
   3f8d8:	20005f54 	.word	0x20005f54
   3f8dc:	000532bc 	.word	0x000532bc
   3f8e0:	00053320 	.word	0x00053320
   3f8e4:	00052a70 	.word	0x00052a70

0003f8e8 <ull_filter_tgta_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].pirk) {
   3f8e8:	2807      	cmp	r0, #7
   3f8ea:	d80c      	bhi.n	3f906 <ull_filter_tgta_get+0x1e>
   3f8ec:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   3f8f0:	4a06      	ldr	r2, [pc, #24]	; (3f90c <ull_filter_tgta_get+0x24>)
   3f8f2:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   3f8f6:	074b      	lsls	r3, r1, #29
   3f8f8:	d505      	bpl.n	3f906 <ull_filter_tgta_get+0x1e>
		return rl[rl_idx].peer_rpa.val;
   3f8fa:	2328      	movs	r3, #40	; 0x28
   3f8fc:	fb03 2200 	mla	r2, r3, r0, r2
   3f900:	f102 001e 	add.w	r0, r2, #30
   3f904:	4770      	bx	lr
	return NULL;
   3f906:	2000      	movs	r0, #0
   3f908:	4770      	bx	lr
   3f90a:	bf00      	nop
   3f90c:	20005f54 	.word	0x20005f54

0003f910 <ull_filter_rl_find>:
{
   3f910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f914:	468b      	mov	fp, r1
	if (free_idx) {
   3f916:	4617      	mov	r7, r2
   3f918:	b10a      	cbz	r2, 3f91e <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   3f91a:	23ff      	movs	r3, #255	; 0xff
   3f91c:	7013      	strb	r3, [r2, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f91e:	4d1b      	ldr	r5, [pc, #108]	; (3f98c <ull_filter_rl_find+0x7c>)
{
   3f920:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f922:	f000 0a01 	and.w	sl, r0, #1
   3f926:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   3f92a:	e006      	b.n	3f93a <ull_filter_rl_find+0x2a>
   3f92c:	4552      	cmp	r2, sl
   3f92e:	d01f      	beq.n	3f970 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f930:	3401      	adds	r4, #1
   3f932:	2c08      	cmp	r4, #8
   3f934:	f105 0528 	add.w	r5, r5, #40	; 0x28
   3f938:	d015      	beq.n	3f966 <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f93a:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   3f93e:	fa5f f884 	uxtb.w	r8, r4
   3f942:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   3f946:	07d9      	lsls	r1, r3, #31
   3f948:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3f94c:	d4ee      	bmi.n	3f92c <ull_filter_rl_find+0x1c>
		} else if (free_idx && !rl[i].taken &&
   3f94e:	2f00      	cmp	r7, #0
   3f950:	d0ee      	beq.n	3f930 <ull_filter_rl_find+0x20>
   3f952:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f954:	3401      	adds	r4, #1
		} else if (free_idx && !rl[i].taken &&
   3f956:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   3f958:	bf08      	it	eq
   3f95a:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f95e:	2c08      	cmp	r4, #8
   3f960:	f105 0528 	add.w	r5, r5, #40	; 0x28
   3f964:	d1e9      	bne.n	3f93a <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   3f966:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   3f96a:	4640      	mov	r0, r8
   3f96c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f970:	4628      	mov	r0, r5
   3f972:	2206      	movs	r2, #6
   3f974:	4659      	mov	r1, fp
   3f976:	f00c f95f 	bl	4bc38 <memcmp>
   3f97a:	2800      	cmp	r0, #0
   3f97c:	d0f5      	beq.n	3f96a <ull_filter_rl_find+0x5a>
		} else if (free_idx && !rl[i].taken &&
   3f97e:	2f00      	cmp	r7, #0
   3f980:	d0d6      	beq.n	3f930 <ull_filter_rl_find+0x20>
   3f982:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   3f986:	07db      	lsls	r3, r3, #31
   3f988:	d4d2      	bmi.n	3f930 <ull_filter_rl_find+0x20>
   3f98a:	e7e2      	b.n	3f952 <ull_filter_rl_find+0x42>
   3f98c:	20005f55 	.word	0x20005f55

0003f990 <ll_rl_add>:
{
   3f990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f994:	4607      	mov	r7, r0
   3f996:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f998:	2000      	movs	r0, #0
{
   3f99a:	460d      	mov	r5, r1
   3f99c:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f99e:	f7f9 f9ef 	bl	38d80 <ull_adv_is_enabled>
		? 0 : 1;
   3f9a2:	b118      	cbz	r0, 3f9ac <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f9a4:	200c      	movs	r0, #12
}
   3f9a6:	b005      	add	sp, #20
   3f9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f9ac:	4604      	mov	r4, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   3f9ae:	f7f9 fc0b 	bl	391c8 <ull_scan_is_enabled>
		? 0 : 1;
   3f9b2:	2801      	cmp	r0, #1
   3f9b4:	d8f6      	bhi.n	3f9a4 <ll_rl_add+0x14>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   3f9b6:	46ba      	mov	sl, r7
   3f9b8:	f10d 020f 	add.w	r2, sp, #15
   3f9bc:	f81a 0b01 	ldrb.w	r0, [sl], #1
   3f9c0:	4651      	mov	r1, sl
   3f9c2:	f7ff ffa5 	bl	3f910 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   3f9c6:	2807      	cmp	r0, #7
   3f9c8:	f240 80b1 	bls.w	3fb2e <ll_rl_add+0x19e>
	} else if (j >= ARRAY_SIZE(rl)) {
   3f9cc:	f89d 800f 	ldrb.w	r8, [sp, #15]
   3f9d0:	f1b8 0f07 	cmp.w	r8, #7
   3f9d4:	f200 80a7 	bhi.w	3fb26 <ll_rl_add+0x196>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   3f9d8:	eb08 0388 	add.w	r3, r8, r8, lsl #2
   3f9dc:	4e56      	ldr	r6, [pc, #344]	; (3fb38 <ll_rl_add+0x1a8>)
   3f9de:	00db      	lsls	r3, r3, #3
   3f9e0:	1c58      	adds	r0, r3, #1
   3f9e2:	2206      	movs	r2, #6
   3f9e4:	4651      	mov	r1, sl
   3f9e6:	4430      	add	r0, r6
   3f9e8:	9300      	str	r3, [sp, #0]
   3f9ea:	f00c f935 	bl	4bc58 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   3f9ee:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   3f9f2:	7838      	ldrb	r0, [r7, #0]
   3f9f4:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   3f9f8:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
   3f9fc:	f360 1186 	bfi	r1, r0, #6, #1
   3fa00:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
   3fa04:	f806 100b 	strb.w	r1, [r6, fp]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   3fa08:	4628      	mov	r0, r5
   3fa0a:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   3fa0c:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   3fa0e:	f7f4 fa55 	bl	33ebc <mem_nz>
   3fa12:	f816 200b 	ldrb.w	r2, [r6, fp]
   3fa16:	f360 0282 	bfi	r2, r0, #2, #1
   3fa1a:	f806 200b 	strb.w	r2, [r6, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   3fa1e:	2110      	movs	r1, #16
   3fa20:	4648      	mov	r0, r9
   3fa22:	f7f4 fa4b 	bl	33ebc <mem_nz>
   3fa26:	f816 200b 	ldrb.w	r2, [r6, fp]
	if (rl[i].pirk) {
   3fa2a:	9b00      	ldr	r3, [sp, #0]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   3fa2c:	f000 0001 	and.w	r0, r0, #1
   3fa30:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   3fa34:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   3fa38:	f806 200b 	strb.w	r2, [r6, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   3fa3c:	ea4f 0b88 	mov.w	fp, r8, lsl #2
	if (rl[i].pirk) {
   3fa40:	d142      	bne.n	3fac8 <ll_rl_add+0x138>
	if (rl[i].lirk) {
   3fa42:	2800      	cmp	r0, #0
   3fa44:	d160      	bne.n	3fb08 <ll_rl_add+0x178>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   3fa46:	f103 0018 	add.w	r0, r3, #24
   3fa4a:	2206      	movs	r2, #6
   3fa4c:	4430      	add	r0, r6
   3fa4e:	2100      	movs	r1, #0
   3fa50:	f00c f90d 	bl	4bc6e <memset>
	rl[i].dev = 0U;
   3fa54:	eb0b 0308 	add.w	r3, fp, r8
   3fa58:	4d38      	ldr	r5, [pc, #224]	; (3fb3c <ll_rl_add+0x1ac>)
	rl[i].rpas_ready = 0U;
   3fa5a:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   3fa5e:	f022 0212 	bic.w	r2, r2, #18
   3fa62:	f806 2033 	strb.w	r2, [r6, r3, lsl #3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   3fa66:	f897 9000 	ldrb.w	r9, [r7]
	for (i = 0; i < FAL_SIZE; i++) {
   3fa6a:	1eaf      	subs	r7, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3fa6c:	f009 0901 	and.w	r9, r9, #1
   3fa70:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   3fa74:	f3c3 0240 	ubfx	r2, r3, #1, #1
   3fa78:	f013 0301 	ands.w	r3, r3, #1
   3fa7c:	d001      	beq.n	3fa82 <ll_rl_add+0xf2>
   3fa7e:	454a      	cmp	r2, r9
   3fa80:	d014      	beq.n	3faac <ll_rl_add+0x11c>
	for (i = 0; i < FAL_SIZE; i++) {
   3fa82:	3401      	adds	r4, #1
   3fa84:	2c08      	cmp	r4, #8
   3fa86:	f105 0508 	add.w	r5, r5, #8
   3fa8a:	d1f1      	bne.n	3fa70 <ll_rl_add+0xe0>
   3fa8c:	2300      	movs	r3, #0
	rl[i].taken = 1U;
   3fa8e:	44c3      	add	fp, r8
   3fa90:	015b      	lsls	r3, r3, #5
   3fa92:	f816 203b 	ldrb.w	r2, [r6, fp, lsl #3]
   3fa96:	f043 0301 	orr.w	r3, r3, #1
   3fa9a:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   3fa9e:	4313      	orrs	r3, r2
	return 0;
   3faa0:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   3faa2:	f806 303b 	strb.w	r3, [r6, fp, lsl #3]
}
   3faa6:	b005      	add	sp, #20
   3faa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3faac:	4628      	mov	r0, r5
   3faae:	2206      	movs	r2, #6
   3fab0:	4651      	mov	r1, sl
   3fab2:	9300      	str	r3, [sp, #0]
   3fab4:	f00c f8c0 	bl	4bc38 <memcmp>
   3fab8:	9b00      	ldr	r3, [sp, #0]
   3faba:	2800      	cmp	r0, #0
   3fabc:	d1e1      	bne.n	3fa82 <ll_rl_add+0xf2>
		fal[j].rl_idx = i;
   3fabe:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
   3fac2:	f887 8001 	strb.w	r8, [r7, #1]
		rl[i].fal = 1U;
   3fac6:	e7e2      	b.n	3fa8e <ll_rl_add+0xfe>
		rl[i].pirk_idx = peer_irk_count;
   3fac8:	f8df c074 	ldr.w	ip, [pc, #116]	; 3fb40 <ll_rl_add+0x1b0>
		peer_irk_rl_ids[peer_irk_count] = i;
   3facc:	491d      	ldr	r1, [pc, #116]	; (3fb44 <ll_rl_add+0x1b4>)
		rl[i].pirk_idx = peer_irk_count;
   3face:	f89c 2000 	ldrb.w	r2, [ip]
   3fad2:	f8dd e004 	ldr.w	lr, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   3fad6:	f801 8002 	strb.w	r8, [r1, r2]
		rl[i].pirk_idx = peer_irk_count;
   3fada:	f88e 2017 	strb.w	r2, [lr, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   3fade:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3fae2:	f8df e064 	ldr.w	lr, [pc, #100]	; 3fb48 <ll_rl_add+0x1b8>
   3fae6:	eb01 1102 	add.w	r1, r1, r2, lsl #4
   3faea:	3201      	adds	r2, #1
   3faec:	f88c 2000 	strb.w	r2, [ip]
   3faf0:	4471      	add	r1, lr
	psrc += length - 1;
   3faf2:	f105 020f 	add.w	r2, r5, #15
	for (; length > 0; length--) {
   3faf6:	3d01      	subs	r5, #1
		*pdst++ = *psrc--;
   3faf8:	f812 c901 	ldrb.w	ip, [r2], #-1
   3fafc:	f801 cf01 	strb.w	ip, [r1, #1]!
	for (; length > 0; length--) {
   3fb00:	42aa      	cmp	r2, r5
   3fb02:	d1f9      	bne.n	3faf8 <ll_rl_add+0x168>
	if (rl[i].lirk) {
   3fb04:	2800      	cmp	r0, #0
   3fb06:	d09e      	beq.n	3fa46 <ll_rl_add+0xb6>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   3fb08:	1dd8      	adds	r0, r3, #7
   3fb0a:	4649      	mov	r1, r9
   3fb0c:	2210      	movs	r2, #16
   3fb0e:	4430      	add	r0, r6
   3fb10:	9300      	str	r3, [sp, #0]
   3fb12:	f00c f8a1 	bl	4bc58 <memcpy>
		rl[i].local_rpa = NULL;
   3fb16:	eb0b 0208 	add.w	r2, fp, r8
   3fb1a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   3fb1e:	2100      	movs	r1, #0
   3fb20:	9b00      	ldr	r3, [sp, #0]
   3fb22:	6251      	str	r1, [r2, #36]	; 0x24
   3fb24:	e78f      	b.n	3fa46 <ll_rl_add+0xb6>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   3fb26:	2007      	movs	r0, #7
}
   3fb28:	b005      	add	sp, #20
   3fb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   3fb2e:	2012      	movs	r0, #18
}
   3fb30:	b005      	add	sp, #20
   3fb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fb36:	bf00      	nop
   3fb38:	20005f54 	.word	0x20005f54
   3fb3c:	20006096 	.word	0x20006096
   3fb40:	20007412 	.word	0x20007412
   3fb44:	20005ecc 	.word	0x20005ecc
   3fb48:	20005ed4 	.word	0x20005ed4

0003fb4c <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   3fb4c:	2807      	cmp	r0, #7
   3fb4e:	d807      	bhi.n	3fb60 <ull_filter_lll_lrpa_used+0x14>
   3fb50:	4b04      	ldr	r3, [pc, #16]	; (3fb64 <ull_filter_lll_lrpa_used+0x18>)
   3fb52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3fb56:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   3fb5a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   3fb5e:	4770      	bx	lr
   3fb60:	2000      	movs	r0, #0
}
   3fb62:	4770      	bx	lr
   3fb64:	20005f54 	.word	0x20005f54

0003fb68 <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   3fb68:	2807      	cmp	r0, #7
   3fb6a:	d812      	bhi.n	3fb92 <ull_filter_lll_lrpa_get+0x2a>
   3fb6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3fb70:	4a09      	ldr	r2, [pc, #36]	; (3fb98 <ull_filter_lll_lrpa_get+0x30>)
   3fb72:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   3fb76:	f013 0f08 	tst.w	r3, #8
   3fb7a:	ea4f 01c0 	mov.w	r1, r0, lsl #3
   3fb7e:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   3fb82:	d007      	beq.n	3fb94 <ull_filter_lll_lrpa_get+0x2c>
   3fb84:	f3c3 0040 	ubfx	r0, r3, #1, #1
   3fb88:	079b      	lsls	r3, r3, #30
   3fb8a:	d503      	bpl.n	3fb94 <ull_filter_lll_lrpa_get+0x2c>
	return rl[rl_idx].local_rpa;
   3fb8c:	440a      	add	r2, r1
   3fb8e:	6a50      	ldr	r0, [r2, #36]	; 0x24
   3fb90:	4770      	bx	lr
		return NULL;
   3fb92:	2000      	movs	r0, #0
}
   3fb94:	4770      	bx	lr
   3fb96:	bf00      	nop
   3fb98:	20005f54 	.word	0x20005f54

0003fb9c <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   3fb9c:	4b02      	ldr	r3, [pc, #8]	; (3fba8 <ull_filter_lll_irks_get+0xc>)
   3fb9e:	781b      	ldrb	r3, [r3, #0]
   3fba0:	7003      	strb	r3, [r0, #0]
}
   3fba2:	4802      	ldr	r0, [pc, #8]	; (3fbac <ull_filter_lll_irks_get+0x10>)
   3fba4:	4770      	bx	lr
   3fba6:	bf00      	nop
   3fba8:	20007412 	.word	0x20007412
   3fbac:	20005ed4 	.word	0x20005ed4

0003fbb0 <ull_filter_lll_rl_idx>:
{
   3fbb0:	b538      	push	{r3, r4, r5, lr}
   3fbb2:	460c      	mov	r4, r1
	if (filter) {
   3fbb4:	b150      	cbz	r0, 3fbcc <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   3fbb6:	2907      	cmp	r1, #7
   3fbb8:	d813      	bhi.n	3fbe2 <ull_filter_lll_rl_idx+0x32>
		LL_ASSERT(fal[devmatch_id].taken);
   3fbba:	4d2a      	ldr	r5, [pc, #168]	; (3fc64 <ull_filter_lll_rl_idx+0xb4>)
   3fbbc:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   3fbc0:	07da      	lsls	r2, r3, #31
   3fbc2:	d520      	bpl.n	3fc06 <ull_filter_lll_rl_idx+0x56>
		i = fal[devmatch_id].rl_idx;
   3fbc4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   3fbc8:	7868      	ldrb	r0, [r5, #1]
}
   3fbca:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   3fbcc:	2907      	cmp	r1, #7
   3fbce:	d82b      	bhi.n	3fc28 <ull_filter_lll_rl_idx+0x78>
		LL_ASSERT(rl[i].taken);
   3fbd0:	4b25      	ldr	r3, [pc, #148]	; (3fc68 <ull_filter_lll_rl_idx+0xb8>)
   3fbd2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3fbd6:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   3fbda:	07db      	lsls	r3, r3, #31
   3fbdc:	d532      	bpl.n	3fc44 <ull_filter_lll_rl_idx+0x94>
{
   3fbde:	4620      	mov	r0, r4
}
   3fbe0:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   3fbe2:	4a22      	ldr	r2, [pc, #136]	; (3fc6c <ull_filter_lll_rl_idx+0xbc>)
   3fbe4:	4922      	ldr	r1, [pc, #136]	; (3fc70 <ull_filter_lll_rl_idx+0xc0>)
   3fbe6:	4823      	ldr	r0, [pc, #140]	; (3fc74 <ull_filter_lll_rl_idx+0xc4>)
   3fbe8:	f240 335d 	movw	r3, #861	; 0x35d
   3fbec:	f009 ff05 	bl	499fa <printk>
   3fbf0:	4040      	eors	r0, r0
   3fbf2:	f380 8811 	msr	BASEPRI, r0
   3fbf6:	f04f 0003 	mov.w	r0, #3
   3fbfa:	df02      	svc	2
		LL_ASSERT(fal[devmatch_id].taken);
   3fbfc:	4d19      	ldr	r5, [pc, #100]	; (3fc64 <ull_filter_lll_rl_idx+0xb4>)
   3fbfe:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   3fc02:	07da      	lsls	r2, r3, #31
   3fc04:	d4de      	bmi.n	3fbc4 <ull_filter_lll_rl_idx+0x14>
   3fc06:	4a19      	ldr	r2, [pc, #100]	; (3fc6c <ull_filter_lll_rl_idx+0xbc>)
   3fc08:	491b      	ldr	r1, [pc, #108]	; (3fc78 <ull_filter_lll_rl_idx+0xc8>)
   3fc0a:	481a      	ldr	r0, [pc, #104]	; (3fc74 <ull_filter_lll_rl_idx+0xc4>)
   3fc0c:	f240 335e 	movw	r3, #862	; 0x35e
   3fc10:	f009 fef3 	bl	499fa <printk>
   3fc14:	4040      	eors	r0, r0
   3fc16:	f380 8811 	msr	BASEPRI, r0
   3fc1a:	f04f 0003 	mov.w	r0, #3
   3fc1e:	df02      	svc	2
		i = fal[devmatch_id].rl_idx;
   3fc20:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   3fc24:	7868      	ldrb	r0, [r5, #1]
   3fc26:	e7d0      	b.n	3fbca <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   3fc28:	4a10      	ldr	r2, [pc, #64]	; (3fc6c <ull_filter_lll_rl_idx+0xbc>)
   3fc2a:	4914      	ldr	r1, [pc, #80]	; (3fc7c <ull_filter_lll_rl_idx+0xcc>)
   3fc2c:	4811      	ldr	r0, [pc, #68]	; (3fc74 <ull_filter_lll_rl_idx+0xc4>)
   3fc2e:	f240 3361 	movw	r3, #865	; 0x361
   3fc32:	f009 fee2 	bl	499fa <printk>
   3fc36:	4040      	eors	r0, r0
   3fc38:	f380 8811 	msr	BASEPRI, r0
   3fc3c:	f04f 0003 	mov.w	r0, #3
   3fc40:	df02      	svc	2
   3fc42:	e7c5      	b.n	3fbd0 <ull_filter_lll_rl_idx+0x20>
		LL_ASSERT(rl[i].taken);
   3fc44:	4a09      	ldr	r2, [pc, #36]	; (3fc6c <ull_filter_lll_rl_idx+0xbc>)
   3fc46:	490e      	ldr	r1, [pc, #56]	; (3fc80 <ull_filter_lll_rl_idx+0xd0>)
   3fc48:	480a      	ldr	r0, [pc, #40]	; (3fc74 <ull_filter_lll_rl_idx+0xc4>)
   3fc4a:	f240 3363 	movw	r3, #867	; 0x363
   3fc4e:	f009 fed4 	bl	499fa <printk>
   3fc52:	4040      	eors	r0, r0
   3fc54:	f380 8811 	msr	BASEPRI, r0
   3fc58:	f04f 0003 	mov.w	r0, #3
   3fc5c:	df02      	svc	2
{
   3fc5e:	4620      	mov	r0, r4
   3fc60:	e7be      	b.n	3fbe0 <ull_filter_lll_rl_idx+0x30>
   3fc62:	bf00      	nop
   3fc64:	20006094 	.word	0x20006094
   3fc68:	20005f54 	.word	0x20005f54
   3fc6c:	000532bc 	.word	0x000532bc
   3fc70:	00053338 	.word	0x00053338
   3fc74:	00052a70 	.word	0x00052a70
   3fc78:	000533e0 	.word	0x000533e0
   3fc7c:	000533f8 	.word	0x000533f8
   3fc80:	0005349c 	.word	0x0005349c

0003fc84 <ull_filter_lll_rl_irk_idx>:
{
   3fc84:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   3fc86:	4b20      	ldr	r3, [pc, #128]	; (3fd08 <ull_filter_lll_rl_irk_idx+0x84>)
   3fc88:	781b      	ldrb	r3, [r3, #0]
   3fc8a:	4283      	cmp	r3, r0
{
   3fc8c:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   3fc8e:	d90c      	bls.n	3fcaa <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   3fc90:	4b1e      	ldr	r3, [pc, #120]	; (3fd0c <ull_filter_lll_rl_irk_idx+0x88>)
   3fc92:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   3fc94:	2c07      	cmp	r4, #7
   3fc96:	d819      	bhi.n	3fccc <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   3fc98:	4b1d      	ldr	r3, [pc, #116]	; (3fd10 <ull_filter_lll_rl_irk_idx+0x8c>)
   3fc9a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3fc9e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   3fca2:	07db      	lsls	r3, r3, #31
   3fca4:	d520      	bpl.n	3fce8 <ull_filter_lll_rl_irk_idx+0x64>
}
   3fca6:	4620      	mov	r0, r4
   3fca8:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   3fcaa:	4a1a      	ldr	r2, [pc, #104]	; (3fd14 <ull_filter_lll_rl_irk_idx+0x90>)
   3fcac:	491a      	ldr	r1, [pc, #104]	; (3fd18 <ull_filter_lll_rl_irk_idx+0x94>)
   3fcae:	481b      	ldr	r0, [pc, #108]	; (3fd1c <ull_filter_lll_rl_irk_idx+0x98>)
   3fcb0:	f240 336d 	movw	r3, #877	; 0x36d
   3fcb4:	f009 fea1 	bl	499fa <printk>
   3fcb8:	4040      	eors	r0, r0
   3fcba:	f380 8811 	msr	BASEPRI, r0
   3fcbe:	f04f 0003 	mov.w	r0, #3
   3fcc2:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   3fcc4:	4b11      	ldr	r3, [pc, #68]	; (3fd0c <ull_filter_lll_rl_irk_idx+0x88>)
   3fcc6:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   3fcc8:	2c07      	cmp	r4, #7
   3fcca:	d9e5      	bls.n	3fc98 <ull_filter_lll_rl_irk_idx+0x14>
   3fccc:	4a11      	ldr	r2, [pc, #68]	; (3fd14 <ull_filter_lll_rl_irk_idx+0x90>)
   3fcce:	4914      	ldr	r1, [pc, #80]	; (3fd20 <ull_filter_lll_rl_irk_idx+0x9c>)
   3fcd0:	4812      	ldr	r0, [pc, #72]	; (3fd1c <ull_filter_lll_rl_irk_idx+0x98>)
   3fcd2:	f240 336f 	movw	r3, #879	; 0x36f
   3fcd6:	f009 fe90 	bl	499fa <printk>
   3fcda:	4040      	eors	r0, r0
   3fcdc:	f380 8811 	msr	BASEPRI, r0
   3fce0:	f04f 0003 	mov.w	r0, #3
   3fce4:	df02      	svc	2
   3fce6:	e7d7      	b.n	3fc98 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   3fce8:	4a0a      	ldr	r2, [pc, #40]	; (3fd14 <ull_filter_lll_rl_irk_idx+0x90>)
   3fcea:	490e      	ldr	r1, [pc, #56]	; (3fd24 <ull_filter_lll_rl_irk_idx+0xa0>)
   3fcec:	480b      	ldr	r0, [pc, #44]	; (3fd1c <ull_filter_lll_rl_irk_idx+0x98>)
   3fcee:	f44f 735c 	mov.w	r3, #880	; 0x370
   3fcf2:	f009 fe82 	bl	499fa <printk>
   3fcf6:	4040      	eors	r0, r0
   3fcf8:	f380 8811 	msr	BASEPRI, r0
   3fcfc:	f04f 0003 	mov.w	r0, #3
   3fd00:	df02      	svc	2
}
   3fd02:	4620      	mov	r0, r4
   3fd04:	bd10      	pop	{r4, pc}
   3fd06:	bf00      	nop
   3fd08:	20007412 	.word	0x20007412
   3fd0c:	20005ecc 	.word	0x20005ecc
   3fd10:	20005f54 	.word	0x20005f54
   3fd14:	000532bc 	.word	0x000532bc
   3fd18:	000534a8 	.word	0x000534a8
   3fd1c:	00052a70 	.word	0x00052a70
   3fd20:	000534c8 	.word	0x000534c8
   3fd24:	0005349c 	.word	0x0005349c

0003fd28 <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   3fd28:	2807      	cmp	r0, #7
   3fd2a:	d823      	bhi.n	3fd74 <ull_filter_lll_irk_in_fal+0x4c>
{
   3fd2c:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   3fd2e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   3fd32:	4e11      	ldr	r6, [pc, #68]	; (3fd78 <ull_filter_lll_irk_in_fal+0x50>)
   3fd34:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   3fd38:	07db      	lsls	r3, r3, #31
   3fd3a:	4604      	mov	r4, r0
   3fd3c:	ea4f 0580 	mov.w	r5, r0, lsl #2
   3fd40:	d505      	bpl.n	3fd4e <ull_filter_lll_irk_in_fal+0x26>
	return rl[rl_idx].fal;
   3fd42:	4425      	add	r5, r4
   3fd44:	f816 0035 	ldrb.w	r0, [r6, r5, lsl #3]
   3fd48:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   3fd4c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   3fd4e:	4a0b      	ldr	r2, [pc, #44]	; (3fd7c <ull_filter_lll_irk_in_fal+0x54>)
   3fd50:	490b      	ldr	r1, [pc, #44]	; (3fd80 <ull_filter_lll_irk_in_fal+0x58>)
   3fd52:	480c      	ldr	r0, [pc, #48]	; (3fd84 <ull_filter_lll_irk_in_fal+0x5c>)
   3fd54:	f240 337b 	movw	r3, #891	; 0x37b
   3fd58:	f009 fe4f 	bl	499fa <printk>
   3fd5c:	4040      	eors	r0, r0
   3fd5e:	f380 8811 	msr	BASEPRI, r0
   3fd62:	f04f 0003 	mov.w	r0, #3
   3fd66:	df02      	svc	2
	return rl[rl_idx].fal;
   3fd68:	4425      	add	r5, r4
   3fd6a:	f816 0035 	ldrb.w	r0, [r6, r5, lsl #3]
   3fd6e:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   3fd72:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   3fd74:	2000      	movs	r0, #0
}
   3fd76:	4770      	bx	lr
   3fd78:	20005f54 	.word	0x20005f54
   3fd7c:	000532bc 	.word	0x000532bc
   3fd80:	0005330c 	.word	0x0005330c
   3fd84:	00052a70 	.word	0x00052a70

0003fd88 <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   3fd88:	4b14      	ldr	r3, [pc, #80]	; (3fddc <ull_filter_lll_rl_idx_allowed+0x54>)
   3fd8a:	781b      	ldrb	r3, [r3, #0]
   3fd8c:	b19b      	cbz	r3, 3fdb6 <ull_filter_lll_rl_idx_allowed+0x2e>
   3fd8e:	2907      	cmp	r1, #7
{
   3fd90:	b570      	push	{r4, r5, r6, lr}
   3fd92:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   3fd94:	d80d      	bhi.n	3fdb2 <ull_filter_lll_rl_idx_allowed+0x2a>
   3fd96:	b960      	cbnz	r0, 3fdb2 <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
   3fd98:	4e11      	ldr	r6, [pc, #68]	; (3fde0 <ull_filter_lll_rl_idx_allowed+0x58>)
   3fd9a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   3fd9e:	008d      	lsls	r5, r1, #2
   3fda0:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   3fda4:	07da      	lsls	r2, r3, #31
   3fda6:	d50b      	bpl.n	3fdc0 <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   3fda8:	4425      	add	r5, r4
   3fdaa:	f816 0035 	ldrb.w	r0, [r6, r5, lsl #3]
   3fdae:	0743      	lsls	r3, r0, #29
   3fdb0:	d403      	bmi.n	3fdba <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
   3fdb2:	2001      	movs	r0, #1
}
   3fdb4:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   3fdb6:	2001      	movs	r0, #1
}
   3fdb8:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   3fdba:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   3fdbe:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   3fdc0:	4a08      	ldr	r2, [pc, #32]	; (3fde4 <ull_filter_lll_rl_idx_allowed+0x5c>)
   3fdc2:	4909      	ldr	r1, [pc, #36]	; (3fde8 <ull_filter_lll_rl_idx_allowed+0x60>)
   3fdc4:	4809      	ldr	r0, [pc, #36]	; (3fdec <ull_filter_lll_rl_idx_allowed+0x64>)
   3fdc6:	f44f 7365 	mov.w	r3, #916	; 0x394
   3fdca:	f009 fe16 	bl	499fa <printk>
   3fdce:	4040      	eors	r0, r0
   3fdd0:	f380 8811 	msr	BASEPRI, r0
   3fdd4:	f04f 0003 	mov.w	r0, #3
   3fdd8:	df02      	svc	2
   3fdda:	e7e5      	b.n	3fda8 <ull_filter_lll_rl_idx_allowed+0x20>
   3fddc:	20007413 	.word	0x20007413
   3fde0:	20005f54 	.word	0x20005f54
   3fde4:	000532bc 	.word	0x000532bc
   3fde8:	0005330c 	.word	0x0005330c
   3fdec:	00052a70 	.word	0x00052a70

0003fdf0 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   3fdf0:	7813      	ldrb	r3, [r2, #0]
   3fdf2:	2bff      	cmp	r3, #255	; 0xff
   3fdf4:	d119      	bne.n	3fe2a <ull_filter_lll_rl_addr_allowed+0x3a>
{
   3fdf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3fdfa:	4d19      	ldr	r5, [pc, #100]	; (3fe60 <ull_filter_lll_rl_addr_allowed+0x70>)
   3fdfc:	4604      	mov	r4, r0
   3fdfe:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   3fe00:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   3fe02:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   3fe06:	009e      	lsls	r6, r3, #2
   3fe08:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   3fe0c:	f01c 0001 	ands.w	r0, ip, #1
   3fe10:	d003      	beq.n	3fe1a <ull_filter_lll_rl_addr_allowed+0x2a>
   3fe12:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   3fe16:	45a4      	cmp	ip, r4
   3fe18:	d009      	beq.n	3fe2e <ull_filter_lll_rl_addr_allowed+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3fe1a:	3301      	adds	r3, #1
   3fe1c:	2b08      	cmp	r3, #8
   3fe1e:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   3fe22:	d1ee      	bne.n	3fe02 <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   3fe24:	2001      	movs	r0, #1
}
   3fe26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return true;
   3fe2a:	2001      	movs	r0, #1
}
   3fe2c:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   3fe2e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   3fe32:	4677      	mov	r7, lr
   3fe34:	f04f 0c00 	mov.w	ip, #0
				if (addr[j] != id_addr[j]) {
   3fe38:	f817 af01 	ldrb.w	sl, [r7, #1]!
   3fe3c:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   3fe40:	45ca      	cmp	sl, r9
			for (j = 0U; j < BDADDR_SIZE; j++) {
   3fe42:	f10c 0c01 	add.w	ip, ip, #1
				if (addr[j] != id_addr[j]) {
   3fe46:	d1e8      	bne.n	3fe1a <ull_filter_lll_rl_addr_allowed+0x2a>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   3fe48:	f1bc 0f06 	cmp.w	ip, #6
   3fe4c:	d1f4      	bne.n	3fe38 <ull_filter_lll_rl_addr_allowed+0x48>
				return !rl[i].pirk || rl[i].dev;
   3fe4e:	441e      	add	r6, r3
				*rl_idx = i;
   3fe50:	7013      	strb	r3, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   3fe52:	f815 3036 	ldrb.w	r3, [r5, r6, lsl #3]
   3fe56:	075a      	lsls	r2, r3, #29
   3fe58:	d5e5      	bpl.n	3fe26 <ull_filter_lll_rl_addr_allowed+0x36>
   3fe5a:	f3c3 1000 	ubfx	r0, r3, #4, #1
   3fe5e:	e7e2      	b.n	3fe26 <ull_filter_lll_rl_addr_allowed+0x36>
   3fe60:	20005f54 	.word	0x20005f54

0003fe64 <ull_filter_lll_rl_addr_resolve>:
{
   3fe64:	b410      	push	{r4}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   3fe66:	4b0e      	ldr	r3, [pc, #56]	; (3fea0 <ull_filter_lll_rl_addr_resolve+0x3c>)
   3fe68:	781c      	ldrb	r4, [r3, #0]
   3fe6a:	b17c      	cbz	r4, 3fe8c <ull_filter_lll_rl_addr_resolve+0x28>
   3fe6c:	2a07      	cmp	r2, #7
   3fe6e:	d80d      	bhi.n	3fe8c <ull_filter_lll_rl_addr_resolve+0x28>
   3fe70:	4c0c      	ldr	r4, [pc, #48]	; (3fea4 <ull_filter_lll_rl_addr_resolve+0x40>)
   3fe72:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   3fe76:	f814 c03c 	ldrb.w	ip, [r4, ip, lsl #3]
   3fe7a:	f01c 0f08 	tst.w	ip, #8
   3fe7e:	d005      	beq.n	3fe8c <ull_filter_lll_rl_addr_resolve+0x28>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   3fe80:	b120      	cbz	r0, 3fe8c <ull_filter_lll_rl_addr_resolve+0x28>
   3fe82:	794b      	ldrb	r3, [r1, #5]
   3fe84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3fe88:	2b40      	cmp	r3, #64	; 0x40
   3fe8a:	d002      	beq.n	3fe92 <ull_filter_lll_rl_addr_resolve+0x2e>
}
   3fe8c:	2000      	movs	r0, #0
   3fe8e:	bc10      	pop	{r4}
   3fe90:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   3fe92:	2328      	movs	r3, #40	; 0x28
   3fe94:	fb03 4002 	mla	r0, r3, r2, r4
   3fe98:	3007      	adds	r0, #7
}
   3fe9a:	bc10      	pop	{r4}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   3fe9c:	f00b bf38 	b.w	4bd10 <bt_rpa_irk_matches>
   3fea0:	20007413 	.word	0x20007413
   3fea4:	20005f54 	.word	0x20005f54

0003fea8 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   3fea8:	4b02      	ldr	r3, [pc, #8]	; (3feb4 <ull_filter_lll_rl_enabled+0xc>)
   3feaa:	7818      	ldrb	r0, [r3, #0]
}
   3feac:	3800      	subs	r0, #0
   3feae:	bf18      	it	ne
   3feb0:	2001      	movne	r0, #1
   3feb2:	4770      	bx	lr
   3feb4:	20007413 	.word	0x20007413

0003feb8 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   3feb8:	4668      	mov	r0, sp
   3feba:	f020 0107 	bic.w	r1, r0, #7
   3febe:	468d      	mov	sp, r1
   3fec0:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   3fec2:	f002 fe01 	bl	42ac8 <isr_radio>

	ISR_DIRECT_PM();
   3fec6:	f7ec feb9 	bl	2cc3c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   3feca:	f7ec ff89 	bl	2cde0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   3fece:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3fed2:	4685      	mov	sp, r0
   3fed4:	4770      	bx	lr
   3fed6:	bf00      	nop

0003fed8 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   3fed8:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   3feda:	4b09      	ldr	r3, [pc, #36]	; (3ff00 <rtc0_nrf5_isr+0x28>)
   3fedc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   3fee0:	b93a      	cbnz	r2, 3fef2 <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   3fee2:	2001      	movs	r0, #1
   3fee4:	f7f4 f8d8 	bl	34098 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   3fee8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   3feec:	2002      	movs	r0, #2
   3feee:	f7f4 b8d3 	b.w	34098 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   3fef2:	2000      	movs	r0, #0
   3fef4:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   3fef8:	f7f5 fa48 	bl	3538c <ticker_trigger>
   3fefc:	e7f1      	b.n	3fee2 <rtc0_nrf5_isr+0xa>
   3fefe:	bf00      	nop
   3ff00:	4000b000 	.word	0x4000b000

0003ff04 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   3ff04:	2000      	movs	r0, #0
   3ff06:	f7f4 b8c7 	b.w	34098 <mayfly_run>
   3ff0a:	bf00      	nop

0003ff0c <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   3ff0c:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   3ff0e:	4b0e      	ldr	r3, [pc, #56]	; (3ff48 <ticker_stop_op_cb+0x3c>)
   3ff10:	4c0e      	ldr	r4, [pc, #56]	; (3ff4c <ticker_stop_op_cb+0x40>)
   3ff12:	781a      	ldrb	r2, [r3, #0]
   3ff14:	7823      	ldrb	r3, [r4, #0]
   3ff16:	429a      	cmp	r2, r3
   3ff18:	d006      	beq.n	3ff28 <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   3ff1a:	490d      	ldr	r1, [pc, #52]	; (3ff50 <ticker_stop_op_cb+0x44>)
   3ff1c:	4a0d      	ldr	r2, [pc, #52]	; (3ff54 <ticker_stop_op_cb+0x48>)
   3ff1e:	7809      	ldrb	r1, [r1, #0]
   3ff20:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   3ff22:	3301      	adds	r3, #1
   3ff24:	7023      	strb	r3, [r4, #0]
}
   3ff26:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   3ff28:	4a0b      	ldr	r2, [pc, #44]	; (3ff58 <ticker_stop_op_cb+0x4c>)
   3ff2a:	490c      	ldr	r1, [pc, #48]	; (3ff5c <ticker_stop_op_cb+0x50>)
   3ff2c:	480c      	ldr	r0, [pc, #48]	; (3ff60 <ticker_stop_op_cb+0x54>)
   3ff2e:	f240 3301 	movw	r3, #769	; 0x301
   3ff32:	f009 fd62 	bl	499fa <printk>
   3ff36:	4040      	eors	r0, r0
   3ff38:	f380 8811 	msr	BASEPRI, r0
   3ff3c:	f04f 0003 	mov.w	r0, #3
   3ff40:	df02      	svc	2
	preempt_stop_ack++;
   3ff42:	7823      	ldrb	r3, [r4, #0]
   3ff44:	e7e9      	b.n	3ff1a <ticker_stop_op_cb+0xe>
   3ff46:	bf00      	nop
   3ff48:	20007417 	.word	0x20007417
   3ff4c:	20007416 	.word	0x20007416
   3ff50:	20007414 	.word	0x20007414
   3ff54:	20007415 	.word	0x20007415
   3ff58:	000534d0 	.word	0x000534d0
   3ff5c:	00053518 	.word	0x00053518
   3ff60:	00052a70 	.word	0x00052a70

0003ff64 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   3ff64:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3ff66:	b9f8      	cbnz	r0, 3ffa8 <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   3ff68:	4b1e      	ldr	r3, [pc, #120]	; (3ffe4 <ticker_start_op_cb+0x80>)
   3ff6a:	4d1f      	ldr	r5, [pc, #124]	; (3ffe8 <ticker_start_op_cb+0x84>)
   3ff6c:	781a      	ldrb	r2, [r3, #0]
   3ff6e:	782b      	ldrb	r3, [r5, #0]
   3ff70:	429a      	cmp	r2, r3
   3ff72:	d027      	beq.n	3ffc4 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   3ff74:	4a1d      	ldr	r2, [pc, #116]	; (3ffec <ticker_start_op_cb+0x88>)
   3ff76:	4c1e      	ldr	r4, [pc, #120]	; (3fff0 <ticker_start_op_cb+0x8c>)
   3ff78:	7812      	ldrb	r2, [r2, #0]
   3ff7a:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   3ff7c:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   3ff7e:	4291      	cmp	r1, r2
	preempt_start_ack++;
   3ff80:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   3ff82:	b2d3      	uxtb	r3, r2
   3ff84:	d00d      	beq.n	3ffa2 <ticker_start_op_cb+0x3e>
   3ff86:	4a1b      	ldr	r2, [pc, #108]	; (3fff4 <ticker_start_op_cb+0x90>)
   3ff88:	491b      	ldr	r1, [pc, #108]	; (3fff8 <ticker_start_op_cb+0x94>)
   3ff8a:	481c      	ldr	r0, [pc, #112]	; (3fffc <ticker_start_op_cb+0x98>)
   3ff8c:	f240 330f 	movw	r3, #783	; 0x30f
   3ff90:	f009 fd33 	bl	499fa <printk>
   3ff94:	4040      	eors	r0, r0
   3ff96:	f380 8811 	msr	BASEPRI, r0
   3ff9a:	f04f 0003 	mov.w	r0, #3
   3ff9e:	df02      	svc	2
	preempt_req++;
   3ffa0:	7823      	ldrb	r3, [r4, #0]
   3ffa2:	3301      	adds	r3, #1
   3ffa4:	7023      	strb	r3, [r4, #0]
}
   3ffa6:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3ffa8:	4a12      	ldr	r2, [pc, #72]	; (3fff4 <ticker_start_op_cb+0x90>)
   3ffaa:	4915      	ldr	r1, [pc, #84]	; (40000 <ticker_start_op_cb+0x9c>)
   3ffac:	4813      	ldr	r0, [pc, #76]	; (3fffc <ticker_start_op_cb+0x98>)
   3ffae:	f240 330a 	movw	r3, #778	; 0x30a
   3ffb2:	f009 fd22 	bl	499fa <printk>
   3ffb6:	4040      	eors	r0, r0
   3ffb8:	f380 8811 	msr	BASEPRI, r0
   3ffbc:	f04f 0003 	mov.w	r0, #3
   3ffc0:	df02      	svc	2
   3ffc2:	e7d1      	b.n	3ff68 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   3ffc4:	4a0b      	ldr	r2, [pc, #44]	; (3fff4 <ticker_start_op_cb+0x90>)
   3ffc6:	490f      	ldr	r1, [pc, #60]	; (40004 <ticker_start_op_cb+0xa0>)
   3ffc8:	480c      	ldr	r0, [pc, #48]	; (3fffc <ticker_start_op_cb+0x98>)
   3ffca:	f44f 7343 	mov.w	r3, #780	; 0x30c
   3ffce:	f009 fd14 	bl	499fa <printk>
   3ffd2:	4040      	eors	r0, r0
   3ffd4:	f380 8811 	msr	BASEPRI, r0
   3ffd8:	f04f 0003 	mov.w	r0, #3
   3ffdc:	df02      	svc	2
	preempt_start_ack++;
   3ffde:	782b      	ldrb	r3, [r5, #0]
   3ffe0:	e7c8      	b.n	3ff74 <ticker_start_op_cb+0x10>
   3ffe2:	bf00      	nop
   3ffe4:	20007419 	.word	0x20007419
   3ffe8:	20007418 	.word	0x20007418
   3ffec:	20007414 	.word	0x20007414
   3fff0:	20007415 	.word	0x20007415
   3fff4:	000534d0 	.word	0x000534d0
   3fff8:	00053568 	.word	0x00053568
   3fffc:	00052a70 	.word	0x00052a70
   40000:	00052fe0 	.word	0x00052fe0
   40004:	00053540 	.word	0x00053540

00040008 <isr_race>:
	radio_status_reset();
   40008:	f002 be7c 	b.w	42d04 <radio_status_reset>

0004000c <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   4000c:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   4000e:	4a18      	ldr	r2, [pc, #96]	; (40070 <preempt_ticker_cb+0x64>)
   40010:	4c18      	ldr	r4, [pc, #96]	; (40074 <preempt_ticker_cb+0x68>)
   40012:	7812      	ldrb	r2, [r2, #0]
   40014:	7823      	ldrb	r3, [r4, #0]
   40016:	429a      	cmp	r2, r3
   40018:	d01b      	beq.n	40052 <preempt_ticker_cb+0x46>
	preempt_ack++;
   4001a:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   4001c:	4b16      	ldr	r3, [pc, #88]	; (40078 <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   4001e:	3101      	adds	r1, #1
   40020:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   40022:	2200      	movs	r2, #0
	preempt_ack++;
   40024:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   40026:	9903      	ldr	r1, [sp, #12]
   40028:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   4002a:	2001      	movs	r0, #1
   4002c:	4611      	mov	r1, r2
   4002e:	f7f3 ffd5 	bl	33fdc <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   40032:	b900      	cbnz	r0, 40036 <preempt_ticker_cb+0x2a>
}
   40034:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   40036:	4a11      	ldr	r2, [pc, #68]	; (4007c <preempt_ticker_cb+0x70>)
   40038:	4911      	ldr	r1, [pc, #68]	; (40080 <preempt_ticker_cb+0x74>)
   4003a:	4812      	ldr	r0, [pc, #72]	; (40084 <preempt_ticker_cb+0x78>)
   4003c:	f240 3376 	movw	r3, #886	; 0x376
   40040:	f009 fcdb 	bl	499fa <printk>
   40044:	4040      	eors	r0, r0
   40046:	f380 8811 	msr	BASEPRI, r0
   4004a:	f04f 0003 	mov.w	r0, #3
   4004e:	df02      	svc	2
}
   40050:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   40052:	4a0a      	ldr	r2, [pc, #40]	; (4007c <preempt_ticker_cb+0x70>)
   40054:	490c      	ldr	r1, [pc, #48]	; (40088 <preempt_ticker_cb+0x7c>)
   40056:	480b      	ldr	r0, [pc, #44]	; (40084 <preempt_ticker_cb+0x78>)
   40058:	f44f 735c 	mov.w	r3, #880	; 0x370
   4005c:	f009 fccd 	bl	499fa <printk>
   40060:	4040      	eors	r0, r0
   40062:	f380 8811 	msr	BASEPRI, r0
   40066:	f04f 0003 	mov.w	r0, #3
   4006a:	df02      	svc	2
   4006c:	e7d5      	b.n	4001a <preempt_ticker_cb+0xe>
   4006e:	bf00      	nop
   40070:	20007415 	.word	0x20007415
   40074:	20007414 	.word	0x20007414
   40078:	20000d84 	.word	0x20000d84
   4007c:	000534d0 	.word	0x000534d0
   40080:	00052d4c 	.word	0x00052d4c
   40084:	00052a70 	.word	0x00052a70
   40088:	00053584 	.word	0x00053584

0004008c <preempt_ticker_stop>:
{
   4008c:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   4008e:	4917      	ldr	r1, [pc, #92]	; (400ec <preempt_ticker_stop+0x60>)
   40090:	4a17      	ldr	r2, [pc, #92]	; (400f0 <preempt_ticker_stop+0x64>)
   40092:	780b      	ldrb	r3, [r1, #0]
   40094:	7812      	ldrb	r2, [r2, #0]
   40096:	429a      	cmp	r2, r3
{
   40098:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
   4009a:	d122      	bne.n	400e2 <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   4009c:	4b15      	ldr	r3, [pc, #84]	; (400f4 <preempt_ticker_stop+0x68>)
   4009e:	4a16      	ldr	r2, [pc, #88]	; (400f8 <preempt_ticker_stop+0x6c>)
   400a0:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   400a2:	7812      	ldrb	r2, [r2, #0]
   400a4:	429a      	cmp	r2, r3
   400a6:	d01c      	beq.n	400e2 <preempt_ticker_stop+0x56>
	preempt_stop_req++;
   400a8:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   400aa:	4b14      	ldr	r3, [pc, #80]	; (400fc <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   400ac:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   400ae:	2200      	movs	r2, #0
	preempt_stop_req++;
   400b0:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   400b2:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   400b4:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   400b6:	4611      	mov	r1, r2
   400b8:	4610      	mov	r0, r2
   400ba:	f7f5 fa61 	bl	35580 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   400be:	4604      	mov	r4, r0
   400c0:	b178      	cbz	r0, 400e2 <preempt_ticker_stop+0x56>
   400c2:	2802      	cmp	r0, #2
   400c4:	d00e      	beq.n	400e4 <preempt_ticker_stop+0x58>
   400c6:	4a0e      	ldr	r2, [pc, #56]	; (40100 <preempt_ticker_stop+0x74>)
   400c8:	490e      	ldr	r1, [pc, #56]	; (40104 <preempt_ticker_stop+0x78>)
   400ca:	480f      	ldr	r0, [pc, #60]	; (40108 <preempt_ticker_stop+0x7c>)
   400cc:	f240 3362 	movw	r3, #866	; 0x362
   400d0:	f009 fc93 	bl	499fa <printk>
   400d4:	4040      	eors	r0, r0
   400d6:	f380 8811 	msr	BASEPRI, r0
   400da:	f04f 0003 	mov.w	r0, #3
   400de:	df02      	svc	2
   400e0:	e000      	b.n	400e4 <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   400e2:	2400      	movs	r4, #0
}
   400e4:	4620      	mov	r0, r4
   400e6:	b002      	add	sp, #8
   400e8:	bd10      	pop	{r4, pc}
   400ea:	bf00      	nop
   400ec:	20007417 	.word	0x20007417
   400f0:	20007416 	.word	0x20007416
   400f4:	20007414 	.word	0x20007414
   400f8:	20007415 	.word	0x20007415
   400fc:	0003ff0d 	.word	0x0003ff0d
   40100:	000534d0 	.word	0x000534d0
   40104:	00052e20 	.word	0x00052e20
   40108:	00052a70 	.word	0x00052a70

0004010c <preempt_ticker_start>:
{
   4010c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull = HDR_LLL2ULL(p->param);
   40110:	68cb      	ldr	r3, [r1, #12]
	preempt_anchor = p->ticks_at_expire;
   40112:	f8d1 8000 	ldr.w	r8, [r1]
	ull = HDR_LLL2ULL(p->param);
   40116:	681a      	ldr	r2, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   40118:	4b2a      	ldr	r3, [pc, #168]	; (401c4 <preempt_ticker_start+0xb8>)
   4011a:	4f2b      	ldr	r7, [pc, #172]	; (401c8 <preempt_ticker_start+0xbc>)
	preempt_to = MAX(ull->ticks_active_to_start,
   4011c:	68d6      	ldr	r6, [r2, #12]
{
   4011e:	460d      	mov	r5, r1
   40120:	4604      	mov	r4, r0
	if ((preempt_start_req != preempt_start_ack) ||
   40122:	7819      	ldrb	r1, [r3, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   40124:	6890      	ldr	r0, [r2, #8]
   40126:	6853      	ldr	r3, [r2, #4]
   40128:	4298      	cmp	r0, r3
   4012a:	bf2c      	ite	cs
   4012c:	ebc6 0600 	rsbcs	r6, r6, r0
   40130:	ebc6 0603 	rsbcc	r6, r6, r3
	if ((preempt_start_req != preempt_start_ack) ||
   40134:	783b      	ldrb	r3, [r7, #0]
   40136:	4299      	cmp	r1, r3
{
   40138:	b08a      	sub	sp, #40	; 0x28
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   4013a:	eb08 0906 	add.w	r9, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   4013e:	d033      	beq.n	401a8 <preempt_ticker_start+0x9c>
		if (!prev || prev->is_aborted ||
   40140:	2c00      	cmp	r4, #0
   40142:	d03a      	beq.n	401ba <preempt_ticker_start+0xae>
   40144:	7f23      	ldrb	r3, [r4, #28]
   40146:	079b      	lsls	r3, r3, #30
   40148:	d437      	bmi.n	401ba <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   4014a:	f8df a080 	ldr.w	sl, [pc, #128]	; 401cc <preempt_ticker_start+0xc0>
   4014e:	f8da 0000 	ldr.w	r0, [sl]
   40152:	eba9 0000 	sub.w	r0, r9, r0
		if (!prev || prev->is_aborted ||
   40156:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   4015a:	d022      	beq.n	401a2 <preempt_ticker_start+0x96>
		preempt_ticker_stop();
   4015c:	f7ff ff96 	bl	4008c <preempt_ticker_stop>
		prev->is_aborted = 1U;
   40160:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   40162:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   40164:	f8ca 9000 	str.w	r9, [sl]
		prev->is_aborted = 1U;
   40168:	f043 0302 	orr.w	r3, r3, #2
   4016c:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   4016e:	4620      	mov	r0, r4
   40170:	69a3      	ldr	r3, [r4, #24]
   40172:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   40174:	4b16      	ldr	r3, [pc, #88]	; (401d0 <preempt_ticker_start+0xc4>)
	ticks_at_preempt = ticks_at_preempt_new;
   40176:	f8ca 9000 	str.w	r9, [sl]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   4017a:	e9cd 3507 	strd	r3, r5, [sp, #28]
   4017e:	4b15      	ldr	r3, [pc, #84]	; (401d4 <preempt_ticker_start+0xc8>)
   40180:	9600      	str	r6, [sp, #0]
   40182:	2200      	movs	r2, #0
   40184:	e9cd 3505 	strd	r3, r5, [sp, #20]
   40188:	e9cd 2203 	strd	r2, r2, [sp, #12]
   4018c:	e9cd 2201 	strd	r2, r2, [sp, #4]
	preempt_start_req++;
   40190:	783c      	ldrb	r4, [r7, #0]
   40192:	3401      	adds	r4, #1
   40194:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   40196:	4643      	mov	r3, r8
   40198:	4611      	mov	r1, r2
   4019a:	4610      	mov	r0, r2
	preempt_start_req++;
   4019c:	703c      	strb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   4019e:	f7f5 f963 	bl	35468 <ticker_start>
}
   401a2:	b00a      	add	sp, #40	; 0x28
   401a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   401a8:	4b0b      	ldr	r3, [pc, #44]	; (401d8 <preempt_ticker_start+0xcc>)
   401aa:	4a0c      	ldr	r2, [pc, #48]	; (401dc <preempt_ticker_start+0xd0>)
   401ac:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   401ae:	7812      	ldrb	r2, [r2, #0]
   401b0:	429a      	cmp	r2, r3
   401b2:	d1c5      	bne.n	40140 <preempt_ticker_start+0x34>
   401b4:	f8df a014 	ldr.w	sl, [pc, #20]	; 401cc <preempt_ticker_start+0xc0>
   401b8:	e7dc      	b.n	40174 <preempt_ticker_start+0x68>
			return TICKER_STATUS_SUCCESS;
   401ba:	2000      	movs	r0, #0
}
   401bc:	b00a      	add	sp, #40	; 0x28
   401be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   401c2:	bf00      	nop
   401c4:	20007418 	.word	0x20007418
   401c8:	20007419 	.word	0x20007419
   401cc:	20006110 	.word	0x20006110
   401d0:	0003ff65 	.word	0x0003ff65
   401d4:	0004000d 	.word	0x0004000d
   401d8:	20007414 	.word	0x20007414
   401dc:	20007415 	.word	0x20007415

000401e0 <preempt>:

static void preempt(void *param)
{
   401e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   401e2:	4e4b      	ldr	r6, [pc, #300]	; (40310 <preempt+0x130>)
   401e4:	68b3      	ldr	r3, [r6, #8]
{
   401e6:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   401e8:	b15b      	cbz	r3, 40202 <preempt+0x22>
   401ea:	6833      	ldr	r3, [r6, #0]
   401ec:	b14b      	cbz	r3, 40202 <preempt+0x22>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   401ee:	23ff      	movs	r3, #255	; 0xff
   401f0:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   401f2:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   401f6:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   401fa:	f7f7 fe9f 	bl	37f3c <ull_prepare_dequeue_iter>
	if (!next) {
   401fe:	4601      	mov	r1, r0
   40200:	b930      	cbnz	r0, 40210 <preempt+0x30>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   40202:	b009      	add	sp, #36	; 0x24
   40204:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = ull_prepare_dequeue_iter(&idx);
   40206:	f7f7 fe99 	bl	37f3c <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   4020a:	4601      	mov	r1, r0
   4020c:	2800      	cmp	r0, #0
   4020e:	d0f8      	beq.n	40202 <preempt+0x22>
   40210:	7f0b      	ldrb	r3, [r1, #28]
   40212:	f013 0403 	ands.w	r4, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   40216:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   4021a:	d1f4      	bne.n	40206 <preempt+0x26>
	if (next != param) {
   4021c:	428d      	cmp	r5, r1
   4021e:	d126      	bne.n	4026e <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   40220:	6873      	ldr	r3, [r6, #4]
   40222:	6831      	ldr	r1, [r6, #0]
   40224:	68e8      	ldr	r0, [r5, #12]
   40226:	aa03      	add	r2, sp, #12
   40228:	4798      	blx	r3
	if (!err) {
   4022a:	4607      	mov	r7, r0
   4022c:	b1b0      	cbz	r0, 4025c <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   4022e:	68b3      	ldr	r3, [r6, #8]
   40230:	6831      	ldr	r1, [r6, #0]
   40232:	4620      	mov	r0, r4
   40234:	4798      	blx	r3
	if (err == -EAGAIN) {
   40236:	f117 0f0b 	cmn.w	r7, #11
   4023a:	d02c      	beq.n	40296 <preempt+0xb6>
		LL_ASSERT(err == -ECANCELED);
   4023c:	378c      	adds	r7, #140	; 0x8c
   4023e:	d0e0      	beq.n	40202 <preempt+0x22>
   40240:	4a34      	ldr	r2, [pc, #208]	; (40314 <preempt+0x134>)
   40242:	4935      	ldr	r1, [pc, #212]	; (40318 <preempt+0x138>)
   40244:	4835      	ldr	r0, [pc, #212]	; (4031c <preempt+0x13c>)
   40246:	f44f 7374 	mov.w	r3, #976	; 0x3d0
   4024a:	f009 fbd6 	bl	499fa <printk>
   4024e:	4040      	eors	r0, r0
   40250:	f380 8811 	msr	BASEPRI, r0
   40254:	f04f 0003 	mov.w	r0, #3
   40258:	df02      	svc	2
   4025a:	e7d2      	b.n	40202 <preempt+0x22>
		next->is_aborted = 1;
   4025c:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   4025e:	69aa      	ldr	r2, [r5, #24]
   40260:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   40262:	f043 0302 	orr.w	r3, r3, #2
   40266:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   40268:	4628      	mov	r0, r5
   4026a:	4790      	blx	r2
		return;
   4026c:	e7c9      	b.n	40202 <preempt+0x22>
		ret = preempt_ticker_start(NULL, next);
   4026e:	4620      	mov	r0, r4
   40270:	f7ff ff4c 	bl	4010c <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   40274:	f030 0302 	bics.w	r3, r0, #2
   40278:	d0c3      	beq.n	40202 <preempt+0x22>
   4027a:	4a26      	ldr	r2, [pc, #152]	; (40314 <preempt+0x134>)
   4027c:	4928      	ldr	r1, [pc, #160]	; (40320 <preempt+0x140>)
   4027e:	4827      	ldr	r0, [pc, #156]	; (4031c <preempt+0x13c>)
   40280:	f44f 7367 	mov.w	r3, #924	; 0x39c
   40284:	f009 fbb9 	bl	499fa <printk>
   40288:	4040      	eors	r0, r0
   4028a:	f380 8811 	msr	BASEPRI, r0
   4028e:	f04f 0003 	mov.w	r0, #3
   40292:	df02      	svc	2
   40294:	e7b5      	b.n	40202 <preempt+0x22>
		iter_idx = UINT8_MAX;
   40296:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   40298:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   4029c:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   402a0:	f7f7 fe4c 	bl	37f3c <ull_prepare_dequeue_iter>
		while (iter) {
   402a4:	b928      	cbnz	r0, 402b2 <preempt+0xd2>
   402a6:	e013      	b.n	402d0 <preempt+0xf0>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   402a8:	f10d 000b 	add.w	r0, sp, #11
   402ac:	f7f7 fe46 	bl	37f3c <ull_prepare_dequeue_iter>
		while (iter) {
   402b0:	b170      	cbz	r0, 402d0 <preempt+0xf0>
			if (!iter->is_aborted &&
   402b2:	7f03      	ldrb	r3, [r0, #28]
   402b4:	079a      	lsls	r2, r3, #30
   402b6:	d4f7      	bmi.n	402a8 <preempt+0xc8>
			    event.curr.param == iter->prepare_param.param) {
   402b8:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   402ba:	6831      	ldr	r1, [r6, #0]
   402bc:	4291      	cmp	r1, r2
   402be:	d1f3      	bne.n	402a8 <preempt+0xc8>
				iter->is_aborted = 1;
   402c0:	f043 0302 	orr.w	r3, r3, #2
   402c4:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   402c6:	6983      	ldr	r3, [r0, #24]
   402c8:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   402ca:	f88d 400b 	strb.w	r4, [sp, #11]
   402ce:	e7eb      	b.n	402a8 <preempt+0xc8>
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   402d0:	2301      	movs	r3, #1
	prepare_param.param = event.curr.param;
   402d2:	6830      	ldr	r0, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   402d4:	9300      	str	r3, [sp, #0]
	struct lll_prepare_param prepare_param = {0};
   402d6:	2100      	movs	r1, #0
   402d8:	e9cd 1104 	strd	r1, r1, [sp, #16]
   402dc:	9106      	str	r1, [sp, #24]
	prepare_param.param = event.curr.param;
   402de:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   402e0:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   402e2:	9b03      	ldr	r3, [sp, #12]
   402e4:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   402e8:	aa04      	add	r2, sp, #16
   402ea:	f7f7 fde7 	bl	37ebc <ull_prepare_enqueue>
		LL_ASSERT(iter);
   402ee:	2800      	cmp	r0, #0
   402f0:	d187      	bne.n	40202 <preempt+0x22>
   402f2:	4a08      	ldr	r2, [pc, #32]	; (40314 <preempt+0x134>)
   402f4:	490b      	ldr	r1, [pc, #44]	; (40324 <preempt+0x144>)
   402f6:	4809      	ldr	r0, [pc, #36]	; (4031c <preempt+0x13c>)
   402f8:	f240 33ce 	movw	r3, #974	; 0x3ce
   402fc:	f009 fb7d 	bl	499fa <printk>
   40300:	4040      	eors	r0, r0
   40302:	f380 8811 	msr	BASEPRI, r0
   40306:	f04f 0003 	mov.w	r0, #3
   4030a:	df02      	svc	2
   4030c:	e779      	b.n	40202 <preempt+0x22>
   4030e:	bf00      	nop
   40310:	20006118 	.word	0x20006118
   40314:	000534d0 	.word	0x000534d0
   40318:	000535a8 	.word	0x000535a8
   4031c:	00052a70 	.word	0x00052a70
   40320:	00052e20 	.word	0x00052e20
   40324:	000535a0 	.word	0x000535a0

00040328 <lll_init>:
{
   40328:	b510      	push	{r4, lr}
   4032a:	4816      	ldr	r0, [pc, #88]	; (40384 <lll_init+0x5c>)
   4032c:	f007 fad8 	bl	478e0 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   40330:	4b15      	ldr	r3, [pc, #84]	; (40388 <lll_init+0x60>)
   40332:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   40334:	b310      	cbz	r0, 4037c <lll_init+0x54>
	event.curr.abort_cb = NULL;
   40336:	4b15      	ldr	r3, [pc, #84]	; (4038c <lll_init+0x64>)
   40338:	2400      	movs	r4, #0
   4033a:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   4033c:	f000 fb12 	bl	40964 <lll_clock_init>
	if (err < 0) {
   40340:	2800      	cmp	r0, #0
   40342:	db1a      	blt.n	4037a <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   40344:	4621      	mov	r1, r4
   40346:	2001      	movs	r0, #1
   40348:	4622      	mov	r2, r4
   4034a:	f7ec fc5f 	bl	2cc0c <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   4034e:	4622      	mov	r2, r4
   40350:	200b      	movs	r0, #11
   40352:	2101      	movs	r1, #1
   40354:	f7ec fc5a 	bl	2cc0c <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   40358:	4622      	mov	r2, r4
   4035a:	4621      	mov	r1, r4
   4035c:	2018      	movs	r0, #24
   4035e:	f7ec fc55 	bl	2cc0c <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   40362:	2001      	movs	r0, #1
   40364:	f7ec fc22 	bl	2cbac <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   40368:	200b      	movs	r0, #11
   4036a:	f7ec fc1f 	bl	2cbac <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   4036e:	2018      	movs	r0, #24
   40370:	f7ec fc1c 	bl	2cbac <arch_irq_enable>
	radio_setup();
   40374:	f002 fbd8 	bl	42b28 <radio_setup>
	return 0;
   40378:	4620      	mov	r0, r4
}
   4037a:	bd10      	pop	{r4, pc}
		return -ENODEV;
   4037c:	f06f 0012 	mvn.w	r0, #18
}
   40380:	bd10      	pop	{r4, pc}
   40382:	bf00      	nop
   40384:	000535b4 	.word	0x000535b4
   40388:	20006114 	.word	0x20006114
   4038c:	20006118 	.word	0x20006118

00040390 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   40390:	4a05      	ldr	r2, [pc, #20]	; (403a8 <lll_csrand_get+0x18>)
{
   40392:	b410      	push	{r4}
   40394:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   40396:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   40398:	6884      	ldr	r4, [r0, #8]
   4039a:	6824      	ldr	r4, [r4, #0]
   4039c:	b28a      	uxth	r2, r1
   4039e:	4619      	mov	r1, r3
   403a0:	4623      	mov	r3, r4
}
   403a2:	bc10      	pop	{r4}
   403a4:	4718      	bx	r3
   403a6:	bf00      	nop
   403a8:	20006114 	.word	0x20006114

000403ac <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   403ac:	4b08      	ldr	r3, [pc, #32]	; (403d0 <lll_csrand_isr_get+0x24>)
{
   403ae:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   403b0:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   403b2:	68ab      	ldr	r3, [r5, #8]
   403b4:	685c      	ldr	r4, [r3, #4]
   403b6:	b134      	cbz	r4, 403c6 <lll_csrand_isr_get+0x1a>
   403b8:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   403ba:	46a4      	mov	ip, r4
   403bc:	4601      	mov	r1, r0
   403be:	2300      	movs	r3, #0
   403c0:	4628      	mov	r0, r5
}
   403c2:	bc30      	pop	{r4, r5}
   403c4:	4760      	bx	ip
   403c6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   403ca:	bc30      	pop	{r4, r5}
   403cc:	4770      	bx	lr
   403ce:	bf00      	nop
   403d0:	20006114 	.word	0x20006114

000403d4 <lll_rand_isr_get>:
int lll_rand_isr_get(void *buf, size_t len)
   403d4:	4b08      	ldr	r3, [pc, #32]	; (403f8 <lll_rand_isr_get+0x24>)
   403d6:	b430      	push	{r4, r5}
   403d8:	681d      	ldr	r5, [r3, #0]
   403da:	68ab      	ldr	r3, [r5, #8]
   403dc:	685c      	ldr	r4, [r3, #4]
   403de:	b134      	cbz	r4, 403ee <lll_rand_isr_get+0x1a>
   403e0:	b28a      	uxth	r2, r1
   403e2:	46a4      	mov	ip, r4
   403e4:	4601      	mov	r1, r0
   403e6:	2300      	movs	r3, #0
   403e8:	4628      	mov	r0, r5
   403ea:	bc30      	pop	{r4, r5}
   403ec:	4760      	bx	ip
   403ee:	f06f 0085 	mvn.w	r0, #133	; 0x85
   403f2:	bc30      	pop	{r4, r5}
   403f4:	4770      	bx	lr
   403f6:	bf00      	nop
   403f8:	20006114 	.word	0x20006114

000403fc <lll_reset>:
}
   403fc:	2000      	movs	r0, #0
   403fe:	4770      	bx	lr

00040400 <lll_disable>:
{
   40400:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   40402:	4604      	mov	r4, r0
{
   40404:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   40406:	b378      	cbz	r0, 40468 <lll_disable+0x68>
   40408:	4b23      	ldr	r3, [pc, #140]	; (40498 <lll_disable+0x98>)
   4040a:	681a      	ldr	r2, [r3, #0]
   4040c:	4282      	cmp	r2, r0
   4040e:	d025      	beq.n	4045c <lll_disable+0x5c>
		idx = UINT8_MAX;
   40410:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   40412:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   40416:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   4041a:	f7f7 fd8f 	bl	37f3c <ull_prepare_dequeue_iter>
		while (next) {
   4041e:	b938      	cbnz	r0, 40430 <lll_disable+0x30>
   40420:	e01a      	b.n	40458 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   40422:	42a1      	cmp	r1, r4
   40424:	d00a      	beq.n	4043c <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   40426:	f10d 0007 	add.w	r0, sp, #7
   4042a:	f7f7 fd87 	bl	37f3c <ull_prepare_dequeue_iter>
		while (next) {
   4042e:	b198      	cbz	r0, 40458 <lll_disable+0x58>
			if (!next->is_aborted &&
   40430:	7f03      	ldrb	r3, [r0, #28]
   40432:	079b      	lsls	r3, r3, #30
   40434:	d4f7      	bmi.n	40426 <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   40436:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   40438:	2c00      	cmp	r4, #0
   4043a:	d1f2      	bne.n	40422 <lll_disable+0x22>
				next->is_aborted = 1;
   4043c:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   4043e:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   40440:	f043 0302 	orr.w	r3, r3, #2
   40444:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   40446:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   40448:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   4044c:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   40450:	f7f7 fd74 	bl	37f3c <ull_prepare_dequeue_iter>
		while (next) {
   40454:	2800      	cmp	r0, #0
   40456:	d1eb      	bne.n	40430 <lll_disable+0x30>
}
   40458:	b003      	add	sp, #12
   4045a:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   4045c:	689b      	ldr	r3, [r3, #8]
   4045e:	b16b      	cbz	r3, 4047c <lll_disable+0x7c>
   40460:	4601      	mov	r1, r0
			event.curr.abort_cb(NULL, event.curr.param);
   40462:	2000      	movs	r0, #0
   40464:	4798      	blx	r3
   40466:	e7d3      	b.n	40410 <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   40468:	4a0b      	ldr	r2, [pc, #44]	; (40498 <lll_disable+0x98>)
   4046a:	6893      	ldr	r3, [r2, #8]
   4046c:	2b00      	cmp	r3, #0
   4046e:	d0cf      	beq.n	40410 <lll_disable+0x10>
   40470:	6811      	ldr	r1, [r2, #0]
   40472:	2900      	cmp	r1, #0
   40474:	d0cc      	beq.n	40410 <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   40476:	2000      	movs	r0, #0
   40478:	4798      	blx	r3
   4047a:	e7c9      	b.n	40410 <lll_disable+0x10>
			LL_ASSERT(!param);
   4047c:	4a07      	ldr	r2, [pc, #28]	; (4049c <lll_disable+0x9c>)
   4047e:	4908      	ldr	r1, [pc, #32]	; (404a0 <lll_disable+0xa0>)
   40480:	4808      	ldr	r0, [pc, #32]	; (404a4 <lll_disable+0xa4>)
   40482:	23fd      	movs	r3, #253	; 0xfd
   40484:	f009 fab9 	bl	499fa <printk>
   40488:	4040      	eors	r0, r0
   4048a:	f380 8811 	msr	BASEPRI, r0
   4048e:	f04f 0003 	mov.w	r0, #3
   40492:	df02      	svc	2
   40494:	e7bc      	b.n	40410 <lll_disable+0x10>
   40496:	bf00      	nop
   40498:	20006118 	.word	0x20006118
   4049c:	000534d0 	.word	0x000534d0
   404a0:	000535b8 	.word	0x000535b8
   404a4:	00052a70 	.word	0x00052a70

000404a8 <lll_prepare_done>:
}
   404a8:	2000      	movs	r0, #0
   404aa:	4770      	bx	lr

000404ac <lll_done>:
{
   404ac:	b538      	push	{r3, r4, r5, lr}
   404ae:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   404b0:	f7f7 fd36 	bl	37f20 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   404b4:	b154      	cbz	r4, 404cc <lll_done+0x20>
   404b6:	b310      	cbz	r0, 404fe <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   404b8:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   404ba:	2000      	movs	r0, #0
   404bc:	f7f7 fd5e 	bl	37f7c <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   404c0:	4620      	mov	r0, r4
   404c2:	f7f7 fdbf 	bl	38044 <ull_event_done>
	LL_ASSERT(evdone);
   404c6:	b158      	cbz	r0, 404e0 <lll_done+0x34>
}
   404c8:	2000      	movs	r0, #0
   404ca:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   404cc:	4d1a      	ldr	r5, [pc, #104]	; (40538 <lll_done+0x8c>)
   404ce:	68ab      	ldr	r3, [r5, #8]
   404d0:	b31b      	cbz	r3, 4051a <lll_done+0x6e>
		param = event.curr.param;
   404d2:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   404d4:	2300      	movs	r3, #0
   404d6:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   404d8:	602b      	str	r3, [r5, #0]
		if (param) {
   404da:	2c00      	cmp	r4, #0
   404dc:	d1ec      	bne.n	404b8 <lll_done+0xc>
   404de:	e7ec      	b.n	404ba <lll_done+0xe>
	LL_ASSERT(evdone);
   404e0:	4a16      	ldr	r2, [pc, #88]	; (4053c <lll_done+0x90>)
   404e2:	4917      	ldr	r1, [pc, #92]	; (40540 <lll_done+0x94>)
   404e4:	4817      	ldr	r0, [pc, #92]	; (40544 <lll_done+0x98>)
   404e6:	f240 136d 	movw	r3, #365	; 0x16d
   404ea:	f009 fa86 	bl	499fa <printk>
   404ee:	4040      	eors	r0, r0
   404f0:	f380 8811 	msr	BASEPRI, r0
   404f4:	f04f 0003 	mov.w	r0, #3
   404f8:	df02      	svc	2
}
   404fa:	2000      	movs	r0, #0
   404fc:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   404fe:	4a0f      	ldr	r2, [pc, #60]	; (4053c <lll_done+0x90>)
   40500:	4911      	ldr	r1, [pc, #68]	; (40548 <lll_done+0x9c>)
   40502:	4810      	ldr	r0, [pc, #64]	; (40544 <lll_done+0x98>)
   40504:	f240 1337 	movw	r3, #311	; 0x137
   40508:	f009 fa77 	bl	499fa <printk>
   4050c:	4040      	eors	r0, r0
   4050e:	f380 8811 	msr	BASEPRI, r0
   40512:	f04f 0003 	mov.w	r0, #3
   40516:	df02      	svc	2
		ull = HDR_LLL2ULL(param);
   40518:	e7ce      	b.n	404b8 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   4051a:	4a08      	ldr	r2, [pc, #32]	; (4053c <lll_done+0x90>)
   4051c:	490b      	ldr	r1, [pc, #44]	; (4054c <lll_done+0xa0>)
   4051e:	4809      	ldr	r0, [pc, #36]	; (40544 <lll_done+0x98>)
   40520:	f240 133d 	movw	r3, #317	; 0x13d
   40524:	f009 fa69 	bl	499fa <printk>
   40528:	4040      	eors	r0, r0
   4052a:	f380 8811 	msr	BASEPRI, r0
   4052e:	f04f 0003 	mov.w	r0, #3
   40532:	df02      	svc	2
   40534:	e7cd      	b.n	404d2 <lll_done+0x26>
   40536:	bf00      	nop
   40538:	20006118 	.word	0x20006118
   4053c:	000534d0 	.word	0x000534d0
   40540:	000535e4 	.word	0x000535e4
   40544:	00052a70 	.word	0x00052a70
   40548:	000535c0 	.word	0x000535c0
   4054c:	000535d0 	.word	0x000535d0

00040550 <lll_is_done>:
	*is_resume = (param != event.curr.param);
   40550:	4a05      	ldr	r2, [pc, #20]	; (40568 <lll_is_done+0x18>)
   40552:	6813      	ldr	r3, [r2, #0]
	return !event.curr.abort_cb;
   40554:	6892      	ldr	r2, [r2, #8]
	*is_resume = (param != event.curr.param);
   40556:	1a1b      	subs	r3, r3, r0
   40558:	bf18      	it	ne
   4055a:	2301      	movne	r3, #1
}
   4055c:	fab2 f082 	clz	r0, r2
	*is_resume = (param != event.curr.param);
   40560:	700b      	strb	r3, [r1, #0]
}
   40562:	0940      	lsrs	r0, r0, #5
   40564:	4770      	bx	lr
   40566:	bf00      	nop
   40568:	20006118 	.word	0x20006118

0004056c <lll_is_abort_cb>:
}
   4056c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   40570:	4770      	bx	lr
   40572:	bf00      	nop

00040574 <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   40574:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   40578:	2a00      	cmp	r2, #0
   4057a:	db04      	blt.n	40586 <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   4057c:	429a      	cmp	r2, r3
   4057e:	bf38      	it	cc
   40580:	461a      	movcc	r2, r3
   40582:	4610      	mov	r0, r2
}
   40584:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   40586:	68c0      	ldr	r0, [r0, #12]
   40588:	4298      	cmp	r0, r3
   4058a:	bf38      	it	cc
   4058c:	4618      	movcc	r0, r3
   4058e:	4770      	bx	lr

00040590 <lll_preempt_calc>:
{
   40590:	b510      	push	{r4, lr}
   40592:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   40594:	f7f5 f894 	bl	356c0 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   40598:	1b02      	subs	r2, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   4059a:	0213      	lsls	r3, r2, #8
   4059c:	d405      	bmi.n	405aa <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   4059e:	1cd0      	adds	r0, r2, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   405a0:	2809      	cmp	r0, #9
   405a2:	bf94      	ite	ls
   405a4:	2000      	movls	r0, #0
   405a6:	2001      	movhi	r0, #1
}
   405a8:	bd10      	pop	{r4, pc}
		return 0;
   405aa:	2000      	movs	r0, #0
}
   405ac:	bd10      	pop	{r4, pc}
   405ae:	bf00      	nop

000405b0 <lll_chan_set>:
	switch (chan) {
   405b0:	2826      	cmp	r0, #38	; 0x26
{
   405b2:	b510      	push	{r4, lr}
   405b4:	4604      	mov	r4, r0
	switch (chan) {
   405b6:	d01c      	beq.n	405f2 <lll_chan_set+0x42>
   405b8:	2827      	cmp	r0, #39	; 0x27
   405ba:	d012      	beq.n	405e2 <lll_chan_set+0x32>
   405bc:	2825      	cmp	r0, #37	; 0x25
   405be:	d008      	beq.n	405d2 <lll_chan_set+0x22>
		if (chan < 11) {
   405c0:	280a      	cmp	r0, #10
   405c2:	d91e      	bls.n	40602 <lll_chan_set+0x52>
		} else if (chan < 40) {
   405c4:	2827      	cmp	r0, #39	; 0x27
   405c6:	d821      	bhi.n	4060c <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   405c8:	3003      	adds	r0, #3
   405ca:	0040      	lsls	r0, r0, #1
   405cc:	f002 fb08 	bl	42be0 <radio_freq_chan_set>
   405d0:	e002      	b.n	405d8 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   405d2:	2002      	movs	r0, #2
   405d4:	f002 fb04 	bl	42be0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   405d8:	4620      	mov	r0, r4
}
   405da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   405de:	f002 bb05 	b.w	42bec <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   405e2:	2050      	movs	r0, #80	; 0x50
   405e4:	f002 fafc 	bl	42be0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   405e8:	4620      	mov	r0, r4
}
   405ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   405ee:	f002 bafd 	b.w	42bec <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   405f2:	201a      	movs	r0, #26
   405f4:	f002 faf4 	bl	42be0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   405f8:	4620      	mov	r0, r4
}
   405fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   405fe:	f002 baf5 	b.w	42bec <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   40602:	3002      	adds	r0, #2
   40604:	0040      	lsls	r0, r0, #1
   40606:	f002 faeb 	bl	42be0 <radio_freq_chan_set>
   4060a:	e7e5      	b.n	405d8 <lll_chan_set+0x28>
			LL_ASSERT(0);
   4060c:	4a06      	ldr	r2, [pc, #24]	; (40628 <lll_chan_set+0x78>)
   4060e:	4907      	ldr	r1, [pc, #28]	; (4062c <lll_chan_set+0x7c>)
   40610:	4807      	ldr	r0, [pc, #28]	; (40630 <lll_chan_set+0x80>)
   40612:	f240 13df 	movw	r3, #479	; 0x1df
   40616:	f009 f9f0 	bl	499fa <printk>
   4061a:	4040      	eors	r0, r0
   4061c:	f380 8811 	msr	BASEPRI, r0
   40620:	f04f 0003 	mov.w	r0, #3
   40624:	df02      	svc	2
   40626:	e7d7      	b.n	405d8 <lll_chan_set+0x28>
   40628:	000534d0 	.word	0x000534d0
   4062c:	00052ad0 	.word	0x00052ad0
   40630:	00052a70 	.word	0x00052a70

00040634 <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   40634:	f002 bb36 	b.w	42ca4 <radio_tx_ready_delay_get>

00040638 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   40638:	f002 bb3c 	b.w	42cb4 <radio_rx_ready_delay_get>

0004063c <lll_isr_tx_status_reset>:
{
   4063c:	b508      	push	{r3, lr}
	radio_status_reset();
   4063e:	f002 fb61 	bl	42d04 <radio_status_reset>
}
   40642:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   40646:	f002 bcc1 	b.w	42fcc <radio_tmr_status_reset>
   4064a:	bf00      	nop

0004064c <lll_isr_rx_status_reset>:
{
   4064c:	b508      	push	{r3, lr}
	radio_status_reset();
   4064e:	f002 fb59 	bl	42d04 <radio_status_reset>
	radio_tmr_status_reset();
   40652:	f002 fcbb 	bl	42fcc <radio_tmr_status_reset>
}
   40656:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   4065a:	f002 bc63 	b.w	42f24 <radio_rssi_status_reset>
   4065e:	bf00      	nop

00040660 <lll_isr_status_reset>:
{
   40660:	b508      	push	{r3, lr}
	radio_status_reset();
   40662:	f002 fb4f 	bl	42d04 <radio_status_reset>
	radio_tmr_status_reset();
   40666:	f002 fcb1 	bl	42fcc <radio_tmr_status_reset>
	radio_filter_status_reset();
   4066a:	f002 fc97 	bl	42f9c <radio_filter_status_reset>
	radio_ar_status_reset();
   4066e:	f002 fea9 	bl	433c4 <radio_ar_status_reset>
}
   40672:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   40676:	f002 bc55 	b.w	42f24 <radio_rssi_status_reset>
   4067a:	bf00      	nop

0004067c <lll_isr_cleanup>:
{
   4067c:	b508      	push	{r3, lr}
   4067e:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   40680:	4815      	ldr	r0, [pc, #84]	; (406d8 <lll_isr_cleanup+0x5c>)
   40682:	f002 fa31 	bl	42ae8 <radio_isr_set>
	if (!radio_is_idle()) {
   40686:	f002 fb5d 	bl	42d44 <radio_is_idle>
   4068a:	b150      	cbz	r0, 406a2 <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   4068c:	f002 fd74 	bl	43178 <radio_tmr_stop>
	err = lll_hfclock_off();
   40690:	f000 f9ac 	bl	409ec <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   40694:	2800      	cmp	r0, #0
   40696:	db0c      	blt.n	406b2 <lll_isr_cleanup+0x36>
}
   40698:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   4069c:	2000      	movs	r0, #0
   4069e:	f7ff bf05 	b.w	404ac <lll_done>
		radio_disable();
   406a2:	f002 fb1b 	bl	42cdc <radio_disable>
	radio_tmr_stop();
   406a6:	f002 fd67 	bl	43178 <radio_tmr_stop>
	err = lll_hfclock_off();
   406aa:	f000 f99f 	bl	409ec <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   406ae:	2800      	cmp	r0, #0
   406b0:	daf2      	bge.n	40698 <lll_isr_cleanup+0x1c>
   406b2:	4a0a      	ldr	r2, [pc, #40]	; (406dc <lll_isr_cleanup+0x60>)
   406b4:	490a      	ldr	r1, [pc, #40]	; (406e0 <lll_isr_cleanup+0x64>)
   406b6:	480b      	ldr	r0, [pc, #44]	; (406e4 <lll_isr_cleanup+0x68>)
   406b8:	f240 2342 	movw	r3, #578	; 0x242
   406bc:	f009 f99d 	bl	499fa <printk>
   406c0:	4040      	eors	r0, r0
   406c2:	f380 8811 	msr	BASEPRI, r0
   406c6:	f04f 0003 	mov.w	r0, #3
   406ca:	df02      	svc	2
	lll_done(NULL);
   406cc:	2000      	movs	r0, #0
}
   406ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   406d2:	f7ff beeb 	b.w	404ac <lll_done>
   406d6:	bf00      	nop
   406d8:	00040009 	.word	0x00040009
   406dc:	000534d0 	.word	0x000534d0
   406e0:	000535ec 	.word	0x000535ec
   406e4:	00052a70 	.word	0x00052a70

000406e8 <lll_isr_abort>:
{
   406e8:	b510      	push	{r4, lr}
   406ea:	4604      	mov	r4, r0
	radio_status_reset();
   406ec:	f002 fb0a 	bl	42d04 <radio_status_reset>
	radio_tmr_status_reset();
   406f0:	f002 fc6c 	bl	42fcc <radio_tmr_status_reset>
	radio_filter_status_reset();
   406f4:	f002 fc52 	bl	42f9c <radio_filter_status_reset>
	radio_ar_status_reset();
   406f8:	f002 fe64 	bl	433c4 <radio_ar_status_reset>
	radio_rssi_status_reset();
   406fc:	f002 fc12 	bl	42f24 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   40700:	4620      	mov	r0, r4
}
   40702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   40706:	f7ff bfb9 	b.w	4067c <lll_isr_cleanup>
   4070a:	bf00      	nop

0004070c <lll_isr_early_abort>:
{
   4070c:	b508      	push	{r3, lr}
   4070e:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   40710:	4813      	ldr	r0, [pc, #76]	; (40760 <lll_isr_early_abort+0x54>)
   40712:	f002 f9e9 	bl	42ae8 <radio_isr_set>
	if (!radio_is_idle()) {
   40716:	f002 fb15 	bl	42d44 <radio_is_idle>
   4071a:	b140      	cbz	r0, 4072e <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   4071c:	f000 f966 	bl	409ec <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   40720:	2800      	cmp	r0, #0
   40722:	db0a      	blt.n	4073a <lll_isr_early_abort+0x2e>
}
   40724:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   40728:	2000      	movs	r0, #0
   4072a:	f7ff bebf 	b.w	404ac <lll_done>
		radio_disable();
   4072e:	f002 fad5 	bl	42cdc <radio_disable>
	err = lll_hfclock_off();
   40732:	f000 f95b 	bl	409ec <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   40736:	2800      	cmp	r0, #0
   40738:	daf4      	bge.n	40724 <lll_isr_early_abort+0x18>
   4073a:	4a0a      	ldr	r2, [pc, #40]	; (40764 <lll_isr_early_abort+0x58>)
   4073c:	490a      	ldr	r1, [pc, #40]	; (40768 <lll_isr_early_abort+0x5c>)
   4073e:	480b      	ldr	r0, [pc, #44]	; (4076c <lll_isr_early_abort+0x60>)
   40740:	f240 2351 	movw	r3, #593	; 0x251
   40744:	f009 f959 	bl	499fa <printk>
   40748:	4040      	eors	r0, r0
   4074a:	f380 8811 	msr	BASEPRI, r0
   4074e:	f04f 0003 	mov.w	r0, #3
   40752:	df02      	svc	2
	lll_done(NULL);
   40754:	2000      	movs	r0, #0
}
   40756:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   4075a:	f7ff bea7 	b.w	404ac <lll_done>
   4075e:	bf00      	nop
   40760:	00040009 	.word	0x00040009
   40764:	000534d0 	.word	0x000534d0
   40768:	000535ec 	.word	0x000535ec
   4076c:	00052a70 	.word	0x00052a70

00040770 <lll_prepare_resolve>:
{
   40770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   40774:	b084      	sub	sp, #16
   40776:	4606      	mov	r6, r0
   40778:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   4077a:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   4077e:	23ff      	movs	r3, #255	; 0xff
{
   40780:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   40784:	f88d 300f 	strb.w	r3, [sp, #15]
{
   40788:	460f      	mov	r7, r1
   4078a:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   4078c:	f7f7 fbd6 	bl	37f3c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   40790:	4604      	mov	r4, r0
   40792:	b928      	cbnz	r0, 407a0 <lll_prepare_resolve+0x30>
   40794:	e050      	b.n	40838 <lll_prepare_resolve+0xc8>
		p = ull_prepare_dequeue_iter(&idx);
   40796:	f7f7 fbd1 	bl	37f3c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   4079a:	4604      	mov	r4, r0
   4079c:	2800      	cmp	r0, #0
   4079e:	d04b      	beq.n	40838 <lll_prepare_resolve+0xc8>
   407a0:	f894 c01c 	ldrb.w	ip, [r4, #28]
   407a4:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   407a8:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   407ac:	d1f3      	bne.n	40796 <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   407ae:	f8df a140 	ldr.w	sl, [pc, #320]	; 408f0 <lll_prepare_resolve+0x180>
	if ((!is_dequeue && !is_done_sync()) ||
   407b2:	f8da 3008 	ldr.w	r3, [sl, #8]
   407b6:	2b00      	cmp	r3, #0
   407b8:	d145      	bne.n	40846 <lll_prepare_resolve+0xd6>
	    (p && is_resume)) {
   407ba:	f1b9 0f00 	cmp.w	r9, #0
   407be:	d16a      	bne.n	40896 <lll_prepare_resolve+0x126>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   407c0:	42ac      	cmp	r4, r5
   407c2:	d00c      	beq.n	407de <lll_prepare_resolve+0x6e>
   407c4:	4a4b      	ldr	r2, [pc, #300]	; (408f4 <lll_prepare_resolve+0x184>)
   407c6:	494c      	ldr	r1, [pc, #304]	; (408f8 <lll_prepare_resolve+0x188>)
   407c8:	484c      	ldr	r0, [pc, #304]	; (408fc <lll_prepare_resolve+0x18c>)
   407ca:	f240 23be 	movw	r3, #702	; 0x2be
   407ce:	f009 f914 	bl	499fa <printk>
   407d2:	4040      	eors	r0, r0
   407d4:	f380 8811 	msr	BASEPRI, r0
   407d8:	f04f 0003 	mov.w	r0, #3
   407dc:	df02      	svc	2
	event.curr.param = prepare_param->param;
   407de:	68eb      	ldr	r3, [r5, #12]
   407e0:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   407e4:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   407e8:	4628      	mov	r0, r5
   407ea:	47c0      	blx	r8
   407ec:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   407ee:	f7ff fc4d 	bl	4008c <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   407f2:	f030 0302 	bics.w	r3, r0, #2
   407f6:	d015      	beq.n	40824 <lll_prepare_resolve+0xb4>
   407f8:	4a3e      	ldr	r2, [pc, #248]	; (408f4 <lll_prepare_resolve+0x184>)
   407fa:	4941      	ldr	r1, [pc, #260]	; (40900 <lll_prepare_resolve+0x190>)
   407fc:	483f      	ldr	r0, [pc, #252]	; (408fc <lll_prepare_resolve+0x18c>)
   407fe:	f240 23cb 	movw	r3, #715	; 0x2cb
   40802:	f009 f8fa 	bl	499fa <printk>
   40806:	4040      	eors	r0, r0
   40808:	f380 8811 	msr	BASEPRI, r0
   4080c:	f04f 0003 	mov.w	r0, #3
   40810:	df02      	svc	2
		p = ull_prepare_dequeue_iter(&idx);
   40812:	f10d 000f 	add.w	r0, sp, #15
   40816:	f7f7 fb91 	bl	37f3c <ull_prepare_dequeue_iter>
		if (!p) {
   4081a:	b148      	cbz	r0, 40830 <lll_prepare_resolve+0xc0>
	} while (p->is_aborted || p->is_resume);
   4081c:	7f03      	ldrb	r3, [r0, #28]
   4081e:	f013 0303 	ands.w	r3, r3, #3
   40822:	d020      	beq.n	40866 <lll_prepare_resolve+0xf6>
		p = ull_prepare_dequeue_iter(&idx);
   40824:	f10d 000f 	add.w	r0, sp, #15
   40828:	f7f7 fb88 	bl	37f3c <ull_prepare_dequeue_iter>
		if (!p) {
   4082c:	2800      	cmp	r0, #0
   4082e:	d1f5      	bne.n	4081c <lll_prepare_resolve+0xac>
}
   40830:	4620      	mov	r0, r4
   40832:	b004      	add	sp, #16
   40834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   40838:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 408f0 <lll_prepare_resolve+0x180>
	if ((!is_dequeue && !is_done_sync()) ||
   4083c:	f8da 3008 	ldr.w	r3, [sl, #8]
   40840:	2b00      	cmp	r3, #0
   40842:	d0cc      	beq.n	407de <lll_prepare_resolve+0x6e>
{
   40844:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   40846:	4639      	mov	r1, r7
   40848:	f8cd 9000 	str.w	r9, [sp]
   4084c:	4643      	mov	r3, r8
   4084e:	462a      	mov	r2, r5
   40850:	4630      	mov	r0, r6
   40852:	f7f7 fb33 	bl	37ebc <ull_prepare_enqueue>
		LL_ASSERT(next);
   40856:	4601      	mov	r1, r0
   40858:	b338      	cbz	r0, 408aa <lll_prepare_resolve+0x13a>
		if (is_resume) {
   4085a:	f1b9 0f00 	cmp.w	r9, #0
   4085e:	d033      	beq.n	408c8 <lll_prepare_resolve+0x158>
			return -EINPROGRESS;
   40860:	f06f 0476 	mvn.w	r4, #118	; 0x76
   40864:	e7e4      	b.n	40830 <lll_prepare_resolve+0xc0>
	ret = preempt_ticker_start(NULL, p);
   40866:	4601      	mov	r1, r0
   40868:	4618      	mov	r0, r3
   4086a:	f7ff fc4f 	bl	4010c <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   4086e:	f030 0302 	bics.w	r3, r0, #2
   40872:	d0dd      	beq.n	40830 <lll_prepare_resolve+0xc0>
   40874:	4a1f      	ldr	r2, [pc, #124]	; (408f4 <lll_prepare_resolve+0x184>)
   40876:	4922      	ldr	r1, [pc, #136]	; (40900 <lll_prepare_resolve+0x190>)
   40878:	4820      	ldr	r0, [pc, #128]	; (408fc <lll_prepare_resolve+0x18c>)
   4087a:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   4087e:	f009 f8bc 	bl	499fa <printk>
   40882:	4040      	eors	r0, r0
   40884:	f380 8811 	msr	BASEPRI, r0
   40888:	f04f 0003 	mov.w	r0, #3
   4088c:	df02      	svc	2
}
   4088e:	4620      	mov	r0, r4
   40890:	b004      	add	sp, #16
   40892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   40896:	f8cd 9000 	str.w	r9, [sp]
   4089a:	4643      	mov	r3, r8
   4089c:	462a      	mov	r2, r5
   4089e:	4639      	mov	r1, r7
   408a0:	4630      	mov	r0, r6
   408a2:	f7f7 fb0b 	bl	37ebc <ull_prepare_enqueue>
		LL_ASSERT(next);
   408a6:	2800      	cmp	r0, #0
   408a8:	d1da      	bne.n	40860 <lll_prepare_resolve+0xf0>
   408aa:	4a12      	ldr	r2, [pc, #72]	; (408f4 <lll_prepare_resolve+0x184>)
   408ac:	4915      	ldr	r1, [pc, #84]	; (40904 <lll_prepare_resolve+0x194>)
   408ae:	4813      	ldr	r0, [pc, #76]	; (408fc <lll_prepare_resolve+0x18c>)
   408b0:	f240 238d 	movw	r3, #653	; 0x28d
   408b4:	f009 f8a1 	bl	499fa <printk>
   408b8:	4040      	eors	r0, r0
   408ba:	f380 8811 	msr	BASEPRI, r0
   408be:	f04f 0003 	mov.w	r0, #3
   408c2:	df02      	svc	2
   408c4:	2100      	movs	r1, #0
   408c6:	e7c8      	b.n	4085a <lll_prepare_resolve+0xea>
		ret  = preempt_ticker_start(p, next);
   408c8:	4620      	mov	r0, r4
   408ca:	f7ff fc1f 	bl	4010c <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   408ce:	f030 0302 	bics.w	r3, r0, #2
   408d2:	d0c5      	beq.n	40860 <lll_prepare_resolve+0xf0>
   408d4:	4a07      	ldr	r2, [pc, #28]	; (408f4 <lll_prepare_resolve+0x184>)
   408d6:	490a      	ldr	r1, [pc, #40]	; (40900 <lll_prepare_resolve+0x190>)
   408d8:	4808      	ldr	r0, [pc, #32]	; (408fc <lll_prepare_resolve+0x18c>)
   408da:	f44f 7326 	mov.w	r3, #664	; 0x298
   408de:	f009 f88c 	bl	499fa <printk>
   408e2:	4040      	eors	r0, r0
   408e4:	f380 8811 	msr	BASEPRI, r0
   408e8:	f04f 0003 	mov.w	r0, #3
   408ec:	df02      	svc	2
   408ee:	e7b7      	b.n	40860 <lll_prepare_resolve+0xf0>
   408f0:	20006118 	.word	0x20006118
   408f4:	000534d0 	.word	0x000534d0
   408f8:	00053600 	.word	0x00053600
   408fc:	00052a70 	.word	0x00052a70
   40900:	00052e20 	.word	0x00052e20
   40904:	000535f8 	.word	0x000535f8

00040908 <clock_ready>:
	z_impl_k_sem_give(sem);
   40908:	f101 0010 	add.w	r0, r1, #16
   4090c:	f007 bbb0 	b.w	48070 <z_impl_k_sem_give>

00040910 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   40910:	b570      	push	{r4, r5, r6, lr}
   40912:	4605      	mov	r5, r0
   40914:	b08a      	sub	sp, #40	; 0x28
   40916:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   40918:	2201      	movs	r2, #1
   4091a:	2100      	movs	r1, #0
   4091c:	a804      	add	r0, sp, #16
   4091e:	f010 f8c8 	bl	50ab2 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   40922:	4b0f      	ldr	r3, [pc, #60]	; (40960 <blocking_on+0x50>)
   40924:	9301      	str	r3, [sp, #4]
   40926:	2600      	movs	r6, #0
   40928:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   4092a:	4669      	mov	r1, sp
   4092c:	4628      	mov	r0, r5
   4092e:	9603      	str	r6, [sp, #12]
   40930:	9302      	str	r3, [sp, #8]
   40932:	f009 f8fa 	bl	49b2a <onoff_request>
	if (err < 0) {
   40936:	2800      	cmp	r0, #0
   40938:	db10      	blt.n	4095c <blocking_on+0x4c>
   4093a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   4093e:	4631      	mov	r1, r6
   40940:	f240 30e7 	movw	r0, #999	; 0x3e7
   40944:	fbe4 0103 	umlal	r0, r1, r4, r3
   40948:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   4094c:	2300      	movs	r3, #0
   4094e:	f7e5 fbd7 	bl	26100 <__aeabi_uldivmod>
   40952:	4602      	mov	r2, r0
   40954:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   40956:	a804      	add	r0, sp, #16
   40958:	f007 fbb0 	bl	480bc <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   4095c:	b00a      	add	sp, #40	; 0x28
   4095e:	bd70      	pop	{r4, r5, r6, pc}
   40960:	00040909 	.word	0x00040909

00040964 <lll_clock_init>:

int lll_clock_init(void)
{
   40964:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   40966:	2001      	movs	r0, #1
   40968:	f004 f9a0 	bl	44cac <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   4096c:	4904      	ldr	r1, [pc, #16]	; (40980 <lll_clock_init+0x1c>)
   4096e:	2300      	movs	r3, #0
   40970:	2401      	movs	r4, #1
   40972:	608c      	str	r4, [r1, #8]
   40974:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   40976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   4097a:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   4097c:	f009 b8d5 	b.w	49b2a <onoff_request>
   40980:	20006128 	.word	0x20006128

00040984 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   40984:	4b0c      	ldr	r3, [pc, #48]	; (409b8 <lll_clock_wait+0x34>)
   40986:	781a      	ldrb	r2, [r3, #0]
   40988:	b10a      	cbz	r2, 4098e <lll_clock_wait+0xa>
		return 0;
   4098a:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   4098c:	4770      	bx	lr
{
   4098e:	b510      	push	{r4, lr}
	done = true;
   40990:	2001      	movs	r0, #1
   40992:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   40994:	f004 f98a 	bl	44cac <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   40998:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   4099c:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   4099e:	f7ff ffb7 	bl	40910 <blocking_on>
	if (err) {
   409a2:	b938      	cbnz	r0, 409b4 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   409a4:	4620      	mov	r0, r4
   409a6:	f009 f918 	bl	49bda <onoff_release>
	if (err != ONOFF_STATE_ON) {
   409aa:	2802      	cmp	r0, #2
		return 0;
   409ac:	bf0c      	ite	eq
   409ae:	2000      	moveq	r0, #0
		return -EIO;
   409b0:	f06f 0004 	mvnne.w	r0, #4
}
   409b4:	bd10      	pop	{r4, pc}
   409b6:	bf00      	nop
   409b8:	2000741a 	.word	0x2000741a

000409bc <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   409bc:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   409be:	4b0a      	ldr	r3, [pc, #40]	; (409e8 <lll_hfclock_on+0x2c>)
   409c0:	f3bf 8f5b 	dmb	ish
   409c4:	e853 2f00 	ldrex	r2, [r3]
   409c8:	1c51      	adds	r1, r2, #1
   409ca:	e843 1000 	strex	r0, r1, [r3]
   409ce:	2800      	cmp	r0, #0
   409d0:	d1f8      	bne.n	409c4 <lll_hfclock_on+0x8>
   409d2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   409d6:	2a00      	cmp	r2, #0
   409d8:	dd01      	ble.n	409de <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   409da:	2000      	movs	r0, #0
   409dc:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   409de:	f004 f96d 	bl	44cbc <z_nrf_clock_bt_ctlr_hf_request>
}
   409e2:	2000      	movs	r0, #0
   409e4:	bd08      	pop	{r3, pc}
   409e6:	bf00      	nop
   409e8:	20006124 	.word	0x20006124

000409ec <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   409ec:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   409ee:	4b0c      	ldr	r3, [pc, #48]	; (40a20 <lll_hfclock_off+0x34>)
   409f0:	681a      	ldr	r2, [r3, #0]
   409f2:	2a00      	cmp	r2, #0
   409f4:	dd11      	ble.n	40a1a <lll_hfclock_off+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   409f6:	f3bf 8f5b 	dmb	ish
   409fa:	e853 2f00 	ldrex	r2, [r3]
   409fe:	1e51      	subs	r1, r2, #1
   40a00:	e843 1000 	strex	r0, r1, [r3]
   40a04:	2800      	cmp	r0, #0
   40a06:	d1f8      	bne.n	409fa <lll_hfclock_off+0xe>
   40a08:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   40a0c:	2a01      	cmp	r2, #1
   40a0e:	dd01      	ble.n	40a14 <lll_hfclock_off+0x28>
		return 0;
   40a10:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   40a12:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   40a14:	f004 f968 	bl	44ce8 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   40a18:	e7fa      	b.n	40a10 <lll_hfclock_off+0x24>
		return -EALREADY;
   40a1a:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   40a1e:	bd08      	pop	{r3, pc}
   40a20:	20006124 	.word	0x20006124

00040a24 <lll_clock_sca_local_get>:

uint8_t lll_clock_sca_local_get(void)
{
	return CLOCK_CONTROL_NRF_K32SRC_ACCURACY;
}
   40a24:	2005      	movs	r0, #5
   40a26:	4770      	bx	lr

00040a28 <lll_clock_ppm_local_get>:

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   40a28:	2032      	movs	r0, #50	; 0x32
   40a2a:	4770      	bx	lr

00040a2c <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   40a2c:	4b01      	ldr	r3, [pc, #4]	; (40a34 <lll_clock_ppm_get+0x8>)
}
   40a2e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   40a32:	4770      	bx	lr
   40a34:	0005362c 	.word	0x0005362c

00040a38 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   40a38:	b510      	push	{r4, lr}
   40a3a:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   40a3c:	f7ff fe10 	bl	40660 <lll_isr_status_reset>

	radio_filter_disable();
   40a40:	f002 faa2 	bl	42f88 <radio_filter_disable>

	lll_isr_cleanup(param);
   40a44:	4620      	mov	r0, r4
}
   40a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   40a4a:	f7ff be17 	b.w	4067c <lll_isr_cleanup>
   40a4e:	bf00      	nop

00040a50 <isr_tx>:
{
   40a50:	b530      	push	{r4, r5, lr}
   40a52:	b083      	sub	sp, #12
   40a54:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   40a56:	f7ff fdf1 	bl	4063c <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   40a5a:	2096      	movs	r0, #150	; 0x96
   40a5c:	f002 fac6 	bl	42fec <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   40a60:	2300      	movs	r3, #0
   40a62:	4618      	mov	r0, r3
   40a64:	461a      	mov	r2, r3
   40a66:	4619      	mov	r1, r3
   40a68:	f002 f9dc 	bl	42e24 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   40a6c:	2001      	movs	r0, #1
   40a6e:	f7f7 f9d7 	bl	37e20 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   40a72:	4604      	mov	r4, r0
   40a74:	2800      	cmp	r0, #0
   40a76:	d043      	beq.n	40b00 <isr_tx+0xb0>
	radio_pkt_rx_set(node_rx->pdu);
   40a78:	f104 001c 	add.w	r0, r4, #28
   40a7c:	f002 f906 	bl	42c8c <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   40a80:	f002 f94c 	bl	42d1c <radio_is_ready>
   40a84:	b9e0      	cbnz	r0, 40ac0 <isr_tx+0x70>
	radio_isr_set(isr_rx, param);
   40a86:	4825      	ldr	r0, [pc, #148]	; (40b1c <isr_tx+0xcc>)
   40a88:	4629      	mov	r1, r5
   40a8a:	f002 f82d 	bl	42ae8 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   40a8e:	f7ff fa0b 	bl	3fea8 <ull_filter_lll_rl_enabled>
   40a92:	bb50      	cbnz	r0, 40aea <isr_tx+0x9a>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   40a94:	f002 fbc4 	bl	43220 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   40a98:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   40a9a:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   40a9c:	4608      	mov	r0, r1
   40a9e:	f002 f90b 	bl	42cb8 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   40aa2:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   40aa4:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   40aa6:	4608      	mov	r0, r1
   40aa8:	f002 f902 	bl	42cb0 <radio_tx_chain_delay_get>
   40aac:	442c      	add	r4, r5
   40aae:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   40ab0:	1a20      	subs	r0, r4, r0
   40ab2:	f002 fb6d 	bl	43190 <radio_tmr_hcto_configure>
}
   40ab6:	b003      	add	sp, #12
   40ab8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   40abc:	f002 bba2 	b.w	43204 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   40ac0:	4a17      	ldr	r2, [pc, #92]	; (40b20 <isr_tx+0xd0>)
   40ac2:	4918      	ldr	r1, [pc, #96]	; (40b24 <isr_tx+0xd4>)
   40ac4:	4818      	ldr	r0, [pc, #96]	; (40b28 <isr_tx+0xd8>)
   40ac6:	f240 4345 	movw	r3, #1093	; 0x445
   40aca:	f008 ff96 	bl	499fa <printk>
   40ace:	4040      	eors	r0, r0
   40ad0:	f380 8811 	msr	BASEPRI, r0
   40ad4:	f04f 0003 	mov.w	r0, #3
   40ad8:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   40ada:	4810      	ldr	r0, [pc, #64]	; (40b1c <isr_tx+0xcc>)
   40adc:	4629      	mov	r1, r5
   40ade:	f002 f803 	bl	42ae8 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   40ae2:	f7ff f9e1 	bl	3fea8 <ull_filter_lll_rl_enabled>
   40ae6:	2800      	cmp	r0, #0
   40ae8:	d0d4      	beq.n	40a94 <isr_tx+0x44>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   40aea:	f10d 0007 	add.w	r0, sp, #7
   40aee:	f7ff f855 	bl	3fb9c <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   40af2:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   40af4:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   40af6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   40afa:	f002 fc29 	bl	43350 <radio_ar_configure>
   40afe:	e7c9      	b.n	40a94 <isr_tx+0x44>
	LL_ASSERT(node_rx);
   40b00:	4a07      	ldr	r2, [pc, #28]	; (40b20 <isr_tx+0xd0>)
   40b02:	490a      	ldr	r1, [pc, #40]	; (40b2c <isr_tx+0xdc>)
   40b04:	4808      	ldr	r0, [pc, #32]	; (40b28 <isr_tx+0xd8>)
   40b06:	f240 4341 	movw	r3, #1089	; 0x441
   40b0a:	f008 ff76 	bl	499fa <printk>
   40b0e:	4040      	eors	r0, r0
   40b10:	f380 8811 	msr	BASEPRI, r0
   40b14:	f04f 0003 	mov.w	r0, #3
   40b18:	df02      	svc	2
   40b1a:	e7ad      	b.n	40a78 <isr_tx+0x28>
   40b1c:	000412b9 	.word	0x000412b9
   40b20:	0005363c 	.word	0x0005363c
   40b24:	00053690 	.word	0x00053690
   40b28:	00052a70 	.word	0x00052a70
   40b2c:	00053688 	.word	0x00053688

00040b30 <is_abort_cb>:
	if (next != curr) {
   40b30:	4281      	cmp	r1, r0
{
   40b32:	b508      	push	{r3, lr}
	if (next != curr) {
   40b34:	d00e      	beq.n	40b54 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   40b36:	7a0b      	ldrb	r3, [r1, #8]
   40b38:	07db      	lsls	r3, r3, #31
   40b3a:	d402      	bmi.n	40b42 <is_abort_cb+0x12>
			return -ECANCELED;
   40b3c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   40b40:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   40b42:	4b12      	ldr	r3, [pc, #72]	; (40b8c <is_abort_cb+0x5c>)
   40b44:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   40b46:	f7ff ff39 	bl	409bc <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   40b4a:	2800      	cmp	r0, #0
   40b4c:	db0f      	blt.n	40b6e <is_abort_cb+0x3e>
{
   40b4e:	f06f 000a 	mvn.w	r0, #10
}
   40b52:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   40b54:	7b0b      	ldrb	r3, [r1, #12]
   40b56:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   40b5a:	690b      	ldr	r3, [r1, #16]
   40b5c:	781b      	ldrb	r3, [r3, #0]
   40b5e:	f003 030f 	and.w	r3, r3, #15
		return 0;
   40b62:	2b01      	cmp	r3, #1
   40b64:	bf14      	ite	ne
   40b66:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   40b6a:	2000      	moveq	r0, #0
}
   40b6c:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   40b6e:	4a08      	ldr	r2, [pc, #32]	; (40b90 <is_abort_cb+0x60>)
   40b70:	4908      	ldr	r1, [pc, #32]	; (40b94 <is_abort_cb+0x64>)
   40b72:	4809      	ldr	r0, [pc, #36]	; (40b98 <is_abort_cb+0x68>)
   40b74:	f240 33fa 	movw	r3, #1018	; 0x3fa
   40b78:	f008 ff3f 	bl	499fa <printk>
   40b7c:	4040      	eors	r0, r0
   40b7e:	f380 8811 	msr	BASEPRI, r0
   40b82:	f04f 0003 	mov.w	r0, #3
   40b86:	df02      	svc	2
   40b88:	e7e1      	b.n	40b4e <is_abort_cb+0x1e>
   40b8a:	bf00      	nop
   40b8c:	000410c9 	.word	0x000410c9
   40b90:	0005363c 	.word	0x0005363c
   40b94:	000535ec 	.word	0x000535ec
   40b98:	00052a70 	.word	0x00052a70

00040b9c <abort_cb>:
{
   40b9c:	b510      	push	{r4, lr}
	if (!prepare_param) {
   40b9e:	b1d8      	cbz	r0, 40bd8 <abort_cb+0x3c>
	err = lll_hfclock_off();
   40ba0:	460c      	mov	r4, r1
   40ba2:	f7ff ff23 	bl	409ec <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   40ba6:	2800      	cmp	r0, #0
   40ba8:	db04      	blt.n	40bb4 <abort_cb+0x18>
	lll_done(param);
   40baa:	4620      	mov	r0, r4
}
   40bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   40bb0:	f7ff bc7c 	b.w	404ac <lll_done>
	LL_ASSERT(err >= 0);
   40bb4:	4a0c      	ldr	r2, [pc, #48]	; (40be8 <abort_cb+0x4c>)
   40bb6:	490d      	ldr	r1, [pc, #52]	; (40bec <abort_cb+0x50>)
   40bb8:	480d      	ldr	r0, [pc, #52]	; (40bf0 <abort_cb+0x54>)
   40bba:	f44f 6384 	mov.w	r3, #1056	; 0x420
   40bbe:	f008 ff1c 	bl	499fa <printk>
   40bc2:	4040      	eors	r0, r0
   40bc4:	f380 8811 	msr	BASEPRI, r0
   40bc8:	f04f 0003 	mov.w	r0, #3
   40bcc:	df02      	svc	2
	lll_done(param);
   40bce:	4620      	mov	r0, r4
}
   40bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   40bd4:	f7ff bc6a 	b.w	404ac <lll_done>
		radio_isr_set(isr_abort, param);
   40bd8:	4806      	ldr	r0, [pc, #24]	; (40bf4 <abort_cb+0x58>)
   40bda:	f001 ff85 	bl	42ae8 <radio_isr_set>
}
   40bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   40be2:	f002 b87b 	b.w	42cdc <radio_disable>
   40be6:	bf00      	nop
   40be8:	0005363c 	.word	0x0005363c
   40bec:	000535ec 	.word	0x000535ec
   40bf0:	00052a70 	.word	0x00052a70
   40bf4:	00040a39 	.word	0x00040a39

00040bf8 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   40bf8:	4b08      	ldr	r3, [pc, #32]	; (40c1c <lll_adv_init+0x24>)
   40bfa:	2204      	movs	r2, #4
{
   40bfc:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   40bfe:	1898      	adds	r0, r3, r2
   40c00:	2128      	movs	r1, #40	; 0x28
   40c02:	f7f3 f8e1 	bl	33dc8 <mem_init>
	MFIFO_INIT(pdu_free);
   40c06:	4b06      	ldr	r3, [pc, #24]	; (40c20 <lll_adv_init+0x28>)
   40c08:	2400      	movs	r4, #0
   40c0a:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   40c0c:	2202      	movs	r2, #2
   40c0e:	4621      	mov	r1, r4
   40c10:	4804      	ldr	r0, [pc, #16]	; (40c24 <lll_adv_init+0x2c>)
   40c12:	f00f ff4e 	bl	50ab2 <z_impl_k_sem_init>
}
   40c16:	4620      	mov	r0, r4
   40c18:	bd10      	pop	{r4, pc}
   40c1a:	bf00      	nop
   40c1c:	20006150 	.word	0x20006150
   40c20:	20000d94 	.word	0x20000d94
   40c24:	20006138 	.word	0x20006138

00040c28 <lll_adv_reset>:
int lll_adv_reset(void)
   40c28:	4b08      	ldr	r3, [pc, #32]	; (40c4c <lll_adv_reset+0x24>)
   40c2a:	2204      	movs	r2, #4
   40c2c:	b510      	push	{r4, lr}
   40c2e:	1898      	adds	r0, r3, r2
   40c30:	2128      	movs	r1, #40	; 0x28
   40c32:	f7f3 f8c9 	bl	33dc8 <mem_init>
   40c36:	4b06      	ldr	r3, [pc, #24]	; (40c50 <lll_adv_reset+0x28>)
   40c38:	2400      	movs	r4, #0
   40c3a:	805c      	strh	r4, [r3, #2]
   40c3c:	2202      	movs	r2, #2
   40c3e:	4621      	mov	r1, r4
   40c40:	4804      	ldr	r0, [pc, #16]	; (40c54 <lll_adv_reset+0x2c>)
   40c42:	f00f ff36 	bl	50ab2 <z_impl_k_sem_init>
   40c46:	4620      	mov	r0, r4
   40c48:	bd10      	pop	{r4, pc}
   40c4a:	bf00      	nop
   40c4c:	20006150 	.word	0x20006150
   40c50:	20000d94 	.word	0x20000d94
   40c54:	20006138 	.word	0x20006138

00040c58 <lll_adv_data_init>:
{
   40c58:	b510      	push	{r4, lr}
   40c5a:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   40c5c:	4805      	ldr	r0, [pc, #20]	; (40c74 <lll_adv_data_init+0x1c>)
   40c5e:	f7f3 f8e3 	bl	33e28 <mem_acquire>
	if (!p) {
   40c62:	b120      	cbz	r0, 40c6e <lll_adv_data_init+0x16>
   40c64:	4603      	mov	r3, r0
	p->len = 0U;
   40c66:	2000      	movs	r0, #0
   40c68:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   40c6a:	6063      	str	r3, [r4, #4]
}
   40c6c:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   40c6e:	f06f 000b 	mvn.w	r0, #11
}
   40c72:	bd10      	pop	{r4, pc}
   40c74:	20006150 	.word	0x20006150

00040c78 <lll_adv_data_reset>:
{
   40c78:	4603      	mov	r3, r0
	pdu->first = 0U;
   40c7a:	2000      	movs	r0, #0
   40c7c:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   40c7e:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   40c80:	6098      	str	r0, [r3, #8]
}
   40c82:	4770      	bx	lr

00040c84 <lll_adv_pdu_alloc_pdu_adv>:
{
   40c84:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   40c86:	4c35      	ldr	r4, [pc, #212]	; (40d5c <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   40c88:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   40c8a:	78e1      	ldrb	r1, [r4, #3]
   40c8c:	7823      	ldrb	r3, [r4, #0]
   40c8e:	4291      	cmp	r1, r2
   40c90:	d003      	beq.n	40c9a <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   40c92:	fb02 4303 	mla	r3, r2, r3, r4
   40c96:	685d      	ldr	r5, [r3, #4]
	if (p) {
   40c98:	b935      	cbnz	r5, 40ca8 <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   40c9a:	4831      	ldr	r0, [pc, #196]	; (40d60 <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   40c9c:	f7f3 f8c4 	bl	33e28 <mem_acquire>
	if (p) {
   40ca0:	4605      	mov	r5, r0
   40ca2:	b1a0      	cbz	r0, 40cce <lll_adv_pdu_alloc_pdu_adv+0x4a>
}
   40ca4:	4628      	mov	r0, r5
   40ca6:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   40ca8:	482e      	ldr	r0, [pc, #184]	; (40d64 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   40caa:	2200      	movs	r2, #0
   40cac:	2300      	movs	r3, #0
   40cae:	f007 fa05 	bl	480bc <z_impl_k_sem_take>
		LL_ASSERT(!err);
   40cb2:	bb40      	cbnz	r0, 40d06 <lll_adv_pdu_alloc_pdu_adv+0x82>
	uint8_t _first = *first; /* Copy read-index */
   40cb4:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   40cb6:	78e2      	ldrb	r2, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   40cb8:	7861      	ldrb	r1, [r4, #1]
   40cba:	429a      	cmp	r2, r3
   40cbc:	d0f2      	beq.n	40ca4 <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   40cbe:	3301      	adds	r3, #1
   40cc0:	b2db      	uxtb	r3, r3
		_first = 0U;
   40cc2:	4299      	cmp	r1, r3
   40cc4:	bf08      	it	eq
   40cc6:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   40cc8:	70a3      	strb	r3, [r4, #2]
}
   40cca:	4628      	mov	r0, r5
   40ccc:	bd38      	pop	{r3, r4, r5, pc}
   40cce:	4825      	ldr	r0, [pc, #148]	; (40d64 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   40cd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   40cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   40cd8:	f007 f9f0 	bl	480bc <z_impl_k_sem_take>
	LL_ASSERT(!err);
   40cdc:	bb08      	cbnz	r0, 40d22 <lll_adv_pdu_alloc_pdu_adv+0x9e>
	uint8_t _first = *first; /* Copy read-index */
   40cde:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   40ce0:	78e1      	ldrb	r1, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   40ce2:	7822      	ldrb	r2, [r4, #0]
   40ce4:	7860      	ldrb	r0, [r4, #1]
   40ce6:	4299      	cmp	r1, r3
   40ce8:	d029      	beq.n	40d3e <lll_adv_pdu_alloc_pdu_adv+0xba>
	mem = *((void **)(fifo + _first * size));
   40cea:	fb13 f202 	smulbb	r2, r3, r2
   40cee:	491e      	ldr	r1, [pc, #120]	; (40d68 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
	_first += 1U;
   40cf0:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   40cf2:	588a      	ldr	r2, [r1, r2]
	_first += 1U;
   40cf4:	b2db      	uxtb	r3, r3
		_first = 0U;
   40cf6:	4298      	cmp	r0, r3
   40cf8:	bf08      	it	eq
   40cfa:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   40cfc:	70a3      	strb	r3, [r4, #2]
	LL_ASSERT(p);
   40cfe:	b1f2      	cbz	r2, 40d3e <lll_adv_pdu_alloc_pdu_adv+0xba>
   40d00:	4615      	mov	r5, r2
}
   40d02:	4628      	mov	r0, r5
   40d04:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!err);
   40d06:	4a19      	ldr	r2, [pc, #100]	; (40d6c <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   40d08:	4919      	ldr	r1, [pc, #100]	; (40d70 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   40d0a:	481a      	ldr	r0, [pc, #104]	; (40d74 <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   40d0c:	f240 1397 	movw	r3, #407	; 0x197
   40d10:	f008 fe73 	bl	499fa <printk>
   40d14:	4040      	eors	r0, r0
   40d16:	f380 8811 	msr	BASEPRI, r0
   40d1a:	f04f 0003 	mov.w	r0, #3
   40d1e:	df02      	svc	2
   40d20:	e7c8      	b.n	40cb4 <lll_adv_pdu_alloc_pdu_adv+0x30>
	LL_ASSERT(!err);
   40d22:	4a12      	ldr	r2, [pc, #72]	; (40d6c <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   40d24:	4912      	ldr	r1, [pc, #72]	; (40d70 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   40d26:	4813      	ldr	r0, [pc, #76]	; (40d74 <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   40d28:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   40d2c:	f008 fe65 	bl	499fa <printk>
   40d30:	4040      	eors	r0, r0
   40d32:	f380 8811 	msr	BASEPRI, r0
   40d36:	f04f 0003 	mov.w	r0, #3
   40d3a:	df02      	svc	2
   40d3c:	e7cf      	b.n	40cde <lll_adv_pdu_alloc_pdu_adv+0x5a>
	LL_ASSERT(p);
   40d3e:	4a0b      	ldr	r2, [pc, #44]	; (40d6c <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   40d40:	490d      	ldr	r1, [pc, #52]	; (40d78 <lll_adv_pdu_alloc_pdu_adv+0xf4>)
   40d42:	480c      	ldr	r0, [pc, #48]	; (40d74 <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   40d44:	f240 13ad 	movw	r3, #429	; 0x1ad
   40d48:	f008 fe57 	bl	499fa <printk>
   40d4c:	4040      	eors	r0, r0
   40d4e:	f380 8811 	msr	BASEPRI, r0
   40d52:	f04f 0003 	mov.w	r0, #3
   40d56:	df02      	svc	2
   40d58:	e7a4      	b.n	40ca4 <lll_adv_pdu_alloc_pdu_adv+0x20>
   40d5a:	bf00      	nop
   40d5c:	20000d94 	.word	0x20000d94
   40d60:	20006150 	.word	0x20006150
   40d64:	20006138 	.word	0x20006138
   40d68:	20000d98 	.word	0x20000d98
   40d6c:	0005363c 	.word	0x0005363c
   40d70:	00052c4c 	.word	0x00052c4c
   40d74:	00052a70 	.word	0x00052a70
   40d78:	000536a4 	.word	0x000536a4

00040d7c <lll_adv_pdu_alloc>:
{
   40d7c:	b510      	push	{r4, lr}
	first = pdu->first;
   40d7e:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   40d80:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   40d82:	429a      	cmp	r2, r3
   40d84:	d014      	beq.n	40db0 <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   40d86:	b2d4      	uxtb	r4, r2
   40d88:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   40d8a:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   40d8c:	4294      	cmp	r4, r2
   40d8e:	d004      	beq.n	40d9a <lll_adv_pdu_alloc+0x1e>
			last++;
   40d90:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   40d92:	7043      	strb	r3, [r0, #1]
			last++;
   40d94:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   40d96:	2b02      	cmp	r3, #2
   40d98:	d00e      	beq.n	40db8 <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   40d9a:	461a      	mov	r2, r3
	*idx = last;
   40d9c:	eb00 0482 	add.w	r4, r0, r2, lsl #2
   40da0:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   40da2:	6860      	ldr	r0, [r4, #4]
	if (p) {
   40da4:	b100      	cbz	r0, 40da8 <lll_adv_pdu_alloc+0x2c>
}
   40da6:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   40da8:	f7ff ff6c 	bl	40c84 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   40dac:	6060      	str	r0, [r4, #4]
}
   40dae:	bd10      	pop	{r4, pc}
		last++;
   40db0:	3301      	adds	r3, #1
   40db2:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   40db4:	2b02      	cmp	r3, #2
   40db6:	d1f0      	bne.n	40d9a <lll_adv_pdu_alloc+0x1e>
{
   40db8:	2200      	movs	r2, #0
			last = 0U;
   40dba:	4613      	mov	r3, r2
   40dbc:	e7ee      	b.n	40d9c <lll_adv_pdu_alloc+0x20>
   40dbe:	bf00      	nop

00040dc0 <lll_adv_pdu_latest_get>:
{
   40dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	first = pdu->first;
   40dc2:	7802      	ldrb	r2, [r0, #0]
	if (first != pdu->last) {
   40dc4:	7843      	ldrb	r3, [r0, #1]
   40dc6:	4293      	cmp	r3, r2
{
   40dc8:	4604      	mov	r4, r0
	if (first != pdu->last) {
   40dca:	d02c      	beq.n	40e26 <lll_adv_pdu_latest_get+0x66>
		pdu_idx = first;
   40dcc:	b2d5      	uxtb	r5, r2
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   40dce:	4a18      	ldr	r2, [pc, #96]	; (40e30 <lll_adv_pdu_latest_get+0x70>)
   40dd0:	f892 e003 	ldrb.w	lr, [r2, #3]
   40dd4:	eb00 0785 	add.w	r7, r0, r5, lsl #2
	last = last + 1;
   40dd8:	f10e 0301 	add.w	r3, lr, #1
	if (last == count) {
   40ddc:	7850      	ldrb	r0, [r2, #1]
	last = last + 1;
   40dde:	b2db      	uxtb	r3, r3
		last = 0U;
   40de0:	4298      	cmp	r0, r3
   40de2:	bf08      	it	eq
   40de4:	2300      	moveq	r3, #0
   40de6:	7890      	ldrb	r0, [r2, #2]
	if (last == first) {
   40de8:	4298      	cmp	r0, r3
   40dea:	460e      	mov	r6, r1
		p = pdu->pdu[pdu_idx];
   40dec:	6879      	ldr	r1, [r7, #4]
   40dee:	d00b      	beq.n	40e08 <lll_adv_pdu_latest_get+0x48>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   40df0:	4694      	mov	ip, r2
   40df2:	f81c 0b04 	ldrb.w	r0, [ip], #4
   40df6:	fb10 f00e 	smulbb	r0, r0, lr
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   40dfa:	f84c 1000 	str.w	r1, [ip, r0]
	*last = idx; /* Commit: Update write index */
   40dfe:	70d3      	strb	r3, [r2, #3]
	z_impl_k_sem_give(sem);
   40e00:	480c      	ldr	r0, [pc, #48]	; (40e34 <lll_adv_pdu_latest_get+0x74>)
   40e02:	f007 f935 	bl	48070 <z_impl_k_sem_give>
			p = next;
   40e06:	2100      	movs	r1, #0
		first += 1U;
   40e08:	1c6b      	adds	r3, r5, #1
   40e0a:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   40e0c:	2b02      	cmp	r3, #2
   40e0e:	bf0a      	itet	eq
   40e10:	2200      	moveq	r2, #0
	return (void *)pdu->pdu[first];
   40e12:	461a      	movne	r2, r3
			first = 0U;
   40e14:	4613      	moveq	r3, r2
		pdu->pdu[pdu_idx] = p;
   40e16:	6079      	str	r1, [r7, #4]
		pdu->first = first;
   40e18:	7023      	strb	r3, [r4, #0]
		*is_modified = 1U;
   40e1a:	2101      	movs	r1, #1
	return (void *)pdu->pdu[first];
   40e1c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
		*is_modified = 1U;
   40e20:	7031      	strb	r1, [r6, #0]
}
   40e22:	6860      	ldr	r0, [r4, #4]
   40e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = pdu->pdu[pdu_idx];
   40e26:	461a      	mov	r2, r3
	return (void *)pdu->pdu[first];
   40e28:	eb04 0482 	add.w	r4, r4, r2, lsl #2
}
   40e2c:	6860      	ldr	r0, [r4, #4]
   40e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   40e30:	20000d94 	.word	0x20000d94
   40e34:	20006138 	.word	0x20006138

00040e38 <chan_prepare.isra.0>:

static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   40e38:	b570      	push	{r4, r5, r6, lr}
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   40e3a:	7a03      	ldrb	r3, [r0, #8]
   40e3c:	f3c3 1302 	ubfx	r3, r3, #4, #3
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   40e40:	4604      	mov	r4, r0
   40e42:	2b00      	cmp	r3, #0
   40e44:	fa93 f0a3 	rbit	r0, r3
   40e48:	fab0 f080 	clz	r0, r0
   40e4c:	bf08      	it	eq
   40e4e:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   40e52:	b082      	sub	sp, #8
   40e54:	f100 0501 	add.w	r5, r0, #1
	LL_ASSERT(chan);
   40e58:	d045      	beq.n	40ee6 <chan_prepare.isra.0+0xae>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   40e5a:	7a21      	ldrb	r1, [r4, #8]
   40e5c:	1e5a      	subs	r2, r3, #1
   40e5e:	4013      	ands	r3, r2
   40e60:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   40e64:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   40e68:	7221      	strb	r1, [r4, #8]
	lll_chan_set(36 + chan);
   40e6a:	f7ff fba1 	bl	405b0 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   40e6e:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   40e70:	f10d 0107 	add.w	r1, sp, #7
   40e74:	f104 000c 	add.w	r0, r4, #12
   40e78:	f88d 3007 	strb.w	r3, [sp, #7]
   40e7c:	f7ff ffa0 	bl	40dc0 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   40e80:	4605      	mov	r5, r0
   40e82:	2800      	cmp	r0, #0
   40e84:	d040      	beq.n	40f08 <chan_prepare.isra.0+0xd0>

	radio_pkt_tx_set(pdu);
   40e86:	4628      	mov	r0, r5
   40e88:	f001 ff06 	bl	42c98 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   40e8c:	782b      	ldrb	r3, [r5, #0]
   40e8e:	f003 030f 	and.w	r3, r3, #15
   40e92:	2b02      	cmp	r3, #2
   40e94:	d01e      	beq.n	40ed4 <chan_prepare.isra.0+0x9c>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   40e96:	f10d 0107 	add.w	r1, sp, #7
   40e9a:	f104 0018 	add.w	r0, r4, #24
   40e9e:	f7ff ff8f 	bl	40dc0 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   40ea2:	4606      	mov	r6, r0
   40ea4:	2800      	cmp	r0, #0
   40ea6:	d03d      	beq.n	40f24 <chan_prepare.isra.0+0xec>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   40ea8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   40eac:	b963      	cbnz	r3, 40ec8 <chan_prepare.isra.0+0x90>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   40eae:	4621      	mov	r1, r4
   40eb0:	4823      	ldr	r0, [pc, #140]	; (40f40 <chan_prepare.isra.0+0x108>)
   40eb2:	f001 fe19 	bl	42ae8 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   40eb6:	2096      	movs	r0, #150	; 0x96
   40eb8:	f002 f898 	bl	42fec <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   40ebc:	2000      	movs	r0, #0
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   40ebe:	b002      	add	sp, #8
   40ec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_switch_complete_and_rx(0);
   40ec4:	f001 bf66 	b.w	42d94 <radio_switch_complete_and_rx>
			memcpy(&scan_pdu->scan_rsp.addr[0],
   40ec8:	2206      	movs	r2, #6
   40eca:	1ca9      	adds	r1, r5, #2
   40ecc:	1cb0      	adds	r0, r6, #2
   40ece:	f00a fec3 	bl	4bc58 <memcpy>
   40ed2:	e7ec      	b.n	40eae <chan_prepare.isra.0+0x76>
		radio_isr_set(isr_done, lll);
   40ed4:	481b      	ldr	r0, [pc, #108]	; (40f44 <chan_prepare.isra.0+0x10c>)
   40ed6:	4621      	mov	r1, r4
   40ed8:	f001 fe06 	bl	42ae8 <radio_isr_set>
}
   40edc:	b002      	add	sp, #8
   40ede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_switch_complete_and_disable();
   40ee2:	f001 bfff 	b.w	42ee4 <radio_switch_complete_and_disable>
	LL_ASSERT(chan);
   40ee6:	4a18      	ldr	r2, [pc, #96]	; (40f48 <chan_prepare.isra.0+0x110>)
   40ee8:	4918      	ldr	r1, [pc, #96]	; (40f4c <chan_prepare.isra.0+0x114>)
   40eea:	4819      	ldr	r0, [pc, #100]	; (40f50 <chan_prepare.isra.0+0x118>)
   40eec:	f240 5337 	movw	r3, #1335	; 0x537
   40ef0:	f008 fd83 	bl	499fa <printk>
   40ef4:	4040      	eors	r0, r0
   40ef6:	f380 8811 	msr	BASEPRI, r0
   40efa:	f04f 0003 	mov.w	r0, #3
   40efe:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   40f00:	7a23      	ldrb	r3, [r4, #8]
   40f02:	f3c3 1302 	ubfx	r3, r3, #4, #3
   40f06:	e7a8      	b.n	40e5a <chan_prepare.isra.0+0x22>
	LL_ASSERT(pdu);
   40f08:	4a0f      	ldr	r2, [pc, #60]	; (40f48 <chan_prepare.isra.0+0x110>)
   40f0a:	4912      	ldr	r1, [pc, #72]	; (40f54 <chan_prepare.isra.0+0x11c>)
   40f0c:	4810      	ldr	r0, [pc, #64]	; (40f50 <chan_prepare.isra.0+0x118>)
   40f0e:	f44f 63a8 	mov.w	r3, #1344	; 0x540
   40f12:	f008 fd72 	bl	499fa <printk>
   40f16:	4040      	eors	r0, r0
   40f18:	f380 8811 	msr	BASEPRI, r0
   40f1c:	f04f 0003 	mov.w	r0, #3
   40f20:	df02      	svc	2
   40f22:	e7b0      	b.n	40e86 <chan_prepare.isra.0+0x4e>
		LL_ASSERT(scan_pdu);
   40f24:	4a08      	ldr	r2, [pc, #32]	; (40f48 <chan_prepare.isra.0+0x110>)
   40f26:	490c      	ldr	r1, [pc, #48]	; (40f58 <chan_prepare.isra.0+0x120>)
   40f28:	4809      	ldr	r0, [pc, #36]	; (40f50 <chan_prepare.isra.0+0x118>)
   40f2a:	f240 534a 	movw	r3, #1354	; 0x54a
   40f2e:	f008 fd64 	bl	499fa <printk>
   40f32:	4040      	eors	r0, r0
   40f34:	f380 8811 	msr	BASEPRI, r0
   40f38:	f04f 0003 	mov.w	r0, #3
   40f3c:	df02      	svc	2
   40f3e:	e7b3      	b.n	40ea8 <chan_prepare.isra.0+0x70>
   40f40:	00040a51 	.word	0x00040a51
   40f44:	00040f5d 	.word	0x00040f5d
   40f48:	0005363c 	.word	0x0005363c
   40f4c:	000536a8 	.word	0x000536a8
   40f50:	00052a70 	.word	0x00052a70
   40f54:	000536b0 	.word	0x000536b0
   40f58:	000536b4 	.word	0x000536b4

00040f5c <isr_done>:
{
   40f5c:	b510      	push	{r4, lr}
   40f5e:	4604      	mov	r4, r0
	lll_isr_status_reset();
   40f60:	f7ff fb7e 	bl	40660 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   40f64:	7a23      	ldrb	r3, [r4, #8]
   40f66:	f003 0271 	and.w	r2, r3, #113	; 0x71
   40f6a:	2a01      	cmp	r2, #1
   40f6c:	d105      	bne.n	40f7a <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   40f6e:	f3c3 0242 	ubfx	r2, r3, #1, #3
   40f72:	f362 1306 	bfi	r3, r2, #4, #3
   40f76:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   40f78:	b2db      	uxtb	r3, r3
   40f7a:	f013 0f70 	tst.w	r3, #112	; 0x70
   40f7e:	d005      	beq.n	40f8c <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   40f80:	6863      	ldr	r3, [r4, #4]
   40f82:	b153      	cbz	r3, 40f9a <isr_done+0x3e>
   40f84:	f893 3020 	ldrb.w	r3, [r3, #32]
   40f88:	079b      	lsls	r3, r3, #30
   40f8a:	d506      	bpl.n	40f9a <isr_done+0x3e>
	radio_filter_disable();
   40f8c:	f001 fffc 	bl	42f88 <radio_filter_disable>
	lll_isr_cleanup(param);
   40f90:	4620      	mov	r0, r4
}
   40f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   40f96:	f7ff bb71 	b.w	4067c <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   40f9a:	4620      	mov	r0, r4
   40f9c:	f7ff ff4c 	bl	40e38 <chan_prepare.isra.0>
		radio_tx_enable();
   40fa0:	f001 fe96 	bl	42cd0 <radio_tx_enable>
}
   40fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   40fa8:	f002 b92c 	b.w	43204 <radio_tmr_end_capture>

00040fac <prepare_cb>:
{
   40fac:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   40fae:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   40fb0:	6863      	ldr	r3, [r4, #4]
{
   40fb2:	b083      	sub	sp, #12
   40fb4:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   40fb6:	2b00      	cmp	r3, #0
   40fb8:	d16d      	bne.n	41096 <prepare_cb+0xea>
	radio_reset();
   40fba:	f001 fdd7 	bl	42b6c <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   40fbe:	2000      	movs	r0, #0
   40fc0:	f001 fe08 	bl	42bd4 <radio_tx_power_set>
	radio_phy_set(0, 0);
   40fc4:	2100      	movs	r1, #0
   40fc6:	4608      	mov	r0, r1
   40fc8:	f001 fdf4 	bl	42bb4 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   40fcc:	2200      	movs	r2, #0
   40fce:	2125      	movs	r1, #37	; 0x25
   40fd0:	2008      	movs	r0, #8
   40fd2:	f001 fe35 	bl	42c40 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   40fd6:	4b35      	ldr	r3, [pc, #212]	; (410ac <prepare_cb+0x100>)
   40fd8:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   40fda:	a801      	add	r0, sp, #4
   40fdc:	f001 fe18 	bl	42c10 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   40fe0:	4933      	ldr	r1, [pc, #204]	; (410b0 <prepare_cb+0x104>)
   40fe2:	f240 605b 	movw	r0, #1627	; 0x65b
   40fe6:	f001 feb7 	bl	42d58 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   40fea:	7a23      	ldrb	r3, [r4, #8]
   40fec:	f3c3 0242 	ubfx	r2, r3, #1, #3
   40ff0:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   40ff4:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   40ff6:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   40ff8:	f7ff ff1e 	bl	40e38 <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   40ffc:	f7fe ff54 	bl	3fea8 <ull_filter_lll_rl_enabled>
   41000:	bb98      	cbnz	r0, 4106a <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   41002:	7a63      	ldrb	r3, [r4, #9]
   41004:	079b      	lsls	r3, r3, #30
   41006:	d127      	bne.n	41058 <prepare_cb+0xac>
	ull = HDR_LLL2ULL(lll);
   41008:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   4100a:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   4100c:	4638      	mov	r0, r7
   4100e:	f7ff fab1 	bl	40574 <lll_event_offset_get>
   41012:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   41014:	686a      	ldr	r2, [r5, #4]
   41016:	f106 0109 	add.w	r1, r6, #9
   4101a:	2001      	movs	r0, #1
   4101c:	f001 fff2 	bl	43004 <radio_tmr_start>
	radio_tmr_end_capture();
   41020:	f002 f8f0 	bl	43204 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   41024:	4620      	mov	r0, r4
   41026:	f7f7 fe8f 	bl	38d48 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   4102a:	1c81      	adds	r1, r0, #2
   4102c:	4632      	mov	r2, r6
   4102e:	b2c9      	uxtb	r1, r1
   41030:	4638      	mov	r0, r7
   41032:	f7ff faad 	bl	40590 <lll_preempt_calc>
   41036:	b930      	cbnz	r0, 41046 <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   41038:	4620      	mov	r0, r4
   4103a:	f7ff fa35 	bl	404a8 <lll_prepare_done>
		LL_ASSERT(!ret);
   4103e:	b9d0      	cbnz	r0, 41076 <prepare_cb+0xca>
}
   41040:	2000      	movs	r0, #0
   41042:	b003      	add	sp, #12
   41044:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   41046:	481b      	ldr	r0, [pc, #108]	; (410b4 <prepare_cb+0x108>)
   41048:	4621      	mov	r1, r4
   4104a:	f001 fd4d 	bl	42ae8 <radio_isr_set>
		radio_disable();
   4104e:	f001 fe45 	bl	42cdc <radio_disable>
}
   41052:	2000      	movs	r0, #0
   41054:	b003      	add	sp, #12
   41056:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   41058:	2001      	movs	r0, #1
   4105a:	f7fe fa99 	bl	3f590 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   4105e:	7841      	ldrb	r1, [r0, #1]
   41060:	1c82      	adds	r2, r0, #2
   41062:	7800      	ldrb	r0, [r0, #0]
   41064:	f001 ff70 	bl	42f48 <radio_filter_configure>
   41068:	e7ce      	b.n	41008 <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   4106a:	7a60      	ldrb	r0, [r4, #9]
   4106c:	f010 0003 	ands.w	r0, r0, #3
   41070:	bf18      	it	ne
   41072:	2001      	movne	r0, #1
   41074:	e7f1      	b.n	4105a <prepare_cb+0xae>
		LL_ASSERT(!ret);
   41076:	4a10      	ldr	r2, [pc, #64]	; (410b8 <prepare_cb+0x10c>)
   41078:	4910      	ldr	r1, [pc, #64]	; (410bc <prepare_cb+0x110>)
   4107a:	4811      	ldr	r0, [pc, #68]	; (410c0 <prepare_cb+0x114>)
   4107c:	f240 33d1 	movw	r3, #977	; 0x3d1
   41080:	f008 fcbb 	bl	499fa <printk>
   41084:	4040      	eors	r0, r0
   41086:	f380 8811 	msr	BASEPRI, r0
   4108a:	f04f 0003 	mov.w	r0, #3
   4108e:	df02      	svc	2
}
   41090:	2000      	movs	r0, #0
   41092:	b003      	add	sp, #12
   41094:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   41096:	f893 3020 	ldrb.w	r3, [r3, #32]
   4109a:	079a      	lsls	r2, r3, #30
   4109c:	d08d      	beq.n	40fba <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   4109e:	4809      	ldr	r0, [pc, #36]	; (410c4 <prepare_cb+0x118>)
   410a0:	4621      	mov	r1, r4
   410a2:	f001 fd21 	bl	42ae8 <radio_isr_set>
		radio_disable();
   410a6:	f001 fe19 	bl	42cdc <radio_disable>
		return 0;
   410aa:	e7c9      	b.n	41040 <prepare_cb+0x94>
   410ac:	8e89bed6 	.word	0x8e89bed6
   410b0:	00555555 	.word	0x00555555
   410b4:	00040a39 	.word	0x00040a39
   410b8:	0005363c 	.word	0x0005363c
   410bc:	00052d4c 	.word	0x00052d4c
   410c0:	00052a70 	.word	0x00052a70
   410c4:	0004070d 	.word	0x0004070d

000410c8 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   410c8:	68c3      	ldr	r3, [r0, #12]
{
   410ca:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   410cc:	681e      	ldr	r6, [r3, #0]
{
   410ce:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   410d0:	f7f4 faf6 	bl	356c0 <ticker_ticks_now_get>
   410d4:	4605      	mov	r5, r0
   410d6:	4630      	mov	r0, r6
   410d8:	f7ff fa4c 	bl	40574 <lll_event_offset_get>
	p->remainder = 0;
   410dc:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   410de:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   410e0:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   410e4:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   410e6:	4620      	mov	r0, r4
}
   410e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   410ec:	f7ff bf5e 	b.w	40fac <prepare_cb>

000410f0 <lll_adv_prepare>:
{
   410f0:	b510      	push	{r4, lr}
   410f2:	b082      	sub	sp, #8
   410f4:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   410f6:	f7ff fc61 	bl	409bc <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   410fa:	2800      	cmp	r0, #0
   410fc:	db1a      	blt.n	41134 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   410fe:	4a14      	ldr	r2, [pc, #80]	; (41150 <lll_adv_prepare+0x60>)
   41100:	4914      	ldr	r1, [pc, #80]	; (41154 <lll_adv_prepare+0x64>)
   41102:	4815      	ldr	r0, [pc, #84]	; (41158 <lll_adv_prepare+0x68>)
   41104:	9400      	str	r4, [sp, #0]
   41106:	2300      	movs	r3, #0
   41108:	f7f7 f9c8 	bl	3849c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   4110c:	b108      	cbz	r0, 41112 <lll_adv_prepare+0x22>
   4110e:	3077      	adds	r0, #119	; 0x77
   41110:	d101      	bne.n	41116 <lll_adv_prepare+0x26>
}
   41112:	b002      	add	sp, #8
   41114:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   41116:	4a11      	ldr	r2, [pc, #68]	; (4115c <lll_adv_prepare+0x6c>)
   41118:	4911      	ldr	r1, [pc, #68]	; (41160 <lll_adv_prepare+0x70>)
   4111a:	4812      	ldr	r0, [pc, #72]	; (41164 <lll_adv_prepare+0x74>)
   4111c:	f240 239d 	movw	r3, #669	; 0x29d
   41120:	f008 fc6b 	bl	499fa <printk>
   41124:	4040      	eors	r0, r0
   41126:	f380 8811 	msr	BASEPRI, r0
   4112a:	f04f 0003 	mov.w	r0, #3
   4112e:	df02      	svc	2
}
   41130:	b002      	add	sp, #8
   41132:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   41134:	4a09      	ldr	r2, [pc, #36]	; (4115c <lll_adv_prepare+0x6c>)
   41136:	490c      	ldr	r1, [pc, #48]	; (41168 <lll_adv_prepare+0x78>)
   41138:	480a      	ldr	r0, [pc, #40]	; (41164 <lll_adv_prepare+0x74>)
   4113a:	f240 239a 	movw	r3, #666	; 0x29a
   4113e:	f008 fc5c 	bl	499fa <printk>
   41142:	4040      	eors	r0, r0
   41144:	f380 8811 	msr	BASEPRI, r0
   41148:	f04f 0003 	mov.w	r0, #3
   4114c:	df02      	svc	2
   4114e:	e7d6      	b.n	410fe <lll_adv_prepare+0xe>
   41150:	00040fad 	.word	0x00040fad
   41154:	00040b9d 	.word	0x00040b9d
   41158:	00040b31 	.word	0x00040b31
   4115c:	0005363c 	.word	0x0005363c
   41160:	000536c0 	.word	0x000536c0
   41164:	00052a70 	.word	0x00052a70
   41168:	000535ec 	.word	0x000535ec

0004116c <lll_adv_scan_req_check>:
{
   4116c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   41170:	f890 c009 	ldrb.w	ip, [r0, #9]
{
   41174:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   41178:	f01c 0f01 	tst.w	ip, #1
{
   4117c:	460f      	mov	r7, r1
   4117e:	4616      	mov	r6, r2
   41180:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   41182:	d009      	beq.n	41198 <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   41184:	f1b8 0f00 	cmp.w	r8, #0
   41188:	d016      	beq.n	411b8 <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   4118a:	783b      	ldrb	r3, [r7, #0]
   4118c:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   41190:	d019      	beq.n	411c6 <lll_adv_scan_req_check+0x5a>
{
   41192:	2000      	movs	r0, #0
}
   41194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   41198:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   4119a:	f811 0b02 	ldrb.w	r0, [r1], #2
   4119e:	9a07      	ldr	r2, [sp, #28]
   411a0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   411a4:	f7fe fe24 	bl	3fdf0 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   411a8:	2800      	cmp	r0, #0
   411aa:	d1ee      	bne.n	4118a <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   411ac:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   411ae:	07db      	lsls	r3, r3, #31
   411b0:	d5ef      	bpl.n	41192 <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   411b2:	f1b8 0f00 	cmp.w	r8, #0
   411b6:	d1e8      	bne.n	4118a <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   411b8:	9b07      	ldr	r3, [sp, #28]
   411ba:	7818      	ldrb	r0, [r3, #0]
   411bc:	f7fe fdb4 	bl	3fd28 <ull_filter_lll_irk_in_fal>
   411c0:	2800      	cmp	r0, #0
   411c2:	d1e2      	bne.n	4118a <lll_adv_scan_req_check+0x1e>
   411c4:	e7e5      	b.n	41192 <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   411c6:	2206      	movs	r2, #6
   411c8:	f107 0108 	add.w	r1, r7, #8
   411cc:	4628      	mov	r0, r5
   411ce:	f00a fd33 	bl	4bc38 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   411d2:	fab0 f080 	clz	r0, r0
   411d6:	0940      	lsrs	r0, r0, #5
}
   411d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000411dc <lll_adv_connect_ind_check>:
{
   411dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   411e0:	461f      	mov	r7, r3
	if (tgt_addr) {
   411e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   411e4:	f89d 9020 	ldrb.w	r9, [sp, #32]
   411e8:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   411ec:	4605      	mov	r5, r0
   411ee:	460c      	mov	r4, r1
   411f0:	4690      	mov	r8, r2
	if (tgt_addr) {
   411f2:	b96b      	cbnz	r3, 41210 <lll_adv_connect_ind_check+0x34>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   411f4:	7a41      	ldrb	r1, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   411f6:	f001 0103 	and.w	r1, r1, #3
   411fa:	2901      	cmp	r1, #1
   411fc:	d92b      	bls.n	41256 <lll_adv_connect_ind_check+0x7a>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   411fe:	2e00      	cmp	r6, #0
   41200:	d03a      	beq.n	41278 <lll_adv_connect_ind_check+0x9c>
	return (tx_addr == sr->rx_addr) &&
   41202:	7823      	ldrb	r3, [r4, #0]
   41204:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   41208:	d03d      	beq.n	41286 <lll_adv_connect_ind_check+0xaa>
{
   4120a:	2000      	movs	r0, #0
}
   4120c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						      ci->connect_ind.init_addr,
   41210:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   41212:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   41214:	f81a 0b02 	ldrb.w	r0, [sl], #2
   41218:	f3c0 1080 	ubfx	r0, r0, #6, #1
   4121c:	4651      	mov	r1, sl
   4121e:	f7fe fde7 	bl	3fdf0 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   41222:	2800      	cmp	r0, #0
   41224:	d0f1      	beq.n	4120a <lll_adv_connect_ind_check+0x2e>
	return (tx_addr == sr->rx_addr) &&
   41226:	7823      	ldrb	r3, [r4, #0]
   41228:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   4122c:	d1ed      	bne.n	4120a <lll_adv_connect_ind_check+0x2e>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   4122e:	4638      	mov	r0, r7
   41230:	2206      	movs	r2, #6
   41232:	f104 0108 	add.w	r1, r4, #8
   41236:	f00a fcff 	bl	4bc38 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   4123a:	2800      	cmp	r0, #0
   4123c:	d1e5      	bne.n	4120a <lll_adv_connect_ind_check+0x2e>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   4123e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   41240:	7818      	ldrb	r0, [r3, #0]
static inline bool isr_rx_ci_tgta_check(struct lll_adv *lll,
					uint8_t rx_addr, uint8_t *tgt_addr,
					struct pdu_adv *ci, uint8_t rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   41242:	28ff      	cmp	r0, #255	; 0xff
   41244:	d029      	beq.n	4129a <lll_adv_connect_ind_check+0xbe>
   41246:	7aab      	ldrb	r3, [r5, #10]
   41248:	2bff      	cmp	r3, #255	; 0xff
   4124a:	d026      	beq.n	4129a <lll_adv_connect_ind_check+0xbe>
		return rl_idx == lll->rl_idx;
   4124c:	1ac0      	subs	r0, r0, r3
   4124e:	fab0 f080 	clz	r0, r0
   41252:	0940      	lsrs	r0, r0, #5
   41254:	e7da      	b.n	4120c <lll_adv_connect_ind_check+0x30>
						ci->connect_ind.init_addr,
   41256:	4621      	mov	r1, r4
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   41258:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   4125a:	f811 0b02 	ldrb.w	r0, [r1], #2
   4125e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   41262:	f7fe fdc5 	bl	3fdf0 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   41266:	2800      	cmp	r0, #0
   41268:	d1cb      	bne.n	41202 <lll_adv_connect_ind_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   4126a:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   4126c:	f003 0303 	and.w	r3, r3, #3
   41270:	2b01      	cmp	r3, #1
   41272:	d9ca      	bls.n	4120a <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   41274:	2e00      	cmp	r6, #0
   41276:	d1c4      	bne.n	41202 <lll_adv_connect_ind_check+0x26>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   41278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   4127a:	7818      	ldrb	r0, [r3, #0]
   4127c:	f7fe fd54 	bl	3fd28 <ull_filter_lll_irk_in_fal>
   41280:	2800      	cmp	r0, #0
   41282:	d1be      	bne.n	41202 <lll_adv_connect_ind_check+0x26>
   41284:	e7c1      	b.n	4120a <lll_adv_connect_ind_check+0x2e>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   41286:	2206      	movs	r2, #6
   41288:	f104 0108 	add.w	r1, r4, #8
   4128c:	4638      	mov	r0, r7
   4128e:	f00a fcd3 	bl	4bc38 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   41292:	fab0 f080 	clz	r0, r0
   41296:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   41298:	e7b8      	b.n	4120c <lll_adv_connect_ind_check+0x30>
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	return (rx_addr == ci->tx_addr) &&
   4129a:	7823      	ldrb	r3, [r4, #0]
   4129c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   412a0:	454b      	cmp	r3, r9
   412a2:	d1b2      	bne.n	4120a <lll_adv_connect_ind_check+0x2e>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   412a4:	9809      	ldr	r0, [sp, #36]	; 0x24
   412a6:	2206      	movs	r2, #6
   412a8:	4651      	mov	r1, sl
   412aa:	f00a fcc5 	bl	4bc38 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   412ae:	fab0 f080 	clz	r0, r0
   412b2:	0940      	lsrs	r0, r0, #5
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   412b4:	e7aa      	b.n	4120c <lll_adv_connect_ind_check+0x30>
   412b6:	bf00      	nop

000412b8 <isr_rx>:
{
   412b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   412bc:	b08b      	sub	sp, #44	; 0x2c
   412be:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   412c0:	f001 fd36 	bl	42d30 <radio_is_done>
	if (trx_done) {
   412c4:	b2c0      	uxtb	r0, r0
   412c6:	b950      	cbnz	r0, 412de <isr_rx+0x26>
	lll_isr_status_reset();
   412c8:	f7ff f9ca 	bl	40660 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   412cc:	487c      	ldr	r0, [pc, #496]	; (414c0 <isr_rx+0x208>)
   412ce:	4621      	mov	r1, r4
   412d0:	f001 fc0a 	bl	42ae8 <radio_isr_set>
}
   412d4:	b00b      	add	sp, #44	; 0x2c
   412d6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   412da:	f001 bcff 	b.w	42cdc <radio_disable>
		crc_ok = radio_crc_is_valid();
   412de:	f001 fd47 	bl	42d70 <radio_crc_is_valid>
   412e2:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   412e4:	f001 fe62 	bl	42fac <radio_filter_has_match>
   412e8:	4681      	mov	r9, r0
		devmatch_id = radio_filter_match_get();
   412ea:	f001 fe69 	bl	42fc0 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   412ee:	f002 f87f 	bl	433f0 <radio_ar_has_match>
   412f2:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   412f4:	f002 f860 	bl	433b8 <radio_ar_match_get>
	if (crc_ok) {
   412f8:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   412fa:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   412fc:	f001 fe1a 	bl	42f34 <radio_rssi_is_ready>
	lll_isr_status_reset();
   41300:	f7ff f9ae 	bl	40660 <lll_isr_status_reset>
	if (crc_ok) {
   41304:	2d00      	cmp	r5, #0
   41306:	d0e1      	beq.n	412cc <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   41308:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   4130c:	d17a      	bne.n	41404 <isr_rx+0x14c>
   4130e:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   41310:	2001      	movs	r0, #1
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   41312:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	node_rx = ull_pdu_rx_alloc_peek(1);
   41316:	f7f6 fd83 	bl	37e20 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   4131a:	4605      	mov	r5, r0
   4131c:	2800      	cmp	r0, #0
   4131e:	f000 80a2 	beq.w	41466 <isr_rx+0x1ae>
   41322:	7b23      	ldrb	r3, [r4, #12]
   41324:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   41328:	f105 011c 	add.w	r1, r5, #28
   4132c:	691f      	ldr	r7, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   4132e:	463b      	mov	r3, r7
		devmatch_ok = radio_filter_has_match();
   41330:	fa5f f989 	uxtb.w	r9, r9
	tx_addr = pdu_adv->tx_addr;
   41334:	f813 0b02 	ldrb.w	r0, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   41338:	f000 0c0f 	and.w	ip, r0, #15
   4133c:	f1bc 0f01 	cmp.w	ip, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   41340:	bf08      	it	eq
   41342:	f107 0808 	addeq.w	r8, r7, #8
	tx_addr = pdu_adv->tx_addr;
   41346:	f3c0 1280 	ubfx	r2, r0, #6, #1
	rx_addr = pdu_adv->rx_addr;
   4134a:	ea4f 17d0 	mov.w	r7, r0, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   4134e:	7f28      	ldrb	r0, [r5, #28]
   41350:	f000 000f 	and.w	r0, r0, #15
		tgt_addr = NULL;
   41354:	bf18      	it	ne
   41356:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   4135a:	2803      	cmp	r0, #3
   4135c:	d05a      	beq.n	41414 <isr_rx+0x15c>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   4135e:	2805      	cmp	r0, #5
   41360:	d1b4      	bne.n	412cc <isr_rx+0x14>
   41362:	7f68      	ldrb	r0, [r5, #29]
   41364:	2822      	cmp	r0, #34	; 0x22
   41366:	d1b1      	bne.n	412cc <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   41368:	6860      	ldr	r0, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   4136a:	2800      	cmp	r0, #0
   4136c:	d0ae      	beq.n	412cc <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   4136e:	f890 0020 	ldrb.w	r0, [r0, #32]
   41372:	0780      	lsls	r0, r0, #30
   41374:	d4aa      	bmi.n	412cc <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   41376:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   4137a:	9003      	str	r0, [sp, #12]
   4137c:	e9cd 8901 	strd	r8, r9, [sp, #4]
   41380:	9700      	str	r7, [sp, #0]
   41382:	4620      	mov	r0, r4
   41384:	f7ff ff2a 	bl	411dc <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   41388:	2800      	cmp	r0, #0
   4138a:	d09f      	beq.n	412cc <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   4138c:	2004      	movs	r0, #4
   4138e:	f7f6 fd47 	bl	37e20 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   41392:	2800      	cmp	r0, #0
   41394:	d09a      	beq.n	412cc <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   41396:	484b      	ldr	r0, [pc, #300]	; (414c4 <isr_rx+0x20c>)
   41398:	4621      	mov	r1, r4
   4139a:	f001 fba5 	bl	42ae8 <radio_isr_set>
		radio_disable();
   4139e:	f001 fc9d 	bl	42cdc <radio_disable>
		LL_ASSERT(!radio_is_ready());
   413a2:	f001 fcbb 	bl	42d1c <radio_is_ready>
   413a6:	2800      	cmp	r0, #0
   413a8:	d14f      	bne.n	4144a <isr_rx+0x192>
		lll->conn->periph.initiated = 1;
   413aa:	6862      	ldr	r2, [r4, #4]
   413ac:	f892 3020 	ldrb.w	r3, [r2, #32]
   413b0:	f043 0301 	orr.w	r3, r3, #1
   413b4:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   413b8:	f7f6 fd52 	bl	37e60 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   413bc:	2216      	movs	r2, #22
		rx->hdr.handle = 0xffff;
   413be:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   413c2:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   413c4:	80c3      	strh	r3, [r0, #6]
		ftr->param = lll;
   413c6:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   413c8:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   413ca:	f001 fecf 	bl	4316c <radio_tmr_start_get>
   413ce:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   413d0:	f001 ff20 	bl	43214 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   413d4:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   413d6:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   413d8:	4608      	mov	r0, r1
   413da:	f001 fc6d 	bl	42cb8 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   413de:	1a24      	subs	r4, r4, r0
   413e0:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   413e2:	b1ae      	cbz	r6, 41410 <isr_rx+0x158>
   413e4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   413e8:	766b      	strb	r3, [r5, #25]
			ftr->extra = ull_pdu_rx_alloc();
   413ea:	f7f6 fd39 	bl	37e60 <ull_pdu_rx_alloc>
   413ee:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   413f0:	4629      	mov	r1, r5
   413f2:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   413f4:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   413f6:	f7f6 fd49 	bl	37e8c <ull_rx_put>
		ull_rx_sched();
   413fa:	f7f6 fd57 	bl	37eac <ull_rx_sched>
}
   413fe:	b00b      	add	sp, #44	; 0x2c
   41400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   41404:	fa5f f088 	uxtb.w	r0, r8
   41408:	f7fe fc3c 	bl	3fc84 <ull_filter_lll_rl_irk_idx>
   4140c:	4603      	mov	r3, r0
   4140e:	e77f      	b.n	41310 <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   41410:	23ff      	movs	r3, #255	; 0xff
   41412:	e7e9      	b.n	413e8 <isr_rx+0x130>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   41414:	7f68      	ldrb	r0, [r5, #29]
   41416:	280c      	cmp	r0, #12
   41418:	f47f af58 	bne.w	412cc <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   4141c:	f1b8 0f00 	cmp.w	r8, #0
   41420:	f47f af54 	bne.w	412cc <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   41424:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   41428:	9001      	str	r0, [sp, #4]
   4142a:	f8cd 9000 	str.w	r9, [sp]
   4142e:	4620      	mov	r0, r4
   41430:	e9cd 2306 	strd	r2, r3, [sp, #24]
   41434:	9105      	str	r1, [sp, #20]
   41436:	f7ff fe99 	bl	4116c <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   4143a:	bb10      	cbnz	r0, 41482 <isr_rx+0x1ca>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   4143c:	7f28      	ldrb	r0, [r5, #28]
   4143e:	9b07      	ldr	r3, [sp, #28]
   41440:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   41444:	f000 000f 	and.w	r0, r0, #15
   41448:	e789      	b.n	4135e <isr_rx+0xa6>
		LL_ASSERT(!radio_is_ready());
   4144a:	4a1f      	ldr	r2, [pc, #124]	; (414c8 <isr_rx+0x210>)
   4144c:	491f      	ldr	r1, [pc, #124]	; (414cc <isr_rx+0x214>)
   4144e:	4820      	ldr	r0, [pc, #128]	; (414d0 <isr_rx+0x218>)
   41450:	f240 53da 	movw	r3, #1498	; 0x5da
   41454:	f008 fad1 	bl	499fa <printk>
   41458:	4040      	eors	r0, r0
   4145a:	f380 8811 	msr	BASEPRI, r0
   4145e:	f04f 0003 	mov.w	r0, #3
   41462:	df02      	svc	2
   41464:	e7a1      	b.n	413aa <isr_rx+0xf2>
	LL_ASSERT(node_rx);
   41466:	4a18      	ldr	r2, [pc, #96]	; (414c8 <isr_rx+0x210>)
   41468:	491a      	ldr	r1, [pc, #104]	; (414d4 <isr_rx+0x21c>)
   4146a:	4819      	ldr	r0, [pc, #100]	; (414d0 <isr_rx+0x218>)
   4146c:	f240 537a 	movw	r3, #1402	; 0x57a
   41470:	f008 fac3 	bl	499fa <printk>
   41474:	4040      	eors	r0, r0
   41476:	f380 8811 	msr	BASEPRI, r0
   4147a:	f04f 0003 	mov.w	r0, #3
   4147e:	df02      	svc	2
   41480:	e74f      	b.n	41322 <isr_rx+0x6a>
		radio_isr_set(isr_done, lll);
   41482:	480f      	ldr	r0, [pc, #60]	; (414c0 <isr_rx+0x208>)
   41484:	4621      	mov	r1, r4
   41486:	f001 fb2f 	bl	42ae8 <radio_isr_set>
		radio_switch_complete_and_disable();
   4148a:	f001 fd2b 	bl	42ee4 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   4148e:	7e23      	ldrb	r3, [r4, #24]
   41490:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   41494:	69d8      	ldr	r0, [r3, #28]
   41496:	f001 fbff 	bl	42c98 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   4149a:	f001 fc3f 	bl	42d1c <radio_is_ready>
   4149e:	2800      	cmp	r0, #0
   414a0:	d0ad      	beq.n	413fe <isr_rx+0x146>
   414a2:	4a09      	ldr	r2, [pc, #36]	; (414c8 <isr_rx+0x210>)
   414a4:	4909      	ldr	r1, [pc, #36]	; (414cc <isr_rx+0x214>)
   414a6:	480a      	ldr	r0, [pc, #40]	; (414d0 <isr_rx+0x218>)
   414a8:	f240 5393 	movw	r3, #1427	; 0x593
   414ac:	f008 faa5 	bl	499fa <printk>
   414b0:	4040      	eors	r0, r0
   414b2:	f380 8811 	msr	BASEPRI, r0
   414b6:	f04f 0003 	mov.w	r0, #3
   414ba:	df02      	svc	2
		if (!err) {
   414bc:	e79f      	b.n	413fe <isr_rx+0x146>
   414be:	bf00      	nop
   414c0:	00040f5d 	.word	0x00040f5d
   414c4:	00040a39 	.word	0x00040a39
   414c8:	0005363c 	.word	0x0005363c
   414cc:	00053690 	.word	0x00053690
   414d0:	00052a70 	.word	0x00052a70
   414d4:	00053688 	.word	0x00053688

000414d8 <common_prepare_cb>:
{
   414d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	lll = p->param;
   414dc:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->is_stop ||
   414de:	f994 3016 	ldrsb.w	r3, [r4, #22]
   414e2:	2b00      	cmp	r3, #0
{
   414e4:	b08c      	sub	sp, #48	; 0x30
	if (unlikely(lll->is_stop ||
   414e6:	f2c0 810e 	blt.w	41706 <common_prepare_cb+0x22e>
   414ea:	6863      	ldr	r3, [r4, #4]
   414ec:	4605      	mov	r5, r0
   414ee:	460f      	mov	r7, r1
   414f0:	2b00      	cmp	r3, #0
   414f2:	f040 80fd 	bne.w	416f0 <common_prepare_cb+0x218>
	lll->state = 0U;
   414f6:	7da3      	ldrb	r3, [r4, #22]
   414f8:	f36f 0300 	bfc	r3, #0, #1
   414fc:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   414fe:	f001 fb35 	bl	42b6c <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   41502:	2000      	movs	r0, #0
   41504:	f001 fb66 	bl	42bd4 <radio_tx_power_set>
	radio_phy_set(0, 0);
   41508:	2100      	movs	r1, #0
   4150a:	4608      	mov	r0, r1
   4150c:	f001 fb52 	bl	42bb4 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   41510:	2200      	movs	r2, #0
   41512:	2125      	movs	r1, #37	; 0x25
   41514:	2008      	movs	r0, #8
   41516:	f001 fb93 	bl	42c40 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   4151a:	2001      	movs	r0, #1
   4151c:	f7f6 fc80 	bl	37e20 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   41520:	4606      	mov	r6, r0
   41522:	2800      	cmp	r0, #0
   41524:	f000 80d6 	beq.w	416d4 <common_prepare_cb+0x1fc>
	radio_pkt_rx_set(node_rx->pdu);
   41528:	f106 001c 	add.w	r0, r6, #28
   4152c:	f001 fbae 	bl	42c8c <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   41530:	4b7a      	ldr	r3, [pc, #488]	; (4171c <common_prepare_cb+0x244>)
   41532:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   41534:	a80b      	add	r0, sp, #44	; 0x2c
   41536:	f001 fb6b 	bl	42c10 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   4153a:	4979      	ldr	r1, [pc, #484]	; (41720 <common_prepare_cb+0x248>)
   4153c:	f240 605b 	movw	r0, #1627	; 0x65b
   41540:	f001 fc0a 	bl	42d58 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   41544:	7da0      	ldrb	r0, [r4, #22]
   41546:	f3c0 0041 	ubfx	r0, r0, #1, #2
   4154a:	3025      	adds	r0, #37	; 0x25
   4154c:	f7ff f830 	bl	405b0 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   41550:	4874      	ldr	r0, [pc, #464]	; (41724 <common_prepare_cb+0x24c>)
   41552:	4621      	mov	r1, r4
   41554:	f001 fac8 	bl	42ae8 <radio_isr_set>
	} else if (lll->type ||
   41558:	7da3      	ldrb	r3, [r4, #22]
   4155a:	069b      	lsls	r3, r3, #26
   4155c:	d403      	bmi.n	41566 <common_prepare_cb+0x8e>
		   lll->conn) {
   4155e:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   41560:	2b00      	cmp	r3, #0
   41562:	f000 8091 	beq.w	41688 <common_prepare_cb+0x1b0>
		radio_tmr_tifs_set(EVENT_IFS_US);
   41566:	2096      	movs	r0, #150	; 0x96
   41568:	f001 fd40 	bl	42fec <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   4156c:	2300      	movs	r3, #0
   4156e:	461a      	mov	r2, r3
   41570:	4619      	mov	r1, r3
   41572:	4618      	mov	r0, r3
   41574:	f001 fc56 	bl	42e24 <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   41578:	f7fe fc96 	bl	3fea8 <ull_filter_lll_rl_enabled>
   4157c:	2800      	cmp	r0, #0
   4157e:	d135      	bne.n	415ec <common_prepare_cb+0x114>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   41580:	7da3      	ldrb	r3, [r4, #22]
   41582:	f013 0f18 	tst.w	r3, #24
   41586:	d152      	bne.n	4162e <common_prepare_cb+0x156>
	ull = HDR_LLL2ULL(lll);
   41588:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   4158c:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   4158e:	4640      	mov	r0, r8
   41590:	f7fe fff0 	bl	40574 <lll_event_offset_get>
   41594:	4406      	add	r6, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   41596:	686a      	ldr	r2, [r5, #4]
   41598:	f106 0109 	add.w	r1, r6, #9
   4159c:	2000      	movs	r0, #0
   4159e:	f001 fd31 	bl	43004 <radio_tmr_start>
	radio_tmr_end_capture();
   415a2:	f001 fe2f 	bl	43204 <radio_tmr_end_capture>
	radio_rssi_measure();
   415a6:	f001 fcad 	bl	42f04 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   415aa:	4620      	mov	r0, r4
   415ac:	f7f7 fde4 	bl	39178 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   415b0:	1d01      	adds	r1, r0, #4
   415b2:	b2c9      	uxtb	r1, r1
   415b4:	4640      	mov	r0, r8
   415b6:	4632      	mov	r2, r6
   415b8:	f7fe ffea 	bl	40590 <lll_preempt_calc>
   415bc:	bb68      	cbnz	r0, 4161a <common_prepare_cb+0x142>
		if (!is_resume && lll->ticks_window) {
   415be:	b917      	cbnz	r7, 415c6 <common_prepare_cb+0xee>
   415c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   415c2:	2b00      	cmp	r3, #0
   415c4:	d163      	bne.n	4168e <common_prepare_cb+0x1b6>
		if (lll->conn) {
   415c6:	6863      	ldr	r3, [r4, #4]
   415c8:	b143      	cbz	r3, 415dc <common_prepare_cb+0x104>
			mfy_after_mstr_offset_get.param = p;
   415ca:	4b57      	ldr	r3, [pc, #348]	; (41728 <common_prepare_cb+0x250>)
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   415cc:	2201      	movs	r2, #1
   415ce:	2102      	movs	r1, #2
   415d0:	2000      	movs	r0, #0
			mfy_after_mstr_offset_get.param = p;
   415d2:	609d      	str	r5, [r3, #8]
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   415d4:	f7f2 fd02 	bl	33fdc <mayfly_enqueue>
			LL_ASSERT(!retval);
   415d8:	2800      	cmp	r0, #0
   415da:	d142      	bne.n	41662 <common_prepare_cb+0x18a>
		ret = lll_prepare_done(lll);
   415dc:	4620      	mov	r0, r4
   415de:	f7fe ff63 	bl	404a8 <lll_prepare_done>
		LL_ASSERT(!ret);
   415e2:	bb68      	cbnz	r0, 41640 <common_prepare_cb+0x168>
}
   415e4:	2000      	movs	r0, #0
   415e6:	b00c      	add	sp, #48	; 0x30
   415e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ull_filter_lll_get((lll->filter_policy &
   415ec:	7da0      	ldrb	r0, [r4, #22]
   415ee:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   415f2:	f7fd ffcd 	bl	3f590 <ull_filter_lll_get>
   415f6:	4606      	mov	r6, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   415f8:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   415fc:	f7fe face 	bl	3fb9c <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   41600:	7871      	ldrb	r1, [r6, #1]
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   41602:	4680      	mov	r8, r0
		radio_filter_configure(filter->enable_bitmask,
   41604:	1cb2      	adds	r2, r6, #2
   41606:	7830      	ldrb	r0, [r6, #0]
   41608:	f001 fc9e 	bl	42f48 <radio_filter_configure>
		radio_ar_configure(count, irks, 0);
   4160c:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   41610:	2200      	movs	r2, #0
   41612:	4641      	mov	r1, r8
   41614:	f001 fe9c 	bl	43350 <radio_ar_configure>
   41618:	e7b6      	b.n	41588 <common_prepare_cb+0xb0>
		radio_isr_set(isr_abort, lll);
   4161a:	4844      	ldr	r0, [pc, #272]	; (4172c <common_prepare_cb+0x254>)
   4161c:	4621      	mov	r1, r4
   4161e:	f001 fa63 	bl	42ae8 <radio_isr_set>
		radio_disable();
   41622:	f001 fb5b 	bl	42cdc <radio_disable>
}
   41626:	2000      	movs	r0, #0
   41628:	b00c      	add	sp, #48	; 0x30
   4162a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   4162e:	2001      	movs	r0, #1
   41630:	f7fd ffae 	bl	3f590 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   41634:	7841      	ldrb	r1, [r0, #1]
   41636:	1c82      	adds	r2, r0, #2
   41638:	7800      	ldrb	r0, [r0, #0]
   4163a:	f001 fc85 	bl	42f48 <radio_filter_configure>
   4163e:	e7a3      	b.n	41588 <common_prepare_cb+0xb0>
		LL_ASSERT(!ret);
   41640:	4a3b      	ldr	r2, [pc, #236]	; (41730 <common_prepare_cb+0x258>)
   41642:	493c      	ldr	r1, [pc, #240]	; (41734 <common_prepare_cb+0x25c>)
   41644:	483c      	ldr	r0, [pc, #240]	; (41738 <common_prepare_cb+0x260>)
   41646:	f44f 7305 	mov.w	r3, #532	; 0x214
   4164a:	f008 f9d6 	bl	499fa <printk>
   4164e:	4040      	eors	r0, r0
   41650:	f380 8811 	msr	BASEPRI, r0
   41654:	f04f 0003 	mov.w	r0, #3
   41658:	df02      	svc	2
}
   4165a:	2000      	movs	r0, #0
   4165c:	b00c      	add	sp, #48	; 0x30
   4165e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LL_ASSERT(!retval);
   41662:	4a33      	ldr	r2, [pc, #204]	; (41730 <common_prepare_cb+0x258>)
   41664:	4935      	ldr	r1, [pc, #212]	; (4173c <common_prepare_cb+0x264>)
   41666:	4834      	ldr	r0, [pc, #208]	; (41738 <common_prepare_cb+0x260>)
   41668:	f240 230f 	movw	r3, #527	; 0x20f
   4166c:	f008 f9c5 	bl	499fa <printk>
   41670:	4040      	eors	r0, r0
   41672:	f380 8811 	msr	BASEPRI, r0
   41676:	f04f 0003 	mov.w	r0, #3
   4167a:	df02      	svc	2
		ret = lll_prepare_done(lll);
   4167c:	4620      	mov	r0, r4
   4167e:	f7fe ff13 	bl	404a8 <lll_prepare_done>
		LL_ASSERT(!ret);
   41682:	2800      	cmp	r0, #0
   41684:	d0ae      	beq.n	415e4 <common_prepare_cb+0x10c>
   41686:	e7db      	b.n	41640 <common_prepare_cb+0x168>
		radio_switch_complete_and_disable();
   41688:	f001 fc2c 	bl	42ee4 <radio_switch_complete_and_disable>
   4168c:	e774      	b.n	41578 <common_prepare_cb+0xa0>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   4168e:	4a2c      	ldr	r2, [pc, #176]	; (41740 <common_prepare_cb+0x268>)
   41690:	9207      	str	r2, [sp, #28]
   41692:	4a2c      	ldr	r2, [pc, #176]	; (41744 <common_prepare_cb+0x26c>)
   41694:	9205      	str	r2, [sp, #20]
   41696:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
   4169a:	9300      	str	r3, [sp, #0]
   4169c:	9208      	str	r2, [sp, #32]
   4169e:	4633      	mov	r3, r6
   416a0:	e9cd 7703 	strd	r7, r7, [sp, #12]
   416a4:	e9cd 7701 	strd	r7, r7, [sp, #4]
   416a8:	9406      	str	r4, [sp, #24]
   416aa:	4639      	mov	r1, r7
   416ac:	2203      	movs	r2, #3
   416ae:	f7f3 fedb 	bl	35468 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   416b2:	f030 0302 	bics.w	r3, r0, #2
   416b6:	d086      	beq.n	415c6 <common_prepare_cb+0xee>
   416b8:	4a1d      	ldr	r2, [pc, #116]	; (41730 <common_prepare_cb+0x258>)
   416ba:	4923      	ldr	r1, [pc, #140]	; (41748 <common_prepare_cb+0x270>)
   416bc:	481e      	ldr	r0, [pc, #120]	; (41738 <common_prepare_cb+0x260>)
   416be:	f240 13fb 	movw	r3, #507	; 0x1fb
   416c2:	f008 f99a 	bl	499fa <printk>
   416c6:	4040      	eors	r0, r0
   416c8:	f380 8811 	msr	BASEPRI, r0
   416cc:	f04f 0003 	mov.w	r0, #3
   416d0:	df02      	svc	2
   416d2:	e778      	b.n	415c6 <common_prepare_cb+0xee>
	LL_ASSERT(node_rx);
   416d4:	4a16      	ldr	r2, [pc, #88]	; (41730 <common_prepare_cb+0x258>)
   416d6:	491d      	ldr	r1, [pc, #116]	; (4174c <common_prepare_cb+0x274>)
   416d8:	4817      	ldr	r0, [pc, #92]	; (41738 <common_prepare_cb+0x260>)
   416da:	f240 138d 	movw	r3, #397	; 0x18d
   416de:	f008 f98c 	bl	499fa <printk>
   416e2:	4040      	eors	r0, r0
   416e4:	f380 8811 	msr	BASEPRI, r0
   416e8:	f04f 0003 	mov.w	r0, #3
   416ec:	df02      	svc	2
   416ee:	e71b      	b.n	41528 <common_prepare_cb+0x50>
	if (unlikely(lll->is_stop ||
   416f0:	6863      	ldr	r3, [r4, #4]
   416f2:	f893 3020 	ldrb.w	r3, [r3, #32]
   416f6:	07d9      	lsls	r1, r3, #31
   416f8:	d405      	bmi.n	41706 <common_prepare_cb+0x22e>
   416fa:	6863      	ldr	r3, [r4, #4]
   416fc:	f893 3020 	ldrb.w	r3, [r3, #32]
   41700:	079a      	lsls	r2, r3, #30
   41702:	f57f aef8 	bpl.w	414f6 <common_prepare_cb+0x1e>
		radio_isr_set(lll_isr_early_abort, lll);
   41706:	4812      	ldr	r0, [pc, #72]	; (41750 <common_prepare_cb+0x278>)
   41708:	4621      	mov	r1, r4
   4170a:	f001 f9ed 	bl	42ae8 <radio_isr_set>
		radio_disable();
   4170e:	f001 fae5 	bl	42cdc <radio_disable>
}
   41712:	2000      	movs	r0, #0
   41714:	b00c      	add	sp, #48	; 0x30
   41716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   4171a:	bf00      	nop
   4171c:	8e89bed6 	.word	0x8e89bed6
   41720:	00555555 	.word	0x00555555
   41724:	000286b1 	.word	0x000286b1
   41728:	20000db4 	.word	0x20000db4
   4172c:	000417fd 	.word	0x000417fd
   41730:	000536d4 	.word	0x000536d4
   41734:	00052d4c 	.word	0x00052d4c
   41738:	00052a70 	.word	0x00052a70
   4173c:	00052d74 	.word	0x00052d74
   41740:	00041921 	.word	0x00041921
   41744:	000419c1 	.word	0x000419c1
   41748:	00052e20 	.word	0x00052e20
   4174c:	00053688 	.word	0x00053688
   41750:	0004070d 	.word	0x0004070d

00041754 <prepare_cb>:
	return common_prepare_cb(p, false);
   41754:	2100      	movs	r1, #0
   41756:	f7ff bebf 	b.w	414d8 <common_prepare_cb>
   4175a:	bf00      	nop

0004175c <isr_common_done>:
{
   4175c:	b530      	push	{r4, r5, lr}
   4175e:	4604      	mov	r4, r0
   41760:	b083      	sub	sp, #12
	lll_isr_status_reset();
   41762:	f7fe ff7d 	bl	40660 <lll_isr_status_reset>
	lll->state = 0U;
   41766:	7da3      	ldrb	r3, [r4, #22]
   41768:	f36f 0300 	bfc	r3, #0, #1
   4176c:	75a3      	strb	r3, [r4, #22]
	} else if (lll->type ||
   4176e:	069b      	lsls	r3, r3, #26
   41770:	d401      	bmi.n	41776 <isr_common_done+0x1a>
		   lll->conn) {
   41772:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   41774:	b3b3      	cbz	r3, 417e4 <isr_common_done+0x88>
		radio_tmr_tifs_set(EVENT_IFS_US);
   41776:	2096      	movs	r0, #150	; 0x96
   41778:	f001 fc38 	bl	42fec <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   4177c:	2300      	movs	r3, #0
   4177e:	461a      	mov	r2, r3
   41780:	4619      	mov	r1, r3
   41782:	4618      	mov	r0, r3
   41784:	f001 fb4e 	bl	42e24 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   41788:	2001      	movs	r0, #1
   4178a:	f7f6 fb49 	bl	37e20 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   4178e:	4605      	mov	r5, r0
   41790:	b1d0      	cbz	r0, 417c8 <isr_common_done+0x6c>
	radio_pkt_rx_set(node_rx->pdu);
   41792:	f105 001c 	add.w	r0, r5, #28
   41796:	f001 fa79 	bl	42c8c <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   4179a:	f7fe fb85 	bl	3fea8 <ull_filter_lll_rl_enabled>
   4179e:	b940      	cbnz	r0, 417b2 <isr_common_done+0x56>
	radio_rssi_measure();
   417a0:	f001 fbb0 	bl	42f04 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   417a4:	4811      	ldr	r0, [pc, #68]	; (417ec <isr_common_done+0x90>)
   417a6:	4621      	mov	r1, r4
}
   417a8:	b003      	add	sp, #12
   417aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_isr_set(isr_rx, param);
   417ae:	f001 b99b 	b.w	42ae8 <radio_isr_set>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   417b2:	f10d 0007 	add.w	r0, sp, #7
   417b6:	f7fe f9f1 	bl	3fb9c <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   417ba:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   417bc:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   417be:	f89d 0007 	ldrb.w	r0, [sp, #7]
   417c2:	f001 fdc5 	bl	43350 <radio_ar_configure>
   417c6:	e7eb      	b.n	417a0 <isr_common_done+0x44>
	LL_ASSERT(node_rx);
   417c8:	4a09      	ldr	r2, [pc, #36]	; (417f0 <isr_common_done+0x94>)
   417ca:	490a      	ldr	r1, [pc, #40]	; (417f4 <isr_common_done+0x98>)
   417cc:	480a      	ldr	r0, [pc, #40]	; (417f8 <isr_common_done+0x9c>)
   417ce:	f44f 7352 	mov.w	r3, #840	; 0x348
   417d2:	f008 f912 	bl	499fa <printk>
   417d6:	4040      	eors	r0, r0
   417d8:	f380 8811 	msr	BASEPRI, r0
   417dc:	f04f 0003 	mov.w	r0, #3
   417e0:	df02      	svc	2
   417e2:	e7d6      	b.n	41792 <isr_common_done+0x36>
		radio_switch_complete_and_disable();
   417e4:	f001 fb7e 	bl	42ee4 <radio_switch_complete_and_disable>
   417e8:	e7ce      	b.n	41788 <isr_common_done+0x2c>
   417ea:	bf00      	nop
   417ec:	000286b1 	.word	0x000286b1
   417f0:	000536d4 	.word	0x000536d4
   417f4:	00053688 	.word	0x00053688
   417f8:	00052a70 	.word	0x00052a70

000417fc <isr_abort>:
{
   417fc:	b510      	push	{r4, lr}
   417fe:	4604      	mov	r4, r0
	lll_isr_status_reset();
   41800:	f7fe ff2e 	bl	40660 <lll_isr_status_reset>
	radio_filter_disable();
   41804:	f001 fbc0 	bl	42f88 <radio_filter_disable>
	lll_isr_cleanup(param);
   41808:	4620      	mov	r0, r4
}
   4180a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   4180e:	f7fe bf35 	b.w	4067c <lll_isr_cleanup>
   41812:	bf00      	nop

00041814 <isr_done>:
{
   41814:	b508      	push	{r3, lr}
	isr_common_done(param);
   41816:	f7ff ffa1 	bl	4175c <isr_common_done>
	radio_rx_enable();
   4181a:	f001 fa53 	bl	42cc4 <radio_rx_enable>
}
   4181e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   41822:	f001 bcef 	b.w	43204 <radio_tmr_end_capture>
   41826:	bf00      	nop

00041828 <isr_tx>:
{
   41828:	b570      	push	{r4, r5, r6, lr}
   4182a:	b082      	sub	sp, #8
   4182c:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   4182e:	f7fe ff05 	bl	4063c <lll_isr_tx_status_reset>
	radio_switch_complete_and_disable();
   41832:	f001 fb57 	bl	42ee4 <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
   41836:	2001      	movs	r0, #1
   41838:	f7f6 faf2 	bl	37e20 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   4183c:	4604      	mov	r4, r0
   4183e:	2800      	cmp	r0, #0
   41840:	d03f      	beq.n	418c2 <isr_tx+0x9a>
	radio_pkt_rx_set(node_rx->pdu);
   41842:	f104 001c 	add.w	r0, r4, #28
   41846:	f001 fa21 	bl	42c8c <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   4184a:	f001 fa67 	bl	42d1c <radio_is_ready>
   4184e:	b9e0      	cbnz	r0, 4188a <isr_tx+0x62>
	if (ull_filter_lll_rl_enabled()) {
   41850:	f7fe fb2a 	bl	3fea8 <ull_filter_lll_rl_enabled>
   41854:	bb50      	cbnz	r0, 418ac <isr_tx+0x84>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   41856:	f001 fce3 	bl	43220 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   4185a:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   4185c:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   4185e:	4608      	mov	r0, r1
   41860:	f001 fa2a 	bl	42cb8 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   41864:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   41866:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   41868:	4608      	mov	r0, r1
   4186a:	f001 fa21 	bl	42cb0 <radio_tx_chain_delay_get>
   4186e:	4434      	add	r4, r6
   41870:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   41872:	1a20      	subs	r0, r4, r0
   41874:	f001 fc8c 	bl	43190 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   41878:	f001 fb44 	bl	42f04 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   4187c:	4818      	ldr	r0, [pc, #96]	; (418e0 <isr_tx+0xb8>)
   4187e:	4629      	mov	r1, r5
}
   41880:	b002      	add	sp, #8
   41882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   41886:	f001 b92f 	b.w	42ae8 <radio_isr_set>
	LL_ASSERT(!radio_is_ready());
   4188a:	4a16      	ldr	r2, [pc, #88]	; (418e4 <isr_tx+0xbc>)
   4188c:	4916      	ldr	r1, [pc, #88]	; (418e8 <isr_tx+0xc0>)
   4188e:	4817      	ldr	r0, [pc, #92]	; (418ec <isr_tx+0xc4>)
   41890:	f240 3306 	movw	r3, #774	; 0x306
   41894:	f008 f8b1 	bl	499fa <printk>
   41898:	4040      	eors	r0, r0
   4189a:	f380 8811 	msr	BASEPRI, r0
   4189e:	f04f 0003 	mov.w	r0, #3
   418a2:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   418a4:	f7fe fb00 	bl	3fea8 <ull_filter_lll_rl_enabled>
   418a8:	2800      	cmp	r0, #0
   418aa:	d0d4      	beq.n	41856 <isr_tx+0x2e>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   418ac:	f10d 0007 	add.w	r0, sp, #7
   418b0:	f7fe f974 	bl	3fb9c <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   418b4:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   418b6:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   418b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   418bc:	f001 fd48 	bl	43350 <radio_ar_configure>
   418c0:	e7c9      	b.n	41856 <isr_tx+0x2e>
	LL_ASSERT(node_rx);
   418c2:	4a08      	ldr	r2, [pc, #32]	; (418e4 <isr_tx+0xbc>)
   418c4:	490a      	ldr	r1, [pc, #40]	; (418f0 <isr_tx+0xc8>)
   418c6:	4809      	ldr	r0, [pc, #36]	; (418ec <isr_tx+0xc4>)
   418c8:	f240 3302 	movw	r3, #770	; 0x302
   418cc:	f008 f895 	bl	499fa <printk>
   418d0:	4040      	eors	r0, r0
   418d2:	f380 8811 	msr	BASEPRI, r0
   418d6:	f04f 0003 	mov.w	r0, #3
   418da:	df02      	svc	2
   418dc:	e7b1      	b.n	41842 <isr_tx+0x1a>
   418de:	bf00      	nop
   418e0:	000286b1 	.word	0x000286b1
   418e4:	000536d4 	.word	0x000536d4
   418e8:	00053690 	.word	0x00053690
   418ec:	00052a70 	.word	0x00052a70
   418f0:	00053688 	.word	0x00053688

000418f4 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   418f4:	68c3      	ldr	r3, [r0, #12]
{
   418f6:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   418f8:	681e      	ldr	r6, [r3, #0]
{
   418fa:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   418fc:	f7f3 fee0 	bl	356c0 <ticker_ticks_now_get>
   41900:	4605      	mov	r5, r0
   41902:	4630      	mov	r0, r6
   41904:	f7fe fe36 	bl	40574 <lll_event_offset_get>
	p->remainder = 0;
   41908:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   4190a:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   4190c:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   41910:	8123      	strh	r3, [r4, #8]
	return common_prepare_cb(p, true);
   41912:	4620      	mov	r0, r4
   41914:	2101      	movs	r1, #1
}
   41916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return common_prepare_cb(p, true);
   4191a:	f7ff bddd 	b.w	414d8 <common_prepare_cb>
   4191e:	bf00      	nop

00041920 <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   41920:	b900      	cbnz	r0, 41924 <ticker_op_start_cb+0x4>
   41922:	4770      	bx	lr
{
   41924:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   41926:	4a07      	ldr	r2, [pc, #28]	; (41944 <ticker_op_start_cb+0x24>)
   41928:	4907      	ldr	r1, [pc, #28]	; (41948 <ticker_op_start_cb+0x28>)
   4192a:	4808      	ldr	r0, [pc, #32]	; (4194c <ticker_op_start_cb+0x2c>)
   4192c:	f44f 7324 	mov.w	r3, #656	; 0x290
   41930:	f008 f863 	bl	499fa <printk>
   41934:	4040      	eors	r0, r0
   41936:	f380 8811 	msr	BASEPRI, r0
   4193a:	f04f 0003 	mov.w	r0, #3
   4193e:	df02      	svc	2
}
   41940:	bd08      	pop	{r3, pc}
   41942:	bf00      	nop
   41944:	000536d4 	.word	0x000536d4
   41948:	00052fe0 	.word	0x00052fe0
   4194c:	00052a70 	.word	0x00052a70

00041950 <is_abort_cb>:
	if (next != curr) {
   41950:	4281      	cmp	r1, r0
{
   41952:	b508      	push	{r3, lr}
	if (next != curr) {
   41954:	d00d      	beq.n	41972 <is_abort_cb+0x22>
			if (!lll->ticks_window) {
   41956:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   41958:	b113      	cbz	r3, 41960 <is_abort_cb+0x10>
			return -ECANCELED;
   4195a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   4195e:	bd08      	pop	{r3, pc}
				*resume_cb = resume_prepare_cb;
   41960:	4b12      	ldr	r3, [pc, #72]	; (419ac <is_abort_cb+0x5c>)
   41962:	6013      	str	r3, [r2, #0]
				err = lll_hfclock_on();
   41964:	f7ff f82a 	bl	409bc <lll_hfclock_on>
				LL_ASSERT(err >= 0);
   41968:	2800      	cmp	r0, #0
   4196a:	db10      	blt.n	4198e <is_abort_cb+0x3e>
{
   4196c:	f06f 000a 	mvn.w	r0, #10
}
   41970:	bd08      	pop	{r3, pc}
	} else if (lll->conn && lll->conn->central.initiated) {
   41972:	684b      	ldr	r3, [r1, #4]
   41974:	b123      	cbz	r3, 41980 <is_abort_cb+0x30>
   41976:	684b      	ldr	r3, [r1, #4]
   41978:	f893 3020 	ldrb.w	r3, [r3, #32]
   4197c:	07db      	lsls	r3, r3, #31
   4197e:	d404      	bmi.n	4198a <is_abort_cb+0x3a>
		radio_isr_set(isr_window, lll);
   41980:	480b      	ldr	r0, [pc, #44]	; (419b0 <is_abort_cb+0x60>)
   41982:	f001 f8b1 	bl	42ae8 <radio_isr_set>
	radio_disable();
   41986:	f001 f9a9 	bl	42cdc <radio_disable>
		return 0;
   4198a:	2000      	movs	r0, #0
}
   4198c:	bd08      	pop	{r3, pc}
				LL_ASSERT(err >= 0);
   4198e:	4a09      	ldr	r2, [pc, #36]	; (419b4 <is_abort_cb+0x64>)
   41990:	4909      	ldr	r1, [pc, #36]	; (419b8 <is_abort_cb+0x68>)
   41992:	480a      	ldr	r0, [pc, #40]	; (419bc <is_abort_cb+0x6c>)
   41994:	f240 2332 	movw	r3, #562	; 0x232
   41998:	f008 f82f 	bl	499fa <printk>
   4199c:	4040      	eors	r0, r0
   4199e:	f380 8811 	msr	BASEPRI, r0
   419a2:	f04f 0003 	mov.w	r0, #3
   419a6:	df02      	svc	2
   419a8:	e7e0      	b.n	4196c <is_abort_cb+0x1c>
   419aa:	bf00      	nop
   419ac:	000418f5 	.word	0x000418f5
   419b0:	00028611 	.word	0x00028611
   419b4:	000536d4 	.word	0x000536d4
   419b8:	000535ec 	.word	0x000535ec
   419bc:	00052a70 	.word	0x00052a70

000419c0 <ticker_stop_cb>:
{
   419c0:	b508      	push	{r3, lr}
	mfy.param = param;
   419c2:	4b0c      	ldr	r3, [pc, #48]	; (419f4 <ticker_stop_cb+0x34>)
{
   419c4:	9803      	ldr	r0, [sp, #12]
	mfy.param = param;
   419c6:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   419c8:	2200      	movs	r2, #0
   419ca:	4611      	mov	r1, r2
   419cc:	2001      	movs	r0, #1
   419ce:	f7f2 fb05 	bl	33fdc <mayfly_enqueue>
	LL_ASSERT(!ret);
   419d2:	b900      	cbnz	r0, 419d6 <ticker_stop_cb+0x16>
}
   419d4:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   419d6:	4a08      	ldr	r2, [pc, #32]	; (419f8 <ticker_stop_cb+0x38>)
   419d8:	4908      	ldr	r1, [pc, #32]	; (419fc <ticker_stop_cb+0x3c>)
   419da:	4809      	ldr	r0, [pc, #36]	; (41a00 <ticker_stop_cb+0x40>)
   419dc:	f240 2389 	movw	r3, #649	; 0x289
   419e0:	f008 f80b 	bl	499fa <printk>
   419e4:	4040      	eors	r0, r0
   419e6:	f380 8811 	msr	BASEPRI, r0
   419ea:	f04f 0003 	mov.w	r0, #3
   419ee:	df02      	svc	2
}
   419f0:	bd08      	pop	{r3, pc}
   419f2:	bf00      	nop
   419f4:	20000da4 	.word	0x20000da4
   419f8:	000536d4 	.word	0x000536d4
   419fc:	00052d4c 	.word	0x00052d4c
   41a00:	00052a70 	.word	0x00052a70

00041a04 <isr_done_cleanup>:
{
   41a04:	b530      	push	{r4, r5, lr}
   41a06:	4604      	mov	r4, r0
   41a08:	b085      	sub	sp, #20
	lll_isr_status_reset();
   41a0a:	f7fe fe29 	bl	40660 <lll_isr_status_reset>
	if (lll_is_done(param, &is_resume)) {
   41a0e:	f10d 010f 	add.w	r1, sp, #15
   41a12:	4620      	mov	r0, r4
   41a14:	f7fe fd9c 	bl	40550 <lll_is_done>
   41a18:	b9c0      	cbnz	r0, 41a4c <isr_done_cleanup+0x48>
	radio_filter_disable();
   41a1a:	4605      	mov	r5, r0
   41a1c:	f001 fab4 	bl	42f88 <radio_filter_disable>
	if (++lll->chan == ADV_CHAN_MAX) {
   41a20:	7da2      	ldrb	r2, [r4, #22]
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   41a22:	9500      	str	r5, [sp, #0]
	if (++lll->chan == ADV_CHAN_MAX) {
   41a24:	f3c2 0341 	ubfx	r3, r2, #1, #2
   41a28:	3301      	adds	r3, #1
   41a2a:	f003 0303 	and.w	r3, r3, #3
		lll->chan = 0U;
   41a2e:	2b03      	cmp	r3, #3
   41a30:	bf08      	it	eq
   41a32:	2300      	moveq	r3, #0
   41a34:	f363 0242 	bfi	r2, r3, #1, #2
   41a38:	75a2      	strb	r2, [r4, #22]
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   41a3a:	462b      	mov	r3, r5
   41a3c:	2203      	movs	r2, #3
   41a3e:	4629      	mov	r1, r5
   41a40:	4628      	mov	r0, r5
   41a42:	f7f3 fd9d 	bl	35580 <ticker_stop>
	lll_isr_cleanup(param);
   41a46:	4620      	mov	r0, r4
   41a48:	f7fe fe18 	bl	4067c <lll_isr_cleanup>
}
   41a4c:	b005      	add	sp, #20
   41a4e:	bd30      	pop	{r4, r5, pc}

00041a50 <isr_scan_tgta_check>:
{
   41a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   41a54:	f89d 9020 	ldrb.w	r9, [sp, #32]
   41a58:	4616      	mov	r6, r2
   41a5a:	4680      	mov	r8, r0
   41a5c:	460d      	mov	r5, r1
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   41a5e:	464a      	mov	r2, r9
   41a60:	4619      	mov	r1, r3
   41a62:	4630      	mov	r0, r6
{
   41a64:	461f      	mov	r7, r3
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   41a66:	f7fe f9fd 	bl	3fe64 <ull_filter_lll_rl_addr_resolve>
   41a6a:	4604      	mov	r4, r0
   41a6c:	b9a0      	cbnz	r0, 41a98 <isr_scan_tgta_check+0x48>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   41a6e:	b11d      	cbz	r5, 41a78 <isr_scan_tgta_check+0x28>
   41a70:	f898 3017 	ldrb.w	r3, [r8, #23]
   41a74:	079b      	lsls	r3, r3, #30
   41a76:	d41c      	bmi.n	41ab2 <isr_scan_tgta_check+0x62>
	return (((lll->init_addr_type == addr_type) &&
   41a78:	f898 5016 	ldrb.w	r5, [r8, #22]
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   41a7c:	f3c5 1380 	ubfx	r3, r5, #6, #1
   41a80:	42b3      	cmp	r3, r6
   41a82:	d00c      	beq.n	41a9e <isr_scan_tgta_check+0x4e>
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
   41a84:	f3c5 05c1 	ubfx	r5, r5, #3, #2
   41a88:	2d01      	cmp	r5, #1
   41a8a:	d905      	bls.n	41a98 <isr_scan_tgta_check+0x48>
   41a8c:	b126      	cbz	r6, 41a98 <isr_scan_tgta_check+0x48>
   41a8e:	797b      	ldrb	r3, [r7, #5]
   41a90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   41a94:	2b40      	cmp	r3, #64	; 0x40
   41a96:	d012      	beq.n	41abe <isr_scan_tgta_check+0x6e>
}
   41a98:	4620      	mov	r0, r4
   41a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   41a9e:	2206      	movs	r2, #6
   41aa0:	4639      	mov	r1, r7
   41aa2:	f108 0019 	add.w	r0, r8, #25
   41aa6:	f00a f8c7 	bl	4bc38 <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   41aaa:	b168      	cbz	r0, 41ac8 <isr_scan_tgta_check+0x78>
   41aac:	f898 5016 	ldrb.w	r5, [r8, #22]
   41ab0:	e7e8      	b.n	41a84 <isr_scan_tgta_check+0x34>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   41ab2:	4648      	mov	r0, r9
   41ab4:	f7fe f858 	bl	3fb68 <ull_filter_lll_lrpa_get>
   41ab8:	2800      	cmp	r0, #0
   41aba:	d1ed      	bne.n	41a98 <isr_scan_tgta_check+0x48>
   41abc:	e7dc      	b.n	41a78 <isr_scan_tgta_check+0x28>
		if (dir_report) {
   41abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   41ac0:	b113      	cbz	r3, 41ac8 <isr_scan_tgta_check+0x78>
			*dir_report = true;
   41ac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   41ac4:	2301      	movs	r3, #1
   41ac6:	7013      	strb	r3, [r2, #0]
{
   41ac8:	2401      	movs	r4, #1
   41aca:	e7e5      	b.n	41a98 <isr_scan_tgta_check+0x48>

00041acc <abort_cb>:
{
   41acc:	b510      	push	{r4, lr}
	if (!prepare_param) {
   41ace:	b1d8      	cbz	r0, 41b08 <abort_cb+0x3c>
	err = lll_hfclock_off();
   41ad0:	460c      	mov	r4, r1
   41ad2:	f7fe ff8b 	bl	409ec <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   41ad6:	2800      	cmp	r0, #0
   41ad8:	db04      	blt.n	41ae4 <abort_cb+0x18>
	lll_done(param);
   41ada:	4620      	mov	r0, r4
}
   41adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   41ae0:	f7fe bce4 	b.w	404ac <lll_done>
	LL_ASSERT(err >= 0);
   41ae4:	4a0c      	ldr	r2, [pc, #48]	; (41b18 <abort_cb+0x4c>)
   41ae6:	490d      	ldr	r1, [pc, #52]	; (41b1c <abort_cb+0x50>)
   41ae8:	480d      	ldr	r0, [pc, #52]	; (41b20 <abort_cb+0x54>)
   41aea:	f240 2379 	movw	r3, #633	; 0x279
   41aee:	f007 ff84 	bl	499fa <printk>
   41af2:	4040      	eors	r0, r0
   41af4:	f380 8811 	msr	BASEPRI, r0
   41af8:	f04f 0003 	mov.w	r0, #3
   41afc:	df02      	svc	2
	lll_done(param);
   41afe:	4620      	mov	r0, r4
}
   41b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   41b04:	f7fe bcd2 	b.w	404ac <lll_done>
			radio_isr_set(isr_done_cleanup, param);
   41b08:	4806      	ldr	r0, [pc, #24]	; (41b24 <abort_cb+0x58>)
   41b0a:	f000 ffed 	bl	42ae8 <radio_isr_set>
}
   41b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   41b12:	f001 b8e3 	b.w	42cdc <radio_disable>
   41b16:	bf00      	nop
   41b18:	000536d4 	.word	0x000536d4
   41b1c:	000535ec 	.word	0x000535ec
   41b20:	00052a70 	.word	0x00052a70
   41b24:	00041a05 	.word	0x00041a05

00041b28 <lll_scan_init>:
}
   41b28:	2000      	movs	r0, #0
   41b2a:	4770      	bx	lr

00041b2c <lll_scan_reset>:
int lll_scan_reset(void)
   41b2c:	2000      	movs	r0, #0
   41b2e:	4770      	bx	lr

00041b30 <lll_scan_prepare>:
{
   41b30:	b510      	push	{r4, lr}
   41b32:	b082      	sub	sp, #8
   41b34:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   41b36:	f7fe ff41 	bl	409bc <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   41b3a:	2800      	cmp	r0, #0
   41b3c:	db19      	blt.n	41b72 <lll_scan_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   41b3e:	4a13      	ldr	r2, [pc, #76]	; (41b8c <lll_scan_prepare+0x5c>)
   41b40:	4913      	ldr	r1, [pc, #76]	; (41b90 <lll_scan_prepare+0x60>)
   41b42:	4814      	ldr	r0, [pc, #80]	; (41b94 <lll_scan_prepare+0x64>)
   41b44:	9400      	str	r4, [sp, #0]
   41b46:	2300      	movs	r3, #0
   41b48:	f7f6 fca8 	bl	3849c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   41b4c:	b108      	cbz	r0, 41b52 <lll_scan_prepare+0x22>
   41b4e:	3077      	adds	r0, #119	; 0x77
   41b50:	d101      	bne.n	41b56 <lll_scan_prepare+0x26>
}
   41b52:	b002      	add	sp, #8
   41b54:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   41b56:	4a10      	ldr	r2, [pc, #64]	; (41b98 <lll_scan_prepare+0x68>)
   41b58:	4910      	ldr	r1, [pc, #64]	; (41b9c <lll_scan_prepare+0x6c>)
   41b5a:	4811      	ldr	r0, [pc, #68]	; (41ba0 <lll_scan_prepare+0x70>)
   41b5c:	238b      	movs	r3, #139	; 0x8b
   41b5e:	f007 ff4c 	bl	499fa <printk>
   41b62:	4040      	eors	r0, r0
   41b64:	f380 8811 	msr	BASEPRI, r0
   41b68:	f04f 0003 	mov.w	r0, #3
   41b6c:	df02      	svc	2
}
   41b6e:	b002      	add	sp, #8
   41b70:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   41b72:	4a09      	ldr	r2, [pc, #36]	; (41b98 <lll_scan_prepare+0x68>)
   41b74:	490b      	ldr	r1, [pc, #44]	; (41ba4 <lll_scan_prepare+0x74>)
   41b76:	480a      	ldr	r0, [pc, #40]	; (41ba0 <lll_scan_prepare+0x70>)
   41b78:	2388      	movs	r3, #136	; 0x88
   41b7a:	f007 ff3e 	bl	499fa <printk>
   41b7e:	4040      	eors	r0, r0
   41b80:	f380 8811 	msr	BASEPRI, r0
   41b84:	f04f 0003 	mov.w	r0, #3
   41b88:	df02      	svc	2
   41b8a:	e7d8      	b.n	41b3e <lll_scan_prepare+0xe>
   41b8c:	00041755 	.word	0x00041755
   41b90:	00041acd 	.word	0x00041acd
   41b94:	00041951 	.word	0x00041951
   41b98:	000536d4 	.word	0x000536d4
   41b9c:	000536c0 	.word	0x000536c0
   41ba0:	00052a70 	.word	0x00052a70
   41ba4:	000535ec 	.word	0x000535ec

00041ba8 <lll_scan_isr_rx_check>:
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   41ba8:	f890 c016 	ldrb.w	ip, [r0, #22]
							       rl_idx))) ||
   41bac:	f01c 0f08 	tst.w	ip, #8
   41bb0:	d102      	bne.n	41bb8 <lll_scan_isr_rx_check+0x10>
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   41bb2:	b932      	cbnz	r2, 41bc2 <lll_scan_isr_rx_check+0x1a>
{
   41bb4:	2001      	movs	r0, #1
}
   41bb6:	4770      	bx	lr
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   41bb8:	2a00      	cmp	r2, #0
   41bba:	d1fb      	bne.n	41bb4 <lll_scan_isr_rx_check+0xc>
		(devmatch_ok || ull_filter_lll_irk_in_fal(rl_idx)));
   41bbc:	4618      	mov	r0, r3
   41bbe:	f7fe b8b3 	b.w	3fd28 <ull_filter_lll_irk_in_fal>
{
   41bc2:	b510      	push	{r4, lr}
   41bc4:	4604      	mov	r4, r0
   41bc6:	4608      	mov	r0, r1
		(!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
   41bc8:	4619      	mov	r1, r3
   41bca:	f7fe f8dd 	bl	3fd88 <ull_filter_lll_rl_idx_allowed>
   41bce:	b918      	cbnz	r0, 41bd8 <lll_scan_isr_rx_check+0x30>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   41bd0:	7da0      	ldrb	r0, [r4, #22]
							       rl_idx))) ||
   41bd2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
}
   41bd6:	bd10      	pop	{r4, pc}
{
   41bd8:	2001      	movs	r0, #1
}
   41bda:	bd10      	pop	{r4, pc}

00041bdc <lll_scan_prepare_connect_req>:
{
   41bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41be0:	f89d 501c 	ldrb.w	r5, [sp, #28]
	lll_conn = lll->conn;
   41be4:	6846      	ldr	r6, [r0, #4]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   41be6:	01ad      	lsls	r5, r5, #6
   41be8:	f005 0540 	and.w	r5, r5, #64	; 0x40
   41bec:	f045 0525 	orr.w	r5, r5, #37	; 0x25
   41bf0:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
   41bf4:	780b      	ldrb	r3, [r1, #0]
   41bf6:	f003 0310 	and.w	r3, r3, #16
{
   41bfa:	460c      	mov	r4, r1
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   41bfc:	431d      	orrs	r5, r3
	pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
   41bfe:	2322      	movs	r3, #34	; 0x22
   41c00:	704b      	strb	r3, [r1, #1]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   41c02:	700d      	strb	r5, [r1, #0]
{
   41c04:	4690      	mov	r8, r2
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   41c06:	9908      	ldr	r1, [sp, #32]
   41c08:	2206      	movs	r2, #6
{
   41c0a:	4607      	mov	r7, r0
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   41c0c:	1ca0      	adds	r0, r4, #2
   41c0e:	f00a f823 	bl	4bc58 <memcpy>
	memcpy(&pdu_tx->connect_ind.adv_addr[0], adv_addr, BDADDR_SIZE);
   41c12:	9906      	ldr	r1, [sp, #24]
   41c14:	2206      	movs	r2, #6
   41c16:	f104 0008 	add.w	r0, r4, #8
   41c1a:	f00a f81d 	bl	4bc58 <memcpy>
	memcpy(&pdu_tx->connect_ind.access_addr[0],
   41c1e:	2204      	movs	r2, #4
   41c20:	18b1      	adds	r1, r6, r2
   41c22:	f104 000e 	add.w	r0, r4, #14
   41c26:	f00a f817 	bl	4bc58 <memcpy>
	memcpy(&pdu_tx->connect_ind.crc_init[0], &lll_conn->crc_init[0], 3);
   41c2a:	2203      	movs	r2, #3
   41c2c:	f106 0108 	add.w	r1, r6, #8
   41c30:	f104 0012 	add.w	r0, r4, #18
   41c34:	f00a f810 	bl	4bc58 <memcpy>
	pdu_tx->connect_ind.win_size = 1;
   41c38:	2301      	movs	r3, #1
   41c3a:	7563      	strb	r3, [r4, #21]
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   41c3c:	89f5      	ldrh	r5, [r6, #14]
	conn_offset_us = radio_tmr_end_get() + EVENT_IFS_US +
   41c3e:	f001 fae9 	bl	43214 <radio_tmr_end_get>
			 PDU_AC_MAX_US(sizeof(struct pdu_adv_connect_ind),
   41c42:	f1b8 0f00 	cmp.w	r8, #0
   41c46:	d043      	beq.n	41cd0 <lll_scan_prepare_connect_req+0xf4>
   41c48:	f008 0303 	and.w	r3, r8, #3
   41c4c:	332b      	adds	r3, #43	; 0x2b
   41c4e:	00db      	lsls	r3, r3, #3
   41c50:	f3c8 0840 	ubfx	r8, r8, #1, #1
   41c54:	fa23 f308 	lsr.w	r3, r3, r8
		conn_offset_us += WIN_DELAY_LEGACY;
   41c58:	f500 62af 	add.w	r2, r0, #1400	; 0x578
   41c5c:	441a      	add	r2, r3
	    lll->conn_win_offset_us == 0U) {
   41c5e:	693b      	ldr	r3, [r7, #16]
	if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
   41c60:	b38b      	cbz	r3, 41cc6 <lll_scan_prepare_connect_req+0xea>
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   41c62:	f240 41e2 	movw	r1, #1250	; 0x4e2
   41c66:	fb01 f505 	mul.w	r5, r1, r5
		while ((win_offset_us & ((uint32_t)1 << 31)) ||
   41c6a:	2b00      	cmp	r3, #0
   41c6c:	db01      	blt.n	41c72 <lll_scan_prepare_connect_req+0x96>
   41c6e:	4293      	cmp	r3, r2
   41c70:	d201      	bcs.n	41c76 <lll_scan_prepare_connect_req+0x9a>
			win_offset_us += conn_interval_us;
   41c72:	442b      	add	r3, r5
   41c74:	e7f9      	b.n	41c6a <lll_scan_prepare_connect_req+0x8e>
		*conn_space_us = win_offset_us;
   41c76:	9909      	ldr	r1, [sp, #36]	; 0x24
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   41c78:	1a9a      	subs	r2, r3, r2
		*conn_space_us = win_offset_us;
   41c7a:	600b      	str	r3, [r1, #0]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   41c7c:	4b16      	ldr	r3, [pc, #88]	; (41cd8 <lll_scan_prepare_connect_req+0xfc>)
   41c7e:	fba3 3202 	umull	r3, r2, r3, r2
		pdu_tx->connect_ind.win_size++;
   41c82:	7d63      	ldrb	r3, [r4, #21]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   41c84:	0a92      	lsrs	r2, r2, #10
		pdu_tx->connect_ind.win_size++;
   41c86:	3301      	adds	r3, #1
		pdu_tx->connect_ind.win_offset =
   41c88:	82e2      	strh	r2, [r4, #22]
		pdu_tx->connect_ind.win_size++;
   41c8a:	7563      	strb	r3, [r4, #21]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   41c8c:	f8d6 100e 	ldr.w	r1, [r6, #14]
	pdu_tx->connect_ind.timeout = sys_cpu_to_le16(lll->conn_timeout);
   41c90:	8abb      	ldrh	r3, [r7, #20]
   41c92:	83a3      	strh	r3, [r4, #28]
	memcpy(&pdu_tx->connect_ind.chan_map[0], &lll_conn->data_chan_map[0],
   41c94:	2205      	movs	r2, #5
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   41c96:	61a1      	str	r1, [r4, #24]
	memcpy(&pdu_tx->connect_ind.chan_map[0], &lll_conn->data_chan_map[0],
   41c98:	f104 001e 	add.w	r0, r4, #30
   41c9c:	f106 0118 	add.w	r1, r6, #24
   41ca0:	f009 ffda 	bl	4bc58 <memcpy>
	pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
   41ca4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   41ca8:	7fb2      	ldrb	r2, [r6, #30]
   41caa:	f362 0304 	bfi	r3, r2, #0, #5
   41cae:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdu_tx->connect_ind.sca = lll_clock_sca_local_get();
   41cb2:	f7fe feb7 	bl	40a24 <lll_clock_sca_local_get>
   41cb6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   41cba:	f360 1347 	bfi	r3, r0, #5, #3
   41cbe:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
   41cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*conn_space_us = conn_offset_us;
   41cc6:	9909      	ldr	r1, [sp, #36]	; 0x24
   41cc8:	600a      	str	r2, [r1, #0]
		pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
   41cca:	75a3      	strb	r3, [r4, #22]
   41ccc:	75e3      	strb	r3, [r4, #23]
   41cce:	e7dd      	b.n	41c8c <lll_scan_prepare_connect_req+0xb0>
   41cd0:	f44f 73b0 	mov.w	r3, #352	; 0x160
   41cd4:	e7c0      	b.n	41c58 <lll_scan_prepare_connect_req+0x7c>
   41cd6:	bf00      	nop
   41cd8:	d1b71759 	.word	0xd1b71759

00041cdc <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   41cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41cde:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   41ce0:	f7fe fcbe 	bl	40660 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   41ce4:	f7f6 f99e 	bl	38024 <ull_event_done_extra_get>
	LL_ASSERT(e);
   41ce8:	4604      	mov	r4, r0
   41cea:	2800      	cmp	r0, #0
   41cec:	d036      	beq.n	41d5c <isr_done+0x80>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   41cee:	4922      	ldr	r1, [pc, #136]	; (41d78 <isr_done+0x9c>)
   41cf0:	79a2      	ldrb	r2, [r4, #6]
   41cf2:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   41cf4:	4b21      	ldr	r3, [pc, #132]	; (41d7c <isr_done+0xa0>)
	e->crc_valid = crc_valid;
   41cf6:	f360 0200 	bfi	r2, r0, #0, #1
   41cfa:	71a2      	strb	r2, [r4, #6]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   41cfc:	4a20      	ldr	r2, [pc, #128]	; (41d80 <isr_done+0xa4>)
	e->trx_cnt = trx_cnt;
   41cfe:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   41d00:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   41d02:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   41d04:	2101      	movs	r1, #1
   41d06:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   41d08:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   41d0a:	b11b      	cbz	r3, 41d14 <isr_done+0x38>
		struct lll_conn *lll = param;

		if (lll->role) {
   41d0c:	f995 301d 	ldrsb.w	r3, [r5, #29]
   41d10:	2b00      	cmp	r3, #0
   41d12:	db04      	blt.n	41d1e <isr_done+0x42>
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   41d14:	4628      	mov	r0, r5
}
   41d16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   41d1a:	f7fe bcaf 	b.w	4067c <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   41d1e:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   41d22:	f003 0307 	and.w	r3, r3, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   41d26:	2b02      	cmp	r3, #2
   41d28:	d016      	beq.n	41d58 <isr_done+0x7c>
	default:
	case BIT(0):
		return 40;
   41d2a:	2b04      	cmp	r3, #4
   41d2c:	bf0c      	ite	eq
   41d2e:	f44f 77bc 	moveq.w	r7, #376	; 0x178
   41d32:	2728      	movne	r7, #40	; 0x28
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   41d34:	f001 fa5a 	bl	431ec <radio_tmr_aa_restore>
   41d38:	4606      	mov	r6, r0
   41d3a:	f001 fa5d 	bl	431f8 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   41d3e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   41d40:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   41d42:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   41d44:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->periph.window_widening_event_us = 0;
   41d48:	2300      	movs	r3, #0
   41d4a:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   41d4c:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   41d4e:	4628      	mov	r0, r5
}
   41d50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   41d54:	f7fe bc92 	b.w	4067c <lll_isr_cleanup>
	switch (phy) {
   41d58:	2718      	movs	r7, #24
   41d5a:	e7eb      	b.n	41d34 <isr_done+0x58>
	LL_ASSERT(e);
   41d5c:	4a09      	ldr	r2, [pc, #36]	; (41d84 <isr_done+0xa8>)
   41d5e:	490a      	ldr	r1, [pc, #40]	; (41d88 <isr_done+0xac>)
   41d60:	480a      	ldr	r0, [pc, #40]	; (41d8c <isr_done+0xb0>)
   41d62:	f240 3317 	movw	r3, #791	; 0x317
   41d66:	f007 fe48 	bl	499fa <printk>
   41d6a:	4040      	eors	r0, r0
   41d6c:	f380 8811 	msr	BASEPRI, r0
   41d70:	f04f 0003 	mov.w	r0, #3
   41d74:	df02      	svc	2
   41d76:	e7ba      	b.n	41cee <isr_done+0x12>
   41d78:	2000741c 	.word	0x2000741c
   41d7c:	200072b4 	.word	0x200072b4
   41d80:	2000741b 	.word	0x2000741b
   41d84:	00053720 	.word	0x00053720
   41d88:	00052e4c 	.word	0x00052e4c
   41d8c:	00052a70 	.word	0x00052a70

00041d90 <lll_conn_init>:
{
   41d90:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   41d92:	f000 fff7 	bl	42d84 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   41d96:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   41d98:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   41d9a:	2101      	movs	r1, #1
   41d9c:	f361 0201 	bfi	r2, r1, #0, #2
}
   41da0:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   41da2:	701a      	strb	r2, [r3, #0]
}
   41da4:	bd08      	pop	{r3, pc}
   41da6:	bf00      	nop

00041da8 <lll_conn_reset>:
}
   41da8:	2000      	movs	r0, #0
   41daa:	4770      	bx	lr

00041dac <lll_conn_flush>:
}
   41dac:	4770      	bx	lr
   41dae:	bf00      	nop

00041db0 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   41db0:	4805      	ldr	r0, [pc, #20]	; (41dc8 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   41db2:	4906      	ldr	r1, [pc, #24]	; (41dcc <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   41db4:	4a06      	ldr	r2, [pc, #24]	; (41dd0 <lll_conn_prepare_reset+0x20>)
{
   41db6:	b410      	push	{r4}
	trx_cnt = 0U;
   41db8:	2300      	movs	r3, #0
   41dba:	4c06      	ldr	r4, [pc, #24]	; (41dd4 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   41dbc:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   41dbe:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   41dc0:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   41dc2:	8023      	strh	r3, [r4, #0]
}
   41dc4:	bc10      	pop	{r4}
   41dc6:	4770      	bx	lr
   41dc8:	2000741c 	.word	0x2000741c
   41dcc:	2000741d 	.word	0x2000741d
   41dd0:	2000741b 	.word	0x2000741b
   41dd4:	200072b4 	.word	0x200072b4

00041dd8 <lll_conn_abort_cb>:
{
   41dd8:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   41dda:	b1e8      	cbz	r0, 41e18 <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   41ddc:	460d      	mov	r5, r1
   41dde:	4604      	mov	r4, r0
   41de0:	f7fe fe04 	bl	409ec <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   41de4:	2800      	cmp	r0, #0
   41de6:	db0a      	blt.n	41dfe <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   41de8:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   41dea:	8923      	ldrh	r3, [r4, #8]
   41dec:	8a51      	ldrh	r1, [r2, #18]
   41dee:	3301      	adds	r3, #1
   41df0:	440b      	add	r3, r1
   41df2:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   41df4:	4628      	mov	r0, r5
}
   41df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   41dfa:	f7fe bb57 	b.w	404ac <lll_done>
	LL_ASSERT(err >= 0);
   41dfe:	4a0a      	ldr	r2, [pc, #40]	; (41e28 <lll_conn_abort_cb+0x50>)
   41e00:	490a      	ldr	r1, [pc, #40]	; (41e2c <lll_conn_abort_cb+0x54>)
   41e02:	480b      	ldr	r0, [pc, #44]	; (41e30 <lll_conn_abort_cb+0x58>)
   41e04:	23aa      	movs	r3, #170	; 0xaa
   41e06:	f007 fdf8 	bl	499fa <printk>
   41e0a:	4040      	eors	r0, r0
   41e0c:	f380 8811 	msr	BASEPRI, r0
   41e10:	f04f 0003 	mov.w	r0, #3
   41e14:	df02      	svc	2
   41e16:	e7e7      	b.n	41de8 <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   41e18:	4806      	ldr	r0, [pc, #24]	; (41e34 <lll_conn_abort_cb+0x5c>)
   41e1a:	f000 fe65 	bl	42ae8 <radio_isr_set>
}
   41e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   41e22:	f000 bf5b 	b.w	42cdc <radio_disable>
   41e26:	bf00      	nop
   41e28:	00053720 	.word	0x00053720
   41e2c:	000535ec 	.word	0x000535ec
   41e30:	00052a70 	.word	0x00052a70
   41e34:	00041cdd 	.word	0x00041cdd

00041e38 <lll_conn_rx_pkt_set>:
{
   41e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41e3a:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   41e3c:	2001      	movs	r0, #1
   41e3e:	f7f5 ffef 	bl	37e20 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   41e42:	4604      	mov	r4, r0
   41e44:	b348      	cbz	r0, 41e9a <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   41e46:	f895 6045 	ldrb.w	r6, [r5, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   41e4a:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
	phy = lll->phy_rx;
   41e4c:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   41e50:	2100      	movs	r1, #0
   41e52:	4630      	mov	r0, r6
   41e54:	f000 feae 	bl	42bb4 <radio_phy_set>
	} else if (lll->enc_rx) {
   41e58:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   41e5c:	0072      	lsls	r2, r6, #1
	} else if (lll->enc_rx) {
   41e5e:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   41e60:	b2f9      	uxtb	r1, r7
   41e62:	f042 0201 	orr.w	r2, r2, #1
						      node_rx->pdu));
   41e66:	f104 041c 	add.w	r4, r4, #28
	} else if (lll->enc_rx) {
   41e6a:	d50e      	bpl.n	41e8a <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   41e6c:	3104      	adds	r1, #4
   41e6e:	b2c9      	uxtb	r1, r1
   41e70:	2008      	movs	r0, #8
   41e72:	f000 fee5 	bl	42c40 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   41e76:	4622      	mov	r2, r4
   41e78:	4631      	mov	r1, r6
   41e7a:	f105 005f 	add.w	r0, r5, #95	; 0x5f
   41e7e:	f001 f9d5 	bl	4322c <radio_ccm_rx_pkt_set>
}
   41e82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   41e86:	f000 bf01 	b.w	42c8c <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   41e8a:	2008      	movs	r0, #8
   41e8c:	f000 fed8 	bl	42c40 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   41e90:	4620      	mov	r0, r4
}
   41e92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   41e96:	f000 bef9 	b.w	42c8c <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   41e9a:	4a07      	ldr	r2, [pc, #28]	; (41eb8 <lll_conn_rx_pkt_set+0x80>)
   41e9c:	4907      	ldr	r1, [pc, #28]	; (41ebc <lll_conn_rx_pkt_set+0x84>)
   41e9e:	4808      	ldr	r0, [pc, #32]	; (41ec0 <lll_conn_rx_pkt_set+0x88>)
   41ea0:	f240 235a 	movw	r3, #602	; 0x25a
   41ea4:	f007 fda9 	bl	499fa <printk>
   41ea8:	4040      	eors	r0, r0
   41eaa:	f380 8811 	msr	BASEPRI, r0
   41eae:	f04f 0003 	mov.w	r0, #3
   41eb2:	df02      	svc	2
   41eb4:	e7c7      	b.n	41e46 <lll_conn_rx_pkt_set+0xe>
   41eb6:	bf00      	nop
   41eb8:	00053720 	.word	0x00053720
   41ebc:	00053688 	.word	0x00053688
   41ec0:	00052a70 	.word	0x00052a70

00041ec4 <lll_conn_isr_tx>:
{
   41ec4:	b538      	push	{r3, r4, r5, lr}
   41ec6:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   41ec8:	f7fe fbb8 	bl	4063c <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   41ecc:	2096      	movs	r0, #150	; 0x96
   41ece:	f001 f88d 	bl	42fec <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   41ed2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   41ed6:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   41eda:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   41ede:	f000 0007 	and.w	r0, r0, #7
   41ee2:	f002 0207 	and.w	r2, r2, #7
   41ee6:	2100      	movs	r1, #0
   41ee8:	f000 ff9c 	bl	42e24 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   41eec:	4620      	mov	r0, r4
   41eee:	f7ff ffa3 	bl	41e38 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   41ef2:	f000 ff13 	bl	42d1c <radio_is_ready>
   41ef6:	bb58      	cbnz	r0, 41f50 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   41ef8:	f001 f992 	bl	43220 <radio_tmr_tifs_base_get>
   41efc:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   41efe:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   41f02:	2101      	movs	r1, #1
   41f04:	f000 0007 	and.w	r0, r0, #7
   41f08:	f000 fed6 	bl	42cb8 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   41f0c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   41f10:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   41f14:	4405      	add	r5, r0
   41f16:	2b02      	cmp	r3, #2
   41f18:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   41f1c:	d016      	beq.n	41f4c <lll_conn_isr_tx+0x88>
		return 40;
   41f1e:	2b04      	cmp	r3, #4
   41f20:	bf0c      	ite	eq
   41f22:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   41f26:	2328      	movne	r3, #40	; 0x28
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   41f28:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   41f2c:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   41f30:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   41f34:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   41f36:	f000 febb 	bl	42cb0 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   41f3a:	1a28      	subs	r0, r5, r0
   41f3c:	f001 f928 	bl	43190 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   41f40:	4621      	mov	r1, r4
   41f42:	480a      	ldr	r0, [pc, #40]	; (41f6c <lll_conn_isr_tx+0xa8>)
}
   41f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   41f48:	f000 bdce 	b.w	42ae8 <radio_isr_set>
	switch (phy) {
   41f4c:	2318      	movs	r3, #24
   41f4e:	e7eb      	b.n	41f28 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   41f50:	4a07      	ldr	r2, [pc, #28]	; (41f70 <lll_conn_isr_tx+0xac>)
   41f52:	4908      	ldr	r1, [pc, #32]	; (41f74 <lll_conn_isr_tx+0xb0>)
   41f54:	4808      	ldr	r0, [pc, #32]	; (41f78 <lll_conn_isr_tx+0xb4>)
   41f56:	f240 2313 	movw	r3, #531	; 0x213
   41f5a:	f007 fd4e 	bl	499fa <printk>
   41f5e:	4040      	eors	r0, r0
   41f60:	f380 8811 	msr	BASEPRI, r0
   41f64:	f04f 0003 	mov.w	r0, #3
   41f68:	df02      	svc	2
   41f6a:	e7c5      	b.n	41ef8 <lll_conn_isr_tx+0x34>
   41f6c:	000420a1 	.word	0x000420a1
   41f70:	00053720 	.word	0x00053720
   41f74:	00053690 	.word	0x00053690
   41f78:	00052a70 	.word	0x00052a70

00041f7c <lll_conn_tx_pkt_set>:
{
   41f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41f7e:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   41f80:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   41f84:	8f86      	ldrh	r6, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   41f86:	f001 0407 	and.w	r4, r1, #7
{
   41f8a:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   41f8c:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   41f90:	4620      	mov	r0, r4
   41f92:	f000 fe0f 	bl	42bb4 <radio_phy_set>
	} else if (lll->enc_tx) {
   41f96:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   41f9a:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   41f9c:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   41f9e:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   41fa2:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   41fa4:	d50d      	bpl.n	41fc2 <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   41fa6:	3104      	adds	r1, #4
   41fa8:	b2c9      	uxtb	r1, r1
   41faa:	2008      	movs	r0, #8
   41fac:	f000 fe48 	bl	42c40 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   41fb0:	4639      	mov	r1, r7
   41fb2:	f105 0080 	add.w	r0, r5, #128	; 0x80
   41fb6:	f001 f977 	bl	432a8 <radio_ccm_tx_pkt_set>
}
   41fba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   41fbe:	f000 be6b 	b.w	42c98 <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   41fc2:	2008      	movs	r0, #8
   41fc4:	f000 fe3c 	bl	42c40 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   41fc8:	4638      	mov	r0, r7
}
   41fca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   41fce:	f000 be63 	b.w	42c98 <radio_pkt_tx_set>
   41fd2:	bf00      	nop

00041fd4 <lll_conn_pdu_tx_prep>:
{
   41fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   41fd8:	4604      	mov	r4, r0
   41fda:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   41fdc:	aa01      	add	r2, sp, #4
   41fde:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   41fe0:	460f      	mov	r7, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   41fe2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   41fe4:	f7f1 ff8e 	bl	33f04 <memq_peek>
	if (lll->empty || !link) {
   41fe8:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   41fec:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   41fee:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   41ff0:	d43f      	bmi.n	42072 <lll_conn_pdu_tx_prep+0x9e>
   41ff2:	b378      	cbz	r0, 42054 <lll_conn_pdu_tx_prep+0x80>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   41ff4:	9b01      	ldr	r3, [sp, #4]
   41ff6:	f894 805d 	ldrb.w	r8, [r4, #93]	; 0x5d
   41ffa:	f103 0904 	add.w	r9, r3, #4
		if (!lll->packet_tx_head_len) {
   41ffe:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   42002:	eb09 0508 	add.w	r5, r9, r8
		if (!lll->packet_tx_head_len) {
   42006:	b913      	cbnz	r3, 4200e <lll_conn_pdu_tx_prep+0x3a>
			lll->packet_tx_head_len = p->len;
   42008:	786b      	ldrb	r3, [r5, #1]
   4200a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   4200e:	f1b8 0f00 	cmp.w	r8, #0
   42012:	d006      	beq.n	42022 <lll_conn_pdu_tx_prep+0x4e>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   42014:	f819 2008 	ldrb.w	r2, [r9, r8]
   42018:	2101      	movs	r1, #1
   4201a:	f361 0201 	bfi	r2, r1, #0, #2
   4201e:	f809 2008 	strb.w	r2, [r9, r8]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   42022:	eba3 0308 	sub.w	r3, r3, r8
   42026:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   42028:	4620      	mov	r0, r4
   4202a:	f7fc f865 	bl	3e0f8 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   4202e:	786b      	ldrb	r3, [r5, #1]
   42030:	4283      	cmp	r3, r0
   42032:	d92f      	bls.n	42094 <lll_conn_pdu_tx_prep+0xc0>
			p->len = max_tx_octets;
   42034:	7068      	strb	r0, [r5, #1]
{
   42036:	2201      	movs	r2, #1
			p->md = 1U;
   42038:	f819 3008 	ldrb.w	r3, [r9, r8]
   4203c:	f003 030f 	and.w	r3, r3, #15
   42040:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   42044:	f809 3008 	strb.w	r3, [r9, r8]
		p->resv = 0U;
   42048:	2300      	movs	r3, #0
   4204a:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   4204c:	603d      	str	r5, [r7, #0]
}
   4204e:	b003      	add	sp, #12
   42050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   42054:	f043 0304 	orr.w	r3, r3, #4
   42058:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   4205c:	f000 fe92 	bl	42d84 <radio_pkt_empty_get>
   42060:	4605      	mov	r5, r0
			p->md = 0U;
   42062:	782b      	ldrb	r3, [r5, #0]
   42064:	f36f 1304 	bfc	r3, #4, #1
   42068:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   4206a:	603d      	str	r5, [r7, #0]
}
   4206c:	b003      	add	sp, #12
   4206e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   42072:	f043 0304 	orr.w	r3, r3, #4
   42076:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   4207a:	f000 fe83 	bl	42d84 <radio_pkt_empty_get>
   4207e:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   42080:	2e00      	cmp	r6, #0
   42082:	d0ee      	beq.n	42062 <lll_conn_pdu_tx_prep+0x8e>
			p->md = 1U;
   42084:	7803      	ldrb	r3, [r0, #0]
   42086:	f043 0310 	orr.w	r3, r3, #16
   4208a:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   4208c:	603d      	str	r5, [r7, #0]
}
   4208e:	b003      	add	sp, #12
   42090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   42094:	6832      	ldr	r2, [r6, #0]
   42096:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   42098:	429a      	cmp	r2, r3
   4209a:	d1cc      	bne.n	42036 <lll_conn_pdu_tx_prep+0x62>
   4209c:	2200      	movs	r2, #0
   4209e:	e7cb      	b.n	42038 <lll_conn_pdu_tx_prep+0x64>

000420a0 <lll_conn_isr_rx>:
{
   420a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   420a4:	b083      	sub	sp, #12
   420a6:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   420a8:	f000 fe42 	bl	42d30 <radio_is_done>
	if (trx_done) {
   420ac:	b2c0      	uxtb	r0, r0
   420ae:	b950      	cbnz	r0, 420c6 <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   420b0:	f7fe facc 	bl	4064c <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   420b4:	48c1      	ldr	r0, [pc, #772]	; (423bc <lll_conn_isr_rx+0x31c>)
   420b6:	4621      	mov	r1, r4
   420b8:	f000 fd16 	bl	42ae8 <radio_isr_set>
}
   420bc:	b003      	add	sp, #12
   420be:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		radio_disable();
   420c2:	f000 be0b 	b.w	42cdc <radio_disable>
		crc_ok = radio_crc_is_valid();
   420c6:	f000 fe53 	bl	42d70 <radio_crc_is_valid>
   420ca:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   420cc:	f000 ff32 	bl	42f34 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   420d0:	f7fe fabc 	bl	4064c <lll_isr_rx_status_reset>
	trx_cnt++;
   420d4:	4aba      	ldr	r2, [pc, #744]	; (423c0 <lll_conn_isr_rx+0x320>)
   420d6:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   420d8:	2001      	movs	r0, #1
	trx_cnt++;
   420da:	4403      	add	r3, r0
   420dc:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   420de:	f7f5 fe9f 	bl	37e20 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   420e2:	4606      	mov	r6, r0
   420e4:	2800      	cmp	r0, #0
   420e6:	f000 80fa 	beq.w	422de <lll_conn_isr_rx+0x23e>
	if (crc_ok) {
   420ea:	2d00      	cmp	r5, #0
   420ec:	d14d      	bne.n	4218a <lll_conn_isr_rx+0xea>
		if (crc_expire == 0U) {
   420ee:	4bb5      	ldr	r3, [pc, #724]	; (423c4 <lll_conn_isr_rx+0x324>)
   420f0:	781f      	ldrb	r7, [r3, #0]
   420f2:	2f00      	cmp	r7, #0
   420f4:	f040 80bb 	bne.w	4226e <lll_conn_isr_rx+0x1ce>
		crc_expire--;
   420f8:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   420fa:	a901      	add	r1, sp, #4
   420fc:	4620      	mov	r0, r4
		crc_expire--;
   420fe:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   42100:	f7ff ff68 	bl	41fd4 <lll_conn_pdu_tx_prep>
	is_rx_enqueue = 0U;
   42104:	2700      	movs	r7, #0
	pdu_data_tx->sn = lll->sn;
   42106:	f8dd 8004 	ldr.w	r8, [sp, #4]
	tx_release = NULL;
   4210a:	463d      	mov	r5, r7
		radio_tmr_tifs_set(EVENT_IFS_US);
   4210c:	2096      	movs	r0, #150	; 0x96
   4210e:	f000 ff6d 	bl	42fec <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   42112:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   42116:	f000 0007 	and.w	r0, r0, #7
   4211a:	f000 fe3b 	bl	42d94 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   4211e:	48aa      	ldr	r0, [pc, #680]	; (423c8 <lll_conn_isr_rx+0x328>)
   42120:	4621      	mov	r1, r4
   42122:	f000 fce1 	bl	42ae8 <radio_isr_set>
		radio_tmr_end_capture();
   42126:	f001 f86d 	bl	43204 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   4212a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	pdu_data_tx->nesn = lll->nesn;
   4212e:	f898 1000 	ldrb.w	r1, [r8]
   42132:	f3c2 0340 	ubfx	r3, r2, #1, #1
   42136:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   42138:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   4213c:	f021 010c 	bic.w	r1, r1, #12
   42140:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   42144:	430b      	orrs	r3, r1
   42146:	f888 3000 	strb.w	r3, [r8]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   4214a:	4641      	mov	r1, r8
   4214c:	4620      	mov	r0, r4
   4214e:	f7ff ff15 	bl	41f7c <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   42152:	f000 fde3 	bl	42d1c <radio_is_ready>
   42156:	2800      	cmp	r0, #0
   42158:	f040 80fb 	bne.w	42352 <lll_conn_isr_rx+0x2b2>
	if (!radio_tmr_aa_restore()) {
   4215c:	f001 f846 	bl	431ec <radio_tmr_aa_restore>
   42160:	2800      	cmp	r0, #0
   42162:	d07a      	beq.n	4225a <lll_conn_isr_rx+0x1ba>
	if (tx_release) {
   42164:	2d00      	cmp	r5, #0
   42166:	d07e      	beq.n	42266 <lll_conn_isr_rx+0x1c6>
		LL_ASSERT(lll->handle != 0xFFFF);
   42168:	89a0      	ldrh	r0, [r4, #12]
   4216a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4216e:	4298      	cmp	r0, r3
   42170:	f000 80fe 	beq.w	42370 <lll_conn_isr_rx+0x2d0>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   42174:	4629      	mov	r1, r5
   42176:	f7fb fd1f 	bl	3dbb8 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   4217a:	2f00      	cmp	r7, #0
   4217c:	f040 8092 	bne.w	422a4 <lll_conn_isr_rx+0x204>
}
   42180:	b003      	add	sp, #12
   42182:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		ull_rx_sched();
   42186:	f7f5 be91 	b.w	37eac <ull_rx_sched>
	if (pdu_data_rx->nesn != lll->sn) {
   4218a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   4218e:	7f32      	ldrb	r2, [r6, #28]
   42190:	f003 0101 	and.w	r1, r3, #1
   42194:	f3c2 0080 	ubfx	r0, r2, #2, #1
   42198:	4288      	cmp	r0, r1
   4219a:	f000 80b0 	beq.w	422fe <lll_conn_isr_rx+0x25e>
		if (lll->role) {
   4219e:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   421a2:	f081 0101 	eor.w	r1, r1, #1
   421a6:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   421aa:	2a00      	cmp	r2, #0
		lll->sn++;
   421ac:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   421b0:	da05      	bge.n	421be <lll_conn_isr_rx+0x11e>
			lll->periph.latency_enabled = 1;
   421b2:	f894 3020 	ldrb.w	r3, [r4, #32]
   421b6:	f043 0304 	orr.w	r3, r3, #4
   421ba:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   421be:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   421c2:	f013 0804 	ands.w	r8, r3, #4
   421c6:	f040 80e2 	bne.w	4238e <lll_conn_isr_rx+0x2ee>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   421ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   421ce:	aa01      	add	r2, sp, #4
   421d0:	f7f1 fe98 	bl	33f04 <memq_peek>
		if (link) {
   421d4:	4605      	mov	r5, r0
   421d6:	2800      	cmp	r0, #0
   421d8:	f000 8106 	beq.w	423e8 <lll_conn_isr_rx+0x348>
			pdu_data_tx = (void *)(tx->pdu +
   421dc:	9f01      	ldr	r7, [sp, #4]
					       lll->packet_tx_head_offset);
   421de:	f894 905d 	ldrb.w	r9, [r4, #93]	; 0x5d
			pdu_data_tx = (void *)(tx->pdu +
   421e2:	3704      	adds	r7, #4
   421e4:	eb07 0309 	add.w	r3, r7, r9
			pdu_data_tx_len = pdu_data_tx->len;
   421e8:	785a      	ldrb	r2, [r3, #1]
			if (pdu_data_tx_len != 0U) {
   421ea:	b172      	cbz	r2, 4220a <lll_conn_isr_rx+0x16a>
				if (lll->enc_tx) {
   421ec:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   421f0:	06db      	lsls	r3, r3, #27
   421f2:	d50a      	bpl.n	4220a <lll_conn_isr_rx+0x16a>
					lll->ccm_tx.counter++;
   421f4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   421f8:	3301      	adds	r3, #1
   421fa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   421fe:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   42202:	f143 0300 	adc.w	r3, r3, #0
   42206:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   4220a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   4220e:	444a      	add	r2, r9
   42210:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   42212:	429a      	cmp	r2, r3
   42214:	f0c0 80ef 	bcc.w	423f6 <lll_conn_isr_rx+0x356>
			} else if (offset == lll->packet_tx_head_len) {
   42218:	f000 8117 	beq.w	4244a <lll_conn_isr_rx+0x3aa>
				LL_ASSERT(0);
   4221c:	4a6b      	ldr	r2, [pc, #428]	; (423cc <lll_conn_isr_rx+0x32c>)
   4221e:	496c      	ldr	r1, [pc, #432]	; (423d0 <lll_conn_isr_rx+0x330>)
   42220:	486c      	ldr	r0, [pc, #432]	; (423d4 <lll_conn_isr_rx+0x334>)
   42222:	f240 33a3 	movw	r3, #931	; 0x3a3
   42226:	f007 fbe8 	bl	499fa <printk>
   4222a:	4040      	eors	r0, r0
   4222c:	f380 8811 	msr	BASEPRI, r0
   42230:	f04f 0003 	mov.w	r0, #3
   42234:	df02      	svc	2
	tx_release = NULL;
   42236:	2500      	movs	r5, #0
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   42238:	f994 301d 	ldrsb.w	r3, [r4, #29]
   4223c:	2b00      	cmp	r3, #0
   4223e:	f2c0 8100 	blt.w	42442 <lll_conn_isr_rx+0x3a2>
			    !pdu_data_rx->md) {
   42242:	7f32      	ldrb	r2, [r6, #28]
   42244:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   42248:	06d0      	lsls	r0, r2, #27
				*is_done = !pdu_data_tx->md;
   4224a:	bf5e      	ittt	pl
   4224c:	f817 8009 	ldrbpl.w	r8, [r7, r9]
   42250:	f088 0810 	eorpl.w	r8, r8, #16
   42254:	f3c8 1800 	ubfxpl	r8, r8, #4, #1
   42258:	e054      	b.n	42304 <lll_conn_isr_rx+0x264>
		radio_tmr_aa_save(radio_tmr_aa_get());
   4225a:	f000 ffbb 	bl	431d4 <radio_tmr_aa_get>
   4225e:	f000 ffbf 	bl	431e0 <radio_tmr_aa_save>
	if (tx_release) {
   42262:	2d00      	cmp	r5, #0
   42264:	d180      	bne.n	42168 <lll_conn_isr_rx+0xc8>
	if (is_rx_enqueue) {
   42266:	b9ef      	cbnz	r7, 422a4 <lll_conn_isr_rx+0x204>
}
   42268:	b003      	add	sp, #12
   4226a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		crc_expire--;
   4226e:	3f01      	subs	r7, #1
   42270:	b2ff      	uxtb	r7, r7
   42272:	701f      	strb	r7, [r3, #0]
	is_empty_pdu_tx_retry = lll->empty;
   42274:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   42278:	a901      	add	r1, sp, #4
   4227a:	4620      	mov	r0, r4
	is_empty_pdu_tx_retry = lll->empty;
   4227c:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   42280:	f7ff fea8 	bl	41fd4 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   42284:	2f00      	cmp	r7, #0
   42286:	f47f af3d 	bne.w	42104 <lll_conn_isr_rx+0x64>
		radio_isr_set(isr_done, param);
   4228a:	484c      	ldr	r0, [pc, #304]	; (423bc <lll_conn_isr_rx+0x31c>)
   4228c:	4621      	mov	r1, r4
   4228e:	f000 fc2b 	bl	42ae8 <radio_isr_set>
		} else if (!lll->role) {
   42292:	f994 301d 	ldrsb.w	r3, [r4, #29]
   42296:	2b00      	cmp	r3, #0
   42298:	da13      	bge.n	422c2 <lll_conn_isr_rx+0x222>
			radio_switch_complete_and_disable();
   4229a:	f000 fe23 	bl	42ee4 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = lll->sn;
   4229e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   422a2:	e742      	b.n	4212a <lll_conn_isr_rx+0x8a>
		ull_pdu_rx_alloc();
   422a4:	f7f5 fddc 	bl	37e60 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   422a8:	2303      	movs	r3, #3
   422aa:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   422ac:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   422ae:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   422b0:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   422b2:	4631      	mov	r1, r6
   422b4:	f7f5 fdea 	bl	37e8c <ull_rx_put>
}
   422b8:	b003      	add	sp, #12
   422ba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		ull_rx_sched();
   422be:	f7f5 bdf5 	b.w	37eac <ull_rx_sched>
			radio_disable();
   422c2:	f000 fd0b 	bl	42cdc <radio_disable>
			LL_ASSERT(!radio_is_ready());
   422c6:	f000 fd29 	bl	42d1c <radio_is_ready>
   422ca:	2800      	cmp	r0, #0
   422cc:	f040 80a8 	bne.w	42420 <lll_conn_isr_rx+0x380>
			lll->empty = is_empty_pdu_tx_retry;
   422d0:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   422d4:	f369 0382 	bfi	r3, r9, #2, #1
   422d8:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			goto lll_conn_isr_rx_exit;
   422dc:	e73e      	b.n	4215c <lll_conn_isr_rx+0xbc>
	LL_ASSERT(node_rx);
   422de:	4a3b      	ldr	r2, [pc, #236]	; (423cc <lll_conn_isr_rx+0x32c>)
   422e0:	493d      	ldr	r1, [pc, #244]	; (423d8 <lll_conn_isr_rx+0x338>)
   422e2:	483c      	ldr	r0, [pc, #240]	; (423d4 <lll_conn_isr_rx+0x334>)
   422e4:	23f2      	movs	r3, #242	; 0xf2
   422e6:	f007 fb88 	bl	499fa <printk>
   422ea:	4040      	eors	r0, r0
   422ec:	f380 8811 	msr	BASEPRI, r0
   422f0:	f04f 0003 	mov.w	r0, #3
   422f4:	df02      	svc	2
	if (crc_ok) {
   422f6:	2d00      	cmp	r5, #0
   422f8:	f43f aef9 	beq.w	420ee <lll_conn_isr_rx+0x4e>
   422fc:	e745      	b.n	4218a <lll_conn_isr_rx+0xea>
	is_done = 0U;
   422fe:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   42302:	4645      	mov	r5, r8
	if ((pdu_data_rx->sn == lll->nesn) &&
   42304:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   42308:	f3c3 0140 	ubfx	r1, r3, #1, #1
   4230c:	428a      	cmp	r2, r1
   4230e:	d075      	beq.n	423fc <lll_conn_isr_rx+0x35c>
	is_rx_enqueue = 0U;
   42310:	2700      	movs	r7, #0
		crc_expire = 0U;
   42312:	4a2c      	ldr	r2, [pc, #176]	; (423c4 <lll_conn_isr_rx+0x324>)
   42314:	2100      	movs	r1, #0
	is_empty_pdu_tx_retry = lll->empty;
   42316:	f3c3 0980 	ubfx	r9, r3, #2, #1
		crc_valid = 1U;
   4231a:	4b30      	ldr	r3, [pc, #192]	; (423dc <lll_conn_isr_rx+0x33c>)
		crc_expire = 0U;
   4231c:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   4231e:	4620      	mov	r0, r4
		crc_valid = 1U;
   42320:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   42322:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   42324:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   42326:	f7ff fe55 	bl	41fd4 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   4232a:	f1b8 0f00 	cmp.w	r8, #0
   4232e:	d1ac      	bne.n	4228a <lll_conn_isr_rx+0x1ea>
   42330:	7f33      	ldrb	r3, [r6, #28]
			      (pdu_data_tx->md == 0) &&
   42332:	f8dd 8004 	ldr.w	r8, [sp, #4]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   42336:	06da      	lsls	r2, r3, #27
   42338:	f53f aee8 	bmi.w	4210c <lll_conn_isr_rx+0x6c>
			      (pdu_data_tx->md == 0) &&
   4233c:	f898 3000 	ldrb.w	r3, [r8]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   42340:	06db      	lsls	r3, r3, #27
   42342:	f53f aee3 	bmi.w	4210c <lll_conn_isr_rx+0x6c>
			      (pdu_data_tx->md == 0) &&
   42346:	f898 3001 	ldrb.w	r3, [r8, #1]
   4234a:	2b00      	cmp	r3, #0
   4234c:	f47f aede 	bne.w	4210c <lll_conn_isr_rx+0x6c>
   42350:	e79b      	b.n	4228a <lll_conn_isr_rx+0x1ea>
	LL_ASSERT(!radio_is_ready());
   42352:	4a1e      	ldr	r2, [pc, #120]	; (423cc <lll_conn_isr_rx+0x32c>)
   42354:	4922      	ldr	r1, [pc, #136]	; (423e0 <lll_conn_isr_rx+0x340>)
   42356:	481f      	ldr	r0, [pc, #124]	; (423d4 <lll_conn_isr_rx+0x334>)
   42358:	f240 1369 	movw	r3, #361	; 0x169
   4235c:	f007 fb4d 	bl	499fa <printk>
   42360:	4040      	eors	r0, r0
   42362:	f380 8811 	msr	BASEPRI, r0
   42366:	f04f 0003 	mov.w	r0, #3
   4236a:	df02      	svc	2
   4236c:	e6f6      	b.n	4215c <lll_conn_isr_rx+0xbc>
	is_rx_enqueue = 0U;
   4236e:	2700      	movs	r7, #0
		LL_ASSERT(lll->handle != 0xFFFF);
   42370:	4a16      	ldr	r2, [pc, #88]	; (423cc <lll_conn_isr_rx+0x32c>)
   42372:	491c      	ldr	r1, [pc, #112]	; (423e4 <lll_conn_isr_rx+0x344>)
   42374:	4817      	ldr	r0, [pc, #92]	; (423d4 <lll_conn_isr_rx+0x334>)
   42376:	f44f 73bc 	mov.w	r3, #376	; 0x178
   4237a:	f007 fb3e 	bl	499fa <printk>
   4237e:	4040      	eors	r0, r0
   42380:	f380 8811 	msr	BASEPRI, r0
   42384:	f04f 0003 	mov.w	r0, #3
   42388:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   4238a:	89a0      	ldrh	r0, [r4, #12]
   4238c:	e6f2      	b.n	42174 <lll_conn_isr_rx+0xd4>
			lll->empty = 0;
   4238e:	f36f 0382 	bfc	r3, #2, #1
   42392:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   42396:	f000 fcf5 	bl	42d84 <radio_pkt_empty_get>
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   4239a:	f994 301d 	ldrsb.w	r3, [r4, #29]
   4239e:	2b00      	cmp	r3, #0
   423a0:	db22      	blt.n	423e8 <lll_conn_isr_rx+0x348>
			    !pdu_data_rx->md) {
   423a2:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   423a4:	f012 0510 	ands.w	r5, r2, #16
   423a8:	d11f      	bne.n	423ea <lll_conn_isr_rx+0x34a>
				*is_done = !pdu_data_tx->md;
   423aa:	f890 8000 	ldrb.w	r8, [r0]
   423ae:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   423b2:	f088 0810 	eor.w	r8, r8, #16
   423b6:	f3c8 1800 	ubfx	r8, r8, #4, #1
   423ba:	e7a3      	b.n	42304 <lll_conn_isr_rx+0x264>
   423bc:	00041cdd 	.word	0x00041cdd
   423c0:	200072b4 	.word	0x200072b4
   423c4:	2000741d 	.word	0x2000741d
   423c8:	00041ec5 	.word	0x00041ec5
   423cc:	00053720 	.word	0x00053720
   423d0:	00052ad0 	.word	0x00052ad0
   423d4:	00052a70 	.word	0x00052a70
   423d8:	00053688 	.word	0x00053688
   423dc:	2000741c 	.word	0x2000741c
   423e0:	00053690 	.word	0x00053690
   423e4:	00053774 	.word	0x00053774
   423e8:	7f32      	ldrb	r2, [r6, #28]
   423ea:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	is_done = 0U;
   423ee:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   423f2:	4645      	mov	r5, r8
   423f4:	e786      	b.n	42304 <lll_conn_isr_rx+0x264>
				lll->packet_tx_head_offset = offset;
   423f6:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
   423fa:	e71c      	b.n	42236 <lll_conn_isr_rx+0x196>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   423fc:	2003      	movs	r0, #3
   423fe:	f7f5 fd0f 	bl	37e20 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   42402:	b1d8      	cbz	r0, 4243c <lll_conn_isr_rx+0x39c>
		lll->nesn++;
   42404:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42408:	f083 0302 	eor.w	r3, r3, #2
   4240c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   42410:	7f73      	ldrb	r3, [r6, #29]
   42412:	b19b      	cbz	r3, 4243c <lll_conn_isr_rx+0x39c>
			if (lll->enc_rx) {
   42414:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42418:	0719      	lsls	r1, r3, #28
   4241a:	d424      	bmi.n	42466 <lll_conn_isr_rx+0x3c6>
			*is_rx_enqueue = 1U;
   4241c:	2701      	movs	r7, #1
   4241e:	e778      	b.n	42312 <lll_conn_isr_rx+0x272>
			LL_ASSERT(!radio_is_ready());
   42420:	4a43      	ldr	r2, [pc, #268]	; (42530 <lll_conn_isr_rx+0x490>)
   42422:	4944      	ldr	r1, [pc, #272]	; (42534 <lll_conn_isr_rx+0x494>)
   42424:	4844      	ldr	r0, [pc, #272]	; (42538 <lll_conn_isr_rx+0x498>)
   42426:	f44f 7398 	mov.w	r3, #304	; 0x130
   4242a:	f007 fae6 	bl	499fa <printk>
   4242e:	4040      	eors	r0, r0
   42430:	f380 8811 	msr	BASEPRI, r0
   42434:	f04f 0003 	mov.w	r0, #3
   42438:	df02      	svc	2
   4243a:	e749      	b.n	422d0 <lll_conn_isr_rx+0x230>
   4243c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42440:	e766      	b.n	42310 <lll_conn_isr_rx+0x270>
   42442:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42446:	7f32      	ldrb	r2, [r6, #28]
   42448:	e75c      	b.n	42304 <lll_conn_isr_rx+0x264>
				lll->packet_tx_head_len = 0;
   4244a:	2200      	movs	r2, #0
   4244c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   42450:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   42452:	f104 0148 	add.w	r1, r4, #72	; 0x48
   42456:	f7f1 fd5d 	bl	33f14 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   4245a:	9b01      	ldr	r3, [sp, #4]
   4245c:	681a      	ldr	r2, [r3, #0]
   4245e:	602a      	str	r2, [r5, #0]
				tx->next = link;
   42460:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   42462:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   42464:	e6e8      	b.n	42238 <lll_conn_isr_rx+0x198>
				done = radio_ccm_is_done();
   42466:	f000 ff47 	bl	432f8 <radio_ccm_is_done>
				LL_ASSERT(done);
   4246a:	2800      	cmp	r0, #0
   4246c:	d04a      	beq.n	42504 <lll_conn_isr_rx+0x464>
				bool mic_failure = !radio_ccm_mic_is_valid();
   4246e:	f000 ff65 	bl	4333c <radio_ccm_mic_is_valid>
				if (mic_failure &&
   42472:	bba8      	cbnz	r0, 424e0 <lll_conn_isr_rx+0x440>
				    lll->ccm_rx.counter == 0 &&
   42474:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   42478:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
				if (mic_failure &&
   4247c:	4313      	orrs	r3, r2
   4247e:	d104      	bne.n	4248a <lll_conn_isr_rx+0x3ea>
				    (pdu_data_rx->ll_id ==
   42480:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   42482:	f003 0303 	and.w	r3, r3, #3
   42486:	2b03      	cmp	r3, #3
   42488:	d013      	beq.n	424b2 <lll_conn_isr_rx+0x412>
					mic_state = LLL_CONN_MIC_FAIL;
   4248a:	4b2c      	ldr	r3, [pc, #176]	; (4253c <lll_conn_isr_rx+0x49c>)
   4248c:	2202      	movs	r2, #2
   4248e:	701a      	strb	r2, [r3, #0]
	if (!radio_tmr_aa_restore()) {
   42490:	f000 feac 	bl	431ec <radio_tmr_aa_restore>
   42494:	2800      	cmp	r0, #0
   42496:	d043      	beq.n	42520 <lll_conn_isr_rx+0x480>
	if (tx_release) {
   42498:	2d00      	cmp	r5, #0
   4249a:	f43f aee5 	beq.w	42268 <lll_conn_isr_rx+0x1c8>
		LL_ASSERT(lll->handle != 0xFFFF);
   4249e:	89a0      	ldrh	r0, [r4, #12]
   424a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   424a4:	4298      	cmp	r0, r3
   424a6:	f43f af62 	beq.w	4236e <lll_conn_isr_rx+0x2ce>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   424aa:	4629      	mov	r1, r5
   424ac:	f7fb fb84 	bl	3dbb8 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   424b0:	e666      	b.n	42180 <lll_conn_isr_rx+0xe0>
						radio_pkt_scratch_get();
   424b2:	f000 fc6b 	bl	42d8c <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   424b6:	7843      	ldrb	r3, [r0, #1]
   424b8:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   424ba:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   424bc:	d8e5      	bhi.n	4248a <lll_conn_isr_rx+0x3ea>
						memcpy(pdu_data_rx,
   424be:	3303      	adds	r3, #3
   424c0:	b2da      	uxtb	r2, r3
   424c2:	f106 001c 	add.w	r0, r6, #28
   424c6:	f009 fbc7 	bl	4bc58 <memcpy>
						lll->ccm_rx.counter--;
   424ca:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   424ce:	3b01      	subs	r3, #1
   424d0:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   424d4:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   424d8:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   424dc:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   424e0:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   424e4:	3301      	adds	r3, #1
   424e6:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   424ea:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
						lll->ccm_rx.counter--;
   424ee:	f104 026f 	add.w	r2, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   424f2:	f143 0300 	adc.w	r3, r3, #0
   424f6:	6053      	str	r3, [r2, #4]
				mic_state = LLL_CONN_MIC_PASS;
   424f8:	4b10      	ldr	r3, [pc, #64]	; (4253c <lll_conn_isr_rx+0x49c>)
   424fa:	2201      	movs	r2, #1
   424fc:	701a      	strb	r2, [r3, #0]
		if (err) {
   424fe:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42502:	e78b      	b.n	4241c <lll_conn_isr_rx+0x37c>
				LL_ASSERT(done);
   42504:	4a0a      	ldr	r2, [pc, #40]	; (42530 <lll_conn_isr_rx+0x490>)
   42506:	490e      	ldr	r1, [pc, #56]	; (42540 <lll_conn_isr_rx+0x4a0>)
   42508:	480b      	ldr	r0, [pc, #44]	; (42538 <lll_conn_isr_rx+0x498>)
   4250a:	f240 33be 	movw	r3, #958	; 0x3be
   4250e:	f007 fa74 	bl	499fa <printk>
   42512:	4040      	eors	r0, r0
   42514:	f380 8811 	msr	BASEPRI, r0
   42518:	f04f 0003 	mov.w	r0, #3
   4251c:	df02      	svc	2
   4251e:	e7a6      	b.n	4246e <lll_conn_isr_rx+0x3ce>
		radio_tmr_aa_save(radio_tmr_aa_get());
   42520:	f000 fe58 	bl	431d4 <radio_tmr_aa_get>
   42524:	f000 fe5c 	bl	431e0 <radio_tmr_aa_save>
	if (tx_release) {
   42528:	2d00      	cmp	r5, #0
   4252a:	d1b8      	bne.n	4249e <lll_conn_isr_rx+0x3fe>
   4252c:	e69c      	b.n	42268 <lll_conn_isr_rx+0x1c8>
   4252e:	bf00      	nop
   42530:	00053720 	.word	0x00053720
   42534:	00053690 	.word	0x00053690
   42538:	00052a70 	.word	0x00052a70
   4253c:	2000741b 	.word	0x2000741b
   42540:	0005376c 	.word	0x0005376c

00042544 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   42544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   42548:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   4254a:	89a2      	ldrh	r2, [r4, #12]
   4254c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   42550:	429a      	cmp	r2, r3
{
   42552:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   42554:	f000 80d2 	beq.w	426fc <prepare_cb+0x1b8>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   42558:	4605      	mov	r5, r0
   4255a:	f7ff fc29 	bl	41db0 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   4255e:	892b      	ldrh	r3, [r5, #8]
   42560:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   42562:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   42564:	441a      	add	r2, r3
   42566:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   42568:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   4256a:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   4256c:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   4256e:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   42570:	1c41      	adds	r1, r0, #1
   42572:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   42574:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   42576:	f04f 0100 	mov.w	r1, #0
   4257a:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   4257c:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   42580:	f100 808e 	bmi.w	426a0 <prepare_cb+0x15c>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   42584:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   42588:	460b      	mov	r3, r1
   4258a:	7fa1      	ldrb	r1, [r4, #30]
   4258c:	9000      	str	r0, [sp, #0]
   4258e:	f104 001f 	add.w	r0, r4, #31
   42592:	f7fc fabd 	bl	3eb10 <lll_chan_sel_1>
   42596:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
   42598:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   4259c:	4413      	add	r3, r2
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
   4259e:	e9d4 020d 	ldrd	r0, r2, [r4, #52]	; 0x34
	lll->periph.window_widening_prepare_us = 0;
   425a2:	2100      	movs	r1, #0
	lll->periph.window_size_event_us +=
   425a4:	4402      	add	r2, r0
	lll->periph.window_widening_prepare_us = 0;
   425a6:	62e1      	str	r1, [r4, #44]	; 0x2c
		lll->periph.window_size_prepare_us;
	lll->periph.window_size_prepare_us = 0;
   425a8:	6361      	str	r1, [r4, #52]	; 0x34
   425aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	lll->periph.window_size_event_us +=
   425ac:	63a2      	str	r2, [r4, #56]	; 0x38
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   425ae:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   425b2:	428b      	cmp	r3, r1
   425b4:	bf28      	it	cs
   425b6:	460b      	movcs	r3, r1
   425b8:	f012 0204 	ands.w	r2, r2, #4
   425bc:	6323      	str	r3, [r4, #48]	; 0x30
   425be:	f000 808f 	beq.w	426e0 <prepare_cb+0x19c>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   425c2:	f000 fad3 	bl	42b6c <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   425c6:	2000      	movs	r0, #0
   425c8:	f000 fb04 	bl	42bd4 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   425cc:	4620      	mov	r0, r4
   425ce:	f7ff fc33 	bl	41e38 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   425d2:	1d20      	adds	r0, r4, #4
   425d4:	f000 fb1c 	bl	42c10 <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   425d8:	8923      	ldrh	r3, [r4, #8]
   425da:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   425dc:	f240 605b 	movw	r0, #1627	; 0x65b
   425e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   425e4:	f000 fbb8 	bl	42d58 <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
   425e8:	4630      	mov	r0, r6
   425ea:	f7fd ffe1 	bl	405b0 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   425ee:	4621      	mov	r1, r4
   425f0:	4847      	ldr	r0, [pc, #284]	; (42710 <prepare_cb+0x1cc>)
   425f2:	f000 fa79 	bl	42ae8 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   425f6:	2096      	movs	r0, #150	; 0x96
   425f8:	f000 fcf8 	bl	42fec <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   425fc:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   42600:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   42604:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   42608:	2100      	movs	r1, #0
   4260a:	f002 0207 	and.w	r2, r2, #7
   4260e:	f000 0007 	and.w	r0, r0, #7
   42612:	f000 fc07 	bl	42e24 <radio_switch_complete_and_tx>
		radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */
	}

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   42616:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   42618:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   4261a:	4638      	mov	r0, r7
   4261c:	f7fd ffaa 	bl	40574 <lll_event_offset_get>
   42620:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   42622:	686a      	ldr	r2, [r5, #4]
   42624:	f106 0109 	add.w	r1, r6, #9
   42628:	2000      	movs	r0, #0
   4262a:	f000 fceb 	bl	43004 <radio_tmr_start>
   4262e:	4680      	mov	r8, r0

	radio_tmr_aa_capture();
   42630:	f000 fdbc 	bl	431ac <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   42634:	2000      	movs	r0, #0
   42636:	f000 fdd3 	bl	431e0 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   4263a:	6b23      	ldr	r3, [r4, #48]	; 0x30
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   4263c:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   42640:	f103 0230 	add.w	r2, r3, #48	; 0x30
	hcto = remainder_us +
   42644:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   42646:	f000 0007 	and.w	r0, r0, #7
   4264a:	2101      	movs	r1, #1
	hcto = remainder_us +
   4264c:	eb03 0542 	add.w	r5, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   42650:	f000 fb30 	bl	42cb4 <radio_rx_ready_delay_get>
	hcto = remainder_us +
   42654:	4445      	add	r5, r8
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   42656:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   42658:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   4265c:	f000 0007 	and.w	r0, r0, #7
   42660:	2802      	cmp	r0, #2
   42662:	d03b      	beq.n	426dc <prepare_cb+0x198>
		return 40;
   42664:	2804      	cmp	r0, #4
   42666:	bf0c      	ite	eq
   42668:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   4266c:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   4266e:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   42670:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   42672:	f000 fb21 	bl	42cb8 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   42676:	4428      	add	r0, r5
   42678:	f000 fd8a 	bl	43190 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   4267c:	89a1      	ldrh	r1, [r4, #12]
   4267e:	3105      	adds	r1, #5
   42680:	4632      	mov	r2, r6
   42682:	b2c9      	uxtb	r1, r1
   42684:	4638      	mov	r0, r7
   42686:	f7fd ff83 	bl	40590 <lll_preempt_calc>
   4268a:	b188      	cbz	r0, 426b0 <prepare_cb+0x16c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   4268c:	4821      	ldr	r0, [pc, #132]	; (42714 <prepare_cb+0x1d0>)
   4268e:	4621      	mov	r1, r4
   42690:	f000 fa2a 	bl	42ae8 <radio_isr_set>
		radio_disable();
   42694:	f000 fb22 	bl	42cdc <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   42698:	2000      	movs	r0, #0
   4269a:	b002      	add	sp, #8
   4269c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   426a0:	460a      	mov	r2, r1
   426a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   426a6:	8be1      	ldrh	r1, [r4, #30]
   426a8:	f7fc fa7e 	bl	3eba8 <lll_chan_sel_2>
   426ac:	4606      	mov	r6, r0
   426ae:	e773      	b.n	42598 <prepare_cb+0x54>
		ret = lll_prepare_done(lll);
   426b0:	4620      	mov	r0, r4
   426b2:	f7fd fef9 	bl	404a8 <lll_prepare_done>
		LL_ASSERT(!ret);
   426b6:	2800      	cmp	r0, #0
   426b8:	d0ee      	beq.n	42698 <prepare_cb+0x154>
   426ba:	4a17      	ldr	r2, [pc, #92]	; (42718 <prepare_cb+0x1d4>)
   426bc:	4917      	ldr	r1, [pc, #92]	; (4271c <prepare_cb+0x1d8>)
   426be:	4818      	ldr	r0, [pc, #96]	; (42720 <prepare_cb+0x1dc>)
   426c0:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   426c4:	f007 f999 	bl	499fa <printk>
   426c8:	4040      	eors	r0, r0
   426ca:	f380 8811 	msr	BASEPRI, r0
   426ce:	f04f 0003 	mov.w	r0, #3
   426d2:	df02      	svc	2
}
   426d4:	2000      	movs	r0, #0
   426d6:	b002      	add	sp, #8
   426d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   426dc:	2318      	movs	r3, #24
   426de:	e7c6      	b.n	4266e <prepare_cb+0x12a>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   426e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   426e4:	f7f1 fc0e 	bl	33f04 <memq_peek>
		if (!link) {
   426e8:	2800      	cmp	r0, #0
   426ea:	f47f af6a 	bne.w	425c2 <prepare_cb+0x7e>
			lll->empty = 1U;
   426ee:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   426f2:	f043 0304 	orr.w	r3, r3, #4
   426f6:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
   426fa:	e762      	b.n	425c2 <prepare_cb+0x7e>
		radio_isr_set(lll_isr_early_abort, lll);
   426fc:	4809      	ldr	r0, [pc, #36]	; (42724 <prepare_cb+0x1e0>)
   426fe:	4621      	mov	r1, r4
   42700:	f000 f9f2 	bl	42ae8 <radio_isr_set>
		radio_disable();
   42704:	f000 faea 	bl	42cdc <radio_disable>
}
   42708:	2000      	movs	r0, #0
   4270a:	b002      	add	sp, #8
   4270c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   42710:	000420a1 	.word	0x000420a1
   42714:	000406e9 	.word	0x000406e9
   42718:	0005378c 	.word	0x0005378c
   4271c:	00052d4c 	.word	0x00052d4c
   42720:	00052a70 	.word	0x00052a70
   42724:	0004070d 	.word	0x0004070d

00042728 <lll_periph_prepare>:
{
   42728:	b510      	push	{r4, lr}
   4272a:	b082      	sub	sp, #8
   4272c:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   4272e:	f7fe f945 	bl	409bc <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   42732:	2800      	cmp	r0, #0
   42734:	db25      	blt.n	42782 <lll_periph_prepare+0x5a>
	lll = p->param;
   42736:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   42738:	8920      	ldrh	r0, [r4, #8]
   4273a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->periph.window_widening_prepare_us +=
   4273c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   4273e:	fb00 3303 	mla	r3, r0, r3, r3
   42742:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->periph.window_widening_prepare_us +=
   42744:	4413      	add	r3, r2
   42746:	4283      	cmp	r3, r0
   42748:	bf28      	it	cs
   4274a:	4603      	movcs	r3, r0
   4274c:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   4274e:	4a13      	ldr	r2, [pc, #76]	; (4279c <lll_periph_prepare+0x74>)
   42750:	4913      	ldr	r1, [pc, #76]	; (427a0 <lll_periph_prepare+0x78>)
   42752:	4814      	ldr	r0, [pc, #80]	; (427a4 <lll_periph_prepare+0x7c>)
   42754:	9400      	str	r4, [sp, #0]
   42756:	2300      	movs	r3, #0
   42758:	f7f5 fea0 	bl	3849c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   4275c:	b108      	cbz	r0, 42762 <lll_periph_prepare+0x3a>
   4275e:	3077      	adds	r0, #119	; 0x77
   42760:	d101      	bne.n	42766 <lll_periph_prepare+0x3e>
}
   42762:	b002      	add	sp, #8
   42764:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   42766:	4a10      	ldr	r2, [pc, #64]	; (427a8 <lll_periph_prepare+0x80>)
   42768:	4910      	ldr	r1, [pc, #64]	; (427ac <lll_periph_prepare+0x84>)
   4276a:	4811      	ldr	r0, [pc, #68]	; (427b0 <lll_periph_prepare+0x88>)
   4276c:	235e      	movs	r3, #94	; 0x5e
   4276e:	f007 f944 	bl	499fa <printk>
   42772:	4040      	eors	r0, r0
   42774:	f380 8811 	msr	BASEPRI, r0
   42778:	f04f 0003 	mov.w	r0, #3
   4277c:	df02      	svc	2
}
   4277e:	b002      	add	sp, #8
   42780:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   42782:	4a09      	ldr	r2, [pc, #36]	; (427a8 <lll_periph_prepare+0x80>)
   42784:	490b      	ldr	r1, [pc, #44]	; (427b4 <lll_periph_prepare+0x8c>)
   42786:	480a      	ldr	r0, [pc, #40]	; (427b0 <lll_periph_prepare+0x88>)
   42788:	234d      	movs	r3, #77	; 0x4d
   4278a:	f007 f936 	bl	499fa <printk>
   4278e:	4040      	eors	r0, r0
   42790:	f380 8811 	msr	BASEPRI, r0
   42794:	f04f 0003 	mov.w	r0, #3
   42798:	df02      	svc	2
   4279a:	e7cc      	b.n	42736 <lll_periph_prepare+0xe>
   4279c:	00042545 	.word	0x00042545
   427a0:	00041dd9 	.word	0x00041dd9
   427a4:	0004056d 	.word	0x0004056d
   427a8:	0005378c 	.word	0x0005378c
   427ac:	000536c0 	.word	0x000536c0
   427b0:	00052a70 	.word	0x00052a70
   427b4:	000535ec 	.word	0x000535ec

000427b8 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   427b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint8_t cte_len;

	DEBUG_RADIO_START_M(1);

	lll = p->param;
   427ba:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   427bc:	89a2      	ldrh	r2, [r4, #12]
   427be:	f64f 73ff 	movw	r3, #65535	; 0xffff
   427c2:	429a      	cmp	r2, r3
{
   427c4:	b085      	sub	sp, #20
	if (unlikely(lll->handle == 0xFFFF)) {
   427c6:	f000 8091 	beq.w	428ec <prepare_cb+0x134>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   427ca:	4605      	mov	r5, r0
   427cc:	f7ff faf0 	bl	41db0 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   427d0:	892b      	ldrh	r3, [r5, #8]
   427d2:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   427d4:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   427d6:	441a      	add	r2, r3
   427d8:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   427da:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   427dc:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   427de:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   427e0:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   427e2:	1c41      	adds	r1, r0, #1
   427e4:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   427e6:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   427e8:	f04f 0100 	mov.w	r1, #0
   427ec:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   427ee:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   427f2:	d45f      	bmi.n	428b4 <prepare_cb+0xfc>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   427f4:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   427f8:	460b      	mov	r3, r1
   427fa:	7fa1      	ldrb	r1, [r4, #30]
   427fc:	9000      	str	r0, [sp, #0]
   427fe:	f104 001f 	add.w	r0, r4, #31
   42802:	f7fc f985 	bl	3eb10 <lll_chan_sel_1>
   42806:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   42808:	4620      	mov	r0, r4
   4280a:	a903      	add	r1, sp, #12
   4280c:	f7ff fbe2 	bl	41fd4 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   42810:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   42814:	9903      	ldr	r1, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   42816:	f3c2 0340 	ubfx	r3, r2, #1, #1
   4281a:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   4281c:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   42820:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   42824:	780a      	ldrb	r2, [r1, #0]
   42826:	f022 020c 	bic.w	r2, r2, #12
   4282a:	4313      	orrs	r3, r2
   4282c:	700b      	strb	r3, [r1, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   4282e:	f000 f99d 	bl	42b6c <radio_reset>
	}

#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   42832:	2000      	movs	r0, #0
   42834:	f000 f9ce 	bl	42bd4 <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   42838:	1d20      	adds	r0, r4, #4
   4283a:	f000 f9e9 	bl	42c10 <radio_aa_set>
   4283e:	8923      	ldrh	r3, [r4, #8]
   42840:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   42842:	f240 605b 	movw	r0, #1627	; 0x65b
   42846:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   4284a:	f000 fa85 	bl	42d58 <radio_crc_configure>
					sys_get_le24(lll->crc_init));
	lll_chan_set(data_chan_use);
   4284e:	4630      	mov	r0, r6
   42850:	f7fd feae 	bl	405b0 <lll_chan_set>

	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   42854:	9903      	ldr	r1, [sp, #12]
   42856:	4620      	mov	r0, r4
   42858:	f7ff fb90 	bl	41f7c <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   4285c:	4621      	mov	r1, r4
   4285e:	4828      	ldr	r0, [pc, #160]	; (42900 <prepare_cb+0x148>)
   42860:	f000 f942 	bl	42ae8 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   42864:	2096      	movs	r0, #150	; 0x96
   42866:	f000 fbc1 	bl	42fec <radio_tmr_tifs_set>
		}
	}
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   4286a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   4286e:	f000 0007 	and.w	r0, r0, #7
   42872:	f000 fa8f 	bl	42d94 <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   42876:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   42878:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   4287a:	4638      	mov	r0, r7
   4287c:	f7fd fe7a 	bl	40574 <lll_event_offset_get>
   42880:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   42882:	686a      	ldr	r2, [r5, #4]
   42884:	f106 0109 	add.w	r1, r6, #9
   42888:	2001      	movs	r0, #1
   4288a:	f000 fbbb 	bl	43004 <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   4288e:	f000 fcb9 	bl	43204 <radio_tmr_end_capture>
#endif /* !HAL_RADIO_GPIO_HAVE_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   42892:	89a1      	ldrh	r1, [r4, #12]
   42894:	3105      	adds	r1, #5
   42896:	4632      	mov	r2, r6
   42898:	b2c9      	uxtb	r1, r1
   4289a:	4638      	mov	r0, r7
   4289c:	f7fd fe78 	bl	40590 <lll_preempt_calc>
   428a0:	b180      	cbz	r0, 428c4 <prepare_cb+0x10c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   428a2:	4818      	ldr	r0, [pc, #96]	; (42904 <prepare_cb+0x14c>)
   428a4:	4621      	mov	r1, r4
   428a6:	f000 f91f 	bl	42ae8 <radio_isr_set>
		radio_disable();
   428aa:	f000 fa17 	bl	42cdc <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   428ae:	2000      	movs	r0, #0
   428b0:	b005      	add	sp, #20
   428b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   428b4:	460a      	mov	r2, r1
   428b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   428ba:	8be1      	ldrh	r1, [r4, #30]
   428bc:	f7fc f974 	bl	3eba8 <lll_chan_sel_2>
   428c0:	4606      	mov	r6, r0
   428c2:	e7a1      	b.n	42808 <prepare_cb+0x50>
		ret = lll_prepare_done(lll);
   428c4:	4620      	mov	r0, r4
   428c6:	f7fd fdef 	bl	404a8 <lll_prepare_done>
		LL_ASSERT(!ret);
   428ca:	2800      	cmp	r0, #0
   428cc:	d0ef      	beq.n	428ae <prepare_cb+0xf6>
   428ce:	4a0e      	ldr	r2, [pc, #56]	; (42908 <prepare_cb+0x150>)
   428d0:	490e      	ldr	r1, [pc, #56]	; (4290c <prepare_cb+0x154>)
   428d2:	480f      	ldr	r0, [pc, #60]	; (42910 <prepare_cb+0x158>)
   428d4:	23fd      	movs	r3, #253	; 0xfd
   428d6:	f007 f890 	bl	499fa <printk>
   428da:	4040      	eors	r0, r0
   428dc:	f380 8811 	msr	BASEPRI, r0
   428e0:	f04f 0003 	mov.w	r0, #3
   428e4:	df02      	svc	2
}
   428e6:	2000      	movs	r0, #0
   428e8:	b005      	add	sp, #20
   428ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(lll_isr_early_abort, lll);
   428ec:	4809      	ldr	r0, [pc, #36]	; (42914 <prepare_cb+0x15c>)
   428ee:	4621      	mov	r1, r4
   428f0:	f000 f8fa 	bl	42ae8 <radio_isr_set>
		radio_disable();
   428f4:	f000 f9f2 	bl	42cdc <radio_disable>
}
   428f8:	2000      	movs	r0, #0
   428fa:	b005      	add	sp, #20
   428fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   428fe:	bf00      	nop
   42900:	00041ec5 	.word	0x00041ec5
   42904:	000406e9 	.word	0x000406e9
   42908:	000537e0 	.word	0x000537e0
   4290c:	00052d4c 	.word	0x00052d4c
   42910:	00052a70 	.word	0x00052a70
   42914:	0004070d 	.word	0x0004070d

00042918 <lll_central_prepare>:
{
   42918:	b510      	push	{r4, lr}
   4291a:	b082      	sub	sp, #8
   4291c:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   4291e:	f7fe f84d 	bl	409bc <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   42922:	2800      	cmp	r0, #0
   42924:	db19      	blt.n	4295a <lll_central_prepare+0x42>
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0,
   42926:	4a13      	ldr	r2, [pc, #76]	; (42974 <lll_central_prepare+0x5c>)
   42928:	4913      	ldr	r1, [pc, #76]	; (42978 <lll_central_prepare+0x60>)
   4292a:	4814      	ldr	r0, [pc, #80]	; (4297c <lll_central_prepare+0x64>)
   4292c:	9400      	str	r4, [sp, #0]
   4292e:	2300      	movs	r3, #0
   42930:	f7f5 fdb4 	bl	3849c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   42934:	b108      	cbz	r0, 4293a <lll_central_prepare+0x22>
   42936:	3077      	adds	r0, #119	; 0x77
   42938:	d101      	bne.n	4293e <lll_central_prepare+0x26>
}
   4293a:	b002      	add	sp, #8
   4293c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   4293e:	4a10      	ldr	r2, [pc, #64]	; (42980 <lll_central_prepare+0x68>)
   42940:	4910      	ldr	r1, [pc, #64]	; (42984 <lll_central_prepare+0x6c>)
   42942:	4811      	ldr	r0, [pc, #68]	; (42988 <lll_central_prepare+0x70>)
   42944:	2351      	movs	r3, #81	; 0x51
   42946:	f007 f858 	bl	499fa <printk>
   4294a:	4040      	eors	r0, r0
   4294c:	f380 8811 	msr	BASEPRI, r0
   42950:	f04f 0003 	mov.w	r0, #3
   42954:	df02      	svc	2
}
   42956:	b002      	add	sp, #8
   42958:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   4295a:	4a09      	ldr	r2, [pc, #36]	; (42980 <lll_central_prepare+0x68>)
   4295c:	490b      	ldr	r1, [pc, #44]	; (4298c <lll_central_prepare+0x74>)
   4295e:	480a      	ldr	r0, [pc, #40]	; (42988 <lll_central_prepare+0x70>)
   42960:	234c      	movs	r3, #76	; 0x4c
   42962:	f007 f84a 	bl	499fa <printk>
   42966:	4040      	eors	r0, r0
   42968:	f380 8811 	msr	BASEPRI, r0
   4296c:	f04f 0003 	mov.w	r0, #3
   42970:	df02      	svc	2
   42972:	e7d8      	b.n	42926 <lll_central_prepare+0xe>
   42974:	000427b9 	.word	0x000427b9
   42978:	00041dd9 	.word	0x00041dd9
   4297c:	0004056d 	.word	0x0004056d
   42980:	000537e0 	.word	0x000537e0
   42984:	000536c0 	.word	0x000536c0
   42988:	00052a70 	.word	0x00052a70
   4298c:	000535ec 	.word	0x000535ec

00042990 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   42990:	4b05      	ldr	r3, [pc, #20]	; (429a8 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   42992:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   42996:	2100      	movs	r1, #0
   42998:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   4299c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   429a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   429a4:	4770      	bx	lr
   429a6:	bf00      	nop
   429a8:	4000b000 	.word	0x4000b000

000429ac <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   429ac:	4b05      	ldr	r3, [pc, #20]	; (429c4 <cntr_start+0x18>)
   429ae:	7818      	ldrb	r0, [r3, #0]
   429b0:	1c42      	adds	r2, r0, #1
   429b2:	701a      	strb	r2, [r3, #0]
   429b4:	b918      	cbnz	r0, 429be <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   429b6:	4b04      	ldr	r3, [pc, #16]	; (429c8 <cntr_start+0x1c>)
   429b8:	2201      	movs	r2, #1
   429ba:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   429bc:	4770      	bx	lr
		return 1;
   429be:	2001      	movs	r0, #1
}
   429c0:	4770      	bx	lr
   429c2:	bf00      	nop
   429c4:	2000741e 	.word	0x2000741e
   429c8:	4000b000 	.word	0x4000b000

000429cc <cntr_stop>:

uint32_t cntr_stop(void)
{
   429cc:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   429ce:	4c0d      	ldr	r4, [pc, #52]	; (42a04 <cntr_stop+0x38>)
   429d0:	7820      	ldrb	r0, [r4, #0]
   429d2:	b148      	cbz	r0, 429e8 <cntr_stop+0x1c>

	if (--_refcount) {
   429d4:	3801      	subs	r0, #1
   429d6:	b2c0      	uxtb	r0, r0
   429d8:	7020      	strb	r0, [r4, #0]
   429da:	b918      	cbnz	r0, 429e4 <cntr_stop+0x18>
   429dc:	4b0a      	ldr	r3, [pc, #40]	; (42a08 <cntr_stop+0x3c>)
   429de:	2201      	movs	r2, #1
   429e0:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   429e2:	bd10      	pop	{r4, pc}
		return 1;
   429e4:	2001      	movs	r0, #1
}
   429e6:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   429e8:	4a08      	ldr	r2, [pc, #32]	; (42a0c <cntr_stop+0x40>)
   429ea:	4909      	ldr	r1, [pc, #36]	; (42a10 <cntr_stop+0x44>)
   429ec:	4809      	ldr	r0, [pc, #36]	; (42a14 <cntr_stop+0x48>)
   429ee:	232d      	movs	r3, #45	; 0x2d
   429f0:	f007 f803 	bl	499fa <printk>
   429f4:	4040      	eors	r0, r0
   429f6:	f380 8811 	msr	BASEPRI, r0
   429fa:	f04f 0003 	mov.w	r0, #3
   429fe:	df02      	svc	2
	if (--_refcount) {
   42a00:	7820      	ldrb	r0, [r4, #0]
   42a02:	e7e7      	b.n	429d4 <cntr_stop+0x8>
   42a04:	2000741e 	.word	0x2000741e
   42a08:	4000b000 	.word	0x4000b000
   42a0c:	00053830 	.word	0x00053830
   42a10:	0005387c 	.word	0x0005387c
   42a14:	00052a70 	.word	0x00052a70

00042a18 <cntr_cnt_get>:
     return p_reg->COUNTER;
   42a18:	4b01      	ldr	r3, [pc, #4]	; (42a20 <cntr_cnt_get+0x8>)
   42a1a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   42a1e:	4770      	bx	lr
   42a20:	4000b000 	.word	0x4000b000

00042a24 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   42a24:	4b02      	ldr	r3, [pc, #8]	; (42a30 <cntr_cmp_set+0xc>)
   42a26:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   42a2a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   42a2e:	4770      	bx	lr
   42a30:	4000b000 	.word	0x4000b000

00042a34 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   42a34:	4b12      	ldr	r3, [pc, #72]	; (42a80 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   42a36:	b430      	push	{r4, r5}
   42a38:	2101      	movs	r1, #1
   42a3a:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   42a3c:	2000      	movs	r0, #0
   42a3e:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   42a40:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   42a44:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   42a48:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   42a4c:	6019      	str	r1, [r3, #0]
}
   42a4e:	e005      	b.n	42a5c <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   42a50:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   42a54:	b932      	cbnz	r2, 42a64 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   42a56:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   42a5a:	b11a      	cbz	r2, 42a64 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   42a5c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   42a60:	2a00      	cmp	r2, #0
   42a62:	d0f5      	beq.n	42a50 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   42a64:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   42a66:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   42a6a:	2a00      	cmp	r2, #0
   42a6c:	d1e7      	bne.n	42a3e <do_ecb+0xa>
   42a6e:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   42a72:	2d00      	cmp	r5, #0
   42a74:	d0e3      	beq.n	42a3e <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   42a76:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   42a78:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   42a7c:	4770      	bx	lr
   42a7e:	bf00      	nop
   42a80:	4000e000 	.word	0x4000e000

00042a84 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   42a84:	b570      	push	{r4, r5, r6, lr}
   42a86:	b08c      	sub	sp, #48	; 0x30
   42a88:	460e      	mov	r6, r1
   42a8a:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   42a8c:	4601      	mov	r1, r0
   42a8e:	2210      	movs	r2, #16
   42a90:	4668      	mov	r0, sp
{
   42a92:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   42a94:	f7f1 fa04 	bl	33ea0 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   42a98:	2210      	movs	r2, #16
   42a9a:	eb0d 0002 	add.w	r0, sp, r2
   42a9e:	4631      	mov	r1, r6
   42aa0:	f7f1 f9fe 	bl	33ea0 <mem_rcopy>

	do_ecb(&ecb);
   42aa4:	4668      	mov	r0, sp
   42aa6:	f7ff ffc5 	bl	42a34 <do_ecb>

	if (cipher_text_le) {
   42aaa:	b125      	cbz	r5, 42ab6 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   42aac:	2210      	movs	r2, #16
   42aae:	a908      	add	r1, sp, #32
   42ab0:	4628      	mov	r0, r5
   42ab2:	f7f1 f9f5 	bl	33ea0 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   42ab6:	b124      	cbz	r4, 42ac2 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   42ab8:	2210      	movs	r2, #16
   42aba:	a908      	add	r1, sp, #32
   42abc:	4620      	mov	r0, r4
   42abe:	f009 f8cb 	bl	4bc58 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   42ac2:	b00c      	add	sp, #48	; 0x30
   42ac4:	bd70      	pop	{r4, r5, r6, pc}
   42ac6:	bf00      	nop

00042ac8 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   42ac8:	4b04      	ldr	r3, [pc, #16]	; (42adc <isr_radio+0x14>)
   42aca:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   42ace:	b123      	cbz	r3, 42ada <isr_radio+0x12>
		isr_cb(isr_cb_param);
   42ad0:	4a03      	ldr	r2, [pc, #12]	; (42ae0 <isr_radio+0x18>)
   42ad2:	4b04      	ldr	r3, [pc, #16]	; (42ae4 <isr_radio+0x1c>)
   42ad4:	6810      	ldr	r0, [r2, #0]
   42ad6:	681b      	ldr	r3, [r3, #0]
   42ad8:	4718      	bx	r3
}
   42ada:	4770      	bx	lr
   42adc:	40001000 	.word	0x40001000
   42ae0:	20006420 	.word	0x20006420
   42ae4:	20006424 	.word	0x20006424

00042ae8 <radio_isr_set>:
{
   42ae8:	b538      	push	{r3, r4, r5, lr}
   42aea:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   42aec:	2001      	movs	r0, #1
{
   42aee:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   42af0:	f7ea f86a 	bl	2cbc8 <arch_irq_disable>
	isr_cb = cb;
   42af4:	4b08      	ldr	r3, [pc, #32]	; (42b18 <radio_isr_set+0x30>)
	isr_cb_param = param;
   42af6:	4a09      	ldr	r2, [pc, #36]	; (42b1c <radio_isr_set+0x34>)
	isr_cb = cb;
   42af8:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   42afa:	4909      	ldr	r1, [pc, #36]	; (42b20 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   42afc:	4b09      	ldr	r3, [pc, #36]	; (42b24 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   42afe:	6015      	str	r5, [r2, #0]
   42b00:	2010      	movs	r0, #16
   42b02:	2202      	movs	r2, #2
   42b04:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   42b08:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   42b0c:	2001      	movs	r0, #1
}
   42b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   42b12:	f7ea b84b 	b.w	2cbac <arch_irq_enable>
   42b16:	bf00      	nop
   42b18:	20006424 	.word	0x20006424
   42b1c:	20006420 	.word	0x20006420
   42b20:	40001000 	.word	0x40001000
   42b24:	e000e100 	.word	0xe000e100

00042b28 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   42b28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   42b2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   42b30:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   42b32:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   42b36:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   42b3a:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   42b3e:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   42b42:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   42b46:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   42b4a:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   42b4e:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   42b52:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   42b56:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   42b5a:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   42b5e:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   42b62:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   42b66:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   42b6a:	4770      	bx	lr

00042b6c <radio_reset>:
{
   42b6c:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   42b6e:	2001      	movs	r0, #1
   42b70:	f7ea f82a 	bl	2cbc8 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   42b74:	4a0d      	ldr	r2, [pc, #52]	; (42bac <radio_reset+0x40>)
   42b76:	2100      	movs	r1, #0
   42b78:	2301      	movs	r3, #1
   42b7a:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   42b7e:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   42b82:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   42b86:	490a      	ldr	r1, [pc, #40]	; (42bb0 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   42b88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   42b8c:	f023 0301 	bic.w	r3, r3, #1
   42b90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   42b94:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   42b98:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   42b9c:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   42ba0:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   42ba4:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   42ba8:	bd10      	pop	{r4, pc}
   42baa:	bf00      	nop
   42bac:	40001000 	.word	0x40001000
   42bb0:	4001f000 	.word	0x4001f000

00042bb4 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   42bb4:	4b06      	ldr	r3, [pc, #24]	; (42bd0 <radio_phy_set+0x1c>)
	uint32_t mode;

	switch (phy) {
	case BIT(0):
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   42bb6:	2802      	cmp	r0, #2
   42bb8:	bf0c      	ite	eq
   42bba:	2204      	moveq	r2, #4
   42bbc:	2203      	movne	r2, #3
   42bbe:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   42bc2:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   42bc6:	f042 0201 	orr.w	r2, r2, #1
   42bca:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   42bce:	4770      	bx	lr
   42bd0:	40001000 	.word	0x40001000

00042bd4 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   42bd4:	4b01      	ldr	r3, [pc, #4]	; (42bdc <radio_tx_power_set+0x8>)
   42bd6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   42bda:	4770      	bx	lr
   42bdc:	40001000 	.word	0x40001000

00042be0 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   42be0:	4b01      	ldr	r3, [pc, #4]	; (42be8 <radio_freq_chan_set+0x8>)
   42be2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   42be6:	4770      	bx	lr
   42be8:	40001000 	.word	0x40001000

00042bec <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   42bec:	4b07      	ldr	r3, [pc, #28]	; (42c0c <radio_whiten_iv_set+0x20>)
   42bee:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   42bf2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   42bf6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   42bfa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   42bfe:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   42c02:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   42c06:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   42c0a:	4770      	bx	lr
   42c0c:	40001000 	.word	0x40001000

00042c10 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   42c10:	4a0a      	ldr	r2, [pc, #40]	; (42c3c <radio_aa_set+0x2c>)
   42c12:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   42c14:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   42c16:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   42c1a:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   42c1e:	78c3      	ldrb	r3, [r0, #3]
   42c20:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   42c24:	7843      	ldrb	r3, [r0, #1]
   42c26:	f890 c002 	ldrb.w	ip, [r0, #2]
   42c2a:	7801      	ldrb	r1, [r0, #0]
   42c2c:	041b      	lsls	r3, r3, #16
   42c2e:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   42c32:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   42c36:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   42c3a:	4770      	bx	lr
   42c3c:	40001000 	.word	0x40001000

00042c40 <radio_pkt_configure>:
	switch (phy) {
   42c40:	f3c2 0342 	ubfx	r3, r2, #1, #3
   42c44:	f1a3 0302 	sub.w	r3, r3, #2
   42c48:	fab3 f383 	clz	r3, r3
   42c4c:	095b      	lsrs	r3, r3, #5
   42c4e:	061b      	lsls	r3, r3, #24
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   42c50:	07d2      	lsls	r2, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   42c52:	bf48      	it	mi
   42c54:	f443 1380 	orrmi.w	r3, r3, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   42c58:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   42c5c:	4a09      	ldr	r2, [pc, #36]	; (42c84 <radio_pkt_configure+0x44>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   42c5e:	4318      	orrs	r0, r3
   42c60:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   42c64:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   42c68:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   42c6c:	4b06      	ldr	r3, [pc, #24]	; (42c88 <radio_pkt_configure+0x48>)
   42c6e:	4003      	ands	r3, r0
   42c70:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   42c74:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   42c78:	4319      	orrs	r1, r3
   42c7a:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   42c7e:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   42c82:	4770      	bx	lr
   42c84:	40001000 	.word	0x40001000
   42c88:	fef80000 	.word	0xfef80000

00042c8c <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   42c8c:	4b01      	ldr	r3, [pc, #4]	; (42c94 <radio_pkt_rx_set+0x8>)
   42c8e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   42c92:	4770      	bx	lr
   42c94:	40001000 	.word	0x40001000

00042c98 <radio_pkt_tx_set>:
void radio_pkt_tx_set(void *tx_packet)
   42c98:	4b01      	ldr	r3, [pc, #4]	; (42ca0 <radio_pkt_tx_set+0x8>)
   42c9a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   42c9e:	4770      	bx	lr
   42ca0:	40001000 	.word	0x40001000

00042ca4 <radio_tx_ready_delay_get>:
static inline uint32_t hal_radio_tx_ready_delay_us_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_US;
   42ca4:	2802      	cmp	r0, #2
}
   42ca6:	bf0c      	ite	eq
   42ca8:	2028      	moveq	r0, #40	; 0x28
   42caa:	2029      	movne	r0, #41	; 0x29
   42cac:	4770      	bx	lr
   42cae:	bf00      	nop

00042cb0 <radio_tx_chain_delay_get>:
}
   42cb0:	2001      	movs	r0, #1
   42cb2:	4770      	bx	lr

00042cb4 <radio_rx_ready_delay_get>:
}
   42cb4:	2029      	movs	r0, #41	; 0x29
   42cb6:	4770      	bx	lr

00042cb8 <radio_rx_chain_delay_get>:
static inline uint32_t hal_radio_rx_chain_delay_us_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
   42cb8:	2802      	cmp	r0, #2
}
   42cba:	bf0c      	ite	eq
   42cbc:	2005      	moveq	r0, #5
   42cbe:	200a      	movne	r0, #10
   42cc0:	4770      	bx	lr
   42cc2:	bf00      	nop

00042cc4 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   42cc4:	4b01      	ldr	r3, [pc, #4]	; (42ccc <radio_rx_enable+0x8>)
   42cc6:	2201      	movs	r2, #1
   42cc8:	605a      	str	r2, [r3, #4]
}
   42cca:	4770      	bx	lr
   42ccc:	40001000 	.word	0x40001000

00042cd0 <radio_tx_enable>:
   42cd0:	4b01      	ldr	r3, [pc, #4]	; (42cd8 <radio_tx_enable+0x8>)
   42cd2:	2201      	movs	r2, #1
   42cd4:	601a      	str	r2, [r3, #0]
}
   42cd6:	4770      	bx	lr
   42cd8:	40001000 	.word	0x40001000

00042cdc <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   42cdc:	4a07      	ldr	r2, [pc, #28]	; (42cfc <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   42cde:	4908      	ldr	r1, [pc, #32]	; (42d00 <radio_disable+0x24>)
{
   42ce0:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   42ce2:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   42ce4:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   42ce8:	2000      	movs	r0, #0
   42cea:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   42cee:	6053      	str	r3, [r2, #4]
}
   42cf0:	bc10      	pop	{r4}
   42cf2:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   42cf4:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   42cf8:	610b      	str	r3, [r1, #16]
}
   42cfa:	4770      	bx	lr
   42cfc:	4001f000 	.word	0x4001f000
   42d00:	40001000 	.word	0x40001000

00042d04 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   42d04:	4b04      	ldr	r3, [pc, #16]	; (42d18 <radio_status_reset+0x14>)
   42d06:	2200      	movs	r2, #0
   42d08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   42d0c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   42d10:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   42d14:	4770      	bx	lr
   42d16:	bf00      	nop
   42d18:	40001000 	.word	0x40001000

00042d1c <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   42d1c:	4b03      	ldr	r3, [pc, #12]	; (42d2c <radio_is_ready+0x10>)
   42d1e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   42d22:	3800      	subs	r0, #0
   42d24:	bf18      	it	ne
   42d26:	2001      	movne	r0, #1
   42d28:	4770      	bx	lr
   42d2a:	bf00      	nop
   42d2c:	40001000 	.word	0x40001000

00042d30 <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   42d30:	4b03      	ldr	r3, [pc, #12]	; (42d40 <radio_is_done+0x10>)
   42d32:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   42d36:	3800      	subs	r0, #0
   42d38:	bf18      	it	ne
   42d3a:	2001      	movne	r0, #1
   42d3c:	4770      	bx	lr
   42d3e:	bf00      	nop
   42d40:	40001000 	.word	0x40001000

00042d44 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   42d44:	4b03      	ldr	r3, [pc, #12]	; (42d54 <radio_is_idle+0x10>)
   42d46:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   42d4a:	fab0 f080 	clz	r0, r0
   42d4e:	0940      	lsrs	r0, r0, #5
   42d50:	4770      	bx	lr
   42d52:	bf00      	nop
   42d54:	40001000 	.word	0x40001000

00042d58 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   42d58:	4b04      	ldr	r3, [pc, #16]	; (42d6c <radio_crc_configure+0x14>)
   42d5a:	f240 1203 	movw	r2, #259	; 0x103
   42d5e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   42d62:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   42d66:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   42d6a:	4770      	bx	lr
   42d6c:	40001000 	.word	0x40001000

00042d70 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   42d70:	4b03      	ldr	r3, [pc, #12]	; (42d80 <radio_crc_is_valid+0x10>)
   42d72:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   42d76:	3800      	subs	r0, #0
   42d78:	bf18      	it	ne
   42d7a:	2001      	movne	r0, #1
   42d7c:	4770      	bx	lr
   42d7e:	bf00      	nop
   42d80:	40001000 	.word	0x40001000

00042d84 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   42d84:	4800      	ldr	r0, [pc, #0]	; (42d88 <radio_pkt_empty_get+0x4>)
   42d86:	4770      	bx	lr
   42d88:	2000641c 	.word	0x2000641c

00042d8c <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   42d8c:	4800      	ldr	r0, [pc, #0]	; (42d90 <radio_pkt_scratch_get+0x4>)
   42d8e:	4770      	bx	lr
   42d90:	20006318 	.word	0x20006318

00042d94 <radio_switch_complete_and_rx>:
	sw_tifs_toggle &= 1U;
}
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(uint8_t phy_rx)
{
   42d94:	b4f0      	push	{r4, r5, r6, r7}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   42d96:	4b1d      	ldr	r3, [pc, #116]	; (42e0c <radio_switch_complete_and_rx+0x78>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   42d98:	4d1d      	ldr	r5, [pc, #116]	; (42e10 <radio_switch_complete_and_rx+0x7c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42d9a:	4e1e      	ldr	r6, [pc, #120]	; (42e14 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   42d9c:	4c1e      	ldr	r4, [pc, #120]	; (42e18 <radio_switch_complete_and_rx+0x84>)
   42d9e:	4f1f      	ldr	r7, [pc, #124]	; (42e1c <radio_switch_complete_and_rx+0x88>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   42da0:	2203      	movs	r2, #3
   42da2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   42da6:	782a      	ldrb	r2, [r5, #0]
   42da8:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   42dac:	f102 030c 	add.w	r3, r2, #12
   42db0:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   42db2:	00d0      	lsls	r0, r2, #3
   42db4:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   42db6:	0091      	lsls	r1, r2, #2
   42db8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   42dbc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   42dc0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   42dc4:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42dc8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   42dcc:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   42dd0:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   42dd4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42dd8:	4811      	ldr	r0, [pc, #68]	; (42e20 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42dda:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42dde:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   42de2:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   42de6:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   42de8:	bf8a      	itet	hi
   42dea:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   42dee:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   42df0:	3b2d      	subhi	r3, #45	; 0x2d
   42df2:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   42df6:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   42df8:	4b06      	ldr	r3, [pc, #24]	; (42e14 <radio_switch_complete_and_rx+0x80>)
   42dfa:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   42dfe:	f002 0201 	and.w	r2, r2, #1
   42e02:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   42e06:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   42e08:	bcf0      	pop	{r4, r5, r6, r7}
   42e0a:	4770      	bx	lr
   42e0c:	40001000 	.word	0x40001000
   42e10:	2000741f 	.word	0x2000741f
   42e14:	4001f000 	.word	0x4001f000
   42e18:	40009140 	.word	0x40009140
   42e1c:	4000110c 	.word	0x4000110c
   42e20:	40001004 	.word	0x40001004

00042e24 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   42e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   42e28:	4e28      	ldr	r6, [pc, #160]	; (42ecc <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   42e2a:	4c29      	ldr	r4, [pc, #164]	; (42ed0 <radio_switch_complete_and_tx+0xac>)
   42e2c:	4f29      	ldr	r7, [pc, #164]	; (42ed4 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42e2e:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 42ed8 <radio_switch_complete_and_tx+0xb4>
   42e32:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 42edc <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   42e36:	2303      	movs	r3, #3
   42e38:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   42e3c:	7821      	ldrb	r1, [r4, #0]
   42e3e:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   42e42:	f101 030c 	add.w	r3, r1, #12
   42e46:	b2db      	uxtb	r3, r3
   42e48:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   42e4a:	00cd      	lsls	r5, r1, #3
   42e4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   42e50:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   42e54:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   42e58:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   42e5c:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42e60:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42e64:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   42e68:	f24a 15b8 	movw	r5, #41400	; 0xa1b8
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42e6c:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   42e70:	f649 6334 	movw	r3, #40500	; 0x9e34
   42e74:	2a02      	cmp	r2, #2
   42e76:	bf18      	it	ne
   42e78:	462b      	movne	r3, r5
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   42e7a:	ea4f 0c81 	mov.w	ip, r1, lsl #2
static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
   42e7e:	f241 3288 	movw	r2, #5000	; 0x1388
   42e82:	f242 45b8 	movw	r5, #9400	; 0x24b8
   42e86:	2802      	cmp	r0, #2
   42e88:	bf18      	it	ne
   42e8a:	462a      	movne	r2, r5
   42e8c:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   42e90:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   42e94:	4413      	add	r3, r2
   42e96:	4a12      	ldr	r2, [pc, #72]	; (42ee0 <radio_switch_complete_and_tx+0xbc>)
   42e98:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   42e9c:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   42ea0:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   42ea4:	bf85      	ittet	hi
   42ea6:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   42ea8:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   42eac:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   42eae:	1a1b      	subhi	r3, r3, r0
   42eb0:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   42eb4:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   42eb6:	4b08      	ldr	r3, [pc, #32]	; (42ed8 <radio_switch_complete_and_tx+0xb4>)
   42eb8:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   42ebc:	f001 0101 	and.w	r1, r1, #1
   42ec0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   42ec4:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   42ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   42eca:	bf00      	nop
   42ecc:	40001000 	.word	0x40001000
   42ed0:	2000741f 	.word	0x2000741f
   42ed4:	40009140 	.word	0x40009140
   42ed8:	4001f000 	.word	0x4001f000
   42edc:	4000110c 	.word	0x4000110c
   42ee0:	10624dd3 	.word	0x10624dd3

00042ee4 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   42ee4:	4904      	ldr	r1, [pc, #16]	; (42ef8 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   42ee6:	4b05      	ldr	r3, [pc, #20]	; (42efc <radio_switch_complete_and_disable+0x18>)
   42ee8:	2003      	movs	r0, #3
   42eea:	f44f 6210 	mov.w	r2, #2304	; 0x900
   42eee:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   42ef2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   42ef6:	4770      	bx	lr
   42ef8:	40001000 	.word	0x40001000
   42efc:	4001f000 	.word	0x4001f000

00042f00 <radio_phy_flags_rx_get>:
	return 0;
#endif /* !CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#else /* !CONFIG_BT_CTLR_PHY_CODED */
	return 0;
#endif /* !CONFIG_BT_CTLR_PHY_CODED */
}
   42f00:	2000      	movs	r0, #0
   42f02:	4770      	bx	lr

00042f04 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   42f04:	4a03      	ldr	r2, [pc, #12]	; (42f14 <radio_rssi_measure+0x10>)
   42f06:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   42f0a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   42f0e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   42f12:	4770      	bx	lr
   42f14:	40001000 	.word	0x40001000

00042f18 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   42f18:	4b01      	ldr	r3, [pc, #4]	; (42f20 <radio_rssi_get+0x8>)
   42f1a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   42f1e:	4770      	bx	lr
   42f20:	40001000 	.word	0x40001000

00042f24 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   42f24:	4b02      	ldr	r3, [pc, #8]	; (42f30 <radio_rssi_status_reset+0xc>)
   42f26:	2200      	movs	r2, #0
   42f28:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   42f2c:	4770      	bx	lr
   42f2e:	bf00      	nop
   42f30:	40001000 	.word	0x40001000

00042f34 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   42f34:	4b03      	ldr	r3, [pc, #12]	; (42f44 <radio_rssi_is_ready+0x10>)
   42f36:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   42f3a:	3800      	subs	r0, #0
   42f3c:	bf18      	it	ne
   42f3e:	2001      	movne	r0, #1
   42f40:	4770      	bx	lr
   42f42:	bf00      	nop
   42f44:	40001000 	.word	0x40001000

00042f48 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   42f48:	b410      	push	{r4}
   42f4a:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   42f4e:	ea4f 038c 	mov.w	r3, ip, lsl #2
   42f52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   42f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   42f5a:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   42f5c:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   42f60:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   42f64:	8894      	ldrh	r4, [r2, #4]
   42f66:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   42f6a:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   42f6e:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   42f72:	d1ec      	bne.n	42f4e <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   42f74:	4b03      	ldr	r3, [pc, #12]	; (42f84 <radio_filter_configure+0x3c>)
}
   42f76:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   42f78:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   42f7c:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   42f80:	4770      	bx	lr
   42f82:	bf00      	nop
   42f84:	40001000 	.word	0x40001000

00042f88 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   42f88:	4a03      	ldr	r2, [pc, #12]	; (42f98 <radio_filter_disable+0x10>)
   42f8a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   42f8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   42f92:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   42f96:	4770      	bx	lr
   42f98:	40001000 	.word	0x40001000

00042f9c <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   42f9c:	4b02      	ldr	r3, [pc, #8]	; (42fa8 <radio_filter_status_reset+0xc>)
   42f9e:	2200      	movs	r2, #0
   42fa0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   42fa4:	4770      	bx	lr
   42fa6:	bf00      	nop
   42fa8:	40001000 	.word	0x40001000

00042fac <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   42fac:	4b03      	ldr	r3, [pc, #12]	; (42fbc <radio_filter_has_match+0x10>)
   42fae:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   42fb2:	3800      	subs	r0, #0
   42fb4:	bf18      	it	ne
   42fb6:	2001      	movne	r0, #1
   42fb8:	4770      	bx	lr
   42fba:	bf00      	nop
   42fbc:	40001000 	.word	0x40001000

00042fc0 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   42fc0:	4b01      	ldr	r3, [pc, #4]	; (42fc8 <radio_filter_match_get+0x8>)
   42fc2:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   42fc6:	4770      	bx	lr
   42fc8:	40001000 	.word	0x40001000

00042fcc <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   42fcc:	4904      	ldr	r1, [pc, #16]	; (42fe0 <radio_tmr_status_reset+0x14>)
   42fce:	4b05      	ldr	r3, [pc, #20]	; (42fe4 <radio_tmr_status_reset+0x18>)
   42fd0:	4a05      	ldr	r2, [pc, #20]	; (42fe8 <radio_tmr_status_reset+0x1c>)
   42fd2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   42fd6:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   42fda:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   42fde:	4770      	bx	lr
   42fe0:	4000b000 	.word	0x4000b000
   42fe4:	4001f000 	.word	0x4001f000
   42fe8:	0e7000c0 	.word	0x0e7000c0

00042fec <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   42fec:	4b03      	ldr	r3, [pc, #12]	; (42ffc <radio_tmr_tifs_set+0x10>)
   42fee:	4a04      	ldr	r2, [pc, #16]	; (43000 <radio_tmr_tifs_set+0x14>)
   42ff0:	781b      	ldrb	r3, [r3, #0]
   42ff2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   42ff6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   42ffa:	4770      	bx	lr
   42ffc:	2000741f 	.word	0x2000741f
   43000:	40009000 	.word	0x40009000

00043004 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   43004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   43008:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   4300c:	4d31      	ldr	r5, [pc, #196]	; (430d4 <radio_tmr_start+0xd0>)
   4300e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   43012:	42ab      	cmp	r3, r5
{
   43014:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   43016:	d906      	bls.n	43026 <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   43018:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   4301c:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   43020:	3901      	subs	r1, #1
		remainder += 30517578UL;
   43022:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43026:	4b2c      	ldr	r3, [pc, #176]	; (430d8 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   43028:	482c      	ldr	r0, [pc, #176]	; (430dc <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   4302a:	4d2d      	ldr	r5, [pc, #180]	; (430e0 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   4302c:	4e2d      	ldr	r6, [pc, #180]	; (430e4 <radio_tmr_start+0xe0>)
   4302e:	2701      	movs	r7, #1
   43030:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   43032:	2700      	movs	r7, #0
   43034:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   43038:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   4303c:	2704      	movs	r7, #4
   4303e:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   43042:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   43044:	2702      	movs	r7, #2
   43046:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   4304a:	4a27      	ldr	r2, [pc, #156]	; (430e8 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   4304c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   43050:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   43054:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   43058:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   4305c:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   4305e:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43062:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   43066:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   4306a:	b364      	cbz	r4, 430c6 <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   4306c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   43070:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   43074:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   43078:	4b1b      	ldr	r3, [pc, #108]	; (430e8 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4307a:	4a1c      	ldr	r2, [pc, #112]	; (430ec <radio_tmr_start+0xe8>)
   4307c:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   43080:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   43082:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43084:	f8df 8068 	ldr.w	r8, [pc, #104]	; 430f0 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43088:	f8df e068 	ldr.w	lr, [pc, #104]	; 430f4 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   4308c:	f8df c068 	ldr.w	ip, [pc, #104]	; 430f8 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43090:	4f1a      	ldr	r7, [pc, #104]	; (430fc <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43092:	4e1b      	ldr	r6, [pc, #108]	; (43100 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43094:	4d1b      	ldr	r5, [pc, #108]	; (43104 <radio_tmr_start+0x100>)
   43096:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   43098:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   4309c:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   430a0:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   430a4:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   430a8:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   430aa:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   430ae:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   430b2:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   430b6:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   430ba:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   430be:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   430c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   430c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   430ca:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   430ce:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   430d2:	e7d1      	b.n	43078 <radio_tmr_start+0x74>
   430d4:	7ff0bdbf 	.word	0x7ff0bdbf
   430d8:	40008000 	.word	0x40008000
   430dc:	431bde83 	.word	0x431bde83
   430e0:	4000b000 	.word	0x4000b000
   430e4:	4000b148 	.word	0x4000b148
   430e8:	4001f000 	.word	0x4001f000
   430ec:	40009000 	.word	0x40009000
   430f0:	4000110c 	.word	0x4000110c
   430f4:	4000900c 	.word	0x4000900c
   430f8:	40009140 	.word	0x40009140
   430fc:	4001f004 	.word	0x4001f004
   43100:	40009144 	.word	0x40009144
   43104:	4001f00c 	.word	0x4001f00c

00043108 <radio_tmr_start_tick>:
   43108:	4a15      	ldr	r2, [pc, #84]	; (43160 <radio_tmr_start_tick+0x58>)

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   4310a:	b430      	push	{r4, r5}
   4310c:	2301      	movs	r3, #1
    p_reg->CC[ch] = cc_val;
   4310e:	4c15      	ldr	r4, [pc, #84]	; (43164 <radio_tmr_start_tick+0x5c>)
   43110:	6053      	str	r3, [r2, #4]
    p_reg->EVTENSET = mask;
   43112:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   43116:	60d3      	str	r3, [r2, #12]
    p_reg->CC[cc_channel] = cc_value;
   43118:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].EEP = eep;
   4311c:	4b12      	ldr	r3, [pc, #72]	; (43168 <radio_tmr_start_tick+0x60>)
    p_reg->CC[ch] = cc_val;
   4311e:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   43122:	f8c4 5344 	str.w	r5, [r4, #836]	; 0x344
    p_reg->CHENSET = mask;
   43126:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43128:	f504 74a4 	add.w	r4, r4, #328	; 0x148
   4312c:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43130:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   43134:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   43138:	b158      	cbz	r0, 43152 <radio_tmr_start_tick+0x4a>
    p_reg->CHENCLR = mask;
   4313a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   4313e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   43142:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   43146:	4b08      	ldr	r3, [pc, #32]	; (43168 <radio_tmr_start_tick+0x60>)
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   43148:	2001      	movs	r0, #1
   4314a:	bc30      	pop	{r4, r5}
   4314c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   43150:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   43152:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   43156:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   4315a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   4315e:	e7f2      	b.n	43146 <radio_tmr_start_tick+0x3e>
   43160:	40008000 	.word	0x40008000
   43164:	4000b000 	.word	0x4000b000
   43168:	4001f000 	.word	0x4001f000

0004316c <radio_tmr_start_get>:
    return p_reg->CC[ch];
   4316c:	4b01      	ldr	r3, [pc, #4]	; (43174 <radio_tmr_start_get+0x8>)
   4316e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   43172:	4770      	bx	lr
   43174:	4000b000 	.word	0x4000b000

00043178 <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43178:	4903      	ldr	r1, [pc, #12]	; (43188 <radio_tmr_stop+0x10>)
   4317a:	4a04      	ldr	r2, [pc, #16]	; (4318c <radio_tmr_stop+0x14>)
   4317c:	2301      	movs	r3, #1
   4317e:	604b      	str	r3, [r1, #4]
   43180:	610b      	str	r3, [r1, #16]
   43182:	6053      	str	r3, [r2, #4]
   43184:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   43186:	4770      	bx	lr
   43188:	40008000 	.word	0x40008000
   4318c:	40009000 	.word	0x40009000

00043190 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   43190:	4904      	ldr	r1, [pc, #16]	; (431a4 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   43192:	4b05      	ldr	r3, [pc, #20]	; (431a8 <radio_tmr_hcto_configure+0x18>)
   43194:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   43198:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   4319c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   431a0:	4770      	bx	lr
   431a2:	bf00      	nop
   431a4:	40008000 	.word	0x40008000
   431a8:	4001f000 	.word	0x4001f000

000431ac <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   431ac:	4b05      	ldr	r3, [pc, #20]	; (431c4 <radio_tmr_aa_capture+0x18>)
   431ae:	4806      	ldr	r0, [pc, #24]	; (431c8 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   431b0:	4906      	ldr	r1, [pc, #24]	; (431cc <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   431b2:	4a07      	ldr	r2, [pc, #28]	; (431d0 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   431b4:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   431b8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   431bc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   431c0:	4770      	bx	lr
   431c2:	bf00      	nop
   431c4:	4001f000 	.word	0x4001f000
   431c8:	40001100 	.word	0x40001100
   431cc:	40008040 	.word	0x40008040
   431d0:	04000080 	.word	0x04000080

000431d4 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   431d4:	4b01      	ldr	r3, [pc, #4]	; (431dc <radio_tmr_aa_get+0x8>)
   431d6:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   431da:	4770      	bx	lr
   431dc:	40008000 	.word	0x40008000

000431e0 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   431e0:	4b01      	ldr	r3, [pc, #4]	; (431e8 <radio_tmr_aa_save+0x8>)
   431e2:	6018      	str	r0, [r3, #0]
}
   431e4:	4770      	bx	lr
   431e6:	bf00      	nop
   431e8:	20006314 	.word	0x20006314

000431ec <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   431ec:	4b01      	ldr	r3, [pc, #4]	; (431f4 <radio_tmr_aa_restore+0x8>)
}
   431ee:	6818      	ldr	r0, [r3, #0]
   431f0:	4770      	bx	lr
   431f2:	bf00      	nop
   431f4:	20006314 	.word	0x20006314

000431f8 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   431f8:	4b01      	ldr	r3, [pc, #4]	; (43200 <radio_tmr_ready_get+0x8>)
   431fa:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   431fe:	4770      	bx	lr
   43200:	40008000 	.word	0x40008000

00043204 <radio_tmr_end_capture>:
   43204:	4b02      	ldr	r3, [pc, #8]	; (43210 <radio_tmr_end_capture+0xc>)
   43206:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   4320a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   4320e:	4770      	bx	lr
   43210:	4001f000 	.word	0x4001f000

00043214 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   43214:	4b01      	ldr	r3, [pc, #4]	; (4321c <radio_tmr_end_get+0x8>)
   43216:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   4321a:	4770      	bx	lr
   4321c:	40008000 	.word	0x40008000

00043220 <radio_tmr_tifs_base_get>:

uint32_t radio_tmr_tifs_base_get(void)
   43220:	4b01      	ldr	r3, [pc, #4]	; (43228 <radio_tmr_tifs_base_get+0x8>)
   43222:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   43226:	4770      	bx	lr
   43228:	40008000 	.word	0x40008000

0004322c <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   4322c:	4b17      	ldr	r3, [pc, #92]	; (4328c <radio_ccm_rx_pkt_set+0x60>)
{
   4322e:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   43230:	2400      	movs	r4, #0
{
   43232:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   43234:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   43236:	4816      	ldr	r0, [pc, #88]	; (43290 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   43238:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   4323c:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   43240:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   43244:	4e13      	ldr	r6, [pc, #76]	; (43294 <radio_ccm_rx_pkt_set+0x68>)
   43246:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   43248:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   4324c:	4812      	ldr	r0, [pc, #72]	; (43298 <radio_ccm_rx_pkt_set+0x6c>)
   4324e:	2902      	cmp	r1, #2
   43250:	bf18      	it	ne
   43252:	4630      	movne	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   43254:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   43258:	4810      	ldr	r0, [pc, #64]	; (4329c <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   4325a:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   4325e:	4910      	ldr	r1, [pc, #64]	; (432a0 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   43260:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   43264:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   43268:	4a0e      	ldr	r2, [pc, #56]	; (432a4 <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   4326a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   4326e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   43272:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   43276:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   4327a:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   4327e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43282:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   43284:	bc70      	pop	{r4, r5, r6}
   43286:	601a      	str	r2, [r3, #0]
   43288:	4770      	bx	lr
   4328a:	bf00      	nop
   4328c:	4000f000 	.word	0x4000f000
   43290:	40001000 	.word	0x40001000
   43294:	01000001 	.word	0x01000001
   43298:	01010001 	.word	0x01010001
   4329c:	20006318 	.word	0x20006318
   432a0:	20006208 	.word	0x20006208
   432a4:	4001f000 	.word	0x4001f000

000432a8 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   432a8:	4b0f      	ldr	r3, [pc, #60]	; (432e8 <radio_ccm_tx_pkt_set+0x40>)
{
   432aa:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   432ac:	2200      	movs	r2, #0
{
   432ae:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   432b0:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   432b2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   432b6:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   432ba:	480c      	ldr	r0, [pc, #48]	; (432ec <radio_ccm_tx_pkt_set+0x44>)
   432bc:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   432c0:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   432c4:	480a      	ldr	r0, [pc, #40]	; (432f0 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   432c6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   432ca:	4c0a      	ldr	r4, [pc, #40]	; (432f4 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   432cc:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   432d0:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   432d2:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   432d6:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   432da:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   432dc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   432e0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   432e4:	6019      	str	r1, [r3, #0]
}
   432e6:	4770      	bx	lr
   432e8:	4000f000 	.word	0x4000f000
   432ec:	01010000 	.word	0x01010000
   432f0:	20006318 	.word	0x20006318
   432f4:	20006208 	.word	0x20006208

000432f8 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   432f8:	4a0e      	ldr	r2, [pc, #56]	; (43334 <radio_ccm_is_done+0x3c>)
   432fa:	2302      	movs	r3, #2
   432fc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   43300:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   43304:	b933      	cbnz	r3, 43314 <radio_ccm_is_done+0x1c>
		__WFE();
   43306:	bf20      	wfe
		__SEV();
   43308:	bf40      	sev
		__WFE();
   4330a:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   4330c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   43310:	2b00      	cmp	r3, #0
   43312:	d0f8      	beq.n	43306 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   43314:	4b07      	ldr	r3, [pc, #28]	; (43334 <radio_ccm_is_done+0x3c>)
   43316:	4a08      	ldr	r2, [pc, #32]	; (43338 <radio_ccm_is_done+0x40>)
   43318:	2002      	movs	r0, #2
   4331a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   4331e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   43322:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   43326:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   4332a:	fab0 f080 	clz	r0, r0
   4332e:	0940      	lsrs	r0, r0, #5
   43330:	4770      	bx	lr
   43332:	bf00      	nop
   43334:	4000f000 	.word	0x4000f000
   43338:	e000e100 	.word	0xe000e100

0004333c <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   4333c:	4b03      	ldr	r3, [pc, #12]	; (4334c <radio_ccm_mic_is_valid+0x10>)
   4333e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   43342:	3800      	subs	r0, #0
   43344:	bf18      	it	ne
   43346:	2001      	movne	r0, #1
   43348:	4770      	bx	lr
   4334a:	bf00      	nop
   4334c:	4000f000 	.word	0x4000f000

00043350 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   43350:	4a15      	ldr	r2, [pc, #84]	; (433a8 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   43352:	4b16      	ldr	r3, [pc, #88]	; (433ac <radio_ar_configure+0x5c>)
{
   43354:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   43356:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   4335a:	4e15      	ldr	r6, [pc, #84]	; (433b0 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   4335c:	2703      	movs	r7, #3
   4335e:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   43362:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   43364:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   43368:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   4336a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   4336e:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   43370:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   43374:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   43378:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   4337c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   43380:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   43384:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   43388:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   4338c:	4909      	ldr	r1, [pc, #36]	; (433b4 <radio_ar_configure+0x64>)
   4338e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   43392:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   43396:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   4339a:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   4339e:	bcf0      	pop	{r4, r5, r6, r7}
   433a0:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   433a4:	4770      	bx	lr
   433a6:	bf00      	nop
   433a8:	40001000 	.word	0x40001000
   433ac:	4000f000 	.word	0x4000f000
   433b0:	20006204 	.word	0x20006204
   433b4:	4001f000 	.word	0x4001f000

000433b8 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   433b8:	4b01      	ldr	r3, [pc, #4]	; (433c0 <radio_ar_match_get+0x8>)
   433ba:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   433be:	4770      	bx	lr
   433c0:	4000f000 	.word	0x4000f000

000433c4 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   433c4:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   433c6:	4807      	ldr	r0, [pc, #28]	; (433e4 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   433c8:	4c07      	ldr	r4, [pc, #28]	; (433e8 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   433ca:	4a08      	ldr	r2, [pc, #32]	; (433ec <radio_ar_status_reset+0x28>)
   433cc:	2300      	movs	r3, #0
   433ce:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   433d2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   433d6:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   433da:	bc10      	pop	{r4}
   433dc:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   433e0:	4770      	bx	lr
   433e2:	bf00      	nop
   433e4:	4000f000 	.word	0x4000f000
   433e8:	40001000 	.word	0x40001000
   433ec:	4001f000 	.word	0x4001f000

000433f0 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   433f0:	4b08      	ldr	r3, [pc, #32]	; (43414 <radio_ar_has_match+0x24>)
   433f2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   433f6:	b160      	cbz	r0, 43412 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   433f8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   433fc:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   43400:	b138      	cbz	r0, 43412 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   43402:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   43406:	b120      	cbz	r0, 43412 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   43408:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   4340c:	fab0 f080 	clz	r0, r0
   43410:	0940      	lsrs	r0, r0, #5
}
   43412:	4770      	bx	lr
   43414:	40001000 	.word	0x40001000

00043418 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   43418:	2902      	cmp	r1, #2
{
   4341a:	b510      	push	{r4, lr}
   4341c:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   4341e:	d00b      	beq.n	43438 <mayfly_enable_cb+0x20>
   43420:	4a0a      	ldr	r2, [pc, #40]	; (4344c <mayfly_enable_cb+0x34>)
   43422:	490b      	ldr	r1, [pc, #44]	; (43450 <mayfly_enable_cb+0x38>)
   43424:	480b      	ldr	r0, [pc, #44]	; (43454 <mayfly_enable_cb+0x3c>)
   43426:	231e      	movs	r3, #30
   43428:	f006 fae7 	bl	499fa <printk>
   4342c:	4040      	eors	r0, r0
   4342e:	f380 8811 	msr	BASEPRI, r0
   43432:	f04f 0003 	mov.w	r0, #3
   43436:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   43438:	200b      	movs	r0, #11
	if (enable) {
   4343a:	b11c      	cbz	r4, 43444 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   4343c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   43440:	f7e9 bbb4 	b.w	2cbac <arch_irq_enable>
}
   43444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   43448:	f7e9 bbbe 	b.w	2cbc8 <arch_irq_disable>
   4344c:	00053888 	.word	0x00053888
   43450:	000538d8 	.word	0x000538d8
   43454:	00052a70 	.word	0x00052a70

00043458 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   43458:	b129      	cbz	r1, 43466 <mayfly_is_enabled+0xe>
   4345a:	3901      	subs	r1, #1
   4345c:	2901      	cmp	r1, #1
   4345e:	d805      	bhi.n	4346c <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   43460:	200b      	movs	r0, #11
   43462:	f7e9 bbc5 	b.w	2cbf0 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   43466:	2018      	movs	r0, #24
   43468:	f7e9 bbc2 	b.w	2cbf0 <arch_irq_is_enabled>
{
   4346c:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   4346e:	4a07      	ldr	r2, [pc, #28]	; (4348c <mayfly_is_enabled+0x34>)
   43470:	4907      	ldr	r1, [pc, #28]	; (43490 <mayfly_is_enabled+0x38>)
   43472:	4808      	ldr	r0, [pc, #32]	; (43494 <mayfly_is_enabled+0x3c>)
   43474:	2336      	movs	r3, #54	; 0x36
   43476:	f006 fac0 	bl	499fa <printk>
   4347a:	4040      	eors	r0, r0
   4347c:	f380 8811 	msr	BASEPRI, r0
   43480:	f04f 0003 	mov.w	r0, #3
   43484:	df02      	svc	2
		break;
	}

	return 0;
}
   43486:	2000      	movs	r0, #0
   43488:	bd08      	pop	{r3, pc}
   4348a:	bf00      	nop
   4348c:	00053888 	.word	0x00053888
   43490:	00052ad0 	.word	0x00052ad0
   43494:	00052a70 	.word	0x00052a70

00043498 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   43498:	4288      	cmp	r0, r1
   4349a:	d00f      	beq.n	434bc <mayfly_prio_is_equal+0x24>
	return (caller_id == callee_id) ||
   4349c:	2801      	cmp	r0, #1
   4349e:	d007      	beq.n	434b0 <mayfly_prio_is_equal+0x18>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   434a0:	2802      	cmp	r0, #2
   434a2:	d10d      	bne.n	434c0 <mayfly_prio_is_equal+0x28>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   434a4:	f1a1 0001 	sub.w	r0, r1, #1
   434a8:	fab0 f080 	clz	r0, r0
   434ac:	0940      	lsrs	r0, r0, #5
   434ae:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   434b0:	f1a1 0002 	sub.w	r0, r1, #2
   434b4:	fab0 f080 	clz	r0, r0
   434b8:	0940      	lsrs	r0, r0, #5
   434ba:	4770      	bx	lr
   434bc:	2001      	movs	r0, #1
   434be:	4770      	bx	lr
   434c0:	2000      	movs	r0, #0
#endif
	       0;
}
   434c2:	4770      	bx	lr

000434c4 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   434c4:	2901      	cmp	r1, #1
{
   434c6:	b508      	push	{r3, lr}
	switch (callee_id) {
   434c8:	d00f      	beq.n	434ea <mayfly_pend+0x26>
   434ca:	2902      	cmp	r1, #2
   434cc:	d00d      	beq.n	434ea <mayfly_pend+0x26>
   434ce:	b191      	cbz	r1, 434f6 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   434d0:	4a0c      	ldr	r2, [pc, #48]	; (43504 <mayfly_pend+0x40>)
   434d2:	490d      	ldr	r1, [pc, #52]	; (43508 <mayfly_pend+0x44>)
   434d4:	480d      	ldr	r0, [pc, #52]	; (4350c <mayfly_pend+0x48>)
   434d6:	2367      	movs	r3, #103	; 0x67
   434d8:	f006 fa8f 	bl	499fa <printk>
   434dc:	4040      	eors	r0, r0
   434de:	f380 8811 	msr	BASEPRI, r0
   434e2:	f04f 0003 	mov.w	r0, #3
   434e6:	df02      	svc	2
		break;
	}
}
   434e8:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   434ea:	4b09      	ldr	r3, [pc, #36]	; (43510 <mayfly_pend+0x4c>)
   434ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
   434f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   434f4:	bd08      	pop	{r3, pc}
   434f6:	4b06      	ldr	r3, [pc, #24]	; (43510 <mayfly_pend+0x4c>)
   434f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   434fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   43500:	bd08      	pop	{r3, pc}
   43502:	bf00      	nop
   43504:	00053888 	.word	0x00053888
   43508:	00052ad0 	.word	0x00052ad0
   4350c:	00052a70 	.word	0x00052a70
   43510:	e000e100 	.word	0xe000e100

00043514 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   43514:	2803      	cmp	r0, #3
{
   43516:	b510      	push	{r4, lr}
   43518:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   4351a:	d804      	bhi.n	43526 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   4351c:	4b11      	ldr	r3, [pc, #68]	; (43564 <hal_ticker_instance0_caller_id_get+0x50>)
   4351e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   43520:	b18c      	cbz	r4, 43546 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   43522:	4620      	mov	r0, r4
   43524:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   43526:	4a10      	ldr	r2, [pc, #64]	; (43568 <hal_ticker_instance0_caller_id_get+0x54>)
   43528:	4910      	ldr	r1, [pc, #64]	; (4356c <hal_ticker_instance0_caller_id_get+0x58>)
   4352a:	4811      	ldr	r0, [pc, #68]	; (43570 <hal_ticker_instance0_caller_id_get+0x5c>)
   4352c:	232b      	movs	r3, #43	; 0x2b
   4352e:	f006 fa64 	bl	499fa <printk>
   43532:	4040      	eors	r0, r0
   43534:	f380 8811 	msr	BASEPRI, r0
   43538:	f04f 0003 	mov.w	r0, #3
   4353c:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   4353e:	4b09      	ldr	r3, [pc, #36]	; (43564 <hal_ticker_instance0_caller_id_get+0x50>)
   43540:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   43542:	2c00      	cmp	r4, #0
   43544:	d1ed      	bne.n	43522 <hal_ticker_instance0_caller_id_get+0xe>
   43546:	4a08      	ldr	r2, [pc, #32]	; (43568 <hal_ticker_instance0_caller_id_get+0x54>)
   43548:	490a      	ldr	r1, [pc, #40]	; (43574 <hal_ticker_instance0_caller_id_get+0x60>)
   4354a:	4809      	ldr	r0, [pc, #36]	; (43570 <hal_ticker_instance0_caller_id_get+0x5c>)
   4354c:	232e      	movs	r3, #46	; 0x2e
   4354e:	f006 fa54 	bl	499fa <printk>
   43552:	4040      	eors	r0, r0
   43554:	f380 8811 	msr	BASEPRI, r0
   43558:	f04f 0003 	mov.w	r0, #3
   4355c:	df02      	svc	2
}
   4355e:	4620      	mov	r0, r4
   43560:	bd10      	pop	{r4, pc}
   43562:	bf00      	nop
   43564:	00053968 	.word	0x00053968
   43568:	000538e8 	.word	0x000538e8
   4356c:	00053938 	.word	0x00053938
   43570:	00052a70 	.word	0x00052a70
   43574:	00053958 	.word	0x00053958

00043578 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   43578:	3801      	subs	r0, #1
{
   4357a:	b510      	push	{r4, lr}
   4357c:	461c      	mov	r4, r3
	switch (caller_id) {
   4357e:	2804      	cmp	r0, #4
   43580:	f200 8082 	bhi.w	43688 <hal_ticker_instance0_sched+0x110>
   43584:	e8df f000 	tbb	[pc, r0]
   43588:	3f302112 	.word	0x3f302112
   4358c:	03          	.byte	0x03
   4358d:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   4358e:	2904      	cmp	r1, #4
   43590:	d04a      	beq.n	43628 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   43592:	4a44      	ldr	r2, [pc, #272]	; (436a4 <hal_ticker_instance0_sched+0x12c>)
   43594:	4944      	ldr	r1, [pc, #272]	; (436a8 <hal_ticker_instance0_sched+0x130>)
   43596:	4845      	ldr	r0, [pc, #276]	; (436ac <hal_ticker_instance0_sched+0x134>)
   43598:	23ba      	movs	r3, #186	; 0xba
   4359a:	f006 fa2e 	bl	499fa <printk>
   4359e:	4040      	eors	r0, r0
   435a0:	f380 8811 	msr	BASEPRI, r0
   435a4:	f04f 0003 	mov.w	r0, #3
   435a8:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   435aa:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   435ac:	2904      	cmp	r1, #4
   435ae:	d043      	beq.n	43638 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   435b0:	4a3c      	ldr	r2, [pc, #240]	; (436a4 <hal_ticker_instance0_sched+0x12c>)
   435b2:	493d      	ldr	r1, [pc, #244]	; (436a8 <hal_ticker_instance0_sched+0x130>)
   435b4:	483d      	ldr	r0, [pc, #244]	; (436ac <hal_ticker_instance0_sched+0x134>)
   435b6:	234e      	movs	r3, #78	; 0x4e
   435b8:	f006 fa1f 	bl	499fa <printk>
   435bc:	4040      	eors	r0, r0
   435be:	f380 8811 	msr	BASEPRI, r0
   435c2:	f04f 0003 	mov.w	r0, #3
   435c6:	df02      	svc	2
}
   435c8:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   435ca:	2903      	cmp	r1, #3
   435cc:	d03c      	beq.n	43648 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   435ce:	4a35      	ldr	r2, [pc, #212]	; (436a4 <hal_ticker_instance0_sched+0x12c>)
   435d0:	4935      	ldr	r1, [pc, #212]	; (436a8 <hal_ticker_instance0_sched+0x130>)
   435d2:	4836      	ldr	r0, [pc, #216]	; (436ac <hal_ticker_instance0_sched+0x134>)
   435d4:	2365      	movs	r3, #101	; 0x65
   435d6:	f006 fa10 	bl	499fa <printk>
   435da:	4040      	eors	r0, r0
   435dc:	f380 8811 	msr	BASEPRI, r0
   435e0:	f04f 0003 	mov.w	r0, #3
   435e4:	df02      	svc	2
}
   435e6:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   435e8:	2904      	cmp	r1, #4
   435ea:	d035      	beq.n	43658 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   435ec:	4a2d      	ldr	r2, [pc, #180]	; (436a4 <hal_ticker_instance0_sched+0x12c>)
   435ee:	492e      	ldr	r1, [pc, #184]	; (436a8 <hal_ticker_instance0_sched+0x130>)
   435f0:	482e      	ldr	r0, [pc, #184]	; (436ac <hal_ticker_instance0_sched+0x134>)
   435f2:	237c      	movs	r3, #124	; 0x7c
   435f4:	f006 fa01 	bl	499fa <printk>
   435f8:	4040      	eors	r0, r0
   435fa:	f380 8811 	msr	BASEPRI, r0
   435fe:	f04f 0003 	mov.w	r0, #3
   43602:	df02      	svc	2
}
   43604:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   43606:	2903      	cmp	r1, #3
   43608:	d036      	beq.n	43678 <hal_ticker_instance0_sched+0x100>
   4360a:	2904      	cmp	r1, #4
   4360c:	d02c      	beq.n	43668 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   4360e:	4a25      	ldr	r2, [pc, #148]	; (436a4 <hal_ticker_instance0_sched+0x12c>)
   43610:	4925      	ldr	r1, [pc, #148]	; (436a8 <hal_ticker_instance0_sched+0x130>)
   43612:	4826      	ldr	r0, [pc, #152]	; (436ac <hal_ticker_instance0_sched+0x134>)
   43614:	23a2      	movs	r3, #162	; 0xa2
   43616:	f006 f9f0 	bl	499fa <printk>
   4361a:	4040      	eors	r0, r0
   4361c:	f380 8811 	msr	BASEPRI, r0
   43620:	f04f 0003 	mov.w	r0, #3
   43624:	df02      	svc	2
}
   43626:	bd10      	pop	{r4, pc}
			m.param = instance;
   43628:	4b21      	ldr	r3, [pc, #132]	; (436b0 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   4362a:	2102      	movs	r1, #2
			m.param = instance;
   4362c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   4362e:	2003      	movs	r0, #3
}
   43630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   43634:	f7f0 bcd2 	b.w	33fdc <mayfly_enqueue>
			m.param = instance;
   43638:	4b1e      	ldr	r3, [pc, #120]	; (436b4 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   4363a:	2102      	movs	r1, #2
			m.param = instance;
   4363c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   4363e:	2000      	movs	r0, #0
}
   43640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   43644:	f7f0 bcca 	b.w	33fdc <mayfly_enqueue>
			m.param = instance;
   43648:	4b1b      	ldr	r3, [pc, #108]	; (436b8 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   4364a:	2101      	movs	r1, #1
			m.param = instance;
   4364c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   4364e:	4608      	mov	r0, r1
}
   43650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   43654:	f7f0 bcc2 	b.w	33fdc <mayfly_enqueue>
			m.param = instance;
   43658:	4b18      	ldr	r3, [pc, #96]	; (436bc <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   4365a:	2102      	movs	r1, #2
			m.param = instance;
   4365c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   4365e:	2001      	movs	r0, #1
}
   43660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   43664:	f7f0 bcba 	b.w	33fdc <mayfly_enqueue>
			m.param = instance;
   43668:	4b15      	ldr	r3, [pc, #84]	; (436c0 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   4366a:	2102      	movs	r1, #2
			m.param = instance;
   4366c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   4366e:	4608      	mov	r0, r1
}
   43670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43674:	f7f0 bcb2 	b.w	33fdc <mayfly_enqueue>
			m.param = instance;
   43678:	4b12      	ldr	r3, [pc, #72]	; (436c4 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   4367a:	2101      	movs	r1, #1
			m.param = instance;
   4367c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   4367e:	2002      	movs	r0, #2
}
   43680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43684:	f7f0 bcaa 	b.w	33fdc <mayfly_enqueue>
		LL_ASSERT(0);
   43688:	4a06      	ldr	r2, [pc, #24]	; (436a4 <hal_ticker_instance0_sched+0x12c>)
   4368a:	4907      	ldr	r1, [pc, #28]	; (436a8 <hal_ticker_instance0_sched+0x130>)
   4368c:	4807      	ldr	r0, [pc, #28]	; (436ac <hal_ticker_instance0_sched+0x134>)
   4368e:	23c0      	movs	r3, #192	; 0xc0
   43690:	f006 f9b3 	bl	499fa <printk>
   43694:	4040      	eors	r0, r0
   43696:	f380 8811 	msr	BASEPRI, r0
   4369a:	f04f 0003 	mov.w	r0, #3
   4369e:	df02      	svc	2
}
   436a0:	bd10      	pop	{r4, pc}
   436a2:	bf00      	nop
   436a4:	000538e8 	.word	0x000538e8
   436a8:	00052ad0 	.word	0x00052ad0
   436ac:	00052a70 	.word	0x00052a70
   436b0:	20000dc4 	.word	0x20000dc4
   436b4:	20000e14 	.word	0x20000e14
   436b8:	20000e04 	.word	0x20000e04
   436bc:	20000df4 	.word	0x20000df4
   436c0:	20000dd4 	.word	0x20000dd4
   436c4:	20000de4 	.word	0x20000de4

000436c8 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   436c8:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   436ca:	2000      	movs	r0, #0
   436cc:	f7ff b9aa 	b.w	42a24 <cntr_cmp_set>

000436d0 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   436d0:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   436d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   436d6:	4684      	mov	ip, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   436d8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   436dc:	3201      	adds	r2, #1
   436de:	d03e      	beq.n	4375e <hci_vendor_read_static_addr+0x8e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   436e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   436e4:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   436e8:	f010 0001 	ands.w	r0, r0, #1
   436ec:	d100      	bne.n	436f0 <hci_vendor_read_static_addr+0x20>

		return 1;
	}

	return 0;
}
   436ee:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   436f0:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   436f4:	f8cc 3000 	str.w	r3, [ip]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   436f8:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
   436fc:	f88c 3004 	strb.w	r3, [ip, #4]
	dst[1] = val >> 8;
   43700:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   43704:	f063 033f 	orn	r3, r3, #63	; 0x3f
   43708:	f88c 3005 	strb.w	r3, [ip, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   4370c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   43710:	3301      	adds	r3, #1
   43712:	d01c      	beq.n	4374e <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   43714:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   43718:	3301      	adds	r3, #1
   4371a:	d018      	beq.n	4374e <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   4371c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   43720:	3301      	adds	r3, #1
   43722:	d014      	beq.n	4374e <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   43724:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   43728:	3301      	adds	r3, #1
   4372a:	d010      	beq.n	4374e <hci_vendor_read_static_addr+0x7e>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   4372c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   43730:	f8cc 3006 	str.w	r3, [ip, #6]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   43734:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   43738:	f8cc 300a 	str.w	r3, [ip, #10]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   4373c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   43740:	f8cc 300e 	str.w	r3, [ip, #14]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   43744:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   43748:	f8cc 3012 	str.w	r3, [ip, #18]
}
   4374c:	e005      	b.n	4375a <hci_vendor_read_static_addr+0x8a>
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   4374e:	2210      	movs	r2, #16
   43750:	2100      	movs	r1, #0
   43752:	f10c 0006 	add.w	r0, ip, #6
   43756:	f008 fa8a 	bl	4bc6e <memset>
		return 1;
   4375a:	2001      	movs	r0, #1
}
   4375c:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   4375e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   43762:	f64f 72ff 	movw	r2, #65535	; 0xffff
   43766:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   43768:	4293      	cmp	r3, r2
   4376a:	d1b9      	bne.n	436e0 <hci_vendor_read_static_addr+0x10>
	return 0;
   4376c:	2000      	movs	r0, #0
}
   4376e:	bd08      	pop	{r3, pc}

00043770 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   43770:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   43772:	2210      	movs	r2, #16
{
   43774:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   43776:	2100      	movs	r1, #0
   43778:	f008 fa79 	bl	4bc6e <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   4377c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   43780:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   43784:	3201      	adds	r2, #1
   43786:	d018      	beq.n	437ba <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   43788:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   4378c:	3201      	adds	r2, #1
   4378e:	d014      	beq.n	437ba <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   43790:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   43794:	3201      	adds	r2, #1
   43796:	d010      	beq.n	437ba <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   43798:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   4379c:	3201      	adds	r2, #1
   4379e:	d00c      	beq.n	437ba <hci_vendor_read_key_hierarchy_roots+0x4a>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   437a0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   437a4:	6022      	str	r2, [r4, #0]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   437a6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   437aa:	6062      	str	r2, [r4, #4]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   437ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   437b0:	60a2      	str	r2, [r4, #8]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   437b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   437b6:	60e3      	str	r3, [r4, #12]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   437b8:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   437ba:	4620      	mov	r0, r4
   437bc:	2210      	movs	r2, #16
}
   437be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   437c2:	2100      	movs	r1, #0
   437c4:	f008 ba53 	b.w	4bc6e <memset>

000437c8 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   437c8:	4b02      	ldr	r3, [pc, #8]	; (437d4 <net_buf_pool_get+0xc>)
   437ca:	222c      	movs	r2, #44	; 0x2c
   437cc:	fb02 3000 	mla	r0, r2, r0, r3
   437d0:	4770      	bx	lr
   437d2:	bf00      	nop
   437d4:	2000134c 	.word	0x2000134c

000437d8 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   437d8:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   437da:	4b06      	ldr	r3, [pc, #24]	; (437f4 <net_buf_id+0x1c>)
   437dc:	212c      	movs	r1, #44	; 0x2c
   437de:	fb01 3302 	mla	r3, r1, r2, r3
   437e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   437e4:	7f1b      	ldrb	r3, [r3, #28]
   437e6:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   437e8:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   437ea:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   437ee:	fbb0 f0f3 	udiv	r0, r0, r3
   437f2:	4770      	bx	lr
   437f4:	2000134c 	.word	0x2000134c

000437f8 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   437f8:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   437fa:	4b0a      	ldr	r3, [pc, #40]	; (43824 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   437fc:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   437fe:	242c      	movs	r4, #44	; 0x2c
   43800:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   43804:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   43806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   43808:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   4380a:	681a      	ldr	r2, [r3, #0]
   4380c:	4294      	cmp	r4, r2
   4380e:	bf94      	ite	ls
   43810:	600c      	strls	r4, [r1, #0]
   43812:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   43814:	e9d3 5400 	ldrd	r5, r4, [r3]
   43818:	f7ff ffde 	bl	437d8 <net_buf_id>
}
   4381c:	fb05 4000 	mla	r0, r5, r0, r4
   43820:	bd38      	pop	{r3, r4, r5, pc}
   43822:	bf00      	nop
   43824:	2000134c 	.word	0x2000134c

00043828 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   43828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4382c:	4605      	mov	r5, r0
   4382e:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   43830:	4610      	mov	r0, r2
   43832:	4619      	mov	r1, r3
{
   43834:	4691      	mov	r9, r2
   43836:	4698      	mov	r8, r3
   43838:	4617      	mov	r7, r2
   4383a:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   4383c:	f00d fba3 	bl	50f86 <sys_clock_timeout_end_calc>
   43840:	4682      	mov	sl, r0
   43842:	468b      	mov	fp, r1
	__asm__ volatile(
   43844:	f04f 0320 	mov.w	r3, #32
   43848:	f3ef 8111 	mrs	r1, BASEPRI
   4384c:	f383 8812 	msr	BASEPRI_MAX, r3
   43850:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   43854:	8b6b      	ldrh	r3, [r5, #26]
   43856:	2b00      	cmp	r3, #0
   43858:	d058      	beq.n	4390c <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   4385a:	8b2a      	ldrh	r2, [r5, #24]
   4385c:	429a      	cmp	r2, r3
   4385e:	d93c      	bls.n	438da <net_buf_alloc_len+0xb2>
   43860:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   43862:	2200      	movs	r2, #0
   43864:	2300      	movs	r3, #0
   43866:	4628      	mov	r0, r5
   43868:	f004 fbce 	bl	48008 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   4386c:	9900      	ldr	r1, [sp, #0]
   4386e:	4604      	mov	r4, r0
   43870:	2800      	cmp	r0, #0
   43872:	d032      	beq.n	438da <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   43874:	f381 8811 	msr	BASEPRI, r1
   43878:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   4387c:	9b01      	ldr	r3, [sp, #4]
   4387e:	2b00      	cmp	r3, #0
   43880:	d055      	beq.n	4392e <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   43882:	ea58 0309 	orrs.w	r3, r8, r9
   43886:	d00f      	beq.n	438a8 <net_buf_alloc_len+0x80>
   43888:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   4388c:	bf08      	it	eq
   4388e:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   43892:	d009      	beq.n	438a8 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   43894:	f005 fab0 	bl	48df8 <sys_clock_tick_get>
   43898:	ebba 0700 	subs.w	r7, sl, r0
   4389c:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   438a0:	2e00      	cmp	r6, #0
   438a2:	bfbc      	itt	lt
   438a4:	2700      	movlt	r7, #0
   438a6:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   438a8:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   438aa:	4d26      	ldr	r5, [pc, #152]	; (43944 <net_buf_alloc_len+0x11c>)
   438ac:	f04f 082c 	mov.w	r8, #44	; 0x2c
   438b0:	fb08 5303 	mla	r3, r8, r3, r5
   438b4:	463a      	mov	r2, r7
   438b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   438b8:	681b      	ldr	r3, [r3, #0]
   438ba:	a901      	add	r1, sp, #4
   438bc:	f8d3 9000 	ldr.w	r9, [r3]
   438c0:	4620      	mov	r0, r4
   438c2:	4633      	mov	r3, r6
   438c4:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   438c6:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   438c8:	2800      	cmp	r0, #0
   438ca:	d131      	bne.n	43930 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   438cc:	79a0      	ldrb	r0, [r4, #6]
   438ce:	4621      	mov	r1, r4
   438d0:	fb00 5008 	mla	r0, r0, r8, r5
   438d4:	f00d f8a4 	bl	50a20 <k_queue_prepend>
}
   438d8:	e024      	b.n	43924 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   438da:	8b68      	ldrh	r0, [r5, #26]
   438dc:	1e43      	subs	r3, r0, #1
   438de:	836b      	strh	r3, [r5, #26]
   438e0:	f381 8811 	msr	BASEPRI, r1
   438e4:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   438e8:	7f2a      	ldrb	r2, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   438ea:	8b29      	ldrh	r1, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   438ec:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   438ee:	f102 0317 	add.w	r3, r2, #23
   438f2:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   438f6:	1a09      	subs	r1, r1, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   438f8:	fb01 4403 	mla	r4, r1, r3, r4
	return pool - _net_buf_pool_list;
   438fc:	4b11      	ldr	r3, [pc, #68]	; (43944 <net_buf_alloc_len+0x11c>)
   438fe:	4912      	ldr	r1, [pc, #72]	; (43948 <net_buf_alloc_len+0x120>)
	buf->user_data_size = pool->user_data_size;
   43900:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   43902:	1aeb      	subs	r3, r5, r3
   43904:	109b      	asrs	r3, r3, #2
   43906:	434b      	muls	r3, r1
	buf->pool_id = pool_id(pool);
   43908:	71a3      	strb	r3, [r4, #6]
		goto success;
   4390a:	e7b7      	b.n	4387c <net_buf_alloc_len+0x54>
   4390c:	f381 8811 	msr	BASEPRI, r1
   43910:	f3bf 8f6f 	isb	sy
   43914:	464a      	mov	r2, r9
   43916:	4643      	mov	r3, r8
   43918:	4628      	mov	r0, r5
   4391a:	f004 fb75 	bl	48008 <z_impl_k_queue_get>
	if (!buf) {
   4391e:	4604      	mov	r4, r0
   43920:	2800      	cmp	r0, #0
   43922:	d1ab      	bne.n	4387c <net_buf_alloc_len+0x54>
		return NULL;
   43924:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   43926:	4620      	mov	r0, r4
   43928:	b003      	add	sp, #12
   4392a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   4392e:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   43930:	2300      	movs	r3, #0
	buf->ref   = 1U;
   43932:	2201      	movs	r2, #1
	buf->frags = NULL;
   43934:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   43936:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   43938:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   4393a:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   4393c:	6923      	ldr	r3, [r4, #16]
   4393e:	81e2      	strh	r2, [r4, #14]
   43940:	60a3      	str	r3, [r4, #8]
	return buf;
   43942:	e7f0      	b.n	43926 <net_buf_alloc_len+0xfe>
   43944:	2000134c 	.word	0x2000134c
   43948:	ba2e8ba3 	.word	0xba2e8ba3

0004394c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   4394c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   43950:	4d16      	ldr	r5, [pc, #88]	; (439ac <net_buf_unref+0x60>)
   43952:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   43954:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   43956:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   43958:	b90c      	cbnz	r4, 4395e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   4395a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   4395e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   43960:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   43964:	3b01      	subs	r3, #1
   43966:	b2db      	uxtb	r3, r3
   43968:	7123      	strb	r3, [r4, #4]
   4396a:	2b00      	cmp	r3, #0
   4396c:	d1f5      	bne.n	4395a <net_buf_unref+0xe>
		if (buf->__buf) {
   4396e:	6921      	ldr	r1, [r4, #16]
   43970:	b159      	cbz	r1, 4398a <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   43972:	7963      	ldrb	r3, [r4, #5]
   43974:	079b      	lsls	r3, r3, #30
   43976:	d407      	bmi.n	43988 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   43978:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   4397a:	fb07 5303 	mla	r3, r7, r3, r5
   4397e:	4620      	mov	r0, r4
   43980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   43982:	681b      	ldr	r3, [r3, #0]
   43984:	689b      	ldr	r3, [r3, #8]
   43986:	4798      	blx	r3
			buf->__buf = NULL;
   43988:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   4398a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   4398c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   4398e:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   43992:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   43994:	6a1b      	ldr	r3, [r3, #32]
   43996:	b11b      	cbz	r3, 439a0 <net_buf_unref+0x54>
			pool->destroy(buf);
   43998:	4620      	mov	r0, r4
   4399a:	4798      	blx	r3
{
   4399c:	4644      	mov	r4, r8
   4399e:	e7db      	b.n	43958 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   439a0:	4621      	mov	r1, r4
   439a2:	fb00 5007 	mla	r0, r0, r7, r5
   439a6:	f00d f83b 	bl	50a20 <k_queue_prepend>
}
   439aa:	e7f7      	b.n	4399c <net_buf_unref+0x50>
   439ac:	2000134c 	.word	0x2000134c

000439b0 <net_buf_append_bytes>:
 * the buffer. It assumes that the buffer has at least one fragment.
 */
size_t net_buf_append_bytes(struct net_buf *buf, size_t len,
			    const void *value, k_timeout_t timeout,
			    net_buf_allocator_cb allocate_cb, void *user_data)
{
   439b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   439b4:	4606      	mov	r6, r0
   439b6:	460d      	mov	r5, r1
   439b8:	4617      	mov	r7, r2
	while (buf->frags) {
   439ba:	4604      	mov	r4, r0
   439bc:	4621      	mov	r1, r4
   439be:	6824      	ldr	r4, [r4, #0]
   439c0:	2c00      	cmp	r4, #0
   439c2:	d1fb      	bne.n	439bc <net_buf_append_bytes+0xc>
	return &_net_buf_pool_list[id];
   439c4:	f8df a060 	ldr.w	sl, [pc, #96]	; 43a28 <net_buf_append_bytes+0x78>
   439c8:	f04f 092c 	mov.w	r9, #44	; 0x2c
	return net_buf_simple_tailroom(&buf->b);
   439cc:	f101 0b08 	add.w	fp, r1, #8
   439d0:	4658      	mov	r0, fp
   439d2:	f00c f96f 	bl	4fcb4 <net_buf_simple_tailroom>
	struct net_buf *frag = net_buf_frag_last(buf);
	size_t added_len = 0;
	const uint8_t *value8 = value;

	do {
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   439d6:	4285      	cmp	r5, r0
   439d8:	bf2c      	ite	cs
   439da:	fa1f f880 	uxthcs.w	r8, r0
   439de:	fa1f f885 	uxthcc.w	r8, r5
	return net_buf_simple_add_mem(&buf->b, mem, len);
   439e2:	4639      	mov	r1, r7
   439e4:	4642      	mov	r2, r8
   439e6:	4658      	mov	r0, fp
   439e8:	f00c f91d 	bl	4fc26 <net_buf_simple_add_mem>
		net_buf_add_mem(frag, value8, count);
		len -= count;
		added_len += count;
		value8 += count;

		if (len == 0) {
   439ec:	ebb5 0508 	subs.w	r5, r5, r8
		added_len += count;
   439f0:	4444      	add	r4, r8
		value8 += count;
   439f2:	4447      	add	r7, r8
		if (len == 0) {
   439f4:	d014      	beq.n	43a20 <net_buf_append_bytes+0x70>
			return added_len;
		}

		if (allocate_cb) {
   439f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   439f8:	b14b      	cbz	r3, 43a0e <net_buf_append_bytes+0x5e>
			frag = allocate_cb(timeout, user_data);
   439fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   439fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   43a00:	4798      	blx	r3

			/* Allocate from the original pool if no callback has
			 * been provided.
			 */
			pool = net_buf_pool_get(buf->pool_id);
			frag = net_buf_alloc_len(pool, len, timeout);
   43a02:	4601      	mov	r1, r0
		}

		if (!frag) {
   43a04:	b160      	cbz	r0, 43a20 <net_buf_append_bytes+0x70>
			return added_len;
		}

		net_buf_frag_add(buf, frag);
   43a06:	4630      	mov	r0, r6
   43a08:	f00c f8ea 	bl	4fbe0 <net_buf_frag_add>
	do {
   43a0c:	e7de      	b.n	439cc <net_buf_append_bytes+0x1c>
	return &_net_buf_pool_list[id];
   43a0e:	79b0      	ldrb	r0, [r6, #6]
			frag = net_buf_alloc_len(pool, len, timeout);
   43a10:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   43a14:	4629      	mov	r1, r5
   43a16:	fb00 a009 	mla	r0, r0, r9, sl
   43a1a:	f7ff ff05 	bl	43828 <net_buf_alloc_len>
   43a1e:	e7f0      	b.n	43a02 <net_buf_append_bytes+0x52>
	} while (1);

	/* Unreachable */
	return 0;
}
   43a20:	4620      	mov	r0, r4
   43a22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43a26:	bf00      	nop
   43a28:	2000134c 	.word	0x2000134c

00043a2c <hid_int_in>:

	return -EINVAL;
}

static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
   43a2c:	b510      	push	{r4, lr}
   43a2e:	460c      	mov	r4, r1
	struct hid_device_info *dev_data;
	struct usb_dev_data *common;

	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
   43a30:	4601      	mov	r1, r0
   43a32:	4808      	ldr	r0, [pc, #32]	; (43a54 <hid_int_in+0x28>)
   43a34:	f006 fde0 	bl	4a5f8 <usb_get_dev_data_by_ep>
	if (common == NULL) {
   43a38:	b150      	cbz	r0, 43a50 <hid_int_in+0x24>
		return;
	}

	dev_data = CONTAINER_OF(common, struct hid_device_info, common);

	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
   43a3a:	2c02      	cmp	r4, #2
   43a3c:	d108      	bne.n	43a50 <hid_int_in+0x24>
   43a3e:	f850 3c08 	ldr.w	r3, [r0, #-8]
   43a42:	b12b      	cbz	r3, 43a50 <hid_int_in+0x24>
	    dev_data->ops->int_in_ready == NULL) {
   43a44:	691b      	ldr	r3, [r3, #16]
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
   43a46:	b11b      	cbz	r3, 43a50 <hid_int_in+0x24>
		return;
	}

	dev_data->ops->int_in_ready(common->dev);
}
   43a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dev_data->ops->int_in_ready(common->dev);
   43a4c:	6800      	ldr	r0, [r0, #0]
   43a4e:	4718      	bx	r3
}
   43a50:	bd10      	pop	{r4, pc}
   43a52:	bf00      	nop
   43a54:	20006470 	.word	0x20006470

00043a58 <hid_custom_handle_req>:
{
   43a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (usb_reqtype_is_to_host(setup) &&
   43a5a:	f990 3000 	ldrsb.w	r3, [r0]
   43a5e:	2b00      	cmp	r3, #0
{
   43a60:	4604      	mov	r4, r0
   43a62:	460d      	mov	r5, r1
   43a64:	4617      	mov	r7, r2
	if (usb_reqtype_is_to_host(setup) &&
   43a66:	db02      	blt.n	43a6e <hid_custom_handle_req+0x16>
			return -EINVAL;
   43a68:	f06f 0015 	mvn.w	r0, #21
}
   43a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    setup->RequestType.recipient == USB_REQTYPE_RECIPIENT_INTERFACE &&
   43a6e:	8803      	ldrh	r3, [r0, #0]
   43a70:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
   43a74:	b29b      	uxth	r3, r3
   43a76:	f240 6201 	movw	r2, #1537	; 0x601
   43a7a:	4293      	cmp	r3, r2
   43a7c:	d1f4      	bne.n	43a68 <hid_custom_handle_req+0x10>
		uint8_t value = (uint8_t)(setup->wValue >> 8);
   43a7e:	8846      	ldrh	r6, [r0, #2]
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
   43a80:	7901      	ldrb	r1, [r0, #4]
   43a82:	4812      	ldr	r0, [pc, #72]	; (43acc <hid_custom_handle_req+0x74>)
		uint8_t value = (uint8_t)(setup->wValue >> 8);
   43a84:	0a36      	lsrs	r6, r6, #8
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
   43a86:	f006 fda9 	bl	4a5dc <usb_get_dev_data_by_iface>
		if (common == NULL) {
   43a8a:	2800      	cmp	r0, #0
   43a8c:	d0ec      	beq.n	43a68 <hid_custom_handle_req+0x10>
		switch (value) {
   43a8e:	2e21      	cmp	r6, #33	; 0x21
   43a90:	d004      	beq.n	43a9c <hid_custom_handle_req+0x44>
   43a92:	2e22      	cmp	r6, #34	; 0x22
   43a94:	d00f      	beq.n	43ab6 <hid_custom_handle_req+0x5e>
   43a96:	f06f 0085 	mvn.w	r0, #133	; 0x85
   43a9a:	e7e7      	b.n	43a6c <hid_custom_handle_req+0x14>
			cfg = common->dev->config;
   43a9c:	6803      	ldr	r3, [r0, #0]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
   43a9e:	88e1      	ldrh	r1, [r4, #6]
			hid_desc = cfg->interface_descriptor;
   43aa0:	685b      	ldr	r3, [r3, #4]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
   43aa2:	685b      	ldr	r3, [r3, #4]
   43aa4:	f813 2f09 	ldrb.w	r2, [r3, #9]!
   43aa8:	4291      	cmp	r1, r2
   43aaa:	bf94      	ite	ls
   43aac:	6029      	strls	r1, [r5, #0]
   43aae:	602a      	strhi	r2, [r5, #0]
			*data = (uint8_t *)dev_data->report_desc;
   43ab0:	603b      	str	r3, [r7, #0]
		return 0;
   43ab2:	2000      	movs	r0, #0
   43ab4:	e7da      	b.n	43a6c <hid_custom_handle_req+0x14>
			*len = MIN(setup->wLength, dev_data->report_size);
   43ab6:	88e3      	ldrh	r3, [r4, #6]
   43ab8:	f850 2c0c 	ldr.w	r2, [r0, #-12]
   43abc:	429a      	cmp	r2, r3
   43abe:	bf94      	ite	ls
   43ac0:	602a      	strls	r2, [r5, #0]
   43ac2:	602b      	strhi	r3, [r5, #0]
			*data = (uint8_t *)dev_data->report_desc;
   43ac4:	f850 3c10 	ldr.w	r3, [r0, #-16]
			break;
   43ac8:	e7f2      	b.n	43ab0 <hid_custom_handle_req+0x58>
   43aca:	bf00      	nop
   43acc:	20006470 	.word	0x20006470

00043ad0 <hid_class_handle_req>:
{
   43ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   43ad4:	4604      	mov	r4, r0
   43ad6:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
   43ad8:	7901      	ldrb	r1, [r0, #4]
   43ada:	4814      	ldr	r0, [pc, #80]	; (43b2c <hid_class_handle_req+0x5c>)
{
   43adc:	4617      	mov	r7, r2
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
   43ade:	f006 fd7d 	bl	4a5dc <usb_get_dev_data_by_iface>
	if (common == NULL) {
   43ae2:	4605      	mov	r5, r0
   43ae4:	b1d0      	cbz	r0, 43b1c <hid_class_handle_req+0x4c>
	if (usb_reqtype_is_to_host(setup)) {
   43ae6:	f994 2000 	ldrsb.w	r2, [r4]
	dev = common->dev;
   43aea:	6800      	ldr	r0, [r0, #0]
		switch (setup->bRequest) {
   43aec:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   43aee:	2a00      	cmp	r2, #0
   43af0:	da0d      	bge.n	43b0e <hid_class_handle_req+0x3e>
		switch (setup->bRequest) {
   43af2:	2b01      	cmp	r3, #1
   43af4:	d116      	bne.n	43b24 <hid_class_handle_req+0x54>
			if (dev_data->ops && dev_data->ops->get_report) {
   43af6:	f855 3c08 	ldr.w	r3, [r5, #-8]
   43afa:	b19b      	cbz	r3, 43b24 <hid_class_handle_req+0x54>
   43afc:	681d      	ldr	r5, [r3, #0]
			if (dev_data->ops && dev_data->ops->set_report) {
   43afe:	b18d      	cbz	r5, 43b24 <hid_class_handle_req+0x54>
				return dev_data->ops->set_report(dev, setup,
   43b00:	463b      	mov	r3, r7
   43b02:	4632      	mov	r2, r6
   43b04:	4621      	mov	r1, r4
   43b06:	46ac      	mov	ip, r5
}
   43b08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				return dev_data->ops->set_report(dev, setup,
   43b0c:	4760      	bx	ip
		switch (setup->bRequest) {
   43b0e:	2b09      	cmp	r3, #9
   43b10:	d108      	bne.n	43b24 <hid_class_handle_req+0x54>
			if (dev_data->ops && dev_data->ops->set_report) {
   43b12:	f855 3c08 	ldr.w	r3, [r5, #-8]
   43b16:	b12b      	cbz	r3, 43b24 <hid_class_handle_req+0x54>
   43b18:	685d      	ldr	r5, [r3, #4]
   43b1a:	e7f0      	b.n	43afe <hid_class_handle_req+0x2e>
		return -ENODEV;
   43b1c:	f06f 0012 	mvn.w	r0, #18
}
   43b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return hid_on_get_idle(dev_data, setup, len, data);
   43b24:	f06f 0085 	mvn.w	r0, #133	; 0x85
   43b28:	e7fa      	b.n	43b20 <hid_class_handle_req+0x50>
   43b2a:	bf00      	nop
   43b2c:	20006470 	.word	0x20006470

00043b30 <hid_status_cb>:
{
   43b30:	b510      	push	{r4, lr}
   43b32:	460c      	mov	r4, r1
	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
   43b34:	4601      	mov	r1, r0
   43b36:	480f      	ldr	r0, [pc, #60]	; (43b74 <hid_status_cb+0x44>)
   43b38:	f006 fd44 	bl	4a5c4 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
   43b3c:	b150      	cbz	r0, 43b54 <hid_status_cb+0x24>
	switch (status) {
   43b3e:	1e61      	subs	r1, r4, #1
   43b40:	2905      	cmp	r1, #5
   43b42:	d807      	bhi.n	43b54 <hid_status_cb+0x24>
   43b44:	e8df f001 	tbb	[pc, r1]
   43b48:	07030607 	.word	0x07030607
   43b4c:	0f0d      	.short	0x0f0d
		dev_data->configured = true;
   43b4e:	2301      	movs	r3, #1
   43b50:	f800 3c04 	strb.w	r3, [r0, #-4]
}
   43b54:	bd10      	pop	{r4, pc}
		dev_data->configured = false;
   43b56:	2300      	movs	r3, #0
   43b58:	f800 3c04 	strb.w	r3, [r0, #-4]
			dev_data->suspended = false;
   43b5c:	f800 3c03 	strb.w	r3, [r0, #-3]
   43b60:	e7f8      	b.n	43b54 <hid_status_cb+0x24>
		dev_data->suspended = true;
   43b62:	2301      	movs	r3, #1
   43b64:	e7fa      	b.n	43b5c <hid_status_cb+0x2c>
		if (dev_data->suspended) {
   43b66:	f810 3c03 	ldrb.w	r3, [r0, #-3]
   43b6a:	2b00      	cmp	r3, #0
   43b6c:	d0f2      	beq.n	43b54 <hid_status_cb+0x24>
			dev_data->suspended = false;
   43b6e:	2300      	movs	r3, #0
   43b70:	e7f4      	b.n	43b5c <hid_status_cb+0x2c>
   43b72:	bf00      	nop
   43b74:	20006470 	.word	0x20006470

00043b78 <usb_hid_register_device>:
	return 0;
}

void usb_hid_register_device(const struct device *dev, const uint8_t *desc,
			     size_t size, const struct hid_ops *ops)
{
   43b78:	b510      	push	{r4, lr}
	struct hid_device_info *dev_data = dev->data;
   43b7a:	6904      	ldr	r4, [r0, #16]

	dev_data->report_desc = desc;
	dev_data->report_size = size;

	dev_data->ops = ops;
   43b7c:	60a3      	str	r3, [r4, #8]
	parent->next = child;
   43b7e:	2300      	movs	r3, #0
   43b80:	6163      	str	r3, [r4, #20]
	return list->tail;
   43b82:	4b07      	ldr	r3, [pc, #28]	; (43ba0 <usb_hid_register_device+0x28>)
	dev_data->common.dev = dev;
   43b84:	6120      	str	r0, [r4, #16]
	dev_data->report_size = size;
   43b86:	e9c4 1200 	strd	r1, r2, [r4]
   43b8a:	6859      	ldr	r1, [r3, #4]

	sys_slist_append(&usb_hid_devlist, &dev_data->common.node);
   43b8c:	f104 0214 	add.w	r2, r4, #20
Z_GENLIST_APPEND(slist, snode)
   43b90:	b911      	cbnz	r1, 43b98 <usb_hid_register_device+0x20>
	list->head = node;
   43b92:	e9c3 2200 	strd	r2, r2, [r3]

	LOG_DBG("Added dev_data %p dev %p to devlist %p", dev_data, dev,
		&usb_hid_devlist);
}
   43b96:	bd10      	pop	{r4, pc}
	parent->next = child;
   43b98:	600a      	str	r2, [r1, #0]
	list->tail = node;
   43b9a:	605a      	str	r2, [r3, #4]
   43b9c:	e7fb      	b.n	43b96 <usb_hid_register_device+0x1e>
   43b9e:	bf00      	nop
   43ba0:	20006470 	.word	0x20006470

00043ba4 <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
   43ba4:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   43ba6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
   43baa:	d512      	bpl.n	43bd2 <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   43bac:	2b08      	cmp	r3, #8
   43bae:	d105      	bne.n	43bbc <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   43bb0:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
   43bb2:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   43bb6:	d506      	bpl.n	43bc6 <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   43bb8:	480e      	ldr	r0, [pc, #56]	; (43bf4 <endpoint_ctx+0x50>)
   43bba:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
   43bbc:	f010 0f78 	tst.w	r0, #120	; 0x78
   43bc0:	d112      	bne.n	43be8 <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
   43bc2:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
   43bc6:	204c      	movs	r0, #76	; 0x4c
   43bc8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   43bcc:	4b0a      	ldr	r3, [pc, #40]	; (43bf8 <endpoint_ctx+0x54>)
   43bce:	4418      	add	r0, r3
   43bd0:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   43bd2:	2b08      	cmp	r3, #8
   43bd4:	d105      	bne.n	43be2 <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   43bd6:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
   43bd8:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   43bdc:	d506      	bpl.n	43bec <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   43bde:	4807      	ldr	r0, [pc, #28]	; (43bfc <endpoint_ctx+0x58>)
   43be0:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
   43be2:	f010 0f78 	tst.w	r0, #120	; 0x78
   43be6:	d0f6      	beq.n	43bd6 <endpoint_ctx+0x32>
		return NULL;
   43be8:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
   43bea:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   43bec:	4804      	ldr	r0, [pc, #16]	; (43c00 <endpoint_ctx+0x5c>)
   43bee:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   43bf2:	4770      	bx	lr
   43bf4:	200065c4 	.word	0x200065c4
   43bf8:	20006478 	.word	0x20006478
   43bfc:	200066e4 	.word	0x200066e4
   43c00:	200065e4 	.word	0x200065e4

00043c04 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
   43c04:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
   43c06:	4801      	ldr	r0, [pc, #4]	; (43c0c <usbd_evt_put+0x8>)
   43c08:	f00c beff 	b.w	50a0a <k_queue_append>
   43c0c:	20001334 	.word	0x20001334

00043c10 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   43c10:	4901      	ldr	r1, [pc, #4]	; (43c18 <usbd_work_schedule+0x8>)
   43c12:	4802      	ldr	r0, [pc, #8]	; (43c1c <usbd_work_schedule+0xc>)
   43c14:	f00c bfe6 	b.w	50be4 <k_work_submit_to_queue>
   43c18:	200064a0 	.word	0x200064a0
   43c1c:	20003f38 	.word	0x20003f38

00043c20 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
   43c20:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   43c22:	480b      	ldr	r0, [pc, #44]	; (43c50 <usb_init+0x30>)
   43c24:	f002 fd3c 	bl	466a0 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
   43c28:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
   43c2a:	480a      	ldr	r0, [pc, #40]	; (43c54 <usb_init+0x34>)
   43c2c:	f002 fd7c 	bl	46728 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
   43c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   43c34:	f44f 6280 	mov.w	r2, #1024	; 0x400
   43c38:	4907      	ldr	r1, [pc, #28]	; (43c58 <usb_init+0x38>)
   43c3a:	4808      	ldr	r0, [pc, #32]	; (43c5c <usb_init+0x3c>)
   43c3c:	9400      	str	r4, [sp, #0]
   43c3e:	f004 fba1 	bl	48384 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
   43c42:	4907      	ldr	r1, [pc, #28]	; (43c60 <usb_init+0x40>)
   43c44:	4807      	ldr	r0, [pc, #28]	; (43c64 <usb_init+0x44>)
   43c46:	f00c ffb4 	bl	50bb2 <k_work_init>

	return 0;
}
   43c4a:	4620      	mov	r0, r4
   43c4c:	b002      	add	sp, #8
   43c4e:	bd10      	pop	{r4, pc}
   43c50:	0005432b 	.word	0x0005432b
   43c54:	0005397c 	.word	0x0005397c
   43c58:	200092a8 	.word	0x200092a8
   43c5c:	20003f38 	.word	0x20003f38
   43c60:	00043f79 	.word	0x00043f79
   43c64:	200064a0 	.word	0x200064a0

00043c68 <usbd_evt_get>:
   43c68:	4802      	ldr	r0, [pc, #8]	; (43c74 <usbd_evt_get+0xc>)
   43c6a:	2200      	movs	r2, #0
   43c6c:	2300      	movs	r3, #0
   43c6e:	f004 b9cb 	b.w	48008 <z_impl_k_queue_get>
   43c72:	bf00      	nop
   43c74:	20001334 	.word	0x20001334

00043c78 <usbd_evt_flush>:
{
   43c78:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   43c7a:	4c05      	ldr	r4, [pc, #20]	; (43c90 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
   43c7c:	f7ff fff4 	bl	43c68 <usbd_evt_get>
		if (ev) {
   43c80:	b120      	cbz	r0, 43c8c <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   43c82:	1d01      	adds	r1, r0, #4
   43c84:	4620      	mov	r0, r4
   43c86:	f00c fdf8 	bl	5087a <k_mem_slab_free>
	} while (ev != NULL);
   43c8a:	e7f7      	b.n	43c7c <usbd_evt_flush+0x4>
}
   43c8c:	bd10      	pop	{r4, pc}
   43c8e:	bf00      	nop
   43c90:	200010f8 	.word	0x200010f8

00043c94 <usbd_evt_alloc>:
{
   43c94:	b507      	push	{r0, r1, r2, lr}
	if (k_mem_slab_alloc(&fifo_elem_slab,
   43c96:	2300      	movs	r3, #0
   43c98:	480e      	ldr	r0, [pc, #56]	; (43cd4 <usbd_evt_alloc+0x40>)
   43c9a:	2200      	movs	r2, #0
   43c9c:	a901      	add	r1, sp, #4
   43c9e:	f003 ff47 	bl	47b30 <k_mem_slab_alloc>
   43ca2:	b190      	cbz	r0, 43cca <usbd_evt_alloc+0x36>
		usbd_evt_flush();
   43ca4:	f7ff ffe8 	bl	43c78 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   43ca8:	480a      	ldr	r0, [pc, #40]	; (43cd4 <usbd_evt_alloc+0x40>)
   43caa:	2200      	movs	r2, #0
   43cac:	2300      	movs	r3, #0
   43cae:	a901      	add	r1, sp, #4
   43cb0:	f003 ff3e 	bl	47b30 <k_mem_slab_alloc>
   43cb4:	b938      	cbnz	r0, 43cc6 <usbd_evt_alloc+0x32>
		ev = (struct usbd_event *)block.data;
   43cb6:	9801      	ldr	r0, [sp, #4]
		ev->evt_type = USBD_EVT_REINIT;
   43cb8:	2304      	movs	r3, #4
		ev->block = block;
   43cba:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
   43cbc:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
   43cbe:	f7ff ffa1 	bl	43c04 <usbd_evt_put>
		usbd_work_schedule();
   43cc2:	f7ff ffa5 	bl	43c10 <usbd_work_schedule>
		return NULL;
   43cc6:	2000      	movs	r0, #0
   43cc8:	e001      	b.n	43cce <usbd_evt_alloc+0x3a>
	ev = (struct usbd_event *)block.data;
   43cca:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
   43ccc:	6040      	str	r0, [r0, #4]
}
   43cce:	b003      	add	sp, #12
   43cd0:	f85d fb04 	ldr.w	pc, [sp], #4
   43cd4:	200010f8 	.word	0x200010f8

00043cd8 <usbd_event_transfer_data>:
{
   43cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		endpoint_ctx(p_event->data.eptransfer.ep);
   43cda:	7887      	ldrb	r7, [r0, #2]
{
   43cdc:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   43cde:	4638      	mov	r0, r7
   43ce0:	f7ff ff60 	bl	43ba4 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   43ce4:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
   43ce6:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
   43ce8:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   43cea:	d512      	bpl.n	43d12 <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
   43cec:	2d00      	cmp	r5, #0
   43cee:	d143      	bne.n	43d78 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   43cf0:	f7ff ffd0 	bl	43c94 <usbd_evt_alloc>
			if (!ev) {
   43cf4:	4603      	mov	r3, r0
   43cf6:	2800      	cmp	r0, #0
   43cf8:	d03e      	beq.n	43d78 <usbd_event_transfer_data+0xa0>
			ev->evt_type = USBD_EVT_EP;
   43cfa:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   43cfc:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   43cfe:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   43d00:	2203      	movs	r2, #3
   43d02:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   43d04:	609c      	str	r4, [r3, #8]
			usbd_evt_put(ev);
   43d06:	f7ff ff7d 	bl	43c04 <usbd_evt_put>
}
   43d0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			usbd_work_schedule();
   43d0e:	f7ff bf7f 	b.w	43c10 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   43d12:	b14d      	cbz	r5, 43d28 <usbd_event_transfer_data+0x50>
   43d14:	2d01      	cmp	r5, #1
   43d16:	d12f      	bne.n	43d78 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   43d18:	f7ff ffbc 	bl	43c94 <usbd_evt_alloc>
			if (!ev) {
   43d1c:	4603      	mov	r3, r0
   43d1e:	b358      	cbz	r0, 43d78 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
   43d20:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   43d22:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   43d24:	7305      	strb	r5, [r0, #12]
   43d26:	e7ed      	b.n	43d04 <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
   43d28:	f7ff ffb4 	bl	43c94 <usbd_evt_alloc>
			if (!ev) {
   43d2c:	b320      	cbz	r0, 43d78 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
   43d2e:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   43d30:	4b12      	ldr	r3, [pc, #72]	; (43d7c <usbd_event_transfer_data+0xa4>)
   43d32:	f012 0f80 	tst.w	r2, #128	; 0x80
   43d36:	f002 0108 	and.w	r1, r2, #8
   43d3a:	d011      	beq.n	43d60 <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   43d3c:	b141      	cbz	r1, 43d50 <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
   43d3e:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   43d42:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
   43d44:	2301      	movs	r3, #1
   43d46:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   43d48:	2302      	movs	r3, #2
   43d4a:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   43d4c:	6084      	str	r4, [r0, #8]
   43d4e:	e7da      	b.n	43d06 <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
   43d50:	f002 020f 	and.w	r2, r2, #15
   43d54:	2114      	movs	r1, #20
   43d56:	fb01 3302 	mla	r3, r1, r2, r3
   43d5a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   43d5e:	e7f0      	b.n	43d42 <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   43d60:	b111      	cbz	r1, 43d68 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   43d62:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
   43d66:	e7ec      	b.n	43d42 <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
   43d68:	f002 020f 	and.w	r2, r2, #15
   43d6c:	2114      	movs	r1, #20
   43d6e:	fb01 3302 	mla	r3, r1, r2, r3
   43d72:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   43d76:	e7e4      	b.n	43d42 <usbd_event_transfer_data+0x6a>
}
   43d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   43d7a:	bf00      	nop
   43d7c:	40027000 	.word	0x40027000

00043d80 <usb_dc_power_event_handler>:
	switch (event) {
   43d80:	2802      	cmp	r0, #2
{
   43d82:	b510      	push	{r4, lr}
   43d84:	d811      	bhi.n	43daa <usb_dc_power_event_handler+0x2a>
   43d86:	4b09      	ldr	r3, [pc, #36]	; (43dac <usb_dc_power_event_handler+0x2c>)
   43d88:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
   43d8a:	f7ff ff83 	bl	43c94 <usbd_evt_alloc>
	if (!ev) {
   43d8e:	b160      	cbz	r0, 43daa <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
   43d90:	2200      	movs	r2, #0
   43d92:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
   43d94:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
   43d96:	f7ff ff35 	bl	43c04 <usbd_evt_put>
	if (usbd_ctx.attached) {
   43d9a:	4b05      	ldr	r3, [pc, #20]	; (43db0 <usb_dc_power_event_handler+0x30>)
   43d9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   43da0:	b11b      	cbz	r3, 43daa <usb_dc_power_event_handler+0x2a>
}
   43da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
   43da6:	f7ff bf33 	b.w	43c10 <usbd_work_schedule>
}
   43daa:	bd10      	pop	{r4, pc}
   43dac:	00054328 	.word	0x00054328
   43db0:	20006478 	.word	0x20006478

00043db4 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
   43db4:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   43db6:	490e      	ldr	r1, [pc, #56]	; (43df0 <hfxo_stop.constprop.0.isra.0+0x3c>)
   43db8:	f3bf 8f5b 	dmb	ish
   43dbc:	2300      	movs	r3, #0
   43dbe:	e851 2f00 	ldrex	r2, [r1]
   43dc2:	2a01      	cmp	r2, #1
   43dc4:	d103      	bne.n	43dce <hfxo_stop.constprop.0.isra.0+0x1a>
   43dc6:	e841 3000 	strex	r0, r3, [r1]
   43dca:	2800      	cmp	r0, #0
   43dcc:	d1f7      	bne.n	43dbe <hfxo_stop.constprop.0.isra.0+0xa>
   43dce:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   43dd2:	d10c      	bne.n	43dee <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   43dd4:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   43dd8:	3914      	subs	r1, #20
   43dda:	4620      	mov	r0, r4
   43ddc:	f005 ff22 	bl	49c24 <onoff_cancel>

	if (rv == -EALREADY) {
   43de0:	3078      	adds	r0, #120	; 0x78
   43de2:	d104      	bne.n	43dee <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
   43de4:	4620      	mov	r0, r4
}
   43de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   43dea:	f005 bef6 	b.w	49bda <onoff_release>
   43dee:	bd10      	pop	{r4, pc}
   43df0:	20006498 	.word	0x20006498

00043df4 <usbd_event_handler>:
{
   43df4:	b5f0      	push	{r4, r5, r6, r7, lr}
   43df6:	4606      	mov	r6, r0
   43df8:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
   43dfa:	2214      	movs	r2, #20
   43dfc:	2100      	movs	r1, #0
   43dfe:	a803      	add	r0, sp, #12
   43e00:	f007 ff35 	bl	4bc6e <memset>
	switch (p_event->type) {
   43e04:	7833      	ldrb	r3, [r6, #0]
   43e06:	3b01      	subs	r3, #1
   43e08:	2b05      	cmp	r3, #5
   43e0a:	d821      	bhi.n	43e50 <usbd_event_handler+0x5c>
   43e0c:	e8df f003 	tbb	[pc, r3]
   43e10:	1414037a 	.word	0x1414037a
   43e14:	166a      	.short	0x166a
   43e16:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   43e18:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
   43e1c:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
   43e1e:	f7ff ff39 	bl	43c94 <usbd_evt_alloc>
		if (!ev) {
   43e22:	4603      	mov	r3, r0
   43e24:	b1a0      	cbz	r0, 43e50 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
   43e26:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
   43e28:	f100 0208 	add.w	r2, r0, #8
   43e2c:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
   43e30:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
   43e34:	4618      	mov	r0, r3
   43e36:	e01d      	b.n	43e74 <usbd_event_handler+0x80>
	switch (p_event->type) {
   43e38:	2304      	movs	r3, #4
   43e3a:	e7ed      	b.n	43e18 <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   43e3c:	78b7      	ldrb	r7, [r6, #2]
   43e3e:	4638      	mov	r0, r7
   43e40:	f7ff feb0 	bl	43ba4 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   43e44:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   43e46:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
   43e48:	b123      	cbz	r3, 43e54 <usbd_event_handler+0x60>
   43e4a:	3b01      	subs	r3, #1
   43e4c:	2b02      	cmp	r3, #2
   43e4e:	d943      	bls.n	43ed8 <usbd_event_handler+0xe4>
}
   43e50:	b009      	add	sp, #36	; 0x24
   43e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   43e54:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
   43e56:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   43e58:	d513      	bpl.n	43e82 <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
   43e5a:	2d00      	cmp	r5, #0
   43e5c:	d1f8      	bne.n	43e50 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   43e5e:	f7ff ff19 	bl	43c94 <usbd_evt_alloc>
			if (!ev) {
   43e62:	4603      	mov	r3, r0
   43e64:	2800      	cmp	r0, #0
   43e66:	d0f3      	beq.n	43e50 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   43e68:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   43e6a:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   43e6c:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   43e6e:	2203      	movs	r2, #3
   43e70:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   43e72:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
   43e74:	f7ff fec6 	bl	43c04 <usbd_evt_put>
}
   43e78:	b009      	add	sp, #36	; 0x24
   43e7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
   43e7e:	f7ff bec7 	b.w	43c10 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   43e82:	b155      	cbz	r5, 43e9a <usbd_event_handler+0xa6>
   43e84:	2d01      	cmp	r5, #1
   43e86:	d1e3      	bne.n	43e50 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   43e88:	f7ff ff04 	bl	43c94 <usbd_evt_alloc>
			if (!ev) {
   43e8c:	4603      	mov	r3, r0
   43e8e:	2800      	cmp	r0, #0
   43e90:	d0de      	beq.n	43e50 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
   43e92:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   43e94:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   43e96:	7305      	strb	r5, [r0, #12]
   43e98:	e7eb      	b.n	43e72 <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
   43e9a:	f7ff fefb 	bl	43c94 <usbd_evt_alloc>
			if (!ev) {
   43e9e:	4607      	mov	r7, r0
   43ea0:	2800      	cmp	r0, #0
   43ea2:	d0d5      	beq.n	43e50 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   43ea4:	2301      	movs	r3, #1
   43ea6:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   43ea8:	2302      	movs	r3, #2
   43eaa:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   43eac:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   43eae:	f104 010c 	add.w	r1, r4, #12
   43eb2:	78b0      	ldrb	r0, [r6, #2]
   43eb4:	f00c fa5e 	bl	50374 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   43eb8:	4a13      	ldr	r2, [pc, #76]	; (43f08 <usbd_event_handler+0x114>)
   43eba:	68e1      	ldr	r1, [r4, #12]
   43ebc:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
   43ec0:	428b      	cmp	r3, r1
   43ec2:	d906      	bls.n	43ed2 <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   43ec4:	1a5b      	subs	r3, r3, r1
   43ec6:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   43eca:	f003 f9b7 	bl	4723c <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
   43ece:	4638      	mov	r0, r7
   43ed0:	e7d0      	b.n	43e74 <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
   43ed2:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
   43ed6:	e7fa      	b.n	43ece <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
   43ed8:	4630      	mov	r0, r6
}
   43eda:	b009      	add	sp, #36	; 0x24
   43edc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
   43ee0:	f7ff befa 	b.w	43cd8 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
   43ee4:	a801      	add	r0, sp, #4
   43ee6:	f003 f983 	bl	471f0 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   43eea:	f89d 3005 	ldrb.w	r3, [sp, #5]
   43eee:	2b05      	cmp	r3, #5
   43ef0:	d104      	bne.n	43efc <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   43ef2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   43ef6:	f013 0f60 	tst.w	r3, #96	; 0x60
   43efa:	d0a9      	beq.n	43e50 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
   43efc:	4b03      	ldr	r3, [pc, #12]	; (43f0c <usbd_event_handler+0x118>)
   43efe:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
   43f00:	2401      	movs	r4, #1
   43f02:	e78c      	b.n	43e1e <usbd_event_handler+0x2a>
	switch (p_event->type) {
   43f04:	2402      	movs	r4, #2
   43f06:	e78a      	b.n	43e1e <usbd_event_handler+0x2a>
   43f08:	20006478 	.word	0x20006478
   43f0c:	200065e4 	.word	0x200065e4

00043f10 <eps_ctx_init>:
{
   43f10:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   43f12:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   43f14:	f064 007f 	orn	r0, r4, #127	; 0x7f
   43f18:	b2c0      	uxtb	r0, r0
   43f1a:	f7ff fe43 	bl	43ba4 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   43f1e:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   43f20:	f00b feee 	bl	4fd00 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   43f24:	2c08      	cmp	r4, #8
   43f26:	d1f5      	bne.n	43f14 <eps_ctx_init+0x4>
   43f28:	4d0e      	ldr	r5, [pc, #56]	; (43f64 <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   43f2a:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   43f2c:	b2e0      	uxtb	r0, r4
   43f2e:	f7ff fe39 	bl	43ba4 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   43f32:	6903      	ldr	r3, [r0, #16]
   43f34:	b903      	cbnz	r3, 43f38 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   43f36:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   43f38:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   43f3a:	f00b fee1 	bl	4fd00 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   43f3e:	2c08      	cmp	r4, #8
   43f40:	f105 0540 	add.w	r5, r5, #64	; 0x40
   43f44:	d1f2      	bne.n	43f2c <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
   43f46:	4808      	ldr	r0, [pc, #32]	; (43f68 <eps_ctx_init+0x58>)
   43f48:	f00b feda 	bl	4fd00 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
   43f4c:	4b07      	ldr	r3, [pc, #28]	; (43f6c <eps_ctx_init+0x5c>)
   43f4e:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
   43f52:	b912      	cbnz	r2, 43f5a <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   43f54:	4a06      	ldr	r2, [pc, #24]	; (43f70 <eps_ctx_init+0x60>)
   43f56:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
   43f5a:	4806      	ldr	r0, [pc, #24]	; (43f74 <eps_ctx_init+0x64>)
   43f5c:	f00b fed0 	bl	4fd00 <ep_ctx_reset>
}
   43f60:	2000      	movs	r0, #0
   43f62:	bd38      	pop	{r3, r4, r5, pc}
   43f64:	20006b08 	.word	0x20006b08
   43f68:	200065c4 	.word	0x200065c4
   43f6c:	20006478 	.word	0x20006478
   43f70:	20006708 	.word	0x20006708
   43f74:	200066e4 	.word	0x200066e4

00043f78 <usbd_work_handler>:
{
   43f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
   43f7c:	4ca7      	ldr	r4, [pc, #668]	; (4421c <usbd_work_handler+0x2a4>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   43f7e:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 44220 <usbd_work_handler+0x2a8>
{
   43f82:	b085      	sub	sp, #20
   43f84:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
   43f86:	f7ff fe6f 	bl	43c68 <usbd_evt_get>
   43f8a:	b910      	cbnz	r0, 43f92 <usbd_work_handler+0x1a>
}
   43f8c:	b005      	add	sp, #20
   43f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
   43f92:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   43f96:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   43f98:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   43f9c:	b93b      	cbnz	r3, 43fae <usbd_work_handler+0x36>
   43f9e:	2a00      	cmp	r2, #0
   43fa0:	f000 8088 	beq.w	440b4 <usbd_work_handler+0x13c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   43fa4:	489e      	ldr	r0, [pc, #632]	; (44220 <usbd_work_handler+0x2a8>)
   43fa6:	4649      	mov	r1, r9
   43fa8:	f00c fc67 	bl	5087a <k_mem_slab_free>
}
   43fac:	e7eb      	b.n	43f86 <usbd_work_handler+0xe>
		switch (ev->evt_type) {
   43fae:	2a04      	cmp	r2, #4
   43fb0:	d844      	bhi.n	4403c <usbd_work_handler+0xc4>
   43fb2:	e8df f012 	tbh	[pc, r2, lsl #1]
   43fb6:	007f      	.short	0x007f
   43fb8:	01020005 	.word	0x01020005
   43fbc:	01410118 	.word	0x01410118
	switch (ep_evt->evt_type) {
   43fc0:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   43fc2:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
   43fc4:	2b03      	cmp	r3, #3
   43fc6:	d839      	bhi.n	4403c <usbd_work_handler+0xc4>
   43fc8:	e8df f003 	tbb	[pc, r3]
   43fcc:	615c3f02 	.word	0x615c3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   43fd0:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   43fd2:	2208      	movs	r2, #8
   43fd4:	2100      	movs	r1, #0
   43fd6:	4630      	mov	r0, r6
   43fd8:	f007 fe49 	bl	4bc6e <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   43fdc:	4b91      	ldr	r3, [pc, #580]	; (44224 <usbd_work_handler+0x2ac>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   43fde:	4892      	ldr	r0, [pc, #584]	; (44228 <usbd_work_handler+0x2b0>)
   43fe0:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   43fe4:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
   43fe6:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   43fea:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
   43fec:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   43ff0:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   43ff4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   43ff8:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
   43ffa:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   43ffe:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   44002:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   44006:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
   44008:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   4400c:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   44010:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   44014:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   44016:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   44018:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   4401a:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   4401c:	f007 fe1c 	bl	4bc58 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   44020:	682b      	ldr	r3, [r5, #0]
   44022:	7a68      	ldrb	r0, [r5, #9]
   44024:	2100      	movs	r1, #0
   44026:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   44028:	f996 3000 	ldrsb.w	r3, [r6]
   4402c:	2b00      	cmp	r3, #0
   4402e:	db08      	blt.n	44042 <usbd_work_handler+0xca>
   44030:	88f3      	ldrh	r3, [r6, #6]
   44032:	b133      	cbz	r3, 44042 <usbd_work_handler+0xca>
		ctx->ctrl_read_len = usbd_setup->wLength;
   44034:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   44038:	f003 f900 	bl	4723c <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   4403c:	4649      	mov	r1, r9
   4403e:	4640      	mov	r0, r8
   44040:	e7b2      	b.n	43fa8 <usbd_work_handler+0x30>
		ctx->ctrl_read_len = 0U;
   44042:	2300      	movs	r3, #0
   44044:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
   44048:	e7f8      	b.n	4403c <usbd_work_handler+0xc4>
	if (!ep_ctx->read_pending) {
   4404a:	7f6b      	ldrb	r3, [r5, #29]
   4404c:	2b00      	cmp	r3, #0
   4404e:	d0f5      	beq.n	4403c <usbd_work_handler+0xc4>
	if (!ep_ctx->read_complete) {
   44050:	7f2b      	ldrb	r3, [r5, #28]
   44052:	2b00      	cmp	r3, #0
   44054:	d0f2      	beq.n	4403c <usbd_work_handler+0xc4>
	ep_ctx->read_pending = false;
   44056:	2600      	movs	r6, #0
   44058:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   4405a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4405e:	4873      	ldr	r0, [pc, #460]	; (4422c <usbd_work_handler+0x2b4>)
	ep_ctx->read_complete = false;
   44060:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   44062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44066:	f00b fe5e 	bl	4fd26 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   4406a:	696b      	ldr	r3, [r5, #20]
   4406c:	9301      	str	r3, [sp, #4]
   4406e:	686b      	ldr	r3, [r5, #4]
   44070:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   44074:	a901      	add	r1, sp, #4
   44076:	7a68      	ldrb	r0, [r5, #9]
   44078:	f002 fee6 	bl	46e48 <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
   4407c:	486b      	ldr	r0, [pc, #428]	; (4422c <usbd_work_handler+0x2b4>)
   4407e:	f00b fe54 	bl	4fd2a <k_mutex_unlock.isra.0>
   44082:	e7db      	b.n	4403c <usbd_work_handler+0xc4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   44084:	682b      	ldr	r3, [r5, #0]
   44086:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   44088:	7a68      	ldrb	r0, [r5, #9]
   4408a:	4798      	blx	r3
		break;
   4408c:	e7d6      	b.n	4403c <usbd_work_handler+0xc4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   4408e:	7aab      	ldrb	r3, [r5, #10]
   44090:	b96b      	cbnz	r3, 440ae <usbd_work_handler+0x136>
   44092:	7feb      	ldrb	r3, [r5, #31]
   44094:	b95b      	cbnz	r3, 440ae <usbd_work_handler+0x136>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   44096:	4865      	ldr	r0, [pc, #404]	; (4422c <usbd_work_handler+0x2b4>)
   44098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4409c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   440a0:	f00b fe41 	bl	4fd26 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
   440a4:	f003 f8fa 	bl	4729c <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   440a8:	4860      	ldr	r0, [pc, #384]	; (4422c <usbd_work_handler+0x2b4>)
   440aa:	f00b fe3e 	bl	4fd2a <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   440ae:	682b      	ldr	r3, [r5, #0]
   440b0:	2102      	movs	r1, #2
   440b2:	e7e9      	b.n	44088 <usbd_work_handler+0x110>
	switch (pwr_evt->state) {
   440b4:	7a02      	ldrb	r2, [r0, #8]
   440b6:	2a04      	cmp	r2, #4
   440b8:	d8c0      	bhi.n	4403c <usbd_work_handler+0xc4>
   440ba:	e8df f002 	tbb	[pc, r2]
   440be:	0359      	.short	0x0359
   440c0:	6723      	.short	0x6723
   440c2:	73          	.byte	0x73
   440c3:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   440c4:	f002 fe3a 	bl	46d3c <nrfx_usbd_is_enabled>
   440c8:	4605      	mov	r5, r0
   440ca:	2800      	cmp	r0, #0
   440cc:	d1b6      	bne.n	4403c <usbd_work_handler+0xc4>
			nrfx_usbd_enable();
   440ce:	f002 fd71 	bl	46bb4 <nrfx_usbd_enable>
   440d2:	f3bf 8f5b 	dmb	ish
   440d6:	4956      	ldr	r1, [pc, #344]	; (44230 <usbd_work_handler+0x2b8>)
   440d8:	2301      	movs	r3, #1
   440da:	e851 2f00 	ldrex	r2, [r1]
   440de:	2a00      	cmp	r2, #0
   440e0:	d103      	bne.n	440ea <usbd_work_handler+0x172>
   440e2:	e841 3000 	strex	r0, r3, [r1]
   440e6:	2800      	cmp	r0, #0
   440e8:	d1f7      	bne.n	440da <usbd_work_handler+0x162>
   440ea:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   440ee:	d1a5      	bne.n	4403c <usbd_work_handler+0xc4>
   440f0:	f841 5c10 	str.w	r5, [r1, #-16]
   440f4:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   440f8:	69e0      	ldr	r0, [r4, #28]
   440fa:	6163      	str	r3, [r4, #20]
   440fc:	3914      	subs	r1, #20
   440fe:	f005 fd14 	bl	49b2a <onoff_request>
   44102:	e79b      	b.n	4403c <usbd_work_handler+0xc4>
	switch (pwr_evt->state) {
   44104:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   44106:	f065 007f 	orn	r0, r5, #127	; 0x7f
   4410a:	b2c0      	uxtb	r0, r0
   4410c:	f7ff fd4a 	bl	43ba4 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   44110:	7a03      	ldrb	r3, [r0, #8]
   44112:	b113      	cbz	r3, 4411a <usbd_work_handler+0x1a2>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   44114:	7a40      	ldrb	r0, [r0, #9]
   44116:	f003 faa5 	bl	47664 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   4411a:	3501      	adds	r5, #1
   4411c:	2d08      	cmp	r5, #8
   4411e:	d1f2      	bne.n	44106 <usbd_work_handler+0x18e>
		if (ep_ctx->cfg.en) {
   44120:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   44124:	b11b      	cbz	r3, 4412e <usbd_work_handler+0x1b6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   44126:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
   4412a:	f003 fa9b 	bl	47664 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
   4412e:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   44130:	b2e8      	uxtb	r0, r5
   44132:	f7ff fd37 	bl	43ba4 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   44136:	7a03      	ldrb	r3, [r0, #8]
   44138:	b113      	cbz	r3, 44140 <usbd_work_handler+0x1c8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   4413a:	7a40      	ldrb	r0, [r0, #9]
   4413c:	f003 fa92 	bl	47664 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   44140:	3501      	adds	r5, #1
   44142:	2d08      	cmp	r5, #8
   44144:	d1f4      	bne.n	44130 <usbd_work_handler+0x1b8>
		if (ep_ctx->cfg.en) {
   44146:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   4414a:	b11b      	cbz	r3, 44154 <usbd_work_handler+0x1dc>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   4414c:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
   44150:	f003 fa88 	bl	47664 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
   44154:	2001      	movs	r0, #1
   44156:	f002 fdd3 	bl	46d00 <nrfx_usbd_start>
		ctx->ready = true;
   4415a:	2301      	movs	r3, #1
   4415c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   44160:	6823      	ldr	r3, [r4, #0]
   44162:	2b00      	cmp	r3, #0
   44164:	f43f af6a 	beq.w	4403c <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   44168:	2100      	movs	r1, #0
   4416a:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
   4416c:	4798      	blx	r3
   4416e:	e765      	b.n	4403c <usbd_work_handler+0xc4>
		ctx->ready = false;
   44170:	2500      	movs	r5, #0
   44172:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   44176:	f003 fa03 	bl	47580 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   4417a:	f7ff fe1b 	bl	43db4 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
   4417e:	6823      	ldr	r3, [r4, #0]
   44180:	2b00      	cmp	r3, #0
   44182:	f43f af5b 	beq.w	4403c <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   44186:	4629      	mov	r1, r5
   44188:	2004      	movs	r0, #4
   4418a:	e7ef      	b.n	4416c <usbd_work_handler+0x1f4>
		if (dev_ready()) {
   4418c:	2b00      	cmp	r3, #0
   4418e:	f43f af55 	beq.w	4403c <usbd_work_handler+0xc4>
			nrfx_usbd_suspend();
   44192:	f003 fa0d 	bl	475b0 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   44196:	6823      	ldr	r3, [r4, #0]
   44198:	2b00      	cmp	r3, #0
   4419a:	f43f af4f 	beq.w	4403c <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   4419e:	2100      	movs	r1, #0
   441a0:	2005      	movs	r0, #5
   441a2:	e7e3      	b.n	4416c <usbd_work_handler+0x1f4>
		if (ctx->status_cb && dev_ready()) {
   441a4:	6822      	ldr	r2, [r4, #0]
   441a6:	2a00      	cmp	r2, #0
   441a8:	f43f af48 	beq.w	4403c <usbd_work_handler+0xc4>
   441ac:	2b00      	cmp	r3, #0
   441ae:	f43f af45 	beq.w	4403c <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_RESUME, NULL);
   441b2:	2100      	movs	r1, #0
   441b4:	2006      	movs	r0, #6
   441b6:	4790      	blx	r2
   441b8:	e740      	b.n	4403c <usbd_work_handler+0xc4>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   441ba:	f107 0510 	add.w	r5, r7, #16
   441be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   441c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   441c6:	4628      	mov	r0, r5
   441c8:	f00b fdad 	bl	4fd26 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
   441cc:	f7ff fea0 	bl	43f10 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   441d0:	4628      	mov	r0, r5
   441d2:	f00b fdaa 	bl	4fd2a <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
   441d6:	f857 3c28 	ldr.w	r3, [r7, #-40]
   441da:	2b00      	cmp	r3, #0
   441dc:	f43f af2e 	beq.w	4403c <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_RESET, NULL);
   441e0:	2100      	movs	r1, #0
   441e2:	2001      	movs	r0, #1
   441e4:	e7c2      	b.n	4416c <usbd_work_handler+0x1f4>
	if (ep_ctx->cfg.en) {
   441e6:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   441ea:	b17b      	cbz	r3, 4420c <usbd_work_handler+0x294>
		ep_ctx->read_pending = true;
   441ec:	2501      	movs	r5, #1
   441ee:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
   441f2:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
   441f6:	f7ff fd4d 	bl	43c94 <usbd_evt_alloc>
		if (!ev) {
   441fa:	b138      	cbz	r0, 4420c <usbd_work_handler+0x294>
		ev->evt.ep_evt.ep = ep_ctx;
   441fc:	4a0d      	ldr	r2, [pc, #52]	; (44234 <usbd_work_handler+0x2bc>)
		ev->evt_type = USBD_EVT_EP;
   441fe:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   44200:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   44202:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
   44204:	f7ff fcfe 	bl	43c04 <usbd_evt_put>
		usbd_work_schedule();
   44208:	f7ff fd02 	bl	43c10 <usbd_work_schedule>
			if (ctx->status_cb) {
   4420c:	f857 3c28 	ldr.w	r3, [r7, #-40]
   44210:	2b00      	cmp	r3, #0
   44212:	f43f af13 	beq.w	4403c <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SOF, NULL);
   44216:	2100      	movs	r1, #0
   44218:	200a      	movs	r0, #10
   4421a:	e7a7      	b.n	4416c <usbd_work_handler+0x1f4>
   4421c:	20006478 	.word	0x20006478
   44220:	200010f8 	.word	0x200010f8
   44224:	40027000 	.word	0x40027000
   44228:	2000647c 	.word	0x2000647c
   4422c:	200064b0 	.word	0x200064b0
   44230:	20006498 	.word	0x20006498
   44234:	200066e4 	.word	0x200066e4
	nrfx_power_usbevt_disable();
   44238:	f00c f814 	bl	50264 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   4423c:	f003 f9a0 	bl	47580 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   44240:	f002 fcae 	bl	46ba0 <nrfx_usbd_uninit>
	usbd_evt_flush();
   44244:	f7ff fd18 	bl	43c78 <usbd_evt_flush>
	ret = eps_ctx_init();
   44248:	f7ff fe62 	bl	43f10 <eps_ctx_init>
	nrfx_power_usbevt_enable();
   4424c:	f00c f803 	bl	50256 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   44250:	4801      	ldr	r0, [pc, #4]	; (44258 <usbd_work_handler+0x2e0>)
   44252:	f002 fdb7 	bl	46dc4 <nrfx_usbd_init>
}
   44256:	e6f1      	b.n	4403c <usbd_work_handler+0xc4>
   44258:	00043df5 	.word	0x00043df5

0004425c <usb_dc_attach>:
{
   4425c:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
   4425e:	4d1a      	ldr	r5, [pc, #104]	; (442c8 <usb_dc_attach+0x6c>)
   44260:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   44264:	bb5c      	cbnz	r4, 442be <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
   44266:	f105 0038 	add.w	r0, r5, #56	; 0x38
   4426a:	f00c fb49 	bl	50900 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   4426e:	4620      	mov	r0, r4
   44270:	f000 fd1c 	bl	44cac <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   44274:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
   44276:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   44278:	2101      	movs	r1, #1
   4427a:	2027      	movs	r0, #39	; 0x27
   4427c:	f7e8 fcc6 	bl	2cc0c <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
   44280:	4812      	ldr	r0, [pc, #72]	; (442cc <usb_dc_attach+0x70>)
   44282:	f002 fd9f 	bl	46dc4 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   44286:	4b12      	ldr	r3, [pc, #72]	; (442d0 <usb_dc_attach+0x74>)
   44288:	4298      	cmp	r0, r3
   4428a:	d11a      	bne.n	442c2 <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
   4428c:	f00b ffe3 	bl	50256 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   44290:	f7ff fe3e 	bl	43f10 <eps_ctx_init>
	if (ret == 0) {
   44294:	4604      	mov	r4, r0
   44296:	b910      	cbnz	r0, 4429e <usb_dc_attach+0x42>
		ctx->attached = true;
   44298:	2301      	movs	r3, #1
   4429a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   4429e:	4b0d      	ldr	r3, [pc, #52]	; (442d4 <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   442a0:	681b      	ldr	r3, [r3, #0]
   442a2:	b10b      	cbz	r3, 442a8 <usb_dc_attach+0x4c>
		usbd_work_schedule();
   442a4:	f7ff fcb4 	bl	43c10 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   442a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   442ac:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   442b0:	07db      	lsls	r3, r3, #31
   442b2:	d502      	bpl.n	442ba <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   442b4:	2000      	movs	r0, #0
   442b6:	f7ff fd63 	bl	43d80 <usb_dc_power_event_handler>
}
   442ba:	4620      	mov	r0, r4
   442bc:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   442be:	2400      	movs	r4, #0
   442c0:	e7fb      	b.n	442ba <usb_dc_attach+0x5e>
		return -EIO;
   442c2:	f06f 0404 	mvn.w	r4, #4
   442c6:	e7f8      	b.n	442ba <usb_dc_attach+0x5e>
   442c8:	20006478 	.word	0x20006478
   442cc:	00043df5 	.word	0x00043df5
   442d0:	0bad0000 	.word	0x0bad0000
   442d4:	20001334 	.word	0x20001334

000442d8 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   442d8:	4b07      	ldr	r3, [pc, #28]	; (442f8 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
   442da:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   442de:	b13a      	cbz	r2, 442f0 <usb_dc_set_address+0x18>
   442e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
   442e4:	2b00      	cmp	r3, #0
   442e6:	bf14      	ite	ne
   442e8:	2000      	movne	r0, #0
   442ea:	f06f 0012 	mvneq.w	r0, #18
   442ee:	4770      	bx	lr
   442f0:	f06f 0012 	mvn.w	r0, #18
}
   442f4:	4770      	bx	lr
   442f6:	bf00      	nop
   442f8:	20006478 	.word	0x20006478

000442fc <usb_dc_ep_configure>:
{
   442fc:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   442fe:	4b0f      	ldr	r3, [pc, #60]	; (4433c <usb_dc_ep_configure+0x40>)
	if (!dev_attached()) {
   44300:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   44304:	4604      	mov	r4, r0
	if (!dev_attached()) {
   44306:	b1b3      	cbz	r3, 44336 <usb_dc_ep_configure+0x3a>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   44308:	7805      	ldrb	r5, [r0, #0]
   4430a:	4628      	mov	r0, r5
   4430c:	f7ff fc4a 	bl	43ba4 <endpoint_ctx>
	if (!ep_ctx) {
   44310:	b910      	cbnz	r0, 44318 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
   44312:	f06f 0015 	mvn.w	r0, #21
}
   44316:	bd38      	pop	{r3, r4, r5, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   44318:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   4431a:	7923      	ldrb	r3, [r4, #4]
   4431c:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   4431e:	8861      	ldrh	r1, [r4, #2]
   44320:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   44322:	072b      	lsls	r3, r5, #28
   44324:	d402      	bmi.n	4432c <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   44326:	1e4b      	subs	r3, r1, #1
   44328:	420b      	tst	r3, r1
   4432a:	d1f2      	bne.n	44312 <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   4432c:	4628      	mov	r0, r5
   4432e:	f00c f81c 	bl	5036a <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   44332:	2000      	movs	r0, #0
   44334:	e7ef      	b.n	44316 <usb_dc_ep_configure+0x1a>
		return -ENODEV;
   44336:	f06f 0012 	mvn.w	r0, #18
   4433a:	e7ec      	b.n	44316 <usb_dc_ep_configure+0x1a>
   4433c:	20006478 	.word	0x20006478

00044340 <usb_dc_ep_set_stall>:
{
   44340:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   44342:	4b12      	ldr	r3, [pc, #72]	; (4438c <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
   44344:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   44348:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   4434a:	b1ca      	cbz	r2, 44380 <usb_dc_ep_set_stall+0x40>
   4434c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   44350:	b1b3      	cbz	r3, 44380 <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
   44352:	f7ff fc27 	bl	43ba4 <endpoint_ctx>
	if (!ep_ctx) {
   44356:	4604      	mov	r4, r0
   44358:	b1a8      	cbz	r0, 44386 <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
   4435a:	7a83      	ldrb	r3, [r0, #10]
   4435c:	2b01      	cmp	r3, #1
   4435e:	d012      	beq.n	44386 <usb_dc_ep_set_stall+0x46>
   44360:	d907      	bls.n	44372 <usb_dc_ep_set_stall+0x32>
   44362:	3b02      	subs	r3, #2
   44364:	2b01      	cmp	r3, #1
   44366:	d907      	bls.n	44378 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
   44368:	6963      	ldr	r3, [r4, #20]
   4436a:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
   4436c:	2000      	movs	r0, #0
   4436e:	60e0      	str	r0, [r4, #12]
}
   44370:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_setup_stall();
   44372:	f002 ff9b 	bl	472ac <nrfx_usbd_setup_stall>
		break;
   44376:	e7f7      	b.n	44368 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   44378:	4628      	mov	r0, r5
   4437a:	f002 ff0b 	bl	47194 <nrfx_usbd_ep_stall>
		break;
   4437e:	e7f3      	b.n	44368 <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
   44380:	f06f 0012 	mvn.w	r0, #18
   44384:	e7f4      	b.n	44370 <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
   44386:	f06f 0015 	mvn.w	r0, #21
   4438a:	e7f1      	b.n	44370 <usb_dc_ep_set_stall+0x30>
   4438c:	20006478 	.word	0x20006478

00044390 <usb_dc_ep_clear_stall>:
{
   44390:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   44392:	4b0e      	ldr	r3, [pc, #56]	; (443cc <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
   44394:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   44398:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   4439a:	b182      	cbz	r2, 443be <usb_dc_ep_clear_stall+0x2e>
   4439c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   443a0:	b16b      	cbz	r3, 443be <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
   443a2:	f7ff fbff 	bl	43ba4 <endpoint_ctx>
	if (!ep_ctx) {
   443a6:	b168      	cbz	r0, 443c4 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   443a8:	f015 0408 	ands.w	r4, r5, #8
   443ac:	d10a      	bne.n	443c4 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   443ae:	4628      	mov	r0, r5
   443b0:	f002 ff12 	bl	471d8 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   443b4:	4628      	mov	r0, r5
   443b6:	f003 f9a9 	bl	4770c <nrfx_usbd_ep_stall_clear>
	return 0;
   443ba:	4620      	mov	r0, r4
}
   443bc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   443be:	f06f 0012 	mvn.w	r0, #18
   443c2:	e7fb      	b.n	443bc <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
   443c4:	f06f 0015 	mvn.w	r0, #21
   443c8:	e7f8      	b.n	443bc <usb_dc_ep_clear_stall+0x2c>
   443ca:	bf00      	nop
   443cc:	20006478 	.word	0x20006478

000443d0 <usb_dc_ep_is_stalled>:
{
   443d0:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   443d2:	4b0c      	ldr	r3, [pc, #48]	; (44404 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
   443d4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   443d8:	4605      	mov	r5, r0
   443da:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
   443dc:	b162      	cbz	r2, 443f8 <usb_dc_ep_is_stalled+0x28>
   443de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   443e2:	b14b      	cbz	r3, 443f8 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
   443e4:	f7ff fbde 	bl	43ba4 <endpoint_ctx>
	if (!ep_ctx) {
   443e8:	b148      	cbz	r0, 443fe <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
   443ea:	b144      	cbz	r4, 443fe <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   443ec:	4628      	mov	r0, r5
   443ee:	f002 fed9 	bl	471a4 <nrfx_usbd_ep_stall_check>
   443f2:	7020      	strb	r0, [r4, #0]
	return 0;
   443f4:	2000      	movs	r0, #0
}
   443f6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   443f8:	f06f 0012 	mvn.w	r0, #18
   443fc:	e7fb      	b.n	443f6 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
   443fe:	f06f 0015 	mvn.w	r0, #21
   44402:	e7f8      	b.n	443f6 <usb_dc_ep_is_stalled+0x26>
   44404:	20006478 	.word	0x20006478

00044408 <usb_dc_ep_enable>:
{
   44408:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   4440a:	4e13      	ldr	r6, [pc, #76]	; (44458 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
   4440c:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
   44410:	4604      	mov	r4, r0
	if (!dev_attached()) {
   44412:	b1c3      	cbz	r3, 44446 <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
   44414:	f7ff fbc6 	bl	43ba4 <endpoint_ctx>
	if (!ep_ctx) {
   44418:	4605      	mov	r5, r0
   4441a:	b1b8      	cbz	r0, 4444c <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   4441c:	0723      	lsls	r3, r4, #28
   4441e:	d405      	bmi.n	4442c <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   44420:	4620      	mov	r0, r4
   44422:	f002 fed9 	bl	471d8 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   44426:	4620      	mov	r0, r4
   44428:	f003 f970 	bl	4770c <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
   4442c:	7a2b      	ldrb	r3, [r5, #8]
   4442e:	b983      	cbnz	r3, 44452 <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
   44430:	2301      	movs	r3, #1
   44432:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
   44434:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
   44438:	b90b      	cbnz	r3, 4443e <usb_dc_ep_enable+0x36>
	return 0;
   4443a:	2000      	movs	r0, #0
}
   4443c:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   4443e:	4620      	mov	r0, r4
   44440:	f003 f910 	bl	47664 <nrfx_usbd_ep_enable>
   44444:	e7f9      	b.n	4443a <usb_dc_ep_enable+0x32>
		return -ENODEV;
   44446:	f06f 0012 	mvn.w	r0, #18
   4444a:	e7f7      	b.n	4443c <usb_dc_ep_enable+0x34>
		return -EINVAL;
   4444c:	f06f 0015 	mvn.w	r0, #21
   44450:	e7f4      	b.n	4443c <usb_dc_ep_enable+0x34>
		return -EALREADY;
   44452:	f06f 0077 	mvn.w	r0, #119	; 0x77
   44456:	e7f1      	b.n	4443c <usb_dc_ep_enable+0x34>
   44458:	20006478 	.word	0x20006478

0004445c <usb_dc_ep_disable>:
{
   4445c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   4445e:	4b11      	ldr	r3, [pc, #68]	; (444a4 <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
   44460:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   44464:	4604      	mov	r4, r0
	if (!dev_attached() || !dev_ready()) {
   44466:	b19a      	cbz	r2, 44490 <usb_dc_ep_disable+0x34>
   44468:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   4446c:	b183      	cbz	r3, 44490 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
   4446e:	f7ff fb99 	bl	43ba4 <endpoint_ctx>
	if (!ep_ctx) {
   44472:	4605      	mov	r5, r0
   44474:	b178      	cbz	r0, 44496 <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
   44476:	7a03      	ldrb	r3, [r0, #8]
   44478:	b183      	cbz	r3, 4449c <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   4447a:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
   4447c:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   4447e:	f003 f8c5 	bl	4760c <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
   44482:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
   44484:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   44486:	f00b fc3b 	bl	4fd00 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   4448a:	722c      	strb	r4, [r5, #8]
	return 0;
   4448c:	4620      	mov	r0, r4
}
   4448e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   44490:	f06f 0012 	mvn.w	r0, #18
   44494:	e7fb      	b.n	4448e <usb_dc_ep_disable+0x32>
		return -EINVAL;
   44496:	f06f 0015 	mvn.w	r0, #21
   4449a:	e7f8      	b.n	4448e <usb_dc_ep_disable+0x32>
		return -EALREADY;
   4449c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   444a0:	e7f5      	b.n	4448e <usb_dc_ep_disable+0x32>
   444a2:	bf00      	nop
   444a4:	20006478 	.word	0x20006478

000444a8 <usb_dc_ep_write>:
{
   444a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
   444ac:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 44594 <usb_dc_ep_write+0xec>
{
   444b0:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
   444b2:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
   444b6:	b085      	sub	sp, #20
   444b8:	4607      	mov	r7, r0
   444ba:	4689      	mov	r9, r1
   444bc:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
   444be:	2b00      	cmp	r3, #0
   444c0:	d061      	beq.n	44586 <usb_dc_ep_write+0xde>
   444c2:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
   444c6:	2b00      	cmp	r3, #0
   444c8:	d05d      	beq.n	44586 <usb_dc_ep_write+0xde>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   444ca:	0603      	lsls	r3, r0, #24
   444cc:	d55e      	bpl.n	4458c <usb_dc_ep_write+0xe4>
	ep_ctx = endpoint_ctx(ep);
   444ce:	f7ff fb69 	bl	43ba4 <endpoint_ctx>
	if (!ep_ctx) {
   444d2:	4604      	mov	r4, r0
   444d4:	2800      	cmp	r0, #0
   444d6:	d059      	beq.n	4458c <usb_dc_ep_write+0xe4>
	if (!ep_ctx->cfg.en) {
   444d8:	7a03      	ldrb	r3, [r0, #8]
   444da:	2b00      	cmp	r3, #0
   444dc:	d056      	beq.n	4458c <usb_dc_ep_write+0xe4>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   444de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   444e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   444e6:	f108 0038 	add.w	r0, r8, #56	; 0x38
   444ea:	f00b fc1c 	bl	4fd26 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
   444ee:	7fa3      	ldrb	r3, [r4, #30]
   444f0:	b14b      	cbz	r3, 44506 <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
   444f2:	f108 0038 	add.w	r0, r8, #56	; 0x38
   444f6:	f00b fc18 	bl	4fd2a <k_mutex_unlock.isra.0>
		return -EAGAIN;
   444fa:	f06f 040a 	mvn.w	r4, #10
}
   444fe:	4620      	mov	r0, r4
   44500:	b005      	add	sp, #20
   44502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   44506:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
   44508:	b1c5      	cbz	r5, 4453c <usb_dc_ep_write+0x94>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   4450a:	b33b      	cbz	r3, 4455c <usb_dc_ep_write+0xb4>
	ep_ctx->write_in_progress = true;
   4450c:	2301      	movs	r3, #1
   4450e:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   44510:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   44514:	a901      	add	r1, sp, #4
   44516:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   44518:	e9cd 9501 	strd	r9, r5, [sp, #4]
   4451c:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   44520:	f002 fc92 	bl	46e48 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   44524:	4b1c      	ldr	r3, [pc, #112]	; (44598 <usb_dc_ep_write+0xf0>)
   44526:	4298      	cmp	r0, r3
   44528:	d029      	beq.n	4457e <usb_dc_ep_write+0xd6>
		ep_ctx->write_in_progress = false;
   4452a:	f884 801e 	strb.w	r8, [r4, #30]
		if (ret_bytes) {
   4452e:	bb1e      	cbnz	r6, 44578 <usb_dc_ep_write+0xd0>
		result = -EIO;
   44530:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
   44534:	4819      	ldr	r0, [pc, #100]	; (4459c <usb_dc_ep_write+0xf4>)
   44536:	f00b fbf8 	bl	4fd2a <k_mutex_unlock.isra.0>
	return result;
   4453a:	e7e0      	b.n	444fe <usb_dc_ep_write+0x56>
	if (!data_len && ep_ctx->trans_zlp) {
   4453c:	7fe2      	ldrb	r2, [r4, #31]
   4453e:	b102      	cbz	r2, 44542 <usb_dc_ep_write+0x9a>
		ep_ctx->trans_zlp = false;
   44540:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   44542:	2b00      	cmp	r3, #0
   44544:	d1e2      	bne.n	4450c <usb_dc_ep_write+0x64>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   44546:	f002 feb9 	bl	472bc <nrfx_usbd_last_setup_dir_get>
   4454a:	42b8      	cmp	r0, r7
   4454c:	d0de      	beq.n	4450c <usb_dc_ep_write+0x64>
		nrfx_usbd_setup_clear();
   4454e:	f002 fea5 	bl	4729c <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   44552:	4812      	ldr	r0, [pc, #72]	; (4459c <usb_dc_ep_write+0xf4>)
   44554:	f00b fbe9 	bl	4fd2a <k_mutex_unlock.isra.0>
		return 0;
   44558:	2400      	movs	r4, #0
   4455a:	e7d0      	b.n	444fe <usb_dc_ep_write+0x56>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   4455c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   44560:	42ab      	cmp	r3, r5
   44562:	d9f0      	bls.n	44546 <usb_dc_ep_write+0x9e>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   44564:	6862      	ldr	r2, [r4, #4]
   44566:	fbb5 f3f2 	udiv	r3, r5, r2
   4456a:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   4456e:	2b00      	cmp	r3, #0
   44570:	d1e9      	bne.n	44546 <usb_dc_ep_write+0x9e>
			ep_ctx->trans_zlp = true;
   44572:	2301      	movs	r3, #1
   44574:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
   44576:	e7e6      	b.n	44546 <usb_dc_ep_write+0x9e>
			*ret_bytes = 0;
   44578:	f8c6 8000 	str.w	r8, [r6]
   4457c:	e7d8      	b.n	44530 <usb_dc_ep_write+0x88>
		if (ret_bytes) {
   4457e:	b106      	cbz	r6, 44582 <usb_dc_ep_write+0xda>
			*ret_bytes = data_len;
   44580:	6035      	str	r5, [r6, #0]
	int result = 0;
   44582:	2400      	movs	r4, #0
   44584:	e7d6      	b.n	44534 <usb_dc_ep_write+0x8c>
		return -ENODEV;
   44586:	f06f 0412 	mvn.w	r4, #18
   4458a:	e7b8      	b.n	444fe <usb_dc_ep_write+0x56>
		return -EINVAL;
   4458c:	f06f 0415 	mvn.w	r4, #21
   44590:	e7b5      	b.n	444fe <usb_dc_ep_write+0x56>
   44592:	bf00      	nop
   44594:	20006478 	.word	0x20006478
   44598:	0bad0000 	.word	0x0bad0000
   4459c:	200064b0 	.word	0x200064b0

000445a0 <usb_dc_ep_read_wait>:
{
   445a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   445a4:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
   445a6:	4b20      	ldr	r3, [pc, #128]	; (44628 <usb_dc_ep_read_wait+0x88>)
{
   445a8:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
   445aa:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   445ae:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
   445b0:	2a00      	cmp	r2, #0
   445b2:	d033      	beq.n	4461c <usb_dc_ep_read_wait+0x7c>
   445b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   445b8:	b383      	cbz	r3, 4461c <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   445ba:	0603      	lsls	r3, r0, #24
   445bc:	d431      	bmi.n	44622 <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
   445be:	b901      	cbnz	r1, 445c2 <usb_dc_ep_read_wait+0x22>
   445c0:	bb7f      	cbnz	r7, 44622 <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
   445c2:	f7ff faef 	bl	43ba4 <endpoint_ctx>
	if (!ep_ctx) {
   445c6:	4604      	mov	r4, r0
   445c8:	b358      	cbz	r0, 44622 <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
   445ca:	7a03      	ldrb	r3, [r0, #8]
   445cc:	b34b      	cbz	r3, 44622 <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   445ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   445d2:	4816      	ldr	r0, [pc, #88]	; (4462c <usb_dc_ep_read_wait+0x8c>)
   445d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   445d8:	f00b fba5 	bl	4fd26 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   445dc:	68e3      	ldr	r3, [r4, #12]
   445de:	429f      	cmp	r7, r3
   445e0:	46b8      	mov	r8, r7
   445e2:	bf28      	it	cs
   445e4:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
   445e6:	b946      	cbnz	r6, 445fa <usb_dc_ep_read_wait+0x5a>
   445e8:	b93f      	cbnz	r7, 445fa <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
   445ea:	b105      	cbz	r5, 445ee <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
   445ec:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
   445ee:	480f      	ldr	r0, [pc, #60]	; (4462c <usb_dc_ep_read_wait+0x8c>)
   445f0:	f00b fb9b 	bl	4fd2a <k_mutex_unlock.isra.0>
		return 0;
   445f4:	2000      	movs	r0, #0
}
   445f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   445fa:	69a1      	ldr	r1, [r4, #24]
   445fc:	4642      	mov	r2, r8
   445fe:	4630      	mov	r0, r6
   44600:	f007 fb2a 	bl	4bc58 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   44604:	69a3      	ldr	r3, [r4, #24]
   44606:	4443      	add	r3, r8
   44608:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   4460a:	68e3      	ldr	r3, [r4, #12]
   4460c:	eba3 0308 	sub.w	r3, r3, r8
   44610:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   44612:	2d00      	cmp	r5, #0
   44614:	d0eb      	beq.n	445ee <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
   44616:	f8c5 8000 	str.w	r8, [r5]
   4461a:	e7e8      	b.n	445ee <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
   4461c:	f06f 0012 	mvn.w	r0, #18
   44620:	e7e9      	b.n	445f6 <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
   44622:	f06f 0015 	mvn.w	r0, #21
   44626:	e7e6      	b.n	445f6 <usb_dc_ep_read_wait+0x56>
   44628:	20006478 	.word	0x20006478
   4462c:	200064b0 	.word	0x200064b0

00044630 <usb_dc_ep_read_continue>:
{
   44630:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   44632:	4d1e      	ldr	r5, [pc, #120]	; (446ac <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
   44634:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
   44638:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
   4463a:	b382      	cbz	r2, 4469e <usb_dc_ep_read_continue+0x6e>
   4463c:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   44640:	b36a      	cbz	r2, 4469e <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   44642:	061b      	lsls	r3, r3, #24
   44644:	d42e      	bmi.n	446a4 <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
   44646:	f7ff faad 	bl	43ba4 <endpoint_ctx>
	if (!ep_ctx) {
   4464a:	4604      	mov	r4, r0
   4464c:	b350      	cbz	r0, 446a4 <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
   4464e:	7a03      	ldrb	r3, [r0, #8]
   44650:	b343      	cbz	r3, 446a4 <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   44652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4465a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   4465e:	f00b fb62 	bl	4fd26 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
   44662:	68e3      	ldr	r3, [r4, #12]
   44664:	b9b3      	cbnz	r3, 44694 <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
   44666:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
   44668:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
   4466a:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
   4466c:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
   4466e:	7f63      	ldrb	r3, [r4, #29]
   44670:	b183      	cbz	r3, 44694 <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
   44672:	f7ff fb0f 	bl	43c94 <usbd_evt_alloc>
			if (!ev) {
   44676:	b930      	cbnz	r0, 44686 <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
   44678:	f105 0038 	add.w	r0, r5, #56	; 0x38
   4467c:	f00b fb55 	bl	4fd2a <k_mutex_unlock.isra.0>
				return -ENOMEM;
   44680:	f06f 000b 	mvn.w	r0, #11
}
   44684:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
   44686:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   44688:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   4468a:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
   4468c:	f7ff faba 	bl	43c04 <usbd_evt_put>
			usbd_work_schedule();
   44690:	f7ff fabe 	bl	43c10 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
   44694:	4806      	ldr	r0, [pc, #24]	; (446b0 <usb_dc_ep_read_continue+0x80>)
   44696:	f00b fb48 	bl	4fd2a <k_mutex_unlock.isra.0>
	return 0;
   4469a:	2000      	movs	r0, #0
   4469c:	e7f2      	b.n	44684 <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
   4469e:	f06f 0012 	mvn.w	r0, #18
   446a2:	e7ef      	b.n	44684 <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
   446a4:	f06f 0015 	mvn.w	r0, #21
   446a8:	e7ec      	b.n	44684 <usb_dc_ep_read_continue+0x54>
   446aa:	bf00      	nop
   446ac:	20006478 	.word	0x20006478
   446b0:	200064b0 	.word	0x200064b0

000446b4 <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
   446b4:	4b08      	ldr	r3, [pc, #32]	; (446d8 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
   446b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   446ba:	b510      	push	{r4, lr}
   446bc:	460c      	mov	r4, r1
	if (!dev_attached()) {
   446be:	b12b      	cbz	r3, 446cc <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
   446c0:	f7ff fa70 	bl	43ba4 <endpoint_ctx>
	if (!ep_ctx) {
   446c4:	b128      	cbz	r0, 446d2 <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
   446c6:	6004      	str	r4, [r0, #0]
	return 0;
   446c8:	2000      	movs	r0, #0
}
   446ca:	bd10      	pop	{r4, pc}
		return -ENODEV;
   446cc:	f06f 0012 	mvn.w	r0, #18
   446d0:	e7fb      	b.n	446ca <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
   446d2:	f06f 0015 	mvn.w	r0, #21
   446d6:	e7f8      	b.n	446ca <usb_dc_ep_set_callback+0x16>
   446d8:	20006478 	.word	0x20006478

000446dc <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   446dc:	4b01      	ldr	r3, [pc, #4]	; (446e4 <usb_dc_set_status_callback+0x8>)
   446de:	6018      	str	r0, [r3, #0]
}
   446e0:	4770      	bx	lr
   446e2:	bf00      	nop
   446e4:	20006478 	.word	0x20006478

000446e8 <usb_dc_ep_mps>:
{
   446e8:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   446ea:	4b07      	ldr	r3, [pc, #28]	; (44708 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
   446ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   446f0:	b123      	cbz	r3, 446fc <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   446f2:	f7ff fa57 	bl	43ba4 <endpoint_ctx>
	if (!ep_ctx) {
   446f6:	b120      	cbz	r0, 44702 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   446f8:	6840      	ldr	r0, [r0, #4]
}
   446fa:	bd08      	pop	{r3, pc}
		return -ENODEV;
   446fc:	f06f 0012 	mvn.w	r0, #18
   44700:	e7fb      	b.n	446fa <usb_dc_ep_mps+0x12>
		return -EINVAL;
   44702:	f06f 0015 	mvn.w	r0, #21
   44706:	e7f8      	b.n	446fa <usb_dc_ep_mps+0x12>
   44708:	20006478 	.word	0x20006478

0004470c <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   4470c:	2811      	cmp	r0, #17
   4470e:	d80e      	bhi.n	4472e <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   44710:	4a08      	ldr	r2, [pc, #32]	; (44734 <adc_gain_invert+0x28>)
   44712:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   44716:	b153      	cbz	r3, 4472e <adc_gain_invert+0x22>
   44718:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   4471c:	7852      	ldrb	r2, [r2, #1]
   4471e:	b132      	cbz	r2, 4472e <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   44720:	6808      	ldr	r0, [r1, #0]
   44722:	4343      	muls	r3, r0
			rv = 0;
   44724:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   44726:	fb93 f3f2 	sdiv	r3, r3, r2
   4472a:	600b      	str	r3, [r1, #0]
			rv = 0;
   4472c:	4770      	bx	lr
	int rv = -EINVAL;
   4472e:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   44732:	4770      	bx	lr
   44734:	0005432c 	.word	0x0005432c

00044738 <adc_nrfx_channel_setup>:
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
   44738:	7908      	ldrb	r0, [r1, #4]
{
   4473a:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   4473c:	f000 041f 	and.w	r4, r0, #31

	if (channel_id >= SAADC_CH_NUM) {
   44740:	2c07      	cmp	r4, #7
   44742:	d81f      	bhi.n	44784 <adc_nrfx_channel_setup+0x4c>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
   44744:	780b      	ldrb	r3, [r1, #0]
   44746:	2b09      	cmp	r3, #9
   44748:	d81c      	bhi.n	44784 <adc_nrfx_channel_setup+0x4c>
   4474a:	e8df f003 	tbb	[pc, r3]
   4474e:	0606      	.short	0x0606
   44750:	1b060606 	.word	0x1b060606
   44754:	201b1e05 	.word	0x201b1e05
		break;
	case ADC_GAIN_1_2:
		config.gain = NRF_SAADC_GAIN1_2;
		break;
	case ADC_GAIN_1:
		config.gain = NRF_SAADC_GAIN1;
   44758:	2305      	movs	r3, #5
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
   4475a:	784a      	ldrb	r2, [r1, #1]
   4475c:	2a03      	cmp	r2, #3
   4475e:	d018      	beq.n	44792 <adc_nrfx_channel_setup+0x5a>
   44760:	2a04      	cmp	r2, #4
   44762:	d10f      	bne.n	44784 <adc_nrfx_channel_setup+0x4c>
	nrf_saadc_channel_config_t config = {
   44764:	2500      	movs	r5, #0
	default:
		LOG_ERR("Selected ADC reference is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->acquisition_time) {
   44766:	884a      	ldrh	r2, [r1, #2]
   44768:	f244 060a 	movw	r6, #16394	; 0x400a
   4476c:	42b2      	cmp	r2, r6
   4476e:	d044      	beq.n	447fa <adc_nrfx_channel_setup+0xc2>
   44770:	d811      	bhi.n	44796 <adc_nrfx_channel_setup+0x5e>
   44772:	f244 0603 	movw	r6, #16387	; 0x4003
   44776:	42b2      	cmp	r2, r6
   44778:	d03b      	beq.n	447f2 <adc_nrfx_channel_setup+0xba>
   4477a:	f244 0605 	movw	r6, #16389	; 0x4005
   4477e:	42b2      	cmp	r2, r6
   44780:	d039      	beq.n	447f6 <adc_nrfx_channel_setup+0xbe>
   44782:	b3d2      	cbz	r2, 447fa <adc_nrfx_channel_setup+0xc2>
   44784:	f06f 0015 	mvn.w	r0, #21
   44788:	e032      	b.n	447f0 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
   4478a:	2306      	movs	r3, #6
		break;
   4478c:	e7e5      	b.n	4475a <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   4478e:	2307      	movs	r3, #7
		break;
   44790:	e7e3      	b.n	4475a <adc_nrfx_channel_setup+0x22>
	switch (channel_cfg->reference) {
   44792:	2501      	movs	r5, #1
   44794:	e7e7      	b.n	44766 <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
   44796:	f244 0614 	movw	r6, #16404	; 0x4014
   4479a:	42b2      	cmp	r2, r6
   4479c:	d02f      	beq.n	447fe <adc_nrfx_channel_setup+0xc6>
   4479e:	f244 0628 	movw	r6, #16424	; 0x4028
   447a2:	42b2      	cmp	r2, r6
   447a4:	d02d      	beq.n	44802 <adc_nrfx_channel_setup+0xca>
   447a6:	f244 060f 	movw	r6, #16399	; 0x400f
   447aa:	42b2      	cmp	r2, r6
   447ac:	d1ea      	bne.n	44784 <adc_nrfx_channel_setup+0x4c>
	case ADC_ACQ_TIME_DEFAULT:
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10):
		config.acq_time = NRF_SAADC_ACQTIME_10US;
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 15):
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   447ae:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   447b0:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   447b4:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   447b6:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   447ba:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   447be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   447c2:	0122      	lsls	r2, r4, #4
   447c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   447c8:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   447cc:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   447ce:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   447d2:	0123      	lsls	r3, r4, #4
   447d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   447d8:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   447dc:	798a      	ldrb	r2, [r1, #6]
   447de:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   447e2:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   447e6:	4b08      	ldr	r3, [pc, #32]	; (44808 <adc_nrfx_channel_setup+0xd0>)
   447e8:	794a      	ldrb	r2, [r1, #5]
   447ea:	4423      	add	r3, r4
   447ec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

	return 0;
}
   447f0:	bd70      	pop	{r4, r5, r6, pc}
	nrf_saadc_channel_config_t config = {
   447f2:	2200      	movs	r2, #0
   447f4:	e7dc      	b.n	447b0 <adc_nrfx_channel_setup+0x78>
	switch (channel_cfg->acquisition_time) {
   447f6:	2201      	movs	r2, #1
   447f8:	e7da      	b.n	447b0 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   447fa:	2202      	movs	r2, #2
   447fc:	e7d8      	b.n	447b0 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   447fe:	2204      	movs	r2, #4
   44800:	e7d6      	b.n	447b0 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   44802:	2205      	movs	r2, #5
   44804:	e7d4      	b.n	447b0 <adc_nrfx_channel_setup+0x78>
   44806:	bf00      	nop
   44808:	20000198 	.word	0x20000198

0004480c <adc_context_start_sampling.isra.0>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   4480c:	4b04      	ldr	r3, [pc, #16]	; (44820 <adc_context_start_sampling.isra.0+0x14>)
   4480e:	2201      	movs	r2, #1
   44810:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   44814:	b108      	cbz	r0, 4481a <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   44816:	60da      	str	r2, [r3, #12]
}
   44818:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4481a:	601a      	str	r2, [r3, #0]
   4481c:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   4481e:	4770      	bx	lr
   44820:	40007000 	.word	0x40007000

00044824 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   44824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   44826:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
   44828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4482c:	4856      	ldr	r0, [pc, #344]	; (44988 <adc_nrfx_read+0x164>)
   4482e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44832:	f003 fc43 	bl	480bc <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   44836:	686e      	ldr	r6, [r5, #4]
	if (!selected_channels ||
   44838:	1e73      	subs	r3, r6, #1
   4483a:	2bfe      	cmp	r3, #254	; 0xfe
   4483c:	d83c      	bhi.n	448b8 <adc_nrfx_read+0x94>
   4483e:	2300      	movs	r3, #0
    p_reg->CH[channel].PSELP = pselp;
   44840:	4852      	ldr	r0, [pc, #328]	; (4498c <adc_nrfx_read+0x168>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   44842:	4f53      	ldr	r7, [pc, #332]	; (44990 <adc_nrfx_read+0x16c>)
	active_channels = 0U;
   44844:	461a      	mov	r2, r3
		if (selected_channels & BIT(channel_id)) {
   44846:	fa26 f103 	lsr.w	r1, r6, r3
   4484a:	f011 0101 	ands.w	r1, r1, #1
   4484e:	d026      	beq.n	4489e <adc_nrfx_read+0x7a>
			if (m_data.positive_inputs[channel_id] == 0U) {
   44850:	f817 c003 	ldrb.w	ip, [r7, r3]
   44854:	f1bc 0f00 	cmp.w	ip, #0
   44858:	d02e      	beq.n	448b8 <adc_nrfx_read+0x94>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   4485a:	eb00 1e03 	add.w	lr, r0, r3, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   4485e:	7c6c      	ldrb	r4, [r5, #17]
   44860:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
   44864:	3c00      	subs	r4, #0
   44866:	bf18      	it	ne
   44868:	2401      	movne	r4, #1
   4486a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   4486e:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
   44872:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   44876:	f103 0151 	add.w	r1, r3, #81	; 0x51
   4487a:	0109      	lsls	r1, r1, #4
			++active_channels;
   4487c:	3201      	adds	r2, #1
   4487e:	f840 c001 	str.w	ip, [r0, r1]
   44882:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   44884:	3301      	adds	r3, #1
   44886:	2b08      	cmp	r3, #8
   44888:	d1dd      	bne.n	44846 <adc_nrfx_read+0x22>
	switch (sequence->resolution) {
   4488a:	7c2b      	ldrb	r3, [r5, #16]
   4488c:	3b08      	subs	r3, #8
   4488e:	2b06      	cmp	r3, #6
   44890:	d812      	bhi.n	448b8 <adc_nrfx_read+0x94>
   44892:	e8df f003 	tbb	[pc, r3]
   44896:	1109      	.short	0x1109
   44898:	1119111d 	.word	0x1119111d
   4489c:	1b          	.byte	0x1b
   4489d:	00          	.byte	0x00
   4489e:	f103 0451 	add.w	r4, r3, #81	; 0x51
   448a2:	0124      	lsls	r4, r4, #4
   448a4:	5101      	str	r1, [r0, r4]
}
   448a6:	e7ed      	b.n	44884 <adc_nrfx_read+0x60>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   448a8:	2300      	movs	r3, #0
    p_reg->RESOLUTION = resolution;
   448aa:	4938      	ldr	r1, [pc, #224]	; (4498c <adc_nrfx_read+0x168>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   448ac:	2a01      	cmp	r2, #1
   448ae:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   448b2:	7c6b      	ldrb	r3, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   448b4:	d90e      	bls.n	448d4 <adc_nrfx_read+0xb0>
   448b6:	b17b      	cbz	r3, 448d8 <adc_nrfx_read+0xb4>
		return -EINVAL;
   448b8:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   448bc:	4832      	ldr	r0, [pc, #200]	; (44988 <adc_nrfx_read+0x164>)
   448be:	f003 fbd7 	bl	48070 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   448c2:	4620      	mov	r0, r4
   448c4:	b003      	add	sp, #12
   448c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   448c8:	2302      	movs	r3, #2
		break;
   448ca:	e7ee      	b.n	448aa <adc_nrfx_read+0x86>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   448cc:	2303      	movs	r3, #3
		break;
   448ce:	e7ec      	b.n	448aa <adc_nrfx_read+0x86>
	switch (sequence->resolution) {
   448d0:	2301      	movs	r3, #1
   448d2:	e7ea      	b.n	448aa <adc_nrfx_read+0x86>
	switch (sequence->oversampling) {
   448d4:	2b08      	cmp	r3, #8
   448d6:	d8ef      	bhi.n	448b8 <adc_nrfx_read+0x94>
    p_reg->OVERSAMPLE = oversample;
   448d8:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   448dc:	6829      	ldr	r1, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   448de:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   448e0:	b111      	cbz	r1, 448e8 <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   448e2:	8989      	ldrh	r1, [r1, #12]
   448e4:	fb01 3303 	mla	r3, r1, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   448e8:	68e9      	ldr	r1, [r5, #12]
   448ea:	4299      	cmp	r1, r3
   448ec:	d349      	bcc.n	44982 <adc_nrfx_read+0x15e>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   448ee:	4b27      	ldr	r3, [pc, #156]	; (4498c <adc_nrfx_read+0x168>)
   448f0:	68a9      	ldr	r1, [r5, #8]
   448f2:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   448f6:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
   448f8:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   448fc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   448fe:	4c25      	ldr	r4, [pc, #148]	; (44994 <adc_nrfx_read+0x170>)
   44900:	f104 0674 	add.w	r6, r4, #116	; 0x74
   44904:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   44906:	683b      	ldr	r3, [r7, #0]
   44908:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
   4490a:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
   4490c:	2600      	movs	r6, #0
   4490e:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
   44910:	4627      	mov	r7, r4
   44912:	b38b      	cbz	r3, 44978 <adc_nrfx_read+0x154>
		ctx->options = *sequence->options;
   44914:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   44916:	f104 0588 	add.w	r5, r4, #136	; 0x88
   4491a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   4491e:	6765      	str	r5, [r4, #116]	; 0x74
		ctx->sampling_index = 0U;
   44920:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   44924:	b340      	cbz	r0, 44978 <adc_nrfx_read+0x154>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   44926:	f3bf 8f5b 	dmb	ish
   4492a:	e857 3f00 	ldrex	r3, [r7]
   4492e:	e847 6200 	strex	r2, r6, [r7]
   44932:	2a00      	cmp	r2, #0
   44934:	d1f9      	bne.n	4492a <adc_nrfx_read+0x106>
   44936:	f3bf 8f5b 	dmb	ish
   4493a:	4917      	ldr	r1, [pc, #92]	; (44998 <adc_nrfx_read+0x174>)
   4493c:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   44940:	4a16      	ldr	r2, [pc, #88]	; (4499c <adc_nrfx_read+0x178>)
   44942:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   44946:	460f      	mov	r7, r1
   44948:	4631      	mov	r1, r6
   4494a:	fbe5 7100 	umlal	r7, r1, r5, r0
   4494e:	2300      	movs	r3, #0
   44950:	4638      	mov	r0, r7
   44952:	f7e1 fbd5 	bl	26100 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   44956:	2200      	movs	r2, #0
   44958:	e9cd 0100 	strd	r0, r1, [sp]
   4495c:	2300      	movs	r3, #0
   4495e:	f104 0008 	add.w	r0, r4, #8
   44962:	f004 faa7 	bl	48eb4 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   44966:	480e      	ldr	r0, [pc, #56]	; (449a0 <adc_nrfx_read+0x17c>)
   44968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4496c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44970:	f003 fba4 	bl	480bc <z_impl_k_sem_take>
	return ctx->status;
   44974:	6f24      	ldr	r4, [r4, #112]	; 0x70
	return error;
   44976:	e7a1      	b.n	448bc <adc_nrfx_read+0x98>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   44978:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   4497c:	f7ff ff46 	bl	4480c <adc_context_start_sampling.isra.0>
   44980:	e7f1      	b.n	44966 <adc_nrfx_read+0x142>
		return -ENOMEM;
   44982:	f06f 040b 	mvn.w	r4, #11
   44986:	e799      	b.n	448bc <adc_nrfx_read+0x98>
   44988:	200001d8 	.word	0x200001d8
   4498c:	40007000 	.word	0x40007000
   44990:	20000238 	.word	0x20000238
   44994:	20000198 	.word	0x20000198
   44998:	000f423f 	.word	0x000f423f
   4499c:	000f4240 	.word	0x000f4240
   449a0:	200001f0 	.word	0x200001f0

000449a4 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   449a4:	4b0e      	ldr	r3, [pc, #56]	; (449e0 <init_saadc+0x3c>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   449a6:	b510      	push	{r4, lr}
   449a8:	2400      	movs	r4, #0
   449aa:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   449ae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   449b2:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   449b6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   449ba:	2212      	movs	r2, #18
   449bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   449c0:	2007      	movs	r0, #7
   449c2:	f7e8 f8f3 	bl	2cbac <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   449c6:	4622      	mov	r2, r4
   449c8:	2101      	movs	r1, #1
   449ca:	2007      	movs	r0, #7
   449cc:	f7e8 f91e 	bl	2cc0c <z_arm_irq_priority_set>
	return sem->count;
   449d0:	4804      	ldr	r0, [pc, #16]	; (449e4 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   449d2:	6c83      	ldr	r3, [r0, #72]	; 0x48
   449d4:	b913      	cbnz	r3, 449dc <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   449d6:	3040      	adds	r0, #64	; 0x40
   449d8:	f003 fb4a 	bl	48070 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   449dc:	2000      	movs	r0, #0
   449de:	bd10      	pop	{r4, pc}
   449e0:	40007000 	.word	0x40007000
   449e4:	20000198 	.word	0x20000198

000449e8 <saadc_irq_handler>:
{
   449e8:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   449ea:	4b30      	ldr	r3, [pc, #192]	; (44aac <saadc_irq_handler+0xc4>)
   449ec:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   449f0:	2a00      	cmp	r2, #0
   449f2:	d04d      	beq.n	44a90 <saadc_irq_handler+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   449f4:	2200      	movs	r2, #0
   449f6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   449fa:	4c2d      	ldr	r4, [pc, #180]	; (44ab0 <saadc_irq_handler+0xc8>)
   449fc:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   44a00:	2101      	movs	r1, #1
   44a02:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   44a04:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   44a08:	6f63      	ldr	r3, [r4, #116]	; 0x74
   44a0a:	4625      	mov	r5, r4
   44a0c:	b3db      	cbz	r3, 44a86 <saadc_irq_handler+0x9e>
		adc_sequence_callback callback = ctx->options.callback;
   44a0e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   44a12:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   44a16:	b133      	cbz	r3, 44a26 <saadc_irq_handler+0x3e>
			action = callback(dev,
   44a18:	f104 0174 	add.w	r1, r4, #116	; 0x74
   44a1c:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   44a1e:	2801      	cmp	r0, #1
   44a20:	d014      	beq.n	44a4c <saadc_irq_handler+0x64>
   44a22:	2802      	cmp	r0, #2
   44a24:	d029      	beq.n	44a7a <saadc_irq_handler+0x92>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   44a26:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   44a2a:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   44a2e:	429a      	cmp	r2, r3
   44a30:	d923      	bls.n	44a7a <saadc_irq_handler+0x92>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   44a32:	3301      	adds	r3, #1
   44a34:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   44a38:	4b1c      	ldr	r3, [pc, #112]	; (44aac <saadc_irq_handler+0xc4>)
   44a3a:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   44a3e:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   44a42:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   44a44:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   44a48:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   44a4c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   44a50:	b92b      	cbnz	r3, 44a5e <saadc_irq_handler+0x76>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
   44a52:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
}
   44a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   44a5a:	f7ff bed7 	b.w	4480c <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   44a5e:	f3bf 8f5b 	dmb	ish
   44a62:	e855 3f00 	ldrex	r3, [r5]
   44a66:	1e5a      	subs	r2, r3, #1
   44a68:	e845 2100 	strex	r1, r2, [r5]
   44a6c:	2900      	cmp	r1, #0
   44a6e:	d1f8      	bne.n	44a62 <saadc_irq_handler+0x7a>
   44a70:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   44a74:	2b01      	cmp	r3, #1
   44a76:	dcec      	bgt.n	44a52 <saadc_irq_handler+0x6a>
   44a78:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   44a7a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   44a7e:	b113      	cbz	r3, 44a86 <saadc_irq_handler+0x9e>
	z_impl_k_timer_stop(timer);
   44a80:	480c      	ldr	r0, [pc, #48]	; (44ab4 <saadc_irq_handler+0xcc>)
   44a82:	f00c faa2 	bl	50fca <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   44a86:	480c      	ldr	r0, [pc, #48]	; (44ab8 <saadc_irq_handler+0xd0>)
   44a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   44a8c:	f003 baf0 	b.w	48070 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   44a90:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   44a94:	2900      	cmp	r1, #0
   44a96:	d0ef      	beq.n	44a78 <saadc_irq_handler+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   44a98:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   44a9c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   44aa0:	2201      	movs	r2, #1
   44aa2:	609a      	str	r2, [r3, #8]
   44aa4:	601a      	str	r2, [r3, #0]
   44aa6:	605a      	str	r2, [r3, #4]
}
   44aa8:	e7e6      	b.n	44a78 <saadc_irq_handler+0x90>
   44aaa:	bf00      	nop
   44aac:	40007000 	.word	0x40007000
   44ab0:	20000198 	.word	0x20000198
   44ab4:	200001a0 	.word	0x200001a0
   44ab8:	200001f0 	.word	0x200001f0

00044abc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   44abc:	4b08      	ldr	r3, [pc, #32]	; (44ae0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   44abe:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   44ac0:	1ac3      	subs	r3, r0, r3
{
   44ac2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   44ac4:	4907      	ldr	r1, [pc, #28]	; (44ae4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   44ac6:	109b      	asrs	r3, r3, #2
{
   44ac8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   44aca:	4359      	muls	r1, r3
   44acc:	4806      	ldr	r0, [pc, #24]	; (44ae8 <onoff_stop+0x2c>)
   44ace:	2240      	movs	r2, #64	; 0x40
   44ad0:	f00b f992 	bl	4fdf8 <stop>
	notify(mgr, res);
   44ad4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   44ad6:	4601      	mov	r1, r0
	notify(mgr, res);
   44ad8:	4620      	mov	r0, r4
}
   44ada:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   44ade:	4718      	bx	r3
   44ae0:	20006d1c 	.word	0x20006d1c
   44ae4:	b6db6db7 	.word	0xb6db6db7
   44ae8:	0005141c 	.word	0x0005141c

00044aec <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   44aec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   44aee:	4c0c      	ldr	r4, [pc, #48]	; (44b20 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   44af0:	4a0c      	ldr	r2, [pc, #48]	; (44b24 <onoff_start+0x38>)
   44af2:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   44af4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   44af6:	9300      	str	r3, [sp, #0]
{
   44af8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   44afa:	460b      	mov	r3, r1
   44afc:	490a      	ldr	r1, [pc, #40]	; (44b28 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   44afe:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   44b00:	4361      	muls	r1, r4
{
   44b02:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   44b04:	4809      	ldr	r0, [pc, #36]	; (44b2c <onoff_start+0x40>)
   44b06:	f00b f9a4 	bl	4fe52 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   44b0a:	1e01      	subs	r1, r0, #0
   44b0c:	da05      	bge.n	44b1a <onoff_start+0x2e>
		notify(mgr, err);
   44b0e:	4630      	mov	r0, r6
   44b10:	462b      	mov	r3, r5
	}
}
   44b12:	b002      	add	sp, #8
   44b14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   44b18:	4718      	bx	r3
}
   44b1a:	b002      	add	sp, #8
   44b1c:	bd70      	pop	{r4, r5, r6, pc}
   44b1e:	bf00      	nop
   44b20:	20006d1c 	.word	0x20006d1c
   44b24:	0004febf 	.word	0x0004febf
   44b28:	b6db6db7 	.word	0xb6db6db7
   44b2c:	0005141c 	.word	0x0005141c

00044b30 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   44b30:	2200      	movs	r2, #0
{
   44b32:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   44b34:	2101      	movs	r1, #1
{
   44b36:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   44b38:	4610      	mov	r0, r2
   44b3a:	f7e8 f867 	bl	2cc0c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   44b3e:	2000      	movs	r0, #0
   44b40:	f7e8 f834 	bl	2cbac <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   44b44:	480f      	ldr	r0, [pc, #60]	; (44b84 <clk_init+0x54>)
   44b46:	f001 f97d 	bl	45e44 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   44b4a:	4b0f      	ldr	r3, [pc, #60]	; (44b88 <clk_init+0x58>)
   44b4c:	4298      	cmp	r0, r3
   44b4e:	d115      	bne.n	44b7c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   44b50:	f001 f988 	bl	45e64 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   44b54:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   44b56:	490d      	ldr	r1, [pc, #52]	; (44b8c <clk_init+0x5c>)
   44b58:	4630      	mov	r0, r6
   44b5a:	f004 ffd3 	bl	49b04 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   44b5e:	2800      	cmp	r0, #0
   44b60:	db0b      	blt.n	44b7a <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   44b62:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   44b64:	4909      	ldr	r1, [pc, #36]	; (44b8c <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   44b66:	2501      	movs	r5, #1
   44b68:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   44b6a:	f104 001c 	add.w	r0, r4, #28
   44b6e:	f004 ffc9 	bl	49b04 <onoff_manager_init>
		if (err < 0) {
   44b72:	2800      	cmp	r0, #0
   44b74:	db01      	blt.n	44b7a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   44b76:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   44b78:	2000      	movs	r0, #0
}
   44b7a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   44b7c:	f06f 0004 	mvn.w	r0, #4
   44b80:	e7fb      	b.n	44b7a <clk_init+0x4a>
   44b82:	bf00      	nop
   44b84:	00044bc5 	.word	0x00044bc5
   44b88:	0bad0000 	.word	0x0bad0000
   44b8c:	0005398c 	.word	0x0005398c

00044b90 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   44b90:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   44b92:	230c      	movs	r3, #12
   44b94:	4809      	ldr	r0, [pc, #36]	; (44bbc <clkstarted_handle.constprop.0+0x2c>)
   44b96:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   44b98:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   44b9a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   44b9c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   44ba0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   44ba2:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   44ba4:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   44ba6:	4418      	add	r0, r3
   44ba8:	f00b f913 	bl	4fdd2 <set_on_state>
	if (callback) {
   44bac:	b12d      	cbz	r5, 44bba <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   44bae:	4632      	mov	r2, r6
   44bb0:	462b      	mov	r3, r5
   44bb2:	4803      	ldr	r0, [pc, #12]	; (44bc0 <clkstarted_handle.constprop.0+0x30>)
}
   44bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   44bb8:	4718      	bx	r3
}
   44bba:	bd70      	pop	{r4, r5, r6, pc}
   44bbc:	20006d1c 	.word	0x20006d1c
   44bc0:	0005141c 	.word	0x0005141c

00044bc4 <clock_event_handler>:
	switch (event) {
   44bc4:	b110      	cbz	r0, 44bcc <clock_event_handler+0x8>
   44bc6:	2801      	cmp	r0, #1
   44bc8:	d004      	beq.n	44bd4 <clock_event_handler+0x10>
   44bca:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   44bcc:	4b03      	ldr	r3, [pc, #12]	; (44bdc <clock_event_handler+0x18>)
   44bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   44bd0:	075b      	lsls	r3, r3, #29
   44bd2:	d101      	bne.n	44bd8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   44bd4:	f7ff bfdc 	b.w	44b90 <clkstarted_handle.constprop.0>
}
   44bd8:	4770      	bx	lr
   44bda:	bf00      	nop
   44bdc:	20006d1c 	.word	0x20006d1c

00044be0 <generic_hfclk_start>:
{
   44be0:	b508      	push	{r3, lr}
	__asm__ volatile(
   44be2:	f04f 0320 	mov.w	r3, #32
   44be6:	f3ef 8111 	mrs	r1, BASEPRI
   44bea:	f383 8812 	msr	BASEPRI_MAX, r3
   44bee:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   44bf2:	4a12      	ldr	r2, [pc, #72]	; (44c3c <generic_hfclk_start+0x5c>)
   44bf4:	6813      	ldr	r3, [r2, #0]
   44bf6:	f043 0002 	orr.w	r0, r3, #2
   44bfa:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   44bfc:	07da      	lsls	r2, r3, #31
   44bfe:	d408      	bmi.n	44c12 <generic_hfclk_start+0x32>
	__asm__ volatile(
   44c00:	f381 8811 	msr	BASEPRI, r1
   44c04:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   44c08:	2001      	movs	r0, #1
}
   44c0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   44c0e:	f00b ba84 	b.w	5011a <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   44c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   44c16:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   44c1a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   44c1e:	07d3      	lsls	r3, r2, #31
   44c20:	d5ee      	bpl.n	44c00 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   44c22:	4807      	ldr	r0, [pc, #28]	; (44c40 <generic_hfclk_start+0x60>)
   44c24:	f00b f8d5 	bl	4fdd2 <set_on_state>
   44c28:	f381 8811 	msr	BASEPRI, r1
   44c2c:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   44c30:	2000      	movs	r0, #0
}
   44c32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   44c36:	f7ff bfab 	b.w	44b90 <clkstarted_handle.constprop.0>
   44c3a:	bf00      	nop
   44c3c:	20006d6c 	.word	0x20006d6c
   44c40:	20006d5c 	.word	0x20006d5c

00044c44 <api_blocking_start>:
{
   44c44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   44c46:	2200      	movs	r2, #0
   44c48:	2301      	movs	r3, #1
   44c4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   44c4e:	ab04      	add	r3, sp, #16
   44c50:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   44c54:	4a09      	ldr	r2, [pc, #36]	; (44c7c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   44c56:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   44c5a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   44c5c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   44c60:	f00b f926 	bl	4feb0 <api_start>
	if (err < 0) {
   44c64:	2800      	cmp	r0, #0
   44c66:	db05      	blt.n	44c74 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   44c68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   44c6c:	2300      	movs	r3, #0
   44c6e:	4668      	mov	r0, sp
   44c70:	f003 fa24 	bl	480bc <z_impl_k_sem_take>
}
   44c74:	b007      	add	sp, #28
   44c76:	f85d fb04 	ldr.w	pc, [sp], #4
   44c7a:	bf00      	nop
   44c7c:	0004fedd 	.word	0x0004fedd

00044c80 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   44c80:	4b09      	ldr	r3, [pc, #36]	; (44ca8 <generic_hfclk_stop+0x28>)
   44c82:	f3bf 8f5b 	dmb	ish
   44c86:	e853 2f00 	ldrex	r2, [r3]
   44c8a:	f022 0102 	bic.w	r1, r2, #2
   44c8e:	e843 1000 	strex	r0, r1, [r3]
   44c92:	2800      	cmp	r0, #0
   44c94:	d1f7      	bne.n	44c86 <generic_hfclk_stop+0x6>
   44c96:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   44c9a:	07d3      	lsls	r3, r2, #31
   44c9c:	d402      	bmi.n	44ca4 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   44c9e:	2001      	movs	r0, #1
   44ca0:	f001 b8ee 	b.w	45e80 <nrfx_clock_stop>
}
   44ca4:	4770      	bx	lr
   44ca6:	bf00      	nop
   44ca8:	20006d6c 	.word	0x20006d6c

00044cac <z_nrf_clock_control_get_onoff>:
}
   44cac:	4a02      	ldr	r2, [pc, #8]	; (44cb8 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   44cae:	b2c3      	uxtb	r3, r0
}
   44cb0:	201c      	movs	r0, #28
   44cb2:	fb03 2000 	mla	r0, r3, r0, r2
   44cb6:	4770      	bx	lr
   44cb8:	20006d1c 	.word	0x20006d1c

00044cbc <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   44cbc:	4b09      	ldr	r3, [pc, #36]	; (44ce4 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   44cbe:	f3bf 8f5b 	dmb	ish
   44cc2:	e853 2f00 	ldrex	r2, [r3]
   44cc6:	f042 0101 	orr.w	r1, r2, #1
   44cca:	e843 1000 	strex	r0, r1, [r3]
   44cce:	2800      	cmp	r0, #0
   44cd0:	d1f7      	bne.n	44cc2 <z_nrf_clock_bt_ctlr_hf_request+0x6>
   44cd2:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   44cd6:	0793      	lsls	r3, r2, #30
   44cd8:	d402      	bmi.n	44ce0 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   44cda:	2001      	movs	r0, #1
   44cdc:	f00b ba1d 	b.w	5011a <nrfx_clock_start>
}
   44ce0:	4770      	bx	lr
   44ce2:	bf00      	nop
   44ce4:	20006d6c 	.word	0x20006d6c

00044ce8 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   44ce8:	4b09      	ldr	r3, [pc, #36]	; (44d10 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   44cea:	f3bf 8f5b 	dmb	ish
   44cee:	e853 2f00 	ldrex	r2, [r3]
   44cf2:	f022 0101 	bic.w	r1, r2, #1
   44cf6:	e843 1000 	strex	r0, r1, [r3]
   44cfa:	2800      	cmp	r0, #0
   44cfc:	d1f7      	bne.n	44cee <z_nrf_clock_bt_ctlr_hf_release+0x6>
   44cfe:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   44d02:	0793      	lsls	r3, r2, #30
   44d04:	d402      	bmi.n	44d0c <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   44d06:	2001      	movs	r0, #1
   44d08:	f001 b8ba 	b.w	45e80 <nrfx_clock_stop>
}
   44d0c:	4770      	bx	lr
   44d0e:	bf00      	nop
   44d10:	20006d6c 	.word	0x20006d6c

00044d14 <z_nrf_clock_control_lf_on>:
{
   44d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   44d18:	4938      	ldr	r1, [pc, #224]	; (44dfc <z_nrf_clock_control_lf_on+0xe8>)
   44d1a:	f3bf 8f5b 	dmb	ish
   44d1e:	4607      	mov	r7, r0
   44d20:	2201      	movs	r2, #1
   44d22:	e851 3f00 	ldrex	r3, [r1]
   44d26:	e841 2000 	strex	r0, r2, [r1]
   44d2a:	2800      	cmp	r0, #0
   44d2c:	d1f9      	bne.n	44d22 <z_nrf_clock_control_lf_on+0xe>
   44d2e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   44d32:	b933      	cbnz	r3, 44d42 <z_nrf_clock_control_lf_on+0x2e>
   44d34:	4932      	ldr	r1, [pc, #200]	; (44e00 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   44d36:	4833      	ldr	r0, [pc, #204]	; (44e04 <z_nrf_clock_control_lf_on+0xf0>)
   44d38:	604b      	str	r3, [r1, #4]
   44d3a:	60cb      	str	r3, [r1, #12]
   44d3c:	608a      	str	r2, [r1, #8]
   44d3e:	f004 fef4 	bl	49b2a <onoff_request>
	switch (start_mode) {
   44d42:	1e7b      	subs	r3, r7, #1
   44d44:	2b01      	cmp	r3, #1
   44d46:	d82b      	bhi.n	44da0 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   44d48:	2f01      	cmp	r7, #1
   44d4a:	d107      	bne.n	44d5c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   44d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   44d50:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   44d54:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   44d58:	2b01      	cmp	r3, #1
   44d5a:	d021      	beq.n	44da0 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   44d5c:	f00b fdb6 	bl	508cc <k_is_in_isr>
   44d60:	4605      	mov	r5, r0
   44d62:	b9f8      	cbnz	r0, 44da4 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   44d64:	4b28      	ldr	r3, [pc, #160]	; (44e08 <z_nrf_clock_control_lf_on+0xf4>)
   44d66:	781b      	ldrb	r3, [r3, #0]
   44d68:	b1e3      	cbz	r3, 44da4 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   44d6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   44d6e:	2202      	movs	r2, #2
   44d70:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   44d74:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   44d76:	f8df 8094 	ldr.w	r8, [pc, #148]	; 44e0c <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   44d7a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   44d7e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   44d82:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   44d86:	03d2      	lsls	r2, r2, #15
   44d88:	d516      	bpl.n	44db8 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   44d8a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   44d8e:	2b01      	cmp	r3, #1
   44d90:	d001      	beq.n	44d96 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   44d92:	2f01      	cmp	r7, #1
   44d94:	d110      	bne.n	44db8 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   44d96:	b35d      	cbz	r5, 44df0 <z_nrf_clock_control_lf_on+0xdc>
   44d98:	f386 8811 	msr	BASEPRI, r6
   44d9c:	f3bf 8f6f 	isb	sy
}
   44da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   44da4:	f04f 0320 	mov.w	r3, #32
   44da8:	f3ef 8611 	mrs	r6, BASEPRI
   44dac:	f383 8812 	msr	BASEPRI_MAX, r3
   44db0:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   44db4:	2501      	movs	r5, #1
   44db6:	e7de      	b.n	44d76 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   44db8:	b1ad      	cbz	r5, 44de6 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   44dba:	4630      	mov	r0, r6
   44dbc:	f7e7 feec 	bl	2cb98 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   44dc0:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   44dc4:	2b00      	cmp	r3, #0
   44dc6:	d1da      	bne.n	44d7e <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   44dc8:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   44dcc:	2a00      	cmp	r2, #0
   44dce:	d0d6      	beq.n	44d7e <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   44dd0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   44dd4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   44dd8:	2301      	movs	r3, #1
   44dda:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   44dde:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   44de2:	60a3      	str	r3, [r4, #8]
}
   44de4:	e7cb      	b.n	44d7e <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   44de6:	2100      	movs	r1, #0
   44de8:	2021      	movs	r0, #33	; 0x21
   44dea:	f003 fe31 	bl	48a50 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   44dee:	e7e7      	b.n	44dc0 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   44df0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   44df4:	2202      	movs	r2, #2
   44df6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   44dfa:	e7d1      	b.n	44da0 <z_nrf_clock_control_lf_on+0x8c>
   44dfc:	20006d18 	.word	0x20006d18
   44e00:	20006d08 	.word	0x20006d08
   44e04:	20006d38 	.word	0x20006d38
   44e08:	20007427 	.word	0x20007427
   44e0c:	e000e100 	.word	0xe000e100

00044e10 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   44e10:	b530      	push	{r4, r5, lr}
	return port->config;
   44e12:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   44e14:	7b05      	ldrb	r5, [r0, #12]
   44e16:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   44e1a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
{
   44e1e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   44e20:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   44e24:	d104      	bne.n	44e30 <gpio_nrfx_pin_interrupt_configure+0x20>
		nrfx_gpiote_trigger_disable(abs_pin);
   44e26:	4620      	mov	r0, r4
   44e28:	f001 fad6 	bl	463d8 <nrfx_gpiote_trigger_disable>

		return 0;
   44e2c:	2000      	movs	r0, #0
   44e2e:	e04a      	b.n	44ec6 <gpio_nrfx_pin_interrupt_configure+0xb6>
	}

	nrfx_gpiote_trigger_config_t trigger_config = {
   44e30:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   44e32:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   44e36:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   44e3a:	d114      	bne.n	44e66 <gpio_nrfx_pin_interrupt_configure+0x56>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   44e3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
	nrfx_gpiote_trigger_config_t trigger_config = {
   44e40:	bf0c      	ite	eq
   44e42:	2304      	moveq	r3, #4
   44e44:	2305      	movne	r3, #5
   44e46:	f88d 3008 	strb.w	r3, [sp, #8]
		}

		trigger_config.p_in_channel = &ch;
	}

	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   44e4a:	2300      	movs	r3, #0
   44e4c:	4619      	mov	r1, r3
   44e4e:	aa02      	add	r2, sp, #8
   44e50:	4620      	mov	r0, r4
   44e52:	f001 f901 	bl	46058 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   44e56:	4b20      	ldr	r3, [pc, #128]	; (44ed8 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   44e58:	4298      	cmp	r0, r3
   44e5a:	d13a      	bne.n	44ed2 <gpio_nrfx_pin_interrupt_configure+0xc2>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);
   44e5c:	2101      	movs	r1, #1
   44e5e:	4620      	mov	r0, r4
   44e60:	f001 fa72 	bl	46348 <nrfx_gpiote_trigger_enable>

	return 0;
   44e64:	e7e2      	b.n	44e2c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   44e66:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   44e6a:	d02e      	beq.n	44eca <gpio_nrfx_pin_interrupt_configure+0xba>
   44e6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   44e70:	bf14      	ite	ne
   44e72:	2301      	movne	r3, #1
   44e74:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   44e76:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   44e7a:	6883      	ldr	r3, [r0, #8]
   44e7c:	40cb      	lsrs	r3, r1
   44e7e:	07d9      	lsls	r1, r3, #31
   44e80:	d4e3      	bmi.n	44e4a <gpio_nrfx_pin_interrupt_configure+0x3a>
   44e82:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   44e86:	d1e0      	bne.n	44e4a <gpio_nrfx_pin_interrupt_configure+0x3a>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   44e88:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
   44e8a:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   44e8c:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
   44e90:	4a12      	ldr	r2, [pc, #72]	; (44edc <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   44e92:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   44e96:	bf18      	it	ne
   44e98:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   44e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   44ea0:	07db      	lsls	r3, r3, #31
   44ea2:	d4d2      	bmi.n	44e4a <gpio_nrfx_pin_interrupt_configure+0x3a>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   44ea4:	f10d 0507 	add.w	r5, sp, #7
   44ea8:	4629      	mov	r1, r5
   44eaa:	4620      	mov	r0, r4
   44eac:	f001 f9f8 	bl	462a0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   44eb0:	4b0b      	ldr	r3, [pc, #44]	; (44ee0 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   44eb2:	4298      	cmp	r0, r3
   44eb4:	d10b      	bne.n	44ece <gpio_nrfx_pin_interrupt_configure+0xbe>
			err = nrfx_gpiote_channel_alloc(&ch);
   44eb6:	4628      	mov	r0, r5
   44eb8:	f001 fa40 	bl	4633c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   44ebc:	4b06      	ldr	r3, [pc, #24]	; (44ed8 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   44ebe:	4298      	cmp	r0, r3
   44ec0:	d005      	beq.n	44ece <gpio_nrfx_pin_interrupt_configure+0xbe>
				return -ENOMEM;
   44ec2:	f06f 000b 	mvn.w	r0, #11
}
   44ec6:	b005      	add	sp, #20
   44ec8:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   44eca:	2303      	movs	r3, #3
   44ecc:	e7d3      	b.n	44e76 <gpio_nrfx_pin_interrupt_configure+0x66>
		trigger_config.p_in_channel = &ch;
   44ece:	9503      	str	r5, [sp, #12]
   44ed0:	e7bb      	b.n	44e4a <gpio_nrfx_pin_interrupt_configure+0x3a>
		return -EIO;
   44ed2:	f06f 0004 	mvn.w	r0, #4
   44ed6:	e7f6      	b.n	44ec6 <gpio_nrfx_pin_interrupt_configure+0xb6>
   44ed8:	0bad0000 	.word	0x0bad0000
   44edc:	50000300 	.word	0x50000300
   44ee0:	0bad0004 	.word	0x0bad0004

00044ee4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   44ee4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   44ee6:	f001 fa19 	bl	4631c <nrfx_gpiote_is_init>
   44eea:	4604      	mov	r4, r0
   44eec:	b968      	cbnz	r0, 44f0a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   44eee:	f001 f9ed 	bl	462cc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   44ef2:	4b08      	ldr	r3, [pc, #32]	; (44f14 <gpio_nrfx_init+0x30>)
   44ef4:	4298      	cmp	r0, r3
   44ef6:	d10a      	bne.n	44f0e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   44ef8:	4807      	ldr	r0, [pc, #28]	; (44f18 <gpio_nrfx_init+0x34>)
   44efa:	4621      	mov	r1, r4
   44efc:	f001 f9ca 	bl	46294 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   44f00:	4622      	mov	r2, r4
   44f02:	2105      	movs	r1, #5
   44f04:	2006      	movs	r0, #6
   44f06:	f7e7 fe81 	bl	2cc0c <z_arm_irq_priority_set>
		return 0;
   44f0a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   44f0c:	bd10      	pop	{r4, pc}
		return -EIO;
   44f0e:	f06f 0004 	mvn.w	r0, #4
   44f12:	e7fb      	b.n	44f0c <gpio_nrfx_init+0x28>
   44f14:	0bad0000 	.word	0x0bad0000
   44f18:	00044f1d 	.word	0x00044f1d

00044f1c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   44f1c:	0942      	lsrs	r2, r0, #5
{
   44f1e:	b570      	push	{r4, r5, r6, lr}
   44f20:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   44f22:	d002      	beq.n	44f2a <nrfx_gpio_handler+0xe>
   44f24:	2a01      	cmp	r2, #1
   44f26:	d017      	beq.n	44f58 <nrfx_gpio_handler+0x3c>
}
   44f28:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   44f2a:	4e0d      	ldr	r6, [pc, #52]	; (44f60 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   44f2c:	6932      	ldr	r2, [r6, #16]
   44f2e:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   44f30:	2900      	cmp	r1, #0
   44f32:	d0f9      	beq.n	44f28 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   44f34:	f003 031f 	and.w	r3, r3, #31
   44f38:	2501      	movs	r5, #1
	return node->next;
   44f3a:	680c      	ldr	r4, [r1, #0]
   44f3c:	409d      	lsls	r5, r3
   44f3e:	2900      	cmp	r1, #0
   44f40:	d0f2      	beq.n	44f28 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   44f42:	688a      	ldr	r2, [r1, #8]
   44f44:	402a      	ands	r2, r5
   44f46:	d002      	beq.n	44f4e <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   44f48:	684b      	ldr	r3, [r1, #4]
   44f4a:	4630      	mov	r0, r6
   44f4c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   44f4e:	b12c      	cbz	r4, 44f5c <nrfx_gpio_handler+0x40>
   44f50:	6823      	ldr	r3, [r4, #0]
   44f52:	4621      	mov	r1, r4
   44f54:	461c      	mov	r4, r3
   44f56:	e7f2      	b.n	44f3e <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   44f58:	4e02      	ldr	r6, [pc, #8]	; (44f64 <nrfx_gpio_handler+0x48>)
   44f5a:	e7e7      	b.n	44f2c <nrfx_gpio_handler+0x10>
   44f5c:	4623      	mov	r3, r4
   44f5e:	e7f8      	b.n	44f52 <nrfx_gpio_handler+0x36>
   44f60:	0005144c 	.word	0x0005144c
   44f64:	00051434 	.word	0x00051434

00044f68 <gpio_nrfx_pin_configure>:
{
   44f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   44f6c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   44f6e:	7b3b      	ldrb	r3, [r7, #12]
   44f70:	f001 051f 	and.w	r5, r1, #31
{
   44f74:	b085      	sub	sp, #20
   44f76:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   44f78:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   44f7c:	4614      	mov	r4, r2
   44f7e:	b9d2      	cbnz	r2, 44fb6 <gpio_nrfx_pin_configure+0x4e>
	err = nrfx_gpiote_channel_get(pin, &ch);
   44f80:	a902      	add	r1, sp, #8
   44f82:	4628      	mov	r0, r5
   44f84:	f001 f98c 	bl	462a0 <nrfx_gpiote_channel_get>
   44f88:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   44f8a:	4628      	mov	r0, r5
   44f8c:	f001 fa4c 	bl	46428 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   44f90:	4b44      	ldr	r3, [pc, #272]	; (450a4 <gpio_nrfx_pin_configure+0x13c>)
   44f92:	4298      	cmp	r0, r3
   44f94:	d004      	beq.n	44fa0 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   44f96:	f06f 0004 	mvn.w	r0, #4
}
   44f9a:	b005      	add	sp, #20
   44f9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   44fa0:	4284      	cmp	r4, r0
   44fa2:	d001      	beq.n	44fa8 <gpio_nrfx_pin_configure+0x40>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   44fa4:	2000      	movs	r0, #0
   44fa6:	e7f8      	b.n	44f9a <gpio_nrfx_pin_configure+0x32>
		err = nrfx_gpiote_channel_free(ch);
   44fa8:	f89d 0008 	ldrb.w	r0, [sp, #8]
   44fac:	f001 f9c0 	bl	46330 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   44fb0:	42a0      	cmp	r0, r4
   44fb2:	d0f7      	beq.n	44fa4 <gpio_nrfx_pin_configure+0x3c>
   44fb4:	e7ef      	b.n	44f96 <gpio_nrfx_pin_configure+0x2e>
	nrfx_gpiote_trigger_config_t trigger_config = {
   44fb6:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   44fba:	f10d 0103 	add.w	r1, sp, #3
   44fbe:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   44fc0:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   44fc4:	f001 f96c 	bl	462a0 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   44fc8:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   44fca:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   44fcc:	aa02      	add	r2, sp, #8
   44fce:	4649      	mov	r1, r9
   44fd0:	4628      	mov	r0, r5
   44fd2:	f001 f841 	bl	46058 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   44fd6:	4b33      	ldr	r3, [pc, #204]	; (450a4 <gpio_nrfx_pin_configure+0x13c>)
   44fd8:	4298      	cmp	r0, r3
   44fda:	d002      	beq.n	44fe2 <gpio_nrfx_pin_configure+0x7a>
		return NRF_GPIO_PIN_PULLUP;
   44fdc:	f06f 0015 	mvn.w	r0, #21
   44fe0:	e7db      	b.n	44f9a <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   44fe2:	4580      	cmp	r8, r0
   44fe4:	d103      	bne.n	44fee <gpio_nrfx_pin_configure+0x86>
		err = nrfx_gpiote_channel_free(ch);
   44fe6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   44fea:	f001 f9a1 	bl	46330 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   44fee:	05a3      	lsls	r3, r4, #22
   44ff0:	d549      	bpl.n	45086 <gpio_nrfx_pin_configure+0x11e>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   44ff2:	4b2d      	ldr	r3, [pc, #180]	; (450a8 <gpio_nrfx_pin_configure+0x140>)
   44ff4:	4a2d      	ldr	r2, [pc, #180]	; (450ac <gpio_nrfx_pin_configure+0x144>)
   44ff6:	4023      	ands	r3, r4
   44ff8:	4293      	cmp	r3, r2
   44ffa:	d018      	beq.n	4502e <gpio_nrfx_pin_configure+0xc6>
   44ffc:	d80c      	bhi.n	45018 <gpio_nrfx_pin_configure+0xb0>
   44ffe:	2b06      	cmp	r3, #6
   45000:	d016      	beq.n	45030 <gpio_nrfx_pin_configure+0xc8>
   45002:	d804      	bhi.n	4500e <gpio_nrfx_pin_configure+0xa6>
   45004:	b1a3      	cbz	r3, 45030 <gpio_nrfx_pin_configure+0xc8>
   45006:	2b02      	cmp	r3, #2
   45008:	d1e8      	bne.n	44fdc <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0S1;
   4500a:	2304      	movs	r3, #4
   4500c:	e010      	b.n	45030 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   4500e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   45012:	d1e3      	bne.n	44fdc <gpio_nrfx_pin_configure+0x74>
   45014:	2301      	movs	r3, #1
   45016:	e00b      	b.n	45030 <gpio_nrfx_pin_configure+0xc8>
   45018:	4a25      	ldr	r2, [pc, #148]	; (450b0 <gpio_nrfx_pin_configure+0x148>)
   4501a:	4293      	cmp	r3, r2
   4501c:	d027      	beq.n	4506e <gpio_nrfx_pin_configure+0x106>
   4501e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   45022:	d026      	beq.n	45072 <gpio_nrfx_pin_configure+0x10a>
   45024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   45028:	d1d8      	bne.n	44fdc <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_S0H1;
   4502a:	2302      	movs	r3, #2
   4502c:	e000      	b.n	45030 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0D1;
   4502e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   45030:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   45034:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   45038:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   4503c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   4503e:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   45042:	bf54      	ite	pl
   45044:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   45048:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   4504a:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   4504c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   45050:	d511      	bpl.n	45076 <gpio_nrfx_pin_configure+0x10e>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   45052:	687a      	ldr	r2, [r7, #4]
   45054:	2301      	movs	r3, #1
   45056:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   45058:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   4505c:	2200      	movs	r2, #0
   4505e:	a901      	add	r1, sp, #4
   45060:	4628      	mov	r0, r5
   45062:	f001 f8a7 	bl	461b4 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   45066:	4b0f      	ldr	r3, [pc, #60]	; (450a4 <gpio_nrfx_pin_configure+0x13c>)
   45068:	4298      	cmp	r0, r3
   4506a:	d09b      	beq.n	44fa4 <gpio_nrfx_pin_configure+0x3c>
   4506c:	e7b6      	b.n	44fdc <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0H1;
   4506e:	2305      	movs	r3, #5
   45070:	e7de      	b.n	45030 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
   45072:	2303      	movs	r3, #3
   45074:	e7dc      	b.n	45030 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   45076:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   45078:	bf41      	itttt	mi
   4507a:	2301      	movmi	r3, #1
   4507c:	687a      	ldrmi	r2, [r7, #4]
   4507e:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   45080:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   45084:	e7ea      	b.n	4505c <gpio_nrfx_pin_configure+0xf4>
	if (flags & GPIO_PULL_UP) {
   45086:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   45088:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   4508c:	bf54      	ite	pl
   4508e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   45092:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   45094:	461a      	mov	r2, r3
   45096:	a901      	add	r1, sp, #4
   45098:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   4509a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   4509e:	f000 ffdb 	bl	46058 <nrfx_gpiote_input_configure>
   450a2:	e7e0      	b.n	45066 <gpio_nrfx_pin_configure+0xfe>
   450a4:	0bad0000 	.word	0x0bad0000
   450a8:	00f00006 	.word	0x00f00006
   450ac:	00100006 	.word	0x00100006
   450b0:	00400002 	.word	0x00400002

000450b4 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   450b4:	4b02      	ldr	r3, [pc, #8]	; (450c0 <flash_nrf_pages_layout+0xc>)
   450b6:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   450b8:	2301      	movs	r3, #1
   450ba:	6013      	str	r3, [r2, #0]
}
   450bc:	4770      	bx	lr
   450be:	bf00      	nop
   450c0:	20006d88 	.word	0x20006d88

000450c4 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   450c4:	4800      	ldr	r0, [pc, #0]	; (450c8 <flash_nrf_get_parameters+0x4>)
   450c6:	4770      	bx	lr
   450c8:	00053a18 	.word	0x00053a18

000450cc <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   450cc:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   450ce:	2201      	movs	r2, #1
   450d0:	4611      	mov	r1, r2
   450d2:	4807      	ldr	r0, [pc, #28]	; (450f0 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   450d4:	4c07      	ldr	r4, [pc, #28]	; (450f4 <nrf_flash_init+0x28>)
   450d6:	f00b fcec 	bl	50ab2 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   450da:	f000 f9c1 	bl	45460 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   450de:	f00b f8aa 	bl	50236 <nrfx_nvmc_flash_page_count_get>
   450e2:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   450e4:	f00b f8a3 	bl	5022e <nrfx_nvmc_flash_page_size_get>
   450e8:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   450ea:	2000      	movs	r0, #0
   450ec:	bd10      	pop	{r4, pc}
   450ee:	bf00      	nop
   450f0:	20006d90 	.word	0x20006d90
   450f4:	20006d88 	.word	0x20006d88

000450f8 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   450f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   450fc:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   45100:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   45104:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   45108:	f023 031f 	bic.w	r3, r3, #31
   4510c:	430b      	orrs	r3, r1
    pofcon |=
   4510e:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   45112:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   45116:	4b02      	ldr	r3, [pc, #8]	; (45120 <restore_pofwarn.part.0+0x28>)
   45118:	2200      	movs	r2, #0
   4511a:	701a      	strb	r2, [r3, #0]
	}
}
   4511c:	4770      	bx	lr
   4511e:	bf00      	nop
   45120:	20007420 	.word	0x20007420

00045124 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   45124:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   45128:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   4512c:	2b08      	cmp	r3, #8
   4512e:	d120      	bne.n	45172 <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   45130:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   45134:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   45138:	07cb      	lsls	r3, r1, #31
   4513a:	d51a      	bpl.n	45172 <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   4513c:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   45140:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   45144:	f023 031f 	bic.w	r3, r3, #31
    pofcon |=
   45148:	430b      	orrs	r3, r1
    p_reg->POFCON = pofcon;
   4514a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4514e:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   45152:	b15b      	cbz	r3, 4516c <suspend_pofwarn+0x48>
    uint32_t pofcon = p_reg->POFCON;
   45154:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   45158:	f023 031f 	bic.w	r3, r3, #31
   4515c:	430b      	orrs	r3, r1
    pofcon |=
   4515e:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   45162:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   45166:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   4516a:	4770      	bx	lr
		pofcon_enabled = enabled;
   4516c:	4b02      	ldr	r3, [pc, #8]	; (45178 <suspend_pofwarn+0x54>)
   4516e:	2201      	movs	r2, #1
   45170:	701a      	strb	r2, [r3, #0]
		return 0;
   45172:	2000      	movs	r0, #0
}
   45174:	4770      	bx	lr
   45176:	bf00      	nop
   45178:	20007420 	.word	0x20007420

0004517c <erase_op>:
{
   4517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4517e:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   45180:	f00b f855 	bl	5022e <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   45184:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   45186:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   45188:	b10b      	cbz	r3, 4518e <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   4518a:	f000 f97b 	bl	45484 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   4518e:	4f13      	ldr	r7, [pc, #76]	; (451dc <erase_op+0x60>)
{
   45190:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   45192:	f7ff ffc7 	bl	45124 <suspend_pofwarn>
   45196:	b9e8      	cbnz	r0, 451d4 <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   45198:	6860      	ldr	r0, [r4, #4]
   4519a:	f001 fa53 	bl	46644 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   4519e:	68a3      	ldr	r3, [r4, #8]
   451a0:	1b5b      	subs	r3, r3, r5
   451a2:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   451a4:	6863      	ldr	r3, [r4, #4]
   451a6:	442b      	add	r3, r5
   451a8:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   451aa:	783b      	ldrb	r3, [r7, #0]
   451ac:	b10b      	cbz	r3, 451b2 <erase_op+0x36>
   451ae:	f7ff ffa3 	bl	450f8 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   451b2:	7b23      	ldrb	r3, [r4, #12]
		i++;
   451b4:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   451b6:	b93b      	cbnz	r3, 451c8 <erase_op+0x4c>
	} while (e_ctx->len > 0);
   451b8:	68a3      	ldr	r3, [r4, #8]
   451ba:	2b00      	cmp	r3, #0
   451bc:	d1e9      	bne.n	45192 <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   451be:	68a0      	ldr	r0, [r4, #8]
   451c0:	3800      	subs	r0, #0
   451c2:	bf18      	it	ne
   451c4:	2001      	movne	r0, #1
}
   451c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   451c8:	4630      	mov	r0, r6
   451ca:	f7e3 fd95 	bl	28cf8 <nrf_flash_sync_check_time_limit>
   451ce:	2800      	cmp	r0, #0
   451d0:	d0f2      	beq.n	451b8 <erase_op+0x3c>
   451d2:	e7f4      	b.n	451be <erase_op+0x42>
			return -ECANCELED;
   451d4:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   451d8:	e7f5      	b.n	451c6 <erase_op+0x4a>
   451da:	bf00      	nop
   451dc:	20007420 	.word	0x20007420

000451e0 <flash_nrf_erase>:
{
   451e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   451e2:	b087      	sub	sp, #28
   451e4:	460e      	mov	r6, r1
   451e6:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   451e8:	f00b f821 	bl	5022e <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   451ec:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   451ee:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   451f0:	4630      	mov	r0, r6
   451f2:	f00a fefe 	bl	4fff2 <is_regular_addr_valid>
   451f6:	b3c8      	cbz	r0, 4526c <flash_nrf_erase+0x8c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   451f8:	fbb6 f3f7 	udiv	r3, r6, r7
   451fc:	fb07 6313 	mls	r3, r7, r3, r6
   45200:	bba3      	cbnz	r3, 4526c <flash_nrf_erase+0x8c>
   45202:	fbb5 f4f7 	udiv	r4, r5, r7
   45206:	fb07 5414 	mls	r4, r7, r4, r5
   4520a:	bb7c      	cbnz	r4, 4526c <flash_nrf_erase+0x8c>
		if (!n_pages) {
   4520c:	42bd      	cmp	r5, r7
   4520e:	d322      	bcc.n	45256 <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   45210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   45214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   45218:	4816      	ldr	r0, [pc, #88]	; (45274 <flash_nrf_erase+0x94>)
   4521a:	f002 ff4f 	bl	480bc <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   4521e:	f00a ff0d 	bl	5003c <nrf_flash_sync_is_required>
   45222:	ab02      	add	r3, sp, #8
   45224:	4601      	mov	r1, r0
	struct flash_context context = {
   45226:	2210      	movs	r2, #16
	if (nrf_flash_sync_is_required()) {
   45228:	b1c0      	cbz	r0, 4525c <flash_nrf_erase+0x7c>
	struct flash_context context = {
   4522a:	4621      	mov	r1, r4
   4522c:	4618      	mov	r0, r3
   4522e:	f006 fd1e 	bl	4bc6e <memset>
   45232:	2201      	movs	r2, #1
   45234:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   45238:	4a0f      	ldr	r2, [pc, #60]	; (45278 <flash_nrf_erase+0x98>)
   4523a:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   4523e:	480f      	ldr	r0, [pc, #60]	; (4527c <flash_nrf_erase+0x9c>)
	struct flash_context context = {
   45240:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   45244:	f000 f916 	bl	45474 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   45248:	4668      	mov	r0, sp
   4524a:	f7e3 fcd9 	bl	28c00 <nrf_flash_sync_exe>
	return	erase_op(&context);
   4524e:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   45250:	4808      	ldr	r0, [pc, #32]	; (45274 <flash_nrf_erase+0x94>)
   45252:	f002 ff0d 	bl	48070 <z_impl_k_sem_give>
}
   45256:	4620      	mov	r0, r4
   45258:	b007      	add	sp, #28
   4525a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   4525c:	4618      	mov	r0, r3
   4525e:	f006 fd06 	bl	4bc6e <memset>
   45262:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   45266:	f7ff ff89 	bl	4517c <erase_op>
   4526a:	e7f0      	b.n	4524e <flash_nrf_erase+0x6e>
			return -EINVAL;
   4526c:	f06f 0415 	mvn.w	r4, #21
   45270:	e7f1      	b.n	45256 <flash_nrf_erase+0x76>
   45272:	bf00      	nop
   45274:	20006d90 	.word	0x20006d90
   45278:	0004517d 	.word	0x0004517d
   4527c:	00015e64 	.word	0x00015e64

00045280 <write_op>:
{
   45280:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   45282:	7b03      	ldrb	r3, [r0, #12]
{
   45284:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   45286:	b10b      	cbz	r3, 4528c <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   45288:	f000 f8fc 	bl	45484 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   4528c:	4e19      	ldr	r6, [pc, #100]	; (452f4 <write_op+0x74>)
{
   4528e:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   45290:	68a3      	ldr	r3, [r4, #8]
   45292:	2b03      	cmp	r3, #3
   45294:	d806      	bhi.n	452a4 <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   45296:	4a18      	ldr	r2, [pc, #96]	; (452f8 <write_op+0x78>)
   45298:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   4529c:	07db      	lsls	r3, r3, #31
   4529e:	d5fb      	bpl.n	45298 <write_op+0x18>
	return FLASH_OP_DONE;
   452a0:	2000      	movs	r0, #0
}
   452a2:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   452a4:	f7ff ff3e 	bl	45124 <suspend_pofwarn>
   452a8:	bb08      	cbnz	r0, 452ee <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   452aa:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   452ac:	6860      	ldr	r0, [r4, #4]
   452ae:	6819      	ldr	r1, [r3, #0]
   452b0:	f001 f9e8 	bl	46684 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   452b4:	7833      	ldrb	r3, [r6, #0]
   452b6:	b10b      	cbz	r3, 452bc <write_op+0x3c>
   452b8:	f7ff ff1e 	bl	450f8 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   452bc:	6863      	ldr	r3, [r4, #4]
   452be:	3304      	adds	r3, #4
   452c0:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   452c2:	6823      	ldr	r3, [r4, #0]
   452c4:	3304      	adds	r3, #4
   452c6:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   452c8:	68a3      	ldr	r3, [r4, #8]
   452ca:	3b04      	subs	r3, #4
   452cc:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   452ce:	7b23      	ldrb	r3, [r4, #12]
		i++;
   452d0:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   452d2:	2b00      	cmp	r3, #0
   452d4:	d0dc      	beq.n	45290 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   452d6:	4628      	mov	r0, r5
   452d8:	f7e3 fd0e 	bl	28cf8 <nrf_flash_sync_check_time_limit>
   452dc:	2800      	cmp	r0, #0
   452de:	d0d7      	beq.n	45290 <write_op+0x10>
   452e0:	4a05      	ldr	r2, [pc, #20]	; (452f8 <write_op+0x78>)
   452e2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   452e6:	07d9      	lsls	r1, r3, #31
   452e8:	d5fb      	bpl.n	452e2 <write_op+0x62>
				return FLASH_OP_ONGOING;
   452ea:	2001      	movs	r0, #1
   452ec:	e7d9      	b.n	452a2 <write_op+0x22>
			return -ECANCELED;
   452ee:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   452f2:	e7d6      	b.n	452a2 <write_op+0x22>
   452f4:	20007420 	.word	0x20007420
   452f8:	4001e000 	.word	0x4001e000

000452fc <flash_nrf_write>:
{
   452fc:	b570      	push	{r4, r5, r6, lr}
   452fe:	460d      	mov	r5, r1
   45300:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   45302:	4619      	mov	r1, r3
   45304:	4628      	mov	r0, r5
{
   45306:	4616      	mov	r6, r2
   45308:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   4530a:	f00a fe72 	bl	4fff2 <is_regular_addr_valid>
   4530e:	b360      	cbz	r0, 4536a <flash_nrf_write+0x6e>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   45310:	ea45 0304 	orr.w	r3, r5, r4
   45314:	079b      	lsls	r3, r3, #30
   45316:	d128      	bne.n	4536a <flash_nrf_write+0x6e>
	if (!len) {
   45318:	b1fc      	cbz	r4, 4535a <flash_nrf_write+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   4531a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4531e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   45322:	4813      	ldr	r0, [pc, #76]	; (45370 <flash_nrf_write+0x74>)
   45324:	f002 feca 	bl	480bc <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   45328:	f00a fe88 	bl	5003c <nrf_flash_sync_is_required>
   4532c:	4603      	mov	r3, r0
	struct flash_context context = {
   4532e:	e9cd 6502 	strd	r6, r5, [sp, #8]
   45332:	a802      	add	r0, sp, #8
   45334:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   45336:	b19b      	cbz	r3, 45360 <flash_nrf_write+0x64>
	struct flash_context context = {
   45338:	2301      	movs	r3, #1
   4533a:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   4533e:	4b0d      	ldr	r3, [pc, #52]	; (45374 <flash_nrf_write+0x78>)
   45340:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   45344:	f641 504c 	movw	r0, #7500	; 0x1d4c
   45348:	f000 f894 	bl	45474 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   4534c:	4668      	mov	r0, sp
   4534e:	f7e3 fc57 	bl	28c00 <nrf_flash_sync_exe>
	return write_op(&context);
   45352:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   45354:	4806      	ldr	r0, [pc, #24]	; (45370 <flash_nrf_write+0x74>)
   45356:	f002 fe8b 	bl	48070 <z_impl_k_sem_give>
}
   4535a:	4620      	mov	r0, r4
   4535c:	b006      	add	sp, #24
   4535e:	bd70      	pop	{r4, r5, r6, pc}
	struct flash_context context = {
   45360:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   45364:	f7ff ff8c 	bl	45280 <write_op>
   45368:	e7f3      	b.n	45352 <flash_nrf_write+0x56>
		return -EINVAL;
   4536a:	f06f 0415 	mvn.w	r4, #21
   4536e:	e7f4      	b.n	4535a <flash_nrf_write+0x5e>
   45370:	20006d90 	.word	0x20006d90
   45374:	00045281 	.word	0x00045281

00045378 <time_slot_callback_work>:
{
   45378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   4537a:	9b07      	ldr	r3, [sp, #28]
	rc = op_desc->handler(op_desc->context);
   4537c:	e9d3 2000 	ldrd	r2, r0, [r3]
   45380:	4790      	blx	r2
	if (rc != FLASH_OP_ONGOING) {
   45382:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   45384:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   45386:	d013      	beq.n	453b0 <time_slot_callback_work+0x38>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   45388:	f10d 010f 	add.w	r1, sp, #15
   4538c:	f10d 000e 	add.w	r0, sp, #14
   45390:	f7f2 fc3c 	bl	37c0c <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   45394:	2300      	movs	r3, #0
   45396:	9300      	str	r3, [sp, #0]
   45398:	4619      	mov	r1, r3
   4539a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   4539e:	f89d 000e 	ldrb.w	r0, [sp, #14]
   453a2:	f7f0 f8ed 	bl	35580 <ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   453a6:	4b03      	ldr	r3, [pc, #12]	; (453b4 <time_slot_callback_work+0x3c>)
   453a8:	60dc      	str	r4, [r3, #12]
   453aa:	4803      	ldr	r0, [pc, #12]	; (453b8 <time_slot_callback_work+0x40>)
   453ac:	f002 fe60 	bl	48070 <z_impl_k_sem_give>
}
   453b0:	b004      	add	sp, #16
   453b2:	bd10      	pop	{r4, pc}
   453b4:	20006dc0 	.word	0x20006dc0
   453b8:	20006da8 	.word	0x20006da8

000453bc <time_slot_delay>:
{
   453bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   453c0:	b08d      	sub	sp, #52	; 0x34
   453c2:	4606      	mov	r6, r0
   453c4:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   453c6:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   453ca:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   453ce:	4690      	mov	r8, r2
   453d0:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   453d2:	f7f2 fc1b 	bl	37c0c <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index, /* Radio instance ticker */
   453d6:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   453da:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   453de:	9700      	str	r7, [sp, #0]
   453e0:	2400      	movs	r4, #0
   453e2:	3501      	adds	r5, #1
   453e4:	4633      	mov	r3, r6
   453e6:	e9cd 4407 	strd	r4, r4, [sp, #28]
   453ea:	e9cd 8905 	strd	r8, r9, [sp, #20]
   453ee:	e9cd 4403 	strd	r4, r4, [sp, #12]
   453f2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   453f6:	b2ea      	uxtb	r2, r5
   453f8:	2101      	movs	r1, #1
   453fa:	f7f0 f835 	bl	35468 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   453fe:	f030 0302 	bics.w	r3, r0, #2
   45402:	d00d      	beq.n	45420 <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   45404:	4b08      	ldr	r3, [pc, #32]	; (45428 <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   45406:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   4540a:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   4540c:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   45410:	9400      	str	r4, [sp, #0]
   45412:	4623      	mov	r3, r4
   45414:	4621      	mov	r1, r4
   45416:	f7f0 f8b3 	bl	35580 <ticker_stop>
   4541a:	4804      	ldr	r0, [pc, #16]	; (4542c <time_slot_delay+0x70>)
   4541c:	f002 fe28 	bl	48070 <z_impl_k_sem_give>
}
   45420:	b00d      	add	sp, #52	; 0x34
   45422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   45426:	bf00      	nop
   45428:	20006dc0 	.word	0x20006dc0
   4542c:	20006da8 	.word	0x20006da8

00045430 <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   45430:	9b01      	ldr	r3, [sp, #4]
   45432:	4a02      	ldr	r2, [pc, #8]	; (4543c <time_slot_callback_prepare+0xc>)
   45434:	2131      	movs	r1, #49	; 0x31
   45436:	f7ff bfc1 	b.w	453bc <time_slot_delay>
   4543a:	bf00      	nop
   4543c:	00045441 	.word	0x00045441

00045440 <time_slot_callback_abort>:
{
   45440:	b570      	push	{r4, r5, r6, lr}
   45442:	9d05      	ldr	r5, [sp, #20]
   45444:	4604      	mov	r4, r0
	ll_radio_state_abort();
   45446:	f7f2 fbe7 	bl	37c18 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   4544a:	462b      	mov	r3, r5
   4544c:	4620      	mov	r0, r4
   4544e:	4a03      	ldr	r2, [pc, #12]	; (4545c <time_slot_callback_abort+0x1c>)
}
   45450:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   45454:	2106      	movs	r1, #6
   45456:	f7ff bfb1 	b.w	453bc <time_slot_delay>
   4545a:	bf00      	nop
   4545c:	00045379 	.word	0x00045379

00045460 <nrf_flash_sync_init>:
{
   45460:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   45462:	2201      	movs	r2, #1
   45464:	2100      	movs	r1, #0
   45466:	4802      	ldr	r0, [pc, #8]	; (45470 <nrf_flash_sync_init+0x10>)
   45468:	f00b fb23 	bl	50ab2 <z_impl_k_sem_init>
}
   4546c:	2000      	movs	r0, #0
   4546e:	bd08      	pop	{r3, pc}
   45470:	20006da8 	.word	0x20006da8

00045474 <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   45474:	4b02      	ldr	r3, [pc, #8]	; (45480 <nrf_flash_sync_set_context+0xc>)
   45476:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   4547a:	e9c3 2000 	strd	r2, r0, [r3]
}
   4547e:	4770      	bx	lr
   45480:	20006dc0 	.word	0x20006dc0

00045484 <nrf_flash_sync_get_timestamp_begin>:
{
   45484:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   45486:	f7f0 f91b 	bl	356c0 <ticker_ticks_now_get>
   4548a:	4b01      	ldr	r3, [pc, #4]	; (45490 <nrf_flash_sync_get_timestamp_begin+0xc>)
   4548c:	6098      	str	r0, [r3, #8]
}
   4548e:	bd08      	pop	{r3, pc}
   45490:	20006dc0 	.word	0x20006dc0

00045494 <random_byte_get>:
   45494:	f04f 0320 	mov.w	r3, #32
   45498:	f3ef 8211 	mrs	r2, BASEPRI
   4549c:	f383 8812 	msr	BASEPRI_MAX, r3
   454a0:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   454a4:	4b09      	ldr	r3, [pc, #36]	; (454cc <random_byte_get+0x38>)
   454a6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   454aa:	b161      	cbz	r1, 454c6 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   454ac:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   454ae:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   454b2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   454b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   454ba:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   454bc:	f382 8811 	msr	BASEPRI, r2
   454c0:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   454c4:	4770      	bx	lr
	int retval = -EAGAIN;
   454c6:	f06f 000a 	mvn.w	r0, #10
   454ca:	e7f7      	b.n	454bc <random_byte_get+0x28>
   454cc:	4000d000 	.word	0x4000d000

000454d0 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   454d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   454d2:	4603      	mov	r3, r0
   454d4:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   454d6:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   454d8:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   454dc:	f04f 0520 	mov.w	r5, #32
   454e0:	f3ef 8211 	mrs	r2, BASEPRI
   454e4:	f385 8812 	msr	BASEPRI_MAX, r5
   454e8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   454ec:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   454ee:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   454f2:	1be4      	subs	r4, r4, r7
   454f4:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   454f8:	42a0      	cmp	r0, r4
		len = available;
   454fa:	bf88      	it	hi
   454fc:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   454fe:	183e      	adds	r6, r7, r0
   45500:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   45504:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   45506:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   45508:	f382 8811 	msr	BASEPRI, r2
   4550c:	f3bf 8f6f 	isb	sy
   45510:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   45512:	428a      	cmp	r2, r1
   45514:	d117      	bne.n	45546 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   45516:	4577      	cmp	r7, lr
   45518:	d10d      	bne.n	45536 <rng_pool_get+0x66>
	__asm__ volatile(
   4551a:	f04f 0120 	mov.w	r1, #32
   4551e:	f3ef 8211 	mrs	r2, BASEPRI
   45522:	f381 8812 	msr	BASEPRI_MAX, r1
   45526:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   4552a:	7819      	ldrb	r1, [r3, #0]
   4552c:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   4552e:	f382 8811 	msr	BASEPRI, r2
   45532:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   45536:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   45538:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   4553a:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   4553c:	bf22      	ittt	cs
   4553e:	4b06      	ldrcs	r3, [pc, #24]	; (45558 <rng_pool_get+0x88>)
   45540:	2201      	movcs	r2, #1
   45542:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   45544:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   45546:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   45548:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   4554a:	7976      	ldrb	r6, [r6, #5]
   4554c:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   45550:	ea05 050c 	and.w	r5, r5, ip
   45554:	e7dd      	b.n	45512 <rng_pool_get+0x42>
   45556:	bf00      	nop
   45558:	4000d000 	.word	0x4000d000

0004555c <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   4555c:	43db      	mvns	r3, r3
{
   4555e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   45562:	f013 0501 	ands.w	r5, r3, #1
{
   45566:	460e      	mov	r6, r1
   45568:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   4556a:	d004      	beq.n	45576 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   4556c:	4821      	ldr	r0, [pc, #132]	; (455f4 <entropy_nrf5_get_entropy_isr+0x98>)
   4556e:	f7ff ffaf 	bl	454d0 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   45572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   45576:	b3a2      	cbz	r2, 455e2 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   45578:	f04f 0320 	mov.w	r3, #32
   4557c:	f3ef 8811 	mrs	r8, BASEPRI
   45580:	f383 8812 	msr	BASEPRI_MAX, r3
   45584:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   45588:	200d      	movs	r0, #13
   4558a:	f7e7 fb31 	bl	2cbf0 <arch_irq_is_enabled>
   4558e:	4607      	mov	r7, r0
		irq_disable(IRQN);
   45590:	200d      	movs	r0, #13
   45592:	f7e7 fb19 	bl	2cbc8 <arch_irq_disable>
	__asm__ volatile(
   45596:	f388 8811 	msr	BASEPRI, r8
   4559a:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   4559e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 455f8 <entropy_nrf5_get_entropy_isr+0x9c>
   455a2:	f8df 9058 	ldr.w	r9, [pc, #88]	; 455fc <entropy_nrf5_get_entropy_isr+0xa0>
   455a6:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   455aa:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   455ae:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   455b2:	2301      	movs	r3, #1
   455b4:	f8c8 3000 	str.w	r3, [r8]
   455b8:	4625      	mov	r5, r4
   455ba:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   455be:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   455c2:	b183      	cbz	r3, 455e6 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   455c4:	f7ff ff66 	bl	45494 <random_byte_get>
			if (byte < 0) {
   455c8:	1e03      	subs	r3, r0, #0
   455ca:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   455ce:	dbf6      	blt.n	455be <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   455d0:	3d01      	subs	r5, #1
   455d2:	b2ad      	uxth	r5, r5
   455d4:	5573      	strb	r3, [r6, r5]
		} while (len);
   455d6:	2d00      	cmp	r5, #0
   455d8:	d1f1      	bne.n	455be <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   455da:	b117      	cbz	r7, 455e2 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   455dc:	200d      	movs	r0, #13
   455de:	f7e7 fae5 	bl	2cbac <arch_irq_enable>
	return cnt;
   455e2:	4620      	mov	r0, r4
   455e4:	e7c5      	b.n	45572 <entropy_nrf5_get_entropy_isr+0x16>
   455e6:	f3bf 8f4f 	dsb	sy
				__WFE();
   455ea:	bf20      	wfe
				__SEV();
   455ec:	bf40      	sev
				__WFE();
   455ee:	bf20      	wfe
   455f0:	e7e5      	b.n	455be <entropy_nrf5_get_entropy_isr+0x62>
   455f2:	bf00      	nop
   455f4:	20006e00 	.word	0x20006e00
   455f8:	4000d000 	.word	0x4000d000
   455fc:	e000e100 	.word	0xe000e100

00045600 <entropy_nrf5_get_entropy>:
{
   45600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   45604:	4f12      	ldr	r7, [pc, #72]	; (45650 <entropy_nrf5_get_entropy+0x50>)
   45606:	460d      	mov	r5, r1
   45608:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   4560a:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   4560e:	b914      	cbnz	r4, 45616 <entropy_nrf5_get_entropy+0x16>
}
   45610:	4620      	mov	r0, r4
   45612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   45616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4561a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4561e:	4638      	mov	r0, r7
   45620:	f002 fd4c 	bl	480bc <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   45624:	4622      	mov	r2, r4
   45626:	4629      	mov	r1, r5
   45628:	4640      	mov	r0, r8
   4562a:	f7ff ff51 	bl	454d0 <rng_pool_get>
   4562e:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   45630:	4638      	mov	r0, r7
   45632:	f002 fd1d 	bl	48070 <z_impl_k_sem_give>
		if (bytes == 0U) {
   45636:	b93e      	cbnz	r6, 45648 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   45638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4563c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   45640:	4804      	ldr	r0, [pc, #16]	; (45654 <entropy_nrf5_get_entropy+0x54>)
   45642:	f002 fd3b 	bl	480bc <z_impl_k_sem_take>
	while (len) {
   45646:	e7e6      	b.n	45616 <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   45648:	1ba4      	subs	r4, r4, r6
   4564a:	b2a4      	uxth	r4, r4
		buf += bytes;
   4564c:	4435      	add	r5, r6
   4564e:	e7de      	b.n	4560e <entropy_nrf5_get_entropy+0xe>
   45650:	20006dd0 	.word	0x20006dd0
   45654:	20006de8 	.word	0x20006de8

00045658 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   45658:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   4565a:	4c19      	ldr	r4, [pc, #100]	; (456c0 <entropy_nrf5_init+0x68>)
   4565c:	2201      	movs	r2, #1
   4565e:	4611      	mov	r1, r2
   45660:	4620      	mov	r0, r4
   45662:	f00b fa26 	bl	50ab2 <z_impl_k_sem_init>
   45666:	2201      	movs	r2, #1
   45668:	2100      	movs	r1, #0
   4566a:	f104 0018 	add.w	r0, r4, #24
   4566e:	f00b fa20 	bl	50ab2 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   45672:	f240 4307 	movw	r3, #1031	; 0x407
   45676:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   4567a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   4567e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   45680:	230c      	movs	r3, #12
   45682:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   45686:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   45688:	4b0e      	ldr	r3, [pc, #56]	; (456c4 <entropy_nrf5_init+0x6c>)
   4568a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   4568e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   45692:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   45696:	f042 0201 	orr.w	r2, r2, #1
   4569a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   4569e:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   456a0:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   456a4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   456a8:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   456ac:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   456ae:	6019      	str	r1, [r3, #0]
   456b0:	200d      	movs	r0, #13
   456b2:	f7e7 faab 	bl	2cc0c <z_arm_irq_priority_set>
	irq_enable(IRQN);
   456b6:	200d      	movs	r0, #13
   456b8:	f7e7 fa78 	bl	2cbac <arch_irq_enable>

	return 0;
}
   456bc:	4628      	mov	r0, r5
   456be:	bd38      	pop	{r3, r4, r5, pc}
   456c0:	20006dd0 	.word	0x20006dd0
   456c4:	4000d000 	.word	0x4000d000

000456c8 <isr>:
{
   456c8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   456ca:	f7ff fee3 	bl	45494 <random_byte_get>
	if (byte < 0) {
   456ce:	2800      	cmp	r0, #0
   456d0:	db20      	blt.n	45714 <isr+0x4c>
	uint8_t last  = rngp->last;
   456d2:	4b17      	ldr	r3, [pc, #92]	; (45730 <isr+0x68>)
   456d4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   456d8:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   456dc:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   456e0:	1b14      	subs	r4, r2, r4
   456e2:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   456e6:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   456e8:	d10d      	bne.n	45706 <isr+0x3e>
	uint8_t last  = rngp->last;
   456ea:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   456ee:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   456f2:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   456f6:	1b14      	subs	r4, r2, r4
   456f8:	ea31 0404 	bics.w	r4, r1, r4
   456fc:	d10b      	bne.n	45716 <isr+0x4e>
   456fe:	4b0d      	ldr	r3, [pc, #52]	; (45734 <isr+0x6c>)
   45700:	2201      	movs	r2, #1
   45702:	605a      	str	r2, [r3, #4]
}
   45704:	e00e      	b.n	45724 <isr+0x5c>
	rngp->buffer[last] = byte;
   45706:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   45708:	3201      	adds	r2, #1
   4570a:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   4570c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   45710:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   45714:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   45716:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   45718:	3201      	adds	r2, #1
   4571a:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   4571c:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   45720:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   45724:	4804      	ldr	r0, [pc, #16]	; (45738 <isr+0x70>)
}
   45726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   4572a:	f002 bca1 	b.w	48070 <z_impl_k_sem_give>
   4572e:	bf00      	nop
   45730:	20006dd0 	.word	0x20006dd0
   45734:	4000d000 	.word	0x4000d000
   45738:	20006de8 	.word	0x20006de8

0004573c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   4573c:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   4573e:	2301      	movs	r3, #1
   45740:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   45742:	4a0e      	ldr	r2, [pc, #56]	; (4577c <compare_int_lock+0x40>)
   45744:	f3bf 8f5b 	dmb	ish
   45748:	43dc      	mvns	r4, r3
   4574a:	e852 1f00 	ldrex	r1, [r2]
   4574e:	ea01 0504 	and.w	r5, r1, r4
   45752:	e842 5600 	strex	r6, r5, [r2]
   45756:	2e00      	cmp	r6, #0
   45758:	d1f7      	bne.n	4574a <compare_int_lock+0xe>
   4575a:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   4575e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   45762:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   45764:	4806      	ldr	r0, [pc, #24]	; (45780 <compare_int_lock+0x44>)
   45766:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   4576a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   4576e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   45772:	420b      	tst	r3, r1
}
   45774:	bf14      	ite	ne
   45776:	2001      	movne	r0, #1
   45778:	2000      	moveq	r0, #0
   4577a:	bd70      	pop	{r4, r5, r6, pc}
   4577c:	20006e28 	.word	0x20006e28
   45780:	40011000 	.word	0x40011000

00045784 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   45784:	491b      	ldr	r1, [pc, #108]	; (457f4 <sys_clock_timeout_handler+0x70>)
{
   45786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45788:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   4578a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   4578e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   45790:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   45794:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   45798:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   4579a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   4579e:	d30f      	bcc.n	457c0 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   457a0:	f003 face 	bl	48d40 <sys_clock_announce>
    return p_reg->CC[ch];
   457a4:	00a3      	lsls	r3, r4, #2
   457a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   457aa:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   457ae:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   457b2:	4295      	cmp	r5, r2
   457b4:	d11d      	bne.n	457f2 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   457b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   457ba:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   457be:	e012      	b.n	457e6 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   457c0:	4b0d      	ldr	r3, [pc, #52]	; (457f8 <sys_clock_timeout_handler+0x74>)
   457c2:	681b      	ldr	r3, [r3, #0]
   457c4:	0a1a      	lsrs	r2, r3, #8
   457c6:	061b      	lsls	r3, r3, #24
   457c8:	195e      	adds	r6, r3, r5
   457ca:	4b0c      	ldr	r3, [pc, #48]	; (457fc <sys_clock_timeout_handler+0x78>)
   457cc:	f142 0700 	adc.w	r7, r2, #0
   457d0:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   457d4:	f003 fab4 	bl	48d40 <sys_clock_announce>
    return p_reg->CC[ch];
   457d8:	4a09      	ldr	r2, [pc, #36]	; (45800 <sys_clock_timeout_handler+0x7c>)
   457da:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   457de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   457e2:	429d      	cmp	r5, r3
   457e4:	d105      	bne.n	457f2 <sys_clock_timeout_handler+0x6e>
    p_reg->EVTENSET = mask;
   457e6:	4a06      	ldr	r2, [pc, #24]	; (45800 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   457e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   457ec:	40a3      	lsls	r3, r4
   457ee:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   457f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   457f4:	20003fe8 	.word	0x20003fe8
   457f8:	20006e2c 	.word	0x20006e2c
   457fc:	20003ff0 	.word	0x20003ff0
   45800:	40011000 	.word	0x40011000

00045804 <compare_int_unlock>:
	if (key) {
   45804:	b311      	cbz	r1, 4584c <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   45806:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   4580a:	2301      	movs	r3, #1
   4580c:	4a10      	ldr	r2, [pc, #64]	; (45850 <compare_int_unlock+0x4c>)
   4580e:	4083      	lsls	r3, r0
   45810:	e852 cf00 	ldrex	ip, [r2]
   45814:	ea4c 0c03 	orr.w	ip, ip, r3
   45818:	e842 c100 	strex	r1, ip, [r2]
   4581c:	2900      	cmp	r1, #0
   4581e:	d1f7      	bne.n	45810 <compare_int_unlock+0xc>
   45820:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   45824:	4a0b      	ldr	r2, [pc, #44]	; (45854 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   45826:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   4582a:	4083      	lsls	r3, r0
   4582c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   45830:	4b09      	ldr	r3, [pc, #36]	; (45858 <compare_int_unlock+0x54>)
   45832:	f3bf 8f5b 	dmb	ish
   45836:	681b      	ldr	r3, [r3, #0]
   45838:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   4583c:	40c3      	lsrs	r3, r0
   4583e:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   45840:	bf42      	ittt	mi
   45842:	4b06      	ldrmi	r3, [pc, #24]	; (4585c <compare_int_unlock+0x58>)
   45844:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   45848:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   4584c:	4770      	bx	lr
   4584e:	bf00      	nop
   45850:	20006e28 	.word	0x20006e28
   45854:	40011000 	.word	0x40011000
   45858:	20006e24 	.word	0x20006e24
   4585c:	e000e100 	.word	0xe000e100

00045860 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   45860:	4b0d      	ldr	r3, [pc, #52]	; (45898 <z_nrf_rtc_timer_read+0x38>)
   45862:	6818      	ldr	r0, [r3, #0]
   45864:	0a01      	lsrs	r1, r0, #8
   45866:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   45868:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   4586c:	4b0b      	ldr	r3, [pc, #44]	; (4589c <z_nrf_rtc_timer_read+0x3c>)
   4586e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   45872:	1818      	adds	r0, r3, r0
   45874:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   45878:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   4587c:	d20a      	bcs.n	45894 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   4587e:	4b08      	ldr	r3, [pc, #32]	; (458a0 <z_nrf_rtc_timer_read+0x40>)
   45880:	e9d3 2300 	ldrd	r2, r3, [r3]
   45884:	4290      	cmp	r0, r2
   45886:	eb71 0303 	sbcs.w	r3, r1, r3
   4588a:	d203      	bcs.n	45894 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   4588c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   45890:	f141 0100 	adc.w	r1, r1, #0
}
   45894:	4770      	bx	lr
   45896:	bf00      	nop
   45898:	20006e2c 	.word	0x20006e2c
   4589c:	40011000 	.word	0x40011000
   458a0:	20003ff0 	.word	0x20003ff0

000458a4 <compare_set>:
{
   458a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   458a8:	4614      	mov	r4, r2
   458aa:	461d      	mov	r5, r3
   458ac:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   458ae:	f7ff ff45 	bl	4573c <compare_int_lock>
   458b2:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   458b4:	f7ff ffd4 	bl	45860 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   458b8:	42a0      	cmp	r0, r4
   458ba:	eb71 0305 	sbcs.w	r3, r1, r5
   458be:	d27a      	bcs.n	459b6 <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
   458c0:	4b46      	ldr	r3, [pc, #280]	; (459dc <compare_set+0x138>)
   458c2:	1a20      	subs	r0, r4, r0
   458c4:	eb65 0101 	sbc.w	r1, r5, r1
   458c8:	4298      	cmp	r0, r3
   458ca:	f171 0100 	sbcs.w	r1, r1, #0
   458ce:	f080 8081 	bcs.w	459d4 <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
   458d2:	4b43      	ldr	r3, [pc, #268]	; (459e0 <compare_set+0x13c>)
   458d4:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   458d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   458dc:	429d      	cmp	r5, r3
   458de:	bf08      	it	eq
   458e0:	4294      	cmpeq	r4, r2
   458e2:	d053      	beq.n	4598c <compare_set+0xe8>
   458e4:	ea4f 0a87 	mov.w	sl, r7, lsl #2
   458e8:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   458ec:	f107 0950 	add.w	r9, r7, #80	; 0x50
   458f0:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
   458f4:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   458f8:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
   458fc:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
   45900:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   45904:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
   45908:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
   4590c:	4a35      	ldr	r2, [pc, #212]	; (459e4 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   4590e:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   45912:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
   45914:	4646      	mov	r6, r8
     return p_reg->COUNTER;
   45916:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   4591a:	eba0 000b 	sub.w	r0, r0, fp
   4591e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   45922:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   45926:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   45928:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
   4592c:	d105      	bne.n	4593a <compare_set+0x96>
   4592e:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
   45930:	2013      	movs	r0, #19
   45932:	f00b fb24 	bl	50f7e <z_impl_k_busy_wait>
   45936:	4a2b      	ldr	r2, [pc, #172]	; (459e4 <compare_set+0x140>)
   45938:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   4593a:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
   4593e:	eba6 000c 	sub.w	r0, r6, ip
   45942:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   45946:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   4594a:	bf88      	it	hi
   4594c:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   4594e:	2000      	movs	r0, #0
   45950:	f8c9 0000 	str.w	r0, [r9]
   45954:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
   45958:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   4595c:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   45960:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
   45964:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
   45968:	4583      	cmp	fp, r0
   4596a:	d006      	beq.n	4597a <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
   4596c:	1a30      	subs	r0, r6, r0
   4596e:	3802      	subs	r0, #2
   45970:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   45974:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   45978:	d81b      	bhi.n	459b2 <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
   4597a:	eba6 0608 	sub.w	r6, r6, r8
   4597e:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   45982:	1936      	adds	r6, r6, r4
   45984:	f145 0300 	adc.w	r3, r5, #0
   45988:	4634      	mov	r4, r6
   4598a:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   4598c:	4914      	ldr	r1, [pc, #80]	; (459e0 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   4598e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   45990:	013b      	lsls	r3, r7, #4
   45992:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
   45996:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   45998:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   4599a:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
   4599c:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   459a0:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   459a2:	4638      	mov	r0, r7
   459a4:	9900      	ldr	r1, [sp, #0]
   459a6:	f7ff ff2d 	bl	45804 <compare_int_unlock>
}
   459aa:	4620      	mov	r0, r4
   459ac:	b003      	add	sp, #12
   459ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   459b2:	4630      	mov	r0, r6
   459b4:	e7af      	b.n	45916 <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
   459b6:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   459b8:	4a0b      	ldr	r2, [pc, #44]	; (459e8 <compare_set+0x144>)
   459ba:	f3bf 8f5b 	dmb	ish
   459be:	40bb      	lsls	r3, r7
   459c0:	e852 0f00 	ldrex	r0, [r2]
   459c4:	4318      	orrs	r0, r3
   459c6:	e842 0100 	strex	r1, r0, [r2]
   459ca:	2900      	cmp	r1, #0
   459cc:	d1f8      	bne.n	459c0 <compare_set+0x11c>
   459ce:	f3bf 8f5b 	dmb	ish
   459d2:	e7db      	b.n	4598c <compare_set+0xe8>
			return -EINVAL;
   459d4:	f06f 0415 	mvn.w	r4, #21
   459d8:	e7e3      	b.n	459a2 <compare_set+0xfe>
   459da:	bf00      	nop
   459dc:	01000001 	.word	0x01000001
   459e0:	20003fd8 	.word	0x20003fd8
   459e4:	40011000 	.word	0x40011000
   459e8:	20006e24 	.word	0x20006e24

000459ec <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   459ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   459ee:	4b19      	ldr	r3, [pc, #100]	; (45a54 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   459f0:	4d19      	ldr	r5, [pc, #100]	; (45a58 <sys_clock_driver_init+0x6c>)
   459f2:	2400      	movs	r4, #0
   459f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   459f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   459fc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   45a00:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   45a04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   45a08:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   45a0c:	4b13      	ldr	r3, [pc, #76]	; (45a5c <sys_clock_driver_init+0x70>)
   45a0e:	2602      	movs	r6, #2
   45a10:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   45a14:	2101      	movs	r1, #1
   45a16:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   45a1a:	2011      	movs	r0, #17
   45a1c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   45a20:	4622      	mov	r2, r4
   45a22:	f7e7 f8f3 	bl	2cc0c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   45a26:	2011      	movs	r0, #17
   45a28:	f7e7 f8c0 	bl	2cbac <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   45a2c:	4a0c      	ldr	r2, [pc, #48]	; (45a60 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   45a2e:	2301      	movs	r3, #1
   45a30:	60ab      	str	r3, [r5, #8]
   45a32:	602b      	str	r3, [r5, #0]
   45a34:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   45a36:	4b0b      	ldr	r3, [pc, #44]	; (45a64 <sys_clock_driver_init+0x78>)
   45a38:	4a0b      	ldr	r2, [pc, #44]	; (45a68 <sys_clock_driver_init+0x7c>)
   45a3a:	9300      	str	r3, [sp, #0]
   45a3c:	9401      	str	r4, [sp, #4]
   45a3e:	2300      	movs	r3, #0
   45a40:	4620      	mov	r0, r4
   45a42:	f7ff ff2f 	bl	458a4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   45a46:	4630      	mov	r0, r6
   45a48:	f7ff f964 	bl	44d14 <z_nrf_clock_control_lf_on>

	return 0;
}
   45a4c:	4620      	mov	r0, r4
   45a4e:	b002      	add	sp, #8
   45a50:	bd70      	pop	{r4, r5, r6, pc}
   45a52:	bf00      	nop
   45a54:	20003fd8 	.word	0x20003fd8
   45a58:	40011000 	.word	0x40011000
   45a5c:	e000e100 	.word	0xe000e100
   45a60:	20006e28 	.word	0x20006e28
   45a64:	00045785 	.word	0x00045785
   45a68:	007fffff 	.word	0x007fffff

00045a6c <rtc_nrf_isr>:
{
   45a6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   45a70:	4c33      	ldr	r4, [pc, #204]	; (45b40 <rtc_nrf_isr+0xd4>)
   45a72:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   45a76:	079a      	lsls	r2, r3, #30
   45a78:	d50b      	bpl.n	45a92 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   45a7a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   45a7e:	b143      	cbz	r3, 45a92 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   45a80:	4a30      	ldr	r2, [pc, #192]	; (45b44 <rtc_nrf_isr+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   45a82:	2300      	movs	r3, #0
   45a84:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   45a88:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   45a8c:	6813      	ldr	r3, [r2, #0]
   45a8e:	3301      	adds	r3, #1
   45a90:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   45a92:	f04f 0320 	mov.w	r3, #32
   45a96:	f3ef 8211 	mrs	r2, BASEPRI
   45a9a:	f383 8812 	msr	BASEPRI_MAX, r3
   45a9e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   45aa2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   45aa6:	03db      	lsls	r3, r3, #15
   45aa8:	d529      	bpl.n	45afe <rtc_nrf_isr+0x92>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   45aaa:	f3bf 8f5b 	dmb	ish
   45aae:	4b26      	ldr	r3, [pc, #152]	; (45b48 <rtc_nrf_isr+0xdc>)
   45ab0:	e853 1f00 	ldrex	r1, [r3]
   45ab4:	f021 0001 	bic.w	r0, r1, #1
   45ab8:	e843 0500 	strex	r5, r0, [r3]
   45abc:	2d00      	cmp	r5, #0
   45abe:	d1f7      	bne.n	45ab0 <rtc_nrf_isr+0x44>
   45ac0:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   45ac4:	b911      	cbnz	r1, 45acc <rtc_nrf_isr+0x60>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   45ac6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   45aca:	b1c3      	cbz	r3, 45afe <rtc_nrf_isr+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   45acc:	2500      	movs	r5, #0
   45ace:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   45ad2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
   45ad6:	f382 8811 	msr	BASEPRI, r2
   45ada:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   45ade:	f7ff febf 	bl	45860 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   45ae2:	f04f 0320 	mov.w	r3, #32
   45ae6:	f3ef 8211 	mrs	r2, BASEPRI
   45aea:	f383 8812 	msr	BASEPRI_MAX, r3
   45aee:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   45af2:	4b16      	ldr	r3, [pc, #88]	; (45b4c <rtc_nrf_isr+0xe0>)
   45af4:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   45af8:	42b0      	cmp	r0, r6
   45afa:	41b9      	sbcs	r1, r7
   45afc:	d206      	bcs.n	45b0c <rtc_nrf_isr+0xa0>
	__asm__ volatile(
   45afe:	f382 8811 	msr	BASEPRI, r2
   45b02:	f3bf 8f6f 	isb	sy
}
   45b06:	b003      	add	sp, #12
   45b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   45b0c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   45b10:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   45b14:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   45b18:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   45b1c:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   45b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   45b22:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   45b26:	f382 8811 	msr	BASEPRI, r2
   45b2a:	f3bf 8f6f 	isb	sy
		if (handler) {
   45b2e:	2900      	cmp	r1, #0
   45b30:	d0e9      	beq.n	45b06 <rtc_nrf_isr+0x9a>
			handler(chan, expire_time, user_context);
   45b32:	9000      	str	r0, [sp, #0]
   45b34:	4632      	mov	r2, r6
   45b36:	463b      	mov	r3, r7
   45b38:	4628      	mov	r0, r5
   45b3a:	4788      	blx	r1
}
   45b3c:	e7e3      	b.n	45b06 <rtc_nrf_isr+0x9a>
   45b3e:	bf00      	nop
   45b40:	40011000 	.word	0x40011000
   45b44:	20006e2c 	.word	0x20006e2c
   45b48:	20006e24 	.word	0x20006e24
   45b4c:	20003fd8 	.word	0x20003fd8

00045b50 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   45b50:	1c43      	adds	r3, r0, #1
{
   45b52:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   45b54:	d021      	beq.n	45b9a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   45b56:	2801      	cmp	r0, #1
   45b58:	dd21      	ble.n	45b9e <sys_clock_set_timeout+0x4e>
   45b5a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   45b5e:	da20      	bge.n	45ba2 <sys_clock_set_timeout+0x52>
   45b60:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   45b62:	f7ff fe7d 	bl	45860 <z_nrf_rtc_timer_read>
   45b66:	4b10      	ldr	r3, [pc, #64]	; (45ba8 <sys_clock_set_timeout+0x58>)
   45b68:	e9d3 1300 	ldrd	r1, r3, [r3]
   45b6c:	1a42      	subs	r2, r0, r1
		ticks = 0;
   45b6e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
   45b72:	480e      	ldr	r0, [pc, #56]	; (45bac <sys_clock_set_timeout+0x5c>)
		ticks = 0;
   45b74:	bf28      	it	cs
   45b76:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   45b78:	3201      	adds	r2, #1
   45b7a:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   45b7c:	4282      	cmp	r2, r0
   45b7e:	bf28      	it	cs
   45b80:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   45b82:	1852      	adds	r2, r2, r1
   45b84:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   45b88:	4909      	ldr	r1, [pc, #36]	; (45bb0 <sys_clock_set_timeout+0x60>)
   45b8a:	9001      	str	r0, [sp, #4]
   45b8c:	9100      	str	r1, [sp, #0]
   45b8e:	f143 0300 	adc.w	r3, r3, #0
   45b92:	f7ff fe87 	bl	458a4 <compare_set>
}
   45b96:	b002      	add	sp, #8
   45b98:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   45b9a:	4804      	ldr	r0, [pc, #16]	; (45bac <sys_clock_set_timeout+0x5c>)
   45b9c:	e7e0      	b.n	45b60 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   45b9e:	2400      	movs	r4, #0
   45ba0:	e7df      	b.n	45b62 <sys_clock_set_timeout+0x12>
   45ba2:	4c02      	ldr	r4, [pc, #8]	; (45bac <sys_clock_set_timeout+0x5c>)
   45ba4:	e7dd      	b.n	45b62 <sys_clock_set_timeout+0x12>
   45ba6:	bf00      	nop
   45ba8:	20003fe8 	.word	0x20003fe8
   45bac:	007fffff 	.word	0x007fffff
   45bb0:	00045785 	.word	0x00045785

00045bb4 <sys_clock_elapsed>:
{
   45bb4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   45bb6:	f7ff fe53 	bl	45860 <z_nrf_rtc_timer_read>
   45bba:	4b02      	ldr	r3, [pc, #8]	; (45bc4 <sys_clock_elapsed+0x10>)
   45bbc:	681b      	ldr	r3, [r3, #0]
}
   45bbe:	1ac0      	subs	r0, r0, r3
   45bc0:	bd08      	pop	{r3, pc}
   45bc2:	bf00      	nop
   45bc4:	20003fe8 	.word	0x20003fe8

00045bc8 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   45bc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   45bcc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   45bd0:	2a08      	cmp	r2, #8
   45bd2:	d106      	bne.n	45be2 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   45bd4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   45bd8:	2b05      	cmp	r3, #5
   45bda:	d802      	bhi.n	45be2 <nrf52_errata_103+0x1a>
   45bdc:	4a02      	ldr	r2, [pc, #8]	; (45be8 <nrf52_errata_103+0x20>)
   45bde:	5cd0      	ldrb	r0, [r2, r3]
   45be0:	4770      	bx	lr
                        return false;
   45be2:	2000      	movs	r0, #0
}
   45be4:	4770      	bx	lr
   45be6:	bf00      	nop
   45be8:	00054366 	.word	0x00054366

00045bec <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   45bec:	4a02      	ldr	r2, [pc, #8]	; (45bf8 <nvmc_wait+0xc>)
   45bee:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   45bf2:	2b00      	cmp	r3, #0
   45bf4:	d0fb      	beq.n	45bee <nvmc_wait+0x2>
}
   45bf6:	4770      	bx	lr
   45bf8:	4001e000 	.word	0x4001e000

00045bfc <SystemInit>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   45bfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   45c00:	b510      	push	{r4, lr}
            if (var1 == 0x08)
   45c02:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   45c06:	2a08      	cmp	r2, #8
   45c08:	d14e      	bne.n	45ca8 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   45c0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   45c0e:	2100      	movs	r1, #0
   45c10:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   45c14:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   45c18:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   45c1c:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   45c20:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   45c24:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   45c28:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   45c2c:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   45c30:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   45c34:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   45c38:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   45c3c:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   45c40:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   45c44:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   45c48:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   45c4c:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   45c50:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   45c54:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   45c58:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   45c5c:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   45c60:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   45c64:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   45c68:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   45c6c:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   45c70:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   45c74:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   45c78:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   45c7c:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   45c80:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   45c84:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   45c88:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   45c8c:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   45c90:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   45c94:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   45c98:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   45c9c:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   45ca0:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   45ca4:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   45ca8:	f7ff ff8e 	bl	45bc8 <nrf52_errata_103>
   45cac:	b118      	cbz	r0, 45cb6 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   45cae:	4b3b      	ldr	r3, [pc, #236]	; (45d9c <SystemInit+0x1a0>)
   45cb0:	4a3b      	ldr	r2, [pc, #236]	; (45da0 <SystemInit+0x1a4>)
   45cb2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   45cb6:	f7ff ff87 	bl	45bc8 <nrf52_errata_103>
   45cba:	b118      	cbz	r0, 45cc4 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   45cbc:	4b39      	ldr	r3, [pc, #228]	; (45da4 <SystemInit+0x1a8>)
   45cbe:	22fb      	movs	r2, #251	; 0xfb
   45cc0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   45cc4:	f7ff ff80 	bl	45bc8 <nrf52_errata_103>
   45cc8:	b170      	cbz	r0, 45ce8 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   45cca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   45cce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   45cd2:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   45cd6:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   45cda:	f022 020f 	bic.w	r2, r2, #15
   45cde:	f003 030f 	and.w	r3, r3, #15
   45ce2:	4313      	orrs	r3, r2
   45ce4:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   45ce8:	f7ff ff6e 	bl	45bc8 <nrf52_errata_103>
   45cec:	b120      	cbz	r0, 45cf8 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   45cee:	4b2e      	ldr	r3, [pc, #184]	; (45da8 <SystemInit+0x1ac>)
   45cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
   45cf4:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   45cf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   45cfc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   45d00:	2b08      	cmp	r3, #8
   45d02:	d11a      	bne.n	45d3a <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   45d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   45d08:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   45d0c:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   45d0e:	bf44      	itt	mi
   45d10:	f06f 0201 	mvnmi.w	r2, #1
   45d14:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   45d18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   45d1c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   45d20:	2b05      	cmp	r3, #5
   45d22:	d802      	bhi.n	45d2a <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   45d24:	4a21      	ldr	r2, [pc, #132]	; (45dac <SystemInit+0x1b0>)
   45d26:	5cd3      	ldrb	r3, [r2, r3]
   45d28:	b13b      	cbz	r3, 45d3a <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   45d2a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   45d2e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   45d32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   45d36:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   45d3a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   45d3e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   45d42:	2a00      	cmp	r2, #0
   45d44:	db03      	blt.n	45d4e <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   45d46:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   45d4a:	2b00      	cmp	r3, #0
   45d4c:	da22      	bge.n	45d94 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   45d4e:	4918      	ldr	r1, [pc, #96]	; (45db0 <SystemInit+0x1b4>)
   45d50:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   45d52:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   45d56:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   45d5a:	2412      	movs	r4, #18
    nvmc_wait();
   45d5c:	f7ff ff46 	bl	45bec <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   45d60:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   45d64:	f7ff ff42 	bl	45bec <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   45d68:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   45d6c:	f7ff ff3e 	bl	45bec <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   45d70:	2300      	movs	r3, #0
   45d72:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   45d76:	f7ff ff39 	bl	45bec <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   45d7a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   45d7e:	490d      	ldr	r1, [pc, #52]	; (45db4 <SystemInit+0x1b8>)
   45d80:	4b0d      	ldr	r3, [pc, #52]	; (45db8 <SystemInit+0x1bc>)
   45d82:	68ca      	ldr	r2, [r1, #12]
   45d84:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   45d88:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   45d8a:	60cb      	str	r3, [r1, #12]
   45d8c:	f3bf 8f4f 	dsb	sy
    __NOP();
   45d90:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   45d92:	e7fd      	b.n	45d90 <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   45d94:	4b09      	ldr	r3, [pc, #36]	; (45dbc <SystemInit+0x1c0>)
   45d96:	4a0a      	ldr	r2, [pc, #40]	; (45dc0 <SystemInit+0x1c4>)
   45d98:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   45d9a:	bd10      	pop	{r4, pc}
   45d9c:	40005000 	.word	0x40005000
   45da0:	00038148 	.word	0x00038148
   45da4:	4000f000 	.word	0x4000f000
   45da8:	40029000 	.word	0x40029000
   45dac:	00054360 	.word	0x00054360
   45db0:	4001e000 	.word	0x4001e000
   45db4:	e000ed00 	.word	0xe000ed00
   45db8:	05fa0004 	.word	0x05fa0004
   45dbc:	20000e2c 	.word	0x20000e2c
   45dc0:	03d09000 	.word	0x03d09000

00045dc4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   45dc4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   45dc6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   45dc8:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   45dca:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   45dce:	fab2 f382 	clz	r3, r2
   45dd2:	f1c3 031f 	rsb	r3, r3, #31
   45dd6:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   45dd8:	fa05 f403 	lsl.w	r4, r5, r3
   45ddc:	ea22 0404 	bic.w	r4, r2, r4
   45de0:	e850 6f00 	ldrex	r6, [r0]
   45de4:	4296      	cmp	r6, r2
   45de6:	d104      	bne.n	45df2 <nrfx_flag32_alloc+0x2e>
   45de8:	e840 4c00 	strex	ip, r4, [r0]
   45dec:	f1bc 0f00 	cmp.w	ip, #0
   45df0:	d1f6      	bne.n	45de0 <nrfx_flag32_alloc+0x1c>
   45df2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   45df6:	d1e7      	bne.n	45dc8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   45df8:	4801      	ldr	r0, [pc, #4]	; (45e00 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   45dfa:	700b      	strb	r3, [r1, #0]
}
   45dfc:	bd70      	pop	{r4, r5, r6, pc}
   45dfe:	bf00      	nop
   45e00:	0bad0000 	.word	0x0bad0000

00045e04 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   45e04:	6803      	ldr	r3, [r0, #0]
   45e06:	40cb      	lsrs	r3, r1
   45e08:	07db      	lsls	r3, r3, #31
{
   45e0a:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   45e0c:	d414      	bmi.n	45e38 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   45e0e:	2301      	movs	r3, #1
   45e10:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   45e12:	6802      	ldr	r2, [r0, #0]
   45e14:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   45e18:	ea43 0102 	orr.w	r1, r3, r2
   45e1c:	e850 4f00 	ldrex	r4, [r0]
   45e20:	4294      	cmp	r4, r2
   45e22:	d104      	bne.n	45e2e <nrfx_flag32_free+0x2a>
   45e24:	e840 1c00 	strex	ip, r1, [r0]
   45e28:	f1bc 0f00 	cmp.w	ip, #0
   45e2c:	d1f6      	bne.n	45e1c <nrfx_flag32_free+0x18>
   45e2e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   45e32:	d1ee      	bne.n	45e12 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   45e34:	4801      	ldr	r0, [pc, #4]	; (45e3c <nrfx_flag32_free+0x38>)
}
   45e36:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   45e38:	4801      	ldr	r0, [pc, #4]	; (45e40 <nrfx_flag32_free+0x3c>)
   45e3a:	e7fc      	b.n	45e36 <nrfx_flag32_free+0x32>
   45e3c:	0bad0000 	.word	0x0bad0000
   45e40:	0bad0004 	.word	0x0bad0004

00045e44 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   45e44:	4b04      	ldr	r3, [pc, #16]	; (45e58 <nrfx_clock_init+0x14>)
   45e46:	791a      	ldrb	r2, [r3, #4]
   45e48:	b922      	cbnz	r2, 45e54 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   45e4a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   45e4c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   45e4e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   45e50:	4802      	ldr	r0, [pc, #8]	; (45e5c <nrfx_clock_init+0x18>)
   45e52:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   45e54:	4802      	ldr	r0, [pc, #8]	; (45e60 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   45e56:	4770      	bx	lr
   45e58:	20006e30 	.word	0x20006e30
   45e5c:	0bad0000 	.word	0x0bad0000
   45e60:	0bad000c 	.word	0x0bad000c

00045e64 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   45e64:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   45e66:	2000      	movs	r0, #0
   45e68:	f7e6 fec2 	bl	2cbf0 <arch_irq_is_enabled>
   45e6c:	b908      	cbnz	r0, 45e72 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   45e6e:	f7e6 fe9d 	bl	2cbac <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
   45e72:	4b02      	ldr	r3, [pc, #8]	; (45e7c <nrfx_clock_enable+0x18>)
   45e74:	2201      	movs	r2, #1
   45e76:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   45e78:	bd08      	pop	{r3, pc}
   45e7a:	bf00      	nop
   45e7c:	20007421 	.word	0x20007421

00045e80 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   45e80:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   45e82:	b110      	cbz	r0, 45e8a <nrfx_clock_stop+0xa>
   45e84:	2801      	cmp	r0, #1
   45e86:	d017      	beq.n	45eb8 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   45e88:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   45e8a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   45e8e:	2302      	movs	r3, #2
   45e90:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   45e94:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   45e98:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   45e9c:	2301      	movs	r3, #1
   45e9e:	60e3      	str	r3, [r4, #12]
   45ea0:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   45ea4:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   45ea8:	03db      	lsls	r3, r3, #15
   45eaa:	d5ed      	bpl.n	45e88 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   45eac:	2001      	movs	r0, #1
   45eae:	f00a f932 	bl	50116 <nrfx_busy_wait>
   45eb2:	3d01      	subs	r5, #1
   45eb4:	d1f6      	bne.n	45ea4 <nrfx_clock_stop+0x24>
   45eb6:	e7e7      	b.n	45e88 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   45eb8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   45ebc:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   45ebe:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   45ec2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   45ec6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   45eca:	6060      	str	r0, [r4, #4]
   45ecc:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   45ed0:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   45ed4:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   45ed8:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   45eda:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   45ede:	d505      	bpl.n	45eec <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   45ee0:	b123      	cbz	r3, 45eec <nrfx_clock_stop+0x6c>
   45ee2:	2001      	movs	r0, #1
   45ee4:	f00a f917 	bl	50116 <nrfx_busy_wait>
   45ee8:	3d01      	subs	r5, #1
   45eea:	d1f1      	bne.n	45ed0 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   45eec:	4b01      	ldr	r3, [pc, #4]	; (45ef4 <nrfx_clock_stop+0x74>)
   45eee:	2200      	movs	r2, #0
   45ef0:	715a      	strb	r2, [r3, #5]
   45ef2:	e7c9      	b.n	45e88 <nrfx_clock_stop+0x8>
   45ef4:	20006e30 	.word	0x20006e30

00045ef8 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   45ef8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   45efc:	b510      	push	{r4, lr}
   45efe:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   45f02:	b16a      	cbz	r2, 45f20 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   45f04:	2200      	movs	r2, #0
   45f06:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   45f0a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   45f0e:	2201      	movs	r2, #1
   45f10:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   45f14:	4b11      	ldr	r3, [pc, #68]	; (45f5c <nrfx_clock_irq_handler+0x64>)
   45f16:	7958      	ldrb	r0, [r3, #5]
   45f18:	b910      	cbnz	r0, 45f20 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   45f1a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   45f1c:	681b      	ldr	r3, [r3, #0]
   45f1e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   45f20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   45f24:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   45f28:	b172      	cbz	r2, 45f48 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   45f2a:	2200      	movs	r2, #0
   45f2c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   45f30:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   45f34:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   45f38:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   45f3c:	0792      	lsls	r2, r2, #30
   45f3e:	d104      	bne.n	45f4a <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   45f40:	2201      	movs	r2, #1
   45f42:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   45f46:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   45f48:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   45f4a:	2202      	movs	r2, #2
   45f4c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   45f50:	4b02      	ldr	r3, [pc, #8]	; (45f5c <nrfx_clock_irq_handler+0x64>)
}
   45f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   45f56:	681b      	ldr	r3, [r3, #0]
   45f58:	2001      	movs	r0, #1
   45f5a:	4718      	bx	r3
   45f5c:	20006e30 	.word	0x20006e30

00045f60 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   45f60:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   45f62:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   45f66:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   45f68:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   45f6a:	6002      	str	r2, [r0, #0]
}
   45f6c:	4802      	ldr	r0, [pc, #8]	; (45f78 <nrf_gpio_pin_port_decode+0x18>)
   45f6e:	bf18      	it	ne
   45f70:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   45f74:	4770      	bx	lr
   45f76:	bf00      	nop
   45f78:	50000300 	.word	0x50000300

00045f7c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   45f7c:	4b03      	ldr	r3, [pc, #12]	; (45f8c <pin_in_use_by_te+0x10>)
   45f7e:	3008      	adds	r0, #8
   45f80:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   45f84:	f3c0 1040 	ubfx	r0, r0, #5, #1
   45f88:	4770      	bx	lr
   45f8a:	bf00      	nop
   45f8c:	20000e30 	.word	0x20000e30

00045f90 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   45f90:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   45f92:	f100 0308 	add.w	r3, r0, #8
   45f96:	4c0c      	ldr	r4, [pc, #48]	; (45fc8 <call_handler+0x38>)
   45f98:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   45f9c:	05da      	lsls	r2, r3, #23
{
   45f9e:	4605      	mov	r5, r0
   45fa0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   45fa2:	d507      	bpl.n	45fb4 <call_handler+0x24>
   45fa4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   45fa8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   45fac:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   45fb0:	6852      	ldr	r2, [r2, #4]
   45fb2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   45fb4:	68a3      	ldr	r3, [r4, #8]
   45fb6:	b12b      	cbz	r3, 45fc4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   45fb8:	68e2      	ldr	r2, [r4, #12]
   45fba:	4631      	mov	r1, r6
   45fbc:	4628      	mov	r0, r5
    }
}
   45fbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   45fc2:	4718      	bx	r3
}
   45fc4:	bd70      	pop	{r4, r5, r6, pc}
   45fc6:	bf00      	nop
   45fc8:	20000e30 	.word	0x20000e30

00045fcc <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   45fcc:	4a12      	ldr	r2, [pc, #72]	; (46018 <release_handler+0x4c>)
   45fce:	3008      	adds	r0, #8
{
   45fd0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   45fd2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   45fd6:	05d9      	lsls	r1, r3, #23
   45fd8:	d51b      	bpl.n	46012 <release_handler+0x46>
   45fda:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   45fde:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   45fe2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   45fe6:	f102 040e 	add.w	r4, r2, #14
   45fea:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   45fec:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   45ff0:	f413 7f80 	tst.w	r3, #256	; 0x100
   45ff4:	d003      	beq.n	45ffe <release_handler+0x32>
   45ff6:	f3c3 2343 	ubfx	r3, r3, #9, #4
   45ffa:	4299      	cmp	r1, r3
   45ffc:	d009      	beq.n	46012 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   45ffe:	3001      	adds	r0, #1
   46000:	2830      	cmp	r0, #48	; 0x30
   46002:	d1f3      	bne.n	45fec <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   46004:	2300      	movs	r3, #0
   46006:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   4600a:	4804      	ldr	r0, [pc, #16]	; (4601c <release_handler+0x50>)
}
   4600c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   4600e:	f7ff bef9 	b.w	45e04 <nrfx_flag32_free>
}
   46012:	bc10      	pop	{r4}
   46014:	4770      	bx	lr
   46016:	bf00      	nop
   46018:	20000e30 	.word	0x20000e30
   4601c:	20000ea4 	.word	0x20000ea4

00046020 <pin_handler_trigger_uninit>:
{
   46020:	b538      	push	{r3, r4, r5, lr}
   46022:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   46024:	f7ff ffaa 	bl	45f7c <pin_in_use_by_te>
   46028:	4c09      	ldr	r4, [pc, #36]	; (46050 <pin_handler_trigger_uninit+0x30>)
   4602a:	f102 0508 	add.w	r5, r2, #8
   4602e:	b140      	cbz	r0, 46042 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   46030:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   46034:	4907      	ldr	r1, [pc, #28]	; (46054 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   46036:	0b5b      	lsrs	r3, r3, #13
   46038:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   4603c:	2000      	movs	r0, #0
   4603e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   46042:	4610      	mov	r0, r2
   46044:	f7ff ffc2 	bl	45fcc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   46048:	2300      	movs	r3, #0
   4604a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   4604e:	bd38      	pop	{r3, r4, r5, pc}
   46050:	20000e30 	.word	0x20000e30
   46054:	40006000 	.word	0x40006000

00046058 <nrfx_gpiote_input_configure>:
{
   46058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4605c:	4604      	mov	r4, r0
   4605e:	b085      	sub	sp, #20
   46060:	4690      	mov	r8, r2
   46062:	461d      	mov	r5, r3
    if (p_input_config)
   46064:	b1f1      	cbz	r1, 460a4 <nrfx_gpiote_input_configure+0x4c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   46066:	4f4e      	ldr	r7, [pc, #312]	; (461a0 <nrfx_gpiote_input_configure+0x148>)
   46068:	f100 0908 	add.w	r9, r0, #8
   4606c:	f837 6019 	ldrh.w	r6, [r7, r9, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   46070:	07b3      	lsls	r3, r6, #30
   46072:	d502      	bpl.n	4607a <nrfx_gpiote_input_configure+0x22>
   46074:	f7ff ff82 	bl	45f7c <pin_in_use_by_te>
   46078:	bb18      	cbnz	r0, 460c2 <nrfx_gpiote_input_configure+0x6a>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   4607a:	2300      	movs	r3, #0
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   4607c:	f026 0602 	bic.w	r6, r6, #2
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   46080:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   46084:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   46088:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   4608c:	f10d 020f 	add.w	r2, sp, #15
   46090:	460b      	mov	r3, r1
   46092:	4620      	mov	r0, r4
   46094:	f10d 010e 	add.w	r1, sp, #14
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   46098:	f046 0601 	orr.w	r6, r6, #1
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   4609c:	f00a f869 	bl	50172 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   460a0:	f827 6019 	strh.w	r6, [r7, r9, lsl #1]
    if (p_trigger_config)
   460a4:	f1b8 0f00 	cmp.w	r8, #0
   460a8:	d026      	beq.n	460f8 <nrfx_gpiote_input_configure+0xa0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   460aa:	4b3d      	ldr	r3, [pc, #244]	; (461a0 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   460ac:	f898 7000 	ldrb.w	r7, [r8]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   460b0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   460b4:	f104 0608 	add.w	r6, r4, #8
   460b8:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
   460bc:	0788      	lsls	r0, r1, #30
   460be:	d502      	bpl.n	460c6 <nrfx_gpiote_input_configure+0x6e>
            if (use_evt)
   460c0:	b192      	cbz	r2, 460e8 <nrfx_gpiote_input_configure+0x90>
            return NRFX_ERROR_INVALID_PARAM;
   460c2:	4838      	ldr	r0, [pc, #224]	; (461a4 <nrfx_gpiote_input_configure+0x14c>)
   460c4:	e01a      	b.n	460fc <nrfx_gpiote_input_configure+0xa4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   460c6:	f021 0120 	bic.w	r1, r1, #32
   460ca:	04c9      	lsls	r1, r1, #19
   460cc:	0cc9      	lsrs	r1, r1, #19
   460ce:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
   460d2:	b14a      	cbz	r2, 460e8 <nrfx_gpiote_input_configure+0x90>
                if (!edge)
   460d4:	2f03      	cmp	r7, #3
   460d6:	d8f4      	bhi.n	460c2 <nrfx_gpiote_input_configure+0x6a>
                uint8_t ch = *p_trigger_config->p_in_channel;
   460d8:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   460dc:	b98f      	cbnz	r7, 46102 <nrfx_gpiote_input_configure+0xaa>
   460de:	4a32      	ldr	r2, [pc, #200]	; (461a8 <nrfx_gpiote_input_configure+0x150>)
   460e0:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
   460e4:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   460e8:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
   460ec:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   460f0:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
   460f4:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
   460f8:	bb4d      	cbnz	r5, 4614e <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
   460fa:	482c      	ldr	r0, [pc, #176]	; (461ac <nrfx_gpiote_input_configure+0x154>)
}
   460fc:	b005      	add	sp, #20
   460fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   46102:	ea4f 028c 	mov.w	r2, ip, lsl #2
   46106:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   4610a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   4610e:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   46112:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   46116:	f020 0003 	bic.w	r0, r0, #3
   4611a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   4611e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   46122:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   46126:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   4612a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   4612e:	0220      	lsls	r0, r4, #8
   46130:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   46134:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   46138:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   4613c:	ea40 000e 	orr.w	r0, r0, lr
   46140:	f041 0120 	orr.w	r1, r1, #32
   46144:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
   46148:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   4614c:	e7cc      	b.n	460e8 <nrfx_gpiote_input_configure+0x90>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   4614e:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   46152:	4620      	mov	r0, r4
   46154:	f7ff ff3a 	bl	45fcc <release_handler>
    if (!handler)
   46158:	2e00      	cmp	r6, #0
   4615a:	d0ce      	beq.n	460fa <nrfx_gpiote_input_configure+0xa2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   4615c:	4d10      	ldr	r5, [pc, #64]	; (461a0 <nrfx_gpiote_input_configure+0x148>)
   4615e:	e9d5 2300 	ldrd	r2, r3, [r5]
   46162:	4296      	cmp	r6, r2
   46164:	d101      	bne.n	4616a <nrfx_gpiote_input_configure+0x112>
   46166:	429f      	cmp	r7, r3
   46168:	d018      	beq.n	4619c <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   4616a:	4811      	ldr	r0, [pc, #68]	; (461b0 <nrfx_gpiote_input_configure+0x158>)
   4616c:	f10d 010f 	add.w	r1, sp, #15
   46170:	f7ff fe28 	bl	45dc4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   46174:	4b0d      	ldr	r3, [pc, #52]	; (461ac <nrfx_gpiote_input_configure+0x154>)
   46176:	4298      	cmp	r0, r3
   46178:	d1c0      	bne.n	460fc <nrfx_gpiote_input_configure+0xa4>
        handler_id = (int32_t)id;
   4617a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   4617e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   46182:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   46186:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   46188:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   4618a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   4618e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   46192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   46196:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   4619a:	e7ae      	b.n	460fa <nrfx_gpiote_input_configure+0xa2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   4619c:	2200      	movs	r2, #0
   4619e:	e7ee      	b.n	4617e <nrfx_gpiote_input_configure+0x126>
   461a0:	20000e30 	.word	0x20000e30
   461a4:	0bad0004 	.word	0x0bad0004
   461a8:	40006000 	.word	0x40006000
   461ac:	0bad0000 	.word	0x0bad0000
   461b0:	20000ea4 	.word	0x20000ea4

000461b4 <nrfx_gpiote_output_configure>:
{
   461b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   461b8:	4604      	mov	r4, r0
   461ba:	4615      	mov	r5, r2
    if (p_config)
   461bc:	b309      	cbz	r1, 46202 <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   461be:	4f32      	ldr	r7, [pc, #200]	; (46288 <nrfx_gpiote_output_configure+0xd4>)
   461c0:	f100 0808 	add.w	r8, r0, #8
   461c4:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   461c8:	07b2      	lsls	r2, r6, #30
   461ca:	d403      	bmi.n	461d4 <nrfx_gpiote_output_configure+0x20>
   461cc:	f7ff fed6 	bl	45f7c <pin_in_use_by_te>
   461d0:	2800      	cmp	r0, #0
   461d2:	d157      	bne.n	46284 <nrfx_gpiote_output_configure+0xd0>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   461d4:	f016 0f1c 	tst.w	r6, #28
   461d8:	d002      	beq.n	461e0 <nrfx_gpiote_output_configure+0x2c>
   461da:	784b      	ldrb	r3, [r1, #1]
   461dc:	2b01      	cmp	r3, #1
   461de:	d051      	beq.n	46284 <nrfx_gpiote_output_configure+0xd0>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   461e0:	2301      	movs	r3, #1
   461e2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   461e6:	2300      	movs	r3, #0
   461e8:	e9cd 1300 	strd	r1, r3, [sp]
   461ec:	1c4a      	adds	r2, r1, #1
   461ee:	1c8b      	adds	r3, r1, #2
   461f0:	4620      	mov	r0, r4
   461f2:	f10d 010f 	add.w	r1, sp, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   461f6:	f046 0603 	orr.w	r6, r6, #3
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   461fa:	f009 ffba 	bl	50172 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   461fe:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_task_config)
   46202:	b91d      	cbnz	r5, 4620c <nrfx_gpiote_output_configure+0x58>
    return NRFX_SUCCESS;
   46204:	4821      	ldr	r0, [pc, #132]	; (4628c <nrfx_gpiote_output_configure+0xd8>)
}
   46206:	b004      	add	sp, #16
   46208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   4620c:	4e1e      	ldr	r6, [pc, #120]	; (46288 <nrfx_gpiote_output_configure+0xd4>)
   4620e:	f104 0708 	add.w	r7, r4, #8
   46212:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   46216:	0783      	lsls	r3, r0, #30
   46218:	d534      	bpl.n	46284 <nrfx_gpiote_output_configure+0xd0>
        uint32_t ch = p_task_config->task_ch;
   4621a:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   4621e:	4661      	mov	r1, ip
   46220:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   46222:	f020 0020 	bic.w	r0, r0, #32
   46226:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   4622a:	04c0      	lsls	r0, r0, #19
   4622c:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   46230:	0cc0      	lsrs	r0, r0, #19
   46232:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   46236:	2300      	movs	r3, #0
   46238:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   4623c:	786a      	ldrb	r2, [r5, #1]
   4623e:	2a00      	cmp	r2, #0
   46240:	d0e0      	beq.n	46204 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   46242:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   46246:	78ad      	ldrb	r5, [r5, #2]
   46248:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   4624c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   46250:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   46254:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   46258:	0223      	lsls	r3, r4, #8
   4625a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   4625e:	0412      	lsls	r2, r2, #16
   46260:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   46264:	ea43 030e 	orr.w	r3, r3, lr
   46268:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   4626a:	052a      	lsls	r2, r5, #20
   4626c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   46270:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   46274:	4313      	orrs	r3, r2
   46276:	f040 0020 	orr.w	r0, r0, #32
   4627a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   4627e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   46282:	e7bf      	b.n	46204 <nrfx_gpiote_output_configure+0x50>
{
   46284:	4802      	ldr	r0, [pc, #8]	; (46290 <nrfx_gpiote_output_configure+0xdc>)
   46286:	e7be      	b.n	46206 <nrfx_gpiote_output_configure+0x52>
   46288:	20000e30 	.word	0x20000e30
   4628c:	0bad0000 	.word	0x0bad0000
   46290:	0bad0004 	.word	0x0bad0004

00046294 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   46294:	4b01      	ldr	r3, [pc, #4]	; (4629c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   46296:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   4629a:	4770      	bx	lr
   4629c:	20000e30 	.word	0x20000e30

000462a0 <nrfx_gpiote_channel_get>:
{
   462a0:	b508      	push	{r3, lr}
   462a2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   462a4:	f7ff fe6a 	bl	45f7c <pin_in_use_by_te>
   462a8:	b138      	cbz	r0, 462ba <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   462aa:	4b05      	ldr	r3, [pc, #20]	; (462c0 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   462ac:	4805      	ldr	r0, [pc, #20]	; (462c4 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   462ae:	3208      	adds	r2, #8
   462b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   462b4:	0b5b      	lsrs	r3, r3, #13
   462b6:	700b      	strb	r3, [r1, #0]
}
   462b8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   462ba:	4803      	ldr	r0, [pc, #12]	; (462c8 <nrfx_gpiote_channel_get+0x28>)
   462bc:	e7fc      	b.n	462b8 <nrfx_gpiote_channel_get+0x18>
   462be:	bf00      	nop
   462c0:	20000e30 	.word	0x20000e30
   462c4:	0bad0000 	.word	0x0bad0000
   462c8:	0bad0004 	.word	0x0bad0004

000462cc <nrfx_gpiote_init>:
{
   462cc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   462ce:	4c0f      	ldr	r4, [pc, #60]	; (4630c <nrfx_gpiote_init+0x40>)
   462d0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   462d4:	b9bd      	cbnz	r5, 46306 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   462d6:	2260      	movs	r2, #96	; 0x60
   462d8:	4629      	mov	r1, r5
   462da:	f104 0010 	add.w	r0, r4, #16
   462de:	f005 fcc6 	bl	4bc6e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   462e2:	2006      	movs	r0, #6
   462e4:	f7e6 fc62 	bl	2cbac <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   462e8:	4b09      	ldr	r3, [pc, #36]	; (46310 <nrfx_gpiote_init+0x44>)
    return err_code;
   462ea:	480a      	ldr	r0, [pc, #40]	; (46314 <nrfx_gpiote_init+0x48>)
   462ec:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   462f0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   462f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   462f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   462fc:	2301      	movs	r3, #1
   462fe:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   46302:	6763      	str	r3, [r4, #116]	; 0x74
}
   46304:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   46306:	4804      	ldr	r0, [pc, #16]	; (46318 <nrfx_gpiote_init+0x4c>)
   46308:	e7fc      	b.n	46304 <nrfx_gpiote_init+0x38>
   4630a:	bf00      	nop
   4630c:	20000e30 	.word	0x20000e30
   46310:	40006000 	.word	0x40006000
   46314:	0bad0000 	.word	0x0bad0000
   46318:	0bad0005 	.word	0x0bad0005

0004631c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   4631c:	4b03      	ldr	r3, [pc, #12]	; (4632c <nrfx_gpiote_is_init+0x10>)
   4631e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   46322:	3800      	subs	r0, #0
   46324:	bf18      	it	ne
   46326:	2001      	movne	r0, #1
   46328:	4770      	bx	lr
   4632a:	bf00      	nop
   4632c:	20000e30 	.word	0x20000e30

00046330 <nrfx_gpiote_channel_free>:
{
   46330:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   46332:	4801      	ldr	r0, [pc, #4]	; (46338 <nrfx_gpiote_channel_free+0x8>)
   46334:	f7ff bd66 	b.w	45e04 <nrfx_flag32_free>
   46338:	20000ea0 	.word	0x20000ea0

0004633c <nrfx_gpiote_channel_alloc>:
{
   4633c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   4633e:	4801      	ldr	r0, [pc, #4]	; (46344 <nrfx_gpiote_channel_alloc+0x8>)
   46340:	f7ff bd40 	b.w	45dc4 <nrfx_flag32_alloc>
   46344:	20000ea0 	.word	0x20000ea0

00046348 <nrfx_gpiote_trigger_enable>:
{
   46348:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4634a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   4634c:	f7ff fe16 	bl	45f7c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   46350:	f104 0208 	add.w	r2, r4, #8
   46354:	4b1e      	ldr	r3, [pc, #120]	; (463d0 <nrfx_gpiote_trigger_enable+0x88>)
   46356:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   4635a:	b1e8      	cbz	r0, 46398 <nrfx_gpiote_trigger_enable+0x50>
   4635c:	f013 0502 	ands.w	r5, r3, #2
   46360:	d11a      	bne.n	46398 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   46362:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   46364:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   46366:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   4636a:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   4636e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   46372:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   46376:	6005      	str	r5, [r0, #0]
   46378:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   4637a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   4637e:	f040 0001 	orr.w	r0, r0, #1
   46382:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   46386:	b129      	cbz	r1, 46394 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   46388:	2201      	movs	r2, #1
   4638a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   4638e:	4a11      	ldr	r2, [pc, #68]	; (463d4 <nrfx_gpiote_trigger_enable+0x8c>)
   46390:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   46394:	b003      	add	sp, #12
   46396:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   46398:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   4639c:	2b04      	cmp	r3, #4
   4639e:	d012      	beq.n	463c6 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   463a0:	2b05      	cmp	r3, #5
   463a2:	d012      	beq.n	463ca <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   463a4:	a801      	add	r0, sp, #4
   463a6:	9401      	str	r4, [sp, #4]
   463a8:	f7ff fdda 	bl	45f60 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   463ac:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   463ae:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   463b2:	40d9      	lsrs	r1, r3
   463b4:	f001 0101 	and.w	r1, r1, #1
   463b8:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   463ba:	4620      	mov	r0, r4
}
   463bc:	b003      	add	sp, #12
   463be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   463c2:	f009 bf1f 	b.w	50204 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   463c6:	2103      	movs	r1, #3
   463c8:	e7f7      	b.n	463ba <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   463ca:	2102      	movs	r1, #2
   463cc:	e7f5      	b.n	463ba <nrfx_gpiote_trigger_enable+0x72>
   463ce:	bf00      	nop
   463d0:	20000e30 	.word	0x20000e30
   463d4:	40006000 	.word	0x40006000

000463d8 <nrfx_gpiote_trigger_disable>:
{
   463d8:	b508      	push	{r3, lr}
   463da:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   463dc:	f7ff fdce 	bl	45f7c <pin_in_use_by_te>
   463e0:	b1c0      	cbz	r0, 46414 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   463e2:	f102 0108 	add.w	r1, r2, #8
   463e6:	4b0e      	ldr	r3, [pc, #56]	; (46420 <nrfx_gpiote_trigger_disable+0x48>)
   463e8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   463ec:	0799      	lsls	r1, r3, #30
   463ee:	d411      	bmi.n	46414 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   463f0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   463f2:	2201      	movs	r2, #1
   463f4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   463f6:	009b      	lsls	r3, r3, #2
   463f8:	490a      	ldr	r1, [pc, #40]	; (46424 <nrfx_gpiote_trigger_disable+0x4c>)
   463fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   463fe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   46402:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   46406:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   4640a:	f022 0203 	bic.w	r2, r2, #3
   4640e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   46412:	bd08      	pop	{r3, pc}
   46414:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   46418:	2100      	movs	r1, #0
   4641a:	4610      	mov	r0, r2
   4641c:	f009 bef2 	b.w	50204 <nrf_gpio_cfg_sense_set>
   46420:	20000e30 	.word	0x20000e30
   46424:	40006000 	.word	0x40006000

00046428 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   46428:	4b0e      	ldr	r3, [pc, #56]	; (46464 <nrfx_gpiote_pin_uninit+0x3c>)
   4642a:	f100 0208 	add.w	r2, r0, #8
{
   4642e:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   46430:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   46434:	07db      	lsls	r3, r3, #31
{
   46436:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   46438:	d511      	bpl.n	4645e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   4643a:	f7ff ffcd 	bl	463d8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   4643e:	4620      	mov	r0, r4
   46440:	f7ff fdee 	bl	46020 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46444:	a801      	add	r0, sp, #4
   46446:	9401      	str	r4, [sp, #4]
   46448:	f7ff fd8a 	bl	45f60 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   4644c:	9b01      	ldr	r3, [sp, #4]
   4644e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   46452:	2202      	movs	r2, #2
   46454:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   46458:	4803      	ldr	r0, [pc, #12]	; (46468 <nrfx_gpiote_pin_uninit+0x40>)
}
   4645a:	b002      	add	sp, #8
   4645c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   4645e:	4803      	ldr	r0, [pc, #12]	; (4646c <nrfx_gpiote_pin_uninit+0x44>)
   46460:	e7fb      	b.n	4645a <nrfx_gpiote_pin_uninit+0x32>
   46462:	bf00      	nop
   46464:	20000e30 	.word	0x20000e30
   46468:	0bad0000 	.word	0x0bad0000
   4646c:	0bad0004 	.word	0x0bad0004

00046470 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   46470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46474:	4b68      	ldr	r3, [pc, #416]	; (46618 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
   46476:	4869      	ldr	r0, [pc, #420]	; (4661c <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   46478:	4969      	ldr	r1, [pc, #420]	; (46620 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
   4647a:	2600      	movs	r6, #0
{
   4647c:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   4647e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   46480:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   46482:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   46484:	b135      	cbz	r5, 46494 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   46486:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   4648a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   4648c:	bf1e      	ittt	ne
   4648e:	601c      	strne	r4, [r3, #0]
   46490:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   46492:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   46494:	3304      	adds	r3, #4
   46496:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   46498:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   4649c:	d1f1      	bne.n	46482 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4649e:	f8df 917c 	ldr.w	r9, [pc, #380]	; 4661c <nrfx_gpiote_irq_handler+0x1ac>
   464a2:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   464a6:	2b00      	cmp	r3, #0
   464a8:	f000 8099 	beq.w	465de <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
   464ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   464b0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   464b4:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   464b6:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   464ba:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   464be:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   464c0:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   464c4:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   464c8:	f10d 0a10 	add.w	sl, sp, #16
   464cc:	ea4f 1348 	mov.w	r3, r8, lsl #5
   464d0:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   464d2:	f04f 0b01 	mov.w	fp, #1
   464d6:	e049      	b.n	4656c <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   464d8:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   464da:	4a52      	ldr	r2, [pc, #328]	; (46624 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   464dc:	fa94 f4a4 	rbit	r4, r4
   464e0:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   464e4:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   464e6:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   464e8:	f104 0308 	add.w	r3, r4, #8
   464ec:	9403      	str	r4, [sp, #12]
   464ee:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   464f2:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   464f6:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   464fa:	fa0b f202 	lsl.w	r2, fp, r2
   464fe:	ea23 0302 	bic.w	r3, r3, r2
   46502:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46506:	a803      	add	r0, sp, #12
   46508:	f7ff fd2a 	bl	45f60 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   4650c:	9b03      	ldr	r3, [sp, #12]
   4650e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   46512:	08b9      	lsrs	r1, r7, #2
   46514:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   46518:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   4651c:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   4651e:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   46520:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   46524:	d52c      	bpl.n	46580 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   46526:	4620      	mov	r0, r4
   46528:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   4652a:	b2dd      	uxtb	r5, r3
   4652c:	f7ff fd30 	bl	45f90 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46530:	a803      	add	r0, sp, #12
   46532:	9403      	str	r4, [sp, #12]
   46534:	f7ff fd14 	bl	45f60 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   46538:	9b03      	ldr	r3, [sp, #12]
   4653a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   4653e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   46542:	f3c3 4301 	ubfx	r3, r3, #16, #2
   46546:	429d      	cmp	r5, r3
   46548:	d107      	bne.n	4655a <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   4654a:	2100      	movs	r1, #0
   4654c:	4620      	mov	r0, r4
   4654e:	f009 fe59 	bl	50204 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   46552:	4629      	mov	r1, r5
   46554:	4620      	mov	r0, r4
   46556:	f009 fe55 	bl	50204 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   4655a:	a803      	add	r0, sp, #12
   4655c:	9403      	str	r4, [sp, #12]
   4655e:	f7ff fcff 	bl	45f60 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   46562:	9b03      	ldr	r3, [sp, #12]
   46564:	fa0b f303 	lsl.w	r3, fp, r3
   46568:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   4656c:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   46570:	2c00      	cmp	r4, #0
   46572:	d1b1      	bne.n	464d8 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   46574:	f1b8 0f00 	cmp.w	r8, #0
   46578:	d11d      	bne.n	465b6 <nrfx_gpiote_irq_handler+0x146>
   4657a:	f04f 0801 	mov.w	r8, #1
   4657e:	e7a5      	b.n	464cc <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   46580:	2b02      	cmp	r3, #2
   46582:	d10c      	bne.n	4659e <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   46584:	2103      	movs	r1, #3
   46586:	4620      	mov	r0, r4
   46588:	f009 fe3c 	bl	50204 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   4658c:	f005 0305 	and.w	r3, r5, #5
   46590:	2b01      	cmp	r3, #1
   46592:	d1e2      	bne.n	4655a <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   46594:	4639      	mov	r1, r7
   46596:	4620      	mov	r0, r4
   46598:	f7ff fcfa 	bl	45f90 <call_handler>
   4659c:	e7dd      	b.n	4655a <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   4659e:	2102      	movs	r1, #2
   465a0:	4620      	mov	r0, r4
   465a2:	9301      	str	r3, [sp, #4]
   465a4:	f009 fe2e 	bl	50204 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   465a8:	2d03      	cmp	r5, #3
   465aa:	d0f3      	beq.n	46594 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   465ac:	9b01      	ldr	r3, [sp, #4]
   465ae:	2b03      	cmp	r3, #3
   465b0:	d1d3      	bne.n	4655a <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   465b2:	2d02      	cmp	r5, #2
   465b4:	e7ed      	b.n	46592 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   465b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   465ba:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   465be:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   465c2:	4919      	ldr	r1, [pc, #100]	; (46628 <nrfx_gpiote_irq_handler+0x1b8>)
   465c4:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   465c8:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   465ca:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   465ce:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   465d2:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   465d4:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   465d6:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   465da:	f47f af73 	bne.w	464c4 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   465de:	2401      	movs	r4, #1
    while (mask)
   465e0:	b916      	cbnz	r6, 465e8 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   465e2:	b007      	add	sp, #28
   465e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   465e8:	fa96 f3a6 	rbit	r3, r6
   465ec:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   465f0:	fa04 f203 	lsl.w	r2, r4, r3
   465f4:	009b      	lsls	r3, r3, #2
   465f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   465fa:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   465fe:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   46602:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   46606:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   4660a:	f3c0 2005 	ubfx	r0, r0, #8, #6
   4660e:	f3c1 4101 	ubfx	r1, r1, #16, #2
   46612:	f7ff fcbd 	bl	45f90 <call_handler>
   46616:	e7e3      	b.n	465e0 <nrfx_gpiote_irq_handler+0x170>
   46618:	40006100 	.word	0x40006100
   4661c:	40006000 	.word	0x40006000
   46620:	40006120 	.word	0x40006120
   46624:	20000e30 	.word	0x20000e30
   46628:	50000300 	.word	0x50000300

0004662c <nvmc_word_write>:
   4662c:	4a04      	ldr	r2, [pc, #16]	; (46640 <nvmc_word_write+0x14>)
   4662e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   46632:	07db      	lsls	r3, r3, #31
   46634:	d5fb      	bpl.n	4662e <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   46636:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   46638:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   4663c:	4770      	bx	lr
   4663e:	bf00      	nop
   46640:	4001e000 	.word	0x4001e000

00046644 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   46644:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   46648:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   4664a:	fbb0 f3f2 	udiv	r3, r0, r2
   4664e:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   46652:	b973      	cbnz	r3, 46672 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   46654:	4b08      	ldr	r3, [pc, #32]	; (46678 <nrfx_nvmc_page_erase+0x34>)
   46656:	2202      	movs	r2, #2
   46658:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   4665c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   46660:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   46664:	07d2      	lsls	r2, r2, #31
   46666:	d5fb      	bpl.n	46660 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   46668:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   4666a:	4804      	ldr	r0, [pc, #16]	; (4667c <nrfx_nvmc_page_erase+0x38>)
   4666c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   46670:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   46672:	4803      	ldr	r0, [pc, #12]	; (46680 <nrfx_nvmc_page_erase+0x3c>)
}
   46674:	4770      	bx	lr
   46676:	bf00      	nop
   46678:	4001e000 	.word	0x4001e000
   4667c:	0bad0000 	.word	0x0bad0000
   46680:	0bad000a 	.word	0x0bad000a

00046684 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   46684:	b510      	push	{r4, lr}
   46686:	4c05      	ldr	r4, [pc, #20]	; (4669c <nrfx_nvmc_word_write+0x18>)
   46688:	2301      	movs	r3, #1
   4668a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   4668e:	f7ff ffcd 	bl	4662c <nvmc_word_write>
   46692:	2300      	movs	r3, #0
   46694:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   46698:	bd10      	pop	{r4, pc}
   4669a:	bf00      	nop
   4669c:	4001e000 	.word	0x4001e000

000466a0 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   466a0:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   466a2:	4c17      	ldr	r4, [pc, #92]	; (46700 <nrfx_power_init+0x60>)
   466a4:	7823      	ldrb	r3, [r4, #0]
   466a6:	bb4b      	cbnz	r3, 466fc <nrfx_power_init+0x5c>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   466a8:	7803      	ldrb	r3, [r0, #0]
    if (enable && nrf52_errata_197())
   466aa:	0799      	lsls	r1, r3, #30
   466ac:	f3c3 0240 	ubfx	r2, r3, #1, #1
   466b0:	d512      	bpl.n	466d8 <nrfx_power_init+0x38>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   466b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
            if (var1 == 0x08)
   466b6:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   466ba:	2908      	cmp	r1, #8
   466bc:	d10b      	bne.n	466d6 <nrfx_power_init+0x36>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   466be:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
                switch(var2)
   466c2:	2a05      	cmp	r2, #5
   466c4:	d807      	bhi.n	466d6 <nrfx_power_init+0x36>
   466c6:	490f      	ldr	r1, [pc, #60]	; (46704 <nrfx_power_init+0x64>)
   466c8:	5c8a      	ldrb	r2, [r1, r2]
   466ca:	b122      	cbz	r2, 466d6 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   466cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   466d0:	2101      	movs	r1, #1
   466d2:	f8c2 1638 	str.w	r1, [r2, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   466d6:	2201      	movs	r2, #1
   466d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   466dc:	f003 0301 	and.w	r3, r3, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   466e0:	f8c1 2580 	str.w	r2, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   466e4:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   466e6:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
   466ea:	f7e6 fa81 	bl	2cbf0 <arch_irq_is_enabled>
   466ee:	b908      	cbnz	r0, 466f4 <nrfx_power_init+0x54>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   466f0:	f7e6 fa5c 	bl	2cbac <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   466f4:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   466f6:	4804      	ldr	r0, [pc, #16]	; (46708 <nrfx_power_init+0x68>)
    m_initialized = true;
   466f8:	7023      	strb	r3, [r4, #0]
}
   466fa:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   466fc:	4803      	ldr	r0, [pc, #12]	; (4670c <nrfx_power_init+0x6c>)
   466fe:	e7fc      	b.n	466fa <nrfx_power_init+0x5a>
   46700:	20007422 	.word	0x20007422
   46704:	0005436c 	.word	0x0005436c
   46708:	0bad0000 	.word	0x0bad0000
   4670c:	0bad000c 	.word	0x0bad000c

00046710 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   46710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   46714:	f44f 7260 	mov.w	r2, #896	; 0x380
   46718:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   4671c:	4b01      	ldr	r3, [pc, #4]	; (46724 <nrfx_power_usbevt_uninit+0x14>)
   4671e:	2200      	movs	r2, #0
   46720:	601a      	str	r2, [r3, #0]
}
   46722:	4770      	bx	lr
   46724:	20006e38 	.word	0x20006e38

00046728 <nrfx_power_usbevt_init>:
{
   46728:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   4672a:	f7ff fff1 	bl	46710 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   4672e:	6803      	ldr	r3, [r0, #0]
   46730:	b10b      	cbz	r3, 46736 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   46732:	4a01      	ldr	r2, [pc, #4]	; (46738 <nrfx_power_usbevt_init+0x10>)
   46734:	6013      	str	r3, [r2, #0]
}
   46736:	bd08      	pop	{r3, pc}
   46738:	20006e38 	.word	0x20006e38

0004673c <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
   4673c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   46740:	b510      	push	{r4, lr}
   46742:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   46746:	0762      	lsls	r2, r4, #29
   46748:	d507      	bpl.n	4675a <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   4674a:	f44f 7084 	mov.w	r0, #264	; 0x108
   4674e:	f009 fd76 	bl	5023e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   46752:	b110      	cbz	r0, 4675a <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   46754:	4b1e      	ldr	r3, [pc, #120]	; (467d0 <nrfx_power_irq_handler+0x94>)
   46756:	681b      	ldr	r3, [r3, #0]
   46758:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   4675a:	06a3      	lsls	r3, r4, #26
   4675c:	d508      	bpl.n	46770 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   4675e:	f44f 708a 	mov.w	r0, #276	; 0x114
   46762:	f009 fd6c 	bl	5023e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   46766:	b118      	cbz	r0, 46770 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   46768:	4b1a      	ldr	r3, [pc, #104]	; (467d4 <nrfx_power_irq_handler+0x98>)
   4676a:	2000      	movs	r0, #0
   4676c:	681b      	ldr	r3, [r3, #0]
   4676e:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   46770:	0660      	lsls	r0, r4, #25
   46772:	d508      	bpl.n	46786 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   46774:	f44f 708c 	mov.w	r0, #280	; 0x118
   46778:	f009 fd61 	bl	5023e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   4677c:	b118      	cbz	r0, 46786 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   4677e:	4b15      	ldr	r3, [pc, #84]	; (467d4 <nrfx_power_irq_handler+0x98>)
   46780:	2001      	movs	r0, #1
   46782:	681b      	ldr	r3, [r3, #0]
   46784:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   46786:	0621      	lsls	r1, r4, #24
   46788:	d508      	bpl.n	4679c <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   4678a:	f44f 708e 	mov.w	r0, #284	; 0x11c
   4678e:	f009 fd56 	bl	5023e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   46792:	b118      	cbz	r0, 4679c <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   46794:	4b10      	ldr	r3, [pc, #64]	; (467d8 <nrfx_power_irq_handler+0x9c>)
   46796:	2000      	movs	r0, #0
   46798:	681b      	ldr	r3, [r3, #0]
   4679a:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   4679c:	05e2      	lsls	r2, r4, #23
   4679e:	d508      	bpl.n	467b2 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   467a0:	f44f 7090 	mov.w	r0, #288	; 0x120
   467a4:	f009 fd4b 	bl	5023e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   467a8:	b118      	cbz	r0, 467b2 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   467aa:	4b0b      	ldr	r3, [pc, #44]	; (467d8 <nrfx_power_irq_handler+0x9c>)
   467ac:	2001      	movs	r0, #1
   467ae:	681b      	ldr	r3, [r3, #0]
   467b0:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   467b2:	05a3      	lsls	r3, r4, #22
   467b4:	d50a      	bpl.n	467cc <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   467b6:	f44f 7092 	mov.w	r0, #292	; 0x124
   467ba:	f009 fd40 	bl	5023e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   467be:	b128      	cbz	r0, 467cc <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   467c0:	4b05      	ldr	r3, [pc, #20]	; (467d8 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
   467c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   467c6:	681b      	ldr	r3, [r3, #0]
   467c8:	2002      	movs	r0, #2
   467ca:	4718      	bx	r3
}
   467cc:	bd10      	pop	{r4, pc}
   467ce:	bf00      	nop
   467d0:	20006e40 	.word	0x20006e40
   467d4:	20006e3c 	.word	0x20006e3c
   467d8:	20006e38 	.word	0x20006e38

000467dc <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   467dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   467e0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   467e4:	2a08      	cmp	r2, #8
   467e6:	d106      	bne.n	467f6 <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   467e8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   467ec:	2b05      	cmp	r3, #5
   467ee:	d804      	bhi.n	467fa <nrf52_errata_187+0x1e>
   467f0:	4a03      	ldr	r2, [pc, #12]	; (46800 <nrf52_errata_187+0x24>)
   467f2:	5cd0      	ldrb	r0, [r2, r3]
   467f4:	4770      	bx	lr
                        return false;
   467f6:	2000      	movs	r0, #0
   467f8:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   467fa:	2001      	movs	r0, #1
}
   467fc:	4770      	bx	lr
   467fe:	bf00      	nop
   46800:	00054372 	.word	0x00054372

00046804 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   46804:	4b05      	ldr	r3, [pc, #20]	; (4681c <ep_state_access+0x18>)
   46806:	f010 0f80 	tst.w	r0, #128	; 0x80
   4680a:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   4680e:	bf08      	it	eq
   46810:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   46812:	f000 000f 	and.w	r0, r0, #15
}
   46816:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   4681a:	4770      	bx	lr
   4681c:	20006fec 	.word	0x20006fec

00046820 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   46820:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   46822:	4a07      	ldr	r2, [pc, #28]	; (46840 <ev_usbreset_handler+0x20>)
   46824:	2300      	movs	r3, #0
   46826:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   46828:	4a06      	ldr	r2, [pc, #24]	; (46844 <ev_usbreset_handler+0x24>)
   4682a:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
   4682c:	2301      	movs	r3, #1
   4682e:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   46830:	4b05      	ldr	r3, [pc, #20]	; (46848 <ev_usbreset_handler+0x28>)
   46832:	a801      	add	r0, sp, #4
   46834:	681b      	ldr	r3, [r3, #0]
   46836:	4798      	blx	r3
}
   46838:	b003      	add	sp, #12
   4683a:	f85d fb04 	ldr.w	pc, [sp], #4
   4683e:	bf00      	nop
   46840:	20007425 	.word	0x20007425
   46844:	20007424 	.word	0x20007424
   46848:	20007084 	.word	0x20007084

0004684c <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
   4684c:	4b19      	ldr	r3, [pc, #100]	; (468b4 <ev_usbevent_handler+0x68>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   4684e:	b513      	push	{r0, r1, r4, lr}
   46850:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   46854:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   46858:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   4685a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   4685e:	d508      	bpl.n	46872 <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   46860:	4b15      	ldr	r3, [pc, #84]	; (468b8 <ev_usbevent_handler+0x6c>)
   46862:	2201      	movs	r2, #1
   46864:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   46866:	2302      	movs	r3, #2
   46868:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   4686a:	4b14      	ldr	r3, [pc, #80]	; (468bc <ev_usbevent_handler+0x70>)
   4686c:	a801      	add	r0, sp, #4
   4686e:	681b      	ldr	r3, [r3, #0]
   46870:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   46872:	05a2      	lsls	r2, r4, #22
   46874:	d508      	bpl.n	46888 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   46876:	4b10      	ldr	r3, [pc, #64]	; (468b8 <ev_usbevent_handler+0x6c>)
   46878:	2200      	movs	r2, #0
   4687a:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   4687c:	2303      	movs	r3, #3
   4687e:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   46880:	4b0e      	ldr	r3, [pc, #56]	; (468bc <ev_usbevent_handler+0x70>)
   46882:	a801      	add	r0, sp, #4
   46884:	681b      	ldr	r3, [r3, #0]
   46886:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   46888:	0563      	lsls	r3, r4, #21
   4688a:	d510      	bpl.n	468ae <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   4688c:	4b0a      	ldr	r3, [pc, #40]	; (468b8 <ev_usbevent_handler+0x6c>)
   4688e:	781a      	ldrb	r2, [r3, #0]
   46890:	b16a      	cbz	r2, 468ae <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   46892:	2200      	movs	r2, #0
   46894:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   46896:	4b07      	ldr	r3, [pc, #28]	; (468b4 <ev_usbevent_handler+0x68>)
   46898:	2201      	movs	r2, #1
   4689a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   4689e:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   468a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   468a2:	2304      	movs	r3, #4
   468a4:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   468a6:	4b05      	ldr	r3, [pc, #20]	; (468bc <ev_usbevent_handler+0x70>)
   468a8:	a801      	add	r0, sp, #4
   468aa:	681b      	ldr	r3, [r3, #0]
   468ac:	4798      	blx	r3
        }
    }
}
   468ae:	b002      	add	sp, #8
   468b0:	bd10      	pop	{r4, pc}
   468b2:	bf00      	nop
   468b4:	40027000 	.word	0x40027000
   468b8:	20007425 	.word	0x20007425
   468bc:	20007084 	.word	0x20007084

000468c0 <usbd_errata_187_211_begin>:
	__asm__ volatile(
   468c0:	f04f 0320 	mov.w	r3, #32
   468c4:	f3ef 8011 	mrs	r0, BASEPRI
   468c8:	f383 8812 	msr	BASEPRI_MAX, r3
   468cc:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   468d0:	4b0a      	ldr	r3, [pc, #40]	; (468fc <usbd_errata_187_211_begin+0x3c>)
   468d2:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   468d6:	2203      	movs	r2, #3
   468d8:	b961      	cbnz	r1, 468f4 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   468da:	f249 3175 	movw	r1, #37749	; 0x9375
   468de:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   468e2:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   468e6:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   468ea:	f380 8811 	msr	BASEPRI, r0
   468ee:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   468f2:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   468f4:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   468f8:	e7f7      	b.n	468ea <usbd_errata_187_211_begin+0x2a>
   468fa:	bf00      	nop
   468fc:	4006e000 	.word	0x4006e000

00046900 <usbd_errata_187_211_end>:
	__asm__ volatile(
   46900:	f04f 0320 	mov.w	r3, #32
   46904:	f3ef 8011 	mrs	r0, BASEPRI
   46908:	f383 8812 	msr	BASEPRI_MAX, r3
   4690c:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   46910:	4b0a      	ldr	r3, [pc, #40]	; (4693c <usbd_errata_187_211_end+0x3c>)
   46912:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   46916:	b961      	cbnz	r1, 46932 <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   46918:	f249 3275 	movw	r2, #37749	; 0x9375
   4691c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   46920:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   46924:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   46928:	f380 8811 	msr	BASEPRI, r0
   4692c:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   46930:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   46932:	2200      	movs	r2, #0
   46934:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   46938:	e7f6      	b.n	46928 <usbd_errata_187_211_end+0x28>
   4693a:	bf00      	nop
   4693c:	4006e000 	.word	0x4006e000

00046940 <nrfx_usbd_feeder_flash>:
{
   46940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   46942:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   46944:	4f0b      	ldr	r7, [pc, #44]	; (46974 <nrfx_usbd_feeder_flash+0x34>)
{
   46946:	460c      	mov	r4, r1
   46948:	429a      	cmp	r2, r3
   4694a:	bf28      	it	cs
   4694c:	461a      	movcs	r2, r3
   4694e:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   46950:	6809      	ldr	r1, [r1, #0]
   46952:	4638      	mov	r0, r7
   46954:	4615      	mov	r5, r2
   46956:	f005 f97f 	bl	4bc58 <memcpy>
    p_transfer->size -= tx_size;
   4695a:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   4695c:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
   4695e:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
   46960:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
   46964:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
   46966:	6060      	str	r0, [r4, #4]
}
   46968:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   4696a:	6023      	str	r3, [r4, #0]
}
   4696c:	bf18      	it	ne
   4696e:	2001      	movne	r0, #1
   46970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   46972:	bf00      	nop
   46974:	20006e44 	.word	0x20006e44

00046978 <nrfx_usbd_feeder_flash_zlp>:
    if (tx_size > ep_size)
   46978:	684b      	ldr	r3, [r1, #4]
   4697a:	429a      	cmp	r2, r3
   4697c:	bf28      	it	cs
   4697e:	461a      	movcs	r2, r3
{
   46980:	b570      	push	{r4, r5, r6, lr}
   46982:	4606      	mov	r6, r0
   46984:	460d      	mov	r5, r1
   46986:	4614      	mov	r4, r2
    if (tx_size != 0)
   46988:	b182      	cbz	r2, 469ac <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   4698a:	6809      	ldr	r1, [r1, #0]
   4698c:	4808      	ldr	r0, [pc, #32]	; (469b0 <nrfx_usbd_feeder_flash_zlp+0x38>)
   4698e:	f005 f963 	bl	4bc58 <memcpy>
        p_next->p_data.tx = p_buffer;
   46992:	4b07      	ldr	r3, [pc, #28]	; (469b0 <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
   46994:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
   46998:	686b      	ldr	r3, [r5, #4]
   4699a:	1b1b      	subs	r3, r3, r4
   4699c:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   4699e:	682b      	ldr	r3, [r5, #0]
}
   469a0:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   469a2:	4423      	add	r3, r4
   469a4:	602b      	str	r3, [r5, #0]
}
   469a6:	bf18      	it	ne
   469a8:	2001      	movne	r0, #1
   469aa:	bd70      	pop	{r4, r5, r6, pc}
   469ac:	4613      	mov	r3, r2
   469ae:	e7f1      	b.n	46994 <nrfx_usbd_feeder_flash_zlp+0x1c>
   469b0:	20006e44 	.word	0x20006e44

000469b4 <ev_sof_handler>:
{
   469b4:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   469b6:	2300      	movs	r3, #0
   469b8:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   469bc:	4b0b      	ldr	r3, [pc, #44]	; (469ec <ev_sof_handler+0x38>)
   469be:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   469c2:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   469c6:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   469ca:	4a09      	ldr	r2, [pc, #36]	; (469f0 <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
   469cc:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
   469ce:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
   469d0:	bf14      	ite	ne
   469d2:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
   469d6:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
   469da:	430b      	orrs	r3, r1
   469dc:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   469de:	4b05      	ldr	r3, [pc, #20]	; (469f4 <ev_sof_handler+0x40>)
   469e0:	a801      	add	r0, sp, #4
   469e2:	681b      	ldr	r3, [r3, #0]
   469e4:	4798      	blx	r3
}
   469e6:	b003      	add	sp, #12
   469e8:	f85d fb04 	ldr.w	pc, [sp], #4
   469ec:	40027000 	.word	0x40027000
   469f0:	20007080 	.word	0x20007080
   469f4:	20007084 	.word	0x20007084

000469f8 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   469f8:	4b06      	ldr	r3, [pc, #24]	; (46a14 <atomic_and.constprop.0.isra.0+0x1c>)
   469fa:	f3bf 8f5b 	dmb	ish
   469fe:	e853 1f00 	ldrex	r1, [r3]
   46a02:	4001      	ands	r1, r0
   46a04:	e843 1200 	strex	r2, r1, [r3]
   46a08:	2a00      	cmp	r2, #0
   46a0a:	d1f8      	bne.n	469fe <atomic_and.constprop.0.isra.0+0x6>
   46a0c:	f3bf 8f5b 	dmb	ish
}
   46a10:	4770      	bx	lr
   46a12:	bf00      	nop
   46a14:	2000707c 	.word	0x2000707c

00046a18 <usbd_dma_pending_clear>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   46a18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   46a1c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   46a20:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   46a22:	bf02      	ittt	eq
   46a24:	4b03      	ldreq	r3, [pc, #12]	; (46a34 <usbd_dma_pending_clear+0x1c>)
   46a26:	2200      	moveq	r2, #0
   46a28:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
   46a2c:	4b02      	ldr	r3, [pc, #8]	; (46a38 <usbd_dma_pending_clear+0x20>)
   46a2e:	2200      	movs	r2, #0
   46a30:	701a      	strb	r2, [r3, #0]
}
   46a32:	4770      	bx	lr
   46a34:	40027000 	.word	0x40027000
   46a38:	20007423 	.word	0x20007423

00046a3c <nrf_usbd_ep0in_dma_handler>:
{
   46a3c:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   46a3e:	f7ff ffeb 	bl	46a18 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   46a42:	4b08      	ldr	r3, [pc, #32]	; (46a64 <nrf_usbd_ep0in_dma_handler+0x28>)
   46a44:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   46a48:	2a03      	cmp	r2, #3
   46a4a:	d105      	bne.n	46a58 <nrf_usbd_ep0in_dma_handler+0x1c>
}
   46a4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   46a50:	f06f 0001 	mvn.w	r0, #1
   46a54:	f7ff bfd0 	b.w	469f8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   46a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   46a5c:	2b00      	cmp	r3, #0
   46a5e:	d0f5      	beq.n	46a4c <nrf_usbd_ep0in_dma_handler+0x10>
}
   46a60:	bd08      	pop	{r3, pc}
   46a62:	bf00      	nop
   46a64:	20006f5c 	.word	0x20006f5c

00046a68 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
   46a68:	2201      	movs	r2, #1
{
   46a6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
   46a6c:	fa02 f501 	lsl.w	r5, r2, r1
   46a70:	491c      	ldr	r1, [pc, #112]	; (46ae4 <usbd_ep_data_handler+0x7c>)
   46a72:	4e1d      	ldr	r6, [pc, #116]	; (46ae8 <usbd_ep_data_handler+0x80>)
   46a74:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   46a76:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
   46a7a:	ea43 0305 	orr.w	r3, r3, r5
{
   46a7e:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   46a80:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   46a82:	d024      	beq.n	46ace <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   46a84:	f000 020f 	and.w	r2, r0, #15
   46a88:	4b18      	ldr	r3, [pc, #96]	; (46aec <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   46a8a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   46a8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   46a92:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   46a96:	681a      	ldr	r2, [r3, #0]
    if (ret)
   46a98:	b132      	cbz	r2, 46aa8 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   46a9a:	2200      	movs	r2, #0
   46a9c:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   46a9e:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   46aa0:	681b      	ldr	r3, [r3, #0]
   46aa2:	d011      	beq.n	46ac8 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
   46aa4:	f009 fc32 	bl	5030c <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   46aa8:	6833      	ldr	r3, [r6, #0]
   46aaa:	402b      	ands	r3, r5
   46aac:	d10a      	bne.n	46ac4 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   46aae:	2206      	movs	r2, #6
   46ab0:	f88d 2004 	strb.w	r2, [sp, #4]
   46ab4:	f88d 4006 	strb.w	r4, [sp, #6]
   46ab8:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   46abc:	4b0c      	ldr	r3, [pc, #48]	; (46af0 <usbd_ep_data_handler+0x88>)
   46abe:	a801      	add	r0, sp, #4
   46ac0:	681b      	ldr	r3, [r3, #0]
   46ac2:	4798      	blx	r3
}
   46ac4:	b002      	add	sp, #8
   46ac6:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   46ac8:	f7ff ffb8 	bl	46a3c <nrf_usbd_ep0in_dma_handler>
   46acc:	e7ec      	b.n	46aa8 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   46ace:	6833      	ldr	r3, [r6, #0]
   46ad0:	421d      	tst	r5, r3
   46ad2:	d1f7      	bne.n	46ac4 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   46ad4:	2306      	movs	r3, #6
   46ad6:	f88d 3004 	strb.w	r3, [sp, #4]
   46ada:	f88d 0006 	strb.w	r0, [sp, #6]
   46ade:	f88d 2007 	strb.w	r2, [sp, #7]
   46ae2:	e7eb      	b.n	46abc <usbd_ep_data_handler+0x54>
   46ae4:	20007080 	.word	0x20007080
   46ae8:	2000707c 	.word	0x2000707c
   46aec:	00053b66 	.word	0x00053b66
   46af0:	20007084 	.word	0x20007084

00046af4 <ev_setup_data_handler>:
{
   46af4:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   46af6:	4b05      	ldr	r3, [pc, #20]	; (46b0c <ev_setup_data_handler+0x18>)
   46af8:	781a      	ldrb	r2, [r3, #0]
   46afa:	4610      	mov	r0, r2
   46afc:	f009 fbfd 	bl	502fa <ep2bit>
}
   46b00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   46b04:	4601      	mov	r1, r0
   46b06:	4610      	mov	r0, r2
   46b08:	f7ff bfae 	b.w	46a68 <usbd_ep_data_handler>
   46b0c:	20007424 	.word	0x20007424

00046b10 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   46b10:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   46b12:	f7ff ff81 	bl	46a18 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   46b16:	4b0c      	ldr	r3, [pc, #48]	; (46b48 <ev_dma_epout8_handler+0x38>)
   46b18:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   46b1c:	2a03      	cmp	r2, #3
   46b1e:	d010      	beq.n	46b42 <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   46b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   46b24:	b96b      	cbnz	r3, 46b42 <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   46b26:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   46b2a:	f7ff ff65 	bl	469f8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   46b2e:	2306      	movs	r3, #6
   46b30:	f88d 3004 	strb.w	r3, [sp, #4]
   46b34:	2308      	movs	r3, #8
   46b36:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   46b3a:	4b04      	ldr	r3, [pc, #16]	; (46b4c <ev_dma_epout8_handler+0x3c>)
   46b3c:	a801      	add	r0, sp, #4
   46b3e:	681b      	ldr	r3, [r3, #0]
   46b40:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   46b42:	b003      	add	sp, #12
   46b44:	f85d fb04 	ldr.w	pc, [sp], #4
   46b48:	20006f5c 	.word	0x20006f5c
   46b4c:	20007084 	.word	0x20007084

00046b50 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   46b50:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   46b52:	f7ff ff61 	bl	46a18 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   46b56:	4b10      	ldr	r3, [pc, #64]	; (46b98 <ev_dma_epin8_handler+0x48>)
   46b58:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   46b5c:	2a03      	cmp	r2, #3
   46b5e:	d106      	bne.n	46b6e <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   46b60:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   46b64:	b003      	add	sp, #12
   46b66:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   46b6a:	f7ff bf45 	b.w	469f8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   46b6e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   46b72:	b96b      	cbnz	r3, 46b90 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   46b74:	f46f 7080 	mvn.w	r0, #256	; 0x100
   46b78:	f7ff ff3e 	bl	469f8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   46b7c:	2306      	movs	r3, #6
   46b7e:	f88d 3004 	strb.w	r3, [sp, #4]
   46b82:	2388      	movs	r3, #136	; 0x88
   46b84:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   46b88:	4b04      	ldr	r3, [pc, #16]	; (46b9c <ev_dma_epin8_handler+0x4c>)
   46b8a:	a801      	add	r0, sp, #4
   46b8c:	681b      	ldr	r3, [r3, #0]
   46b8e:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   46b90:	b003      	add	sp, #12
   46b92:	f85d fb04 	ldr.w	pc, [sp], #4
   46b96:	bf00      	nop
   46b98:	20006f5c 	.word	0x20006f5c
   46b9c:	20007084 	.word	0x20007084

00046ba0 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   46ba0:	4a02      	ldr	r2, [pc, #8]	; (46bac <nrfx_usbd_uninit+0xc>)
   46ba2:	2300      	movs	r3, #0
   46ba4:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   46ba6:	4a02      	ldr	r2, [pc, #8]	; (46bb0 <nrfx_usbd_uninit+0x10>)
   46ba8:	7013      	strb	r3, [r2, #0]
    return;
}
   46baa:	4770      	bx	lr
   46bac:	20007084 	.word	0x20007084
   46bb0:	20007426 	.word	0x20007426

00046bb4 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   46bb4:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
   46bb6:	4b4c      	ldr	r3, [pc, #304]	; (46ce8 <nrfx_usbd_enable+0x134>)
   46bb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   46bbc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   46bc0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   46bc4:	f7ff fe0a 	bl	467dc <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   46bc8:	b108      	cbz	r0, 46bce <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   46bca:	f7ff fe79 	bl	468c0 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   46bce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   46bd2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   46bd6:	2b08      	cmp	r3, #8
   46bd8:	d119      	bne.n	46c0e <nrfx_usbd_enable+0x5a>
	__asm__ volatile(
   46bda:	f04f 0320 	mov.w	r3, #32
   46bde:	f3ef 8011 	mrs	r0, BASEPRI
   46be2:	f383 8812 	msr	BASEPRI_MAX, r3
   46be6:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   46bea:	4b40      	ldr	r3, [pc, #256]	; (46cec <nrfx_usbd_enable+0x138>)
   46bec:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   46bf0:	22c0      	movs	r2, #192	; 0xc0
   46bf2:	2900      	cmp	r1, #0
   46bf4:	d170      	bne.n	46cd8 <nrfx_usbd_enable+0x124>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   46bf6:	f249 3175 	movw	r1, #37749	; 0x9375
   46bfa:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   46bfe:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   46c02:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   46c06:	f380 8811 	msr	BASEPRI, r0
   46c0a:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   46c0e:	4b36      	ldr	r3, [pc, #216]	; (46ce8 <nrfx_usbd_enable+0x134>)
   46c10:	2201      	movs	r2, #1
   46c12:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   46c16:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   46c1a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   46c1e:	0512      	lsls	r2, r2, #20
   46c20:	d5fb      	bpl.n	46c1a <nrfx_usbd_enable+0x66>
    p_reg->EVENTCAUSE = flags;
   46c22:	f44f 6200 	mov.w	r2, #2048	; 0x800
   46c26:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   46c2a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   46c2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   46c32:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   46c36:	2b08      	cmp	r3, #8
   46c38:	d118      	bne.n	46c6c <nrfx_usbd_enable+0xb8>
	__asm__ volatile(
   46c3a:	f04f 0320 	mov.w	r3, #32
   46c3e:	f3ef 8011 	mrs	r0, BASEPRI
   46c42:	f383 8812 	msr	BASEPRI_MAX, r3
   46c46:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   46c4a:	4b28      	ldr	r3, [pc, #160]	; (46cec <nrfx_usbd_enable+0x138>)
   46c4c:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   46c50:	2900      	cmp	r1, #0
   46c52:	d144      	bne.n	46cde <nrfx_usbd_enable+0x12a>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   46c54:	f249 3275 	movw	r2, #37749	; 0x9375
   46c58:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   46c5c:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   46c60:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   46c64:	f380 8811 	msr	BASEPRI, r0
   46c68:	f3bf 8f6f 	isb	sy
   46c6c:	f7ff fdb6 	bl	467dc <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   46c70:	b130      	cbz	r0, 46c80 <nrfx_usbd_enable+0xcc>
        usbd_errata_187_211_end();
   46c72:	f7ff fe45 	bl	46900 <usbd_errata_187_211_end>
   46c76:	f7ff fdb1 	bl	467dc <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   46c7a:	b108      	cbz	r0, 46c80 <nrfx_usbd_enable+0xcc>
#endif
    {
        usbd_errata_187_211_begin();
   46c7c:	f7ff fe20 	bl	468c0 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   46c80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   46c84:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   46c88:	2b08      	cmp	r3, #8
   46c8a:	4b17      	ldr	r3, [pc, #92]	; (46ce8 <nrfx_usbd_enable+0x134>)
   46c8c:	d10a      	bne.n	46ca4 <nrfx_usbd_enable+0xf0>
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   46c8e:	f240 72e3 	movw	r2, #2019	; 0x7e3
   46c92:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   46c96:	2240      	movs	r2, #64	; 0x40
   46c98:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   46c9c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   46ca0:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   46ca4:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   46ca6:	2280      	movs	r2, #128	; 0x80
   46ca8:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   46cac:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   46cb0:	4b0f      	ldr	r3, [pc, #60]	; (46cf0 <nrfx_usbd_enable+0x13c>)
   46cb2:	f240 12ff 	movw	r2, #511	; 0x1ff
   46cb6:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   46cb8:	4b0e      	ldr	r3, [pc, #56]	; (46cf4 <nrfx_usbd_enable+0x140>)
   46cba:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   46cbc:	f7ff feac 	bl	46a18 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   46cc0:	4b0d      	ldr	r3, [pc, #52]	; (46cf8 <nrfx_usbd_enable+0x144>)
   46cc2:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   46cc4:	4b0d      	ldr	r3, [pc, #52]	; (46cfc <nrfx_usbd_enable+0x148>)
   46cc6:	2202      	movs	r2, #2
   46cc8:	701a      	strb	r2, [r3, #0]
   46cca:	f7ff fd87 	bl	467dc <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   46cce:	b150      	cbz	r0, 46ce6 <nrfx_usbd_enable+0x132>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   46cd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
   46cd4:	f7ff be14 	b.w	46900 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   46cd8:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   46cdc:	e793      	b.n	46c06 <nrfx_usbd_enable+0x52>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   46cde:	2200      	movs	r2, #0
   46ce0:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   46ce4:	e7be      	b.n	46c64 <nrfx_usbd_enable+0xb0>
}
   46ce6:	bd08      	pop	{r3, pc}
   46ce8:	40027000 	.word	0x40027000
   46cec:	4006e000 	.word	0x4006e000
   46cf0:	20007080 	.word	0x20007080
   46cf4:	2000707c 	.word	0x2000707c
   46cf8:	20007424 	.word	0x20007424
   46cfc:	20007426 	.word	0x20007426

00046d00 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   46d00:	4b0a      	ldr	r3, [pc, #40]	; (46d2c <nrfx_usbd_start+0x2c>)
   46d02:	2200      	movs	r2, #0
{
   46d04:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   46d06:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
   46d08:	4a09      	ldr	r2, [pc, #36]	; (46d30 <nrfx_usbd_start+0x30>)
   46d0a:	4b0a      	ldr	r3, [pc, #40]	; (46d34 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   46d0c:	4c0a      	ldr	r4, [pc, #40]	; (46d38 <nrfx_usbd_start+0x38>)
   46d0e:	2800      	cmp	r0, #0
   46d10:	bf08      	it	eq
   46d12:	4613      	moveq	r3, r2
   46d14:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   46d18:	2027      	movs	r0, #39	; 0x27
   46d1a:	f7e5 ff47 	bl	2cbac <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   46d1e:	2301      	movs	r3, #1
   46d20:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   46d24:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   46d28:	bd10      	pop	{r4, pc}
   46d2a:	bf00      	nop
   46d2c:	20007425 	.word	0x20007425
   46d30:	01c01407 	.word	0x01c01407
   46d34:	01e01407 	.word	0x01e01407
   46d38:	40027000 	.word	0x40027000

00046d3c <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   46d3c:	4b03      	ldr	r3, [pc, #12]	; (46d4c <nrfx_usbd_is_enabled+0x10>)
   46d3e:	7818      	ldrb	r0, [r3, #0]
}
   46d40:	2801      	cmp	r0, #1
   46d42:	bf94      	ite	ls
   46d44:	2000      	movls	r0, #0
   46d46:	2001      	movhi	r0, #1
   46d48:	4770      	bx	lr
   46d4a:	bf00      	nop
   46d4c:	20007426 	.word	0x20007426

00046d50 <nrfx_usbd_wakeup_req>:

    return suspended;
}

bool nrfx_usbd_wakeup_req(void)
{
   46d50:	b510      	push	{r4, lr}
	__asm__ volatile(
   46d52:	f04f 0320 	mov.w	r3, #32
   46d56:	f3ef 8411 	mrs	r4, BASEPRI
   46d5a:	f383 8812 	msr	BASEPRI_MAX, r3
   46d5e:	f3bf 8f6f 	isb	sy
    bool started = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend && nrf_usbd_lowpower_check(NRF_USBD))
   46d62:	4b15      	ldr	r3, [pc, #84]	; (46db8 <nrfx_usbd_wakeup_req+0x68>)
   46d64:	781b      	ldrb	r3, [r3, #0]
   46d66:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   46d6a:	b1db      	cbz	r3, 46da4 <nrfx_usbd_wakeup_req+0x54>
    return (p_reg->LOWPOWER != (USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos));
   46d6c:	4b13      	ldr	r3, [pc, #76]	; (46dbc <nrfx_usbd_wakeup_req+0x6c>)
   46d6e:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
   46d72:	b1fa      	cbz	r2, 46db4 <nrfx_usbd_wakeup_req+0x64>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   46d74:	2200      	movs	r2, #0
   46d76:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   46d7a:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   46d7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   46d82:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   46d86:	2b08      	cmp	r3, #8
   46d88:	d10c      	bne.n	46da4 <nrfx_usbd_wakeup_req+0x54>
        nrf_usbd_lowpower_disable(NRF_USBD);
        started = true;

        if (nrfx_usbd_errata_171())
        {
            if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   46d8a:	4b0d      	ldr	r3, [pc, #52]	; (46dc0 <nrfx_usbd_wakeup_req+0x70>)
   46d8c:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   46d90:	22c0      	movs	r2, #192	; 0xc0
   46d92:	b961      	cbnz	r1, 46dae <nrfx_usbd_wakeup_req+0x5e>
            {
                *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   46d94:	f249 3175 	movw	r1, #37749	; 0x9375
   46d98:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
                *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   46d9c:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
                *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   46da0:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   46da4:	f384 8811 	msr	BASEPRI, r4
   46da8:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return started;
}
   46dac:	bd10      	pop	{r4, pc}
                *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   46dae:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   46db2:	e7f7      	b.n	46da4 <nrfx_usbd_wakeup_req+0x54>
    bool started = false;
   46db4:	4610      	mov	r0, r2
   46db6:	e7f5      	b.n	46da4 <nrfx_usbd_wakeup_req+0x54>
   46db8:	20007425 	.word	0x20007425
   46dbc:	40027000 	.word	0x40027000
   46dc0:	4006e000 	.word	0x4006e000

00046dc4 <nrfx_usbd_init>:
{
   46dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   46dc6:	4b1c      	ldr	r3, [pc, #112]	; (46e38 <nrfx_usbd_init+0x74>)
   46dc8:	781c      	ldrb	r4, [r3, #0]
   46dca:	bb94      	cbnz	r4, 46e32 <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
   46dcc:	4a1b      	ldr	r2, [pc, #108]	; (46e3c <nrfx_usbd_init+0x78>)
   46dce:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   46dd0:	2201      	movs	r2, #1
   46dd2:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   46dd4:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   46dd8:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   46dda:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   46dde:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   46de2:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   46de4:	bf14      	ite	ne
   46de6:	4639      	movne	r1, r7
   46de8:	2140      	moveq	r1, #64	; 0x40
   46dea:	4628      	mov	r0, r5
   46dec:	f009 fabd 	bl	5036a <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   46df0:	4628      	mov	r0, r5
   46df2:	f7ff fd07 	bl	46804 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   46df6:	3401      	adds	r4, #1
   46df8:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   46dfa:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
   46dfc:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
   46dfe:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   46e00:	d1eb      	bne.n	46dda <nrfx_usbd_init+0x16>
   46e02:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   46e04:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   46e08:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   46e0a:	f014 0f08 	tst.w	r4, #8
   46e0e:	b2e6      	uxtb	r6, r4
   46e10:	bf14      	ite	ne
   46e12:	4639      	movne	r1, r7
   46e14:	2140      	moveq	r1, #64	; 0x40
   46e16:	4630      	mov	r0, r6
   46e18:	f009 faa7 	bl	5036a <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   46e1c:	4630      	mov	r0, r6
   46e1e:	f7ff fcf1 	bl	46804 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   46e22:	3401      	adds	r4, #1
   46e24:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   46e26:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   46e28:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   46e2a:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   46e2c:	d1ed      	bne.n	46e0a <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
   46e2e:	4804      	ldr	r0, [pc, #16]	; (46e40 <nrfx_usbd_init+0x7c>)
}
   46e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
   46e32:	4804      	ldr	r0, [pc, #16]	; (46e44 <nrfx_usbd_init+0x80>)
   46e34:	e7fc      	b.n	46e30 <nrfx_usbd_init+0x6c>
   46e36:	bf00      	nop
   46e38:	20007426 	.word	0x20007426
   46e3c:	20007084 	.word	0x20007084
   46e40:	0bad0000 	.word	0x0bad0000
   46e44:	0bad0005 	.word	0x0bad0005

00046e48 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   46e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   46e4c:	4604      	mov	r4, r0
	__asm__ volatile(
   46e4e:	f04f 0320 	mov.w	r3, #32
   46e52:	f3ef 8811 	mrs	r8, BASEPRI
   46e56:	f383 8812 	msr	BASEPRI_MAX, r3
   46e5a:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   46e5e:	f010 0a0f 	ands.w	sl, r0, #15
   46e62:	d103      	bne.n	46e6c <nrfx_usbd_ep_transfer+0x24>
   46e64:	4b27      	ldr	r3, [pc, #156]	; (46f04 <nrfx_usbd_ep_transfer+0xbc>)
   46e66:	781b      	ldrb	r3, [r3, #0]
   46e68:	4283      	cmp	r3, r0
   46e6a:	d146      	bne.n	46efa <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   46e6c:	4b26      	ldr	r3, [pc, #152]	; (46f08 <nrfx_usbd_ep_transfer+0xc0>)
   46e6e:	4e27      	ldr	r6, [pc, #156]	; (46f0c <nrfx_usbd_ep_transfer+0xc4>)
   46e70:	681a      	ldr	r2, [r3, #0]
   46e72:	6837      	ldr	r7, [r6, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
   46e74:	4620      	mov	r0, r4
   46e76:	f009 fa40 	bl	502fa <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   46e7a:	43d2      	mvns	r2, r2
   46e7c:	b292      	uxth	r2, r2
   46e7e:	f04f 0901 	mov.w	r9, #1
   46e82:	433a      	orrs	r2, r7
   46e84:	fa09 f900 	lsl.w	r9, r9, r0
   46e88:	ea12 0f09 	tst.w	r2, r9
   46e8c:	d137      	bne.n	46efe <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   46e8e:	4620      	mov	r0, r4
   46e90:	f7ff fcb8 	bl	46804 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   46e94:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
   46e96:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   46e98:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   46e9a:	fb03 f30a 	mul.w	r3, r3, sl
        if (NRF_USBD_EPIN_CHECK(ep))
   46e9e:	d528      	bpl.n	46ef2 <nrfx_usbd_ep_transfer+0xaa>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   46ea0:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   46ea2:	6888      	ldr	r0, [r1, #8]
   46ea4:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   46ea8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   46eac:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   46eb0:	d11c      	bne.n	46eec <nrfx_usbd_ep_transfer+0xa4>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   46eb2:	4a17      	ldr	r2, [pc, #92]	; (46f10 <nrfx_usbd_ep_transfer+0xc8>)
   46eb4:	4c17      	ldr	r4, [pc, #92]	; (46f14 <nrfx_usbd_ep_transfer+0xcc>)
   46eb6:	2800      	cmp	r0, #0
   46eb8:	bf08      	it	eq
   46eba:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   46ebc:	4816      	ldr	r0, [pc, #88]	; (46f18 <nrfx_usbd_ep_transfer+0xd0>)
   46ebe:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   46ec0:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
   46ec2:	c907      	ldmia	r1, {r0, r1, r2}
   46ec4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
   46ec8:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
   46eca:	2300      	movs	r3, #0
   46ecc:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   46ece:	73ab      	strb	r3, [r5, #14]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   46ed0:	4b12      	ldr	r3, [pc, #72]	; (46f1c <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
   46ed2:	4813      	ldr	r0, [pc, #76]	; (46f20 <nrfx_usbd_ep_transfer+0xd8>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   46ed4:	ea49 0707 	orr.w	r7, r9, r7
   46ed8:	2280      	movs	r2, #128	; 0x80
   46eda:	6037      	str	r7, [r6, #0]
   46edc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   46ee0:	f388 8811 	msr	BASEPRI, r8
   46ee4:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   46ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   46eec:	4a0d      	ldr	r2, [pc, #52]	; (46f24 <nrfx_usbd_ep_transfer+0xdc>)
   46eee:	4c0e      	ldr	r4, [pc, #56]	; (46f28 <nrfx_usbd_ep_transfer+0xe0>)
   46ef0:	e7e1      	b.n	46eb6 <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   46ef2:	4a0e      	ldr	r2, [pc, #56]	; (46f2c <nrfx_usbd_ep_transfer+0xe4>)
   46ef4:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   46ef6:	4a0e      	ldr	r2, [pc, #56]	; (46f30 <nrfx_usbd_ep_transfer+0xe8>)
   46ef8:	e7e2      	b.n	46ec0 <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
   46efa:	480e      	ldr	r0, [pc, #56]	; (46f34 <nrfx_usbd_ep_transfer+0xec>)
   46efc:	e7f0      	b.n	46ee0 <nrfx_usbd_ep_transfer+0x98>
        ret = NRFX_ERROR_BUSY;
   46efe:	480e      	ldr	r0, [pc, #56]	; (46f38 <nrfx_usbd_ep_transfer+0xf0>)
   46f00:	e7ee      	b.n	46ee0 <nrfx_usbd_ep_transfer+0x98>
   46f02:	bf00      	nop
   46f04:	20007424 	.word	0x20007424
   46f08:	20007080 	.word	0x20007080
   46f0c:	2000707c 	.word	0x2000707c
   46f10:	000502d1 	.word	0x000502d1
   46f14:	000502af 	.word	0x000502af
   46f18:	20006ef0 	.word	0x20006ef0
   46f1c:	e000e100 	.word	0xe000e100
   46f20:	0bad0000 	.word	0x0bad0000
   46f24:	00046979 	.word	0x00046979
   46f28:	00046941 	.word	0x00046941
   46f2c:	20006e84 	.word	0x20006e84
   46f30:	00050281 	.word	0x00050281
   46f34:	0bad000a 	.word	0x0bad000a
   46f38:	0bad000b 	.word	0x0bad000b

00046f3c <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   46f3c:	f010 0f08 	tst.w	r0, #8
   46f40:	4b07      	ldr	r3, [pc, #28]	; (46f60 <nrfx_usbd_epout_size_get+0x24>)
   46f42:	d006      	beq.n	46f52 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   46f44:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
   46f48:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   46f4c:	bf18      	it	ne
   46f4e:	2000      	movne	r0, #0
   46f50:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   46f52:	f000 000f 	and.w	r0, r0, #15
   46f56:	f500 7094 	add.w	r0, r0, #296	; 0x128
   46f5a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   46f5e:	4770      	bx	lr
   46f60:	40027000 	.word	0x40027000

00046f64 <usbd_dmareq_process>:
{
   46f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   46f68:	4e59      	ldr	r6, [pc, #356]	; (470d0 <usbd_dmareq_process+0x16c>)
   46f6a:	7833      	ldrb	r3, [r6, #0]
{
   46f6c:	b085      	sub	sp, #20
    if (!m_dma_pending)
   46f6e:	2b00      	cmp	r3, #0
   46f70:	d173      	bne.n	4705a <usbd_dmareq_process+0xf6>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   46f72:	f8df 8160 	ldr.w	r8, [pc, #352]	; 470d4 <usbd_dmareq_process+0x170>
   46f76:	4d58      	ldr	r5, [pc, #352]	; (470d8 <usbd_dmareq_process+0x174>)
   46f78:	f8d8 4000 	ldr.w	r4, [r8]
   46f7c:	682b      	ldr	r3, [r5, #0]
   46f7e:	401c      	ands	r4, r3
   46f80:	d06b      	beq.n	4705a <usbd_dmareq_process+0xf6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   46f82:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
   46f86:	bf14      	ite	ne
   46f88:	fa93 f4a3 	rbitne	r4, r3
   46f8c:	fa94 f4a4 	rbiteq	r4, r4
   46f90:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   46f94:	f04f 0901 	mov.w	r9, #1
   46f98:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   46f9c:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   46f9e:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   46fa2:	d95d      	bls.n	47060 <usbd_dmareq_process+0xfc>
   46fa4:	3c10      	subs	r4, #16
   46fa6:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
   46fa8:	4620      	mov	r0, r4
   46faa:	f7ff fc2b 	bl	46804 <ep_state_access>
   46fae:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   46fb0:	4620      	mov	r0, r4
   46fb2:	f7ff ffc3 	bl	46f3c <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   46fb6:	f8da 7000 	ldr.w	r7, [sl]
   46fba:	f8ba 200c 	ldrh.w	r2, [sl, #12]
   46fbe:	f8da 1004 	ldr.w	r1, [sl, #4]
   46fc2:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   46fc4:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
   46fc6:	a802      	add	r0, sp, #8
   46fc8:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
   46fca:	9b02      	ldr	r3, [sp, #8]
   46fcc:	2b00      	cmp	r3, #0
   46fce:	d153      	bne.n	47078 <usbd_dmareq_process+0x114>
                if (!continue_transfer)
   46fd0:	b908      	cbnz	r0, 46fd6 <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
   46fd2:	f8ca 0000 	str.w	r0, [sl]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   46fd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (NRF_USBD_EPIN_CHECK(ep))
   46fda:	b261      	sxtb	r1, r4
            if (var1 == 0x08)
   46fdc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   46fe0:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   46fe2:	bf02      	ittt	eq
   46fe4:	4b3d      	ldreq	r3, [pc, #244]	; (470dc <usbd_dmareq_process+0x178>)
   46fe6:	2282      	moveq	r2, #130	; 0x82
   46fe8:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
   46fec:	2301      	movs	r3, #1
   46fee:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
   46ff0:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
   46ff2:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   46ff4:	9802      	ldr	r0, [sp, #8]
            m_ep_ready &= ~(1U << pos);
   46ff6:	ea03 0309 	and.w	r3, r3, r9
   46ffa:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
   46ffc:	f8da 3008 	ldr.w	r3, [sl, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
   47000:	2900      	cmp	r1, #0
   47002:	4413      	add	r3, r2
   47004:	f8ca 3008 	str.w	r3, [sl, #8]
   47008:	f004 0508 	and.w	r5, r4, #8
   4700c:	4b33      	ldr	r3, [pc, #204]	; (470dc <usbd_dmareq_process+0x178>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   4700e:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   47012:	da4e      	bge.n	470b2 <usbd_dmareq_process+0x14e>
        if (NRF_USBD_EPISO_CHECK(ep))
   47014:	2d00      	cmp	r5, #0
   47016:	d044      	beq.n	470a2 <usbd_dmareq_process+0x13e>
            p_reg->ISOIN.PTR    = ptr;
   47018:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   4701c:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   47020:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   47022:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   47026:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4702a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   4702e:	2201      	movs	r2, #1
   47030:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   47032:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   47034:	4a2a      	ldr	r2, [pc, #168]	; (470e0 <usbd_dmareq_process+0x17c>)
   47036:	4b2b      	ldr	r3, [pc, #172]	; (470e4 <usbd_dmareq_process+0x180>)
   47038:	ea13 0321 	ands.w	r3, r3, r1, asr #32
   4703c:	bf38      	it	cc
   4703e:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   47040:	4926      	ldr	r1, [pc, #152]	; (470dc <usbd_dmareq_process+0x178>)
   47042:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   47046:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4704a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   4704e:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   47050:	b91a      	cbnz	r2, 4705a <usbd_dmareq_process+0xf6>
   47052:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   47056:	2a00      	cmp	r2, #0
   47058:	d0f9      	beq.n	4704e <usbd_dmareq_process+0xea>
}
   4705a:	b005      	add	sp, #20
   4705c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   47060:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
   47064:	4620      	mov	r0, r4
   47066:	f7ff fbcd 	bl	46804 <ep_state_access>
                continue_transfer = p_state->handler.feeder(
   4706a:	6803      	ldr	r3, [r0, #0]
   4706c:	8982      	ldrh	r2, [r0, #12]
   4706e:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
   47070:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
   47072:	a802      	add	r0, sp, #8
   47074:	4798      	blx	r3
   47076:	e7ab      	b.n	46fd0 <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
   47078:	9b03      	ldr	r3, [sp, #12]
   4707a:	459b      	cmp	fp, r3
   4707c:	d9a8      	bls.n	46fd0 <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   4707e:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   47080:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   47082:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   47086:	f7ff fcb7 	bl	469f8 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   4708a:	2306      	movs	r3, #6
   4708c:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
   47090:	4b15      	ldr	r3, [pc, #84]	; (470e8 <usbd_dmareq_process+0x184>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   47092:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
   47096:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   47098:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
   4709c:	a801      	add	r0, sp, #4
   4709e:	4798      	blx	r3
                    continue;
   470a0:	e76a      	b.n	46f78 <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
   470a2:	2514      	movs	r5, #20
   470a4:	fb05 3304 	mla	r3, r5, r4, r3
   470a8:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   470ac:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
   470b0:	e7b6      	b.n	47020 <usbd_dmareq_process+0xbc>
        if (NRF_USBD_EPISO_CHECK(ep))
   470b2:	b12d      	cbz	r5, 470c0 <usbd_dmareq_process+0x15c>
            p_reg->ISOOUT.PTR    = ptr;
   470b4:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   470b8:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
   470bc:	2328      	movs	r3, #40	; 0x28
   470be:	e7b0      	b.n	47022 <usbd_dmareq_process+0xbe>
            p_reg->EPOUT[epnr].PTR    = ptr;
   470c0:	2514      	movs	r5, #20
   470c2:	fb05 3304 	mla	r3, r5, r4, r3
   470c6:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   470ca:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   470ce:	e7f5      	b.n	470bc <usbd_dmareq_process+0x158>
   470d0:	20007423 	.word	0x20007423
   470d4:	2000707c 	.word	0x2000707c
   470d8:	20007080 	.word	0x20007080
   470dc:	40027000 	.word	0x40027000
   470e0:	00053b54 	.word	0x00053b54
   470e4:	00053b66 	.word	0x00053b66
   470e8:	20007084 	.word	0x20007084

000470ec <ev_epdata_handler>:
{
   470ec:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   470ee:	4b0f      	ldr	r3, [pc, #60]	; (4712c <ev_epdata_handler+0x40>)
   470f0:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   470f4:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   470f8:	2501      	movs	r5, #1
    while (dataepstatus)
   470fa:	b91c      	cbnz	r4, 47104 <ev_epdata_handler+0x18>
}
   470fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   47100:	f7ff bf30 	b.w	46f64 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   47104:	fa94 f3a4 	rbit	r3, r4
   47108:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   4710c:	2b0f      	cmp	r3, #15
   4710e:	bfc8      	it	gt
   47110:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   47114:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   47116:	bfd4      	ite	le
   47118:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
   4711c:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   4711e:	fa05 f303 	lsl.w	r3, r5, r3
   47122:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   47126:	f7ff fc9f 	bl	46a68 <usbd_ep_data_handler>
   4712a:	e7e6      	b.n	470fa <ev_epdata_handler+0xe>
   4712c:	40027000 	.word	0x40027000

00047130 <nrf_usbd_epout_dma_handler>:
{
   47130:	b537      	push	{r0, r1, r2, r4, r5, lr}
    usbd_dma_pending_clear();
   47132:	f7ff fc71 	bl	46a18 <usbd_dma_pending_clear>
{
   47136:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
   47138:	f7ff fb64 	bl	46804 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   4713c:	7b83      	ldrb	r3, [r0, #14]
   4713e:	2b03      	cmp	r3, #3
   47140:	d10d      	bne.n	4715e <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47142:	4620      	mov	r0, r4
   47144:	f009 f8d9 	bl	502fa <ep2bit>
   47148:	2301      	movs	r3, #1
   4714a:	fa03 f000 	lsl.w	r0, r3, r0
   4714e:	43c0      	mvns	r0, r0
   47150:	f7ff fc52 	bl	469f8 <atomic_and.constprop.0.isra.0>
}
   47154:	b003      	add	sp, #12
   47156:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
   4715a:	f7ff bf03 	b.w	46f64 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
   4715e:	6805      	ldr	r5, [r0, #0]
   47160:	2d00      	cmp	r5, #0
   47162:	d1f7      	bne.n	47154 <nrf_usbd_epout_dma_handler+0x24>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47164:	4620      	mov	r0, r4
   47166:	f009 f8c8 	bl	502fa <ep2bit>
   4716a:	2301      	movs	r3, #1
   4716c:	fa03 f000 	lsl.w	r0, r3, r0
   47170:	43c0      	mvns	r0, r0
   47172:	f7ff fc41 	bl	469f8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   47176:	2306      	movs	r3, #6
   47178:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   4717c:	4b04      	ldr	r3, [pc, #16]	; (47190 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   4717e:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
   47182:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   47184:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   47188:	a801      	add	r0, sp, #4
   4718a:	4798      	blx	r3
   4718c:	e7e2      	b.n	47154 <nrf_usbd_epout_dma_handler+0x24>
   4718e:	bf00      	nop
   47190:	20007084 	.word	0x20007084

00047194 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   47194:	4b02      	ldr	r3, [pc, #8]	; (471a0 <nrfx_usbd_ep_stall+0xc>)
   47196:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   4719a:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   4719e:	4770      	bx	lr
   471a0:	40027000 	.word	0x40027000

000471a4 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   471a4:	0702      	lsls	r2, r0, #28
   471a6:	d413      	bmi.n	471d0 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
   471a8:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   471ac:	f010 0f80 	tst.w	r0, #128	; 0x80
   471b0:	4a08      	ldr	r2, [pc, #32]	; (471d4 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   471b2:	bf0b      	itete	eq
   471b4:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   471b8:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   471bc:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   471c0:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   471c4:	bf08      	it	eq
   471c6:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   471c8:	1e43      	subs	r3, r0, #1
   471ca:	4258      	negs	r0, r3
   471cc:	4158      	adcs	r0, r3
   471ce:	4770      	bx	lr
        return false;
   471d0:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   471d2:	4770      	bx	lr
   471d4:	40027000 	.word	0x40027000

000471d8 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   471d8:	4b04      	ldr	r3, [pc, #16]	; (471ec <nrfx_usbd_ep_dtoggle_clear+0x14>)
   471da:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   471de:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   471e2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   471e6:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   471ea:	4770      	bx	lr
   471ec:	40027000 	.word	0x40027000

000471f0 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   471f0:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   471f2:	2208      	movs	r2, #8
   471f4:	2100      	movs	r1, #0
{
   471f6:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   471f8:	f004 fd39 	bl	4bc6e <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   471fc:	4b0e      	ldr	r3, [pc, #56]	; (47238 <nrfx_usbd_setup_get+0x48>)
   471fe:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   47202:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   47204:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   47208:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   4720a:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   4720e:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   47212:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   47216:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   47218:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   4721c:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   47220:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   47224:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   47226:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   4722a:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   4722e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   47232:	80e3      	strh	r3, [r4, #6]
}
   47234:	bd10      	pop	{r4, pc}
   47236:	bf00      	nop
   47238:	40027000 	.word	0x40027000

0004723c <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   4723c:	4b02      	ldr	r3, [pc, #8]	; (47248 <nrfx_usbd_setup_data_clear+0xc>)
   4723e:	2201      	movs	r2, #1
   47240:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   47242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   47244:	4770      	bx	lr
   47246:	bf00      	nop
   47248:	40027000 	.word	0x40027000

0004724c <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   4724c:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   4724e:	f7ff fbe3 	bl	46a18 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   47252:	4b10      	ldr	r3, [pc, #64]	; (47294 <ev_dma_epout0_handler+0x48>)
   47254:	7b9a      	ldrb	r2, [r3, #14]
   47256:	2a03      	cmp	r2, #3
   47258:	d106      	bne.n	47268 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   4725a:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   4725e:	b002      	add	sp, #8
   47260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47264:	f7ff bbc8 	b.w	469f8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
   47268:	681c      	ldr	r4, [r3, #0]
   4726a:	b974      	cbnz	r4, 4728a <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   4726c:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   47270:	f7ff fbc2 	bl	469f8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   47274:	2306      	movs	r3, #6
   47276:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   4727a:	4b07      	ldr	r3, [pc, #28]	; (47298 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   4727c:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   47280:	681b      	ldr	r3, [r3, #0]
   47282:	a801      	add	r0, sp, #4
   47284:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   47286:	b002      	add	sp, #8
   47288:	bd10      	pop	{r4, pc}
   4728a:	b002      	add	sp, #8
   4728c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
   47290:	f7ff bfd4 	b.w	4723c <nrfx_usbd_setup_data_clear>
   47294:	20006f5c 	.word	0x20006f5c
   47298:	20007084 	.word	0x20007084

0004729c <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   4729c:	4b02      	ldr	r3, [pc, #8]	; (472a8 <nrfx_usbd_setup_clear+0xc>)
   4729e:	2201      	movs	r2, #1
   472a0:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   472a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   472a4:	4770      	bx	lr
   472a6:	bf00      	nop
   472a8:	40027000 	.word	0x40027000

000472ac <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   472ac:	4b02      	ldr	r3, [pc, #8]	; (472b8 <nrfx_usbd_setup_stall+0xc>)
   472ae:	2201      	movs	r2, #1
   472b0:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   472b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   472b4:	4770      	bx	lr
   472b6:	bf00      	nop
   472b8:	40027000 	.word	0x40027000

000472bc <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   472bc:	4b01      	ldr	r3, [pc, #4]	; (472c4 <nrfx_usbd_last_setup_dir_get+0x8>)
   472be:	7818      	ldrb	r0, [r3, #0]
   472c0:	4770      	bx	lr
   472c2:	bf00      	nop
   472c4:	20007424 	.word	0x20007424

000472c8 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   472c8:	b510      	push	{r4, lr}
   472ca:	4602      	mov	r2, r0
	__asm__ volatile(
   472cc:	f04f 0320 	mov.w	r3, #32
   472d0:	f3ef 8411 	mrs	r4, BASEPRI
   472d4:	f383 8812 	msr	BASEPRI_MAX, r3
   472d8:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   472dc:	f009 f80d 	bl	502fa <ep2bit>
   472e0:	490d      	ldr	r1, [pc, #52]	; (47318 <nrfx_usbd_transfer_out_drop+0x50>)
   472e2:	2301      	movs	r3, #1
   472e4:	fa03 f000 	lsl.w	r0, r3, r0
   472e8:	680b      	ldr	r3, [r1, #0]
   472ea:	ea23 0300 	bic.w	r3, r3, r0
   472ee:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   472f0:	f012 0108 	ands.w	r1, r2, #8
   472f4:	d10a      	bne.n	4730c <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   472f6:	f002 030f 	and.w	r3, r2, #15
   472fa:	009b      	lsls	r3, r3, #2
   472fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   47300:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   47304:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   47308:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   4730c:	f384 8811 	msr	BASEPRI, r4
   47310:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   47314:	bd10      	pop	{r4, pc}
   47316:	bf00      	nop
   47318:	20007080 	.word	0x20007080

0004731c <usbd_ep_abort>:
{
   4731c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4731e:	4601      	mov	r1, r0
	__asm__ volatile(
   47320:	f04f 0320 	mov.w	r3, #32
   47324:	f3ef 8511 	mrs	r5, BASEPRI
   47328:	f383 8812 	msr	BASEPRI_MAX, r3
   4732c:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   47330:	f7ff fa68 	bl	46804 <ep_state_access>
   47334:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   47336:	4608      	mov	r0, r1
   47338:	f008 ffdf 	bl	502fa <ep2bit>
   4733c:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
   4733e:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   47342:	fa02 f200 	lsl.w	r2, r2, r0
   47346:	482e      	ldr	r0, [pc, #184]	; (47400 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
   47348:	d118      	bne.n	4737c <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   4734a:	6803      	ldr	r3, [r0, #0]
   4734c:	ea32 0403 	bics.w	r4, r2, r3
   47350:	d00a      	beq.n	47368 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
   47352:	4608      	mov	r0, r1
   47354:	f7ff ffb8 	bl	472c8 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   47358:	2303      	movs	r3, #3
   4735a:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   4735c:	f385 8811 	msr	BASEPRI, r5
   47360:	f3bf 8f6f 	isb	sy
}
   47364:	b003      	add	sp, #12
   47366:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_ready &= ~(1U << ep2bit(ep));
   47368:	4926      	ldr	r1, [pc, #152]	; (47404 <usbd_ep_abort+0xe8>)
            p_state->handler.consumer = NULL;
   4736a:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   4736c:	ea23 0302 	bic.w	r3, r3, r2
   47370:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   47372:	680b      	ldr	r3, [r1, #0]
   47374:	ea23 0302 	bic.w	r3, r3, r2
   47378:	600b      	str	r3, [r1, #0]
   4737a:	e7ed      	b.n	47358 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   4737c:	070b      	lsls	r3, r1, #28
   4737e:	d415      	bmi.n	473ac <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
   47380:	2980      	cmp	r1, #128	; 0x80
   47382:	4b21      	ldr	r3, [pc, #132]	; (47408 <usbd_ep_abort+0xec>)
   47384:	d02f      	beq.n	473e6 <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   47386:	f001 040f 	and.w	r4, r1, #15
   4738a:	f204 34da 	addw	r4, r4, #986	; 0x3da
   4738e:	0064      	lsls	r4, r4, #1
   47390:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   47394:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   47398:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   4739c:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   4739e:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   473a2:	433c      	orrs	r4, r7
   473a4:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   473a8:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   473ac:	4f15      	ldr	r7, [pc, #84]	; (47404 <usbd_ep_abort+0xe8>)
   473ae:	6804      	ldr	r4, [r0, #0]
   473b0:	683b      	ldr	r3, [r7, #0]
   473b2:	ea64 0c03 	orn	ip, r4, r3
   473b6:	ea1c 0f02 	tst.w	ip, r2
   473ba:	d0cf      	beq.n	4735c <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
   473bc:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   473be:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
   473c2:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
   473c4:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   473c6:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
   473c8:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   473ca:	2303      	movs	r3, #3
   473cc:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   473ce:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   473d2:	4b0e      	ldr	r3, [pc, #56]	; (4740c <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   473d4:	f88d 1006 	strb.w	r1, [sp, #6]
   473d8:	2206      	movs	r2, #6
            m_event_handler(&evt);
   473da:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   473dc:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
   473e0:	a801      	add	r0, sp, #4
   473e2:	4798      	blx	r3
   473e4:	e7ba      	b.n	4735c <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   473e6:	f240 74b4 	movw	r4, #1972	; 0x7b4
   473ea:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   473ee:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   473f2:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   473f6:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   473f8:	f044 0404 	orr.w	r4, r4, #4
   473fc:	e7d1      	b.n	473a2 <usbd_ep_abort+0x86>
   473fe:	bf00      	nop
   47400:	2000707c 	.word	0x2000707c
   47404:	20007080 	.word	0x20007080
   47408:	40027000 	.word	0x40027000
   4740c:	20007084 	.word	0x20007084

00047410 <ev_setup_handler>:
{
   47410:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   47412:	4b14      	ldr	r3, [pc, #80]	; (47464 <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   47414:	4c14      	ldr	r4, [pc, #80]	; (47468 <ev_setup_handler+0x58>)
   47416:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
   4741a:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   4741c:	4e13      	ldr	r6, [pc, #76]	; (4746c <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   4741e:	43da      	mvns	r2, r3
   47420:	4b13      	ldr	r3, [pc, #76]	; (47470 <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
   47422:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   47424:	681b      	ldr	r3, [r3, #0]
   47426:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   47428:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   4742a:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   4742c:	f008 ff65 	bl	502fa <ep2bit>
   47430:	2301      	movs	r3, #1
   47432:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   47434:	4213      	tst	r3, r2
   47436:	d002      	beq.n	4743e <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
   47438:	4608      	mov	r0, r1
   4743a:	f7ff ff6f 	bl	4731c <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   4743e:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
   47442:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   47446:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   47448:	f7ff fad6 	bl	469f8 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   4744c:	6823      	ldr	r3, [r4, #0]
   4744e:	f043 0301 	orr.w	r3, r3, #1
   47452:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   47454:	2305      	movs	r3, #5
   47456:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
   47458:	4b06      	ldr	r3, [pc, #24]	; (47474 <ev_setup_handler+0x64>)
   4745a:	a801      	add	r0, sp, #4
   4745c:	681b      	ldr	r3, [r3, #0]
   4745e:	4798      	blx	r3
}
   47460:	b002      	add	sp, #8
   47462:	bd70      	pop	{r4, r5, r6, pc}
   47464:	40027000 	.word	0x40027000
   47468:	20007080 	.word	0x20007080
   4746c:	20007424 	.word	0x20007424
   47470:	2000707c 	.word	0x2000707c
   47474:	20007084 	.word	0x20007084

00047478 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
   47478:	4b1b      	ldr	r3, [pc, #108]	; (474e8 <nrfx_usbd_irq_handler+0x70>)
   4747a:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   4747e:	2300      	movs	r3, #0
{
   47480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
   47484:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   47486:	461d      	mov	r5, r3
    while (to_process)
   47488:	b970      	cbnz	r0, 474a8 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   4748a:	4f18      	ldr	r7, [pc, #96]	; (474ec <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   4748c:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   47490:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   47494:	f04f 0801 	mov.w	r8, #1
    while (active)
   47498:	b9bc      	cbnz	r4, 474ca <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   4749a:	f7ff fd63 	bl	46f64 <usbd_dmareq_process>
    if (setup_active)
   4749e:	b306      	cbz	r6, 474e2 <nrfx_usbd_irq_handler+0x6a>
}
   474a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   474a4:	f7ff bfb4 	b.w	47410 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
   474a8:	fa90 f2a0 	rbit	r2, r0
   474ac:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   474b0:	490f      	ldr	r1, [pc, #60]	; (474f0 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   474b2:	0096      	lsls	r6, r2, #2
   474b4:	4431      	add	r1, r6
            active |= 1UL << event_nr;
   474b6:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   474ba:	680e      	ldr	r6, [r1, #0]
    if (ret)
   474bc:	b116      	cbz	r6, 474c4 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   474be:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   474c0:	6809      	ldr	r1, [r1, #0]
   474c2:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   474c4:	ea20 0002 	bic.w	r0, r0, r2
   474c8:	e7de      	b.n	47488 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
   474ca:	fa94 f5a4 	rbit	r5, r4
   474ce:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   474d2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   474d6:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   474da:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   474dc:	ea24 0405 	bic.w	r4, r4, r5
   474e0:	e7da      	b.n	47498 <nrfx_usbd_irq_handler+0x20>
}
   474e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   474e6:	bf00      	nop
   474e8:	40027000 	.word	0x40027000
   474ec:	00053a28 	.word	0x00053a28
   474f0:	40027100 	.word	0x40027100

000474f4 <usbd_ep_abort_all>:
{
   474f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   474f6:	4e11      	ldr	r6, [pc, #68]	; (4753c <usbd_ep_abort_all+0x48>)
   474f8:	4b11      	ldr	r3, [pc, #68]	; (47540 <usbd_ep_abort_all+0x4c>)
   474fa:	6834      	ldr	r4, [r6, #0]
   474fc:	681b      	ldr	r3, [r3, #0]
   474fe:	0c24      	lsrs	r4, r4, #16
   47500:	0424      	lsls	r4, r4, #16
   47502:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
   47504:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   47506:	b91c      	cbnz	r4, 47510 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   47508:	f240 13ff 	movw	r3, #511	; 0x1ff
   4750c:	6033      	str	r3, [r6, #0]
}
   4750e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   47510:	fa94 f5a4 	rbit	r5, r4
   47514:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   47518:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   4751a:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   4751c:	bfc6      	itte	gt
   4751e:	f1a5 0010 	subgt.w	r0, r5, #16
   47522:	b2c0      	uxtbgt	r0, r0
   47524:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   47528:	0703      	lsls	r3, r0, #28
   4752a:	d401      	bmi.n	47530 <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
   4752c:	f7ff fef6 	bl	4731c <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   47530:	fa07 f505 	lsl.w	r5, r7, r5
   47534:	ea24 0405 	bic.w	r4, r4, r5
   47538:	e7e5      	b.n	47506 <usbd_ep_abort_all+0x12>
   4753a:	bf00      	nop
   4753c:	20007080 	.word	0x20007080
   47540:	2000707c 	.word	0x2000707c

00047544 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   47544:	4b0c      	ldr	r3, [pc, #48]	; (47578 <nrfx_usbd_stop+0x34>)
   47546:	2280      	movs	r2, #128	; 0x80
{
   47548:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   4754a:	2027      	movs	r0, #39	; 0x27
   4754c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   47550:	f7e5 fb4e 	bl	2cbf0 <arch_irq_is_enabled>
   47554:	b170      	cbz	r0, 47574 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   47556:	4c09      	ldr	r4, [pc, #36]	; (4757c <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
   47558:	f7ff ffcc 	bl	474f4 <usbd_ep_abort_all>
   4755c:	2300      	movs	r3, #0
   4755e:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   47562:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
   47564:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   47568:	f7e5 fb2e 	bl	2cbc8 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   4756c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   47570:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   47574:	bd10      	pop	{r4, pc}
   47576:	bf00      	nop
   47578:	e000e100 	.word	0xe000e100
   4757c:	40027000 	.word	0x40027000

00047580 <nrfx_usbd_disable>:
{
   47580:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   47582:	f7ff ffdf 	bl	47544 <nrfx_usbd_stop>
    return p_reg->INTENSET;
   47586:	4b08      	ldr	r3, [pc, #32]	; (475a8 <nrfx_usbd_disable+0x28>)
   47588:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   4758c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   47590:	2200      	movs	r2, #0
   47592:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   47596:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   4759a:	f7ff fa3d 	bl	46a18 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   4759e:	4b03      	ldr	r3, [pc, #12]	; (475ac <nrfx_usbd_disable+0x2c>)
   475a0:	2201      	movs	r2, #1
   475a2:	701a      	strb	r2, [r3, #0]
}
   475a4:	bd08      	pop	{r3, pc}
   475a6:	bf00      	nop
   475a8:	40027000 	.word	0x40027000
   475ac:	20007426 	.word	0x20007426

000475b0 <nrfx_usbd_suspend>:
{
   475b0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   475b2:	f04f 0320 	mov.w	r3, #32
   475b6:	f3ef 8511 	mrs	r5, BASEPRI
   475ba:	f383 8812 	msr	BASEPRI_MAX, r3
   475be:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
   475c2:	4b10      	ldr	r3, [pc, #64]	; (47604 <nrfx_usbd_suspend+0x54>)
   475c4:	781b      	ldrb	r3, [r3, #0]
   475c6:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   475ca:	b1a3      	cbz	r3, 475f6 <nrfx_usbd_suspend+0x46>
        usbd_ep_abort_all();
   475cc:	f7ff ff92 	bl	474f4 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
   475d0:	4b0d      	ldr	r3, [pc, #52]	; (47608 <nrfx_usbd_suspend+0x58>)
   475d2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   475d6:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   475da:	d10c      	bne.n	475f6 <nrfx_usbd_suspend+0x46>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   475dc:	2101      	movs	r1, #1
   475de:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   475e2:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   475e6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   475ea:	0589      	lsls	r1, r1, #22
   475ec:	d504      	bpl.n	475f8 <nrfx_usbd_suspend+0x48>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   475ee:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   475f2:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   475f6:	2400      	movs	r4, #0
	__asm__ volatile(
   475f8:	f385 8811 	msr	BASEPRI, r5
   475fc:	f3bf 8f6f 	isb	sy
}
   47600:	4620      	mov	r0, r4
   47602:	bd38      	pop	{r3, r4, r5, pc}
   47604:	20007425 	.word	0x20007425
   47608:	40027000 	.word	0x40027000

0004760c <nrfx_usbd_ep_disable>:
{
   4760c:	b510      	push	{r4, lr}
   4760e:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   47610:	f7ff fe84 	bl	4731c <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   47614:	4a10      	ldr	r2, [pc, #64]	; (47658 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   47616:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   4761a:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   4761e:	f04f 0301 	mov.w	r3, #1
   47622:	bf14      	ite	ne
   47624:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   47628:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
   4762c:	fa03 f300 	lsl.w	r3, r3, r0
   47630:	ea6f 0303 	mvn.w	r3, r3
   47634:	bf15      	itete	ne
   47636:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   47638:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   4763a:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   4763e:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   47642:	bf14      	ite	ne
   47644:	4b05      	ldrne	r3, [pc, #20]	; (4765c <nrfx_usbd_ep_disable+0x50>)
   47646:	4b06      	ldreq	r3, [pc, #24]	; (47660 <nrfx_usbd_ep_disable+0x54>)
   47648:	5c1a      	ldrb	r2, [r3, r0]
   4764a:	2301      	movs	r3, #1
   4764c:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   4764e:	4a02      	ldr	r2, [pc, #8]	; (47658 <nrfx_usbd_ep_disable+0x4c>)
   47650:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   47654:	bd10      	pop	{r4, pc}
   47656:	bf00      	nop
   47658:	40027000 	.word	0x40027000
   4765c:	00054381 	.word	0x00054381
   47660:	00054378 	.word	0x00054378

00047664 <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   47664:	f010 0f80 	tst.w	r0, #128	; 0x80
{
   47668:	b570      	push	{r4, r5, r6, lr}
   4766a:	4924      	ldr	r1, [pc, #144]	; (476fc <nrfx_usbd_ep_enable+0x98>)
   4766c:	4604      	mov	r4, r0
   4766e:	f000 030f 	and.w	r3, r0, #15
   47672:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   47676:	d012      	beq.n	4769e <nrfx_usbd_ep_enable+0x3a>
   47678:	4a21      	ldr	r2, [pc, #132]	; (47700 <nrfx_usbd_ep_enable+0x9c>)
   4767a:	5cd2      	ldrb	r2, [r2, r3]
   4767c:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
   47680:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   47684:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   47688:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   4768a:	07d0      	lsls	r0, r2, #31
   4768c:	d406      	bmi.n	4769c <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
   4768e:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   47692:	fa05 f303 	lsl.w	r3, r5, r3
   47696:	4313      	orrs	r3, r2
   47698:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
   4769c:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   4769e:	4a19      	ldr	r2, [pc, #100]	; (47704 <nrfx_usbd_ep_enable+0xa0>)
   476a0:	5cd2      	ldrb	r2, [r2, r3]
   476a2:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
   476a6:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   476aa:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
   476ae:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   476b0:	07d2      	lsls	r2, r2, #31
   476b2:	d4f3      	bmi.n	4769c <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
   476b4:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
   476b8:	fa05 f203 	lsl.w	r2, r5, r3
   476bc:	4332      	orrs	r2, r6
   476be:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   476c2:	2b00      	cmp	r3, #0
   476c4:	d0ea      	beq.n	4769c <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
   476c6:	0703      	lsls	r3, r0, #28
   476c8:	d4e8      	bmi.n	4769c <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
   476ca:	f04f 0320 	mov.w	r3, #32
   476ce:	f3ef 8611 	mrs	r6, BASEPRI
   476d2:	f383 8812 	msr	BASEPRI_MAX, r3
   476d6:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   476da:	f7ff fdf5 	bl	472c8 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   476de:	4620      	mov	r0, r4
   476e0:	f008 fe0b 	bl	502fa <ep2bit>
   476e4:	4a08      	ldr	r2, [pc, #32]	; (47708 <nrfx_usbd_ep_enable+0xa4>)
   476e6:	6813      	ldr	r3, [r2, #0]
   476e8:	fa05 f000 	lsl.w	r0, r5, r0
   476ec:	ea23 0300 	bic.w	r3, r3, r0
   476f0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   476f2:	f386 8811 	msr	BASEPRI, r6
   476f6:	f3bf 8f6f 	isb	sy
}
   476fa:	e7cf      	b.n	4769c <nrfx_usbd_ep_enable+0x38>
   476fc:	40027000 	.word	0x40027000
   47700:	00054381 	.word	0x00054381
   47704:	00054378 	.word	0x00054378
   47708:	2000707c 	.word	0x2000707c

0004770c <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   4770c:	0603      	lsls	r3, r0, #24
{
   4770e:	b510      	push	{r4, lr}
   47710:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   47712:	d405      	bmi.n	47720 <nrfx_usbd_ep_stall_clear+0x14>
   47714:	f7ff fd46 	bl	471a4 <nrfx_usbd_ep_stall_check>
   47718:	b110      	cbz	r0, 47720 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   4771a:	4620      	mov	r0, r4
   4771c:	f7ff fdd4 	bl	472c8 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   47720:	4b01      	ldr	r3, [pc, #4]	; (47728 <nrfx_usbd_ep_stall_clear+0x1c>)
   47722:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   47726:	bd10      	pop	{r4, pc}
   47728:	40027000 	.word	0x40027000

0004772c <kscan_direct_init>:
    }

    return 0;
}

static int kscan_direct_init(const struct device *dev) {
   4772c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct kscan_direct_data *data = dev->data;
   47730:	f8d0 8010 	ldr.w	r8, [r0, #16]
    const struct kscan_direct_config *config = dev->config;
   47734:	6847      	ldr	r7, [r0, #4]

    data->dev = dev;
   47736:	f8c8 0000 	str.w	r0, [r8]
static int kscan_direct_init(const struct device *dev) {
   4773a:	4605      	mov	r5, r0
    for (int i = 0; i < config->inputs.len; i++) {
   4773c:	2400      	movs	r4, #0
    gpio_init_callback(&irq->callback, kscan_direct_irq_callback_handler, BIT(gpio->pin));
   4773e:	f04f 0a01 	mov.w	sl, #1
    for (int i = 0; i < config->inputs.len; i++) {
   47742:	687b      	ldr	r3, [r7, #4]
   47744:	42a3      	cmp	r3, r4
   47746:	d808      	bhi.n	4775a <kscan_direct_init+0x2e>

    kscan_direct_init_inputs(dev);

    k_work_init_delayable(&data->work, kscan_direct_work_handler);
   47748:	f108 0008 	add.w	r0, r8, #8
   4774c:	4922      	ldr	r1, [pc, #136]	; (477d8 <kscan_direct_init+0xac>)
   4774e:	f009 fa66 	bl	50c1e <k_work_init_delayable>

    return 0;
}
   47752:	2000      	movs	r0, #0
   47754:	b003      	add	sp, #12
   47756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   4775a:	683e      	ldr	r6, [r7, #0]
        int err = kscan_direct_init_input_inst(dev, gpio, i, config->toggle_mode);
   4775c:	7e3a      	ldrb	r2, [r7, #24]
    if (!device_is_ready(gpio->port)) {
   4775e:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
        int err = kscan_direct_init_input_inst(dev, gpio, i, config->toggle_mode);
   47762:	9201      	str	r2, [sp, #4]
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   47764:	ea4f 09c4 	mov.w	r9, r4, lsl #3
   47768:	eb06 0bc4 	add.w	fp, r6, r4, lsl #3
   4776c:	f008 ffee 	bl	5074c <z_device_is_ready>
    if (!device_is_ready(gpio->port)) {
   47770:	9a01      	ldr	r2, [sp, #4]
   47772:	2800      	cmp	r0, #0
   47774:	d0e8      	beq.n	47748 <kscan_direct_init+0x1c>
    int err = gpio_pin_configure_dt(
   47776:	f89b c005 	ldrb.w	ip, [fp, #5]
   4777a:	b352      	cbz	r2, 477d2 <kscan_direct_init+0xa6>
        return ((BIT(0) & gpio->dt_flags) ? GPIO_PULL_UP : GPIO_PULL_DOWN);
   4777c:	f01c 0f01 	tst.w	ip, #1
   47780:	bf0c      	ite	eq
   47782:	2220      	moveq	r2, #32
   47784:	2210      	movne	r2, #16
    int err = gpio_pin_configure_dt(
   47786:	f442 7280 	orr.w	r2, r2, #256	; 0x100
	return gpio_pin_configure(spec->port,
   4778a:	f856 0009 	ldr.w	r0, [r6, r9]
				  spec->pin,
   4778e:	f89b 1004 	ldrb.w	r1, [fp, #4]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   47792:	ea4c 0202 	orr.w	r2, ip, r2
   47796:	f008 fe57 	bl	50448 <z_impl_gpio_pin_configure>
    if (err) {
   4779a:	2800      	cmp	r0, #0
   4779c:	d1d4      	bne.n	47748 <kscan_direct_init+0x1c>
    struct kscan_direct_irq_callback *irq = &data->irqs[index];
   4779e:	692a      	ldr	r2, [r5, #16]
   477a0:	0121      	lsls	r1, r4, #4
   477a2:	6b90      	ldr	r0, [r2, #56]	; 0x38
    irq->dev = dev;
   477a4:	5045      	str	r5, [r0, r1]
    gpio_init_callback(&irq->callback, kscan_direct_irq_callback_handler, BIT(gpio->pin));
   477a6:	f89b 3004 	ldrb.w	r3, [fp, #4]
    struct kscan_direct_irq_callback *irq = &data->irqs[index];
   477aa:	eb00 1204 	add.w	r2, r0, r4, lsl #4
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   477ae:	480b      	ldr	r0, [pc, #44]	; (477dc <kscan_direct_init+0xb0>)
    gpio_init_callback(&irq->callback, kscan_direct_irq_callback_handler, BIT(gpio->pin));
   477b0:	fa0a f303 	lsl.w	r3, sl, r3
	callback->pin_mask = pin_mask;
   477b4:	e9c2 0302 	strd	r0, r3, [r2, #8]
    err = gpio_add_callback(gpio->port, &irq->callback);
   477b8:	f856 0009 	ldr.w	r0, [r6, r9]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   477bc:	6883      	ldr	r3, [r0, #8]
   477be:	69db      	ldr	r3, [r3, #28]
    gpio_init_callback(&irq->callback, kscan_direct_irq_callback_handler, BIT(gpio->pin));
   477c0:	1d11      	adds	r1, r2, #4
   477c2:	2b00      	cmp	r3, #0
   477c4:	d0c0      	beq.n	47748 <kscan_direct_init+0x1c>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   477c6:	2201      	movs	r2, #1
   477c8:	4798      	blx	r3
        if (err) {
   477ca:	2800      	cmp	r0, #0
   477cc:	d1bc      	bne.n	47748 <kscan_direct_init+0x1c>
    for (int i = 0; i < config->inputs.len; i++) {
   477ce:	3401      	adds	r4, #1
   477d0:	e7b7      	b.n	47742 <kscan_direct_init+0x16>
    int err = gpio_pin_configure_dt(
   477d2:	f44f 7280 	mov.w	r2, #256	; 0x100
   477d6:	e7d8      	b.n	4778a <kscan_direct_init+0x5e>
   477d8:	000506c9 	.word	0x000506c9
   477dc:	000504e7 	.word	0x000504e7

000477e0 <vddh_sample_fetch>:
    struct adc_channel_cfg acc;
    struct adc_sequence as;
    struct battery_value value;
};

static int vddh_sample_fetch(const struct device *dev, enum sensor_channel chan) {
   477e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   477e2:	3927      	subs	r1, #39	; 0x27
   477e4:	b289      	uxth	r1, r1
   477e6:	2912      	cmp	r1, #18
   477e8:	d827      	bhi.n	4783a <vddh_sample_fetch+0x5a>
   477ea:	4b15      	ldr	r3, [pc, #84]	; (47840 <vddh_sample_fetch+0x60>)
   477ec:	40cb      	lsrs	r3, r1
   477ee:	07db      	lsls	r3, r3, #31
   477f0:	d523      	bpl.n	4783a <vddh_sample_fetch+0x5a>
        chan != SENSOR_CHAN_ALL) {
        LOG_DBG("Selected channel is not supported: %d.", chan);
        return -ENOTSUP;
    }

    struct vddh_data *drv_data = dev->data;
   477f2:	6905      	ldr	r5, [r0, #16]
		       const struct adc_sequence *sequence);

static inline int z_impl_adc_read(const struct device *dev,
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
   477f4:	4813      	ldr	r0, [pc, #76]	; (47844 <vddh_sample_fetch+0x64>)
   477f6:	6886      	ldr	r6, [r0, #8]
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   477f8:	f105 0108 	add.w	r1, r5, #8
   477fc:	6873      	ldr	r3, [r6, #4]
   477fe:	4798      	blx	r3
    struct adc_sequence *as = &drv_data->as;

    int rc = adc_read(adc, as);
    as->calibrate = false;
   47800:	2300      	movs	r3, #0
   47802:	76ab      	strb	r3, [r5, #26]

    if (rc != 0) {
   47804:	4604      	mov	r4, r0
   47806:	b9a8      	cbnz	r0, 47834 <vddh_sample_fetch+0x54>
        LOG_ERR("Failed to read ADC: %d", rc);
        return rc;
    }

    int32_t val = drv_data->value.adc_raw;
   47808:	8bab      	ldrh	r3, [r5, #28]
    rc = adc_raw_to_millivolts(adc_ref_internal(adc), drv_data->acc.gain, as->resolution, &val);
   4780a:	8932      	ldrh	r2, [r6, #8]
   4780c:	7828      	ldrb	r0, [r5, #0]
   4780e:	7e2f      	ldrb	r7, [r5, #24]
	int32_t adc_mv = *valp * ref_mv;
   47810:	4353      	muls	r3, r2
	int ret = adc_gain_invert(gain, &adc_mv);
   47812:	a901      	add	r1, sp, #4
	int32_t adc_mv = *valp * ref_mv;
   47814:	9301      	str	r3, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
   47816:	f7fc ff79 	bl	4470c <adc_gain_invert>
	if (ret == 0) {
   4781a:	4604      	mov	r4, r0
   4781c:	b950      	cbnz	r0, 47834 <vddh_sample_fetch+0x54>
		*valp = (adc_mv >> resolution);
   4781e:	9801      	ldr	r0, [sp, #4]
   47820:	4138      	asrs	r0, r7
    if (rc != 0) {
        LOG_ERR("Failed to convert raw ADC to mV: %d", rc);
        return rc;
    }

    drv_data->value.millivolts = val * VDDHDIV;
   47822:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   47826:	b280      	uxth	r0, r0
   47828:	83e8      	strh	r0, [r5, #30]
    drv_data->value.state_of_charge = lithium_ion_mv_to_pct(drv_data->value.millivolts);
   4782a:	b200      	sxth	r0, r0
   4782c:	f008 ff76 	bl	5071c <lithium_ion_mv_to_pct>
   47830:	f885 0020 	strb.w	r0, [r5, #32]

    LOG_DBG("ADC raw %d ~ %d mV => %d%%", drv_data->value.adc_raw, drv_data->value.millivolts,
            drv_data->value.state_of_charge);

    return rc;
}
   47834:	4620      	mov	r0, r4
   47836:	b003      	add	sp, #12
   47838:	bdf0      	pop	{r4, r5, r6, r7, pc}
static int vddh_sample_fetch(const struct device *dev, enum sensor_channel chan) {
   4783a:	f06f 0485 	mvn.w	r4, #133	; 0x85
   4783e:	e7f9      	b.n	47834 <vddh_sample_fetch+0x54>
   47840:	00040021 	.word	0x00040021
   47844:	00051494 	.word	0x00051494

00047848 <vddh_init>:
static const struct sensor_driver_api vddh_api = {
    .sample_fetch = vddh_sample_fetch,
    .channel_get = vddh_channel_get,
};

static int vddh_init(const struct device *dev) {
   47848:	b570      	push	{r4, r5, r6, lr}
    struct vddh_data *drv_data = dev->data;
   4784a:	6904      	ldr	r4, [r0, #16]
   4784c:	4d12      	ldr	r5, [pc, #72]	; (47898 <vddh_init+0x50>)
   4784e:	4628      	mov	r0, r5
   47850:	f008 ff7c 	bl	5074c <z_device_is_ready>

    if (!device_is_ready(adc)) {
   47854:	b1e0      	cbz	r0, 47890 <vddh_init+0x48>
        LOG_ERR("ADC device is not ready %s", adc->name);
        return -ENODEV;
    }

    drv_data->as = (struct adc_sequence){
   47856:	2214      	movs	r2, #20
   47858:	2100      	movs	r1, #0
   4785a:	f104 0008 	add.w	r0, r4, #8
   4785e:	f004 fa06 	bl	4bc6e <memset>
        .channels = BIT(0),
        .buffer = &drv_data->value.adc_raw,
   47862:	f104 021c 	add.w	r2, r4, #28
        .oversampling = 4,
        .calibrate = true,
    };

#ifdef CONFIG_ADC_NRFX_SAADC
    drv_data->acc = (struct adc_channel_cfg){
   47866:	490d      	ldr	r1, [pc, #52]	; (4789c <vddh_init+0x54>)
    drv_data->as = (struct adc_sequence){
   47868:	6122      	str	r2, [r4, #16]
    drv_data->acc = (struct adc_channel_cfg){
   4786a:	f44f 6250 	mov.w	r2, #3328	; 0xd00
   4786e:	e9c4 1200 	strd	r1, r2, [r4]
    drv_data->as = (struct adc_sequence){
   47872:	2202      	movs	r2, #2
   47874:	2301      	movs	r3, #1
   47876:	6162      	str	r2, [r4, #20]
        .reference = ADC_REF_INTERNAL,
        .acquisition_time = ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40),
        .input_positive = SAADC_CH_PSELN_PSELN_VDDHDIV5,
    };

    drv_data->as.resolution = 12;
   47878:	f240 420c 	movw	r2, #1036	; 0x40c
    drv_data->as = (struct adc_sequence){
   4787c:	60e3      	str	r3, [r4, #12]
    drv_data->as.resolution = 12;
   4787e:	8322      	strh	r2, [r4, #24]
    drv_data->as = (struct adc_sequence){
   47880:	76a3      	strb	r3, [r4, #26]
	return api->channel_setup(dev, channel_cfg);
   47882:	68ab      	ldr	r3, [r5, #8]
   47884:	4621      	mov	r1, r4
   47886:	4628      	mov	r0, r5
   47888:	681b      	ldr	r3, [r3, #0]

    const int rc = adc_channel_setup(adc, &drv_data->acc);
    LOG_DBG("VDDHDIV5 setup returned %d", rc);

    return rc;
}
   4788a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   4788e:	4718      	bx	r3
   47890:	f06f 0012 	mvn.w	r0, #18
   47894:	bd70      	pop	{r4, r5, r6, pc}
   47896:	bf00      	nop
   47898:	00051494 	.word	0x00051494
   4789c:	40280401 	.word	0x40280401

000478a0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   478a0:	4b0e      	ldr	r3, [pc, #56]	; (478dc <z_sys_init_run_level+0x3c>)
{
   478a2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   478a4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   478a8:	3001      	adds	r0, #1
   478aa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   478ae:	42a6      	cmp	r6, r4
   478b0:	d800      	bhi.n	478b4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   478b2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   478b4:	e9d4 3500 	ldrd	r3, r5, [r4]
   478b8:	4628      	mov	r0, r5
   478ba:	4798      	blx	r3
		if (dev != NULL) {
   478bc:	b165      	cbz	r5, 478d8 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   478be:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   478c0:	b130      	cbz	r0, 478d0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   478c2:	2800      	cmp	r0, #0
   478c4:	bfb8      	it	lt
   478c6:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   478c8:	28ff      	cmp	r0, #255	; 0xff
   478ca:	bfa8      	it	ge
   478cc:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   478ce:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   478d0:	785a      	ldrb	r2, [r3, #1]
   478d2:	f042 0201 	orr.w	r2, r2, #1
   478d6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   478d8:	3408      	adds	r4, #8
   478da:	e7e8      	b.n	478ae <z_sys_init_run_level+0xe>
   478dc:	00053b3c 	.word	0x00053b3c

000478e0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   478e0:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   478e2:	4605      	mov	r5, r0
   478e4:	b910      	cbnz	r0, 478ec <z_impl_device_get_binding+0xc>
		return NULL;
   478e6:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   478e8:	4620      	mov	r0, r4
   478ea:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   478ec:	7803      	ldrb	r3, [r0, #0]
   478ee:	2b00      	cmp	r3, #0
   478f0:	d0f9      	beq.n	478e6 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   478f2:	4c0e      	ldr	r4, [pc, #56]	; (4792c <z_impl_device_get_binding+0x4c>)
   478f4:	4e0e      	ldr	r6, [pc, #56]	; (47930 <z_impl_device_get_binding+0x50>)
   478f6:	42b4      	cmp	r4, r6
   478f8:	d108      	bne.n	4790c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   478fa:	4c0c      	ldr	r4, [pc, #48]	; (4792c <z_impl_device_get_binding+0x4c>)
   478fc:	42b4      	cmp	r4, r6
   478fe:	d0f2      	beq.n	478e6 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   47900:	4620      	mov	r0, r4
   47902:	f008 ff23 	bl	5074c <z_device_is_ready>
   47906:	b950      	cbnz	r0, 4791e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   47908:	3418      	adds	r4, #24
   4790a:	e7f7      	b.n	478fc <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   4790c:	4620      	mov	r0, r4
   4790e:	f008 ff1d 	bl	5074c <z_device_is_ready>
   47912:	b110      	cbz	r0, 4791a <z_impl_device_get_binding+0x3a>
   47914:	6823      	ldr	r3, [r4, #0]
   47916:	42ab      	cmp	r3, r5
   47918:	d0e6      	beq.n	478e8 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   4791a:	3418      	adds	r4, #24
   4791c:	e7eb      	b.n	478f6 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   4791e:	6821      	ldr	r1, [r4, #0]
   47920:	4628      	mov	r0, r5
   47922:	f004 f969 	bl	4bbf8 <strcmp>
   47926:	2800      	cmp	r0, #0
   47928:	d1ee      	bne.n	47908 <z_impl_device_get_binding+0x28>
   4792a:	e7dd      	b.n	478e8 <z_impl_device_get_binding+0x8>
   4792c:	0005141c 	.word	0x0005141c
   47930:	000515fc 	.word	0x000515fc

00047934 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   47934:	4b01      	ldr	r3, [pc, #4]	; (4793c <z_impl_z_errno+0x8>)
   47936:	6898      	ldr	r0, [r3, #8]
}
   47938:	3064      	adds	r0, #100	; 0x64
   4793a:	4770      	bx	lr
   4793c:	200071cc 	.word	0x200071cc

00047940 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   47940:	b510      	push	{r4, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   47942:	2300      	movs	r3, #0
{
   47944:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   47946:	2201      	movs	r2, #1
   47948:	e9cd 2304 	strd	r2, r3, [sp, #16]
   4794c:	220f      	movs	r2, #15
   4794e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   47952:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
   47954:	4c0b      	ldr	r4, [pc, #44]	; (47984 <init_idle_thread+0x44>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   47956:	4b0c      	ldr	r3, [pc, #48]	; (47988 <init_idle_thread+0x48>)
	z_setup_new_thread(thread, stack,
   47958:	490c      	ldr	r1, [pc, #48]	; (4798c <init_idle_thread+0x4c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   4795a:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
   4795c:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   47960:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
   47964:	f44f 72a0 	mov.w	r2, #320	; 0x140
   47968:	9300      	str	r3, [sp, #0]
   4796a:	fb02 1100 	mla	r1, r2, r0, r1
   4796e:	4b08      	ldr	r3, [pc, #32]	; (47990 <init_idle_thread+0x50>)
   47970:	4620      	mov	r0, r4
   47972:	f000 f90b 	bl	47b8c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   47976:	7b63      	ldrb	r3, [r4, #13]
   47978:	f023 0304 	bic.w	r3, r3, #4
   4797c:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   4797e:	b006      	add	sp, #24
   47980:	bd10      	pop	{r4, pc}
   47982:	bf00      	nop
   47984:	20003ff8 	.word	0x20003ff8
   47988:	200071cc 	.word	0x200071cc
   4798c:	20009ea8 	.word	0x20009ea8
   47990:	00047cfd 	.word	0x00047cfd

00047994 <bg_thread_main>:
{
   47994:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   47996:	4b0a      	ldr	r3, [pc, #40]	; (479c0 <bg_thread_main+0x2c>)
   47998:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   4799a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   4799c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   4799e:	f7ff ff7f 	bl	478a0 <z_sys_init_run_level>
	boot_banner();
   479a2:	f009 fc9b 	bl	512dc <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   479a6:	2003      	movs	r0, #3
   479a8:	f7ff ff7a 	bl	478a0 <z_sys_init_run_level>
	z_init_static_threads();
   479ac:	f000 f94a 	bl	47c44 <z_init_static_threads>
	main();
   479b0:	f7e2 ff9e 	bl	2a8f0 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   479b4:	4a03      	ldr	r2, [pc, #12]	; (479c4 <bg_thread_main+0x30>)
   479b6:	7b13      	ldrb	r3, [r2, #12]
   479b8:	f023 0301 	bic.w	r3, r3, #1
   479bc:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   479be:	bd08      	pop	{r3, pc}
   479c0:	20007427 	.word	0x20007427
   479c4:	20004078 	.word	0x20004078

000479c8 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   479c8:	4802      	ldr	r0, [pc, #8]	; (479d4 <z_bss_zero+0xc>)
   479ca:	4a03      	ldr	r2, [pc, #12]	; (479d8 <z_bss_zero+0x10>)
   479cc:	2100      	movs	r1, #0
   479ce:	1a12      	subs	r2, r2, r0
   479d0:	f004 b94d 	b.w	4bc6e <memset>
   479d4:	20001510 	.word	0x20001510
   479d8:	20007428 	.word	0x20007428

000479dc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   479dc:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   479de:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 47aa8 <z_cstart+0xcc>
   479e2:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   479e4:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   479e8:	4d30      	ldr	r5, [pc, #192]	; (47aac <z_cstart+0xd0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   479ea:	4e31      	ldr	r6, [pc, #196]	; (47ab0 <z_cstart+0xd4>)
   479ec:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   479ee:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 47ab4 <z_cstart+0xd8>
   479f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   479f6:	2400      	movs	r4, #0
   479f8:	616b      	str	r3, [r5, #20]
   479fa:	23e0      	movs	r3, #224	; 0xe0
   479fc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   47a00:	77ec      	strb	r4, [r5, #31]
   47a02:	762c      	strb	r4, [r5, #24]
   47a04:	766c      	strb	r4, [r5, #25]
   47a06:	76ac      	strb	r4, [r5, #26]
   47a08:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   47a0c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   47a0e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   47a12:	626b      	str	r3, [r5, #36]	; 0x24
   47a14:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   47a18:	f7e5 fab2 	bl	2cf80 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   47a1c:	f7e5 f8a8 	bl	2cb70 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   47a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   47a24:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   47a26:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
   47a28:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   47a2a:	f7e5 fb61 	bl	2d0f0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   47a2e:	f7e5 faef 	bl	2d010 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   47a32:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   47a36:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   47a38:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   47a3c:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   47a40:	f001 fb10 	bl	49064 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   47a44:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   47a46:	f008 fe80 	bl	5074a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   47a4a:	4620      	mov	r0, r4
   47a4c:	f7ff ff28 	bl	478a0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   47a50:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   47a52:	4d19      	ldr	r5, [pc, #100]	; (47ab8 <z_cstart+0xdc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   47a54:	f7ff ff24 	bl	478a0 <z_sys_init_run_level>
	z_sched_init();
   47a58:	f000 ff6c 	bl	48934 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   47a5c:	4b17      	ldr	r3, [pc, #92]	; (47abc <z_cstart+0xe0>)
   47a5e:	9305      	str	r3, [sp, #20]
   47a60:	2301      	movs	r3, #1
   47a62:	4917      	ldr	r1, [pc, #92]	; (47ac0 <z_cstart+0xe4>)
   47a64:	9400      	str	r4, [sp, #0]
   47a66:	e9cd 4303 	strd	r4, r3, [sp, #12]
   47a6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   47a6e:	464b      	mov	r3, r9
   47a70:	e9cd 4401 	strd	r4, r4, [sp, #4]
   47a74:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   47a76:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   47a78:	f000 f888 	bl	47b8c <z_setup_new_thread>
   47a7c:	7b6a      	ldrb	r2, [r5, #13]
   47a7e:	4607      	mov	r7, r0
   47a80:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   47a84:	4628      	mov	r0, r5
   47a86:	736a      	strb	r2, [r5, #13]
   47a88:	f009 f981 	bl	50d8e <z_ready_thread>
		init_idle_thread(i);
   47a8c:	4620      	mov	r0, r4
   47a8e:	f7ff ff57 	bl	47940 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   47a92:	4b0c      	ldr	r3, [pc, #48]	; (47ac4 <z_cstart+0xe8>)
   47a94:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   47a96:	464a      	mov	r2, r9
   47a98:	4639      	mov	r1, r7
   47a9a:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   47a9c:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   47a9e:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   47aa2:	f7e5 f96b 	bl	2cd7c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   47aa6:	bf00      	nop
   47aa8:	20009ea8 	.word	0x20009ea8
   47aac:	e000ed00 	.word	0xe000ed00
   47ab0:	200071cc 	.word	0x200071cc
   47ab4:	00047995 	.word	0x00047995
   47ab8:	20004078 	.word	0x20004078
   47abc:	00054392 	.word	0x00054392
   47ac0:	20009fe8 	.word	0x20009fe8
   47ac4:	20003ff8 	.word	0x20003ff8

00047ac8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   47ac8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   47aca:	4c06      	ldr	r4, [pc, #24]	; (47ae4 <statics_init+0x1c>)
   47acc:	4d06      	ldr	r5, [pc, #24]	; (47ae8 <statics_init+0x20>)
   47ace:	42ac      	cmp	r4, r5
   47ad0:	d301      	bcc.n	47ad6 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   47ad2:	2000      	movs	r0, #0
   47ad4:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   47ad6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   47ada:	4620      	mov	r0, r4
   47adc:	f008 fe67 	bl	507ae <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   47ae0:	3414      	adds	r4, #20
   47ae2:	e7f4      	b.n	47ace <statics_init+0x6>
   47ae4:	20001130 	.word	0x20001130
   47ae8:	20001144 	.word	0x20001144

00047aec <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   47aec:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   47aee:	4b0e      	ldr	r3, [pc, #56]	; (47b28 <init_mem_slab_module+0x3c>)
   47af0:	4c0e      	ldr	r4, [pc, #56]	; (47b2c <init_mem_slab_module+0x40>)
   47af2:	42a3      	cmp	r3, r4
   47af4:	d301      	bcc.n	47afa <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   47af6:	2000      	movs	r0, #0
	return rc;
}
   47af8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   47afa:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   47afe:	ea41 0200 	orr.w	r2, r1, r0
   47b02:	f012 0203 	ands.w	r2, r2, #3
   47b06:	d10b      	bne.n	47b20 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   47b08:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   47b0a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   47b0c:	42aa      	cmp	r2, r5
   47b0e:	d101      	bne.n	47b14 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   47b10:	331c      	adds	r3, #28
   47b12:	e7ee      	b.n	47af2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   47b14:	695e      	ldr	r6, [r3, #20]
   47b16:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   47b18:	3201      	adds	r2, #1
		slab->free_list = p;
   47b1a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   47b1c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   47b1e:	e7f5      	b.n	47b0c <init_mem_slab_module+0x20>
	return rc;
   47b20:	f06f 0015 	mvn.w	r0, #21
   47b24:	e7e8      	b.n	47af8 <init_mem_slab_module+0xc>
   47b26:	bf00      	nop
   47b28:	200010c0 	.word	0x200010c0
   47b2c:	20001130 	.word	0x20001130

00047b30 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   47b30:	b573      	push	{r0, r1, r4, r5, r6, lr}
   47b32:	460c      	mov	r4, r1
	__asm__ volatile(
   47b34:	f04f 0520 	mov.w	r5, #32
   47b38:	f3ef 8111 	mrs	r1, BASEPRI
   47b3c:	f385 8812 	msr	BASEPRI_MAX, r5
   47b40:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   47b44:	6945      	ldr	r5, [r0, #20]
   47b46:	b15d      	cbz	r5, 47b60 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   47b48:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   47b4a:	682b      	ldr	r3, [r5, #0]
   47b4c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   47b4e:	6983      	ldr	r3, [r0, #24]
   47b50:	3301      	adds	r3, #1
   47b52:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   47b54:	2000      	movs	r0, #0
	__asm__ volatile(
   47b56:	f381 8811 	msr	BASEPRI, r1
   47b5a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   47b5e:	e011      	b.n	47b84 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   47b60:	ea52 0603 	orrs.w	r6, r2, r3
   47b64:	d103      	bne.n	47b6e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   47b66:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   47b68:	f06f 000b 	mvn.w	r0, #11
   47b6c:	e7f3      	b.n	47b56 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   47b6e:	e9cd 2300 	strd	r2, r3, [sp]
   47b72:	4602      	mov	r2, r0
   47b74:	3008      	adds	r0, #8
   47b76:	f000 fdf1 	bl	4875c <z_pend_curr>
		if (result == 0) {
   47b7a:	b918      	cbnz	r0, 47b84 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   47b7c:	4b02      	ldr	r3, [pc, #8]	; (47b88 <k_mem_slab_alloc+0x58>)
   47b7e:	689b      	ldr	r3, [r3, #8]
   47b80:	695b      	ldr	r3, [r3, #20]
   47b82:	6023      	str	r3, [r4, #0]
}
   47b84:	b002      	add	sp, #8
   47b86:	bd70      	pop	{r4, r5, r6, pc}
   47b88:	200071cc 	.word	0x200071cc

00047b8c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   47b8c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   47b90:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   47b92:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   47b94:	2604      	movs	r6, #4
   47b96:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   47b98:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   47b9a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   47b9c:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   47ba0:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   47ba2:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   47ba6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   47ba8:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   47baa:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   47bae:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   47bb2:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   47bb6:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   47bb8:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   47bba:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   47bbc:	9202      	str	r2, [sp, #8]
   47bbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   47bc0:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   47bc2:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   47bc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   47bc8:	9200      	str	r2, [sp, #0]
   47bca:	4642      	mov	r2, r8
{
   47bcc:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   47bce:	f7e5 f8b9 	bl	2cd44 <arch_new_thread>
	if (!_current) {
   47bd2:	4b05      	ldr	r3, [pc, #20]	; (47be8 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   47bd4:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   47bd6:	689b      	ldr	r3, [r3, #8]
   47bd8:	b103      	cbz	r3, 47bdc <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   47bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   47bdc:	6763      	str	r3, [r4, #116]	; 0x74
}
   47bde:	4640      	mov	r0, r8
   47be0:	b004      	add	sp, #16
   47be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   47be6:	bf00      	nop
   47be8:	200071cc 	.word	0x200071cc

00047bec <z_impl_k_thread_create>:
{
   47bec:	b5f0      	push	{r4, r5, r6, r7, lr}
   47bee:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   47bf0:	2500      	movs	r5, #0
   47bf2:	9505      	str	r5, [sp, #20]
   47bf4:	9d10      	ldr	r5, [sp, #64]	; 0x40
   47bf6:	9504      	str	r5, [sp, #16]
   47bf8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   47bfa:	9503      	str	r5, [sp, #12]
   47bfc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   47bfe:	9502      	str	r5, [sp, #8]
{
   47c00:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   47c04:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   47c06:	9501      	str	r5, [sp, #4]
   47c08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   47c0a:	9500      	str	r5, [sp, #0]
{
   47c0c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   47c0e:	f7ff ffbd 	bl	47b8c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   47c12:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   47c16:	bf08      	it	eq
   47c18:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   47c1c:	d005      	beq.n	47c2a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   47c1e:	ea56 0307 	orrs.w	r3, r6, r7
   47c22:	d105      	bne.n	47c30 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   47c24:	4620      	mov	r0, r4
   47c26:	f000 fe05 	bl	48834 <z_sched_start>
}
   47c2a:	4620      	mov	r0, r4
   47c2c:	b007      	add	sp, #28
   47c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   47c30:	4903      	ldr	r1, [pc, #12]	; (47c40 <z_impl_k_thread_create+0x54>)
   47c32:	463a      	mov	r2, r7
   47c34:	4633      	mov	r3, r6
   47c36:	f104 0018 	add.w	r0, r4, #24
   47c3a:	f001 f803 	bl	48c44 <z_add_timeout>
   47c3e:	e7f4      	b.n	47c2a <z_impl_k_thread_create+0x3e>
   47c40:	00050cfb 	.word	0x00050cfb

00047c44 <z_init_static_threads>:
{
   47c44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   47c48:	4c29      	ldr	r4, [pc, #164]	; (47cf0 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   47c4a:	4d2a      	ldr	r5, [pc, #168]	; (47cf4 <z_init_static_threads+0xb0>)
{
   47c4c:	b087      	sub	sp, #28
   47c4e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   47c50:	42ae      	cmp	r6, r5
   47c52:	f104 0430 	add.w	r4, r4, #48	; 0x30
   47c56:	d30f      	bcc.n	47c78 <z_init_static_threads+0x34>
	k_sched_lock();
   47c58:	f000 fe3c 	bl	488d4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   47c5c:	4c24      	ldr	r4, [pc, #144]	; (47cf0 <z_init_static_threads+0xac>)
   47c5e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 47cf8 <z_init_static_threads+0xb4>
   47c62:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   47c66:	f240 37e7 	movw	r7, #999	; 0x3e7
   47c6a:	42ac      	cmp	r4, r5
   47c6c:	d320      	bcc.n	47cb0 <z_init_static_threads+0x6c>
}
   47c6e:	b007      	add	sp, #28
   47c70:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   47c74:	f000 be42 	b.w	488fc <k_sched_unlock>
		z_setup_new_thread(
   47c78:	f854 3c04 	ldr.w	r3, [r4, #-4]
   47c7c:	9305      	str	r3, [sp, #20]
   47c7e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   47c82:	9304      	str	r3, [sp, #16]
   47c84:	f854 3c14 	ldr.w	r3, [r4, #-20]
   47c88:	9303      	str	r3, [sp, #12]
   47c8a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   47c8e:	9302      	str	r3, [sp, #8]
   47c90:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   47c94:	9301      	str	r3, [sp, #4]
   47c96:	f854 3c20 	ldr.w	r3, [r4, #-32]
   47c9a:	9300      	str	r3, [sp, #0]
   47c9c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   47ca0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   47ca4:	f7ff ff72 	bl	47b8c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   47ca8:	f854 3c30 	ldr.w	r3, [r4, #-48]
   47cac:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   47cae:	e7ce      	b.n	47c4e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   47cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   47cb2:	1c5a      	adds	r2, r3, #1
   47cb4:	d00d      	beq.n	47cd2 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   47cb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   47cba:	2100      	movs	r1, #0
   47cbc:	4638      	mov	r0, r7
   47cbe:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   47cc2:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   47cc6:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   47cca:	d104      	bne.n	47cd6 <z_init_static_threads+0x92>
	z_sched_start(thread);
   47ccc:	4640      	mov	r0, r8
   47cce:	f000 fdb1 	bl	48834 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   47cd2:	3430      	adds	r4, #48	; 0x30
   47cd4:	e7c9      	b.n	47c6a <z_init_static_threads+0x26>
   47cd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   47cda:	2300      	movs	r3, #0
   47cdc:	f7de fa10 	bl	26100 <__aeabi_uldivmod>
   47ce0:	4602      	mov	r2, r0
   47ce2:	460b      	mov	r3, r1
   47ce4:	f108 0018 	add.w	r0, r8, #24
   47ce8:	4649      	mov	r1, r9
   47cea:	f000 ffab 	bl	48c44 <z_add_timeout>
   47cee:	e7f0      	b.n	47cd2 <z_init_static_threads+0x8e>
   47cf0:	20001050 	.word	0x20001050
   47cf4:	20001050 	.word	0x20001050
   47cf8:	00050cfb 	.word	0x00050cfb

00047cfc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   47cfc:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   47cfe:	4c0b      	ldr	r4, [pc, #44]	; (47d2c <idle+0x30>)
	return !z_sys_post_kernel;
   47d00:	4d0b      	ldr	r5, [pc, #44]	; (47d30 <idle+0x34>)
	__asm__ volatile(
   47d02:	f04f 0220 	mov.w	r2, #32
   47d06:	f3ef 8311 	mrs	r3, BASEPRI
   47d0a:	f382 8812 	msr	BASEPRI_MAX, r2
   47d0e:	f3bf 8f6f 	isb	sy
   47d12:	f009 f902 	bl	50f1a <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   47d16:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   47d18:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   47d1a:	b913      	cbnz	r3, 47d22 <idle+0x26>
	arch_cpu_idle();
   47d1c:	f7e4 ff2e 	bl	2cb7c <arch_cpu_idle>
}
   47d20:	e7ef      	b.n	47d02 <idle+0x6>
   47d22:	f7e4 fd2d 	bl	2c780 <pm_system_suspend>
   47d26:	2800      	cmp	r0, #0
   47d28:	d1eb      	bne.n	47d02 <idle+0x6>
   47d2a:	e7f7      	b.n	47d1c <idle+0x20>
   47d2c:	200071cc 	.word	0x200071cc
   47d30:	20007427 	.word	0x20007427

00047d34 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   47d34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   47d38:	4604      	mov	r4, r0
   47d3a:	460e      	mov	r6, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   47d3c:	f100 0808 	add.w	r8, r0, #8
   47d40:	f04f 0120 	mov.w	r1, #32
   47d44:	f3ef 8711 	mrs	r7, BASEPRI
   47d48:	f381 8812 	msr	BASEPRI_MAX, r1
   47d4c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   47d50:	6a05      	ldr	r5, [r0, #32]
   47d52:	68c1      	ldr	r1, [r0, #12]
   47d54:	428d      	cmp	r5, r1
   47d56:	d22f      	bcs.n	47db8 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   47d58:	f009 f850 	bl	50dfc <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   47d5c:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   47d5e:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   47d60:	4631      	mov	r1, r6
		if (pending_thread != NULL) {
   47d62:	b178      	cbz	r0, 47d84 <z_impl_k_msgq_put+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   47d64:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
   47d66:	6940      	ldr	r0, [r0, #20]
   47d68:	f003 ff76 	bl	4bc58 <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   47d6c:	4628      	mov	r0, r5
   47d6e:	67ec      	str	r4, [r5, #124]	; 0x7c
   47d70:	f009 f80d 	bl	50d8e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   47d74:	4640      	mov	r0, r8
   47d76:	4639      	mov	r1, r7
   47d78:	f000 fd4a 	bl	48810 <z_reschedule>
			return 0;
   47d7c:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   47d7e:	b002      	add	sp, #8
   47d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   47d84:	69e0      	ldr	r0, [r4, #28]
   47d86:	f003 ff67 	bl	4bc58 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   47d8a:	69e3      	ldr	r3, [r4, #28]
   47d8c:	68a2      	ldr	r2, [r4, #8]
   47d8e:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   47d90:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   47d92:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   47d94:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   47d96:	bf04      	itt	eq
   47d98:	6923      	ldreq	r3, [r4, #16]
   47d9a:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   47d9c:	6a23      	ldr	r3, [r4, #32]
   47d9e:	3301      	adds	r3, #1
	z_handle_obj_poll_events(&msgq->poll_events, state);
   47da0:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->used_msgs++;
   47da4:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   47da6:	2110      	movs	r1, #16
   47da8:	f009 fa6c 	bl	51284 <z_handle_obj_poll_events>
		result = 0;
   47dac:	2000      	movs	r0, #0
	__asm__ volatile(
   47dae:	f387 8811 	msr	BASEPRI, r7
   47db2:	f3bf 8f6f 	isb	sy
	return result;
   47db6:	e7e2      	b.n	47d7e <z_impl_k_msgq_put+0x4a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   47db8:	ea52 0103 	orrs.w	r1, r2, r3
   47dbc:	d00a      	beq.n	47dd4 <z_impl_k_msgq_put+0xa0>
		_current->base.swap_data = (void *) data;
   47dbe:	4907      	ldr	r1, [pc, #28]	; (47ddc <z_impl_k_msgq_put+0xa8>)
   47dc0:	6889      	ldr	r1, [r1, #8]
   47dc2:	614e      	str	r6, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   47dc4:	e9cd 2300 	strd	r2, r3, [sp]
   47dc8:	4639      	mov	r1, r7
   47dca:	4602      	mov	r2, r0
   47dcc:	4640      	mov	r0, r8
   47dce:	f000 fcc5 	bl	4875c <z_pend_curr>
		return result;
   47dd2:	e7d4      	b.n	47d7e <z_impl_k_msgq_put+0x4a>
		result = -ENOMSG;
   47dd4:	f06f 0022 	mvn.w	r0, #34	; 0x22
   47dd8:	e7e9      	b.n	47dae <z_impl_k_msgq_put+0x7a>
   47dda:	bf00      	nop
   47ddc:	200071cc 	.word	0x200071cc

00047de0 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   47de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   47de2:	4604      	mov	r4, r0

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   47de4:	f104 0708 	add.w	r7, r4, #8
{
   47de8:	4608      	mov	r0, r1
	__asm__ volatile(
   47dea:	f04f 0120 	mov.w	r1, #32
   47dee:	f3ef 8611 	mrs	r6, BASEPRI
   47df2:	f381 8812 	msr	BASEPRI_MAX, r1
   47df6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   47dfa:	6a21      	ldr	r1, [r4, #32]
   47dfc:	2900      	cmp	r1, #0
   47dfe:	d031      	beq.n	47e64 <z_impl_k_msgq_get+0x84>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   47e00:	68a2      	ldr	r2, [r4, #8]
   47e02:	69a1      	ldr	r1, [r4, #24]
   47e04:	f003 ff28 	bl	4bc58 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   47e08:	69a3      	ldr	r3, [r4, #24]
   47e0a:	68a2      	ldr	r2, [r4, #8]
   47e0c:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   47e0e:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   47e10:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   47e12:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   47e14:	bf04      	itt	eq
   47e16:	6923      	ldreq	r3, [r4, #16]
   47e18:	61a3      	streq	r3, [r4, #24]
		}
		msgq->used_msgs--;
   47e1a:	6a23      	ldr	r3, [r4, #32]
   47e1c:	3b01      	subs	r3, #1
   47e1e:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   47e20:	4620      	mov	r0, r4
   47e22:	f008 ffeb 	bl	50dfc <z_unpend_first_thread>
		if (pending_thread != NULL) {
   47e26:	4605      	mov	r5, r0
   47e28:	b360      	cbz	r0, 47e84 <z_impl_k_msgq_get+0xa4>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   47e2a:	6941      	ldr	r1, [r0, #20]
   47e2c:	68a2      	ldr	r2, [r4, #8]
   47e2e:	69e0      	ldr	r0, [r4, #28]
   47e30:	f003 ff12 	bl	4bc58 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   47e34:	69e3      	ldr	r3, [r4, #28]
   47e36:	68a2      	ldr	r2, [r4, #8]
   47e38:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   47e3a:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   47e3c:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   47e3e:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   47e40:	bf04      	itt	eq
   47e42:	6923      	ldreq	r3, [r4, #16]
   47e44:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   47e46:	6a23      	ldr	r3, [r4, #32]
   47e48:	3301      	adds	r3, #1
   47e4a:	6223      	str	r3, [r4, #32]
   47e4c:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   47e4e:	4628      	mov	r0, r5
   47e50:	67ec      	str	r4, [r5, #124]	; 0x7c
   47e52:	f008 ff9c 	bl	50d8e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   47e56:	4638      	mov	r0, r7
   47e58:	4631      	mov	r1, r6
   47e5a:	f000 fcd9 	bl	48810 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   47e5e:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   47e60:	b003      	add	sp, #12
   47e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   47e64:	ea52 0103 	orrs.w	r1, r2, r3
   47e68:	d00a      	beq.n	47e80 <z_impl_k_msgq_get+0xa0>
		_current->base.swap_data = data;
   47e6a:	4909      	ldr	r1, [pc, #36]	; (47e90 <z_impl_k_msgq_get+0xb0>)
   47e6c:	6889      	ldr	r1, [r1, #8]
   47e6e:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   47e70:	e9cd 2300 	strd	r2, r3, [sp]
   47e74:	4631      	mov	r1, r6
   47e76:	4622      	mov	r2, r4
   47e78:	4638      	mov	r0, r7
   47e7a:	f000 fc6f 	bl	4875c <z_pend_curr>
		return result;
   47e7e:	e7ef      	b.n	47e60 <z_impl_k_msgq_get+0x80>
		result = -ENOMSG;
   47e80:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   47e84:	f386 8811 	msr	BASEPRI, r6
   47e88:	f3bf 8f6f 	isb	sy
	return result;
   47e8c:	e7e8      	b.n	47e60 <z_impl_k_msgq_get+0x80>
   47e8e:	bf00      	nop
   47e90:	200071cc 	.word	0x200071cc

00047e94 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   47e94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   47e98:	4604      	mov	r4, r0
   47e9a:	4617      	mov	r7, r2
   47e9c:	461e      	mov	r6, r3
	__asm__ volatile(
   47e9e:	f04f 0320 	mov.w	r3, #32
   47ea2:	f3ef 8811 	mrs	r8, BASEPRI
   47ea6:	f383 8812 	msr	BASEPRI_MAX, r3
   47eaa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   47eae:	68c3      	ldr	r3, [r0, #12]
   47eb0:	4a32      	ldr	r2, [pc, #200]	; (47f7c <z_impl_k_mutex_lock+0xe8>)
   47eb2:	b17b      	cbz	r3, 47ed4 <z_impl_k_mutex_lock+0x40>
   47eb4:	6880      	ldr	r0, [r0, #8]
   47eb6:	6891      	ldr	r1, [r2, #8]
   47eb8:	4288      	cmp	r0, r1
   47eba:	d019      	beq.n	47ef0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   47ebc:	ea57 0306 	orrs.w	r3, r7, r6
   47ec0:	d118      	bne.n	47ef4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   47ec2:	f388 8811 	msr	BASEPRI, r8
   47ec6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   47eca:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   47ece:	b002      	add	sp, #8
   47ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   47ed4:	6891      	ldr	r1, [r2, #8]
   47ed6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   47eda:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   47edc:	3301      	adds	r3, #1
   47ede:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   47ee0:	6893      	ldr	r3, [r2, #8]
   47ee2:	60a3      	str	r3, [r4, #8]
   47ee4:	f388 8811 	msr	BASEPRI, r8
   47ee8:	f3bf 8f6f 	isb	sy
		return 0;
   47eec:	2000      	movs	r0, #0
   47eee:	e7ee      	b.n	47ece <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   47ef0:	6921      	ldr	r1, [r4, #16]
   47ef2:	e7f2      	b.n	47eda <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   47ef4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   47ef8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   47efc:	4299      	cmp	r1, r3
   47efe:	bfa8      	it	ge
   47f00:	4619      	movge	r1, r3
   47f02:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   47f06:	4291      	cmp	r1, r2
   47f08:	bfb8      	it	lt
   47f0a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   47f0c:	428b      	cmp	r3, r1
   47f0e:	dd2e      	ble.n	47f6e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   47f10:	f008 fcee 	bl	508f0 <adjust_owner_prio.isra.0>
   47f14:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   47f16:	e9cd 7600 	strd	r7, r6, [sp]
   47f1a:	4819      	ldr	r0, [pc, #100]	; (47f80 <z_impl_k_mutex_lock+0xec>)
   47f1c:	4622      	mov	r2, r4
   47f1e:	4641      	mov	r1, r8
   47f20:	f000 fc1c 	bl	4875c <z_pend_curr>
	if (got_mutex == 0) {
   47f24:	2800      	cmp	r0, #0
   47f26:	d0e1      	beq.n	47eec <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   47f28:	f04f 0320 	mov.w	r3, #32
   47f2c:	f3ef 8611 	mrs	r6, BASEPRI
   47f30:	f383 8812 	msr	BASEPRI_MAX, r3
   47f34:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   47f38:	6823      	ldr	r3, [r4, #0]
   47f3a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   47f3c:	429c      	cmp	r4, r3
   47f3e:	d00a      	beq.n	47f56 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   47f40:	b14b      	cbz	r3, 47f56 <z_impl_k_mutex_lock+0xc2>
   47f42:	f993 300e 	ldrsb.w	r3, [r3, #14]
   47f46:	4299      	cmp	r1, r3
   47f48:	bfa8      	it	ge
   47f4a:	4619      	movge	r1, r3
   47f4c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   47f50:	4299      	cmp	r1, r3
   47f52:	bfb8      	it	lt
   47f54:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   47f56:	68a0      	ldr	r0, [r4, #8]
   47f58:	f008 fcca 	bl	508f0 <adjust_owner_prio.isra.0>
   47f5c:	b948      	cbnz	r0, 47f72 <z_impl_k_mutex_lock+0xde>
   47f5e:	b945      	cbnz	r5, 47f72 <z_impl_k_mutex_lock+0xde>
	__asm__ volatile(
   47f60:	f386 8811 	msr	BASEPRI, r6
   47f64:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   47f68:	f06f 000a 	mvn.w	r0, #10
   47f6c:	e7af      	b.n	47ece <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   47f6e:	2500      	movs	r5, #0
   47f70:	e7d1      	b.n	47f16 <z_impl_k_mutex_lock+0x82>
		z_reschedule(&lock, key);
   47f72:	4803      	ldr	r0, [pc, #12]	; (47f80 <z_impl_k_mutex_lock+0xec>)
   47f74:	4631      	mov	r1, r6
   47f76:	f000 fc4b 	bl	48810 <z_reschedule>
   47f7a:	e7f5      	b.n	47f68 <z_impl_k_mutex_lock+0xd4>
   47f7c:	200071cc 	.word	0x200071cc
   47f80:	20007428 	.word	0x20007428

00047f84 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   47f84:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   47f86:	6883      	ldr	r3, [r0, #8]
{
   47f88:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   47f8a:	2b00      	cmp	r3, #0
   47f8c:	d032      	beq.n	47ff4 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   47f8e:	4a1c      	ldr	r2, [pc, #112]	; (48000 <z_impl_k_mutex_unlock+0x7c>)
   47f90:	6892      	ldr	r2, [r2, #8]
   47f92:	4293      	cmp	r3, r2
   47f94:	d131      	bne.n	47ffa <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   47f96:	7bda      	ldrb	r2, [r3, #15]
   47f98:	3a01      	subs	r2, #1
   47f9a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   47f9c:	68c3      	ldr	r3, [r0, #12]
   47f9e:	2b01      	cmp	r3, #1
   47fa0:	d905      	bls.n	47fae <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   47fa2:	3b01      	subs	r3, #1
   47fa4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   47fa6:	f000 fca9 	bl	488fc <k_sched_unlock>

	return 0;
   47faa:	2000      	movs	r0, #0
}
   47fac:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   47fae:	f04f 0320 	mov.w	r3, #32
   47fb2:	f3ef 8511 	mrs	r5, BASEPRI
   47fb6:	f383 8812 	msr	BASEPRI_MAX, r3
   47fba:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   47fbe:	6901      	ldr	r1, [r0, #16]
   47fc0:	6880      	ldr	r0, [r0, #8]
   47fc2:	f008 fc95 	bl	508f0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   47fc6:	4620      	mov	r0, r4
   47fc8:	f008 ff18 	bl	50dfc <z_unpend_first_thread>
	mutex->owner = new_owner;
   47fcc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   47fce:	b158      	cbz	r0, 47fe8 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   47fd0:	f990 200e 	ldrsb.w	r2, [r0, #14]
   47fd4:	6122      	str	r2, [r4, #16]
   47fd6:	2200      	movs	r2, #0
   47fd8:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   47fda:	f008 fed8 	bl	50d8e <z_ready_thread>
		z_reschedule(&lock, key);
   47fde:	4809      	ldr	r0, [pc, #36]	; (48004 <z_impl_k_mutex_unlock+0x80>)
   47fe0:	4629      	mov	r1, r5
   47fe2:	f000 fc15 	bl	48810 <z_reschedule>
   47fe6:	e7de      	b.n	47fa6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   47fe8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   47fea:	f385 8811 	msr	BASEPRI, r5
   47fee:	f3bf 8f6f 	isb	sy
   47ff2:	e7d8      	b.n	47fa6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   47ff4:	f06f 0015 	mvn.w	r0, #21
   47ff8:	e7d8      	b.n	47fac <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   47ffa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   47ffe:	e7d5      	b.n	47fac <z_impl_k_mutex_unlock+0x28>
   48000:	200071cc 	.word	0x200071cc
   48004:	20007428 	.word	0x20007428

00048008 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   48008:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4800a:	4611      	mov	r1, r2
	__asm__ volatile(
   4800c:	f04f 0220 	mov.w	r2, #32
   48010:	f3ef 8511 	mrs	r5, BASEPRI
   48014:	f382 8812 	msr	BASEPRI_MAX, r2
   48018:	f3bf 8f6f 	isb	sy
   4801c:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   4801e:	b19c      	cbz	r4, 48048 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   48020:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   48022:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   48024:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   48028:	4294      	cmp	r4, r2
	list->head = node;
   4802a:	6003      	str	r3, [r0, #0]
	list->tail = node;
   4802c:	bf08      	it	eq
   4802e:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   48030:	2101      	movs	r1, #1
   48032:	4620      	mov	r0, r4
   48034:	f008 fcd1 	bl	509da <z_queue_node_peek>
   48038:	4604      	mov	r4, r0
	__asm__ volatile(
   4803a:	f385 8811 	msr	BASEPRI, r5
   4803e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   48042:	4620      	mov	r0, r4
   48044:	b003      	add	sp, #12
   48046:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   48048:	ea51 0203 	orrs.w	r2, r1, r3
   4804c:	d0f5      	beq.n	4803a <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   4804e:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   48052:	e9cd 1300 	strd	r1, r3, [sp]
   48056:	4610      	mov	r0, r2
   48058:	4629      	mov	r1, r5
   4805a:	f000 fb7f 	bl	4875c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   4805e:	2800      	cmp	r0, #0
   48060:	d1ef      	bne.n	48042 <z_impl_k_queue_get+0x3a>
   48062:	4b02      	ldr	r3, [pc, #8]	; (4806c <z_impl_k_queue_get+0x64>)
   48064:	689b      	ldr	r3, [r3, #8]
   48066:	695c      	ldr	r4, [r3, #20]
   48068:	e7eb      	b.n	48042 <z_impl_k_queue_get+0x3a>
   4806a:	bf00      	nop
   4806c:	200071cc 	.word	0x200071cc

00048070 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   48070:	b538      	push	{r3, r4, r5, lr}
   48072:	4604      	mov	r4, r0
	__asm__ volatile(
   48074:	f04f 0320 	mov.w	r3, #32
   48078:	f3ef 8511 	mrs	r5, BASEPRI
   4807c:	f383 8812 	msr	BASEPRI_MAX, r3
   48080:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   48084:	f008 feba 	bl	50dfc <z_unpend_first_thread>

	if (thread != NULL) {
   48088:	b148      	cbz	r0, 4809e <z_impl_k_sem_give+0x2e>
   4808a:	2200      	movs	r2, #0
   4808c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   4808e:	f008 fe7e 	bl	50d8e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   48092:	4629      	mov	r1, r5
   48094:	4808      	ldr	r0, [pc, #32]	; (480b8 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   48096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   4809a:	f000 bbb9 	b.w	48810 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   4809e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   480a2:	429a      	cmp	r2, r3
   480a4:	bf18      	it	ne
   480a6:	3301      	addne	r3, #1
   480a8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   480aa:	2102      	movs	r1, #2
   480ac:	f104 0010 	add.w	r0, r4, #16
   480b0:	f009 f8e8 	bl	51284 <z_handle_obj_poll_events>
}
   480b4:	e7ed      	b.n	48092 <z_impl_k_sem_give+0x22>
   480b6:	bf00      	nop
   480b8:	20007428 	.word	0x20007428

000480bc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   480bc:	b513      	push	{r0, r1, r4, lr}
   480be:	f04f 0420 	mov.w	r4, #32
   480c2:	f3ef 8111 	mrs	r1, BASEPRI
   480c6:	f384 8812 	msr	BASEPRI_MAX, r4
   480ca:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   480ce:	6884      	ldr	r4, [r0, #8]
   480d0:	b144      	cbz	r4, 480e4 <z_impl_k_sem_take+0x28>
		sem->count--;
   480d2:	3c01      	subs	r4, #1
   480d4:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   480d6:	f381 8811 	msr	BASEPRI, r1
   480da:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   480de:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   480e0:	b002      	add	sp, #8
   480e2:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   480e4:	ea52 0403 	orrs.w	r4, r2, r3
   480e8:	d106      	bne.n	480f8 <z_impl_k_sem_take+0x3c>
   480ea:	f381 8811 	msr	BASEPRI, r1
   480ee:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   480f2:	f06f 000f 	mvn.w	r0, #15
   480f6:	e7f3      	b.n	480e0 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   480f8:	e9cd 2300 	strd	r2, r3, [sp]
   480fc:	4602      	mov	r2, r0
   480fe:	4802      	ldr	r0, [pc, #8]	; (48108 <z_impl_k_sem_take+0x4c>)
   48100:	f000 fb2c 	bl	4875c <z_pend_curr>
	return ret;
   48104:	e7ec      	b.n	480e0 <z_impl_k_sem_take+0x24>
   48106:	bf00      	nop
   48108:	20007428 	.word	0x20007428

0004810c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   4810c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   4810e:	4b09      	ldr	r3, [pc, #36]	; (48134 <k_sys_work_q_init+0x28>)
   48110:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   48112:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   48114:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   48116:	9300      	str	r3, [sp, #0]
   48118:	4907      	ldr	r1, [pc, #28]	; (48138 <k_sys_work_q_init+0x2c>)
   4811a:	4808      	ldr	r0, [pc, #32]	; (4813c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   4811c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   48120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   48124:	f44f 6200 	mov.w	r2, #2048	; 0x800
   48128:	f000 f92c 	bl	48384 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   4812c:	4620      	mov	r0, r4
   4812e:	b004      	add	sp, #16
   48130:	bd10      	pop	{r4, pc}
   48132:	bf00      	nop
   48134:	00054397 	.word	0x00054397
   48138:	2000a3e8 	.word	0x2000a3e8
   4813c:	200040f8 	.word	0x200040f8

00048140 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   48140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   48144:	f8df 913c 	ldr.w	r9, [pc, #316]	; 48284 <work_queue_main+0x144>
   48148:	b085      	sub	sp, #20
   4814a:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   4814c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   48150:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	__asm__ volatile(
   48154:	f04f 0320 	mov.w	r3, #32
   48158:	f3ef 8811 	mrs	r8, BASEPRI
   4815c:	f383 8812 	msr	BASEPRI_MAX, r3
   48160:	f3bf 8f6f 	isb	sy
   48164:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   48168:	b98d      	cbnz	r5, 4818e <work_queue_main+0x4e>
		} else if (flag_test_and_clear(&queue->flags,
   4816a:	2102      	movs	r1, #2
   4816c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   48170:	f008 fcaf 	bl	50ad2 <flag_test_and_clear>
   48174:	2800      	cmp	r0, #0
   48176:	d143      	bne.n	48200 <work_queue_main+0xc0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   48178:	2300      	movs	r3, #0
   4817a:	e9cd 6700 	strd	r6, r7, [sp]
   4817e:	9302      	str	r3, [sp, #8]
   48180:	f104 0288 	add.w	r2, r4, #136	; 0x88
   48184:	4641      	mov	r1, r8
   48186:	4840      	ldr	r0, [pc, #256]	; (48288 <work_queue_main+0x148>)
   48188:	f000 fce4 	bl	48b54 <z_sched_wait>
			continue;
   4818c:	e7e2      	b.n	48154 <work_queue_main+0x14>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4818e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   48192:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   48194:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   48198:	4295      	cmp	r5, r2
	list->tail = node;
   4819a:	bf08      	it	eq
   4819c:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   481a0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   481a4:	f043 0302 	orr.w	r3, r3, #2
   481a8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   481ac:	68eb      	ldr	r3, [r5, #12]
   481ae:	f023 0304 	bic.w	r3, r3, #4
   481b2:	f043 0301 	orr.w	r3, r3, #1
   481b6:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   481b8:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   481ba:	f388 8811 	msr	BASEPRI, r8
   481be:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   481c2:	4628      	mov	r0, r5
   481c4:	4798      	blx	r3
	__asm__ volatile(
   481c6:	f04f 0320 	mov.w	r3, #32
   481ca:	f3ef 8b11 	mrs	fp, BASEPRI
   481ce:	f383 8812 	msr	BASEPRI_MAX, r3
   481d2:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   481d6:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   481d8:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   481da:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   481de:	d419      	bmi.n	48214 <work_queue_main+0xd4>
	*flagp &= ~BIT(bit);
   481e0:	60ea      	str	r2, [r5, #12]
   481e2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   481e6:	f023 0302 	bic.w	r3, r3, #2
   481ea:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   481ee:	f38b 8811 	msr	BASEPRI, fp
   481f2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   481f6:	05db      	lsls	r3, r3, #23
   481f8:	d4ac      	bmi.n	48154 <work_queue_main+0x14>
	z_impl_k_yield();
   481fa:	f000 fba7 	bl	4894c <z_impl_k_yield>
}
   481fe:	e7a9      	b.n	48154 <work_queue_main+0x14>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   48200:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   48204:	2200      	movs	r2, #0
   48206:	2101      	movs	r1, #1
   48208:	4628      	mov	r0, r5
   4820a:	f008 fe4d 	bl	50ea8 <z_sched_wake>
   4820e:	2800      	cmp	r0, #0
   48210:	d1f8      	bne.n	48204 <work_queue_main+0xc4>
   48212:	e7b1      	b.n	48178 <work_queue_main+0x38>
	*flagp &= ~BIT(bit);
   48214:	f023 0303 	bic.w	r3, r3, #3
   48218:	60eb      	str	r3, [r5, #12]
	return list->head;
   4821a:	f8d9 3000 	ldr.w	r3, [r9]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   4821e:	2b00      	cmp	r3, #0
   48220:	d0df      	beq.n	481e2 <work_queue_main+0xa2>
	return node->next;
   48222:	f04f 0800 	mov.w	r8, #0
   48226:	f8d3 a000 	ldr.w	sl, [r3]
	parent->next = child;
   4822a:	4641      	mov	r1, r8
   4822c:	2b00      	cmp	r3, #0
   4822e:	d0d8      	beq.n	481e2 <work_queue_main+0xa2>
		if (wc->work == work) {
   48230:	685a      	ldr	r2, [r3, #4]
   48232:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   48234:	4618      	mov	r0, r3
		if (wc->work == work) {
   48236:	d112      	bne.n	4825e <work_queue_main+0x11e>
	return node->next;
   48238:	681a      	ldr	r2, [r3, #0]
	return list->tail;
   4823a:	f8d9 0004 	ldr.w	r0, [r9, #4]
Z_GENLIST_REMOVE(slist, snode)
   4823e:	f1b8 0f00 	cmp.w	r8, #0
   48242:	d115      	bne.n	48270 <work_queue_main+0x130>
   48244:	4283      	cmp	r3, r0
	list->head = node;
   48246:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
   4824a:	d101      	bne.n	48250 <work_queue_main+0x110>
	list->tail = node;
   4824c:	f8c9 2004 	str.w	r2, [r9, #4]
	parent->next = child;
   48250:	4618      	mov	r0, r3
   48252:	f840 1b08 	str.w	r1, [r0], #8
	z_impl_k_sem_give(sem);
   48256:	f7ff ff0b 	bl	48070 <z_impl_k_sem_give>
}
   4825a:	4640      	mov	r0, r8
   4825c:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   4825e:	f1ba 0f00 	cmp.w	sl, #0
   48262:	d00c      	beq.n	4827e <work_queue_main+0x13e>
	return node->next;
   48264:	f8da 2000 	ldr.w	r2, [sl]
   48268:	4653      	mov	r3, sl
   4826a:	4680      	mov	r8, r0
   4826c:	4692      	mov	sl, r2
   4826e:	e7dd      	b.n	4822c <work_queue_main+0xec>
Z_GENLIST_REMOVE(slist, snode)
   48270:	4283      	cmp	r3, r0
	parent->next = child;
   48272:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
   48276:	bf08      	it	eq
   48278:	f8c9 8004 	streq.w	r8, [r9, #4]
}
   4827c:	e7e8      	b.n	48250 <work_queue_main+0x110>
   4827e:	4652      	mov	r2, sl
   48280:	e7f2      	b.n	48268 <work_queue_main+0x128>
   48282:	bf00      	nop
   48284:	200071f4 	.word	0x200071f4
   48288:	20007428 	.word	0x20007428

0004828c <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   4828c:	68c3      	ldr	r3, [r0, #12]
{
   4828e:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   48290:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   48294:	079b      	lsls	r3, r3, #30
{
   48296:	4605      	mov	r5, r0
   48298:	460c      	mov	r4, r1
	if (ret) {
   4829a:	d50d      	bpl.n	482b8 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   4829c:	2201      	movs	r2, #1
   4829e:	2100      	movs	r1, #0
   482a0:	f104 0008 	add.w	r0, r4, #8
   482a4:	f008 fc05 	bl	50ab2 <z_impl_k_sem_init>
	parent->next = child;
   482a8:	2300      	movs	r3, #0
   482aa:	6023      	str	r3, [r4, #0]
	return list->tail;
   482ac:	4b05      	ldr	r3, [pc, #20]	; (482c4 <cancel_sync_locked+0x38>)
	canceler->work = work;
   482ae:	6065      	str	r5, [r4, #4]
   482b0:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   482b2:	b91a      	cbnz	r2, 482bc <cancel_sync_locked+0x30>
	list->head = node;
   482b4:	e9c3 4400 	strd	r4, r4, [r3]
}
   482b8:	4630      	mov	r0, r6
   482ba:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   482bc:	6014      	str	r4, [r2, #0]
	list->tail = node;
   482be:	605c      	str	r4, [r3, #4]
}
   482c0:	e7fa      	b.n	482b8 <cancel_sync_locked+0x2c>
   482c2:	bf00      	nop
   482c4:	200071f4 	.word	0x200071f4

000482c8 <submit_to_queue_locked>:
{
   482c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   482ca:	68c3      	ldr	r3, [r0, #12]
{
   482cc:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   482ce:	0799      	lsls	r1, r3, #30
{
   482d0:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   482d2:	f3c3 0640 	ubfx	r6, r3, #1, #1
   482d6:	d42b      	bmi.n	48330 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   482d8:	075a      	lsls	r2, r3, #29
   482da:	d419      	bmi.n	48310 <submit_to_queue_locked+0x48>
		if (*queuep == NULL) {
   482dc:	683a      	ldr	r2, [r7, #0]
   482de:	b90a      	cbnz	r2, 482e4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   482e0:	6882      	ldr	r2, [r0, #8]
   482e2:	603a      	str	r2, [r7, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   482e4:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   482e6:	bf44      	itt	mi
   482e8:	68a3      	ldrmi	r3, [r4, #8]
   482ea:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   482ec:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   482ee:	bf4c      	ite	mi
   482f0:	2602      	movmi	r6, #2
		ret = 1;
   482f2:	2601      	movpl	r6, #1
	if (queue == NULL) {
   482f4:	2d00      	cmp	r5, #0
   482f6:	d03a      	beq.n	4836e <submit_to_queue_locked+0xa6>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   482f8:	4b1e      	ldr	r3, [pc, #120]	; (48374 <submit_to_queue_locked+0xac>)
   482fa:	689b      	ldr	r3, [r3, #8]
   482fc:	42ab      	cmp	r3, r5
   482fe:	d00a      	beq.n	48316 <submit_to_queue_locked+0x4e>
	return (*flagp & BIT(bit)) != 0U;
   48300:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   48304:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   48306:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   4830a:	d414      	bmi.n	48336 <submit_to_queue_locked+0x6e>
		ret = -EBUSY;
   4830c:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   48310:	2300      	movs	r3, #0
   48312:	603b      	str	r3, [r7, #0]
	return ret;
   48314:	e025      	b.n	48362 <submit_to_queue_locked+0x9a>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   48316:	f008 fad9 	bl	508cc <k_is_in_isr>
   4831a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   4831e:	2800      	cmp	r0, #0
   48320:	d1f0      	bne.n	48304 <submit_to_queue_locked+0x3c>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   48322:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   48324:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   48328:	d5f0      	bpl.n	4830c <submit_to_queue_locked+0x44>
	} else if (plugged && !draining) {
   4832a:	b152      	cbz	r2, 48342 <submit_to_queue_locked+0x7a>
   4832c:	075b      	lsls	r3, r3, #29
   4832e:	d408      	bmi.n	48342 <submit_to_queue_locked+0x7a>
		ret = -EBUSY;
   48330:	f06f 060f 	mvn.w	r6, #15
   48334:	e7ec      	b.n	48310 <submit_to_queue_locked+0x48>
	} else if (draining && !chained) {
   48336:	2a00      	cmp	r2, #0
   48338:	d1fa      	bne.n	48330 <submit_to_queue_locked+0x68>
	return (*flagp & BIT(bit)) != 0U;
   4833a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   4833e:	2b00      	cmp	r3, #0
   48340:	d1f6      	bne.n	48330 <submit_to_queue_locked+0x68>
	parent->next = child;
   48342:	2300      	movs	r3, #0
   48344:	6023      	str	r3, [r4, #0]
	return list->tail;
   48346:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   4834a:	b963      	cbnz	r3, 48366 <submit_to_queue_locked+0x9e>
	list->head = node;
   4834c:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   48350:	4628      	mov	r0, r5
   48352:	f008 fbd7 	bl	50b04 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   48356:	68e3      	ldr	r3, [r4, #12]
   48358:	f043 0304 	orr.w	r3, r3, #4
   4835c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   4835e:	683b      	ldr	r3, [r7, #0]
   48360:	60a3      	str	r3, [r4, #8]
}
   48362:	4630      	mov	r0, r6
   48364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   48366:	601c      	str	r4, [r3, #0]
	list->tail = node;
   48368:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   4836c:	e7f0      	b.n	48350 <submit_to_queue_locked+0x88>
		return -EINVAL;
   4836e:	f06f 0615 	mvn.w	r6, #21
   48372:	e7cd      	b.n	48310 <submit_to_queue_locked+0x48>
   48374:	200071cc 	.word	0x200071cc

00048378 <k_work_submit>:
{
   48378:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   4837a:	4801      	ldr	r0, [pc, #4]	; (48380 <k_work_submit+0x8>)
   4837c:	f008 bc32 	b.w	50be4 <k_work_submit_to_queue>
   48380:	200040f8 	.word	0x200040f8

00048384 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   48384:	b5f0      	push	{r4, r5, r6, r7, lr}
   48386:	b089      	sub	sp, #36	; 0x24
   48388:	4604      	mov	r4, r0
	list->head = NULL;
   4838a:	2000      	movs	r0, #0
	list->tail = NULL;
   4838c:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   48390:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   48392:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   48396:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   4839a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   4839e:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   483a2:	b31d      	cbz	r5, 483ec <k_work_queue_start+0x68>
   483a4:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   483a6:	2800      	cmp	r0, #0
   483a8:	f240 1001 	movw	r0, #257	; 0x101
   483ac:	bf08      	it	eq
   483ae:	2001      	moveq	r0, #1
	*flagp = flags;
   483b0:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   483b4:	2000      	movs	r0, #0
   483b6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   483ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   483be:	e9cd 3003 	strd	r3, r0, [sp, #12]
   483c2:	e9cd 0001 	strd	r0, r0, [sp, #4]
   483c6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   483ca:	4b09      	ldr	r3, [pc, #36]	; (483f0 <k_work_queue_start+0x6c>)
   483cc:	9400      	str	r4, [sp, #0]
   483ce:	4620      	mov	r0, r4
   483d0:	f7ff fc0c 	bl	47bec <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   483d4:	b125      	cbz	r5, 483e0 <k_work_queue_start+0x5c>
   483d6:	6829      	ldr	r1, [r5, #0]
   483d8:	b111      	cbz	r1, 483e0 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   483da:	4620      	mov	r0, r4
   483dc:	f008 fa7c 	bl	508d8 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   483e0:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   483e2:	b009      	add	sp, #36	; 0x24
   483e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   483e8:	f008 ba79 	b.w	508de <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   483ec:	2001      	movs	r0, #1
   483ee:	e7df      	b.n	483b0 <k_work_queue_start+0x2c>
   483f0:	00048141 	.word	0x00048141

000483f4 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   483f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   483f6:	9001      	str	r0, [sp, #4]
   483f8:	4608      	mov	r0, r1
	__asm__ volatile(
   483fa:	f04f 0120 	mov.w	r1, #32
   483fe:	f3ef 8411 	mrs	r4, BASEPRI
   48402:	f381 8812 	msr	BASEPRI_MAX, r1
   48406:	f3bf 8f6f 	isb	sy
	return *flagp;
   4840a:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   4840c:	f011 0f0e 	tst.w	r1, #14
   48410:	d116      	bne.n	48440 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   48412:	ea53 0502 	orrs.w	r5, r3, r2
   48416:	d108      	bne.n	4842a <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   48418:	a901      	add	r1, sp, #4
   4841a:	f7ff ff55 	bl	482c8 <submit_to_queue_locked>
	__asm__ volatile(
   4841e:	f384 8811 	msr	BASEPRI, r4
   48422:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   48426:	b003      	add	sp, #12
   48428:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   4842a:	f041 0108 	orr.w	r1, r1, #8
   4842e:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   48430:	9901      	ldr	r1, [sp, #4]
   48432:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   48434:	3010      	adds	r0, #16
   48436:	4903      	ldr	r1, [pc, #12]	; (48444 <k_work_schedule_for_queue+0x50>)
   48438:	f000 fc04 	bl	48c44 <z_add_timeout>
	return ret;
   4843c:	2001      	movs	r0, #1
   4843e:	e7ee      	b.n	4841e <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   48440:	2000      	movs	r0, #0
   48442:	e7ec      	b.n	4841e <k_work_schedule_for_queue+0x2a>
   48444:	00050b75 	.word	0x00050b75

00048448 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   48448:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   4844a:	4801      	ldr	r0, [pc, #4]	; (48450 <k_work_schedule+0x8>)
   4844c:	f7ff bfd2 	b.w	483f4 <k_work_schedule_for_queue>
   48450:	200040f8 	.word	0x200040f8

00048454 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   48454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   48456:	460c      	mov	r4, r1
   48458:	9001      	str	r0, [sp, #4]
   4845a:	4616      	mov	r6, r2
   4845c:	461d      	mov	r5, r3
	__asm__ volatile(
   4845e:	f04f 0320 	mov.w	r3, #32
   48462:	f3ef 8711 	mrs	r7, BASEPRI
   48466:	f383 8812 	msr	BASEPRI_MAX, r3
   4846a:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   4846e:	4608      	mov	r0, r1
   48470:	f008 fb3a 	bl	50ae8 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   48474:	ea55 0306 	orrs.w	r3, r5, r6
   48478:	d109      	bne.n	4848e <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   4847a:	a901      	add	r1, sp, #4
   4847c:	4620      	mov	r0, r4
   4847e:	f7ff ff23 	bl	482c8 <submit_to_queue_locked>
	__asm__ volatile(
   48482:	f387 8811 	msr	BASEPRI, r7
   48486:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   4848a:	b003      	add	sp, #12
   4848c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   4848e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   48490:	4906      	ldr	r1, [pc, #24]	; (484ac <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   48492:	f043 0308 	orr.w	r3, r3, #8
   48496:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   48498:	9b01      	ldr	r3, [sp, #4]
   4849a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   4849c:	f104 0010 	add.w	r0, r4, #16
   484a0:	4632      	mov	r2, r6
   484a2:	462b      	mov	r3, r5
   484a4:	f000 fbce 	bl	48c44 <z_add_timeout>
	return ret;
   484a8:	2001      	movs	r0, #1
   484aa:	e7ea      	b.n	48482 <k_work_reschedule_for_queue+0x2e>
   484ac:	00050b75 	.word	0x00050b75

000484b0 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   484b0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   484b2:	4801      	ldr	r0, [pc, #4]	; (484b8 <k_work_reschedule+0x8>)
   484b4:	f7ff bfce 	b.w	48454 <k_work_reschedule_for_queue>
   484b8:	200040f8 	.word	0x200040f8

000484bc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   484bc:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   484be:	4c08      	ldr	r4, [pc, #32]	; (484e0 <z_reset_time_slice+0x24>)
   484c0:	6823      	ldr	r3, [r4, #0]
   484c2:	b15b      	cbz	r3, 484dc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   484c4:	f7fd fb76 	bl	45bb4 <sys_clock_elapsed>
   484c8:	4603      	mov	r3, r0
   484ca:	6820      	ldr	r0, [r4, #0]
   484cc:	4a05      	ldr	r2, [pc, #20]	; (484e4 <z_reset_time_slice+0x28>)
   484ce:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   484d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   484d4:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   484d6:	2100      	movs	r1, #0
   484d8:	f008 bd2f 	b.w	50f3a <z_set_timeout_expiry>
}
   484dc:	bd10      	pop	{r4, pc}
   484de:	bf00      	nop
   484e0:	20007204 	.word	0x20007204
   484e4:	200071cc 	.word	0x200071cc

000484e8 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   484e8:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   484ea:	4d0c      	ldr	r5, [pc, #48]	; (4851c <update_cache+0x34>)
   484ec:	462b      	mov	r3, r5
   484ee:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   484f2:	429c      	cmp	r4, r3
   484f4:	d000      	beq.n	484f8 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   484f6:	b904      	cbnz	r4, 484fa <update_cache+0x12>
   484f8:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   484fa:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   484fc:	b938      	cbnz	r0, 4850e <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   484fe:	7b5a      	ldrb	r2, [r3, #13]
   48500:	06d2      	lsls	r2, r2, #27
   48502:	d104      	bne.n	4850e <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   48504:	69a2      	ldr	r2, [r4, #24]
   48506:	b912      	cbnz	r2, 4850e <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   48508:	89da      	ldrh	r2, [r3, #14]
   4850a:	2a7f      	cmp	r2, #127	; 0x7f
   4850c:	d804      	bhi.n	48518 <update_cache+0x30>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   4850e:	429c      	cmp	r4, r3
   48510:	d001      	beq.n	48516 <update_cache+0x2e>
			z_reset_time_slice();
   48512:	f7ff ffd3 	bl	484bc <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   48516:	4623      	mov	r3, r4
   48518:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   4851a:	bd38      	pop	{r3, r4, r5, pc}
   4851c:	200071cc 	.word	0x200071cc

00048520 <move_thread_to_end_of_prio_q>:
{
   48520:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   48522:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   48526:	7b43      	ldrb	r3, [r0, #13]
   48528:	2a00      	cmp	r2, #0
{
   4852a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   4852c:	da04      	bge.n	48538 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   4852e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   48532:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   48534:	f008 fbc6 	bl	50cc4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   48538:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   4853a:	4a15      	ldr	r2, [pc, #84]	; (48590 <move_thread_to_end_of_prio_q+0x70>)
   4853c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   48540:	4610      	mov	r0, r2
   48542:	734b      	strb	r3, [r1, #13]
   48544:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   48548:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4854a:	4283      	cmp	r3, r0
   4854c:	bf08      	it	eq
   4854e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   48550:	b923      	cbnz	r3, 4855c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   48552:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   48556:	6021      	str	r1, [r4, #0]
	list->tail = node;
   48558:	6251      	str	r1, [r2, #36]	; 0x24
}
   4855a:	e00c      	b.n	48576 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   4855c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   48560:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   48564:	42b5      	cmp	r5, r6
   48566:	d00e      	beq.n	48586 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   48568:	42ae      	cmp	r6, r5
   4856a:	dd0c      	ble.n	48586 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   4856c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   4856e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   48572:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   48574:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   48576:	6890      	ldr	r0, [r2, #8]
   48578:	1a43      	subs	r3, r0, r1
   4857a:	4258      	negs	r0, r3
}
   4857c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   48580:	4158      	adcs	r0, r3
   48582:	f7ff bfb1 	b.w	484e8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   48586:	429c      	cmp	r4, r3
   48588:	d0e3      	beq.n	48552 <move_thread_to_end_of_prio_q+0x32>
   4858a:	681b      	ldr	r3, [r3, #0]
   4858c:	e7e0      	b.n	48550 <move_thread_to_end_of_prio_q+0x30>
   4858e:	bf00      	nop
   48590:	200071cc 	.word	0x200071cc

00048594 <ready_thread>:
{
   48594:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   48596:	f990 300d 	ldrsb.w	r3, [r0, #13]
   4859a:	7b42      	ldrb	r2, [r0, #13]
   4859c:	2b00      	cmp	r3, #0
   4859e:	db29      	blt.n	485f4 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   485a0:	06d3      	lsls	r3, r2, #27
   485a2:	d127      	bne.n	485f4 <ready_thread+0x60>
	return node->next != NULL;
   485a4:	6983      	ldr	r3, [r0, #24]
   485a6:	bb2b      	cbnz	r3, 485f4 <ready_thread+0x60>
	return list->head == list;
   485a8:	4913      	ldr	r1, [pc, #76]	; (485f8 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   485aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
   485ae:	7342      	strb	r2, [r0, #13]
   485b0:	460a      	mov	r2, r1
   485b2:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   485b6:	4294      	cmp	r4, r2
   485b8:	bf18      	it	ne
   485ba:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   485bc:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   485be:	b923      	cbnz	r3, 485ca <ready_thread+0x36>
	node->prev = tail;
   485c0:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   485c4:	6020      	str	r0, [r4, #0]
	list->tail = node;
   485c6:	6248      	str	r0, [r1, #36]	; 0x24
}
   485c8:	e00c      	b.n	485e4 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   485ca:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   485ce:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   485d2:	42b5      	cmp	r5, r6
   485d4:	d00a      	beq.n	485ec <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   485d6:	42ae      	cmp	r6, r5
   485d8:	dd08      	ble.n	485ec <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   485da:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   485dc:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   485e0:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   485e2:	6058      	str	r0, [r3, #4]
}
   485e4:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   485e6:	2000      	movs	r0, #0
   485e8:	f7ff bf7e 	b.w	484e8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   485ec:	42a3      	cmp	r3, r4
   485ee:	d0e7      	beq.n	485c0 <ready_thread+0x2c>
   485f0:	681b      	ldr	r3, [r3, #0]
   485f2:	e7e4      	b.n	485be <ready_thread+0x2a>
}
   485f4:	bc70      	pop	{r4, r5, r6}
   485f6:	4770      	bx	lr
   485f8:	200071cc 	.word	0x200071cc

000485fc <unready_thread>:
{
   485fc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   485fe:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   48602:	7b43      	ldrb	r3, [r0, #13]
   48604:	2a00      	cmp	r2, #0
{
   48606:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   48608:	da04      	bge.n	48614 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   4860a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   4860e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   48610:	f008 fb58 	bl	50cc4 <sys_dlist_remove>
	update_cache(thread == _current);
   48614:	4b04      	ldr	r3, [pc, #16]	; (48628 <unready_thread+0x2c>)
   48616:	6898      	ldr	r0, [r3, #8]
   48618:	1a43      	subs	r3, r0, r1
   4861a:	4258      	negs	r0, r3
   4861c:	4158      	adcs	r0, r3
}
   4861e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   48622:	f7ff bf61 	b.w	484e8 <update_cache>
   48626:	bf00      	nop
   48628:	200071cc 	.word	0x200071cc

0004862c <pend>:
{
   4862c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   48630:	4606      	mov	r6, r0
   48632:	4615      	mov	r5, r2
   48634:	461c      	mov	r4, r3
	__asm__ volatile(
   48636:	f04f 0320 	mov.w	r3, #32
   4863a:	f3ef 8711 	mrs	r7, BASEPRI
   4863e:	f383 8812 	msr	BASEPRI_MAX, r3
   48642:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   48646:	f008 fb7a 	bl	50d3e <add_to_waitq_locked>
	__asm__ volatile(
   4864a:	f387 8811 	msr	BASEPRI, r7
   4864e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   48652:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   48656:	bf08      	it	eq
   48658:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   4865c:	d008      	beq.n	48670 <pend+0x44>
   4865e:	462a      	mov	r2, r5
   48660:	4623      	mov	r3, r4
   48662:	f106 0018 	add.w	r0, r6, #24
   48666:	4903      	ldr	r1, [pc, #12]	; (48674 <pend+0x48>)
}
   48668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   4866c:	f000 baea 	b.w	48c44 <z_add_timeout>
   48670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   48674:	00050cfb 	.word	0x00050cfb

00048678 <k_sched_time_slice_set>:
{
   48678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4867c:	4604      	mov	r4, r0
   4867e:	460d      	mov	r5, r1
	__asm__ volatile(
   48680:	f04f 0320 	mov.w	r3, #32
   48684:	f3ef 8811 	mrs	r8, BASEPRI
   48688:	f383 8812 	msr	BASEPRI_MAX, r3
   4868c:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   48690:	2600      	movs	r6, #0
   48692:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   48696:	f240 30e7 	movw	r0, #999	; 0x3e7
   4869a:	4631      	mov	r1, r6
   4869c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   486a0:	2300      	movs	r3, #0
   486a2:	fbe4 0107 	umlal	r0, r1, r4, r7
   486a6:	f7dd fd2b 	bl	26100 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   486aa:	42b4      	cmp	r4, r6
   486ac:	dd02      	ble.n	486b4 <k_sched_time_slice_set+0x3c>
			slice_time = MAX(2, slice_time);
   486ae:	2802      	cmp	r0, #2
   486b0:	bfb8      	it	lt
   486b2:	2002      	movlt	r0, #2
		_current_cpu->slice_ticks = 0;
   486b4:	4b06      	ldr	r3, [pc, #24]	; (486d0 <k_sched_time_slice_set+0x58>)
   486b6:	611e      	str	r6, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
   486b8:	4b06      	ldr	r3, [pc, #24]	; (486d4 <k_sched_time_slice_set+0x5c>)
   486ba:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   486bc:	4b06      	ldr	r3, [pc, #24]	; (486d8 <k_sched_time_slice_set+0x60>)
   486be:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   486c0:	f7ff fefc 	bl	484bc <z_reset_time_slice>
	__asm__ volatile(
   486c4:	f388 8811 	msr	BASEPRI, r8
   486c8:	f3bf 8f6f 	isb	sy
}
   486cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   486d0:	200071cc 	.word	0x200071cc
   486d4:	20007204 	.word	0x20007204
   486d8:	20007200 	.word	0x20007200

000486dc <z_time_slice>:
{
   486dc:	b538      	push	{r3, r4, r5, lr}
   486de:	4601      	mov	r1, r0
	__asm__ volatile(
   486e0:	f04f 0320 	mov.w	r3, #32
   486e4:	f3ef 8411 	mrs	r4, BASEPRI
   486e8:	f383 8812 	msr	BASEPRI_MAX, r3
   486ec:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   486f0:	4b15      	ldr	r3, [pc, #84]	; (48748 <z_time_slice+0x6c>)
   486f2:	4a16      	ldr	r2, [pc, #88]	; (4874c <z_time_slice+0x70>)
   486f4:	6898      	ldr	r0, [r3, #8]
   486f6:	6815      	ldr	r5, [r2, #0]
   486f8:	42a8      	cmp	r0, r5
   486fa:	d106      	bne.n	4870a <z_time_slice+0x2e>
			z_reset_time_slice();
   486fc:	f7ff fede 	bl	484bc <z_reset_time_slice>
	__asm__ volatile(
   48700:	f384 8811 	msr	BASEPRI, r4
   48704:	f3bf 8f6f 	isb	sy
}
   48708:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   4870a:	2500      	movs	r5, #0
   4870c:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   4870e:	4a10      	ldr	r2, [pc, #64]	; (48750 <z_time_slice+0x74>)
   48710:	6812      	ldr	r2, [r2, #0]
   48712:	b1ba      	cbz	r2, 48744 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   48714:	89c2      	ldrh	r2, [r0, #14]
   48716:	2a7f      	cmp	r2, #127	; 0x7f
   48718:	d814      	bhi.n	48744 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   4871a:	7b42      	ldrb	r2, [r0, #13]
   4871c:	06d2      	lsls	r2, r2, #27
   4871e:	d111      	bne.n	48744 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   48720:	4a0c      	ldr	r2, [pc, #48]	; (48754 <z_time_slice+0x78>)
   48722:	f990 500e 	ldrsb.w	r5, [r0, #14]
   48726:	6812      	ldr	r2, [r2, #0]
   48728:	4295      	cmp	r5, r2
   4872a:	db0b      	blt.n	48744 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   4872c:	4a0a      	ldr	r2, [pc, #40]	; (48758 <z_time_slice+0x7c>)
   4872e:	4290      	cmp	r0, r2
   48730:	d008      	beq.n	48744 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   48732:	691a      	ldr	r2, [r3, #16]
   48734:	428a      	cmp	r2, r1
   48736:	dc02      	bgt.n	4873e <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   48738:	f7ff fef2 	bl	48520 <move_thread_to_end_of_prio_q>
   4873c:	e7de      	b.n	486fc <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   4873e:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   48740:	611a      	str	r2, [r3, #16]
   48742:	e7dd      	b.n	48700 <z_time_slice+0x24>
   48744:	2200      	movs	r2, #0
   48746:	e7fb      	b.n	48740 <z_time_slice+0x64>
   48748:	200071cc 	.word	0x200071cc
   4874c:	200071fc 	.word	0x200071fc
   48750:	20007204 	.word	0x20007204
   48754:	20007200 	.word	0x20007200
   48758:	20003ff8 	.word	0x20003ff8

0004875c <z_pend_curr>:
{
   4875c:	b510      	push	{r4, lr}
	pending_current = _current;
   4875e:	4b07      	ldr	r3, [pc, #28]	; (4877c <z_pend_curr+0x20>)
   48760:	6898      	ldr	r0, [r3, #8]
   48762:	4b07      	ldr	r3, [pc, #28]	; (48780 <z_pend_curr+0x24>)
{
   48764:	460c      	mov	r4, r1
	pending_current = _current;
   48766:	6018      	str	r0, [r3, #0]
{
   48768:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   4876a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   4876e:	f7ff ff5d 	bl	4862c <pend>
	ret = arch_swap(key);
   48772:	4620      	mov	r0, r4
}
   48774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   48778:	f7e4 ba96 	b.w	2cca8 <arch_swap>
   4877c:	200071cc 	.word	0x200071cc
   48780:	200071fc 	.word	0x200071fc

00048784 <z_set_prio>:
{
   48784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   48786:	4604      	mov	r4, r0
	__asm__ volatile(
   48788:	f04f 0320 	mov.w	r3, #32
   4878c:	f3ef 8611 	mrs	r6, BASEPRI
   48790:	f383 8812 	msr	BASEPRI_MAX, r3
   48794:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   48798:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   4879a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   4879c:	b249      	sxtb	r1, r1
   4879e:	d119      	bne.n	487d4 <z_set_prio+0x50>
	return node->next != NULL;
   487a0:	6985      	ldr	r5, [r0, #24]
   487a2:	b9bd      	cbnz	r5, 487d4 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   487a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   487a8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   487aa:	f008 fa8b 	bl	50cc4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   487ae:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   487b0:	4a16      	ldr	r2, [pc, #88]	; (4880c <z_set_prio+0x88>)
				thread->base.prio = prio;
   487b2:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   487b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   487b8:	7343      	strb	r3, [r0, #13]
   487ba:	4613      	mov	r3, r2
   487bc:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   487c0:	4298      	cmp	r0, r3
   487c2:	bf18      	it	ne
   487c4:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   487c6:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   487c8:	b95d      	cbnz	r5, 487e2 <z_set_prio+0x5e>
	node->prev = tail;
   487ca:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   487ce:	6004      	str	r4, [r0, #0]
	list->tail = node;
   487d0:	6254      	str	r4, [r2, #36]	; 0x24
}
   487d2:	e011      	b.n	487f8 <z_set_prio+0x74>
			thread->base.prio = prio;
   487d4:	73a1      	strb	r1, [r4, #14]
   487d6:	2000      	movs	r0, #0
	__asm__ volatile(
   487d8:	f386 8811 	msr	BASEPRI, r6
   487dc:	f3bf 8f6f 	isb	sy
}
   487e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   487e2:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   487e6:	42b9      	cmp	r1, r7
   487e8:	d00b      	beq.n	48802 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   487ea:	428f      	cmp	r7, r1
   487ec:	dd09      	ble.n	48802 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   487ee:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   487f0:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   487f4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   487f6:	606c      	str	r4, [r5, #4]
			update_cache(1);
   487f8:	2001      	movs	r0, #1
   487fa:	f7ff fe75 	bl	484e8 <update_cache>
   487fe:	2001      	movs	r0, #1
   48800:	e7ea      	b.n	487d8 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   48802:	42a8      	cmp	r0, r5
   48804:	d0e1      	beq.n	487ca <z_set_prio+0x46>
   48806:	682d      	ldr	r5, [r5, #0]
   48808:	e7de      	b.n	487c8 <z_set_prio+0x44>
   4880a:	bf00      	nop
   4880c:	200071cc 	.word	0x200071cc

00048810 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   48810:	b949      	cbnz	r1, 48826 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   48812:	f3ef 8005 	mrs	r0, IPSR
   48816:	b930      	cbnz	r0, 48826 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   48818:	4b05      	ldr	r3, [pc, #20]	; (48830 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   4881a:	69da      	ldr	r2, [r3, #28]
   4881c:	689b      	ldr	r3, [r3, #8]
   4881e:	429a      	cmp	r2, r3
   48820:	d001      	beq.n	48826 <z_reschedule+0x16>
   48822:	f7e4 ba41 	b.w	2cca8 <arch_swap>
   48826:	f381 8811 	msr	BASEPRI, r1
   4882a:	f3bf 8f6f 	isb	sy
}
   4882e:	4770      	bx	lr
   48830:	200071cc 	.word	0x200071cc

00048834 <z_sched_start>:
{
   48834:	b510      	push	{r4, lr}
	__asm__ volatile(
   48836:	f04f 0220 	mov.w	r2, #32
   4883a:	f3ef 8411 	mrs	r4, BASEPRI
   4883e:	f382 8812 	msr	BASEPRI_MAX, r2
   48842:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   48846:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   48848:	0751      	lsls	r1, r2, #29
   4884a:	d404      	bmi.n	48856 <z_sched_start+0x22>
	__asm__ volatile(
   4884c:	f384 8811 	msr	BASEPRI, r4
   48850:	f3bf 8f6f 	isb	sy
}
   48854:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   48856:	f022 0204 	bic.w	r2, r2, #4
   4885a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   4885c:	f7ff fe9a 	bl	48594 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   48860:	4621      	mov	r1, r4
   48862:	4802      	ldr	r0, [pc, #8]	; (4886c <z_sched_start+0x38>)
}
   48864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   48868:	f7ff bfd2 	b.w	48810 <z_reschedule>
   4886c:	20007428 	.word	0x20007428

00048870 <z_impl_k_thread_suspend>:
{
   48870:	b570      	push	{r4, r5, r6, lr}
   48872:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   48874:	3018      	adds	r0, #24
   48876:	f008 fb3a 	bl	50eee <z_abort_timeout>
	__asm__ volatile(
   4887a:	f04f 0320 	mov.w	r3, #32
   4887e:	f3ef 8611 	mrs	r6, BASEPRI
   48882:	f383 8812 	msr	BASEPRI_MAX, r3
   48886:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   4888a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   4888e:	7b63      	ldrb	r3, [r4, #13]
   48890:	2a00      	cmp	r2, #0
   48892:	da05      	bge.n	488a0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   48894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   48898:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   4889a:	4620      	mov	r0, r4
   4889c:	f008 fa12 	bl	50cc4 <sys_dlist_remove>
		update_cache(thread == _current);
   488a0:	4d0b      	ldr	r5, [pc, #44]	; (488d0 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   488a2:	7b63      	ldrb	r3, [r4, #13]
   488a4:	68a8      	ldr	r0, [r5, #8]
   488a6:	f043 0310 	orr.w	r3, r3, #16
   488aa:	7363      	strb	r3, [r4, #13]
   488ac:	1b03      	subs	r3, r0, r4
   488ae:	4258      	negs	r0, r3
   488b0:	4158      	adcs	r0, r3
   488b2:	f7ff fe19 	bl	484e8 <update_cache>
	__asm__ volatile(
   488b6:	f386 8811 	msr	BASEPRI, r6
   488ba:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   488be:	68ab      	ldr	r3, [r5, #8]
   488c0:	42a3      	cmp	r3, r4
   488c2:	d103      	bne.n	488cc <z_impl_k_thread_suspend+0x5c>
}
   488c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   488c8:	f008 bad4 	b.w	50e74 <z_reschedule_unlocked>
}
   488cc:	bd70      	pop	{r4, r5, r6, pc}
   488ce:	bf00      	nop
   488d0:	200071cc 	.word	0x200071cc

000488d4 <k_sched_lock>:
	__asm__ volatile(
   488d4:	f04f 0320 	mov.w	r3, #32
   488d8:	f3ef 8111 	mrs	r1, BASEPRI
   488dc:	f383 8812 	msr	BASEPRI_MAX, r3
   488e0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   488e4:	4b04      	ldr	r3, [pc, #16]	; (488f8 <k_sched_lock+0x24>)
   488e6:	689a      	ldr	r2, [r3, #8]
   488e8:	7bd3      	ldrb	r3, [r2, #15]
   488ea:	3b01      	subs	r3, #1
   488ec:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   488ee:	f381 8811 	msr	BASEPRI, r1
   488f2:	f3bf 8f6f 	isb	sy
}
   488f6:	4770      	bx	lr
   488f8:	200071cc 	.word	0x200071cc

000488fc <k_sched_unlock>:
{
   488fc:	b510      	push	{r4, lr}
	__asm__ volatile(
   488fe:	f04f 0320 	mov.w	r3, #32
   48902:	f3ef 8411 	mrs	r4, BASEPRI
   48906:	f383 8812 	msr	BASEPRI_MAX, r3
   4890a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   4890e:	4b08      	ldr	r3, [pc, #32]	; (48930 <k_sched_unlock+0x34>)
   48910:	689a      	ldr	r2, [r3, #8]
   48912:	7bd3      	ldrb	r3, [r2, #15]
   48914:	3301      	adds	r3, #1
   48916:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   48918:	2000      	movs	r0, #0
   4891a:	f7ff fde5 	bl	484e8 <update_cache>
	__asm__ volatile(
   4891e:	f384 8811 	msr	BASEPRI, r4
   48922:	f3bf 8f6f 	isb	sy
}
   48926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   4892a:	f008 baa3 	b.w	50e74 <z_reschedule_unlocked>
   4892e:	bf00      	nop
   48930:	200071cc 	.word	0x200071cc

00048934 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   48934:	4b04      	ldr	r3, [pc, #16]	; (48948 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   48936:	2100      	movs	r1, #0
   48938:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   4893c:	e9c3 2208 	strd	r2, r2, [r3, #32]
   48940:	4608      	mov	r0, r1
   48942:	f7ff be99 	b.w	48678 <k_sched_time_slice_set>
   48946:	bf00      	nop
   48948:	200071cc 	.word	0x200071cc

0004894c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   4894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   4894e:	f04f 0320 	mov.w	r3, #32
   48952:	f3ef 8511 	mrs	r5, BASEPRI
   48956:	f383 8812 	msr	BASEPRI_MAX, r3
   4895a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   4895e:	4919      	ldr	r1, [pc, #100]	; (489c4 <z_impl_k_yield+0x78>)
   48960:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   48962:	7b43      	ldrb	r3, [r0, #13]
   48964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   48968:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   4896a:	f008 f9ab 	bl	50cc4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   4896e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   48970:	460a      	mov	r2, r1
   48972:	f063 037f 	orn	r3, r3, #127	; 0x7f
   48976:	7343      	strb	r3, [r0, #13]
   48978:	f852 3f20 	ldr.w	r3, [r2, #32]!
	return (node == list->tail) ? NULL : node->next;
   4897c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4897e:	4293      	cmp	r3, r2
   48980:	bf08      	it	eq
   48982:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   48984:	b923      	cbnz	r3, 48990 <z_impl_k_yield+0x44>
	node->prev = tail;
   48986:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   4898a:	6020      	str	r0, [r4, #0]
	list->tail = node;
   4898c:	6248      	str	r0, [r1, #36]	; 0x24
}
   4898e:	e00c      	b.n	489aa <z_impl_k_yield+0x5e>
	int32_t b1 = thread_1->base.prio;
   48990:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   48994:	f993 700e 	ldrsb.w	r7, [r3, #14]
	if (b1 != b2) {
   48998:	42be      	cmp	r6, r7
   4899a:	d00e      	beq.n	489ba <z_impl_k_yield+0x6e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   4899c:	42b7      	cmp	r7, r6
   4899e:	dd0c      	ble.n	489ba <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
   489a0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   489a2:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   489a6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   489a8:	6058      	str	r0, [r3, #4]
	}
	queue_thread(_current);
	update_cache(1);
   489aa:	2001      	movs	r0, #1
   489ac:	f7ff fd9c 	bl	484e8 <update_cache>
   489b0:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   489b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   489b6:	f7e4 b977 	b.w	2cca8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   489ba:	42a3      	cmp	r3, r4
   489bc:	d0e3      	beq.n	48986 <z_impl_k_yield+0x3a>
   489be:	681b      	ldr	r3, [r3, #0]
   489c0:	e7e0      	b.n	48984 <z_impl_k_yield+0x38>
   489c2:	bf00      	nop
   489c4:	200071cc 	.word	0x200071cc

000489c8 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   489c8:	ea50 0301 	orrs.w	r3, r0, r1
{
   489cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   489d0:	4605      	mov	r5, r0
   489d2:	460e      	mov	r6, r1
	if (ticks == 0) {
   489d4:	d103      	bne.n	489de <z_tick_sleep+0x16>
	z_impl_k_yield();
   489d6:	f7ff ffb9 	bl	4894c <z_impl_k_yield>
		k_yield();
		return 0;
   489da:	2000      	movs	r0, #0
   489dc:	e02c      	b.n	48a38 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   489de:	1c83      	adds	r3, r0, #2
   489e0:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   489e4:	db2a      	blt.n	48a3c <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   489e6:	f008 fac4 	bl	50f72 <sys_clock_tick_get_32>
   489ea:	1944      	adds	r4, r0, r5
   489ec:	f04f 0320 	mov.w	r3, #32
   489f0:	f3ef 8811 	mrs	r8, BASEPRI
   489f4:	f383 8812 	msr	BASEPRI_MAX, r3
   489f8:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   489fc:	4f11      	ldr	r7, [pc, #68]	; (48a44 <z_tick_sleep+0x7c>)
   489fe:	4b12      	ldr	r3, [pc, #72]	; (48a48 <z_tick_sleep+0x80>)
   48a00:	68b8      	ldr	r0, [r7, #8]
   48a02:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   48a04:	f7ff fdfa 	bl	485fc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   48a08:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   48a0a:	4910      	ldr	r1, [pc, #64]	; (48a4c <z_tick_sleep+0x84>)
   48a0c:	462a      	mov	r2, r5
   48a0e:	4633      	mov	r3, r6
   48a10:	3018      	adds	r0, #24
   48a12:	f000 f917 	bl	48c44 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   48a16:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   48a18:	7b53      	ldrb	r3, [r2, #13]
   48a1a:	f043 0310 	orr.w	r3, r3, #16
   48a1e:	7353      	strb	r3, [r2, #13]
   48a20:	4640      	mov	r0, r8
   48a22:	f7e4 f941 	bl	2cca8 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   48a26:	f008 faa4 	bl	50f72 <sys_clock_tick_get_32>
   48a2a:	1a20      	subs	r0, r4, r0
   48a2c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   48a30:	2801      	cmp	r0, #1
   48a32:	f173 0300 	sbcs.w	r3, r3, #0
   48a36:	dbd0      	blt.n	489da <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   48a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   48a3c:	f06f 0401 	mvn.w	r4, #1
   48a40:	1a24      	subs	r4, r4, r0
   48a42:	e7d3      	b.n	489ec <z_tick_sleep+0x24>
   48a44:	200071cc 	.word	0x200071cc
   48a48:	200071fc 	.word	0x200071fc
   48a4c:	00050cfb 	.word	0x00050cfb

00048a50 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   48a50:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   48a54:	bf08      	it	eq
   48a56:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   48a5a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   48a5c:	d106      	bne.n	48a6c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   48a5e:	4b08      	ldr	r3, [pc, #32]	; (48a80 <z_impl_k_sleep+0x30>)
   48a60:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   48a62:	f7ff ff05 	bl	48870 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   48a66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   48a6a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   48a6c:	f7ff ffac 	bl	489c8 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   48a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   48a74:	fb80 0303 	smull	r0, r3, r0, r3
   48a78:	0bc0      	lsrs	r0, r0, #15
   48a7a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   48a7e:	e7f4      	b.n	48a6a <z_impl_k_sleep+0x1a>
   48a80:	200071cc 	.word	0x200071cc

00048a84 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   48a84:	4b01      	ldr	r3, [pc, #4]	; (48a8c <z_impl_z_current_get+0x8>)
   48a86:	6898      	ldr	r0, [r3, #8]
   48a88:	4770      	bx	lr
   48a8a:	bf00      	nop
   48a8c:	200071cc 	.word	0x200071cc

00048a90 <z_impl_k_is_preempt_thread>:
   48a90:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   48a94:	b93b      	cbnz	r3, 48aa6 <z_impl_k_is_preempt_thread+0x16>
   48a96:	4b05      	ldr	r3, [pc, #20]	; (48aac <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   48a98:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   48a9a:	89d8      	ldrh	r0, [r3, #14]
   48a9c:	287f      	cmp	r0, #127	; 0x7f
   48a9e:	bf8c      	ite	hi
   48aa0:	2000      	movhi	r0, #0
   48aa2:	2001      	movls	r0, #1
   48aa4:	4770      	bx	lr
   48aa6:	2000      	movs	r0, #0
}
   48aa8:	4770      	bx	lr
   48aaa:	bf00      	nop
   48aac:	200071cc 	.word	0x200071cc

00048ab0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   48ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   48ab4:	4604      	mov	r4, r0
   48ab6:	f04f 0320 	mov.w	r3, #32
   48aba:	f3ef 8611 	mrs	r6, BASEPRI
   48abe:	f383 8812 	msr	BASEPRI_MAX, r3
   48ac2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   48ac6:	7b43      	ldrb	r3, [r0, #13]
   48ac8:	071a      	lsls	r2, r3, #28
   48aca:	d505      	bpl.n	48ad8 <z_thread_abort+0x28>
	__asm__ volatile(
   48acc:	f386 8811 	msr	BASEPRI, r6
   48ad0:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   48ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   48ad8:	f023 0220 	bic.w	r2, r3, #32
   48adc:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   48ae0:	09d2      	lsrs	r2, r2, #7
   48ae2:	d120      	bne.n	48b26 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   48ae4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   48ae6:	68a3      	ldr	r3, [r4, #8]
   48ae8:	b113      	cbz	r3, 48af0 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   48aea:	4620      	mov	r0, r4
   48aec:	f008 f8f2 	bl	50cd4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   48af0:	f104 0018 	add.w	r0, r4, #24
   48af4:	f008 f9fb 	bl	50eee <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   48af8:	f104 0758 	add.w	r7, r4, #88	; 0x58
   48afc:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   48b00:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48b02:	42bd      	cmp	r5, r7
   48b04:	d000      	beq.n	48b08 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   48b06:	b9b5      	cbnz	r5, 48b36 <z_thread_abort+0x86>
		update_cache(1);
   48b08:	2001      	movs	r0, #1
   48b0a:	f7ff fced 	bl	484e8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   48b0e:	4b10      	ldr	r3, [pc, #64]	; (48b50 <z_thread_abort+0xa0>)
   48b10:	689b      	ldr	r3, [r3, #8]
   48b12:	42a3      	cmp	r3, r4
   48b14:	d1da      	bne.n	48acc <z_thread_abort+0x1c>
   48b16:	f3ef 8305 	mrs	r3, IPSR
   48b1a:	2b00      	cmp	r3, #0
   48b1c:	d1d6      	bne.n	48acc <z_thread_abort+0x1c>
   48b1e:	4630      	mov	r0, r6
   48b20:	f7e4 f8c2 	bl	2cca8 <arch_swap>
	return ret;
   48b24:	e7d2      	b.n	48acc <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   48b26:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   48b2a:	f043 0308 	orr.w	r3, r3, #8
   48b2e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   48b30:	f008 f8c8 	bl	50cc4 <sys_dlist_remove>
}
   48b34:	e7d7      	b.n	48ae6 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   48b36:	4628      	mov	r0, r5
   48b38:	f008 f8cc 	bl	50cd4 <unpend_thread_no_timeout>
   48b3c:	f105 0018 	add.w	r0, r5, #24
   48b40:	f008 f9d5 	bl	50eee <z_abort_timeout>
   48b44:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   48b48:	4628      	mov	r0, r5
   48b4a:	f7ff fd23 	bl	48594 <ready_thread>
   48b4e:	e7d7      	b.n	48b00 <z_thread_abort+0x50>
   48b50:	200071cc 	.word	0x200071cc

00048b54 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   48b54:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   48b56:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   48b5a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   48b5c:	e9cd 6700 	strd	r6, r7, [sp]
   48b60:	f7ff fdfc 	bl	4875c <z_pend_curr>

	if (data != NULL) {
   48b64:	b11c      	cbz	r4, 48b6e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   48b66:	4b03      	ldr	r3, [pc, #12]	; (48b74 <z_sched_wait+0x20>)
   48b68:	689b      	ldr	r3, [r3, #8]
   48b6a:	695b      	ldr	r3, [r3, #20]
   48b6c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   48b6e:	b002      	add	sp, #8
   48b70:	bdd0      	pop	{r4, r6, r7, pc}
   48b72:	bf00      	nop
   48b74:	200071cc 	.word	0x200071cc

00048b78 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   48b78:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   48b7a:	4806      	ldr	r0, [pc, #24]	; (48b94 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   48b7c:	4a06      	ldr	r2, [pc, #24]	; (48b98 <z_data_copy+0x20>)
   48b7e:	4907      	ldr	r1, [pc, #28]	; (48b9c <z_data_copy+0x24>)
   48b80:	1a12      	subs	r2, r2, r0
   48b82:	f003 f869 	bl	4bc58 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   48b86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   48b8a:	4a05      	ldr	r2, [pc, #20]	; (48ba0 <z_data_copy+0x28>)
   48b8c:	4905      	ldr	r1, [pc, #20]	; (48ba4 <z_data_copy+0x2c>)
   48b8e:	4806      	ldr	r0, [pc, #24]	; (48ba8 <z_data_copy+0x30>)
   48b90:	f003 b862 	b.w	4bc58 <memcpy>
   48b94:	20000000 	.word	0x20000000
   48b98:	2000150c 	.word	0x2000150c
   48b9c:	0005440c 	.word	0x0005440c
   48ba0:	00000000 	.word	0x00000000
   48ba4:	0005440c 	.word	0x0005440c
   48ba8:	20000000 	.word	0x20000000

00048bac <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   48bac:	4b03      	ldr	r3, [pc, #12]	; (48bbc <elapsed+0x10>)
   48bae:	681b      	ldr	r3, [r3, #0]
   48bb0:	b90b      	cbnz	r3, 48bb6 <elapsed+0xa>
   48bb2:	f7fc bfff 	b.w	45bb4 <sys_clock_elapsed>
}
   48bb6:	2000      	movs	r0, #0
   48bb8:	4770      	bx	lr
   48bba:	bf00      	nop
   48bbc:	20007208 	.word	0x20007208

00048bc0 <next_timeout>:
	return list->head == list;
   48bc0:	4b11      	ldr	r3, [pc, #68]	; (48c08 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   48bc2:	b510      	push	{r4, lr}
   48bc4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48bc6:	429c      	cmp	r4, r3
   48bc8:	d10a      	bne.n	48be0 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   48bca:	f7ff ffef 	bl	48bac <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   48bce:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   48bd2:	4b0e      	ldr	r3, [pc, #56]	; (48c0c <next_timeout+0x4c>)
   48bd4:	691b      	ldr	r3, [r3, #16]
   48bd6:	b113      	cbz	r3, 48bde <next_timeout+0x1e>
   48bd8:	4298      	cmp	r0, r3
   48bda:	bfa8      	it	ge
   48bdc:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   48bde:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   48be0:	f7ff ffe4 	bl	48bac <elapsed>
	if ((to == NULL) ||
   48be4:	2c00      	cmp	r4, #0
   48be6:	d0f2      	beq.n	48bce <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   48be8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   48bec:	1a1b      	subs	r3, r3, r0
   48bee:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   48bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   48bf6:	f172 0100 	sbcs.w	r1, r2, #0
   48bfa:	dae8      	bge.n	48bce <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   48bfc:	2a00      	cmp	r2, #0
   48bfe:	bfac      	ite	ge
   48c00:	4618      	movge	r0, r3
   48c02:	2000      	movlt	r0, #0
   48c04:	e7e5      	b.n	48bd2 <next_timeout+0x12>
   48c06:	bf00      	nop
   48c08:	20000ec8 	.word	0x20000ec8
   48c0c:	200071cc 	.word	0x200071cc

00048c10 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
   48c10:	4a0b      	ldr	r2, [pc, #44]	; (48c40 <remove_timeout+0x30>)
   48c12:	6803      	ldr	r3, [r0, #0]
   48c14:	6852      	ldr	r2, [r2, #4]
   48c16:	4290      	cmp	r0, r2
{
   48c18:	b530      	push	{r4, r5, lr}
   48c1a:	d009      	beq.n	48c30 <remove_timeout+0x20>
	if (next(t) != NULL) {
   48c1c:	b143      	cbz	r3, 48c30 <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
   48c1e:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   48c22:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   48c26:	1912      	adds	r2, r2, r4
   48c28:	eb41 0105 	adc.w	r1, r1, r5
   48c2c:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   48c30:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   48c32:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   48c34:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   48c36:	2300      	movs	r3, #0
	node->prev = NULL;
   48c38:	e9c0 3300 	strd	r3, r3, [r0]
}
   48c3c:	bd30      	pop	{r4, r5, pc}
   48c3e:	bf00      	nop
   48c40:	20000ec8 	.word	0x20000ec8

00048c44 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   48c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   48c48:	bf08      	it	eq
   48c4a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   48c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   48c50:	4604      	mov	r4, r0
   48c52:	461d      	mov	r5, r3
   48c54:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   48c56:	d061      	beq.n	48d1c <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   48c58:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   48c5a:	f04f 0320 	mov.w	r3, #32
   48c5e:	f3ef 8711 	mrs	r7, BASEPRI
   48c62:	f383 8812 	msr	BASEPRI_MAX, r3
   48c66:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   48c6a:	3201      	adds	r2, #1
   48c6c:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   48c70:	da24      	bge.n	48cbc <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   48c72:	4930      	ldr	r1, [pc, #192]	; (48d34 <z_add_timeout+0xf0>)
   48c74:	e9d1 2000 	ldrd	r2, r0, [r1]
   48c78:	f06f 0301 	mvn.w	r3, #1
   48c7c:	1a9b      	subs	r3, r3, r2
   48c7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   48c82:	eb62 0000 	sbc.w	r0, r2, r0
   48c86:	1b9e      	subs	r6, r3, r6
   48c88:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   48c8c:	2e01      	cmp	r6, #1
   48c8e:	f170 0300 	sbcs.w	r3, r0, #0
   48c92:	da01      	bge.n	48c98 <z_add_timeout+0x54>
   48c94:	2601      	movs	r6, #1
   48c96:	2000      	movs	r0, #0
   48c98:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   48c9c:	4e26      	ldr	r6, [pc, #152]	; (48d38 <z_add_timeout+0xf4>)
   48c9e:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   48ca2:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48ca4:	45b4      	cmp	ip, r6
   48ca6:	bf08      	it	eq
   48ca8:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   48cac:	f1bc 0f00 	cmp.w	ip, #0
   48cb0:	d10d      	bne.n	48cce <z_add_timeout+0x8a>
	node->prev = tail;
   48cb2:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   48cb6:	602c      	str	r4, [r5, #0]
	list->tail = node;
   48cb8:	6074      	str	r4, [r6, #4]
}
   48cba:	e01c      	b.n	48cf6 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   48cbc:	f7ff ff76 	bl	48bac <elapsed>
   48cc0:	3601      	adds	r6, #1
   48cc2:	f145 0500 	adc.w	r5, r5, #0
   48cc6:	1836      	adds	r6, r6, r0
   48cc8:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   48ccc:	e7e4      	b.n	48c98 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   48cce:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   48cd2:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   48cd6:	4293      	cmp	r3, r2
   48cd8:	eb71 0e00 	sbcs.w	lr, r1, r0
   48cdc:	da1f      	bge.n	48d1e <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   48cde:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   48ce0:	f8dc 3004 	ldr.w	r3, [ip, #4]
   48ce4:	eb60 0001 	sbc.w	r0, r0, r1
   48ce8:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   48cec:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   48cf0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   48cf2:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   48cf6:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48cf8:	42b3      	cmp	r3, r6
   48cfa:	d00b      	beq.n	48d14 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   48cfc:	429c      	cmp	r4, r3
   48cfe:	d109      	bne.n	48d14 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   48d00:	f7ff ff5e 	bl	48bc0 <next_timeout>

			if (next_time == 0 ||
   48d04:	b118      	cbz	r0, 48d0e <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   48d06:	4b0d      	ldr	r3, [pc, #52]	; (48d3c <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   48d08:	691b      	ldr	r3, [r3, #16]
   48d0a:	4283      	cmp	r3, r0
   48d0c:	d002      	beq.n	48d14 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   48d0e:	2100      	movs	r1, #0
   48d10:	f7fc ff1e 	bl	45b50 <sys_clock_set_timeout>
	__asm__ volatile(
   48d14:	f387 8811 	msr	BASEPRI, r7
   48d18:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   48d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   48d1e:	1a9b      	subs	r3, r3, r2
   48d20:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   48d24:	45ac      	cmp	ip, r5
   48d26:	e9c4 3104 	strd	r3, r1, [r4, #16]
   48d2a:	d0c2      	beq.n	48cb2 <z_add_timeout+0x6e>
   48d2c:	f8dc c000 	ldr.w	ip, [ip]
   48d30:	e7bc      	b.n	48cac <z_add_timeout+0x68>
   48d32:	bf00      	nop
   48d34:	20004198 	.word	0x20004198
   48d38:	20000ec8 	.word	0x20000ec8
   48d3c:	200071cc 	.word	0x200071cc

00048d40 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   48d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   48d44:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   48d46:	f7ff fcc9 	bl	486dc <z_time_slice>
	__asm__ volatile(
   48d4a:	f04f 0320 	mov.w	r3, #32
   48d4e:	f3ef 8411 	mrs	r4, BASEPRI
   48d52:	f383 8812 	msr	BASEPRI_MAX, r3
   48d56:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   48d5a:	4e24      	ldr	r6, [pc, #144]	; (48dec <sys_clock_announce+0xac>)
	return list->head == list;
   48d5c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 48df0 <sys_clock_announce+0xb0>
   48d60:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   48d62:	4d24      	ldr	r5, [pc, #144]	; (48df4 <sys_clock_announce+0xb4>)
   48d64:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   48d68:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48d6a:	4540      	cmp	r0, r8
		curr_tick += dt;
   48d6c:	e9d5 1e00 	ldrd	r1, lr, [r5]
   48d70:	ea4f 77e2 	mov.w	r7, r2, asr #31
   48d74:	d00b      	beq.n	48d8e <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   48d76:	b150      	cbz	r0, 48d8e <sys_clock_announce+0x4e>
   48d78:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   48d7c:	429a      	cmp	r2, r3
   48d7e:	eb77 090c 	sbcs.w	r9, r7, ip
   48d82:	da16      	bge.n	48db2 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   48d84:	1a9b      	subs	r3, r3, r2
   48d86:	eb6c 0c07 	sbc.w	ip, ip, r7
   48d8a:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   48d8e:	1851      	adds	r1, r2, r1
   48d90:	eb4e 0707 	adc.w	r7, lr, r7
   48d94:	e9c5 1700 	strd	r1, r7, [r5]
	announce_remaining = 0;
   48d98:	2500      	movs	r5, #0
   48d9a:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   48d9c:	f7ff ff10 	bl	48bc0 <next_timeout>
   48da0:	4629      	mov	r1, r5
   48da2:	f7fc fed5 	bl	45b50 <sys_clock_set_timeout>
	__asm__ volatile(
   48da6:	f384 8811 	msr	BASEPRI, r4
   48daa:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   48dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   48db2:	1859      	adds	r1, r3, r1
   48db4:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   48db8:	1ad3      	subs	r3, r2, r3
   48dba:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   48dbc:	2200      	movs	r2, #0
   48dbe:	2300      	movs	r3, #0
   48dc0:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   48dc4:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   48dc8:	f7ff ff22 	bl	48c10 <remove_timeout>
   48dcc:	f384 8811 	msr	BASEPRI, r4
   48dd0:	f3bf 8f6f 	isb	sy
		t->fn(t);
   48dd4:	6883      	ldr	r3, [r0, #8]
   48dd6:	4798      	blx	r3
	__asm__ volatile(
   48dd8:	f04f 0320 	mov.w	r3, #32
   48ddc:	f3ef 8411 	mrs	r4, BASEPRI
   48de0:	f383 8812 	msr	BASEPRI_MAX, r3
   48de4:	f3bf 8f6f 	isb	sy
	return k;
   48de8:	e7bc      	b.n	48d64 <sys_clock_announce+0x24>
   48dea:	bf00      	nop
   48dec:	20007208 	.word	0x20007208
   48df0:	20000ec8 	.word	0x20000ec8
   48df4:	20004198 	.word	0x20004198

00048df8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   48df8:	b510      	push	{r4, lr}
   48dfa:	f04f 0320 	mov.w	r3, #32
   48dfe:	f3ef 8411 	mrs	r4, BASEPRI
   48e02:	f383 8812 	msr	BASEPRI_MAX, r3
   48e06:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   48e0a:	f7fc fed3 	bl	45bb4 <sys_clock_elapsed>
   48e0e:	4a05      	ldr	r2, [pc, #20]	; (48e24 <sys_clock_tick_get+0x2c>)
   48e10:	e9d2 3100 	ldrd	r3, r1, [r2]
   48e14:	18c0      	adds	r0, r0, r3
   48e16:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   48e1a:	f384 8811 	msr	BASEPRI, r4
   48e1e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   48e22:	bd10      	pop	{r4, pc}
   48e24:	20004198 	.word	0x20004198

00048e28 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   48e28:	b570      	push	{r4, r5, r6, lr}
   48e2a:	4604      	mov	r4, r0
	__asm__ volatile(
   48e2c:	f04f 0320 	mov.w	r3, #32
   48e30:	f3ef 8511 	mrs	r5, BASEPRI
   48e34:	f383 8812 	msr	BASEPRI_MAX, r3
   48e38:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   48e3c:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   48e40:	3301      	adds	r3, #1
   48e42:	f142 0200 	adc.w	r2, r2, #0
   48e46:	2b02      	cmp	r3, #2
   48e48:	f172 0200 	sbcs.w	r2, r2, #0
   48e4c:	d304      	bcc.n	48e58 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   48e4e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   48e52:	4917      	ldr	r1, [pc, #92]	; (48eb0 <z_timer_expiration_handler+0x88>)
   48e54:	f7ff fef6 	bl	48c44 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   48e58:	6b23      	ldr	r3, [r4, #48]	; 0x30
   48e5a:	3301      	adds	r3, #1
   48e5c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   48e5e:	6a23      	ldr	r3, [r4, #32]
   48e60:	b173      	cbz	r3, 48e80 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   48e62:	f385 8811 	msr	BASEPRI, r5
   48e66:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   48e6a:	6a23      	ldr	r3, [r4, #32]
   48e6c:	4620      	mov	r0, r4
   48e6e:	4798      	blx	r3
	__asm__ volatile(
   48e70:	f04f 0320 	mov.w	r3, #32
   48e74:	f3ef 8511 	mrs	r5, BASEPRI
   48e78:	f383 8812 	msr	BASEPRI_MAX, r3
   48e7c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   48e80:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48e84:	42a6      	cmp	r6, r4
   48e86:	d000      	beq.n	48e8a <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   48e88:	b926      	cbnz	r6, 48e94 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
   48e8a:	f385 8811 	msr	BASEPRI, r5
   48e8e:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   48e92:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   48e94:	4630      	mov	r0, r6
   48e96:	f007 ff8a 	bl	50dae <z_unpend_thread_no_timeout>
   48e9a:	2300      	movs	r3, #0
   48e9c:	67f3      	str	r3, [r6, #124]	; 0x7c
   48e9e:	f385 8811 	msr	BASEPRI, r5
   48ea2:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   48ea6:	4630      	mov	r0, r6
}
   48ea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   48eac:	f007 bf6f 	b.w	50d8e <z_ready_thread>
   48eb0:	00048e29 	.word	0x00048e29

00048eb4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   48eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   48eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   48ebc:	bf08      	it	eq
   48ebe:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   48ec2:	4605      	mov	r5, r0
   48ec4:	4614      	mov	r4, r2
   48ec6:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   48eca:	4619      	mov	r1, r3
   48ecc:	4691      	mov	r9, r2
   48ece:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   48ed0:	d037      	beq.n	48f42 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   48ed2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   48ed6:	bf08      	it	eq
   48ed8:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   48edc:	4637      	mov	r7, r6
   48ede:	4682      	mov	sl, r0
   48ee0:	d011      	beq.n	48f06 <z_impl_k_timer_start+0x52>
   48ee2:	ea50 0306 	orrs.w	r3, r0, r6
   48ee6:	d00e      	beq.n	48f06 <z_impl_k_timer_start+0x52>
   48ee8:	1c72      	adds	r2, r6, #1
   48eea:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
   48eee:	db0a      	blt.n	48f06 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   48ef0:	2e02      	cmp	r6, #2
   48ef2:	4684      	mov	ip, r0
   48ef4:	f170 0000 	sbcs.w	r0, r0, #0
   48ef8:	bfbc      	itt	lt
   48efa:	2702      	movlt	r7, #2
   48efc:	f04f 0c00 	movlt.w	ip, #0
   48f00:	3f01      	subs	r7, #1
   48f02:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   48f06:	1c63      	adds	r3, r4, #1
   48f08:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   48f0c:	db0a      	blt.n	48f24 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   48f0e:	2c01      	cmp	r4, #1
   48f10:	f171 0300 	sbcs.w	r3, r1, #0
   48f14:	4622      	mov	r2, r4
   48f16:	bfbc      	itt	lt
   48f18:	2201      	movlt	r2, #1
   48f1a:	2100      	movlt	r1, #0
   48f1c:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
   48f20:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   48f24:	4628      	mov	r0, r5
   48f26:	f007 ffe2 	bl	50eee <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   48f2a:	2300      	movs	r3, #0
   48f2c:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
   48f2e:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   48f32:	464a      	mov	r2, r9
   48f34:	4643      	mov	r3, r8
   48f36:	4628      	mov	r0, r5
   48f38:	4903      	ldr	r1, [pc, #12]	; (48f48 <z_impl_k_timer_start+0x94>)
		     duration);
}
   48f3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   48f3e:	f7ff be81 	b.w	48c44 <z_add_timeout>
}
   48f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   48f46:	bf00      	nop
   48f48:	00048e29 	.word	0x00048e29

00048f4c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   48f4c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   48f50:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   48f52:	4b29      	ldr	r3, [pc, #164]	; (48ff8 <z_impl_k_poll+0xac>)
   48f54:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   48f56:	2301      	movs	r3, #1
   48f58:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   48f5c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   48f60:	ea52 0305 	orrs.w	r3, r2, r5
{
   48f64:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   48f66:	bf0c      	ite	eq
   48f68:	2301      	moveq	r3, #1
   48f6a:	2300      	movne	r3, #0
   48f6c:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   48f70:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   48f72:	f008 f878 	bl	51066 <register_events>
   48f76:	4681      	mov	r9, r0
	__asm__ volatile(
   48f78:	f04f 0320 	mov.w	r3, #32
   48f7c:	f3ef 8a11 	mrs	sl, BASEPRI
   48f80:	f383 8812 	msr	BASEPRI_MAX, r3
   48f84:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   48f88:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   48f8c:	b964      	cbnz	r4, 48fa8 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   48f8e:	4601      	mov	r1, r0
   48f90:	4652      	mov	r2, sl
   48f92:	4640      	mov	r0, r8
   48f94:	f008 f938 	bl	51208 <clear_event_registrations>
	__asm__ volatile(
   48f98:	f38a 8811 	msr	BASEPRI, sl
   48f9c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   48fa0:	4620      	mov	r0, r4
   48fa2:	b002      	add	sp, #8
   48fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   48fa8:	2300      	movs	r3, #0
   48faa:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   48fae:	ea56 0305 	orrs.w	r3, r6, r5
   48fb2:	d106      	bne.n	48fc2 <z_impl_k_poll+0x76>
   48fb4:	f38a 8811 	msr	BASEPRI, sl
   48fb8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   48fbc:	f06f 040a 	mvn.w	r4, #10
   48fc0:	e7ee      	b.n	48fa0 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   48fc2:	e9cd 6500 	strd	r6, r5, [sp]
   48fc6:	4a0d      	ldr	r2, [pc, #52]	; (48ffc <z_impl_k_poll+0xb0>)
   48fc8:	480d      	ldr	r0, [pc, #52]	; (49000 <z_impl_k_poll+0xb4>)
   48fca:	4651      	mov	r1, sl
   48fcc:	f7ff fbc6 	bl	4875c <z_pend_curr>
   48fd0:	4604      	mov	r4, r0
	__asm__ volatile(
   48fd2:	f04f 0320 	mov.w	r3, #32
   48fd6:	f3ef 8511 	mrs	r5, BASEPRI
   48fda:	f383 8812 	msr	BASEPRI_MAX, r3
   48fde:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   48fe2:	462a      	mov	r2, r5
   48fe4:	4649      	mov	r1, r9
   48fe6:	4640      	mov	r0, r8
   48fe8:	f008 f90e 	bl	51208 <clear_event_registrations>
	__asm__ volatile(
   48fec:	f385 8811 	msr	BASEPRI, r5
   48ff0:	f3bf 8f6f 	isb	sy
	return swap_rc;
   48ff4:	e7d4      	b.n	48fa0 <z_impl_k_poll+0x54>
   48ff6:	bf00      	nop
   48ff8:	200071cc 	.word	0x200071cc
   48ffc:	20000ed0 	.word	0x20000ed0
   49000:	20007428 	.word	0x20007428

00049004 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   49004:	b538      	push	{r3, r4, r5, lr}
   49006:	4603      	mov	r3, r0
	__asm__ volatile(
   49008:	f04f 0220 	mov.w	r2, #32
   4900c:	f3ef 8511 	mrs	r5, BASEPRI
   49010:	f382 8812 	msr	BASEPRI_MAX, r2
   49014:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   49018:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   4901a:	2101      	movs	r1, #1
   4901c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   4901e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   49020:	4283      	cmp	r3, r0
   49022:	d106      	bne.n	49032 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   49024:	f385 8811 	msr	BASEPRI, r5
   49028:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   4902c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   4902e:	4620      	mov	r0, r4
   49030:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   49032:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   49036:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   49038:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   4903a:	2300      	movs	r3, #0
	node->prev = NULL;
   4903c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   49040:	f008 f888 	bl	51154 <signal_poll_event>
	z_reschedule(&lock, key);
   49044:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   49046:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   49048:	4801      	ldr	r0, [pc, #4]	; (49050 <z_impl_k_poll_signal_raise+0x4c>)
   4904a:	f7ff fbe1 	bl	48810 <z_reschedule>
	return rc;
   4904e:	e7ee      	b.n	4902e <z_impl_k_poll_signal_raise+0x2a>
   49050:	20007428 	.word	0x20007428

00049054 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   49054:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   49056:	4601      	mov	r1, r0
   49058:	4801      	ldr	r0, [pc, #4]	; (49060 <k_aligned_alloc+0xc>)
   4905a:	f008 b921 	b.w	512a0 <z_heap_aligned_alloc>
   4905e:	bf00      	nop
   49060:	20001130 	.word	0x20001130

00049064 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   49064:	4b01      	ldr	r3, [pc, #4]	; (4906c <k_thread_system_pool_assign+0x8>)
   49066:	6743      	str	r3, [r0, #116]	; 0x74
}
   49068:	4770      	bx	lr
   4906a:	bf00      	nop
   4906c:	20001130 	.word	0x20001130

00049070 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   49070:	b538      	push	{r3, r4, r5, lr}
   49072:	4604      	mov	r4, r0
   49074:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   49076:	f007 fc29 	bl	508cc <k_is_in_isr>
   4907a:	b920      	cbnz	r0, 49086 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   4907c:	4b06      	ldr	r3, [pc, #24]	; (49098 <z_thread_aligned_alloc+0x28>)
   4907e:	689b      	ldr	r3, [r3, #8]
   49080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   49082:	b90b      	cbnz	r3, 49088 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   49084:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   49086:	4b05      	ldr	r3, [pc, #20]	; (4909c <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   49088:	462a      	mov	r2, r5
   4908a:	4621      	mov	r1, r4
   4908c:	4618      	mov	r0, r3
}
   4908e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   49092:	f008 b905 	b.w	512a0 <z_heap_aligned_alloc>
   49096:	bf00      	nop
   49098:	200071cc 	.word	0x200071cc
   4909c:	20001130 	.word	0x20001130

000490a0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   490a0:	4770      	bx	lr

000490a2 <strlcpy>:
 *
 * Nathan Myers <ncm-nospam@cantrip.org>, 2003/06/03
 * Placed in the public domain.
 */

size_t strlcpy(char *dst, const char *src, size_t size) {
   490a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   490a4:	4606      	mov	r6, r0
    const size_t len = strlen(src);
   490a6:	4608      	mov	r0, r1
size_t strlcpy(char *dst, const char *src, size_t size) {
   490a8:	460f      	mov	r7, r1
   490aa:	4614      	mov	r4, r2
    const size_t len = strlen(src);
   490ac:	f002 fd9d 	bl	4bbea <strlen>
   490b0:	4605      	mov	r5, r0
    if (size != 0) {
   490b2:	b154      	cbz	r4, 490ca <strlcpy+0x28>
        memcpy(dst, src, (len > size - 1) ? size - 1 : len);
   490b4:	3c01      	subs	r4, #1
   490b6:	4284      	cmp	r4, r0
   490b8:	4622      	mov	r2, r4
   490ba:	4639      	mov	r1, r7
   490bc:	bf28      	it	cs
   490be:	4602      	movcs	r2, r0
   490c0:	4630      	mov	r0, r6
   490c2:	f002 fdc9 	bl	4bc58 <memcpy>
        dst[size - 1] = 0;
   490c6:	2300      	movs	r3, #0
   490c8:	5533      	strb	r3, [r6, r4]
    }
    return len;
}
   490ca:	4628      	mov	r0, r5
   490cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000490ce <zmk_event_manager_raise>:

int zmk_event_manager_raise(zmk_event_t *event) { return zmk_event_manager_handle_from(event, 0); }
   490ce:	2100      	movs	r1, #0
   490d0:	f7df bf16 	b.w	28f00 <zmk_event_manager_handle_from>

000490d4 <behavior_reset_init>:
#if DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT)
struct behavior_reset_config {
    int type;
};

static int behavior_reset_init(const struct device *dev) { return 0; };
   490d4:	2000      	movs	r0, #0
   490d6:	4770      	bx	lr

000490d8 <on_keymap_binding_pressed>:

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   490d8:	b082      	sub	sp, #8
   490da:	b508      	push	{r3, lr}
   490dc:	a902      	add	r1, sp, #8
   490de:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   490e2:	6800      	ldr	r0, [r0, #0]
   490e4:	f7fe fbfc 	bl	478e0 <z_impl_device_get_binding>
    const struct behavior_reset_config *cfg = dev->config;

    // TODO: Correct magic code for going into DFU?
    // See
    // https://github.com/adafruit/Adafruit_nRF52_Bootloader/blob/d6b28e66053eea467166f44875e3c7ec741cb471/src/main.c#L107
    sys_reboot(cfg->type);
   490e8:	6843      	ldr	r3, [r0, #4]
   490ea:	6818      	ldr	r0, [r3, #0]
   490ec:	f7e1 ff78 	bl	2afe0 <sys_reboot>

000490f0 <ext_power_enable>:
__syscall int ext_power_enable(const struct device *dev);

static inline int z_impl_ext_power_enable(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->enable == NULL) {
   490f0:	6883      	ldr	r3, [r0, #8]
   490f2:	681b      	ldr	r3, [r3, #0]
   490f4:	b103      	cbz	r3, 490f8 <ext_power_enable+0x8>
        return -ENOTSUP;
    }

    return api->enable(dev);
   490f6:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_enable(dev);
}
   490f8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   490fc:	4770      	bx	lr

000490fe <ext_power_disable>:
__syscall int ext_power_disable(const struct device *dev);

static inline int z_impl_ext_power_disable(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->disable == NULL) {
   490fe:	6883      	ldr	r3, [r0, #8]
   49100:	685b      	ldr	r3, [r3, #4]
   49102:	b103      	cbz	r3, 49106 <ext_power_disable+0x8>
        return -ENOTSUP;
    }

    return api->disable(dev);
   49104:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_DISABLE);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_disable(dev);
}
   49106:	f06f 0085 	mvn.w	r0, #133	; 0x85
   4910a:	4770      	bx	lr

0004910c <ext_power_get>:
__syscall int ext_power_get(const struct device *dev);

static inline int z_impl_ext_power_get(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->get == NULL) {
   4910c:	6883      	ldr	r3, [r0, #8]
   4910e:	689b      	ldr	r3, [r3, #8]
   49110:	b103      	cbz	r3, 49114 <ext_power_get+0x8>
        return -ENOTSUP;
    }

    return api->get(dev);
   49112:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_GET);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_get(dev);
}
   49114:	f06f 0085 	mvn.w	r0, #133	; 0x85
   49118:	4770      	bx	lr

0004911a <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   4911a:	b082      	sub	sp, #8
   4911c:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
   49120:	2000      	movs	r0, #0
   49122:	b002      	add	sp, #8
   49124:	4770      	bx	lr

00049126 <behavior_ext_power_init>:

static int behavior_ext_power_init(const struct device *dev) { return 0; };
   49126:	2000      	movs	r0, #0
   49128:	4770      	bx	lr

0004912a <zmk_hid_register_mods>:
int zmk_hid_register_mods(zmk_mod_flags_t modifiers) {
   4912a:	b570      	push	{r4, r5, r6, lr}
   4912c:	2400      	movs	r4, #0
   4912e:	4606      	mov	r6, r0
    int ret = 0;
   49130:	4625      	mov	r5, r4
        if (modifiers & (1 << i)) {
   49132:	fa46 f304 	asr.w	r3, r6, r4
   49136:	07db      	lsls	r3, r3, #31
   49138:	d503      	bpl.n	49142 <zmk_hid_register_mods+0x18>
            ret += zmk_hid_register_mod(i);
   4913a:	b2e0      	uxtb	r0, r4
   4913c:	f7df ff98 	bl	29070 <zmk_hid_register_mod>
   49140:	4405      	add	r5, r0
    for (zmk_mod_t i = 0; i < 8; i++) {
   49142:	3401      	adds	r4, #1
   49144:	2c08      	cmp	r4, #8
   49146:	d1f4      	bne.n	49132 <zmk_hid_register_mods+0x8>
}
   49148:	4628      	mov	r0, r5
   4914a:	bd70      	pop	{r4, r5, r6, pc}

0004914c <zmk_hid_unregister_mods>:
int zmk_hid_unregister_mods(zmk_mod_flags_t modifiers) {
   4914c:	b570      	push	{r4, r5, r6, lr}
   4914e:	2400      	movs	r4, #0
   49150:	4606      	mov	r6, r0
    int ret = 0;
   49152:	4625      	mov	r5, r4
        if (modifiers & (1 << i)) {
   49154:	fa46 f304 	asr.w	r3, r6, r4
   49158:	07db      	lsls	r3, r3, #31
   4915a:	d503      	bpl.n	49164 <zmk_hid_unregister_mods+0x18>
            ret += zmk_hid_unregister_mod(i);
   4915c:	b2e0      	uxtb	r0, r4
   4915e:	f7df ffad 	bl	290bc <zmk_hid_unregister_mod>
   49162:	4405      	add	r5, r0
    for (zmk_mod_t i = 0; i < 8; i++) {
   49164:	3401      	adds	r4, #1
   49166:	2c08      	cmp	r4, #8
   49168:	d1f4      	bne.n	49154 <zmk_hid_unregister_mods+0x8>
}
   4916a:	4628      	mov	r0, r5
   4916c:	bd70      	pop	{r4, r5, r6, pc}

0004916e <zmk_hid_press>:
    switch (ZMK_HID_USAGE_PAGE(usage)) {
   4916e:	f3c0 4307 	ubfx	r3, r0, #16, #8
   49172:	2b07      	cmp	r3, #7
   49174:	d004      	beq.n	49180 <zmk_hid_press+0x12>
   49176:	2b0c      	cmp	r3, #12
   49178:	d005      	beq.n	49186 <zmk_hid_press+0x18>
}
   4917a:	f06f 0015 	mvn.w	r0, #21
   4917e:	4770      	bx	lr
        return zmk_hid_keyboard_press(ZMK_HID_USAGE_ID(usage));
   49180:	b280      	uxth	r0, r0
   49182:	f7df bffb 	b.w	2917c <zmk_hid_keyboard_press>
        return zmk_hid_consumer_press(ZMK_HID_USAGE_ID(usage));
   49186:	b280      	uxth	r0, r0
   49188:	f7e0 b832 	b.w	291f0 <zmk_hid_consumer_press>

0004918c <zmk_hid_release>:
    switch (ZMK_HID_USAGE_PAGE(usage)) {
   4918c:	f3c0 4307 	ubfx	r3, r0, #16, #8
   49190:	2b07      	cmp	r3, #7
   49192:	d004      	beq.n	4919e <zmk_hid_release+0x12>
   49194:	2b0c      	cmp	r3, #12
   49196:	d005      	beq.n	491a4 <zmk_hid_release+0x18>
}
   49198:	f06f 0015 	mvn.w	r0, #21
   4919c:	4770      	bx	lr
        return zmk_hid_keyboard_release(ZMK_HID_USAGE_ID(usage));
   4919e:	b280      	uxth	r0, r0
   491a0:	f7e0 b804 	b.w	291ac <zmk_hid_keyboard_release>
        return zmk_hid_consumer_release(ZMK_HID_USAGE_ID(usage));
   491a4:	b280      	uxth	r0, r0
   491a6:	f7e0 b837 	b.w	29218 <zmk_hid_consumer_release>

000491aa <behavior_key_press_init>:
#include <zmk/events/keycode_state_changed.h>
#include <zmk/behavior.h>

LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

static int behavior_key_press_init(const struct device *dev) { return 0; };
   491aa:	2000      	movs	r0, #0
   491ac:	4770      	bx	lr

000491ae <zmk_keycode_state_changed_from_encoded>:
};

ZMK_EVENT_DECLARE(zmk_keycode_state_changed);

static inline struct zmk_keycode_state_changed_event *
zmk_keycode_state_changed_from_encoded(uint32_t encoded, bool pressed, int64_t timestamp) {
   491ae:	b570      	push	{r4, r5, r6, lr}
    uint16_t page = ZMK_HID_USAGE_PAGE(encoded);
    uint16_t id = ZMK_HID_USAGE_ID(encoded);
    uint8_t implicit_modifiers = 0x00;
    uint8_t explicit_modifiers = 0x00;

    if (!page) {
   491b0:	f410 0f7f 	tst.w	r0, #16711680	; 0xff0000
   491b4:	b286      	uxth	r6, r0
    uint16_t page = ZMK_HID_USAGE_PAGE(encoded);
   491b6:	f3c0 4407 	ubfx	r4, r0, #16, #8
zmk_keycode_state_changed_from_encoded(uint32_t encoded, bool pressed, int64_t timestamp) {
   491ba:	b088      	sub	sp, #32
    zmk_key_t key;
    bool pressed;
};

static inline bool is_mod(uint8_t usage_page, uint32_t keycode) {
    return (keycode >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL &&
   491bc:	f1a6 05e0 	sub.w	r5, r6, #224	; 0xe0
   491c0:	ea4f 6010 	mov.w	r0, r0, lsr #24
    if (!page) {
   491c4:	d11a      	bne.n	491fc <zmk_keycode_state_changed_from_encoded+0x4e>
            keycode <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI && usage_page == HID_USAGE_KEY);
   491c6:	2d07      	cmp	r5, #7
   491c8:	d91c      	bls.n	49204 <zmk_keycode_state_changed_from_encoded+0x56>
        page = HID_USAGE_KEY;
   491ca:	2407      	movs	r4, #7
    }

    if (is_mod(page, id)) {
        explicit_modifiers = SELECT_MODS(encoded);
    } else {
        implicit_modifiers = SELECT_MODS(encoded);
   491cc:	b2c5      	uxtb	r5, r0
    uint8_t explicit_modifiers = 0x00;
   491ce:	2000      	movs	r0, #0
    }

    return new_zmk_keycode_state_changed(
        (struct zmk_keycode_state_changed){.usage_page = page,
   491d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    return new_zmk_keycode_state_changed(
   491d4:	ab08      	add	r3, sp, #32
        (struct zmk_keycode_state_changed){.usage_page = page,
   491d6:	f88d 0011 	strb.w	r0, [sp, #17]
   491da:	f88d 1012 	strb.w	r1, [sp, #18]
    return new_zmk_keycode_state_changed(
   491de:	e913 0003 	ldmdb	r3, {r0, r1}
   491e2:	e88d 0003 	stmia.w	sp, {r0, r1}
        (struct zmk_keycode_state_changed){.usage_page = page,
   491e6:	f8ad 4008 	strh.w	r4, [sp, #8]
   491ea:	9603      	str	r6, [sp, #12]
   491ec:	f88d 5010 	strb.w	r5, [sp, #16]
    return new_zmk_keycode_state_changed(
   491f0:	ab02      	add	r3, sp, #8
   491f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   491f4:	f7e0 fc00 	bl	299f8 <new_zmk_keycode_state_changed>
                                           .keycode = id,
                                           .implicit_modifiers = implicit_modifiers,
                                           .explicit_modifiers = explicit_modifiers,
                                           .state = pressed,
                                           .timestamp = timestamp});
}
   491f8:	b008      	add	sp, #32
   491fa:	bd70      	pop	{r4, r5, r6, pc}
   491fc:	2d07      	cmp	r5, #7
   491fe:	d8e5      	bhi.n	491cc <zmk_keycode_state_changed_from_encoded+0x1e>
   49200:	2c07      	cmp	r4, #7
   49202:	d1e3      	bne.n	491cc <zmk_keycode_state_changed_from_encoded+0x1e>
        explicit_modifiers = SELECT_MODS(encoded);
   49204:	b2c0      	uxtb	r0, r0
   49206:	2407      	movs	r4, #7
    uint8_t implicit_modifiers = 0x00;
   49208:	2500      	movs	r5, #0
   4920a:	e7e1      	b.n	491d0 <zmk_keycode_state_changed_from_encoded+0x22>

0004920c <on_keymap_binding_released>:
    return ZMK_EVENT_RAISE(
        zmk_keycode_state_changed_from_encoded(binding->param1, true, event.timestamp));
}

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   4920c:	b082      	sub	sp, #8
   4920e:	b508      	push	{r3, lr}
   49210:	a902      	add	r1, sp, #8
   49212:	e881 000c 	stmia.w	r1, {r2, r3}
    LOG_DBG("position %d keycode 0x%02X", event.position, binding->param1);
    return ZMK_EVENT_RAISE(
   49216:	6840      	ldr	r0, [r0, #4]
   49218:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   4921c:	2100      	movs	r1, #0
   4921e:	f7ff ffc6 	bl	491ae <zmk_keycode_state_changed_from_encoded>
        zmk_keycode_state_changed_from_encoded(binding->param1, false, event.timestamp));
}
   49222:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   49226:	b002      	add	sp, #8
    return ZMK_EVENT_RAISE(
   49228:	f7ff bf51 	b.w	490ce <zmk_event_manager_raise>

0004922c <on_keymap_binding_pressed>:
                                     struct zmk_behavior_binding_event event) {
   4922c:	b082      	sub	sp, #8
   4922e:	b508      	push	{r3, lr}
   49230:	a902      	add	r1, sp, #8
   49232:	e881 000c 	stmia.w	r1, {r2, r3}
    return ZMK_EVENT_RAISE(
   49236:	6840      	ldr	r0, [r0, #4]
   49238:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   4923c:	2101      	movs	r1, #1
   4923e:	f7ff ffb6 	bl	491ae <zmk_keycode_state_changed_from_encoded>
}
   49242:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   49246:	b002      	add	sp, #8
    return ZMK_EVENT_RAISE(
   49248:	f7ff bf41 	b.w	490ce <zmk_event_manager_raise>

0004924c <queue_macro>:

static void queue_macro(uint32_t position, const struct zmk_behavior_binding bindings[],
                        struct behavior_macro_trigger_state state) {
   4924c:	b082      	sub	sp, #8
   4924e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   49252:	4688      	mov	r8, r1
   49254:	a90a      	add	r1, sp, #40	; 0x28
   49256:	e881 000c 	stmia.w	r1, {r2, r3}
    LOG_DBG("Iterating macro bindings - starting: %d, count: %d", state.start_index, state.count);
    for (int i = state.start_index; i < state.start_index + state.count; i++) {
   4925a:	f8bd 7032 	ldrh.w	r7, [sp, #50]	; 0x32
                        struct behavior_macro_trigger_state state) {
   4925e:	4605      	mov	r5, r0
        if (!handle_control_binding(&state, &bindings[i])) {
   49260:	f04f 090c 	mov.w	r9, #12
            switch (state.mode) {
            case MACRO_MODE_TAP:
                zmk_behavior_queue_add(position, bindings[i], true, state.tap_ms);
   49264:	f04f 0a01 	mov.w	sl, #1
    for (int i = state.start_index; i < state.start_index + state.count; i++) {
   49268:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   4926c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   49270:	4413      	add	r3, r2
   49272:	429f      	cmp	r7, r3
   49274:	db04      	blt.n	49280 <queue_macro+0x34>
                LOG_ERR("Unknown macro mode: %d", state.mode);
                break;
            }
        }
    }
}
   49276:	b002      	add	sp, #8
   49278:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4927c:	b002      	add	sp, #8
   4927e:	4770      	bx	lr
        if (!handle_control_binding(&state, &bindings[i])) {
   49280:	fb09 8407 	mla	r4, r9, r7, r8
   49284:	4621      	mov	r1, r4
   49286:	a80a      	add	r0, sp, #40	; 0x28
   49288:	f7df ffea 	bl	29260 <handle_control_binding>
   4928c:	b9b0      	cbnz	r0, 492bc <queue_macro+0x70>
            switch (state.mode) {
   4928e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   49292:	2e01      	cmp	r6, #1
   49294:	d00a      	beq.n	492ac <queue_macro+0x60>
   49296:	2e02      	cmp	r6, #2
   49298:	d012      	beq.n	492c0 <queue_macro+0x74>
   4929a:	b97e      	cbnz	r6, 492bc <queue_macro+0x70>
                zmk_behavior_queue_add(position, bindings[i], true, state.tap_ms);
   4929c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   4929e:	e9cd a300 	strd	sl, r3, [sp]
   492a2:	4628      	mov	r0, r5
   492a4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
   492a8:	f7e0 f99c 	bl	295e4 <zmk_behavior_queue_add>
                zmk_behavior_queue_add(position, bindings[i], true, state.wait_ms);
   492ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   492ae:	e9cd 6300 	strd	r6, r3, [sp]
                zmk_behavior_queue_add(position, bindings[i], false, state.wait_ms);
   492b2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
   492b6:	4628      	mov	r0, r5
   492b8:	f7e0 f994 	bl	295e4 <zmk_behavior_queue_add>
    for (int i = state.start_index; i < state.start_index + state.count; i++) {
   492bc:	3701      	adds	r7, #1
   492be:	e7d3      	b.n	49268 <queue_macro+0x1c>
                zmk_behavior_queue_add(position, bindings[i], false, state.wait_ms);
   492c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   492c2:	e9cd 0300 	strd	r0, r3, [sp]
   492c6:	e7f4      	b.n	492b2 <queue_macro+0x66>

000492c8 <on_macro_binding_pressed>:

static int on_macro_binding_pressed(struct zmk_behavior_binding *binding,
                                    struct zmk_behavior_binding_event event) {
   492c8:	b082      	sub	sp, #8
   492ca:	b530      	push	{r4, r5, lr}
   492cc:	b087      	sub	sp, #28
   492ce:	a90a      	add	r1, sp, #40	; 0x28
   492d0:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   492d4:	6800      	ldr	r0, [r0, #0]
   492d6:	f7fe fb03 	bl	478e0 <z_impl_device_get_binding>
    const struct behavior_macro_config *cfg = dev->config;
    struct behavior_macro_state *state = dev->data;
   492da:	6903      	ldr	r3, [r0, #16]
    const struct behavior_macro_config *cfg = dev->config;
   492dc:	6845      	ldr	r5, [r0, #4]
    struct behavior_macro_trigger_state trigger_state = {.mode = MACRO_MODE_TAP,
   492de:	691b      	ldr	r3, [r3, #16]
   492e0:	f8ad 3014 	strh.w	r3, [sp, #20]
   492e4:	2400      	movs	r4, #0
   492e6:	f88d 4010 	strb.w	r4, [sp, #16]
   492ea:	f8ad 4012 	strh.w	r4, [sp, #18]
                                                         .tap_ms = cfg->default_tap_ms,
                                                         .wait_ms = cfg->default_wait_ms,
                                                         .start_index = 0,
                                                         .count = state->press_bindings_count};

    queue_macro(event.position, cfg->bindings, trigger_state);
   492ee:	ab06      	add	r3, sp, #24
   492f0:	e913 0003 	ldmdb	r3, {r0, r1}
    struct behavior_macro_trigger_state trigger_state = {.mode = MACRO_MODE_TAP,
   492f4:	682a      	ldr	r2, [r5, #0]
   492f6:	9202      	str	r2, [sp, #8]
   492f8:	686a      	ldr	r2, [r5, #4]
   492fa:	9203      	str	r2, [sp, #12]
    queue_macro(event.position, cfg->bindings, trigger_state);
   492fc:	e88d 0003 	stmia.w	sp, {r0, r1}
   49300:	4613      	mov	r3, r2
   49302:	980b      	ldr	r0, [sp, #44]	; 0x2c
   49304:	9a02      	ldr	r2, [sp, #8]
   49306:	f105 010c 	add.w	r1, r5, #12
   4930a:	f7ff ff9f 	bl	4924c <queue_macro>

    return ZMK_BEHAVIOR_OPAQUE;
}
   4930e:	4620      	mov	r0, r4
   49310:	b007      	add	sp, #28
   49312:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   49316:	b002      	add	sp, #8
   49318:	4770      	bx	lr

0004931a <on_macro_binding_released>:

static int on_macro_binding_released(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   4931a:	b082      	sub	sp, #8
   4931c:	b513      	push	{r0, r1, r4, lr}
   4931e:	a904      	add	r1, sp, #16
   49320:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   49324:	6800      	ldr	r0, [r0, #0]
   49326:	f7fe fadb 	bl	478e0 <z_impl_device_get_binding>
    const struct behavior_macro_config *cfg = dev->config;
    struct behavior_macro_state *state = dev->data;

    queue_macro(event.position, cfg->bindings, state->release_state);
   4932a:	6903      	ldr	r3, [r0, #16]
   4932c:	6844      	ldr	r4, [r0, #4]
   4932e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   49332:	e88d 0003 	stmia.w	sp, {r0, r1}
   49336:	9805      	ldr	r0, [sp, #20]
   49338:	cb0c      	ldmia	r3, {r2, r3}
   4933a:	f104 010c 	add.w	r1, r4, #12
   4933e:	f7ff ff85 	bl	4924c <queue_macro>

    return ZMK_BEHAVIOR_OPAQUE;
}
   49342:	2000      	movs	r0, #0
   49344:	b002      	add	sp, #8
   49346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   4934a:	b002      	add	sp, #8
   4934c:	4770      	bx	lr

0004934e <behavior_mo_init>:
LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

struct behavior_mo_config {};
struct behavior_mo_data {};

static int behavior_mo_init(const struct device *dev) { return 0; };
   4934e:	2000      	movs	r0, #0
   49350:	4770      	bx	lr

00049352 <mo_keymap_binding_released>:
    LOG_DBG("position %d layer %d", event.position, binding->param1);
    return zmk_keymap_layer_activate(binding->param1);
}

static int mo_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   49352:	b082      	sub	sp, #8
   49354:	e88d 000c 	stmia.w	sp, {r2, r3}
    LOG_DBG("position %d layer %d", event.position, binding->param1);
    return zmk_keymap_layer_deactivate(binding->param1);
   49358:	7900      	ldrb	r0, [r0, #4]
}
   4935a:	b002      	add	sp, #8
    return zmk_keymap_layer_deactivate(binding->param1);
   4935c:	f000 b914 	b.w	49588 <zmk_keymap_layer_deactivate>

00049360 <mo_keymap_binding_pressed>:
                                     struct zmk_behavior_binding_event event) {
   49360:	b082      	sub	sp, #8
   49362:	e88d 000c 	stmia.w	sp, {r2, r3}
    return zmk_keymap_layer_activate(binding->param1);
   49366:	7900      	ldrb	r0, [r0, #4]
}
   49368:	b002      	add	sp, #8
    return zmk_keymap_layer_activate(binding->param1);
   4936a:	f000 b90a 	b.w	49582 <zmk_keymap_layer_activate>

0004936e <press_tap_dance_behavior.isra.0>:
static inline int press_tap_dance_behavior(struct active_tap_dance *tap_dance, int64_t timestamp) {
   4936e:	b5f0      	push	{r4, r5, r6, r7, lr}
   49370:	4617      	mov	r7, r2
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   49372:	6942      	ldr	r2, [r0, #20]
static inline int press_tap_dance_behavior(struct active_tap_dance *tap_dance, int64_t timestamp) {
   49374:	461d      	mov	r5, r3
    tap_dance->tap_dance_decided = true;
   49376:	2301      	movs	r3, #1
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   49378:	6891      	ldr	r1, [r2, #8]
    tap_dance->tap_dance_decided = true;
   4937a:	7683      	strb	r3, [r0, #26]
static inline int press_tap_dance_behavior(struct active_tap_dance *tap_dance, int64_t timestamp) {
   4937c:	4604      	mov	r4, r0
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   4937e:	6803      	ldr	r3, [r0, #0]
        .position = tap_dance->position,
   49380:	f8d4 c004 	ldr.w	ip, [r4, #4]
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   49384:	220c      	movs	r2, #12
static inline int press_tap_dance_behavior(struct active_tap_dance *tap_dance, int64_t timestamp) {
   49386:	b093      	sub	sp, #76	; 0x4c
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   49388:	fb02 1103 	mla	r1, r2, r3, r1
   4938c:	eb0d 0602 	add.w	r6, sp, r2
   49390:	e911 0007 	ldmdb	r1, {r0, r1, r2}
   49394:	e9cd c707 	strd	ip, r7, [sp, #28]
    struct zmk_behavior_binding_event event = {
   49398:	2300      	movs	r3, #0
   4939a:	9306      	str	r3, [sp, #24]
   4939c:	9509      	str	r5, [sp, #36]	; 0x24
   4939e:	ab06      	add	r3, sp, #24
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   493a0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    return behavior_keymap_binding_pressed(&binding, event);
   493a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   493a6:	ac0a      	add	r4, sp, #40	; 0x28
   493a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return z_impl_behavior_keymap_binding_pressed(binding, event);
   493ac:	e9cd c70b 	strd	ip, r7, [sp, #44]	; 0x2c
   493b0:	950d      	str	r5, [sp, #52]	; 0x34
   493b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   493b6:	ad0e      	add	r5, sp, #56	; 0x38
   493b8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   493bc:	9803      	ldr	r0, [sp, #12]
   493be:	f7fe fa8f 	bl	478e0 <z_impl_device_get_binding>
    if (dev == NULL) {
   493c2:	b158      	cbz	r0, 493dc <press_tap_dance_behavior.isra.0+0x6e>
    if (api->binding_pressed == NULL) {
   493c4:	6883      	ldr	r3, [r0, #8]
   493c6:	689c      	ldr	r4, [r3, #8]
   493c8:	b144      	cbz	r4, 493dc <press_tap_dance_behavior.isra.0+0x6e>
    return api->binding_pressed(binding, event);
   493ca:	ab12      	add	r3, sp, #72	; 0x48
   493cc:	e913 0003 	ldmdb	r3, {r0, r1}
   493d0:	e88d 0003 	stmia.w	sp, {r0, r1}
   493d4:	4630      	mov	r0, r6
   493d6:	e895 000c 	ldmia.w	r5, {r2, r3}
   493da:	47a0      	blx	r4
}
   493dc:	b013      	add	sp, #76	; 0x4c
   493de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000493e0 <release_tap_dance_behavior.isra.0>:
static inline int release_tap_dance_behavior(struct active_tap_dance *tap_dance,
   493e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   493e2:	4617      	mov	r7, r2
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   493e4:	6942      	ldr	r2, [r0, #20]
static inline int release_tap_dance_behavior(struct active_tap_dance *tap_dance,
   493e6:	4604      	mov	r4, r0
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   493e8:	6891      	ldr	r1, [r2, #8]
        .position = tap_dance->position,
   493ea:	f8d4 c004 	ldr.w	ip, [r4, #4]
static inline int release_tap_dance_behavior(struct active_tap_dance *tap_dance,
   493ee:	461d      	mov	r5, r3
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   493f0:	6803      	ldr	r3, [r0, #0]
   493f2:	220c      	movs	r2, #12
static inline int release_tap_dance_behavior(struct active_tap_dance *tap_dance,
   493f4:	b093      	sub	sp, #76	; 0x4c
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   493f6:	fb02 1103 	mla	r1, r2, r3, r1
   493fa:	eb0d 0602 	add.w	r6, sp, r2
   493fe:	e911 0007 	ldmdb	r1, {r0, r1, r2}
   49402:	e9cd c707 	strd	ip, r7, [sp, #28]
    struct zmk_behavior_binding_event event = {
   49406:	2300      	movs	r3, #0
   49408:	9306      	str	r3, [sp, #24]
    tap_dance->position = ZMK_BHV_TAP_DANCE_POSITION_FREE;
   4940a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4940e:	6063      	str	r3, [r4, #4]
   49410:	9509      	str	r5, [sp, #36]	; 0x24
   49412:	ab06      	add	r3, sp, #24
    struct zmk_behavior_binding binding = tap_dance->config->behaviors[tap_dance->counter - 1];
   49414:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    return behavior_keymap_binding_released(&binding, event);
   49418:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   4941a:	ac0a      	add	r4, sp, #40	; 0x28
   4941c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return z_impl_behavior_keymap_binding_released(binding, event);
   49420:	e9cd c70b 	strd	ip, r7, [sp, #44]	; 0x2c
   49424:	950d      	str	r5, [sp, #52]	; 0x34
   49426:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   4942a:	ad0e      	add	r5, sp, #56	; 0x38
   4942c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   49430:	9803      	ldr	r0, [sp, #12]
   49432:	f7fe fa55 	bl	478e0 <z_impl_device_get_binding>
    if (dev == NULL) {
   49436:	b158      	cbz	r0, 49450 <release_tap_dance_behavior.isra.0+0x70>
    if (api->binding_released == NULL) {
   49438:	6883      	ldr	r3, [r0, #8]
   4943a:	68dc      	ldr	r4, [r3, #12]
   4943c:	b144      	cbz	r4, 49450 <release_tap_dance_behavior.isra.0+0x70>
    return api->binding_released(binding, event);
   4943e:	ab12      	add	r3, sp, #72	; 0x48
   49440:	e913 0003 	ldmdb	r3, {r0, r1}
   49444:	e88d 0003 	stmia.w	sp, {r0, r1}
   49448:	4630      	mov	r0, r6
   4944a:	e895 000c 	ldmia.w	r5, {r2, r3}
   4944e:	47a0      	blx	r4
}
   49450:	b013      	add	sp, #76	; 0x4c
   49452:	bdf0      	pop	{r4, r5, r6, r7, pc}

00049454 <on_tap_dance_binding_released>:
                                         struct zmk_behavior_binding_event event) {
   49454:	b082      	sub	sp, #8
   49456:	b508      	push	{r3, lr}
    struct active_tap_dance *tap_dance = find_tap_dance(event.position);
   49458:	4618      	mov	r0, r3
                                         struct zmk_behavior_binding_event event) {
   4945a:	a902      	add	r1, sp, #8
   4945c:	e881 000c 	stmia.w	r1, {r2, r3}
    struct active_tap_dance *tap_dance = find_tap_dance(event.position);
   49460:	f7df ff62 	bl	29328 <find_tap_dance>
    if (tap_dance == NULL) {
   49464:	b138      	cbz	r0, 49476 <on_tap_dance_binding_released+0x22>
    if (tap_dance->tap_dance_decided) {
   49466:	7e83      	ldrb	r3, [r0, #26]
    tap_dance->is_pressed = false;
   49468:	2200      	movs	r2, #0
   4946a:	7402      	strb	r2, [r0, #16]
    if (tap_dance->tap_dance_decided) {
   4946c:	b11b      	cbz	r3, 49476 <on_tap_dance_binding_released+0x22>
        release_tap_dance_behavior(tap_dance, event.timestamp);
   4946e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   49472:	f7ff ffb5 	bl	493e0 <release_tap_dance_behavior.isra.0>
}
   49476:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   4947a:	2000      	movs	r0, #0
   4947c:	b002      	add	sp, #8
   4947e:	4770      	bx	lr

00049480 <behavior_tap_dance_timer_handler>:
    if (tap_dance->position == ZMK_BHV_TAP_DANCE_POSITION_FREE) {
   49480:	f850 3c24 	ldr.w	r3, [r0, #-36]
   49484:	3301      	adds	r3, #1
void behavior_tap_dance_timer_handler(struct k_work *item) {
   49486:	b570      	push	{r4, r5, r6, lr}
   49488:	4604      	mov	r4, r0
    if (tap_dance->position == ZMK_BHV_TAP_DANCE_POSITION_FREE) {
   4948a:	d013      	beq.n	494b4 <behavior_tap_dance_timer_handler+0x34>
    if (tap_dance->timer_cancelled) {
   4948c:	f810 3c0f 	ldrb.w	r3, [r0, #-15]
   49490:	b983      	cbnz	r3, 494b4 <behavior_tap_dance_timer_handler+0x34>
    struct active_tap_dance *tap_dance = CONTAINER_OF(item, struct active_tap_dance, release_timer);
   49492:	f1a0 0528 	sub.w	r5, r0, #40	; 0x28
    press_tap_dance_behavior(tap_dance, tap_dance->release_at);
   49496:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   4949a:	4628      	mov	r0, r5
   4949c:	f7ff ff67 	bl	4936e <press_tap_dance_behavior.isra.0>
    if (tap_dance->is_pressed) {
   494a0:	f814 3c18 	ldrb.w	r3, [r4, #-24]
   494a4:	b933      	cbnz	r3, 494b4 <behavior_tap_dance_timer_handler+0x34>
    release_tap_dance_behavior(tap_dance, tap_dance->release_at);
   494a6:	e954 2302 	ldrd	r2, r3, [r4, #-8]
   494aa:	4628      	mov	r0, r5
}
   494ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    release_tap_dance_behavior(tap_dance, tap_dance->release_at);
   494b0:	f7ff bf96 	b.w	493e0 <release_tap_dance_behavior.isra.0>
}
   494b4:	bd70      	pop	{r4, r5, r6, pc}

000494b6 <behavior_transparent_init>:

LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

#if DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT)

static int behavior_transparent_init(const struct device *dev) { return 0; };
   494b6:	2000      	movs	r0, #0
   494b8:	4770      	bx	lr

000494ba <on_keymap_binding_pressed>:

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   494ba:	b082      	sub	sp, #8
   494bc:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_TRANSPARENT;
}
   494c0:	2001      	movs	r0, #1
   494c2:	b002      	add	sp, #8
   494c4:	4770      	bx	lr

000494c6 <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
   494c6:	b082      	sub	sp, #8
   494c8:	e88d 000c 	stmia.w	sp, {r2, r3}
   494cc:	2001      	movs	r0, #1
   494ce:	b002      	add	sp, #8
   494d0:	4770      	bx	lr

000494d2 <behavior_none_init>:

LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

#if DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT)

static int behavior_none_init(const struct device *dev) { return 0; };
   494d2:	2000      	movs	r0, #0
   494d4:	4770      	bx	lr

000494d6 <on_keymap_binding_pressed>:

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   494d6:	b082      	sub	sp, #8
   494d8:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
   494dc:	2000      	movs	r0, #0
   494de:	b002      	add	sp, #8
   494e0:	4770      	bx	lr

000494e2 <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
   494e2:	b082      	sub	sp, #8
   494e4:	e88d 000c 	stmia.w	sp, {r2, r3}
   494e8:	2000      	movs	r0, #0
   494ea:	b002      	add	sp, #8
   494ec:	4770      	bx	lr

000494ee <endpoint_listener>:

static int endpoint_listener(const zmk_event_t *eh) {
   494ee:	b508      	push	{r3, lr}
    update_current_endpoint();
   494f0:	f7e0 f928 	bl	29744 <update_current_endpoint>
    return 0;
}
   494f4:	2000      	movs	r0, #0
   494f6:	bd08      	pop	{r3, pc}

000494f8 <zmk_endpoints_send_report>:
    switch (usage_page) {
   494f8:	2807      	cmp	r0, #7
   494fa:	d004      	beq.n	49506 <zmk_endpoints_send_report+0xe>
   494fc:	280c      	cmp	r0, #12
   494fe:	d004      	beq.n	4950a <zmk_endpoints_send_report+0x12>
}
   49500:	f06f 0085 	mvn.w	r0, #133	; 0x85
   49504:	4770      	bx	lr
        return send_keyboard_report();
   49506:	f7e0 b8c9 	b.w	2969c <send_keyboard_report>
        return send_consumer_report();
   4950a:	f7e0 b8df 	b.w	296cc <send_consumer_report>

0004950e <hid_listener>:
        }
    }
    return zmk_endpoints_send_report(ev->usage_page);
}

int hid_listener(const zmk_event_t *eh) {
   4950e:	b538      	push	{r3, r4, r5, lr}
    const struct zmk_keycode_state_changed *ev = as_zmk_keycode_state_changed(eh);
   49510:	f7e0 fa8e 	bl	29a30 <as_zmk_keycode_state_changed>
    if (ev) {
   49514:	4604      	mov	r4, r0
   49516:	b1e8      	cbz	r0, 49554 <hid_listener+0x46>
    err = zmk_hid_press(ZMK_HID_USAGE(ev->usage_page, ev->keycode));
   49518:	8803      	ldrh	r3, [r0, #0]
   4951a:	6840      	ldr	r0, [r0, #4]
   4951c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
        if (ev->state) {
   49520:	7aa3      	ldrb	r3, [r4, #10]
   49522:	b1cb      	cbz	r3, 49558 <hid_listener+0x4a>
    err = zmk_hid_press(ZMK_HID_USAGE(ev->usage_page, ev->keycode));
   49524:	f7ff fe23 	bl	4916e <zmk_hid_press>
    if (err < 0) {
   49528:	2800      	cmp	r0, #0
   4952a:	db13      	blt.n	49554 <hid_listener+0x46>
    explicit_mods_changed = zmk_hid_register_mods(ev->explicit_modifiers);
   4952c:	7a60      	ldrb	r0, [r4, #9]
   4952e:	f7ff fdfc 	bl	4912a <zmk_hid_register_mods>
   49532:	4605      	mov	r5, r0
    implicit_mods_changed = zmk_hid_implicit_modifiers_press(ev->implicit_modifiers);
   49534:	7a20      	ldrb	r0, [r4, #8]
   49536:	f7df fdef 	bl	29118 <zmk_hid_implicit_modifiers_press>
    if (ev->usage_page != HID_USAGE_KEY &&
   4953a:	8823      	ldrh	r3, [r4, #0]
   4953c:	2b07      	cmp	r3, #7
   4953e:	d006      	beq.n	4954e <hid_listener+0x40>
   49540:	2d00      	cmp	r5, #0
   49542:	dc01      	bgt.n	49548 <hid_listener+0x3a>
        (explicit_mods_changed > 0 || implicit_mods_changed > 0)) {
   49544:	2800      	cmp	r0, #0
   49546:	dd02      	ble.n	4954e <hid_listener+0x40>
        err = zmk_endpoints_send_report(HID_USAGE_KEY);
   49548:	2007      	movs	r0, #7
   4954a:	f7ff ffd5 	bl	494f8 <zmk_endpoints_send_report>
    return zmk_endpoints_send_report(ev->usage_page);
   4954e:	8820      	ldrh	r0, [r4, #0]
   49550:	f7ff ffd2 	bl	494f8 <zmk_endpoints_send_report>
        } else {
            hid_listener_keycode_released(ev);
        }
    }
    return 0;
}
   49554:	2000      	movs	r0, #0
   49556:	bd38      	pop	{r3, r4, r5, pc}
    err = zmk_hid_release(ZMK_HID_USAGE(ev->usage_page, ev->keycode));
   49558:	f7ff fe18 	bl	4918c <zmk_hid_release>
    if (err < 0) {
   4955c:	2800      	cmp	r0, #0
   4955e:	dbf9      	blt.n	49554 <hid_listener+0x46>
    explicit_mods_changed = zmk_hid_unregister_mods(ev->explicit_modifiers);
   49560:	7a60      	ldrb	r0, [r4, #9]
   49562:	f7ff fdf3 	bl	4914c <zmk_hid_unregister_mods>
   49566:	4605      	mov	r5, r0
    implicit_mods_changed = zmk_hid_implicit_modifiers_release();
   49568:	f7df fdf0 	bl	2914c <zmk_hid_implicit_modifiers_release>
   4956c:	e7e5      	b.n	4953a <hid_listener+0x2c>

0004956e <zmk_keymap_layer_active_with_state>:
bool zmk_keymap_layer_active_with_state(uint8_t layer, zmk_keymap_layers_state_t state_to_test) {
   4956e:	4603      	mov	r3, r0
    return (state_to_test & (BIT(layer))) == (BIT(layer)) || layer == _zmk_keymap_layer_default;
   49570:	2001      	movs	r0, #1
   49572:	fa00 f203 	lsl.w	r2, r0, r3
   49576:	438a      	bics	r2, r1
   49578:	bf1c      	itt	ne
   4957a:	fab3 f083 	clzne	r0, r3
   4957e:	0940      	lsrne	r0, r0, #5
};
   49580:	4770      	bx	lr

00049582 <zmk_keymap_layer_activate>:
int zmk_keymap_layer_activate(uint8_t layer) { return set_layer_state(layer, true); };
   49582:	2101      	movs	r1, #1
   49584:	f7e0 b934 	b.w	297f0 <set_layer_state>

00049588 <zmk_keymap_layer_deactivate>:
int zmk_keymap_layer_deactivate(uint8_t layer) { return set_layer_state(layer, false); };
   49588:	2100      	movs	r1, #0
   4958a:	f7e0 b931 	b.w	297f0 <set_layer_state>

0004958e <invoke_locally>:
                   bool pressed) {
   4958e:	b082      	sub	sp, #8
   49590:	b570      	push	{r4, r5, r6, lr}
   49592:	b088      	sub	sp, #32
   49594:	a90c      	add	r1, sp, #48	; 0x30
   49596:	e881 000c 	stmia.w	r1, {r2, r3}
   4959a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   4959e:	4606      	mov	r6, r0
   495a0:	466c      	mov	r4, sp
   495a2:	ad04      	add	r5, sp, #16
    if (pressed) {
   495a4:	b1e3      	cbz	r3, 495e0 <invoke_locally+0x52>
        return behavior_keymap_binding_pressed(binding, event);
   495a6:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   495a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return z_impl_behavior_keymap_binding_pressed(binding, event);
   495ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   495b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   495b4:	6830      	ldr	r0, [r6, #0]
   495b6:	f7fe f993 	bl	478e0 <z_impl_device_get_binding>
    if (dev == NULL) {
   495ba:	b300      	cbz	r0, 495fe <invoke_locally+0x70>
    if (api->binding_pressed == NULL) {
   495bc:	6883      	ldr	r3, [r0, #8]
   495be:	689c      	ldr	r4, [r3, #8]
    if (api->binding_released == NULL) {
   495c0:	b324      	cbz	r4, 4960c <invoke_locally+0x7e>
    return api->binding_released(binding, event);
   495c2:	aa08      	add	r2, sp, #32
   495c4:	e912 0003 	ldmdb	r2, {r0, r1}
   495c8:	ab0e      	add	r3, sp, #56	; 0x38
   495ca:	e883 0003 	stmia.w	r3, {r0, r1}
   495ce:	e895 000c 	ldmia.w	r5, {r2, r3}
   495d2:	4630      	mov	r0, r6
   495d4:	4621      	mov	r1, r4
}
   495d6:	b008      	add	sp, #32
   495d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   495dc:	b002      	add	sp, #8
   495de:	4708      	bx	r1
        return behavior_keymap_binding_released(binding, event);
   495e0:	ab0c      	add	r3, sp, #48	; 0x30
   495e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   495e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return z_impl_behavior_keymap_binding_released(binding, event);
   495e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   495ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   495f0:	6830      	ldr	r0, [r6, #0]
   495f2:	f7fe f975 	bl	478e0 <z_impl_device_get_binding>
    if (dev == NULL) {
   495f6:	b110      	cbz	r0, 495fe <invoke_locally+0x70>
    if (api->binding_released == NULL) {
   495f8:	6883      	ldr	r3, [r0, #8]
   495fa:	68dc      	ldr	r4, [r3, #12]
   495fc:	e7e0      	b.n	495c0 <invoke_locally+0x32>
        return -EINVAL;
   495fe:	f06f 0015 	mvn.w	r0, #21
}
   49602:	b008      	add	sp, #32
   49604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   49608:	b002      	add	sp, #8
   4960a:	4770      	bx	lr
        return -ENOTSUP;
   4960c:	f06f 0085 	mvn.w	r0, #133	; 0x85
        return behavior_keymap_binding_released(binding, event);
   49610:	e7f7      	b.n	49602 <invoke_locally+0x74>

00049612 <keymap_listener>:
    return -ENOTSUP;
}

#endif /* ZMK_KEYMAP_HAS_SENSORS */

int keymap_listener(const zmk_event_t *eh) {
   49612:	b537      	push	{r0, r1, r2, r4, r5, lr}
    const struct zmk_position_state_changed *pos_ev;
    if ((pos_ev = as_zmk_position_state_changed(eh)) != NULL) {
   49614:	f7df fcca 	bl	28fac <as_zmk_position_state_changed>
   49618:	4603      	mov	r3, r0
   4961a:	b150      	cbz	r0, 49632 <keymap_listener+0x20>
        return zmk_keymap_position_state_changed(pos_ev->source, pos_ev->position, pos_ev->state,
   4961c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
   49620:	7a02      	ldrb	r2, [r0, #8]
   49622:	7800      	ldrb	r0, [r0, #0]
   49624:	e9cd 4500 	strd	r4, r5, [sp]
   49628:	6859      	ldr	r1, [r3, #4]
   4962a:	f7e0 f9a5 	bl	29978 <zmk_keymap_position_state_changed>
                                           sensor_ev->timestamp);
    }
#endif /* ZMK_KEYMAP_HAS_SENSORS */

    return -ENOTSUP;
}
   4962e:	b003      	add	sp, #12
   49630:	bd30      	pop	{r4, r5, pc}
    return -ENOTSUP;
   49632:	f06f 0085 	mvn.w	r0, #133	; 0x85
   49636:	e7fa      	b.n	4962e <keymap_listener+0x1c>

00049638 <raise_profile_changed_event_callback>:
    raise_profile_changed_event();
   49638:	f7e0 ba1a 	b.w	29a70 <raise_profile_changed_event>

0004963c <auth_cancel>:
static void auth_cancel(struct bt_conn *conn) {
   4963c:	b500      	push	{lr}
   4963e:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   49640:	f003 fc15 	bl	4ce6e <bt_conn_get_dst>
   49644:	4669      	mov	r1, sp
   49646:	f7e0 fa35 	bl	29ab4 <bt_addr_le_to_str.constprop.0.isra.0>
}
   4964a:	b009      	add	sp, #36	; 0x24
   4964c:	f85d fb04 	ldr.w	pc, [sp], #4

00049650 <security_changed>:
static void security_changed(struct bt_conn *conn, bt_security_t level, enum bt_security_err err) {
   49650:	b500      	push	{lr}
   49652:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   49654:	f003 fc0b 	bl	4ce6e <bt_conn_get_dst>
   49658:	4669      	mov	r1, sp
   4965a:	f7e0 fa2b 	bl	29ab4 <bt_addr_le_to_str.constprop.0.isra.0>
}
   4965e:	b009      	add	sp, #36	; 0x24
   49660:	f85d fb04 	ldr.w	pc, [sp], #4

00049664 <le_param_updated>:
                             uint16_t timeout) {
   49664:	b500      	push	{lr}
   49666:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   49668:	f003 fc01 	bl	4ce6e <bt_conn_get_dst>
   4966c:	4669      	mov	r1, sp
   4966e:	f7e0 fa21 	bl	29ab4 <bt_addr_le_to_str.constprop.0.isra.0>
}
   49672:	b009      	add	sp, #36	; 0x24
   49674:	f85d fb04 	ldr.w	pc, [sp], #4

00049678 <auth_pairing_accept>:
                                                const struct bt_conn_pairing_feat *const feat) {
   49678:	b500      	push	{lr}
   4967a:	b089      	sub	sp, #36	; 0x24
    bt_conn_get_info(conn, &info);
   4967c:	4669      	mov	r1, sp
   4967e:	f7e6 fc7f 	bl	2ff80 <bt_conn_get_info>
    if (info.role == BT_CONN_ROLE_PERIPHERAL && !zmk_ble_active_profile_is_open()) {
   49682:	f89d 3001 	ldrb.w	r3, [sp, #1]
   49686:	2b01      	cmp	r3, #1
   49688:	d102      	bne.n	49690 <auth_pairing_accept+0x18>
   4968a:	f7e0 fadd 	bl	29c48 <zmk_ble_active_profile_is_open>
   4968e:	b118      	cbz	r0, 49698 <auth_pairing_accept+0x20>
    return BT_SECURITY_ERR_SUCCESS;
   49690:	2000      	movs	r0, #0
};
   49692:	b009      	add	sp, #36	; 0x24
   49694:	f85d fb04 	ldr.w	pc, [sp], #4
        return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
   49698:	2006      	movs	r0, #6
   4969a:	e7fa      	b.n	49692 <auth_pairing_accept+0x1a>

0004969c <update_advertising_callback>:
static void update_advertising_callback(struct k_work *work) { update_advertising(); }
   4969c:	f7e0 bb40 	b.w	29d20 <update_advertising>

000496a0 <input_ccc_changed>:
}
   496a0:	4770      	bx	lr

000496a2 <write_ctrl_point>:
                                const void *buf, uint16_t len, uint16_t offset, uint8_t flags) {
   496a2:	b538      	push	{r3, r4, r5, lr}
   496a4:	460c      	mov	r4, r1
   496a6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    uint8_t *value = attr->user_data;
   496aa:	68e5      	ldr	r5, [r4, #12]
    if (offset + len > sizeof(ctrl_point)) {
   496ac:	461c      	mov	r4, r3
   496ae:	18c3      	adds	r3, r0, r3
   496b0:	2b01      	cmp	r3, #1
                                const void *buf, uint16_t len, uint16_t offset, uint8_t flags) {
   496b2:	4611      	mov	r1, r2
    if (offset + len > sizeof(ctrl_point)) {
   496b4:	dc05      	bgt.n	496c2 <write_ctrl_point+0x20>
    memcpy(value + offset, buf, len);
   496b6:	4622      	mov	r2, r4
   496b8:	4428      	add	r0, r5
   496ba:	f002 facd 	bl	4bc58 <memcpy>
}
   496be:	4620      	mov	r0, r4
   496c0:	bd38      	pop	{r3, r4, r5, pc}
        return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   496c2:	f06f 0406 	mvn.w	r4, #6
   496c6:	e7fa      	b.n	496be <write_ctrl_point+0x1c>

000496c8 <read_hids_consumer_input_report>:
                                               uint16_t len, uint16_t offset) {
   496c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   496ca:	b085      	sub	sp, #20
   496cc:	461f      	mov	r7, r3
   496ce:	4604      	mov	r4, r0
   496d0:	460d      	mov	r5, r1
   496d2:	4616      	mov	r6, r2
    struct zmk_hid_consumer_report_body *report_body = &zmk_hid_get_consumer_report()->body;
   496d4:	f7df fdc0 	bl	29258 <zmk_hid_get_consumer_report>
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
   496d8:	230c      	movs	r3, #12
   496da:	9302      	str	r3, [sp, #8]
    struct zmk_hid_consumer_report_body *report_body = &zmk_hid_get_consumer_report()->body;
   496dc:	3001      	adds	r0, #1
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
   496de:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   496e2:	9001      	str	r0, [sp, #4]
   496e4:	9300      	str	r3, [sp, #0]
   496e6:	4632      	mov	r2, r6
   496e8:	463b      	mov	r3, r7
   496ea:	4629      	mov	r1, r5
   496ec:	4620      	mov	r0, r4
   496ee:	f004 fed1 	bl	4e494 <bt_gatt_attr_read>
}
   496f2:	b005      	add	sp, #20
   496f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000496f6 <read_hids_report_ref>:
                                    void *buf, uint16_t len, uint16_t offset) {
   496f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   496f8:	2402      	movs	r4, #2
   496fa:	9402      	str	r4, [sp, #8]
   496fc:	68cc      	ldr	r4, [r1, #12]
   496fe:	9401      	str	r4, [sp, #4]
   49700:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   49704:	9400      	str	r4, [sp, #0]
   49706:	f004 fec5 	bl	4e494 <bt_gatt_attr_read>
}
   4970a:	b004      	add	sp, #16
   4970c:	bd10      	pop	{r4, pc}

0004970e <read_hids_info>:
                              uint16_t len, uint16_t offset) {
   4970e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   49710:	2404      	movs	r4, #4
   49712:	9402      	str	r4, [sp, #8]
   49714:	68cc      	ldr	r4, [r1, #12]
   49716:	9401      	str	r4, [sp, #4]
   49718:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   4971c:	9400      	str	r4, [sp, #0]
   4971e:	f004 feb9 	bl	4e494 <bt_gatt_attr_read>
}
   49722:	b004      	add	sp, #16
   49724:	bd10      	pop	{r4, pc}

00049726 <read_hids_input_report>:
                                      void *buf, uint16_t len, uint16_t offset) {
   49726:	b5f0      	push	{r4, r5, r6, r7, lr}
   49728:	b085      	sub	sp, #20
   4972a:	461f      	mov	r7, r3
   4972c:	4604      	mov	r4, r0
   4972e:	460d      	mov	r5, r1
   49730:	4616      	mov	r6, r2
    struct zmk_hid_keyboard_report_body *report_body = &zmk_hid_get_keyboard_report()->body;
   49732:	f7df fd8d 	bl	29250 <zmk_hid_get_keyboard_report>
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
   49736:	2308      	movs	r3, #8
   49738:	9302      	str	r3, [sp, #8]
    struct zmk_hid_keyboard_report_body *report_body = &zmk_hid_get_keyboard_report()->body;
   4973a:	3001      	adds	r0, #1
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
   4973c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   49740:	9001      	str	r0, [sp, #4]
   49742:	9300      	str	r3, [sp, #0]
   49744:	4632      	mov	r2, r6
   49746:	463b      	mov	r3, r7
   49748:	4629      	mov	r1, r5
   4974a:	4620      	mov	r0, r4
   4974c:	f004 fea2 	bl	4e494 <bt_gatt_attr_read>
}
   49750:	b005      	add	sp, #20
   49752:	bdf0      	pop	{r4, r5, r6, r7, pc}

00049754 <destination_connection>:
struct bt_conn *destination_connection() {
   49754:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bt_addr_le_t *addr = zmk_ble_active_profile_addr();
   49756:	f7e0 fbc5 	bl	29ee4 <zmk_ble_active_profile_addr>
    if (!bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   4975a:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   4975c:	2207      	movs	r2, #7
   4975e:	4669      	mov	r1, sp
   49760:	9400      	str	r4, [sp, #0]
    bt_addr_le_t *addr = zmk_ble_active_profile_addr();
   49762:	4605      	mov	r5, r0
    if (!bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   49764:	f8cd 4003 	str.w	r4, [sp, #3]
   49768:	f002 fa66 	bl	4bc38 <memcmp>
   4976c:	b120      	cbz	r0, 49778 <destination_connection+0x24>
    } else if ((conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr)) == NULL) {
   4976e:	4629      	mov	r1, r5
   49770:	4620      	mov	r0, r4
   49772:	f7e6 fbb3 	bl	2fedc <bt_conn_lookup_addr_le>
   49776:	b900      	cbnz	r0, 4977a <destination_connection+0x26>
struct bt_conn *destination_connection() {
   49778:	2000      	movs	r0, #0
}
   4977a:	b003      	add	sp, #12
   4977c:	bd30      	pop	{r4, r5, pc}

0004977e <zmk_battery_work>:
    int rc = zmk_battery_update(battery);
   4977e:	f7e0 bcad 	b.w	2a0dc <zmk_battery_update.constprop.0>

00049782 <release_peripheral_slot_for_conn>:
int release_peripheral_slot_for_conn(struct bt_conn *conn) {
   49782:	b508      	push	{r3, lr}
    int idx = peripheral_slot_index_for_conn(conn);
   49784:	f7e0 fdd6 	bl	2a334 <peripheral_slot_index_for_conn>
    if (idx < 0) {
   49788:	2800      	cmp	r0, #0
   4978a:	db03      	blt.n	49794 <release_peripheral_slot_for_conn+0x12>
}
   4978c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return release_peripheral_slot(idx);
   49790:	f7e0 bf26 	b.w	2a5e0 <release_peripheral_slot>
}
   49794:	bd08      	pop	{r3, pc}

00049796 <split_central_disconnected>:
static void split_central_disconnected(struct bt_conn *conn, uint8_t reason) {
   49796:	b510      	push	{r4, lr}
   49798:	b088      	sub	sp, #32
   4979a:	4604      	mov	r4, r0
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   4979c:	f003 fb67 	bl	4ce6e <bt_conn_get_dst>
   497a0:	4669      	mov	r1, sp
   497a2:	f7e0 fd35 	bl	2a210 <bt_addr_le_to_str.constprop.0.isra.0>
    err = release_peripheral_slot_for_conn(conn);
   497a6:	4620      	mov	r0, r4
   497a8:	f7ff ffeb 	bl	49782 <release_peripheral_slot_for_conn>
    if (err < 0) {
   497ac:	2800      	cmp	r0, #0
   497ae:	db01      	blt.n	497b4 <split_central_disconnected+0x1e>
    start_scan();
   497b0:	f7e0 fcd4 	bl	2a15c <start_scan>
}
   497b4:	b008      	add	sp, #32
   497b6:	bd10      	pop	{r4, pc}

000497b8 <split_central_connected>:
static void split_central_connected(struct bt_conn *conn, uint8_t conn_err) {
   497b8:	b530      	push	{r4, r5, lr}
   497ba:	b091      	sub	sp, #68	; 0x44
   497bc:	4604      	mov	r4, r0
   497be:	460d      	mov	r5, r1
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   497c0:	f003 fb55 	bl	4ce6e <bt_conn_get_dst>
   497c4:	4669      	mov	r1, sp
   497c6:	f7e0 fd23 	bl	2a210 <bt_addr_le_to_str.constprop.0.isra.0>
    bt_conn_get_info(conn, &info);
   497ca:	a908      	add	r1, sp, #32
   497cc:	4620      	mov	r0, r4
   497ce:	f7e6 fbd7 	bl	2ff80 <bt_conn_get_info>
    if (info.role != BT_CONN_ROLE_CENTRAL) {
   497d2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   497d6:	b92b      	cbnz	r3, 497e4 <split_central_connected+0x2c>
        release_peripheral_slot_for_conn(conn);
   497d8:	4620      	mov	r0, r4
    if (conn_err) {
   497da:	b12d      	cbz	r5, 497e8 <split_central_connected+0x30>
        release_peripheral_slot_for_conn(conn);
   497dc:	f7ff ffd1 	bl	49782 <release_peripheral_slot_for_conn>
        start_scan();
   497e0:	f7e0 fcbc 	bl	2a15c <start_scan>
}
   497e4:	b011      	add	sp, #68	; 0x44
   497e6:	bd30      	pop	{r4, r5, pc}
    confirm_peripheral_slot_conn(conn);
   497e8:	f7e0 fff4 	bl	2a7d4 <confirm_peripheral_slot_conn>
    split_central_process_connection(conn);
   497ec:	4620      	mov	r0, r4
   497ee:	f7e0 fdb9 	bl	2a364 <split_central_process_connection>
   497f2:	e7f7      	b.n	497e4 <split_central_connected+0x2c>

000497f4 <zmk_split_bt_invoke_behavior>:
                                 struct zmk_behavior_binding_event event, bool state) {
   497f4:	b082      	sub	sp, #8
   497f6:	b530      	push	{r4, r5, lr}
   497f8:	b08d      	sub	sp, #52	; 0x34
   497fa:	4604      	mov	r4, r0
   497fc:	a810      	add	r0, sp, #64	; 0x40
   497fe:	e880 000c 	stmia.w	r0, {r2, r3}
    struct zmk_split_run_behavior_payload payload = {.data = {
   49802:	2300      	movs	r3, #0
   49804:	f8cd 3012 	str.w	r3, [sp, #18]
   49808:	f8cd 3016 	str.w	r3, [sp, #22]
   4980c:	f88d 301a 	strb.w	r3, [sp, #26]
   49810:	9b11      	ldr	r3, [sp, #68]	; 0x44
   49812:	f88d 3008 	strb.w	r3, [sp, #8]
   49816:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   4981a:	f88d 3009 	strb.w	r3, [sp, #9]
   4981e:	684b      	ldr	r3, [r1, #4]
   49820:	f8cd 300a 	str.w	r3, [sp, #10]
    if (strlcpy(payload.behavior_dev, binding->behavior_dev, payload_dev_size) >=
   49824:	2209      	movs	r2, #9
    struct zmk_split_run_behavior_payload payload = {.data = {
   49826:	688b      	ldr	r3, [r1, #8]
    if (strlcpy(payload.behavior_dev, binding->behavior_dev, payload_dev_size) >=
   49828:	6809      	ldr	r1, [r1, #0]
    struct zmk_split_run_behavior_payload payload = {.data = {
   4982a:	f8cd 300e 	str.w	r3, [sp, #14]
    if (strlcpy(payload.behavior_dev, binding->behavior_dev, payload_dev_size) >=
   4982e:	f10d 0012 	add.w	r0, sp, #18
   49832:	f7ff fc36 	bl	490a2 <strlcpy>
    struct zmk_split_run_behavior_payload_wrapper wrapper = {.source = source, .payload = payload};
   49836:	ad06      	add	r5, sp, #24
   49838:	f88d 401c 	strb.w	r4, [sp, #28]
   4983c:	aa02      	add	r2, sp, #8
   4983e:	f10d 031d 	add.w	r3, sp, #29
   49842:	4614      	mov	r4, r2
   49844:	cc03      	ldmia	r4!, {r0, r1}
   49846:	42ac      	cmp	r4, r5
   49848:	6018      	str	r0, [r3, #0]
   4984a:	6059      	str	r1, [r3, #4]
   4984c:	4622      	mov	r2, r4
   4984e:	f103 0308 	add.w	r3, r3, #8
   49852:	d1f6      	bne.n	49842 <zmk_split_bt_invoke_behavior+0x4e>
   49854:	8821      	ldrh	r1, [r4, #0]
   49856:	78a2      	ldrb	r2, [r4, #2]
   49858:	709a      	strb	r2, [r3, #2]
   4985a:	8019      	strh	r1, [r3, #0]
    return split_bt_invoke_behavior_payload(wrapper);
   4985c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   4985e:	9300      	str	r3, [sp, #0]
   49860:	ab07      	add	r3, sp, #28
   49862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   49864:	f7e0 fca4 	bl	2a1b0 <split_bt_invoke_behavior_payload>
}
   49868:	b00d      	add	sp, #52	; 0x34
   4986a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   4986e:	b002      	add	sp, #8
   49870:	4770      	bx	lr

00049872 <raise_usb_status_changed_event>:
static void raise_usb_status_changed_event(struct k_work *_work) {
   49872:	b508      	push	{r3, lr}
    ZMK_EVENT_RAISE(new_zmk_usb_conn_state_changed(
   49874:	f7e0 ffd8 	bl	2a828 <zmk_usb_get_conn_state>
   49878:	f7df fba2 	bl	28fc0 <new_zmk_usb_conn_state_changed>
}
   4987c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ZMK_EVENT_RAISE(new_zmk_usb_conn_state_changed(
   49880:	f7ff bc25 	b.w	490ce <zmk_event_manager_raise>

00049884 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   49884:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   49886:	2364      	movs	r3, #100	; 0x64
{
   49888:	4605      	mov	r5, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   4988a:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   4988c:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   4988e:	270a      	movs	r7, #10
	while (buflen > 0 && divisor > 0) {
   49890:	b969      	cbnz	r1, 498ae <u8_to_dec+0x2a>
	if (buflen) {
		*buf = '\0';
	}

	return num_digits;
}
   49892:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   49894:	429a      	cmp	r2, r3
   49896:	fbb2 f4f3 	udiv	r4, r2, r3
   4989a:	d20c      	bcs.n	498b6 <u8_to_dec+0x32>
   4989c:	2b01      	cmp	r3, #1
   4989e:	d00a      	beq.n	498b6 <u8_to_dec+0x32>
   498a0:	b948      	cbnz	r0, 498b6 <u8_to_dec+0x32>
		value -= digit * divisor;
   498a2:	fb03 2214 	mls	r2, r3, r4, r2
   498a6:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   498a8:	240a      	movs	r4, #10
   498aa:	fbb3 f3f4 	udiv	r3, r3, r4
	while (buflen > 0 && divisor > 0) {
   498ae:	3e01      	subs	r6, #1
   498b0:	d1f0      	bne.n	49894 <u8_to_dec+0x10>
		*buf = '\0';
   498b2:	702e      	strb	r6, [r5, #0]
	return num_digits;
   498b4:	e7ed      	b.n	49892 <u8_to_dec+0xe>
			*buf = (char)digit + '0';
   498b6:	3430      	adds	r4, #48	; 0x30
   498b8:	f805 4b01 	strb.w	r4, [r5], #1
			buflen--;
   498bc:	fbb2 f4f3 	udiv	r4, r2, r3
   498c0:	3901      	subs	r1, #1
   498c2:	fb03 2214 	mls	r2, r3, r4, r2
			num_digits++;
   498c6:	3001      	adds	r0, #1
		divisor /= 10;
   498c8:	fbb3 f3f7 	udiv	r3, r3, r7
			buflen--;
   498cc:	b2c9      	uxtb	r1, r1
			num_digits++;
   498ce:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   498d0:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   498d2:	b2db      	uxtb	r3, r3
   498d4:	e7dc      	b.n	49890 <u8_to_dec+0xc>

000498d6 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   498d6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   498da:	b2db      	uxtb	r3, r3
   498dc:	2b09      	cmp	r3, #9
   498de:	d802      	bhi.n	498e6 <char2hex+0x10>
		*x = c - '0';
   498e0:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   498e2:	2000      	movs	r0, #0
   498e4:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   498e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   498ea:	2b05      	cmp	r3, #5
   498ec:	d802      	bhi.n	498f4 <char2hex+0x1e>
		*x = c - 'a' + 10;
   498ee:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   498f0:	b2c3      	uxtb	r3, r0
   498f2:	e7f5      	b.n	498e0 <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   498f4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   498f8:	2b05      	cmp	r3, #5
   498fa:	d801      	bhi.n	49900 <char2hex+0x2a>
		*x = c - 'A' + 10;
   498fc:	3837      	subs	r0, #55	; 0x37
   498fe:	e7f7      	b.n	498f0 <char2hex+0x1a>
		return -EINVAL;
   49900:	f06f 0015 	mvn.w	r0, #21
}
   49904:	4770      	bx	lr

00049906 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   49906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   49908:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   4990a:	f001 0001 	and.w	r0, r1, #1
   4990e:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   49912:	429e      	cmp	r6, r3
   49914:	ea4f 0751 	mov.w	r7, r1, lsr #1
   49918:	d903      	bls.n	49922 <hex2bin+0x1c>
		return 0;
   4991a:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   4991c:	4630      	mov	r0, r6
   4991e:	b003      	add	sp, #12
   49920:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   49922:	b158      	cbz	r0, 4993c <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   49924:	7828      	ldrb	r0, [r5, #0]
   49926:	f10d 0107 	add.w	r1, sp, #7
   4992a:	f7ff ffd4 	bl	498d6 <char2hex>
   4992e:	2800      	cmp	r0, #0
   49930:	dbf3      	blt.n	4991a <hex2bin+0x14>
		buf[0] = dec;
   49932:	f89d 3007 	ldrb.w	r3, [sp, #7]
   49936:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   4993a:	3501      	adds	r5, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   4993c:	3501      	adds	r5, #1
   4993e:	4417      	add	r7, r2
   49940:	42ba      	cmp	r2, r7
   49942:	d0eb      	beq.n	4991c <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   49944:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   49948:	f10d 0107 	add.w	r1, sp, #7
   4994c:	f7ff ffc3 	bl	498d6 <char2hex>
   49950:	2800      	cmp	r0, #0
   49952:	dbe2      	blt.n	4991a <hex2bin+0x14>
		buf[i] = dec << 4;
   49954:	f89d 4007 	ldrb.w	r4, [sp, #7]
   49958:	0124      	lsls	r4, r4, #4
   4995a:	b2e4      	uxtb	r4, r4
   4995c:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   4995e:	f815 0b02 	ldrb.w	r0, [r5], #2
   49962:	f7ff ffb8 	bl	498d6 <char2hex>
   49966:	2800      	cmp	r0, #0
   49968:	dbd7      	blt.n	4991a <hex2bin+0x14>
		buf[i] += dec;
   4996a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   4996e:	441c      	add	r4, r3
   49970:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   49974:	e7e4      	b.n	49940 <hex2bin+0x3a>

00049976 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   49976:	4603      	mov	r3, r0
   49978:	b140      	cbz	r0, 4998c <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   4997a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   4997c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   49980:	2a02      	cmp	r2, #2
   49982:	d006      	beq.n	49992 <sys_notify_validate+0x1c>
   49984:	2a03      	cmp	r2, #3
   49986:	d004      	beq.n	49992 <sys_notify_validate+0x1c>
   49988:	2a01      	cmp	r2, #1
   4998a:	d005      	beq.n	49998 <sys_notify_validate+0x22>
   4998c:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   49990:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   49992:	681a      	ldr	r2, [r3, #0]
   49994:	2a00      	cmp	r2, #0
   49996:	d0f9      	beq.n	4998c <sys_notify_validate+0x16>
		notify->result = 0;
   49998:	2000      	movs	r0, #0
   4999a:	6098      	str	r0, [r3, #8]
   4999c:	4770      	bx	lr

0004999e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   4999e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   499a0:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   499a4:	2a02      	cmp	r2, #2
{
   499a6:	b510      	push	{r4, lr}
   499a8:	4603      	mov	r3, r0
	notify->result = res;
   499aa:	6081      	str	r1, [r0, #8]
	switch (method) {
   499ac:	f04f 0400 	mov.w	r4, #0
   499b0:	d007      	beq.n	499c2 <sys_notify_finalize+0x24>
   499b2:	2a03      	cmp	r2, #3
   499b4:	d002      	beq.n	499bc <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   499b6:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   499b8:	2000      	movs	r0, #0
   499ba:	e001      	b.n	499c0 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   499bc:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   499be:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   499c0:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   499c2:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   499c4:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   499c6:	2800      	cmp	r0, #0
   499c8:	d0f6      	beq.n	499b8 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   499ca:	f7ff fb1b 	bl	49004 <z_impl_k_poll_signal_raise>
   499ce:	e7f3      	b.n	499b8 <sys_notify_finalize+0x1a>

000499d0 <arch_printk_char_out>:
}
   499d0:	2000      	movs	r0, #0
   499d2:	4770      	bx	lr

000499d4 <str_out>:
{
   499d4:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   499d6:	688a      	ldr	r2, [r1, #8]
   499d8:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   499da:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   499dc:	b114      	cbz	r4, 499e4 <str_out+0x10>
   499de:	684b      	ldr	r3, [r1, #4]
   499e0:	4293      	cmp	r3, r2
   499e2:	dc01      	bgt.n	499e8 <str_out+0x14>
		ctx->count++;
   499e4:	608d      	str	r5, [r1, #8]
}
   499e6:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   499e8:	3b01      	subs	r3, #1
   499ea:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   499ec:	bf08      	it	eq
   499ee:	2200      	moveq	r2, #0
   499f0:	608d      	str	r5, [r1, #8]
   499f2:	bf0c      	ite	eq
   499f4:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   499f6:	54a0      	strbne	r0, [r4, r2]
   499f8:	e7f5      	b.n	499e6 <str_out+0x12>

000499fa <printk>:
{
   499fa:	b40f      	push	{r0, r1, r2, r3}
   499fc:	b507      	push	{r0, r1, r2, lr}
   499fe:	a904      	add	r1, sp, #16
   49a00:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   49a04:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   49a06:	f7e0 ff97 	bl	2a938 <vprintk>
}
   49a0a:	b003      	add	sp, #12
   49a0c:	f85d eb04 	ldr.w	lr, [sp], #4
   49a10:	b004      	add	sp, #16
   49a12:	4770      	bx	lr

00049a14 <snprintk>:
{
   49a14:	b40c      	push	{r2, r3}
   49a16:	b507      	push	{r0, r1, r2, lr}
   49a18:	ab04      	add	r3, sp, #16
   49a1a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   49a1e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   49a20:	f7e0 ff98 	bl	2a954 <vsnprintk>
}
   49a24:	b003      	add	sp, #12
   49a26:	f85d eb04 	ldr.w	lr, [sp], #4
   49a2a:	b002      	add	sp, #8
   49a2c:	4770      	bx	lr

00049a2e <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   49a2e:	b510      	push	{r4, lr}
	return list->head;
   49a30:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   49a32:	2200      	movs	r2, #0
   49a34:	b90b      	cbnz	r3, 49a3a <sys_slist_find_and_remove+0xc>
   49a36:	4618      	mov	r0, r3
   49a38:	e00b      	b.n	49a52 <sys_slist_find_and_remove+0x24>
   49a3a:	428b      	cmp	r3, r1
   49a3c:	d10f      	bne.n	49a5e <sys_slist_find_and_remove+0x30>
	return node->next;
   49a3e:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   49a40:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   49a42:	b93a      	cbnz	r2, 49a54 <sys_slist_find_and_remove+0x26>
   49a44:	42a1      	cmp	r1, r4
	list->head = node;
   49a46:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   49a48:	d100      	bne.n	49a4c <sys_slist_find_and_remove+0x1e>
	list->tail = node;
   49a4a:	6043      	str	r3, [r0, #4]
	parent->next = child;
   49a4c:	2300      	movs	r3, #0
   49a4e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   49a50:	2001      	movs	r0, #1
   49a52:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   49a54:	42a1      	cmp	r1, r4
	parent->next = child;
   49a56:	6013      	str	r3, [r2, #0]
	list->tail = node;
   49a58:	bf08      	it	eq
   49a5a:	6042      	streq	r2, [r0, #4]
}
   49a5c:	e7f6      	b.n	49a4c <sys_slist_find_and_remove+0x1e>
	return node->next;
   49a5e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   49a60:	681b      	ldr	r3, [r3, #0]
   49a62:	e7e7      	b.n	49a34 <sys_slist_find_and_remove+0x6>

00049a64 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   49a64:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   49a66:	f013 0307 	ands.w	r3, r3, #7
   49a6a:	d105      	bne.n	49a78 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   49a6c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   49a6e:	2b00      	cmp	r3, #0
   49a70:	bf0c      	ite	eq
   49a72:	2000      	moveq	r0, #0
   49a74:	2003      	movne	r0, #3
   49a76:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   49a78:	2b02      	cmp	r3, #2
   49a7a:	d105      	bne.n	49a88 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   49a7c:	8b40      	ldrh	r0, [r0, #26]
   49a7e:	fab0 f080 	clz	r0, r0
   49a82:	0940      	lsrs	r0, r0, #5
   49a84:	0080      	lsls	r0, r0, #2
   49a86:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   49a88:	2b01      	cmp	r3, #1
   49a8a:	d105      	bne.n	49a98 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   49a8c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   49a8e:	2b00      	cmp	r3, #0
   49a90:	bf0c      	ite	eq
   49a92:	2000      	moveq	r0, #0
   49a94:	2005      	movne	r0, #5
   49a96:	4770      	bx	lr
	int evt = EVT_NOP;
   49a98:	2000      	movs	r0, #0
}
   49a9a:	4770      	bx	lr

00049a9c <validate_args>:
{
   49a9c:	b510      	push	{r4, lr}
   49a9e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   49aa0:	b100      	cbz	r0, 49aa4 <validate_args+0x8>
   49aa2:	b911      	cbnz	r1, 49aaa <validate_args+0xe>
		return -EINVAL;
   49aa4:	f06f 0015 	mvn.w	r0, #21
}
   49aa8:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   49aaa:	1d08      	adds	r0, r1, #4
   49aac:	f7ff ff63 	bl	49976 <sys_notify_validate>
	if ((rv == 0)
   49ab0:	2800      	cmp	r0, #0
   49ab2:	d1f9      	bne.n	49aa8 <validate_args+0xc>
	    && ((cli->notify.flags
   49ab4:	68a3      	ldr	r3, [r4, #8]
   49ab6:	2b03      	cmp	r3, #3
   49ab8:	d9f6      	bls.n	49aa8 <validate_args+0xc>
   49aba:	e7f3      	b.n	49aa4 <validate_args+0x8>

00049abc <notify_one>:
{
   49abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   49ac0:	460d      	mov	r5, r1
   49ac2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   49ac4:	4619      	mov	r1, r3
   49ac6:	1d28      	adds	r0, r5, #4
{
   49ac8:	4690      	mov	r8, r2
   49aca:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   49acc:	f7ff ff67 	bl	4999e <sys_notify_finalize>
	if (cb) {
   49ad0:	4604      	mov	r4, r0
   49ad2:	b138      	cbz	r0, 49ae4 <notify_one+0x28>
		cb(mgr, cli, state, res);
   49ad4:	4633      	mov	r3, r6
   49ad6:	4642      	mov	r2, r8
   49ad8:	4629      	mov	r1, r5
   49ada:	4638      	mov	r0, r7
   49adc:	46a4      	mov	ip, r4
}
   49ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   49ae2:	4760      	bx	ip
}
   49ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00049ae8 <transition_complete>:
{
   49ae8:	b410      	push	{r4}
	__asm__ volatile(
   49aea:	f04f 0420 	mov.w	r4, #32
   49aee:	f3ef 8211 	mrs	r2, BASEPRI
   49af2:	f384 8812 	msr	BASEPRI_MAX, r4
   49af6:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   49afa:	6141      	str	r1, [r0, #20]
}
   49afc:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   49afe:	2101      	movs	r1, #1
   49b00:	f7e0 bf3c 	b.w	2a97c <process_event>

00049b04 <onoff_manager_init>:
{
   49b04:	b538      	push	{r3, r4, r5, lr}
   49b06:	460c      	mov	r4, r1
	if ((mgr == NULL)
   49b08:	4605      	mov	r5, r0
   49b0a:	b158      	cbz	r0, 49b24 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   49b0c:	b151      	cbz	r1, 49b24 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   49b0e:	680b      	ldr	r3, [r1, #0]
   49b10:	b143      	cbz	r3, 49b24 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   49b12:	684b      	ldr	r3, [r1, #4]
   49b14:	b133      	cbz	r3, 49b24 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   49b16:	221c      	movs	r2, #28
   49b18:	2100      	movs	r1, #0
   49b1a:	f002 f8a8 	bl	4bc6e <memset>
   49b1e:	612c      	str	r4, [r5, #16]
	return 0;
   49b20:	2000      	movs	r0, #0
}
   49b22:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   49b24:	f06f 0015 	mvn.w	r0, #21
   49b28:	e7fb      	b.n	49b22 <onoff_manager_init+0x1e>

00049b2a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   49b2a:	b570      	push	{r4, r5, r6, lr}
   49b2c:	4605      	mov	r5, r0
   49b2e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   49b30:	f7ff ffb4 	bl	49a9c <validate_args>

	if (rv < 0) {
   49b34:	1e04      	subs	r4, r0, #0
   49b36:	db15      	blt.n	49b64 <onoff_request+0x3a>
   49b38:	f04f 0320 	mov.w	r3, #32
   49b3c:	f3ef 8211 	mrs	r2, BASEPRI
   49b40:	f383 8812 	msr	BASEPRI_MAX, r3
   49b44:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   49b48:	8b6b      	ldrh	r3, [r5, #26]
   49b4a:	8b2c      	ldrh	r4, [r5, #24]
   49b4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   49b50:	428b      	cmp	r3, r1
   49b52:	f004 0407 	and.w	r4, r4, #7
   49b56:	d107      	bne.n	49b68 <onoff_request+0x3e>
	__asm__ volatile(
   49b58:	f382 8811 	msr	BASEPRI, r2
   49b5c:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   49b60:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   49b64:	4620      	mov	r0, r4
   49b66:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   49b68:	2c02      	cmp	r4, #2
   49b6a:	d10c      	bne.n	49b86 <onoff_request+0x5c>
		mgr->refs += 1U;
   49b6c:	3301      	adds	r3, #1
   49b6e:	836b      	strh	r3, [r5, #26]
   49b70:	f382 8811 	msr	BASEPRI, r2
   49b74:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   49b78:	2300      	movs	r3, #0
   49b7a:	4622      	mov	r2, r4
   49b7c:	4631      	mov	r1, r6
   49b7e:	4628      	mov	r0, r5
   49b80:	f7ff ff9c 	bl	49abc <notify_one>
   49b84:	e7ee      	b.n	49b64 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   49b86:	2c06      	cmp	r4, #6
   49b88:	d814      	bhi.n	49bb4 <onoff_request+0x8a>
   49b8a:	e8df f004 	tbb	[pc, r4]
   49b8e:	1304      	.short	0x1304
   49b90:	1a041313 	.word	0x1a041313
   49b94:	04          	.byte	0x04
   49b95:	00          	.byte	0x00
	parent->next = child;
   49b96:	2300      	movs	r3, #0
   49b98:	6033      	str	r3, [r6, #0]
	return list->tail;
   49b9a:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   49b9c:	b93b      	cbnz	r3, 49bae <onoff_request+0x84>
	list->head = node;
   49b9e:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   49ba2:	b9ac      	cbnz	r4, 49bd0 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   49ba4:	2102      	movs	r1, #2
   49ba6:	4628      	mov	r0, r5
   49ba8:	f7e0 fee8 	bl	2a97c <process_event>
   49bac:	e7da      	b.n	49b64 <onoff_request+0x3a>
	parent->next = child;
   49bae:	601e      	str	r6, [r3, #0]
	list->tail = node;
   49bb0:	606e      	str	r6, [r5, #4]
}
   49bb2:	e7f6      	b.n	49ba2 <onoff_request+0x78>
   49bb4:	f382 8811 	msr	BASEPRI, r2
   49bb8:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   49bbc:	f06f 0404 	mvn.w	r4, #4
   49bc0:	e7d0      	b.n	49b64 <onoff_request+0x3a>
   49bc2:	f382 8811 	msr	BASEPRI, r2
   49bc6:	f3bf 8f6f 	isb	sy
   49bca:	f06f 0485 	mvn.w	r4, #133	; 0x85
   49bce:	e7c9      	b.n	49b64 <onoff_request+0x3a>
   49bd0:	f382 8811 	msr	BASEPRI, r2
   49bd4:	f3bf 8f6f 	isb	sy
		if (notify) {
   49bd8:	e7c4      	b.n	49b64 <onoff_request+0x3a>

00049bda <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   49bda:	b510      	push	{r4, lr}
	__asm__ volatile(
   49bdc:	f04f 0320 	mov.w	r3, #32
   49be0:	f3ef 8211 	mrs	r2, BASEPRI
   49be4:	f383 8812 	msr	BASEPRI_MAX, r3
   49be8:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   49bec:	8b04      	ldrh	r4, [r0, #24]
   49bee:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   49bf2:	2c02      	cmp	r4, #2
   49bf4:	d00a      	beq.n	49c0c <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   49bf6:	2c01      	cmp	r4, #1
   49bf8:	bf0c      	ite	eq
   49bfa:	f06f 0004 	mvneq.w	r0, #4
   49bfe:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   49c02:	f382 8811 	msr	BASEPRI, r2
   49c06:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   49c0a:	e008      	b.n	49c1e <onoff_release+0x44>
	mgr->refs -= 1U;
   49c0c:	8b43      	ldrh	r3, [r0, #26]
   49c0e:	3b01      	subs	r3, #1
   49c10:	b29b      	uxth	r3, r3
   49c12:	8343      	strh	r3, [r0, #26]
	if (stop) {
   49c14:	b923      	cbnz	r3, 49c20 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   49c16:	4621      	mov	r1, r4
   49c18:	f7e0 feb0 	bl	2a97c <process_event>
	int rv = state;
   49c1c:	4620      	mov	r0, r4
}
   49c1e:	bd10      	pop	{r4, pc}
	int rv = state;
   49c20:	4620      	mov	r0, r4
   49c22:	e7ee      	b.n	49c02 <onoff_release+0x28>

00049c24 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   49c24:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   49c26:	b1b0      	cbz	r0, 49c56 <onoff_cancel+0x32>
   49c28:	b1a9      	cbz	r1, 49c56 <onoff_cancel+0x32>
	__asm__ volatile(
   49c2a:	f04f 0220 	mov.w	r2, #32
   49c2e:	f3ef 8511 	mrs	r5, BASEPRI
   49c32:	f382 8812 	msr	BASEPRI_MAX, r2
   49c36:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   49c3a:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   49c3c:	f7ff fef7 	bl	49a2e <sys_slist_find_and_remove>
   49c40:	b130      	cbz	r0, 49c50 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   49c42:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   49c46:	f385 8811 	msr	BASEPRI, r5
   49c4a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   49c4e:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   49c50:	f06f 0077 	mvn.w	r0, #119	; 0x77
   49c54:	e7f7      	b.n	49c46 <onoff_cancel+0x22>
		return -EINVAL;
   49c56:	f06f 0015 	mvn.w	r0, #21
   49c5a:	e7f8      	b.n	49c4e <onoff_cancel+0x2a>

00049c5c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   49c5c:	4604      	mov	r4, r0
   49c5e:	b508      	push	{r3, lr}
   49c60:	4608      	mov	r0, r1
   49c62:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   49c64:	461a      	mov	r2, r3
   49c66:	47a0      	blx	r4
	return z_impl_z_current_get();
   49c68:	f7fe ff0c 	bl	48a84 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   49c6c:	f7e3 f9be 	bl	2cfec <z_impl_k_thread_abort>

00049c70 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   49c70:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   49c74:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   49c76:	0840      	lsrs	r0, r0, #1
   49c78:	4770      	bx	lr

00049c7a <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   49c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   49c7c:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   49c7e:	f7ff fff7 	bl	49c70 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   49c82:	fab0 f080 	clz	r0, r0
   49c86:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   49c8a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   49c8e:	00ca      	lsls	r2, r1, #3
   49c90:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   49c94:	1d17      	adds	r7, r2, #4
{
   49c96:	460c      	mov	r4, r1
   49c98:	3206      	adds	r2, #6
   49c9a:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   49c9c:	b956      	cbnz	r6, 49cb4 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   49c9e:	2101      	movs	r1, #1
   49ca0:	fa01 f000 	lsl.w	r0, r1, r0
   49ca4:	68d9      	ldr	r1, [r3, #12]
   49ca6:	4301      	orrs	r1, r0
   49ca8:	60d9      	str	r1, [r3, #12]
		b->next = c;
   49caa:	f8cc 4010 	str.w	r4, [ip, #16]
   49cae:	53dd      	strh	r5, [r3, r7]
   49cb0:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   49cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   49cb4:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   49cb6:	3104      	adds	r1, #4
   49cb8:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   49cba:	53d8      	strh	r0, [r3, r7]
   49cbc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   49cc0:	529e      	strh	r6, [r3, r2]
   49cc2:	80c5      	strh	r5, [r0, #6]
   49cc4:	525d      	strh	r5, [r3, r1]
   49cc6:	e7f4      	b.n	49cb2 <free_list_add+0x38>

00049cc8 <free_list_remove_bidx>:
{
   49cc8:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   49cca:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   49cce:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   49cd0:	4299      	cmp	r1, r3
   49cd2:	f102 0104 	add.w	r1, r2, #4
   49cd6:	d10a      	bne.n	49cee <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   49cd8:	2301      	movs	r3, #1
   49cda:	fa03 f202 	lsl.w	r2, r3, r2
   49cde:	68c3      	ldr	r3, [r0, #12]
   49ce0:	ea23 0302 	bic.w	r3, r3, r2
   49ce4:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   49ce6:	2300      	movs	r3, #0
   49ce8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   49cec:	bd10      	pop	{r4, pc}
   49cee:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   49cf0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   49cf4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   49cf8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   49cfc:	80cb      	strh	r3, [r1, #6]
   49cfe:	8082      	strh	r2, [r0, #4]
}
   49d00:	e7f4      	b.n	49cec <free_list_remove_bidx+0x24>

00049d02 <free_list_remove>:
{
   49d02:	b508      	push	{r3, lr}
   49d04:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   49d06:	f7ff ffb3 	bl	49c70 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   49d0a:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   49d0e:	f1c2 021f 	rsb	r2, r2, #31
   49d12:	4618      	mov	r0, r3
}
   49d14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   49d18:	f7ff bfd6 	b.w	49cc8 <free_list_remove_bidx>

00049d1c <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   49d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   49d20:	fab1 f581 	clz	r5, r1
   49d24:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   49d28:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   49d2c:	4603      	mov	r3, r0
	if (b->next) {
   49d2e:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   49d32:	460e      	mov	r6, r1
	if (b->next) {
   49d34:	b1c2      	cbz	r2, 49d68 <alloc_chunk+0x4c>
   49d36:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   49d38:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   49d3c:	4618      	mov	r0, r3
   49d3e:	4621      	mov	r1, r4
   49d40:	f7ff ff96 	bl	49c70 <chunk_size>
   49d44:	42b0      	cmp	r0, r6
   49d46:	d306      	bcc.n	49d56 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   49d48:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   49d4a:	4618      	mov	r0, r3
   49d4c:	f7ff ffbc 	bl	49cc8 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   49d50:	4620      	mov	r0, r4
   49d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   49d56:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   49d5a:	3f01      	subs	r7, #1
   49d5c:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   49d5e:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   49d62:	d001      	beq.n	49d68 <alloc_chunk+0x4c>
   49d64:	4282      	cmp	r2, r0
   49d66:	d1e7      	bne.n	49d38 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   49d68:	f1c5 0220 	rsb	r2, r5, #32
   49d6c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   49d70:	4094      	lsls	r4, r2
   49d72:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   49d74:	4014      	ands	r4, r2
   49d76:	d0eb      	beq.n	49d50 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   49d78:	fa94 f2a4 	rbit	r2, r4
   49d7c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   49d80:	1d11      	adds	r1, r2, #4
   49d82:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   49d86:	4621      	mov	r1, r4
   49d88:	e7df      	b.n	49d4a <alloc_chunk+0x2e>

00049d8a <merge_chunks>:
{
   49d8a:	b538      	push	{r3, r4, r5, lr}
   49d8c:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   49d8e:	f7ff ff6f 	bl	49c70 <chunk_size>
{
   49d92:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   49d94:	4604      	mov	r4, r0
   49d96:	4611      	mov	r1, r2
   49d98:	4618      	mov	r0, r3
   49d9a:	f7ff ff69 	bl	49c70 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   49d9e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   49da2:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   49da4:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   49da6:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   49da8:	4618      	mov	r0, r3
   49daa:	f7ff ff61 	bl	49c70 <chunk_size>
	void *cmem = &buf[c];
   49dae:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   49db0:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   49db4:	bd38      	pop	{r3, r4, r5, pc}

00049db6 <split_chunks>:
{
   49db6:	b538      	push	{r3, r4, r5, lr}
   49db8:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   49dba:	f7ff ff59 	bl	49c70 <chunk_size>
{
   49dbe:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   49dc0:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   49dc2:	1a51      	subs	r1, r2, r1
   49dc4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   49dc8:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   49dca:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   49dcc:	8060      	strh	r0, [r4, #2]
   49dce:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   49dd2:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   49dd4:	8044      	strh	r4, [r0, #2]
   49dd6:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   49dda:	4618      	mov	r0, r3
   49ddc:	4611      	mov	r1, r2
   49dde:	f7ff ff47 	bl	49c70 <chunk_size>
	void *cmem = &buf[c];
   49de2:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   49de4:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   49de8:	bd38      	pop	{r3, r4, r5, pc}

00049dea <free_chunk>:
{
   49dea:	b538      	push	{r3, r4, r5, lr}
   49dec:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   49dee:	f7ff ff3f 	bl	49c70 <chunk_size>
   49df2:	460c      	mov	r4, r1
   49df4:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   49df6:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   49dfa:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   49dfc:	07da      	lsls	r2, r3, #31
   49dfe:	d40a      	bmi.n	49e16 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   49e00:	4628      	mov	r0, r5
   49e02:	f7ff ff7e 	bl	49d02 <free_list_remove>
	return c + chunk_size(h, c);
   49e06:	4621      	mov	r1, r4
   49e08:	4628      	mov	r0, r5
   49e0a:	f7ff ff31 	bl	49c70 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   49e0e:	1822      	adds	r2, r4, r0
   49e10:	4628      	mov	r0, r5
   49e12:	f7ff ffba 	bl	49d8a <merge_chunks>
		return ((uint16_t *)cmem)[f];
   49e16:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   49e1a:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   49e1c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   49e20:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   49e22:	07db      	lsls	r3, r3, #31
   49e24:	d40c      	bmi.n	49e40 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   49e26:	4628      	mov	r0, r5
   49e28:	f7ff ff6b 	bl	49d02 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   49e2c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   49e30:	4622      	mov	r2, r4
   49e32:	1a61      	subs	r1, r4, r1
   49e34:	4628      	mov	r0, r5
   49e36:	f7ff ffa8 	bl	49d8a <merge_chunks>
   49e3a:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   49e3e:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   49e40:	4621      	mov	r1, r4
   49e42:	4628      	mov	r0, r5
}
   49e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   49e48:	f7ff bf17 	b.w	49c7a <free_list_add>

00049e4c <sys_heap_free>:
	if (mem == NULL) {
   49e4c:	b161      	cbz	r1, 49e68 <sys_heap_free+0x1c>
   49e4e:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   49e50:	3904      	subs	r1, #4
   49e52:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   49e54:	f021 0307 	bic.w	r3, r1, #7
   49e58:	4403      	add	r3, r0
	free_chunk(h, c);
   49e5a:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   49e5c:	885a      	ldrh	r2, [r3, #2]
   49e5e:	f022 0201 	bic.w	r2, r2, #1
   49e62:	805a      	strh	r2, [r3, #2]
   49e64:	f7ff bfc1 	b.w	49dea <free_chunk>
}
   49e68:	4770      	bx	lr

00049e6a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   49e6a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   49e6c:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   49e6e:	b909      	cbnz	r1, 49e74 <sys_heap_alloc+0xa>
		return NULL;
   49e70:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   49e72:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   49e74:	68ab      	ldr	r3, [r5, #8]
   49e76:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   49e7a:	d9f9      	bls.n	49e70 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   49e7c:	310b      	adds	r1, #11
   49e7e:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   49e80:	4621      	mov	r1, r4
   49e82:	4628      	mov	r0, r5
   49e84:	f7ff ff4a 	bl	49d1c <alloc_chunk>
	if (c == 0U) {
   49e88:	4606      	mov	r6, r0
   49e8a:	2800      	cmp	r0, #0
   49e8c:	d0f0      	beq.n	49e70 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   49e8e:	4601      	mov	r1, r0
   49e90:	4628      	mov	r0, r5
   49e92:	f7ff feed 	bl	49c70 <chunk_size>
   49e96:	42a0      	cmp	r0, r4
   49e98:	d907      	bls.n	49eaa <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   49e9a:	1932      	adds	r2, r6, r4
   49e9c:	4628      	mov	r0, r5
   49e9e:	f7ff ff8a 	bl	49db6 <split_chunks>
		free_list_add(h, c + chunk_sz);
   49ea2:	4611      	mov	r1, r2
   49ea4:	4628      	mov	r0, r5
   49ea6:	f7ff fee8 	bl	49c7a <free_list_add>
	void *cmem = &buf[c];
   49eaa:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   49eae:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   49eb0:	8853      	ldrh	r3, [r2, #2]
   49eb2:	f043 0301 	orr.w	r3, r3, #1
   49eb6:	8053      	strh	r3, [r2, #2]
   49eb8:	3004      	adds	r0, #4
	return mem;
   49eba:	e7da      	b.n	49e72 <sys_heap_alloc+0x8>

00049ebc <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   49ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   49ec0:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   49ec4:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   49ec8:	6806      	ldr	r6, [r0, #0]
{
   49eca:	460f      	mov	r7, r1
   49ecc:	4614      	mov	r4, r2
	if (align != rew) {
   49ece:	d00c      	beq.n	49eea <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   49ed0:	424b      	negs	r3, r1
   49ed2:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   49ed4:	2b04      	cmp	r3, #4
   49ed6:	461a      	mov	r2, r3
   49ed8:	464f      	mov	r7, r9
   49eda:	bf28      	it	cs
   49edc:	2204      	movcs	r2, #4
	rew = align & -align;
   49ede:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   49ee0:	b964      	cbnz	r4, 49efc <sys_heap_aligned_alloc+0x40>
		return NULL;
   49ee2:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   49ee4:	4628      	mov	r0, r5
   49ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   49eea:	2904      	cmp	r1, #4
   49eec:	d804      	bhi.n	49ef8 <sys_heap_aligned_alloc+0x3c>
}
   49eee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   49ef2:	4611      	mov	r1, r2
   49ef4:	f7ff bfb9 	b.w	49e6a <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   49ef8:	2204      	movs	r2, #4
   49efa:	e7f1      	b.n	49ee0 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   49efc:	68b3      	ldr	r3, [r6, #8]
   49efe:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   49f02:	d9ee      	bls.n	49ee2 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   49f04:	f104 010b 	add.w	r1, r4, #11
   49f08:	4439      	add	r1, r7
   49f0a:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   49f0c:	08c9      	lsrs	r1, r1, #3
   49f0e:	4630      	mov	r0, r6
   49f10:	f7ff ff04 	bl	49d1c <alloc_chunk>
	if (c0 == 0) {
   49f14:	4680      	mov	r8, r0
   49f16:	2800      	cmp	r0, #0
   49f18:	d0e3      	beq.n	49ee2 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   49f1a:	f109 0504 	add.w	r5, r9, #4
   49f1e:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   49f22:	1e7b      	subs	r3, r7, #1
   49f24:	4435      	add	r5, r6
   49f26:	441d      	add	r5, r3
   49f28:	427f      	negs	r7, r7
   49f2a:	403d      	ands	r5, r7
   49f2c:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   49f30:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   49f32:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   49f34:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   49f36:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   49f38:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   49f3c:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   49f3e:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   49f42:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   49f46:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   49f4a:	d208      	bcs.n	49f5e <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   49f4c:	4601      	mov	r1, r0
   49f4e:	463a      	mov	r2, r7
   49f50:	4630      	mov	r0, r6
   49f52:	f7ff ff30 	bl	49db6 <split_chunks>
		free_list_add(h, c0);
   49f56:	4641      	mov	r1, r8
   49f58:	4630      	mov	r0, r6
   49f5a:	f7ff fe8e 	bl	49c7a <free_list_add>
	return c + chunk_size(h, c);
   49f5e:	4639      	mov	r1, r7
   49f60:	4630      	mov	r0, r6
   49f62:	f7ff fe85 	bl	49c70 <chunk_size>
   49f66:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   49f68:	4284      	cmp	r4, r0
   49f6a:	d207      	bcs.n	49f7c <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   49f6c:	4630      	mov	r0, r6
   49f6e:	4622      	mov	r2, r4
   49f70:	f7ff ff21 	bl	49db6 <split_chunks>
		free_list_add(h, c_end);
   49f74:	4621      	mov	r1, r4
   49f76:	4630      	mov	r0, r6
   49f78:	f7ff fe7f 	bl	49c7a <free_list_add>
	void *cmem = &buf[c];
   49f7c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   49f80:	8873      	ldrh	r3, [r6, #2]
   49f82:	f043 0301 	orr.w	r3, r3, #1
   49f86:	8073      	strh	r3, [r6, #2]
   49f88:	e7ac      	b.n	49ee4 <sys_heap_aligned_alloc+0x28>

00049f8a <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   49f8a:	3a04      	subs	r2, #4
{
   49f8c:	b4f0      	push	{r4, r5, r6, r7}
   49f8e:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   49f90:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   49f92:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   49f94:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   49f98:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   49f9c:	1a0e      	subs	r6, r1, r0
   49f9e:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   49fa0:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   49fa2:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   49fa6:	4604      	mov	r4, r0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   49fa8:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   49fac:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   49fae:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   49fb0:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   49fb2:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   49fb6:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   49fb8:	f1c2 0220 	rsb	r2, r2, #32
   49fbc:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   49fbe:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   49fc2:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   49fc6:	4294      	cmp	r4, r2
   49fc8:	d1fb      	bne.n	49fc2 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   49fca:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   49fcc:	f042 0201 	orr.w	r2, r2, #1
   49fd0:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   49fd2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   49fd6:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   49fd8:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   49fda:	8007      	strh	r7, [r0, #0]
   49fdc:	8065      	strh	r5, [r4, #2]
   49fde:	1984      	adds	r4, r0, r6
   49fe0:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   49fe4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   49fe8:	8067      	strh	r7, [r4, #2]
   49fea:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   49fec:	885a      	ldrh	r2, [r3, #2]
   49fee:	f042 0201 	orr.w	r2, r2, #1
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   49ff2:	bcf0      	pop	{r4, r5, r6, r7}
   49ff4:	805a      	strh	r2, [r3, #2]
	free_list_add(h, chunk0_size);
   49ff6:	f7ff be40 	b.w	49c7a <free_list_add>

00049ffa <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   49ffa:	4770      	bx	lr

00049ffc <read_str>:
{
   49ffc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   4a000:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   4a004:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   4a006:	4640      	mov	r0, r8
{
   4a008:	461f      	mov	r7, r3
   4a00a:	460c      	mov	r4, r1
   4a00c:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   4a00e:	f001 fdec 	bl	4bbea <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   4a012:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   4a016:	9300      	str	r3, [sp, #0]
   4a018:	b280      	uxth	r0, r0
   4a01a:	e9cd 8001 	strd	r8, r0, [sp, #4]
   4a01e:	463b      	mov	r3, r7
   4a020:	4632      	mov	r2, r6
   4a022:	4621      	mov	r1, r4
   4a024:	4628      	mov	r0, r5
   4a026:	f004 fa35 	bl	4e494 <bt_gatt_attr_read>
}
   4a02a:	b004      	add	sp, #16
   4a02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004a030 <blvl_ccc_cfg_changed>:
}
   4a030:	4770      	bx	lr

0004a032 <bas_init>:
}
   4a032:	2000      	movs	r0, #0
   4a034:	4770      	bx	lr

0004a036 <nvs_flash_rd>:
{
   4a036:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   4a038:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4a03a:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   4a03c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4a03e:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   4a040:	fa16 f181 	uxtah	r1, r6, r1
   4a044:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   4a048:	6884      	ldr	r4, [r0, #8]
   4a04a:	6824      	ldr	r4, [r4, #0]
   4a04c:	46a4      	mov	ip, r4
}
   4a04e:	bc70      	pop	{r4, r5, r6}
   4a050:	4760      	bx	ip

0004a052 <nvs_flash_block_cmp>:
{
   4a052:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4a056:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4a058:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   4a05a:	681d      	ldr	r5, [r3, #0]
   4a05c:	426d      	negs	r5, r5
{
   4a05e:	b089      	sub	sp, #36	; 0x24
   4a060:	4681      	mov	r9, r0
   4a062:	460e      	mov	r6, r1
   4a064:	4617      	mov	r7, r2
	block_size =
   4a066:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   4a06a:	b91c      	cbnz	r4, 4a074 <nvs_flash_block_cmp+0x22>
	return 0;
   4a06c:	4620      	mov	r0, r4
}
   4a06e:	b009      	add	sp, #36	; 0x24
   4a070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   4a074:	42ac      	cmp	r4, r5
   4a076:	46a0      	mov	r8, r4
   4a078:	bf28      	it	cs
   4a07a:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   4a07c:	4643      	mov	r3, r8
   4a07e:	466a      	mov	r2, sp
   4a080:	4631      	mov	r1, r6
   4a082:	4648      	mov	r0, r9
   4a084:	f7ff ffd7 	bl	4a036 <nvs_flash_rd>
		if (rc) {
   4a088:	2800      	cmp	r0, #0
   4a08a:	d1f0      	bne.n	4a06e <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   4a08c:	4642      	mov	r2, r8
   4a08e:	4669      	mov	r1, sp
   4a090:	4638      	mov	r0, r7
   4a092:	f001 fdd1 	bl	4bc38 <memcmp>
		if (rc) {
   4a096:	b920      	cbnz	r0, 4a0a2 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   4a098:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   4a09c:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   4a09e:	4447      	add	r7, r8
   4a0a0:	e7e3      	b.n	4a06a <nvs_flash_block_cmp+0x18>
			return 1;
   4a0a2:	2001      	movs	r0, #1
   4a0a4:	e7e3      	b.n	4a06e <nvs_flash_block_cmp+0x1c>

0004a0a6 <nvs_flash_cmp_const>:
{
   4a0a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4a0aa:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4a0ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   4a0ae:	681d      	ldr	r5, [r3, #0]
   4a0b0:	426d      	negs	r5, r5
{
   4a0b2:	b088      	sub	sp, #32
	block_size =
   4a0b4:	f005 0520 	and.w	r5, r5, #32
{
   4a0b8:	4607      	mov	r7, r0
   4a0ba:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   4a0bc:	4668      	mov	r0, sp
{
   4a0be:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   4a0c0:	462a      	mov	r2, r5
   4a0c2:	f001 fdd4 	bl	4bc6e <memset>
	while (len) {
   4a0c6:	b91c      	cbnz	r4, 4a0d0 <nvs_flash_cmp_const+0x2a>
	return 0;
   4a0c8:	4620      	mov	r0, r4
}
   4a0ca:	b008      	add	sp, #32
   4a0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   4a0d0:	42ac      	cmp	r4, r5
   4a0d2:	46a0      	mov	r8, r4
   4a0d4:	bf28      	it	cs
   4a0d6:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   4a0d8:	4643      	mov	r3, r8
   4a0da:	466a      	mov	r2, sp
   4a0dc:	4631      	mov	r1, r6
   4a0de:	4638      	mov	r0, r7
   4a0e0:	f7ff ffb7 	bl	4a052 <nvs_flash_block_cmp>
		if (rc) {
   4a0e4:	2800      	cmp	r0, #0
   4a0e6:	d1f0      	bne.n	4a0ca <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   4a0e8:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   4a0ec:	4446      	add	r6, r8
   4a0ee:	e7ea      	b.n	4a0c6 <nvs_flash_cmp_const+0x20>

0004a0f0 <nvs_flash_erase_sector>:
{
   4a0f0:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4a0f2:	8982      	ldrh	r2, [r0, #12]
   4a0f4:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   4a0f6:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4a0f8:	0c09      	lsrs	r1, r1, #16
{
   4a0fa:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   4a0fc:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   4a0fe:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4a100:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   4a104:	6883      	ldr	r3, [r0, #8]
   4a106:	689b      	ldr	r3, [r3, #8]
   4a108:	4798      	blx	r3
	if (rc) {
   4a10a:	b950      	cbnz	r0, 4a122 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   4a10c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   4a10e:	89a3      	ldrh	r3, [r4, #12]
   4a110:	7912      	ldrb	r2, [r2, #4]
   4a112:	4629      	mov	r1, r5
   4a114:	4620      	mov	r0, r4
   4a116:	f7ff ffc6 	bl	4a0a6 <nvs_flash_cmp_const>
		rc = -ENXIO;
   4a11a:	2800      	cmp	r0, #0
   4a11c:	bf18      	it	ne
   4a11e:	f06f 0005 	mvnne.w	r0, #5
}
   4a122:	bd38      	pop	{r3, r4, r5, pc}

0004a124 <nvs_ate_crc8_update>:
{
   4a124:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4a126:	4601      	mov	r1, r0
{
   4a128:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4a12a:	2207      	movs	r2, #7
   4a12c:	20ff      	movs	r0, #255	; 0xff
   4a12e:	f7e0 fbe5 	bl	2a8fc <crc8_ccitt>
	entry->crc8 = crc8;
   4a132:	71e0      	strb	r0, [r4, #7]
}
   4a134:	bd10      	pop	{r4, pc}

0004a136 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   4a136:	680b      	ldr	r3, [r1, #0]
   4a138:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   4a13c:	0c1a      	lsrs	r2, r3, #16
   4a13e:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   4a142:	bf08      	it	eq
   4a144:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
	*addr += (1 << ADDR_SECT_SHIFT);
   4a148:	600b      	str	r3, [r1, #0]
}
   4a14a:	4770      	bx	lr

0004a14c <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   4a14c:	7803      	ldrb	r3, [r0, #0]
   4a14e:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   4a150:	bf81      	itttt	hi
   4a152:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   4a156:	18c9      	addhi	r1, r1, r3
   4a158:	425b      	neghi	r3, r3
   4a15a:	4019      	andhi	r1, r3
}
   4a15c:	4608      	mov	r0, r1
   4a15e:	4770      	bx	lr

0004a160 <nvs_ate_valid>:
{
   4a160:	b570      	push	{r4, r5, r6, lr}
   4a162:	460c      	mov	r4, r1
   4a164:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a166:	2108      	movs	r1, #8
   4a168:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4a16a:	f7ff ffef 	bl	4a14c <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4a16e:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a170:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4a172:	4621      	mov	r1, r4
   4a174:	20ff      	movs	r0, #255	; 0xff
   4a176:	f7e0 fbc1 	bl	2a8fc <crc8_ccitt>
	if (crc8 == entry->crc8) {
   4a17a:	79e3      	ldrb	r3, [r4, #7]
   4a17c:	4283      	cmp	r3, r0
   4a17e:	d107      	bne.n	4a190 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   4a180:	89aa      	ldrh	r2, [r5, #12]
   4a182:	8863      	ldrh	r3, [r4, #2]
   4a184:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   4a186:	4283      	cmp	r3, r0
   4a188:	bf2c      	ite	cs
   4a18a:	2000      	movcs	r0, #0
   4a18c:	2001      	movcc	r0, #1
}
   4a18e:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   4a190:	2000      	movs	r0, #0
   4a192:	e7fc      	b.n	4a18e <nvs_ate_valid+0x2e>

0004a194 <nvs_close_ate_valid>:
{
   4a194:	b538      	push	{r3, r4, r5, lr}
   4a196:	4605      	mov	r5, r0
   4a198:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   4a19a:	f7ff ffe1 	bl	4a160 <nvs_ate_valid>
   4a19e:	b1a0      	cbz	r0, 4a1ca <nvs_close_ate_valid+0x36>
   4a1a0:	88a0      	ldrh	r0, [r4, #4]
   4a1a2:	b998      	cbnz	r0, 4a1cc <nvs_close_ate_valid+0x38>
   4a1a4:	8822      	ldrh	r2, [r4, #0]
   4a1a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4a1aa:	429a      	cmp	r2, r3
   4a1ac:	d10d      	bne.n	4a1ca <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a1ae:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   4a1b0:	2108      	movs	r1, #8
   4a1b2:	f7ff ffcb 	bl	4a14c <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   4a1b6:	8862      	ldrh	r2, [r4, #2]
   4a1b8:	89ab      	ldrh	r3, [r5, #12]
   4a1ba:	1a9b      	subs	r3, r3, r2
   4a1bc:	fbb3 f2f0 	udiv	r2, r3, r0
   4a1c0:	fb02 3010 	mls	r0, r2, r0, r3
   4a1c4:	fab0 f080 	clz	r0, r0
   4a1c8:	0940      	lsrs	r0, r0, #5
}
   4a1ca:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   4a1cc:	2000      	movs	r0, #0
   4a1ce:	e7fc      	b.n	4a1ca <nvs_close_ate_valid+0x36>

0004a1d0 <nvs_prev_ate>:
{
   4a1d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4a1d2:	4604      	mov	r4, r0
   4a1d4:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a1d6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4a1d8:	2108      	movs	r1, #8
   4a1da:	f7ff ffb7 	bl	4a14c <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4a1de:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a1e0:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4a1e2:	2308      	movs	r3, #8
   4a1e4:	4620      	mov	r0, r4
   4a1e6:	f7ff ff26 	bl	4a036 <nvs_flash_rd>
	if (rc) {
   4a1ea:	4606      	mov	r6, r0
   4a1ec:	2800      	cmp	r0, #0
   4a1ee:	d136      	bne.n	4a25e <nvs_prev_ate+0x8e>
	*addr += ate_size;
   4a1f0:	682b      	ldr	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   4a1f2:	89a2      	ldrh	r2, [r4, #12]
	*addr += ate_size;
   4a1f4:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   4a1f6:	b299      	uxth	r1, r3
   4a1f8:	1bd2      	subs	r2, r2, r7
   4a1fa:	4291      	cmp	r1, r2
	*addr += ate_size;
   4a1fc:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   4a1fe:	d12e      	bne.n	4a25e <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   4a200:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   4a202:	bf03      	ittte	eq
   4a204:	89e2      	ldrheq	r2, [r4, #14]
   4a206:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
   4a20a:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   4a20e:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   4a212:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4a214:	2308      	movs	r3, #8
   4a216:	466a      	mov	r2, sp
   4a218:	4620      	mov	r0, r4
   4a21a:	f7ff ff0c 	bl	4a036 <nvs_flash_rd>
	if (rc) {
   4a21e:	b9e8      	cbnz	r0, 4a25c <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   4a220:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   4a222:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   4a224:	466b      	mov	r3, sp
		if (data8[i] != value) {
   4a226:	f813 1b01 	ldrb.w	r1, [r3], #1
   4a22a:	428a      	cmp	r2, r1
   4a22c:	d10c      	bne.n	4a248 <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   4a22e:	3001      	adds	r0, #1
   4a230:	2808      	cmp	r0, #8
   4a232:	d1f8      	bne.n	4a226 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   4a234:	6863      	ldr	r3, [r4, #4]
   4a236:	e005      	b.n	4a244 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   4a238:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   4a23a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   4a23e:	0c1b      	lsrs	r3, r3, #16
   4a240:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   4a242:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   4a244:	602b      	str	r3, [r5, #0]
		return 0;
   4a246:	e00a      	b.n	4a25e <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   4a248:	4669      	mov	r1, sp
   4a24a:	4620      	mov	r0, r4
   4a24c:	f7ff ffa2 	bl	4a194 <nvs_close_ate_valid>
   4a250:	2800      	cmp	r0, #0
   4a252:	d1f1      	bne.n	4a238 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   4a254:	4629      	mov	r1, r5
   4a256:	4620      	mov	r0, r4
   4a258:	f7e0 ff20 	bl	2b09c <nvs_recover_last_ate>
   4a25c:	4606      	mov	r6, r0
}
   4a25e:	4630      	mov	r0, r6
   4a260:	b003      	add	sp, #12
   4a262:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004a264 <nvs_flash_al_wrt>:
{
   4a264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4a268:	4607      	mov	r7, r0
   4a26a:	b089      	sub	sp, #36	; 0x24
   4a26c:	4690      	mov	r8, r2
	if (!len) {
   4a26e:	461e      	mov	r6, r3
   4a270:	b91b      	cbnz	r3, 4a27a <nvs_flash_al_wrt+0x16>
		return 0;
   4a272:	2000      	movs	r0, #0
}
   4a274:	b009      	add	sp, #36	; 0x24
   4a276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   4a27a:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4a27c:	8983      	ldrh	r3, [r0, #12]
   4a27e:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   4a280:	fa14 f181 	uxtah	r1, r4, r1
   4a284:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   4a288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   4a28a:	681d      	ldr	r5, [r3, #0]
   4a28c:	426d      	negs	r5, r5
	if (blen > 0) {
   4a28e:	4035      	ands	r5, r6
   4a290:	d00c      	beq.n	4a2ac <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   4a292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   4a294:	6883      	ldr	r3, [r0, #8]
   4a296:	4621      	mov	r1, r4
   4a298:	f8d3 9004 	ldr.w	r9, [r3, #4]
   4a29c:	462b      	mov	r3, r5
   4a29e:	47c8      	blx	r9
		if (rc) {
   4a2a0:	2800      	cmp	r0, #0
   4a2a2:	d1e7      	bne.n	4a274 <nvs_flash_al_wrt+0x10>
	if (len) {
   4a2a4:	1b76      	subs	r6, r6, r5
   4a2a6:	d0e4      	beq.n	4a272 <nvs_flash_al_wrt+0xe>
		offset += blen;
   4a2a8:	442c      	add	r4, r5
		data8 += blen;
   4a2aa:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   4a2ac:	4632      	mov	r2, r6
   4a2ae:	4641      	mov	r1, r8
   4a2b0:	4668      	mov	r0, sp
   4a2b2:	f001 fcd1 	bl	4bc58 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   4a2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   4a2b8:	681a      	ldr	r2, [r3, #0]
   4a2ba:	7919      	ldrb	r1, [r3, #4]
   4a2bc:	1b92      	subs	r2, r2, r6
   4a2be:	eb0d 0006 	add.w	r0, sp, r6
   4a2c2:	f001 fcd4 	bl	4bc6e <memset>
				 fs->flash_parameters->write_block_size);
   4a2c6:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   4a2ca:	681b      	ldr	r3, [r3, #0]
   4a2cc:	6882      	ldr	r2, [r0, #8]
   4a2ce:	4621      	mov	r1, r4
   4a2d0:	6855      	ldr	r5, [r2, #4]
   4a2d2:	466a      	mov	r2, sp
   4a2d4:	47a8      	blx	r5
	return rc;
   4a2d6:	e7cd      	b.n	4a274 <nvs_flash_al_wrt+0x10>

0004a2d8 <nvs_flash_ate_wrt>:
{
   4a2d8:	b510      	push	{r4, lr}
   4a2da:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   4a2dc:	2308      	movs	r3, #8
   4a2de:	6841      	ldr	r1, [r0, #4]
{
   4a2e0:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   4a2e2:	f7ff ffbf 	bl	4a264 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   4a2e6:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   4a2e8:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   4a2ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   4a2ec:	f7ff ff2e 	bl	4a14c <nvs_al_size.isra.0>
   4a2f0:	6863      	ldr	r3, [r4, #4]
   4a2f2:	1a1b      	subs	r3, r3, r0
   4a2f4:	6063      	str	r3, [r4, #4]
}
   4a2f6:	4610      	mov	r0, r2
   4a2f8:	bd10      	pop	{r4, pc}

0004a2fa <nvs_add_gc_done_ate>:
{
   4a2fa:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   4a2fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4a300:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   4a304:	2300      	movs	r3, #0
{
   4a306:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   4a308:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   4a30c:	6883      	ldr	r3, [r0, #8]
   4a30e:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   4a312:	4668      	mov	r0, sp
   4a314:	f7ff ff06 	bl	4a124 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   4a318:	4669      	mov	r1, sp
   4a31a:	4620      	mov	r0, r4
   4a31c:	f7ff ffdc 	bl	4a2d8 <nvs_flash_ate_wrt>
}
   4a320:	b002      	add	sp, #8
   4a322:	bd10      	pop	{r4, pc}

0004a324 <nvs_gc>:
{
   4a324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4a328:	4604      	mov	r4, r0
   4a32a:	b095      	sub	sp, #84	; 0x54
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a32c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4a32e:	2108      	movs	r1, #8
   4a330:	f7ff ff0c 	bl	4a14c <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   4a334:	6863      	ldr	r3, [r4, #4]
   4a336:	0c1b      	lsrs	r3, r3, #16
   4a338:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a33a:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   4a33c:	a903      	add	r1, sp, #12
   4a33e:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   4a340:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   4a342:	f7ff fef8 	bl	4a136 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   4a346:	f8dd b00c 	ldr.w	fp, [sp, #12]
   4a34a:	89a6      	ldrh	r6, [r4, #12]
   4a34c:	445e      	add	r6, fp
   4a34e:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4a350:	aa06      	add	r2, sp, #24
   4a352:	2308      	movs	r3, #8
   4a354:	4631      	mov	r1, r6
   4a356:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   4a358:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4a35a:	f7ff fe6c 	bl	4a036 <nvs_flash_rd>
	if (rc < 0) {
   4a35e:	1e02      	subs	r2, r0, #0
   4a360:	f2c0 80a9 	blt.w	4a4b6 <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   4a364:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   4a366:	aa06      	add	r2, sp, #24
   4a368:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   4a36a:	2300      	movs	r3, #0
		if (data8[i] != value) {
   4a36c:	f812 0b01 	ldrb.w	r0, [r2], #1
   4a370:	4281      	cmp	r1, r0
   4a372:	f040 808f 	bne.w	4a494 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   4a376:	3301      	adds	r3, #1
   4a378:	2b08      	cmp	r3, #8
   4a37a:	d1f7      	bne.n	4a36c <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   4a37c:	68a3      	ldr	r3, [r4, #8]
   4a37e:	6862      	ldr	r2, [r4, #4]
   4a380:	442b      	add	r3, r5
   4a382:	429a      	cmp	r2, r3
   4a384:	d27e      	bcs.n	4a484 <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   4a386:	4659      	mov	r1, fp
   4a388:	4620      	mov	r0, r4
   4a38a:	f7ff feb1 	bl	4a0f0 <nvs_flash_erase_sector>
   4a38e:	4602      	mov	r2, r0
	if (rc) {
   4a390:	e091      	b.n	4a4b6 <nvs_gc+0x192>
		gc_addr += close_ate.offset;
   4a392:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   4a396:	0c36      	lsrs	r6, r6, #16
   4a398:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   4a39a:	441e      	add	r6, r3
   4a39c:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   4a39e:	aa08      	add	r2, sp, #32
   4a3a0:	a904      	add	r1, sp, #16
   4a3a2:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   4a3a4:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   4a3a8:	f7ff ff12 	bl	4a1d0 <nvs_prev_ate>
		if (rc) {
   4a3ac:	4602      	mov	r2, r0
   4a3ae:	2800      	cmp	r0, #0
   4a3b0:	f040 8081 	bne.w	4a4b6 <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   4a3b4:	a908      	add	r1, sp, #32
   4a3b6:	4620      	mov	r0, r4
   4a3b8:	f7ff fed2 	bl	4a160 <nvs_ate_valid>
   4a3bc:	b918      	cbnz	r0, 4a3c6 <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
   4a3be:	9b01      	ldr	r3, [sp, #4]
   4a3c0:	459a      	cmp	sl, r3
   4a3c2:	d1ec      	bne.n	4a39e <nvs_gc+0x7a>
   4a3c4:	e7da      	b.n	4a37c <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
   4a3c6:	6863      	ldr	r3, [r4, #4]
   4a3c8:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4a3ca:	aa0a      	add	r2, sp, #40	; 0x28
   4a3cc:	a905      	add	r1, sp, #20
   4a3ce:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   4a3d0:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4a3d2:	f7ff fefd 	bl	4a1d0 <nvs_prev_ate>
			if (rc) {
   4a3d6:	4602      	mov	r2, r0
   4a3d8:	2800      	cmp	r0, #0
   4a3da:	d16c      	bne.n	4a4b6 <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
   4a3dc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   4a3e0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   4a3e4:	429a      	cmp	r2, r3
   4a3e6:	d027      	beq.n	4a438 <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
   4a3e8:	6862      	ldr	r2, [r4, #4]
   4a3ea:	9b05      	ldr	r3, [sp, #20]
   4a3ec:	429a      	cmp	r2, r3
   4a3ee:	d1ec      	bne.n	4a3ca <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   4a3f0:	4556      	cmp	r6, sl
   4a3f2:	d1e4      	bne.n	4a3be <nvs_gc+0x9a>
   4a3f4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   4a3f8:	2b00      	cmp	r3, #0
   4a3fa:	d0e0      	beq.n	4a3be <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   4a3fc:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   4a400:	ea4f 431a 	mov.w	r3, sl, lsr #16
   4a404:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   4a406:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   4a408:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   4a40a:	68a3      	ldr	r3, [r4, #8]
   4a40c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   4a410:	f7ff fe88 	bl	4a124 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4a414:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   4a416:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4a41a:	681e      	ldr	r6, [r3, #0]
   4a41c:	4276      	negs	r6, r6
	block_size =
   4a41e:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   4a422:	f1b9 0f00 	cmp.w	r9, #0
   4a426:	d10e      	bne.n	4a446 <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   4a428:	a908      	add	r1, sp, #32
   4a42a:	4620      	mov	r0, r4
   4a42c:	f7ff ff54 	bl	4a2d8 <nvs_flash_ate_wrt>
			if (rc) {
   4a430:	4602      	mov	r2, r0
   4a432:	2800      	cmp	r0, #0
   4a434:	d0c3      	beq.n	4a3be <nvs_gc+0x9a>
   4a436:	e03e      	b.n	4a4b6 <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   4a438:	a90a      	add	r1, sp, #40	; 0x28
   4a43a:	4620      	mov	r0, r4
   4a43c:	f7ff fe90 	bl	4a160 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   4a440:	2800      	cmp	r0, #0
   4a442:	d0d1      	beq.n	4a3e8 <nvs_gc+0xc4>
   4a444:	e7d4      	b.n	4a3f0 <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
   4a446:	454e      	cmp	r6, r9
   4a448:	46b0      	mov	r8, r6
   4a44a:	bf28      	it	cs
   4a44c:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   4a44e:	aa0c      	add	r2, sp, #48	; 0x30
   4a450:	4643      	mov	r3, r8
   4a452:	4639      	mov	r1, r7
   4a454:	4620      	mov	r0, r4
   4a456:	f7ff fdee 	bl	4a036 <nvs_flash_rd>
		if (rc) {
   4a45a:	4602      	mov	r2, r0
   4a45c:	bb58      	cbnz	r0, 4a4b6 <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   4a45e:	4643      	mov	r3, r8
   4a460:	68a1      	ldr	r1, [r4, #8]
   4a462:	aa0c      	add	r2, sp, #48	; 0x30
   4a464:	4620      	mov	r0, r4
   4a466:	f7ff fefd 	bl	4a264 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   4a46a:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   4a46c:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   4a46e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   4a470:	f7ff fe6c 	bl	4a14c <nvs_al_size.isra.0>
   4a474:	68a3      	ldr	r3, [r4, #8]
   4a476:	4403      	add	r3, r0
   4a478:	60a3      	str	r3, [r4, #8]
		if (rc) {
   4a47a:	b9e2      	cbnz	r2, 4a4b6 <nvs_gc+0x192>
		len -= bytes_to_copy;
   4a47c:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
   4a480:	4447      	add	r7, r8
   4a482:	e7ce      	b.n	4a422 <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
   4a484:	4620      	mov	r0, r4
   4a486:	f7ff ff38 	bl	4a2fa <nvs_add_gc_done_ate>
		if (rc) {
   4a48a:	4602      	mov	r2, r0
   4a48c:	2800      	cmp	r0, #0
   4a48e:	f43f af7a 	beq.w	4a386 <nvs_gc+0x62>
   4a492:	e010      	b.n	4a4b6 <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
   4a494:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   4a496:	a906      	add	r1, sp, #24
   4a498:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   4a49a:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   4a49c:	f7ff fe7a 	bl	4a194 <nvs_close_ate_valid>
   4a4a0:	2800      	cmp	r0, #0
   4a4a2:	f47f af76 	bne.w	4a392 <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   4a4a6:	a904      	add	r1, sp, #16
   4a4a8:	4620      	mov	r0, r4
   4a4aa:	f7e0 fdf7 	bl	2b09c <nvs_recover_last_ate>
		if (rc) {
   4a4ae:	4602      	mov	r2, r0
   4a4b0:	2800      	cmp	r0, #0
   4a4b2:	f43f af74 	beq.w	4a39e <nvs_gc+0x7a>
}
   4a4b6:	4610      	mov	r0, r2
   4a4b8:	b015      	add	sp, #84	; 0x54
   4a4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0004a4be <nvs_delete>:

int nvs_delete(struct nvs_fs *fs, uint16_t id)
{
	return nvs_write(fs, id, NULL, 0);
   4a4be:	2300      	movs	r3, #0
   4a4c0:	461a      	mov	r2, r3
   4a4c2:	f7e0 bf85 	b.w	2b3d0 <nvs_write>

0004a4c6 <nvs_read_hist>:
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   4a4c6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   4a4ca:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   4a4cc:	7c03      	ldrb	r3, [r0, #16]
{
   4a4ce:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   4a4d2:	4604      	mov	r4, r0
   4a4d4:	460f      	mov	r7, r1
   4a4d6:	4690      	mov	r8, r2
	if (!fs->ready) {
   4a4d8:	2b00      	cmp	r3, #0
   4a4da:	d04e      	beq.n	4a57a <nvs_read_hist+0xb4>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a4dc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4a4de:	2108      	movs	r1, #8
   4a4e0:	f7ff fe34 	bl	4a14c <nvs_al_size.isra.0>

	if (len > (fs->sector_size - 2 * ate_size)) {
   4a4e4:	89a3      	ldrh	r3, [r4, #12]
   4a4e6:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   4a4ea:	429e      	cmp	r6, r3
   4a4ec:	d848      	bhi.n	4a580 <nvs_read_hist+0xba>
		return -EINVAL;
	}

	cnt_his = 0U;

	wlk_addr = fs->ate_wra;
   4a4ee:	f8d4 a004 	ldr.w	sl, [r4, #4]
   4a4f2:	f8cd a004 	str.w	sl, [sp, #4]
	cnt_his = 0U;
   4a4f6:	2500      	movs	r5, #0
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
   4a4f8:	45a9      	cmp	r9, r5
   4a4fa:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
   4a4fc:	f8dd a004 	ldr.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
   4a500:	d20b      	bcs.n	4a51a <nvs_read_hist+0x54>
		if (wlk_addr == fs->ate_wra) {
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   4a502:	6863      	ldr	r3, [r4, #4]
   4a504:	4553      	cmp	r3, sl
   4a506:	d120      	bne.n	4a54a <nvs_read_hist+0x84>
   4a508:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   4a50c:	42bb      	cmp	r3, r7
   4a50e:	d01c      	beq.n	4a54a <nvs_read_hist+0x84>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
		return -ENOENT;
   4a510:	f06f 0001 	mvn.w	r0, #1

	return wlk_ate.len;

err:
	return rc;
}
   4a514:	b004      	add	sp, #16
   4a516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4a51a:	aa02      	add	r2, sp, #8
   4a51c:	a901      	add	r1, sp, #4
   4a51e:	4620      	mov	r0, r4
   4a520:	f7ff fe56 	bl	4a1d0 <nvs_prev_ate>
		if (rc) {
   4a524:	2800      	cmp	r0, #0
   4a526:	d1f5      	bne.n	4a514 <nvs_read_hist+0x4e>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   4a528:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   4a52c:	42bb      	cmp	r3, r7
   4a52e:	d106      	bne.n	4a53e <nvs_read_hist+0x78>
   4a530:	a902      	add	r1, sp, #8
   4a532:	4620      	mov	r0, r4
   4a534:	f7ff fe14 	bl	4a160 <nvs_ate_valid>
   4a538:	b108      	cbz	r0, 4a53e <nvs_read_hist+0x78>
			cnt_his++;
   4a53a:	3501      	adds	r5, #1
   4a53c:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
   4a53e:	6862      	ldr	r2, [r4, #4]
   4a540:	9b01      	ldr	r3, [sp, #4]
   4a542:	429a      	cmp	r2, r3
   4a544:	d1d8      	bne.n	4a4f8 <nvs_read_hist+0x32>
		rd_addr = wlk_addr;
   4a546:	4651      	mov	r1, sl
   4a548:	e7de      	b.n	4a508 <nvs_read_hist+0x42>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   4a54a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   4a54e:	2b00      	cmp	r3, #0
   4a550:	d0de      	beq.n	4a510 <nvs_read_hist+0x4a>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   4a552:	45a9      	cmp	r9, r5
   4a554:	d8dc      	bhi.n	4a510 <nvs_read_hist+0x4a>
	rd_addr += wlk_ate.offset;
   4a556:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   4a55a:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   4a55c:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   4a55e:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   4a562:	bf28      	it	cs
   4a564:	4633      	movcs	r3, r6
   4a566:	4401      	add	r1, r0
   4a568:	4642      	mov	r2, r8
   4a56a:	4620      	mov	r0, r4
   4a56c:	f7ff fd63 	bl	4a036 <nvs_flash_rd>
	if (rc) {
   4a570:	2800      	cmp	r0, #0
   4a572:	d1cf      	bne.n	4a514 <nvs_read_hist+0x4e>
	return wlk_ate.len;
   4a574:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   4a578:	e7cc      	b.n	4a514 <nvs_read_hist+0x4e>
		return -EACCES;
   4a57a:	f06f 000c 	mvn.w	r0, #12
   4a57e:	e7c9      	b.n	4a514 <nvs_read_hist+0x4e>
		return -EINVAL;
   4a580:	f06f 0015 	mvn.w	r0, #21
   4a584:	e7c6      	b.n	4a514 <nvs_read_hist+0x4e>

0004a586 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   4a586:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   4a588:	2400      	movs	r4, #0
   4a58a:	9400      	str	r4, [sp, #0]
   4a58c:	f7ff ff9b 	bl	4a4c6 <nvs_read_hist>
	return rc;
}
   4a590:	b002      	add	sp, #8
   4a592:	bd10      	pop	{r4, pc}

0004a594 <usb_write>:
{
   4a594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4a598:	4606      	mov	r6, r0
   4a59a:	460f      	mov	r7, r1
   4a59c:	4690      	mov	r8, r2
   4a59e:	4699      	mov	r9, r3
   4a5a0:	250b      	movs	r5, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   4a5a2:	464b      	mov	r3, r9
   4a5a4:	4642      	mov	r2, r8
   4a5a6:	4639      	mov	r1, r7
   4a5a8:	4630      	mov	r0, r6
   4a5aa:	f7f9 ff7d 	bl	444a8 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
   4a5ae:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   4a5b2:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   4a5b4:	d103      	bne.n	4a5be <usb_write+0x2a>
	z_impl_k_yield();
   4a5b6:	f7fe f9c9 	bl	4894c <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
   4a5ba:	3d01      	subs	r5, #1
   4a5bc:	d1f1      	bne.n	4a5a2 <usb_write+0xe>
}
   4a5be:	4620      	mov	r0, r4
   4a5c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0004a5c4 <usb_get_dev_data_by_cfg>:
	return list->head;
   4a5c4:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4a5c6:	b140      	cbz	r0, 4a5da <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
   4a5c8:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
   4a5cc:	685b      	ldr	r3, [r3, #4]
   4a5ce:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4a5d0:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
   4a5d4:	d001      	beq.n	4a5da <usb_get_dev_data_by_cfg+0x16>
	return node->next;
   4a5d6:	6840      	ldr	r0, [r0, #4]
   4a5d8:	e7f5      	b.n	4a5c6 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   4a5da:	4770      	bx	lr

0004a5dc <usb_get_dev_data_by_iface>:
	return list->head;
   4a5dc:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4a5de:	b150      	cbz	r0, 4a5f6 <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   4a5e0:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
   4a5e4:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   4a5e6:	685b      	ldr	r3, [r3, #4]
   4a5e8:	789b      	ldrb	r3, [r3, #2]
   4a5ea:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4a5ec:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
   4a5f0:	d001      	beq.n	4a5f6 <usb_get_dev_data_by_iface+0x1a>
	return node->next;
   4a5f2:	6840      	ldr	r0, [r0, #4]
   4a5f4:	e7f3      	b.n	4a5de <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   4a5f6:	4770      	bx	lr

0004a5f8 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
   4a5f8:	b530      	push	{r4, r5, lr}
	return list->head;
   4a5fa:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4a5fc:	b188      	cbz	r0, 4a622 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   4a5fe:	f850 3c04 	ldr.w	r3, [r0, #-4]
   4a602:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   4a604:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   4a606:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4a608:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   4a60a:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
   4a60c:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   4a60e:	b2dc      	uxtb	r4, r3
   4a610:	42a5      	cmp	r5, r4
   4a612:	d801      	bhi.n	4a618 <usb_get_dev_data_by_ep+0x20>
	return node->next;
   4a614:	6840      	ldr	r0, [r0, #4]
   4a616:	e7f1      	b.n	4a5fc <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
   4a618:	3301      	adds	r3, #1
   4a61a:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
   4a61e:	428c      	cmp	r4, r1
   4a620:	d1f5      	bne.n	4a60e <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   4a622:	bd30      	pop	{r4, r5, pc}

0004a624 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   4a624:	4770      	bx	lr

0004a626 <get_sectors_cb>:
{
   4a626:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   4a628:	6802      	ldr	r2, [r0, #0]
   4a62a:	684c      	ldr	r4, [r1, #4]
   4a62c:	42a2      	cmp	r2, r4
   4a62e:	d201      	bcs.n	4a634 <get_sectors_cb+0xe>
		*bail_value = true;
   4a630:	2001      	movs	r0, #1
}
   4a632:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   4a634:	688b      	ldr	r3, [r1, #8]
   4a636:	4423      	add	r3, r4
   4a638:	429a      	cmp	r2, r3
   4a63a:	d301      	bcc.n	4a640 <get_sectors_cb+0x1a>
		*bail_value = false;
   4a63c:	2000      	movs	r0, #0
   4a63e:	e7f8      	b.n	4a632 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
   4a640:	e9d1 5303 	ldrd	r5, r3, [r1, #12]
   4a644:	694e      	ldr	r6, [r1, #20]
   4a646:	42b3      	cmp	r3, r6
   4a648:	d303      	bcc.n	4a652 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
   4a64a:	f06f 030b 	mvn.w	r3, #11
   4a64e:	618b      	str	r3, [r1, #24]
		return true;
   4a650:	e7f4      	b.n	4a63c <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   4a652:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   4a656:	1b12      	subs	r2, r2, r4
   4a658:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   4a65c:	6842      	ldr	r2, [r0, #4]
   4a65e:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   4a660:	3301      	adds	r3, #1
   4a662:	610b      	str	r3, [r1, #16]
	return true;
   4a664:	e7e4      	b.n	4a630 <get_sectors_cb+0xa>

0004a666 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   4a666:	2200      	movs	r2, #0
   4a668:	4611      	mov	r1, r2
   4a66a:	f7e1 bdf1 	b.w	2c250 <settings_save_one>

0004a66e <settings_name_steq>:
{
   4a66e:	4603      	mov	r3, r0
   4a670:	b510      	push	{r4, lr}
   4a672:	4608      	mov	r0, r1
	if (next) {
   4a674:	b10a      	cbz	r2, 4a67a <settings_name_steq+0xc>
		*next = NULL;
   4a676:	2100      	movs	r1, #0
   4a678:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   4a67a:	b153      	cbz	r3, 4a692 <settings_name_steq+0x24>
   4a67c:	b1d0      	cbz	r0, 4a6b4 <settings_name_steq+0x46>
   4a67e:	1e41      	subs	r1, r0, #1
	while ((*key != '\0') && (*key == *name) &&
   4a680:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   4a684:	b180      	cbz	r0, 4a6a8 <settings_name_steq+0x3a>
	while ((*key != '\0') && (*key == *name) &&
   4a686:	f813 4b01 	ldrb.w	r4, [r3], #1
   4a68a:	42a0      	cmp	r0, r4
   4a68c:	d101      	bne.n	4a692 <settings_name_steq+0x24>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   4a68e:	283d      	cmp	r0, #61	; 0x3d
   4a690:	d1f6      	bne.n	4a680 <settings_name_steq+0x12>
		return 0;
   4a692:	2000      	movs	r0, #0
   4a694:	e00e      	b.n	4a6b4 <settings_name_steq+0x46>
			*next = name + 1;
   4a696:	3301      	adds	r3, #1
   4a698:	6013      	str	r3, [r2, #0]
   4a69a:	e00a      	b.n	4a6b2 <settings_name_steq+0x44>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   4a69c:	283d      	cmp	r0, #61	; 0x3d
   4a69e:	d008      	beq.n	4a6b2 <settings_name_steq+0x44>
   4a6a0:	fab0 f080 	clz	r0, r0
   4a6a4:	0940      	lsrs	r0, r0, #5
   4a6a6:	e005      	b.n	4a6b4 <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   4a6a8:	7818      	ldrb	r0, [r3, #0]
   4a6aa:	282f      	cmp	r0, #47	; 0x2f
   4a6ac:	d1f6      	bne.n	4a69c <settings_name_steq+0x2e>
		if (next) {
   4a6ae:	2a00      	cmp	r2, #0
   4a6b0:	d1f1      	bne.n	4a696 <settings_name_steq+0x28>
		return 1;
   4a6b2:	2001      	movs	r0, #1
}
   4a6b4:	bd10      	pop	{r4, pc}

0004a6b6 <settings_name_next>:
{
   4a6b6:	b510      	push	{r4, lr}
	if (next) {
   4a6b8:	b109      	cbz	r1, 4a6be <settings_name_next+0x8>
		*next = NULL;
   4a6ba:	2300      	movs	r3, #0
   4a6bc:	600b      	str	r3, [r1, #0]
	if (!name) {
   4a6be:	b158      	cbz	r0, 4a6d8 <settings_name_next+0x22>
   4a6c0:	4603      	mov	r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   4a6c2:	781a      	ldrb	r2, [r3, #0]
   4a6c4:	461c      	mov	r4, r3
   4a6c6:	3301      	adds	r3, #1
   4a6c8:	b12a      	cbz	r2, 4a6d6 <settings_name_next+0x20>
   4a6ca:	2a3d      	cmp	r2, #61	; 0x3d
   4a6cc:	d003      	beq.n	4a6d6 <settings_name_next+0x20>
   4a6ce:	2a2f      	cmp	r2, #47	; 0x2f
   4a6d0:	d1f7      	bne.n	4a6c2 <settings_name_next+0xc>
		if (next) {
   4a6d2:	b101      	cbz	r1, 4a6d6 <settings_name_next+0x20>
			*next = name + 1;
   4a6d4:	600b      	str	r3, [r1, #0]
   4a6d6:	1a20      	subs	r0, r4, r0
}
   4a6d8:	bd10      	pop	{r4, pc}

0004a6da <settings_call_set_handler>:
{
   4a6da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   4a6de:	f8dd 8020 	ldr.w	r8, [sp, #32]
	const char *name_key = name;
   4a6e2:	9001      	str	r0, [sp, #4]
{
   4a6e4:	4607      	mov	r7, r0
   4a6e6:	460c      	mov	r4, r1
   4a6e8:	4615      	mov	r5, r2
   4a6ea:	461e      	mov	r6, r3
	if (load_arg && load_arg->subtree &&
   4a6ec:	f1b8 0f00 	cmp.w	r8, #0
   4a6f0:	d007      	beq.n	4a702 <settings_call_set_handler+0x28>
   4a6f2:	f8d8 1000 	ldr.w	r1, [r8]
   4a6f6:	b981      	cbnz	r1, 4a71a <settings_call_set_handler+0x40>
	if (load_arg && load_arg->cb) {
   4a6f8:	f8d8 e004 	ldr.w	lr, [r8, #4]
   4a6fc:	f1be 0f00 	cmp.w	lr, #0
   4a700:	d114      	bne.n	4a72c <settings_call_set_handler+0x52>
		ch = settings_parse_and_lookup(name, &name_key);
   4a702:	a901      	add	r1, sp, #4
   4a704:	4638      	mov	r0, r7
   4a706:	f7e1 fe73 	bl	2c3f0 <settings_parse_and_lookup>
		if (!ch) {
   4a70a:	b158      	cbz	r0, 4a724 <settings_call_set_handler+0x4a>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   4a70c:	6887      	ldr	r7, [r0, #8]
   4a70e:	9801      	ldr	r0, [sp, #4]
   4a710:	4633      	mov	r3, r6
   4a712:	462a      	mov	r2, r5
   4a714:	4621      	mov	r1, r4
   4a716:	47b8      	blx	r7
		if (rc != 0) {
   4a718:	e004      	b.n	4a724 <settings_call_set_handler+0x4a>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   4a71a:	aa01      	add	r2, sp, #4
   4a71c:	f7ff ffa7 	bl	4a66e <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   4a720:	2800      	cmp	r0, #0
   4a722:	d1e9      	bne.n	4a6f8 <settings_call_set_handler+0x1e>
}
   4a724:	2000      	movs	r0, #0
   4a726:	b002      	add	sp, #8
   4a728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   4a72c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   4a730:	9801      	ldr	r0, [sp, #4]
   4a732:	9308      	str	r3, [sp, #32]
   4a734:	462a      	mov	r2, r5
   4a736:	4633      	mov	r3, r6
   4a738:	4621      	mov	r1, r4
   4a73a:	46f4      	mov	ip, lr
}
   4a73c:	b002      	add	sp, #8
   4a73e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   4a742:	4760      	bx	ip

0004a744 <settings_nvs_read_fn>:
{
   4a744:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   4a746:	4613      	mov	r3, r2
{
   4a748:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   4a74a:	460a      	mov	r2, r1
   4a74c:	8881      	ldrh	r1, [r0, #4]
   4a74e:	6800      	ldr	r0, [r0, #0]
   4a750:	f7ff ff19 	bl	4a586 <nvs_read>
}
   4a754:	42a0      	cmp	r0, r4
   4a756:	bfa8      	it	ge
   4a758:	4620      	movge	r0, r4
   4a75a:	bd10      	pop	{r4, pc}

0004a75c <settings_nvs_save>:
{
   4a75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4a760:	b097      	sub	sp, #92	; 0x5c
   4a762:	4604      	mov	r4, r0
   4a764:	9201      	str	r2, [sp, #4]
   4a766:	469a      	mov	sl, r3
	if (!name) {
   4a768:	4689      	mov	r9, r1
   4a76a:	2900      	cmp	r1, #0
   4a76c:	d07e      	beq.n	4a86c <settings_nvs_save+0x110>
	delete = ((value == NULL) || (val_len == 0));
   4a76e:	b1da      	cbz	r2, 4a7a8 <settings_nvs_save+0x4c>
   4a770:	faba f78a 	clz	r7, sl
   4a774:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   4a776:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   4a778:	3501      	adds	r5, #1
   4a77a:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   4a77c:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   4a77e:	f104 0b08 	add.w	fp, r4, #8
		name_id--;
   4a782:	1e6e      	subs	r6, r5, #1
   4a784:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   4a786:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   4a78a:	d040      	beq.n	4a80e <settings_nvs_save+0xb2>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   4a78c:	234a      	movs	r3, #74	; 0x4a
   4a78e:	aa03      	add	r2, sp, #12
   4a790:	4631      	mov	r1, r6
   4a792:	4658      	mov	r0, fp
   4a794:	f7ff fef7 	bl	4a586 <nvs_read>
		if (rc < 0) {
   4a798:	2800      	cmp	r0, #0
   4a79a:	da07      	bge.n	4a7ac <settings_nvs_save+0x50>
		name_id--;
   4a79c:	f110 0f02 	cmn.w	r0, #2
   4a7a0:	bf08      	it	eq
   4a7a2:	46b0      	moveq	r8, r6
   4a7a4:	4635      	mov	r5, r6
   4a7a6:	e7ec      	b.n	4a782 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   4a7a8:	2701      	movs	r7, #1
   4a7aa:	e7e4      	b.n	4a776 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   4a7ac:	f100 0358 	add.w	r3, r0, #88	; 0x58
   4a7b0:	eb0d 0003 	add.w	r0, sp, r3
   4a7b4:	2300      	movs	r3, #0
   4a7b6:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   4a7ba:	a903      	add	r1, sp, #12
   4a7bc:	4648      	mov	r0, r9
   4a7be:	f001 fa1b 	bl	4bbf8 <strcmp>
   4a7c2:	2800      	cmp	r0, #0
   4a7c4:	d1ee      	bne.n	4a7a4 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   4a7c6:	b32f      	cbz	r7, 4a814 <settings_nvs_save+0xb8>
   4a7c8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   4a7ca:	42b3      	cmp	r3, r6
   4a7cc:	d008      	beq.n	4a7e0 <settings_nvs_save+0x84>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   4a7ce:	4631      	mov	r1, r6
   4a7d0:	4658      	mov	r0, fp
   4a7d2:	f7ff fe74 	bl	4a4be <nvs_delete>
			if (rc >= 0) {
   4a7d6:	2800      	cmp	r0, #0
   4a7d8:	da0f      	bge.n	4a7fa <settings_nvs_save+0x9e>
}
   4a7da:	b017      	add	sp, #92	; 0x5c
   4a7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cf->last_name_id--;
   4a7e0:	4622      	mov	r2, r4
   4a7e2:	1e73      	subs	r3, r6, #1
   4a7e4:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   4a7e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   4a7ec:	2302      	movs	r3, #2
   4a7ee:	4658      	mov	r0, fp
   4a7f0:	f7e0 fdee 	bl	2b3d0 <nvs_write>
			if (rc < 0) {
   4a7f4:	2800      	cmp	r0, #0
   4a7f6:	daea      	bge.n	4a7ce <settings_nvs_save+0x72>
   4a7f8:	e7ef      	b.n	4a7da <settings_nvs_save+0x7e>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   4a7fa:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   4a7fe:	313f      	adds	r1, #63	; 0x3f
   4a800:	b289      	uxth	r1, r1
   4a802:	4658      	mov	r0, fp
   4a804:	f7ff fe5b 	bl	4a4be <nvs_delete>
	if (rc < 0) {
   4a808:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   4a80c:	e7e5      	b.n	4a7da <settings_nvs_save+0x7e>
	if (delete) {
   4a80e:	b1ff      	cbz	r7, 4a850 <settings_nvs_save+0xf4>
			return 0;
   4a810:	2000      	movs	r0, #0
   4a812:	e7e2      	b.n	4a7da <settings_nvs_save+0x7e>
		name_id--;
   4a814:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   4a816:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   4a81a:	d02a      	beq.n	4a872 <settings_nvs_save+0x116>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   4a81c:	f104 0508 	add.w	r5, r4, #8
   4a820:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   4a824:	9a01      	ldr	r2, [sp, #4]
   4a826:	4653      	mov	r3, sl
   4a828:	b289      	uxth	r1, r1
   4a82a:	4628      	mov	r0, r5
   4a82c:	f7e0 fdd0 	bl	2b3d0 <nvs_write>
	if (rc < 0) {
   4a830:	2800      	cmp	r0, #0
   4a832:	dbd2      	blt.n	4a7da <settings_nvs_save+0x7e>
	if (write_name) {
   4a834:	b977      	cbnz	r7, 4a854 <settings_nvs_save+0xf8>
	if (write_name_id > cf->last_name_id) {
   4a836:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   4a838:	4543      	cmp	r3, r8
   4a83a:	d2e9      	bcs.n	4a810 <settings_nvs_save+0xb4>
		cf->last_name_id = write_name_id;
   4a83c:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   4a83e:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   4a840:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   4a844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   4a848:	4628      	mov	r0, r5
   4a84a:	f7e0 fdc1 	bl	2b3d0 <nvs_write>
   4a84e:	e7db      	b.n	4a808 <settings_nvs_save+0xac>
	write_name = true;
   4a850:	2701      	movs	r7, #1
   4a852:	e7e0      	b.n	4a816 <settings_nvs_save+0xba>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   4a854:	4648      	mov	r0, r9
   4a856:	f001 f9c8 	bl	4bbea <strlen>
   4a85a:	464a      	mov	r2, r9
   4a85c:	4603      	mov	r3, r0
   4a85e:	4641      	mov	r1, r8
   4a860:	4628      	mov	r0, r5
   4a862:	f7e0 fdb5 	bl	2b3d0 <nvs_write>
		if (rc < 0) {
   4a866:	2800      	cmp	r0, #0
   4a868:	dae5      	bge.n	4a836 <settings_nvs_save+0xda>
   4a86a:	e7b6      	b.n	4a7da <settings_nvs_save+0x7e>
		return -EINVAL;
   4a86c:	f06f 0015 	mvn.w	r0, #21
   4a870:	e7b3      	b.n	4a7da <settings_nvs_save+0x7e>
		return -ENOMEM;
   4a872:	f06f 000b 	mvn.w	r0, #11
   4a876:	e7b0      	b.n	4a7da <settings_nvs_save+0x7e>

0004a878 <settings_nvs_backend_init>:
{
   4a878:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   4a87a:	f100 0608 	add.w	r6, r0, #8
   4a87e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   4a880:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   4a882:	4630      	mov	r0, r6
   4a884:	f7e0 fc3c 	bl	2b100 <nvs_init>
	if (rc) {
   4a888:	4605      	mov	r5, r0
   4a88a:	b970      	cbnz	r0, 4a8aa <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   4a88c:	2302      	movs	r3, #2
   4a88e:	f10d 0206 	add.w	r2, sp, #6
   4a892:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   4a896:	4630      	mov	r0, r6
   4a898:	f7ff fe75 	bl	4a586 <nvs_read>
	if (rc < 0) {
   4a89c:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   4a89e:	bfac      	ite	ge
   4a8a0:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   4a8a4:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
   4a8a8:	8723      	strh	r3, [r4, #56]	; 0x38
}
   4a8aa:	4628      	mov	r0, r5
   4a8ac:	b002      	add	sp, #8
   4a8ae:	bd70      	pop	{r4, r5, r6, pc}

0004a8b0 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   4a8b0:	b538      	push	{r3, r4, r5, lr}
   4a8b2:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   4a8b4:	42ab      	cmp	r3, r5
{
   4a8b6:	4611      	mov	r1, r2
   4a8b8:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   4a8ba:	d804      	bhi.n	4a8c6 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   4a8bc:	461a      	mov	r2, r3
   4a8be:	f001 f9cb 	bl	4bc58 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   4a8c2:	4620      	mov	r0, r4
   4a8c4:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   4a8c6:	2400      	movs	r4, #0
   4a8c8:	e7fb      	b.n	4a8c2 <_copy+0x12>

0004a8ca <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   4a8ca:	f001 b9d0 	b.w	4bc6e <memset>

0004a8ce <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   4a8ce:	09c3      	lsrs	r3, r0, #7
   4a8d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   4a8d4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   4a8d8:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   4a8dc:	b2c0      	uxtb	r0, r0
   4a8de:	4770      	bx	lr

0004a8e0 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   4a8e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4a8e4:	4606      	mov	r6, r0
   4a8e6:	b0a9      	sub	sp, #164	; 0xa4
   4a8e8:	4688      	mov	r8, r1
   4a8ea:	4614      	mov	r4, r2
   4a8ec:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   4a8ee:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   4a8f2:	f7e2 f817 	bl	2c924 <uECC_get_rng>
		if (!rng_function ||
   4a8f6:	4603      	mov	r3, r0
   4a8f8:	2800      	cmp	r0, #0
   4a8fa:	d03e      	beq.n	4a97a <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   4a8fc:	2140      	movs	r1, #64	; 0x40
   4a8fe:	a808      	add	r0, sp, #32
   4a900:	4798      	blx	r3
		if (!rng_function ||
   4a902:	b3d0      	cbz	r0, 4a97a <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   4a904:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   4a908:	f112 031f 	adds.w	r3, r2, #31
   4a90c:	bf48      	it	mi
   4a90e:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   4a912:	466d      	mov	r5, sp
   4a914:	464a      	mov	r2, r9
   4a916:	a908      	add	r1, sp, #32
   4a918:	4628      	mov	r0, r5
   4a91a:	f343 1347 	sbfx	r3, r3, #5, #8
   4a91e:	f000 f9f6 	bl	4ad0e <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   4a922:	4622      	mov	r2, r4
   4a924:	4629      	mov	r1, r5
   4a926:	a818      	add	r0, sp, #96	; 0x60
   4a928:	f000 fe09 	bl	4b53e <EccPoint_compute_public_key>
   4a92c:	b318      	cbz	r0, 4a976 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   4a92e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   4a932:	1dd9      	adds	r1, r3, #7
   4a934:	bf48      	it	mi
   4a936:	f103 010e 	addmi.w	r1, r3, #14
   4a93a:	462a      	mov	r2, r5
   4a93c:	4640      	mov	r0, r8
   4a93e:	10c9      	asrs	r1, r1, #3
   4a940:	f000 fe25 	bl	4b58e <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   4a944:	f994 1001 	ldrsb.w	r1, [r4, #1]
   4a948:	aa18      	add	r2, sp, #96	; 0x60
   4a94a:	4630      	mov	r0, r6
   4a94c:	f000 fe1f 	bl	4b58e <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   4a950:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   4a954:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   4a958:	ab18      	add	r3, sp, #96	; 0x60
   4a95a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   4a95e:	1870      	adds	r0, r6, r1
   4a960:	f000 fe15 	bl	4b58e <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   4a964:	2220      	movs	r2, #32
   4a966:	2100      	movs	r1, #0
   4a968:	4628      	mov	r0, r5
   4a96a:	f001 f980 	bl	4bc6e <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   4a96e:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   4a970:	b029      	add	sp, #164	; 0xa4
   4a972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   4a976:	3f01      	subs	r7, #1
   4a978:	d1bb      	bne.n	4a8f2 <uECC_make_key+0x12>
        		return 0;
   4a97a:	2000      	movs	r0, #0
   4a97c:	e7f8      	b.n	4a970 <uECC_make_key+0x90>

0004a97e <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   4a97e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4a982:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   4a984:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   4a988:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   4a98c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   4a990:	b0a4      	sub	sp, #144	; 0x90
   4a992:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   4a994:	1dda      	adds	r2, r3, #7
   4a996:	bf48      	it	mi
   4a998:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   4a99c:	ad04      	add	r5, sp, #16
{
   4a99e:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   4a9a0:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   4a9a2:	4628      	mov	r0, r5
   4a9a4:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   4a9a6:	9502      	str	r5, [sp, #8]
   4a9a8:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   4a9aa:	f000 fe04 	bl	4b5b6 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   4a9ae:	463a      	mov	r2, r7
   4a9b0:	4649      	mov	r1, r9
   4a9b2:	a814      	add	r0, sp, #80	; 0x50
   4a9b4:	f000 fdff 	bl	4b5b6 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   4a9b8:	ab14      	add	r3, sp, #80	; 0x50
   4a9ba:	eb09 0107 	add.w	r1, r9, r7
   4a9be:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   4a9c2:	463a      	mov	r2, r7
   4a9c4:	f000 fdf7 	bl	4b5b6 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   4a9c8:	4623      	mov	r3, r4
   4a9ca:	4632      	mov	r2, r6
   4a9cc:	4629      	mov	r1, r5
   4a9ce:	4628      	mov	r0, r5
   4a9d0:	f000 fd89 	bl	4b4e6 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   4a9d4:	fab0 f380 	clz	r3, r0
   4a9d8:	9401      	str	r4, [sp, #4]
   4a9da:	aa24      	add	r2, sp, #144	; 0x90
   4a9dc:	095b      	lsrs	r3, r3, #5
   4a9de:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   4a9e2:	8863      	ldrh	r3, [r4, #2]
   4a9e4:	3301      	adds	r3, #1
   4a9e6:	b21b      	sxth	r3, r3
   4a9e8:	9300      	str	r3, [sp, #0]
   4a9ea:	f851 2c88 	ldr.w	r2, [r1, #-136]
   4a9ee:	a914      	add	r1, sp, #80	; 0x50
   4a9f0:	2300      	movs	r3, #0
   4a9f2:	4608      	mov	r0, r1
   4a9f4:	f000 fcaf 	bl	4b356 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   4a9f8:	aa14      	add	r2, sp, #80	; 0x50
   4a9fa:	4639      	mov	r1, r7
   4a9fc:	4640      	mov	r0, r8
   4a9fe:	f000 fdc6 	bl	4b58e <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   4aa02:	4621      	mov	r1, r4
   4aa04:	a814      	add	r0, sp, #80	; 0x50
   4aa06:	f000 fc1b 	bl	4b240 <EccPoint_isZero>
   4aa0a:	af02      	add	r7, sp, #8
   4aa0c:	4604      	mov	r4, r0
   4aa0e:	2208      	movs	r2, #8
   4aa10:	2100      	movs	r1, #0
   4aa12:	4638      	mov	r0, r7
   4aa14:	f001 f92b 	bl	4bc6e <memset>
   4aa18:	2220      	movs	r2, #32
   4aa1a:	2100      	movs	r1, #0
   4aa1c:	4630      	mov	r0, r6
   4aa1e:	f001 f926 	bl	4bc6e <memset>
   4aa22:	2220      	movs	r2, #32
   4aa24:	2100      	movs	r1, #0
   4aa26:	4628      	mov	r0, r5
   4aa28:	f001 f921 	bl	4bc6e <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   4aa2c:	fab4 f084 	clz	r0, r4
   4aa30:	0940      	lsrs	r0, r0, #5
   4aa32:	b024      	add	sp, #144	; 0x90
   4aa34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004aa38 <uECC_vli_add>:
{
   4aa38:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   4aa3a:	2400      	movs	r4, #0
{
   4aa3c:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   4aa3e:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   4aa40:	b265      	sxtb	r5, r4
   4aa42:	42ab      	cmp	r3, r5
   4aa44:	dc00      	bgt.n	4aa48 <uECC_vli_add+0x10>
}
   4aa46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   4aa48:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   4aa4c:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   4aa50:	443d      	add	r5, r7
   4aa52:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   4aa54:	42af      	cmp	r7, r5
   4aa56:	f000 0001 	and.w	r0, r0, #1
   4aa5a:	bf18      	it	ne
   4aa5c:	2000      	movne	r0, #0
		result[i] = sum;
   4aa5e:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   4aa62:	bf88      	it	hi
   4aa64:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   4aa68:	3401      	adds	r4, #1
   4aa6a:	e7e9      	b.n	4aa40 <uECC_vli_add+0x8>

0004aa6c <uECC_vli_rshift1>:
	vli += num_words;
   4aa6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   4aa70:	2300      	movs	r3, #0
	while (vli-- > end) {
   4aa72:	4288      	cmp	r0, r1
   4aa74:	d300      	bcc.n	4aa78 <uECC_vli_rshift1+0xc>
}
   4aa76:	4770      	bx	lr
		uECC_word_t temp = *vli;
   4aa78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   4aa7c:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   4aa80:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   4aa82:	07d3      	lsls	r3, r2, #31
   4aa84:	e7f5      	b.n	4aa72 <uECC_vli_rshift1+0x6>

0004aa86 <vli_modInv_update>:
	if (!EVEN(uv)) {
   4aa86:	6803      	ldr	r3, [r0, #0]
   4aa88:	07db      	lsls	r3, r3, #31
{
   4aa8a:	b570      	push	{r4, r5, r6, lr}
   4aa8c:	4605      	mov	r5, r0
   4aa8e:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   4aa90:	d404      	bmi.n	4aa9c <vli_modInv_update+0x16>
}
   4aa92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uECC_vli_rshift1(uv, num_words);
   4aa96:	4611      	mov	r1, r2
   4aa98:	f7ff bfe8 	b.w	4aa6c <uECC_vli_rshift1>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   4aa9c:	4613      	mov	r3, r2
   4aa9e:	460a      	mov	r2, r1
   4aaa0:	4601      	mov	r1, r0
   4aaa2:	f7ff ffc9 	bl	4aa38 <uECC_vli_add>
	uECC_vli_rshift1(uv, num_words);
   4aaa6:	4621      	mov	r1, r4
		carry = uECC_vli_add(uv, uv, mod, num_words);
   4aaa8:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   4aaaa:	4628      	mov	r0, r5
   4aaac:	f7ff ffde 	bl	4aa6c <uECC_vli_rshift1>
	if (carry) {
   4aab0:	b146      	cbz	r6, 4aac4 <vli_modInv_update+0x3e>
		uv[num_words - 1] |= HIGH_BIT_SET;
   4aab2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   4aab6:	3c01      	subs	r4, #1
   4aab8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   4aabc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   4aac0:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
   4aac4:	bd70      	pop	{r4, r5, r6, pc}

0004aac6 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   4aac6:	f04f 0c00 	mov.w	ip, #0
{
   4aaca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   4aace:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   4aad0:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   4aad2:	fa4f f98c 	sxtb.w	r9, ip
   4aad6:	454b      	cmp	r3, r9
   4aad8:	dc16      	bgt.n	4ab08 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   4aada:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   4aade:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   4aae2:	9601      	str	r6, [sp, #4]
   4aae4:	f04f 0800 	mov.w	r8, #0
   4aae8:	9f01      	ldr	r7, [sp, #4]
   4aaea:	fa53 fe88 	uxtab	lr, r3, r8
   4aaee:	fa4f fe8e 	sxtb.w	lr, lr
   4aaf2:	45be      	cmp	lr, r7
   4aaf4:	fa5f f688 	uxtb.w	r6, r8
   4aaf8:	db28      	blt.n	4ab4c <uECC_vli_mult+0x86>
	result[num_words * 2 - 1] = r0;
   4aafa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   4aafe:	f840 4c04 	str.w	r4, [r0, #-4]
}
   4ab02:	b003      	add	sp, #12
   4ab04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   4ab08:	f04f 0e00 	mov.w	lr, #0
   4ab0c:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   4ab10:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   4ab12:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   4ab16:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   4ab1a:	fba6 6707 	umull	r6, r7, r6, r7
   4ab1e:	1936      	adds	r6, r6, r4
		for (i = 0; i <= k; ++i) {
   4ab20:	f10e 0e01 	add.w	lr, lr, #1
   4ab24:	416f      	adcs	r7, r5
	*r0 = (uECC_word_t)r01;
   4ab26:	4634      	mov	r4, r6
		for (i = 0; i <= k; ++i) {
   4ab28:	fa4f f68e 	sxtb.w	r6, lr
   4ab2c:	f04f 0b00 	mov.w	fp, #0
   4ab30:	bf28      	it	cs
   4ab32:	f04f 0b01 	movcs.w	fp, #1
   4ab36:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   4ab38:	44d8      	add	r8, fp
	*r1 = r01 >> uECC_WORD_BITS;
   4ab3a:	463d      	mov	r5, r7
		for (i = 0; i <= k; ++i) {
   4ab3c:	dde9      	ble.n	4ab12 <uECC_vli_mult+0x4c>
		result[k] = r0;
   4ab3e:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r2 += (r01 < p);
   4ab42:	4645      	mov	r5, r8
   4ab44:	f10c 0c01 	add.w	ip, ip, #1
	*r1 = r01 >> uECC_WORD_BITS;
   4ab48:	463c      	mov	r4, r7
   4ab4a:	e7c2      	b.n	4aad2 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   4ab4c:	3601      	adds	r6, #1
   4ab4e:	46a9      	mov	r9, r5
   4ab50:	b276      	sxtb	r6, r6
   4ab52:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
   4ab56:	2500      	movs	r5, #0
   4ab58:	b277      	sxtb	r7, r6
   4ab5a:	42bb      	cmp	r3, r7
   4ab5c:	dc05      	bgt.n	4ab6a <uECC_vli_mult+0xa4>
		result[k] = r0;
   4ab5e:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   4ab62:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   4ab66:	464c      	mov	r4, r9
   4ab68:	e7be      	b.n	4aae8 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   4ab6a:	f06f 0703 	mvn.w	r7, #3
   4ab6e:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
   4ab70:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
   4ab74:	f85a 7007 	ldr.w	r7, [sl, r7]
   4ab78:	fba7 7c0c 	umull	r7, ip, r7, ip
   4ab7c:	193f      	adds	r7, r7, r4
   4ab7e:	eb5c 0c09 	adcs.w	ip, ip, r9
   4ab82:	f04f 0b00 	mov.w	fp, #0
   4ab86:	bf28      	it	cs
   4ab88:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   4ab8c:	445d      	add	r5, fp
	*r1 = r01 >> uECC_WORD_BITS;
   4ab8e:	46e1      	mov	r9, ip
	*r0 = (uECC_word_t)r01;
   4ab90:	463c      	mov	r4, r7
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   4ab92:	3601      	adds	r6, #1
   4ab94:	e7e0      	b.n	4ab58 <uECC_vli_mult+0x92>

0004ab96 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   4ab96:	2300      	movs	r3, #0
{
   4ab98:	b510      	push	{r4, lr}
		 vli[i] = 0;
   4ab9a:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   4ab9c:	b25a      	sxtb	r2, r3
   4ab9e:	4291      	cmp	r1, r2
   4aba0:	dc00      	bgt.n	4aba4 <uECC_vli_clear+0xe>
}
   4aba2:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   4aba4:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   4aba8:	3301      	adds	r3, #1
   4abaa:	e7f7      	b.n	4ab9c <uECC_vli_clear+0x6>

0004abac <uECC_vli_isZero>:
{
   4abac:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   4abae:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   4abb0:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   4abb2:	b25c      	sxtb	r4, r3
   4abb4:	42a1      	cmp	r1, r4
   4abb6:	dc03      	bgt.n	4abc0 <uECC_vli_isZero+0x14>
}
   4abb8:	fab2 f082 	clz	r0, r2
   4abbc:	0940      	lsrs	r0, r0, #5
   4abbe:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   4abc0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   4abc4:	3301      	adds	r3, #1
   4abc6:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   4abc8:	e7f3      	b.n	4abb2 <uECC_vli_isZero+0x6>

0004abca <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4abca:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   4abcc:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4abce:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   4abd2:	f001 011f 	and.w	r1, r1, #31
   4abd6:	408b      	lsls	r3, r1
}
   4abd8:	4018      	ands	r0, r3
   4abda:	4770      	bx	lr

0004abdc <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   4abdc:	1e4b      	subs	r3, r1, #1
{
   4abde:	b510      	push	{r4, lr}
   4abe0:	b25b      	sxtb	r3, r3
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   4abe2:	1d04      	adds	r4, r0, #4
   4abe4:	061a      	lsls	r2, r3, #24
   4abe6:	d403      	bmi.n	4abf0 <uECC_vli_numBits+0x14>
   4abe8:	1e5a      	subs	r2, r3, #1
   4abea:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
   4abee:	b171      	cbz	r1, 4ac0e <uECC_vli_numBits+0x32>
	return (i + 1);
   4abf0:	3301      	adds	r3, #1
   4abf2:	b25b      	sxtb	r3, r3
	if (num_digits == 0) {
   4abf4:	b183      	cbz	r3, 4ac18 <uECC_vli_numBits+0x3c>
	digit = vli[num_digits - 1];
   4abf6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   4abfa:	3a01      	subs	r2, #1
   4abfc:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
	for (i = 0; digit; ++i) {
   4ac00:	2200      	movs	r2, #0
   4ac02:	b931      	cbnz	r1, 4ac12 <uECC_vli_numBits+0x36>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   4ac04:	3b01      	subs	r3, #1
   4ac06:	eb02 1243 	add.w	r2, r2, r3, lsl #5
   4ac0a:	b210      	sxth	r0, r2
}
   4ac0c:	bd10      	pop	{r4, pc}
   4ac0e:	4613      	mov	r3, r2
   4ac10:	e7e8      	b.n	4abe4 <uECC_vli_numBits+0x8>
		digit >>= 1;
   4ac12:	0849      	lsrs	r1, r1, #1
	for (i = 0; digit; ++i) {
   4ac14:	3201      	adds	r2, #1
   4ac16:	e7f4      	b.n	4ac02 <uECC_vli_numBits+0x26>
		return 0;
   4ac18:	4618      	mov	r0, r3
   4ac1a:	e7f7      	b.n	4ac0c <uECC_vli_numBits+0x30>

0004ac1c <uECC_vli_set>:
{
   4ac1c:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   4ac1e:	2300      	movs	r3, #0
   4ac20:	b25c      	sxtb	r4, r3
   4ac22:	42a2      	cmp	r2, r4
   4ac24:	dc00      	bgt.n	4ac28 <uECC_vli_set+0xc>
}
   4ac26:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   4ac28:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   4ac2c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   4ac30:	3301      	adds	r3, #1
   4ac32:	e7f5      	b.n	4ac20 <uECC_vli_set+0x4>

0004ac34 <uECC_vli_cmp_unsafe>:
{
   4ac34:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   4ac36:	3a01      	subs	r2, #1
   4ac38:	b252      	sxtb	r2, r2
   4ac3a:	0613      	lsls	r3, r2, #24
   4ac3c:	d501      	bpl.n	4ac42 <uECC_vli_cmp_unsafe+0xe>
	return 0;
   4ac3e:	2000      	movs	r0, #0
}
   4ac40:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   4ac42:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   4ac46:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   4ac4a:	429c      	cmp	r4, r3
   4ac4c:	d805      	bhi.n	4ac5a <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   4ac4e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   4ac52:	d2f2      	bcs.n	4ac3a <uECC_vli_cmp_unsafe+0x6>
			return -1;
   4ac54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4ac58:	e7f2      	b.n	4ac40 <uECC_vli_cmp_unsafe+0xc>
			return 1;
   4ac5a:	2001      	movs	r0, #1
   4ac5c:	e7f0      	b.n	4ac40 <uECC_vli_cmp_unsafe+0xc>

0004ac5e <uECC_vli_equal>:
{
   4ac5e:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   4ac60:	3a01      	subs	r2, #1
   4ac62:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   4ac64:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   4ac66:	0614      	lsls	r4, r2, #24
   4ac68:	d503      	bpl.n	4ac72 <uECC_vli_equal+0x14>
}
   4ac6a:	1e18      	subs	r0, r3, #0
   4ac6c:	bf18      	it	ne
   4ac6e:	2001      	movne	r0, #1
   4ac70:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   4ac72:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   4ac76:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   4ac7a:	406c      	eors	r4, r5
   4ac7c:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
   4ac7e:	3a01      	subs	r2, #1
   4ac80:	e7f1      	b.n	4ac66 <uECC_vli_equal+0x8>

0004ac82 <uECC_vli_sub>:
{
   4ac82:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   4ac84:	2400      	movs	r4, #0
{
   4ac86:	4606      	mov	r6, r0
   4ac88:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   4ac8a:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   4ac8c:	b265      	sxtb	r5, r4
   4ac8e:	4565      	cmp	r5, ip
   4ac90:	db00      	blt.n	4ac94 <uECC_vli_sub+0x12>
}
   4ac92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   4ac94:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   4ac98:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   4ac9c:	1a3d      	subs	r5, r7, r0
   4ac9e:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   4aca0:	42af      	cmp	r7, r5
   4aca2:	f000 0001 	and.w	r0, r0, #1
   4aca6:	bf18      	it	ne
   4aca8:	2000      	movne	r0, #0
		result[i] = diff;
   4acaa:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   4acae:	bf38      	it	cc
   4acb0:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   4acb4:	3401      	adds	r4, #1
   4acb6:	e7e9      	b.n	4ac8c <uECC_vli_sub+0xa>

0004acb8 <uECC_vli_modAdd>:
{
   4acb8:	b570      	push	{r4, r5, r6, lr}
   4acba:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   4acbe:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   4acc0:	4633      	mov	r3, r6
{
   4acc2:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   4acc4:	f7ff feb8 	bl	4aa38 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   4acc8:	b930      	cbnz	r0, 4acd8 <uECC_vli_modAdd+0x20>
   4acca:	4632      	mov	r2, r6
   4accc:	4621      	mov	r1, r4
   4acce:	4628      	mov	r0, r5
   4acd0:	f7ff ffb0 	bl	4ac34 <uECC_vli_cmp_unsafe>
   4acd4:	2801      	cmp	r0, #1
   4acd6:	d007      	beq.n	4ace8 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   4acd8:	4633      	mov	r3, r6
   4acda:	462a      	mov	r2, r5
   4acdc:	4621      	mov	r1, r4
   4acde:	4620      	mov	r0, r4
}
   4ace0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   4ace4:	f7ff bfcd 	b.w	4ac82 <uECC_vli_sub>
}
   4ace8:	bd70      	pop	{r4, r5, r6, pc}

0004acea <uECC_vli_modSub>:
{
   4acea:	b570      	push	{r4, r5, r6, lr}
   4acec:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   4acf0:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   4acf2:	4633      	mov	r3, r6
{
   4acf4:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   4acf6:	f7ff ffc4 	bl	4ac82 <uECC_vli_sub>
	if (l_borrow) {
   4acfa:	b138      	cbz	r0, 4ad0c <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   4acfc:	4633      	mov	r3, r6
   4acfe:	462a      	mov	r2, r5
   4ad00:	4621      	mov	r1, r4
   4ad02:	4620      	mov	r0, r4
}
   4ad04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   4ad08:	f7ff be96 	b.w	4aa38 <uECC_vli_add>
}
   4ad0c:	bd70      	pop	{r4, r5, r6, pc}

0004ad0e <uECC_vli_mmod>:
{
   4ad0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4ad12:	b0a5      	sub	sp, #148	; 0x94
   4ad14:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   4ad16:	ab14      	add	r3, sp, #80	; 0x50
   4ad18:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   4ad1c:	9001      	str	r0, [sp, #4]
			   uECC_vli_numBits(mod, num_words);
   4ad1e:	4629      	mov	r1, r5
   4ad20:	4610      	mov	r0, r2
{
   4ad22:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   4ad24:	f7ff ff5a 	bl	4abdc <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   4ad28:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   4ad2c:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   4ad2e:	2c00      	cmp	r4, #0
   4ad30:	4621      	mov	r1, r4
   4ad32:	bfb8      	it	lt
   4ad34:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   4ad38:	4263      	negs	r3, r4
   4ad3a:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   4ad3e:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   4ad42:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   4ad46:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   4ad48:	bf58      	it	pl
   4ad4a:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   4ad4c:	f7ff ff23 	bl	4ab96 <uECC_vli_clear>
	if (bit_shift > 0) {
   4ad50:	2e00      	cmp	r6, #0
   4ad52:	ea4f 0081 	mov.w	r0, r1, lsl #2
   4ad56:	dd2d      	ble.n	4adb4 <uECC_vli_mmod+0xa6>
   4ad58:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   4ad5a:	2200      	movs	r2, #0
   4ad5c:	4418      	add	r0, r3
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   4ad5e:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   4ad62:	4613      	mov	r3, r2
   4ad64:	429d      	cmp	r5, r3
   4ad66:	d81a      	bhi.n	4ad9e <uECC_vli_mmod+0x90>
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4ad68:	ab04      	add	r3, sp, #16
   4ad6a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   4ad6e:	9300      	str	r3, [sp, #0]
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4ad70:	1e6f      	subs	r7, r5, #1
   4ad72:	ab24      	add	r3, sp, #144	; 0x90
		for (i = 0; i < num_words * 2; ++i) {
   4ad74:	ea4f 0845 	mov.w	r8, r5, lsl #1
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4ad78:	ea4f 0985 	mov.w	r9, r5, lsl #2
   4ad7c:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4ad7e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   4ad82:	2c00      	cmp	r4, #0
   4ad84:	da53      	bge.n	4ae2e <uECC_vli_mmod+0x120>
	uECC_vli_set(result, v[index], num_words);
   4ad86:	ab24      	add	r3, sp, #144	; 0x90
   4ad88:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   4ad8c:	9801      	ldr	r0, [sp, #4]
   4ad8e:	f856 1c88 	ldr.w	r1, [r6, #-136]
   4ad92:	462a      	mov	r2, r5
   4ad94:	f7ff ff42 	bl	4ac1c <uECC_vli_set>
}
   4ad98:	b025      	add	sp, #148	; 0x94
   4ad9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   4ad9e:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   4ada2:	fa0c f106 	lsl.w	r1, ip, r6
   4ada6:	430a      	orrs	r2, r1
   4ada8:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   4adac:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   4adae:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   4adb2:	e7d7      	b.n	4ad64 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   4adb4:	ab04      	add	r3, sp, #16
   4adb6:	462a      	mov	r2, r5
   4adb8:	4639      	mov	r1, r7
   4adba:	4418      	add	r0, r3
   4adbc:	f7ff ff2e 	bl	4ac1c <uECC_vli_set>
   4adc0:	e7d2      	b.n	4ad68 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   4adc2:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   4adc6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   4adca:	ab24      	add	r3, sp, #144	; 0x90
   4adcc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   4add0:	f10c 0c01 	add.w	ip, ip, #1
   4add4:	f853 3c80 	ldr.w	r3, [r3, #-128]
   4add8:	440b      	add	r3, r1
   4adda:	1ad3      	subs	r3, r2, r3
   4addc:	bf34      	ite	cc
   4adde:	f04f 0b01 	movcc.w	fp, #1
   4ade2:	f04f 0b00 	movcs.w	fp, #0
			if (diff != v[index][i]) {
   4ade6:	429a      	cmp	r2, r3
			v[1 - index][i] = diff;
   4ade8:	f85e 2c88 	ldr.w	r2, [lr, #-136]
   4adec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
				borrow = (diff > v[index][i]);
   4adf0:	bf18      	it	ne
   4adf2:	4659      	movne	r1, fp
		for (i = 0; i < num_words * 2; ++i) {
   4adf4:	fa4f f08c 	sxtb.w	r0, ip
   4adf8:	4540      	cmp	r0, r8
   4adfa:	dbe2      	blt.n	4adc2 <uECC_vli_mmod+0xb4>
		index = !(index ^ borrow);
   4adfc:	1a73      	subs	r3, r6, r1
   4adfe:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   4ae00:	4629      	mov	r1, r5
   4ae02:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   4ae04:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   4ae06:	f7ff fe31 	bl	4aa6c <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4ae0a:	f109 0390 	add.w	r3, r9, #144	; 0x90
   4ae0e:	446b      	add	r3, sp
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4ae10:	9800      	ldr	r0, [sp, #0]
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4ae12:	f853 2c80 	ldr.w	r2, [r3, #-128]
   4ae16:	f857 3c80 	ldr.w	r3, [r7, #-128]
   4ae1a:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   4ae1e:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4ae22:	4629      	mov	r1, r5
   4ae24:	3c01      	subs	r4, #1
   4ae26:	f7ff fe21 	bl	4aa6c <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   4ae2a:	b224      	sxth	r4, r4
   4ae2c:	e7a9      	b.n	4ad82 <uECC_vli_mmod+0x74>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   4ae2e:	ab24      	add	r3, sp, #144	; 0x90
   4ae30:	f04f 0c00 	mov.w	ip, #0
			v[1 - index][i] = diff;
   4ae34:	f1c6 0e01 	rsb	lr, r6, #1
		uECC_word_t borrow = 0;
   4ae38:	4661      	mov	r1, ip
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   4ae3a:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   4ae3e:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
   4ae42:	e7d7      	b.n	4adf4 <uECC_vli_mmod+0xe6>

0004ae44 <uECC_vli_modMult_fast>:
{
   4ae44:	b530      	push	{r4, r5, lr}
   4ae46:	461c      	mov	r4, r3
   4ae48:	b091      	sub	sp, #68	; 0x44
   4ae4a:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   4ae4c:	f993 3000 	ldrsb.w	r3, [r3]
   4ae50:	4668      	mov	r0, sp
   4ae52:	f7ff fe38 	bl	4aac6 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   4ae56:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   4ae5a:	4669      	mov	r1, sp
   4ae5c:	4628      	mov	r0, r5
   4ae5e:	4798      	blx	r3
}
   4ae60:	b011      	add	sp, #68	; 0x44
   4ae62:	bd30      	pop	{r4, r5, pc}

0004ae64 <uECC_vli_modSquare_fast>:
{
   4ae64:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   4ae66:	460a      	mov	r2, r1
   4ae68:	f7ff bfec 	b.w	4ae44 <uECC_vli_modMult_fast>

0004ae6c <double_jacobian_default>:
{
   4ae6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   4ae70:	f993 6000 	ldrsb.w	r6, [r3]
{
   4ae74:	b092      	sub	sp, #72	; 0x48
   4ae76:	4604      	mov	r4, r0
   4ae78:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   4ae7a:	4610      	mov	r0, r2
   4ae7c:	4631      	mov	r1, r6
{
   4ae7e:	4615      	mov	r5, r2
   4ae80:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   4ae82:	f7ff fe93 	bl	4abac <uECC_vli_isZero>
   4ae86:	2800      	cmp	r0, #0
   4ae88:	f040 8091 	bne.w	4afae <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   4ae8c:	463a      	mov	r2, r7
   4ae8e:	4649      	mov	r1, r9
   4ae90:	a802      	add	r0, sp, #8
   4ae92:	f7ff ffe7 	bl	4ae64 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   4ae96:	463b      	mov	r3, r7
   4ae98:	aa02      	add	r2, sp, #8
   4ae9a:	4621      	mov	r1, r4
   4ae9c:	a80a      	add	r0, sp, #40	; 0x28
   4ae9e:	f7ff ffd1 	bl	4ae44 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   4aea2:	a902      	add	r1, sp, #8
   4aea4:	4608      	mov	r0, r1
   4aea6:	463a      	mov	r2, r7
   4aea8:	f7ff ffdc 	bl	4ae64 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   4aeac:	463b      	mov	r3, r7
   4aeae:	462a      	mov	r2, r5
   4aeb0:	4649      	mov	r1, r9
   4aeb2:	4648      	mov	r0, r9
   4aeb4:	f7ff ffc6 	bl	4ae44 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   4aeb8:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   4aebc:	463a      	mov	r2, r7
   4aebe:	4629      	mov	r1, r5
   4aec0:	4628      	mov	r0, r5
   4aec2:	f7ff ffcf 	bl	4ae64 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   4aec6:	4643      	mov	r3, r8
   4aec8:	462a      	mov	r2, r5
   4aeca:	4621      	mov	r1, r4
   4aecc:	4620      	mov	r0, r4
   4aece:	9600      	str	r6, [sp, #0]
   4aed0:	f7ff fef2 	bl	4acb8 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   4aed4:	4643      	mov	r3, r8
   4aed6:	462a      	mov	r2, r5
   4aed8:	4629      	mov	r1, r5
   4aeda:	4628      	mov	r0, r5
   4aedc:	9600      	str	r6, [sp, #0]
   4aede:	f7ff feeb 	bl	4acb8 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   4aee2:	4643      	mov	r3, r8
   4aee4:	462a      	mov	r2, r5
   4aee6:	4621      	mov	r1, r4
   4aee8:	4628      	mov	r0, r5
   4aeea:	9600      	str	r6, [sp, #0]
   4aeec:	f7ff fefd 	bl	4acea <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   4aef0:	463b      	mov	r3, r7
   4aef2:	462a      	mov	r2, r5
   4aef4:	4621      	mov	r1, r4
   4aef6:	4620      	mov	r0, r4
   4aef8:	f7ff ffa4 	bl	4ae44 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   4aefc:	4643      	mov	r3, r8
   4aefe:	4622      	mov	r2, r4
   4af00:	4621      	mov	r1, r4
   4af02:	4628      	mov	r0, r5
   4af04:	9600      	str	r6, [sp, #0]
   4af06:	f7ff fed7 	bl	4acb8 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   4af0a:	4643      	mov	r3, r8
   4af0c:	9600      	str	r6, [sp, #0]
   4af0e:	462a      	mov	r2, r5
   4af10:	4621      	mov	r1, r4
   4af12:	4620      	mov	r0, r4
   4af14:	f7ff fed0 	bl	4acb8 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4af18:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   4af1a:	07db      	lsls	r3, r3, #31
   4af1c:	d54a      	bpl.n	4afb4 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   4af1e:	4633      	mov	r3, r6
   4af20:	4642      	mov	r2, r8
   4af22:	4621      	mov	r1, r4
   4af24:	4620      	mov	r0, r4
   4af26:	f7ff fd87 	bl	4aa38 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   4af2a:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   4af2c:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   4af2e:	4620      	mov	r0, r4
   4af30:	f7ff fd9c 	bl	4aa6c <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   4af34:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   4af38:	3b01      	subs	r3, #1
   4af3a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   4af3e:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   4af42:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   4af46:	463a      	mov	r2, r7
   4af48:	4621      	mov	r1, r4
   4af4a:	4628      	mov	r0, r5
   4af4c:	f7ff ff8a 	bl	4ae64 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   4af50:	4643      	mov	r3, r8
   4af52:	aa0a      	add	r2, sp, #40	; 0x28
   4af54:	4629      	mov	r1, r5
   4af56:	4628      	mov	r0, r5
   4af58:	9600      	str	r6, [sp, #0]
   4af5a:	f7ff fec6 	bl	4acea <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   4af5e:	4643      	mov	r3, r8
   4af60:	aa0a      	add	r2, sp, #40	; 0x28
   4af62:	4629      	mov	r1, r5
   4af64:	4628      	mov	r0, r5
   4af66:	9600      	str	r6, [sp, #0]
   4af68:	f7ff febf 	bl	4acea <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   4af6c:	a90a      	add	r1, sp, #40	; 0x28
   4af6e:	4608      	mov	r0, r1
   4af70:	4643      	mov	r3, r8
   4af72:	462a      	mov	r2, r5
   4af74:	9600      	str	r6, [sp, #0]
   4af76:	f7ff feb8 	bl	4acea <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   4af7a:	463b      	mov	r3, r7
   4af7c:	aa0a      	add	r2, sp, #40	; 0x28
   4af7e:	4621      	mov	r1, r4
   4af80:	4620      	mov	r0, r4
   4af82:	f7ff ff5f 	bl	4ae44 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   4af86:	aa02      	add	r2, sp, #8
   4af88:	4643      	mov	r3, r8
   4af8a:	4610      	mov	r0, r2
   4af8c:	4621      	mov	r1, r4
   4af8e:	9600      	str	r6, [sp, #0]
   4af90:	f7ff feab 	bl	4acea <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   4af94:	4632      	mov	r2, r6
   4af96:	4629      	mov	r1, r5
   4af98:	4620      	mov	r0, r4
   4af9a:	f7ff fe3f 	bl	4ac1c <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   4af9e:	4649      	mov	r1, r9
   4afa0:	4628      	mov	r0, r5
   4afa2:	f7ff fe3b 	bl	4ac1c <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   4afa6:	a902      	add	r1, sp, #8
   4afa8:	4648      	mov	r0, r9
   4afaa:	f7ff fe37 	bl	4ac1c <uECC_vli_set>
}
   4afae:	b012      	add	sp, #72	; 0x48
   4afb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   4afb4:	4631      	mov	r1, r6
   4afb6:	4620      	mov	r0, r4
   4afb8:	f7ff fd58 	bl	4aa6c <uECC_vli_rshift1>
   4afbc:	e7c3      	b.n	4af46 <double_jacobian_default+0xda>

0004afbe <x_side_default>:
{
   4afbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4afc2:	4615      	mov	r5, r2
   4afc4:	b08a      	sub	sp, #40	; 0x28
   4afc6:	4604      	mov	r4, r0
   4afc8:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   4afca:	221c      	movs	r2, #28
   4afcc:	2100      	movs	r1, #0
   4afce:	a803      	add	r0, sp, #12
   4afd0:	f000 fe4d 	bl	4bc6e <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   4afd4:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   4afd6:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   4afda:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   4afdc:	462a      	mov	r2, r5
   4afde:	4631      	mov	r1, r6
   4afe0:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   4afe2:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   4afe4:	f7ff ff3e 	bl	4ae64 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   4afe8:	463b      	mov	r3, r7
   4afea:	aa02      	add	r2, sp, #8
   4afec:	4621      	mov	r1, r4
   4afee:	4620      	mov	r0, r4
   4aff0:	f8cd 8000 	str.w	r8, [sp]
   4aff4:	f7ff fe79 	bl	4acea <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   4aff8:	462b      	mov	r3, r5
   4affa:	4632      	mov	r2, r6
   4affc:	4621      	mov	r1, r4
   4affe:	4620      	mov	r0, r4
   4b000:	f7ff ff20 	bl	4ae44 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   4b004:	f8cd 8000 	str.w	r8, [sp]
   4b008:	463b      	mov	r3, r7
   4b00a:	f105 0284 	add.w	r2, r5, #132	; 0x84
   4b00e:	4621      	mov	r1, r4
   4b010:	4620      	mov	r0, r4
   4b012:	f7ff fe51 	bl	4acb8 <uECC_vli_modAdd>
}
   4b016:	b00a      	add	sp, #40	; 0x28
   4b018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004b01c <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   4b01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4b020:	b09a      	sub	sp, #104	; 0x68
   4b022:	4616      	mov	r6, r2
   4b024:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   4b028:	4644      	mov	r4, r8
{
   4b02a:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   4b02c:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4b030:	9500      	str	r5, [sp, #0]
{
   4b032:	4607      	mov	r7, r0
   4b034:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4b036:	4623      	mov	r3, r4
   4b038:	4602      	mov	r2, r0
   4b03a:	4631      	mov	r1, r6
   4b03c:	a802      	add	r0, sp, #8
   4b03e:	f7ff fe54 	bl	4acea <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   4b042:	a902      	add	r1, sp, #8
   4b044:	4642      	mov	r2, r8
   4b046:	4608      	mov	r0, r1
   4b048:	f7ff ff0c 	bl	4ae64 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   4b04c:	4643      	mov	r3, r8
   4b04e:	aa02      	add	r2, sp, #8
   4b050:	4639      	mov	r1, r7
   4b052:	4638      	mov	r0, r7
   4b054:	f7ff fef6 	bl	4ae44 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   4b058:	4643      	mov	r3, r8
   4b05a:	aa02      	add	r2, sp, #8
   4b05c:	4631      	mov	r1, r6
   4b05e:	4630      	mov	r0, r6
   4b060:	f7ff fef0 	bl	4ae44 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   4b064:	4623      	mov	r3, r4
   4b066:	4652      	mov	r2, sl
   4b068:	4649      	mov	r1, r9
   4b06a:	a802      	add	r0, sp, #8
   4b06c:	9500      	str	r5, [sp, #0]
   4b06e:	f7ff fe23 	bl	4acb8 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   4b072:	4623      	mov	r3, r4
   4b074:	4652      	mov	r2, sl
   4b076:	4649      	mov	r1, r9
   4b078:	4648      	mov	r0, r9
   4b07a:	9500      	str	r5, [sp, #0]
   4b07c:	f7ff fe35 	bl	4acea <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   4b080:	4623      	mov	r3, r4
   4b082:	463a      	mov	r2, r7
   4b084:	4631      	mov	r1, r6
   4b086:	a80a      	add	r0, sp, #40	; 0x28
   4b088:	9500      	str	r5, [sp, #0]
   4b08a:	f7ff fe2e 	bl	4acea <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   4b08e:	4643      	mov	r3, r8
   4b090:	aa0a      	add	r2, sp, #40	; 0x28
   4b092:	4651      	mov	r1, sl
   4b094:	4650      	mov	r0, sl
   4b096:	f7ff fed5 	bl	4ae44 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   4b09a:	4623      	mov	r3, r4
   4b09c:	4632      	mov	r2, r6
   4b09e:	4639      	mov	r1, r7
   4b0a0:	a80a      	add	r0, sp, #40	; 0x28
   4b0a2:	9500      	str	r5, [sp, #0]
   4b0a4:	f7ff fe08 	bl	4acb8 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   4b0a8:	4642      	mov	r2, r8
   4b0aa:	4649      	mov	r1, r9
   4b0ac:	4630      	mov	r0, r6
   4b0ae:	f7ff fed9 	bl	4ae64 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   4b0b2:	4623      	mov	r3, r4
   4b0b4:	aa0a      	add	r2, sp, #40	; 0x28
   4b0b6:	4631      	mov	r1, r6
   4b0b8:	4630      	mov	r0, r6
   4b0ba:	9500      	str	r5, [sp, #0]
   4b0bc:	f7ff fe15 	bl	4acea <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   4b0c0:	4623      	mov	r3, r4
   4b0c2:	4632      	mov	r2, r6
   4b0c4:	4639      	mov	r1, r7
   4b0c6:	a812      	add	r0, sp, #72	; 0x48
   4b0c8:	9500      	str	r5, [sp, #0]
   4b0ca:	f7ff fe0e 	bl	4acea <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   4b0ce:	4643      	mov	r3, r8
   4b0d0:	aa12      	add	r2, sp, #72	; 0x48
   4b0d2:	4649      	mov	r1, r9
   4b0d4:	4648      	mov	r0, r9
   4b0d6:	f7ff feb5 	bl	4ae44 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   4b0da:	4623      	mov	r3, r4
   4b0dc:	4652      	mov	r2, sl
   4b0de:	4649      	mov	r1, r9
   4b0e0:	4648      	mov	r0, r9
   4b0e2:	9500      	str	r5, [sp, #0]
   4b0e4:	f7ff fe01 	bl	4acea <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   4b0e8:	4642      	mov	r2, r8
   4b0ea:	a902      	add	r1, sp, #8
   4b0ec:	a812      	add	r0, sp, #72	; 0x48
   4b0ee:	f7ff feb9 	bl	4ae64 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   4b0f2:	a912      	add	r1, sp, #72	; 0x48
   4b0f4:	4623      	mov	r3, r4
   4b0f6:	aa0a      	add	r2, sp, #40	; 0x28
   4b0f8:	4608      	mov	r0, r1
   4b0fa:	9500      	str	r5, [sp, #0]
   4b0fc:	f7ff fdf5 	bl	4acea <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   4b100:	4623      	mov	r3, r4
   4b102:	463a      	mov	r2, r7
   4b104:	a912      	add	r1, sp, #72	; 0x48
   4b106:	a80a      	add	r0, sp, #40	; 0x28
   4b108:	9500      	str	r5, [sp, #0]
   4b10a:	f7ff fdee 	bl	4acea <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   4b10e:	a90a      	add	r1, sp, #40	; 0x28
   4b110:	4643      	mov	r3, r8
   4b112:	aa02      	add	r2, sp, #8
   4b114:	4608      	mov	r0, r1
   4b116:	f7ff fe95 	bl	4ae44 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   4b11a:	4623      	mov	r3, r4
   4b11c:	4652      	mov	r2, sl
   4b11e:	a90a      	add	r1, sp, #40	; 0x28
   4b120:	4650      	mov	r0, sl
   4b122:	9500      	str	r5, [sp, #0]
   4b124:	f7ff fde1 	bl	4acea <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   4b128:	462a      	mov	r2, r5
   4b12a:	a912      	add	r1, sp, #72	; 0x48
   4b12c:	4638      	mov	r0, r7
   4b12e:	f7ff fd75 	bl	4ac1c <uECC_vli_set>
}
   4b132:	b01a      	add	sp, #104	; 0x68
   4b134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004b138 <uECC_vli_modInv>:
{
   4b138:	b5f0      	push	{r4, r5, r6, r7, lr}
   4b13a:	460f      	mov	r7, r1
   4b13c:	b0a1      	sub	sp, #132	; 0x84
   4b13e:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   4b140:	4619      	mov	r1, r3
   4b142:	4638      	mov	r0, r7
{
   4b144:	4615      	mov	r5, r2
   4b146:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   4b148:	f7ff fd30 	bl	4abac <uECC_vli_isZero>
   4b14c:	b128      	cbz	r0, 4b15a <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   4b14e:	4630      	mov	r0, r6
}
   4b150:	b021      	add	sp, #132	; 0x84
   4b152:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   4b156:	f7ff bd1e 	b.w	4ab96 <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   4b15a:	4622      	mov	r2, r4
   4b15c:	4639      	mov	r1, r7
   4b15e:	4668      	mov	r0, sp
   4b160:	f7ff fd5c 	bl	4ac1c <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   4b164:	4629      	mov	r1, r5
   4b166:	a808      	add	r0, sp, #32
   4b168:	f7ff fd58 	bl	4ac1c <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   4b16c:	a810      	add	r0, sp, #64	; 0x40
   4b16e:	4621      	mov	r1, r4
   4b170:	f7ff fd11 	bl	4ab96 <uECC_vli_clear>
	u[0] = 1;
   4b174:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   4b176:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   4b178:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   4b17a:	f7ff fd0c 	bl	4ab96 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   4b17e:	4622      	mov	r2, r4
   4b180:	a908      	add	r1, sp, #32
   4b182:	4668      	mov	r0, sp
   4b184:	f7ff fd56 	bl	4ac34 <uECC_vli_cmp_unsafe>
   4b188:	b930      	cbnz	r0, 4b198 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   4b18a:	4622      	mov	r2, r4
   4b18c:	a910      	add	r1, sp, #64	; 0x40
   4b18e:	4630      	mov	r0, r6
   4b190:	f7ff fd44 	bl	4ac1c <uECC_vli_set>
}
   4b194:	b021      	add	sp, #132	; 0x84
   4b196:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   4b198:	9b00      	ldr	r3, [sp, #0]
   4b19a:	07da      	lsls	r2, r3, #31
   4b19c:	d409      	bmi.n	4b1b2 <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   4b19e:	4621      	mov	r1, r4
   4b1a0:	4668      	mov	r0, sp
   4b1a2:	f7ff fc63 	bl	4aa6c <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   4b1a6:	4622      	mov	r2, r4
   4b1a8:	4629      	mov	r1, r5
   4b1aa:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   4b1ac:	f7ff fc6b 	bl	4aa86 <vli_modInv_update>
   4b1b0:	e7e5      	b.n	4b17e <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   4b1b2:	9b08      	ldr	r3, [sp, #32]
   4b1b4:	07db      	lsls	r3, r3, #31
   4b1b6:	d407      	bmi.n	4b1c8 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   4b1b8:	4621      	mov	r1, r4
   4b1ba:	a808      	add	r0, sp, #32
   4b1bc:	f7ff fc56 	bl	4aa6c <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   4b1c0:	4622      	mov	r2, r4
   4b1c2:	4629      	mov	r1, r5
   4b1c4:	a818      	add	r0, sp, #96	; 0x60
   4b1c6:	e7f1      	b.n	4b1ac <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   4b1c8:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   4b1ca:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   4b1cc:	dd1c      	ble.n	4b208 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   4b1ce:	aa08      	add	r2, sp, #32
   4b1d0:	4669      	mov	r1, sp
   4b1d2:	4668      	mov	r0, sp
   4b1d4:	f7ff fd55 	bl	4ac82 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   4b1d8:	4621      	mov	r1, r4
   4b1da:	4668      	mov	r0, sp
   4b1dc:	f7ff fc46 	bl	4aa6c <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   4b1e0:	4622      	mov	r2, r4
   4b1e2:	a918      	add	r1, sp, #96	; 0x60
   4b1e4:	a810      	add	r0, sp, #64	; 0x40
   4b1e6:	f7ff fd25 	bl	4ac34 <uECC_vli_cmp_unsafe>
   4b1ea:	2800      	cmp	r0, #0
   4b1ec:	da05      	bge.n	4b1fa <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   4b1ee:	a910      	add	r1, sp, #64	; 0x40
   4b1f0:	4623      	mov	r3, r4
   4b1f2:	462a      	mov	r2, r5
   4b1f4:	4608      	mov	r0, r1
   4b1f6:	f7ff fc1f 	bl	4aa38 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   4b1fa:	a910      	add	r1, sp, #64	; 0x40
   4b1fc:	4623      	mov	r3, r4
   4b1fe:	aa18      	add	r2, sp, #96	; 0x60
   4b200:	4608      	mov	r0, r1
   4b202:	f7ff fd3e 	bl	4ac82 <uECC_vli_sub>
   4b206:	e7ce      	b.n	4b1a6 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   4b208:	466a      	mov	r2, sp
   4b20a:	a808      	add	r0, sp, #32
   4b20c:	f7ff fd39 	bl	4ac82 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   4b210:	4621      	mov	r1, r4
   4b212:	a808      	add	r0, sp, #32
   4b214:	f7ff fc2a 	bl	4aa6c <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   4b218:	4622      	mov	r2, r4
   4b21a:	a910      	add	r1, sp, #64	; 0x40
   4b21c:	a818      	add	r0, sp, #96	; 0x60
   4b21e:	f7ff fd09 	bl	4ac34 <uECC_vli_cmp_unsafe>
   4b222:	2800      	cmp	r0, #0
   4b224:	da05      	bge.n	4b232 <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   4b226:	a918      	add	r1, sp, #96	; 0x60
   4b228:	4623      	mov	r3, r4
   4b22a:	462a      	mov	r2, r5
   4b22c:	4608      	mov	r0, r1
   4b22e:	f7ff fc03 	bl	4aa38 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   4b232:	a918      	add	r1, sp, #96	; 0x60
   4b234:	4623      	mov	r3, r4
   4b236:	aa10      	add	r2, sp, #64	; 0x40
   4b238:	4608      	mov	r0, r1
   4b23a:	f7ff fd22 	bl	4ac82 <uECC_vli_sub>
   4b23e:	e7bf      	b.n	4b1c0 <uECC_vli_modInv+0x88>

0004b240 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   4b240:	7809      	ldrb	r1, [r1, #0]
   4b242:	0049      	lsls	r1, r1, #1
   4b244:	b249      	sxtb	r1, r1
   4b246:	f7ff bcb1 	b.w	4abac <uECC_vli_isZero>

0004b24a <apply_z>:
{
   4b24a:	b5f0      	push	{r4, r5, r6, r7, lr}
   4b24c:	4615      	mov	r5, r2
   4b24e:	b089      	sub	sp, #36	; 0x24
   4b250:	461c      	mov	r4, r3
   4b252:	4607      	mov	r7, r0
   4b254:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   4b256:	461a      	mov	r2, r3
   4b258:	4629      	mov	r1, r5
   4b25a:	4668      	mov	r0, sp
   4b25c:	f7ff fe02 	bl	4ae64 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   4b260:	4623      	mov	r3, r4
   4b262:	466a      	mov	r2, sp
   4b264:	4639      	mov	r1, r7
   4b266:	4638      	mov	r0, r7
   4b268:	f7ff fdec 	bl	4ae44 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   4b26c:	4623      	mov	r3, r4
   4b26e:	462a      	mov	r2, r5
   4b270:	4669      	mov	r1, sp
   4b272:	4668      	mov	r0, sp
   4b274:	f7ff fde6 	bl	4ae44 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   4b278:	4623      	mov	r3, r4
   4b27a:	466a      	mov	r2, sp
   4b27c:	4631      	mov	r1, r6
   4b27e:	4630      	mov	r0, r6
   4b280:	f7ff fde0 	bl	4ae44 <uECC_vli_modMult_fast>
}
   4b284:	b009      	add	sp, #36	; 0x24
   4b286:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004b288 <XYcZ_add>:
{
   4b288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4b28c:	b08a      	sub	sp, #40	; 0x28
   4b28e:	4614      	mov	r4, r2
   4b290:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   4b294:	4655      	mov	r5, sl
{
   4b296:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   4b298:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4b29c:	9600      	str	r6, [sp, #0]
{
   4b29e:	4680      	mov	r8, r0
   4b2a0:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4b2a2:	462b      	mov	r3, r5
   4b2a4:	4602      	mov	r2, r0
   4b2a6:	4621      	mov	r1, r4
   4b2a8:	a802      	add	r0, sp, #8
   4b2aa:	f7ff fd1e 	bl	4acea <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   4b2ae:	a902      	add	r1, sp, #8
   4b2b0:	4652      	mov	r2, sl
   4b2b2:	4608      	mov	r0, r1
   4b2b4:	f7ff fdd6 	bl	4ae64 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   4b2b8:	4653      	mov	r3, sl
   4b2ba:	aa02      	add	r2, sp, #8
   4b2bc:	4641      	mov	r1, r8
   4b2be:	4640      	mov	r0, r8
   4b2c0:	f7ff fdc0 	bl	4ae44 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   4b2c4:	4653      	mov	r3, sl
   4b2c6:	aa02      	add	r2, sp, #8
   4b2c8:	4621      	mov	r1, r4
   4b2ca:	4620      	mov	r0, r4
   4b2cc:	f7ff fdba 	bl	4ae44 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   4b2d0:	462b      	mov	r3, r5
   4b2d2:	464a      	mov	r2, r9
   4b2d4:	4639      	mov	r1, r7
   4b2d6:	4638      	mov	r0, r7
   4b2d8:	9600      	str	r6, [sp, #0]
   4b2da:	f7ff fd06 	bl	4acea <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   4b2de:	4652      	mov	r2, sl
   4b2e0:	4639      	mov	r1, r7
   4b2e2:	a802      	add	r0, sp, #8
   4b2e4:	f7ff fdbe 	bl	4ae64 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   4b2e8:	a902      	add	r1, sp, #8
   4b2ea:	462b      	mov	r3, r5
   4b2ec:	4642      	mov	r2, r8
   4b2ee:	4608      	mov	r0, r1
   4b2f0:	9600      	str	r6, [sp, #0]
   4b2f2:	f7ff fcfa 	bl	4acea <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   4b2f6:	a902      	add	r1, sp, #8
   4b2f8:	462b      	mov	r3, r5
   4b2fa:	4622      	mov	r2, r4
   4b2fc:	4608      	mov	r0, r1
   4b2fe:	9600      	str	r6, [sp, #0]
   4b300:	f7ff fcf3 	bl	4acea <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   4b304:	462b      	mov	r3, r5
   4b306:	4642      	mov	r2, r8
   4b308:	4621      	mov	r1, r4
   4b30a:	4620      	mov	r0, r4
   4b30c:	9600      	str	r6, [sp, #0]
   4b30e:	f7ff fcec 	bl	4acea <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   4b312:	4653      	mov	r3, sl
   4b314:	4622      	mov	r2, r4
   4b316:	4649      	mov	r1, r9
   4b318:	4648      	mov	r0, r9
   4b31a:	f7ff fd93 	bl	4ae44 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   4b31e:	462b      	mov	r3, r5
   4b320:	aa02      	add	r2, sp, #8
   4b322:	4641      	mov	r1, r8
   4b324:	4620      	mov	r0, r4
   4b326:	9600      	str	r6, [sp, #0]
   4b328:	f7ff fcdf 	bl	4acea <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   4b32c:	4653      	mov	r3, sl
   4b32e:	4622      	mov	r2, r4
   4b330:	4639      	mov	r1, r7
   4b332:	4638      	mov	r0, r7
   4b334:	f7ff fd86 	bl	4ae44 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   4b338:	462b      	mov	r3, r5
   4b33a:	464a      	mov	r2, r9
   4b33c:	4639      	mov	r1, r7
   4b33e:	4638      	mov	r0, r7
   4b340:	9600      	str	r6, [sp, #0]
   4b342:	f7ff fcd2 	bl	4acea <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   4b346:	4632      	mov	r2, r6
   4b348:	a902      	add	r1, sp, #8
   4b34a:	4620      	mov	r0, r4
   4b34c:	f7ff fc66 	bl	4ac1c <uECC_vli_set>
}
   4b350:	b00a      	add	sp, #40	; 0x28
   4b352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004b356 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   4b356:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4b35a:	b0af      	sub	sp, #188	; 0xbc
   4b35c:	4691      	mov	r9, r2
   4b35e:	9c39      	ldr	r4, [sp, #228]	; 0xe4
   4b360:	9002      	str	r0, [sp, #8]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   4b362:	f994 6000 	ldrsb.w	r6, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   4b366:	a816      	add	r0, sp, #88	; 0x58
   4b368:	4632      	mov	r2, r6
{
   4b36a:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   4b36c:	f7ff fc56 	bl	4ac1c <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   4b370:	00b3      	lsls	r3, r6, #2
   4b372:	9303      	str	r3, [sp, #12]
   4b374:	eb01 0386 	add.w	r3, r1, r6, lsl #2
{
   4b378:	4688      	mov	r8, r1
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   4b37a:	a826      	add	r0, sp, #152	; 0x98
   4b37c:	4619      	mov	r1, r3
   4b37e:	9304      	str	r3, [sp, #16]
   4b380:	f7ff fc4c 	bl	4ac1c <uECC_vli_set>
	if (initial_Z) {
   4b384:	2d00      	cmp	r5, #0
   4b386:	f000 8081 	beq.w	4b48c <EccPoint_mult+0x136>
		uECC_vli_set(z, initial_Z, num_words);
   4b38a:	4629      	mov	r1, r5
   4b38c:	a806      	add	r0, sp, #24
   4b38e:	f7ff fc45 	bl	4ac1c <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   4b392:	4632      	mov	r2, r6
   4b394:	a916      	add	r1, sp, #88	; 0x58
   4b396:	a80e      	add	r0, sp, #56	; 0x38
   4b398:	f7ff fc40 	bl	4ac1c <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   4b39c:	a926      	add	r1, sp, #152	; 0x98
   4b39e:	a81e      	add	r0, sp, #120	; 0x78
   4b3a0:	f7ff fc3c 	bl	4ac1c <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   4b3a4:	4623      	mov	r3, r4
   4b3a6:	aa06      	add	r2, sp, #24
   4b3a8:	a816      	add	r0, sp, #88	; 0x58
   4b3aa:	f7ff ff4e 	bl	4b24a <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   4b3ae:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   4b3b2:	4623      	mov	r3, r4
   4b3b4:	aa06      	add	r2, sp, #24
   4b3b6:	a926      	add	r1, sp, #152	; 0x98
   4b3b8:	a816      	add	r0, sp, #88	; 0x58
   4b3ba:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   4b3bc:	4623      	mov	r3, r4
   4b3be:	aa06      	add	r2, sp, #24
   4b3c0:	a91e      	add	r1, sp, #120	; 0x78
   4b3c2:	a80e      	add	r0, sp, #56	; 0x38
   4b3c4:	f7ff ff41 	bl	4b24a <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   4b3c8:	f9bd 50e0 	ldrsh.w	r5, [sp, #224]	; 0xe0
   4b3cc:	3d02      	subs	r5, #2
   4b3ce:	b22d      	sxth	r5, r5
   4b3d0:	2d00      	cmp	r5, #0
   4b3d2:	dc62      	bgt.n	4b49a <EccPoint_mult+0x144>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4b3d4:	f8d9 5000 	ldr.w	r5, [r9]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4b3d8:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4b3da:	f005 0701 	and.w	r7, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4b3de:	ab0e      	add	r3, sp, #56	; 0x38
   4b3e0:	eb03 1947 	add.w	r9, r3, r7, lsl #5
   4b3e4:	43ed      	mvns	r5, r5
   4b3e6:	ab1e      	add	r3, sp, #120	; 0x78
   4b3e8:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   4b3ec:	f005 0501 	and.w	r5, r5, #1
   4b3f0:	ab0e      	add	r3, sp, #56	; 0x38
   4b3f2:	eb03 1a45 	add.w	sl, r3, r5, lsl #5
   4b3f6:	ab1e      	add	r3, sp, #120	; 0x78
   4b3f8:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   4b3fc:	462b      	mov	r3, r5
   4b3fe:	4652      	mov	r2, sl
   4b400:	4639      	mov	r1, r7
   4b402:	4648      	mov	r0, r9

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   4b404:	f104 0b04 	add.w	fp, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4b408:	f7ff fe08 	bl	4b01c <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   4b40c:	465b      	mov	r3, fp
   4b40e:	aa0e      	add	r2, sp, #56	; 0x38
   4b410:	a916      	add	r1, sp, #88	; 0x58
   4b412:	a806      	add	r0, sp, #24
   4b414:	9600      	str	r6, [sp, #0]
   4b416:	f7ff fc68 	bl	4acea <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   4b41a:	a906      	add	r1, sp, #24
   4b41c:	4623      	mov	r3, r4
   4b41e:	463a      	mov	r2, r7
   4b420:	4608      	mov	r0, r1
   4b422:	f7ff fd0f 	bl	4ae44 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   4b426:	a906      	add	r1, sp, #24
   4b428:	4623      	mov	r3, r4
   4b42a:	4642      	mov	r2, r8
   4b42c:	4608      	mov	r0, r1
   4b42e:	f7ff fd09 	bl	4ae44 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   4b432:	a906      	add	r1, sp, #24
   4b434:	4633      	mov	r3, r6
   4b436:	465a      	mov	r2, fp
   4b438:	4608      	mov	r0, r1
   4b43a:	f7ff fe7d 	bl	4b138 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   4b43e:	a906      	add	r1, sp, #24
   4b440:	9a04      	ldr	r2, [sp, #16]
   4b442:	4623      	mov	r3, r4
   4b444:	4608      	mov	r0, r1
   4b446:	f7ff fcfd 	bl	4ae44 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   4b44a:	a906      	add	r1, sp, #24
   4b44c:	4623      	mov	r3, r4
   4b44e:	464a      	mov	r2, r9
   4b450:	4608      	mov	r0, r1
   4b452:	f7ff fcf7 	bl	4ae44 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   4b456:	463b      	mov	r3, r7
   4b458:	464a      	mov	r2, r9
   4b45a:	4629      	mov	r1, r5
   4b45c:	4650      	mov	r0, sl
   4b45e:	9400      	str	r4, [sp, #0]
   4b460:	f7ff ff12 	bl	4b288 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   4b464:	4623      	mov	r3, r4
   4b466:	aa06      	add	r2, sp, #24
   4b468:	a91e      	add	r1, sp, #120	; 0x78
   4b46a:	a80e      	add	r0, sp, #56	; 0x38
   4b46c:	f7ff feed 	bl	4b24a <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   4b470:	9802      	ldr	r0, [sp, #8]
   4b472:	4632      	mov	r2, r6
   4b474:	a90e      	add	r1, sp, #56	; 0x38
   4b476:	f7ff fbd1 	bl	4ac1c <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   4b47a:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   4b47e:	a91e      	add	r1, sp, #120	; 0x78
   4b480:	4418      	add	r0, r3
   4b482:	f7ff fbcb 	bl	4ac1c <uECC_vli_set>
}
   4b486:	b02f      	add	sp, #188	; 0xbc
   4b488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   4b48c:	4631      	mov	r1, r6
   4b48e:	a806      	add	r0, sp, #24
   4b490:	f7ff fb81 	bl	4ab96 <uECC_vli_clear>
		z[0] = 1;
   4b494:	2301      	movs	r3, #1
   4b496:	9306      	str	r3, [sp, #24]
   4b498:	e77b      	b.n	4b392 <EccPoint_mult+0x3c>
		nb = !uECC_vli_testBit(scalar, i);
   4b49a:	4629      	mov	r1, r5
   4b49c:	4648      	mov	r0, r9
   4b49e:	f7ff fb94 	bl	4abca <uECC_vli_testBit>
   4b4a2:	fab0 f780 	clz	r7, r0
   4b4a6:	097f      	lsrs	r7, r7, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4b4a8:	f1c7 0101 	rsb	r1, r7, #1
   4b4ac:	ab0e      	add	r3, sp, #56	; 0x38
   4b4ae:	eb03 1b41 	add.w	fp, r3, r1, lsl #5
   4b4b2:	ab1e      	add	r3, sp, #120	; 0x78
   4b4b4:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   4b4b8:	ab0e      	add	r3, sp, #56	; 0x38
   4b4ba:	eb03 1a47 	add.w	sl, r3, r7, lsl #5
   4b4be:	ab1e      	add	r3, sp, #120	; 0x78
   4b4c0:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   4b4c4:	463b      	mov	r3, r7
   4b4c6:	4652      	mov	r2, sl
   4b4c8:	4658      	mov	r0, fp
   4b4ca:	9400      	str	r4, [sp, #0]
   4b4cc:	9105      	str	r1, [sp, #20]
   4b4ce:	f7ff fda5 	bl	4b01c <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   4b4d2:	9905      	ldr	r1, [sp, #20]
   4b4d4:	9400      	str	r4, [sp, #0]
   4b4d6:	460b      	mov	r3, r1
   4b4d8:	465a      	mov	r2, fp
   4b4da:	4639      	mov	r1, r7
   4b4dc:	4650      	mov	r0, sl
   4b4de:	f7ff fed3 	bl	4b288 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   4b4e2:	3d01      	subs	r5, #1
   4b4e4:	e773      	b.n	4b3ce <EccPoint_mult+0x78>

0004b4e6 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   4b4e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   4b4ea:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   4b4ee:	f119 061f 	adds.w	r6, r9, #31
   4b4f2:	bf48      	it	mi
   4b4f4:	f109 063e 	addmi.w	r6, r9, #62	; 0x3e
{
   4b4f8:	460f      	mov	r7, r1

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   4b4fa:	f103 0524 	add.w	r5, r3, #36	; 0x24
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   4b4fe:	f346 1647 	sbfx	r6, r6, #5, #8
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   4b502:	4601      	mov	r1, r0
{
   4b504:	4690      	mov	r8, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   4b506:	4633      	mov	r3, r6
   4b508:	462a      	mov	r2, r5
   4b50a:	4638      	mov	r0, r7
   4b50c:	f7ff fa94 	bl	4aa38 <uECC_vli_add>
   4b510:	4604      	mov	r4, r0
   4b512:	b990      	cbnz	r0, 4b53a <regularize_k+0x54>
   4b514:	ebb9 1f46 	cmp.w	r9, r6, lsl #5
   4b518:	da06      	bge.n	4b528 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   4b51a:	4649      	mov	r1, r9
   4b51c:	4638      	mov	r0, r7
   4b51e:	f7ff fb54 	bl	4abca <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   4b522:	1e04      	subs	r4, r0, #0
   4b524:	bf18      	it	ne
   4b526:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   4b528:	4633      	mov	r3, r6
   4b52a:	462a      	mov	r2, r5
   4b52c:	4639      	mov	r1, r7
   4b52e:	4640      	mov	r0, r8
   4b530:	f7ff fa82 	bl	4aa38 <uECC_vli_add>

	return carry;
}
   4b534:	4620      	mov	r0, r4
   4b536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   4b53a:	2401      	movs	r4, #1
   4b53c:	e7f4      	b.n	4b528 <regularize_k+0x42>

0004b53e <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   4b53e:	b530      	push	{r4, r5, lr}
   4b540:	4614      	mov	r4, r2
   4b542:	b095      	sub	sp, #84	; 0x54
   4b544:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   4b546:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   4b548:	4623      	mov	r3, r4
{
   4b54a:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   4b54c:	a904      	add	r1, sp, #16
   4b54e:	9102      	str	r1, [sp, #8]
   4b550:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   4b552:	f7ff ffc8 	bl	4b4e6 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   4b556:	fab0 f380 	clz	r3, r0
   4b55a:	9401      	str	r4, [sp, #4]
   4b55c:	095b      	lsrs	r3, r3, #5
   4b55e:	aa14      	add	r2, sp, #80	; 0x50
   4b560:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   4b564:	8863      	ldrh	r3, [r4, #2]
   4b566:	3301      	adds	r3, #1
   4b568:	b21b      	sxth	r3, r3
   4b56a:	9300      	str	r3, [sp, #0]
   4b56c:	f852 2c48 	ldr.w	r2, [r2, #-72]
   4b570:	2300      	movs	r3, #0
   4b572:	f104 0144 	add.w	r1, r4, #68	; 0x44
   4b576:	4628      	mov	r0, r5
   4b578:	f7ff feed 	bl	4b356 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   4b57c:	4621      	mov	r1, r4
   4b57e:	4628      	mov	r0, r5
   4b580:	f7ff fe5e 	bl	4b240 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   4b584:	fab0 f080 	clz	r0, r0
   4b588:	0940      	lsrs	r0, r0, #5
   4b58a:	b015      	add	sp, #84	; 0x54
   4b58c:	bd30      	pop	{r4, r5, pc}

0004b58e <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   4b58e:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   4b590:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   4b592:	1e4f      	subs	r7, r1, #1
   4b594:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   4b596:	428c      	cmp	r4, r1
   4b598:	f105 0501 	add.w	r5, r5, #1
   4b59c:	db00      	blt.n	4b5a0 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   4b59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   4b5a0:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   4b5a2:	f023 0603 	bic.w	r6, r3, #3
   4b5a6:	f003 0303 	and.w	r3, r3, #3
   4b5aa:	5996      	ldr	r6, [r2, r6]
   4b5ac:	00db      	lsls	r3, r3, #3
   4b5ae:	fa26 f303 	lsr.w	r3, r6, r3
   4b5b2:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   4b5b4:	e7ee      	b.n	4b594 <uECC_vli_nativeToBytes+0x6>

0004b5b6 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   4b5b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4b5b8:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   4b5ba:	1cd1      	adds	r1, r2, #3
   4b5bc:	bf48      	it	mi
   4b5be:	1d91      	addmi	r1, r2, #6
   4b5c0:	f341 0187 	sbfx	r1, r1, #2, #8
{
   4b5c4:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   4b5c6:	f7ff fae6 	bl	4ab96 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   4b5ca:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   4b5cc:	1e67      	subs	r7, r4, #1
   4b5ce:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   4b5d0:	42a2      	cmp	r2, r4
   4b5d2:	f105 0501 	add.w	r5, r5, #1
   4b5d6:	db00      	blt.n	4b5da <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   4b5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   4b5da:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   4b5dc:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   4b5e0:	5cb2      	ldrb	r2, [r6, r2]
   4b5e2:	f003 0303 	and.w	r3, r3, #3
   4b5e6:	00db      	lsls	r3, r3, #3
   4b5e8:	409a      	lsls	r2, r3
		native[b / uECC_WORD_SIZE] |=
   4b5ea:	5843      	ldr	r3, [r0, r1]
   4b5ec:	4313      	orrs	r3, r2
   4b5ee:	5043      	str	r3, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   4b5f0:	e7ed      	b.n	4b5ce <uECC_vli_bytesToNative+0x18>

0004b5f2 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   4b5f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   4b5f4:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   4b5f6:	f991 6000 	ldrsb.w	r6, [r1]
{
   4b5fa:	4605      	mov	r5, r0
   4b5fc:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   4b5fe:	f7ff fe1f 	bl	4b240 <EccPoint_isZero>
   4b602:	bb28      	cbnz	r0, 4b650 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   4b604:	1d27      	adds	r7, r4, #4
   4b606:	4632      	mov	r2, r6
   4b608:	4629      	mov	r1, r5
   4b60a:	4638      	mov	r0, r7
   4b60c:	f7ff fb12 	bl	4ac34 <uECC_vli_cmp_unsafe>
   4b610:	2801      	cmp	r0, #1
   4b612:	d120      	bne.n	4b656 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   4b614:	4632      	mov	r2, r6
   4b616:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   4b61a:	4638      	mov	r0, r7
   4b61c:	f7ff fb0a 	bl	4ac34 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   4b620:	2801      	cmp	r0, #1
   4b622:	d118      	bne.n	4b656 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   4b624:	4622      	mov	r2, r4
   4b626:	4668      	mov	r0, sp
   4b628:	f7ff fc1c 	bl	4ae64 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   4b62c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   4b630:	4622      	mov	r2, r4
   4b632:	4629      	mov	r1, r5
   4b634:	a808      	add	r0, sp, #32
   4b636:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   4b638:	4632      	mov	r2, r6
   4b63a:	a908      	add	r1, sp, #32
   4b63c:	4668      	mov	r0, sp
   4b63e:	f7ff fb0e 	bl	4ac5e <uECC_vli_equal>
		return -3;

	return 0;
   4b642:	2800      	cmp	r0, #0
   4b644:	bf14      	ite	ne
   4b646:	f06f 0002 	mvnne.w	r0, #2
   4b64a:	2000      	moveq	r0, #0
}
   4b64c:	b011      	add	sp, #68	; 0x44
   4b64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   4b650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4b654:	e7fa      	b.n	4b64c <uECC_valid_point+0x5a>
		return -2;
   4b656:	f06f 0001 	mvn.w	r0, #1
   4b65a:	e7f7      	b.n	4b64c <uECC_valid_point+0x5a>

0004b65c <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   4b65c:	b5f0      	push	{r4, r5, r6, r7, lr}
   4b65e:	460c      	mov	r4, r1

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   4b660:	f991 7001 	ldrsb.w	r7, [r1, #1]
{
   4b664:	b091      	sub	sp, #68	; 0x44
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   4b666:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   4b668:	4601      	mov	r1, r0
{
   4b66a:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   4b66c:	463a      	mov	r2, r7
   4b66e:	4668      	mov	r0, sp
   4b670:	f7ff ffa1 	bl	4b5b6 <uECC_vli_bytesToNative>
	_public + curve->num_words,
   4b674:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   4b678:	463a      	mov	r2, r7
   4b67a:	19e9      	adds	r1, r5, r7
   4b67c:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   4b680:	f7ff ff99 	bl	4b5b6 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   4b684:	2210      	movs	r2, #16
   4b686:	4631      	mov	r1, r6
   4b688:	4668      	mov	r0, sp
   4b68a:	f7ff fad3 	bl	4ac34 <uECC_vli_cmp_unsafe>
   4b68e:	b128      	cbz	r0, 4b69c <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   4b690:	4621      	mov	r1, r4
   4b692:	4668      	mov	r0, sp
   4b694:	f7ff ffad 	bl	4b5f2 <uECC_valid_point>
}
   4b698:	b011      	add	sp, #68	; 0x44
   4b69a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -4;
   4b69c:	f06f 0003 	mvn.w	r0, #3
   4b6a0:	e7fa      	b.n	4b698 <uECC_valid_public_key+0x3c>

0004b6a2 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   4b6a2:	78cb      	ldrb	r3, [r1, #3]
   4b6a4:	7802      	ldrb	r2, [r0, #0]
   4b6a6:	4053      	eors	r3, r2
   4b6a8:	7003      	strb	r3, [r0, #0]
   4b6aa:	884b      	ldrh	r3, [r1, #2]
   4b6ac:	7842      	ldrb	r2, [r0, #1]
   4b6ae:	4053      	eors	r3, r2
   4b6b0:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   4b6b2:	680a      	ldr	r2, [r1, #0]
   4b6b4:	7883      	ldrb	r3, [r0, #2]
   4b6b6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4b6ba:	7083      	strb	r3, [r0, #2]
   4b6bc:	680a      	ldr	r2, [r1, #0]
   4b6be:	78c3      	ldrb	r3, [r0, #3]
   4b6c0:	4053      	eors	r3, r2
   4b6c2:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   4b6c4:	79cb      	ldrb	r3, [r1, #7]
   4b6c6:	7902      	ldrb	r2, [r0, #4]
   4b6c8:	4053      	eors	r3, r2
   4b6ca:	7103      	strb	r3, [r0, #4]
   4b6cc:	88cb      	ldrh	r3, [r1, #6]
   4b6ce:	7942      	ldrb	r2, [r0, #5]
   4b6d0:	4053      	eors	r3, r2
   4b6d2:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   4b6d4:	684a      	ldr	r2, [r1, #4]
   4b6d6:	7983      	ldrb	r3, [r0, #6]
   4b6d8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4b6dc:	7183      	strb	r3, [r0, #6]
   4b6de:	684a      	ldr	r2, [r1, #4]
   4b6e0:	79c3      	ldrb	r3, [r0, #7]
   4b6e2:	4053      	eors	r3, r2
   4b6e4:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   4b6e6:	7acb      	ldrb	r3, [r1, #11]
   4b6e8:	7a02      	ldrb	r2, [r0, #8]
   4b6ea:	4053      	eors	r3, r2
   4b6ec:	7203      	strb	r3, [r0, #8]
   4b6ee:	7a42      	ldrb	r2, [r0, #9]
   4b6f0:	894b      	ldrh	r3, [r1, #10]
   4b6f2:	4053      	eors	r3, r2
   4b6f4:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   4b6f6:	688a      	ldr	r2, [r1, #8]
   4b6f8:	7a83      	ldrb	r3, [r0, #10]
   4b6fa:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4b6fe:	7283      	strb	r3, [r0, #10]
   4b700:	688a      	ldr	r2, [r1, #8]
   4b702:	7ac3      	ldrb	r3, [r0, #11]
   4b704:	4053      	eors	r3, r2
   4b706:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   4b708:	7bcb      	ldrb	r3, [r1, #15]
   4b70a:	7b02      	ldrb	r2, [r0, #12]
   4b70c:	4053      	eors	r3, r2
   4b70e:	7303      	strb	r3, [r0, #12]
   4b710:	89cb      	ldrh	r3, [r1, #14]
   4b712:	7b42      	ldrb	r2, [r0, #13]
   4b714:	4053      	eors	r3, r2
   4b716:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   4b718:	68ca      	ldr	r2, [r1, #12]
   4b71a:	7b83      	ldrb	r3, [r0, #14]
   4b71c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4b720:	7383      	strb	r3, [r0, #14]
   4b722:	68ca      	ldr	r2, [r1, #12]
   4b724:	7bc3      	ldrb	r3, [r0, #15]
   4b726:	4053      	eors	r3, r2
   4b728:	73c3      	strb	r3, [r0, #15]
}
   4b72a:	4770      	bx	lr

0004b72c <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   4b72c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   4b72e:	7802      	ldrb	r2, [r0, #0]
   4b730:	f88d 2000 	strb.w	r2, [sp]
   4b734:	7942      	ldrb	r2, [r0, #5]
   4b736:	f88d 2001 	strb.w	r2, [sp, #1]
   4b73a:	7a82      	ldrb	r2, [r0, #10]
   4b73c:	f88d 2002 	strb.w	r2, [sp, #2]
   4b740:	7bc2      	ldrb	r2, [r0, #15]
   4b742:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   4b746:	7902      	ldrb	r2, [r0, #4]
   4b748:	f88d 2004 	strb.w	r2, [sp, #4]
   4b74c:	7a42      	ldrb	r2, [r0, #9]
   4b74e:	f88d 2005 	strb.w	r2, [sp, #5]
   4b752:	7b82      	ldrb	r2, [r0, #14]
   4b754:	f88d 2006 	strb.w	r2, [sp, #6]
   4b758:	78c2      	ldrb	r2, [r0, #3]
   4b75a:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   4b75e:	7a02      	ldrb	r2, [r0, #8]
   4b760:	f88d 2008 	strb.w	r2, [sp, #8]
   4b764:	7b42      	ldrb	r2, [r0, #13]
   4b766:	f88d 2009 	strb.w	r2, [sp, #9]
   4b76a:	7882      	ldrb	r2, [r0, #2]
   4b76c:	f88d 200a 	strb.w	r2, [sp, #10]
   4b770:	79c2      	ldrb	r2, [r0, #7]
   4b772:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   4b776:	7b02      	ldrb	r2, [r0, #12]
   4b778:	f88d 200c 	strb.w	r2, [sp, #12]
   4b77c:	7842      	ldrb	r2, [r0, #1]
   4b77e:	7ac3      	ldrb	r3, [r0, #11]
   4b780:	f88d 200d 	strb.w	r2, [sp, #13]
   4b784:	7982      	ldrb	r2, [r0, #6]
   4b786:	f88d 200e 	strb.w	r2, [sp, #14]
   4b78a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   4b78e:	2310      	movs	r3, #16
   4b790:	466a      	mov	r2, sp
   4b792:	4619      	mov	r1, r3
   4b794:	f7ff f88c 	bl	4a8b0 <_copy>
}
   4b798:	b005      	add	sp, #20
   4b79a:	f85d fb04 	ldr.w	pc, [sp], #4

0004b79e <mult_row_column>:
{
   4b79e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4b7a0:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   4b7a2:	7808      	ldrb	r0, [r1, #0]
{
   4b7a4:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   4b7a6:	f7ff f892 	bl	4a8ce <_double_byte>
   4b7aa:	4605      	mov	r5, r0
   4b7ac:	7860      	ldrb	r0, [r4, #1]
   4b7ae:	f7ff f88e 	bl	4a8ce <_double_byte>
   4b7b2:	78a2      	ldrb	r2, [r4, #2]
   4b7b4:	7863      	ldrb	r3, [r4, #1]
   4b7b6:	4053      	eors	r3, r2
   4b7b8:	78e2      	ldrb	r2, [r4, #3]
   4b7ba:	4053      	eors	r3, r2
   4b7bc:	405d      	eors	r5, r3
   4b7be:	4068      	eors	r0, r5
   4b7c0:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   4b7c2:	7860      	ldrb	r0, [r4, #1]
   4b7c4:	7827      	ldrb	r7, [r4, #0]
   4b7c6:	f7ff f882 	bl	4a8ce <_double_byte>
   4b7ca:	4605      	mov	r5, r0
   4b7cc:	78a0      	ldrb	r0, [r4, #2]
   4b7ce:	f7ff f87e 	bl	4a8ce <_double_byte>
   4b7d2:	78a3      	ldrb	r3, [r4, #2]
   4b7d4:	405f      	eors	r7, r3
   4b7d6:	78e3      	ldrb	r3, [r4, #3]
   4b7d8:	405f      	eors	r7, r3
   4b7da:	407d      	eors	r5, r7
   4b7dc:	4068      	eors	r0, r5
   4b7de:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   4b7e0:	7863      	ldrb	r3, [r4, #1]
   4b7e2:	7827      	ldrb	r7, [r4, #0]
   4b7e4:	78a0      	ldrb	r0, [r4, #2]
   4b7e6:	405f      	eors	r7, r3
   4b7e8:	f7ff f871 	bl	4a8ce <_double_byte>
   4b7ec:	4605      	mov	r5, r0
   4b7ee:	78e0      	ldrb	r0, [r4, #3]
   4b7f0:	f7ff f86d 	bl	4a8ce <_double_byte>
   4b7f4:	78e3      	ldrb	r3, [r4, #3]
   4b7f6:	405f      	eors	r7, r3
   4b7f8:	407d      	eors	r5, r7
   4b7fa:	4068      	eors	r0, r5
   4b7fc:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   4b7fe:	7820      	ldrb	r0, [r4, #0]
   4b800:	f7ff f865 	bl	4a8ce <_double_byte>
   4b804:	7862      	ldrb	r2, [r4, #1]
   4b806:	7823      	ldrb	r3, [r4, #0]
   4b808:	4053      	eors	r3, r2
   4b80a:	78a2      	ldrb	r2, [r4, #2]
   4b80c:	4053      	eors	r3, r2
   4b80e:	ea80 0503 	eor.w	r5, r0, r3
   4b812:	78e0      	ldrb	r0, [r4, #3]
   4b814:	f7ff f85b 	bl	4a8ce <_double_byte>
   4b818:	b2ed      	uxtb	r5, r5
   4b81a:	4045      	eors	r5, r0
   4b81c:	70f5      	strb	r5, [r6, #3]
}
   4b81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004b820 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   4b820:	b570      	push	{r4, r5, r6, lr}
   4b822:	4614      	mov	r4, r2
   4b824:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   4b826:	4605      	mov	r5, r0
   4b828:	2800      	cmp	r0, #0
   4b82a:	d049      	beq.n	4b8c0 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   4b82c:	2900      	cmp	r1, #0
   4b82e:	d049      	beq.n	4b8c4 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   4b830:	2a00      	cmp	r2, #0
   4b832:	d049      	beq.n	4b8c8 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   4b834:	2310      	movs	r3, #16
   4b836:	460a      	mov	r2, r1
   4b838:	4668      	mov	r0, sp
   4b83a:	4619      	mov	r1, r3
   4b83c:	f7ff f838 	bl	4a8b0 <_copy>
	add_round_key(state, s->words);
   4b840:	4621      	mov	r1, r4
   4b842:	4668      	mov	r0, sp
   4b844:	f7ff ff2d 	bl	4b6a2 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   4b848:	3410      	adds	r4, #16
   4b84a:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   4b84e:	4668      	mov	r0, sp
   4b850:	f7e1 f930 	bl	2cab4 <sub_bytes>
		shift_rows(state);
   4b854:	4668      	mov	r0, sp
   4b856:	f7ff ff69 	bl	4b72c <shift_rows>
	mult_row_column(t, s);
   4b85a:	4669      	mov	r1, sp
   4b85c:	a804      	add	r0, sp, #16
   4b85e:	f7ff ff9e 	bl	4b79e <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   4b862:	a901      	add	r1, sp, #4
   4b864:	a805      	add	r0, sp, #20
   4b866:	f7ff ff9a 	bl	4b79e <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   4b86a:	a902      	add	r1, sp, #8
   4b86c:	a806      	add	r0, sp, #24
   4b86e:	f7ff ff96 	bl	4b79e <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   4b872:	a903      	add	r1, sp, #12
   4b874:	a807      	add	r0, sp, #28
   4b876:	f7ff ff92 	bl	4b79e <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   4b87a:	2310      	movs	r3, #16
   4b87c:	4619      	mov	r1, r3
   4b87e:	eb0d 0203 	add.w	r2, sp, r3
   4b882:	4668      	mov	r0, sp
   4b884:	f7ff f814 	bl	4a8b0 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   4b888:	4621      	mov	r1, r4
   4b88a:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   4b88c:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   4b88e:	f7ff ff08 	bl	4b6a2 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   4b892:	42b4      	cmp	r4, r6
   4b894:	d1db      	bne.n	4b84e <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   4b896:	f7e1 f90d 	bl	2cab4 <sub_bytes>
	shift_rows(state);
   4b89a:	4668      	mov	r0, sp
   4b89c:	f7ff ff46 	bl	4b72c <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   4b8a0:	4621      	mov	r1, r4
   4b8a2:	4668      	mov	r0, sp
   4b8a4:	f7ff fefd 	bl	4b6a2 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   4b8a8:	2310      	movs	r3, #16
   4b8aa:	4619      	mov	r1, r3
   4b8ac:	466a      	mov	r2, sp
   4b8ae:	4628      	mov	r0, r5
   4b8b0:	f7fe fffe 	bl	4a8b0 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   4b8b4:	4668      	mov	r0, sp
   4b8b6:	2210      	movs	r2, #16
   4b8b8:	2100      	movs	r1, #0
   4b8ba:	f7ff f806 	bl	4a8ca <_set>

	return TC_CRYPTO_SUCCESS;
   4b8be:	2001      	movs	r0, #1
}
   4b8c0:	b008      	add	sp, #32
   4b8c2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   4b8c4:	4608      	mov	r0, r1
   4b8c6:	e7fb      	b.n	4b8c0 <tc_aes_encrypt+0xa0>
   4b8c8:	4610      	mov	r0, r2
   4b8ca:	e7f9      	b.n	4b8c0 <tc_aes_encrypt+0xa0>

0004b8cc <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   4b8cc:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   4b8ce:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   4b8d0:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   4b8d2:	f912 3b10 	ldrsb.w	r3, [r2], #16
   4b8d6:	2b00      	cmp	r3, #0
   4b8d8:	bfac      	ite	ge
   4b8da:	2300      	movge	r3, #0
   4b8dc:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   4b8de:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   4b8e2:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   4b8e6:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   4b8e8:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   4b8ec:	d002      	beq.n	4b8f4 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   4b8ee:	7813      	ldrb	r3, [r2, #0]
   4b8f0:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   4b8f2:	e7f4      	b.n	4b8de <gf_double+0x12>
	}
}
   4b8f4:	bd10      	pop	{r4, pc}

0004b8f6 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   4b8f6:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   4b8f8:	b120      	cbz	r0, 4b904 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   4b8fa:	2258      	movs	r2, #88	; 0x58
   4b8fc:	2100      	movs	r1, #0
   4b8fe:	f7fe ffe4 	bl	4a8ca <_set>
   4b902:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   4b904:	bd08      	pop	{r3, pc}

0004b906 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   4b906:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   4b908:	4604      	mov	r4, r0
   4b90a:	b188      	cbz	r0, 4b930 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   4b90c:	2210      	movs	r2, #16
   4b90e:	2100      	movs	r1, #0
   4b910:	f7fe ffdb 	bl	4a8ca <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   4b914:	2210      	movs	r2, #16
   4b916:	f104 0030 	add.w	r0, r4, #48	; 0x30
   4b91a:	2100      	movs	r1, #0
   4b91c:	f7fe ffd5 	bl	4a8ca <_set>
	s->leftover_offset = 0;
   4b920:	2300      	movs	r3, #0
   4b922:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   4b924:	2200      	movs	r2, #0
   4b926:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   4b92a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   4b92e:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   4b930:	bd10      	pop	{r4, pc}

0004b932 <tc_cmac_setup>:
{
   4b932:	b570      	push	{r4, r5, r6, lr}
   4b934:	4604      	mov	r4, r0
   4b936:	460d      	mov	r5, r1
   4b938:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   4b93a:	b310      	cbz	r0, 4b982 <tc_cmac_setup+0x50>
   4b93c:	b311      	cbz	r1, 4b984 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   4b93e:	2258      	movs	r2, #88	; 0x58
   4b940:	2100      	movs	r1, #0
   4b942:	f7fe ffc2 	bl	4a8ca <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   4b946:	4629      	mov	r1, r5
	s->sched = sched;
   4b948:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   4b94a:	4630      	mov	r0, r6
   4b94c:	f7e1 f8be 	bl	2cacc <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   4b950:	2210      	movs	r2, #16
   4b952:	2100      	movs	r1, #0
   4b954:	4620      	mov	r0, r4
   4b956:	f7fe ffb8 	bl	4a8ca <_set>
	gf_double (s->K1, s->iv);
   4b95a:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   4b95e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4b960:	4621      	mov	r1, r4
   4b962:	4620      	mov	r0, r4
   4b964:	f7ff ff5c 	bl	4b820 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   4b968:	4621      	mov	r1, r4
   4b96a:	4628      	mov	r0, r5
   4b96c:	f7ff ffae 	bl	4b8cc <gf_double>
	gf_double (s->K2, s->K1);
   4b970:	4629      	mov	r1, r5
   4b972:	f104 0020 	add.w	r0, r4, #32
   4b976:	f7ff ffa9 	bl	4b8cc <gf_double>
	tc_cmac_init(s);
   4b97a:	4620      	mov	r0, r4
   4b97c:	f7ff ffc3 	bl	4b906 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   4b980:	2001      	movs	r0, #1
}
   4b982:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   4b984:	4608      	mov	r0, r1
   4b986:	e7fc      	b.n	4b982 <tc_cmac_setup+0x50>

0004b988 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   4b988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4b98c:	460e      	mov	r6, r1
   4b98e:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   4b990:	4604      	mov	r4, r0
   4b992:	2800      	cmp	r0, #0
   4b994:	d060      	beq.n	4ba58 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   4b996:	b1fa      	cbz	r2, 4b9d8 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   4b998:	2900      	cmp	r1, #0
   4b99a:	d05d      	beq.n	4ba58 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   4b99c:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   4b9a0:	ea53 0102 	orrs.w	r1, r3, r2
   4b9a4:	d058      	beq.n	4ba58 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   4b9a6:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   4b9a8:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   4b9ac:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   4b9b0:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   4b9b4:	f1b8 0f00 	cmp.w	r8, #0
   4b9b8:	d02c      	beq.n	4ba14 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   4b9ba:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   4b9be:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   4b9c2:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   4b9c4:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   4b9c6:	d20a      	bcs.n	4b9de <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   4b9c8:	462b      	mov	r3, r5
   4b9ca:	4632      	mov	r2, r6
   4b9cc:	4629      	mov	r1, r5
   4b9ce:	f7fe ff6f 	bl	4a8b0 <_copy>
			s->leftover_offset += data_length;
   4b9d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   4b9d4:	442b      	add	r3, r5
   4b9d6:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   4b9d8:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   4b9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   4b9de:	463b      	mov	r3, r7
   4b9e0:	4632      	mov	r2, r6
   4b9e2:	4639      	mov	r1, r7
   4b9e4:	f7fe ff64 	bl	4a8b0 <_copy>
		data_length -= remaining_space;
   4b9e8:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   4b9ea:	2300      	movs	r3, #0
   4b9ec:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   4b9ee:	4445      	add	r5, r8
		data += remaining_space;
   4b9f0:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4b9f2:	1e63      	subs	r3, r4, #1
   4b9f4:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   4b9f8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4b9fc:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4ba00:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   4ba02:	ea82 0200 	eor.w	r2, r2, r0
   4ba06:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4ba08:	d1f6      	bne.n	4b9f8 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   4ba0a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4ba0c:	4621      	mov	r1, r4
   4ba0e:	4620      	mov	r0, r4
   4ba10:	f7ff ff06 	bl	4b820 <tc_aes_encrypt>
   4ba14:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   4ba18:	2d10      	cmp	r5, #16
   4ba1a:	d80a      	bhi.n	4ba32 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   4ba1c:	2d00      	cmp	r5, #0
   4ba1e:	d0db      	beq.n	4b9d8 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   4ba20:	462b      	mov	r3, r5
   4ba22:	4632      	mov	r2, r6
   4ba24:	4629      	mov	r1, r5
   4ba26:	f104 0030 	add.w	r0, r4, #48	; 0x30
   4ba2a:	f7fe ff41 	bl	4a8b0 <_copy>
		s->leftover_offset = data_length;
   4ba2e:	6465      	str	r5, [r4, #68]	; 0x44
   4ba30:	e7d2      	b.n	4b9d8 <tc_cmac_update+0x50>
   4ba32:	1e63      	subs	r3, r4, #1
   4ba34:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   4ba36:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4ba3a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4ba3e:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   4ba40:	ea82 0200 	eor.w	r2, r2, r0
   4ba44:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4ba46:	d1f6      	bne.n	4ba36 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   4ba48:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4ba4a:	4621      	mov	r1, r4
   4ba4c:	4620      	mov	r0, r4
   4ba4e:	f7ff fee7 	bl	4b820 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   4ba52:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   4ba54:	3d10      	subs	r5, #16
   4ba56:	e7df      	b.n	4ba18 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   4ba58:	2000      	movs	r0, #0
   4ba5a:	e7be      	b.n	4b9da <tc_cmac_update+0x52>

0004ba5c <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   4ba5c:	b570      	push	{r4, r5, r6, lr}
   4ba5e:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   4ba60:	4605      	mov	r5, r0
   4ba62:	b1e8      	cbz	r0, 4baa0 <tc_cmac_final+0x44>
   4ba64:	b369      	cbz	r1, 4bac2 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   4ba66:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   4ba68:	2a10      	cmp	r2, #16
   4ba6a:	d11a      	bne.n	4baa2 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   4ba6c:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4ba6e:	1e63      	subs	r3, r4, #1
   4ba70:	3901      	subs	r1, #1
   4ba72:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   4ba76:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4ba7a:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   4ba7e:	4072      	eors	r2, r6
   4ba80:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4ba84:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   4ba86:	ea82 0206 	eor.w	r2, r2, r6
   4ba8a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4ba8c:	d1f3      	bne.n	4ba76 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   4ba8e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4ba90:	4621      	mov	r1, r4
   4ba92:	4628      	mov	r0, r5
   4ba94:	f7ff fec4 	bl	4b820 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   4ba98:	4620      	mov	r0, r4
   4ba9a:	f7ff ff2c 	bl	4b8f6 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   4ba9e:	2001      	movs	r0, #1
}
   4baa0:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   4baa2:	f102 0030 	add.w	r0, r2, #48	; 0x30
   4baa6:	2100      	movs	r1, #0
   4baa8:	f1c2 0210 	rsb	r2, r2, #16
   4baac:	4420      	add	r0, r4
   4baae:	f7fe ff0c 	bl	4a8ca <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   4bab2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   4bab4:	4423      	add	r3, r4
   4bab6:	2280      	movs	r2, #128	; 0x80
   4bab8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   4babc:	f104 0120 	add.w	r1, r4, #32
   4bac0:	e7d5      	b.n	4ba6e <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   4bac2:	4608      	mov	r0, r1
   4bac4:	e7ec      	b.n	4baa0 <tc_cmac_final+0x44>

0004bac6 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   4bac6:	f004 be57 	b.w	50778 <z_fatal_error>

0004baca <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   4baca:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   4bacc:	6800      	ldr	r0, [r0, #0]
   4bace:	f004 be53 	b.w	50778 <z_fatal_error>

0004bad2 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   4bad2:	2100      	movs	r1, #0
   4bad4:	2001      	movs	r0, #1
   4bad6:	f7ff bff6 	b.w	4bac6 <z_arm_fatal_error>

0004bada <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   4bada:	b508      	push	{r3, lr}
	handler();
   4badc:	f7e1 f8bc 	bl	2cc58 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   4bae0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   4bae4:	f7e1 b97c 	b.w	2cde0 <z_arm_exc_exit>

0004bae8 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   4bae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4baec:	4684      	mov	ip, r0
   4baee:	460f      	mov	r7, r1
	register const char *s = nptr;
   4baf0:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   4baf2:	4621      	mov	r1, r4
   4baf4:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
}

static inline int isspace(int c)
{
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   4baf8:	2b20      	cmp	r3, #32
   4bafa:	d0fa      	beq.n	4baf2 <strtoul+0xa>
   4bafc:	f1a3 0009 	sub.w	r0, r3, #9
   4bb00:	2804      	cmp	r0, #4
   4bb02:	d9f6      	bls.n	4baf2 <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
   4bb04:	2b2d      	cmp	r3, #45	; 0x2d
   4bb06:	d125      	bne.n	4bb54 <strtoul+0x6c>
		neg = 1;
		c = *s++;
   4bb08:	784b      	ldrb	r3, [r1, #1]
   4bb0a:	1c8c      	adds	r4, r1, #2
		neg = 1;
   4bb0c:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   4bb10:	bb3a      	cbnz	r2, 4bb62 <strtoul+0x7a>
   4bb12:	2b30      	cmp	r3, #48	; 0x30
   4bb14:	d032      	beq.n	4bb7c <strtoul+0x94>
		s += 2;
		base = 16;
	}

	if (base == 0) {
		base = c == '0' ? 8 : 10;
   4bb16:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   4bb18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   4bb1c:	2500      	movs	r5, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   4bb1e:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   4bb22:	fb02 f801 	mul.w	r8, r2, r1
   4bb26:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
   4bb2a:	4628      	mov	r0, r5
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   4bb2c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
		if (isdigit(c)) {
   4bb30:	2e09      	cmp	r6, #9
   4bb32:	d82a      	bhi.n	4bb8a <strtoul+0xa2>
			c -= '0';
   4bb34:	4633      	mov	r3, r6
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   4bb36:	429a      	cmp	r2, r3
   4bb38:	dd37      	ble.n	4bbaa <strtoul+0xc2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   4bb3a:	1c6e      	adds	r6, r5, #1
   4bb3c:	d007      	beq.n	4bb4e <strtoul+0x66>
   4bb3e:	4288      	cmp	r0, r1
   4bb40:	d830      	bhi.n	4bba4 <strtoul+0xbc>
   4bb42:	d101      	bne.n	4bb48 <strtoul+0x60>
   4bb44:	4543      	cmp	r3, r8
   4bb46:	dc2d      	bgt.n	4bba4 <strtoul+0xbc>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   4bb48:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   4bb4c:	2501      	movs	r5, #1
	for (acc = 0, any = 0;; c = *s++) {
   4bb4e:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   4bb52:	e7eb      	b.n	4bb2c <strtoul+0x44>
	} else if (c == '+') {
   4bb54:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   4bb56:	bf04      	itt	eq
   4bb58:	784b      	ldrbeq	r3, [r1, #1]
   4bb5a:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   4bb5c:	f04f 0e00 	mov.w	lr, #0
   4bb60:	e7d6      	b.n	4bb10 <strtoul+0x28>
	if ((base == 0 || base == 16) &&
   4bb62:	2a10      	cmp	r2, #16
   4bb64:	d1d8      	bne.n	4bb18 <strtoul+0x30>
   4bb66:	2b30      	cmp	r3, #48	; 0x30
   4bb68:	d1d6      	bne.n	4bb18 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   4bb6a:	7821      	ldrb	r1, [r4, #0]
   4bb6c:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   4bb70:	2958      	cmp	r1, #88	; 0x58
   4bb72:	d1d1      	bne.n	4bb18 <strtoul+0x30>
		c = s[1];
   4bb74:	7863      	ldrb	r3, [r4, #1]
		base = 16;
   4bb76:	2210      	movs	r2, #16
		s += 2;
   4bb78:	3402      	adds	r4, #2
	if (base == 0) {
   4bb7a:	e7cd      	b.n	4bb18 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   4bb7c:	7822      	ldrb	r2, [r4, #0]
   4bb7e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   4bb82:	2a58      	cmp	r2, #88	; 0x58
   4bb84:	d0f6      	beq.n	4bb74 <strtoul+0x8c>
		base = c == '0' ? 8 : 10;
   4bb86:	2208      	movs	r2, #8
   4bb88:	e7c6      	b.n	4bb18 <strtoul+0x30>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   4bb8a:	f043 0620 	orr.w	r6, r3, #32
   4bb8e:	3e61      	subs	r6, #97	; 0x61
		} else if (isalpha(c)) {
   4bb90:	2e19      	cmp	r6, #25
   4bb92:	d80a      	bhi.n	4bbaa <strtoul+0xc2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   4bb94:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   4bb98:	2e1a      	cmp	r6, #26
   4bb9a:	bf34      	ite	cc
   4bb9c:	2637      	movcc	r6, #55	; 0x37
   4bb9e:	2657      	movcs	r6, #87	; 0x57
   4bba0:	1b9b      	subs	r3, r3, r6
   4bba2:	e7c8      	b.n	4bb36 <strtoul+0x4e>
			any = -1;
   4bba4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   4bba8:	e7d1      	b.n	4bb4e <strtoul+0x66>
		}
	}
	if (any < 0) {
   4bbaa:	1c6b      	adds	r3, r5, #1
   4bbac:	d107      	bne.n	4bbbe <strtoul+0xd6>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   4bbae:	f7fb fec1 	bl	47934 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   4bbb2:	2322      	movs	r3, #34	; 0x22
   4bbb4:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   4bbb6:	4628      	mov	r0, r5
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   4bbb8:	b947      	cbnz	r7, 4bbcc <strtoul+0xe4>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   4bbba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   4bbbe:	f1be 0f00 	cmp.w	lr, #0
   4bbc2:	d000      	beq.n	4bbc6 <strtoul+0xde>
		acc = -acc;
   4bbc4:	4240      	negs	r0, r0
	if (endptr != NULL) {
   4bbc6:	2f00      	cmp	r7, #0
   4bbc8:	d0f7      	beq.n	4bbba <strtoul+0xd2>
		*endptr = (char *)(any ? s - 1 : nptr);
   4bbca:	b10d      	cbz	r5, 4bbd0 <strtoul+0xe8>
   4bbcc:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   4bbd0:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   4bbd4:	e7f1      	b.n	4bbba <strtoul+0xd2>

0004bbd6 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   4bbd6:	3901      	subs	r1, #1
   4bbd8:	4603      	mov	r3, r0
   4bbda:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   4bbde:	b90a      	cbnz	r2, 4bbe4 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   4bbe0:	701a      	strb	r2, [r3, #0]

	return dest;
}
   4bbe2:	4770      	bx	lr
		*d = *s;
   4bbe4:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   4bbe8:	e7f7      	b.n	4bbda <strcpy+0x4>

0004bbea <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   4bbea:	4603      	mov	r3, r0
	size_t n = 0;
   4bbec:	2000      	movs	r0, #0

	while (*s != '\0') {
   4bbee:	5c1a      	ldrb	r2, [r3, r0]
   4bbf0:	b902      	cbnz	r2, 4bbf4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   4bbf2:	4770      	bx	lr
		n++;
   4bbf4:	3001      	adds	r0, #1
   4bbf6:	e7fa      	b.n	4bbee <strlen+0x4>

0004bbf8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   4bbf8:	1e43      	subs	r3, r0, #1
   4bbfa:	3901      	subs	r1, #1
   4bbfc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4bc00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   4bc04:	4282      	cmp	r2, r0
   4bc06:	d101      	bne.n	4bc0c <strcmp+0x14>
   4bc08:	2a00      	cmp	r2, #0
   4bc0a:	d1f7      	bne.n	4bbfc <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   4bc0c:	1a10      	subs	r0, r2, r0
   4bc0e:	4770      	bx	lr

0004bc10 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   4bc10:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   4bc12:	460b      	mov	r3, r1
   4bc14:	4605      	mov	r5, r0
   4bc16:	b16a      	cbz	r2, 4bc34 <strncmp+0x24>
   4bc18:	f810 6b01 	ldrb.w	r6, [r0], #1
   4bc1c:	781c      	ldrb	r4, [r3, #0]
   4bc1e:	42b4      	cmp	r4, r6
   4bc20:	f101 0101 	add.w	r1, r1, #1
   4bc24:	d100      	bne.n	4bc28 <strncmp+0x18>
   4bc26:	b91c      	cbnz	r4, 4bc30 <strncmp+0x20>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   4bc28:	782a      	ldrb	r2, [r5, #0]
   4bc2a:	781b      	ldrb	r3, [r3, #0]
   4bc2c:	1ad0      	subs	r0, r2, r3
   4bc2e:	e002      	b.n	4bc36 <strncmp+0x26>
		n--;
   4bc30:	3a01      	subs	r2, #1
   4bc32:	e7ee      	b.n	4bc12 <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   4bc34:	4610      	mov	r0, r2
}
   4bc36:	bd70      	pop	{r4, r5, r6, pc}

0004bc38 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   4bc38:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   4bc3a:	b15a      	cbz	r2, 4bc54 <memcmp+0x1c>
   4bc3c:	3901      	subs	r1, #1
   4bc3e:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   4bc40:	f810 2b01 	ldrb.w	r2, [r0], #1
   4bc44:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   4bc48:	42a0      	cmp	r0, r4
   4bc4a:	d001      	beq.n	4bc50 <memcmp+0x18>
   4bc4c:	429a      	cmp	r2, r3
   4bc4e:	d0f7      	beq.n	4bc40 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   4bc50:	1ad0      	subs	r0, r2, r3
}
   4bc52:	bd10      	pop	{r4, pc}
		return 0;
   4bc54:	4610      	mov	r0, r2
   4bc56:	e7fc      	b.n	4bc52 <memcmp+0x1a>

0004bc58 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   4bc58:	b510      	push	{r4, lr}
   4bc5a:	1e43      	subs	r3, r0, #1
   4bc5c:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   4bc5e:	4291      	cmp	r1, r2
   4bc60:	d100      	bne.n	4bc64 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   4bc62:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   4bc64:	f811 4b01 	ldrb.w	r4, [r1], #1
   4bc68:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   4bc6c:	e7f7      	b.n	4bc5e <memcpy+0x6>

0004bc6e <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   4bc6e:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   4bc70:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   4bc72:	4603      	mov	r3, r0
	while (n > 0) {
   4bc74:	4293      	cmp	r3, r2
   4bc76:	d100      	bne.n	4bc7a <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   4bc78:	4770      	bx	lr
		*(d_byte++) = c_byte;
   4bc7a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   4bc7e:	e7f9      	b.n	4bc74 <memset+0x6>

0004bc80 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   4bc80:	684b      	ldr	r3, [r1, #4]
   4bc82:	2b01      	cmp	r3, #1
   4bc84:	dd07      	ble.n	4bc96 <sprintf_out+0x16>
		*(p->ptr) = c;
   4bc86:	680b      	ldr	r3, [r1, #0]
   4bc88:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   4bc8a:	680b      	ldr	r3, [r1, #0]
   4bc8c:	3301      	adds	r3, #1
   4bc8e:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   4bc90:	684b      	ldr	r3, [r1, #4]
   4bc92:	3b01      	subs	r3, #1
   4bc94:	604b      	str	r3, [r1, #4]
}
   4bc96:	2000      	movs	r0, #0
   4bc98:	4770      	bx	lr

0004bc9a <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   4bc9a:	b084      	sub	sp, #16
   4bc9c:	ab04      	add	r3, sp, #16
   4bc9e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   4bca2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   4bca6:	2b06      	cmp	r3, #6
   4bca8:	d108      	bne.n	4bcbc <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   4bcaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   4bcae:	2201      	movs	r2, #1
   4bcb0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   4bcb4:	f3bf 8f4f 	dsb	sy
        __WFE();
   4bcb8:	bf20      	wfe
    while (true)
   4bcba:	e7fd      	b.n	4bcb8 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   4bcbc:	b004      	add	sp, #16
   4bcbe:	4770      	bx	lr

0004bcc0 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   4bcc0:	b084      	sub	sp, #16
   4bcc2:	ab04      	add	r3, sp, #16
   4bcc4:	e903 0007 	stmdb	r3, {r0, r1, r2}
   4bcc8:	2300      	movs	r3, #0
   4bcca:	f383 8811 	msr	BASEPRI, r3
   4bcce:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   4bcd2:	b004      	add	sp, #16
   4bcd4:	4770      	bx	lr

0004bcd6 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   4bcd6:	b530      	push	{r4, r5, lr}
   4bcd8:	b085      	sub	sp, #20
   4bcda:	4604      	mov	r4, r0
   4bcdc:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   4bcde:	4668      	mov	r0, sp
   4bce0:	2203      	movs	r2, #3
   4bce2:	f7ff ffb9 	bl	4bc58 <memcpy>
	(void)memset(res + 3, 0, 13);
   4bce6:	220d      	movs	r2, #13
   4bce8:	2100      	movs	r1, #0
   4bcea:	f10d 0003 	add.w	r0, sp, #3
   4bcee:	f7ff ffbe 	bl	4bc6e <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   4bcf2:	4620      	mov	r0, r4
   4bcf4:	466a      	mov	r2, sp
   4bcf6:	4669      	mov	r1, sp
   4bcf8:	f7eb f9ae 	bl	37058 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   4bcfc:	4604      	mov	r4, r0
   4bcfe:	b920      	cbnz	r0, 4bd0a <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   4bd00:	2203      	movs	r2, #3
   4bd02:	4669      	mov	r1, sp
   4bd04:	4628      	mov	r0, r5
   4bd06:	f7ff ffa7 	bl	4bc58 <memcpy>

	return 0;
}
   4bd0a:	4620      	mov	r0, r4
   4bd0c:	b005      	add	sp, #20
   4bd0e:	bd30      	pop	{r4, r5, pc}

0004bd10 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   4bd10:	b513      	push	{r0, r1, r4, lr}
   4bd12:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   4bd14:	aa01      	add	r2, sp, #4
   4bd16:	3103      	adds	r1, #3
   4bd18:	f7ff ffdd 	bl	4bcd6 <ah>
	if (err) {
   4bd1c:	b948      	cbnz	r0, 4bd32 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   4bd1e:	2203      	movs	r2, #3
   4bd20:	a901      	add	r1, sp, #4
   4bd22:	4620      	mov	r0, r4
   4bd24:	f7ff ff88 	bl	4bc38 <memcmp>
   4bd28:	fab0 f080 	clz	r0, r0
   4bd2c:	0940      	lsrs	r0, r0, #5
}
   4bd2e:	b002      	add	sp, #8
   4bd30:	bd10      	pop	{r4, pc}
		return false;
   4bd32:	2000      	movs	r0, #0
   4bd34:	e7fb      	b.n	4bd2e <bt_rpa_irk_matches+0x1e>

0004bd36 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   4bd36:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   4bd38:	1cce      	adds	r6, r1, #3
{
   4bd3a:	4605      	mov	r5, r0
   4bd3c:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   4bd3e:	4630      	mov	r0, r6
   4bd40:	2103      	movs	r1, #3
   4bd42:	f7eb f987 	bl	37054 <bt_rand>
	if (err) {
   4bd46:	b960      	cbnz	r0, 4bd62 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   4bd48:	7963      	ldrb	r3, [r4, #5]
   4bd4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4bd4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   4bd52:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   4bd54:	4622      	mov	r2, r4
   4bd56:	4631      	mov	r1, r6
   4bd58:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   4bd5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   4bd5e:	f7ff bfba 	b.w	4bcd6 <ah>
}
   4bd62:	bd70      	pop	{r4, r5, r6, pc}

0004bd64 <send_cmd_status>:
{
   4bd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   4bd68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   4bd6c:	4606      	mov	r6, r0
   4bd6e:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   4bd70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4bd74:	2100      	movs	r1, #0
   4bd76:	200f      	movs	r0, #15
   4bd78:	f7e1 fd7c 	bl	2d874 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   4bd7c:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   4bd7e:	f100 0808 	add.w	r8, r0, #8
   4bd82:	4604      	mov	r4, r0
   4bd84:	7507      	strb	r7, [r0, #20]
   4bd86:	2102      	movs	r1, #2
   4bd88:	4640      	mov	r0, r8
   4bd8a:	f003 ff46 	bl	4fc1a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   4bd8e:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   4bd90:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   4bd92:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   4bd94:	7041      	strb	r1, [r0, #1]
   4bd96:	4640      	mov	r0, r8
   4bd98:	f003 ff3f 	bl	4fc1a <net_buf_simple_add>
	evt->ncmd = 1U;
   4bd9c:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   4bd9e:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   4bda0:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   4bda2:	4620      	mov	r0, r4
}
   4bda4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   4bda8:	f7e2 bb16 	b.w	2e3d8 <bt_recv_prio>

0004bdac <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   4bdac:	f101 0320 	add.w	r3, r1, #32
   4bdb0:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   4bdb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   4bdb6:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   4bdba:	428b      	cmp	r3, r1
   4bdbc:	d1f9      	bne.n	4bdb2 <sys_memcpy_swap.constprop.0+0x6>
}
   4bdbe:	4770      	bx	lr

0004bdc0 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   4bdc0:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   4bdc4:	f043 0306 	orr.w	r3, r3, #6
   4bdc8:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   4bdcc:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   4bdd0:	f043 0304 	orr.w	r3, r3, #4
   4bdd4:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   4bdd8:	4770      	bx	lr

0004bdda <default_CSPRNG>:
{
   4bdda:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   4bddc:	f7eb f93a 	bl	37054 <bt_rand>
}
   4bde0:	fab0 f080 	clz	r0, r0
   4bde4:	0940      	lsrs	r0, r0, #5
   4bde6:	bd08      	pop	{r3, pc}

0004bde8 <bt_settings_decode_key>:
{
   4bde8:	b570      	push	{r4, r5, r6, lr}
   4bdea:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   4bdec:	2100      	movs	r1, #0
{
   4bdee:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   4bdf0:	f7fe fc61 	bl	4a6b6 <settings_name_next>
   4bdf4:	280d      	cmp	r0, #13
   4bdf6:	d118      	bne.n	4be2a <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   4bdf8:	7b23      	ldrb	r3, [r4, #12]
   4bdfa:	2b30      	cmp	r3, #48	; 0x30
   4bdfc:	d013      	beq.n	4be26 <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   4bdfe:	2b31      	cmp	r3, #49	; 0x31
   4be00:	d113      	bne.n	4be2a <bt_settings_decode_key+0x42>
   4be02:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_PUBLIC;
   4be04:	f805 3b06 	strb.w	r3, [r5], #6
   4be08:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   4be0c:	462a      	mov	r2, r5
   4be0e:	4620      	mov	r0, r4
   4be10:	2301      	movs	r3, #1
   4be12:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   4be14:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   4be16:	f7fd fd76 	bl	49906 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   4be1a:	42b4      	cmp	r4, r6
   4be1c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   4be20:	d1f4      	bne.n	4be0c <bt_settings_decode_key+0x24>
	return 0;
   4be22:	2000      	movs	r0, #0
}
   4be24:	bd70      	pop	{r4, r5, r6, pc}
   4be26:	2300      	movs	r3, #0
   4be28:	e7ec      	b.n	4be04 <bt_settings_decode_key+0x1c>
		return -EINVAL;
   4be2a:	f06f 0015 	mvn.w	r0, #21
   4be2e:	e7f9      	b.n	4be24 <bt_settings_decode_key+0x3c>

0004be30 <bt_settings_init>:
{
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   4be30:	f7e0 bb62 	b.w	2c4f8 <settings_subsys_init>

0004be34 <bt_uuid_cmp>:
{
   4be34:	b510      	push	{r4, lr}
   4be36:	460c      	mov	r4, r1
	if (u1->type != u2->type) {
   4be38:	7801      	ldrb	r1, [r0, #0]
   4be3a:	7822      	ldrb	r2, [r4, #0]
   4be3c:	428a      	cmp	r2, r1
{
   4be3e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   4be40:	d00f      	beq.n	4be62 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   4be42:	4669      	mov	r1, sp
   4be44:	f7e1 fc58 	bl	2d6f8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   4be48:	a905      	add	r1, sp, #20
   4be4a:	4620      	mov	r0, r4
   4be4c:	f7e1 fc54 	bl	2d6f8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   4be50:	2210      	movs	r2, #16
   4be52:	f10d 0115 	add.w	r1, sp, #21
   4be56:	f10d 0001 	add.w	r0, sp, #1
   4be5a:	f7ff feed 	bl	4bc38 <memcmp>
}
   4be5e:	b00a      	add	sp, #40	; 0x28
   4be60:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   4be62:	2a01      	cmp	r2, #1
   4be64:	d006      	beq.n	4be74 <bt_uuid_cmp+0x40>
   4be66:	2a02      	cmp	r2, #2
   4be68:	d007      	beq.n	4be7a <bt_uuid_cmp+0x46>
   4be6a:	b972      	cbnz	r2, 4be8a <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   4be6c:	8840      	ldrh	r0, [r0, #2]
   4be6e:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   4be70:	1ac0      	subs	r0, r0, r3
   4be72:	e7f4      	b.n	4be5e <bt_uuid_cmp+0x2a>
   4be74:	6840      	ldr	r0, [r0, #4]
   4be76:	6863      	ldr	r3, [r4, #4]
   4be78:	e7fa      	b.n	4be70 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   4be7a:	2210      	movs	r2, #16
   4be7c:	1c61      	adds	r1, r4, #1
   4be7e:	3001      	adds	r0, #1
}
   4be80:	b00a      	add	sp, #40	; 0x28
   4be82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   4be86:	f7ff bed7 	b.w	4bc38 <memcmp>
	switch (u1->type) {
   4be8a:	f06f 0015 	mvn.w	r0, #21
   4be8e:	e7e6      	b.n	4be5e <bt_uuid_cmp+0x2a>

0004be90 <bt_uuid_create>:
	switch (data_len) {
   4be90:	2a04      	cmp	r2, #4
{
   4be92:	b510      	push	{r4, lr}
	switch (data_len) {
   4be94:	d00a      	beq.n	4beac <bt_uuid_create+0x1c>
   4be96:	2a10      	cmp	r2, #16
   4be98:	d00d      	beq.n	4beb6 <bt_uuid_create+0x26>
   4be9a:	2a02      	cmp	r2, #2
   4be9c:	f04f 0300 	mov.w	r3, #0
   4bea0:	d10f      	bne.n	4bec2 <bt_uuid_create+0x32>
		uuid->type = BT_UUID_TYPE_16;
   4bea2:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   4bea4:	880b      	ldrh	r3, [r1, #0]
   4bea6:	8043      	strh	r3, [r0, #2]
	return true;
   4bea8:	2001      	movs	r0, #1
}
   4beaa:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   4beac:	2301      	movs	r3, #1
   4beae:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   4beb0:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   4beb2:	6043      	str	r3, [r0, #4]
		break;
   4beb4:	e7f8      	b.n	4bea8 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   4beb6:	2302      	movs	r3, #2
   4beb8:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   4bebc:	f7ff fecc 	bl	4bc58 <memcpy>
		break;
   4bec0:	e7f2      	b.n	4bea8 <bt_uuid_create+0x18>
	switch (data_len) {
   4bec2:	4618      	mov	r0, r3
   4bec4:	e7f1      	b.n	4beaa <bt_uuid_create+0x1a>

0004bec6 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   4bec6:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   4bec8:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   4beca:	2106      	movs	r1, #6
{
   4becc:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   4bece:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   4bed2:	f7eb f8bf 	bl	37054 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   4bed6:	b918      	cbnz	r0, 4bee0 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   4bed8:	79a3      	ldrb	r3, [r4, #6]
   4beda:	f063 033f 	orn	r3, r3, #63	; 0x3f
   4bede:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   4bee0:	bd10      	pop	{r4, pc}

0004bee2 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   4bee2:	280f      	cmp	r0, #15
   4bee4:	d807      	bhi.n	4bef6 <bt_hci_evt_get_flags+0x14>
   4bee6:	280d      	cmp	r0, #13
   4bee8:	d80b      	bhi.n	4bf02 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   4beea:	2805      	cmp	r0, #5
   4beec:	bf08      	it	eq
   4beee:	2003      	moveq	r0, #3
   4bef0:	bf18      	it	ne
   4bef2:	2002      	movne	r0, #2
   4bef4:	4770      	bx	lr
	switch (evt) {
   4bef6:	2813      	cmp	r0, #19
   4bef8:	d003      	beq.n	4bf02 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   4befa:	281a      	cmp	r0, #26
   4befc:	bf08      	it	eq
   4befe:	2001      	moveq	r0, #1
   4bf00:	e7f6      	b.n	4bef0 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   4bf02:	2001      	movs	r0, #1
	}
}
   4bf04:	4770      	bx	lr

0004bf06 <handle_event>:
{
   4bf06:	b430      	push	{r4, r5}
   4bf08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   4bf0c:	4604      	mov	r4, r0
   4bf0e:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   4bf10:	429a      	cmp	r2, r3
   4bf12:	d101      	bne.n	4bf18 <handle_event+0x12>
}
   4bf14:	bc30      	pop	{r4, r5}
   4bf16:	4770      	bx	lr
		if (handler->event != event) {
   4bf18:	4611      	mov	r1, r2
   4bf1a:	f811 5b08 	ldrb.w	r5, [r1], #8
   4bf1e:	42a5      	cmp	r5, r4
   4bf20:	d106      	bne.n	4bf30 <handle_event+0x2a>
		if (buf->len < handler->min_len) {
   4bf22:	8981      	ldrh	r1, [r0, #12]
   4bf24:	7853      	ldrb	r3, [r2, #1]
   4bf26:	4299      	cmp	r1, r3
   4bf28:	d3f4      	bcc.n	4bf14 <handle_event+0xe>
}
   4bf2a:	bc30      	pop	{r4, r5}
		handler->handler(buf);
   4bf2c:	6853      	ldr	r3, [r2, #4]
   4bf2e:	4718      	bx	r3
   4bf30:	460a      	mov	r2, r1
   4bf32:	e7ed      	b.n	4bf10 <handle_event+0xa>

0004bf34 <hci_data_buf_overflow>:
}
   4bf34:	4770      	bx	lr

0004bf36 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   4bf36:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   4bf3a:	b183      	cbz	r3, 4bf5e <update_sec_level+0x28>
   4bf3c:	7b5a      	ldrb	r2, [r3, #13]
   4bf3e:	07d1      	lsls	r1, r2, #31
   4bf40:	d50d      	bpl.n	4bf5e <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   4bf42:	06d2      	lsls	r2, r2, #27
   4bf44:	d50d      	bpl.n	4bf62 <update_sec_level+0x2c>
   4bf46:	7b1b      	ldrb	r3, [r3, #12]
   4bf48:	2b10      	cmp	r3, #16
   4bf4a:	bf14      	ite	ne
   4bf4c:	2303      	movne	r3, #3
   4bf4e:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   4bf50:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   4bf52:	7a80      	ldrb	r0, [r0, #10]
}
   4bf54:	4298      	cmp	r0, r3
   4bf56:	bf8c      	ite	hi
   4bf58:	2000      	movhi	r0, #0
   4bf5a:	2001      	movls	r0, #1
   4bf5c:	4770      	bx	lr
   4bf5e:	2302      	movs	r3, #2
   4bf60:	e7f6      	b.n	4bf50 <update_sec_level+0x1a>
   4bf62:	2303      	movs	r3, #3
   4bf64:	e7f4      	b.n	4bf50 <update_sec_level+0x1a>

0004bf66 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   4bf66:	2207      	movs	r2, #7
   4bf68:	f7ff be76 	b.w	4bc58 <memcpy>

0004bf6c <atomic_or>:
{
   4bf6c:	b510      	push	{r4, lr}
   4bf6e:	4603      	mov	r3, r0
}
   4bf70:	f3bf 8f5b 	dmb	ish
   4bf74:	e853 0f00 	ldrex	r0, [r3]
   4bf78:	ea40 0201 	orr.w	r2, r0, r1
   4bf7c:	e843 2400 	strex	r4, r2, [r3]
   4bf80:	2c00      	cmp	r4, #0
   4bf82:	d1f7      	bne.n	4bf74 <atomic_or+0x8>
   4bf84:	f3bf 8f5b 	dmb	ish
   4bf88:	bd10      	pop	{r4, pc}

0004bf8a <atomic_and>:
{
   4bf8a:	b510      	push	{r4, lr}
   4bf8c:	4603      	mov	r3, r0
}
   4bf8e:	f3bf 8f5b 	dmb	ish
   4bf92:	e853 0f00 	ldrex	r0, [r3]
   4bf96:	ea00 0201 	and.w	r2, r0, r1
   4bf9a:	e843 2400 	strex	r4, r2, [r3]
   4bf9e:	2c00      	cmp	r4, #0
   4bfa0:	d1f7      	bne.n	4bf92 <atomic_and+0x8>
   4bfa2:	f3bf 8f5b 	dmb	ish
   4bfa6:	bd10      	pop	{r4, pc}

0004bfa8 <unpair_remote>:
{
   4bfa8:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   4bfaa:	4601      	mov	r1, r0
   4bfac:	7818      	ldrb	r0, [r3, #0]
   4bfae:	f7e1 bc8d 	b.w	2d8cc <unpair>

0004bfb2 <le_data_len_change>:
{
   4bfb2:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   4bfb4:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4bfb6:	8818      	ldrh	r0, [r3, #0]
   4bfb8:	f7e3 fd84 	bl	2fac4 <bt_conn_lookup_handle>
	if (!conn) {
   4bfbc:	b118      	cbz	r0, 4bfc6 <le_data_len_change+0x14>
}
   4bfbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   4bfc2:	f000 be83 	b.w	4cccc <bt_conn_unref>
}
   4bfc6:	bd08      	pop	{r3, pc}

0004bfc8 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   4bfc8:	2101      	movs	r1, #1
   4bfca:	3008      	adds	r0, #8
   4bfcc:	f003 be56 	b.w	4fc7c <net_buf_simple_pull_mem>

0004bfd0 <le_conn_update_complete>:
{
   4bfd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   4bfd2:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4bfd4:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   4bfd8:	f7e3 fd74 	bl	2fac4 <bt_conn_lookup_handle>
	if (!conn) {
   4bfdc:	4604      	mov	r4, r0
   4bfde:	b390      	cbz	r0, 4c046 <le_conn_update_complete+0x76>
	if (!evt->status) {
   4bfe0:	782b      	ldrb	r3, [r5, #0]
   4bfe2:	b9cb      	cbnz	r3, 4c018 <le_conn_update_complete+0x48>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   4bfe4:	792a      	ldrb	r2, [r5, #4]
   4bfe6:	78eb      	ldrb	r3, [r5, #3]
   4bfe8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4bfec:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   4bff0:	79aa      	ldrb	r2, [r5, #6]
   4bff2:	796b      	ldrb	r3, [r5, #5]
   4bff4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4bff8:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   4bffc:	79eb      	ldrb	r3, [r5, #7]
   4bffe:	7a2a      	ldrb	r2, [r5, #8]
   4c000:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4c004:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   4c008:	f7e3 fe52 	bl	2fcb0 <notify_le_param_updated>
	bt_conn_unref(conn);
   4c00c:	4620      	mov	r0, r4
}
   4c00e:	b003      	add	sp, #12
   4c010:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   4c014:	f000 be5a 	b.w	4cccc <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   4c018:	2b1a      	cmp	r3, #26
   4c01a:	d1f7      	bne.n	4c00c <le_conn_update_complete+0x3c>
   4c01c:	78c3      	ldrb	r3, [r0, #3]
   4c01e:	2b01      	cmp	r3, #1
   4c020:	d1f4      	bne.n	4c00c <le_conn_update_complete+0x3c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   4c022:	f44f 6180 	mov.w	r1, #1024	; 0x400
   4c026:	3004      	adds	r0, #4
   4c028:	f7ff ffa0 	bl	4bf6c <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   4c02c:	0543      	lsls	r3, r0, #21
   4c02e:	d4ed      	bmi.n	4c00c <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   4c030:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   4c034:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   4c036:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   4c038:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   4c03c:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   4c03e:	4620      	mov	r0, r4
   4c040:	f7e4 face 	bl	305e0 <bt_l2cap_update_conn_param>
   4c044:	e7e2      	b.n	4c00c <le_conn_update_complete+0x3c>
}
   4c046:	b003      	add	sp, #12
   4c048:	bd30      	pop	{r4, r5, pc}

0004c04a <hci_vendor_event>:
static void hci_vendor_event(struct net_buf *buf)
   4c04a:	4770      	bx	lr

0004c04c <sys_put_le64>:
	dst[1] = val >> 8;
   4c04c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   4c050:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   4c052:	0e00      	lsrs	r0, r0, #24
   4c054:	7053      	strb	r3, [r2, #1]
   4c056:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   4c058:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   4c05a:	f3c1 2007 	ubfx	r0, r1, #8, #8
   4c05e:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   4c060:	7093      	strb	r3, [r2, #2]
   4c062:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   4c064:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   4c066:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   4c068:	71d1      	strb	r1, [r2, #7]
}
   4c06a:	4770      	bx	lr

0004c06c <hci_num_completed_packets>:
{
   4c06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   4c070:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   4c072:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   4c074:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   4c076:	783b      	ldrb	r3, [r7, #0]
   4c078:	429d      	cmp	r5, r3
   4c07a:	db01      	blt.n	4c080 <hci_num_completed_packets+0x14>
}
   4c07c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   4c080:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   4c084:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   4c088:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   4c08c:	f7e3 fd1a 	bl	2fac4 <bt_conn_lookup_handle>
		if (!conn) {
   4c090:	4604      	mov	r4, r0
   4c092:	b318      	cbz	r0, 4c0dc <hci_num_completed_packets+0x70>
			k_work_submit(&conn->tx_complete_work);
   4c094:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   4c098:	b1ee      	cbz	r6, 4c0d6 <hci_num_completed_packets+0x6a>
	__asm__ volatile(
   4c09a:	f04f 0320 	mov.w	r3, #32
   4c09e:	f3ef 8211 	mrs	r2, BASEPRI
   4c0a2:	f383 8812 	msr	BASEPRI_MAX, r3
   4c0a6:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   4c0aa:	69e3      	ldr	r3, [r4, #28]
   4c0ac:	b16b      	cbz	r3, 4c0ca <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   4c0ae:	3b01      	subs	r3, #1
   4c0b0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   4c0b2:	f382 8811 	msr	BASEPRI, r2
   4c0b6:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   4c0ba:	4620      	mov	r0, r4
   4c0bc:	f7e3 fc5a 	bl	2f974 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   4c0c0:	3e01      	subs	r6, #1
   4c0c2:	f7fb ffd5 	bl	48070 <z_impl_k_sem_give>
   4c0c6:	b2b6      	uxth	r6, r6
   4c0c8:	e7e6      	b.n	4c098 <hci_num_completed_packets+0x2c>
	return list->head;
   4c0ca:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   4c0cc:	b943      	cbnz	r3, 4c0e0 <hci_num_completed_packets+0x74>
   4c0ce:	f382 8811 	msr	BASEPRI, r2
   4c0d2:	f3bf 8f6f 	isb	sy
		bt_conn_unref(conn);
   4c0d6:	4620      	mov	r0, r4
   4c0d8:	f000 fdf8 	bl	4cccc <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   4c0dc:	3501      	adds	r5, #1
   4c0de:	e7ca      	b.n	4c076 <hci_num_completed_packets+0xa>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4c0e0:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   4c0e2:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   4c0e4:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4c0e6:	428b      	cmp	r3, r1
	list->tail = node;
   4c0e8:	bf08      	it	eq
   4c0ea:	61a0      	streq	r0, [r4, #24]
   4c0ec:	f382 8811 	msr	BASEPRI, r2
   4c0f0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   4c0f4:	f04f 0220 	mov.w	r2, #32
   4c0f8:	f3ef 8111 	mrs	r1, BASEPRI
   4c0fc:	f382 8812 	msr	BASEPRI_MAX, r2
   4c100:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   4c104:	68da      	ldr	r2, [r3, #12]
   4c106:	61e2      	str	r2, [r4, #28]
	return list->tail;
   4c108:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   4c10a:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   4c10e:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   4c112:	b94a      	cbnz	r2, 4c128 <hci_num_completed_packets+0xbc>
	list->head = node;
   4c114:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   4c118:	f381 8811 	msr	BASEPRI, r1
   4c11c:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   4c120:	4648      	mov	r0, r9
   4c122:	f7fc f929 	bl	48378 <k_work_submit>
   4c126:	e7c8      	b.n	4c0ba <hci_num_completed_packets+0x4e>
	parent->next = child;
   4c128:	6013      	str	r3, [r2, #0]
	list->tail = node;
   4c12a:	6263      	str	r3, [r4, #36]	; 0x24
}
   4c12c:	e7f4      	b.n	4c118 <hci_num_completed_packets+0xac>

0004c12e <hci_disconn_complete>:
{
   4c12e:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   4c130:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   4c132:	7835      	ldrb	r5, [r6, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   4c134:	f8b6 0001 	ldrh.w	r0, [r6, #1]
	if (evt->status) {
   4c138:	b9fd      	cbnz	r5, 4c17a <hci_disconn_complete+0x4c>
	conn = bt_conn_lookup_handle(handle);
   4c13a:	f7e3 fcc3 	bl	2fac4 <bt_conn_lookup_handle>
	if (!conn) {
   4c13e:	4604      	mov	r4, r0
   4c140:	b1d8      	cbz	r0, 4c17a <hci_disconn_complete+0x4c>
	conn->err = evt->reason;
   4c142:	78f3      	ldrb	r3, [r6, #3]
   4c144:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   4c146:	4629      	mov	r1, r5
   4c148:	f7e3 fcc4 	bl	2fad4 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   4c14c:	78a3      	ldrb	r3, [r4, #2]
   4c14e:	2b01      	cmp	r3, #1
   4c150:	d004      	beq.n	4c15c <hci_disconn_complete+0x2e>
	bt_conn_unref(conn);
   4c152:	4620      	mov	r0, r4
}
   4c154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   4c158:	f000 bdb8 	b.w	4cccc <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4c15c:	f3bf 8f5b 	dmb	ish
   4c160:	6863      	ldr	r3, [r4, #4]
   4c162:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   4c166:	07db      	lsls	r3, r3, #31
   4c168:	d5f3      	bpl.n	4c152 <hci_disconn_complete+0x24>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   4c16a:	4620      	mov	r0, r4
   4c16c:	2102      	movs	r1, #2
   4c16e:	f7e3 fcb1 	bl	2fad4 <bt_conn_set_state>
		bt_le_scan_update(false);
   4c172:	4628      	mov	r0, r5
   4c174:	f7e3 f860 	bl	2f238 <bt_le_scan_update>
   4c178:	e7eb      	b.n	4c152 <hci_disconn_complete+0x24>
}
   4c17a:	bd70      	pop	{r4, r5, r6, pc}

0004c17c <le_ltk_request>:
{
   4c17c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   4c17e:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   4c180:	8826      	ldrh	r6, [r4, #0]
{
   4c182:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   4c184:	b2b0      	uxth	r0, r6
   4c186:	f7e3 fc9d 	bl	2fac4 <bt_conn_lookup_handle>
	if (!conn) {
   4c18a:	4605      	mov	r5, r0
   4c18c:	b318      	cbz	r0, 4c1d6 <le_ltk_request+0x5a>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   4c18e:	af02      	add	r7, sp, #8
   4c190:	f8d4 2002 	ldr.w	r2, [r4, #2]
   4c194:	f8d4 3006 	ldr.w	r3, [r4, #6]
   4c198:	9701      	str	r7, [sp, #4]
   4c19a:	8961      	ldrh	r1, [r4, #10]
   4c19c:	9100      	str	r1, [sp, #0]
   4c19e:	f003 f9a9 	bl	4f4f4 <bt_smp_request_ltk>
   4c1a2:	b1d0      	cbz	r0, 4c1da <le_ltk_request+0x5e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   4c1a4:	2112      	movs	r1, #18
   4c1a6:	f242 001a 	movw	r0, #8218	; 0x201a
   4c1aa:	f7e1 fd51 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   4c1ae:	4604      	mov	r4, r0
   4c1b0:	b170      	cbz	r0, 4c1d0 <le_ltk_request+0x54>
	return net_buf_simple_add(&buf->b, len);
   4c1b2:	2112      	movs	r1, #18
   4c1b4:	3008      	adds	r0, #8
   4c1b6:	f003 fd30 	bl	4fc1a <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   4c1ba:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   4c1bc:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   4c1c0:	2210      	movs	r2, #16
   4c1c2:	f7ff fd49 	bl	4bc58 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   4c1c6:	4621      	mov	r1, r4
   4c1c8:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   4c1cc:	f7e1 fd7a 	bl	2dcc4 <bt_hci_cmd_send>
	bt_conn_unref(conn);
   4c1d0:	4628      	mov	r0, r5
   4c1d2:	f000 fd7b 	bl	4cccc <bt_conn_unref>
}
   4c1d6:	b007      	add	sp, #28
   4c1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   4c1da:	2102      	movs	r1, #2
   4c1dc:	f242 001b 	movw	r0, #8219	; 0x201b
   4c1e0:	f7e1 fd36 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   4c1e4:	4604      	mov	r4, r0
   4c1e6:	2800      	cmp	r0, #0
   4c1e8:	d0f2      	beq.n	4c1d0 <le_ltk_request+0x54>
   4c1ea:	2102      	movs	r1, #2
   4c1ec:	3008      	adds	r0, #8
   4c1ee:	f003 fd14 	bl	4fc1a <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   4c1f2:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   4c1f4:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   4c1f6:	f242 001b 	movw	r0, #8219	; 0x201b
   4c1fa:	e7e7      	b.n	4c1cc <le_ltk_request+0x50>

0004c1fc <le_conn_param_neg_reply>:
{
   4c1fc:	b570      	push	{r4, r5, r6, lr}
   4c1fe:	4606      	mov	r6, r0
   4c200:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   4c202:	f242 0021 	movw	r0, #8225	; 0x2021
   4c206:	2103      	movs	r1, #3
   4c208:	f7e1 fd22 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   4c20c:	4604      	mov	r4, r0
   4c20e:	b160      	cbz	r0, 4c22a <le_conn_param_neg_reply+0x2e>
   4c210:	2103      	movs	r1, #3
   4c212:	3008      	adds	r0, #8
   4c214:	f003 fd01 	bl	4fc1a <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   4c218:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   4c21a:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   4c21c:	4621      	mov	r1, r4
   4c21e:	f242 0021 	movw	r0, #8225	; 0x2021
}
   4c222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   4c226:	f7e1 bd4d 	b.w	2dcc4 <bt_hci_cmd_send>
}
   4c22a:	bd70      	pop	{r4, r5, r6, pc}

0004c22c <le_conn_param_req>:
{
   4c22c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   4c22e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   4c230:	78d9      	ldrb	r1, [r3, #3]
   4c232:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   4c234:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   4c236:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   4c23a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   4c23e:	7959      	ldrb	r1, [r3, #5]
   4c240:	791a      	ldrb	r2, [r3, #4]
   4c242:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   4c246:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   4c24a:	799a      	ldrb	r2, [r3, #6]
   4c24c:	79d9      	ldrb	r1, [r3, #7]
   4c24e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   4c252:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   4c256:	7a1a      	ldrb	r2, [r3, #8]
   4c258:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   4c25a:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   4c25c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   4c260:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   4c262:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   4c266:	f7e3 fc2d 	bl	2fac4 <bt_conn_lookup_handle>
	if (!conn) {
   4c26a:	4606      	mov	r6, r0
   4c26c:	b928      	cbnz	r0, 4c27a <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   4c26e:	2102      	movs	r1, #2
   4c270:	4620      	mov	r0, r4
   4c272:	f7ff ffc3 	bl	4c1fc <le_conn_param_neg_reply>
}
   4c276:	b003      	add	sp, #12
   4c278:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   4c27a:	4669      	mov	r1, sp
   4c27c:	f7e3 fd7c 	bl	2fd78 <le_param_req>
   4c280:	b938      	cbnz	r0, 4c292 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   4c282:	211e      	movs	r1, #30
   4c284:	4620      	mov	r0, r4
   4c286:	f7ff ffb9 	bl	4c1fc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   4c28a:	4630      	mov	r0, r6
   4c28c:	f000 fd1e 	bl	4cccc <bt_conn_unref>
   4c290:	e7f1      	b.n	4c276 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   4c292:	210e      	movs	r1, #14
   4c294:	f242 0020 	movw	r0, #8224	; 0x2020
   4c298:	f7e1 fcda 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   4c29c:	4605      	mov	r5, r0
   4c29e:	2800      	cmp	r0, #0
   4c2a0:	d0f3      	beq.n	4c28a <le_conn_param_req+0x5e>
   4c2a2:	210e      	movs	r1, #14
   4c2a4:	3008      	adds	r0, #8
   4c2a6:	f003 fcb8 	bl	4fc1a <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   4c2aa:	220e      	movs	r2, #14
   4c2ac:	4604      	mov	r4, r0
   4c2ae:	2100      	movs	r1, #0
   4c2b0:	f7ff fcdd 	bl	4bc6e <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   4c2b4:	f8bd 3000 	ldrh.w	r3, [sp]
   4c2b8:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   4c2ba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   4c2be:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   4c2c0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   4c2c4:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   4c2c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   4c2ca:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   4c2cc:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   4c2ce:	4629      	mov	r1, r5
   4c2d0:	f242 0020 	movw	r0, #8224	; 0x2020
   4c2d4:	f7e1 fcf6 	bl	2dcc4 <bt_hci_cmd_send>
   4c2d8:	e7d7      	b.n	4c28a <le_conn_param_req+0x5e>

0004c2da <hci_le_read_max_data_len>:
{
   4c2da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4c2dc:	4606      	mov	r6, r0
   4c2de:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   4c2e0:	aa01      	add	r2, sp, #4
   4c2e2:	2100      	movs	r1, #0
   4c2e4:	f242 002f 	movw	r0, #8239	; 0x202f
   4c2e8:	f7e1 fd0e 	bl	2dd08 <bt_hci_cmd_send_sync>
	if (err) {
   4c2ec:	4604      	mov	r4, r0
   4c2ee:	b948      	cbnz	r0, 4c304 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   4c2f0:	9801      	ldr	r0, [sp, #4]
   4c2f2:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   4c2f4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   4c2f8:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   4c2fa:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   4c2fe:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   4c300:	f7f7 fb24 	bl	4394c <net_buf_unref>
}
   4c304:	4620      	mov	r0, r4
   4c306:	b002      	add	sp, #8
   4c308:	bd70      	pop	{r4, r5, r6, pc}

0004c30a <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   4c30a:	f7e1 bd69 	b.w	2dde0 <bt_le_create_conn_legacy>

0004c30e <bt_hci_disconnect>:
{
   4c30e:	b570      	push	{r4, r5, r6, lr}
   4c310:	4606      	mov	r6, r0
   4c312:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   4c314:	f240 4006 	movw	r0, #1030	; 0x406
   4c318:	2103      	movs	r1, #3
   4c31a:	f7e1 fc99 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   4c31e:	4604      	mov	r4, r0
   4c320:	b168      	cbz	r0, 4c33e <bt_hci_disconnect+0x30>
   4c322:	2103      	movs	r1, #3
   4c324:	3008      	adds	r0, #8
   4c326:	f003 fc78 	bl	4fc1a <net_buf_simple_add>
	disconn->reason = reason;
   4c32a:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   4c32c:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   4c32e:	4621      	mov	r1, r4
   4c330:	2200      	movs	r2, #0
}
   4c332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   4c336:	f240 4006 	movw	r0, #1030	; 0x406
   4c33a:	f7e1 bce5 	b.w	2dd08 <bt_hci_cmd_send_sync>
}
   4c33e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4c342:	bd70      	pop	{r4, r5, r6, pc}

0004c344 <bt_le_set_data_len>:
{
   4c344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4c346:	4607      	mov	r7, r0
   4c348:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   4c34a:	f242 0022 	movw	r0, #8226	; 0x2022
   4c34e:	2106      	movs	r1, #6
{
   4c350:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   4c352:	f7e1 fc7d 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   4c356:	4604      	mov	r4, r0
   4c358:	b170      	cbz	r0, 4c378 <bt_le_set_data_len+0x34>
   4c35a:	2106      	movs	r1, #6
   4c35c:	3008      	adds	r0, #8
   4c35e:	f003 fc5c 	bl	4fc1a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   4c362:	883b      	ldrh	r3, [r7, #0]
   4c364:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   4c366:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   4c368:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   4c36a:	4621      	mov	r1, r4
   4c36c:	f242 0022 	movw	r0, #8226	; 0x2022
}
   4c370:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   4c374:	f7e1 bca6 	b.w	2dcc4 <bt_hci_cmd_send>
}
   4c378:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4c37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004c37e <bt_le_set_phy>:
{
   4c37e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4c382:	4681      	mov	r9, r0
   4c384:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   4c386:	f242 0032 	movw	r0, #8242	; 0x2032
   4c38a:	2107      	movs	r1, #7
{
   4c38c:	f89d a020 	ldrb.w	sl, [sp, #32]
   4c390:	4617      	mov	r7, r2
   4c392:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   4c394:	f7e1 fc5c 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   4c398:	4605      	mov	r5, r0
   4c39a:	b198      	cbz	r0, 4c3c4 <bt_le_set_phy+0x46>
   4c39c:	2107      	movs	r1, #7
   4c39e:	3008      	adds	r0, #8
   4c3a0:	f003 fc3b 	bl	4fc1a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   4c3a4:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   4c3a8:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   4c3ac:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   4c3ae:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   4c3b0:	f8a0 a005 	strh.w	sl, [r0, #5]
	cp->handle = sys_cpu_to_le16(conn->handle);
   4c3b4:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   4c3b6:	4629      	mov	r1, r5
   4c3b8:	f242 0032 	movw	r0, #8242	; 0x2032
}
   4c3bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   4c3c0:	f7e1 bc80 	b.w	2dcc4 <bt_hci_cmd_send>
}
   4c3c4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4c3c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004c3cc <le_phy_update_complete>:
{
   4c3cc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   4c3ce:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4c3d0:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   4c3d4:	f7e3 fb76 	bl	2fac4 <bt_conn_lookup_handle>
	if (!conn) {
   4c3d8:	4604      	mov	r4, r0
   4c3da:	b308      	cbz	r0, 4c420 <le_phy_update_complete+0x54>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   4c3dc:	1d06      	adds	r6, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4c3de:	f06f 0180 	mvn.w	r1, #128	; 0x80
   4c3e2:	4630      	mov	r0, r6
   4c3e4:	f7ff fdd1 	bl	4bf8a <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   4c3e8:	0603      	lsls	r3, r0, #24
   4c3ea:	d507      	bpl.n	4c3fc <le_phy_update_complete+0x30>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4c3ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   4c3f0:	4630      	mov	r0, r6
   4c3f2:	f7ff fdbb 	bl	4bf6c <atomic_or>
		conn_auto_initiate(conn);
   4c3f6:	4620      	mov	r0, r4
   4c3f8:	f7e1 fd6e 	bl	2ded8 <conn_auto_initiate>
	conn->le.phy.tx_phy = bt_get_phy(evt->tx_phy);
   4c3fc:	78e8      	ldrb	r0, [r5, #3]
   4c3fe:	f7e1 fce5 	bl	2ddcc <bt_get_phy>
   4c402:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
	conn->le.phy.rx_phy = bt_get_phy(evt->rx_phy);
   4c406:	7928      	ldrb	r0, [r5, #4]
   4c408:	f7e1 fce0 	bl	2ddcc <bt_get_phy>
   4c40c:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	notify_le_phy_updated(conn);
   4c410:	4620      	mov	r0, r4
   4c412:	f7e3 fc8f 	bl	2fd34 <notify_le_phy_updated>
	bt_conn_unref(conn);
   4c416:	4620      	mov	r0, r4
}
   4c418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   4c41c:	f000 bc56 	b.w	4cccc <bt_conn_unref>
}
   4c420:	bd70      	pop	{r4, r5, r6, pc}

0004c422 <le_remote_feat_complete>:
{
   4c422:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   4c424:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4c426:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   4c42a:	f7e3 fb4b 	bl	2fac4 <bt_conn_lookup_handle>
	if (!conn) {
   4c42e:	4604      	mov	r4, r0
   4c430:	b198      	cbz	r0, 4c45a <le_remote_feat_complete+0x38>
	if (!evt->status) {
   4c432:	782b      	ldrb	r3, [r5, #0]
   4c434:	b923      	cbnz	r3, 4c440 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   4c436:	2208      	movs	r2, #8
   4c438:	1ce9      	adds	r1, r5, #3
   4c43a:	30ac      	adds	r0, #172	; 0xac
   4c43c:	f7ff fc0c 	bl	4bc58 <memcpy>
   4c440:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   4c444:	1d20      	adds	r0, r4, #4
   4c446:	f7ff fd91 	bl	4bf6c <atomic_or>
	conn_auto_initiate(conn);
   4c44a:	4620      	mov	r0, r4
   4c44c:	f7e1 fd44 	bl	2ded8 <conn_auto_initiate>
	bt_conn_unref(conn);
   4c450:	4620      	mov	r0, r4
}
   4c452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   4c456:	f000 bc39 	b.w	4cccc <bt_conn_unref>
}
   4c45a:	bd38      	pop	{r3, r4, r5, pc}

0004c45c <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   4c45c:	6880      	ldr	r0, [r0, #8]
   4c45e:	f7e1 bd9f 	b.w	2dfa0 <bt_hci_le_enh_conn_complete>

0004c462 <le_legacy_conn_complete>:
{
   4c462:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   4c464:	6881      	ldr	r1, [r0, #8]
{
   4c466:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   4c468:	780b      	ldrb	r3, [r1, #0]
   4c46a:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   4c46e:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   4c472:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   4c476:	78cb      	ldrb	r3, [r1, #3]
   4c478:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   4c47c:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   4c480:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   4c484:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   4c488:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   4c48c:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   4c490:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   4c494:	7c4b      	ldrb	r3, [r1, #17]
   4c496:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   4c49a:	a803      	add	r0, sp, #12
   4c49c:	3104      	adds	r1, #4
   4c49e:	f7ff fd62 	bl	4bf66 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   4c4a2:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   4c4a4:	4669      	mov	r1, sp
   4c4a6:	2206      	movs	r2, #6
   4c4a8:	f10d 0013 	add.w	r0, sp, #19
   4c4ac:	9400      	str	r4, [sp, #0]
   4c4ae:	f8ad 4004 	strh.w	r4, [sp, #4]
   4c4b2:	f7ff fbd1 	bl	4bc58 <memcpy>
   4c4b6:	2206      	movs	r2, #6
   4c4b8:	4669      	mov	r1, sp
   4c4ba:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   4c4be:	9400      	str	r4, [sp, #0]
   4c4c0:	f8ad 4004 	strh.w	r4, [sp, #4]
   4c4c4:	f7ff fbc8 	bl	4bc58 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   4c4c8:	a802      	add	r0, sp, #8
   4c4ca:	f7e1 fd69 	bl	2dfa0 <bt_hci_le_enh_conn_complete>
}
   4c4ce:	b00a      	add	sp, #40	; 0x28
   4c4d0:	bd10      	pop	{r4, pc}

0004c4d2 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   4c4d2:	8803      	ldrh	r3, [r0, #0]
   4c4d4:	8842      	ldrh	r2, [r0, #2]
   4c4d6:	4293      	cmp	r3, r2
{
   4c4d8:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   4c4da:	d819      	bhi.n	4c510 <bt_le_conn_params_valid+0x3e>
   4c4dc:	2b05      	cmp	r3, #5
   4c4de:	d917      	bls.n	4c510 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   4c4e0:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   4c4e4:	d814      	bhi.n	4c510 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   4c4e6:	8883      	ldrh	r3, [r0, #4]
   4c4e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   4c4ec:	d210      	bcs.n	4c510 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   4c4ee:	88c0      	ldrh	r0, [r0, #6]
   4c4f0:	f1a0 010a 	sub.w	r1, r0, #10
   4c4f4:	b289      	uxth	r1, r1
   4c4f6:	f640 4476 	movw	r4, #3190	; 0xc76
   4c4fa:	42a1      	cmp	r1, r4
   4c4fc:	d808      	bhi.n	4c510 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   4c4fe:	3301      	adds	r3, #1
   4c500:	b29b      	uxth	r3, r3
   4c502:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   4c504:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   4c508:	bf34      	ite	cc
   4c50a:	2001      	movcc	r0, #1
   4c50c:	2000      	movcs	r0, #0
}
   4c50e:	bd10      	pop	{r4, pc}
		return false;
   4c510:	2000      	movs	r0, #0
   4c512:	e7fc      	b.n	4c50e <bt_le_conn_params_valid+0x3c>

0004c514 <hci_encrypt_key_refresh_complete>:
{
   4c514:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   4c516:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4c518:	f8b3 0001 	ldrh.w	r0, [r3, #1]
	uint8_t status = evt->status;
   4c51c:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   4c51e:	f7e3 fad1 	bl	2fac4 <bt_conn_lookup_handle>
	if (!conn) {
   4c522:	4604      	mov	r4, r0
   4c524:	b320      	cbz	r0, 4c570 <hci_encrypt_key_refresh_complete+0x5c>
	if (status) {
   4c526:	b165      	cbz	r5, 4c542 <hci_encrypt_key_refresh_complete+0x2e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   4c528:	4628      	mov	r0, r5
   4c52a:	f7e1 fe77 	bl	2e21c <bt_security_err_get>
   4c52e:	4629      	mov	r1, r5
   4c530:	4602      	mov	r2, r0
   4c532:	4620      	mov	r0, r4
   4c534:	f7e3 fc88 	bl	2fe48 <bt_conn_security_changed>
	bt_conn_unref(conn);
   4c538:	4620      	mov	r0, r4
}
   4c53a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   4c53e:	f000 bbc5 	b.w	4cccc <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   4c542:	7883      	ldrb	r3, [r0, #2]
   4c544:	2b01      	cmp	r3, #1
   4c546:	d1ef      	bne.n	4c528 <hci_encrypt_key_refresh_complete+0x14>
		bt_smp_update_keys(conn);
   4c548:	f003 fa34 	bl	4f9b4 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   4c54c:	4620      	mov	r0, r4
   4c54e:	f7ff fcf2 	bl	4bf36 <update_sec_level>
   4c552:	2800      	cmp	r0, #0
   4c554:	d1e8      	bne.n	4c528 <hci_encrypt_key_refresh_complete+0x14>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   4c556:	2005      	movs	r0, #5
   4c558:	f7e1 fe60 	bl	2e21c <bt_security_err_get>
   4c55c:	2105      	movs	r1, #5
   4c55e:	4602      	mov	r2, r0
   4c560:	4620      	mov	r0, r4
   4c562:	f7e3 fc71 	bl	2fe48 <bt_conn_security_changed>
		bt_conn_disconnect(conn, status);
   4c566:	2105      	movs	r1, #5
   4c568:	4620      	mov	r0, r4
   4c56a:	f000 fca8 	bl	4cebe <bt_conn_disconnect>
   4c56e:	e7e3      	b.n	4c538 <hci_encrypt_key_refresh_complete+0x24>
}
   4c570:	bd38      	pop	{r3, r4, r5, pc}

0004c572 <hci_encrypt_change>:
{
   4c572:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   4c574:	6886      	ldr	r6, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4c576:	f8b6 0001 	ldrh.w	r0, [r6, #1]
	uint8_t status = evt->status;
   4c57a:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   4c57c:	f7e3 faa2 	bl	2fac4 <bt_conn_lookup_handle>
	if (!conn) {
   4c580:	4604      	mov	r4, r0
   4c582:	b368      	cbz	r0, 4c5e0 <hci_encrypt_change+0x6e>
	if (status) {
   4c584:	b165      	cbz	r5, 4c5a0 <hci_encrypt_change+0x2e>
		bt_conn_security_changed(conn, status,
   4c586:	4628      	mov	r0, r5
   4c588:	f7e1 fe48 	bl	2e21c <bt_security_err_get>
   4c58c:	4629      	mov	r1, r5
   4c58e:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   4c590:	4620      	mov	r0, r4
   4c592:	f7e3 fc59 	bl	2fe48 <bt_conn_security_changed>
	bt_conn_unref(conn);
   4c596:	4620      	mov	r0, r4
}
   4c598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   4c59c:	f000 bb96 	b.w	4cccc <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   4c5a0:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   4c5a2:	78f3      	ldrb	r3, [r6, #3]
   4c5a4:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   4c5a6:	2a01      	cmp	r2, #1
   4c5a8:	d005      	beq.n	4c5b6 <hci_encrypt_change+0x44>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   4c5aa:	2000      	movs	r0, #0
   4c5ac:	f7e1 fe36 	bl	2e21c <bt_security_err_get>
   4c5b0:	2100      	movs	r1, #0
   4c5b2:	4602      	mov	r2, r0
   4c5b4:	e7ec      	b.n	4c590 <hci_encrypt_change+0x1e>
		if (conn->encrypt) {
   4c5b6:	b10b      	cbz	r3, 4c5bc <hci_encrypt_change+0x4a>
			bt_smp_update_keys(conn);
   4c5b8:	f003 f9fc 	bl	4f9b4 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   4c5bc:	4620      	mov	r0, r4
   4c5be:	f7ff fcba 	bl	4bf36 <update_sec_level>
   4c5c2:	2800      	cmp	r0, #0
   4c5c4:	d1f1      	bne.n	4c5aa <hci_encrypt_change+0x38>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   4c5c6:	2005      	movs	r0, #5
   4c5c8:	f7e1 fe28 	bl	2e21c <bt_security_err_get>
   4c5cc:	2105      	movs	r1, #5
   4c5ce:	4602      	mov	r2, r0
   4c5d0:	4620      	mov	r0, r4
   4c5d2:	f7e3 fc39 	bl	2fe48 <bt_conn_security_changed>
		bt_conn_disconnect(conn, status);
   4c5d6:	2105      	movs	r1, #5
   4c5d8:	4620      	mov	r0, r4
   4c5da:	f000 fc70 	bl	4cebe <bt_conn_disconnect>
   4c5de:	e7da      	b.n	4c596 <hci_encrypt_change+0x24>
}
   4c5e0:	bd70      	pop	{r4, r5, r6, pc}

0004c5e2 <bt_send>:
		return bt_hci_ecc_send(buf);
   4c5e2:	f7e0 bf51 	b.w	2d488 <bt_hci_ecc_send>

0004c5e6 <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   4c5e6:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   4c5e8:	f7e7 fb88 	bl	33cfc <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   4c5ec:	b118      	cbz	r0, 4c5f6 <bt_addr_le_is_bonded+0x10>
   4c5ee:	89c0      	ldrh	r0, [r0, #14]
   4c5f0:	3800      	subs	r0, #0
   4c5f2:	bf18      	it	ne
   4c5f4:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   4c5f6:	bd08      	pop	{r3, pc}

0004c5f8 <bt_data_parse>:
}

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   4c5f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4c5fa:	4604      	mov	r4, r0
   4c5fc:	460e      	mov	r6, r1
   4c5fe:	4617      	mov	r7, r2
	while (ad->len > 1) {
   4c600:	88a3      	ldrh	r3, [r4, #4]
   4c602:	2b01      	cmp	r3, #1
   4c604:	d801      	bhi.n	4c60a <bt_data_parse+0x12>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   4c606:	b003      	add	sp, #12
   4c608:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
   4c60a:	4620      	mov	r0, r4
   4c60c:	f003 fb3e 	bl	4fc8c <net_buf_simple_pull_u8>
		if (len == 0U) {
   4c610:	4605      	mov	r5, r0
   4c612:	2800      	cmp	r0, #0
   4c614:	d0f7      	beq.n	4c606 <bt_data_parse+0xe>
		if (len > ad->len) {
   4c616:	88a3      	ldrh	r3, [r4, #4]
   4c618:	4283      	cmp	r3, r0
   4c61a:	d3f4      	bcc.n	4c606 <bt_data_parse+0xe>
		data.type = net_buf_simple_pull_u8(ad);
   4c61c:	4620      	mov	r0, r4
   4c61e:	f003 fb35 	bl	4fc8c <net_buf_simple_pull_u8>
		data.data_len = len - 1;
   4c622:	3d01      	subs	r5, #1
		data.data = ad->data;
   4c624:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
   4c626:	f88d 0000 	strb.w	r0, [sp]
		if (!func(&data, user_data)) {
   4c62a:	4639      	mov	r1, r7
   4c62c:	4668      	mov	r0, sp
		data.data_len = len - 1;
   4c62e:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
   4c632:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   4c634:	47b0      	blx	r6
   4c636:	2800      	cmp	r0, #0
   4c638:	d0e5      	beq.n	4c606 <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
   4c63a:	4629      	mov	r1, r5
   4c63c:	4620      	mov	r0, r4
   4c63e:	f003 fb15 	bl	4fc6c <net_buf_simple_pull>
   4c642:	e7dd      	b.n	4c600 <bt_data_parse+0x8>

0004c644 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   4c644:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   4c646:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   4c64a:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   4c64c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4c650:	2100      	movs	r1, #0
{
   4c652:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   4c654:	f7e1 f90e 	bl	2d874 <bt_buf_get_evt>
   4c658:	2102      	movs	r1, #2
   4c65a:	4604      	mov	r4, r0
   4c65c:	3008      	adds	r0, #8
   4c65e:	f003 fadc 	bl	4fc1a <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   4c662:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   4c664:	7045      	strb	r5, [r0, #1]

	return buf;
}
   4c666:	4620      	mov	r0, r4
   4c668:	bd70      	pop	{r4, r5, r6, pc}

0004c66a <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   4c66a:	3103      	adds	r1, #3
{
   4c66c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   4c66e:	b2c9      	uxtb	r1, r1
{
   4c670:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   4c672:	200e      	movs	r0, #14
   4c674:	f7ff ffe6 	bl	4c644 <bt_hci_evt_create>
   4c678:	2103      	movs	r1, #3
   4c67a:	4604      	mov	r4, r0
   4c67c:	3008      	adds	r0, #8
   4c67e:	f003 facc 	bl	4fc1a <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   4c682:	2301      	movs	r3, #1
   4c684:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   4c686:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   4c68a:	4620      	mov	r0, r4
   4c68c:	bd38      	pop	{r3, r4, r5, pc}

0004c68e <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   4c68e:	b570      	push	{r4, r5, r6, lr}
   4c690:	4605      	mov	r5, r0
   4c692:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   4c694:	200f      	movs	r0, #15
   4c696:	2104      	movs	r1, #4
   4c698:	f7ff ffd4 	bl	4c644 <bt_hci_evt_create>
   4c69c:	2104      	movs	r1, #4
   4c69e:	4604      	mov	r4, r0
   4c6a0:	3008      	adds	r0, #8
   4c6a2:	f003 faba 	bl	4fc1a <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   4c6a6:	2201      	movs	r2, #1
	cs->status = status;
   4c6a8:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   4c6aa:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   4c6ac:	8045      	strh	r5, [r0, #2]

	return buf;
}
   4c6ae:	4620      	mov	r0, r4
   4c6b0:	bd70      	pop	{r4, r5, r6, pc}

0004c6b2 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   4c6b2:	2207      	movs	r2, #7
   4c6b4:	f7ff bad0 	b.w	4bc58 <memcpy>

0004c6b8 <atomic_get>:
   4c6b8:	f3bf 8f5b 	dmb	ish
   4c6bc:	6800      	ldr	r0, [r0, #0]
   4c6be:	f3bf 8f5b 	dmb	ish
}
   4c6c2:	4770      	bx	lr

0004c6c4 <adv_unpause_enabled>:
{
   4c6c4:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4c6c6:	f100 0310 	add.w	r3, r0, #16
   4c6ca:	f3bf 8f5b 	dmb	ish
   4c6ce:	e853 2f00 	ldrex	r2, [r3]
   4c6d2:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   4c6d6:	e843 1400 	strex	r4, r1, [r3]
   4c6da:	2c00      	cmp	r4, #0
   4c6dc:	d1f7      	bne.n	4c6ce <adv_unpause_enabled+0xa>
   4c6de:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   4c6e2:	0453      	lsls	r3, r2, #17
   4c6e4:	d503      	bpl.n	4c6ee <adv_unpause_enabled+0x2a>
}
   4c6e6:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   4c6e8:	2101      	movs	r1, #1
   4c6ea:	f000 b9fe 	b.w	4caea <bt_le_adv_set_enable>
}
   4c6ee:	bc10      	pop	{r4}
   4c6f0:	4770      	bx	lr

0004c6f2 <hci_id_add.constprop.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   4c6f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4c6f4:	4607      	mov	r7, r0
   4c6f6:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   4c6f8:	f242 0027 	movw	r0, #8231	; 0x2027
   4c6fc:	2127      	movs	r1, #39	; 0x27
   4c6fe:	f7e1 faa7 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   4c702:	4604      	mov	r4, r0
   4c704:	b1d0      	cbz	r0, 4c73c <hci_id_add.constprop.0+0x4a>
   4c706:	2127      	movs	r1, #39	; 0x27
   4c708:	3008      	adds	r0, #8
   4c70a:	f003 fa86 	bl	4fc1a <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   4c70e:	4639      	mov	r1, r7
   4c710:	4605      	mov	r5, r0
   4c712:	f7ff ffce 	bl	4c6b2 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   4c716:	4631      	mov	r1, r6
   4c718:	2210      	movs	r2, #16
   4c71a:	1de8      	adds	r0, r5, #7
   4c71c:	f7ff fa9c 	bl	4bc58 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   4c720:	2210      	movs	r2, #16
   4c722:	2100      	movs	r1, #0
   4c724:	f105 0017 	add.w	r0, r5, #23
   4c728:	f7ff faa1 	bl	4bc6e <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   4c72c:	4621      	mov	r1, r4
   4c72e:	2200      	movs	r2, #0
}
   4c730:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   4c734:	f242 0027 	movw	r0, #8231	; 0x2027
   4c738:	f7e1 bae6 	b.w	2dd08 <bt_hci_cmd_send_sync>
}
   4c73c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4c740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004c742 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   4c742:	7a03      	ldrb	r3, [r0, #8]
   4c744:	075b      	lsls	r3, r3, #29
   4c746:	d504      	bpl.n	4c752 <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   4c748:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   4c74c:	3001      	adds	r0, #1
   4c74e:	f7ff bfd0 	b.w	4c6f2 <hci_id_add.constprop.0>
}
   4c752:	4770      	bx	lr

0004c754 <addr_res_enable>:
{
   4c754:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   4c756:	2101      	movs	r1, #1
{
   4c758:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   4c75a:	f242 002d 	movw	r0, #8237	; 0x202d
   4c75e:	f7e1 fa77 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   4c762:	4604      	mov	r4, r0
   4c764:	b158      	cbz	r0, 4c77e <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   4c766:	4629      	mov	r1, r5
   4c768:	3008      	adds	r0, #8
   4c76a:	f003 fa65 	bl	4fc38 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   4c76e:	4621      	mov	r1, r4
   4c770:	2200      	movs	r2, #0
}
   4c772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   4c776:	f242 002d 	movw	r0, #8237	; 0x202d
   4c77a:	f7e1 bac5 	b.w	2dd08 <bt_hci_cmd_send_sync>
}
   4c77e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4c782:	bd38      	pop	{r3, r4, r5, pc}

0004c784 <is_adv_using_rand_addr>:
{
   4c784:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   4c786:	f7e2 fac7 	bl	2ed18 <bt_le_adv_lookup_legacy>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
   4c78a:	b120      	cbz	r0, 4c796 <is_adv_using_rand_addr+0x12>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   4c78c:	3010      	adds	r0, #16
   4c78e:	f7ff ff93 	bl	4c6b8 <atomic_get>
   4c792:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   4c796:	bd08      	pop	{r3, pc}

0004c798 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   4c798:	f100 0210 	add.w	r2, r0, #16
{
   4c79c:	b508      	push	{r3, lr}
   4c79e:	4603      	mov	r3, r0
   4c7a0:	4610      	mov	r0, r2
   4c7a2:	f7ff ff89 	bl	4c6b8 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   4c7a6:	0641      	lsls	r1, r0, #25
   4c7a8:	d511      	bpl.n	4c7ce <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4c7aa:	f3bf 8f5b 	dmb	ish
   4c7ae:	e852 0f00 	ldrex	r0, [r2]
   4c7b2:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
   4c7b6:	e842 0100 	strex	r1, r0, [r2]
   4c7ba:	2900      	cmp	r1, #0
   4c7bc:	d1f7      	bne.n	4c7ae <adv_pause_enabled+0x16>
   4c7be:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   4c7c2:	4618      	mov	r0, r3
   4c7c4:	2100      	movs	r1, #0
}
   4c7c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   4c7ca:	f000 b98e 	b.w	4caea <bt_le_adv_set_enable>
}
   4c7ce:	bd08      	pop	{r3, pc}

0004c7d0 <bt_lookup_id_addr>:
{
   4c7d0:	b510      	push	{r4, lr}
   4c7d2:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   4c7d4:	f7e7 fa40 	bl	33c58 <bt_keys_find_irk>
		if (keys) {
   4c7d8:	b100      	cbz	r0, 4c7dc <bt_lookup_id_addr+0xc>
			return &keys->addr;
   4c7da:	1c44      	adds	r4, r0, #1
}
   4c7dc:	4620      	mov	r0, r4
   4c7de:	bd10      	pop	{r4, pc}

0004c7e0 <bt_id_set_private_addr>:
{
   4c7e0:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   4c7e2:	2106      	movs	r1, #6
   4c7e4:	4668      	mov	r0, sp
   4c7e6:	f7ea fc35 	bl	37054 <bt_rand>
	if (err) {
   4c7ea:	b940      	cbnz	r0, 4c7fe <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   4c7ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   4c7f0:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   4c7f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4c7f6:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   4c7fa:	f7e1 fea7 	bl	2e54c <set_random_address>
}
   4c7fe:	b003      	add	sp, #12
   4c800:	f85d fb04 	ldr.w	pc, [sp], #4

0004c804 <bt_id_set_adv_private_addr>:
{
   4c804:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   4c806:	2106      	movs	r1, #6
   4c808:	4668      	mov	r0, sp
   4c80a:	f7ea fc23 	bl	37054 <bt_rand>
	if (err) {
   4c80e:	b940      	cbnz	r0, 4c822 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   4c810:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   4c814:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   4c816:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4c81a:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   4c81e:	f7e1 fe95 	bl	2e54c <set_random_address>
}
   4c822:	b003      	add	sp, #12
   4c824:	f85d fb04 	ldr.w	pc, [sp], #4

0004c828 <bt_id_scan_random_addr_check>:
{
   4c828:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   4c82a:	f7e2 fa75 	bl	2ed18 <bt_le_adv_lookup_legacy>
	if (!adv) {
   4c82e:	b110      	cbz	r0, 4c836 <bt_id_scan_random_addr_check+0xe>
   4c830:	3010      	adds	r0, #16
   4c832:	f7ff ff41 	bl	4c6b8 <atomic_get>
}
   4c836:	2001      	movs	r0, #1
   4c838:	bd08      	pop	{r3, pc}

0004c83a <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   4c83a:	7a03      	ldrb	r3, [r0, #8]
   4c83c:	07d9      	lsls	r1, r3, #31
   4c83e:	d504      	bpl.n	4c84a <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   4c840:	f023 0301 	bic.w	r3, r3, #1
   4c844:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   4c846:	f7e1 bf11 	b.w	2e66c <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   4c84a:	0799      	lsls	r1, r3, #30
   4c84c:	d504      	bpl.n	4c858 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   4c84e:	f023 0302 	bic.w	r3, r3, #2
   4c852:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   4c854:	f7e1 bfb0 	b.w	2e7b8 <bt_id_del>
}
   4c858:	4770      	bx	lr

0004c85a <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   4c85a:	2000      	movs	r0, #0
   4c85c:	4770      	bx	lr

0004c85e <get_adv_channel_map>:
{
   4c85e:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   4c860:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   4c864:	bf0c      	ite	eq
   4c866:	2007      	moveq	r0, #7
   4c868:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   4c86a:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   4c86c:	bf48      	it	mi
   4c86e:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   4c872:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   4c874:	bf48      	it	mi
   4c876:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   4c87a:	4770      	bx	lr

0004c87c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4c87c:	f3bf 8f5b 	dmb	ish
   4c880:	6800      	ldr	r0, [r0, #0]
   4c882:	f3bf 8f5b 	dmb	ish
}
   4c886:	4770      	bx	lr

0004c888 <atomic_and>:
{
   4c888:	b510      	push	{r4, lr}
   4c88a:	4603      	mov	r3, r0
}
   4c88c:	f3bf 8f5b 	dmb	ish
   4c890:	e853 0f00 	ldrex	r0, [r3]
   4c894:	ea00 0201 	and.w	r2, r0, r1
   4c898:	e843 2400 	strex	r4, r2, [r3]
   4c89c:	2c00      	cmp	r4, #0
   4c89e:	d1f7      	bne.n	4c890 <atomic_and+0x8>
   4c8a0:	f3bf 8f5b 	dmb	ish
   4c8a4:	bd10      	pop	{r4, pc}

0004c8a6 <hci_set_ad>:
{
   4c8a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4c8aa:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   4c8ac:	2120      	movs	r1, #32
{
   4c8ae:	9000      	str	r0, [sp, #0]
   4c8b0:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   4c8b2:	f7e1 f9cd 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   4c8b6:	4605      	mov	r5, r0
   4c8b8:	2800      	cmp	r0, #0
   4c8ba:	d050      	beq.n	4c95e <hci_set_ad+0xb8>
	return net_buf_simple_add(&buf->b, len);
   4c8bc:	2120      	movs	r1, #32
   4c8be:	3008      	adds	r0, #8
   4c8c0:	f003 f9ab 	bl	4fc1a <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   4c8c4:	2220      	movs	r2, #32
   4c8c6:	2100      	movs	r1, #0
   4c8c8:	4681      	mov	r9, r0
   4c8ca:	f7ff f9d0 	bl	4bc6e <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   4c8ce:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   4c8d2:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   4c8d6:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   4c8d8:	f8d4 8000 	ldr.w	r8, [r4]
   4c8dc:	2300      	movs	r3, #0
   4c8de:	6862      	ldr	r2, [r4, #4]
   4c8e0:	4293      	cmp	r3, r2
   4c8e2:	d30c      	bcc.n	4c8fe <hci_set_ad+0x58>
	for (size_t i = 0; i < ad_len; i++) {
   4c8e4:	3408      	adds	r4, #8
   4c8e6:	45a2      	cmp	sl, r4
   4c8e8:	d1f6      	bne.n	4c8d8 <hci_set_ad+0x32>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   4c8ea:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   4c8ec:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   4c8f0:	2200      	movs	r2, #0
   4c8f2:	4629      	mov	r1, r5
}
   4c8f4:	b003      	add	sp, #12
   4c8f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   4c8fa:	f7e1 ba05 	b.w	2dd08 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   4c8fe:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   4c902:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   4c906:	1cb0      	adds	r0, r6, #2
   4c908:	1811      	adds	r1, r2, r0
   4c90a:	291f      	cmp	r1, #31
   4c90c:	d908      	bls.n	4c920 <hci_set_ad+0x7a>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   4c90e:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   4c912:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   4c916:	d11a      	bne.n	4c94e <hci_set_ad+0xa8>
   4c918:	2a00      	cmp	r2, #0
   4c91a:	dd18      	ble.n	4c94e <hci_set_ad+0xa8>
				type = BT_DATA_NAME_SHORTENED;
   4c91c:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   4c920:	b2d7      	uxtb	r7, r2
   4c922:	1c79      	adds	r1, r7, #1
   4c924:	f80b 1006 	strb.w	r1, [fp, r6]
   4c928:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   4c92a:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   4c92c:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   4c930:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   4c934:	f8d8 1004 	ldr.w	r1, [r8, #4]
   4c938:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   4c93a:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   4c93c:	f7ff f98c 	bl	4bc58 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   4c940:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   4c942:	4437      	add	r7, r6
   4c944:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   4c946:	3301      	adds	r3, #1
   4c948:	f108 0808 	add.w	r8, r8, #8
   4c94c:	e7c7      	b.n	4c8de <hci_set_ad+0x38>
		net_buf_unref(buf);
   4c94e:	4628      	mov	r0, r5
   4c950:	f7f6 fffc 	bl	4394c <net_buf_unref>
		return err;
   4c954:	f06f 0015 	mvn.w	r0, #21
}
   4c958:	b003      	add	sp, #12
   4c95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOBUFS;
   4c95e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4c962:	e7f9      	b.n	4c958 <hci_set_ad+0xb2>

0004c964 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   4c964:	2301      	movs	r3, #1
{
   4c966:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   4c968:	fa03 f101 	lsl.w	r1, r3, r1
{
   4c96c:	4604      	mov	r4, r0
	if (val) {
   4c96e:	b162      	cbz	r2, 4c98a <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4c970:	f3bf 8f5b 	dmb	ish
   4c974:	e854 3f00 	ldrex	r3, [r4]
   4c978:	430b      	orrs	r3, r1
   4c97a:	e844 3200 	strex	r2, r3, [r4]
   4c97e:	2a00      	cmp	r2, #0
   4c980:	d1f8      	bne.n	4c974 <atomic_set_bit_to+0x10>
   4c982:	f3bf 8f5b 	dmb	ish
	}
}
   4c986:	bc10      	pop	{r4}
   4c988:	4770      	bx	lr
   4c98a:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4c98c:	43c9      	mvns	r1, r1
   4c98e:	f7ff bf7b 	b.w	4c888 <atomic_and>

0004c992 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   4c992:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4c996:	b087      	sub	sp, #28
   4c998:	4605      	mov	r5, r0
   4c99a:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   4c99e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   4c9a2:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   4c9a6:	460c      	mov	r4, r1
   4c9a8:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   4c9aa:	2100      	movs	r1, #0
   4c9ac:	2210      	movs	r2, #16
   4c9ae:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   4c9b0:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   4c9b2:	f7ff f95c 	bl	4bc6e <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   4c9b6:	b9ee      	cbnz	r6, 4c9f4 <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   4c9b8:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   4c9bc:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   4c9be:	a902      	add	r1, sp, #8
   4c9c0:	f242 0008 	movw	r0, #8200	; 0x2008
   4c9c4:	f7ff ff6f 	bl	4c8a6 <hci_set_ad>
		if (err) {
   4c9c8:	4604      	mov	r4, r0
   4c9ca:	b978      	cbnz	r0, 4c9ec <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   4c9cc:	f1ba 0f00 	cmp.w	sl, #0
   4c9d0:	d13e      	bne.n	4ca50 <le_adv_update.constprop.0+0xbe>
   4c9d2:	3510      	adds	r5, #16
   4c9d4:	f3bf 8f5b 	dmb	ish
   4c9d8:	e855 3f00 	ldrex	r3, [r5]
   4c9dc:	f043 0304 	orr.w	r3, r3, #4
   4c9e0:	e845 3200 	strex	r2, r3, [r5]
   4c9e4:	2a00      	cmp	r2, #0
   4c9e6:	d1f7      	bne.n	4c9d8 <le_adv_update.constprop.0+0x46>
   4c9e8:	f3bf 8f5b 	dmb	ish
}
   4c9ec:	4620      	mov	r0, r4
   4c9ee:	b007      	add	sp, #28
   4c9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   4c9f4:	f7e1 fd8c 	bl	2e510 <bt_get_name>
   4c9f8:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   4c9fa:	b9e4      	cbnz	r4, 4ca36 <le_adv_update.constprop.0+0xa4>
   4c9fc:	bb37      	cbnz	r7, 4ca4c <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   4c9fe:	4658      	mov	r0, fp
   4ca00:	f7ff f8f3 	bl	4bbea <strlen>
   4ca04:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   4ca06:	2e01      	cmp	r6, #1
		d[0].data = ad;
   4ca08:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   4ca0c:	f88d 3000 	strb.w	r3, [sp]
   4ca10:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   4ca14:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   4ca18:	d1d0      	bne.n	4c9bc <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   4ca1a:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   4ca1e:	9605      	str	r6, [sp, #20]
			d_len = 2;
   4ca20:	2202      	movs	r2, #2
   4ca22:	e7cc      	b.n	4c9be <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   4ca24:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   4ca28:	3a08      	subs	r2, #8
   4ca2a:	2a01      	cmp	r2, #1
   4ca2c:	d925      	bls.n	4ca7a <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   4ca2e:	3301      	adds	r3, #1
   4ca30:	4598      	cmp	r8, r3
   4ca32:	d1f7      	bne.n	4ca24 <le_adv_update.constprop.0+0x92>
   4ca34:	e7e2      	b.n	4c9fc <le_adv_update.constprop.0+0x6a>
   4ca36:	2300      	movs	r3, #0
   4ca38:	e7fa      	b.n	4ca30 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   4ca3a:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   4ca3e:	3a08      	subs	r2, #8
   4ca40:	2a01      	cmp	r2, #1
   4ca42:	d91a      	bls.n	4ca7a <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   4ca44:	3301      	adds	r3, #1
   4ca46:	4599      	cmp	r9, r3
   4ca48:	d1f7      	bne.n	4ca3a <le_adv_update.constprop.0+0xa8>
   4ca4a:	e7d8      	b.n	4c9fe <le_adv_update.constprop.0+0x6c>
   4ca4c:	2300      	movs	r3, #0
   4ca4e:	e7fa      	b.n	4ca46 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   4ca50:	2e02      	cmp	r6, #2
   4ca52:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   4ca56:	bf08      	it	eq
   4ca58:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   4ca5a:	a902      	add	r1, sp, #8
			d_len = 2;
   4ca5c:	bf08      	it	eq
   4ca5e:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   4ca60:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   4ca64:	bf08      	it	eq
   4ca66:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   4ca6a:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   4ca6e:	f7ff ff1a 	bl	4c8a6 <hci_set_ad>
		if (err) {
   4ca72:	2800      	cmp	r0, #0
   4ca74:	d0ad      	beq.n	4c9d2 <le_adv_update.constprop.0+0x40>
   4ca76:	4604      	mov	r4, r0
   4ca78:	e7b8      	b.n	4c9ec <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   4ca7a:	f06f 0415 	mvn.w	r4, #21
   4ca7e:	e7b5      	b.n	4c9ec <le_adv_update.constprop.0+0x5a>

0004ca80 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   4ca80:	6843      	ldr	r3, [r0, #4]
   4ca82:	f013 0008 	ands.w	r0, r3, #8
   4ca86:	d00a      	beq.n	4ca9e <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   4ca88:	035a      	lsls	r2, r3, #13
   4ca8a:	d407      	bmi.n	4ca9c <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   4ca8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   4ca90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   4ca94:	bf14      	ite	ne
   4ca96:	2002      	movne	r0, #2
   4ca98:	2001      	moveq	r0, #1
   4ca9a:	4770      	bx	lr
   4ca9c:	2001      	movs	r0, #1
}
   4ca9e:	4770      	bx	lr

0004caa0 <bt_le_adv_set_enable_legacy>:
{
   4caa0:	b570      	push	{r4, r5, r6, lr}
   4caa2:	4606      	mov	r6, r0
   4caa4:	b086      	sub	sp, #24
   4caa6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   4caa8:	f242 000a 	movw	r0, #8202	; 0x200a
   4caac:	2101      	movs	r1, #1
   4caae:	f7e1 f8cf 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   4cab2:	4604      	mov	r4, r0
   4cab4:	b1b0      	cbz	r0, 4cae4 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   4cab6:	3008      	adds	r0, #8
	if (enable) {
   4cab8:	b195      	cbz	r5, 4cae0 <bt_le_adv_set_enable_legacy+0x40>
   4caba:	2101      	movs	r1, #1
   4cabc:	f003 f8bc 	bl	4fc38 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   4cac0:	f106 0210 	add.w	r2, r6, #16
   4cac4:	a903      	add	r1, sp, #12
   4cac6:	4620      	mov	r0, r4
   4cac8:	9500      	str	r5, [sp, #0]
   4caca:	2306      	movs	r3, #6
   4cacc:	f7e1 f8ae 	bl	2dc2c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   4cad0:	2200      	movs	r2, #0
   4cad2:	4621      	mov	r1, r4
   4cad4:	f242 000a 	movw	r0, #8202	; 0x200a
   4cad8:	f7e1 f916 	bl	2dd08 <bt_hci_cmd_send_sync>
}
   4cadc:	b006      	add	sp, #24
   4cade:	bd70      	pop	{r4, r5, r6, pc}
   4cae0:	4629      	mov	r1, r5
   4cae2:	e7eb      	b.n	4cabc <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   4cae4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4cae8:	e7f8      	b.n	4cadc <bt_le_adv_set_enable_legacy+0x3c>

0004caea <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   4caea:	f7ff bfd9 	b.w	4caa0 <bt_le_adv_set_enable_legacy>

0004caee <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   4caee:	3018      	adds	r0, #24
   4caf0:	f004 b8a3 	b.w	50c3a <k_work_cancel_delayable>

0004caf4 <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   4caf4:	f7e2 ba6c 	b.w	2efd0 <bt_le_adv_stop>

0004caf8 <atomic_and>:
{
   4caf8:	b510      	push	{r4, lr}
   4cafa:	4603      	mov	r3, r0
}
   4cafc:	f3bf 8f5b 	dmb	ish
   4cb00:	e853 0f00 	ldrex	r0, [r3]
   4cb04:	ea00 0201 	and.w	r2, r0, r1
   4cb08:	e843 2400 	strex	r4, r2, [r3]
   4cb0c:	2c00      	cmp	r4, #0
   4cb0e:	d1f7      	bne.n	4cb00 <atomic_and+0x8>
   4cb10:	f3bf 8f5b 	dmb	ish
   4cb14:	bd10      	pop	{r4, pc}

0004cb16 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   4cb16:	f7e2 bb07 	b.w	2f128 <bt_le_scan_set_enable_legacy>

0004cb1a <atomic_and>:
{
   4cb1a:	b510      	push	{r4, lr}
   4cb1c:	4603      	mov	r3, r0
}
   4cb1e:	f3bf 8f5b 	dmb	ish
   4cb22:	e853 0f00 	ldrex	r0, [r3]
   4cb26:	ea00 0201 	and.w	r2, r0, r1
   4cb2a:	e843 2400 	strex	r4, r2, [r3]
   4cb2e:	2c00      	cmp	r4, #0
   4cb30:	d1f7      	bne.n	4cb22 <atomic_and+0x8>
   4cb32:	f3bf 8f5b 	dmb	ish
   4cb36:	bd10      	pop	{r4, pc}

0004cb38 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4cb38:	f3bf 8f5b 	dmb	ish
   4cb3c:	6800      	ldr	r0, [r0, #0]
   4cb3e:	f3bf 8f5b 	dmb	ish
}
   4cb42:	4770      	bx	lr

0004cb44 <atomic_or>:
{
   4cb44:	b510      	push	{r4, lr}
   4cb46:	4603      	mov	r3, r0
}
   4cb48:	f3bf 8f5b 	dmb	ish
   4cb4c:	e853 0f00 	ldrex	r0, [r3]
   4cb50:	ea40 0201 	orr.w	r2, r0, r1
   4cb54:	e843 2400 	strex	r4, r2, [r3]
   4cb58:	2c00      	cmp	r4, #0
   4cb5a:	d1f7      	bne.n	4cb4c <atomic_or+0x8>
   4cb5c:	f3bf 8f5b 	dmb	ish
   4cb60:	bd10      	pop	{r4, pc}

0004cb62 <tx_notify>:
{
   4cb62:	b570      	push	{r4, r5, r6, lr}
   4cb64:	4604      	mov	r4, r0
	__asm__ volatile(
   4cb66:	f04f 0220 	mov.w	r2, #32
   4cb6a:	f3ef 8311 	mrs	r3, BASEPRI
   4cb6e:	f382 8812 	msr	BASEPRI_MAX, r2
   4cb72:	f3bf 8f6f 	isb	sy
	return list->head;
   4cb76:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   4cb78:	b920      	cbnz	r0, 4cb84 <tx_notify+0x22>
	__asm__ volatile(
   4cb7a:	f383 8811 	msr	BASEPRI, r3
   4cb7e:	f3bf 8f6f 	isb	sy
}
   4cb82:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4cb84:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   4cb86:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   4cb88:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4cb8a:	4288      	cmp	r0, r1
	list->tail = node;
   4cb8c:	bf08      	it	eq
   4cb8e:	6262      	streq	r2, [r4, #36]	; 0x24
   4cb90:	f383 8811 	msr	BASEPRI, r3
   4cb94:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   4cb98:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   4cb9c:	f7e2 fe28 	bl	2f7f0 <tx_free>
		cb(conn, user_data);
   4cba0:	4631      	mov	r1, r6
   4cba2:	4620      	mov	r0, r4
   4cba4:	47a8      	blx	r5
	while (1) {
   4cba6:	e7de      	b.n	4cb66 <tx_notify+0x4>

0004cba8 <tx_complete_work>:
	tx_notify(conn);
   4cba8:	3828      	subs	r0, #40	; 0x28
   4cbaa:	f7ff bfda 	b.w	4cb62 <tx_notify>

0004cbae <bt_conn_reset_rx_state>:
{
   4cbae:	b510      	push	{r4, lr}
   4cbb0:	4604      	mov	r4, r0
	if (!conn->rx) {
   4cbb2:	6900      	ldr	r0, [r0, #16]
   4cbb4:	b118      	cbz	r0, 4cbbe <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   4cbb6:	f7f6 fec9 	bl	4394c <net_buf_unref>
	conn->rx = NULL;
   4cbba:	2300      	movs	r3, #0
   4cbbc:	6123      	str	r3, [r4, #16]
}
   4cbbe:	bd10      	pop	{r4, pc}

0004cbc0 <conn_cleanup>:
{
   4cbc0:	b570      	push	{r4, r5, r6, lr}
   4cbc2:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   4cbc4:	f100 0638 	add.w	r6, r0, #56	; 0x38
   4cbc8:	2200      	movs	r2, #0
   4cbca:	2300      	movs	r3, #0
   4cbcc:	4630      	mov	r0, r6
   4cbce:	f002 ffc1 	bl	4fb54 <net_buf_get>
   4cbd2:	4605      	mov	r5, r0
   4cbd4:	b950      	cbnz	r0, 4cbec <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   4cbd6:	4620      	mov	r0, r4
   4cbd8:	f7ff ffe9 	bl	4cbae <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   4cbdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   4cbe0:	2200      	movs	r2, #0
}
   4cbe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   4cbe6:	2300      	movs	r3, #0
   4cbe8:	f7fb bc62 	b.w	484b0 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   4cbec:	6968      	ldr	r0, [r5, #20]
   4cbee:	b108      	cbz	r0, 4cbf4 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   4cbf0:	f7e2 fdfe 	bl	2f7f0 <tx_free>
		net_buf_unref(buf);
   4cbf4:	4628      	mov	r0, r5
   4cbf6:	f7f6 fea9 	bl	4394c <net_buf_unref>
   4cbfa:	e7e5      	b.n	4cbc8 <conn_cleanup+0x8>

0004cbfc <bt_conn_recv>:
{
   4cbfc:	b570      	push	{r4, r5, r6, lr}
   4cbfe:	4616      	mov	r6, r2
   4cc00:	4604      	mov	r4, r0
   4cc02:	460d      	mov	r5, r1
	tx_notify(conn);
   4cc04:	f7ff ffad 	bl	4cb62 <tx_notify>
	switch (flags) {
   4cc08:	2e01      	cmp	r6, #1
   4cc0a:	d017      	beq.n	4cc3c <bt_conn_recv+0x40>
   4cc0c:	2e02      	cmp	r6, #2
   4cc0e:	d117      	bne.n	4cc40 <bt_conn_recv+0x44>
		if (conn->rx) {
   4cc10:	6923      	ldr	r3, [r4, #16]
   4cc12:	b113      	cbz	r3, 4cc1a <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   4cc14:	4620      	mov	r0, r4
   4cc16:	f7ff ffca 	bl	4cbae <bt_conn_reset_rx_state>
		conn->rx = buf;
   4cc1a:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   4cc1c:	6921      	ldr	r1, [r4, #16]
   4cc1e:	898a      	ldrh	r2, [r1, #12]
   4cc20:	2a01      	cmp	r2, #1
   4cc22:	d937      	bls.n	4cc94 <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   4cc24:	688b      	ldr	r3, [r1, #8]
   4cc26:	881b      	ldrh	r3, [r3, #0]
   4cc28:	3304      	adds	r3, #4
   4cc2a:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   4cc2c:	429a      	cmp	r2, r3
   4cc2e:	d331      	bcc.n	4cc94 <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   4cc30:	d928      	bls.n	4cc84 <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   4cc32:	4620      	mov	r0, r4
}
   4cc34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   4cc38:	f7ff bfb9 	b.w	4cbae <bt_conn_reset_rx_state>
		if (!conn->rx) {
   4cc3c:	6920      	ldr	r0, [r4, #16]
   4cc3e:	b918      	cbnz	r0, 4cc48 <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   4cc40:	4620      	mov	r0, r4
   4cc42:	f7ff ffb4 	bl	4cbae <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   4cc46:	e001      	b.n	4cc4c <bt_conn_recv+0x50>
		if (!buf->len) {
   4cc48:	89ae      	ldrh	r6, [r5, #12]
   4cc4a:	b926      	cbnz	r6, 4cc56 <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   4cc4c:	4628      	mov	r0, r5
}
   4cc4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   4cc52:	f7f6 be7b 	b.w	4394c <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   4cc56:	3008      	adds	r0, #8
   4cc58:	f003 f82c 	bl	4fcb4 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   4cc5c:	4286      	cmp	r6, r0
   4cc5e:	d907      	bls.n	4cc70 <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   4cc60:	6921      	ldr	r1, [r4, #16]
   4cc62:	2200      	movs	r2, #0
   4cc64:	4620      	mov	r0, r4
   4cc66:	f000 facf 	bl	4d208 <bt_l2cap_recv>
			conn->rx = NULL;
   4cc6a:	2300      	movs	r3, #0
   4cc6c:	6123      	str	r3, [r4, #16]
   4cc6e:	e7ed      	b.n	4cc4c <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   4cc70:	6920      	ldr	r0, [r4, #16]
   4cc72:	89aa      	ldrh	r2, [r5, #12]
   4cc74:	68a9      	ldr	r1, [r5, #8]
   4cc76:	3008      	adds	r0, #8
   4cc78:	f002 ffd5 	bl	4fc26 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   4cc7c:	4628      	mov	r0, r5
   4cc7e:	f7f6 fe65 	bl	4394c <net_buf_unref>
		break;
   4cc82:	e7cb      	b.n	4cc1c <bt_conn_recv+0x20>
	conn->rx = NULL;
   4cc84:	2300      	movs	r3, #0
   4cc86:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   4cc88:	4620      	mov	r0, r4
   4cc8a:	2201      	movs	r2, #1
}
   4cc8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   4cc90:	f000 baba 	b.w	4d208 <bt_l2cap_recv>
}
   4cc94:	bd70      	pop	{r4, r5, r6, pc}

0004cc96 <bt_conn_ref>:
{
   4cc96:	b510      	push	{r4, lr}
   4cc98:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   4cc9a:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
   4cc9e:	4610      	mov	r0, r2
   4cca0:	f7ff ff4a 	bl	4cb38 <atomic_get>
		if (!old) {
   4cca4:	b180      	cbz	r0, 4ccc8 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   4cca6:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   4ccaa:	1c41      	adds	r1, r0, #1
   4ccac:	e852 4f00 	ldrex	r4, [r2]
   4ccb0:	4284      	cmp	r4, r0
   4ccb2:	d104      	bne.n	4ccbe <bt_conn_ref+0x28>
   4ccb4:	e842 1c00 	strex	ip, r1, [r2]
   4ccb8:	f1bc 0f00 	cmp.w	ip, #0
   4ccbc:	d1f6      	bne.n	4ccac <bt_conn_ref+0x16>
   4ccbe:	f3bf 8f5b 	dmb	ish
   4ccc2:	d1ec      	bne.n	4cc9e <bt_conn_ref+0x8>
}
   4ccc4:	4618      	mov	r0, r3
   4ccc6:	bd10      	pop	{r4, pc}
			return NULL;
   4ccc8:	4603      	mov	r3, r0
   4ccca:	e7fb      	b.n	4ccc4 <bt_conn_ref+0x2e>

0004cccc <bt_conn_unref>:
{
   4cccc:	b508      	push	{r3, lr}
   4ccce:	4603      	mov	r3, r0
	old = atomic_dec(&conn->ref);
   4ccd0:	30bc      	adds	r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   4ccd2:	f3bf 8f5b 	dmb	ish
   4ccd6:	e850 2f00 	ldrex	r2, [r0]
   4ccda:	3a01      	subs	r2, #1
   4ccdc:	e840 2100 	strex	r1, r2, [r0]
   4cce0:	2900      	cmp	r1, #0
   4cce2:	d1f8      	bne.n	4ccd6 <bt_conn_unref+0xa>
   4cce4:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   4cce8:	789b      	ldrb	r3, [r3, #2]
   4ccea:	2b01      	cmp	r3, #1
   4ccec:	d106      	bne.n	4ccfc <bt_conn_unref+0x30>
	    atomic_get(&conn->ref) == 0) {
   4ccee:	f7ff ff23 	bl	4cb38 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   4ccf2:	b918      	cbnz	r0, 4ccfc <bt_conn_unref+0x30>
}
   4ccf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   4ccf8:	f7e2 b9c8 	b.w	2f08c <bt_le_adv_resume>
}
   4ccfc:	bd08      	pop	{r3, pc}

0004ccfe <conn_lookup_handle>:
{
   4ccfe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4cd02:	4607      	mov	r7, r0
   4cd04:	460e      	mov	r6, r1
   4cd06:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   4cd08:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   4cd0a:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   4cd0e:	42b4      	cmp	r4, r6
   4cd10:	d103      	bne.n	4cd1a <conn_lookup_handle+0x1c>
	return NULL;
   4cd12:	2300      	movs	r3, #0
}
   4cd14:	4618      	mov	r0, r3
   4cd16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   4cd1a:	fb09 7004 	mla	r0, r9, r4, r7
   4cd1e:	f7ff ffba 	bl	4cc96 <bt_conn_ref>
   4cd22:	4603      	mov	r3, r0
		if (!conn) {
   4cd24:	b158      	cbz	r0, 4cd3e <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   4cd26:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   4cd28:	2d01      	cmp	r5, #1
   4cd2a:	d002      	beq.n	4cd32 <conn_lookup_handle+0x34>
   4cd2c:	3d07      	subs	r5, #7
   4cd2e:	2d01      	cmp	r5, #1
   4cd30:	d803      	bhi.n	4cd3a <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   4cd32:	881a      	ldrh	r2, [r3, #0]
   4cd34:	4542      	cmp	r2, r8
   4cd36:	d0ed      	beq.n	4cd14 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   4cd38:	4618      	mov	r0, r3
   4cd3a:	f7ff ffc7 	bl	4cccc <bt_conn_unref>
	for (i = 0; i < size; i++) {
   4cd3e:	3401      	adds	r4, #1
   4cd40:	e7e5      	b.n	4cd0e <conn_lookup_handle+0x10>

0004cd42 <bt_conn_connected>:
{
   4cd42:	b510      	push	{r4, lr}
   4cd44:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   4cd46:	f7e3 fbef 	bl	30528 <bt_l2cap_connected>
	notify_connected(conn);
   4cd4a:	4620      	mov	r0, r4
}
   4cd4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   4cd50:	f7e2 bd58 	b.w	2f804 <notify_connected>

0004cd54 <bt_conn_le_start_encryption>:
{
   4cd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4cd58:	4682      	mov	sl, r0
   4cd5a:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   4cd5c:	f242 0019 	movw	r0, #8217	; 0x2019
   4cd60:	211c      	movs	r1, #28
{
   4cd62:	9e08      	ldr	r6, [sp, #32]
   4cd64:	4690      	mov	r8, r2
   4cd66:	461f      	mov	r7, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   4cd68:	f7e0 ff72 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   4cd6c:	4605      	mov	r5, r0
   4cd6e:	b340      	cbz	r0, 4cdc2 <bt_conn_le_start_encryption+0x6e>
	return net_buf_simple_add(&buf->b, len);
   4cd70:	211c      	movs	r1, #28
   4cd72:	3008      	adds	r0, #8
   4cd74:	f002 ff51 	bl	4fc1a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   4cd78:	f8ba 3000 	ldrh.w	r3, [sl]
   4cd7c:	4604      	mov	r4, r0
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   4cd7e:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   4cd80:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   4cd84:	4649      	mov	r1, r9
   4cd86:	f7fe ff67 	bl	4bc58 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   4cd8a:	2202      	movs	r2, #2
   4cd8c:	4641      	mov	r1, r8
   4cd8e:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   4cd92:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   4cd94:	f7fe ff60 	bl	4bc58 <memcpy>
	memcpy(cp->ltk, ltk, len);
   4cd98:	4632      	mov	r2, r6
   4cd9a:	4639      	mov	r1, r7
   4cd9c:	4620      	mov	r0, r4
   4cd9e:	f7fe ff5b 	bl	4bc58 <memcpy>
	if (len < sizeof(cp->ltk)) {
   4cda2:	2e0f      	cmp	r6, #15
   4cda4:	d805      	bhi.n	4cdb2 <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   4cda6:	f1c6 0210 	rsb	r2, r6, #16
   4cdaa:	2100      	movs	r1, #0
   4cdac:	19a0      	adds	r0, r4, r6
   4cdae:	f7fe ff5e 	bl	4bc6e <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   4cdb2:	4629      	mov	r1, r5
   4cdb4:	2200      	movs	r2, #0
}
   4cdb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   4cdba:	f242 0019 	movw	r0, #8217	; 0x2019
   4cdbe:	f7e0 bfa3 	b.w	2dd08 <bt_hci_cmd_send_sync>
}
   4cdc2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4cdc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004cdca <bt_conn_set_security>:
{
   4cdca:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   4cdcc:	7b43      	ldrb	r3, [r0, #13]
   4cdce:	2b07      	cmp	r3, #7
{
   4cdd0:	4604      	mov	r4, r0
   4cdd2:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   4cdd4:	d11e      	bne.n	4ce14 <bt_conn_set_security+0x4a>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   4cdd6:	7a43      	ldrb	r3, [r0, #9]
   4cdd8:	428b      	cmp	r3, r1
   4cdda:	d211      	bcs.n	4ce00 <bt_conn_set_security+0x36>
   4cddc:	7a83      	ldrb	r3, [r0, #10]
   4cdde:	428b      	cmp	r3, r1
   4cde0:	d20e      	bcs.n	4ce00 <bt_conn_set_security+0x36>
	if (val) {
   4cde2:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   4cde4:	f100 0004 	add.w	r0, r0, #4
   4cde8:	d50c      	bpl.n	4ce04 <bt_conn_set_security+0x3a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4cdea:	f44f 6100 	mov.w	r1, #2048	; 0x800
   4cdee:	f7ff fea9 	bl	4cb44 <atomic_or>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   4cdf2:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   4cdf6:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   4cdf8:	4620      	mov	r0, r4
   4cdfa:	f002 fbf0 	bl	4f5de <bt_smp_start_security>
	if (err) {
   4cdfe:	b930      	cbnz	r0, 4ce0e <bt_conn_set_security+0x44>
		return -ENOTCONN;
   4ce00:	2000      	movs	r0, #0
}
   4ce02:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4ce04:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   4ce08:	f7ff fe87 	bl	4cb1a <atomic_and>
   4ce0c:	e7f1      	b.n	4cdf2 <bt_conn_set_security+0x28>
		conn->required_sec_level = conn->sec_level;
   4ce0e:	7a63      	ldrb	r3, [r4, #9]
   4ce10:	72a3      	strb	r3, [r4, #10]
   4ce12:	e7f6      	b.n	4ce02 <bt_conn_set_security+0x38>
		return -ENOTCONN;
   4ce14:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4ce18:	e7f3      	b.n	4ce02 <bt_conn_set_security+0x38>

0004ce1a <bt_conn_get_security>:
}
   4ce1a:	7a40      	ldrb	r0, [r0, #9]
   4ce1c:	4770      	bx	lr

0004ce1e <bt_conn_is_peer_addr_le>:
{
   4ce1e:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   4ce20:	7a03      	ldrb	r3, [r0, #8]
   4ce22:	428b      	cmp	r3, r1
{
   4ce24:	4604      	mov	r4, r0
   4ce26:	4615      	mov	r5, r2
	if (id != conn->id) {
   4ce28:	d115      	bne.n	4ce56 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   4ce2a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   4ce2e:	2207      	movs	r2, #7
   4ce30:	4628      	mov	r0, r5
   4ce32:	f7fe ff01 	bl	4bc38 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   4ce36:	b180      	cbz	r0, 4ce5a <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   4ce38:	78e3      	ldrb	r3, [r4, #3]
   4ce3a:	2207      	movs	r2, #7
   4ce3c:	b943      	cbnz	r3, 4ce50 <bt_conn_is_peer_addr_le+0x32>
   4ce3e:	f104 0196 	add.w	r1, r4, #150	; 0x96
   4ce42:	4628      	mov	r0, r5
   4ce44:	f7fe fef8 	bl	4bc38 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   4ce48:	fab0 f080 	clz	r0, r0
   4ce4c:	0940      	lsrs	r0, r0, #5
}
   4ce4e:	bd38      	pop	{r3, r4, r5, pc}
   4ce50:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   4ce54:	e7f5      	b.n	4ce42 <bt_conn_is_peer_addr_le+0x24>
		return false;
   4ce56:	2000      	movs	r0, #0
   4ce58:	e7f9      	b.n	4ce4e <bt_conn_is_peer_addr_le+0x30>
		return true;
   4ce5a:	2001      	movs	r0, #1
   4ce5c:	e7f7      	b.n	4ce4e <bt_conn_is_peer_addr_le+0x30>

0004ce5e <bt_conn_exists_le>:
{
   4ce5e:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   4ce60:	f7e3 f83c 	bl	2fedc <bt_conn_lookup_addr_le>
	if (conn) {
   4ce64:	b110      	cbz	r0, 4ce6c <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   4ce66:	f7ff ff31 	bl	4cccc <bt_conn_unref>
		return true;
   4ce6a:	2001      	movs	r0, #1
}
   4ce6c:	bd08      	pop	{r3, pc}

0004ce6e <bt_conn_get_dst>:
}
   4ce6e:	3088      	adds	r0, #136	; 0x88
   4ce70:	4770      	bx	lr

0004ce72 <bt_conn_le_phy_update>:
{
   4ce72:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4ce74:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   4ce76:	3004      	adds	r0, #4
   4ce78:	f7ff fe5e 	bl	4cb38 <atomic_get>
   4ce7c:	460b      	mov	r3, r1
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   4ce7e:	04c1      	lsls	r1, r0, #19
   4ce80:	d51a      	bpl.n	4ceb8 <bt_conn_le_phy_update+0x46>
	if ((param->options & BT_CONN_LE_PHY_OPT_CODED_S2) &&
   4ce82:	881c      	ldrh	r4, [r3, #0]
   4ce84:	f004 0203 	and.w	r2, r4, #3
   4ce88:	2a03      	cmp	r2, #3
   4ce8a:	d011      	beq.n	4ceb0 <bt_conn_le_phy_update+0x3e>
	} else if (param->options & BT_CONN_LE_PHY_OPT_CODED_S2) {
   4ce8c:	07e2      	lsls	r2, r4, #31
   4ce8e:	d411      	bmi.n	4ceb4 <bt_conn_le_phy_update+0x42>
	} else if (param->options & BT_CONN_LE_PHY_OPT_CODED_S8) {
   4ce90:	f004 0402 	and.w	r4, r4, #2
	if (param->pref_tx_phy == BT_GAP_LE_PHY_NONE) {
   4ce94:	789a      	ldrb	r2, [r3, #2]
	if (param->pref_rx_phy == BT_GAP_LE_PHY_NONE) {
   4ce96:	78db      	ldrb	r3, [r3, #3]
	if (param->pref_tx_phy == BT_GAP_LE_PHY_NONE) {
   4ce98:	fab2 f182 	clz	r1, r2
   4ce9c:	0949      	lsrs	r1, r1, #5
	if (param->pref_rx_phy == BT_GAP_LE_PHY_NONE) {
   4ce9e:	b90b      	cbnz	r3, 4cea4 <bt_conn_le_phy_update+0x32>
		all_phys |= BT_HCI_LE_PHY_RX_ANY;
   4cea0:	f041 0102 	orr.w	r1, r1, #2
	return bt_le_set_phy(conn, all_phys, param->pref_tx_phy,
   4cea4:	9400      	str	r4, [sp, #0]
   4cea6:	4628      	mov	r0, r5
   4cea8:	f7ff fa69 	bl	4c37e <bt_le_set_phy>
}
   4ceac:	b003      	add	sp, #12
   4ceae:	bd30      	pop	{r4, r5, pc}
		phy_opts = BT_HCI_LE_PHY_CODED_ANY;
   4ceb0:	2400      	movs	r4, #0
   4ceb2:	e7ef      	b.n	4ce94 <bt_conn_le_phy_update+0x22>
		phy_opts = BT_HCI_LE_PHY_CODED_S2;
   4ceb4:	2401      	movs	r4, #1
   4ceb6:	e7ed      	b.n	4ce94 <bt_conn_le_phy_update+0x22>
		return -EAGAIN;
   4ceb8:	f06f 000a 	mvn.w	r0, #10
   4cebc:	e7f6      	b.n	4ceac <bt_conn_le_phy_update+0x3a>

0004cebe <bt_conn_disconnect>:
{
   4cebe:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4cec0:	7883      	ldrb	r3, [r0, #2]
   4cec2:	2b01      	cmp	r3, #1
{
   4cec4:	4604      	mov	r4, r0
   4cec6:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4cec8:	d103      	bne.n	4ced2 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   4ceca:	2100      	movs	r1, #0
   4cecc:	3088      	adds	r0, #136	; 0x88
   4cece:	f7e3 f92f 	bl	30130 <bt_le_set_auto_conn>
	switch (conn->state) {
   4ced2:	7b63      	ldrb	r3, [r4, #13]
   4ced4:	3b02      	subs	r3, #2
   4ced6:	2b06      	cmp	r3, #6
   4ced8:	d825      	bhi.n	4cf26 <bt_conn_disconnect+0x68>
   4ceda:	e8df f003 	tbb	[pc, r3]
   4cede:	2404      	.short	0x2404
   4cee0:	160e2424 	.word	0x160e2424
   4cee4:	0c          	.byte	0x0c
   4cee5:	00          	.byte	0x00
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   4cee6:	4620      	mov	r0, r4
		conn->err = reason;
   4cee8:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   4ceea:	2100      	movs	r1, #0
   4ceec:	f7e2 fdf2 	bl	2fad4 <bt_conn_set_state>
			bt_le_scan_update(false);
   4cef0:	2000      	movs	r0, #0
   4cef2:	f7e2 f9a1 	bl	2f238 <bt_le_scan_update>
{
   4cef6:	2000      	movs	r0, #0
}
   4cef8:	bd38      	pop	{r3, r4, r5, pc}
			k_work_cancel_delayable(&conn->deferred_work);
   4cefa:	f104 0058 	add.w	r0, r4, #88	; 0x58
   4cefe:	f003 fe9c 	bl	50c3a <k_work_cancel_delayable>
}
   4cf02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   4cf06:	f7e0 bfcd 	b.w	2dea4 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   4cf0a:	8820      	ldrh	r0, [r4, #0]
   4cf0c:	4629      	mov	r1, r5
   4cf0e:	f7ff f9fe 	bl	4c30e <bt_hci_disconnect>
	if (err) {
   4cf12:	2800      	cmp	r0, #0
   4cf14:	d1f0      	bne.n	4cef8 <bt_conn_disconnect+0x3a>
	if (conn->state == BT_CONN_CONNECTED) {
   4cf16:	7b63      	ldrb	r3, [r4, #13]
   4cf18:	2b07      	cmp	r3, #7
   4cf1a:	d1ec      	bne.n	4cef6 <bt_conn_disconnect+0x38>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   4cf1c:	2108      	movs	r1, #8
   4cf1e:	4620      	mov	r0, r4
   4cf20:	f7e2 fdd8 	bl	2fad4 <bt_conn_set_state>
   4cf24:	e7e7      	b.n	4cef6 <bt_conn_disconnect+0x38>
		return -ENOTCONN;
   4cf26:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4cf2a:	e7e5      	b.n	4cef8 <bt_conn_disconnect+0x3a>

0004cf2c <bt_conn_le_conn_update>:
{
   4cf2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4cf2e:	4607      	mov	r7, r0
   4cf30:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   4cf32:	f242 0013 	movw	r0, #8211	; 0x2013
   4cf36:	210e      	movs	r1, #14
   4cf38:	f7e0 fe8a 	bl	2dc50 <bt_hci_cmd_create>
	if (!buf) {
   4cf3c:	4606      	mov	r6, r0
   4cf3e:	b1d0      	cbz	r0, 4cf76 <bt_conn_le_conn_update+0x4a>
   4cf40:	210e      	movs	r1, #14
   4cf42:	3008      	adds	r0, #8
   4cf44:	f002 fe69 	bl	4fc1a <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   4cf48:	220e      	movs	r2, #14
   4cf4a:	4604      	mov	r4, r0
   4cf4c:	2100      	movs	r1, #0
   4cf4e:	f7fe fe8e 	bl	4bc6e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   4cf52:	883b      	ldrh	r3, [r7, #0]
   4cf54:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   4cf56:	882b      	ldrh	r3, [r5, #0]
   4cf58:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   4cf5a:	886b      	ldrh	r3, [r5, #2]
   4cf5c:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   4cf5e:	88ab      	ldrh	r3, [r5, #4]
   4cf60:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   4cf62:	88eb      	ldrh	r3, [r5, #6]
   4cf64:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   4cf66:	4631      	mov	r1, r6
   4cf68:	2200      	movs	r2, #0
}
   4cf6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   4cf6e:	f242 0013 	movw	r0, #8211	; 0x2013
   4cf72:	f7e0 bec9 	b.w	2dd08 <bt_hci_cmd_send_sync>
}
   4cf76:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4cf7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004cf7c <l2cap_connected>:
}
   4cf7c:	4770      	bx	lr

0004cf7e <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   4cf7e:	3010      	adds	r0, #16
   4cf80:	f003 be5b 	b.w	50c3a <k_work_cancel_delayable>

0004cf84 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   4cf84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4cf86:	4607      	mov	r7, r0
   4cf88:	460e      	mov	r6, r1
   4cf8a:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   4cf8c:	2300      	movs	r3, #0
   4cf8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   4cf92:	2104      	movs	r1, #4
   4cf94:	2000      	movs	r0, #0
   4cf96:	f7e2 fe79 	bl	2fc8c <bt_conn_create_pdu_timeout>
	if (!buf) {
   4cf9a:	4604      	mov	r4, r0
   4cf9c:	b130      	cbz	r0, 4cfac <l2cap_create_le_sig_pdu.constprop.0+0x28>
   4cf9e:	2104      	movs	r1, #4
   4cfa0:	3008      	adds	r0, #8
   4cfa2:	f002 fe3a 	bl	4fc1a <net_buf_simple_add>
	hdr->code = code;
   4cfa6:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   4cfa8:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   4cfaa:	8045      	strh	r5, [r0, #2]
}
   4cfac:	4620      	mov	r0, r4
   4cfae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004cfb0 <bt_l2cap_chan_remove>:
	return list->head;
   4cfb0:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   4cfb2:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4cfb4:	b173      	cbz	r3, 4cfd4 <bt_l2cap_chan_remove+0x24>
   4cfb6:	3b08      	subs	r3, #8
   4cfb8:	2500      	movs	r5, #0
	return node->next;
   4cfba:	461a      	mov	r2, r3
		if (chan == ch) {
   4cfbc:	428b      	cmp	r3, r1
   4cfbe:	f852 4f08 	ldr.w	r4, [r2, #8]!
   4cfc2:	d10d      	bne.n	4cfe0 <bt_l2cap_chan_remove+0x30>
	return list->tail;
   4cfc4:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   4cfc6:	b935      	cbnz	r5, 4cfd6 <bt_l2cap_chan_remove+0x26>
   4cfc8:	428a      	cmp	r2, r1
	list->head = node;
   4cfca:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   4cfcc:	d100      	bne.n	4cfd0 <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   4cfce:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   4cfd0:	2200      	movs	r2, #0
   4cfd2:	609a      	str	r2, [r3, #8]
}
   4cfd4:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   4cfd6:	428a      	cmp	r2, r1
	parent->next = child;
   4cfd8:	602c      	str	r4, [r5, #0]
	list->tail = node;
   4cfda:	bf08      	it	eq
   4cfdc:	6545      	streq	r5, [r0, #84]	; 0x54
}
   4cfde:	e7f7      	b.n	4cfd0 <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4cfe0:	2c00      	cmp	r4, #0
   4cfe2:	d0f7      	beq.n	4cfd4 <bt_l2cap_chan_remove+0x24>
   4cfe4:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   4cfe8:	4615      	mov	r5, r2
   4cfea:	e7e6      	b.n	4cfba <bt_l2cap_chan_remove+0xa>

0004cfec <bt_l2cap_chan_del>:
{
   4cfec:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   4cfee:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   4cff2:	4604      	mov	r4, r0
	if (!chan->conn) {
   4cff4:	b123      	cbz	r3, 4d000 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   4cff6:	686b      	ldr	r3, [r5, #4]
   4cff8:	b103      	cbz	r3, 4cffc <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   4cffa:	4798      	blx	r3
	chan->conn = NULL;
   4cffc:	2300      	movs	r3, #0
   4cffe:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   4d000:	68e3      	ldr	r3, [r4, #12]
   4d002:	b10b      	cbz	r3, 4d008 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   4d004:	4620      	mov	r0, r4
   4d006:	4798      	blx	r3
	if (ops->released) {
   4d008:	69eb      	ldr	r3, [r5, #28]
   4d00a:	b11b      	cbz	r3, 4d014 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   4d00c:	4620      	mov	r0, r4
}
   4d00e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   4d012:	4718      	bx	r3
}
   4d014:	bd70      	pop	{r4, r5, r6, pc}

0004d016 <l2cap_rtx_timeout>:
{
   4d016:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   4d018:	f1a0 0410 	sub.w	r4, r0, #16
   4d01c:	4621      	mov	r1, r4
   4d01e:	f850 0c10 	ldr.w	r0, [r0, #-16]
   4d022:	f7ff ffc5 	bl	4cfb0 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   4d026:	4620      	mov	r0, r4
}
   4d028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
   4d02c:	f7ff bfde 	b.w	4cfec <bt_l2cap_chan_del>

0004d030 <bt_l2cap_disconnected>:
	return list->head;
   4d030:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   4d032:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d034:	b130      	cbz	r0, 4d044 <bt_l2cap_disconnected+0x14>
	return node->next;
   4d036:	f850 4908 	ldr.w	r4, [r0], #-8
   4d03a:	b104      	cbz	r4, 4d03e <bt_l2cap_disconnected+0xe>
   4d03c:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   4d03e:	f7ff ffd5 	bl	4cfec <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d042:	b904      	cbnz	r4, 4d046 <bt_l2cap_disconnected+0x16>
}
   4d044:	bd38      	pop	{r3, r4, r5, pc}
   4d046:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d048:	b12d      	cbz	r5, 4d056 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   4d04a:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d04c:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   4d04e:	f7ff ffcd 	bl	4cfec <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d052:	462c      	mov	r4, r5
   4d054:	e7f7      	b.n	4d046 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   4d056:	4620      	mov	r0, r4
}
   4d058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   4d05c:	f7ff bfc6 	b.w	4cfec <bt_l2cap_chan_del>

0004d060 <bt_l2cap_security_changed>:
{
   4d060:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   4d062:	6d03      	ldr	r3, [r0, #80]	; 0x50
   4d064:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d066:	b1bb      	cbz	r3, 4d098 <bt_l2cap_security_changed+0x38>
   4d068:	4618      	mov	r0, r3
	return node->next;
   4d06a:	f850 4908 	ldr.w	r4, [r0], #-8
   4d06e:	b104      	cbz	r4, 4d072 <bt_l2cap_security_changed+0x12>
   4d070:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   4d072:	f853 3c04 	ldr.w	r3, [r3, #-4]
   4d076:	689b      	ldr	r3, [r3, #8]
   4d078:	b10b      	cbz	r3, 4d07e <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   4d07a:	4629      	mov	r1, r5
   4d07c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d07e:	b15c      	cbz	r4, 4d098 <bt_l2cap_security_changed+0x38>
   4d080:	4620      	mov	r0, r4
   4d082:	68a4      	ldr	r4, [r4, #8]
   4d084:	6843      	ldr	r3, [r0, #4]
   4d086:	b124      	cbz	r4, 4d092 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   4d088:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d08a:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   4d08c:	2b00      	cmp	r3, #0
   4d08e:	d1f4      	bne.n	4d07a <bt_l2cap_security_changed+0x1a>
   4d090:	e7f6      	b.n	4d080 <bt_l2cap_security_changed+0x20>
   4d092:	689b      	ldr	r3, [r3, #8]
   4d094:	2b00      	cmp	r3, #0
   4d096:	d1f0      	bne.n	4d07a <bt_l2cap_security_changed+0x1a>
}
   4d098:	bd38      	pop	{r3, r4, r5, pc}

0004d09a <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   4d09a:	3104      	adds	r1, #4
   4d09c:	f7e2 bdf6 	b.w	2fc8c <bt_conn_create_pdu_timeout>

0004d0a0 <bt_l2cap_send_cb>:
{
   4d0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4d0a4:	4614      	mov	r4, r2
   4d0a6:	4605      	mov	r5, r0
   4d0a8:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   4d0aa:	f102 0008 	add.w	r0, r2, #8
   4d0ae:	2104      	movs	r1, #4
   4d0b0:	461e      	mov	r6, r3
   4d0b2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   4d0b6:	f002 fdd1 	bl	4fc5c <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   4d0ba:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   4d0bc:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   4d0be:	3a04      	subs	r2, #4
   4d0c0:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   4d0c2:	4643      	mov	r3, r8
   4d0c4:	4632      	mov	r2, r6
   4d0c6:	4621      	mov	r1, r4
   4d0c8:	4628      	mov	r0, r5
}
   4d0ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   4d0ce:	f7e2 bc87 	b.w	2f9e0 <bt_conn_send_cb>

0004d0d2 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   4d0d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4d0d4:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   4d0d6:	2202      	movs	r2, #2
   4d0d8:	2001      	movs	r0, #1
   4d0da:	f7ff ff53 	bl	4cf84 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   4d0de:	4604      	mov	r4, r0
   4d0e0:	b198      	cbz	r0, 4d10a <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   4d0e2:	2102      	movs	r1, #2
   4d0e4:	3008      	adds	r0, #8
   4d0e6:	f002 fd98 	bl	4fc1a <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   4d0ea:	2300      	movs	r3, #0
   4d0ec:	7003      	strb	r3, [r0, #0]
   4d0ee:	7043      	strb	r3, [r0, #1]
   4d0f0:	4622      	mov	r2, r4
   4d0f2:	9300      	str	r3, [sp, #0]
   4d0f4:	2105      	movs	r1, #5
   4d0f6:	4628      	mov	r0, r5
   4d0f8:	f7ff ffd2 	bl	4d0a0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   4d0fc:	b128      	cbz	r0, 4d10a <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   4d0fe:	4620      	mov	r0, r4
}
   4d100:	b003      	add	sp, #12
   4d102:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   4d106:	f7f6 bc21 	b.w	4394c <net_buf_unref>
}
   4d10a:	b003      	add	sp, #12
   4d10c:	bd30      	pop	{r4, r5, pc}

0004d10e <l2cap_recv>:
{
   4d10e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   4d110:	898b      	ldrh	r3, [r1, #12]
   4d112:	2b03      	cmp	r3, #3
{
   4d114:	b085      	sub	sp, #20
   4d116:	4605      	mov	r5, r0
   4d118:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   4d11a:	d911      	bls.n	4d140 <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   4d11c:	2104      	movs	r1, #4
   4d11e:	f104 0008 	add.w	r0, r4, #8
   4d122:	f002 fdab 	bl	4fc7c <net_buf_simple_pull_mem>
	if (buf->len != len) {
   4d126:	89a3      	ldrh	r3, [r4, #12]
   4d128:	8846      	ldrh	r6, [r0, #2]
   4d12a:	429e      	cmp	r6, r3
   4d12c:	d108      	bne.n	4d140 <l2cap_recv+0x32>
	if (!hdr->ident) {
   4d12e:	7841      	ldrb	r1, [r0, #1]
   4d130:	b131      	cbz	r1, 4d140 <l2cap_recv+0x32>
	switch (hdr->code) {
   4d132:	7803      	ldrb	r3, [r0, #0]
   4d134:	2b12      	cmp	r3, #18
   4d136:	d006      	beq.n	4d146 <l2cap_recv+0x38>
   4d138:	2b13      	cmp	r3, #19
   4d13a:	d001      	beq.n	4d140 <l2cap_recv+0x32>
   4d13c:	2b01      	cmp	r3, #1
   4d13e:	d14b      	bne.n	4d1d8 <l2cap_recv+0xca>
}
   4d140:	2000      	movs	r0, #0
   4d142:	b005      	add	sp, #20
   4d144:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < sizeof(*req)) {
   4d146:	2e07      	cmp	r6, #7
   4d148:	682d      	ldr	r5, [r5, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   4d14a:	68a2      	ldr	r2, [r4, #8]
	if (buf->len < sizeof(*req)) {
   4d14c:	d9f8      	bls.n	4d140 <l2cap_recv+0x32>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   4d14e:	78ef      	ldrb	r7, [r5, #3]
   4d150:	b11f      	cbz	r7, 4d15a <l2cap_recv+0x4c>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   4d152:	4628      	mov	r0, r5
		l2cap_send_reject(chan->conn, hdr->ident,
   4d154:	f7ff ffbd 	bl	4d0d2 <l2cap_send_reject.constprop.0>
		break;
   4d158:	e7f2      	b.n	4d140 <l2cap_recv+0x32>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   4d15a:	7850      	ldrb	r0, [r2, #1]
   4d15c:	7813      	ldrb	r3, [r2, #0]
   4d15e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   4d162:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   4d166:	78d0      	ldrb	r0, [r2, #3]
   4d168:	7893      	ldrb	r3, [r2, #2]
   4d16a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   4d16e:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   4d172:	7950      	ldrb	r0, [r2, #5]
   4d174:	7913      	ldrb	r3, [r2, #4]
   4d176:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   4d17a:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   4d17e:	7993      	ldrb	r3, [r2, #6]
   4d180:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   4d182:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   4d184:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   4d188:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   4d18a:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   4d18e:	f7ff fef9 	bl	4cf84 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   4d192:	4604      	mov	r4, r0
   4d194:	2800      	cmp	r0, #0
   4d196:	d0d3      	beq.n	4d140 <l2cap_recv+0x32>
	accepted = le_param_req(conn, &param);
   4d198:	a902      	add	r1, sp, #8
   4d19a:	4628      	mov	r0, r5
   4d19c:	f7e2 fdec 	bl	2fd78 <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   4d1a0:	2102      	movs	r1, #2
   4d1a2:	4606      	mov	r6, r0
   4d1a4:	f104 0008 	add.w	r0, r4, #8
   4d1a8:	f002 fd37 	bl	4fc1a <net_buf_simple_add>
	if (accepted) {
   4d1ac:	f086 0301 	eor.w	r3, r6, #1
   4d1b0:	b2db      	uxtb	r3, r3
   4d1b2:	8003      	strh	r3, [r0, #0]
   4d1b4:	4622      	mov	r2, r4
   4d1b6:	9700      	str	r7, [sp, #0]
   4d1b8:	463b      	mov	r3, r7
   4d1ba:	2105      	movs	r1, #5
   4d1bc:	4628      	mov	r0, r5
   4d1be:	f7ff ff6f 	bl	4d0a0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   4d1c2:	b110      	cbz	r0, 4d1ca <l2cap_recv+0xbc>
		net_buf_unref(buf);
   4d1c4:	4620      	mov	r0, r4
   4d1c6:	f7f6 fbc1 	bl	4394c <net_buf_unref>
	if (accepted) {
   4d1ca:	2e00      	cmp	r6, #0
   4d1cc:	d0b8      	beq.n	4d140 <l2cap_recv+0x32>
		bt_conn_le_conn_update(conn, &param);
   4d1ce:	a902      	add	r1, sp, #8
   4d1d0:	4628      	mov	r0, r5
   4d1d2:	f7ff feab 	bl	4cf2c <bt_conn_le_conn_update>
   4d1d6:	e7b3      	b.n	4d140 <l2cap_recv+0x32>
		l2cap_send_reject(chan->conn, hdr->ident,
   4d1d8:	6828      	ldr	r0, [r5, #0]
   4d1da:	e7bb      	b.n	4d154 <l2cap_recv+0x46>

0004d1dc <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   4d1dc:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4d1de:	b138      	cbz	r0, 4d1f0 <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   4d1e0:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   4d1e4:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4d1e6:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   4d1ea:	d001      	beq.n	4d1f0 <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   4d1ec:	6880      	ldr	r0, [r0, #8]
   4d1ee:	e7f6      	b.n	4d1de <bt_l2cap_le_lookup_tx_cid+0x2>
}
   4d1f0:	4770      	bx	lr

0004d1f2 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   4d1f2:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4d1f4:	b138      	cbz	r0, 4d206 <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   4d1f6:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   4d1fa:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4d1fc:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   4d200:	d001      	beq.n	4d206 <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   4d202:	6880      	ldr	r0, [r0, #8]
   4d204:	e7f6      	b.n	4d1f4 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   4d206:	4770      	bx	lr

0004d208 <bt_l2cap_recv>:
{
   4d208:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   4d20a:	898b      	ldrh	r3, [r1, #12]
   4d20c:	2b03      	cmp	r3, #3
{
   4d20e:	4605      	mov	r5, r0
   4d210:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   4d212:	d804      	bhi.n	4d21e <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   4d214:	4620      	mov	r0, r4
}
   4d216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   4d21a:	f7f6 bb97 	b.w	4394c <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   4d21e:	2104      	movs	r1, #4
   4d220:	f104 0008 	add.w	r0, r4, #8
   4d224:	f002 fd2a 	bl	4fc7c <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   4d228:	8841      	ldrh	r1, [r0, #2]
   4d22a:	4628      	mov	r0, r5
   4d22c:	f7ff ffe1 	bl	4d1f2 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   4d230:	2800      	cmp	r0, #0
   4d232:	d0ef      	beq.n	4d214 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   4d234:	6843      	ldr	r3, [r0, #4]
   4d236:	4621      	mov	r1, r4
   4d238:	691b      	ldr	r3, [r3, #16]
   4d23a:	4798      	blx	r3
   4d23c:	e7ea      	b.n	4d214 <bt_l2cap_recv+0xc>

0004d23e <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   4d23e:	4770      	bx	lr

0004d240 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   4d240:	4603      	mov	r3, r0
	return list->head;
   4d242:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   4d244:	b128      	cbz	r0, 4d252 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4d246:	6859      	ldr	r1, [r3, #4]
	return node->next;
   4d248:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   4d24a:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4d24c:	4288      	cmp	r0, r1
	list->tail = node;
   4d24e:	bf08      	it	eq
   4d250:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   4d252:	4770      	bx	lr

0004d254 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   4d254:	4603      	mov	r3, r0
	size_t bytes = 0;
   4d256:	2000      	movs	r0, #0

	while (buf) {
   4d258:	b903      	cbnz	r3, 4d25c <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   4d25a:	4770      	bx	lr
		bytes += buf->len;
   4d25c:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   4d25e:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   4d260:	4410      	add	r0, r2
		buf = buf->frags;
   4d262:	e7f9      	b.n	4d258 <net_buf_frags_len+0x4>

0004d264 <att_sent>:
	if (chan->ops->sent) {
   4d264:	684b      	ldr	r3, [r1, #4]
   4d266:	695b      	ldr	r3, [r3, #20]
{
   4d268:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   4d26a:	b103      	cbz	r3, 4d26e <att_sent+0xa>
		chan->ops->sent(chan);
   4d26c:	4718      	bx	r3
}
   4d26e:	4770      	bx	lr

0004d270 <attr_read_type_cb>:
{
   4d270:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   4d272:	68d4      	ldr	r4, [r2, #12]
   4d274:	7823      	ldrb	r3, [r4, #0]
   4d276:	3102      	adds	r1, #2
   4d278:	b913      	cbnz	r3, 4d280 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   4d27a:	7021      	strb	r1, [r4, #0]
	return true;
   4d27c:	2001      	movs	r0, #1
}
   4d27e:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   4d280:	428b      	cmp	r3, r1
   4d282:	d0fb      	beq.n	4d27c <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   4d284:	8983      	ldrh	r3, [r0, #12]
   4d286:	3b02      	subs	r3, #2
   4d288:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   4d28a:	2000      	movs	r0, #0
   4d28c:	6110      	str	r0, [r2, #16]
		return false;
   4d28e:	e7f6      	b.n	4d27e <attr_read_type_cb+0xe>

0004d290 <att_prepare_write_req>:
}
   4d290:	2006      	movs	r0, #6
   4d292:	4770      	bx	lr

0004d294 <att_get>:
{
   4d294:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   4d296:	7b43      	ldrb	r3, [r0, #13]
   4d298:	2b07      	cmp	r3, #7
   4d29a:	d001      	beq.n	4d2a0 <att_get+0xc>
		return NULL;
   4d29c:	2000      	movs	r0, #0
}
   4d29e:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   4d2a0:	2104      	movs	r1, #4
   4d2a2:	f7ff ffa6 	bl	4d1f2 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   4d2a6:	2800      	cmp	r0, #0
   4d2a8:	d0f8      	beq.n	4d29c <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4d2aa:	f3bf 8f5b 	dmb	ish
   4d2ae:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   4d2b2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   4d2b6:	075b      	lsls	r3, r3, #29
   4d2b8:	d4f0      	bmi.n	4d29c <att_get+0x8>
	return att_chan->att;
   4d2ba:	f850 0c08 	ldr.w	r0, [r0, #-8]
   4d2be:	e7ee      	b.n	4d29e <att_get+0xa>

0004d2c0 <att_notify_mult>:
{
   4d2c0:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   4d2c2:	6803      	ldr	r3, [r0, #0]
   4d2c4:	898a      	ldrh	r2, [r1, #12]
   4d2c6:	6818      	ldr	r0, [r3, #0]
   4d2c8:	6889      	ldr	r1, [r1, #8]
   4d2ca:	f001 fca0 	bl	4ec0e <bt_gatt_mult_notification>
}
   4d2ce:	2000      	movs	r0, #0
   4d2d0:	bd08      	pop	{r3, pc}

0004d2d2 <att_notify>:
{
   4d2d2:	b538      	push	{r3, r4, r5, lr}
   4d2d4:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   4d2d6:	f101 0008 	add.w	r0, r1, #8
   4d2da:	460c      	mov	r4, r1
   4d2dc:	f002 fcde 	bl	4fc9c <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   4d2e0:	682d      	ldr	r5, [r5, #0]
   4d2e2:	89a3      	ldrh	r3, [r4, #12]
   4d2e4:	68a2      	ldr	r2, [r4, #8]
   4d2e6:	4601      	mov	r1, r0
   4d2e8:	6828      	ldr	r0, [r5, #0]
   4d2ea:	f001 fc61 	bl	4ebb0 <bt_gatt_notification>
}
   4d2ee:	2000      	movs	r0, #0
   4d2f0:	bd38      	pop	{r3, r4, r5, pc}

0004d2f2 <att_chan_mtu_updated>:
{
   4d2f2:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   4d2f4:	6805      	ldr	r5, [r0, #0]
	return list->head;
   4d2f6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4d2f8:	b382      	cbz	r2, 4d35c <att_chan_mtu_updated+0x6a>
	return node->next;
   4d2fa:	6813      	ldr	r3, [r2, #0]
   4d2fc:	b10b      	cbz	r3, 4d302 <att_chan_mtu_updated+0x10>
   4d2fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   4d302:	f5a2 74a2 	sub.w	r4, r2, #324	; 0x144
   4d306:	2200      	movs	r2, #0
   4d308:	4611      	mov	r1, r2
   4d30a:	e001      	b.n	4d310 <att_chan_mtu_updated+0x1e>
   4d30c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (chan == updated_chan) {
   4d310:	4284      	cmp	r4, r0
   4d312:	d009      	beq.n	4d328 <att_chan_mtu_updated+0x36>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   4d314:	f8b4 608a 	ldrh.w	r6, [r4, #138]	; 0x8a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   4d318:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   4d31c:	42b1      	cmp	r1, r6
   4d31e:	bf38      	it	cc
   4d320:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   4d322:	42a2      	cmp	r2, r4
   4d324:	bf38      	it	cc
   4d326:	4622      	movcc	r2, r4
   4d328:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4d32a:	b12b      	cbz	r3, 4d338 <att_chan_mtu_updated+0x46>
   4d32c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   4d330:	2b00      	cmp	r3, #0
   4d332:	d1eb      	bne.n	4d30c <att_chan_mtu_updated+0x1a>
		if (chan == updated_chan) {
   4d334:	4284      	cmp	r4, r0
   4d336:	d1ed      	bne.n	4d314 <att_chan_mtu_updated+0x22>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   4d338:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   4d33c:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   4d340:	428b      	cmp	r3, r1
   4d342:	d801      	bhi.n	4d348 <att_chan_mtu_updated+0x56>
   4d344:	4290      	cmp	r0, r2
   4d346:	d90b      	bls.n	4d360 <att_chan_mtu_updated+0x6e>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   4d348:	4282      	cmp	r2, r0
   4d34a:	bf38      	it	cc
   4d34c:	4602      	movcc	r2, r0
   4d34e:	4299      	cmp	r1, r3
   4d350:	6828      	ldr	r0, [r5, #0]
   4d352:	bf38      	it	cc
   4d354:	4619      	movcc	r1, r3
}
   4d356:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   4d358:	f7e5 b9b2 	b.w	326c0 <bt_gatt_att_max_mtu_changed>
   4d35c:	4611      	mov	r1, r2
   4d35e:	e7eb      	b.n	4d338 <att_chan_mtu_updated+0x46>
}
   4d360:	bc70      	pop	{r4, r5, r6}
   4d362:	4770      	bx	lr

0004d364 <write_cb>:
{
   4d364:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4d366:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   4d368:	4601      	mov	r1, r0
{
   4d36a:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   4d36c:	222a      	movs	r2, #42	; 0x2a
   4d36e:	6820      	ldr	r0, [r4, #0]
   4d370:	f001 f900 	bl	4e574 <bt_gatt_check_perm>
   4d374:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   4d376:	bb00      	cbnz	r0, 4d3ba <write_cb+0x56>
	if (!data->req) {
   4d378:	7a23      	ldrb	r3, [r4, #8]
   4d37a:	b1b3      	cbz	r3, 4d3aa <write_cb+0x46>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   4d37c:	f1a3 0218 	sub.w	r2, r3, #24
   4d380:	4253      	negs	r3, r2
   4d382:	4153      	adcs	r3, r2
   4d384:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   4d386:	9301      	str	r3, [sp, #4]
   4d388:	8a63      	ldrh	r3, [r4, #18]
   4d38a:	9300      	str	r3, [sp, #0]
   4d38c:	68ae      	ldr	r6, [r5, #8]
   4d38e:	8a23      	ldrh	r3, [r4, #16]
   4d390:	68e2      	ldr	r2, [r4, #12]
   4d392:	6820      	ldr	r0, [r4, #0]
   4d394:	4629      	mov	r1, r5
   4d396:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   4d398:	2800      	cmp	r0, #0
   4d39a:	db08      	blt.n	4d3ae <write_cb+0x4a>
   4d39c:	8a23      	ldrh	r3, [r4, #16]
   4d39e:	4298      	cmp	r0, r3
   4d3a0:	d10e      	bne.n	4d3c0 <write_cb+0x5c>
	data->err = 0U;
   4d3a2:	2300      	movs	r3, #0
   4d3a4:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   4d3a6:	2001      	movs	r0, #1
   4d3a8:	e008      	b.n	4d3bc <write_cb+0x58>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   4d3aa:	2302      	movs	r3, #2
   4d3ac:	e7eb      	b.n	4d386 <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   4d3ae:	f110 0fff 	cmn.w	r0, #255	; 0xff
   4d3b2:	d305      	bcc.n	4d3c0 <write_cb+0x5c>
		return -err;
   4d3b4:	4240      	negs	r0, r0
   4d3b6:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   4d3b8:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   4d3ba:	2000      	movs	r0, #0
}
   4d3bc:	b002      	add	sp, #8
   4d3be:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   4d3c0:	200e      	movs	r0, #14
   4d3c2:	e7f9      	b.n	4d3b8 <write_cb+0x54>

0004d3c4 <bt_gatt_foreach_attr>:
{
   4d3c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   4d3c6:	e9cd 2301 	strd	r2, r3, [sp, #4]
   4d3ca:	2300      	movs	r3, #0
   4d3cc:	9300      	str	r3, [sp, #0]
   4d3ce:	461a      	mov	r2, r3
   4d3d0:	f7e4 fb06 	bl	319e0 <bt_gatt_foreach_attr_type>
}
   4d3d4:	b005      	add	sp, #20
   4d3d6:	f85d fb04 	ldr.w	pc, [sp], #4

0004d3da <find_type_cb>:
{
   4d3da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   4d3de:	f8d2 9000 	ldr.w	r9, [r2]
{
   4d3e2:	b091      	sub	sp, #68	; 0x44
   4d3e4:	4607      	mov	r7, r0
   4d3e6:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4d3e8:	2500      	movs	r5, #0
   4d3ea:	f642 0301 	movw	r3, #10241	; 0x2801
   4d3ee:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   4d3f0:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4d3f4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   4d3f8:	a90b      	add	r1, sp, #44	; 0x2c
{
   4d3fa:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4d3fc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   4d400:	f7fe fd18 	bl	4be34 <bt_uuid_cmp>
   4d404:	2800      	cmp	r0, #0
   4d406:	d079      	beq.n	4d4fc <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   4d408:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   4d40c:	6838      	ldr	r0, [r7, #0]
   4d40e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   4d412:	a90b      	add	r1, sp, #44	; 0x2c
   4d414:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   4d418:	f7fe fd0c 	bl	4be34 <bt_uuid_cmp>
   4d41c:	b138      	cbz	r0, 4d42e <find_type_cb+0x54>
		if (data->group &&
   4d41e:	68a3      	ldr	r3, [r4, #8]
   4d420:	b11b      	cbz	r3, 4d42a <find_type_cb+0x50>
   4d422:	885a      	ldrh	r2, [r3, #2]
   4d424:	42b2      	cmp	r2, r6
   4d426:	d200      	bcs.n	4d42a <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   4d428:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   4d42a:	2001      	movs	r0, #1
   4d42c:	e009      	b.n	4d442 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   4d42e:	6861      	ldr	r1, [r4, #4]
   4d430:	4608      	mov	r0, r1
   4d432:	f7ff ff0f 	bl	4d254 <net_buf_frags_len>
   4d436:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   4d43a:	1a1b      	subs	r3, r3, r0
   4d43c:	2b03      	cmp	r3, #3
   4d43e:	d803      	bhi.n	4d448 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   4d440:	2000      	movs	r0, #0
}
   4d442:	b011      	add	sp, #68	; 0x44
   4d444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   4d448:	4608      	mov	r0, r1
   4d44a:	f002 fbb8 	bl	4fbbe <net_buf_frag_last>
   4d44e:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   4d450:	6860      	ldr	r0, [r4, #4]
   4d452:	f7ff feff 	bl	4d254 <net_buf_frags_len>
   4d456:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   4d45a:	f105 0b08 	add.w	fp, r5, #8
   4d45e:	ebaa 0a00 	sub.w	sl, sl, r0
   4d462:	4658      	mov	r0, fp
   4d464:	f002 fc26 	bl	4fcb4 <net_buf_simple_tailroom>
   4d468:	4582      	cmp	sl, r0
   4d46a:	d23f      	bcs.n	4d4ec <find_type_cb+0x112>
   4d46c:	6860      	ldr	r0, [r4, #4]
   4d46e:	f7ff fef1 	bl	4d254 <net_buf_frags_len>
   4d472:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   4d476:	1a18      	subs	r0, r3, r0
	if (!len) {
   4d478:	b970      	cbnz	r0, 4d498 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   4d47a:	6863      	ldr	r3, [r4, #4]
   4d47c:	7998      	ldrb	r0, [r3, #6]
   4d47e:	f7f6 f9a3 	bl	437c8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   4d482:	2200      	movs	r2, #0
   4d484:	2300      	movs	r3, #0
   4d486:	f002 fb60 	bl	4fb4a <net_buf_alloc_fixed>
		if (!frag) {
   4d48a:	4605      	mov	r5, r0
   4d48c:	2800      	cmp	r0, #0
   4d48e:	d0d7      	beq.n	4d440 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   4d490:	4601      	mov	r1, r0
   4d492:	6860      	ldr	r0, [r4, #4]
   4d494:	f002 fba4 	bl	4fbe0 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   4d498:	2300      	movs	r3, #0
   4d49a:	9300      	str	r3, [sp, #0]
   4d49c:	f8d7 9004 	ldr.w	r9, [r7, #4]
   4d4a0:	4639      	mov	r1, r7
   4d4a2:	2310      	movs	r3, #16
   4d4a4:	aa02      	add	r2, sp, #8
   4d4a6:	4640      	mov	r0, r8
   4d4a8:	47c8      	blx	r9
	if (read < 0) {
   4d4aa:	1e07      	subs	r7, r0, #0
   4d4ac:	db26      	blt.n	4d4fc <find_type_cb+0x122>
	if (read != data->value_len) {
   4d4ae:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   4d4b0:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   4d4b2:	42ba      	cmp	r2, r7
   4d4b4:	d01e      	beq.n	4d4f4 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   4d4b6:	4601      	mov	r1, r0
   4d4b8:	a80b      	add	r0, sp, #44	; 0x2c
   4d4ba:	f7fe fce9 	bl	4be90 <bt_uuid_create>
   4d4be:	b1e8      	cbz	r0, 4d4fc <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   4d4c0:	b2fa      	uxtb	r2, r7
   4d4c2:	a902      	add	r1, sp, #8
   4d4c4:	a806      	add	r0, sp, #24
   4d4c6:	f7fe fce3 	bl	4be90 <bt_uuid_create>
   4d4ca:	b1b8      	cbz	r0, 4d4fc <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   4d4cc:	a906      	add	r1, sp, #24
   4d4ce:	a80b      	add	r0, sp, #44	; 0x2c
   4d4d0:	f7fe fcb0 	bl	4be34 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   4d4d4:	b990      	cbnz	r0, 4d4fc <find_type_cb+0x122>
	data->err = 0x00;
   4d4d6:	2300      	movs	r3, #0
   4d4d8:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   4d4da:	2104      	movs	r1, #4
   4d4dc:	f105 0008 	add.w	r0, r5, #8
   4d4e0:	f002 fb9b 	bl	4fc1a <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   4d4e4:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   4d4e6:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   4d4e8:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   4d4ea:	e79e      	b.n	4d42a <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   4d4ec:	4658      	mov	r0, fp
   4d4ee:	f002 fbe1 	bl	4fcb4 <net_buf_simple_tailroom>
   4d4f2:	e7c1      	b.n	4d478 <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   4d4f4:	a902      	add	r1, sp, #8
   4d4f6:	f7fe fb9f 	bl	4bc38 <memcmp>
   4d4fa:	e7eb      	b.n	4d4d4 <find_type_cb+0xfa>
	data->group = NULL;
   4d4fc:	2300      	movs	r3, #0
   4d4fe:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   4d500:	e793      	b.n	4d42a <find_type_cb+0x50>

0004d502 <find_info_cb>:
{
   4d502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   4d504:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   4d506:	6817      	ldr	r7, [r2, #0]
{
   4d508:	4605      	mov	r5, r0
   4d50a:	460e      	mov	r6, r1
   4d50c:	4614      	mov	r4, r2
	if (!data->rsp) {
   4d50e:	b963      	cbnz	r3, 4d52a <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   4d510:	6850      	ldr	r0, [r2, #4]
   4d512:	2101      	movs	r1, #1
   4d514:	3008      	adds	r0, #8
   4d516:	f002 fb80 	bl	4fc1a <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   4d51a:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   4d51c:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   4d51e:	781b      	ldrb	r3, [r3, #0]
   4d520:	2b00      	cmp	r3, #0
   4d522:	bf14      	ite	ne
   4d524:	2302      	movne	r3, #2
   4d526:	2301      	moveq	r3, #1
   4d528:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   4d52a:	68a3      	ldr	r3, [r4, #8]
   4d52c:	781b      	ldrb	r3, [r3, #0]
   4d52e:	2b01      	cmp	r3, #1
   4d530:	d003      	beq.n	4d53a <find_info_cb+0x38>
   4d532:	2b02      	cmp	r3, #2
   4d534:	d019      	beq.n	4d56a <find_info_cb+0x68>
   4d536:	2000      	movs	r0, #0
   4d538:	e016      	b.n	4d568 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   4d53a:	682b      	ldr	r3, [r5, #0]
   4d53c:	781b      	ldrb	r3, [r3, #0]
   4d53e:	2b00      	cmp	r3, #0
   4d540:	d1f9      	bne.n	4d536 <find_info_cb+0x34>
   4d542:	6860      	ldr	r0, [r4, #4]
   4d544:	2104      	movs	r1, #4
   4d546:	3008      	adds	r0, #8
   4d548:	f002 fb67 	bl	4fc1a <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   4d54c:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   4d54e:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   4d550:	885b      	ldrh	r3, [r3, #2]
   4d552:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   4d554:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   4d556:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   4d558:	899b      	ldrh	r3, [r3, #12]
   4d55a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   4d55e:	1ac0      	subs	r0, r0, r3
   4d560:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   4d562:	bf94      	ite	ls
   4d564:	2000      	movls	r0, #0
   4d566:	2001      	movhi	r0, #1
}
   4d568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   4d56a:	682b      	ldr	r3, [r5, #0]
   4d56c:	781b      	ldrb	r3, [r3, #0]
   4d56e:	2b02      	cmp	r3, #2
   4d570:	d1e1      	bne.n	4d536 <find_info_cb+0x34>
   4d572:	6860      	ldr	r0, [r4, #4]
   4d574:	2112      	movs	r1, #18
   4d576:	3008      	adds	r0, #8
   4d578:	f002 fb4f 	bl	4fc1a <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   4d57c:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   4d57e:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   4d580:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   4d582:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   4d586:	3101      	adds	r1, #1
   4d588:	f7fe fb66 	bl	4bc58 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   4d58c:	6863      	ldr	r3, [r4, #4]
   4d58e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   4d592:	899b      	ldrh	r3, [r3, #12]
   4d594:	1ac0      	subs	r0, r0, r3
   4d596:	2812      	cmp	r0, #18
   4d598:	e7e3      	b.n	4d562 <find_info_cb+0x60>

0004d59a <attr_read_group_cb>:
	if (!data->rsp->len) {
   4d59a:	68d0      	ldr	r0, [r2, #12]
   4d59c:	7803      	ldrb	r3, [r0, #0]
   4d59e:	3104      	adds	r1, #4
   4d5a0:	b913      	cbnz	r3, 4d5a8 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   4d5a2:	7001      	strb	r1, [r0, #0]
	return true;
   4d5a4:	2001      	movs	r0, #1
   4d5a6:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   4d5a8:	428b      	cmp	r3, r1
   4d5aa:	d0fb      	beq.n	4d5a4 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   4d5ac:	6891      	ldr	r1, [r2, #8]
   4d5ae:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   4d5b0:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   4d5b2:	3b04      	subs	r3, #4
   4d5b4:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   4d5b6:	6110      	str	r0, [r2, #16]
}
   4d5b8:	4770      	bx	lr

0004d5ba <chan_req_sent>:
	if (chan->req) {
   4d5ba:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   4d5be:	b133      	cbz	r3, 4d5ce <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   4d5c0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4d5c4:	2300      	movs	r3, #0
   4d5c6:	f500 7088 	add.w	r0, r0, #272	; 0x110
   4d5ca:	f7fa bf71 	b.w	484b0 <k_work_reschedule>
}
   4d5ce:	4770      	bx	lr

0004d5d0 <att_chan_read>:
{
   4d5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4d5d4:	4680      	mov	r8, r0
   4d5d6:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   4d5d8:	4610      	mov	r0, r2
{
   4d5da:	4699      	mov	r9, r3
   4d5dc:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   4d5de:	f7ff fe39 	bl	4d254 <net_buf_frags_len>
   4d5e2:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   4d5e6:	4283      	cmp	r3, r0
{
   4d5e8:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   4d5ea:	d97a      	bls.n	4d6e2 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   4d5ec:	f8d8 3008 	ldr.w	r3, [r8, #8]
   4d5f0:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   4d5f2:	4630      	mov	r0, r6
   4d5f4:	f002 fae3 	bl	4fbbe <net_buf_frag_last>
	size_t len, total = 0;
   4d5f8:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   4d5fc:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   4d5fe:	4630      	mov	r0, r6
   4d600:	f7ff fe28 	bl	4d254 <net_buf_frags_len>
   4d604:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   4d608:	f105 0708 	add.w	r7, r5, #8
   4d60c:	1a24      	subs	r4, r4, r0
   4d60e:	4638      	mov	r0, r7
   4d610:	f002 fb50 	bl	4fcb4 <net_buf_simple_tailroom>
   4d614:	4284      	cmp	r4, r0
   4d616:	d211      	bcs.n	4d63c <att_chan_read+0x6c>
   4d618:	4630      	mov	r0, r6
   4d61a:	f7ff fe1b 	bl	4d254 <net_buf_frags_len>
   4d61e:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   4d622:	1a24      	subs	r4, r4, r0
		if (!len) {
   4d624:	bb34      	cbnz	r4, 4d674 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   4d626:	79b0      	ldrb	r0, [r6, #6]
   4d628:	f7f6 f8ce 	bl	437c8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   4d62c:	2200      	movs	r2, #0
   4d62e:	2300      	movs	r3, #0
   4d630:	f002 fa8b 	bl	4fb4a <net_buf_alloc_fixed>
			if (!frag) {
   4d634:	4605      	mov	r5, r0
   4d636:	b930      	cbnz	r0, 4d646 <att_chan_read+0x76>
	return total;
   4d638:	4657      	mov	r7, sl
   4d63a:	e02c      	b.n	4d696 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   4d63c:	4638      	mov	r0, r7
   4d63e:	f002 fb39 	bl	4fcb4 <net_buf_simple_tailroom>
   4d642:	4604      	mov	r4, r0
   4d644:	e7ee      	b.n	4d624 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   4d646:	4601      	mov	r1, r0
   4d648:	4630      	mov	r0, r6
   4d64a:	f002 fac9 	bl	4fbe0 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   4d64e:	4630      	mov	r0, r6
   4d650:	f7ff fe00 	bl	4d254 <net_buf_frags_len>
   4d654:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   4d658:	f105 0708 	add.w	r7, r5, #8
   4d65c:	1a24      	subs	r4, r4, r0
   4d65e:	4638      	mov	r0, r7
   4d660:	f002 fb28 	bl	4fcb4 <net_buf_simple_tailroom>
   4d664:	4284      	cmp	r4, r0
   4d666:	d21a      	bcs.n	4d69e <att_chan_read+0xce>
   4d668:	4630      	mov	r0, r6
   4d66a:	f7ff fdf3 	bl	4d254 <net_buf_frags_len>
   4d66e:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   4d672:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   4d674:	68a9      	ldr	r1, [r5, #8]
   4d676:	89aa      	ldrh	r2, [r5, #12]
   4d678:	f8cd 9000 	str.w	r9, [sp]
   4d67c:	f8db 7004 	ldr.w	r7, [fp, #4]
   4d680:	9803      	ldr	r0, [sp, #12]
   4d682:	440a      	add	r2, r1
   4d684:	b2a3      	uxth	r3, r4
   4d686:	4659      	mov	r1, fp
   4d688:	47b8      	blx	r7
		if (read < 0) {
   4d68a:	1e07      	subs	r7, r0, #0
   4d68c:	da0c      	bge.n	4d6a8 <att_chan_read+0xd8>
				return total;
   4d68e:	f1ba 0f00 	cmp.w	sl, #0
   4d692:	bf18      	it	ne
   4d694:	4657      	movne	r7, sl
}
   4d696:	4638      	mov	r0, r7
   4d698:	b005      	add	sp, #20
   4d69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4d69e:	4638      	mov	r0, r7
   4d6a0:	f002 fb08 	bl	4fcb4 <net_buf_simple_tailroom>
   4d6a4:	4604      	mov	r4, r0
   4d6a6:	e7e5      	b.n	4d674 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   4d6a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   4d6aa:	b993      	cbnz	r3, 4d6d2 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   4d6ac:	4639      	mov	r1, r7
   4d6ae:	f105 0008 	add.w	r0, r5, #8
   4d6b2:	f002 fab2 	bl	4fc1a <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   4d6b6:	4630      	mov	r0, r6
   4d6b8:	f7ff fdcc 	bl	4d254 <net_buf_frags_len>
   4d6bc:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   4d6c0:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   4d6c2:	4283      	cmp	r3, r0
		total += read;
   4d6c4:	44ba      	add	sl, r7
		offset += read;
   4d6c6:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   4d6ca:	d9b5      	bls.n	4d638 <att_chan_read+0x68>
   4d6cc:	42a7      	cmp	r7, r4
   4d6ce:	d096      	beq.n	4d5fe <att_chan_read+0x2e>
   4d6d0:	e7b2      	b.n	4d638 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   4d6d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   4d6d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   4d6d6:	4639      	mov	r1, r7
   4d6d8:	4628      	mov	r0, r5
   4d6da:	4798      	blx	r3
   4d6dc:	2800      	cmp	r0, #0
   4d6de:	d1e5      	bne.n	4d6ac <att_chan_read+0xdc>
   4d6e0:	e7aa      	b.n	4d638 <att_chan_read+0x68>
		return 0;
   4d6e2:	2700      	movs	r7, #0
   4d6e4:	e7d7      	b.n	4d696 <att_chan_read+0xc6>

0004d6e6 <chan_req_send>:
{
   4d6e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   4d6e8:	688f      	ldr	r7, [r1, #8]
{
   4d6ea:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   4d6ec:	4638      	mov	r0, r7
   4d6ee:	f7ff fdb1 	bl	4d254 <net_buf_frags_len>
   4d6f2:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   4d6f6:	4283      	cmp	r3, r0
{
   4d6f8:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   4d6fa:	d30d      	bcc.n	4d718 <chan_req_send+0x32>
	req->buf = NULL;
   4d6fc:	2600      	movs	r6, #0
	chan->req = req;
   4d6fe:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   4d702:	4632      	mov	r2, r6
	req->buf = NULL;
   4d704:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   4d706:	4620      	mov	r0, r4
   4d708:	4639      	mov	r1, r7
   4d70a:	f7e3 f88f 	bl	3082c <chan_send>
	if (err) {
   4d70e:	b110      	cbz	r0, 4d716 <chan_req_send+0x30>
		req->buf = buf;
   4d710:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   4d712:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   4d716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   4d718:	f06f 0079 	mvn.w	r0, #121	; 0x79
   4d71c:	e7fb      	b.n	4d716 <chan_req_send+0x30>

0004d71e <process_queue>:
{
   4d71e:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   4d720:	2200      	movs	r2, #0
{
   4d722:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   4d724:	2300      	movs	r3, #0
   4d726:	4608      	mov	r0, r1
{
   4d728:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   4d72a:	f002 fa13 	bl	4fb54 <net_buf_get>
	if (buf) {
   4d72e:	4605      	mov	r5, r0
   4d730:	b160      	cbz	r0, 4d74c <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   4d732:	4601      	mov	r1, r0
   4d734:	2200      	movs	r2, #0
   4d736:	4620      	mov	r0, r4
   4d738:	f7e3 f878 	bl	3082c <chan_send>
		if (err) {
   4d73c:	4604      	mov	r4, r0
   4d73e:	b118      	cbz	r0, 4d748 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   4d740:	4629      	mov	r1, r5
   4d742:	4630      	mov	r0, r6
   4d744:	f003 f96c 	bl	50a20 <k_queue_prepend>
}
   4d748:	4620      	mov	r0, r4
   4d74a:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   4d74c:	f06f 0401 	mvn.w	r4, #1
   4d750:	e7fa      	b.n	4d748 <process_queue+0x2a>

0004d752 <bt_att_chan_send_rsp>:
{
   4d752:	b538      	push	{r3, r4, r5, lr}
   4d754:	4604      	mov	r4, r0
   4d756:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   4d758:	f7e3 f868 	bl	3082c <chan_send>
	if (err) {
   4d75c:	b130      	cbz	r0, 4d76c <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   4d75e:	4629      	mov	r1, r5
   4d760:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   4d764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   4d768:	f002 ba18 	b.w	4fb9c <net_buf_put>
}
   4d76c:	bd38      	pop	{r3, r4, r5, pc}

0004d76e <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4d76e:	b510      	push	{r4, lr}
	return list->head;
   4d770:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4d772:	2200      	movs	r2, #0
   4d774:	b153      	cbz	r3, 4d78c <sys_slist_find_and_remove.isra.0+0x1e>
   4d776:	428b      	cmp	r3, r1
   4d778:	d10e      	bne.n	4d798 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   4d77a:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   4d77c:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   4d77e:	b932      	cbnz	r2, 4d78e <sys_slist_find_and_remove.isra.0+0x20>
   4d780:	42a1      	cmp	r1, r4
	list->head = node;
   4d782:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   4d784:	d100      	bne.n	4d788 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   4d786:	6043      	str	r3, [r0, #4]
	parent->next = child;
   4d788:	2300      	movs	r3, #0
   4d78a:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4d78c:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   4d78e:	42a1      	cmp	r1, r4
	parent->next = child;
   4d790:	6013      	str	r3, [r2, #0]
	list->tail = node;
   4d792:	bf08      	it	eq
   4d794:	6042      	streq	r2, [r0, #4]
}
   4d796:	e7f7      	b.n	4d788 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   4d798:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4d79a:	681b      	ldr	r3, [r3, #0]
   4d79c:	e7ea      	b.n	4d774 <sys_slist_find_and_remove.isra.0+0x6>

0004d79e <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   4d79e:	2006      	movs	r0, #6
   4d7a0:	4770      	bx	lr

0004d7a2 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4d7a2:	30f0      	adds	r0, #240	; 0xf0
   4d7a4:	f3bf 8f5b 	dmb	ish
   4d7a8:	e850 3f00 	ldrex	r3, [r0]
   4d7ac:	f023 0301 	bic.w	r3, r3, #1
   4d7b0:	e840 3200 	strex	r2, r3, [r0]
   4d7b4:	2a00      	cmp	r2, #0
   4d7b6:	d1f7      	bne.n	4d7a8 <chan_rsp_sent+0x6>
   4d7b8:	f3bf 8f5b 	dmb	ish
}
   4d7bc:	4770      	bx	lr

0004d7be <chan_cfm_sent>:
   4d7be:	30f0      	adds	r0, #240	; 0xf0
   4d7c0:	f3bf 8f5b 	dmb	ish
   4d7c4:	e850 3f00 	ldrex	r3, [r0]
   4d7c8:	f023 0302 	bic.w	r3, r3, #2
   4d7cc:	e840 3200 	strex	r2, r3, [r0]
   4d7d0:	2a00      	cmp	r2, #0
   4d7d2:	d1f7      	bne.n	4d7c4 <chan_cfm_sent+0x6>
   4d7d4:	f3bf 8f5b 	dmb	ish
}
   4d7d8:	4770      	bx	lr

0004d7da <read_cb>:
{
   4d7da:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   4d7dc:	6816      	ldr	r6, [r2, #0]
{
   4d7de:	4605      	mov	r5, r0
	data->err = 0x00;
   4d7e0:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   4d7e2:	68b0      	ldr	r0, [r6, #8]
	data->err = 0x00;
   4d7e4:	7313      	strb	r3, [r2, #12]
{
   4d7e6:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   4d7e8:	4629      	mov	r1, r5
   4d7ea:	2215      	movs	r2, #21
   4d7ec:	f000 fec2 	bl	4e574 <bt_gatt_check_perm>
   4d7f0:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   4d7f2:	b980      	cbnz	r0, 4d816 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   4d7f4:	e9cd 0000 	strd	r0, r0, [sp]
   4d7f8:	4629      	mov	r1, r5
   4d7fa:	88a3      	ldrh	r3, [r4, #4]
   4d7fc:	68a2      	ldr	r2, [r4, #8]
   4d7fe:	4630      	mov	r0, r6
   4d800:	f7ff fee6 	bl	4d5d0 <att_chan_read>
	if (ret < 0) {
   4d804:	2800      	cmp	r0, #0
   4d806:	da09      	bge.n	4d81c <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   4d808:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   4d80c:	bf26      	itte	cs
   4d80e:	4240      	negcs	r0, r0
   4d810:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   4d812:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   4d814:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   4d816:	2000      	movs	r0, #0
}
   4d818:	b002      	add	sp, #8
   4d81a:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   4d81c:	2001      	movs	r0, #1
   4d81e:	e7fb      	b.n	4d818 <read_cb+0x3e>

0004d820 <bt_att_sent>:
{
   4d820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   4d822:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   4d826:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   4d82a:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   4d82c:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   4d830:	b10b      	cbz	r3, 4d836 <bt_att_sent+0x16>
		chan->sent(chan);
   4d832:	4638      	mov	r0, r7
   4d834:	4798      	blx	r3
   4d836:	f3bf 8f5b 	dmb	ish
   4d83a:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   4d83e:	e853 1f00 	ldrex	r1, [r3]
   4d842:	f021 0110 	bic.w	r1, r1, #16
   4d846:	e843 1200 	strex	r2, r1, [r3]
   4d84a:	2a00      	cmp	r2, #0
   4d84c:	d1f7      	bne.n	4d83e <bt_att_sent+0x1e>
   4d84e:	f3bf 8f5b 	dmb	ish
	if (!att) {
   4d852:	b30c      	cbz	r4, 4d898 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   4d854:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   4d858:	b98b      	cbnz	r3, 4d87e <bt_att_sent+0x5e>
   4d85a:	6863      	ldr	r3, [r4, #4]
   4d85c:	b17b      	cbz	r3, 4d87e <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   4d85e:	1d20      	adds	r0, r4, #4
   4d860:	f7ff fcee 	bl	4d240 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4d864:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   4d866:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4d868:	4638      	mov	r0, r7
   4d86a:	f7ff ff3c 	bl	4d6e6 <chan_req_send>
   4d86e:	2800      	cmp	r0, #0
   4d870:	da12      	bge.n	4d898 <bt_att_sent+0x78>
	parent->next = child;
   4d872:	6863      	ldr	r3, [r4, #4]
   4d874:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   4d876:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   4d878:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   4d87a:	b903      	cbnz	r3, 4d87e <bt_att_sent+0x5e>
	list->tail = node;
   4d87c:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   4d87e:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   4d882:	4638      	mov	r0, r7
   4d884:	f7ff ff4b 	bl	4d71e <process_queue>
	if (!err) {
   4d888:	b130      	cbz	r0, 4d898 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   4d88a:	f104 010c 	add.w	r1, r4, #12
   4d88e:	4638      	mov	r0, r7
}
   4d890:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   4d894:	f7ff bf43 	b.w	4d71e <process_queue>
}
   4d898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004d89a <att_req_send_process>:
{
   4d89a:	b570      	push	{r4, r5, r6, lr}
   4d89c:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   4d89e:	3004      	adds	r0, #4
   4d8a0:	f7ff fcce 	bl	4d240 <sys_slist_get>
	if (!node) {
   4d8a4:	4606      	mov	r6, r0
   4d8a6:	b1d0      	cbz	r0, 4d8de <att_req_send_process+0x44>
	return list->head;
   4d8a8:	6a68      	ldr	r0, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4d8aa:	b1e8      	cbz	r0, 4d8e8 <att_req_send_process+0x4e>
	return node->next;
   4d8ac:	6804      	ldr	r4, [r0, #0]
   4d8ae:	b10c      	cbz	r4, 4d8b4 <att_req_send_process+0x1a>
   4d8b0:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   4d8b4:	f850 3c50 	ldr.w	r3, [r0, #-80]
   4d8b8:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   4d8bc:	b153      	cbz	r3, 4d8d4 <att_req_send_process+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4d8be:	b19c      	cbz	r4, 4d8e8 <att_req_send_process+0x4e>
   4d8c0:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   4d8c4:	4620      	mov	r0, r4
   4d8c6:	b15b      	cbz	r3, 4d8e0 <att_req_send_process+0x46>
   4d8c8:	f5a3 74a2 	sub.w	r4, r3, #324	; 0x144
		if (!chan->req) {
   4d8cc:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   4d8d0:	2b00      	cmp	r3, #0
   4d8d2:	d1f5      	bne.n	4d8c0 <att_req_send_process+0x26>
	return chan_req_send(chan, req);
   4d8d4:	4631      	mov	r1, r6
   4d8d6:	f7ff ff06 	bl	4d6e6 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4d8da:	2800      	cmp	r0, #0
   4d8dc:	dbef      	blt.n	4d8be <att_req_send_process+0x24>
}
   4d8de:	bd70      	pop	{r4, r5, r6, pc}
		if (!chan->req) {
   4d8e0:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
   4d8e4:	2c00      	cmp	r4, #0
   4d8e6:	d0f5      	beq.n	4d8d4 <att_req_send_process+0x3a>
	parent->next = child;
   4d8e8:	686b      	ldr	r3, [r5, #4]
   4d8ea:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   4d8ec:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   4d8ee:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   4d8f0:	2b00      	cmp	r3, #0
   4d8f2:	d1f4      	bne.n	4d8de <att_req_send_process+0x44>
	list->tail = node;
   4d8f4:	60ae      	str	r6, [r5, #8]
}
   4d8f6:	e7f2      	b.n	4d8de <att_req_send_process+0x44>

0004d8f8 <bt_att_status>:
{
   4d8f8:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4d8fa:	f3bf 8f5b 	dmb	ish
   4d8fe:	680b      	ldr	r3, [r1, #0]
   4d900:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   4d904:	07db      	lsls	r3, r3, #31
{
   4d906:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   4d908:	d519      	bpl.n	4d93e <bt_att_status+0x46>
	if (!chan->att) {
   4d90a:	f850 0c08 	ldr.w	r0, [r0, #-8]
   4d90e:	b1b0      	cbz	r0, 4d93e <bt_att_status+0x46>
	if (chan->req) {
   4d910:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   4d914:	b99b      	cbnz	r3, 4d93e <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   4d916:	3004      	adds	r0, #4
   4d918:	f7ff fc92 	bl	4d240 <sys_slist_get>
	if (!node) {
   4d91c:	4604      	mov	r4, r0
   4d91e:	b170      	cbz	r0, 4d93e <bt_att_status+0x46>
	return chan_req_send(chan, req);
   4d920:	4601      	mov	r1, r0
   4d922:	f1a5 0008 	sub.w	r0, r5, #8
   4d926:	f7ff fede 	bl	4d6e6 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4d92a:	2800      	cmp	r0, #0
   4d92c:	da07      	bge.n	4d93e <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   4d92e:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   4d932:	685a      	ldr	r2, [r3, #4]
   4d934:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   4d936:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   4d938:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   4d93a:	b902      	cbnz	r2, 4d93e <bt_att_status+0x46>
	list->tail = node;
   4d93c:	609c      	str	r4, [r3, #8]
}
   4d93e:	bd38      	pop	{r3, r4, r5, pc}

0004d940 <bt_att_chan_create_pdu>:
{
   4d940:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   4d942:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   4d946:	3201      	adds	r2, #1
   4d948:	429a      	cmp	r2, r3
{
   4d94a:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   4d94c:	d80f      	bhi.n	4d96e <bt_att_chan_create_pdu+0x2e>
	switch (att_op_get_type(op)) {
   4d94e:	4608      	mov	r0, r1
   4d950:	f7e2 fe90 	bl	30674 <att_op_get_type>
   4d954:	2802      	cmp	r0, #2
   4d956:	d001      	beq.n	4d95c <bt_att_chan_create_pdu+0x1c>
   4d958:	2804      	cmp	r0, #4
   4d95a:	d10b      	bne.n	4d974 <bt_att_chan_create_pdu+0x34>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   4d95c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4d960:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   4d962:	2100      	movs	r1, #0
   4d964:	4608      	mov	r0, r1
   4d966:	f7ff fb98 	bl	4d09a <bt_l2cap_create_pdu_timeout>
   4d96a:	4604      	mov	r4, r0
	if (!buf) {
   4d96c:	b938      	cbnz	r0, 4d97e <bt_att_chan_create_pdu+0x3e>
		return NULL;
   4d96e:	2400      	movs	r4, #0
}
   4d970:	4620      	mov	r0, r4
   4d972:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   4d974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4d978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4d97c:	e7f1      	b.n	4d962 <bt_att_chan_create_pdu+0x22>
   4d97e:	2101      	movs	r1, #1
   4d980:	3008      	adds	r0, #8
   4d982:	f002 f94a 	bl	4fc1a <net_buf_simple_add>
	hdr->code = op;
   4d986:	7005      	strb	r5, [r0, #0]
	return buf;
   4d988:	e7f2      	b.n	4d970 <bt_att_chan_create_pdu+0x30>

0004d98a <att_write_req>:
{
   4d98a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4d98c:	460c      	mov	r4, r1
   4d98e:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   4d990:	f101 0008 	add.w	r0, r1, #8
   4d994:	f002 f982 	bl	4fc9c <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   4d998:	89a2      	ldrh	r2, [r4, #12]
   4d99a:	9201      	str	r2, [sp, #4]
   4d99c:	68a2      	ldr	r2, [r4, #8]
   4d99e:	9200      	str	r2, [sp, #0]
   4d9a0:	4603      	mov	r3, r0
   4d9a2:	2213      	movs	r2, #19
   4d9a4:	2112      	movs	r1, #18
   4d9a6:	4628      	mov	r0, r5
   4d9a8:	f7e3 f8e0 	bl	30b6c <att_write_rsp.constprop.0>
}
   4d9ac:	b003      	add	sp, #12
   4d9ae:	bd30      	pop	{r4, r5, pc}

0004d9b0 <att_write_cmd>:
{
   4d9b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4d9b2:	460c      	mov	r4, r1
   4d9b4:	4605      	mov	r5, r0
   4d9b6:	f101 0008 	add.w	r0, r1, #8
   4d9ba:	f002 f96f 	bl	4fc9c <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   4d9be:	89a2      	ldrh	r2, [r4, #12]
   4d9c0:	9201      	str	r2, [sp, #4]
   4d9c2:	68a2      	ldr	r2, [r4, #8]
   4d9c4:	9200      	str	r2, [sp, #0]
   4d9c6:	2200      	movs	r2, #0
   4d9c8:	4603      	mov	r3, r0
   4d9ca:	4611      	mov	r1, r2
   4d9cc:	4628      	mov	r0, r5
   4d9ce:	f7e3 f8cd 	bl	30b6c <att_write_rsp.constprop.0>
}
   4d9d2:	b003      	add	sp, #12
   4d9d4:	bd30      	pop	{r4, r5, pc}

0004d9d6 <bt_att_create_pdu>:
{
   4d9d6:	b538      	push	{r3, r4, r5, lr}
   4d9d8:	460d      	mov	r5, r1
   4d9da:	4614      	mov	r4, r2
	att = att_get(conn);
   4d9dc:	f7ff fc5a 	bl	4d294 <att_get>
	if (!att) {
   4d9e0:	b168      	cbz	r0, 4d9fe <bt_att_create_pdu+0x28>
	return list->head;
   4d9e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4d9e4:	b15b      	cbz	r3, 4d9fe <bt_att_create_pdu+0x28>
   4d9e6:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
   4d9ea:	681b      	ldr	r3, [r3, #0]
   4d9ec:	b10b      	cbz	r3, 4d9f2 <bt_att_create_pdu+0x1c>
   4d9ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   4d9f2:	1c62      	adds	r2, r4, #1
   4d9f4:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   4d9f8:	428a      	cmp	r2, r1
   4d9fa:	d90d      	bls.n	4da18 <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4d9fc:	b90b      	cbnz	r3, 4da02 <bt_att_create_pdu+0x2c>
}
   4d9fe:	2000      	movs	r0, #0
   4da00:	bd38      	pop	{r3, r4, r5, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4da02:	4618      	mov	r0, r3
   4da04:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   4da08:	2b00      	cmp	r3, #0
   4da0a:	d0f3      	beq.n	4d9f4 <bt_att_create_pdu+0x1e>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   4da0c:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   4da10:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4da12:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   4da16:	d8f4      	bhi.n	4da02 <bt_att_create_pdu+0x2c>
		return bt_att_chan_create_pdu(chan, op, len);
   4da18:	4622      	mov	r2, r4
   4da1a:	4629      	mov	r1, r5
}
   4da1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   4da20:	f7ff bf8e 	b.w	4d940 <bt_att_chan_create_pdu>

0004da24 <att_read_blob_req>:
{
   4da24:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   4da26:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   4da28:	8813      	ldrh	r3, [r2, #0]
   4da2a:	8852      	ldrh	r2, [r2, #2]
   4da2c:	9200      	str	r2, [sp, #0]
   4da2e:	210c      	movs	r1, #12
   4da30:	220d      	movs	r2, #13
   4da32:	f7e3 f9bf 	bl	30db4 <att_read_rsp>
}
   4da36:	b003      	add	sp, #12
   4da38:	f85d fb04 	ldr.w	pc, [sp], #4

0004da3c <att_read_req>:
{
   4da3c:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   4da3e:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   4da40:	2200      	movs	r2, #0
   4da42:	881b      	ldrh	r3, [r3, #0]
   4da44:	9200      	str	r2, [sp, #0]
   4da46:	210a      	movs	r1, #10
   4da48:	220b      	movs	r2, #11
   4da4a:	f7e3 f9b3 	bl	30db4 <att_read_rsp>
}
   4da4e:	b003      	add	sp, #12
   4da50:	f85d fb04 	ldr.w	pc, [sp], #4

0004da54 <bt_att_init>:
	bt_gatt_init();
   4da54:	f7e3 bf2a 	b.w	318ac <bt_gatt_init>

0004da58 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   4da58:	898a      	ldrh	r2, [r1, #12]
   4da5a:	6889      	ldr	r1, [r1, #8]
   4da5c:	2300      	movs	r3, #0
   4da5e:	f7e3 bb61 	b.w	31124 <att_handle_rsp>

0004da62 <att_handle_find_type_rsp>:
static uint8_t att_handle_find_type_rsp(struct bt_att_chan *chan,
   4da62:	f7ff bff9 	b.w	4da58 <att_handle_find_info_rsp>

0004da66 <att_handle_read_type_rsp>:
static uint8_t att_handle_read_type_rsp(struct bt_att_chan *chan,
   4da66:	f7ff bff7 	b.w	4da58 <att_handle_find_info_rsp>

0004da6a <att_handle_read_rsp>:
static uint8_t att_handle_read_rsp(struct bt_att_chan *chan,
   4da6a:	f7ff bff5 	b.w	4da58 <att_handle_find_info_rsp>

0004da6e <att_handle_read_blob_rsp>:
static uint8_t att_handle_read_blob_rsp(struct bt_att_chan *chan,
   4da6e:	f7ff bff3 	b.w	4da58 <att_handle_find_info_rsp>

0004da72 <att_handle_read_mult_rsp>:
static uint8_t att_handle_read_mult_rsp(struct bt_att_chan *chan,
   4da72:	f7ff bff1 	b.w	4da58 <att_handle_find_info_rsp>

0004da76 <att_handle_read_group_rsp>:
static uint8_t att_handle_read_group_rsp(struct bt_att_chan *chan,
   4da76:	f7ff bfef 	b.w	4da58 <att_handle_find_info_rsp>

0004da7a <att_handle_write_rsp>:
static uint8_t att_handle_write_rsp(struct bt_att_chan *chan,
   4da7a:	f7ff bfed 	b.w	4da58 <att_handle_find_info_rsp>

0004da7e <att_handle_prepare_write_rsp>:
static uint8_t att_handle_prepare_write_rsp(struct bt_att_chan *chan,
   4da7e:	f7ff bfeb 	b.w	4da58 <att_handle_find_info_rsp>

0004da82 <att_handle_exec_write_rsp>:
static uint8_t att_handle_exec_write_rsp(struct bt_att_chan *chan,
   4da82:	f7ff bfe9 	b.w	4da58 <att_handle_find_info_rsp>

0004da86 <att_confirm>:
static uint8_t att_confirm(struct bt_att_chan *chan, struct net_buf *buf)
   4da86:	f7ff bfe7 	b.w	4da58 <att_handle_find_info_rsp>

0004da8a <att_mtu_rsp>:
{
   4da8a:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   4da8c:	688e      	ldr	r6, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   4da8e:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   4da90:	2b16      	cmp	r3, #22
{
   4da92:	4604      	mov	r4, r0
   4da94:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   4da96:	d806      	bhi.n	4daa6 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   4da98:	2200      	movs	r2, #0
   4da9a:	2304      	movs	r3, #4
   4da9c:	4611      	mov	r1, r2
}
   4da9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   4daa2:	f7e3 bb3f 	b.w	31124 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   4daa6:	2b41      	cmp	r3, #65	; 0x41
   4daa8:	bf28      	it	cs
   4daaa:	2341      	movcs	r3, #65	; 0x41
   4daac:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   4dab0:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   4dab4:	f7ff fc1d 	bl	4d2f2 <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   4dab8:	89aa      	ldrh	r2, [r5, #12]
   4daba:	2300      	movs	r3, #0
   4dabc:	4631      	mov	r1, r6
   4dabe:	4620      	mov	r0, r4
   4dac0:	e7ed      	b.n	4da9e <att_mtu_rsp+0x14>

0004dac2 <bt_att_encrypt_change>:
{
   4dac2:	b570      	push	{r4, r5, r6, lr}
	if (!att_chan->att) {
   4dac4:	f850 3c08 	ldr.w	r3, [r0, #-8]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   4dac8:	4605      	mov	r5, r0
{
   4daca:	4604      	mov	r4, r0
	struct bt_conn *conn = ch->chan.conn;
   4dacc:	f855 6908 	ldr.w	r6, [r5], #-8
	if (!att_chan->att) {
   4dad0:	2b00      	cmp	r3, #0
   4dad2:	d035      	beq.n	4db40 <bt_att_encrypt_change+0x7e>
	if (hci_status) {
   4dad4:	b139      	cbz	r1, 4dae6 <bt_att_encrypt_change+0x24>
		if (att_chan->req && att_chan->req->retrying) {
   4dad6:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   4dada:	b38b      	cbz	r3, 4db40 <bt_att_encrypt_change+0x7e>
   4dadc:	7c1b      	ldrb	r3, [r3, #16]
   4dade:	07da      	lsls	r2, r3, #31
   4dae0:	d52e      	bpl.n	4db40 <bt_att_encrypt_change+0x7e>
		return BT_ATT_ERR_AUTHENTICATION;
   4dae2:	2305      	movs	r3, #5
   4dae4:	e01f      	b.n	4db26 <bt_att_encrypt_change+0x64>
	bt_gatt_encrypt_change(conn);
   4dae6:	4630      	mov	r0, r6
   4dae8:	f7e4 fdfe 	bl	326e8 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   4daec:	7a73      	ldrb	r3, [r6, #9]
   4daee:	2b01      	cmp	r3, #1
   4daf0:	d026      	beq.n	4db40 <bt_att_encrypt_change+0x7e>
	if (!(att_chan->req && att_chan->req->retrying)) {
   4daf2:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   4daf6:	b31c      	cbz	r4, 4db40 <bt_att_encrypt_change+0x7e>
   4daf8:	7c23      	ldrb	r3, [r4, #16]
   4dafa:	07db      	lsls	r3, r3, #31
   4dafc:	d520      	bpl.n	4db40 <bt_att_encrypt_change+0x7e>
	if (!req->encode) {
   4dafe:	68e3      	ldr	r3, [r4, #12]
   4db00:	2b00      	cmp	r3, #0
   4db02:	d0ee      	beq.n	4dae2 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   4db04:	6962      	ldr	r2, [r4, #20]
   4db06:	7c61      	ldrb	r1, [r4, #17]
   4db08:	4628      	mov	r0, r5
   4db0a:	f7ff ff19 	bl	4d940 <bt_att_chan_create_pdu>
	if (!buf) {
   4db0e:	4606      	mov	r6, r0
   4db10:	b140      	cbz	r0, 4db24 <bt_att_encrypt_change+0x62>
	if (req->encode(buf, req->len, req->user_data)) {
   4db12:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   4db16:	68e3      	ldr	r3, [r4, #12]
   4db18:	4798      	blx	r3
   4db1a:	4602      	mov	r2, r0
   4db1c:	b150      	cbz	r0, 4db34 <bt_att_encrypt_change+0x72>
		net_buf_unref(buf);
   4db1e:	4630      	mov	r0, r6
   4db20:	f7f5 ff14 	bl	4394c <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   4db24:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   4db26:	2200      	movs	r2, #0
   4db28:	4628      	mov	r0, r5
   4db2a:	4611      	mov	r1, r2
}
   4db2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   4db30:	f7e3 baf8 	b.w	31124 <att_handle_rsp>
	if (chan_send(att_chan, buf, NULL)) {
   4db34:	4631      	mov	r1, r6
   4db36:	4628      	mov	r0, r5
   4db38:	f7e2 fe78 	bl	3082c <chan_send>
   4db3c:	2800      	cmp	r0, #0
   4db3e:	d1ee      	bne.n	4db1e <bt_att_encrypt_change+0x5c>
}
   4db40:	bd70      	pop	{r4, r5, r6, pc}

0004db42 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   4db42:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   4db46:	f7e3 bb59 	b.w	311fc <bt_att_disconnected>

0004db4a <bt_att_send>:
{
   4db4a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   4db4e:	4607      	mov	r7, r0
   4db50:	460d      	mov	r5, r1
   4db52:	4616      	mov	r6, r2
   4db54:	4698      	mov	r8, r3
	att = att_get(conn);
   4db56:	f7ff fb9d 	bl	4d294 <att_get>
	if (!att) {
   4db5a:	4604      	mov	r4, r0
   4db5c:	b938      	cbnz	r0, 4db6e <bt_att_send+0x24>
		net_buf_unref(buf);
   4db5e:	4628      	mov	r0, r5
   4db60:	f7f5 fef4 	bl	4394c <net_buf_unref>
		return -ENOTCONN;
   4db64:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   4db68:	b002      	add	sp, #8
   4db6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   4db6e:	b146      	cbz	r6, 4db82 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   4db70:	f8cd 8000 	str.w	r8, [sp]
   4db74:	4633      	mov	r3, r6
   4db76:	462a      	mov	r2, r5
   4db78:	2104      	movs	r1, #4
   4db7a:	4638      	mov	r0, r7
   4db7c:	f7ff fa90 	bl	4d0a0 <bt_l2cap_send_cb>
   4db80:	e7f2      	b.n	4db68 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   4db82:	f100 060c 	add.w	r6, r0, #12
   4db86:	4629      	mov	r1, r5
   4db88:	4630      	mov	r0, r6
   4db8a:	f002 f807 	bl	4fb9c <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   4db8e:	2200      	movs	r2, #0
   4db90:	2300      	movs	r3, #0
   4db92:	4630      	mov	r0, r6
   4db94:	f001 ffde 	bl	4fb54 <net_buf_get>
	if (!buf) {
   4db98:	4605      	mov	r5, r0
   4db9a:	b908      	cbnz	r0, 4dba0 <bt_att_send+0x56>
	return 0;
   4db9c:	2000      	movs	r0, #0
   4db9e:	e7e3      	b.n	4db68 <bt_att_send+0x1e>
	return list->head;
   4dba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4dba2:	b1a3      	cbz	r3, 4dbce <bt_att_send+0x84>
	return node->next;
   4dba4:	681c      	ldr	r4, [r3, #0]
   4dba6:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   4dbaa:	b10c      	cbz	r4, 4dbb0 <bt_att_send+0x66>
   4dbac:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   4dbb0:	2200      	movs	r2, #0
   4dbb2:	4629      	mov	r1, r5
   4dbb4:	f7e2 fe3a 	bl	3082c <chan_send>
		if (err >= 0) {
   4dbb8:	2800      	cmp	r0, #0
   4dbba:	daef      	bge.n	4db9c <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4dbbc:	b13c      	cbz	r4, 4dbce <bt_att_send+0x84>
   4dbbe:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   4dbc2:	b10b      	cbz	r3, 4dbc8 <bt_att_send+0x7e>
   4dbc4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   4dbc8:	4620      	mov	r0, r4
   4dbca:	461c      	mov	r4, r3
   4dbcc:	e7f0      	b.n	4dbb0 <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   4dbce:	4629      	mov	r1, r5
   4dbd0:	4630      	mov	r0, r6
   4dbd2:	f002 ff25 	bl	50a20 <k_queue_prepend>
   4dbd6:	e7e1      	b.n	4db9c <bt_att_send+0x52>

0004dbd8 <bt_att_req_send>:
{
   4dbd8:	b510      	push	{r4, lr}
   4dbda:	460c      	mov	r4, r1
	att = att_get(conn);
   4dbdc:	f7ff fb5a 	bl	4d294 <att_get>
	if (!att) {
   4dbe0:	b160      	cbz	r0, 4dbfc <bt_att_req_send+0x24>
	parent->next = child;
   4dbe2:	2300      	movs	r3, #0
   4dbe4:	6023      	str	r3, [r4, #0]
	return list->tail;
   4dbe6:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   4dbe8:	b92b      	cbnz	r3, 4dbf6 <bt_att_req_send+0x1e>
	list->head = node;
   4dbea:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   4dbee:	f7ff fe54 	bl	4d89a <att_req_send_process>
	return 0;
   4dbf2:	2000      	movs	r0, #0
}
   4dbf4:	bd10      	pop	{r4, pc}
	parent->next = child;
   4dbf6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   4dbf8:	6084      	str	r4, [r0, #8]
}
   4dbfa:	e7f8      	b.n	4dbee <bt_att_req_send+0x16>
		return -ENOTCONN;
   4dbfc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4dc00:	e7f8      	b.n	4dbf4 <bt_att_req_send+0x1c>

0004dc02 <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   4dc02:	b510      	push	{r4, lr}
   4dc04:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   4dc06:	f7ff fb45 	bl	4d294 <att_get>
	if (!att) {
   4dc0a:	b198      	cbz	r0, 4dc34 <bt_att_find_req_by_user_data+0x32>
	return list->head;
   4dc0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   4dc0e:	b14b      	cbz	r3, 4dc24 <bt_att_find_req_by_user_data+0x22>
		if (chan->req->user_data == user_data) {
   4dc10:	f853 2c50 	ldr.w	r2, [r3, #-80]
   4dc14:	6991      	ldr	r1, [r2, #24]
   4dc16:	42a1      	cmp	r1, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   4dc18:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (chan->req->user_data == user_data) {
   4dc1c:	d009      	beq.n	4dc32 <bt_att_find_req_by_user_data+0x30>
	return node->next;
   4dc1e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   4dc22:	e7f4      	b.n	4dc0e <bt_att_find_req_by_user_data+0xc>
	return list->head;
   4dc24:	6840      	ldr	r0, [r0, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   4dc26:	b128      	cbz	r0, 4dc34 <bt_att_find_req_by_user_data+0x32>
		if (req->user_data == user_data) {
   4dc28:	6983      	ldr	r3, [r0, #24]
   4dc2a:	42a3      	cmp	r3, r4
   4dc2c:	d002      	beq.n	4dc34 <bt_att_find_req_by_user_data+0x32>
	return node->next;
   4dc2e:	6800      	ldr	r0, [r0, #0]
   4dc30:	e7f9      	b.n	4dc26 <bt_att_find_req_by_user_data+0x24>
		if (chan->req->user_data == user_data) {
   4dc32:	4610      	mov	r0, r2
			return req;
		}
	}

	return NULL;
}
   4dc34:	bd10      	pop	{r4, pc}

0004dc36 <gatt_ccc_changed>:
{
   4dc36:	b430      	push	{r4, r5}
   4dc38:	460b      	mov	r3, r1
   4dc3a:	460a      	mov	r2, r1
   4dc3c:	f101 043c 	add.w	r4, r1, #60	; 0x3c
	uint16_t value = 0x0000;
   4dc40:	2100      	movs	r1, #0
		if (ccc->cfg[i].value > value) {
   4dc42:	8915      	ldrh	r5, [r2, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   4dc44:	320a      	adds	r2, #10
   4dc46:	42a9      	cmp	r1, r5
   4dc48:	bf38      	it	cc
   4dc4a:	4629      	movcc	r1, r5
   4dc4c:	42a2      	cmp	r2, r4
   4dc4e:	d1f8      	bne.n	4dc42 <gatt_ccc_changed+0xc>
	if (value != ccc->value) {
   4dc50:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   4dc52:	428a      	cmp	r2, r1
   4dc54:	d004      	beq.n	4dc60 <gatt_ccc_changed+0x2a>
		ccc->value = value;
   4dc56:	8799      	strh	r1, [r3, #60]	; 0x3c
		if (ccc->cfg_changed) {
   4dc58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   4dc5a:	b10b      	cbz	r3, 4dc60 <gatt_ccc_changed+0x2a>
}
   4dc5c:	bc30      	pop	{r4, r5}
			ccc->cfg_changed(attr, value);
   4dc5e:	4718      	bx	r3
}
   4dc60:	bc30      	pop	{r4, r5}
   4dc62:	4770      	bx	lr

0004dc64 <gatt_indicate_rsp>:
{
   4dc64:	b510      	push	{r4, lr}
   4dc66:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   4dc68:	68a3      	ldr	r3, [r4, #8]
{
   4dc6a:	460a      	mov	r2, r1
	if (params->func) {
   4dc6c:	b10b      	cbz	r3, 4dc72 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   4dc6e:	4621      	mov	r1, r4
   4dc70:	4798      	blx	r3
	params->_ref--;
   4dc72:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   4dc74:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   4dc76:	3b01      	subs	r3, #1
   4dc78:	b2db      	uxtb	r3, r3
   4dc7a:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   4dc7c:	b122      	cbz	r2, 4dc88 <gatt_indicate_rsp+0x24>
   4dc7e:	b91b      	cbnz	r3, 4dc88 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   4dc80:	4620      	mov	r0, r4
}
   4dc82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   4dc86:	4710      	bx	r2
}
   4dc88:	bd10      	pop	{r4, pc}

0004dc8a <match_uuid>:
	data->attr = attr;
   4dc8a:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   4dc8c:	8091      	strh	r1, [r2, #4]
}
   4dc8e:	2000      	movs	r0, #0
   4dc90:	4770      	bx	lr

0004dc92 <ccc_set_cb>:
}
   4dc92:	2000      	movs	r0, #0
   4dc94:	4770      	bx	lr

0004dc96 <atomic_get>:
   4dc96:	f3bf 8f5b 	dmb	ish
   4dc9a:	6800      	ldr	r0, [r0, #0]
   4dc9c:	f3bf 8f5b 	dmb	ish
}
   4dca0:	4770      	bx	lr

0004dca2 <gen_hash_m>:
{
   4dca2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   4dca4:	6807      	ldr	r7, [r0, #0]
   4dca6:	783d      	ldrb	r5, [r7, #0]
{
   4dca8:	b089      	sub	sp, #36	; 0x24
   4dcaa:	4606      	mov	r6, r0
   4dcac:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   4dcae:	b9dd      	cbnz	r5, 4dce8 <gen_hash_m+0x46>
	switch (u16->val) {
   4dcb0:	887b      	ldrh	r3, [r7, #2]
   4dcb2:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   4dcb6:	d004      	beq.n	4dcc2 <gen_hash_m+0x20>
   4dcb8:	d810      	bhi.n	4dcdc <gen_hash_m+0x3a>
   4dcba:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   4dcbe:	2b03      	cmp	r3, #3
   4dcc0:	d812      	bhi.n	4dce8 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   4dcc2:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4dcc6:	2202      	movs	r2, #2
   4dcc8:	f10d 010a 	add.w	r1, sp, #10
   4dccc:	4620      	mov	r0, r4
   4dcce:	f7fd fe5b 	bl	4b988 <tc_cmac_update>
   4dcd2:	b968      	cbnz	r0, 4dcf0 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   4dcd4:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   4dcd8:	65a2      	str	r2, [r4, #88]	; 0x58
   4dcda:	e006      	b.n	4dcea <gen_hash_m+0x48>
	switch (u16->val) {
   4dcdc:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   4dce0:	33ff      	adds	r3, #255	; 0xff
   4dce2:	b29b      	uxth	r3, r3
   4dce4:	2b04      	cmp	r3, #4
   4dce6:	d91e      	bls.n	4dd26 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   4dce8:	2501      	movs	r5, #1
}
   4dcea:	4628      	mov	r0, r5
   4dcec:	b009      	add	sp, #36	; 0x24
   4dcee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   4dcf0:	887b      	ldrh	r3, [r7, #2]
   4dcf2:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4dcf6:	2202      	movs	r2, #2
   4dcf8:	f10d 010a 	add.w	r1, sp, #10
   4dcfc:	4620      	mov	r0, r4
   4dcfe:	f7fd fe43 	bl	4b988 <tc_cmac_update>
   4dd02:	2800      	cmp	r0, #0
   4dd04:	d0e6      	beq.n	4dcd4 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   4dd06:	2000      	movs	r0, #0
   4dd08:	9000      	str	r0, [sp, #0]
   4dd0a:	aa03      	add	r2, sp, #12
   4dd0c:	6877      	ldr	r7, [r6, #4]
   4dd0e:	2313      	movs	r3, #19
   4dd10:	4631      	mov	r1, r6
   4dd12:	47b8      	blx	r7
		if (len < 0) {
   4dd14:	1e02      	subs	r2, r0, #0
   4dd16:	dbdf      	blt.n	4dcd8 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   4dd18:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4dd1a:	4620      	mov	r0, r4
   4dd1c:	f7fd fe34 	bl	4b988 <tc_cmac_update>
   4dd20:	2800      	cmp	r0, #0
   4dd22:	d1e1      	bne.n	4dce8 <gen_hash_m+0x46>
   4dd24:	e7d6      	b.n	4dcd4 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   4dd26:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4dd2a:	2202      	movs	r2, #2
   4dd2c:	f10d 010a 	add.w	r1, sp, #10
   4dd30:	4620      	mov	r0, r4
   4dd32:	f7fd fe29 	bl	4b988 <tc_cmac_update>
   4dd36:	2800      	cmp	r0, #0
   4dd38:	d0cc      	beq.n	4dcd4 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   4dd3a:	887b      	ldrh	r3, [r7, #2]
   4dd3c:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4dd40:	2202      	movs	r2, #2
   4dd42:	f10d 010a 	add.w	r1, sp, #10
   4dd46:	e7e8      	b.n	4dd1a <gen_hash_m+0x78>

0004dd48 <atomic_or>:
{
   4dd48:	b510      	push	{r4, lr}
   4dd4a:	4603      	mov	r3, r0
}
   4dd4c:	f3bf 8f5b 	dmb	ish
   4dd50:	e853 0f00 	ldrex	r0, [r3]
   4dd54:	ea40 0201 	orr.w	r2, r0, r1
   4dd58:	e843 2400 	strex	r4, r2, [r3]
   4dd5c:	2c00      	cmp	r4, #0
   4dd5e:	d1f7      	bne.n	4dd50 <atomic_or+0x8>
   4dd60:	f3bf 8f5b 	dmb	ish
   4dd64:	bd10      	pop	{r4, pc}

0004dd66 <bt_addr_le_cmp>:
   4dd66:	2207      	movs	r2, #7
   4dd68:	f7fd bf66 	b.w	4bc38 <memcmp>

0004dd6c <find_ccc_cfg>:
{
   4dd6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4dd6e:	4606      	mov	r6, r0
   4dd70:	1c4c      	adds	r4, r1, #1
   4dd72:	f101 053d 	add.w	r5, r1, #61	; 0x3d
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   4dd76:	1e67      	subs	r7, r4, #1
						    &cfg->peer)) {
   4dd78:	4620      	mov	r0, r4
		if (conn) {
   4dd7a:	b14e      	cbz	r6, 4dd90 <find_ccc_cfg+0x24>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   4dd7c:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   4dd80:	4622      	mov	r2, r4
   4dd82:	4630      	mov	r0, r6
   4dd84:	f7ff f84b 	bl	4ce1e <bt_conn_is_peer_addr_le>
   4dd88:	b198      	cbz	r0, 4ddb2 <find_ccc_cfg+0x46>
}
   4dd8a:	4638      	mov	r0, r7
   4dd8c:	b003      	add	sp, #12
   4dd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   4dd90:	4669      	mov	r1, sp
   4dd92:	9600      	str	r6, [sp, #0]
   4dd94:	f8cd 6003 	str.w	r6, [sp, #3]
   4dd98:	f7ff ffe5 	bl	4dd66 <bt_addr_le_cmp>
   4dd9c:	2800      	cmp	r0, #0
   4dd9e:	d0f4      	beq.n	4dd8a <find_ccc_cfg+0x1e>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   4dda0:	f104 030a 	add.w	r3, r4, #10
   4dda4:	42ab      	cmp	r3, r5
   4dda6:	d007      	beq.n	4ddb8 <find_ccc_cfg+0x4c>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   4dda8:	f104 0709 	add.w	r7, r4, #9
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   4ddac:	4618      	mov	r0, r3
						    &cfg->peer)) {
   4ddae:	461c      	mov	r4, r3
   4ddb0:	e7ee      	b.n	4dd90 <find_ccc_cfg+0x24>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   4ddb2:	340a      	adds	r4, #10
   4ddb4:	42ac      	cmp	r4, r5
   4ddb6:	d1de      	bne.n	4dd76 <find_ccc_cfg+0xa>
	return NULL;
   4ddb8:	2700      	movs	r7, #0
   4ddba:	e7e6      	b.n	4dd8a <find_ccc_cfg+0x1e>

0004ddbc <ccc_find_cfg>:
{
   4ddbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4ddc0:	4604      	mov	r4, r0
   4ddc2:	460f      	mov	r7, r1
   4ddc4:	4690      	mov	r8, r2
   4ddc6:	1c46      	adds	r6, r0, #1
   4ddc8:	2500      	movs	r5, #0
		if (id == ccc->cfg[i].id &&
   4ddca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   4ddce:	4543      	cmp	r3, r8
   4ddd0:	d107      	bne.n	4dde2 <ccc_find_cfg+0x26>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   4ddd2:	4639      	mov	r1, r7
   4ddd4:	4630      	mov	r0, r6
   4ddd6:	f7ff ffc6 	bl	4dd66 <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   4ddda:	b910      	cbnz	r0, 4dde2 <ccc_find_cfg+0x26>
			return &ccc->cfg[i];
   4dddc:	1960      	adds	r0, r4, r5
}
   4ddde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   4dde2:	350a      	adds	r5, #10
   4dde4:	2d3c      	cmp	r5, #60	; 0x3c
   4dde6:	f106 060a 	add.w	r6, r6, #10
   4ddea:	d1ee      	bne.n	4ddca <ccc_find_cfg+0xe>
	return NULL;
   4ddec:	2000      	movs	r0, #0
   4ddee:	e7f6      	b.n	4ddde <ccc_find_cfg+0x22>

0004ddf0 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   4ddf0:	2207      	movs	r2, #7
   4ddf2:	f7fd bf31 	b.w	4bc58 <memcpy>

0004ddf6 <cf_write>:
{
   4ddf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4ddfa:	461f      	mov	r7, r3
   4ddfc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   4de00:	2b01      	cmp	r3, #1
{
   4de02:	4606      	mov	r6, r0
   4de04:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   4de06:	d82e      	bhi.n	4de66 <cf_write+0x70>
	if (offset + len > sizeof(cfg->data)) {
   4de08:	443b      	add	r3, r7
   4de0a:	2b01      	cmp	r3, #1
   4de0c:	463d      	mov	r5, r7
   4de0e:	dc2d      	bgt.n	4de6c <cf_write+0x76>
	cfg = find_cf_cfg(conn);
   4de10:	f7e3 fa8a 	bl	31328 <find_cf_cfg>
	if (!cfg) {
   4de14:	4604      	mov	r4, r0
   4de16:	b918      	cbnz	r0, 4de20 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   4de18:	f7e3 fa86 	bl	31328 <find_cf_cfg>
	if (!cfg) {
   4de1c:	4604      	mov	r4, r0
   4de1e:	b340      	cbz	r0, 4de72 <cf_write+0x7c>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   4de20:	b197      	cbz	r7, 4de48 <cf_write+0x52>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   4de22:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   4de24:	f898 2000 	ldrb.w	r2, [r8]
   4de28:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   4de2a:	fa21 f003 	lsr.w	r0, r1, r3
   4de2e:	07c7      	lsls	r7, r0, #31
   4de30:	d503      	bpl.n	4de3a <cf_write+0x44>
		    !(value[i / 8] & BIT(i % 8))) {
   4de32:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   4de36:	07c0      	lsls	r0, r0, #31
   4de38:	d51e      	bpl.n	4de78 <cf_write+0x82>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   4de3a:	3301      	adds	r3, #1
   4de3c:	2b03      	cmp	r3, #3
   4de3e:	d1f4      	bne.n	4de2a <cf_write+0x34>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   4de40:	f002 0207 	and.w	r2, r2, #7
   4de44:	4311      	orrs	r1, r2
   4de46:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   4de48:	f106 0188 	add.w	r1, r6, #136	; 0x88
   4de4c:	1c60      	adds	r0, r4, #1
   4de4e:	f7ff ffcf 	bl	4ddf0 <bt_addr_le_copy>
	cfg->id = conn->id;
   4de52:	4620      	mov	r0, r4
   4de54:	7a33      	ldrb	r3, [r6, #8]
   4de56:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4de5a:	2101      	movs	r1, #1
   4de5c:	f7ff ff74 	bl	4dd48 <atomic_or>
}
   4de60:	4628      	mov	r0, r5
   4de62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4de66:	f06f 0506 	mvn.w	r5, #6
   4de6a:	e7f9      	b.n	4de60 <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   4de6c:	f06f 050c 	mvn.w	r5, #12
   4de70:	e7f6      	b.n	4de60 <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   4de72:	f06f 0510 	mvn.w	r5, #16
   4de76:	e7f3      	b.n	4de60 <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   4de78:	f06f 0512 	mvn.w	r5, #18
   4de7c:	e7f0      	b.n	4de60 <cf_write+0x6a>

0004de7e <clear_ccc_cfg>:
{
   4de7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   4de80:	2500      	movs	r5, #0
{
   4de82:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   4de84:	4669      	mov	r1, sp
   4de86:	3001      	adds	r0, #1
   4de88:	9500      	str	r5, [sp, #0]
   4de8a:	f8cd 5003 	str.w	r5, [sp, #3]
   4de8e:	f7ff ffaf 	bl	4ddf0 <bt_addr_le_copy>
	cfg->id = 0U;
   4de92:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   4de94:	8125      	strh	r5, [r4, #8]
}
   4de96:	b003      	add	sp, #12
   4de98:	bd30      	pop	{r4, r5, pc}

0004de9a <gatt_sub_free>:
{
   4de9a:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   4de9c:	2300      	movs	r3, #0
   4de9e:	4669      	mov	r1, sp
   4dea0:	3001      	adds	r0, #1
   4dea2:	9300      	str	r3, [sp, #0]
   4dea4:	f8cd 3003 	str.w	r3, [sp, #3]
   4dea8:	f7ff ffa2 	bl	4ddf0 <bt_addr_le_copy>
}
   4deac:	b003      	add	sp, #12
   4deae:	f85d fb04 	ldr.w	pc, [sp], #4

0004deb2 <gatt_sub_remove>:
{
   4deb2:	b570      	push	{r4, r5, r6, lr}
   4deb4:	460c      	mov	r4, r1
	if (params) {
   4deb6:	4619      	mov	r1, r3
   4deb8:	b16b      	cbz	r3, 4ded6 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   4deba:	f103 061c 	add.w	r6, r3, #28
	return list->tail;
   4debe:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   4dec0:	69db      	ldr	r3, [r3, #28]
Z_GENLIST_REMOVE(slist, snode)
   4dec2:	b97a      	cbnz	r2, 4dee4 <gatt_sub_remove+0x32>
   4dec4:	42ae      	cmp	r6, r5
	list->head = node;
   4dec6:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   4dec8:	d100      	bne.n	4decc <gatt_sub_remove+0x1a>
	list->tail = node;
   4deca:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   4decc:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   4dece:	680d      	ldr	r5, [r1, #0]
   4ded0:	61cb      	str	r3, [r1, #28]
   4ded2:	461a      	mov	r2, r3
   4ded4:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   4ded6:	68a3      	ldr	r3, [r4, #8]
   4ded8:	b94b      	cbnz	r3, 4deee <gatt_sub_remove+0x3c>
		gatt_sub_free(sub);
   4deda:	4620      	mov	r0, r4
}
   4dedc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gatt_sub_free(sub);
   4dee0:	f7ff bfdb 	b.w	4de9a <gatt_sub_free>
Z_GENLIST_REMOVE(slist, snode)
   4dee4:	42ae      	cmp	r6, r5
	parent->next = child;
   4dee6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   4dee8:	bf08      	it	eq
   4deea:	60e2      	streq	r2, [r4, #12]
}
   4deec:	e7ee      	b.n	4decc <gatt_sub_remove+0x1a>
}
   4deee:	bd70      	pop	{r4, r5, r6, pc}

0004def0 <sc_save>:
{
   4def0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   4def4:	4680      	mov	r8, r0
   4def6:	460f      	mov	r7, r1
   4def8:	4616      	mov	r6, r2
   4defa:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   4defc:	f7e3 fa36 	bl	3136c <find_sc_cfg>
	if (!cfg) {
   4df00:	4604      	mov	r4, r0
   4df02:	b960      	cbnz	r0, 4df1e <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   4df04:	4669      	mov	r1, sp
   4df06:	9000      	str	r0, [sp, #0]
   4df08:	f8cd 0003 	str.w	r0, [sp, #3]
   4df0c:	f7e3 fa2e 	bl	3136c <find_sc_cfg>
		if (!cfg) {
   4df10:	4604      	mov	r4, r0
   4df12:	b1d0      	cbz	r0, 4df4a <sc_save+0x5a>
		cfg->id = id;
   4df14:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   4df18:	4639      	mov	r1, r7
   4df1a:	f7ff ff69 	bl	4ddf0 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   4df1e:	8922      	ldrh	r2, [r4, #8]
   4df20:	8963      	ldrh	r3, [r4, #10]
   4df22:	b972      	cbnz	r2, 4df42 <sc_save+0x52>
   4df24:	b97b      	cbnz	r3, 4df46 <sc_save+0x56>
		cfg->data.start = start;
   4df26:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   4df28:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   4df2a:	4621      	mov	r1, r4
   4df2c:	f811 0b01 	ldrb.w	r0, [r1], #1
   4df30:	f7fe fb59 	bl	4c5e6 <bt_addr_le_is_bonded>
   4df34:	b148      	cbz	r0, 4df4a <sc_save+0x5a>
		sc_store(cfg);
   4df36:	4620      	mov	r0, r4
}
   4df38:	b002      	add	sp, #8
   4df3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   4df3e:	f7e3 bab3 	b.w	314a8 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   4df42:	4296      	cmp	r6, r2
   4df44:	d304      	bcc.n	4df50 <sc_save+0x60>
   4df46:	42ab      	cmp	r3, r5
   4df48:	d3ee      	bcc.n	4df28 <sc_save+0x38>
}
   4df4a:	b002      	add	sp, #8
   4df4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (*end < new_end) {
   4df50:	42ab      	cmp	r3, r5
		*start = new_start;
   4df52:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   4df54:	d2e9      	bcs.n	4df2a <sc_save+0x3a>
   4df56:	e7e7      	b.n	4df28 <sc_save+0x38>

0004df58 <atomic_and>:
{
   4df58:	b510      	push	{r4, lr}
   4df5a:	4603      	mov	r3, r0
}
   4df5c:	f3bf 8f5b 	dmb	ish
   4df60:	e853 0f00 	ldrex	r0, [r3]
   4df64:	ea00 0201 	and.w	r2, r0, r1
   4df68:	e843 2400 	strex	r4, r2, [r3]
   4df6c:	2c00      	cmp	r4, #0
   4df6e:	d1f7      	bne.n	4df60 <atomic_and+0x8>
   4df70:	f3bf 8f5b 	dmb	ish
   4df74:	bd10      	pop	{r4, pc}

0004df76 <gatt_write_ccc_rsp>:
{
   4df76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4df7a:	9c06      	ldr	r4, [sp, #24]
   4df7c:	460e      	mov	r6, r1
   4df7e:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4df80:	f06f 0104 	mvn.w	r1, #4
   4df84:	f104 0018 	add.w	r0, r4, #24
   4df88:	f7ff ffe6 	bl	4df58 <atomic_and>
	if (err) {
   4df8c:	b1fe      	cbz	r6, 4dfce <gatt_write_ccc_rsp+0x58>
		sub = gatt_sub_find(conn);
   4df8e:	4628      	mov	r0, r5
   4df90:	f7e3 fa08 	bl	313a4 <gatt_sub_find>
		if (!sub) {
   4df94:	4601      	mov	r1, r0
   4df96:	b320      	cbz	r0, 4dfe2 <gatt_write_ccc_rsp+0x6c>
	return list->head;
   4df98:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   4df9a:	b14b      	cbz	r3, 4dfb0 <gatt_write_ccc_rsp+0x3a>
	return node->next;
   4df9c:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   4df9e:	f104 071c 	add.w	r7, r4, #28
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   4dfa2:	b12b      	cbz	r3, 4dfb0 <gatt_write_ccc_rsp+0x3a>
			if (node == &params->node) {
   4dfa4:	42bb      	cmp	r3, r7
   4dfa6:	d10b      	bne.n	4dfc0 <gatt_write_ccc_rsp+0x4a>
				gatt_sub_remove(conn, sub, tmp, params);
   4dfa8:	4623      	mov	r3, r4
   4dfaa:	4628      	mov	r0, r5
   4dfac:	f7ff ff81 	bl	4deb2 <gatt_sub_remove>
	if (params->write) {
   4dfb0:	6863      	ldr	r3, [r4, #4]
   4dfb2:	b1b3      	cbz	r3, 4dfe2 <gatt_write_ccc_rsp+0x6c>
		params->write(conn, err, NULL);
   4dfb4:	4631      	mov	r1, r6
   4dfb6:	4628      	mov	r0, r5
   4dfb8:	2200      	movs	r2, #0
}
   4dfba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   4dfbe:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   4dfc0:	b11a      	cbz	r2, 4dfca <gatt_write_ccc_rsp+0x54>
	return node->next;
   4dfc2:	6810      	ldr	r0, [r2, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
   4dfc4:	4613      	mov	r3, r2
   4dfc6:	4602      	mov	r2, r0
   4dfc8:	e7eb      	b.n	4dfa2 <gatt_write_ccc_rsp+0x2c>
   4dfca:	4610      	mov	r0, r2
   4dfcc:	e7fa      	b.n	4dfc4 <gatt_write_ccc_rsp+0x4e>
	} else if (!params->value) {
   4dfce:	8aa3      	ldrh	r3, [r4, #20]
   4dfd0:	2b00      	cmp	r3, #0
   4dfd2:	d1ed      	bne.n	4dfb0 <gatt_write_ccc_rsp+0x3a>
		params->notify(conn, params, NULL, 0);
   4dfd4:	6827      	ldr	r7, [r4, #0]
   4dfd6:	4633      	mov	r3, r6
   4dfd8:	4632      	mov	r2, r6
   4dfda:	4621      	mov	r1, r4
   4dfdc:	4628      	mov	r0, r5
   4dfde:	47b8      	blx	r7
   4dfe0:	e7e6      	b.n	4dfb0 <gatt_write_ccc_rsp+0x3a>
}
   4dfe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004dfe6 <gatt_req_send>:
{
   4dfe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4dfea:	4606      	mov	r6, r0
   4dfec:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   4dfee:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   4dff2:	2100      	movs	r1, #0
{
   4dff4:	f89d a020 	ldrb.w	sl, [sp, #32]
   4dff8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   4dffc:	4617      	mov	r7, r2
   4dffe:	461d      	mov	r5, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   4e000:	f7e3 f85c 	bl	310bc <bt_att_req_alloc>
	if (!req) {
   4e004:	4604      	mov	r4, r0
   4e006:	b180      	cbz	r0, 4e02a <gatt_req_send+0x44>
	req->att_op = op;
   4e008:	f880 a011 	strb.w	sl, [r0, #17]
	req->len = len;
   4e00c:	f8c0 8014 	str.w	r8, [r0, #20]
	req->encode = encode;
   4e010:	60c5      	str	r5, [r0, #12]
	req->func = func;
   4e012:	f8c0 9004 	str.w	r9, [r0, #4]
	req->user_data = params;
   4e016:	6187      	str	r7, [r0, #24]
	buf = bt_att_create_pdu(conn, op, len);
   4e018:	4642      	mov	r2, r8
   4e01a:	4651      	mov	r1, sl
   4e01c:	4630      	mov	r0, r6
   4e01e:	f7ff fcda 	bl	4d9d6 <bt_att_create_pdu>
	if (!buf) {
   4e022:	b938      	cbnz	r0, 4e034 <gatt_req_send+0x4e>
		bt_att_req_free(req);
   4e024:	4620      	mov	r0, r4
   4e026:	f7e3 f86b 	bl	31100 <bt_att_req_free>
		return -ENOMEM;
   4e02a:	f06f 050b 	mvn.w	r5, #11
}
   4e02e:	4628      	mov	r0, r5
   4e030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->buf = buf;
   4e034:	60a0      	str	r0, [r4, #8]
	err = encode(buf, len, params);
   4e036:	463a      	mov	r2, r7
   4e038:	4641      	mov	r1, r8
   4e03a:	47a8      	blx	r5
	if (err) {
   4e03c:	4605      	mov	r5, r0
   4e03e:	b118      	cbz	r0, 4e048 <gatt_req_send+0x62>
		bt_att_req_free(req);
   4e040:	4620      	mov	r0, r4
   4e042:	f7e3 f85d 	bl	31100 <bt_att_req_free>
   4e046:	e7f2      	b.n	4e02e <gatt_req_send+0x48>
	err = bt_att_req_send(conn, req);
   4e048:	4621      	mov	r1, r4
   4e04a:	4630      	mov	r0, r6
   4e04c:	f7ff fdc4 	bl	4dbd8 <bt_att_req_send>
	if (err) {
   4e050:	4605      	mov	r5, r0
   4e052:	2800      	cmp	r0, #0
   4e054:	d0eb      	beq.n	4e02e <gatt_req_send+0x48>
   4e056:	e7f3      	b.n	4e040 <gatt_req_send+0x5a>

0004e058 <read_included_uuid_encode>:
{
   4e058:	b510      	push	{r4, lr}
	return net_buf_simple_add(&buf->b, len);
   4e05a:	2102      	movs	r1, #2
   4e05c:	3008      	adds	r0, #8
   4e05e:	4614      	mov	r4, r2
   4e060:	f001 fddb 	bl	4fc1a <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   4e064:	8963      	ldrh	r3, [r4, #10]
   4e066:	8003      	strh	r3, [r0, #0]
}
   4e068:	2000      	movs	r0, #0
   4e06a:	bd10      	pop	{r4, pc}

0004e06c <gatt_find_info_encode>:
{
   4e06c:	b510      	push	{r4, lr}
   4e06e:	2104      	movs	r1, #4
   4e070:	3008      	adds	r0, #8
   4e072:	4614      	mov	r4, r2
   4e074:	f001 fdd1 	bl	4fc1a <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   4e078:	8923      	ldrh	r3, [r4, #8]
   4e07a:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   4e07c:	89e3      	ldrh	r3, [r4, #14]
   4e07e:	8043      	strh	r3, [r0, #2]
}
   4e080:	2000      	movs	r0, #0
   4e082:	bd10      	pop	{r4, pc}

0004e084 <gatt_read_group_encode>:
{
   4e084:	b538      	push	{r3, r4, r5, lr}
   4e086:	f100 0408 	add.w	r4, r0, #8
   4e08a:	2104      	movs	r1, #4
   4e08c:	4620      	mov	r0, r4
   4e08e:	4615      	mov	r5, r2
   4e090:	f001 fdc3 	bl	4fc1a <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   4e094:	892b      	ldrh	r3, [r5, #8]
   4e096:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   4e098:	89eb      	ldrh	r3, [r5, #14]
   4e09a:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4e09c:	7c2b      	ldrb	r3, [r5, #16]
   4e09e:	b933      	cbnz	r3, 4e0ae <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   4e0a0:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   4e0a4:	4620      	mov	r0, r4
   4e0a6:	f001 fdcf 	bl	4fc48 <net_buf_simple_add_le16>
}
   4e0aa:	2000      	movs	r0, #0
   4e0ac:	bd38      	pop	{r3, r4, r5, pc}
   4e0ae:	f642 0101 	movw	r1, #10241	; 0x2801
   4e0b2:	e7f7      	b.n	4e0a4 <gatt_read_group_encode+0x20>

0004e0b4 <gatt_read_type_encode>:
{
   4e0b4:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   4e0b6:	f100 0408 	add.w	r4, r0, #8
   4e0ba:	2104      	movs	r1, #4
   4e0bc:	4620      	mov	r0, r4
   4e0be:	4615      	mov	r5, r2
   4e0c0:	f001 fdab 	bl	4fc1a <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   4e0c4:	892b      	ldrh	r3, [r5, #8]
   4e0c6:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   4e0c8:	89eb      	ldrh	r3, [r5, #14]
   4e0ca:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   4e0cc:	7c2b      	ldrb	r3, [r5, #16]
   4e0ce:	2b02      	cmp	r3, #2
   4e0d0:	d004      	beq.n	4e0dc <gatt_read_type_encode+0x28>
   4e0d2:	2b03      	cmp	r3, #3
   4e0d4:	d009      	beq.n	4e0ea <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   4e0d6:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   4e0d8:	8859      	ldrh	r1, [r3, #2]
   4e0da:	e001      	b.n	4e0e0 <gatt_read_type_encode+0x2c>
   4e0dc:	f642 0102 	movw	r1, #10242	; 0x2802
   4e0e0:	4620      	mov	r0, r4
   4e0e2:	f001 fdb1 	bl	4fc48 <net_buf_simple_add_le16>
}
   4e0e6:	2000      	movs	r0, #0
   4e0e8:	bd38      	pop	{r3, r4, r5, pc}
   4e0ea:	f642 0103 	movw	r1, #10243	; 0x2803
   4e0ee:	e7f7      	b.n	4e0e0 <gatt_read_type_encode+0x2c>

0004e0f0 <sc_set>:
{
   4e0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4e0f4:	460e      	mov	r6, r1
   4e0f6:	b086      	sub	sp, #24
   4e0f8:	4617      	mov	r7, r2
   4e0fa:	4698      	mov	r8, r3
	if (!name) {
   4e0fc:	4605      	mov	r5, r0
   4e0fe:	b928      	cbnz	r0, 4e10c <sc_set+0x1c>
		return -EINVAL;
   4e100:	f06f 0415 	mvn.w	r4, #21
}
   4e104:	4620      	mov	r0, r4
   4e106:	b006      	add	sp, #24
   4e108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   4e10c:	a902      	add	r1, sp, #8
   4e10e:	f7fd fe6b 	bl	4bde8 <bt_settings_decode_key>
	if (err) {
   4e112:	4604      	mov	r4, r0
   4e114:	2800      	cmp	r0, #0
   4e116:	d1f3      	bne.n	4e100 <sc_set+0x10>
	settings_name_next(name, &next);
   4e118:	a901      	add	r1, sp, #4
   4e11a:	4628      	mov	r0, r5
   4e11c:	f7fc facb 	bl	4a6b6 <settings_name_next>
	if (!next) {
   4e120:	9801      	ldr	r0, [sp, #4]
   4e122:	b998      	cbnz	r0, 4e14c <sc_set+0x5c>
	cfg = find_sc_cfg(id, &addr);
   4e124:	a902      	add	r1, sp, #8
   4e126:	2000      	movs	r0, #0
   4e128:	f7e3 f920 	bl	3136c <find_sc_cfg>
	if (!cfg && len_rd) {
   4e12c:	4605      	mov	r5, r0
   4e12e:	bb08      	cbnz	r0, 4e174 <sc_set+0x84>
   4e130:	2e00      	cmp	r6, #0
   4e132:	d0e7      	beq.n	4e104 <sc_set+0x14>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   4e134:	a904      	add	r1, sp, #16
   4e136:	9004      	str	r0, [sp, #16]
   4e138:	4604      	mov	r4, r0
   4e13a:	f8cd 0013 	str.w	r0, [sp, #19]
   4e13e:	f7e3 f915 	bl	3136c <find_sc_cfg>
		if (!cfg) {
   4e142:	4605      	mov	r5, r0
   4e144:	b948      	cbnz	r0, 4e15a <sc_set+0x6a>
			return -ENOMEM;
   4e146:	f06f 040b 	mvn.w	r4, #11
   4e14a:	e7db      	b.n	4e104 <sc_set+0x14>
		unsigned long next_id = strtoul(next, NULL, 10);
   4e14c:	220a      	movs	r2, #10
   4e14e:	4621      	mov	r1, r4
   4e150:	f7fd fcca 	bl	4bae8 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   4e154:	2800      	cmp	r0, #0
   4e156:	d0e5      	beq.n	4e124 <sc_set+0x34>
   4e158:	e7d2      	b.n	4e100 <sc_set+0x10>
		cfg->id = id;
   4e15a:	f800 4b01 	strb.w	r4, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   4e15e:	a902      	add	r1, sp, #8
   4e160:	f7ff fe46 	bl	4ddf0 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   4e164:	2204      	movs	r2, #4
   4e166:	f105 0108 	add.w	r1, r5, #8
   4e16a:	4640      	mov	r0, r8
   4e16c:	47b8      	blx	r7
		if (len < 0) {
   4e16e:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   4e172:	e7c7      	b.n	4e104 <sc_set+0x14>
	if (len_rd) {
   4e174:	2e00      	cmp	r6, #0
   4e176:	d1f5      	bne.n	4e164 <sc_set+0x74>
		memset(cfg, 0, sizeof(*cfg));
   4e178:	220c      	movs	r2, #12
   4e17a:	4631      	mov	r1, r6
   4e17c:	f7fd fd77 	bl	4bc6e <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   4e180:	e7c0      	b.n	4e104 <sc_set+0x14>

0004e182 <clear_cf_cfg>:
{
   4e182:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4e184:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   4e186:	2500      	movs	r5, #0
   4e188:	4669      	mov	r1, sp
   4e18a:	3001      	adds	r0, #1
   4e18c:	9500      	str	r5, [sp, #0]
   4e18e:	f8cd 5003 	str.w	r5, [sp, #3]
   4e192:	f7ff fe2d 	bl	4ddf0 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   4e196:	f104 0008 	add.w	r0, r4, #8
   4e19a:	2201      	movs	r2, #1
   4e19c:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   4e19e:	340c      	adds	r4, #12
   4e1a0:	f7fd fd65 	bl	4bc6e <memset>
   4e1a4:	f3bf 8f5b 	dmb	ish
   4e1a8:	e854 3f00 	ldrex	r3, [r4]
   4e1ac:	e844 5200 	strex	r2, r5, [r4]
   4e1b0:	2a00      	cmp	r2, #0
   4e1b2:	d1f9      	bne.n	4e1a8 <clear_cf_cfg+0x26>
   4e1b4:	f3bf 8f5b 	dmb	ish
}
   4e1b8:	b003      	add	sp, #12
   4e1ba:	bd30      	pop	{r4, r5, pc}

0004e1bc <cf_set>:
{
   4e1bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   4e1c0:	4688      	mov	r8, r1
   4e1c2:	4616      	mov	r6, r2
   4e1c4:	461f      	mov	r7, r3
	if (!name) {
   4e1c6:	4605      	mov	r5, r0
   4e1c8:	b928      	cbnz	r0, 4e1d6 <cf_set+0x1a>
		return -EINVAL;
   4e1ca:	f06f 0415 	mvn.w	r4, #21
}
   4e1ce:	4620      	mov	r0, r4
   4e1d0:	b004      	add	sp, #16
   4e1d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   4e1d6:	a902      	add	r1, sp, #8
   4e1d8:	f7fd fe06 	bl	4bde8 <bt_settings_decode_key>
	if (err) {
   4e1dc:	4604      	mov	r4, r0
   4e1de:	2800      	cmp	r0, #0
   4e1e0:	d1f3      	bne.n	4e1ca <cf_set+0xe>
	settings_name_next(name, &next);
   4e1e2:	a901      	add	r1, sp, #4
   4e1e4:	4628      	mov	r0, r5
   4e1e6:	f7fc fa66 	bl	4a6b6 <settings_name_next>
	if (!next) {
   4e1ea:	9801      	ldr	r0, [sp, #4]
   4e1ec:	b9d0      	cbnz	r0, 4e224 <cf_set+0x68>
	cfg = find_cf_cfg_by_addr(id, &addr);
   4e1ee:	a902      	add	r1, sp, #8
   4e1f0:	2000      	movs	r0, #0
   4e1f2:	f7e3 f8f9 	bl	313e8 <find_cf_cfg_by_addr>
	if (!cfg) {
   4e1f6:	4605      	mov	r5, r0
   4e1f8:	b948      	cbnz	r0, 4e20e <cf_set+0x52>
		cfg = find_cf_cfg(NULL);
   4e1fa:	f7e3 f895 	bl	31328 <find_cf_cfg>
		if (!cfg) {
   4e1fe:	4605      	mov	r5, r0
   4e200:	b1d8      	cbz	r0, 4e23a <cf_set+0x7e>
		cfg->id = id;
   4e202:	2300      	movs	r3, #0
   4e204:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   4e208:	a902      	add	r1, sp, #8
   4e20a:	f7ff fdf1 	bl	4ddf0 <bt_addr_le_copy>
	if (len_rd) {
   4e20e:	f1b8 0f00 	cmp.w	r8, #0
   4e212:	d00e      	beq.n	4e232 <cf_set+0x76>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   4e214:	2201      	movs	r2, #1
   4e216:	f105 0108 	add.w	r1, r5, #8
   4e21a:	4638      	mov	r0, r7
   4e21c:	47b0      	blx	r6
		if (len < 0) {
   4e21e:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   4e222:	e7d4      	b.n	4e1ce <cf_set+0x12>
		unsigned long next_id = strtoul(next, NULL, 10);
   4e224:	220a      	movs	r2, #10
   4e226:	4621      	mov	r1, r4
   4e228:	f7fd fc5e 	bl	4bae8 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   4e22c:	2800      	cmp	r0, #0
   4e22e:	d0de      	beq.n	4e1ee <cf_set+0x32>
   4e230:	e7cb      	b.n	4e1ca <cf_set+0xe>
		clear_cf_cfg(cfg);
   4e232:	4628      	mov	r0, r5
   4e234:	f7ff ffa5 	bl	4e182 <clear_cf_cfg>
   4e238:	e7c9      	b.n	4e1ce <cf_set+0x12>
			return -ENOMEM;
   4e23a:	f06f 040b 	mvn.w	r4, #11
   4e23e:	e7c6      	b.n	4e1ce <cf_set+0x12>

0004e240 <gatt_find_type_encode>:
{
   4e240:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   4e242:	f100 0508 	add.w	r5, r0, #8
   4e246:	2106      	movs	r1, #6
   4e248:	4628      	mov	r0, r5
   4e24a:	4614      	mov	r4, r2
   4e24c:	f001 fce5 	bl	4fc1a <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   4e250:	8923      	ldrh	r3, [r4, #8]
   4e252:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   4e254:	89e3      	ldrh	r3, [r4, #14]
   4e256:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4e258:	7c23      	ldrb	r3, [r4, #16]
	switch (params->uuid->type) {
   4e25a:	6821      	ldr	r1, [r4, #0]
		uuid_val = BT_UUID_GATT_PRIMARY_VAL;
   4e25c:	2b00      	cmp	r3, #0
   4e25e:	f642 0301 	movw	r3, #10241	; 0x2801
   4e262:	bf08      	it	eq
   4e264:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   4e268:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   4e26a:	780b      	ldrb	r3, [r1, #0]
   4e26c:	b11b      	cbz	r3, 4e276 <gatt_find_type_encode+0x36>
   4e26e:	2b02      	cmp	r3, #2
   4e270:	d006      	beq.n	4e280 <gatt_find_type_encode+0x40>
}
   4e272:	2000      	movs	r0, #0
   4e274:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   4e276:	8849      	ldrh	r1, [r1, #2]
   4e278:	4628      	mov	r0, r5
   4e27a:	f001 fce5 	bl	4fc48 <net_buf_simple_add_le16>
}
   4e27e:	e7f8      	b.n	4e272 <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   4e280:	2210      	movs	r2, #16
   4e282:	3101      	adds	r1, #1
   4e284:	4628      	mov	r0, r5
   4e286:	f001 fcce 	bl	4fc26 <net_buf_simple_add_mem>
   4e28a:	e7f2      	b.n	4e272 <gatt_find_type_encode+0x32>

0004e28c <sc_clear>:
{
   4e28c:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4e28e:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   4e292:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4e294:	4631      	mov	r1, r6
   4e296:	7a00      	ldrb	r0, [r0, #8]
   4e298:	f7fe f9a5 	bl	4c5e6 <bt_addr_le_is_bonded>
   4e29c:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   4e29e:	4631      	mov	r1, r6
   4e2a0:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4e2a2:	b11d      	cbz	r5, 4e2ac <sc_clear+0x20>
}
   4e2a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   4e2a8:	f7e3 ba2e 	b.w	31708 <bt_gatt_clear_sc>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   4e2ac:	f7e3 f85e 	bl	3136c <find_sc_cfg>
		if (cfg) {
   4e2b0:	b128      	cbz	r0, 4e2be <sc_clear+0x32>
	memset(cfg, 0, sizeof(*cfg));
   4e2b2:	4629      	mov	r1, r5
   4e2b4:	220c      	movs	r2, #12
}
   4e2b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   4e2ba:	f7fd bcd8 	b.w	4bc6e <memset>
}
   4e2be:	bd70      	pop	{r4, r5, r6, pc}

0004e2c0 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   4e2c0:	2a02      	cmp	r2, #2
{
   4e2c2:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   4e2c4:	d108      	bne.n	4e2d8 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   4e2c6:	2300      	movs	r3, #0
   4e2c8:	f100 0188 	add.w	r1, r0, #136	; 0x88
   4e2cc:	461a      	mov	r2, r3
   4e2ce:	7a00      	ldrb	r0, [r0, #8]
   4e2d0:	f7ff fe0e 	bl	4def0 <sc_save>
}
   4e2d4:	2002      	movs	r0, #2
   4e2d6:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   4e2d8:	f7ff ffd8 	bl	4e28c <sc_clear>
   4e2dc:	e7fa      	b.n	4e2d4 <sc_ccc_cfg_write+0x14>

0004e2de <read_appearance>:
{
   4e2de:	b513      	push	{r0, r1, r4, lr}
   4e2e0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   4e2e4:	4610      	mov	r0, r2
	if (offset > value_len) {
   4e2e6:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   4e2e8:	f240 32c1 	movw	r2, #961	; 0x3c1
   4e2ec:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   4e2f0:	d80d      	bhi.n	4e30e <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   4e2f2:	f1c1 0402 	rsb	r4, r1, #2
   4e2f6:	429c      	cmp	r4, r3
   4e2f8:	bfa8      	it	ge
   4e2fa:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   4e2fc:	f10d 0306 	add.w	r3, sp, #6
   4e300:	4622      	mov	r2, r4
   4e302:	4419      	add	r1, r3
   4e304:	f7fd fca8 	bl	4bc58 <memcpy>
}
   4e308:	4620      	mov	r0, r4
   4e30a:	b002      	add	sp, #8
   4e30c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e30e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   4e312:	e7f9      	b.n	4e308 <read_appearance+0x2a>

0004e314 <read_name>:
{
   4e314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4e318:	4698      	mov	r8, r3
   4e31a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   4e31e:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   4e320:	f7e0 f8f6 	bl	2e510 <bt_get_name>
   4e324:	4607      	mov	r7, r0
				 strlen(name));
   4e326:	f7fd fc60 	bl	4bbea <strlen>
	if (offset > value_len) {
   4e32a:	b283      	uxth	r3, r0
   4e32c:	42b3      	cmp	r3, r6
   4e32e:	d30c      	bcc.n	4e34a <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   4e330:	1b9c      	subs	r4, r3, r6
   4e332:	4544      	cmp	r4, r8
   4e334:	bfa8      	it	ge
   4e336:	4644      	movge	r4, r8
   4e338:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   4e33a:	4622      	mov	r2, r4
   4e33c:	19b9      	adds	r1, r7, r6
   4e33e:	4628      	mov	r0, r5
   4e340:	f7fd fc8a 	bl	4bc58 <memcpy>
}
   4e344:	4620      	mov	r0, r4
   4e346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e34a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   4e34e:	e7f9      	b.n	4e344 <read_name+0x30>

0004e350 <cf_read>:
{
   4e350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4e352:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   4e354:	2300      	movs	r3, #0
{
   4e356:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   4e35a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   4e35e:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   4e360:	f7e2 ffe2 	bl	31328 <find_cf_cfg>
	if (cfg) {
   4e364:	b128      	cbz	r0, 4e372 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   4e366:	f100 0108 	add.w	r1, r0, #8
   4e36a:	2201      	movs	r2, #1
   4e36c:	a801      	add	r0, sp, #4
   4e36e:	f7fd fc73 	bl	4bc58 <memcpy>
	if (offset > value_len) {
   4e372:	2e01      	cmp	r6, #1
   4e374:	d80d      	bhi.n	4e392 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   4e376:	f1c6 0401 	rsb	r4, r6, #1
   4e37a:	42bc      	cmp	r4, r7
   4e37c:	bfa8      	it	ge
   4e37e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   4e380:	ab01      	add	r3, sp, #4
   4e382:	4622      	mov	r2, r4
   4e384:	1999      	adds	r1, r3, r6
   4e386:	4628      	mov	r0, r5
   4e388:	f7fd fc66 	bl	4bc58 <memcpy>
}
   4e38c:	4620      	mov	r0, r4
   4e38e:	b003      	add	sp, #12
   4e390:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e392:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   4e396:	e7f9      	b.n	4e38c <cf_read+0x3c>

0004e398 <bt_gatt_attr_read_service>:
{
   4e398:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   4e39a:	68c9      	ldr	r1, [r1, #12]
{
   4e39c:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   4e39e:	780a      	ldrb	r2, [r1, #0]
{
   4e3a0:	461c      	mov	r4, r3
   4e3a2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   4e3a6:	b992      	cbnz	r2, 4e3ce <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   4e3a8:	884a      	ldrh	r2, [r1, #2]
   4e3aa:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   4e3ae:	2b02      	cmp	r3, #2
   4e3b0:	d818      	bhi.n	4e3e4 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   4e3b2:	f1c3 0202 	rsb	r2, r3, #2
   4e3b6:	4294      	cmp	r4, r2
   4e3b8:	bfa8      	it	ge
   4e3ba:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   4e3bc:	4622      	mov	r2, r4
   4e3be:	f10d 0106 	add.w	r1, sp, #6
   4e3c2:	4419      	add	r1, r3
   4e3c4:	f7fd fc48 	bl	4bc58 <memcpy>
}
   4e3c8:	4620      	mov	r0, r4
   4e3ca:	b002      	add	sp, #8
   4e3cc:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   4e3ce:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   4e3d0:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   4e3d4:	d806      	bhi.n	4e3e4 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   4e3d6:	f1c3 0210 	rsb	r2, r3, #16
   4e3da:	4294      	cmp	r4, r2
   4e3dc:	bfa8      	it	ge
   4e3de:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   4e3e0:	4622      	mov	r2, r4
   4e3e2:	e7ee      	b.n	4e3c2 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e3e4:	f06f 0406 	mvn.w	r4, #6
   4e3e8:	e7ee      	b.n	4e3c8 <bt_gatt_attr_read_service+0x30>

0004e3ea <bt_gatt_attr_read_ccc>:
{
   4e3ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   4e3ec:	68c9      	ldr	r1, [r1, #12]
{
   4e3ee:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   4e3f2:	4615      	mov	r5, r2
   4e3f4:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   4e3f6:	f7ff fcb9 	bl	4dd6c <find_ccc_cfg>
	if (cfg) {
   4e3fa:	b100      	cbz	r0, 4e3fe <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   4e3fc:	8900      	ldrh	r0, [r0, #8]
   4e3fe:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   4e402:	2e02      	cmp	r6, #2
   4e404:	d80e      	bhi.n	4e424 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   4e406:	f1c6 0402 	rsb	r4, r6, #2
   4e40a:	42bc      	cmp	r4, r7
   4e40c:	bfa8      	it	ge
   4e40e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   4e410:	f10d 0306 	add.w	r3, sp, #6
   4e414:	4622      	mov	r2, r4
   4e416:	1999      	adds	r1, r3, r6
   4e418:	4628      	mov	r0, r5
   4e41a:	f7fd fc1d 	bl	4bc58 <memcpy>
}
   4e41e:	4620      	mov	r0, r4
   4e420:	b003      	add	sp, #12
   4e422:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e424:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   4e428:	e7f9      	b.n	4e41e <bt_gatt_attr_read_ccc+0x34>

0004e42a <gatt_write_ccc_buf>:
{
   4e42a:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   4e42c:	f100 0508 	add.w	r5, r0, #8
   4e430:	2102      	movs	r1, #2
   4e432:	4628      	mov	r0, r5
   4e434:	4614      	mov	r4, r2
   4e436:	f001 fbf0 	bl	4fc1a <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   4e43a:	8963      	ldrh	r3, [r4, #10]
   4e43c:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   4e43e:	8aa1      	ldrh	r1, [r4, #20]
   4e440:	4628      	mov	r0, r5
   4e442:	f001 fc01 	bl	4fc48 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4e446:	2104      	movs	r1, #4
   4e448:	f104 0018 	add.w	r0, r4, #24
   4e44c:	f7ff fc7c 	bl	4dd48 <atomic_or>
}
   4e450:	2000      	movs	r0, #0
   4e452:	bd38      	pop	{r3, r4, r5, pc}

0004e454 <sc_restore_rsp>:
{
   4e454:	b538      	push	{r3, r4, r5, lr}
   4e456:	4604      	mov	r4, r0
   4e458:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   4e45a:	f7e2 ff65 	bl	31328 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   4e45e:	b130      	cbz	r0, 4e46e <sc_restore_rsp+0x1a>
   4e460:	7a03      	ldrb	r3, [r0, #8]
   4e462:	07db      	lsls	r3, r3, #31
   4e464:	d503      	bpl.n	4e46e <sc_restore_rsp+0x1a>
   4e466:	2101      	movs	r1, #1
   4e468:	300c      	adds	r0, #12
   4e46a:	f7ff fc6d 	bl	4dd48 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   4e46e:	b985      	cbnz	r5, 4e492 <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   4e470:	7a20      	ldrb	r0, [r4, #8]
   4e472:	f104 0188 	add.w	r1, r4, #136	; 0x88
   4e476:	f7e2 ff79 	bl	3136c <find_sc_cfg>
		if (sc_cfg) {
   4e47a:	4604      	mov	r4, r0
   4e47c:	b148      	cbz	r0, 4e492 <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   4e47e:	4629      	mov	r1, r5
   4e480:	2204      	movs	r2, #4
   4e482:	3008      	adds	r0, #8
   4e484:	f7fd fbf3 	bl	4bc6e <memset>
		sc_store(cfg);
   4e488:	4620      	mov	r0, r4
}
   4e48a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   4e48e:	f7e3 b80b 	b.w	314a8 <sc_store>
}
   4e492:	bd38      	pop	{r3, r4, r5, pc}

0004e494 <bt_gatt_attr_read>:
{
   4e494:	b510      	push	{r4, lr}
   4e496:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   4e49a:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   4e49e:	42a1      	cmp	r1, r4
{
   4e4a0:	4610      	mov	r0, r2
	if (offset > value_len) {
   4e4a2:	d80b      	bhi.n	4e4bc <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   4e4a4:	1a64      	subs	r4, r4, r1
   4e4a6:	429c      	cmp	r4, r3
   4e4a8:	bfa8      	it	ge
   4e4aa:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   4e4ac:	9b03      	ldr	r3, [sp, #12]
   4e4ae:	b2a4      	uxth	r4, r4
   4e4b0:	4622      	mov	r2, r4
   4e4b2:	4419      	add	r1, r3
   4e4b4:	f7fd fbd0 	bl	4bc58 <memcpy>
}
   4e4b8:	4620      	mov	r0, r4
   4e4ba:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e4bc:	f06f 0406 	mvn.w	r4, #6
   4e4c0:	e7fa      	b.n	4e4b8 <bt_gatt_attr_read+0x24>

0004e4c2 <bt_gatt_attr_value_handle>:
{
   4e4c2:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   4e4c4:	4604      	mov	r4, r0
   4e4c6:	b910      	cbnz	r0, 4e4ce <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   4e4c8:	2000      	movs	r0, #0
}
   4e4ca:	b002      	add	sp, #8
   4e4cc:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   4e4ce:	2300      	movs	r3, #0
   4e4d0:	f88d 3004 	strb.w	r3, [sp, #4]
   4e4d4:	6800      	ldr	r0, [r0, #0]
   4e4d6:	f642 0303 	movw	r3, #10243	; 0x2803
   4e4da:	a901      	add	r1, sp, #4
   4e4dc:	f8ad 3006 	strh.w	r3, [sp, #6]
   4e4e0:	f7fd fca8 	bl	4be34 <bt_uuid_cmp>
   4e4e4:	2800      	cmp	r0, #0
   4e4e6:	d1ef      	bne.n	4e4c8 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   4e4e8:	68e3      	ldr	r3, [r4, #12]
   4e4ea:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   4e4ec:	2800      	cmp	r0, #0
   4e4ee:	d1ec      	bne.n	4e4ca <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   4e4f0:	4620      	mov	r0, r4
   4e4f2:	f7e3 fa45 	bl	31980 <bt_gatt_attr_get_handle>
   4e4f6:	3001      	adds	r0, #1
   4e4f8:	b280      	uxth	r0, r0
	return handle;
   4e4fa:	e7e6      	b.n	4e4ca <bt_gatt_attr_value_handle+0x8>

0004e4fc <bt_gatt_attr_read_chrc>:
{
   4e4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   4e4fe:	68cc      	ldr	r4, [r1, #12]
{
   4e500:	b087      	sub	sp, #28
   4e502:	4608      	mov	r0, r1
   4e504:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   4e506:	79a3      	ldrb	r3, [r4, #6]
   4e508:	f88d 3004 	strb.w	r3, [sp, #4]
{
   4e50c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   4e510:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   4e512:	f7ff ffd6 	bl	4e4c2 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   4e516:	6821      	ldr	r1, [r4, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   4e518:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   4e51c:	780b      	ldrb	r3, [r1, #0]
   4e51e:	b99b      	cbnz	r3, 4e548 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   4e520:	884b      	ldrh	r3, [r1, #2]
   4e522:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   4e526:	2405      	movs	r4, #5
	if (offset > value_len) {
   4e528:	42b4      	cmp	r4, r6
   4e52a:	d315      	bcc.n	4e558 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   4e52c:	1ba4      	subs	r4, r4, r6
   4e52e:	42bc      	cmp	r4, r7
   4e530:	bfa8      	it	ge
   4e532:	463c      	movge	r4, r7
   4e534:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   4e536:	ab01      	add	r3, sp, #4
   4e538:	4622      	mov	r2, r4
   4e53a:	1999      	adds	r1, r3, r6
   4e53c:	4628      	mov	r0, r5
   4e53e:	f7fd fb8b 	bl	4bc58 <memcpy>
}
   4e542:	4620      	mov	r0, r4
   4e544:	b007      	add	sp, #28
   4e546:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   4e548:	2210      	movs	r2, #16
   4e54a:	3101      	adds	r1, #1
   4e54c:	f10d 0007 	add.w	r0, sp, #7
   4e550:	f7fd fb82 	bl	4bc58 <memcpy>
		value_len += 16U;
   4e554:	2413      	movs	r4, #19
   4e556:	e7e7      	b.n	4e528 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e558:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   4e55c:	e7f1      	b.n	4e542 <bt_gatt_attr_read_chrc+0x46>

0004e55e <bt_gatt_foreach_attr>:
{
   4e55e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   4e560:	e9cd 2301 	strd	r2, r3, [sp, #4]
   4e564:	2300      	movs	r3, #0
   4e566:	9300      	str	r3, [sp, #0]
   4e568:	461a      	mov	r2, r3
   4e56a:	f7e3 fa39 	bl	319e0 <bt_gatt_foreach_attr_type>
}
   4e56e:	b005      	add	sp, #20
   4e570:	f85d fb04 	ldr.w	pc, [sp], #4

0004e574 <bt_gatt_check_perm>:
{
   4e574:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   4e576:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   4e578:	7c8b      	ldrb	r3, [r1, #18]
{
   4e57a:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   4e57c:	d504      	bpl.n	4e588 <bt_gatt_check_perm+0x14>
   4e57e:	f013 0f15 	tst.w	r3, #21
   4e582:	d01e      	beq.n	4e5c2 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   4e584:	6848      	ldr	r0, [r1, #4]
   4e586:	b1e0      	cbz	r0, 4e5c2 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   4e588:	0790      	lsls	r0, r2, #30
   4e58a:	d504      	bpl.n	4e596 <bt_gatt_check_perm+0x22>
   4e58c:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   4e590:	d019      	beq.n	4e5c6 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   4e592:	6889      	ldr	r1, [r1, #8]
   4e594:	b1b9      	cbz	r1, 4e5c6 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   4e596:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   4e59a:	f014 0f30 	tst.w	r4, #48	; 0x30
   4e59e:	d103      	bne.n	4e5a8 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   4e5a0:	f014 000c 	ands.w	r0, r4, #12
   4e5a4:	d107      	bne.n	4e5b6 <bt_gatt_check_perm+0x42>
}
   4e5a6:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   4e5a8:	4628      	mov	r0, r5
   4e5aa:	f7fe fc36 	bl	4ce1a <bt_conn_get_security>
   4e5ae:	2802      	cmp	r0, #2
   4e5b0:	d8f6      	bhi.n	4e5a0 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   4e5b2:	2005      	movs	r0, #5
   4e5b4:	e7f7      	b.n	4e5a6 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   4e5b6:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   4e5b8:	2b00      	cmp	r3, #0
   4e5ba:	bf14      	ite	ne
   4e5bc:	2000      	movne	r0, #0
   4e5be:	200f      	moveq	r0, #15
   4e5c0:	e7f1      	b.n	4e5a6 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   4e5c2:	2002      	movs	r0, #2
   4e5c4:	e7ef      	b.n	4e5a6 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   4e5c6:	2003      	movs	r0, #3
   4e5c8:	e7ed      	b.n	4e5a6 <bt_gatt_check_perm+0x32>

0004e5ca <gatt_notify>:
{
   4e5ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4e5ce:	4614      	mov	r4, r2
   4e5d0:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   4e5d2:	2214      	movs	r2, #20
   4e5d4:	6861      	ldr	r1, [r4, #4]
{
   4e5d6:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   4e5d8:	f7ff ffcc 	bl	4e574 <bt_gatt_check_perm>
   4e5dc:	bb08      	cbnz	r0, 4e622 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   4e5de:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   4e5e0:	211b      	movs	r1, #27
   4e5e2:	3202      	adds	r2, #2
   4e5e4:	4638      	mov	r0, r7
   4e5e6:	f7ff f9f6 	bl	4d9d6 <bt_att_create_pdu>
	if (!buf) {
   4e5ea:	4605      	mov	r5, r0
   4e5ec:	b1e8      	cbz	r0, 4e62a <gatt_notify+0x60>
	return net_buf_simple_add(&buf->b, len);
   4e5ee:	f100 0908 	add.w	r9, r0, #8
   4e5f2:	2102      	movs	r1, #2
   4e5f4:	4648      	mov	r0, r9
   4e5f6:	f001 fb10 	bl	4fc1a <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   4e5fa:	4606      	mov	r6, r0
   4e5fc:	89a1      	ldrh	r1, [r4, #12]
   4e5fe:	f826 8b02 	strh.w	r8, [r6], #2
   4e602:	4648      	mov	r0, r9
   4e604:	f001 fb09 	bl	4fc1a <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   4e608:	89a2      	ldrh	r2, [r4, #12]
   4e60a:	68a1      	ldr	r1, [r4, #8]
   4e60c:	4630      	mov	r0, r6
   4e60e:	f7fd fb23 	bl	4bc58 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   4e612:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   4e616:	4629      	mov	r1, r5
   4e618:	4638      	mov	r0, r7
}
   4e61a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   4e61e:	f7ff ba94 	b.w	4db4a <bt_att_send>
		return -EPERM;
   4e622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   4e626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   4e62a:	f06f 000b 	mvn.w	r0, #11
   4e62e:	e7fa      	b.n	4e626 <gatt_notify+0x5c>

0004e630 <gatt_discover_next>:
{
   4e630:	b570      	push	{r4, r5, r6, lr}
	if (!last_handle)
   4e632:	460b      	mov	r3, r1
{
   4e634:	4605      	mov	r5, r0
   4e636:	4614      	mov	r4, r2
	if (!last_handle)
   4e638:	b929      	cbnz	r1, 4e646 <gatt_discover_next+0x16>
	if (!bt_gatt_discover(conn, params)) {
   4e63a:	4621      	mov	r1, r4
   4e63c:	4628      	mov	r0, r5
   4e63e:	f7e3 fd6b 	bl	32118 <bt_gatt_discover>
   4e642:	b928      	cbnz	r0, 4e650 <gatt_discover_next+0x20>
}
   4e644:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   4e646:	f64f 72ff 	movw	r2, #65535	; 0xffff
   4e64a:	4291      	cmp	r1, r2
   4e64c:	d107      	bne.n	4e65e <gatt_discover_next+0x2e>
	params->start_handle = last_handle;
   4e64e:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   4e650:	6863      	ldr	r3, [r4, #4]
   4e652:	4622      	mov	r2, r4
   4e654:	4628      	mov	r0, r5
   4e656:	2100      	movs	r1, #0
}
   4e658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   4e65c:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   4e65e:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   4e660:	3301      	adds	r3, #1
   4e662:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   4e664:	429a      	cmp	r2, r3
		params->start_handle++;
   4e666:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   4e668:	d2e7      	bcs.n	4e63a <gatt_discover_next+0xa>
   4e66a:	e7f1      	b.n	4e650 <gatt_discover_next+0x20>

0004e66c <gatt_find_type_rsp>:
{
   4e66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4e670:	b088      	sub	sp, #32
   4e672:	4607      	mov	r7, r0
   4e674:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   4e678:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   4e67a:	b911      	cbnz	r1, 4e682 <gatt_find_type_rsp+0x16>
   4e67c:	f013 0803 	ands.w	r8, r3, #3
   4e680:	d008      	beq.n	4e694 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   4e682:	f8d9 3004 	ldr.w	r3, [r9, #4]
   4e686:	464a      	mov	r2, r9
   4e688:	2100      	movs	r1, #0
   4e68a:	4638      	mov	r0, r7
}
   4e68c:	b008      	add	sp, #32
   4e68e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   4e692:	4718      	bx	r3
	for (uint8_t i = 0U; i < count; i++) {
   4e694:	f3c3 0387 	ubfx	r3, r3, #2, #8
   4e698:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   4e69c:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   4e69e:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   4e6a2:	42ac      	cmp	r4, r5
   4e6a4:	d107      	bne.n	4e6b6 <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   4e6a6:	464a      	mov	r2, r9
   4e6a8:	4641      	mov	r1, r8
   4e6aa:	4638      	mov	r0, r7
}
   4e6ac:	b008      	add	sp, #32
   4e6ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   4e6b2:	f7ff bfbd 	b.w	4e630 <gatt_discover_next>
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   4e6b6:	8863      	ldrh	r3, [r4, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4e6b8:	f899 1010 	ldrb.w	r1, [r9, #16]
		value.end_handle = end_handle;
   4e6bc:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   4e6c0:	2900      	cmp	r1, #0
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   4e6c2:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   4e6c6:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   4e6ca:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   4e6cc:	9301      	str	r3, [sp, #4]
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   4e6ce:	bf14      	ite	ne
   4e6d0:	4651      	movne	r1, sl
   4e6d2:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   4e6d6:	ab01      	add	r3, sp, #4
   4e6d8:	f8ad 1002 	strh.w	r1, [sp, #2]
   4e6dc:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   4e6de:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   4e6e2:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4e6e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   4e6ea:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   4e6ee:	f8cd d00c 	str.w	sp, [sp, #12]
   4e6f2:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4e6f6:	464a      	mov	r2, r9
   4e6f8:	a903      	add	r1, sp, #12
   4e6fa:	4638      	mov	r0, r7
   4e6fc:	4798      	blx	r3
   4e6fe:	3404      	adds	r4, #4
   4e700:	2800      	cmp	r0, #0
   4e702:	d1ce      	bne.n	4e6a2 <gatt_find_type_rsp+0x36>
}
   4e704:	b008      	add	sp, #32
   4e706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004e70a <gatt_read_group_rsp>:
{
   4e70a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4e70e:	b08f      	sub	sp, #60	; 0x3c
   4e710:	4681      	mov	r9, r0
   4e712:	9d18      	ldr	r5, [sp, #96]	; 0x60
   4e714:	4617      	mov	r7, r2
	if (err) {
   4e716:	b131      	cbz	r1, 4e726 <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   4e718:	686b      	ldr	r3, [r5, #4]
   4e71a:	462a      	mov	r2, r5
   4e71c:	2100      	movs	r1, #0
}
   4e71e:	b00f      	add	sp, #60	; 0x3c
   4e720:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   4e724:	4718      	bx	r3
	switch (rsp->len) {
   4e726:	7812      	ldrb	r2, [r2, #0]
   4e728:	2a06      	cmp	r2, #6
   4e72a:	d002      	beq.n	4e732 <gatt_read_group_rsp+0x28>
   4e72c:	2a14      	cmp	r2, #20
   4e72e:	d10d      	bne.n	4e74c <gatt_read_group_rsp+0x42>
   4e730:	2102      	movs	r1, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
   4e732:	3b01      	subs	r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   4e734:	f88d 1010 	strb.w	r1, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
   4e738:	b29c      	uxth	r4, r3
   4e73a:	f107 0801 	add.w	r8, r7, #1
	uint16_t start_handle, end_handle = 0U;
   4e73e:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   4e740:	783b      	ldrb	r3, [r7, #0]
   4e742:	42a3      	cmp	r3, r4
   4e744:	d90a      	bls.n	4e75c <gatt_read_group_rsp+0x52>
	if (length == 0U && end_handle) {
   4e746:	b90c      	cbnz	r4, 4e74c <gatt_read_group_rsp+0x42>
   4e748:	2e00      	cmp	r6, #0
   4e74a:	d150      	bne.n	4e7ee <gatt_read_group_rsp+0xe4>
	params->func(conn, NULL, params);
   4e74c:	686b      	ldr	r3, [r5, #4]
   4e74e:	462a      	mov	r2, r5
   4e750:	2100      	movs	r1, #0
   4e752:	4648      	mov	r0, r9
   4e754:	4798      	blx	r3
}
   4e756:	b00f      	add	sp, #60	; 0x3c
   4e758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct bt_gatt_attr attr = {};
   4e75c:	2214      	movs	r2, #20
   4e75e:	2100      	movs	r1, #0
   4e760:	a809      	add	r0, sp, #36	; 0x24
   4e762:	f7fd fa84 	bl	4bc6e <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   4e766:	f8b8 a000 	ldrh.w	sl, [r8]
   4e76a:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   4e76e:	2b00      	cmp	r3, #0
   4e770:	d0ec      	beq.n	4e74c <gatt_read_group_rsp+0x42>
		end_handle = sys_le16_to_cpu(data->end_handle);
   4e772:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   4e776:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   4e77a:	2e00      	cmp	r6, #0
   4e77c:	d0e6      	beq.n	4e74c <gatt_read_group_rsp+0x42>
   4e77e:	42b3      	cmp	r3, r6
   4e780:	d8e4      	bhi.n	4e74c <gatt_read_group_rsp+0x42>
		switch (u.uuid.type) {
   4e782:	f89d 3010 	ldrb.w	r3, [sp, #16]
   4e786:	b323      	cbz	r3, 4e7d2 <gatt_read_group_rsp+0xc8>
   4e788:	2b02      	cmp	r3, #2
   4e78a:	d02a      	beq.n	4e7e2 <gatt_read_group_rsp+0xd8>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   4e78c:	f04f 0300 	mov.w	r3, #0
   4e790:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4e794:	7c2b      	ldrb	r3, [r5, #16]
		value.end_handle = end_handle;
   4e796:	f8ad b00c 	strh.w	fp, [sp, #12]
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   4e79a:	2b00      	cmp	r3, #0
   4e79c:	f642 0301 	movw	r3, #10241	; 0x2801
   4e7a0:	bf08      	it	eq
   4e7a2:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   4e7a6:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   4e7aa:	ab04      	add	r3, sp, #16
   4e7ac:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   4e7ae:	ab01      	add	r3, sp, #4
   4e7b0:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   4e7b2:	ab02      	add	r3, sp, #8
   4e7b4:	930c      	str	r3, [sp, #48]	; 0x30
		attr.handle = start_handle;
   4e7b6:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4e7ba:	686b      	ldr	r3, [r5, #4]
   4e7bc:	462a      	mov	r2, r5
   4e7be:	a909      	add	r1, sp, #36	; 0x24
   4e7c0:	4648      	mov	r0, r9
   4e7c2:	4798      	blx	r3
   4e7c4:	2800      	cmp	r0, #0
   4e7c6:	d0c6      	beq.n	4e756 <gatt_read_group_rsp+0x4c>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   4e7c8:	783b      	ldrb	r3, [r7, #0]
   4e7ca:	1ae4      	subs	r4, r4, r3
   4e7cc:	b2a4      	uxth	r4, r4
   4e7ce:	4498      	add	r8, r3
   4e7d0:	e7b6      	b.n	4e740 <gatt_read_group_rsp+0x36>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   4e7d2:	2202      	movs	r2, #2
   4e7d4:	f108 0104 	add.w	r1, r8, #4
   4e7d8:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   4e7dc:	f7fd fa3c 	bl	4bc58 <memcpy>
			break;
   4e7e0:	e7d4      	b.n	4e78c <gatt_read_group_rsp+0x82>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   4e7e2:	2210      	movs	r2, #16
   4e7e4:	f108 0104 	add.w	r1, r8, #4
   4e7e8:	f10d 0011 	add.w	r0, sp, #17
   4e7ec:	e7f6      	b.n	4e7dc <gatt_read_group_rsp+0xd2>
	gatt_discover_next(conn, handle, params);
   4e7ee:	462a      	mov	r2, r5
   4e7f0:	4631      	mov	r1, r6
   4e7f2:	4648      	mov	r0, r9
}
   4e7f4:	b00f      	add	sp, #60	; 0x3c
   4e7f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   4e7fa:	f7ff bf19 	b.w	4e630 <gatt_discover_next>

0004e7fe <read_included_uuid_cb>:
{
   4e7fe:	b570      	push	{r4, r5, r6, lr}
   4e800:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
   4e802:	2b10      	cmp	r3, #16
{
   4e804:	4611      	mov	r1, r2
   4e806:	9c12      	ldr	r4, [sp, #72]	; 0x48
   4e808:	4605      	mov	r5, r0
   4e80a:	461a      	mov	r2, r3
	if (length != 16U) {
   4e80c:	d006      	beq.n	4e81c <read_included_uuid_cb+0x1e>
		params->func(conn, NULL, params);
   4e80e:	6863      	ldr	r3, [r4, #4]
   4e810:	4622      	mov	r2, r4
   4e812:	2100      	movs	r1, #0
}
   4e814:	b00e      	add	sp, #56	; 0x38
   4e816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
   4e81a:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   4e81c:	8963      	ldrh	r3, [r4, #10]
   4e81e:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   4e822:	89a3      	ldrh	r3, [r4, #12]
   4e824:	f8ad 300e 	strh.w	r3, [sp, #14]
	value.uuid = &u.uuid;
   4e828:	ae04      	add	r6, sp, #16
	u.uuid.type = BT_UUID_TYPE_128;
   4e82a:	2302      	movs	r3, #2
	memcpy(u.u128.val, pdu, length);
   4e82c:	f10d 0011 	add.w	r0, sp, #17
	value.uuid = &u.uuid;
   4e830:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   4e832:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   4e836:	f7fd fa0f 	bl	4bc58 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   4e83a:	6821      	ldr	r1, [r4, #0]
   4e83c:	b9c9      	cbnz	r1, 4e872 <read_included_uuid_cb+0x74>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   4e83e:	f642 0202 	movw	r2, #10242	; 0x2802
   4e842:	2300      	movs	r3, #0
   4e844:	f8ad 2006 	strh.w	r2, [sp, #6]
   4e848:	aa01      	add	r2, sp, #4
   4e84a:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   4e84e:	f88d 3004 	strb.w	r3, [sp, #4]
   4e852:	aa02      	add	r2, sp, #8
   4e854:	930b      	str	r3, [sp, #44]	; 0x2c
   4e856:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   4e85a:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   4e85c:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   4e85e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4e862:	4622      	mov	r2, r4
   4e864:	6863      	ldr	r3, [r4, #4]
   4e866:	a909      	add	r1, sp, #36	; 0x24
   4e868:	4628      	mov	r0, r5
   4e86a:	4798      	blx	r3
   4e86c:	b930      	cbnz	r0, 4e87c <read_included_uuid_cb+0x7e>
}
   4e86e:	b00e      	add	sp, #56	; 0x38
   4e870:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   4e872:	4630      	mov	r0, r6
   4e874:	f7fd fade 	bl	4be34 <bt_uuid_cmp>
   4e878:	2800      	cmp	r0, #0
   4e87a:	d0e0      	beq.n	4e83e <read_included_uuid_cb+0x40>
	gatt_discover_next(conn, params->start_handle, params);
   4e87c:	8921      	ldrh	r1, [r4, #8]
   4e87e:	4622      	mov	r2, r4
   4e880:	4628      	mov	r0, r5
   4e882:	f7ff fed5 	bl	4e630 <gatt_discover_next>
	return;
   4e886:	e7f2      	b.n	4e86e <read_included_uuid_cb+0x70>

0004e888 <gatt_find_info_rsp>:
{
   4e888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4e88c:	b08f      	sub	sp, #60	; 0x3c
   4e88e:	4680      	mov	r8, r0
   4e890:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   4e892:	2900      	cmp	r1, #0
   4e894:	f040 8094 	bne.w	4e9c0 <gatt_find_info_rsp+0x138>
	switch (rsp->format) {
   4e898:	7810      	ldrb	r0, [r2, #0]
   4e89a:	2801      	cmp	r0, #1
   4e89c:	d01e      	beq.n	4e8dc <gatt_find_info_rsp+0x54>
   4e89e:	2802      	cmp	r0, #2
   4e8a0:	f040 808e 	bne.w	4e9c0 <gatt_find_info_rsp+0x138>
   4e8a4:	4601      	mov	r1, r0
		len = sizeof(*info.i128);
   4e8a6:	f04f 0a12 	mov.w	sl, #18
	length--;
   4e8aa:	3b01      	subs	r3, #1
   4e8ac:	b29b      	uxth	r3, r3
	if (length < len) {
   4e8ae:	4553      	cmp	r3, sl
		u.uuid.type = BT_UUID_TYPE_16;
   4e8b0:	f88d 1010 	strb.w	r1, [sp, #16]
	if (length < len) {
   4e8b4:	f0c0 8084 	bcc.w	4e9c0 <gatt_find_info_rsp+0x138>
	for (i = length / len, pdu = rsp->info; i != 0;
   4e8b8:	fbb3 fbfa 	udiv	fp, r3, sl
	bool skip = false;
   4e8bc:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   4e8c0:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
   4e8c2:	f8cd 9000 	str.w	r9, [sp]
			skip = false;
   4e8c6:	464d      	mov	r5, r9
   4e8c8:	af04      	add	r7, sp, #16
	for (i = length / len, pdu = rsp->info; i != 0;
   4e8ca:	f1bb 0f00 	cmp.w	fp, #0
   4e8ce:	d108      	bne.n	4e8e2 <gatt_find_info_rsp+0x5a>
	gatt_discover_next(conn, handle, params);
   4e8d0:	9900      	ldr	r1, [sp, #0]
   4e8d2:	4632      	mov	r2, r6
   4e8d4:	4640      	mov	r0, r8
   4e8d6:	f7ff feab 	bl	4e630 <gatt_discover_next>
	return;
   4e8da:	e06e      	b.n	4e9ba <gatt_find_info_rsp+0x132>
	switch (rsp->format) {
   4e8dc:	f04f 0a04 	mov.w	sl, #4
   4e8e0:	e7e3      	b.n	4e8aa <gatt_find_info_rsp+0x22>
		handle = sys_le16_to_cpu(info.i16->handle);
   4e8e2:	8823      	ldrh	r3, [r4, #0]
   4e8e4:	9301      	str	r3, [sp, #4]
   4e8e6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   4e8ea:	9300      	str	r3, [sp, #0]
		if (skip) {
   4e8ec:	f1b9 0f00 	cmp.w	r9, #0
   4e8f0:	d14c      	bne.n	4e98c <gatt_find_info_rsp+0x104>
		switch (u.uuid.type) {
   4e8f2:	f89d 3010 	ldrb.w	r3, [sp, #16]
   4e8f6:	b3b3      	cbz	r3, 4e966 <gatt_find_info_rsp+0xde>
   4e8f8:	2b02      	cmp	r3, #2
   4e8fa:	d03b      	beq.n	4e974 <gatt_find_info_rsp+0xec>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   4e8fc:	6831      	ldr	r1, [r6, #0]
   4e8fe:	2900      	cmp	r1, #0
   4e900:	d13f      	bne.n	4e982 <gatt_find_info_rsp+0xfa>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   4e902:	7c33      	ldrb	r3, [r6, #16]
   4e904:	2b04      	cmp	r3, #4
   4e906:	d147      	bne.n	4e998 <gatt_find_info_rsp+0x110>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   4e908:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   4e90c:	a902      	add	r1, sp, #8
   4e90e:	4638      	mov	r0, r7
   4e910:	f88d 5008 	strb.w	r5, [sp, #8]
   4e914:	f8ad 300a 	strh.w	r3, [sp, #10]
   4e918:	f7fd fa8c 	bl	4be34 <bt_uuid_cmp>
   4e91c:	b3b0      	cbz	r0, 4e98c <gatt_find_info_rsp+0x104>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   4e91e:	f642 0301 	movw	r3, #10241	; 0x2801
   4e922:	a903      	add	r1, sp, #12
   4e924:	4638      	mov	r0, r7
   4e926:	f88d 500c 	strb.w	r5, [sp, #12]
   4e92a:	f8ad 300e 	strh.w	r3, [sp, #14]
   4e92e:	f7fd fa81 	bl	4be34 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   4e932:	b358      	cbz	r0, 4e98c <gatt_find_info_rsp+0x104>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   4e934:	f642 0302 	movw	r3, #10242	; 0x2802
   4e938:	a909      	add	r1, sp, #36	; 0x24
   4e93a:	4638      	mov	r0, r7
   4e93c:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   4e940:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   4e944:	f7fd fa76 	bl	4be34 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   4e948:	b300      	cbz	r0, 4e98c <gatt_find_info_rsp+0x104>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   4e94a:	f642 0303 	movw	r3, #10243	; 0x2803
   4e94e:	a909      	add	r1, sp, #36	; 0x24
   4e950:	4638      	mov	r0, r7
   4e952:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   4e956:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   4e95a:	f7fd fa6b 	bl	4be34 <bt_uuid_cmp>
   4e95e:	b9d8      	cbnz	r0, 4e998 <gatt_find_info_rsp+0x110>
				skip = true;
   4e960:	f04f 0901 	mov.w	r9, #1
   4e964:	e014      	b.n	4e990 <gatt_find_info_rsp+0x108>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   4e966:	78a3      	ldrb	r3, [r4, #2]
   4e968:	78e2      	ldrb	r2, [r4, #3]
   4e96a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4e96e:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   4e972:	e7c3      	b.n	4e8fc <gatt_find_info_rsp+0x74>
			memcpy(u.u128.val, info.i128->uuid, 16);
   4e974:	2210      	movs	r2, #16
   4e976:	1ca1      	adds	r1, r4, #2
   4e978:	f10d 0011 	add.w	r0, sp, #17
   4e97c:	f7fd f96c 	bl	4bc58 <memcpy>
			break;
   4e980:	e7bc      	b.n	4e8fc <gatt_find_info_rsp+0x74>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   4e982:	4638      	mov	r0, r7
   4e984:	f7fd fa56 	bl	4be34 <bt_uuid_cmp>
   4e988:	2800      	cmp	r0, #0
   4e98a:	d0ba      	beq.n	4e902 <gatt_find_info_rsp+0x7a>
			skip = false;
   4e98c:	f04f 0900 	mov.w	r9, #0
	     i--, pdu = (const uint8_t *)pdu + len) {
   4e990:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   4e994:	4454      	add	r4, sl
   4e996:	e798      	b.n	4e8ca <gatt_find_info_rsp+0x42>
		attr.handle = handle;
   4e998:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   4e99c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   4e9a0:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   4e9a4:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4e9a8:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   4e9aa:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4e9ae:	4632      	mov	r2, r6
   4e9b0:	a909      	add	r1, sp, #36	; 0x24
   4e9b2:	4640      	mov	r0, r8
   4e9b4:	4798      	blx	r3
   4e9b6:	2800      	cmp	r0, #0
   4e9b8:	d1ea      	bne.n	4e990 <gatt_find_info_rsp+0x108>
}
   4e9ba:	b00f      	add	sp, #60	; 0x3c
   4e9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	params->func(conn, NULL, params);
   4e9c0:	6873      	ldr	r3, [r6, #4]
   4e9c2:	4632      	mov	r2, r6
   4e9c4:	2100      	movs	r1, #0
   4e9c6:	4640      	mov	r0, r8
   4e9c8:	4798      	blx	r3
   4e9ca:	e7f6      	b.n	4e9ba <gatt_find_info_rsp+0x132>

0004e9cc <bt_gatt_write_without_response_cb>:
{
   4e9cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   4e9d0:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   4e9d2:	7b42      	ldrb	r2, [r0, #13]
   4e9d4:	2a07      	cmp	r2, #7
{
   4e9d6:	461e      	mov	r6, r3
   4e9d8:	e9dd 9a0d 	ldrd	r9, sl, [sp, #52]	; 0x34
   4e9dc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   4e9e0:	4605      	mov	r5, r0
   4e9e2:	4688      	mov	r8, r1
	if (conn->state != BT_CONN_CONNECTED) {
   4e9e4:	d132      	bne.n	4ea4c <bt_gatt_write_without_response_cb+0x80>
	if (conn->encrypt) {
   4e9e6:	7ac2      	ldrb	r2, [r0, #11]
   4e9e8:	bb1a      	cbnz	r2, 4ea32 <bt_gatt_write_without_response_cb+0x66>
	if (sign) {
   4e9ea:	b313      	cbz	r3, 4ea32 <bt_gatt_write_without_response_cb+0x66>
		buf = bt_att_create_pdu(conn, BT_ATT_OP_SIGNED_WRITE_CMD,
   4e9ec:	f106 020e 	add.w	r2, r6, #14
   4e9f0:	21d2      	movs	r1, #210	; 0xd2
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
   4e9f2:	f7fe fff0 	bl	4d9d6 <bt_att_create_pdu>
   4e9f6:	4604      	mov	r4, r0
	if (!buf) {
   4e9f8:	b1b0      	cbz	r0, 4ea28 <bt_gatt_write_without_response_cb+0x5c>
   4e9fa:	2102      	movs	r1, #2
   4e9fc:	3008      	adds	r0, #8
   4e9fe:	f001 f90c 	bl	4fc1a <net_buf_simple_add>
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   4ea02:	2300      	movs	r3, #0
	cmd->handle = sys_cpu_to_le16(handle);
   4ea04:	f8a0 8000 	strh.w	r8, [r0]
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   4ea08:	2200      	movs	r2, #0
   4ea0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
   4ea0e:	2300      	movs	r3, #0
   4ea10:	e9cd 2300 	strd	r2, r3, [sp]
   4ea14:	4631      	mov	r1, r6
   4ea16:	463a      	mov	r2, r7
   4ea18:	4620      	mov	r0, r4
   4ea1a:	f7f4 ffc9 	bl	439b0 <net_buf_append_bytes>
	if (write != length) {
   4ea1e:	42b0      	cmp	r0, r6
   4ea20:	d00b      	beq.n	4ea3a <bt_gatt_write_without_response_cb+0x6e>
		net_buf_unref(buf);
   4ea22:	4620      	mov	r0, r4
   4ea24:	f7f4 ff92 	bl	4394c <net_buf_unref>
		return -ENOMEM;
   4ea28:	f06f 000b 	mvn.w	r0, #11
}
   4ea2c:	b004      	add	sp, #16
   4ea2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
   4ea32:	1cb2      	adds	r2, r6, #2
   4ea34:	2152      	movs	r1, #82	; 0x52
   4ea36:	4628      	mov	r0, r5
   4ea38:	e7db      	b.n	4e9f2 <bt_gatt_write_without_response_cb+0x26>
	return bt_att_send(conn, buf, func, user_data);
   4ea3a:	4653      	mov	r3, sl
   4ea3c:	464a      	mov	r2, r9
   4ea3e:	4621      	mov	r1, r4
   4ea40:	4628      	mov	r0, r5
}
   4ea42:	b004      	add	sp, #16
   4ea44:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, func, user_data);
   4ea48:	f7ff b87f 	b.w	4db4a <bt_att_send>
		return -ENOTCONN;
   4ea4c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4ea50:	e7ec      	b.n	4ea2c <bt_gatt_write_without_response_cb+0x60>

0004ea52 <gatt_ccc_discover_cb>:
{
   4ea52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4ea54:	4605      	mov	r5, r0
	struct bt_gatt_subscribe_params *sub_params = params->sub_params;
   4ea56:	6954      	ldr	r4, [r2, #20]
{
   4ea58:	4610      	mov	r0, r2
	if (!attr) {
   4ea5a:	460e      	mov	r6, r1
   4ea5c:	b951      	cbnz	r1, 4ea74 <gatt_ccc_discover_cb+0x22>
		memset(params, 0, sizeof(*params));
   4ea5e:	2218      	movs	r2, #24
   4ea60:	f7fd f905 	bl	4bc6e <memset>
		sub_params->notify(conn, sub_params, NULL, 0);
   4ea64:	6827      	ldr	r7, [r4, #0]
   4ea66:	4633      	mov	r3, r6
   4ea68:	4632      	mov	r2, r6
   4ea6a:	4621      	mov	r1, r4
   4ea6c:	4628      	mov	r0, r5
   4ea6e:	47b8      	blx	r7
		return BT_GATT_ITER_STOP;
   4ea70:	2000      	movs	r0, #0
}
   4ea72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   4ea74:	7c13      	ldrb	r3, [r2, #16]
   4ea76:	2b04      	cmp	r3, #4
   4ea78:	d112      	bne.n	4eaa0 <gatt_ccc_discover_cb+0x4e>
		memset(params, 0, sizeof(*params));
   4ea7a:	2100      	movs	r1, #0
   4ea7c:	2218      	movs	r2, #24
   4ea7e:	f7fd f8f6 	bl	4bc6e <memset>
		sub_params->ccc_handle = attr->handle;
   4ea82:	8a33      	ldrh	r3, [r6, #16]
   4ea84:	8163      	strh	r3, [r4, #10]
		if (bt_gatt_subscribe(conn, sub_params)) {
   4ea86:	4621      	mov	r1, r4
   4ea88:	4628      	mov	r0, r5
   4ea8a:	f7e3 fd4b 	bl	32524 <bt_gatt_subscribe>
   4ea8e:	2800      	cmp	r0, #0
   4ea90:	d0ee      	beq.n	4ea70 <gatt_ccc_discover_cb+0x1e>
			sub_params->notify(conn, sub_params, NULL, 0);
   4ea92:	2300      	movs	r3, #0
   4ea94:	6826      	ldr	r6, [r4, #0]
   4ea96:	461a      	mov	r2, r3
   4ea98:	4621      	mov	r1, r4
   4ea9a:	4628      	mov	r0, r5
   4ea9c:	47b0      	blx	r6
   4ea9e:	e7e7      	b.n	4ea70 <gatt_ccc_discover_cb+0x1e>
	return BT_GATT_ITER_CONTINUE;
   4eaa0:	2001      	movs	r0, #1
   4eaa2:	e7e6      	b.n	4ea72 <gatt_ccc_discover_cb+0x20>

0004eaa4 <bt_gatt_cancel>:
{
   4eaa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4eaa6:	4604      	mov	r4, r0
   4eaa8:	460d      	mov	r5, r1
	k_sched_lock();
   4eaaa:	f7f9 ff13 	bl	488d4 <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   4eaae:	4629      	mov	r1, r5
   4eab0:	4620      	mov	r0, r4
   4eab2:	f7ff f8a6 	bl	4dc02 <bt_att_find_req_by_user_data>
	if (req) {
   4eab6:	4601      	mov	r1, r0
   4eab8:	b920      	cbnz	r0, 4eac4 <bt_gatt_cancel+0x20>
}
   4eaba:	b002      	add	sp, #8
   4eabc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   4eac0:	f7f9 bf1c 	b.w	488fc <k_sched_unlock>
		func = req->func;
   4eac4:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   4eac6:	4620      	mov	r0, r4
   4eac8:	f7e2 fbf2 	bl	312b0 <bt_att_req_cancel>
	k_sched_unlock();
   4eacc:	f7f9 ff16 	bl	488fc <k_sched_unlock>
	if (func) {
   4ead0:	b12e      	cbz	r6, 4eade <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   4ead2:	2300      	movs	r3, #0
   4ead4:	9500      	str	r5, [sp, #0]
   4ead6:	461a      	mov	r2, r3
   4ead8:	210e      	movs	r1, #14
   4eada:	4620      	mov	r0, r4
   4eadc:	47b0      	blx	r6
}
   4eade:	b002      	add	sp, #8
   4eae0:	bd70      	pop	{r4, r5, r6, pc}

0004eae2 <bt_gatt_unsubscribe>:
{
   4eae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   4eae6:	7b43      	ldrb	r3, [r0, #13]
   4eae8:	2b07      	cmp	r3, #7
{
   4eaea:	4607      	mov	r7, r0
   4eaec:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   4eaee:	d159      	bne.n	4eba4 <bt_gatt_unsubscribe+0xc2>
	sub = gatt_sub_find(conn);
   4eaf0:	f7e2 fc58 	bl	313a4 <gatt_sub_find>
	if (!sub) {
   4eaf4:	4606      	mov	r6, r0
   4eaf6:	2800      	cmp	r0, #0
   4eaf8:	d057      	beq.n	4ebaa <bt_gatt_unsubscribe+0xc8>
	return list->head;
   4eafa:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   4eafc:	2c00      	cmp	r4, #0
   4eafe:	d054      	beq.n	4ebaa <bt_gatt_unsubscribe+0xc8>
   4eb00:	2300      	movs	r3, #0
   4eb02:	3c1c      	subs	r4, #28
   4eb04:	4698      	mov	r8, r3
		if (params == tmp) {
   4eb06:	42a5      	cmp	r5, r4
   4eb08:	d009      	beq.n	4eb1e <bt_gatt_unsubscribe+0x3c>
		if (tmp->value_handle == params->value_handle) {
   4eb0a:	8921      	ldrh	r1, [r4, #8]
   4eb0c:	892a      	ldrh	r2, [r5, #8]
			has_subscription = true;
   4eb0e:	4291      	cmp	r1, r2
   4eb10:	bf08      	it	eq
   4eb12:	f04f 0801 	moveq.w	r8, #1
	return node->next;
   4eb16:	69e4      	ldr	r4, [r4, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   4eb18:	b11c      	cbz	r4, 4eb22 <bt_gatt_unsubscribe+0x40>
   4eb1a:	3c1c      	subs	r4, #28
   4eb1c:	e7f3      	b.n	4eb06 <bt_gatt_unsubscribe+0x24>
			found = true;
   4eb1e:	2301      	movs	r3, #1
   4eb20:	e7f9      	b.n	4eb16 <bt_gatt_unsubscribe+0x34>
	if (!found) {
   4eb22:	2b00      	cmp	r3, #0
   4eb24:	d041      	beq.n	4ebaa <bt_gatt_unsubscribe+0xc8>
	if (!has_subscription) {
   4eb26:	f1b8 0f00 	cmp.w	r8, #0
   4eb2a:	d022      	beq.n	4eb72 <bt_gatt_unsubscribe+0x90>
	return list->head;
   4eb2c:	68b3      	ldr	r3, [r6, #8]
	sys_slist_find_and_remove(&sub->list, &params->node);
   4eb2e:	f105 021c 	add.w	r2, r5, #28
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4eb32:	b153      	cbz	r3, 4eb4a <bt_gatt_unsubscribe+0x68>
   4eb34:	429a      	cmp	r2, r3
   4eb36:	d12b      	bne.n	4eb90 <bt_gatt_unsubscribe+0xae>
	return node->next;
   4eb38:	69eb      	ldr	r3, [r5, #28]
	return list->tail;
   4eb3a:	68f1      	ldr	r1, [r6, #12]
Z_GENLIST_REMOVE(slist, snode)
   4eb3c:	bb1c      	cbnz	r4, 4eb86 <bt_gatt_unsubscribe+0xa4>
   4eb3e:	4291      	cmp	r1, r2
	list->head = node;
   4eb40:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   4eb42:	d100      	bne.n	4eb46 <bt_gatt_unsubscribe+0x64>
	list->tail = node;
   4eb44:	60f3      	str	r3, [r6, #12]
	parent->next = child;
   4eb46:	2300      	movs	r3, #0
   4eb48:	61eb      	str	r3, [r5, #28]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   4eb4a:	f105 0018 	add.w	r0, r5, #24
   4eb4e:	f7ff f8a2 	bl	4dc96 <atomic_get>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   4eb52:	0743      	lsls	r3, r0, #29
   4eb54:	d503      	bpl.n	4eb5e <bt_gatt_unsubscribe+0x7c>
		bt_gatt_cancel(conn, params);
   4eb56:	4629      	mov	r1, r5
   4eb58:	4638      	mov	r0, r7
   4eb5a:	f7ff ffa3 	bl	4eaa4 <bt_gatt_cancel>
	if (gatt_sub_is_empty(sub)) {
   4eb5e:	68b3      	ldr	r3, [r6, #8]
   4eb60:	b913      	cbnz	r3, 4eb68 <bt_gatt_unsubscribe+0x86>
		gatt_sub_free(sub);
   4eb62:	4630      	mov	r0, r6
   4eb64:	f7ff f999 	bl	4de9a <gatt_sub_free>
	if (has_subscription) {
   4eb68:	f1b8 0f00 	cmp.w	r8, #0
   4eb6c:	d113      	bne.n	4eb96 <bt_gatt_unsubscribe+0xb4>
	return 0;
   4eb6e:	2000      	movs	r0, #0
   4eb70:	e007      	b.n	4eb82 <bt_gatt_unsubscribe+0xa0>
		params->value = 0x0000;
   4eb72:	f8a5 8014 	strh.w	r8, [r5, #20]
		err = gatt_write_ccc(conn, params);
   4eb76:	4629      	mov	r1, r5
   4eb78:	4638      	mov	r0, r7
   4eb7a:	f7e2 fd39 	bl	315f0 <gatt_write_ccc>
		if (err) {
   4eb7e:	2800      	cmp	r0, #0
   4eb80:	d0d4      	beq.n	4eb2c <bt_gatt_unsubscribe+0x4a>
}
   4eb82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_REMOVE(slist, snode)
   4eb86:	4291      	cmp	r1, r2
	parent->next = child;
   4eb88:	6023      	str	r3, [r4, #0]
	list->tail = node;
   4eb8a:	bf08      	it	eq
   4eb8c:	60f4      	streq	r4, [r6, #12]
}
   4eb8e:	e7da      	b.n	4eb46 <bt_gatt_unsubscribe+0x64>
	return node->next;
   4eb90:	461c      	mov	r4, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4eb92:	681b      	ldr	r3, [r3, #0]
   4eb94:	e7cd      	b.n	4eb32 <bt_gatt_unsubscribe+0x50>
		params->notify(conn, params, NULL, 0);
   4eb96:	2300      	movs	r3, #0
   4eb98:	682c      	ldr	r4, [r5, #0]
   4eb9a:	461a      	mov	r2, r3
   4eb9c:	4629      	mov	r1, r5
   4eb9e:	4638      	mov	r0, r7
   4eba0:	47a0      	blx	r4
   4eba2:	e7e4      	b.n	4eb6e <bt_gatt_unsubscribe+0x8c>
		return -ENOTCONN;
   4eba4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4eba8:	e7eb      	b.n	4eb82 <bt_gatt_unsubscribe+0xa0>
		return -EINVAL;
   4ebaa:	f06f 0015 	mvn.w	r0, #21
   4ebae:	e7e8      	b.n	4eb82 <bt_gatt_unsubscribe+0xa0>

0004ebb0 <bt_gatt_notification>:
{
   4ebb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4ebb4:	4680      	mov	r8, r0
   4ebb6:	460e      	mov	r6, r1
   4ebb8:	4691      	mov	r9, r2
   4ebba:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   4ebbc:	f7e2 fbf2 	bl	313a4 <gatt_sub_find>
	if (!sub) {
   4ebc0:	b300      	cbz	r0, 4ec04 <bt_gatt_notification+0x54>
	return list->head;
   4ebc2:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   4ebc4:	b1f4      	cbz	r4, 4ec04 <bt_gatt_notification+0x54>
	return node->next;
   4ebc6:	6825      	ldr	r5, [r4, #0]
   4ebc8:	b105      	cbz	r5, 4ebcc <bt_gatt_notification+0x1c>
   4ebca:	3d1c      	subs	r5, #28
		if (handle != params->value_handle) {
   4ebcc:	f834 3c14 	ldrh.w	r3, [r4, #-20]
   4ebd0:	42b3      	cmp	r3, r6
   4ebd2:	d114      	bne.n	4ebfe <bt_gatt_notification+0x4e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   4ebd4:	3c1c      	subs	r4, #28
   4ebd6:	e007      	b.n	4ebe8 <bt_gatt_notification+0x38>
   4ebd8:	462c      	mov	r4, r5
   4ebda:	69ed      	ldr	r5, [r5, #28]
   4ebdc:	8923      	ldrh	r3, [r4, #8]
   4ebde:	b19d      	cbz	r5, 4ec08 <bt_gatt_notification+0x58>
		if (handle != params->value_handle) {
   4ebe0:	42b3      	cmp	r3, r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   4ebe2:	f1a5 051c 	sub.w	r5, r5, #28
		if (handle != params->value_handle) {
   4ebe6:	d1f7      	bne.n	4ebd8 <bt_gatt_notification+0x28>
		if (params->notify(conn, params, data, length) ==
   4ebe8:	6827      	ldr	r7, [r4, #0]
   4ebea:	4653      	mov	r3, sl
   4ebec:	464a      	mov	r2, r9
   4ebee:	4621      	mov	r1, r4
   4ebf0:	4640      	mov	r0, r8
   4ebf2:	47b8      	blx	r7
   4ebf4:	b918      	cbnz	r0, 4ebfe <bt_gatt_notification+0x4e>
			bt_gatt_unsubscribe(conn, params);
   4ebf6:	4621      	mov	r1, r4
   4ebf8:	4640      	mov	r0, r8
   4ebfa:	f7ff ff72 	bl	4eae2 <bt_gatt_unsubscribe>
   4ebfe:	462c      	mov	r4, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   4ec00:	2d00      	cmp	r5, #0
   4ec02:	d1ea      	bne.n	4ebda <bt_gatt_notification+0x2a>
}
   4ec04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (handle != params->value_handle) {
   4ec08:	42b3      	cmp	r3, r6
   4ec0a:	d0ed      	beq.n	4ebe8 <bt_gatt_notification+0x38>
   4ec0c:	e7fa      	b.n	4ec04 <bt_gatt_notification+0x54>

0004ec0e <bt_gatt_mult_notification>:
{
   4ec0e:	e92d 4eff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
   4ec12:	4681      	mov	r9, r0
   4ec14:	460c      	mov	r4, r1
   4ec16:	4615      	mov	r5, r2
	sub = gatt_sub_find(conn);
   4ec18:	f7e2 fbc4 	bl	313a4 <gatt_sub_find>
	if (!sub) {
   4ec1c:	4607      	mov	r7, r0
   4ec1e:	b140      	cbz	r0, 4ec32 <bt_gatt_mult_notification+0x24>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   4ec20:	462a      	mov	r2, r5
   4ec22:	4621      	mov	r1, r4
   4ec24:	a801      	add	r0, sp, #4
   4ec26:	f000 ffaf 	bl	4fb88 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   4ec2a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   4ec2e:	2b04      	cmp	r3, #4
   4ec30:	d802      	bhi.n	4ec38 <bt_gatt_mult_notification+0x2a>
}
   4ec32:	b004      	add	sp, #16
   4ec34:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   4ec38:	2104      	movs	r1, #4
   4ec3a:	eb0d 0001 	add.w	r0, sp, r1
   4ec3e:	f001 f81d 	bl	4fc7c <net_buf_simple_pull_mem>
		if (len > buf.len) {
   4ec42:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   4ec46:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		handle = sys_cpu_to_le16(nfy->handle);
   4ec4a:	f8b0 b000 	ldrh.w	fp, [r0]
		if (len > buf.len) {
   4ec4e:	4553      	cmp	r3, sl
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   4ec50:	4606      	mov	r6, r0
		if (len > buf.len) {
   4ec52:	d3ee      	bcc.n	4ec32 <bt_gatt_mult_notification+0x24>
	return list->head;
   4ec54:	68bc      	ldr	r4, [r7, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   4ec56:	b1fc      	cbz	r4, 4ec98 <bt_gatt_mult_notification+0x8a>
	return node->next;
   4ec58:	6825      	ldr	r5, [r4, #0]
   4ec5a:	b105      	cbz	r5, 4ec5e <bt_gatt_mult_notification+0x50>
   4ec5c:	3d1c      	subs	r5, #28
			if (handle != params->value_handle) {
   4ec5e:	f834 3c14 	ldrh.w	r3, [r4, #-20]
   4ec62:	455b      	cmp	r3, fp
   4ec64:	d115      	bne.n	4ec92 <bt_gatt_mult_notification+0x84>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   4ec66:	3c1c      	subs	r4, #28
   4ec68:	e007      	b.n	4ec7a <bt_gatt_mult_notification+0x6c>
   4ec6a:	462c      	mov	r4, r5
   4ec6c:	69ed      	ldr	r5, [r5, #28]
   4ec6e:	8923      	ldrh	r3, [r4, #8]
   4ec70:	b1bd      	cbz	r5, 4eca2 <bt_gatt_mult_notification+0x94>
			if (handle != params->value_handle) {
   4ec72:	455b      	cmp	r3, fp
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   4ec74:	f1a5 051c 	sub.w	r5, r5, #28
			if (handle != params->value_handle) {
   4ec78:	d1f7      	bne.n	4ec6a <bt_gatt_mult_notification+0x5c>
			if (params->notify(conn, params, nfy->value, len) ==
   4ec7a:	f8d4 c000 	ldr.w	ip, [r4]
   4ec7e:	4653      	mov	r3, sl
   4ec80:	1d32      	adds	r2, r6, #4
   4ec82:	4621      	mov	r1, r4
   4ec84:	4648      	mov	r0, r9
   4ec86:	47e0      	blx	ip
   4ec88:	b918      	cbnz	r0, 4ec92 <bt_gatt_mult_notification+0x84>
				bt_gatt_unsubscribe(conn, params);
   4ec8a:	4621      	mov	r1, r4
   4ec8c:	4648      	mov	r0, r9
   4ec8e:	f7ff ff28 	bl	4eae2 <bt_gatt_unsubscribe>
   4ec92:	462c      	mov	r4, r5
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   4ec94:	2d00      	cmp	r5, #0
   4ec96:	d1e9      	bne.n	4ec6c <bt_gatt_mult_notification+0x5e>
		net_buf_simple_pull_mem(&buf, len);
   4ec98:	4651      	mov	r1, sl
   4ec9a:	a801      	add	r0, sp, #4
   4ec9c:	f000 ffee 	bl	4fc7c <net_buf_simple_pull_mem>
   4eca0:	e7c3      	b.n	4ec2a <bt_gatt_mult_notification+0x1c>
			if (handle != params->value_handle) {
   4eca2:	455b      	cmp	r3, fp
   4eca4:	d0e9      	beq.n	4ec7a <bt_gatt_mult_notification+0x6c>
   4eca6:	e7f7      	b.n	4ec98 <bt_gatt_mult_notification+0x8a>

0004eca8 <bt_gatt_change_aware>:
{
   4eca8:	b570      	push	{r4, r5, r6, lr}
   4ecaa:	460e      	mov	r6, r1
	cfg = find_cf_cfg(conn);
   4ecac:	f7e2 fb3c 	bl	31328 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   4ecb0:	b1c8      	cbz	r0, 4ece6 <bt_gatt_change_aware+0x3e>
   4ecb2:	7a03      	ldrb	r3, [r0, #8]
   4ecb4:	07da      	lsls	r2, r3, #31
   4ecb6:	d516      	bpl.n	4ece6 <bt_gatt_change_aware+0x3e>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   4ecb8:	f100 040c 	add.w	r4, r0, #12
   4ecbc:	4620      	mov	r0, r4
   4ecbe:	f7fe ffea 	bl	4dc96 <atomic_get>
   4ecc2:	f010 0501 	ands.w	r5, r0, #1
   4ecc6:	d10e      	bne.n	4ece6 <bt_gatt_change_aware+0x3e>
	if (!req) {
   4ecc8:	b176      	cbz	r6, 4ece8 <bt_gatt_change_aware+0x40>
   4ecca:	4620      	mov	r0, r4
   4eccc:	f7fe ffe3 	bl	4dc96 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   4ecd0:	0783      	lsls	r3, r0, #30
   4ecd2:	d50b      	bpl.n	4ecec <bt_gatt_change_aware+0x44>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4ecd4:	f06f 0102 	mvn.w	r1, #2
   4ecd8:	4620      	mov	r0, r4
   4ecda:	f7ff f93d 	bl	4df58 <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4ecde:	2101      	movs	r1, #1
   4ece0:	4620      	mov	r0, r4
   4ece2:	f7ff f831 	bl	4dd48 <atomic_or>
		return true;
   4ece6:	2501      	movs	r5, #1
}
   4ece8:	4628      	mov	r0, r5
   4ecea:	bd70      	pop	{r4, r5, r6, pc}
   4ecec:	2102      	movs	r1, #2
   4ecee:	4620      	mov	r0, r4
   4ecf0:	f7ff f82a 	bl	4dd48 <atomic_or>
}
   4ecf4:	e7f8      	b.n	4ece8 <bt_gatt_change_aware+0x40>

0004ecf6 <ccc_delayed_store>:
{
   4ecf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4ecfa:	f1a0 061c 	sub.w	r6, r0, #28
   4ecfe:	1f04      	subs	r4, r0, #4
			ccc_store->conn_list[i] = NULL;
   4ed00:	f04f 0800 	mov.w	r8, #0
		struct bt_conn *conn = ccc_store->conn_list[i];
   4ed04:	f856 5f04 	ldr.w	r5, [r6, #4]!
		if (!conn) {
   4ed08:	b17d      	cbz	r5, 4ed2a <ccc_delayed_store+0x34>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4ed0a:	f105 0788 	add.w	r7, r5, #136	; 0x88
   4ed0e:	7a28      	ldrb	r0, [r5, #8]
   4ed10:	4639      	mov	r1, r7
   4ed12:	f7fd fc68 	bl	4c5e6 <bt_addr_le_is_bonded>
   4ed16:	b140      	cbz	r0, 4ed2a <ccc_delayed_store+0x34>
			ccc_store->conn_list[i] = NULL;
   4ed18:	f8c6 8000 	str.w	r8, [r6]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   4ed1c:	7a28      	ldrb	r0, [r5, #8]
   4ed1e:	4639      	mov	r1, r7
   4ed20:	f7e3 fd22 	bl	32768 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   4ed24:	4628      	mov	r0, r5
   4ed26:	f7fd ffd1 	bl	4cccc <bt_conn_unref>
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   4ed2a:	42a6      	cmp	r6, r4
   4ed2c:	d1ea      	bne.n	4ed04 <ccc_delayed_store+0xe>
}
   4ed2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004ed32 <sys_memcpy_swap>:
	psrc += length - 1;
   4ed32:	1e53      	subs	r3, r2, #1
   4ed34:	4419      	add	r1, r3
	for (; length > 0; length--) {
   4ed36:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   4ed38:	f811 3901 	ldrb.w	r3, [r1], #-1
   4ed3c:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   4ed40:	4290      	cmp	r0, r2
   4ed42:	d1f9      	bne.n	4ed38 <sys_memcpy_swap+0x6>
}
   4ed44:	4770      	bx	lr

0004ed46 <smp_encrypt_info>:
}
   4ed46:	2007      	movs	r0, #7
   4ed48:	4770      	bx	lr

0004ed4a <le_sc_oob_config_set>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   4ed4a:	7ac2      	ldrb	r2, [r0, #11]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   4ed4c:	7c83      	ldrb	r3, [r0, #18]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4ed4e:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4ed52:	78c0      	ldrb	r0, [r0, #3]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   4ed54:	f002 0201 	and.w	r2, r2, #1
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   4ed58:	f003 0301 	and.w	r3, r3, #1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4ed5c:	b940      	cbnz	r0, 4ed70 <le_sc_oob_config_set+0x26>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   4ed5e:	b112      	cbz	r2, 4ed66 <le_sc_oob_config_set+0x1c>
		if (rsp_oob_present) {
   4ed60:	3301      	adds	r3, #1
	info->lesc.oob_config = oob_config;
   4ed62:	704b      	strb	r3, [r1, #1]
}
   4ed64:	4770      	bx	lr
				     BT_CONN_OOB_BOTH_PEERS :
   4ed66:	2b00      	cmp	r3, #0
   4ed68:	bf0c      	ite	eq
   4ed6a:	2303      	moveq	r3, #3
   4ed6c:	2300      	movne	r3, #0
   4ed6e:	e7f8      	b.n	4ed62 <le_sc_oob_config_set+0x18>
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   4ed70:	b922      	cbnz	r2, 4ed7c <le_sc_oob_config_set+0x32>
				     BT_CONN_OOB_BOTH_PEERS :
   4ed72:	2b00      	cmp	r3, #0
   4ed74:	bf0c      	ite	eq
   4ed76:	2303      	moveq	r3, #3
   4ed78:	2301      	movne	r3, #1
   4ed7a:	e7f2      	b.n	4ed62 <le_sc_oob_config_set+0x18>
		if (rsp_oob_present) {
   4ed7c:	005b      	lsls	r3, r3, #1
   4ed7e:	e7f0      	b.n	4ed62 <le_sc_oob_config_set+0x18>

0004ed80 <smp_chan_get>:
{
   4ed80:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   4ed82:	2106      	movs	r1, #6
   4ed84:	f7fe fa35 	bl	4d1f2 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   4ed88:	b100      	cbz	r0, 4ed8c <smp_chan_get+0xc>
	return CONTAINER_OF(chan, struct bt_smp, chan);
   4ed8a:	38f0      	subs	r0, #240	; 0xf0
}
   4ed8c:	bd08      	pop	{r3, pc}

0004ed8e <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4ed8e:	f3bf 8f5b 	dmb	ish
   4ed92:	6800      	ldr	r0, [r0, #0]
   4ed94:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   4ed98:	4108      	asrs	r0, r1
}
   4ed9a:	f000 0001 	and.w	r0, r0, #1
   4ed9e:	4770      	bx	lr

0004eda0 <smp_keys_check>:
{
   4eda0:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   4eda2:	210b      	movs	r1, #11
{
   4eda4:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   4eda6:	3004      	adds	r0, #4
   4eda8:	f7ff fff1 	bl	4ed8e <atomic_test_bit>
   4edac:	b108      	cbz	r0, 4edb2 <smp_keys_check+0x12>
		return false;
   4edae:	2000      	movs	r0, #0
}
   4edb0:	bd38      	pop	{r3, r4, r5, pc}
	if (!conn->le.keys) {
   4edb2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   4edb6:	b983      	cbnz	r3, 4edda <smp_keys_check+0x3a>
						     conn->id, &conn->le.dst);
   4edb8:	f104 0588 	add.w	r5, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   4edbc:	7a21      	ldrb	r1, [r4, #8]
   4edbe:	462a      	mov	r2, r5
   4edc0:	2020      	movs	r0, #32
   4edc2:	f7e4 ff23 	bl	33c0c <bt_keys_find>
   4edc6:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   4edca:	b930      	cbnz	r0, 4edda <smp_keys_check+0x3a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   4edcc:	7a21      	ldrb	r1, [r4, #8]
   4edce:	462a      	mov	r2, r5
   4edd0:	2004      	movs	r0, #4
   4edd2:	f7e4 ff1b 	bl	33c0c <bt_keys_find>
   4edd6:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   4edda:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   4edde:	2b00      	cmp	r3, #0
   4ede0:	d0e5      	beq.n	4edae <smp_keys_check+0xe>
   4ede2:	89da      	ldrh	r2, [r3, #14]
   4ede4:	f002 0224 	and.w	r2, r2, #36	; 0x24
   4ede8:	2a00      	cmp	r2, #0
   4edea:	d0e0      	beq.n	4edae <smp_keys_check+0xe>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   4edec:	7aa2      	ldrb	r2, [r4, #10]
   4edee:	2a02      	cmp	r2, #2
   4edf0:	d902      	bls.n	4edf8 <smp_keys_check+0x58>
   4edf2:	7b5b      	ldrb	r3, [r3, #13]
   4edf4:	07db      	lsls	r3, r3, #31
   4edf6:	d5da      	bpl.n	4edae <smp_keys_check+0xe>
	return true;
   4edf8:	2001      	movs	r0, #1
   4edfa:	e7d9      	b.n	4edb0 <smp_keys_check+0x10>

0004edfc <update_keys_check>:
{
   4edfc:	b510      	push	{r4, lr}
   4edfe:	4603      	mov	r3, r0
	if (!keys ||
   4ee00:	b1d9      	cbz	r1, 4ee3a <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   4ee02:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   4ee04:	f010 0f24 	tst.w	r0, #36	; 0x24
   4ee08:	d017      	beq.n	4ee3a <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   4ee0a:	7d1a      	ldrb	r2, [r3, #20]
   4ee0c:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   4ee0e:	7b09      	ldrb	r1, [r1, #12]
   4ee10:	42a2      	cmp	r2, r4
   4ee12:	bf28      	it	cs
   4ee14:	4622      	movcs	r2, r4
   4ee16:	4291      	cmp	r1, r2
   4ee18:	d901      	bls.n	4ee1e <update_keys_check+0x22>
		return false;
   4ee1a:	2000      	movs	r0, #0
}
   4ee1c:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   4ee1e:	0682      	lsls	r2, r0, #26
   4ee20:	d404      	bmi.n	4ee2c <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   4ee22:	7a18      	ldrb	r0, [r3, #8]
   4ee24:	3800      	subs	r0, #0
   4ee26:	bf18      	it	ne
   4ee28:	2001      	movne	r0, #1
   4ee2a:	e7f7      	b.n	4ee1c <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   4ee2c:	2105      	movs	r1, #5
   4ee2e:	1d18      	adds	r0, r3, #4
   4ee30:	f7ff ffad 	bl	4ed8e <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   4ee34:	2800      	cmp	r0, #0
   4ee36:	d1f4      	bne.n	4ee22 <update_keys_check+0x26>
   4ee38:	e7ef      	b.n	4ee1a <update_keys_check+0x1e>
	return true;
   4ee3a:	2001      	movs	r0, #1
   4ee3c:	e7ee      	b.n	4ee1c <update_keys_check+0x20>

0004ee3e <remote_sec_level_reachable>:
{
   4ee3e:	b508      	push	{r3, lr}
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   4ee40:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
   4ee44:	7a92      	ldrb	r2, [r2, #10]
	switch (sec) {
   4ee46:	2a03      	cmp	r2, #3
{
   4ee48:	4603      	mov	r3, r0
	switch (sec) {
   4ee4a:	d015      	beq.n	4ee78 <remote_sec_level_reachable+0x3a>
   4ee4c:	d804      	bhi.n	4ee58 <remote_sec_level_reachable+0x1a>
   4ee4e:	3a01      	subs	r2, #1
   4ee50:	2a01      	cmp	r2, #1
   4ee52:	d914      	bls.n	4ee7e <remote_sec_level_reachable+0x40>
		return BT_SMP_ERR_UNSPECIFIED;
   4ee54:	2008      	movs	r0, #8
   4ee56:	e00e      	b.n	4ee76 <remote_sec_level_reachable+0x38>
	switch (sec) {
   4ee58:	2a04      	cmp	r2, #4
   4ee5a:	d1fb      	bne.n	4ee54 <remote_sec_level_reachable+0x16>
	return MIN(req->max_key_size, rsp->max_key_size);
   4ee5c:	7d02      	ldrb	r2, [r0, #20]
   4ee5e:	7b41      	ldrb	r1, [r0, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   4ee60:	428a      	cmp	r2, r1
   4ee62:	bf28      	it	cs
   4ee64:	460a      	movcs	r2, r1
   4ee66:	2a10      	cmp	r2, #16
   4ee68:	d10b      	bne.n	4ee82 <remote_sec_level_reachable+0x44>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   4ee6a:	2105      	movs	r1, #5
   4ee6c:	3004      	adds	r0, #4
   4ee6e:	f7ff ff8e 	bl	4ed8e <atomic_test_bit>
   4ee72:	b908      	cbnz	r0, 4ee78 <remote_sec_level_reachable+0x3a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   4ee74:	2003      	movs	r0, #3
}
   4ee76:	bd08      	pop	{r3, pc}
		if (smp->method == JUST_WORKS) {
   4ee78:	7a1b      	ldrb	r3, [r3, #8]
   4ee7a:	2b00      	cmp	r3, #0
   4ee7c:	d0fa      	beq.n	4ee74 <remote_sec_level_reachable+0x36>
		return 0;
   4ee7e:	2000      	movs	r0, #0
   4ee80:	e7f9      	b.n	4ee76 <remote_sec_level_reachable+0x38>
			return BT_SMP_ERR_ENC_KEY_SIZE;
   4ee82:	2006      	movs	r0, #6
   4ee84:	e7f7      	b.n	4ee76 <remote_sec_level_reachable+0x38>

0004ee86 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   4ee86:	2301      	movs	r3, #1
   4ee88:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4ee8a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4ee8c:	f3bf 8f5b 	dmb	ish
   4ee90:	e850 2f00 	ldrex	r2, [r0]
   4ee94:	401a      	ands	r2, r3
   4ee96:	e840 2100 	strex	r1, r2, [r0]
   4ee9a:	2900      	cmp	r1, #0
   4ee9c:	d1f8      	bne.n	4ee90 <atomic_clear_bit+0xa>
   4ee9e:	f3bf 8f5b 	dmb	ish
}
   4eea2:	4770      	bx	lr

0004eea4 <bt_smp_aes_cmac>:
{
   4eea4:	b570      	push	{r4, r5, r6, lr}
   4eea6:	b0c2      	sub	sp, #264	; 0x108
   4eea8:	460d      	mov	r5, r1
   4eeaa:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   4eeac:	4601      	mov	r1, r0
   4eeae:	aa16      	add	r2, sp, #88	; 0x58
   4eeb0:	4668      	mov	r0, sp
{
   4eeb2:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   4eeb4:	f7fc fd3d 	bl	4b932 <tc_cmac_setup>
   4eeb8:	b918      	cbnz	r0, 4eec2 <bt_smp_aes_cmac+0x1e>
		return -EIO;
   4eeba:	f06f 0004 	mvn.w	r0, #4
}
   4eebe:	b042      	add	sp, #264	; 0x108
   4eec0:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   4eec2:	4632      	mov	r2, r6
   4eec4:	4629      	mov	r1, r5
   4eec6:	4668      	mov	r0, sp
   4eec8:	f7fc fd5e 	bl	4b988 <tc_cmac_update>
   4eecc:	2800      	cmp	r0, #0
   4eece:	d0f4      	beq.n	4eeba <bt_smp_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   4eed0:	4669      	mov	r1, sp
   4eed2:	4620      	mov	r0, r4
   4eed4:	f7fc fdc2 	bl	4ba5c <tc_cmac_final>
   4eed8:	2800      	cmp	r0, #0
   4eeda:	d0ee      	beq.n	4eeba <bt_smp_aes_cmac+0x16>
	return 0;
   4eedc:	2000      	movs	r0, #0
   4eede:	e7ee      	b.n	4eebe <bt_smp_aes_cmac+0x1a>

0004eee0 <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   4eee0:	2007      	movs	r0, #7
   4eee2:	4770      	bx	lr

0004eee4 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   4eee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   4eee6:	2300      	movs	r3, #0
   4eee8:	9300      	str	r3, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   4eeea:	4604      	mov	r4, r0
   4eeec:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   4eeee:	460a      	mov	r2, r1
   4eef0:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   4eef4:	2106      	movs	r1, #6
   4eef6:	f7fe f8d3 	bl	4d0a0 <bt_l2cap_send_cb>
   4eefa:	b128      	cbz	r0, 4ef08 <smp_send.constprop.0+0x24>
		net_buf_unref(buf);
   4eefc:	4628      	mov	r0, r5
}
   4eefe:	b003      	add	sp, #12
   4ef00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   4ef04:	f7f4 bd22 	b.w	4394c <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   4ef08:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4ef0c:	2300      	movs	r3, #0
   4ef0e:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   4ef12:	b003      	add	sp, #12
   4ef14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   4ef18:	f7f9 baca 	b.w	484b0 <k_work_reschedule>

0004ef1c <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   4ef1c:	b510      	push	{r4, lr}
   4ef1e:	1e43      	subs	r3, r0, #1
   4ef20:	f100 0210 	add.w	r2, r0, #16
   4ef24:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   4ef26:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   4ef2a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   4ef2e:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   4ef30:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   4ef32:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   4ef34:	d1f7      	bne.n	4ef26 <sys_mem_swap.constprop.0+0xa>
	}
}
   4ef36:	bd10      	pop	{r4, pc}

0004ef38 <smp_f6>:
{
   4ef38:	b5f0      	push	{r4, r5, r6, r7, lr}
   4ef3a:	b097      	sub	sp, #92	; 0x5c
   4ef3c:	4605      	mov	r5, r0
   4ef3e:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   4ef40:	a805      	add	r0, sp, #20
   4ef42:	2210      	movs	r2, #16
{
   4ef44:	461c      	mov	r4, r3
   4ef46:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   4ef48:	f7ff fef3 	bl	4ed32 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   4ef4c:	2210      	movs	r2, #16
   4ef4e:	4631      	mov	r1, r6
   4ef50:	a809      	add	r0, sp, #36	; 0x24
   4ef52:	f7ff feee 	bl	4ed32 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   4ef56:	4621      	mov	r1, r4
   4ef58:	2210      	movs	r2, #16
   4ef5a:	a80d      	add	r0, sp, #52	; 0x34
   4ef5c:	f7ff fee9 	bl	4ed32 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   4ef60:	991c      	ldr	r1, [sp, #112]	; 0x70
   4ef62:	2203      	movs	r2, #3
   4ef64:	a811      	add	r0, sp, #68	; 0x44
   4ef66:	f7ff fee4 	bl	4ed32 <sys_memcpy_swap>
	m[51] = a1->type;
   4ef6a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   4ef6c:	f814 3b01 	ldrb.w	r3, [r4], #1
   4ef70:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   4ef74:	4621      	mov	r1, r4
   4ef76:	2206      	movs	r2, #6
   4ef78:	a812      	add	r0, sp, #72	; 0x48
   4ef7a:	f7fc fe6d 	bl	4bc58 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   4ef7e:	4621      	mov	r1, r4
   4ef80:	2206      	movs	r2, #6
   4ef82:	a812      	add	r0, sp, #72	; 0x48
   4ef84:	f7ff fed5 	bl	4ed32 <sys_memcpy_swap>
	m[58] = a2->type;
   4ef88:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   4ef8a:	f814 3b01 	ldrb.w	r3, [r4], #1
   4ef8e:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   4ef92:	4621      	mov	r1, r4
   4ef94:	2206      	movs	r2, #6
   4ef96:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   4ef9a:	f7fc fe5d 	bl	4bc58 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   4ef9e:	4621      	mov	r1, r4
   4efa0:	2206      	movs	r2, #6
   4efa2:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   4efa6:	f7ff fec4 	bl	4ed32 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   4efaa:	2210      	movs	r2, #16
   4efac:	4629      	mov	r1, r5
   4efae:	a801      	add	r0, sp, #4
   4efb0:	f7ff febf 	bl	4ed32 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   4efb4:	463b      	mov	r3, r7
   4efb6:	2241      	movs	r2, #65	; 0x41
   4efb8:	a905      	add	r1, sp, #20
   4efba:	a801      	add	r0, sp, #4
   4efbc:	f7ff ff72 	bl	4eea4 <bt_smp_aes_cmac>
	if (err) {
   4efc0:	4604      	mov	r4, r0
   4efc2:	b910      	cbnz	r0, 4efca <smp_f6+0x92>
	sys_mem_swap(check, 16);
   4efc4:	4638      	mov	r0, r7
   4efc6:	f7ff ffa9 	bl	4ef1c <sys_mem_swap.constprop.0>
}
   4efca:	4620      	mov	r0, r4
   4efcc:	b017      	add	sp, #92	; 0x5c
   4efce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004efd0 <smp_f4>:
{
   4efd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   4efd2:	b097      	sub	sp, #92	; 0x5c
   4efd4:	4614      	mov	r4, r2
   4efd6:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   4efd8:	2220      	movs	r2, #32
   4efda:	4601      	mov	r1, r0
   4efdc:	a805      	add	r0, sp, #20
{
   4efde:	461d      	mov	r5, r3
   4efe0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   4efe2:	f7ff fea6 	bl	4ed32 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   4efe6:	2220      	movs	r2, #32
   4efe8:	4631      	mov	r1, r6
   4efea:	a80d      	add	r0, sp, #52	; 0x34
   4efec:	f7ff fea1 	bl	4ed32 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   4eff0:	4621      	mov	r1, r4
   4eff2:	2210      	movs	r2, #16
   4eff4:	a801      	add	r0, sp, #4
	m[64] = z;
   4eff6:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   4effa:	f7ff fe9a 	bl	4ed32 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   4effe:	463b      	mov	r3, r7
   4f000:	2241      	movs	r2, #65	; 0x41
   4f002:	a905      	add	r1, sp, #20
   4f004:	a801      	add	r0, sp, #4
   4f006:	f7ff ff4d 	bl	4eea4 <bt_smp_aes_cmac>
	if (err) {
   4f00a:	4604      	mov	r4, r0
   4f00c:	b910      	cbnz	r0, 4f014 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   4f00e:	4638      	mov	r0, r7
   4f010:	f7ff ff84 	bl	4ef1c <sys_mem_swap.constprop.0>
}
   4f014:	4620      	mov	r0, r4
   4f016:	b017      	add	sp, #92	; 0x5c
   4f018:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004f01a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   4f01a:	2301      	movs	r3, #1
   4f01c:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4f01e:	f3bf 8f5b 	dmb	ish
   4f022:	e850 2f00 	ldrex	r2, [r0]
   4f026:	431a      	orrs	r2, r3
   4f028:	e840 2100 	strex	r1, r2, [r0]
   4f02c:	2900      	cmp	r1, #0
   4f02e:	d1f8      	bne.n	4f022 <atomic_set_bit+0x8>
   4f030:	f3bf 8f5b 	dmb	ish
}
   4f034:	4770      	bx	lr

0004f036 <smp_keypress_notif>:
{
   4f036:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   4f038:	210e      	movs	r1, #14
   4f03a:	f7ff ffee 	bl	4f01a <atomic_set_bit>
}
   4f03e:	2000      	movs	r0, #0
   4f040:	bd08      	pop	{r3, pc}

0004f042 <generate_dhkey>:
{
   4f042:	b510      	push	{r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   4f044:	2107      	movs	r1, #7
{
   4f046:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   4f048:	3004      	adds	r0, #4
   4f04a:	f7ff ffe6 	bl	4f01a <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   4f04e:	2008      	movs	r0, #8
   4f050:	f7e3 fd68 	bl	32b24 <smp_find>
   4f054:	b920      	cbnz	r0, 4f060 <generate_dhkey+0x1e>
		return smp_dhkey_generate(smp);
   4f056:	4620      	mov	r0, r4
}
   4f058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_dhkey_generate(smp);
   4f05c:	f7e3 beda 	b.w	32e14 <smp_dhkey_generate>
}
   4f060:	2000      	movs	r0, #0
   4f062:	bd10      	pop	{r4, pc}

0004f064 <smp_ident_info>:
{
   4f064:	b538      	push	{r3, r4, r5, lr}
   4f066:	4604      	mov	r4, r0
   4f068:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   4f06a:	3004      	adds	r0, #4
   4f06c:	210d      	movs	r1, #13
   4f06e:	f7ff fe8e 	bl	4ed8e <atomic_test_bit>
   4f072:	b170      	cbz	r0, 4f092 <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
   4f074:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   4f076:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   4f07a:	2002      	movs	r0, #2
   4f07c:	7a19      	ldrb	r1, [r3, #8]
   4f07e:	f103 0288 	add.w	r2, r3, #136	; 0x88
   4f082:	f000 fd0c 	bl	4fa9e <bt_keys_get_type>
		if (!keys) {
   4f086:	b150      	cbz	r0, 4f09e <smp_ident_info+0x3a>
		memcpy(keys->irk.val, req->irk, 16);
   4f088:	2210      	movs	r2, #16
   4f08a:	4629      	mov	r1, r5
   4f08c:	302a      	adds	r0, #42	; 0x2a
   4f08e:	f7fc fde3 	bl	4bc58 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   4f092:	4620      	mov	r0, r4
   4f094:	2109      	movs	r1, #9
   4f096:	f7ff ffc0 	bl	4f01a <atomic_set_bit>
	return 0;
   4f09a:	2000      	movs	r0, #0
}
   4f09c:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   4f09e:	2008      	movs	r0, #8
   4f0a0:	e7fc      	b.n	4f09c <smp_ident_info+0x38>

0004f0a2 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   4f0a2:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   4f0a4:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   4f0a6:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   4f0a8:	4628      	mov	r0, r5
   4f0aa:	2104      	movs	r1, #4
   4f0ac:	f7ff fe6f 	bl	4ed8e <atomic_test_bit>
   4f0b0:	b168      	cbz	r0, 4f0ce <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   4f0b2:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   4f0b4:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   4f0b6:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   4f0b8:	4608      	mov	r0, r1
   4f0ba:	f7fd ffee 	bl	4d09a <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   4f0be:	4604      	mov	r4, r0
   4f0c0:	b940      	cbnz	r0, 4f0d4 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   4f0c2:	2104      	movs	r1, #4
   4f0c4:	4628      	mov	r0, r5
   4f0c6:	f7ff ffa8 	bl	4f01a <atomic_set_bit>
}
   4f0ca:	4620      	mov	r0, r4
   4f0cc:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   4f0ce:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4f0d2:	e7ef      	b.n	4f0b4 <smp_create_pdu.constprop.0+0x12>
   4f0d4:	2101      	movs	r1, #1
   4f0d6:	3008      	adds	r0, #8
   4f0d8:	f000 fd9f 	bl	4fc1a <net_buf_simple_add>
	hdr->code = op;
   4f0dc:	7006      	strb	r6, [r0, #0]
	return buf;
   4f0de:	e7f4      	b.n	4f0ca <smp_create_pdu.constprop.0+0x28>

0004f0e0 <smp_send_pairing_random>:
{
   4f0e0:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   4f0e2:	2104      	movs	r1, #4
{
   4f0e4:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   4f0e6:	f7ff ffdc 	bl	4f0a2 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   4f0ea:	4604      	mov	r4, r0
   4f0ec:	b170      	cbz	r0, 4f10c <smp_send_pairing_random+0x2c>
   4f0ee:	2110      	movs	r1, #16
   4f0f0:	3008      	adds	r0, #8
   4f0f2:	f000 fd92 	bl	4fc1a <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   4f0f6:	2210      	movs	r2, #16
   4f0f8:	f105 0127 	add.w	r1, r5, #39	; 0x27
   4f0fc:	f7fc fdac 	bl	4bc58 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   4f100:	4628      	mov	r0, r5
   4f102:	4621      	mov	r1, r4
   4f104:	f7ff feee 	bl	4eee4 <smp_send.constprop.0>
	return 0;
   4f108:	2000      	movs	r0, #0
}
   4f10a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   4f10c:	2008      	movs	r0, #8
   4f10e:	e7fc      	b.n	4f10a <smp_send_pairing_random+0x2a>

0004f110 <sc_smp_send_dhkey_check>:
{
   4f110:	b570      	push	{r4, r5, r6, lr}
   4f112:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   4f114:	210d      	movs	r1, #13
{
   4f116:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   4f118:	f7ff ffc3 	bl	4f0a2 <smp_create_pdu.constprop.0>
	if (!buf) {
   4f11c:	4604      	mov	r4, r0
   4f11e:	b168      	cbz	r0, 4f13c <sc_smp_send_dhkey_check+0x2c>
   4f120:	2110      	movs	r1, #16
   4f122:	3008      	adds	r0, #8
   4f124:	f000 fd79 	bl	4fc1a <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   4f128:	2210      	movs	r2, #16
   4f12a:	4631      	mov	r1, r6
   4f12c:	f7fc fd94 	bl	4bc58 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   4f130:	4628      	mov	r0, r5
   4f132:	4621      	mov	r1, r4
   4f134:	f7ff fed6 	bl	4eee4 <smp_send.constprop.0>
	return 0;
   4f138:	2000      	movs	r0, #0
}
   4f13a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   4f13c:	2008      	movs	r0, #8
   4f13e:	e7fc      	b.n	4f13a <sc_smp_send_dhkey_check+0x2a>

0004f140 <compute_and_send_central_dhcheck>:
{
   4f140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4f144:	4604      	mov	r4, r0
   4f146:	b08c      	sub	sp, #48	; 0x30
	(void)memset(r, 0, sizeof(r));
   4f148:	2210      	movs	r2, #16
   4f14a:	2100      	movs	r1, #0
   4f14c:	a808      	add	r0, sp, #32
   4f14e:	f7fc fd8e 	bl	4bc6e <memset>
	switch (smp->method) {
   4f152:	7a23      	ldrb	r3, [r4, #8]
   4f154:	2b05      	cmp	r3, #5
   4f156:	d821      	bhi.n	4f19c <compute_and_send_central_dhcheck+0x5c>
   4f158:	e8df f003 	tbb	[pc, r3]
   4f15c:	09030309 	.word	0x09030309
   4f160:	2420      	.short	0x2420
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   4f162:	2204      	movs	r2, #4
   4f164:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   4f168:	a808      	add	r0, sp, #32
   4f16a:	f7fc fd75 	bl	4bc58 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   4f16e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   smp->tk)) {
   4f172:	f104 0247 	add.w	r2, r4, #71	; 0x47
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   4f176:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   4f17a:	e9cd 6201 	strd	r6, r2, [sp, #4]
   4f17e:	f104 0727 	add.w	r7, r4, #39	; 0x27
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   4f182:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   4f186:	f104 0837 	add.w	r8, r4, #55	; 0x37
   4f18a:	9200      	str	r2, [sp, #0]
   4f18c:	338f      	adds	r3, #143	; 0x8f
   4f18e:	4642      	mov	r2, r8
   4f190:	4639      	mov	r1, r7
   4f192:	f104 0097 	add.w	r0, r4, #151	; 0x97
   4f196:	f7e3 fd2b 	bl	32bf0 <smp_f5>
   4f19a:	b148      	cbz	r0, 4f1b0 <compute_and_send_central_dhcheck+0x70>
		return BT_SMP_ERR_UNSPECIFIED;
   4f19c:	2008      	movs	r0, #8
}
   4f19e:	b00c      	add	sp, #48	; 0x30
   4f1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (smp->oobd_remote) {
   4f1a4:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   4f1a8:	2900      	cmp	r1, #0
   4f1aa:	d0e0      	beq.n	4f16e <compute_and_send_central_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   4f1ac:	2210      	movs	r2, #16
   4f1ae:	e7db      	b.n	4f168 <compute_and_send_central_dhcheck+0x28>
		   &smp->chan.chan.conn->le.init_addr,
   4f1b0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.resp_addr, e)) {
   4f1b4:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   4f1b8:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   4f1ba:	ad04      	add	r5, sp, #16
   4f1bc:	9301      	str	r3, [sp, #4]
   4f1be:	f104 030a 	add.w	r3, r4, #10
   4f1c2:	9202      	str	r2, [sp, #8]
   4f1c4:	9300      	str	r3, [sp, #0]
   4f1c6:	9503      	str	r5, [sp, #12]
   4f1c8:	ab08      	add	r3, sp, #32
   4f1ca:	4642      	mov	r2, r8
   4f1cc:	4639      	mov	r1, r7
   4f1ce:	4630      	mov	r0, r6
   4f1d0:	f7ff feb2 	bl	4ef38 <smp_f6>
   4f1d4:	2800      	cmp	r0, #0
   4f1d6:	d1e1      	bne.n	4f19c <compute_and_send_central_dhcheck+0x5c>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   4f1d8:	210d      	movs	r1, #13
   4f1da:	4620      	mov	r0, r4
   4f1dc:	f7ff ff1d 	bl	4f01a <atomic_set_bit>
	return sc_smp_send_dhkey_check(smp, e);
   4f1e0:	4629      	mov	r1, r5
   4f1e2:	f7ff ff95 	bl	4f110 <sc_smp_send_dhkey_check>
   4f1e6:	e7da      	b.n	4f19e <compute_and_send_central_dhcheck+0x5e>

0004f1e8 <compute_and_check_and_send_periph_dhcheck>:
{
   4f1e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4f1ec:	4604      	mov	r4, r0
   4f1ee:	b091      	sub	sp, #68	; 0x44
	(void)memset(r, 0, sizeof(r));
   4f1f0:	2210      	movs	r2, #16
   4f1f2:	2100      	movs	r1, #0
   4f1f4:	a80c      	add	r0, sp, #48	; 0x30
   4f1f6:	f7fc fd3a 	bl	4bc6e <memset>
	switch (smp->method) {
   4f1fa:	7a23      	ldrb	r3, [r4, #8]
   4f1fc:	2b05      	cmp	r3, #5
   4f1fe:	d821      	bhi.n	4f244 <compute_and_check_and_send_periph_dhcheck+0x5c>
   4f200:	e8df f003 	tbb	[pc, r3]
   4f204:	09030309 	.word	0x09030309
   4f208:	2520      	.short	0x2520
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   4f20a:	2204      	movs	r2, #4
   4f20c:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   4f210:	a80c      	add	r0, sp, #48	; 0x30
   4f212:	f7fc fd21 	bl	4bc58 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   4f216:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   smp->tk)) {
   4f21a:	f104 0247 	add.w	r2, r4, #71	; 0x47
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   4f21e:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   4f222:	e9cd 5201 	strd	r5, r2, [sp, #4]
   4f226:	f104 0637 	add.w	r6, r4, #55	; 0x37
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   4f22a:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   4f22e:	f104 0727 	add.w	r7, r4, #39	; 0x27
   4f232:	9200      	str	r2, [sp, #0]
   4f234:	338f      	adds	r3, #143	; 0x8f
   4f236:	463a      	mov	r2, r7
   4f238:	4631      	mov	r1, r6
   4f23a:	f104 0097 	add.w	r0, r4, #151	; 0x97
   4f23e:	f7e3 fcd7 	bl	32bf0 <smp_f5>
   4f242:	b150      	cbz	r0, 4f25a <compute_and_check_and_send_periph_dhcheck+0x72>
		return BT_SMP_ERR_UNSPECIFIED;
   4f244:	2508      	movs	r5, #8
}
   4f246:	4628      	mov	r0, r5
   4f248:	b011      	add	sp, #68	; 0x44
   4f24a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (smp->oobd_remote) {
   4f24e:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   4f252:	2900      	cmp	r1, #0
   4f254:	d0df      	beq.n	4f216 <compute_and_check_and_send_periph_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   4f256:	2210      	movs	r2, #16
   4f258:	e7da      	b.n	4f210 <compute_and_check_and_send_periph_dhcheck+0x28>
		   &smp->chan.chan.conn->le.resp_addr,
   4f25a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.init_addr, e)) {
   4f25e:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   4f262:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   4f264:	f10d 0820 	add.w	r8, sp, #32
   4f268:	9301      	str	r3, [sp, #4]
   4f26a:	f104 0311 	add.w	r3, r4, #17
   4f26e:	9202      	str	r2, [sp, #8]
   4f270:	9300      	str	r3, [sp, #0]
   4f272:	f8cd 800c 	str.w	r8, [sp, #12]
   4f276:	ab0c      	add	r3, sp, #48	; 0x30
   4f278:	4632      	mov	r2, r6
   4f27a:	4639      	mov	r1, r7
   4f27c:	4628      	mov	r0, r5
   4f27e:	f7ff fe5b 	bl	4ef38 <smp_f6>
   4f282:	2800      	cmp	r0, #0
   4f284:	d1de      	bne.n	4f244 <compute_and_check_and_send_periph_dhcheck+0x5c>
	if (smp->method == LE_SC_OOB) {
   4f286:	7a23      	ldrb	r3, [r4, #8]
   4f288:	2b05      	cmp	r3, #5
   4f28a:	d106      	bne.n	4f29a <compute_and_check_and_send_periph_dhcheck+0xb2>
		if (smp->oobd_local) {
   4f28c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   4f290:	2210      	movs	r2, #16
   4f292:	a80c      	add	r0, sp, #48	; 0x30
		if (smp->oobd_local) {
   4f294:	b351      	cbz	r1, 4f2ec <compute_and_check_and_send_periph_dhcheck+0x104>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   4f296:	f7fc fcdf 	bl	4bc58 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   4f29a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   4f29e:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   4f2a2:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   4f2a4:	f10d 0910 	add.w	r9, sp, #16
   4f2a8:	9301      	str	r3, [sp, #4]
   4f2aa:	f104 030a 	add.w	r3, r4, #10
   4f2ae:	9202      	str	r2, [sp, #8]
   4f2b0:	9300      	str	r3, [sp, #0]
   4f2b2:	f8cd 900c 	str.w	r9, [sp, #12]
   4f2b6:	ab0c      	add	r3, sp, #48	; 0x30
   4f2b8:	463a      	mov	r2, r7
   4f2ba:	4631      	mov	r1, r6
   4f2bc:	4628      	mov	r0, r5
   4f2be:	f7ff fe3b 	bl	4ef38 <smp_f6>
   4f2c2:	2800      	cmp	r0, #0
   4f2c4:	d1be      	bne.n	4f244 <compute_and_check_and_send_periph_dhcheck+0x5c>
	if (memcmp(smp->e, re, 16)) {
   4f2c6:	2210      	movs	r2, #16
   4f2c8:	4649      	mov	r1, r9
   4f2ca:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   4f2ce:	f7fc fcb3 	bl	4bc38 <memcmp>
   4f2d2:	b970      	cbnz	r0, 4f2f2 <compute_and_check_and_send_periph_dhcheck+0x10a>
	err = sc_smp_send_dhkey_check(smp, e);
   4f2d4:	4641      	mov	r1, r8
   4f2d6:	4620      	mov	r0, r4
   4f2d8:	f7ff ff1a 	bl	4f110 <sc_smp_send_dhkey_check>
	if (err) {
   4f2dc:	4605      	mov	r5, r0
   4f2de:	2800      	cmp	r0, #0
   4f2e0:	d1b1      	bne.n	4f246 <compute_and_check_and_send_periph_dhcheck+0x5e>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4f2e2:	2101      	movs	r1, #1
   4f2e4:	1d20      	adds	r0, r4, #4
   4f2e6:	f7ff fe98 	bl	4f01a <atomic_set_bit>
	return 0;
   4f2ea:	e7ac      	b.n	4f246 <compute_and_check_and_send_periph_dhcheck+0x5e>
			memset(r, 0, sizeof(r));
   4f2ec:	f7fc fcbf 	bl	4bc6e <memset>
   4f2f0:	e7d3      	b.n	4f29a <compute_and_check_and_send_periph_dhcheck+0xb2>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   4f2f2:	250b      	movs	r5, #11
   4f2f4:	e7a7      	b.n	4f246 <compute_and_check_and_send_periph_dhcheck+0x5e>

0004f2f6 <smp_dhkey_check>:
{
   4f2f6:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4f2f8:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   4f2fc:	688e      	ldr	r6, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4f2fe:	78dd      	ldrb	r5, [r3, #3]
{
   4f300:	b091      	sub	sp, #68	; 0x44
   4f302:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4f304:	2d00      	cmp	r5, #0
   4f306:	d15b      	bne.n	4f3c0 <smp_dhkey_check+0xca>
		(void)memset(r, 0, sizeof(r));
   4f308:	2210      	movs	r2, #16
   4f30a:	4629      	mov	r1, r5
   4f30c:	a80c      	add	r0, sp, #48	; 0x30
   4f30e:	f7fc fcae 	bl	4bc6e <memset>
		switch (smp->method) {
   4f312:	7a23      	ldrb	r3, [r4, #8]
   4f314:	2b05      	cmp	r3, #5
   4f316:	d820      	bhi.n	4f35a <smp_dhkey_check+0x64>
   4f318:	e8df f003 	tbb	[pc, r3]
   4f31c:	09030309 	.word	0x09030309
   4f320:	231f      	.short	0x231f
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   4f322:	2204      	movs	r2, #4
   4f324:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
				memcpy(r, smp->oobd_local->r, sizeof(r));
   4f328:	a80c      	add	r0, sp, #48	; 0x30
   4f32a:	f7fc fc95 	bl	4bc58 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
   4f32e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
			   &smp->chan.chan.conn->le.init_addr, e)) {
   4f332:	f103 028f 	add.w	r2, r3, #143	; 0x8f
			   &smp->chan.chan.conn->le.resp_addr,
   4f336:	3396      	adds	r3, #150	; 0x96
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   4f338:	af08      	add	r7, sp, #32
   4f33a:	9301      	str	r3, [sp, #4]
   4f33c:	f104 0311 	add.w	r3, r4, #17
   4f340:	9202      	str	r2, [sp, #8]
   4f342:	9300      	str	r3, [sp, #0]
   4f344:	9703      	str	r7, [sp, #12]
   4f346:	ab0c      	add	r3, sp, #48	; 0x30
   4f348:	f104 0227 	add.w	r2, r4, #39	; 0x27
   4f34c:	f104 0137 	add.w	r1, r4, #55	; 0x37
   4f350:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
   4f354:	f7ff fdf0 	bl	4ef38 <smp_f6>
   4f358:	b148      	cbz	r0, 4f36e <smp_dhkey_check+0x78>
			return BT_SMP_ERR_UNSPECIFIED;
   4f35a:	2508      	movs	r5, #8
}
   4f35c:	4628      	mov	r0, r5
   4f35e:	b011      	add	sp, #68	; 0x44
   4f360:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (smp->oobd_local) {
   4f362:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   4f366:	2900      	cmp	r1, #0
   4f368:	d0e1      	beq.n	4f32e <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   4f36a:	2210      	movs	r2, #16
   4f36c:	e7dc      	b.n	4f328 <smp_dhkey_check+0x32>
		if (memcmp(e, req->e, 16)) {
   4f36e:	4631      	mov	r1, r6
   4f370:	2210      	movs	r2, #16
   4f372:	4638      	mov	r0, r7
   4f374:	f7fc fc60 	bl	4bc38 <memcmp>
   4f378:	4606      	mov	r6, r0
   4f37a:	b9f8      	cbnz	r0, 4f3bc <smp_dhkey_check+0xc6>
	return MIN(req->max_key_size, rsp->max_key_size);
   4f37c:	7d23      	ldrb	r3, [r4, #20]
   4f37e:	7b67      	ldrb	r7, [r4, #13]
		(void)memset(ediv, 0, sizeof(ediv));
   4f380:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   4f382:	429f      	cmp	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   4f384:	f04f 0202 	mov.w	r2, #2
   4f388:	a805      	add	r0, sp, #20
	return MIN(req->max_key_size, rsp->max_key_size);
   4f38a:	bf28      	it	cs
   4f38c:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   4f38e:	f7fc fc6e 	bl	4bc6e <memset>
		(void)memset(rand, 0, sizeof(rand));
   4f392:	2208      	movs	r2, #8
   4f394:	4631      	mov	r1, r6
   4f396:	a806      	add	r0, sp, #24
   4f398:	f7fc fc69 	bl	4bc6e <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   4f39c:	9700      	str	r7, [sp, #0]
   4f39e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   4f3a2:	f104 0347 	add.w	r3, r4, #71	; 0x47
   4f3a6:	aa05      	add	r2, sp, #20
   4f3a8:	a906      	add	r1, sp, #24
   4f3aa:	f7fd fcd3 	bl	4cd54 <bt_conn_le_start_encryption>
   4f3ae:	2800      	cmp	r0, #0
   4f3b0:	dbd3      	blt.n	4f35a <smp_dhkey_check+0x64>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4f3b2:	2101      	movs	r1, #1
   4f3b4:	1d20      	adds	r0, r4, #4
   4f3b6:	f7ff fe30 	bl	4f01a <atomic_set_bit>
		return 0;
   4f3ba:	e7cf      	b.n	4f35c <smp_dhkey_check+0x66>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   4f3bc:	250b      	movs	r5, #11
   4f3be:	e7cd      	b.n	4f35c <smp_dhkey_check+0x66>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   4f3c0:	2d01      	cmp	r5, #1
   4f3c2:	d113      	bne.n	4f3ec <smp_dhkey_check+0xf6>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   4f3c4:	1d05      	adds	r5, r0, #4
   4f3c6:	2110      	movs	r1, #16
   4f3c8:	4628      	mov	r0, r5
   4f3ca:	f7ff fd5c 	bl	4ee86 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   4f3ce:	4631      	mov	r1, r6
   4f3d0:	2210      	movs	r2, #16
   4f3d2:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   4f3d6:	f7fc fc3f 	bl	4bc58 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   4f3da:	2107      	movs	r1, #7
   4f3dc:	4628      	mov	r0, r5
   4f3de:	f7ff fcd6 	bl	4ed8e <atomic_test_bit>
   4f3e2:	b128      	cbz	r0, 4f3f0 <smp_dhkey_check+0xfa>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4f3e4:	2109      	movs	r1, #9
   4f3e6:	4628      	mov	r0, r5
   4f3e8:	f7ff fe17 	bl	4f01a <atomic_set_bit>
			return 0;
   4f3ec:	2500      	movs	r5, #0
   4f3ee:	e7b5      	b.n	4f35c <smp_dhkey_check+0x66>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   4f3f0:	210a      	movs	r1, #10
   4f3f2:	4628      	mov	r0, r5
   4f3f4:	f7ff fccb 	bl	4ed8e <atomic_test_bit>
   4f3f8:	2800      	cmp	r0, #0
   4f3fa:	d1f3      	bne.n	4f3e4 <smp_dhkey_check+0xee>
		return compute_and_check_and_send_periph_dhcheck(smp);
   4f3fc:	4620      	mov	r0, r4
}
   4f3fe:	b011      	add	sp, #68	; 0x44
   4f400:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   4f404:	f7ff bef0 	b.w	4f1e8 <compute_and_check_and_send_periph_dhcheck>

0004f408 <smp_pairing_confirm>:
{
   4f408:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   4f40a:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   4f40c:	1d05      	adds	r5, r0, #4
{
   4f40e:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   4f410:	210b      	movs	r1, #11
   4f412:	4628      	mov	r0, r5
   4f414:	f7ff fd37 	bl	4ee86 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   4f418:	2210      	movs	r2, #16
   4f41a:	4631      	mov	r1, r6
   4f41c:	f104 0017 	add.w	r0, r4, #23
   4f420:	f7fc fc1a 	bl	4bc58 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4f424:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4f428:	78db      	ldrb	r3, [r3, #3]
   4f42a:	b93b      	cbnz	r3, 4f43c <smp_pairing_confirm+0x34>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   4f42c:	4620      	mov	r0, r4
   4f42e:	2104      	movs	r1, #4
   4f430:	f7ff fdf3 	bl	4f01a <atomic_set_bit>
}
   4f434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_random(smp);
   4f438:	f7ff be52 	b.w	4f0e0 <smp_send_pairing_random>
	switch (smp->method) {
   4f43c:	7a23      	ldrb	r3, [r4, #8]
   4f43e:	2b01      	cmp	r3, #1
   4f440:	d009      	beq.n	4f456 <smp_pairing_confirm+0x4e>
   4f442:	2b02      	cmp	r3, #2
   4f444:	d113      	bne.n	4f46e <smp_pairing_confirm+0x66>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   4f446:	4620      	mov	r0, r4
   4f448:	2104      	movs	r1, #4
   4f44a:	f7ff fde6 	bl	4f01a <atomic_set_bit>
}
   4f44e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   4f452:	f7e3 bdfd 	b.w	33050 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   4f456:	210a      	movs	r1, #10
   4f458:	4628      	mov	r0, r5
   4f45a:	f7ff fc98 	bl	4ed8e <atomic_test_bit>
   4f45e:	2800      	cmp	r0, #0
   4f460:	d0f1      	beq.n	4f446 <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   4f462:	4628      	mov	r0, r5
   4f464:	2100      	movs	r1, #0
   4f466:	f7ff fdd8 	bl	4f01a <atomic_set_bit>
			return 0;
   4f46a:	2000      	movs	r0, #0
}
   4f46c:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   4f46e:	2008      	movs	r0, #8
   4f470:	e7fc      	b.n	4f46c <smp_pairing_confirm+0x64>

0004f472 <smp_central_ident>:
static uint8_t smp_central_ident(struct bt_smp *smp, struct net_buf *buf)
   4f472:	2007      	movs	r0, #7
   4f474:	4770      	bx	lr

0004f476 <atomic_test_and_clear_bit>:
{
   4f476:	b530      	push	{r4, r5, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   4f478:	2301      	movs	r3, #1
   4f47a:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4f47e:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4f480:	f3bf 8f5b 	dmb	ish
   4f484:	e850 3f00 	ldrex	r3, [r0]
   4f488:	ea03 0402 	and.w	r4, r3, r2
   4f48c:	e840 4500 	strex	r5, r4, [r0]
   4f490:	2d00      	cmp	r5, #0
   4f492:	d1f7      	bne.n	4f484 <atomic_test_and_clear_bit+0xe>
   4f494:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   4f498:	4219      	tst	r1, r3
}
   4f49a:	bf14      	ite	ne
   4f49c:	2001      	movne	r0, #1
   4f49e:	2000      	moveq	r0, #0
   4f4a0:	bd30      	pop	{r4, r5, pc}

0004f4a2 <smp_reset>:
{
   4f4a2:	b570      	push	{r4, r5, r6, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   4f4a4:	1d03      	adds	r3, r0, #4
   4f4a6:	4604      	mov	r4, r0
   4f4a8:	2500      	movs	r5, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   4f4aa:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
   4f4ae:	f3bf 8f5b 	dmb	ish
   4f4b2:	e853 2f00 	ldrex	r2, [r3]
   4f4b6:	e843 5100 	strex	r1, r5, [r3]
   4f4ba:	2900      	cmp	r1, #0
   4f4bc:	d1f9      	bne.n	4f4b2 <smp_reset+0x10>
   4f4be:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   4f4c2:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   4f4c6:	f001 fbb8 	bl	50c3a <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   4f4ca:	7225      	strb	r5, [r4, #8]
   4f4cc:	f3bf 8f5b 	dmb	ish
   4f4d0:	e854 3f00 	ldrex	r3, [r4]
   4f4d4:	e844 5200 	strex	r2, r5, [r4]
   4f4d8:	2a00      	cmp	r2, #0
   4f4da:	d1f9      	bne.n	4f4d0 <smp_reset+0x2e>
   4f4dc:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4f4e0:	78f3      	ldrb	r3, [r6, #3]
   4f4e2:	b92b      	cbnz	r3, 4f4f0 <smp_reset+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   4f4e4:	210b      	movs	r1, #11
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   4f4e6:	4620      	mov	r0, r4
}
   4f4e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   4f4ec:	f7ff bd95 	b.w	4f01a <atomic_set_bit>
   4f4f0:	2101      	movs	r1, #1
   4f4f2:	e7f8      	b.n	4f4e6 <smp_reset+0x44>

0004f4f4 <bt_smp_request_ltk>:
{
   4f4f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4f4f8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   4f4fc:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   4f500:	4604      	mov	r4, r0
   4f502:	4692      	mov	sl, r2
   4f504:	461f      	mov	r7, r3
	smp = smp_chan_get(conn);
   4f506:	f7ff fc3b 	bl	4ed80 <smp_chan_get>
	if (!smp) {
   4f50a:	4605      	mov	r5, r0
   4f50c:	2800      	cmp	r0, #0
   4f50e:	d05a      	beq.n	4f5c6 <bt_smp_request_ltk+0xd2>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   4f510:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   4f512:	f1b9 0f00 	cmp.w	r9, #0
   4f516:	d127      	bne.n	4f568 <bt_smp_request_ltk+0x74>
   4f518:	ea5a 0307 	orrs.w	r3, sl, r7
   4f51c:	d124      	bne.n	4f568 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   4f51e:	2103      	movs	r1, #3
   4f520:	4630      	mov	r0, r6
   4f522:	f7ff fc34 	bl	4ed8e <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   4f526:	b3d0      	cbz	r0, 4f59e <bt_smp_request_ltk+0xaa>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   4f528:	2101      	movs	r1, #1
   4f52a:	4630      	mov	r0, r6
   4f52c:	f7ff fc2f 	bl	4ed8e <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   4f530:	b3a8      	cbz	r0, 4f59e <bt_smp_request_ltk+0xaa>
	return MIN(req->max_key_size, rsp->max_key_size);
   4f532:	7d2c      	ldrb	r4, [r5, #20]
   4f534:	7b6b      	ldrb	r3, [r5, #13]
   4f536:	429c      	cmp	r4, r3
   4f538:	bf28      	it	cs
   4f53a:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   4f53c:	4622      	mov	r2, r4
   4f53e:	f105 0147 	add.w	r1, r5, #71	; 0x47
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   4f542:	4640      	mov	r0, r8
   4f544:	f7fc fb88 	bl	4bc58 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   4f548:	2c0f      	cmp	r4, #15
   4f54a:	d806      	bhi.n	4f55a <bt_smp_request_ltk+0x66>
			(void)memset(ltk + enc_size, 0,
   4f54c:	f1c4 0210 	rsb	r2, r4, #16
   4f550:	2100      	movs	r1, #0
   4f552:	eb08 0004 	add.w	r0, r8, r4
   4f556:	f7fc fb8a 	bl	4bc6e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4f55a:	4630      	mov	r0, r6
   4f55c:	2101      	movs	r1, #1
   4f55e:	f7ff fd5c 	bl	4f01a <atomic_set_bit>
		return true;
   4f562:	2001      	movs	r0, #1
}
   4f564:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!conn->le.keys) {
   4f568:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   4f56c:	b9f3      	cbnz	r3, 4f5ac <bt_smp_request_ltk+0xb8>
					     &conn->le.dst);
   4f56e:	f104 0b88 	add.w	fp, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   4f572:	7a21      	ldrb	r1, [r4, #8]
   4f574:	465a      	mov	r2, fp
   4f576:	2020      	movs	r0, #32
   4f578:	f7e4 fb48 	bl	33c0c <bt_keys_find>
   4f57c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   4f580:	b930      	cbnz	r0, 4f590 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   4f582:	7a21      	ldrb	r1, [r4, #8]
   4f584:	465a      	mov	r2, fp
   4f586:	2001      	movs	r0, #1
   4f588:	f7e4 fb40 	bl	33c0c <bt_keys_find>
   4f58c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   4f590:	f1b9 0f00 	cmp.w	r9, #0
   4f594:	d10a      	bne.n	4f5ac <bt_smp_request_ltk+0xb8>
   4f596:	ea5a 0707 	orrs.w	r7, sl, r7
   4f59a:	d004      	beq.n	4f5a6 <bt_smp_request_ltk+0xb2>
   4f59c:	e006      	b.n	4f5ac <bt_smp_request_ltk+0xb8>
	if (!conn->le.keys) {
   4f59e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   4f5a2:	2b00      	cmp	r3, #0
   4f5a4:	d0e3      	beq.n	4f56e <bt_smp_request_ltk+0x7a>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   4f5a6:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   4f5aa:	b971      	cbnz	r1, 4f5ca <bt_smp_request_ltk+0xd6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   4f5ac:	210f      	movs	r1, #15
   4f5ae:	4630      	mov	r0, r6
   4f5b0:	f7ff fbed 	bl	4ed8e <atomic_test_bit>
   4f5b4:	b120      	cbz	r0, 4f5c0 <bt_smp_request_ltk+0xcc>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   4f5b6:	2202      	movs	r2, #2
   4f5b8:	2106      	movs	r1, #6
   4f5ba:	4620      	mov	r0, r4
   4f5bc:	f7e0 fc44 	bl	2fe48 <bt_conn_security_changed>
	smp_reset(smp);
   4f5c0:	4628      	mov	r0, r5
   4f5c2:	f7ff ff6e 	bl	4f4a2 <smp_reset>
		return false;
   4f5c6:	2000      	movs	r0, #0
   4f5c8:	e7cc      	b.n	4f564 <bt_smp_request_ltk+0x70>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   4f5ca:	89cb      	ldrh	r3, [r1, #14]
   4f5cc:	069b      	lsls	r3, r3, #26
   4f5ce:	d5ed      	bpl.n	4f5ac <bt_smp_request_ltk+0xb8>
		enc_size = conn->le.keys->enc_size;
   4f5d0:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   4f5d2:	311a      	adds	r1, #26
   4f5d4:	4622      	mov	r2, r4
   4f5d6:	e7b4      	b.n	4f542 <bt_smp_request_ltk+0x4e>

0004f5d8 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   4f5d8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   4f5dc:	4770      	bx	lr

0004f5de <bt_smp_start_security>:
{
   4f5de:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   4f5e2:	78c6      	ldrb	r6, [r0, #3]
{
   4f5e4:	4604      	mov	r4, r0
	switch (conn->role) {
   4f5e6:	b13e      	cbz	r6, 4f5f8 <bt_smp_start_security+0x1a>
   4f5e8:	2e01      	cmp	r6, #1
   4f5ea:	d03e      	beq.n	4f66a <bt_smp_start_security+0x8c>
		return -EIO;
   4f5ec:	f06f 0415 	mvn.w	r4, #21
}
   4f5f0:	4620      	mov	r0, r4
   4f5f2:	b003      	add	sp, #12
   4f5f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		smp = smp_chan_get(conn);
   4f5f8:	f7ff fbc2 	bl	4ed80 <smp_chan_get>
		if (!smp) {
   4f5fc:	4605      	mov	r5, r0
   4f5fe:	b910      	cbnz	r0, 4f606 <bt_smp_start_security+0x28>
			return -ENOTCONN;
   4f600:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   4f604:	e7f4      	b.n	4f5f0 <bt_smp_start_security+0x12>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   4f606:	1d06      	adds	r6, r0, #4
   4f608:	2103      	movs	r1, #3
   4f60a:	4630      	mov	r0, r6
   4f60c:	f7ff fbbf 	bl	4ed8e <atomic_test_bit>
   4f610:	b110      	cbz	r0, 4f618 <bt_smp_start_security+0x3a>
			return -EBUSY;
   4f612:	f06f 040f 	mvn.w	r4, #15
   4f616:	e7eb      	b.n	4f5f0 <bt_smp_start_security+0x12>
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   4f618:	2101      	movs	r1, #1
   4f61a:	4630      	mov	r0, r6
   4f61c:	f7ff fbb7 	bl	4ed8e <atomic_test_bit>
   4f620:	2800      	cmp	r0, #0
   4f622:	d1f6      	bne.n	4f612 <bt_smp_start_security+0x34>
		if (!smp_keys_check(conn)) {
   4f624:	4620      	mov	r0, r4
   4f626:	f7ff fbbb 	bl	4eda0 <smp_keys_check>
   4f62a:	b928      	cbnz	r0, 4f638 <bt_smp_start_security+0x5a>
			return smp_send_pairing_req(conn);
   4f62c:	4620      	mov	r0, r4
}
   4f62e:	b003      	add	sp, #12
   4f630:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return smp_send_pairing_req(conn);
   4f634:	f7e3 bc04 	b.w	32e40 <smp_send_pairing_req>
						  conn->le.keys->ltk.rand,
   4f638:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
		err = bt_conn_le_start_encryption(conn,
   4f63c:	7b0b      	ldrb	r3, [r1, #12]
   4f63e:	9300      	str	r3, [sp, #0]
   4f640:	f101 0218 	add.w	r2, r1, #24
   4f644:	f101 031a 	add.w	r3, r1, #26
   4f648:	4620      	mov	r0, r4
   4f64a:	3110      	adds	r1, #16
   4f64c:	f7fd fb82 	bl	4cd54 <bt_conn_le_start_encryption>
		if (err) {
   4f650:	4604      	mov	r4, r0
   4f652:	2800      	cmp	r0, #0
   4f654:	d1cc      	bne.n	4f5f0 <bt_smp_start_security+0x12>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   4f656:	210b      	movs	r1, #11
   4f658:	4628      	mov	r0, r5
   4f65a:	f7ff fcde 	bl	4f01a <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4f65e:	2101      	movs	r1, #1
   4f660:	4630      	mov	r0, r6
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   4f662:	f7ff fcda 	bl	4f01a <atomic_set_bit>
	return 0;
   4f666:	2400      	movs	r4, #0
   4f668:	e7c2      	b.n	4f5f0 <bt_smp_start_security+0x12>
	smp = smp_chan_get(conn);
   4f66a:	f7ff fb89 	bl	4ed80 <smp_chan_get>
	if (!smp) {
   4f66e:	4605      	mov	r5, r0
   4f670:	2800      	cmp	r0, #0
   4f672:	d0c5      	beq.n	4f600 <bt_smp_start_security+0x22>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   4f674:	f100 0804 	add.w	r8, r0, #4
   4f678:	2104      	movs	r1, #4
   4f67a:	4640      	mov	r0, r8
   4f67c:	f7ff fb87 	bl	4ed8e <atomic_test_bit>
   4f680:	2800      	cmp	r0, #0
   4f682:	d150      	bne.n	4f726 <bt_smp_start_security+0x148>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   4f684:	2103      	movs	r1, #3
   4f686:	4640      	mov	r0, r8
   4f688:	f7ff fb81 	bl	4ed8e <atomic_test_bit>
   4f68c:	2800      	cmp	r0, #0
   4f68e:	d1c0      	bne.n	4f612 <bt_smp_start_security+0x34>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   4f690:	4631      	mov	r1, r6
   4f692:	4640      	mov	r0, r8
   4f694:	f7ff fb7b 	bl	4ed8e <atomic_test_bit>
   4f698:	2800      	cmp	r0, #0
   4f69a:	d1ba      	bne.n	4f612 <bt_smp_start_security+0x34>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   4f69c:	7aa0      	ldrb	r0, [r4, #10]
   4f69e:	f7e3 fb43 	bl	32d28 <sec_level_reachable.isra.0>
   4f6a2:	b168      	cbz	r0, 4f6c0 <bt_smp_start_security+0xe2>
	if (!conn->le.keys) {
   4f6a4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   4f6a8:	b983      	cbnz	r3, 4f6cc <bt_smp_start_security+0xee>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   4f6aa:	7a20      	ldrb	r0, [r4, #8]
   4f6ac:	f104 0188 	add.w	r1, r4, #136	; 0x88
   4f6b0:	f7e4 fa2a 	bl	33b08 <bt_keys_get_addr>
   4f6b4:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   4f6b8:	b940      	cbnz	r0, 4f6cc <bt_smp_start_security+0xee>
			return -ENOMEM;
   4f6ba:	f06f 040b 	mvn.w	r4, #11
   4f6be:	e797      	b.n	4f5f0 <bt_smp_start_security+0x12>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   4f6c0:	4620      	mov	r0, r4
   4f6c2:	f7ff fb6d 	bl	4eda0 <smp_keys_check>
   4f6c6:	2800      	cmp	r0, #0
   4f6c8:	d1ec      	bne.n	4f6a4 <bt_smp_start_security+0xc6>
   4f6ca:	e78f      	b.n	4f5ec <bt_smp_start_security+0xe>
	if (smp_init(smp) != 0) {
   4f6cc:	4628      	mov	r0, r5
   4f6ce:	f7e3 fb85 	bl	32ddc <smp_init>
   4f6d2:	4607      	mov	r7, r0
   4f6d4:	b110      	cbz	r0, 4f6dc <bt_smp_start_security+0xfe>
		return -ENOBUFS;
   4f6d6:	f06f 0468 	mvn.w	r4, #104	; 0x68
   4f6da:	e789      	b.n	4f5f0 <bt_smp_start_security+0x12>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   4f6dc:	210b      	movs	r1, #11
   4f6de:	4628      	mov	r0, r5
   4f6e0:	f7ff fcdf 	bl	4f0a2 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   4f6e4:	4606      	mov	r6, r0
   4f6e6:	2800      	cmp	r0, #0
   4f6e8:	d0f5      	beq.n	4f6d6 <bt_smp_start_security+0xf8>
   4f6ea:	2101      	movs	r1, #1
   4f6ec:	3008      	adds	r0, #8
   4f6ee:	f000 fa94 	bl	4fc1a <net_buf_simple_add>
   4f6f2:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   4f6f4:	2009      	movs	r0, #9
   4f6f6:	f7e3 fa5d 	bl	32bb4 <get_auth.constprop.0>
   4f6fa:	463b      	mov	r3, r7
   4f6fc:	f889 0000 	strb.w	r0, [r9]
   4f700:	4632      	mov	r2, r6
   4f702:	4620      	mov	r0, r4
   4f704:	9700      	str	r7, [sp, #0]
   4f706:	2106      	movs	r1, #6
   4f708:	f7fd fcca 	bl	4d0a0 <bt_l2cap_send_cb>
	if (err) {
   4f70c:	4604      	mov	r4, r0
   4f70e:	b118      	cbz	r0, 4f718 <bt_smp_start_security+0x13a>
		net_buf_unref(req_buf);
   4f710:	4630      	mov	r0, r6
   4f712:	f7f4 f91b 	bl	4394c <net_buf_unref>
		return err;
   4f716:	e76b      	b.n	4f5f0 <bt_smp_start_security+0x12>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   4f718:	210f      	movs	r1, #15
   4f71a:	4640      	mov	r0, r8
   4f71c:	f7ff fc7d 	bl	4f01a <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   4f720:	2101      	movs	r1, #1
   4f722:	4628      	mov	r0, r5
   4f724:	e79d      	b.n	4f662 <bt_smp_start_security+0x84>
		return -EIO;
   4f726:	f06f 0404 	mvn.w	r4, #4
   4f72a:	e761      	b.n	4f5f0 <bt_smp_start_security+0x12>

0004f72c <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4f72c:	1d03      	adds	r3, r0, #4
{
   4f72e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4f730:	4605      	mov	r5, r0
   4f732:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4f734:	4618      	mov	r0, r3
   4f736:	2103      	movs	r1, #3
   4f738:	f7ff fb29 	bl	4ed8e <atomic_test_bit>
   4f73c:	b1d0      	cbz	r0, 4f774 <smp_error+0x48>
		smp_pairing_complete(smp, reason);
   4f73e:	4631      	mov	r1, r6
   4f740:	4628      	mov	r0, r5
   4f742:	f7e4 f855 	bl	337f0 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   4f746:	2105      	movs	r1, #5
   4f748:	4628      	mov	r0, r5
   4f74a:	f7ff fcaa 	bl	4f0a2 <smp_create_pdu.constprop.0>
	if (!buf) {
   4f74e:	4604      	mov	r4, r0
   4f750:	b308      	cbz	r0, 4f796 <smp_error+0x6a>
   4f752:	2101      	movs	r1, #1
   4f754:	3008      	adds	r0, #8
   4f756:	f000 fa60 	bl	4fc1a <net_buf_simple_add>
   4f75a:	2300      	movs	r3, #0
	rsp->reason = reason;
   4f75c:	7006      	strb	r6, [r0, #0]
   4f75e:	9300      	str	r3, [sp, #0]
   4f760:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   4f764:	4622      	mov	r2, r4
   4f766:	2106      	movs	r1, #6
   4f768:	f7fd fc9a 	bl	4d0a0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   4f76c:	b978      	cbnz	r0, 4f78e <smp_error+0x62>
	return 0;
   4f76e:	2000      	movs	r0, #0
}
   4f770:	b002      	add	sp, #8
   4f772:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   4f774:	2101      	movs	r1, #1
   4f776:	4618      	mov	r0, r3
   4f778:	f7ff fb09 	bl	4ed8e <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4f77c:	2800      	cmp	r0, #0
   4f77e:	d1de      	bne.n	4f73e <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   4f780:	210f      	movs	r1, #15
   4f782:	4618      	mov	r0, r3
   4f784:	f7ff fb03 	bl	4ed8e <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   4f788:	2800      	cmp	r0, #0
   4f78a:	d1d8      	bne.n	4f73e <smp_error+0x12>
   4f78c:	e7db      	b.n	4f746 <smp_error+0x1a>
		net_buf_unref(buf);
   4f78e:	4620      	mov	r0, r4
   4f790:	f7f4 f8dc 	bl	4394c <net_buf_unref>
   4f794:	e7eb      	b.n	4f76e <smp_error+0x42>
		return -ENOBUFS;
   4f796:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4f79a:	e7e9      	b.n	4f770 <smp_error+0x44>

0004f79c <bt_smp_dhkey_ready>:
{
   4f79c:	b570      	push	{r4, r5, r6, lr}
   4f79e:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   4f7a0:	2008      	movs	r0, #8
   4f7a2:	f7e3 f9bf 	bl	32b24 <smp_find>
	if (smp) {
   4f7a6:	4604      	mov	r4, r0
   4f7a8:	b1b8      	cbz	r0, 4f7da <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   4f7aa:	1d05      	adds	r5, r0, #4
   4f7ac:	2108      	movs	r1, #8
   4f7ae:	4628      	mov	r0, r5
   4f7b0:	f7ff fb69 	bl	4ee86 <atomic_clear_bit>
	if (!dhkey) {
   4f7b4:	b3c6      	cbz	r6, 4f828 <bt_smp_dhkey_ready+0x8c>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   4f7b6:	2107      	movs	r1, #7
   4f7b8:	f7ff fb65 	bl	4ee86 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   4f7bc:	4631      	mov	r1, r6
   4f7be:	2220      	movs	r2, #32
   4f7c0:	f104 0097 	add.w	r0, r4, #151	; 0x97
   4f7c4:	f7fc fa48 	bl	4bc58 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   4f7c8:	210a      	movs	r1, #10
   4f7ca:	4628      	mov	r0, r5
   4f7cc:	f7ff fadf 	bl	4ed8e <atomic_test_bit>
   4f7d0:	b168      	cbz	r0, 4f7ee <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4f7d2:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4f7d4:	4628      	mov	r0, r5
   4f7d6:	f7ff fc20 	bl	4f01a <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   4f7da:	2007      	movs	r0, #7
   4f7dc:	f7e3 f9a2 	bl	32b24 <smp_find>
		if (smp) {
   4f7e0:	4604      	mov	r4, r0
   4f7e2:	b118      	cbz	r0, 4f7ec <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   4f7e4:	f7e3 fb16 	bl	32e14 <smp_dhkey_generate>
			if (err) {
   4f7e8:	4601      	mov	r1, r0
   4f7ea:	b9b0      	cbnz	r0, 4f81a <bt_smp_dhkey_ready+0x7e>
}
   4f7ec:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   4f7ee:	2110      	movs	r1, #16
   4f7f0:	4628      	mov	r0, r5
   4f7f2:	f7ff facc 	bl	4ed8e <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4f7f6:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   4f7f8:	2800      	cmp	r0, #0
   4f7fa:	d1eb      	bne.n	4f7d4 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   4f7fc:	4628      	mov	r0, r5
   4f7fe:	f7ff fac6 	bl	4ed8e <atomic_test_bit>
   4f802:	2800      	cmp	r0, #0
   4f804:	d0e9      	beq.n	4f7da <bt_smp_dhkey_ready+0x3e>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4f806:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   4f80a:	78db      	ldrb	r3, [r3, #3]
			return compute_and_send_central_dhcheck(smp);
   4f80c:	4620      	mov	r0, r4
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4f80e:	b943      	cbnz	r3, 4f822 <bt_smp_dhkey_ready+0x86>
			return compute_and_send_central_dhcheck(smp);
   4f810:	f7ff fc96 	bl	4f140 <compute_and_send_central_dhcheck>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   4f814:	4601      	mov	r1, r0
		if (err) {
   4f816:	2800      	cmp	r0, #0
   4f818:	d0df      	beq.n	4f7da <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   4f81a:	4620      	mov	r0, r4
   4f81c:	f7ff ff86 	bl	4f72c <smp_error>
   4f820:	e7db      	b.n	4f7da <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   4f822:	f7ff fce1 	bl	4f1e8 <compute_and_check_and_send_periph_dhcheck>
   4f826:	e7f5      	b.n	4f814 <bt_smp_dhkey_ready+0x78>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   4f828:	210b      	movs	r1, #11
   4f82a:	e7f6      	b.n	4f81a <bt_smp_dhkey_ready+0x7e>

0004f82c <smp_ident_addr_info>:
{
   4f82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   4f830:	688f      	ldr	r7, [r1, #8]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   4f832:	783b      	ldrb	r3, [r7, #0]
{
   4f834:	4604      	mov	r4, r0
   4f836:	b123      	cbz	r3, 4f842 <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
   4f838:	79bb      	ldrb	r3, [r7, #6]
   4f83a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   4f83e:	2bc0      	cmp	r3, #192	; 0xc0
   4f840:	d176      	bne.n	4f930 <smp_ident_addr_info+0x104>
	struct bt_conn *conn = smp->chan.chan.conn;
   4f842:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   4f846:	f105 0888 	add.w	r8, r5, #136	; 0x88
	return memcmp(a, b, sizeof(*a));
   4f84a:	2207      	movs	r2, #7
   4f84c:	4639      	mov	r1, r7
   4f84e:	4640      	mov	r0, r8
   4f850:	f7fc f9f2 	bl	4bc38 <memcmp>
   4f854:	b180      	cbz	r0, 4f878 <smp_ident_addr_info+0x4c>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   4f856:	7a28      	ldrb	r0, [r5, #8]
   4f858:	4639      	mov	r1, r7
   4f85a:	f7e4 fa4f 	bl	33cfc <bt_keys_find_addr>
		if (keys) {
   4f85e:	4606      	mov	r6, r0
   4f860:	b150      	cbz	r0, 4f878 <smp_ident_addr_info+0x4c>
			if (!update_keys_check(smp, keys)) {
   4f862:	4601      	mov	r1, r0
   4f864:	4620      	mov	r0, r4
   4f866:	f7ff fac9 	bl	4edfc <update_keys_check>
   4f86a:	b910      	cbnz	r0, 4f872 <smp_ident_addr_info+0x46>
				return BT_SMP_ERR_UNSPECIFIED;
   4f86c:	2008      	movs	r0, #8
}
   4f86e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_keys_clear(keys);
   4f872:	4630      	mov	r0, r6
   4f874:	f7e4 fa60 	bl	33d38 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   4f878:	210d      	movs	r1, #13
   4f87a:	1d20      	adds	r0, r4, #4
   4f87c:	f7ff fa87 	bl	4ed8e <atomic_test_bit>
   4f880:	b398      	cbz	r0, 4f8ea <smp_ident_addr_info+0xbe>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   4f882:	7a29      	ldrb	r1, [r5, #8]
   4f884:	4642      	mov	r2, r8
   4f886:	2002      	movs	r0, #2
   4f888:	f000 f909 	bl	4fa9e <bt_keys_get_type>
		if (!keys) {
   4f88c:	4606      	mov	r6, r0
   4f88e:	2800      	cmp	r0, #0
   4f890:	d0ec      	beq.n	4f86c <smp_ident_addr_info+0x40>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   4f892:	78eb      	ldrb	r3, [r5, #3]
   4f894:	2b00      	cmp	r3, #0
   4f896:	d144      	bne.n	4f922 <smp_ident_addr_info+0xf6>
			dst = &conn->le.resp_addr;
   4f898:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   4f89c:	780b      	ldrb	r3, [r1, #0]
   4f89e:	2b01      	cmp	r3, #1
   4f8a0:	d120      	bne.n	4f8e4 <smp_ident_addr_info+0xb8>
		if (bt_addr_le_is_rpa(dst)) {
   4f8a2:	798b      	ldrb	r3, [r1, #6]
   4f8a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   4f8a8:	2b40      	cmp	r3, #64	; 0x40
   4f8aa:	d11b      	bne.n	4f8e4 <smp_ident_addr_info+0xb8>
	memcpy(dst, src, sizeof(*dst));
   4f8ac:	2206      	movs	r2, #6
   4f8ae:	3101      	adds	r1, #1
   4f8b0:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   4f8b4:	f7fc f9d0 	bl	4bc58 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   4f8b8:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   4f8bc:	b193      	cbz	r3, 4f8e4 <smp_ident_addr_info+0xb8>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   4f8be:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   4f8c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   4f8c6:	2bc0      	cmp	r3, #192	; 0xc0
   4f8c8:	d00c      	beq.n	4f8e4 <smp_ident_addr_info+0xb8>
	memcpy(dst, src, sizeof(*dst));
   4f8ca:	2207      	movs	r2, #7
   4f8cc:	4639      	mov	r1, r7
   4f8ce:	1c70      	adds	r0, r6, #1
   4f8d0:	f7fc f9c2 	bl	4bc58 <memcpy>
   4f8d4:	2207      	movs	r2, #7
   4f8d6:	4639      	mov	r1, r7
   4f8d8:	4640      	mov	r0, r8
   4f8da:	f7fc f9bd 	bl	4bc58 <memcpy>
				bt_conn_identity_resolved(conn);
   4f8de:	4628      	mov	r0, r5
   4f8e0:	f7e0 fa84 	bl	2fdec <bt_conn_identity_resolved>
		bt_id_add(keys);
   4f8e4:	4630      	mov	r0, r6
   4f8e6:	f7de fec1 	bl	2e66c <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   4f8ea:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   4f8ee:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   4f8f2:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   4f8f4:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   4f8f8:	d503      	bpl.n	4f902 <smp_ident_addr_info+0xd6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   4f8fa:	210a      	movs	r1, #10
   4f8fc:	4620      	mov	r0, r4
   4f8fe:	f7ff fb8c 	bl	4f01a <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4f902:	78eb      	ldrb	r3, [r5, #3]
   4f904:	b943      	cbnz	r3, 4f918 <smp_ident_addr_info+0xec>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   4f906:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   4f90a:	b92b      	cbnz	r3, 4f918 <smp_ident_addr_info+0xec>
	struct bt_keys *keys = conn->le.keys;
   4f90c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (!keys) {
   4f910:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   4f914:	2b00      	cmp	r3, #0
   4f916:	d0a9      	beq.n	4f86c <smp_ident_addr_info+0x40>
	if (!smp->local_dist && !smp->remote_dist) {
   4f918:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   4f91c:	b121      	cbz	r1, 4f928 <smp_ident_addr_info+0xfc>
	return 0;
   4f91e:	2000      	movs	r0, #0
   4f920:	e7a5      	b.n	4f86e <smp_ident_addr_info+0x42>
			dst = &conn->le.init_addr;
   4f922:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   4f926:	e7b9      	b.n	4f89c <smp_ident_addr_info+0x70>
		smp_pairing_complete(smp, 0);
   4f928:	4620      	mov	r0, r4
   4f92a:	f7e3 ff61 	bl	337f0 <smp_pairing_complete>
   4f92e:	e7f6      	b.n	4f91e <smp_ident_addr_info+0xf2>
		return BT_SMP_ERR_INVALID_PARAMS;
   4f930:	200a      	movs	r0, #10
   4f932:	e79c      	b.n	4f86e <smp_ident_addr_info+0x42>

0004f934 <bt_smp_disconnected>:
{
   4f934:	b570      	push	{r4, r5, r6, lr}
   4f936:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   4f938:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   4f93c:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4f940:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   4f942:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   4f946:	f001 f978 	bl	50c3a <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4f94a:	2103      	movs	r1, #3
   4f94c:	4620      	mov	r0, r4
   4f94e:	f7ff fa1e 	bl	4ed8e <atomic_test_bit>
   4f952:	b1a0      	cbz	r0, 4f97e <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   4f954:	2108      	movs	r1, #8
   4f956:	4630      	mov	r0, r6
   4f958:	f7e3 ff4a 	bl	337f0 <smp_pairing_complete>
	if (keys) {
   4f95c:	b13d      	cbz	r5, 4f96e <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   4f95e:	89eb      	ldrh	r3, [r5, #14]
   4f960:	b113      	cbz	r3, 4f968 <bt_smp_disconnected+0x34>
   4f962:	7b6b      	ldrb	r3, [r5, #13]
   4f964:	079b      	lsls	r3, r3, #30
   4f966:	d502      	bpl.n	4f96e <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   4f968:	4628      	mov	r0, r5
   4f96a:	f7e4 f9e5 	bl	33d38 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   4f96e:	4630      	mov	r0, r6
   4f970:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   4f974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   4f978:	2100      	movs	r1, #0
   4f97a:	f7fc b978 	b.w	4bc6e <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   4f97e:	2101      	movs	r1, #1
   4f980:	4620      	mov	r0, r4
   4f982:	f7ff fa04 	bl	4ed8e <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4f986:	2800      	cmp	r0, #0
   4f988:	d1e4      	bne.n	4f954 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   4f98a:	210f      	movs	r1, #15
   4f98c:	4620      	mov	r0, r4
   4f98e:	f7ff f9fe 	bl	4ed8e <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   4f992:	2800      	cmp	r0, #0
   4f994:	d1de      	bne.n	4f954 <bt_smp_disconnected+0x20>
   4f996:	e7e1      	b.n	4f95c <bt_smp_disconnected+0x28>

0004f998 <smp_timeout>:
{
   4f998:	b510      	push	{r4, lr}
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   4f99a:	2108      	movs	r1, #8
{
   4f99c:	4604      	mov	r4, r0
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   4f99e:	f5a0 70ec 	sub.w	r0, r0, #472	; 0x1d8
   4f9a2:	f7e3 ff25 	bl	337f0 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   4f9a6:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
   4f9aa:	2104      	movs	r1, #4
}
   4f9ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   4f9b0:	f7ff bb33 	b.w	4f01a <atomic_set_bit>

0004f9b4 <bt_smp_update_keys>:
{
   4f9b4:	b570      	push	{r4, r5, r6, lr}
   4f9b6:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   4f9b8:	f7ff f9e2 	bl	4ed80 <smp_chan_get>
	if (!smp) {
   4f9bc:	4605      	mov	r5, r0
   4f9be:	2800      	cmp	r0, #0
   4f9c0:	d06a      	beq.n	4fa98 <bt_smp_update_keys+0xe4>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   4f9c2:	1d06      	adds	r6, r0, #4
   4f9c4:	2103      	movs	r1, #3
   4f9c6:	4630      	mov	r0, r6
   4f9c8:	f7ff f9e1 	bl	4ed8e <atomic_test_bit>
   4f9cc:	2800      	cmp	r0, #0
   4f9ce:	d063      	beq.n	4fa98 <bt_smp_update_keys+0xe4>
	if (conn->le.keys) {
   4f9d0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4f9d4:	b108      	cbz	r0, 4f9da <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   4f9d6:	f7e4 f9af 	bl	33d38 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   4f9da:	7a20      	ldrb	r0, [r4, #8]
   4f9dc:	f104 0188 	add.w	r1, r4, #136	; 0x88
   4f9e0:	f7e4 f892 	bl	33b08 <bt_keys_get_addr>
   4f9e4:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   4f9e8:	b928      	cbnz	r0, 4f9f6 <bt_smp_update_keys+0x42>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   4f9ea:	4628      	mov	r0, r5
   4f9ec:	2108      	movs	r1, #8
}
   4f9ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   4f9f2:	f7ff be9b 	b.w	4f72c <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   4f9f6:	210e      	movs	r1, #14
   4f9f8:	4630      	mov	r0, r6
   4f9fa:	f7ff f9c8 	bl	4ed8e <atomic_test_bit>
   4f9fe:	b128      	cbz	r0, 4fa0c <bt_smp_update_keys+0x58>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   4fa00:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   4fa04:	7b53      	ldrb	r3, [r2, #13]
   4fa06:	f043 0302 	orr.w	r3, r3, #2
   4fa0a:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   4fa0c:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   4fa0e:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   4fa12:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   4fa14:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   4fa16:	d836      	bhi.n	4fa86 <bt_smp_update_keys+0xd2>
   4fa18:	b3c2      	cbz	r2, 4fa8c <bt_smp_update_keys+0xd8>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   4fa1a:	f043 0301 	orr.w	r3, r3, #1
   4fa1e:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   4fa20:	7b6b      	ldrb	r3, [r5, #13]
   4fa22:	7d2a      	ldrb	r2, [r5, #20]
   4fa24:	4293      	cmp	r3, r2
   4fa26:	bf28      	it	cs
   4fa28:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   4fa2a:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   4fa2c:	4630      	mov	r0, r6
   4fa2e:	2105      	movs	r1, #5
   4fa30:	f7ff f9ad 	bl	4ed8e <atomic_test_bit>
   4fa34:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   4fa38:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   4fa3a:	b350      	cbz	r0, 4fa92 <bt_smp_update_keys+0xde>
		conn->le.keys->flags |= BT_KEYS_SC;
   4fa3c:	f042 0210 	orr.w	r2, r2, #16
   4fa40:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   4fa42:	210d      	movs	r1, #13
   4fa44:	4630      	mov	r0, r6
   4fa46:	f7ff f9a2 	bl	4ed8e <atomic_test_bit>
   4fa4a:	b328      	cbz	r0, 4fa98 <bt_smp_update_keys+0xe4>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   4fa4c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4fa50:	2120      	movs	r1, #32
   4fa52:	f000 f834 	bl	4fabe <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   4fa56:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4fa5a:	f105 0147 	add.w	r1, r5, #71	; 0x47
   4fa5e:	2210      	movs	r2, #16
   4fa60:	301a      	adds	r0, #26
   4fa62:	f7fc f8f9 	bl	4bc58 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   4fa66:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4fa6a:	2208      	movs	r2, #8
   4fa6c:	2100      	movs	r1, #0
   4fa6e:	3010      	adds	r0, #16
   4fa70:	f7fc f8fd 	bl	4bc6e <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   4fa74:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4fa78:	2202      	movs	r2, #2
}
   4fa7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   4fa7e:	2100      	movs	r1, #0
   4fa80:	3018      	adds	r0, #24
   4fa82:	f7fc b8f4 	b.w	4bc6e <memset>
	switch (smp->method) {
   4fa86:	3a05      	subs	r2, #5
   4fa88:	2a01      	cmp	r2, #1
   4fa8a:	d9c6      	bls.n	4fa1a <bt_smp_update_keys+0x66>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   4fa8c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		break;
   4fa90:	e7c5      	b.n	4fa1e <bt_smp_update_keys+0x6a>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   4fa92:	f022 0210 	bic.w	r2, r2, #16
   4fa96:	735a      	strb	r2, [r3, #13]
}
   4fa98:	bd70      	pop	{r4, r5, r6, pc}

0004fa9a <id_add>:
	bt_id_add(keys);
   4fa9a:	f7de bde7 	b.w	2e66c <bt_id_add>

0004fa9e <bt_keys_get_type>:
{
   4fa9e:	b570      	push	{r4, r5, r6, lr}
   4faa0:	4604      	mov	r4, r0
   4faa2:	460d      	mov	r5, r1
   4faa4:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   4faa6:	f7e4 f8b1 	bl	33c0c <bt_keys_find>
	if (keys) {
   4faaa:	b938      	cbnz	r0, 4fabc <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   4faac:	4631      	mov	r1, r6
   4faae:	4628      	mov	r0, r5
   4fab0:	f7e4 f82a 	bl	33b08 <bt_keys_get_addr>
	if (!keys) {
   4fab4:	b110      	cbz	r0, 4fabc <bt_keys_get_type+0x1e>
	keys->keys |= type;
   4fab6:	89c3      	ldrh	r3, [r0, #14]
   4fab8:	431c      	orrs	r4, r3
   4faba:	81c4      	strh	r4, [r0, #14]
}
   4fabc:	bd70      	pop	{r4, r5, r6, pc}

0004fabe <bt_keys_add_type>:
	keys->keys |= type;
   4fabe:	89c3      	ldrh	r3, [r0, #14]
   4fac0:	4319      	orrs	r1, r3
   4fac2:	81c1      	strh	r1, [r0, #14]
}
   4fac4:	4770      	bx	lr

0004fac6 <keys_set>:
{
   4fac6:	b570      	push	{r4, r5, r6, lr}
   4fac8:	4606      	mov	r6, r0
   4faca:	b090      	sub	sp, #64	; 0x40
   4facc:	4614      	mov	r4, r2
   4face:	4618      	mov	r0, r3
	if (!name) {
   4fad0:	b326      	cbz	r6, 4fb1c <keys_set+0x56>
	len = read_cb(cb_arg, val, sizeof(val));
   4fad2:	2234      	movs	r2, #52	; 0x34
   4fad4:	a903      	add	r1, sp, #12
   4fad6:	47a0      	blx	r4
	if (len < 0) {
   4fad8:	1e04      	subs	r4, r0, #0
   4fada:	db1f      	blt.n	4fb1c <keys_set+0x56>
	err = bt_settings_decode_key(name, &addr);
   4fadc:	a901      	add	r1, sp, #4
   4fade:	4630      	mov	r0, r6
   4fae0:	f7fc f982 	bl	4bde8 <bt_settings_decode_key>
	if (err) {
   4fae4:	4605      	mov	r5, r0
   4fae6:	b9c8      	cbnz	r0, 4fb1c <keys_set+0x56>
	settings_name_next(name, &next);
   4fae8:	4669      	mov	r1, sp
   4faea:	4630      	mov	r0, r6
   4faec:	f7fa fde3 	bl	4a6b6 <settings_name_next>
	if (!next) {
   4faf0:	9800      	ldr	r0, [sp, #0]
   4faf2:	b968      	cbnz	r0, 4fb10 <keys_set+0x4a>
	if (!len) {
   4faf4:	b9ac      	cbnz	r4, 4fb22 <keys_set+0x5c>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   4faf6:	aa01      	add	r2, sp, #4
   4faf8:	4621      	mov	r1, r4
   4fafa:	203f      	movs	r0, #63	; 0x3f
   4fafc:	f7e4 f886 	bl	33c0c <bt_keys_find>
		if (keys) {
   4fb00:	b118      	cbz	r0, 4fb0a <keys_set+0x44>
			(void)memset(keys, 0, sizeof(*keys));
   4fb02:	2240      	movs	r2, #64	; 0x40
   4fb04:	4621      	mov	r1, r4
   4fb06:	f7fc f8b2 	bl	4bc6e <memset>
}
   4fb0a:	4628      	mov	r0, r5
   4fb0c:	b010      	add	sp, #64	; 0x40
   4fb0e:	bd70      	pop	{r4, r5, r6, pc}
		unsigned long next_id = strtoul(next, NULL, 10);
   4fb10:	220a      	movs	r2, #10
   4fb12:	4629      	mov	r1, r5
   4fb14:	f7fb ffe8 	bl	4bae8 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   4fb18:	2800      	cmp	r0, #0
   4fb1a:	d0eb      	beq.n	4faf4 <keys_set+0x2e>
		return -EINVAL;
   4fb1c:	f06f 0515 	mvn.w	r5, #21
   4fb20:	e7f3      	b.n	4fb0a <keys_set+0x44>
	keys = bt_keys_get_addr(id, &addr);
   4fb22:	a901      	add	r1, sp, #4
   4fb24:	2000      	movs	r0, #0
   4fb26:	f7e3 ffef 	bl	33b08 <bt_keys_get_addr>
	if (!keys) {
   4fb2a:	b150      	cbz	r0, 4fb42 <keys_set+0x7c>
	if (len != BT_KEYS_STORAGE_LEN) {
   4fb2c:	2c34      	cmp	r4, #52	; 0x34
   4fb2e:	d002      	beq.n	4fb36 <keys_set+0x70>
			bt_keys_clear(keys);
   4fb30:	f7e4 f902 	bl	33d38 <bt_keys_clear>
			return -EINVAL;
   4fb34:	e7f2      	b.n	4fb1c <keys_set+0x56>
		memcpy(keys->storage_start, val, len);
   4fb36:	4622      	mov	r2, r4
   4fb38:	a903      	add	r1, sp, #12
   4fb3a:	300c      	adds	r0, #12
   4fb3c:	f7fc f88c 	bl	4bc58 <memcpy>
	return 0;
   4fb40:	e7e3      	b.n	4fb0a <keys_set+0x44>
		return -ENOMEM;
   4fb42:	f06f 050b 	mvn.w	r5, #11
   4fb46:	e7e0      	b.n	4fb0a <keys_set+0x44>

0004fb48 <fixed_data_unref>:
}
   4fb48:	4770      	bx	lr

0004fb4a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   4fb4a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   4fb4c:	6849      	ldr	r1, [r1, #4]
   4fb4e:	6809      	ldr	r1, [r1, #0]
   4fb50:	f7f3 be6a 	b.w	43828 <net_buf_alloc_len>

0004fb54 <net_buf_get>:
{
   4fb54:	b570      	push	{r4, r5, r6, lr}
   4fb56:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   4fb58:	f7f8 fa56 	bl	48008 <z_impl_k_queue_get>
	if (!buf) {
   4fb5c:	4605      	mov	r5, r0
   4fb5e:	b128      	cbz	r0, 4fb6c <net_buf_get+0x18>
   4fb60:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   4fb62:	7963      	ldrb	r3, [r4, #5]
   4fb64:	f013 0301 	ands.w	r3, r3, #1
   4fb68:	d102      	bne.n	4fb70 <net_buf_get+0x1c>
	frag->frags = NULL;
   4fb6a:	6023      	str	r3, [r4, #0]
}
   4fb6c:	4628      	mov	r0, r5
   4fb6e:	bd70      	pop	{r4, r5, r6, pc}
   4fb70:	2300      	movs	r3, #0
   4fb72:	2200      	movs	r2, #0
   4fb74:	4630      	mov	r0, r6
   4fb76:	f7f8 fa47 	bl	48008 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   4fb7a:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   4fb7c:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   4fb7e:	f023 0301 	bic.w	r3, r3, #1
   4fb82:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   4fb84:	4604      	mov	r4, r0
   4fb86:	e7ec      	b.n	4fb62 <net_buf_get+0xe>

0004fb88 <net_buf_simple_init_with_data>:
	buf->size  = size;
   4fb88:	b292      	uxth	r2, r2
	buf->__buf = data;
   4fb8a:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   4fb8c:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   4fb8e:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   4fb90:	8082      	strh	r2, [r0, #4]
}
   4fb92:	4770      	bx	lr

0004fb94 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   4fb94:	6883      	ldr	r3, [r0, #8]
   4fb96:	440b      	add	r3, r1
   4fb98:	6003      	str	r3, [r0, #0]
}
   4fb9a:	4770      	bx	lr

0004fb9c <net_buf_put>:
{
   4fb9c:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   4fb9e:	460a      	mov	r2, r1
   4fba0:	6814      	ldr	r4, [r2, #0]
   4fba2:	b914      	cbnz	r4, 4fbaa <net_buf_put+0xe>
}
   4fba4:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   4fba6:	f000 bf45 	b.w	50a34 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   4fbaa:	7953      	ldrb	r3, [r2, #5]
   4fbac:	f043 0301 	orr.w	r3, r3, #1
   4fbb0:	7153      	strb	r3, [r2, #5]
   4fbb2:	4622      	mov	r2, r4
   4fbb4:	e7f4      	b.n	4fba0 <net_buf_put+0x4>

0004fbb6 <net_buf_ref>:
	buf->ref++;
   4fbb6:	7902      	ldrb	r2, [r0, #4]
   4fbb8:	3201      	adds	r2, #1
   4fbba:	7102      	strb	r2, [r0, #4]
}
   4fbbc:	4770      	bx	lr

0004fbbe <net_buf_frag_last>:
{
   4fbbe:	4603      	mov	r3, r0
	while (buf->frags) {
   4fbc0:	4618      	mov	r0, r3
   4fbc2:	681b      	ldr	r3, [r3, #0]
   4fbc4:	2b00      	cmp	r3, #0
   4fbc6:	d1fb      	bne.n	4fbc0 <net_buf_frag_last+0x2>
}
   4fbc8:	4770      	bx	lr

0004fbca <net_buf_frag_insert>:
	if (parent->frags) {
   4fbca:	6802      	ldr	r2, [r0, #0]
{
   4fbcc:	b510      	push	{r4, lr}
	if (parent->frags) {
   4fbce:	b12a      	cbz	r2, 4fbdc <net_buf_frag_insert+0x12>
   4fbd0:	460b      	mov	r3, r1
	while (buf->frags) {
   4fbd2:	461c      	mov	r4, r3
   4fbd4:	681b      	ldr	r3, [r3, #0]
   4fbd6:	2b00      	cmp	r3, #0
   4fbd8:	d1fb      	bne.n	4fbd2 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   4fbda:	6022      	str	r2, [r4, #0]
	parent->frags = frag;
   4fbdc:	6001      	str	r1, [r0, #0]
}
   4fbde:	bd10      	pop	{r4, pc}

0004fbe0 <net_buf_frag_add>:
{
   4fbe0:	b510      	push	{r4, lr}
	if (!head) {
   4fbe2:	4604      	mov	r4, r0
   4fbe4:	b920      	cbnz	r0, 4fbf0 <net_buf_frag_add+0x10>
	buf->ref++;
   4fbe6:	790b      	ldrb	r3, [r1, #4]
   4fbe8:	3301      	adds	r3, #1
   4fbea:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   4fbec:	4608      	mov	r0, r1
}
   4fbee:	bd10      	pop	{r4, pc}
   4fbf0:	4603      	mov	r3, r0
	while (buf->frags) {
   4fbf2:	4618      	mov	r0, r3
   4fbf4:	681b      	ldr	r3, [r3, #0]
   4fbf6:	2b00      	cmp	r3, #0
   4fbf8:	d1fb      	bne.n	4fbf2 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   4fbfa:	f7ff ffe6 	bl	4fbca <net_buf_frag_insert>
   4fbfe:	4620      	mov	r0, r4
   4fc00:	e7f5      	b.n	4fbee <net_buf_frag_add+0xe>

0004fc02 <net_buf_frag_del>:
{
   4fc02:	b510      	push	{r4, lr}
	if (parent) {
   4fc04:	b108      	cbz	r0, 4fc0a <net_buf_frag_del+0x8>
		parent->frags = frag->frags;
   4fc06:	680b      	ldr	r3, [r1, #0]
   4fc08:	6003      	str	r3, [r0, #0]
	next_frag = frag->frags;
   4fc0a:	680c      	ldr	r4, [r1, #0]
	frag->frags = NULL;
   4fc0c:	2300      	movs	r3, #0
	net_buf_unref(frag);
   4fc0e:	4608      	mov	r0, r1
	frag->frags = NULL;
   4fc10:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   4fc12:	f7f3 fe9b 	bl	4394c <net_buf_unref>
}
   4fc16:	4620      	mov	r0, r4
   4fc18:	bd10      	pop	{r4, pc}

0004fc1a <net_buf_simple_add>:
	return buf->data + buf->len;
   4fc1a:	8883      	ldrh	r3, [r0, #4]
   4fc1c:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   4fc1e:	4419      	add	r1, r3
   4fc20:	8081      	strh	r1, [r0, #4]
	return tail;
}
   4fc22:	18d0      	adds	r0, r2, r3
   4fc24:	4770      	bx	lr

0004fc26 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   4fc26:	b430      	push	{r4, r5}
   4fc28:	8884      	ldrh	r4, [r0, #4]
   4fc2a:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   4fc2c:	18a3      	adds	r3, r4, r2
   4fc2e:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   4fc30:	1928      	adds	r0, r5, r4
}
   4fc32:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   4fc34:	f7fc b810 	b.w	4bc58 <memcpy>

0004fc38 <net_buf_simple_add_u8>:
   4fc38:	8883      	ldrh	r3, [r0, #4]
   4fc3a:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   4fc3c:	b510      	push	{r4, lr}
	buf->len += len;
   4fc3e:	1c5c      	adds	r4, r3, #1
   4fc40:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   4fc42:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   4fc44:	18d0      	adds	r0, r2, r3
   4fc46:	bd10      	pop	{r4, pc}

0004fc48 <net_buf_simple_add_le16>:
   4fc48:	8883      	ldrh	r3, [r0, #4]
   4fc4a:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   4fc4c:	b530      	push	{r4, r5, lr}
   4fc4e:	18d4      	adds	r4, r2, r3
	buf->len += len;
   4fc50:	1c9d      	adds	r5, r3, #2
   4fc52:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   4fc54:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   4fc56:	0a09      	lsrs	r1, r1, #8
   4fc58:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   4fc5a:	bd30      	pop	{r4, r5, pc}

0004fc5c <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   4fc5c:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   4fc5e:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   4fc60:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   4fc62:	1a40      	subs	r0, r0, r1
	buf->len += len;
   4fc64:	4411      	add	r1, r2
	buf->data -= len;
   4fc66:	6018      	str	r0, [r3, #0]
	buf->len += len;
   4fc68:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   4fc6a:	4770      	bx	lr

0004fc6c <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   4fc6c:	8882      	ldrh	r2, [r0, #4]
   4fc6e:	1a52      	subs	r2, r2, r1
{
   4fc70:	4603      	mov	r3, r0
	buf->len -= len;
   4fc72:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   4fc74:	6800      	ldr	r0, [r0, #0]
   4fc76:	4408      	add	r0, r1
   4fc78:	6018      	str	r0, [r3, #0]
}
   4fc7a:	4770      	bx	lr

0004fc7c <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   4fc7c:	4603      	mov	r3, r0
	void *data = buf->data;
   4fc7e:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   4fc80:	889a      	ldrh	r2, [r3, #4]
   4fc82:	1a52      	subs	r2, r2, r1
	buf->data += len;
   4fc84:	4401      	add	r1, r0
	buf->len -= len;
   4fc86:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   4fc88:	6019      	str	r1, [r3, #0]

	return data;
}
   4fc8a:	4770      	bx	lr

0004fc8c <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   4fc8c:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   4fc8e:	6803      	ldr	r3, [r0, #0]
   4fc90:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   4fc92:	2101      	movs	r1, #1
   4fc94:	f7ff ffea 	bl	4fc6c <net_buf_simple_pull>

	return val;
}
   4fc98:	4620      	mov	r0, r4
   4fc9a:	bd10      	pop	{r4, pc}

0004fc9c <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   4fc9c:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   4fc9e:	6803      	ldr	r3, [r0, #0]
   4fca0:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   4fca2:	2102      	movs	r1, #2
   4fca4:	f7ff ffe2 	bl	4fc6c <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   4fca8:	4620      	mov	r0, r4
   4fcaa:	bd10      	pop	{r4, pc}

0004fcac <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   4fcac:	6802      	ldr	r2, [r0, #0]
   4fcae:	6880      	ldr	r0, [r0, #8]
}
   4fcb0:	1a10      	subs	r0, r2, r0
   4fcb2:	4770      	bx	lr

0004fcb4 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   4fcb4:	8883      	ldrh	r3, [r0, #4]
   4fcb6:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   4fcb8:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   4fcba:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   4fcbc:	6803      	ldr	r3, [r0, #0]
   4fcbe:	1a5b      	subs	r3, r3, r1
}
   4fcc0:	1ad0      	subs	r0, r2, r3
   4fcc2:	4770      	bx	lr

0004fcc4 <hid_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   4fcc4:	7081      	strb	r1, [r0, #2]
}
   4fcc6:	4770      	bx	lr

0004fcc8 <usb_hid_device_init>:
static int usb_hid_device_init(const struct device *dev)
{
	LOG_DBG("Init HID Device: dev %p (%s)", dev, dev->name);

	return 0;
}
   4fcc8:	2000      	movs	r0, #0
   4fcca:	4770      	bx	lr

0004fccc <usb_hid_init>:
	usb_set_hid_report_size(cfg, dev_data->report_size);
   4fccc:	6903      	ldr	r3, [r0, #16]
   4fcce:	6842      	ldr	r2, [r0, #4]
   4fcd0:	685b      	ldr	r3, [r3, #4]
   4fcd2:	6852      	ldr	r2, [r2, #4]
	dst[0] = val;
   4fcd4:	7413      	strb	r3, [r2, #16]
	dst[1] = val >> 8;
   4fcd6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   4fcda:	7453      	strb	r3, [r2, #17]
}
   4fcdc:	2000      	movs	r0, #0
   4fcde:	4770      	bx	lr

0004fce0 <hid_int_ep_write>:
{
   4fce0:	b430      	push	{r4, r5}
	const struct usb_cfg_data *cfg = dev->config;
   4fce2:	6844      	ldr	r4, [r0, #4]
	struct hid_device_info *hid_dev_data = dev->data;
   4fce4:	6900      	ldr	r0, [r0, #16]
	if (hid_dev_data->configured && !hid_dev_data->suspended) {
   4fce6:	7b05      	ldrb	r5, [r0, #12]
   4fce8:	b135      	cbz	r5, 4fcf8 <hid_int_ep_write+0x18>
   4fcea:	7b40      	ldrb	r0, [r0, #13]
   4fcec:	b920      	cbnz	r0, 4fcf8 <hid_int_ep_write+0x18>
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
   4fcee:	6a20      	ldr	r0, [r4, #32]
}
   4fcf0:	bc30      	pop	{r4, r5}
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
   4fcf2:	7900      	ldrb	r0, [r0, #4]
   4fcf4:	f7fa bc4e 	b.w	4a594 <usb_write>
}
   4fcf8:	f06f 000a 	mvn.w	r0, #10
   4fcfc:	bc30      	pop	{r4, r5}
   4fcfe:	4770      	bx	lr

0004fd00 <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   4fd00:	6903      	ldr	r3, [r0, #16]
{
   4fd02:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
   4fd04:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   4fd08:	2300      	movs	r3, #0
   4fd0a:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   4fd0c:	7f83      	ldrb	r3, [r0, #30]
{
   4fd0e:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   4fd10:	b113      	cbz	r3, 4fd18 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   4fd12:	7a40      	ldrb	r0, [r0, #9]
   4fd14:	f000 fb5a 	bl	503cc <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   4fd18:	2301      	movs	r3, #1
   4fd1a:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   4fd1c:	2300      	movs	r3, #0
   4fd1e:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   4fd20:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   4fd22:	77a3      	strb	r3, [r4, #30]
}
   4fd24:	bd10      	pop	{r4, pc}

0004fd26 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   4fd26:	f7f8 b8b5 	b.w	47e94 <z_impl_k_mutex_lock>

0004fd2a <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   4fd2a:	f7f8 b92b 	b.w	47f84 <z_impl_k_mutex_unlock>

0004fd2e <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   4fd2e:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   4fd30:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   4fd32:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   4fd36:	b921      	cbnz	r1, 4fd42 <usb_dc_ep_check_cap+0x14>
   4fd38:	3a00      	subs	r2, #0
   4fd3a:	bf18      	it	ne
   4fd3c:	2201      	movne	r2, #1
   4fd3e:	4250      	negs	r0, r2
   4fd40:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   4fd42:	2a08      	cmp	r2, #8
   4fd44:	d806      	bhi.n	4fd54 <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   4fd46:	2901      	cmp	r1, #1
   4fd48:	d107      	bne.n	4fd5a <usb_dc_ep_check_cap+0x2c>
   4fd4a:	f083 0008 	eor.w	r0, r3, #8
   4fd4e:	f340 00c0 	sbfx	r0, r0, #3, #1
   4fd52:	4770      	bx	lr
		return -1;
   4fd54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4fd58:	4770      	bx	lr
	return 0;
   4fd5a:	2000      	movs	r0, #0
}
   4fd5c:	4770      	bx	lr

0004fd5e <usb_dc_ep_read>:
{
   4fd5e:	b570      	push	{r4, r5, r6, lr}
   4fd60:	4604      	mov	r4, r0
   4fd62:	460e      	mov	r6, r1
   4fd64:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   4fd66:	f7f4 fc1b 	bl	445a0 <usb_dc_ep_read_wait>
	if (ret) {
   4fd6a:	b930      	cbnz	r0, 4fd7a <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   4fd6c:	b906      	cbnz	r6, 4fd70 <usb_dc_ep_read+0x12>
   4fd6e:	b125      	cbz	r5, 4fd7a <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   4fd70:	4620      	mov	r0, r4
}
   4fd72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   4fd76:	f7f4 bc5b 	b.w	44630 <usb_dc_ep_read_continue>
}
   4fd7a:	bd70      	pop	{r4, r5, r6, pc}

0004fd7c <usb_dc_wakeup_request>:
{
   4fd7c:	b508      	push	{r3, lr}
	bool res = nrfx_usbd_wakeup_req();
   4fd7e:	f7f6 ffe7 	bl	46d50 <nrfx_usbd_wakeup_req>
	return 0;
   4fd82:	2800      	cmp	r0, #0
}
   4fd84:	bf0c      	ite	eq
   4fd86:	f06f 000a 	mvneq.w	r0, #10
   4fd8a:	2000      	movne	r0, #0
   4fd8c:	bd08      	pop	{r3, pc}

0004fd8e <adc_context_on_timer_expired>:
{
   4fd8e:	b410      	push	{r4}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   4fd90:	f1a0 0308 	sub.w	r3, r0, #8
   4fd94:	f3bf 8f5b 	dmb	ish
   4fd98:	e853 2f00 	ldrex	r2, [r3]
   4fd9c:	1c51      	adds	r1, r2, #1
   4fd9e:	e843 1400 	strex	r4, r1, [r3]
   4fda2:	2c00      	cmp	r4, #0
   4fda4:	d1f8      	bne.n	4fd98 <adc_context_on_timer_expired+0xa>
   4fda6:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   4fdaa:	b922      	cbnz	r2, 4fdb6 <adc_context_on_timer_expired+0x28>
		adc_context_start_sampling(ctx);
   4fdac:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
}
   4fdb0:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   4fdb2:	f7f4 bd2b 	b.w	4480c <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
   4fdb6:	f06f 030f 	mvn.w	r3, #15
}
   4fdba:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   4fdbc:	6683      	str	r3, [r0, #104]	; 0x68
}
   4fdbe:	4770      	bx	lr

0004fdc0 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   4fdc0:	6903      	ldr	r3, [r0, #16]
   4fdc2:	b2c9      	uxtb	r1, r1
   4fdc4:	220c      	movs	r2, #12
   4fdc6:	fb01 3302 	mla	r3, r1, r2, r3
   4fdca:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   4fdcc:	f000 0007 	and.w	r0, r0, #7
   4fdd0:	4770      	bx	lr

0004fdd2 <set_on_state>:
	__asm__ volatile(
   4fdd2:	f04f 0320 	mov.w	r3, #32
   4fdd6:	f3ef 8211 	mrs	r2, BASEPRI
   4fdda:	f383 8812 	msr	BASEPRI_MAX, r3
   4fdde:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   4fde2:	6803      	ldr	r3, [r0, #0]
   4fde4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   4fde8:	f043 0302 	orr.w	r3, r3, #2
   4fdec:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   4fdee:	f382 8811 	msr	BASEPRI, r2
   4fdf2:	f3bf 8f6f 	isb	sy
}
   4fdf6:	4770      	bx	lr

0004fdf8 <stop>:
{
   4fdf8:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   4fdfa:	6903      	ldr	r3, [r0, #16]
	return &data->subsys[type];
   4fdfc:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   4fdfe:	f04f 0420 	mov.w	r4, #32
   4fe02:	f3ef 8511 	mrs	r5, BASEPRI
   4fe06:	f384 8812 	msr	BASEPRI_MAX, r4
   4fe0a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   4fe0e:	260c      	movs	r6, #12
   4fe10:	fb06 3401 	mla	r4, r6, r1, r3
   4fe14:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   4fe16:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   4fe1a:	d008      	beq.n	4fe2e <stop+0x36>
   4fe1c:	42a2      	cmp	r2, r4
   4fe1e:	d006      	beq.n	4fe2e <stop+0x36>
	__asm__ volatile(
   4fe20:	f385 8811 	msr	BASEPRI, r5
   4fe24:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   4fe28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   4fe2c:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   4fe2e:	fb06 3301 	mla	r3, r6, r1, r3
   4fe32:	2201      	movs	r2, #1
   4fe34:	641a      	str	r2, [r3, #64]	; 0x40
   4fe36:	f385 8811 	msr	BASEPRI, r5
   4fe3a:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   4fe3e:	6843      	ldr	r3, [r0, #4]
   4fe40:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   4fe44:	685b      	ldr	r3, [r3, #4]
   4fe46:	4798      	blx	r3
	return 0;
   4fe48:	2000      	movs	r0, #0
   4fe4a:	e7ef      	b.n	4fe2c <stop+0x34>

0004fe4c <api_stop>:
	return stop(dev, subsys, CTX_API);
   4fe4c:	2280      	movs	r2, #128	; 0x80
   4fe4e:	f7ff bfd3 	b.w	4fdf8 <stop>

0004fe52 <async_start>:
{
   4fe52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4fe54:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   4fe56:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   4fe58:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   4fe5a:	f04f 0520 	mov.w	r5, #32
   4fe5e:	f3ef 8611 	mrs	r6, BASEPRI
   4fe62:	f385 8812 	msr	BASEPRI_MAX, r5
   4fe66:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   4fe6a:	250c      	movs	r5, #12
   4fe6c:	fb05 4401 	mla	r4, r5, r1, r4
   4fe70:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   4fe72:	f005 0c07 	and.w	ip, r5, #7
   4fe76:	f1bc 0f01 	cmp.w	ip, #1
   4fe7a:	d10c      	bne.n	4fe96 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   4fe7c:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   4fe7e:	f386 8811 	msr	BASEPRI, r6
   4fe82:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   4fe86:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   4fe8a:	6843      	ldr	r3, [r0, #4]
   4fe8c:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   4fe90:	4798      	blx	r3
	return 0;
   4fe92:	2000      	movs	r0, #0
}
   4fe94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   4fe96:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   4fe9a:	42af      	cmp	r7, r5
   4fe9c:	f386 8811 	msr	BASEPRI, r6
   4fea0:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   4fea4:	bf0c      	ite	eq
   4fea6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   4feaa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   4feae:	e7f1      	b.n	4fe94 <async_start+0x42>

0004feb0 <api_start>:
{
   4feb0:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   4feb2:	2480      	movs	r4, #128	; 0x80
   4feb4:	9400      	str	r4, [sp, #0]
   4feb6:	f7ff ffcc 	bl	4fe52 <async_start>
}
   4feba:	b002      	add	sp, #8
   4febc:	bd10      	pop	{r4, pc}

0004febe <onoff_started_callback>:
	return &data->mgr[type];
   4febe:	6900      	ldr	r0, [r0, #16]
{
   4fec0:	b410      	push	{r4}
	return &data->mgr[type];
   4fec2:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   4fec4:	241c      	movs	r4, #28
   4fec6:	fb03 0004 	mla	r0, r3, r4, r0
   4feca:	2100      	movs	r1, #0
}
   4fecc:	bc10      	pop	{r4}
	notify(mgr, 0);
   4fece:	4710      	bx	r2

0004fed0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   4fed0:	2000      	movs	r0, #0
   4fed2:	f000 b922 	b.w	5011a <nrfx_clock_start>

0004fed6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   4fed6:	2000      	movs	r0, #0
   4fed8:	f7f5 bfd2 	b.w	45e80 <nrfx_clock_stop>

0004fedc <blocking_start_callback>:
{
   4fedc:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   4fede:	f7f8 b8c7 	b.w	48070 <z_impl_k_sem_give>

0004fee2 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4fee2:	6843      	ldr	r3, [r0, #4]
   4fee4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   4fee6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   4feea:	600b      	str	r3, [r1, #0]
}
   4feec:	2000      	movs	r0, #0
   4feee:	4770      	bx	lr

0004fef0 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4fef0:	6843      	ldr	r3, [r0, #4]
   4fef2:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   4fef4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   4fef8:	4042      	eors	r2, r0
   4fefa:	400a      	ands	r2, r1
   4fefc:	4042      	eors	r2, r0
    p_reg->OUT = value;
   4fefe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   4ff02:	2000      	movs	r0, #0
   4ff04:	4770      	bx	lr

0004ff06 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4ff06:	6843      	ldr	r3, [r0, #4]
   4ff08:	685b      	ldr	r3, [r3, #4]
}
   4ff0a:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   4ff0c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   4ff10:	4770      	bx	lr

0004ff12 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4ff12:	6843      	ldr	r3, [r0, #4]
   4ff14:	685b      	ldr	r3, [r3, #4]
}
   4ff16:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   4ff18:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   4ff1c:	4770      	bx	lr

0004ff1e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4ff1e:	6843      	ldr	r3, [r0, #4]
   4ff20:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   4ff22:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   4ff26:	404b      	eors	r3, r1
    p_reg->OUT = value;
   4ff28:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   4ff2c:	2000      	movs	r0, #0
   4ff2e:	4770      	bx	lr

0004ff30 <gpio_nrfx_manage_callback>:
	return port->data;
   4ff30:	6903      	ldr	r3, [r0, #16]
	return list->head;
   4ff32:	6858      	ldr	r0, [r3, #4]
{
   4ff34:	b510      	push	{r4, lr}
	if (!sys_slist_is_empty(callbacks)) {
   4ff36:	b148      	cbz	r0, 4ff4c <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4ff38:	4288      	cmp	r0, r1
   4ff3a:	d113      	bne.n	4ff64 <gpio_nrfx_manage_callback+0x34>
Z_GENLIST_REMOVE(slist, snode)
   4ff3c:	689c      	ldr	r4, [r3, #8]
	return node->next;
   4ff3e:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   4ff40:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   4ff42:	42a1      	cmp	r1, r4
   4ff44:	d100      	bne.n	4ff48 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   4ff46:	6098      	str	r0, [r3, #8]
	parent->next = child;
   4ff48:	2000      	movs	r0, #0
   4ff4a:	6008      	str	r0, [r1, #0]
	if (set) {
   4ff4c:	b97a      	cbnz	r2, 4ff6e <gpio_nrfx_manage_callback+0x3e>
	return 0;
   4ff4e:	2000      	movs	r0, #0
}
   4ff50:	bd10      	pop	{r4, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4ff52:	4281      	cmp	r1, r0
   4ff54:	d106      	bne.n	4ff64 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   4ff56:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   4ff58:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   4ff5a:	6898      	ldr	r0, [r3, #8]
   4ff5c:	4281      	cmp	r1, r0
   4ff5e:	d1f3      	bne.n	4ff48 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   4ff60:	609c      	str	r4, [r3, #8]
}
   4ff62:	e7f1      	b.n	4ff48 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   4ff64:	4604      	mov	r4, r0
   4ff66:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4ff68:	2800      	cmp	r0, #0
   4ff6a:	d1f2      	bne.n	4ff52 <gpio_nrfx_manage_callback+0x22>
			if (!set) {
   4ff6c:	b13a      	cbz	r2, 4ff7e <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
   4ff6e:	685a      	ldr	r2, [r3, #4]
   4ff70:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   4ff72:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   4ff74:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   4ff76:	2a00      	cmp	r2, #0
   4ff78:	d1e9      	bne.n	4ff4e <gpio_nrfx_manage_callback+0x1e>
	list->tail = node;
   4ff7a:	6099      	str	r1, [r3, #8]
}
   4ff7c:	e7e7      	b.n	4ff4e <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   4ff7e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   4ff82:	e7e5      	b.n	4ff50 <gpio_nrfx_manage_callback+0x20>

0004ff84 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   4ff84:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   4ff86:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));

	if (length > sizeof(dev_id.id)) {
   4ff8a:	2908      	cmp	r1, #8
   4ff8c:	6e66      	ldr	r6, [r4, #100]	; 0x64
   4ff8e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   4ff90:	6e62      	ldr	r2, [r4, #100]	; 0x64
   4ff92:	6e63      	ldr	r3, [r4, #100]	; 0x64
	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   4ff94:	ea4f 2515 	mov.w	r5, r5, lsr #8
   4ff98:	ea4f 6303 	mov.w	r3, r3, lsl #24
   4ff9c:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   4ffa0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   4ffa4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   4ffa8:	ea43 0305 	orr.w	r3, r3, r5
   4ffac:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   4ffb0:	ea43 0302 	orr.w	r3, r3, r2
   4ffb4:	9300      	str	r3, [sp, #0]
   4ffb6:	6e26      	ldr	r6, [r4, #96]	; 0x60
   4ffb8:	6e25      	ldr	r5, [r4, #96]	; 0x60
   4ffba:	6e22      	ldr	r2, [r4, #96]	; 0x60
   4ffbc:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   4ffbe:	ea4f 2415 	mov.w	r4, r5, lsr #8
   4ffc2:	ea4f 6303 	mov.w	r3, r3, lsl #24
   4ffc6:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   4ffca:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   4ffce:	ea43 0304 	orr.w	r3, r3, r4
   4ffd2:	ea4f 2402 	mov.w	r4, r2, lsl #8
	if (length > sizeof(dev_id.id)) {
   4ffd6:	bf28      	it	cs
   4ffd8:	2108      	movcs	r1, #8
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   4ffda:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   4ffde:	4323      	orrs	r3, r4
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   4ffe0:	460a      	mov	r2, r1
	if (length > sizeof(dev_id.id)) {
   4ffe2:	460c      	mov	r4, r1
	memcpy(buffer, dev_id.id, length);
   4ffe4:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   4ffe6:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   4ffe8:	f7fb fe36 	bl	4bc58 <memcpy>

	return length;
}
   4ffec:	4620      	mov	r0, r4
   4ffee:	b002      	add	sp, #8
   4fff0:	bd70      	pop	{r4, r5, r6, pc}

0004fff2 <is_regular_addr_valid>:
{
   4fff2:	b538      	push	{r3, r4, r5, lr}
   4fff4:	4605      	mov	r5, r0
   4fff6:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   4fff8:	f000 f913 	bl	50222 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   4fffc:	2d00      	cmp	r5, #0
   4fffe:	db07      	blt.n	50010 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   50000:	42a8      	cmp	r0, r5
   50002:	d905      	bls.n	50010 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   50004:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   50006:	4284      	cmp	r4, r0
   50008:	bf8c      	ite	hi
   5000a:	2000      	movhi	r0, #0
   5000c:	2001      	movls	r0, #1
}
   5000e:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   50010:	2000      	movs	r0, #0
   50012:	e7fc      	b.n	5000e <is_regular_addr_valid+0x1c>

00050014 <flash_nrf_read>:
{
   50014:	b570      	push	{r4, r5, r6, lr}
   50016:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   50018:	4628      	mov	r0, r5
   5001a:	4619      	mov	r1, r3
{
   5001c:	4616      	mov	r6, r2
   5001e:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   50020:	f7ff ffe7 	bl	4fff2 <is_regular_addr_valid>
   50024:	b138      	cbz	r0, 50036 <flash_nrf_read+0x22>
	if (!len) {
   50026:	b124      	cbz	r4, 50032 <flash_nrf_read+0x1e>
	memcpy(data, (void *)addr, len);
   50028:	4622      	mov	r2, r4
   5002a:	4629      	mov	r1, r5
   5002c:	4630      	mov	r0, r6
   5002e:	f7fb fe13 	bl	4bc58 <memcpy>
		return 0;
   50032:	2000      	movs	r0, #0
}
   50034:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   50036:	f06f 0015 	mvn.w	r0, #21
   5003a:	e7fb      	b.n	50034 <flash_nrf_read+0x20>

0005003c <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   5003c:	2000      	movs	r0, #0
   5003e:	f7e5 b999 	b.w	35374 <ticker_is_initialized>

00050042 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   50042:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   50046:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   50048:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   5004a:	f04f 0800 	mov.w	r8, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   5004e:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
   50050:	f8c4 8000 	str.w	r8, [r4]
{
   50054:	460d      	mov	r5, r1
   50056:	4616      	mov	r6, r2
	info->index = 0U;
   50058:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   5005c:	aa01      	add	r2, sp, #4
   5005e:	4669      	mov	r1, sp
   50060:	4798      	blx	r3

	while (layout_size--) {
   50062:	e9dd 7c00 	ldrd	r7, ip, [sp]
   50066:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   50068:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   5006c:	4560      	cmp	r0, ip
   5006e:	d104      	bne.n	5007a <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   50070:	f06f 0015 	mvn.w	r0, #21
}
   50074:	b003      	add	sp, #12
   50076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   5007a:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   5007e:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   50080:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   50082:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   50086:	b985      	cbnz	r5, 500aa <flash_get_page_info+0x68>
			index_jmp = index - info->index;
   50088:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   5008a:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
   5008e:	4543      	cmp	r3, r8
   50090:	bf28      	it	cs
   50092:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   50094:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   50098:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   5009a:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   5009c:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   5009e:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   500a0:	f100 0001 	add.w	r0, r0, #1
   500a4:	d9e2      	bls.n	5006c <flash_get_page_info+0x2a>
			return 0;
   500a6:	2000      	movs	r0, #0
   500a8:	e7e4      	b.n	50074 <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   500aa:	1aab      	subs	r3, r5, r2
   500ac:	fbb3 f3f9 	udiv	r3, r3, r9
   500b0:	e7eb      	b.n	5008a <flash_get_page_info+0x48>

000500b2 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   500b2:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   500b4:	2200      	movs	r2, #0
   500b6:	f7ff bfc4 	b.w	50042 <flash_get_page_info>

000500ba <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   500ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   500be:	6883      	ldr	r3, [r0, #8]
{
   500c0:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   500c2:	691b      	ldr	r3, [r3, #16]
{
   500c4:	4688      	mov	r8, r1
   500c6:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   500c8:	a901      	add	r1, sp, #4
   500ca:	aa02      	add	r2, sp, #8
   500cc:	4798      	blx	r3
	off_t off = 0;
   500ce:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   500d0:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   500d2:	4625      	mov	r5, r4
   500d4:	9b02      	ldr	r3, [sp, #8]
   500d6:	42ab      	cmp	r3, r5
   500d8:	d802      	bhi.n	500e0 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   500da:	b006      	add	sp, #24
   500dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   500e0:	9f01      	ldr	r7, [sp, #4]
   500e2:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   500e6:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   500e8:	687b      	ldr	r3, [r7, #4]
   500ea:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   500ec:	683a      	ldr	r2, [r7, #0]
   500ee:	42b2      	cmp	r2, r6
   500f0:	eb0a 0306 	add.w	r3, sl, r6
   500f4:	d802      	bhi.n	500fc <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   500f6:	3501      	adds	r5, #1
   500f8:	469a      	mov	sl, r3
   500fa:	e7eb      	b.n	500d4 <flash_page_foreach+0x1a>
			page_info.start_offset = off;
   500fc:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   500fe:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   50100:	4649      	mov	r1, r9
   50102:	a803      	add	r0, sp, #12
   50104:	47c0      	blx	r8
   50106:	2800      	cmp	r0, #0
   50108:	d0e7      	beq.n	500da <flash_page_foreach+0x20>
			off += page_info.size;
   5010a:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   5010c:	3601      	adds	r6, #1
			off += page_info.size;
   5010e:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   50110:	e7ec      	b.n	500ec <flash_page_foreach+0x32>

00050112 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   50112:	4770      	bx	lr

00050114 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   50114:	4700      	bx	r0

00050116 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   50116:	f000 bf32 	b.w	50f7e <z_impl_k_busy_wait>

0005011a <nrfx_clock_start>:
    switch (domain)
   5011a:	b110      	cbz	r0, 50122 <nrfx_clock_start+0x8>
   5011c:	2801      	cmp	r0, #1
   5011e:	d01d      	beq.n	5015c <nrfx_clock_start+0x42>
   50120:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   50122:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   50126:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   5012a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   5012e:	03c9      	lsls	r1, r1, #15
   50130:	d512      	bpl.n	50158 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   50132:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   50136:	2a01      	cmp	r2, #1
   50138:	d10e      	bne.n	50158 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   5013a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   5013e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   50142:	2200      	movs	r2, #0
   50144:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   50148:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   5014c:	2202      	movs	r2, #2
   5014e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   50152:	2201      	movs	r2, #1
   50154:	609a      	str	r2, [r3, #8]
}
   50156:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   50158:	2200      	movs	r2, #0
   5015a:	e7ee      	b.n	5013a <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   5015c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   50160:	2200      	movs	r2, #0
   50162:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   50166:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   5016a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   5016e:	6018      	str	r0, [r3, #0]
}
   50170:	4770      	bx	lr

00050172 <nrf_gpio_reconfigure>:
{
   50172:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   50174:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   50176:	a801      	add	r0, sp, #4
{
   50178:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   5017c:	4616      	mov	r6, r2
   5017e:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   50180:	f7f5 feee 	bl	45f60 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   50184:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   50186:	f1b6 0c00 	subs.w	ip, r6, #0
   5018a:	bf18      	it	ne
   5018c:	f04f 0c01 	movne.w	ip, #1
   50190:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   50194:	1e0b      	subs	r3, r1, #0
   50196:	bf18      	it	ne
   50198:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   5019a:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   5019c:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   501a0:	bf14      	ite	ne
   501a2:	f04f 0c0c 	movne.w	ip, #12
   501a6:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   501aa:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   501ac:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   501b0:	bf14      	ite	ne
   501b2:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   501b6:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   501ba:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   501bc:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   501c0:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   501c4:	bf14      	ite	ne
   501c6:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   501ca:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   501ce:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   501d2:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   501d6:	b101      	cbz	r1, 501da <nrf_gpio_reconfigure+0x68>
   501d8:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   501da:	b10e      	cbz	r6, 501e0 <nrf_gpio_reconfigure+0x6e>
   501dc:	7836      	ldrb	r6, [r6, #0]
   501de:	0076      	lsls	r6, r6, #1
   501e0:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   501e2:	b10d      	cbz	r5, 501e8 <nrf_gpio_reconfigure+0x76>
   501e4:	782d      	ldrb	r5, [r5, #0]
   501e6:	00ad      	lsls	r5, r5, #2
   501e8:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   501ea:	b10c      	cbz	r4, 501f0 <nrf_gpio_reconfigure+0x7e>
   501ec:	7824      	ldrb	r4, [r4, #0]
   501ee:	0224      	lsls	r4, r4, #8
   501f0:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   501f2:	b10f      	cbz	r7, 501f8 <nrf_gpio_reconfigure+0x86>
   501f4:	783f      	ldrb	r7, [r7, #0]
   501f6:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   501f8:	430c      	orrs	r4, r1
   501fa:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   501fc:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   50200:	b003      	add	sp, #12
   50202:	bdf0      	pop	{r4, r5, r6, r7, pc}

00050204 <nrf_gpio_cfg_sense_set>:
{
   50204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   50206:	f10d 030f 	add.w	r3, sp, #15
   5020a:	9301      	str	r3, [sp, #4]
   5020c:	2300      	movs	r3, #0
{
   5020e:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   50212:	9300      	str	r3, [sp, #0]
   50214:	461a      	mov	r2, r3
   50216:	4619      	mov	r1, r3
   50218:	f7ff ffab 	bl	50172 <nrf_gpio_reconfigure>
}
   5021c:	b005      	add	sp, #20
   5021e:	f85d fb04 	ldr.w	pc, [sp], #4

00050222 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   50222:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   50226:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   50228:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   5022a:	4350      	muls	r0, r2
   5022c:	4770      	bx	lr

0005022e <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   5022e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   50232:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   50234:	4770      	bx	lr

00050236 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   50236:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   5023a:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   5023c:	4770      	bx	lr

0005023e <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   5023e:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   50242:	681a      	ldr	r2, [r3, #0]
   50244:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   50246:	bf1f      	itttt	ne
   50248:	2200      	movne	r2, #0
   5024a:	601a      	strne	r2, [r3, #0]
   5024c:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   5024e:	2001      	movne	r0, #1
   50250:	bf08      	it	eq
   50252:	2000      	moveq	r0, #0
}
   50254:	4770      	bx	lr

00050256 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   50256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   5025a:	f44f 7260 	mov.w	r2, #896	; 0x380
   5025e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   50262:	4770      	bx	lr

00050264 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   50264:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   50268:	f44f 7260 	mov.w	r2, #896	; 0x380
   5026c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   50270:	4770      	bx	lr

00050272 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   50272:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   50274:	f7f6 fa62 	bl	4673c <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   50278:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   5027c:	f7f5 be3c 	b.w	45ef8 <nrfx_clock_irq_handler>

00050280 <nrfx_usbd_consumer>:
{
   50280:	b530      	push	{r4, r5, lr}
        p_next->p_data = p_transfer->p_data;
   50282:	e9d1 5400 	ldrd	r5, r4, [r1]
    if (size < data_size)
   50286:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
   50288:	bf97      	itett	ls
   5028a:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
   5028e:	2100      	movhi	r1, #0
        size -= data_size;
   50290:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   50292:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
   50294:	bf8e      	itee	hi
   50296:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
   5029a:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   5029c:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
   5029e:	429a      	cmp	r2, r3
   502a0:	d103      	bne.n	502aa <nrfx_usbd_consumer+0x2a>
   502a2:	1e20      	subs	r0, r4, #0
   502a4:	bf18      	it	ne
   502a6:	2001      	movne	r0, #1
}
   502a8:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
   502aa:	2000      	movs	r0, #0
   502ac:	e7fc      	b.n	502a8 <nrfx_usbd_consumer+0x28>

000502ae <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   502ae:	684b      	ldr	r3, [r1, #4]
{
   502b0:	b510      	push	{r4, lr}
   502b2:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
   502b4:	680c      	ldr	r4, [r1, #0]
   502b6:	bf28      	it	cs
   502b8:	461a      	movcs	r2, r3
    p_next->size = tx_size;
   502ba:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
   502be:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
   502c0:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   502c2:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   502c4:	4413      	add	r3, r2
}
   502c6:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   502c8:	600b      	str	r3, [r1, #0]
}
   502ca:	bf18      	it	ne
   502cc:	2001      	movne	r0, #1
   502ce:	bd10      	pop	{r4, pc}

000502d0 <nrfx_usbd_feeder_ram_zlp>:
{
   502d0:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
   502d2:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   502d4:	680b      	ldr	r3, [r1, #0]
   502d6:	42a2      	cmp	r2, r4
   502d8:	bf28      	it	cs
   502da:	4622      	movcs	r2, r4
   502dc:	2a00      	cmp	r2, #0
   502de:	bf14      	ite	ne
   502e0:	461d      	movne	r5, r3
   502e2:	2500      	moveq	r5, #0
    p_transfer->size -= tx_size;
   502e4:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
   502e8:	4413      	add	r3, r2
    p_next->size = tx_size;
   502ea:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
   502ee:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   502f0:	600b      	str	r3, [r1, #0]
}
   502f2:	bf14      	ite	ne
   502f4:	2001      	movne	r0, #1
   502f6:	2000      	moveq	r0, #0
   502f8:	bd30      	pop	{r4, r5, pc}

000502fa <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   502fa:	43c3      	mvns	r3, r0
   502fc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   50300:	f000 000f 	and.w	r0, r0, #15
}
   50304:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   50308:	4770      	bx	lr

0005030a <ev_started_handler>:
}
   5030a:	4770      	bx	lr

0005030c <nrf_usbd_epin_dma_handler>:
{
   5030c:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   5030e:	f7f6 fb83 	bl	46a18 <usbd_dma_pending_clear>
{
   50312:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
   50314:	f7f6 fa76 	bl	46804 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   50318:	7b83      	ldrb	r3, [r0, #14]
   5031a:	2b03      	cmp	r3, #3
   5031c:	d10a      	bne.n	50334 <nrf_usbd_epin_dma_handler+0x28>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   5031e:	4608      	mov	r0, r1
   50320:	f7ff ffeb 	bl	502fa <ep2bit>
   50324:	2301      	movs	r3, #1
   50326:	fa03 f000 	lsl.w	r0, r3, r0
   5032a:	43c0      	mvns	r0, r0
}
   5032c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   50330:	f7f6 bb62 	b.w	469f8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   50334:	6803      	ldr	r3, [r0, #0]
   50336:	2b00      	cmp	r3, #0
   50338:	d0f1      	beq.n	5031e <nrf_usbd_epin_dma_handler+0x12>
}
   5033a:	bd08      	pop	{r3, pc}

0005033c <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   5033c:	2087      	movs	r0, #135	; 0x87
   5033e:	f7ff bfe5 	b.w	5030c <nrf_usbd_epin_dma_handler>

00050342 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   50342:	2086      	movs	r0, #134	; 0x86
   50344:	f7ff bfe2 	b.w	5030c <nrf_usbd_epin_dma_handler>

00050348 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   50348:	2085      	movs	r0, #133	; 0x85
   5034a:	f7ff bfdf 	b.w	5030c <nrf_usbd_epin_dma_handler>

0005034e <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   5034e:	2084      	movs	r0, #132	; 0x84
   50350:	f7ff bfdc 	b.w	5030c <nrf_usbd_epin_dma_handler>

00050354 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   50354:	2083      	movs	r0, #131	; 0x83
   50356:	f7ff bfd9 	b.w	5030c <nrf_usbd_epin_dma_handler>

0005035a <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   5035a:	2082      	movs	r0, #130	; 0x82
   5035c:	f7ff bfd6 	b.w	5030c <nrf_usbd_epin_dma_handler>

00050360 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   50360:	2081      	movs	r0, #129	; 0x81
   50362:	f7ff bfd3 	b.w	5030c <nrf_usbd_epin_dma_handler>

00050366 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   50366:	f7f6 bb69 	b.w	46a3c <nrf_usbd_ep0in_dma_handler>

0005036a <nrfx_usbd_ep_max_packet_size_set>:
{
   5036a:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   5036c:	f7f6 fa4a 	bl	46804 <ep_state_access>
    p_state->max_packet_size = size;
   50370:	8181      	strh	r1, [r0, #12]
}
   50372:	bd08      	pop	{r3, pc}

00050374 <nrfx_usbd_ep_status_get>:
{
   50374:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   50376:	f7f6 fa45 	bl	46804 <ep_state_access>
	__asm__ volatile(
   5037a:	f04f 0220 	mov.w	r2, #32
   5037e:	f3ef 8311 	mrs	r3, BASEPRI
   50382:	f382 8812 	msr	BASEPRI_MAX, r2
   50386:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   5038a:	6882      	ldr	r2, [r0, #8]
   5038c:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   5038e:	6802      	ldr	r2, [r0, #0]
   50390:	b92a      	cbnz	r2, 5039e <nrfx_usbd_ep_status_get+0x2a>
   50392:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   50394:	f383 8811 	msr	BASEPRI, r3
   50398:	f3bf 8f6f 	isb	sy
}
   5039c:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   5039e:	2004      	movs	r0, #4
   503a0:	e7f8      	b.n	50394 <nrfx_usbd_ep_status_get+0x20>

000503a2 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   503a2:	2007      	movs	r0, #7
   503a4:	f7f6 bec4 	b.w	47130 <nrf_usbd_epout_dma_handler>

000503a8 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   503a8:	2006      	movs	r0, #6
   503aa:	f7f6 bec1 	b.w	47130 <nrf_usbd_epout_dma_handler>

000503ae <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   503ae:	2005      	movs	r0, #5
   503b0:	f7f6 bebe 	b.w	47130 <nrf_usbd_epout_dma_handler>

000503b4 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   503b4:	2004      	movs	r0, #4
   503b6:	f7f6 bebb 	b.w	47130 <nrf_usbd_epout_dma_handler>

000503ba <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   503ba:	2003      	movs	r0, #3
   503bc:	f7f6 beb8 	b.w	47130 <nrf_usbd_epout_dma_handler>

000503c0 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   503c0:	2002      	movs	r0, #2
   503c2:	f7f6 beb5 	b.w	47130 <nrf_usbd_epout_dma_handler>

000503c6 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   503c6:	2001      	movs	r0, #1
   503c8:	f7f6 beb2 	b.w	47130 <nrf_usbd_epout_dma_handler>

000503cc <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   503cc:	f7f6 bfa6 	b.w	4731c <usbd_ep_abort>

000503d0 <debounce_update>:
        state->counter -= elapsed_ms;
    }
}

void debounce_update(struct debounce_state *state, const bool active, const int elapsed_ms,
                     const struct debounce_config *config) {
   503d0:	b570      	push	{r4, r5, r6, lr}
    // This uses a variation of the integrator debouncing described at
    // https://www.kennethkuhn.com/electronics/debounce.c
    // Every update where "active" does not match the current state, we increment
    // a counter, otherwise we decrement it. When the counter reaches a
    // threshold, the state flips and we reset the counter.
    state->changed = false;
   503d2:	7804      	ldrb	r4, [r0, #0]
   503d4:	f36f 0441 	bfc	r4, #1, #1
   503d8:	7004      	strb	r4, [r0, #0]

    if (active == state->pressed) {
   503da:	f004 0501 	and.w	r5, r4, #1
    if (state->counter < elapsed_ms) {
   503de:	8804      	ldrh	r4, [r0, #0]
    if (active == state->pressed) {
   503e0:	428d      	cmp	r5, r1
    if (state->counter < elapsed_ms) {
   503e2:	f3c4 068d 	ubfx	r6, r4, #2, #14
    if (active == state->pressed) {
   503e6:	d109      	bne.n	503fc <debounce_update+0x2c>
    if (state->counter < elapsed_ms) {
   503e8:	42b2      	cmp	r2, r6
   503ea:	dd03      	ble.n	503f4 <debounce_update+0x24>
        state->counter = 0;
   503ec:	f36f 048f 	bfc	r4, #2, #14
    if (state->counter < flip_threshold) {
        increment_counter(state, elapsed_ms);
        return;
    }

    state->pressed = !state->pressed;
   503f0:	8004      	strh	r4, [r0, #0]
    state->counter = 0;
    state->changed = true;
}
   503f2:	bd70      	pop	{r4, r5, r6, pc}
        state->counter -= elapsed_ms;
   503f4:	1ab6      	subs	r6, r6, r2
        state->counter += elapsed_ms;
   503f6:	f366 048f 	bfi	r4, r6, #2, #14
   503fa:	e7f9      	b.n	503f0 <debounce_update+0x20>
    return state->pressed ? config->debounce_release_ms : config->debounce_press_ms;
   503fc:	e9d3 1300 	ldrd	r1, r3, [r3]
   50400:	f014 0f01 	tst.w	r4, #1
   50404:	bf18      	it	ne
   50406:	4619      	movne	r1, r3
    if (state->counter < flip_threshold) {
   50408:	428e      	cmp	r6, r1
   5040a:	d208      	bcs.n	5041e <debounce_update+0x4e>
    if (state->counter + elapsed_ms > DEBOUNCE_COUNTER_MAX) {
   5040c:	4416      	add	r6, r2
   5040e:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
   50412:	d3f0      	bcc.n	503f6 <debounce_update+0x26>
        state->counter = DEBOUNCE_COUNTER_MAX;
   50414:	f643 73ff 	movw	r3, #16383	; 0x3fff
   50418:	f363 048f 	bfi	r4, r3, #2, #14
   5041c:	e7e8      	b.n	503f0 <debounce_update+0x20>
    state->pressed = !state->pressed;
   5041e:	f085 0401 	eor.w	r4, r5, #1
   50422:	f044 0402 	orr.w	r4, r4, #2
   50426:	e7e3      	b.n	503f0 <debounce_update+0x20>

00050428 <debounce_is_active>:

bool debounce_is_active(const struct debounce_state *state) {
    return state->pressed || state->counter > 0;
   50428:	8800      	ldrh	r0, [r0, #0]
   5042a:	f020 0002 	bic.w	r0, r0, #2
   5042e:	b280      	uxth	r0, r0
}
   50430:	3800      	subs	r0, #0
   50432:	bf18      	it	ne
   50434:	2001      	movne	r0, #1
   50436:	4770      	bx	lr

00050438 <debounce_is_pressed>:

bool debounce_is_pressed(const struct debounce_state *state) { return state->pressed; }
   50438:	7800      	ldrb	r0, [r0, #0]
   5043a:	f000 0001 	and.w	r0, r0, #1
   5043e:	4770      	bx	lr

00050440 <debounce_get_changed>:

   50440:	7800      	ldrb	r0, [r0, #0]
   50442:	f3c0 0040 	ubfx	r0, r0, #1, #1
   50446:	4770      	bx	lr

00050448 <z_impl_gpio_pin_configure>:
{
   50448:	b4f0      	push	{r4, r5, r6, r7}
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   5044a:	04d4      	lsls	r4, r2, #19
	const struct gpio_driver_api *api =
   5044c:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
   5044e:	6906      	ldr	r6, [r0, #16]
{
   50450:	4613      	mov	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   50452:	d506      	bpl.n	50462 <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   50454:	f412 6f40 	tst.w	r2, #3072	; 0xc00
   50458:	d003      	beq.n	50462 <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   5045a:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   5045c:	bf48      	it	mi
   5045e:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
   50462:	6834      	ldr	r4, [r6, #0]
   50464:	2501      	movs	r5, #1
   50466:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   50468:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   5046c:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   5046e:	bf4c      	ite	mi
   50470:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   50472:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
   50474:	683b      	ldr	r3, [r7, #0]
   50476:	6034      	str	r4, [r6, #0]
}
   50478:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   5047a:	4718      	bx	r3

0005047c <kscan_direct_configure>:
    struct kscan_direct_data *data = dev->data;
   5047c:	6903      	ldr	r3, [r0, #16]
    if (!callback) {
   5047e:	b111      	cbz	r1, 50486 <kscan_direct_configure+0xa>
    data->callback = callback;
   50480:	6059      	str	r1, [r3, #4]
    return 0;
   50482:	2000      	movs	r0, #0
   50484:	4770      	bx	lr
        return -EINVAL;
   50486:	f06f 0015 	mvn.w	r0, #21
}
   5048a:	4770      	bx	lr

0005048c <kscan_direct_interrupt_configure.isra.0>:
static int kscan_direct_interrupt_configure(const struct device *dev, const gpio_flags_t flags) {
   5048c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   50490:	4606      	mov	r6, r0
   50492:	460c      	mov	r4, r1
    for (int i = 0; i < config->inputs.len; i++) {
   50494:	2500      	movs	r5, #0
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   50496:	f401 4700 	and.w	r7, r1, #32768	; 0x8000
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   5049a:	f04f 0801 	mov.w	r8, #1
   5049e:	6873      	ldr	r3, [r6, #4]
   504a0:	42ab      	cmp	r3, r5
   504a2:	d802      	bhi.n	504aa <kscan_direct_interrupt_configure.isra.0+0x1e>
    return 0;
   504a4:	2000      	movs	r0, #0
}
   504a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   504aa:	6833      	ldr	r3, [r6, #0]
   504ac:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   504b0:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
   504b4:	7911      	ldrb	r1, [r2, #4]
	const struct gpio_driver_api *api =
   504b6:	f8d0 c008 	ldr.w	ip, [r0, #8]
	const struct gpio_driver_data *const data =
   504ba:	6902      	ldr	r2, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   504bc:	b18f      	cbz	r7, 504e2 <kscan_direct_interrupt_configure.isra.0+0x56>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   504be:	6812      	ldr	r2, [r2, #0]
   504c0:	fa08 f301 	lsl.w	r3, r8, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   504c4:	4213      	tst	r3, r2
   504c6:	d00c      	beq.n	504e2 <kscan_direct_interrupt_configure.isra.0+0x56>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   504c8:	f484 22c0 	eor.w	r2, r4, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   504cc:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   504d0:	f8dc 9018 	ldr.w	r9, [ip, #24]
   504d4:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
   504d8:	47c8      	blx	r9
        if (err) {
   504da:	2800      	cmp	r0, #0
   504dc:	d1e3      	bne.n	504a6 <kscan_direct_interrupt_configure.isra.0+0x1a>
    for (int i = 0; i < config->inputs.len; i++) {
   504de:	3501      	adds	r5, #1
   504e0:	e7dd      	b.n	5049e <kscan_direct_interrupt_configure.isra.0+0x12>
   504e2:	4622      	mov	r2, r4
   504e4:	e7f2      	b.n	504cc <kscan_direct_interrupt_configure.isra.0+0x40>

000504e6 <kscan_direct_irq_callback_handler>:
    struct kscan_direct_data *data = irq_data->dev->data;
   504e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
                                              const gpio_port_pins_t pin) {
   504ea:	b510      	push	{r4, lr}
    struct kscan_direct_data *data = irq_data->dev->data;
   504ec:	691c      	ldr	r4, [r3, #16]
    return kscan_direct_interrupt_configure(dev, GPIO_INT_DISABLE);
   504ee:	6823      	ldr	r3, [r4, #0]
   504f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   504f4:	6858      	ldr	r0, [r3, #4]
   504f6:	f7ff ffc9 	bl	5048c <kscan_direct_interrupt_configure.isra.0>
	return z_impl_k_uptime_ticks();
   504fa:	f000 fd3e 	bl	50f7a <z_impl_k_uptime_ticks>
   504fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   50502:	fba0 0302 	umull	r0, r3, r0, r2
   50506:	fb02 3101 	mla	r1, r2, r1, r3
   5050a:	0bc0      	lsrs	r0, r0, #15
   5050c:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   50510:	0bc9      	lsrs	r1, r1, #15
    data->scan_time = k_uptime_get();
   50512:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    k_work_reschedule(&data->work, K_NO_WAIT);
   50516:	2200      	movs	r2, #0
   50518:	f104 0008 	add.w	r0, r4, #8
   5051c:	2300      	movs	r3, #0
}
   5051e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    k_work_reschedule(&data->work, K_NO_WAIT);
   50522:	f7f7 bfc5 	b.w	484b0 <k_work_reschedule>

00050526 <kscan_direct_read>:
static int kscan_direct_read(const struct device *dev) {
   50526:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const struct kscan_direct_config *config = dev->config;
   5052a:	6844      	ldr	r4, [r0, #4]
    struct kscan_direct_data *data = dev->data;
   5052c:	f8d0 8010 	ldr.w	r8, [r0, #16]
static int kscan_direct_read(const struct device *dev) {
   50530:	4606      	mov	r6, r0
    for (int i = 0; i < config->inputs.len; i++) {
   50532:	2500      	movs	r5, #0
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   50534:	f04f 0901 	mov.w	r9, #1
        debounce_update(&data->pin_state[i], active, config->debounce_scan_period_ms,
   50538:	f104 0a08 	add.w	sl, r4, #8
    for (int i = 0; i < config->inputs.len; i++) {
   5053c:	6863      	ldr	r3, [r4, #4]
   5053e:	42ab      	cmp	r3, r5
   50540:	d835      	bhi.n	505ae <kscan_direct_read+0x88>
    for (int i = 0; i < config->inputs.len; i++) {
   50542:	f04f 0900 	mov.w	r9, #0
    bool continue_scan = false;
   50546:	464d      	mov	r5, r9
    for (int i = 0; i < config->inputs.len; i++) {
   50548:	6863      	ldr	r3, [r4, #4]
   5054a:	454b      	cmp	r3, r9
   5054c:	d853      	bhi.n	505f6 <kscan_direct_read+0xd0>
    const struct kscan_direct_config *config = dev->config;
   5054e:	6870      	ldr	r0, [r6, #4]
    if (continue_scan) {
   50550:	2d00      	cmp	r5, #0
   50552:	f000 809e 	beq.w	50692 <kscan_direct_read+0x16c>
    struct kscan_direct_data *data = dev->data;
   50556:	6934      	ldr	r4, [r6, #16]
    data->scan_time += config->debounce_scan_period_ms;
   50558:	6903      	ldr	r3, [r0, #16]
   5055a:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
   5055e:	1818      	adds	r0, r3, r0
   50560:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   50564:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
   50568:	03c9      	lsls	r1, r1, #15
   5056a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   5056e:	f240 33e7 	movw	r3, #999	; 0x3e7
   50572:	03c0      	lsls	r0, r0, #15
   50574:	18c0      	adds	r0, r0, r3
   50576:	f141 0100 	adc.w	r1, r1, #0
    k_work_reschedule(&data->work, K_TIMEOUT_ABS_MS(data->scan_time));
   5057a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   5057e:	f171 0300 	sbcs.w	r3, r1, #0
   50582:	f104 0408 	add.w	r4, r4, #8
   50586:	d37f      	bcc.n	50688 <kscan_direct_read+0x162>
   50588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   5058c:	2300      	movs	r3, #0
   5058e:	f7d5 fdb7 	bl	26100 <__aeabi_uldivmod>
   50592:	f06f 0201 	mvn.w	r2, #1
   50596:	1a12      	subs	r2, r2, r0
   50598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   5059c:	eb63 0301 	sbc.w	r3, r3, r1
   505a0:	4620      	mov	r0, r4
   505a2:	f7f7 ff85 	bl	484b0 <k_work_reschedule>
}
   505a6:	2000      	movs	r0, #0
   505a8:	b003      	add	sp, #12
   505aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   505ae:	6823      	ldr	r3, [r4, #0]
	return gpio_pin_get(spec->port, spec->pin);
   505b0:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
   505b4:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
	const struct gpio_driver_data *const data =
   505b8:	f8d0 b010 	ldr.w	fp, [r0, #16]
	return gpio_pin_get(spec->port, spec->pin);
   505bc:	7917      	ldrb	r7, [r2, #4]
	return api->port_get_raw(port, value);
   505be:	6883      	ldr	r3, [r0, #8]
   505c0:	a901      	add	r1, sp, #4
   505c2:	685b      	ldr	r3, [r3, #4]
   505c4:	4798      	blx	r3
	if (ret == 0) {
   505c6:	b948      	cbnz	r0, 505dc <kscan_direct_read+0xb6>
		*value ^= data->invert;
   505c8:	f8db 2000 	ldr.w	r2, [fp]
   505cc:	9b01      	ldr	r3, [sp, #4]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   505ce:	fa09 f707 	lsl.w	r7, r9, r7
		*value ^= data->invert;
   505d2:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   505d4:	423b      	tst	r3, r7
   505d6:	bf14      	ite	ne
   505d8:	2001      	movne	r0, #1
   505da:	2000      	moveq	r0, #0
        debounce_update(&data->pin_state[i], active, config->debounce_scan_period_ms,
   505dc:	f8d8 7048 	ldr.w	r7, [r8, #72]	; 0x48
   505e0:	6922      	ldr	r2, [r4, #16]
   505e2:	1e01      	subs	r1, r0, #0
   505e4:	4653      	mov	r3, sl
   505e6:	eb07 0045 	add.w	r0, r7, r5, lsl #1
   505ea:	bf18      	it	ne
   505ec:	2101      	movne	r1, #1
   505ee:	f7ff feef 	bl	503d0 <debounce_update>
    for (int i = 0; i < config->inputs.len; i++) {
   505f2:	3501      	adds	r5, #1
   505f4:	e7a2      	b.n	5053c <kscan_direct_read+0x16>
        struct debounce_state *state = &data->pin_state[i];
   505f6:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
   505fa:	eb03 0a49 	add.w	sl, r3, r9, lsl #1
        if (debounce_get_changed(state)) {
   505fe:	4650      	mov	r0, sl
   50600:	f7ff ff1e 	bl	50440 <debounce_get_changed>
   50604:	b948      	cbnz	r0, 5061a <kscan_direct_read+0xf4>
        continue_scan = continue_scan || debounce_is_active(state);
   50606:	2d00      	cmp	r5, #0
   50608:	d13c      	bne.n	50684 <kscan_direct_read+0x15e>
   5060a:	4650      	mov	r0, sl
   5060c:	f7ff ff0c 	bl	50428 <debounce_is_active>
   50610:	f000 0501 	and.w	r5, r0, #1
    for (int i = 0; i < config->inputs.len; i++) {
   50614:	f109 0901 	add.w	r9, r9, #1
   50618:	e796      	b.n	50548 <kscan_direct_read+0x22>
            const bool pressed = debounce_is_pressed(state);
   5061a:	4650      	mov	r0, sl
   5061c:	f7ff ff0c 	bl	50438 <debounce_is_pressed>
            data->callback(dev, 0, i, pressed);
   50620:	f8d8 c004 	ldr.w	ip, [r8, #4]
   50624:	4603      	mov	r3, r0
            const bool pressed = debounce_is_pressed(state);
   50626:	4607      	mov	r7, r0
            data->callback(dev, 0, i, pressed);
   50628:	464a      	mov	r2, r9
   5062a:	2100      	movs	r1, #0
   5062c:	4630      	mov	r0, r6
   5062e:	47e0      	blx	ip
            if (config->toggle_mode && pressed) {
   50630:	7e23      	ldrb	r3, [r4, #24]
   50632:	2b00      	cmp	r3, #0
   50634:	d0e7      	beq.n	50606 <kscan_direct_read+0xe0>
   50636:	2f00      	cmp	r7, #0
   50638:	d0e5      	beq.n	50606 <kscan_direct_read+0xe0>
                kscan_inputs_set_flags(&config->inputs, &config->inputs.gpios[i]);
   5063a:	6823      	ldr	r3, [r4, #0]
    for (int i = 0; i < inputs->len; i++) {
   5063c:	2700      	movs	r7, #0
                kscan_inputs_set_flags(&config->inputs, &config->inputs.gpios[i]);
   5063e:	eb03 0bc9 	add.w	fp, r3, r9, lsl #3
    for (int i = 0; i < inputs->len; i++) {
   50642:	6863      	ldr	r3, [r4, #4]
   50644:	42bb      	cmp	r3, r7
   50646:	d9de      	bls.n	50606 <kscan_direct_read+0xe0>
        extra_flags = GPIO_INPUT | kscan_gpio_get_extra_flags(&inputs->gpios[i],
   50648:	6821      	ldr	r1, [r4, #0]
   5064a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    if (!active) {
   5064e:	459b      	cmp	fp, r3
   50650:	795a      	ldrb	r2, [r3, #5]
        extra_flags = GPIO_INPUT | kscan_gpio_get_extra_flags(&inputs->gpios[i],
   50652:	ea4f 00c7 	mov.w	r0, r7, lsl #3
    if (!active) {
   50656:	d012      	beq.n	5067e <kscan_direct_read+0x158>
        return ((BIT(0) & gpio->dt_flags) ? GPIO_PULL_UP : GPIO_PULL_DOWN);
   50658:	f012 0f01 	tst.w	r2, #1
   5065c:	bf0c      	ite	eq
   5065e:	f04f 0c20 	moveq.w	ip, #32
   50662:	f04f 0c10 	movne.w	ip, #16
	return gpio_pin_configure(spec->port,
   50666:	5808      	ldr	r0, [r1, r0]
				  spec->pin,
   50668:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   5066a:	ea42 020c 	orr.w	r2, r2, ip
   5066e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   50672:	f7ff fee9 	bl	50448 <z_impl_gpio_pin_configure>
        if (err) {
   50676:	2800      	cmp	r0, #0
   50678:	d1c5      	bne.n	50606 <kscan_direct_read+0xe0>
    for (int i = 0; i < inputs->len; i++) {
   5067a:	3701      	adds	r7, #1
   5067c:	e7e1      	b.n	50642 <kscan_direct_read+0x11c>
    return 0;
   5067e:	f04f 0c00 	mov.w	ip, #0
   50682:	e7f0      	b.n	50666 <kscan_direct_read+0x140>
        continue_scan = continue_scan || debounce_is_active(state);
   50684:	2001      	movs	r0, #1
   50686:	e7c3      	b.n	50610 <kscan_direct_read+0xea>
    k_work_reschedule(&data->work, K_TIMEOUT_ABS_MS(data->scan_time));
   50688:	f06f 0201 	mvn.w	r2, #1
   5068c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   50690:	e786      	b.n	505a0 <kscan_direct_read+0x7a>
    return kscan_direct_interrupt_configure(dev, GPIO_INT_LEVEL_ACTIVE);
   50692:	f44f 2198 	mov.w	r1, #311296	; 0x4c000
   50696:	f7ff fef9 	bl	5048c <kscan_direct_interrupt_configure.isra.0>
   5069a:	e784      	b.n	505a6 <kscan_direct_read+0x80>

0005069c <kscan_direct_enable>:
static int kscan_direct_enable(const struct device *dev) {
   5069c:	b570      	push	{r4, r5, r6, lr}
    struct kscan_direct_data *data = dev->data;
   5069e:	6906      	ldr	r6, [r0, #16]
static int kscan_direct_enable(const struct device *dev) {
   506a0:	4604      	mov	r4, r0
   506a2:	f000 fc6a 	bl	50f7a <z_impl_k_uptime_ticks>
   506a6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   506aa:	fba0 3205 	umull	r3, r2, r0, r5
   506ae:	fb05 2101 	mla	r1, r5, r1, r2
   506b2:	0bdb      	lsrs	r3, r3, #15
   506b4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   506b8:	0bc9      	lsrs	r1, r1, #15
    data->scan_time = k_uptime_get();
   506ba:	e9c6 3110 	strd	r3, r1, [r6, #64]	; 0x40
    return kscan_direct_read(dev);
   506be:	4620      	mov	r0, r4
}
   506c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return kscan_direct_read(dev);
   506c4:	f7ff bf2f 	b.w	50526 <kscan_direct_read>

000506c8 <kscan_direct_work_handler>:
    kscan_direct_read(data->dev);
   506c8:	f850 0c08 	ldr.w	r0, [r0, #-8]
   506cc:	f7ff bf2b 	b.w	50526 <kscan_direct_read>

000506d0 <kscan_direct_disable>:
static int kscan_direct_disable(const struct device *dev) {
   506d0:	b510      	push	{r4, lr}
   506d2:	4604      	mov	r4, r0
    k_work_cancel_delayable(&data->work);
   506d4:	6900      	ldr	r0, [r0, #16]
   506d6:	3008      	adds	r0, #8
   506d8:	f000 faaf 	bl	50c3a <k_work_cancel_delayable>
    return kscan_direct_interrupt_configure(dev, GPIO_INT_DISABLE);
   506dc:	6860      	ldr	r0, [r4, #4]
   506de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
}
   506e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return kscan_direct_interrupt_configure(dev, GPIO_INT_DISABLE);
   506e6:	f7ff bed1 	b.w	5048c <kscan_direct_interrupt_configure.isra.0>

000506ea <battery_channel_get>:

#include "battery_common.h"

int battery_channel_get(const struct battery_value *value, enum sensor_channel chan,
                        struct sensor_value *val_out) {
    switch (chan) {
   506ea:	2927      	cmp	r1, #39	; 0x27
                        struct sensor_value *val_out) {
   506ec:	b510      	push	{r4, lr}
    switch (chan) {
   506ee:	d004      	beq.n	506fa <battery_channel_get+0x10>
   506f0:	292c      	cmp	r1, #44	; 0x2c
   506f2:	d010      	beq.n	50716 <battery_channel_get+0x2c>
   506f4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    default:
        return -ENOTSUP;
    }

    return 0;
}
   506f8:	bd10      	pop	{r4, pc}
        val_out->val1 = value->millivolts / 1000;
   506fa:	8843      	ldrh	r3, [r0, #2]
   506fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   50700:	fbb3 f4f1 	udiv	r4, r3, r1
        val_out->val2 = (value->millivolts % 1000) * 1000U;
   50704:	fb01 3314 	mls	r3, r1, r4, r3
   50708:	b29b      	uxth	r3, r3
        val_out->val1 = value->millivolts / 1000;
   5070a:	b2a0      	uxth	r0, r4
        val_out->val2 = (value->millivolts % 1000) * 1000U;
   5070c:	434b      	muls	r3, r1
   5070e:	e9c2 0300 	strd	r0, r3, [r2]
    return 0;
   50712:	2000      	movs	r0, #0
   50714:	e7f0      	b.n	506f8 <battery_channel_get+0xe>
        val_out->val1 = value->state_of_charge;
   50716:	7900      	ldrb	r0, [r0, #4]
        break;
   50718:	2300      	movs	r3, #0
   5071a:	e7f8      	b.n	5070e <battery_channel_get+0x24>

0005071c <lithium_ion_mv_to_pct>:

uint8_t lithium_ion_mv_to_pct(int16_t bat_mv) {
    // Simple linear approximation of a battery based off adafruit's discharge graph:
    // https://learn.adafruit.com/li-ion-and-lipoly-batteries/voltages

    if (bat_mv >= 4200) {
   5071c:	f241 0367 	movw	r3, #4199	; 0x1067
   50720:	4298      	cmp	r0, r3
   50722:	dc0a      	bgt.n	5073a <lithium_ion_mv_to_pct+0x1e>
        return 100;
    } else if (bat_mv <= 3450) {
   50724:	f640 537a 	movw	r3, #3450	; 0xd7a
   50728:	4298      	cmp	r0, r3
   5072a:	dd08      	ble.n	5073e <lithium_ion_mv_to_pct+0x22>
        return 0;
    }

    return bat_mv * 2 / 15 - 459;
   5072c:	230f      	movs	r3, #15
   5072e:	0040      	lsls	r0, r0, #1
   50730:	fbb0 f0f3 	udiv	r0, r0, r3
   50734:	3035      	adds	r0, #53	; 0x35
   50736:	b2c0      	uxtb	r0, r0
   50738:	4770      	bx	lr
        return 100;
   5073a:	2064      	movs	r0, #100	; 0x64
   5073c:	4770      	bx	lr
        return 0;
   5073e:	2000      	movs	r0, #0
   50740:	4770      	bx	lr

00050742 <vddh_channel_get>:
    return battery_channel_get(&drv_data->value, chan, val);
   50742:	6900      	ldr	r0, [r0, #16]
   50744:	301c      	adds	r0, #28
   50746:	f7ff bfd0 	b.w	506ea <battery_channel_get>

0005074a <z_device_state_init>:
}
   5074a:	4770      	bx	lr

0005074c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   5074c:	b138      	cbz	r0, 5075e <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   5074e:	68c3      	ldr	r3, [r0, #12]
   50750:	8818      	ldrh	r0, [r3, #0]
   50752:	f3c0 0008 	ubfx	r0, r0, #0, #9
   50756:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   5075a:	4258      	negs	r0, r3
   5075c:	4158      	adcs	r0, r3
}
   5075e:	4770      	bx	lr

00050760 <arch_system_halt>:
	__asm__ volatile(
   50760:	f04f 0220 	mov.w	r2, #32
   50764:	f3ef 8311 	mrs	r3, BASEPRI
   50768:	f382 8812 	msr	BASEPRI_MAX, r2
   5076c:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   50770:	e7fe      	b.n	50770 <arch_system_halt+0x10>

00050772 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   50772:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   50774:	f7ff fff4 	bl	50760 <arch_system_halt>

00050778 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   50778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   5077a:	4605      	mov	r5, r0
   5077c:	460e      	mov	r6, r1
   5077e:	f04f 0320 	mov.w	r3, #32
   50782:	f3ef 8711 	mrs	r7, BASEPRI
   50786:	f383 8812 	msr	BASEPRI_MAX, r3
   5078a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   5078e:	f7f8 f979 	bl	48a84 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   50792:	4631      	mov	r1, r6
   50794:	4604      	mov	r4, r0
   50796:	4628      	mov	r0, r5
   50798:	f7ff ffeb 	bl	50772 <k_sys_fatal_error_handler>
	__asm__ volatile(
   5079c:	f387 8811 	msr	BASEPRI, r7
   507a0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   507a4:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   507a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   507aa:	f7dc bc1f 	b.w	2cfec <z_impl_k_thread_abort>

000507ae <k_heap_init>:
{
   507ae:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   507b0:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   507b4:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   507b8:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   507ba:	f7f9 bbe6 	b.w	49f8a <sys_heap_init>

000507be <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   507be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   507c2:	b085      	sub	sp, #20
   507c4:	4606      	mov	r6, r0
   507c6:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   507c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   507cc:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   507ce:	f000 fbda 	bl	50f86 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   507d2:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   507d6:	4605      	mov	r5, r0
   507d8:	460f      	mov	r7, r1
	__asm__ volatile(
   507da:	f04f 0320 	mov.w	r3, #32
   507de:	f3ef 8411 	mrs	r4, BASEPRI
   507e2:	f383 8812 	msr	BASEPRI_MAX, r3
   507e6:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   507ea:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   507ee:	464a      	mov	r2, r9
   507f0:	4641      	mov	r1, r8
   507f2:	4630      	mov	r0, r6
   507f4:	f7f9 fb62 	bl	49ebc <sys_heap_aligned_alloc>
   507f8:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   507fa:	f7f8 fafd 	bl	48df8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   507fe:	9b03      	ldr	r3, [sp, #12]
   50800:	b13b      	cbz	r3, 50812 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   50802:	f384 8811 	msr	BASEPRI, r4
   50806:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   5080a:	4618      	mov	r0, r3
   5080c:	b005      	add	sp, #20
   5080e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   50812:	1a28      	subs	r0, r5, r0
   50814:	eb67 0101 	sbc.w	r1, r7, r1
   50818:	2801      	cmp	r0, #1
   5081a:	f171 0200 	sbcs.w	r2, r1, #0
   5081e:	dbf0      	blt.n	50802 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   50820:	e9cd 0100 	strd	r0, r1, [sp]
   50824:	465a      	mov	r2, fp
   50826:	4621      	mov	r1, r4
   50828:	4650      	mov	r0, sl
   5082a:	f7f7 ff97 	bl	4875c <z_pend_curr>
	__asm__ volatile(
   5082e:	f04f 0320 	mov.w	r3, #32
   50832:	f3ef 8411 	mrs	r4, BASEPRI
   50836:	f383 8812 	msr	BASEPRI_MAX, r3
   5083a:	f3bf 8f6f 	isb	sy
   5083e:	e7d6      	b.n	507ee <k_heap_aligned_alloc+0x30>

00050840 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   50840:	b538      	push	{r3, r4, r5, lr}
   50842:	4604      	mov	r4, r0
   50844:	f04f 0320 	mov.w	r3, #32
   50848:	f3ef 8511 	mrs	r5, BASEPRI
   5084c:	f383 8812 	msr	BASEPRI_MAX, r3
   50850:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   50854:	f7f9 fafa 	bl	49e4c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   50858:	f104 000c 	add.w	r0, r4, #12
   5085c:	f000 fb14 	bl	50e88 <z_unpend_all>
   50860:	b130      	cbz	r0, 50870 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   50862:	4629      	mov	r1, r5
   50864:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   50868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   5086c:	f7f7 bfd0 	b.w	48810 <z_reschedule>
	__asm__ volatile(
   50870:	f385 8811 	msr	BASEPRI, r5
   50874:	f3bf 8f6f 	isb	sy
}
   50878:	bd38      	pop	{r3, r4, r5, pc}

0005087a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   5087a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   5087c:	4604      	mov	r4, r0
   5087e:	460d      	mov	r5, r1
	__asm__ volatile(
   50880:	f04f 0320 	mov.w	r3, #32
   50884:	f3ef 8611 	mrs	r6, BASEPRI
   50888:	f383 8812 	msr	BASEPRI_MAX, r3
   5088c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   50890:	6947      	ldr	r7, [r0, #20]
   50892:	b977      	cbnz	r7, 508b2 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   50894:	f000 fab2 	bl	50dfc <z_unpend_first_thread>

		if (pending_thread != NULL) {
   50898:	b158      	cbz	r0, 508b2 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   5089a:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   5089c:	6142      	str	r2, [r0, #20]
   5089e:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   508a0:	f000 fa75 	bl	50d8e <z_ready_thread>
			z_reschedule(&slab->lock, key);
   508a4:	4631      	mov	r1, r6
   508a6:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   508aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   508ae:	f7f7 bfaf 	b.w	48810 <z_reschedule>
	**(char ***) mem = slab->free_list;
   508b2:	682b      	ldr	r3, [r5, #0]
   508b4:	6962      	ldr	r2, [r4, #20]
   508b6:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   508b8:	682b      	ldr	r3, [r5, #0]
   508ba:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   508bc:	69a3      	ldr	r3, [r4, #24]
   508be:	3b01      	subs	r3, #1
   508c0:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   508c2:	f386 8811 	msr	BASEPRI, r6
   508c6:	f3bf 8f6f 	isb	sy
}
   508ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000508cc <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   508cc:	f3ef 8005 	mrs	r0, IPSR
}
   508d0:	3800      	subs	r0, #0
   508d2:	bf18      	it	ne
   508d4:	2001      	movne	r0, #1
   508d6:	4770      	bx	lr

000508d8 <z_impl_k_thread_name_set>:
}
   508d8:	f06f 0057 	mvn.w	r0, #87	; 0x57
   508dc:	4770      	bx	lr

000508de <z_impl_k_thread_start>:
	z_sched_start(thread);
   508de:	f7f7 bfa9 	b.w	48834 <z_sched_start>

000508e2 <z_pm_save_idle_exit>:
{
   508e2:	b508      	push	{r3, lr}
	pm_system_resume();
   508e4:	f7db ff0a 	bl	2c6fc <pm_system_resume>
}
   508e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   508ec:	f7ff bc11 	b.w	50112 <sys_clock_idle_exit>

000508f0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   508f0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   508f4:	428b      	cmp	r3, r1
   508f6:	d001      	beq.n	508fc <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   508f8:	f7f7 bf44 	b.w	48784 <z_set_prio>
}
   508fc:	2000      	movs	r0, #0
   508fe:	4770      	bx	lr

00050900 <z_impl_k_mutex_init>:
{
   50900:	4603      	mov	r3, r0
	mutex->owner = NULL;
   50902:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   50904:	e9c3 0002 	strd	r0, r0, [r3, #8]
   50908:	e9c3 3300 	strd	r3, r3, [r3]
}
   5090c:	4770      	bx	lr

0005090e <queue_insert>:
{
   5090e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   50912:	4699      	mov	r9, r3
   50914:	4604      	mov	r4, r0
   50916:	f89d 3020 	ldrb.w	r3, [sp, #32]
   5091a:	460d      	mov	r5, r1
   5091c:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   5091e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   50922:	f04f 0220 	mov.w	r2, #32
   50926:	f3ef 8711 	mrs	r7, BASEPRI
   5092a:	f382 8812 	msr	BASEPRI_MAX, r2
   5092e:	f3bf 8f6f 	isb	sy
	if (is_append) {
   50932:	b103      	cbz	r3, 50936 <queue_insert+0x28>
	return list->tail;
   50934:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   50936:	4630      	mov	r0, r6
   50938:	f000 fa60 	bl	50dfc <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   5093c:	b158      	cbz	r0, 50956 <queue_insert+0x48>
   5093e:	2300      	movs	r3, #0
   50940:	67c3      	str	r3, [r0, #124]	; 0x7c
   50942:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   50946:	f000 fa22 	bl	50d8e <z_ready_thread>
	z_reschedule(&queue->lock, key);
   5094a:	4630      	mov	r0, r6
   5094c:	4639      	mov	r1, r7
   5094e:	f7f7 ff5f 	bl	48810 <z_reschedule>
		return 0;
   50952:	2000      	movs	r0, #0
   50954:	e00c      	b.n	50970 <queue_insert+0x62>
	if (alloc) {
   50956:	f1b9 0f00 	cmp.w	r9, #0
   5095a:	d01b      	beq.n	50994 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   5095c:	2108      	movs	r1, #8
   5095e:	f7f8 fb87 	bl	49070 <z_thread_aligned_alloc>
		if (anode == NULL) {
   50962:	b938      	cbnz	r0, 50974 <queue_insert+0x66>
	__asm__ volatile(
   50964:	f387 8811 	msr	BASEPRI, r7
   50968:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   5096c:	f06f 000b 	mvn.w	r0, #11
}
   50970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   50974:	2201      	movs	r2, #1
		anode->data = data;
   50976:	f8c0 8004 	str.w	r8, [r0, #4]
   5097a:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   5097c:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   5097e:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   50982:	b95d      	cbnz	r5, 5099c <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   50984:	6822      	ldr	r2, [r4, #0]
   50986:	430a      	orrs	r2, r1
   50988:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   5098a:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   5098c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   5098e:	b96a      	cbnz	r2, 509ac <queue_insert+0x9e>
	list->tail = node;
   50990:	6060      	str	r0, [r4, #4]
}
   50992:	e00b      	b.n	509ac <queue_insert+0x9e>
	node->next_and_flags = flags;
   50994:	f8c8 9000 	str.w	r9, [r8]
}
   50998:	4640      	mov	r0, r8
   5099a:	e7ef      	b.n	5097c <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   5099c:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   5099e:	2a03      	cmp	r2, #3
   509a0:	d810      	bhi.n	509c4 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   509a2:	6001      	str	r1, [r0, #0]
	return list->tail;
   509a4:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   509a6:	b939      	cbnz	r1, 509b8 <queue_insert+0xaa>
	list->head = node;
   509a8:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   509ac:	2104      	movs	r1, #4
   509ae:	f104 0010 	add.w	r0, r4, #16
   509b2:	f000 fc67 	bl	51284 <z_handle_obj_poll_events>
   509b6:	e7c8      	b.n	5094a <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   509b8:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   509ba:	f002 0203 	and.w	r2, r2, #3
   509be:	4302      	orrs	r2, r0
   509c0:	600a      	str	r2, [r1, #0]
   509c2:	e7e5      	b.n	50990 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   509c4:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   509c8:	430a      	orrs	r2, r1
   509ca:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   509cc:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   509ce:	f002 0203 	and.w	r2, r2, #3
   509d2:	ea40 0302 	orr.w	r3, r0, r2
   509d6:	602b      	str	r3, [r5, #0]
}
   509d8:	e7e8      	b.n	509ac <queue_insert+0x9e>

000509da <z_queue_node_peek>:
{
   509da:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   509dc:	4604      	mov	r4, r0
   509de:	b130      	cbz	r0, 509ee <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   509e0:	6802      	ldr	r2, [r0, #0]
   509e2:	0793      	lsls	r3, r2, #30
   509e4:	d003      	beq.n	509ee <z_queue_node_peek+0x14>
		ret = anode->data;
   509e6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   509e8:	b109      	cbz	r1, 509ee <z_queue_node_peek+0x14>
			k_free(anode);
   509ea:	f000 fc6c 	bl	512c6 <k_free>
}
   509ee:	4620      	mov	r0, r4
   509f0:	bd10      	pop	{r4, pc}

000509f2 <z_impl_k_queue_init>:
	list->head = NULL;
   509f2:	2300      	movs	r3, #0
	list->tail = NULL;
   509f4:	e9c0 3300 	strd	r3, r3, [r0]
   509f8:	f100 0308 	add.w	r3, r0, #8
   509fc:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   50a00:	f100 0310 	add.w	r3, r0, #16
   50a04:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   50a08:	4770      	bx	lr

00050a0a <k_queue_append>:
{
   50a0a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   50a0c:	2301      	movs	r3, #1
   50a0e:	9300      	str	r3, [sp, #0]
   50a10:	2300      	movs	r3, #0
{
   50a12:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   50a14:	4619      	mov	r1, r3
   50a16:	f7ff ff7a 	bl	5090e <queue_insert>
}
   50a1a:	b003      	add	sp, #12
   50a1c:	f85d fb04 	ldr.w	pc, [sp], #4

00050a20 <k_queue_prepend>:
{
   50a20:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   50a22:	2300      	movs	r3, #0
{
   50a24:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   50a26:	9300      	str	r3, [sp, #0]
   50a28:	4619      	mov	r1, r3
   50a2a:	f7ff ff70 	bl	5090e <queue_insert>
}
   50a2e:	b003      	add	sp, #12
   50a30:	f85d fb04 	ldr.w	pc, [sp], #4

00050a34 <k_queue_append_list>:
{
   50a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   50a38:	4680      	mov	r8, r0
   50a3a:	4615      	mov	r5, r2
	CHECKIF(head == NULL || tail == NULL) {
   50a3c:	460c      	mov	r4, r1
   50a3e:	b3a9      	cbz	r1, 50aac <k_queue_append_list+0x78>
   50a40:	b3a2      	cbz	r2, 50aac <k_queue_append_list+0x78>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   50a42:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   50a46:	f04f 0320 	mov.w	r3, #32
   50a4a:	f3ef 8711 	mrs	r7, BASEPRI
   50a4e:	f383 8812 	msr	BASEPRI_MAX, r3
   50a52:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   50a56:	4630      	mov	r0, r6
   50a58:	f000 f9d0 	bl	50dfc <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   50a5c:	b168      	cbz	r0, 50a7a <k_queue_append_list+0x46>
   50a5e:	f04f 0900 	mov.w	r9, #0
	thread->base.swap_data = data;
   50a62:	6144      	str	r4, [r0, #20]
   50a64:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   50a68:	f000 f991 	bl	50d8e <z_ready_thread>
		head = *(void **)head;
   50a6c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   50a6e:	4630      	mov	r0, r6
   50a70:	f000 f9c4 	bl	50dfc <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   50a74:	b144      	cbz	r4, 50a88 <k_queue_append_list+0x54>
   50a76:	2800      	cmp	r0, #0
   50a78:	d1f3      	bne.n	50a62 <k_queue_append_list+0x2e>
	return list->tail;
   50a7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   50a7e:	b97b      	cbnz	r3, 50aa0 <k_queue_append_list+0x6c>
	list->head = node;
   50a80:	f8c8 4000 	str.w	r4, [r8]
	list->tail = node;
   50a84:	f8c8 5004 	str.w	r5, [r8, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   50a88:	2104      	movs	r1, #4
   50a8a:	f108 0010 	add.w	r0, r8, #16
   50a8e:	f000 fbf9 	bl	51284 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   50a92:	4630      	mov	r0, r6
   50a94:	4639      	mov	r1, r7
   50a96:	f7f7 febb 	bl	48810 <z_reschedule>
	return 0;
   50a9a:	2000      	movs	r0, #0
}
   50a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   50aa0:	681a      	ldr	r2, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   50aa2:	f002 0203 	and.w	r2, r2, #3
   50aa6:	4314      	orrs	r4, r2
   50aa8:	601c      	str	r4, [r3, #0]
}
   50aaa:	e7eb      	b.n	50a84 <k_queue_append_list+0x50>
		return -EINVAL;
   50aac:	f06f 0015 	mvn.w	r0, #21
   50ab0:	e7f4      	b.n	50a9c <k_queue_append_list+0x68>

00050ab2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   50ab2:	b15a      	cbz	r2, 50acc <z_impl_k_sem_init+0x1a>
   50ab4:	428a      	cmp	r2, r1
   50ab6:	d309      	bcc.n	50acc <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   50ab8:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   50abc:	e9c0 1202 	strd	r1, r2, [r0, #8]
   50ac0:	e9c0 0000 	strd	r0, r0, [r0]
   50ac4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   50ac8:	2000      	movs	r0, #0
   50aca:	4770      	bx	lr
		return -EINVAL;
   50acc:	f06f 0015 	mvn.w	r0, #21
}
   50ad0:	4770      	bx	lr

00050ad2 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   50ad2:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   50ad4:	2301      	movs	r3, #1
   50ad6:	408b      	lsls	r3, r1
   50ad8:	ea22 0303 	bic.w	r3, r2, r3
   50adc:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   50ade:	fa22 f001 	lsr.w	r0, r2, r1
}
   50ae2:	f000 0001 	and.w	r0, r0, #1
   50ae6:	4770      	bx	lr

00050ae8 <unschedule_locked>:
{
   50ae8:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   50aea:	2103      	movs	r1, #3
{
   50aec:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   50aee:	300c      	adds	r0, #12
   50af0:	f7ff ffef 	bl	50ad2 <flag_test_and_clear>
   50af4:	4604      	mov	r4, r0
   50af6:	b118      	cbz	r0, 50b00 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   50af8:	f105 0010 	add.w	r0, r5, #16
   50afc:	f000 f9f7 	bl	50eee <z_abort_timeout>
}
   50b00:	4620      	mov	r0, r4
   50b02:	bd38      	pop	{r3, r4, r5, pc}

00050b04 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   50b04:	b120      	cbz	r0, 50b10 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   50b06:	2200      	movs	r2, #0
   50b08:	4611      	mov	r1, r2
   50b0a:	3088      	adds	r0, #136	; 0x88
   50b0c:	f000 b9cc 	b.w	50ea8 <z_sched_wake>
}
   50b10:	4770      	bx	lr

00050b12 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   50b12:	68c3      	ldr	r3, [r0, #12]
{
   50b14:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   50b16:	f3c3 0540 	ubfx	r5, r3, #1, #1
   50b1a:	079b      	lsls	r3, r3, #30
{
   50b1c:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   50b1e:	d416      	bmi.n	50b4e <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   50b20:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   50b22:	2102      	movs	r1, #2
   50b24:	300c      	adds	r0, #12
   50b26:	f7ff ffd4 	bl	50ad2 <flag_test_and_clear>
   50b2a:	b180      	cbz	r0, 50b4e <cancel_async_locked+0x3c>
	return list->head;
   50b2c:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   50b30:	b16a      	cbz	r2, 50b4e <cancel_async_locked+0x3c>
   50b32:	4294      	cmp	r4, r2
   50b34:	d11b      	bne.n	50b6e <cancel_async_locked+0x5c>
	return node->next;
   50b36:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   50b38:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   50b3c:	b98d      	cbnz	r5, 50b62 <cancel_async_locked+0x50>
   50b3e:	428c      	cmp	r4, r1
	list->head = node;
   50b40:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   50b44:	d101      	bne.n	50b4a <cancel_async_locked+0x38>
	list->tail = node;
   50b46:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   50b4a:	2300      	movs	r3, #0
   50b4c:	6023      	str	r3, [r4, #0]
	return *flagp;
   50b4e:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   50b50:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   50b54:	bf1e      	ittt	ne
   50b56:	f043 0302 	orrne.w	r3, r3, #2
   50b5a:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   50b5c:	f040 0002 	orrne.w	r0, r0, #2
}
   50b60:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   50b62:	428c      	cmp	r4, r1
	parent->next = child;
   50b64:	602a      	str	r2, [r5, #0]
	list->tail = node;
   50b66:	bf08      	it	eq
   50b68:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   50b6c:	e7ed      	b.n	50b4a <cancel_async_locked+0x38>
	return node->next;
   50b6e:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   50b70:	6812      	ldr	r2, [r2, #0]
   50b72:	e7dd      	b.n	50b30 <cancel_async_locked+0x1e>

00050b74 <work_timeout>:
{
   50b74:	b573      	push	{r0, r1, r4, r5, r6, lr}
   50b76:	4604      	mov	r4, r0
   50b78:	f04f 0320 	mov.w	r3, #32
   50b7c:	f3ef 8511 	mrs	r5, BASEPRI
   50b80:	f383 8812 	msr	BASEPRI_MAX, r3
   50b84:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   50b88:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   50b8a:	f1a0 0610 	sub.w	r6, r0, #16
   50b8e:	2103      	movs	r1, #3
   50b90:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   50b92:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   50b94:	f7ff ff9d 	bl	50ad2 <flag_test_and_clear>
   50b98:	b128      	cbz	r0, 50ba6 <work_timeout+0x32>
		queue = dw->queue;
   50b9a:	69a3      	ldr	r3, [r4, #24]
   50b9c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   50b9e:	a901      	add	r1, sp, #4
   50ba0:	4630      	mov	r0, r6
   50ba2:	f7f7 fb91 	bl	482c8 <submit_to_queue_locked>
	__asm__ volatile(
   50ba6:	f385 8811 	msr	BASEPRI, r5
   50baa:	f3bf 8f6f 	isb	sy
}
   50bae:	b002      	add	sp, #8
   50bb0:	bd70      	pop	{r4, r5, r6, pc}

00050bb2 <k_work_init>:
{
   50bb2:	b538      	push	{r3, r4, r5, lr}
   50bb4:	4604      	mov	r4, r0
   50bb6:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   50bb8:	2210      	movs	r2, #16
   50bba:	2100      	movs	r1, #0
   50bbc:	f7fb f857 	bl	4bc6e <memset>
   50bc0:	6065      	str	r5, [r4, #4]
}
   50bc2:	bd38      	pop	{r3, r4, r5, pc}

00050bc4 <k_work_busy_get>:
	__asm__ volatile(
   50bc4:	f04f 0220 	mov.w	r2, #32
   50bc8:	f3ef 8311 	mrs	r3, BASEPRI
   50bcc:	f382 8812 	msr	BASEPRI_MAX, r2
   50bd0:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   50bd4:	68c0      	ldr	r0, [r0, #12]
   50bd6:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   50bda:	f383 8811 	msr	BASEPRI, r3
   50bde:	f3bf 8f6f 	isb	sy
}
   50be2:	4770      	bx	lr

00050be4 <k_work_submit_to_queue>:
{
   50be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   50be6:	9001      	str	r0, [sp, #4]
   50be8:	4608      	mov	r0, r1
	__asm__ volatile(
   50bea:	f04f 0320 	mov.w	r3, #32
   50bee:	f3ef 8511 	mrs	r5, BASEPRI
   50bf2:	f383 8812 	msr	BASEPRI_MAX, r3
   50bf6:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   50bfa:	a901      	add	r1, sp, #4
   50bfc:	f7f7 fb64 	bl	482c8 <submit_to_queue_locked>
   50c00:	4604      	mov	r4, r0
	__asm__ volatile(
   50c02:	f385 8811 	msr	BASEPRI, r5
   50c06:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   50c0a:	2800      	cmp	r0, #0
   50c0c:	dd04      	ble.n	50c18 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   50c0e:	f7f7 ff3f 	bl	48a90 <z_impl_k_is_preempt_thread>
   50c12:	b108      	cbz	r0, 50c18 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   50c14:	f7f7 fe9a 	bl	4894c <z_impl_k_yield>
}
   50c18:	4620      	mov	r0, r4
   50c1a:	b003      	add	sp, #12
   50c1c:	bd30      	pop	{r4, r5, pc}

00050c1e <k_work_init_delayable>:
{
   50c1e:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   50c20:	2230      	movs	r2, #48	; 0x30
{
   50c22:	4604      	mov	r4, r0
   50c24:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   50c26:	2100      	movs	r1, #0
   50c28:	f7fb f821 	bl	4bc6e <memset>
   50c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
   50c30:	6065      	str	r5, [r4, #4]
   50c32:	60e3      	str	r3, [r4, #12]
}
   50c34:	bd38      	pop	{r3, r4, r5, pc}

00050c36 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   50c36:	f7ff bfc5 	b.w	50bc4 <k_work_busy_get>

00050c3a <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   50c3a:	b538      	push	{r3, r4, r5, lr}
   50c3c:	4604      	mov	r4, r0
	__asm__ volatile(
   50c3e:	f04f 0320 	mov.w	r3, #32
   50c42:	f3ef 8511 	mrs	r5, BASEPRI
   50c46:	f383 8812 	msr	BASEPRI_MAX, r3
   50c4a:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   50c4e:	f7ff ff4b 	bl	50ae8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   50c52:	4620      	mov	r0, r4
   50c54:	f7ff ff5d 	bl	50b12 <cancel_async_locked>
	__asm__ volatile(
   50c58:	f385 8811 	msr	BASEPRI, r5
   50c5c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   50c60:	bd38      	pop	{r3, r4, r5, pc}

00050c62 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   50c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   50c64:	4604      	mov	r4, r0
   50c66:	460d      	mov	r5, r1
	__asm__ volatile(
   50c68:	f04f 0320 	mov.w	r3, #32
   50c6c:	f3ef 8611 	mrs	r6, BASEPRI
   50c70:	f383 8812 	msr	BASEPRI_MAX, r3
   50c74:	f3bf 8f6f 	isb	sy
	return *flagp;
   50c78:	68c3      	ldr	r3, [r0, #12]
   50c7a:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   50c7e:	2b00      	cmp	r3, #0
   50c80:	bf14      	ite	ne
   50c82:	2701      	movne	r7, #1
   50c84:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   50c86:	d105      	bne.n	50c94 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   50c88:	f386 8811 	msr	BASEPRI, r6
   50c8c:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   50c90:	4638      	mov	r0, r7
   50c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   50c94:	f7ff ff28 	bl	50ae8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   50c98:	4620      	mov	r0, r4
   50c9a:	f7ff ff3a 	bl	50b12 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   50c9e:	4629      	mov	r1, r5
   50ca0:	4620      	mov	r0, r4
   50ca2:	f7f7 faf3 	bl	4828c <cancel_sync_locked>
   50ca6:	f386 8811 	msr	BASEPRI, r6
   50caa:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   50cae:	2800      	cmp	r0, #0
   50cb0:	d0ee      	beq.n	50c90 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   50cb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   50cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   50cba:	f105 0008 	add.w	r0, r5, #8
   50cbe:	f7f7 f9fd 	bl	480bc <z_impl_k_sem_take>
   50cc2:	e7e5      	b.n	50c90 <k_work_cancel_delayable_sync+0x2e>

00050cc4 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   50cc4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   50cc8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   50cca:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   50ccc:	2300      	movs	r3, #0
	node->prev = NULL;
   50cce:	e9c0 3300 	strd	r3, r3, [r0]
}
   50cd2:	4770      	bx	lr

00050cd4 <unpend_thread_no_timeout>:
{
   50cd4:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   50cd6:	f7ff fff5 	bl	50cc4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   50cda:	7b43      	ldrb	r3, [r0, #13]
   50cdc:	f023 0302 	bic.w	r3, r3, #2
   50ce0:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   50ce2:	2300      	movs	r3, #0
   50ce4:	6083      	str	r3, [r0, #8]
}
   50ce6:	bd08      	pop	{r3, pc}

00050ce8 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   50ce8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   50cec:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   50cf0:	4283      	cmp	r3, r0
		return b2 - b1;
   50cf2:	bf14      	ite	ne
   50cf4:	1ac0      	subne	r0, r0, r3
	return 0;
   50cf6:	2000      	moveq	r0, #0
}
   50cf8:	4770      	bx	lr

00050cfa <z_thread_timeout>:
{
   50cfa:	b510      	push	{r4, lr}
   50cfc:	4601      	mov	r1, r0
	__asm__ volatile(
   50cfe:	f04f 0320 	mov.w	r3, #32
   50d02:	f3ef 8411 	mrs	r4, BASEPRI
   50d06:	f383 8812 	msr	BASEPRI_MAX, r3
   50d0a:	f3bf 8f6f 	isb	sy
		if (!killed) {
   50d0e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   50d12:	f013 0f28 	tst.w	r3, #40	; 0x28
   50d16:	d10d      	bne.n	50d34 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   50d18:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   50d1c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   50d1e:	b10b      	cbz	r3, 50d24 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   50d20:	f7ff ffd8 	bl	50cd4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   50d24:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   50d28:	f023 0314 	bic.w	r3, r3, #20
   50d2c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   50d30:	f7f7 fc30 	bl	48594 <ready_thread>
	__asm__ volatile(
   50d34:	f384 8811 	msr	BASEPRI, r4
   50d38:	f3bf 8f6f 	isb	sy
}
   50d3c:	bd10      	pop	{r4, pc}

00050d3e <add_to_waitq_locked>:
{
   50d3e:	b538      	push	{r3, r4, r5, lr}
   50d40:	4604      	mov	r4, r0
   50d42:	460d      	mov	r5, r1
	unready_thread(thread);
   50d44:	f7f7 fc5a 	bl	485fc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   50d48:	7b63      	ldrb	r3, [r4, #13]
   50d4a:	f043 0302 	orr.w	r3, r3, #2
   50d4e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   50d50:	b1e5      	cbz	r5, 50d8c <add_to_waitq_locked+0x4e>
	return list->head == list;
   50d52:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   50d54:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   50d56:	429d      	cmp	r5, r3
   50d58:	d109      	bne.n	50d6e <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   50d5a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   50d5c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   50d60:	601c      	str	r4, [r3, #0]
	list->tail = node;
   50d62:	606c      	str	r4, [r5, #4]
}
   50d64:	e012      	b.n	50d8c <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   50d66:	686a      	ldr	r2, [r5, #4]
   50d68:	4293      	cmp	r3, r2
   50d6a:	d0f6      	beq.n	50d5a <add_to_waitq_locked+0x1c>
   50d6c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   50d6e:	2b00      	cmp	r3, #0
   50d70:	d0f3      	beq.n	50d5a <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   50d72:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   50d76:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   50d7a:	428a      	cmp	r2, r1
   50d7c:	d0f3      	beq.n	50d66 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   50d7e:	4291      	cmp	r1, r2
   50d80:	ddf1      	ble.n	50d66 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   50d82:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   50d84:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   50d88:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   50d8a:	605c      	str	r4, [r3, #4]
}
   50d8c:	bd38      	pop	{r3, r4, r5, pc}

00050d8e <z_ready_thread>:
{
   50d8e:	b510      	push	{r4, lr}
	__asm__ volatile(
   50d90:	f04f 0320 	mov.w	r3, #32
   50d94:	f3ef 8411 	mrs	r4, BASEPRI
   50d98:	f383 8812 	msr	BASEPRI_MAX, r3
   50d9c:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   50da0:	f7f7 fbf8 	bl	48594 <ready_thread>
	__asm__ volatile(
   50da4:	f384 8811 	msr	BASEPRI, r4
   50da8:	f3bf 8f6f 	isb	sy
}
   50dac:	bd10      	pop	{r4, pc}

00050dae <z_unpend_thread_no_timeout>:
{
   50dae:	b508      	push	{r3, lr}
	__asm__ volatile(
   50db0:	f04f 0320 	mov.w	r3, #32
   50db4:	f3ef 8111 	mrs	r1, BASEPRI
   50db8:	f383 8812 	msr	BASEPRI_MAX, r3
   50dbc:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   50dc0:	f7ff ff88 	bl	50cd4 <unpend_thread_no_timeout>
	__asm__ volatile(
   50dc4:	f381 8811 	msr	BASEPRI, r1
   50dc8:	f3bf 8f6f 	isb	sy
}
   50dcc:	bd08      	pop	{r3, pc}

00050dce <z_unpend1_no_timeout>:
{
   50dce:	b508      	push	{r3, lr}
   50dd0:	4603      	mov	r3, r0
	__asm__ volatile(
   50dd2:	f04f 0220 	mov.w	r2, #32
   50dd6:	f3ef 8111 	mrs	r1, BASEPRI
   50dda:	f382 8812 	msr	BASEPRI_MAX, r2
   50dde:	f3bf 8f6f 	isb	sy
	return list->head == list;
   50de2:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   50de4:	4283      	cmp	r3, r0
   50de6:	d007      	beq.n	50df8 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   50de8:	b108      	cbz	r0, 50dee <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   50dea:	f7ff ff73 	bl	50cd4 <unpend_thread_no_timeout>
	__asm__ volatile(
   50dee:	f381 8811 	msr	BASEPRI, r1
   50df2:	f3bf 8f6f 	isb	sy
}
   50df6:	bd08      	pop	{r3, pc}
   50df8:	2000      	movs	r0, #0
   50dfa:	e7f8      	b.n	50dee <z_unpend1_no_timeout+0x20>

00050dfc <z_unpend_first_thread>:
{
   50dfc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   50dfe:	f04f 0320 	mov.w	r3, #32
   50e02:	f3ef 8511 	mrs	r5, BASEPRI
   50e06:	f383 8812 	msr	BASEPRI_MAX, r3
   50e0a:	f3bf 8f6f 	isb	sy
	return list->head == list;
   50e0e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   50e10:	42a0      	cmp	r0, r4
   50e12:	d00d      	beq.n	50e30 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   50e14:	b134      	cbz	r4, 50e24 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   50e16:	4620      	mov	r0, r4
   50e18:	f7ff ff5c 	bl	50cd4 <unpend_thread_no_timeout>
   50e1c:	f104 0018 	add.w	r0, r4, #24
   50e20:	f000 f865 	bl	50eee <z_abort_timeout>
	__asm__ volatile(
   50e24:	f385 8811 	msr	BASEPRI, r5
   50e28:	f3bf 8f6f 	isb	sy
}
   50e2c:	4620      	mov	r0, r4
   50e2e:	bd38      	pop	{r3, r4, r5, pc}
   50e30:	2400      	movs	r4, #0
   50e32:	e7f7      	b.n	50e24 <z_unpend_first_thread+0x28>

00050e34 <z_unpend_thread>:
{
   50e34:	b510      	push	{r4, lr}
	__asm__ volatile(
   50e36:	f04f 0320 	mov.w	r3, #32
   50e3a:	f3ef 8411 	mrs	r4, BASEPRI
   50e3e:	f383 8812 	msr	BASEPRI_MAX, r3
   50e42:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   50e46:	f7ff ff45 	bl	50cd4 <unpend_thread_no_timeout>
	__asm__ volatile(
   50e4a:	f384 8811 	msr	BASEPRI, r4
   50e4e:	f3bf 8f6f 	isb	sy
}
   50e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   50e56:	3018      	adds	r0, #24
   50e58:	f000 b849 	b.w	50eee <z_abort_timeout>

00050e5c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   50e5c:	4603      	mov	r3, r0
   50e5e:	b920      	cbnz	r0, 50e6a <z_reschedule_irqlock+0xe>
   50e60:	f3ef 8205 	mrs	r2, IPSR
   50e64:	b90a      	cbnz	r2, 50e6a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   50e66:	f7db bf1f 	b.w	2cca8 <arch_swap>
   50e6a:	f383 8811 	msr	BASEPRI, r3
   50e6e:	f3bf 8f6f 	isb	sy
}
   50e72:	4770      	bx	lr

00050e74 <z_reschedule_unlocked>:
	__asm__ volatile(
   50e74:	f04f 0320 	mov.w	r3, #32
   50e78:	f3ef 8011 	mrs	r0, BASEPRI
   50e7c:	f383 8812 	msr	BASEPRI_MAX, r3
   50e80:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   50e84:	f7ff bfea 	b.w	50e5c <z_reschedule_irqlock>

00050e88 <z_unpend_all>:
{
   50e88:	b538      	push	{r3, r4, r5, lr}
   50e8a:	4605      	mov	r5, r0
	int need_sched = 0;
   50e8c:	2000      	movs	r0, #0
	return list->head == list;
   50e8e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   50e90:	42a5      	cmp	r5, r4
   50e92:	d000      	beq.n	50e96 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   50e94:	b904      	cbnz	r4, 50e98 <z_unpend_all+0x10>
}
   50e96:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   50e98:	4620      	mov	r0, r4
   50e9a:	f7ff ffcb 	bl	50e34 <z_unpend_thread>
		z_ready_thread(thread);
   50e9e:	4620      	mov	r0, r4
   50ea0:	f7ff ff75 	bl	50d8e <z_ready_thread>
		need_sched = 1;
   50ea4:	2001      	movs	r0, #1
   50ea6:	e7f2      	b.n	50e8e <z_unpend_all+0x6>

00050ea8 <z_sched_wake>:
{
   50ea8:	b538      	push	{r3, r4, r5, lr}
   50eaa:	f04f 0320 	mov.w	r3, #32
   50eae:	f3ef 8511 	mrs	r5, BASEPRI
   50eb2:	f383 8812 	msr	BASEPRI_MAX, r3
   50eb6:	f3bf 8f6f 	isb	sy
	return list->head == list;
   50eba:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   50ebc:	42a0      	cmp	r0, r4
   50ebe:	d012      	beq.n	50ee6 <z_sched_wake+0x3e>
		if (thread != NULL) {
   50ec0:	b19c      	cbz	r4, 50eea <z_sched_wake+0x42>
   50ec2:	67e1      	str	r1, [r4, #124]	; 0x7c
   50ec4:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   50ec6:	4620      	mov	r0, r4
   50ec8:	f7ff ff04 	bl	50cd4 <unpend_thread_no_timeout>
   50ecc:	f104 0018 	add.w	r0, r4, #24
   50ed0:	f000 f80d 	bl	50eee <z_abort_timeout>
			ready_thread(thread);
   50ed4:	4620      	mov	r0, r4
   50ed6:	f7f7 fb5d 	bl	48594 <ready_thread>
			ret = true;
   50eda:	2001      	movs	r0, #1
	__asm__ volatile(
   50edc:	f385 8811 	msr	BASEPRI, r5
   50ee0:	f3bf 8f6f 	isb	sy
}
   50ee4:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   50ee6:	2000      	movs	r0, #0
   50ee8:	e7f8      	b.n	50edc <z_sched_wake+0x34>
   50eea:	4620      	mov	r0, r4
   50eec:	e7f6      	b.n	50edc <z_sched_wake+0x34>

00050eee <z_abort_timeout>:
{
   50eee:	b510      	push	{r4, lr}
	__asm__ volatile(
   50ef0:	f04f 0220 	mov.w	r2, #32
   50ef4:	f3ef 8411 	mrs	r4, BASEPRI
   50ef8:	f382 8812 	msr	BASEPRI_MAX, r2
   50efc:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   50f00:	6803      	ldr	r3, [r0, #0]
   50f02:	b13b      	cbz	r3, 50f14 <z_abort_timeout+0x26>
			remove_timeout(to);
   50f04:	f7f7 fe84 	bl	48c10 <remove_timeout>
			ret = 0;
   50f08:	2000      	movs	r0, #0
	__asm__ volatile(
   50f0a:	f384 8811 	msr	BASEPRI, r4
   50f0e:	f3bf 8f6f 	isb	sy
}
   50f12:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   50f14:	f06f 0015 	mvn.w	r0, #21
   50f18:	e7f7      	b.n	50f0a <z_abort_timeout+0x1c>

00050f1a <z_get_next_timeout_expiry>:
{
   50f1a:	b510      	push	{r4, lr}
	__asm__ volatile(
   50f1c:	f04f 0320 	mov.w	r3, #32
   50f20:	f3ef 8411 	mrs	r4, BASEPRI
   50f24:	f383 8812 	msr	BASEPRI_MAX, r3
   50f28:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   50f2c:	f7f7 fe48 	bl	48bc0 <next_timeout>
	__asm__ volatile(
   50f30:	f384 8811 	msr	BASEPRI, r4
   50f34:	f3bf 8f6f 	isb	sy
}
   50f38:	bd10      	pop	{r4, pc}

00050f3a <z_set_timeout_expiry>:
{
   50f3a:	b570      	push	{r4, r5, r6, lr}
   50f3c:	4604      	mov	r4, r0
   50f3e:	460d      	mov	r5, r1
	__asm__ volatile(
   50f40:	f04f 0320 	mov.w	r3, #32
   50f44:	f3ef 8611 	mrs	r6, BASEPRI
   50f48:	f383 8812 	msr	BASEPRI_MAX, r3
   50f4c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   50f50:	f7f7 fe36 	bl	48bc0 <next_timeout>
			      || (ticks <= next_to);
   50f54:	2801      	cmp	r0, #1
   50f56:	dd07      	ble.n	50f68 <z_set_timeout_expiry+0x2e>
   50f58:	42a0      	cmp	r0, r4
   50f5a:	db05      	blt.n	50f68 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   50f5c:	42a0      	cmp	r0, r4
   50f5e:	4629      	mov	r1, r5
   50f60:	bfa8      	it	ge
   50f62:	4620      	movge	r0, r4
   50f64:	f7f4 fdf4 	bl	45b50 <sys_clock_set_timeout>
	__asm__ volatile(
   50f68:	f386 8811 	msr	BASEPRI, r6
   50f6c:	f3bf 8f6f 	isb	sy
}
   50f70:	bd70      	pop	{r4, r5, r6, pc}

00050f72 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   50f72:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   50f74:	f7f7 ff40 	bl	48df8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   50f78:	bd08      	pop	{r3, pc}

00050f7a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   50f7a:	f7f7 bf3d 	b.w	48df8 <sys_clock_tick_get>

00050f7e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   50f7e:	b108      	cbz	r0, 50f84 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   50f80:	f7dc b92c 	b.w	2d1dc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   50f84:	4770      	bx	lr

00050f86 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   50f86:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   50f8a:	bf08      	it	eq
   50f8c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   50f90:	b538      	push	{r3, r4, r5, lr}
   50f92:	460c      	mov	r4, r1
   50f94:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   50f96:	d014      	beq.n	50fc2 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   50f98:	4308      	orrs	r0, r1
   50f9a:	d103      	bne.n	50fa4 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   50f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   50fa0:	f7f7 bf2a 	b.w	48df8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   50fa4:	f06f 0001 	mvn.w	r0, #1
   50fa8:	1b40      	subs	r0, r0, r5
   50faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   50fae:	eb63 0101 	sbc.w	r1, r3, r1
   50fb2:	2900      	cmp	r1, #0
   50fb4:	da04      	bge.n	50fc0 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   50fb6:	f7f7 ff1f 	bl	48df8 <sys_clock_tick_get>
   50fba:	1940      	adds	r0, r0, r5
   50fbc:	eb41 0104 	adc.w	r1, r1, r4
}
   50fc0:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   50fc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   50fc6:	4601      	mov	r1, r0
   50fc8:	e7fa      	b.n	50fc0 <sys_clock_timeout_end_calc+0x3a>

00050fca <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   50fca:	b510      	push	{r4, lr}
   50fcc:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   50fce:	f7ff ff8e 	bl	50eee <z_abort_timeout>

	if (inactive) {
   50fd2:	b9b0      	cbnz	r0, 51002 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   50fd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   50fd6:	b10b      	cbz	r3, 50fdc <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   50fd8:	4620      	mov	r0, r4
   50fda:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   50fdc:	f104 0018 	add.w	r0, r4, #24
   50fe0:	f7ff fef5 	bl	50dce <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   50fe4:	b168      	cbz	r0, 51002 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   50fe6:	f7ff fed2 	bl	50d8e <z_ready_thread>
	__asm__ volatile(
   50fea:	f04f 0320 	mov.w	r3, #32
   50fee:	f3ef 8011 	mrs	r0, BASEPRI
   50ff2:	f383 8812 	msr	BASEPRI_MAX, r3
   50ff6:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   50ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   50ffe:	f7ff bf2d 	b.w	50e5c <z_reschedule_irqlock>
   51002:	bd10      	pop	{r4, pc}

00051004 <add_event>:
{
   51004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   51006:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   51008:	e9d0 1300 	ldrd	r1, r3, [r0]
   5100c:	4288      	cmp	r0, r1
   5100e:	4604      	mov	r4, r0
   51010:	d105      	bne.n	5101e <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   51012:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   51014:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   51018:	601d      	str	r5, [r3, #0]
	list->tail = node;
   5101a:	6065      	str	r5, [r4, #4]
   5101c:	e01d      	b.n	5105a <add_event+0x56>
	if ((pending == NULL) ||
   5101e:	2b00      	cmp	r3, #0
   51020:	d0f7      	beq.n	51012 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   51022:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   51024:	b100      	cbz	r0, 51028 <add_event+0x24>
   51026:	3860      	subs	r0, #96	; 0x60
   51028:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   5102c:	4639      	mov	r1, r7
   5102e:	f7ff fe5b 	bl	50ce8 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   51032:	2800      	cmp	r0, #0
   51034:	dced      	bgt.n	51012 <add_event+0xe>
	return list->head == list;
   51036:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   51038:	42b4      	cmp	r4, r6
   5103a:	d0ea      	beq.n	51012 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   5103c:	2e00      	cmp	r6, #0
   5103e:	d0e8      	beq.n	51012 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   51040:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   51042:	b101      	cbz	r1, 51046 <add_event+0x42>
   51044:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   51046:	4638      	mov	r0, r7
   51048:	f7ff fe4e 	bl	50ce8 <z_sched_prio_cmp>
   5104c:	2800      	cmp	r0, #0
   5104e:	dd05      	ble.n	5105c <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   51050:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   51052:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   51056:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   51058:	6075      	str	r5, [r6, #4]
}
   5105a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   5105c:	6863      	ldr	r3, [r4, #4]
   5105e:	429e      	cmp	r6, r3
   51060:	d0d7      	beq.n	51012 <add_event+0xe>
   51062:	6836      	ldr	r6, [r6, #0]
   51064:	e7ea      	b.n	5103c <add_event+0x38>

00051066 <register_events>:
{
   51066:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   5106a:	2500      	movs	r5, #0
{
   5106c:	468b      	mov	fp, r1
   5106e:	4614      	mov	r4, r2
   51070:	461f      	mov	r7, r3
   51072:	4682      	mov	sl, r0
	int events_registered = 0;
   51074:	462e      	mov	r6, r5
	event->poller = NULL;
   51076:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   51078:	455d      	cmp	r5, fp
   5107a:	db02      	blt.n	51082 <register_events+0x1c>
}
   5107c:	4630      	mov	r0, r6
   5107e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51082:	f04f 0320 	mov.w	r3, #32
   51086:	f3ef 8911 	mrs	r9, BASEPRI
   5108a:	f383 8812 	msr	BASEPRI_MAX, r3
   5108e:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   51092:	f89a 300d 	ldrb.w	r3, [sl, #13]
   51096:	f003 031f 	and.w	r3, r3, #31
   5109a:	3b01      	subs	r3, #1
   5109c:	2b07      	cmp	r3, #7
   5109e:	d80f      	bhi.n	510c0 <register_events+0x5a>
   510a0:	e8df f003 	tbb	[pc, r3]
   510a4:	0a0e041e 	.word	0x0a0e041e
   510a8:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   510ac:	f8da 3010 	ldr.w	r3, [sl, #16]
   510b0:	689b      	ldr	r3, [r3, #8]
   510b2:	b12b      	cbz	r3, 510c0 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   510b4:	2302      	movs	r3, #2
   510b6:	e020      	b.n	510fa <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   510b8:	f8da 3010 	ldr.w	r3, [sl, #16]
   510bc:	681b      	ldr	r3, [r3, #0]
   510be:	bb8b      	cbnz	r3, 51124 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   510c0:	bb47      	cbnz	r7, 51114 <register_events+0xae>
   510c2:	7823      	ldrb	r3, [r4, #0]
   510c4:	b333      	cbz	r3, 51114 <register_events+0xae>
	switch (event->type) {
   510c6:	f89a 300d 	ldrb.w	r3, [sl, #13]
   510ca:	f003 031f 	and.w	r3, r3, #31
   510ce:	3b01      	subs	r3, #1
   510d0:	2b07      	cmp	r3, #7
   510d2:	d830      	bhi.n	51136 <register_events+0xd0>
   510d4:	e8df f003 	tbb	[pc, r3]
   510d8:	282f2833 	.word	0x282f2833
   510dc:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   510e0:	f8da 3010 	ldr.w	r3, [sl, #16]
   510e4:	689b      	ldr	r3, [r3, #8]
   510e6:	2b00      	cmp	r3, #0
   510e8:	d0ea      	beq.n	510c0 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   510ea:	2301      	movs	r3, #1
   510ec:	e005      	b.n	510fa <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   510ee:	f8da 3010 	ldr.w	r3, [sl, #16]
   510f2:	6a1b      	ldr	r3, [r3, #32]
   510f4:	2b00      	cmp	r3, #0
   510f6:	d0e3      	beq.n	510c0 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   510f8:	2310      	movs	r3, #16
	event->state |= state;
   510fa:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   510fe:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   51102:	f3c2 3145 	ubfx	r1, r2, #13, #6
   51106:	430b      	orrs	r3, r1
   51108:	f363 3252 	bfi	r2, r3, #13, #6
   5110c:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   51110:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   51114:	f389 8811 	msr	BASEPRI, r9
   51118:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   5111c:	3501      	adds	r5, #1
   5111e:	f10a 0a14 	add.w	sl, sl, #20
   51122:	e7a9      	b.n	51078 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   51124:	2304      	movs	r3, #4
   51126:	e7e8      	b.n	510fa <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   51128:	f8da 0010 	ldr.w	r0, [sl, #16]
   5112c:	4622      	mov	r2, r4
   5112e:	4651      	mov	r1, sl
   51130:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   51132:	f7ff ff67 	bl	51004 <add_event>
	event->poller = poller;
   51136:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   5113a:	3601      	adds	r6, #1
   5113c:	e7ea      	b.n	51114 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   5113e:	f8da 0010 	ldr.w	r0, [sl, #16]
   51142:	4622      	mov	r2, r4
   51144:	4651      	mov	r1, sl
   51146:	e7f4      	b.n	51132 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   51148:	f8da 0010 	ldr.w	r0, [sl, #16]
   5114c:	4622      	mov	r2, r4
   5114e:	4651      	mov	r1, sl
   51150:	3024      	adds	r0, #36	; 0x24
   51152:	e7ee      	b.n	51132 <register_events+0xcc>

00051154 <signal_poll_event>:
{
   51154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   51158:	6884      	ldr	r4, [r0, #8]
{
   5115a:	4605      	mov	r5, r0
   5115c:	460e      	mov	r6, r1
	if (poller != NULL) {
   5115e:	b144      	cbz	r4, 51172 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   51160:	7863      	ldrb	r3, [r4, #1]
   51162:	2b01      	cmp	r3, #1
   51164:	d12e      	bne.n	511c4 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   51166:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   5116a:	f013 0302 	ands.w	r3, r3, #2
   5116e:	d10a      	bne.n	51186 <signal_poll_event+0x32>
		poller->is_polling = false;
   51170:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   51172:	68eb      	ldr	r3, [r5, #12]
   51174:	f3c3 3245 	ubfx	r2, r3, #13, #6
   51178:	4316      	orrs	r6, r2
	event->poller = NULL;
   5117a:	2000      	movs	r0, #0
	event->state |= state;
   5117c:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   51180:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   51182:	60eb      	str	r3, [r5, #12]
	return retcode;
   51184:	e03e      	b.n	51204 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   51186:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   5118a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   5118e:	bf08      	it	eq
   51190:	f112 0f02 	cmneq.w	r2, #2
   51194:	d032      	beq.n	511fc <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   51196:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   5119a:	4640      	mov	r0, r8
   5119c:	f7ff fe4a 	bl	50e34 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   511a0:	2e08      	cmp	r6, #8
   511a2:	bf0c      	ite	eq
   511a4:	f06f 0303 	mvneq.w	r3, #3
   511a8:	2300      	movne	r3, #0
   511aa:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   511ac:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   511b0:	06db      	lsls	r3, r3, #27
   511b2:	d109      	bne.n	511c8 <signal_poll_event+0x74>
   511b4:	f854 7c48 	ldr.w	r7, [r4, #-72]
   511b8:	b937      	cbnz	r7, 511c8 <signal_poll_event+0x74>
	z_ready_thread(thread);
   511ba:	4640      	mov	r0, r8
   511bc:	f7ff fde7 	bl	50d8e <z_ready_thread>
		poller->is_polling = false;
   511c0:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   511c2:	e7d6      	b.n	51172 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   511c4:	2b02      	cmp	r3, #2
   511c6:	d001      	beq.n	511cc <signal_poll_event+0x78>
		poller->is_polling = false;
   511c8:	2300      	movs	r3, #0
   511ca:	e7d1      	b.n	51170 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   511cc:	7823      	ldrb	r3, [r4, #0]
   511ce:	2b00      	cmp	r3, #0
   511d0:	d0cf      	beq.n	51172 <signal_poll_event+0x1e>
   511d2:	f854 7c04 	ldr.w	r7, [r4, #-4]
   511d6:	2f00      	cmp	r7, #0
   511d8:	d0f2      	beq.n	511c0 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   511da:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   511de:	f1a4 0914 	sub.w	r9, r4, #20
   511e2:	f104 0014 	add.w	r0, r4, #20
   511e6:	f7ff fe82 	bl	50eee <z_abort_timeout>
		twork->poll_result = 0;
   511ea:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   511ee:	4649      	mov	r1, r9
   511f0:	4638      	mov	r0, r7
   511f2:	f7ff fcf7 	bl	50be4 <k_work_submit_to_queue>
		poller->is_polling = false;
   511f6:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   511fa:	e7ba      	b.n	51172 <signal_poll_event+0x1e>
		poller->is_polling = false;
   511fc:	2300      	movs	r3, #0
   511fe:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   51200:	f06f 000a 	mvn.w	r0, #10
}
   51204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00051208 <clear_event_registrations>:
	while (num_events--) {
   51208:	2314      	movs	r3, #20
{
   5120a:	b5f0      	push	{r4, r5, r6, r7, lr}
   5120c:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   51210:	2400      	movs	r4, #0
	switch (event->type) {
   51212:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   51216:	b901      	cbnz	r1, 5121a <clear_event_registrations+0x12>
}
   51218:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   5121a:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   5121e:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   51222:	f003 031f 	and.w	r3, r3, #31
   51226:	2b08      	cmp	r3, #8
   51228:	f1a0 0714 	sub.w	r7, r0, #20
   5122c:	d80c      	bhi.n	51248 <clear_event_registrations+0x40>
   5122e:	fa26 f303 	lsr.w	r3, r6, r3
   51232:	07db      	lsls	r3, r3, #31
   51234:	d508      	bpl.n	51248 <clear_event_registrations+0x40>
	return node->next != NULL;
   51236:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   5123a:	b12b      	cbz	r3, 51248 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   5123c:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   51240:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   51242:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   51244:	e940 4405 	strd	r4, r4, [r0, #-20]
   51248:	f382 8811 	msr	BASEPRI, r2
   5124c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   51250:	f04f 0320 	mov.w	r3, #32
   51254:	f3ef 8211 	mrs	r2, BASEPRI
   51258:	f383 8812 	msr	BASEPRI_MAX, r3
   5125c:	f3bf 8f6f 	isb	sy
   51260:	3901      	subs	r1, #1
   51262:	4638      	mov	r0, r7
   51264:	e7d7      	b.n	51216 <clear_event_registrations+0xe>

00051266 <k_poll_event_init>:
{
   51266:	b510      	push	{r4, lr}
	event->type = type;
   51268:	04d2      	lsls	r2, r2, #19
   5126a:	0209      	lsls	r1, r1, #8
   5126c:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   51270:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   51274:	430a      	orrs	r2, r1
   51276:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   51278:	2400      	movs	r4, #0
	event->type = type;
   5127a:	430a      	orrs	r2, r1
	event->obj = obj;
   5127c:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   51280:	6084      	str	r4, [r0, #8]
}
   51282:	bd10      	pop	{r4, pc}

00051284 <z_handle_obj_poll_events>:
{
   51284:	4603      	mov	r3, r0
	return list->head == list;
   51286:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   51288:	4283      	cmp	r3, r0
   5128a:	d008      	beq.n	5129e <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   5128c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   51290:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   51292:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   51294:	2300      	movs	r3, #0
	node->prev = NULL;
   51296:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   5129a:	f7ff bf5b 	b.w	51154 <signal_poll_event>
}
   5129e:	4770      	bx	lr

000512a0 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   512a0:	3204      	adds	r2, #4
{
   512a2:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   512a4:	4604      	mov	r4, r0
   512a6:	d208      	bcs.n	512ba <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   512a8:	2600      	movs	r6, #0
   512aa:	2700      	movs	r7, #0
   512ac:	e9cd 6700 	strd	r6, r7, [sp]
   512b0:	f041 0104 	orr.w	r1, r1, #4
   512b4:	f7ff fa83 	bl	507be <k_heap_aligned_alloc>
	if (mem == NULL) {
   512b8:	b910      	cbnz	r0, 512c0 <z_heap_aligned_alloc+0x20>
		return NULL;
   512ba:	2000      	movs	r0, #0
}
   512bc:	b002      	add	sp, #8
   512be:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   512c0:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   512c4:	e7fa      	b.n	512bc <z_heap_aligned_alloc+0x1c>

000512c6 <k_free>:
	if (ptr != NULL) {
   512c6:	b120      	cbz	r0, 512d2 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   512c8:	1f01      	subs	r1, r0, #4
   512ca:	f850 0c04 	ldr.w	r0, [r0, #-4]
   512ce:	f7ff bab7 	b.w	50840 <k_heap_free>
}
   512d2:	4770      	bx	lr

000512d4 <k_malloc>:
{
   512d4:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   512d6:	2004      	movs	r0, #4
   512d8:	f7f7 bebc 	b.w	49054 <k_aligned_alloc>

000512dc <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   512dc:	4770      	bx	lr
	...

000512e0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   512e0:	f7f4 bc8c 	b.w	45bfc <SystemInit>
